{"sha": "991395ab4fdc4f912b37616c6ed3e51efa4a831e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxMzk1YWI0ZmRjNGY5MTJiMzc2MTZjNmVkM2U1MWVmYTRhODMxZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T12:09:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T12:09:35Z"}, "message": "[multiple changes]\n\n2009-04-15  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.h (__gnat_unlink): Add spec.\n\t(__gnat_rename): Likewise.\n\n2009-04-15  Vincent Celier  <celier@adacore.com>\n\n\t* prj-nmsc.adb: Minor spelling error corrections in error messages\n\n2009-04-15  Robert Dewar  <dewar@adacore.com>\n\n\t* sinfo.ads: Minor comment update\n\n\t* opt.ads: Minor comment updates\n\n\t* checks.adb (Enable_Overflow_Check): Do not set Do_Overflow_Check for\n\tmodular type.\n\n2009-04-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_disp.ads, exp_disp.adb (Register_Primitive): Is now a function\n\tthat generates the code needed to update a dispatch table when a\n\tprimitive operation is declared with a subprogram body without previous\n\tspec. Insertion of the generated code is responsibility of the caller.\n\t(Make_DT): When building static tables, append the code created by\n\tRegister_Primitive to update a secondary table after it has been\n\tconstructed.\n\n\t* exp_ch3.adb, exp_ch6.adb: use new version of Register_Primitive.\n\n\t* sem_disp.adb (Check_Dispatching_Operation): Call Register_Primitive\n\ton an overriding operation that implements an interface operation only\n\tif not building static dispatch tables.\n\n2009-04-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* a-caldel-vms.adb (To_Duration): Declare a \"safe\" end of time which\n\tdoes not cause overflow when converted to Duration. Use the safe value\n\tas the maximum allowable time delay..\n\n2009-04-15  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* g-comlin.adb (Set_Command_Line): When adding a switch with attached\n\tparameter, specify that the delimiter is NUL, otherwise \"-j2\" will be\n\ttranslated to \"-j 2\".\n\n2009-04-15  Bob Duff  <duff@adacore.com>\n\n\t* rtsfind.adb (Maybe_Add_With): Split out procedure to add implicit\n\twith_clauses, to avoid code duplication. Change this processing so we\n\talways add a with_clause on the main unit if needed.\n\nFrom-SVN: r146102", "tree": {"sha": "f283f72c27bacac58c6a01f656294c7d8e83a5d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f283f72c27bacac58c6a01f656294c7d8e83a5d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/991395ab4fdc4f912b37616c6ed3e51efa4a831e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991395ab4fdc4f912b37616c6ed3e51efa4a831e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991395ab4fdc4f912b37616c6ed3e51efa4a831e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991395ab4fdc4f912b37616c6ed3e51efa4a831e/comments", "author": null, "committer": null, "parents": [{"sha": "55cc1a0524a460e8b224878114842463100b0e0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55cc1a0524a460e8b224878114842463100b0e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55cc1a0524a460e8b224878114842463100b0e0e"}], "stats": {"total": 342, "additions": 209, "deletions": 133}, "files": [{"sha": "9cf4008ac4691f044a62110b6259d3cdf5d71496", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -1,3 +1,55 @@\n+2009-04-15  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.h (__gnat_unlink): Add spec.\n+\t(__gnat_rename): Likewise.\n+\n+2009-04-15  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-nmsc.adb: Minor spelling error corrections in error messages\n+\n+2009-04-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sinfo.ads: Minor comment update\n+\n+\t* opt.ads: Minor comment updates\n+\n+\t* checks.adb (Enable_Overflow_Check): Do not set Do_Overflow_Check for\n+\tmodular type.\n+\n+2009-04-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_disp.ads, exp_disp.adb (Register_Primitive): Is now a function\n+\tthat generates the code needed to update a dispatch table when a\n+\tprimitive operation is declared with a subprogram body without previous\n+\tspec. Insertion of the generated code is responsibility of the caller.\n+\t(Make_DT): When building static tables, append the code created by\n+\tRegister_Primitive to update a secondary table after it has been\n+\tconstructed.\n+\n+\t* exp_ch3.adb, exp_ch6.adb: use new version of Register_Primitive.\n+\n+\t* sem_disp.adb (Check_Dispatching_Operation): Call Register_Primitive\n+\ton an overriding operation that implements an interface operation only\n+\tif not building static dispatch tables.\n+\n+2009-04-15  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-caldel-vms.adb (To_Duration): Declare a \"safe\" end of time which\n+\tdoes not cause overflow when converted to Duration. Use the safe value\n+\tas the maximum allowable time delay..\n+\n+2009-04-15  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* g-comlin.adb (Set_Command_Line): When adding a switch with attached\n+\tparameter, specify that the delimiter is NUL, otherwise \"-j2\" will be\n+\ttranslated to \"-j 2\".\n+\n+2009-04-15  Bob Duff  <duff@adacore.com>\n+\n+\t* rtsfind.adb (Maybe_Add_With): Split out procedure to add implicit\n+\twith_clauses, to avoid code duplication. Change this processing so we\n+\talways add a with_clause on the main unit if needed.\n+\n 2009-04-15  Pascal Obry  <obry@adacore.com>\n \n \tAdd support for Win32 native encoding for delete/rename routines."}, {"sha": "8b7715744d6a492a6d76b0ca0093b7695a493eed", "filename": "gcc/ada/a-caldel-vms.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fa-caldel-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fa-caldel-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-caldel-vms.adb?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -75,8 +75,20 @@ package body Ada.Calendar.Delays is\n    -----------------\n \n    function To_Duration (T : Time) return Duration is\n+      Safe_Ada_High : constant Time := Time_Of (2250, 1, 1, 0.0);\n+      --  A value distant enough to emulate \"end of time\" but which does not\n+      --  cause overflow.\n+\n+      Safe_T : Time;\n+\n    begin\n-      return OSP.To_Duration (OSP.OS_Time (T), OSP.Absolute_Calendar);\n+      if T > Safe_Ada_High then\n+         Safe_T := Safe_Ada_High;\n+      else\n+         Safe_T := T;\n+      end if;\n+\n+      return OSP.To_Duration (OSP.OS_Time (Safe_T), OSP.Absolute_Calendar);\n    end To_Duration;\n \n    --------------------"}, {"sha": "925143c9354856ba86a4bdb879d1aeea82a60f0c", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -70,6 +70,9 @@ extern int    __gnat_open_new_temp\t\t   (char *, int);\n extern int    __gnat_mkdir\t\t\t   (char *);\n extern int    __gnat_stat\t\t\t   (char *,\n \t\t\t\t\t\t    struct stat *);\n+extern int    __gnat_unlink                        (char *);\n+extern int    __gnat_rename                        (char *, char *);\n+\n extern FILE  *__gnat_fopen\t\t\t   (char *, char *, int);\n extern FILE  *__gnat_freopen\t\t\t   (char *, char *, FILE *,\n \t\t\t\t                    int);"}, {"sha": "39f63f3a383f55d673fc321607c31ba660da7531", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -3568,6 +3568,11 @@ package body Checks is\n       then\n          return;\n \n+      --  Nothing to do for unsigned integer types, which do not overflow\n+\n+      elsif Is_Modular_Integer_Type (Typ) then\n+         return;\n+\n       --  Nothing to do if the range of the result is known OK. We skip this\n       --  for conversions, since the caller already did the check, and in any\n       --  case the condition for deleting the check for a type conversion is"}, {"sha": "b9b0054fb03f72a20301dd6253ed014a961f98b3", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -2394,9 +2394,8 @@ package body Exp_Ch3 is\n                           and then Convention (Prim) = Convention_CPP\n                           and then not Present (Interface_Alias (Prim))\n                         then\n-                           Register_Primitive (Loc,\n-                             Prim    => Prim,\n-                             Ins_Nod => Last (Init_Tags_List));\n+                           Append_List_To (Init_Tags_List,\n+                             Register_Primitive (Loc, Prim => Prim));\n                         end if;\n \n                         Next_Elmt (E);"}, {"sha": "4bab3d2694b6ee72a3f60036139c203d8a65d70f", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -4911,9 +4911,8 @@ package body Exp_Ch6 is\n                      Register_Predefined_DT_Entry (Subp);\n                   end if;\n \n-                  Register_Primitive (Loc,\n-                    Prim    => Subp,\n-                    Ins_Nod => N);\n+                  Insert_Actions_After (N,\n+                    Register_Primitive (Loc, Prim => Subp));\n                end if;\n             end if;\n          end;"}, {"sha": "3d9a4ad5f2fb60c77b0d35fe69a0f8cc92ef9650", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -6273,17 +6273,16 @@ package body Exp_Disp is\n    -- Register_Primitive --\n    ------------------------\n \n-   procedure Register_Primitive\n+   function Register_Primitive\n      (Loc     : Source_Ptr;\n-      Prim    : Entity_Id;\n-      Ins_Nod : Node_Id)\n+      Prim    : Entity_Id) return List_Id\n    is\n       DT_Ptr        : Entity_Id;\n       Iface_Prim    : Entity_Id;\n       Iface_Typ     : Entity_Id;\n       Iface_DT_Ptr  : Entity_Id;\n       Iface_DT_Elmt : Elmt_Id;\n-      L             : List_Id;\n+      L             : constant List_Id := New_List;\n       Pos           : Uint;\n       Tag           : Entity_Id;\n       Tag_Typ       : Entity_Id;\n@@ -6294,7 +6293,7 @@ package body Exp_Disp is\n       pragma Assert (not Restriction_Active (No_Dispatching_Calls));\n \n       if not RTE_Available (RE_Tag) then\n-         return;\n+         return L;\n       end if;\n \n       if not Present (Interface_Alias (Prim)) then\n@@ -6308,7 +6307,7 @@ package body Exp_Disp is\n             DT_Ptr :=\n               Node (Next_Elmt (First_Elmt (Access_Disp_Table (Tag_Typ))));\n \n-            Insert_After (Ins_Nod,\n+            Append_To (L,\n               Build_Set_Predefined_Prim_Op_Address (Loc,\n                 Tag_Node     => New_Reference_To (DT_Ptr, Loc),\n                 Position     => Pos,\n@@ -6324,7 +6323,7 @@ package body Exp_Disp is\n               and then RTE_Record_Component_Available (RE_Size_Func)\n             then\n                DT_Ptr := Node (First_Elmt (Access_Disp_Table (Tag_Typ)));\n-               Insert_After (Ins_Nod,\n+               Append_To (L,\n                  Build_Set_Size_Function (Loc,\n                    Tag_Node  => New_Reference_To (DT_Ptr, Loc),\n                    Size_Func => Prim));\n@@ -6334,7 +6333,7 @@ package body Exp_Disp is\n             pragma Assert (Pos /= Uint_0 and then Pos <= DT_Entry_Count (Tag));\n \n             DT_Ptr := Node (First_Elmt (Access_Disp_Table (Tag_Typ)));\n-            Insert_After (Ins_Nod,\n+            Append_To (L,\n               Build_Set_Prim_Op_Address (Loc,\n                 Typ          => Tag_Typ,\n                 Tag_Node     => New_Reference_To (DT_Ptr, Loc),\n@@ -6363,12 +6362,6 @@ package body Exp_Disp is\n          if not Is_Ancestor (Iface_Typ, Tag_Typ)\n            and then Present (Thunk_Code)\n          then\n-            --  Comment needed on why checks are suppressed. This is not just\n-            --  efficiency, but fundamental functionality (see 1.295 RH, which\n-            --  still does not answer this question) ???\n-\n-            Insert_Action (Ins_Nod, Thunk_Code, Suppress => All_Checks);\n-\n             --  Generate the code necessary to fill the appropriate entry of\n             --  the secondary dispatch table of Prim's controlling type with\n             --  Thunk_Id's address.\n@@ -6380,7 +6373,8 @@ package body Exp_Disp is\n             Iface_Prim := Interface_Alias (Prim);\n             Pos        := DT_Position (Iface_Prim);\n             Tag        := First_Tag_Component (Iface_Typ);\n-            L          := New_List;\n+\n+            Prepend_To (L, Thunk_Code);\n \n             if Is_Predefined_Dispatching_Operation (Prim)\n               or else Is_Predefined_Dispatching_Alias (Prim)\n@@ -6412,8 +6406,6 @@ package body Exp_Disp is\n                          Prefix => New_Reference_To (Alias (Prim), Loc),\n                          Attribute_Name  => Name_Unrestricted_Access))));\n \n-               Insert_Actions_After (Ins_Nod, L);\n-\n             else\n                pragma Assert (Pos /= Uint_0\n                  and then Pos <= DT_Entry_Count (Tag));\n@@ -6445,10 +6437,11 @@ package body Exp_Disp is\n                          Prefix => New_Reference_To (Alias (Prim), Loc),\n                          Attribute_Name => Name_Unrestricted_Access))));\n \n-               Insert_Actions_After (Ins_Nod, L);\n             end if;\n          end if;\n       end if;\n+\n+      return L;\n    end Register_Primitive;\n \n    -------------------------"}, {"sha": "ed8666952466f42e9bdba1a453f84a1cb44831a1", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -306,19 +306,22 @@ package Exp_Disp is\n    --  tagged types this routine imports the forward declaration of the tag\n    --  entity, that will be declared and exported by Make_DT.\n \n-   procedure Register_Primitive\n+   function Register_Primitive\n      (Loc     : Source_Ptr;\n-      Prim    : Entity_Id;\n-      Ins_Nod : Node_Id);\n-   --  Register Prim in the corresponding primary or secondary dispatch table.\n+      Prim    : Entity_Id) return List_Id;\n+   --  Build code to register Prim in the primary or secondary dispatch table.\n    --  If Prim is associated with a secondary dispatch table then generate also\n    --  its thunk and register it in the associated secondary dispatch table.\n    --  In general the dispatch tables are always generated by Make_DT and\n    --  Make_Secondary_DT; this routine is only used in two corner cases:\n+   --\n    --    1) To construct the dispatch table of a tagged type whose parent\n    --       is a CPP_Class (see Build_Init_Procedure).\n    --    2) To handle late overriding of dispatching operations (see\n-   --       Check_Dispatching_Operation).\n+   --       Check_Dispatching_Operation and Make_DT).\n+   --\n+   --  The caller is responsible for inserting the generated code in the\n+   --  proper place.\n \n    procedure Set_All_DT_Position (Typ : Entity_Id);\n    --  Set the DT_Position field for each primitive operation. In the CPP"}, {"sha": "1fbcda463db7c74edb648143cc4fcea61a97b52b", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -1277,7 +1277,7 @@ package body GNAT.Command_Line is\n \n                         if Separator (Parser) = ASCII.NUL then\n                            Add_Switch\n-                             (Cmd, Sw & Parameter (Parser), \"\");\n+                             (Cmd, Sw & Parameter (Parser), \"\", ASCII.NUL);\n                         else\n                            Add_Switch\n                              (Cmd, Sw, Parameter (Parser), Separator (Parser));"}, {"sha": "d35195df99f7ba92945b49e562571fd69497af4e", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -1316,14 +1316,14 @@ package Opt is\n    --  handlers that can never handle a local raise. This warning is only ever\n    --  generated if pragma Restrictions (No_Exception_Propagation) is set. The\n    --  default is not to generate the warnings except that if the source has\n-   --  at least one exception, and this restriction is set, and the warning\n-   --  was not explicitly turned off, then it is turned on by default.\n+   --  at least one exception handler, and this restriction is set, and the\n+   --  warning was not explicitly turned off, then it is turned on by default.\n \n    No_Warn_On_Non_Local_Exception : Boolean := False;\n    --  GNAT\n    --  This is set to True if the above warning is explicitly suppressed. We\n    --  use this to avoid turning it on by default when No_Exception_Propagation\n-   --  restriction is set.\n+   --  restriction is set and an exception handler is present.\n \n    Warn_On_Obsolescent_Feature : Boolean := False;\n    --  GNAT"}, {"sha": "e2d3b0183c8cbb20593fbd41cd072b828eb1e79e", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -746,8 +746,8 @@ package body Prj.Nmsc is\n       if Data.Qualifier = Dry and then Data.Source_Dirs /= Nil_String then\n          Error_Msg\n            (Project, In_Tree,\n-            \"an abstract project need to have no language, no sources or no \" &\n-            \"source directories\",\n+            \"an abstract project needs to have no language, no sources \" &\n+            \"or no source directories\",\n             Data.Location);\n       end if;\n \n@@ -5347,7 +5347,7 @@ package body Prj.Nmsc is\n             then\n                Error_Msg\n                  (Project, In_Tree,\n-                  \"a reference symbol file need to be defined\",\n+                  \"a reference symbol file needs to be defined\",\n                   Lib_Symbol_Policy.Location);\n             end if;\n "}, {"sha": "d4669791cc2662eef7c44bdbd48347255913a08d", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 95, "deletions": 88, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -79,11 +79,16 @@ package body Rtsfind is\n    --  the latter case it is critical to make a call to Set_RTU_Loaded to\n    --  ensure that the entry in this table reflects the load.\n \n+   --  Withed is True if an implicit with_clause has been added from some unit\n+   --  other than the main unit to this unit. Withed_By_Main is the same,\n+   --  except from the main unit.\n+\n    type RT_Unit_Table_Record is record\n-      Entity : Entity_Id;\n-      Uname  : Unit_Name_Type;\n-      Unum   : Unit_Number_Type;\n-      Withed : Boolean;\n+      Entity         : Entity_Id;\n+      Uname          : Unit_Name_Type;\n+      Unum           : Unit_Number_Type;\n+      Withed         : Boolean;\n+      Withed_By_Main : Boolean;\n    end record;\n \n    RT_Unit_Table : array (RTU_Id) of RT_Unit_Table_Record;\n@@ -106,22 +111,19 @@ package body Rtsfind is\n \n    RE_Table : array (RE_Id) of Entity_Id;\n \n-   --------------------------\n-   -- Generation of WITH's --\n-   --------------------------\n+   --------------------------------\n+   -- Generation of with_clauses --\n+   --------------------------------\n \n    --  When a unit is implicitly loaded as a result of a call to RTE, it is\n-   --  necessary to create an implicit WITH to ensure that the object is\n-   --  correctly loaded by the binder. We originally added such WITH clauses\n-   --  only if the extended main unit required them, and added them only to the\n-   --  extended main unit. They are currently added to whatever unit first\n-   --  needs them, which is not necessarily the main unit. This works because\n-   --  if the main unit requires some runtime unit also required by some other\n-   --  unit, the other unit's implicit WITH will force a correct elaboration\n-   --  order. This method is necessary for SofCheck Inspector.\n-\n-   --  The flag Withed in the unit table record is initially set to False. It\n-   --  is set True if a WITH has been generated for the corresponding unit.\n+   --  necessary to create one or two implicit with_clauses. We add such\n+   --  with_clauses to the extended main unit if needed, and also to whatever\n+   --  unit first needs them, which is not necessarily the main unit. The\n+   --  former ensures that the object is correctly loaded by the binder. The\n+   --  latter is necessary for SofCheck Inspector.\n+\n+   --  The flags Withed and Withed_By_Main in the unit table record are used to\n+   --  avoid duplicates.\n \n    -----------------------\n    -- Local Subprograms --\n@@ -178,6 +180,10 @@ package body Rtsfind is\n    --  If the unit is a child unit, build fully qualified name for use in\n    --  With_Clause.\n \n+   procedure Maybe_Add_With (E : RE_Id; U : in out RT_Unit_Table_Record);\n+   --  If necessary, add an implicit with_clause from the current unit to the\n+   --  one represented by E and U.\n+\n    procedure Output_Entity_Name (Id : RE_Id; Msg : String);\n    --  Output continuation error message giving qualified name of entity\n    --  corresponding to Id, appending the string given by Msg. This call\n@@ -661,8 +667,9 @@ package body Rtsfind is\n       --  Otherwise we need to load the unit, First build unit name\n       --  from the enumeration literal name in type RTU_Id.\n \n-      U.Uname  := Get_Unit_Name (U_Id);\n-      U.Withed := False;\n+      U.Uname          := Get_Unit_Name (U_Id);\n+      U.Withed         := False;\n+      U.Withed_By_Main := False;\n \n       --  Now do the load call, note that setting Error_Node to Empty is\n       --  a signal to Load_Unit that we will regard a failure to find the\n@@ -721,7 +728,7 @@ package body Rtsfind is\n \n          if not Analyzed (Cunit (U.Unum)) then\n \n-            --  If the unit is already loaded through a limited_with clause,\n+            --  If the unit is already loaded through a limited_with_clause,\n             --  the relevant entities must already be available. We do not\n             --  want to load and analyze the unit because this would create\n             --  a real semantic dependence when the purpose of the limited_with\n@@ -784,7 +791,66 @@ package body Rtsfind is\n       return Nam;\n    end Make_Unit_Name;\n \n-   -----------------------\n+   --------------------\n+   -- Maybe_Add_With --\n+   --------------------\n+\n+   procedure Maybe_Add_With (E : RE_Id; U : in out RT_Unit_Table_Record) is\n+      Is_Main : constant Boolean :=\n+        In_Extended_Main_Code_Unit (Cunit_Entity (Current_Sem_Unit));\n+\n+   begin\n+      --  We do not need to generate a with_clause for a call issued from\n+      --  RTE_Component_Available.\n+\n+      if RTE_Available_Call then\n+         return;\n+      end if;\n+\n+      --  If the current unit is the main one, add the with_clause unless it's\n+      --  already been done.\n+\n+      if Is_Main then\n+         if U.Withed_By_Main then\n+            return;\n+         else\n+            U.Withed_By_Main := True;\n+         end if;\n+\n+      --  If the current unit is not the main one, add the with_clause unless\n+      --  it's already been done for some non-main unit.\n+\n+      else\n+         if U.Withed then\n+            return;\n+         else\n+            U.Withed := True;\n+         end if;\n+      end if;\n+\n+      --  Here if we've decided to add the with_clause\n+\n+      declare\n+         Lib_Unit : constant Node_Id := Unit (Cunit (U.Unum));\n+         Withn    : constant Node_Id :=\n+           Make_With_Clause (Standard_Location,\n+             Name =>\n+               Make_Unit_Name\n+                 (E, Defining_Unit_Name (Specification (Lib_Unit))));\n+\n+      begin\n+         Set_Library_Unit          (Withn, Cunit (U.Unum));\n+         Set_Corresponding_Spec    (Withn, U.Entity);\n+         Set_First_Name            (Withn, True);\n+         Set_Implicit_With         (Withn, True);\n+\n+         Mark_Rewrite_Insertion (Withn);\n+         Append (Withn, Context_Items (Cunit (Current_Sem_Unit)));\n+         Check_Restriction_No_Dependence (Name (Withn), Current_Error_Node);\n+      end;\n+   end Maybe_Add_With;\n+\n+   ------------------------\n    -- Output_Entity_Name --\n    ------------------------\n \n@@ -1063,36 +1129,8 @@ package body Rtsfind is\n          end if;\n       end if;\n \n-      --  See if we have to generate a WITH for this entity. We generate a WITH\n-      --  if we have not already added the with. The WITH is added to the\n-      --  appropriate unit (the current one). We do not need to generate a WITH\n-      --  for a call issued from RTE_Available.\n-\n    <<Found>>\n-      if not U.Withed and then not RTE_Available_Call then\n-         U.Withed := True;\n-\n-         declare\n-            Withn    : Node_Id;\n-            Lib_Unit : Node_Id;\n-\n-         begin\n-            Lib_Unit := Unit (Cunit (U.Unum));\n-            Withn :=\n-              Make_With_Clause (Standard_Location,\n-                Name =>\n-                  Make_Unit_Name\n-                    (E, Defining_Unit_Name (Specification (Lib_Unit))));\n-            Set_Library_Unit          (Withn, Cunit (U.Unum));\n-            Set_Corresponding_Spec    (Withn, U.Entity);\n-            Set_First_Name            (Withn, True);\n-            Set_Implicit_With         (Withn, True);\n-\n-            Mark_Rewrite_Insertion (Withn);\n-            Append (Withn, Context_Items (Cunit (Current_Sem_Unit)));\n-            Check_Restriction_No_Dependence (Name (Withn), Current_Error_Node);\n-         end;\n-      end if;\n+      Maybe_Add_With (E, U);\n \n       Front_End_Inlining := Save_Front_End_Inlining;\n       return Check_CRT (E, RE_Table (E));\n@@ -1197,39 +1235,7 @@ package body Rtsfind is\n       --  If we didn't find the entity we want, something is wrong. The\n       --  appropriate action will be taken by Check_CRT when we exit.\n \n-      --  Generate a with-clause if the current unit is part of the extended\n-      --  main code unit, and if we have not already added the with. The clause\n-      --  is added to the appropriate unit (the current one). We do not need to\n-      --  generate it for a call issued from RTE_Component_Available.\n-\n-      if (not U.Withed)\n-        and then\n-          In_Extended_Main_Code_Unit (Cunit_Entity (Current_Sem_Unit))\n-        and then not RTE_Available_Call\n-      then\n-         U.Withed := True;\n-\n-         declare\n-            Withn    : Node_Id;\n-            Lib_Unit : Node_Id;\n-\n-         begin\n-            Lib_Unit := Unit (Cunit (U.Unum));\n-            Withn :=\n-              Make_With_Clause (Standard_Location,\n-                Name =>\n-                  Make_Unit_Name\n-                    (E, Defining_Unit_Name (Specification (Lib_Unit))));\n-            Set_Library_Unit          (Withn, Cunit (U.Unum));\n-            Set_Corresponding_Spec    (Withn, U.Entity);\n-            Set_First_Name            (Withn, True);\n-            Set_Implicit_With         (Withn, True);\n-\n-            Mark_Rewrite_Insertion (Withn);\n-            Append (Withn, Context_Items (Cunit (Current_Sem_Unit)));\n-            Check_Restriction_No_Dependence (Name (Withn), Current_Error_Node);\n-         end;\n-      end if;\n+      Maybe_Add_With (E, U);\n \n       Front_End_Inlining := Save_Front_End_Inlining;\n       return Check_CRT (E, Found_E);\n@@ -1334,10 +1340,11 @@ package body Rtsfind is\n                --  If entry is not set, set it now\n \n                if No (U.Entity) then\n-                  U.Entity := E;\n-                  U.Uname  := Get_Unit_Name (U_Id);\n-                  U.Unum   := Unum;\n-                  U.Withed := False;\n+                  U := (Entity         => E,\n+                        Uname          => Get_Unit_Name (U_Id),\n+                        Unum           => Unum,\n+                        Withed         => False,\n+                        Withed_By_Main => False);\n                end if;\n \n                return;"}, {"sha": "fc3db824aa28871a2af2e6f73d9ab0574c2f2b75", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -28,6 +28,7 @@ with Debug;    use Debug;\n with Elists;   use Elists;\n with Einfo;    use Einfo;\n with Exp_Disp; use Exp_Disp;\n+with Exp_Util; use Exp_Util;\n with Exp_Ch7;  use Exp_Ch7;\n with Exp_Tss;  use Exp_Tss;\n with Errout;   use Errout;\n@@ -835,9 +836,9 @@ package body Sem_Disp is\n                               end if;\n \n                            else\n-                              Register_Primitive (Sloc (Subp_Body),\n-                                Prim    => Subp,\n-                                Ins_Nod => Subp_Body);\n+                              Insert_Actions_After (Subp_Body,\n+                                Register_Primitive (Sloc (Subp_Body),\n+                                Prim    => Subp));\n                            end if;\n \n                            Generate_Reference (Tagged_Type, Subp, 'p', False);\n@@ -909,7 +910,9 @@ package body Sem_Disp is\n             --  Ada 2005 (AI-251): In case of late overriding of a primitive\n             --  that covers abstract interface subprograms we must register it\n             --  in all the secondary dispatch tables associated with abstract\n-            --  interfaces.\n+            --  interfaces. We do this now only if not building static tables.\n+            --  Otherwise the patch code is emitted after those tables are\n+            --  built, to prevent access_before_elaboration in gigi.\n \n             if Body_Is_Last_Primitive then\n                declare\n@@ -925,10 +928,10 @@ package body Sem_Disp is\n                      if Present (Alias (Prim))\n                        and then Present (Interface_Alias (Prim))\n                        and then Alias (Prim) = Subp\n+                       and then not Building_Static_DT (Tagged_Type)\n                      then\n-                        Register_Primitive (Sloc (Prim),\n-                          Prim    => Prim,\n-                          Ins_Nod => Subp_Body);\n+                        Insert_Actions_After (Subp_Body,\n+                          Register_Primitive (Sloc (Subp_Body), Prim => Prim));\n                      end if;\n \n                      Next_Elmt (Elmt);"}, {"sha": "ffb44d11a4316ca479b5f5f7b52381e291c7c164", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/991395ab4fdc4f912b37616c6ed3e51efa4a831e/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=991395ab4fdc4f912b37616c6ed3e51efa4a831e", "patch": "@@ -806,7 +806,7 @@ package Sinfo is\n    --    See also the description of Do_Range_Check for this case. The only\n    --    attribute references which use this flag are Pred and Succ, where it\n    --    means that the result should be checked for going outside the base\n-   --    range.\n+   --    range. Note that this flag is not set for modular types.\n \n    --  Do_Range_Check (Flag9-Sem)\n    --    This flag is set on an expression which appears in a context where a"}]}