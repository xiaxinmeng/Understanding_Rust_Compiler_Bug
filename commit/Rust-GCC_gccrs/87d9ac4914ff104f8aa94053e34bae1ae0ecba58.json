{"sha": "87d9ac4914ff104f8aa94053e34bae1ae0ecba58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdkOWFjNDkxNGZmMTA0ZjhhYTk0MDUzZTM0YmFlMWFlMGVjYmE1OA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-05-26T19:20:06Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-05-26T19:20:06Z"}, "message": "re PR c++/2823 (kde2/artsd miscompilation (part 1))\n\ncp:\n\tPR g++/2823\n\t* semantics.c (expand_body): Don't optimize thunks.\ntestsuite:\n\t* g++.old-deja/g++.other/optimize2.C: New file.\n\nFrom-SVN: r42650", "tree": {"sha": "40db25021bf2b7c29f335616fb7afe894dbba83f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40db25021bf2b7c29f335616fb7afe894dbba83f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87d9ac4914ff104f8aa94053e34bae1ae0ecba58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d9ac4914ff104f8aa94053e34bae1ae0ecba58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d9ac4914ff104f8aa94053e34bae1ae0ecba58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d9ac4914ff104f8aa94053e34bae1ae0ecba58/comments", "author": null, "committer": null, "parents": [{"sha": "3d04c7c6646c258957b07513217a973d0fd33f97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d04c7c6646c258957b07513217a973d0fd33f97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d04c7c6646c258957b07513217a973d0fd33f97"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "2792f45fd10ddcf7437f0729b8a6c212a023d8d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d9ac4914ff104f8aa94053e34bae1ae0ecba58/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d9ac4914ff104f8aa94053e34bae1ae0ecba58/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=87d9ac4914ff104f8aa94053e34bae1ae0ecba58", "patch": "@@ -1,3 +1,8 @@\n+2001-05-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR g++/2823\n+\t* semantics.c (expand_body): Don't optimize thunks.\n+\n 2001-05-25  Sam TH  <sam@uchicago.edu>\n \n \t* cp-tree.h lex.h: Fix header include guards."}, {"sha": "7425f98f67cd51c6d06db8f7edf603b2d0ec2e2f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d9ac4914ff104f8aa94053e34bae1ae0ecba58/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d9ac4914ff104f8aa94053e34bae1ae0ecba58/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=87d9ac4914ff104f8aa94053e34bae1ae0ecba58", "patch": "@@ -2397,8 +2397,13 @@ expand_body (fn)\n \n   timevar_push (TV_INTEGRATION);\n \n-  /* Optimize the body of the function before expanding it.  */\n-  optimize_function (fn);\n+  /* Optimize the body of the function before expanding it.  We do not\n+     optimize thunks, as (1) the backend tries to optimize the call to\n+     the thunkee, (b) the tree based inliner breaks that optimization,\n+     (c) virtual functions are rarely inlineable, and (d)\n+     ASM_OUTPUT_MI_THUNK is there to DTRT anyway.  */\n+  if (!DECL_THUNK_P (fn))\n+    optimize_function (fn);\n \n   timevar_pop (TV_INTEGRATION);\n   timevar_push (TV_EXPAND);"}, {"sha": "1b785bc9e18ace8c2258054207fac7de81f9ace1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d9ac4914ff104f8aa94053e34bae1ae0ecba58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d9ac4914ff104f8aa94053e34bae1ae0ecba58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87d9ac4914ff104f8aa94053e34bae1ae0ecba58", "patch": "@@ -1,3 +1,7 @@\n+2001-05-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/optimize2.C: New file.\n+\n 2001-05-25  Diego Novillo  <dnovillo@redhat.com>\n \n \t* gcc.c-torture/compile/20010518-2.c: New file."}, {"sha": "8a62b32233f6be124b538f8a1ea29cc1dfc09312", "filename": "gcc/testsuite/g++.old-deja/g++.other/optimize2.C", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d9ac4914ff104f8aa94053e34bae1ae0ecba58/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foptimize2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d9ac4914ff104f8aa94053e34bae1ae0ecba58/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foptimize2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foptimize2.C?ref=87d9ac4914ff104f8aa94053e34bae1ae0ecba58", "patch": "@@ -0,0 +1,74 @@\n+// Special g++ Options: -O2\n+// \n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 26 May 2001 <nathan@codesourcery.com>\n+\n+// Bug 2823. Inlineing the body of a thunk broke things. But that's\n+// rarely a sensible thing to do anyway.\n+\n+#include <cstdio>\n+#include <cstdlib>\n+\n+int objCount = 0;\n+\n+struct Thing\n+{\n+  int count;\n+\n+  Thing ();\n+  Thing (Thing const &src);\n+  \n+  ~Thing ();\n+  \n+};\n+\n+Thing::Thing ()\n+  :count (0)\n+{\n+  objCount++;\n+  std::printf (\"%p %s\\n\", (void *)this,__PRETTY_FUNCTION__);\n+}\n+\n+Thing::Thing (Thing const &src)\n+  :count (0)\n+{\n+  objCount++;\n+  std::printf (\"%p %s\\n\", (void *)this, __PRETTY_FUNCTION__);\n+}\n+\n+Thing::~Thing ()\n+{\n+  std::printf (\"%p %s\\n\", (void *)this, __PRETTY_FUNCTION__);\n+  if (count)\n+    std::abort ();\n+  count--;\n+  objCount--;\n+}\n+\n+void x(Thing name)\n+{\n+  // destruct name here\n+}\n+\n+class Base\n+{\n+  public:\n+  virtual void test(const Thing& s) = 0;\n+};\n+\n+class Impl : virtual public Base\n+{\n+  public:\n+  virtual void test(const Thing& s)\n+  {\n+    x(s); // copy construct temporary\n+  }\n+};\n+\n+int main()\n+{\n+  Impl *impl = new Impl();\n+  \n+  impl->test( Thing ());\t// This will use a thunk\n+  return objCount != 0;\n+}"}]}