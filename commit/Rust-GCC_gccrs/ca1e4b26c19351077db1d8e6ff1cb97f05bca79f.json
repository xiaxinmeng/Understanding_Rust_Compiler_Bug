{"sha": "ca1e4b26c19351077db1d8e6ff1cb97f05bca79f", "node_id": "C_kwDOANBUbNoAKGNhMWU0YjI2YzE5MzUxMDc3ZGIxZDhlNmZmMWNiOTdmMDViY2E3OWY", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-25T13:58:04Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-25T15:31:27Z"}, "message": "[PR middle-end/106432] Gracefully handle unsupported type in range_on_edge\n\nA cleaner approach to fix this PR has been suggested by Andrew, which\nis to just return false on range_on_edge for unsupported range types.\n\nTested on x86-64 Linux.\n\n\tPR middle-end/106432\n\ngcc/ChangeLog:\n\n\t* gimple-range.cc (gimple_ranger::range_on_edge): Return false\n\twhen the result range type is unsupported.", "tree": {"sha": "88a5e08d85d51282a80b574680b3e939bf8ce341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88a5e08d85d51282a80b574680b3e939bf8ce341"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca1e4b26c19351077db1d8e6ff1cb97f05bca79f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1e4b26c19351077db1d8e6ff1cb97f05bca79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1e4b26c19351077db1d8e6ff1cb97f05bca79f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1e4b26c19351077db1d8e6ff1cb97f05bca79f/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c6567b4090d9363f90b5c68e238e7d0964b6e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6567b4090d9363f90b5c68e238e7d0964b6e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c6567b4090d9363f90b5c68e238e7d0964b6e89"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "eb347eee45b553fa50f91034d4059454ccb2ccd6", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca1e4b26c19351077db1d8e6ff1cb97f05bca79f/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca1e4b26c19351077db1d8e6ff1cb97f05bca79f/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=ca1e4b26c19351077db1d8e6ff1cb97f05bca79f", "patch": "@@ -201,7 +201,9 @@ bool\n gimple_ranger::range_on_edge (vrange &r, edge e, tree name)\n {\n   Value_Range edge_range (TREE_TYPE (name));\n-  gcc_checking_assert (r.supports_type_p (TREE_TYPE (name)));\n+\n+  if (!r.supports_type_p (TREE_TYPE (name)))\n+    return false;\n \n   // Do not process values along abnormal edges.\n   if (e->flags & EDGE_ABNORMAL)"}]}