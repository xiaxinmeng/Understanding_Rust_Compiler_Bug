{"sha": "0e7edcd5ebda4d219143e42f6daaa9633779e71b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU3ZWRjZDVlYmRhNGQyMTkxNDNlNDJmNmRhYWE5NjMzNzc5ZTcxYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-11-26T18:24:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-26T18:24:54Z"}, "message": "re PR libstdc++/25913 (Client's isnormal function is broken by cmath)\n\n2007-11-26  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/25913\n\t* include/c_std/cmath (std::fpclassify, isfinite, isinf, isnan,\n\tisnormal, signbit, isgreater, isgreaterequal, isless, islessequal,\n\tislessgreater, isunordered): Guard with __enable_if and forward\n\twith __promote.\n\t* include/c_global/cmath: Likewise.\n\t* testsuite/26_numerics/headers/cmath/25913.cc: New.\n\n\t* include/c_std/cmath (__gnu_cxx::__capture_isfinite,\n\t__capture_isinf, __capture_isnan, __capture_isnormal,\n\t__capture_signbit, __capture_isgreater, __capture_isgreaterequal,\n\t__capture_isless, __capture_islessequal, __capture_islessgreater,\n\t__capture_isunordered): Remove.\n\t(std::isfinite, isinf, isnan, isnormal, signbit, isgreater,\n\tisgreaterequal, isless, islessequal, islessgreater, isunordered):\n\tForward to the corresponding builtin.\n\t* include/c_global/cmath: Likewise.\n\n\t* include/c_global/cmath (std::atan2, pow): Guard with __enable_if.\n\nFrom-SVN: r130443", "tree": {"sha": "253a8e89ce7d5885ccd6131af8d42a636a2d28a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/253a8e89ce7d5885ccd6131af8d42a636a2d28a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e7edcd5ebda4d219143e42f6daaa9633779e71b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7edcd5ebda4d219143e42f6daaa9633779e71b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7edcd5ebda4d219143e42f6daaa9633779e71b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7edcd5ebda4d219143e42f6daaa9633779e71b/comments", "author": null, "committer": null, "parents": [{"sha": "e072c21779512f4831d34f943e317a78749c4297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e072c21779512f4831d34f943e317a78749c4297", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e072c21779512f4831d34f943e317a78749c4297"}], "stats": {"total": 386, "additions": 237, "deletions": 149}, "files": [{"sha": "fab7ed50c2f5d007eb603d480011ebd6c03196f9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7edcd5ebda4d219143e42f6daaa9633779e71b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7edcd5ebda4d219143e42f6daaa9633779e71b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0e7edcd5ebda4d219143e42f6daaa9633779e71b", "patch": "@@ -1,3 +1,25 @@\n+2007-11-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/25913\n+\t* include/c_std/cmath (std::fpclassify, isfinite, isinf, isnan,\n+\tisnormal, signbit, isgreater, isgreaterequal, isless, islessequal,\n+\tislessgreater, isunordered): Guard with __enable_if and forward\n+\twith __promote.\n+\t* include/c_global/cmath: Likewise.\n+\t* testsuite/26_numerics/headers/cmath/25913.cc: New.\n+\n+\t* include/c_std/cmath (__gnu_cxx::__capture_isfinite,\n+\t__capture_isinf, __capture_isnan, __capture_isnormal,\n+\t__capture_signbit, __capture_isgreater, __capture_isgreaterequal,\n+\t__capture_isless, __capture_islessequal, __capture_islessgreater,\n+\t__capture_isunordered): Remove.\n+\t(std::isfinite, isinf, isnan, isnormal, signbit, isgreater,\n+\tisgreaterequal, isless, islessequal, islessgreater, isunordered):\n+\tForward to the corresponding builtin.\n+\t* include/c_global/cmath: Likewise.\n+\n+\t* include/c_global/cmath (std::atan2, pow): Guard with __enable_if.\n+\n 2007-11-25  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1_impl/unordered_map"}, {"sha": "f7be4d0fd0ac4aeedc6b4acc1b069a00f7fdb8de", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 88, "deletions": 75, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7edcd5ebda4d219143e42f6daaa9633779e71b/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7edcd5ebda4d219143e42f6daaa9633779e71b/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=0e7edcd5ebda4d219143e42f6daaa9633779e71b", "patch": "@@ -166,7 +166,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_atan2l(__y, __x); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     atan2(_Tp __y, _Up __x)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -377,7 +381,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   { return __builtin_powil(__x, __n); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     pow(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -478,55 +486,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     inline int\n     __capture_fpclassify(_Tp __f) { return fpclassify(__f); }\n \n-  template<typename _Tp>\n-    inline int\n-    __capture_isfinite(_Tp __f) { return isfinite(__f); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isinf(_Tp __f) { return isinf(__f); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isnan(_Tp __f) { return isnan(__f); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isnormal(_Tp __f) { return isnormal(__f); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_signbit(_Tp __f) { return signbit(__f); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isgreater(_Tp __f1, _Tp __f2)\n-    { return isgreater(__f1, __f2); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isgreaterequal(_Tp __f1, _Tp __f2)\n-    { return isgreaterequal(__f1, __f2); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isless(_Tp __f1, _Tp __f2) { return isless(__f1, __f2); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_islessequal(_Tp __f1, _Tp __f2)\n-    { return islessequal(__f1, __f2); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_islessgreater(_Tp __f1, _Tp __f2)\n-    { return islessgreater(__f1, __f2); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isunordered(_Tp __f1, _Tp __f2)\n-    { return isunordered(__f1, __f2); }\n-\n _GLIBCXX_END_NAMESPACE\n \n // Only undefine the C99 FP macros, if actually captured for namespace movement\n@@ -546,58 +505,112 @@ _GLIBCXX_END_NAMESPACE\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<typename _Tp>\n-    inline int\n-    fpclassify(_Tp __f) { return ::__gnu_cxx::__capture_fpclassify(__f); }\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n+    fpclassify(_Tp __f)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return ::__gnu_cxx::__capture_fpclassify(__type(__f));\n+    }\n \n   template<typename _Tp>\n-    inline int\n-    isfinite(_Tp __f) { return ::__gnu_cxx::__capture_isfinite(__f); }\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n+    isfinite(_Tp __f)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isfinite(__type(__f));\n+    }\n \n   template<typename _Tp>\n-    inline int\n-    isinf(_Tp __f) { return ::__gnu_cxx::__capture_isinf(__f); }\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n+    isinf(_Tp __f)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isinf(__type(__f));\n+    }\n \n   template<typename _Tp>\n-    inline int\n-    isnan(_Tp __f) { return ::__gnu_cxx::__capture_isnan(__f); }\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n+    isnan(_Tp __f)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isnan(__type(__f));\n+    }\n \n   template<typename _Tp>\n-    inline int\n-    isnormal(_Tp __f) { return ::__gnu_cxx::__capture_isnormal(__f); }\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n+    isnormal(_Tp __f)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isnormal(__type(__f));\n+    }\n \n   template<typename _Tp>\n-    inline int\n-    signbit(_Tp __f) { return ::__gnu_cxx::__capture_signbit(__f); }\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n+    signbit(_Tp __f)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_signbit(__type(__f));\n+    }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n     isgreater(_Tp __f1, _Tp __f2)\n-    { return ::__gnu_cxx::__capture_isgreater(__f1, __f2); }\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isgreater(__type(__f1), __type(__f2));\n+    }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n     isgreaterequal(_Tp __f1, _Tp __f2)\n-    { return ::__gnu_cxx::__capture_isgreaterequal(__f1, __f2); }\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isgreaterequal(__type(__f1), __type(__f2));\n+    }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n     isless(_Tp __f1, _Tp __f2)\n-    { return ::__gnu_cxx::__capture_isless(__f1, __f2); }\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isless(__type(__f1), __type(__f2));\n+    }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n     islessequal(_Tp __f1, _Tp __f2)\n-    { return ::__gnu_cxx::__capture_islessequal(__f1, __f2); }\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_islessequal(__type(__f1), __type(__f2));\n+    }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n     islessgreater(_Tp __f1, _Tp __f2)\n-    { return ::__gnu_cxx::__capture_islessgreater(__f1, __f2); }\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_islessgreater(__type(__f1), __type(__f2));\n+    }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n     isunordered(_Tp __f1, _Tp __f2)\n-    { return ::__gnu_cxx::__capture_isunordered(__f1, __f2); }\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isunordered(__type(__f1), __type(__f2));\n+    }\n \n _GLIBCXX_END_NAMESPACE\n "}, {"sha": "52c1d2a3505f3b21410ed9f7b34760ba23306b28", "filename": "libstdc++-v3/include/c_std/cmath", "status": "modified", "additions": 80, "deletions": 74, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7edcd5ebda4d219143e42f6daaa9633779e71b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7edcd5ebda4d219143e42f6daaa9633779e71b/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath?ref=0e7edcd5ebda4d219143e42f6daaa9633779e71b", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*- C forwarding header.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -467,55 +468,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     inline int\n     __capture_fpclassify(_Tp __f) { return fpclassify(__f); }\n \n-  template<typename _Tp>\n-    inline int\n-    __capture_isfinite(_Tp __f) { return isfinite(__f); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isinf(_Tp __f) { return isinf(__f); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isnan(_Tp __f) { return isnan(__f); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isnormal(_Tp __f) { return isnormal(__f); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_signbit(_Tp __f) { return signbit(__f); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isgreater(_Tp __f1, _Tp __f2)\n-    { return isgreater(__f1, __f2); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isgreaterequal(_Tp __f1, _Tp __f2)\n-    { return isgreaterequal(__f1, __f2); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isless(_Tp __f1, _Tp __f2) { return isless(__f1, __f2); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_islessequal(_Tp __f1, _Tp __f2)\n-    { return islessequal(__f1, __f2); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_islessgreater(_Tp __f1, _Tp __f2)\n-    { return islessgreater(__f1, __f2); }\n-\n-  template<typename _Tp>\n-    inline int\n-    __capture_isunordered(_Tp __f1, _Tp __f2)\n-    { return isunordered(__f1, __f2); }\n-\n _GLIBCXX_END_NAMESPACE\n \n // Only undefine the C99 FP macros, if actually captured for namespace movement\n@@ -535,58 +487,112 @@ _GLIBCXX_END_NAMESPACE\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<typename _Tp>\n-    inline int\n-    fpclassify(_Tp __f) { return ::__gnu_cxx::__capture_fpclassify(__f); }\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n+    fpclassify(_Tp __f)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return ::__gnu_cxx::__capture_fpclassify(__type(__f));\n+    }\n \n   template<typename _Tp>\n-    inline int\n-    isfinite(_Tp __f) { return ::__gnu_cxx::__capture_isfinite(__f); }\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n+    isfinite(_Tp __f)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isfinite(__type(__f));\n+    }\n \n   template<typename _Tp>\n-    inline int\n-    isinf(_Tp __f) { return ::__gnu_cxx::__capture_isinf(__f); }\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n+    isinf(_Tp __f)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isinf(__type(__f));\n+    }\n \n   template<typename _Tp>\n-    inline int\n-    isnan(_Tp __f) { return ::__gnu_cxx::__capture_isnan(__f); }\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n+    isnan(_Tp __f)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isnan(__type(__f));\n+    }\n \n   template<typename _Tp>\n-    inline int\n-    isnormal(_Tp __f) { return ::__gnu_cxx::__capture_isnormal(__f); }\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n+    isnormal(_Tp __f)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isnormal(__type(__f));\n+    }\n \n   template<typename _Tp>\n-    inline int\n-    signbit(_Tp __f) { return ::__gnu_cxx::__capture_signbit(__f); }\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n+    signbit(_Tp __f)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_signbit(__type(__f));\n+    }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n     isgreater(_Tp __f1, _Tp __f2)\n-    { return ::__gnu_cxx::__capture_isgreater(__f1, __f2); }\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isgreater(__type(__f1), __type(__f2));\n+    }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n     isgreaterequal(_Tp __f1, _Tp __f2)\n-    { return ::__gnu_cxx::__capture_isgreaterequal(__f1, __f2); }\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isgreaterequal(__type(__f1), __type(__f2));\n+    }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n     isless(_Tp __f1, _Tp __f2)\n-    { return ::__gnu_cxx::__capture_isless(__f1, __f2); }\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isless(__type(__f1), __type(__f2));\n+    }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value, \n+\t\t\t\t\t   int>::__type\n     islessequal(_Tp __f1, _Tp __f2)\n-    { return ::__gnu_cxx::__capture_islessequal(__f1, __f2); }\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_islessequal(__type(__f1), __type(__f2));\n+    }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n     islessgreater(_Tp __f1, _Tp __f2)\n-    { return ::__gnu_cxx::__capture_islessgreater(__f1, __f2); }\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_islessgreater(__type(__f1), __type(__f2));\n+    }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,\n+\t\t\t\t\t   int>::__type\n     isunordered(_Tp __f1, _Tp __f2)\n-    { return ::__gnu_cxx::__capture_isunordered(__f1, __f2); }\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return __builtin_isunordered(__type(__f1), __type(__f2));\n+    }\n \n _GLIBCXX_END_NAMESPACE\n "}, {"sha": "c0abab33859fe5f31a7e1bfebc9a6aeaa7f4fc00", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/25913.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7edcd5ebda4d219143e42f6daaa9633779e71b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2F25913.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7edcd5ebda4d219143e42f6daaa9633779e71b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2F25913.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2F25913.cc?ref=0e7edcd5ebda4d219143e42f6daaa9633779e71b", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do compile }\n+\n+#include <cmath>\n+#include <string>\n+\n+struct employee\n+: private std::string { };\n+\n+struct manager\n+: public employee { };\n+\n+bool isnormal(const employee&)\n+{ return false; }\n+\n+// libstdc++/25913\n+void test01()\n+{\n+  manager m;\n+  bool b = isnormal(m);\n+}"}]}