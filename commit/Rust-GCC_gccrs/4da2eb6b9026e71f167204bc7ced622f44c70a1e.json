{"sha": "4da2eb6b9026e71f167204bc7ced622f44c70a1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRhMmViNmI5MDI2ZTcxZjE2NzIwNGJjN2NlZDYyMmY0NGM3MGExZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-22T23:17:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-22T23:17:46Z"}, "message": "re PR middle-end/8866 (Bug in switch statement code generation -- missing label)\n\n        PR 8866\n        * rtl.h (MEM_NOTRAP_P): New.\n        (MEM_COPY_ATTRIBUTES): Copy it.\n        * rtlanal.c (may_trap_p): Check it.\n        * expr.c (do_tablejump): Set it.\n        * doc/rtl.texi (Flags): Document it.\n\n        * cfgrtl.c (try_redirect_by_replacing_jump): Revert last three changes.\n\nFrom-SVN: r65967", "tree": {"sha": "61fac5e9044077ae9018c6ffa6b7ab8c07fde408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61fac5e9044077ae9018c6ffa6b7ab8c07fde408"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4da2eb6b9026e71f167204bc7ced622f44c70a1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4da2eb6b9026e71f167204bc7ced622f44c70a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4da2eb6b9026e71f167204bc7ced622f44c70a1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4da2eb6b9026e71f167204bc7ced622f44c70a1e/comments", "author": null, "committer": null, "parents": [{"sha": "c1238896d34055a41d31f4e5b6a9678759eb8500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1238896d34055a41d31f4e5b6a9678759eb8500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1238896d34055a41d31f4e5b6a9678759eb8500"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "842a542d6c8913adcf4e3384cb874b1335f32387", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da2eb6b9026e71f167204bc7ced622f44c70a1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da2eb6b9026e71f167204bc7ced622f44c70a1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4da2eb6b9026e71f167204bc7ced622f44c70a1e", "patch": "@@ -1,3 +1,14 @@\n+2003-04-22  Richard Henderson  <rth@redhat.com>\n+\n+        PR 8866\n+        * rtl.h (MEM_NOTRAP_P): New.\n+        (MEM_COPY_ATTRIBUTES): Copy it.\n+        * rtlanal.c (may_trap_p): Check it.\n+        * expr.c (do_tablejump): Set it.\n+\t* doc/rtl.texi (Flags): Document it.\n+\n+        * cfgrtl.c (try_redirect_by_replacing_jump): Revert last three changes.\n+\n 2003-04-22  Olivier Hainque  <hainque@act-europe.fr>\n \n \t* config/alpha/alpha.c (alpha_expand_prologue [OPEN_VMS_ABI]): Don't"}, {"sha": "0ba32c5782ea3c86b66926aebee289e68d41c129", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da2eb6b9026e71f167204bc7ced622f44c70a1e/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da2eb6b9026e71f167204bc7ced622f44c70a1e/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=4da2eb6b9026e71f167204bc7ced622f44c70a1e", "patch": "@@ -740,12 +740,14 @@ try_redirect_by_replacing_jump (e, target)\n \tfprintf (rtl_dump_file, \"Replacing insn %i by jump %i\\n\",\n \t\t INSN_UID (insn), INSN_UID (src->end));\n \n-      /* Remove the original jump.  If INSN is a tablejump, the jump\n-\t table will be removed later, if it is no longer needed.  */\n+\n       delete_insn_chain (kill_from, insn);\n \n+      /* Recognize a tablejump that we are converting to a\n+\t simple jump and remove its associated CODE_LABEL\n+\t and ADDR_VEC or ADDR_DIFF_VEC.  */\n       if (tablejump_p (insn, &label, &table))\n-\tcreate_basic_block (label, table, src);\n+\tdelete_insn_chain (label, table);\n \n       barrier = next_nonnote_insn (src->end);\n       if (!barrier || GET_CODE (barrier) != BARRIER)"}, {"sha": "8a97a5d2e0b52bf41290706890d47dd6d2500e68", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da2eb6b9026e71f167204bc7ced622f44c70a1e/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da2eb6b9026e71f167204bc7ced622f44c70a1e/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=4da2eb6b9026e71f167204bc7ced622f44c70a1e", "patch": "@@ -630,6 +630,13 @@ In @code{mem}, @code{asm_operands}, and @code{asm_input} expressions,\n nonzero for volatile memory references.\n Stored in the @code{volatil} field and printed as @samp{/v}.\n \n+@findex MEM_NOTRAP_P\n+@cindex @code{mem} and @samp{/c}\n+@cindex @code{call}, in @code{mem}\n+@item MEM_NOTRAP_P (@var{x})\n+In @code{mem}, nonzero for memory references that will not trap.\n+Stored in the @code{call} field and printed as @samp{/c}.\n+\n @findex REG_FUNCTION_VALUE_P\n @cindex @code{reg} and @samp{/i}\n @cindex @code{integrated}, in @code{reg}\n@@ -847,7 +854,7 @@ These are the fields to which the above macros refer:\n @findex call\n @cindex @samp{/c} in RTL dump\n @item call\n-This flag is currently unused.\n+In a @code{mem}, 1 means that the memory reference will not trap.\n \n In an RTL dump, this flag is represented as @samp{/c}.\n "}, {"sha": "9176c30a8b1f488f25d5ba22057deb9a29352315", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da2eb6b9026e71f167204bc7ced622f44c70a1e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da2eb6b9026e71f167204bc7ced622f44c70a1e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4da2eb6b9026e71f167204bc7ced622f44c70a1e", "patch": "@@ -10272,6 +10272,7 @@ do_tablejump (index, mode, range, table_label, default_label)\n   temp = gen_reg_rtx (CASE_VECTOR_MODE);\n   vector = gen_rtx_MEM (CASE_VECTOR_MODE, index);\n   RTX_UNCHANGING_P (vector) = 1;\n+  MEM_NOTRAP_P (vector) = 1;\n   convert_move (temp, vector, 0);\n \n   emit_jump_insn (gen_tablejump (temp, table_label));"}, {"sha": "517dd281045a2a6b9d63f7c65b3b5100a3627fc9", "filename": "gcc/rtl.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da2eb6b9026e71f167204bc7ced622f44c70a1e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da2eb6b9026e71f167204bc7ced622f44c70a1e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=4da2eb6b9026e71f167204bc7ced622f44c70a1e", "patch": "@@ -150,7 +150,8 @@ struct rtx_def GTY((chain_next (\"RTX_NEXT (&%h)\"),\n      1 in a SET that is for a return.\n      In a CODE_LABEL, part of the two-bit alternate entry field.  */\n   unsigned int jump : 1;\n-  /* In a CODE_LABEL, part of the two-bit alternate entry field.  */\n+  /* In a CODE_LABEL, part of the two-bit alternate entry field.\n+     1 in a MEM if it cannot trap.  */\n   unsigned int call : 1;\n   /* 1 in a REG, MEM, or CONCAT if the value is set at most once, anywhere.\n      1 in a SUBREG if it references an unsigned object whose mode has been\n@@ -1109,6 +1110,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define MEM_SCALAR_P(RTX)\t\t\t\t\t\t\\\n   (RTL_FLAG_CHECK1(\"MEM_SCALAR_P\", (RTX), MEM)->frame_related)\n \n+/* 1 if RTX is a mem that cannot trap.  */\n+#define MEM_NOTRAP_P(RTX) \\\n+  (RTL_FLAG_CHECK1(\"MEM_NOTRAP_P\", (RTX), MEM)->call)\n+\n /* If VAL is nonzero, set MEM_IN_STRUCT_P and clear MEM_SCALAR_P in\n    RTX.  Otherwise, vice versa.  Use this macro only when you are\n    *sure* that you know that the MEM is in a structure, or is a\n@@ -1178,6 +1183,7 @@ do {\t\t\t\t\t\t\\\n   (MEM_VOLATILE_P (LHS) = MEM_VOLATILE_P (RHS),\t\t\t\\\n    MEM_IN_STRUCT_P (LHS) = MEM_IN_STRUCT_P (RHS),\t\t\\\n    MEM_SCALAR_P (LHS) = MEM_SCALAR_P (RHS),\t\t\t\\\n+   MEM_NOTRAP_P (LHS) = MEM_NOTRAP_P (RHS),\t\t\t\\\n    RTX_UNCHANGING_P (LHS) = RTX_UNCHANGING_P (RHS),\t\t\\\n    MEM_KEEP_ALIAS_SET_P (LHS) = MEM_KEEP_ALIAS_SET_P (RHS),\t\\\n    MEM_ATTRS (LHS) = MEM_ATTRS (RHS))"}, {"sha": "1972375313dd6ce6d933a9f0158bce6674f01861", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4da2eb6b9026e71f167204bc7ced622f44c70a1e/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4da2eb6b9026e71f167204bc7ced622f44c70a1e/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=4da2eb6b9026e71f167204bc7ced622f44c70a1e", "patch": "@@ -2462,6 +2462,8 @@ may_trap_p (x)\n \n       /* Memory ref can trap unless it's a static var or a stack slot.  */\n     case MEM:\n+      if (MEM_NOTRAP_P (x))\n+\treturn 0;\n       return rtx_addr_can_trap_p (XEXP (x, 0));\n \n       /* Division by a non-constant might trap.  */"}]}