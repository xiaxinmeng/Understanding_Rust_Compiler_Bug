{"sha": "f625663199e1b11f1e7e90ca7b47e53bbbc94450", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYyNTY2MzE5OWUxYjExZjFlN2U5MGNhN2I0N2U1M2JiYmM5NDQ1MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-22T10:31:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-22T10:31:30Z"}, "message": "[multiple changes]\n\n2009-07-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_elab.adb (Insert_Elab_Check): When relocating an overloaded\n\texpression to insert an elab check using a conditional expression, be\n\tsure to carry the original list of interpretations to the new location.\n\n2009-07-22  Gary Dismukes  <dismukes@adacore.com>\n\n\t* gnat1drv.adb: Fix spelling error.\n\n2009-07-22  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_type.ads, sem_type.adb (In_Generic_Actual): Leave this subprogram\n\tat the library level and fix a hidden bug in its implementation: its\n\tfunctionality for renaming objects was broken because\n\tN_Object_Renaming_Declarations nodes are not a subclass of\n\tN_Declaration nodes (as documented in sinfo.ads).\n\t* sem_util.adb (Check_Dynamically_Tagged_Expression): Include in this\n\tcheck nodes that are actuals of generic instantiations.\n\n2009-07-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sinfo.ads, sinfo.adb (Pending_Context): New flag to indicate that the\n\tcontext of a compilation unit is being analyzed. Used to detect\n\tcircularities created by with_clauses that are not detected by the\n\tloading machinery.\n\t* sem_ch10.adb (Analyze_Compilation_Unit): Set Pending_Context before\n\tanalyzing the context of the current compilation unit, to detect\n\tpossible circularities created by with_clauses.\n\nFrom-SVN: r149925", "tree": {"sha": "7a679922c3da9b4129f120983a84f5f7406ef2d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a679922c3da9b4129f120983a84f5f7406ef2d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f625663199e1b11f1e7e90ca7b47e53bbbc94450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f625663199e1b11f1e7e90ca7b47e53bbbc94450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f625663199e1b11f1e7e90ca7b47e53bbbc94450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f625663199e1b11f1e7e90ca7b47e53bbbc94450/comments", "author": null, "committer": null, "parents": [{"sha": "4eb317ccce4caa81eba08a2aedad4849c7ea489c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb317ccce4caa81eba08a2aedad4849c7ea489c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eb317ccce4caa81eba08a2aedad4849c7ea489c"}], "stats": {"total": 218, "additions": 167, "deletions": 51}, "files": [{"sha": "e75e4ee8b4fe54a7a2f800372b45513b637f9fac", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f625663199e1b11f1e7e90ca7b47e53bbbc94450", "patch": "@@ -1,3 +1,33 @@\n+2009-07-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_elab.adb (Insert_Elab_Check): When relocating an overloaded\n+\texpression to insert an elab check using a conditional expression, be\n+\tsure to carry the original list of interpretations to the new location.\n+\n+2009-07-22  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* gnat1drv.adb: Fix spelling error.\n+\n+2009-07-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_type.ads, sem_type.adb (In_Generic_Actual): Leave this subprogram\n+\tat the library level and fix a hidden bug in its implementation: its\n+\tfunctionality for renaming objects was broken because\n+\tN_Object_Renaming_Declarations nodes are not a subclass of\n+\tN_Declaration nodes (as documented in sinfo.ads).\n+\t* sem_util.adb (Check_Dynamically_Tagged_Expression): Include in this\n+\tcheck nodes that are actuals of generic instantiations.\n+\n+2009-07-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb (Pending_Context): New flag to indicate that the\n+\tcontext of a compilation unit is being analyzed. Used to detect\n+\tcircularities created by with_clauses that are not detected by the\n+\tloading machinery.\n+\t* sem_ch10.adb (Analyze_Compilation_Unit): Set Pending_Context before\n+\tanalyzing the context of the current compilation unit, to detect\n+\tpossible circularities created by with_clauses.\n+\n 2009-07-22  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_type.adb (Get_First_Interp): Fix wrong loop exit condition."}, {"sha": "6b4ef9a57012634a6da4715bfa9d40edc21cd448", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=f625663199e1b11f1e7e90ca7b47e53bbbc94450", "patch": "@@ -159,7 +159,7 @@ procedure Gnat1drv is\n          ASIS_Mode := False;\n \n          --  Suppress overflow checks and access checks since they are handled\n-         --  implicitely by CodePeer.\n+         --  implicitly by CodePeer.\n \n          --  Turn off dynamic elaboration checks: generates inconsistencies in\n          --  trees between specs compiled as part of a main unit or as part of"}, {"sha": "88edbcc56e21a3d4e8a0b0db9b555643d726d109", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=f625663199e1b11f1e7e90ca7b47e53bbbc94450", "patch": "@@ -661,9 +661,59 @@ package body Sem_Ch10 is\n       end if;\n \n       --  Analyze context (this will call Sem recursively for with'ed units)\n+      --  To detect circularities among with-clauses that are not caught during\n+      --  loading, we set the Context_Pending flag on the current unit. If the\n+      --  flag is already set there is a potential circularity.\n+      --  We exclude predefined units from this check because they are known\n+      --  to be safe. we also exclude package bodies that are present because\n+      --  circularities between bodies are harmless (and necessary).\n+\n+      if Context_Pending (N) then\n+         declare\n+            Circularity : Boolean := True;\n+\n+         begin\n+            if Is_Predefined_File_Name\n+                 (Unit_File_Name (Get_Source_Unit (Unit (N))))\n+            then\n+               Circularity := False;\n+\n+            else\n+               for U in Main_Unit + 1 .. Last_Unit loop\n+                  if Nkind (Unit (Cunit (U))) = N_Package_Body\n+                    and then not Analyzed (Cunit (U))\n+                  then\n+                     Circularity := False;\n+                     exit;\n+                  end if;\n+               end loop;\n+            end if;\n+\n+            if Circularity then\n+               Error_Msg_N\n+                 (\"circular dependency caused by with_clauses\", N);\n+               Error_Msg_N\n+                 (\"\\possibly missing limited_with clause\"\n+                  & \" in one of the following\", N);\n+\n+               for U in Main_Unit .. Last_Unit loop\n+                  if Context_Pending (Cunit (U)) then\n+                     Error_Msg_Unit_1 := Get_Unit_Name (Unit (Cunit (U)));\n+                     Error_Msg_N (\"\\unit$\", N);\n+                  end if;\n+               end loop;\n+\n+               raise Unrecoverable_Error;\n+            end if;\n+         end;\n+      else\n+         Set_Context_Pending (N);\n+      end if;\n \n       Analyze_Context (N);\n \n+      Set_Context_Pending (N, False);\n+\n       --  If the unit is a package body, the spec is already loaded and must be\n       --  analyzed first, before we analyze the body.\n "}, {"sha": "1e278a6bb58c7c6b1cadf9c7128a65d629c3de89", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=f625663199e1b11f1e7e90ca7b47e53bbbc94450", "patch": "@@ -47,6 +47,7 @@ with Sem_Cat;  use Sem_Cat;\n with Sem_Ch7;  use Sem_Ch7;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Res;  use Sem_Res;\n+with Sem_Type; use Sem_Type;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Sinput;   use Sinput;\n@@ -939,9 +940,7 @@ package body Sem_Elab is\n                Insert_Elab_Check (N,\n                  Make_Attribute_Reference (Loc,\n                    Attribute_Name => Name_Elaborated,\n-                   Prefix =>\n-                     New_Occurrence_Of\n-                       (Spec_Entity (E_Scope), Loc)));\n+                   Prefix => New_Occurrence_Of (Spec_Entity (E_Scope), Loc)));\n             end if;\n \n          --  Case of static elaboration model\n@@ -2415,8 +2414,7 @@ package body Sem_Elab is\n                  Make_Attribute_Reference (Loc,\n                    Attribute_Name => Name_Elaborated,\n                    Prefix =>\n-                     New_Occurrence_Of\n-                       (Spec_Entity (Task_Scope), Loc)));\n+                     New_Occurrence_Of (Spec_Entity (Task_Scope), Loc)));\n             end if;\n \n          else\n@@ -2852,16 +2850,20 @@ package body Sem_Elab is\n                        Make_Raise_Program_Error (Loc,\n                          Reason => PE_Access_Before_Elaboration);\n \n+               Reloc_N : Node_Id;\n+\n             begin\n                Set_Etype (R, Typ);\n \n                if No (C) then\n                   Rewrite (N, R);\n \n                else\n+                  Reloc_N := Relocate_Node (N);\n+                  Save_Interps (N, Reloc_N);\n                   Rewrite (N,\n                     Make_Conditional_Expression (Loc,\n-                      Expressions => New_List (C, Relocate_Node (N), R)));\n+                      Expressions => New_List (C, Reloc_N, R)));\n                end if;\n \n                Analyze_And_Resolve (N, Typ);"}, {"sha": "931112c472db6abcd4f72e4c342d7977a1ba034c", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 34, "deletions": 43, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=f625663199e1b11f1e7e90ca7b47e53bbbc94450", "patch": "@@ -1147,8 +1147,7 @@ package body Sem_Type is\n    function Disambiguate\n      (N      : Node_Id;\n       I1, I2 : Interp_Index;\n-      Typ    : Entity_Id)\n-      return   Interp\n+      Typ    : Entity_Id) return Interp\n    is\n       I           : Interp_Index;\n       It          : Interp;\n@@ -1161,13 +1160,6 @@ package body Sem_Type is\n       --  Determine whether one of the candidates is an operation inherited by\n       --  a type that is derived from an actual in an instantiation.\n \n-      function In_Generic_Actual (Exp : Node_Id) return Boolean;\n-      --  Determine whether the expression is part of a generic actual. At\n-      --  the time the actual is resolved the scope is already that of the\n-      --  instance, but conceptually the resolution of the actual takes place\n-      --  in the enclosing context, and no special disambiguation rules should\n-      --  be applied.\n-\n       function Is_Actual_Subprogram (S : Entity_Id) return Boolean;\n       --  Determine whether a subprogram is an actual in an enclosing instance.\n       --  An overloading between such a subprogram and one declared outside the\n@@ -1204,34 +1196,6 @@ package body Sem_Type is\n       --  for special handling of expressions with universal operands, see\n       --  comments to Has_Abstract_Interpretation below.\n \n-      -----------------------\n-      -- In_Generic_Actual --\n-      -----------------------\n-\n-      function In_Generic_Actual (Exp : Node_Id) return Boolean is\n-         Par : constant Node_Id := Parent (Exp);\n-\n-      begin\n-         if No (Par) then\n-            return False;\n-\n-         elsif Nkind (Par) in N_Declaration then\n-            if Nkind (Par) = N_Object_Declaration\n-              or else Nkind (Par) = N_Object_Renaming_Declaration\n-            then\n-               return Present (Corresponding_Generic_Association (Par));\n-            else\n-               return False;\n-            end if;\n-\n-         elsif Nkind (Par) in N_Statement_Other_Than_Procedure_Call then\n-            return False;\n-\n-         else\n-            return In_Generic_Actual (Parent (Par));\n-         end if;\n-      end In_Generic_Actual;\n-\n       ---------------------------\n       -- Inherited_From_Actual --\n       ---------------------------\n@@ -1260,7 +1224,7 @@ package body Sem_Type is\n          return In_Open_Scopes (Scope (S))\n            and then\n              (Is_Generic_Instance (Scope (S))\n-                or else Is_Wrapper_Package (Scope (S)));\n+               or else Is_Wrapper_Package (Scope (S)));\n       end Is_Actual_Subprogram;\n \n       -------------\n@@ -1274,8 +1238,7 @@ package body Sem_Type is\n          return T1 = T2\n            or else\n              (Is_Numeric_Type (T2)\n-               and then\n-             (T1 = Universal_Real or else T1 = Universal_Integer));\n+               and then (T1 = Universal_Real or else T1 = Universal_Integer));\n       end Matches;\n \n       ------------------------\n@@ -1417,9 +1380,8 @@ package body Sem_Type is\n                   elsif Present (Act2)\n                     and then Nkind (Act2) in N_Op\n                     and then Is_Overloaded (Act2)\n-                    and then (Nkind (Right_Opnd (Act2)) = N_Integer_Literal\n-                                or else\n-                              Nkind (Right_Opnd (Act2)) = N_Real_Literal)\n+                    and then Nkind_In (Right_Opnd (Act2), N_Integer_Literal,\n+                                                          N_Real_Literal)\n                     and then Has_Compatible_Type (Act2, Standard_Boolean)\n                   then\n                      --  The preference rule on the first actual is not\n@@ -2526,6 +2488,35 @@ package body Sem_Type is\n       return Typ;\n    end Intersect_Types;\n \n+   -----------------------\n+   -- In_Generic_Actual --\n+   -----------------------\n+\n+   function In_Generic_Actual (Exp : Node_Id) return Boolean is\n+      Par : constant Node_Id := Parent (Exp);\n+\n+   begin\n+      if No (Par) then\n+         return False;\n+\n+      elsif Nkind (Par) in N_Declaration then\n+         if Nkind (Par) = N_Object_Declaration then\n+            return Present (Corresponding_Generic_Association (Par));\n+         else\n+            return False;\n+         end if;\n+\n+      elsif Nkind (Par) = N_Object_Renaming_Declaration then\n+         return Present (Corresponding_Generic_Association (Par));\n+\n+      elsif Nkind (Par) in N_Statement_Other_Than_Procedure_Call then\n+         return False;\n+\n+      else\n+         return In_Generic_Actual (Parent (Par));\n+      end if;\n+   end In_Generic_Actual;\n+\n    -----------------\n    -- Is_Ancestor --\n    -----------------"}, {"sha": "307674fce149392bd47b355b584cda8e2f2938d1", "filename": "gcc/ada/sem_type.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsem_type.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsem_type.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.ads?ref=f625663199e1b11f1e7e90ca7b47e53bbbc94450", "patch": "@@ -211,6 +211,12 @@ package Sem_Type is\n    --  interpretations is universal, choose the non-universal one. If either\n    --  node is overloaded, find single common interpretation.\n \n+   function In_Generic_Actual (Exp : Node_Id) return Boolean;\n+   --  Determine whether the expression is part of a generic actual. At the\n+   --  time the actual is resolved the scope is already that of the instance,\n+   --  but conceptually the resolution of the actual takes place in the\n+   --  enclosing context and no special disambiguation rules should be applied.\n+\n    function Is_Ancestor (T1, T2 : Entity_Id) return Boolean;\n    --  T1 is a tagged type (not class-wide). Verify that it is one of the\n    --  ancestors of type T2 (which may or not be class-wide)."}, {"sha": "2e130b2fdc74b30595cd0b7d6d9b1bd9c06c03b4", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f625663199e1b11f1e7e90ca7b47e53bbbc94450", "patch": "@@ -1045,7 +1045,12 @@ package body Sem_Util is\n    begin\n       pragma Assert (Is_Tagged_Type (Typ));\n \n-      if Comes_From_Source (Related_Nod)\n+      --  In order to avoid spurious errors when analyzing the expanded code\n+      --  this check is done only for nodes that come from source and for\n+      --  actuals of generic instantiations\n+\n+      if (Comes_From_Source (Related_Nod)\n+           or else In_Generic_Actual (Expr))\n         and then (Is_Class_Wide_Type (Etype (Expr))\n                    or else Is_Dynamically_Tagged (Expr))\n         and then Is_Tagged_Type (Typ)"}, {"sha": "7bd9553798aa5fa9fc4735a724a764169bf8b719", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=f625663199e1b11f1e7e90ca7b47e53bbbc94450", "patch": "@@ -549,6 +549,14 @@ package body Sinfo is\n       return List1 (N);\n    end Context_Items;\n \n+   function Context_Pending\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Compilation_Unit);\n+      return Flag16 (N);\n+   end Context_Pending;\n+\n    function Controlling_Argument\n       (N : Node_Id) return Node_Id is\n    begin\n@@ -3364,6 +3372,14 @@ package body Sinfo is\n       Set_List1_With_Parent (N, Val);\n    end Set_Context_Items;\n \n+   procedure Set_Context_Pending\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Compilation_Unit);\n+      Set_Flag16 (N, Val);\n+   end Set_Context_Pending;\n+\n    procedure Set_Controlling_Argument\n       (N : Node_Id; Val : Node_Id) is\n    begin"}, {"sha": "e7b25230e735fac59f30041c785044e294f4033c", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f625663199e1b11f1e7e90ca7b47e53bbbc94450/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=f625663199e1b11f1e7e90ca7b47e53bbbc94450", "patch": "@@ -698,6 +698,13 @@ package Sinfo is\n    --    package Exp_Util, and also the expansion routines for the relevant\n    --    nodes.\n \n+   --  Context_Pending (Flag16-Sem)\n+   --    This field appears in Compilation_Unit nodes, to indicate that the\n+   --    context of the unit is being compiled. Used to detect circularities\n+   --    that are not otherwise detected by the loading mechanism. Such\n+   --    circularities can occur in the presence of limited and non-limited\n+   --    with_clauses that mention the same units.\n+\n    --  Controlling_Argument (Node1-Sem)\n    --    This field is set in procedure and function call nodes if the call\n    --    is a dispatching call (it is Empty for a non-dispatching call). It\n@@ -5393,6 +5400,7 @@ package Sinfo is\n       --  Has_No_Elaboration_Code (Flag17-Sem)\n       --  Body_Required (Flag13-Sem) set for spec if body is required\n       --  Acts_As_Spec (Flag4-Sem) flag for subprogram body with no spec\n+      --  Context_Pending (Flag16-Sem)\n       --  First_Inlined_Subprogram (Node3-Sem)\n \n       --  N_Compilation_Unit_Aux\n@@ -7678,6 +7686,9 @@ package Sinfo is\n    function Context_Installed\n      (N : Node_Id) return Boolean;    -- Flag13\n \n+   function Context_Pending\n+     (N : Node_Id) return Boolean;    -- Flag16\n+\n    function Context_Items\n      (N : Node_Id) return List_Id;    -- List1\n \n@@ -8578,6 +8589,9 @@ package Sinfo is\n    procedure Set_Context_Items\n      (N : Node_Id; Val : List_Id);            -- List1\n \n+   procedure Set_Context_Pending\n+     (N : Node_Id; Val : Boolean := True);    -- Flag16\n+\n    procedure Set_Controlling_Argument\n      (N : Node_Id; Val : Node_Id);            -- Node1\n \n@@ -11009,6 +11023,7 @@ package Sinfo is\n    pragma Inline (Constraints);\n    pragma Inline (Context_Installed);\n    pragma Inline (Context_Items);\n+   pragma Inline (Context_Pending);\n    pragma Inline (Controlling_Argument);\n    pragma Inline (Conversion_OK);\n    pragma Inline (Corresponding_Body);\n@@ -11305,6 +11320,7 @@ package Sinfo is\n    pragma Inline (Set_Constraints);\n    pragma Inline (Set_Context_Installed);\n    pragma Inline (Set_Context_Items);\n+   pragma Inline (Set_Context_Pending);\n    pragma Inline (Set_Controlling_Argument);\n    pragma Inline (Set_Conversion_OK);\n    pragma Inline (Set_Corresponding_Body);"}]}