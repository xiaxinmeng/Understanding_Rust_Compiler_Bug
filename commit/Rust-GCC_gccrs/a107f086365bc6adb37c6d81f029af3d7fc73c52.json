{"sha": "a107f086365bc6adb37c6d81f029af3d7fc73c52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEwN2YwODYzNjViYzZhZGIzN2M2ZDgxZjAyOWFmM2Q3ZmM3M2M1Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-10-07T18:14:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-10-07T18:14:16Z"}, "message": "re PR debug/37738 (Fortran DW_TAG_common_block has incorrect placement/scope)\n\n\tPR debug/37738\n\t* dwarf2out.c (common_block_die_table): New variable.\n\t(common_block_die_table_hash, common_block_die_table_eq): New\n\tfunctions.\n\t(gen_variable_die): Look up a DW_TAG_common_block die for a particular\n\tCOMMON block in the current scope rather than globally.  Optimize\n\tDW_OP_addr SYMBOL_REF DW_OP_plus_uconst off into\n\tDW_OP_addr SYMBOL_REF+off.\n\n\t* gfortran.dg/debug/pr37738.f: New test.\n\nFrom-SVN: r140944", "tree": {"sha": "d2b642b69257245ff64290121a8a59eab3c7db5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2b642b69257245ff64290121a8a59eab3c7db5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a107f086365bc6adb37c6d81f029af3d7fc73c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a107f086365bc6adb37c6d81f029af3d7fc73c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a107f086365bc6adb37c6d81f029af3d7fc73c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a107f086365bc6adb37c6d81f029af3d7fc73c52/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "008efc41a8d7449083d7c5a1856b6020b04e9bff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008efc41a8d7449083d7c5a1856b6020b04e9bff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/008efc41a8d7449083d7c5a1856b6020b04e9bff"}], "stats": {"total": 113, "additions": 109, "deletions": 4}, "files": [{"sha": "5582866162aa64571204f6c61c13f8ae1708b4d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a107f086365bc6adb37c6d81f029af3d7fc73c52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a107f086365bc6adb37c6d81f029af3d7fc73c52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a107f086365bc6adb37c6d81f029af3d7fc73c52", "patch": "@@ -1,3 +1,14 @@\n+2008-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/37738\n+\t* dwarf2out.c (common_block_die_table): New variable.\n+\t(common_block_die_table_hash, common_block_die_table_eq): New\n+\tfunctions.\n+\t(gen_variable_die): Look up a DW_TAG_common_block die for a particular\n+\tCOMMON block in the current scope rather than globally.  Optimize\n+\tDW_OP_addr SYMBOL_REF DW_OP_plus_uconst off into\n+\tDW_OP_addr SYMBOL_REF+off.\n+\n 2008-10-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-loop-ivopts.c (may_be_nonaddressable_p) <VIEW_CONVERT_EXPR>:"}, {"sha": "ed4d74d0e5188b7c6138b03f5e0c074cb1387713", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a107f086365bc6adb37c6d81f029af3d7fc73c52/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a107f086365bc6adb37c6d81f029af3d7fc73c52/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a107f086365bc6adb37c6d81f029af3d7fc73c52", "patch": "@@ -4748,6 +4748,10 @@ static GTY((param_is (struct dwarf_file_data))) htab_t file_table;\n    The key is a DECL_UID() which is a unique number identifying each decl.  */\n static GTY ((param_is (struct die_struct))) htab_t decl_die_table;\n \n+/* A hash table of references to DIE's that describe COMMON blocks.\n+   The key is DECL_UID() ^ die_parent.  */\n+static GTY ((param_is (struct die_struct))) htab_t common_block_die_table;\n+\n /* Node of the variable location list.  */\n struct var_loc_node GTY ((chain_next (\"%h.next\")))\n {\n@@ -4960,6 +4964,8 @@ static void equate_type_number_to_die (tree, dw_die_ref);\n static hashval_t decl_die_table_hash (const void *);\n static int decl_die_table_eq (const void *, const void *);\n static dw_die_ref lookup_decl_die (tree);\n+static hashval_t common_block_die_table_hash (const void *);\n+static int common_block_die_table_eq (const void *, const void *);\n static hashval_t decl_loc_table_hash (const void *);\n static int decl_loc_table_eq (const void *, const void *);\n static var_loc_list *lookup_decl_loc (const_tree);\n@@ -13812,6 +13818,26 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \n }\n \n+/* Returns a hash value for X (which really is a die_struct).  */\n+\n+static hashval_t\n+common_block_die_table_hash (const void *x)\n+{\n+  const_dw_die_ref d = (const_dw_die_ref) x;\n+  return (hashval_t) d->decl_id ^ htab_hash_pointer (d->die_parent);\n+}\n+\n+/* Return nonzero if decl_id and die_parent of die_struct X is the same\n+   as decl_id and die_parent of die_struct Y.  */\n+\n+static int\n+common_block_die_table_eq (const void *x, const void *y)\n+{\n+  const_dw_die_ref d = (const_dw_die_ref) x;\n+  const_dw_die_ref e = (const_dw_die_ref) y;\n+  return d->decl_id == e->decl_id && d->die_parent == e->die_parent;\n+}\n+\n /* Generate a DIE to represent a declared data object.  */\n \n static void\n@@ -13853,6 +13879,7 @@ gen_variable_die (tree decl, dw_die_ref context_die)\n       tree field;\n       dw_die_ref com_die;\n       dw_loc_descr_ref loc;\n+      die_node com_die_arg;\n \n       var_die = lookup_decl_die (decl);\n       if (var_die)\n@@ -13863,21 +13890,41 @@ gen_variable_die (tree decl, dw_die_ref context_die)\n \t      if (loc)\n \t\t{\n \t\t  if (off)\n-\t\t    add_loc_descr (&loc, new_loc_descr (DW_OP_plus_uconst,\n+\t\t    {\n+\t\t      /* Optimize the common case.  */\n+\t\t      if (loc->dw_loc_opc == DW_OP_addr\n+\t\t\t  && loc->dw_loc_next == NULL\n+\t\t\t  && GET_CODE (loc->dw_loc_oprnd1.v.val_addr)\n+\t\t\t     == SYMBOL_REF)\n+\t\t\tloc->dw_loc_oprnd1.v.val_addr\n+\t\t\t  = plus_constant (loc->dw_loc_oprnd1.v.val_addr, off);\n+\t\t\telse\n+\t\t\t  add_loc_descr (&loc,\n+\t\t\t\t\t new_loc_descr (DW_OP_plus_uconst,\n \t\t\t\t\t\t\toff, 0));\n+\t\t    }\n \t\t  add_AT_loc (var_die, DW_AT_location, loc);\n \t\t  remove_AT (var_die, DW_AT_declaration);\n \t\t}\n \t    }\n \t  return;\n \t}\n+\n+      if (common_block_die_table == NULL)\n+\tcommon_block_die_table\n+\t  = htab_create_ggc (10, common_block_die_table_hash,\n+\t\t\t     common_block_die_table_eq, NULL);\n+\n       field = TREE_OPERAND (DECL_VALUE_EXPR (decl), 0);\n-      com_die = lookup_decl_die (com_decl);\n+      com_die_arg.decl_id = DECL_UID (com_decl);\n+      com_die_arg.die_parent = context_die;\n+      com_die = (dw_die_ref) htab_find (common_block_die_table, &com_die_arg);\n       loc = loc_descriptor_from_tree (com_decl);\n       if (com_die == NULL)\n \t{\n \t  const char *cnam\n \t    = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (com_decl));\n+\t  void **slot;\n \n \t  com_die = new_die (DW_TAG_common_block, context_die, decl);\n \t  add_name_and_src_coords_attributes (com_die, com_decl);\n@@ -13891,7 +13938,9 @@ gen_variable_die (tree decl, dw_die_ref context_die)\n           else if (DECL_EXTERNAL (decl))\n \t    add_AT_flag (com_die, DW_AT_declaration, 1);\n \t  add_pubname_string (cnam, com_die); /* ??? needed? */\n-\t  equate_decl_number_to_die (com_decl, com_die);\n+\t  com_die->decl_id = DECL_UID (com_decl);\n+\t  slot = htab_find_slot (common_block_die_table, com_die, INSERT);\n+\t  *slot = (void *) com_die;\n \t}\n       else if (get_AT (com_die, DW_AT_location) == NULL && loc)\n \t{\n@@ -13907,7 +13956,17 @@ gen_variable_die (tree decl, dw_die_ref context_die)\n       if (loc)\n \t{\n \t  if (off)\n-\t    add_loc_descr (&loc, new_loc_descr (DW_OP_plus_uconst, off, 0));\n+\t    {\n+\t      /* Optimize the common case.  */\n+\t      if (loc->dw_loc_opc == DW_OP_addr\n+\t\t  && loc->dw_loc_next == NULL\n+\t\t  && GET_CODE (loc->dw_loc_oprnd1.v.val_addr) == SYMBOL_REF)\n+\t\tloc->dw_loc_oprnd1.v.val_addr\n+\t\t  = plus_constant (loc->dw_loc_oprnd1.v.val_addr, off);\n+\t      else\n+\t\tadd_loc_descr (&loc, new_loc_descr (DW_OP_plus_uconst,\n+\t\t\t\t\t\t    off, 0));\n+\t    }\n \t  add_AT_loc (var_die, DW_AT_location, loc);\n \t}\n       else if (DECL_EXTERNAL (decl))"}, {"sha": "d3fdf0042670c27b3926a51e39d807f419c07541", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a107f086365bc6adb37c6d81f029af3d7fc73c52/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a107f086365bc6adb37c6d81f029af3d7fc73c52/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a107f086365bc6adb37c6d81f029af3d7fc73c52", "patch": "@@ -1,3 +1,8 @@\n+2008-10-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/37738\n+\t* gfortran.dg/debug/pr37738.f: New test.\n+\n 2008-10-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/loop_optimization4.adb: New test."}, {"sha": "b0a787b2e527671ce2c0d288f72cc44ed4915b2b", "filename": "gcc/testsuite/gfortran.dg/debug/pr37738.f", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a107f086365bc6adb37c6d81f029af3d7fc73c52/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr37738.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a107f086365bc6adb37c6d81f029af3d7fc73c52/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr37738.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdebug%2Fpr37738.f?ref=a107f086365bc6adb37c6d81f029af3d7fc73c52", "patch": "@@ -0,0 +1,30 @@\n+C PR debug/37738\n+C { dg-do compile }\n+C { dg-skip-if \"DWARF-2 only\" { \"*-*-*\" } { \"*\" } { \"-gdwarf-2\" } }\n+C { dg-options \"-dA\" }\n+\n+      subroutine a\n+      integer*4 a_i, c_i\n+      common /block/a_i, c_i\n+      a_i = 1\n+      c_i = 4\n+      end subroutine a\n+      subroutine b\n+      integer*4 b_i\n+      common /block/b_i, d_i\n+      b_i = 2\n+      d_i = 5\n+      end subroutine b\n+      subroutine c\n+      integer*4 a_i, c_i\n+      common /block/a_i, c_i\n+      if (a_i .ne. 2) call abort\n+      if (c_i .ne. 5) call abort\n+      end subroutine c\n+      program abc\n+      call a\n+      call b\n+      call c\n+      end program abc\n+\n+C { dg-final { scan-assembler-times \"DIE\\[^\\n\\]*DW_TAG_common_block\" 3 } }"}]}