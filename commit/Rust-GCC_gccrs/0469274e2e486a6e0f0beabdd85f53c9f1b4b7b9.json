{"sha": "0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ2OTI3NGUyZTQ4NmE2ZTBmMGJlYWJkZDg1ZjUzYzlmMWI0YjdiOQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2013-01-02T11:55:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-02T11:55:20Z"}, "message": "exp_intr.adb (Expand_Dispatching_Constructor_Call): Remove side effects from Tag_Arg early...\n\n2013-01-02  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_intr.adb (Expand_Dispatching_Constructor_Call): Remove\n\tside effects from Tag_Arg early, doing it too late may cause a\n\tcrash due to inconsistent Parent link.\n\t* sem_ch8.adb, einfo.ads: Minor reformatting.\n\nFrom-SVN: r194803", "tree": {"sha": "6026078bf7293c7249725048d7762ab21c2b2c47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6026078bf7293c7249725048d7762ab21c2b2c47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9/comments", "author": null, "committer": null, "parents": [{"sha": "ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1ffed0e8ac8c0eddaf04b73e05a1af1e0dff32"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "fa4cb074d63ecd57d065ad846c56fd76868eada7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9", "patch": "@@ -1,3 +1,10 @@\n+2013-01-02  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_intr.adb (Expand_Dispatching_Constructor_Call): Remove\n+\tside effects from Tag_Arg early, doing it too late may cause a\n+\tcrash due to inconsistent Parent link.\n+\t* sem_ch8.adb, einfo.ads: Minor reformatting.\n+\n 2013-01-02  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.ads, einfo.adb (Has_Independent_Components): New flag."}, {"sha": "1b412e51d8863682e345e68a20e8a8fe72b55418", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9", "patch": "@@ -902,11 +902,11 @@ package Einfo is\n --    DTC_Entity (Node16)\n --       Defined in function and procedure entities. Set to Empty unless\n --       the subprogram is dispatching in which case it references the\n---       Dispatch Table pointer Component. That is to say the component _tag\n---       for regular Ada tagged types, for CPP_Class types and their\n---       descendants this field points to the component entity in the record\n---       that is the Vtable pointer for the Vtable containing the entry that\n---       references the subprogram.\n+--       Dispatch Table pointer Component. For regular Ada tagged this, this\n+--       is the _Tag component. For CPP_Class types and their descendants,\n+--       this points to the component entity in the record that holds the\n+--       Vtable pointer for the Vtable containing the entry referencing the\n+--       subprogram.\n \n --    DT_Entry_Count (Uint15)\n --       Defined in E_Component entities. Only used for component marked"}, {"sha": "b2c24c83101d42b8d8a1272662530949e460ab14", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9", "patch": "@@ -210,6 +210,15 @@ package body Exp_Intr is\n       Result_Typ : Entity_Id;\n \n    begin\n+      --  Remove side effects from tag argument early, before rewriting\n+      --  the dispatching constructor call, as Remove_Side_Effects relies\n+      --  on Tag_Arg's Parent link properly attached to the tree (once the\n+      --  call is rewritten, the Parent is inconsistent as it points to the\n+      --  rewritten node, which is not the syntactic parent of the Tag_Arg\n+      --  anymore).\n+\n+      Remove_Side_Effects (Tag_Arg);\n+\n       --  The subprogram is the third actual in the instantiation, and is\n       --  retrieved from the corresponding renaming declaration. However,\n       --  freeze nodes may appear before, so we retrieve the declaration\n@@ -223,15 +232,10 @@ package body Exp_Intr is\n       Act_Constr := Entity (Name (Act_Rename));\n       Result_Typ := Class_Wide_Type (Etype (Act_Constr));\n \n-      --  Ada 2005 (AI-251): If the result is an interface type, the function\n-      --  returns a class-wide interface type (otherwise the resulting object\n-      --  would be abstract!)\n-\n       if Is_Interface (Etype (Act_Constr)) then\n-         Set_Etype (Act_Constr, Result_Typ);\n \n-         --  If the result type is not parent of Tag_Arg then we need to\n-         --  locate the tag of the secondary dispatch table.\n+         --  If the result type is not known to be a parent of Tag_Arg then we\n+         --  need to locate the tag of the secondary dispatch table.\n \n          if not Is_Ancestor (Etype (Result_Typ), Etype (Tag_Arg),\n                              Use_Full_View => True)\n@@ -255,7 +259,7 @@ package body Exp_Intr is\n                      New_Reference_To (RTE (RE_Tag), Loc),\n                    Expression          =>\n                      Make_Function_Call (Loc,\n-                       Name => Fname,\n+                       Name                   => Fname,\n                        Parameter_Associations => New_List (\n                          Relocate_Node (Tag_Arg),\n                          New_Reference_To\n@@ -283,9 +287,7 @@ package body Exp_Intr is\n          Set_Controlling_Argument (Cnstr_Call,\n            New_Occurrence_Of (Defining_Identifier (Iface_Tag), Loc));\n       else\n-         Remove_Side_Effects (Tag_Arg);\n-         Set_Controlling_Argument (Cnstr_Call,\n-           Relocate_Node (Tag_Arg));\n+         Set_Controlling_Argument (Cnstr_Call, Relocate_Node (Tag_Arg));\n       end if;\n \n       --  Rewrite and analyze the call to the instance as a class-wide\n@@ -314,7 +316,7 @@ package body Exp_Intr is\n \n       elsif not Is_Interface (Result_Typ) then\n          declare\n-            Obj_Tag_Node : Node_Id := Duplicate_Subexpr (Tag_Arg);\n+            Obj_Tag_Node : Node_Id := New_Copy_Tree (Tag_Arg);\n             CW_Test_Node : Node_Id;\n \n          begin\n@@ -348,7 +350,7 @@ package body Exp_Intr is\n                     Name => New_Occurrence_Of (RTE (RE_IW_Membership), Loc),\n                     Parameter_Associations => New_List (\n                       Make_Attribute_Reference (Loc,\n-                        Prefix         => Duplicate_Subexpr (Tag_Arg),\n+                        Prefix         => New_Copy_Tree (Tag_Arg),\n                         Attribute_Name => Name_Address),\n \n                       New_Reference_To ("}, {"sha": "4437a16aa6e7e3364e723c56aa02cedcd8bdd741", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=0469274e2e486a6e0f0beabdd85f53c9f1b4b7b9", "patch": "@@ -1906,7 +1906,7 @@ package body Sem_Ch8 is\n             end loop;\n \n             New_S := Analyze_Subprogram_Specification (Spec);\n-            Result :=  Find_Renamed_Entity (N, Name (N), New_S, Is_Actual);\n+            Result := Find_Renamed_Entity (N, Name (N), New_S, Is_Actual);\n          end if;\n \n          if Result /= Any_Id then"}]}