{"sha": "5a8e2650ed8948a7894a79cea8da2ba878d22ae7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE4ZTI2NTBlZDg5NDhhNzg5NGE3OWNlYThkYTJiYTg3OGQyMmFlNw==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-09-26T17:28:07Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-09-26T17:28:07Z"}, "message": "gcc.c (cpp_options): Add spec for -ftabstop=.\n\n\t* gcc.c (cpp_options): Add spec for -ftabstop=.\n\t(invoke_as): New spec that handles invoking as.\n\tUpdate specs to handle -save-temps and -traditional.\n\t* ch/lang-specs.h, f/lang-specs.h, java/lang-specs.h:\n\tUse invoke_as.\n\t* cp/lang-specs.h, objc/lang-specs.h: Update to use\n\tinvoke_as, and handle -save-temps and -traditional (if\n\tappropriate).\n\nFrom-SVN: r36646", "tree": {"sha": "ce2d63128dfa6a81b7ea8dddfaba181e2fb18d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce2d63128dfa6a81b7ea8dddfaba181e2fb18d6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a8e2650ed8948a7894a79cea8da2ba878d22ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a8e2650ed8948a7894a79cea8da2ba878d22ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a8e2650ed8948a7894a79cea8da2ba878d22ae7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/comments", "author": null, "committer": null, "parents": [{"sha": "380f6ad3dde6db991434068c4f3776c6762fa564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380f6ad3dde6db991434068c4f3776c6762fa564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/380f6ad3dde6db991434068c4f3776c6762fa564"}], "stats": {"total": 101, "additions": 66, "deletions": 35}, "files": [{"sha": "02791b9bffd4469c7f306d0555162e1254c83eb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a8e2650ed8948a7894a79cea8da2ba878d22ae7", "patch": "@@ -1,3 +1,14 @@\n+Tue 26-Sep-2000 18:25:38 BST  Neil Booth  <neilb@earthling.net>\n+\n+\t* gcc.c (cpp_options): Add spec for -ftabstop=.\n+\t(invoke_as): New spec that handles invoking as.\n+\tUpdate specs to handle -save-temps and -traditional.\n+\t* ch/lang-specs.h, f/lang-specs.h, java/lang-specs.h:\n+\tUse invoke_as.\n+\t* cp/lang-specs.h, objc/lang-specs.h: Update to use\n+\tinvoke_as, and handle -save-temps and -traditional (if\n+\tappropriate).\n+\n 2000-09-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/sparc/sparc.c (sparc_emit_set_const64): Don't abort when"}, {"sha": "1ed4bac14cb9f75bf8de5f0db6e58f2198189434", "filename": "gcc/ch/lang-specs.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2Fch%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2Fch%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flang-specs.h?ref=5a8e2650ed8948a7894a79cea8da2ba878d22ae7", "patch": "@@ -27,5 +27,4 @@ Boston, MA 02111-1307, USA.  */\n      \"tradcpp0 -lang-chill %{!no-gcc:-D__GNUCHILL__=%v1} %(cpp_options)\\\n \t      %{!M:%{!MM:%{!E:%{!pipe:%g.i} |\\n\\\n       cc1chill %{!pipe:%g.i} %(cc1_options)\\\n-      %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-      as %(asm_options) %{!pipe:%g.s} %A }}}}}\\n\"},\n+      %{!fsyntax-only:%(invoke_as)}}}}\\n\"},"}, {"sha": "141655c58f4556aa56443db059ce1d7ef3a83ef4", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=5a8e2650ed8948a7894a79cea8da2ba878d22ae7", "patch": "@@ -30,28 +30,31 @@ Boston, MA 02111-1307, USA.  */\n   {\".C\",   \"@c++\"},\n   {\"@c++\",\n #if USE_CPPLIB\n+   /* cc1plus has an integrated ISO C preprocessor.  We should invoke\n+      the external preprocessor if -save-temps is given.  */\n     \"%{E|M|MM:cpp0 -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n        %{fnew-abi:-D__GXX_ABI_VERSION=100}\\\n        %{ansi:-trigraphs -$ -D__STRICT_ANSI__} %(cpp_options)}\\\n-     %{!E:%{!M:%{!MM:cc1plus -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n+     %{!E:%{!M:%{!MM:\\\n+       %{save-temps:cpp0 -lang-c++ %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n+\t\t    %(cpp_options) %b.ii \\n}\\\n+      cc1plus %{save-temps: -fpreprocessed %b.ii} -lang-c++\\\n+       %{!no-gcc:-D__GNUG__=%v1}\\\n        %{fnew-abi:-D__GXX_ABI_VERSION=100}\\\n        %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n        %(cpp_options) %(cc1_options) %{+e*}\\\n-       %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-     as %(asm_options) %{!pipe:%g.s} %A }}}}}\"\n+       %{!fsyntax-only:%(invoke_as)}}}}\"\n #else /* ! USE_CPPLIB */\n     \"cpp0 -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n        %{fnew-abi:-D__GXX_ABI_VERSION=100}\\\n        %{ansi:-trigraphs -$ -D__STRICT_ANSI__} %(cpp_options)\\\n        %{!M:%{!MM:%{!E:%{!pipe:%g.ii} |\\n\\\n      cc1plus -lang-c++ %{!pipe:%g.ii} %(cc1_options) %{+e*}\\\n-     %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-     as %(asm_options) %{!pipe:%g.s} %A }}}}}\\n\"\n+     %{!fsyntax-only:%(invoke_as)}}}}\\n\"\n #endif /* ! USE_CPPLIB */\n   },\n   {\".ii\", \"@c++-cpp-output\"},\n   {\"@c++-cpp-output\",\n    \"%{!M:%{!MM:%{!E:\\\n     cc1plus -lang-c++ -fpreprocessed %i %(cc1_options) %{+e*}\\\n-    %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-    as %(asm_options) %{!pipe:%g.s} %A }}}}}\"},\n+    %{!fsyntax-only:%(invoke_as)}}}}\"},"}, {"sha": "46f54e33b31c8f53dd89ee2b9e5c551a828c4492", "filename": "gcc/f/lang-specs.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2Ff%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2Ff%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flang-specs.h?ref=5a8e2650ed8948a7894a79cea8da2ba878d22ae7", "patch": "@@ -29,20 +29,18 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n   {\".FPP\", \"@f77-cpp-input\"},\n   {\"@f77-cpp-input\",\n    \"tradcpp0 -lang-fortran %(cpp_options) %{!M:%{!MM:%{!E:%{!pipe:%g.f |\\n\\\n-    f771 %{!pipe:%g.f} %(cc1_options) %{I*} %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-    as %(asm_options) %{!pipe:%g.s} %A }}}}}}\\n\"},\n+    f771 %{!pipe:%g.f} %(cc1_options) %{I*} %{!fsyntax-only:%(invoke_as)}}}}}\"},\n   {\".r\", \"@ratfor\"},\n   {\"@ratfor\",\n    \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n     ratfor %{C} %{v} %i %{E:%W{o*}} %{!E: %{!pipe:-o %g.f} |\\n\\\n-    f771 %{!pipe:%g.f} %(cc1_options) %{I*} %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-    as %(asm_options) %{!pipe:%g.s} %A }}}\\n\"},\n+    f771 %{!pipe:%g.f} %(cc1_options) %{I*} %{!fsyntax-only:%(invoke_as)}}\"},\n   {\".f\",   \"@f77\"},\n   {\".for\", \"@f77\"},\n   {\".FOR\", \"@f77\"},\n   {\"@f77\",\n-   \"%{!M:%{!MM:%{!E:f771 %i %(cc1_options) %{I*} %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-     as %(asm_options) %{!pipe:%g.s} %A }}}}}\\n\"},\n+   \"%{!M:%{!MM:%{!E:f771 %i %(cc1_options) %{I*}\\\n+\t%{!fsyntax-only:%(invoke_as)}}}}\"},\n   /* XXX This is perverse and should not be necessary.  */\n   {\"@f77-version\",\n    \"tradcpp0 -lang-fortran %(cpp_options) %j \\n\\"}, {"sha": "7fe091e0cba58677e8a6378e0b64a0ea8cfc4bfb", "filename": "gcc/gcc.c", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=5a8e2650ed8948a7894a79cea8da2ba878d22ae7", "patch": "@@ -583,9 +583,11 @@ static const char *cpp_options =\n  %{!ffreestanding:%{!fno-hosted:-D__STDC_HOSTED__=1}}\\\n  %{fshow-column} %{fno-show-column}\\\n  %{fleading-underscore} %{fno-leading-underscore}\\\n+ %{ftabstop=*}\\\n  %{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{U*} %{D*} %{i*} %Z %i\\\n  %{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}}\";\n \n+/* NB: This is shared amongst all front-ends.  */\n static const char *cc1_options =\n \"%{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n  %1 %{!Q:-quiet} -dumpbase %B %{d*} %{m*} %{a*}\\\n@@ -598,6 +600,9 @@ static const char *cc1_options =\n static const char *asm_options =\n \"%a %Y %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\";\n \n+static const char *invoke_as =\n+\"%{!S:-o %{|!pipe:%g.s} |\\n as %(asm_options) %{!pipe:%g.s} %A }\";\n+\n /* Some compilers have limits on line lengths, and the multilib_select\n    and/or multilib_matches strings can be very long, so we build them at\n    run time.  */\n@@ -709,15 +714,24 @@ static struct compiler default_compilers[] =\n   {\".c\", \"@c\"},\n   {\"@c\",\n #if USE_CPPLIB\n+   /* cc1 has an integrated ISO C preprocessor.  We should invoke the\n+      external preprocessor if -save-temps or -traditional is given.  */\n      \"%{E|M|MM:%(trad_capable_cpp) -lang-c %{ansi:-std=c89} %(cpp_options)}\\\n-      %{!E:%{!M:%{!MM:cc1 -lang-c %{ansi:-std=c89} %(cpp_options)\\\n-\t\t\t  %(cc1_options) %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-      as %(asm_options) %{!pipe:%g.s} %A }}}}}\"\n+      %{!E:%{!M:%{!MM:\\\n+\t  %{save-temps:%(trad_capable_cpp) -lang-c %{ansi:-std=c89}\\\n+\t\t%(cpp_options) %b.i \\n\\\n+\t\t    cc1 -fpreprocessed %b.i %(cc1_options)}\\\n+\t  %{!save-temps:\\\n+\t    %{traditional|ftraditional|traditional-cpp:\\\n+\t\ttradcpp0 -lang-c %{ansi:-std=c89} %(cpp_options) %{!pipe:%g.i} |\\n\\\n+\t\t    cc1 -fpreprocessed %{!pipe:%g.i} %(cc1_options)}\\\n+\t    %{!traditional:%{!ftraditional:%{!traditional-cpp:\\\n+\t\tcc1 -lang-c %{ansi:-std=c89} %(cpp_options) %(cc1_options)}}}}\\\n+        %{!fsyntax-only:%(invoke_as)}}}}\"\n #else /* ! USE_CPPLIB */\n      \"%(trad_capable_cpp) -lang-c %{ansi:-std=c89} %(cpp_options) \\\n \t\t\t  %{!M:%{!MM:%{!E:%{!pipe:%g.i} |\\n\\\n-      cc1 %{!pipe:%g.i} %(cc1_options) %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-      as %(asm_options) %{!pipe:%g.s} %A }}}}}\\n\"\n+      cc1 %{!pipe:%g.i} %(cc1_options) %{!fsyntax-only:%(invoke_as)}}}}\"\n #endif /* ! USE_CPPLIB */\n   },\n   {\"-\",\n@@ -729,17 +743,14 @@ static struct compiler default_compilers[] =\n     %(trad_capable_cpp) -lang-c %{ansi:-std=c89} %(cpp_options)\"},\n   {\".i\", \"@cpp-output\"},\n   {\"@cpp-output\",\n-   \"%{!M:%{!MM:%{!E:\\\n-    cc1 %i %(cc1_options) %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-    as %(asm_options) %{!pipe:%g.s} %A }}}}}\"},\n+   \"%{!M:%{!MM:%{!E:cc1 %i %(cc1_options) %{!fsyntax-only:%(invoke_as)}}}}\"},\n   {\".s\", \"@assembler\"},\n   {\"@assembler\",\n    \"%{!M:%{!MM:%{!E:%{!S:as %(asm_options) %i %A }}}}\"},\n   {\".S\", \"@assembler-with-cpp\"},\n   {\"@assembler-with-cpp\",\n-   \"%(trad_capable_cpp) -lang-asm %(cpp_options) \\\n-\t\t\t%{!M:%{!MM:%{!E:%{!S: %{!pipe:%g.s} |\\n\\\n-    as %(asm_options) %{!pipe:%g.s} %A }}}}\"},\n+   \"%(trad_capable_cpp) -lang-asm %(cpp_options)\\\n+\t%{!M:%{!MM:%{!E:%(invoke_as)}}}\"},\n #include \"specs.h\"\n   /* Mark end of table */\n   {0, 0}\n@@ -1083,6 +1094,7 @@ static struct spec_list static_specs[] =\n   INIT_STATIC_SPEC (\"asm\",\t\t\t&asm_spec),\n   INIT_STATIC_SPEC (\"asm_final\",\t\t&asm_final_spec),\n   INIT_STATIC_SPEC (\"asm_options\",\t\t&asm_options),\n+  INIT_STATIC_SPEC (\"invoke_as\",\t\t&invoke_as),\n   INIT_STATIC_SPEC (\"cpp\",\t\t\t&cpp_spec),\n   INIT_STATIC_SPEC (\"cpp_options\",\t\t&cpp_options),\n   INIT_STATIC_SPEC (\"trad_capable_cpp\",\t\t&trad_capable_cpp),"}, {"sha": "ef40189564d28427fc3421e8fc49cf01d098f9cb", "filename": "gcc/java/lang-specs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2Fjava%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2Fjava%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-specs.h?ref=5a8e2650ed8948a7894a79cea8da2ba878d22ae7", "patch": "@@ -33,5 +33,5 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n    \"%{fjni:%{femit-class-files:%e-fjni and -femit-class-files are incompatible}}\\\n     %{fjni:%{femit-class-file:%e-fjni and -femit-class-file are incompatible}}\\\n     %{!E:jc1 %i %(jc1) %(cc1_options) %{+e*} %{I*} %{MD} %{MMD} %{M} %{MM}\\\n-             %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-    as %(asm_options) %{!pipe:%g.s} %A }}}\"},\n+             %{!fsyntax-only:%(invoke_as)}}\"},\n+"}, {"sha": "f9e2c141f202dffda14ba4a347cb607742c0e5b4", "filename": "gcc/objc/lang-specs.h", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2Fobjc%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8e2650ed8948a7894a79cea8da2ba878d22ae7/gcc%2Fobjc%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-specs.h?ref=5a8e2650ed8948a7894a79cea8da2ba878d22ae7", "patch": "@@ -24,20 +24,28 @@ Boston, MA 02111-1307, USA.  */\n   {\".m\", \"@objective-c\"},\n   {\"@objective-c\",\n #if USE_CPPLIB\n+   /* cc1obj has an integrated ISO C preprocessor.  We should invoke the\n+      external preprocessor if -save-temps or -traditional is given.  */\n      \"%{E|M|MM:%(trad_capable_cpp) -lang-objc %{ansi:-std=c89} %(cpp_options)}\\\n-      %{!E:%{!M:%{!MM:cc1obj -lang-objc %(cpp_options) %(cc1_options) %{gen-decls}\\\n-             %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-      as %(asm_options) %{!pipe:%g.s} %A }}}}}\"\n+      %{!E:%{!M:%{!MM:\\\n+\t%{save-temps:%(trad_capable_cpp) -lang-objc %{ansi:-std=c89}\\\n+\t  %(cpp_options) %b.mi \\n\\\n+\t    cc1obj -fpreprocessed %b.mi -lang-objc %(cc1_options) %{gen-decls}}\\\n+\t%{!save-temps:\\\n+\t  %{traditional|ftraditional|traditional-cpp:\\\n+\t    tradcpp0 -lang-objc %{ansi:-std=c89} %(cpp_options) %{!pipe:%g.mi} |\\n\\\n+\t    cc1obj -fpreprocessed %{!pipe:%g.mi} -lang-objc %(cc1_options) %{gen-decls}}\\\n+\t  %{!traditional:%{!ftraditional:%{!traditional-cpp:\\\n+\t    cc1obj -lang-objc %{ansi:-std=c89} %(cpp_options) %(cc1_options) %{gen-decls}}}}}\\\n+        %{!fsyntax-only:%(invoke_as)}}}}\"\n #else /* ! USE_CPPLIB */\n      \"%(trad_capable_cpp) -lang-objc %{ansi:-std=c89} %(cpp_options)\\\n \t\t\t  %{!M:%{!MM:%{!E:%{!pipe:%g.mi} |\\n\\\n       cc1obj -lang-objc %{!pipe:%g.mi} %(cc1_options) %{gen-decls}\\\n-\t     %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-      as %(asm_options) %{!pipe:%g.s} %A }}}}}\\n\"\n+\t     %{!fsyntax-only:%(invoke_as)}}}}\\n\"\n #endif /* ! USE_CPPLIB */\n     },\n   {\".mi\", \"@objc-cpp-output\"},\n   {\"@objc-cpp-output\",\n      \"%{!M:%{!MM:%{!E:cc1obj -lang-objc %i %(cc1_options) %{gen-decls}\\\n-\t\t\t     %{!fsyntax-only:%{!S:-o %{|!pipe:%g.s} |\\n\\\n-      as %(asm_options) %{!pipe:%g.s} %A }}}}}\"},\n+\t\t\t     %{!fsyntax-only:%(invoke_as)}}}}\"},"}]}