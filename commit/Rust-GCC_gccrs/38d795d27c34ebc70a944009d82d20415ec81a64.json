{"sha": "38d795d27c34ebc70a944009d82d20415ec81a64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhkNzk1ZDI3YzM0ZWJjNzBhOTQ0MDA5ZDgyZDIwNDE1ZWM4MWE2NA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-02-12T01:11:52Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-02-12T01:11:52Z"}, "message": "Fix PR c++/69098 (bogus errors with static data member template)\n\ngcc/cp/ChangeLog:\n\n\tPR c++/69098\n\t* pt.c (lookup_and_finish_template_variable): New function,\n\textracted from ...\n\t(tsubst_copy_and_build) [TEMPLATE_ID_EXPR]: ... here.\n\t(tsubst_qualified_id): Consider that EXPR might be a variable\n\ttemplate.\n\t* typeck.c (check_template_keyword): Don't emit an error\n\tif DECL is a variable template.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/69098\n\t* g++.dg/cpp1y/69098.C: New test.\n\t* g++.dg/cpp1y/69098-2.C: New test.\n\nFrom-SVN: r233365", "tree": {"sha": "67075b34dd1ed4122cb9745ae312a3b6d3897034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67075b34dd1ed4122cb9745ae312a3b6d3897034"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38d795d27c34ebc70a944009d82d20415ec81a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38d795d27c34ebc70a944009d82d20415ec81a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38d795d27c34ebc70a944009d82d20415ec81a64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38d795d27c34ebc70a944009d82d20415ec81a64/comments", "author": null, "committer": null, "parents": [{"sha": "3ac29b0f88c42ffee491a8dade51b71c147ecad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac29b0f88c42ffee491a8dade51b71c147ecad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ac29b0f88c42ffee491a8dade51b71c147ecad0"}], "stats": {"total": 143, "additions": 132, "deletions": 11}, "files": [{"sha": "3f2177f87ec5fb43bff73d6ebf1609a294da7e9e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d795d27c34ebc70a944009d82d20415ec81a64/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d795d27c34ebc70a944009d82d20415ec81a64/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38d795d27c34ebc70a944009d82d20415ec81a64", "patch": "@@ -1,3 +1,14 @@\n+2016-02-12  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/69098\n+\t* pt.c (lookup_and_finish_template_variable): New function,\n+\textracted from ...\n+\t(tsubst_copy_and_build) [TEMPLATE_ID_EXPR]: ... here.  Use it.\n+\t(tsubst_qualified_id): Consider that EXPR might be a variable\n+\ttemplate.\n+\t* typeck.c (check_template_keyword): Don't emit an error\n+\tif DECL is a variable template.\n+\n 2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* error.c: Spelling fixes - behaviour -> behavior and"}, {"sha": "a55dc10fdfc1e8d1a847c4d4e89efcc6f574cccf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d795d27c34ebc70a944009d82d20415ec81a64/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d795d27c34ebc70a944009d82d20415ec81a64/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=38d795d27c34ebc70a944009d82d20415ec81a64", "patch": "@@ -8696,6 +8696,24 @@ finish_template_variable (tree var, tsubst_flags_t complain)\n \n   return instantiate_template (templ, arglist, complain);\n }\n+\n+/* Construct a TEMPLATE_ID_EXPR for the given variable template TEMPL having\n+   TARGS template args, and instantiate it if it's not dependent.  */\n+\n+static tree\n+lookup_and_finish_template_variable (tree templ, tree targs,\n+\t\t\t\t     tsubst_flags_t complain)\n+{\n+  templ = lookup_template_variable (templ, targs);\n+  if (!any_dependent_template_arguments_p (targs))\n+    {\n+      templ = finish_template_variable (templ, complain);\n+      mark_used (templ);\n+    }\n+\n+  return convert_from_reference (templ);\n+}\n+\n \f\n struct pair_fn_data\n {\n@@ -13732,7 +13750,13 @@ tsubst_qualified_id (tree qualified_id, tree args,\n     }\n \n   if (is_template)\n-    expr = lookup_template_function (expr, template_args);\n+    {\n+      if (variable_template_p (expr))\n+\texpr = lookup_and_finish_template_variable (expr, template_args,\n+\t\t\t\t\t\t    complain);\n+      else\n+\texpr = lookup_template_function (expr, template_args);\n+    }\n \n   if (expr == error_mark_node && complain & tf_error)\n     qualified_name_lookup_error (scope, TREE_OPERAND (qualified_id, 1),\n@@ -15912,15 +15936,7 @@ tsubst_copy_and_build (tree t,\n \t  return error_mark_node;\n \n \tif (variable_template_p (templ))\n-\t  {\n-\t    templ = lookup_template_variable (templ, targs);\n-\t    if (!any_dependent_template_arguments_p (targs))\n-\t      {\n-\t\ttempl = finish_template_variable (templ, complain);\n-\t\tmark_used (templ);\n-\t      }\n-\t    RETURN (convert_from_reference (templ));\n-\t  }\n+\t  RETURN (lookup_and_finish_template_variable (templ, targs, complain));\n \n \tif (TREE_CODE (templ) == COMPONENT_REF)\n \t  {"}, {"sha": "acedab80d5c7c3163c18871bac9ba8d279c11972", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d795d27c34ebc70a944009d82d20415ec81a64/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d795d27c34ebc70a944009d82d20415ec81a64/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=38d795d27c34ebc70a944009d82d20415ec81a64", "patch": "@@ -2601,7 +2601,15 @@ check_template_keyword (tree decl)\n   if (TREE_CODE (decl) != TEMPLATE_DECL\n       && TREE_CODE (decl) != TEMPLATE_ID_EXPR)\n     {\n-      if (!is_overloaded_fn (decl))\n+      if (VAR_P (decl))\n+\t{\n+\t  if (DECL_USE_TEMPLATE (decl)\n+\t      && PRIMARY_TEMPLATE_P (DECL_TI_TEMPLATE (decl)))\n+\t    ;\n+\t  else\n+\t    permerror (input_location, \"%qD is not a template\", decl);\n+\t}\n+      else if (!is_overloaded_fn (decl))\n \tpermerror (input_location, \"%qD is not a template\", decl);\n       else\n \t{"}, {"sha": "5fcd8639941a4946c7ecffadfb68b92826b832b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d795d27c34ebc70a944009d82d20415ec81a64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d795d27c34ebc70a944009d82d20415ec81a64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38d795d27c34ebc70a944009d82d20415ec81a64", "patch": "@@ -1,3 +1,9 @@\n+2016-02-12  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/69098\n+\t* g++.dg/cpp1y/69098.C: New test.\n+\t* g++.dg/cpp1y/69098-2.C: New test.\n+\n 2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* objc.dg/gnu-api-2-method.m: Spelling fixes - behaviour -> behavior"}, {"sha": "2e968bb5c9e398462937d240925b0f038c59be46", "filename": "gcc/testsuite/g++.dg/cpp1y/69098-2.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d795d27c34ebc70a944009d82d20415ec81a64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2F69098-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d795d27c34ebc70a944009d82d20415ec81a64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2F69098-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2F69098-2.C?ref=38d795d27c34ebc70a944009d82d20415ec81a64", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/69098\n+// { dg-do compile { target c++14 } }\n+\n+struct A\n+{\n+  template <int>\n+  static void *pf;\n+};\n+\n+template <typename B>\n+bool foo1 () {\n+  return A::pf<false>;\n+}\n+\n+template <typename B>\n+bool foo2 () {\n+  return B::template pf<false>;\n+}\n+\n+template <typename B>\n+bool foo3 () {\n+  return &A::pf<false>;\n+}\n+\n+template <typename B>\n+bool foo4 () {\n+  return &B::template pf<false>;\n+}\n+\n+\n+void bar () {\n+  foo1<A>();\n+  foo2<A>();\n+  foo3<A>();\n+  foo4<A>();\n+}\n+"}, {"sha": "afc4294c4dff0b4f65e57d2dec664948880b264b", "filename": "gcc/testsuite/g++.dg/cpp1y/69098.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d795d27c34ebc70a944009d82d20415ec81a64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2F69098.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d795d27c34ebc70a944009d82d20415ec81a64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2F69098.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2F69098.C?ref=38d795d27c34ebc70a944009d82d20415ec81a64", "patch": "@@ -0,0 +1,43 @@\n+// PR c++/69098\n+// { dg-do compile { target c++14 } }\n+\n+template<typename> struct SpecPerType;\n+\n+class Specializer\n+{\n+public:\n+    template<bool> void MbrFnTempl() //Must be a template\n+\t{\n+\t}\n+\ttemplate<unsigned> struct InnerClassTempl\n+\t{  //Had to be a template whenever I tested for it\n+\t\tstatic void InnerMemberFn();\n+\t};\n+\n+\tvoid Trigger()\n+\t{\n+\t\tInnerClassTempl<0u>::InnerMemberFn();\n+\t}\n+};\n+\n+template<> struct SpecPerType<Specializer>\n+{\n+\tusing FnType = void (Specializer::*)();\n+    template<bool P> static constexpr FnType SpecMbrFnPtr =\n+        &Specializer::template MbrFnTempl<P>;\n+};\n+\n+template<bool> constexpr SpecPerType<Specializer>::FnType\n+    SpecPerType<Specializer>::SpecMbrFnPtr; //Just a formalism\n+\n+template<unsigned X> void Specializer::InnerClassTempl<X>::InnerMemberFn()\n+{\n+\tusing Spec = SpecPerType<Specializer>;\n+\ttypename Spec::FnType ErrorSite = Spec::template SpecMbrFnPtr<true>;\n+    //ErrorSite would get called next in the original code\n+    //(this should result in a call to MbrFnTempl)\n+}\n+\n+int main()\n+{\n+}"}]}