{"sha": "6a2d136bfdd1ffe83a1feb0aae0c741a7166604b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEyZDEzNmJmZGQxZmZlODNhMWZlYjBhYWUwYzc0MWE3MTY2NjA0Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-03-04T09:01:03Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-03-04T09:01:03Z"}, "message": "re PR rtl-optimization/14235 (ICE in verify_local_live_at start (flow.c:546))\n\n\tPR optimization/14235\n\t* expr.c (convert_move): Copy the source to a new pseudo\n\twhen converting from a sub-word source to a larger-than-word\n\tregister which conflicts with the source.\n\nFrom-SVN: r78893", "tree": {"sha": "70ca7951bbb8dd5d3322110e353693674bfc1df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70ca7951bbb8dd5d3322110e353693674bfc1df8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a2d136bfdd1ffe83a1feb0aae0c741a7166604b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2d136bfdd1ffe83a1feb0aae0c741a7166604b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a2d136bfdd1ffe83a1feb0aae0c741a7166604b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2d136bfdd1ffe83a1feb0aae0c741a7166604b/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3205a71e4c6b228e3b7ea99a657b4b42ffa3db69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3205a71e4c6b228e3b7ea99a657b4b42ffa3db69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3205a71e4c6b228e3b7ea99a657b4b42ffa3db69"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "3c6aae3558b0ac3c516692c1500227ae2e3a7114", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2d136bfdd1ffe83a1feb0aae0c741a7166604b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2d136bfdd1ffe83a1feb0aae0c741a7166604b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a2d136bfdd1ffe83a1feb0aae0c741a7166604b", "patch": "@@ -1,3 +1,10 @@\n+2004-03-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/14235\n+\t* expr.c (convert_move): Copy the source to a new pseudo\n+\twhen converting from a sub-word source to a larger-than-word\n+\tregister which conflicts with the source.\n+\n 2004-03-03  Zack Weinberg  <zack@codesourcery.com>\n \n \tPR 13728"}, {"sha": "14809498a937046c7779336ce10d005b92c78e4c", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2d136bfdd1ffe83a1feb0aae0c741a7166604b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2d136bfdd1ffe83a1feb0aae0c741a7166604b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6a2d136bfdd1ffe83a1feb0aae0c741a7166604b", "patch": "@@ -682,7 +682,11 @@ convert_move (rtx to, rtx from, int unsignedp)\n \t\t   != CODE_FOR_nothing))\n \t{\n \t  if (GET_CODE (to) == REG)\n-\t    emit_insn (gen_rtx_CLOBBER (VOIDmode, to));\n+\t    {\n+\t      if (reg_overlap_mentioned_p (to, from))\n+\t\tfrom = force_reg (from_mode, from);\n+\t      emit_insn (gen_rtx_CLOBBER (VOIDmode, to));\n+\t    }\n \t  convert_move (gen_lowpart (word_mode, to), from, unsignedp);\n \t  emit_unop_insn (code, to,\n \t\t\t  gen_lowpart (word_mode, to), equiv_code);"}, {"sha": "931439d24b5a2b13fb98a14aa7fc3b6e1b202c09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2d136bfdd1ffe83a1feb0aae0c741a7166604b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2d136bfdd1ffe83a1feb0aae0c741a7166604b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a2d136bfdd1ffe83a1feb0aae0c741a7166604b", "patch": "@@ -1,3 +1,7 @@\n+2004-03-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.c-torture/compile/20040304-1.c: New test.\n+\n 2004-03-03  Zack Weinberg  <zack@codesourcery.com>\n \n \tPR 13728"}, {"sha": "146d42f23d641a76e0ce52edc865a87a80d8f841", "filename": "gcc/testsuite/gcc.c-torture/compile/20040304-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2d136bfdd1ffe83a1feb0aae0c741a7166604b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040304-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2d136bfdd1ffe83a1feb0aae0c741a7166604b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040304-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040304-1.c?ref=6a2d136bfdd1ffe83a1feb0aae0c741a7166604b", "patch": "@@ -0,0 +1,45 @@\n+/* PR optimization/14235 */\n+/* Origin: <senor_fjord@yahoo.com> */\n+\n+typedef signed char        int8_t;\n+typedef short              int16_t;\n+typedef int                int32_t;\n+typedef unsigned long long uint64_t;\n+\n+static const uint64_t LOW_BYTE_MASK    = 0x00000000000000ffULL;\n+static const uint64_t HIGH_BYTE_MASK   = 0x000000000000ff00ULL;\n+static const uint64_t WORD_MASK        = 0x000000000000ffffULL;\n+static const uint64_t DWORD_MASK       = 0x00000000ffffffffULL;\n+\n+extern uint64_t *srca_mask;\n+extern int *assert_thrown;\n+\n+void foo()\n+{\n+  uint64_t tempA = 0; /* actually a bunch of code to set A */ \n+  uint64_t tempB = 0; /* actually a bunch of code to set B */ \n+\n+  /* cast A to right size */\n+  tempA = (((*srca_mask == LOW_BYTE_MASK) || \n+            (*srca_mask == HIGH_BYTE_MASK)) ?\n+           ((int8_t)tempA) : \n+           ((*srca_mask == WORD_MASK) ? \n+            ((int16_t)tempA) : \n+            ((*srca_mask == DWORD_MASK) ? \n+             ((int32_t)tempA) : \n+             tempA)));\n+\n+  /* cast B to right size */\n+  tempB = (((*srca_mask == LOW_BYTE_MASK) || \n+            (*srca_mask == HIGH_BYTE_MASK)) ? \n+           ((int8_t)tempB) : \n+           ((*srca_mask == WORD_MASK) ? \n+            ((int16_t)tempB) : \n+            ((*srca_mask == DWORD_MASK) ? \n+             ((int32_t)tempB) : \n+             tempB))); \n+    \n+  if ((int) tempA > (int) tempB) { \n+    *assert_thrown = 1;\n+  }\n+}"}]}