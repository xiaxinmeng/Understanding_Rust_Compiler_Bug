{"sha": "9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFlMjIyYWQ3OWM4M2IzOTI4ZWE4NjQzMTQwZGE2ZmM2YmZkNWUxNg==", "commit": {"author": {"name": "Igor Tsimbalist", "email": "igor.v.tsimbalist@intel.com", "date": "2017-10-21T21:33:41Z"}, "committer": {"name": "Igor Tsimbalist", "email": "itsimbal@gcc.gnu.org", "date": "2017-10-21T21:33:41Z"}, "message": "Add x86 tests for Intel CET implementation.\n\ngcc/testsuite/\n\n\t* c-c++-common/attr-nocf-check-1.c: Shorten a cheking message.\n\t* c-c++-common/attr-nocf-check-3.c: Likewise.\n\t* c-c++-common/fcf-protection-1.c: Add x86 specific message.\n\t* c-c++-common/fcf-protection-2.c: Likewise.\n\t* c-c++-common/fcf-protection-3.c: Likewise.\n\t* c-c++-common/fcf-protection-5.c: Likewise.\n\t* c-c++-common/attr-nocf-check-1a.c: New test.\n\t* c-c++-common/attr-nocf-check-3a.c: Likewise.\n\t* g++.dg/cet-notrack-1.C: Likewise.\n\t* gcc.target/i386/cet-intrin-1.c: Likewise.\n\t* gcc.target/i386/cet-intrin-10.c: Likewise.\n\t* gcc.target/i386/cet-intrin-2.c: Likewise.\n\t* gcc.target/i386/cet-intrin-3.c: Likewise.\n\t* gcc.target/i386/cet-intrin-4.c: Likewise.\n\t* gcc.target/i386/cet-intrin-5.c: Likewise.\n\t* gcc.target/i386/cet-intrin-6.c: Likewise.\n\t* gcc.target/i386/cet-intrin-7.c: Likewise.\n\t* gcc.target/i386/cet-intrin-8.c: Likewise.\n\t* gcc.target/i386/cet-intrin-9.c: Likewise.\n\t* gcc.target/i386/cet-label.c: Likewise.\n\t* gcc.target/i386/cet-notrack-1a.c: Likewise.\n\t* gcc.target/i386/cet-notrack-1b.c: Likewise.\n\t* gcc.target/i386/cet-notrack-2a.c: Likewise.\n\t* gcc.target/i386/cet-notrack-2b.c: Likewise.\n\t* gcc.target/i386/cet-notrack-3.c: Likewise.\n\t* gcc.target/i386/cet-notrack-4a.c: Likewise.\n\t* gcc.target/i386/cet-notrack-4b.c: Likewise.\n\t* gcc.target/i386/cet-notrack-5a.c: Likewise.\n\t* gcc.target/i386/cet-notrack-5b.c: Likewise.\n\t* gcc.target/i386/cet-notrack-6a.c: Likewise.\n\t* gcc.target/i386/cet-notrack-6b.c: Likewise.\n\t* gcc.target/i386/cet-notrack-7.c: Likewise.\n\t* gcc.target/i386/cet-property-1.c: Likewise.\n\t* gcc.target/i386/cet-property-2.c: Likewise.\n\t* gcc.target/i386/cet-rdssp-1.c: Likewise.\n\t* gcc.target/i386/cet-sjlj-1.c: Likewise.\n\t* gcc.target/i386/cet-sjlj-2.c: Likewise.\n\t* gcc.target/i386/cet-sjlj-3.c: Likewise.\n\t* gcc.target/i386/cet-switch-1.c: Likewise.\n\t* gcc.target/i386/cet-switch-2.c: Likewise.\n\t* lib/target-supports.exp (check_effective_target_cet): New\n\tproc.\n\nFrom-SVN: r253979", "tree": {"sha": "c1a11945bcf1a06b8455629f2effdd06fff8e21b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1a11945bcf1a06b8455629f2effdd06fff8e21b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/comments", "author": {"login": "itsimbal", "id": 29258612, "node_id": "MDQ6VXNlcjI5MjU4NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/29258612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itsimbal", "html_url": "https://github.com/itsimbal", "followers_url": "https://api.github.com/users/itsimbal/followers", "following_url": "https://api.github.com/users/itsimbal/following{/other_user}", "gists_url": "https://api.github.com/users/itsimbal/gists{/gist_id}", "starred_url": "https://api.github.com/users/itsimbal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itsimbal/subscriptions", "organizations_url": "https://api.github.com/users/itsimbal/orgs", "repos_url": "https://api.github.com/users/itsimbal/repos", "events_url": "https://api.github.com/users/itsimbal/events{/privacy}", "received_events_url": "https://api.github.com/users/itsimbal/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ccdf009d81a67a6719ff7b2106c483a18f13115f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccdf009d81a67a6719ff7b2106c483a18f13115f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccdf009d81a67a6719ff7b2106c483a18f13115f"}], "stats": {"total": 839, "additions": 828, "deletions": 11}, "files": [{"sha": "e14725979c22539118641718ebc4cd3bd1871cae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -1,3 +1,48 @@\n+2017-10-21  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+\n+\t* c-c++-common/attr-nocf-check-1.c: Shorten a cheking message.\n+\t* c-c++-common/attr-nocf-check-3.c: Likewise.\n+\t* c-c++-common/fcf-protection-1.c: Add x86 specific message.\n+\t* c-c++-common/fcf-protection-2.c: Likewise.\n+\t* c-c++-common/fcf-protection-3.c: Likewise.\n+\t* c-c++-common/fcf-protection-5.c: Likewise.\n+\t* c-c++-common/attr-nocf-check-1a.c: New test.\n+\t* c-c++-common/attr-nocf-check-3a.c: Likewise.\n+\t* g++.dg/cet-notrack-1.C: Likewise.\n+\t* gcc.target/i386/cet-intrin-1.c: Likewise.\n+\t* gcc.target/i386/cet-intrin-10.c: Likewise.\n+\t* gcc.target/i386/cet-intrin-2.c: Likewise.\n+\t* gcc.target/i386/cet-intrin-3.c: Likewise.\n+\t* gcc.target/i386/cet-intrin-4.c: Likewise.\n+\t* gcc.target/i386/cet-intrin-5.c: Likewise.\n+\t* gcc.target/i386/cet-intrin-6.c: Likewise.\n+\t* gcc.target/i386/cet-intrin-7.c: Likewise.\n+\t* gcc.target/i386/cet-intrin-8.c: Likewise.\n+\t* gcc.target/i386/cet-intrin-9.c: Likewise.\n+\t* gcc.target/i386/cet-label.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-1a.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-1b.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-2a.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-2b.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-3.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-4a.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-4b.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-5a.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-5b.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-6a.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-6b.c: Likewise.\n+\t* gcc.target/i386/cet-notrack-7.c: Likewise.\n+\t* gcc.target/i386/cet-property-1.c: Likewise.\n+\t* gcc.target/i386/cet-property-2.c: Likewise.\n+\t* gcc.target/i386/cet-rdssp-1.c: Likewise.\n+\t* gcc.target/i386/cet-sjlj-1.c: Likewise.\n+\t* gcc.target/i386/cet-sjlj-2.c: Likewise.\n+\t* gcc.target/i386/cet-sjlj-3.c: Likewise.\n+\t* gcc.target/i386/cet-switch-1.c: Likewise.\n+\t* gcc.target/i386/cet-switch-2.c: Likewise.\n+\t* lib/target-supports.exp (check_effective_target_cet): New\n+\tproc.\n+\n 2017-10-20  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.target/i386/pr79683.c: Disable costmodel."}, {"sha": "15f69731b9194e30c53c7be44ae0c2a3ce8d8564", "filename": "gcc/testsuite/c-c++-common/attr-nocf-check-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-1.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n \n-int func (int) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n-int (*fptr) (int) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n-typedef void (*nocf_check_t) (void) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+int func (int) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored\" } */\n+int (*fptr) (int) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored\" } */\n+typedef void (*nocf_check_t) (void) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored\" } */\n \n int\n foo1 (int arg)\n@@ -13,7 +13,7 @@ foo1 (int arg)\n void\n foo2 (void (*foo) (void))\n {\n-  void (*func) (void) __attribute__((nocf_check)) = foo; /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+  void (*func) (void) __attribute__((nocf_check)) = foo; /* { dg-warning \"'nocf_check' attribute ignored\" } */\n   func ();\n }\n \n@@ -24,7 +24,7 @@ foo3 (nocf_check_t foo)\n }\n \n void\n-foo4 (void (*foo) (void) __attribute__((nocf_check))) /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+foo4 (void (*foo) (void) __attribute__((nocf_check))) /* { dg-warning \"'nocf_check' attribute ignored\" } */\n {\n   foo ();\n }"}, {"sha": "9549e6976586460d2149c51af04a199d4ec0a57c", "filename": "gcc/testsuite/c-c++-common/attr-nocf-check-1a.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-1a.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcf-protection -mcet\" } */\n+\n+int func (int) __attribute__ ((nocf_check));\n+int (*fptr) (int) __attribute__ ((nocf_check));\n+typedef void (*nocf_check_t) (void) __attribute__ ((nocf_check));\n+\n+int\n+foo1 (int arg)\n+{\n+  return func (arg) + fptr (arg);\n+}\n+\n+void\n+foo2 (void (*foo) (void))\n+{\n+  void (*func) (void) __attribute__((nocf_check)) = foo; /* { dg-warning \"incompatible pointer type\" \"\" { target c } } */\n+\t\t\t\t\t\t\t /* { dg-error \"invalid conversion\" \"\" { target c++ } .-1 } */\n+  func ();\n+}\n+\n+void\n+foo3 (nocf_check_t foo)\n+{\n+  foo ();\n+}\n+\n+void\n+foo4 (void (*foo) (void) __attribute__((nocf_check)))\n+{\n+  foo ();\n+}"}, {"sha": "ad1ca7eec9bdfd2926f0ba73c57d3e2feabaea48", "filename": "gcc/testsuite/c-c++-common/attr-nocf-check-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-3.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n \n-int  foo (void) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n-void (*foo1) (void) __attribute__((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+int  foo (void) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored\" } */\n+void (*foo1) (void) __attribute__((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored\" } */\n void (*foo2) (void);\n \n int"}, {"sha": "1a833012409ef670957c5e4e8331320e2eaa6751", "filename": "gcc/testsuite/c-c++-common/attr-nocf-check-3a.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nocf-check-3a.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcf-protection -mcet\" } */\n+\n+int  foo (void) __attribute__ ((nocf_check));\n+void (*foo1) (void) __attribute__((nocf_check));\n+void (*foo2) (void);\n+\n+int __attribute__ ((nocf_check))\n+foo (void) /* The function's address is not tracked.  */\n+{\n+  /* This call site is not tracked for\n+     control-flow instrumentation.  */\n+  (*foo1)();\n+\n+  foo1 = foo2; /* { dg-warning \"incompatible pointer type\" \"\" { target c } } */\n+\t       /* { dg-error \"invalid conversion\" \"\" { target c++ } .-1 } */\n+  /* This call site is still not tracked for\n+     control-flow instrumentation.  */\n+  (*foo1)();\n+\n+  /* This call site is tracked for\n+     control-flow instrumentation.  */\n+  (*foo2)();\n+\n+  foo2 = foo1; /* { dg-warning \"incompatible pointer type\" \"\" { target c } } */\n+\t       /* { dg-error \"invalid conversion\" \"\" { target c++ } .-1 } */\n+  /* This call site is still tracked for\n+     control-flow instrumentation.  */\n+  (*foo2)();\n+\n+  return 0;\n+}"}, {"sha": "2e9337c30512950ed1105573d1859c3578059fe3", "filename": "gcc/testsuite/c-c++-common/fcf-protection-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-1.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-fcf-protection=full\" } */\n-/* { dg-error \"'-fcf-protection=full' is not supported for this target\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n+/* { dg-error \"'-fcf-protection=full' requires CET support on this target\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n /* { dg-error \"'-fcf-protection=full' is not supported for this target\" \"\" { target { ! \"i?86-*-* x86_64-*-*\" } } 0 } */"}, {"sha": "aa0d2a04645e8ef406e2967b54e8bbf532ec6f23", "filename": "gcc/testsuite/c-c++-common/fcf-protection-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-2.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-fcf-protection=branch\" } */\n-/* { dg-error \"'-fcf-protection=branch' is not supported for this target\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n+/* { dg-error \"'-fcf-protection=branch' requires CET support on this target\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n /* { dg-error \"'-fcf-protection=branch' is not supported for this target\" \"\" { target { ! \"i?86-*-* x86_64-*-*\" } } 0 } */"}, {"sha": "028775adc357137200de2a9b0505d52ef86bc36d", "filename": "gcc/testsuite/c-c++-common/fcf-protection-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-3.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-fcf-protection=return\" } */\n-/* { dg-error \"'-fcf-protection=return' is not supported for this target\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n+/* { dg-error \"'-fcf-protection=return' requires CET support on this target\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n /* { dg-error \"'-fcf-protection=return' is not supported for this target\" \"\" { target { ! \"i?86-*-* x86_64-*-*\" } } 0 } */"}, {"sha": "a5f8e116992ffb404018782989f181e2b2d6e4a2", "filename": "gcc/testsuite/c-c++-common/fcf-protection-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffcf-protection-5.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-fcf-protection\" } */\n-/* { dg-error \"'-fcf-protection=full' is not supported for this target\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n+/* { dg-error \"'-fcf-protection=full' requires CET support on this target\" \"\" { target { \"i?86-*-* x86_64-*-*\" } } 0 } */\n /* { dg-error \"'-fcf-protection=full' is not supported for this target\" \"\" { target { ! \"i?86-*-* x86_64-*-*\" } } 0 } */"}, {"sha": "43dbbd6a7f372cb23f9e6851451ac77ee5b75946", "filename": "gcc/testsuite/g++.dg/cet-notrack-1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcet-notrack-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcet-notrack-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcet-notrack-1.C?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler \"endbr32|endbr64\" } } */\n+/* { dg-final { scan-assembler-times \"\\tcall\\[ \\t]+puts\" 2 } } */\n+/* { dg-final { scan-assembler-times \"notrack call\\[ \\t]+\" 1 } } */\n+#include <stdio.h>\n+\n+struct A {\n+virtual int foo() __attribute__((nocf_check)) { return 42; }\n+};\n+\n+struct B : A {\n+int foo() __attribute__((nocf_check)) { return 73; }\n+};\n+\n+int main() {\n+B b;\n+A& a = b;\n+int (A::*amem) () __attribute__((nocf_check)) = &A::foo; // take address\n+if ((a.*amem)() == 73) // use the address\n+  printf(\"pass\\n\");\n+else\n+  printf(\"fail\\n\");\n+return 0;\n+}"}, {"sha": "695dc5edc3462745b9c164d9a8e134e61f78e206", "filename": "gcc/testsuite/gcc.target/i386/cet-intrin-10.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-10.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcet\" } */\n+/* { dg-final { scan-assembler-times \"clrssbsy\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void f2 (void *__B)\n+{\n+  _clrssbsy (__B);\n+}"}, {"sha": "bcd7203fdb4288fff391fef96b17fe5a0526141b", "filename": "gcc/testsuite/gcc.target/i386/cet-intrin-3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-3.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 2 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 4 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"rdsspd|incsspd\\[ \\t]+(%|)eax\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"rdssp\\[dq]\\[ \\t]+(%|)\\[re]ax\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"incssp\\[dq]\\[ \\t]+(%|)\\[re]di\" { target { ! ia32 } } } } */\n+\n+#include <immintrin.h>\n+\n+unsigned int f1 ()\n+{\n+  unsigned int x = 0;\n+  return _rdsspd (x);\n+}\n+\n+void f3 (unsigned int _a)\n+{\n+  _incsspd (_a);\n+}\n+\n+#ifdef __x86_64__\n+unsigned long long f2 ()\n+{\n+  unsigned long long x = 0;\n+  return _rdsspq (x);\n+}\n+\n+void f4 (unsigned int _a)\n+{\n+  _incsspq (_a);\n+}\n+#endif"}, {"sha": "76ec160543f5894db16e954a92b58a307ccbf3d5", "filename": "gcc/testsuite/gcc.target/i386/cet-intrin-4.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-4.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mshstk\" } */\n+/* { dg-final { scan-assembler \"rdsspd|incsspd\\[ \\t]+(%|)eax\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"rdssp\\[dq]\\[ \\t]+(%|)\\[re]ax\"  { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"incssp\\[dq]\\[ \\t]+(%|)\\[re]di\" { target { ! ia32 } } } } */\n+\n+#include <immintrin.h>\n+\n+unsigned int f1 ()\n+{\n+  unsigned int x = 0;\n+  return _rdsspd (x);\n+}\n+\n+void f3 (unsigned int _a)\n+{\n+  _incsspd (_a);\n+}\n+\n+#ifdef __x86_64__\n+unsigned long long f2 ()\n+{\n+  unsigned long long x = 0;\n+  return _rdsspq (x);\n+}\n+\n+void f4 (unsigned int _a)\n+{\n+  _incsspq (_a);\n+}\n+#endif"}, {"sha": "8a1b637905c2b5fd335a963474e96fcf1e490428", "filename": "gcc/testsuite/gcc.target/i386/cet-intrin-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-5.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcet\" } */\n+/* { dg-final { scan-assembler-times \"saveprevssp\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void f2 (void)\n+{\n+  _saveprevssp ();\n+}"}, {"sha": "dfa6d20ca269eb0b6da93578a168f5c62c40e9e6", "filename": "gcc/testsuite/gcc.target/i386/cet-intrin-6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-6.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcet\" } */\n+/* { dg-final { scan-assembler-times \"rstorssp\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void f2 (void *__B)\n+{\n+  _rstorssp (__B);\n+}"}, {"sha": "ecd1825a303be7588b37c4e2213dec10aa4bee8c", "filename": "gcc/testsuite/gcc.target/i386/cet-intrin-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-7.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcet\" } */\n+/* { dg-final { scan-assembler-times \"wrssd\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"wrss\\[d|q]\" 2 { target lp64 } } } */\n+\n+#include <immintrin.h>\n+\n+void f1 (unsigned int __A, void *__B)\n+{\n+  _wrssd (__A, __B);\n+}\n+\n+#ifdef __x86_64__\n+void f2 (unsigned long long __A, void *__B)\n+{\n+  _wrssq (__A, __B);\n+}\n+#endif"}, {"sha": "2188876cca557c12b7b4d9527cb0ba438f916be3", "filename": "gcc/testsuite/gcc.target/i386/cet-intrin-8.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-8.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcet\" } */\n+/* { dg-final { scan-assembler-times \"wrussd\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"wruss\\[d|q]\" 2 { target lp64 } } } */\n+\n+#include <immintrin.h>\n+\n+void f1 (unsigned int __A, void *__B)\n+{\n+  _wrussd (__A, __B);\n+}\n+\n+#ifdef __x86_64__\n+void f2 (unsigned long long __A, void *__B)\n+{\n+  _wrussq (__A, __B);\n+}\n+#endif"}, {"sha": "569931a9492c083a58fd53f78ed3d1a50e22b5c6", "filename": "gcc/testsuite/gcc.target/i386/cet-intrin-9.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-intrin-9.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcet\" } */\n+/* { dg-final { scan-assembler-times \"setssbsy\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void f2 (void)\n+{\n+  _setssbsy ();\n+}"}, {"sha": "8fb8d4203493ae28e4b400a6c9dcf554f2207578", "filename": "gcc/testsuite/gcc.target/i386/cet-label.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-label.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-label.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-label.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,16 @@\n+/* Verify that CET works.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 3 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 3 { target { ! ia32 } } } } */\n+\n+int func (int arg)\n+{\n+  static void *array[] = { &&foo, &&bar };\n+\n+  goto *array[arg];\n+foo:\n+  return arg*111;\n+bar:\n+  return arg*777;\n+}"}, {"sha": "ab0bd3ba9b2d0a3fb89eead527c6a379d1182924", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-1a.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-1a.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -fcf-protection=none -mno-cet\" } */\n+/* { dg-final { scan-assembler-not \"endbr\" } } */\n+/* { dg-final { scan-assembler-not \"notrack call\\[ \\t]+\" } } */\n+\n+int func (int a) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+int (*fptr) (int a) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+\n+int foo (int arg)\n+{\n+  int a, b;\n+  a = func (arg);\n+  b = (*fptr) (arg);\n+  return a+b;\n+}\n+\n+int __attribute__ ((nocf_check))\n+func (int arg)\n+{ /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+  int (*fptrl) (int a) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+  return arg*(*fptrl)(arg);\n+}"}, {"sha": "6faf88fdf0424771d9c8eb5d3d1d6801bcc8b7df", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-1b.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-1b.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"notrack call\\[ \\t]+\" 2 } } */\n+\n+int func (int a) __attribute__ ((nocf_check));\n+int (*fptr) (int a) __attribute__ ((nocf_check));\n+\n+int foo (int arg)\n+{\n+int a, b;\n+  a = func (arg);\n+  b = (*fptr) (arg);\n+  return a+b;\n+}\n+\n+int __attribute__ ((nocf_check))\n+func (int arg)\n+{\n+int (*fptrl) (int a) __attribute__ ((nocf_check));\n+  return arg*(*fptrl)(arg);\n+}"}, {"sha": "6f441e49edfb481f5d978acdf8030f2fa709da47", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-2a.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-2a.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"notrack call\\[ \\t]+\" 1 } } */\n+\n+void\n+bar (void (*foo) (void))\n+{\n+  void (*func) (void) __attribute__((nocf_check)) = foo; /* { dg-warning \"incompatible pointer type\" } */\n+  func ();\n+}"}, {"sha": "0df46450e8803c87b58994af26b2d66b34068b95", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-2b.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-2b.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"notrack jmp\\[ \\t]+\" 1 } } */\n+\n+void\n+bar (void (*foo) (void))\n+{\n+  void (*func) (void) __attribute__((nocf_check)) = foo; /* { dg-warning \"incompatible pointer type\" } */\n+  func ();\n+}"}, {"sha": "5e124c7f95c89b26c0e9759b21969cdacb0b61f0", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-3.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"notrack call\\[ \\t]+\" 1 } } */\n+\n+typedef void (*func_t) (void) __attribute__((nocf_check));\n+extern func_t func;\n+\n+void\n+bar (void)\n+{\n+  func ();\n+}"}, {"sha": "34cfd9098c2dd720262706e97bcd3f07c4f2296b", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-4a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-4a.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcf-protection=none -mno-cet\" } */\n+\n+int var1 __attribute__((nocf_check)); /* { dg-warning \"'nocf_check' attribute only applies to function types\" } */\n+int *var2 __attribute__((nocf_check)); /* { dg-warning \"'nocf_check' attribute only applies to function types\" } */\n+void (**var3) (void) __attribute__((nocf_check)); /* { dg-warning \"'nocf_check' attribute only applies to function types\" } */"}, {"sha": "6065ef69c25cb9284e1636a97670114cf1972382", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-4b.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-4b.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mcet\" } */\n+\n+int var1 __attribute__((nocf_check)); /* { dg-warning \"'nocf_check' attribute only applies to function types\" } */\n+int *var2 __attribute__((nocf_check)); /* { dg-warning \"'nocf_check' attribute only applies to function types\" } */\n+void (**var3) (void) __attribute__((nocf_check)); /* { dg-warning \"'nocf_check' attribute only applies to function types\" } */"}, {"sha": "d23968e58d1ccee3a413690d188061702b4ac850", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-5a.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-5a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-5a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-5a.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"\\tcall\\[ \\t]+\" } } */\n+/* { dg-final { scan-assembler-times \"notrack call\\[ \\t]+\" 1 } } */\n+\n+int (*fptr) (int) __attribute__ ((nocf_check));\n+\n+int\n+foo (int arg)\n+{\n+  int a;\n+  a = (*fptr) (arg); /* notrack call.  */\n+  return arg+a;\n+}"}, {"sha": "42d9d07b19d0b804f35af8bd82f101229ede9884", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-5b.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-5b.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,21 @@\n+/* Check the attribute do not proparate through assignment.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"\\tcall\\[ \\t]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"notrack call\\[ \\t]+\" 1 } } */\n+\n+int (*fptr) (int) __attribute__ ((nocf_check));\n+int (*fptr1) (int);\n+\n+int\n+foo (int arg)\n+{\n+  int a;\n+  a = (*fptr) (arg); /* non-checked call.  */\n+  arg += a;\n+  fptr1 = fptr; /* { dg-warning \"incompatible pointer type\" } */ \n+  a = (*fptr1) (arg); /* checked call.  */\n+  return arg+a;\n+}"}, {"sha": "e0fb4f90aafdaaaac3156b9e84ef0d416967b598", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-6a.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-6a.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"\\t(?:call|jmp)\\[ \\t]+.*foo\" 1 } } */\n+/* { dg-final { scan-assembler-not \"notrack call\\[ \\t]+\" } } */\n+\n+int foo (int arg);\n+\n+int func (int arg)\n+{\n+  int (*fptrl) (int a) __attribute__ ((nocf_check)) = foo; /* { dg-warning \"incompatible pointer type\" } */\n+\n+  return (*fptrl)(arg);\n+}"}, {"sha": "1c47c9f7d201c1d3557e50379d4079c73f9f5f13", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-6b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-6b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-6b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-6b.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"\\tcall\\[ \\t]+\" } } */\n+/* { dg-final { scan-assembler-times \"notrack call\\[ \\t]+\" 1 } } */\n+\n+int foo (int arg);\n+\n+int func (int arg)\n+{\n+  int (*fptrl) (int a) __attribute__ ((nocf_check)) = foo; /* { dg-warning \"incompatible pointer type\" } */\n+\n+  return (*fptrl)(arg);  /* notrack call.  */\n+}"}, {"sha": "f2e31d0258af5a6dfef7e4375c3f3e8f2842cc3d", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-7.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,15 @@\n+/* Check the notrack prefix is not generated for direct call.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"notrack call\\[ \\t]+.*foo\" 0 } } */\n+/* { dg-final { scan-assembler-times \"\\tcall\\[ \\t]+.*foo\" 1 } } */\n+\n+extern void foo (void) __attribute__((nocf_check));\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}"}, {"sha": "7987d53d305fbbcd554054422361db3f490caef2", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-icf-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-1.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,31 @@\n+/* Verify nocf_check functions are not ICF optimized.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"endbr\" } } */\n+/* { dg-final { scan-assembler-not \"fn3:\" } } */\n+/* { dg-final { scan-assembler \"set\\[ \\t]+fn2,fn1\" } } */\n+/* { dg-final { scan-assembler \"set\\[ \\t]+fn3,fn1\" } } */\n+\n+static __attribute__((noinline)) int\n+fn1 (int x)\n+{\n+  return x + 12;\n+}\n+\n+static __attribute__((noinline)) int\n+fn2 (int x)\n+{\n+  return x + 12;\n+}\n+\n+static __attribute__((noinline, nocf_check)) int\n+fn3 (int x)\n+{ /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+  return x + 12;\n+}\n+\n+int\n+fn4 (int x)\n+{\n+  return fn1 (x) + fn2 (x) + fn3 (x);\n+}"}, {"sha": "db0b0a44237f7f2b0af50cfc95430d2a01a72e08", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-icf-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-2.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,30 @@\n+/* Verify nocf_check functions are not ICF optimized.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler \"endbr\" } } */\n+/* { dg-final { scan-assembler \"fn3:\" } } */\n+/* { dg-final { scan-assembler \"set\\[ \\t]+fn2,fn1\" } } */\n+\n+static __attribute__((noinline)) int\n+fn1 (int x)\n+{\n+  return x + 12;\n+}\n+\n+static __attribute__((noinline)) int\n+fn2 (int x)\n+{\n+  return x + 12;\n+}\n+\n+static __attribute__((noinline, nocf_check)) int\n+fn3 (int x)\n+{\n+  return x + 12;\n+}\n+\n+int\n+fn4 (int x)\n+{\n+  return fn1 (x) + fn2 (x) + fn3 (x);\n+}"}, {"sha": "07c4a6b61ef97bb69c5e065873abe97c7a0d8e35", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-icf-3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-3.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,36 @@\n+/* Verify nocf_check function calls are not ICF optimized.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"endbr\" } } */\n+/* { dg-final { scan-assembler-not \"fn2:\" } } */\n+/* { dg-final { scan-assembler \"set\\[ \\t]+fn2,fn1\" } } */\n+/* { dg-final { scan-assembler \"set\\[ \\t]+fn3,fn1\" } } */\n+\n+int (*foo)(int);\n+\n+typedef int (*type1_t) (int) __attribute__ ((nocf_check)); /* { dg-warning \"'nocf_check' attribute ignored. Use -fcf-protection option to enable it\" } */\n+typedef int (*type2_t) (int);\n+\n+static __attribute__((noinline)) int\n+fn1 (int x)\n+{\n+  return ((type2_t)foo)(x + 12);\n+}\n+\n+static __attribute__((noinline)) int\n+fn2 (int x)\n+{\n+  return ((type1_t)foo)(x + 12);\n+}\n+\n+static __attribute__((noinline)) int\n+fn3 (int x)\n+{\n+  return ((type2_t)foo)(x + 12);\n+}\n+\n+int\n+fn4 (int x)\n+{\n+  return fn1 (x) + fn2 (x) + fn3 (x);\n+}"}, {"sha": "e4e96aaf0dcd0057fe357b1660709aaf1a5ef898", "filename": "gcc/testsuite/gcc.target/i386/cet-notrack-icf-4.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-notrack-icf-4.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,35 @@\n+/* Verify nocf_check function calls are not ICF optimized.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler \"endbr\" } } */\n+/* { dg-final { scan-assembler \"fn2:\" } } */\n+/* { dg-final { scan-assembler \"set\\[ \\t]+fn3,fn1\" } } */\n+\n+int (*foo)(int);\n+\n+typedef int (*type1_t) (int) __attribute__ ((nocf_check));\n+typedef int (*type2_t) (int);\n+\n+static __attribute__((noinline)) int\n+fn1 (int x)\n+{\n+  return ((type2_t)foo)(x + 12);\n+}\n+\n+static __attribute__((noinline)) int\n+fn2 (int x)\n+{\n+  return ((type1_t)foo)(x + 12);\n+}\n+\n+static __attribute__((noinline)) int\n+fn3 (int x)\n+{\n+  return ((type2_t)foo)(x + 12);\n+}\n+\n+int\n+fn4 (int x)\n+{\n+  return fn1 (x) + fn2 (x) + fn3 (x);\n+}"}, {"sha": "df243efc574cee9fdf0cb24dd7f27216a46064b0", "filename": "gcc/testsuite/gcc.target/i386/cet-property-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-property-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-property-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-property-1.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler \".note.gnu.property\" } } */\n+\n+extern void foo (void);\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}"}, {"sha": "5a87dab92f1869a375efec3721764b3b6e5767b3", "filename": "gcc/testsuite/gcc.target/i386/cet-property-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-property-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-property-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-property-2.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcet\" } */\n+/* { dg-final { scan-assembler-not \".note.gnu.property\" } } */\n+\n+extern void foo (void);\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}"}, {"sha": "fb50ff4350491600e4f636b2972d215d6bedead7", "filename": "gcc/testsuite/gcc.target/i386/cet-rdssp-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-rdssp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-rdssp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-rdssp-1.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target cet } } */\n+/* { dg-options \"-O2 -fcf-protection -mcet\" } */\n+\n+void _exit(int status) __attribute__ ((__noreturn__));\n+\n+#ifdef __x86_64__\n+# define incssp(x) __builtin_ia32_incsspq (x)\n+# define rdssp(x) __builtin_ia32_rdsspq (x)\n+#else\n+# define incssp(x) __builtin_ia32_incsspd (x)\n+# define rdssp(x) __builtin_ia32_rdsspd (x)\n+#endif\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+test (unsigned long frames)\n+{\n+  unsigned long ssp = 0;\n+  ssp = rdssp (ssp);\n+  if (ssp != 0)\n+    {\n+      unsigned long tmp = frames;\n+      while (tmp > 255)\n+\t{\n+\t  incssp (tmp);\n+\t  tmp -= 255;\n+\t}\n+      incssp (tmp);\n+    }\n+  /* We must call _exit since shadow stack is incorrect now.  */\n+  _exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  test (1);\n+  return 0;\n+}"}, {"sha": "374d12aa745a5d4898f4824cad42edff87bd57a3", "filename": "gcc/testsuite/gcc.target/i386/cet-sjlj-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-1.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 4 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 4 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"rdssp\\[dq]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"incssp\\[dq]\" 1 } } */\n+\n+/* Based on gcc.dg/setjmp-3.c.  */\n+\n+void *buf[5];\n+\n+extern void abort (void);\n+\n+void raise0(void)\n+{\n+  __builtin_longjmp (buf, 1);\n+}\n+\n+int execute(int cmd)\n+{\n+  int last = 0;\n+\n+  if (__builtin_setjmp (buf) == 0)\n+    while (1)\n+      {\n+\tlast = 1;\n+\traise0 ();\n+      }\n+\n+  if (last == 0)\n+    return 0;\n+  else\n+    return cmd;\n+}\n+\n+int main(void)\n+{\n+  if (execute (1) == 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "c97094a19c9e18549f2a00bca965a881b9940f76", "filename": "gcc/testsuite/gcc.target/i386/cet-sjlj-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-2.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do run { target cet } } */\n+/* { dg-options \"-O -fcf-protection -mcet\" } */\n+\n+#include \"cet-sjlj-1.c\""}, {"sha": "c1efbbeab17bb2da50d3b99885dc4b46bf0cf2ea", "filename": "gcc/testsuite/gcc.target/i386/cet-sjlj-3.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-3.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 4 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 4 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"call\t_setjmp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"call\tlongjmp\" 1 } } */\n+\n+#include <stdio.h>\n+#include <setjmp.h>\n+\n+jmp_buf buf;\n+int bar (int);\n+\n+int\n+foo (int i)\n+{\n+  int j = i * 11;\n+\n+  if (!setjmp (buf))\n+    {\n+      j += 33;\n+      printf (\"After setjmp: j = %d\\n\", j);\n+      bar (j);\n+    }\n+\n+  return j + i;\n+}\n+\n+int\n+bar (int i)\n+{\n+int j = i;\n+\n+  j -= 111;\n+  printf (\"In longjmp: j = %d\\n\", j);\n+  longjmp (buf, 1);\n+\n+  return j;\n+}\n+\n+int\n+main ()\n+{\n+  foo (10);\n+  return 0;\n+}"}, {"sha": "7a75857fcb11f1c0d5afa774e6c337cdd6fa13ba", "filename": "gcc/testsuite/gcc.target/i386/cet-switch-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-switch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-switch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-switch-1.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,26 @@\n+/* Verify that CET works.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mcet\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"notrack jmp\\[ \\t]+\\[*]\" 1 } } */\n+\n+void func2 (int);\n+\n+int func1 (int arg)\n+{\n+  switch (arg)\n+  {\n+    case 1: func2 (arg*100);\n+    case 2: func2 (arg*300);\n+    case 5: func2 (arg*500);\n+    case 8: func2 (arg*700);\n+    case 7: func2 (arg*900);\n+    case -1: func2 (arg*-100);\n+    case -2: func2 (arg*-300);\n+    case -5: func2 (arg*-500);\n+    case -7: func2 (arg*-700);\n+    case -9: func2 (arg*-900);\n+  }\n+  return 0;\n+}"}, {"sha": "e620b837a3c499b406c0cb516e63841732f31b7f", "filename": "gcc/testsuite/gcc.target/i386/cet-switch-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-switch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-switch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-switch-2.c?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -0,0 +1,26 @@\n+/* Verify that CET works.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcf-protection -mcet -mcet-switch\" } */\n+/* { dg-final { scan-assembler-times \"endbr32\" 12 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"endbr64\" 12 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"\\[ \\t]+jmp\\[ \\t]+\\[*]\" 1 } } */\n+\n+void func2 (int);\n+\n+int func1 (int arg)\n+{\n+  switch (arg)\n+  {\n+    case 1: func2 (arg*100);\n+    case 2: func2 (arg*300);\n+    case 5: func2 (arg*500);\n+    case 8: func2 (arg*700);\n+    case 7: func2 (arg*900);\n+    case -1: func2 (arg*-100);\n+    case -2: func2 (arg*-300);\n+    case -5: func2 (arg*-500);\n+    case -7: func2 (arg*-700);\n+    case -9: func2 (arg*-900);\n+  }\n+  return 0;\n+}"}, {"sha": "56ac2211e47b2e26c16c6d4447afcbc26dabc616", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ae222ad79c83b3928ea8643140da6fc6bfd5e16/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=9ae222ad79c83b3928ea8643140da6fc6bfd5e16", "patch": "@@ -8923,3 +8923,16 @@ proc check_effective_target_callee_realigns_stack { } {\n   }\n   return 0\n }\n+\n+# Return 1 if CET instructions can be compiled.\n+proc check_effective_target_cet { } {\n+    if { !([istarget i?86-*-*] || [istarget x86_64-*-*]) } {\n+\treturn 0\n+    }\n+    return [check_no_compiler_messages cet object {\n+\tvoid foo (void)\n+\t{\n+\t  asm (\"setssbsy\");\n+\t}\n+    } \"-O2\" ]\n+}"}]}