{"sha": "4dabb03719553f88ef0d74c75ccdc6c8aa172d6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRhYmIwMzcxOTU1M2Y4OGVmMGQ3NGM3NWNjZGM2YzhhYTE3MmQ2Yg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-18T00:16:34Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-18T00:16:34Z"}, "message": "Daily bump.", "tree": {"sha": "f66c62c9e2e6b97834ebd35643856945adeda0e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f66c62c9e2e6b97834ebd35643856945adeda0e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/comments", "author": null, "committer": null, "parents": [{"sha": "1e3e6c700f04fe6992b9077541e434172c1cbdae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3e6c700f04fe6992b9077541e434172c1cbdae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e3e6c700f04fe6992b9077541e434172c1cbdae"}], "stats": {"total": 440, "additions": 439, "deletions": 1}, "files": [{"sha": "2e7d91bcab0e3df1d92999e6d424841fbd7654bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4dabb03719553f88ef0d74c75ccdc6c8aa172d6b", "patch": "@@ -1,3 +1,181 @@\n+2020-11-17  Sebastian Pop  <spop@amazon.com>\n+\n+\t* config.gcc: add configure flags --with-{cpu,arch,tune}-{32,64}\n+\tas alias flags for --with-{cpu,arch,tune} on AArch64.\n+\t* doc/install.texi: Document new flags for aarch64.\n+\n+2020-11-17  Sebastian Pop  <spop@amazon.com>\n+\n+\t* config.gcc: Add --with-tune to AArch64 configure flags.\n+\n+2020-11-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/91029\n+\t* range-op.cc (operator_trunc_mod::op1_range): New.\n+\n+2020-11-17  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-icf.c (sem_function::hash_stmt): Fix conditional on\n+\tvariably_modified_type_p.\n+\n+2020-11-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* tree.h (cache_integer_cst): Add defaulted might_duplicate parm.\n+\t* tree.c (cache_integer_cst): Return the integer cst, add\n+\tmight_duplicate parm to permit finding a small duplicate.\n+\n+2020-11-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/83072\n+\t* range-op.cc (wi_optimize_and_or): Remove zero from IOR range when\n+\tmask is non-zero.\n+\n+2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ginclude/float.h (CR_DECIMAL_DIG): Also define for\n+\t[__STDC_WANT_IEC_60559_EXT__].\n+\n+2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ginclude/float.h [__STDC_VERSION__ > 201710L] (FLT_IS_IEC_60559,\n+\tDBL_IS_IEC_60559, LDBL_IS_IEC_60559): New macros.\n+\n+2020-11-17  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\tPR target/96791\n+\t* mode-classes.def: Add MODE_OPAQUE.\n+\t* machmode.def: Add OPAQUE_MODE.\n+\t* tree.def: Add OPAQUE_TYPE for types that will use\n+\tMODE_OPAQUE.\n+\t* doc/generic.texi: Document OPAQUE_TYPE.\n+\t* doc/rtl.texi: Document MODE_OPAQUE.\n+\t* machmode.h: Add OPAQUE_MODE_P().\n+\t* genmodes.c (complete_mode): Add MODE_OPAQUE.\n+\t(opaque_mode): New function.\n+\t* tree.c (tree_code_size): Add OPAQUE_TYPE.\n+\t* tree.h: Add OPAQUE_TYPE_P().\n+\t* stor-layout.c (int_mode_for_mode): Treat MODE_OPAQUE modes\n+\tlike BLKmode.\n+\t* ira.c (find_moveable_pseudos): Treat MODE_OPAQUE modes more\n+\tlike integer/float modes here.\n+\t* dbxout.c (dbxout_type): Treat OPAQUE_TYPE like VOID_TYPE.\n+\t* tree-pretty-print.c (dump_generic_node): Treat OPAQUE_TYPE\n+\tlike like other types.\n+\n+2020-11-17  Jan Hubicka  <hubicka@ucw.cz>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-icf.c: Include data-streamer.h and alias.h.\n+\t(sem_function::sem_function): Initialize memory_access_types\n+\tand m_alias_sets_hash.\n+\t(sem_function::hash_stmt): For memory accesses and when going to\n+\tdo lto streaming add base and ref types into memory_access_types.\n+\t(sem_item_optimizer::write_summary): Stream memory access types.\n+\t(sem_item_optimizer::read_section): Likewise and also iniitalize\n+\tm_alias_sets_hash.\n+\t(sem_item_optimizer::execute): Call\n+\tsem_item_optimizer::update_hash_by_memory_access_type.\n+\t(sem_item_optimizer::update_hash_by_memory_access_type): Updat.\n+\t* ipa-icf.h (sem_function): Add memory_access_types and\n+\tm_alias_sets_hash.\n+\n+2020-11-17  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR bootstrap/97857\n+\t* ipa-devirt.c (odr_based_tbaa_p): Do not ICE when\n+\todr_hash is not initialized\n+\t* ipa-utils.h (type_with_linkage_p): Do not sanity check\n+\tCXX_ODR_P.\n+\t* tree-streamer-out.c (pack_ts_type_common_value_fields): Set\n+\tCXX_ODR_P according to the canonical type.\n+\n+2020-11-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* langhooks-def.h (LANG_HOOKS_PREPROCESS_MAIN_FILE)\n+\t(LANG_HOOKS_PREPROCESS_OPTIONS, LANG_HOOKS_PREPROCESS_UNDEF)\n+\t(LANG_HOOKS_PREPROCESS_TOKEN): New.\n+\t(LANG_HOOKS_INITIALIZER): Add them.\n+\t* langhooks.h (struct lang_hooks): Add preprocess_main_file,\n+\tpreprocess_options, preprocess_undef, preprocess_token hooks.  Add\n+\tenum PT_flags.\n+\n+2020-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/97693\n+\t* tree-vect-stmts.c (vectorizable_call): Pass the required vectype\n+\tto vect_get_vec_defs_for_operand.\n+\n+2020-11-17  Liu Hao  <lh_mouse@126.com>\n+\n+\t* config/i386/msformat-c.c: Add more length modifiers.\n+\n+2020-11-17  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR driver/97574\n+\t* gcc.c (convert_filename): Don't add suffix to things that are\n+\tnot files.\n+\t(not_actual_file_p): Use supplied argument.\n+\n+2020-11-17  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* final.c (final_scan_insn_1): Set jump table relocatable as the\n+\tsecond argument of targetm.asm_out.function_rodata_section.\n+\t* output.h (default_function_rodata_section,\n+\tdefault_no_function_rodata_section): Add the second argument to the\n+\tdeclarations.\n+\t* target.def (function_rodata_section): Change the doc and add\n+\tthe second argument.\n+\t* doc/tm.texi: Regenerate.\n+\t* varasm.c (jumptable_relocatable): Implement.\n+\t(default_function_rodata_section): Add the second argument\n+\tand the support for relocatable read only sections.\n+\t(default_no_function_rodata_section): Add the second argument.\n+\t(function_mergeable_rodata_prefix): Set the second argument to false.\n+\t* config/mips/mips.c (mips_function_rodata_section): Add the second\n+\tarugment and set it to false.\n+\t* config/s390/s390.c (targetm.asm_out.function_rodata_section): Set\n+\tthe second argument to false.\n+\t* config/s390/s390.md: Likewise.\n+\n+2020-11-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/97194\n+\t* config/i386/i386-expand.c (ix86_expand_vector_set_var): New function.\n+\t* config/i386/i386-protos.h (ix86_expand_vector_set_var): New Decl.\n+\t* config/i386/predicates.md (vec_setm_operand): New predicate,\n+\ttrue for const_int_operand or register_operand under TARGET_AVX2.\n+\t* config/i386/sse.md (vec_set<mode>): Support both constant\n+\tand variable index vec_set.\n+\n+2020-11-17  Martin Sebor  <msebor@redhat.com>\n+\n+\t* tree-ssa-uninit.c (maybe_warn_operand): Call is_empty_type.\n+\t* tree.c (default_is_empty_type): Rename...\n+\t(is_empty_type): ...to this.\n+\t* tree.h (is_empty_type): Declare.\n+\n+2020-11-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/95673\n+\t* tree-ssa-strlen.c (used_only_for_zero_equality): Rename...\n+\t(use_in_zero_equality): ...to this.  Add a default argument.\n+\t(handle_builtin_memcmp): Adjust to the name change above.\n+\t(handle_builtin_string_cmp): Same.\n+\t(maybe_warn_pointless_strcmp): Same.  Pass in an explicit argument.\n+\n+2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ginclude/float.h (DEC32_SNAN, DEC64_SNAN, DEC128_SNAN): New C2x\n+\tmacros.\n+\n+2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ginclude/float.h (INFINITY, NAN, FLT_SNAN, DBL_SNAN, LDBL_SNAN)\n+\t(FLT16_SNAN, FLT32_SNAN, FLT64_SNAN, FLT128_SNAN, FLT32X_SNAN)\n+\t(FLT64X_SNAN, FLT128X_SNAN, DEC_INFINITY, DEC_NAN): New C2x\n+\tmacros.\n+\t* doc/sourcebuild.texi (Effective-Target Keywords): Document inff.\n+\n 2020-11-17  Armin Brauns via Gcc-patches  <gcc-patches@gcc.gnu.org>\n \n \t* gcc.c: Document %T spec file directive."}, {"sha": "6ee7c2ae987a5cbf2a7bcad4930b8b70d5682306", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4dabb03719553f88ef0d74c75ccdc6c8aa172d6b", "patch": "@@ -1 +1 @@\n-20201117\n+20201118"}, {"sha": "3fec8f24ee96026a06542c61b21115818ffa3b17", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4dabb03719553f88ef0d74c75ccdc6c8aa172d6b", "patch": "@@ -1,3 +1,44 @@\n+2020-11-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-common.h (enum c_tree_index): Reorder to place lazy fields\n+\tafter newly-added CTI_MODULE_HWM.\n+\n+2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-cppbuiltin.c (builtin_define_float_constants): Define\n+\t\"*_IS_IEC_60559__\" macros.\n+\n+2020-11-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-lex.c: #include \"langhooks.h\".\n+\t(cb_undef): Maybe call preprocess_undef lang hook.\n+\t* c-opts.c (c_common_post_options): Maybe call preprocess_options\n+\tlang hook.\n+\t(push_command_line_include): Maybe call preprocess_main_file lang\n+\thook.\n+\t(cb_file_change): Likewise.\n+\t* c-ppoutput.c: #include \"langhooks.h.\n+\t(scan_translation_unit): Maybe call preprocess_token lang hook.\n+\t(class do_streamer): New, derive from token_streamer.\n+\t(directives_only_cb): Data pointer is do_streamer, call\n+\tpreprocess_token lang hook.\n+\t(scan_translation_unit_directives_only): Use do_streamer.\n+\t(print_line_1): Move src_line recording to after string output.\n+\t(cb_undef): Maybe call preprocess_undef lang hook.\n+\n+2020-11-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-ppoutput.c (scan_translation_unit): Use token_streamer, remove\n+\tcode duplicating that functionality.\n+\n+2020-11-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/90628\n+\t* c-common.c (check_builtin_function_arguments)\n+\t<case BUILT_IN_ADD_OVERFLOW>: Diagnose when last argument is pointer\n+\tto _Atomic.  For the TYPE_READONLY case, adjust message to be usable\n+\tfor more builtins and argument positions.\n+\n 2020-11-16  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR objc/97854"}, {"sha": "0f418629c9396218274b731856b6b5c572693726", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4dabb03719553f88ef0d74c75ccdc6c8aa172d6b", "patch": "@@ -1,3 +1,19 @@\n+2020-11-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/97877\n+\t* decl.c (duplicate_decls): Deal with duplicated DECL_LOCAL_DECL_P\n+\tdecls.  Extend decl_lang_specific checking assert.\n+\n+2020-11-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (enum cp_tree_index): Reorder to place lazy fields\n+\tafter newly-added CPTI_MODULE_HWM.\n+\n+2020-11-17  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/97871\n+\t* parser.c (cp_parser_declaration): Remove checking assert.\n+\n 2020-11-15  Jason Merrill  <jason@redhat.com>\n \n \t* decl.c (cp_finish_decl): Only check abstractness on definition."}, {"sha": "69b337c64db0665119e43ca4790547d12e36c394", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4dabb03719553f88ef0d74c75ccdc6c8aa172d6b", "patch": "@@ -1,3 +1,8 @@\n+2020-11-17  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* gfortran.texi: Fix description of GFC_RTCHECK_* to match actual\n+\tcode.\n+\n 2020-11-16  Harald Anlauf  <anlauf@gmx.de>\n \n \t* trans-intrinsic.c (gfc_conv_intrinsic_size): Generate runtime"}, {"sha": "29d07052ac03952a422992883bebbbc6aaf71bcd", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=4dabb03719553f88ef0d74c75ccdc6c8aa172d6b", "patch": "@@ -1,3 +1,10 @@\n+2020-11-17  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR bootstrap/97857\n+\t* lto-common.c (gimple_register_canonical_type_1): Only\n+\tregister types with TYPE_CXX_ODR_P flag; sanity check that no\n+\tconflict happens at ltrans time.\n+\n 2020-11-06  Nathan Sidwell  <nathan@acm.org>\n \n \t* lto-symtab.c (lto_symtab_merge_decls_1): Rename"}, {"sha": "ec4c0d7405530ececa319d17ca1be034b68587cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4dabb03719553f88ef0d74c75ccdc6c8aa172d6b", "patch": "@@ -1,3 +1,138 @@\n+2020-11-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr91029.c: New.\n+\n+2020-11-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/97877\n+\t* g++.dg/lookup/pr97877.C: New.\n+\n+2020-11-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr83072.c: New.\n+\n+2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/cr-decimal-dig-3.c: New test.\n+\n+2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-float-6.c, gcc.dg/c2x-float-10.c: New tests.\n+\n+2020-11-17  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.dg/pr25376.c: Allow .opd section.\n+\n+2020-11-17  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/31799\n+\t* gcc.target/i386/pr31799.c: New test.\n+\n+2020-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cond_cnot_1.c: Remove XFAIL.\n+\t* gcc.target/aarch64/sve/cond_unary_1.c: Likewise.\n+\n+2020-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR tree-optimization/97693\n+\t* gcc.dg/vect/pr97693.c: New test.\n+\n+2020-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/slp-46.c: XFAIL test for SLP on vect_load_lanes targets.\n+\n+2020-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/aligned-section-anchors-nest-1.c: XFAIL alignment\n+\ttest if vect_element_align_preferred.\n+\n+2020-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/bb-slp-subgroups-3.c: XFAIL for variable-length vectors.\n+\n+2020-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/pr65947-8.c: Expect the loop to be vectorized for SVE.\n+\n+2020-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/pr97678.c: XFAIL test for SLP vectorization\n+\tfor variable-length vectors.\n+\t* gcc.dg/vect/pr97835.c: Likewise.\n+\t* gcc.dg/vect/slp-49.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-slp-1.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-slp-2.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-slp-3.c: Likewise.\n+\n+2020-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/slp-reduc-4.c: XFAIL test for SLP vectorization\n+\tfor variable-length SVE.\n+\t* gcc.dg/vect/slp-reduc-7.c: Likewise.\n+\n+2020-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/bb-slp-43.c: Remove XFAIL for vect_variable_length.\n+\n+2020-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/pr91750.c: Allow \"[],\" inside a vector(...) lane count.\n+\n+2020-11-17  Liu Hao  <lh_mouse@126.com>\n+\n+\t* gcc.dg/format/ms_c99-printf-3.c: Update tests.\n+\n+2020-11-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/90628\n+\t* gcc.dg/builtin-arith-overflow-4.c: New test.\n+\n+2020-11-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/guality/pr59776.c (foo): Use noipa attribute instead of\n+\tnoinline, noclone.\n+\n+2020-11-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx2-vec-set-1.c: New test.\n+\t* gcc.target/i386/avx2-vec-set-2.c: New test.\n+\t* gcc.target/i386/avx512bw-vec-set-1.c: New test.\n+\t* gcc.target/i386/avx512bw-vec-set-2.c: New test.\n+\t* gcc.target/i386/avx512f-vec-set-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vec-set-2.c: New test.\n+\n+2020-11-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/95673\n+\t* gcc.dg/Wstring-compare-3.c: New test.\n+\n+2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/dfp/c2x-float-dfp-7.c, gcc.dg/dfp/c2x-float-dfp-8.c: New\n+\ttests.\n+\t* gcc.dg/c2x-float-no-dfp-3.c: Also check that DEC32_SNAN,\n+\tDEC64_SNAN and DEC128_SNAN are not defined.\n+\n+2020-11-17  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_inff): New.\n+\t* gcc.dg/c11-float-4.c, gcc.dg/c11-float-5.c,\n+\tgcc.dg/c11-float-dfp-2.c, gcc.dg/c2x-float-2.c,\n+\tgcc.dg/c2x-float-3.c, gcc.dg/c2x-float-4.c, gcc.dg/c2x-float-5.c,\n+\tgcc.dg/c2x-float-6.c, gcc.dg/c2x-float-7.c, gcc.dg/c2x-float-8.c,\n+\tgcc.dg/c2x-float-9.c, gcc.dg/c2x-float-no-dfp-3.c,\n+\tgcc.dg/c2x-float-no-dfp-4.c, gcc.dg/dfp/c2x-float-dfp-4.c,\n+\tgcc.dg/dfp/c2x-float-dfp-5.c, gcc.dg/dfp/c2x-float-dfp-6.c,\n+\tgcc.dg/torture/float128-nan-floath.c,\n+\tgcc.dg/torture/float128x-nan-floath.c,\n+\tgcc.dg/torture/float16-nan-floath.c,\n+\tgcc.dg/torture/float32-nan-floath.c,\n+\tgcc.dg/torture/float32x-nan-floath.c,\n+\tgcc.dg/torture/float64-nan-floath.c,\n+\tgcc.dg/torture/float64x-nan-floath.c,\n+\tgcc.dg/torture/floatn-nan-floath.h: New tests.\n+\n 2020-11-16  Roger Sayle  <roger@nextmovesoftware.com>\n \n \tPR rtl-optimization/92180"}, {"sha": "2b3546b68b8c8ca3ffc590c434baf6758e04a184", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=4dabb03719553f88ef0d74c75ccdc6c8aa172d6b", "patch": "@@ -1,3 +1,32 @@\n+2020-11-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* include/cpplib.h (struct cpp_callbacks): Add\n+\tuser_deferred_macro & translate_include.\n+\n+2020-11-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* include/line-map.h (enum lc_reason): Add LC_MODULE.\n+\t(MAP_MODULE_P): New.\n+\t(line_map_new_raw): Declare.\n+\t(linemap_enter_macro): Move declaration from internal.h\n+\t(linemap_module_loc, linemap_module_reparent)\n+\t(linemap_module_restore): Declare.\n+\t(linemap_lookup_macro_indec): Declare.\n+\t* internal.h (linemap_enter_macro): Moved to line-map.h.\n+\t* line-map.c (linemap_new_raw): New, broken out of ...\n+\t(new_linemap): ... here.  Call it.\n+\t(LAST_SOURCE_LINE_LOCATION): New.\n+\t(liemap_module_loc, linemap_module_reparent)\n+\t(linemap_module_restore): New.\n+\t(linemap_lookup_macro_index): New, broken out of ...\n+\t(linemap_macro_map_lookup): ... here.  Call it.\n+\t(linemap_dump): Add module dump.\n+\n+2020-11-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR preprocessor/97858\n+\t* mkdeps.c (munge): Drop varadic args, we only ever use one.\n+\n 2020-11-13  Joseph Myers  <joseph@codesourcery.com>\n \n \t* expr.c (cpp_classify_number): Update diagnostic for binary"}, {"sha": "471069b8f91d5a918462567625099170a7ce62b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dabb03719553f88ef0d74c75ccdc6c8aa172d6b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4dabb03719553f88ef0d74c75ccdc6c8aa172d6b", "patch": "@@ -1,3 +1,30 @@\n+2020-11-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/93421\n+\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Fail if struct\n+\ttimespec isn't compatible with SYS_clock_gettime.\n+\t* configure: Regenerate.\n+\t* src/c++11/chrono.cc: Revert changes for time64 compatibility.\n+\tAdd static_assert instead.\n+\t* src/c++11/futex.cc (_M_futex_wait_until_steady): Assume\n+\tSYS_clock_gettime can use struct timespec.\n+\n+2020-11-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97869\n+\t* include/precompiled/stdc++.h: Include <coroutine>.\n+\t* include/std/version (__cpp_lib_span): Check __cpp_lib_concepts\n+\tbefore defining.\n+\n+2020-11-17  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/97828\n+\t* include/bits/ranges_algo.h (__search_n_fn::operator()): Check\n+\trandom_access_iterator before using the backtracking\n+\timplementation.  When the backwards scan fails prematurely,\n+\treset __remainder appropriately.\n+\t* testsuite/25_algorithms/search_n/97828.cc: New test.\n+\n 2020-11-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/Makefile.am (libstdc++-symbols.ver-sun): Remove -lrt from"}]}