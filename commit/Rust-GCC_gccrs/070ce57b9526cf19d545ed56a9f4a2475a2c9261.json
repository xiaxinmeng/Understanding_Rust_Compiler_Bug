{"sha": "070ce57b9526cf19d545ed56a9f4a2475a2c9261", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwY2U1N2I5NTI2Y2YxOWQ1NDVlZDU2YTlmNGEyNDc1YTJjOTI2MQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-01-14T04:11:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-01-14T04:11:57Z"}, "message": "ifstream_extract_float.cc: Add higher precision tests.\n\n2\n2004-01-13  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/performance/ifstream_extract_float.cc: Add higher\n\tprecision tests.\n\t* testsuite/performance/ofstream_insert_float.cc: Same.\n\nFrom-SVN: r75841", "tree": {"sha": "7f702b5470b7e06c397fe020d20c27389efcb18a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f702b5470b7e06c397fe020d20c27389efcb18a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/070ce57b9526cf19d545ed56a9f4a2475a2c9261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070ce57b9526cf19d545ed56a9f4a2475a2c9261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070ce57b9526cf19d545ed56a9f4a2475a2c9261", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070ce57b9526cf19d545ed56a9f4a2475a2c9261/comments", "author": null, "committer": null, "parents": [{"sha": "5b8d96f1093274d0cf640c9b71d837328f7526b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8d96f1093274d0cf640c9b71d837328f7526b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b8d96f1093274d0cf640c9b71d837328f7526b3"}], "stats": {"total": 86, "additions": 61, "deletions": 25}, "files": [{"sha": "fab586eb6bdaabfe844073ccda69f2093878ad15", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ce57b9526cf19d545ed56a9f4a2475a2c9261/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ce57b9526cf19d545ed56a9f4a2475a2c9261/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=070ce57b9526cf19d545ed56a9f4a2475a2c9261", "patch": "@@ -1,3 +1,9 @@\n+2004-01-13  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/performance/ifstream_extract_float.cc: Add higher\n+\tprecision tests.\n+\t* testsuite/performance/ofstream_insert_float.cc: Same.\n+\t\n 2004-01-13  Paolo Carlini  <pcarlini@suse.de>\n \n \t* src/locale-misc-inst.cc (__convert_from_v(long),"}, {"sha": "55710c2afce989a3a14b5cc15e4889afcb60ebde", "filename": "libstdc++-v3/testsuite/performance/ifstream_extract_float.cc", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ce57b9526cf19d545ed56a9f4a2475a2c9261/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fifstream_extract_float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ce57b9526cf19d545ed56a9f4a2475a2c9261/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fifstream_extract_float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fifstream_extract_float.cc?ref=070ce57b9526cf19d545ed56a9f4a2475a2c9261", "patch": "@@ -26,36 +26,51 @@\n // the GNU General Public License.\n \n #include <fstream>\n+#include <sstream>\n #include <testsuite_performance.h>\n \n-int main() \n+void test_extraction(int p = 6)\n {\n   using namespace std;\n   using namespace __gnu_test;\n \n-  time_counter time;\n-  resource_counter resource;\n+  const char* filename = \"tmp_perf_float.txt\";\n   const int iterations = 10000000;\n \n+  ostringstream oss;\n+  oss << \"precision \" << p;\n+\n+  // Construct data.\n   {\n-    ofstream out(\"tmp_perf_float.txt\");\n+    ofstream out(filename);\n+    out.precision(p);\n     for (int i = 0; i < iterations; ++i)\n       {\n \tfloat f = i * 3.14159265358979323846;\n-\tout << f << \"\\n\";\n+\tout << f << '\\n';\n       }\n   }\n \n   {\n-    ifstream in(\"tmp_perf_float.txt\");\n+    time_counter time;\n+    resource_counter resource;\n+\n+    ifstream in(filename);\n+    in.precision(p);\n     float f;\n     start_counters(time, resource);  \n     for (int j, i = 0; i < iterations; ++i)\n       in >> f;\n     stop_counters(time, resource);\n-    report_performance(__FILE__, \"\", time, resource);\n+    report_performance(__FILE__, oss.str(), time, resource);\n   }\n \n-  unlink(\"tmp_perf_int.txt\");\n-  return 0;\n+  unlink(filename);\n };\n+\n+int main()\n+{\n+  test_extraction(6);\n+  test_extraction(12);\n+  return 0;\n+}"}, {"sha": "45d55af01bfacab05a8042ff9364d3afc4430b7f", "filename": "libstdc++-v3/testsuite/performance/ofstream_insert_float.cc", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ce57b9526cf19d545ed56a9f4a2475a2c9261/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ce57b9526cf19d545ed56a9f4a2475a2c9261/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fofstream_insert_float.cc?ref=070ce57b9526cf19d545ed56a9f4a2475a2c9261", "patch": "@@ -26,28 +26,43 @@\n // the GNU General Public License.\n \n #include <fstream>\n+#include <sstream>\n #include <testsuite_performance.h>\n \n-// based on libstdc++/8761 poor fstream performance (converted to float)\n-int main() \n+// Based on libstdc++/8761 poor fstream performance (converted to float)\n+void test_insertion(int p = 6)\n {\n   using namespace std;\n   using namespace __gnu_test;\n \n-  time_counter time;\n-  resource_counter resource;\n+  const char* filename = \"tmp_perf_float.txt\";\n   const int iterations = 10000000;\n \n-  ofstream out(\"tmp_perf_float.txt\");\n-  start_counters(time, resource);\n-  for (int i = 0; i < iterations; ++i)\n-    {\n-      float f = i * 3.14159265358979323846;\n-      out << f << \"\\n\";\n-    }\n-  stop_counters(time, resource);\n-  report_performance(__FILE__, \"\", time, resource);\n-\n-  unlink(\"tmp_perf_float.txt\");\n-  return 0;\n+  ostringstream oss;\n+  oss << \"precision \" << p;\n+\n+  {\n+    time_counter time;\n+    resource_counter resource;\n+\n+    ofstream out(filename);\n+    out.precision(p);\n+    start_counters(time, resource);\n+    for (int i = 0; i < iterations; ++i)\n+      {\n+\tfloat f = i * 3.14159265358979323846;\n+\tout << f << '\\n';\n+      }\n+    stop_counters(time, resource);\n+    report_performance(__FILE__, oss.str(), time, resource);\n+  }\n+\n+  unlink(filename);\n };\n+\n+int main()\n+{\n+  test_insertion(6);\n+  test_insertion(12);\n+  return 0;\n+}"}]}