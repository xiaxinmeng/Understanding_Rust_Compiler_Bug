{"sha": "74b42c8b807212cee659292a2dcca5f8ef988440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRiNDJjOGI4MDcyMTJjZWU2NTkyOTJhMmRjY2E1ZjhlZjk4ODQ0MA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-05T08:05:38Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-05T08:05:38Z"}, "message": "(hi_reg_name, qi_reg_name, qi_high_reg_name): Declared.\n\n(PRINT_REG):  Definition moved from i386.c.\n\nFrom-SVN: r2326", "tree": {"sha": "7a53db616fb7d64f5a1fdce1fd6d2d3a57f019b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a53db616fb7d64f5a1fdce1fd6d2d3a57f019b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74b42c8b807212cee659292a2dcca5f8ef988440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b42c8b807212cee659292a2dcca5f8ef988440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74b42c8b807212cee659292a2dcca5f8ef988440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b42c8b807212cee659292a2dcca5f8ef988440/comments", "author": null, "committer": null, "parents": [{"sha": "7f7429ca2ca16ccd9c2af06b8a3b048e94ed563e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7429ca2ca16ccd9c2af06b8a3b048e94ed563e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7429ca2ca16ccd9c2af06b8a3b048e94ed563e"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "abec9d764fe4ac04c0cd13005d5a945ead9e679e", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b42c8b807212cee659292a2dcca5f8ef988440/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b42c8b807212cee659292a2dcca5f8ef988440/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=74b42c8b807212cee659292a2dcca5f8ef988440", "patch": "@@ -1430,7 +1430,7 @@ do { union { float f; long l;} tem;\t\t\t\\\n #define TARGET_VT 013\n #define TARGET_FF 014\n #define TARGET_CR 015\n-\n+\f\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    The CODE z takes the size of operand from the following digit, and\n@@ -1449,9 +1449,51 @@ do { union { float f; long l;} tem;\t\t\t\\\n #define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\t\t\t\\\n   ((CODE) == '*')\n \n+/* Print the name of a register based on its machine mode and number.\n+   If CODE is 'w', pretend the mode is HImode.\n+   If CODE is 'b', pretend the mode is QImode.\n+   If CODE is 'k', pretend the mode is SImode.\n+   If CODE is 'h', pretend the reg is the `high' byte register.\n+   If CODE is 'y', print \"st(0)\" instead of \"st\", if the reg is stack op. */\n+\n+extern char *hi_reg_name[];\n+extern char *qi_reg_name[];\n+extern char *qi_high_reg_name[];\n+\n+#define PRINT_REG(X, CODE, FILE) \\\n+  do { if (REGNO (X) == ARG_POINTER_REGNUM)\t\t\\\n+\t abort ();\t\t\t\t\t\\\n+       fprintf (FILE, \"%s\", RP);\t\t\t\\\n+       switch ((CODE == 'w' ? 2 \t\t\t\\\n+\t\t: CODE == 'b' ? 1\t\t\t\\\n+\t\t: CODE == 'k' ? 4\t\t\t\\\n+\t\t: CODE == 'y' ? 3\t\t\t\\\n+\t\t: CODE == 'h' ? 0\t\t\t\\\n+\t\t: GET_MODE_SIZE (GET_MODE (X))))\t\\\n+\t {\t\t\t\t\t\t\\\n+\t case 3:\t\t\t\t\t\\\n+\t   if (STACK_TOP_P (X))\t\t\t\t\\\n+\t     {\t\t\t\t\t\t\\\n+\t       fputs (\"st(0)\", FILE);\t\t\t\\\n+\t       break;\t\t\t\t\t\\\n+\t     }\t\t\t\t\t\t\\\n+\t case 4:\t\t\t\t\t\\\n+\t case 8:\t\t\t\t\t\\\n+\t   if (!FP_REG_P (X)) fputs (\"e\", FILE);\t\\\n+\t case 2:\t\t\t\t\t\\\n+\t   fputs (hi_reg_name[REGNO (X)], FILE);\t\\\n+\t   break;\t\t\t\t\t\\\n+\t case 1:\t\t\t\t\t\\\n+\t   fputs (qi_reg_name[REGNO (X)], FILE);\t\\\n+\t   break;\t\t\t\t\t\\\n+\t case 0:\t\t\t\t\t\\\n+\t   fputs (qi_high_reg_name[REGNO (X)], FILE);\t\\\n+\t   break;\t\t\t\t\t\\\n+\t }\t\t\t\t\t\t\\\n+     } while (0)\n+\n #define PRINT_OPERAND(FILE, X, CODE)  \\\n   print_operand (FILE, X, CODE)\n-\f\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR)  \\\n   print_operand_address (FILE, ADDR)"}]}