{"sha": "7d475a547690022aeb7e0bfbd51bc476c6ca31c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0NzVhNTQ3NjkwMDIyYWViN2UwYmZiZDUxYmM0NzZjNmNhMzFjMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-05T11:15:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-05T11:15:10Z"}, "message": "re PR ipa/67783 (quadratic time consumption in IPA inlining with -O1 and higher)\n\n2015-10-05  Richard Biener  <rguenther@suse.de>\n\n\tPR ipa/67783\n\t* ipa-inline-analysis.c (estimate_function_body_sizes): Only\n\tconsider loop header PHI defs as IVs.\n\nFrom-SVN: r228472", "tree": {"sha": "300323f064d3bc6fbf8d5523ada27413f6902aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/300323f064d3bc6fbf8d5523ada27413f6902aa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d475a547690022aeb7e0bfbd51bc476c6ca31c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d475a547690022aeb7e0bfbd51bc476c6ca31c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d475a547690022aeb7e0bfbd51bc476c6ca31c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d475a547690022aeb7e0bfbd51bc476c6ca31c0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c709f646545f39c49ea0d2efb85b41693e587f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c709f646545f39c49ea0d2efb85b41693e587f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c709f646545f39c49ea0d2efb85b41693e587f4"}], "stats": {"total": 71, "additions": 31, "deletions": 40}, "files": [{"sha": "c8ab25f266357ab66996e9b8f16de5d526c5c264", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d475a547690022aeb7e0bfbd51bc476c6ca31c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d475a547690022aeb7e0bfbd51bc476c6ca31c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d475a547690022aeb7e0bfbd51bc476c6ca31c0", "patch": "@@ -1,3 +1,9 @@\n+2015-10-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/67783\n+\t* ipa-inline-analysis.c (estimate_function_body_sizes): Only\n+\tconsider loop header PHI defs as IVs.\n+\n 2015-10-05  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-pre.c (create_component_ref_by_pieces_1): Move"}, {"sha": "786ba438a8c4f83ea916874c3a00ac657777b8cc", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 25, "deletions": 40, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d475a547690022aeb7e0bfbd51bc476c6ca31c0/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d475a547690022aeb7e0bfbd51bc476c6ca31c0/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=7d475a547690022aeb7e0bfbd51bc476c6ca31c0", "patch": "@@ -2760,9 +2760,8 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n \t{\n \t  vec<edge> exits;\n \t  edge ex;\n-\t  unsigned int j, i;\n+\t  unsigned int j;\n \t  struct tree_niter_desc niter_desc;\n-\t  basic_block *body = get_loop_body (loop);\n \t  bb_predicate = *(struct predicate *) loop->header->aux;\n \n \t  exits = get_loop_exit_edges (loop);\n@@ -2788,46 +2787,32 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n \t    }\n \t  exits.release ();\n \n-\t  for (i = 0; i < loop->num_nodes; i++)\n+\t  for (gphi_iterator gsi = gsi_start_phis (loop->header);\n+\t       !gsi_end_p (gsi); gsi_next (&gsi))\n \t    {\n-\t      gimple_stmt_iterator gsi;\n-\t      bb_predicate = *(struct predicate *) body[i]->aux;\n-\t      for (gsi = gsi_start_bb (body[i]); !gsi_end_p (gsi);\n-\t\t   gsi_next (&gsi))\n-\t\t{\n-\t\t  gimple *stmt = gsi_stmt (gsi);\n-\t\t  affine_iv iv;\n-\t\t  ssa_op_iter iter;\n-\t\t  tree use;\n-\n-\t\t  FOR_EACH_SSA_TREE_OPERAND (use, stmt, iter, SSA_OP_USE)\n-\t\t  {\n-\t\t    predicate will_be_nonconstant;\n-\n-\t\t    if (!simple_iv\n-\t\t\t(loop, loop_containing_stmt (stmt), use, &iv, true)\n-\t\t\t|| is_gimple_min_invariant (iv.step))\n-\t\t      continue;\n-\t\t    will_be_nonconstant\n-\t\t      = will_be_nonconstant_expr_predicate (fbi.info, info,\n-\t\t\t\t\t\t\t    iv.step,\n-\t\t\t\t\t\t\t    nonconstant_names);\n-\t\t    if (!true_predicate_p (&will_be_nonconstant))\n-\t\t      will_be_nonconstant\n-\t\t\t = and_predicates (info->conds,\n-\t\t\t\t\t   &bb_predicate,\n-\t\t\t\t\t   &will_be_nonconstant);\n-\t\t    if (!true_predicate_p (&will_be_nonconstant)\n-\t\t\t&& !false_predicate_p (&will_be_nonconstant))\n-\t\t      /* This is slightly inprecise.  We may want to represent\n-\t\t\t each loop with independent predicate.  */\n-\t\t      loop_stride =\n-\t\t\tand_predicates (info->conds, &loop_stride,\n-\t\t\t\t\t&will_be_nonconstant);\n-\t\t  }\n-\t\t}\n+\t      gphi *phi = gsi.phi ();\n+\t      tree use = gimple_phi_result (phi);\n+\t      affine_iv iv;\n+\t      predicate will_be_nonconstant;\n+\t      if (virtual_operand_p (use)\n+\t\t  || !simple_iv (loop, loop, use, &iv, true)\n+\t\t  || is_gimple_min_invariant (iv.step))\n+\t\tcontinue;\n+\t      will_be_nonconstant\n+\t\t= will_be_nonconstant_expr_predicate (fbi.info, info,\n+\t\t\t\t\t\t      iv.step,\n+\t\t\t\t\t\t      nonconstant_names);\n+\t      if (!true_predicate_p (&will_be_nonconstant))\n+\t\twill_be_nonconstant = and_predicates (info->conds,\n+\t\t\t\t\t\t      &bb_predicate,\n+\t\t\t\t\t\t      &will_be_nonconstant);\n+\t      if (!true_predicate_p (&will_be_nonconstant)\n+\t\t  && !false_predicate_p (&will_be_nonconstant))\n+\t\t/* This is slightly inprecise.  We may want to represent\n+\t\t   each loop with independent predicate.  */\n+\t\tloop_stride = and_predicates (info->conds, &loop_stride,\n+\t\t\t\t\t      &will_be_nonconstant);\n \t    }\n-\t  free (body);\n \t}\n       set_hint_predicate (&inline_summaries->get (node)->loop_iterations,\n \t\t\t  loop_iterations);"}]}