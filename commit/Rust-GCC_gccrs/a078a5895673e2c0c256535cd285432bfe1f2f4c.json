{"sha": "a078a5895673e2c0c256535cd285432bfe1f2f4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA3OGE1ODk1NjczZTJjMGMyNTY1MzVjZDI4NTQzMmJmZTFmMmY0Yw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2001-12-04T18:02:50Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-12-04T18:02:50Z"}, "message": "build-make, cross-make: Delete file.\n\n\t* build-make, cross-make: Delete file.\n\t* configure.in: Set and substitute CROSS, ALL,\n\tSYSTEM_HEADER_DIR, HOST_PREFIX, HOST_PREFIX_1, HOST_CC,\n\tHOST_CFLAGS, STMP_FIXINC, and STMP_FIXPROTO depending on\n\twhether build == host and host == target.  Do not\n\tAC_SUBST_FILE build_overrides or cross_overrides.  Do not\n\tAC_SUBST cross_defines or extra_c_flags.\n\t* Makefile.in (NATIVE_SYSTEM_HEADER_DIR): New.\n\t(SYSTEM_HEADER_DIR, HOST_PREFIX, HOST_CC, HOST_PREFIX,\n\tHOST_PREFIX_1, HOST_CFLAGS, ALL, INTERNAL_CFLAGS): Set\n\tpartially or completely with autoconf-substituted @variable@\n\tnotation.\n\t(INSTALL_TARGET, @cross_defines@, @cross_overrides@,\n\t@build_overrides@, @extra_c_flags@, all.build, install-build,\n\tinstall-cross-rest, install-float-h-cross): Deleted.\n\t(install-normal): Rename to install.  Delete old \"install\"\n\tindirection rule.\n\t* ada/Makefile.in, ch/Makefile.in: Don't set ALL.  Delete\n\t@cross_defines@, @cross_overrides@, @build_overrides@ stanzas.\n\tINTERNAL_CFLAGS is now @CROSS@ -DIN_GCC; update comment.\n\nFrom-SVN: r47617", "tree": {"sha": "4515ab31c18b893d271384e84d861c3ef8261b69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4515ab31c18b893d271384e84d861c3ef8261b69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a078a5895673e2c0c256535cd285432bfe1f2f4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a078a5895673e2c0c256535cd285432bfe1f2f4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a078a5895673e2c0c256535cd285432bfe1f2f4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a078a5895673e2c0c256535cd285432bfe1f2f4c/comments", "author": null, "committer": null, "parents": [{"sha": "8a38ed868f46c143af3df2f08ef58205faf4919e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a38ed868f46c143af3df2f08ef58205faf4919e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a38ed868f46c143af3df2f08ef58205faf4919e"}], "stats": {"total": 332, "additions": 153, "deletions": 179}, "files": [{"sha": "8d4e5530b35b7273500ae484ce693e44be3d5a75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a078a5895673e2c0c256535cd285432bfe1f2f4c", "patch": "@@ -1,3 +1,23 @@\n+2001-12-04  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* build-make, cross-make: Delete file.\n+\t* configure.in: Set and substitute CROSS, ALL,\n+\tSYSTEM_HEADER_DIR, HOST_PREFIX, HOST_PREFIX_1, HOST_CC,\n+\tHOST_CFLAGS, STMP_FIXINC, and STMP_FIXPROTO depending on\n+\twhether build == host and host == target.  Do not\n+\tAC_SUBST_FILE build_overrides or cross_overrides.  Do not\n+\tAC_SUBST cross_defines or extra_c_flags.\n+\t* Makefile.in (NATIVE_SYSTEM_HEADER_DIR): New.\n+\t(SYSTEM_HEADER_DIR, HOST_PREFIX, HOST_CC, HOST_PREFIX,\n+\tHOST_PREFIX_1, HOST_CFLAGS, ALL, INTERNAL_CFLAGS): Set\n+\tpartially or completely with autoconf-substituted @variable@\n+\tnotation.\n+\t(INSTALL_TARGET, @cross_defines@, @cross_overrides@,\n+\t@build_overrides@, @extra_c_flags@, all.build, install-build,\n+\tinstall-cross-rest, install-float-h-cross): Deleted.\n+\t(install-normal): Rename to install.  Delete old \"install\"\n+\tindirection rule.\n+\n 2001-12-04  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* stmt.c (expand_return): Clear destination instead of clobbering it "}, {"sha": "af54e5dc587fd24c27f3f53db41c7d337e5ec953", "filename": "gcc/Makefile.in", "status": "modified", "additions": 21, "deletions": 55, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a078a5895673e2c0c256535cd285432bfe1f2f4c", "patch": "@@ -224,18 +224,20 @@ NM_FOR_TARGET = ` \\\n     fi; \\\n   fi`\n \n-# Dir to search for system headers.  Overridden by cross-make.\n-SYSTEM_HEADER_DIR = /usr/include\n-\n # Where to find some libiberty headers.\n HASHTAB_H   = $(srcdir)/../include/hashtab.h\n OBSTACK_H   = $(srcdir)/../include/obstack.h\n SPLAY_TREE_H= $(srcdir)/../include/splay-tree.h\n FIBHEAP_H   = $(srcdir)/../include/fibheap.h\n \n+# Default native SYSTEM_HEADER_DIR, to be overridden by targets.\n+NATIVE_SYSTEM_HEADER_DIR = /usr/include\n # Default cross SYSTEM_HEADER_DIR, to be overridden by targets.\n CROSS_SYSTEM_HEADER_DIR = $(build_tooldir)/sys-include\n \n+# autoconf sets SYSTEM_HEADER_DIR to one of the above.\n+SYSTEM_HEADER_DIR = @SYSTEM_HEADER_DIR@\n+\n # Control whether to run fixproto and fixincludes.\n STMP_FIXPROTO = stmp-fixproto\n STMP_FIXINC = stmp-fixinc\n@@ -457,16 +459,17 @@ DIR = ../gcc\n # Flags to use when cross-building GCC.\n # Prefix to apply to names of object files when using them\n # to run on the machine we are compiling on.\n-HOST_PREFIX=\n+HOST_PREFIX = @HOST_PREFIX@\n # Prefix to apply to names of object files when compiling them\n # to run on the machine we are compiling on.\n # The default for this variable is chosen to keep these rules\n # out of the way of the other rules for compiling the same source files.\n-HOST_PREFIX_1=loser-\n-HOST_CC=$(CC)\n-# If you change any of the following variables, check whether a\n-# similar change is needed in build-make.\n-HOST_CFLAGS=$(ALL_CFLAGS) -DGENERATOR_FILE\n+HOST_PREFIX_1 = @HOST_PREFIX_1@\n+# Native compiler for the build machine and its switches.\n+HOST_CC = @HOST_CC@\n+HOST_CFLAGS= @HOST_CFLAGS@ -DGENERATOR_FILE\n+\n+# Native linker and preprocessor flags.  For x-fragment overrides.\n HOST_LDFLAGS=$(LDFLAGS)\n HOST_CPPFLAGS=$(ALL_CPPFLAGS)\n \n@@ -485,11 +488,9 @@ CPP_CROSS_NAME = `echo cpp|sed '$(program_transform_cross_name)'`\n PROTOIZE_CROSS_NAME = `echo protoize|sed '$(program_transform_cross_name)'`\n UNPROTOIZE_CROSS_NAME = `echo unprotoize|sed '$(program_transform_cross_name)'`\n \n-# Choose the real default target.\n-ALL=all.internal\n-\n-# Choose the real install target.\n-INSTALL_TARGET=install-normal\n+# Set by autoconf to \"all.internal\" for a native build, or\n+# \"all.cross\" to build a cross compiler.\n+ALL = @ALL@\n \n # Setup the testing framework, if you have one\n EXPECT = `if [ -f $${rootme}/../expect/expect ] ; then \\\n@@ -569,20 +570,15 @@ CPPLIB_H = cpplib.h line-map.h\n \n ####host overrides\n @host_overrides@\n-\n-####cross overrides\n-@cross_defines@\n-@cross_overrides@\n-\n-####build overrides\n-@build_overrides@\n #\f\n # Now figure out from those variables how to compile and link.\n \n all.indirect: $(ALL)\n \n-# IN_GCC tells various files that system.h, toplev.c, etc are available.\n-INTERNAL_CFLAGS = $(CROSS) -DIN_GCC @extra_c_flags@\n+# IN_GCC distinguishes between code compiled into GCC itself and other\n+# programs built during a bootstrap.\n+# autoconf inserts -DCROSS_COMPILE if we are building a cross compiler.\n+INTERNAL_CFLAGS = -DIN_GCC @CROSS@\n \n # This is the variable actually used when we compile.\n # If you change this line, you probably also need to change the definition\n@@ -794,7 +790,7 @@ LIB2_DIVMOD_FUNCS = _divdi3 _moddi3 _udivdi3 _umoddi3 _udiv_w_sdiv _udivmoddi4\n \n # The following targets define the interface between us and the languages.\n #\n-# all.build, all.cross, start.encap, rest.encap,\n+# all.cross, start.encap, rest.encap,\n # info, dvi,\n # install-normal, install-common, install-info, install-man,\n # uninstall,\n@@ -913,8 +909,6 @@ all.internal: start.encap rest.encap doc\n # although we can't run it on this machine.\n all.cross: native gcc-cross cpp$(exeext) specs \\\n \t$(LIBGCC) $(EXTRA_PARTS) lang.all.cross doc\n-# This is what to compile if making gcc with a cross-compiler.\n-all.build: native xgcc$(exeext) cpp$(exeext) $(EXTRA_PARTS) lang.all.build\n # This is what must be made before installing GCC and converting libraries.\n start.encap: native xgcc$(exeext) cpp$(exeext) specs \\\n \txlimits.h lang.start.encap\n@@ -2464,29 +2458,13 @@ maintainer-clean:\n # Entry points `install' and `uninstall'.\n # Also use `install-collect2' to install collect2 when the config files don't.\n \n-# The semicolon is to prevent the install.sh -> install default rule\n-# from doing anything.  Having it run true helps avoid problems and\n-# noise from versions of make which don't like to have null commands.\n-install: $(INSTALL_TARGET) ; @true\n-\n # Copy the compiler files into directories where they will be run.\n # Install the driver last so that the window when things are\n # broken is small.\n-install-normal: install-common $(INSTALL_HEADERS) $(INSTALL_LIBGCC) \\\n+install: install-common $(INSTALL_HEADERS) $(INSTALL_LIBGCC) \\\n     $(INSTALL_CPP) install-man install-info intl.install install-@POSUB@ \\\n     lang.install-normal install-driver\n \n-# Do nothing while making gcc with a cross-compiler. The person who\n-# makes gcc for the target machine has to know how to put a complete\n-# gcc together by hand.\n-install-build: force\n-\t@echo You have to install gcc on your target machine by hand.\n-\n-# Run this on the target machine\n-# to finish installation of cross compiler.\n-# This is not used anymore now that float.h does not depend on enquire.\n-install-cross-rest: install-float-h-cross\n-\n # Handle cpp installation.\n install-cpp: cpp$(exeext)\n \t-if [ -f gcc-cross$(exeext) ] ; then \\\n@@ -2513,18 +2491,6 @@ uninstall-cpp:\n \t  rm -f $(prefix)/$(cpp_install_dir)/$(CPP_CROSS_NAME)$(exeext); \\\n \telse true; fi\n \n-# Install float.h for cross compiler.\n-# Run this on the target machine!\n-# This is not used anymore now that float.h does not depend on enquire.\n-install-float-h-cross: installdirs\n-#\tif [ -f enquire ] ; then true; else false; fi\n-# Note: don't use -.  We should fail right away if enquire was not made.\n-\t./enquire -f > $(tmpdir)/float.h\n-\t-rm -f $(libsubdir)/include/float.h\n-\t$(INSTALL_DATA) $(tmpdir)/float.h $(libsubdir)/include/float.h\n-\t-rm -f $(tmpdir)/float.h\n-\tchmod a-x $(libsubdir)/include/float.h\n-\n # Create the installation directories.\n installdirs:\n \t-if [ -d $(prefix) ] ; then true ; else mkdir $(prefix) ; chmod a+rx $(prefix) ; fi"}, {"sha": "0167069f0c0fbd10bba58a3d8a11059d95e8267c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a078a5895673e2c0c256535cd285432bfe1f2f4c", "patch": "@@ -1,3 +1,9 @@\n+2001-12-04  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Makefile.in: Don't set ALL.  Delete @cross_defines@,\n+\t@cross_overrides@, @build_overrides@ stanzas.  INTERNAL_CFLAGS\n+\tis now @CROSS@ -DIN_GCC; update comment.\n+\n 2001-12-04  Robert Dewar <dewar@gnat.com>\n \n \t* einfo.adb (Has_Pragma_Pure_Function): New flag."}, {"sha": "f80de0e1c82d0cbc420e0a50f80de70baf4e96d3", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=a078a5895673e2c0c256535cd285432bfe1f2f4c", "patch": "@@ -192,9 +192,6 @@ INTLLIBS = @INTLLIBS@\n # Any system libraries needed just for GNAT.\n SYSLIBS = @GNAT_LIBEXC@\n \n-# Choose the real default target.\n-ALL=all\n-\n # List of extra object files linked in with various programs.\n EXTRA_GNAT1_OBJS = ../prefix.o\n EXTRA_GNATBIND_OBJS = ../prefix.o\n@@ -221,23 +218,15 @@ all: all.indirect\n \n ####host overrides\n @host_overrides@\n-\n-####cross overrides\n-@cross_defines@\n-@cross_overrides@\n-\n-####build overrides\n-@build_overrides@\n-\f\n-# Now figure out from those variables how to compile and link.\n-\n \f\n # Now figure out from those variables how to compile and link.\n \n all.indirect: Makefile ../gnat1$(exeext)\n \n-# IN_GCC tells obstack.h that we are using gcc's <stddef.h> file.\n-INTERNAL_CFLAGS = $(CROSS) -DIN_GCC @extra_c_flags@\n+# IN_GCC distinguishes between code compiled into GCC itself and other\n+# programs built during a bootstrap.\n+# autoconf inserts -DCROSS_COMPILE if we are building a cross compiler.\n+INTERNAL_CFLAGS = @CROSS@ -DIN_GCC\n \n # This is the variable actually used when we compile.\n LOOSE_CFLAGS = `echo $(CFLAGS) $(WARN2_CFLAGS)|sed -e 's/-pedantic//g' -e 's/-Wtraditional//g'`"}, {"sha": "bf777b1fa8c30a53a6f51dcdd540a14c885380bf", "filename": "gcc/build-make", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a38ed868f46c143af3df2f08ef58205faf4919e/gcc%2Fbuild-make", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a38ed868f46c143af3df2f08ef58205faf4919e/gcc%2Fbuild-make", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuild-make?ref=8a38ed868f46c143af3df2f08ef58205faf4919e", "patch": "@@ -1,27 +0,0 @@\n-# Need those to compile binaries running on host machine.\n-# It is configured by\n-#\n-# configure --host=target_cpu-target_os \\\n-#\t--target=target_cpu-target_os --build=host_cpu-host_os\n-#\n-# That HOST stuff has to be taken care of very carefully.\n-HOST_PREFIX=l-\n-HOST_PREFIX_1=$(HOST_PREFIX)\n-HOST_CC=$(CC_FOR_BUILD)\n-HOST_CFLAGS=$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS_FOR_BUILD) \\\n-\t    $(XCFLAGS) -DGENERATOR_FILE\n-HOST_LDFLAGS=$(LDFLAGS)\n-HOST_CPPFLAGS=$(ALL_CPPFLAGS)\n-\n-# To build the native compiler with the cross compiler, the headers \n-# for the target are already fixed. And /usr/include is for host, not\n-# target.\n-STMP_FIXINC =\n-STMP_FIXPROTO =\n-\n-# Cause installation using install-build. We do nothing here.\n-#INSTALL_TARGET = install-build\n-\n-# Don't try to compile the things we can't compile or we have made\n-# while making gcc with the cross-compiler.\n-#ALL = all.build"}, {"sha": "9b5f97aa3fb57030933bb18c6a8c3e0a27373c14", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=a078a5895673e2c0c256535cd285432bfe1f2f4c", "patch": "@@ -1,3 +1,9 @@\n+2001-12-04  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Makefile.in: Don't set ALL.  Delete @cross_defines@,\n+\t@cross_overrides@, @build_overrides@ stanzas.  INTERNAL_CFLAGS\n+\tis now @CROSS@ -DIN_GCC; update comment.\n+\n 2001-12-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* actions.c: Remove leading capital from diagnostic messages, as"}, {"sha": "76aa268013ddec83956fa7d46f997549449dc9ab", "filename": "gcc/ch/Makefile.in", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2Fch%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2Fch%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FMakefile.in?ref=a078a5895673e2c0c256535cd285432bfe1f2f4c", "patch": "@@ -103,9 +103,6 @@ INTLLIBS = @INTLLIBS@\n # Additional system libraries to link with.\n CLIB=\n \n-# Choose the real default target.\n-ALL=all\n-\n # End of variables for you to override.\n \n # Definition of `all' is here so that new rules inserted by sed\n@@ -118,22 +115,18 @@ all: all.indirect\n # sed inserts variable overrides after the following line.\n ####target overrides\n @target_overrides@\n+\n ####host overrides\n @host_overrides@\n-####cross overrides\n-@cross_defines@\n-@cross_overrides@\n-####build overrides\n-@build_overrides@\n-####site overrides\n-# @site_overrides@\n #\f\n # Now figure out from those variables how to compile and link.\n \n all.indirect: Makefile ../chill ../cc1chill$(exeext)\n \n-# IN_GCC tells obstack.h that we are using gcc's <stddef.h> file.\n-INTERNAL_CFLAGS = $(CROSS) -DIN_GCC @extra_c_flags@\n+# IN_GCC distinguishes between code compiled into GCC itself and other\n+# programs built during a bootstrap.\n+# autoconf inserts -DCROSS_COMPILE if we are building a cross compiler.\n+INTERNAL_CFLAGS = -DIN_GCC @CROSS@\n \n # This is the variable actually used when we compile.\n ALL_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) $(XCFLAGS)"}, {"sha": "78dfe79dd02c6a69f44f88e3e5f312316dc32c6f", "filename": "gcc/configure", "status": "modified", "additions": 60, "deletions": 45, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=a078a5895673e2c0c256535cd285432bfe1f2f4c", "patch": "@@ -6716,15 +6716,16 @@ for f in $build_xm_file; do\n   esac\n done\n \n-# Define macro CROSS_COMPILE in compilation\n-# if this is a cross-compiler.\n-# Also use all.cross instead of all.internal\n-# and add cross-make to Makefile.\n-cross_overrides=\"/dev/null\"\n+# Define macro CROSS_COMPILE in compilation if this is a cross-compiler.\n+# Also use all.cross instead of all.internal and adjust SYSTEM_HEADER_DIR.\n+CROSS=\t\t\t\t\t\t\n+ALL=all.internal\t\t\t\t\n+SYSTEM_HEADER_DIR='$(NATIVE_SYSTEM_HEADER_DIR)'\t\n if test x$host != x$target\n then\n-\tcross_defines=\"CROSS=-DCROSS_COMPILE\"\n-\tcross_overrides=\"${topdir}/cross-make\"\n+\tCROSS=\"-DCROSS_COMPILE\"\n+\tALL=all.cross\n+\tSYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'\n fi\n \n # If this is a cross-compiler that does not\n@@ -6744,13 +6745,31 @@ else\n fi\n \n \n-# When building gcc with a cross-compiler, we need to fix a few things.\n-# This must come after cross-make as we want all.build to override\n-# all.cross.\n-build_overrides=\"/dev/null\"\n+# When building gcc with a cross-compiler, we need to adjust things so\n+# that the generator programs are still built with the native compiler.\n+# Also, we cannot run fixincludes or fix-header.\n+# Note that the terminology here is wrong; it should be BUILD_* throughout.\n+# FIXME.\n+\n+# These are the normal (build=host) settings:\n+HOST_PREFIX=\t\t\t\n+HOST_PREFIX_1=ignore-\t\t\n+HOST_CC='$(CC)'\t\t\t\n+HOST_CFLAGS='$(ALL_CFLAGS)'\t\n+\n+STMP_FIXINC=stmp-fixinc\t\t\n+STMP_FIXPROTO=stmp-fixproto\t\n+\n+# And these apply if build != host.\n if test x$build != x$host\n then\n-\tbuild_overrides=\"${topdir}/build-make\"\n+    HOST_PREFIX=build-\n+    HOST_PREFIX_1=build-\n+    HOST_CC='$(CC_FOR_BUILD)'\n+    HOST_CFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS_FOR_BUILD) $(XCFLAGS)'\n+\n+    STMP_FIXINC=\n+    STMP_FIXPROTO=\n fi\n \n # Expand extra_headers to include complete path.\n@@ -6795,7 +6814,7 @@ fi\n \n # Figure out what assembler we will be using.\n echo $ac_n \"checking what assembler to use\"\"... $ac_c\" 1>&6\n-echo \"configure:6799: checking what assembler to use\" >&5\n+echo \"configure:6818: checking what assembler to use\" >&5\n gcc_cv_as=\n gcc_cv_gas_major_version=\n gcc_cv_gas_minor_version=\n@@ -6881,7 +6900,7 @@ fi\n \n # Figure out what nm we will be using.\n echo $ac_n \"checking what nm to use\"\"... $ac_c\" 1>&6\n-echo \"configure:6885: checking what nm to use\" >&5\n+echo \"configure:6904: checking what nm to use\" >&5\n if test -x nm$host_exeext; then\n \tgcc_cv_nm=./nm$host_exeext\n elif test x$host = x$target; then\n@@ -6892,7 +6911,7 @@ echo \"$ac_t\"\"$gcc_cv_nm\" 1>&6\n \n # Figure out what objdump we will be using.\n echo $ac_n \"checking what objdump to use\"\"... $ac_c\" 1>&6\n-echo \"configure:6896: checking what objdump to use\" >&5\n+echo \"configure:6915: checking what objdump to use\" >&5\n if test -x objdump$host_exeext; then\n \tgcc_cv_objdump=./objdump$host_exeext\n elif test x$host = x$target; then\n@@ -6903,7 +6922,7 @@ echo \"$ac_t\"\"$gcc_cv_objdump\" 1>&6\n \n # Figure out what assembler alignment features are present.\n echo $ac_n \"checking assembler alignment features\"\"... $ac_c\" 1>&6\n-echo \"configure:6907: checking assembler alignment features\" >&5\n+echo \"configure:6926: checking assembler alignment features\" >&5\n gcc_cv_as_alignment_features=none\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n \t# Gas version 2.6 and later support for .balign and .p2align.\n@@ -6951,7 +6970,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_alignment_features\" 1>&6\n \n echo $ac_n \"checking assembler subsection support\"\"... $ac_c\" 1>&6\n-echo \"configure:6955: checking assembler subsection support\" >&5\n+echo \"configure:6974: checking assembler subsection support\" >&5\n gcc_cv_as_subsections=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -6991,7 +7010,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_subsections\" 1>&6\n \n echo $ac_n \"checking assembler weak support\"\"... $ac_c\" 1>&6\n-echo \"configure:6995: checking assembler weak support\" >&5\n+echo \"configure:7014: checking assembler weak support\" >&5\n gcc_cv_as_weak=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 2 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -7014,7 +7033,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_weak\" 1>&6\n \n echo $ac_n \"checking assembler hidden support\"\"... $ac_c\" 1>&6\n-echo \"configure:7018: checking assembler hidden support\" >&5\n+echo \"configure:7037: checking assembler hidden support\" >&5\n gcc_cv_as_hidden=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 10 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7038,7 +7057,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_hidden\" 1>&6\n \n echo $ac_n \"checking assembler leb128 support\"\"... $ac_c\" 1>&6\n-echo \"configure:7042: checking assembler leb128 support\" >&5\n+echo \"configure:7061: checking assembler leb128 support\" >&5\n gcc_cv_as_leb128=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 11 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7083,7 +7102,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_leb128\" 1>&6\n \n echo $ac_n \"checking assembler eh_frame optimization\"\"... $ac_c\" 1>&6\n-echo \"configure:7087: checking assembler eh_frame optimization\" >&5\n+echo \"configure:7106: checking assembler eh_frame optimization\" >&5\n gcc_cv_as_eh_frame=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 12 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7164,7 +7183,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_eh_frame\" 1>&6\n \n echo $ac_n \"checking assembler section merging support\"\"... $ac_c\" 1>&6\n-echo \"configure:7168: checking assembler section merging support\" >&5\n+echo \"configure:7187: checking assembler section merging support\" >&5\n gcc_cv_as_shf_merge=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 12 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -7189,7 +7208,7 @@ echo \"$ac_t\"\"$gcc_cv_as_shf_merge\" 1>&6\n case \"$target\" in \n   sparc*-*-*)\n     echo $ac_n \"checking assembler .register pseudo-op support\"\"... $ac_c\" 1>&6\n-echo \"configure:7193: checking assembler .register pseudo-op support\" >&5\n+echo \"configure:7212: checking assembler .register pseudo-op support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_register_pseudo_op'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7217,7 +7236,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking assembler supports -relax\"\"... $ac_c\" 1>&6\n-echo \"configure:7221: checking assembler supports -relax\" >&5\n+echo \"configure:7240: checking assembler supports -relax\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_relax_opt'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7247,7 +7266,7 @@ EOF\n     case \"$tm_file\" in\n     *64*)\n \techo $ac_n \"checking for 64 bit support in assembler ($gcc_cv_as)\"\"... $ac_c\" 1>&6\n-echo \"configure:7251: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n+echo \"configure:7270: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_flags64'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7292,7 +7311,7 @@ EOF\n \n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \techo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:7296: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:7315: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7332,7 +7351,7 @@ EOF\n \n   i[34567]86-*-* | x86_64-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:7336: checking assembler instructions\" >&5\n+echo \"configure:7355: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n       if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -7359,7 +7378,7 @@ EOF\n     echo \"$ac_t\"\"$gcc_cv_as_instructions\" 1>&6\n \n     echo $ac_n \"checking assembler GOTOFF in data directives\"\"... $ac_c\" 1>&6\n-echo \"configure:7363: checking assembler GOTOFF in data directives\" >&5\n+echo \"configure:7382: checking assembler GOTOFF in data directives\" >&5\n     gcc_cv_as_gotoff_in_data=no\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x\n     then\n@@ -7389,7 +7408,7 @@ EOF\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:7393: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:7412: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -7445,7 +7464,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_dwarf2_debug_line\" 1>&6\n \n echo $ac_n \"checking assembler --gdwarf2 support\"\"... $ac_c\" 1>&6\n-echo \"configure:7449: checking assembler --gdwarf2 support\" >&5\n+echo \"configure:7468: checking assembler --gdwarf2 support\" >&5\n gcc_cv_as_gdwarf2_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -7474,7 +7493,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_gdwarf2_flag\" 1>&6\n \n echo $ac_n \"checking assembler --gstabs support\"\"... $ac_c\" 1>&6\n-echo \"configure:7478: checking assembler --gstabs support\" >&5\n+echo \"configure:7497: checking assembler --gstabs support\" >&5\n gcc_cv_as_gstabs_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -7644,7 +7663,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:7648: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:7667: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\"\n@@ -7946,10 +7965,6 @@ ${CONFIG_SHELL-/bin/sh} $srcdir/configure.frag $srcdir \"$subdirs\" \"$dep_host_xma\n \n \n \n-\n-\n-\n-\n \n \n \n@@ -8192,7 +8207,16 @@ s%@INSTOBJEXT@%$INSTOBJEXT%g\n s%@GENCAT@%$GENCAT%g\n s%@MKINSTALLDIRS@%$MKINSTALLDIRS%g\n s%@INTL_LIBTOOL_SUFFIX_PREFIX@%$INTL_LIBTOOL_SUFFIX_PREFIX%g\n+s%@CROSS@%$CROSS%g\n+s%@ALL@%$ALL%g\n+s%@SYSTEM_HEADER_DIR@%$SYSTEM_HEADER_DIR%g\n s%@inhibit_libc@%$inhibit_libc%g\n+s%@HOST_PREFIX@%$HOST_PREFIX%g\n+s%@HOST_PREFIX_1@%$HOST_PREFIX_1%g\n+s%@HOST_CC@%$HOST_CC%g\n+s%@HOST_CFLAGS@%$HOST_CFLAGS%g\n+s%@STMP_FIXINC@%$STMP_FIXINC%g\n+s%@STMP_FIXPROTO@%$STMP_FIXPROTO%g\n s%@gthread_flags@%$gthread_flags%g\n s%@GGC@%$GGC%g\n s%@zlibdir@%$zlibdir%g\n@@ -8225,7 +8249,6 @@ s%@quoted_cc_set_by_configure@%$quoted_cc_set_by_configure%g\n s%@cpp_install_dir@%$cpp_install_dir%g\n s%@dep_host_xmake_file@%$dep_host_xmake_file%g\n s%@dep_tmake_file@%$dep_tmake_file%g\n-s%@extra_c_flags@%$extra_c_flags%g\n s%@extra_headers_list@%$extra_headers_list%g\n s%@extra_objs@%$extra_objs%g\n s%@extra_parts@%$extra_parts%g\n@@ -8268,11 +8291,6 @@ s%@target_cpu_default@%$target_cpu_default%g\n s%@target_overrides@%%g\n /@host_overrides@/r $host_overrides\n s%@host_overrides@%%g\n-s%@cross_defines@%$cross_defines%g\n-/@cross_overrides@/r $cross_overrides\n-s%@cross_overrides@%%g\n-/@build_overrides@/r $build_overrides\n-s%@build_overrides@%%g\n /@language_fragments@/r $language_fragments\n s%@language_fragments@%%g\n /@language_hooks@/r $language_hooks\n@@ -8511,9 +8529,6 @@ SET_MAKE='${SET_MAKE}'\n target_list='${target_list}'\n target_overrides='${target_overrides}'\n host_overrides='${host_overrides}'\n-cross_defines='${cross_defines}'\n-cross_overrides='${cross_overrides}'\n-build_overrides='${build_overrides}'\n cpp_install_dir='${cpp_install_dir}'\n \n EOF"}, {"sha": "4c29b0f7ca4f17db46af3b500fd3bd8b39776f40", "filename": "gcc/configure.in", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a078a5895673e2c0c256535cd285432bfe1f2f4c/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=a078a5895673e2c0c256535cd285432bfe1f2f4c", "patch": "@@ -1066,15 +1066,16 @@ for f in $build_xm_file; do\n   esac\n done\n \n-# Define macro CROSS_COMPILE in compilation\n-# if this is a cross-compiler.\n-# Also use all.cross instead of all.internal\n-# and add cross-make to Makefile.\n-cross_overrides=\"/dev/null\"\n+# Define macro CROSS_COMPILE in compilation if this is a cross-compiler.\n+# Also use all.cross instead of all.internal and adjust SYSTEM_HEADER_DIR.\n+CROSS=\t\t\t\t\t\tAC_SUBST(CROSS)\n+ALL=all.internal\t\t\t\tAC_SUBST(ALL)\n+SYSTEM_HEADER_DIR='$(NATIVE_SYSTEM_HEADER_DIR)'\tAC_SUBST(SYSTEM_HEADER_DIR)\n if test x$host != x$target\n then\n-\tcross_defines=\"CROSS=-DCROSS_COMPILE\"\n-\tcross_overrides=\"${topdir}/cross-make\"\n+\tCROSS=\"-DCROSS_COMPILE\"\n+\tALL=all.cross\n+\tSYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'\n fi\n \n # If this is a cross-compiler that does not\n@@ -1094,13 +1095,31 @@ else\n fi\n AC_SUBST(inhibit_libc)\n \n-# When building gcc with a cross-compiler, we need to fix a few things.\n-# This must come after cross-make as we want all.build to override\n-# all.cross.\n-build_overrides=\"/dev/null\"\n+# When building gcc with a cross-compiler, we need to adjust things so\n+# that the generator programs are still built with the native compiler.\n+# Also, we cannot run fixincludes or fix-header.\n+# Note that the terminology here is wrong; it should be BUILD_* throughout.\n+# FIXME.\n+\n+# These are the normal (build=host) settings:\n+HOST_PREFIX=\t\t\tAC_SUBST(HOST_PREFIX)\n+HOST_PREFIX_1=ignore-\t\tAC_SUBST(HOST_PREFIX_1)\n+HOST_CC='$(CC)'\t\t\tAC_SUBST(HOST_CC)\n+HOST_CFLAGS='$(ALL_CFLAGS)'\tAC_SUBST(HOST_CFLAGS)\n+\n+STMP_FIXINC=stmp-fixinc\t\tAC_SUBST(STMP_FIXINC)\n+STMP_FIXPROTO=stmp-fixproto\tAC_SUBST(STMP_FIXPROTO)\n+\n+# And these apply if build != host.\n if test x$build != x$host\n then\n-\tbuild_overrides=\"${topdir}/build-make\"\n+    HOST_PREFIX=build-\n+    HOST_PREFIX_1=build-\n+    HOST_CC='$(CC_FOR_BUILD)'\n+    HOST_CFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS_FOR_BUILD) $(XCFLAGS)'\n+\n+    STMP_FIXINC=\n+    STMP_FIXPROTO=\n fi\n \n # Expand extra_headers to include complete path.\n@@ -2168,7 +2187,6 @@ AC_SUBST(quoted_cc_set_by_configure)\n AC_SUBST(cpp_install_dir)\n AC_SUBST(dep_host_xmake_file)\n AC_SUBST(dep_tmake_file)\n-AC_SUBST(extra_c_flags)\n AC_SUBST(extra_headers_list)\n AC_SUBST(extra_objs)\n AC_SUBST(extra_parts)\n@@ -2210,9 +2228,6 @@ AC_SUBST(target_cpu_default)\n \n AC_SUBST_FILE(target_overrides)\n AC_SUBST_FILE(host_overrides)\n-AC_SUBST(cross_defines)\n-AC_SUBST_FILE(cross_overrides)\n-AC_SUBST_FILE(build_overrides)\n AC_SUBST_FILE(language_fragments)\n AC_SUBST_FILE(language_hooks)\n \n@@ -2313,8 +2328,5 @@ SET_MAKE='${SET_MAKE}'\n target_list='${target_list}'\n target_overrides='${target_overrides}'\n host_overrides='${host_overrides}'\n-cross_defines='${cross_defines}'\n-cross_overrides='${cross_overrides}'\n-build_overrides='${build_overrides}'\n cpp_install_dir='${cpp_install_dir}'\n ])"}, {"sha": "38bacfd1276eeca61a8506df7a807e7e9e0c8b1f", "filename": "gcc/cross-make", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a38ed868f46c143af3df2f08ef58205faf4919e/gcc%2Fcross-make", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a38ed868f46c143af3df2f08ef58205faf4919e/gcc%2Fcross-make", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcross-make?ref=8a38ed868f46c143af3df2f08ef58205faf4919e", "patch": "@@ -1,6 +0,0 @@\n-# Dir to search for system headers.  Normally /usr/include.\n-# Use CROSS_INCLUDE_DIR not TOOL_INCLUDE_DIR for other vendor's headers.\n-SYSTEM_HEADER_DIR = $(CROSS_SYSTEM_HEADER_DIR)\n-\n-# Don't try to compile the things we can't compile.\n-ALL = all.cross"}]}