{"sha": "43868df37b0e1fa19c32175b41dd7dc1e7c515fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM4NjhkZjM3YjBlMWZhMTljMzIxNzViNDFkZDdkYzFlN2M1MTVmZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-23T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-23T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "146520bfed2787a572b88b2153c232053446dd7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/146520bfed2787a572b88b2153c232053446dd7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43868df37b0e1fa19c32175b41dd7dc1e7c515fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43868df37b0e1fa19c32175b41dd7dc1e7c515fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43868df37b0e1fa19c32175b41dd7dc1e7c515fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/comments", "author": null, "committer": null, "parents": [{"sha": "ca021ac617277ba73cb694f8d26ec0f5e1293451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca021ac617277ba73cb694f8d26ec0f5e1293451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca021ac617277ba73cb694f8d26ec0f5e1293451"}], "stats": {"total": 619, "additions": 618, "deletions": 1}, "files": [{"sha": "c00f7589c7ee9d60bd2bf4300ed5278e1fb6c1c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43868df37b0e1fa19c32175b41dd7dc1e7c515fd", "patch": "@@ -1,3 +1,125 @@\n+2020-10-22  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_xxspltidp_v2df): Delete\n+\tdebug printf.  Remove trailing \".\\n\" from inform message.\n+\tBreak long line.\n+\n+2020-10-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-gori.cc (is_gimple_logical_p): Use types_compatible_p\n+\tfor logical compatibility.\n+\t(logical_stmt_cache::cacheable_p): Ditto.\n+\n+2020-10-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.c (cgraph_node::get_untransformed_body): Perform lazy\n+\tclone materialization.\n+\t* cgraph.h (cgraph_node::materialize_clone): Declare.\n+\t(symbol_table::materialize_all_clones): Remove.\n+\t* cgraphclones.c (cgraph_materialize_clone): Turn to ...\n+\t(cgraph_node::materialize_clone): .. this one; move here\n+\tdumping from symbol_table::materialize_all_clones.\n+\t(symbol_table::materialize_all_clones): Remove.\n+\t* cgraphunit.c (mark_functions_to_output): Clear stmt references.\n+\t(cgraph_node::expand): Initialize bitmaps early;\n+\tdo not call execute_all_ipa_transforms if there are no transforms.\n+\t* ipa-inline-transform.c (save_inline_function_body): Fix formating.\n+\t(inline_transform): Materialize all clones before function is modified.\n+\t* ipa-param-manipulation.c (ipa_param_adjustments::modify_call):\n+\tMaterialize clone if needed.\n+\t* ipa.c (class pass_materialize_all_clones): Remove.\n+\t(make_pass_materialize_all_clones): Remove.\n+\t* passes.c (execute_all_ipa_transforms): Materialize all clones.\n+\t* passes.def: Remove pass_materialize_all_clones.\n+\t* tree-pass.h (make_pass_materialize_all_clones): Remove.\n+\t* tree-ssa-structalias.c (ipa_pta_execute): Clear refs.\n+\n+2020-10-22  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_xl_zext, vec_xl_sext, vec_xst_trunc):\n+\tNew defines.\n+\t* config/rs6000/rs6000-builtin.def (BU_P10V_OVERLOAD_X): New builtin\n+\tmacro.\n+\t(BU_P10V_AV_X): New builtin macro.\n+\t(se_lxvrhbx, se_lxrbhx, se_lxvrwx, se_lxvrdx): Define internal names\n+\tfor load and sign extend vector element.\n+\t(ze_lxvrbx, ze_lxvrhx, ze_lxvrwx, ze_lxvrdx): Define internal names\n+\tfor load and zero extend vector element.\n+\t(tr_stxvrbx, tr_stxvrhx, tr_stxvrwx, tr_stxvrdx): Define internal names\n+\tfor truncate and store vector element.\n+\t(se_lxvrx, ze_lxvrx, tr_stxvrx): Define internal names for overloaded\n+\tload/store rightmost element.\n+\t* config/rs6000/rs6000-call.c (altivec_builtin_types): Define the\n+\tinternal monomorphs P10_BUILTIN_SE_LXVRBX, P10_BUILTIN_SE_LXVRHX,\n+\tP10_BUILTIN_SE_LXVRWX, P10_BUILTIN_SE_LXVRDX,\n+\tP10_BUILTIN_ZE_LXVRBX, P10_BUILTIN_ZE_LXVRHX, P10_BUILTIN_ZE_LXVRWX,\n+\tP10_BUILTIN_ZE_LXVRDX,\n+\tP10_BUILTIN_TR_STXVRBX, P10_BUILTIN_TR_STXVRHX, P10_BUILTIN_TR_STXVRWX,\n+\tP10_BUILTIN_TR_STXVRDX,\n+\t(altivec_expand_lxvr_builtin): New expansion for load element builtins.\n+\t(altivec_expand_stv_builtin): Update to for truncate and store builtins.\n+\t(altivec_expand_builtin): Add clases for load/store rightmost builtins.\n+\t(altivec_init_builtins): Add def_builtin entries for\n+\t__builtin_altivec_se_lxvrbx, __builtin_altivec_se_lxvrhx,\n+\t__builtin_altivec_se_lxvrwx, __builtin_altivec_se_lxvrdx,\n+\t__builtin_altivec_ze_lxvrbx, __builtin_altivec_ze_lxvrhx,\n+\t__builtin_altivec_ze_lxvrwx, __builtin_altivec_ze_lxvrdx,\n+\t__builtin_altivec_tr_stxvrbx, __builtin_altivec_tr_stxvrhx,\n+\t__builtin_altivec_tr_stxvrwx, __builtin_altivec_tr_stxvrdx,\n+\t__builtin_vec_se_lxvrx, __builtin_vec_ze_lxvrx, __builtin_vec_tr_stxvrx.\n+\t* config/rs6000/vsx.md (vsx_lxvr<wd>x, vsx_stxvr<wd>x, vsx_stxvr<wd>x):\n+\tNew define_insn entries.\n+\t* doc/extend.texi:  Add documentation for vsx_xl_sext, vsx_xl_zext,\n+\tand vec_xst_trunc.\n+\n+2020-10-22  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/vsx.md (enum unspec): Add\n+\tUNSPEC_EXTENDDITI2 and UNSPEC_MTVSRD_DITI_W1 entries.\n+\t(mtvsrdd_diti_w1, extendditi2_vector): New define_insns.\n+\t(extendditi2): New define_expand.\n+\n+2020-10-22  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* config/i386/mingw-w64.h (TARGET_LIBC_HAS_FUNCTION): Enable\n+\tsincos optimization.\n+\n+2020-10-22  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/vsx.md (vec_cntmb_<mode>, vec_extract_<mode>),\n+\t(vec_expand_<mode>): Replace <VSX_MM_SUFFIX> with <wd>.\n+\n+2020-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): Refactor so\n+\tcomputing a vector type early is not needed, for store group\n+\tsplitting compute a new vector type based on the desired\n+\tgroup size.\n+\n+2020-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/97521\n+\t* expr.c (expand_expr_real_1): Be more careful when\n+\texpanding a VECTOR_BOOLEAN_TYPE_P VECTOR_CSTs.\n+\n+2020-10-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* ipa-modref-tree.c (selftest::test_insert_search_collapse): Fix\n+\tleak.\n+\t(selftest::test_merge): Fix leaks.\n+\n+2020-10-22  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/97502\n+\t* config/s390/vector.md (\"vec_cmp<VI_HW:mode><VI_HW:mode>\")\n+\t(\"vec_cmpu<VI_HW:mode><VI_HW:mode>\"): New expanders.\n+\n+2020-10-22  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR rtl-optimization/97439\n+\t* dfp.c (decimal_real_maxval): Set the sign flag in the\n+\tgenerated number.\n+\n 2020-10-22  Martin Liska  <mliska@suse.cz>\n \n \tPR c/94722"}, {"sha": "b3873063e3e01c9e95a34062b79331722b41c5fb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=43868df37b0e1fa19c32175b41dd7dc1e7c515fd", "patch": "@@ -1 +1 @@\n-20201022\n+20201023"}, {"sha": "a986499f0d2d2dbe04dc58adb0f05ebeadeefd2e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 318, "deletions": 0, "changes": 318, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=43868df37b0e1fa19c32175b41dd7dc1e7c515fd", "patch": "@@ -1,3 +1,321 @@\n+2020-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_128BIT_PAIRS): Add i-cexten.ads.\n+\t* debug.adb (d.H): Document new usage.\n+\t* doc/gnat_rm/representation_clauses_and_pragmas.rst (Size Clauses):\n+\tDocument new limit on 64-bit platforms.\n+\t(Component_Size Clauses): Likewise.\n+\t(Pragma Pack for Arrays): Likewise.\n+\t(Pragma Pack for Records): Likewise.\n+\t(Record Representation Clauses): Likewise.\n+\t* gnat_rm.texi: Regenerate.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Rewrite code enabling or\n+\tdisabling the support for 128-bit integer types.\n+\t* switch-c.adb (Scan_Front_End_Switches): Do not deal with e128.\n+\t* usage.adb (Write_Switch_Char): Do not print -gnate128 switch.\n+\t* libgnat/i-cexten__128.ads: New file.\n+\n+2020-10-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.ads (Has_Limited_View): New synthesized attribute.\n+\t* einfo.adb (Has_Limited_View): New synthesized attribute.\n+\t(Set_Limited_View): Complete assertion.\n+\t* sem_ch10.ads (Is_Visible_Through_Renamings): Make this routine\n+\tpublic to invoke it from Find_Expanded_Name and avoid reporting\n+\tspurious errors on renamings of limited-with packages.\n+\t(Load_Needed_Body): Moved to have this spec alphabetically\n+\tordered.\n+\t* sem_ch10.adb (Is_Visible_Through_Renamings): Moved to library\n+\tlevel.\n+\t(Is_Limited_Withed_Unit): New subprogram.\n+\t* sem_ch3.adb (Access_Type_Declaration): Adding protection to\n+\tavoid reading attribute Entity() when not available.\n+\t* sem_ch8.adb (Analyze_Package_Renaming): Report error on\n+\trenamed package not visible through context clauses.\n+\t(Find_Expanded_Name): Report error on renamed package not\n+\tvisible through context clauses; handle special case where the\n+\tprefix is a renaming of a (now visible) shadow package.\n+\n+2020-10-22  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_prag.adb (Get_Launch_Kernel_Arg_Type): New function.\n+\t(Build_Shared_Memory_Declaration): Use\n+\tGet_Launch_Kernel_Arg_Type.\n+\t(Build_Stream_Declaration): Use Get_Launch_Kernel_Arg_Type.\n+\t* rtsfind.ads: Remove RO_IC_Unsigned_Long_Long.\n+\n+2020-10-22  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-imenne.adb, libgnat/s-imgrea.adb: Add assertions.\n+\n+2020-10-22  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-imgrea.adb (Set_Image_Real): Update annotations.\n+\n+2020-10-22  Steve Baird  <baird@adacore.com>\n+\n+\t* aspects.ads: Introduce the subtype Nonoverridable_Aspect_Id,\n+\twhose Static_Predicate reflects the list of nonoverridable\n+\taspects given in Ada RM 13.1.1(18.7).\n+\t* sem_util.ads, sem_util.adb: Add two new visible subprograms,\n+\tCheck_Inherited_Nonoverridable_Aspects and Is_Confirming. The\n+\tformer is used to check the consistency of inherited\n+\tnonoverridable aspects from multiple sources. The latter\n+\tindicates whether two aspect specifications for a nonoverridable\n+\taspect are confirming. Because of compatibility concerns in\n+\tcompiling QGen, Is_Confirming always returns True if\n+\tRelaxed_RM_Semantics (i.e., -gnatd.M) is specified.\n+\t* sem_ch3.adb (Derived_Type_Declaration): Call new\n+\tCheck_Inherited_Nonoverridable_Aspects procedure if interface\n+\tlist is non-empty.\n+\t* sem_ch9.adb (Check_Interfaces): Call new\n+\tCheck_Inherited_Nonoverridable_Aspects procedure if interface\n+\tlist is non-empty.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): When an explicit\n+\taspect specification overrides an inherited nonoverridable\n+\taspect, check that the explicit specification is confirming.\n+\n+2020-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.ads (Check_Compile_Time_Size): Adjust size limit.\n+\n+2020-10-22  Richard Kenner  <kenner@adacore.com>\n+\n+\t* sprint.adb (pg, po, ps): Use {Push,Pop}_Output.\n+\t* treepr.adb (pl, pn): Likewise.\n+\n+2020-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_advice.rst: Minor fix.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-10-22  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_util.adb (Is_Container_Aggregate): A new local predicates\n+\twhich indicates whether a given expression is a container\n+\taggregate. The implementation of this function is incomplete; in\n+\tthe unusual case of a record aggregate (i.e., not a container\n+\taggregate) of a type whose Aggregate aspect is specified, the\n+\tfunction will incorrectly return True.\n+\t(Immediate_Context_Implies_Is_Potentially_Unevaluated): Improve\n+\thandling of aggregate components.\n+\t(Is_Repeatedly_Evaluated): Test for container aggregate\n+\tcomponents along with existing test for array aggregate\n+\tcomponents.\n+\n+2020-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_fixd.adb (Fpt_Value): Fold if-then-else with identical arms.\n+\n+2020-10-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch4.adb (P_Iterated_Component_Association): If the\n+\tconstruct includes an iterator filter it corresponds to an\n+\tIterated_Element_Association, so build the proper node for it.\n+\t* exp_aggr.adb (Expand_Container_Aggregate, Aggregate_Size): If\n+\tthe component is an Iterated_Element_Association, treat it as\n+\thaving a non-static size.\n+\n+2020-10-22  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* scng.adb (Scan): Check if any letter of the token is\n+\tuppercase.\n+\n+2020-10-22  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_util.adb (Accessibility_Level_Helper): Conversions to\n+\tnamed access types get the level associated with the named\n+\taccess type.\n+\n+2020-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Has_Constrained_Partial_View): Add \"base type\" marker.\n+\n+2020-10-22  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* einfo.adb (Has_Constrained_Partial_View): Apply Base_Type to Id.\n+\t* sem_res.adb (Resolve_Actuals.Check_Aliased_Parameter): Remove\n+\t\"not Is_Generic_Type\" test and call\n+\tObject_Type_Has_Constrained_Partial_View instead of\n+\tHas_Constrained_Partial_View. Improve related error message to\n+\tsay \"does not statically match\" instead of just \"does not\n+\tmatch\".\n+\n+2020-10-22  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb: Declare and implement a new\n+\tpredicate, Derivation_Too_Early_To_Inherit.  This function\n+\tindicates whether a given derived type fails to inherit a given\n+\tstreaming-related attribute from its parent type because the\n+\tdeclaration of the derived type precedes the corresponding\n+\tattribute_definition_clause of the parent.\n+\t* exp_tss.adb (Find_Inherited_TSS): Call\n+\tDerivation_Too_Early_To_Inherit instead of unconditionally\n+\tassuming that a parent type's streaming attribute is available\n+\tfor inheritance by an immediate descendant type.\n+\t* sem_attr.adb (Stream_Attribute_Available): Call\n+\tDerivation_Too_Early_To_Inherit instead of unconditionally\n+\tassuming that a parent type's streaming attribute is available\n+\tfor inheritance by an immediate descendant type.\n+\t* exp_attr.adb (Default_Streaming_Unavailable): A new predicate;\n+\tgiven a type, indicates whether predefined (as opposed to\n+\tuser-defined) streaming operations for the type should be\n+\timplemented by raising Program_Error.\n+\t(Expand_N_Attribute_Reference): For each of the 4\n+\tstreaming-related attributes (i.e., Read, Write, Input, Output),\n+\tafter determining that no user-defined implementation is\n+\tavailable (including a Stream_Convert pragma), call\n+\tDefault_Streaming_Unavailable; if that call returns True, then\n+\timplement the streaming operation as \"raise Program_Error;\".\n+\n+2020-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.adb (Apply_Float_Conversion_Check): Saturate the bounds\n+\tof the check to those of the base type of the expression.\n+\n+2020-10-22  Justin Squirek  <squirek@adacore.com>\n+\n+\t* checks.adb (Apply_Accessibility_Check): Modify condition to\n+\tavoid flawed optimization and use Get_Accessibility over\n+\tExtra_Accessibility.\n+\t* exp_attr.adb: Remove inclusion of Exp_Ch2.adb.\n+\t* exp_ch2.adb, exp_ch2.ads (Param_Entity): Moved to sem_util.\n+\t* exp_ch3.ads (Init_Proc_Level_Formal): New function.\n+\t* exp_ch3.adb (Build_Init_Procedure): Add extra accessibility\n+\tformal for init procs when the associated type is a limited\n+\trecord.\n+\t(Build_Initialization_Call): Add condition to handle propagation\n+\tof the new extra accessibility paramter actual needed for init\n+\tprocs.\n+\t(Init_Proc_Level_Formal): Created to fetch a the extra\n+\taccessibility parameter associated with init procs if one\n+\texists.\n+\t* exp_ch4.adb (Build_Attribute_Reference): Modify static check\n+\tto be dynamic.\n+\t* exp_ch6.adb (Add_Cond_Expression_Extra_Actual): Move logic\n+\tused to expand conditional expressions used as actuals for\n+\tanonymous access formals.\n+\t(Expand_Call_Helper): Remove extranious accessibility\n+\tcalculation logic.\n+\t* exp_util.adb: Remove inclusion of Exp_Ch2.adb.\n+\t* par-ch3.adb (P_Array_Type_Definition): Properly set\n+\tAliased_Present on access definitions\n+\t* sem_attr.adb (Resolve_Attribute): Replace instances for\n+\tObject_Access_Level with Static_Accessibility_Level.\n+\t* sem_ch13.adb (Storage_Pool): Replace instances for\n+\tObject_Access_Level with Static_Accessibility_Level.\n+\t* sem_ch6.adb (Check_Return_Construct_Accessibility): Replace\n+\tinstances for Object_Access_Level with\n+\tStatic_Accessibility_Level.\n+\t* sem_ch9.adb (Analyze_Requeue): Replace instances for\n+\tObject_Access_Level with Static_Accessibility_Level.\n+\t* sem_res.adb (Check_Aliased_Parameter,\n+\tCheck_Allocator_Discrim_Accessibility, Valid_Conversion):\n+\tReplace instances for Object_Access_Level with\n+\tStatic_Accessibility_Level.\n+\t* sem_util.adb, sem_util.ads (Accessibility_Level_Helper):\n+\tCreated to centralize calculation of accessibility levels.\n+\t(Build_Component_Subtype): Replace instances for\n+\tObject_Access_Level with Static_Accessibility_Level.\n+\t(Defining_Entity): Add extra parameter to dictate whether an\n+\terror is raised or empty is return in the case of an irrelevant\n+\tN.\n+\t(Dynamic_Accessibility_Level): Rewritten to use\n+\tAccessibility_Level_Helper.\n+\t(Is_View_Conversion): Check membership against Etype to capture\n+\tnodes like explicit dereferences which have types but are not\n+\texpanded names or identifers.\n+\t(Object_Access_LeveL): Removed.\n+\t(Param_Entity): Moved from sem_util.\n+\t(Static_Accessibility_Level): Created as a replacement to\n+\tObject_Access_Level, it also uses Accessibility_Level_Helper for\n+\tits implementation.\n+\t* snames.ads-tmpl: Added new name for extra accessibility\n+\tparameter in init procs.\n+\n+2020-10-22  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Contract_Cases,\n+\tExpand_Pragma_Loop_Variant): Reuse Append_New_To.\n+\t* sem_prag.adb (Analyze_Contract_Cases_In_Decl_Part): Fix typo.\n+\t(Analyze_Pre_Post_Condition): Refactor repeated calls to\n+\tDefining_Entity.\n+\n+2020-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_characteristics.rst: Minor\n+\tfixes.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-10-22  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Check_Unused_Withs): Move local variables from\n+\tto a nested procedure; Lunit is passed as a parameter to\n+\tCheck_System_Aux and its type is refined from Node_Id to\n+\tEntity_Id; Cnode is now a constant.\n+\n+2020-10-22  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnat/s-rident.ads (Profile_Info): Use a common profile\n+\tdefinition for Jorvik and GNAT Extended Ravenscar, using the\n+\tGNAT Extended Ravenscar definition.\n+\n+2020-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (64-bit platforms): Add GNATRTL_128BIT_PAIRS to\n+\tthe LIBGNAT_TARGET_PAIRS list and also GNATRTL_128BIT_OBJS to\n+\tthe EXTRA_GNATRTL_NONTASKING_OBJS list.\n+\n+2020-10-22  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_prag.adb (Process_Convention,\n+\tProcess_Import_Or_Interface): Fix error message.\n+\n+2020-10-22  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_ch13.adb (Make_Aitem_Pragma): Turn into function. This\n+\tremoves a side-effect on the Aitem variable.\n+\t(Analyze_Aspect_Specifications): Handle Suppress and Unsuppress\n+\taspects differently from the Linker_Section aspect.\n+\t(Ceck_Aspect_At_Freeze_Point): Don't expect Suppress/Unsuppress\n+\tto be delayed anymore.\n+\n+2020-10-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb: (Resolve_Container_Aggregate): For an indexed\n+\tcontainer, verify that expressions and component associations\n+\tare not both present.\n+\t* exp_aggr.adb: Code reorganization, additional comments.\n+\t(Expand_Container_Aggregate): Use Aggregate_Size for Iterated_\n+\tComponent_Associations for indexed aggregates. If present, the\n+\tdefault value of the formal in the constructor function is used\n+\twhen the size of the aggregate cannot be determined statically.\n+\n+2020-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): Fix oversight for Bit_Position.\n+\n+2020-10-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Check_Ambiguous_Aggregate): When a\n+\tsubprogram call is found to be ambiguous, check whether\n+\tambiguity is caused by an aggregate actual.  and indicate that\n+\tit should carry a type qualification.\n+\t* sem_ch4.adb (Traverse_Hoonyms, Try_Primitive_Operation): Call\n+\tit.\n+\t* sem_res.adb (Report_Ambiguous_Argument): Call it.\n+\n+2020-10-22  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Check_One_Unit): Avoid repeated calls by using a\n+\tlocal variable Lunit; remove local constant Eitem, which was\n+\tidentical to Lunit.\n+\n+2020-10-22  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* Makefile.rtl (LIBGNAT_TARGET_PAIRS) <x86*-vxworks*>: Select\n+\tnolibm and wraplf variants like other vxworks ports.\n+\n 2020-10-22  Martin Liska  <mliska@suse.cz>\n \n \tPR c/94722"}, {"sha": "a8e277c8b35756e657e64f91419da76709e3bf5d", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=43868df37b0e1fa19c32175b41dd7dc1e7c515fd", "patch": "@@ -1,3 +1,17 @@\n+2020-10-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97514\n+\t* engine.cc (exploded_graph::add_function_entry): Handle failure\n+\tto create an enode, rather than asserting.\n+\n+2020-10-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97489\n+\t* engine.cc (exploded_graph::add_function_entry): Assert that we\n+\thave a function body.\n+\t(exploded_graph::on_escaped_function): Reject fndecls that don't\n+\thave a function body.\n+\n 2020-10-14  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93388"}, {"sha": "5d9fbe125f84c67548b4bd8deed1ccee279976bc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=43868df37b0e1fa19c32175b41dd7dc1e7c515fd", "patch": "@@ -1,3 +1,26 @@\n+2020-10-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97328\n+\t* constexpr.c (init_subob_ctx): Don't punt on RANGE_EXPR\n+\tindexes, instead build a sub-aggregate initialization context\n+\twith no subobject.\n+\n+2020-10-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96575\n+\t* constexpr.c (cxx_eval_constant_expression)\n+\t<case EMPTY_CLASS_EXPR>: Lower it to a CONSTRUCTOR.\n+\t(potential_constant_expression_1) <case COMPOUND_EXPR>: Remove\n+\tnow-redundant handling of COMPOUND_EXPR with EMPTY_CLASS_EXPR\n+\tsecond operand.\n+\t<case EMPTY_CLASS_EXPR>: Return true instead of false.\n+\n+2020-10-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97511\n+\t* decl.c (duplicate_decls): Return NULL_TREE if\n+\tDECL_TEMPLATE_PARM_P differ.\n+\n 2020-10-20  Nathan Sidwell  <nathan@acm.org>\n \n \t* name-lookup.c (push_local_extern_decl_alias): Reconstextualize"}, {"sha": "0dd7931076fde70b975f0f4c765e3cb43e561c2b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=43868df37b0e1fa19c32175b41dd7dc1e7c515fd", "patch": "@@ -1,3 +1,11 @@\n+2020-10-22  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.h (enum gfc_omp_memorder): Add.\n+\t(gfc_omp_clauses): Use it.\n+\t* openmp.c (gfc_match_omp_flush): Match memorder clauses.\n+\t* trans-openmp.c (gfc_trans_omp_flush): Handle them.\n+\t(gfc_trans_omp_directive): Update call.\n+\n 2020-10-21  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/45516"}, {"sha": "b9bb76183fb8188e2c3bf31b7db96c5a68e316a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43868df37b0e1fa19c32175b41dd7dc1e7c515fd", "patch": "@@ -1,3 +1,84 @@\n+2020-10-22  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/vec-splati-runnable.c: Don't abort on\n+\tundefined output.\n+\n+2020-10-22  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/rlwimi-2.c: Adjust expected results for lp64.\n+\t* gcc.target/powerpc/vec-rlmi-rlnm.c: Remove target and LP64.\n+\tAdjust xxlor expected results.\n+\n+2020-10-22  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/flush-1.f90: New test.\n+\t* gfortran.dg/gomp/flush-2.f90: New test.\n+\n+2020-10-22  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/vsx-load-element-extend-char.c: New test.\n+\t* gcc.target/powerpc/vsx-load-element-extend-int.c: New test.\n+\t* gcc.target/powerpc/vsx-load-element-extend-longlong.c: New test.\n+\t* gcc.target/powerpc/vsx-load-element-extend-short.c: New test.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-char.c: New test.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-int.c: New test.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-longlong.c: New test.\n+\t* gcc.target/powerpc/vsx-store-element-truncate-short.c: New test.\n+\n+2020-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* ada/acats/run_all.sh: Define and substitute target_{max,min}_int.\n+\t* ada/acats/support/macro.dfs: Parameterize {MAX,MIN}_INT.\n+\t* gnat.dg/assert1.adb: Adjust conditionally to 128-bit integer types.\n+\t* gnat.dg/size_clause1.adb: Do not expect a warning for LP64 targets.\n+\t* gnat.dg/warn11.adb: Likewise.\n+\t* gnat.dg/specs/rep_clause5.ads (Array_2_Type): Add alignment clause.\n+\n+2020-10-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97328\n+\t* g++.dg/cpp2a/constexpr-init19.C: New test.\n+\t* g++.dg/cpp2a/constexpr-init20.C: New test.\n+\n+2020-10-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96575\n+\t* g++.dg/cpp1z/constexpr-96575.C: New test.\n+\n+2020-10-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97511\n+\t* g++.dg/template/shadow3.C: New test.\n+\n+2020-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/97521\n+\t* gcc.target/i386/pr97521.c: New testcase.\n+\n+2020-10-22  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.dg/pr97502.c: New test.\n+\n+2020-10-22  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.dg/dfp/pr97439.c: New test.\n+\n+2020-10-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97514\n+\t* gcc.dg/analyzer/pr97514.c: New test.\n+\n+2020-10-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/analyzer/ctor-dtor-1.C: New test.\n+\t* g++.dg/analyzer/dyncast-1.C: New test.\n+\t* g++.dg/analyzer/vfunc-1.C: New test.\n+\n+2020-10-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97489\n+\t* g++.dg/analyzer/pr97489.C: New test.\n+\n 2020-10-22  Martin Liska  <mliska@suse.cz>\n \n \tPR c/94722"}, {"sha": "2a4b21d2d37696b6b8e7697e23d1437374c283e5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43868df37b0e1fa19c32175b41dd7dc1e7c515fd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=43868df37b0e1fa19c32175b41dd7dc1e7c515fd", "patch": "@@ -1,3 +1,54 @@\n+2020-10-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/memory_resource: Include <tuple>.\n+\t(polymorphic_allocator::construct): Qualify forward_as_tuple.\n+\t* include/std/memory_resource: Likewise.\n+\n+2020-10-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/30_threads/condition_variable/members/68519.cc:\n+\tDefine recent_epoch_float_clock::duration to meet the Cpp17Clock\n+\trequirements.\n+\n+2020-10-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/shared_mutex: Only include <condition_variable>\n+\twhen pthread_rwlock_t and POSIX timers are not available.\n+\t(__cpp_lib_shared_mutex, __cpp_lib_shared_timed_mutex): Change\n+\tvalue to be type 'long'.\n+\t* include/std/version (__cpp_lib_shared_mutex)\n+\t(__cpp_lib_shared_timed_mutex): Likewise.\n+\n+2020-10-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/shared_ptr.h: Include <iosfwd>.\n+\t* include/bits/shared_ptr_base.h: Include required headers here\n+\tdirectly, instead of in <memory>.\n+\t* include/bits/uses_allocator_args.h: New file. Move utility\n+\tfunctions for uses-allocator construction from <memory> to here.\n+\tOnly define the utility functions when concepts are available.\n+\t(__cpp_lib_make_obj_using_allocator): Define non-standard\n+\tfeature test macro.\n+\t* include/std/condition_variable: Remove unused headers.\n+\t* include/std/future: Likewise.\n+\t* include/std/memory: Remove headers that are not needed\n+\tdirectly, and are now inclkuded where they're needed. Include\n+\tnew <bits/uses_allocator_args.h> header.\n+\t* include/std/memory_resource: Include only the necessary\n+\theaders. Use new feature test macro to detect support for the\n+\tutility functions.\n+\t* include/std/scoped_allocator: Likewise.\n+\t* include/std/version (__cpp_lib_make_obj_using_allocator):\n+\tDefine.\n+\n+2020-10-22  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* crossconfig.m4: Turn vxworks matcher into vxworks*.\n+\t* configure.host: Likewise.\n+\t* configure: Regenerate.\n+\n 2020-10-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/shared_ptr.h (shared_ptr(const weak_ptr&, nothrow_t)):"}]}