{"sha": "0e1363428da6b1ff7d0f20d730e5fd76a29241ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUxMzYzNDI4ZGE2YjFmZjdkMGYyMGQ3MzBlNWZkNzZhMjkyNDFlZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-03-08T18:47:42Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-03-08T18:47:42Z"}, "message": "re PR c++/9823 (ICE in sort_mem_initializers)\n\n\tPR c++/9823\n\t* cp-tree.h (begin_mem_initializers): Remove.\n\t* parser.c (cp_parser_mem_initializer_list): Inline it here.\n\tDo not call finish_mem_initializers if not in a constructor.\n\t(cp_parser_class_head): Fix typo in error message.\n\t* semantics.c (begin_mem_initializers): Remove.\n\t* testsuite/g++.dg/parser/constructor1.C: New test.\n\n\tPR c++/9823\n\t* g++.dg/parser/constructor1.C: New test.\n\nFrom-SVN: r63999", "tree": {"sha": "ac2ca092904548ecb5c41cd9e875ffc991c35ea8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac2ca092904548ecb5c41cd9e875ffc991c35ea8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e1363428da6b1ff7d0f20d730e5fd76a29241ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1363428da6b1ff7d0f20d730e5fd76a29241ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e1363428da6b1ff7d0f20d730e5fd76a29241ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1363428da6b1ff7d0f20d730e5fd76a29241ed/comments", "author": null, "committer": null, "parents": [{"sha": "988d1653869158be80b797b13a60dacfc0a4fa22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988d1653869158be80b797b13a60dacfc0a4fa22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/988d1653869158be80b797b13a60dacfc0a4fa22"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "53e1b74c296d645fb1667abd27a3135673854a24", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1363428da6b1ff7d0f20d730e5fd76a29241ed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1363428da6b1ff7d0f20d730e5fd76a29241ed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0e1363428da6b1ff7d0f20d730e5fd76a29241ed", "patch": "@@ -1,5 +1,13 @@\n 2003-03-08  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/9823\n+\t* cp-tree.h (begin_mem_initializers): Remove.\n+\t* parser.c (cp_parser_mem_initializer_list): Inline it here.\n+\tDo not call finish_mem_initializers if not in a constructor.\n+\t(cp_parser_class_head): Fix typo in error message.\n+\t* semantics.c (begin_mem_initializers): Remove.\n+\t* testsuite/g++.dg/parser/constructor1.C: New test.\n+\n \tPR c++/9809\n \t* call.c (add_function_candidate): Skip builtin fuctions that have\n \tnot yet been declared."}, {"sha": "b4eeb768ec4ec056792f8ed6b415bd5495dce423", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1363428da6b1ff7d0f20d730e5fd76a29241ed/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1363428da6b1ff7d0f20d730e5fd76a29241ed/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0e1363428da6b1ff7d0f20d730e5fd76a29241ed", "patch": "@@ -4205,7 +4205,6 @@ extern void expand_body                         (tree);\n extern tree nullify_returns_r\t\t      (tree *, int *, void *);\n extern void do_pushlevel                        (scope_kind);\n extern tree do_poplevel                         (void);\n-extern void begin_mem_initializers              (void);\n extern void finish_mem_initializers             (tree);\n extern void setup_vtbl_ptr\t\t\t(tree, tree);\n extern void clear_out_block                     (void);"}, {"sha": "1c83227b934a67ad1444527851f9c1d8c10ba859", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1363428da6b1ff7d0f20d730e5fd76a29241ed/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1363428da6b1ff7d0f20d730e5fd76a29241ed/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0e1363428da6b1ff7d0f20d730e5fd76a29241ed", "patch": "@@ -7189,7 +7189,8 @@ cp_parser_mem_initializer_list (cp_parser* parser)\n \n   /* Let the semantic analysis code know that we are starting the\n      mem-initializer-list.  */\n-  begin_mem_initializers ();\n+  if (!DECL_CONSTRUCTOR_P (current_function_decl))\n+    error (\"only constructors take base initializers\");\n \n   /* Loop through the list.  */\n   while (true)\n@@ -7212,7 +7213,8 @@ cp_parser_mem_initializer_list (cp_parser* parser)\n     }\n \n   /* Perform semantic analysis.  */\n-  finish_mem_initializers (mem_initializer_list);\n+  if (DECL_CONSTRUCTOR_P (current_function_decl))\n+    finish_mem_initializers (mem_initializer_list);\n }\n \n /* Parse a mem-initializer.\n@@ -11789,7 +11791,7 @@ cp_parser_class_head (cp_parser* parser,\n \t class was originally declared, the program is invalid.  */\n       if (scope && !is_ancestor (scope, CP_DECL_CONTEXT (type)))\n \t{\n-\t  error (\"declaration of `%D' in  `%D' which does not \"\n+\t  error (\"declaration of `%D' in `%D' which does not \"\n \t\t \"enclose `%D'\", type, scope, nested_name_specifier);\n \t  return NULL_TREE;\n \t}"}, {"sha": "a5b7c50398047e23dac6490b84d1eab975137200", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1363428da6b1ff7d0f20d730e5fd76a29241ed/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1363428da6b1ff7d0f20d730e5fd76a29241ed/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0e1363428da6b1ff7d0f20d730e5fd76a29241ed", "patch": "@@ -1142,15 +1142,6 @@ finish_eh_cleanup (cleanup)\n   add_stmt (r);\n }\n \n-/* Begin processing a mem-initializer-list.  */\n-\n-void\n-begin_mem_initializers ()\n-{\n-  if (! DECL_CONSTRUCTOR_P (current_function_decl))\n-    error (\"only constructors take base initializers\");\n-}\n-\n /* The MEM_INITS is a list of mem-initializers, in reverse of the\n    order they were written by the user.  Each node is as for\n    emit_mem_initializers.  */"}, {"sha": "8c11f8569cc99feaf8f2e9e9df405aafce6b3af8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1363428da6b1ff7d0f20d730e5fd76a29241ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1363428da6b1ff7d0f20d730e5fd76a29241ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e1363428da6b1ff7d0f20d730e5fd76a29241ed", "patch": "@@ -1,3 +1,8 @@\n+2003-03-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9823\n+\t* g++.dg/parser/constructor1.C: New test.\n+\n 2003-03-08  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* gcc.c-torture/execute/20020720-1.x: Add xfail for cris-*-*."}, {"sha": "3011862ffbc9d409df056526615e1ff39dc2cfa6", "filename": "gcc/testsuite/g++.dg/parse/constructor1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1363428da6b1ff7d0f20d730e5fd76a29241ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstructor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1363428da6b1ff7d0f20d730e5fd76a29241ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstructor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fconstructor1.C?ref=0e1363428da6b1ff7d0f20d730e5fd76a29241ed", "patch": "@@ -0,0 +1,4 @@\n+ACE_Process_Descriptor::ACE_Process_Descriptor () : // { dg-error \"\" }\n+  process_ (0)\n+{\n+}"}]}