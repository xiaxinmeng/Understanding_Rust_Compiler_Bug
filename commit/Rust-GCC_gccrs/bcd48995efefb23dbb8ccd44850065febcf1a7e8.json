{"sha": "bcd48995efefb23dbb8ccd44850065febcf1a7e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNkNDg5OTVlZmVmYjIzZGJiOGNjZDQ0ODUwMDY1ZmViY2YxYTdlOA==", "commit": {"author": {"name": "Alex Velenko", "email": "Alex.Velenko@arm.com", "date": "2014-04-22T16:06:05Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-04-22T16:06:05Z"}, "message": "[AArch64] 64-bit float vreinterpret implemention\n\nThis patch introduces vreinterpret implementation for vectors with\n64-bit float lanes and adds testcase for those intrinsics.\n\nFrom-SVN: r209642", "tree": {"sha": "1b1af38f438709d7a4e5b0042f7df7b75da489b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b1af38f438709d7a4e5b0042f7df7b75da489b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcd48995efefb23dbb8ccd44850065febcf1a7e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd48995efefb23dbb8ccd44850065febcf1a7e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcd48995efefb23dbb8ccd44850065febcf1a7e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd48995efefb23dbb8ccd44850065febcf1a7e8/comments", "author": null, "committer": null, "parents": [{"sha": "0bf3afc14da694d6bac1e7595aae0661ad005f21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bf3afc14da694d6bac1e7595aae0661ad005f21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bf3afc14da694d6bac1e7595aae0661ad005f21"}], "stats": {"total": 996, "additions": 996, "deletions": 0}, "files": [{"sha": "1811fa48be343107104be8b4bdc506bdcbd88af3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcd48995efefb23dbb8ccd44850065febcf1a7e8", "patch": "@@ -1,3 +1,68 @@\n+2014-04-22  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (TYPES_REINTERP): Removed.\n+\t(aarch64_types_signed_unsigned_qualifiers): Qualifier added.\n+\t(aarch64_types_signed_poly_qualifiers): Likewise.\n+\t(aarch64_types_unsigned_signed_qualifiers): Likewise.\n+\t(aarch64_types_poly_signed_qualifiers): Likewise.\n+\t(TYPES_REINTERP_SS): Type macro added.\n+\t(TYPES_REINTERP_SU): Likewise.\n+\t(TYPES_REINTERP_SP): Likewise.\n+\t(TYPES_REINTERP_US): Likewise.\n+\t(TYPES_REINTERP_PS): Likewise.\n+\t(aarch64_fold_builtin): New expression folding added.\n+\t* config/aarch64/aarch64-simd-builtins.def (REINTERP):\n+\tDeclarations removed.\n+\t(REINTERP_SS): Declarations added.\n+\t(REINTERP_US): Likewise.\n+\t(REINTERP_PS): Likewise.\n+\t(REINTERP_SU): Likewise.\n+\t(REINTERP_SP): Likewise.\n+\t* config/aarch64/arm_neon.h (vreinterpret_p8_f64): Implemented.\n+\t(vreinterpretq_p8_f64): Likewise.\n+\t(vreinterpret_p16_f64): Likewise.\n+\t(vreinterpretq_p16_f64): Likewise.\n+\t(vreinterpret_f32_f64): Likewise.\n+\t(vreinterpretq_f32_f64): Likewise.\n+\t(vreinterpret_f64_f32): Likewise.\n+\t(vreinterpret_f64_p8): Likewise.\n+\t(vreinterpret_f64_p16): Likewise.\n+\t(vreinterpret_f64_s8): Likewise.\n+\t(vreinterpret_f64_s16): Likewise.\n+\t(vreinterpret_f64_s32): Likewise.\n+\t(vreinterpret_f64_s64): Likewise.\n+\t(vreinterpret_f64_u8): Likewise.\n+\t(vreinterpret_f64_u16): Likewise.\n+\t(vreinterpret_f64_u32): Likewise.\n+\t(vreinterpret_f64_u64): Likewise.\n+\t(vreinterpretq_f64_f32): Likewise.\n+\t(vreinterpretq_f64_p8): Likewise.\n+\t(vreinterpretq_f64_p16): Likewise.\n+\t(vreinterpretq_f64_s8): Likewise.\n+\t(vreinterpretq_f64_s16): Likewise.\n+\t(vreinterpretq_f64_s32): Likewise.\n+\t(vreinterpretq_f64_s64): Likewise.\n+\t(vreinterpretq_f64_u8): Likewise.\n+\t(vreinterpretq_f64_u16): Likewise.\n+\t(vreinterpretq_f64_u32): Likewise.\n+\t(vreinterpretq_f64_u64): Likewise.\n+\t(vreinterpret_s64_f64): Likewise.\n+\t(vreinterpretq_s64_f64): Likewise.\n+\t(vreinterpret_u64_f64): Likewise.\n+\t(vreinterpretq_u64_f64): Likewise.\n+\t(vreinterpret_s8_f64): Likewise.\n+\t(vreinterpretq_s8_f64): Likewise.\n+\t(vreinterpret_s16_f64): Likewise.\n+\t(vreinterpretq_s16_f64): Likewise.\n+\t(vreinterpret_s32_f64): Likewise.\n+\t(vreinterpretq_s32_f64): Likewise.\n+\t(vreinterpret_u8_f64): Likewise.\n+\t(vreinterpretq_u8_f64): Likewise.\n+\t(vreinterpret_u16_f64): Likewise.\n+\t(vreinterpretq_u16_f64): Likewise.\n+\t(vreinterpret_u32_f64): Likewise.\n+\t(vreinterpretq_u32_f64): Likewise.\n+\n 2014-04-22  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* config/aarch64/aarch64/aarch64-builtins.c (TYPES_REINTERP): Removed."}, {"sha": "591260f18bcc084bcc6cc16b6597a3d2ec098d05", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=bcd48995efefb23dbb8ccd44850065febcf1a7e8", "patch": "@@ -147,6 +147,23 @@ aarch64_types_unopu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_unsigned };\n #define TYPES_UNOPU (aarch64_types_unopu_qualifiers)\n #define TYPES_CREATE (aarch64_types_unop_qualifiers)\n+#define TYPES_REINTERP_SS (aarch64_types_unop_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_unop_su_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_unsigned };\n+#define TYPES_REINTERP_SU (aarch64_types_unop_su_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_unop_sp_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_poly };\n+#define TYPES_REINTERP_SP (aarch64_types_unop_sp_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_unop_us_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_none };\n+#define TYPES_REINTERP_US (aarch64_types_unop_us_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_unop_ps_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_poly, qualifier_none };\n+#define TYPES_REINTERP_PS (aarch64_types_unop_ps_qualifiers)\n static enum aarch64_type_qualifiers\n aarch64_types_binop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_maybe_immediate };\n@@ -1128,6 +1145,25 @@ aarch64_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *args,\n \t  return fold_build2 (NE_EXPR, type, and_node, vec_zero_node);\n \t  break;\n \t}\n+      VAR1 (REINTERP_SS, reinterpretdi, 0, df)\n+      VAR1 (REINTERP_SS, reinterpretv8qi, 0, df)\n+      VAR1 (REINTERP_SS, reinterpretv4hi, 0, df)\n+      VAR1 (REINTERP_SS, reinterpretv2si, 0, df)\n+      VAR1 (REINTERP_SS, reinterpretv2sf, 0, df)\n+      BUILTIN_VD (REINTERP_SS, reinterpretdf, 0)\n+      BUILTIN_VD (REINTERP_SU, reinterpretdf, 0)\n+      VAR1 (REINTERP_US, reinterpretdi, 0, df)\n+      VAR1 (REINTERP_US, reinterpretv8qi, 0, df)\n+      VAR1 (REINTERP_US, reinterpretv4hi, 0, df)\n+      VAR1 (REINTERP_US, reinterpretv2si, 0, df)\n+      VAR1 (REINTERP_US, reinterpretv2sf, 0, df)\n+      BUILTIN_VD (REINTERP_SP, reinterpretdf, 0)\n+      VAR1 (REINTERP_PS, reinterpretdi, 0, df)\n+      VAR1 (REINTERP_PS, reinterpretv8qi, 0, df)\n+      VAR1 (REINTERP_PS, reinterpretv4hi, 0, df)\n+      VAR1 (REINTERP_PS, reinterpretv2si, 0, df)\n+      VAR1 (REINTERP_PS, reinterpretv2sf, 0, df)\n+\treturn fold_build1 (VIEW_CONVERT_EXPR, type, args[0]);\n       VAR1 (UNOP, floatv2si, 2, v2sf)\n       VAR1 (UNOP, floatv4si, 2, v4sf)\n       VAR1 (UNOP, floatv2di, 2, v2df)"}, {"sha": "bfd2b750ba056c0749925578e384f81edd8294d0", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=bcd48995efefb23dbb8ccd44850065febcf1a7e8", "patch": "@@ -51,6 +51,28 @@\n   VAR1 (GETLANE, get_lane, 0, di)\n   BUILTIN_VALL (GETLANE, be_checked_get_lane, 0)\n \n+  VAR1 (REINTERP_SS, reinterpretdi, 0, df)\n+  VAR1 (REINTERP_SS, reinterpretv8qi, 0, df)\n+  VAR1 (REINTERP_SS, reinterpretv4hi, 0, df)\n+  VAR1 (REINTERP_SS, reinterpretv2si, 0, df)\n+  VAR1 (REINTERP_SS, reinterpretv2sf, 0, df)\n+  BUILTIN_VD (REINTERP_SS, reinterpretdf, 0)\n+\n+  BUILTIN_VD (REINTERP_SU, reinterpretdf, 0)\n+\n+  VAR1 (REINTERP_US, reinterpretdi, 0, df)\n+  VAR1 (REINTERP_US, reinterpretv8qi, 0, df)\n+  VAR1 (REINTERP_US, reinterpretv4hi, 0, df)\n+  VAR1 (REINTERP_US, reinterpretv2si, 0, df)\n+  VAR1 (REINTERP_US, reinterpretv2sf, 0, df)\n+\n+  BUILTIN_VD (REINTERP_SP, reinterpretdf, 0)\n+\n+  VAR1 (REINTERP_PS, reinterpretdi, 0, df)\n+  VAR1 (REINTERP_PS, reinterpretv8qi, 0, df)\n+  VAR1 (REINTERP_PS, reinterpretv4hi, 0, df)\n+  VAR1 (REINTERP_PS, reinterpretv2si, 0, df)\n+  VAR1 (REINTERP_PS, reinterpretv2sf, 0, df)\n \n   BUILTIN_VDQ_I (BINOP, dup_lane, 0)\n   /* Implemented by aarch64_<sur>q<r>shl<mode>.  */"}, {"sha": "285d8399fea587cb6a2eba95ae8f1f7f34f30f3f", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=bcd48995efefb23dbb8ccd44850065febcf1a7e8", "patch": "@@ -2259,6 +2259,15 @@\n   DONE;\n })\n \n+(define_expand \"aarch64_reinterpretdf<mode>\"\n+  [(match_operand:DF 0 \"register_operand\" \"\")\n+   (match_operand:VD_RE 1 \"register_operand\" \"\")]\n+  \"TARGET_SIMD\"\n+{\n+  aarch64_simd_reinterpret (operands[0], operands[1]);\n+  DONE;\n+})\n+\n (define_expand \"aarch64_reinterpretv16qi<mode>\"\n   [(match_operand:V16QI 0 \"register_operand\" \"\")\n    (match_operand:VQ 1 \"register_operand\" \"\")]"}, {"sha": "9f1fa98e6fb50d3c8b426733eeceee606a5bfe27", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=bcd48995efefb23dbb8ccd44850065febcf1a7e8", "patch": "@@ -2654,6 +2654,12 @@ vgetq_lane_u64 (uint64x2_t __a, const int __b)\n \n /* vreinterpret  */\n \n+__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n+vreinterpret_p8_f64 (float64x1_t __a)\n+{\n+  return __builtin_aarch64_reinterpretv8qidf_ps (__a);\n+}\n+\n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n vreinterpret_p8_s8 (int8x8_t __a)\n {\n@@ -2714,6 +2720,12 @@ vreinterpret_p8_p16 (poly16x4_t __a)\n   return (poly8x8_t) __a;\n }\n \n+__extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n+vreinterpretq_p8_f64 (float64x2_t __a)\n+{\n+  return (poly8x16_t) __a;\n+}\n+\n __extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_p8_s8 (int8x16_t __a)\n {\n@@ -2774,6 +2786,12 @@ vreinterpretq_p8_p16 (poly16x8_t __a)\n   return (poly8x16_t) __a;\n }\n \n+__extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_p16_f64 (float64x1_t __a)\n+{\n+  return __builtin_aarch64_reinterpretv4hidf_ps (__a);\n+}\n+\n __extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n vreinterpret_p16_s8 (int8x8_t __a)\n {\n@@ -2834,6 +2852,12 @@ vreinterpret_p16_p8 (poly8x8_t __a)\n   return (poly16x4_t) __a;\n }\n \n+__extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_p16_f64 (float64x2_t __a)\n+{\n+  return (poly16x8_t) __a;\n+}\n+\n __extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_p16_s8 (int8x16_t __a)\n {\n@@ -2894,6 +2918,12 @@ vreinterpretq_p16_p8 (poly8x16_t __a)\n   return (poly16x8_t) __a;\n }\n \n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vreinterpret_f32_f64 (float64x1_t __a)\n+{\n+  return __builtin_aarch64_reinterpretv2sfdf (__a);\n+}\n+\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vreinterpret_f32_s8 (int8x8_t __a)\n {\n@@ -2954,6 +2984,12 @@ vreinterpret_f32_p16 (poly16x4_t __a)\n   return (float32x2_t) __a;\n }\n \n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vreinterpretq_f32_f64 (float64x2_t __a)\n+{\n+  return (float32x4_t) __a;\n+}\n+\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_f32_s8 (int8x16_t __a)\n {\n@@ -3014,6 +3050,144 @@ vreinterpretq_f32_p16 (poly16x8_t __a)\n   return (float32x4_t) __a;\n }\n \n+__extension__ static __inline float64x1_t __attribute__((__always_inline__))\n+vreinterpret_f64_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_reinterpretdfv2sf (__a);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__((__always_inline__))\n+vreinterpret_f64_p8 (poly8x8_t __a)\n+{\n+  return __builtin_aarch64_reinterpretdfv8qi_sp (__a);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__((__always_inline__))\n+vreinterpret_f64_p16 (poly16x4_t __a)\n+{\n+  return __builtin_aarch64_reinterpretdfv4hi_sp (__a);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__((__always_inline__))\n+vreinterpret_f64_s8 (int8x8_t __a)\n+{\n+  return __builtin_aarch64_reinterpretdfv8qi (__a);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__((__always_inline__))\n+vreinterpret_f64_s16 (int16x4_t __a)\n+{\n+  return __builtin_aarch64_reinterpretdfv4hi (__a);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__((__always_inline__))\n+vreinterpret_f64_s32 (int32x2_t __a)\n+{\n+  return __builtin_aarch64_reinterpretdfv2si (__a);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__((__always_inline__))\n+vreinterpret_f64_s64 (int64x1_t __a)\n+{\n+  return __builtin_aarch64_createdf ((uint64_t) vget_lane_s64 (__a, 0));\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__((__always_inline__))\n+vreinterpret_f64_u8 (uint8x8_t __a)\n+{\n+  return __builtin_aarch64_reinterpretdfv8qi_su (__a);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__((__always_inline__))\n+vreinterpret_f64_u16 (uint16x4_t __a)\n+{\n+  return __builtin_aarch64_reinterpretdfv4hi_su (__a);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__((__always_inline__))\n+vreinterpret_f64_u32 (uint32x2_t __a)\n+{\n+  return __builtin_aarch64_reinterpretdfv2si_su (__a);\n+}\n+\n+__extension__ static __inline float64x1_t __attribute__((__always_inline__))\n+vreinterpret_f64_u64 (uint64x1_t __a)\n+{\n+  return __builtin_aarch64_createdf (vget_lane_u64 (__a, 0));\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__((__always_inline__))\n+vreinterpretq_f64_f32 (float32x4_t __a)\n+{\n+  return (float64x2_t) __a;\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__((__always_inline__))\n+vreinterpretq_f64_p8 (poly8x16_t __a)\n+{\n+  return (float64x2_t) __a;\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__((__always_inline__))\n+vreinterpretq_f64_p16 (poly16x8_t __a)\n+{\n+  return (float64x2_t) __a;\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__((__always_inline__))\n+vreinterpretq_f64_s8 (int8x16_t __a)\n+{\n+  return (float64x2_t) __a;\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__((__always_inline__))\n+vreinterpretq_f64_s16 (int16x8_t __a)\n+{\n+  return (float64x2_t) __a;\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__((__always_inline__))\n+vreinterpretq_f64_s32 (int32x4_t __a)\n+{\n+  return (float64x2_t) __a;\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__((__always_inline__))\n+vreinterpretq_f64_s64 (int64x2_t __a)\n+{\n+  return (float64x2_t) __a;\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__((__always_inline__))\n+vreinterpretq_f64_u8 (uint8x16_t __a)\n+{\n+  return (float64x2_t) __a;\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__((__always_inline__))\n+vreinterpretq_f64_u16 (uint16x8_t __a)\n+{\n+  return (float64x2_t) __a;\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__((__always_inline__))\n+vreinterpretq_f64_u32 (uint32x4_t __a)\n+{\n+  return (float64x2_t) __a;\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__((__always_inline__))\n+vreinterpretq_f64_u64 (uint64x2_t __a)\n+{\n+  return (float64x2_t) __a;\n+}\n+\n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vreinterpret_s64_f64 (float64x1_t __a)\n+{\n+  return __builtin_aarch64_reinterpretdidf (__a);\n+}\n+\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vreinterpret_s64_s8 (int8x8_t __a)\n {\n@@ -3074,6 +3248,12 @@ vreinterpret_s64_p16 (poly16x4_t __a)\n   return (int64x1_t) __a;\n }\n \n+__extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n+vreinterpretq_s64_f64 (float64x2_t __a)\n+{\n+  return (int64x2_t) __a;\n+}\n+\n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_s64_s8 (int8x16_t __a)\n {\n@@ -3134,6 +3314,12 @@ vreinterpretq_s64_p16 (poly16x8_t __a)\n   return (int64x2_t) __a;\n }\n \n+__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n+vreinterpret_u64_f64 (float64x1_t __a)\n+{\n+  return __builtin_aarch64_reinterpretdidf_us (__a);\n+}\n+\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vreinterpret_u64_s8 (int8x8_t __a)\n {\n@@ -3194,6 +3380,12 @@ vreinterpret_u64_p16 (poly16x4_t __a)\n   return (uint64x1_t) __a;\n }\n \n+__extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n+vreinterpretq_u64_f64 (float64x2_t __a)\n+{\n+  return (uint64x2_t) __a;\n+}\n+\n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_u64_s8 (int8x16_t __a)\n {\n@@ -3254,6 +3446,12 @@ vreinterpretq_u64_p16 (poly16x8_t __a)\n   return (uint64x2_t) __a;\n }\n \n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vreinterpret_s8_f64 (float64x1_t __a)\n+{\n+  return __builtin_aarch64_reinterpretv8qidf (__a);\n+}\n+\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vreinterpret_s8_s16 (int16x4_t __a)\n {\n@@ -3314,6 +3512,12 @@ vreinterpret_s8_p16 (poly16x4_t __a)\n   return (int8x8_t) __a;\n }\n \n+__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n+vreinterpretq_s8_f64 (float64x2_t __a)\n+{\n+  return (int8x16_t) __a;\n+}\n+\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_s8_s16 (int16x8_t __a)\n {\n@@ -3374,6 +3578,12 @@ vreinterpretq_s8_p16 (poly16x8_t __a)\n   return (int8x16_t) __a;\n }\n \n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_s16_f64 (float64x1_t __a)\n+{\n+  return __builtin_aarch64_reinterpretv4hidf (__a);\n+}\n+\n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vreinterpret_s16_s8 (int8x8_t __a)\n {\n@@ -3434,6 +3644,12 @@ vreinterpret_s16_p16 (poly16x4_t __a)\n   return (int16x4_t) __a;\n }\n \n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_s16_f64 (float64x2_t __a)\n+{\n+  return (int16x8_t) __a;\n+}\n+\n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_s16_s8 (int8x16_t __a)\n {\n@@ -3494,6 +3710,12 @@ vreinterpretq_s16_p16 (poly16x8_t __a)\n   return (int16x8_t) __a;\n }\n \n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vreinterpret_s32_f64 (float64x1_t __a)\n+{\n+  return __builtin_aarch64_reinterpretv2sidf (__a);\n+}\n+\n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vreinterpret_s32_s8 (int8x8_t __a)\n {\n@@ -3554,6 +3776,12 @@ vreinterpret_s32_p16 (poly16x4_t __a)\n   return (int32x2_t) __a;\n }\n \n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vreinterpretq_s32_f64 (float64x2_t __a)\n+{\n+  return (int32x4_t) __a;\n+}\n+\n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_s32_s8 (int8x16_t __a)\n {\n@@ -3614,6 +3842,12 @@ vreinterpretq_s32_p16 (poly16x8_t __a)\n   return (int32x4_t) __a;\n }\n \n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+vreinterpret_u8_f64 (float64x1_t __a)\n+{\n+  return __builtin_aarch64_reinterpretv8qidf_us (__a);\n+}\n+\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vreinterpret_u8_s8 (int8x8_t __a)\n {\n@@ -3674,6 +3908,12 @@ vreinterpret_u8_p16 (poly16x4_t __a)\n   return (uint8x8_t) __a;\n }\n \n+__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n+vreinterpretq_u8_f64 (float64x2_t __a)\n+{\n+  return (uint8x16_t) __a;\n+}\n+\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_u8_s8 (int8x16_t __a)\n {\n@@ -3734,6 +3974,12 @@ vreinterpretq_u8_p16 (poly16x8_t __a)\n   return (uint8x16_t) __a;\n }\n \n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vreinterpret_u16_f64 (float64x1_t __a)\n+{\n+  return __builtin_aarch64_reinterpretv4hidf_us (__a);\n+}\n+\n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vreinterpret_u16_s8 (int8x8_t __a)\n {\n@@ -3794,6 +4040,12 @@ vreinterpret_u16_p16 (poly16x4_t __a)\n   return (uint16x4_t) __a;\n }\n \n+__extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n+vreinterpretq_u16_f64 (float64x2_t __a)\n+{\n+  return (uint16x8_t) __a;\n+}\n+\n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_u16_s8 (int8x16_t __a)\n {\n@@ -3854,6 +4106,12 @@ vreinterpretq_u16_p16 (poly16x8_t __a)\n   return (uint16x8_t) __a;\n }\n \n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+vreinterpret_u32_f64 (float64x1_t __a)\n+{\n+  return __builtin_aarch64_reinterpretv2sidf_us (__a);\n+}\n+\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vreinterpret_u32_s8 (int8x8_t __a)\n {\n@@ -3914,6 +4172,12 @@ vreinterpret_u32_p16 (poly16x4_t __a)\n   return (uint32x2_t) __a;\n }\n \n+__extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n+vreinterpretq_u32_f64 (float64x2_t __a)\n+{\n+  return (uint32x4_t) __a;\n+}\n+\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_u32_s8 (int8x16_t __a)\n {"}, {"sha": "2dced65048dea6f22fafba0115afafa4c991b757", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bcd48995efefb23dbb8ccd44850065febcf1a7e8", "patch": "@@ -1,3 +1,7 @@\n+2014-04-22  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* gcc.target/aarch64/vreinterpret_f64_1.c: New.\n+\n 2014-04-22  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* gcc.target/aarch64/vqneg_s64_1.c: New testcase."}, {"sha": "ca98b9f63c1cdbe3b30e9c7b6613641c104698a2", "filename": "gcc/testsuite/gcc.target/aarch64/vreinterpret_f64_1.c", "status": "added", "additions": 596, "deletions": 0, "changes": 596, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvreinterpret_f64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd48995efefb23dbb8ccd44850065febcf1a7e8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvreinterpret_f64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvreinterpret_f64_1.c?ref=bcd48995efefb23dbb8ccd44850065febcf1a7e8", "patch": "@@ -0,0 +1,596 @@\n+/* Test vreinterpret_f64_* and vreinterpret_*_f64 intrinsics work correctly.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+#define ABS(a) __builtin_fabs (a)\n+#define ISNAN(a) __builtin_isnan (a)\n+\n+#define DOUBLE_EQUALS(a, b, epsilon)\t\t\\\n+(\t\t\t\t\t\t\\\n+ ((a) == (b))\t\t\t\t\t\\\n+  || (ISNAN (a) && ISNAN (b))\t\t\t\\\n+  || (ABS (a - b) < epsilon)\t\t\t\\\n+)\n+\n+/* Pi accurate up to 16 digits.\n+   Further digits are a closest binary approximation.  */\n+#define PI_F64 3.14159265358979311599796346854\n+/* Hex representation in Double (IEEE754 Double precision 64-bit) is:\n+   0x400921FB54442D18.  */\n+\n+/* E accurate up to 16 digits.\n+   Further digits are a closest binary approximation.  */\n+#define E_F64 2.71828182845904509079559829843\n+/* Hex representation in Double (IEEE754 Double precision 64-bit) is:\n+   0x4005BF0A8B145769.  */\n+\n+float32x2_t __attribute__ ((noinline))\n+wrap_vreinterpret_f32_f64 (float64x1_t __a)\n+{\n+  return vreinterpret_f32_f64 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpret_f32_f64 ()\n+{\n+  float64x1_t a;\n+  float32x2_t b;\n+  float64_t c[1] = { PI_F64 };\n+  /* Values { 0x54442D18, 0x400921FB } reinterpreted as f32.  */\n+  float32_t d[2] = { 3.3702805504E12, 2.1426990032196044921875E0 };\n+  float32_t e[2];\n+  int i;\n+\n+  a = vld1_f64 (c);\n+  b = wrap_vreinterpret_f32_f64 (a);\n+  vst1_f32 (e, b);\n+  for (i = 0; i < 2; i++)\n+    if (!DOUBLE_EQUALS (d[i], e[i], __FLT_EPSILON__))\n+      return 1;\n+  return 0;\n+};\n+\n+int8x8_t __attribute__ ((noinline))\n+wrap_vreinterpret_s8_f64 (float64x1_t __a)\n+{\n+  return vreinterpret_s8_f64 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpret_s8_f64 ()\n+{\n+  float64x1_t a;\n+  int8x8_t b;\n+  float64_t c[1] = { PI_F64 };\n+  int8_t d[8] = { 0x18, 0x2D, 0x44, 0x54, 0xFB, 0x21, 0x09, 0x40 };\n+  int8_t e[8];\n+  int i;\n+\n+  a = vld1_f64 (c);\n+  b = wrap_vreinterpret_s8_f64 (a);\n+  vst1_s8 (e, b);\n+  for (i = 0; i < 8; i++)\n+    if (d[i] != e[i])\n+      return 1;\n+  return 0;\n+};\n+\n+int16x4_t __attribute__ ((noinline))\n+wrap_vreinterpret_s16_f64 (float64x1_t __a)\n+{\n+  return vreinterpret_s16_f64 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpret_s16_f64 ()\n+{\n+  float64x1_t a;\n+  int16x4_t b;\n+  float64_t c[1] = { PI_F64 };\n+  int16_t d[4] = { 0x2D18, 0x5444, 0x21FB, 0x4009 };\n+  int16_t e[4];\n+  int i;\n+\n+  a = vld1_f64 (c);\n+  b = wrap_vreinterpret_s16_f64 (a);\n+  vst1_s16 (e, b);\n+  for (i = 0; i < 4; i++)\n+    if (d[i] != e[i])\n+      return 1;\n+  return 0;\n+};\n+\n+int32x2_t __attribute__ ((noinline))\n+wrap_vreinterpret_s32_f64 (float64x1_t __a)\n+{\n+  return vreinterpret_s32_f64 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpret_s32_f64 ()\n+{\n+  float64x1_t a;\n+  int32x2_t b;\n+  float64_t c[1] = { PI_F64 };\n+  int32_t d[2] = { 0x54442D18, 0x400921FB };\n+  int32_t e[2];\n+  int i;\n+\n+  a = vld1_f64 (c);\n+  b = wrap_vreinterpret_s32_f64 (a);\n+  vst1_s32 (e, b);\n+  for (i = 0; i < 2; i++)\n+    if (d[i] != e[i])\n+      return 1;\n+  return 0;\n+};\n+\n+int64x1_t __attribute__ ((noinline))\n+wrap_vreinterpret_s64_f64 (float64x1_t __a)\n+{\n+  return vreinterpret_s64_f64 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpret_s64_f64 ()\n+{\n+  float64x1_t a;\n+  int64x1_t b;\n+  float64_t c[1] = { PI_F64 };\n+  int64_t d[1] = { 0x400921FB54442D18 };\n+  int64_t e[1];\n+  int i;\n+\n+  a = vld1_f64 (c);\n+  b = wrap_vreinterpret_s64_f64 (a);\n+  vst1_s64 (e, b);\n+  if (d[0] != e[0])\n+    return 1;\n+  return 0;\n+};\n+\n+float32x4_t __attribute__ ((noinline))\n+wrap_vreinterpretq_f32_f64 (float64x2_t __a)\n+{\n+  return vreinterpretq_f32_f64 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpretq_f32_f64 ()\n+{\n+  float64x2_t a;\n+  float32x4_t b;\n+  float64_t c[2] = { PI_F64, E_F64 };\n+\n+  /* Values corresponding to f32 reinterpret of\n+     { 0x54442D18, 0x400921FB, 0x8B145769, 0x4005BF0A }.  */\n+  float32_t d[4] = { 3.3702805504E12,\n+\t\t     2.1426990032196044921875E0,\n+\t\t     -2.8569523269651966444143014594E-32,\n+\t\t     2.089785099029541015625E0 };\n+  float32_t e[4];\n+  int i;\n+\n+  a = vld1q_f64 (c);\n+  b = wrap_vreinterpretq_f32_f64 (a);\n+  vst1q_f32 (e, b);\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (!DOUBLE_EQUALS (d[i], e[i], __FLT_EPSILON__))\n+\treturn 1;\n+    }\n+  return 0;\n+};\n+\n+int8x16_t __attribute__ ((noinline))\n+wrap_vreinterpretq_s8_f64 (float64x2_t __a)\n+{\n+  return vreinterpretq_s8_f64 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpretq_s8_f64 ()\n+{\n+  float64x2_t a;\n+  int8x16_t b;\n+  float64_t c[2] = { PI_F64, E_F64 };\n+  int8_t d[16] = { 0x18, 0x2D, 0x44, 0x54, 0xFB, 0x21, 0x09, 0x40,\n+\t\t   0x69, 0x57, 0x14, 0x8B, 0x0A, 0xBF, 0x05, 0x40 };\n+  int8_t e[16];\n+  int i;\n+\n+  a = vld1q_f64 (c);\n+  b = wrap_vreinterpretq_s8_f64 (a);\n+  vst1q_s8 (e, b);\n+  for (i = 0; i < 16; i++)\n+    if (d[i] != e[i])\n+      return 1;\n+  return 0;\n+};\n+\n+int16x8_t __attribute__ ((noinline))\n+wrap_vreinterpretq_s16_f64 (float64x2_t __a)\n+{\n+  return vreinterpretq_s16_f64 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpretq_s16_f64 ()\n+{\n+  float64x2_t a;\n+  int16x8_t b;\n+  float64_t c[2] = { PI_F64, E_F64 };\n+  int16_t d[8] = { 0x2D18, 0x5444, 0x21FB, 0x4009,\n+\t\t   0x5769, 0x8B14, 0xBF0A, 0x4005 };\n+  int16_t e[8];\n+  int i;\n+\n+  a = vld1q_f64 (c);\n+  b = wrap_vreinterpretq_s16_f64 (a);\n+  vst1q_s16 (e, b);\n+  for (i = 0; i < 8; i++)\n+    if (d[i] != e[i])\n+      return 1;\n+  return 0;\n+};\n+\n+int32x4_t __attribute__ ((noinline))\n+wrap_vreinterpretq_s32_f64 (float64x2_t __a)\n+{\n+  return vreinterpretq_s32_f64 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpretq_s32_f64 ()\n+{\n+  float64x2_t a;\n+  int32x4_t b;\n+  float64_t c[2] = { PI_F64, E_F64 };\n+  int32_t d[4] = { 0x54442D18, 0x400921FB, 0x8B145769, 0x4005BF0A };\n+  int32_t e[4];\n+  int i;\n+\n+  a = vld1q_f64 (c);\n+  b = wrap_vreinterpretq_s32_f64 (a);\n+  vst1q_s32 (e, b);\n+  for (i = 0; i < 4; i++)\n+    if (d[i] != e[i])\n+      return 1;\n+  return 0;\n+};\n+\n+int64x2_t __attribute__ ((noinline))\n+wrap_vreinterpretq_s64_f64 (float64x2_t __a)\n+{\n+  return vreinterpretq_s64_f64 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpretq_s64_f64 ()\n+{\n+  float64x2_t a;\n+  int64x2_t b;\n+  float64_t c[2] = { PI_F64, E_F64 };\n+  int64_t d[2] = { 0x400921FB54442D18, 0x4005BF0A8B145769 };\n+  int64_t e[2];\n+  int i;\n+\n+  a = vld1q_f64 (c);\n+  b = wrap_vreinterpretq_s64_f64 (a);\n+  vst1q_s64 (e, b);\n+  for (i = 0; i < 2; i++)\n+    if (d[i] != e[i])\n+      return 1;\n+  return 0;\n+};\n+\n+float64x1_t __attribute__ ((noinline))\n+wrap_vreinterpret_f64_f32 (float32x2_t __a)\n+{\n+  return vreinterpret_f64_f32 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpret_f64_f32 ()\n+{\n+  float32x2_t a;\n+  float64x1_t b;\n+  /* Values { 0x54442D18, 0x400921FB } reinterpreted as f32.  */\n+  float32_t c[2] = { 3.3702805504E12, 2.1426990032196044921875E0 };\n+  float64_t d[1] = { PI_F64 };\n+  float64_t e[1];\n+  int i;\n+\n+  a = vld1_f32 (c);\n+  b = wrap_vreinterpret_f64_f32 (a);\n+  vst1_f64 (e, b);\n+  if (!DOUBLE_EQUALS (d[0], e[0], __DBL_EPSILON__))\n+    return 1;\n+  return 0;\n+};\n+\n+float64x1_t __attribute__ ((noinline))\n+wrap_vreinterpret_f64_s8 (int8x8_t __a)\n+{\n+  return vreinterpret_f64_s8 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpret_f64_s8 ()\n+{\n+  int8x8_t a;\n+  float64x1_t b;\n+  int8_t c[8] = { 0x18, 0x2D, 0x44, 0x54, 0xFB, 0x21, 0x09, 0x40 };\n+  float64_t d[1] = { PI_F64 };\n+  float64_t e[1];\n+  int i;\n+\n+  a = vld1_s8 (c);\n+  b = wrap_vreinterpret_f64_s8 (a);\n+  vst1_f64 (e, b);\n+  if (!DOUBLE_EQUALS (d[0], e[0], __DBL_EPSILON__))\n+    return 1;\n+  return 0;\n+};\n+\n+float64x1_t __attribute__ ((noinline))\n+wrap_vreinterpret_f64_s16 (int16x4_t __a)\n+{\n+  return vreinterpret_f64_s16 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpret_f64_s16 ()\n+{\n+  int16x4_t a;\n+  float64x1_t b;\n+  int16_t c[4] = { 0x2D18, 0x5444, 0x21FB, 0x4009 };\n+  float64_t d[1] = { PI_F64 };\n+  float64_t e[1];\n+  int i;\n+\n+  a = vld1_s16 (c);\n+  b = wrap_vreinterpret_f64_s16 (a);\n+  vst1_f64 (e, b);\n+  if (!DOUBLE_EQUALS (d[0], e[0], __DBL_EPSILON__))\n+    return 1;\n+  return 0;\n+};\n+\n+float64x1_t __attribute__ ((noinline))\n+wrap_vreinterpret_f64_s32 (int32x2_t __a)\n+{\n+  return vreinterpret_f64_s32 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpret_f64_s32 ()\n+{\n+  int32x2_t a;\n+  float64x1_t b;\n+  int32_t c[2] = { 0x54442D18, 0x400921FB };\n+  float64_t d[1] = { PI_F64 };\n+  float64_t e[1];\n+  int i;\n+\n+  a = vld1_s32 (c);\n+  b = wrap_vreinterpret_f64_s32 (a);\n+  vst1_f64 (e, b);\n+  if (!DOUBLE_EQUALS (d[0], e[0], __DBL_EPSILON__))\n+    return 1;\n+  return 0;\n+};\n+\n+float64x1_t __attribute__ ((noinline))\n+wrap_vreinterpret_f64_s64 (int64x1_t __a)\n+{\n+  return vreinterpret_f64_s64 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpret_f64_s64 ()\n+{\n+  int64x1_t a;\n+  float64x1_t b;\n+  int64_t c[1] = { 0x400921FB54442D18 };\n+  float64_t d[1] = { PI_F64 };\n+  float64_t e[1];\n+\n+  a = vld1_s64 (c);\n+  b = wrap_vreinterpret_f64_s64 (a);\n+  vst1_f64 (e, b);\n+  if (!DOUBLE_EQUALS (d[0], e[0], __DBL_EPSILON__))\n+    return 1;\n+  return 0;\n+};\n+\n+float64x2_t __attribute__ ((noinline))\n+wrap_vreinterpretq_f64_f32 (float32x4_t __a)\n+{\n+  return vreinterpretq_f64_f32 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpretq_f64_f32 ()\n+{\n+  float32x4_t a;\n+  float64x2_t b;\n+  /* Values corresponding to f32 reinterpret of\n+     { 0x54442D18, 0x400921FB, 0x8B145769, 0x4005BF0A }.  */\n+  float32_t c[4] = { 3.3702805504E12,\n+\t\t     2.1426990032196044921875E0,\n+\t\t     -2.8569523269651966444143014594E-32,\n+\t\t     2.089785099029541015625E0 };\n+\n+  float64_t d[2] = { PI_F64, E_F64 };\n+  float64_t e[2];\n+  int i;\n+\n+  a = vld1q_f32 (c);\n+  b = wrap_vreinterpretq_f64_f32 (a);\n+  vst1q_f64 (e, b);\n+  for (i = 0; i < 2; i++)\n+    if (!DOUBLE_EQUALS (d[i], e[i], __DBL_EPSILON__))\n+      return 1;\n+  return 0;\n+};\n+\n+float64x2_t __attribute__ ((noinline))\n+wrap_vreinterpretq_f64_s8 (int8x16_t __a)\n+{\n+  return vreinterpretq_f64_s8 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpretq_f64_s8 ()\n+{\n+  int8x16_t a;\n+  float64x2_t b;\n+  int8_t c[16] = { 0x18, 0x2D, 0x44, 0x54, 0xFB, 0x21, 0x09, 0x40,\n+\t\t   0x69, 0x57, 0x14, 0x8B, 0x0A, 0xBF, 0x05, 0x40 };\n+  float64_t d[2] = { PI_F64, E_F64 };\n+  float64_t e[2];\n+  int i;\n+\n+  a = vld1q_s8 (c);\n+  b = wrap_vreinterpretq_f64_s8 (a);\n+  vst1q_f64 (e, b);\n+  for (i = 0; i < 2; i++)\n+    if (!DOUBLE_EQUALS (d[i], e[i], __DBL_EPSILON__))\n+      return 1;\n+  return 0;\n+};\n+\n+float64x2_t __attribute__ ((noinline))\n+wrap_vreinterpretq_f64_s16 (int16x8_t __a)\n+{\n+  return vreinterpretq_f64_s16 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpretq_f64_s16 ()\n+{\n+  int16x8_t a;\n+  float64x2_t b;\n+  int16_t c[8] = { 0x2D18, 0x5444, 0x21FB, 0x4009,\n+\t\t   0x5769, 0x8B14, 0xBF0A, 0x4005 };\n+  float64_t d[2] = { PI_F64, E_F64 };\n+  float64_t e[2];\n+  int i;\n+\n+  a = vld1q_s16 (c);\n+  b = wrap_vreinterpretq_f64_s16 (a);\n+  vst1q_f64 (e, b);\n+  for (i = 0; i < 2; i++)\n+    if (!DOUBLE_EQUALS (d[i], e[i], __DBL_EPSILON__))\n+      return 1;\n+  return 0;\n+};\n+\n+float64x2_t __attribute__ ((noinline))\n+wrap_vreinterpretq_f64_s32 (int32x4_t __a)\n+{\n+  return vreinterpretq_f64_s32 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpretq_f64_s32 ()\n+{\n+  int32x4_t a;\n+  float64x2_t b;\n+  int32_t c[4] = { 0x54442D18, 0x400921FB, 0x8B145769, 0x4005BF0A };\n+  float64_t d[2] = { PI_F64, E_F64 };\n+  float64_t e[2];\n+  int i;\n+\n+  a = vld1q_s32 (c);\n+  b = wrap_vreinterpretq_f64_s32 (a);\n+  vst1q_f64 (e, b);\n+  for (i = 0; i < 2; i++)\n+    if (!DOUBLE_EQUALS (d[i], e[i], __DBL_EPSILON__))\n+      return 1;\n+  return 0;\n+};\n+\n+float64x2_t __attribute__ ((noinline))\n+wrap_vreinterpretq_f64_s64 (int64x2_t __a)\n+{\n+  return vreinterpretq_f64_s64 (__a);\n+}\n+\n+int __attribute__ ((noinline))\n+test_vreinterpretq_f64_s64 ()\n+{\n+  int64x2_t a;\n+  float64x2_t b;\n+  int64_t c[2] = { 0x400921FB54442D18, 0x4005BF0A8B145769 };\n+  float64_t d[2] = { PI_F64, E_F64 };\n+  float64_t e[2];\n+  int i;\n+\n+  a = vld1q_s64 (c);\n+  b = wrap_vreinterpretq_f64_s64 (a);\n+  vst1q_f64 (e, b);\n+  for (i = 0; i < 2; i++)\n+    if (!DOUBLE_EQUALS (d[i], e[i], __DBL_EPSILON__))\n+      return 1;\n+  return 0;\n+};\n+\n+int\n+main (int argc, char **argv)\n+{\n+  if (test_vreinterpret_f32_f64 ())\n+    abort ();\n+\n+  if (test_vreinterpret_s8_f64 ())\n+    abort ();\n+  if (test_vreinterpret_s16_f64 ())\n+    abort ();\n+  if (test_vreinterpret_s32_f64 ())\n+    abort ();\n+  if (test_vreinterpret_s64_f64 ())\n+    abort ();\n+\n+  if (test_vreinterpretq_f32_f64 ())\n+    abort ();\n+\n+  if (test_vreinterpretq_s8_f64 ())\n+    abort ();\n+  if (test_vreinterpretq_s16_f64 ())\n+    abort ();\n+  if (test_vreinterpretq_s32_f64 ())\n+    abort ();\n+  if (test_vreinterpretq_s64_f64 ())\n+    abort ();\n+\n+  if (test_vreinterpret_f64_f32 ())\n+    abort ();\n+\n+  if (test_vreinterpret_f64_s8 ())\n+    abort ();\n+  if (test_vreinterpret_f64_s16 ())\n+    abort ();\n+  if (test_vreinterpret_f64_s32 ())\n+    abort ();\n+  if (test_vreinterpret_f64_s64 ())\n+    abort ();\n+\n+  if (test_vreinterpretq_f64_f32 ())\n+    abort ();\n+\n+  if (test_vreinterpretq_f64_s8 ())\n+    abort ();\n+  if (test_vreinterpretq_f64_s16 ())\n+    abort ();\n+  if (test_vreinterpretq_f64_s32 ())\n+    abort ();\n+  if (test_vreinterpretq_f64_s64 ())\n+    abort ();\n+\n+  return 0;\n+}"}]}