{"sha": "ceccaacf4f6bb19faa219ceeefde81e582267a1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VjY2FhY2Y0ZjZiYjE5ZmFhMjE5Y2VlZWZkZTgxZTU4MjI2N2ExZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-02-20T22:16:47Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-02-20T22:16:47Z"}, "message": "re PR fortran/47797 (Debug: Odd first break point for subroutine breakp w/ allocatables)\n\n2011-02-20  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/47797\n        * trans-decl.c (gfc_trans_deferred_vars): Use gfc_set_backend_locus\n        and gfc_restore_backend_locus to have better debug locations.\n        * trans-array.c (gfc_trans_deferred_array): Ditto.\n\nFrom-SVN: r170347", "tree": {"sha": "7a6a702da3ebbd57fd915eaf22e315933c23401e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a6a702da3ebbd57fd915eaf22e315933c23401e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceccaacf4f6bb19faa219ceeefde81e582267a1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceccaacf4f6bb19faa219ceeefde81e582267a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceccaacf4f6bb19faa219ceeefde81e582267a1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceccaacf4f6bb19faa219ceeefde81e582267a1e/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a3a33a7b29aa6a4917cb8b4df9c2235d0f1354a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3a33a7b29aa6a4917cb8b4df9c2235d0f1354a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3a33a7b29aa6a4917cb8b4df9c2235d0f1354a9"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "951be24dc124d8efc9cfcff17ceda5f5d3017c7a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceccaacf4f6bb19faa219ceeefde81e582267a1e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceccaacf4f6bb19faa219ceeefde81e582267a1e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ceccaacf4f6bb19faa219ceeefde81e582267a1e", "patch": "@@ -1,3 +1,10 @@\n+2011-02-20  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/47797\n+\t* trans-decl.c (gfc_trans_deferred_vars): Use gfc_set_backend_locus and\n+\tgfc_restore_backend_locus to have better debug locations.\n+\t* trans-array.c (gfc_trans_deferred_array): Ditto.\n+\n 2011-02-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/45077"}, {"sha": "4e901f27680b45be5942d428de27197b89e40192", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceccaacf4f6bb19faa219ceeefde81e582267a1e/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceccaacf4f6bb19faa219ceeefde81e582267a1e/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=ceccaacf4f6bb19faa219ceeefde81e582267a1e", "patch": "@@ -7156,6 +7156,8 @@ gfc_trans_deferred_array (gfc_symbol * sym, gfc_wrapped_block * block)\n \t\t \"allocatable attribute or derived type without allocatable \"\n \t\t \"components.\");\n \n+  gfc_save_backend_locus (&loc);\n+  gfc_set_backend_locus (&sym->declared_at);\n   gfc_init_block (&init);\n \n   gcc_assert (TREE_CODE (sym->backend_decl) == VAR_DECL\n@@ -7172,11 +7174,10 @@ gfc_trans_deferred_array (gfc_symbol * sym, gfc_wrapped_block * block)\n   if (sym->attr.dummy || sym->attr.use_assoc || sym->attr.result)\n     {\n       gfc_add_init_cleanup (block, gfc_finish_block (&init), NULL_TREE);\n+      gfc_restore_backend_locus (&loc);\n       return;\n     }\n \n-  gfc_save_backend_locus (&loc);\n-  gfc_set_backend_locus (&sym->declared_at);\n   descriptor = sym->backend_decl;\n \n   /* Although static, derived types with default initializers and\n@@ -7225,8 +7226,8 @@ gfc_trans_deferred_array (gfc_symbol * sym, gfc_wrapped_block * block)\n   if (GFC_DESCRIPTOR_TYPE_P (type) && !sym->attr.save)\n     gfc_conv_descriptor_data_set (&init, descriptor, null_pointer_node);\n \n-  gfc_init_block (&cleanup);\n   gfc_restore_backend_locus (&loc);\n+  gfc_init_block (&cleanup);\n \n   /* Allocatable arrays need to be freed when they go out of scope.\n      The allocatable components of pointers must not be touched.  */"}, {"sha": "616cca8f36808eb149ecb77afda70be8b9fed545", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceccaacf4f6bb19faa219ceeefde81e582267a1e/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceccaacf4f6bb19faa219ceeefde81e582267a1e/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=ceccaacf4f6bb19faa219ceeefde81e582267a1e", "patch": "@@ -3318,6 +3318,8 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t  if (proc_sym->ts.deferred)\n \t    {\n \t      tmp = NULL;\n+\t      gfc_save_backend_locus (&loc);\n+\t      gfc_set_backend_locus (&proc_sym->declared_at);\n \t      gfc_start_block (&init);\n \t      /* Zero the string length on entry.  */\n \t      gfc_add_modify (&init, proc_sym->ts.u.cl->backend_decl,\n@@ -3332,6 +3334,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t      gfc_add_modify (&init, tmp,\n \t\t\t      fold_convert (TREE_TYPE (se.expr),\n \t\t\t\t\t    null_pointer_node));\n+\t      gfc_restore_backend_locus (&loc);\n \n \t      /* Pass back the string length on exit.  */\n \t      tmp = proc_sym->ts.u.cl->passed_length;\n@@ -3353,7 +3356,10 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n   /* Initialize the INTENT(OUT) derived type dummy arguments.  This\n      should be done here so that the offsets and lbounds of arrays\n      are available.  */\n+  gfc_save_backend_locus (&loc);\n+  gfc_set_backend_locus (&proc_sym->declared_at);\n   init_intent_out_dt (proc_sym, block);\n+  gfc_restore_backend_locus (&loc);\n \n   for (sym = proc_sym->tlink; sym != proc_sym; sym = sym->tlink)\n     {\n@@ -3372,7 +3378,12 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t      else if (sym->attr.pointer || sym->attr.allocatable)\n \t\t{\n \t\t  if (TREE_STATIC (sym->backend_decl))\n-\t\t    gfc_trans_static_array_pointer (sym);\n+\t\t    {\n+\t\t      gfc_save_backend_locus (&loc);\n+\t\t      gfc_set_backend_locus (&sym->declared_at);\n+\t\t      gfc_trans_static_array_pointer (sym);\n+\t\t      gfc_restore_backend_locus (&loc);\n+\t\t    }\n \t\t  else\n \t\t    {\n \t\t      seen_trans_deferred_array = true;\n@@ -3381,6 +3392,9 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t}\n \t      else\n \t\t{\n+\t\t  gfc_save_backend_locus (&loc);\n+\t\t  gfc_set_backend_locus (&sym->declared_at);\n+\n \t\t  if (sym_has_alloc_comp)\n \t\t    {\n \t\t      seen_trans_deferred_array = true;\n@@ -3398,8 +3412,6 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t\t\t\t    NULL_TREE);\n \t\t    }\n \n-\t\t  gfc_save_backend_locus (&loc);\n-\t\t  gfc_set_backend_locus (&sym->declared_at);\n \t\t  gfc_trans_auto_array_allocation (sym->backend_decl,\n \t\t\t\t\t\t   sym, block);\n \t\t  gfc_restore_backend_locus (&loc);\n@@ -3451,6 +3463,8 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t      gfc_conv_expr (&se, e);\n \t      gfc_free_expr (e);\n \n+\t      gfc_save_backend_locus (&loc);\n+\t      gfc_set_backend_locus (&sym->declared_at);\n \t      gfc_start_block (&init);\n \n \t      if (!sym->attr.dummy || sym->attr.intent == INTENT_OUT)\n@@ -3477,6 +3491,8 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t  else\n \t\t    gfc_add_modify (&init, sym->ts.u.cl->backend_decl, tmp);\n \n+\t\t  gfc_restore_backend_locus (&loc);\n+\n \t\t  /* Pass the final character length back.  */\n \t\t  if (sym->attr.intent != INTENT_IN)\n \t\t    tmp = fold_build2_loc (input_location, MODIFY_EXPR,\n@@ -3485,6 +3501,8 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t  else\n \t\t    tmp = NULL_TREE;\n \t\t}\n+\t      else\n+\t\tgfc_restore_backend_locus (&loc);\n \n \t      /* Deallocate when leaving the scope. Nullifying is not\n \t\t needed.  */\n@@ -3497,6 +3515,9 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t  /* Initialize _vptr to declared type.  */\n \t\t  gfc_symbol *vtab = gfc_find_derived_vtab (sym->ts.u.derived);\n \t\t  tree rhs;\n+\n+\t\t  gfc_save_backend_locus (&loc);\n+\t\t  gfc_set_backend_locus (&sym->declared_at);\n \t\t  e = gfc_lval_expr_from_sym (sym);\n \t\t  gfc_add_vptr_component (e);\n \t\t  gfc_init_se (&se, NULL);\n@@ -3506,6 +3527,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t  rhs = gfc_build_addr_expr (TREE_TYPE (se.expr),\n \t\t\t\t\t     gfc_get_symbol_decl (vtab));\n \t\t  gfc_add_modify (&init, se.expr, rhs);\n+\t\t  gfc_restore_backend_locus (&loc);\n \t\t}\n \n \t      gfc_add_init_cleanup (block, gfc_finish_block (&init), tmp);"}]}