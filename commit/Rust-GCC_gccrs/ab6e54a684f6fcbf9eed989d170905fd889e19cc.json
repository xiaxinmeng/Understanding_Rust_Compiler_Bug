{"sha": "ab6e54a684f6fcbf9eed989d170905fd889e19cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI2ZTU0YTY4NGY2ZmNiZjllZWQ5ODlkMTcwOTA1ZmQ4ODllMTljYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-12-18T19:23:30Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-12-18T19:23:30Z"}, "message": "testsuite: add coverage for diagnostics relating to inlining (PR tree-optimization/83336)\n\nIn theory, the diagnostics subsystem can print context information on\ncode inlining when diagnostics are emitted by the middle-end, describing\nthe chain of inlined callsites that led to a particular warning,\nbut PR tree-optimization/83336 describes various issues with this.\n\nAn underlying issue is that we have very little automated testing for\nthis code: gcc.dg/tm/pr52141.c has a test, but in general, prune.exp\nfilters out the various \"inlined from\" lines.\n\nThe following patch adds test coverage for it for C and C++ via a new\ntestsuite plugin, which emits a warning from the middle-end; the test\ncases use dg-regexp to verify that the \"inlined from\" lines are\nemitted correctly, with the correct function names and source locations.\n\nDoing so requires a change to prune.exp: the dg-regexp lines have to\nbe handled *before* the \"inlined from\" lines are stripped.\n\ngcc/testsuite/ChangeLog:\n\tPR tree-optimization/83336\n\t* g++.dg/cpp0x/missing-initializer_list-include.C: Update for\n\tchanges to prune.exp's handling of dg-regexp.\n\t* g++.dg/plugin/diagnostic-test-inlining-1.C: New test case.\n\t* g++.dg/plugin/plugin.exp (plugin_test_list): Add it, via\n\tgcc.dg's plugin/diagnostic_plugin_test_inlining.c.\n\t* gcc.dg/plugin/diagnostic-test-inlining-1.c: New test case.\n\t* gcc.dg/plugin/diagnostic-test-inlining-2.c: Likewise.\n\t* gcc.dg/plugin/diagnostic-test-inlining-3.c: Likewise.\n\t* gcc.dg/plugin/diagnostic-test-inlining-4.c: Likewise.\n\t* gcc.dg/plugin/diagnostic_plugin_test_inlining.c: New test\n\tplugin.\n\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add them.\n\t* lib/prune.exp (prune_gcc_output): Move call to handle-dg-regexps\n\tto before the various text stripping regsup invocations,\n\tin particular, to before the stripping of \"inlined from\".\n\nFrom-SVN: r255786", "tree": {"sha": "7302a65ee17fdb19155db0c24ffe950010dc58f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7302a65ee17fdb19155db0c24ffe950010dc58f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab6e54a684f6fcbf9eed989d170905fd889e19cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6e54a684f6fcbf9eed989d170905fd889e19cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab6e54a684f6fcbf9eed989d170905fd889e19cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab6e54a684f6fcbf9eed989d170905fd889e19cc/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5dd44f4ea5924ad31f7e70b6afba353032b8387d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dd44f4ea5924ad31f7e70b6afba353032b8387d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dd44f4ea5924ad31f7e70b6afba353032b8387d"}], "stats": {"total": 428, "additions": 425, "deletions": 3}, "files": [{"sha": "ae1fd01fb79e996990bef179027abb14a5c07185", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab6e54a684f6fcbf9eed989d170905fd889e19cc", "patch": "@@ -1,3 +1,22 @@\n+2017-12-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/83336\n+\t* g++.dg/cpp0x/missing-initializer_list-include.C: Update for\n+\tchanges to prune.exp's handling of dg-regexp.\n+\t* g++.dg/plugin/diagnostic-test-inlining-1.C: New test case.\n+\t* g++.dg/plugin/plugin.exp (plugin_test_list): Add it, via\n+\tgcc.dg's plugin/diagnostic_plugin_test_inlining.c.\n+\t* gcc.dg/plugin/diagnostic-test-inlining-1.c: New test case.\n+\t* gcc.dg/plugin/diagnostic-test-inlining-2.c: Likewise.\n+\t* gcc.dg/plugin/diagnostic-test-inlining-3.c: Likewise.\n+\t* gcc.dg/plugin/diagnostic-test-inlining-4.c: Likewise.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_inlining.c: New test\n+\tplugin.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add them.\n+\t* lib/prune.exp (prune_gcc_output): Move call to handle-dg-regexps\n+\tto before the various text stripping regsup invocations,\n+\tin particular, to before the stripping of \"inlined from\".\n+\n 2017-12-18  Jeff Law  <law@redhat.com>\n \n \tPR middle-end/83460"}, {"sha": "1010b0a4edde5e09767c76865f68a5f66d851a99", "filename": "gcc/testsuite/g++.dg/cpp0x/missing-initializer_list-include.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmissing-initializer_list-include.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmissing-initializer_list-include.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmissing-initializer_list-include.C?ref=ab6e54a684f6fcbf9eed989d170905fd889e19cc", "patch": "@@ -24,5 +24,6 @@ void test (int i)\n +#include <initializer_list>\n  /* This is padding (to avoid the generated patch containing DejaGnu\n     directives).  */\n+ \n { dg-end-multiline-output \"\" }\n #endif"}, {"sha": "df7bb1f856c16e0419cffff691101ad6d7dd91c2", "filename": "gcc/testsuite/g++.dg/plugin/diagnostic-test-inlining-1.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-inlining-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-inlining-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-inlining-1.C?ref=ab6e54a684f6fcbf9eed989d170905fd889e19cc", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-attributes -fdiagnostics-show-caret\" } */\n+\n+extern void __emit_warning (const char *message);\n+\n+/* Verify that the diagnostic subsytem describes the chain of inlining\n+   when reporting the warning.  */\n+\n+__attribute__((always_inline))\n+static void foo (void)\n+{\n+  __emit_warning (\"message\");\n+}\n+\n+__attribute__((always_inline))\n+static void bar (void)\n+{\n+  foo ();\n+}\n+\n+int main()\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* { dg-regexp \"In function 'void foo\\\\(\\\\)',\" \"\" } */\n+/* { dg-regexp \"    inlined from 'void bar\\\\(\\\\)' at .+/diagnostic-test-inlining-1.C:18:7,\" \"\" } */\n+/* { dg-regexp \"    inlined from 'int main\\\\(\\\\)' at .+/diagnostic-test-inlining-1.C:23:7:\" \"\" } */\n+/* { dg-warning \"18: message\" \"\" { target *-*-* } 12 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_warning (\"message\");\n+   ~~~~~~~~~~~~~~~^~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "4f9ce16ffc9d8d6e91baa5869087a27b8d66a67f", "filename": "gcc/testsuite/g++.dg/plugin/plugin.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp?ref=ab6e54a684f6fcbf9eed989d170905fd889e19cc", "patch": "@@ -65,6 +65,8 @@ set plugin_test_list [list \\\n     { def_plugin.c def-plugin-test.C } \\\n     { ../../gcc.dg/plugin/diagnostic_plugin_test_tree_expression_range.c \\\n \t  diagnostic-test-expressions-1.C } \\\n+    { ../../gcc.dg/plugin/diagnostic_plugin_test_inlining.c \\\n+\t  diagnostic-test-inlining-1.C } \\\n     { show_template_tree_color_plugin.c \\\n     \t  show-template-tree-color.C \\\n     \t  show-template-tree-color-no-elide-type.C } \\"}, {"sha": "a24b7f890db4a52ca3c1d35238bb55e43a41b1d9", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-inlining-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-1.c?ref=ab6e54a684f6fcbf9eed989d170905fd889e19cc", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-attributes -fdiagnostics-show-caret\" } */\n+\n+extern void __emit_warning (const char *message);\n+\n+__attribute__((always_inline))\n+static void foo (void)\n+{\n+  __emit_warning (\"message\");\n+}\n+\n+__attribute__((always_inline))\n+static void bar (void)\n+{\n+  foo ();\n+}\n+\n+int main()\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* Verify that the diagnostic subsytem describes the chain of inlining\n+   when reporting the warning.  */\n+\n+/* { dg-regexp \"In function 'foo',\" \"\" } */\n+/* { dg-regexp \"    inlined from 'bar' at .+/diagnostic-test-inlining-1.c:15:3,\" \"\" } */\n+/* { dg-regexp \"    inlined from 'main' at .+/diagnostic-test-inlining-1.c:20:3:\" \"\" } */\n+/* { dg-warning \"3: message\" \"\" { target *-*-* } 9 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_warning (\"message\");\n+   ^~~~~~~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "52e482575a9667a82755f597e4da93d2889154b7", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-inlining-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-2.c?ref=ab6e54a684f6fcbf9eed989d170905fd889e19cc", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-attributes -fdiagnostics-show-caret\" } */\n+\n+extern void __emit_warning (const char *message);\n+\n+#define INNER_WARNING(MSG) __emit_warning (MSG)\n+\n+#define OUTER_WARNING(MSG) INNER_WARNING (MSG)\n+\n+__attribute__((always_inline))\n+static void foo (void)\n+{\n+  OUTER_WARNING (\"message\");\n+}\n+\n+__attribute__((always_inline))\n+static void bar (void)\n+{\n+  foo ();\n+}\n+\n+int main()\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* Verify that the diagnostic subsytem describes both the chains of\n+   inlining and of macro expansion when reporting the warning.  */\n+\n+/* { dg-regexp \"In function 'foo',\" \"\" } */\n+/* { dg-regexp \"    inlined from 'bar' at .+/diagnostic-test-inlining-2.c:19:3,\" \"\" } */\n+/* { dg-regexp \"    inlined from 'main' at .+/diagnostic-test-inlining-2.c:24:3:\" \"\" } */\n+/* { dg-warning \"28: message\" \"\" { target c } 6 } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define INNER_WARNING(MSG) __emit_warning (MSG)\n+                            ^~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-message \"28: in expansion of macro 'INNER_WARNING'\" \"\" { target c } 8 } */\n+/* { dg-begin-multiline-output \"\" }\n+ #define OUTER_WARNING(MSG) INNER_WARNING (MSG)\n+                            ^~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-message \"3: in expansion of macro 'OUTER_WARNING'\" \"\" { target c } 13 } */\n+/* { dg-begin-multiline-output \"\" }\n+   OUTER_WARNING (\"message\");\n+   ^~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "e1a4fca2cb4be73b000b56362aed0c1719f43557", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-inlining-3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-3.c?ref=ab6e54a684f6fcbf9eed989d170905fd889e19cc", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-attributes -fdiagnostics-show-caret -O1\" } */\n+\n+extern void __emit_warning (const char *message);\n+\n+__attribute__((always_inline))\n+static void foo (void)\n+{\n+  __emit_warning (\"message\");\n+}\n+\n+__attribute__((always_inline))\n+static void bar (void)\n+{\n+  foo ();\n+}\n+\n+int main()\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+/* Reproducer for PR tree-optimization/83336: when optimization is\n+   enabled, but debuginfo isn't, the diagnostics subsystem doesn't\n+   report the full inlining chain at a middle-end warning.\n+\n+   This is a copy of diagnostic-test-inlining-1.c, but with -O1.\n+\n+   Ideally the diagnostics subsystem would report:\n+     In function 'foo', inlined from 'bar' at LOC A, inlined from 'main' at LOC B:\n+   but with -O1 it only reports:\n+     In function 'foo', inlined from 'main' at LOC A:\n+\n+   This test case captures this behavior.  */\n+\n+/* { dg-regexp \"In function 'foo',\" \"\" } */\n+/* { dg-regexp \"    inlined from 'main' at .+/diagnostic-test-inlining-3.c:15:3:\" \"\" } */\n+/* { dg-warning \"3: message\" \"\" { target *-*-* } 9 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_warning (\"message\");\n+   ^~~~~~~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "dfb939db17d53a7a0dbe7e0c54b6dcd1b03d1e8f", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-inlining-4.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-inlining-4.c?ref=ab6e54a684f6fcbf9eed989d170905fd889e19cc", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-attributes -fdiagnostics-show-caret\" } */\n+\n+extern void __emit_warning (const char *message);\n+\n+__attribute__((always_inline))\n+static void depth_0 (void)\n+{\n+  __emit_warning (\"message\");\n+}\n+\n+__attribute__((always_inline))\n+static void depth_1 (void)\n+{\n+  depth_0 ();\n+}\n+\n+__attribute__((always_inline))\n+static void depth_2 (void)\n+{\n+  depth_1 ();\n+}\n+\n+__attribute__((always_inline))\n+static void depth_3 (void)\n+{\n+  depth_2 ();\n+}\n+\n+__attribute__((always_inline))\n+static void depth_4 (void)\n+{\n+  depth_3 ();\n+}\n+\n+int main()\n+{\n+  depth_4 ();\n+  return 0;\n+}\n+\n+/* Verify that the diagnostic subsytem describes the chain of inlining\n+   when reporting the warning, for an example showing many levels of\n+   inlining.  */\n+\n+/* { dg-regexp \"In function 'depth_0',\" \"\" } */\n+/* { dg-regexp \"    inlined from 'depth_1' at .+/diagnostic-test-inlining-4.c:15:3,\" \"\" } */\n+/* { dg-regexp \"    inlined from 'depth_2' at .+/diagnostic-test-inlining-4.c:21:3,\" \"\" } */\n+/* { dg-regexp \"    inlined from 'depth_3' at .+/diagnostic-test-inlining-4.c:27:3,\" \"\" } */\n+/* { dg-regexp \"    inlined from 'depth_4' at .+/diagnostic-test-inlining-4.c:33:3,\" \"\" } */\n+/* { dg-regexp \"    inlined from 'main' at .+/diagnostic-test-inlining-4.c:38:3:\" \"\" } */\n+/* { dg-warning \"3: message\" \"\" { target *-*-* } 9 } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_warning (\"message\");\n+   ^~~~~~~~~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "49b78ccf1fc783fe8acef18813dc801d6fd062a6", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_inlining.c", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_inlining.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_inlining.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_inlining.c?ref=ab6e54a684f6fcbf9eed989d170905fd889e19cc", "patch": "@@ -0,0 +1,180 @@\n+/* { dg-options \"-O\" } */\n+\n+#include \"gcc-plugin.h\"\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"toplev.h\"\n+#include \"basic-block.h\"\n+#include \"hash-table.h\"\n+#include \"vec.h\"\n+#include \"ggc.h\"\n+#include \"basic-block.h\"\n+#include \"tree-ssa-alias.h\"\n+#include \"internal-fn.h\"\n+#include \"gimple-fold.h\"\n+#include \"tree-eh.h\"\n+#include \"gimple-expr.h\"\n+#include \"is-a.h\"\n+#include \"gimple.h\"\n+#include \"gimple-iterator.h\"\n+#include \"tree.h\"\n+#include \"tree-pass.h\"\n+#include \"intl.h\"\n+#include \"plugin-version.h\"\n+#include \"c-family/c-common.h\"\n+#include \"diagnostic.h\"\n+#include \"context.h\"\n+#include \"print-tree.h\"\n+#include \"cpplib.h\"\n+#include \"c-family/c-pragma.h\"\n+#include \"substring-locations.h\"\n+\n+int plugin_is_GPL_compatible;\n+\n+/* A custom pass for emitting dummy warnings from the middle-end.  */\n+\n+const pass_data pass_data_test_inlining =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"test_inlining\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  PROP_ssa, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_test_inlining : public gimple_opt_pass\n+{\n+public:\n+  pass_test_inlining(gcc::context *ctxt)\n+    : gimple_opt_pass(pass_data_test_inlining, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  bool gate (function *) { return true; }\n+  virtual unsigned int execute (function *);\n+\n+}; // class pass_test_inlining\n+\n+/* Determine if STMT is a call with NUM_ARGS arguments to a function\n+   named FUNCNAME.\n+   If so, return STMT as a gcall *.  Otherwise return NULL.  */\n+\n+static gcall *\n+check_for_named_call (gimple *stmt,\n+\t\t      const char *funcname, unsigned int num_args)\n+{\n+  gcc_assert (funcname);\n+\n+  gcall *call = dyn_cast <gcall *> (stmt);\n+  if (!call)\n+    return NULL;\n+\n+  tree fndecl = gimple_call_fndecl (call);\n+  if (!fndecl)\n+    return NULL;\n+\n+  if (strcmp (IDENTIFIER_POINTER (DECL_NAME (fndecl)), funcname))\n+    return NULL;\n+\n+  if (gimple_call_num_args (call) != num_args)\n+    {\n+      error_at (stmt->location, \"expected number of args: %i (got %i)\",\n+\t\tnum_args, gimple_call_num_args (call));\n+      return NULL;\n+    }\n+\n+  return call;\n+}\n+\n+/* Emit a warning at LOC.  */\n+\n+static void\n+emit_warning (location_t loc)\n+{\n+  source_range src_range = get_range_from_loc (line_table, loc);\n+  warning_at (loc, 0, \"range %i:%i-%i:%i\",\n+\t      LOCATION_LINE (src_range.m_start),\n+\t      LOCATION_COLUMN (src_range.m_start),\n+\t      LOCATION_LINE (src_range.m_finish),\n+\t      LOCATION_COLUMN (src_range.m_finish));\n+}\n+\n+/* Code for simulating the emission of a warning from the middle-end.\n+   Emit a warning for each call to a function named \"__emit_warning\".  */\n+\n+static void\n+test_inlining (gimple *stmt)\n+{\n+  gcall *call = check_for_named_call (stmt, \"__emit_warning\", 1);\n+  if (!call)\n+    return;\n+\n+  /* We expect an ADDR_EXPR with a STRING_CST inside it for the\n+     initial arg.  */\n+  tree t_addr_string = gimple_call_arg (call, 0);\n+  if (TREE_CODE (t_addr_string) != ADDR_EXPR)\n+    {\n+      error_at (call->location, \"string literal required for arg 1\");\n+      return;\n+    }\n+\n+  tree t_string = TREE_OPERAND (t_addr_string, 0);\n+  if (TREE_CODE (t_string) != STRING_CST)\n+    {\n+      error_at (call->location, \"string literal required for arg 1\");\n+      return;\n+    }\n+\n+  warning_at (call->location, 0, \"%G%s\", call,\n+\t      TREE_STRING_POINTER (t_string));\n+}\n+\n+/* Call test_inlining on every statement within FUN.  */\n+\n+unsigned int\n+pass_test_inlining::execute (function *fun)\n+{\n+  gimple_stmt_iterator gsi;\n+  basic_block bb;\n+\n+  FOR_EACH_BB_FN (bb, fun)\n+    for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+      {\n+\tgimple *stmt = gsi_stmt (gsi);\n+\ttest_inlining (stmt);\n+      }\n+\n+  return 0;\n+}\n+\n+/* Entrypoint for the plugin.  Create and register the custom pass.  */\n+\n+int\n+plugin_init (struct plugin_name_args *plugin_info,\n+\t     struct plugin_gcc_version *version)\n+{\n+  struct register_pass_info pass_info;\n+  const char *plugin_name = plugin_info->base_name;\n+  int argc = plugin_info->argc;\n+  struct plugin_argument *argv = plugin_info->argv;\n+\n+  if (!plugin_default_version_check (version, &gcc_version))\n+    return 1;\n+\n+  pass_info.pass = new pass_test_inlining (g);\n+  pass_info.reference_pass_name = \"*warn_function_noreturn\";\n+  pass_info.ref_pass_instance_number = 1;\n+  pass_info.pos_op = PASS_POS_INSERT_AFTER;\n+  register_callback (plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL,\n+\t\t     &pass_info);\n+\n+  return 0;\n+}"}, {"sha": "81dee2248fe332b46b96b16247d6f9d5626ed5f9", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=ab6e54a684f6fcbf9eed989d170905fd889e19cc", "patch": "@@ -83,6 +83,11 @@ set plugin_test_list [list \\\n \t  diagnostic-test-string-literals-2.c \\\n \t  diagnostic-test-string-literals-3.c \\\n \t  diagnostic-test-string-literals-4.c } \\\n+    { diagnostic_plugin_test_inlining.c \\\n+\t  diagnostic-test-inlining-1.c \\\n+\t  diagnostic-test-inlining-2.c \\\n+\t  diagnostic-test-inlining-3.c \\\n+\t  diagnostic-test-inlining-4.c } \\\n     { location_overflow_plugin.c \\\n \t  location-overflow-test-1.c \\\n \t  location-overflow-test-2.c } \\"}, {"sha": "b771da2cb9a23ea9d065c35bd4420b93d3715053", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab6e54a684f6fcbf9eed989d170905fd889e19cc/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=ab6e54a684f6fcbf9eed989d170905fd889e19cc", "patch": "@@ -28,6 +28,9 @@ proc prune_gcc_output { text } {\n \n     #send_user \"Before:$text\\n\"\n \n+    # Handle any freeform regexps.\n+    set text [handle-dg-regexps $text]\n+\n     regsub -all \"(^|\\n)(\\[^\\n\\]*: )?In ((static member |lambda )?function|member|method|(copy )?constructor|destructor|instantiation|substitution|program|subroutine|block-data)\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*(: )?At (top level|global scope):\\[^\\n\\]*\" $text \"\" text\n     regsub -all \"(^|\\n)\\[^\\n\\]*:   (recursively )?required \\[^\\n\\]*\" $text \"\" text\n@@ -73,9 +76,6 @@ proc prune_gcc_output { text } {\n     # Call into multiline.exp to handle any multiline output directives.\n     set text [handle-multiline-outputs $text]\n \n-    # Handle any freeform regexps.\n-    set text [handle-dg-regexps $text]\n-\n     #send_user \"After:$text\\n\"\n \n     return $text"}]}