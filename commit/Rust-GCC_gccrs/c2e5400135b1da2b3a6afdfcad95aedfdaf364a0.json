{"sha": "c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJlNTQwMDEzNWIxZGEyYjNhNmFmZGZjYWQ5NWFlZGZkYWYzNjRhMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:29:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:29:06Z"}, "message": "[multiple changes]\n\n2014-01-20  Pascal Obry  <obry@adacore.com>\n\n\t* s-win32.ads (FreeLibrary): New import.\n\n2014-01-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_res.adb, sem_cat.adb: Minor reformatting.\n\t* sem_ch11.adb (Analyze_Raise_Statement): Only give warning about\n\tassigning to OUT parameters for the current subprogram scope.\n\t* exp_ch4.adb: Minor reformatting.\n\n2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Process_Transient_Object,\n\tFind_Enclosing_Contexts): If the top-level if-expression that\n\tgenerated the transient object is an actual in a call, the proper\n\tHook_Context is a construct enclosing the call.\n\t* einfo.ads: Indicate that Related_Expression is used to link a\n\tloop variable to the container expression over which the loop\n\ttakes place.\n\t(Analyze_Iterator_Specification): Set the Related_Expression of\n\tthe loop variable in a container element iterator.\n\t(Note_Possible_Modification): If the variable is the loop\n\tvariable in a container element iterator, indicate that the\n\tenclosing container is also modified.\n\n2014-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* aspects.adb (Move_Or_Merge_Aspects): Reimplemented.\n\nFrom-SVN: r206824", "tree": {"sha": "2f43273fc9c844875df4798c1e4fe8131b1453a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f43273fc9c844875df4798c1e4fe8131b1453a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/comments", "author": null, "committer": null, "parents": [{"sha": "90b51aaf6383fab0d308a3ae238a45d7a50933b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b51aaf6383fab0d308a3ae238a45d7a50933b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b51aaf6383fab0d308a3ae238a45d7a50933b4"}], "stats": {"total": 177, "additions": 157, "deletions": 20}, "files": [{"sha": "41edf88e47a42b3c9f95d0ca86dd2da08006b1f5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "patch": "@@ -1,3 +1,33 @@\n+2014-01-20  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-win32.ads (FreeLibrary): New import.\n+\n+2014-01-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_res.adb, sem_cat.adb: Minor reformatting.\n+\t* sem_ch11.adb (Analyze_Raise_Statement): Only give warning about\n+\tassigning to OUT parameters for the current subprogram scope.\n+\t* exp_ch4.adb: Minor reformatting.\n+\n+2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Process_Transient_Object,\n+\tFind_Enclosing_Contexts): If the top-level if-expression that\n+\tgenerated the transient object is an actual in a call, the proper\n+\tHook_Context is a construct enclosing the call.\n+\t* einfo.ads: Indicate that Related_Expression is used to link a\n+\tloop variable to the container expression over which the loop\n+\ttakes place.\n+\t(Analyze_Iterator_Specification): Set the Related_Expression of\n+\tthe loop variable in a container element iterator.\n+\t(Note_Possible_Modification): If the variable is the loop\n+\tvariable in a container element iterator, indicate that the\n+\tenclosing container is also modified.\n+\n+2014-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* aspects.adb (Move_Or_Merge_Aspects): Reimplemented.\n+\n 2014-01-20  Robert Dewar  <dewar@adacore.com>\n \n \t* s-taasde.ads, gnat_ugn.texi, s-tadeca.adb, sem_res.adb, s-tadeca.ads:"}, {"sha": "4e173522f5e920209de991c6676f4a3a10d9afe5", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 74, "deletions": 10, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "patch": "@@ -310,22 +310,86 @@ package body Aspects is\n    ---------------------------\n \n    procedure Move_Or_Merge_Aspects (From : Node_Id; To : Node_Id) is\n-   begin\n-      if Has_Aspects (From) then\n+      procedure Relocate_Aspect (Asp : Node_Id);\n+      --  Asp denotes an aspect specification of node From. Relocate the Asp to\n+      --  the aspect specifications of node To (if any).\n \n-         --  Merge the aspects of From into To. Make sure that From has no\n-         --  aspects after the merge takes place.\n+      ---------------------\n+      -- Relocate_Aspect --\n+      ---------------------\n \n+      procedure Relocate_Aspect (Asp : Node_Id) is\n+         Asps : List_Id;\n+\n+      begin\n          if Has_Aspects (To) then\n-            Append_List\n-              (List => Aspect_Specifications (From),\n-               To   => Aspect_Specifications (To));\n-            Remove_Aspects (From);\n+            Asps := Aspect_Specifications (To);\n \n-         --  Otherwise simply move the aspects\n+         --  Create a new aspect specification list for node To\n \n          else\n-            Move_Aspects (From => From, To => To);\n+            Asps := New_List;\n+            Set_Aspect_Specifications (To, Asps);\n+            Set_Has_Aspects (To);\n+         end if;\n+\n+         --  Remove the aspect from node From's aspect specifications and\n+         --  append it to node To.\n+\n+         Remove (Asp);\n+         Append (Asp, Asps);\n+      end Relocate_Aspect;\n+\n+      --  Local variables\n+\n+      Asp      : Node_Id;\n+      Asp_Id   : Aspect_Id;\n+      Next_Asp : Node_Id;\n+\n+   --  Start of processing for Move_Or_Merge_Aspects\n+\n+   begin\n+      if Has_Aspects (From) then\n+         Asp := First (Aspect_Specifications (From));\n+         while Present (Asp) loop\n+\n+            --  Store the next aspect now as a potential relocation will alter\n+            --  the contents of the list.\n+\n+            Next_Asp := Next (Asp);\n+\n+            --  When moving or merging aspects from a subprogram body stub that\n+            --  also acts as a spec, relocate only those aspects that may apply\n+            --  to a body [stub]. Note that a precondition must also be moved\n+            --  to the proper body as the pre/post machinery expects it to be\n+            --  there.\n+\n+            if Nkind (From) = N_Subprogram_Body_Stub\n+              and then No (Corresponding_Spec_Of_Stub (From))\n+            then\n+               Asp_Id := Get_Aspect_Id (Asp);\n+\n+               if Aspect_On_Body_Or_Stub_OK (Asp_Id)\n+                 or else Asp_Id = Aspect_Pre\n+                 or else Asp_Id = Aspect_Precondition\n+               then\n+                  Relocate_Aspect (Asp);\n+               end if;\n+\n+            --  Default case - relocate the aspect to its new owner\n+\n+            else\n+               Relocate_Aspect (Asp);\n+            end if;\n+\n+            Asp := Next_Asp;\n+         end loop;\n+\n+         --  The relocations may have left node From's aspect specifications\n+         --  list empty. If this is the case, simply remove the aspects.\n+\n+         if Is_Empty_List (Aspect_Specifications (From)) then\n+            Remove_Aspects (From);\n          end if;\n       end if;\n    end Move_Or_Merge_Aspects;"}, {"sha": "2f318638e8a2e0c79cd9079d24aed5557e63c56c", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "patch": "@@ -779,7 +779,9 @@ package Aspects is\n    procedure Move_Or_Merge_Aspects (From : Node_Id; To : Node_Id);\n    --  Relocate the aspect specifications of node From to node To. If To has\n    --  aspects, the aspects of From are added to the aspects of To. If From has\n-   --  no aspects, the routine has no effect.\n+   --  no aspects, the routine has no effect. When From denotes a subprogram\n+   --  body stub that also acts as a spec, the only aspects relocated to node\n+   --  To are those from table Aspect_On_Body_Or_Stub_OK and preconditions.\n \n    function Permits_Aspect_Specifications (N : Node_Id) return Boolean;\n    --  Returns True if the node N is a declaration node that permits aspect"}, {"sha": "548090e83518721c793458a99592d8b82af976fa", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "patch": "@@ -3578,10 +3578,14 @@ package Einfo is\n --       only for type-related error messages.\n \n --    Related_Expression (Node24)\n---       Defined in variables and types. Set only for internally generated\n---       entities, where it may be used to denote the source expression whose\n+--       Defined in variables and types. When Set for internally generated\n+--       entities, it may be used to denote the source expression whose\n --       elaboration created the variable declaration. If set, it is used\n---       for generating clearer messages from CodePeer.\n+--       for generating clearer messages from CodePeer. It is used on source\n+--       entities that are variables in iterator specifications, to provide\n+--       a link to the container that is the domain of iteration. This allows\n+--       for better cross-reference information when the loop modifies elements\n+--       of the container, and suppresses spurious warnings.\n --\n --       Shouldn't it also be used for the same purpose in errout? It seems\n --       odd to have two mechanisms here???"}, {"sha": "16ff6250588b89a8da19bc235dfcf5c28177169d", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "patch": "@@ -12194,7 +12194,8 @@ package body Exp_Ch4 is\n \n             --  The topmost case or if expression is now recovered, but it may\n             --  still not be the correct place to add generated code. Climb to\n-            --  find a parent that is part of a declarative or statement list.\n+            --  find a parent that is part of a declarative or statement list,\n+            --  and is not a list of actuals in a call.\n \n             Par := Top;\n             while Present (Par) loop\n@@ -12203,6 +12204,11 @@ package body Exp_Ch4 is\n                                              N_Discriminant_Association,\n                                              N_Parameter_Association,\n                                              N_Pragma_Argument_Association)\n+                 and then not Nkind_In\n+                                (Parent (Par), N_Function_Call,\n+                                               N_Procedure_Call_Statement,\n+                                               N_Entry_Call_Statement)\n+\n                then\n                   Hook_Context := Par;\n                   goto Hook_Context_Found;"}, {"sha": "6fafd526a439110065b7249dfec14ce9c1296a72", "filename": "gcc/ada/s-win32.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fs-win32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fs-win32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-win32.ads?ref=c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2008-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2008-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -336,4 +336,7 @@ package System.Win32 is\n       nSize      : DWORD) return DWORD;\n    pragma Import (Stdcall, GetModuleFileName, \"GetModuleFileNameA\");\n \n+   function FreeLibrary (hModule : HANDLE) return BOOL;\n+   pragma Import (Stdcall, FreeLibrary, \"FreeLibrary\");\n+\n end System.Win32;"}, {"sha": "69cb626dd067a7f545a1618e9b490851b337add4", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "patch": "@@ -1226,6 +1226,7 @@ package body Sem_Cat is\n                   --  given for the private type.\n \n                   if Relaxed_RM_Semantics then\n+\n                      --  In relaxed mode, do not issue these messages, this\n                      --  is basically similar to the GNAT_Mode test below.\n "}, {"sha": "f0898bfa0df4c2cd66cc9b051374a2afe9df7ee3", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "patch": "@@ -37,6 +37,7 @@ with Restrict; use Restrict;\n with Rident;   use Rident;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n+with Sem_Aux;  use Sem_Aux;\n with Sem_Ch5;  use Sem_Ch5;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Ch13; use Sem_Ch13;\n@@ -533,6 +534,13 @@ package body Sem_Ch11 is\n                if Is_Scalar_Type (Etype (L))\n                  and then Is_Entity_Name (L)\n                  and then Is_Formal (Entity (L))\n+\n+                 --  Do this only for parameters to the current subprogram.\n+                 --  This avoids some false positives for the nested case.\n+\n+                 and then Nearest_Dynamic_Scope (Current_Scope) =\n+                            Scope (Entity (L))\n+\n                then\n                   --  Don't give warning if we are covered by an exception\n                   --  handler, since this may result in false positives, since"}, {"sha": "3b0d1369abd761c1266499401aee4b7ead03a634", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "patch": "@@ -1695,6 +1695,13 @@ package body Sem_Ch5 is\n \n       Set_Ekind (Def_Id, E_Variable);\n \n+      --  Provide a link between the iterator variable and the container,\n+      --  for subequent use in cross-reference and modification information.\n+\n+      if Of_Present (N) then\n+         Set_Related_Expression (Def_Id, Iter_Name);\n+      end if;\n+\n       --  If the domain of iteration is an expression, create a declaration for\n       --  it, so that finalization actions are introduced outside of the loop.\n       --  The declaration must be a renaming because the body of the loop may"}, {"sha": "07a3c4a49805c908bf88f7c5218f7f4e0497f9f0", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "patch": "@@ -2178,17 +2178,17 @@ package body Sem_Res is\n \n                      elsif not Comes_From_Predefined_Lib_Unit (Seen) then\n \n-                        --  Previous interpretation must be discarded.\n+                        --  Previous interpretation must be discarded\n \n-                        I1    := I;\n-                        Seen  := It.Nam;\n+                        I1 := I;\n+                        Seen := It.Nam;\n                         Expr_Type := It.Typ;\n                         Set_Entity (N, Seen);\n                         goto Continue;\n                      end if;\n                   end if;\n \n-                  --  Otherwise apply further disambiguation steps.\n+                  --  Otherwise apply further disambiguation steps\n \n                   Error_Msg_Sloc := Sloc (Seen);\n                   It1 := Disambiguate (N, I1, I, Typ);"}, {"sha": "e9722a3f076a6a0177be149036d43e5ad3cbce42", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e5400135b1da2b3a6afdfcad95aedfdaf364a0/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c2e5400135b1da2b3a6afdfcad95aedfdaf364a0", "patch": "@@ -13074,6 +13074,18 @@ package body Sem_Util is\n                  and then Present (Renamed_Object (Ent))\n                then\n                   Exp := Renamed_Object (Ent);\n+\n+                  --  If the entity is the loop variable in an iteration over\n+                  --  a container, retrieve container expression to indicate\n+                  --  possible modificastion.\n+\n+                  if Present (Related_Expression (Ent))\n+                    and then Nkind (Parent (Related_Expression (Ent))) =\n+                      N_Iterator_Specification\n+                  then\n+                     Exp := Original_Node (Related_Expression (Ent));\n+                  end if;\n+\n                   goto Continue;\n \n                --  The expression may be the renaming of a subcomponent of an"}]}