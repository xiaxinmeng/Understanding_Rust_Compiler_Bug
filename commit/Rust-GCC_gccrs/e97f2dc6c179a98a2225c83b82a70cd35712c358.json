{"sha": "e97f2dc6c179a98a2225c83b82a70cd35712c358", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3ZjJkYzZjMTc5YTk4YTIyMjVjODNiODJhNzBjZDM1NzEyYzM1OA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-14T06:41:00Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-14T06:41:00Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r485", "tree": {"sha": "26aa096029f04cde71ea42933d08b8b84066961e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26aa096029f04cde71ea42933d08b8b84066961e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e97f2dc6c179a98a2225c83b82a70cd35712c358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97f2dc6c179a98a2225c83b82a70cd35712c358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97f2dc6c179a98a2225c83b82a70cd35712c358", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97f2dc6c179a98a2225c83b82a70cd35712c358/comments", "author": null, "committer": null, "parents": [{"sha": "767fcd82fbb33936dee8507556c612d3da30f83f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767fcd82fbb33936dee8507556c612d3da30f83f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767fcd82fbb33936dee8507556c612d3da30f83f"}], "stats": {"total": 67, "additions": 59, "deletions": 8}, "files": [{"sha": "d7aac7277088359815ab4648cc6955a33c148f4a", "filename": "gcc/config/pyr/pyr.h", "status": "modified", "additions": 59, "deletions": 8, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97f2dc6c179a98a2225c83b82a70cd35712c358/gcc%2Fconfig%2Fpyr%2Fpyr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97f2dc6c179a98a2225c83b82a70cd35712c358/gcc%2Fconfig%2Fpyr%2Fpyr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpyr%2Fpyr.h?ref=e97f2dc6c179a98a2225c83b82a70cd35712c358", "patch": "@@ -145,12 +145,16 @@ extern int target_flags;\n /* Alignment of field after `int : 0' in a structure.  */\n #define EMPTY_FIELD_BOUNDARY 32\n \n+/* Every structure's size must be a multiple of this.  */\n+/* ??? This is a guess.  */\n+#define STRUCTURE_SIZE_BOUNDARY 32\n+\n /* No data type wants to be aligned rounder than this.  */\n #define BIGGEST_ALIGNMENT 32\n \n /* Specified types of bitfields affect alignment of those fields\n    and of the structure as a whole.  */\n-#define PCC_BITFIELD_TYPE_MATTERS\n+#define PCC_BITFIELD_TYPE_MATTERS 1\n \n /* Make strings word-aligned so strcpy from constants will be faster. \n    Pyramid documentation says the best alignment is to align\n@@ -168,9 +172,9 @@ extern int target_flags;\n    && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\\\n    && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n \n-/* Define this if move instructions will actually fail to work\n+/* Set this nonzero if move instructions will actually fail to work\n    when given unaligned data.  */\n-#define STRICT_ALIGNMENT\n+#define STRICT_ALIGNMENT 1\n \f\n /*** Standard register usage.  ***/\n \n@@ -329,6 +333,12 @@ frame n    |            |            |            |\n /* If needed, Pyramid says to use temporary register 12. */\n #define STATIC_CHAIN_REGNUM PYR_TREG(12)\n \n+/* If register windows are used, STATIC_CHAIN_INCOMING_REGNUM\n+   is the register number as seen by the called function, while\n+   STATIC_CHAIN_REGNUM is the register number as seen by the calling\n+   function. */\n+#define STATIC_CHAIN_INCOMING_REGNUM PYR_PREG(12)\n+\n /* Register in which address to store a structure value\n    is passed to a function.\n    On a Pyramid, this is temporary register 0 (TR0).   */\n@@ -547,7 +557,7 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n #define CUMULATIVE_ARGS int\n \n-/* Define the number of registers that can hold paramters.\n+/* Define the number of registers that can hold parameters.\n    This macro is used only in other macro definitions below.   */\n #define NPARM_REGS 12\n \n@@ -694,6 +704,38 @@ extern void* pyr_function_arg ();\n \n #endif /* !FRAME_POINTER_REQUIRED */\n \n+/* the trampoline stuff was taken from convex.h - S.P. */\n+\n+/* A C statement to output, on the stream FILE, assembler code for a\n+   block of data that contains the constant parts of a trampoline.  This\n+   code should not include a label - the label is taken care of\n+   automatically.\n+\tWe use TR12/PR12 for the static chain.\n+\tmovew $<STATIC>,pr12\t# I2R\n+\tjump $<func>\t\t# S2R\n+ */\n+#define TRAMPOLINE_TEMPLATE(FILE) \\\n+{ ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x2100001C));\t\\\n+  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x00000000));\t\\\n+  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x40000000));\t\\\n+  ASM_OUTPUT_INT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x00000000)); }\n+\n+#define TRAMPOLINE_SIZE\t\t16\n+#define TRAMPOLINE_ALIGNMENT\t32\n+\n+/* Emit RTL insns to initialize the variable parts of a trampoline.\n+   FNADDR is an RTX for the address of the function's pure code.\n+   CXT is an RTX for the static chain value for the function.  */\n+\n+#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n+{ emit_move_insn (gen_rtx (MEM, Pmode, plus_constant (TRAMP, 4)), CXT);\t\\\n+  emit_move_insn (gen_rtx (MEM, Pmode, plus_constant (TRAMP, 12)), FNADDR); \\\n+  emit_call_insn (gen_call (gen_rtx (MEM, QImode,\t\t\t\\\n+\t\t\t\t     gen_rtx (SYMBOL_REF, Pmode,\t\\\n+\t\t\t\t\t      \"__enable_execute_stack\")), \\\n+\t\t\t    const0_rtx));\t\t\t\t\\\n+}\n+\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n@@ -728,10 +770,15 @@ extern int current_function_calls_alloca;\n    + current_function_args_size != 0\t\t\t\t\t\\\n    || current_function_calls_alloca)\t\t\t\t\t\\\n \n-/* If the memory address ADDR is relative to the frame pointer,\n-   correct it to be relative to the stack pointer instead.\n-   This is for when we don't use a frame pointer.\n-   ADDR should be a variable name.  */\n+/* Store in the variable DEPTH the initial difference between the\n+   frame pointer reg contents and the stack pointer reg contents,\n+   as of the start of the function body.  This depends on the layout\n+   of the fixed parts of the stack frame and on how registers are saved.\n+\n+   On the Pyramid, FRAME_POINTER_REQUIRED is always 1, so the definition\n+   of this macro doesn't matter.  But it must be defined.  */\n+\n+#define INITIAL_FRAME_POINTER_OFFSET(DEPTH) (DEPTH) = 0;\n \f\n /*** Addressing modes, and classification of registers for them.  ***/\n \n@@ -1003,6 +1050,10 @@ extern int current_function_calls_alloca;\n     return 4;\t\t\t\t\t\t\t\\\n   case CONST_DOUBLE:\t\t\t\t\t\t\\\n     return 6;\n+\n+/* A flag which says to swap the operands of certain insns\n+   when they are output.  */\n+extern int swap_operands;\n \f\n /*** Condition Code Information ***/\n "}]}