{"sha": "da4aae6e16f2755161b148d110edbf8ed8589acc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE0YWFlNmUxNmYyNzU1MTYxYjE0OGQxMTBlZGJmOGVkODU4OWFjYw==", "commit": {"author": {"name": "Michael Meissner", "email": "2019-02-12  Michael Meissner  meissner@linux.ibm.com", "date": "2020-04-25T06:43:10Z"}, "committer": {"name": "Michael Meissner", "email": "2019-02-12  Michael Meissner  meissner@linux.ibm.com", "date": "2020-04-25T06:43:10Z"}, "message": "Turn on -mpcrel by default for -mcpu=future\n\n2020-04-25  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/linux64.h (PCREL_SUPPORTED_BY_OS): Define to\n\tenable PC-relative addressing for -mcpu=future.\n\t* config/rs6000/rs6000-cpus.def (ISA_FUTURE_MASKS_SERVER): Move\n\tafter OTHER_FUTURE_MASKS.  Use OTHER_FUTURE_MASKS.\n\t* config/rs6000/rs6000.c (PCREL_SUPPORTED_BY_OS): If not defined,\n\tsuppress PC-relative addressing.\n\t(rs6000_option_override_internal): Split up error messages\n\tchecking for -mprefixed and -mpcrel.  Enable -mpcrel if the target\n\tsystem supports it.", "tree": {"sha": "79f3974cc50dba7ad4fb082d3b21d80225f5ee3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79f3974cc50dba7ad4fb082d3b21d80225f5ee3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da4aae6e16f2755161b148d110edbf8ed8589acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4aae6e16f2755161b148d110edbf8ed8589acc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da4aae6e16f2755161b148d110edbf8ed8589acc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4aae6e16f2755161b148d110edbf8ed8589acc/comments", "author": null, "committer": null, "parents": [{"sha": "352811870d7d7edcca109ef50822e26ca7ef2b36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/352811870d7d7edcca109ef50822e26ca7ef2b36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/352811870d7d7edcca109ef50822e26ca7ef2b36"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "3d91fcd1cadb6b229ba1fa29d3833d6f2ab3f317", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4aae6e16f2755161b148d110edbf8ed8589acc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4aae6e16f2755161b148d110edbf8ed8589acc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da4aae6e16f2755161b148d110edbf8ed8589acc", "patch": "@@ -1,3 +1,15 @@\n+2020-04-25  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/linux64.h (PCREL_SUPPORTED_BY_OS): Define to\n+\tenable PC-relative addressing for -mcpu=future.\n+\t* config/rs6000/rs6000-cpus.def (ISA_FUTURE_MASKS_SERVER): Move\n+\tafter OTHER_FUTURE_MASKS.  Use OTHER_FUTURE_MASKS.\n+\t* config/rs6000/rs6000.c (PCREL_SUPPORTED_BY_OS): If not defined,\n+\tsuppress PC-relative addressing.\n+\t(rs6000_option_override_internal): Split up error messages\n+\tchecking for -mprefixed and -mpcrel.  Enable -mpcrel if the target\n+\tsystem supports it.\n+\n 2020-04-25  Jakub Jelinek  <jakub@redhat.com>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "34776c8421e5560460fdbd876b9ad6104ccf3759", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4aae6e16f2755161b148d110edbf8ed8589acc/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4aae6e16f2755161b148d110edbf8ed8589acc/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=da4aae6e16f2755161b148d110edbf8ed8589acc", "patch": "@@ -640,3 +640,10 @@ extern int dot_symbols;\n    enabling the __float128 keyword.  */\n #undef\tTARGET_FLOAT128_ENABLE_TYPE\n #define TARGET_FLOAT128_ENABLE_TYPE 1\n+\n+/* Enable using prefixed PC-relative addressing on the 'future' machine if the\n+   ABI supports it.  The ELF v2 ABI only supports PC-relative relocations for\n+   the medium code model.  */\n+#define PCREL_SUPPORTED_BY_OS\t(TARGET_FUTURE && TARGET_PREFIXED\t\\\n+\t\t\t\t && ELFv2_ABI_CHECK\t\t\t\\\n+\t\t\t\t && TARGET_CMODEL == CMODEL_MEDIUM)"}, {"sha": "83362e05b10c9e367ace7f592d4521937be94d10", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4aae6e16f2755161b148d110edbf8ed8589acc/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4aae6e16f2755161b148d110edbf8ed8589acc/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=da4aae6e16f2755161b148d110edbf8ed8589acc", "patch": "@@ -75,16 +75,15 @@\n \t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_P9_VECTOR)\n \n-/* Support for a future processor's features.  Do not enable -mpcrel until it\n-   is fully functional.  */\n-#define ISA_FUTURE_MASKS_SERVER\t(ISA_3_0_MASKS_SERVER\t\t\t\\\n-\t\t\t\t | OPTION_MASK_FUTURE\t\t\t\\\n-\t\t\t\t | OPTION_MASK_PREFIXED)\n-\n /* Flags that need to be turned off if -mno-future.  */\n #define OTHER_FUTURE_MASKS\t(OPTION_MASK_PCREL\t\t\t\\\n \t\t\t\t | OPTION_MASK_PREFIXED)\n \n+/* Support for a future processor's features.  */\n+#define ISA_FUTURE_MASKS_SERVER\t(ISA_3_0_MASKS_SERVER\t\t\t\\\n+\t\t\t\t | OPTION_MASK_FUTURE\t\t\t\\\n+\t\t\t\t | OTHER_FUTURE_MASKS)\n+\n /* Flags that need to be turned off if -mno-power9-vector.  */\n #define OTHER_P9_VECTOR_MASKS\t(OPTION_MASK_FLOAT128_HW\t\t\\\n \t\t\t\t | OPTION_MASK_P9_MINMAX)"}, {"sha": "aa632ea8f4a0f4a32f0f61b8c8f69981422c076c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4aae6e16f2755161b148d110edbf8ed8589acc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4aae6e16f2755161b148d110edbf8ed8589acc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=da4aae6e16f2755161b148d110edbf8ed8589acc", "patch": "@@ -98,6 +98,11 @@\n #endif\n #endif\n \n+/* Don't enable PC-relative addressing if the target does not support it.  */\n+#ifndef PCREL_SUPPORTED_BY_OS\n+#define PCREL_SUPPORTED_BY_OS\t0\n+#endif\n+\n /* Support targetm.vectorize.builtin_mask_for_load.  */\n tree altivec_builtin_mask_for_load;\n \n@@ -4024,15 +4029,17 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_isa_flags &= ~OPTION_MASK_FLOAT128_HW;\n     }\n \n-  /* -mprefixed (and hence -mpcrel) requires -mcpu=future.  */\n-  if (TARGET_PREFIXED && !TARGET_FUTURE)\n+  /* Enable -mprefixed by default on 'future' systems.  */\n+  if (TARGET_FUTURE && (rs6000_isa_flags_explicit & OPTION_MASK_PREFIXED) == 0)\n+    rs6000_isa_flags |= OPTION_MASK_PREFIXED;\n+\n+  /* -mprefixed requires -mcpu=future.  */\n+  else if (TARGET_PREFIXED && !TARGET_FUTURE)\n     {\n-      if ((rs6000_isa_flags_explicit & OPTION_MASK_PCREL) != 0)\n-\terror (\"%qs requires %qs\", \"-mpcrel\", \"-mcpu=future\");\n-      else if ((rs6000_isa_flags_explicit & OPTION_MASK_PREFIXED) != 0)\n+      if ((rs6000_isa_flags_explicit & OPTION_MASK_PREFIXED) != 0)\n \terror (\"%qs requires %qs\", \"-mprefixed\", \"-mcpu=future\");\n \n-      rs6000_isa_flags &= ~(OPTION_MASK_PCREL | OPTION_MASK_PREFIXED);\n+      rs6000_isa_flags &= ~OPTION_MASK_PREFIXED;\n     }\n \n   /* -mpcrel requires prefixed load/store addressing.  */\n@@ -4175,9 +4182,16 @@ rs6000_option_override_internal (bool global_init_p)\n   SUB3TARGET_OVERRIDE_OPTIONS;\n #endif\n \n+  /* If the ABI has support for PC-relative relocations, enable it by default.\n+     This test depends on the sub-target tests above setting the code model to\n+     medium for ELF v2 systems.  */\n+  if (PCREL_SUPPORTED_BY_OS\n+      && (rs6000_isa_flags_explicit & OPTION_MASK_PCREL) == 0)\n+    rs6000_isa_flags |= OPTION_MASK_PCREL;\n+\n   /* -mpcrel requires -mcmodel=medium, but we can't check TARGET_CMODEL until\n       after the subtarget override options are done.  */\n-  if (TARGET_PCREL && TARGET_CMODEL != CMODEL_MEDIUM)\n+  else if (TARGET_PCREL && TARGET_CMODEL != CMODEL_MEDIUM)\n     {\n       if ((rs6000_isa_flags_explicit & OPTION_MASK_PCREL) != 0)\n \terror (\"%qs requires %qs\", \"-mpcrel\", \"-mcmodel=medium\");"}]}