{"sha": "40a5081072f2069447b3d3267f8b00a16433ab91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBhNTA4MTA3MmYyMDY5NDQ3YjNkMzI2N2Y4YjAwYTE2NDMzYWI5MQ==", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-05-17T18:04:57Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:13Z"}, "message": "Add in a toplevel pass to grab global declarations for analysis pass", "tree": {"sha": "957ca521a820928142840d561696411589dfa474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/957ca521a820928142840d561696411589dfa474"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40a5081072f2069447b3d3267f8b00a16433ab91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40a5081072f2069447b3d3267f8b00a16433ab91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40a5081072f2069447b3d3267f8b00a16433ab91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40a5081072f2069447b3d3267f8b00a16433ab91/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b681de371e99a871be22603a24291a716d8f268d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b681de371e99a871be22603a24291a716d8f268d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b681de371e99a871be22603a24291a716d8f268d"}], "stats": {"total": 825, "additions": 817, "deletions": 8}, "files": [{"sha": "d954e9772a3eb1d38199796e01f4ecb6da27c92a", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=40a5081072f2069447b3d3267f8b00a16433ab91", "patch": "@@ -70,6 +70,7 @@ GRS_OBJS = \\\n     rust/rust-ast-full-test.o \\\n     rust/rust-session-manager.o \\\n     rust/rust-resolution.o \\\n+    rust/rust-scan.o \\\n     rust/rust-compile.o \\\n     $(END)\n # removed object files from here "}, {"sha": "731801a03c3786a8fcfd5a7959d4f410bf2ca83d", "filename": "gcc/rust/analysis/rust-resolution.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.cc?ref=40a5081072f2069447b3d3267f8b00a16433ab91", "patch": "@@ -19,7 +19,8 @@\n namespace Rust {\n namespace Analysis {\n \n-TypeResolution::TypeResolution (AST::Crate &crate) : crate (crate)\n+TypeResolution::TypeResolution (AST::Crate &crate, TopLevelScan &toplevel)\n+  : crate (crate), toplevel (toplevel)\n {\n   typeScope.Push ();\n   scope.Push ();\n@@ -50,9 +51,9 @@ TypeResolution::~TypeResolution ()\n }\n \n bool\n-TypeResolution::ResolveNamesAndTypes (AST::Crate &crate)\n+TypeResolution::ResolveNamesAndTypes (AST::Crate &crate, TopLevelScan &toplevel)\n {\n-  TypeResolution resolver (crate);\n+  TypeResolution resolver (crate, toplevel);\n   return resolver.go ();\n }\n \n@@ -315,7 +316,11 @@ TypeResolution::visit (AST::AssignmentExpr &expr)\n   // scope will require knowledge of the type\n \n   // do the lhsType and the rhsType match\n-  typesAreCompatible (lhsType, rhsType, expr.right_expr->get_locus_slow ());\n+  if (!typesAreCompatible (lhsType, rhsType,\n+\t\t\t   expr.right_expr->get_locus_slow ()))\n+    return;\n+\n+  // is the lhs mutable?\n }\n \n void"}, {"sha": "44b5db528c57a2a6bc7f5781986bf0b83151dc02", "filename": "gcc/rust/analysis/rust-resolution.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2Fanalysis%2Frust-resolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2Fanalysis%2Frust-resolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.h?ref=40a5081072f2069447b3d3267f8b00a16433ab91", "patch": "@@ -3,6 +3,7 @@\n #include \"rust-system.h\"\n #include \"rust-ast-full.h\"\n #include \"rust-ast-visitor.h\"\n+#include \"rust-scan.h\"\n #include \"scope.h\"\n \n namespace Rust {\n@@ -11,7 +12,7 @@ namespace Analysis {\n class TypeResolution : public AST::ASTVisitor\n {\n public:\n-  static bool ResolveNamesAndTypes (AST::Crate &crate);\n+  static bool ResolveNamesAndTypes (AST::Crate &crate, TopLevelScan &toplevel);\n \n   ~TypeResolution ();\n \n@@ -221,7 +222,7 @@ class TypeResolution : public AST::ASTVisitor\n   virtual void visit (AST::BareFunctionType &type);\n \n private:\n-  TypeResolution (AST::Crate &crate);\n+  TypeResolution (AST::Crate &crate, TopLevelScan &toplevel);\n \n   bool go ();\n \n@@ -230,6 +231,7 @@ class TypeResolution : public AST::ASTVisitor\n   Scope<AST::Type *> scope;\n   Scope<AST::Type *> typeScope;\n   AST::Crate &crate;\n+  TopLevelScan &toplevel;\n \n   std::vector<AST::IdentifierPattern> letPatternBuffer;\n   std::vector<AST::Type *> typeBuffer;"}, {"sha": "d579f0dfa07558d20df66d6358f07a03b58ad515", "filename": "gcc/rust/analysis/rust-scan.cc", "status": "added", "additions": 571, "deletions": 0, "changes": 571, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2Fanalysis%2Frust-scan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2Fanalysis%2Frust-scan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-scan.cc?ref=40a5081072f2069447b3d3267f8b00a16433ab91", "patch": "@@ -0,0 +1,571 @@\n+#include \"rust-scan.h\"\n+#include \"rust-diagnostics.h\"\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+TopLevelScan::TopLevelScan (AST::Crate &crate) : crate (crate)\n+{\n+  for (auto &item : crate.items)\n+    item->accept_vis (*this);\n+}\n+\n+TopLevelScan::~TopLevelScan () {}\n+\n+void\n+TopLevelScan::visit (AST::Token &tok)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::DelimTokenTree &delim_tok_tree)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::AttrInputMetaItemContainer &input)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::IdentifierExpr &ident_expr)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::Lifetime &lifetime)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::LifetimeParam &lifetime_param)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::MacroInvocationSemi &macro)\n+{}\n+\n+// rust-path.h\n+void\n+TopLevelScan::visit (AST::PathInExpression &path)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::TypePathSegment &segment)\n+{}\n+void\n+TopLevelScan::visit (AST::TypePathSegmentGeneric &segment)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::TypePathSegmentFunction &segment)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::TypePath &path)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::QualifiedPathInExpression &path)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::QualifiedPathInType &path)\n+{}\n+\n+// rust-expr.h\n+void\n+TopLevelScan::visit (AST::LiteralExpr &expr)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::AttrInputLiteral &attr_input)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::MetaItemLitExpr &meta_item)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::MetaItemPathLit &meta_item)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::BorrowExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::DereferenceExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::ErrorPropagationExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::NegationExpr &expr)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::ArithmeticOrLogicalExpr &expr)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::ComparisonExpr &expr)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::LazyBooleanExpr &expr)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::TypeCastExpr &expr)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::AssignmentExpr &expr)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::CompoundAssignmentExpr &expr)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::GroupedExpr &expr)\n+{}\n+// void TopLevelScan::visit(ArrayElems& elems) {}\n+void\n+TopLevelScan::visit (AST::ArrayElemsValues &elems)\n+{}\n+void\n+TopLevelScan::visit (AST::ArrayElemsCopied &elems)\n+{}\n+void\n+TopLevelScan::visit (AST::ArrayExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::ArrayIndexExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::TupleExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::TupleIndexExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::StructExprStruct &expr)\n+{}\n+// void TopLevelScan::visit(StructExprField& field) {}\n+void\n+TopLevelScan::visit (AST::StructExprFieldIdentifier &field)\n+{}\n+void\n+TopLevelScan::visit (AST::StructExprFieldIdentifierValue &field)\n+{}\n+void\n+TopLevelScan::visit (AST::StructExprFieldIndexValue &field)\n+{}\n+void\n+TopLevelScan::visit (AST::StructExprStructFields &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::StructExprStructBase &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::StructExprTuple &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::StructExprUnit &expr)\n+{}\n+// void TopLevelScan::visit(EnumExprField& field) {}\n+void\n+TopLevelScan::visit (AST::EnumExprFieldIdentifier &field)\n+{}\n+void\n+TopLevelScan::visit (AST::EnumExprFieldIdentifierValue &field)\n+{}\n+void\n+TopLevelScan::visit (AST::EnumExprFieldIndexValue &field)\n+{}\n+void\n+TopLevelScan::visit (AST::EnumExprStruct &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::EnumExprTuple &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::EnumExprFieldless &expr)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::CallExpr &expr)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::MethodCallExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::FieldAccessExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::ClosureExprInner &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::BlockExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::ClosureExprInnerTyped &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::ContinueExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::BreakExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::RangeFromToExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::RangeFromExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::RangeToExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::RangeFullExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::RangeFromToInclExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::RangeToInclExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::ReturnExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::UnsafeBlockExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::LoopExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::WhileLoopExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::WhileLetLoopExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::ForLoopExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::IfExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::IfExprConseqElse &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::IfExprConseqIf &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::IfExprConseqIfLet &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::IfLetExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::IfLetExprConseqElse &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::IfLetExprConseqIf &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::IfLetExprConseqIfLet &expr)\n+{}\n+// void TopLevelScan::visit(MatchCase& match_case) {}\n+void\n+TopLevelScan::visit (AST::MatchCaseBlockExpr &match_case)\n+{}\n+void\n+TopLevelScan::visit (AST::MatchCaseExpr &match_case)\n+{}\n+void\n+TopLevelScan::visit (AST::MatchExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::AwaitExpr &expr)\n+{}\n+void\n+TopLevelScan::visit (AST::AsyncBlockExpr &expr)\n+{}\n+\n+// rust-item.h\n+void\n+TopLevelScan::visit (AST::TypeParam &param)\n+{}\n+// void TopLevelScan::visit(WhereClauseItem& item) {}\n+void\n+TopLevelScan::visit (AST::LifetimeWhereClauseItem &item)\n+{}\n+void\n+TopLevelScan::visit (AST::TypeBoundWhereClauseItem &item)\n+{}\n+void\n+TopLevelScan::visit (AST::Method &method)\n+{}\n+void\n+TopLevelScan::visit (AST::ModuleBodied &module)\n+{}\n+void\n+TopLevelScan::visit (AST::ModuleNoBody &module)\n+{}\n+void\n+TopLevelScan::visit (AST::ExternCrate &crate)\n+{}\n+// void TopLevelScan::visit(UseTree& use_tree) {}\n+void\n+TopLevelScan::visit (AST::UseTreeGlob &use_tree)\n+{}\n+void\n+TopLevelScan::visit (AST::UseTreeList &use_tree)\n+{}\n+void\n+TopLevelScan::visit (AST::UseTreeRebind &use_tree)\n+{}\n+void\n+TopLevelScan::visit (AST::UseDeclaration &use_decl)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::Function &function)\n+{\n+  functions[function.function_name] = &function;\n+}\n+\n+void\n+TopLevelScan::visit (AST::TypeAlias &type_alias)\n+{}\n+void\n+TopLevelScan::visit (AST::StructStruct &struct_item)\n+{}\n+void\n+TopLevelScan::visit (AST::TupleStruct &tuple_struct)\n+{}\n+void\n+TopLevelScan::visit (AST::EnumItem &item)\n+{}\n+void\n+TopLevelScan::visit (AST::EnumItemTuple &item)\n+{}\n+void\n+TopLevelScan::visit (AST::EnumItemStruct &item)\n+{}\n+void\n+TopLevelScan::visit (AST::EnumItemDiscriminant &item)\n+{}\n+void\n+TopLevelScan::visit (AST::Enum &enum_item)\n+{}\n+void\n+TopLevelScan::visit (AST::Union &union_item)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::ConstantItem &const_item)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::StaticItem &static_item)\n+{}\n+void\n+TopLevelScan::visit (AST::TraitItemFunc &item)\n+{}\n+void\n+TopLevelScan::visit (AST::TraitItemMethod &item)\n+{}\n+void\n+TopLevelScan::visit (AST::TraitItemConst &item)\n+{}\n+void\n+TopLevelScan::visit (AST::TraitItemType &item)\n+{}\n+void\n+TopLevelScan::visit (AST::Trait &trait)\n+{}\n+void\n+TopLevelScan::visit (AST::InherentImpl &impl)\n+{}\n+void\n+TopLevelScan::visit (AST::TraitImpl &impl)\n+{}\n+// void TopLevelScan::visit(ExternalItem& item) {}\n+void\n+TopLevelScan::visit (AST::ExternalStaticItem &item)\n+{}\n+void\n+TopLevelScan::visit (AST::ExternalFunctionItem &item)\n+{}\n+void\n+TopLevelScan::visit (AST::ExternBlock &block)\n+{}\n+\n+// rust-macro.h\n+void\n+TopLevelScan::visit (AST::MacroMatchFragment &match)\n+{}\n+void\n+TopLevelScan::visit (AST::MacroMatchRepetition &match)\n+{}\n+void\n+TopLevelScan::visit (AST::MacroMatcher &matcher)\n+{}\n+void\n+TopLevelScan::visit (AST::MacroRulesDefinition &rules_def)\n+{}\n+void\n+TopLevelScan::visit (AST::MacroInvocation &macro_invoc)\n+{}\n+void\n+TopLevelScan::visit (AST::MetaItemPath &meta_item)\n+{}\n+void\n+TopLevelScan::visit (AST::MetaItemSeq &meta_item)\n+{}\n+void\n+TopLevelScan::visit (AST::MetaWord &meta_item)\n+{}\n+void\n+TopLevelScan::visit (AST::MetaNameValueStr &meta_item)\n+{}\n+void\n+TopLevelScan::visit (AST::MetaListPaths &meta_item)\n+{}\n+void\n+TopLevelScan::visit (AST::MetaListNameValueStr &meta_item)\n+{}\n+\n+// rust-pattern.h\n+void\n+TopLevelScan::visit (AST::LiteralPattern &pattern)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::IdentifierPattern &pattern)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::WildcardPattern &pattern)\n+{}\n+// void TopLevelScan::visit(RangePatternBound& bound) {}\n+void\n+TopLevelScan::visit (AST::RangePatternBoundLiteral &bound)\n+{}\n+void\n+TopLevelScan::visit (AST::RangePatternBoundPath &bound)\n+{}\n+void\n+TopLevelScan::visit (AST::RangePatternBoundQualPath &bound)\n+{}\n+void\n+TopLevelScan::visit (AST::RangePattern &pattern)\n+{}\n+void\n+TopLevelScan::visit (AST::ReferencePattern &pattern)\n+{}\n+// void TopLevelScan::visit(StructPatternField& field) {}\n+void\n+TopLevelScan::visit (AST::StructPatternFieldTuplePat &field)\n+{}\n+void\n+TopLevelScan::visit (AST::StructPatternFieldIdentPat &field)\n+{}\n+void\n+TopLevelScan::visit (AST::StructPatternFieldIdent &field)\n+{}\n+void\n+TopLevelScan::visit (AST::StructPattern &pattern)\n+{}\n+// void TopLevelScan::visit(TupleStructItems& tuple_items) {}\n+void\n+TopLevelScan::visit (AST::TupleStructItemsNoRange &tuple_items)\n+{}\n+void\n+TopLevelScan::visit (AST::TupleStructItemsRange &tuple_items)\n+{}\n+void\n+TopLevelScan::visit (AST::TupleStructPattern &pattern)\n+{}\n+// void TopLevelScan::visit(TuplePatternItems& tuple_items) {}\n+void\n+TopLevelScan::visit (AST::TuplePatternItemsMultiple &tuple_items)\n+{}\n+void\n+TopLevelScan::visit (AST::TuplePatternItemsRanged &tuple_items)\n+{}\n+void\n+TopLevelScan::visit (AST::TuplePattern &pattern)\n+{}\n+void\n+TopLevelScan::visit (AST::GroupedPattern &pattern)\n+{}\n+void\n+TopLevelScan::visit (AST::SlicePattern &pattern)\n+{}\n+\n+// rust-stmt.h\n+void\n+TopLevelScan::visit (AST::EmptyStmt &stmt)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::LetStmt &stmt)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::ExprStmtWithoutBlock &stmt)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::ExprStmtWithBlock &stmt)\n+{}\n+\n+// rust-type.h\n+void\n+TopLevelScan::visit (AST::TraitBound &bound)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::ImplTraitType &type)\n+{}\n+\n+void\n+TopLevelScan::visit (AST::TraitObjectType &type)\n+{}\n+void\n+TopLevelScan::visit (AST::ParenthesisedType &type)\n+{}\n+void\n+TopLevelScan::visit (AST::ImplTraitTypeOneBound &type)\n+{}\n+void\n+TopLevelScan::visit (AST::TraitObjectTypeOneBound &type)\n+{}\n+void\n+TopLevelScan::visit (AST::TupleType &type)\n+{}\n+void\n+TopLevelScan::visit (AST::NeverType &type)\n+{}\n+void\n+TopLevelScan::visit (AST::RawPointerType &type)\n+{}\n+void\n+TopLevelScan::visit (AST::ReferenceType &type)\n+{}\n+void\n+TopLevelScan::visit (AST::ArrayType &type)\n+{}\n+void\n+TopLevelScan::visit (AST::SliceType &type)\n+{}\n+void\n+TopLevelScan::visit (AST::InferredType &type)\n+{}\n+void\n+TopLevelScan::visit (AST::BareFunctionType &type)\n+{}\n+\n+} // namespace Analysis\n+} // namespace Rust"}, {"sha": "ccd41fed8dd0433bf18b6a090bcf897c0807c32e", "filename": "gcc/rust/analysis/rust-scan.h", "status": "added", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2Fanalysis%2Frust-scan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2Fanalysis%2Frust-scan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-scan.h?ref=40a5081072f2069447b3d3267f8b00a16433ab91", "patch": "@@ -0,0 +1,229 @@\n+#pragma once\n+\n+#include \"rust-system.h\"\n+#include \"rust-ast-full.h\"\n+#include \"rust-ast-visitor.h\"\n+#include \"scope.h\"\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+class TopLevelScan : public AST::ASTVisitor\n+{\n+public:\n+  TopLevelScan (AST::Crate &crate);\n+\n+  ~TopLevelScan ();\n+\n+  // visitor impl\n+  // rust-ast.h\n+  // virtual void visit(AttrInput& attr_input);\n+  // virtual void visit(TokenTree& token_tree);\n+  // virtual void visit(MacroMatch& macro_match);\n+  virtual void visit (AST::Token &tok);\n+  virtual void visit (AST::DelimTokenTree &delim_tok_tree);\n+  virtual void visit (AST::AttrInputMetaItemContainer &input);\n+  // virtual void visit(MetaItem& meta_item);\n+  // virtual void vsit(Stmt& stmt);\n+  // virtual void visit(Expr& expr);\n+  virtual void visit (AST::IdentifierExpr &ident_expr);\n+  // virtual void visit(Pattern& pattern);\n+  // virtual void visit(Type& type);\n+  // virtual void visit(TypeParamBound& type_param_bound);\n+  virtual void visit (AST::Lifetime &lifetime);\n+  // virtual void visit(GenericParam& generic_param);\n+  virtual void visit (AST::LifetimeParam &lifetime_param);\n+  // virtual void visit(TraitItem& trait_item);\n+  // virtual void visit(InherentImplItem& inherent_impl_item);\n+  // virtual void visit(TraitImplItem& trait_impl_item);\n+  virtual void visit (AST::MacroInvocationSemi &macro);\n+\n+  // rust-path.h\n+  virtual void visit (AST::PathInExpression &path);\n+  virtual void visit (AST::TypePathSegment &segment);\n+  virtual void visit (AST::TypePathSegmentGeneric &segment);\n+  virtual void visit (AST::TypePathSegmentFunction &segment);\n+  virtual void visit (AST::TypePath &path);\n+  virtual void visit (AST::QualifiedPathInExpression &path);\n+  virtual void visit (AST::QualifiedPathInType &path);\n+\n+  // rust-expr.h\n+  virtual void visit (AST::LiteralExpr &expr);\n+  virtual void visit (AST::AttrInputLiteral &attr_input);\n+  virtual void visit (AST::MetaItemLitExpr &meta_item);\n+  virtual void visit (AST::MetaItemPathLit &meta_item);\n+  virtual void visit (AST::BorrowExpr &expr);\n+  virtual void visit (AST::DereferenceExpr &expr);\n+  virtual void visit (AST::ErrorPropagationExpr &expr);\n+  virtual void visit (AST::NegationExpr &expr);\n+  virtual void visit (AST::ArithmeticOrLogicalExpr &expr);\n+  virtual void visit (AST::ComparisonExpr &expr);\n+  virtual void visit (AST::LazyBooleanExpr &expr);\n+  virtual void visit (AST::TypeCastExpr &expr);\n+  virtual void visit (AST::AssignmentExpr &expr);\n+  virtual void visit (AST::CompoundAssignmentExpr &expr);\n+  virtual void visit (AST::GroupedExpr &expr);\n+  // virtual void visit(ArrayElems& elems);\n+  virtual void visit (AST::ArrayElemsValues &elems);\n+  virtual void visit (AST::ArrayElemsCopied &elems);\n+  virtual void visit (AST::ArrayExpr &expr);\n+  virtual void visit (AST::ArrayIndexExpr &expr);\n+  virtual void visit (AST::TupleExpr &expr);\n+  virtual void visit (AST::TupleIndexExpr &expr);\n+  virtual void visit (AST::StructExprStruct &expr);\n+  // virtual void visit(StructExprField& field);\n+  virtual void visit (AST::StructExprFieldIdentifier &field);\n+  virtual void visit (AST::StructExprFieldIdentifierValue &field);\n+  virtual void visit (AST::StructExprFieldIndexValue &field);\n+  virtual void visit (AST::StructExprStructFields &expr);\n+  virtual void visit (AST::StructExprStructBase &expr);\n+  virtual void visit (AST::StructExprTuple &expr);\n+  virtual void visit (AST::StructExprUnit &expr);\n+  // virtual void visit(EnumExprField& field);\n+  virtual void visit (AST::EnumExprFieldIdentifier &field);\n+  virtual void visit (AST::EnumExprFieldIdentifierValue &field);\n+  virtual void visit (AST::EnumExprFieldIndexValue &field);\n+  virtual void visit (AST::EnumExprStruct &expr);\n+  virtual void visit (AST::EnumExprTuple &expr);\n+  virtual void visit (AST::EnumExprFieldless &expr);\n+  virtual void visit (AST::CallExpr &expr);\n+  virtual void visit (AST::MethodCallExpr &expr);\n+  virtual void visit (AST::FieldAccessExpr &expr);\n+  virtual void visit (AST::ClosureExprInner &expr);\n+  virtual void visit (AST::BlockExpr &expr);\n+  virtual void visit (AST::ClosureExprInnerTyped &expr);\n+  virtual void visit (AST::ContinueExpr &expr);\n+  virtual void visit (AST::BreakExpr &expr);\n+  virtual void visit (AST::RangeFromToExpr &expr);\n+  virtual void visit (AST::RangeFromExpr &expr);\n+  virtual void visit (AST::RangeToExpr &expr);\n+  virtual void visit (AST::RangeFullExpr &expr);\n+  virtual void visit (AST::RangeFromToInclExpr &expr);\n+  virtual void visit (AST::RangeToInclExpr &expr);\n+  virtual void visit (AST::ReturnExpr &expr);\n+  virtual void visit (AST::UnsafeBlockExpr &expr);\n+  virtual void visit (AST::LoopExpr &expr);\n+  virtual void visit (AST::WhileLoopExpr &expr);\n+  virtual void visit (AST::WhileLetLoopExpr &expr);\n+  virtual void visit (AST::ForLoopExpr &expr);\n+  virtual void visit (AST::IfExpr &expr);\n+  virtual void visit (AST::IfExprConseqElse &expr);\n+  virtual void visit (AST::IfExprConseqIf &expr);\n+  virtual void visit (AST::IfExprConseqIfLet &expr);\n+  virtual void visit (AST::IfLetExpr &expr);\n+  virtual void visit (AST::IfLetExprConseqElse &expr);\n+  virtual void visit (AST::IfLetExprConseqIf &expr);\n+  virtual void visit (AST::IfLetExprConseqIfLet &expr);\n+  // virtual void visit(MatchCase& match_case);\n+  virtual void visit (AST::MatchCaseBlockExpr &match_case);\n+  virtual void visit (AST::MatchCaseExpr &match_case);\n+  virtual void visit (AST::MatchExpr &expr);\n+  virtual void visit (AST::AwaitExpr &expr);\n+  virtual void visit (AST::AsyncBlockExpr &expr);\n+\n+  // rust-item.h\n+  virtual void visit (AST::TypeParam &param);\n+  // virtual void visit(WhereClauseItem& item);\n+  virtual void visit (AST::LifetimeWhereClauseItem &item);\n+  virtual void visit (AST::TypeBoundWhereClauseItem &item);\n+  virtual void visit (AST::Method &method);\n+  virtual void visit (AST::ModuleBodied &module);\n+  virtual void visit (AST::ModuleNoBody &module);\n+  virtual void visit (AST::ExternCrate &crate);\n+  // virtual void visit(UseTree& use_tree);\n+  virtual void visit (AST::UseTreeGlob &use_tree);\n+  virtual void visit (AST::UseTreeList &use_tree);\n+  virtual void visit (AST::UseTreeRebind &use_tree);\n+  virtual void visit (AST::UseDeclaration &use_decl);\n+  virtual void visit (AST::Function &function);\n+  virtual void visit (AST::TypeAlias &type_alias);\n+  virtual void visit (AST::StructStruct &struct_item);\n+  virtual void visit (AST::TupleStruct &tuple_struct);\n+  virtual void visit (AST::EnumItem &item);\n+  virtual void visit (AST::EnumItemTuple &item);\n+  virtual void visit (AST::EnumItemStruct &item);\n+  virtual void visit (AST::EnumItemDiscriminant &item);\n+  virtual void visit (AST::Enum &enum_item);\n+  virtual void visit (AST::Union &union_item);\n+  virtual void visit (AST::ConstantItem &const_item);\n+  virtual void visit (AST::StaticItem &static_item);\n+  virtual void visit (AST::TraitItemFunc &item);\n+  virtual void visit (AST::TraitItemMethod &item);\n+  virtual void visit (AST::TraitItemConst &item);\n+  virtual void visit (AST::TraitItemType &item);\n+  virtual void visit (AST::Trait &trait);\n+  virtual void visit (AST::InherentImpl &impl);\n+  virtual void visit (AST::TraitImpl &impl);\n+  // virtual void visit(ExternalItem& item);\n+  virtual void visit (AST::ExternalStaticItem &item);\n+  virtual void visit (AST::ExternalFunctionItem &item);\n+  virtual void visit (AST::ExternBlock &block);\n+\n+  // rust-macro.h\n+  virtual void visit (AST::MacroMatchFragment &match);\n+  virtual void visit (AST::MacroMatchRepetition &match);\n+  virtual void visit (AST::MacroMatcher &matcher);\n+  virtual void visit (AST::MacroRulesDefinition &rules_def);\n+  virtual void visit (AST::MacroInvocation &macro_invoc);\n+  virtual void visit (AST::MetaItemPath &meta_item);\n+  virtual void visit (AST::MetaItemSeq &meta_item);\n+  virtual void visit (AST::MetaWord &meta_item);\n+  virtual void visit (AST::MetaNameValueStr &meta_item);\n+  virtual void visit (AST::MetaListPaths &meta_item);\n+  virtual void visit (AST::MetaListNameValueStr &meta_item);\n+\n+  // rust-pattern.h\n+  virtual void visit (AST::LiteralPattern &pattern);\n+  virtual void visit (AST::IdentifierPattern &pattern);\n+  virtual void visit (AST::WildcardPattern &pattern);\n+  // virtual void visit(RangePatternBound& bound);\n+  virtual void visit (AST::RangePatternBoundLiteral &bound);\n+  virtual void visit (AST::RangePatternBoundPath &bound);\n+  virtual void visit (AST::RangePatternBoundQualPath &bound);\n+  virtual void visit (AST::RangePattern &pattern);\n+  virtual void visit (AST::ReferencePattern &pattern);\n+  // virtual void visit(StructPatternField& field);\n+  virtual void visit (AST::StructPatternFieldTuplePat &field);\n+  virtual void visit (AST::StructPatternFieldIdentPat &field);\n+  virtual void visit (AST::StructPatternFieldIdent &field);\n+  virtual void visit (AST::StructPattern &pattern);\n+  // virtual void visit(TupleStructItems& tuple_items);\n+  virtual void visit (AST::TupleStructItemsNoRange &tuple_items);\n+  virtual void visit (AST::TupleStructItemsRange &tuple_items);\n+  virtual void visit (AST::TupleStructPattern &pattern);\n+  // virtual void visit(TuplePatternItems& tuple_items);\n+  virtual void visit (AST::TuplePatternItemsMultiple &tuple_items);\n+  virtual void visit (AST::TuplePatternItemsRanged &tuple_items);\n+  virtual void visit (AST::TuplePattern &pattern);\n+  virtual void visit (AST::GroupedPattern &pattern);\n+  virtual void visit (AST::SlicePattern &pattern);\n+\n+  // rust-stmt.h\n+  virtual void visit (AST::EmptyStmt &stmt);\n+  virtual void visit (AST::LetStmt &stmt);\n+  virtual void visit (AST::ExprStmtWithoutBlock &stmt);\n+  virtual void visit (AST::ExprStmtWithBlock &stmt);\n+\n+  // rust-type.h\n+  virtual void visit (AST::TraitBound &bound);\n+  virtual void visit (AST::ImplTraitType &type);\n+  virtual void visit (AST::TraitObjectType &type);\n+  virtual void visit (AST::ParenthesisedType &type);\n+  virtual void visit (AST::ImplTraitTypeOneBound &type);\n+  virtual void visit (AST::TraitObjectTypeOneBound &type);\n+  virtual void visit (AST::TupleType &type);\n+  virtual void visit (AST::NeverType &type);\n+  virtual void visit (AST::RawPointerType &type);\n+  virtual void visit (AST::ReferenceType &type);\n+  virtual void visit (AST::ArrayType &type);\n+  virtual void visit (AST::SliceType &type);\n+  virtual void visit (AST::InferredType &type);\n+  virtual void visit (AST::BareFunctionType &type);\n+\n+private:\n+  std::map<std::string, AST::Function *> functions;\n+  AST::Crate &crate;\n+};\n+\n+} // namespace Analysis\n+} // namespace Rust"}, {"sha": "19f50252b4d2f7d9bb93549a8d0e00f7eef056f5", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=40a5081072f2069447b3d3267f8b00a16433ab91", "patch": "@@ -361,7 +361,6 @@ Compilation::visit (AST::Function &function)\n       printf (\"FUNC PARAM: %s\\n\", param.as_string ().c_str ());\n       // TODO\n     }\n-\n   if (parameters.size () != function.function_params.size ())\n     {\n       rust_error_at (function.locus,"}, {"sha": "2e0f3e9deb720b07e6a99e814ec2aefc736deedd", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a5081072f2069447b3d3267f8b00a16433ab91/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=40a5081072f2069447b3d3267f8b00a16433ab91", "patch": "@@ -9,6 +9,7 @@\n \n #include \"rust-lex.h\"\n #include \"rust-parse.h\"\n+#include \"rust-scan.h\"\n #include \"rust-resolution.h\"\n #include \"rust-compile.h\"\n \n@@ -752,7 +753,8 @@ void\n Session::name_resolution (AST::Crate &crate)\n {\n   fprintf (stderr, \"started name resolution\\n\");\n-  Analysis::TypeResolution::ResolveNamesAndTypes (crate);\n+  Analysis::TopLevelScan toplevel (crate);\n+  Analysis::TypeResolution::ResolveNamesAndTypes (crate, toplevel);\n   fprintf (stderr, \"finished name resolution\\n\");\n }\n "}]}