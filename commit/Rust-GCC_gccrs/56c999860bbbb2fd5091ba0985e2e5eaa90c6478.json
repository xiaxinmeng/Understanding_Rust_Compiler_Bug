{"sha": "56c999860bbbb2fd5091ba0985e2e5eaa90c6478", "node_id": "C_kwDOANBUbNoAKDU2Yzk5OTg2MGJiYmIyZmQ1MDkxYmEwOTg1ZTJlNWVhYTkwYzY0Nzg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-07-20T15:51:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-07-20T22:38:37Z"}, "message": "libstdc++: Fix std::common_iterator assignment [PR100823]\n\nThis fixes the following conformance problems reported in the PR:\n\n- Move constructor and move assignment should be defined.\n- Copy assignment from a valueless object should be allowed.\n\nAssignment is completely rewritten by this patch, as the previous\nversion had a number of problems. The converting assignment failed to\nhandle the case of assigning a new value to a valueless object, which\nshould work. It only accepted lvalue arguments, so wasn't usable to\nimplement the move assignment operator. Finally, it enforced the\nprecondition that the argument is not valueless, which is correct for\nthe converting assignment but not for the copy assignment.\n\nA new _M_assign member is added to handle all cases of assignment\n(copying from an lvalue, moving from an rvalue, and converting from a\ndifferent type). The not valueless precondition is checked in the\nconverting assignment before calling _M_assign, so isn't enforced for\ncopy and move assignment. The new function no longer uses a switch, so\nhandles valueless objects as the LHS or RHS of the assignment.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100823\n\t* include/bits/stl_iterator.h (common_iterator): Define move\n\tconstructor and move assignment operator.\n\t(common_iterator::_M_assign): New function implementing\n\tassignment.\n\t(common_iterator::operator=): Use _M_assign.\n\t(common_iterator::_S_valueless): New constant.\n\t* testsuite/24_iterators/common_iterator/100823.cc: New test.", "tree": {"sha": "10eb209295c8a87cf08c5c633c92c8ea9aa8aad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10eb209295c8a87cf08c5c633c92c8ea9aa8aad9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56c999860bbbb2fd5091ba0985e2e5eaa90c6478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c999860bbbb2fd5091ba0985e2e5eaa90c6478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c999860bbbb2fd5091ba0985e2e5eaa90c6478", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c999860bbbb2fd5091ba0985e2e5eaa90c6478/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5567c3ec7e5759bdecc6a6fc0be2b65a93636e"}], "stats": {"total": 169, "additions": 129, "deletions": 40}, "files": [{"sha": "a913c04deaa72a7c5b06f26d04e5d276217d7d9d", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 86, "deletions": 40, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c999860bbbb2fd5091ba0985e2e5eaa90c6478/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c999860bbbb2fd5091ba0985e2e5eaa90c6478/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=56c999860bbbb2fd5091ba0985e2e5eaa90c6478", "patch": "@@ -1908,6 +1908,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       noexcept(_S_noexcept<const _It2&, const _Sent2&>())\n       : _M_valueless(), _M_index(__x._M_index)\n       {\n+\t__glibcxx_assert(__x._M_has_value());\n \tif (_M_index == 0)\n \t  {\n \t    if constexpr (is_trivially_default_constructible_v<_It>)\n@@ -1945,14 +1946,58 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     }\n \n+    constexpr\n+    common_iterator(common_iterator&& __x)\n+    noexcept(_S_noexcept<_It, _Sent>())\n+    : _M_valueless(), _M_index(__x._M_index)\n+    {\n+      if (_M_index == 0)\n+\t{\n+\t  if constexpr (is_trivially_default_constructible_v<_It>)\n+\t    _M_it = std::move(__x._M_it);\n+\t  else\n+\t    std::construct_at(std::__addressof(_M_it), std::move(__x._M_it));\n+\t}\n+      else if (_M_index == 1)\n+\t{\n+\t  if constexpr (is_trivially_default_constructible_v<_Sent>)\n+\t    _M_sent = std::move(__x._M_sent);\n+\t  else\n+\t    std::construct_at(std::__addressof(_M_sent),\n+\t\t\t      std::move(__x._M_sent));\n+\t}\n+    }\n+\n+    constexpr common_iterator&\n+    operator=(const common_iterator&) = default;\n+\n     constexpr common_iterator&\n     operator=(const common_iterator& __x)\n     noexcept(is_nothrow_copy_assignable_v<_It>\n \t     && is_nothrow_copy_assignable_v<_Sent>\n \t     && is_nothrow_copy_constructible_v<_It>\n \t     && is_nothrow_copy_constructible_v<_Sent>)\n+    requires (!is_trivially_copy_assignable_v<_It>\n+\t\t|| !is_trivially_copy_assignable_v<_Sent>)\n     {\n-      return this->operator=<_It, _Sent>(__x);\n+      _M_assign(__x);\n+      return *this;\n+    }\n+\n+    constexpr common_iterator&\n+    operator=(common_iterator&&) = default;\n+\n+    constexpr common_iterator&\n+    operator=(common_iterator&& __x)\n+    noexcept(is_nothrow_move_assignable_v<_It>\n+\t     && is_nothrow_move_assignable_v<_Sent>\n+\t     && is_nothrow_move_constructible_v<_It>\n+\t     && is_nothrow_move_constructible_v<_Sent>)\n+    requires (!is_trivially_move_assignable_v<_It>\n+\t\t|| !is_trivially_move_assignable_v<_Sent>)\n+    {\n+      _M_assign(std::move(__x));\n+      return *this;\n     }\n \n     template<typename _It2, typename _Sent2>\n@@ -1967,49 +2012,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       && is_nothrow_assignable_v<_It&, const _It2&>\n \t       && is_nothrow_assignable_v<_Sent&, const _Sent2&>)\n       {\n-\tswitch(_M_index << 2 | __x._M_index)\n-\t  {\n-\t  case 0b0000:\n-\t    _M_it = __x._M_it;\n-\t    break;\n-\t  case 0b0101:\n-\t    _M_sent = __x._M_sent;\n-\t    break;\n-\t  case 0b0001:\n-\t    _M_it.~_It();\n-\t    _M_index = -1;\n-\t    [[fallthrough]];\n-\t  case 0b1001:\n-\t    std::construct_at(std::__addressof(_M_sent), _Sent(__x._M_sent));\n-\t    _M_index = 1;\n-\t    break;\n-\t  case 0b0100:\n-\t    _M_sent.~_Sent();\n-\t    _M_index = -1;\n-\t    [[fallthrough]];\n-\t  case 0b1000:\n-\t    std::construct_at(std::__addressof(_M_it), _It(__x._M_it));\n-\t    _M_index = 0;\n-\t    break;\n-\t  default:\n-\t    __glibcxx_assert(__x._M_has_value());\n-\t    __builtin_unreachable();\n-\t  }\n+\t__glibcxx_assert(__x._M_has_value());\n+\t_M_assign(__x);\n \treturn *this;\n       }\n \n     constexpr\n     ~common_iterator()\n     {\n-      switch (_M_index)\n-\t{\n-\tcase 0:\n-\t  _M_it.~_It();\n-\t  break;\n-\tcase 1:\n-\t  _M_sent.~_Sent();\n-\t  break;\n-\t}\n+      if (_M_index == 0)\n+\t_M_it.~_It();\n+      else if (_M_index == 1)\n+\t_M_sent.~_Sent();\n     }\n \n     [[nodiscard]]\n@@ -2167,15 +2181,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       requires (!same_as<_It2, _Sent2>) && copyable<_It2>\n       friend class common_iterator;\n \n-    constexpr bool _M_has_value() const noexcept { return _M_index < 2; }\n+    constexpr bool\n+    _M_has_value() const noexcept { return _M_index != _S_valueless; }\n+\n+    template<typename _CIt>\n+      constexpr void\n+      _M_assign(_CIt&& __x)\n+      {\n+\tif (_M_index == __x._M_index)\n+\t  {\n+\t    if (_M_index == 0)\n+\t      _M_it = std::forward<_CIt>(__x)._M_it;\n+\t    else if (_M_index == 1)\n+\t      _M_sent = std::forward<_CIt>(__x)._M_sent;\n+\t  }\n+\telse\n+\t  {\n+\t    if (_M_index == 0)\n+\t      _M_it.~_It();\n+\t    else if (_M_index == 1)\n+\t      _M_sent.~_Sent();\n+\t    _M_index = _S_valueless;\n+\n+\t    if (__x._M_index == 0)\n+\t      std::construct_at(std::__addressof(_M_it),\n+\t\t\t\tstd::forward<_CIt>(__x)._M_it);\n+\t    else if (__x._M_index == 1)\n+\t      std::construct_at(std::__addressof(_M_sent),\n+\t\t\t\tstd::forward<_CIt>(__x)._M_sent);\n+\t    _M_index = __x._M_index;\n+\t  }\n+      }\n \n     union\n     {\n       _It _M_it;\n       _Sent _M_sent;\n       unsigned char _M_valueless;\n     };\n-    unsigned char _M_index; // 0==_M_it, 1==_M_sent, 2==valueless\n+    unsigned char _M_index; // 0 == _M_it, 1 == _M_sent, 2 == valueless\n+\n+    static constexpr unsigned char _S_valueless{2};\n   };\n \n   template<typename _It, typename _Sent>"}, {"sha": "4f2b23de8cc53be95bac8d8d2ca47d3f8ebfb9ba", "filename": "libstdc++-v3/testsuite/24_iterators/common_iterator/100823.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c999860bbbb2fd5091ba0985e2e5eaa90c6478/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F100823.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c999860bbbb2fd5091ba0985e2e5eaa90c6478/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F100823.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F100823.cc?ref=56c999860bbbb2fd5091ba0985e2e5eaa90c6478", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++20 -D_GLIBCXX_ASSERTIONS\" }\n+// { dg-do run { target c++20 } }\n+#include <iterator>\n+#include <testsuite_iterators.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test_valueless_assignment()\n+{\n+  int x[1] { };\n+  __gnu_test::test_forward_range<int> r(x);\n+  using Iter = decltype(r.begin());\n+  using Sent = decltype(r.end());\n+\n+  std::common_iterator<Iter, Sent> i;\n+  const std::common_iterator<Iter, Sent> j(r.begin());\n+  try\n+  {\n+    struct Bomb\n+    {\n+      bool operator==(Iter) const { return true; }\n+      operator Sent() const { throw 1; }\n+    };\n+    std::common_iterator<Iter, Bomb> b{Bomb{}};\n+    i = b; // Throws, leaving i valueless-by-exception.\n+    VERIFY(false);\n+  }\n+  catch (int)\n+  {\n+    std::common_iterator<Iter, Sent> k(i);\n+\n+    // PR libstdc++/100823\n+    k = i; // Valid even though both operands are valueless.\n+\n+    i = j; // No longer valueless.\n+  }\n+  VERIFY( i == j );\n+}\n+\n+int main()\n+{\n+  test_valueless_assignment();\n+}"}]}