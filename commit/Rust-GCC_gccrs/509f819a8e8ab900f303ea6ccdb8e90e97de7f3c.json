{"sha": "509f819a8e8ab900f303ea6ccdb8e90e97de7f3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA5ZjgxOWE4ZThhYjkwMGYzMDNlYTZjY2RiOGU5MGU5N2RlN2YzYw==", "commit": {"author": {"name": "Naveen H.S", "email": "Naveen.Hurugalawadi@cavium.com", "date": "2017-06-30T03:50:44Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2017-06-30T03:50:44Z"}, "message": "aarch64.c (aarch_macro_fusion_pair_p): Push the check for CC usage into AARCH64_FUSE_CMP_BRANCH.\n\n2017-06-29  Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n\n\t* config/aarch64/aarch64.c (aarch_macro_fusion_pair_p): Push the\n\tcheck for CC usage into AARCH64_FUSE_CMP_BRANCH.\n\t* config/i386/i386.c (ix86_macro_fusion_pair_p): Push the check for\n\tCC usage from generic code to here.\n\t* sched-deps.c (sched_macro_fuse_insns): Move the condition for\n\tCC usage into the target macros.\n\nFrom-SVN: r249827", "tree": {"sha": "544e45c8cc92cee4f1b2dae86f6fd2e8c56e7dfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/544e45c8cc92cee4f1b2dae86f6fd2e8c56e7dfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c/comments", "author": null, "committer": null, "parents": [{"sha": "44b222cee619ddf7211b0659a7b6b73331f7e1a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b222cee619ddf7211b0659a7b6b73331f7e1a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44b222cee619ddf7211b0659a7b6b73331f7e1a0"}], "stats": {"total": 76, "additions": 50, "deletions": 26}, "files": [{"sha": "2c57178ef27d6f962d25659231b5b61d72486d00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=509f819a8e8ab900f303ea6ccdb8e90e97de7f3c", "patch": "@@ -1,3 +1,12 @@\n+2017-06-29  Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n+\n+\t* config/aarch64/aarch64.c (aarch_macro_fusion_pair_p): Push the\n+\tcheck for CC usage into AARCH64_FUSE_CMP_BRANCH.\n+\t* config/i386/i386.c (ix86_macro_fusion_pair_p): Push the check for\n+\tCC usage from generic code to here.\n+\t* sched-deps.c (sched_macro_fuse_insns): Move the condition for\n+\tCC usage into the target macros. \n+\n 2017-06-29  Maya Rashish  <coypu@sdf.org>\n \n \t* config/netbsd.h (NETBSD_LIB_SPEC): Add -lc when creating shared"}, {"sha": "b8ce5af1592ed2b489fe085321853337141b367b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=509f819a8e8ab900f303ea6ccdb8e90e97de7f3c", "patch": "@@ -14304,13 +14304,23 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n     {\n       enum attr_type prev_type = get_attr_type (prev);\n \n-      /* FIXME: this misses some which is considered simple arthematic\n-         instructions for ThunderX.  Simple shifts are missed here.  */\n-      if (prev_type == TYPE_ALUS_SREG\n-          || prev_type == TYPE_ALUS_IMM\n-          || prev_type == TYPE_LOGICS_REG\n-          || prev_type == TYPE_LOGICS_IMM)\n-        return true;\n+      unsigned int condreg1, condreg2;\n+      rtx cc_reg_1;\n+      aarch64_fixed_condition_code_regs (&condreg1, &condreg2);\n+      cc_reg_1 = gen_rtx_REG (CCmode, condreg1);\n+\n+      if (reg_referenced_p (cc_reg_1, PATTERN (curr))\n+\t  && prev\n+\t  && modified_in_p (cc_reg_1, prev))\n+\t{\n+\t  /* FIXME: this misses some which is considered simple arthematic\n+\t     instructions for ThunderX.  Simple shifts are missed here.  */\n+\t  if (prev_type == TYPE_ALUS_SREG\n+\t      || prev_type == TYPE_ALUS_IMM\n+\t      || prev_type == TYPE_LOGICS_REG\n+\t      || prev_type == TYPE_LOGICS_IMM)\n+\t    return true;\n+\t}\n     }\n \n   return false;"}, {"sha": "2c4479e175140bb7ef4e41f5bda5fa7f083ee92e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=509f819a8e8ab900f303ea6ccdb8e90e97de7f3c", "patch": "@@ -30345,6 +30345,15 @@ ix86_macro_fusion_pair_p (rtx_insn *condgen, rtx_insn *condjmp)\n   if (!any_condjump_p (condjmp))\n     return false;\n \n+  unsigned int condreg1, condreg2;\n+  rtx cc_reg_1;\n+  ix86_fixed_condition_code_regs (&condreg1, &condreg2);\n+  cc_reg_1 = gen_rtx_REG (CCmode, condreg1);\n+  if (!reg_referenced_p (cc_reg_1, PATTERN (condjmp))\n+      || !condgen\n+      || !modified_in_p (cc_reg_1, condgen))\n+    return false;\n+\n   if (get_attr_type (condgen) != TYPE_TEST\n       && get_attr_type (condgen) != TYPE_ICMP\n       && get_attr_type (condgen) != TYPE_INCDEC"}, {"sha": "4c459e6587f32bf57dfb227c704adc19f8e7507c", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=509f819a8e8ab900f303ea6ccdb8e90e97de7f3c", "patch": "@@ -2834,34 +2834,30 @@ static void\n sched_macro_fuse_insns (rtx_insn *insn)\n {\n   rtx_insn *prev;\n-\n+  prev = prev_nonnote_nondebug_insn (insn);\n+  if (!prev)\n+    return;\n+ \n   if (any_condjump_p (insn))\n     {\n       unsigned int condreg1, condreg2;\n       rtx cc_reg_1;\n       targetm.fixed_condition_code_regs (&condreg1, &condreg2);\n       cc_reg_1 = gen_rtx_REG (CCmode, condreg1);\n-      prev = prev_nonnote_nondebug_insn (insn);\n-      if (!reg_referenced_p (cc_reg_1, PATTERN (insn))\n-          || !prev\n-          || !modified_in_p (cc_reg_1, prev))\n-        return;\n+      if (reg_referenced_p (cc_reg_1, PATTERN (insn))\n+\t  && modified_in_p (cc_reg_1, prev))\n+\t{\n+\t  if (targetm.sched.macro_fusion_pair_p (prev, insn))\n+\t    SCHED_GROUP_P (insn) = 1;\n+\t  return;\n+\t}\n     }\n-  else\n-    {\n-      rtx insn_set = single_set (insn);\n-\n-      prev = prev_nonnote_nondebug_insn (insn);\n-      if (!prev\n-          || !insn_set\n-          || !single_set (prev))\n-        return;\n \n+  if (single_set (insn) && single_set (prev))\n+    {\n+      if (targetm.sched.macro_fusion_pair_p (prev, insn))\n+\tSCHED_GROUP_P (insn) = 1;\n     }\n-\n-  if (targetm.sched.macro_fusion_pair_p (prev, insn))\n-    SCHED_GROUP_P (insn) = 1;\n-\n }\n \n /* Get the implicit reg pending clobbers for INSN and save them in TEMP.  */"}]}