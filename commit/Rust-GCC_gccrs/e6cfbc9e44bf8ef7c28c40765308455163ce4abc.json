{"sha": "e6cfbc9e44bf8ef7c28c40765308455163ce4abc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZjZmJjOWU0NGJmOGVmN2MyOGM0MDc2NTMwODQ1NTE2M2NlNGFiYw==", "commit": {"author": {"name": "Mark Elbrecht", "email": "snowball3@usa.net", "date": "1999-04-10T05:07:32Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-10T05:07:32Z"}, "message": "cccp.c (DIR_SEPARATOR): Move to the top of the file.\n\n        * cccp.c (DIR_SEPARATOR): Move to the top of the file.\n        (is_dir_separator): New function.\n        (simplify_filename): Use it.\nLast bit of the dir separator patches.\n\nFrom-SVN: r26331", "tree": {"sha": "96e00cb700ac034b276da1a08e9db6c67d597c1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96e00cb700ac034b276da1a08e9db6c67d597c1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6cfbc9e44bf8ef7c28c40765308455163ce4abc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6cfbc9e44bf8ef7c28c40765308455163ce4abc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6cfbc9e44bf8ef7c28c40765308455163ce4abc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6cfbc9e44bf8ef7c28c40765308455163ce4abc/comments", "author": null, "committer": null, "parents": [{"sha": "9ee9f4f066750343f248331adec075e30fde7c7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee9f4f066750343f248331adec075e30fde7c7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee9f4f066750343f248331adec075e30fde7c7a"}], "stats": {"total": 125, "additions": 79, "deletions": 46}, "files": [{"sha": "3da9b8ed6efb4c95cda2a7bd7c119278b9b5c4d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6cfbc9e44bf8ef7c28c40765308455163ce4abc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6cfbc9e44bf8ef7c28c40765308455163ce4abc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6cfbc9e44bf8ef7c28c40765308455163ce4abc", "patch": "@@ -13,6 +13,9 @@ Sat Apr 10 05:14:50 1999  Mark Elbrecht  <snowball3@usa.net>\n \n \t* i386/djgpp.h (SET_ASM_OP): Define.\n \n+\t* cccp.c (DIR_SEPARATOR): Move to the top of the file.\n+\t(is_dir_separator): New function.\n+\t(simplify_filename): Use it.\n \t* collect2.c (find_a_file): Use HAVE_DOS_BASED_FILE_SYSTEM in place\n \tof the DIR_SEPARATOR test.\n \tConsider any file starting with a drivename to be absolute."}, {"sha": "df5ce0a542d1764c48fb91e69f10029156bbe05b", "filename": "gcc/cccp.c", "status": "modified", "additions": 76, "deletions": 46, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6cfbc9e44bf8ef7c28c40765308455163ce4abc/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6cfbc9e44bf8ef7c28c40765308455163ce4abc/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=e6cfbc9e44bf8ef7c28c40765308455163ce4abc", "patch": "@@ -51,6 +51,11 @@ typedef unsigned char U_CHAR;\n # define PATH_SEPARATOR ':'\n #endif\n \n+/* By default, a slash separates directory names.  */\n+#ifndef DIR_SEPARATOR\n+# define DIR_SEPARATOR '/'\n+#endif\n+\n /* By default, the suffix for object files is \".o\".  */\n #ifdef OBJECT_SUFFIX\n # define HAVE_OBJECT_SUFFIX\n@@ -4782,6 +4787,20 @@ absolute_filename (filename)\n   return 0;\n }\n \n+/* Returns whether or not a given character is a directory separator.\n+   Used by simplify_filename.  */\n+static inline\n+int\n+is_dir_separator(ch)\n+     char ch;\n+{\n+  return (ch == DIR_SEPARATOR)\n+#if defined (DIR_SEPARATOR_2)\n+          || (ch == DIR_SEPARATOR_2)\n+#endif\n+         ;\n+}\n+\n /* Remove unnecessary characters from FILENAME in place,\n    to avoid unnecessary filename aliasing.\n    Return the length of the resulting string.\n@@ -4799,55 +4818,70 @@ simplify_filename (filename)\n   char *to0;\n \n   /* Remove redundant initial /s.  */\n-  if (*from == '/') {\n-    *to++ = '/';\n-    if (*++from == '/') {\n-      if (*++from == '/') {\n-\t/* 3 or more initial /s are equivalent to 1 /.  */\n-\twhile (*++from == '/')\n-\t  continue;\n-      } else {\n-\t/* On some hosts // differs from /; Posix allows this.  */\n-\tstatic int slashslash_vs_slash;\n-\tif (slashslash_vs_slash == 0) {\n-\t  struct stat s1, s2;\n-\t  slashslash_vs_slash = ((stat (\"/\", &s1) == 0 && stat (\"//\", &s2) == 0\n-\t\t\t\t  && INO_T_EQ (s1.st_ino, s2.st_ino)\n-\t\t\t\t  && s1.st_dev == s2.st_dev)\n-\t\t\t\t ? 1 : -1);\n-\t}\n-\tif (slashslash_vs_slash < 0)\n-\t  *to++ = '/';\n-      }\n+  if (is_dir_separator (*from))\n+    {\n+      *to++ = DIR_SEPARATOR;\n+      if (is_dir_separator (*++from))\n+        {\n+          if (is_dir_separator (*++from))\n+            {\n+              /* 3 or more initial /s are equivalent to 1 /.  */\n+              while (is_dir_separator (*++from))\n+                continue;\n+            }\n+          else\n+            {\n+\t      /* On some hosts // differs from /; Posix allows this.  */\n+              static int slashslash_vs_slash;\n+              if (slashslash_vs_slash == 0)\n+                {\n+                  struct stat s1, s2;\n+                  slashslash_vs_slash = ((stat (\"/\", &s1) == 0\n+\t\t\t\t\t  && stat (\"//\", &s2) == 0\n+                                          && INO_T_EQ (s1.st_ino, s2.st_ino)\n+                                          && s1.st_dev == s2.st_dev)\n+                                         ? 1 : -1);\n+                }\n+             if (slashslash_vs_slash < 0)\n+               *to++ = DIR_SEPARATOR;\n+            }\n+        }\n     }\n-  }\n+\n   to0 = to;\n \n-  for (;;) {\n+  for (;;)\n+    {\n #ifndef VMS\n-    if (from[0] == '.' && from[1] == '/')\n-      from += 2;\n-    else\n+      if (from[0] == '.' && from[1] == '/')\n+        from += 2;\n+      else\n #endif\n-      {\n-      /* Copy this component and trailing /, if any.  */\n-      while ((*to++ = *from++) != '/') {\n-\tif (!to[-1]) {\n-\t  /* Trim . component at end of nonempty name.  */\n-\t  to -= filename <= to - 3 && to[-3] == '/' && to[-2] == '.';\n-\n-\t  /* Trim unnecessary trailing /s.  */\n-\t  while (to0 < --to && to[-1] == '/')\n-\t    continue;\n-\n-\t  *to = 0;\n-\t  return to - filename;\n-\t}\n-      }\n-    }\n+        {\n+          /* Copy this component and trailing DIR_SEPARATOR, if any.  */\n+          while (!is_dir_separator (*to++ = *from++))\n+            {\n+              if (!to[-1])\n+                {\n+                  /* Trim . component at end of nonempty name.  */\n+                  to -= filename <= to - 3 && to[-3] == DIR_SEPARATOR && to[-2] == '.';\n+\n+                  /* Trim unnecessary trailing /s.  */\n+                  while (to0 < --to && to[-1] == DIR_SEPARATOR)\n+                    continue;\n+\n+                  *to = 0;\n+                  return to - filename;\n+                }\n+            }\n+#if defined(DIR_SEPARATOR_2)\n+          /* Simplify to one directory separator.  */\n+          to[-1] = DIR_SEPARATOR;\n+#endif\n+        }\n \n     /* Skip /s after a /.  */\n-    while (*from == '/')\n+    while (is_dir_separator (*from))\n       from++;\n   }\n }\n@@ -10322,10 +10356,6 @@ make_assertion (option, str)\n   --indepth;\n }\n \f\n-#ifndef DIR_SEPARATOR\n-#define DIR_SEPARATOR '/'\n-#endif\n-\n /* The previous include prefix, if any, is PREV_FILE_NAME.\n    Translate any pathnames with COMPONENT.\n    Allocate a new include prefix whose name is the"}]}