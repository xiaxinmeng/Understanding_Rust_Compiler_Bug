{"sha": "d8cfa4ee64a9f661e35b2e1549b0ae85ae5a9888", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhjZmE0ZWU2NGE5ZjY2MWUzNWIyZTE1NDliMGFlODVhZTVhOTg4OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-11T12:18:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-11T12:18:53Z"}, "message": "(get_condition): Check for overflow when canonicalizing comparison.\n\nFrom-SVN: r2863", "tree": {"sha": "68f5b3f0416b944f9fcc6378f1fa804cfd74a947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68f5b3f0416b944f9fcc6378f1fa804cfd74a947"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8cfa4ee64a9f661e35b2e1549b0ae85ae5a9888", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8cfa4ee64a9f661e35b2e1549b0ae85ae5a9888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8cfa4ee64a9f661e35b2e1549b0ae85ae5a9888", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8cfa4ee64a9f661e35b2e1549b0ae85ae5a9888/comments", "author": null, "committer": null, "parents": [{"sha": "2af69b62de170f81459946c0fe464fc153febecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af69b62de170f81459946c0fe464fc153febecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2af69b62de170f81459946c0fe464fc153febecb"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "6e093e24b614a578bb6b5c224919b1042f05f3f8", "filename": "gcc/loop.c", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8cfa4ee64a9f661e35b2e1549b0ae85ae5a9888/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8cfa4ee64a9f661e35b2e1549b0ae85ae5a9888/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=d8cfa4ee64a9f661e35b2e1549b0ae85ae5a9888", "patch": "@@ -6386,34 +6386,43 @@ get_condition (jump, earliest)\n   if (GET_MODE_CLASS (GET_MODE (op0)) == MODE_CC)\n     return 0;\n \n-  /* Canonicalize any ordered comparison with integers involving equality.  */\n-  if (GET_CODE (op1) == CONST_INT)\n+  /* Canonicalize any ordered comparison with integers involving equality\n+     if we can do computations in the relevant mode and we do not\n+     overflow.  */\n+\n+  if (GET_CODE (op1) == CONST_INT\n+      && GET_MODE (op0) != VOIDmode\n+      && GET_MODE_BITSIZE (GET_MODE (op0)) <= HOST_BITS_PER_WIDE_INT)\n     {\n       HOST_WIDE_INT const_val = INTVAL (op1);\n       unsigned HOST_WIDE_INT uconst_val = const_val;\n+      unsigned HOST_WIDE_INT max_val\n+\t= (unsigned HOST_WIDE_INT) GET_MODE_MASK (GET_MODE (op0));\n \n       switch (code)\n-      {\n-      case LE:\n-\tcode = LT;\n-\top1 = GEN_INT (const_val + 1);\n-\tbreak;\n+\t{\n+\tcase LE:\n+\t  if (const_val != max_val >> 1)\n+\t    code = LT,\top1 = GEN_INT (const_val + 1);\n+\t  break;\n \n-      case GE:\n-\tcode = GT;\n-\top1 = GEN_INT (const_val - 1);\n-\tbreak;\n+\tcase GE:\n+\t  if (const_val\n+\t      != (((HOST_WIDE_INT) 1\n+\t\t   << (GET_MODE_BITSIZE (GET_MODE (op0)) - 1))))\n+\t    code = GT, op1 = GEN_INT (const_val - 1);\n+\t  break;\n \n-      case LEU:\n-\tcode = LTU;\n-\top1 = GEN_INT (uconst_val + 1);\n-\tbreak;\n+\tcase LEU:\n+\t  if (uconst_val != max_val)\n+\t    code = LTU, op1 = GEN_INT (uconst_val + 1);\n+\t  break;\n \n-      case GEU:\n-\tcode = GTU;\n-\top1 = GEN_INT (uconst_val - 1);\n-\tbreak;\n-      }\n+\tcase GEU:\n+\t  if (uconst_val != 0)\n+\t    code = GTU, op1 = GEN_INT (uconst_val - 1);\n+\t  break;\n+\t}\n     }\n \n   /* If this was floating-point and we reversed anything other than an"}]}