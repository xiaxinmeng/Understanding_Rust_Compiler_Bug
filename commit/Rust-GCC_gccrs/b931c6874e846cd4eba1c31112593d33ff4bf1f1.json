{"sha": "b931c6874e846cd4eba1c31112593d33ff4bf1f1", "node_id": "C_kwDOANBUbNoAKGI5MzFjNjg3NGU4NDZjZDRlYmExYzMxMTEyNTkzZDMzZmY0YmYxZjE", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-06-24T02:20:51Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-06-24T02:28:14Z"}, "message": "libstdc++: testsuite: skip fs space tests on dummy implementations\n\nThe do_space function is defined in ways that are useful, or that fail\nimmediately, depending on various macros.  When it fails immediately,\nthe filesystem space.cc tests fail noisily, but the fail is entirely\nexpected.\n\nDefine NO_SPACE in testsuite_fs.h, according to the macros that select\nimplementations of do_space, and use it to skip tests that are\nexpected to fail, through a new dg-require.\n\n\nfor  libstdc++-v3/ChangeLog\n\n\t* testsuite/util/testsuite_fs.h (NO_SPACE): Define if\n\tappropriate.\n\t* testsuite/lib/libstdc++.exp (check_v3_target_fs_space): New.\n\t* testsuite/lib/dg-options.exp (dg-require-target-fs-space):\n\tNew.\n\t* testsuite/27_io/filesystem/operations/space.cc: Require\n\ttarget-fs-space.\n\t* testsuite/experimental/filesystem/operations/space.cc:\n\tLikewise.", "tree": {"sha": "06855e6735715cebed8d051e881cf4d36b148781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06855e6735715cebed8d051e881cf4d36b148781"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b931c6874e846cd4eba1c31112593d33ff4bf1f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b931c6874e846cd4eba1c31112593d33ff4bf1f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b931c6874e846cd4eba1c31112593d33ff4bf1f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b931c6874e846cd4eba1c31112593d33ff4bf1f1/comments", "author": null, "committer": null, "parents": [{"sha": "9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f7f25bb35c1be3e5c8ef9325c03bb01a2d66963"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "daa1ce439f30df69ecee86c5402dbd0752ddbbb7", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/space.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b931c6874e846cd4eba1c31112593d33ff4bf1f1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fspace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b931c6874e846cd4eba1c31112593d33ff4bf1f1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fspace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fspace.cc?ref=b931c6874e846cd4eba1c31112593d33ff4bf1f1", "patch": "@@ -17,6 +17,7 @@\n \n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n+// { dg-require-target-fs-space \"\" }\n \n // 30.10.14.3 Permissions [fs.op.space]\n "}, {"sha": "c3745a2686635ca77d389d2691d1bfe8c9af79ee", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/space.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b931c6874e846cd4eba1c31112593d33ff4bf1f1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fspace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b931c6874e846cd4eba1c31112593d33ff4bf1f1/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fspace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fspace.cc?ref=b931c6874e846cd4eba1c31112593d33ff4bf1f1", "patch": "@@ -18,6 +18,7 @@\n // { dg-options \"-DUSE_FILESYSTEM_TS -lstdc++fs\" }\n // { dg-do run { target c++11 } }\n // { dg-require-filesystem-ts \"\" }\n+// { dg-require-target-fs-space \"\" }\n \n // 30.10.14.3 Permissions [fs.op.space]\n "}, {"sha": "81bb8f448bd44176908c140d2f702a7cd3addcf1", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b931c6874e846cd4eba1c31112593d33ff4bf1f1/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b931c6874e846cd4eba1c31112593d33ff4bf1f1/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=b931c6874e846cd4eba1c31112593d33ff4bf1f1", "patch": "@@ -250,6 +250,15 @@ proc dg-require-target-fs-symlinks { args } {\n     return\n }\n \n+proc dg-require-target-fs-space { args } {\n+    if { ![ check_v3_target_fs_space ] } {\n+\tupvar dg-do-what dg-do-what\n+\tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+\treturn\n+    }\n+    return\n+}\n+\n proc add_options_for_no_pch { flags } {\n     # This forces any generated and possibly included PCH to be invalid.\n     return \"-D__GLIBCXX__=99999999\""}, {"sha": "4305ec60994026e77ee4a2ad6ae5685104c30750", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b931c6874e846cd4eba1c31112593d33ff4bf1f1/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b931c6874e846cd4eba1c31112593d33ff4bf1f1/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=b931c6874e846cd4eba1c31112593d33ff4bf1f1", "patch": "@@ -1278,6 +1278,14 @@ proc check_v3_target_fs_symlinks { } {\n     return [v3_check_preprocessor_condition fs_symlinks $cond $inc]\n }\n \n+# Return 1 if the libstdc++ filesystem implementation of space is not an\n+# always-failing dummy.\n+proc check_v3_target_fs_space { } {\n+    set inc \"#include <testsuite_fs.h>\"\n+    set cond \"!defined NO_SPACE\"\n+    return [v3_check_preprocessor_condition fs_space $cond $inc]\n+}\n+\n # Return 1 if the \"cxx11\" ABI is in use using the current flags, 0 otherwise.\n # Any flags provided by RUNTESTFLAGS or a target board will be used here.\n # Flags added in the test by dg-options or dg-add-options will not be used."}, {"sha": "e9fb4fff8f2f2b77c7d8d034af015499029a6fd3", "filename": "libstdc++-v3/testsuite/util/testsuite_fs.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b931c6874e846cd4eba1c31112593d33ff4bf1f1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b931c6874e846cd4eba1c31112593d33ff4bf1f1/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_fs.h?ref=b931c6874e846cd4eba1c31112593d33ff4bf1f1", "patch": "@@ -46,6 +46,11 @@ namespace test_fs = std::experimental::filesystem;\n #define NO_SYMLINKS\n #endif\n \n+#if !defined (_GLIBCXX_HAVE_SYS_STATVFS_H) \\\n+  && !defined (_GLIBCXX_FILESYSTEM_IS_WINDOWS)\n+#define NO_SPACE\n+#endif\n+\n namespace __gnu_test\n {\n #define PATH_CHK(p1, p2, fn) \\"}]}