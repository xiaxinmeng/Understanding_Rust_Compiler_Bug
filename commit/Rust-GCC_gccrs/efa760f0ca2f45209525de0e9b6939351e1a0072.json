{"sha": "efa760f0ca2f45209525de0e9b6939351e1a0072", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZhNzYwZjBjYTJmNDUyMDk1MjVkZTBlOWI2OTM5MzUxZTFhMDA3Mg==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2018-05-30T08:58:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-30T08:58:12Z"}, "message": "[Ada] ACATS 4.1G - CXAG003 - Name_Case_Equivalence doesn't exist\n\nImplement a missing portion of Ada 2005's AI05-0049-1 for subprogram\nAda.Directories.Name_Case_Equivalence so that user programs can account for\noperating system differences in case sensitivity.\n\n------------\n-- Source --\n------------\n\n--  main.adb\n\nwith Ada.Directories; use Ada.Directories;\nwith Ada.Text_IO;     use Ada.Text_IO;\nprocedure Main is\nbegin\n\n  --  Directory layout:\n  --     /empty +-- Nothing...\n  --\n  --     /mutliplefiles +-- \"TEST1.TXT\"\n  --                    |\n  --                \"test1.txt\"\n  --\n  --     /singlefile +-- \"test1.txt\"\n  --\n  --     /noncasable +-- \"!\"\n  --\n\n  Put_Line (Name_Case_Equivalence (\"./empty\")'Image);\n  Put_Line (Name_Case_Equivalence (\"./multiplefiles\")'Image);\n  Put_Line (Name_Case_Equivalence (\"./singlefile\")'Image);\n  Put_Line (Name_Case_Equivalence (\"./multiplefiles/test1.txt\")'Image);\n  Put_Line (Name_Case_Equivalence (\"./singlefile/test1.txt\")'Image);\n  Put_Line (Name_Case_Equivalence (\"./noncaseable/!\")'Image);\nend;\n\n----------------------------\n-- Compilation and Output --\n----------------------------\n\n& gnatmake -q main.adb\n& main\nCASE_SENSITIVE\nCASE_SENSITIVE\nCASE_SENSITIVE\nCASE_SENSITIVE\nCASE_SENSITIVE\nCASE_SENSITIVE\n\n2018-05-30  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/a-direct.adb, libgnat/a-direct.ads (Name_Case_Equivalence):\n\tAdd implementation.\n\t(Start_Search): Modify to use Start_Search_Internal\n\t(Start_Search_Internal): Add to break out an extra flag for searching\n\tcase insensative due to the potential for directories within the same\n\tOS to allow different casing schemes.\n\t* sysdep.c (__gnat_name_case_equivalence): Add as a default fallback\n\tfor when the more precise solution fails.\n\nFrom-SVN: r260942", "tree": {"sha": "4a3757f6f63dac9276c3c0ae180009fc3fae09c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a3757f6f63dac9276c3c0ae180009fc3fae09c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efa760f0ca2f45209525de0e9b6939351e1a0072", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa760f0ca2f45209525de0e9b6939351e1a0072", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa760f0ca2f45209525de0e9b6939351e1a0072", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa760f0ca2f45209525de0e9b6939351e1a0072/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c506265dd18ed7669eac58c027320b5c16b2b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c506265dd18ed7669eac58c027320b5c16b2b6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c506265dd18ed7669eac58c027320b5c16b2b6e"}], "stats": {"total": 178, "additions": 176, "deletions": 2}, "files": [{"sha": "91a63bdc76d8d97e7e3a9d24264cc763d07e55ad", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa760f0ca2f45209525de0e9b6939351e1a0072/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa760f0ca2f45209525de0e9b6939351e1a0072/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=efa760f0ca2f45209525de0e9b6939351e1a0072", "patch": "@@ -1,3 +1,14 @@\n+2018-05-30  Justin Squirek  <squirek@adacore.com>\n+\n+\t* libgnat/a-direct.adb, libgnat/a-direct.ads (Name_Case_Equivalence):\n+\tAdd implementation.\n+\t(Start_Search): Modify to use Start_Search_Internal\n+\t(Start_Search_Internal): Add to break out an extra flag for searching\n+\tcase insensative due to the potential for directories within the same\n+\tOS to allow different casing schemes.\n+\t* sysdep.c (__gnat_name_case_equivalence): Add as a default fallback\n+\tfor when the more precise solution fails.\n+\n 2018-05-30  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* checks.adb, exp_ch5.adb, exp_ch7.adb, exp_unst.adb, sem_eval.adb:"}, {"sha": "dd8b1acee42ca85f39ca9048ad2172639c1eaec2", "filename": "gcc/ada/libgnat/a-direct.adb", "status": "modified", "additions": 132, "deletions": 2, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa760f0ca2f45209525de0e9b6939351e1a0072/gcc%2Fada%2Flibgnat%2Fa-direct.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa760f0ca2f45209525de0e9b6939351e1a0072/gcc%2Fada%2Flibgnat%2Fa-direct.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-direct.adb?ref=efa760f0ca2f45209525de0e9b6939351e1a0072", "patch": "@@ -38,6 +38,8 @@ with Ada.Strings.Maps;           use Ada.Strings.Maps;\n with Ada.Strings.Unbounded;      use Ada.Strings.Unbounded;\n with Ada.Unchecked_Deallocation;\n \n+with Interfaces.C;\n+\n with System;                 use System;\n with System.CRTL;            use System.CRTL;\n with System.File_Attributes; use System.File_Attributes;\n@@ -91,6 +93,16 @@ package body Ada.Directories is\n    --  Get the next entry in a directory, setting Entry_Fetched if successful\n    --  or resetting Is_Valid if not.\n \n+   procedure Start_Search_Internal\n+     (Search                 : in out Search_Type;\n+      Directory              : String;\n+      Pattern                : String;\n+      Filter                 : Filter_Type := (others => True);\n+      Force_Case_Insensitive : Boolean);\n+   --  Similar to Start_Search except we can force a search to be\n+   --  case-insensitive, which is important for detecting the name-case\n+   --  equivalence for a given directory.\n+\n    ---------------\n    -- Base_Name --\n    ---------------\n@@ -1057,6 +1069,103 @@ package body Ada.Directories is\n       return Search.Value.Is_Valid;\n    end More_Entries;\n \n+   ---------------------------\n+   -- Name_Case_Equivalence --\n+   ---------------------------\n+\n+   function Name_Case_Equivalence (Name : String) return Name_Case_Kind is\n+      Dir_Path  : Unbounded_String := To_Unbounded_String (Name);\n+      S         : Search_Type;\n+      Test_File : Directory_Entry_Type;\n+\n+      function GNAT_name_case_equivalence return Interfaces.C.int;\n+      pragma Import\n+        (C, GNAT_name_case_equivalence, \"__gnat_name_case_equivalence\");\n+\n+   begin\n+      --  Check for the invalid case\n+\n+      if not Is_Valid_Path_Name (Name) then\n+         raise Name_Error with \"invalid path name \"\"\" & Name & '\"';\n+      end if;\n+\n+      --  We were passed a \"full path\" to a file and not a directory, so obtain\n+      --  the containing directory.\n+\n+      if Is_Regular_File (Name) then\n+         Dir_Path := To_Unbounded_String (Containing_Directory (Name));\n+      end if;\n+\n+      --  Since we must obtain a file within the Name directory, let's grab the\n+      --  first for our test. When the directory is empty, Get_Next_Entry will\n+      --  fall through to a Status_Error where we then take the imprecise\n+      --  default for the host OS.\n+\n+      Start_Search (Search    => S,\n+                    Directory => To_String (Dir_Path),\n+                    Pattern   => \"\",\n+                    Filter    => (Directory => False, others => True));\n+\n+      loop\n+         Get_Next_Entry (S, Test_File);\n+\n+         --  Check if we have found a \"caseable\" file\n+\n+         exit when To_Lower (Simple_Name (Test_File)) /=\n+                     To_Upper (Simple_Name (Test_File));\n+      end loop;\n+\n+      End_Search (S);\n+\n+      --  Search for files within the directory with the same name, but\n+      --  differing cases.\n+\n+      Start_Search_Internal\n+        (Search                 => S,\n+         Directory              => To_String (Dir_Path),\n+         Pattern                => Simple_Name (Test_File),\n+         Filter                 => (Directory => False, others => True),\n+         Force_Case_Insensitive => True);\n+\n+      --  We will find at least one match due to the search hitting our test\n+      --  file.\n+\n+      Get_Next_Entry (S, Test_File);\n+\n+      begin\n+         --  If we hit two then we know we have a case-sensitive directory\n+\n+         Get_Next_Entry (S, Test_File);\n+         End_Search (S);\n+\n+         return Case_Sensitive;\n+      exception\n+         when Status_Error =>\n+            null;\n+      end;\n+\n+      --  Finally, we have a file in the directory whose name is unique and\n+      --  \"caseable\". Let's test to see if the OS is able to identify the file\n+      --  in multiple cases, which will give us our result without having to\n+      --  resort to defaults.\n+\n+      if Exists (To_String (Dir_Path) & Directory_Separator\n+                  & To_Lower (Simple_Name (Test_File)))\n+        and then Exists (To_String (Dir_Path) & Directory_Separator\n+                          & To_Upper (Simple_Name (Test_File)))\n+      then\n+         return Case_Preserving;\n+      end if;\n+\n+      return Case_Sensitive;\n+   exception\n+      when Status_Error =>\n+         --  There is no unobtrusive way to check for the directory's casing so\n+         --  return the OS default.\n+\n+         return Name_Case_Kind'Val (Integer (GNAT_name_case_equivalence));\n+   end Name_Case_Equivalence;\n+\n    ------------\n    -- Rename --\n    ------------\n@@ -1288,6 +1397,21 @@ package body Ada.Directories is\n       Directory : String;\n       Pattern   : String;\n       Filter    : Filter_Type := (others => True))\n+   is\n+   begin\n+      Start_Search_Internal (Search, Directory, Pattern, Filter, False);\n+   end Start_Search;\n+\n+   ---------------------------\n+   -- Start_Search_Internal --\n+   ---------------------------\n+\n+   procedure Start_Search_Internal\n+     (Search                 : in out Search_Type;\n+      Directory              : String;\n+      Pattern                : String;\n+      Filter                 : Filter_Type := (others => True);\n+      Force_Case_Insensitive : Boolean)\n    is\n       function opendir (file_name : String) return DIRs;\n       pragma Import (C, opendir, \"__gnat_opendir\");\n@@ -1306,11 +1430,17 @@ package body Ada.Directories is\n \n       --  Check the pattern\n \n+      declare\n+         Case_Sensitive : Boolean := Is_Path_Name_Case_Sensitive;\n       begin\n+         if Force_Case_Insensitive then\n+            Case_Sensitive := False;\n+         end if;\n+\n          Pat := Compile\n            (Pattern,\n             Glob           => True,\n-            Case_Sensitive => Is_Path_Name_Case_Sensitive);\n+            Case_Sensitive => Case_Sensitive);\n       exception\n          when Error_In_Regexp =>\n             Free (Search.Value);\n@@ -1339,6 +1469,6 @@ package body Ada.Directories is\n       Search.Value.Pattern  := Pat;\n       Search.Value.Dir      := Dir;\n       Search.Value.Is_Valid := True;\n-   end Start_Search;\n+   end Start_Search_Internal;\n \n end Ada.Directories;"}, {"sha": "e879746e590ce64c2f36255642c734aefc2c9807", "filename": "gcc/ada/libgnat/a-direct.ads", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa760f0ca2f45209525de0e9b6939351e1a0072/gcc%2Fada%2Flibgnat%2Fa-direct.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa760f0ca2f45209525de0e9b6939351e1a0072/gcc%2Fada%2Flibgnat%2Fa-direct.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-direct.ads?ref=efa760f0ca2f45209525de0e9b6939351e1a0072", "patch": "@@ -231,6 +231,11 @@ package Ada.Directories is\n    -- File and directory name operations --\n    ----------------------------------------\n \n+   type Name_Case_Kind is\n+      (Unknown, Case_Sensitive, Case_Insensitive, Case_Preserving);\n+   --  The type Name_Case_Kind represents the kind of file-name equivalence\n+   --  rule for directories.\n+\n    function Full_Name (Name : String) return String;\n    --  Returns the full name corresponding to the file name specified by Name.\n    --  The exception Name_Error is propagated if the string given as Name does\n@@ -281,6 +286,16 @@ package Ada.Directories is\n    --  Name is not a possible simple name (if Extension is null) or base name\n    --  (if Extension is non-null).\n \n+   function Name_Case_Equivalence (Name : String) return Name_Case_Kind;\n+   --  Returns the file-name equivalence rule for the directory containing\n+   --  Name. Raises Name_Error if Name is not a full name. Returns\n+   --  Case_Sensitive if file names that differ only in the case of letters are\n+   --  considered different names. If file names that differ only in the case\n+   --  of letters are considered the same name, then Case_Preserving is\n+   --  returned if names have the case of the file name used when a file is\n+   --  created; and Case_Insensitive is returned otherwise. Returns Unknown if\n+   --  the file-name equivalence is not known.\n+\n    --------------------------------\n    -- File and directory queries --\n    --------------------------------"}, {"sha": "0b6a441c660a25f1911168f41701209db80511c2", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa760f0ca2f45209525de0e9b6939351e1a0072/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa760f0ca2f45209525de0e9b6939351e1a0072/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=efa760f0ca2f45209525de0e9b6939351e1a0072", "patch": "@@ -1049,3 +1049,21 @@ _getpagesize (void)\n   return getpagesize ();\n }\n #endif\n+\n+int\n+__gnat_name_case_equivalence ()\n+{\n+  /*  the values here must be synchronized with Ada.Directories.Name_Case_Kind:\n+\n+      Unknown          = 0\n+      Case_Sensitive   = 1\n+      Case_Insensitive = 2\n+      Case_Preserving  = 3  */\n+\n+#if defined (__APPLE__) || defined (WIN32)\n+  return 3;\n+#else\n+  return 1;\n+#endif\n+}\n+"}]}