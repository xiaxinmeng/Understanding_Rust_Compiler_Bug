{"sha": "7846156274db4c58317871c7d5e049e6f2b0ca10", "node_id": "C_kwDOANBUbNoAKDc4NDYxNTYyNzRkYjRjNTgzMTc4NzFjN2Q1ZTA0OWU2ZjJiMGNhMTA", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-11-11T02:15:12Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-11-11T20:21:56Z"}, "message": "compiler: traverse func subexprs when creating func descriptors\n\nFix the Create_func_descriptors pass to traverse the subexpressions of\nthe function in a Call_expression.  There are no subexpressions in the\nnormal case of calling a function a method directly, but there are\nsubexpressions when in code like F().M() when F returns an interface type.\n\nForgetting to traverse the function subexpressions was almost entirely\nhidden by the fact that we also created the necessary thunks in\nBound_method_expression::do_flatten and\nInterface_field_reference_expression::do_get_backend.  However, when\nthe thunks were created there, they did not go through the\norder_evaluations pass.  This almost always worked, but failed in the\ncase in which the function being thunked returned multiple results, as\norder_evaluations takes the necessary step of moving the\nCall_expression into its own statement, and that would not happen when\norder_evaluations was not called.  Avoid hiding errors like this by\nchanging those methods to only lookup the previously created thunk,\nrather than creating it if it was not already created.\n\nThe test case for this is https://golang.org/cl/363156.\n\nFixes https://golang.org/issue/49512\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/363274", "tree": {"sha": "e3a5bf4f89dd612ffcb61e7277d2956cdc9ef830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3a5bf4f89dd612ffcb61e7277d2956cdc9ef830"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7846156274db4c58317871c7d5e049e6f2b0ca10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7846156274db4c58317871c7d5e049e6f2b0ca10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7846156274db4c58317871c7d5e049e6f2b0ca10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7846156274db4c58317871c7d5e049e6f2b0ca10/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083fd73202fb7387c16b6c9beab9841939a62acb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083fd73202fb7387c16b6c9beab9841939a62acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/083fd73202fb7387c16b6c9beab9841939a62acb"}], "stats": {"total": 72, "additions": 61, "deletions": 11}, "files": [{"sha": "05e47ec3fa9a1d4f876ac33d926d941aff4ecc1b", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7846156274db4c58317871c7d5e049e6f2b0ca10/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7846156274db4c58317871c7d5e049e6f2b0ca10/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=7846156274db4c58317871c7d5e049e6f2b0ca10", "patch": "@@ -1,4 +1,4 @@\n-128ea3dce9b8753167f33d0a96bd093a6cbd58b8\n+3e9f4ee16683883ccfb8661d99318c74bb7a4bef\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "797028213368259e3d7b98315c8629b0ea2320dc", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7846156274db4c58317871c7d5e049e6f2b0ca10/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7846156274db4c58317871c7d5e049e6f2b0ca10/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=7846156274db4c58317871c7d5e049e6f2b0ca10", "patch": "@@ -7981,7 +7981,7 @@ Bound_method_expression::do_check_types(Gogo*)\n Bound_method_expression::Method_value_thunks\n   Bound_method_expression::method_value_thunks;\n \n-// Find or create the thunk for METHOD.\n+// Find or create the thunk for FN.\n \n Named_object*\n Bound_method_expression::create_thunk(Gogo* gogo, const Method* method,\n@@ -8078,14 +8078,28 @@ Bound_method_expression::create_thunk(Gogo* gogo, const Method* method,\n   gogo->add_statement(s);\n   Block* b = gogo->finish_block(loc);\n   gogo->add_block(b, loc);\n+\n+  // This is called after lowering but before determine_types.\n   gogo->lower_block(new_no, b);\n-  gogo->flatten_block(new_no, b);\n+\n   gogo->finish_function(loc);\n \n   ins.first->second = new_no;\n   return new_no;\n }\n \n+// Look up a thunk for FN.\n+\n+Named_object*\n+Bound_method_expression::lookup_thunk(Named_object* fn)\n+{\n+  Method_value_thunks::const_iterator p =\n+    Bound_method_expression::method_value_thunks.find(fn);\n+  if (p == Bound_method_expression::method_value_thunks.end())\n+    return NULL;\n+  return p->second;\n+}\n+\n // Return an expression to check *REF for nil while dereferencing\n // according to FIELD_INDEXES.  Update *REF to build up the field\n // reference.  This is a static function so that we don't have to\n@@ -8129,10 +8143,11 @@ Bound_method_expression::do_flatten(Gogo* gogo, Named_object*,\n {\n   Location loc = this->location();\n \n-  Named_object* thunk = Bound_method_expression::create_thunk(gogo,\n-\t\t\t\t\t\t\t      this->method_,\n-\t\t\t\t\t\t\t      this->function_);\n-  if (thunk->is_erroneous())\n+  Named_object* thunk = Bound_method_expression::lookup_thunk(this->function_);\n+\n+  // The thunk should have been created during the\n+  // create_function_descriptors pass.\n+  if (thunk == NULL || thunk->is_erroneous())\n     {\n       go_assert(saw_errors());\n       return Expression::make_error(loc);\n@@ -14757,14 +14772,34 @@ Interface_field_reference_expression::create_thunk(Gogo* gogo,\n   gogo->add_statement(s);\n   Block* b = gogo->finish_block(loc);\n   gogo->add_block(b, loc);\n+\n+  // This is called after lowering but before determine_types.\n   gogo->lower_block(new_no, b);\n-  gogo->flatten_block(new_no, b);\n+\n   gogo->finish_function(loc);\n \n   ins.first->second->push_back(std::make_pair(name, new_no));\n   return new_no;\n }\n \n+// Lookup a thunk to call method NAME on TYPE.\n+\n+Named_object*\n+Interface_field_reference_expression::lookup_thunk(Interface_type* type,\n+\t\t\t\t\t\t   const std::string& name)\n+{\n+  Interface_method_thunks::const_iterator p =\n+    Interface_field_reference_expression::interface_method_thunks.find(type);\n+  if (p == Interface_field_reference_expression::interface_method_thunks.end())\n+    return NULL;\n+  for (Method_thunks::const_iterator pm = p->second->begin();\n+       pm != p->second->end();\n+       ++pm)\n+    if (pm->first == name)\n+      return pm->second;\n+  return NULL;\n+}\n+\n // Get the backend representation for a method value.\n \n Bexpression*\n@@ -14778,9 +14813,11 @@ Interface_field_reference_expression::do_get_backend(Translate_context* context)\n     }\n \n   Named_object* thunk =\n-    Interface_field_reference_expression::create_thunk(context->gogo(),\n-\t\t\t\t\t\t       type, this->name_);\n-  if (thunk->is_erroneous())\n+    Interface_field_reference_expression::lookup_thunk(type, this->name_);\n+\n+  // The thunk should have been created during the\n+  // create_function_descriptors pass.\n+  if (thunk == NULL || thunk->is_erroneous())\n     {\n       go_assert(saw_errors());\n       return context->backend()->error_expression();"}, {"sha": "92e8d8d96b4d382adc0a60d9104f829aebf54bf4", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7846156274db4c58317871c7d5e049e6f2b0ca10/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7846156274db4c58317871c7d5e049e6f2b0ca10/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=7846156274db4c58317871c7d5e049e6f2b0ca10", "patch": "@@ -3405,6 +3405,10 @@ class Bound_method_expression : public Expression\n   static Named_object*\n   create_thunk(Gogo*, const Method* method, Named_object* function);\n \n+  // Look up a thunk.\n+  static Named_object*\n+  lookup_thunk(Named_object* function);\n+\n  protected:\n   int\n   do_traverse(Traverse*);\n@@ -3578,6 +3582,10 @@ class Interface_field_reference_expression : public Expression\n   static Named_object*\n   create_thunk(Gogo*, Interface_type* type, const std::string& name);\n \n+  // Look up a thunk.\n+  static Named_object*\n+  lookup_thunk(Interface_type* type, const std::string& name);\n+\n   // Return an expression for the pointer to the function to call.\n   Expression*\n   get_function();"}, {"sha": "290d294e83be127c4f4ee54aebb2447c3abff7aa", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7846156274db4c58317871c7d5e049e6f2b0ca10/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7846156274db4c58317871c7d5e049e6f2b0ca10/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=7846156274db4c58317871c7d5e049e6f2b0ca10", "patch": "@@ -3430,6 +3430,11 @@ Create_function_descriptors::expression(Expression** pexpr)\n \t      if (args->traverse(this) == TRAVERSE_EXIT)\n \t\treturn TRAVERSE_EXIT;\n \t    }\n+\n+\t  // Traverse the subexpressions of the function, if any.\n+\t  if (fn->traverse_subexpressions(this) == TRAVERSE_EXIT)\n+\t    return TRAVERSE_EXIT;\n+\n \t  return TRAVERSE_SKIP_COMPONENTS;\n \t}\n     }"}]}