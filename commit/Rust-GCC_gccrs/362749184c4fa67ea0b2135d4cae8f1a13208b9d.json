{"sha": "362749184c4fa67ea0b2135d4cae8f1a13208b9d", "node_id": "C_kwDOANBUbNoAKDM2Mjc0OTE4NGM0ZmE2N2VhMGIyMTM1ZDRjYWU4ZjFhMTMyMDhiOWQ", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-07-29T13:45:40Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-08-25T11:00:41Z"}, "message": "LoongArch: add model attribute\n\nA linker script and/or a section attribute may locate some object\nspecially, so we need to handle the code model for such objects\ndifferently than the -mcmodel setting. This happens when the Linux\nkernel loads a module with per-CPU variables.\n\nAdd an attribute to override the code model for a specific variable.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch-protos.h (loongarch_symbol_type):\n\tAdd SYMBOL_PCREL64 and change the description for SYMBOL_PCREL.\n\t* config/loongarch/loongarch.cc (loongarch_attribute_table):\n\tNew attribute table.\n\t(TARGET_ATTRIBUTE_TABLE): Define the target hook.\n\t(loongarch_handle_model_attribute): New static function.\n\t(loongarch_classify_symbol): Take TARGET_CMODEL_EXTREME and the\n\tmodel attribute of SYMBOL_REF_DECL into account returning\n\tSYMBOL_PCREL or SYMBOL_PCREL64.\n\t(loongarch_use_anchors_for_symbol_p): New static function.\n\t(TARGET_USE_ANCHORS_FOR_SYMBOL_P): Define the target hook.\n\t(loongarch_symbol_extreme_p): New static function.\n\t(loongarch_symbolic_constant_p): Handle SYMBOL_PCREL64.\n\t(loongarch_symbol_insns): Likewise.\n\t(loongarch_split_symbol_type): Likewise.\n\t(loongarch_split_symbol): Check SYMBOL_PCREL64 instead of\n\tTARGET_CMODEL_EXTREME for PC-relative addressing.\n\t(loongarch_print_operand_reloc): Likewise.\n\t* doc/extend.texi (Variable Attributes): Document new\n\tLoongArch specific attribute.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/attr-model-test.c: New test.\n\t* gcc.target/loongarch/attr-model-1.c: New test.\n\t* gcc.target/loongarch/attr-model-2.c: New test.\n\t* gcc.target/loongarch/attr-model-diag.c: New test.", "tree": {"sha": "1bd015b41d3e2da7a4edf6a6e3c7303eecd2e145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bd015b41d3e2da7a4edf6a6e3c7303eecd2e145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/362749184c4fa67ea0b2135d4cae8f1a13208b9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCYwdWWgAKCRCsqtIOGecQ\n48BEAQDpMEfY+++r5oZk9qHxAsDA9el2Lp/hml7EXWfIpBvvJwD/QzuI/0HYObbs\nDaPg7jnSw15ttVWRkxxD5FGiNPSWpwY=\n=CXHW\n-----END PGP SIGNATURE-----", "payload": "tree 1bd015b41d3e2da7a4edf6a6e3c7303eecd2e145\nparent a45b7b19e1364dd7b0066df49d458b05ba3c72d1\nauthor Xi Ruoyao <xry111@xry111.site> 1659102340 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1661425241 +0800\n\nLoongArch: add model attribute\n\nA linker script and/or a section attribute may locate some object\nspecially, so we need to handle the code model for such objects\ndifferently than the -mcmodel setting. This happens when the Linux\nkernel loads a module with per-CPU variables.\n\nAdd an attribute to override the code model for a specific variable.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch-protos.h (loongarch_symbol_type):\n\tAdd SYMBOL_PCREL64 and change the description for SYMBOL_PCREL.\n\t* config/loongarch/loongarch.cc (loongarch_attribute_table):\n\tNew attribute table.\n\t(TARGET_ATTRIBUTE_TABLE): Define the target hook.\n\t(loongarch_handle_model_attribute): New static function.\n\t(loongarch_classify_symbol): Take TARGET_CMODEL_EXTREME and the\n\tmodel attribute of SYMBOL_REF_DECL into account returning\n\tSYMBOL_PCREL or SYMBOL_PCREL64.\n\t(loongarch_use_anchors_for_symbol_p): New static function.\n\t(TARGET_USE_ANCHORS_FOR_SYMBOL_P): Define the target hook.\n\t(loongarch_symbol_extreme_p): New static function.\n\t(loongarch_symbolic_constant_p): Handle SYMBOL_PCREL64.\n\t(loongarch_symbol_insns): Likewise.\n\t(loongarch_split_symbol_type): Likewise.\n\t(loongarch_split_symbol): Check SYMBOL_PCREL64 instead of\n\tTARGET_CMODEL_EXTREME for PC-relative addressing.\n\t(loongarch_print_operand_reloc): Likewise.\n\t* doc/extend.texi (Variable Attributes): Document new\n\tLoongArch specific attribute.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/attr-model-test.c: New test.\n\t* gcc.target/loongarch/attr-model-1.c: New test.\n\t* gcc.target/loongarch/attr-model-2.c: New test.\n\t* gcc.target/loongarch/attr-model-diag.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362749184c4fa67ea0b2135d4cae8f1a13208b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/362749184c4fa67ea0b2135d4cae8f1a13208b9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/362749184c4fa67ea0b2135d4cae8f1a13208b9d/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a45b7b19e1364dd7b0066df49d458b05ba3c72d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45b7b19e1364dd7b0066df49d458b05ba3c72d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45b7b19e1364dd7b0066df49d458b05ba3c72d1"}], "stats": {"total": 259, "additions": 238, "deletions": 21}, "files": [{"sha": "77b2217247dfb60dfbba3867cdcb16c1fd619708", "filename": "gcc/config/loongarch/loongarch-protos.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Fconfig%2Floongarch%2Floongarch-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Fconfig%2Floongarch%2Floongarch-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-protos.h?ref=362749184c4fa67ea0b2135d4cae8f1a13208b9d", "patch": "@@ -28,7 +28,12 @@ along with GCC; see the file COPYING3.  If not see\n        The symbol's value will be loaded directly from the GOT.\n \n    SYMBOL_PCREL\n-       The symbol's value will be loaded directly from data section.\n+       The symbol's value will be loaded directly from data section within\n+       +/- 2GiB range.\n+\n+   SYMBOL_PCREL64\n+       The symbol's value will be loaded directly from data section within\n+       +/- 8EiB range.\n \n    SYMBOL_TLS\n        A thread-local symbol.\n@@ -42,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n enum loongarch_symbol_type {\n   SYMBOL_GOT_DISP,\n   SYMBOL_PCREL,\n+  SYMBOL_PCREL64,\n   SYMBOL_TLS,\n   SYMBOL_TLS_IE,\n   SYMBOL_TLS_LE,"}, {"sha": "77e3a10539042ef970ebda9561469ba76c8de23c", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 170, "deletions": 20, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=362749184c4fa67ea0b2135d4cae8f1a13208b9d", "patch": "@@ -1633,16 +1633,40 @@ loongarch_rtx_constant_in_small_data_p (machine_mode mode)\n static enum loongarch_symbol_type\n loongarch_classify_symbol (const_rtx x)\n {\n+  enum loongarch_symbol_type pcrel =\n+    TARGET_CMODEL_EXTREME ? SYMBOL_PCREL64 : SYMBOL_PCREL;\n+\n   if (!SYMBOL_REF_P (x))\n-    return SYMBOL_PCREL;\n+    return pcrel;\n \n   if (SYMBOL_REF_TLS_MODEL (x))\n     return SYMBOL_TLS;\n \n   if (!loongarch_symbol_binds_local_p (x))\n     return SYMBOL_GOT_DISP;\n \n-  return SYMBOL_PCREL;\n+  tree t = SYMBOL_REF_DECL (x);\n+  if (!t)\n+    return pcrel;\n+\n+  t = lookup_attribute (\"model\", DECL_ATTRIBUTES (t));\n+  if (!t)\n+    return pcrel;\n+\n+  t = TREE_VALUE (TREE_VALUE (t));\n+\n+  /* loongarch_handle_model_attribute should reject other values.  */\n+  gcc_assert (TREE_CODE (t) == STRING_CST);\n+\n+  const char *model = TREE_STRING_POINTER (t);\n+  if (strcmp (model, \"normal\") == 0)\n+    return SYMBOL_PCREL;\n+  if (strcmp (model, \"extreme\") == 0)\n+    return SYMBOL_PCREL64;\n+\n+  /* loongarch_handle_model_attribute should reject unknown model\n+     name.  */\n+  gcc_unreachable ();\n }\n \n /* Classify the base of symbolic expression X, given that X appears in\n@@ -1695,6 +1719,7 @@ loongarch_symbolic_constant_p (rtx x, enum loongarch_symbol_type *symbol_type)\n     case SYMBOL_TLSGD:\n     case SYMBOL_TLSLDM:\n     case SYMBOL_PCREL:\n+    case SYMBOL_PCREL64:\n       /* GAS rejects offsets outside the range [-2^31, 2^31-1].  */\n       return sext_hwi (INTVAL (offset), 32) == INTVAL (offset);\n \n@@ -1729,6 +1754,9 @@ loongarch_symbol_insns (enum loongarch_symbol_type type, machine_mode mode)\n     case SYMBOL_TLSLDM:\n       return 3;\n \n+    case SYMBOL_PCREL64:\n+      return 5;\n+\n     case SYMBOL_TLS:\n       /* We don't treat a bare TLS symbol as a constant.  */\n       return 0;\n@@ -1833,14 +1861,15 @@ loongarch_valid_offset_p (rtx x, machine_mode mode)\n   return true;\n }\n \n-/* Should a symbol of type SYMBOL_TYPE should be split in two?  */\n+/* Should a symbol of type SYMBOL_TYPE should be split in two or more?  */\n \n bool\n loongarch_split_symbol_type (enum loongarch_symbol_type symbol_type)\n {\n   switch (symbol_type)\n     {\n     case SYMBOL_PCREL:\n+    case SYMBOL_PCREL64:\n     case SYMBOL_GOT_DISP:\n     case SYMBOL_TLS_IE:\n     case SYMBOL_TLS_LE:\n@@ -2718,6 +2747,20 @@ loongarch_force_address (rtx x, machine_mode mode)\n   return x;\n }\n \n+static bool\n+loongarch_symbol_extreme_p (enum loongarch_symbol_type type)\n+{\n+  switch (type)\n+    {\n+      case SYMBOL_PCREL:\n+\treturn false;\n+      case SYMBOL_PCREL64:\n+\treturn true;\n+      default:\n+\treturn TARGET_CMODEL_EXTREME;\n+    }\n+}\n+\n /* If MODE is MAX_MACHINE_MODE, ADDR appears as a move operand, otherwise\n    it appears in a MEM of that mode.  Return true if ADDR is a legitimate\n    constant in that context and can be split into high and low parts.\n@@ -2757,7 +2800,7 @@ loongarch_split_symbol (rtx temp, rtx addr, machine_mode mode, rtx *low_out)\n   high = gen_rtx_HIGH (Pmode, copy_rtx (addr));\n   high = loongarch_force_temporary (temp, high);\n \n-  if (TARGET_CMODEL_EXTREME && can_create_pseudo_p ())\n+  if (loongarch_symbol_extreme_p (symbol_type) && can_create_pseudo_p ())\n     {\n       gcc_assert (TARGET_EXPLICIT_RELOCS);\n \n@@ -2771,14 +2814,16 @@ loongarch_split_symbol (rtx temp, rtx addr, machine_mode mode, rtx *low_out)\n   if (low_out)\n     switch (symbol_type)\n       {\n-      case SYMBOL_PCREL:\n-\t{\n-\t  if (TARGET_CMODEL_EXTREME && can_create_pseudo_p ())\n+      case SYMBOL_PCREL64:\n+\tif (can_create_pseudo_p ())\n+\t  {\n \t    *low_out = gen_rtx_PLUS (Pmode, high, temp1);\n-\t  else\n-\t    *low_out = gen_rtx_LO_SUM (Pmode, high, addr);\n-\t  break;\n-\t}\n+\t    break;\n+\t  }\n+\t/* fall through */\n+      case SYMBOL_PCREL:\n+\t*low_out = gen_rtx_LO_SUM (Pmode, high, addr);\n+\tbreak;\n \n       case SYMBOL_GOT_DISP:\n \t/* SYMBOL_GOT_DISP symbols are loaded from the GOT.  */\n@@ -4745,22 +4790,23 @@ loongarch_print_operand_reloc (FILE *file, rtx op, bool hi64_part,\n \t\t\t       bool hi_reloc)\n {\n   const char *reloc;\n+  enum loongarch_symbol_type symbol_type =\n+    loongarch_classify_symbolic_expression (op);\n \n-  if (TARGET_CMODEL_EXTREME)\n+  if (loongarch_symbol_extreme_p (symbol_type))\n     gcc_assert (TARGET_EXPLICIT_RELOCS);\n \n-  switch (loongarch_classify_symbolic_expression (op))\n+  switch (symbol_type)\n     {\n-    case SYMBOL_PCREL:\n+    case SYMBOL_PCREL64:\n       if (hi64_part)\n \t{\n-\t  if (TARGET_CMODEL_EXTREME)\n-\t    reloc = hi_reloc ? \"%pc64_hi12\" : \"%pc64_lo20\";\n-\t  else\n-\t    gcc_unreachable ();\n+\t  reloc = hi_reloc ? \"%pc64_hi12\" : \"%pc64_lo20\";\n+\t  break;\n \t}\n-      else\n-\treloc = hi_reloc ? \"%pc_hi20\" : \"%pc_lo12\";\n+      /* fall through */\n+    case SYMBOL_PCREL:\n+      reloc = hi_reloc ? \"%pc_hi20\" : \"%pc_lo12\";\n       break;\n \n     case SYMBOL_GOT_DISP:\n@@ -6316,6 +6362,104 @@ loongarch_starting_frame_offset (void)\n   return crtl->outgoing_args_size;\n }\n \n+static tree\n+loongarch_handle_model_attribute (tree *node, tree name, tree arg, int,\n+\t\t\t\t  bool *no_add_attrs)\n+{\n+  tree decl = *node;\n+  if (TREE_CODE (decl) == VAR_DECL)\n+    {\n+      if (DECL_THREAD_LOCAL_P (decl))\n+\t{\n+\t  error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t    \"%qE attribute cannot be specified for thread-local \"\n+\t\t    \"variables\", name);\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+      if (DECL_CONTEXT (decl)\n+\t  && TREE_CODE (DECL_CONTEXT (decl)) == FUNCTION_DECL\n+\t  && !TREE_STATIC (decl))\n+\t{\n+\t  error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t    \"%qE attribute cannot be specified for local \"\n+\t\t    \"variables\", name);\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+      if (DECL_REGISTER (decl))\n+\t{\n+\t  error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t    \"%qE attribute cannot be specified for register \"\n+\t\t    \"variables\", name);\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+      if (!TARGET_EXPLICIT_RELOCS)\n+\t{\n+\t  error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t    \"%qE attribute requires %s\", name, \"-mexplicit-relocs\");\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+\n+      arg = TREE_VALUE (arg);\n+      if (TREE_CODE (arg) != STRING_CST)\n+\t{\n+\t  error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t    \"invalid argument of %qE attribute\", name);\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+\n+      const char *model = TREE_STRING_POINTER (arg);\n+      if (strcmp (model, \"normal\") != 0\n+\t  && strcmp (model, \"extreme\") != 0)\n+\t{\n+\t  error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t    \"invalid argument of %qE attribute\", name);\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+\n+      if (lookup_attribute (\"model\", DECL_ATTRIBUTES (decl)))\n+\t{\n+\t  error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t    \"multiple %qE attribute\", name);\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+    }\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+  return NULL_TREE;\n+}\n+\n+static const struct attribute_spec loongarch_attribute_table[] =\n+{\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n+       affects_type_identity, handler, exclude } */\n+  { \"model\", 1, 1, true, false, false, false,\n+    loongarch_handle_model_attribute, NULL },\n+  /* The last attribute spec is set to be NULL.  */\n+  {}\n+};\n+\n+bool\n+loongarch_use_anchors_for_symbol_p (const_rtx symbol)\n+{\n+  tree decl = SYMBOL_REF_DECL (symbol);\n+\n+  /* The section anchor optimization may break custom address model.  */\n+  if (decl && lookup_attribute (\"model\", DECL_ATTRIBUTES (decl)))\n+    return false;\n+\n+  return default_use_anchors_for_symbol_p (symbol);\n+}\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\"\n@@ -6504,6 +6648,12 @@ loongarch_starting_frame_offset (void)\n #undef  TARGET_HAVE_SPECULATION_SAFE_VALUE\n #define TARGET_HAVE_SPECULATION_SAFE_VALUE speculation_safe_value_not_needed\n \n+#undef  TARGET_ATTRIBUTE_TABLE\n+#define TARGET_ATTRIBUTE_TABLE loongarch_attribute_table\n+\n+#undef  TARGET_USE_ANCHORS_FOR_SYMBOL_P\n+#define TARGET_USE_ANCHORS_FOR_SYMBOL_P loongarch_use_anchors_for_symbol_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-loongarch.h\""}, {"sha": "97d9ccb0e629dfdee194349f3eb260a7e31b497e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=362749184c4fa67ea0b2135d4cae8f1a13208b9d", "patch": "@@ -7314,6 +7314,7 @@ attributes.\n * Blackfin Variable Attributes::\n * H8/300 Variable Attributes::\n * IA-64 Variable Attributes::\n+* LoongArch Variable Attributes::\n * M32R/D Variable Attributes::\n * MeP Variable Attributes::\n * Microsoft Windows Variable Attributes::\n@@ -8098,6 +8099,22 @@ defined by shared libraries.\n \n @end table\n \n+@node LoongArch Variable Attributes\n+@subsection LoongArch Variable Attributes\n+\n+One attribute is currently defined for the LoongArch.\n+\n+@table @code\n+@item model(\"@var{name}\")\n+@cindex @code{model} variable attribute, LoongArch\n+Use this attribute on the LoongArch to use a different code model for\n+addressing this variable, than the code model specified by the global\n+@option{-mcmodel} option.  This attribute is mostly useful if a\n+@code{section} attribute and/or a linker script will locate this object\n+specially.  Currently the only supported values of @var{name} are\n+@code{normal} and @code{extreme}.\n+@end table\n+\n @node M32R/D Variable Attributes\n @subsection M32R/D Variable Attributes\n "}, {"sha": "916d715b98b491f5c5bbf5af638e45fc0f2739c1", "filename": "gcc/testsuite/gcc.target/loongarch/attr-model-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fattr-model-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fattr-model-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fattr-model-1.c?ref=362749184c4fa67ea0b2135d4cae8f1a13208b9d", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mexplicit-relocs -mcmodel=normal -O2\" } */\n+/* { dg-final { scan-assembler-times \"%pc64_hi12\" 2 } } */\n+\n+#define ATTR_MODEL_TEST\n+#include \"attr-model-test.c\""}, {"sha": "a74c795ac3e0c06e0a694ceec3d3686a0b90db49", "filename": "gcc/testsuite/gcc.target/loongarch/attr-model-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fattr-model-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fattr-model-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fattr-model-2.c?ref=362749184c4fa67ea0b2135d4cae8f1a13208b9d", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mexplicit-relocs -mcmodel=extreme -O2\" } */\n+/* { dg-final { scan-assembler-times \"%pc64_hi12\" 3 } } */\n+\n+#define ATTR_MODEL_TEST\n+#include \"attr-model-test.c\""}, {"sha": "88beede74df20aac827ca2e6e717b69ec38d9dc6", "filename": "gcc/testsuite/gcc.target/loongarch/attr-model-diag.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fattr-model-diag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fattr-model-diag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fattr-model-diag.c?ref=362749184c4fa67ea0b2135d4cae8f1a13208b9d", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mexplicit-relocs\" } */\n+\n+__thread int x __attribute__((model(\"extreme\"))); /* { dg-error \"attribute cannot be specified for thread-local variables\" } */\n+register int y __asm__(\"tp\") __attribute__((model(\"extreme\"))); /* { dg-error \"attribute cannot be specified for register variables\" } */\n+int z __attribute__((model(114))); /* { dg-error \"invalid argument\" } */\n+int t __attribute__((model(\"good\"))); /* { dg-error \"invalid argument\" } */"}, {"sha": "5b61a7af9c3535f6b22b41c37193948495da1166", "filename": "gcc/testsuite/gcc.target/loongarch/attr-model-test.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fattr-model-test.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/362749184c4fa67ea0b2135d4cae8f1a13208b9d/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fattr-model-test.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fattr-model-test.c?ref=362749184c4fa67ea0b2135d4cae8f1a13208b9d", "patch": "@@ -0,0 +1,25 @@\n+#ifdef ATTR_MODEL_TEST\n+int x __attribute__((model(\"extreme\")));\n+int y __attribute__((model(\"normal\")));\n+int z;\n+\n+int\n+test(void)\n+{\n+  return x + y + z;\n+}\n+\n+/* The following will be used for kernel per-cpu storage implemention. */\n+\n+register char *per_cpu_base __asm__(\"r21\");\n+static int counter __attribute__((section(\".data..percpu\"), model(\"extreme\")));\n+\n+void\n+inc_counter(void)\n+{\n+  int *ptr = (int *)(per_cpu_base + (long)&counter);\n+  (*ptr)++;\n+}\n+#endif\n+\n+int dummy;"}]}