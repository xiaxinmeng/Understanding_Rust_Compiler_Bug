{"sha": "a1390a6ef6adec0f9abf2b41de88275bd3bd228d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEzOTBhNmVmNmFkZWMwZjlhYmYyYjQxZGU4ODI3NWJkM2JkMjI4ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-05T10:25:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-05T10:25:05Z"}, "message": "[multiple changes]\n\n2013-07-05  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Add missing documentation for pragmas.\n\t* sem_ch8.adb: Minor reformatting.\n\t* gnat_ugn.texi: Document that -gnatR and -gnatD cannot be used\n\ttogether.\n\n2013-07-05  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch12.ads, sem_ch12.adb (Need_Subprogram_Instance_Body): Force\n\tinstance of subprogram body in SPARK mode, by testing Expander_Active\n\t(set in SPARK mode) instead of Full_Expander_Active (not set in\n\tSPARK mode).\n\t* sem_ch8.adb: Minor reformatting.\n\nFrom-SVN: r200700", "tree": {"sha": "0ae15f5205f8ee1f101620572d74673b26372b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ae15f5205f8ee1f101620572d74673b26372b63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1390a6ef6adec0f9abf2b41de88275bd3bd228d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1390a6ef6adec0f9abf2b41de88275bd3bd228d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1390a6ef6adec0f9abf2b41de88275bd3bd228d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1390a6ef6adec0f9abf2b41de88275bd3bd228d/comments", "author": null, "committer": null, "parents": [{"sha": "d9adb08caad78c36048380338a1a481dc157bf5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9adb08caad78c36048380338a1a481dc157bf5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9adb08caad78c36048380338a1a481dc157bf5f"}], "stats": {"total": 99, "additions": 91, "deletions": 8}, "files": [{"sha": "72d6bb40f14d90df8eab22faf015c71acb9b5329", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1390a6ef6adec0f9abf2b41de88275bd3bd228d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1390a6ef6adec0f9abf2b41de88275bd3bd228d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a1390a6ef6adec0f9abf2b41de88275bd3bd228d", "patch": "@@ -1,3 +1,18 @@\n+2013-07-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Add missing documentation for pragmas.\n+\t* sem_ch8.adb: Minor reformatting.\n+\t* gnat_ugn.texi: Document that -gnatR and -gnatD cannot be used\n+\ttogether.\n+\n+2013-07-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch12.ads, sem_ch12.adb (Need_Subprogram_Instance_Body): Force\n+\tinstance of subprogram body in SPARK mode, by testing Expander_Active\n+\t(set in SPARK mode) instead of Full_Expander_Active (not set in\n+\tSPARK mode).\n+\t* sem_ch8.adb: Minor reformatting.\n+\n 2013-07-05  Robert Dewar  <dewar@adacore.com>\n \n \t* freeze.adb (Freeze_Entity): Remove test of obsolete flag"}, {"sha": "67ba282793df8c9515f7aa08b05b1262c364c18c", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1390a6ef6adec0f9abf2b41de88275bd3bd228d/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1390a6ef6adec0f9abf2b41de88275bd3bd228d/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=a1390a6ef6adec0f9abf2b41de88275bd3bd228d", "patch": "@@ -195,12 +195,14 @@ Implementation Defined Pragmas\n * Pragma Optimize_Alignment::\n * Pragma Ordered::\n * Pragma Overflow_Mode::\n+* Pragma Overriding_Renamings::\n * Pragma Partition_Elaboration_Policy::\n * Pragma Passive::\n * Pragma Persistent_BSS::\n * Pragma Polling::\n * Pragma Postcondition::\n * Pragma Precondition::\n+* Pragma Predicate::\n * Pragma Preelaborable_Initialization::\n * Pragma Preelaborate_05::\n * Pragma Priority_Specific_Dispatching::\n@@ -1006,6 +1008,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Polling::\n * Pragma Postcondition::\n * Pragma Precondition::\n+* Pragma Predicate::\n * Pragma Preelaborable_Initialization::\n * Pragma Preelaborate_05::\n * Pragma Priority_Specific_Dispatching::\n@@ -4727,6 +4730,7 @@ overflow checking, but does not affect the overflow mode.\n @unnumberedsec Pragma Overriding_Renamings\n @findex Overriding_Renamings\n @cindex Rational profile\n+@cindex Rational compatibility\n @noindent\n Syntax:\n \n@@ -4735,10 +4739,23 @@ pragma Overriding_Renamings;\n @end smallexample\n \n @noindent\n-\n-This is a GNAT pragma to simplify porting legacy code accepted by the Rational\n+This is a GNAT configuration pragma to simplify porting\n+legacy code accepted by the Rational\n Ada compiler. In the presence of this pragma, a renaming declaration that\n-renames an inherited operation declared in the same scope is legal, even though\n+renames an inherited operation declared in the same scope is legal if selected\n+notation is used as in:\n+\n+@smallexample @c ada\n+pragma Overriding_Renamings;\n+...\n+package R is\n+  function F (..);\n+  ...\n+  function F (..) renames R.F;\n+end R;\n+@end smallexample\n+\n+even though\n RM 8.3 (15) stipulates that an overridden operation is not visible within the\n declaration of the overriding operation.\n \n@@ -5059,6 +5076,47 @@ inlining (-gnatN option set) are accepted and legality-checked\n by the compiler, but are ignored at run-time even if precondition\n checking is enabled.\n \n+@node Pragma Predicate\n+@unnumberedsec Pragma Predicate\n+@findex Predicate\n+@findex Predicate pragma\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Predicate\n+  ([Entity =>] type_LOCAL_NAME,\n+   [Check  =>] EXPRESSION);\n+@end smallexample\n+\n+@noindent\n+This pragma (available in all versions of Ada in GNAT) encompasses both\n+the @code{Static_Predicate} and @code{Dynamic_Predicate} aspects in\n+Ada 2012. A predicate is regarded as static if it has an allowed form\n+for @code{Static_Predicate} and is otherwise treated as a\n+@code{Dynamic_Predicate}. Otherwise, predicates specified by this\n+pragma behave exactly as described in the Ada 2012 reference manual.\n+For example, if we have\n+\n+@smallexample @c ada\n+type R is range 1 .. 10;\n+subtype S is R;\n+pragma Predicate (Entity => S, Check => S not in 4 .. 6);\n+subtype Q is R\n+pragma Predicate (Entity => Q, Check => F(Q) or G(Q));\n+@end smallexample\n+\n+@noindent\n+the effect is identical to the following Ada 2012 code:\n+\n+@smallexample @c ada\n+type R is range 1 .. 10;\n+subtype S is R with\n+  Static_Predicate => S not in 4 .. 6;\n+subtype Q is R with\n+  Dynamic_Predicate => F(Q) or G(Q);\n+@end smallexample\n+\n @node Pragma Preelaborable_Initialization\n @unnumberedsec Pragma Preelaborable_Initialization\n @findex Preelaborable_Initialization"}, {"sha": "da16217fe29d247276cc5c88bf533c4ec4b94e02", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1390a6ef6adec0f9abf2b41de88275bd3bd228d/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1390a6ef6adec0f9abf2b41de88275bd3bd228d/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=a1390a6ef6adec0f9abf2b41de88275bd3bd228d", "patch": "@@ -3726,7 +3726,8 @@ users guide.\n @end ifset\n Create expanded source files for source level debugging. This switch\n also suppress generation of cross-reference information\n-(see @option{-gnatx}).\n+(see @option{-gnatx}). Note that this switch is not allowed if a previous\n+-gnatR switch has been given, since these two switches are not compatible.\n \n @item ^-gnateA^/ALIASING_CHECK^\n @cindex @option{-gnateA} (@command{gcc})\n@@ -4005,6 +4006,8 @@ Treat pragma Restrictions as Restriction_Warnings.\n @item ^-gnatR@r{[}0@r{/}1@r{/}2@r{/}3@r{[}s@r{]]}^/REPRESENTATION_INFO^\n @cindex @option{-gnatR} (@command{gcc})\n Output representation information for declared types and objects.\n+Note that this switch is not allowed if a previous\n+-gnatD switch has been given, since these two switches are not compatible.\n \n @item -gnats\n @cindex @option{-gnats} (@command{gcc})"}, {"sha": "64e75cf6e42ca0054b850a90c8f754648f0320af", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1390a6ef6adec0f9abf2b41de88275bd3bd228d/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1390a6ef6adec0f9abf2b41de88275bd3bd228d/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=a1390a6ef6adec0f9abf2b41de88275bd3bd228d", "patch": "@@ -4367,13 +4367,17 @@ package body Sem_Ch12 is\n       Subp : Entity_Id) return Boolean\n    is\n    begin\n+      --  This complex conditional requires blow by blow comments ???\n+\n       if (Is_In_Main_Unit (N)\n            or else Is_Inlined (Subp)\n            or else Is_Inlined (Alias (Subp)))\n         and then (Operating_Mode = Generate_Code\n                    or else (Operating_Mode = Check_Semantics\n                              and then ASIS_Mode))\n-        and then (Full_Expander_Active or else ASIS_Mode)\n+        --  The following line definitely requires comments, why do we\n+        --  test Expander_Active and not Full_Expander_Active here ???\n+        and then (Expander_Active or ASIS_Mode)\n         and then not ABE_Is_Certain (N)\n         and then not Is_Eliminated (Subp)\n       then"}, {"sha": "450237be243caafed59bb4abc7f083561488ad91", "filename": "gcc/ada/sem_ch12.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1390a6ef6adec0f9abf2b41de88275bd3bd228d/gcc%2Fada%2Fsem_ch12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1390a6ef6adec0f9abf2b41de88275bd3bd228d/gcc%2Fada%2Fsem_ch12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.ads?ref=a1390a6ef6adec0f9abf2b41de88275bd3bd228d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -113,7 +113,6 @@ package Sem_Ch12 is\n    function Need_Subprogram_Instance_Body\n      (N    : Node_Id;\n       Subp : Entity_Id) return Boolean;\n-\n    --  If a subprogram instance is inlined, indicate that the body of it\n    --  must be created, to be used in inlined calls by the back-end. The\n    --  subprogram may be inlined because the generic itself carries the"}, {"sha": "1fbcf685a3d1182220d58e01e0b6ce3c859992b4", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1390a6ef6adec0f9abf2b41de88275bd3bd228d/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1390a6ef6adec0f9abf2b41de88275bd3bd228d/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=a1390a6ef6adec0f9abf2b41de88275bd3bd228d", "patch": "@@ -2816,14 +2816,18 @@ package body Sem_Ch8 is\n \n          --  The following is illegal, because F hides whatever other F may\n          --  be around:\n-         --     function F (..)  renames F;\n+         --     function F (...) renames F;\n \n          elsif Old_S = New_S\n            or else (Nkind (Nam) /= N_Expanded_Name\n                      and then Chars (Old_S) = Chars (New_S))\n          then\n             Error_Msg_N (\"subprogram cannot rename itself\", N);\n \n+         --  This is illegal even if we use a selector:\n+         --     function F (...) renames Pkg.F;\n+         --  because F is still hidden.\n+\n          elsif Nkind (Nam) = N_Expanded_Name\n            and then Entity (Prefix (Nam)) = Current_Scope\n            and then Chars (Selector_Name (Nam)) = Chars (New_S)"}]}