{"sha": "4636c87e232d7df60478859d9a15556d5bc3c0c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYzNmM4N2UyMzJkN2RmNjA0Nzg4NTlkOWExNTU1NmQ1YmMzYzBjOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-20T22:54:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-20T22:54:35Z"}, "message": "re PR c/4389 (Improper constant folding)\n\n\tPR c/4389\n\t* tree.c (host_integerp): Ensure that the constant integer is\n\trepresentable in a HOST_WIDE_INT or an unsigned HOST_WIDE_INT\n\twhen pos is zero or non-zero respectively.  Clarify comment.\n\t* c-format.c (check_format_info_recurse): Fix host_integerp\n\tusage; the pos argument should be zero when assigning to a\n\tsigned HOST_WIDE_INT.\n\n\t* gcc.dg/20020219-1.c: New test.\n\nFrom-SVN: r49914", "tree": {"sha": "92091a1ae9884506ec5a5bd1f121978289726ebf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92091a1ae9884506ec5a5bd1f121978289726ebf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4636c87e232d7df60478859d9a15556d5bc3c0c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4636c87e232d7df60478859d9a15556d5bc3c0c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4636c87e232d7df60478859d9a15556d5bc3c0c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4636c87e232d7df60478859d9a15556d5bc3c0c8/comments", "author": null, "committer": null, "parents": [{"sha": "c98b201bd9e49891ff049835c3ae79897a885071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98b201bd9e49891ff049835c3ae79897a885071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c98b201bd9e49891ff049835c3ae79897a885071"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "235f625222d594eeaa2c8c1ea16d1ec312a2ec0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4636c87e232d7df60478859d9a15556d5bc3c0c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4636c87e232d7df60478859d9a15556d5bc3c0c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4636c87e232d7df60478859d9a15556d5bc3c0c8", "patch": "@@ -1,3 +1,14 @@\n+2002-02-20  Roger Sayle  <roger@eyesopen.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/4389\n+\t* tree.c (host_integerp): Ensure that the constant integer is\n+\trepresentable in a HOST_WIDE_INT or an unsigned HOST_WIDE_INT\n+\twhen pos is zero or non-zero respectively.  Clarify comment.\n+\t* c-format.c (check_format_info_recurse): Fix host_integerp\n+\tusage; the pos argument should be zero when assigning to a\n+\tsigned HOST_WIDE_INT.\n+\n 2002-02-20  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (ix86_expand_vector_move): Use the mode"}, {"sha": "d52cfba7c70e3f73490436877a332c0603ac6c50", "filename": "gcc/c-format.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4636c87e232d7df60478859d9a15556d5bc3c0c8/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4636c87e232d7df60478859d9a15556d5bc3c0c8/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=4636c87e232d7df60478859d9a15556d5bc3c0c8", "patch": "@@ -1,6 +1,6 @@\n /* Check calls to formatted I/O functions (-Wformat).\n-   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1516,13 +1516,12 @@ check_format_info_recurse (status, res, info, format_tree, params, arg_num)\n \t  res->number_non_literal++;\n \t  return;\n \t}\n-      if (!host_integerp (arg1, 1))\n+      if (!host_integerp (arg1, 0)\n+\t  || (offset = tree_low_cst (arg1, 0)) < 0)\n \t{\n \t  res->number_non_literal++;\n \t  return;\n \t}\n-\n-      offset = TREE_INT_CST_LOW (arg1);\n     }\n   if (TREE_CODE (format_tree) != ADDR_EXPR)\n     {"}, {"sha": "90b39b227f1e0fafd8a1cb5c194f687928f43a54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4636c87e232d7df60478859d9a15556d5bc3c0c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4636c87e232d7df60478859d9a15556d5bc3c0c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4636c87e232d7df60478859d9a15556d5bc3c0c8", "patch": "@@ -2,6 +2,8 @@\n \n \t* gcc.c-torture/execute/20020219-1.c: New test.\n \n+\t* gcc.dg/20020219-1.c: New test.\n+\n 2002-02-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/execute/20020216-1.c: New test."}, {"sha": "c879f230db6dd43460fbea24f4f3f08f10dbbe8c", "filename": "gcc/testsuite/gcc.dg/20020219-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4636c87e232d7df60478859d9a15556d5bc3c0c8/gcc%2Ftestsuite%2Fgcc.dg%2F20020219-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4636c87e232d7df60478859d9a15556d5bc3c0c8/gcc%2Ftestsuite%2Fgcc.dg%2F20020219-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020219-1.c?ref=4636c87e232d7df60478859d9a15556d5bc3c0c8", "patch": "@@ -0,0 +1,28 @@\n+/* PR c/4389\n+   This testcase failed because host_integerp (x, 0) was returning\n+   1 even for constants bigger than 2^31.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+struct A {\n+  int a[10000][10000];\n+};\n+int b[2] = { 213151, 0 };\n+\n+void foo (struct A *x, int y)\n+{\n+  if (x->a[9999][9999] != x->a[y][y])\n+    abort ();\n+  if (x->a[9999][9999] != 213151)\n+    abort ();\n+}\n+\n+int main (void)\n+{\n+  struct A *x;\n+  asm (\"\" : \"=r\" (x) : \"0\" (&b[1]));\n+  foo (x - 1, 9999);\n+  exit (0);\n+}"}, {"sha": "5e0210b7676f5413aba751cebf6548cdf6979ab7", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4636c87e232d7df60478859d9a15556d5bc3c0c8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4636c87e232d7df60478859d9a15556d5bc3c0c8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4636c87e232d7df60478859d9a15556d5bc3c0c8", "patch": "@@ -3436,8 +3436,10 @@ tree_int_cst_compare (t1, t2)\n     return 0;\n }\n \n-/* Return 1 if T is an INTEGER_CST that can be represented in a single\n-   HOST_WIDE_INT value.  If POS is nonzero, the result must be positive.  */\n+/* Return 1 if T is an INTEGER_CST that can be manipulated efficiently on\n+   the host.  If POS is zero, the value can be represented in a single\n+   HOST_WIDE_INT.  If POS is nonzero, the value must be positive and can\n+   be represented in a single unsigned HOST_WIDE_INT.  */\n \n int\n host_integerp (t, pos)\n@@ -3449,9 +3451,9 @@ host_integerp (t, pos)\n \t  && ((TREE_INT_CST_HIGH (t) == 0\n \t       && (HOST_WIDE_INT) TREE_INT_CST_LOW (t) >= 0)\n \t      || (! pos && TREE_INT_CST_HIGH (t) == -1\n-\t\t  && (HOST_WIDE_INT) TREE_INT_CST_LOW (t) < 0)\n-\t      || (! pos && TREE_INT_CST_HIGH (t) == 0\n-\t\t  && TREE_UNSIGNED (TREE_TYPE (t)))));\n+\t\t  && (HOST_WIDE_INT) TREE_INT_CST_LOW (t) < 0\n+\t\t  && ! TREE_UNSIGNED (TREE_TYPE (t)))\n+\t      || (pos && TREE_INT_CST_HIGH (t) == 0)));\n }\n \n /* Return the HOST_WIDE_INT least significant bits of T if it is an"}]}