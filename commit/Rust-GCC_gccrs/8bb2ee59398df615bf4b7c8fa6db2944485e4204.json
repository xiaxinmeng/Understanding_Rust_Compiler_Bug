{"sha": "8bb2ee59398df615bf4b7c8fa6db2944485e4204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJiMmVlNTkzOThkZjYxNWJmNGI3YzhmYTZkYjI5NDQ0ODVlNDIwNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-21T09:54:04Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-08-21T09:54:04Z"}, "message": "c-ada-spec.c (dump_ada_function_declaration): Be prepared for broken function declarations where arguments are missing.\n\n\t* c-ada-spec.c (dump_ada_function_declaration): Be prepared for broken\n\tfunction declarations where arguments are missing.  Rename variables.\n\nFrom-SVN: r274794", "tree": {"sha": "c28df75446d4d16e860e5ad965d3e50549546468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c28df75446d4d16e860e5ad965d3e50549546468"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bb2ee59398df615bf4b7c8fa6db2944485e4204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb2ee59398df615bf4b7c8fa6db2944485e4204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bb2ee59398df615bf4b7c8fa6db2944485e4204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb2ee59398df615bf4b7c8fa6db2944485e4204/comments", "author": null, "committer": null, "parents": [{"sha": "73c1f2f00e29ead11de64c8131a52cdf33a04897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c1f2f00e29ead11de64c8131a52cdf33a04897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c1f2f00e29ead11de64c8131a52cdf33a04897"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "c8721406b17a09caa716f109946bcfbcba11fd99", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb2ee59398df615bf4b7c8fa6db2944485e4204/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb2ee59398df615bf4b7c8fa6db2944485e4204/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8bb2ee59398df615bf4b7c8fa6db2944485e4204", "patch": "@@ -1,3 +1,8 @@\n+2019-08-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-ada-spec.c (dump_ada_function_declaration): Be prepared for broken\n+\tfunction declarations where arguments are missing.  Rename variables.\n+\n 2019-08-15  Richard Biener  <rguenther@suse.de>\n \n \t* c-common.c (c_stddef_cpp_builtins): When the GIMPLE FE is"}, {"sha": "38d65a64377872aa259fc6bac2f8d221ee236b36", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb2ee59398df615bf4b7c8fa6db2944485e4204/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb2ee59398df615bf4b7c8fa6db2944485e4204/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=8bb2ee59398df615bf4b7c8fa6db2944485e4204", "patch": "@@ -1589,14 +1589,13 @@ dump_ada_function_declaration (pretty_printer *buffer, tree func,\n \t\t\t       bool is_method, bool is_constructor,\n \t\t\t       bool is_destructor, int spc)\n {\n-  tree arg;\n-  const tree node = TREE_TYPE (func);\n+  tree type = TREE_TYPE (func);\n+  tree arg = TYPE_ARG_TYPES (type);\n+  tree t;\n   char buf[17];\n-  int num = 0, num_args = 0, have_args = true, have_ellipsis = false;\n+  int num, num_args = 0, have_args = true, have_ellipsis = false;\n \n   /* Compute number of arguments.  */\n-  arg = TYPE_ARG_TYPES (node);\n-\n   if (arg)\n     {\n       while (TREE_CHAIN (arg) && arg != error_mark_node)\n@@ -1627,25 +1626,29 @@ dump_ada_function_declaration (pretty_printer *buffer, tree func,\n       pp_left_paren (buffer);\n     }\n \n+  /* For a function, see if we have the corresponding arguments.  */\n   if (TREE_CODE (func) == FUNCTION_DECL)\n-    arg = DECL_ARGUMENTS (func);\n+    {\n+      arg = DECL_ARGUMENTS (func);\n+      for (t = arg, num = 0; t; t = DECL_CHAIN (t))\n+\tnum++;\n+      if (num < num_args)\n+\targ = NULL_TREE;\n+    }\n   else\n     arg = NULL_TREE;\n \n-  if (arg == NULL_TREE)\n+  /* Otherwise, only print the types.  */\n+  if (!arg)\n     {\n       have_args = false;\n-      arg = TYPE_ARG_TYPES (node);\n-\n-      if (arg && TREE_CODE (TREE_VALUE (arg)) == VOID_TYPE)\n-\targ = NULL_TREE;\n+      arg = TYPE_ARG_TYPES (type);\n     }\n \n   if (is_constructor)\n     arg = TREE_CHAIN (arg);\n \n-  /* Print the argument names (if available) & types.  */\n-\n+  /* Print the argument names (if available) and types.  */\n   for (num = 1; num <= num_args; num++)\n     {\n       if (have_args)\n@@ -1663,13 +1666,13 @@ dump_ada_function_declaration (pretty_printer *buffer, tree func,\n \t      pp_string (buffer, buf);\n \t    }\n \n-\t  dump_ada_node (buffer, TREE_TYPE (arg), node, spc, false, true);\n+\t  dump_ada_node (buffer, TREE_TYPE (arg), type, spc, false, true);\n \t}\n       else\n \t{\n \t  sprintf (buf, \"arg%d : \", num);\n \t  pp_string (buffer, buf);\n-\t  dump_ada_node (buffer, TREE_VALUE (arg), node, spc, false, true);\n+\t  dump_ada_node (buffer, TREE_VALUE (arg), type, spc, false, true);\n \t}\n \n       /* If the type is a pointer to a tagged type, we need to differentiate\n@@ -1707,11 +1710,11 @@ dump_ada_function_declaration (pretty_printer *buffer, tree func,\n   if (num_args > 0)\n     pp_right_paren (buffer);\n \n-  if (is_constructor || !VOID_TYPE_P (TREE_TYPE (node)))\n+  if (is_constructor || !VOID_TYPE_P (TREE_TYPE (type)))\n     {\n       pp_string (buffer, \" return \");\n-      tree type = is_constructor ? DECL_CONTEXT (func) : TREE_TYPE (node);\n-      dump_ada_node (buffer, type, type, spc, false, true);\n+      tree rtype = is_constructor ? DECL_CONTEXT (func) : TREE_TYPE (type);\n+      dump_ada_node (buffer, rtype, rtype, spc, false, true);\n     }\n }\n "}, {"sha": "0bd613334a9a5c869d01d6c82f07824e66c327df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb2ee59398df615bf4b7c8fa6db2944485e4204/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb2ee59398df615bf4b7c8fa6db2944485e4204/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8bb2ee59398df615bf4b7c8fa6db2944485e4204", "patch": "@@ -1,3 +1,7 @@\n+2019-08-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-c++-common/dump-ada-spec-15.c: New test.\n+\n 2019-08-21  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/cmse/cmse-9.c: Add quotes to expected"}, {"sha": "a4b54a6a8459aab8fa4b7febf87006a7fbf9fc5e", "filename": "gcc/testsuite/c-c++-common/dump-ada-spec-15.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb2ee59398df615bf4b7c8fa6db2944485e4204/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb2ee59398df615bf4b7c8fa6db2944485e4204/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdump-ada-spec-15.c?ref=8bb2ee59398df615bf4b7c8fa6db2944485e4204", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-ada-spec\" } */\n+\n+extern void (*signal (int __sig, void (*__handler)(int)))(int);\n+\n+/* { dg-final { cleanup-ada-spec } } */"}]}