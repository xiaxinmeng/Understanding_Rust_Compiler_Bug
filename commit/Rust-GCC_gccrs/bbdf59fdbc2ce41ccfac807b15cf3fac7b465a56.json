{"sha": "bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJkZjU5ZmRiYzJjZTQxY2NmYWM4MDdiMTVjZjNmYWM3YjQ2NWE1Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-13T07:56:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-13T07:56:15Z"}, "message": "match.pd: Don't optimize vector X + (X << C) -> X * (1 + (1 << C)) if there is no mult support [PR99544]\n\nE.g. on aarch64, the target has V2DImode addition and shift by scalar\noptabs, but doesn't have V2DImode multiply.  The following testcase\nICEs because this simplification is done after last lowering, but\ngenerally, even if it is done before that, turning it into a multiplication\nwill not be an improvement because that means scalarization, while the former\ncan be done in vectors.\n\nIt would be nice if we added expansion support for vector multiplication\nby uniform constants using shifts and additions like we have for scalar\nmultiplication, but that is something that can be done in stage1.\n\n2021-03-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/99544\n\t* match.pd (X + (X << C) -> X * (1 + (1 << C))): Don't simplify\n\tif for vector types multiplication can't be done in type's mode.\n\n\t* gcc.dg/gomp/pr99544.c: New test.", "tree": {"sha": "988b5c12a9e519d36543a6112d211a425ae3b5a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/988b5c12a9e519d36543a6112d211a425ae3b5a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3972574f11e5d49f12ad88faf2346f77ffc6e523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3972574f11e5d49f12ad88faf2346f77ffc6e523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3972574f11e5d49f12ad88faf2346f77ffc6e523"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "036f92fa959e8a95ab6507ca57459fbc15857a80", "filename": "gcc/match.pd", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56", "patch": "@@ -2788,7 +2788,10 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (plus:c @0 (lshift:s @0 INTEGER_CST@1))\n   (if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n        && tree_fits_uhwi_p (@1)\n-       && tree_to_uhwi (@1) < element_precision (type))\n+       && tree_to_uhwi (@1) < element_precision (type)\n+       && (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t   || optab_handler (smul_optab,\n+\t\t\t     TYPE_MODE (type)) != CODE_FOR_nothing))\n    (with { tree t = type;\n \t   if (!TYPE_OVERFLOW_WRAPS (t)) t = unsigned_type_for (t);\n \t   wide_int w = wi::set_bit_in_zero (tree_to_uhwi (@1),\n@@ -2804,7 +2807,10 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && tree_fits_uhwi_p (@1)\n        && tree_to_uhwi (@1) < element_precision (type)\n        && tree_fits_uhwi_p (@2)\n-       && tree_to_uhwi (@2) < element_precision (type))\n+       && tree_to_uhwi (@2) < element_precision (type)\n+       && (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t   || optab_handler (smul_optab,\n+\t\t\t     TYPE_MODE (type)) != CODE_FOR_nothing))\n    (with { tree t = type;\n \t   if (!TYPE_OVERFLOW_WRAPS (t)) t = unsigned_type_for (t);\n \t   unsigned int prec = element_precision (type);"}, {"sha": "4ea07cf2b4d53484ddab1f03d216368f1d072c18", "filename": "gcc/testsuite/gcc.dg/gomp/pr99544.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr99544.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr99544.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr99544.c?ref=bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56", "patch": "@@ -0,0 +1,13 @@\n+/* PR tree-optimization/99544 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fopenmp\" } */\n+\n+long\n+foo (long a, long b, long c)\n+{\n+  long d, e;\n+  #pragma omp teams distribute parallel for simd firstprivate (a, b, c) lastprivate(e)\n+  for (d = a; d < b; d++)\n+    e = c + d * 5;\n+  return e;\n+}"}]}