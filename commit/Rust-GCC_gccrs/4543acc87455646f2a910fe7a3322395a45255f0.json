{"sha": "4543acc87455646f2a910fe7a3322395a45255f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU0M2FjYzg3NDU1NjQ2ZjJhOTEwZmU3YTMzMjIzOTVhNDUyNTVmMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-24T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-24T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "5bb98a2a84bb58f6b55cd5f27730df6a9665847b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bb98a2a84bb58f6b55cd5f27730df6a9665847b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4543acc87455646f2a910fe7a3322395a45255f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4543acc87455646f2a910fe7a3322395a45255f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4543acc87455646f2a910fe7a3322395a45255f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4543acc87455646f2a910fe7a3322395a45255f0/comments", "author": null, "committer": null, "parents": [{"sha": "71237df0a0b7f0f10cebedcd114fae7ad2aaebcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71237df0a0b7f0f10cebedcd114fae7ad2aaebcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71237df0a0b7f0f10cebedcd114fae7ad2aaebcb"}], "stats": {"total": 219, "additions": 218, "deletions": 1}, "files": [{"sha": "c2c5649338d69cc6649556c42d0ce86114e683bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543acc87455646f2a910fe7a3322395a45255f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543acc87455646f2a910fe7a3322395a45255f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4543acc87455646f2a910fe7a3322395a45255f0", "patch": "@@ -1,3 +1,43 @@\n+2020-06-23  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config.gcc: Identify power10 as a 64-bit processor and as valid\n+\tfor --with-cpu and --with-tune.\n+\n+2020-06-23  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* Makefile.in (LANG_MAKEFRAGS): Same.\n+\t(tmake_file): Use -include.\n+\t(xmake_file): Same.\n+\n+2020-06-23  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* REVISION: Delete file meant for a private branch.\n+\n+2020-06-23  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR target/95646\n+\t* config/arm/arm.c: (cmse_nonsecure_entry_clear_before_return): Use\n+\t'callee_saved_reg_p' instead of 'calL_used_or_fixed_reg_p'.\n+\n+2020-06-23  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* collect-utils.h (dumppfx): New.\n+\t* collect-utils.c (dumppfx): Likewise.\n+\t* lto-wrapper.c (run_gcc): Set global dumppfx.\n+\t(compile_offload_image): Pass a -dumpbase on to mkoffload.\n+\t* config/nvptx/mkoffload.c (ptx_dumpbase): New.\n+\t(main): Handle incoming -dumpbase.  Set ptx_dumpbase.  Obey\n+\tsave_temps.\n+\t(compile_native): Pass -dumpbase et al to compiler.\n+\t* config/gcn/mkoffload.c (gcn_dumpbase): New.\n+\t(main): Handle incoming -dumpbase.  Set gcn_dumpbase.  Obey\n+\tsave_temps.  Pass -dumpbase et al to offload target compiler.\n+\t(compile_native): Pass -dumpbase et al to compiler.\n+\n+2020-06-23  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* REVISION: New file.\n+\n 2020-06-22  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/altivec.h: Use _ARCH_PWR10, not _ARCH_PWR_FUTURE."}, {"sha": "1e6790229fe6231eee114d508e9eff5126cced79", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543acc87455646f2a910fe7a3322395a45255f0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543acc87455646f2a910fe7a3322395a45255f0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4543acc87455646f2a910fe7a3322395a45255f0", "patch": "@@ -1 +1 @@\n-20200623\n+20200624"}, {"sha": "a02b42f936ddabf33fbf49fcd9cf92c43ae9b032", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543acc87455646f2a910fe7a3322395a45255f0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543acc87455646f2a910fe7a3322395a45255f0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4543acc87455646f2a910fe7a3322395a45255f0", "patch": "@@ -1,3 +1,50 @@\n+2020-06-23  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc-interface/utils2.c (build_binary_op): Remove space.\n+\n+2020-06-23  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Allocator>: Minor tweaks.\n+\tCall Has_Constrained_Partial_View on base type of designated type.\n+\n+2020-06-23  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc-interface/utils.c (gnat_write_global_declarations): Output\n+\tintegral global variables first and the imported functions later.\n+\n+2020-06-23  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc-interface/decl.c (elaborate_expression_1): When GNAT encodings\n+\tare not used, do not create a variable for debug info purposes if\n+\tthe expression is itself a user-declared variable.\n+\n+2020-06-23  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc-interface/ada-tree.h (DECL_RENAMED_OBJECT): Delete.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Always use\n+\tthe stabilized reference directly for renaming and create a variable\n+\tpointing to it separately if requested.\n+\t* gcc-interface/misc.c (gnat_print_decl): Adjust for deletion.\n+\t* gcc-interface/trans.c (Identifier_to_gnu): Likewise.\n+\t(gnat_to_gnu) <N_Object_Renaming_Declaration>:\n+\tDo not deal with side-effects here.\n+\t<N_Exception_Renaming_Declaration>: Likewise.\n+\n+2020-06-23  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc-interface/decl.c (elaborate_expression): Replace calls to\n+\tIs_OK_Static_Expression with Compile_Time_Known_Value.\n+\n+2020-06-23  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Subtype>: Set\n+\tdebug type to the base type and only if the subtype is artificial.\n+\n+2020-06-23  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Assignment_Statement>: Do\n+\tnot test Is_Bit_Packed_Array in the memset path.\n+\n 2020-06-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (lvalue_required_for_attribute_p): Do not deal"}, {"sha": "2e8275e7ebb118c234be44ede4ba92c886776316", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543acc87455646f2a910fe7a3322395a45255f0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543acc87455646f2a910fe7a3322395a45255f0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4543acc87455646f2a910fe7a3322395a45255f0", "patch": "@@ -1,3 +1,25 @@\n+2020-06-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93976\n+\tImplement C++20 P2082R1, Fixing CTAD for aggregates.\n+\t* cp-tree.h (TPARMS_PRIMARY_TEMPLATE): Split out from...\n+\t(DECL_PRIMARY_TEMPLATE): ...here.\n+\t(builtin_guide_p): Declare.\n+\t* decl.c (reshape_init_class): Handle bases of a template.\n+\t(reshape_init_r): An array with dependent bound takes a single\n+\tinitializer.\n+\t* pt.c (tsubst_default_argument): Shortcut {}.\n+\t(unify_pack_expansion): Allow omitted arguments to trailing pack.\n+\t(builtin_guide_p): New.\n+\t(collect_ctor_idx_types): Give a trailing pack a {} default\n+\targument.  Handle arrays better.\n+\n+2020-06-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95477\n+\t* coroutines.cc (morph_fn_to_coro): Apply a cleanup to\n+\tthe get return object when the DTOR is non-trivial.\n+\n 2020-06-20  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/95505"}, {"sha": "f8f918c67d5487bac8e7403993af9f9b0d829435", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543acc87455646f2a910fe7a3322395a45255f0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543acc87455646f2a910fe7a3322395a45255f0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4543acc87455646f2a910fe7a3322395a45255f0", "patch": "@@ -1,3 +1,16 @@\n+2020-06-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/95812\n+\t* dependency.c (ref_same_as_full_array): Handle case of AR_FULL\n+\tvs. AR_FULL.\n+\n+2020-06-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/95586\n+\t* decl.c (gfc_match_implicit): Only perform else branch if\n+\tthe type spect is not BT_DERIVED.\n+\n 2020-06-22  Steven G. Kargl  <kargl@gcc.gnu.org>\n \t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n "}, {"sha": "21925d631f98a81fa5cbcbbddfba9ebc4929bbab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543acc87455646f2a910fe7a3322395a45255f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543acc87455646f2a910fe7a3322395a45255f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4543acc87455646f2a910fe7a3322395a45255f0", "patch": "@@ -1,3 +1,42 @@\n+2020-06-23  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/class-deduction-aggr3.C: New test.\n+\t* g++.dg/cpp2a/class-deduction-aggr4.C: New test.\n+\n+2020-06-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* gfortran.fortran-torture/execute/forall_5.f90: Make forall\n+\tstatement conforming.\n+\n+2020-06-23  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95477\n+\t* g++.dg/coroutines/pr95477.C: New test.\n+\t* g++.dg/coroutines/void-gro-non-class-coro.C: New test.\n+\n+2020-06-23  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR target/95646\n+\t* gcc.target/arm/pr95646.c: New test.\n+\n+2020-06-23  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* lib/scanoffload.exp: New.\n+\t* lib/scanoffloadrtl.exp: Load it.  Replace \".o\" with \"\"\n+\tglobally, and use scanoffload's scoff wrapper to fill it in.\n+\t* lib/scanoffloadtree.exp: Likewise.\n+\n+2020-06-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/95812\n+\t* gfortran.dg/dependency_59.f90: New test.\n+\n+2020-06-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/95586\n+\t* gfortran.dg/pr95586_1.f90: New test.\n+\t* gfortran.dg/pr95586_2.f90: New test.\n+\n 2020-06-22  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.target/powerpc/cfuged-0.c: I protest."}, {"sha": "570822c1ac9847244e8e090aec3c66b6b5aa83ea", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543acc87455646f2a910fe7a3322395a45255f0/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543acc87455646f2a910fe7a3322395a45255f0/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=4543acc87455646f2a910fe7a3322395a45255f0", "patch": "@@ -1,3 +1,7 @@\n+2020-06-23  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* libiberty.h (bsearch_r): New.\n+\n 2020-04-17  Martin Liska  <mliska@suse.cz>\n \t    Jonathan Yong <10walls@gmail.com>\n "}, {"sha": "fab5078cad7ed6acdad32b563cb82490f96d70a5", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543acc87455646f2a910fe7a3322395a45255f0/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543acc87455646f2a910fe7a3322395a45255f0/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=4543acc87455646f2a910fe7a3322395a45255f0", "patch": "@@ -1,3 +1,9 @@\n+2020-06-23  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* Makefile.in: Remove uses of empty.mk. Use -include.\n+\t* config/avr/t-avr: Use -include.\n+\t* empty.mk: Delete.\n+\n 2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config.host (extra_parts): Add crtcxa_64 and crtdbase_64."}, {"sha": "62933df04b50cc58b6b03d0ceb1ed3d865892671", "filename": "libgcc/config/avr/libf7/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543acc87455646f2a910fe7a3322395a45255f0/libgcc%2Fconfig%2Favr%2Flibf7%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543acc87455646f2a910fe7a3322395a45255f0/libgcc%2Fconfig%2Favr%2Flibf7%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Flibf7%2FChangeLog?ref=4543acc87455646f2a910fe7a3322395a45255f0", "patch": "@@ -1,3 +1,7 @@\n+2020-06-23  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* t-libf7: Same.\n+\n 2020-01-08  Georg-Johann Lay  <avr@gjlay.de>\n \n \tImplement 64-bit double functions."}, {"sha": "9a543dec2d9dec18329e1e000e7030d54f3caedc", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543acc87455646f2a910fe7a3322395a45255f0/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543acc87455646f2a910fe7a3322395a45255f0/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=4543acc87455646f2a910fe7a3322395a45255f0", "patch": "@@ -1,3 +1,8 @@\n+2020-06-23  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/lib/libgomp.exp: Load gcc lib scanoffload.exp.\n+\t* testsuite/lib/libgomp-dg.exp: Drop now-obsolete -save-temps.\n+\n 2020-06-22  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* Makefile.am: Use -include."}, {"sha": "19d2b702d62e4f46c2c52d9485e684cbc981847d", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543acc87455646f2a910fe7a3322395a45255f0/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543acc87455646f2a910fe7a3322395a45255f0/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=4543acc87455646f2a910fe7a3322395a45255f0", "patch": "@@ -1,3 +1,10 @@\n+2020-06-23  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* bsearch_r.c: New file.\n+\t* Makefile.in (CFILES): Add bsearch_r.c.\n+\t(REQUIRED_OFILES): Add bsearch_r.o.\n+\t* functions.texi: Regenerate.\n+\n 2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/95413"}, {"sha": "ca0a2b58216cdee0bc7c8010daad08a6886e2ace", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4543acc87455646f2a910fe7a3322395a45255f0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4543acc87455646f2a910fe7a3322395a45255f0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4543acc87455646f2a910fe7a3322395a45255f0", "patch": "@@ -1,3 +1,33 @@\n+2020-06-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/from_chars/1_c++20_neg.cc: Check enumeration\n+\ttype.\n+\t* testsuite/20_util/from_chars/1_neg.cc: Likewise. Move dg-error\n+\tdirectives outside preprocessor condition.\n+\n+2020-06-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/95832\n+\t* include/std/variant (__detail::__variant::_Build_FUN): Remove\n+\tpartial specialization to prevent narrowing conversions to bool.\n+\t* testsuite/20_util/variant/compile.cc: Test non-narrowing\n+\tconversions to bool.\n+\t* testsuite/20_util/variant/run.cc: Likewise.\n+\n+2020-06-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/Makefile.in: Regenerate.\n+\t* include/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* po/Makefile.in: Regenerate.\n+\t* python/Makefile.in: Regenerate.\n+\t* src/Makefile.in: Regenerate.\n+\t* src/c++11/Makefile.in: Regenerate.\n+\t* src/c++17/Makefile.in: Regenerate.\n+\t* src/c++98/Makefile.in: Regenerate.\n+\t* src/filesystem/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n 2020-06-22  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* Makefile.am: Use -include."}]}