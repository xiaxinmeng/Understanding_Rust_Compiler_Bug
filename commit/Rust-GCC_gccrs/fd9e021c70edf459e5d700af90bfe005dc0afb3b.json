{"sha": "fd9e021c70edf459e5d700af90bfe005dc0afb3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5ZTAyMWM3MGVkZjQ1OWU1ZDcwMGFmOTBiZmUwMDVkYzBhZmIzYg==", "commit": {"author": {"name": "JunMa", "email": "JunMa@linux.alibaba.com", "date": "2020-02-05T05:46:59Z"}, "committer": {"name": "JunMa", "email": "JunMa@linux.alibaba.com", "date": "2020-03-03T03:18:54Z"}, "message": "Build coroutine expression with unknown_type in processing_template_decl phase.\n\ngcc/cp\n        * coroutines.cc (finish_co_await_expr): Build co_await_expr\n        with unknown_type_node.\n        (finish_co_yield_expr): Ditto.\n        *pt.c (type_dependent_expression_p): Set co_await/yield_expr\n        with unknown type as dependent.\n\ngcc/testsuite\n        * g++.dg/coroutines/torture/co-await-14-template-traits.C: New test.", "tree": {"sha": "7c98f9efe3f20176db35955ec725c2583220691c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c98f9efe3f20176db35955ec725c2583220691c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd9e021c70edf459e5d700af90bfe005dc0afb3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9e021c70edf459e5d700af90bfe005dc0afb3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9e021c70edf459e5d700af90bfe005dc0afb3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9e021c70edf459e5d700af90bfe005dc0afb3b/comments", "author": {"login": "junparser", "id": 59546948, "node_id": "MDQ6VXNlcjU5NTQ2OTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/59546948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/junparser", "html_url": "https://github.com/junparser", "followers_url": "https://api.github.com/users/junparser/followers", "following_url": "https://api.github.com/users/junparser/following{/other_user}", "gists_url": "https://api.github.com/users/junparser/gists{/gist_id}", "starred_url": "https://api.github.com/users/junparser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/junparser/subscriptions", "organizations_url": "https://api.github.com/users/junparser/orgs", "repos_url": "https://api.github.com/users/junparser/repos", "events_url": "https://api.github.com/users/junparser/events{/privacy}", "received_events_url": "https://api.github.com/users/junparser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "junparser", "id": 59546948, "node_id": "MDQ6VXNlcjU5NTQ2OTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/59546948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/junparser", "html_url": "https://github.com/junparser", "followers_url": "https://api.github.com/users/junparser/followers", "following_url": "https://api.github.com/users/junparser/following{/other_user}", "gists_url": "https://api.github.com/users/junparser/gists{/gist_id}", "starred_url": "https://api.github.com/users/junparser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/junparser/subscriptions", "organizations_url": "https://api.github.com/users/junparser/orgs", "repos_url": "https://api.github.com/users/junparser/repos", "events_url": "https://api.github.com/users/junparser/events{/privacy}", "received_events_url": "https://api.github.com/users/junparser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f33c471bbf745216e0601cb629144b34642c9b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f33c471bbf745216e0601cb629144b34642c9b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f33c471bbf745216e0601cb629144b34642c9b9"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "edc088ee51d646dff34c90477e87eab5b706dd9d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9e021c70edf459e5d700af90bfe005dc0afb3b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9e021c70edf459e5d700af90bfe005dc0afb3b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd9e021c70edf459e5d700af90bfe005dc0afb3b", "patch": "@@ -1,3 +1,11 @@\n+2020-03-03  Jun Ma <JunMa@linux.alibaba.com>\n+\n+\t* coroutines.cc (finish_co_await_expr): Build co_await_expr\n+\twith unknown_type_node.\n+\t(finish_co_yield_expr): Ditto.\n+\t*pt.c (type_dependent_expression_p): Set co_await/yield_expr\n+\twith unknown type as dependent.\n+\n 2020-03-02  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* coroutines.cc (struct local_var_info): Adjust to remove the"}, {"sha": "966ec0583aa4fb4f00f12c664e1ddc6924f81011", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9e021c70edf459e5d700af90bfe005dc0afb3b/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9e021c70edf459e5d700af90bfe005dc0afb3b/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=fd9e021c70edf459e5d700af90bfe005dc0afb3b", "patch": "@@ -847,8 +847,8 @@ finish_co_await_expr (location_t kw, tree expr)\n       /* If we don't know the promise type, we can't proceed.  */\n       tree functype = TREE_TYPE (current_function_decl);\n       if (dependent_type_p (functype) || type_dependent_expression_p (expr))\n-\treturn build5_loc (kw, CO_AWAIT_EXPR, TREE_TYPE (expr), expr, NULL_TREE,\n-\t\t\t   NULL_TREE, NULL_TREE, integer_zero_node);\n+\treturn build5_loc (kw, CO_AWAIT_EXPR, unknown_type_node, expr,\n+\t\t\t   NULL_TREE, NULL_TREE, NULL_TREE, integer_zero_node);\n     }\n \n   /* We must be able to look up the \"await_transform\" method in the scope of\n@@ -925,7 +925,7 @@ finish_co_yield_expr (location_t kw, tree expr)\n       tree functype = TREE_TYPE (current_function_decl);\n       /* If we don't know the promise type, we can't proceed.  */\n       if (dependent_type_p (functype) || type_dependent_expression_p (expr))\n-\treturn build2_loc (kw, CO_YIELD_EXPR, TREE_TYPE (expr), expr,\n+\treturn build2_loc (kw, CO_YIELD_EXPR, unknown_type_node, expr,\n \t\t\t   NULL_TREE);\n     }\n "}, {"sha": "230331f60cbfac09e8cf94d5cf7f696b843ffa5b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9e021c70edf459e5d700af90bfe005dc0afb3b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9e021c70edf459e5d700af90bfe005dc0afb3b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fd9e021c70edf459e5d700af90bfe005dc0afb3b", "patch": "@@ -26701,6 +26701,11 @@ type_dependent_expression_p (tree expression)\n       if (TREE_CODE (expression) == SCOPE_REF)\n \treturn false;\n \n+      /* CO_AWAIT/YIELD_EXPR with unknown type is always dependent.  */\n+      if (TREE_CODE (expression) == CO_AWAIT_EXPR\n+\t  || TREE_CODE (expression) == CO_YIELD_EXPR)\n+\treturn true;\n+\n       if (BASELINK_P (expression))\n \t{\n \t  if (BASELINK_OPTYPE (expression)"}, {"sha": "6418eb2fd9408971a0f6e5bef86c30f02781479b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9e021c70edf459e5d700af90bfe005dc0afb3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9e021c70edf459e5d700af90bfe005dc0afb3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd9e021c70edf459e5d700af90bfe005dc0afb3b", "patch": "@@ -1,3 +1,7 @@\n+2020-03-03  Jun Ma <JunMa@linux.alibaba.com>\n+\n+\t* g++.dg/coroutines/torture/co-await-14-template-traits.C: New test.\n+\n 2020-03-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/CVE-2005-1689-dedupe-issue.c: Add"}, {"sha": "4e670b1c308a28ab03fadd1628b442db7b31ebf8", "filename": "gcc/testsuite/g++.dg/coroutines/torture/co-await-14-template-traits.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9e021c70edf459e5d700af90bfe005dc0afb3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fco-await-14-template-traits.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9e021c70edf459e5d700af90bfe005dc0afb3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fco-await-14-template-traits.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fco-await-14-template-traits.C?ref=fd9e021c70edf459e5d700af90bfe005dc0afb3b", "patch": "@@ -0,0 +1,24 @@\n+//  { dg-do compile }\n+//  Test we create co_await_expr with dependent type rather than type of awaitable class\n+\n+#include \"../coro.h\"\n+#include \"../coro1-ret-int-yield-int.h\"\n+#include <chrono>\n+\n+struct TestAwaiter {\n+    int recent_test;\n+    TestAwaiter(int test) : recent_test{test} {}\n+    bool await_ready() { return true; }\n+    void await_suspend(coro::coroutine_handle<>) {}\n+    int await_resume() { return recent_test;}\n+    void return_value(int x) { recent_test = x;}\n+};\n+\n+template <typename Rep, typename Period>\n+coro1 test_temparg (std::chrono::duration<Rep, Period> dur)\n+{\n+       auto sum = co_await TestAwaiter(1);\n+       if (!sum)\n+\t dur.count();\n+       co_return 0;\n+}"}]}