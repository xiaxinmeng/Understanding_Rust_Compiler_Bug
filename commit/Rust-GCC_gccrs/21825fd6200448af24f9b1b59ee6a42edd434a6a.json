{"sha": "21825fd6200448af24f9b1b59ee6a42edd434a6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE4MjVmZDYyMDA0NDhhZjI0ZjliMWI1OWVlNmE0MmVkZDQzNGE2YQ==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2006-10-10T18:26:16Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2006-10-10T18:26:16Z"}, "message": "re PR fortran/19292 ([meta-bug] g77 features lacking in gfortran)\n\n2006-10-10  Daniel Franke  <franke.daniel@gmail.com>\n\n\t* intrinsic.texi: added documentation for FSTAT, GETARG,GET_COMMAND,\n\tGET_COMMAND_ARGUMENT, GETENV, GET_ENVIRONMENT_VARIABLE, IAND, IARGC,\n\tLSTAT and STAT, removed the reference to PR19292 from ACCESS, CHMOD,\n\tGMTIME, LSHIFT, LTIME, RSHIFT.\n\nFrom-SVN: r117609", "tree": {"sha": "bc391702ea817f1ba2f623661f1c0fada9db7e25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc391702ea817f1ba2f623661f1c0fada9db7e25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21825fd6200448af24f9b1b59ee6a42edd434a6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21825fd6200448af24f9b1b59ee6a42edd434a6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21825fd6200448af24f9b1b59ee6a42edd434a6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21825fd6200448af24f9b1b59ee6a42edd434a6a/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be6c470955b3d46cbe3da412d71be17ceb0bbaf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6c470955b3d46cbe3da412d71be17ceb0bbaf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be6c470955b3d46cbe3da412d71be17ceb0bbaf1"}], "stats": {"total": 403, "additions": 340, "deletions": 63}, "files": [{"sha": "801f837c7c48163a5c6cf05187e6afa5d7b36397", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21825fd6200448af24f9b1b59ee6a42edd434a6a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21825fd6200448af24f9b1b59ee6a42edd434a6a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=21825fd6200448af24f9b1b59ee6a42edd434a6a", "patch": "@@ -1,3 +1,10 @@\n+2006-10-10  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\t* intrinsic.texi: added documentation for FSTAT, GETARG,GET_COMMAND,\n+\tGET_COMMAND_ARGUMENT, GETENV, GET_ENVIRONMENT_VARIABLE, IAND, IARGC,\n+\tLSTAT and STAT, removed the reference to PR19292 from ACCESS, CHMOD,\n+\tGMTIME, LSHIFT, LTIME, RSHIFT.\n+\n 2006-10-10  Brooks Moses  <bmoses@stanford.edu>\n \n \t* gfortran.texi (Standards): Update to current status."}, {"sha": "45bb547529b1e821ba7952d1664c9040d2d30422", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 333, "deletions": 63, "changes": 396, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21825fd6200448af24f9b1b59ee6a42edd434a6a/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21825fd6200448af24f9b1b59ee6a42edd434a6a/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=21825fd6200448af24f9b1b59ee6a42edd434a6a", "patch": "@@ -44,6 +44,10 @@ and editing.  All contributions and corrections are strongly encouraged.\n Implemented intrinsics are fully functional and available to the user to apply. \n Some intrinsics have documentation yet to be completed as indicated by 'documentation pending'.\n \n+@comment Missing intrinsics (double check with #19292)\n+@comment  - MClock\n+@comment  - Short\n+\n @menu\n * Introduction:         Introduction\n * @code{ABORT}:         ABORT,     Abort the program     \n@@ -81,7 +85,7 @@ Some intrinsics have documentation yet to be completed as indicated by 'document\n * @code{CHDIR}:         CHDIR,     Change working directory\n * @code{CHMOD}:         CHMOD,     Change access permissions of files\n * @code{CMPLX}:         CMPLX,     Complex conversion function\n-* @code{COMMAND_ARGUMENT_COUNT}: COMMAND_ARGUMENT_COUNT,  Command line argument count\n+* @code{COMMAND_ARGUMENT_COUNT}: COMMAND_ARGUMENT_COUNT, Get number of command line arguments\n * @code{CONJG}:         CONJG,     Complex conjugate function\n * @code{COS}:           COS,       Cosine function\n * @code{COSH}:          COSH,      Hyperbolic cosine function\n@@ -122,8 +126,8 @@ Some intrinsics have documentation yet to be completed as indicated by 'document\n * @code{FSTAT}:         FSTAT,     Get file status\n * @code{FTELL}:         FTELL,     Current stream position\n * @code{GETARG}:        GETARG,    Get command line arguments\n-* @code{GET_COMMAND}:   GET_COMMAND, Subroutine to retrieve the entire command line\n-* @code{GET_COMMAND_ARGUMENT}: GET_COMMAND_ARGUMENT, Subroutine to retrieve a command argument\n+* @code{GET_COMMAND}:   GET_COMMAND, Get the entire command line\n+* @code{GET_COMMAND_ARGUMENT}: GET_COMMAND_ARGUMENT, Get command line arguments\n * @code{GETCWD}:        GETCWD,    Get current working directory\n * @code{GETENV}:        GETENV,    Get an environmental variable\n * @code{GET_ENVIRONMENT_VARIABLE}: GET_ENVIRONMENT_VARIABLE, Get an environmental variable\n@@ -136,7 +140,7 @@ Some intrinsics have documentation yet to be completed as indicated by 'document\n * @code{HUGE}:          HUGE,      Largest number of a kind\n * @code{IACHAR}:        IACHAR,    Code in @acronym{ASCII} collating sequence\n * @code{IAND}:          IAND,      Bitwise logical and\n-* @code{IARGC}:         IARGC,     Get number of command line arguments\n+* @code{IARGC}:         IARGC,     Get the number of command line arguments\n * @code{IBCLR}:         IBCLR,     Clear bit\n * @code{IBITS}:         IBITS,     Bit extraction\n * @code{IBSET}:         IBSET,     Set bit\n@@ -167,6 +171,7 @@ Some intrinsics have documentation yet to be completed as indicated by 'document\n * @code{LOG10}:         LOG10,     Base 10 logarithm function \n * @code{LOGICAL}:       LOGICAL,   Convert to logical type\n * @code{LSHIFT}:        LSHIFT,    Left shift bits\n+* @code{LSTAT}:         LSTAT,     Get file status\n * @code{LTIME}:         LTIME,     Convert time to local time info\n * @code{MALLOC}:        MALLOC,    Dynamic memory allocation function\n * @code{MATMUL}:        MATMUL,    matrix multiplication\n@@ -403,7 +408,6 @@ GNU extension\n @item @emph{Example}:\n @item @emph{Specific names}:\n @item @emph{See also}:\n-@uref{http://gcc.gnu.org/bugzilla/show_bug.cgi?id=19292, g77 features lacking in gfortran}\n \n @end table\n \n@@ -1693,7 +1697,7 @@ end program test_bit_size\n @node BTEST\n @section @code{BTEST} --- Bit test function\n @findex @code{BTEST} intrinsic\n-@cindex BTEST\n+@cindex bit operations\n \n @table @asis\n @item @emph{Description}:\n@@ -1886,7 +1890,6 @@ Subroutine\n @item @emph{Example}:\n @item @emph{Specific names}:\n @item @emph{See also}:\n-@uref{http://gcc.gnu.org/bugzilla/show_bug.cgi?id=19292, g77 features lacking in gfortran}\n \n @end table\n \n@@ -1937,9 +1940,10 @@ end program test_cmplx\n \n \n @node COMMAND_ARGUMENT_COUNT\n-@section @code{COMMAND_ARGUMENT_COUNT} --- Argument count function \n+@section @code{COMMAND_ARGUMENT_COUNT} --- Get number of command line arguments\n @findex @code{COMMAND_ARGUMENT_COUNT} intrinsic\n-@cindex command argument count\n+@cindex command line arguments\n+@cindex getopt\n \n @table @asis\n @item @emph{Description}:\n@@ -1971,9 +1975,10 @@ program test_command_argument_count\n     print *, count\n end program test_command_argument_count\n @end smallexample\n-@end table\n-\n \n+@item @emph{See also}:\n+@ref{GET_COMMAND}, @ref{GET_COMMAND_ARGUMENT}\n+@end table\n \n @node CONJG\n @section @code{CONJG} --- Complex conjugate function \n@@ -3750,22 +3755,37 @@ See @code{MALLOC} for an example.\n @node FSTAT\n @section @code{FSTAT} --- Get file status\n @findex @code{FSTAT} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n+@cindex file system operations \n \n @table @asis\n @item @emph{Description}:\n-GNU extension\n+@code{FSTAT} is identical to @ref{STAT}, except that information about an \n+already opened file is obtained.\n+\n+The elements in @code{BUFF} are the same as described by @ref{STAT}.\n \n @item @emph{Standard}:\n+GNU extension\n+\n @item @emph{Class}:\n+Non-elemental subroutine\n+\n @item @emph{Syntax}:\n+@code{CALL fstat(UNIT,BUFF[,STATUS])}\n+\n @item @emph{Arguments}:\n-@item @emph{Return value}:\n+@multitable @columnfractions .15 .80\n+@item @var{UNIT}   @tab An open I/O unit number of type @code{INTEGER}.\n+@item @var{BUFF}   @tab The type shall be @code{INTEGER(4), DIMENSION(13)}.\n+@item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER(4)}. Returns 0 \n+                        on success and a system specific error code otherwise.\n+@end multitable\n+\n @item @emph{Example}:\n-@item @emph{Specific names}:\n+See @ref{STAT} for an example.\n+\n @item @emph{See also}:\n+To stat a link: @ref{LSTAT}, to stat a file: @ref{STAT}\n @end table\n \n \n@@ -3815,80 +3835,169 @@ GNU extension\n @item @emph{Arguments}:\n @item @emph{Return value}:\n @item @emph{Example}:\n-@item @emph{Specific names}:\n+\n @item @emph{See also}:\n+@ref{FSEEK}\n @end table\n \n \n \n @node GETARG\n @section @code{GETARG} --- Get command line arguments\n @findex @code{GETARG} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n+@cindex command line arguments\n+@cindex getopt\n \n @table @asis\n @item @emph{Description}:\n+Retrieve the @var{N}th argument that was passed on the\n+command line when the containing program was invoked.\n+\n+This intrinsic routine is provided for backwards compatibility with \n+GNU Fortran 77.  In new code, programmers should consider the use of \n+the @ref{GET_COMMAND_ARGUMENT} intrinsic defined by the Fortran 2003 \n+standard.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n+Subroutine\n+\n @item @emph{Syntax}:\n+@code{CALL GETARG(N,ARG)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{N}   @tab Shall of type @code{INTEGER(4)}, @math{@var{N} \\geq 0}\n+@item @var{ARG} @tab Shall be of type @code{CHARACTER(*)}. \n+@end multitable\n+\n @item @emph{Return value}:\n+After @code{GETARG} returns, the @var{ARG} argument holds the @var{N}th \n+command line argument. If @var{ARG} can not hold the argument, it is \n+truncated to fit the length of @var{ARG}. If there are less than @var{N}\n+arguments specified at the command line, @var{ARG} will be filled with blanks.\n+If @math{@var{N} = 0}, @var{ARG} is set to the name of the program (on systems\n+that support this feature).\n+\n @item @emph{Example}:\n-@item @emph{Specific names}:\n+@smallexample\n+PROGRAM test_getarg\n+  INTEGER :: i\n+  CHARACTER(len=32) :: arg\n+\n+  DO i = 1, iargc()\n+    CALL getarg(i, arg)\n+    WRITE (*,*) arg\n+  END DO\n+END PROGRAM\n+@end smallexample\n \n @item @emph{See also}:\n-@ref{IARGC}, @ref{GET_COMMAND}, @ref{GET_COMMAND_ARGUMENT}\n+GNU Fortran 77 compability function: @ref{IARGC}\n+\n+F2003 functions and subroutines: @ref{GET_COMMAND}, @ref{GET_COMMAND_ARGUMENT}, @ref{COMMAND_ARGUMENT_COUNT}\n @end table\n \n \n \n @node GET_COMMAND\n-@section @code{GET_COMMAND} --- Subroutine to retrieve the entire command line\n+@section @code{GET_COMMAND} --- Get the entire command line\n @findex @code{GET_COMMAND} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n+@cindex command line arguments\n+@cindex getopt\n \n @table @asis\n @item @emph{Description}:\n+Retrieve the entire command line that was used to invoke the program.\n+\n @item @emph{Standard}:\n F2003\n \n @item @emph{Class}:\n+Subroutine\n+\n @item @emph{Syntax}:\n+@code{CALL GET_COMMAND(CMD)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{CMD} @tab Shall be of type @code{CHARACTER(*)}. \n+@end multitable\n+\n @item @emph{Return value}:\n+Stores the entire command line that was used to invoke the program in @var{ARG}. \n+If @var{ARG} is not large enough, the command will be truncated. \n+\n @item @emph{Example}:\n-@item @emph{Specific names}:\n+@smallexample\n+PROGRAM test_get_command\n+  CHARACTER(len=255) :: cmd\n+  CALL get_command(cmd)\n+  WRITE (*,*) TRIM(cmd)\n+END PROGRAM\n+@end smallexample\n+\n @item @emph{See also}:\n+@ref{GET_COMMAND_ARGUMENT}, @ref{COMMAND_ARGUMENT_COUNT}\n @end table\n \n \n \n @node GET_COMMAND_ARGUMENT\n-@section @code{GET_COMMAND_ARGUMENT} --- Subroutine to retrieve a command argument\n+@section @code{GET_COMMAND_ARGUMENT} --- Get command line arguments\n @findex @code{GET_COMMAND_ARGUMENT} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n+@cindex command line arguments\n+@cindex getopt\n \n @table @asis\n @item @emph{Description}:\n+Retrieve the @var{N}th argument that was passed on the\n+command line when the containing program was invoked.\n+\n @item @emph{Standard}:\n F2003\n \n @item @emph{Class}:\n+Subroutine\n+\n @item @emph{Syntax}:\n+@code{CALL GET_COMMAND_ARGUMENT(N,ARG)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{N}   @tab Shall of type @code{INTEGER(4)}, @math{@var{N} \\geq 0}\n+@item @var{ARG} @tab Shall be of type @code{CHARACTER(*)}. \n+@end multitable\n+\n @item @emph{Return value}:\n+After @code{GET_COMMAND_ARGUMENT} returns, the @var{ARG} argument holds the \n+@var{N}th command line argument. If @var{ARG} can not hold the argument, it is \n+truncated to fit the length of @var{ARG}. If there are less than @var{N}\n+arguments specified at the command line, @var{ARG} will be filled with blanks. \n+If @math{@var{N} = 0}, @var{ARG} is set to the name of the program (on systems\n+that support this feature).\n+\n @item @emph{Example}:\n-@item @emph{Specific names}:\n+@smallexample\n+PROGRAM test_get_command_argument\n+  INTEGER :: i\n+  CHARACTER(len=32) :: arg\n+\n+  i = 0\n+  DO\n+    CALL get_command_argument(i, arg)\n+    IF (LEN_TRIM(arg) == 0) EXIT\n+\n+    WRITE (*,*) TRIM(arg)\n+    i = i+1\n+  END DO\n+END PROGRAM\n+@end smallexample\n+\n @item @emph{See also}:\n-@ref{COMMAND_ARGUMENT_COUNT}\n+@ref{GET_COMMAND}, @ref{COMMAND_ARGUMENT_COUNT}\n @end table\n \n \n@@ -3936,21 +4045,46 @@ END PROGRAM\n @node GETENV\n @section @code{GETENV} --- Get an environmental variable\n @findex @code{GETENV} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n+@cindex environment variable\n \n @table @asis\n @item @emph{Description}:\n+Get the @var{VALUE} of the environmental variable @var{ENVVAR}.\n+\n+This intrinsic routine is provided for backwards compatibility with \n+GNU Fortran 77.  In new code, programmers should consider the use of \n+the @ref{GET_ENVIRONMENT_VARIABLE} intrinsic defined by the Fortran\n+2003 standard.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n+Subroutine\n+\n @item @emph{Syntax}:\n+@code{CALL GETENV(ENVVAR,VALUE)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{ENVVAR} @tab Shall be of type @code{CHARACTER(*)}. \n+@item @var{VALUE}  @tab Shall be of type @code{CHARACTER(*)}. \n+@end multitable\n+\n @item @emph{Return value}:\n+Stores the value of @var{ENVVAR} in @var{VALUE}. If @var{VALUE} is \n+not large enough to hold the data, it is truncated. If @var{ENVVAR}\n+is not set, @var{VALUE} will be filled with blanks.\n+\n @item @emph{Example}:\n-@item @emph{Specific names}:\n+@smallexample\n+PROGRAM test_getenv\n+  CHARACTER(len=255) :: homedir\n+  CALL getenv(\"HOME\", homedir)\n+  WRITE (*,*) TRIM(homedir)\n+END PROGRAM\n+@end smallexample\n+\n @item @emph{See also}:\n @ref{GET_ENVIRONMENT_VARIABLE}\n @end table\n@@ -3960,24 +4094,40 @@ GNU extension\n @node GET_ENVIRONMENT_VARIABLE\n @section @code{GET_ENVIRONMENT_VARIABLE} --- Get an environmental variable\n @findex @code{GET_ENVIRONMENT_VARIABLE} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n+@cindex environment variable\n \n @table @asis\n @item @emph{Description}:\n+Get the @var{VALUE} of the environmental variable @var{ENVVAR}.\n+\n @item @emph{Standard}:\n F2003\n \n @item @emph{Class}:\n Subroutine\n \n @item @emph{Syntax}:\n+@code{CALL GET_ENVIRONMENT_VARIABLE(ENVVAR,VALUE)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{ENVVAR} @tab Shall be of type @code{CHARACTER(*)}. \n+@item @var{VALUE}  @tab Shall be of type @code{CHARACTER(*)}. \n+@end multitable\n+\n @item @emph{Return value}:\n+Stores the value of @var{ENVVAR} in @var{VALUE}. If @var{VALUE} is \n+not large enough to hold the data, it is truncated. If @var{ENVVAR}\n+is not set, @var{VALUE} will be filled with blanks.\n+\n @item @emph{Example}:\n-@item @emph{Specific names}:\n-@item @emph{See also}:\n+@smallexample\n+PROGRAM test_getenv\n+  CHARACTER(len=255) :: homedir\n+  CALL get_environment_variable(\"HOME\", homedir)\n+  WRITE (*,*) TRIM(homedir)\n+END PROGRAM\n+@end smallexample\n @end table\n \n \n@@ -4130,7 +4280,6 @@ Subroutine\n @item @emph{Example}:\n @item @emph{Specific names}:\n @item @emph{See also}:\n-@uref{http://gcc.gnu.org/bugzilla/show_bug.cgi?id=19292, g77 features lacking in gfortran}\n \n @end table\n \n@@ -4245,55 +4394,85 @@ end program test_iachar\n @findex @code{IAND} intrinsic\n @cindex bit operations\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+Bitwise logical @code{AND}.\n+\n @item @emph{Standard}:\n F95 and later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n+@code{RESULT = IAND(X, Y)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab The type shall be @code{INTEGER(*)}.\n+@item @var{Y} @tab The type shall be @code{INTEGER(*)}.\n+@end multitable\n+\n @item @emph{Return value}:\n+The return type is @code{INTEGER(*)} after cross-promotion of the arguments. \n+\n @item @emph{Example}:\n-@item @emph{Specific names}:\n+@smallexample\n+PROGRAM test_iand\n+  INTEGER :: a, b\n+  DATA a / Z'F' /, b / Z'3' /\n+  WRITE (*,*) IAND(a, b)\n+END PROGRAM\n+@end smallexample\n \n @item @emph{See also}:\n @ref{IOR}, @ref{IEOR}, @ref{IBITS}, @ref{IBSET}, @ref{IBCLR},\n @end table\n \n \n \n-\n @node IARGC\n-@section @code{IARGC} --- Get number of command line arguments\n+@section @code{IARGC} --- Get the number of command line arguments\n @findex @code{IARGC} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n+@cindex command line arguments\n+@cindex getopt\n \n @table @asis\n @item @emph{Description}:\n+@code{IARGC()} returns the number of arguments passed on the\n+command line when the containing program was invoked.\n+\n+This intrinsic routine is provided for backwards compatibility with \n+GNU Fortran 77.  In new code, programmers should consider the use of \n+the @ref{COMMAND_ARGUMENT_COUNT} intrinsic defined by the Fortran 2003 \n+standard.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n+Non-elemental Function\n+\n @item @emph{Syntax}:\n+@code{I = IARGC()}\n+\n @item @emph{Arguments}:\n+None.\n+\n @item @emph{Return value}:\n+The number of command line arguments, type @code{INTEGER(4)}.\n+\n @item @emph{Example}:\n-@item @emph{Specific names}:\n+See @ref{GETARG}\n+\n @item @emph{See also}:\n-@ref{GETARG}, @ref{GET_COMMAND}, @ref{COMMAND_ARGUMENT_COUNT}, @ref{GET_COMMAND_ARGUMENT}\n+GNU Fortran 77 compability subroutine: @ref{GETARG}\n \n+F2003 functions and subroutines: @ref{GET_COMMAND}, @ref{GET_COMMAND_ARGUMENT}, @ref{COMMAND_ARGUMENT_COUNT}\n @end table\n \n \n \n-\n @node IBCLR\n @section @code{IBCLR} --- Clear bit\n @findex @code{IBCLR} intrinsic\n@@ -5299,11 +5478,47 @@ Function\n @item @emph{Example}:\n @item @emph{Specific names}:\n @item @emph{See also}:\n-@uref{http://gcc.gnu.org/bugzilla/show_bug.cgi?id=19292, g77 features lacking in gfortran}\n \n @end table\n \n \n+@node LSTAT\n+@section @code{LSTAT} --- Get file status\n+@findex @code{LSTAT} intrinsic\n+@cindex file system operations \n+\n+@table @asis\n+@item @emph{Description}:\n+@code{LSTAT} is identical to @ref{STAT}, except that if path is a symbolic link, \n+then the link itself is statted, not the file that it refers to.\n+\n+The elements in @code{BUFF} are the same as described by @ref{STAT}.\n+\n+@item @emph{Standard}:\n+GNU extension\n+\n+@item @emph{Class}:\n+Non-elemental subroutine\n+\n+@item @emph{Syntax}:\n+@code{CALL LSTAT(FILE,BUFF[,STATUS])}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{FILE}   @tab The type shall be @code{CHARACTER(*)}, a valid path within the file system.\n+@item @var{BUFF}   @tab The type shall be @code{INTEGER(4), DIMENSION(13)}.\n+@item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER(4)}. Returns 0 \n+                        on success and a system specific error code otherwise.\n+@end multitable\n+\n+@item @emph{Example}:\n+See @ref{STAT} for an example.\n+\n+@item @emph{See also}:\n+To stat an open file: @ref{FSTAT}, to stat a file: @ref{STAT}\n+@end table\n+\n+\n \n @node LTIME\n @section @code{LTIME} --- Convert time to local time info\n@@ -5327,7 +5542,6 @@ Subroutine\n @item @emph{Example}:\n @item @emph{Specific names}:\n @item @emph{See also}:\n-@uref{http://gcc.gnu.org/bugzilla/show_bug.cgi?id=19292, g77 features lacking in gfortran}\n \n @end table\n \n@@ -6650,7 +6864,6 @@ Function\n @item @emph{Return value}:\n @item @emph{Example}:\n @item @emph{See also}:\n-@uref{http://gcc.gnu.org/bugzilla/show_bug.cgi?id=19292, g77 features lacking in gfortran}\n \n @end table\n \n@@ -7374,25 +7587,82 @@ pseudo-random number generators.\n @findex @code{STAT} intrinsic\n @cindex file system operations\n \n-Intrinsic implemented, documentation pending.\n-\n @table @asis\n @item @emph{Description}:\n+This function returns information about a file. No permissions are required on \n+the file itself, but execute (search) permission is required on all of the \n+directories in path that lead to the file.\n+\n+The elements that are obtained and stored in the array @code{BUFF}:\n+@multitable @columnfractions .15 .80\n+@item @code{buff(1)}   @tab  Device ID \n+@item @code{buff(2)}   @tab  Inode number \n+@item @code{buff(3)}   @tab  File mode \n+@item @code{buff(4)}   @tab  Number of links \n+@item @code{buff(5)}   @tab  Owner's uid \n+@item @code{buff(6)}   @tab  Owner's gid \n+@item @code{buff(7)}   @tab  ID of device containing directory entry for file (0 if not available) \n+@item @code{buff(8)}   @tab  File size (bytes) \n+@item @code{buff(9)}   @tab  Last access time \n+@item @code{buff(10)}  @tab  Last modification time \n+@item @code{buff(11)}  @tab  Last file status change time \n+@item @code{buff(12)}  @tab  Preferred I/O block size (-1 if not available) \n+@item @code{buff(13)}  @tab  Number of blocks allocated (-1 if not available)\n+@end multitable\n+\n+Not all these elements are relevant on all systems. \n+If an element is not relevant, it is returned as 0.\n+\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n+Non-elemental subroutine\n+\n @item @emph{Syntax}:\n+@code{CALL STAT(FILE,BUFF[,STATUS])}\n+\n @item @emph{Arguments}:\n-@item @emph{Return value}:\n+@multitable @columnfractions .15 .80\n+@item @var{FILE}   @tab The type shall be @code{CHARACTER(*)}, a valid path within the file system.\n+@item @var{BUFF}   @tab The type shall be @code{INTEGER(4), DIMENSION(13)}.\n+@item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER(4)}. Returns 0 \n+                        on success and a system specific error code otherwise.\n+@end multitable\n+\n @item @emph{Example}:\n+@smallexample\n+PROGRAM test_fstat\n+  INTEGER, DIMENSION(13) :: buff\n+  INTEGER :: status\n+\n+  CALL STAT(\"/etc/passwd\", statarr, status)\n+\n+  IF (status == 0) THEN\n+    WRITE (*, FMT=\"('Device ID:',                         T40, I19)\") buff(1)\n+    WRITE (*, FMT=\"('Inode number:',                      T40, I19)\") buff(2)\n+    WRITE (*, FMT=\"('File mode:',                         T40, o19)\") buff(3)\n+    WRITE (*, FMT=\"('Number of links:',                   T40, I19)\") buff(4)\n+    WRITE (*, FMT=\"('Owner''s uid:',                      T40, I19)\") buff(5)\n+    WRITE (*, FMT=\"('Owner''s gid:',                      T40, I19)\") buff(6)\n+    WRITE (*, FMT=\"('Device where directory is located:', T40, I19)\") buff(7)\n+    WRITE (*, FMT=\"('File size:',                         T40, I19)\") buff(8)\n+    WRITE (*, FMT=\"('Last access time:',                  T40, A19)\") CTIME(buff(9))\n+    WRITE (*, FMT=\"('Last modification time',             T40, A19)\") CTIME(buff(10))\n+    WRITE (*, FMT=\"('Last file status change time:',      T40, A19)\") CTIME(buff(11))\n+    WRITE (*, FMT=\"('Preferred I/O block size:',          T40, I19)\") buff(12)\n+    WRITE (*, FMT=\"('Number of blocks allocated:',        T40, I19)\") buff(13)\n+  END IF\n+END PROGRAM\n+@end smallexample\n+\n @item @emph{See also}:\n-@ref{FSTAT}\n+To stat an open file: @ref{FSTAT}, to stat a link: @ref{LSTAT}\n @end table\n \n \n \n-\n @node SUM\n @section @code{SUM} --- Sum of array elements\n @findex @code{SUM} intrinsic"}]}