{"sha": "50da34bb1b301f869253ca55bdb4833baa24ab4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBkYTM0YmIxYjMwMWY4NjkyNTNjYTU1YmRiNDgzM2JhYTI0YWI0ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2011-10-10T19:03:39Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-10-10T19:03:39Z"}, "message": "re PR libstdc++/49818 (libsupc++ does not export __cxa_get_globals or related functions)\n\n2011-10-10  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/49818\n\t* config/abi/pre/gnu.ver (CXXABI_1.3.6): Add symbols.\n\t* testsuite/util/testsuite_abi.cc: Same.\n\t* libsupc++/unwind-cxx.h: Move required eh API...\n\t* libsupc++/cxxabi.h: ... to here. Add required forward declarations.\n\tUse _GLIBCXX_NOTHROW.\n\t* libsupc++/pure.cc (__cxa_deleted_virtual): Add.\n\t* libsupc++/eh_alloc.cc: Use _GLIBCXX_NOTHROW.\n\t* libsupc++/eh_catch.cc: Same.\n\t* libsupc++/eh_globals.cc: Same.\n\t* libsupc++/eh_type.cc: Same.\n\nFrom-SVN: r179769", "tree": {"sha": "9b5859fe90688a479ce60fb42663b52ef495c130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b5859fe90688a479ce60fb42663b52ef495c130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50da34bb1b301f869253ca55bdb4833baa24ab4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50da34bb1b301f869253ca55bdb4833baa24ab4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50da34bb1b301f869253ca55bdb4833baa24ab4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50da34bb1b301f869253ca55bdb4833baa24ab4e/comments", "author": null, "committer": null, "parents": [{"sha": "13d563f0742f043e94666965709462d1de456048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13d563f0742f043e94666965709462d1de456048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13d563f0742f043e94666965709462d1de456048"}], "stats": {"total": 234, "additions": 144, "deletions": 90}, "files": [{"sha": "1822ff610e78c5d78fe3333f7db31285a7c22c6a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=50da34bb1b301f869253ca55bdb4833baa24ab4e", "patch": "@@ -1,3 +1,17 @@\n+2011-10-10  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/49818\n+\t* config/abi/pre/gnu.ver (CXXABI_1.3.6): Add symbols.\n+\t* testsuite/util/testsuite_abi.cc: Same.\n+\t* libsupc++/unwind-cxx.h: Move required eh API...\n+\t* libsupc++/cxxabi.h: ... to here. Add required forward declarations.\n+\tUse _GLIBCXX_NOTHROW.\n+\t* libsupc++/pure.cc (__cxa_deleted_virtual): Add.\n+\t* libsupc++/eh_alloc.cc: Use _GLIBCXX_NOTHROW.\n+\t* libsupc++/eh_catch.cc: Same.\n+\t* libsupc++/eh_globals.cc: Same.\n+\t* libsupc++/eh_type.cc: Same.\n+\t\n 2011-10-07  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* testsuite/util/testsuite_allocator.h (uneq_allocator): Add"}, {"sha": "c45b7db47f7b4672c3552d27197909f09eb6eb92", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=50da34bb1b301f869253ca55bdb4833baa24ab4e", "patch": "@@ -104,7 +104,7 @@ GLIBCXX_3.4 {\n       std::logic_error*;\n       std::locale::[A-Za-e]*;\n       std::locale::facet::[A-Za-z]*;\n-      std::locale::facet::_S_get_c_locale*;\t\n+      std::locale::facet::_S_get_c_locale*;\n       std::locale::facet::_S_clone_c_locale*;\n       std::locale::facet::_S_create_c_locale*;\n       std::locale::facet::_S_destroy_c_locale*;\n@@ -145,7 +145,7 @@ GLIBCXX_3.4 {\n       std::strstream*;\n       std::strstreambuf*;\n #     std::t[a-q]*;\n-      std::t[a-g]*;      \n+      std::t[a-g]*;\n       std::th[a-h]*;\n       std::th[j-q]*;\n       std::th[s-z]*;\n@@ -238,7 +238,7 @@ GLIBCXX_3.4 {\n     _ZNKSs8_M_limit*;\n     _ZNKSs9_M_ibeginEv;\n     _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_E*;\n-    _ZNKSs7compare*; \n+    _ZNKSs7compare*;\n     _ZNKSs5c_strEv;\n     _ZNKSs8capacityEv;\n     _ZNKSs4copyEPc[jmy][jmy];\n@@ -435,10 +435,10 @@ GLIBCXX_3.4 {\n \n     # std::locale destructors\n     _ZNSt6localeD*;\n-\t\n+\n     # std::locale::facet destructors\n     _ZNSt6locale5facetD*;\n-\t \n+\n     # std::locale::_Impl constructors, destructors\n     _ZNSt6locale5_ImplC*;\n     _ZNSt6locale5_ImplD*;\n@@ -447,7 +447,7 @@ GLIBCXX_3.4 {\n     _ZNSt8ios_baseD*;\n     _ZNSt8ios_base4InitD*;\n \n-    # bool std::has_facet \n+    # bool std::has_facet\n     _ZSt9has_facetIS*;\n \n     # std::use_facet\n@@ -486,7 +486,7 @@ GLIBCXX_3.4 {\n \n     # std::time_get_byname\n     _ZNSt15time_get_byname*;\n-    \n+\n     # std::time_put\n     _ZNSt8time_put*;\n     _ZNKSt8time_put*;\n@@ -569,7 +569,7 @@ GLIBCXX_3.4 {\n     _ZNK11__gnu_debug16_Error_formatter13_M_print_word*;\n     _ZNK11__gnu_debug16_Error_formatter15_M_print_string*;\n     _ZNK11__gnu_debug16_Error_formatter8_M_error*;\n-    \n+\n     # exceptions as functions\n     _ZSt16__throw_bad_castv;\n     _ZSt17__throw_bad_allocv;\n@@ -809,11 +809,11 @@ GLIBCXX_3.4 {\n };\n \n GLIBCXX_3.4.1 {\n- \n+\n     _ZNSt12__basic_fileIcE4fileEv;\n- \n+\n } GLIBCXX_3.4;\n- \n+\n GLIBCXX_3.4.2 {\n \n     _ZN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EE4fileEv;\n@@ -825,7 +825,7 @@ GLIBCXX_3.4.2 {\n } GLIBCXX_3.4.1;\n \n GLIBCXX_3.4.3 {\n- \n+\n     # stub functions from libmath\n     acosf;\n     acosl;\n@@ -969,7 +969,7 @@ GLIBCXX_3.4.10 {\n     _ZNKSt4hashIeEclEe;\n \n     _ZSt17__verify_grouping*;\n-    \n+\n     _ZNSt8__detail12__prime_listE;\n     _ZNSt3tr18__detail12__prime_listE;\n \n@@ -992,7 +992,7 @@ GLIBCXX_3.4.10 {\n } GLIBCXX_3.4.9;\n \n GLIBCXX_3.4.11 {\n-\t \n+\n     # atomic\n     __atomic_flag_for_address;\n     __atomic_flag_wait_explicit;\n@@ -1328,16 +1328,16 @@ CXXABI_1.3 {\n     __cxa_rethrow;\n     __cxa_throw;\n     __cxa_type_match;\n+    __cxa_vec_ctor;\n     __cxa_vec_cctor;\n     __cxa_vec_cleanup;\n-    __cxa_vec_ctor;\n+    __cxa_vec_delete;\n     __cxa_vec_delete2;\n     __cxa_vec_delete3;\n-    __cxa_vec_delete;\n     __cxa_vec_dtor;\n+    __cxa_vec_new;\n     __cxa_vec_new2;\n     __cxa_vec_new3;\n-    __cxa_vec_new;\n     __gxx_personality_v0;\n     __gxx_personality_sj0;\n     __dynamic_cast;\n@@ -1491,3 +1491,12 @@ CXXABI_1.3.5 {\n     _ZTVSt16nested_exception;\n \n } CXXABI_1.3.4;\n+\n+CXXABI_1.3.6 {\n+\n+    __cxa_allocate_dependent_exception;\n+    __cxa_free_dependent_exception;\n+    __cxa_get_exception_ptr;\n+    __cxa_deleted_virtual;\n+\n+} CXXABI_1.3.5;\n\\ No newline at end of file"}, {"sha": "e78f551ed45c9962018f7059682ec65e5df1153f", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 76, "deletions": 13, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=50da34bb1b301f869253ca55bdb4833baa24ab4e", "patch": "@@ -123,23 +123,26 @@ namespace __cxxabiv1\n   void\n   __cxa_guard_abort(__guard*) _GLIBCXX_NOTHROW;\n \n+  // DSO destruction.\n+  int\n+  __cxa_atexit(void (*)(void*), void*, void*) _GLIBCXX_NOTHROW;\n+\n+  int\n+  __cxa_finalize(void*);\n+\n   // Pure virtual functions.\n   void\n   __cxa_pure_virtual(void) __attribute__ ((__noreturn__));\n \n-  // Exception handling.\n   void\n-  __cxa_bad_cast();\n+  __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));\n \n-  void\n-  __cxa_bad_typeid();\n-\n-  // DSO destruction.\n-  int\n-  __cxa_atexit(void (*)(void*), void*, void*) _GLIBCXX_NOTHROW;\n+  // Exception handling auxillary.\n+  void \n+  __cxa_bad_cast() __attribute__((__noreturn__));\n \n-  int\n-  __cxa_finalize(void*);\n+  void \n+  __cxa_bad_typeid() __attribute__((__noreturn__));\n \n \n   /**\n@@ -185,6 +188,7 @@ namespace __cxxabiv1\n   char*\n   __cxa_demangle(const char* __mangled_name, char* __output_buffer,\n \t\t size_t* __length, int* __status);\n+\n #ifdef __cplusplus\n   }\n } // namespace __cxxabiv1\n@@ -547,30 +551,89 @@ namespace __cxxabiv1\n \t\t__upcast_result& __restrict __result) const;\n   };\n \n+  // Exception handling forward declarations.\n+  struct __cxa_exception;\n+  struct __cxa_refcounted_exception;\n+  struct __cxa_dependent_exception;\n+  struct __cxa_eh_globals;\n+\n+  extern \"C\"\n+  {\n   // Dynamic cast runtime.\n+\n   // src2dst has the following possible values\n   //  >-1: src_type is a unique public non-virtual base of dst_type\n   //       dst_ptr + src2dst == src_ptr\n   //   -1: unspecified relationship\n   //   -2: src_type is not a public base of dst_type\n   //   -3: src_type is a multiple public non-virtual base of dst_type\n-  extern \"C\" void*\n+  void*\n   __dynamic_cast(const void* __src_ptr, // Starting object.\n \t\t const __class_type_info* __src_type, // Static type of object.\n \t\t const __class_type_info* __dst_type, // Desired target type.\n \t\t ptrdiff_t __src2dst); // How src and dst are related.\n \n \n+  // Exception handling runtime.\n+\n+  // The __cxa_eh_globals for the current thread can be obtained by using\n+  // either of the following functions.  The \"fast\" version assumes at least\n+  // one prior call of __cxa_get_globals has been made from the current\n+  // thread, so no initialization is necessary.\n+  __cxa_eh_globals*\n+  __cxa_get_globals() _GLIBCXX_NOTHROW __attribute__ ((__const__));\n+\n+  __cxa_eh_globals*\n+  __cxa_get_globals_fast() _GLIBCXX_NOTHROW __attribute__ ((__const__));\n+\n+  // Allocate memory for the primary exception plus the thrown object.\n+  void*\n+  __cxa_allocate_exception(size_t) _GLIBCXX_NOTHROW;\n+\n+  // Free the space allocated for the primary exception.\n+  void \n+  __cxa_free_exception(void*) _GLIBCXX_NOTHROW;\n+\n+  // Throw the exception.\n+  void\n+  __cxa_throw(void*, std::type_info*, void (*) (void *)) \n+  __attribute__((__noreturn__));\n+\n+  // Used to implement exception handlers.\n+  void*\n+  __cxa_get_exception_ptr(void*) _GLIBCXX_NOTHROW __attribute__ ((__pure__));\n+\n+  void*\n+  __cxa_begin_catch(void*) _GLIBCXX_NOTHROW;\n+\n+  void \n+  __cxa_end_catch();\n+\n+  void \n+  __cxa_rethrow() __attribute__((__noreturn__));\n+\n   // Returns the type_info for the currently handled exception [15.3/8], or\n   // null if there is none.\n-  extern \"C\" std::type_info*\n+  std::type_info*\n   __cxa_current_exception_type() _GLIBCXX_NOTHROW __attribute__ ((__pure__));\n \n+  // GNU Extensions.\n+\n+  // Allocate memory for a dependent exception.\n+  __cxa_dependent_exception*\n+  __cxa_allocate_dependent_exception() _GLIBCXX_NOTHROW;\n+\n+  // Free the space allocated for the dependent exception.\n+  void\n+  __cxa_free_dependent_exception(__cxa_dependent_exception*) _GLIBCXX_NOTHROW;\n+\n+  } // extern \"C\"\n+\n   // A magic placeholder class that can be caught by reference\n   // to recognize foreign exceptions.\n   class __foreign_exception\n   {\n-    virtual ~__foreign_exception() _GLIBCXX_NOTHROW;\n+    virtual ~__foreign_exception() throw();\n     virtual void __pure_dummy() = 0; // prevent catch by value\n   };\n "}, {"sha": "74474d82ec69826166de8ee7d2e17a23a1571582", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=50da34bb1b301f869253ca55bdb4833baa24ab4e", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Allocate exception objects.\n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2009, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n@@ -94,7 +94,7 @@ namespace\n }\n \n extern \"C\" void *\n-__cxxabiv1::__cxa_allocate_exception(std::size_t thrown_size) throw()\n+__cxxabiv1::__cxa_allocate_exception(std::size_t thrown_size) _GLIBCXX_NOTHROW\n {\n   void *ret;\n \n@@ -139,7 +139,7 @@ __cxxabiv1::__cxa_allocate_exception(std::size_t thrown_size) throw()\n \n \n extern \"C\" void\n-__cxxabiv1::__cxa_free_exception(void *vptr) throw()\n+__cxxabiv1::__cxa_free_exception(void *vptr) _GLIBCXX_NOTHROW\n {\n   char *base = (char *) emergency_buffer;\n   char *ptr = (char *) vptr;\n@@ -158,7 +158,7 @@ __cxxabiv1::__cxa_free_exception(void *vptr) throw()\n \n \n extern \"C\" __cxa_dependent_exception*\n-__cxxabiv1::__cxa_allocate_dependent_exception() throw()\n+__cxxabiv1::__cxa_allocate_dependent_exception() _GLIBCXX_NOTHROW\n {\n   __cxa_dependent_exception *ret;\n \n@@ -202,7 +202,7 @@ __cxxabiv1::__cxa_allocate_dependent_exception() throw()\n \n extern \"C\" void\n __cxxabiv1::__cxa_free_dependent_exception\n-  (__cxa_dependent_exception *vptr) throw()\n+  (__cxa_dependent_exception *vptr) _GLIBCXX_NOTHROW\n {\n   char *base = (char *) dependents_buffer;\n   char *ptr = (char *) vptr;"}, {"sha": "b111497688d82d2dd51143cc51e503d3016af526", "filename": "libstdc++-v3/libsupc++/eh_catch.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc?ref=50da34bb1b301f869253ca55bdb4833baa24ab4e", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Exception handling routines for catching.\n-// Copyright (C) 2001, 2003, 2004, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003, 2004, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -28,7 +28,7 @@\n using namespace __cxxabiv1;\n \n extern \"C\" void *\n-__cxxabiv1::__cxa_get_exception_ptr(void *exc_obj_in) throw()\n+__cxxabiv1::__cxa_get_exception_ptr(void *exc_obj_in) _GLIBCXX_NOTHROW\n {\n   _Unwind_Exception *exceptionObject\n     = reinterpret_cast <_Unwind_Exception *>(exc_obj_in);\n@@ -37,7 +37,7 @@ __cxxabiv1::__cxa_get_exception_ptr(void *exc_obj_in) throw()\n }\n \n extern \"C\" void *\n-__cxxabiv1::__cxa_begin_catch (void *exc_obj_in) throw()\n+__cxxabiv1::__cxa_begin_catch (void *exc_obj_in) _GLIBCXX_NOTHROW\n {\n   _Unwind_Exception *exceptionObject\n     = reinterpret_cast <_Unwind_Exception *>(exc_obj_in);"}, {"sha": "0c7f6b760880748a4dbd6ea76ce2affa75ce883f", "filename": "libstdc++-v3/libsupc++/eh_globals.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc?ref=50da34bb1b301f869253ca55bdb4833baa24ab4e", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Manage the thread-local exception globals.\n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2009, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n@@ -47,19 +47,19 @@ using namespace __cxxabiv1;\n namespace\n {\n   abi::__cxa_eh_globals*\n-  get_global() throw()\n+  get_global() _GLIBCXX_NOTHROW\n   {\n     static __thread abi::__cxa_eh_globals global;\n     return &global;\n   }\n } // anonymous namespace\n \n extern \"C\" __cxa_eh_globals*\n-__cxxabiv1::__cxa_get_globals_fast() throw()\n+__cxxabiv1::__cxa_get_globals_fast() _GLIBCXX_NOTHROW\n { return get_global(); }\n \n extern \"C\" __cxa_eh_globals*\n-__cxxabiv1::__cxa_get_globals() throw()\n+__cxxabiv1::__cxa_get_globals() _GLIBCXX_NOTHROW\n { return get_global(); }\n \n \n@@ -110,7 +110,7 @@ struct __eh_globals_init\n static __eh_globals_init init;\n \n extern \"C\" __cxa_eh_globals*\n-__cxxabiv1::__cxa_get_globals_fast() throw()\n+__cxxabiv1::__cxa_get_globals_fast() _GLIBCXX_NOTHROW\n {\n   __cxa_eh_globals* g;\n   if (init._M_init)\n@@ -121,7 +121,7 @@ __cxxabiv1::__cxa_get_globals_fast() throw()\n }\n \n extern \"C\" __cxa_eh_globals*\n-__cxxabiv1::__cxa_get_globals() throw()\n+__cxxabiv1::__cxa_get_globals() _GLIBCXX_NOTHROW\n {\n   __cxa_eh_globals* g;\n   if (init._M_init)\n@@ -148,11 +148,11 @@ __cxxabiv1::__cxa_get_globals() throw()\n #else\n \n extern \"C\" __cxa_eh_globals*\n-__cxxabiv1::__cxa_get_globals_fast() throw()\n+__cxxabiv1::__cxa_get_globals_fast() _GLIBCXX_NOTHROW\n { return &eh_globals; }\n \n extern \"C\" __cxa_eh_globals*\n-__cxxabiv1::__cxa_get_globals() throw()\n+__cxxabiv1::__cxa_get_globals() _GLIBCXX_NOTHROW\n { return &eh_globals; }\n \n #endif"}, {"sha": "245e0eaab96d82dec5f36ea08a42df466fccfe55", "filename": "libstdc++-v3/libsupc++/eh_type.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_type.cc?ref=50da34bb1b301f869253ca55bdb4833baa24ab4e", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Exception handling routines for catching.\n-// Copyright (C) 2001, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2008, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -33,7 +33,7 @@ namespace __cxxabiv1\n // Returns the type_info for the currently handled exception [15.3/8], or\n // null if there is none.\n extern \"C\"\n-std::type_info *__cxa_current_exception_type () throw()\n+std::type_info *__cxa_current_exception_type () _GLIBCXX_NOTHROW\n {\n   __cxa_eh_globals *globals = __cxa_get_globals ();\n   __cxa_exception *header = globals->caughtExceptions;"}, {"sha": "4879e59de3565709823a910cbbc066f11ebaa21e", "filename": "libstdc++-v3/libsupc++/pure.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc?ref=50da34bb1b301f869253ca55bdb4833baa24ab4e", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- \n-// Copyright (C) 2000, 2001, 2009 Free Software Foundation\n+// Copyright (C) 2000, 2001, 2009, 2011 Free Software Foundation\n //\n // This file is part of GCC.\n //\n@@ -49,3 +49,10 @@ __cxxabiv1::__cxa_pure_virtual (void)\n   writestr (\"pure virtual method called\\n\");\n   std::terminate ();\n }\n+\n+extern \"C\" void\n+__cxxabiv1::__cxa_deleted_virtual (void)\n+{\n+  writestr (\"deleted virtual method called\\n\");\n+  std::terminate ();\n+}"}, {"sha": "84dd36781dfe7b7dd2fa11c89e7d69f8830b1b17", "filename": "libstdc++-v3/libsupc++/unwind-cxx.h", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h?ref=50da34bb1b301f869253ca55bdb4833baa24ab4e", "patch": "@@ -36,6 +36,7 @@\n #include <cstddef>\n #include \"unwind.h\"\n #include <bits/atomic_word.h>\n+#include <cxxabi.h>\n \n #pragma GCC visibility push(default)\n \n@@ -143,47 +144,6 @@ struct __cxa_eh_globals\n #endif\n };\n \n-\n-// The __cxa_eh_globals for the current thread can be obtained by using\n-// either of the following functions.  The \"fast\" version assumes at least\n-// one prior call of __cxa_get_globals has been made from the current\n-// thread, so no initialization is necessary.\n-extern \"C\" __cxa_eh_globals *__cxa_get_globals () throw() \n-  __attribute__ ((__const__));\n-extern \"C\" __cxa_eh_globals *__cxa_get_globals_fast () throw() \n-  __attribute__ ((__const__));\n-\n-// Allocate memory for the primary exception plus the thrown object.\n-extern \"C\" void *__cxa_allocate_exception(std::size_t thrown_size) throw();\n-\n-// Free the space allocated for the primary exception.\n-extern \"C\" void __cxa_free_exception(void *thrown_exception) throw();\n-\n-// Allocate memory for a dependent exception.\n-extern \"C\" __cxa_dependent_exception*\n-__cxa_allocate_dependent_exception() throw();\n-\n-// Free the space allocated for the dependent exception.\n-extern \"C\" void\n-__cxa_free_dependent_exception(__cxa_dependent_exception *ex) throw();\n-\n-// Throw the exception.\n-extern \"C\" void __cxa_throw (void *thrown_exception,\n-\t\t\t     std::type_info *tinfo,\n-\t\t\t     void (*dest) (void *))\n-  __attribute__((__noreturn__));\n-\n-// Used to implement exception handlers.\n-extern \"C\" void *__cxa_get_exception_ptr (void *) throw()\n-  __attribute__ ((__pure__));\n-extern \"C\" void *__cxa_begin_catch (void *) throw();\n-extern \"C\" void __cxa_end_catch ();\n-extern \"C\" void __cxa_rethrow () __attribute__((__noreturn__));\n-\n-// These facilitate code generation for recurring situations.\n-extern \"C\" void __cxa_bad_cast () __attribute__((__noreturn__));\n-extern \"C\" void __cxa_bad_typeid () __attribute__((__noreturn__));\n-\n // @@@ These are not directly specified by the IA-64 C++ ABI.\n \n // Handles re-checking the exception specification if unexpectedHandler"}, {"sha": "9e6837e9b5241914b427a7fe58577678168a11ca", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50da34bb1b301f869253ca55bdb4833baa24ab4e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=50da34bb1b301f869253ca55bdb4833baa24ab4e", "patch": "@@ -204,6 +204,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"CXXABI_1.3.3\");\n       known_versions.push_back(\"CXXABI_1.3.4\");\n       known_versions.push_back(\"CXXABI_1.3.5\");\n+      known_versions.push_back(\"CXXABI_1.3.6\");\n       known_versions.push_back(\"CXXABI_LDBL_1.3\");\n     }\n   compat_list::iterator begin = known_versions.begin();"}]}