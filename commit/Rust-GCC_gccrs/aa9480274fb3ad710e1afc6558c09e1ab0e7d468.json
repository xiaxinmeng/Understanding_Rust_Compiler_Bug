{"sha": "aa9480274fb3ad710e1afc6558c09e1ab0e7d468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE5NDgwMjc0ZmIzYWQ3MTBlMWFmYzY1NThjMDllMWFiMGU3ZDQ2OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-10-31T16:52:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-10-31T16:52:19Z"}, "message": "tree-vect-stmts.c (vectorizable_shift): If op1 is vect_external_def in a loop and has different type from op0...\n\n\t* tree-vect-stmts.c (vectorizable_shift): If op1 is vect_external_def\n\tin a loop and has different type from op0, cast it to op0's type\n\tbefore the loop first.  For slp give up.  Don't crash if op1_vectype\n\tis NULL.\n\n\t* gcc.dg/vshift-3.c: New test.\n\t* gcc.dg/vshift-4.c: New test.\n\t* gcc.dg/vshift-5.c: New test.\n\nFrom-SVN: r180704", "tree": {"sha": "021f641e722e04eb77cf47f6a52a9de1f42432ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/021f641e722e04eb77cf47f6a52a9de1f42432ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa9480274fb3ad710e1afc6558c09e1ab0e7d468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9480274fb3ad710e1afc6558c09e1ab0e7d468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9480274fb3ad710e1afc6558c09e1ab0e7d468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9480274fb3ad710e1afc6558c09e1ab0e7d468/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "08810e5257936014e242527cdbb2de6beddf24e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08810e5257936014e242527cdbb2de6beddf24e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08810e5257936014e242527cdbb2de6beddf24e8"}], "stats": {"total": 262, "additions": 260, "deletions": 2}, "files": [{"sha": "ada5acbd16e51591632131f1df9f7a324a106446", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9480274fb3ad710e1afc6558c09e1ab0e7d468/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9480274fb3ad710e1afc6558c09e1ab0e7d468/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa9480274fb3ad710e1afc6558c09e1ab0e7d468", "patch": "@@ -1,3 +1,10 @@\n+2011-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-vect-stmts.c (vectorizable_shift): If op1 is vect_external_def\n+\tin a loop and has different type from op0, cast it to op0's type\n+\tbefore the loop first.  For slp give up.  Don't crash if op1_vectype\n+\tis NULL.\n+\n 2011-10-31  Paul Brook  <paul@codesourcery.com>\n \n \t* cgraphunit.c: Don't mark clones as static constructors."}, {"sha": "f58934b472a769fc7cd2e1d329c023b101073111", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9480274fb3ad710e1afc6558c09e1ab0e7d468/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9480274fb3ad710e1afc6558c09e1ab0e7d468/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa9480274fb3ad710e1afc6558c09e1ab0e7d468", "patch": "@@ -1,3 +1,9 @@\n+2011-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/vshift-3.c: New test.\n+\t* gcc.dg/vshift-4.c: New test.\n+\t* gcc.dg/vshift-5.c: New test.\n+\n 2011-10-31  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* gfortran.dg/inquire_5.f90: Update testcase to match the standard"}, {"sha": "e62c76b469fc8c11e93321d82f0a0caab79728b7", "filename": "gcc/testsuite/gcc.dg/vshift-3.c", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9480274fb3ad710e1afc6558c09e1ab0e7d468/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9480274fb3ad710e1afc6558c09e1ab0e7d468/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-3.c?ref=aa9480274fb3ad710e1afc6558c09e1ab0e7d468", "patch": "@@ -0,0 +1,136 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <stdlib.h>\n+\n+#define N 64\n+\n+#ifndef TYPE1\n+#define TYPE1 int\n+#define TYPE2 long long\n+#endif\n+\n+signed TYPE1 a[N], b, g[N];\n+unsigned TYPE1 c[N], h[N];\n+signed TYPE2 d[N], e, j[N];\n+unsigned TYPE2 f[N], k[N];\n+\n+#ifndef S\n+#define S(x) x\n+#endif\n+\n+__attribute__((noinline)) void\n+f1 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    g[i] = a[i] << S (b);\n+}\n+\n+__attribute__((noinline)) void\n+f2 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    g[i] = a[i] >> S (b);\n+}\n+\n+__attribute__((noinline)) void\n+f3 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    h[i] = c[i] >> S (b);\n+}\n+\n+__attribute__((noinline)) void\n+f4 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    j[i] = d[i] << S (e);\n+}\n+\n+__attribute__((noinline)) void\n+f5 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    j[i] = d[i] >> S (e);\n+}\n+\n+__attribute__((noinline)) void\n+f6 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    k[i] = f[i] >> S (e);\n+}\n+\n+__attribute__((noinline)) void\n+f7 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    j[i] = d[i] << S (b);\n+}\n+\n+__attribute__((noinline)) void\n+f8 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    j[i] = d[i] >> S (b);\n+}\n+\n+__attribute__((noinline)) void\n+f9 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    k[i] = f[i] >> S (b);\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  b = 7;\n+  e = 12;\n+  for (i = 0; i < N; i++)\n+    {\n+      asm (\"\");\n+      c[i] = (random () << 1) | (random () & 1);\n+      a[i] = c[i];\n+      d[i] = (random () << 1) | (random () & 1);\n+      d[i] |= (unsigned long long) c[i] << 32;\n+      f[i] = d[i];\n+    }\n+  f1 ();\n+  f3 ();\n+  f4 ();\n+  f6 ();\n+  for (i = 0; i < N; i++)\n+    if (g[i] != (signed TYPE1) (a[i] << S (b))\n+\t|| h[i] != (unsigned TYPE1) (c[i] >> S (b))\n+\t|| j[i] != (signed TYPE2) (d[i] << S (e))\n+\t|| k[i] != (unsigned TYPE2) (f[i] >> S (e)))\n+      abort ();\n+  f2 ();\n+  f5 ();\n+  f9 ();\n+  for (i = 0; i < N; i++)\n+    if (g[i] != (signed TYPE1) (a[i] >> S (b))\n+\t|| j[i] != (signed TYPE2) (d[i] >> S (e))\n+\t|| k[i] != (unsigned TYPE2) (f[i] >> S (b)))\n+      abort ();\n+  f7 ();\n+  for (i = 0; i < N; i++)\n+    if (j[i] != (signed TYPE2) (d[i] << S (b)))\n+      abort ();\n+  f8 ();\n+  for (i = 0; i < N; i++)\n+    if (j[i] != (signed TYPE2) (d[i] >> S (b)))\n+      abort ();\n+  return 0;\n+}"}, {"sha": "c43fbcc196ea4f889746aa5f15ddc489f72a3965", "filename": "gcc/testsuite/gcc.dg/vshift-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9480274fb3ad710e1afc6558c09e1ab0e7d468/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9480274fb3ad710e1afc6558c09e1ab0e7d468/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-4.c?ref=aa9480274fb3ad710e1afc6558c09e1ab0e7d468", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+#define S(x) 3\n+\n+#include \"vshift-3.c\""}, {"sha": "daa5f1c5cd8e9f1ac2afe08d8ef9b2761c80031f", "filename": "gcc/testsuite/gcc.dg/vshift-5.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9480274fb3ad710e1afc6558c09e1ab0e7d468/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9480274fb3ad710e1afc6558c09e1ab0e7d468/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvshift-5.c?ref=aa9480274fb3ad710e1afc6558c09e1ab0e7d468", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+extern void abort (void);\n+long long a[16];\n+\n+__attribute__((noinline, noclone)) void\n+f1 (void)\n+{\n+  long long a0, a1, a2, a3;\n+  a0 = a[0];\n+  a1 = a[1];\n+  a2 = a[2];\n+  a3 = a[3];\n+  a0 = a0 << 2;\n+  a1 = a1 << 3;\n+  a2 = a2 << 4;\n+  a3 = a3 << 5;\n+  a[0] = a0;\n+  a[1] = a1;\n+  a[2] = a2;\n+  a[3] = a3;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f2 (void)\n+{\n+  long long a0, a1, a2, a3;\n+  a0 = a[0];\n+  a1 = a[1];\n+  a2 = a[2];\n+  a3 = a[3];\n+  a0 = a0 << 2;\n+  a1 = a1 << 2;\n+  a2 = a2 << 2;\n+  a3 = a3 << 2;\n+  a[0] = a0;\n+  a[1] = a1;\n+  a[2] = a2;\n+  a[3] = a3;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f3 (int x)\n+{\n+  long long a0, a1, a2, a3;\n+  a0 = a[0];\n+  a1 = a[1];\n+  a2 = a[2];\n+  a3 = a[3];\n+  a0 = a0 << x;\n+  a1 = a1 << x;\n+  a2 = a2 << x;\n+  a3 = a3 << x;\n+  a[0] = a0;\n+  a[1] = a1;\n+  a[2] = a2;\n+  a[3] = a3;\n+}\n+\n+int\n+main ()\n+{\n+  a[0] = 4LL;\n+  a[1] = 3LL;\n+  a[2] = 2LL;\n+  a[3] = 1LL;\n+  f1 ();\n+  if (a[0] != (4LL << 2) || a[1] != (3LL << 3)\n+      || a[2] != (2LL << 4) || a[3] != (1LL << 5))\n+    abort ();\n+  f2 ();\n+  if (a[0] != (4LL << 4) || a[1] != (3LL << 5)\n+      || a[2] != (2LL << 6) || a[3] != (1LL << 7))\n+    abort ();\n+  f3 (3);\n+  if (a[0] != (4LL << 7) || a[1] != (3LL << 8)\n+      || a[2] != (2LL << 9) || a[3] != (1LL << 10))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "c6df30e9310c1efd4d30e7468b23d73b5e81f6ce", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa9480274fb3ad710e1afc6558c09e1ab0e7d468/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa9480274fb3ad710e1afc6558c09e1ab0e7d468/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=aa9480274fb3ad710e1afc6558c09e1ab0e7d468", "patch": "@@ -2453,7 +2453,10 @@ vectorizable_shift (gimple stmt, gimple_stmt_iterator *gsi,\n       optab = optab_for_tree_code (code, vectype, optab_vector);\n       if (vect_print_dump_info (REPORT_DETAILS))\n         fprintf (vect_dump, \"vector/vector shift/rotate found.\");\n-      if (TYPE_MODE (op1_vectype) != TYPE_MODE (vectype))\n+      if (!op1_vectype)\n+\top1_vectype = get_same_sized_vectype (TREE_TYPE (op1), vectype_out);\n+      if (op1_vectype == NULL_TREE\n+\t  || TYPE_MODE (op1_vectype) != TYPE_MODE (vectype))\n \t{\n \t  if (vect_print_dump_info (REPORT_DETAILS))\n \t    fprintf (vect_dump, \"unusable type for last operand in\"\n@@ -2487,9 +2490,28 @@ vectorizable_shift (gimple stmt, gimple_stmt_iterator *gsi,\n               /* Unlike the other binary operators, shifts/rotates have\n                  the rhs being int, instead of the same type as the lhs,\n                  so make sure the scalar is the right type if we are\n-                 dealing with vectors of short/char.  */\n+\t\t dealing with vectors of long long/long/short/char.  */\n               if (dt[1] == vect_constant_def)\n                 op1 = fold_convert (TREE_TYPE (vectype), op1);\n+\t      else if (!useless_type_conversion_p (TREE_TYPE (vectype),\n+\t\t\t\t\t\t   TREE_TYPE (op1)))\n+\t\t{\n+\t\t  if (slp_node\n+\t\t      && TYPE_MODE (TREE_TYPE (vectype))\n+\t\t\t != TYPE_MODE (TREE_TYPE (op1)))\n+\t\t    {\n+\t\t      if (vect_print_dump_info (REPORT_DETAILS))\n+\t\t      fprintf (vect_dump, \"unusable type for last operand in\"\n+\t\t\t\t\t  \" vector/vector shift/rotate.\");\n+\t\t\treturn false;\n+\t\t    }\n+\t\t  if (vec_stmt && !slp_node)\n+\t\t    {\n+\t\t      op1 = fold_convert (TREE_TYPE (vectype), op1);\n+\t\t      op1 = vect_init_vector (stmt, op1,\n+\t\t\t\t\t      TREE_TYPE (vectype), NULL);\n+\t\t    }\n+\t\t}\n             }\n         }\n     }"}]}