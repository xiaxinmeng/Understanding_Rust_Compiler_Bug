{"sha": "e73d9fcafbd07bc3714fbaf8a82db71d50015c92", "node_id": "C_kwDOANBUbNoAKGU3M2Q5ZmNhZmJkMDdiYzM3MTRmYmFmOGE4MmRiNzFkNTAwMTVjOTI", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-09-26T19:03:53Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-09-27T16:30:23Z"}, "message": "runtime: portable access to sigev_notify_thread_id\n\nPreviously, libgo relied on the _sigev_un implementation-specific\nfield in struct sigevent, which is only available on glibc.\nThis patch uses the sigev_notify_thread_id macro instead which is\nmandated by timer_create(2). In theory, this should work with any libc\nimplementation for Linux. Unfortunately, there is an open glibc bug\nas glibc does not define this macro. For this reason, a glibc-specific\nworkaround is required. Other libcs (such as musl) define the macro\nand don't require the workaround.\n\nSee https://sourceware.org/bugzilla/show_bug.cgi?id=27417\n\nThis makes libgo compatible with musl libc.\n\nBased on patch by S\u00f6ren Tempel.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/434755", "tree": {"sha": "44d8382e7696a4aa4ecbc6e116b2654775215402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44d8382e7696a4aa4ecbc6e116b2654775215402"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e73d9fcafbd07bc3714fbaf8a82db71d50015c92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73d9fcafbd07bc3714fbaf8a82db71d50015c92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73d9fcafbd07bc3714fbaf8a82db71d50015c92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73d9fcafbd07bc3714fbaf8a82db71d50015c92/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38162977e2b7efaa75233a0cba2a30a2b7f5132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38162977e2b7efaa75233a0cba2a30a2b7f5132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38162977e2b7efaa75233a0cba2a30a2b7f5132"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "4793c821eba855647f7840ab084044961ac88e65", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73d9fcafbd07bc3714fbaf8a82db71d50015c92/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73d9fcafbd07bc3714fbaf8a82db71d50015c92/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=e73d9fcafbd07bc3714fbaf8a82db71d50015c92", "patch": "@@ -1,4 +1,4 @@\n-0140cca9bc0fad1108c7ed369376ac71cc4bfecf\n+8f1a91aeff400d572857895b7f5e863ec5a4d93e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "2b2d827cee89322531005e707fc3850ed8dbb3a5", "filename": "libgo/go/runtime/os_linux.go", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73d9fcafbd07bc3714fbaf8a82db71d50015c92/libgo%2Fgo%2Fruntime%2Fos_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73d9fcafbd07bc3714fbaf8a82db71d50015c92/libgo%2Fgo%2Fruntime%2Fos_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_linux.go?ref=e73d9fcafbd07bc3714fbaf8a82db71d50015c92", "patch": "@@ -22,6 +22,12 @@ type mOS struct {\n \tprofileTimerValid uint32\n }\n \n+// setSigeventTID is written in C to set the sigev_notify_thread_id\n+// field of a sigevent struct.\n+//\n+//go:noescape\n+func setSigeventTID(*_sigevent, int32)\n+\n func getProcID() uint64 {\n \treturn uint64(gettid())\n }\n@@ -52,9 +58,12 @@ const (\n )\n \n // Atomically,\n+//\n //\tif(*addr == val) sleep\n+//\n // Might be woken up spuriously; that's allowed.\n // Don't sleep longer than ns; ns < 0 means forever.\n+//\n //go:nosplit\n func futexsleep(addr *uint32, val uint32, ns int64) {\n \t// Some Linux kernels have a bug where futex of\n@@ -73,6 +82,7 @@ func futexsleep(addr *uint32, val uint32, ns int64) {\n }\n \n // If any procs are sleeping on addr, wake up at most cnt.\n+//\n //go:nosplit\n func futexwakeup(addr *uint32, cnt uint32) {\n \tret := futex(unsafe.Pointer(addr), _FUTEX_WAKE_PRIVATE, cnt, nil, nil, 0)\n@@ -365,7 +375,7 @@ func setThreadCPUProfiler(hz int32) {\n \tvar sevp _sigevent\n \tsevp.sigev_notify = _SIGEV_THREAD_ID\n \tsevp.sigev_signo = _SIGPROF\n-\t*((*int32)(unsafe.Pointer(&sevp._sigev_un))) = int32(mp.procid)\n+\tsetSigeventTID(&sevp, int32(mp.procid))\n \tret := timer_create(_CLOCK_THREAD_CPUTIME_ID, &sevp, &timerid)\n \tif ret != 0 {\n \t\t// If we cannot create a timer for this M, leave profileTimerValid false"}, {"sha": "aa1b6305ad09d90e6938330b5fda679d7b61becf", "filename": "libgo/runtime/go-signal.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73d9fcafbd07bc3714fbaf8a82db71d50015c92/libgo%2Fruntime%2Fgo-signal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73d9fcafbd07bc3714fbaf8a82db71d50015c92/libgo%2Fruntime%2Fgo-signal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-signal.c?ref=e73d9fcafbd07bc3714fbaf8a82db71d50015c92", "patch": "@@ -183,6 +183,24 @@ setSigactionHandler(struct sigaction* sa, uintptr handler)\n \tsa->sa_sigaction = (void*)(handler);\n }\n \n+#ifdef __linux__\n+\n+// Workaround for https://sourceware.org/bugzilla/show_bug.cgi?id=27417\n+#ifndef sigev_notify_thread_id\n+  #define sigev_notify_thread_id _sigev_un._tid\n+#endif\n+\n+void setSigeventTID(struct sigevent*, int32_t)\n+\t__asm__ (GOSYM_PREFIX \"runtime.setSigeventTID\");\n+\n+void\n+setSigeventTID(struct sigevent *sev, int32_t v)\n+{\n+\tsev->sigev_notify_thread_id = v;\n+}\n+\n+#endif // defined(__linux__)\n+\n // C code to fetch values from the siginfo_t and ucontext_t pointers\n // passed to a signal handler.\n "}]}