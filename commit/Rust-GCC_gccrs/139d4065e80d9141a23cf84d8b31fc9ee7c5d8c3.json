{"sha": "139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM5ZDQwNjVlODBkOTE0MWEyM2NmODRkOGIzMWZjOWVlN2M1ZDhjMw==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2017-02-05T15:43:03Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2017-02-05T15:43:03Z"}, "message": "re PR fortran/79344 (segmentation faults and run-time errors)\n\ngcc/fortran/ChangeLog:\n\n2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/79344\n\t* trans-stmt.c (gfc_trans_allocate): Only deallocate the components of\n\tthe temporary, when a new object was created for the temporary.  Not\n\twhen it is just an alias to an existing object.\n\ngcc/testsuite/ChangeLog:\n\n2017-02-04  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/79344\n\t* gfortran.dg/allocate_with_source_24.f90: New test.\n\nFrom-SVN: r245194", "tree": {"sha": "c07eb1799927d7474a9ed1151941fa320a1276ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c07eb1799927d7474a9ed1151941fa320a1276ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3/comments", "author": null, "committer": null, "parents": [{"sha": "ea06c7b0c4299833959a6a62a7a57533e60c8418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea06c7b0c4299833959a6a62a7a57533e60c8418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea06c7b0c4299833959a6a62a7a57533e60c8418"}], "stats": {"total": 158, "additions": 153, "deletions": 5}, "files": [{"sha": "400f516203ee5721c91c0be5f7ad327bf18d681c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3", "patch": "@@ -1,3 +1,10 @@\n+2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/79344\n+\t* trans-stmt.c (gfc_trans_allocate): Only deallocate the components of\n+\tthe temporary, when a new object was created for the temporary.  Not\n+\twhen it is just an alias to an existing object.\n+\n 2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/79335"}, {"sha": "773ca704f387cdc02bd978f834719f94bf6e65b8", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3", "patch": "@@ -5572,7 +5572,8 @@ gfc_trans_allocate (gfc_code * code)\n      expression.  */\n   if (code->expr3)\n     {\n-      bool vtab_needed = false, temp_var_needed = false;\n+      bool vtab_needed = false, temp_var_needed = false,\n+\t  temp_obj_created = false;\n \n       is_coarray = gfc_is_coarray (code->expr3);\n \n@@ -5645,7 +5646,7 @@ gfc_trans_allocate (gfc_code * code)\n \t\t\t\t     code->expr3->ts,\n \t\t\t\t     false, true,\n \t\t\t\t     false, false);\n-\t  temp_var_needed = !VAR_P (se.expr);\n+\t  temp_obj_created = temp_var_needed = !VAR_P (se.expr);\n \t}\n       gfc_add_block_to_block (&block, &se.pre);\n       gfc_add_block_to_block (&post, &se.post);\n@@ -5714,11 +5715,12 @@ gfc_trans_allocate (gfc_code * code)\n \t}\n \n       /* Deallocate any allocatable components in expressions that use a\n-\t temporary, i.e. are not of expr-type EXPR_VARIABLE or force the\n-\t use of a temporary, after the assignment of expr3 is completed.  */\n+\t temporary object, i.e. are not a simple alias of to an EXPR_VARIABLE.\n+\t E.g. temporaries of a function call need freeing of their components\n+\t here.  */\n       if ((code->expr3->ts.type == BT_DERIVED\n \t   || code->expr3->ts.type == BT_CLASS)\n-\t  && (code->expr3->expr_type != EXPR_VARIABLE || temp_var_needed)\n+\t  && (code->expr3->expr_type != EXPR_VARIABLE || temp_obj_created)\n \t  && code->expr3->ts.u.derived->attr.alloc_comp)\n \t{\n \t  tmp = gfc_deallocate_alloc_comp (code->expr3->ts.u.derived,"}, {"sha": "898f55a44a3dec9f0d28953b97ee788e736d699b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3", "patch": "@@ -1,3 +1,8 @@\n+2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/79344\n+\t* gfortran.dg/allocate_with_source_24.f90: New test.\n+\n 2017-02-05  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/79230"}, {"sha": "ec11d7af401096a3809aea4a4cdc60ff5561f58b", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_24.f90", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_24.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_24.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_24.f90?ref=139d4065e80d9141a23cf84d8b31fc9ee7c5d8c3", "patch": "@@ -0,0 +1,134 @@\n+! { dg-do run }\n+!\n+! Test that the temporary in a sourced-ALLOCATE is not freeed.\n+! PR fortran/79344\n+! Contributed by Juergen Reuter\n+\n+module iso_varying_string\n+  implicit none\n+\n+  type, public :: varying_string\n+     private\n+     character(LEN=1), dimension(:), allocatable :: chars\n+  end type varying_string\n+\n+  interface assignment(=)\n+     module procedure op_assign_VS_CH\n+  end interface assignment(=)\n+\n+  interface operator(/=)\n+     module procedure op_not_equal_VS_CA\n+  end interface operator(/=)\n+\n+  interface len\n+     module procedure len_\n+  end interface len\n+\n+  interface var_str\n+     module procedure var_str_\n+  end interface var_str\n+\n+  public :: assignment(=)\n+  public :: operator(/=)\n+  public :: len\n+\n+  private :: op_assign_VS_CH\n+  private :: op_not_equal_VS_CA\n+  private :: char_auto\n+  private :: len_\n+  private :: var_str_\n+\n+contains\n+\n+  elemental function len_ (string) result (length)\n+    type(varying_string), intent(in) :: string\n+    integer                          :: length\n+    if(ALLOCATED(string%chars)) then\n+       length = SIZE(string%chars)\n+    else\n+       length = 0\n+    endif\n+  end function len_\n+\n+  elemental subroutine op_assign_VS_CH (var, exp)\n+    type(varying_string), intent(out) :: var\n+    character(LEN=*), intent(in)      :: exp\n+    var = var_str(exp)\n+  end subroutine op_assign_VS_CH\n+\n+  pure function op_not_equal_VS_CA (var, exp) result(res)\n+    type(varying_string), intent(in) :: var\n+    character(LEN=*), intent(in)     :: exp\n+    logical :: res\n+    integer :: i\n+    res = .true.\n+    if (len(exp) /= size(var%chars)) return\n+    do i = 1, size(var%chars)\n+      if (var%chars(i) /= exp(i:i)) return\n+    end do\n+    res = .false.\n+  end function op_not_equal_VS_CA\n+\n+  pure function char_auto (string) result (char_string)\n+    type(varying_string), intent(in) :: string\n+    character(LEN=len(string))       :: char_string\n+    integer                          :: i_char\n+    forall(i_char = 1:len(string))\n+       char_string(i_char:i_char) = string%chars(i_char)\n+    end forall\n+  end function char_auto\n+\n+  elemental function var_str_ (char) result (string)\n+    character(LEN=*), intent(in) :: char\n+    type(varying_string)         :: string\n+    integer                      :: length\n+    integer                      :: i_char\n+    length = LEN(char)\n+    ALLOCATE(string%chars(length))\n+    forall(i_char = 1:length)\n+       string%chars(i_char) = char(i_char:i_char)\n+    end forall\n+  end function var_str_\n+\n+end module iso_varying_string\n+\n+!!!!!\n+ \n+program test_pr79344\n+\n+  use iso_varying_string, string_t => varying_string\n+\n+  implicit none\n+\n+  type :: field_data_t\n+     type(string_t), dimension(:), allocatable :: name\n+  end type field_data_t\n+\n+  type(field_data_t) :: model, model2\n+  allocate(model%name(2))\n+  model%name(1) = \"foo\"\n+  model%name(2) = \"bar\"\n+  call copy(model, model2)\n+contains\n+\n+  subroutine copy(prt, prt_src)\n+    implicit none\n+    type(field_data_t), intent(inout) :: prt\n+    type(field_data_t), intent(in) :: prt_src\n+    integer :: i\n+    if (allocated (prt_src%name)) then\n+       if (prt_src%name(1) /= \"foo\") call abort()\n+       if (prt_src%name(2) /= \"bar\") call abort()\n+\n+       if (allocated (prt%name))  deallocate (prt%name)\n+       allocate (prt%name (size (prt_src%name)), source = prt_src%name)\n+       ! The issue was, that prt_src was empty after sourced-allocate.\n+       if (prt_src%name(1) /= \"foo\") call abort()\n+       if (prt_src%name(2) /= \"bar\") call abort()\n+       if (prt%name(1) /= \"foo\") call abort()\n+       if (prt%name(2) /= \"bar\") call abort()\n+    end if\n+  end subroutine copy\n+\n+end program test_pr79344\n+"}]}