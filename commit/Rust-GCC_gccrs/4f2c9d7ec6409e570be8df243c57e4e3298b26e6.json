{"sha": "4f2c9d7ec6409e570be8df243c57e4e3298b26e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYyYzlkN2VjNjQwOWU1NzBiZThkZjI0M2M1N2U0ZTMyOThiMjZlNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-11-08T01:42:23Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-11-08T01:42:23Z"}, "message": "re PR c++/8338 (Infinite loop on illegal code)\n\n\tPR c++/8338\n\t* pt.c (for_each_template_parm): Add htab parameter.\n\t(process_partial_specialization): Adjust call.\n\t(push_template_decl_real): Likewise.\n\t(pair_fn_data): Add visited.\n\t(for_each_template_parm_r): Avoid walking duplicates more than\n\tonce.\n\t(uses_template_parms): Adjust call to for_each_template_parm.\n\n\tPR c++/8338\n\t* g++.dg/template/crash2.C: New test.\n\nFrom-SVN: r58911", "tree": {"sha": "fa22e6801338e929ebb4695d50bd7f7c25b302c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa22e6801338e929ebb4695d50bd7f7c25b302c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f2c9d7ec6409e570be8df243c57e4e3298b26e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f2c9d7ec6409e570be8df243c57e4e3298b26e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f2c9d7ec6409e570be8df243c57e4e3298b26e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f2c9d7ec6409e570be8df243c57e4e3298b26e6/comments", "author": null, "committer": null, "parents": [{"sha": "07cf4226a74edbf9f7872f0c001fc82791c80ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07cf4226a74edbf9f7872f0c001fc82791c80ba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07cf4226a74edbf9f7872f0c001fc82791c80ba0"}], "stats": {"total": 117, "additions": 97, "deletions": 20}, "files": [{"sha": "08f6b25036a6815e023a02e0ac769ed58e9dc7b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f2c9d7ec6409e570be8df243c57e4e3298b26e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f2c9d7ec6409e570be8df243c57e4e3298b26e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4f2c9d7ec6409e570be8df243c57e4e3298b26e6", "patch": "@@ -1,3 +1,14 @@\n+2002-11-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/8338\n+\t* pt.c (for_each_template_parm): Add htab parameter.\n+\t(process_partial_specialization): Adjust call.\n+\t(push_template_decl_real): Likewise.\n+\t(pair_fn_data): Add visited.\n+\t(for_each_template_parm_r): Avoid walking duplicates more than\n+\tonce.\n+\t(uses_template_parms): Adjust call to for_each_template_parm.\n+\n 2002-11-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (add_implicitly_declared_members): Put implicitly"}, {"sha": "62eef7ac982a5c0aab6465b2b26321a51f12916f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f2c9d7ec6409e570be8df243c57e4e3298b26e6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f2c9d7ec6409e570be8df243c57e4e3298b26e6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4f2c9d7ec6409e570be8df243c57e4e3298b26e6", "patch": "@@ -115,7 +115,7 @@ static tree convert_nontype_argument PARAMS ((tree, tree));\n static tree convert_template_argument PARAMS ((tree, tree, tree,\n \t\t\t\t\t       tsubst_flags_t, int, tree));\n static tree get_bindings_overload PARAMS ((tree, tree, tree));\n-static int for_each_template_parm PARAMS ((tree, tree_fn_t, void*));\n+static int for_each_template_parm PARAMS ((tree, tree_fn_t, void*, htab_t));\n static tree build_template_parm_index PARAMS ((int, int, int, tree, tree));\n static int inline_needs_template_parms PARAMS ((tree));\n static void push_inline_template_parms_recursive PARAMS ((tree, int));\n@@ -2237,7 +2237,8 @@ process_partial_specialization (decl)\n       tpd.current_arg = i;\n       for_each_template_parm (TREE_VEC_ELT (inner_args, i),\n \t\t\t      &mark_template_parm,\n-\t\t\t      &tpd);\n+\t\t\t      &tpd,\n+\t\t\t      NULL);\n     }\n   for (i = 0; i < ntparms; ++i)\n     if (tpd.parms[i] == 0)\n@@ -2318,7 +2319,8 @@ process_partial_specialization (decl)\n \t      memset ((PTR) tpd2.parms, 0, sizeof (int) * nargs);\n \t      for_each_template_parm (type,\n \t\t\t\t      &mark_template_parm,\n-\t\t\t\t      &tpd2);\n+\t\t\t\t      &tpd2,\n+\t\t\t\t      NULL);\n \t\t  \n \t      if (tpd2.arg_uses_template_parms [i])\n \t\t{\n@@ -2751,7 +2753,8 @@ push_template_decl_real (decl, is_friend)\n \t  \n \t  if (for_each_template_parm (TREE_TYPE (TREE_TYPE (tmpl)),\n \t\t\t\t      template_parm_this_level_p,\n-\t\t\t\t      &depth))\n+\t\t\t\t      &depth,\n+\t\t\t\t      NULL))\n \t    DECL_TEMPLATE_CONV_FN_P (tmpl) = 1;\n \t}\n     }\n@@ -4337,6 +4340,7 @@ struct pair_fn_data\n {\n   tree_fn_t fn;\n   void *data;\n+  htab_t visited;\n };\n \n /* Called from for_each_template_parm via walk_tree.  */\n@@ -4351,9 +4355,20 @@ for_each_template_parm_r (tp, walk_subtrees, d)\n   struct pair_fn_data *pfd = (struct pair_fn_data *) d;\n   tree_fn_t fn = pfd->fn;\n   void *data = pfd->data;\n-  \n+  void **slot;\n+\n+  /* If we have already visited this tree, there's no need to walk\n+     subtrees.  Otherwise, add it to the visited table.  */\n+  slot = htab_find_slot (pfd->visited, *tp, INSERT);\n+  if (*slot)\n+    {\n+      *walk_subtrees = 0;\n+      return NULL_TREE;\n+    }\n+  *slot = *tp;\n+\n   if (TYPE_P (t)\n-      && for_each_template_parm (TYPE_CONTEXT (t), fn, data))\n+      && for_each_template_parm (TYPE_CONTEXT (t), fn, data, pfd->visited))\n     return error_mark_node;\n \n   switch (TREE_CODE (t))\n@@ -4368,20 +4383,21 @@ for_each_template_parm_r (tp, walk_subtrees, d)\n       if (!TYPE_TEMPLATE_INFO (t))\n \t*walk_subtrees = 0;\n       else if (for_each_template_parm (TREE_VALUE (TYPE_TEMPLATE_INFO (t)),\n-\t\t\t\t       fn, data))\n+\t\t\t\t       fn, data, pfd->visited))\n \treturn error_mark_node;\n       break;\n \n     case METHOD_TYPE:\n       /* Since we're not going to walk subtrees, we have to do this\n \t explicitly here.  */\n-      if (for_each_template_parm (TYPE_METHOD_BASETYPE (t), fn, data))\n+      if (for_each_template_parm (TYPE_METHOD_BASETYPE (t), fn, data,\n+\t\t\t\t  pfd->visited))\n \treturn error_mark_node;\n       /* Fall through.  */\n \n     case FUNCTION_TYPE:\n       /* Check the return type.  */\n-      if (for_each_template_parm (TREE_TYPE (t), fn, data))\n+      if (for_each_template_parm (TREE_TYPE (t), fn, data, pfd->visited))\n \treturn error_mark_node;\n \n       /* Check the parameter types.  Since default arguments are not\n@@ -4394,7 +4410,8 @@ for_each_template_parm_r (tp, walk_subtrees, d)\n \ttree parm;\n \n \tfor (parm = TYPE_ARG_TYPES (t); parm; parm = TREE_CHAIN (parm))\n-\t  if (for_each_template_parm (TREE_VALUE (parm), fn, data))\n+\t  if (for_each_template_parm (TREE_VALUE (parm), fn, data,\n+\t\t\t\t      pfd->visited))\n \t    return error_mark_node;\n \n \t/* Since we've already handled the TYPE_ARG_TYPES, we don't\n@@ -4406,20 +4423,22 @@ for_each_template_parm_r (tp, walk_subtrees, d)\n     case FUNCTION_DECL:\n     case VAR_DECL:\n       if (DECL_LANG_SPECIFIC (t) && DECL_TEMPLATE_INFO (t)\n-\t  && for_each_template_parm (DECL_TI_ARGS (t), fn, data))\n+\t  && for_each_template_parm (DECL_TI_ARGS (t), fn, data,\n+\t\t\t\t     pfd->visited))\n \treturn error_mark_node;\n       /* Fall through.  */\n \n     case CONST_DECL:\n     case PARM_DECL:\n       if (DECL_CONTEXT (t) \n-\t  && for_each_template_parm (DECL_CONTEXT (t), fn, data))\n+\t  && for_each_template_parm (DECL_CONTEXT (t), fn, data,\n+\t\t\t\t     pfd->visited))\n \treturn error_mark_node;\n       break;\n \n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n       /* Record template parameters such as `T' inside `TT<T>'.  */\n-      if (for_each_template_parm (TYPE_TI_ARGS (t), fn, data))\n+      if (for_each_template_parm (TYPE_TI_ARGS (t), fn, data, pfd->visited))\n \treturn error_mark_node;\n       /* Fall through.  */\n \n@@ -4435,22 +4454,25 @@ for_each_template_parm_r (tp, walk_subtrees, d)\n     case TEMPLATE_DECL:\n       /* A template template parameter is encountered */\n       if (DECL_TEMPLATE_TEMPLATE_PARM_P (t)\n-\t  && for_each_template_parm (TREE_TYPE (t), fn, data))\n+\t  && for_each_template_parm (TREE_TYPE (t), fn, data, pfd->visited))\n \treturn error_mark_node;\n \n       /* Already substituted template template parameter */\n       *walk_subtrees = 0;\n       break;\n \n     case TYPENAME_TYPE:\n-      if (!fn || for_each_template_parm (TYPENAME_TYPE_FULLNAME (t), fn, data))\n+      if (!fn \n+\t  || for_each_template_parm (TYPENAME_TYPE_FULLNAME (t), fn,\n+\t\t\t\t     data, pfd->visited))\n \treturn error_mark_node;\n       break;\n \n     case CONSTRUCTOR:\n       if (TREE_TYPE (t) && TYPE_PTRMEMFUNC_P (TREE_TYPE (t))\n \t  && for_each_template_parm (TYPE_PTRMEMFUNC_FN_TYPE\n-\t\t\t\t     (TREE_TYPE (t)), fn, data))\n+\t\t\t\t     (TREE_TYPE (t)), fn, data,\n+\t\t\t\t     pfd->visited))\n \treturn error_mark_node;\n       break;\n       \n@@ -4482,7 +4504,8 @@ for_each_template_parm_r (tp, walk_subtrees, d)\n \t the BINFO hierarchy, which is circular, and therefore\n \t confuses walk_tree.  */\n       *walk_subtrees = 0;\n-      if (for_each_template_parm (BASELINK_FUNCTIONS (*tp), fn, data))\n+      if (for_each_template_parm (BASELINK_FUNCTIONS (*tp), fn, data,\n+\t\t\t\t  pfd->visited))\n \treturn error_mark_node;\n       break;\n \n@@ -4504,10 +4527,11 @@ for_each_template_parm_r (tp, walk_subtrees, d)\n    considered to be the function which always returns 1.  */\n \n static int\n-for_each_template_parm (t, fn, data)\n+for_each_template_parm (t, fn, data, visited)\n      tree t;\n      tree_fn_t fn;\n      void* data;\n+     htab_t visited;\n {\n   struct pair_fn_data pfd;\n \n@@ -4518,7 +4542,13 @@ for_each_template_parm (t, fn, data)\n   /* Walk the tree.  (Conceptually, we would like to walk without\n      duplicates, but for_each_template_parm_r recursively calls\n      for_each_template_parm, so we would need to reorganize a fair\n-     bit to use walk_tree_without_duplicates.)  */\n+     bit to use walk_tree_without_duplicates, so we keep our own\n+     visited list.)  */\n+  if (visited)\n+    pfd.visited = visited;\n+  else\n+    pfd.visited = htab_create (37, htab_hash_pointer, htab_eq_pointer, \n+\t\t\t       NULL);\n   return walk_tree (&t, \n \t\t    for_each_template_parm_r, \n \t\t    &pfd,\n@@ -4529,7 +4559,7 @@ int\n uses_template_parms (t)\n      tree t;\n {\n-  return for_each_template_parm (t, 0, 0);\n+  return for_each_template_parm (t, 0, 0, NULL);\n }\n \n static int tinst_depth;"}, {"sha": "c8174521ea6417015df6cdbbc802b14be5ee245e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f2c9d7ec6409e570be8df243c57e4e3298b26e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f2c9d7ec6409e570be8df243c57e4e3298b26e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f2c9d7ec6409e570be8df243c57e4e3298b26e6", "patch": "@@ -1,3 +1,8 @@\n+2002-11-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/8338\n+\t* g++.dg/template/crash2.C: New test.\n+\n 2002-11-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* testsuite/g++.dg/abi/dtor1.C: New test."}, {"sha": "e6cc965ff031029068ea65fc2990f8201e3cc7e5", "filename": "gcc/testsuite/g++.dg/template/crash2.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f2c9d7ec6409e570be8df243c57e4e3298b26e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f2c9d7ec6409e570be8df243c57e4e3298b26e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash2.C?ref=4f2c9d7ec6409e570be8df243c57e4e3298b26e6", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"\" }\n+\n+template <class EnumType>\n+class A\n+{\n+public:\n+  static const EnumType size = max; // { dg-error \"\" }\n+  int table[size];\n+};\n+template <class EnumType>\n+const EnumType A<EnumType>::size;\n+ \n+ \n+namespace N\n+{\n+enum E { max = 5 };\n+ \n+struct B\n+{\n+  A<E> a; // { dg-error \"\" }\n+};\n+ \n+}\n+ \n+int\n+main()\n+{\n+  N::B b;\n+ \n+  return 0;\n+}"}]}