{"sha": "b175b679a4ec31502b1eb6752265f7be09ba9c08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3NWI2NzlhNGVjMzE1MDJiMWViNjc1MjI2NWY3YmUwOWJhOWMwOA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2015-06-26T13:58:29Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-06-26T13:58:29Z"}, "message": "[Patch AArch64 3/4] De-const-ify struct tune_params\n\ngcc/\n\n\t* config/aarch64/aarch64-protos.h (tune_params): Remove\n\tconst from members.\n\t(aarch64_tune_params): Remove const, change to no longer be\n\ta pointer.\n\t* config/aarch64/aarch64.c (aarch64_tune_params): Remove const,\n\tchange to no longer be a pointer, initialize to generic_tunings.\n\t(aarch64_min_divisions_for_recip_mul): Change dereference of\n\taarch64_tune_params to member access.\n\t(aarch64_reassociation_width): Likewise.\n\t(aarch64_rtx_mult_cost): Likewise.\n\t(aarch64_address_cost): Likewise.\n\t(aarch64_branch_cost): Likewise.\n\t(aarch64_rtx_costs): Likewise.\n\t(aarch64_register_move_cost): Likewise.\n\t(aarch64_memory_move_cost): Likewise.\n\t(aarch64_sched_issue_rate): Likewise.\n\t(aarch64_builtin_vectorization_cost): Likewise.\n\t(aarch64_override_options): Take a copy of the selected tuning\n\tstruct in to aarch64_tune_params, rather than just setting\n\ta pointer, change dereferences of aarch64_tune_params to member\n\taccesses.\n\t(aarch64_override_options_after_change): Change dereferences of\n\taarch64_tune_params to member access.\n\t(aarch64_macro_fusion_p): Likewise.\n\t(aarch_macro_fusion_pair_p): Likewise.\n\t* config/aarch64/cortex-a57-fma-steering.c (gate): Likewise.\n\nFrom-SVN: r225016", "tree": {"sha": "3d34fc8b7550d7c36a8b49f906cf53db14d57be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d34fc8b7550d7c36a8b49f906cf53db14d57be9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b175b679a4ec31502b1eb6752265f7be09ba9c08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b175b679a4ec31502b1eb6752265f7be09ba9c08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b175b679a4ec31502b1eb6752265f7be09ba9c08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b175b679a4ec31502b1eb6752265f7be09ba9c08/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfba575ff34be2ecb40b89b39ab93902a863fa3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfba575ff34be2ecb40b89b39ab93902a863fa3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfba575ff34be2ecb40b89b39ab93902a863fa3b"}], "stats": {"total": 145, "additions": 88, "deletions": 57}, "files": [{"sha": "e1827899a46e42cd2d351f21bbec82d2b848ce98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b175b679a4ec31502b1eb6752265f7be09ba9c08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b175b679a4ec31502b1eb6752265f7be09ba9c08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b175b679a4ec31502b1eb6752265f7be09ba9c08", "patch": "@@ -1,3 +1,32 @@\n+2015-06-26  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (tune_params): Remove\n+\tconst from members.\n+\t(aarch64_tune_params): Remove const, change to no longer be\n+\ta pointer.\n+\t* config/aarch64/aarch64.c (aarch64_tune_params): Remove const,\n+\tchange to no longer be a pointer, initialize to generic_tunings.\n+\t(aarch64_min_divisions_for_recip_mul): Change dereference of\n+\taarch64_tune_params to member access.\n+\t(aarch64_reassociation_width): Likewise.\n+\t(aarch64_rtx_mult_cost): Likewise.\n+\t(aarch64_address_cost): Likewise.\n+\t(aarch64_branch_cost): Likewise.\n+\t(aarch64_rtx_costs): Likewise.\n+\t(aarch64_register_move_cost): Likewise.\n+\t(aarch64_memory_move_cost): Likewise.\n+\t(aarch64_sched_issue_rate): Likewise.\n+\t(aarch64_builtin_vectorization_cost): Likewise.\n+\t(aarch64_override_options): Take a copy of the selected tuning\n+\tstruct in to aarch64_tune_params, rather than just setting\n+\ta pointer, change dereferences of aarch64_tune_params to member\n+\taccesses.\n+\t(aarch64_override_options_after_change): Change dereferences of\n+\taarch64_tune_params to member access.\n+\t(aarch64_macro_fusion_p): Likewise.\n+\t(aarch_macro_fusion_pair_p): Likewise.\n+\t* config/aarch64/cortex-a57-fma-steering.c (gate): Likewise.\n+\n 2015-06-26  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64.h (AARCH64_FL_USE_FMA_STEERING_PASS): Delete."}, {"sha": "4522f9c4b2fb711abfc10e480bf3bd4dd2d449ad", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b175b679a4ec31502b1eb6752265f7be09ba9c08/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b175b679a4ec31502b1eb6752265f7be09ba9c08/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=b175b679a4ec31502b1eb6752265f7be09ba9c08", "patch": "@@ -172,23 +172,23 @@ struct cpu_branch_cost\n \n struct tune_params\n {\n-  const struct cpu_cost_table *const insn_extra_cost;\n-  const struct cpu_addrcost_table *const addr_cost;\n-  const struct cpu_regmove_cost *const regmove_cost;\n-  const struct cpu_vector_cost *const vec_costs;\n-  const struct cpu_branch_cost *const branch_costs;\n-  const int memmov_cost;\n-  const int issue_rate;\n-  const unsigned int fusible_ops;\n-  const int function_align;\n-  const int jump_align;\n-  const int loop_align;\n-  const int int_reassoc_width;\n-  const int fp_reassoc_width;\n-  const int vec_reassoc_width;\n-  const int min_div_recip_mul_sf;\n-  const int min_div_recip_mul_df;\n-  const unsigned int extra_tuning_flags;\n+  const struct cpu_cost_table *insn_extra_cost;\n+  const struct cpu_addrcost_table *addr_cost;\n+  const struct cpu_regmove_cost *regmove_cost;\n+  const struct cpu_vector_cost *vec_costs;\n+  const struct cpu_branch_cost *branch_costs;\n+  int memmov_cost;\n+  int issue_rate;\n+  unsigned int fusible_ops;\n+  int function_align;\n+  int jump_align;\n+  int loop_align;\n+  int int_reassoc_width;\n+  int fp_reassoc_width;\n+  int vec_reassoc_width;\n+  int min_div_recip_mul_sf;\n+  int min_div_recip_mul_df;\n+  unsigned int extra_tuning_flags;\n };\n \n #define AARCH64_FUSION_PAIR(x, name, index) \\\n@@ -229,7 +229,7 @@ enum aarch64_extra_tuning_flags\n };\n #undef AARCH64_EXTRA_TUNING_OPTION\n \n-extern const struct tune_params *aarch64_tune_params;\n+extern struct tune_params aarch64_tune_params;\n \n HOST_WIDE_INT aarch64_initial_elimination_offset (unsigned, unsigned);\n int aarch64_get_condition_code (rtx);"}, {"sha": "8533e1d2f7ff9d9a98871706db2a3bf9bfc23f54", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 40, "deletions": 38, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b175b679a4ec31502b1eb6752265f7be09ba9c08/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b175b679a4ec31502b1eb6752265f7be09ba9c08/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b175b679a4ec31502b1eb6752265f7be09ba9c08", "patch": "@@ -166,9 +166,6 @@ unsigned aarch64_architecture_version;\n /* The processor for which instructions should be scheduled.  */\n enum aarch64_processor aarch64_tune = cortexa53;\n \n-/* The current tuning set.  */\n-const struct tune_params *aarch64_tune_params;\n-\n /* Mask to specify which instructions we are allowed to generate.  */\n unsigned long aarch64_isa_flags = 0;\n \n@@ -495,6 +492,9 @@ static const struct processor *selected_arch;\n static const struct processor *selected_cpu;\n static const struct processor *selected_tune;\n \n+/* The current tuning set.  */\n+struct tune_params aarch64_tune_params = generic_tunings;\n+\n #define AARCH64_CPU_DEFAULT_FLAGS ((selected_cpu) ? selected_cpu->flags : 0)\n \n /* An ISA extension in the co-processor and main instruction set space.  */\n@@ -556,20 +556,20 @@ static unsigned int\n aarch64_min_divisions_for_recip_mul (enum machine_mode mode)\n {\n   if (GET_MODE_UNIT_SIZE (mode) == 4)\n-    return aarch64_tune_params->min_div_recip_mul_sf;\n-  return aarch64_tune_params->min_div_recip_mul_df;\n+    return aarch64_tune_params.min_div_recip_mul_sf;\n+  return aarch64_tune_params.min_div_recip_mul_df;\n }\n \n static int\n aarch64_reassociation_width (unsigned opc ATTRIBUTE_UNUSED,\n \t\t\t     enum machine_mode mode)\n {\n   if (VECTOR_MODE_P (mode))\n-    return aarch64_tune_params->vec_reassoc_width;\n+    return aarch64_tune_params.vec_reassoc_width;\n   if (INTEGRAL_MODE_P (mode))\n-    return aarch64_tune_params->int_reassoc_width;\n+    return aarch64_tune_params.int_reassoc_width;\n   if (FLOAT_MODE_P (mode))\n-    return aarch64_tune_params->fp_reassoc_width;\n+    return aarch64_tune_params.fp_reassoc_width;\n   return 1;\n }\n \n@@ -5230,7 +5230,7 @@ aarch64_rtx_mult_cost (rtx x, int code, int outer, bool speed)\n {\n   rtx op0, op1;\n   const struct cpu_cost_table *extra_cost\n-    = aarch64_tune_params->insn_extra_cost;\n+    = aarch64_tune_params.insn_extra_cost;\n   int cost = 0;\n   bool compound_p = (outer == PLUS || outer == MINUS);\n   machine_mode mode = GET_MODE (x);\n@@ -5362,7 +5362,7 @@ aarch64_address_cost (rtx x,\n \t\t      bool speed)\n {\n   enum rtx_code c = GET_CODE (x);\n-  const struct cpu_addrcost_table *addr_cost = aarch64_tune_params->addr_cost;\n+  const struct cpu_addrcost_table *addr_cost = aarch64_tune_params.addr_cost;\n   struct aarch64_address_info info;\n   int cost = 0;\n   info.shift = 0;\n@@ -5459,7 +5459,7 @@ aarch64_branch_cost (bool speed_p, bool predictable_p)\n {\n   /* When optimizing for speed, use the cost of unpredictable branches.  */\n   const struct cpu_branch_cost *branch_costs =\n-    aarch64_tune_params->branch_costs;\n+    aarch64_tune_params.branch_costs;\n \n   if (!speed_p || predictable_p)\n     return branch_costs->predictable;\n@@ -5642,7 +5642,7 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n {\n   rtx op0, op1, op2;\n   const struct cpu_cost_table *extra_cost\n-    = aarch64_tune_params->insn_extra_cost;\n+    = aarch64_tune_params.insn_extra_cost;\n   machine_mode mode = GET_MODE (x);\n \n   /* By default, assume that everything has equivalent cost to the\n@@ -6802,7 +6802,7 @@ aarch64_register_move_cost (machine_mode mode,\n   enum reg_class from = (enum reg_class) from_i;\n   enum reg_class to = (enum reg_class) to_i;\n   const struct cpu_regmove_cost *regmove_cost\n-    = aarch64_tune_params->regmove_cost;\n+    = aarch64_tune_params.regmove_cost;\n \n   /* Caller save and pointer regs are equivalent to GENERAL_REGS.  */\n   if (to == CALLER_SAVE_REGS || to == POINTER_REGS)\n@@ -6857,14 +6857,14 @@ aarch64_memory_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t  reg_class_t rclass ATTRIBUTE_UNUSED,\n \t\t\t  bool in ATTRIBUTE_UNUSED)\n {\n-  return aarch64_tune_params->memmov_cost;\n+  return aarch64_tune_params.memmov_cost;\n }\n \n /* Return the number of instructions that can be issued per cycle.  */\n static int\n aarch64_sched_issue_rate (void)\n {\n-  return aarch64_tune_params->issue_rate;\n+  return aarch64_tune_params.issue_rate;\n }\n \n static int\n@@ -6888,44 +6888,44 @@ aarch64_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n   switch (type_of_cost)\n     {\n       case scalar_stmt:\n-\treturn aarch64_tune_params->vec_costs->scalar_stmt_cost;\n+\treturn aarch64_tune_params.vec_costs->scalar_stmt_cost;\n \n       case scalar_load:\n-\treturn aarch64_tune_params->vec_costs->scalar_load_cost;\n+\treturn aarch64_tune_params.vec_costs->scalar_load_cost;\n \n       case scalar_store:\n-\treturn aarch64_tune_params->vec_costs->scalar_store_cost;\n+\treturn aarch64_tune_params.vec_costs->scalar_store_cost;\n \n       case vector_stmt:\n-\treturn aarch64_tune_params->vec_costs->vec_stmt_cost;\n+\treturn aarch64_tune_params.vec_costs->vec_stmt_cost;\n \n       case vector_load:\n-\treturn aarch64_tune_params->vec_costs->vec_align_load_cost;\n+\treturn aarch64_tune_params.vec_costs->vec_align_load_cost;\n \n       case vector_store:\n-\treturn aarch64_tune_params->vec_costs->vec_store_cost;\n+\treturn aarch64_tune_params.vec_costs->vec_store_cost;\n \n       case vec_to_scalar:\n-\treturn aarch64_tune_params->vec_costs->vec_to_scalar_cost;\n+\treturn aarch64_tune_params.vec_costs->vec_to_scalar_cost;\n \n       case scalar_to_vec:\n-\treturn aarch64_tune_params->vec_costs->scalar_to_vec_cost;\n+\treturn aarch64_tune_params.vec_costs->scalar_to_vec_cost;\n \n       case unaligned_load:\n-\treturn aarch64_tune_params->vec_costs->vec_unalign_load_cost;\n+\treturn aarch64_tune_params.vec_costs->vec_unalign_load_cost;\n \n       case unaligned_store:\n-\treturn aarch64_tune_params->vec_costs->vec_unalign_store_cost;\n+\treturn aarch64_tune_params.vec_costs->vec_unalign_store_cost;\n \n       case cond_branch_taken:\n-\treturn aarch64_tune_params->vec_costs->cond_taken_branch_cost;\n+\treturn aarch64_tune_params.vec_costs->cond_taken_branch_cost;\n \n       case cond_branch_not_taken:\n-\treturn aarch64_tune_params->vec_costs->cond_not_taken_branch_cost;\n+\treturn aarch64_tune_params.vec_costs->cond_not_taken_branch_cost;\n \n       case vec_perm:\n       case vec_promote_demote:\n-\treturn aarch64_tune_params->vec_costs->vec_stmt_cost;\n+\treturn aarch64_tune_params.vec_costs->vec_stmt_cost;\n \n       case vec_construct:\n         elements = TYPE_VECTOR_SUBPARTS (vectype);\n@@ -7227,7 +7227,9 @@ aarch64_override_options (void)\n \n   aarch64_tune_flags = selected_tune->flags;\n   aarch64_tune = selected_tune->core;\n-  aarch64_tune_params = selected_tune->tune;\n+  /* Make a copy of the tuning parameters attached to the core, which\n+     we may later overwrite.  */\n+  aarch64_tune_params = *(selected_tune->tune);\n   aarch64_architecture_version = selected_cpu->architecture_version;\n \n   if (aarch64_fix_a53_err835769 == 2)\n@@ -7259,11 +7261,11 @@ aarch64_override_options_after_change (void)\n   if (!optimize_size)\n     {\n       if (align_loops <= 0)\n-\talign_loops = aarch64_tune_params->loop_align;\n+\talign_loops = aarch64_tune_params.loop_align;\n       if (align_jumps <= 0)\n-\talign_jumps = aarch64_tune_params->jump_align;\n+\talign_jumps = aarch64_tune_params.jump_align;\n       if (align_functions <= 0)\n-\talign_functions = aarch64_tune_params->function_align;\n+\talign_functions = aarch64_tune_params.function_align;\n     }\n }\n \n@@ -10958,7 +10960,7 @@ aarch64_gen_ccmp_next (rtx *prep_seq, rtx *gen_seq, rtx prev, int cmp_code,\n static bool\n aarch64_macro_fusion_p (void)\n {\n-  return aarch64_tune_params->fusible_ops != AARCH64_FUSE_NOTHING;\n+  return aarch64_tune_params.fusible_ops != AARCH64_FUSE_NOTHING;\n }\n \n \n@@ -10978,7 +10980,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n     return false;\n \n   if (simple_sets_p\n-      && (aarch64_tune_params->fusible_ops & AARCH64_FUSE_MOV_MOVK))\n+      && (aarch64_tune_params.fusible_ops & AARCH64_FUSE_MOV_MOVK))\n     {\n       /* We are trying to match:\n          prev (mov)  == (set (reg r0) (const_int imm16))\n@@ -11003,7 +11005,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n     }\n \n   if (simple_sets_p\n-      && (aarch64_tune_params->fusible_ops & AARCH64_FUSE_ADRP_ADD))\n+      && (aarch64_tune_params.fusible_ops & AARCH64_FUSE_ADRP_ADD))\n     {\n \n       /*  We're trying to match:\n@@ -11029,7 +11031,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n     }\n \n   if (simple_sets_p\n-      && (aarch64_tune_params->fusible_ops & AARCH64_FUSE_MOVK_MOVK))\n+      && (aarch64_tune_params.fusible_ops & AARCH64_FUSE_MOVK_MOVK))\n     {\n \n       /* We're trying to match:\n@@ -11058,7 +11060,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n \n     }\n   if (simple_sets_p\n-      && (aarch64_tune_params->fusible_ops & AARCH64_FUSE_ADRP_LDR))\n+      && (aarch64_tune_params.fusible_ops & AARCH64_FUSE_ADRP_LDR))\n     {\n       /* We're trying to match:\n           prev (adrp) == (set (reg r0)\n@@ -11089,7 +11091,7 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n         }\n     }\n \n-  if ((aarch64_tune_params->fusible_ops & AARCH64_FUSE_CMP_BRANCH)\n+  if ((aarch64_tune_params.fusible_ops & AARCH64_FUSE_CMP_BRANCH)\n       && any_condjump_p (curr))\n     {\n       enum attr_type prev_type = get_attr_type (prev);"}, {"sha": "a0b29699ce694b670d9f5ee3227686433e668777", "filename": "gcc/config/aarch64/cortex-a57-fma-steering.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b175b679a4ec31502b1eb6752265f7be09ba9c08/gcc%2Fconfig%2Faarch64%2Fcortex-a57-fma-steering.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b175b679a4ec31502b1eb6752265f7be09ba9c08/gcc%2Fconfig%2Faarch64%2Fcortex-a57-fma-steering.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fcortex-a57-fma-steering.c?ref=b175b679a4ec31502b1eb6752265f7be09ba9c08", "patch": "@@ -1052,7 +1052,7 @@ class pass_fma_steering : public rtl_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      return (aarch64_tune_params->extra_tuning_flags\n+      return (aarch64_tune_params.extra_tuning_flags\n \t      & AARCH64_EXTRA_TUNE_RENAME_FMA_REGS)\n \t      && optimize >= 2;\n     }"}]}