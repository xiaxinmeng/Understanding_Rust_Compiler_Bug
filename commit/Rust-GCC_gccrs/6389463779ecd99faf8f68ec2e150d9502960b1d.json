{"sha": "6389463779ecd99faf8f68ec2e150d9502960b1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4OTQ2Mzc3OWVjZDk5ZmFmOGY2OGVjMmUxNTBkOTUwMjk2MGIxZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-11-15T15:37:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-11-15T15:37:57Z"}, "message": "re PR tree-optimization/38051 (Miscompilation of glibc's memcmp)\n\n2008-11-15  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/38051\n\t* tree-ssa-alias.c (update_alias_info_1): Manually find\n\twritten variables.\n\n\t* gcc.c-torture/execute/pr38051.c: New testcase.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r141887", "tree": {"sha": "7662ff5594a836763616e0117a399806b2707628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7662ff5594a836763616e0117a399806b2707628"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6389463779ecd99faf8f68ec2e150d9502960b1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6389463779ecd99faf8f68ec2e150d9502960b1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6389463779ecd99faf8f68ec2e150d9502960b1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6389463779ecd99faf8f68ec2e150d9502960b1d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee9a72e50cf00a988023f8eb2b08d25da87a7643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9a72e50cf00a988023f8eb2b08d25da87a7643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee9a72e50cf00a988023f8eb2b08d25da87a7643"}], "stats": {"total": 252, "additions": 237, "deletions": 15}, "files": [{"sha": "2e34022cf3800ab61f8b6c43a60b708f75751e5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6389463779ecd99faf8f68ec2e150d9502960b1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6389463779ecd99faf8f68ec2e150d9502960b1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6389463779ecd99faf8f68ec2e150d9502960b1d", "patch": "@@ -1,3 +1,9 @@\n+2008-11-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38051\n+\t* tree-ssa-alias.c (update_alias_info_1): Manually find\n+\twritten variables.\n+\n 2008-11-15  Joshua Kinard  <kumba@gentoo.org>\n \n \t* doc/invoke.texi (-mfix-r10000): Document."}, {"sha": "dac465123b185114a2aa87aa8d84d650cc2d5d90", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6389463779ecd99faf8f68ec2e150d9502960b1d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6389463779ecd99faf8f68ec2e150d9502960b1d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6389463779ecd99faf8f68ec2e150d9502960b1d", "patch": "@@ -1,3 +1,9 @@\n+2008-11-15  Richard Guenther  <rguenther@suse.de>\n+\tJakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/38051\n+\t* gcc.c-torture/execute/pr38051.c: New testcase.\n+\n 2008-11-15  Joshua Kinard  <kumba@gentoo.org>\n \t    Richard Sandiford  <rdsandiford@goolemail.com>\n "}, {"sha": "3437f730667769df9509618d57607f20a6fa61a8", "filename": "gcc/testsuite/gcc.c-torture/execute/pr38051.c", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6389463779ecd99faf8f68ec2e150d9502960b1d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr38051.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6389463779ecd99faf8f68ec2e150d9502960b1d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr38051.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr38051.c?ref=6389463779ecd99faf8f68ec2e150d9502960b1d", "patch": "@@ -0,0 +1,205 @@\n+typedef __SIZE_TYPE__ size_t;\n+static int mymemcmp1 (unsigned long int, unsigned long int)\n+  __attribute__ ((__nothrow__));\n+\n+__inline static int\n+mymemcmp1 (unsigned long int a, unsigned long int b)\n+{\n+  long int srcp1 = (long int) &a;\n+  long int srcp2 = (long int) &b;\n+  unsigned long int a0, b0;\n+  do\n+    {\n+      a0 = ((unsigned char *) srcp1)[0];\n+      b0 = ((unsigned char *) srcp2)[0];\n+      srcp1 += 1;\n+      srcp2 += 1;\n+    }\n+  while (a0 == b0);\n+  return a0 - b0;\n+}\n+\n+static int mymemcmp2 (long, long, size_t) __attribute__ ((__nothrow__));\n+\n+static int\n+mymemcmp2 (long int srcp1, long int srcp2, size_t len)\n+{\n+  unsigned long int a0, a1;\n+  unsigned long int b0, b1;\n+  switch (len % 4)\n+    {\n+    default:\n+    case 2:\n+      a0 = ((unsigned long int *) srcp1)[0];\n+      b0 = ((unsigned long int *) srcp2)[0];\n+      srcp1 -= 2 * (sizeof (unsigned long int));\n+      srcp2 -= 2 * (sizeof (unsigned long int));\n+      len += 2;\n+      goto do1;\n+    case 3:\n+      a1 = ((unsigned long int *) srcp1)[0];\n+      b1 = ((unsigned long int *) srcp2)[0];\n+      srcp1 -= (sizeof (unsigned long int));\n+      srcp2 -= (sizeof (unsigned long int));\n+      len += 1;\n+      goto do2;\n+    case 0:\n+      if (16 <= 3 * (sizeof (unsigned long int)) && len == 0)\n+        return 0;\n+      a0 = ((unsigned long int *) srcp1)[0];\n+      b0 = ((unsigned long int *) srcp2)[0];\n+      goto do3;\n+    case 1:\n+      a1 = ((unsigned long int *) srcp1)[0];\n+      b1 = ((unsigned long int *) srcp2)[0];\n+      srcp1 += (sizeof (unsigned long int));\n+      srcp2 += (sizeof (unsigned long int));\n+      len -= 1;\n+      if (16 <= 3 * (sizeof (unsigned long int)) && len == 0)\n+        goto do0;\n+    }\n+  do\n+    {\n+      a0 = ((unsigned long int *) srcp1)[0];\n+      b0 = ((unsigned long int *) srcp2)[0];\n+      if (a1 != b1)\n+        return mymemcmp1 ((a1), (b1));\n+    do3:\n+      a1 = ((unsigned long int *) srcp1)[1];\n+      b1 = ((unsigned long int *) srcp2)[1];\n+      if (a0 != b0)\n+        return mymemcmp1 ((a0), (b0));\n+    do2:\n+      a0 = ((unsigned long int *) srcp1)[2];\n+      b0 = ((unsigned long int *) srcp2)[2];\n+      if (a1 != b1)\n+        return mymemcmp1 ((a1), (b1));\n+    do1:\n+      a1 = ((unsigned long int *) srcp1)[3];\n+      b1 = ((unsigned long int *) srcp2)[3];\n+      if (a0 != b0)\n+        return mymemcmp1 ((a0), (b0));\n+      srcp1 += 4 * (sizeof (unsigned long int));\n+      srcp2 += 4 * (sizeof (unsigned long int));\n+      len -= 4;\n+    }\n+  while (len != 0);\n+do0:\n+  if (a1 != b1)\n+    return mymemcmp1 ((a1), (b1));\n+  return 0;\n+}\n+\n+static int mymemcmp3 (long, long, size_t) __attribute__ ((__nothrow__));\n+\n+static int\n+mymemcmp3 (long int srcp1, long int srcp2, size_t len)\n+{\n+  unsigned long int a0, a1, a2, a3;\n+  unsigned long int b0, b1, b2, b3;\n+  unsigned long int x;\n+  int shl, shr;\n+  shl = 8 * (srcp1 % (sizeof (unsigned long int)));\n+  shr = 8 * (sizeof (unsigned long int)) - shl;\n+  srcp1 &= -(sizeof (unsigned long int));\n+  switch (len % 4)\n+    {\n+    default:\n+    case 2:\n+      a1 = ((unsigned long int *) srcp1)[0];\n+      a2 = ((unsigned long int *) srcp1)[1];\n+      b2 = ((unsigned long int *) srcp2)[0];\n+      srcp1 -= 1 * (sizeof (unsigned long int));\n+      srcp2 -= 2 * (sizeof (unsigned long int));\n+      len += 2;\n+      goto do1;\n+    case 3:\n+      a0 = ((unsigned long int *) srcp1)[0];\n+      a1 = ((unsigned long int *) srcp1)[1];\n+      b1 = ((unsigned long int *) srcp2)[0];\n+      srcp2 -= 1 * (sizeof (unsigned long int));\n+      len += 1;\n+      goto do2;\n+    case 0:\n+      if (16 <= 3 * (sizeof (unsigned long int)) && len == 0)\n+        return 0;\n+      a3 = ((unsigned long int *) srcp1)[0];\n+      a0 = ((unsigned long int *) srcp1)[1];\n+      b0 = ((unsigned long int *) srcp2)[0];\n+      srcp1 += 1 * (sizeof (unsigned long int));\n+      goto do3;\n+    case 1:\n+      a2 = ((unsigned long int *) srcp1)[0];\n+      a3 = ((unsigned long int *) srcp1)[1];\n+      b3 = ((unsigned long int *) srcp2)[0];\n+      srcp1 += 2 * (sizeof (unsigned long int));\n+      srcp2 += 1 * (sizeof (unsigned long int));\n+      len -= 1;\n+      if (16 <= 3 * (sizeof (unsigned long int)) && len == 0)\n+        goto do0;\n+    }\n+  do\n+    {\n+      a0 = ((unsigned long int *) srcp1)[0];\n+      b0 = ((unsigned long int *) srcp2)[0];\n+      x = (((a2) >> (shl)) | ((a3) << (shr)));\n+      if (x != b3)\n+        return mymemcmp1 ((x), (b3));\n+    do3:\n+      a1 = ((unsigned long int *) srcp1)[1];\n+      b1 = ((unsigned long int *) srcp2)[1];\n+      x = (((a3) >> (shl)) | ((a0) << (shr)));\n+      if (x != b0)\n+        return mymemcmp1 ((x), (b0));\n+    do2:\n+      a2 = ((unsigned long int *) srcp1)[2];\n+      b2 = ((unsigned long int *) srcp2)[2];\n+      x = (((a0) >> (shl)) | ((a1) << (shr)));\n+      if (x != b1)\n+        return mymemcmp1 ((x), (b1));\n+    do1:\n+      a3 = ((unsigned long int *) srcp1)[3];\n+      b3 = ((unsigned long int *) srcp2)[3];\n+      x = (((a1) >> (shl)) | ((a2) << (shr)));\n+      if (x != b2)\n+        return mymemcmp1 ((x), (b2));\n+      srcp1 += 4 * (sizeof (unsigned long int));\n+      srcp2 += 4 * (sizeof (unsigned long int));\n+      len -= 4;\n+    }\n+  while (len != 0);\n+do0:\n+  x = (((a2) >> (shl)) | ((a3) << (shr)));\n+  if (x != b3)\n+    return mymemcmp1 ((x), (b3));\n+  return 0;\n+}\n+\n+__attribute__ ((noinline))\n+int mymemcmp (const void *s1, const void *s2, size_t len)\n+{\n+  unsigned long int a0;\n+  unsigned long int b0;\n+  long int srcp1 = (long int) s1;\n+  long int srcp2 = (long int) s2;\n+  if (srcp1 % (sizeof (unsigned long int)) == 0)\n+    return mymemcmp2 (srcp1, srcp2, len / (sizeof (unsigned long int)));\n+  else\n+    return mymemcmp3 (srcp1, srcp2, len / (sizeof (unsigned long int)));\n+}\n+\n+char buf[256] __attribute__((aligned (16)));\n+char buf2[256] __attribute__((aligned (16)));\n+\n+int\n+main (void)\n+{\n+  __builtin_memcpy (buf + 9,\n+\"\\x1\\x37\\x82\\xa7\\x55\\x49\\x9d\\xbf\\xf8\\x44\\xb6\\x55\\x17\\x8e\\xf9\", 15);\n+  __builtin_memcpy (buf2 + 24,\n+\"\\x1\\x37\\x82\\xa7\\x55\\x49\\xd0\\xf3\\xb7\\x2a\\x6d\\x23\\x71\\x49\\x6a\", 15);\n+  if (mymemcmp (buf + 9, buf2 + 24, 33) != -51)\n+    __builtin_abort ();\n+  return 0;\n+}\n+"}, {"sha": "83800ed5722d9b2b7d09fc504e1659de480a9eff", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6389463779ecd99faf8f68ec2e150d9502960b1d/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6389463779ecd99faf8f68ec2e150d9502960b1d/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=6389463779ecd99faf8f68ec2e150d9502960b1d", "patch": "@@ -2667,6 +2667,17 @@ update_alias_info_1 (gimple stmt, struct alias_info *ai)\n \n       mem_ref_stats->num_mem_stmts++;\n \n+      /* Add all decls written to to the list of written variables.  */\n+      if (gimple_has_lhs (stmt)\n+\t  && TREE_CODE (gimple_get_lhs (stmt)) != SSA_NAME)\n+\t{\n+\t  tree lhs = gimple_get_lhs (stmt);\n+\t  while (handled_component_p (lhs))\n+\t    lhs = TREE_OPERAND (lhs, 0);\n+\t  if (DECL_P (lhs))\n+\t    pointer_set_insert (ai->written_vars, lhs);\n+\t}\n+\n       /* Notice that we only update memory reference stats for symbols\n \t loaded and stored by the statement if the statement does not\n \t contain pointer dereferences and it is not a call/asm site.\n@@ -2689,25 +2700,19 @@ update_alias_info_1 (gimple stmt, struct alias_info *ai)\n \t dereferences (e.g., MEMORY_VAR = *PTR) or if a call site has\n \t memory symbols in its argument list, but these cases do not\n \t occur so frequently as to constitute a serious problem.  */\n-      if (gimple_stored_syms (stmt))\n-\tEXECUTE_IF_SET_IN_BITMAP (gimple_stored_syms (stmt), 0, i, bi)\n-\t  {\n-\t    tree sym = referenced_var (i);\n-\t    pointer_set_insert (ai->written_vars, sym);\n-\t    if (!stmt_dereferences_ptr_p\n-\t\t&& stmt_escape_type != ESCAPE_TO_CALL\n-\t\t&& stmt_escape_type != ESCAPE_TO_PURE_CONST\n-\t\t&& stmt_escape_type != ESCAPE_TO_ASM)\n-\t      update_mem_sym_stats_from_stmt (sym, stmt, 0, 1);\n-\t  }\n-\n       if (!stmt_dereferences_ptr_p\n-\t  && gimple_loaded_syms (stmt)\n \t  && stmt_escape_type != ESCAPE_TO_CALL\n \t  && stmt_escape_type != ESCAPE_TO_PURE_CONST\n \t  && stmt_escape_type != ESCAPE_TO_ASM)\n-\tEXECUTE_IF_SET_IN_BITMAP (gimple_loaded_syms (stmt), 0, i, bi)\n-\t  update_mem_sym_stats_from_stmt (referenced_var (i), stmt, 1, 0);\n+\t{\n+\t  if (gimple_stored_syms (stmt))\n+\t    EXECUTE_IF_SET_IN_BITMAP (gimple_stored_syms (stmt), 0, i, bi)\n+\t      update_mem_sym_stats_from_stmt (referenced_var (i), stmt, 0, 1);\n+\n+\t  if (gimple_loaded_syms (stmt))\n+\t    EXECUTE_IF_SET_IN_BITMAP (gimple_loaded_syms (stmt), 0, i, bi)\n+\t      update_mem_sym_stats_from_stmt (referenced_var (i), stmt, 1, 0);\n+\t}\n     }\n }\n "}]}