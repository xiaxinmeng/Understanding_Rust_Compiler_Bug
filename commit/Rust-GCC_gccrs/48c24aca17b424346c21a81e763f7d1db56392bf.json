{"sha": "48c24aca17b424346c21a81e763f7d1db56392bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhjMjRhY2ExN2I0MjQzNDZjMjFhODFlNzYzZjdkMWRiNTYzOTJiZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-09-03T23:47:11Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-09-03T23:47:11Z"}, "message": "ipa.c (build_cdtor): Take VECtor as argument; fix array walk.\n\n\n\t* ipa.c (build_cdtor): Take VECtor as argument; fix array walk.\n\t(build_cdtor_fns): Update use of build_cdtor.\n\nFrom-SVN: r163849", "tree": {"sha": "af70b6d6e035769efe96166888211110b6033dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af70b6d6e035769efe96166888211110b6033dc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48c24aca17b424346c21a81e763f7d1db56392bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c24aca17b424346c21a81e763f7d1db56392bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c24aca17b424346c21a81e763f7d1db56392bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c24aca17b424346c21a81e763f7d1db56392bf/comments", "author": null, "committer": null, "parents": [{"sha": "9c7f808d0be7324121fa21e91d179f732efb94d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c7f808d0be7324121fa21e91d179f732efb94d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c7f808d0be7324121fa21e91d179f732efb94d5"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "f7fe198180d7c4b764323ac407eac1da3ea73c80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c24aca17b424346c21a81e763f7d1db56392bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c24aca17b424346c21a81e763f7d1db56392bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48c24aca17b424346c21a81e763f7d1db56392bf", "patch": "@@ -1,3 +1,8 @@\n+2010-09-03  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa.c (build_cdtor): Take VECtor as argument; fix array walk.\n+\t(build_cdtor_fns): Update use of build_cdtor.\n+\n 2010-09-03  Joseph Myers  <joseph@codesourcery.com>\n \n \t* doc/options.texi (SeparateAlias): Document."}, {"sha": "48e331e9b77f271fc7665a4dbb563871a5fd25d5", "filename": "gcc/ipa.c", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48c24aca17b424346c21a81e763f7d1db56392bf/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48c24aca17b424346c21a81e763f7d1db56392bf/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=48c24aca17b424346c21a81e763f7d1db56392bf", "patch": "@@ -1425,9 +1425,10 @@ record_cdtor_fn (struct cgraph_node *node)\n    they are destructors.  */\n \n static void\n-build_cdtor (bool ctor_p, tree *cdtors, size_t len)\n+build_cdtor (bool ctor_p, VEC (tree, heap) *cdtors)\n {\n   size_t i,j;\n+  size_t len = VEC_length (tree, cdtors);\n \n   i = 0;\n   while (i < len)\n@@ -1442,7 +1443,7 @@ build_cdtor (bool ctor_p, tree *cdtors, size_t len)\n       do\n \t{\n \t  priority_type p;\n-\t  fn = cdtors[i];\n+\t  fn = VEC_index (tree, cdtors, j);\n \t  p = ctor_p ? DECL_INIT_PRIORITY (fn) : DECL_FINI_PRIORITY (fn);\n \t  if (j == i)\n \t    priority = p;\n@@ -1452,7 +1453,7 @@ build_cdtor (bool ctor_p, tree *cdtors, size_t len)\n \t}\n       while (j < len);\n \n-      /* When there is only once constructor and target supports them, do nothing.  */\n+      /* When there is only one cdtor and target supports them, do nothing.  */\n       if (j == i + 1\n \t  && targetm.have_ctors_dtors)\n \t{\n@@ -1461,14 +1462,10 @@ build_cdtor (bool ctor_p, tree *cdtors, size_t len)\n \t}\n       /* Find the next batch of constructors/destructors with the same\n \t initialization priority.  */\n-      do\n+      for (;i < j; i++)\n \t{\n-\t  priority_type p;\n \t  tree call;\n-\t  fn = cdtors[i];\n-\t  p = ctor_p ? DECL_INIT_PRIORITY (fn) : DECL_FINI_PRIORITY (fn);\n-\t  if (p != priority)\n-\t    break;\n+\t  fn = VEC_index (tree, cdtors, i);\n \t  call = build_call_expr (fn, 0);\n \t  if (ctor_p)\n \t    DECL_STATIC_CONSTRUCTOR (fn) = 0;\n@@ -1479,7 +1476,6 @@ build_cdtor (bool ctor_p, tree *cdtors, size_t len)\n \t     optimizing, we want user to be able to breakpoint in them.  */\n \t  TREE_SIDE_EFFECTS (call) = 1;\n \t  append_to_statement_list (call, &body);\n-\t  ++i;\n \t}\n       while (i < len);\n       gcc_assert (body != NULL_TREE);\n@@ -1556,10 +1552,7 @@ build_cdtor_fns (void)\n \t     VEC_length (tree, static_ctors),\n \t     sizeof (tree),\n \t     compare_ctor);\n-      build_cdtor (/*ctor_p=*/true,\n-\t\t   VEC_address (tree, static_ctors),\n-\t\t   VEC_length (tree, static_ctors));\n-      VEC_truncate (tree, static_ctors, 0);\n+      build_cdtor (/*ctor_p=*/true, static_ctors);\n     }\n \n   if (!VEC_empty (tree, static_dtors))\n@@ -1569,10 +1562,7 @@ build_cdtor_fns (void)\n \t     VEC_length (tree, static_dtors),\n \t     sizeof (tree),\n \t     compare_dtor);\n-      build_cdtor (/*ctor_p=*/false,\n-\t\t   VEC_address (tree, static_dtors),\n-\t\t   VEC_length (tree, static_dtors));\n-      VEC_truncate (tree, static_dtors, 0);\n+      build_cdtor (/*ctor_p=*/false, static_dtors);\n     }\n }\n "}]}