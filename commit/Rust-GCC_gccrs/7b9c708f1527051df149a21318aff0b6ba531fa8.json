{"sha": "7b9c708f1527051df149a21318aff0b6ba531fa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I5YzcwOGYxNTI3MDUxZGYxNDlhMjEzMThhZmYwYjZiYTUzMWZhOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-03-27T12:27:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-03-27T12:27:40Z"}, "message": "f95-lang.c (gfc_get_alias_set): New function.\n\n\t* f95-lang.c (gfc_get_alias_set): New function.\n\t(LANG_HOOKS_GET_ALIAS_SET): Define.\n\n\t* gfortran.fortran-torture/execute/equiv_5.f: New test.\n\nFrom-SVN: r112416", "tree": {"sha": "775d8a7d9dd3c39468f1951e4efd7d8296916e17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/775d8a7d9dd3c39468f1951e4efd7d8296916e17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b9c708f1527051df149a21318aff0b6ba531fa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9c708f1527051df149a21318aff0b6ba531fa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b9c708f1527051df149a21318aff0b6ba531fa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9c708f1527051df149a21318aff0b6ba531fa8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b78c0542abe85066ce76f0ceb2d6a5299b5f0de8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78c0542abe85066ce76f0ceb2d6a5299b5f0de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b78c0542abe85066ce76f0ceb2d6a5299b5f0de8"}], "stats": {"total": 255, "additions": 255, "deletions": 0}, "files": [{"sha": "b6e4cae77f42fbca4a9cc95c4d970a1e76387c0e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9c708f1527051df149a21318aff0b6ba531fa8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9c708f1527051df149a21318aff0b6ba531fa8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7b9c708f1527051df149a21318aff0b6ba531fa8", "patch": "@@ -1,3 +1,8 @@\n+2006-03-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* f95-lang.c (gfc_get_alias_set): New function.\n+\t(LANG_HOOKS_GET_ALIAS_SET): Define.\n+\n 2006-03-25  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/26816"}, {"sha": "72579246515aa3cfa413aa590998f833daf9a581", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9c708f1527051df149a21318aff0b6ba531fa8/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9c708f1527051df149a21318aff0b6ba531fa8/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=7b9c708f1527051df149a21318aff0b6ba531fa8", "patch": "@@ -99,6 +99,7 @@ void insert_block (tree);\n static void gfc_clear_binding_stack (void);\n static void gfc_be_parse_file (int);\n static void gfc_expand_function (tree);\n+static HOST_WIDE_INT gfc_get_alias_set (tree);\n \n #undef LANG_HOOKS_NAME\n #undef LANG_HOOKS_INIT\n@@ -116,6 +117,7 @@ static void gfc_expand_function (tree);\n #undef LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE\n #undef LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION\n #undef LANG_HOOKS_CLEAR_BINDING_STACK\n+#undef LANG_HOOKS_GET_ALIAS_SET\n #undef LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE\n #undef LANG_HOOKS_OMP_PREDETERMINED_SHARING\n #undef LANG_HOOKS_OMP_DISREGARD_VALUE_EXPR\n@@ -139,6 +141,7 @@ static void gfc_expand_function (tree);\n #define LANG_HOOKS_SIGNED_OR_UNSIGNED_TYPE gfc_signed_or_unsigned_type\n #define LANG_HOOKS_CALLGRAPH_EXPAND_FUNCTION gfc_expand_function\n #define LANG_HOOKS_CLEAR_BINDING_STACK     gfc_clear_binding_stack\n+#define LANG_HOOKS_GET_ALIAS_SET\t   gfc_get_alias_set\n #define LANG_HOOKS_OMP_PRIVATIZE_BY_REFERENCE\tgfc_omp_privatize_by_reference\n #define LANG_HOOKS_OMP_PREDETERMINED_SHARING\tgfc_omp_predetermined_sharing\n #define LANG_HOOKS_OMP_DISREGARD_VALUE_EXPR\tgfc_omp_disregard_value_expr\n@@ -694,6 +697,24 @@ gfc_mark_addressable (tree exp)\n       }\n }\n \n+/* Return the typed-based alias set for T, which may be an expression\n+   or a type.  Return -1 if we don't do anything special.  */\n+\n+static HOST_WIDE_INT\n+gfc_get_alias_set (tree t)\n+{\n+  tree u;\n+\n+  /* Permit type-punning when accessing an EQUIVALENCEd variable or\n+     mixed type entry master's return value.  */\n+  for (u = t; handled_component_p (u); u = TREE_OPERAND (u, 0))\n+    if (TREE_CODE (u) == COMPONENT_REF\n+\t&& TREE_CODE (TREE_TYPE (TREE_OPERAND (u, 0))) == UNION_TYPE)\n+      return 0;\n+\n+  return -1;\n+}\n+\n /* press the big red button - garbage (ggc) collection is on */\n \n int ggc_p = 1;"}, {"sha": "235853293009f38c5b4f6b155ba4b425fc2d0694", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9c708f1527051df149a21318aff0b6ba531fa8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9c708f1527051df149a21318aff0b6ba531fa8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b9c708f1527051df149a21318aff0b6ba531fa8", "patch": "@@ -1,3 +1,7 @@\n+2006-03-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortran.fortran-torture/execute/equiv_5.f: New test.\n+\n 2006-03-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/26661"}, {"sha": "b20797ee3f78b6073f03a8b9568a5a6550febd57", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/equiv_5.f", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9c708f1527051df149a21318aff0b6ba531fa8/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_5.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9c708f1527051df149a21318aff0b6ba531fa8/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_5.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_5.f?ref=7b9c708f1527051df149a21318aff0b6ba531fa8", "patch": "@@ -0,0 +1,225 @@\n+C  This testcase was miscompiled on i?86/x86_64, the scheduler\n+C  swapped write to DMACH(1) with following read from SMALL(1),\n+C  at -O2+, as the front-end didn't signal in any way this kind\n+C  of type punning is ok.\n+C  The testcase is from blas, http://www.netlib.org/blas/d1mach.f\n+\n+      DOUBLE PRECISION FUNCTION D1MACH(I)\n+      INTEGER I\n+C\n+C  DOUBLE-PRECISION MACHINE CONSTANTS\n+C  D1MACH( 1) = B**(EMIN-1), THE SMALLEST POSITIVE MAGNITUDE.\n+C  D1MACH( 2) = B**EMAX*(1 - B**(-T)), THE LARGEST MAGNITUDE.\n+C  D1MACH( 3) = B**(-T), THE SMALLEST RELATIVE SPACING.\n+C  D1MACH( 4) = B**(1-T), THE LARGEST RELATIVE SPACING.\n+C  D1MACH( 5) = LOG10(B)\n+C\n+      INTEGER SMALL(2)\n+      INTEGER LARGE(2)\n+      INTEGER RIGHT(2)\n+      INTEGER DIVER(2)\n+      INTEGER LOG10(2)\n+      INTEGER SC, CRAY1(38), J\n+      COMMON /D9MACH/ CRAY1\n+      SAVE SMALL, LARGE, RIGHT, DIVER, LOG10, SC\n+      DOUBLE PRECISION DMACH(5)\n+      EQUIVALENCE (DMACH(1),SMALL(1))\n+      EQUIVALENCE (DMACH(2),LARGE(1))\n+      EQUIVALENCE (DMACH(3),RIGHT(1))\n+      EQUIVALENCE (DMACH(4),DIVER(1))\n+      EQUIVALENCE (DMACH(5),LOG10(1))\n+C  THIS VERSION ADAPTS AUTOMATICALLY TO MOST CURRENT MACHINES.\n+C  R1MACH CAN HANDLE AUTO-DOUBLE COMPILING, BUT THIS VERSION OF\n+C  D1MACH DOES NOT, BECAUSE WE DO NOT HAVE QUAD CONSTANTS FOR\n+C  MANY MACHINES YET.\n+C  TO COMPILE ON OLDER MACHINES, ADD A C IN COLUMN 1\n+C  ON THE NEXT LINE\n+      DATA SC/0/\n+C  AND REMOVE THE C FROM COLUMN 1 IN ONE OF THE SECTIONS BELOW.\n+C  CONSTANTS FOR EVEN OLDER MACHINES CAN BE OBTAINED BY\n+C          mail netlib@research.bell-labs.com\n+C          send old1mach from blas\n+C  PLEASE SEND CORRECTIONS TO dmg OR ehg@bell-labs.com.\n+C\n+C     MACHINE CONSTANTS FOR THE HONEYWELL DPS 8/70 SERIES.\n+C      DATA SMALL(1),SMALL(2) / O402400000000, O000000000000 /\n+C      DATA LARGE(1),LARGE(2) / O376777777777, O777777777777 /\n+C      DATA RIGHT(1),RIGHT(2) / O604400000000, O000000000000 /\n+C      DATA DIVER(1),DIVER(2) / O606400000000, O000000000000 /\n+C      DATA LOG10(1),LOG10(2) / O776464202324, O117571775714 /, SC/987/\n+C\n+C     MACHINE CONSTANTS FOR PDP-11 FORTRANS SUPPORTING\n+C     32-BIT INTEGERS.\n+C      DATA SMALL(1),SMALL(2) /    8388608,           0 /\n+C      DATA LARGE(1),LARGE(2) / 2147483647,          -1 /\n+C      DATA RIGHT(1),RIGHT(2) /  612368384,           0 /\n+C      DATA DIVER(1),DIVER(2) /  620756992,           0 /\n+C      DATA LOG10(1),LOG10(2) / 1067065498, -2063872008 /, SC/987/\n+C\n+C     MACHINE CONSTANTS FOR THE UNIVAC 1100 SERIES.\n+C      DATA SMALL(1),SMALL(2) / O000040000000, O000000000000 /\n+C      DATA LARGE(1),LARGE(2) / O377777777777, O777777777777 /\n+C      DATA RIGHT(1),RIGHT(2) / O170540000000, O000000000000 /\n+C      DATA DIVER(1),DIVER(2) / O170640000000, O000000000000 /\n+C      DATA LOG10(1),LOG10(2) / O177746420232, O411757177572 /, SC/987/\n+C\n+C     ON FIRST CALL, IF NO DATA UNCOMMENTED, TEST MACHINE TYPES.\n+      IF (SC .NE. 987) THEN\n+         DMACH(1) = 1.D13\n+         IF (      SMALL(1) .EQ. 1117925532\n+     *       .AND. SMALL(2) .EQ. -448790528) THEN\n+*           *** IEEE BIG ENDIAN ***\n+            SMALL(1) = 1048576\n+            SMALL(2) = 0\n+            LARGE(1) = 2146435071\n+            LARGE(2) = -1\n+            RIGHT(1) = 1017118720\n+            RIGHT(2) = 0\n+            DIVER(1) = 1018167296\n+            DIVER(2) = 0\n+            LOG10(1) = 1070810131\n+            LOG10(2) = 1352628735\n+         ELSE IF ( SMALL(2) .EQ. 1117925532\n+     *       .AND. SMALL(1) .EQ. -448790528) THEN\n+*           *** IEEE LITTLE ENDIAN ***\n+            SMALL(2) = 1048576\n+            SMALL(1) = 0\n+            LARGE(2) = 2146435071\n+            LARGE(1) = -1\n+            RIGHT(2) = 1017118720\n+            RIGHT(1) = 0\n+            DIVER(2) = 1018167296\n+            DIVER(1) = 0\n+            LOG10(2) = 1070810131\n+            LOG10(1) = 1352628735\n+         ELSE IF ( SMALL(1) .EQ. -2065213935\n+     *       .AND. SMALL(2) .EQ. 10752) THEN\n+*               *** VAX WITH D_FLOATING ***\n+            SMALL(1) = 128\n+            SMALL(2) = 0\n+            LARGE(1) = -32769\n+            LARGE(2) = -1\n+            RIGHT(1) = 9344\n+            RIGHT(2) = 0\n+            DIVER(1) = 9472\n+            DIVER(2) = 0\n+            LOG10(1) = 546979738\n+            LOG10(2) = -805796613\n+         ELSE IF ( SMALL(1) .EQ. 1267827943\n+     *       .AND. SMALL(2) .EQ. 704643072) THEN\n+*               *** IBM MAINFRAME ***\n+            SMALL(1) = 1048576\n+            SMALL(2) = 0\n+            LARGE(1) = 2147483647\n+            LARGE(2) = -1\n+            RIGHT(1) = 856686592\n+            RIGHT(2) = 0\n+            DIVER(1) = 873463808\n+            DIVER(2) = 0\n+            LOG10(1) = 1091781651\n+            LOG10(2) = 1352628735\n+         ELSE IF ( SMALL(1) .EQ. 1120022684\n+     *       .AND. SMALL(2) .EQ. -448790528) THEN\n+*           *** CONVEX C-1 ***\n+            SMALL(1) = 1048576\n+            SMALL(2) = 0\n+            LARGE(1) = 2147483647\n+            LARGE(2) = -1\n+            RIGHT(1) = 1019215872\n+            RIGHT(2) = 0\n+            DIVER(1) = 1020264448\n+            DIVER(2) = 0\n+            LOG10(1) = 1072907283\n+            LOG10(2) = 1352628735\n+         ELSE IF ( SMALL(1) .EQ. 815547074\n+     *       .AND. SMALL(2) .EQ. 58688) THEN\n+*           *** VAX G-FLOATING ***\n+            SMALL(1) = 16\n+            SMALL(2) = 0\n+            LARGE(1) = -32769\n+            LARGE(2) = -1\n+            RIGHT(1) = 15552\n+            RIGHT(2) = 0\n+            DIVER(1) = 15568\n+            DIVER(2) = 0\n+            LOG10(1) = 1142112243\n+            LOG10(2) = 2046775455\n+         ELSE\n+            DMACH(2) = 1.D27 + 1\n+            DMACH(3) = 1.D27\n+            LARGE(2) = LARGE(2) - RIGHT(2)\n+            IF (LARGE(2) .EQ. 64 .AND. SMALL(2) .EQ. 0) THEN\n+               CRAY1(1) = 67291416\n+               DO 10 J = 1, 20\n+                  CRAY1(J+1) = CRAY1(J) + CRAY1(J)\n+ 10               CONTINUE\n+               CRAY1(22) = CRAY1(21) + 321322\n+               DO 20 J = 22, 37\n+                  CRAY1(J+1) = CRAY1(J) + CRAY1(J)\n+ 20               CONTINUE\n+               IF (CRAY1(38) .EQ. SMALL(1)) THEN\n+*                  *** CRAY ***\n+                  CALL I1MCRY(SMALL(1), J, 8285, 8388608, 0)\n+                  SMALL(2) = 0\n+                  CALL I1MCRY(LARGE(1), J, 24574, 16777215, 16777215)\n+                  CALL I1MCRY(LARGE(2), J, 0, 16777215, 16777214)\n+                  CALL I1MCRY(RIGHT(1), J, 16291, 8388608, 0)\n+                  RIGHT(2) = 0\n+                  CALL I1MCRY(DIVER(1), J, 16292, 8388608, 0)\n+                  DIVER(2) = 0\n+                  CALL I1MCRY(LOG10(1), J, 16383, 10100890, 8715215)\n+                  CALL I1MCRY(LOG10(2), J, 0, 16226447, 9001388)\n+               ELSE\n+                  WRITE(*,9000)\n+                  STOP 779\n+                  END IF\n+            ELSE\n+               WRITE(*,9000)\n+               STOP 779\n+               END IF\n+            END IF\n+         SC = 987\n+         END IF\n+*    SANITY CHECK\n+      IF (DMACH(4) .GE. 1.0D0) STOP 778\n+      IF (I .LT. 1 .OR. I .GT. 5) THEN\n+         WRITE(*,*) 'D1MACH(I): I =',I,' is out of bounds.'\n+         STOP\n+         END IF\n+      D1MACH = DMACH(I)\n+      RETURN\n+ 9000 FORMAT(/' Adjust D1MACH by uncommenting data statements'/\n+     *' appropriate for your machine.')\n+* /* Standard C source for D1MACH -- remove the * in column 1 */\n+*#include <stdio.h>\n+*#include <float.h>\n+*#include <math.h>\n+*double d1mach_(long *i)\n+*{\n+*\tswitch(*i){\n+*\t  case 1: return DBL_MIN;\n+*\t  case 2: return DBL_MAX;\n+*\t  case 3: return DBL_EPSILON/FLT_RADIX;\n+*\t  case 4: return DBL_EPSILON;\n+*\t  case 5: return log10((double)FLT_RADIX);\n+*\t  }\n+*\tfprintf(stderr, \"invalid argument: d1mach(%ld)\\n\", *i);\n+*\texit(1); return 0; /* some compilers demand return values */\n+*}\n+      END\n+      SUBROUTINE I1MCRY(A, A1, B, C, D)\n+**** SPECIAL COMPUTATION FOR OLD CRAY MACHINES ****\n+      INTEGER A, A1, B, C, D\n+      A1 = 16777216*B + C\n+      A = 16777216*A1 + D\n+      END\n+\n+      PROGRAM MAIN\n+      DOUBLE PRECISION D1MACH\n+      EXTERNAL D1MACH\n+      PRINT *,D1MACH(1)\n+      PRINT *,D1MACH(2)\n+      PRINT *,D1MACH(3)\n+      PRINT *,D1MACH(4)\n+      PRINT *,D1MACH(5)\n+      END"}]}