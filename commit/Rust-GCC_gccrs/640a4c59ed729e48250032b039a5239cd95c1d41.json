{"sha": "640a4c59ed729e48250032b039a5239cd95c1d41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwYTRjNTllZDcyOWU0ODI1MDAzMmIwMzlhNTIzOWNkOTVjMWQ0MQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-09-17T12:30:16Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-09-17T12:30:16Z"}, "message": "re PR fortran/54603 ([F03] Wrong code with structure constructor for proc-pointer components)\n\n2012-09-17  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/54603\n        * trans-expr.c (gfc_trans_subcomponent_assign): Handle\n        proc-pointer components.\n\n2012-09-17  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/54603\n        * gfortran.dg/structure_constructor_11.f90: New.\n\nFrom-SVN: r191382", "tree": {"sha": "7e1a47ffe9d2fe14f016937cb36cf80cd59c0e55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e1a47ffe9d2fe14f016937cb36cf80cd59c0e55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/640a4c59ed729e48250032b039a5239cd95c1d41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640a4c59ed729e48250032b039a5239cd95c1d41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/640a4c59ed729e48250032b039a5239cd95c1d41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640a4c59ed729e48250032b039a5239cd95c1d41/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6423ef3e00856eb88fb7fceb0f08b6068ddd926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6423ef3e00856eb88fb7fceb0f08b6068ddd926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6423ef3e00856eb88fb7fceb0f08b6068ddd926"}], "stats": {"total": 117, "additions": 115, "deletions": 2}, "files": [{"sha": "3f6e3be42ab464f4a5defdb3af8f85cef50d1b08", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640a4c59ed729e48250032b039a5239cd95c1d41/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640a4c59ed729e48250032b039a5239cd95c1d41/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=640a4c59ed729e48250032b039a5239cd95c1d41", "patch": "@@ -1,5 +1,12 @@\n 2012-09-17  Tobias Burnus  <burnus@net-b.de>\n \n+\tPR fortran/54603\n+\t* trans-expr.c (gfc_trans_subcomponent_assign): Handle\n+\tproc-pointer components.\n+\n+2012-09-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/54599\n \t* error.c (error_print): Move increment out of the assert.\n \t* interface.c (gfc_compare_derived_types): Add assert.\n \t(get_expr_storage_size): Remove always-true logical condition."}, {"sha": "98634c3e13f7e98b41daf00704a116cebd41c33d", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640a4c59ed729e48250032b039a5239cd95c1d41/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640a4c59ed729e48250032b039a5239cd95c1d41/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=640a4c59ed729e48250032b039a5239cd95c1d41", "patch": "@@ -5506,11 +5506,11 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n \n   gfc_start_block (&block);\n \n-  if (cm->attr.pointer)\n+  if (cm->attr.pointer || cm->attr.proc_pointer)\n     {\n       gfc_init_se (&se, NULL);\n       /* Pointer component.  */\n-      if (cm->attr.dimension)\n+      if (cm->attr.dimension && !cm->attr.proc_pointer)\n \t{\n \t  /* Array pointer.  */\n \t  if (expr->expr_type == EXPR_NULL)\n@@ -5530,6 +5530,11 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n \t  se.want_pointer = 1;\n \t  gfc_conv_expr (&se, expr);\n \t  gfc_add_block_to_block (&block, &se.pre);\n+\n+\t  if (expr->symtree && expr->symtree->n.sym->attr.proc_pointer\n+\t      && expr->symtree->n.sym->attr.dummy)\n+\t    se.expr = build_fold_indirect_ref_loc (input_location, se.expr);\n+\n \t  gfc_add_modify (&block, dest,\n \t\t\t       fold_convert (TREE_TYPE (dest), se.expr));\n \t  gfc_add_block_to_block (&block, &se.post);"}, {"sha": "eb1f595fe55aa7fdface8b54449766da06af7873", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640a4c59ed729e48250032b039a5239cd95c1d41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640a4c59ed729e48250032b039a5239cd95c1d41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=640a4c59ed729e48250032b039a5239cd95c1d41", "patch": "@@ -1,3 +1,8 @@\n+2012-09-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/54603\n+\t* gfortran.dg/structure_constructor_11.f90: New.\n+\n 2012-09-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/54563"}, {"sha": "167f8e76cf451b357aaf704f8a2774e1c5eb4bc2", "filename": "gcc/testsuite/gfortran.dg/structure_constructor_11.f90", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640a4c59ed729e48250032b039a5239cd95c1d41/gcc%2Ftestsuite%2Fgfortran.dg%2Fstructure_constructor_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640a4c59ed729e48250032b039a5239cd95c1d41/gcc%2Ftestsuite%2Fgfortran.dg%2Fstructure_constructor_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstructure_constructor_11.f90?ref=640a4c59ed729e48250032b039a5239cd95c1d41", "patch": "@@ -0,0 +1,96 @@\n+! { dg-do run}\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/54603\n+!\n+! Contributed by Kacper Kowalik\n+!\n+module foo\n+   implicit none\n+\n+   interface\n+      subroutine cg_ext\n+         implicit none\n+      end subroutine cg_ext\n+   end interface\n+\n+   type :: ext_ptr\n+      procedure(cg_ext), nopass, pointer :: init\n+      procedure(cg_ext), nopass, pointer :: cleanup\n+   end type ext_ptr\n+\n+   type :: ext_ptr_array\n+      type(ext_ptr) :: a\n+      contains\n+         procedure :: epa_init\n+   end type ext_ptr_array\n+\n+   type(ext_ptr_array) :: bar\n+\n+contains\n+   subroutine epa_init(this, init, cleanup)\n+      implicit none\n+      class(ext_ptr_array), intent(inout) :: this\n+      procedure(cg_ext), pointer, intent(in)    :: init\n+      procedure(cg_ext), pointer, intent(in)    :: cleanup\n+\n+      this%a = ext_ptr(null(), null())  ! Wrong code\n+      this%a = ext_ptr(init, cleanup)  ! Wrong code\n+\n+      this%a%init => init              ! OK\n+      this%a%cleanup => cleanup        ! OK\n+\n+      this%a = ext_ptr(this%a%init,this%a%cleanup) ! ICE in fold_convert_loc\n+   end subroutine epa_init\n+\n+end module foo\n+\n+program ala\n+   use foo, only: bar\n+   implicit none\n+   integer :: count1, count2\n+   count1 = 0\n+   count2 = 0\n+\n+   call setme\n+   call bar%a%cleanup()\n+   call bar%a%init()\n+\n+   ! They should be called once\n+   if (count1 /= 23 .or. count2 /= 42) call abort ()\n+\n+contains\n+\n+   subroutine dummy1\n+      implicit none\n+      !print *, 'dummy1'\n+      count1 = 23 \n+   end subroutine dummy1\n+\n+   subroutine dummy2\n+      implicit none\n+      !print *, 'dummy2'\n+      count2 = 42\n+   end subroutine dummy2\n+   \n+   subroutine setme\n+      use foo, only: bar, cg_ext\n+      implicit none\n+      procedure(cg_ext), pointer :: a_init, a_clean\n+\n+      a_init => dummy1\n+      a_clean => dummy2\n+      call bar%epa_init(a_init, a_clean)\n+   end subroutine setme\n+\n+end program ala\n+\n+! { dg-final { scan-tree-dump-times \"ext_ptr.\\[0-9\\]+.init = 0B;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"ext_ptr.\\[0-9\\]+.cleanup = 0B;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"ext_ptr.1.init = \\\\*init;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"ext_ptr.1.cleanup = \\\\*cleanup;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"this->_data->a.init = \\\\*init;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"this->_data->a.cleanup = \\\\*cleanup;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"ext_ptr.\\[0-9\\]+.init = this->_data->a.init;\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"ext_ptr.\\[0-9\\]+.cleanup = this->_data->a.cleanup;\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}