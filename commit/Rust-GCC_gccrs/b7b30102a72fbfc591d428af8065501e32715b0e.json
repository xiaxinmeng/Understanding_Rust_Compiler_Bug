{"sha": "b7b30102a72fbfc591d428af8065501e32715b0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdiMzAxMDJhNzJmYmZjNTkxZDQyOGFmODA2NTUwMWUzMjcxNWIwZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-04-06T11:53:30Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-04-06T11:53:30Z"}, "message": "vec.cc: New file.\n\n\t* vec.cc: New file.\n\t* Make-lang.in (CXX_LIB2FUNCS): Add it.\n\t(vec.o): Build it.\n\t* inc/cxxabi.h (__cxa_vec_new, __cxa_vec_ctor, __cxa_vec_dtor,\n\t__cxa_vec_delete): Declare.\n\nFrom-SVN: r32967", "tree": {"sha": "8c1cfd58e68771fa6539158e0c6f51aab64f7757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c1cfd58e68771fa6539158e0c6f51aab64f7757"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7b30102a72fbfc591d428af8065501e32715b0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b30102a72fbfc591d428af8065501e32715b0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7b30102a72fbfc591d428af8065501e32715b0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b30102a72fbfc591d428af8065501e32715b0e/comments", "author": null, "committer": null, "parents": [{"sha": "6dfc58ed2691b3d50c565c368831b56fff6b47de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfc58ed2691b3d50c565c368831b56fff6b47de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dfc58ed2691b3d50c565c368831b56fff6b47de"}], "stats": {"total": 173, "additions": 171, "deletions": 2}, "files": [{"sha": "fe8eb4a974d7ed351443e12af6c06d8a4961bd4f", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b30102a72fbfc591d428af8065501e32715b0e/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b30102a72fbfc591d428af8065501e32715b0e/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=b7b30102a72fbfc591d428af8065501e32715b0e", "patch": "@@ -62,7 +62,7 @@ CXX_EXTRA_HEADERS = $(srcdir)/cp/inc/typeinfo $(srcdir)/cp/inc/exception \\\n \n # Extra code to include in libgcc2.\n CXX_LIB2FUNCS = tinfo.o tinfo2.o new.o opnew.o opnewnt.o opvnew.o opvnewnt.o \\\n-\topdel.o opdelnt.o opvdel.o opvdelnt.o exception.o\n+\topdel.o opdelnt.o opvdel.o opvdelnt.o exception.o vec.o\n CXX_LIB2SRCS = $(srcdir)/cp/new.cc $(srcdir)/cp/new1.cc $(srcdir)/cp/new2.cc \\\n \t$(srcdir)/cp/exception.cc $(srcdir)/cp/tinfo.cc \\\n \t$(srcdir)/cp/tinfo2.cc $(srcdir)/cp/tinfo.h\n@@ -173,6 +173,9 @@ opvdel.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc\n opvdelnt.o: cc1plus$(exeext) $(srcdir)/cp/new2.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(GXX_ABI_FLAG) $(CXXFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/new2.cc -DL_op_vdelnt -o opvdelnt.o\n+vec.o: cc1plus$(exeext) $(srcdir)/cp/vec.cc\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(GXX_ABI_FLAG) $(CXXFLAGS) $(INCLUDES) \\\n+\t  -c $(srcdir)/cp/vec.cc -o vec.o\n \n # We want to update cplib2.txt if any of the source files change...\n cplib2.txt: $(CXX_LIB2SRCS) $(CXX_EXTRA_HEADERS) cplib2.ready"}, {"sha": "1bc7782b8a025b7ad21df5c01dfcb46dfb19cc1a", "filename": "gcc/cp/inc/cxxabi.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b30102a72fbfc591d428af8065501e32715b0e/gcc%2Fcp%2Finc%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b30102a72fbfc591d428af8065501e32715b0e/gcc%2Fcp%2Finc%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finc%2Fcxxabi.h?ref=b7b30102a72fbfc591d428af8065501e32715b0e", "patch": "@@ -385,7 +385,33 @@ void *__dynamic_cast (const void *src_ptr,    /* object started from */\n        -2: src_type is not a public base of dst_type\n        -3: src_type is a multiple public non-virtual base of dst_type */\n \n-\n+/* array ctor/dtor routines */\n+\n+/* allocate and construct array */\n+void *__cxa_vec_new (size_t __element_count,\n+                     size_t __element_size,\n+                     size_t __padding_size,\n+                     void (*__constructor) (void *),\n+                     void (*__destructor) (void *));\n+\n+/* construct array */\n+void __cxa_vec_ctor (void *__array_address,\n+                     size_t __element_count,\n+                     size_t __element_size,\n+                     void (*__constructor) (void *),\n+                     void (*__destructor) (void *));\n+\n+/* destruct array */\n+void __cxa_vec_dtor (void *__array_address,\n+                     size_t __element_count,\n+                     size_t __element_size,\n+                     void (*__destructor) (void *));\n+\n+/* destruct and release array */\n+void __cxa_vec_delete (void *__array_address,\n+                       size_t __element_size,\n+                       size_t __padding_size,\n+                       void (*__destructor) (void *));\n \n } /* namespace __cxxabiv1 */\n "}, {"sha": "3b5182cdcb8fa2194da8732d3b9d23356d3d6419", "filename": "gcc/cp/vec.cc", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b30102a72fbfc591d428af8065501e32715b0e/gcc%2Fcp%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b30102a72fbfc591d428af8065501e32715b0e/gcc%2Fcp%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fvec.cc?ref=b7b30102a72fbfc591d428af8065501e32715b0e", "patch": "@@ -0,0 +1,140 @@\n+// new abi support -*- C++ -*-\n+// Copyright (C) 2000\n+// Free Software Foundation, Inc.\n+// Written by Nathan Sidwell, Codesourcery LLC, <nathan@codesourcery.com>\n+// \n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA. \n+\n+// As a special exception, if you link this library with other files,\n+// some of which are compiled with GCC, to produce an executable,\n+// this library does not by itself cause the resulting executable\n+// to be covered by the GNU General Public License.\n+// This exception does not however invalidate any other reasons why\n+// the executable file might be covered by the GNU General Public License.\n+\n+#if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n+#include <cxxabi.h>\n+\n+namespace __cxxabiv1\n+{\n+\n+/* allocate and construct array */\n+void *\n+__cxa_vec_new (size_t element_count,\n+               size_t element_size,\n+               size_t padding_size,\n+               void (*constructor) (void *),\n+               void (*destructor) (void *))\n+{\n+  size_t size = element_count * element_size + padding_size;\n+  char *base = static_cast <char *> (operator new[] (size));\n+  \n+  if (padding_size)\n+    {\n+      base += padding_size;\n+      reinterpret_cast <size_t *> (base)[-1] = element_count;\n+    }\n+  try\n+    {\n+      __cxa_vec_ctor (base, element_count, element_size,\n+                      constructor, destructor);\n+    }\n+  catch (...)\n+    {\n+      operator delete[] (base - padding_size);\n+      throw;\n+    }\n+  return base;\n+}\n+\n+/* construct array */\n+void\n+__cxa_vec_ctor (void *array_address,\n+                size_t element_count,\n+                size_t element_size,\n+                void (*constructor) (void *),\n+                void (*destructor) (void *))\n+{\n+  size_t ix = 0;\n+  char *ptr = static_cast <char *> (array_address);\n+  \n+  try\n+    {\n+      if (constructor)\n+        for (; ix != element_count; ix++, ptr += element_size)\n+          constructor (ptr);\n+    }\n+  catch (...)\n+    {\n+      try\n+        {\n+          if (destructor)\n+            for (; ix--; ptr -= element_size)\n+              destructor (ptr);\n+        }\n+      catch (...)\n+        {\n+          // [except.ctor]/3 If a destructor called during stack unwinding\n+          // exists with an exception, terminate is called.\n+          std::terminate ();\n+        }\n+      throw;\n+    }\n+}\n+\n+/* destruct array */\n+void\n+__cxa_vec_dtor (void *array_address,\n+                size_t element_count,\n+                size_t element_size,\n+                void (*destructor) (void *))\n+{\n+  if (destructor)\n+    {\n+      char *ptr = static_cast <char *> (array_address);\n+      \n+      ptr += element_count * element_size;\n+      \n+      for (size_t ix = element_count; ix--;)\n+        {\n+          ptr -= element_size;\n+          destructor (ptr);\n+        }\n+    }\n+}\n+\n+/* destruct and release array */\n+void\n+__cxa_vec_delete (void *array_address,\n+                  size_t element_size,\n+                  size_t padding_size,\n+                  void (*destructor) (void *))\n+{\n+  char *base = static_cast <char *> (array_address);\n+  \n+  if (padding_size)\n+    {\n+      size_t element_count = reinterpret_cast <size_t *> (base)[-1];\n+      \n+      __cxa_vec_dtor (base, element_count, element_size, destructor);\n+      base -= padding_size;\n+    }\n+  operator delete[] (base);\n+}\n+\n+} // namespace __cxxabiv1\n+\n+#endif // defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100"}]}