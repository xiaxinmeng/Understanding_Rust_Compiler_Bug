{"sha": "91a7e1daa7520489fafc0001d03c68bad4304f15", "node_id": "C_kwDOANBUbNoAKDkxYTdlMWRhYTc1MjA0ODlmYWZjMDAwMWQwM2M2OGJhZDQzMDRmMTU", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-02-03T08:07:22Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-10T08:01:54Z"}, "message": "nvptx: Improved support for HFMode including neghf2 and abshf2\n\nThis patch adds more support for _Float16 (HFmode) to the nvptx backend.\nCurrently negation, absolute value and floating point comparisons are\nimplemented by promoting to float (SFmode).  This patch adds suitable\ndefine_insns to nvptx.md, most conditional on TARGET_SM53 (-misa=sm_53).\nThis patch also adds support for HFmode fused multiply-add.\n\nOne subtlety is that neghf2 and abshf2 are implemented by (HImode)\nbit manipulation operations to update the sign bit.  The NVidia PTX\nISA documentation for neg.f16 and abs.f16 contains the caution\n\"Future implementations may comply with the IEEE 754 standard by preserving\nthe (NaN) payload and modifying only the sign bit\".  Given the availability\nof suitable replacements, I thought it best to provide IEEE 754 compliant\nimplementations.  If anyone observes a performance penalty from this\nchoice I'm happy to provide a -ffast-math variant (or revisit this\ndecision).\n\nThis patch has been tested on nvptx-none hosted on x86_64-pc-linux-gnu\n(including newlib) with a make and make -k check with no new failures.\n\ngcc/ChangeLog:\n\n\t* config/nvptx/nvptx.md (*cmpf): New define_insn.\n\t(cstorehf4): New define_expand.\n\t(fmahf4): New define_insn.\n\t(neghf2): New define_insn.\n\t(abshf2): New define_insn.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/nvptx/float16-3.c: New test case for neghf2.\n\t* gcc.target/nvptx/float16-4.c: New test case for abshf2.\n\t* gcc.target/nvptx/float16-5.c: New test case for fmahf4.\n\t* gcc.target/nvptx/float16-6.c: New test case.", "tree": {"sha": "34afa78cd5152a911732ce857a68276b08cf00ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34afa78cd5152a911732ce857a68276b08cf00ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91a7e1daa7520489fafc0001d03c68bad4304f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a7e1daa7520489fafc0001d03c68bad4304f15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a7e1daa7520489fafc0001d03c68bad4304f15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a7e1daa7520489fafc0001d03c68bad4304f15/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcbe280931535109544cae15b1e575dd53b5c647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbe280931535109544cae15b1e575dd53b5c647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcbe280931535109544cae15b1e575dd53b5c647"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "e26d24ed650523b0d2c19c67bc3d547551c12a6d", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a7e1daa7520489fafc0001d03c68bad4304f15/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a7e1daa7520489fafc0001d03c68bad4304f15/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=91a7e1daa7520489fafc0001d03c68bad4304f15", "patch": "@@ -783,6 +783,14 @@\n   \"\"\n   \"%.\\\\tsetp%c1\\\\t%0, %2, %3;\")\n \n+(define_insn \"*cmphf\"\n+  [(set (match_operand:BI 0 \"nvptx_register_operand\" \"=R\")\n+\t(match_operator:BI 1 \"nvptx_float_comparison_operator\"\n+\t   [(match_operand:HF 2 \"nvptx_register_operand\" \"R\")\n+\t    (match_operand:HF 3 \"nvptx_nonmemory_operand\" \"RF\")]))]\n+  \"TARGET_SM53\"\n+  \"%.\\\\tsetp%c1\\\\t%0, %2, %3;\")\n+\n (define_insn \"jump\"\n   [(set (pc)\n \t(label_ref (match_operand 0 \"\" \"\")))]\n@@ -973,6 +981,21 @@\n   DONE;\n })\n \n+(define_expand \"cstorehf4\"\n+  [(set (match_operand:SI 0 \"nvptx_register_operand\")\n+\t(match_operator:SI 1 \"nvptx_float_comparison_operator\"\n+\t  [(match_operand:HF 2 \"nvptx_register_operand\")\n+\t   (match_operand:HF 3 \"nvptx_nonmemory_operand\")]))]\n+  \"TARGET_SM53\"\n+{\n+  rtx reg = gen_reg_rtx (BImode);\n+  rtx cmp = gen_rtx_fmt_ee (GET_CODE (operands[1]), BImode,\n+\t\t\t    operands[2], operands[3]);\n+  emit_move_insn (reg, cmp);\n+  emit_insn (gen_setccsi_from_bi (operands[0], reg));\n+  DONE;\n+})\n+\n ;; Calls\n \n (define_insn \"call_insn_<mode>\"\n@@ -1160,6 +1183,26 @@\n   \"TARGET_SM53\"\n   \"%.\\\\tmul.f16\\\\t%0, %1, %2;\")\n \n+(define_insn \"fmahf4\"\n+  [(set (match_operand:HF 0 \"nvptx_register_operand\" \"=R\")\n+\t(fma:HF (match_operand:HF 1 \"nvptx_register_operand\" \"R\")\n+\t\t(match_operand:HF 2 \"nvptx_nonmemory_operand\" \"RF\")\n+\t\t(match_operand:HF 3 \"nvptx_nonmemory_operand\" \"RF\")))]\n+  \"TARGET_SM53\"\n+  \"%.\\\\tfma%#.f16\\\\t%0, %1, %2, %3;\")\n+\n+(define_insn \"neghf2\"\n+  [(set (match_operand:HF 0 \"nvptx_register_operand\" \"=R\")\n+\t(neg:HF (match_operand:HF 1 \"nvptx_register_operand\" \"R\")))]\n+  \"\"\n+  \"%.\\\\txor.b16\\\\t%0, %1, -32768;\")\n+\n+(define_insn \"abshf2\"\n+  [(set (match_operand:HF 0 \"nvptx_register_operand\" \"=R\")\n+\t(abs:HF (match_operand:HF 1 \"nvptx_register_operand\" \"R\")))]\n+  \"\"\n+  \"%.\\\\tand.b16\\\\t%0, %1, 32767;\")\n+\n (define_insn \"exp2hf2\"\n   [(set (match_operand:HF 0 \"nvptx_register_operand\" \"=R\")\n \t(unspec:HF [(match_operand:HF 1 \"nvptx_register_operand\" \"R\")]"}, {"sha": "914282aa1c36ab5d21432587d2e13e34152f189c", "filename": "gcc/testsuite/gcc.target/nvptx/float16-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a7e1daa7520489fafc0001d03c68bad4304f15/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a7e1daa7520489fafc0001d03c68bad4304f15/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-3.c?ref=91a7e1daa7520489fafc0001d03c68bad4304f15", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -misa=sm_53 -mptx=6.3\" } */\n+\n+_Float16 var;\n+\n+void neg()\n+{\n+  var = -var;\n+}\n+\n+/* { dg-final { scan-assembler \"xor.b16\" } } */"}, {"sha": "b11f17a43ce61df274f0b57e0929b5cc985e2f7d", "filename": "gcc/testsuite/gcc.target/nvptx/float16-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a7e1daa7520489fafc0001d03c68bad4304f15/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a7e1daa7520489fafc0001d03c68bad4304f15/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-4.c?ref=91a7e1daa7520489fafc0001d03c68bad4304f15", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -misa=sm_53 -mptx=6.3 -ffast-math\" } */\n+\n+_Float16 var;\n+\n+void foo()\n+{\n+  var = (var < (_Float16)0.0) ? -var : var;\n+}\n+\n+/* { dg-final { scan-assembler \"and.b16\" } } */"}, {"sha": "5fe15ecdf7e77dd4ce1996de6f12f57f1a5277a1", "filename": "gcc/testsuite/gcc.target/nvptx/float16-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a7e1daa7520489fafc0001d03c68bad4304f15/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a7e1daa7520489fafc0001d03c68bad4304f15/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-5.c?ref=91a7e1daa7520489fafc0001d03c68bad4304f15", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -misa=sm_53 -mptx=6.3 -ffast-math\" } */\n+\n+_Float16 a;\n+_Float16 b;\n+_Float16 c;\n+_Float16 d;\n+\n+void foo()\n+{\n+  a = (_Float16)(b*c) + d;\n+}\n+\n+/* { dg-final { scan-assembler \"fma.rn.f16\" } } */"}, {"sha": "8fe4fa3051f4f2b7ecd4ba8c352da8ab586f2421", "filename": "gcc/testsuite/gcc.target/nvptx/float16-6.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a7e1daa7520489fafc0001d03c68bad4304f15/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a7e1daa7520489fafc0001d03c68bad4304f15/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-6.c?ref=91a7e1daa7520489fafc0001d03c68bad4304f15", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -misa=sm_53 -mptx=6.3\" } */\n+\n+_Float16 x;\n+_Float16 y;\n+\n+_Bool eq()\n+{\n+  return x == y;\n+}\n+\n+_Bool ne()\n+{\n+  return x != y;\n+}\n+\n+_Bool lt()\n+{\n+  return x < y;\n+}\n+\n+_Bool le()\n+{\n+  return x <= y;\n+}\n+\n+_Bool gt()\n+{\n+  return x < y;\n+}\n+\n+_Bool ge()\n+{\n+  return x >= y;\n+}\n+\n+/* { dg-final { scan-assembler-times \"setp\\.\\[a-z\\]*\\.f16\" 6 } } */\n+/* { dg-final { scan-assembler-not \"cvt.f32.f16\" } } */"}]}