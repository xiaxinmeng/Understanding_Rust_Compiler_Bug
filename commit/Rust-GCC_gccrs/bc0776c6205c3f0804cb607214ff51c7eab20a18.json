{"sha": "bc0776c6205c3f0804cb607214ff51c7eab20a18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMwNzc2YzYyMDVjM2YwODA0Y2I2MDcyMTRmZjUxYzdlYWIyMGExOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-07-05T21:56:42Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-07-05T21:56:42Z"}, "message": "(subst, case PLUS): Simplify (plus (comp A B) -1), etc.\n\nFrom-SVN: r4853", "tree": {"sha": "7bd4abba0b13ff7df97f686ded23422e7c788c34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bd4abba0b13ff7df97f686ded23422e7c788c34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc0776c6205c3f0804cb607214ff51c7eab20a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0776c6205c3f0804cb607214ff51c7eab20a18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc0776c6205c3f0804cb607214ff51c7eab20a18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0776c6205c3f0804cb607214ff51c7eab20a18/comments", "author": null, "committer": null, "parents": [{"sha": "05a0d5eabb68d036b5717738d601abac96a46c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05a0d5eabb68d036b5717738d601abac96a46c96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05a0d5eabb68d036b5717738d601abac96a46c96"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "b91558a9832136708a0dbfebdc517b5b819d0ce9", "filename": "gcc/combine.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc0776c6205c3f0804cb607214ff51c7eab20a18/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc0776c6205c3f0804cb607214ff51c7eab20a18/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=bc0776c6205c3f0804cb607214ff51c7eab20a18", "patch": "@@ -3394,7 +3394,22 @@ subst (x, from, to, in_dest, unique_copy)\n \t  goto restart;\n \t}\n \n-      /* If only the low-order bit of X is possible nonzero, (plus x -1)\n+      /* (plus (comparison A B) C) can become (neg (rev-comp A B)) if\n+\t C is 1 and STORE_FLAG_VALUE is -1 or if C is -1 and STORE_FLAG_VALUE\n+\t is 1.  This produces better code than the alternative immediately\n+\t below.  */\n+      if (GET_RTX_CLASS (GET_CODE (XEXP (x, 0))) == '<'\n+\t  && reversible_comparison_p (XEXP (x, 0))\n+\t  && ((STORE_FLAG_VALUE == -1 && XEXP (x, 1) == const1_rtx)\n+\t      || (STORE_FLAG_VALUE == 1 && XEXP (x, 1) == constm1_rtx)))\n+\t{\n+\t  x = gen_binary (reverse_condition (GET_CODE (XEXP (x, 0))),\n+\t\t\t  mode, XEXP (XEXP (x, 0), 0), XEXP (XEXP (x, 0), 1));\n+\t  x = gen_unary (NEG, mode, x);\n+\t  goto restart;\n+\t}\n+\n+      /* If only the low-order bit of X is possibly nonzero, (plus x -1)\n \t can become (ashiftrt (ashift (xor x 1) C) C) where C is\n \t the bitsize of the mode - 1.  This allows simplification of\n \t \"a = (b & 8) == 0;\"  */"}]}