{"sha": "92383a2a11f08a62afeda2b372f78ddc7241d4d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIzODNhMmExMWYwOGE2MmFmZWRhMmIzNzJmNzhkZGM3MjQxZDRkNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-09-04T18:49:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-09-04T18:49:51Z"}, "message": "re PR c++/54437 (Revision 190664 causes Firefox build failure)\n\n\tPR c++/54437\n\tPR c++/51213\n\t* pt.c (fn_type_unification): Call coerce_template_parms before\n\tentering substitution context.\n\nFrom-SVN: r190946", "tree": {"sha": "52ceeb9e13004ed37ed3421313578f1931b31652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52ceeb9e13004ed37ed3421313578f1931b31652"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92383a2a11f08a62afeda2b372f78ddc7241d4d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92383a2a11f08a62afeda2b372f78ddc7241d4d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92383a2a11f08a62afeda2b372f78ddc7241d4d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92383a2a11f08a62afeda2b372f78ddc7241d4d6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "178f875aa0b8465dd94c7c16bb74197229353cbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178f875aa0b8465dd94c7c16bb74197229353cbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/178f875aa0b8465dd94c7c16bb74197229353cbe"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "47498cb618a4fdc331b76c3a31abe8c5ca6eb849", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92383a2a11f08a62afeda2b372f78ddc7241d4d6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92383a2a11f08a62afeda2b372f78ddc7241d4d6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=92383a2a11f08a62afeda2b372f78ddc7241d4d6", "patch": "@@ -1,3 +1,10 @@\n+2012-09-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/54437\n+\tPR c++/51213\n+\t* pt.c (fn_type_unification): Call coerce_template_parms before\n+\tentering substitution context.\n+\n 2012-08-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "6f6235c009de8b1674eca9442f2aabbedb24560d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92383a2a11f08a62afeda2b372f78ddc7241d4d6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92383a2a11f08a62afeda2b372f78ddc7241d4d6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=92383a2a11f08a62afeda2b372f78ddc7241d4d6", "patch": "@@ -14591,11 +14591,22 @@ fn_type_unification (tree fn,\n   static int deduction_depth;\n   struct pending_template *old_last_pend = last_pending_template;\n   struct tinst_level *old_error_tinst = last_error_tinst_level;\n+  tree tparms = DECL_INNERMOST_TEMPLATE_PARMS (fn);\n   tree tinst;\n   tree r = error_mark_node;\n \n-  if (excessive_deduction_depth)\n-    return error_mark_node;\n+  /* Adjust any explicit template arguments before entering the\n+     substitution context.  */\n+  if (explicit_targs)\n+    {\n+      explicit_targs\n+\t= (coerce_template_parms (tparms, explicit_targs, NULL_TREE,\n+\t\t\t\t  complain,\n+\t\t\t\t  /*require_all_args=*/false,\n+\t\t\t\t  /*use_default_args=*/false));\n+      if (explicit_targs == error_mark_node)\n+\treturn error_mark_node;\n+    }\n \n   /* In C++0x, it's possible to have a function template whose type depends\n      on itself recursively.  This is most obvious with decltype, but can also\n@@ -14608,6 +14619,8 @@ fn_type_unification (tree fn,\n      substitutions back up to the initial one.\n \n      This is, of course, not reentrant.  */\n+  if (excessive_deduction_depth)\n+    return error_mark_node;\n   tinst = build_tree_list (fn, targs);\n   if (!push_tinst_level (tinst))\n     {\n@@ -14640,23 +14653,10 @@ fn_type_unification (tree fn,\n \t specified template argument values.  If a substitution in a\n \t template parameter or in the function type of the function\n \t template results in an invalid type, type deduction fails.  */\n-      tree tparms = DECL_INNERMOST_TEMPLATE_PARMS (fn);\n       int i, len = TREE_VEC_LENGTH (tparms);\n       location_t loc = input_location;\n-      tree converted_args;\n       bool incomplete = false;\n \n-      if (explicit_targs == error_mark_node)\n-\tgoto fail;\n-\n-      converted_args\n-\t= (coerce_template_parms (tparms, explicit_targs, NULL_TREE,\n-\t\t\t\t  complain,\n-\t\t\t\t   /*require_all_args=*/false,\n-\t\t\t\t   /*use_default_args=*/false));\n-      if (converted_args == error_mark_node)\n-\tgoto fail;\n-\n       /* Substitute the explicit args into the function type.  This is\n \t necessary so that, for instance, explicitly declared function\n \t arguments can match null pointed constants.  If we were given\n@@ -14667,7 +14667,7 @@ fn_type_unification (tree fn,\n         {\n           tree parm = TREE_VALUE (TREE_VEC_ELT (tparms, i));\n           bool parameter_pack = false;\n-\t  tree targ = TREE_VEC_ELT (converted_args, i);\n+\t  tree targ = TREE_VEC_ELT (explicit_targs, i);\n \n           /* Dig out the actual parm.  */\n           if (TREE_CODE (parm) == TYPE_DECL\n@@ -14705,7 +14705,7 @@ fn_type_unification (tree fn,\n \n       processing_template_decl += incomplete;\n       input_location = DECL_SOURCE_LOCATION (fn);\n-      fntype = tsubst (TREE_TYPE (fn), converted_args,\n+      fntype = tsubst (TREE_TYPE (fn), explicit_targs,\n \t\t       complain | tf_partial, NULL_TREE);\n       input_location = loc;\n       processing_template_decl -= incomplete;\n@@ -14714,8 +14714,8 @@ fn_type_unification (tree fn,\n \tgoto fail;\n \n       /* Place the explicitly specified arguments in TARGS.  */\n-      for (i = NUM_TMPL_ARGS (converted_args); i--;)\n-\tTREE_VEC_ELT (targs, i) = TREE_VEC_ELT (converted_args, i);\n+      for (i = NUM_TMPL_ARGS (explicit_targs); i--;)\n+\tTREE_VEC_ELT (targs, i) = TREE_VEC_ELT (explicit_targs, i);\n     }\n \n   /* Never do unification on the 'this' parameter.  */"}, {"sha": "1c0bde0751fe785114da6a544641fcc38a54cd1f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92383a2a11f08a62afeda2b372f78ddc7241d4d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92383a2a11f08a62afeda2b372f78ddc7241d4d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92383a2a11f08a62afeda2b372f78ddc7241d4d6", "patch": "@@ -1,3 +1,8 @@\n+2012-09-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/54437\n+\t* g++.dg/template/access24.C: New.\n+\n 2012-09-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/54458"}, {"sha": "9f192266ec7c251bab895c0f70e21e4768f63d3a", "filename": "gcc/testsuite/g++.dg/template/access24.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92383a2a11f08a62afeda2b372f78ddc7241d4d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92383a2a11f08a62afeda2b372f78ddc7241d4d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess24.C?ref=92383a2a11f08a62afeda2b372f78ddc7241d4d6", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/54437\n+\n+template <void (*P)()> void f();\n+class A {\n+  template <class T> static void g();\n+  template <class T> static void h () { f<g<T> >(); }\n+  static void i() { h<int>(); }\n+};"}]}