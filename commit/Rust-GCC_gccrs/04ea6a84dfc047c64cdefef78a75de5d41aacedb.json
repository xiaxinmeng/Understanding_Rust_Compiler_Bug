{"sha": "04ea6a84dfc047c64cdefef78a75de5d41aacedb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRlYTZhODRkZmMwNDdjNjRjZGVmZWY3OGE3NWRlNWQ0MWFhY2VkYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T21:31:49Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T21:31:49Z"}, "message": "(LIBCALL_VALUE): Handle XFmode.\n\n(PRINT_OPERAND, ASM_OUTPUT_DOUBLE): Use REAL_VALUE... macros.\n\nFrom-SVN: r3975", "tree": {"sha": "08ec8496846a47fb2dcaac4ed48b59d76d63e023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08ec8496846a47fb2dcaac4ed48b59d76d63e023"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04ea6a84dfc047c64cdefef78a75de5d41aacedb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ea6a84dfc047c64cdefef78a75de5d41aacedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ea6a84dfc047c64cdefef78a75de5d41aacedb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ea6a84dfc047c64cdefef78a75de5d41aacedb/comments", "author": null, "committer": null, "parents": [{"sha": "e86c153f461b245c47aabba13c1d7e334bd40227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86c153f461b245c47aabba13c1d7e334bd40227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e86c153f461b245c47aabba13c1d7e334bd40227"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "b23bb40bb6b651f8a70d2f8da704cae31a8c7fe7", "filename": "gcc/config/m68k/news.h", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ea6a84dfc047c64cdefef78a75de5d41aacedb/gcc%2Fconfig%2Fm68k%2Fnews.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ea6a84dfc047c64cdefef78a75de5d41aacedb/gcc%2Fconfig%2Fm68k%2Fnews.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnews.h?ref=04ea6a84dfc047c64cdefef78a75de5d41aacedb", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  SONY NEWS-OS 4 version.\n-   Copyright (C) 1987, 1989 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1989, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -120,8 +120,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #define FUNCTION_VALUE(VALTYPE,FUNC) LIBCALL_VALUE (TYPE_MODE (VALTYPE))\n \n-#define LIBCALL_VALUE(MODE) \\\n- gen_rtx (REG, (MODE), ((TARGET_68881 && ((MODE) == SFmode || (MODE) == DFmode)) ? 16 : 0))\n+#define LIBCALL_VALUE(MODE)\t\t\t\t\t\t   \\\n+ gen_rtx (REG, (MODE),\t\t\t\t\t\t\t   \\\n+\t  ((TARGET_68881\t\t\t\t\t\t   \\\n+\t    && ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode)) \\\n+\t   ? 16 : 0))\n \n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n   fprintf (FILE, \"\\t.align %d\\n\", (LOG))\n@@ -258,7 +261,10 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   fprintf (FILE, \"\\tmove.l (sp)+,%s\\n\", reg_names[REGNO])\n   \n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\t.double 0d%.20e\\n\", (VALUE))\n+do { char dstr[30];\t\t\t\t\t\\\n+     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n+     fprintf (FILE, \"\\t.double 0d%s\\n\", dstr);\t\t\\\n+   } while (0)\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n   fprintf (FILE, \"\\t.space %u\\n\", (SIZE))\n@@ -299,18 +305,27 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n     output_address (XEXP (X, 0));\t\t\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == SFmode)\t\\\n-    { union { double d; int i[2]; } u;\t\t\t\t\t\\\n-      union { float f; int i; } u1;\t\t\t\t\t\\\n-      u.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X);\t\\\n-      u1.f = u.d;\t\t\t\t\t\t\t\\\n+    { REAL_VALUE_TYPE r;\t\t\t\t\t\t\\\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n       if (CODE == 'f')\t\t\t\t\t\t\t\\\n-        fprintf (FILE, \"#0f%.9e\", u1.f);\t\t\t\t\\\n+        { char dstr[30];\t\t\t\t\t\t\\\n+          REAL_VALUE_TO_DECIMAL (r, \"%.9e\", dstr);\t\t\t\\\n+          fprintf (FILE, \"#0f%s\", dstr);\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n-        fprintf (FILE, \"#0x%x\", u1.i); }\t\t\t\t\\\n+        { long l;\t\t\t\t\t\t\t\\\n+          REAL_VALUE_TO_TARGET_SINGLE (r, l);\t\t\t\t\\\n+          fprintf (FILE, \"#0x%x\", l);\t\t\t\t\t\\\n+        }}\t\t\t\t\t\t\t\t\\\n+  else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) == XFmode)\t\\\n+    { REAL_VALUE_TYPE r;\t\t\t\t\t\t\\\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n+      ASM_OUTPUT_LONG_DOUBLE_OPERAND (FILE, r); }\t\t\t\\\n   else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != DImode)\t\\\n-    { union { double d; int i[2]; } u;\t\t\t\t\t\\\n-      u.i[0] = CONST_DOUBLE_LOW (X); u.i[1] = CONST_DOUBLE_HIGH (X);\t\\\n-      fprintf (FILE, \"#0d%.20e\", u.d); }\t\t\t\t\\\n+    { REAL_VALUE_TYPE r; char dstr[30];\t\t\t\t\t\\\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n+      REAL_VALUE_TO_DECIMAL (r, \"%.20e\", dstr );\t\t\t\\\n+      fprintf (FILE, \"#0d%s\", dstr); }\t\t\t\t\t\\\n   else if (CODE == 'b') output_addr_const (FILE, X);\t\t\t\\\n   else { putc ('#', FILE); output_addr_const (FILE, X); }}\n "}]}