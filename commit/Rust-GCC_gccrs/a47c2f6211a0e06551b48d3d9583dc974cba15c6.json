{"sha": "a47c2f6211a0e06551b48d3d9583dc974cba15c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3YzJmNjIxMWEwZTA2NTUxYjQ4ZDNkOTU4M2RjOTc0Y2JhMTVjNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-11-23T16:28:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-11-23T16:28:57Z"}, "message": "re PR c++/58868 (ICE: in count_type_elements, at expr.c:5495 with -std=gnu++0x)\n\n\tPR c++/58868\n\t* init.c (build_aggr_init): Don't clobber the type of init\n\tif we got an INIT_EXPR back from build_vec_init.\n\t(build_vec_init): Do digest_init on trivial initialization.\n\nFrom-SVN: r205311", "tree": {"sha": "fe88b77103125e1a1abe4ee28288cae23bdef9be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe88b77103125e1a1abe4ee28288cae23bdef9be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a47c2f6211a0e06551b48d3d9583dc974cba15c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a47c2f6211a0e06551b48d3d9583dc974cba15c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a47c2f6211a0e06551b48d3d9583dc974cba15c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a47c2f6211a0e06551b48d3d9583dc974cba15c6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f391b44b199e27712c15ea880f54f41cd11f34e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f391b44b199e27712c15ea880f54f41cd11f34e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f391b44b199e27712c15ea880f54f41cd11f34e3"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "91e4132907b9ca64c0c12785f4782446af7f3d45", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a47c2f6211a0e06551b48d3d9583dc974cba15c6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a47c2f6211a0e06551b48d3d9583dc974cba15c6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a47c2f6211a0e06551b48d3d9583dc974cba15c6", "patch": "@@ -1,3 +1,10 @@\n+2013-11-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/58868\n+\t* init.c (build_aggr_init): Don't clobber the type of init\n+\tif we got an INIT_EXPR back from build_vec_init.\n+\t(build_vec_init): Do digest_init on trivial initialization.\n+\n 2013-11-23  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \n \tPR c++/58525"}, {"sha": "1e6e6915bdcb07682f2414f7fc078bdf6ad63e9e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a47c2f6211a0e06551b48d3d9583dc974cba15c6/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a47c2f6211a0e06551b48d3d9583dc974cba15c6/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a47c2f6211a0e06551b48d3d9583dc974cba15c6", "patch": "@@ -1507,7 +1507,8 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n       TREE_READONLY (exp) = was_const;\n       TREE_THIS_VOLATILE (exp) = was_volatile;\n       TREE_TYPE (exp) = type;\n-      if (init)\n+      /* Restore the type of init unless it was used directly.  */\n+      if (init && TREE_CODE (stmt_expr) != INIT_EXPR)\n \tTREE_TYPE (init) = itype;\n       return stmt_expr;\n     }\n@@ -3421,6 +3422,8 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t brace-enclosed initializers.  In this case, digest_init and\n \t store_constructor will handle the semantics for us.  */\n \n+      if (BRACE_ENCLOSED_INITIALIZER_P (init))\n+\tinit = digest_init (atype, init, complain);\n       stmt_expr = build2 (INIT_EXPR, atype, base, init);\n       if (length_check)\n \tstmt_expr = build3 (COND_EXPR, atype, length_check,"}]}