{"sha": "fbe457feb7091d5a75374b8eec4695bf13c7819a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlNDU3ZmViNzA5MWQ1YTc1Mzc0YjhlZWM0Njk1YmYxM2M3ODE5YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-21T22:39:36Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-21T22:39:36Z"}, "message": "debug/elf: handle Alpha relocs\n    \n    Patch by Uros Bizjak.\n    \n    Reviewed-on: https://go-review.googlesource.com/46391\n\nFrom-SVN: r249487", "tree": {"sha": "a0442ebbad6120db14eb2d83374b1304e57b286e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0442ebbad6120db14eb2d83374b1304e57b286e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbe457feb7091d5a75374b8eec4695bf13c7819a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe457feb7091d5a75374b8eec4695bf13c7819a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe457feb7091d5a75374b8eec4695bf13c7819a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe457feb7091d5a75374b8eec4695bf13c7819a/comments", "author": null, "committer": null, "parents": [{"sha": "36f1a35f6931f67f7daec5aa7803a6475e8087ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f1a35f6931f67f7daec5aa7803a6475e8087ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f1a35f6931f67f7daec5aa7803a6475e8087ca"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "96cf627eff34f74dbc6e08bbd24c51525a210389", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe457feb7091d5a75374b8eec4695bf13c7819a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe457feb7091d5a75374b8eec4695bf13c7819a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=fbe457feb7091d5a75374b8eec4695bf13c7819a", "patch": "@@ -1,4 +1,4 @@\n-0b93af68feb0a4135e83dd9e6c11df1563d862a9\n+dac4bb4f4ed8e7f2939d45439048dec2f6db14cf\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "c493f2a0562892341591b768f8574485ecb66e6b", "filename": "libgo/go/debug/elf/file.go", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe457feb7091d5a75374b8eec4695bf13c7819a/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe457feb7091d5a75374b8eec4695bf13c7819a/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go?ref=fbe457feb7091d5a75374b8eec4695bf13c7819a", "patch": "@@ -602,6 +602,8 @@ func (f *File) applyRelocations(dst []byte, rels []byte) error {\n \t\treturn f.applyRelocationss390x(dst, rels)\n \tcase f.Class == ELFCLASS64 && f.Machine == EM_SPARCV9:\n \t\treturn f.applyRelocationsSPARC64(dst, rels)\n+\tcase f.Class == ELFCLASS64 && f.Machine == EM_ALPHA:\n+\t\treturn f.applyRelocationsALPHA(dst, rels)\n \tdefault:\n \t\treturn errors.New(\"applyRelocations: not implemented\")\n \t}\n@@ -1049,6 +1051,55 @@ func (f *File) applyRelocationsSPARC64(dst []byte, rels []byte) error {\n \treturn nil\n }\n \n+func (f *File) applyRelocationsALPHA(dst []byte, rels []byte) error {\n+\t// 24 is the size of Rela64.\n+\tif len(rels)%24 != 0 {\n+\t\treturn errors.New(\"length of relocation section is not a multiple of 24\")\n+\t}\n+\n+\tsymbols, _, err := f.getSymbols(SHT_SYMTAB)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tb := bytes.NewReader(rels)\n+\tvar rela Rela64\n+\n+\tfor b.Len() > 0 {\n+\t\tbinary.Read(b, f.ByteOrder, &rela)\n+\t\tsymNo := rela.Info >> 32\n+\t\tt := R_ALPHA(rela.Info & 0xffff)\n+\n+\t\tif symNo == 0 || symNo > uint64(len(symbols)) {\n+\t\t\tcontinue\n+\t\t}\n+\t\tsym := &symbols[symNo-1]\n+\t\tif SymType(sym.Info&0xf) != STT_SECTION {\n+\t\t\t// We don't handle non-section relocations for now.\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\t// There are relocations, so this must be a normal\n+\t\t// object file, and we only look at section symbols,\n+\t\t// so we assume that the symbol value is 0.\n+\n+\t\tswitch t {\n+\t\tcase R_ALPHA_REFQUAD:\n+\t\t\tif rela.Off+8 >= uint64(len(dst)) || rela.Addend < 0 {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tf.ByteOrder.PutUint64(dst[rela.Off:rela.Off+8], uint64(rela.Addend))\n+\t\tcase R_ALPHA_REFLONG:\n+\t\t\tif rela.Off+4 >= uint64(len(dst)) || rela.Addend < 0 {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tf.ByteOrder.PutUint32(dst[rela.Off:rela.Off+4], uint32(rela.Addend))\n+\t\t}\n+\t}\n+\n+\treturn nil\n+}\n+\n func (f *File) DWARF() (*dwarf.Data, error) {\n \t// sectionData gets the data for s, checks its size, and\n \t// applies any applicable relations."}]}