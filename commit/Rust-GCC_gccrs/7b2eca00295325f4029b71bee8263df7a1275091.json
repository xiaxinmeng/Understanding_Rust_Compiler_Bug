{"sha": "7b2eca00295325f4029b71bee8263df7a1275091", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IyZWNhMDAyOTUzMjVmNDAyOWI3MWJlZTgyNjNkZjdhMTI3NTA5MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-12-02T14:50:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-12-02T14:50:32Z"}, "message": "tree.h (tree_invariant_p): Declare.\n\n2015-12-02  Richard Biener  <rguenther@suse.de>\n\n\t* tree.h (tree_invariant_p): Declare.\n\t* tree.c (tree_invariant_p): Export.\n\t* genmatch.c (dt_simplify::gen_1): For GENERIC code-gen never\n\tcreate SAVE_EXPRs but reject patterns if we would need to.\n\nFrom-SVN: r231178", "tree": {"sha": "586bfb9ddbef4ac08f6963d13fa8e8c76959d631", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/586bfb9ddbef4ac08f6963d13fa8e8c76959d631"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b2eca00295325f4029b71bee8263df7a1275091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b2eca00295325f4029b71bee8263df7a1275091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b2eca00295325f4029b71bee8263df7a1275091", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b2eca00295325f4029b71bee8263df7a1275091/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "694e5e4baebff76320ecbb0c119bc086126c4095", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694e5e4baebff76320ecbb0c119bc086126c4095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/694e5e4baebff76320ecbb0c119bc086126c4095"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "68e4f81fc40d179447adbbc2d86a5b7b85bd36ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2eca00295325f4029b71bee8263df7a1275091/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2eca00295325f4029b71bee8263df7a1275091/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b2eca00295325f4029b71bee8263df7a1275091", "patch": "@@ -1,3 +1,10 @@\n+2015-12-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree.h (tree_invariant_p): Declare.\n+\t* tree.c (tree_invariant_p): Export.\n+\t* genmatch.c (dt_simplify::gen_1): For GENERIC code-gen never\n+\tcreate SAVE_EXPRs but reject patterns if we would need to.\n+\n 2015-12-02  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call)"}, {"sha": "ef39cb0f32b2810c07d7a5fa78421eaded55598a", "filename": "gcc/genmatch.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2eca00295325f4029b71bee8263df7a1275091/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2eca00295325f4029b71bee8263df7a1275091/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=7b2eca00295325f4029b71bee8263df7a1275091", "patch": "@@ -3119,8 +3119,8 @@ dt_simplify::gen_1 (FILE *f, int indent, bool gimple, operand *result)\n \t\tif (cinfo.info[i].result_use_count\n \t\t    > cinfo.info[i].match_use_count)\n \t\t  fprintf_indent (f, indent,\n-\t\t\t\t  \"captures[%d] = save_expr (captures[%d]);\\n\",\n-\t\t\t\t  i, i);\n+\t\t\t\t  \"if (! tree_invariant_p (captures[%d])) \"\n+\t\t\t\t  \"return NULL_TREE;\\n\", i);\n \t      }\n \t  for (unsigned j = 0; j < e->ops.length (); ++j)\n \t    {"}, {"sha": "587bd7457df3a7fb3b03dfa378f86f02171aa0ff", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2eca00295325f4029b71bee8263df7a1275091/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2eca00295325f4029b71bee8263df7a1275091/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7b2eca00295325f4029b71bee8263df7a1275091", "patch": "@@ -3231,8 +3231,6 @@ decl_address_ip_invariant_p (const_tree op)\n    not handle arithmetic; that's handled in skip_simple_arithmetic and\n    tree_invariant_p).  */\n \n-static bool tree_invariant_p (tree t);\n-\n static bool\n tree_invariant_p_1 (tree t)\n {\n@@ -3282,7 +3280,7 @@ tree_invariant_p_1 (tree t)\n \n /* Return true if T is function-invariant.  */\n \n-static bool\n+bool\n tree_invariant_p (tree t)\n {\n   tree inner = skip_simple_arithmetic (t);"}, {"sha": "a60e9dd31cbd796cdb1c9c8ae59a2b2ef332fe26", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2eca00295325f4029b71bee8263df7a1275091/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2eca00295325f4029b71bee8263df7a1275091/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7b2eca00295325f4029b71bee8263df7a1275091", "patch": "@@ -4320,6 +4320,10 @@ extern tree staticp (tree);\n \n extern tree save_expr (tree);\n \n+/* Return true if T is function-invariant.  */\n+\n+extern bool tree_invariant_p (tree);\n+\n /* Look inside EXPR into any simple arithmetic operations.  Return the\n    outermost non-arithmetic or non-invariant node.  */\n "}]}