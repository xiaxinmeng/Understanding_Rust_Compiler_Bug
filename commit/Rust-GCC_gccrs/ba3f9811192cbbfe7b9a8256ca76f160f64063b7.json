{"sha": "ba3f9811192cbbfe7b9a8256ca76f160f64063b7", "node_id": "C_kwDOANBUbNoAKGJhM2Y5ODExMTkyY2JiZmU3YjlhODI1NmNhNzZmMTYwZjY0MDYzYjc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-05-10T09:48:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-10T09:48:38Z"}, "message": "Merge #1238\n\n1238: Assigning members to structures is a coercion site r=philberty a=philberty\n\nFix missing coercion site call which allows the coecion of a reference to\r\na pointer type.\r\n\r\nFixes #1235\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "de0498cc21dc34afecf0f96e367915f33cf663fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de0498cc21dc34afecf0f96e367915f33cf663fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba3f9811192cbbfe7b9a8256ca76f160f64063b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiejT2CRBK7hj4Ov3rIwAA+ooIAGbclvGKRJr+7/N1mzSC21Ga\n2r0kNA/Q477QKI8qHFnaGY9mkuY9ib1C5fQsHiRW6Jpvrf7uXxbQJEkresCrJLCr\n0ZH05n1TUobHHRtm84co8U9vgvFmWg4HQTLv3lR/vRvviC5FrJBDaKbvV+EKZqCP\n9eYyCOLSlVXDgyx6RXxYSI08iCjRK+uGteSJW+zZd+D/fLzUhQJkzHZThBc66BFx\nJdzQctNvWS1Dl2cUGkTzaQy9q1mFr9aiMPZS3Ond7RCHLrxXqddL5TPiIOnDy4Vf\nP8+b6kLtaeHm161rx69oDAMRzpGeXuDRsAc+DI/i/JVbD1tFABlBUDeJU/UZjh4=\n=BTkU\n-----END PGP SIGNATURE-----\n", "payload": "tree de0498cc21dc34afecf0f96e367915f33cf663fd\nparent 8d828e4b301a52e43246176848ae8869dd26255c\nparent d1a2508778aafeaf19ae7e6c3e50cf9aed384854\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1652176118 +0000\ncommitter GitHub <noreply@github.com> 1652176118 +0000\n\nMerge #1238\n\n1238: Assigning members to structures is a coercion site r=philberty a=philberty\n\nFix missing coercion site call which allows the coecion of a reference to\r\na pointer type.\r\n\r\nFixes #1235\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3f9811192cbbfe7b9a8256ca76f160f64063b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba3f9811192cbbfe7b9a8256ca76f160f64063b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba3f9811192cbbfe7b9a8256ca76f160f64063b7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d828e4b301a52e43246176848ae8869dd26255c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d828e4b301a52e43246176848ae8869dd26255c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d828e4b301a52e43246176848ae8869dd26255c"}, {"sha": "d1a2508778aafeaf19ae7e6c3e50cf9aed384854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a2508778aafeaf19ae7e6c3e50cf9aed384854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a2508778aafeaf19ae7e6c3e50cf9aed384854"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "a1cd35977ab2ce4f2e845cc40bf0be071346ae54", "filename": "gcc/rust/typecheck/rust-hir-type-check-struct.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba3f9811192cbbfe7b9a8256ca76f160f64063b7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba3f9811192cbbfe7b9a8256ca76f160f64063b7/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct.cc?ref=ba3f9811192cbbfe7b9a8256ca76f160f64063b7", "patch": "@@ -44,7 +44,7 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n \t= TypeCheckExpr::Resolve (struct_expr.struct_base->base_struct.get (),\n \t\t\t\t  false);\n       struct_def\n-\t= (TyTy::ADTType *) struct_path_resolved->unify (base_resolved);\n+\t= (TyTy::ADTType *) struct_path_resolved->coerce (base_resolved);\n       if (struct_def == nullptr)\n \t{\n \t  rust_fatal_error (struct_expr.struct_base->base_struct->get_locus (),\n@@ -222,7 +222,7 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifierValue &field)\n     }\n \n   TyTy::BaseType *value = TypeCheckExpr::Resolve (field.get_value (), false);\n-  resolved_field_value_expr = field_type->get_field_type ()->unify (value);\n+  resolved_field_value_expr = field_type->get_field_type ()->coerce (value);\n   if (resolved_field_value_expr != nullptr)\n     {\n       fields_assigned.insert (field.field_name);\n@@ -251,7 +251,7 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIndexValue &field)\n     }\n \n   TyTy::BaseType *value = TypeCheckExpr::Resolve (field.get_value (), false);\n-  resolved_field_value_expr = field_type->get_field_type ()->unify (value);\n+  resolved_field_value_expr = field_type->get_field_type ()->coerce (value);\n   if (resolved_field_value_expr != nullptr)\n     {\n       fields_assigned.insert (field_name);\n@@ -285,7 +285,7 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifier &field)\n \t\t\t    field.get_locus ());\n   TyTy::BaseType *value = TypeCheckExpr::Resolve (&expr, false);\n \n-  resolved_field_value_expr = field_type->get_field_type ()->unify (value);\n+  resolved_field_value_expr = field_type->get_field_type ()->coerce (value);\n   if (resolved_field_value_expr != nullptr)\n \n     {"}, {"sha": "098b337455fe0c5049769a9ada0ea7326c7c842b", "filename": "gcc/testsuite/rust/compile/issue-1235.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba3f9811192cbbfe7b9a8256ca76f160f64063b7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1235.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba3f9811192cbbfe7b9a8256ca76f160f64063b7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1235.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1235.rs?ref=ba3f9811192cbbfe7b9a8256ca76f160f64063b7", "patch": "@@ -0,0 +1,21 @@\n+// { dg-additional-options \"-w\" }\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n+}\n+\n+pub union Repr<T> {\n+    rust: *const [T],\n+    rust_mut: *mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+impl<T> [T] {\n+    pub const fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+\n+    pub const fn len(&self) -> usize {\n+        unsafe { Repr { rust: self }.raw.len }\n+    }\n+}"}]}