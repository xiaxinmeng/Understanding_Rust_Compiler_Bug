{"sha": "8e0952f07501034235d2e961e828178279b260a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUwOTUyZjA3NTAxMDM0MjM1ZDJlOTYxZTgyODE3ODI3OWIyNjBhMg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-23T00:52:24Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-23T00:52:24Z"}, "message": "builtins.c (expand_builtin_mathfn_2): Use tree_cons to build up the stabilized argument list, not build_tree_list.\n\n\n\t* builtins.c (expand_builtin_mathfn_2): Use tree_cons to build\n\tup the stabilized argument list, not build_tree_list.\n\t(expand_builtin_strcpy): Construct new argument list manually\n\tinstead of using chainon to modify the original argument list.\n\t(expand_builtin_stpcpy): Construct new argument list manually\n\tinstead of using copy_list and chainon.\n\t(expand_builtin_sprintf): New function.  Optimize calls to\n\tsprintf when the format is \"%s\" or doesn't contain a '%'.\n\t(expand_builtin): Expand BUILT_IN_SPRINTF using the new function\n\texpand_builtin_sprintf.\n\n\t* gcc.c-torture/execute/string-opt-16.c: New test case.\n\nFrom-SVN: r68355", "tree": {"sha": "1426ab031739ec03175dcc57750e3ad65651664e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1426ab031739ec03175dcc57750e3ad65651664e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e0952f07501034235d2e961e828178279b260a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e0952f07501034235d2e961e828178279b260a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e0952f07501034235d2e961e828178279b260a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e0952f07501034235d2e961e828178279b260a2/comments", "author": null, "committer": null, "parents": [{"sha": "fb87ad5d04fddc9eacaabc36360cfcc3978bcdee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb87ad5d04fddc9eacaabc36360cfcc3978bcdee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb87ad5d04fddc9eacaabc36360cfcc3978bcdee"}], "stats": {"total": 236, "additions": 226, "deletions": 10}, "files": [{"sha": "a35f9616597d427b158b647a9d3c08a688813ebc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0952f07501034235d2e961e828178279b260a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0952f07501034235d2e961e828178279b260a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e0952f07501034235d2e961e828178279b260a2", "patch": "@@ -1,3 +1,16 @@\n+2003-06-22  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (expand_builtin_mathfn_2): Use tree_cons to build\n+\tup the stabilized argument list, not build_tree_list.\n+\t(expand_builtin_strcpy): Construct new argument list manually\n+\tinstead of using chainon to modify the original argument list.\n+\t(expand_builtin_stpcpy): Construct new argument list manually\n+\tinstead of using copy_list and chainon.\n+\t(expand_builtin_sprintf): New function.  Optimize calls to\n+\tsprintf when the format is \"%s\" or doesn't contain a '%'.\n+\t(expand_builtin): Expand BUILT_IN_SPRINTF using the new function\n+\texpand_builtin_sprintf.\n+\n 2003-06-22  Andreas Schwab  <schwab@suse.de>\n \n \t* function.c (set_insn_locators): Mark as unused."}, {"sha": "80a06f7e92e4601a4820bd9421429139fc04d9d5", "filename": "gcc/builtins.c", "status": "modified", "additions": 114, "deletions": 10, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0952f07501034235d2e961e828178279b260a2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0952f07501034235d2e961e828178279b260a2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8e0952f07501034235d2e961e828178279b260a2", "patch": "@@ -141,6 +141,7 @@ static rtx expand_builtin_alloca (tree, rtx);\n static rtx expand_builtin_unop (enum machine_mode, tree, rtx, rtx, optab);\n static rtx expand_builtin_frame_address (tree, tree);\n static rtx expand_builtin_fputs (tree, int, int);\n+static rtx expand_builtin_sprintf (tree, rtx, enum machine_mode);\n static tree stabilize_va_list (tree, int);\n static rtx expand_builtin_expect (tree, rtx);\n static tree fold_builtin_constant_p (tree);\n@@ -1891,13 +1892,13 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n \tcase SAVE_EXPR:\n \tcase REAL_CST:\n \t  if (! stable)\n-\t    arglist = build_tree_list (temp, arg0);\n+\t    arglist = tree_cons (NULL_TREE, arg0, temp);\n \t  break;\n \n \tdefault:\n \t  stable = false;\n \t  arg0 = save_expr (arg0);\n-\t  arglist = build_tree_list (temp, arg0);\n+\t  arglist = tree_cons (NULL_TREE, arg0, temp);\n \t  break;\n \t}\n \n@@ -2529,7 +2530,7 @@ expand_builtin_bcopy (tree arglist)\n static rtx\n expand_builtin_strcpy (tree arglist, rtx target, enum machine_mode mode)\n {\n-  tree fn, len;\n+  tree fn, len, src, dst;\n \n   if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     return 0;\n@@ -2538,12 +2539,16 @@ expand_builtin_strcpy (tree arglist, rtx target, enum machine_mode mode)\n   if (!fn)\n     return 0;\n \n-  len = c_strlen (TREE_VALUE (TREE_CHAIN (arglist)));\n+  src = TREE_VALUE (TREE_CHAIN (arglist));\n+  len = c_strlen (src);\n   if (len == 0)\n     return 0;\n \n+  dst = TREE_VALUE (arglist);\n   len = size_binop (PLUS_EXPR, len, ssize_int (1));\n-  chainon (arglist, build_tree_list (NULL_TREE, len));\n+  arglist = build_tree_list (NULL_TREE, len);\n+  arglist = tree_cons (NULL_TREE, src, arglist);\n+  arglist = tree_cons (NULL_TREE, dst, arglist);\n   return expand_expr (build_function_call_expr (fn, arglist),\n \t\t      target, mode, EXPAND_NORMAL);\n }\n@@ -2560,8 +2565,7 @@ expand_builtin_stpcpy (tree arglist, rtx target, enum machine_mode mode)\n     return 0;\n   else\n     {\n-      tree newarglist;\n-      tree src, len;\n+      tree dst, src, len;\n \n       /* If return value is ignored, transform stpcpy into strcpy.  */\n       if (target == const0_rtx)\n@@ -2582,10 +2586,12 @@ expand_builtin_stpcpy (tree arglist, rtx target, enum machine_mode mode)\n       if (! c_getstr (src) || ! (len = c_strlen (src)))\n \treturn 0;\n \n+      dst = TREE_VALUE (arglist);\n       len = fold (size_binop (PLUS_EXPR, len, ssize_int (1)));\n-      newarglist = copy_list (arglist);\n-      chainon (newarglist, build_tree_list (NULL_TREE, len));\n-      return expand_builtin_mempcpy (newarglist, target, mode, /*endp=*/2);\n+      arglist = build_tree_list (NULL_TREE, len);\n+      arglist = tree_cons (NULL_TREE, src, arglist);\n+      arglist = tree_cons (NULL_TREE, dst, arglist);\n+      return expand_builtin_mempcpy (arglist, target, mode, /*endp=*/2);\n     }\n }\n \n@@ -4259,6 +4265,97 @@ expand_builtin_cabs (tree arglist, rtx target)\n   return expand_complex_abs (mode, op0, target, 0);\n }\n \n+/* Expand a call to sprintf with argument list ARGLIST.  Return 0 if\n+   a normal call should be emitted rather than expanding the function\n+   inline.  If convenient, the result should be placed in TARGET with\n+   mode MODE.  */\n+\n+static rtx\n+expand_builtin_sprintf (tree arglist, rtx target, enum machine_mode mode)\n+{\n+  tree dest, fmt, stripped;\n+  tree orig_arglist;\n+\n+  orig_arglist = arglist;\n+\n+  /* Verify the required arguments in the original call.  */\n+  if (! arglist)\n+    return 0;\n+  dest = TREE_VALUE (arglist);\n+  if (TREE_CODE (TREE_TYPE (dest)) != POINTER_TYPE)\n+    return 0;\n+  arglist = TREE_CHAIN (arglist);\n+  if (! arglist)\n+    return 0;\n+  fmt = TREE_VALUE (arglist);\n+  if (TREE_CODE (TREE_TYPE (dest)) != POINTER_TYPE)\n+    return 0;\n+  arglist = TREE_CHAIN (arglist);\n+\n+  /* Check whether the format is a literal string constant.  */\n+  stripped = fmt;\n+  STRIP_NOPS (stripped);\n+  if (stripped && TREE_CODE (stripped) == ADDR_EXPR)\n+    stripped = TREE_OPERAND (stripped, 0);\n+  if (TREE_CODE (stripped) != STRING_CST)\n+    return 0;\n+\n+  /* If the format doesn't contain % args or %%, use strcpy.  */\n+  if (strchr (TREE_STRING_POINTER (stripped), '%') == 0)\n+    {\n+      tree fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n+      tree exp;\n+\n+      if (arglist || !fn)\n+\treturn 0;\n+      expand_expr (build_function_call_expr (fn, orig_arglist),\n+\t\t   const0_rtx, VOIDmode, EXPAND_NORMAL);\n+      if (target == const0_rtx)\n+\treturn const0_rtx;\n+      exp = build_int_2 (TREE_STRING_LENGTH (stripped) - 1, 0);\n+      exp = fold (build1 (NOP_EXPR, integer_type_node, exp));\n+      return expand_expr (exp, target, mode, EXPAND_NORMAL);\n+    }\n+  /* If the format is \"%s\", use strcpy and possibly strlen.  */\n+  else if (strcmp (TREE_STRING_POINTER (stripped), \"%s\") == 0)\n+    {\n+      tree strcpy_fn, strlen_fn, exp, arg;\n+      strcpy_fn = implicit_built_in_decls[BUILT_IN_STRCPY];\n+\n+      if (! strcpy_fn)\n+\treturn 0;\n+\n+      if (! arglist || TREE_CHAIN (arglist))\n+\treturn 0;\n+      arg = TREE_VALUE (arglist);\n+      if (TREE_CODE (TREE_TYPE (arg)) != POINTER_TYPE)\n+\treturn 0;\n+\n+      if (target != const0_rtx)\n+\t{\n+\t  strlen_fn = implicit_built_in_decls[BUILT_IN_STRLEN];\n+\t  if (! strlen_fn)\n+\t    return 0;\n+\t  arg = save_expr (arg);\n+\t}\n+      else\n+\tstrlen_fn = 0;\n+\n+      arglist = build_tree_list (NULL_TREE, arg);\n+      arglist = tree_cons (NULL_TREE, dest, arglist);\n+      expand_expr (build_function_call_expr (strcpy_fn, arglist),\n+\t\t   const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\n+      if (target == const0_rtx)\n+\treturn const0_rtx;\n+\n+      exp = build_function_call_expr (strlen_fn, TREE_CHAIN (arglist));\n+      exp = fold (build1 (NOP_EXPR, integer_type_node, exp));\n+      return expand_expr (exp, target, mode, EXPAND_NORMAL);\n+    }\n+\n+  return 0;\n+}\n \f\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n@@ -4323,6 +4420,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       case BUILT_IN_BCOPY:\n       case BUILT_IN_INDEX:\n       case BUILT_IN_RINDEX:\n+      case BUILT_IN_SPRINTF:\n       case BUILT_IN_STPCPY:\n       case BUILT_IN_STRCHR:\n       case BUILT_IN_STRRCHR:\n@@ -4794,6 +4892,12 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \treturn target;\n       break;\n \n+    case BUILT_IN_SPRINTF:\n+      target = expand_builtin_sprintf (arglist, target, mode);\n+      if (target)\n+\treturn target;\n+      break;\n+\n       /* Various hooks for the DWARF 2 __throw routine.  */\n     case BUILT_IN_UNWIND_INIT:\n       expand_builtin_unwind_init ();"}, {"sha": "099c83060e2bd2e578c0a5007dc260087a11f9bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0952f07501034235d2e961e828178279b260a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0952f07501034235d2e961e828178279b260a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e0952f07501034235d2e961e828178279b260a2", "patch": "@@ -1,3 +1,7 @@\n+2003-06-22  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.c-torture/execute/string-opt-16.c: New test case.\n+\n 2003-06-21  Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n         * g++.old-deja/g++.benjamin/16077.C: Add -Wconversion  option."}, {"sha": "82f3c418cd077725fbfb646b183e5ccee454f79e", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-16.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e0952f07501034235d2e961e828178279b260a2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e0952f07501034235d2e961e828178279b260a2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-16.c?ref=8e0952f07501034235d2e961e828178279b260a2", "patch": "@@ -0,0 +1,95 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+\n+   Test sprintf optimizations don't break anything and return the\n+   correct results.\n+\n+   Written by Roger Sayle, June 22, 2003.  */\n+\n+static char buffer[32];\n+\n+extern void abort ();\n+typedef __SIZE_TYPE__ size_t;\n+extern int sprintf(char*, const char*, ...);\n+extern void *memset(void*, int, size_t);\n+extern int memcmp(const void*, const void*, size_t);\n+\n+void test1()\n+{\n+  sprintf(buffer,\"foo\");\n+}\n+\n+int test2()\n+{\n+  return sprintf(buffer,\"foo\");\n+}\n+\n+void test3()\n+{\n+  sprintf(buffer,\"%s\",\"bar\");\n+}\n+\n+int test4()\n+{\n+  return sprintf(buffer,\"%s\",\"bar\");\n+}\n+\n+void test5(char *ptr)\n+{\n+  sprintf(buffer,\"%s\",ptr);\n+}\n+\n+int test6(char *ptr)\n+{\n+  return sprintf(buffer,\"%s\",ptr);\n+}\n+\n+int main()\n+{\n+  memset (buffer, 'A', 32);\n+  test1 ();\n+  if (memcmp(buffer, \"foo\", 4) || buffer[4] != 'A')\n+    abort ();\n+\n+  memset (buffer, 'A', 32);\n+  if (test2 () != 3)\n+    abort ();\n+  if (memcmp(buffer, \"foo\", 4) || buffer[4] != 'A')\n+    abort ();\n+\n+  memset (buffer, 'A', 32);\n+  test3 ();\n+  if (memcmp(buffer, \"bar\", 4) || buffer[4] != 'A')\n+    abort ();\n+\n+  memset (buffer, 'A', 32);\n+  if (test4 () != 3)\n+    abort ();\n+  if (memcmp(buffer, \"bar\", 4) || buffer[4] != 'A')\n+    abort ();\n+\n+  memset (buffer, 'A', 32);\n+  test5 (\"barf\");\n+  if (memcmp(buffer, \"barf\", 5) || buffer[5] != 'A')\n+    abort ();\n+\n+  memset (buffer, 'A', 32);\n+  if (test6 (\"barf\") != 4)\n+    abort ();\n+  if (memcmp(buffer, \"barf\", 5) || buffer[5] != 'A')\n+    abort ();\n+\n+  return 0;\n+}\n+\n+#ifdef __OPTIMIZE__\n+/* When optimizing, all the above cases should be transformed into\n+   something else.  So any remaining calls to the original function\n+   should abort.  */\n+__attribute__ ((noinline))\n+static int\n+sprintf (char *buf, const char *fmt, ...)\n+{\n+  abort ();\n+}\n+#endif\n+"}]}