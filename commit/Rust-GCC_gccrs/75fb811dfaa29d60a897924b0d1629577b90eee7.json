{"sha": "75fb811dfaa29d60a897924b0d1629577b90eee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVmYjgxMWRmYWEyOWQ2MGE4OTc5MjRiMGQxNjI5NTc3YjkwZWVlNw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-03-23T23:55:20Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-03-23T23:59:34Z"}, "message": "Verify the code used for the optimized comparison is valid for the comparison's mode.\n\n\tPR rtl-optimization/90275\n\tPR target/94238\n\tPR target/94144\n\t* simplify-rtx.c (comparison_code_valid_for_mode): New function.\n\t(simplify_logical_relational_operation): Use it.\n\n\tPR target/94144\n\tPR target/94238\n\t* gcc.c-torture/compile/pr94144.c: New test.\n\t* gcc.c-torture/compile/pr94238.c: New test.", "tree": {"sha": "d92865643c0d3d33c9b3db1acdbdb35a651729d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d92865643c0d3d33c9b3db1acdbdb35a651729d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75fb811dfaa29d60a897924b0d1629577b90eee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75fb811dfaa29d60a897924b0d1629577b90eee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75fb811dfaa29d60a897924b0d1629577b90eee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75fb811dfaa29d60a897924b0d1629577b90eee7/comments", "author": null, "committer": null, "parents": [{"sha": "1f6c1c82eb5001a844b5ac535f6aba4a3257031f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6c1c82eb5001a844b5ac535f6aba4a3257031f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6c1c82eb5001a844b5ac535f6aba4a3257031f"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "3b92670395740ba33b14c21058645cb53c896f38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75fb811dfaa29d60a897924b0d1629577b90eee7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75fb811dfaa29d60a897924b0d1629577b90eee7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75fb811dfaa29d60a897924b0d1629577b90eee7", "patch": "@@ -1,3 +1,11 @@\n+2020-03-23  Jeff Law  <law@redhat.com>\n+\n+\tPR rtl-optimization/90275\n+\tPR target/94238\n+\tPR target/94144\n+\t* simplify-rtx.c (comparison_code_valid_for_mode): New function.\n+\t(simplify_logical_relational_operation): Use it.\n+\n 2020-03-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91993"}, {"sha": "28c2dc69ae7de9bbfee8e8590fcbedea55350d98", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75fb811dfaa29d60a897924b0d1629577b90eee7/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75fb811dfaa29d60a897924b0d1629577b90eee7/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=75fb811dfaa29d60a897924b0d1629577b90eee7", "patch": "@@ -2215,6 +2215,53 @@ mask_to_comparison (int mask)\n     }\n }\n \n+/* Return true if CODE is valid for comparisons of mode MODE, false\n+   otherwise.\n+\n+   It is always safe to return false, even if the code was valid for the\n+   given mode as that will merely suppress optimizations.  */\n+\n+static bool\n+comparison_code_valid_for_mode (enum rtx_code code, enum machine_mode mode)\n+{\n+  switch (code)\n+    {\n+      /* These are valid for integral, floating and vector modes.  */\n+      case NE:\n+      case EQ:\n+      case GE:\n+      case GT:\n+      case LE:\n+      case LT:\n+\treturn (INTEGRAL_MODE_P (mode)\n+\t\t|| FLOAT_MODE_P (mode)\n+\t\t|| VECTOR_MODE_P (mode));\n+\n+      /* These are valid for floating point modes.  */\n+      case LTGT:\n+      case UNORDERED:\n+      case ORDERED:\n+      case UNEQ:\n+      case UNGE:\n+      case UNGT:\n+      case UNLE:\n+      case UNLT:\n+\treturn FLOAT_MODE_P (mode);\n+\n+      /* These are filtered out in simplify_logical_operation, but\n+\t we check for them too as a matter of safety.   They are valid\n+\t for integral and vector modes.  */\n+      case GEU:\n+      case GTU:\n+      case LEU:\n+      case LTU:\n+\treturn INTEGRAL_MODE_P (mode) || VECTOR_MODE_P (mode);\n+\n+      default:\n+\tgcc_unreachable ();\n+    }\n+}\n+\t\t\t\t       \n /* Simplify a logical operation CODE with result mode MODE, operating on OP0\n    and OP1, which should be both relational operations.  Return 0 if no such\n    simplification is possible.  */\n@@ -2252,6 +2299,10 @@ simplify_logical_relational_operation (enum rtx_code code, machine_mode mode,\n \n   code = mask_to_comparison (mask);\n \n+  /* Many comparison codes are only valid for certain mode classes.  */\n+  if (!comparison_code_valid_for_mode (code, mode))\n+    return 0;\n+\n   op0 = XEXP (op1, 0);\n   op1 = XEXP (op1, 1);\n "}, {"sha": "28adfd8b580a0e45d6022d8f91819f463544a6a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75fb811dfaa29d60a897924b0d1629577b90eee7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75fb811dfaa29d60a897924b0d1629577b90eee7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75fb811dfaa29d60a897924b0d1629577b90eee7", "patch": "@@ -1,3 +1,10 @@\n+2020-03-23  Jeff Law  <law@redhat.com>\n+\n+\tPR target/94144\n+\tPR target/94238\n+\t* gcc.c-torture/compile/pr94144.c: New test.\n+\t* gcc.c-torture/compile/pr94238.c: New test.\n+\t\n 2020-03-23  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/93805"}, {"sha": "4358e0a7b00f35441329df5c69d6023ef1bd4e97", "filename": "gcc/testsuite/gcc.c-torture/compile/pr94144.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75fb811dfaa29d60a897924b0d1629577b90eee7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr94144.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75fb811dfaa29d60a897924b0d1629577b90eee7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr94144.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr94144.c?ref=75fb811dfaa29d60a897924b0d1629577b90eee7", "patch": "@@ -0,0 +1,18 @@\n+\n+int a, b, z;\n+int c(int d, int e) { return d && e > 0 && d > 5 - e ? 0 : d + e; }\n+int k();\n+void h(int);\n+void f(short d) {\n+  int g = !(0 < d);\n+  h(d);\n+  if (b) {\n+    unsigned i[1];\n+    i[0] = g = 0;\n+    for (; g <= 8; g++)\n+      d || k();\n+    if (c(!(i[0] <= z) >= d, d) != a)\n+      k();\n+  }\n+}\n+"}, {"sha": "5a96a64d85b42f8f537f73327e6fcc4d4c9624f9", "filename": "gcc/testsuite/gcc.c-torture/compile/pr94238.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75fb811dfaa29d60a897924b0d1629577b90eee7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr94238.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75fb811dfaa29d60a897924b0d1629577b90eee7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr94238.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr94238.c?ref=75fb811dfaa29d60a897924b0d1629577b90eee7", "patch": "@@ -0,0 +1,22 @@\n+enum { false, true } a;\n+int b, c, d, e, f;\n+int fn3();\n+void fn2();\n+\n+void fn1() {\n+  _Bool g, h = false, i = false;\n+  int j;\n+  c = b && f || d;\n+  if (c) {\n+    if (d)\n+      i = true;\n+    _Bool k = b;\n+    int l = e, m = a;\n+    g = k && l < m || l > m;\n+  }\n+  if (g)\n+    h = true;\n+  if (i)\n+    fn2();\n+  h &&j &&fn3();\n+}"}]}