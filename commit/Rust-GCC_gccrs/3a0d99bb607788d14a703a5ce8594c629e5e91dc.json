{"sha": "3a0d99bb607788d14a703a5ce8594c629e5e91dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EwZDk5YmI2MDc3ODhkMTRhNzAzYTVjZTg1OTRjNjI5ZTVlOTFkYw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2012-10-26T09:45:46Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2012-10-26T09:45:46Z"}, "message": "ChangeLog/\n        * gcc/common/config/i386/i386-common.c\n        (OPTION_MASK_ISA_FXSR_SET): New.\n        (OPTION_MASK_ISA_XSAVE_SET): Likewise.\n        (OPTION_MASK_ISA_XSAVEOPT_SET): Likewise.\n        (ix86_handle_option): Handle mfxsr, mxsave, mxsaveopt options.\n        * gcc/config.gcc (i[34567]86-*-*): Add fxsrintrin.h,\n        xsaveintrin.h, xsaveoptintrin.h.\n        (x86_64-*-*): Likewise.\n        * config/i386/fxsrintrin.h: New header.\n        * config/i386/xsaveintrin.h: Likewise.\n        * config/i386/xsaveoptintrin.h: Likewise.\n        * gcc/config/i386/driver-i386.c (host_detect_local_cpu): Detect\n        FXSR/XSAVE/XSAVEOPT support.\n        * gcc/config/i386/i386-builtin-types.def\n        (VOID_FTYPE_PVOID_INT64): New function type.\n        * gcc/config/i386/i386-c.c: Define __FXSR__, __XSAVE__\n        and __XSAVEOPT__ if needed.\n        * gcc/config/i386/i386.c (ix86_target_string): Define -mfxsr,\n         -mxsave and -mxsaveopt options.\n        (PTA_FXSR): New.\n        (PTA_XSAVE): Likewise.\n        (PTA_XSAVEOPT): Likewise.\n        (ix86_option_override_internal): Handle new option.\n        (processor_alias_table): Added PTA_FXSR, PTA_XSAVE, PTA_XSAVEOPT.\n        (ix86_valid_target_attribute_inner_p): Add OPT_mfxsr,\n        OPT_mxsave, OPT_mxsaveopt.\n        (ix86_builtins): Add IX86_BUILTIN_FXSAVE, IX86_BUILTIN_FXRSTOR,\n        IX86_BUILTIN_FXSAVE64, IX86_BUILTIN_XSAVE, IX86_BUILTIN_XSAVE64,\n        IX86_BUILTIN_XRSTOR, IX86_BUILTIN_XRSTOR64, IX86_BUILTIN_XSAVEOPT,\n        IX86_BUILTIN_XSAVEOPT64.\n        (ix86_expand_builtin): Handle these built-ins.\n        * gcc/config/i386/i386.h (TARGET_FXSR): New.\n        (TARGET_XSAVE): Likewise.\n        (TARGET_XSAVEOPT): Likewise.\n        * gcc/config/i386/i386.md (ANY_XSAVE): New int iterator.\n        (ANY_XSAVE64): Likewise.\n        (xsave): New int attribute.\n        (fxsave): New instruction.\n        (fxsave64): Likewise.\n        (fxrstor): Likewise.\n        (fxrstor64): Likewise.\n        (<xsave>): Likewise.\n        (<xsave>_rex64): Likewise.\n        (xrstor): Likewise.\n        (xrstor_rex64): Likewise.\n        (xrstor64): Likewise.\n        * gcc/config/i386/i386.opt (mfxsr): New.\n        (mxsave): Likewise.\n        (mxsaveopt): Likewise.\n        * gcc/config/i386/x86intrin.h: Include\n        xsaveintrin.h, fxsrintrin.h, xsaveoptintrin.h.\n\ntestsuite/ChangeLog\n        * gcc.target/i386/fxsave-1.c: New.\n        * gcc.target/i386/fxsave64-1.c: Ditto.\n        * gcc.target/i386/fxrstor-1.c: Ditto.\n        * gcc.target/i386/fxrstor64-1.c: Ditto.\n        * gcc.target/i386/xsave-1.c: Ditto.\n        * gcc.target/i386/xsave64-1.c: Ditto.\n        * gcc.target/i386/xrstor-1.c: Ditto.\n        * gcc.target/i386/xrstor64-1.c: Ditto.\n        * gcc.target/i386/xsaveopt-1.c: Ditto.\n        * gcc.target/i386/xsaveopt64-1.c: Ditto.\n        * gcc.target/i386/sse-12.c: Add -mfxsr, -mxsaveopt.\n        * gcc.target/i386/sse-13.c: Ditto.\n        * gcc.target/i386/sse-14.c: Ditto.\n        * gcc.target/i386/sse-22.c: Ditto.\n        * gcc.target/i386/sse-23.c: Ditto.\n        * g++.dg/other/i386-2.C: Ditto.\n        * g++.dg/other/i386-3.C: Ditto.\n\n\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r192840", "tree": {"sha": "1b96719a7b5555bb3bf9215deb11b80b13b827c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b96719a7b5555bb3bf9215deb11b80b13b827c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a0d99bb607788d14a703a5ce8594c629e5e91dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0d99bb607788d14a703a5ce8594c629e5e91dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0d99bb607788d14a703a5ce8594c629e5e91dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0d99bb607788d14a703a5ce8594c629e5e91dc/comments", "author": null, "committer": null, "parents": [{"sha": "8befc91f0b27417b789a7532bd57cdd7210a3e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8befc91f0b27417b789a7532bd57cdd7210a3e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8befc91f0b27417b789a7532bd57cdd7210a3e07"}], "stats": {"total": 850, "additions": 812, "deletions": 38}, "files": [{"sha": "4d0f9e00dc6dcf98ce2df638a5c5ace5d4c8a46f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -1,3 +1,58 @@\n+2012-10-26  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc/common/config/i386/i386-common.c\n+\t(OPTION_MASK_ISA_FXSR_SET): New.\n+\t(OPTION_MASK_ISA_XSAVE_SET): Likewise.\n+\t(OPTION_MASK_ISA_XSAVEOPT_SET): Likewise.\n+\t(ix86_handle_option): Handle mfxsr, mxsave, mxsaveopt options.\n+\t* gcc/config.gcc (i[34567]86-*-*): Add fxsrintrin.h,\n+\txsaveintrin.h, xsaveoptintrin.h.\n+\t(x86_64-*-*): Likewise.\n+\t* config/i386/fxsrintrin.h: New header.\n+\t* config/i386/xsaveintrin.h: Likewise.\n+\t* config/i386/xsaveoptintrin.h: Likewise.\n+\t* gcc/config/i386/driver-i386.c (host_detect_local_cpu): Detect\n+\tFXSR/XSAVE/XSAVEOPT support.\n+\t* gcc/config/i386/i386-builtin-types.def\n+\t(VOID_FTYPE_PVOID_INT64): New function type.\n+\t* gcc/config/i386/i386-c.c: Define __FXSR__, __XSAVE__\n+\tand __XSAVEOPT__ if needed.\n+\t* gcc/config/i386/i386.c (ix86_target_string): Define -mfxsr,\n+\t -mxsave and -mxsaveopt options.\n+\t(PTA_FXSR): New.\n+\t(PTA_XSAVE): Likewise.\n+\t(PTA_XSAVEOPT): Likewise.\n+\t(ix86_option_override_internal): Handle new option.\n+\t(processor_alias_table): Added PTA_FXSR, PTA_XSAVE, PTA_XSAVEOPT.\n+\t(ix86_valid_target_attribute_inner_p): Add OPT_mfxsr,\n+\tOPT_mxsave, OPT_mxsaveopt.\n+\t(ix86_builtins): Add IX86_BUILTIN_FXSAVE, IX86_BUILTIN_FXRSTOR,\n+\tIX86_BUILTIN_FXSAVE64, IX86_BUILTIN_XSAVE, IX86_BUILTIN_XSAVE64,\n+\tIX86_BUILTIN_XRSTOR, IX86_BUILTIN_XRSTOR64, IX86_BUILTIN_XSAVEOPT,\n+\tIX86_BUILTIN_XSAVEOPT64.\n+\t(ix86_expand_builtin): Handle these built-ins.\n+\t* gcc/config/i386/i386.h (TARGET_FXSR): New.\n+\t(TARGET_XSAVE): Likewise.\n+\t(TARGET_XSAVEOPT): Likewise.\n+\t* gcc/config/i386/i386.md (ANY_XSAVE): New int iterator.\n+\t(ANY_XSAVE64): Likewise.\n+\t(xsave): New int attribute.\n+\t(fxsave): New instruction.\n+\t(fxsave64): Likewise.\n+\t(fxrstor): Likewise.\n+\t(fxrstor64): Likewise.\n+\t(<xsave>): Likewise.\n+\t(<xsave>_rex64): Likewise.\n+\t(xrstor): Likewise.\n+\t(xrstor_rex64): Likewise.\n+\t(xrstor64): Likewise.\n+\t* gcc/config/i386/i386.opt (mfxsr): New.\n+\t(mxsave): Likewise.\n+\t(mxsaveopt): Likewise.\n+\t* gcc/config/i386/x86intrin.h: Include\n+\txsaveintrin.h, fxsrintrin.h, xsaveoptintrin.h.\n+\n 2012-10-26  Ralf Cors\u00e9pius  <ralf.corsepius@rtems.org>\n \n \t* config/avr/t-rtems: Revert previous commit."}, {"sha": "da3967ea8c68b8f684edcaaa01dcd1563397af1d", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -49,11 +49,16 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_SSE4_2_SET \\\n   (OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_SSE4_1_SET)\n #define OPTION_MASK_ISA_AVX_SET \\\n-  (OPTION_MASK_ISA_AVX | OPTION_MASK_ISA_SSE4_2_SET)\n+  (OPTION_MASK_ISA_AVX | OPTION_MASK_ISA_SSE4_2_SET \\\n+   | OPTION_MASK_ISA_XSAVE_SET)\n #define OPTION_MASK_ISA_FMA_SET \\\n   (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_AVX_SET)\n #define OPTION_MASK_ISA_AVX2_SET \\\n   (OPTION_MASK_ISA_AVX2 | OPTION_MASK_ISA_AVX_SET)\n+#define OPTION_MASK_ISA_FXSR_SET OPTION_MASK_ISA_FXSR\n+#define OPTION_MASK_ISA_XSAVE_SET OPTION_MASK_ISA_XSAVE\n+#define OPTION_MASK_ISA_XSAVEOPT_SET \\\n+  (OPTION_MASK_ISA_XSAVEOPT | OPTION_MASK_ISA_XSAVE)\n #define OPTION_MASK_ISA_RTM_SET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_SET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_SET OPTION_MASK_ISA_RDSEED\n@@ -122,9 +127,13 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_AVX_UNSET \\\n   (OPTION_MASK_ISA_AVX | OPTION_MASK_ISA_FMA_UNSET \\\n    | OPTION_MASK_ISA_FMA4_UNSET | OPTION_MASK_ISA_F16C_UNSET \\\n-   | OPTION_MASK_ISA_AVX2_UNSET)\n+   | OPTION_MASK_ISA_AVX2_UNSET | OPTION_MASK_ISA_XSAVE_UNSET)\n #define OPTION_MASK_ISA_FMA_UNSET OPTION_MASK_ISA_FMA\n #define OPTION_MASK_ISA_AVX2_UNSET OPTION_MASK_ISA_AVX2\n+#define OPTION_MASK_ISA_FXSR_UNSET OPTION_MASK_ISA_FXSR\n+#define OPTION_MASK_ISA_XSAVE_UNSET \\\n+  (OPTION_MASK_ISA_XSAVE | OPTION_MASK_ISA_XSAVEOPT_UNSET)\n+#define OPTION_MASK_ISA_XSAVEOPT_UNSET OPTION_MASK_ISA_XSAVEOPT\n #define OPTION_MASK_ISA_RTM_UNSET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_UNSET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_UNSET OPTION_MASK_ISA_RDSEED\n@@ -574,6 +583,45 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mfxsr:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_FXSR_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FXSR_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_FXSR_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_FXSR_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mxsave:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XSAVE_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XSAVE_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_XSAVE_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XSAVE_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mxsaveopt:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XSAVEOPT_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XSAVEOPT_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_XSAVEOPT_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XSAVEOPT_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mrdseed:\n       if (value)\n \t{"}, {"sha": "52e6426be86a2c8ca2fcd5488249a82cff435a5f", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -368,7 +368,8 @@ i[34567]86-*-*)\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h bmi2intrin.h tbmintrin.h\n \t\t       avx2intrin.h fmaintrin.h f16cintrin.h rtmintrin.h\n-\t\t       xtestintrin.h rdseedintrin.h prfchwintrin.h adxintrin.h\"\n+\t\t       xtestintrin.h rdseedintrin.h prfchwintrin.h adxintrin.h\n+\t\t       fxsrintrin.h xsaveintrin.h xsaveoptintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -382,7 +383,8 @@ x86_64-*-*)\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h tbmintrin.h bmi2intrin.h\n \t\t       avx2intrin.h fmaintrin.h f16cintrin.h rtmintrin.h\n-\t\t       xtestintrin.h rdseedintrin.h prfchwintrin.h adxintrin.h\"\n+\t\t       xtestintrin.h rdseedintrin.h prfchwintrin.h adxintrin.h\n+\t\t       fxsrintrin.h xsaveintrin.h xsaveoptintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "1f76d3a507701ca1d60a27e6da0d27f0e515b5ec", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -75,6 +75,9 @@\n #define bit_RDSEED\t(1 << 18)\n #define bit_ADX\t(1 << 19)\n \n+/* Extended State Enumeration Sub-leaf (%eax == 13, %ecx == 1) */\n+#define bit_XSAVEOPT\t(1 << 0)\n+\n /* Signatures for different CPU implementations as returned in uses\n    of cpuid with level 0.  */\n #define signature_AMD_ebx\t0x68747541"}, {"sha": "940060a97f355379bd818ba9cdeb410b0c6b7972", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -390,7 +390,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_hle = 0, has_rtm = 0;\n   unsigned int has_rdrnd = 0, has_f16c = 0, has_fsgsbase = 0;\n   unsigned int has_rdseed = 0, has_prfchw = 0, has_adx = 0;\n-  unsigned int has_osxsave = 0;\n+  unsigned int has_osxsave = 0, has_fxsr = 0, has_xsave = 0, has_xsaveopt = 0;\n \n   bool arch;\n \n@@ -441,10 +441,12 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   has_fma = ecx & bit_FMA;\n   has_f16c = ecx & bit_F16C;\n   has_rdrnd = ecx & bit_RDRND;\n+  has_xsave = ecx & bit_XSAVE;\n \n   has_cmpxchg8b = edx & bit_CMPXCHG8B;\n   has_cmov = edx & bit_CMOV;\n   has_mmx = edx & bit_MMX;\n+  has_fxsr = edx & bit_FXSAVE;\n   has_sse = edx & bit_SSE;\n   has_sse2 = edx & bit_SSE2;\n \n@@ -462,6 +464,13 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_adx = ebx & bit_ADX;\n     }\n \n+  if (max_level >= 13)\n+    {\n+      __cpuid_count (13, 1, eax, ebx, ecx, edx);\n+\n+      has_xsaveopt = eax & bit_XSAVEOPT;\n+    }\n+\n   /* Get XCR_XFEATURE_ENABLED_MASK register with xgetbv.  */\n #define XCR_XFEATURE_ENABLED_MASK\t0x0\n #define XSTATE_FP\t\t\t0x1\n@@ -481,6 +490,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_fma = 0;\n       has_fma4 = 0;\n       has_xop = 0;\n+      has_xsave = 0;\n+      has_xsaveopt = 0;\n     }\n \n   /* Check cpuid level of extended features.  */\n@@ -763,11 +774,15 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *rdseed = has_rdseed ? \" -mrdseed\" : \" -mno-rdseed\";\n       const char *prfchw = has_prfchw ? \" -mprfchw\" : \" -mno-prfchw\";\n       const char *adx = has_adx ? \" -madx\" : \" -mno-adx\";\n+      const char *fxsr = has_fxsr ? \" -mfxsr\" : \" -mno-fxsr\";\n+      const char *xsave = has_xsave ? \" -mxsave\" : \" -mno-xsave\";\n+      const char *xsaveopt = has_xsaveopt ? \" -mxsaveopt\" : \" -mno-xsaveopt\";\n \n       options = concat (options, cx16, sahf, movbe, ase, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, bmi2,\n \t\t\ttbm, avx, avx2, sse4_2, sse4_1, lzcnt, rtm,\n-\t\t\thle, rdrnd, f16c, fsgsbase, rdseed, prfchw, adx, NULL);\n+\t\t\thle, rdrnd, f16c, fsgsbase, rdseed, prfchw, adx,\n+\t\t\tfxsr, xsave, xsaveopt, NULL);\n     }\n \n done:"}, {"sha": "9f5e411ac3263501e2693287cbe0932eaceabd64", "filename": "gcc/config/i386/fxsrintrin.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Ffxsrintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Ffxsrintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffxsrintrin.h?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -0,0 +1,61 @@\n+/* Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* #if !defined _X86INTRIN_H_INCLUDED && !defined _IMMINTRIN_H_INCLUDED */\n+/* # error \"Never use <fxsrintrin.h> directly; include <x86intrin.h> instead.\" */\n+/* #endif */\n+\n+#ifndef _FXSRINTRIN_H_INCLUDED\n+#define _FXSRINTRIN_H_INCLUDED\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_fxsave (void *__P)\n+{\n+  return __builtin_ia32_fxsave (__P);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_fxrstor (void *__P)\n+{\n+  return __builtin_ia32_fxrstor (__P);\n+}\n+\n+#ifdef __x86_64__\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_fxsave64 (void *__P)\n+{\n+    return __builtin_ia32_fxsave64 (__P);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_fxrstor64 (void *__P)\n+{\n+    return __builtin_ia32_fxrstor64 (__P);\n+}\n+#endif\n+\n+#endif /* _FXSRINTRIN_H_INCLUDED */"}, {"sha": "314f3e888d822a1598d9c6687ecd80fbe348280f", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -356,6 +356,7 @@ DEF_FUNCTION_TYPE (V4DI, V4DI, V2DI)\n DEF_FUNCTION_TYPE (V4DI, PCV4DI, V4DI)\n DEF_FUNCTION_TYPE (V4DI, V4DI, INT)\n DEF_FUNCTION_TYPE (V2DI, V4DI, INT)\n+DEF_FUNCTION_TYPE (VOID, PVOID, INT64)\n DEF_FUNCTION_TYPE (VOID, PCHAR, V16QI)\n DEF_FUNCTION_TYPE (VOID, PCHAR, V32QI)\n DEF_FUNCTION_TYPE (VOID, PDOUBLE, V2DF)"}, {"sha": "bd02fbb1bfa7c31b6831e2b1083010e86be97751", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -302,6 +302,12 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__PRFCHW__\");\n   if (isa_flag & OPTION_MASK_ISA_ADX)\n     def_or_undef (parse_in, \"__ADX__\");\n+  if (isa_flag & OPTION_MASK_ISA_FXSR)\n+    def_or_undef (parse_in, \"__FXSR__\");\n+  if (isa_flag & OPTION_MASK_ISA_XSAVE)\n+    def_or_undef (parse_in, \"__XSAVE__\");\n+  if (isa_flag & OPTION_MASK_ISA_XSAVEOPT)\n+    def_or_undef (parse_in, \"__XSAVEOPT__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE))\n     def_or_undef (parse_in, \"__SSE_MATH__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE2))"}, {"sha": "2a9db18b173ef6d111a65e75248bcf993e5b84f2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 186, "deletions": 24, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -2752,25 +2752,26 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n      preceding options while match those first.  */\n   static struct ix86_target_opts isa_opts[] =\n   {\n-    { \"-mfma4\",\tOPTION_MASK_ISA_FMA4 },\n+    { \"-mfma4\",\t\tOPTION_MASK_ISA_FMA4 },\n     { \"-mfma\",\t\tOPTION_MASK_ISA_FMA },\n     { \"-mxop\",\t\tOPTION_MASK_ISA_XOP },\n     { \"-mlwp\",\t\tOPTION_MASK_ISA_LWP },\n     { \"-msse4a\",\tOPTION_MASK_ISA_SSE4A },\n     { \"-msse4.2\",\tOPTION_MASK_ISA_SSE4_2 },\n     { \"-msse4.1\",\tOPTION_MASK_ISA_SSE4_1 },\n     { \"-mssse3\",\tOPTION_MASK_ISA_SSSE3 },\n-    { \"-msse3\",\tOPTION_MASK_ISA_SSE3 },\n-    { \"-msse2\",\tOPTION_MASK_ISA_SSE2 },\n+    { \"-msse3\",\t\tOPTION_MASK_ISA_SSE3 },\n+    { \"-msse2\",\t\tOPTION_MASK_ISA_SSE2 },\n     { \"-msse\",\t\tOPTION_MASK_ISA_SSE },\n     { \"-m3dnow\",\tOPTION_MASK_ISA_3DNOW },\n     { \"-m3dnowa\",\tOPTION_MASK_ISA_3DNOW_A },\n     { \"-mmmx\",\t\tOPTION_MASK_ISA_MMX },\n     { \"-mabm\",\t\tOPTION_MASK_ISA_ABM },\n     { \"-mbmi\",\t\tOPTION_MASK_ISA_BMI },\n-    { \"-mbmi2\",\tOPTION_MASK_ISA_BMI2 },\n+    { \"-mbmi2\",\t\tOPTION_MASK_ISA_BMI2 },\n     { \"-mlzcnt\",\tOPTION_MASK_ISA_LZCNT },\n     { \"-mhle\",\t\tOPTION_MASK_ISA_HLE },\n+    { \"-mfxsr\",\t\tOPTION_MASK_ISA_FXSR },\n     { \"-mrdseed\",\tOPTION_MASK_ISA_RDSEED },\n     { \"-mprfchw\",\tOPTION_MASK_ISA_PRFCHW },\n     { \"-madx\",\t\tOPTION_MASK_ISA_ADX },\n@@ -2782,8 +2783,10 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mpclmul\",\tOPTION_MASK_ISA_PCLMUL },\n     { \"-mfsgsbase\",\tOPTION_MASK_ISA_FSGSBASE },\n     { \"-mrdrnd\",\tOPTION_MASK_ISA_RDRND },\n-    { \"-mf16c\",\tOPTION_MASK_ISA_F16C },\n+    { \"-mf16c\",\t\tOPTION_MASK_ISA_F16C },\n     { \"-mrtm\",\t\tOPTION_MASK_ISA_RTM },\n+    { \"-mxsave\",\tOPTION_MASK_ISA_XSAVE },\n+    { \"-mxsaveopt\",\tOPTION_MASK_ISA_XSAVEOPT },\n   };\n \n   /* Flag options.  */\n@@ -3054,6 +3057,10 @@ ix86_option_override_internal (bool main_args_p)\n #define PTA_PRFCHW\t\t(HOST_WIDE_INT_1 << 34)\n #define PTA_RDSEED\t\t(HOST_WIDE_INT_1 << 35)\n #define PTA_ADX\t\t\t(HOST_WIDE_INT_1 << 36)\n+#define PTA_FXSR\t\t(HOST_WIDE_INT_1 << 37)\n+#define PTA_XSAVE\t\t(HOST_WIDE_INT_1 << 38)\n+#define PTA_XSAVEOPT\t\t(HOST_WIDE_INT_1 << 39)\n+\n /* if this reaches 64, need to widen struct pta flags below */\n \n   static struct pta\n@@ -3076,46 +3083,48 @@ ix86_option_override_internal (bool main_args_p)\n       {\"c3-2\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, PTA_MMX | PTA_SSE},\n       {\"i686\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, 0},\n       {\"pentiumpro\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, 0},\n-      {\"pentium2\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, PTA_MMX},\n+      {\"pentium2\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO, PTA_MMX | PTA_FXSR},\n       {\"pentium3\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-\tPTA_MMX | PTA_SSE},\n+\tPTA_MMX | PTA_SSE | PTA_FXSR},\n       {\"pentium3m\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-\tPTA_MMX | PTA_SSE},\n+\tPTA_MMX | PTA_SSE | PTA_FXSR},\n       {\"pentium-m\", PROCESSOR_PENTIUMPRO, CPU_PENTIUMPRO,\n-\tPTA_MMX | PTA_SSE | PTA_SSE2},\n+\tPTA_MMX | PTA_SSE | PTA_SSE2 | PTA_FXSR},\n       {\"pentium4\", PROCESSOR_PENTIUM4, CPU_NONE,\n-\tPTA_MMX |PTA_SSE | PTA_SSE2},\n+\tPTA_MMX |PTA_SSE | PTA_SSE2 | PTA_FXSR},\n       {\"pentium4m\", PROCESSOR_PENTIUM4, CPU_NONE,\n-\tPTA_MMX | PTA_SSE | PTA_SSE2},\n+\tPTA_MMX | PTA_SSE | PTA_SSE2 | PTA_FXSR},\n       {\"prescott\", PROCESSOR_NOCONA, CPU_NONE,\n-\tPTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3},\n+\tPTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_FXSR},\n       {\"nocona\", PROCESSOR_NOCONA, CPU_NONE,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-\t| PTA_CX16 | PTA_NO_SAHF},\n+\t| PTA_CX16 | PTA_NO_SAHF | PTA_FXSR},\n       {\"core2\", PROCESSOR_CORE2_64, CPU_CORE2,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-\t| PTA_SSSE3 | PTA_CX16},\n+\t| PTA_SSSE3 | PTA_CX16 | PTA_FXSR},\n       {\"corei7\", PROCESSOR_COREI7_64, CPU_COREI7,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-\t| PTA_SSSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_CX16},\n+\t| PTA_SSSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_CX16 | PTA_FXSR},\n       {\"corei7-avx\", PROCESSOR_COREI7_64, CPU_COREI7,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_AVX\n-\t| PTA_CX16 | PTA_POPCNT | PTA_AES | PTA_PCLMUL},\n+\t| PTA_CX16 | PTA_POPCNT | PTA_AES | PTA_PCLMUL\n+\t| PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT},\n       {\"core-avx-i\", PROCESSOR_COREI7_64, CPU_COREI7,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_AVX\n \t| PTA_CX16 | PTA_POPCNT | PTA_AES | PTA_PCLMUL | PTA_FSGSBASE\n-\t| PTA_RDRND | PTA_F16C},\n+\t| PTA_RDRND | PTA_F16C | PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT},\n       {\"core-avx2\", PROCESSOR_COREI7_64, CPU_COREI7,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_AVX | PTA_AVX2\n \t| PTA_CX16 | PTA_POPCNT | PTA_AES | PTA_PCLMUL | PTA_FSGSBASE\n \t| PTA_RDRND | PTA_F16C | PTA_BMI | PTA_BMI2 | PTA_LZCNT\n-\t| PTA_FMA | PTA_MOVBE | PTA_RTM | PTA_HLE},\n+\t| PTA_FMA | PTA_MOVBE | PTA_RTM | PTA_HLE | PTA_FXSR | PTA_XSAVE\n+\t| PTA_XSAVEOPT},\n       {\"atom\", PROCESSOR_ATOM, CPU_ATOM,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n-\t| PTA_SSSE3 | PTA_CX16 | PTA_MOVBE},\n+\t| PTA_SSSE3 | PTA_CX16 | PTA_MOVBE | PTA_FXSR},\n       {\"geode\", PROCESSOR_GEODE, CPU_GEODE,\n \tPTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_PREFETCH_SSE},\n       {\"k6\", PROCESSOR_K6, CPU_K6, PTA_MMX},\n@@ -3156,29 +3165,32 @@ ix86_option_override_internal (bool main_args_p)\n \t| PTA_SSE2 | PTA_NO_SAHF},\n       {\"amdfam10\", PROCESSOR_AMDFAM10, CPU_AMDFAM10,\n \tPTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n-\t| PTA_SSE2 | PTA_SSE3 | PTA_SSE4A | PTA_CX16 | PTA_ABM}, \n+\t| PTA_SSE2 | PTA_SSE3 | PTA_SSE4A | PTA_CX16 | PTA_ABM},\n       {\"barcelona\", PROCESSOR_AMDFAM10, CPU_AMDFAM10,\n \tPTA_64BIT | PTA_MMX | PTA_3DNOW | PTA_3DNOW_A | PTA_SSE\n \t| PTA_SSE2 | PTA_SSE3 | PTA_SSE4A | PTA_CX16 | PTA_ABM},\n       {\"bdver1\", PROCESSOR_BDVER1, CPU_BDVER1,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n \t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n-\t| PTA_XOP | PTA_LWP | PTA_PRFCHW},\n+\t| PTA_XOP | PTA_LWP | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE\n+\t| PTA_XSAVEOPT},\n       {\"bdver2\", PROCESSOR_BDVER2, CPU_BDVER2,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n \t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_FMA4\n \t| PTA_XOP | PTA_LWP | PTA_BMI | PTA_TBM | PTA_F16C\n-\t| PTA_FMA | PTA_PRFCHW},\n+\t| PTA_FMA | PTA_PRFCHW | PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT},\n       {\"btver1\", PROCESSOR_BTVER1, CPU_GENERIC64,\n \tPTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n-\t| PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_PRFCHW},\n+\t| PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_PRFCHW\n+\t| PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT},\n       {\"btver2\", PROCESSOR_BTVER2, CPU_GENERIC64,\n \tPTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_SSE4_1\n \t| PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX\n-\t| PTA_BMI | PTA_F16C | PTA_MOVBE | PTA_PRFCHW},\n+\t| PTA_BMI | PTA_F16C | PTA_MOVBE | PTA_PRFCHW\n+\t| PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT},\n \n       {\"generic32\", PROCESSOR_GENERIC32, CPU_PENTIUMPRO,\n \tPTA_HLE /* flags are only used for -march switch.  */ },\n@@ -3549,6 +3561,15 @@ ix86_option_override_internal (bool main_args_p)\n \tif (processor_alias_table[i].flags & PTA_ADX\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_ADX))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_ADX;\n+\tif (processor_alias_table[i].flags & PTA_FXSR\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_FXSR))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_FXSR;\n+\tif (processor_alias_table[i].flags & PTA_XSAVE\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_XSAVE))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_XSAVE;\n+\tif (processor_alias_table[i].flags & PTA_XSAVEOPT\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_XSAVEOPT))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_XSAVEOPT;\n \tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n \t  x86_prefetch_sse = true;\n \n@@ -4368,6 +4389,9 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"prfchw\",\tOPT_mprfchw),\n     IX86_ATTR_ISA (\"rdseed\",\tOPT_mrdseed),\n     IX86_ATTR_ISA (\"adx\",\tOPT_madx),\n+    IX86_ATTR_ISA (\"fxsr\",\tOPT_mfxsr),\n+    IX86_ATTR_ISA (\"xsave\",\tOPT_mxsave),\n+    IX86_ATTR_ISA (\"xsaveopt\",\tOPT_mxsaveopt),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -25570,6 +25594,19 @@ enum ix86_builtins\n   IX86_BUILTIN_STMXCSR,\n   IX86_BUILTIN_SFENCE,\n \n+  IX86_BUILTIN_FXSAVE,\n+  IX86_BUILTIN_FXRSTOR,\n+  IX86_BUILTIN_FXSAVE64,\n+  IX86_BUILTIN_FXRSTOR64,\n+\n+  IX86_BUILTIN_XSAVE,\n+  IX86_BUILTIN_XRSTOR,\n+  IX86_BUILTIN_XSAVE64,\n+  IX86_BUILTIN_XRSTOR64,\n+\n+  IX86_BUILTIN_XSAVEOPT,\n+  IX86_BUILTIN_XSAVEOPT64,\n+\n   /* 3DNow! Original */\n   IX86_BUILTIN_FEMMS,\n   IX86_BUILTIN_PAVGUSB,\n@@ -26776,6 +26813,19 @@ static const struct builtin_description bdesc_special_args[] =\n   /* 3DNow! */\n   { OPTION_MASK_ISA_3DNOW, CODE_FOR_mmx_femms, \"__builtin_ia32_femms\", IX86_BUILTIN_FEMMS, UNKNOWN, (int) VOID_FTYPE_VOID },\n \n+  /* FXSR, XSAVE and XSAVEOPT */\n+  { OPTION_MASK_ISA_FXSR, CODE_FOR_nothing, \"__builtin_ia32_fxsave\", IX86_BUILTIN_FXSAVE, UNKNOWN, (int) VOID_FTYPE_PVOID },\n+  { OPTION_MASK_ISA_FXSR, CODE_FOR_nothing, \"__builtin_ia32_fxrstor\", IX86_BUILTIN_FXRSTOR, UNKNOWN, (int) VOID_FTYPE_PVOID },\n+  { OPTION_MASK_ISA_XSAVE, CODE_FOR_nothing, \"__builtin_ia32_xsave\", IX86_BUILTIN_XSAVE, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n+  { OPTION_MASK_ISA_XSAVE, CODE_FOR_nothing, \"__builtin_ia32_xrstor\", IX86_BUILTIN_XRSTOR, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n+  { OPTION_MASK_ISA_XSAVEOPT, CODE_FOR_nothing, \"__builtin_ia32_xsaveopt\", IX86_BUILTIN_XSAVEOPT, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n+\n+  { OPTION_MASK_ISA_FXSR | OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_fxsave64\", IX86_BUILTIN_FXSAVE64, UNKNOWN, (int) VOID_FTYPE_PVOID },\n+  { OPTION_MASK_ISA_FXSR | OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_fxrstor64\", IX86_BUILTIN_FXRSTOR64, UNKNOWN, (int) VOID_FTYPE_PVOID },\n+  { OPTION_MASK_ISA_XSAVE | OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_xsave64\", IX86_BUILTIN_XSAVE64, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n+  { OPTION_MASK_ISA_XSAVE | OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_xrstor64\", IX86_BUILTIN_XRSTOR64, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n+  { OPTION_MASK_ISA_XSAVEOPT | OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_xsaveopt64\", IX86_BUILTIN_XSAVEOPT64, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n+\n   /* SSE */\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_storeups, \"__builtin_ia32_storeups\", IX86_BUILTIN_STOREUPS, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V4SF },\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_movntv4sf, \"__builtin_ia32_movntps\", IX86_BUILTIN_MOVNTPS, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V4SF },\n@@ -30690,6 +30740,118 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       emit_move_insn (target, op0);\n       return target;\n \n+    case IX86_BUILTIN_FXSAVE:\n+    case IX86_BUILTIN_FXRSTOR:\n+    case IX86_BUILTIN_FXSAVE64:\n+    case IX86_BUILTIN_FXRSTOR64:\n+      switch (fcode)\n+\t{\n+\tcase IX86_BUILTIN_FXSAVE:\n+\t  icode = CODE_FOR_fxsave;\n+\t  break;\n+\tcase IX86_BUILTIN_FXRSTOR:\n+\t  icode = CODE_FOR_fxrstor;\n+\t  break;\n+\tcase IX86_BUILTIN_FXSAVE64:\n+\t  icode = CODE_FOR_fxsave64;\n+\t  break;\n+\tcase IX86_BUILTIN_FXRSTOR64:\n+\t  icode = CODE_FOR_fxrstor64;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op0 = expand_normal (arg0);\n+\n+      if (!address_operand (op0, VOIDmode))\n+\t{\n+\t  op0 = convert_memory_address (Pmode, op0);\n+\t  op0 = copy_addr_to_reg (op0);\n+\t}\n+      op0 = gen_rtx_MEM (BLKmode, op0);\n+\n+      pat = GEN_FCN (icode) (op0);\n+      if (pat)\n+\temit_insn (pat);\n+      return 0;\n+\n+    case IX86_BUILTIN_XSAVE:\n+    case IX86_BUILTIN_XRSTOR:\n+    case IX86_BUILTIN_XSAVE64:\n+    case IX86_BUILTIN_XRSTOR64:\n+    case IX86_BUILTIN_XSAVEOPT:\n+    case IX86_BUILTIN_XSAVEOPT64:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      arg1 = CALL_EXPR_ARG (exp, 1);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+\n+      if (!address_operand (op0, VOIDmode))\n+\t{\n+\t  op0 = convert_memory_address (Pmode, op0);\n+\t  op0 = copy_addr_to_reg (op0);\n+\t}\n+      op0 = gen_rtx_MEM (BLKmode, op0);\n+\n+      op1 = force_reg (DImode, op1);\n+\n+      if (TARGET_64BIT)\n+\t{\n+\t  op2 = expand_simple_binop (DImode, LSHIFTRT, op1, GEN_INT (32),\n+\t\t\t\t     NULL, 1, OPTAB_DIRECT);\n+\t  switch (fcode)\n+\t    {\n+\t    case IX86_BUILTIN_XSAVE:\n+\t      icode = CODE_FOR_xsave_rex64;\n+\t      break;\n+\t    case IX86_BUILTIN_XRSTOR:\n+\t      icode = CODE_FOR_xrstor_rex64;\n+\t      break;\n+\t    case IX86_BUILTIN_XSAVE64:\n+\t      icode = CODE_FOR_xsave64;\n+\t      break;\n+\t    case IX86_BUILTIN_XRSTOR64:\n+\t      icode = CODE_FOR_xrstor64;\n+\t      break;\n+\t    case IX86_BUILTIN_XSAVEOPT:\n+\t      icode = CODE_FOR_xsaveopt_rex64;\n+\t      break;\n+\t    case IX86_BUILTIN_XSAVEOPT64:\n+\t      icode = CODE_FOR_xsaveopt64;\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\n+\t  op2 = gen_lowpart (SImode, op2);\n+\t  op1 = gen_lowpart (SImode, op1);\n+\t  pat = GEN_FCN (icode) (op0, op1, op2);\n+\t}\n+      else\n+\t{\n+\t  switch (fcode)\n+\t    {\n+\t    case IX86_BUILTIN_XSAVE:\n+\t      icode = CODE_FOR_xsave;\n+\t      break;\n+\t    case IX86_BUILTIN_XRSTOR:\n+\t      icode = CODE_FOR_xrstor;\n+\t      break;\n+\t    case IX86_BUILTIN_XSAVEOPT:\n+\t      icode = CODE_FOR_xsaveopt;\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t  pat = GEN_FCN (icode) (op0, op1);\n+\t}\n+\n+      if (pat)\n+\temit_insn (pat);\n+      return 0;\n+\n     case IX86_BUILTIN_LLWPCB:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       op0 = expand_normal (arg0);"}, {"sha": "712d00a5ed80635ef9f9751f696eae62a49cfa16", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -79,6 +79,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_RDSEED\tTARGET_ISA_RDSEED\n #define TARGET_PRFCHW\tTARGET_ISA_PRFCHW\n #define TARGET_ADX\tTARGET_ISA_ADX\n+#define TARGET_FXSR\tTARGET_ISA_FXSR\n+#define TARGET_XSAVE\tTARGET_ISA_XSAVE\n+#define TARGET_XSAVEOPT\tTARGET_ISA_XSAVEOPT\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_X32\tTARGET_ABI_X32"}, {"sha": "63d64acf23d4346090b5007490fb44232e68c686", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -202,6 +202,16 @@\n   UNSPECV_RDGSBASE\n   UNSPECV_WRFSBASE\n   UNSPECV_WRGSBASE\n+  UNSPECV_FXSAVE\n+  UNSPECV_FXRSTOR\n+  UNSPECV_FXSAVE64\n+  UNSPECV_FXRSTOR64\n+  UNSPECV_XSAVE\n+  UNSPECV_XRSTOR\n+  UNSPECV_XSAVE64\n+  UNSPECV_XRSTOR64\n+  UNSPECV_XSAVEOPT\n+  UNSPECV_XSAVEOPT64\n \n   ;; For RDRAND support\n   UNSPECV_RDRAND\n@@ -18029,6 +18039,142 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"3\")])\n \n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; FXSR, XSAVE and XSAVEOPT instructions\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"fxsave\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n+\t(unspec_volatile:BLK [(const_int 0)] UNSPECV_FXSAVE))]\n+  \"TARGET_FXSR\"\n+  \"fxsave\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"memory\" \"store\")\n+   (set (attr \"length\")\n+        (symbol_ref \"ix86_attr_length_address_default (insn) + 3\"))])\n+\n+(define_insn \"fxsave64\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n+\t(unspec_volatile:BLK [(const_int 0)] UNSPECV_FXSAVE64))]\n+  \"TARGET_64BIT && TARGET_FXSR\"\n+  \"fxsave64\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"memory\" \"store\")\n+   (set (attr \"length\")\n+        (symbol_ref \"ix86_attr_length_address_default (insn) + 4\"))])\n+\n+(define_insn \"fxrstor\"\n+  [(unspec_volatile [(match_operand:BLK 0 \"memory_operand\" \"m\")]\n+\t\t    UNSPECV_FXRSTOR)]\n+  \"TARGET_FXSR\"\n+  \"fxrstor\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"memory\" \"load\")\n+   (set (attr \"length\")\n+        (symbol_ref \"ix86_attr_length_address_default (insn) + 3\"))])\n+\n+(define_insn \"fxrstor64\"\n+  [(unspec_volatile [(match_operand:BLK 0 \"memory_operand\" \"m\")]\n+\t\t    UNSPECV_FXRSTOR64)]\n+  \"TARGET_64BIT && TARGET_FXSR\"\n+  \"fxrstor64\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"memory\" \"load\")\n+   (set (attr \"length\")\n+        (symbol_ref \"ix86_attr_length_address_default (insn) + 4\"))])\n+\n+(define_int_iterator ANY_XSAVE\n+\t[UNSPECV_XSAVE\n+\t (UNSPECV_XSAVEOPT \"TARGET_XSAVEOPT\")])\n+\n+(define_int_iterator ANY_XSAVE64\n+\t[UNSPECV_XSAVE64\n+\t (UNSPECV_XSAVEOPT64 \"TARGET_XSAVEOPT\")])\n+\n+(define_int_attr xsave\n+\t[(UNSPECV_XSAVE \"xsave\")\n+\t (UNSPECV_XSAVE64 \"xsave64\")\n+\t (UNSPECV_XSAVEOPT \"xsaveopt\")\n+\t (UNSPECV_XSAVEOPT64 \"xsaveopt64\")])\n+\n+(define_insn \"<xsave>\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n+\t(unspec_volatile:BLK\n+\t [(match_operand:DI 1 \"register_operand\" \"A\")]\n+\t ANY_XSAVE))]\n+  \"!TARGET_64BIT && TARGET_XSAVE\"\n+  \"<xsave>\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"memory\" \"store\")\n+   (set (attr \"length\")\n+        (symbol_ref \"ix86_attr_length_address_default (insn) + 3\"))])\n+\n+(define_insn \"<xsave>_rex64\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n+\t(unspec_volatile:BLK\n+\t [(match_operand:SI 1 \"register_operand\" \"a\")\n+\t  (match_operand:SI 2 \"register_operand\" \"d\")]\n+\t ANY_XSAVE))]\n+  \"TARGET_64BIT && TARGET_XSAVE\"\n+  \"<xsave>\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"memory\" \"store\")\n+   (set (attr \"length\")\n+        (symbol_ref \"ix86_attr_length_address_default (insn) + 3\"))])\n+\n+(define_insn \"<xsave>\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n+\t(unspec_volatile:BLK\n+\t [(match_operand:SI 1 \"register_operand\" \"a\")\n+\t  (match_operand:SI 2 \"register_operand\" \"d\")]\n+\t ANY_XSAVE64))]\n+  \"TARGET_64BIT && TARGET_XSAVE\"\n+  \"<xsave>\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"memory\" \"store\")\n+   (set (attr \"length\")\n+        (symbol_ref \"ix86_attr_length_address_default (insn) + 4\"))])\n+\n+(define_insn \"xrstor\"\n+   [(unspec_volatile:BLK\n+     [(match_operand:BLK 0 \"memory_operand\" \"m\")\n+      (match_operand:DI 1 \"register_operand\" \"A\")]\n+     UNSPECV_XRSTOR)]\n+  \"!TARGET_64BIT && TARGET_XSAVE\"\n+  \"xrstor\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"memory\" \"load\")\n+   (set (attr \"length\")\n+        (symbol_ref \"ix86_attr_length_address_default (insn) + 3\"))])\n+\n+(define_insn \"xrstor_rex64\"\n+   [(unspec_volatile:BLK\n+     [(match_operand:BLK 0 \"memory_operand\" \"m\")\n+      (match_operand:SI 1 \"register_operand\" \"a\")\n+      (match_operand:SI 2 \"register_operand\" \"d\")]\n+     UNSPECV_XRSTOR)]\n+  \"TARGET_64BIT && TARGET_XSAVE\"\n+  \"xrstor\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"memory\" \"load\")\n+   (set (attr \"length\")\n+        (symbol_ref \"ix86_attr_length_address_default (insn) + 3\"))])\n+\n+(define_insn \"xrstor64\"\n+   [(unspec_volatile:BLK\n+     [(match_operand:BLK 0 \"memory_operand\" \"m\")\n+      (match_operand:SI 1 \"register_operand\" \"a\")\n+      (match_operand:SI 2 \"register_operand\" \"d\")]\n+     UNSPECV_XRSTOR64)]\n+  \"TARGET_64BIT && TARGET_XSAVE\"\n+  \"xrstor64\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"memory\" \"load\")\n+   (set (attr \"length\")\n+        (symbol_ref \"ix86_attr_length_address_default (insn) + 4\"))])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; LWP instructions"}, {"sha": "dc59c479fe83713dc2fbf4fab8ddf1488022fa32", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -552,6 +552,18 @@ madx\n Target Report Mask(ISA_ADX) Var(ix86_isa_flags) Save\n Support flag-preserving add-carry instructions\n \n+mfxsr\n+Target Report Mask(ISA_FXSR) Var(ix86_isa_flags) Save\n+Support FXSAVE and FXRSTOR instructions\n+\n+mxsave\n+Target Report Mask(ISA_XSAVE) Var(ix86_isa_flags) Save\n+Support XSAVE and XRSTOR instructions\n+\n+mxsaveopt\n+Target Report Mask(ISA_XSAVEOPT) Var(ix86_isa_flags) Save\n+Support XSAVEOPT instruction\n+\n mtbm\n Target Report Mask(ISA_TBM) Var(ix86_isa_flags) Save\n Support TBM built-in functions and code generation"}, {"sha": "8b6df7a0fd7aa1b48f57b47df2fe769bf0ef0541", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -105,6 +105,18 @@\n #include <prfchwintrin.h>\n #endif\n \n+#ifdef __FXSR__\n+#include <fxsrintrin.h>\n+#endif\n+\n+#ifdef __XSAVE__\n+#include <xsaveintrin.h>\n+#endif\n+\n+#ifdef __XSAVEOPT__\n+#include <xsaveoptintrin.h>\n+#endif\n+\n #include <adxintrin.h>\n \n #endif /* _X86INTRIN_H_INCLUDED */"}, {"sha": "0acae2720b1add7c4556396f4025bc2ee462c6a8", "filename": "gcc/config/i386/xsaveintrin.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fxsaveintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fxsaveintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxsaveintrin.h?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -0,0 +1,61 @@\n+/* Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* #if !defined _X86INTRIN_H_INCLUDED && !defined _IMMINTRIN_H_INCLUDED */\n+/* # error \"Never use <xsaveintrin.h> directly; include <x86intrin.h> instead.\" */\n+/* #endif */\n+\n+#ifndef _XSAVEINTRIN_H_INCLUDED\n+#define _XSAVEINTRIN_H_INCLUDED\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xsave (void *__P, long long __M)\n+{\n+  return __builtin_ia32_xsave (__P, __M);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xrstor (void *__P, long long __M)\n+{\n+  return __builtin_ia32_xrstor (__P, __M);\n+}\n+\n+#ifdef __x86_64__\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xsave64 (void *__P, long long __M)\n+{\n+  return __builtin_ia32_xsave64 (__P, __M);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xrstor64 (void *__P, long long __M)\n+{\n+  return __builtin_ia32_xrstor64 (__P, __M);\n+}\n+#endif\n+\n+#endif /* _XSAVEINTRIN_H_INCLUDED */"}, {"sha": "cc962a16966e86eee1ff6f9ac8054f97e3d34636", "filename": "gcc/config/i386/xsaveoptintrin.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fxsaveoptintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Fconfig%2Fi386%2Fxsaveoptintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxsaveoptintrin.h?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -0,0 +1,47 @@\n+/* Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* #if !defined _X86INTRIN_H_INCLUDED && !defined _IMMINTRIN_H_INCLUDED */\n+/* # error \"Never use <xsaveoptintrin.h> directly; include <x86intrin.h> instead.\" */\n+/* #endif */\n+\n+#ifndef _XSAVEOPTINTRIN_H_INCLUDED\n+#define _XSAVEOPTINTRIN_H_INCLUDED\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xsaveopt (void *__P, long long __M)\n+{\n+  return __builtin_ia32_xsaveopt (__P, __M);\n+}\n+\n+#ifdef __x86_64__\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xsaveopt64 (void *__P, long long __M)\n+{\n+  return __builtin_ia32_xsaveopt64 (__P, __M);\n+}\n+#endif\n+\n+#endif /* _XSAVEOPTINTRIN_H_INCLUDED */"}, {"sha": "918af7526fe64e9fb0513df113dc13ec14cb7817", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -1,3 +1,23 @@\n+2012-10-26  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\n+\t* gcc.target/i386/fxsave-1.c: New.\n+\t* gcc.target/i386/fxsave64-1.c: Ditto.\n+\t* gcc.target/i386/fxrstor-1.c: Ditto.\n+\t* gcc.target/i386/fxrstor64-1.c: Ditto.\n+\t* gcc.target/i386/xsave-1.c: Ditto.\n+\t* gcc.target/i386/xsave64-1.c: Ditto.\n+\t* gcc.target/i386/xrstor-1.c: Ditto.\n+\t* gcc.target/i386/xrstor64-1.c: Ditto.\n+\t* gcc.target/i386/xsaveopt-1.c: Ditto.\n+\t* gcc.target/i386/xsaveopt64-1.c: Ditto.\n+\t* gcc.target/i386/sse-12.c: Add -mfxsr, -mxsaveopt.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\n 2012-10-25  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-ssa/cunroll-4.c: Update; we now remove the loop"}, {"sha": "67dea2aa80472d037af3b53d37f9d0703c5074df", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "8b86785e8c2dbc8dc35eff5d74a79ee6052544ea", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "0e1ca191f5e7b3086d03cf3f2154c57d402238fc", "filename": "gcc/testsuite/gcc.target/i386/fxrstor-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffxrstor-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffxrstor-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffxrstor-1.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfxsr -O2\" } */\n+/* { dg-final { scan-assembler \"fxrstor\\[ \\\\t\\]\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+fxsave_test (void)\n+{\n+  char fxsave_region [512] __attribute__((aligned(16)));\n+  _fxrstor (fxsave_region);\n+}"}, {"sha": "fbdb1f6fef8f2259c331f6cb0827cb6e4f540b81", "filename": "gcc/testsuite/gcc.target/i386/fxrstor64-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffxrstor64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffxrstor64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffxrstor64-1.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mfxsr -O2\" } */\n+/* { dg-final { scan-assembler \"fxrstor64\\[ \\\\t\\]\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+fxsave_test (void)\n+{\n+  char fxsave_region [512] __attribute__((aligned(16)));\n+  _fxrstor64 (fxsave_region);\n+}"}, {"sha": "567af8d0e443e2388b00e9ebdf43c889ef8adb6d", "filename": "gcc/testsuite/gcc.target/i386/fxsave-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffxsave-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffxsave-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffxsave-1.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfxsr -O2\" } */\n+/* { dg-final { scan-assembler \"fxsave\\[ \\\\t\\]\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+fxsave_test (void)\n+{\n+  char fxsave_region [512] __attribute__((aligned(16)));\n+  _fxsave (fxsave_region);\n+}"}, {"sha": "317548ad6741d94ed60637166dd8cef69474de48", "filename": "gcc/testsuite/gcc.target/i386/fxsave64-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffxsave64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffxsave64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffxsave64-1.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mfxsr -O2\" } */\n+/* { dg-final { scan-assembler \"fxsave64\\[ \\\\t\\]\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+fxsave_test (void)\n+{\n+  char fxsave_region [512] __attribute__((aligned(16)));\n+  _fxsave64 (fxsave_region);\n+}"}, {"sha": "c1c5745ef0b239269e7a77342f898c3704bdf884", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "1d777d12e4f08f92876c35953f2f1e43de0233f6", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "331be0e1987504fe936b5e4b0f9da330e1f9dd9f", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "8e4c4bd3ebdfe17b0dc589d40dcffe4d1ed82f59", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -50,7 +50,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -264,7 +264,7 @@ test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n \n /* x86intrin.h (FMA4/XOP/LWP/BMI/BMI2/TBM/LZCNT/FMA). */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,rdseed,prfchw,adx\")\n+#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,rdseed,prfchw,adx,fxsr,xsaveopt\")\n #endif\n #include <x86intrin.h>\n /* xopintrin.h */"}, {"sha": "069f8e7cb8085275b0d0bda0d94983dcd70e0755", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -183,7 +183,7 @@\n /* rtmintrin.h */\n #define __builtin_ia32_xabort(M) __builtin_ia32_xabort(1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}, {"sha": "3e701394890adfaaf04f0e3f130eb41ad91164b9", "filename": "gcc/testsuite/gcc.target/i386/xrstor-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxrstor-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxrstor-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxrstor-1.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx -O2\" } */\n+/* { dg-final { scan-assembler \"xrstor\\[ \\\\t\\]\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+xsave_test (void)\n+{\n+  char xsave_region [512] __attribute__((aligned(64)));\n+  _xrstor (xsave_region, ((long long) 0xA0000000F));\n+}"}, {"sha": "3cf2a66cc95107315b88e449fb8e816751eee59d", "filename": "gcc/testsuite/gcc.target/i386/xrstor64-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxrstor64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxrstor64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxrstor64-1.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mxsave -O2\" } */\n+/* { dg-final { scan-assembler \"xrstor64\\[ \\\\t\\]\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+xsave_test (void)\n+{\n+  char xsave_region [512] __attribute__((aligned(64)));\n+  _xrstor64 (xsave_region, ((long long) 0xA0000000F));\n+}"}, {"sha": "9eee59739211be5e1e04c152fcfeb1abbf983b8d", "filename": "gcc/testsuite/gcc.target/i386/xsave-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsave-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsave-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsave-1.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mxsave -O2\" } */\n+/* { dg-final { scan-assembler \"xsave\\[ \\\\t\\]\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+xsave_test (void)\n+{\n+  char xsave_region [512] __attribute__((aligned(64)));\n+  _xsave (xsave_region, ((long long) 0xA0000000F));\n+}"}, {"sha": "661da9171c43541554c2351089988d5e8580b630", "filename": "gcc/testsuite/gcc.target/i386/xsave64-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsave64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsave64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsave64-1.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mxsave -O2\" } */\n+/* { dg-final { scan-assembler \"xsave64\\[ \\\\t\\]\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+xsave_test (void)\n+{\n+  char xsave_region [512] __attribute__((aligned(64)));\n+  _xsave64 (xsave_region, ((long long) 0xA0000000F));\n+}"}, {"sha": "b08a50a23407317c91b777569290c8753e9c165b", "filename": "gcc/testsuite/gcc.target/i386/xsaveopt-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsaveopt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsaveopt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsaveopt-1.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mxsaveopt -O2\" } */\n+/* { dg-final { scan-assembler \"xsaveopt\\[ \\\\t\\]\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+xsave_test (void)\n+{\n+  char xsaveopt_region [512] __attribute__((aligned(64)));\n+  _xsaveopt (xsaveopt_region, ((long long) 0xA0000000F));\n+}"}, {"sha": "f7864fe39999ccc3c23b29f7188fbaa0a5000d5a", "filename": "gcc/testsuite/gcc.target/i386/xsaveopt64-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsaveopt64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0d99bb607788d14a703a5ce8594c629e5e91dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsaveopt64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsaveopt64-1.c?ref=3a0d99bb607788d14a703a5ce8594c629e5e91dc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mxsaveopt -O2\" } */\n+/* { dg-final { scan-assembler \"xsaveopt64\\[ \\\\t\\]\" } } */\n+\n+#include <x86intrin.h>\n+\n+void extern\n+xsave_test (void)\n+{\n+  char xsaveopt_region [512] __attribute__((aligned(64)));\n+  _xsaveopt64 (xsaveopt_region, ((long long) 0xA0000000F));\n+}"}]}