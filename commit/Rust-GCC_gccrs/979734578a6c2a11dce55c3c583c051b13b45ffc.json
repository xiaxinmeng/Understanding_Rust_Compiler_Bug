{"sha": "979734578a6c2a11dce55c3c583c051b13b45ffc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc5NzM0NTc4YTZjMmExMWRjZTU1YzNjNTgzYzA1MWIxM2I0NWZmYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-09-08T19:33:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-09-08T19:33:47Z"}, "message": "re PR c++/67041 ([C++14] Variable template initialized by call to lambda does not compile)\n\n\tPR c++/67041\n\t* pt.c (tsubst_copy_and_build): Handle variables like functions.\n\nFrom-SVN: r227553", "tree": {"sha": "66b0992bdfac4420f7c587efa762b86ef109cddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66b0992bdfac4420f7c587efa762b86ef109cddc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/979734578a6c2a11dce55c3c583c051b13b45ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979734578a6c2a11dce55c3c583c051b13b45ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/979734578a6c2a11dce55c3c583c051b13b45ffc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979734578a6c2a11dce55c3c583c051b13b45ffc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51aae43f235863454bcce315c748b2836c5d3f98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51aae43f235863454bcce315c748b2836c5d3f98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51aae43f235863454bcce315c748b2836c5d3f98"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "3a412aeef36e210492796d7c7b08084d4474d312", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979734578a6c2a11dce55c3c583c051b13b45ffc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979734578a6c2a11dce55c3c583c051b13b45ffc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=979734578a6c2a11dce55c3c583c051b13b45ffc", "patch": "@@ -1,3 +1,8 @@\n+2015-09-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/67041\n+\t* pt.c (tsubst_copy_and_build): Handle variables like functions.\n+\n 2015-09-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/67369"}, {"sha": "05e6d83a3964aff9a0f3cfb82e8c9cce9cf23e99", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979734578a6c2a11dce55c3c583c051b13b45ffc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979734578a6c2a11dce55c3c583c051b13b45ffc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=979734578a6c2a11dce55c3c583c051b13b45ffc", "patch": "@@ -16321,15 +16321,14 @@ tsubst_copy_and_build (tree t,\n \tLAMBDA_EXPR_MUTABLE_P (r) = LAMBDA_EXPR_MUTABLE_P (t);\n \tLAMBDA_EXPR_DISCRIMINATOR (r)\n \t  = (LAMBDA_EXPR_DISCRIMINATOR (t));\n-\t/* For a function scope, we want to use tsubst so that we don't\n-\t   complain about referring to an auto function before its return\n-\t   type has been deduced.  Otherwise, we want to use tsubst_copy so\n-\t   that we look up the existing field/parameter/variable rather\n-\t   than build a new one.  */\n \ttree scope = LAMBDA_EXPR_EXTRA_SCOPE (t);\n-\tif (scope && TREE_CODE (scope) == FUNCTION_DECL)\n+\tif (!scope)\n+\t  /* No substitution needed.  */;\n+\telse if (VAR_OR_FUNCTION_DECL_P (scope))\n+\t  /* For a function or variable scope, we want to use tsubst so that we\n+\t     don't complain about referring to an auto before deduction.  */\n \t  scope = tsubst (scope, args, complain, in_decl);\n-\telse if (scope && TREE_CODE (scope) == PARM_DECL)\n+\telse if (TREE_CODE (scope) == PARM_DECL)\n \t  {\n \t    /* Look up the parameter we want directly, as tsubst_copy\n \t       doesn't do what we need.  */\n@@ -16342,8 +16341,12 @@ tsubst_copy_and_build (tree t,\n \t    if (DECL_CONTEXT (scope) == NULL_TREE)\n \t      DECL_CONTEXT (scope) = fn;\n \t  }\n-\telse\n+\telse if (TREE_CODE (scope) == FIELD_DECL)\n+\t  /* For a field, use tsubst_copy so that we look up the existing field\n+\t     rather than build a new one.  */\n \t  scope = RECUR (scope);\n+\telse\n+\t  gcc_unreachable ();\n \tLAMBDA_EXPR_EXTRA_SCOPE (r) = scope;\n \tLAMBDA_EXPR_RETURN_TYPE (r)\n \t  = tsubst (LAMBDA_EXPR_RETURN_TYPE (t), args, complain, in_decl);"}, {"sha": "4c2a3cb3e6076c71737690b13c76f0a2957b0c60", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-var-templ1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979734578a6c2a11dce55c3c583c051b13b45ffc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-var-templ1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979734578a6c2a11dce55c3c583c051b13b45ffc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-var-templ1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-var-templ1.C?ref=979734578a6c2a11dce55c3c583c051b13b45ffc", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/67041\n+// { dg-do compile { target c++14 } }\n+\n+template<typename T>\n+auto test = [](){\n+    return T{};\n+};\n+\n+int main() {\n+    test<int>();\n+}"}]}