{"sha": "d5b5a232d4555659943c2776d1df753e5c0387f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDViNWEyMzJkNDU1NTY1OTk0M2MyNzc2ZDFkZjc1M2U1YzAzODdmMw==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-09-28T17:29:59Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-09-28T17:29:59Z"}, "message": "re PR tree-optimization/67700 ([graphite] miscompile due to wrong codegen)\n\nfix PR67700\n\nThe patch makes the detection of scop parameters in parameter_index_in_region a\nbit more conservative by discarding scalar variables defined in function of data\nreferences defined in the scop.\n\n2015-09-25  Aditya Kumar  <aditya.k7@samsung.com>\n                Sebastian Pop  <s.pop@samsung.com>\n\n                PR tree-optimization/67700\n                * graphite-sese-to-poly.c (parameter_index_in_region): Call\n                invariant_in_sese_p_rec.\n                (extract_affine): Same.\n                (rewrite_cross_bb_scalar_deps): Call update_ssa.\n                * sese.c (invariant_in_sese_p_rec): Export.  Handle vdefs and vuses.\n                * sese.h (invariant_in_sese_p_rec): Declare.\n\n                * testsuite/gcc.dg/graphite/run-id-pr67700.c: New.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r228214", "tree": {"sha": "60998be0eae9d0a781a848fe9f960f7edde0aede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60998be0eae9d0a781a848fe9f960f7edde0aede"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5b5a232d4555659943c2776d1df753e5c0387f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5b5a232d4555659943c2776d1df753e5c0387f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5b5a232d4555659943c2776d1df753e5c0387f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5b5a232d4555659943c2776d1df753e5c0387f3/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a53bd6d4dc25af160c2986eb1efecd949118ad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a53bd6d4dc25af160c2986eb1efecd949118ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a53bd6d4dc25af160c2986eb1efecd949118ad3"}], "stats": {"total": 76, "additions": 73, "deletions": 3}, "files": [{"sha": "b7721444a161bb38b0e02ce76c615e5a6ffafce7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5b5a232d4555659943c2776d1df753e5c0387f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5b5a232d4555659943c2776d1df753e5c0387f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5b5a232d4555659943c2776d1df753e5c0387f3", "patch": "@@ -1,3 +1,14 @@\n+2015-09-28  Aditya Kumar  <aditya.k7@samsung.com>\n+            Sebastian Pop  <s.pop@samsung.com>\n+\n+\tPR tree-optimization/67700\n+\t* graphite-sese-to-poly.c (parameter_index_in_region): Call\n+\tinvariant_in_sese_p_rec.\n+\t(extract_affine): Same.\n+\t(rewrite_cross_bb_scalar_deps): Call update_ssa.\n+\t* sese.c (invariant_in_sese_p_rec): Export.  Handle vdefs and vuses.\n+\t* sese.h (invariant_in_sese_p_rec): Declare.\n+\n 2015-09-28  David Wohlferd  <dw@LimeGreenSocks.com>\n \n          * doc/extend.texi (Asm Labels): Break out text for data vs"}, {"sha": "3b8dd56d6425de27f225dc665168c6177fe5d367", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5b5a232d4555659943c2776d1df753e5c0387f3/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5b5a232d4555659943c2776d1df753e5c0387f3/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=d5b5a232d4555659943c2776d1df753e5c0387f3", "patch": "@@ -758,6 +758,9 @@ parameter_index_in_region (tree name, sese region)\n   if (TREE_CODE (TREE_TYPE (name)) != INTEGER_TYPE)\n     return -1;\n \n+  if (!invariant_in_sese_p_rec (name, region))\n+    return -1;\n+\n   i = parameter_index_in_region_1 (name, region);\n   if (i != -1)\n     return i;\n@@ -813,7 +816,8 @@ extract_affine (scop_p s, tree e, __isl_take isl_space *space)\n       break;\n \n     case SSA_NAME:\n-      gcc_assert (-1 != parameter_index_in_region_1 (e, SCOP_REGION (s)));\n+      gcc_assert (-1 != parameter_index_in_region_1 (e, s->region)\n+\t\t  || !invariant_in_sese_p_rec (e, s->region));\n       res = extract_affine_name (s, e, space);\n       break;\n \n@@ -2462,6 +2466,8 @@ rewrite_cross_bb_scalar_deps (scop_p scop, gimple_stmt_iterator *gsi)\n \t\t\t\t\t    def, use_stmt);\n       }\n \n+  update_ssa (TODO_update_ssa);\n+\n   return res;\n }\n "}, {"sha": "2050e2d2a1f1101d6796917da7df57e54d90234f", "filename": "gcc/sese.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5b5a232d4555659943c2776d1df753e5c0387f3/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5b5a232d4555659943c2776d1df753e5c0387f3/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=d5b5a232d4555659943c2776d1df753e5c0387f3", "patch": "@@ -760,9 +760,10 @@ set_ifsese_condition (ifsese if_region, tree condition)\n   gsi_insert_after (&gsi, cond_stmt, GSI_NEW_STMT);\n }\n \n-/* Return false if T is completely defined outside REGION.  */\n+/* Return true when T is defined outside REGION or when no definitions are\n+   variant in REGION.  */\n \n-static bool\n+bool\n invariant_in_sese_p_rec (tree t, sese region)\n {\n   ssa_op_iter iter;\n@@ -776,9 +777,18 @@ invariant_in_sese_p_rec (tree t, sese region)\n       || gimple_code (stmt) == GIMPLE_CALL)\n     return false;\n \n+  /* VDEF is variant when it is in the region.  */\n+  if (tree vdef = gimple_vdef (stmt))\n+    return false;\n+\n+  /* A VUSE may or may not be variant following the VDEFs.  */\n+  if (tree vuse = gimple_vuse (stmt))\n+    return invariant_in_sese_p_rec (vuse, region);\n+\n   FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_USE)\n     {\n       tree use = USE_FROM_PTR (use_p);\n+\n       if (!defined_in_sese_p (use, region))\n \tcontinue;\n "}, {"sha": "0d13d87d2fcf38a08e509525c1595e00fb275ae2", "filename": "gcc/sese.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5b5a232d4555659943c2776d1df753e5c0387f3/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5b5a232d4555659943c2776d1df753e5c0387f3/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=d5b5a232d4555659943c2776d1df753e5c0387f3", "patch": "@@ -64,6 +64,7 @@ extern edge copy_bb_and_scalar_dependences (basic_block, sese, edge,\n \t\t\t\t\t    vec<tree> , bool *);\n extern struct loop *outermost_loop_in_sese (sese, basic_block);\n extern tree scalar_evolution_in_region (sese, loop_p, tree);\n+extern bool invariant_in_sese_p_rec (tree, sese);\n \n /* Check that SESE contains LOOP.  */\n "}, {"sha": "bee7aedf77d97fb949b498ba55fbeabd73dfadd0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5b5a232d4555659943c2776d1df753e5c0387f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5b5a232d4555659943c2776d1df753e5c0387f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5b5a232d4555659943c2776d1df753e5c0387f3", "patch": "@@ -1,3 +1,9 @@\n+2015-09-28  Aditya Kumar  <aditya.k7@samsung.com>\n+            Sebastian Pop  <s.pop@samsung.com>\n+\n+        PR tree-optimization/67700\n+        * testsuite/gcc.dg/graphite/run-id-pr67700.c: New.\n+\n 2015-09-28  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/54236"}, {"sha": "81d9e7f26805213a6a27e15120514e7f781d9b74", "filename": "gcc/testsuite/gcc.dg/graphite/run-id-pr67700.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5b5a232d4555659943c2776d1df753e5c0387f3/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-pr67700.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5b5a232d4555659943c2776d1df753e5c0387f3/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-pr67700.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-pr67700.c?ref=d5b5a232d4555659943c2776d1df753e5c0387f3", "patch": "@@ -0,0 +1,36 @@\n+#include <stdlib.h>\n+#include <assert.h>\n+\n+struct abc {\n+  int a[81];\n+} *abcd;\n+\n+#define FPMATH_SSE 2\n+int global;\n+\n+void __attribute__ ((noinline)) foo()\n+{\n+  int pos = 0;\n+  int i;\n+\n+  if (!((global & FPMATH_SSE) != 0))\n+    for (i = 8; i <= 15; i++)\n+      abcd->a[pos++] = i;\n+\n+  for (i = 29; i <= 36; i++)\n+    abcd->a[pos++] = i;\n+}\n+\n+int main()\n+{\n+  int i;\n+  abcd = (struct abc*) malloc (sizeof (struct abc));\n+  for (i = 0; i <= 80; i++)\n+    abcd->a[i] = 0;\n+\n+  foo();\n+\n+  assert (abcd->a[8] == 29);\n+\n+  return 0;\n+}"}]}