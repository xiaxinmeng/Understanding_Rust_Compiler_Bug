{"sha": "75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjNmU1NDg2YjRlMjY2ZWY1ZTUxZThkOTRhYjczYWU5NGQ4NjA3Yg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-08-21T18:54:07Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-08-21T18:54:07Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (ordinary_java_source_files): Added\n\tSocketAddress.java, InetSocketAddress.java.\n\t* java/net/PortUnreachableException.java: Merged with Classpath.\n\t* java/net/SocketTimeoutException.java: Likewise.\n\t* java/net/URISyntaxException.java: Likewise.\n\t* java/net/SocketAddress.java: New class from Classpath.\n\t* java/net/InetSocketAddress.java: Likewise.\n\nFrom-SVN: r56494", "tree": {"sha": "c71c35641b332594b685388180f0a5230bfc5e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c71c35641b332594b685388180f0a5230bfc5e16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/comments", "author": null, "committer": null, "parents": [{"sha": "d873d8274339cd0a352eb4cf287f6b04eeb08c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d873d8274339cd0a352eb4cf287f6b04eeb08c1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d873d8274339cd0a352eb4cf287f6b04eeb08c1d"}], "stats": {"total": 358, "additions": 291, "deletions": 67}, "files": [{"sha": "2d8e5931f72a4b2697a935931b7ef97872472e85", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "patch": "@@ -1,3 +1,14 @@\n+2002-08-21  Tom Tromey  <tromey@redhat.com>\n+\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (ordinary_java_source_files): Added\n+\tSocketAddress.java, InetSocketAddress.java.\n+\t* java/net/PortUnreachableException.java: Merged with Classpath.\n+\t* java/net/SocketTimeoutException.java: Likewise.\n+\t* java/net/URISyntaxException.java: Likewise.\n+\t* java/net/SocketAddress.java: New class from Classpath.\n+\t* java/net/InetSocketAddress.java: Likewise.\n+\n 2003-08-21  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/Authenticator.java: updated JDK 1.4"}, {"sha": "89fff76cbfbcbe8e3fd42a2138ef99eb209bd518", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "patch": "@@ -1886,6 +1886,7 @@ java/net/DatagramSocketImpl.java \\\n java/net/FileNameMap.java \\\n java/net/HttpURLConnection.java\t\\\n java/net/InetAddress.java \\\n+java/net/InetSocketAddress.java \\\n java/net/JarURLConnection.java \\\n java/net/MalformedURLException.java \\\n java/net/MulticastSocket.java \\\n@@ -1898,6 +1899,7 @@ java/net/PortUnreachableException.java \\\n java/net/ProtocolException.java\t\\\n java/net/ServerSocket.java \\\n java/net/Socket.java \\\n+java/net/SocketAddress.java \\\n java/net/SocketException.java \\\n java/net/SocketImpl.java \\\n java/net/SocketImplFactory.java\t\\"}, {"sha": "d165075518e6327d7add589948104fb04d0af354", "filename": "libjava/Makefile.in", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "patch": "@@ -1648,6 +1648,7 @@ java/net/DatagramSocketImpl.java \\\n java/net/FileNameMap.java \\\n java/net/HttpURLConnection.java\t\\\n java/net/InetAddress.java \\\n+java/net/InetSocketAddress.java \\\n java/net/JarURLConnection.java \\\n java/net/MalformedURLException.java \\\n java/net/MulticastSocket.java \\\n@@ -1660,6 +1661,7 @@ java/net/PortUnreachableException.java \\\n java/net/ProtocolException.java\t\\\n java/net/ServerSocket.java \\\n java/net/Socket.java \\\n+java/net/SocketAddress.java \\\n java/net/SocketException.java \\\n java/net/SocketImpl.java \\\n java/net/SocketImplFactory.java\t\\\n@@ -2858,17 +2860,19 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/net/ContentHandlerFactory.P .deps/java/net/DatagramPacket.P \\\n .deps/java/net/DatagramSocket.P .deps/java/net/DatagramSocketImpl.P \\\n .deps/java/net/FileNameMap.P .deps/java/net/HttpURLConnection.P \\\n-.deps/java/net/InetAddress.P .deps/java/net/JarURLConnection.P \\\n+.deps/java/net/InetAddress.P .deps/java/net/InetSocketAddress.P \\\n+.deps/java/net/JarURLConnection.P \\\n .deps/java/net/MalformedURLException.P .deps/java/net/MulticastSocket.P \\\n .deps/java/net/NetPermission.P .deps/java/net/NoRouteToHostException.P \\\n .deps/java/net/PasswordAuthentication.P \\\n .deps/java/net/PlainDatagramSocketImpl.P \\\n .deps/java/net/PlainSocketImpl.P \\\n .deps/java/net/PortUnreachableException.P \\\n .deps/java/net/ProtocolException.P .deps/java/net/ServerSocket.P \\\n-.deps/java/net/Socket.P .deps/java/net/SocketException.P \\\n-.deps/java/net/SocketImpl.P .deps/java/net/SocketImplFactory.P \\\n-.deps/java/net/SocketOptions.P .deps/java/net/SocketPermission.P \\\n+.deps/java/net/Socket.P .deps/java/net/SocketAddress.P \\\n+.deps/java/net/SocketException.P .deps/java/net/SocketImpl.P \\\n+.deps/java/net/SocketImplFactory.P .deps/java/net/SocketOptions.P \\\n+.deps/java/net/SocketPermission.P \\\n .deps/java/net/SocketTimeoutException.P \\\n .deps/java/net/URISyntaxException.P .deps/java/net/URL.P \\\n .deps/java/net/URLClassLoader.P .deps/java/net/URLConnection.P \\"}, {"sha": "c542b8002254fb7041d61a0a1e662abb305a8faf", "filename": "libjava/java/net/InetSocketAddress.java", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2Fjava%2Fnet%2FInetSocketAddress.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2Fjava%2Fnet%2FInetSocketAddress.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInetSocketAddress.java?ref=75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "patch": "@@ -0,0 +1,128 @@\n+/* InetSocketAddress.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.net;\n+\n+/** \n+ * InetSocketAddress instances represent socket addresses\n+ * in the java.nio package. They encapsulate a InetAddress and\n+ * a port number.\n+ */\n+\n+public class InetSocketAddress extends SocketAddress\n+{\n+    InetAddress addr;\n+    int port;\n+    \n+    public InetSocketAddress(InetAddress addr, int port)\n+    {\n+\tthis.addr = addr;\n+\tthis.port = port;\n+    }\n+\n+    public InetSocketAddress(int port)\n+    {\n+\tthis.port = port;\n+\ttry {\n+\t    this.addr = InetAddress.getLocalHost();\n+\t} catch (Exception e) {\n+\t}\n+    }\n+\n+\n+    public InetSocketAddress(String hostname, int port)\n+    {\n+\tthis.port = port;\n+\ttry {\n+\t    this.addr = InetAddress.getByName(hostname);\n+\t} catch (Exception e) {\n+\t}\n+    }\n+ \n+    /** \n+     * Test if obj is a InetSocketAddress and\n+     * has the same address & port\n+     */\n+    public boolean equals(Object obj)\n+    {\n+\tif (obj instanceof InetSocketAddress)\n+\t    {\n+\t\tInetSocketAddress a = (InetSocketAddress) obj;\n+\t\treturn addr.equals(a.addr) && a.port == port;\n+\t    }\n+\treturn false;\n+    }\n+\n+    public InetAddress getAddress()\n+    {\n+\treturn addr;\n+    }\n+\n+    public String getHostName()\n+    {\n+\treturn addr.getHostName();\n+    }\n+\n+    public int getPort()\n+    {\n+\treturn port;\n+    }\n+    \n+    /**\n+     * TODO: see what sun does here.\n+     */\n+    public int hashCode()\n+    {\n+\treturn port + addr.hashCode();\n+    }\n+\n+    /**\n+     * TODO: see what sun does here.\n+     */\n+    public boolean isUnresolved()\n+    {\n+\treturn addr == null;\n+    }\n+    \n+    /**\n+     * TODO: see what sun does here.\n+     */\n+    public String toString()\n+    {\n+\treturn \"SA:\"+addr+\":\"+port;\n+    }\n+}"}, {"sha": "b6abfe95a92c36cce2c612ab43a0fd39397ebeaf", "filename": "libjava/java/net/PortUnreachableException.java", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2Fjava%2Fnet%2FPortUnreachableException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2Fjava%2Fnet%2FPortUnreachableException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FPortUnreachableException.java?ref=75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "patch": "@@ -1,4 +1,4 @@\n-/* PortUnreachableException.java\n+/* PortUnreachableException.java -- received an ICMP port unreachable datagram\n    Copyright (C) 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,18 +37,21 @@\n \n package java.net;\n \n-import java.io.IOException;\n-\n /**\n- * This exception indicates that a URL passed to an object was not in a\n- * valid format.\n+ * This exception signals that an ICMP port unreachable datagram has been\n+ * received.\n  *\n- * @author Michael Koch <konqueror@gmx.de>\n+ * @author Eric Blake <ebb9@email.byu.edu>\n  * @since 1.4\n- * @status should be completely JDK 1.4 compatible\n+ * @status updated to 1.4\n  */\n-public class PortUnreachableException extends IOException\n+public class PortUnreachableException extends SocketException\n {\n+  /**\n+   * Compatible with JDK 1.0+.\n+   */\n+  private static final long serialVersionUID = 8462541992376507323L;\n+\n   /**\n    * Create a new instance without a descriptive error message.\n    */\n@@ -66,3 +69,4 @@ public PortUnreachableException(String message)\n     super(message);\n   }\n } // class PortUnreachableException\n+"}, {"sha": "d37020b8e71e85a66a646f4d57be81700f11c729", "filename": "libjava/java/net/SocketAddress.java", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2Fjava%2Fnet%2FSocketAddress.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2Fjava%2Fnet%2FSocketAddress.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketAddress.java?ref=75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "patch": "@@ -0,0 +1,54 @@\n+/* SocketAddress.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.net;\n+\n+import java.io.*;\n+\n+/** \n+ * Abstract base class for InetSocketAddress.\n+ * InetSocketAddress is to my knowledge the only derived\n+ * class. [Ronald]\n+ */\n+\n+public abstract class SocketAddress implements Serializable\n+{\n+    public SocketAddress()\n+    {\n+    }\n+}\n+"}, {"sha": "e3895518d19d6211c9b8c2caf7829302f8886598", "filename": "libjava/java/net/SocketTimeoutException.java", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2Fjava%2Fnet%2FSocketTimeoutException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2Fjava%2Fnet%2FSocketTimeoutException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketTimeoutException.java?ref=75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "patch": "@@ -1,4 +1,4 @@\n-/* SocketTimeoutException.java\n+/* SocketTimeoutException.java -- the socket timed out\n    Copyright (C) 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -37,19 +37,22 @@\n \n package java.net;\n \n-import java.io.IOException;\n+import java.io.InterruptedIOException;\n \n /**\n- * This exception indicates that a generic error occurred related to an\n- * operation on a socket.  Check the descriptive message (if any) for\n- * details on the nature of this error\n+ * This exception signals that a socket read or accept timed out.\n  *\n- * @author Michael Koch <konqueror@gmx.de>\n+ * @author Eric Blake <ebb9@email.byu.edu>\n  * @since 1.4\n- * @status should be completele JDK 1.4 compatible\n+ * @status updated to 1.4\n  */\n-public class SocketTimeoutException extends IOException\n+public class SocketTimeoutException extends InterruptedIOException\n {\n+  /**\n+   * Compatible with JDK 1.4+.\n+   */\n+  private static final long serialVersionUID = -8846654841826352300L;\n+\n   /**\n    * Create a new instance without a descriptive error message.\n    */"}, {"sha": "cf725665e88218a9810538a5a4bbd1fd672dcfdc", "filename": "libjava/java/net/URISyntaxException.java", "status": "modified", "additions": 63, "deletions": 45, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2Fjava%2Fnet%2FURISyntaxException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6e5486b4e266ef5e51e8d94ab73ae94d8607b/libjava%2Fjava%2Fnet%2FURISyntaxException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURISyntaxException.java?ref=75c6e5486b4e266ef5e51e8d94ab73ae94d8607b", "patch": "@@ -1,4 +1,4 @@\n-/* URISyntaxException.java\n+/* URISyntaxException.java -- a string could not be parsed as a URI\n    Copyright (C) 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -38,88 +38,106 @@\n package java.net;\n \n /**\n- * This exception indicates that a generic error occurred related to an\n- * operation on a socket.  Check the descriptive message (if any) for\n- * details on the nature of this error\n+ * This exception is thrown when a String cannot be parsed as a URI.\n  *\n- * @author Michael Koch <konqueror@gmx.de>\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @see URI\n  * @since 1.4\n- * @status Should be completely JDK 1.4 compatible\n+ * @status updated to 1.4\n  */\n public class URISyntaxException extends Exception\n {\n-  private String input;\n-  private String reason;\n-  private int index;\n- \n   /**\n-   * @param input Input that cause the exception\n-   * @param reason Reason of the exception\n-   * @param index Position of the index or -1 if unknown\n+   * Compatible with JDK 1.4+.\n+   */\n+  private static final long serialVersionUID = 2137979680897488891L;\n+\n+  /**\n+   * The failed input.\n    *\n-   * @exception NullPointerException\n-   * @exception IllegalArgumentException\n+   * @serial the bad URI\n    */\n-  public URISyntaxException(String input, String reason, int index)\n-  {\n-    if (input == null || reason == null)\n-      throw new NullPointerException();\n-    \n-    if (index < -1)\n-      throw new IllegalArgumentException();\n+  private final String input;\n \n-    this.input = input;\n-    this.reason = reason;\n-    this.index = index;\n+  /**\n+   * The index of failure.\n+   *\n+   * @serial the location of the problem\n+   */\n+  private final int index;\n+\n+  /**\n+   * Create an exception from the invalid string, with the index set to -1.\n+   *\n+   * @param input the bad URI\n+   * @param msg the descriptive error message\n+   * @throws NullPointerException if input or msg are null\n+   */\n+  public URISyntaxException(String input, String msg)\n+  {\n+    this(input, msg, -1);\n   }\n \n   /**\n-   * @param input Input that cause the exception\n-   * @param reason Reason of the exception\n+   * Create an exception from the invalid string, with the index of the\n+   * point of failure.\n    *\n-   * @exception NullPointerException\n+   * @param input the bad URI\n+   * @param msg the descriptive error message\n+   * @param index the index of the parse error, or -1\n+   * @throws NullPointerException if input or msg are null\n+   * @throws IllegalArgumentException if index &lt; -1\n    */\n-  public URISyntaxException(String input, String reason)\n+  public URISyntaxException(String input, String msg, int index)\n   {\n-    if (input == null || reason == null)\n-      throw new NullPointerException();\n-    \n-    this.input = input;\n-    this.reason = reason;\n-    this.index = -1;\n+    // The toString() hack checks for null.\n+    super(msg.toString());\n+    this.input = input.toString();\n+    this.index = index;\n+    if (index < -1)\n+      throw new IllegalArgumentException();\n   }\n \n   /**\n-   * @return Returns the input that caused this exception\n+   * Returns the bad input string.\n+   *\n+   * @return the bad URI, guaranteed non-null\n    */\n   public String getInput()\n   {\n     return input;\n   }\n \n   /**\n-   * @return Returns the reason of this exception\n+   * Returns the reason for the failure.\n+   *\n+   * @return the message, guaranteed non-null\n    */\n   public String getReason()\n   {\n-    return reason;\n+    return super.getMessage();\n   }\n \n   /**\n-   * @return Returns the index/position of this exception or -1 if unknown\n+   * Returns the index of the failure, or -1.\n+   *\n+   * @return the index of failure\n    */\n   public int getIndex()\n   {\n     return index;\n   }\n \n   /**\n-   * This function returns an error message including input and reason.\n-   * \n-   * @return Returns a exception message\n+   * Returns a message describing the parse error, as if by\n+   * <code>getReason() + (getIndex() &gt;= 0 ? \" at index \" + getIndex() : \"\")\n+   * + \": \" + getInput()</code>.\n+   *\n+   * @return the message string\n    */\n   public String getMessage()\n   {\n-    return input + \":\" + reason;\n+    return super.getMessage() + (index >= 0 ? \" at index \" + index : \"\")\n+      + \": \" + input;\n   }\n-} // class URISyntaxException\n+}"}]}