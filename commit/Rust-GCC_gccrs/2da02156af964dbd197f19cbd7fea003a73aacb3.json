{"sha": "2da02156af964dbd197f19cbd7fea003a73aacb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRhMDIxNTZhZjk2NGRiZDE5N2YxOWNiZDdmZWEwMDNhNzNhYWNiMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-06-15T09:22:00Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-06-15T09:22:00Z"}, "message": "re PR middle-end/53590 (compiler fails to generate SIMD instruction for FP division)\n\n\tPR middle-end/53590\n\t* common.opt (-fdelete-dead-exceptions): New switch.\n\t* doc/invoke.texi (Code Gen Options): Document it.\n\t* cse.c (count_reg_usage) <CALL_INSN>: Use !insn_nothrow_p in lieu of\n\tinsn_could_throw_p predicate.  Do not skip an insn that could throw\n\tif dead exceptions can be deleted.\n\t(insn_live_p): Likewise, do not return true in that case.\n\t* dce.c (can_alter_cfg): New flag.\n\t(deletable_insn_p): Do not return false for an insn that can throw if\n\tthe CFG can be altered and dead exceptions can be deleted.\n\t(init_dce): Set can_alter_cfg to false for fast DCE, true otherwise.\n\t* dse.c (scan_insn): Use !insn_nothrow_p in lieu of insn_could_throw_\n\tpredicate. Do not preserve an insn that could throw if dead exceptions\n\tcan be deleted.\n\t* function.h (struct function): Add can_delete_dead_exceptions flag.\n\t* function.c (allocate_struct_function): Set it.\n\t* lto-streamer-in.c (input_struct_function_base): Stream it.\n\t* lto-streamer-out.c (input_struct_function_base): Likewise.\n\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Do not mark a\n\tstatement that could throw as necessary if dead exceptions can be\n\tdeleted.\nada/\n\t* gcc-interface/misc.c (gnat_init_options_struct): Set\n\topts->x_flag_delete_dead_exceptions to 1.\n\nFrom-SVN: r188651", "tree": {"sha": "25c62c51c178ea6a10880eb537b869fdb857970d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25c62c51c178ea6a10880eb537b869fdb857970d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2da02156af964dbd197f19cbd7fea003a73aacb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2da02156af964dbd197f19cbd7fea003a73aacb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2da02156af964dbd197f19cbd7fea003a73aacb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2da02156af964dbd197f19cbd7fea003a73aacb3/comments", "author": null, "committer": null, "parents": [{"sha": "6724292e72a9bdbafb0d95587740378f36036707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6724292e72a9bdbafb0d95587740378f36036707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6724292e72a9bdbafb0d95587740378f36036707"}], "stats": {"total": 81, "additions": 71, "deletions": 10}, "files": [{"sha": "0322fbf9f428aa0985ab32f01e612fe84fe89587", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2da02156af964dbd197f19cbd7fea003a73aacb3", "patch": "@@ -1,3 +1,27 @@\n+2012-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/53590\n+\t* common.opt (-fdelete-dead-exceptions): New switch.\n+\t* doc/invoke.texi (Code Gen Options): Document it.\n+\t* cse.c (count_reg_usage) <CALL_INSN>: Use !insn_nothrow_p in lieu of\n+\tinsn_could_throw_p predicate.  Do not skip an insn that could throw\n+\tif dead exceptions can be deleted.\n+\t(insn_live_p): Likewise, do not return true in that case.\n+\t* dce.c (can_alter_cfg): New flag.\n+\t(deletable_insn_p): Do not return false for an insn that can throw if\n+\tthe CFG can be altered and dead exceptions can be deleted.\n+\t(init_dce): Set can_alter_cfg to false for fast DCE, true otherwise.\n+\t* dse.c (scan_insn): Use !insn_nothrow_p in lieu of insn_could_throw_\n+\tpredicate. Do not preserve an insn that could throw if dead exceptions\n+\tcan be deleted.\n+\t* function.h (struct function): Add can_delete_dead_exceptions flag.\n+\t* function.c (allocate_struct_function): Set it.\n+\t* lto-streamer-in.c (input_struct_function_base): Stream it.\n+\t* lto-streamer-out.c (input_struct_function_base): Likewise.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Do not mark a\n+\tstatement that could throw as necessary if dead exceptions can be\n+\tdeleted.\n+\n 2012-06-14  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* config/tilegx/sync.md (atomic_fetch_sub<mode>): Fix typo."}, {"sha": "d9be5f8e1cbe71a5bda4513a8b2847897440620a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2da02156af964dbd197f19cbd7fea003a73aacb3", "patch": "@@ -1,3 +1,9 @@\n+2012-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/53590\n+\t* gcc-interface/misc.c (gnat_init_options_struct): Set\n+\topts->x_flag_delete_dead_exceptions to 1.\n+\n 2012-06-14  Jose Ruiz  <ruiz@adacore.com>\n \n \t* gcc-interface/Make-lang.in (ada.install-common, ada.uninstall):"}, {"sha": "baa44c95be7d14530bcaf4d65c92c8691c7108e3", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=2da02156af964dbd197f19cbd7fea003a73aacb3", "patch": "@@ -167,6 +167,9 @@ gnat_init_options_struct (struct gcc_options *opts)\n {\n   /* Uninitialized really means uninitialized in Ada.  */\n   opts->x_flag_zero_initialized_in_bss = 0;\n+\n+  /* We can delete dead instructions that may throw exceptions in Ada.  */\n+  opts->x_flag_delete_dead_exceptions = 1;\n }\n \n /* Initialize for option processing.  */"}, {"sha": "2a14f18909739b5f2a4e9eb240e1623abbc35230", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=2da02156af964dbd197f19cbd7fea003a73aacb3", "patch": "@@ -979,6 +979,10 @@ fdelayed-branch\n Common Report Var(flag_delayed_branch) Optimization\n Attempt to fill delay slots of branch instructions\n \n+fdelete-dead-exceptions\n+Common Report Var(flag_delete_dead_exceptions) Init(0)\n+Delete dead instructions that may throw exceptions\n+\n fdelete-null-pointer-checks\n Common Report Var(flag_delete_null_pointer_checks) Init(1) Optimization\n Delete useless null pointer checks"}, {"sha": "9d5e32eee39d00733e4a08e08f7ebdd0804ef009", "filename": "gcc/cse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=2da02156af964dbd197f19cbd7fea003a73aacb3", "patch": "@@ -599,7 +599,6 @@ static void invalidate_from_clobbers (rtx);\n static void invalidate_from_sets_and_clobbers (rtx);\n static rtx cse_process_notes (rtx, rtx, bool *);\n static void cse_extended_basic_block (struct cse_basic_block_data *);\n-static void count_reg_usage (rtx, int *, rtx, int);\n static int check_for_label_ref (rtx *, void *);\n extern void dump_class (struct table_elt*);\n static void get_cse_reg_info_1 (unsigned int regno);\n@@ -6692,10 +6691,11 @@ count_reg_usage (rtx x, int *counts, rtx dest, int incr)\n     case CALL_INSN:\n     case INSN:\n     case JUMP_INSN:\n-      /* We expect dest to be NULL_RTX here.  If the insn may trap,\n+      /* We expect dest to be NULL_RTX here.  If the insn may throw,\n \t or if it cannot be deleted due to side-effects, mark this fact\n \t by setting DEST to pc_rtx.  */\n-      if (insn_could_throw_p (x) || side_effects_p (PATTERN (x)))\n+      if ((!cfun->can_delete_dead_exceptions && !insn_nothrow_p (x))\n+\t  || side_effects_p (PATTERN (x)))\n \tdest = pc_rtx;\n       if (code == CALL_INSN)\n \tcount_reg_usage (CALL_INSN_FUNCTION_USAGE (x), counts, dest, incr);\n@@ -6800,7 +6800,7 @@ static bool\n insn_live_p (rtx insn, int *counts)\n {\n   int i;\n-  if (insn_could_throw_p (insn))\n+  if (!cfun->can_delete_dead_exceptions && !insn_nothrow_p (insn))\n     return true;\n   else if (GET_CODE (PATTERN (insn)) == SET)\n     return set_live_p (PATTERN (insn), insn, counts);"}, {"sha": "8954d5c0c01fd188eee894606c11d53f286f1201", "filename": "gcc/dce.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=2da02156af964dbd197f19cbd7fea003a73aacb3", "patch": "@@ -47,6 +47,9 @@ along with GCC; see the file COPYING3.  If not see\n    we don't want to reenter it.  */\n static bool df_in_progress = false;\n \n+/* True if we are allowed to alter the CFG in this pass.  */\n+static bool can_alter_cfg = false;\n+\n /* Instructions that have been marked but whose dependencies have not\n    yet been processed.  */\n static VEC(rtx,heap) *worklist;\n@@ -113,8 +116,9 @@ deletable_insn_p (rtx insn, bool fast, bitmap arg_stores)\n   if (!NONJUMP_INSN_P (insn))\n     return false;\n \n-  /* Don't delete insns that can throw.  */\n-  if (!insn_nothrow_p (insn))\n+  /* Don't delete insns that may throw if we cannot do so.  */\n+  if (!(cfun->can_delete_dead_exceptions && can_alter_cfg)\n+      && !insn_nothrow_p (insn))\n     return false;\n \n   body = PATTERN (insn);\n@@ -711,7 +715,10 @@ init_dce (bool fast)\n     {\n       bitmap_obstack_initialize (&dce_blocks_bitmap_obstack);\n       bitmap_obstack_initialize (&dce_tmp_bitmap_obstack);\n+      can_alter_cfg = false;\n     }\n+  else\n+    can_alter_cfg = true;\n \n   marked = sbitmap_alloc (get_max_uid () + 1);\n   sbitmap_zero (marked);"}, {"sha": "b74f9abd7d9ab57f38cf764f5fe4f47ebfbff02d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2da02156af964dbd197f19cbd7fea003a73aacb3", "patch": "@@ -975,7 +975,7 @@ See S/390 and zSeries Options.\n @xref{Code Gen Options,,Options for Code Generation Conventions}.\n @gccoptlist{-fcall-saved-@var{reg}  -fcall-used-@var{reg} @gol\n -ffixed-@var{reg}  -fexceptions @gol\n--fnon-call-exceptions  -funwind-tables @gol\n+-fnon-call-exceptions  -fdelete-dead-exceptions  -funwind-tables @gol\n -fasynchronous-unwind-tables @gol\n -finhibit-size-directive  -finstrument-functions @gol\n -finstrument-functions-exclude-function-list=@var{sym},@var{sym},@dots{} @gol\n@@ -19317,6 +19317,14 @@ instructions to throw exceptions, i.e.@: memory references or floating-point\n instructions.  It does not allow exceptions to be thrown from\n arbitrary signal handlers such as @code{SIGALRM}.\n \n+@item -fdelete-dead-exceptions\n+@opindex fdelete-dead-exceptions\n+Consider that instructions that may throw exceptions but don't otherwise\n+contribute to the execution of the program can be optimized away.\n+This option is enabled by default for the Ada front end, as permitted by\n+the Ada language specification.\n+Optimization passes that cause dead exceptions to be removed are enabled independently at different optimization levels.\n+\n @item -funwind-tables\n @opindex funwind-tables\n Similar to @option{-fexceptions}, except that it just generates any needed"}, {"sha": "0e40c8539cfd8e601b08e2a938d623f134650e09", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=2da02156af964dbd197f19cbd7fea003a73aacb3", "patch": "@@ -2628,7 +2628,7 @@ scan_insn (bb_info_t bb_info, rtx insn)\n      them.  */\n   if ((GET_CODE (PATTERN (insn)) == CLOBBER)\n       || volatile_refs_p (PATTERN (insn))\n-      || insn_could_throw_p (insn)\n+      || (!cfun->can_delete_dead_exceptions && !insn_nothrow_p (insn))\n       || (RTX_FRAME_RELATED_P (insn))\n       || find_reg_note (insn, REG_FRAME_RELATED_EXPR, NULL_RTX))\n     insn_info->cannot_delete = true;"}, {"sha": "9e79bcd83336f2a8e4b0bb8c83c14af379e5e78f", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=2da02156af964dbd197f19cbd7fea003a73aacb3", "patch": "@@ -4496,6 +4496,7 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n       /* ??? This could be set on a per-function basis by the front-end\n          but is this worth the hassle?  */\n       cfun->can_throw_non_call_exceptions = flag_non_call_exceptions;\n+      cfun->can_delete_dead_exceptions = flag_delete_dead_exceptions;\n     }\n }\n "}, {"sha": "f2fb099ea01e8c3b84ca90cf2e3a0cdacec3856a", "filename": "gcc/function.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=2da02156af964dbd197f19cbd7fea003a73aacb3", "patch": "@@ -615,6 +615,10 @@ struct GTY(()) function {\n      exceptions.  */\n   unsigned int can_throw_non_call_exceptions : 1;\n \n+  /* Nonzero if instructions that may throw exceptions but don't otherwise\n+     contribute to the execution of the program can be deleted.  */\n+  unsigned int can_delete_dead_exceptions : 1;\n+\n   /* Fields below this point are not set for abstract functions; see\n      allocate_struct_function.  */\n "}, {"sha": "98390940f1229d91d3249fb215cf5284b327f404", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=2da02156af964dbd197f19cbd7fea003a73aacb3", "patch": "@@ -803,6 +803,7 @@ input_struct_function_base (struct function *fn, struct data_in *data_in,\n   fn->returns_pcc_struct = bp_unpack_value (&bp, 1);\n   fn->returns_struct = bp_unpack_value (&bp, 1);\n   fn->can_throw_non_call_exceptions = bp_unpack_value (&bp, 1);\n+  fn->can_delete_dead_exceptions = bp_unpack_value (&bp, 1);\n   fn->always_inline_functions_inlined = bp_unpack_value (&bp, 1);\n   fn->after_inlining = bp_unpack_value (&bp, 1);\n   fn->stdarg = bp_unpack_value (&bp, 1);"}, {"sha": "370bf0a7ae80c40683a9b45dea48d12ceed1be15", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=2da02156af964dbd197f19cbd7fea003a73aacb3", "patch": "@@ -761,6 +761,7 @@ output_struct_function_base (struct output_block *ob, struct function *fn)\n   bp_pack_value (&bp, fn->returns_pcc_struct, 1);\n   bp_pack_value (&bp, fn->returns_struct, 1);\n   bp_pack_value (&bp, fn->can_throw_non_call_exceptions, 1);\n+  bp_pack_value (&bp, fn->can_delete_dead_exceptions, 1);\n   bp_pack_value (&bp, fn->always_inline_functions_inlined, 1);\n   bp_pack_value (&bp, fn->after_inlining, 1);\n   bp_pack_value (&bp, fn->stdarg, 1);"}, {"sha": "8763cfb28d2b8ded3aff1c65c06a1ab36c68ac92", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2da02156af964dbd197f19cbd7fea003a73aacb3/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=2da02156af964dbd197f19cbd7fea003a73aacb3", "patch": "@@ -272,8 +272,10 @@ static void\n mark_stmt_if_obviously_necessary (gimple stmt, bool aggressive)\n {\n   /* With non-call exceptions, we have to assume that all statements could\n-     throw.  If a statement may throw, it is inherently necessary.  */\n-  if (cfun->can_throw_non_call_exceptions && stmt_could_throw_p (stmt))\n+     throw.  If a statement could throw, it can be deemed necessary.  */\n+  if (cfun->can_throw_non_call_exceptions\n+      && !cfun->can_delete_dead_exceptions\n+      && stmt_could_throw_p (stmt))\n     {\n       mark_stmt_necessary (stmt, true);\n       return;"}]}