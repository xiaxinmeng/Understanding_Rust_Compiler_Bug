{"sha": "2d10ccaa001ba9cb367ee8d8d34512454d6bb293", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQxMGNjYWEwMDFiYTljYjM2N2VlOGQ4ZDM0NTEyNDU0ZDZiYjI5Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-06-12T21:22:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-06-12T21:22:10Z"}, "message": "decl2.c (coerce_new_type, [...]): Add location_t parameter and adjust error_at calls.\n\n/cp\n2018-06-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl2.c (coerce_new_type, coerce_delete_type): Add location_t\n\tparameter and adjust error_at calls.\n\t* decl.c (grok_op_properties): Adjust calls.\n\t* cp-tree.h (oerce_new_type, coerce_delete_type): Adjust decls.\n\n/testsuite\n2018-06-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/init/delete3.C: New.\n\t* g++.dg/init/new49.C: Likewise.\n\t* g++.dg/init/new25.C: Test locations too.\n\t* g++.dg/template/new4.C: Likewise.\n\t* g++.old-deja/g++.jason/operator.C: Likewise.\n\nFrom-SVN: r261527", "tree": {"sha": "b823a06d95bc72c285482124c51a4d6fadf9a95f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b823a06d95bc72c285482124c51a4d6fadf9a95f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d10ccaa001ba9cb367ee8d8d34512454d6bb293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d10ccaa001ba9cb367ee8d8d34512454d6bb293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d10ccaa001ba9cb367ee8d8d34512454d6bb293", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/comments", "author": null, "committer": null, "parents": [{"sha": "4db9ca8624e902b668ef394cf81e68e4ed5faa89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db9ca8624e902b668ef394cf81e68e4ed5faa89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db9ca8624e902b668ef394cf81e68e4ed5faa89"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "05105ae7cfe789038cb740f182c2f55129e3b2b0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d10ccaa001ba9cb367ee8d8d34512454d6bb293", "patch": "@@ -1,3 +1,10 @@\n+2018-06-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl2.c (coerce_new_type, coerce_delete_type): Add location_t\n+\tparameter and adjust error_at calls.\n+\t* decl.c (grok_op_properties): Adjust calls.\n+\t* cp-tree.h (oerce_new_type, coerce_delete_type): Adjust decls.\n+\n 2018-06-12  Marek Polacek  <polacek@redhat.com>\n \n \tCore issue 1331 - const mismatch with defaulted copy constructor"}, {"sha": "59ad38107a8643a1d640829d399b7950de5d0a6b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2d10ccaa001ba9cb367ee8d8d34512454d6bb293", "patch": "@@ -6346,8 +6346,8 @@ extern bool attributes_naming_typedef_ok\t(tree);\n extern void cplus_decl_attributes\t\t(tree *, tree, int);\n extern void finish_anon_union\t\t\t(tree);\n extern void cxx_post_compilation_parsing_cleanups (void);\n-extern tree coerce_new_type\t\t\t(tree);\n-extern tree coerce_delete_type\t\t\t(tree);\n+extern tree coerce_new_type\t\t\t(tree, location_t);\n+extern tree coerce_delete_type\t\t\t(tree, location_t);\n extern void comdat_linkage\t\t\t(tree);\n extern void determine_visibility\t\t(tree);\n extern void constrain_class_visibility\t\t(tree);"}, {"sha": "de1b3415afb980236db2ef10895de698a7baa126", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2d10ccaa001ba9cb367ee8d8d34512454d6bb293", "patch": "@@ -13153,11 +13153,11 @@ grok_op_properties (tree decl, bool complain)\n \t}\n \n       if (op_flags & OVL_OP_FLAG_DELETE)\n-\tTREE_TYPE (decl) = coerce_delete_type (TREE_TYPE (decl));\n+\tTREE_TYPE (decl) = coerce_delete_type (TREE_TYPE (decl), loc);\n       else\n \t{\n \t  DECL_IS_OPERATOR_NEW (decl) = 1;\n-\t  TREE_TYPE (decl) = coerce_new_type (TREE_TYPE (decl));\n+\t  TREE_TYPE (decl) = coerce_new_type (TREE_TYPE (decl), loc);\n \t}\n \n       return true;"}, {"sha": "cbe2f2250f257c92eeae67713c96f7279089ff4c", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2d10ccaa001ba9cb367ee8d8d34512454d6bb293", "patch": "@@ -1676,7 +1676,7 @@ finish_anon_union (tree anon_union_decl)\n    what compiler will be expecting.  */\n \n tree\n-coerce_new_type (tree type)\n+coerce_new_type (tree type, location_t loc)\n {\n   int e = 0;\n   tree args = TYPE_ARG_TYPES (type);\n@@ -1686,7 +1686,8 @@ coerce_new_type (tree type)\n   if (!same_type_p (TREE_TYPE (type), ptr_type_node))\n     {\n       e = 1;\n-      error (\"%<operator new%> must return type %qT\", ptr_type_node);\n+      error_at (loc, \"%<operator new%> must return type %qT\",\n+\t\tptr_type_node);\n     }\n \n   if (args && args != void_list_node)\n@@ -1697,8 +1698,8 @@ coerce_new_type (tree type)\n \t     \n \t     The first parameter shall not have an associated default\n \t     argument.  */\n-\t  error (\"the first parameter of %<operator new%> cannot \"\n-\t\t \"have a default argument\");\n+\t  error_at (loc, \"the first parameter of %<operator new%> cannot \"\n+\t\t    \"have a default argument\");\n \t  /* Throw away the default argument.  */\n \t  TREE_PURPOSE (args) = NULL_TREE;\n \t}\n@@ -1713,7 +1714,7 @@ coerce_new_type (tree type)\n     e = 2;\n \n   if (e == 2)\n-    permerror (input_location, \"%<operator new%> takes type %<size_t%> (%qT) \"\n+    permerror (loc, \"%<operator new%> takes type %<size_t%> (%qT) \"\n \t       \"as first parameter\", size_type_node);\n \n   switch (e)\n@@ -1732,7 +1733,7 @@ coerce_new_type (tree type)\n }\n \n tree\n-coerce_delete_type (tree type)\n+coerce_delete_type (tree type, location_t loc)\n {\n   int e = 0;\n   tree args = TYPE_ARG_TYPES (type);\n@@ -1742,7 +1743,8 @@ coerce_delete_type (tree type)\n   if (!same_type_p (TREE_TYPE (type), void_type_node))\n     {\n       e = 1;\n-      error (\"%<operator delete%> must return type %qT\", void_type_node);\n+      error_at (loc, \"%<operator delete%> must return type %qT\",\n+\t\tvoid_type_node);\n     }\n \n   if (!args || args == void_list_node\n@@ -1751,8 +1753,8 @@ coerce_delete_type (tree type)\n       e = 2;\n       if (args && args != void_list_node)\n \targs = TREE_CHAIN (args);\n-      error (\"%<operator delete%> takes type %qT as first parameter\",\n-\t     ptr_type_node);\n+      error_at (loc, \"%<operator delete%> takes type %qT as first parameter\",\n+\t\tptr_type_node);\n     }\n   switch (e)\n   {"}, {"sha": "d109440f6e4fe2971b2f266fd7e4f30502c7bc3e", "filename": "gcc/testsuite/g++.dg/init/delete3.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdelete3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdelete3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdelete3.C?ref=2d10ccaa001ba9cb367ee8d8d34512454d6bb293", "patch": "@@ -0,0 +1 @@\n+int operator delete (void*, int);  // { dg-error \"5:.operator delete. must return type .void.\" }"}, {"sha": "7ca57acd8c247683be4552a5a43e20093f7a23ad", "filename": "gcc/testsuite/g++.dg/init/new25.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew25.C?ref=2d10ccaa001ba9cb367ee8d8d34512454d6bb293", "patch": "@@ -4,14 +4,14 @@\n class C\n {\n public:\n-  void* operator new(std::size_t = 32) throw (std::bad_alloc); // { dg-error \"first parameter\" }\n+  void* operator new(std::size_t = 32) throw (std::bad_alloc); // { dg-error \"9:the first parameter of .operator new. cannot have a default argument\" }\n \t\t\t\t\t\t\t       // { dg-error \"dynamic exception specification\" \"\" { target c++17 } .-1 }\n \t\t\t\t\t\t\t       // { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++17 } } } .-2 }\n-  void* operator new[](std::size_t = 32) throw (std::bad_alloc); // { dg-error \"first parameter\" }\n+  void* operator new[](std::size_t = 32) throw (std::bad_alloc); // { dg-error \"9:the first parameter of .operator new. cannot have a default argument\" }\n \t\t\t\t\t\t\t\t // { dg-error \"dynamic exception specification\" \"\" { target c++17 } .-1 }\n \t\t\t\t\t\t\t\t // { dg-warning \"deprecated\" \"\" { target { c++11 && { ! c++17 } } } .-2 }\n-  void* operator new(std::size_t = 32, const std::nothrow_t&) throw(); // { dg-error \"first parameter\" }\n-  void* operator new[](std::size_t = 32, const std::nothrow_t&) throw(); // { dg-error \"first parameter\" }\n+  void* operator new(std::size_t = 32, const std::nothrow_t&) throw(); // { dg-error \"9:the first parameter of .operator new. cannot have a default argument\" }\n+  void* operator new[](std::size_t = 32, const std::nothrow_t&) throw(); // { dg-error \"9:the first parameter of .operator new. cannot have a default argument\" }\n };\n \n class D\n@@ -26,8 +26,8 @@ public:\n class E\n {\n public:\n-  void* operator new(std::size_t = 0,\n-\t\t     const std::nothrow_t& = std::nothrow_t()) throw(); // { dg-error \"first parameter\" }\n-  void* operator new[](std::size_t = 0,\n-\t\t       const std::nothrow_t& = std::nothrow_t()) throw(); // { dg-error \"first parameter\" }\n+  void* operator new(std::size_t = 0,  // { dg-error \"9:the first parameter of .operator new. cannot have a default argument\" }\n+\t\t     const std::nothrow_t& = std::nothrow_t()) throw();\n+  void* operator new[](std::size_t = 0,  // { dg-error \"9:the first parameter of .operator new. cannot have a default argument\" }\n+\t\t       const std::nothrow_t& = std::nothrow_t()) throw();\n };"}, {"sha": "23259bdab1669cbeadae69d2f5a4f90d31402009", "filename": "gcc/testsuite/g++.dg/init/new49.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew49.C?ref=2d10ccaa001ba9cb367ee8d8d34512454d6bb293", "patch": "@@ -0,0 +1 @@\n+int operator new (__SIZE_TYPE__, int);  // { dg-error \"5:.operator new. must return type .void*.\" }"}, {"sha": "914c3c64819312bcd37013676f5337319db3d03f", "filename": "gcc/testsuite/g++.dg/template/new4.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnew4.C?ref=2d10ccaa001ba9cb367ee8d8d34512454d6bb293", "patch": "@@ -4,5 +4,6 @@\n struct A\n {\n     template<typename T>\n-    static void* operator new(T) {} // { dg-error \"first parameter|invalid template\" }\n+    static void* operator new(T) {}  // { dg-error \"invalid template\" }\n+// { dg-error \"18:.operator new. takes type .size_t.\" \"first\" { target *-*-* } .-1 }\n };"}, {"sha": "c2fc212cef08f8cc1a1b6aeca3fdaaa2a1bb0826", "filename": "gcc/testsuite/g++.old-deja/g++.jason/operator.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d10ccaa001ba9cb367ee8d8d34512454d6bb293/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C?ref=2d10ccaa001ba9cb367ee8d8d34512454d6bb293", "patch": "@@ -25,8 +25,8 @@ struct B {\n \n int operator-(int a, int b);\t// { dg-error \"5:.int operator-\\\\(int, int\\\\). must have an argument of class or enumerated type\" }\n \n-void * operator new (A a);\t// { dg-error \"first parameter\" }\n-void operator delete (A a);\t// { dg-error \"first parameter\" }\n+void * operator new (A a);\t// { dg-error \".operator new. takes type .size_t.\" }\n+void operator delete (A a);\t// { dg-error \".operator delete. takes type .void\\\\*. as first parameter\" }\n \n char * operator char * (int);\t// { dg-error \"return type\" \"ret\" }\n // { dg-error \"8:.operator char\\\\*\\\\*\\\\(int\\\\). must be a nonstatic member function\" \"mem\" { target *-*-* } .-1 }"}]}