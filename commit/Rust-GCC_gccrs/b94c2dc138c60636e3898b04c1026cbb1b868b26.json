{"sha": "b94c2dc138c60636e3898b04c1026cbb1b868b26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk0YzJkYzEzOGM2MDYzNmUzODk4YjA0YzEwMjZjYmIxYjg2OGIyNg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2018-05-01T19:16:43Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-05-01T19:16:43Z"}, "message": "Add VEC_ORDERED_REMOVE_IF\n\n2018-05-01  Tom de Vries  <tom@codesourcery.com>\n\n\tPR other/83786\n\t* vec.h\t(VEC_ORDERED_REMOVE_IF, VEC_ORDERED_REMOVE_IF_FROM_TO): Define.\n\t* vec.c (test_ordered_remove_if): New function.\n\t(vec_c_tests): Call test_ordered_remove_if.\n\t* dwarf2cfi.c (connect_traces): Use VEC_ORDERED_REMOVE_IF_FROM_TO.\n\t* lto-streamer-out.c (prune_offload_funcs): Use VEC_ORDERED_REMOVE_IF.\n\t* tree-vect-patterns.c (vect_pattern_recog_1): Use\n\tVEC_ORDERED_REMOVE_IF.\n\nFrom-SVN: r259808", "tree": {"sha": "e99c38252e340bc2e91a93e586b47cdf8ba5aaf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e99c38252e340bc2e91a93e586b47cdf8ba5aaf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b94c2dc138c60636e3898b04c1026cbb1b868b26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b94c2dc138c60636e3898b04c1026cbb1b868b26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b94c2dc138c60636e3898b04c1026cbb1b868b26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b94c2dc138c60636e3898b04c1026cbb1b868b26/comments", "author": null, "committer": null, "parents": [{"sha": "2cc7d3a7da20bcfd854302b1f265c6551b8a3741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc7d3a7da20bcfd854302b1f265c6551b8a3741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc7d3a7da20bcfd854302b1f265c6551b8a3741"}], "stats": {"total": 146, "additions": 112, "deletions": 34}, "files": [{"sha": "5d319c8d588dbb715ead96506ec88cb9cb8e2c78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94c2dc138c60636e3898b04c1026cbb1b868b26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94c2dc138c60636e3898b04c1026cbb1b868b26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b94c2dc138c60636e3898b04c1026cbb1b868b26", "patch": "@@ -1,3 +1,14 @@\n+2018-05-01  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR other/83786\n+\t* vec.h\t(VEC_ORDERED_REMOVE_IF, VEC_ORDERED_REMOVE_IF_FROM_TO): Define.\n+\t* vec.c (test_ordered_remove_if): New function.\n+\t(vec_c_tests): Call test_ordered_remove_if.\n+\t* dwarf2cfi.c (connect_traces): Use VEC_ORDERED_REMOVE_IF_FROM_TO.\n+\t* lto-streamer-out.c (prune_offload_funcs): Use VEC_ORDERED_REMOVE_IF.\n+\t* tree-vect-patterns.c (vect_pattern_recog_1): Use\n+\tVEC_ORDERED_REMOVE_IF.\n+\n 2018-05-01  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR tree-optimization/82665"}, {"sha": "4cfb91b8d40810ffb1331a1e084a917e0ed7f9c2", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94c2dc138c60636e3898b04c1026cbb1b868b26/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94c2dc138c60636e3898b04c1026cbb1b868b26/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=b94c2dc138c60636e3898b04c1026cbb1b868b26", "patch": "@@ -2719,7 +2719,7 @@ before_next_cfi_note (rtx_insn *start)\n static void\n connect_traces (void)\n {\n-  unsigned i, n = trace_info.length ();\n+  unsigned i, n;\n   dw_trace_info *prev_ti, *ti;\n \n   /* ??? Ideally, we should have both queued and processed every trace.\n@@ -2730,20 +2730,15 @@ connect_traces (void)\n      these are not \"real\" instructions, and should not be considered.\n      This could be generically useful for tablejump data as well.  */\n   /* Remove all unprocessed traces from the list.  */\n-  for (i = n - 1; i > 0; --i)\n-    {\n-      ti = &trace_info[i];\n-      if (ti->beg_row == NULL)\n-\t{\n-\t  trace_info.ordered_remove (i);\n-\t  n -= 1;\n-\t}\n-      else\n-\tgcc_assert (ti->end_row != NULL);\n-    }\n+  unsigned ix, ix2;\n+  VEC_ORDERED_REMOVE_IF_FROM_TO (trace_info, ix, ix2, ti, 1,\n+\t\t\t\t trace_info.length (), ti->beg_row == NULL);\n+  FOR_EACH_VEC_ELT (trace_info, ix, ti)\n+    gcc_assert (ti->end_row != NULL);\n \n   /* Work from the end back to the beginning.  This lets us easily insert\n      remember/restore_state notes in the correct order wrt other notes.  */\n+  n = trace_info.length ();\n   prev_ti = &trace_info[n - 1];\n   for (i = n - 1; i > 0; --i)\n     {"}, {"sha": "f614aef201f416736c4d19c48c1e2ad737c57676", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94c2dc138c60636e3898b04c1026cbb1b868b26/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94c2dc138c60636e3898b04c1026cbb1b868b26/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=b94c2dc138c60636e3898b04c1026cbb1b868b26", "patch": "@@ -2360,24 +2360,14 @@ prune_offload_funcs (void)\n   if (!offload_funcs)\n     return;\n \n-  unsigned int write_index = 0;\n-  for (unsigned read_index = 0; read_index < vec_safe_length (offload_funcs);\n-       read_index++)\n-    {\n-      tree fn_decl = (*offload_funcs)[read_index];\n-      bool remove_p = cgraph_node::get (fn_decl) == NULL;\n-      if (remove_p)\n-\tcontinue;\n-\n-      DECL_PRESERVE_P (fn_decl) = 1;\n-\n-      if (write_index != read_index)\n-\t(*offload_funcs)[write_index] = (*offload_funcs)[read_index];\n-\n-      write_index++;\n-    }\n-\n-  offload_funcs->truncate (write_index);\n+  unsigned ix, ix2;\n+  tree *elem_ptr;\n+  VEC_ORDERED_REMOVE_IF (*offload_funcs, ix, ix2, elem_ptr,\n+\t\t\t cgraph_node::get (*elem_ptr) == NULL);\n+\n+  tree fn_decl;\n+  FOR_EACH_VEC_ELT (*offload_funcs, ix, fn_decl)\n+    DECL_PRESERVE_P (fn_decl) = 1;\n }\n \n /* Main entry point from the pass manager.  */"}, {"sha": "5c2578f046591b8955a8b2d5a3691c82d04e789e", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94c2dc138c60636e3898b04c1026cbb1b868b26/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94c2dc138c60636e3898b04c1026cbb1b868b26/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=b94c2dc138c60636e3898b04c1026cbb1b868b26", "patch": "@@ -4483,7 +4483,6 @@ vect_pattern_recog_1 (vect_recog_func *recog_func,\n   tree type_in, type_out;\n   enum tree_code code;\n   int i;\n-  gimple *next;\n \n   stmts_to_replace->truncate (0);\n   stmts_to_replace->quick_push (stmt);\n@@ -4545,9 +4544,12 @@ vect_pattern_recog_1 (vect_recog_func *recog_func,\n   /* Patterns cannot be vectorized using SLP, because they change the order of\n      computation.  */\n   if (loop_vinfo)\n-    FOR_EACH_VEC_ELT (LOOP_VINFO_REDUCTIONS (loop_vinfo), i, next)\n-      if (next == stmt)\n-        LOOP_VINFO_REDUCTIONS (loop_vinfo).ordered_remove (i);\n+    {\n+      unsigned ix, ix2;\n+      gimple **elem_ptr;\n+      VEC_ORDERED_REMOVE_IF (LOOP_VINFO_REDUCTIONS (loop_vinfo), ix, ix2,\n+\t\t\t     elem_ptr, *elem_ptr == stmt);\n+    }\n \n   /* It is possible that additional pattern stmts are created and inserted in\n      STMTS_TO_REPLACE.  We create a stmt_info for each of them, and mark the"}, {"sha": "11924a80a2d244b7cd52d5d86305f89d1798c90c", "filename": "gcc/vec.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94c2dc138c60636e3898b04c1026cbb1b868b26/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94c2dc138c60636e3898b04c1026cbb1b868b26/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=b94c2dc138c60636e3898b04c1026cbb1b868b26", "patch": "@@ -382,6 +382,51 @@ test_ordered_remove ()\n   ASSERT_EQ (9, v.length ());\n }\n \n+/* Verify that vec::ordered_remove_if works correctly.  */\n+\n+static void\n+test_ordered_remove_if (void)\n+{\n+  auto_vec <int> v;\n+  safe_push_range (v, 0, 10);\n+  unsigned ix, ix2;\n+  int *elem_ptr;\n+  VEC_ORDERED_REMOVE_IF (v, ix, ix2, elem_ptr,\n+\t\t\t *elem_ptr == 5 || *elem_ptr == 7);\n+  ASSERT_EQ (4, v[4]);\n+  ASSERT_EQ (6, v[5]);\n+  ASSERT_EQ (8, v[6]);\n+  ASSERT_EQ (8, v.length ());\n+\n+  v.truncate (0);\n+  safe_push_range (v, 0, 10);\n+  VEC_ORDERED_REMOVE_IF_FROM_TO (v, ix, ix2, elem_ptr, 0, 6,\n+\t\t\t\t *elem_ptr == 5 || *elem_ptr == 7);\n+  ASSERT_EQ (4, v[4]);\n+  ASSERT_EQ (6, v[5]);\n+  ASSERT_EQ (7, v[6]);\n+  ASSERT_EQ (9, v.length ());\n+\n+  v.truncate (0);\n+  safe_push_range (v, 0, 10);\n+  VEC_ORDERED_REMOVE_IF_FROM_TO (v, ix, ix2, elem_ptr, 0, 5,\n+\t\t\t\t *elem_ptr == 5 || *elem_ptr == 7);\n+  VEC_ORDERED_REMOVE_IF_FROM_TO (v, ix, ix2, elem_ptr, 8, 10,\n+\t\t\t\t *elem_ptr == 5 || *elem_ptr == 7);\n+  ASSERT_EQ (4, v[4]);\n+  ASSERT_EQ (5, v[5]);\n+  ASSERT_EQ (6, v[6]);\n+  ASSERT_EQ (10, v.length ());\n+\n+  v.truncate (0);\n+  safe_push_range (v, 0, 10);\n+  VEC_ORDERED_REMOVE_IF (v, ix, ix2, elem_ptr, *elem_ptr == 5);\n+  ASSERT_EQ (4, v[4]);\n+  ASSERT_EQ (6, v[5]);\n+  ASSERT_EQ (7, v[6]);\n+  ASSERT_EQ (9, v.length ());\n+}\n+\n /* Verify that vec::unordered_remove works correctly.  */\n \n static void\n@@ -443,6 +488,7 @@ vec_c_tests ()\n   test_pop ();\n   test_safe_insert ();\n   test_ordered_remove ();\n+  test_ordered_remove_if ();\n   test_unordered_remove ();\n   test_block_remove ();\n   test_qsort ();"}, {"sha": "2d1f468ca1c6f47232522bb55ef25a274b4eee67", "filename": "gcc/vec.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94c2dc138c60636e3898b04c1026cbb1b868b26/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94c2dc138c60636e3898b04c1026cbb1b868b26/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=b94c2dc138c60636e3898b04c1026cbb1b868b26", "patch": "@@ -1028,6 +1028,40 @@ vec<T, A, vl_embed>::ordered_remove (unsigned ix)\n }\n \n \n+/* Remove elements in [START, END) from VEC for which COND holds.  Ordering of\n+   remaining elements is preserved.  This is an O(N) operation.  */\n+\n+#define VEC_ORDERED_REMOVE_IF_FROM_TO(vec, read_index, write_index,\t\\\n+\t\t\t\t      elem_ptr, start, end, cond)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    gcc_assert ((end) <= (vec).length ());\t\t\t\t\\\n+    for (read_index = write_index = (start); read_index < (end);\t\\\n+\t ++read_index)\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\telem_ptr = &(vec)[read_index];\t\t\t\t\t\\\n+\tbool remove_p = (cond);\t\t\t\t\t\t\\\n+\tif (remove_p)\t\t\t\t\t\t\t\\\n+\t  continue;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (read_index != write_index)\t\t\t\t\t\\\n+\t  (vec)[write_index] = (vec)[read_index];\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\twrite_index++;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    if (read_index - write_index > 0)\t\t\t\t\t\\\n+      (vec).block_remove (write_index, read_index - write_index);\t\\\n+  }\n+\n+\n+/* Remove elements from VEC for which COND holds.  Ordering of remaining\n+   elements is preserved.  This is an O(N) operation.  */\n+\n+#define VEC_ORDERED_REMOVE_IF(vec, read_index, write_index, elem_ptr,\t\\\n+\t\t\t      cond)\t\t\t\t\t\\\n+  VEC_ORDERED_REMOVE_IF_FROM_TO ((vec), read_index, write_index,\t\\\n+\t\t\t\t elem_ptr, 0, (vec).length (), (cond))\n+\n /* Remove an element from the IXth position of this vector.  Ordering of\n    remaining elements is destroyed.  This is an O(1) operation.  */\n "}]}