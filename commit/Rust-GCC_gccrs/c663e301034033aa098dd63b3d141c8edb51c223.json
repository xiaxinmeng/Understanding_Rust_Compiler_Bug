{"sha": "c663e301034033aa098dd63b3d141c8edb51c223", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY2M2UzMDEwMzQwMzNhYTA5OGRkNjNiM2QxNDFjOGVkYjUxYzIyMw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2006-09-13T01:04:18Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2006-09-13T01:04:18Z"}, "message": "re PR c/28768 (Preprocessor doesn't parse tokens correctly?)\n\nlibcpp:\n\tPR c/28768\n\tPR preprocessor/14634\n\t* lex.c (lex_string): Pedwarn for unterminated literals.\n\nlibgomp:\n\t* configure.ac (HAVE_CLOCK_GETTIME): Add missing second argument\n\tto AC_DEFINE.\n\t* configure: Regenerate.\n\ngcc/testsuite:\n\t* gcc.dg/cpp/include2.c, gcc.dg/cpp/macspace1.c,\n\tgcc.dg/cpp/macspace2.c, gcc.dg/cpp/multiline.c,\n\tgcc.dg/cpp/trad/literals-2.c: Update expected diagnostics.\n\nFrom-SVN: r116915", "tree": {"sha": "7bc68cc714505a842f95c6794e5a70120ccf250d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bc68cc714505a842f95c6794e5a70120ccf250d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c663e301034033aa098dd63b3d141c8edb51c223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c663e301034033aa098dd63b3d141c8edb51c223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c663e301034033aa098dd63b3d141c8edb51c223", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c663e301034033aa098dd63b3d141c8edb51c223/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48de786822a56dbfc3d434c13d19d3dd91aa801e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48de786822a56dbfc3d434c13d19d3dd91aa801e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48de786822a56dbfc3d434c13d19d3dd91aa801e"}], "stats": {"total": 115, "additions": 99, "deletions": 16}, "files": [{"sha": "6169fddc6f16b34b1655512df133a728226226b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c663e301034033aa098dd63b3d141c8edb51c223/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c663e301034033aa098dd63b3d141c8edb51c223/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c663e301034033aa098dd63b3d141c8edb51c223", "patch": "@@ -1,3 +1,11 @@\n+2006-09-13  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/28768\n+\tPR preprocessor/14634\n+\t* gcc.dg/cpp/include2.c, gcc.dg/cpp/macspace1.c,\n+\tgcc.dg/cpp/macspace2.c, gcc.dg/cpp/multiline.c,\n+\tgcc.dg/cpp/trad/literals-2.c: Update expected diagnostics.\n+\n 2006-09-12  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/pr28243.c: New test."}, {"sha": "46844bf2cc180e6d0e823cea55a8feeda25959db", "filename": "gcc/testsuite/gcc.dg/cpp/include2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c663e301034033aa098dd63b3d141c8edb51c223/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finclude2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c663e301034033aa098dd63b3d141c8edb51c223/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finclude2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Finclude2.c?ref=c663e301034033aa098dd63b3d141c8edb51c223", "patch": "@@ -13,4 +13,4 @@\n /* These error is No such file or directory, just once.  However, this\n    message is locale-dependent, so don't test for it.  */\n /* { dg-error \"silly\" \"\" { target *-*-* } 10 } */\n-\n+/* { dg-error \"missing\" \"\" { target *-*-* } 11 } */"}, {"sha": "daf14d2b1f13f4a3f070ba437c13280309b5a859", "filename": "gcc/testsuite/gcc.dg/cpp/macspace1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c663e301034033aa098dd63b3d141c8edb51c223/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacspace1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c663e301034033aa098dd63b3d141c8edb51c223/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacspace1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacspace1.c?ref=c663e301034033aa098dd63b3d141c8edb51c223", "patch": "@@ -59,3 +59,5 @@\n #define ag\"abc\"\t\t/* { dg-warning \"missing whitespace\" } */\n \n int dummy;\n+/* { dg-error \"missing terminating\" \"\" { target *-*-* } 6 } */\n+/* { dg-error \"missing terminating\" \"\" { target *-*-* } 10 } */"}, {"sha": "7a81eceeac8b813639632b63a6a41065b79f4f89", "filename": "gcc/testsuite/gcc.dg/cpp/macspace2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c663e301034033aa098dd63b3d141c8edb51c223/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacspace2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c663e301034033aa098dd63b3d141c8edb51c223/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacspace2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacspace2.c?ref=c663e301034033aa098dd63b3d141c8edb51c223", "patch": "@@ -59,3 +59,5 @@\n #define ag\"abc\"\t\t/* { dg-error \"requires whitespace\" } */\n \n int dummy;\n+/* { dg-error \"missing terminating\" \"\" { target *-*-* } 6 } */\n+/* { dg-error \"missing terminating\" \"\" { target *-*-* } 10 } */"}, {"sha": "38798bdfaafa3d236d3a222327dcdf02161a3820", "filename": "gcc/testsuite/gcc.dg/cpp/multiline.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c663e301034033aa098dd63b3d141c8edb51c223/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c663e301034033aa098dd63b3d141c8edb51c223/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmultiline.c?ref=c663e301034033aa098dd63b3d141c8edb51c223", "patch": "@@ -19,5 +19,7 @@ L\"line 1\n /* Nowhere in the output of this file should there be a blank line.\n    We check for that in the .i file.\n    { dg-final { scan-file-not multiline.i \"(^|\\\\n)\\\\n\" } } */\n-/* { dg-bogus \"missing term\" \"multiline strings\" { target *-*-* } 11 } */\n-/* { dg-bogus \"warning\" \"warning in place of error\" { target *-*-* } 15 } */\n+/* { dg-warning \"missing term\" \"multiline strings\" { target *-*-* } 11 } */\n+/* { dg-warning \"missing term\" \"multiline strings\" { target *-*-* } 14 } */\n+/* { dg-warning \"missing term\" \"multiline strings\" { target *-*-* } 15 } */\n+/* { dg-warning \"missing term\" \"multiline strings\" { target *-*-* } 18 } */"}, {"sha": "767ed77ffb8d769fe5856b35f6cfb7a419ecca68", "filename": "gcc/testsuite/gcc.dg/cpp/trad/literals-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c663e301034033aa098dd63b3d141c8edb51c223/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fliterals-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c663e301034033aa098dd63b3d141c8edb51c223/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fliterals-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fliterals-2.c?ref=c663e301034033aa098dd63b3d141c8edb51c223", "patch": "@@ -2,7 +2,7 @@\n    recognized.  */\n \n /* { dg-do preprocess } */\n-\n+/* { dg-error \"missing terminating\" \"bad charconst\" { target *-*-* } 7 } */\n /* { dg-error \"not valid\" \"bad charconst\" { target *-*-* } 7 } */\n #if 'x\n #endif"}, {"sha": "16cf1fc6c048313c6cc18ed71b82e55743348c09", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c663e301034033aa098dd63b3d141c8edb51c223/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c663e301034033aa098dd63b3d141c8edb51c223/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c663e301034033aa098dd63b3d141c8edb51c223", "patch": "@@ -1,3 +1,9 @@\n+2006-09-13  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/28768\n+\tPR preprocessor/14634\n+\t* lex.c (lex_string): Pedwarn for unterminated literals.\n+\n 2006-09-08  Eric Christopher  <echristo@apple.com>\n \n \t* configure.ac: Add 64-bit HWI support for i?86-darwin."}, {"sha": "df09bd6d3d687c62887b89f4f6f731a14210143e", "filename": "libcpp/lex.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c663e301034033aa098dd63b3d141c8edb51c223/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c663e301034033aa098dd63b3d141c8edb51c223/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=c663e301034033aa098dd63b3d141c8edb51c223", "patch": "@@ -646,6 +646,10 @@ lex_string (cpp_reader *pfile, cpp_token *token, const uchar *base)\n     cpp_error (pfile, CPP_DL_WARNING,\n \t       \"null character(s) preserved in literal\");\n \n+  if (type == CPP_OTHER && CPP_OPTION (pfile, lang) != CLK_ASM)\n+    cpp_error (pfile, CPP_DL_PEDWARN, \"missing terminating %c character\",\n+\t       (int) terminator);\n+\n   pfile->buffer->cur = cur;\n   create_literal (pfile, token, base, cur - base, type);\n }"}, {"sha": "5a5f3030e0967bd515aa942fc0dde2d7361503bd", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c663e301034033aa098dd63b3d141c8edb51c223/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c663e301034033aa098dd63b3d141c8edb51c223/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c663e301034033aa098dd63b3d141c8edb51c223", "patch": "@@ -1,3 +1,11 @@\n+2006-09-13  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/28768\n+\tPR preprocessor/14634\n+\t* configure.ac (HAVE_CLOCK_GETTIME): Add missing second argument\n+\tto AC_DEFINE.\n+\t* configure: Regenerate.\n+\n 2006-09-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* testsuite/libgomp.fortran/reduction3.f90: Change"}, {"sha": "f14cb657ade4b7422911e2205b5b964dd806dbd1", "filename": "libgomp/configure", "status": "modified", "additions": 62, "deletions": 11, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c663e301034033aa098dd63b3d141c8edb51c223/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c663e301034033aa098dd63b3d141c8edb51c223/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=c663e301034033aa098dd63b3d141c8edb51c223", "patch": "@@ -5831,8 +5831,9 @@ fi\n   break\n done\n if test \"$acx_cv_header_stdint\" = stddef.h; then\n-  acx_cv_header_stdint_kind=\"(lacks uintptr_t)\"\n+  acx_cv_header_stdint_kind=\"(lacks uintmax_t)\"\n   for i in stdint.h $inttype_headers; do\n+    unset ac_cv_type_uintptr_t\n     unset ac_cv_type_uint32_t\n     unset ac_cv_type_uint64_t\n     echo $ECHO_N \"looking for an incomplete stdint.h in $i, $ECHO_C\" >&6\n@@ -5958,11 +5959,65 @@ rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n echo \"$as_me:$LINENO: result: $ac_cv_type_uint64_t\" >&5\n echo \"${ECHO_T}$ac_cv_type_uint64_t\" >&6\n-if test $ac_cv_type_uint64_t = yes; then\n-  :\n+\n+    echo \"$as_me:$LINENO: checking for uintptr_t\" >&5\n+echo $ECHO_N \"checking for uintptr_t... $ECHO_C\" >&6\n+if test \"${ac_cv_type_uintptr_t+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n else\n-  acx_cv_header_stdint_kind=\"(lacks uintptr_t and uint64_t)\"\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <sys/types.h>\n+#include <$i>\n+\n+int\n+main ()\n+{\n+if ((uintptr_t *) 0)\n+  return 0;\n+if (sizeof (uintptr_t))\n+  return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_type_uintptr_t=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_type_uintptr_t=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n+echo \"$as_me:$LINENO: result: $ac_cv_type_uintptr_t\" >&5\n+echo \"${ECHO_T}$ac_cv_type_uintptr_t\" >&6\n \n     break\n   done\n@@ -6095,11 +6150,6 @@ rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n echo \"$as_me:$LINENO: result: $ac_cv_type_u_int64_t\" >&5\n echo \"${ECHO_T}$ac_cv_type_u_int64_t\" >&6\n-if test $ac_cv_type_u_int64_t = yes; then\n-  :\n-else\n-  acx_cv_header_stdint_kind=\"(u_intXX_t style, lacks u_int64_t)\"\n-fi\n \n     break\n   done\n@@ -8755,8 +8805,9 @@ echo \"$as_me:$LINENO: result: $ac_cv_lib_rt_clock_gettime\" >&5\n echo \"${ECHO_T}$ac_cv_lib_rt_clock_gettime\" >&6\n if test $ac_cv_lib_rt_clock_gettime = yes; then\n   LIBS=\"-lrt $LIBS\"\n-     cat >>confdefs.h <<\\_ACEOF\n-#define HAVE_CLOCK_GETTIME Define to 1 if you have the `clock_gettime' function.\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_CLOCK_GETTIME 1\n _ACEOF\n \n fi"}, {"sha": "d6f960e383351d4c6d79ee3770178f09bc46a665", "filename": "libgomp/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c663e301034033aa098dd63b3d141c8edb51c223/libgomp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c663e301034033aa098dd63b3d141c8edb51c223/libgomp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.ac?ref=c663e301034033aa098dd63b3d141c8edb51c223", "patch": "@@ -227,7 +227,7 @@ esac\n if test $ac_cv_func_clock_gettime = no; then\n   AC_CHECK_LIB(rt, clock_gettime,\n     [LIBS=\"-lrt $LIBS\"\n-     AC_DEFINE(HAVE_CLOCK_GETTIME,\n+     AC_DEFINE(HAVE_CLOCK_GETTIME, 1,\n \t       [Define to 1 if you have the `clock_gettime' function.])])\n fi\n "}]}