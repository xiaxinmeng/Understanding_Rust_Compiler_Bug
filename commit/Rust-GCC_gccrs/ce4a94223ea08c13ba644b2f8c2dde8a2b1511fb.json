{"sha": "ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U0YTk0MjIzZWEwOGMxM2JhNjQ0YjJmOGMyZGRlOGEyYjE1MTFmYg==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-07-24T20:12:49Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-07-24T20:12:49Z"}, "message": "re PR rtl-optimization/57968 (MODE_EXIT switches inserted too early)\n\n        PR rtl-optimization/57968\n        * mode-switching.c (create_pre_exit): Allow instructions that\n        don't set a return register to need a non-exit mode.\n\nFrom-SVN: r201225", "tree": {"sha": "c672dee8f414becb468719cea9403139841a25d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c672dee8f414becb468719cea9403139841a25d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1e18725591f12da43d0bb1a6ff93de9ee08b059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e18725591f12da43d0bb1a6ff93de9ee08b059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e18725591f12da43d0bb1a6ff93de9ee08b059"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "02770542687864f328053086ca8d8c6d903ed12a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb", "patch": "@@ -1,3 +1,9 @@\n+2013-07-24  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\tPR rtl-optimization/57968\n+\t* mode-switching.c (create_pre_exit): Allow instructions that\n+\tdon't set a return register to need a non-exit mode.\n+\n 2013-07-24  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n \t    Anton Blanchard <anton@au1.ibm.com>\n "}, {"sha": "8ea8ca35d3c8657278a710488e920c15836f90fb", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=ce4a94223ea08c13ba644b2f8c2dde8a2b1511fb", "patch": "@@ -330,12 +330,10 @@ create_pre_exit (int n_entities, int *entity_map, const int *num_modes)\n \t\t\tbreak;\n \t\t      }\n \t\t    if (!targetm.calls.function_value_regno_p (copy_start))\n-\t\t      {\n-\t\t\tlast_insn = return_copy;\n-\t\t\tcontinue;\n-\t\t      }\n-\t\t    copy_num\n-\t\t      = hard_regno_nregs[copy_start][GET_MODE (copy_reg)];\n+\t\t      copy_num = 0;\n+\t\t    else\n+\t\t      copy_num\n+\t\t\t= hard_regno_nregs[copy_start][GET_MODE (copy_reg)];\n \n \t\t    /* If the return register is not likely spilled, - as is\n \t\t       the case for floating point on SH4 - then it might\n@@ -372,6 +370,11 @@ create_pre_exit (int n_entities, int *entity_map, const int *num_modes)\n \t\t\t  forced_late_switch = 1;\n \t\t\tbreak;\n \t\t      }\n+\t\t    if (copy_num == 0)\n+\t\t      {\n+\t\t\tlast_insn = return_copy;\n+\t\t\tcontinue;\n+\t\t      }\n \n \t\t    if (copy_start >= ret_start\n \t\t\t&& copy_start + copy_num <= ret_end)"}]}