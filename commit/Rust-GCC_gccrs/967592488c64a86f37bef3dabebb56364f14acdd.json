{"sha": "967592488c64a86f37bef3dabebb56364f14acdd", "node_id": "C_kwDOANBUbNoAKDk2NzU5MjQ4OGM2NGE4NmYzN2JlZjNkYWJlYmI1NjM2NGYxNGFjZGQ", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2023-01-16T14:40:45Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2023-01-16T14:40:45Z"}, "message": "Disable gather/scatter for zen4\n\nthis patch adds more tunes for zen4:\n - new tunes for avx512 scater instructions.\n   In micro benchmarks these seems consistent loss compared to open-coded coe\n - disable use of gather for zen4\n   While these are win for a micro benchmarks (based on TSVC), enabling gather\n   is a loss for parest. So for now it seems safe to keep it off.\n - disable pass to avoid FMA chains for znver4 since fmadd was optimized and does not seem\n   to cause regressions.\n\n\t* config/i386/i386.cc (ix86_vectorize_builtin_scatter): Guard scatter\n\tby TARGET_USE_SCATTER.\n\t* config/i386/i386.h (TARGET_USE_SCATTER_2PARTS,\n\tTARGET_USE_SCATTER_4PARTS, TARGET_USE_SCATTER): New macros.\n\t* config/i386/x86-tune.def (TARGET_USE_SCATTER_2PARTS,\n\tTARGET_USE_SCATTER_4PARTS, TARGET_USE_SCATTER): New tunes.\n\t(X86_TUNE_AVOID_256FMA_CHAINS, X86_TUNE_AVOID_512FMA_CHAINS): Disable\n\tfor znver4.  (X86_TUNE_USE_GATHER): Disable for zen4.", "tree": {"sha": "72305f531b58f0231308c35d9690a92b86a6b20c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72305f531b58f0231308c35d9690a92b86a6b20c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/967592488c64a86f37bef3dabebb56364f14acdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967592488c64a86f37bef3dabebb56364f14acdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967592488c64a86f37bef3dabebb56364f14acdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967592488c64a86f37bef3dabebb56364f14acdd/comments", "author": null, "committer": null, "parents": [{"sha": "6347bbec3efb625dfc8592fbb3099dc0364c5317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6347bbec3efb625dfc8592fbb3099dc0364c5317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6347bbec3efb625dfc8592fbb3099dc0364c5317"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "19fb03cfd447137ed00f199911d087317201bd07", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967592488c64a86f37bef3dabebb56364f14acdd/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967592488c64a86f37bef3dabebb56364f14acdd/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=967592488c64a86f37bef3dabebb56364f14acdd", "patch": "@@ -19051,6 +19051,13 @@ ix86_vectorize_builtin_scatter (const_tree vectype,\n   if (!TARGET_AVX512F)\n     return NULL_TREE;\n \n+  if (known_eq (TYPE_VECTOR_SUBPARTS (vectype), 2u)\n+      ? !TARGET_USE_SCATTER_2PARTS\n+      : (known_eq (TYPE_VECTOR_SUBPARTS (vectype), 4u)\n+\t ? !TARGET_USE_SCATTER_4PARTS\n+\t : !TARGET_USE_SCATTER))\n+    return NULL_TREE;\n+\n   if ((TREE_CODE (index_type) != INTEGER_TYPE\n        && !POINTER_TYPE_P (index_type))\n       || (TYPE_MODE (index_type) != SImode"}, {"sha": "dd9391c492b0611322243fa9825bc4cd387fd29a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967592488c64a86f37bef3dabebb56364f14acdd/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967592488c64a86f37bef3dabebb56364f14acdd/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=967592488c64a86f37bef3dabebb56364f14acdd", "patch": "@@ -397,10 +397,16 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \tix86_tune_features[X86_TUNE_AVOID_4BYTE_PREFIXES]\n #define TARGET_USE_GATHER_2PARTS \\\n \tix86_tune_features[X86_TUNE_USE_GATHER_2PARTS]\n+#define TARGET_USE_SCATTER_2PARTS \\\n+\tix86_tune_features[X86_TUNE_USE_SCATTER_2PARTS]\n #define TARGET_USE_GATHER_4PARTS \\\n \tix86_tune_features[X86_TUNE_USE_GATHER_4PARTS]\n+#define TARGET_USE_SCATTER_4PARTS \\\n+\tix86_tune_features[X86_TUNE_USE_SCATTER_4PARTS]\n #define TARGET_USE_GATHER \\\n \tix86_tune_features[X86_TUNE_USE_GATHER]\n+#define TARGET_USE_SCATTER \\\n+\tix86_tune_features[X86_TUNE_USE_SCATTER]\n #define TARGET_FUSE_CMP_AND_BRANCH_32 \\\n \tix86_tune_features[X86_TUNE_FUSE_CMP_AND_BRANCH_32]\n #define TARGET_FUSE_CMP_AND_BRANCH_64 \\"}, {"sha": "c78dad07c88465df0dcbd7602598a13538398e82", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/967592488c64a86f37bef3dabebb56364f14acdd/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/967592488c64a86f37bef3dabebb56364f14acdd/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=967592488c64a86f37bef3dabebb56364f14acdd", "patch": "@@ -483,28 +483,43 @@ DEF_TUNE (X86_TUNE_AVOID_4BYTE_PREFIXES, \"avoid_4byte_prefixes\",\n DEF_TUNE (X86_TUNE_USE_GATHER_2PARTS, \"use_gather_2parts\",\n \t  ~(m_ZNVER1 | m_ZNVER2 | m_ZNVER3 | m_ZNVER4 | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC))\n \n+/* X86_TUNE_USE_SCATTER_2PARTS: Use scater instructions for vectors with 2\n+   elements.  */\n+DEF_TUNE (X86_TUNE_USE_SCATTER_2PARTS, \"use_scatter_2parts\",\n+\t  ~(m_ZNVER4 | m_GENERIC))\n+\n /* X86_TUNE_USE_GATHER_4PARTS: Use gather instructions for vectors with 4\n    elements.  */\n DEF_TUNE (X86_TUNE_USE_GATHER_4PARTS, \"use_gather_4parts\",\n \t  ~(m_ZNVER1 | m_ZNVER2 | m_ZNVER3 | m_ZNVER4 | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC))\n \n+/* X86_TUNE_USE_SCATTER_4PARTS: Use scater instructions for vectors with 4\n+   elements.  */\n+DEF_TUNE (X86_TUNE_USE_SCATTER_4PARTS, \"use_scatter_4parts\",\n+\t  ~(m_ZNVER4 | m_GENERIC))\n+\n /* X86_TUNE_USE_GATHER: Use gather instructions for vectors with 8 or more\n    elements.  */\n DEF_TUNE (X86_TUNE_USE_GATHER, \"use_gather\",\n-\t  ~(m_ZNVER1 | m_ZNVER2 | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC))\n+\t  ~(m_ZNVER1 | m_ZNVER2 | m_ZNVER4 | m_ALDERLAKE | m_CORE_ATOM | m_GENERIC))\n+\n+/* X86_TUNE_USE_SCATTER: Use scater instructions for vectors with 8 or more\n+   elements.  */\n+DEF_TUNE (X86_TUNE_USE_SCATTER, \"use_scatter\",\n+\t  ~(m_ZNVER4 | m_GENERIC))\n \n /* X86_TUNE_AVOID_128FMA_CHAINS: Avoid creating loops with tight 128bit or\n    smaller FMA chain.  */\n-DEF_TUNE (X86_TUNE_AVOID_128FMA_CHAINS, \"avoid_fma_chains\", m_ZNVER)\n+DEF_TUNE (X86_TUNE_AVOID_128FMA_CHAINS, \"avoid_fma_chains\", m_ZNVER1 | m_ZNVER2 | m_ZNVER3)\n \n /* X86_TUNE_AVOID_256FMA_CHAINS: Avoid creating loops with tight 256bit or\n    smaller FMA chain.  */\n-DEF_TUNE (X86_TUNE_AVOID_256FMA_CHAINS, \"avoid_fma256_chains\", m_ZNVER2 | m_ZNVER3 | m_ZNVER4\n+DEF_TUNE (X86_TUNE_AVOID_256FMA_CHAINS, \"avoid_fma256_chains\", m_ZNVER2 | m_ZNVER3\n \t  | m_ALDERLAKE | m_SAPPHIRERAPIDS | m_CORE_ATOM)\n \n /* X86_TUNE_AVOID_512FMA_CHAINS: Avoid creating loops with tight 512bit or\n    smaller FMA chain.  */\n-DEF_TUNE (X86_TUNE_AVOID_512FMA_CHAINS, \"avoid_fma512_chains\", m_ZNVER4)\n+DEF_TUNE (X86_TUNE_AVOID_512FMA_CHAINS, \"avoid_fma512_chains\", m_NONE)\n \n /* X86_TUNE_V2DF_REDUCTION_PREFER_PHADDPD: Prefer haddpd\n    for v2df vector reduction.  */"}]}