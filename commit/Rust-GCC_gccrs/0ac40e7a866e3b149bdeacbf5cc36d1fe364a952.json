{"sha": "0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFjNDBlN2E4NjZlM2IxNDliZGVhY2JmNWNjMzZkMWZlMzY0YTk1Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-03-11T16:38:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-03-11T16:38:27Z"}, "message": "mips.h (mips_fix_vr4130_string): Declare.\n\n\t* config/mips/mips.h (mips_fix_vr4130_string): Declare.\n\t(TARGET_FIX_VR4130): New macro.\n\t(TARGET_OPTIONS): Add -mfix-vr4130.\n\t(ISA_HAS_MACCHI): New macro.\n\t(ASM_SPEC): Add -mfix-vr4130.\n\t* config/mips/mips.c (mips_fix_vr4130_string): New variable.\n\t(override_options): Handle mips_fix_vr4130_string.\n\t(mips_avoid_hazards): Clear all_noreorder_p\n\tif we're working around VR4130 errata and the macc alternatives\n\tare not available.\n\t* config/mips/mips.md (mfhilo_<mode>): Turn into a define_expand.\n\t(*mfhilo_<mode>, *mfhilo_<mode>_macc): New insns.\n\t* config/mips/vr.h (DEFAULT_VR_ARCH): Set to mfix-vr4130.\n\t(MULTILIB_DEFAULTS): Remove leading \"march=\".\n\t(DRIVER_SELF_SPECS): Likewise.  Make -mfix-vr4130 imply -march=vr4130\n\tif no architecture option is given.\n\t* config/mips/t-vr (MULTILIB_OPTIONS): Use -mfix-vr4130 for the\n\tVR4130 multilibs.\n\t(MULTILIB_MATCHES): Map -march=vr4130 to the -mfix-vr4130 multilibs.\n\t* doc/invoke.texi: Document -mfix-vr4130.\n\nFrom-SVN: r96301", "tree": {"sha": "6d67d7deaee3c8d2c5daab6e5ceec21a45c98736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d67d7deaee3c8d2c5daab6e5ceec21a45c98736"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/comments", "author": null, "committer": null, "parents": [{"sha": "266c6b40edea65bc1159fa60a229b7d8182412ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/266c6b40edea65bc1159fa60a229b7d8182412ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/266c6b40edea65bc1159fa60a229b7d8182412ff"}], "stats": {"total": 169, "additions": 150, "deletions": 19}, "files": [{"sha": "4944b6cbe5dc3ba22ced8ee9fe5c349c92b9d58a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "patch": "@@ -1,3 +1,26 @@\n+2005-03-11  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (mips_fix_vr4130_string): Declare.\n+\t(TARGET_FIX_VR4130): New macro.\n+\t(TARGET_OPTIONS): Add -mfix-vr4130.\n+\t(ISA_HAS_MACCHI): New macro.\n+\t(ASM_SPEC): Add -mfix-vr4130.\n+\t* config/mips/mips.c (mips_fix_vr4130_string): New variable.\n+\t(override_options): Handle mips_fix_vr4130_string.\n+\t(mips_avoid_hazards): Clear all_noreorder_p\n+\tif we're working around VR4130 errata and the macc alternatives\n+\tare not available.\n+\t* config/mips/mips.md (mfhilo_<mode>): Turn into a define_expand.\n+\t(*mfhilo_<mode>, *mfhilo_<mode>_macc): New insns.\n+\t* config/mips/vr.h (DEFAULT_VR_ARCH): Set to mfix-vr4130.\n+\t(MULTILIB_DEFAULTS): Remove leading \"march=\".\n+\t(DRIVER_SELF_SPECS): Likewise.  Make -mfix-vr4130 imply -march=vr4130\n+\tif no architecture option is given.\n+\t* config/mips/t-vr (MULTILIB_OPTIONS): Use -mfix-vr4130 for the\n+\tVR4130 multilibs.\n+\t(MULTILIB_MATCHES): Map -march=vr4130 to the -mfix-vr4130 multilibs.\n+\t* doc/invoke.texi: Document -mfix-vr4130.\n+\n 2005-03-11  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (override_options): Only warn about -mint64"}, {"sha": "6748eae02c5a06f7365830fa075062bcf0545d41", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "patch": "@@ -562,6 +562,9 @@ int mips16_hard_float;\n \n const char *mips_cache_flush_func = CACHE_FLUSH_FUNC;\n \n+/* Holds string <X> if -mfix-vr4130<X> was passed on the command line.  */\n+const char *mips_fix_vr4130_string;\n+\n /* If TRUE, we split addresses into their high and low parts in the RTL.  */\n int mips_split_addresses;\n \n@@ -4135,6 +4138,9 @@ override_options (void)\n   if (TARGET_INT64)\n     warning (\"-mint64 is a deprecated option\");\n \n+  if (mips_fix_vr4130_string && mips_fix_vr4130_string[0] != 0)\n+    error (\"unrecognized option %<-mfix-vr4130%s%>\", mips_fix_vr4130_string);\n+\n   if (MIPS_MARCH_CONTROLS_SOFT_FLOAT\n       && (target_flags_explicit & MASK_SOFT_FLOAT) == 0)\n     {\n@@ -8294,10 +8300,24 @@ mips_avoid_hazards (void)\n   cfun->machine->ignore_hazard_length_p = true;\n   shorten_branches (get_insns ());\n \n-  /* The profiler code uses assembler macros.  -mfix-vr4120 relies on\n-     assembler nop insertion.  */\n-  cfun->machine->all_noreorder_p = (!current_function_profile\n-\t\t\t\t    && !TARGET_FIX_VR4120);\n+  cfun->machine->all_noreorder_p = true;\n+\n+  /* Profiled functions can't be all noreorder because the profiler\n+     support uses assembler macros.  */\n+  if (current_function_profile)\n+    cfun->machine->all_noreorder_p = false;\n+\n+  /* Code compiled with -mfix-vr4120 can't be all noreorder because\n+     we rely on the assembler to work around some errata.  */\n+  if (TARGET_FIX_VR4120)\n+    cfun->machine->all_noreorder_p = false;\n+\n+  /* The same is true for -mfix-vr4130 if we might generate mflo or\n+     mfhi instructions.  Note that we avoid using mflo and mfhi if\n+     the VR4130 macc and dmacc instructions are available instead;\n+     see the *mfhilo_{si,di}_macc patterns.  */\n+  if (TARGET_FIX_VR4130 && !ISA_HAS_MACCHI)\n+    cfun->machine->all_noreorder_p = false;\n \n   last_insn = 0;\n   hilo_delay = 2;"}, {"sha": "0417adda368d4c5ac65f8e0b1b7ed187109090ba", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "patch": "@@ -111,6 +111,7 @@ extern const char *mips_tune_string;    /* for -mtune=<xxx> */\n extern const char *mips_isa_string;\t/* for -mips{1,2,3,4} */\n extern const char *mips_abi_string;\t/* for -mabi={32,n32,64} */\n extern const char *mips_cache_flush_func;/* for -mflush-func= and -mno-flush-func */\n+extern const char *mips_fix_vr4130_string;\n extern const struct mips_cpu_info mips_cpu_info_table[];\n extern const struct mips_cpu_info *mips_arch_info;\n extern const struct mips_cpu_info *mips_tune_info;\n@@ -236,6 +237,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n \t\t\t\t\t/* Work around R4400 errata.  */\n #define TARGET_FIX_R4400\t((target_flags & MASK_FIX_R4400) != 0)\n #define TARGET_FIX_VR4120\t((target_flags & MASK_FIX_VR4120) != 0)\n+#define TARGET_FIX_VR4130\t(mips_fix_vr4130_string != 0)\n #define TARGET_VR4130_ALIGN\t((target_flags & MASK_VR4130_ALIGN) != 0)\n \n #define TARGET_FP_EXCEPTIONS\t((target_flags & MASK_FP_EXCEPTIONS) != 0)\n@@ -794,6 +796,8 @@ extern const struct mips_cpu_info *mips_tune_info;\n       N_(\"Don't call any cache flush functions\"), 0},\t\t\t\\\n   { \"flush-func=\", &mips_cache_flush_func,\t\t\t\t\\\n       N_(\"Specify cache flush function\"), 0},\t\t\t\t\\\n+  { \"fix-vr4130\", &mips_fix_vr4130_string,\t\t\t\t\\\n+      N_(\"Work around VR4130 mflo/mfhi errata\"), 0},\t\t\t\\\n }\n \n /* This is meant to be redefined in the host dependent files.  */\n@@ -939,6 +943,11 @@ extern const struct mips_cpu_info *mips_tune_info;\n                                  || TARGET_SR71K                        \\\n                                  )\n \n+/* ISA has NEC VR-style MACC, MACCHI, DMACC and DMACCHI instructions.  */\n+#define ISA_HAS_MACCHI\t\t(!TARGET_MIPS16\t\t\t\t\\\n+\t\t\t\t && (TARGET_MIPS4120\t\t\t\\\n+\t\t\t\t     || TARGET_MIPS4130))\n+\n /* ISA has 32-bit rotate right instruction.  */\n #define ISA_HAS_ROTR_SI         (!TARGET_MIPS16                         \\\n                                  && (ISA_MIPS32R2                       \\\n@@ -1094,7 +1103,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n %{mips32} %{mips32r2} %{mips64} \\\n %{mips16:%{!mno-mips16:-mips16}} %{mno-mips16:-no-mips16} \\\n %{mips3d:-mips3d} \\\n-%{mfix-vr4120} \\\n+%{mfix-vr4120} %{mfix-vr4130} \\\n %(subtarget_asm_optimizing_spec) \\\n %(subtarget_asm_debugging_spec) \\\n %{mabi=*} %{!mabi*: %(asm_abi_default_spec)} \\"}, {"sha": "0a63df09c1ae968c845c14e29cda6b69be3ee9dd", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "patch": "@@ -3729,17 +3729,42 @@ beq\\t%2,%.,1b\\;\\\n ;;\n ;; We cope with this by making the mflo and mfhi patterns use both HI and LO.\n ;; Operand 1 is the register we want, operand 2 is the other one.\n+;;\n+;; When generating VR4120 or VR4130 code, we use macc{,hi} and\n+;; dmacc{,hi} instead of mfhi and mflo.  This avoids both the normal\n+;; MIPS III hi/lo hazards and the errata related to -mfix-vr4130.\n+\n+(define_expand \"mfhilo_<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(unspec:GPR [(match_operand:GPR 1 \"register_operand\")\n+\t\t     (match_operand:GPR 2 \"register_operand\")]\n+\t\t    UNSPEC_MFHILO))])\n \n-(define_insn \"mfhilo_<mode>\"\n+(define_insn \"*mfhilo_<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n \t(unspec:GPR [(match_operand:GPR 1 \"register_operand\" \"h,l\")\n \t\t     (match_operand:GPR 2 \"register_operand\" \"l,h\")]\n \t\t    UNSPEC_MFHILO))]\n-  \"\"\n+  \"!ISA_HAS_MACCHI\"\n   \"mf%1\\t%0\"\n   [(set_attr \"type\" \"mfhilo\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*mfhilo_<mode>_macc\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+\t(unspec:GPR [(match_operand:GPR 1 \"register_operand\" \"h,l\")\n+\t\t     (match_operand:GPR 2 \"register_operand\" \"l,h\")]\n+\t\t    UNSPEC_MFHILO))]\n+  \"ISA_HAS_MACCHI\"\n+{\n+  if (REGNO (operands[1]) == HI_REGNUM)\n+    return \"<d>macchi\\t%0,%.,%.\";\n+  else\n+    return \"<d>macc\\t%0,%.,%.\";\n+}\n+  [(set_attr \"type\" \"mfhilo\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;; Patterns for loading or storing part of a paired floating point\n ;; register.  We need them because odd-numbered floating-point registers\n ;; are not fully independent: see mips_split_64bit_move."}, {"sha": "9c046b0eb04bb130188a6e079db01e664452a0a9", "filename": "gcc/config/mips/t-vr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Fconfig%2Fmips%2Ft-vr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Fconfig%2Fmips%2Ft-vr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-vr?ref=0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "patch": "@@ -35,7 +35,7 @@ $(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n #\tmabi=eabi/mgp32/mlong64\n #\n # Architecture: march=vr4120 with -mfix-vr4120\n-#\t\tmarch=vr4130 (default)\n+#\t\tmarch=vr4130 with -mfix-vr4130 (default)\n #\t\tmarch=vr5000\n #\t\tmarch=vr5400\n #\t\tmarch=vr5500\n@@ -65,7 +65,7 @@ $(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)\n #\tmabi=eabi/mgp32\n #\n # Architecture: march=vr4120 with -mfix-vr4120\n-#\t\tmarch=vr4130 (default)\n+#\t\tmarch=vr4130 with -mfix-vr4130 (default)\n #\n # Total: 2 * 3 * 2 = 12 multilibs.\n MULTILIB_OPTIONS =\t\t\t\\\n@@ -74,7 +74,7 @@ MULTILIB_OPTIONS =\t\t\t\\\n \tmgp32\t\t\t\t\\\n \tmlong64\t\t\t\t\\\n \tmips16\t\t\t\t\\\n-\tmfix-vr4120/march=vr4130/march=vr4300/march=vr5000/march=vr5400/march=vr5500\n+\tmfix-vr4120/mfix-vr4130/march=vr4300/march=vr5000/march=vr5400/march=vr5500\n \n MULTILIB_DIRNAMES =\t\\\n \tel eb\t\t\\\n@@ -84,7 +84,8 @@ MULTILIB_DIRNAMES =\t\\\n \tmips16\t\t\\\n \tvr4120 vr4130 vr4300 vr5000 vr5400 vr5500\n \n-MULTILIB_MATCHES = EL=mel EB=meb mfix-vr4120=march?vr4120\n+MULTILIB_MATCHES = EL=mel EB=meb mfix-vr4120=march?vr4120 \\\n+\t\t   mfix-vr4130=march?vr4130\n \n # Assume a 41xx-series is the default: we'd need a *mips16 entry if\n # the default processor didn't support mips16.  Also assume the"}, {"sha": "bb182923af8846fc383a81dd91b631f842260f5a", "filename": "gcc/config/mips/vr.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Fconfig%2Fmips%2Fvr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Fconfig%2Fmips%2Fvr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fvr.h?ref=0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "patch": "@@ -19,20 +19,28 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n-#define DEFAULT_VR_ARCH \"vr4130\"\n+#define DEFAULT_VR_ARCH \"mfix-vr4130\"\n #define MIPS_ABI_DEFAULT ABI_EABI\n #define MIPS_MARCH_CONTROLS_SOFT_FLOAT 1\n #define MULTILIB_DEFAULTS \\\n \t{ MULTILIB_ENDIAN_DEFAULT,\t\t\\\n \t  MULTILIB_ABI_DEFAULT,\t\t\t\\\n-\t  \"march=\" DEFAULT_VR_ARCH }\n+\t  DEFAULT_VR_ARCH }\n \n #define DRIVER_SELF_SPECS \\\n+\t/* Enforce the default architecture.  This is mostly for\t\\\n+\t   the assembler's benefit.  */\t\t\t\t\t\\\n+\t\"%{!march=*:%{!mfix-vr4120:%{!mfix-vr4130:\"\t\t\t\\\n+\t\"-\" DEFAULT_VR_ARCH \"}}}\",\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t/* Make -mfix-vr4120 imply -march=vr4120.  This cuts down\t\\\n \t   on command-line tautology and makes it easier for t-vr to\t\\\n \t   provide a -mfix-vr4120 multilib.  */\t\t\t\t\\\n \t\"%{mfix-vr4120:%{!march=*:-march=vr4120}}\",\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+\t/* Same idea for -mfix-vr4130.  */\t\t\t\t\\\n+\t\"%{mfix-vr4130:%{!march=*:-march=vr4130}}\",\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t/* Make -mabi=eabi -mlong32 the default.  */\t\t\t\\\n \t\"%{!mabi=*:-mabi=eabi %{!mlong*:-mlong32}}\",\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -41,8 +49,4 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \t\"%{mabi=eabi:%{!mlong*:%{!mgp32:-mlong64}}}\",\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \t/* Remove -mgp32 if it is redundant.  */\t\t\t\\\n-\t\"%{mabi=32:%<mgp32}\",\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t/* Enforce the default architecture.  This is mostly for\t\\\n-\t   the assembler's benefit.  */\t\t\t\t\t\\\n-\t\"%{!march=*:-march=\" DEFAULT_VR_ARCH \"}\"\n+\t\"%{mabi=32:%<mgp32}\""}, {"sha": "a1ef8313dba78f992b07ba5b87ad39ecadd7f872", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "patch": "@@ -558,7 +558,8 @@ Objective-C and Objective-C++ Dialects}.\n -mmemcpy  -mno-memcpy  -mlong-calls  -mno-long-calls @gol\n -mmad  -mno-mad  -mfused-madd  -mno-fused-madd  -nocpp @gol\n -mfix-r4000  -mno-fix-r4000  -mfix-r4400  -mno-fix-r4400 @gol\n--mfix-vr4120  -mno-fix-vr4120  -mfix-sb1  -mno-fix-sb1 @gol\n+-mfix-vr4120  -mno-fix-vr4120  -mfix-vr4130 @gol\n+-mfix-sb1  -mno-fix-sb1 @gol\n -mflush-func=@var{func}  -mno-flush-func @gol\n -mbranch-likely  -mno-branch-likely @gol\n -mfp-exceptions -mno-fp-exceptions @gol\n@@ -9848,6 +9849,14 @@ the @code{mips64vr*-elf} configurations.\n Other VR4120 errata require a nop to be inserted between certain pairs of\n instructions.  These errata are handled by the assembler, not by GCC itself.\n \n+@item -mfix-vr4130\n+@opindex mfix-vr4130\n+Work around the VR4130 @code{mflo}/@code{mfhi} errata.  The\n+workarounds are implemented by the assembler rather than by GCC,\n+although GCC will avoid using @code{mflo} and @code{mfhi} if the\n+VR4130 @code{macc}, @code{macchi}, @code{dmacc} and @code{dmacchi}\n+instructions are available instead.\n+\n @item -mfix-sb1\n @itemx -mno-fix-sb1\n @opindex mfix-sb1"}, {"sha": "8e932ab6a50e3f7461a73fd01cf840789989c0e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "patch": "@@ -1,3 +1,7 @@\n+2005-03-11  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.target/mips/fix-vr4130-[1-4].c: New tests.\n+\n 2005-03-12  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR libfortran/20124"}, {"sha": "d6d2a5ad7f32d226c53fececf8cbbc0a49f8f71e", "filename": "gcc/testsuite/gcc.target/mips/fix-vr4130-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-vr4130-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-vr4130-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-vr4130-1.c?ref=0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target mips*-*-* } } */\n+/* { dg-skip-if \"\" { mips-sgi-irix* } { \"-mabi=32\" } { \"\" } } */\n+/* { dg-options \"-mfix-vr4130 -march=vr4130\" } */\n+#if _MIPS_ARCH_VR4130 && !__mips16\n+int foo (void) { int r; asm (\"# foo\" : \"=h\" (r)); return r; }\n+#else\n+asm (\"#\\tmacchi\\t\");\n+#endif\n+/* { dg-final { scan-assembler \"\\tmacchi\\t\" } } */"}, {"sha": "dcb48998425db321608e0356d5e140c00b3cc3de", "filename": "gcc/testsuite/gcc.target/mips/fix-vr4130-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-vr4130-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-vr4130-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-vr4130-2.c?ref=0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target mips*-*-* } } */\n+/* { dg-skip-if \"\" { mips-sgi-irix* } { \"-mabi=32\" } { \"\" } } */\n+/* { dg-options \"-mfix-vr4130 -march=vr4130\" } */\n+#if _MIPS_ARCH_VR4130 && !__mips16\n+int foo (void) { int r; asm (\"# foo\" : \"=l\" (r)); return r; }\n+#else\n+asm (\"#\\tmacc\\t\");\n+#endif\n+/* { dg-final { scan-assembler \"\\tmacc\\t\" } } */"}, {"sha": "ff258bab897b8a726d101ebe8d159dbbb7d1ad11", "filename": "gcc/testsuite/gcc.target/mips/fix-vr4130-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-vr4130-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-vr4130-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-vr4130-3.c?ref=0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target mips*-*-* } } */\n+/* { dg-skip-if \"\" { mips-sgi-irix* } { \"-mabi=32\" } { \"\" } } */\n+/* { dg-options \"-mfix-vr4130 -march=vr4130\" } */\n+#if _MIPS_ARCH_VR4130 && !__mips16 && __mips64\n+long long foo (void) { long long r; asm (\"# foo\" : \"=h\" (r)); return r; }\n+#else\n+asm (\"#\\tdmacchi\\t\");\n+#endif\n+/* { dg-final { scan-assembler \"\\tdmacchi\\t\" } } */"}, {"sha": "acb2d0807f3a434a6a9dc0ef808bb61867e206bb", "filename": "gcc/testsuite/gcc.target/mips/fix-vr4130-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-vr4130-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ac40e7a866e3b149bdeacbf5cc36d1fe364a952/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-vr4130-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-vr4130-4.c?ref=0ac40e7a866e3b149bdeacbf5cc36d1fe364a952", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile { target mips*-*-* } } */\n+/* { dg-skip-if \"\" { mips-sgi-irix* } { \"-mabi=32\" } { \"\" } } */\n+/* { dg-options \"-mfix-vr4130 -march=vr4130\" } */\n+#if _MIPS_ARCH_VR4130 && !__mips16 && __mips64\n+long long foo (void) { long long r; asm (\"# foo\" : \"=l\" (r)); return r; }\n+#else\n+asm (\"#\\tdmacc\\t\");\n+#endif\n+/* { dg-final { scan-assembler \"\\tdmacc\\t\" } } */"}]}