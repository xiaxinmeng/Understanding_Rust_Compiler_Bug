{"sha": "e079dced7a83837e8924e555aea315e4c43fafcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3OWRjZWQ3YTgzODM3ZTg5MjRlNTU1YWVhMzE1ZTRjNDNmYWZjZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-06-01T20:49:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-06-01T20:49:43Z"}, "message": "CWG 1581: When are constexpr member functions defined?\n\n\t* constexpr.c (instantiate_cx_fn_r, instantiate_constexpr_fns): New.\n\t(cxx_eval_outermost_constant_expr): Call instantiate_constexpr_fns.\n\nFrom-SVN: r261086", "tree": {"sha": "de1e4b094f7a6f35f193a2a2c37df09281b23b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de1e4b094f7a6f35f193a2a2c37df09281b23b76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e079dced7a83837e8924e555aea315e4c43fafcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e079dced7a83837e8924e555aea315e4c43fafcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e079dced7a83837e8924e555aea315e4c43fafcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e079dced7a83837e8924e555aea315e4c43fafcd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d072b977b02c2cea83d8a87c87af6fa89245606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d072b977b02c2cea83d8a87c87af6fa89245606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d072b977b02c2cea83d8a87c87af6fa89245606"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "d0ed3634a71edf520140290b2f031d8690abc7d8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e079dced7a83837e8924e555aea315e4c43fafcd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e079dced7a83837e8924e555aea315e4c43fafcd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e079dced7a83837e8924e555aea315e4c43fafcd", "patch": "@@ -1,3 +1,9 @@\n+2018-05-31  Jason Merrill  <jason@redhat.com>\n+\n+\tCWG 1581: When are constexpr member functions defined?\n+\t* constexpr.c (instantiate_cx_fn_r, instantiate_constexpr_fns): New.\n+\t(cxx_eval_outermost_constant_expr): Call instantiate_constexpr_fns.\n+\n 2018-06-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/58281 - explicit instantiation of constexpr"}, {"sha": "944c1cdf11ecf934b40ed7667bac7afaca388f86", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e079dced7a83837e8924e555aea315e4c43fafcd/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e079dced7a83837e8924e555aea315e4c43fafcd/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=e079dced7a83837e8924e555aea315e4c43fafcd", "patch": "@@ -4813,6 +4813,46 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n     return r;\n }\n \n+/* P0859: A function is needed for constant evaluation if it is a constexpr\n+   function that is named by an expression ([basic.def.odr]) that is\n+   potentially constant evaluated.\n+\n+   So we need to instantiate any constexpr functions mentioned by the\n+   expression even if the definition isn't needed for evaluating the\n+   expression.  */\n+\n+static tree\n+instantiate_cx_fn_r (tree *tp, int *walk_subtrees, void */*data*/)\n+{\n+  if (TREE_CODE (*tp) == FUNCTION_DECL\n+      && DECL_DECLARED_CONSTEXPR_P (*tp)\n+      && !DECL_INITIAL (*tp)\n+      && DECL_TEMPLOID_INSTANTIATION (*tp))\n+    {\n+      ++function_depth;\n+      instantiate_decl (*tp, /*defer_ok*/false, /*expl_inst*/false);\n+      --function_depth;\n+    }\n+  else if (TREE_CODE (*tp) == CALL_EXPR\n+\t   || TREE_CODE (*tp) == AGGR_INIT_EXPR)\n+    {\n+      if (EXPR_HAS_LOCATION (*tp))\n+\tinput_location = EXPR_LOCATION (*tp);\n+    }\n+\n+  if (!EXPR_P (*tp))\n+    *walk_subtrees = 0;\n+\n+  return NULL_TREE;\n+}\n+static void\n+instantiate_constexpr_fns (tree t)\n+{\n+  location_t loc = input_location;\n+  cp_walk_tree_without_duplicates (&t, instantiate_cx_fn_r, NULL);\n+  input_location = loc;\n+}\n+\n static tree\n cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n \t\t\t\t  bool strict = true, tree object = NULL_TREE)\n@@ -4858,6 +4898,7 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n \tr = TARGET_EXPR_INITIAL (r);\n     }\n \n+  instantiate_constexpr_fns (r);\n   r = cxx_eval_constant_expression (&ctx, r,\n \t\t\t\t    false, &non_constant_p, &overflow_p);\n \n@@ -4959,6 +5000,7 @@ is_sub_constant_expr (tree t)\n \n   constexpr_ctx ctx = { NULL, &map, NULL, NULL, NULL, NULL, true, true };\n \n+  instantiate_constexpr_fns (t);\n   cxx_eval_constant_expression (&ctx, t, false, &non_constant_p,\n \t\t\t\t&overflow_p);\n   return !non_constant_p && !overflow_p;"}, {"sha": "1016bec9d3e1fd3601023cef6ce74ee845fd525d", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-inst1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e079dced7a83837e8924e555aea315e4c43fafcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-inst1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e079dced7a83837e8924e555aea315e4c43fafcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-inst1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-inst1.C?ref=e079dced7a83837e8924e555aea315e4c43fafcd", "patch": "@@ -0,0 +1,13 @@\n+// Testcase from P0859\n+// { dg-do compile { target c++14 } }\n+\n+template<typename T> constexpr int f() { return T::value; } // { dg-error \"int\" }\n+template<bool B, typename T> void g(decltype(B ? f<T>() : 0));\n+template<bool B, typename T> void g(...);\n+template<bool B, typename T> void h(decltype(int{B ? f<T>() : 0}));\n+template<bool B, typename T> void h(...);\n+void x() {\n+  g<false, int>(0); // OK, B ? f<T>() : 0 is not potentially constant evaluated\n+  h<false, int>(0); // error, instantiates f<int> even though B evaluates to false and\n+                    // list-initialization of int from int cannot be narrowing\n+}"}]}