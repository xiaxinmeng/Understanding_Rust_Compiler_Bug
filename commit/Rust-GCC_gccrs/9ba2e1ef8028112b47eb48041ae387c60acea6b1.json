{"sha": "9ba2e1ef8028112b47eb48041ae387c60acea6b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJhMmUxZWY4MDI4MTEyYjQ3ZWI0ODA0MWFlMzg3YzYwYWNlYTZiMQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-12-07T07:14:42Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-12-07T07:14:42Z"}, "message": "c-common.c (parse_in): Make a cpp_reader *.\n\n        * c-common.c (parse_in): Make a cpp_reader *.\n        * cppfiles.c (_cpp_fake_include): Remove.\n        * cpphash.h: Similarly.\n        * cpplib.c (do_line): Don't call _cpp_fake_include.  A valid\n        #line always creates a callback; FC_RENAME if there are no\n        #line flags.\n        * fix-header.c (read_scan_file): cpp_push_buffer cannot fail.\n        The first EOF must be our get_char buffer.\n\nFrom-SVN: r38101", "tree": {"sha": "183c8a37ae0d1cb8f8f4a7c5d3cc009146d70982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/183c8a37ae0d1cb8f8f4a7c5d3cc009146d70982"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ba2e1ef8028112b47eb48041ae387c60acea6b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba2e1ef8028112b47eb48041ae387c60acea6b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ba2e1ef8028112b47eb48041ae387c60acea6b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba2e1ef8028112b47eb48041ae387c60acea6b1/comments", "author": null, "committer": null, "parents": [{"sha": "167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/167ed88f7ab3220aab5b66fef1ac3c12a8d326b9"}], "stats": {"total": 78, "additions": 11, "deletions": 67}, "files": [{"sha": "b42f32056180beb0ffa1bd5ce34e45e2b948185e", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba2e1ef8028112b47eb48041ae387c60acea6b1/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba2e1ef8028112b47eb48041ae387c60acea6b1/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=9ba2e1ef8028112b47eb48041ae387c60acea6b1", "patch": "@@ -36,7 +36,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"diagnostic.h\"\n #include \"obstack.h\"\n #include \"cpplib.h\"\n-cpp_reader  parse_in;\n+cpp_reader *parse_in;\t\t/* Declared in c-lex.h.  */\n \n #undef WCHAR_TYPE_SIZE\n #define WCHAR_TYPE_SIZE TYPE_PRECISION (wchar_type_node)"}, {"sha": "8a943a1ca22d8c92ab53dee3d4cefb38461861b1", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba2e1ef8028112b47eb48041ae387c60acea6b1/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba2e1ef8028112b47eb48041ae387c60acea6b1/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=9ba2e1ef8028112b47eb48041ae387c60acea6b1", "patch": "@@ -474,50 +474,6 @@ find_include_file (pfile, fname, search_start)\n   return 0;\n }\n \n-/* #line uses this to save artificial file names.  We have to stat the\n-   file because an all_include_files entry is always either + or -,\n-   there's no 'I don't know' value.  */\n-const char *\n-_cpp_fake_include (pfile, fname)\n-     cpp_reader *pfile;\n-     const char *fname;\n-{\n-  splay_tree_node nd;\n-  struct include_file *file;\n-  char *name;\n-\n-  file = find_include_file (pfile, fname, CPP_OPTION (pfile, quote_include));\n-  if (file)\n-    {\n-      if (file->fd > 0)\n-\t{\n-\t  close (file->fd);\n-\t  file->fd = -1;\n-\t}\n-      return file->name;\n-    }\n-\n-  name = xstrdup (fname);\n-  _cpp_simplify_pathname (name);\n-\n-  /* We cannot just blindly insert a node, because there's still the\n-     chance that the node already exists but isn't on the search path.  */\n-  nd = splay_tree_lookup (pfile->all_include_files, (splay_tree_key) name);\n-  if (nd)\n-    {\n-      free (name);\n-      return (const char *) nd->key;\n-    }\n-\n-  file = xcnew (struct include_file);\n-  file->name = name;\n-  file->fd = -2;\n-  splay_tree_insert (pfile->all_include_files, (splay_tree_key) name,\n-\t\t     (splay_tree_value) file);\n-\n-  return file->name;\n-}\n-\n /* Not everyone who wants to set system-header-ness on a buffer can\n    see the details of struct include_file.  This is an exported interface\n    because fix-header needs it.  */"}, {"sha": "433b66553f58d947fc9f9fbd7f8c6495d0543532", "filename": "gcc/cpphash.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba2e1ef8028112b47eb48041ae387c60acea6b1/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba2e1ef8028112b47eb48041ae387c60acea6b1/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=9ba2e1ef8028112b47eb48041ae387c60acea6b1", "patch": "@@ -233,7 +233,6 @@ extern int _cpp_compare_file_date       PARAMS ((cpp_reader *,\n extern void _cpp_report_missing_guards\tPARAMS ((cpp_reader *));\n extern void _cpp_init_includes\t\tPARAMS ((cpp_reader *));\n extern void _cpp_cleanup_includes\tPARAMS ((cpp_reader *));\n-extern const char *_cpp_fake_include\tPARAMS ((cpp_reader *, const char *));\n extern void _cpp_pop_file_buffer\tPARAMS ((cpp_reader *, cpp_buffer *));\n \n /* In cppexp.c */"}, {"sha": "537e477f620ca571c77b8666debebdfb186b7ac6", "filename": "gcc/cpplib.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba2e1ef8028112b47eb48041ae387c60acea6b1/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba2e1ef8028112b47eb48041ae387c60acea6b1/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=9ba2e1ef8028112b47eb48041ae387c60acea6b1", "patch": "@@ -721,7 +721,7 @@ do_line (pfile)\n   cpp_buffer *buffer = pfile->buffer;\n   const char *filename = buffer->nominal_fname;\n   unsigned int lineno = buffer->lineno;\n-  enum cpp_fc_reason reason = (enum cpp_fc_reason) -1;\n+  enum cpp_fc_reason reason = FC_RENAME;\n   unsigned long new_lineno;\n   unsigned int cap;\n   cpp_token token;\n@@ -749,19 +749,14 @@ do_line (pfile)\n       unsigned int len;\n       int action_number = 0;\n \n+      /* FIXME: memory leak.  */\n       len = token.val.str.len;\n-      fname = alloca (len + 1);\n+      fname = xmalloc (len + 1);\n       memcpy (fname, token.val.str.text, len);\n       fname[len] = '\\0';\n     \n-      if (strcmp (fname, buffer->nominal_fname))\n-\t{\n-\t  reason = FC_RENAME;\n-\t  if (!strcmp (fname, buffer->inc->name))\n-\t    buffer->nominal_fname = buffer->inc->name;\n-\t  else\n-\t    buffer->nominal_fname = _cpp_fake_include (pfile, fname);\n-\t}\n+      _cpp_simplify_pathname (fname);\n+      buffer->nominal_fname = fname;\n \n       if (read_line_number (pfile, &action_number) != 0)\n \t{\n@@ -803,8 +798,7 @@ do_line (pfile)\n \n   /* Our line number is incremented after the directive is processed.  */\n   buffer->lineno = new_lineno - 1;\n-  if (reason != (enum cpp_fc_reason) -1)\n-    _cpp_do_file_change (pfile, reason, filename, lineno);\n+  _cpp_do_file_change (pfile, reason, filename, lineno);\n }\n \n /* Arrange the file_change callback.  The assumption is that the"}, {"sha": "281e4c411c9dc027cb1e42aaab4655f6faa0d57b", "filename": "gcc/fix-header.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba2e1ef8028112b47eb48041ae387c60acea6b1/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba2e1ef8028112b47eb48041ae387c60acea6b1/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=9ba2e1ef8028112b47eb48041ae387c60acea6b1", "patch": "@@ -649,26 +649,21 @@ read_scan_file (in_fname, argc, argv)\n     {\n       static const unsigned char getchar_call[] = \"getchar();\";\n       int seen_filbuf = 0;\n-      cpp_buffer *buf = CPP_BUFFER (scan_in);\n-      if (cpp_push_buffer (scan_in, getchar_call,\n-\t\t\t   sizeof(getchar_call) - 1) == NULL)\n-\treturn;\n \n       /* Scan the macro expansion of \"getchar();\".  */\n+      cpp_push_buffer (scan_in, getchar_call, sizeof(getchar_call) - 1);\n       for (;;)\n \t{\n \t  cpp_token t;\n \n \t  cpp_get_token (scan_in, &t);\n \t  if (t.type == CPP_EOF)\n-\t    {\n-\t      cpp_pop_buffer (scan_in);\n-\t      if (CPP_BUFFER (scan_in) == buf)\n-\t\tbreak;\n-\t    }\n+\t    break;\n \t  else if (cpp_ideq (&t, \"_filbuf\"))\n \t    seen_filbuf++;\n \t}\n+      cpp_pop_buffer (scan_in);\n+\n       if (seen_filbuf)\n \t{\n \t  int need_filbuf = !SEEN (fn) && !REQUIRED (fn);"}]}