{"sha": "3a2257e6b3fa288d6c50831987949b9ff7dfb865", "node_id": "C_kwDOANBUbNoAKDNhMjI1N2U2YjNmYTI4OGQ2YzUwODMxOTg3OTQ5YjlmZjdkZmI4NjU", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-04T17:07:41Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-07T13:26:25Z"}, "message": "c++: Fix for decltype and bit-fields [PR95009]\n\nHere, decltype deduces the wrong type for certain expressions involving\nbit-fields.  Unlike in C, in C++ bit-field width is explicitly not part\nof the type, so I think decltype should never deduce to 'int:N'.  The\nproblem isn't that we're not calling unlowered_expr_type--we are--it's\nthat is_bitfield_expr_with_lowered_type only handles certain codes, but\nnot others.  For example, += works fine but ++ does not.\n\nThis also fixes decltype-bitfield2.C where we were crashing (!), but\nunfortunately it does not fix 84516 or 70733 where the problem is likely\na missing call to unlowered_expr_type.  It occurs to me now that typeof\nlikely has had the same issue, but this patch should fix that too.\n\n\tPR c++/95009\n\ngcc/cp/ChangeLog:\n\n\t* typeck.c (is_bitfield_expr_with_lowered_type) <case MODIFY_EXPR>:\n\tHandle UNARY_PLUS_EXPR, NEGATE_EXPR, NON_LVALUE_EXPR, BIT_NOT_EXPR,\n\tP*CREMENT_EXPR too.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/decltype-bitfield1.C: New test.\n\t* g++.dg/cpp0x/decltype-bitfield2.C: New test.", "tree": {"sha": "90a5927585968e6fbe3f12a1432dbb6a8c7959f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90a5927585968e6fbe3f12a1432dbb6a8c7959f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a2257e6b3fa288d6c50831987949b9ff7dfb865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2257e6b3fa288d6c50831987949b9ff7dfb865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2257e6b3fa288d6c50831987949b9ff7dfb865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2257e6b3fa288d6c50831987949b9ff7dfb865/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ef68c37b3a46e69ed4a5ff6b2b368e2c9a8023f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ef68c37b3a46e69ed4a5ff6b2b368e2c9a8023f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ef68c37b3a46e69ed4a5ff6b2b368e2c9a8023f"}], "stats": {"total": 97, "additions": 94, "deletions": 3}, "files": [{"sha": "4e60db40c767cbe8f997ce429df9ce4147f3f2da", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2257e6b3fa288d6c50831987949b9ff7dfb865/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2257e6b3fa288d6c50831987949b9ff7dfb865/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3a2257e6b3fa288d6c50831987949b9ff7dfb865", "patch": "@@ -2209,9 +2209,9 @@ invalid_nonstatic_memfn_p (location_t loc, tree expr, tsubst_flags_t complain)\n   return false;\n }\n \n-/* If EXP is a reference to a bitfield, and the type of EXP does not\n-   match the declared type of the bitfield, return the declared type\n-   of the bitfield.  Otherwise, return NULL_TREE.  */\n+/* If EXP is a reference to a bit-field, and the type of EXP does not\n+   match the declared type of the bit-field, return the declared type\n+   of the bit-field.  Otherwise, return NULL_TREE.  */\n \n tree\n is_bitfield_expr_with_lowered_type (const_tree exp)\n@@ -2230,6 +2230,14 @@ is_bitfield_expr_with_lowered_type (const_tree exp)\n \n     case MODIFY_EXPR:\n     case SAVE_EXPR:\n+    case UNARY_PLUS_EXPR:\n+    case PREDECREMENT_EXPR:\n+    case PREINCREMENT_EXPR:\n+    case POSTDECREMENT_EXPR:\n+    case POSTINCREMENT_EXPR:\n+    case NEGATE_EXPR:\n+    case NON_LVALUE_EXPR:\n+    case BIT_NOT_EXPR:\n       return is_bitfield_expr_with_lowered_type (TREE_OPERAND (exp, 0));\n \n     case COMPONENT_REF:"}, {"sha": "2d8d8e81bffbb186f9c30e50f71ea1b2d27d5044", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype-bitfield1.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2257e6b3fa288d6c50831987949b9ff7dfb865/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-bitfield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2257e6b3fa288d6c50831987949b9ff7dfb865/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-bitfield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-bitfield1.C?ref=3a2257e6b3fa288d6c50831987949b9ff7dfb865", "patch": "@@ -0,0 +1,65 @@\n+// PR c++/95009\n+// { dg-do compile { target c++11 } }\n+\n+struct false_type { static constexpr bool value = false; };\n+struct true_type { static constexpr bool value = true; };\n+template<class T, class U>\n+struct is_same : false_type {}; \n+template<class T>\n+struct is_same<T, T> : true_type {};\n+\n+struct A {\n+  int i : 31;\n+  unsigned long l : 37;\n+} a;\n+\n+void\n+g ()\n+{\n+  // Careful: pre{in,de}crements are lvalues -> deduce T&.  */\n+  static_assert (is_same<decltype(a.i), int>::value, \"\");\n+  static_assert (is_same<decltype((a.i)), int&>::value, \"\");\n+  static_assert (is_same<decltype(++a.i), int&>::value, \"\");\n+  static_assert (is_same<decltype((++a.i)), int&>::value, \"\");\n+  static_assert (is_same<decltype(a.i++), int>::value, \"\");\n+  static_assert (is_same<decltype((a.i++)), int>::value, \"\");\n+  static_assert (is_same<decltype(--a.i), int&>::value, \"\");\n+  static_assert (is_same<decltype((--a.i)), int&>::value, \"\");\n+  static_assert (is_same<decltype(a.i--), int>::value, \"\");\n+  static_assert (is_same<decltype((a.i--)), int>::value, \"\");\n+  static_assert (is_same<decltype(a.i += 1), int&>::value, \"\");\n+  static_assert (is_same<decltype((a.i += 1)), int&>::value, \"\");\n+  static_assert (is_same<decltype(a.i -= 1), int&>::value, \"\");\n+  static_assert (is_same<decltype((a.i -= 1)), int&>::value, \"\");\n+  static_assert (is_same<decltype(a.i *= 1), int&>::value, \"\");\n+  static_assert (is_same<decltype((a.i *= 1)), int&>::value, \"\");\n+  static_assert (is_same<decltype(+a.i), int>::value, \"\");\n+  static_assert (is_same<decltype((+a.i)), int>::value, \"\");\n+  static_assert (is_same<decltype(-a.i), int>::value, \"\");\n+  static_assert (is_same<decltype((-a.i)), int>::value, \"\");\n+  static_assert (is_same<decltype(~a.i), int>::value, \"\");\n+  static_assert (is_same<decltype((~a.i)), int>::value, \"\");\n+\n+  static_assert (is_same<decltype(a.l), unsigned long>::value, \"\");\n+  static_assert (is_same<decltype((a.l)), unsigned long&>::value, \"\");\n+  static_assert (is_same<decltype(++a.l), unsigned long&>::value, \"\");\n+  static_assert (is_same<decltype((++a.l)), unsigned long&>::value, \"\");\n+  static_assert (is_same<decltype(a.l++), unsigned long>::value, \"\");\n+  static_assert (is_same<decltype((a.l++)), unsigned long>::value, \"\");\n+  static_assert (is_same<decltype(--a.l), unsigned long&>::value, \"\");\n+  static_assert (is_same<decltype((--a.l)), unsigned long&>::value, \"\");\n+  static_assert (is_same<decltype(a.l--), unsigned long>::value, \"\");\n+  static_assert (is_same<decltype((a.l--)), unsigned long>::value, \"\");\n+  static_assert (is_same<decltype(a.l += 1), unsigned long&>::value, \"\");\n+  static_assert (is_same<decltype((a.l += 1)), unsigned long&>::value, \"\");\n+  static_assert (is_same<decltype(a.l -= 1), unsigned long&>::value, \"\");\n+  static_assert (is_same<decltype((a.l -= 1)), unsigned long&>::value, \"\");\n+  static_assert (is_same<decltype(a.l *= 1), unsigned long&>::value, \"\");\n+  static_assert (is_same<decltype((a.l *= 1)), unsigned long&>::value, \"\");\n+  static_assert (is_same<decltype(+a.l), unsigned long>::value, \"\");\n+  static_assert (is_same<decltype((+a.l)), unsigned long>::value, \"\");\n+  static_assert (is_same<decltype(-a.l), unsigned long>::value, \"\");\n+  static_assert (is_same<decltype((-a.l)), unsigned long>::value, \"\");\n+  static_assert (is_same<decltype(~a.l), unsigned long>::value, \"\");\n+  static_assert (is_same<decltype((~a.l)), unsigned long>::value, \"\");\n+}"}, {"sha": "4bf9c7682ff0e2f0fe1f8b7418e0d75fae2a2355", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype-bitfield2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2257e6b3fa288d6c50831987949b9ff7dfb865/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-bitfield2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2257e6b3fa288d6c50831987949b9ff7dfb865/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-bitfield2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype-bitfield2.C?ref=3a2257e6b3fa288d6c50831987949b9ff7dfb865", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/95009\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  int i:31;\n+};\n+\n+template<typename>\n+void f ()\n+{ \n+}\n+\n+int main ()\n+{\n+  A a;\n+  f<decltype(a.i += 1)>();\n+  f<decltype(++a.i)>();\n+}"}]}