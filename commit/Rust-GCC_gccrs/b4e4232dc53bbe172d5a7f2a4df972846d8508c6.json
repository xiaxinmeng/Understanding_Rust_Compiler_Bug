{"sha": "b4e4232dc53bbe172d5a7f2a4df972846d8508c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlNDIzMmRjNTNiYmUxNzJkNWE3ZjJhNGRmOTcyODQ2ZDg1MDhjNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-07-15T10:17:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-07-15T10:17:54Z"}, "message": "re PR middle-end/40747 (wrong code for int-is-in-range test at -O1 and above)\n\n\tPR middle-end/40747\n\t* fold-const.c (fold_cond_expr_with_comparison): When folding\n\t< and <= to MIN, make sure the MIN uses the same type as the\n\tcomparison's operands.\n\n\t* gcc.c-torture/execute/pr40747.c: New test.\n\nFrom-SVN: r149675", "tree": {"sha": "5543d61cd34cab5ac95d722b8fd9da0a241d17ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5543d61cd34cab5ac95d722b8fd9da0a241d17ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e4232dc53bbe172d5a7f2a4df972846d8508c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e4232dc53bbe172d5a7f2a4df972846d8508c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e4232dc53bbe172d5a7f2a4df972846d8508c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e4232dc53bbe172d5a7f2a4df972846d8508c6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00838d9ae17529661245350976a8f1ce5e553415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00838d9ae17529661245350976a8f1ce5e553415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00838d9ae17529661245350976a8f1ce5e553415"}], "stats": {"total": 78, "additions": 58, "deletions": 20}, "files": [{"sha": "d68d157212b33a644f414d1efa91cd0aadc14ccc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e4232dc53bbe172d5a7f2a4df972846d8508c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e4232dc53bbe172d5a7f2a4df972846d8508c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4e4232dc53bbe172d5a7f2a4df972846d8508c6", "patch": "@@ -1,3 +1,10 @@\n+2009-07-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/40747\n+\t* fold-const.c (fold_cond_expr_with_comparison): When folding\n+\t< and <= to MIN, make sure the MIN uses the same type as the\n+\tcomparison's operands.\n+\n 2009-07-15  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.md (ior_xor): New code iterator."}, {"sha": "eba869085cc5374c4b10a1f3e4105dc7a250b5b9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e4232dc53bbe172d5a7f2a4df972846d8508c6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e4232dc53bbe172d5a7f2a4df972846d8508c6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b4e4232dc53bbe172d5a7f2a4df972846d8508c6", "patch": "@@ -5310,31 +5310,35 @@ fold_cond_expr_with_comparison (tree type, tree arg0, tree arg1, tree arg2)\n \treturn fold_build3 (COND_EXPR, type, arg0, arg1, arg2);\n \n       case LT_EXPR:\n-\t/* If C1 is C2 + 1, this is min(A, C2).  */\n+\t/* If C1 is C2 + 1, this is min(A, C2), but use ARG00's type for\n+\t   MIN_EXPR, to preserve the signedness of the comparison.  */\n \tif (! operand_equal_p (arg2, TYPE_MAX_VALUE (type),\n \t\t\t       OEP_ONLY_CONST)\n \t    && operand_equal_p (arg01,\n \t\t\t\tconst_binop (PLUS_EXPR, arg2,\n \t\t\t\t\t     build_int_cst (type, 1), 0),\n \t\t\t\tOEP_ONLY_CONST))\n-\t  return pedantic_non_lvalue (fold_build2 (MIN_EXPR,\n-\t\t\t\t\t\t   type,\n-\t\t\t\t\t\t   fold_convert (type, arg1),\n-\t\t\t\t\t\t   arg2));\n+\t  {\n+\t    tem = fold_build2 (MIN_EXPR, TREE_TYPE (arg00), arg00,\n+\t\t\t       fold_convert (TREE_TYPE (arg00), arg2));\n+\t    return pedantic_non_lvalue (fold_convert (type, tem));\n+\t  }\n \tbreak;\n \n       case LE_EXPR:\n-\t/* If C1 is C2 - 1, this is min(A, C2).  */\n+\t/* If C1 is C2 - 1, this is min(A, C2), with the same care\n+\t   as above.  */\n \tif (! operand_equal_p (arg2, TYPE_MIN_VALUE (type),\n \t\t\t       OEP_ONLY_CONST)\n \t    && operand_equal_p (arg01,\n \t\t\t\tconst_binop (MINUS_EXPR, arg2,\n \t\t\t\t\t     build_int_cst (type, 1), 0),\n \t\t\t\tOEP_ONLY_CONST))\n-\t  return pedantic_non_lvalue (fold_build2 (MIN_EXPR,\n-\t\t\t\t\t\t   type,\n-\t\t\t\t\t\t   fold_convert (type, arg1),\n-\t\t\t\t\t\t   arg2));\n+\t  {\n+\t    tem = fold_build2 (MIN_EXPR, TREE_TYPE (arg00), arg00,\n+\t\t\t       fold_convert (TREE_TYPE (arg00), arg2));\n+\t    return pedantic_non_lvalue (fold_convert (type, tem));\n+\t  }\n \tbreak;\n \n       case GT_EXPR:\n@@ -5346,11 +5350,11 @@ fold_cond_expr_with_comparison (tree type, tree arg0, tree arg1, tree arg2)\n \t\t\t\tconst_binop (MINUS_EXPR, arg2,\n \t\t\t\t\t     build_int_cst (type, 1), 0),\n \t\t\t\tOEP_ONLY_CONST))\n-\t  return pedantic_non_lvalue (fold_convert (type,\n-\t\t\t\t      fold_build2 (MAX_EXPR, TREE_TYPE (arg00),\n-\t\t\t\t\t\t   arg00,\n-\t\t\t\t\t\t   fold_convert (TREE_TYPE (arg00),\n-\t\t\t\t\t\t\t         arg2))));\n+\t  {\n+\t    tem = fold_build2 (MAX_EXPR, TREE_TYPE (arg00), arg00,\n+\t\t\t       fold_convert (TREE_TYPE (arg00), arg2));\n+\t    return pedantic_non_lvalue (fold_convert (type, tem));\n+\t  }\n \tbreak;\n \n       case GE_EXPR:\n@@ -5361,11 +5365,11 @@ fold_cond_expr_with_comparison (tree type, tree arg0, tree arg1, tree arg2)\n \t\t\t\tconst_binop (PLUS_EXPR, arg2,\n \t\t\t\t\t     build_int_cst (type, 1), 0),\n \t\t\t\tOEP_ONLY_CONST))\n-\t  return pedantic_non_lvalue (fold_convert (type,\n-\t\t\t\t      fold_build2 (MAX_EXPR, TREE_TYPE (arg00),\n-\t\t\t\t\t\t   arg00,\n-\t\t\t\t\t\t   fold_convert (TREE_TYPE (arg00),\n-\t\t\t\t\t\t\t         arg2))));\n+\t  {\n+\t    tem = fold_build2 (MAX_EXPR, TREE_TYPE (arg00), arg00,\n+\t\t\t       fold_convert (TREE_TYPE (arg00), arg2));\n+\t    return pedantic_non_lvalue (fold_convert (type, tem));\n+\t  }\n \tbreak;\n       case NE_EXPR:\n \tbreak;"}, {"sha": "6083654ab0b6634e745459091fb48f2f003a080e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e4232dc53bbe172d5a7f2a4df972846d8508c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e4232dc53bbe172d5a7f2a4df972846d8508c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4e4232dc53bbe172d5a7f2a4df972846d8508c6", "patch": "@@ -1,3 +1,8 @@\n+2009-07-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/40747\n+\t* gcc.c-torture/execute/pr40747.c: New test.\n+\n 2009-07-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/40753"}, {"sha": "1c75be3fcc5b4c609efd04e856a61088cac6794c", "filename": "gcc/testsuite/gcc.c-torture/execute/pr40747.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e4232dc53bbe172d5a7f2a4df972846d8508c6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr40747.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e4232dc53bbe172d5a7f2a4df972846d8508c6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr40747.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr40747.c?ref=b4e4232dc53bbe172d5a7f2a4df972846d8508c6", "patch": "@@ -0,0 +1,22 @@\n+/* PR middle-end/40747 */\n+\n+extern void abort (void);\n+\n+int\n+foo (int i)\n+{\n+  return (i < 4 && i >= 0) ? i : 4;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (-1) != 4) abort ();\n+  if (foo (0) != 0) abort ();\n+  if (foo (1) != 1) abort ();\n+  if (foo (2) != 2) abort ();\n+  if (foo (3) != 3) abort ();\n+  if (foo (4) != 4) abort ();\n+  if (foo (5) != 4) abort ();\n+  return 0;\n+}"}]}