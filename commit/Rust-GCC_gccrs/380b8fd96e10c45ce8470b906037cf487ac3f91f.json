{"sha": "380b8fd96e10c45ce8470b906037cf487ac3f91f", "node_id": "C_kwDOANBUbNoAKDM4MGI4ZmQ5NmUxMGM0NWNlODQ3MGI5MDYwMzdjZjQ4N2FjM2Y5MWY", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-08-12T17:19:36Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-08-24T19:15:31Z"}, "message": "[RISCV] Add the list of operand modifiers to riscv.md too\n\nTo make it easier to find operands modifiers while in the md\nfile, add the list of modifiers to the top of the md file.\nThis is similar to i386 target.\n\nOK? Built and tested for riscv32-linux-gnu and riscv64-linux-gnu.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.cc (riscv_print_operand): Make a mention to\n\tkeep the list in riscv.md in sync with this list.\n\t* config/riscv/riscv.md: Add list of modifiers as comments.", "tree": {"sha": "96d6bf931ce4a884894f45c82db938a3448dd32b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96d6bf931ce4a884894f45c82db938a3448dd32b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/380b8fd96e10c45ce8470b906037cf487ac3f91f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380b8fd96e10c45ce8470b906037cf487ac3f91f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/380b8fd96e10c45ce8470b906037cf487ac3f91f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380b8fd96e10c45ce8470b906037cf487ac3f91f/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7770e0ad8f4bcd2c7852fa88eb7d5235f68a811d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7770e0ad8f4bcd2c7852fa88eb7d5235f68a811d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7770e0ad8f4bcd2c7852fa88eb7d5235f68a811d"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "189be5e4e6fb5a1e99123a70a99f144bf720e1ed", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380b8fd96e10c45ce8470b906037cf487ac3f91f/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380b8fd96e10c45ce8470b906037cf487ac3f91f/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=380b8fd96e10c45ce8470b906037cf487ac3f91f", "patch": "@@ -3730,7 +3730,9 @@ riscv_memmodel_needs_release_fence (enum memmodel model)\n    'z'\tPrint x0 if OP is zero, otherwise print OP normally.\n    'i'\tPrint i if the operand is not a register.\n    'S'\tPrint shift-index of single-bit mask OP.\n-   'T'\tPrint shift-index of inverted single-bit mask OP.  */\n+   'T'\tPrint shift-index of inverted single-bit mask OP.\n+\n+   Note please keep this list and the list in riscv.md in sync.  */\n \n static void\n riscv_print_operand (FILE *file, rtx op, int letter)"}, {"sha": "aad2836d1798cdb167ae6abda43d2882efe1a49b", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380b8fd96e10c45ce8470b906037cf487ac3f91f/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380b8fd96e10c45ce8470b906037cf487ac3f91f/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=380b8fd96e10c45ce8470b906037cf487ac3f91f", "patch": "@@ -19,6 +19,20 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n+\n+;; Keep this list and the one above riscv_print_operand in sync.\n+;; The special asm out single letter directives following a '%' are:\n+;; h -- Print the high-part relocation associated with OP, after stripping\n+;;\t  any outermost HIGH.\n+;; R -- Print the low-part relocation associated with OP.\n+;; C -- Print the integer branch condition for comparison OP.\n+;; A -- Print the atomic operation suffix for memory model OP.\n+;; F -- Print a FENCE if the memory model requires a release.\n+;; z -- Print x0 if OP is zero, otherwise print OP normally.\n+;; i -- Print i if the operand is not a register.\n+;; S -- Print shift-index of single-bit mask OP.\n+;; T -- Print shift-index of inverted single-bit mask OP.\n+\n (define_c_enum \"unspec\" [\n   ;; Override return address for exception handling.\n   UNSPEC_EH_RETURN"}]}