{"sha": "a12f68f4f21713eab33d5adb8c538d1e3a822464", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEyZjY4ZjRmMjE3MTNlYWIzM2Q1YWRiOGM1MzhkMWUzYTgyMjQ2NA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-01-21T17:15:54Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-01-21T17:15:54Z"}, "message": "reload1.c (eliminate_regs, case MINUS): Canonicalize (minus (plus reg const) reg) to (plus (minus reg reg) const).\n\n\t* reload1.c (eliminate_regs, case MINUS): Canonicalize\n\t(minus (plus reg const) reg) to (plus (minus reg reg) const).\n\t* reload.c (find_reloads_address): Treat (plus (minus reg reg) const)\n\tthe same as (plus (plus reg reg) const).\n\nFrom-SVN: r13539", "tree": {"sha": "f46252d0d92d72617c4cff7d3bf736a77fdfb44f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f46252d0d92d72617c4cff7d3bf736a77fdfb44f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a12f68f4f21713eab33d5adb8c538d1e3a822464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a12f68f4f21713eab33d5adb8c538d1e3a822464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a12f68f4f21713eab33d5adb8c538d1e3a822464", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a12f68f4f21713eab33d5adb8c538d1e3a822464/comments", "author": null, "committer": null, "parents": [{"sha": "e454beb74e176e1f4bff5b2980e646da38af0baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e454beb74e176e1f4bff5b2980e646da38af0baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e454beb74e176e1f4bff5b2980e646da38af0baf"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "e1f5f9126877231d0daf76fa8366f5bf819ad40b", "filename": "gcc/reload.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12f68f4f21713eab33d5adb8c538d1e3a822464/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12f68f4f21713eab33d5adb8c538d1e3a822464/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=a12f68f4f21713eab33d5adb8c538d1e3a822464", "patch": "@@ -4368,7 +4368,9 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n   /* If we have an indexed stack slot, there are three possible reasons why\n      it might be invalid: The index might need to be reloaded, the address\n      might have been made by frame pointer elimination and hence have a\n-     constant out of range, or both reasons might apply.  \n+     constant out of range, or the address is the result of register\n+     elimination and (plus (plus reg reg) const), which has been\n+     canonicalized from (plus (plus reg const) reg), isn't a valid address.\n \n      We can easily check for an index needing reload, but even if that is the\n      case, we might also have an invalid constant.  To avoid making the\n@@ -4395,7 +4397,11 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n      innermost PLUS.  */\n \n   else if (GET_CODE (ad) == PLUS && GET_CODE (XEXP (ad, 1)) == CONST_INT\n-\t   && GET_CODE (XEXP (ad, 0)) == PLUS\n+\t   && (GET_CODE (XEXP (ad, 0)) == PLUS\n+\t       /* MINUS can happen as a result of register elimination of\n+\t\t  (minus eliminable reg) which gets canonicalized as\n+\t\t  (plus (minus reg reg) const).  */\n+\t       || GET_CODE (XEXP (ad, 0)) == MINUS)\n \t   && (XEXP (XEXP (ad, 0), 0) == frame_pointer_rtx\n #if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n \t       || XEXP (XEXP (ad, 0), 0) == hard_frame_pointer_rtx\n@@ -4406,7 +4412,7 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n \t       || XEXP (XEXP (ad, 0), 0) == stack_pointer_rtx)\n \t   && ! memory_address_p (mode, ad))\n     {\n-      *loc = ad = gen_rtx (PLUS, GET_MODE (ad),\n+      *loc = ad = gen_rtx (GET_CODE (XEXP (ad, 0)), GET_MODE (ad),\n \t\t\t   plus_constant (XEXP (XEXP (ad, 0), 0),\n \t\t\t\t\t  INTVAL (XEXP (ad, 1))),\n \t\t\t   XEXP (XEXP (ad, 0), 1));"}, {"sha": "d4f2140895431d044d280afaf8a876162aa50a7f", "filename": "gcc/reload1.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12f68f4f21713eab33d5adb8c538d1e3a822464/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12f68f4f21713eab33d5adb8c538d1e3a822464/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a12f68f4f21713eab33d5adb8c538d1e3a822464", "patch": "@@ -2853,7 +2853,7 @@ eliminate_regs (x, mem_mode, insn)\n \t context.\n \n \t If we have (plus (eliminable) (reg)), we want to produce\n-\t (plus (plus (replacement) (reg) (const))).  If this was part of a\n+\t (plus (plus (replacement) (reg)) (const)).  If this was part of a\n \t normal add insn, (plus (replacement) (reg)) will be pushed as a\n \t reload.  This is the desired action.  */\n \n@@ -2892,6 +2892,28 @@ eliminate_regs (x, mem_mode, insn)\n       }\n       return x;\n \n+    case MINUS:\n+      /* If we have (minus (eliminable) (reg)), we want to produce\n+\t (plus (minus (replacement) (reg)) (const)).  The main reason being\n+\t to be consistent with what is done for PLUS.  find_reloads_address\n+\t assumes that we do this.  */\n+      {\n+\trtx new0 = eliminate_regs (XEXP (x, 0), mem_mode, insn);\n+\trtx new1 = eliminate_regs (XEXP (x, 1), mem_mode, insn);\n+\n+\tif (new0 != XEXP (x, 0) || new1 != XEXP (x, 1))\n+\t  {\n+\t    if (GET_CODE (new0) == PLUS)\n+\t      return gen_rtx (PLUS, GET_MODE (x),\n+\t\t\t      gen_rtx (MINUS, GET_MODE (x),\n+\t\t\t\t       XEXP (new0, 0), new1),\n+\t\t\t      XEXP (new0, 1));\n+\t    else\n+\t      return gen_rtx (MINUS, GET_MODE (x), new0, new1);\n+\t  }\n+      }\n+      return x;\n+\n     case MULT:\n       /* If this is the product of an eliminable register and a \n \t constant, apply the distribute law and move the constant out\n@@ -2920,7 +2942,6 @@ eliminate_regs (x, mem_mode, insn)\n \n     case CALL:\n     case COMPARE:\n-    case MINUS:\n     case DIV:      case UDIV:\n     case MOD:      case UMOD:\n     case AND:      case IOR:      case XOR:"}]}