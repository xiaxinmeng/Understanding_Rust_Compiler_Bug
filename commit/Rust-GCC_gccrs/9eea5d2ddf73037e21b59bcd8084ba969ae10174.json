{"sha": "9eea5d2ddf73037e21b59bcd8084ba969ae10174", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlYTVkMmRkZjczMDM3ZTIxYjU5YmNkODA4NGJhOTY5YWUxMDE3NA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-05-21T23:10:50Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-06-03T23:22:52Z"}, "message": "Provide diagnostic hints for missing C inttypes.h string constants.\n\nThis adds a flag to c_parser so we know when we were trying to\nconstruct a string literal. If there is a parse error and we were\nconstructing a string literal, and the next token is an unknown\nidentifier name, and we know there is a standard header that defines\nthat name as a string literal, then add a missing header hint to\nthe error messsage.\n\nThe list of macro names are also used when providing a hint for\nmissing identifiers.\n\ngcc/c-family/ChangeLog:\n\n\t* known-headers.cc (get_string_macro_hint): New function.\n\t(get_stdlib_header_for_name): Use get_string_macro_hint.\n\t(get_c_stdlib_header_for_string_macro_name): New function.\n\t* known-headers.h (get_c_stdlib_header_for_string_macro_name):\n\tNew function declaration.\n\ngcc/c/ChangeLog:\n\n\t* c-parser.c (struct c_parser): Add seen_string_literal\n\tbitfield.\n\t(c_parser_consume_token): Reset seen_string_literal.\n\t(c_parser_error_richloc): Add name_hint if seen_string_literal\n\tand next token is a CPP_NAME and we have a missing header\n\tsuggestion for the name.\n\t(c_parser_string_literal): Set seen_string_literal.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/spellcheck-inttypes.c: New test.\n\t* g++.dg/spellcheck-inttypes.C: Likewise.", "tree": {"sha": "fc247b15b760343e12c8472d91d08634b9340557", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc247b15b760343e12c8472d91d08634b9340557"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9eea5d2ddf73037e21b59bcd8084ba969ae10174", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eea5d2ddf73037e21b59bcd8084ba969ae10174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eea5d2ddf73037e21b59bcd8084ba969ae10174", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eea5d2ddf73037e21b59bcd8084ba969ae10174/comments", "author": null, "committer": null, "parents": [{"sha": "34e4962aed08b38f37e37242234bfbbd1b897f39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e4962aed08b38f37e37242234bfbbd1b897f39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e4962aed08b38f37e37242234bfbbd1b897f39"}], "stats": {"total": 203, "additions": 202, "deletions": 1}, "files": [{"sha": "c07cfd1db815533acd6e8f075a5979316251c284", "filename": "gcc/c-family/known-headers.cc", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eea5d2ddf73037e21b59bcd8084ba969ae10174/gcc%2Fc-family%2Fknown-headers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eea5d2ddf73037e21b59bcd8084ba969ae10174/gcc%2Fc-family%2Fknown-headers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fknown-headers.cc?ref=9eea5d2ddf73037e21b59bcd8084ba969ae10174", "patch": "@@ -46,6 +46,49 @@ struct stdlib_hint\n   const char *header[NUM_STDLIBS];\n };\n \n+/* Given non-NULL NAME, return the header name defining it (as literal\n+   string) within either the standard library (with '<' and '>'), or\n+   NULL.\n+\n+   Only handle string macros, so that this can be used for\n+   get_stdlib_header_for_name and\n+   get_c_stdlib_header_for_string_macro_name.  */\n+\n+static const char *\n+get_string_macro_hint (const char *name, enum stdlib lib)\n+{\n+  /* <inttypes.h> and <cinttypes>.  */\n+  static const char *c99_cxx11_macros[] =\n+    { \"PRId8\", \"PRId16\", \"PRId32\", \"PRId64\",\n+      \"PRIi8\", \"PRIi16\", \"PRIi32\", \"PRIi64\",\n+      \"PRIo8\", \"PRIo16\", \"PRIo32\", \"PRIo64\",\n+      \"PRIu8\", \"PRIu16\", \"PRIu32\", \"PRIu64\",\n+      \"PRIx8\", \"PRIx16\", \"PRIx32\", \"PRIx64\",\n+      \"PRIX8\", \"PRIX16\", \"PRIX32\", \"PRIX64\",\n+\n+      \"PRIdPTR\", \"PRIiPTR\", \"PRIoPTR\", \"PRIuPTR\", \"PRIxPTR\", \"PRIXPTR\",\n+\n+      \"SCNd8\", \"SCNd16\", \"SCNd32\", \"SCNd64\",\n+      \"SCNi8\", \"SCNi16\", \"SCNi32\", \"SCNi64\",\n+      \"SCNo8\", \"SCNo16\", \"SCNo32\", \"SCNo64\",\n+      \"SCNu8\", \"SCNu16\", \"SCNu32\", \"SCNu64\",\n+      \"SCNx8\", \"SCNx16\", \"SCNx32\", \"SCNx64\",\n+\n+      \"SCNdPTR\", \"SCNiPTR\", \"SCNoPTR\", \"SCNuPTR\", \"SCNxPTR\" };\n+\n+  if ((lib == STDLIB_C && flag_isoc99)\n+      || (lib == STDLIB_CPLUSPLUS && cxx_dialect >= cxx11 ))\n+    {\n+      const size_t num_c99_cxx11_macros\n+\t= sizeof (c99_cxx11_macros) / sizeof (c99_cxx11_macros[0]);\n+      for (size_t i = 0; i < num_c99_cxx11_macros; i++)\n+\tif (strcmp (name, c99_cxx11_macros[i]) == 0)\n+\t  return lib == STDLIB_C ? \"<inttypes.h>\" : \"<cinttypes>\";\n+    }\n+\n+  return NULL;\n+}\n+\n /* Given non-NULL NAME, return the header name defining it within either\n    the standard library (with '<' and '>'), or NULL.\n    Only handles a subset of the most common names within the stdlibs.  */\n@@ -196,7 +239,7 @@ get_stdlib_header_for_name (const char *name, enum stdlib lib)\n       if (strcmp (name, c99_cxx11_hints[i].name) == 0)\n \treturn c99_cxx11_hints[i].header[lib];\n \n-  return NULL;\n+  return get_string_macro_hint (name, lib);\n }\n \n /* Given non-NULL NAME, return the header name defining it within the C\n@@ -217,6 +260,14 @@ get_cp_stdlib_header_for_name (const char *name)\n   return get_stdlib_header_for_name (name, STDLIB_CPLUSPLUS);\n }\n \n+/* Given non-NULL NAME, return the header name defining a string macro\n+   within the C standard library (with '<' and '>'), or NULL.  */\n+const char *\n+get_c_stdlib_header_for_string_macro_name (const char *name)\n+{\n+  return get_string_macro_hint (name, STDLIB_C);\n+}\n+\n /* Implementation of class suggest_missing_header.  */\n \n /* suggest_missing_header's ctor.  */"}, {"sha": "a69bbbf28e7649ba081cee6e19bed392429a1ff5", "filename": "gcc/c-family/known-headers.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eea5d2ddf73037e21b59bcd8084ba969ae10174/gcc%2Fc-family%2Fknown-headers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eea5d2ddf73037e21b59bcd8084ba969ae10174/gcc%2Fc-family%2Fknown-headers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fknown-headers.h?ref=9eea5d2ddf73037e21b59bcd8084ba969ae10174", "patch": "@@ -23,6 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n extern const char *get_c_stdlib_header_for_name (const char *name);\n extern const char *get_cp_stdlib_header_for_name (const char *name);\n \n+extern const char *get_c_stdlib_header_for_string_macro_name (const char *n);\n+\n /* Subclass of deferred_diagnostic for suggesting to the user\n    that they have missed a #include.  */\n "}, {"sha": "df0b59f9f95ce07680f6c53e501d2a61adc2fd40", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eea5d2ddf73037e21b59bcd8084ba969ae10174/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eea5d2ddf73037e21b59bcd8084ba969ae10174/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=9eea5d2ddf73037e21b59bcd8084ba969ae10174", "patch": "@@ -69,6 +69,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/name-hint.h\"\n #include \"tree-iterator.h\"\n #include \"memmodel.h\"\n+#include \"c-family/known-headers.h\"\n \n /* We need to walk over decls with incomplete struct/union/enum types\n    after parsing the whole translation unit.\n@@ -223,6 +224,13 @@ struct GTY(()) c_parser {\n      keywords are valid.  */\n   BOOL_BITFIELD objc_property_attr_context : 1;\n \n+  /* Whether we have just seen/constructed a string-literal.  Set when\n+     returning a string-literal from c_parser_string_literal.  Reset\n+     in consume_token.  Useful when we get a parse error and see an\n+     unknown token, which could have been a string-literal constant\n+     macro.  */\n+  BOOL_BITFIELD seen_string_literal : 1;\n+\n   /* Location of the last consumed token.  */\n   location_t last_token_location;\n };\n@@ -853,6 +861,7 @@ c_parser_consume_token (c_parser *parser)\n         }\n     }\n   parser->tokens_avail--;\n+  parser->seen_string_literal = false;\n }\n \n /* Expect the current token to be a #pragma.  Consume it and remember\n@@ -966,6 +975,25 @@ c_parser_error_richloc (c_parser *parser, const char *gmsgid,\n \t}\n     }\n \n+  /* If we were parsing a string-literal and there is an unknown name\n+     token right after, then check to see if that could also have been\n+     a literal string by checking the name against a list of known\n+     standard string literal constants defined in header files. If\n+     there is one, then add that as an hint to the error message. */\n+  auto_diagnostic_group d;\n+  name_hint h;\n+  if (parser->seen_string_literal && token->type == CPP_NAME)\n+    {\n+      tree name = token->value;\n+      const char *token_name = IDENTIFIER_POINTER (name);\n+      const char *header_hint\n+\t= get_c_stdlib_header_for_string_macro_name (token_name);\n+      if (header_hint != NULL)\n+\th = name_hint (NULL, new suggest_missing_header (token->location,\n+\t\t\t\t\t\t\t token_name,\n+\t\t\t\t\t\t\t header_hint));\n+    }\n+\n   c_parse_error (gmsgid,\n \t\t /* Because c_parse_error does not understand\n \t\t    CPP_KEYWORD, keywords are treated like\n@@ -7539,6 +7567,7 @@ c_parser_string_literal (c_parser *parser, bool translate, bool wide_ok)\n   ret.original_code = STRING_CST;\n   ret.original_type = NULL_TREE;\n   set_c_expr_source_range (&ret, get_range_from_loc (line_table, loc));\n+  parser->seen_string_literal = true;\n   return ret;\n }\n "}, {"sha": "c5861127ca6dc5a4a94cab131c904b2a0463420e", "filename": "gcc/testsuite/g++.dg/spellcheck-inttypes.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eea5d2ddf73037e21b59bcd8084ba969ae10174/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-inttypes.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eea5d2ddf73037e21b59bcd8084ba969ae10174/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-inttypes.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-inttypes.C?ref=9eea5d2ddf73037e21b59bcd8084ba969ae10174", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-options \"-std=c++11\" } */\n+#include <cstdio>\n+#include <cstdint>\n+/* Missing <cinttypes>.  */\n+\n+int8_t i8;\n+int16_t i16;\n+int32_t i32;\n+int64_t i64;\n+\n+intptr_t ip;\n+uintptr_t up;\n+\n+/* As an identifier.  */\n+const char *hex8_fmt = PRIx8; /* { dg-error \"'PRIx8' was not declared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIx8' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *hex16_fmt = PRIx16; /* { dg-error \"'PRIx16' was not declared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIx16' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *hex32_fmt = PRIx32; /* { dg-error \"'PRIx32' was not declared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIx32' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *hex64_fmt = PRIx64; /* { dg-error \"'PRIx64' was not declared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIx64' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *hexptr_fmt = PRIxPTR; /* { dg-error \"'PRIxPTR' was not declared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIxPTR' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\n+void test_printf (void)\n+{\n+  printf (\"some format strings %s, %s, %s, %s, %s, %s\\n\",\n+\t  PRId8, /* { dg-error \"'PRId8' was not declared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRId8' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\t  PRIi16, /* { dg-error \"'PRIi16' was not declared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIi16' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\t  PRIo32, /* { dg-error \"'PRIo32' was not declared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIo32' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\t  PRIu64, /* { dg-error \"'PRIu64' was not declared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIu64' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\t  PRIx32, /* { dg-error \"'PRIx32' was not declared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIx32' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\t  PRIoPTR);  /* { dg-error \"'PRIoPTR' was not declared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIoPTR' is defined in header '<cinttypes>'; did you forget to '#include <cinttypes>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+}"}, {"sha": "56dc2f3dcfd9506349ea30fc320b87f83b8ca0fa", "filename": "gcc/testsuite/gcc.dg/spellcheck-inttypes.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9eea5d2ddf73037e21b59bcd8084ba969ae10174/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-inttypes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9eea5d2ddf73037e21b59bcd8084ba969ae10174/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-inttypes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-inttypes.c?ref=9eea5d2ddf73037e21b59bcd8084ba969ae10174", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-options \"-std=c99\" } */\n+#include <stdio.h>\n+#include <stdint.h>\n+/* Missing <inttypes.h>.  */\n+\n+int8_t i8;\n+int16_t i16;\n+int32_t i32;\n+int64_t i64;\n+\n+intptr_t ip;\n+uintptr_t up;\n+\n+/* As an identifier.  */\n+const char *hex8_fmt = PRIx8; /* { dg-error \"'PRIx8' undeclared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIx8' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *hex16_fmt = PRIx16; /* { dg-error \"'PRIx16' undeclared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIx16' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *hex32_fmt = PRIx32; /* { dg-error \"'PRIx32' undeclared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIx32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *hex64_fmt = PRIx64; /* { dg-error \"'PRIx64' undeclared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIx64' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *hexptr_fmt = PRIxPTR; /* { dg-error \"'PRIxPTR' undeclared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\n+/* As a part of a string-literal.  */\n+const char *dec8msg_fmt = \"Provide %\" PRId8 \"\\n\"; /* { dg-error \"expected\" \"expected string-literal\" { target *-*-* } } */\n+/* { dg-message \"'PRId8' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *dec16msg_fmt = \"Provide %\" PRId16 \"\\n\"; /* { dg-error \"expected\" \"expected string-literal\" { target *-*-* } } */\n+/* { dg-message \"'PRId16' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *dec32msg_fmt = \"Provide %\" PRId32 \"\\n\"; /* { dg-error \"expected\" \"expected string-literal\" { target *-*-* } } */\n+/* { dg-message \"'PRId32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *dec64msg_fmt = \"Provide %\" PRId64 \"\\n\"; /* { dg-error \"expected\" \"expected string-literal\" { target *-*-* } } */\n+/* { dg-message \"'PRId64' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+const char *decptrmsg_fmt = \"Provide %\" PRIdPTR \"\\n\"; /* { dg-error \"expected\" \"expected string-literal\" { target *-*-* } } */\n+/* { dg-message \"'PRIdPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\n+void test_printf (void)\n+{\n+  printf (\"some format strings %s, %s, %s, %s, %s, %s\\n\",\n+\t  PRId8, /* { dg-error \"'PRId8' undeclared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRId8' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\t  PRIi16, /* { dg-error \"'PRIi16' undeclared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIi16' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\t  PRIo32, /* { dg-error \"'PRIo32' undeclared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIo32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\t  PRIu64, /* { dg-error \"'PRIu64' undeclared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIu64' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\t  PRIoPTR);  /* { dg-error \"'PRIoPTR' undeclared\" \"undeclared identifier\" { target *-*-* } } */\n+/* { dg-message \"'PRIoPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+\n+  printf (\"%\" PRIo8 \"\\n\", i8); /* { dg-error \"expected\" } */\n+/* { dg-message \"'PRIo8' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  printf (\"%\" PRIo16 \"\\n\", i16); /* { dg-error \"expected\" } */\n+/* { dg-message \"'PRIo16' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  printf (\"%\" PRIo32 \"\\n\", i32); /* { dg-error \"expected\" } */\n+/* { dg-message \"'PRIo32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  printf (\"%\" PRIo64 \"\\n\", i64); /* { dg-error \"expected\" } */\n+/* { dg-message \"'PRIo64' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  printf (\"%\" PRIoPTR \"\\n\", ip); /* { dg-error \"expected\" } */\n+/* { dg-message \"'PRIoPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+}\n+\n+void test_scanf (void)\n+{\n+  scanf (\"%\" SCNu8 \"\\n\", &i8); /* { dg-error \"expected\" } */\n+/* { dg-message \"'SCNu8' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  scanf (\"%\" SCNu16 \"\\n\", &i16); /* { dg-error \"expected\" } */\n+/* { dg-message \"'SCNu16' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  scanf (\"%\" SCNu32 \"\\n\", &i32); /* { dg-error \"expected\" } */\n+/* { dg-message \"'SCNu32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  scanf (\"%\" SCNu64 \"\\n\", &i64); /* { dg-error \"expected\" } */\n+/* { dg-message \"'SCNu64' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  scanf (\"%\" SCNuPTR \"\\n\", &ip); /* { dg-error \"expected\" } */\n+/* { dg-message \"'SCNuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+  scanf (\"%\" SCNxPTR \"\\n\", &up); /* { dg-error \"expected\" } */\n+/* { dg-message \"'SCNxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\" \"replacement note\" { target *-*-* } .-1 } */\n+}"}]}