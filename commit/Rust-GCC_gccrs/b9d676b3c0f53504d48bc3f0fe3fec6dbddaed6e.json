{"sha": "b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlkNjc2YjNjMGY1MzUwNGQ0OGJjM2YwZmUzZmVjNmRiZGRhZWQ2ZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-02-26T15:29:30Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-02-26T15:29:30Z"}, "message": "i386: Update -mfunction-return= for return with pop\n\nWhen -mfunction-return= is used, simple_return_pop_internal should pop\nreturn address into ECX register, adjust stack by bytes to pop from stack\nand jump to the return thunk via ECX register.\n\nTested on i686 and x86-64.\n\n\tPR target/84530\n\t* config/i386/i386-protos.h (ix86_output_indirect_jmp): Remove\n\tthe bool argument.\n\t(ix86_output_indirect_function_return): New prototype.\n\t(ix86_split_simple_return_pop_internal): Likewise.\n\t* config/i386/i386.c (indirect_return_via_cx): New.\n\t(indirect_return_via_cx_bnd): Likewise.\n\t(indirect_thunk_name): Handle return va CX_REG.\n\t(output_indirect_thunk_function): Create alias for\n\t__x86_return_thunk_[re]cx and __x86_return_thunk_[re]cx_bnd.\n\t(ix86_output_indirect_jmp): Remove the bool argument.\n\t(ix86_output_indirect_function_return): New function.\n\t(ix86_split_simple_return_pop_internal): Likewise.\n\t* config/i386/i386.md (*indirect_jump): Don't pass false\n\tto ix86_output_indirect_jmp.\n\t(*tablejump_1): Likewise.\n\t(simple_return_pop_internal): Change it to define_insn_and_split.\n\tCall ix86_split_simple_return_pop_internal to split it for\n\t-mfunction-return=.\n\t(simple_return_indirect_internal): Call\n\tix86_output_indirect_function_return instead of\n\tix86_output_indirect_jmp.\n\ngcc/testsuite/\n\n\tPR target/84530\n\t* gcc.target/i386/ret-thunk-22.c: New test.\n\t* gcc.target/i386/ret-thunk-23.c: Likewise.\n\t* gcc.target/i386/ret-thunk-24.c: Likewise.\n\t* gcc.target/i386/ret-thunk-25.c: Likewise.\n\t* gcc.target/i386/ret-thunk-26.c: Likewise.\n\nFrom-SVN: r257992", "tree": {"sha": "853e15f1381e1c82054c7094e406272fdfb7047e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/853e15f1381e1c82054c7094e406272fdfb7047e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98c26210e2a36a4b379e4a711d34dda92f076acf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c26210e2a36a4b379e4a711d34dda92f076acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c26210e2a36a4b379e4a711d34dda92f076acf"}], "stats": {"total": 275, "additions": 257, "deletions": 18}, "files": [{"sha": "d2ca7b0c5e4c4e5ff4d838054898647acb582486", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "patch": "@@ -1,3 +1,28 @@\n+2018-02-26  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/84530\n+\t* config/i386/i386-protos.h (ix86_output_indirect_jmp): Remove\n+\tthe bool argument.\n+\t(ix86_output_indirect_function_return): New prototype.\n+\t(ix86_split_simple_return_pop_internal): Likewise.\n+\t* config/i386/i386.c (indirect_return_via_cx): New.\n+\t(indirect_return_via_cx_bnd): Likewise.\n+\t(indirect_thunk_name): Handle return va CX_REG.\n+\t(output_indirect_thunk_function): Create alias for\n+\t__x86_return_thunk_[re]cx and __x86_return_thunk_[re]cx_bnd.\n+\t(ix86_output_indirect_jmp): Remove the bool argument.\n+\t(ix86_output_indirect_function_return): New function.\n+\t(ix86_split_simple_return_pop_internal): Likewise.\n+\t* config/i386/i386.md (*indirect_jump): Don't pass false\n+\tto ix86_output_indirect_jmp.\n+\t(*tablejump_1): Likewise.\n+\t(simple_return_pop_internal): Change it to define_insn_and_split.\n+\tCall ix86_split_simple_return_pop_internal to split it for\n+\t-mfunction-return=.\n+\t(simple_return_indirect_internal): Call\n+\tix86_output_indirect_function_return instead of\n+\tix86_output_indirect_jmp.\n+\n 2018-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/84405"}, {"sha": "79b96c0f80b5475533c71cf6efb44aa42b44bc6c", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "patch": "@@ -305,8 +305,10 @@ extern enum attr_cpu ix86_schedule;\n #endif\n \n extern const char * ix86_output_call_insn (rtx_insn *insn, rtx call_op);\n-extern const char * ix86_output_indirect_jmp (rtx call_op, bool ret_p);\n+extern const char * ix86_output_indirect_jmp (rtx call_op);\n extern const char * ix86_output_function_return (bool long_p);\n+extern const char * ix86_output_indirect_function_return (rtx ret_op);\n+extern void ix86_split_simple_return_pop_internal (rtx);\n extern bool ix86_operands_ok_for_move_multiple (rtx *operands, bool load,\n \t\t\t\t\t\tmachine_mode mode);\n extern int ix86_min_insn_size (rtx_insn *);"}, {"sha": "98075ad42c77e04c32a43c65cc716e58c1f9adbe", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 113, "deletions": 13, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "patch": "@@ -10812,6 +10812,12 @@ static int indirect_thunks_used;\n    by call and return thunks functions with the BND prefix.  */\n static int indirect_thunks_bnd_used;\n \n+/* True if return thunk function via CX is needed.  */\n+static bool indirect_return_via_cx;\n+/* True if return thunk function via CX with the BND prefix is\n+   needed.  */\n+static bool indirect_return_via_cx_bnd;\n+\n #ifndef INDIRECT_LABEL\n # define INDIRECT_LABEL \"LIND\"\n #endif\n@@ -10852,7 +10858,7 @@ indirect_thunk_name (char name[32], unsigned int regno,\n \t\t     enum indirect_thunk_prefix need_prefix,\n \t\t     bool ret_p)\n {\n-  if (regno != INVALID_REGNUM && ret_p)\n+  if (regno != INVALID_REGNUM && regno != CX_REG && ret_p)\n     gcc_unreachable ();\n \n   if (USE_HIDDEN_LINKONCE)\n@@ -10872,21 +10878,20 @@ indirect_thunk_name (char name[32], unsigned int regno,\n       else\n \tprefix = \"\";\n \n+      const char *ret = ret_p ? \"return\" : \"indirect\";\n+\n       if (regno != INVALID_REGNUM)\n \t{\n \t  const char *reg_prefix;\n \t  if (LEGACY_INT_REGNO_P (regno))\n \t    reg_prefix = TARGET_64BIT ? \"r\" : \"e\";\n \t  else\n \t    reg_prefix = \"\";\n-\t  sprintf (name, \"__x86_indirect_thunk%s_%s%s\",\n-\t\t   prefix, reg_prefix, reg_names[regno]);\n+\t  sprintf (name, \"__x86_%s_thunk%s_%s%s\",\n+\t\t   ret, prefix, reg_prefix, reg_names[regno]);\n \t}\n       else\n-\t{\n-\t  const char *ret = ret_p ? \"return\" : \"indirect\";\n-\t  sprintf (name, \"__x86_%s_thunk%s\", ret, prefix);\n-\t}\n+\tsprintf (name, \"__x86_%s_thunk%s\", ret, prefix);\n     }\n   else\n     {\n@@ -11055,9 +11060,23 @@ output_indirect_thunk_function (enum indirect_thunk_prefix need_prefix,\n \tASM_OUTPUT_LABEL (asm_out_file, name);\n       }\n \n+  /* Create alias for __x86_return_thunk/__x86_return_thunk_bnd or\n+     __x86_return_thunk_ecx/__x86_return_thunk_ecx_bnd.  */\n+  bool need_alias;\n   if (regno == INVALID_REGNUM)\n+    need_alias = true;\n+  else if (regno == CX_REG)\n+    {\n+      if (need_prefix == indirect_thunk_prefix_bnd)\n+\tneed_alias = indirect_return_via_cx_bnd;\n+      else\n+\tneed_alias = indirect_return_via_cx;\n+    }\n+  else\n+    need_alias = false;\n+\n+  if (need_alias)\n     {\n-      /* Create alias for __x86.return_thunk/__x86.return_thunk_bnd.  */\n       char alias[32];\n \n       indirect_thunk_name (alias, regno, need_prefix, true);\n@@ -28979,18 +28998,18 @@ ix86_output_indirect_branch (rtx call_op, const char *xasm,\n   else\n     ix86_output_indirect_branch_via_push (call_op, xasm, sibcall_p);\n }\n+\n /* Output indirect jump.  CALL_OP is the jump target.  Jump is a\n    function return if RET_P is true.  */\n \n const char *\n-ix86_output_indirect_jmp (rtx call_op, bool ret_p)\n+ix86_output_indirect_jmp (rtx call_op)\n {\n   if (cfun->machine->indirect_branch_type != indirect_branch_keep)\n     {\n-      /* We can't have red-zone if this isn't a function return since\n-\t \"call\" in the indirect thunk pushes the return address onto\n-\t stack, destroying red-zone.  */\n-      if (!ret_p && ix86_red_zone_size != 0)\n+      /* We can't have red-zone since \"call\" in the indirect thunk\n+         pushes the return address onto stack, destroying red-zone.  */\n+      if (ix86_red_zone_size != 0)\n \tgcc_unreachable ();\n \n       ix86_output_indirect_branch (call_op, \"%0\", true);\n@@ -29042,6 +29061,87 @@ ix86_output_function_return (bool long_p)\n   return \"rep%; ret\";\n }\n \n+/* Output indirect function return.  RET_OP is the function return\n+   target.  */\n+\n+const char *\n+ix86_output_indirect_function_return (rtx ret_op)\n+{\n+  if (cfun->machine->function_return_type != indirect_branch_keep)\n+    {\n+      char thunk_name[32];\n+      enum indirect_thunk_prefix need_prefix\n+\t= indirect_thunk_need_prefix (current_output_insn);\n+      unsigned int regno = REGNO (ret_op);\n+      gcc_assert (regno == CX_REG);\n+\n+      if (cfun->machine->function_return_type\n+\t  != indirect_branch_thunk_inline)\n+\t{\n+\t  bool need_thunk = (cfun->machine->function_return_type\n+\t\t\t     == indirect_branch_thunk);\n+\t  indirect_thunk_name (thunk_name, regno, need_prefix, true);\n+\t  if (need_prefix == indirect_thunk_prefix_bnd)\n+\t    {\n+\t      if (need_thunk)\n+\t\t{\n+\t\t  indirect_return_via_cx_bnd = true;\n+\t\t  indirect_thunks_bnd_used |= 1 << CX_REG;\n+\t\t}\n+\t      fprintf (asm_out_file, \"\\tbnd jmp\\t%s\\n\", thunk_name);\n+\t    }\n+\t  else\n+\t    {\n+\t      if (need_thunk)\n+\t\t{\n+\t\t  indirect_return_via_cx = true;\n+\t\t  indirect_thunks_used |= 1 << CX_REG;\n+\t\t}\n+\t      fprintf (asm_out_file, \"\\tjmp\\t%s\\n\", thunk_name);\n+\t    }\n+\t}\n+      else\n+\toutput_indirect_thunk (need_prefix, regno);\n+\n+      return \"\";\n+    }\n+  else\n+    return \"%!jmp\\t%A0\";\n+}\n+\n+/* Split simple return with popping POPC bytes from stack to indirect\n+   branch with stack adjustment .  */\n+\n+void\n+ix86_split_simple_return_pop_internal (rtx popc)\n+{\n+  struct machine_function *m = cfun->machine;\n+  rtx ecx = gen_rtx_REG (SImode, CX_REG);\n+  rtx_insn *insn;\n+\n+  /* There is no \"pascal\" calling convention in any 64bit ABI.  */\n+  gcc_assert (!TARGET_64BIT);\n+\n+  insn = emit_insn (gen_pop (ecx));\n+  m->fs.cfa_offset -= UNITS_PER_WORD;\n+  m->fs.sp_offset -= UNITS_PER_WORD;\n+\n+  rtx x = plus_constant (Pmode, stack_pointer_rtx, UNITS_PER_WORD);\n+  x = gen_rtx_SET (stack_pointer_rtx, x);\n+  add_reg_note (insn, REG_CFA_ADJUST_CFA, x);\n+  add_reg_note (insn, REG_CFA_REGISTER, gen_rtx_SET (ecx, pc_rtx));\n+  RTX_FRAME_RELATED_P (insn) = 1;\n+\n+  x = gen_rtx_PLUS (Pmode, stack_pointer_rtx, popc);\n+  x = gen_rtx_SET (stack_pointer_rtx, x);\n+  insn = emit_insn (x);\n+  add_reg_note (insn, REG_CFA_ADJUST_CFA, x);\n+  RTX_FRAME_RELATED_P (insn) = 1;\n+\n+  /* Now return address is in ECX.  */\n+  emit_jump_insn (gen_simple_return_indirect_internal (ecx));\n+}\n+\n /* Output the assembly for a call instruction.  */\n \n const char *"}, {"sha": "f271278ed581d1946c2a7d11f7a70d62961a9075", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "patch": "@@ -12319,7 +12319,7 @@\n (define_insn \"*indirect_jump\"\n   [(set (pc) (match_operand:W 0 \"indirect_branch_operand\" \"rBw\"))]\n   \"\"\n-  \"* return ix86_output_indirect_jmp (operands[0], false);\"\n+  \"* return ix86_output_indirect_jmp (operands[0]);\"\n   [(set (attr \"type\")\n      (if_then_else (match_test \"(cfun->machine->indirect_branch_type\n \t\t\t\t != indirect_branch_keep)\")\n@@ -12374,7 +12374,7 @@\n   [(set (pc) (match_operand:W 0 \"indirect_branch_operand\" \"rBw\"))\n    (use (label_ref (match_operand 1)))]\n   \"\"\n-  \"* return ix86_output_indirect_jmp (operands[0], false);\"\n+  \"* return ix86_output_indirect_jmp (operands[0]);\"\n   [(set (attr \"type\")\n      (if_then_else (match_test \"(cfun->machine->indirect_branch_type\n \t\t\t\t != indirect_branch_keep)\")\n@@ -13097,11 +13097,14 @@\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"modrm\" \"0\")])\n \n-(define_insn \"simple_return_pop_internal\"\n+(define_insn_and_split \"simple_return_pop_internal\"\n   [(simple_return)\n    (use (match_operand:SI 0 \"const_int_operand\"))]\n   \"reload_completed\"\n   \"%!ret\\t%0\"\n+  \"&& cfun->machine->function_return_type != indirect_branch_keep\"\n+  [(const_int 0)]\n+  \"ix86_split_simple_return_pop_internal (operands[0]); DONE;\"\n   [(set_attr \"length\" \"3\")\n    (set_attr \"atom_unit\" \"jeu\")\n    (set_attr \"length_immediate\" \"2\")\n@@ -13112,7 +13115,7 @@\n   [(simple_return)\n    (use (match_operand 0 \"register_operand\" \"r\"))]\n   \"reload_completed\"\n-  \"* return ix86_output_indirect_jmp (operands[0], true);\"\n+  \"* return ix86_output_indirect_function_return (operands[0]);\"\n   [(set (attr \"type\")\n      (if_then_else (match_test \"(cfun->machine->indirect_branch_type\n \t\t\t\t != indirect_branch_keep)\")"}, {"sha": "bccf1ba2d8f437c51a0e7a9b81c51b76f3b3b1d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "patch": "@@ -1,3 +1,12 @@\n+2018-02-26  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/84530\n+\t* gcc.target/i386/ret-thunk-22.c: New test.\n+\t* gcc.target/i386/ret-thunk-23.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-24.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-25.c: Likewise.\n+\t* gcc.target/i386/ret-thunk-26.c: Likewise.\n+\n 2018-02-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/84533"}, {"sha": "89e086de97b58c06a6a8a85089aa99383019a6ff", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-22.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-22.c?ref=b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/r84530 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mfunction-return=thunk\" } */\n+\n+struct s { _Complex unsigned short x; };\n+struct s gs = { 100 + 200i };\n+struct s __attribute__((noinline)) foo (void) { return gs; }\n+\n+/* { dg-final { scan-assembler-times \"popl\\[\\\\t \\]*%ecx\" 1 } } */\n+/* { dg-final { scan-assembler \"lea\\[l\\]?\\[\\\\t \\]*4\\\\(%esp\\\\), %esp\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_return_thunk_ecx\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "43f0ccaa8549b39bf8f2606c98fdb9801c8c6684", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-23.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-23.c?ref=b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/r84530 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mfunction-return=thunk-extern\" } */\n+\n+struct s { _Complex unsigned short x; };\n+struct s gs = { 100 + 200i };\n+struct s __attribute__((noinline)) foo (void) { return gs; }\n+\n+/* { dg-final { scan-assembler-times \"popl\\[\\\\t \\]*%ecx\" 1 } } */\n+/* { dg-final { scan-assembler \"lea\\[l\\]?\\[\\\\t \\]*4\\\\(%esp\\\\), %esp\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_return_thunk_ecx\" } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler-not {\\tpause} } } */\n+/* { dg-final { scan-assembler-not {\\tlfence} } } */"}, {"sha": "8729e35147e84eae7f2fda5611157600f0664af1", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-24.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-24.c?ref=b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/r84530 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mfunction-return=thunk-inline\" } */\n+\n+struct s { _Complex unsigned short x; };\n+struct s gs = { 100 + 200i };\n+struct s __attribute__((noinline)) foo (void) { return gs; }\n+\n+/* { dg-final { scan-assembler-times \"popl\\[\\\\t \\]*%ecx\" 1 } } */\n+/* { dg-final { scan-assembler \"lea\\[l\\]?\\[\\\\t \\]*4\\\\(%esp\\\\), %esp\" } } */\n+/* { dg-final { scan-assembler-not \"jmp\\[ \\t\\]*__x86_return_thunk_ecx\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "f73553c9a9f8087dcc27fff3d2c42006230f9cb6", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-25.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-25.c?ref=b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/r84530 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mfunction-return=thunk -fcheck-pointer-bounds -mmpx -fno-pic\" } */\n+\n+struct s { _Complex unsigned short x; };\n+struct s gs = { 100 + 200i };\n+struct s __attribute__((noinline)) foo (void) { return gs; }\n+\n+/* { dg-final { scan-assembler-times \"popl\\[\\\\t \\]*%ecx\" 1 } } */\n+/* { dg-final { scan-assembler \"lea\\[l\\]?\\[\\\\t \\]*4\\\\(%esp\\\\), %esp\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*__x86_return_thunk_bnd_ecx\" } } */\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*\\.LIND\" } } */\n+/* { dg-final { scan-assembler {\\tpause} } } */\n+/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "9144e9887351a140fc69ea7a7c0961f0e3e16118", "filename": "gcc/testsuite/gcc.target/i386/ret-thunk-26.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fret-thunk-26.c?ref=b9d676b3c0f53504d48bc3f0fe3fec6dbddaed6e", "patch": "@@ -0,0 +1,40 @@\n+/* PR target/r84530 */\n+/* { dg-do run } */\n+/* { dg-options \"-Os -mfunction-return=thunk\" } */\n+\n+struct S { int i; };\n+__attribute__((const, noinline, noclone))\n+struct S foo (int x)\n+{\n+  struct S s;\n+  s.i = x;\n+  return s;\n+}\n+\n+int a[2048], b[2048], c[2048], d[2048];\n+struct S e[2048];\n+\n+__attribute__((noinline, noclone)) void\n+bar (void)\n+{\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    {\n+      e[i] = foo (i);\n+      a[i+2] = a[i] + a[i+1];\n+      b[10] = b[10] + i;\n+      c[i] = c[2047 - i];\n+      d[i] = d[i + 1];\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  bar ();\n+  for (i = 0; i < 1024; i++)\n+    if (e[i].i != i)\n+      __builtin_abort ();\n+  return 0;\n+}"}]}