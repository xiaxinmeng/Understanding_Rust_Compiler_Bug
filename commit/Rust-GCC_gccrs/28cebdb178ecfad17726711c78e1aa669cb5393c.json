{"sha": "28cebdb178ecfad17726711c78e1aa669cb5393c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhjZWJkYjE3OGVjZmFkMTc3MjY3MTFjNzhlMWFhNjY5Y2I1MzkzYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-20T21:13:05Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-20T21:13:05Z"}, "message": "Restrict bb-slp-40.c to targets with VnQI addition (PR 92366)\n\nbb-slp-40.c fails on SPARC targets without VIS4 because it\nrequires addition on vectors of bytes.  There doesn't seem to be\nan existing target selector for this, so I added vect_char_add.\n(Wasn't sure whether to use vect_char_add, for consistency\nwith vect_no_int_add/vect_int_mult etc., or vect_add_char for\nconsistency with vect_shift_char etc.)\n\nI took the target list from vect_int and removed targets that didn't\nseem to support the operation (namely sparc*, since we don't seem to\nhave any test for VIS4, niagara7 or m8, and alpha*-*-*.)\n\n2019-11-20  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR testsuite/92366\n\t* doc/sourcebuild.texi (vect_char_add): Document.\n\ngcc/testsuite/\n\tPR testsuite/92366\n\t* lib/target-supports.exp (check_effective_target_vect_char_add):\n\tNew proc.\n\t* gcc.dg/vect/bb-slp-40.c: Require vect_char_add instead of vect_int.\n\nFrom-SVN: r278532", "tree": {"sha": "ae9c21d88ff45a09115fc3160e17979594875b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae9c21d88ff45a09115fc3160e17979594875b7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28cebdb178ecfad17726711c78e1aa669cb5393c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28cebdb178ecfad17726711c78e1aa669cb5393c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28cebdb178ecfad17726711c78e1aa669cb5393c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28cebdb178ecfad17726711c78e1aa669cb5393c/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be12e7c72676a25cf1cd2fef513066283887760a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be12e7c72676a25cf1cd2fef513066283887760a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be12e7c72676a25cf1cd2fef513066283887760a"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "3ddaa8a059dffe282a6145e0e314df60acf6c843", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cebdb178ecfad17726711c78e1aa669cb5393c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cebdb178ecfad17726711c78e1aa669cb5393c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28cebdb178ecfad17726711c78e1aa669cb5393c", "patch": "@@ -1,3 +1,8 @@\n+2019-11-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR testsuite/92366\n+\t* doc/sourcebuild.texi (vect_char_add): Document.\n+\n 2019-11-20  Alexandre Oliva <oliva@adacore.com>\n \n \t* function.h (CALLEE_FROM_CGRAPH_P): Remove."}, {"sha": "a30db0de88f991606071c67ed6c37691cac8dde4", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cebdb178ecfad17726711c78e1aa669cb5393c/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cebdb178ecfad17726711c78e1aa669cb5393c/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=28cebdb178ecfad17726711c78e1aa669cb5393c", "patch": "@@ -1522,6 +1522,10 @@ Target does not support a vector add instruction on @code{int}.\n @item vect_no_bitwise\n Target does not support vector bitwise instructions.\n \n+@item vect_char_add\n+Target supports addition of @code{char} vectors for at least one\n+vector length.\n+\n @item vect_char_mult\n Target supports @code{vector char} multiplication.\n "}, {"sha": "99949be253c99dad22726812d0e7e34ce642e76d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cebdb178ecfad17726711c78e1aa669cb5393c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cebdb178ecfad17726711c78e1aa669cb5393c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28cebdb178ecfad17726711c78e1aa669cb5393c", "patch": "@@ -1,3 +1,10 @@\n+2019-11-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR testsuite/92366\n+\t* lib/target-supports.exp (check_effective_target_vect_char_add):\n+\tNew proc.\n+\t* gcc.dg/vect/bb-slp-40.c: Require vect_char_add instead of vect_int.\n+\n 2019-11-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR testsuite/92527"}, {"sha": "66fb4e07f80b9511091c94c9a20281f544210493", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-40.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cebdb178ecfad17726711c78e1aa669cb5393c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cebdb178ecfad17726711c78e1aa669cb5393c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-40.c?ref=28cebdb178ecfad17726711c78e1aa669cb5393c", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-additional-options \"-fvect-cost-model=dynamic\" } */\n-/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_char_add } */\n \n char g_d[1024], g_s1[1024], g_s2[1024];\n void foo(void)"}, {"sha": "5fe1e83492cae97adf82ed53e12d8f5f7ea5a951", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cebdb178ecfad17726711c78e1aa669cb5393c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cebdb178ecfad17726711c78e1aa669cb5393c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=28cebdb178ecfad17726711c78e1aa669cb5393c", "patch": "@@ -5749,6 +5749,27 @@ proc check_effective_target_vect_bswap { } {\n \t     || [istarget amdgcn-*-*] }}]\n }\n \n+# Return 1 if the target supports addition of char vectors for at least\n+# one vector length.\n+\n+proc check_effective_target_vect_char_add { } {\n+    return [check_cached_effective_target_indexed vect_int {\n+      expr {\n+         [istarget i?86-*-*] || [istarget x86_64-*-*]\n+         || ([istarget powerpc*-*-*]\n+\t     && ![istarget powerpc-*-linux*paired*])\n+\t || [istarget amdgcn-*-*]\n+\t || [istarget ia64-*-*]\n+\t || [istarget aarch64*-*-*]\n+\t || [is-effective-target arm_neon]\n+\t || ([istarget mips*-*-*]\n+\t     && ([et-is-effective-target mips_loongson_mmi]\n+\t     || [et-is-effective-target mips_msa]))\n+\t || ([istarget s390*-*-*]\n+\t     && [check_effective_target_s390_vx])\n+\t}}]\n+}\n+\n # Return 1 if the target supports hardware vector shift operation for char.\n \n proc check_effective_target_vect_shift_char { } {"}]}