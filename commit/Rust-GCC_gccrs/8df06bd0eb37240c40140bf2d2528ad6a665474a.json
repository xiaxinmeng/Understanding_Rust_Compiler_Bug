{"sha": "8df06bd0eb37240c40140bf2d2528ad6a665474a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRmMDZiZDBlYjM3MjQwYzQwMTQwYmYyZDI1MjhhZDZhNjY1NDc0YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-08-12T07:38:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-08-12T07:38:24Z"}, "message": "passes.c (execute_todo): Do not push/pop TV_TODO.\n\n2016-08-12  Richard Biener  <rguenther@suse.de>\n\n\t* passes.c (execute_todo): Do not push/pop TV_TODO.\n\t(execute_one_ipa_transform_pass): Move timevar push/pop TODO execution.\n\t(execute_one_pass): Likewise.\n\t* common.opt (ftime-report-details): New switch.\n\t* doc/invoke.texi (ftime-report-details): Document.\n\t* timevar.h (timer::print_row): Adjust signature.\n\t(timer::all_zero): New static helper.\n\t(timer::child_map_t): New typedef.\n\t(timer::time_var_def): Add children field.\n\t* timevar.c (timer::named_items::print): Adjust.\n\t(timer::~timer): Free timevar recorded children.\n\t(timer::pop_internal): When -ftime-report-details record\n\ttime spent in sub-timevars.\n\t(timer::print_row): Adjust.\n\t(timer::print): Print sub-timevar stats, use all_zero.\n\t* timevar.def (TV_TODO): Remove.\n\nFrom-SVN: r239406", "tree": {"sha": "ec56bb1a6459b7d3c0776301373c8e2067935fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec56bb1a6459b7d3c0776301373c8e2067935fae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8df06bd0eb37240c40140bf2d2528ad6a665474a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df06bd0eb37240c40140bf2d2528ad6a665474a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df06bd0eb37240c40140bf2d2528ad6a665474a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df06bd0eb37240c40140bf2d2528ad6a665474a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "663eecfd13dbedddf6fccc1a857dd1728078040b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663eecfd13dbedddf6fccc1a857dd1728078040b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/663eecfd13dbedddf6fccc1a857dd1728078040b"}], "stats": {"total": 165, "additions": 123, "deletions": 42}, "files": [{"sha": "8257b0e0a4358bea6bb0eb199e05d29cce9c9f41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df06bd0eb37240c40140bf2d2528ad6a665474a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df06bd0eb37240c40140bf2d2528ad6a665474a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8df06bd0eb37240c40140bf2d2528ad6a665474a", "patch": "@@ -1,3 +1,22 @@\n+2016-08-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* passes.c (execute_todo): Do not push/pop TV_TODO.\n+\t(execute_one_ipa_transform_pass): Move timevar push/pop TODO execution.\n+\t(execute_one_pass): Likewise.\n+\t* common.opt (ftime-report-details): New switch.\n+\t* doc/invoke.texi (ftime-report-details): Document.\n+\t* timevar.h (timer::print_row): Adjust signature.\n+\t(timer::all_zero): New static helper.\n+\t(timer::child_map_t): New typedef.\n+\t(timer::time_var_def): Add children field.\n+\t* timevar.c (timer::named_items::print): Adjust.\n+\t(timer::~timer): Free timevar recorded children.\n+\t(timer::pop_internal): When -ftime-report-details record\n+\ttime spent in sub-timevars.\n+\t(timer::print_row): Adjust.\n+\t(timer::print): Print sub-timevar stats, use all_zero.\n+\t* timevar.def (TV_TODO): Remove.\n+\n 2016-08-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/72851"}, {"sha": "65a976213df3c555f2b2e0d5f01ea70c1762fe90", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df06bd0eb37240c40140bf2d2528ad6a665474a/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df06bd0eb37240c40140bf2d2528ad6a665474a/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=8df06bd0eb37240c40140bf2d2528ad6a665474a", "patch": "@@ -2296,6 +2296,10 @@ ftime-report\n Common Report Var(time_report)\n Report the time taken by each compiler pass.\n \n+ftime-report-details\n+Common Report Var(time_report_details)\n+Record times taken by sub-phases separately.\n+\n ftls-model=\n Common Joined RejectNegative Enum(tls_model) Var(flag_tls_default) Init(TLS_MODEL_GLOBAL_DYNAMIC)\n -ftls-model=[global-dynamic|local-dynamic|initial-exec|local-exec]\tSet the default thread-local storage code generation model."}, {"sha": "d04be6fd4c86cd8299ac5b7c29d0a3c075295406", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df06bd0eb37240c40140bf2d2528ad6a665474a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df06bd0eb37240c40140bf2d2528ad6a665474a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8df06bd0eb37240c40140bf2d2528ad6a665474a", "patch": "@@ -554,7 +554,7 @@ Objective-C and Objective-C++ Dialects}.\n -fprofile-report @gol\n -frandom-seed=@var{string} -fsched-verbose=@var{n} @gol\n -fsel-sched-verbose -fsel-sched-dump-cfg -fsel-sched-pipelining-verbose @gol\n--fstats  -fstack-usage  -ftime-report @gol\n+-fstats  -fstack-usage  -ftime-report -ftime-report-details @gol\n -fvar-tracking-assignments-toggle -gtoggle @gol\n -print-file-name=@var{library}  -print-libgcc-file-name @gol\n -print-multi-directory  -print-multi-lib  -print-multi-os-directory @gol\n@@ -12742,6 +12742,10 @@ print some statistics about each pass when it finishes.\n Makes the compiler print some statistics about the time consumed by each\n pass when it finishes.\n \n+@item -ftime-report-details\n+@opindex ftime-report-details\n+Record the time consumed by infrastructure parts separately for each pass.\n+\n @item -fira-verbose=@var{n}\n @opindex fira-verbose\n Control the verbosity of the dump file for the integrated register allocator."}, {"sha": "c7d7dbe7e9115806083f6954ce40d4a5b742c10d", "filename": "gcc/passes.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df06bd0eb37240c40140bf2d2528ad6a665474a/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df06bd0eb37240c40140bf2d2528ad6a665474a/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=8df06bd0eb37240c40140bf2d2528ad6a665474a", "patch": "@@ -2008,8 +2008,6 @@ execute_todo (unsigned int flags)\n       && need_ssa_update_p (cfun))\n     gcc_assert (flags & TODO_update_ssa_any);\n \n-  timevar_push (TV_TODO);\n-\n   statistics_fini_pass ();\n \n   if (flags)\n@@ -2043,8 +2041,6 @@ execute_todo (unsigned int flags)\n      df problems.  */\n   if (flags & TODO_df_finish)\n     df_finish_pass ((flags & TODO_df_verify) != 0);\n-\n-  timevar_pop (TV_TODO);\n }\n \n /* Verify invariants that should hold between passes.  This is a place\n@@ -2198,20 +2194,16 @@ execute_one_ipa_transform_pass (struct cgraph_node *node,\n \n   pass_init_dump_file (pass);\n \n-  /* Run pre-pass verification.  */\n-  execute_todo (ipa_pass->function_transform_todo_flags_start);\n-\n   /* If a timevar is present, start it.  */\n   if (pass->tv_id != TV_NONE)\n     timevar_push (pass->tv_id);\n \n+  /* Run pre-pass verification.  */\n+  execute_todo (ipa_pass->function_transform_todo_flags_start);\n+\n   /* Do it!  */\n   todo_after = ipa_pass->function_transform (node);\n \n-  /* Stop timevar.  */\n-  if (pass->tv_id != TV_NONE)\n-    timevar_pop (pass->tv_id);\n-\n   if (profile_report && cfun && (cfun->curr_properties & PROP_cfg))\n     check_profile_consistency (pass->static_pass_number, 0, true);\n \n@@ -2221,6 +2213,10 @@ execute_one_ipa_transform_pass (struct cgraph_node *node,\n   if (profile_report && cfun && (cfun->curr_properties & PROP_cfg))\n     check_profile_consistency (pass->static_pass_number, 1, true);\n \n+  /* Stop timevar.  */\n+  if (pass->tv_id != TV_NONE)\n+    timevar_pop (pass->tv_id);\n+\n   if (dump_file)\n     do_per_function (execute_function_dump, pass);\n   pass_fini_dump_file (pass);\n@@ -2329,22 +2325,26 @@ execute_one_pass (opt_pass *pass)\n \n   pass_init_dump_file (pass);\n \n+  /* If a timevar is present, start it.  */\n+  if (pass->tv_id != TV_NONE)\n+    timevar_push (pass->tv_id);\n+\n   /* Run pre-pass verification.  */\n   execute_todo (pass->todo_flags_start);\n \n   if (flag_checking)\n     do_per_function (verify_curr_properties,\n \t\t     (void *)(size_t)pass->properties_required);\n \n-  /* If a timevar is present, start it.  */\n-  if (pass->tv_id != TV_NONE)\n-    timevar_push (pass->tv_id);\n-\n   /* Do it!  */\n   todo_after = pass->execute (cfun);\n \n   if (todo_after & TODO_discard_function)\n     {\n+      /* Stop timevar.  */\n+      if (pass->tv_id != TV_NONE)\n+\ttimevar_pop (pass->tv_id);\n+\n       pass_fini_dump_file (pass);\n \n       gcc_assert (cfun);\n@@ -2371,10 +2371,6 @@ execute_one_pass (opt_pass *pass)\n \n   do_per_function (clear_last_verified, NULL);\n \n-  /* Stop timevar.  */\n-  if (pass->tv_id != TV_NONE)\n-    timevar_pop (pass->tv_id);\n-\n   do_per_function (update_properties_after_pass, pass);\n \n   if (profile_report && cfun && (cfun->curr_properties & PROP_cfg))\n@@ -2386,6 +2382,11 @@ execute_one_pass (opt_pass *pass)\n     check_profile_consistency (pass->static_pass_number, 1, true);\n \n   verify_interpass_invariants ();\n+\n+  /* Stop timevar.  */\n+  if (pass->tv_id != TV_NONE)\n+    timevar_pop (pass->tv_id);\n+\n   if (pass->type == IPA_PASS\n       && ((ipa_opt_pass_d *)pass)->function_transform)\n     {"}, {"sha": "4c8ceaccc63e9936beb7ef0f2d581d0b7debbc17", "filename": "gcc/timevar.c", "status": "modified", "additions": 70, "deletions": 21, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df06bd0eb37240c40140bf2d2528ad6a665474a/gcc%2Ftimevar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df06bd0eb37240c40140bf2d2528ad6a665474a/gcc%2Ftimevar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.c?ref=8df06bd0eb37240c40140bf2d2528ad6a665474a", "patch": "@@ -205,7 +205,7 @@ timer::named_items::print (FILE *fp, const timevar_time_def *total)\n     {\n       timer::timevar_def *def = m_hash_map.get (item_name);\n       gcc_assert (def);\n-      m_timer->print_row (fp, total, def);\n+      m_timer->print_row (fp, total, def->name, def->elapsed);\n     }\n }\n \n@@ -296,6 +296,8 @@ timer::~timer ()\n       next = iter->next;\n       free (iter);\n     }\n+  for (unsigned i = 0; i < TIMEVAR_LAST; ++i)\n+    delete m_timevars[i].children;\n \n   delete m_jit_client_items;\n }\n@@ -399,13 +401,26 @@ timer::pop_internal ()\n   /* Attribute the elapsed time to the element we're popping.  */\n   timevar_accumulate (&popped->timevar->elapsed, &m_start_time, &now);\n \n+  /* Take the item off the stack.  */\n+  m_stack = m_stack->next;\n+\n+  /* Record the elapsed sub-time to the parent as well.  */\n+  if (m_stack && time_report_details)\n+    {\n+      if (! m_stack->timevar->children)\n+\tm_stack->timevar->children = new child_map_t (5);\n+      bool existed_p;\n+      timevar_time_def &time\n+\t= m_stack->timevar->children->get_or_insert (popped->timevar, &existed_p);\n+      if (! existed_p)\n+\tmemset (&time, 0, sizeof (timevar_time_def));\n+      timevar_accumulate (&time, &m_start_time, &now);\n+    }\n+\n   /* Reset the start time; from now on, time is attributed to the\n      element just exposed on the stack.  */\n   m_start_time = now;\n \n-  /* Take the item off the stack.  */\n-  m_stack = m_stack->next;\n-\n   /* Don't delete the stack element; instead, add it to the list of\n      unused elements for later use.  */\n   popped->next = m_unused_stack_instances;\n@@ -619,42 +634,54 @@ timer::validate_phases (FILE *fp) const\n void\n timer::print_row (FILE *fp,\n \t\t  const timevar_time_def *total,\n-\t\t  const timevar_def *tv)\n+\t\t  const char *name, const timevar_time_def &elapsed)\n {\n   /* The timing variable name.  */\n-  fprintf (fp, \" %-24s:\", tv->name);\n+  fprintf (fp, \" %-24s:\", name);\n \n #ifdef HAVE_USER_TIME\n   /* Print user-mode time for this process.  */\n   fprintf (fp, \"%7.2f (%2.0f%%) usr\",\n-\t   tv->elapsed.user,\n-\t   (total->user == 0 ? 0 : tv->elapsed.user / total->user) * 100);\n+\t   elapsed.user,\n+\t   (total->user == 0 ? 0 : elapsed.user / total->user) * 100);\n #endif /* HAVE_USER_TIME */\n \n #ifdef HAVE_SYS_TIME\n   /* Print system-mode time for this process.  */\n   fprintf (fp, \"%7.2f (%2.0f%%) sys\",\n-\t   tv->elapsed.sys,\n-\t   (total->sys == 0 ? 0 : tv->elapsed.sys / total->sys) * 100);\n+\t   elapsed.sys,\n+\t   (total->sys == 0 ? 0 : elapsed.sys / total->sys) * 100);\n #endif /* HAVE_SYS_TIME */\n \n #ifdef HAVE_WALL_TIME\n   /* Print wall clock time elapsed.  */\n   fprintf (fp, \"%7.2f (%2.0f%%) wall\",\n-\t   tv->elapsed.wall,\n-\t   (total->wall == 0 ? 0 : tv->elapsed.wall / total->wall) * 100);\n+\t   elapsed.wall,\n+\t   (total->wall == 0 ? 0 : elapsed.wall / total->wall) * 100);\n #endif /* HAVE_WALL_TIME */\n \n   /* Print the amount of ggc memory allocated.  */\n   fprintf (fp, \"%8u kB (%2.0f%%) ggc\",\n-\t   (unsigned) (tv->elapsed.ggc_mem >> 10),\n+\t   (unsigned) (elapsed.ggc_mem >> 10),\n \t   (total->ggc_mem == 0\n \t    ? 0\n-\t    : (float) tv->elapsed.ggc_mem / total->ggc_mem) * 100);\n+\t    : (float) elapsed.ggc_mem / total->ggc_mem) * 100);\n \n   putc ('\\n', fp);\n }\n \n+/* Return whether ELAPSED is all zero.  */\n+\n+bool\n+timer::all_zero (const timevar_time_def &elapsed)\n+{\n+  const double tiny = 5e-3;\n+  return (elapsed.user < tiny\n+\t  && elapsed.sys < tiny\n+\t  && elapsed.wall < tiny\n+\t  && elapsed.ggc_mem < GGC_MEM_BOUND);\n+}\n+\n /* Summarize timing variables to FP.  The timing variable TV_TOTAL has\n    a special meaning -- it's considered to be the total elapsed time,\n    for normalizing the others, and is displayed last.  */\n@@ -691,7 +718,6 @@ timer::print (FILE *fp)\n   for (id = 0; id < (unsigned int) TIMEVAR_LAST; ++id)\n     {\n       const timevar_def *tv = &m_timevars[(timevar_id_t) id];\n-      const double tiny = 5e-3;\n \n       /* Don't print the total execution time here; that goes at the\n \t end.  */\n@@ -702,15 +728,38 @@ timer::print (FILE *fp)\n       if (!tv->used)\n \tcontinue;\n \n+      bool any_children_with_time = false;\n+      if (tv->children)\n+\tfor (child_map_t::iterator i = tv->children->begin ();\n+\t     i != tv->children->end (); ++i)\n+\t  if (! all_zero ((*i).second))\n+\t    {\n+\t      any_children_with_time = true;\n+\t      break;\n+\t    }\n+\n       /* Don't print timing variables if we're going to get a row of\n-         zeroes.  */\n-      if (tv->elapsed.user < tiny\n-\t  && tv->elapsed.sys < tiny\n-\t  && tv->elapsed.wall < tiny\n-\t  && tv->elapsed.ggc_mem < GGC_MEM_BOUND)\n+         zeroes.  Unless there are children with non-zero time.  */\n+      if (! any_children_with_time\n+\t  && all_zero (tv->elapsed))\n \tcontinue;\n \n-      print_row (fp, total, tv);\n+      print_row (fp, total, tv->name, tv->elapsed);\n+\n+      if (tv->children)\n+\tfor (child_map_t::iterator i = tv->children->begin ();\n+\t     i != tv->children->end (); ++i)\n+\t  {\n+\t    timevar_def *tv2 = (*i).first;\n+\t    /* Don't print timing variables if we're going to get a row of\n+\t       zeroes.  */\n+\t    if (! all_zero ((*i).second))\n+\t      {\n+\t\tchar lname[256];\n+\t\tsnprintf (lname, 256, \"`- %s\", tv2->name);\n+\t\tprint_row (fp, total, lname, (*i).second);\n+\t      }\n+\t  }\n     }\n   if (m_jit_client_items)\n     m_jit_client_items->print (fp, total);"}, {"sha": "8ba7e5c057b91c7fccd469696e10268b79254501", "filename": "gcc/timevar.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df06bd0eb37240c40140bf2d2528ad6a665474a/gcc%2Ftimevar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df06bd0eb37240c40140bf2d2528ad6a665474a/gcc%2Ftimevar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.h?ref=8df06bd0eb37240c40140bf2d2528ad6a665474a", "patch": "@@ -131,9 +131,11 @@ class timer\n   void pop_internal ();\n   static void print_row (FILE *fp,\n \t\t\t const timevar_time_def *total,\n-\t\t\t const timevar_def *tv);\n+\t\t\t const char *name, const timevar_time_def &elapsed);\n+  static bool all_zero (const timevar_time_def &elapsed);\n \n  private:\n+  typedef hash_map<timevar_def *, timevar_time_def> child_map_t;\n \n   /* Private type: a timing variable.  */\n   struct timevar_def\n@@ -155,6 +157,8 @@ class timer\n     /* Nonzero if this timing variable was ever started or pushed onto\n        the timing stack.  */\n     unsigned used : 1;\n+\n+    child_map_t *children;\n   };\n \n   /* Private type: an element on the timing stack"}]}