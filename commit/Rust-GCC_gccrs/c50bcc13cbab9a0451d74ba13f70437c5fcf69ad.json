{"sha": "c50bcc13cbab9a0451d74ba13f70437c5fcf69ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUwYmNjMTNjYmFiOWEwNDUxZDc0YmExM2Y3MDQzN2M1ZmNmNjlhZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-11-07T12:32:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-11-07T12:32:18Z"}, "message": "mips.c: Revert previous patch.\n\ngcc/\n\t* config/mips/mips.c: Revert previous patch.\n\t* config/mips/mips.md: Likewise.\n\ngcc/testsuite/\n\t* gcc.target/mips/mips.exp: Revert previous patch.\n\t* gcc.target/mips/fma-1.c: Delete.\n\t* gcc.target/mips/fma-2.c: Likewise.\n\t* gcc.target/mips/fma-3.c: Likewise.\n\t* gcc.target/mips/fma-4.c: Likewise.\n\t* gcc.target/mips/fma-5.c: Likewise.\n\t* gcc.target/mips/fma-6.c: Likewise.\n\t* gcc.target/mips/fma-7.c: Likewise.\n\t* gcc.target/mips/fma-8.c: Likewise.\n\t* gcc.target/mips/fma-9.c: Likewise.\n\t* gcc.target/mips/fma-10.c: Likewise.\n\t* gcc.target/mips/fma-11.c: Likewise.\n\t* gcc.target/mips/fma-12.c: Likewise.\n\t* gcc.target/mips/fma-13.c: Likewise.\n\t* gcc.target/mips/fma-14.c: Likewise.\n\t* gcc.target/mips/fma-15.c: Likewise.\n\t* gcc.target/mips/fma-16.c: Likewise.\n\t* gcc.target/mips/fma-17.c: Likewise.\n\t* gcc.target/mips/fma-18.c: Likewise.\n\t* gcc.target/mips/fma-19.c: Likewise.\n\t* gcc.target/mips/fma-20.c: Likewise.\n\nFrom-SVN: r166415", "tree": {"sha": "f5d4551b5b8d9b5b95c55991a9e867a80a8ff852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5d4551b5b8d9b5b95c55991a9e867a80a8ff852"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7c0f73d6801b4e839775ec2a09c1acf6378dbda"}], "stats": {"total": 1387, "additions": 119, "deletions": 1268}, "files": [{"sha": "b57589e816dc94afafdee1cbe5f3088066d32640", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c50bcc13cbab9a0451d74ba13f70437c5fcf69ad", "patch": "@@ -1,3 +1,8 @@\n+2010-11-07  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.c: Revert previous patch.\n+\t* config/mips/mips.md: Likewise.\n+\n 2010-11-07  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.c (mips_rtx_costs): Handle FMA."}, {"sha": "76c0786713ecd82ad6ddb8cf04a587ce76649ec3", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c50bcc13cbab9a0451d74ba13f70437c5fcf69ad", "patch": "@@ -3827,10 +3827,6 @@ mips_rtx_costs (rtx x, int code, int outer_code, int *total, bool speed)\n \t*total = mips_cost->int_mult_si;\n       return false;\n \n-    case FMA:\n-      *total = mips_fp_mult_cost (mode);\n-      return false;\n-\n     case DIV:\n       /* Check for a reciprocal.  */\n       if (float_mode_p"}, {"sha": "b7893941408b66106e404a9eda98c758b5084e38", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 90, "deletions": 108, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=c50bcc13cbab9a0451d74ba13f70437c5fcf69ad", "patch": "@@ -2077,176 +2077,158 @@\n \n ;; Floating point multiply accumulate instructions.\n \n-(define_expand \"fma<mode>4\"\n-  [(set (match_operand:ANYF 0 \"register_operand\")\n-\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\")\n-\t\t  (match_operand:ANYF 2 \"register_operand\")\n-\t\t  (match_operand:ANYF 3 \"register_operand\")))]\n-  \"ISA_HAS_FP_MADD3_MSUB3 || ISA_HAS_FP_MADD4_MSUB4\")\n+(define_insn \"*madd4<mode>\"\n+  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n+\t(plus:ANYF (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\"))\n+\t\t   (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n+  \"ISA_HAS_FP_MADD4_MSUB4 && TARGET_FUSED_MADD\"\n+  \"madd.<fmt>\\t%0,%3,%1,%2\"\n+  [(set_attr \"type\" \"fmadd\")\n+   (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*fma<mode>4_madd3\"\n+(define_insn \"*madd3<mode>\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t  (match_operand:ANYF 3 \"register_operand\" \"0\")))]\n-  \"ISA_HAS_FP_MADD3_MSUB3\"\n+\t(plus:ANYF (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\"))\n+\t\t   (match_operand:ANYF 3 \"register_operand\" \"0\")))]\n+  \"ISA_HAS_FP_MADD3_MSUB3 && TARGET_FUSED_MADD\"\n   \"madd.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*fma<mode>4_madd4\"\n+(define_insn \"*msub4<mode>\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t  (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n-  \"ISA_HAS_FP_MADD4_MSUB4\"\n-  \"madd.<fmt>\\t%0,%3,%1,%2\"\n+\t(minus:ANYF (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t\t       (match_operand:ANYF 2 \"register_operand\" \"f\"))\n+\t\t    (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n+  \"ISA_HAS_FP_MADD4_MSUB4 && TARGET_FUSED_MADD\"\n+  \"msub.<fmt>\\t%0,%3,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_expand \"fms<mode>4\"\n-  [(set (match_operand:ANYF 0 \"register_operand\")\n-\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\")\n-\t\t  (match_operand:ANYF 2 \"register_operand\")\n-\t\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\"))))]\n-  \"ISA_HAS_FP_MADD3_MSUB3 || ISA_HAS_FP_MADD4_MSUB4\")\n-\n-(define_insn \"*fms<mode>4_msub3\"\n+(define_insn \"*msub3<mode>\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"0\"))))]\n-  \"ISA_HAS_FP_MADD3_MSUB3\"\n+\t(minus:ANYF (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t\t       (match_operand:ANYF 2 \"register_operand\" \"f\"))\n+\t\t    (match_operand:ANYF 3 \"register_operand\" \"0\")))]\n+  \"ISA_HAS_FP_MADD3_MSUB3 && TARGET_FUSED_MADD\"\n   \"msub.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*fms<mode>4_msub4\"\n+(define_insn \"*nmadd4<mode>\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n-  \"ISA_HAS_FP_MADD4_MSUB4\"\n-  \"msub.<fmt>\\t%0,%3,%1,%2\"\n+\t(neg:ANYF (plus:ANYF\n+\t\t   (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\"))\n+\t\t   (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n+  \"ISA_HAS_NMADD4_NMSUB4 (<MODE>mode)\n+   && TARGET_FUSED_MADD\n+   && HONOR_SIGNED_ZEROS (<MODE>mode)\n+   && !HONOR_NANS (<MODE>mode)\"\n+  \"nmadd.<fmt>\\t%0,%3,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-;; If we're ignoring signed zeros, we can use NMADD (-(a * b + c)) to\n-;; implement fnms (-a * b - c, which is unconditionally equivalent to\n-;; -(a * b) - c).\n-(define_expand \"fnms<mode>4\"\n-  [(set (match_operand:ANYF 0 \"register_operand\")\n-\t(fma:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\"))\n-\t\t  (match_operand:ANYF 2 \"register_operand\")\n-\t\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\"))))]\n-  \"(ISA_HAS_NMADD3_NMSUB3 (<MODE>mode) || ISA_HAS_NMADD4_NMSUB4 (<MODE>mode))\n-   && !HONOR_SIGNED_ZEROS (<MODE>mode)\n-   && !HONOR_NANS (<MODE>mode)\")\n-\n-(define_insn \"*fnms<mode>4_nmadd3\"\n+(define_insn \"*nmadd3<mode>\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(fma:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n-\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"0\"))))]\n+\t(neg:ANYF (plus:ANYF\n+\t\t   (mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\"))\n+\t\t   (match_operand:ANYF 3 \"register_operand\" \"0\"))))]\n   \"ISA_HAS_NMADD3_NMSUB3 (<MODE>mode)\n-   && !HONOR_SIGNED_ZEROS (<MODE>mode)\n+   && TARGET_FUSED_MADD\n+   && HONOR_SIGNED_ZEROS (<MODE>mode)\n    && !HONOR_NANS (<MODE>mode)\"\n   \"nmadd.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*fnms<mode>4_nmadd4\"\n+(define_insn \"*nmadd4<mode>_fastmath\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(fma:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n-\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n+\t(minus:ANYF\n+\t (mult:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n+\t\t    (match_operand:ANYF 2 \"register_operand\" \"f\"))\n+\t (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n   \"ISA_HAS_NMADD4_NMSUB4 (<MODE>mode)\n+   && TARGET_FUSED_MADD\n    && !HONOR_SIGNED_ZEROS (<MODE>mode)\n    && !HONOR_NANS (<MODE>mode)\"\n   \"nmadd.<fmt>\\t%0,%3,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*nmadd3\"\n+(define_insn \"*nmadd3<mode>_fastmath\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-  \t(neg:ANYF\n-\t (fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t   (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t   (match_operand:ANYF 3 \"register_operand\" \"0\"))))]\n-  \"ISA_HAS_NMADD3_NMSUB3 (<MODE>mode) && !HONOR_NANS (<MODE>mode)\"\n+\t(minus:ANYF\n+\t (mult:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n+\t\t    (match_operand:ANYF 2 \"register_operand\" \"f\"))\n+\t (match_operand:ANYF 3 \"register_operand\" \"0\")))]\n+  \"ISA_HAS_NMADD3_NMSUB3 (<MODE>mode)\n+   && TARGET_FUSED_MADD\n+   && !HONOR_SIGNED_ZEROS (<MODE>mode)\n+   && !HONOR_NANS (<MODE>mode)\"\n   \"nmadd.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*nmadd4\"\n+(define_insn \"*nmsub4<mode>\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-  \t(neg:ANYF\n-\t (fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t   (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t   (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n-  \"ISA_HAS_NMADD4_NMSUB4 (<MODE>mode) && !HONOR_NANS (<MODE>mode)\"\n-  \"nmadd.<fmt>\\t%0,%3,%1,%2\"\n+\t(neg:ANYF (minus:ANYF\n+\t\t   (mult:ANYF (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t\t\t      (match_operand:ANYF 3 \"register_operand\" \"f\"))\n+\t\t   (match_operand:ANYF 1 \"register_operand\" \"f\"))))]\n+  \"ISA_HAS_NMADD4_NMSUB4 (<MODE>mode)\n+   && TARGET_FUSED_MADD\n+   && HONOR_SIGNED_ZEROS (<MODE>mode)\n+   && !HONOR_NANS (<MODE>mode)\"\n+  \"nmsub.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-;; If we're ignoring signed zeros, we can use NMSUB (-(a * b - c)) to\n-;; implement fnma (-a * b + c, which is unconditionally equivalent to\n-;; -(a * b) + c).\n-(define_expand \"fnma<mode>4\"\n-  [(set (match_operand:ANYF 0 \"register_operand\")\n-\t(fma:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\"))\n-\t \t  (match_operand:ANYF 2 \"register_operand\")\n-\t\t  (match_operand:ANYF 3 \"register_operand\")))]\n-  \"(ISA_HAS_NMADD3_NMSUB3 (<MODE>mode) || ISA_HAS_NMADD4_NMSUB4 (<MODE>mode))\n-   && !HONOR_SIGNED_ZEROS (<MODE>mode)\n-   && !HONOR_NANS (<MODE>mode)\")\n-\n-(define_insn \"*fnma<mode>4_nmsub3\"\n+(define_insn \"*nmsub3<mode>\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(fma:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n-\t \t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t  (match_operand:ANYF 3 \"register_operand\" \"0\")))]\n+\t(neg:ANYF (minus:ANYF\n+\t\t   (mult:ANYF (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t\t\t      (match_operand:ANYF 3 \"register_operand\" \"f\"))\n+\t\t   (match_operand:ANYF 1 \"register_operand\" \"0\"))))]\n   \"ISA_HAS_NMADD3_NMSUB3 (<MODE>mode)\n-   && !HONOR_SIGNED_ZEROS (<MODE>mode)\n+   && TARGET_FUSED_MADD\n+   && HONOR_SIGNED_ZEROS (<MODE>mode)\n    && !HONOR_NANS (<MODE>mode)\"\n   \"nmsub.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*fnma<mode>4_nmsub4\"\n+(define_insn \"*nmsub4<mode>_fastmath\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(fma:ANYF (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n-\t \t  (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t  (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n+\t(minus:ANYF\n+\t (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t (mult:ANYF (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t\t    (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n   \"ISA_HAS_NMADD4_NMSUB4 (<MODE>mode)\n+   && TARGET_FUSED_MADD\n    && !HONOR_SIGNED_ZEROS (<MODE>mode)\n    && !HONOR_NANS (<MODE>mode)\"\n-  \"nmsub.<fmt>\\t%0,%3,%1,%2\"\n+  \"nmsub.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*nmsub3\"\n+(define_insn \"*nmsub3<mode>_fastmath\"\n   [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-  \t(neg:ANYF\n-\t (fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t \t   (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t   (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"0\")))))]\n-  \"ISA_HAS_NMADD3_NMSUB3 (<MODE>mode) && !HONOR_NANS (<MODE>mode)\"\n+\t(minus:ANYF\n+\t (match_operand:ANYF 1 \"register_operand\" \"f\")\n+\t (mult:ANYF (match_operand:ANYF 2 \"register_operand\" \"f\")\n+\t\t    (match_operand:ANYF 3 \"register_operand\" \"0\"))))]\n+  \"ISA_HAS_NMADD3_NMSUB3 (<MODE>mode)\n+   && TARGET_FUSED_MADD\n+   && !HONOR_SIGNED_ZEROS (<MODE>mode)\n+   && !HONOR_NANS (<MODE>mode)\"\n   \"nmsub.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n-(define_insn \"*nmsub4\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-  \t(neg:ANYF\n-\t (fma:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t \t   (match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t\t   (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"f\")))))]\n-  \"ISA_HAS_NMADD4_NMSUB4 (<MODE>mode) && !HONOR_NANS (<MODE>mode)\"\n-  \"nmsub.<fmt>\\t%0,%3,%1,%2\"\n-  [(set_attr \"type\" \"fmadd\")\n-   (set_attr \"mode\" \"<UNITMODE>\")])\n-\n ;;\n ;;  ....................\n ;;"}, {"sha": "fbdbf64eeff4afa1d5eecc47a3fd80dc9ad56547", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c50bcc13cbab9a0451d74ba13f70437c5fcf69ad", "patch": "@@ -1,3 +1,27 @@\n+2010-11-07  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.target/mips/mips.exp: Revert previous patch.\n+\t* gcc.target/mips/fma-1.c: Delete.\n+\t* gcc.target/mips/fma-2.c: Likewise.\n+\t* gcc.target/mips/fma-3.c: Likewise.\n+\t* gcc.target/mips/fma-4.c: Likewise.\n+\t* gcc.target/mips/fma-5.c: Likewise.\n+\t* gcc.target/mips/fma-6.c: Likewise.\n+\t* gcc.target/mips/fma-7.c: Likewise.\n+\t* gcc.target/mips/fma-8.c: Likewise.\n+\t* gcc.target/mips/fma-9.c: Likewise.\n+\t* gcc.target/mips/fma-10.c: Likewise.\n+\t* gcc.target/mips/fma-11.c: Likewise.\n+\t* gcc.target/mips/fma-12.c: Likewise.\n+\t* gcc.target/mips/fma-13.c: Likewise.\n+\t* gcc.target/mips/fma-14.c: Likewise.\n+\t* gcc.target/mips/fma-15.c: Likewise.\n+\t* gcc.target/mips/fma-16.c: Likewise.\n+\t* gcc.target/mips/fma-17.c: Likewise.\n+\t* gcc.target/mips/fma-18.c: Likewise.\n+\t* gcc.target/mips/fma-19.c: Likewise.\n+\t* gcc.target/mips/fma-20.c: Likewise.\n+\n 2010-11-07  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.target/mips/mips.exp: Add support for -ffp-contract."}, {"sha": "d167473259e78380c3c4a334a65a76412ae06d8f", "filename": "gcc/testsuite/gcc.target/mips/fma-1.c", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-1.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,82 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa>=4 -O3 -fno-fast-math -ffp-contract=off\" } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.s\\t\" 3 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.s\\t\" 3 } } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.d\\t\" 3 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.d\\t\" 3 } } */\n-/* { dg-final { scan-assembler-not \"\\tnmadd\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmsub\\\\.\" } } */\n-\n-/* We should not use NMADD or NMSUB without -ffinite-math-only because\n-   those instructions may perform arithmetic negation.  */\n-\n-NOMIPS16 float\n-madd_s (float b, float c, float d)\n-{\n-  return __builtin_fmaf (b, c, d);\n-}\n-\n-NOMIPS16 float\n-msub_s (float b, float c, float d)\n-{\n-  return __builtin_fmaf (b, c, -d);\n-}\n-\n-NOMIPS16 float\n-not_nmadd_s (float b, float c, float d)\n-{\n-  return -__builtin_fmaf (b, c, d);\n-}\n-\n-NOMIPS16 float\n-not_nmsub_s (float b, float c, float d)\n-{\n-  return -__builtin_fmaf (b, c, -d);\n-}\n-\n-NOMIPS16 float\n-not_nmadd_s_2 (float b, float c, float d)\n-{\n-  return __builtin_fmaf (-b, c, -d);\n-}\n-\n-NOMIPS16 float\n-not_nmsub_s_2 (float b, float c, float d)\n-{\n-  return __builtin_fmaf (-b, c, d);\n-}\n-\n-NOMIPS16 double\n-madd_d (double b, double c, double d)\n-{\n-  return __builtin_fma (b, c, d);\n-}\n-\n-NOMIPS16 double\n-msub_d (double b, double c, double d)\n-{\n-  return __builtin_fma (b, c, -d);\n-}\n-\n-NOMIPS16 double\n-not_nmadd_d (double b, double c, double d)\n-{\n-  return -__builtin_fma (b, c, d);\n-}\n-\n-NOMIPS16 double\n-not_nmsub_d (double b, double c, double d)\n-{\n-  return -__builtin_fma (b, c, -d);\n-}\n-\n-NOMIPS16 double\n-not_nmadd_d_2 (double b, double c, double d)\n-{\n-  return __builtin_fma (-b, c, -d);\n-}\n-\n-NOMIPS16 double\n-not_nmsub_d_2 (double b, double c, double d)\n-{\n-  return __builtin_fma (-b, c, d);\n-}"}, {"sha": "bb3f31b954d0333a32ae3eb8dbd9fe96570dc088", "filename": "gcc/testsuite/gcc.target/mips/fma-10.c", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-10.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,62 +0,0 @@\n-/* { dg-options \"-mpaired-single -O -ffast-math -ftree-vectorize\" } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.ps\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.ps\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.ps\\t\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.ps\\t\" 2 } } */\n-\n-#define N 512\n-float a[N], b[N], c[N], d[N];\n-\n-NOMIPS16 void\n-madd_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = __builtin_fmaf (b[i], c[i], d[i]);\n-}\n-\n-NOMIPS16 float\n-msub_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = __builtin_fmaf (b[i], c[i], -d[i]);\n-}\n-\n-NOMIPS16 float\n-nmadd_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -__builtin_fmaf (b[i], c[i], d[i]);\n-}\n-\n-NOMIPS16 float\n-nmsub_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -__builtin_fmaf (b[i], c[i], -d[i]);\n-}\n-\n-NOMIPS16 float\n-nmadd_ps_2 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = __builtin_fmaf (-b[i], c[i], -d[i]);\n-}\n-\n-NOMIPS16 float\n-nmsub_ps_2 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = __builtin_fmaf (-b[i], c[i], d[i]);\n-}"}, {"sha": "17f124f28186b1a19e779c5b71c66df603b7d5fa", "filename": "gcc/testsuite/gcc.target/mips/fma-11.c", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-11.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,79 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa>=4 -O3 -fno-fast-math -ffp-contract=off\" } */\n-/* { dg-final { scan-assembler-not \"\\tmadd\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tmsub\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmadd\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmsub\\\\.\" } } */\n-\n-/* No function should use fused operations, however high the -O level.  */\n-\n-NOMIPS16 float\n-not_madd_s (float b, float c, float d)\n-{\n-  return b * c + d;\n-}\n-\n-NOMIPS16 float\n-not_msub_s (float b, float c, float d)\n-{\n-  return b * c + -d;\n-}\n-\n-NOMIPS16 float\n-not_nmadd_s (float b, float c, float d)\n-{\n-  return -(b * c + d);\n-}\n-\n-NOMIPS16 float\n-not_nmsub_s (float b, float c, float d)\n-{\n-  return -(b * c + -d);\n-}\n-\n-NOMIPS16 float\n-not_nmadd_s_2 (float b, float c, float d)\n-{\n-  return -b * c - d;\n-}\n-\n-NOMIPS16 float\n-not_nmsub_s_2 (float b, float c, float d)\n-{\n-  return -b * c + d;\n-}\n-\n-NOMIPS16 double\n-not_madd_d (double b, double c, double d)\n-{\n-  return b * c + d;\n-}\n-\n-NOMIPS16 double\n-not_msub_d (double b, double c, double d)\n-{\n-  return b * c + -d;\n-}\n-\n-NOMIPS16 double\n-not_nmadd_d (double b, double c, double d)\n-{\n-  return -(b * c + d);\n-}\n-\n-NOMIPS16 double\n-not_nmsub_d (double b, double c, double d)\n-{\n-  return -(b * c + -d);\n-}\n-\n-NOMIPS16 double\n-not_nmadd_d_2 (double b, double c, double d)\n-{\n-  return -b * c - d;\n-}\n-\n-NOMIPS16 double\n-not_nmsub_d_2 (double b, double c, double d)\n-{\n-  return -b * c + d;\n-}"}, {"sha": "6a6303c394d838013dd781f93fefbe6de8d0d276", "filename": "gcc/testsuite/gcc.target/mips/fma-12.c", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-12.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,82 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa>=4 -O2 -fno-fast-math -ffp-contract=fast\" } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.s\\t\" 3 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.s\\t\" 3 } } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.d\\t\" 3 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.d\\t\" 3 } } */\n-/* { dg-final { scan-assembler-not \"\\tnmadd\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmsub\\\\.\" } } */\n-\n-/* We should not use NMADD or NMSUB without -ffinite-math-only because\n-   those instructions may perform arithmetic negation.  */\n-\n-NOMIPS16 float\n-madd_s (float b, float c, float d)\n-{\n-  return b * c + d;\n-}\n-\n-NOMIPS16 float\n-msub_s (float b, float c, float d)\n-{\n-  return b * c + -d;\n-}\n-\n-NOMIPS16 float\n-not_nmadd_s (float b, float c, float d)\n-{\n-  return -(b * c + d);\n-}\n-\n-NOMIPS16 float\n-not_nmsub_s (float b, float c, float d)\n-{\n-  return -(b * c + -d);\n-}\n-\n-NOMIPS16 float\n-not_nmadd_s_2 (float b, float c, float d)\n-{\n-  return -b * c - d;\n-}\n-\n-NOMIPS16 float\n-not_nmsub_s_2 (float b, float c, float d)\n-{\n-  return -b * c + d;\n-}\n-\n-NOMIPS16 double\n-madd_d (double b, double c, double d)\n-{\n-  return b * c + d;\n-}\n-\n-NOMIPS16 double\n-msub_d (double b, double c, double d)\n-{\n-  return b * c + -d;\n-}\n-\n-NOMIPS16 double\n-not_nmadd_d (double b, double c, double d)\n-{\n-  return -(b * c + d);\n-}\n-\n-NOMIPS16 double\n-not_nmsub_d (double b, double c, double d)\n-{\n-  return -(b * c + -d);\n-}\n-\n-NOMIPS16 double\n-not_nmadd_d_2 (double b, double c, double d)\n-{\n-  return -b * c - d;\n-}\n-\n-NOMIPS16 double\n-not_nmsub_d_2 (double b, double c, double d)\n-{\n-  return -b * c + d;\n-}"}, {"sha": "2dbff9b1d49e9873e874f3ca399a30d9595aab93", "filename": "gcc/testsuite/gcc.target/mips/fma-13.c", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-13.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,81 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa>=4 -O2 -ffast-math\" } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.s\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.s\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.s\\t\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.s\\t\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.d\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.d\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.d\\t\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.d\\t\" 2 } } */\n-\n-NOMIPS16 float\n-madd_s (float b, float c, float d)\n-{\n-  return b * c + d;\n-}\n-\n-NOMIPS16 float\n-msub_s (float b, float c, float d)\n-{\n-  return b * c + -d;\n-}\n-\n-NOMIPS16 float\n-nmadd_s (float b, float c, float d)\n-{\n-  return -(b * c + d);\n-}\n-\n-NOMIPS16 float\n-nmsub_s (float b, float c, float d)\n-{\n-  return -(b * c + -d);\n-}\n-\n-NOMIPS16 float\n-nmadd_s_2 (float b, float c, float d)\n-{\n-  return -b * c - d;\n-}\n-\n-NOMIPS16 float\n-nmsub_s_2 (float b, float c, float d)\n-{\n-  return -b * c + d;\n-}\n-\n-NOMIPS16 double\n-madd_d (double b, double c, double d)\n-{\n-  return b * c + d;\n-}\n-\n-NOMIPS16 double\n-msub_d (double b, double c, double d)\n-{\n-  return b * c + -d;\n-}\n-\n-NOMIPS16 double\n-nmadd_d (double b, double c, double d)\n-{\n-  return -(b * c + d);\n-}\n-\n-NOMIPS16 double\n-nmsub_d (double b, double c, double d)\n-{\n-  return -(b * c + -d);\n-}\n-\n-NOMIPS16 double\n-nmadd_d_2 (double b, double c, double d)\n-{\n-  return -b * c - d;\n-}\n-\n-NOMIPS16 double\n-nmsub_d_2 (double b, double c, double d)\n-{\n-  return -b * c + d;\n-}"}, {"sha": "383effdc336fa4b58c8ba449516f437f521e781f", "filename": "gcc/testsuite/gcc.target/mips/fma-14.c", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-14.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,64 +0,0 @@\n-/* { dg-options \"-mpaired-single -O3 -fno-fast-math -ftree-vectorize -ffp-contract=off\" } */\n-/* { dg-final { scan-assembler-not \"\\tmadd\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tmsub\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmadd\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmsub\\\\.\" } } */\n-\n-/* No function should use fused operations, however high the -O level.  */\n-\n-#define N 512\n-float a[N], b[N], c[N], d[N];\n-\n-NOMIPS16 void\n-not_madd_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = b[i] * c[i] + d[i];\n-}\n-\n-NOMIPS16 float\n-not_msub_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = b[i] * c[i] - d[i];\n-}\n-\n-NOMIPS16 float\n-not_nmadd_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -(b[i] * c[i] + d[i]);\n-}\n-\n-NOMIPS16 float\n-not_nmsub_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -(b[i] * c[i] - d[i]);\n-}\n-\n-NOMIPS16 float\n-not_nmadd_ps_2 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -b[i] * c[i] - d[i];\n-}\n-\n-NOMIPS16 float\n-not_nmsub_ps_2 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -b[i] * c[i] + d[i];\n-}"}, {"sha": "4fdfeabaf5641fa212fefc9f01494ecbf0d44835", "filename": "gcc/testsuite/gcc.target/mips/fma-15.c", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-15.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,65 +0,0 @@\n-/* { dg-options \"-mpaired-single -O2 -fno-fast-math -ftree-vectorize -ffp-contract=fast\" } */\n-/* { dg-final { scan-assembler \"\\tmadd\\\\.ps\" } } */\n-/* { dg-final { scan-assembler \"\\tmsub\\\\.ps\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmadd\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmsub\\\\.\" } } */\n-\n-/* We should not use NMADD or NMSUB without -ffinite-math-only because\n-   those instructions may perform arithmetic negation.  */\n-\n-#define N 512\n-float a[N], b[N], c[N], d[N];\n-\n-NOMIPS16 void\n-madd_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = b[i] * c[i] + d[i];\n-}\n-\n-NOMIPS16 float\n-msub_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = b[i] * c[i] - d[i];\n-}\n-\n-NOMIPS16 float\n-not_nmadd_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -(b[i] * c[i] + d[i]);\n-}\n-\n-NOMIPS16 float\n-not_nmsub_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -(b[i] * c[i] - d[i]);\n-}\n-\n-NOMIPS16 float\n-not_nmadd_ps_2 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -b[i] * c[i] - d[i];\n-}\n-\n-NOMIPS16 float\n-not_nmsub_ps_2 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -b[i] * c[i] + d[i];\n-}"}, {"sha": "16cda123316dca71e7fdfb4b995b37f3d8ff1b17", "filename": "gcc/testsuite/gcc.target/mips/fma-16.c", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-16.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,62 +0,0 @@\n-/* { dg-options \"-mpaired-single -O2 -ffast-math -ftree-vectorize\" } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.ps\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.ps\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.ps\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.ps\" 2 } } */\n-\n-#define N 512\n-float a[N], b[N], c[N], d[N];\n-\n-NOMIPS16 void\n-madd_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = b[i] * c[i] + d[i];\n-}\n-\n-NOMIPS16 float\n-msub_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = b[i] * c[i] - d[i];\n-}\n-\n-NOMIPS16 float\n-nmadd_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -(b[i] * c[i] + d[i]);\n-}\n-\n-NOMIPS16 float\n-nmsub_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -(b[i] * c[i] - d[i]);\n-}\n-\n-NOMIPS16 float\n-nmadd_ps_2 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -b[i] * c[i] - d[i];\n-}\n-\n-NOMIPS16 float\n-nmsub_ps_2 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -b[i] * c[i] + d[i];\n-}"}, {"sha": "87b2de1a9161159e156d4e54ed04c0e4e5a9cf91", "filename": "gcc/testsuite/gcc.target/mips/fma-17.c", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-17.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,82 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa=loongson -O3 -fno-fast-math -ffp-contract=off\" } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.s\\t\" 3 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.s\\t\" 3 } } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.d\\t\" 3 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.d\\t\" 3 } } */\n-/* { dg-final { scan-assembler-not \"\\tnmadd\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmsub\\\\.\" } } */\n-\n-/* We should not use NMADD or NMSUB without -ffinite-math-only because\n-   those instructions may perform arithmetic negation.  */\n-\n-NOMIPS16 float\n-madd_s (float b, float c, float d)\n-{\n-  return __builtin_fmaf (b, c, d);\n-}\n-\n-NOMIPS16 float\n-msub_s (float b, float c, float d)\n-{\n-  return __builtin_fmaf (b, c, -d);\n-}\n-\n-NOMIPS16 float\n-not_nmadd_s (float b, float c, float d)\n-{\n-  return -__builtin_fmaf (b, c, d);\n-}\n-\n-NOMIPS16 float\n-not_nmsub_s (float b, float c, float d)\n-{\n-  return -__builtin_fmaf (b, c, -d);\n-}\n-\n-NOMIPS16 float\n-not_nmadd_s_2 (float b, float c, float d)\n-{\n-  return __builtin_fmaf (-b, c, -d);\n-}\n-\n-NOMIPS16 float\n-not_nmsub_s_2 (float b, float c, float d)\n-{\n-  return __builtin_fmaf (-b, c, d);\n-}\n-\n-NOMIPS16 double\n-madd_d (double b, double c, double d)\n-{\n-  return __builtin_fma (b, c, d);\n-}\n-\n-NOMIPS16 double\n-msub_d (double b, double c, double d)\n-{\n-  return __builtin_fma (b, c, -d);\n-}\n-\n-NOMIPS16 double\n-not_nmadd_d (double b, double c, double d)\n-{\n-  return -__builtin_fma (b, c, d);\n-}\n-\n-NOMIPS16 double\n-not_nmsub_d (double b, double c, double d)\n-{\n-  return -__builtin_fma (b, c, -d);\n-}\n-\n-NOMIPS16 double\n-not_nmadd_d_2 (double b, double c, double d)\n-{\n-  return __builtin_fma (-b, c, -d);\n-}\n-\n-NOMIPS16 double\n-not_nmsub_d_2 (double b, double c, double d)\n-{\n-  return __builtin_fma (-b, c, d);\n-}"}, {"sha": "244f232f8ad284281ac9dbffcf6b3b2e9d847e78", "filename": "gcc/testsuite/gcc.target/mips/fma-18.c", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-18.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,81 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa=loongson -O -ffast-math\" } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.s\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.s\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.s\\t\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.s\\t\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.d\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.d\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.d\\t\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.d\\t\" 2 } } */\n-\n-NOMIPS16 float\n-madd_s (float b, float c, float d)\n-{\n-  return __builtin_fmaf (b, c, d);\n-}\n-\n-NOMIPS16 float\n-msub_s (float b, float c, float d)\n-{\n-  return __builtin_fmaf (b, c, -d);\n-}\n-\n-NOMIPS16 float\n-nmadd_s (float b, float c, float d)\n-{\n-  return -__builtin_fmaf (b, c, d);\n-}\n-\n-NOMIPS16 float\n-nmsub_s (float b, float c, float d)\n-{\n-  return -__builtin_fmaf (b, c, -d);\n-}\n-\n-NOMIPS16 float\n-nmadd_s_2 (float b, float c, float d)\n-{\n-  return __builtin_fmaf (-b, c, -d);\n-}\n-\n-NOMIPS16 float\n-not_nmsub_s_2 (float b, float c, float d)\n-{\n-  return __builtin_fmaf (-b, c, d);\n-}\n-\n-NOMIPS16 double\n-madd_d (double b, double c, double d)\n-{\n-  return __builtin_fma (b, c, d);\n-}\n-\n-NOMIPS16 double\n-msub_d (double b, double c, double d)\n-{\n-  return __builtin_fma (b, c, -d);\n-}\n-\n-NOMIPS16 double\n-nmadd_d (double b, double c, double d)\n-{\n-  return -__builtin_fma (b, c, d);\n-}\n-\n-NOMIPS16 double\n-nmsub_d (double b, double c, double d)\n-{\n-  return -__builtin_fma (b, c, -d);\n-}\n-\n-NOMIPS16 double\n-nmadd_d_2 (double b, double c, double d)\n-{\n-  return __builtin_fma (-b, c, -d);\n-}\n-\n-NOMIPS16 double\n-nmsub_d_2 (double b, double c, double d)\n-{\n-  return __builtin_fma (-b, c, d);\n-}"}, {"sha": "c038f191d9c0acb8697c474c83a215913b103c5d", "filename": "gcc/testsuite/gcc.target/mips/fma-19.c", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-19.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,79 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa=loongson -O3 -fno-fast-math -ffp-contract=off\" } */\n-/* { dg-final { scan-assembler-not \"\\tmadd\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tmsub\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmadd\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmsub\\\\.\" } } */\n-\n-/* No function should use fused operations, however high the -O level.  */\n-\n-NOMIPS16 float\n-not_madd_s (float b, float c, float d)\n-{\n-  return b * c + d;\n-}\n-\n-NOMIPS16 float\n-not_msub_s (float b, float c, float d)\n-{\n-  return b * c + -d;\n-}\n-\n-NOMIPS16 float\n-not_nmadd_s (float b, float c, float d)\n-{\n-  return -(b * c + d);\n-}\n-\n-NOMIPS16 float\n-not_nmsub_s (float b, float c, float d)\n-{\n-  return -(b * c + -d);\n-}\n-\n-NOMIPS16 float\n-not_nmadd_s_2 (float b, float c, float d)\n-{\n-  return -b * c - d;\n-}\n-\n-NOMIPS16 float\n-not_nmsub_s_2 (float b, float c, float d)\n-{\n-  return -b * c + d;\n-}\n-\n-NOMIPS16 double\n-not_madd_d (double b, double c, double d)\n-{\n-  return b * c + d;\n-}\n-\n-NOMIPS16 double\n-not_msub_d (double b, double c, double d)\n-{\n-  return b * c + -d;\n-}\n-\n-NOMIPS16 double\n-not_nmadd_d (double b, double c, double d)\n-{\n-  return -(b * c + d);\n-}\n-\n-NOMIPS16 double\n-not_nmsub_d (double b, double c, double d)\n-{\n-  return -(b * c + -d);\n-}\n-\n-NOMIPS16 double\n-not_nmadd_d_2 (double b, double c, double d)\n-{\n-  return -b * c - d;\n-}\n-\n-NOMIPS16 double\n-not_nmsub_d_2 (double b, double c, double d)\n-{\n-  return -b * c + d;\n-}"}, {"sha": "26c77421a089bfc7b32b4dfaa563c812d0f007de", "filename": "gcc/testsuite/gcc.target/mips/fma-2.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-2.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa>=4 -O3 -fno-fast-math -ffp-contract=off -ffinite-math-only\" } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.s\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.d\\t\" 1 } } */\n-/* { dg-final { scan-assembler-not \"\\tnmsub\\\\.\" } } */\n-\n-NOMIPS16 float\n-nmadd_s (float b, float c, float d)\n-{\n-  return -__builtin_fmaf (b, c, d);\n-}\n-\n-NOMIPS16 double\n-nmadd_d (double b, double c, double d)\n-{\n-  return -__builtin_fma (b, c, d);\n-}"}, {"sha": "ab0cbdfb7913290b6b7ba24eb9e754aa81b5ee99", "filename": "gcc/testsuite/gcc.target/mips/fma-20.c", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-20.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,81 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa=loongson -O2 -ffast-math\" } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.s\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.s\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.s\\t\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.s\\t\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.d\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.d\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.d\\t\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.d\\t\" 2 } } */\n-\n-NOMIPS16 float\n-madd_s (float b, float c, float d)\n-{\n-  return b * c + d;\n-}\n-\n-NOMIPS16 float\n-msub_s (float b, float c, float d)\n-{\n-  return b * c + -d;\n-}\n-\n-NOMIPS16 float\n-nmadd_s (float b, float c, float d)\n-{\n-  return -(b * c + d);\n-}\n-\n-NOMIPS16 float\n-nmsub_s (float b, float c, float d)\n-{\n-  return -(b * c + -d);\n-}\n-\n-NOMIPS16 float\n-nmadd_s_2 (float b, float c, float d)\n-{\n-  return -b * c - d;\n-}\n-\n-NOMIPS16 float\n-nmsub_s_2 (float b, float c, float d)\n-{\n-  return -b * c + d;\n-}\n-\n-NOMIPS16 double\n-madd_d (double b, double c, double d)\n-{\n-  return b * c + d;\n-}\n-\n-NOMIPS16 double\n-msub_d (double b, double c, double d)\n-{\n-  return b * c + -d;\n-}\n-\n-NOMIPS16 double\n-nmadd_d (double b, double c, double d)\n-{\n-  return -(b * c + d);\n-}\n-\n-NOMIPS16 double\n-nmsub_d (double b, double c, double d)\n-{\n-  return -(b * c + -d);\n-}\n-\n-NOMIPS16 double\n-nmadd_d_2 (double b, double c, double d)\n-{\n-  return -b * c - d;\n-}\n-\n-NOMIPS16 double\n-nmsub_d_2 (double b, double c, double d)\n-{\n-  return -b * c + d;\n-}"}, {"sha": "1a387c23bb6237f625c87a97994ced6c9cb7e508", "filename": "gcc/testsuite/gcc.target/mips/fma-3.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-3.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa>=4 -O3 -fno-fast-math -ffp-contract=off -ffinite-math-only\" } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.s\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.d\\t\" 1 } } */\n-/* { dg-final { scan-assembler-not \"\\tnmadd\\\\.\" } } */\n-\n-NOMIPS16 float\n-nmsub_s (float b, float c, float d)\n-{\n-  return -__builtin_fmaf (b, c, -d);\n-}\n-\n-NOMIPS16 double\n-nmsub_d (double b, double c, double d)\n-{\n-  return -__builtin_fma (b, c, -d);\n-}"}, {"sha": "4ae7f5f4b67eeb4bfefb1e8e1efc37e70cf2d6c6", "filename": "gcc/testsuite/gcc.target/mips/fma-4.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-4.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa>=4 -O3 -fno-fast-math -ffp-contract=off -ffinite-math-only\" } */\n-/* { dg-final { scan-assembler-not \"\\tnmadd\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmsub\\\\.\" } } */\n-\n-/* These patterns can only use NMADD if -fno-signed-zeros is in effect.  */\n-\n-NOMIPS16 float\n-not_nmadd_s_2 (float b, float c, float d)\n-{\n-  return __builtin_fmaf (-b, c, -d);\n-}\n-\n-NOMIPS16 double\n-not_nmadd_d_2 (double b, double c, double d)\n-{\n-  return __builtin_fma (-b, c, -d);\n-}"}, {"sha": "410a904734ac3788b9f5b507b55294f8f76b0daf", "filename": "gcc/testsuite/gcc.target/mips/fma-5.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-5.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa>=4 -O3 -fno-fast-math -ffp-contract=off -ffinite-math-only\" } */\n-/* { dg-final { scan-assembler-not \"\\tnmadd\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmsub\\\\.\" } } */\n-\n-/* These patterns can only use NMSUB if -fno-signed-zeros is in effect.  */\n-\n-NOMIPS16 float\n-not_nmsub_s_2 (float b, float c, float d)\n-{\n-  return __builtin_fmaf (-b, c, d);\n-}\n-\n-NOMIPS16 double\n-not_nmsub_d_2 (double b, double c, double d)\n-{\n-  return __builtin_fma (-b, c, d);\n-}"}, {"sha": "359983721d64c8214101fe402bb3682e43d8ef60", "filename": "gcc/testsuite/gcc.target/mips/fma-6.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-6.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa>=4 -O3 -ffast-math\" } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.s\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.d\\t\" 1 } } */\n-/* { dg-final { scan-assembler-not \"\\tnmsub\\\\.\" } } */\n-\n-NOMIPS16 float\n-nmadd_s_2 (float b, float c, float d)\n-{\n-  return __builtin_fmaf (-b, c, -d);\n-}\n-\n-NOMIPS16 double\n-nmadd_d_2 (double b, double c, double d)\n-{\n-  return __builtin_fma (-b, c, -d);\n-}"}, {"sha": "11817e636272de29474037b0787a54190eaf98af", "filename": "gcc/testsuite/gcc.target/mips/fma-7.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-7.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa>=4 -O3 -ffast-math\" } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.s\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.d\\t\" 1 } } */\n-/* { dg-final { scan-assembler-not \"\\tnmadd\\\\.\" } } */\n-\n-NOMIPS16 float\n-nmsub_s_2 (float b, float c, float d)\n-{\n-  return __builtin_fmaf (-b, c, d);\n-}\n-\n-NOMIPS16 double\n-nmsub_d_2 (double b, double c, double d)\n-{\n-  return __builtin_fma (-b, c, d);\n-}"}, {"sha": "d54138d3df44df9c64095719a46bc871b1c9c458", "filename": "gcc/testsuite/gcc.target/mips/fma-8.c", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-8.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,81 +0,0 @@\n-/* { dg-options \"-mgp64 -mhard-float isa>=4 -O -ffast-math\" } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.s\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.s\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.s\\t\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.s\\t\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tmadd\\\\.d\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tmsub\\\\.d\\t\" 1 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmadd\\\\.d\\t\" 2 } } */\n-/* { dg-final { scan-assembler-times \"\\tnmsub\\\\.d\\t\" 2 } } */\n-\n-NOMIPS16 float\n-madd_s (float b, float c, float d)\n-{\n-  return __builtin_fmaf (b, c, d);\n-}\n-\n-NOMIPS16 float\n-msub_s (float b, float c, float d)\n-{\n-  return __builtin_fmaf (b, c, -d);\n-}\n-\n-NOMIPS16 float\n-nmadd_s (float b, float c, float d)\n-{\n-  return -__builtin_fmaf (b, c, d);\n-}\n-\n-NOMIPS16 float\n-nmsub_s (float b, float c, float d)\n-{\n-  return -__builtin_fmaf (b, c, -d);\n-}\n-\n-NOMIPS16 float\n-nmadd_s_2 (float b, float c, float d)\n-{\n-  return __builtin_fmaf (-b, c, -d);\n-}\n-\n-NOMIPS16 float\n-nmsub_s_2 (float b, float c, float d)\n-{\n-  return __builtin_fmaf (-b, c, d);\n-}\n-\n-NOMIPS16 double\n-madd_d (double b, double c, double d)\n-{\n-  return __builtin_fma (b, c, d);\n-}\n-\n-NOMIPS16 double\n-msub_d (double b, double c, double d)\n-{\n-  return __builtin_fma (b, c, -d);\n-}\n-\n-NOMIPS16 double\n-nmadd_d (double b, double c, double d)\n-{\n-  return -__builtin_fma (b, c, d);\n-}\n-\n-NOMIPS16 double\n-nmsub_d (double b, double c, double d)\n-{\n-  return -__builtin_fma (b, c, -d);\n-}\n-\n-NOMIPS16 double\n-nmadd_d_2 (double b, double c, double d)\n-{\n-  return __builtin_fma (-b, c, -d);\n-}\n-\n-NOMIPS16 double\n-nmsub_d_2 (double b, double c, double d)\n-{\n-  return __builtin_fma (-b, c, d);\n-}"}, {"sha": "a0fc1b084c3b922e157096be1a1885192efd6d1e", "filename": "gcc/testsuite/gcc.target/mips/fma-9.c", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7c0f73d6801b4e839775ec2a09c1acf6378dbda/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffma-9.c?ref=c7c0f73d6801b4e839775ec2a09c1acf6378dbda", "patch": "@@ -1,70 +0,0 @@\n-/* { dg-options \"-mpaired-single -O3 -fno-fast-math -ftree-vectorize -ffp-contract=off\" } */\n-/* { dg-final { scan-assembler \"\\tmadd\\\\.ps\\t\" } } */\n-/* { dg-final { scan-assembler \"\\tmsub\\\\.s\\t\" } } */\n-/* { dg-final { scan-assembler-not \"\\tmsub\\\\.ps\\t\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmadd\\\\.\" } } */\n-/* { dg-final { scan-assembler-not \"\\tnmsub\\\\.\" } } */\n-\n-/* We should not use NMADD or NMSUB without -ffinite-math-only because\n-   those instructions may perform arithmetic negation.  We don't really\n-   expect the nmadd_ps and nmsub_ps functions to use MADD.PS and MSUB.PS,\n-   but there's no reason in principle why they shouldn't.\n-\n-   ??? At the moment, we don't vectorize msub_ps, but we probably should.  */\n-\n-#define N 512\n-float a[N], b[N], c[N], d[N];\n-\n-NOMIPS16 void\n-madd_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = __builtin_fmaf (b[i], c[i], d[i]);\n-}\n-\n-NOMIPS16 float\n-msub_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = __builtin_fmaf (b[i], c[i], -d[i]);\n-}\n-\n-NOMIPS16 float\n-not_nmadd_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -__builtin_fmaf (b[i], c[i], d[i]);\n-}\n-\n-NOMIPS16 float\n-not_nmsub_ps (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = -__builtin_fmaf (b[i], c[i], -d[i]);\n-}\n-\n-NOMIPS16 float\n-not_nmadd_ps_2 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = __builtin_fmaf (-b[i], c[i], -d[i]);\n-}\n-\n-NOMIPS16 float\n-not_nmsub_ps_2 (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    a[i] = __builtin_fmaf (-b[i], c[i], d[i]);\n-}"}, {"sha": "0a7bc1de8dd7b6c32dc4848c5a0769ef95f34a94", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c50bcc13cbab9a0451d74ba13f70437c5fcf69ad/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=c50bcc13cbab9a0451d74ba13f70437c5fcf69ad", "patch": "@@ -292,13 +292,6 @@ foreach option {\n     lappend mips_option_groups $option \"-f(no-|)$option\"\n }\n \n-# Add -ffoo= options to mips_option_groups.\n-foreach option {\n-    fp-contract\n-} {\n-    lappend mips_option_groups $option \"-f$option=.*\"\n-}\n-\n # A list of option groups that have an impact on the ABI.\n set mips_abi_groups {\n     abi"}]}