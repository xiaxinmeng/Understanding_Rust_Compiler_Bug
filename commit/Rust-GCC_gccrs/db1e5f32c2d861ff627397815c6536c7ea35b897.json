{"sha": "db1e5f32c2d861ff627397815c6536c7ea35b897", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIxZTVmMzJjMmQ4NjFmZjYyNzM5NzgxNWM2NTM2YzdlYTM1Yjg5Nw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-08-24T19:28:07Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-08-24T19:28:07Z"}, "message": "rs6000.opt (-mpower9-dform-scalar): Delete undocumented switches.\n\n[gcc]\n2017-08-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.opt (-mpower9-dform-scalar): Delete\n\tundocumented switches.\n\t(-mpower9-dform-vector): Likewise.\n\t(-mpower9-dform): Likewise.\n\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Update\n\tcomments to delete references to -mpower9-dform* switches.\n\t* config/rs6000/predicates.md (vsx_quad_dform_memory_operand):\n\tDelete reference to -mpower9-dform* switches, test for\n\t-mpower9-vector instead.\n\t* config/rs6000/rs6000-cpus.def (ISA_3_0_MASKS_SERVER): Likewise.\n\t(OTHER_P9_VECTOR_MASKS): Likewise.\n\t(POWERPC_MASKS): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_setup_reg_addr_masks): Change\n\ttests against -mpower9-dform* to -mpower9-vector.  Delete code\n\tthat checked for -mpower9-dform* consistancy with other options.\n\tAdd test for -mpower9-misc to enable other power9 switches.\n\t(rs6000_init_hard_regno_mode_ok): Likewise.\n\t(rs6000_option_override_internal): Likewise.\n\t(rs6000_emit_prologue): Likewise.\n\t(rs6000_emit_epilogue): Likewise.\n\t(rs6000_opt_masks): Delete -mpower9-dform-{scalar,vector}.\n\t(rs6000_disable_incompatiable_switches): Delete -mpower9-dform.\n\t(emit_fusion_p9_load): Change tests for -mpower9-dform-scalar\n\t-mpower9-vector.\n\t(emit_fusion_p9_store): Likewise.\n\t* config/rs6000/rs6000.h (TARGET_P9_DFORM_SCALAR): Delete\n\tresetting these macros if the assembler does not support ISA 3.0\n\tinstructions.\n\t(TARGET_P9_DFORM_VECTOR): Likewise.\n\t* config/rs6000/rs6000.md (peepholes to optimize altivec memory):\n\tChange to use -mpower9-vector instead of -mpower9-dform-scalar.\n\n[gcc/testsuite]\n2017-08-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/dform-1.c: Delete -mpower9-dform*\n\toptions.\n\t* gcc.target/powerpc/dform-2.c: Likewise.\n\t* gcc.target/powerpc/dform-3.c: Likewise.\n\t* gcc.target/powerpc/pr71656-1.c: Likewise.\n\t* gcc.target/powerpc/pr71656-2.c: Likewise.\n\t* gcc.target/powerpc/pr80103-1.c: Likewise.\n\t* gcc.target/powerpc/pr80098-1.c: Likewise.\n\nFrom-SVN: r251341", "tree": {"sha": "2413397a9a156ffec57ce8d8d8595920fb62440e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2413397a9a156ffec57ce8d8d8595920fb62440e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db1e5f32c2d861ff627397815c6536c7ea35b897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1e5f32c2d861ff627397815c6536c7ea35b897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db1e5f32c2d861ff627397815c6536c7ea35b897", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1e5f32c2d861ff627397815c6536c7ea35b897/comments", "author": null, "committer": null, "parents": [{"sha": "2e12a8554c9ed35fd6aa786c1ef5eee96bf8a6b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e12a8554c9ed35fd6aa786c1ef5eee96bf8a6b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e12a8554c9ed35fd6aa786c1ef5eee96bf8a6b6"}], "stats": {"total": 175, "additions": 30, "deletions": 145}, "files": [{"sha": "63af03baa6fa485f07a036ef7fbe20125ef2ffac", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -827,7 +827,7 @@\n (define_predicate \"vsx_quad_dform_memory_operand\"\n   (match_code \"mem\")\n {\n-  if (!TARGET_P9_DFORM_VECTOR || !MEM_P (op) || GET_MODE_SIZE (mode) != 16)\n+  if (!TARGET_P9_VECTOR || !MEM_P (op) || GET_MODE_SIZE (mode) != 16)\n     return false;\n \n   return quad_address_p (XEXP (op, 0), mode, false);"}, {"sha": "1c9a8db7c628bffd79a7fc1c293758ac5ef2fb2f", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -430,8 +430,8 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR7\");\n   /* Note that the OPTION_MASK_DIRECT_MOVE flag is automatically\n      turned on in the following condition:\n-     1. TARGET_P9_DFORM_SCALAR or TARGET_P9_DFORM_VECTOR are enabled\n-        and OPTION_MASK_DIRECT_MOVE is not explicitly disabled.\n+     1. TARGET_P8_VECTOR is enabled and OPTION_MASK_DIRECT_MOVE is not\n+        explicitly disabled.\n         Hereafter, the OPTION_MASK_DIRECT_MOVE flag is considered to\n         have been turned on explicitly.\n      Note that the OPTION_MASK_DIRECT_MOVE flag is automatically\n@@ -545,8 +545,7 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n         also considered to have been turned off explicitly.\n      Note that the OPTION_MASK_P9_VECTOR is automatically turned on\n      in the following conditions:\n-     1. If TARGET_P9_DFORM_SCALAR or TARGET_P9_DFORM_VECTOR and\n-        OPTION_MASK_P9_VECTOR was not turned off explicitly.\n+     1. If TARGET_P9_MINMAX was turned on explicitly.\n         Hereafter, THE OPTION_MASK_P9_VECTOR flag is considered to\n         have been turned on explicitly.  */\n   if ((flags & OPTION_MASK_P9_VECTOR) != 0)"}, {"sha": "d4a8b94326a3b9894fc9daa501f0c31e5c8fb815", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -61,8 +61,6 @@\n \t\t\t\t | OPTION_MASK_ISEL\t\t\t\\\n \t\t\t\t | OPTION_MASK_MODULO\t\t\t\\\n \t\t\t\t | OPTION_MASK_P9_FUSION\t\t\\\n-\t\t\t\t | OPTION_MASK_P9_DFORM_SCALAR\t\t\\\n-\t\t\t\t | OPTION_MASK_P9_DFORM_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_P9_MINMAX\t\t\\\n \t\t\t\t | OPTION_MASK_P9_MISC\t\t\t\\\n \t\t\t\t | OPTION_MASK_P9_VECTOR)\n@@ -76,8 +74,6 @@\n \n /* Flags that need to be turned off if -mno-power9-vector.  */\n #define OTHER_P9_VECTOR_MASKS\t(OPTION_MASK_FLOAT128_HW\t\t\\\n-\t\t\t\t | OPTION_MASK_P9_DFORM_SCALAR\t\t\\\n-\t\t\t\t | OPTION_MASK_P9_DFORM_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_P9_MINMAX)\n \n /* Flags that need to be turned off if -mno-power8-vector.  */\n@@ -127,8 +123,6 @@\n \t\t\t\t | OPTION_MASK_NO_UPDATE\t\t\\\n \t\t\t\t | OPTION_MASK_P8_FUSION\t\t\\\n \t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n-\t\t\t\t | OPTION_MASK_P9_DFORM_SCALAR\t\t\\\n-\t\t\t\t | OPTION_MASK_P9_DFORM_VECTOR\t\t\\\n \t\t\t\t | OPTION_MASK_P9_FUSION\t\t\\\n \t\t\t\t | OPTION_MASK_P9_MINMAX\t\t\\\n \t\t\t\t | OPTION_MASK_P9_MISC\t\t\t\\"}, {"sha": "9ff73ec4213b8ab62b99cfddcfbaa2c774648a8c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 16, "deletions": 102, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -2926,16 +2926,15 @@ rs6000_setup_reg_addr_masks (void)\n \t      && (rc == RELOAD_REG_GPR\n \t\t  || ((msize == 8 || m2 == SFmode)\n \t\t      && (rc == RELOAD_REG_FPR\n-\t\t\t  || (rc == RELOAD_REG_VMX\n-\t\t\t      && TARGET_P9_DFORM_SCALAR)))))\n+\t\t\t  || (rc == RELOAD_REG_VMX && TARGET_P9_VECTOR)))))\n \t    addr_mask |= RELOAD_REG_OFFSET;\n \n \t  /* VSX registers can do REG+OFFSET addresssing if ISA 3.0\n \t     instructions are enabled.  The offset for 128-bit VSX registers is\n \t     only 12-bits.  While GPRs can handle the full offset range, VSX\n \t     registers can only handle the restricted range.  */\n \t  else if ((addr_mask != 0) && !indexed_only_p\n-\t\t   && msize == 16 && TARGET_P9_DFORM_VECTOR\n+\t\t   && msize == 16 && TARGET_P9_VECTOR\n \t\t   && (ALTIVEC_OR_VSX_VECTOR_MODE (m2)\n \t\t       || (m2 == TImode && TARGET_VSX)))\n \t    {\n@@ -3255,13 +3254,14 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \trs6000_constraints[RS6000_CONSTRAINT_wp] = VSX_REGS;\t/* TFmode  */\n     }\n \n-  /* Support for new D-form instructions.  */\n-  if (TARGET_P9_DFORM_SCALAR)\n-    rs6000_constraints[RS6000_CONSTRAINT_wb] = ALTIVEC_REGS;\n-\n-  /* Support for ISA 3.0 (power9) vectors.  */\n   if (TARGET_P9_VECTOR)\n-    rs6000_constraints[RS6000_CONSTRAINT_wo] = VSX_REGS;\n+    {\n+      /* Support for new D-form instructions.  */\n+      rs6000_constraints[RS6000_CONSTRAINT_wb] = ALTIVEC_REGS;\n+\n+      /* Support for ISA 3.0 (power9) vectors.  */\n+      rs6000_constraints[RS6000_CONSTRAINT_wo] = VSX_REGS;\n+    }\n \n   /* Support for new direct moves (ISA 3.0 + 64bit).  */\n   if (TARGET_DIRECT_MOVE_128)\n@@ -3542,7 +3542,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \t  reg_addr[xmode].fusion_addis_ld[rtype] = addis_insns[i].load;\n \t  reg_addr[xmode].fusion_addis_st[rtype] = addis_insns[i].store;\n \n-\t  if (rtype == RELOAD_REG_FPR && TARGET_P9_DFORM_SCALAR)\n+\t  if (rtype == RELOAD_REG_FPR && TARGET_P9_VECTOR)\n \t    {\n \t      reg_addr[xmode].fusion_addis_ld[RELOAD_REG_VMX]\n \t\t= addis_insns[i].load;\n@@ -4239,8 +4239,7 @@ rs6000_option_override_internal (bool global_init_p)\n \n   /* For the newer switches (vsx, dfp, etc.) set some of the older options,\n      unless the user explicitly used the -mno-<option> to disable the code.  */\n-  if (TARGET_P9_VECTOR || TARGET_MODULO || TARGET_P9_DFORM_SCALAR\n-      || TARGET_P9_DFORM_VECTOR || TARGET_P9_DFORM_BOTH > 0)\n+  if (TARGET_P9_VECTOR || TARGET_MODULO || TARGET_P9_MISC)\n     rs6000_isa_flags |= (ISA_3_0_MASKS_SERVER & ~ignore_masks);\n   else if (TARGET_P9_MINMAX)\n     {\n@@ -4467,81 +4466,6 @@ rs6000_option_override_internal (bool global_init_p)\n \t}\n     }\n \n-  /* -mpower9-dform turns on both -mpower9-dform-scalar and\n-      -mpower9-dform-vector.  */\n-  if (TARGET_P9_DFORM_BOTH > 0)\n-    {\n-      if (!(rs6000_isa_flags_explicit & OPTION_MASK_P9_DFORM_VECTOR))\n-\trs6000_isa_flags |= OPTION_MASK_P9_DFORM_VECTOR;\n-\n-      if (!(rs6000_isa_flags_explicit & OPTION_MASK_P9_DFORM_SCALAR))\n-\trs6000_isa_flags |= OPTION_MASK_P9_DFORM_SCALAR;\n-    }\n-  else if (TARGET_P9_DFORM_BOTH == 0)\n-    {\n-      if (!(rs6000_isa_flags_explicit & OPTION_MASK_P9_DFORM_VECTOR))\n-\trs6000_isa_flags &= ~OPTION_MASK_P9_DFORM_VECTOR;\n-\n-      if (!(rs6000_isa_flags_explicit & OPTION_MASK_P9_DFORM_SCALAR))\n-\trs6000_isa_flags &= ~OPTION_MASK_P9_DFORM_SCALAR;\n-    }\n-\n-  /* ISA 3.0 D-form instructions require p9-vector and upper-regs.  */\n-  if ((TARGET_P9_DFORM_SCALAR || TARGET_P9_DFORM_VECTOR) && !TARGET_P9_VECTOR)\n-    {\n-      /* We prefer to not mention undocumented options in\n-\t error messages.  However, if users have managed to select\n-\t power9-dform without selecting power9-vector, they\n-\t already know about undocumented flags.  */\n-      if ((rs6000_isa_flags_explicit & OPTION_MASK_P9_VECTOR)\n-\t  && (rs6000_isa_flags_explicit & (OPTION_MASK_P9_DFORM_SCALAR\n-\t\t\t\t\t   | OPTION_MASK_P9_DFORM_VECTOR)))\n-\terror (\"%qs requires %qs\", \"-mpower9-dform\", \"-mpower9-vector\");\n-      else if (rs6000_isa_flags_explicit & OPTION_MASK_P9_VECTOR)\n-\t{\n-\t  rs6000_isa_flags &=\n-\t    ~(OPTION_MASK_P9_DFORM_SCALAR | OPTION_MASK_P9_DFORM_VECTOR);\n-\t  rs6000_isa_flags_explicit |=\n-\t    (OPTION_MASK_P9_DFORM_SCALAR | OPTION_MASK_P9_DFORM_VECTOR);\n-\t}\n-      else\n-\t{\n-\t  /* We know that OPTION_MASK_P9_VECTOR is not explicit and\n-\t     OPTION_MASK_P9_DFORM_SCALAR or OPTION_MASK_P9_DORM_VECTOR\n-\t     may be explicit.  */\n-\t  rs6000_isa_flags |= OPTION_MASK_P9_VECTOR;\n-\t  rs6000_isa_flags_explicit |= OPTION_MASK_P9_VECTOR;\n-\t}\n-    }\n-\n-  if ((TARGET_P9_DFORM_SCALAR || TARGET_P9_DFORM_VECTOR)\n-      && !TARGET_DIRECT_MOVE)\n-    {\n-      /* We prefer to not mention undocumented options in\n-\t error messages.  However, if users have managed to select\n-\t power9-dform without selecting direct-move, they\n-\t already know about undocumented flags.  */\n-      if ((rs6000_isa_flags_explicit & OPTION_MASK_DIRECT_MOVE)\n-\t  && ((rs6000_isa_flags_explicit & OPTION_MASK_P9_DFORM_VECTOR) ||\n-\t      (rs6000_isa_flags_explicit & OPTION_MASK_P9_DFORM_SCALAR) ||\n-\t      (TARGET_P9_DFORM_BOTH == 1)))\n-\terror (\"%qs, %qs, %qs require %qs\", \"-mpower9-dform\",\n-\t       \"-mpower9-dform-vector\", \"-mpower9-dform-scalar\",\n-\t       \"-mdirect-move\");\n-      else if ((rs6000_isa_flags_explicit & OPTION_MASK_DIRECT_MOVE) == 0)\n-\t{\n-\t  rs6000_isa_flags |= OPTION_MASK_DIRECT_MOVE;\n-\t  rs6000_isa_flags_explicit |= OPTION_MASK_DIRECT_MOVE;\n-\t}\n-      else\n-\t{\n-\t  rs6000_isa_flags &=\n-\t    ~(OPTION_MASK_P9_DFORM_SCALAR | OPTION_MASK_P9_DFORM_VECTOR);\n-\t  rs6000_isa_flags_explicit |=\n-\t    (OPTION_MASK_P9_DFORM_SCALAR | OPTION_MASK_P9_DFORM_VECTOR);\n-\t}\n-    }\n-\n   /* Set -mallow-movmisalign to explicitly on if we have full ISA 2.07\n      support. If we only have ISA 2.06 support, and the user did not specify\n      the switch, leave it set to -1 so the movmisalign patterns are enabled,\n@@ -27386,7 +27310,7 @@ rs6000_emit_prologue (void)\n \n \t    savereg = gen_rtx_REG (V4SImode, i);\n \n-\t    if (TARGET_P9_DFORM_VECTOR && quad_address_offset_p (offset))\n+\t    if (TARGET_P9_VECTOR && quad_address_offset_p (offset))\n \t      {\n \t\tmem = gen_frame_mem (V4SImode,\n \t\t\t\t     gen_rtx_PLUS (Pmode, frame_reg_rtx,\n@@ -28077,7 +28001,7 @@ rs6000_emit_epilogue (int sibcall)\n \t\t  = (info->altivec_save_offset + frame_off\n \t\t     + 16 * (i - info->first_altivec_reg_save));\n \n-\t\tif (TARGET_P9_DFORM_VECTOR && quad_address_offset_p (offset))\n+\t\tif (TARGET_P9_VECTOR && quad_address_offset_p (offset))\n \t\t  {\n \t\t    mem = gen_frame_mem (V4SImode,\n \t\t\t\t\t gen_rtx_PLUS (Pmode, frame_reg_rtx,\n@@ -28293,7 +28217,7 @@ rs6000_emit_epilogue (int sibcall)\n \t\t  = (info->altivec_save_offset + frame_off\n \t\t     + 16 * (i - info->first_altivec_reg_save));\n \n-\t\tif (TARGET_P9_DFORM_VECTOR && quad_address_offset_p (offset))\n+\t\tif (TARGET_P9_VECTOR && quad_address_offset_p (offset))\n \t\t  {\n \t\t    mem = gen_frame_mem (V4SImode,\n \t\t\t\t\t gen_rtx_PLUS (Pmode, frame_reg_rtx,\n@@ -36155,8 +36079,6 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n   { \"power8-fusion\",\t\tOPTION_MASK_P8_FUSION,\t\tfalse, true  },\n   { \"power8-fusion-sign\",\tOPTION_MASK_P8_FUSION_SIGN,\tfalse, true  },\n   { \"power8-vector\",\t\tOPTION_MASK_P8_VECTOR,\t\tfalse, true  },\n-  { \"power9-dform-scalar\",\tOPTION_MASK_P9_DFORM_SCALAR,\tfalse, true  },\n-  { \"power9-dform-vector\",\tOPTION_MASK_P9_DFORM_VECTOR,\tfalse, true  },\n   { \"power9-fusion\",\t\tOPTION_MASK_P9_FUSION,\t\tfalse, true  },\n   { \"power9-minmax\",\t\tOPTION_MASK_P9_MINMAX,\t\tfalse, true  },\n   { \"power9-misc\",\t\tOPTION_MASK_P9_MISC,\t\tfalse, true  },\n@@ -36944,14 +36866,6 @@ rs6000_disable_incompatible_switches (void)\n \t}\n     }\n \n-  if (!TARGET_P9_VECTOR\n-      && (rs6000_isa_flags_explicit & OPTION_MASK_P9_VECTOR) != 0\n-      && TARGET_P9_DFORM_BOTH > 0)\n-    {\n-      error (\"%qs turns off %qs\", \"-mno-power9-vector\", \"-mpower9-dform\");\n-      TARGET_P9_DFORM_BOTH = 0;\n-    }\n-\n   return ignore_masks;\n }\n \n@@ -38691,7 +38605,7 @@ emit_fusion_p9_load (rtx reg, rtx mem, rtx tmp_reg)\n       else\n \tgcc_unreachable ();\n     }\n-  else if (ALTIVEC_REGNO_P (r) && TARGET_P9_DFORM_SCALAR)\n+  else if (ALTIVEC_REGNO_P (r) && TARGET_P9_VECTOR)\n     {\n       if (mode == SFmode)\n \tload_string = \"lxssp\";\n@@ -38778,7 +38692,7 @@ emit_fusion_p9_store (rtx mem, rtx reg, rtx tmp_reg)\n       else\n \tgcc_unreachable ();\n     }\n-  else if (ALTIVEC_REGNO_P (r) && TARGET_P9_DFORM_SCALAR)\n+  else if (ALTIVEC_REGNO_P (r) && TARGET_P9_VECTOR)\n     {\n       if (mode == SFmode)\n \tstore_string = \"stxssp\";"}, {"sha": "b31166b4a0fbdda44895771d20319bf846af4177", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -312,15 +312,11 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #undef  TARGET_MODULO\n #undef  TARGET_P9_VECTOR\n #undef  TARGET_P9_MINMAX\n-#undef  TARGET_P9_DFORM_SCALAR\n-#undef  TARGET_P9_DFORM_VECTOR\n #undef  TARGET_P9_MISC\n #define TARGET_FLOAT128_HW 0\n #define TARGET_MODULO 0\n #define TARGET_P9_VECTOR 0\n #define TARGET_P9_MINMAX 0\n-#define TARGET_P9_DFORM_SCALAR 0\n-#define TARGET_P9_DFORM_VECTOR 0\n #define TARGET_P9_MISC 0\n #endif\n "}, {"sha": "5ad13d724e4daa7ed66d74f760dfb6d80c4af7b8", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -13965,7 +13965,7 @@\n \t(match_operand:ALTIVEC_DFORM 2 \"simple_offsettable_mem_operand\"))\n    (set (match_operand:ALTIVEC_DFORM 3 \"altivec_register_operand\")\n \t(match_dup 1))]\n-  \"TARGET_VSX && !TARGET_P9_DFORM_SCALAR && peep2_reg_dead_p (2, operands[1])\"\n+  \"TARGET_VSX && !TARGET_P9_VECTOR && peep2_reg_dead_p (2, operands[1])\"\n   [(set (match_dup 0)\n \t(match_dup 4))\n    (set (match_dup 3)\n@@ -14001,7 +14001,7 @@\n \t(match_operand:ALTIVEC_DFORM 2 \"altivec_register_operand\"))\n    (set (match_operand:ALTIVEC_DFORM 3 \"simple_offsettable_mem_operand\")\n \t(match_dup 1))]\n-  \"TARGET_VSX && !TARGET_P9_DFORM_SCALAR && peep2_reg_dead_p (2, operands[1])\"\n+  \"TARGET_VSX && !TARGET_P9_VECTOR && peep2_reg_dead_p (2, operands[1])\"\n   [(set (match_dup 0)\n \t(match_dup 4))\n    (set (match_dup 5)"}, {"sha": "280ce49d6b1565daa6b23e6c1d8bafa69f2d575a", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -550,18 +550,6 @@ mpower9-vector\n Target Undocumented Report Mask(P9_VECTOR) Var(rs6000_isa_flags)\n Use vector instructions added in ISA 3.0.\n \n-mpower9-dform-scalar\n-Target Undocumented Mask(P9_DFORM_SCALAR) Var(rs6000_isa_flags)\n-Use scalar register+offset memory instructions added in ISA 3.0.\n-\n-mpower9-dform-vector\n-Target Undocumented Mask(P9_DFORM_VECTOR) Var(rs6000_isa_flags)\n-Use vector register+offset memory instructions added in ISA 3.0.\n-\n-mpower9-dform\n-Target Undocumented Report Var(TARGET_P9_DFORM_BOTH) Init(-1) Save\n-Use register+offset memory instructions added in ISA 3.0.\n-\n mpower9-minmax\n Target Undocumented Mask(P9_MINMAX) Var(rs6000_isa_flags)\n Use the new min/max instructions defined in ISA 3.0."}, {"sha": "fac39230fd6508933c2202d7a4be1ab0a10ea9c0", "filename": "gcc/testsuite/gcc.target/powerpc/dform-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdform-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdform-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdform-1.c?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-mcpu=power9 -mpower9-dform -O2\" } */\n+/* { dg-options \"-mpower9-vector -O2\" } */\n \n #ifndef TYPE\n #define TYPE double"}, {"sha": "994733071e7bf16a5ce9b306a953d2e4de971dcb", "filename": "gcc/testsuite/gcc.target/powerpc/dform-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdform-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdform-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdform-2.c?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-mcpu=power9 -mpower9-dform -O2\" } */\n+/* { dg-options \"-mpower9-vector -O2\" } */\n \n #ifndef TYPE\n #define TYPE float"}, {"sha": "c66cccce922c51dfdbccf80377b14c84f8f806eb", "filename": "gcc/testsuite/gcc.target/powerpc/dform-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdform-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdform-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdform-3.c?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-mcpu=power9 -mpower9-dform -O2\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n #ifndef TYPE\n #define TYPE vector double"}, {"sha": "52e2295bbd2e4dea852738d9a9362a8f6c577d27", "filename": "gcc/testsuite/gcc.target/powerpc/pr71656-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71656-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71656-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71656-1.c?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -1,8 +1,7 @@\n /* Test for reload ICE arising from POWER9 Vector Dform code generation.  */\n /* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-O1 -mcpu=power9 -mpower9-dform-vector\" } */\n+/* { dg-options \"-O1 -mpower9-vector\" } */\n \n typedef __attribute__((altivec(vector__))) int type_t;\n type_t"}, {"sha": "c2a054f085fb479631e965c6f08e8e1b79b8a944", "filename": "gcc/testsuite/gcc.target/powerpc/pr71656-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71656-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71656-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr71656-2.c?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -1,8 +1,7 @@\n /* Test for reload ICE arising from POWER9 Vector Dform code generation.  */\n /* { dg-do compile } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-O3 -mcpu=power9 -mpower9-dform-vector -funroll-loops -fno-aggressive-loop-optimizations\" } */\n+/* { dg-options \"-O3 -mpower9-vector -funroll-loops -fno-aggressive-loop-optimizations\" } */\n \n typedef double vec[3];\n struct vec_t"}, {"sha": "63fa6c672a174301e57cf81b934f3314e3876ef9", "filename": "gcc/testsuite/gcc.target/powerpc/pr80098-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-1.c?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -1,9 +1,8 @@\n /* { dg-do compile { target { powerpc64*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mcpu=power9 -mno-power9-vector -mpower9-minmax -mpower9-dform\" } */\n+/* { dg-options \"-mcpu=power9 -mno-power9-vector -mpower9-minmax\" } */\n \n int i;\n \n /* { dg-error \"'-mno-power9-vector' turns off '-mpower9-minmax'\" \"PR80098\" { target *-*-* } 0 } */\n-/* { dg-error \"'-mno-power9-vector' turns off '-mpower9-dform'\"  \"PR80098\" { target *-*-* } 0 } */"}, {"sha": "a25d617ae8b2a4c195bc5aee31a54d9d1125da1d", "filename": "gcc/testsuite/gcc.target/powerpc/pr80103-1.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80103-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1e5f32c2d861ff627397815c6536c7ea35b897/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80103-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80103-1.c?ref=db1e5f32c2d861ff627397815c6536c7ea35b897", "patch": "@@ -1,13 +1,12 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n-/* { dg-options \"-mpower9-dform-vector -mno-direct-move\" } */\n+/* { dg-options \"-mpower9-minmax -mno-direct-move\" } */\n /* { dg-excess-errors \"expect error due to conflicting target options\" } */\n /* Since the error message is not associated with a particular line\n    number, we cannot use the dg-error directive and cannot specify a\n    regexp to describe the expected error message.  The expected error\n-   message is: \"-mpower9-dform, -mpower9-dform-vector,\n-                -mpower9-dform-scalar require -mdirect-move\" */\n+   message is: \"-mpower9-minmax requires -mdirect-move\" */\n \n int a;\n void b (__attribute__ ((__vector_size__ (16))) char c)"}]}