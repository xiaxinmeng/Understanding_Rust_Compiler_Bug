{"sha": "7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgxMGM0ZWJmYzRlY2FmNWVmZDUzMmQwNWFmNmEzZWQ3NWIxZTZkYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-10-13T13:17:59Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-10-13T13:17:59Z"}, "message": "Add a \"compact\" mode to print_rtx_function\n\ngcc/ChangeLog:\n\t* function-tests.c (selftest::test_expansion_to_rtl): Add \"true\"\n\tfor new \"compact\" param of print_rtx_function.  Check for \"cinsn\"\n\trather than \"insn\".\n\t* print-rtl-function.c (flag_compact): New decl.\n\t(print_rtx_function): Add param \"compact\" and use it to set\n\tflag_compact, adding a description of the effect to the leading\n\tcomment, and updating the example output.\n\t* print-rtl.c (flag_compact): New variable.\n\t(print_rtx_operand_code_0): Omit the JUMP_LABEL reference in compact\n\tmode.\n\t(print_rtx_operand_code_i): When printing source locations, wrap\n\txloc.file in quotes.  Don't print INSN_CODEs in compact mode.\n\t(print_rtx_operand_code_r): Don't print regnos for hard regs and\n\tvirtuals in compact mode.\n\t(print_rtx_operand_code_u): Don't print insn UIDs in compact mode,\n\tapart from in LABEL_REFs.\n\t(print_rtx_operand): In case 'w', don't print in hex in compact mode.\n\tDon't print basic block ids in compact mode.\n\t(print_rtx):  In compact mode, prefix the code of insns with \"c\",\n\tonly print the INSN_UID of CODE_LABELs, and omit their LABEL_NUSES.\n\t* print-rtl.h (print_rtx_function): Add \"compact\" param.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/i386/vararg-loc.c: Update for quoting of xloc.file\n\tin INSN_LOCATION.\n\nFrom-SVN: r241120", "tree": {"sha": "de1bdc49e4b5ea7c8cb945574137a3e85c85f946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de1bdc49e4b5ea7c8cb945574137a3e85c85f946"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "950e6f418ae2c2a110bc72520deba87289def55e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950e6f418ae2c2a110bc72520deba87289def55e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/950e6f418ae2c2a110bc72520deba87289def55e"}], "stats": {"total": 190, "additions": 136, "deletions": 54}, "files": [{"sha": "ced58977447ef6a96fe266fd21d2f7ded3260412", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc", "patch": "@@ -1,3 +1,27 @@\n+2016-10-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* function-tests.c (selftest::test_expansion_to_rtl): Add \"true\"\n+\tfor new \"compact\" param of print_rtx_function.  Check for \"cinsn\"\n+\trather than \"insn\".\n+\t* print-rtl-function.c (flag_compact): New decl.\n+\t(print_rtx_function): Add param \"compact\" and use it to set\n+\tflag_compact, adding a description of the effect to the leading\n+\tcomment, and updating the example output.\n+\t* print-rtl.c (flag_compact): New variable.\n+\t(print_rtx_operand_code_0): Omit the JUMP_LABEL reference in compact\n+\tmode.\n+\t(print_rtx_operand_code_i): When printing source locations, wrap\n+\txloc.file in quotes.  Don't print INSN_CODEs in compact mode.\n+\t(print_rtx_operand_code_r): Don't print regnos for hard regs and\n+\tvirtuals in compact mode.\n+\t(print_rtx_operand_code_u): Don't print insn UIDs in compact mode,\n+\tapart from in LABEL_REFs.\n+\t(print_rtx_operand): In case 'w', don't print in hex in compact mode.\n+\tDon't print basic block ids in compact mode.\n+\t(print_rtx):  In compact mode, prefix the code of insns with \"c\",\n+\tonly print the INSN_UID of CODE_LABELs, and omit their LABEL_NUSES.\n+\t* print-rtl.h (print_rtx_function): Add \"compact\" param.\n+\n 2016-10-13  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.h (TARGET_VFP): Delete."}, {"sha": "b0c44cf2cdfb10dcbf927de0593a4a5349457cb4", "filename": "gcc/function-tests.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2Ffunction-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2Ffunction-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction-tests.c?ref=7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc", "patch": "@@ -648,15 +648,15 @@ test_expansion_to_rtl ()\n   /* Verify that print_rtl_function is sane.  */\n   named_temp_file tmp_out (\".rtl\");\n   FILE *outfile = fopen (tmp_out.get_filename (), \"w\");\n-  print_rtx_function (outfile, fun);\n+  print_rtx_function (outfile, fun, true);\n   fclose (outfile);\n \n   char *dump = read_file (SELFTEST_LOCATION, tmp_out.get_filename ());\n   ASSERT_STR_CONTAINS (dump, \"(function \\\"test_fn\\\"\\n\");\n   ASSERT_STR_CONTAINS (dump, \"  (insn-chain\\n\");\n   ASSERT_STR_CONTAINS (dump, \"    (block 2\\n\");\n   ASSERT_STR_CONTAINS (dump, \"      (edge-from entry (flags \\\"FALLTHRU\\\"))\\n\");\n-  ASSERT_STR_CONTAINS (dump, \"      (insn \"); /* ...etc.  */\n+  ASSERT_STR_CONTAINS (dump, \"      (cinsn \"); /* ...etc.  */\n   ASSERT_STR_CONTAINS (dump, \"      (edge-to exit (flags \\\"FALLTHRU\\\"))\\n\");\n   ASSERT_STR_CONTAINS (dump, \"    ) ;; block 2\\n\");\n   ASSERT_STR_CONTAINS (dump, \"  ) ;; insn-chain\\n\");"}, {"sha": "90a0ff75620ee236567efc0912f36f3899a8f622", "filename": "gcc/print-rtl-function.c", "status": "modified", "additions": 44, "deletions": 32, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2Fprint-rtl-function.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2Fprint-rtl-function.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl-function.c?ref=7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc", "patch": "@@ -33,6 +33,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"emit-rtl.h\"\n \n+extern bool flag_compact;\n+\n /* Print an \"(edge-from)\" or \"(edge-to)\" directive describing E\n    to OUTFILE.  */\n \n@@ -126,55 +128,63 @@ can_have_basic_block_p (const rtx_insn *insn)\n    the basic blocks of insns in the chain, wrapping those that are within\n    blocks within \"(block)\" directives.\n \n-   Example output:\n+   If COMPACT, then instructions are printed in a compact form:\n+   - INSN_UIDs are omitted, except for jumps and CODE_LABELs,\n+   - INSN_CODEs are omitted,\n+   - register numbers are omitted for hard and virtual regs\n+   - insn names are prefixed with \"c\" (e.g. \"cinsn\", \"cnote\", etc)\n+\n+   Example output (with COMPACT==true):\n \n    (function \"times_two\"\n      (insn-chain\n-       (note 1 0 4 (nil) NOTE_INSN_DELETED)\n+       (cnote NOTE_INSN_DELETED)\n        (block 2\n \t (edge-from entry (flags \"FALLTHRU\"))\n-\t (note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)\n-\t (insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)\n-\t\t\t     (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])\n-\t\t     (reg:SI 5 di [ i ])) t.c:2 -1\n-\t\t  (nil))\n-\t (note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)\n-\t (insn 6 3 7 2 (set (reg:SI 89)\n-\t\t     (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)\n-\t\t\t     (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])) t.c:3 -1\n-\t\t  (nil))\n-\t (insn 7 6 10 2 (parallel [\n-\t\t\t (set (reg:SI 87 [ _2 ])\n-\t\t\t     (ashift:SI (reg:SI 89)\n-\t\t\t\t (const_int 1 [0x1])))\n-\t\t\t (clobber (reg:CC 17 flags))\n-\t\t     ]) t.c:3 -1\n-\t\t  (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)\n-\t\t\t\t (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])\n-\t\t\t (const_int 1 [0x1]))\n-\t\t     (nil)))\n-\t (insn 10 7 14 2 (set (reg:SI 88 [ <retval> ])\n-\t\t     (reg:SI 87 [ _2 ])) t.c:3 -1\n-\t\t  (nil))\n-\t (insn 14 10 15 2 (set (reg/i:SI 0 ax)\n-\t\t     (reg:SI 88 [ <retval> ])) t.c:4 -1\n-\t\t  (nil))\n-\t (insn 15 14 0 2 (use (reg/i:SI 0 ax)) t.c:4 -1\n-\t\t  (nil))\n+\t (cnote [bb 2] NOTE_INSN_BASIC_BLOCK)\n+\t (cinsn (set (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+\t\t\t       (const_int -4)) [1 i+0 S4 A32])\n+\t\t       (reg:SI di [ i ])) \"t.c\":2\n+\t\t   (nil))\n+\t (cnote NOTE_INSN_FUNCTION_BEG)\n+\t (cinsn (set (reg:SI 89)\n+\t\t       (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+\t\t\t       (const_int -4)) [1 i+0 S4 A32])) \"t.c\":3\n+\t\t   (nil))\n+\t (cinsn (parallel [\n+\t\t\t   (set (reg:SI 87 [ _2 ])\n+\t\t\t       (ashift:SI (reg:SI 89)\n+\t\t\t\t   (const_int 1)))\n+\t\t\t   (clobber (reg:CC flags))\n+\t\t       ]) \"t.c\":3\n+\t\t   (expr_list:REG_EQUAL (ashift:SI (mem/c:SI (plus:DI (reg/f:DI virtual-stack-vars)\n+\t\t\t\t   (const_int -4)) [1 i+0 S4 A32])\n+\t\t\t   (const_int 1))\n+\t\t       (nil)))\n+\t (cinsn (set (reg:SI 88 [ <retval> ])\n+\t\t       (reg:SI 87 [ _2 ])) \"t.c\":3\n+\t\t   (nil))\n+\t (cinsn (set (reg/i:SI ax)\n+\t\t       (reg:SI 88 [ <retval> ])) \"t.c\":4\n+\t\t   (nil))\n+\t (cinsn (use (reg/i:SI ax)) \"t.c\":4\n+\t\t   (nil))\n \t (edge-to exit (flags \"FALLTHRU\"))\n        ) ;; block 2\n      ) ;; insn-chain\n      (crtl\n        (return_rtx\n-\t  (reg/i:SI 0 ax)\n+\t (reg/i:SI ax)\n        ) ;; return_rtx\n      ) ;; crtl\n    ) ;; function \"times_two\"\n */\n \n DEBUG_FUNCTION void\n-print_rtx_function (FILE *outfile, function *fn)\n+print_rtx_function (FILE *outfile, function *fn, bool compact)\n {\n+  flag_compact = compact;\n+\n   tree fdecl = fn->decl;\n \n   const char *dname = lang_hooks.decl_printable_name (fdecl, 2);\n@@ -210,4 +220,6 @@ print_rtx_function (FILE *outfile, function *fn)\n   fprintf (outfile, \"  ) ;; crtl\\n\");\n \n   fprintf (outfile, \") ;; function \\\"%s\\\"\\n\", dname);\n+\n+  flag_compact = false;\n }"}, {"sha": "f114cb4055deaf0302261950bf43e5c9653c18d1", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 57, "deletions": 16, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc", "patch": "@@ -60,6 +60,13 @@ static int indent;\n \n static bool in_call_function_usage;\n \n+/* If true, use compact dump format:\n+   - INSN_UIDs are omitted, except for jumps and CODE_LABELs,\n+   - INSN_CODEs are omitted,\n+   - register numbers are omitted for hard and virtual regs\n+   - insn names are prefixed with \"c\" (e.g. \"cinsn\", \"cnote\", etc).  */\n+bool flag_compact;\n+\n static void print_rtx (const_rtx);\n \n /* String printed at beginning of each RTL when it is dumped.\n@@ -176,7 +183,8 @@ print_rtx_operand_code_0 (const_rtx in_rtx ATTRIBUTE_UNUSED,\n \t  break;\n \t}\n     }\n-  else if (idx == 7 && JUMP_P (in_rtx) && JUMP_LABEL (in_rtx) != NULL)\n+  else if (idx == 7 && JUMP_P (in_rtx) && JUMP_LABEL (in_rtx) != NULL\n+\t   && !flag_compact)\n     {\n       /* Output the JUMP_LABEL reference.  */\n       fprintf (outfile, \"\\n%s%*s -> \", print_rtx_head, indent * 2, \"\");\n@@ -284,7 +292,7 @@ print_rtx_operand_code_i (const_rtx in_rtx, int idx)\n       if (INSN_HAS_LOCATION (in_insn))\n \t{\n \t  expanded_location xloc = insn_location (in_insn);\n-\t  fprintf (outfile, \" %s:%i\", xloc.file, xloc.line);\n+\t  fprintf (outfile, \" \\\"%s\\\":%i\", xloc.file, xloc.line);\n \t}\n #endif\n     }\n@@ -335,6 +343,13 @@ print_rtx_operand_code_i (const_rtx in_rtx, int idx)\n       const char *name;\n       int is_insn = INSN_P (in_rtx);\n \n+      /* Don't print INSN_CODEs in compact mode.  */\n+      if (flag_compact && is_insn && &INSN_CODE (in_rtx) == &XINT (in_rtx, idx))\n+\t{\n+\t  sawclose = 0;\n+\t  return;\n+\t}\n+\n       if (flag_dump_unnumbered\n \t  && (is_insn || NOTE_P (in_rtx)))\n \tfputc ('#', outfile);\n@@ -358,26 +373,28 @@ print_rtx_operand_code_r (const_rtx in_rtx)\n   unsigned int regno = REGNO (in_rtx);\n \n #ifndef GENERATOR_FILE\n+  /* For hard registers and virtuals, always print the\n+     regno, except in compact mode.  */\n+  if (regno <= LAST_VIRTUAL_REGISTER && !flag_compact)\n+    fprintf (outfile, \" %d\", regno);\n   if (regno < FIRST_PSEUDO_REGISTER)\n-    fprintf (outfile, \" %d %s\", regno, reg_names[regno]);\n+    fprintf (outfile, \" %s\", reg_names[regno]);\n   else if (regno <= LAST_VIRTUAL_REGISTER)\n     {\n       if (regno == VIRTUAL_INCOMING_ARGS_REGNUM)\n-\tfprintf (outfile, \" %d virtual-incoming-args\", regno);\n+\tfprintf (outfile, \" virtual-incoming-args\");\n       else if (regno == VIRTUAL_STACK_VARS_REGNUM)\n-\tfprintf (outfile, \" %d virtual-stack-vars\", regno);\n+\tfprintf (outfile, \" virtual-stack-vars\");\n       else if (regno == VIRTUAL_STACK_DYNAMIC_REGNUM)\n-\tfprintf (outfile, \" %d virtual-stack-dynamic\", regno);\n+\tfprintf (outfile, \" virtual-stack-dynamic\");\n       else if (regno == VIRTUAL_OUTGOING_ARGS_REGNUM)\n-\tfprintf (outfile, \" %d virtual-outgoing-args\", regno);\n+\tfprintf (outfile, \" virtual-outgoing-args\");\n       else if (regno == VIRTUAL_CFA_REGNUM)\n-\tfprintf (outfile, \" %d virtual-cfa\", regno);\n+\tfprintf (outfile, \" virtual-cfa\");\n       else if (regno == VIRTUAL_PREFERRED_STACK_BOUNDARY_REGNUM)\n-\tfprintf (outfile, \" %d virtual-preferred-stack-boundary\",\n-\t\t regno);\n+\tfprintf (outfile, \" virtual-preferred-stack-boundary\");\n       else\n-\tfprintf (outfile, \" %d virtual-reg-%d\", regno,\n-\t\t regno-FIRST_VIRTUAL_REGISTER);\n+\tfprintf (outfile, \" virtual-reg-%d\", regno-FIRST_VIRTUAL_REGISTER);\n     }\n   else\n #endif\n@@ -410,6 +427,10 @@ print_rtx_operand_code_r (const_rtx in_rtx)\n static void\n print_rtx_operand_code_u (const_rtx in_rtx, int idx)\n {\n+  /* Don't print insn UIDs in compact mode, apart from in LABEL_REFs.  */\n+  if (flag_compact && GET_CODE (in_rtx) != LABEL_REF)\n+    return;\n+\n   if (XEXP (in_rtx, idx) != NULL)\n     {\n       rtx sub = XEXP (in_rtx, idx);\n@@ -492,7 +513,7 @@ print_rtx_operand (const_rtx in_rtx, int idx)\n       if (! flag_simple)\n \tfprintf (outfile, \" \");\n       fprintf (outfile, HOST_WIDE_INT_PRINT_DEC, XWINT (in_rtx, idx));\n-      if (! flag_simple)\n+      if (! flag_simple && !flag_compact)\n \tfprintf (outfile, \" [\" HOST_WIDE_INT_PRINT_HEX \"]\",\n \t\t (unsigned HOST_WIDE_INT) XWINT (in_rtx, idx));\n       break;\n@@ -533,6 +554,9 @@ print_rtx_operand (const_rtx in_rtx, int idx)\n       break;\n \n     case 'B':\n+      /* Don't print basic block ids in compact mode.  */\n+      if (flag_compact)\n+\tbreak;\n #ifndef GENERATOR_FILE\n       if (XBBDEF (in_rtx, idx))\n \tfprintf (outfile, \" %i\", XBBDEF (in_rtx, idx)->index);\n@@ -575,7 +599,20 @@ print_rtx (const_rtx in_rtx)\n     }\n \n   /* Print name of expression code.  */\n-  if (flag_simple && CONST_INT_P (in_rtx))\n+\n+  /* In compact mode, prefix the code of insns with \"c\",\n+     giving \"cinsn\", \"cnote\" etc.  */\n+  if (flag_compact && is_a <const rtx_insn *, const struct rtx_def> (in_rtx))\n+    {\n+      /* \"ccode_label\" is slightly awkward, so special-case it as\n+\t just \"clabel\".  */\n+      rtx_code code = GET_CODE (in_rtx);\n+      if (code == CODE_LABEL)\n+\tfprintf (outfile, \"(clabel\");\n+      else\n+\tfprintf (outfile, \"(c%s\", GET_RTX_NAME (code));\n+    }\n+  else if (flag_simple && CONST_INT_P (in_rtx))\n     fputc ('(', outfile);\n   else\n     fprintf (outfile, \"(%s\", GET_RTX_NAME (GET_CODE (in_rtx)));\n@@ -639,7 +676,10 @@ print_rtx (const_rtx in_rtx)\n     idx = 5;\n #endif\n \n-  if (INSN_CHAIN_CODE_P (GET_CODE (in_rtx)))\n+  /* For insns, print the INSN_UID.\n+     In compact mode, we only print the INSN_UID of CODE_LABELs.  */\n+  if (INSN_CHAIN_CODE_P (GET_CODE (in_rtx))\n+      && (!flag_compact || GET_CODE (in_rtx) == CODE_LABEL))\n     {\n       if (flag_dump_unnumbered)\n \tfprintf (outfile, \" #\");\n@@ -704,7 +744,8 @@ print_rtx (const_rtx in_rtx)\n #endif\n \n     case CODE_LABEL:\n-      fprintf (outfile, \" [%d uses]\", LABEL_NUSES (in_rtx));\n+      if (!flag_compact)\n+\tfprintf (outfile, \" [%d uses]\", LABEL_NUSES (in_rtx));\n       switch (LABEL_KIND (in_rtx))\n \t{\n \t  case LABEL_NORMAL: break;"}, {"sha": "7a1dcaf440463fa4d1361925be42ac28fa8e19ca", "filename": "gcc/print-rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2Fprint-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2Fprint-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.h?ref=7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc", "patch": "@@ -36,6 +36,6 @@ extern void print_insn (pretty_printer *pp, const rtx_insn *x, int verbose);\n extern void rtl_dump_bb_for_graph (pretty_printer *, basic_block);\n extern const char *str_pattern_slim (const_rtx);\n \n-extern void print_rtx_function (FILE *file, function *fn);\n+extern void print_rtx_function (FILE *file, function *fn, bool compact);\n \n #endif  // GCC_PRINT_RTL_H"}, {"sha": "df9ca38d25cb8c3d757a12774c64e4924e932ad6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc", "patch": "@@ -1,3 +1,8 @@\n+2016-10-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.target/i386/vararg-loc.c: Update for quoting of xloc.file\n+\tin INSN_LOCATION.\n+\n 2016-10-13  Bin Cheng  <bin.cheng@arm.com>\n \n \t* gcc.target/i386/l_fma_float_1.c: Revise test."}, {"sha": "f46ac577e104afaefe41c61ed2d8886b7e92718a", "filename": "gcc/testsuite/gcc.target/i386/vararg-loc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-loc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-loc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvararg-loc.c?ref=7810c4ebfc4ecaf5efd532d05af6a3ed75b1e6dc", "patch": "@@ -22,6 +22,6 @@ f (int a, ...)\t\t\t/* 8.  */\n   return sum;\n }\n \n-/* { dg-final { scan-rtl-dump-not \"vararg-loc\\\\.c:\\[6789\\] \" \"final\" } } */\n-/* { dg-final { scan-rtl-dump \"vararg-loc\\\\.c:18 \" \"final\" } } */\n-/* { dg-final { scan-rtl-dump \"vararg-loc\\\\.c:20 \" \"final\" } } */\n+/* { dg-final { scan-rtl-dump-not \"vararg-loc\\\\.c.:\\[6789\\] \" \"final\" } } */\n+/* { dg-final { scan-rtl-dump \"vararg-loc\\\\.c.:18 \" \"final\" } } */\n+/* { dg-final { scan-rtl-dump \"vararg-loc\\\\.c.:20 \" \"final\" } } */"}]}