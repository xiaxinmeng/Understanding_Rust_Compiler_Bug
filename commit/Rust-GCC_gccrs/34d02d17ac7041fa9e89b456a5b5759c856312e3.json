{"sha": "34d02d17ac7041fa9e89b456a5b5759c856312e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRkMDJkMTdhYzcwNDFmYTllODliNDU2YTViNTc1OWM4NTYzMTJlMw==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2008-02-22T20:16:50Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2008-02-22T20:16:50Z"}, "message": "libgcc.S (__RAMPZ__): Define.\n\n\t* config/avr/libgcc.S (__RAMPZ__): Define.\n\t(__do_copy_data): Add for devices with 128KB code memory.\n\nFrom-SVN: r132555", "tree": {"sha": "8958b7ea45ece356e6722e805a43728669134084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8958b7ea45ece356e6722e805a43728669134084"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34d02d17ac7041fa9e89b456a5b5759c856312e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d02d17ac7041fa9e89b456a5b5759c856312e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34d02d17ac7041fa9e89b456a5b5759c856312e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d02d17ac7041fa9e89b456a5b5759c856312e3/comments", "author": null, "committer": null, "parents": [{"sha": "a4899c012381f6e44797e48a254b2d649747717e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4899c012381f6e44797e48a254b2d649747717e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4899c012381f6e44797e48a254b2d649747717e"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "52921c35dd9008806d0bcd494066cc08e4ca4ba7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d02d17ac7041fa9e89b456a5b5759c856312e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d02d17ac7041fa9e89b456a5b5759c856312e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34d02d17ac7041fa9e89b456a5b5759c856312e3", "patch": "@@ -1,3 +1,8 @@\n+2008-02-22  Anatoly Sokolov <aesok@post.ru>\n+\n+\t* config/avr/libgcc.S (__RAMPZ__): Define.\n+\t(__do_copy_data): Add for devices with 128KB code memory.\n+\n 2008-02-22  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/rs6000/linuxspe.h (SUBSUBTARGET_OVERRIDE_OPTIONS):"}, {"sha": "8fdba55f775caef541c7e1bc932755d6d514083d", "filename": "gcc/config/avr/libgcc.S", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d02d17ac7041fa9e89b456a5b5759c856312e3/gcc%2Fconfig%2Favr%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d02d17ac7041fa9e89b456a5b5759c856312e3/gcc%2Fconfig%2Favr%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Flibgcc.S?ref=34d02d17ac7041fa9e89b456a5b5759c856312e3", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02110-1301, USA.  */\n #define __SREG__ 0x3f\n #define __SP_H__ 0x3e\n #define __SP_L__ 0x3d\n+#define __RAMPZ__ 0x3B\n \n /* Most of the functions here are called directly from avr.md\n    patterns, instead of using the standard libcall mechanisms.\n@@ -686,31 +687,66 @@ __tablejump__:\n \t.endfunc\n #endif /* defined (L_tablejump) */\n \n-/* __do_copy_data is only necessary if there is anything in .data section.\n-   Does not use RAMPZ - crt*.o provides a replacement for >64K devices.  */\n-\n #ifdef L_copy_data\n \t.section .init4,\"ax\",@progbits\n \t.global __do_copy_data\n __do_copy_data:\n+#if defined(__AVR_HAVE_ELPMX__)\n+\tldi\tr17, hi8(__data_end)\n+\tldi\tr26, lo8(__data_start)\n+\tldi\tr27, hi8(__data_start)\n+\tldi\tr30, lo8(__data_load_start)\n+\tldi\tr31, hi8(__data_load_start)\n+\tldi\tr16, hh8(__data_load_start)\n+\tout\t__RAMPZ__, r16\n+\trjmp\t.L__do_copy_data_start\n+.L__do_copy_data_loop:\n+\telpm\tr0, Z+\n+\tst\tX+, r0\n+.L__do_copy_data_start:\n+\tcpi\tr26, lo8(__data_end)\n+\tcpc\tr27, r17\n+\tbrne\t.L__do_copy_data_loop\n+#elif  !defined(__AVR_HAVE_ELPMX__) && defined(__AVR_HAVE_ELPM__)\n+\tldi\tr17, hi8(__data_end)\n+\tldi\tr26, lo8(__data_start)\n+\tldi\tr27, hi8(__data_start)\n+\tldi\tr30, lo8(__data_load_start)\n+\tldi\tr31, hi8(__data_load_start)\n+\tldi\tr16, hh8(__data_load_start - 0x10000)\n+.L__do_copy_data_carry:\n+\tinc\tr16\n+\tout\t__RAMPZ__, r16\n+\trjmp\t.L__do_copy_data_start\n+.L__do_copy_data_loop:\n+\telpm\n+\tst\tX+, r0\n+\tadiw\tr30, 1\n+\tbrcs\t.L__do_copy_data_carry\n+.L__do_copy_data_start:\n+\tcpi\tr26, lo8(__data_end)\n+\tcpc\tr27, r17\n+\tbrne\t.L__do_copy_data_loop\n+#elif !defined(__AVR_HAVE_ELPMX__) && !defined(__AVR_HAVE_ELPM__)\n \tldi\tr17, hi8(__data_end)\n \tldi\tr26, lo8(__data_start)\n \tldi\tr27, hi8(__data_start)\n \tldi\tr30, lo8(__data_load_start)\n \tldi\tr31, hi8(__data_load_start)\n-\trjmp\t.do_copy_data_start\n-.do_copy_data_loop:\n+\trjmp\t.L__do_copy_data_start\n+.L__do_copy_data_loop:\n #if defined (__AVR_HAVE_LPMX__)\n \tlpm\tr0, Z+\n #else\n \tlpm\n \tadiw\tr30, 1\n #endif\n \tst\tX+, r0\n-.do_copy_data_start:\n+.L__do_copy_data_start:\n \tcpi\tr26, lo8(__data_end)\n \tcpc\tr27, r17\n-\tbrne\t.do_copy_data_loop\n+\tbrne\t.L__do_copy_data_loop\n+#endif /* !defined(__AVR_HAVE_ELPMX__) && !defined(__AVR_HAVE_ELPM__) */\n #endif /* L_copy_data */\n \n /* __do_clear_bss is only necessary if there is anything in .bss section.  */"}]}