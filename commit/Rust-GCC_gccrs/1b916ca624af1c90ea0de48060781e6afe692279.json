{"sha": "1b916ca624af1c90ea0de48060781e6afe692279", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI5MTZjYTYyNGFmMWM5MGVhMGRlNDgwNjA3ODFlNmFmZTY5MjI3OQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-06-21T10:22:19Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-06-21T10:22:19Z"}, "message": "gcc_update (gcc/config/avr/avr-tables.opt): New dependencies.\n\ncontrib:\n\t* gcc_update (gcc/config/avr/avr-tables.opt): New dependencies.\n\ngcc:\n\t* config/avr/avr-mcus.def, config/avr/genopt.sh: New files.\n\t* config/avr/avr-tables.opt: New file (generated).\n\t* config.gcc (avr-*-*): Use avr/avr-tables.opt.\n\t* config/avr/avr-devices.c (avr_mcu_types): Move contents to\n\tavr-mcus.def.\n\t* config/avr/avr.c (avr_help, TARGET_HELP): Remove.\n\t(avr_option_override): Don't process -mmcu= argument here.  Set\n\tavr_current_device using avr_mcu_index.\n\t(avr_file_start): Use avr_current_device->name instead of\n\tavr_mcu_name.\n\t* config/avr/avr.opt (mmcu=): Use Enum.\n\t* config/avr/t-avr (avr-devices.o): Update dependencies.\n\t($(srcdir)/config/avr/avr-tables.opt): New.\n\t* target.def (help): Remove.\n\t* doc/tm.texi.in (TARGET_HELP): Remove.\n\t* doc/tm.texi: Regenerate.\n\t* opts.c: Don't include target.h.\n\t(common_handle_option): Don't call targetm.help.\n\t* system.h (TARGET_HELP): Poison.\n\t* Makefile.in (opts.o): Update dependencies.\n\nFrom-SVN: r175248", "tree": {"sha": "69b7b9e23ad7eb330dc9b8839efd29d99552f1ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69b7b9e23ad7eb330dc9b8839efd29d99552f1ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b916ca624af1c90ea0de48060781e6afe692279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b916ca624af1c90ea0de48060781e6afe692279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b916ca624af1c90ea0de48060781e6afe692279", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b916ca624af1c90ea0de48060781e6afe692279/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fce37f711ac956692e51040468d8825bf43c03f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fce37f711ac956692e51040468d8825bf43c03f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fce37f711ac956692e51040468d8825bf43c03f4"}], "stats": {"total": 1108, "additions": 839, "deletions": 269}, "files": [{"sha": "f01d57651d560fd3f9f6f1b309159dd09e2ec285", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -1,3 +1,7 @@\n+2011-06-21  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc_update (gcc/config/avr/avr-tables.opt): New dependencies.\n+\n 2011-05-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc_update (gcc/config/arm/arm-tables.opt): Also depend on"}, {"sha": "3eba6c61d8a7650561da746c9fb660a2a69981e2", "filename": "contrib/gcc_update", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/contrib%2Fgcc_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/contrib%2Fgcc_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc_update?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -81,6 +81,7 @@ gcc/config.in: gcc/cstamp-h.in\n gcc/fixinc/fixincl.x: gcc/fixinc/fixincl.tpl gcc/fixinc/inclhack.def\n gcc/config/arm/arm-tune.md: gcc/config/arm/arm-cores.def gcc/config/arm/gentune.sh\n gcc/config/arm/arm-tables.opt: gcc/config/arm/arm-arches.def gcc/config/arm/arm-cores.def gcc/config/arm/arm-fpus.def gcc/config/arm/genopt.sh\n+gcc/config/avr/avr-tables.opt: gcc/config/avr/avr-mcus.def gcc/config/avr/genopt.sh\n gcc/config/m68k/m68k-tables.opt: gcc/config/m68k/m68k-devices.def gcc/config/m68k/m68k-isas.def gcc/config/m68k/m68k-microarchs.def gcc/config/m68k/genopt.sh\n gcc/config/mips/mips-tables.opt: gcc/config/mips/mips-cpus.def gcc/config/mips/genopt.sh\n gcc/config/rs6000/rs6000-tables.opt: gcc/config/rs6000/rs6000-cpus.def gcc/config/rs6000/genopt.sh"}, {"sha": "60e53955f0a0b39aeeffa8df38736b398422bb9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -1,3 +1,26 @@\n+2011-06-21  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/avr/avr-mcus.def, config/avr/genopt.sh: New files.\n+\t* config/avr/avr-tables.opt: New file (generated).\n+\t* config.gcc (avr-*-*): Use avr/avr-tables.opt.\n+\t* config/avr/avr-devices.c (avr_mcu_types): Move contents to\n+\tavr-mcus.def.\n+\t* config/avr/avr.c (avr_help, TARGET_HELP): Remove.\n+\t(avr_option_override): Don't process -mmcu= argument here.  Set\n+\tavr_current_device using avr_mcu_index.\n+\t(avr_file_start): Use avr_current_device->name instead of\n+\tavr_mcu_name.\n+\t* config/avr/avr.opt (mmcu=): Use Enum.\n+\t* config/avr/t-avr (avr-devices.o): Update dependencies.\n+\t($(srcdir)/config/avr/avr-tables.opt): New.\n+\t* target.def (help): Remove.\n+\t* doc/tm.texi.in (TARGET_HELP): Remove.\n+\t* doc/tm.texi: Regenerate.\n+\t* opts.c: Don't include target.h.\n+\t(common_handle_option): Don't call targetm.help.\n+\t* system.h (TARGET_HELP): Poison.\n+\t* Makefile.in (opts.o): Update dependencies.\n+\n 2011-06-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/usegld.h: New file."}, {"sha": "1bb67477d7c7ba1b9f3754171a170c92917dab7e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -2850,7 +2850,7 @@ diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    version.h $(INPUT_H) intl.h $(DIAGNOSTIC_H) diagnostic.def\n opts.o : opts.c $(OPTS_H) $(OPTIONS_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TM_H) $(RTL_H) \\\n-   $(DIAGNOSTIC_H) $(INSN_ATTR_H) intl.h $(TARGET_H) $(COMMON_TARGET_H) \\\n+   $(DIAGNOSTIC_H) $(INSN_ATTR_H) intl.h $(COMMON_TARGET_H) \\\n    $(FLAGS_H) $(PARAMS_H) opts-diagnostic.h\n opts-global.o : opts-global.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(DIAGNOSTIC_H) $(OPTS_H) $(FLAGS_H) $(GGC_H) $(TREE_H) langhooks.h \\"}, {"sha": "f5037b3cba45739052cf3536c85528a82a67d3d9", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -318,6 +318,7 @@ avr-*-*)\n \tcpu_type=avr\n \tc_target_objs=\"avr-c.o\"\n \tcxx_target_objs=\"avr-c.o\"\n+\textra_options=\"${extra_options} avr/avr-tables.opt\"\n \t;;\n bfin*-*)\n \tcpu_type=bfin"}, {"sha": "bc326e3a3f0318b7ea39fc817ef98e56aab440ea", "filename": "gcc/config/avr/avr-devices.c", "status": "modified", "additions": 4, "deletions": 183, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Favr-devices.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Favr-devices.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-devices.c?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -39,190 +39,11 @@ const struct base_arch_s avr_arch_types[] = {\n   { 0, 1, 1, 1, 1, 1, 1, 0, 0, 0x0060, \"__AVR_ARCH__=6\",   \"avr6\" }\n };\n \n-/* List of all known AVR MCU types - if updated, it has to be kept\n-   in sync in several places (FIXME: is there a better way?):\n-    - here;\n-    - t-avr (MULTILIB_MATCHES);\n-    - gas/config/tc-avr.c;\n-    - avr-libc.  */\n-\n const struct mcu_type_s avr_mcu_types[] = {\n-    /* Classic, <= 8K.  */\n-  { \"avr2\",                 ARCH_AVR2, NULL,                        0, 0x0060, \"s8515\" },\n-  { \"at90s2313\",            ARCH_AVR2, \"__AVR_AT90S2313__\",         1, 0x0060, \"s2313\" },\n-  { \"at90s2323\",            ARCH_AVR2, \"__AVR_AT90S2323__\",         1, 0x0060, \"s2323\" },\n-  { \"at90s2333\",            ARCH_AVR2, \"__AVR_AT90S2333__\",         1, 0x0060, \"s2333\" },\n-  { \"at90s2343\",            ARCH_AVR2, \"__AVR_AT90S2343__\",         1, 0x0060, \"s2343\" },\n-  { \"attiny22\",             ARCH_AVR2, \"__AVR_ATtiny22__\",          1, 0x0060, \"tn22\" },\n-  { \"attiny26\",             ARCH_AVR2, \"__AVR_ATtiny26__\",          1, 0x0060, \"tn26\" },\n-  { \"at90s4414\",            ARCH_AVR2, \"__AVR_AT90S4414__\",         0, 0x0060, \"s4414\" },\n-  { \"at90s4433\",            ARCH_AVR2, \"__AVR_AT90S4433__\",         1, 0x0060, \"s4433\" },\n-  { \"at90s4434\",            ARCH_AVR2, \"__AVR_AT90S4434__\",         0, 0x0060, \"s4434\" },\n-  { \"at90s8515\",            ARCH_AVR2, \"__AVR_AT90S8515__\",         0, 0x0060, \"s8515\" },\n-  { \"at90c8534\",            ARCH_AVR2, \"__AVR_AT90C8534__\",         0, 0x0060, \"c8534\" },\n-  { \"at90s8535\",            ARCH_AVR2, \"__AVR_AT90S8535__\",         0, 0x0060, \"s8535\" },\n-    /* Classic + MOVW, <= 8K.  */\n-  { \"avr25\",                ARCH_AVR25, NULL,                       0, 0x0060, \"tn85\" },\n-  { \"ata6289\",              ARCH_AVR25, \"__AVR_ATA6289__\",          0, 0x0100, \"a6289\" },\n-  { \"attiny13\",             ARCH_AVR25, \"__AVR_ATtiny13__\",         1, 0x0060, \"tn13\" },\n-  { \"attiny13a\",            ARCH_AVR25, \"__AVR_ATtiny13A__\",        1, 0x0060, \"tn13a\" },\n-  { \"attiny2313\",           ARCH_AVR25, \"__AVR_ATtiny2313__\",       1, 0x0060, \"tn2313\" },\n-  { \"attiny2313a\",          ARCH_AVR25, \"__AVR_ATtiny2313A__\",      1, 0x0060, \"tn2313a\" },\n-  { \"attiny24\",             ARCH_AVR25, \"__AVR_ATtiny24__\",         1, 0x0060, \"tn24\" },\n-  { \"attiny24a\",            ARCH_AVR25, \"__AVR_ATtiny24A__\",        1, 0x0060, \"tn24a\" },\n-  { \"attiny4313\",           ARCH_AVR25, \"__AVR_ATtiny4313__\",       1, 0x0060, \"tn4313\" },\n-  { \"attiny44\",             ARCH_AVR25, \"__AVR_ATtiny44__\",         0, 0x0060, \"tn44\" },\n-  { \"attiny44a\",            ARCH_AVR25, \"__AVR_ATtiny44A__\",        0, 0x0060, \"tn44a\" },\n-  { \"attiny84\",             ARCH_AVR25, \"__AVR_ATtiny84__\",         0, 0x0060, \"tn84\" },\n-  { \"attiny84a\",            ARCH_AVR25, \"__AVR_ATtiny84A__\",        0, 0x0060, \"tn84\" },\n-  { \"attiny25\",             ARCH_AVR25, \"__AVR_ATtiny25__\",         1, 0x0060, \"tn25\" },\n-  { \"attiny45\",             ARCH_AVR25, \"__AVR_ATtiny45__\",         0, 0x0060, \"tn45\" },\n-  { \"attiny85\",             ARCH_AVR25, \"__AVR_ATtiny85__\",         0, 0x0060, \"tn85\" },\n-  { \"attiny261\",            ARCH_AVR25, \"__AVR_ATtiny261__\",        1, 0x0060, \"tn261\" },\n-  { \"attiny261a\",           ARCH_AVR25, \"__AVR_ATtiny261A__\",       1, 0x0060, \"tn261a\" },\n-  { \"attiny461\",            ARCH_AVR25, \"__AVR_ATtiny461__\",        0, 0x0060, \"tn461\" },\n-  { \"attiny461a\",           ARCH_AVR25, \"__AVR_ATtiny461A__\",       0, 0x0060, \"tn461a\" },\n-  { \"attiny861\",            ARCH_AVR25, \"__AVR_ATtiny861__\",        0, 0x0060, \"tn861\" },\n-  { \"attiny861a\",           ARCH_AVR25, \"__AVR_ATtiny861A__\",       0, 0x0060, \"tn861a\" },\n-  { \"attiny43u\",            ARCH_AVR25, \"__AVR_ATtiny43U__\",        0, 0x0060, \"tn43u\" },\n-  { \"attiny87\",             ARCH_AVR25, \"__AVR_ATtiny87__\",         0, 0x0100, \"tn87\" },\n-  { \"attiny48\",             ARCH_AVR25, \"__AVR_ATtiny48__\",         0, 0x0100, \"tn48\" },\n-  { \"attiny88\",             ARCH_AVR25, \"__AVR_ATtiny88__\",         0, 0x0100, \"tn88\" },\n-  { \"at86rf401\",            ARCH_AVR25, \"__AVR_AT86RF401__\",        1, 0x0060, \"86401\" },\n-    /* Classic, > 8K, <= 64K.  */\n-  { \"avr3\",                 ARCH_AVR3, NULL,                        0, 0x0060, \"43355\" },\n-  { \"at43usb355\",           ARCH_AVR3, \"__AVR_AT43USB355__\",        0, 0x0060, \"43355\" },\n-  { \"at76c711\",             ARCH_AVR3, \"__AVR_AT76C711__\",          0, 0x0060, \"76711\" },\n-    /* Classic, == 128K.  */\n-  { \"avr31\",                ARCH_AVR31, NULL,                       0, 0x0060, \"m103\" },\n-  { \"atmega103\",            ARCH_AVR31, \"__AVR_ATmega103__\",        0, 0x0060, \"m103\" },\n-  { \"at43usb320\",           ARCH_AVR31, \"__AVR_AT43USB320__\",       0, 0x0060, \"43320\" },\n-    /* Classic + MOVW + JMP/CALL.  */\n-  { \"avr35\",                ARCH_AVR35, NULL,                       0, 0x0100, \"usb162\" },\n-  { \"at90usb82\",            ARCH_AVR35, \"__AVR_AT90USB82__\",        0, 0x0100, \"usb82\" },\n-  { \"at90usb162\",           ARCH_AVR35, \"__AVR_AT90USB162__\",       0, 0x0100, \"usb162\" },\n-  { \"atmega8u2\",            ARCH_AVR35, \"__AVR_ATmega8U2__\",        0, 0x0100, \"m8u2\" },\n-  { \"atmega16u2\",           ARCH_AVR35, \"__AVR_ATmega16U2__\",       0, 0x0100, \"m16u2\" },\n-  { \"atmega32u2\",           ARCH_AVR35, \"__AVR_ATmega32U2__\",       0, 0x0100, \"m32u2\" },\n-  { \"attiny167\",            ARCH_AVR35, \"__AVR_ATtiny167__\",        0, 0x0100, \"tn167\" },\n-    /* Enhanced, <= 8K.  */\n-  { \"avr4\",                 ARCH_AVR4, NULL,                        0, 0x0060, \"m8\" },\n-  { \"atmega8\",              ARCH_AVR4, \"__AVR_ATmega8__\",           0, 0x0060, \"m8\" },\n-  { \"atmega48\",             ARCH_AVR4, \"__AVR_ATmega48__\",          0, 0x0100, \"m48\" },\n-  { \"atmega48a\",            ARCH_AVR4, \"__AVR_ATmega48A__\",         0, 0x0100, \"m48a\" },\n-  { \"atmega48p\",            ARCH_AVR4, \"__AVR_ATmega48P__\",         0, 0x0100, \"m48p\" },\n-  { \"atmega88\",             ARCH_AVR4, \"__AVR_ATmega88__\",          0, 0x0100, \"m88\" },\n-  { \"atmega88a\",            ARCH_AVR4, \"__AVR_ATmega88A__\",         0, 0x0100, \"m88a\" },\n-  { \"atmega88p\",            ARCH_AVR4, \"__AVR_ATmega88P__\",         0, 0x0100, \"m88p\" },\n-  { \"atmega88pa\",           ARCH_AVR4, \"__AVR_ATmega88PA__\",        0, 0x0100, \"m88pa\" },\n-  { \"atmega8515\",           ARCH_AVR4, \"__AVR_ATmega8515__\",        0, 0x0060, \"m8515\" },\n-  { \"atmega8535\",           ARCH_AVR4, \"__AVR_ATmega8535__\",        0, 0x0060, \"m8535\" },\n-  { \"atmega8hva\",           ARCH_AVR4, \"__AVR_ATmega8HVA__\",        0, 0x0100, \"m8hva\" },\n-  { \"at90pwm1\",             ARCH_AVR4, \"__AVR_AT90PWM1__\",          0, 0x0100, \"90pwm1\" },\n-  { \"at90pwm2\",             ARCH_AVR4, \"__AVR_AT90PWM2__\",          0, 0x0100, \"90pwm2\" },\n-  { \"at90pwm2b\",            ARCH_AVR4, \"__AVR_AT90PWM2B__\",         0, 0x0100, \"90pwm2b\" },\n-  { \"at90pwm3\",             ARCH_AVR4, \"__AVR_AT90PWM3__\",          0, 0x0100, \"90pwm3\" },\n-  { \"at90pwm3b\",            ARCH_AVR4, \"__AVR_AT90PWM3B__\",         0, 0x0100, \"90pwm3b\" },\n-  { \"at90pwm81\",            ARCH_AVR4, \"__AVR_AT90PWM81__\",         0, 0x0100, \"90pwm81\" },\n-    /* Enhanced, > 8K, <= 64K.  */\n-  { \"avr5\",                 ARCH_AVR5, NULL,                        0, 0x0060, \"m16\" },\n-  { \"atmega16\",             ARCH_AVR5, \"__AVR_ATmega16__\",          0, 0x0060, \"m16\" },\n-  { \"atmega16a\",            ARCH_AVR5, \"__AVR_ATmega16A__\",         0, 0x0060, \"m16a\" },\n-  { \"atmega161\",            ARCH_AVR5, \"__AVR_ATmega161__\",         0, 0x0060, \"m161\" },\n-  { \"atmega162\",            ARCH_AVR5, \"__AVR_ATmega162__\",         0, 0x0100, \"m162\" },\n-  { \"atmega163\",            ARCH_AVR5, \"__AVR_ATmega163__\",         0, 0x0060, \"m163\" },\n-  { \"atmega164a\",           ARCH_AVR5, \"__AVR_ATmega164A__\",        0, 0x0060, \"m164a\" },\n-  { \"atmega164p\",           ARCH_AVR5, \"__AVR_ATmega164P__\",        0, 0x0100, \"m164p\" },\n-  { \"atmega165\",            ARCH_AVR5, \"__AVR_ATmega165__\",         0, 0x0100, \"m165\" },\n-  { \"atmega165a\",           ARCH_AVR5, \"__AVR_ATmega165A__\",        0, 0x0100, \"m165a\" },\n-  { \"atmega165p\",           ARCH_AVR5, \"__AVR_ATmega165P__\",        0, 0x0100, \"m165p\" },\n-  { \"atmega168\",            ARCH_AVR5, \"__AVR_ATmega168__\",         0, 0x0100, \"m168\" },\n-  { \"atmega168a\",           ARCH_AVR5, \"__AVR_ATmega168A__\",        0, 0x0100, \"m168a\" },\n-  { \"atmega168p\",           ARCH_AVR5, \"__AVR_ATmega168P__\",        0, 0x0100, \"m168p\" },\n-  { \"atmega169\",            ARCH_AVR5, \"__AVR_ATmega169__\",         0, 0x0100, \"m169\" },\n-  { \"atmega169a\",           ARCH_AVR5, \"__AVR_ATmega169A__\",        0, 0x0100, \"m169a\" },\n-  { \"atmega169p\",           ARCH_AVR5, \"__AVR_ATmega169P__\",        0, 0x0100, \"m169p\" },\n-  { \"atmega169pa\",          ARCH_AVR5, \"__AVR_ATmega169PA__\",       0, 0x0100, \"m169pa\" },\n-  { \"atmega32\",             ARCH_AVR5, \"__AVR_ATmega32__\",          0, 0x0060, \"m32\" },\n-  { \"atmega323\",            ARCH_AVR5, \"__AVR_ATmega323__\",         0, 0x0060, \"m323\" },\n-  { \"atmega324a\",           ARCH_AVR5, \"__AVR_ATmega324A__\",        0, 0x0100, \"m324a\" },\n-  { \"atmega324p\",           ARCH_AVR5, \"__AVR_ATmega324P__\",        0, 0x0100, \"m324p\" },\n-  { \"atmega324pa\",          ARCH_AVR5, \"__AVR_ATmega324PA__\",       0, 0x0100, \"m324pa\" },\n-  { \"atmega325\",            ARCH_AVR5, \"__AVR_ATmega325__\",         0, 0x0100, \"m325\" },\n-  { \"atmega325a\",           ARCH_AVR5, \"__AVR_ATmega325A__\",        0, 0x0100, \"m325a\" },\n-  { \"atmega325p\",           ARCH_AVR5, \"__AVR_ATmega325P__\",        0, 0x0100, \"m325p\" },\n-  { \"atmega3250\",           ARCH_AVR5, \"__AVR_ATmega3250__\",        0, 0x0100, \"m3250\" },\n-  { \"atmega3250a\",          ARCH_AVR5, \"__AVR_ATmega3250A__\",       0, 0x0100, \"m3250a\" },\n-  { \"atmega3250p\",          ARCH_AVR5, \"__AVR_ATmega3250P__\",       0, 0x0100, \"m3250p\" },\n-  { \"atmega328\",            ARCH_AVR5, \"__AVR_ATmega328__\",         0, 0x0100, \"m328\" },\n-  { \"atmega328p\",           ARCH_AVR5, \"__AVR_ATmega328P__\",        0, 0x0100, \"m328p\" },\n-  { \"atmega329\",            ARCH_AVR5, \"__AVR_ATmega329__\",         0, 0x0100, \"m329\" },\n-  { \"atmega329a\",           ARCH_AVR5, \"__AVR_ATmega329A__\",        0, 0x0100, \"m329a\" },\n-  { \"atmega329p\",           ARCH_AVR5, \"__AVR_ATmega329P__\",        0, 0x0100, \"m329p\" },\n-  { \"atmega329pa\",          ARCH_AVR5, \"__AVR_ATmega329PA__\",       0, 0x0100, \"m329pa\" },\n-  { \"atmega3290\",           ARCH_AVR5, \"__AVR_ATmega3290__\",        0, 0x0100, \"m3290\" },\n-  { \"atmega3290a\",          ARCH_AVR5, \"__AVR_ATmega3290A__\",       0, 0x0100, \"m3290a\" },\n-  { \"atmega3290p\",          ARCH_AVR5, \"__AVR_ATmega3290P__\",       0, 0x0100, \"m3290p\" },\n-  { \"atmega406\",            ARCH_AVR5, \"__AVR_ATmega406__\",         0, 0x0100, \"m406\" },\n-  { \"atmega64\",             ARCH_AVR5, \"__AVR_ATmega64__\",          0, 0x0100, \"m64\" },\n-  { \"atmega640\",            ARCH_AVR5, \"__AVR_ATmega640__\",         0, 0x0200, \"m640\" },\n-  { \"atmega644\",            ARCH_AVR5, \"__AVR_ATmega644__\",         0, 0x0100, \"m644\" },\n-  { \"atmega644a\",           ARCH_AVR5, \"__AVR_ATmega644A__\",        0, 0x0100, \"m644a\" },\n-  { \"atmega644p\",           ARCH_AVR5, \"__AVR_ATmega644P__\",        0, 0x0100, \"m644p\" },\n-  { \"atmega644pa\",          ARCH_AVR5, \"__AVR_ATmega644PA__\",       0, 0x0100, \"m644pa\" },\n-  { \"atmega645\",            ARCH_AVR5, \"__AVR_ATmega645__\",         0, 0x0100, \"m645\" },\n-  { \"atmega645a\",           ARCH_AVR5, \"__AVR_ATmega645A__\",        0, 0x0100, \"m645a\" },\n-  { \"atmega645p\",           ARCH_AVR5, \"__AVR_ATmega645P__\",        0, 0x0100, \"m645p\" },\n-  { \"atmega6450\",           ARCH_AVR5, \"__AVR_ATmega6450__\",        0, 0x0100, \"m6450\" },\n-  { \"atmega6450a\",          ARCH_AVR5, \"__AVR_ATmega6450A__\",       0, 0x0100, \"m6450a\" },\n-  { \"atmega6450p\",          ARCH_AVR5, \"__AVR_ATmega6450P__\",       0, 0x0100, \"m6450p\" },\n-  { \"atmega649\",            ARCH_AVR5, \"__AVR_ATmega649__\",         0, 0x0100, \"m649\" },\n-  { \"atmega649a\",           ARCH_AVR5, \"__AVR_ATmega649A__\",        0, 0x0100, \"m649a\" },\n-  { \"atmega649p\",           ARCH_AVR5, \"__AVR_ATmega649P__\",        0, 0x0100, \"m649p\" },\n-  { \"atmega6490\",           ARCH_AVR5, \"__AVR_ATmega6490__\",        0, 0x0100, \"m6490\" },\n-  { \"atmega16hva\",          ARCH_AVR5, \"__AVR_ATmega16HVA__\",       0, 0x0100, \"m16hva\" },\n-  { \"atmega16hva2\",         ARCH_AVR5, \"__AVR_ATmega16HVA2__\",      0, 0x0100, \"m16hva2\" },\n-  { \"atmega16hvb\",          ARCH_AVR5, \"__AVR_ATmega16HVB__\",       0, 0x0100, \"m16hvb\" },\n-  { \"atmega32hvb\",          ARCH_AVR5, \"__AVR_ATmega32HVB__\",       0, 0x0100, \"m32hvb\" },\n-  { \"atmega64hve\",          ARCH_AVR5, \"__AVR_ATmega64HVE__\",       0, 0x0100, \"m64hve\" },\n-  { \"at90can32\",            ARCH_AVR5, \"__AVR_AT90CAN32__\",         0, 0x0100, \"can32\" },\n-  { \"at90can64\",            ARCH_AVR5, \"__AVR_AT90CAN64__\",         0, 0x0100, \"can64\" },\n-  { \"at90pwm216\",           ARCH_AVR5, \"__AVR_AT90PWM216__\",        0, 0x0100, \"90pwm216\" },\n-  { \"at90pwm316\",           ARCH_AVR5, \"__AVR_AT90PWM316__\",        0, 0x0100, \"90pwm316\" },\n-  { \"atmega32c1\",           ARCH_AVR5, \"__AVR_ATmega32C1__\",        0, 0x0100, \"m32c1\" },\n-  { \"atmega64c1\",           ARCH_AVR5, \"__AVR_ATmega64C1__\",        0, 0x0100, \"m64c1\" },\n-  { \"atmega16m1\",           ARCH_AVR5, \"__AVR_ATmega16M1__\",        0, 0x0100, \"m16m1\" },\n-  { \"atmega32m1\",           ARCH_AVR5, \"__AVR_ATmega32M1__\",        0, 0x0100, \"m32m1\" },\n-  { \"atmega64m1\",           ARCH_AVR5, \"__AVR_ATmega64M1__\",        0, 0x0100, \"m64m1\" },\n-  { \"atmega16u4\",           ARCH_AVR5, \"__AVR_ATmega16U4__\",        0, 0x0100, \"m16u4\" },\n-  { \"atmega32u4\",           ARCH_AVR5, \"__AVR_ATmega32U4__\",        0, 0x0100, \"m32u4\" },\n-  { \"atmega32u6\",           ARCH_AVR5, \"__AVR_ATmega32U6__\",        0, 0x0100, \"m32u6\" },\n-  { \"at90scr100\",           ARCH_AVR5, \"__AVR_AT90SCR100__\",        0, 0x0100, \"90scr100\" },\n-  { \"at90usb646\",           ARCH_AVR5, \"__AVR_AT90USB646__\",        0, 0x0100, \"usb646\" },\n-  { \"at90usb647\",           ARCH_AVR5, \"__AVR_AT90USB647__\",        0, 0x0100, \"usb647\" },\n-  { \"at94k\",                ARCH_AVR5, \"__AVR_AT94K__\",             0, 0x0060, \"at94k\" },\n-  { \"m3000\",                ARCH_AVR5, \"__AVR_M3000__\",             0, 0x1000, \"m3000\" },\n-    /* Enhanced, == 128K.  */\n-  { \"avr51\",                ARCH_AVR51, NULL,                       0, 0x0100, \"m128\" },\n-  { \"atmega128\",            ARCH_AVR51, \"__AVR_ATmega128__\",        0, 0x0100, \"m128\" },\n-  { \"atmega1280\",           ARCH_AVR51, \"__AVR_ATmega1280__\",       0, 0x0200, \"m1280\" },\n-  { \"atmega1281\",           ARCH_AVR51, \"__AVR_ATmega1281__\",       0, 0x0200, \"m1281\" },\n-  { \"atmega1284p\",          ARCH_AVR51, \"__AVR_ATmega1284P__\",      0, 0x0100, \"m1284p\" },\n-  { \"atmega128rfa1\",        ARCH_AVR51, \"__AVR_ATmega128RFA1__\",    0, 0x0200, \"m128rfa1\" },\n-  { \"at90can128\",           ARCH_AVR51, \"__AVR_AT90CAN128__\",       0, 0x0100, \"can128\" },\n-  { \"at90usb1286\",          ARCH_AVR51, \"__AVR_AT90USB1286__\",      0, 0x0100, \"usb1286\" },\n-  { \"at90usb1287\",          ARCH_AVR51, \"__AVR_AT90USB1287__\",      0, 0x0100, \"usb1286\" },\n-    /* 3-Byte PC.  */\n-  { \"avr6\",                 ARCH_AVR6, NULL,                        0, 0x0200, \"m2561\" },\n-  { \"atmega2560\",           ARCH_AVR6, \"__AVR_ATmega2560__\",        0, 0x0200, \"m2560\" },\n-  { \"atmega2561\",           ARCH_AVR6, \"__AVR_ATmega2561__\",        0, 0x0200, \"m2561\" },\n-    /* Assembler only.  */\n-  { \"avr1\",                 ARCH_AVR1, NULL,                        0, 0x0060, \"s1200\" },\n-  { \"at90s1200\",            ARCH_AVR1, \"__AVR_AT90S1200__\",         0, 0x0060, \"s1200\" },\n-  { \"attiny11\",             ARCH_AVR1, \"__AVR_ATtiny11__\",          0, 0x0060, \"tn11\" },\n-  { \"attiny12\",             ARCH_AVR1, \"__AVR_ATtiny12__\",          0, 0x0060, \"tn12\" },\n-  { \"attiny15\",             ARCH_AVR1, \"__AVR_ATtiny15__\",          0, 0x0060, \"tn15\" },\n-  { \"attiny28\",             ARCH_AVR1, \"__AVR_ATtiny28__\",          0, 0x0060, \"tn28\" },\n+#define AVR_MCU(NAME, ARCH, MACRO, SHORT_SP, DATA_SEC, LIBRARY_NAME)\t\\\n+  { NAME, ARCH, MACRO, SHORT_SP, DATA_SEC, LIBRARY_NAME },\n+#include \"avr-mcus.def\"\n+#undef AVR_MCU\n     /* End of list.  */\n   { NULL,                   ARCH_UNKNOWN, NULL,                     0,      0, NULL }\n };"}, {"sha": "d2c6e7a57c3bc4ee8e8f1b33031d08bda966b326", "filename": "gcc/config/avr/avr-mcus.def", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Favr-mcus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Favr-mcus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-mcus.def?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -0,0 +1,211 @@\n+/* AVR MCUs.\n+   Copyright (C) 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+   \n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* List of all known AVR MCU types - if updated, it has to be kept\n+   in sync in several places (FIXME: is there a better way?):\n+    - here;\n+    - t-avr (MULTILIB_MATCHES);\n+    - gas/config/tc-avr.c;\n+    - avr-libc.\n+\n+   Before including this file, define a macro:\n+\n+   AVR_MCU (NAME, ARCH, MACRO, SHORT_SP, DATA_SEC, LIBRARY_NAME)\n+\n+   where the arguments are the fields of struct mcu_type_s.  */\n+\n+/* \"avr2\" must be first for the \"0\" default to work as intended.  */\n+\n+/* Classic, <= 8K.  */\n+AVR_MCU (\"avr2\",                 ARCH_AVR2, NULL,                        0, 0x0060, \"s8515\")\n+AVR_MCU (\"at90s2313\",            ARCH_AVR2, \"__AVR_AT90S2313__\",         1, 0x0060, \"s2313\")\n+AVR_MCU (\"at90s2323\",            ARCH_AVR2, \"__AVR_AT90S2323__\",         1, 0x0060, \"s2323\")\n+AVR_MCU (\"at90s2333\",            ARCH_AVR2, \"__AVR_AT90S2333__\",         1, 0x0060, \"s2333\")\n+AVR_MCU (\"at90s2343\",            ARCH_AVR2, \"__AVR_AT90S2343__\",         1, 0x0060, \"s2343\")\n+AVR_MCU (\"attiny22\",             ARCH_AVR2, \"__AVR_ATtiny22__\",          1, 0x0060, \"tn22\")\n+AVR_MCU (\"attiny26\",             ARCH_AVR2, \"__AVR_ATtiny26__\",          1, 0x0060, \"tn26\")\n+AVR_MCU (\"at90s4414\",            ARCH_AVR2, \"__AVR_AT90S4414__\",         0, 0x0060, \"s4414\")\n+AVR_MCU (\"at90s4433\",            ARCH_AVR2, \"__AVR_AT90S4433__\",         1, 0x0060, \"s4433\")\n+AVR_MCU (\"at90s4434\",            ARCH_AVR2, \"__AVR_AT90S4434__\",         0, 0x0060, \"s4434\")\n+AVR_MCU (\"at90s8515\",            ARCH_AVR2, \"__AVR_AT90S8515__\",         0, 0x0060, \"s8515\")\n+AVR_MCU (\"at90c8534\",            ARCH_AVR2, \"__AVR_AT90C8534__\",         0, 0x0060, \"c8534\")\n+AVR_MCU (\"at90s8535\",            ARCH_AVR2, \"__AVR_AT90S8535__\",         0, 0x0060, \"s8535\")\n+/* Classic + MOVW, <= 8K.  */\n+AVR_MCU (\"avr25\",                ARCH_AVR25, NULL,                       0, 0x0060, \"tn85\")\n+AVR_MCU (\"ata6289\",              ARCH_AVR25, \"__AVR_ATA6289__\",          0, 0x0100, \"a6289\")\n+AVR_MCU (\"attiny13\",             ARCH_AVR25, \"__AVR_ATtiny13__\",         1, 0x0060, \"tn13\")\n+AVR_MCU (\"attiny13a\",            ARCH_AVR25, \"__AVR_ATtiny13A__\",        1, 0x0060, \"tn13a\")\n+AVR_MCU (\"attiny2313\",           ARCH_AVR25, \"__AVR_ATtiny2313__\",       1, 0x0060, \"tn2313\")\n+AVR_MCU (\"attiny2313a\",          ARCH_AVR25, \"__AVR_ATtiny2313A__\",      1, 0x0060, \"tn2313a\")\n+AVR_MCU (\"attiny24\",             ARCH_AVR25, \"__AVR_ATtiny24__\",         1, 0x0060, \"tn24\")\n+AVR_MCU (\"attiny24a\",            ARCH_AVR25, \"__AVR_ATtiny24A__\",        1, 0x0060, \"tn24a\")\n+AVR_MCU (\"attiny4313\",           ARCH_AVR25, \"__AVR_ATtiny4313__\",       1, 0x0060, \"tn4313\")\n+AVR_MCU (\"attiny44\",             ARCH_AVR25, \"__AVR_ATtiny44__\",         0, 0x0060, \"tn44\")\n+AVR_MCU (\"attiny44a\",            ARCH_AVR25, \"__AVR_ATtiny44A__\",        0, 0x0060, \"tn44a\")\n+AVR_MCU (\"attiny84\",             ARCH_AVR25, \"__AVR_ATtiny84__\",         0, 0x0060, \"tn84\")\n+AVR_MCU (\"attiny84a\",            ARCH_AVR25, \"__AVR_ATtiny84A__\",        0, 0x0060, \"tn84\")\n+AVR_MCU (\"attiny25\",             ARCH_AVR25, \"__AVR_ATtiny25__\",         1, 0x0060, \"tn25\")\n+AVR_MCU (\"attiny45\",             ARCH_AVR25, \"__AVR_ATtiny45__\",         0, 0x0060, \"tn45\")\n+AVR_MCU (\"attiny85\",             ARCH_AVR25, \"__AVR_ATtiny85__\",         0, 0x0060, \"tn85\")\n+AVR_MCU (\"attiny261\",            ARCH_AVR25, \"__AVR_ATtiny261__\",        1, 0x0060, \"tn261\")\n+AVR_MCU (\"attiny261a\",           ARCH_AVR25, \"__AVR_ATtiny261A__\",       1, 0x0060, \"tn261a\")\n+AVR_MCU (\"attiny461\",            ARCH_AVR25, \"__AVR_ATtiny461__\",        0, 0x0060, \"tn461\")\n+AVR_MCU (\"attiny461a\",           ARCH_AVR25, \"__AVR_ATtiny461A__\",       0, 0x0060, \"tn461a\")\n+AVR_MCU (\"attiny861\",            ARCH_AVR25, \"__AVR_ATtiny861__\",        0, 0x0060, \"tn861\")\n+AVR_MCU (\"attiny861a\",           ARCH_AVR25, \"__AVR_ATtiny861A__\",       0, 0x0060, \"tn861a\")\n+AVR_MCU (\"attiny43u\",            ARCH_AVR25, \"__AVR_ATtiny43U__\",        0, 0x0060, \"tn43u\")\n+AVR_MCU (\"attiny87\",             ARCH_AVR25, \"__AVR_ATtiny87__\",         0, 0x0100, \"tn87\")\n+AVR_MCU (\"attiny48\",             ARCH_AVR25, \"__AVR_ATtiny48__\",         0, 0x0100, \"tn48\")\n+AVR_MCU (\"attiny88\",             ARCH_AVR25, \"__AVR_ATtiny88__\",         0, 0x0100, \"tn88\")\n+AVR_MCU (\"at86rf401\",            ARCH_AVR25, \"__AVR_AT86RF401__\",        1, 0x0060, \"86401\")\n+/* Classic, > 8K, <= 64K.  */\n+AVR_MCU (\"avr3\",                 ARCH_AVR3, NULL,                        0, 0x0060, \"43355\")\n+AVR_MCU (\"at43usb355\",           ARCH_AVR3, \"__AVR_AT43USB355__\",        0, 0x0060, \"43355\")\n+AVR_MCU (\"at76c711\",             ARCH_AVR3, \"__AVR_AT76C711__\",          0, 0x0060, \"76711\")\n+/* Classic, == 128K.  */\n+AVR_MCU (\"avr31\",                ARCH_AVR31, NULL,                       0, 0x0060, \"m103\")\n+AVR_MCU (\"atmega103\",            ARCH_AVR31, \"__AVR_ATmega103__\",        0, 0x0060, \"m103\")\n+AVR_MCU (\"at43usb320\",           ARCH_AVR31, \"__AVR_AT43USB320__\",       0, 0x0060, \"43320\")\n+/* Classic + MOVW + JMP/CALL.  */\n+AVR_MCU (\"avr35\",                ARCH_AVR35, NULL,                       0, 0x0100, \"usb162\")\n+AVR_MCU (\"at90usb82\",            ARCH_AVR35, \"__AVR_AT90USB82__\",        0, 0x0100, \"usb82\")\n+AVR_MCU (\"at90usb162\",           ARCH_AVR35, \"__AVR_AT90USB162__\",       0, 0x0100, \"usb162\")\n+AVR_MCU (\"atmega8u2\",            ARCH_AVR35, \"__AVR_ATmega8U2__\",        0, 0x0100, \"m8u2\")\n+AVR_MCU (\"atmega16u2\",           ARCH_AVR35, \"__AVR_ATmega16U2__\",       0, 0x0100, \"m16u2\")\n+AVR_MCU (\"atmega32u2\",           ARCH_AVR35, \"__AVR_ATmega32U2__\",       0, 0x0100, \"m32u2\")\n+AVR_MCU (\"attiny167\",            ARCH_AVR35, \"__AVR_ATtiny167__\",        0, 0x0100, \"tn167\")\n+/* Enhanced, <= 8K.  */\n+AVR_MCU (\"avr4\",                 ARCH_AVR4, NULL,                        0, 0x0060, \"m8\")\n+AVR_MCU (\"atmega8\",              ARCH_AVR4, \"__AVR_ATmega8__\",           0, 0x0060, \"m8\")\n+AVR_MCU (\"atmega48\",             ARCH_AVR4, \"__AVR_ATmega48__\",          0, 0x0100, \"m48\")\n+AVR_MCU (\"atmega48a\",            ARCH_AVR4, \"__AVR_ATmega48A__\",         0, 0x0100, \"m48a\")\n+AVR_MCU (\"atmega48p\",            ARCH_AVR4, \"__AVR_ATmega48P__\",         0, 0x0100, \"m48p\")\n+AVR_MCU (\"atmega88\",             ARCH_AVR4, \"__AVR_ATmega88__\",          0, 0x0100, \"m88\")\n+AVR_MCU (\"atmega88a\",            ARCH_AVR4, \"__AVR_ATmega88A__\",         0, 0x0100, \"m88a\")\n+AVR_MCU (\"atmega88p\",            ARCH_AVR4, \"__AVR_ATmega88P__\",         0, 0x0100, \"m88p\")\n+AVR_MCU (\"atmega88pa\",           ARCH_AVR4, \"__AVR_ATmega88PA__\",        0, 0x0100, \"m88pa\")\n+AVR_MCU (\"atmega8515\",           ARCH_AVR4, \"__AVR_ATmega8515__\",        0, 0x0060, \"m8515\")\n+AVR_MCU (\"atmega8535\",           ARCH_AVR4, \"__AVR_ATmega8535__\",        0, 0x0060, \"m8535\")\n+AVR_MCU (\"atmega8hva\",           ARCH_AVR4, \"__AVR_ATmega8HVA__\",        0, 0x0100, \"m8hva\")\n+AVR_MCU (\"at90pwm1\",             ARCH_AVR4, \"__AVR_AT90PWM1__\",          0, 0x0100, \"90pwm1\")\n+AVR_MCU (\"at90pwm2\",             ARCH_AVR4, \"__AVR_AT90PWM2__\",          0, 0x0100, \"90pwm2\")\n+AVR_MCU (\"at90pwm2b\",            ARCH_AVR4, \"__AVR_AT90PWM2B__\",         0, 0x0100, \"90pwm2b\")\n+AVR_MCU (\"at90pwm3\",             ARCH_AVR4, \"__AVR_AT90PWM3__\",          0, 0x0100, \"90pwm3\")\n+AVR_MCU (\"at90pwm3b\",            ARCH_AVR4, \"__AVR_AT90PWM3B__\",         0, 0x0100, \"90pwm3b\")\n+AVR_MCU (\"at90pwm81\",            ARCH_AVR4, \"__AVR_AT90PWM81__\",         0, 0x0100, \"90pwm81\")\n+/* Enhanced, > 8K, <= 64K.  */\n+AVR_MCU (\"avr5\",                 ARCH_AVR5, NULL,                        0, 0x0060, \"m16\")\n+AVR_MCU (\"atmega16\",             ARCH_AVR5, \"__AVR_ATmega16__\",          0, 0x0060, \"m16\")\n+AVR_MCU (\"atmega16a\",            ARCH_AVR5, \"__AVR_ATmega16A__\",         0, 0x0060, \"m16a\")\n+AVR_MCU (\"atmega161\",            ARCH_AVR5, \"__AVR_ATmega161__\",         0, 0x0060, \"m161\")\n+AVR_MCU (\"atmega162\",            ARCH_AVR5, \"__AVR_ATmega162__\",         0, 0x0100, \"m162\")\n+AVR_MCU (\"atmega163\",            ARCH_AVR5, \"__AVR_ATmega163__\",         0, 0x0060, \"m163\")\n+AVR_MCU (\"atmega164a\",           ARCH_AVR5, \"__AVR_ATmega164A__\",        0, 0x0060, \"m164a\")\n+AVR_MCU (\"atmega164p\",           ARCH_AVR5, \"__AVR_ATmega164P__\",        0, 0x0100, \"m164p\")\n+AVR_MCU (\"atmega165\",            ARCH_AVR5, \"__AVR_ATmega165__\",         0, 0x0100, \"m165\")\n+AVR_MCU (\"atmega165a\",           ARCH_AVR5, \"__AVR_ATmega165A__\",        0, 0x0100, \"m165a\")\n+AVR_MCU (\"atmega165p\",           ARCH_AVR5, \"__AVR_ATmega165P__\",        0, 0x0100, \"m165p\")\n+AVR_MCU (\"atmega168\",            ARCH_AVR5, \"__AVR_ATmega168__\",         0, 0x0100, \"m168\")\n+AVR_MCU (\"atmega168a\",           ARCH_AVR5, \"__AVR_ATmega168A__\",        0, 0x0100, \"m168a\")\n+AVR_MCU (\"atmega168p\",           ARCH_AVR5, \"__AVR_ATmega168P__\",        0, 0x0100, \"m168p\")\n+AVR_MCU (\"atmega169\",            ARCH_AVR5, \"__AVR_ATmega169__\",         0, 0x0100, \"m169\")\n+AVR_MCU (\"atmega169a\",           ARCH_AVR5, \"__AVR_ATmega169A__\",        0, 0x0100, \"m169a\")\n+AVR_MCU (\"atmega169p\",           ARCH_AVR5, \"__AVR_ATmega169P__\",        0, 0x0100, \"m169p\")\n+AVR_MCU (\"atmega169pa\",          ARCH_AVR5, \"__AVR_ATmega169PA__\",       0, 0x0100, \"m169pa\")\n+AVR_MCU (\"atmega32\",             ARCH_AVR5, \"__AVR_ATmega32__\",          0, 0x0060, \"m32\")\n+AVR_MCU (\"atmega323\",            ARCH_AVR5, \"__AVR_ATmega323__\",         0, 0x0060, \"m323\")\n+AVR_MCU (\"atmega324a\",           ARCH_AVR5, \"__AVR_ATmega324A__\",        0, 0x0100, \"m324a\")\n+AVR_MCU (\"atmega324p\",           ARCH_AVR5, \"__AVR_ATmega324P__\",        0, 0x0100, \"m324p\")\n+AVR_MCU (\"atmega324pa\",          ARCH_AVR5, \"__AVR_ATmega324PA__\",       0, 0x0100, \"m324pa\")\n+AVR_MCU (\"atmega325\",            ARCH_AVR5, \"__AVR_ATmega325__\",         0, 0x0100, \"m325\")\n+AVR_MCU (\"atmega325a\",           ARCH_AVR5, \"__AVR_ATmega325A__\",        0, 0x0100, \"m325a\")\n+AVR_MCU (\"atmega325p\",           ARCH_AVR5, \"__AVR_ATmega325P__\",        0, 0x0100, \"m325p\")\n+AVR_MCU (\"atmega3250\",           ARCH_AVR5, \"__AVR_ATmega3250__\",        0, 0x0100, \"m3250\")\n+AVR_MCU (\"atmega3250a\",          ARCH_AVR5, \"__AVR_ATmega3250A__\",       0, 0x0100, \"m3250a\")\n+AVR_MCU (\"atmega3250p\",          ARCH_AVR5, \"__AVR_ATmega3250P__\",       0, 0x0100, \"m3250p\")\n+AVR_MCU (\"atmega328\",            ARCH_AVR5, \"__AVR_ATmega328__\",         0, 0x0100, \"m328\")\n+AVR_MCU (\"atmega328p\",           ARCH_AVR5, \"__AVR_ATmega328P__\",        0, 0x0100, \"m328p\")\n+AVR_MCU (\"atmega329\",            ARCH_AVR5, \"__AVR_ATmega329__\",         0, 0x0100, \"m329\")\n+AVR_MCU (\"atmega329a\",           ARCH_AVR5, \"__AVR_ATmega329A__\",        0, 0x0100, \"m329a\")\n+AVR_MCU (\"atmega329p\",           ARCH_AVR5, \"__AVR_ATmega329P__\",        0, 0x0100, \"m329p\")\n+AVR_MCU (\"atmega329pa\",          ARCH_AVR5, \"__AVR_ATmega329PA__\",       0, 0x0100, \"m329pa\")\n+AVR_MCU (\"atmega3290\",           ARCH_AVR5, \"__AVR_ATmega3290__\",        0, 0x0100, \"m3290\")\n+AVR_MCU (\"atmega3290a\",          ARCH_AVR5, \"__AVR_ATmega3290A__\",       0, 0x0100, \"m3290a\")\n+AVR_MCU (\"atmega3290p\",          ARCH_AVR5, \"__AVR_ATmega3290P__\",       0, 0x0100, \"m3290p\")\n+AVR_MCU (\"atmega406\",            ARCH_AVR5, \"__AVR_ATmega406__\",         0, 0x0100, \"m406\")\n+AVR_MCU (\"atmega64\",             ARCH_AVR5, \"__AVR_ATmega64__\",          0, 0x0100, \"m64\")\n+AVR_MCU (\"atmega640\",            ARCH_AVR5, \"__AVR_ATmega640__\",         0, 0x0200, \"m640\")\n+AVR_MCU (\"atmega644\",            ARCH_AVR5, \"__AVR_ATmega644__\",         0, 0x0100, \"m644\")\n+AVR_MCU (\"atmega644a\",           ARCH_AVR5, \"__AVR_ATmega644A__\",        0, 0x0100, \"m644a\")\n+AVR_MCU (\"atmega644p\",           ARCH_AVR5, \"__AVR_ATmega644P__\",        0, 0x0100, \"m644p\")\n+AVR_MCU (\"atmega644pa\",          ARCH_AVR5, \"__AVR_ATmega644PA__\",       0, 0x0100, \"m644pa\")\n+AVR_MCU (\"atmega645\",            ARCH_AVR5, \"__AVR_ATmega645__\",         0, 0x0100, \"m645\")\n+AVR_MCU (\"atmega645a\",           ARCH_AVR5, \"__AVR_ATmega645A__\",        0, 0x0100, \"m645a\")\n+AVR_MCU (\"atmega645p\",           ARCH_AVR5, \"__AVR_ATmega645P__\",        0, 0x0100, \"m645p\")\n+AVR_MCU (\"atmega6450\",           ARCH_AVR5, \"__AVR_ATmega6450__\",        0, 0x0100, \"m6450\")\n+AVR_MCU (\"atmega6450a\",          ARCH_AVR5, \"__AVR_ATmega6450A__\",       0, 0x0100, \"m6450a\")\n+AVR_MCU (\"atmega6450p\",          ARCH_AVR5, \"__AVR_ATmega6450P__\",       0, 0x0100, \"m6450p\")\n+AVR_MCU (\"atmega649\",            ARCH_AVR5, \"__AVR_ATmega649__\",         0, 0x0100, \"m649\")\n+AVR_MCU (\"atmega649a\",           ARCH_AVR5, \"__AVR_ATmega649A__\",        0, 0x0100, \"m649a\")\n+AVR_MCU (\"atmega649p\",           ARCH_AVR5, \"__AVR_ATmega649P__\",        0, 0x0100, \"m649p\")\n+AVR_MCU (\"atmega6490\",           ARCH_AVR5, \"__AVR_ATmega6490__\",        0, 0x0100, \"m6490\")\n+AVR_MCU (\"atmega16hva\",          ARCH_AVR5, \"__AVR_ATmega16HVA__\",       0, 0x0100, \"m16hva\")\n+AVR_MCU (\"atmega16hva2\",         ARCH_AVR5, \"__AVR_ATmega16HVA2__\",      0, 0x0100, \"m16hva2\")\n+AVR_MCU (\"atmega16hvb\",          ARCH_AVR5, \"__AVR_ATmega16HVB__\",       0, 0x0100, \"m16hvb\")\n+AVR_MCU (\"atmega32hvb\",          ARCH_AVR5, \"__AVR_ATmega32HVB__\",       0, 0x0100, \"m32hvb\")\n+AVR_MCU (\"atmega64hve\",          ARCH_AVR5, \"__AVR_ATmega64HVE__\",       0, 0x0100, \"m64hve\")\n+AVR_MCU (\"at90can32\",            ARCH_AVR5, \"__AVR_AT90CAN32__\",         0, 0x0100, \"can32\")\n+AVR_MCU (\"at90can64\",            ARCH_AVR5, \"__AVR_AT90CAN64__\",         0, 0x0100, \"can64\")\n+AVR_MCU (\"at90pwm216\",           ARCH_AVR5, \"__AVR_AT90PWM216__\",        0, 0x0100, \"90pwm216\")\n+AVR_MCU (\"at90pwm316\",           ARCH_AVR5, \"__AVR_AT90PWM316__\",        0, 0x0100, \"90pwm316\")\n+AVR_MCU (\"atmega32c1\",           ARCH_AVR5, \"__AVR_ATmega32C1__\",        0, 0x0100, \"m32c1\")\n+AVR_MCU (\"atmega64c1\",           ARCH_AVR5, \"__AVR_ATmega64C1__\",        0, 0x0100, \"m64c1\")\n+AVR_MCU (\"atmega16m1\",           ARCH_AVR5, \"__AVR_ATmega16M1__\",        0, 0x0100, \"m16m1\")\n+AVR_MCU (\"atmega32m1\",           ARCH_AVR5, \"__AVR_ATmega32M1__\",        0, 0x0100, \"m32m1\")\n+AVR_MCU (\"atmega64m1\",           ARCH_AVR5, \"__AVR_ATmega64M1__\",        0, 0x0100, \"m64m1\")\n+AVR_MCU (\"atmega16u4\",           ARCH_AVR5, \"__AVR_ATmega16U4__\",        0, 0x0100, \"m16u4\")\n+AVR_MCU (\"atmega32u4\",           ARCH_AVR5, \"__AVR_ATmega32U4__\",        0, 0x0100, \"m32u4\")\n+AVR_MCU (\"atmega32u6\",           ARCH_AVR5, \"__AVR_ATmega32U6__\",        0, 0x0100, \"m32u6\")\n+AVR_MCU (\"at90scr100\",           ARCH_AVR5, \"__AVR_AT90SCR100__\",        0, 0x0100, \"90scr100\")\n+AVR_MCU (\"at90usb646\",           ARCH_AVR5, \"__AVR_AT90USB646__\",        0, 0x0100, \"usb646\")\n+AVR_MCU (\"at90usb647\",           ARCH_AVR5, \"__AVR_AT90USB647__\",        0, 0x0100, \"usb647\")\n+AVR_MCU (\"at94k\",                ARCH_AVR5, \"__AVR_AT94K__\",             0, 0x0060, \"at94k\")\n+AVR_MCU (\"m3000\",                ARCH_AVR5, \"__AVR_M3000__\",             0, 0x1000, \"m3000\")\n+/* Enhanced, == 128K.  */\n+AVR_MCU (\"avr51\",                ARCH_AVR51, NULL,                       0, 0x0100, \"m128\")\n+AVR_MCU (\"atmega128\",            ARCH_AVR51, \"__AVR_ATmega128__\",        0, 0x0100, \"m128\")\n+AVR_MCU (\"atmega1280\",           ARCH_AVR51, \"__AVR_ATmega1280__\",       0, 0x0200, \"m1280\")\n+AVR_MCU (\"atmega1281\",           ARCH_AVR51, \"__AVR_ATmega1281__\",       0, 0x0200, \"m1281\")\n+AVR_MCU (\"atmega1284p\",          ARCH_AVR51, \"__AVR_ATmega1284P__\",      0, 0x0100, \"m1284p\")\n+AVR_MCU (\"atmega128rfa1\",        ARCH_AVR51, \"__AVR_ATmega128RFA1__\",    0, 0x0200, \"m128rfa1\")\n+AVR_MCU (\"at90can128\",           ARCH_AVR51, \"__AVR_AT90CAN128__\",       0, 0x0100, \"can128\")\n+AVR_MCU (\"at90usb1286\",          ARCH_AVR51, \"__AVR_AT90USB1286__\",      0, 0x0100, \"usb1286\")\n+AVR_MCU (\"at90usb1287\",          ARCH_AVR51, \"__AVR_AT90USB1287__\",      0, 0x0100, \"usb1286\")\n+/* 3-Byte PC.  */\n+AVR_MCU (\"avr6\",                 ARCH_AVR6, NULL,                        0, 0x0200, \"m2561\")\n+AVR_MCU (\"atmega2560\",           ARCH_AVR6, \"__AVR_ATmega2560__\",        0, 0x0200, \"m2560\")\n+AVR_MCU (\"atmega2561\",           ARCH_AVR6, \"__AVR_ATmega2561__\",        0, 0x0200, \"m2561\")\n+/* Assembler only.  */\n+AVR_MCU (\"avr1\",                 ARCH_AVR1, NULL,                        0, 0x0060, \"s1200\")\n+AVR_MCU (\"at90s1200\",            ARCH_AVR1, \"__AVR_AT90S1200__\",         0, 0x0060, \"s1200\")\n+AVR_MCU (\"attiny11\",             ARCH_AVR1, \"__AVR_ATtiny11__\",          0, 0x0060, \"tn11\")\n+AVR_MCU (\"attiny12\",             ARCH_AVR1, \"__AVR_ATtiny12__\",          0, 0x0060, \"tn12\")\n+AVR_MCU (\"attiny15\",             ARCH_AVR1, \"__AVR_ATtiny15__\",          0, 0x0060, \"tn15\")\n+AVR_MCU (\"attiny28\",             ARCH_AVR1, \"__AVR_ATtiny28__\",          0, 0x0060, \"tn28\")"}, {"sha": "90b41d559d67e818ca8be273d30d7dd3ec591eaa", "filename": "gcc/config/avr/avr-tables.opt", "status": "added", "additions": 523, "deletions": 0, "changes": 523, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Favr-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Favr-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-tables.opt?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -0,0 +1,523 @@\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from avr-mcus.def.\n+\n+; Copyright (C) 2011 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(avr_mcu) Type(int)\n+Known MCU names:\n+\n+EnumValue\n+Enum(avr_mcu) String(avr2) Value(0)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90s2313) Value(1)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90s2323) Value(2)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90s2333) Value(3)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90s2343) Value(4)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny22) Value(5)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny26) Value(6)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90s4414) Value(7)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90s4433) Value(8)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90s4434) Value(9)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90s8515) Value(10)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90c8534) Value(11)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90s8535) Value(12)\n+\n+EnumValue\n+Enum(avr_mcu) String(avr25) Value(13)\n+\n+EnumValue\n+Enum(avr_mcu) String(ata6289) Value(14)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny13) Value(15)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny13a) Value(16)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny2313) Value(17)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny2313a) Value(18)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny24) Value(19)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny24a) Value(20)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny4313) Value(21)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny44) Value(22)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny44a) Value(23)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny84) Value(24)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny84a) Value(25)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny25) Value(26)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny45) Value(27)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny85) Value(28)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny261) Value(29)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny261a) Value(30)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny461) Value(31)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny461a) Value(32)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny861) Value(33)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny861a) Value(34)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny43u) Value(35)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny87) Value(36)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny48) Value(37)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny88) Value(38)\n+\n+EnumValue\n+Enum(avr_mcu) String(at86rf401) Value(39)\n+\n+EnumValue\n+Enum(avr_mcu) String(avr3) Value(40)\n+\n+EnumValue\n+Enum(avr_mcu) String(at43usb355) Value(41)\n+\n+EnumValue\n+Enum(avr_mcu) String(at76c711) Value(42)\n+\n+EnumValue\n+Enum(avr_mcu) String(avr31) Value(43)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega103) Value(44)\n+\n+EnumValue\n+Enum(avr_mcu) String(at43usb320) Value(45)\n+\n+EnumValue\n+Enum(avr_mcu) String(avr35) Value(46)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90usb82) Value(47)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90usb162) Value(48)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega8u2) Value(49)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega16u2) Value(50)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega32u2) Value(51)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny167) Value(52)\n+\n+EnumValue\n+Enum(avr_mcu) String(avr4) Value(53)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega8) Value(54)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega48) Value(55)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega48a) Value(56)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega48p) Value(57)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega88) Value(58)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega88a) Value(59)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega88p) Value(60)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega88pa) Value(61)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega8515) Value(62)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega8535) Value(63)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega8hva) Value(64)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90pwm1) Value(65)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90pwm2) Value(66)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90pwm2b) Value(67)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90pwm3) Value(68)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90pwm3b) Value(69)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90pwm81) Value(70)\n+\n+EnumValue\n+Enum(avr_mcu) String(avr5) Value(71)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega16) Value(72)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega16a) Value(73)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega161) Value(74)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega162) Value(75)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega163) Value(76)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega164a) Value(77)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega164p) Value(78)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega165) Value(79)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega165a) Value(80)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega165p) Value(81)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega168) Value(82)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega168a) Value(83)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega168p) Value(84)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega169) Value(85)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega169a) Value(86)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega169p) Value(87)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega169pa) Value(88)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega32) Value(89)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega323) Value(90)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega324a) Value(91)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega324p) Value(92)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega324pa) Value(93)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega325) Value(94)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega325a) Value(95)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega325p) Value(96)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega3250) Value(97)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega3250a) Value(98)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega3250p) Value(99)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega328) Value(100)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega328p) Value(101)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega329) Value(102)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega329a) Value(103)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega329p) Value(104)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega329pa) Value(105)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega3290) Value(106)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega3290a) Value(107)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega3290p) Value(108)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega406) Value(109)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega64) Value(110)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega640) Value(111)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega644) Value(112)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega644a) Value(113)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega644p) Value(114)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega644pa) Value(115)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega645) Value(116)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega645a) Value(117)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega645p) Value(118)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega6450) Value(119)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega6450a) Value(120)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega6450p) Value(121)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega649) Value(122)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega649a) Value(123)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega649p) Value(124)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega6490) Value(125)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega16hva) Value(126)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega16hva2) Value(127)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega16hvb) Value(128)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega32hvb) Value(129)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega64hve) Value(130)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90can32) Value(131)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90can64) Value(132)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90pwm216) Value(133)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90pwm316) Value(134)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega32c1) Value(135)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega64c1) Value(136)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega16m1) Value(137)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega32m1) Value(138)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega64m1) Value(139)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega16u4) Value(140)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega32u4) Value(141)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega32u6) Value(142)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90scr100) Value(143)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90usb646) Value(144)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90usb647) Value(145)\n+\n+EnumValue\n+Enum(avr_mcu) String(at94k) Value(146)\n+\n+EnumValue\n+Enum(avr_mcu) String(m3000) Value(147)\n+\n+EnumValue\n+Enum(avr_mcu) String(avr51) Value(148)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega128) Value(149)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega1280) Value(150)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega1281) Value(151)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega1284p) Value(152)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega128rfa1) Value(153)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90can128) Value(154)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90usb1286) Value(155)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90usb1287) Value(156)\n+\n+EnumValue\n+Enum(avr_mcu) String(avr6) Value(157)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega2560) Value(158)\n+\n+EnumValue\n+Enum(avr_mcu) String(atmega2561) Value(159)\n+\n+EnumValue\n+Enum(avr_mcu) String(avr1) Value(160)\n+\n+EnumValue\n+Enum(avr_mcu) String(at90s1200) Value(161)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny11) Value(162)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny12) Value(163)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny15) Value(164)\n+\n+EnumValue\n+Enum(avr_mcu) String(attiny28) Value(165)\n+"}, {"sha": "2b1aaf097465c275b9b6820de454a262737d10fd", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 3, "deletions": 55, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -106,7 +106,6 @@ static rtx avr_function_arg (cumulative_args_t , enum machine_mode,\n \t\t\t     const_tree, bool);\n static void avr_function_arg_advance (cumulative_args_t, enum machine_mode,\n \t\t\t\t      const_tree, bool);\n-static void avr_help (void);\n static bool avr_function_ok_for_sibcall (tree, tree);\n static void avr_asm_named_section (const char *name, unsigned int flags, tree decl);\n \n@@ -250,9 +249,6 @@ static const struct attribute_spec avr_attribute_table[] =\n #undef TARGET_CANNOT_MODIFY_JUMPS_P\n #define TARGET_CANNOT_MODIFY_JUMPS_P avr_cannot_modify_jumps_p\n \n-#undef TARGET_HELP\n-#define TARGET_HELP avr_help\n-\n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL avr_function_ok_for_sibcall\n \n@@ -268,21 +264,9 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n static void\n avr_option_override (void)\n {\n-  const struct mcu_type_s *t;\n-\n   flag_delete_null_pointer_checks = 0;\n \n-  for (t = avr_mcu_types; t->name; t++)\n-    if (strcmp (t->name, avr_mcu_name) == 0)\n-      break;\n-\n-  if (!t->name)\n-    {\n-      error (\"unrecognized argument to -mmcu= option: %qs\", avr_mcu_name);\n-      inform (input_location,  \"See --target-help for supported MCUs\");\n-    }\n-\n-  avr_current_device = t;\n+  avr_current_device = &avr_mcu_types[avr_mcu_index];\n   avr_current_arch = &avr_arch_types[avr_current_device->arch];\n   avr_extra_arch_macro = avr_current_device->macro;\n \n@@ -292,42 +276,6 @@ avr_option_override (void)\n   init_machine_status = avr_init_machine_status;\n }\n \n-/* Implement TARGET_HELP */\n-/* Report extra information for --target-help */\n-\n-static void\n-avr_help (void)\n-{\n-  const struct mcu_type_s *t;\n-  const char * const indent = \"  \";\n-  int len;\n-\n-  /* Give a list of MCUs that are accepted by -mmcu=* .\n-     Note that MCUs supported by the compiler might differ from\n-     MCUs supported by binutils. */\n-\n-  len = strlen (indent);\n-  printf (\"Known MCU names:\\n%s\", indent);\n-\n-  /* Print a blank-separated list of all supported MCUs */\n-\n-  for (t = avr_mcu_types; t->name; t++)\n-    {\n-      printf (\"%s \", t->name);\n-      len += 1 + strlen (t->name);\n-\n-      /* Break long lines */\n-      \n-      if (len > 66 && (t+1)->name)\n-        {\n-          printf (\"\\n%s\", indent);\n-          len = strlen (indent);\n-        }\n-    }\n-\n-  printf (\"\\n\\n\");\n-}\n-\n /*  return register class from register number.  */\n \n static const enum reg_class reg_class_tab[]={\n@@ -5320,11 +5268,11 @@ static void\n avr_file_start (void)\n {\n   if (avr_current_arch->asm_only)\n-    error (\"MCU %qs supported for assembler only\", avr_mcu_name);\n+    error (\"MCU %qs supported for assembler only\", avr_current_device->name);\n \n   default_file_start ();\n \n-/*  fprintf (asm_out_file, \"\\t.arch %s\\n\", avr_mcu_name);*/\n+/*  fprintf (asm_out_file, \"\\t.arch %s\\n\", avr_current_device->name);*/\n   fputs (\"__SREG__ = 0x3f\\n\"\n \t \"__SP_H__ = 0x3e\\n\"\n \t \"__SP_L__ = 0x3d\\n\", asm_out_file);"}, {"sha": "59d6393c506c8d43850053ad9073c3170a793bd3", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -1,6 +1,6 @@\n ; Options for the ATMEL AVR port of the compiler.\n \n-; Copyright (C) 2005, 2007, 2008, 2010 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2008, 2010, 2011 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -23,7 +23,7 @@ Target Report Mask(CALL_PROLOGUES)\n Use subroutines for function prologues and epilogues\n \n mmcu=\n-Target RejectNegative Joined Var(avr_mcu_name) Init(\"avr2\")\n+Target RejectNegative Joined Var(avr_mcu_index) Init(0) Enum(avr_mcu)\n -mmcu=MCU\tSelect the target MCU\n \n mdeb"}, {"sha": "d2dcfadb190f3a5bca5d4adb528b6a5352db51a5", "filename": "gcc/config/avr/genopt.sh", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Fgenopt.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Fgenopt.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgenopt.sh?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -0,0 +1,59 @@\n+#!/bin/sh\n+# Generate avr-tables.opt from the list in avr-mcus.def.\n+# Copyright (C) 2011 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+cat <<EOF\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from avr-mcus.def.\n+\n+; Copyright (C) 2011 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(avr_mcu) Type(int)\n+Known MCU names:\n+\n+EOF\n+\n+awk -F'[(, \t]+' 'BEGIN {\n+    value = 0\n+}\n+/^AVR_MCU/ {\n+    name = $2\n+    gsub(\"\\\"\", \"\", name)\n+    print \"EnumValue\"\n+    print \"Enum(avr_mcu) String(\" name \") Value(\" value \")\"\n+    print \"\"\n+    value++\n+}' $1/avr-mcus.def"}, {"sha": "f941962f5b99e446b7d9d9c42c0f1c42b04b9f89", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-# 2009, 2010 Free Software Foundation, Inc.\n+# 2009, 2010, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -22,13 +22,18 @@ driver-avr.o: $(srcdir)/config/avr/driver-avr.c \\\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n avr-devices.o: $(srcdir)/config/avr/avr-devices.c \\\n+  $(srcdir)/config/avr/avr-mcus.def \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n avr-c.o: $(srcdir)/config/avr/avr-c.c \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n+$(srcdir)/config/avr/avr-tables.opt: $(srcdir)/config/avr/genopt.sh \\\n+  $(srcdir)/config/avr/avr-mcus.def\n+\t$(SHELL) $(srcdir)/config/avr/genopt.sh $(srcdir)/config/avr > \\\n+\t\t$(srcdir)/config/avr/avr-tables.opt\n \n LIB1ASMSRC = avr/libgcc.S\n LIB1ASMFUNCS = \\"}, {"sha": "dd61a224b6be507517c0c1bf4fc37f0bf33a86a3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -766,13 +766,6 @@ Set target-dependent initial values of fields in @var{opts}.\n Set target-dependent default values for @option{--param} settings, using calls to @code{set_default_param_value}.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_HELP (void)\n-This hook is called in response to the user invoking\n-@option{--target-help} on the command line.  It gives the target a\n-chance to display extra information on the target specific command\n-line options found in its @file{.opt} file.\n-@end deftypefn\n-\n @defmac SWITCHABLE_TARGET\n Some targets need to switch between substantially different subtargets\n during compilation.  For example, the MIPS target has one subtarget for"}, {"sha": "f7c16e9859f4bb9065212adf64217ce85ada24ce", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -754,13 +754,6 @@ options are changed via @code{#pragma GCC optimize} or by using the\n \n @hook TARGET_OPTION_DEFAULT_PARAMS\n \n-@hook TARGET_HELP\n-This hook is called in response to the user invoking\n-@option{--target-help} on the command line.  It gives the target a\n-chance to display extra information on the target specific command\n-line options found in its @file{.opt} file.\n-@end deftypefn\n-\n @defmac SWITCHABLE_TARGET\n Some targets need to switch between substantially different subtargets\n during compilation.  For example, the MIPS target has one subtarget for"}, {"sha": "18bbe4315e918f93671a7b8ab889af929f7cc879", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -34,7 +34,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"opts-diagnostic.h\"\n #include \"insn-attr.h\"\t\t/* For INSN_SCHEDULING and DELAY_SLOTS.  */\n-#include \"target.h\"\n #include \"common/common-target.h\"\n \n /* Parse the -femit-struct-debug-detailed option value\n@@ -1269,10 +1268,6 @@ common_handle_option (struct gcc_options *opts,\n     case OPT__target_help:\n       print_specific_help (CL_TARGET, CL_UNDOCUMENTED, 0, opts, lang_mask);\n       opts->x_exit_after_options = true;\n-\n-      /* Allow the target a chance to give the user some additional information.  */\n-      if (targetm.help)\n-\ttargetm.help ();\n       break;\n \n     case OPT__help_:"}, {"sha": "e02cbcd012cdeb5f37a2ac395043f613fe0adda9", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -839,7 +839,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tTARGET_PROMOTE_FUNCTION_ARGS TARGET_PROMOTE_FUNCTION_RETURN \\\n \tLANG_HOOKS_MISSING_ARGUMENT LANG_HOOKS_HASH_TYPES \\\n \tTARGET_HANDLE_OFAST TARGET_OPTION_OPTIMIZATION \\\n-        TARGET_IRA_COVER_CLASSES\n+        TARGET_IRA_COVER_CLASSES TARGET_HELP\n \n /* Hooks into libgcc2.  */\n  #pragma GCC poison LIBGCC2_DOUBLE_TYPE_SIZE LIBGCC2_WORDS_BIG_ENDIAN \\"}, {"sha": "c5acaabb1fe7ea20962d322f971d9962746089c2", "filename": "gcc/target.def", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b916ca624af1c90ea0de48060781e6afe692279/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=1b916ca624af1c90ea0de48060781e6afe692279", "patch": "@@ -1021,13 +1021,6 @@ DEFHOOK\n  void, (void),\n  hook_void_void)\n \n-/* Display extra, target specific information in response to a\n-   --target-help switch.  */\n-DEFHOOK\n-(help,\n- \"\",\n- void, (void), NULL)\n-\n DEFHOOK_UNDOC\n (eh_return_filter_mode,\n  \"Return machine mode for filter value.\","}]}