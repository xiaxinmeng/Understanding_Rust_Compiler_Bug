{"sha": "ac48cd5e89b1e50b1612c9473cf1f4a59b46ed0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM0OGNkNWU4OWIxZTUwYjE2MTJjOTQ3M2NmMWY0YTU5YjQ2ZWQwYQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2017-07-21T06:46:05Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2017-07-21T06:46:05Z"}, "message": "arm.c (arm_test_cpu_arch_dat): Check for overlap.\n\n2017-07-21  Tamar Christina  <tamar.christina@arm.com>\n\n\t* config/arm/arm.c (arm_test_cpu_arch_dat):\n\tCheck for overlap.\n\nFrom-SVN: r250415", "tree": {"sha": "226b91eb89f8af35391f4bd1e7692486f2b5c2f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/226b91eb89f8af35391f4bd1e7692486f2b5c2f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac48cd5e89b1e50b1612c9473cf1f4a59b46ed0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac48cd5e89b1e50b1612c9473cf1f4a59b46ed0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac48cd5e89b1e50b1612c9473cf1f4a59b46ed0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac48cd5e89b1e50b1612c9473cf1f4a59b46ed0a/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5aaa8fb40681ee66282d73dab8c8eccbf5ee0518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aaa8fb40681ee66282d73dab8c8eccbf5ee0518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aaa8fb40681ee66282d73dab8c8eccbf5ee0518"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "2e29894a92044efaee70c66e5c437828caabaf78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac48cd5e89b1e50b1612c9473cf1f4a59b46ed0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac48cd5e89b1e50b1612c9473cf1f4a59b46ed0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac48cd5e89b1e50b1612c9473cf1f4a59b46ed0a", "patch": "@@ -1,3 +1,8 @@\n+2017-07-21  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/arm/arm.c (arm_test_cpu_arch_dat):\n+\tCheck for overlap.\n+\n 2017-07-20  Nathan Sidwell  <nathan@acm.org>\n \n \tRemove TYPE_METHODS."}, {"sha": "c3feb4983c73c7141b7c0799644c45df429d41d8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac48cd5e89b1e50b1612c9473cf1f4a59b46ed0a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac48cd5e89b1e50b1612c9473cf1f4a59b46ed0a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ac48cd5e89b1e50b1612c9473cf1f4a59b46ed0a", "patch": "@@ -31222,12 +31222,15 @@ namespace selftest {\n    inconsistencies in the option extensions at present (extensions\n    that duplicate others but aren't marked as aliases).  Furthermore,\n    for correct canonicalization later options must never be a subset\n-   of an earlier option.  */\n+   of an earlier option.  Any extension should also only specify other\n+   feature bits and never an architecture bit.  The architecture is inferred\n+   from the declaration of the extension.  */\n static void\n arm_test_cpu_arch_data (void)\n {\n   const arch_option *arch;\n   const cpu_option *cpu;\n+  auto_sbitmap target_isa (isa_num_bits);\n   auto_sbitmap isa1 (isa_num_bits);\n   auto_sbitmap isa2 (isa_num_bits);\n \n@@ -31238,6 +31241,8 @@ arm_test_cpu_arch_data (void)\n       if (arch->common.extensions == NULL)\n \tcontinue;\n \n+      arm_initialize_isa (target_isa, arch->common.isa_bits);\n+\n       for (ext1 = arch->common.extensions; ext1->name != NULL; ++ext1)\n \t{\n \t  if (ext1->alias)\n@@ -31250,7 +31255,13 @@ arm_test_cpu_arch_data (void)\n \t\tcontinue;\n \n \t      arm_initialize_isa (isa2, ext2->isa_bits);\n+\t      /* If the option is a subset of the parent option, it doesn't\n+\t\t add anything and so isn't useful.  */\n \t      ASSERT_TRUE (!bitmap_subset_p (isa2, isa1));\n+\n+\t      /* If the extension specifies any architectural bits then\n+\t\t disallow it.  Extensions should only specify feature bits.  */\n+\t      ASSERT_TRUE (!bitmap_intersect_p (isa2, target_isa));\n \t    }\n \t}\n     }\n@@ -31262,6 +31273,8 @@ arm_test_cpu_arch_data (void)\n       if (cpu->common.extensions == NULL)\n \tcontinue;\n \n+      arm_initialize_isa (target_isa, arch->common.isa_bits);\n+\n       for (ext1 = cpu->common.extensions; ext1->name != NULL; ++ext1)\n \t{\n \t  if (ext1->alias)\n@@ -31274,7 +31287,13 @@ arm_test_cpu_arch_data (void)\n \t\tcontinue;\n \n \t      arm_initialize_isa (isa2, ext2->isa_bits);\n+\t      /* If the option is a subset of the parent option, it doesn't\n+\t\t add anything and so isn't useful.  */\n \t      ASSERT_TRUE (!bitmap_subset_p (isa2, isa1));\n+\n+\t      /* If the extension specifies any architectural bits then\n+\t\t disallow it.  Extensions should only specify feature bits.  */\n+\t      ASSERT_TRUE (!bitmap_intersect_p (isa2, target_isa));\n \t    }\n \t}\n     }"}]}