{"sha": "861c34958294cbbea117d71b4333aff1c53b34fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYxYzM0OTU4Mjk0Y2JiZWExMTdkNzFiNDMzM2FmZjFjNTNiMzRmYQ==", "commit": {"author": {"name": "Gary Benson", "email": "gbenson@redhat.com", "date": "2014-05-08T09:13:44Z"}, "committer": {"name": "Gary Benson", "email": "gary@gcc.gnu.org", "date": "2014-05-08T09:13:44Z"}, "message": "cp-demangle.c (struct d_component_stack): New structure.\n\nlibiberty/\n2014-05-08  Gary Benson  <gbenson@redhat.com>\n\n\t* cp-demangle.c (struct d_component_stack): New structure.\n\t(struct d_print_info): New field component_stack.\n\t(d_print_init): Initialize the above.\n\t(d_print_comp_inner): Renamed from d_print_comp.\n\tDo not restore template stack if it would cause a loop.\n\t(d_print_comp): New function.\n\t* testsuite/demangle-expected: New test cases.\n\nFrom-SVN: r210205", "tree": {"sha": "b2237521f37447dc23a584161da7ce09557d3dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2237521f37447dc23a584161da7ce09557d3dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/861c34958294cbbea117d71b4333aff1c53b34fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861c34958294cbbea117d71b4333aff1c53b34fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861c34958294cbbea117d71b4333aff1c53b34fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861c34958294cbbea117d71b4333aff1c53b34fa/comments", "author": null, "committer": null, "parents": [{"sha": "d1f1a283e496aabb3974d20bb4b9cd4a76f2d9fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f1a283e496aabb3974d20bb4b9cd4a76f2d9fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f1a283e496aabb3974d20bb4b9cd4a76f2d9fa"}], "stats": {"total": 96, "additions": 90, "deletions": 6}, "files": [{"sha": "335a47db3c287a1557e28a41e2987688772c69eb", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861c34958294cbbea117d71b4333aff1c53b34fa/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861c34958294cbbea117d71b4333aff1c53b34fa/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=861c34958294cbbea117d71b4333aff1c53b34fa", "patch": "@@ -1,3 +1,13 @@\n+2014-05-08  Gary Benson  <gbenson@redhat.com>\n+\n+\t* cp-demangle.c (struct d_component_stack): New structure.\n+\t(struct d_print_info): New field component_stack.\n+\t(d_print_init): Initialize the above.\n+\t(d_print_comp_inner): Renamed from d_print_comp.\n+\tDo not restore template stack if it would cause a loop.\n+\t(d_print_comp): New function.\n+\t* testsuite/demangle-expected: New test cases.\n+\n 2014-04-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/56781"}, {"sha": "68d8ee16c936ee6bbb92790e0a6f249a1988f7d3", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861c34958294cbbea117d71b4333aff1c53b34fa/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861c34958294cbbea117d71b4333aff1c53b34fa/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=861c34958294cbbea117d71b4333aff1c53b34fa", "patch": "@@ -275,6 +275,16 @@ struct d_growable_string\n   int allocation_failure;\n };\n \n+/* Stack of components, innermost first, used to avoid loops.  */\n+\n+struct d_component_stack\n+{\n+  /* This component.  */\n+  const struct demangle_component *dc;\n+  /* This component's parent.  */\n+  const struct d_component_stack *parent;\n+};\n+\n /* A demangle component and some scope captured when it was first\n    traversed.  */\n \n@@ -327,6 +337,8 @@ struct d_print_info\n   int pack_index;\n   /* Number of d_print_flush calls so far.  */\n   unsigned long int flush_count;\n+  /* Stack of components, innermost first, used to avoid loops.  */\n+  const struct d_component_stack *component_stack;\n   /* Array of saved scopes for evaluating substitutions.  */\n   struct d_saved_scope *saved_scopes;\n   /* Index of the next unused saved scope in the above array.  */\n@@ -3934,6 +3946,8 @@ d_print_init (struct d_print_info *dpi, demangle_callbackref callback,\n \n   dpi->demangle_failure = 0;\n \n+  dpi->component_stack = NULL;\n+\n   dpi->saved_scopes = NULL;\n   dpi->next_saved_scope = 0;\n   dpi->num_saved_scopes = 0;\n@@ -4269,8 +4283,8 @@ d_get_saved_scope (struct d_print_info *dpi,\n /* Subroutine to handle components.  */\n \n static void\n-d_print_comp (struct d_print_info *dpi, int options,\n-              const struct demangle_component *dc)\n+d_print_comp_inner (struct d_print_info *dpi, int options,\n+\t\t  const struct demangle_component *dc)\n {\n   /* Magic variable to let reference smashing skip over the next modifier\n      without needing to modify *dc.  */\n@@ -4673,11 +4687,30 @@ d_print_comp (struct d_print_info *dpi, int options,\n \t      }\n \t    else\n \t      {\n+\t\tconst struct d_component_stack *dcse;\n+\t\tint found_self_or_parent = 0;\n+\n \t\t/* This traversal is reentering SUB as a substition.\n-\t\t   Restore the original templates temporarily.  */\n-\t\tsaved_templates = dpi->templates;\n-\t\tdpi->templates = scope->templates;\n-\t\tneed_template_restore = 1;\n+\t\t   If we are not beneath SUB or DC in the tree then we\n+\t\t   need to restore SUB's template stack temporarily.  */\n+\t\tfor (dcse = dpi->component_stack; dcse != NULL;\n+\t\t     dcse = dcse->parent)\n+\t\t  {\n+\t\t    if (dcse->dc == sub\n+\t\t\t|| (dcse->dc == dc\n+\t\t\t    && dcse != dpi->component_stack))\n+\t\t      {\n+\t\t\tfound_self_or_parent = 1;\n+\t\t\tbreak;\n+\t\t      }\n+\t\t  }\n+\n+\t\tif (!found_self_or_parent)\n+\t\t  {\n+\t\t    saved_templates = dpi->templates;\n+\t\t    dpi->templates = scope->templates;\n+\t\t    need_template_restore = 1;\n+\t\t  }\n \t      }\n \n \t    a = d_lookup_template_argument (dpi, sub);\n@@ -5316,6 +5349,21 @@ d_print_comp (struct d_print_info *dpi, int options,\n     }\n }\n \n+static void\n+d_print_comp (struct d_print_info *dpi, int options,\n+\t      const struct demangle_component *dc)\n+{\n+  struct d_component_stack self;\n+\n+  self.dc = dc;\n+  self.parent = dpi->component_stack;\n+  dpi->component_stack = &self;\n+\n+  d_print_comp_inner (dpi, options, dc);\n+\n+  dpi->component_stack = self.parent;\n+}\n+\n /* Print a Java dentifier.  For Java we try to handle encoded extended\n    Unicode characters.  The C++ ABI doesn't mention Unicode encoding,\n    so we don't it for C++.  Characters are encoded as"}, {"sha": "453f9a381b600ac0eb9bcc5102aba8cae9a84f89", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861c34958294cbbea117d71b4333aff1c53b34fa/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861c34958294cbbea117d71b4333aff1c53b34fa/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=861c34958294cbbea117d71b4333aff1c53b34fa", "patch": "@@ -4294,6 +4294,7 @@ void n<void (A::*)() const &>(void (A::*)() const &)\n --format=gnu-v3\n _ZL1fIiEvv\n void f<int>()\n+# https://sourceware.org/bugzilla/show_bug.cgi?id=14963#c3\n --format=gnu-v3\n _ZSt7forwardIRN1x14refobjiteratorINS0_3refINS0_4mime30multipart_section_processorObjIZ15get_body_parserIZZN14mime_processor21make_section_iteratorERKNS2_INS3_10sectionObjENS0_10ptrrefBaseEEEbENKUlvE_clEvEUlSB_bE_ZZNS6_21make_section_iteratorESB_bENKSC_clEvEUlSB_E0_ENS1_INS2_INS0_20outputrefiteratorObjIiEES8_EEEERKSsSB_OT_OT0_EUlmE_NS3_32make_multipart_default_discarderISP_EEEES8_EEEEEOT_RNSt16remove_referenceISW_E4typeE\n x::refobjiterator<x::ref<x::mime::multipart_section_processorObj<x::refobjiterator<x::ref<x::outputrefiteratorObj<int>, x::ptrrefBase> > get_body_parser<mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)#1}, mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&)#2}>(std::string const&, x::ref<x::mime::sectionObj, x::ptrrefBase> const&, mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)#1}&&, mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&)#2}&&)::{lambda(unsigned long)#1}, x::mime::make_multipart_default_discarder<mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)#1}&&> >, x::ptrrefBase> >& std::forward<x::refobjiterator<x::ref<x::mime::multipart_section_processorObj<x::refobjiterator<x::ref<x::outputrefiteratorObj<int>, x::ptrrefBase> > get_body_parser<mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)#1}, mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&)#2}>(std::string const&, x::ref<x::mime::sectionObj, x::ptrrefBase> const&, mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)#1}&&, mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&)#2}&&)::{lambda(unsigned long)#1}, x::mime::make_multipart_default_discarder<mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)#1}&&> >, x::ptrrefBase> >&>(std::remove_reference<x::mime::multipart_section_processorObj<x::refobjiterator<x::ref<x::outputrefiteratorObj<int>, x::ptrrefBase> > get_body_parser<mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)#1}, mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&)#2}>(std::string const&, x::ref<x::mime::sectionObj, x::ptrrefBase> const&, mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)#1}&&, mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&)#2}&&)::{lambda(unsigned long)#1}, x::mime::make_multipart_default_discarder<mime_processor::make_section_iterator(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)::{lambda()#1}::operator()() const::{lambda(x::ref<x::mime::sectionObj, x::ptrrefBase> const&, bool)#1}&&> > >::type&)\n@@ -4317,3 +4318,28 @@ A::operator C*<C>\n _ZN1AcvT_IiEI1CEEv\n A::operator C<int><C>()\n A::operator C<int><C>\n+# https://sourceware.org/bugzilla/show_bug.cgi?id=14963#c16\n+--format=gnu-v3\n+_ZN3mdr16in_cached_threadIRZNK4cudr6GPUSet17parallel_for_eachIZN5tns3d20shape_representation7compute7GPUImpl7executeERKNS_1AINS_7ptr_refIKjEELl3ELl3ENS_8c_strideILl1ELl0EEEEERKNS8_INS9_IjEELl4ELl1ESD_EEEUliRKNS1_7ContextERNS7_5StateEE_JSt6vectorISO_SaISO_EEEEEvOT_DpRT0_EUlSP_E_JSt17reference_wrapperISO_EEEENS_12ScopedFutureIDTclfp_spcl7forwardISW_Efp0_EEEEESV_DpOSW_\n+mdr::ScopedFuture<decltype ({parm#1}(((forward<void cudr::GPUSet::parallel_for_each<tns3d::shape_representation::compute::GPUImpl::execute(mdr::A<mdr::ptr_ref<unsigned int const>, 3l, 3l, mdr::c_stride<1l, 0l> > const&, mdr::A<mdr::ptr_ref<unsigned int>, 4l, 1l, mdr::c_stride<1l, 0l> > const&)::{lambda(int, cudr::Context const&, tns3d::shape_representation::compute::GPUImpl::State&)#1}, std::vector<tns3d::shape_representation::compute::GPUImpl::State, std::allocator<tns3d::shape_representation::compute::GPUImpl::State> > >(tns3d::shape_representation::compute::GPUImpl::execute(mdr::A<mdr::ptr_ref<unsigned int const>, 3l, 3l, mdr::c_stride<1l, 0l> > const&, mdr::A<mdr::ptr_ref<unsigned int>, 4l, 1l, mdr::c_stride<1l, 0l> > const&)::{lambda(int, cudr::Context const&, tns3d::shape_representation::compute::GPUImpl::State&)#1}&&, std::vector<tns3d::shape_representation::compute::GPUImpl::State, std::allocator<tns3d::shape_representation::compute::GPUImpl::State> >&) const::{lambda(tns3d::shape_representation::compute::GPUImpl::State&)#1}&>)({parm#2}))...))> mdr::in_cached_thread<void cudr::GPUSet::parallel_for_each<tns3d::shape_representation::compute::GPUImpl::execute(mdr::A<mdr::ptr_ref<unsigned int const>, 3l, 3l, mdr::c_stride<1l, 0l> > const&, mdr::A<mdr::ptr_ref<unsigned int>, 4l, 1l, mdr::c_stride<1l, 0l> > const&)::{lambda(int, cudr::Context const&, tns3d::shape_representation::compute::GPUImpl::State&)#1}, std::vector<tns3d::shape_representation::compute::GPUImpl::State, std::allocator<tns3d::shape_representation::compute::GPUImpl::State> > >(void cudr::GPUSet::parallel_for_each<tns3d::shape_representation::compute::GPUImpl::execute(mdr::A<mdr::ptr_ref<unsigned int const>, 3l, 3l, mdr::c_stride<1l, 0l> > const&, mdr::A<mdr::ptr_ref<unsigned int>, 4l, 1l, mdr::c_stride<1l, 0l> > const&)::{lambda(int, cudr::Context const&, tns3d::shape_representation::compute::GPUImpl::State&)#1}, std::vector<tns3d::shape_representation::compute::GPUImpl::State, std::allocator<tns3d::shape_representation::compute::GPUImpl::State> > >(tns3d::shape_representation::compute::GPUImpl::execute(mdr::A<mdr::ptr_ref<unsigned int const>, 3l, 3l, mdr::c_stride<1l, 0l> > const&, mdr::A<mdr::ptr_ref<unsigned int>, 4l, 1l, mdr::c_stride<1l, 0l> > const&)::{lambda(int, cudr::Context const&, tns3d::shape_representation::compute::GPUImpl::State&)#1}&&, std::vector<tns3d::shape_representation::compute::GPUImpl::State, std::allocator<tns3d::shape_representation::compute::GPUImpl::State> >&) const::{lambda(tns3d::shape_representation::compute::GPUImpl::State&)#1}&, std::vector<tns3d::shape_representation::compute::GPUImpl::State, std::allocator<tns3d::shape_representation::compute::GPUImpl::State> >&) const::{lambda(tns3d::shape_representation::compute::GPUImpl::State&)#1}&, std::reference_wrapper<tns3d::shape_representation::compute::GPUImpl::State> >(void cudr::GPUSet::parallel_for_each<tns3d::shape_representation::compute::GPUImpl::execute(mdr::A<mdr::ptr_ref<unsigned int const>, 3l, 3l, mdr::c_stride<1l, 0l> > const&, mdr::A<mdr::ptr_ref<unsigned int>, 4l, 1l, mdr::c_stride<1l, 0l> > const&)::{lambda(int, cudr::Context const&, tns3d::shape_representation::compute::GPUImpl::State&)#1}, std::vector<tns3d::shape_representation::compute::GPUImpl::State, std::allocator<tns3d::shape_representation::compute::GPUImpl::State> > >(tns3d::shape_representation::compute::GPUImpl::execute(mdr::A<mdr::ptr_ref<unsigned int const>, 3l, 3l, mdr::c_stride<1l, 0l> > const&, mdr::A<mdr::ptr_ref<unsigned int>, 4l, 1l, mdr::c_stride<1l, 0l> > const&)::{lambda(int, cudr::Context const&, tns3d::shape_representation::compute::GPUImpl::State&)#1}&&, std::vector<tns3d::shape_representation::compute::GPUImpl::State, std::allocator<tns3d::shape_representation::compute::GPUImpl::State> >&) const::{lambda(tns3d::shape_representation::compute::GPUImpl::State&)#1}&, (void cudr::GPUSet::parallel_for_each<tns3d::shape_representation::compute::GPUImpl::execute(mdr::A<mdr::ptr_ref<unsigned int const>, 3l, 3l, mdr::c_stride<1l, 0l> > const&, mdr::A<mdr::ptr_ref<unsigned int>, 4l, 1l, mdr::c_stride<1l, 0l> > const&)::{lambda(int, cudr::Context const&, tns3d::shape_representation::compute::GPUImpl::State&)#1}, std::vector<tns3d::shape_representation::compute::GPUImpl::State, std::allocator<tns3d::shape_representation::compute::GPUImpl::State> > >(tns3d::shape_representation::compute::GPUImpl::execute(mdr::A<mdr::ptr_ref<unsigned int const>, 3l, 3l, mdr::c_stride<1l, 0l> > const&, mdr::A<mdr::ptr_ref<unsigned int>, 4l, 1l, mdr::c_stride<1l, 0l> > const&)::{lambda(int, cudr::Context const&, tns3d::shape_representation::compute::GPUImpl::State&)#1}&&, std::vector<tns3d::shape_representation::compute::GPUImpl::State, std::allocator<tns3d::shape_representation::compute::GPUImpl::State> >&) const::{lambda(tns3d::shape_representation::compute::GPUImpl::State&)#1}&&&)...)\n+# https://sourceware.org/bugzilla/show_bug.cgi?id=14963#c18\n+--format=gnu-v3\n+_ZNSt9_Any_data9_M_accessIPZN13ThreadManager10futureTaskISt5_BindIFSt7_Mem_fnIM6RunnerFvvEEPS5_EEEEvOT_EUlvE_EERSC_v\n+void ThreadManager::futureTask<std::_Bind<std::_Mem_fn<void (Runner::*)()> (Runner*)> >(std::_Bind<std::_Mem_fn<void (Runner::*)()> (Runner*)>&&)::{lambda()#1}*& std::_Any_data::_M_access<void ThreadManager::futureTask<std::_Bind<std::_Mem_fn<void (Runner::*)()> (Runner*)> >(void ThreadManager::futureTask<std::_Bind<std::_Mem_fn<void (Runner::*)()> (Runner*)> >(std::_Bind<std::_Mem_fn<void (Runner::*)()> (Runner*)>&&)::{lambda()#1}*&&)::{lambda()#1}*>()\n+# https://sourceware.org/bugzilla/show_bug.cgi?id=14963#c24\n+# aka https://sourceware.org/bugzilla/show_bug.cgi?id=16593\n+--format=gnu-v3\n+_ZNSt9_Any_data9_M_accessIPZN3sel8Selector6SetObjI3FooJPKcMS4_FviEEEEvRT_DpT0_EUlvE_EESA_v\n+void sel::Selector::SetObj<Foo, char const*, void (Foo::*)(int)>(Foo&, char const*, void (Foo::*)(int))::{lambda()#1}*& std::_Any_data::_M_access<void sel::Selector::SetObj<Foo, char const*, void (Foo::*)(int)>(void sel::Selector::SetObj<Foo, char const*, void (Foo::*)(int)>(Foo&, char const*, void (Foo::*)(int))::{lambda()#1}*&, char const*, void (Foo::*)(int))::{lambda()#1}*>()\n+# https://sourceware.org/bugzilla/show_bug.cgi?id=16752#c1\n+--format=gnu-v3\n+_ZNSt9_Any_data9_M_accessIPZN13ThreadManager7newTaskIRSt5_BindIFSt7_Mem_fnIM5DiaryFivEEPS5_EEIEEESt6futureINSt9result_ofIFT_DpT0_EE4typeEEOSF_DpOSG_EUlvE_EERSF_v\n+std::future<std::result_of<std::_Bind<std::_Mem_fn<int (Diary::*)()> (Diary*)>& ()>::type> ThreadManager::newTask<std::_Bind<std::_Mem_fn<int (Diary::*)()> (Diary*)>&>(std::_Bind<std::_Mem_fn<int (Diary::*)()> (Diary*)>&)::{lambda()#1}*& std::_Any_data::_M_access<std::future<std::result_of<std::_Bind<std::_Mem_fn<int (Diary::*)()> (Diary*)>& ()>::type> ThreadManager::newTask<std::_Bind<std::_Mem_fn<int (Diary::*)()> (Diary*)>&>(std::future<std::result_of<std::_Bind<std::_Mem_fn<int (Diary::*)()> (Diary*)>& ()>::type> ThreadManager::newTask<std::_Bind<std::_Mem_fn<int (Diary::*)()> (Diary*)>&>(std::_Bind<std::_Mem_fn<int (Diary::*)()> (Diary*)>&)::{lambda()#1}*&&)::{lambda()#1}*>()\n+# https://sourceware.org/bugzilla/show_bug.cgi?id=16752#c6\n+--format=gnu-v3\n+_ZNSt9_Any_data9_M_accessIPZN6cereal18polymorphic_detail15getInputBindingINS1_16JSONInputArchiveEEENS1_6detail15InputBindingMapIT_E11SerializersERS7_jEUlPvRSt10unique_ptrIvNS5_12EmptyDeleterIvEEEE0_EESA_v\n+cereal::detail::InputBindingMap<cereal::JSONInputArchive>::Serializers cereal::polymorphic_detail::getInputBinding<cereal::JSONInputArchive>(cereal::JSONInputArchive&, unsigned int)::{lambda(void*, std::unique_ptr<void, cereal::detail::EmptyDeleter<void> >&)#2}*& std::_Any_data::_M_access<cereal::detail::InputBindingMap<cereal::JSONInputArchive>::Serializers cereal::polymorphic_detail::getInputBinding<cereal::JSONInputArchive>(cereal::detail::InputBindingMap<cereal::JSONInputArchive>::Serializers cereal::polymorphic_detail::getInputBinding<cereal::JSONInputArchive>(cereal::JSONInputArchive&, unsigned int)::{lambda(void*, std::unique_ptr<void, cereal::detail::EmptyDeleter<void> >&)#2}*&, unsigned int)::{lambda(void*, std::unique_ptr<void, cereal::detail::EmptyDeleter<void> >&)#2}*>()\n+# https://sourceware.org/bugzilla/show_bug.cgi?id=16845#c2\n+--format=gnu-v3\n+_ZNSt9_Any_data9_M_accessIPZ4postISt8functionIFvvEEEvOT_EUlvE_EERS5_v\n+void post<std::function<void ()> >(std::function<void ()>&&)::{lambda()#1}*& std::_Any_data::_M_access<void post<std::function<void ()> >(void post<std::function<void ()> >(std::function<void ()>&&)::{lambda()#1}*&&)::{lambda()#1}*>()"}]}