{"sha": "e2a29465e91c75b337aabd5886af982653faf00e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJhMjk0NjVlOTFjNzViMzM3YWFiZDU4ODZhZjk4MjY1M2ZhZjAwZQ==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-12-22T12:37:16Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-12-22T12:37:16Z"}, "message": "Enable AVX512BITALG\n\ngcc/\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512BITALG_SET,\n\tOPTION_MASK_ISA_AVX512BITALG_UNSET): New.\n\t(ix86_handle_option): Handle -mavx512bitalg, fix 4VNNIW formatting.\n\t* config.gcc: Add avx512vpopcntdqvlintrin.h and avx512bitalgintrin.h.\n\t* config/i386/avx512bitalgintrin.h (_mm512_popcnt_epi8, _mm512_popcnt_epi16,\n\t_mm512_mask_popcnt_epi8, _mm512_maskz_popcnt_epi8, _mm512_mask_popcnt_epi16,\n\t_mm512_maskz_popcnt_epi16, _mm512_bitshuffle_epi64_mask, _mm256_popcnt_epi8,\n\t_mm512_mask_bitshuffle_epi64_mask, _mm256_mask_popcnt_epi8, _mm_popcnt_epi8,\n\t_mm256_maskz_popcnt_epi8, _mm_bitshuffle_epi64_mask, _mm256_popcnt_epi16,\n\t_mm_mask_bitshuffle_epi64_mask, _mm256_bitshuffle_epi64_mask,\n\t_mm256_mask_bitshuffle_epi64_mask, _mm_popcnt_epi16, _mm_maskz_popcnt_epi8,\n\t_mm256_mask_popcnt_epi16, _mm256_maskz_popcnt_epi16, _mm_mask_popcnt_epi8,\n\t_mm_mask_popcnt_epi16, _mm_maskz_popcnt_epi16): New intrinsics.\n\t* config/i386/avx512vpopcntdqvlintrin.h (_mm_popcnt_epi32, _mm_popcnt_epi64,\n\t_mm_mask_popcnt_epi32, _mm_maskz_popcnt_epi32, _mm256_popcnt_epi32,\n\t_mm256_mask_popcnt_epi32, _mm256_maskz_popcnt_epi32, _mm_mask_popcnt_epi64,\n\t_mm_maskz_popcnt_epi64, _mm256_popcnt_epi64, _mm256_mask_popcnt_epi64,\n\t_mm256_maskz_popcnt_epi64): New intrinsics.\n\t* config/i386/cpuid.h (bit_AVX512BITALG): New bit.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect -mavx512bitalg.\n\t* config/i386/i386-builtin-types.def (V64QI_FTYPE_V64QI, V64QI_FTYPE_V64QI,\n\tV4DI_FTYPE_V4DI, UHI_FTYPE_V2DI_V2DI_UHI, USI_FTYPE_V4DI_V4DI_USI,\n\tV4SI_FTYPE_V4SI_V4SI_UHI, V8SI_FTYPE_V8SI_V8SI_UHI): New types.\n\t* config/i386/i386-builtin.def (__builtin_ia32_vpopcountq_v4di,\n\t__builtin_ia32_vpopcountq_v4di_mask, __builtin_ia32_vpopcountq_v2di,\n\t__builtin_ia32_vpopcountq_v2di_mask, __builtin_ia32_vpopcountd_v4si,\n\t__builtin_ia32_vpopcountd_v4si_mask, __builtin_ia32_vpopcountd_v8si,\n\t__builtin_ia32_vpopcountd_v8si_mask, __builtin_ia32_vpopcountb_v64qi,\n\t__builtin_ia32_vpopcountb_v64qi_mask, __builtin_ia32_vpopcountb_v32qi,\n\t__builtin_ia32_vpopcountb_v32qi_mask, __builtin_ia32_vpopcountb_v16qi,\n\t__builtin_ia32_vpopcountb_v16qi_mask, __builtin_ia32_vpopcountw_v32hi,\n\t__builtin_ia32_vpopcountw_v32hi_mask, __builtin_ia32_vpopcountw_v16hi,\n\t__builtin_ia32_vpopcountw_v16hi_mask, __builtin_ia32_vpopcountw_v8hi,\n\t__builtin_ia32_vpopcountw_v8hi_mask, __builtin_ia32_vpshufbitqmb128_mask,\n\t__builtin_ia32_vpshufbitqmb256_mask,\n\t__builtin_ia32_vpshufbitqmb512_mask): New builtins.\n\t* config/i386/i386-c.c (__AVX512BITALG__): New.\n\t* config/i386/i386.c (isa2_opts): Add -mavx512bitalg.\n\t(ix86_valid_target_attribute_inner_p): Ditto.\n\t(ix86_expand_args_builtin): Handle new types.\n\t* config/i386/i386.h (TARGET_AVX512BITALG, TARGET_AVX512BITALG_P): New.\n\t* config/i386/i386.opt: Add -mavx512bitalg.\n\t* config/i386/immintrin.h: Add avx512vpopcntdqvlintrin.h and\n\tavx512bitalgintrin.h.\n\t* config/i386/sse.md (VI48_AVX512VLBW): New iterator.\n\t(vpopcount<mode><mask_name>): Add more types.\n\t(avx512vl_vpshufbitqmb<mode><mask_scalar_merge_name>): New.\n\t* doc/invoke.texi: Add -mavx512bitalg and -mavx512vpopcntdq.\ngcc/testsuite/\n\t* g++.dg/other/i386-2.C: Add new options.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/sse-12.c: Ditto.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/avx512-check.h: Handle bit_AVX512BITALG.\n\t* gcc.target/i386/avx512bitalg-vpopcntb-1.c: New.\n\t* gcc.target/i386/avx512bitalg-vpopcntb.c: Ditto.\n\t* gcc.target/i386/avx512bitalg-vpopcntbvl.c: Ditto.\n\t* gcc.target/i386/avx512bitalg-vpopcntw-1.c: Ditto.\n\t* gcc.target/i386/avx512bitalg-vpopcntw.c: Ditto.\n\t* gcc.target/i386/avx512bitalg-vpopcntwvl.c: Ditto.\n\t* gcc.target/i386/avx512bitalg-vpshufbitqmb-1.c: Ditto.\n\t* gcc.target/i386/avx512bitalg-vpshufbitqmb.c: Ditto.\n\t* gcc.target/i386/avx512bitalgvl-vpopcntb-1.c: Ditto.\n\t* gcc.target/i386/avx512bitalgvl-vpopcntw-1.c: Ditto.\n\t* gcc.target/i386/avx512bitalgvl-vpshufbitqmb-1.c: Ditto.\n\t* gcc.target/i386/avx512vpopcntdqvl-vpopcntd-1.c: Ditto.\n\t* gcc.target/i386/avx512vpopcntdqvl-vpopcntq-1.c: Ditto.\n\t* gcc.target/i386/i386.exp (check_effective_target_avx512bitalg): New.\n\t* gcc.target/i386/avx512vpopcntdq-vpopcntd-1.c: Add more types.\n\t* gcc.target/i386/avx512vpopcntdq-vpopcntd.c: Handle new intrinsics.\n\t* gcc.target/i386/avx512vpopcntdq-vpopcntq-1.c: Ditto.\n\t* gcc.target/i386/avx512vpopcntdq-vpopcntq.c: Ditto.\n\nCo-Authored-By: Sebastian Peryt <sebastian.peryt@intel.com>\n\nFrom-SVN: r255975", "tree": {"sha": "b8fee74f68676ef891dd3ffc540bff331f528c36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8fee74f68676ef891dd3ffc540bff331f528c36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2a29465e91c75b337aabd5886af982653faf00e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a29465e91c75b337aabd5886af982653faf00e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a29465e91c75b337aabd5886af982653faf00e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a29465e91c75b337aabd5886af982653faf00e/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fefab9536e9d986ed0ffbdeeb0ef851578385564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fefab9536e9d986ed0ffbdeeb0ef851578385564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fefab9536e9d986ed0ffbdeeb0ef851578385564"}], "stats": {"total": 1168, "additions": 1122, "deletions": 46}, "files": [{"sha": "084718852be23c76668e5383ffd0a0fdc5757d6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -1,3 +1,55 @@\n+2017-12-22  Julia Koval  <julia.koval@intel.com>\n+\tSebastian Peryt <sebastian.peryt@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512BITALG_SET,\n+\tOPTION_MASK_ISA_AVX512BITALG_UNSET): New.\n+\t(ix86_handle_option): Handle -mavx512bitalg, fix 4VNNIW formatting.\n+\t* config.gcc: Add avx512vpopcntdqvlintrin.h and avx512bitalgintrin.h.\n+\t* config/i386/avx512bitalgintrin.h (_mm512_popcnt_epi8, _mm512_popcnt_epi16,\n+\t_mm512_mask_popcnt_epi8, _mm512_maskz_popcnt_epi8, _mm512_mask_popcnt_epi16,\n+\t_mm512_maskz_popcnt_epi16, _mm512_bitshuffle_epi64_mask, _mm256_popcnt_epi8,\n+\t_mm512_mask_bitshuffle_epi64_mask, _mm256_mask_popcnt_epi8, _mm_popcnt_epi8,\n+\t_mm256_maskz_popcnt_epi8, _mm_bitshuffle_epi64_mask, _mm256_popcnt_epi16,\n+\t_mm_mask_bitshuffle_epi64_mask, _mm256_bitshuffle_epi64_mask,\n+\t_mm256_mask_bitshuffle_epi64_mask, _mm_popcnt_epi16, _mm_maskz_popcnt_epi8,\n+\t_mm256_mask_popcnt_epi16, _mm256_maskz_popcnt_epi16, _mm_mask_popcnt_epi8,\n+\t_mm_mask_popcnt_epi16, _mm_maskz_popcnt_epi16): New intrinsics.\n+\t* config/i386/avx512vpopcntdqvlintrin.h (_mm_popcnt_epi32, _mm_popcnt_epi64,\n+\t_mm_mask_popcnt_epi32, _mm_maskz_popcnt_epi32, _mm256_popcnt_epi32,\n+\t_mm256_mask_popcnt_epi32, _mm256_maskz_popcnt_epi32, _mm_mask_popcnt_epi64,\n+\t_mm_maskz_popcnt_epi64, _mm256_popcnt_epi64, _mm256_mask_popcnt_epi64,\n+\t_mm256_maskz_popcnt_epi64): New intrinsics.\n+\t* config/i386/cpuid.h (bit_AVX512BITALG): New bit.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect -mavx512bitalg.\n+\t* config/i386/i386-builtin-types.def (V64QI_FTYPE_V64QI, V64QI_FTYPE_V64QI,\n+\tV4DI_FTYPE_V4DI, UHI_FTYPE_V2DI_V2DI_UHI, USI_FTYPE_V4DI_V4DI_USI,\n+\tV4SI_FTYPE_V4SI_V4SI_UHI, V8SI_FTYPE_V8SI_V8SI_UHI): New types.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_vpopcountq_v4di,\n+\t__builtin_ia32_vpopcountq_v4di_mask, __builtin_ia32_vpopcountq_v2di,\n+\t__builtin_ia32_vpopcountq_v2di_mask, __builtin_ia32_vpopcountd_v4si,\n+\t__builtin_ia32_vpopcountd_v4si_mask, __builtin_ia32_vpopcountd_v8si,\n+\t__builtin_ia32_vpopcountd_v8si_mask, __builtin_ia32_vpopcountb_v64qi,\n+\t__builtin_ia32_vpopcountb_v64qi_mask, __builtin_ia32_vpopcountb_v32qi,\n+\t__builtin_ia32_vpopcountb_v32qi_mask, __builtin_ia32_vpopcountb_v16qi,\n+\t__builtin_ia32_vpopcountb_v16qi_mask, __builtin_ia32_vpopcountw_v32hi,\n+\t__builtin_ia32_vpopcountw_v32hi_mask, __builtin_ia32_vpopcountw_v16hi,\n+\t__builtin_ia32_vpopcountw_v16hi_mask, __builtin_ia32_vpopcountw_v8hi,\n+\t__builtin_ia32_vpopcountw_v8hi_mask, __builtin_ia32_vpshufbitqmb128_mask,\n+\t__builtin_ia32_vpshufbitqmb256_mask,\n+\t__builtin_ia32_vpshufbitqmb512_mask): New builtins.\n+\t* config/i386/i386-c.c (__AVX512BITALG__): New.\n+\t* config/i386/i386.c (isa2_opts): Add -mavx512bitalg.\n+\t(ix86_valid_target_attribute_inner_p): Ditto.\n+\t(ix86_expand_args_builtin): Handle new types.\n+\t* config/i386/i386.h (TARGET_AVX512BITALG, TARGET_AVX512BITALG_P): New.\n+\t* config/i386/i386.opt: Add -mavx512bitalg.\n+\t* config/i386/immintrin.h: Add avx512vpopcntdqvlintrin.h and\n+\tavx512bitalgintrin.h.\n+\t* config/i386/sse.md (VI48_AVX512VLBW): New iterator.\n+\t(vpopcount<mode><mask_name>): Add more types.\n+\t(avx512vl_vpshufbitqmb<mode><mask_scalar_merge_name>): New.\n+\t* doc/invoke.texi: Add -mavx512bitalg and -mavx512vpopcntdq.\n+\n 2017-12-22  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n \n \t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512VNNI_SET):"}, {"sha": "73224f60e445f798c303bfcc96347ae7f5a6614d", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -85,6 +85,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_AVX512VNNI_SET \\\n   (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512F_SET)\n #define OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET OPTION_MASK_ISA_AVX512VPOPCNTDQ\n+#define OPTION_MASK_ISA_AVX512BITALG_SET OPTION_MASK_ISA_AVX512BITALG\n #define OPTION_MASK_ISA_RTM_SET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_SET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_SET OPTION_MASK_ISA_RDSEED\n@@ -201,6 +202,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_AVX512VBMI2_UNSET OPTION_MASK_ISA_AVX512VBMI2\n #define OPTION_MASK_ISA_AVX512VNNI_UNSET OPTION_MASK_ISA_AVX512VNNI\n #define OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET OPTION_MASK_ISA_AVX512VPOPCNTDQ\n+#define OPTION_MASK_ISA_AVX512BITALG_UNSET OPTION_MASK_ISA_AVX512BITALG\n #define OPTION_MASK_ISA_RTM_UNSET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_UNSET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_UNSET OPTION_MASK_ISA_RDSEED\n@@ -444,11 +446,17 @@ ix86_handle_option (struct gcc_options *opts,\n \n \t  /* Turn off additional isa flags.  */\n \t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX5124FMAPS_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX5124FMAPS_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit\n+\t\t|= OPTION_MASK_ISA_AVX5124FMAPS_UNSET;\n \t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX5124VNNIW_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX5124VNNIW_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit\n+\t\t|= OPTION_MASK_ISA_AVX5124VNNIW_UNSET;\n \t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET;\n-\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit\n+\t\t|= OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX512BITALG_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit\n+\t\t|= OPTION_MASK_ISA_AVX512BITALG_UNSET;\n \t}\n       return true;\n \n@@ -643,6 +651,22 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mavx512bitalg:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX512BITALG_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX512BITALG_SET;\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512F_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512F_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX512BITALG_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit\n+\t\t|= OPTION_MASK_ISA_AVX512BITALG_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_msgx:\n       if (value)\n \t{"}, {"sha": "8dc83c8cb2ff20dadf5b50580cc95a80d864340b", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -382,7 +382,8 @@ i[34567]86-*-*)\n \t\t       gfniintrin.h cet.h avx512vbmi2intrin.h\n \t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n \t\t       avx512vnnivlintrin.h gfniintrin.h vaesintrin.h\n-\t\t       vpclmulqdqintrin.h\"\n+\t\t       vpclmulqdqintrin.h avx512vpopcntdqvlintrin.h\n+\t\t       avx512bitalgintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -410,7 +411,8 @@ x86_64-*-*)\n \t\t       gfniintrin.h cet.h avx512vbmi2intrin.h\n \t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n \t\t       avx512vnnivlintrin.h gfniintrin.h vaesintrin.h\n-\t\t       vpclmulqdqintrin.h\"\n+\t\t       vpclmulqdqintrin.h gfniintrin.h\n+\t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "b5077078b649885df52749cc04ef0a5dcfe250d7", "filename": "gcc/config/i386/avx512bitalgintrin.h", "status": "added", "additions": 282, "deletions": 0, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Favx512bitalgintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Favx512bitalgintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bitalgintrin.h?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,282 @@\n+/* Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _IMMINTRIN_H_INCLUDED\n+# error \"Never use <avx512bitalgintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512BITALGINTRIN_H_INCLUDED\n+#define _AVX512BITALGINTRIN_H_INCLUDED\n+\n+#ifndef __AVX512BITALG__\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512bitalg\")\n+#define __DISABLE_AVX512BITALG__\n+#endif /* __AVX512BITALG__ */\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_popcnt_epi8 (__m512i __A)\n+{\n+  return (__m512i) __builtin_ia32_vpopcountb_v64qi ((__v64qi) __A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_popcnt_epi16 (__m512i __A)\n+{\n+  return (__m512i) __builtin_ia32_vpopcountw_v32hi ((__v32hi) __A);\n+}\n+\n+#ifdef __DISABLE_AVX512BITALG__\n+#undef __DISABLE_AVX512BITALG__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512BITALG__ */\n+\n+#if !defined(__AVX512BITALG__) || !defined(__AVX512BW__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512bitalg,avx512bw\")\n+#define __DISABLE_AVX512BITALGBW__\n+#endif /* __AVX512VLBW__ */\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_popcnt_epi8 (__m512i __A, __mmask64 __U, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_vpopcountb_v64qi_mask ((__v64qi) __A,\n+\t\t\t\t\t\t\t (__v64qi) __B,\n+\t\t\t\t\t\t\t (__mmask64) __U);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_popcnt_epi8 (__mmask64 __U, __m512i __A)\n+{\n+  return (__m512i) __builtin_ia32_vpopcountb_v64qi_mask ((__v64qi) __A,\n+\t\t\t\t\t\t(__v64qi)\n+\t\t\t\t\t\t_mm512_setzero_si512 (),\n+\t\t\t\t\t\t(__mmask64) __U);\n+}\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_popcnt_epi16 (__m512i __A, __mmask32 __U, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_vpopcountw_v32hi_mask ((__v32hi) __A,\n+\t\t\t\t\t\t\t(__v32hi) __B,\n+\t\t\t\t\t\t\t(__mmask32) __U);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_popcnt_epi16 (__mmask32 __U, __m512i __A)\n+{\n+  return (__m512i) __builtin_ia32_vpopcountw_v32hi_mask ((__v32hi) __A,\n+\t\t\t\t\t\t(__v32hi)\n+\t\t\t\t\t\t_mm512_setzero_si512 (),\n+\t\t\t\t\t\t(__mmask32) __U);\n+}\n+\n+extern __inline __mmask64\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_bitshuffle_epi64_mask (__m512i __A, __m512i __B)\n+{\n+  return (__mmask64) __builtin_ia32_vpshufbitqmb512_mask ((__v8di) __A,\n+\t\t\t\t\t\t (__v8di) __B,\n+\t\t\t\t\t\t (__mmask64) -1);\n+}\n+\n+extern __inline __mmask64\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_bitshuffle_epi64_mask (__mmask8 __M, __m512i __A, __m512i __B)\n+{\n+  return (__mmask64) __builtin_ia32_vpshufbitqmb512_mask ((__v8di) __A,\n+\t\t\t\t\t\t (__v8di) __B,\n+\t\t\t\t\t\t (__mmask64) __M);\n+}\n+\n+#ifdef __DISABLE_AVX512BITALGBW__\n+#undef __DISABLE_AVX512BITALGBW__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512BITALGBW__ */\n+\n+#if !defined(__AVX512BITALG__) || !defined(__AVX512VL__) || !defined(__AVX512BW__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512bitalg,avx512vl,avx512bw\")\n+#define __DISABLE_AVX512BITALGVLBW__\n+#endif /* __AVX512VLBW__ */\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_popcnt_epi8 (__m256i __A, __mmask32 __U, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_vpopcountb_v32qi_mask ((__v32qi) __A,\n+\t\t\t\t\t\t\t (__v32qi) __B,\n+\t\t\t\t\t\t\t (__mmask32) __U);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_popcnt_epi8 (__mmask32 __U, __m256i __A)\n+{\n+  return (__m256i) __builtin_ia32_vpopcountb_v32qi_mask ((__v32qi) __A,\n+\t\t\t\t\t\t(__v32qi)\n+\t\t\t\t\t\t _mm256_setzero_si256 (),\n+\t\t\t\t\t\t(__mmask32) __U);\n+}\n+extern __inline __mmask16\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_bitshuffle_epi64_mask (__m128i __A, __m128i __B)\n+{\n+  return (__mmask16) __builtin_ia32_vpshufbitqmb128_mask ((__v2di) __A,\n+\t\t\t\t\t\t (__v2di) __B,\n+\t\t\t\t\t\t (__mmask16) -1);\n+}\n+\n+extern __inline __mmask16\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_bitshuffle_epi64_mask (__mmask16 __M, __m128i __A, __m128i __B)\n+{\n+  return (__mmask16) __builtin_ia32_vpshufbitqmb128_mask ((__v2di) __A,\n+\t\t\t\t\t\t (__v2di) __B,\n+\t\t\t\t\t\t (__mmask16) __M);\n+}\n+\n+extern __inline __mmask32\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_bitshuffle_epi64_mask (__m256i __A, __m256i __B)\n+{\n+  return (__mmask32) __builtin_ia32_vpshufbitqmb256_mask ((__v4di) __A,\n+\t\t\t\t\t\t (__v4di) __B,\n+\t\t\t\t\t\t (__mmask32) -1);\n+}\n+\n+extern __inline __mmask32\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_bitshuffle_epi64_mask (__mmask32 __M, __m256i __A, __m256i __B)\n+{\n+  return (__mmask32) __builtin_ia32_vpshufbitqmb256_mask ((__v4di) __A,\n+\t\t\t\t\t\t (__v4di) __B,\n+\t\t\t\t\t\t (__mmask32) __M);\n+}\n+\n+#ifdef __DISABLE_AVX512BITALGVLBW__\n+#undef __DISABLE_AVX512BITALGVLBW__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512BITALGVLBW__ */\n+\n+\n+#if !defined(__AVX512BITALG__) || !defined(__AVX512VL__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512bitalg,avx512vl\")\n+#define __DISABLE_AVX512BITALGVL__\n+#endif /* __AVX512VLBW__ */\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_popcnt_epi8 (__m256i __A)\n+{\n+  return (__m256i) __builtin_ia32_vpopcountb_v32qi ((__v32qi) __A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_popcnt_epi16 (__m256i __A)\n+{\n+  return (__m256i) __builtin_ia32_vpopcountw_v16hi ((__v16hi) __A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_popcnt_epi8 (__m128i __A)\n+{\n+  return (__m128i) __builtin_ia32_vpopcountb_v16qi ((__v16qi) __A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_popcnt_epi16 (__m128i __A)\n+{\n+  return (__m128i) __builtin_ia32_vpopcountw_v8hi ((__v8hi) __A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_popcnt_epi16 (__m256i __A, __mmask16 __U, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_vpopcountw_v16hi_mask ((__v16hi) __A,\n+\t\t\t\t\t\t\t(__v16hi) __B,\n+\t\t\t\t\t\t\t(__mmask16) __U);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_popcnt_epi16 (__mmask16 __U, __m256i __A)\n+{\n+  return (__m256i) __builtin_ia32_vpopcountw_v16hi_mask ((__v16hi) __A,\n+\t\t\t\t\t\t(__v16hi)\n+\t\t\t\t\t\t_mm256_setzero_si256 (),\n+\t\t\t\t\t\t(__mmask16) __U);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_popcnt_epi8 (__m128i __A, __mmask16 __U, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_vpopcountb_v16qi_mask ((__v16qi) __A,\n+\t\t\t\t\t\t\t (__v16qi) __B,\n+\t\t\t\t\t\t\t (__mmask16) __U);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_popcnt_epi8 (__mmask16 __U, __m128i __A)\n+{\n+  return (__m128i) __builtin_ia32_vpopcountb_v16qi_mask ((__v16qi) __A,\n+\t\t\t\t\t\t\t (__v16qi)\n+\t\t\t\t\t\t\t _mm_setzero_si128 (),\n+\t\t\t\t\t\t\t (__mmask16) __U);\n+}\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_popcnt_epi16 (__m128i __A, __mmask8 __U, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_vpopcountw_v8hi_mask ((__v8hi) __A,\n+\t\t\t\t\t\t\t(__v8hi) __B,\n+\t\t\t\t\t\t\t(__mmask8) __U);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_popcnt_epi16 (__mmask8 __U, __m128i __A)\n+{\n+  return (__m128i) __builtin_ia32_vpopcountw_v8hi_mask ((__v8hi) __A,\n+\t\t\t\t\t\t\t(__v8hi)\n+\t\t\t\t\t\t\t_mm_setzero_si128 (),\n+\t\t\t\t\t\t\t(__mmask8) __U);\n+}\n+#ifdef __DISABLE_AVX512BITALGVL__\n+#undef __DISABLE_AVX512BITALGVL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512BITALGBW__ */\n+\n+#endif /* _AVX512BITALGINTRIN_H_INCLUDED */"}, {"sha": "c8f57170e01f6170f8af05ea1c33a64d57c1d615", "filename": "gcc/config/i386/avx512vpopcntdqvlintrin.h", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Favx512vpopcntdqvlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Favx512vpopcntdqvlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vpopcntdqvlintrin.h?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,147 @@\n+/* Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _IMMINTRIN_H_INCLUDED\n+# error \"Never use <avx512vpopcntdqvlintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512VPOPCNTDQVLINTRIN_H_INCLUDED\n+#define _AVX512VPOPCNTDQVLINTRIN_H_INCLUDED\n+\n+#if !defined(__AVX512VPOPCNTDQ__) || !defined(__AVX512VL__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512vpopcntdq,avx512vl\")\n+#define __DISABLE_AVX512VPOPCNTDQVL__\n+#endif /* __AVX512VPOPCNTDQVL__ */\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_popcnt_epi32 (__m128i __A)\n+{\n+  return (__m128i) __builtin_ia32_vpopcountd_v4si ((__v4si) __A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_popcnt_epi32 (__m128i __A, __mmask16 __U, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_vpopcountd_v4si_mask ((__v4si) __A,\n+\t\t\t\t\t\t\t (__v4si) __B,\n+\t\t\t\t\t\t\t (__mmask16) __U);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_popcnt_epi32 (__mmask16 __U, __m128i __A)\n+{\n+  return (__m128i) __builtin_ia32_vpopcountd_v4si_mask ((__v4si) __A,\n+\t\t\t\t\t\t\t (__v4si)\n+\t\t\t\t\t\t\t _mm_setzero_si128 (),\n+\t\t\t\t\t\t\t (__mmask16) __U);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_popcnt_epi32 (__m256i __A)\n+{\n+  return (__m256i) __builtin_ia32_vpopcountd_v8si ((__v8si) __A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_popcnt_epi32 (__m256i __A, __mmask16 __U, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_vpopcountd_v8si_mask ((__v8si) __A,\n+\t\t\t\t\t\t\t (__v8si) __B,\n+\t\t\t\t\t\t\t (__mmask16) __U);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_popcnt_epi32 (__mmask16 __U, __m256i __A)\n+{\n+  return (__m256i) __builtin_ia32_vpopcountd_v8si_mask ((__v8si) __A,\n+\t\t\t\t\t\t(__v8si)\n+\t\t\t\t\t\t_mm256_setzero_si256 (),\n+\t\t\t\t\t\t(__mmask16) __U);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_popcnt_epi64 (__m128i __A)\n+{\n+  return (__m128i) __builtin_ia32_vpopcountq_v2di ((__v2di) __A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_popcnt_epi64 (__m128i __A, __mmask8 __U, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_vpopcountq_v2di_mask ((__v2di) __A,\n+\t\t\t\t\t\t\t(__v2di) __B,\n+\t\t\t\t\t\t\t(__mmask8) __U);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_popcnt_epi64 (__mmask8 __U, __m128i __A)\n+{\n+  return (__m128i) __builtin_ia32_vpopcountq_v2di_mask ((__v2di) __A,\n+\t\t\t\t\t\t\t(__v2di)\n+\t\t\t\t\t\t\t_mm_setzero_si128 (),\n+\t\t\t\t\t\t\t(__mmask8) __U);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_popcnt_epi64 (__m256i __A)\n+{\n+  return (__m256i) __builtin_ia32_vpopcountq_v4di ((__v4di) __A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_popcnt_epi64 (__m256i __A, __mmask8 __U, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_vpopcountq_v4di_mask ((__v4di) __A,\n+\t\t\t\t\t\t\t(__v4di) __B,\n+\t\t\t\t\t\t\t(__mmask8) __U);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_popcnt_epi64 (__mmask8 __U, __m256i __A)\n+{\n+  return (__m256i) __builtin_ia32_vpopcountq_v4di_mask ((__v4di) __A,\n+\t\t\t\t\t\t(__v4di)\n+\t\t\t\t\t\t_mm256_setzero_si256 (),\n+\t\t\t\t\t\t(__mmask8) __U);\n+}\n+\n+#ifdef __DISABLE_AVX512VPOPCNTDQVL__\n+#undef __DISABLE_AVX512VPOPCNTDQVL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512VPOPCNTDQVL__ */\n+\n+#endif /* _AVX512VPOPCNTDQVLINTRIN_H_INCLUDED */\n+"}, {"sha": "1660d26579a1f0d0083b7ae1ce77687c52094102", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -103,6 +103,7 @@\n #define bit_VAES\t(1 << 9)\n #define bit_AVX512VNNI\t(1 << 11)\n #define bit_VPCLMULQDQ\t(1 << 10)\n+#define bit_AVX512BITALG\t(1 << 12)\n #define bit_AVX512VPOPCNTDQ\t(1 << 14)\n #define bit_RDPID\t(1 << 22)\n "}, {"sha": "1e069368a913969702f65c04b4b4b64b71604ee1", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -418,6 +418,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_mwaitx = 0, has_clzero = 0, has_pku = 0, has_rdpid = 0;\n   unsigned int has_avx5124fmaps = 0, has_avx5124vnniw = 0;\n   unsigned int has_gfni = 0, has_avx512vbmi2 = 0;\n+  unsigned int has_avx512bitalg = 0;\n   unsigned int has_ibt = 0, has_shstk = 0;\n   unsigned int has_avx512vnni = 0, has_vaes = 0;\n   unsigned int has_vpclmulqdq = 0;\n@@ -515,6 +516,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_gfni = ecx & bit_GFNI;\n       has_vaes = ecx & bit_VAES;\n       has_vpclmulqdq = ecx & bit_VPCLMULQDQ;\n+      has_avx512bitalg = ecx & bit_AVX512BITALG;\n \n       has_avx5124vnniw = edx & bit_AVX5124VNNIW;\n       has_avx5124fmaps = edx & bit_AVX5124FMAPS;\n@@ -1083,6 +1085,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *shstk = has_shstk ? \" -mshstk\" : \" -mno-shstk\";\n       const char *vaes = has_vaes ? \" -mvaes\" : \" -mno-vaes\";\n       const char *vpclmulqdq = has_vpclmulqdq ? \" -mvpclmulqdq\" : \" -mno-vpclmulqdq\";\n+      const char *avx512bitalg = has_avx512bitalg ? \" -mavx512bitalg\" : \" -mno-avx512bitalg\";\n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, sgx, bmi2,\n@@ -1093,7 +1096,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\txsavec, xsaves, avx512dq, avx512bw, avx512vl,\n \t\t\tavx512ifma, avx512vbmi, avx5124fmaps, avx5124vnniw,\n \t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, ibt, shstk,\n-\t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq, NULL);\n+\t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq,\n+\t\t\tavx512bitalg, NULL);\n     }\n \n done:"}, {"sha": "9ecdcc08736f82182f14e0eacf32588b5799111c", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -309,6 +309,8 @@ DEF_FUNCTION_TYPE (V16SI, V4SI)\n DEF_FUNCTION_TYPE (V16SI, V8SI)\n DEF_FUNCTION_TYPE (V16SI, V16SF)\n DEF_FUNCTION_TYPE (V16SI, V16SI)\n+DEF_FUNCTION_TYPE (V32HI, V32HI)\n+DEF_FUNCTION_TYPE (V64QI, V64QI)\n DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, UHI)\n DEF_FUNCTION_TYPE (V8DI, V8DI, V8DI, UQI)\n DEF_FUNCTION_TYPE (V8DI, PV8DI)\n@@ -1256,3 +1258,10 @@ DEF_FUNCTION_TYPE (V4DI, V4DI, V4DI, V4DI, INT)\n DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, V16SI)\n DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, V16SI, INT)\n DEF_FUNCTION_TYPE (V2DI, V2DI, V2DI, V2DI, INT)\n+\n+# BITALG builtins\n+DEF_FUNCTION_TYPE (UHI, V2DI, V2DI, UHI)\n+DEF_FUNCTION_TYPE (USI, V4DI, V4DI, USI)\n+DEF_FUNCTION_TYPE (V4DI, V4DI)\n+DEF_FUNCTION_TYPE (V4SI, V4SI, V4SI, UHI)\n+DEF_FUNCTION_TYPE (V8SI, V8SI, V8SI, UHI)"}, {"sha": "2c6ea3c1042045c552e3c96fe2848eb34058a59a", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -2788,6 +2788,16 @@ BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv16si_mask, \"__builtin\n BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv8di, \"__builtin_ia32_vpopcountq_v8di\", IX86_BUILTIN_VPOPCOUNTQV8DI, UNKNOWN, (int) V8DI_FTYPE_V8DI)\n BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv8di_mask, \"__builtin_ia32_vpopcountq_v8di_mask\", IX86_BUILTIN_VPOPCOUNTQV8DI_MASK, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_UQI)\n \n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv4di, \"__builtin_ia32_vpopcountq_v4di\", IX86_BUILTIN_VPOPCOUNTQV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv4di_mask, \"__builtin_ia32_vpopcountq_v4di_mask\", IX86_BUILTIN_VPOPCOUNTQV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv2di, \"__builtin_ia32_vpopcountq_v2di\", IX86_BUILTIN_VPOPCOUNTQV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv2di_mask, \"__builtin_ia32_vpopcountq_v2di_mask\", IX86_BUILTIN_VPOPCOUNTQV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv4si, \"__builtin_ia32_vpopcountd_v4si\", IX86_BUILTIN_VPOPCOUNTDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv4si_mask, \"__builtin_ia32_vpopcountd_v4si_mask\", IX86_BUILTIN_VPOPCOUNTDV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv8si, \"__builtin_ia32_vpopcountd_v8si\", IX86_BUILTIN_VPOPCOUNTDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpopcountv8si_mask, \"__builtin_ia32_vpopcountd_v8si_mask\", IX86_BUILTIN_VPOPCOUNTDV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_UHI)\n+\n+\n /* RDPID */\n BDESC (OPTION_MASK_ISA_RDPID, CODE_FOR_rdpid, \"__builtin_ia32_rdpid\", IX86_BUILTIN_RDPID, UNKNOWN, (int) UNSIGNED_FTYPE_VOID)\n \n@@ -2805,6 +2815,24 @@ BDESC (OPTION_MASK_ISA_VAES, CODE_FOR_vaesenclast_v16qi, \"__builtin_ia32_vaesenc\n BDESC (OPTION_MASK_ISA_VAES, CODE_FOR_vaesenclast_v32qi, \"__builtin_ia32_vaesenclast_v32qi\", IX86_BUILTIN_VAESENCLAST32, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI)\n BDESC (OPTION_MASK_ISA_VAES, CODE_FOR_vaesenclast_v64qi, \"__builtin_ia32_vaesenclast_v64qi\", IX86_BUILTIN_VAESENCLAST64, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI)\n \n+/* BITALG */\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv64qi, \"__builtin_ia32_vpopcountb_v64qi\", IX86_BUILTIN_VPOPCOUNTBV64QI, UNKNOWN, (int) V64QI_FTYPE_V64QI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv64qi_mask, \"__builtin_ia32_vpopcountb_v64qi_mask\", IX86_BUILTIN_VPOPCOUNTBV64QI_MASK, UNKNOWN, (int) V64QI_FTYPE_V64QI_V64QI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv32qi, \"__builtin_ia32_vpopcountb_v32qi\", IX86_BUILTIN_VPOPCOUNTBV32QI, UNKNOWN, (int) V32QI_FTYPE_V32QI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv32qi_mask, \"__builtin_ia32_vpopcountb_v32qi_mask\", IX86_BUILTIN_VPOPCOUNTBV32QI_MASK, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv16qi, \"__builtin_ia32_vpopcountb_v16qi\", IX86_BUILTIN_VPOPCOUNTBV16QI, UNKNOWN, (int) V16QI_FTYPE_V16QI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv16qi_mask, \"__builtin_ia32_vpopcountb_v16qi_mask\", IX86_BUILTIN_VPOPCOUNTBV16QI_MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_UHI)\n+\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv32hi, \"__builtin_ia32_vpopcountw_v32hi\", IX86_BUILTIN_VPOPCOUNTWV32HI, UNKNOWN, (int) V32HI_FTYPE_V32HI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv32hi_mask, \"__builtin_ia32_vpopcountw_v32hi_mask\", IX86_BUILTIN_VPOPCOUNTQV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv16hi, \"__builtin_ia32_vpopcountw_v16hi\", IX86_BUILTIN_VPOPCOUNTWV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv16hi_mask, \"__builtin_ia32_vpopcountw_v16hi_mask\", IX86_BUILTIN_VPOPCOUNTQV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv8hi, \"__builtin_ia32_vpopcountw_v8hi\", IX86_BUILTIN_VPOPCOUNTWV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_vpopcountv8hi_mask, \"__builtin_ia32_vpopcountw_v8hi_mask\", IX86_BUILTIN_VPOPCOUNTQV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_UQI)\n+\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpshufbitqmbv2di_mask, \"__builtin_ia32_vpshufbitqmb128_mask\", IX86_BUILTIN_VPSHUFBITQMB128_MASK, UNKNOWN, (int) UHI_FTYPE_V2DI_V2DI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vpshufbitqmbv4di_mask, \"__builtin_ia32_vpshufbitqmb256_mask\", IX86_BUILTIN_VPSHUFBITQMB256_MASK, UNKNOWN, (int) USI_FTYPE_V4DI_V4DI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BITALG, CODE_FOR_avx512vl_vpshufbitqmbv8di_mask, \"__builtin_ia32_vpshufbitqmb512_mask\", IX86_BUILTIN_VPSHUFBITQMB512_MASK, UNKNOWN, (int) UQI_FTYPE_V8DI_V8DI_UQI)\n BDESC_END (ARGS2, MPX)\n \n /* Builtins for MPX.  */"}, {"sha": "dbd5f43b8caf384e3b9baced70bf1bd1fa62ade4", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -402,6 +402,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__SGX__\");\n   if (isa_flag2 & OPTION_MASK_ISA_AVX5124FMAPS)\n     def_or_undef (parse_in, \"__AVX5124FMAPS__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_AVX512BITALG)\n+    def_or_undef (parse_in, \"__AVX512BITALG__\");\n   if (isa_flag2 & OPTION_MASK_ISA_AVX512VPOPCNTDQ)\n     def_or_undef (parse_in, \"__AVX512VPOPCNTDQ__\");\n   if (isa_flag & OPTION_MASK_ISA_FMA)"}, {"sha": "7b055d19fc19ff706d25a7b92f0026725e0a7df1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -2763,7 +2763,8 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mhle\",\t\tOPTION_MASK_ISA_HLE },\n     { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n     { \"-mclzero\",\tOPTION_MASK_ISA_CLZERO },\n-    { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX }\n+    { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX },\n+    { \"-mavx512bitalg\", OPTION_MASK_ISA_AVX512BITALG }\n   };\n   static struct ix86_target_opts isa_opts[] =\n   {\n@@ -5266,6 +5267,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"avx512vpopcntdq\", OPT_mavx512vpopcntdq),\n     IX86_ATTR_ISA (\"avx512vbmi2\", OPT_mavx512vbmi2),\n     IX86_ATTR_ISA (\"avx512vnni\", OPT_mavx512vnni),\n+    IX86_ATTR_ISA (\"avx512bitalg\", OPT_mavx512bitalg),\n \n     IX86_ATTR_ISA (\"avx512vbmi\", OPT_mavx512vbmi),\n     IX86_ATTR_ISA (\"avx512ifma\", OPT_mavx512ifma),\n@@ -33536,12 +33538,15 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V16SI_FTYPE_V4SI:\n     case V16SI_FTYPE_V16SF:\n     case V16SI_FTYPE_V16SI:\n+    case V64QI_FTYPE_V64QI:\n+    case V32HI_FTYPE_V32HI:\n     case V16SF_FTYPE_V16SF:\n     case V8DI_FTYPE_UQI:\n     case V8DI_FTYPE_V8DI:\n     case V8DF_FTYPE_V4DF:\n     case V8DF_FTYPE_V2DF:\n     case V8DF_FTYPE_V8DF:\n+    case V4DI_FTYPE_V4DI:\n       nargs = 1;\n       break;\n     case V4SF_FTYPE_V4SF_VEC_MERGE:\n@@ -33918,6 +33923,10 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case HI_FTYPE_V16SF_INT_UHI:\n     case QI_FTYPE_V8SF_INT_UQI:\n     case QI_FTYPE_V4SF_INT_UQI:\n+    case UHI_FTYPE_V2DI_V2DI_UHI:\n+    case USI_FTYPE_V4DI_V4DI_USI:\n+    case V4SI_FTYPE_V4SI_V4SI_UHI:\n+    case V8SI_FTYPE_V8SI_V8SI_UHI:\n       nargs = 3;\n       mask_pos = 1;\n       nargs_constant = 1;"}, {"sha": "3b953de506a33553d9ffa44b8d2784271093e69c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -91,6 +91,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AVX512VPOPCNTDQ_P(x) TARGET_ISA_AVX512VPOPCNTDQ_P(x)\n #define TARGET_AVX512VNNI\tTARGET_ISA_AVX512VNNI\n #define TARGET_AVX512VNNI_P(x) TARGET_ISA_AVX512VNNI_P(x)\n+#define TARGET_AVX512BITALG\tTARGET_ISA_AVX512BITALG\n+#define TARGET_AVX512BITALG_P(x) TARGET_ISA_AVX512BITALG_P(x)\n #define TARGET_FMA\tTARGET_ISA_FMA\n #define TARGET_FMA_P(x)\tTARGET_ISA_FMA_P(x)\n #define TARGET_SSE4A\tTARGET_ISA_SSE4A"}, {"sha": "01cdac80b1969d4aab587108184e6fa11d7e333a", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -745,6 +745,10 @@ mavx512vnni\n Target Report Mask(ISA_AVX512VNNI) Var(ix86_isa_flags) Save\n Support AVX512VNNI built-in functions and code generation.\n \n+mavx512bitalg\n+Target Report Mask(ISA_AVX512BITALG) Var(ix86_isa_flags2) Save\n+Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512BITALG built-in functions and code generation.\n+\n mfma\n Target Report Mask(ISA_FMA) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and FMA built-in functions and code generation."}, {"sha": "0a68501c127d04ebe1deb66e780e1cf2ee8c25d1", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -82,6 +82,10 @@\n \n #include <avx512vnnivlintrin.h>\n \n+#include <avx512vpopcntdqvlintrin.h>\n+\n+#include <avx512bitalgintrin.h>\n+\n #include <shaintrin.h>\n \n #include <lzcntintrin.h>"}, {"sha": "f4f68eb5699aac07ca1f095d64164d4ab57f2af4", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -181,6 +181,9 @@\n \n   ;; For VPCLMULQDQ support\n   UNSPEC_VPCLMULQDQ\n+\n+  ;; For AVX512BITALG support\n+  UNSPEC_VPSHUFBIT\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -501,6 +504,10 @@\n    (V4SI \"TARGET_AVX2\") (V2DI \"TARGET_AVX2\")\n    (V8SI \"TARGET_AVX2\") (V4DI \"TARGET_AVX2\")])\n \n+(define_mode_iterator VI48_AVX512VLBW\n+  [(V8DI \"TARGET_AVX512BW\") (V4DI  \"TARGET_AVX512VL\")\n+\t(V2DI  \"TARGET_AVX512VL\")])\n+\n (define_mode_attr avx512\n   [(V16QI \"avx512vl\") (V32QI \"avx512vl\") (V64QI \"avx512bw\")\n    (V8HI  \"avx512vl\") (V16HI  \"avx512vl\") (V32HI \"avx512bw\")\n@@ -20023,9 +20030,9 @@\n     (set_attr (\"mode\") (\"TI\"))])\n \n (define_insn \"vpopcount<mode><mask_name>\"\n-  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n-\t(popcount:VI48_512\n-          (match_operand:VI48_512 1 \"nonimmediate_operand\" \"vm\")))]\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(popcount:VI48_AVX512VL\n+\t  (match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX512VPOPCNTDQ\"\n   \"vpopcnt<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\")\n \n@@ -20066,6 +20073,13 @@\n   \"TARGET_SSE && TARGET_64BIT\"\n   \"jmp\\t%P1\")\n \n+(define_insn \"vpopcount<mode><mask_name>\"\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(popcount:VI12_AVX512VL\n+\t  (match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512BITALG\"\n+  \"vpopcnt<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\")\n+\n (define_insn \"vgf2p8affineinvqb_<mode><mask_name>\"\n   [(set (match_operand:VI1_AVX512F 0 \"register_operand\" \"=x,x,v\")\n \t(unspec:VI1_AVX512F [(match_operand:VI1_AVX512F 1 \"register_operand\" \"%0,x,v\")\n@@ -20514,3 +20528,14 @@\n   \"TARGET_VPCLMULQDQ\"\n   \"vpclmulqdq\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"avx512vl_vpshufbitqmb<mode><mask_scalar_merge_name>\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n+\t(unspec:<avx512fmaskmode>\n+\t  [(match_operand:VI48_AVX512VLBW 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI48_AVX512VLBW 2 \"nonimmediate_operand\" \"vm\")]\n+\tUNSPEC_VPSHUFBIT))]\n+  \"TARGET_AVX512BITALG\"\n+  \"vpshufbitqmb\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])"}, {"sha": "b15cc4470926817baf513ea2264e303683870180", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -1208,7 +1208,7 @@ See RS/6000 and PowerPC Options.\n -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mlwp  -mmpx  @gol\n -mmwaitx  -mclzero  -mpku  -mthreads -mgfni  -mvaes  @gol\n -mcet -mibt -mshstk -mforce-indirect-call -mavx512vbmi2 @gol\n--mvpclmulqdq @gol\n+-mvpclmulqdq -mavx512bitalg -mavx512vpopcntdq @gol\n -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy}  -mmemset-strategy=@var{strategy} @gol\n@@ -26165,12 +26165,19 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mvpclmulqdq\n @opindex mvpclmulqdq\n+@need 200\n+@itemx -mavx512bitalg\n+@opindex mavx512bitalg\n+@need 200\n+@itemx -mavx512vpopcntdq\n+@opindex mavx512vpopcntdq\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,\n AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, BMI, BMI2, VAES,\n FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, MPX, MWAITX, PKU, IBT, SHSTK, AVX512VBMI2,\n-GFNI, VPCLMULQDQ, 3DNow!@: or enhanced 3DNow!@: extended instruction sets.\n+GFNI, VPCLMULQDQ, AVX512BITALG, AVX512VPOPCNTDQ3DNow!@: or enhanced 3DNow!@:\n+extended instruction sets.\n Each has a corresponding @option{-mno-} option to disable use of these\n instructions.\n "}, {"sha": "fb9c339ea3f3aee7031c0e611a3dc1b6af9b4d93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -1,3 +1,32 @@\n+2017-12-22  Julia Koval  <julia.koval@intel.com>\n+\tSebastian Peryt <sebastian.peryt@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add new options.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/sse-12.c: Ditto.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/avx512-check.h: Handle bit_AVX512BITALG.\n+\t* gcc.target/i386/avx512bitalg-vpopcntb-1.c: New.\n+\t* gcc.target/i386/avx512bitalg-vpopcntb.c: Ditto.\n+\t* gcc.target/i386/avx512bitalg-vpopcntbvl.c: Ditto.\n+\t* gcc.target/i386/avx512bitalg-vpopcntw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bitalg-vpopcntw.c: Ditto.\n+\t* gcc.target/i386/avx512bitalg-vpopcntwvl.c: Ditto.\n+\t* gcc.target/i386/avx512bitalg-vpshufbitqmb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bitalg-vpshufbitqmb.c: Ditto.\n+\t* gcc.target/i386/avx512bitalgvl-vpopcntb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bitalgvl-vpopcntw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bitalgvl-vpshufbitqmb-1.c: Ditto.\n+\t* gcc.target/i386/avx512vpopcntdqvl-vpopcntd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vpopcntdqvl-vpopcntq-1.c: Ditto.\n+\t* gcc.target/i386/i386.exp (check_effective_target_avx512bitalg): New.\n+\t* gcc.target/i386/avx512vpopcntdq-vpopcntd-1.c: Add more types.\n+\t* gcc.target/i386/avx512vpopcntdq-vpopcntd.c: Handle new intrinsics.\n+\t* gcc.target/i386/avx512vpopcntdq-vpopcntq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vpopcntdq-vpopcntq.c: Ditto.\n+\n 2017-12-22  Mike Stump  <mikestump@comcast.net>\n             Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "75a8c27bb1615488a058316b2fe55bc7b87ffa11", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -1,12 +1,12 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni\" } */\n-\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n    popcntintrin.h, fmaintrin.h, pkuintrin.h, avx5124fmapsintrin.h,\n    avx5124vnniwintrin.h, avx512vpopcntdqintrin.h gfniintrin.h\n-   and mm_malloc.h.h are usable with -O -pedantic-errors.  */\n+   avx512bitalgintrin.h and mm_malloc.h.h are usable with -O\n+   -pedantic-errors.  */\n \n #include <x86intrin.h>\n "}, {"sha": "444c246aa3235e05829a78cae7db6b5478838623", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -1,10 +1,11 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n    popcntintrin.h, fmaintrin.h, pkuintrin.h, avx5124fmapsintrin.h,\n-   avx5124vnniwintrin.h, avx512vpopcntdqintrin.h gfniintrin.h and\n-   mm_malloc.h are usable with -O -fkeep-inline-functions.  */\n+   avx5124vnniwintrin.h, avx512vpopcntdqintrin.h gfniintrin.h\n+   avx512bitalgintrin.h and mm_malloc.h are usable with -O\n+   -fkeep-inline-functions.  */\n \n #include <x86intrin.h>"}, {"sha": "234e60c818b4bb812560741dcd997b470864701e", "filename": "gcc/testsuite/gcc.target/i386/avx512-check.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -75,6 +75,9 @@ main ()\n #ifdef AVX512VPOPCNTDQ\n       && (ecx & bit_AVX512VPOPCNTDQ)\n #endif\n+#ifdef AVX512BITALG\n+      && (ecx & bit_AVX512BITALG)\n+#endif\n #ifdef GFNI\n       && (ecx & bit_GFNI)\n #endif"}, {"sha": "2c1a9a54ca6066ec34d1eae3d9c2b8c351023a94", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpopcntb-1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntb-1.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bitalg\" } */\n+/* { dg-require-effective-target avx512bitalg } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define AVX512BITALG\n+#define SIZE (AVX512F_LEN / 8)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+#define TYPE char\n+\n+int\n+CALC (TYPE v)\n+{\n+  int ret;\n+  int i;\n+\n+ ret = 0;\n+ for (i = 0; i < sizeof(v) * 8; i++)\n+   if ((v & ((TYPE)1 << (TYPE) i)))\n+     ret++;\n+\n+ return ret;\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_b) res1, res2, res3, src, src0;\n+  MASK_TYPE mask = MASK_VALUE;\n+  TYPE res_ref[SIZE];\n+  src.x = INTRINSIC (_set1_epi8) (0x3D);\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+  {\n+    res_ref[i] = CALC (src.a[i]);\n+    src0.a[i] = DEFAULT_VALUE;\n+  }\n+\n+  res1.x = INTRINSIC (_popcnt_epi8)       (src.x);\n+  res2.x = INTRINSIC (_mask_popcnt_epi8)  (src.x, mask, src0.x);\n+  res3.x = INTRINSIC (_maskz_popcnt_epi8) (mask, src.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "b23da58dbaf370b2a744df98dbc3ef2011a07213", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpopcntb.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntb.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bitalg -mavx512bw\" } */\n+/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#include <x86intrin.h>\n+\n+extern __m512i z, z1;\n+\n+int foo ()\n+{\n+  __mmask16 msk;\n+  __m512i c = _mm512_popcnt_epi8 (z);\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm512_mask_popcnt_epi8 (z, msk, z1);\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm512_maskz_popcnt_epi8 (msk, z);\n+  asm volatile (\"\" : \"+v\" (c));\n+}"}, {"sha": "e6d60f7596c4ac83229f37116d37db7d74711bf7", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpopcntbvl.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntbvl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntbvl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntbvl.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bitalg -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#include <x86intrin.h>\n+\n+extern __m256i y, y_1;\n+extern __m128i x, x_1;\n+\n+int foo ()\n+{\n+  __mmask32 msk32;\n+  __mmask16 msk16;\n+  __m256i c256 = _mm256_popcnt_epi8 (y);\n+  asm volatile (\"\" : \"+v\" (c256));\n+  c256 = _mm256_mask_popcnt_epi8 (y, msk32, y_1);\n+  asm volatile (\"\" : \"+v\" (c256));\n+  c256 = _mm256_maskz_popcnt_epi8 (msk32, y);\n+  asm volatile (\"\" : \"+v\" (c256));\n+  __m128i c128 = _mm_popcnt_epi8 (x);\n+  asm volatile (\"\" : \"+v\" (c128));\n+  c128 = _mm_mask_popcnt_epi8 (x, msk16, x_1);\n+  asm volatile (\"\" : \"+v\" (c128));\n+  c128 = _mm_maskz_popcnt_epi8 (msk16, x);\n+  asm volatile (\"\" : \"+v\" (c128));\n+}"}, {"sha": "500b7f3d1d4d638d6526502ef33d0d5e0d06e02c", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpopcntw-1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntw-1.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bitalg\" } */\n+/* { dg-require-effective-target avx512bitalg } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define AVX512BITALG\n+#define SIZE (AVX512F_LEN / 16)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+#define TYPE short\n+\n+int\n+CALC (TYPE v)\n+{\n+  int ret;\n+  int i;\n+\n+ ret = 0;\n+ for (i = 0; i < sizeof(v) * 8; i++)\n+   if ((v & ((TYPE)1 << (TYPE) i)))\n+     ret++;\n+\n+ return ret;\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) res1, res2, res3, src, src0;\n+  MASK_TYPE mask = MASK_VALUE;\n+  TYPE res_ref[SIZE];\n+  src.x = INTRINSIC (_set1_epi8) (0x3D);\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+  {\n+    res_ref[i] = CALC (src.a[i]);\n+    src0.a[i] = DEFAULT_VALUE;\n+  }\n+\n+  res1.x = INTRINSIC (_popcnt_epi16)       (src.x);\n+  res2.x = INTRINSIC (_mask_popcnt_epi16)  (src.x, mask, src0.x);\n+  res3.x = INTRINSIC (_maskz_popcnt_epi16) (mask, src.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "2c49583b59731deb6f8838f8f914c2b2a95a8cc7", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpopcntw.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntw.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bitalg -mavx512bw\" } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#include <x86intrin.h>\n+\n+extern __m512i z, z1;\n+\n+int foo ()\n+{\n+  __mmask16 msk;\n+  __m512i c = _mm512_popcnt_epi16 (z);\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm512_mask_popcnt_epi16 (z, msk, z1);\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm512_maskz_popcnt_epi16 (msk, z);\n+  asm volatile (\"\" : \"+v\" (c));\n+}"}, {"sha": "b55adc6023a8b7030d749b3f5ac9b44cc7efa6e0", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpopcntwvl.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntwvl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntwvl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpopcntwvl.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bitalg -mavx512bw -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#include <x86intrin.h>\n+\n+extern __m256i y, y_1;\n+extern __m128i x, x_1;\n+\n+int foo ()\n+{\n+  __mmask16 msk16;\n+  __mmask8 msk8;\n+  __m256i c256 = _mm256_popcnt_epi16 (y);\n+  asm volatile (\"\" : \"+v\" (c256));\n+  c256 = _mm256_mask_popcnt_epi16 (y, msk16, y_1);\n+  asm volatile (\"\" : \"+v\" (c256));\n+  c256 = _mm256_maskz_popcnt_epi16 (msk16, y);\n+  asm volatile (\"\" : \"+v\" (c256));\n+  __m128i c128 = _mm_popcnt_epi16 (x);\n+  asm volatile (\"\" : \"+v\" (c128));\n+  c128 = _mm_mask_popcnt_epi16 (x, msk8, x_1);\n+  asm volatile (\"\" : \"+v\" (c128));\n+  c128 = _mm_maskz_popcnt_epi16 (msk8, x);\n+  asm volatile (\"\" : \"+v\" (c128));\n+}"}, {"sha": "2ee6ca641317d174de0c4502ace4b3b9137a73cd", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpshufbitqmb-1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpshufbitqmb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpshufbitqmb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpshufbitqmb-1.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bitalg\" } */\n+/* { dg-require-effective-target avx512bitalg } */\n+\n+#include \"avx512f-helper.h\"\n+\n+#define AVX512BITALG\n+#define SIZE (AVX512F_LEN / 8)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+#define TYPE unsigned long long\n+\n+unsigned char\n+CALC (TYPE a, TYPE b)\n+{\n+ unsigned char res = 0;\n+ for (int i = 0; i < 8; i++)\n+  {\n+    unsigned char m = (b >> (64 - ((i+1)*8))) & 0x3F;\n+    unsigned char bit = (a >> m) & 1;\n+    res |= (bit << (8 - i - 1));\n+  }\n+\n+ return res;\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  TYPE res1, res2;\n+  TYPE res_ref = 0;\n+\n+  src1.x = INTRINSIC (_set1_epi8) (0x13);\n+  src2.x = INTRINSIC (_set1_epi8) (0x17);\n+\n+  src1.a[0] = 0xff;\n+  src2.a[0] = 0xff;\n+\n+  for (int i = 0; i < SIZE/8; i++)\n+  {\n+    unsigned long long bit = CALC (src1.a[i], src2.a[i]);\n+    res_ref |= ((unsigned long long)(CALC (src1.a[i], src2.a[i])) << (i*8));\n+  }\n+\n+  res1 = INTRINSIC (_bitshuffle_epi64_mask)      (src1.x, src2.x);\n+  res2 = INTRINSIC (_mask_bitshuffle_epi64_mask) (mask, src1.x, src2.x);\n+ \n+  if (res1 != res_ref)\n+    abort();\n+\n+  for (int i = 0; i < SIZE; i++)\n+  {\n+    if (!((mask >> i) & 1))\n+      res_ref &= ~((unsigned long long)1 <<i);\n+  }\n+  if (res2 != res_ref)\n+    abort();\n+}"}, {"sha": "52c84c85ae4631efe61a8056632eb57b2790a8fd", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalg-vpshufbitqmb.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpshufbitqmb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpshufbitqmb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalg-vpshufbitqmb.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bitalg -mavx512vl -mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpshufbitqmb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufbitqmb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufbitqmb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*k\\[1-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufbitqmb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*k\\[1-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufbitqmb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*k\\[1-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshufbitqmb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*k\\[1-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128i x128;\n+volatile __m256i x256;\n+volatile __m512i x512;\n+\n+volatile __mmask16 m16;\n+volatile __mmask32 m32;\n+volatile __mmask64 m64;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  m16 = _mm_bitshuffle_epi64_mask (x128, x128);\n+  m32 = _mm256_bitshuffle_epi64_mask (x256, x256);\n+  m64 = _mm512_bitshuffle_epi64_mask (x512, x512);\n+  m16 = _mm_mask_bitshuffle_epi64_mask (m16, x128, x128);\n+  m32 = _mm256_mask_bitshuffle_epi64_mask (m32, x256, x256);\n+  m64 = _mm512_mask_bitshuffle_epi64_mask (m64, x512, x512);\n+}"}, {"sha": "a4e9d63fc1c5bc8a7da1d95e817eae4fed74a673", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalgvl-vpopcntb-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalgvl-vpopcntb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalgvl-vpopcntb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalgvl-vpopcntb-1.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bitalg\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bitalg } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bitalg-vpopcntb-1.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bitalg-vpopcntb-1.c\""}, {"sha": "55fa811fb468daae7ce0e822e2dcc28a61502e37", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalgvl-vpopcntw-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalgvl-vpopcntw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalgvl-vpopcntw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalgvl-vpopcntw-1.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bitalg\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bitalg } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bitalg-vpopcntw-1.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bitalg-vpopcntw-1.c\""}, {"sha": "497e369bf80b309941104be0b5a7d3858ec17adb", "filename": "gcc/testsuite/gcc.target/i386/avx512bitalgvl-vpshufbitqmb-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalgvl-vpshufbitqmb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalgvl-vpshufbitqmb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bitalgvl-vpshufbitqmb-1.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bitalg\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bitalg } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bitalg-vpshufbitqmb-1.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bitalg-vpshufbitqmb-1.c\""}, {"sha": "4fb949fb4c3035b1e9a6f35ee3a745aacb0981ba", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-vpopcntd-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd-1.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -2,17 +2,17 @@\n /* { dg-options \"-O2 -mavx512vpopcntdq\" } */\n /* { dg-require-effective-target avx512vpopcntdq } */\n \n-#define AVX512VPOPCNTDQ\n #include \"avx512f-helper.h\"\n \n+#define AVX512VPOPCNTDQ\n #define SIZE (AVX512F_LEN / 32)\n \n #include \"avx512f-mask-type.h\"\n \n #define TYPE int\n \n-static int\n-compute_popcnt (TYPE v)\n+int\n+CALC (TYPE v)\n {\n   int ret;\n   int i;\n@@ -31,12 +31,12 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3, src, src0;\n   MASK_TYPE mask = MASK_VALUE;\n   TYPE res_ref[SIZE];\n-  src.x = _mm512_set1_epi8 (0x3D);\n+  src.x = INTRINSIC (_set1_epi8) (0x3D);\n   int i;\n \n   for (i = 0; i < SIZE; i++)\n   {\n-    res_ref[i] = compute_popcnt (src.a[i]);\n+    res_ref[i] = CALC (src.a[i]);\n     src0.a[i] = DEFAULT_VALUE;\n   }\n "}, {"sha": "c70f226824e5ef224d82b594ca855faf27131a07", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-vpopcntd.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -1,19 +1,40 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mavx512vpopcntdq\" } */\n+/* { dg-options \"-O2 -mavx512vpopcntdq -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n \n #include <x86intrin.h>\n \n-extern __m512i z, z1;\n+extern __m128i x, x_1;\n+extern __m256i y, y_1;\n+extern __m512i z, z_1;\n \n int foo ()\n {\n   __mmask16 msk;\n+  __mmask8 msk8;\n+  __m128i a = _mm_popcnt_epi32 (x);\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = _mm_mask_popcnt_epi32 (x, msk8, x_1);\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = _mm_maskz_popcnt_epi32 (msk8, x);\n+  asm volatile (\"\" : \"+v\" (a));\n+  __m256i b = _mm256_popcnt_epi32 (y);\n+  asm volatile (\"\" : \"+v\" (b));\n+  b = _mm256_mask_popcnt_epi32 (y, msk8, y_1);\n+  asm volatile (\"\" : \"+v\" (b));\n+  b = _mm256_maskz_popcnt_epi32 (msk8, y);\n+  asm volatile (\"\" : \"+v\" (b));\n   __m512i c = _mm512_popcnt_epi32 (z);\n   asm volatile (\"\" : \"+v\" (c));\n-  c = _mm512_mask_popcnt_epi32 (z, msk, z1);\n+  c = _mm512_mask_popcnt_epi32 (z, msk, z_1);\n   asm volatile (\"\" : \"+v\" (c));\n   c = _mm512_maskz_popcnt_epi32 (msk, z);\n   asm volatile (\"\" : \"+v\" (c));"}, {"sha": "cc0d8b8e0361db48fddbc344c651d0c249ddd515", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-vpopcntq-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq-1.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -2,17 +2,17 @@\n /* { dg-options \"-O2 -mavx512vpopcntdq\" } */\n /* { dg-require-effective-target avx512vpopcntdq } */\n \n-#define AVX512VPOPCNTDQ\n #include \"avx512f-helper.h\"\n \n+#define AVX512VPOPCNTDQ\n #define SIZE (AVX512F_LEN / 64)\n \n #include \"avx512f-mask-type.h\"\n \n #define TYPE long long\n \n-static int\n-compute_popcnt (TYPE v)\n+int\n+CALC (TYPE v)\n {\n   int ret;\n   int i;\n@@ -31,12 +31,12 @@ TEST (void)\n   UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3, src, src0;\n   MASK_TYPE mask = MASK_VALUE;\n   TYPE res_ref[SIZE];\n-  src.x = _mm512_set1_epi8 (0x3D);\n+  src.x = INTRINSIC (_set1_epi8) (0x3D);\n   int i;\n \n   for (i = 0; i < SIZE; i++)\n   {\n-    res_ref[i] = compute_popcnt (src.a[i]);\n+    res_ref[i] = CALC (src.a[i]);\n     src0.a[i] = DEFAULT_VALUE;\n   }\n "}, {"sha": "9f400c005f3eda64ffbb61406d49ffbbd05739eb", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-vpopcntq.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -1,20 +1,40 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mavx512vpopcntdq\" } */\n+/* { dg-options \"-O2 -mavx512vpopcntdq -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n \n #include <x86intrin.h>\n \n-extern __m512i z, z1;\n+extern __m128i x, x_1;\n+extern __m256i y, y_1;\n+extern __m512i z, z_1;\n \n int foo ()\n {\n   __mmask8 msk; \n+  __m128i a = _mm_popcnt_epi64 (x);\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = _mm_mask_popcnt_epi64 (x, msk, x_1);\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = _mm_maskz_popcnt_epi64 (msk, x);\n+  asm volatile (\"\" : \"+v\" (a));\n+  __m256i b = _mm256_popcnt_epi64 (y);\n+  asm volatile (\"\" : \"+v\" (b));\n+  b = _mm256_mask_popcnt_epi64 (y, msk, y_1);\n+  asm volatile (\"\" : \"+v\" (b));\n+  b = _mm256_maskz_popcnt_epi64 (msk, y);\n+  asm volatile (\"\" : \"+v\" (b));\n   __m512i c = _mm512_popcnt_epi64 (z);\n   asm volatile (\"\" : \"+v\" (c));\n-  c = _mm512_mask_popcnt_epi64 (z, msk, z1);\n+  c = _mm512_mask_popcnt_epi64 (z, msk, z_1);\n   asm volatile (\"\" : \"+v\" (c));\n-  c = _mm512_maskz_popcnt_epi64 (msk, z);  \n+  c = _mm512_maskz_popcnt_epi64 (msk, z); \n   asm volatile (\"\" : \"+v\" (c));\n }"}, {"sha": "95e43ce1a980c478bcc6c4248c69f6f0fe774358", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdqvl-vpopcntd-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdqvl-vpopcntd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdqvl-vpopcntd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdqvl-vpopcntd-1.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vpopcntdq -mavx512bw -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vpopcntdq } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512vpopcntdq-vpopcntd-1.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512vpopcntdq-vpopcntd-1.c\""}, {"sha": "6e110e1b5659c9e85801e08cff22446160c8ca48", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdqvl-vpopcntq-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdqvl-vpopcntq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdqvl-vpopcntq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdqvl-vpopcntq-1.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512vpopcntdq\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vpopcntdq } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512vpopcntdq-vpopcntq-1.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512vpopcntdq-vpopcntq-1.c\""}, {"sha": "79d97c31530b1a900f912432b4c45f5e0bb9accf", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -483,6 +483,19 @@ proc check_effective_target_vpclmulqdq { } {\n     } \"-mvpclmulqdq -mavx512vl\" ]\n }\n \n+# Return 1 if avx512_bitalg instructions can be compiled.\n+proc check_effective_target_avx512bitalg { } {\n+    return [check_no_compiler_messages avx512bitalg object {\n+        typedef int __v32hi __attribute__ ((__vector_size__ (64)));\n+\n+        __v32hi\n+        _mm512_popcnt_epi16 (__v32hi __A)\n+        {\n+            return (__v32hi) __builtin_ia32_vpopcountd_v32hi ((__v32hi) __A);\n+        }\n+    } \"-mavx512bitalg\" ]\n+}\n+\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}, {"sha": "cd4509699b72dcfe82fb588a660dd57e1557b84b", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "cc9d00aa1db27557e25a958cdbe60251242eece8", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "99af58a995d39d0a1bc4013f256d740e5ee4267a", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -9,9 +9,9 @@\n    are defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h,\n    mm3dnow.h, fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h,\n    tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h,\n-   avx5124fmapsintrin.h, avx5124vnniwintrin.h, avx512vpopcntdqintrin.h and\n-   mm_malloc.h that reference the proper builtin functions.\n-\n+   avx5124fmapsintrin.h, avx5124vnniwintrin.h, avx512vpopcntdqintrin.h,\n+   avx512bitalgintrin.h and mm_malloc.h that reference the proper builtin\n+   functions.\n    Defining away \"extern\" and \"__inline\" results in all of them being\n    compiled as proper functions.  */\n \n@@ -101,7 +101,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -218,7 +218,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "00d30ba1cdfebdfff7f063d2ff3377e753beb275", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a29465e91c75b337aabd5886af982653faf00e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=e2a29465e91c75b337aabd5886af982653faf00e", "patch": "@@ -8,9 +8,9 @@\n    are defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h,\n    mm3dnow.h, fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h,\n    tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h,\n-   avx5124fmapsintrin.h, avx5124vnniwintrin.h, avx512vpopcntdqintrin.h\n-   and mm_malloc.h that reference the proper builtin functions.\n-\n+   avx5124fmapsintrin.h, avx5124vnniwintrin.h, avx512vpopcntdqintrin.h,\n+   avx512bitalgintrin.h and mm_malloc.h that reference the proper builtin\n+   functions.\n    Defining away \"extern\" and \"__inline\" results in all of them being\n    compiled as proper functions.  */\n \n@@ -676,6 +676,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg\")\n \n #include <x86intrin.h>"}]}