{"sha": "60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "node_id": "C_kwDOANBUbNoAKDYwNDQwZDNjZjUxYWNiOWNiNjM1NDNkNWJiNzFmZDUwY2ZkZDk0NzA", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-10-13T18:50:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-20T10:17:05Z"}, "message": "[Ada] Factor out machine rounding operations\n\ngcc/ada/\n\n\t* sem_eval.ads (Machine_Number): New inline function.\n\t* sem_eval.adb (Machine_Number): New function body implementing\n\tthe machine rounding operation specified by RM 4.9(38/2).\n\t(Check_Non_Static_Context): Call Machine_Number and set the\n\tIs_Machine_Number flag consistently on the resulting node.\n\t* sem_attr.adb (Eval_Attribute) <Attribute_Machine>: Likewise.\n\t* checks.adb (Apply_Float_Conversion_Check): Call Machine_Number.\n\t(Round_Machine): Likewise.", "tree": {"sha": "0c2192593e8843d65666156b6102cd3f8d5c202c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c2192593e8843d65666156b6102cd3f8d5c202c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "931d4819f740ade9707436447b6d7a1148d65d54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931d4819f740ade9707436447b6d7a1148d65d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931d4819f740ade9707436447b6d7a1148d65d54"}], "stats": {"total": 62, "additions": 39, "deletions": 23}, "files": [{"sha": "c85cba9a5aa00f56a693af0973ff89bc2d7014bb", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "patch": "@@ -2171,7 +2171,7 @@ package body Checks is\n          Lo_OK := (Ifirst > 0);\n \n       else\n-         Lo := Machine (Expr_Type, UR_From_Uint (Ifirst), Round_Even, Expr);\n+         Lo := Machine_Number (Expr_Type, UR_From_Uint (Ifirst), Expr);\n          Lo_OK := (Lo >= UR_From_Uint (Ifirst));\n       end if;\n \n@@ -2214,7 +2214,7 @@ package body Checks is\n          Hi := UR_From_Uint (Ilast) + Ureal_Half;\n          Hi_OK := (Ilast < 0);\n       else\n-         Hi := Machine (Expr_Type, UR_From_Uint (Ilast), Round_Even, Expr);\n+         Hi := Machine_Number (Expr_Type, UR_From_Uint (Ilast), Expr);\n          Hi_OK := (Hi <= UR_From_Uint (Ilast));\n       end if;\n \n@@ -5563,7 +5563,7 @@ package body Checks is\n       --  the results in Lo_Right, Hi_Right, Lo_Left, Hi_Left.\n \n       function Round_Machine (B : Ureal) return Ureal;\n-      --  B is a real bound. Round it using mode Round_Even.\n+      --  B is a real bound. Round it to the nearest machine number.\n \n       -----------------\n       -- OK_Operands --\n@@ -5589,7 +5589,7 @@ package body Checks is\n \n       function Round_Machine (B : Ureal) return Ureal is\n       begin\n-         return Machine (Typ, B, Round_Even, N);\n+         return Machine_Number (Typ, B, N);\n       end Round_Machine;\n \n    --  Start of processing for Determine_Range_R"}, {"sha": "f2bb12dae5f514a3d9fd4f2f7be9138a8ab6ccf6", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "patch": "@@ -9251,14 +9251,12 @@ package body Sem_Attr is\n       -- Machine --\n       -------------\n \n-      --  We use the same rounding mode as the one used for RM 4.9(38)\n+      --  We use the same rounding as the one used for RM 4.9(38/2)\n \n       when Attribute_Machine =>\n          Fold_Ureal\n-           (N,\n-            Eval_Fat.Machine\n-              (P_Base_Type, Expr_Value_R (E1), Eval_Fat.Round_Even, N),\n-            Static);\n+           (N, Machine_Number (P_Base_Type, Expr_Value_R (E1), N), Static);\n+         Set_Is_Machine_Number (N);\n \n       ------------------\n       -- Machine_Emax --"}, {"sha": "e3308efbf259cffe8fa63c8482f1f1a6a5e099d0", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "patch": "@@ -523,8 +523,8 @@ package body Sem_Eval is\n               and then Nkind (Parent (N)) in N_Subexpr\n             then\n                Rewrite (N, New_Copy (N));\n-               Set_Realval\n-                 (N, Machine (Base_Type (T), Realval (N), Round_Even, N));\n+               Set_Realval (N, Machine_Number (Base_Type (T), Realval (N), N));\n+               Set_Is_Machine_Number (N);\n             end if;\n          end if;\n \n@@ -575,18 +575,7 @@ package body Sem_Eval is\n               (N, Corresponding_Integer_Value (N) * Small_Value (T));\n \n          elsif not UR_Is_Zero (Realval (N)) then\n-\n-            --  Note: even though RM 4.9(38) specifies biased rounding, this\n-            --  has been modified by AI-100 in order to prevent confusing\n-            --  differences in rounding between static and non-static\n-            --  expressions. AI-100 specifies that the effect of such rounding\n-            --  is implementation dependent, and in GNAT we round to nearest\n-            --  even to match the run-time behavior. Note that this applies\n-            --  to floating point literals, not fixed points ones, even though\n-            --  their compiler representation is also as a universal real.\n-\n-            Set_Realval\n-              (N, Machine (Base_Type (T), Realval (N), Round_Even, N));\n+            Set_Realval (N, Machine_Number (Base_Type (T), Realval (N), N));\n             Set_Is_Machine_Number (N);\n          end if;\n \n@@ -6045,6 +6034,27 @@ package body Sem_Eval is\n       return False;\n    end Is_Statically_Unevaluated;\n \n+   --------------------\n+   -- Machine_Number --\n+   --------------------\n+\n+   --  Historical note: RM 4.9(38) originally specified biased rounding but\n+   --  this has been modified by AI-268 to prevent confusing differences in\n+   --  rounding between static and nonstatic expressions. This AI specifies\n+   --  that the effect of such rounding is implementation-dependent instead,\n+   --  and in GNAT we round to nearest even to match the run-time behavior.\n+   --  Note that this applies to floating-point literals, not fixed-point\n+   --  ones, even though their representation is also a universal real.\n+\n+   function Machine_Number\n+     (Typ : Entity_Id;\n+      Val : Ureal;\n+      N   : Node_Id) return Ureal\n+   is\n+   begin\n+      return Machine (Typ, Val, Round_Even, N);\n+   end Machine_Number;\n+\n    --------------------\n    -- Not_Null_Range --\n    --------------------"}, {"sha": "c2e08b665a91f7d8b213f3ff316ebf36949c41dd", "filename": "gcc/ada/sem_eval.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Fsem_eval.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60440d3cf51acb9cb63543d5bb71fd50cfdd9470/gcc%2Fada%2Fsem_eval.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.ads?ref=60440d3cf51acb9cb63543d5bb71fd50cfdd9470", "patch": "@@ -486,6 +486,13 @@ package Sem_Eval is\n    --  it cannot be determined at compile time. Flag Fixed_Int is used as in\n    --  routine Is_In_Range above.\n \n+   function Machine_Number\n+     (Typ : Entity_Id;\n+      Val : Ureal;\n+      N   : Node_Id) return Ureal;\n+   --  Return the machine number of Typ corresponding to the specified Val as\n+   --  per RM 4.9(38/2). N is a node only used to post warnings.\n+\n    function Not_Null_Range (Lo : Node_Id; Hi : Node_Id) return Boolean;\n    --  Returns True if it can guarantee that Lo .. Hi is not a null range. If\n    --  it cannot (because the value of Lo or Hi is not known at compile time)\n@@ -574,5 +581,6 @@ private\n    pragma Inline (Eval_Unchecked_Conversion);\n \n    pragma Inline (Is_OK_Static_Expression);\n+   pragma Inline (Machine_Number);\n \n end Sem_Eval;"}]}