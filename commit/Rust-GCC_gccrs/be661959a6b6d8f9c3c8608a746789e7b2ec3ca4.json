{"sha": "be661959a6b6d8f9c3c8608a746789e7b2ec3ca4", "node_id": "C_kwDOANBUbNoAKGJlNjYxOTU5YTZiNmQ4ZjljM2M4NjA4YTc0Njc4OWU3YjJlYzNjYTQ", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-01-04T13:58:06Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-01-04T13:58:06Z"}, "message": "libgomp/testsuite: Improve omp_get_device_num() tests\n\nRelated to r12-6208-gebc853deb7cc0487de9ef6e891a007ba853d1933\n\"libgomp: Fix GOMP_DEVICE_NUM_VAR stringification during offload image load\"\n\nThat commit fixed an issue with omp_get_device_num() on gcn/nvptx that\nresulted in having always the value 0.\nThis commit modifies the tests to iterate over all devices such that on a\nmulti-nonhost-device system it had detected that always-zero issue.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.c-c++-common/target-45.c: Iterate over all devices.\n\t* testsuite/libgomp.fortran/target10.f90: Likewise.", "tree": {"sha": "98077e9867316d3f3827f560d06deff68cdf351a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98077e9867316d3f3827f560d06deff68cdf351a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be661959a6b6d8f9c3c8608a746789e7b2ec3ca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be661959a6b6d8f9c3c8608a746789e7b2ec3ca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be661959a6b6d8f9c3c8608a746789e7b2ec3ca4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be661959a6b6d8f9c3c8608a746789e7b2ec3ca4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc853deb7cc0487de9ef6e891a007ba853d1933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc853deb7cc0487de9ef6e891a007ba853d1933", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebc853deb7cc0487de9ef6e891a007ba853d1933"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "837503996d75b8c8333286190c15e41527408450", "filename": "libgomp/testsuite/libgomp.c-c++-common/target-45.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be661959a6b6d8f9c3c8608a746789e7b2ec3ca4/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be661959a6b6d8f9c3c8608a746789e7b2ec3ca4/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ftarget-45.c?ref=be661959a6b6d8f9c3c8608a746789e7b2ec3ca4", "patch": "@@ -14,17 +14,23 @@ int main (void)\n   int device_num;\n   int initial_device;\n \n-  #pragma omp target map(from: device_num, initial_device)\n-  {\n-    initial_device = omp_is_initial_device ();\n-    device_num = omp_get_device_num ();\n-  }\n-\n-  if (initial_device && host_device_num != device_num)\n-    abort ();\n-\n-  if (!initial_device && host_device_num == device_num)\n-    abort ();\n+  for (int i = 0; i <= omp_get_num_devices (); i++)\n+    {\n+      #pragma omp target map(from: device_num, initial_device) device(i)\n+\t{\n+\t  initial_device = omp_is_initial_device ();\n+\t  device_num = omp_get_device_num ();\n+\t}\n+\n+      if (i != device_num)\n+\tabort ();\n+\n+      if (initial_device && host_device_num != device_num)\n+\tabort ();\n+\n+      if (!initial_device && host_device_num == device_num)\n+\tabort ();\n+    }\n \n   return 0;\n }"}, {"sha": "f6951fc90577bb844b0a52f12663bde07db2e0d4", "filename": "libgomp/testsuite/libgomp.fortran/target10.f90", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be661959a6b6d8f9c3c8608a746789e7b2ec3ca4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be661959a6b6d8f9c3c8608a746789e7b2ec3ca4/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftarget10.f90?ref=be661959a6b6d8f9c3c8608a746789e7b2ec3ca4", "patch": "@@ -4,18 +4,20 @@\n program main\n   use omp_lib\n   implicit none\n-  integer :: device_num, host_device_num\n+  integer :: device_num, host_device_num, i\n   logical :: initial_device\n \n   host_device_num = omp_get_device_num ()\n   if (host_device_num .ne. omp_get_initial_device ()) stop 1\n \n-  !$omp target map(from: device_num, initial_device)\n-  initial_device = omp_is_initial_device ()\n-  device_num = omp_get_device_num ()\n-  !$omp end target\n-\n-  if (initial_device .and. (host_device_num .ne. device_num)) stop 2\n-  if ((.not. initial_device) .and. (host_device_num .eq. device_num)) stop 3\n+  do i = 0, omp_get_num_devices ()\n+    !$omp target map(from: device_num, initial_device) device(i)\n+      initial_device = omp_is_initial_device ()\n+      device_num = omp_get_device_num ()\n+    !$omp end target\n+    if (i /= device_num) stop 2\n+    if (initial_device .and. (host_device_num .ne. device_num)) stop 3\n+    if ((.not. initial_device) .and. (host_device_num .eq. device_num)) stop 4\n+  end do\n \n end program main"}]}