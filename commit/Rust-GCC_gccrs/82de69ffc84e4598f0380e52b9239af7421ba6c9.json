{"sha": "82de69ffc84e4598f0380e52b9239af7421ba6c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJkZTY5ZmZjODRlNDU5OGYwMzgwZTUyYjkyMzlhZjc0MjFiYTZjOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2019-10-04T14:27:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2019-10-04T14:27:45Z"}, "message": "range-op.cc (range_tests): Avoid two tests when ints and shorts are the same size.\n\n\t* range-op.cc (range_tests): Avoid two tests when ints and\n\tshorts are the same size.\n\nFrom-SVN: r276581", "tree": {"sha": "2e69292c5163b2470bd4b01780d2b9c235455e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e69292c5163b2470bd4b01780d2b9c235455e12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82de69ffc84e4598f0380e52b9239af7421ba6c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82de69ffc84e4598f0380e52b9239af7421ba6c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82de69ffc84e4598f0380e52b9239af7421ba6c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82de69ffc84e4598f0380e52b9239af7421ba6c9/comments", "author": null, "committer": null, "parents": [{"sha": "b1fc776335a5d905f6ca37cb0e158613b04d0dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1fc776335a5d905f6ca37cb0e158613b04d0dc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1fc776335a5d905f6ca37cb0e158613b04d0dc3"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "02cf6974f1a9c17184a9959ba87003e7b4dd6d75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82de69ffc84e4598f0380e52b9239af7421ba6c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82de69ffc84e4598f0380e52b9239af7421ba6c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82de69ffc84e4598f0380e52b9239af7421ba6c9", "patch": "@@ -1,3 +1,8 @@\n+2019-10-04  Jeff Law  <law@redhat.com>\n+\n+\t* range-op.cc (range_tests): Avoid two tests when ints and\n+\tshorts are the same size.\n+\n 2019-10-04  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/91968"}, {"sha": "fc31485384b3c53123ca26eb95cd5c1eedd914e8", "filename": "gcc/range-op.cc", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82de69ffc84e4598f0380e52b9239af7421ba6c9/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82de69ffc84e4598f0380e52b9239af7421ba6c9/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=82de69ffc84e4598f0380e52b9239af7421ba6c9", "patch": "@@ -2910,10 +2910,14 @@ range_tests ()\n \n   // If a range is in any way outside of the range for the converted\n   // to range, default to the range for the new type.\n-  r1 = value_range_base (integer_zero_node, maxint);\n-  range_cast (r1, short_integer_type_node);\n-  ASSERT_TRUE (r1.lower_bound () == wi::to_wide (minshort)\n-\t       && r1.upper_bound() == wi::to_wide (maxshort));\n+  if (TYPE_PRECISION (TREE_TYPE (maxint))\n+      > TYPE_PRECISION (short_integer_type_node))\n+    {\n+      r1 = value_range_base (integer_zero_node, maxint);\n+      range_cast (r1, short_integer_type_node);\n+      ASSERT_TRUE (r1.lower_bound () == wi::to_wide (minshort)\n+\t\t   && r1.upper_bound() == wi::to_wide (maxshort));\n+    }\n \n   // (unsigned char)[-5,-1] => [251,255].\n   r0 = rold = value_range_base (SCHAR (-5), SCHAR (-1));\n@@ -3020,11 +3024,15 @@ range_tests ()\n   // \"NOT 0 at signed 32-bits\" ==> [-MIN_32,-1][1, +MAX_32].  This is\n   // is outside of the range of a smaller range, return the full\n   // smaller range.\n-  r0 = range_nonzero (integer_type_node);\n-  range_cast (r0, short_integer_type_node);\n-  r1 = value_range_base (TYPE_MIN_VALUE (short_integer_type_node),\n-\t\t\t TYPE_MAX_VALUE (short_integer_type_node));\n-  ASSERT_TRUE (r0 == r1);\n+  if (TYPE_PRECISION (integer_type_node)\n+      > TYPE_PRECISION (short_integer_type_node))\n+    {\n+      r0 = range_nonzero (integer_type_node);\n+      range_cast (r0, short_integer_type_node);\n+      r1 = value_range_base (TYPE_MIN_VALUE (short_integer_type_node),\n+\t\t\t     TYPE_MAX_VALUE (short_integer_type_node));\n+      ASSERT_TRUE (r0 == r1);\n+    }\n \n   // Casting NONZERO from a narrower signed to a wider signed.\n   //"}]}