{"sha": "e045b85836091f2461263a3c3f4f1972b3753f9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA0NWI4NTgzNjA5MWYyNDYxMjYzYTNjM2Y0ZjE5NzJiMzc1M2Y5ZA==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-11-15T21:03:10Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-11-18T11:03:39Z"}, "message": "MSP430: Add mul{hi,si} and {u,}mulsidi3 expanders\n\nGCC generates better code when multiplication operations, which require\nlibrary functions to perform, are caught in early in RTL, rather than\nleaving the operation to be mapped to a library function later on.\n\nWhen there is hardware multiply support, it is more efficient to perform\nwidening multiplication using the hardware multiplier instead of letting\nGCC widen the arguments before calling the multiplication routine in the\nwider mode.\n\ngcc/ChangeLog:\n\n\t* config/msp430/msp430.md (mulhi3): New.\n\t(mulsi3): New.\n\t(mulsidi3): Rename to *mulsidi3_inline.\n\t(umulsidi3): Rename to *umulsidi3_inline.\n\t(mulsidi3): New define_expand.\n\t(umulsidi3): New define_expand.", "tree": {"sha": "7565c2a12be4e7efaeacbc0c109dd27d4ec5fa4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7565c2a12be4e7efaeacbc0c109dd27d4ec5fa4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e045b85836091f2461263a3c3f4f1972b3753f9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e045b85836091f2461263a3c3f4f1972b3753f9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e045b85836091f2461263a3c3f4f1972b3753f9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e045b85836091f2461263a3c3f4f1972b3753f9d/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30270bf042049bf6aee6184e0b7688d9ca7b479d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30270bf042049bf6aee6184e0b7688d9ca7b479d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30270bf042049bf6aee6184e0b7688d9ca7b479d"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "1ec219c0680f74db4508192b7879c0a345fab2c9", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e045b85836091f2461263a3c3f4f1972b3753f9d/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e045b85836091f2461263a3c3f4f1972b3753f9d/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=e045b85836091f2461263a3c3f4f1972b3753f9d", "patch": "@@ -1724,6 +1724,28 @@\n   [(set_attr \"length\" \"2\")]\n )\n \n+(define_expand \"mulhi3\"\n+  [(set (match_operand:HI\t\t\t   0 \"register_operand\" \"=r\")\n+\t(mult:HI (match_operand:HI 1 \"register_operand\" \"%0\")\n+\t\t (match_operand:HI 2 \"register_operand\" \"r\")))]\n+  \"msp430_has_hwmult ()\"\n+  {\n+    msp430_expand_helper (operands, \"__mspabi_mpyi\", false);\n+    DONE;\n+  }\n+)\n+\n+(define_expand \"mulsi3\"\n+  [(set (match_operand:SI\t\t\t   0 \"register_operand\" \"=r\")\n+\t(mult:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n+\t\t (match_operand:SI 2 \"register_operand\" \"r\")))]\n+  \"msp430_has_hwmult ()\"\n+  {\n+    msp430_expand_helper (operands, \"__mspabi_mpyl\", false);\n+    DONE;\n+  }\n+)\n+\n ; libgcc helper functions for widening multiplication aren't currently\n ; generated by gcc, so we can't catch them later and map them to the mspabi\n ; functions.\n@@ -1733,9 +1755,7 @@\n ; If we don't have hardware multiply support, it will generally be slower and\n ; result in larger code to call the mspabi library function to perform the\n ; widening multiplication than just leaving GCC to widen the arguments itself.\n-;\n-; We don't use library functions for SImode->DImode widening since its always\n-; larger and slower than letting GCC widen the arguments inline.\n+\n (define_expand \"mulhisi3\"\n   [(set (match_operand:SI\t\t\t   0 \"register_operand\" \"=r\")\n \t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n@@ -1766,6 +1786,37 @@\n   }\n )\n \n+(define_expand \"mulsidi3\"\n+  [(set (match_operand:DI\t\t\t   0 \"register_operand\" \"=r\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"msp430_has_hwmult ()\"\n+  {\n+    /* Leave the other case for the inline insn.  */\n+    if (!(optimize > 2 && msp430_has_hwmult ()))\n+    {\n+      msp430_expand_helper (operands, \"__mspabi_mpysll\", false);\n+      DONE;\n+    }\n+  }\n+)\n+\n+(define_expand \"umulsidi3\"\n+  [(set (match_operand:DI\t\t\t   0 \"register_operand\" \"=r\")\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n+\t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"msp430_has_hwmult ()\"\n+  {\n+    /* Leave the other case for the inline insn.  */\n+    if (!(optimize > 2 && msp430_has_hwmult ()))\n+    {\n+      msp430_expand_helper (operands, \"__mspabi_mpyull\", false);\n+      DONE;\n+    }\n+  }\n+)\n+\n+\n (define_insn \"*mulhisi3_inline\"\n   [(set (match_operand:SI                          0 \"register_operand\" \"=r\")\n \t(mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"%0\"))\n@@ -1794,7 +1845,7 @@\n   [(set_attr \"length\" \"24\")]\n )\n \n-(define_insn \"mulsidi3\"\n+(define_insn \"*mulsidi3_inline\"\n   [(set (match_operand:DI                          0 \"register_operand\" \"=r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n@@ -1808,7 +1859,7 @@\n   [(set_attr \"length\" \"40\")]\n )\n \n-(define_insn \"umulsidi3\"\n+(define_insn \"*umulsidi3_inline\"\n   [(set (match_operand:DI                          0 \"register_operand\" \"=r\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]"}]}