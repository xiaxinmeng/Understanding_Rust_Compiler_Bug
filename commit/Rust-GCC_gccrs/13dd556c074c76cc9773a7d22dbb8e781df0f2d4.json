{"sha": "13dd556c074c76cc9773a7d22dbb8e781df0f2d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNkZDU1NmMwNzRjNzZjYzk3NzNhN2QyMmRiYjhlNzgxZGYwZjJkNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-04-05T07:40:31Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-04-05T07:40:31Z"}, "message": "mn10300-protos.h (mn10300_override_options): Declare.\n\n\t* config/mn10300/mn10300-protos.h (mn10300_override_options): Declare.\n\t* config/mn10300/mn10300.h (target_flags, TARGET_MULT_BUG)\n\t(TARGET_SWITCHES, TARGET_DEFAULT): Delete.\n\t(processor_type): New enum.\n\t(mn10300_processor): New variable.\n\t(TARGET_AM33, TARGET_AM33_2): Redefine in terms of mn10300_processor.\n\t(PROCESSOR_DEFAULT, OVERRIDE_OPTIONS): New macros.\n\t* config/mn10300/linux.h (TARGET_SWITCHES, TARGET_DEFAULT): Delete.\n\t(PROCESSOR_DEFAULT): New macro.\n\t* config/mn10300/mn10300.c (mn10300_processor): New variable.\n\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n\t(mn10300_handle_option, mn10300_override_options): New functions.\n\t* config/mn10300/mn10300.opt: New file.\n\nFrom-SVN: r97609", "tree": {"sha": "e4267a2278652e9e6d7d97fb9907949d5de0d0a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4267a2278652e9e6d7d97fb9907949d5de0d0a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13dd556c074c76cc9773a7d22dbb8e781df0f2d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13dd556c074c76cc9773a7d22dbb8e781df0f2d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13dd556c074c76cc9773a7d22dbb8e781df0f2d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13dd556c074c76cc9773a7d22dbb8e781df0f2d4/comments", "author": null, "committer": null, "parents": [{"sha": "c4cdbeb4802cec34a912e343629d8e28b20128c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4cdbeb4802cec34a912e343629d8e28b20128c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4cdbeb4802cec34a912e343629d8e28b20128c7"}], "stats": {"total": 154, "additions": 110, "deletions": 44}, "files": [{"sha": "d97b44096e1b9d0755da96b910d9545de09d97f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13dd556c074c76cc9773a7d22dbb8e781df0f2d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13dd556c074c76cc9773a7d22dbb8e781df0f2d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13dd556c074c76cc9773a7d22dbb8e781df0f2d4", "patch": "@@ -1,3 +1,19 @@\n+2004-04-05  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mn10300/mn10300-protos.h (mn10300_override_options): Declare.\n+\t* config/mn10300/mn10300.h (target_flags, TARGET_MULT_BUG)\n+\t(TARGET_SWITCHES, TARGET_DEFAULT): Delete.\n+\t(processor_type): New enum.\n+\t(mn10300_processor): New variable.\n+\t(TARGET_AM33, TARGET_AM33_2): Redefine in terms of mn10300_processor.\n+\t(PROCESSOR_DEFAULT, OVERRIDE_OPTIONS): New macros.\n+\t* config/mn10300/linux.h (TARGET_SWITCHES, TARGET_DEFAULT): Delete.\n+\t(PROCESSOR_DEFAULT): New macro.\n+\t* config/mn10300/mn10300.c (mn10300_processor): New variable.\n+\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n+\t(mn10300_handle_option, mn10300_override_options): New functions.\n+\t* config/mn10300/mn10300.opt: New file.\n+\n 2005-04-05  Eric Botcazou  <ebotcazou@libertysurf.fr>\n             Sebastian Pop <sebastian.pop@cri.ensmp.fr>\n "}, {"sha": "ddbaced157801e70e162ed4c052dbc4ca4b0938d", "filename": "gcc/config/mn10300/linux.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13dd556c074c76cc9773a7d22dbb8e781df0f2d4/gcc%2Fconfig%2Fmn10300%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13dd556c074c76cc9773a7d22dbb8e781df0f2d4/gcc%2Fconfig%2Fmn10300%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Flinux.h?ref=13dd556c074c76cc9773a7d22dbb8e781df0f2d4", "patch": "@@ -40,15 +40,8 @@\n      %{!dynamic-linker:-dynamic-linker /lib/ld.so.1}} \\\n    %{static:-static}\"\n \n-#undef  TARGET_SWITCHES\n-#define TARGET_SWITCHES\t\\\n-  {{ \"am33\",\t\t-0x4,\tN_(\"Target the AM33 processor\") }, \\\n-   { \"am33-2\",\t\t6,\tN_(\"Target the AM33/2.0 processor\") }, \\\n-   { \"relax\",\t\t0,\tN_(\"Enable linker relaxations\") }, \\\n-   { \"\", TARGET_DEFAULT, NULL }}\n-\n-#undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT 6\n+#undef  PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_AM33_2\n \n #undef  TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (AM33/2.0 GNU/Linux)\");"}, {"sha": "294e6ece75217eeb7d6558a075204ffebacf66d0", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13dd556c074c76cc9773a7d22dbb8e781df0f2d4/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13dd556c074c76cc9773a7d22dbb8e781df0f2d4/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=13dd556c074c76cc9773a7d22dbb8e781df0f2d4", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n extern void mn10300_va_start (tree, rtx);\n #endif /* TREE_CODE */\n \n+extern void mn10300_override_options (void);\n extern struct rtx_def *legitimize_address (rtx, rtx, enum machine_mode);\n extern rtx legitimize_pic_address (rtx, rtx);\n extern int legitimate_pic_operand_p (rtx);"}, {"sha": "23503c16b19a73f78cbde386ba373ec6179dbc4d", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13dd556c074c76cc9773a7d22dbb8e781df0f2d4/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13dd556c074c76cc9773a7d22dbb8e781df0f2d4/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=13dd556c074c76cc9773a7d22dbb8e781df0f2d4", "patch": "@@ -54,6 +54,9 @@ int mn10300_unspec_int_label_counter;\n    symbol names from register names.  */\n int mn10300_protect_label;\n \n+/* The selected processor.  */\n+enum processor_type mn10300_processor = PROCESSOR_DEFAULT;\n+\n /* The size of the callee register save area.  Right now we save everything\n    on entry since it costs us nothing in code size.  It does cost us from a\n    speed standpoint, so we want to optimize this sooner or later.  */\n@@ -65,6 +68,7 @@ int mn10300_protect_label;\n \t\t\t\t|| regs_ever_live[16] || regs_ever_live[17]))\n \n \n+static bool mn10300_handle_option (size_t, const char *, int);\n static int mn10300_address_cost_1 (rtx, int *);\n static int mn10300_address_cost (rtx);\n static bool mn10300_rtx_costs (rtx, int, int, int *);\n@@ -90,6 +94,11 @@ static int mn10300_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n #undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS MASK_MULT_BUG\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION mn10300_handle_option\n+\n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO mn10300_encode_section_info\n \n@@ -110,6 +119,37 @@ static int mn10300_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n static void mn10300_encode_section_info (tree, rtx, int);\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+mn10300_handle_option (size_t code,\n+\t\t       const char *arg ATTRIBUTE_UNUSED,\n+\t\t       int value)\n+{\n+  switch (code)\n+    {\n+    case OPT_mam33:\n+      mn10300_processor = value ? PROCESSOR_AM33 : PROCESSOR_MN10300;\n+      return true;\n+    case OPT_mam33_2:\n+      mn10300_processor = (value\n+\t\t\t   ? PROCESSOR_AM33_2\n+\t\t\t   : MIN (PROCESSOR_AM33, PROCESSOR_DEFAULT));\n+      return true;\n+    default:\n+      return true;\n+    }\n+}\n+\n+/* Implement OVERRIDE_OPTIONS.  */\n+\n+void\n+mn10300_override_options (void)\n+{\n+  if (TARGET_AM33)\n+    target_flags &= ~MASK_MULT_BUG;\n+}\n+\n static void\n mn10300_file_start (void)\n {"}, {"sha": "da5d3398ff8130dc730735b8c774b5aa659f8a04", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 14, "deletions": 35, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13dd556c074c76cc9773a7d22dbb8e781df0f2d4/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13dd556c074c76cc9773a7d22dbb8e781df0f2d4/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=13dd556c074c76cc9773a7d22dbb8e781df0f2d4", "patch": "@@ -42,46 +42,25 @@ Boston, MA 02111-1307, USA.  */\n \n #define CPP_SPEC \"%{mam33:-D__AM33__} %{mam33-2:-D__AM33__=2 -D__AM33_2__}\"\n \n-/* Run-time compilation parameters selecting different hardware subsets.  */\n+extern GTY(()) int mn10300_unspec_int_label_counter;\n \n-extern int target_flags;\n+enum processor_type {\n+  PROCESSOR_MN10300,\n+  PROCESSOR_AM33,\n+  PROCESSOR_AM33_2\n+};\n \n-extern GTY(()) int mn10300_unspec_int_label_counter;\n+extern enum processor_type mn10300_processor;\n \n-/* Macros used in the machine description to test the flags.  */\n-\n-/* Macro to define tables used to set the flags.\n-   This is a list in braces of pairs in braces,\n-   each pair being { \"NAME\", VALUE }\n-   where VALUE is the bits to set or minus the bits to clear.\n-   An empty string NAME is used to identify the default VALUE.  */\n-\n-/* Generate code to work around mul/mulq bugs on the mn10300.  */\n-#define TARGET_MULT_BUG\t\t\t(target_flags & 0x1)\n-\n-/* Generate code for the AM33 processor.  */\n-#define TARGET_AM33\t\t\t(target_flags & 0x2)\n-\n-/* Generate code for the AM33/2.0 processor.  */\n-#define TARGET_AM33_2\t\t\t(target_flags & 0x4)\n-\n-#define TARGET_SWITCHES  \\\n-  {{ \"mult-bug\",\t0x1,  N_(\"Work around hardware multiply bug\")},\t\\\n-   { \"no-mult-bug\", \t-0x1, N_(\"Do not work around hardware multiply bug\")},\\\n-   { \"am33\", \t\t0x2,  N_(\"Target the AM33 processor\")},\t\\\n-   { \"am33\", \t\t-(0x1), \"\"},\\\n-   { \"no-am33\", \t-0x2, \"\"},\t\\\n-   { \"no-crt0\",\t\t0,    N_(\"No default crt0.o\") }, \\\n-   { \"am33-2\",\t\t0x6,  N_(\"Target the AM33/2.0 processor\")},   \\\n-   { \"am33-2\",\t\t-(0x1), \"\"},\\\n-   { \"no-am33-2\",\t-0x4,   \"\"},  \\\n-   { \"relax\",\t\t0,    N_(\"Enable linker relaxations\") }, \\\n-   { \"\", TARGET_DEFAULT, NULL}}\n-\n-#ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT 0x1\n+#define TARGET_AM33\t(mn10300_processor >= PROCESSOR_AM33)\n+#define TARGET_AM33_2\t(mn10300_processor == PROCESSOR_AM33_2)\n+\n+#ifndef PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_MN10300\n #endif\n \n+#define OVERRIDE_OPTIONS mn10300_override_options ()\n+\n /* Print subsidiary information on the compiler version in use.  */\n \n #define TARGET_VERSION fprintf (stderr, \" (MN10300)\");"}, {"sha": "31161c9ab09914c74d3d267e1751474c1f3486a7", "filename": "gcc/config/mn10300/mn10300.opt", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13dd556c074c76cc9773a7d22dbb8e781df0f2d4/gcc%2Fconfig%2Fmn10300%2Fmn10300.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13dd556c074c76cc9773a7d22dbb8e781df0f2d4/gcc%2Fconfig%2Fmn10300%2Fmn10300.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.opt?ref=13dd556c074c76cc9773a7d22dbb8e781df0f2d4", "patch": "@@ -0,0 +1,37 @@\n+; Options for the Matsushita MN10300 port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+mam33\n+Target\n+Target the AM33 processor\n+\n+mam33-2\n+Target\n+Target the AM33/2.0 processor\n+\n+mmult-bug\n+Target Report Mask(MULT_BUG)\n+Work around hardware multiply bug\n+\n+; Ignored by the compiler\n+mrelax\n+Target RejectNegative\n+Enable linker relaxations"}]}