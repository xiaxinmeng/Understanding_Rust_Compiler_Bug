{"sha": "dd07abd7259e11e6e7a9e6e91d100e9c8743273a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQwN2FiZDcyNTllMTFlNmU3YTllNmU5MWQxMDBlOWM4NzQzMjczYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-09-10T00:09:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-09-10T00:09:09Z"}, "message": "except.c: Include cgraph.h.\n\n        * except.c: Include cgraph.h.\n        (output_function_exception_table): Invoke\n        cgraph_varpool_mark_needed_node.\n        * Makefile.in (except.o): Update.\n\n        * decl2.c (mark_member_pointers): Rename from\n        mark_member_pointers_and_eh_handlers and don't check eh handlers.\n\nFrom-SVN: r71254", "tree": {"sha": "cba6b64d335d02237dcc6038991bbae04157ad36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cba6b64d335d02237dcc6038991bbae04157ad36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd07abd7259e11e6e7a9e6e91d100e9c8743273a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd07abd7259e11e6e7a9e6e91d100e9c8743273a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd07abd7259e11e6e7a9e6e91d100e9c8743273a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd07abd7259e11e6e7a9e6e91d100e9c8743273a/comments", "author": null, "committer": null, "parents": [{"sha": "7f5cc0f3d0f719d5ecf4ad0e368a4449a3cd9e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5cc0f3d0f719d5ecf4ad0e368a4449a3cd9e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5cc0f3d0f719d5ecf4ad0e368a4449a3cd9e00"}], "stats": {"total": 89, "additions": 45, "deletions": 44}, "files": [{"sha": "cc439d7260ab4f947ddb11fc0e14734df880fe5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07abd7259e11e6e7a9e6e91d100e9c8743273a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07abd7259e11e6e7a9e6e91d100e9c8743273a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd07abd7259e11e6e7a9e6e91d100e9c8743273a", "patch": "@@ -1,3 +1,10 @@\n+2003-09-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* except.c: Include cgraph.h.\n+\t(output_function_exception_table): Invoke\n+\tcgraph_varpool_mark_needed_node.\n+\t* Makefile.in (except.o): Update.\n+\n 2003-09-07  Kelley Cook  <kelleycook@wideopenwest.com>\n \n \t* Makefile.in: Define REMAKEFLAGS for LANGUAGES & BOOT_CFLAGS"}, {"sha": "e210b97dd0c0b7f72a1f424b1d3ac677629c2222", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07abd7259e11e6e7a9e6e91d100e9c8743273a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07abd7259e11e6e7a9e6e91d100e9c8743273a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=dd07abd7259e11e6e7a9e6e91d100e9c8743273a", "patch": "@@ -1535,11 +1535,11 @@ stmt.o : stmt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) f\n    function.h insn-config.h hard-reg-set.h $(EXPR_H) libfuncs.h except.h \\\n    $(LOOP_H) $(RECOG_H) toplev.h output.h varray.h $(GGC_H) $(TM_P_H) \\\n    langhooks.h $(PREDICT_H) gt-stmt.h $(OPTABS_H) $(TARGET_H)\n-except.o : except.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   flags.h except.h function.h $(EXPR_H) libfuncs.h $(INTEGRATE_H) langhooks.h \\\n-   insn-config.h hard-reg-set.h $(BASIC_BLOCK_H) output.h \\\n+except.o : except.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n+   $(TREE_H) flags.h except.h function.h $(EXPR_H) libfuncs.h $(INTEGRATE_H) \\\n+   langhooks.h insn-config.h hard-reg-set.h $(BASIC_BLOCK_H) output.h \\\n    dwarf2asm.h dwarf2out.h toplev.h $(HASHTAB_H) intl.h $(GGC_H) \\\n-   gt-except.h\n+   gt-except.h cgraph.h\n expr.o : expr.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) flags.h \\\n    function.h $(REGS_H) $(EXPR_H) $(OPTABS_H) libfuncs.h $(INSN_ATTR_H) insn-config.h \\\n    $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \\"}, {"sha": "8af149182b73f631e79a6a0db4ff6da38eb5ff05", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07abd7259e11e6e7a9e6e91d100e9c8743273a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07abd7259e11e6e7a9e6e91d100e9c8743273a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dd07abd7259e11e6e7a9e6e91d100e9c8743273a", "patch": "@@ -1,3 +1,8 @@\n+2003-09-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* decl2.c (mark_member_pointers): Rename from\n+\tmark_member_pointers_and_eh_handlers and don't check eh handlers.\n+\n 2003-09-09  Christian Ehrhardt  <ehrhardt@mathematik.uni-ulm.de>\n \n \tPR bootstrap/12168"}, {"sha": "cbf074fa2bc7e1877e0771519df7004a2655952e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07abd7259e11e6e7a9e6e91d100e9c8743273a/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07abd7259e11e6e7a9e6e91d100e9c8743273a/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=dd07abd7259e11e6e7a9e6e91d100e9c8743273a", "patch": "@@ -2560,49 +2560,24 @@ generate_ctor_and_dtor_functions_for_priority (splay_tree_node n, void * data)\n /* Callgraph code does not understand the member pointers.  Mark the methods\n    referenced as used.  */\n static tree\n-mark_member_pointers_and_eh_handlers (tree *tp,\n-\t\t\t\t      int *walk_subtrees,\n-\t\t      \t\t      void *data ATTRIBUTE_UNUSED)\n+mark_member_pointers (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n {\n-  /* Avoid useless walking of complex type and declaration nodes.  */\n-  if (TYPE_P (*tp) || DECL_P (*tp))\n-    {\n-      *walk_subtrees = 0;\n-      return 0;\n-    }\n-  switch (TREE_CODE (*tp))\n+  tree t = *tp;\n+\n+  switch (TREE_CODE (t))\n     {\n     case PTRMEM_CST:\n-      if (TYPE_PTRMEMFUNC_P (TREE_TYPE (*tp)))\n-\tcgraph_mark_needed_node (cgraph_node (PTRMEM_CST_MEMBER (*tp)));\n-      break;\n-\n-    /* EH handlers will emit EH tables referencing typeinfo.  */\n-    case HANDLER:\n-      if (HANDLER_TYPE (*tp))\n-\t{\n-\t  tree tinfo = eh_type_info (HANDLER_TYPE (*tp));\n-\n-\t  cgraph_varpool_mark_needed_node (cgraph_varpool_node (tinfo));\n-\t}\n+      if (TYPE_PTRMEMFUNC_P (TREE_TYPE (t)))\n+\tcgraph_mark_needed_node (cgraph_node (PTRMEM_CST_MEMBER (t)));\n       break;\n \n-    case EH_SPEC_BLOCK:\n-\t{\n-\t  tree type;\n-\n-\t  for (type = EH_SPEC_RAISES ((*tp)); type;\n-\t       type = TREE_CHAIN (type))\n-\t    {\n-\t       tree tinfo = eh_type_info (TREE_VALUE (type));\n-\n-\t       cgraph_varpool_mark_needed_node (cgraph_varpool_node (tinfo));\n-\t    }\n-\t}\n-      break;\n     default:\n+      /* Avoid useless walking of complex type and declaration nodes.  */\n+      if (TYPE_P (t) || DECL_P (t))\n+\t*walk_subtrees = 0;\n       break;\n     }\n+\n   return 0;\n }\n \n@@ -2612,8 +2587,7 @@ void\n lower_function (tree fn)\n {\n   walk_tree_without_duplicates (&DECL_SAVED_TREE (fn),\n-\t\t  \t\tmark_member_pointers_and_eh_handlers,\n-\t\t\t\tNULL);\n+\t\t  \t\tmark_member_pointers, NULL);\n }\n \n /* This routine is called from the last rule in yyparse ()."}, {"sha": "f275866aa6fca2ee37c99773098312d82327d8f6", "filename": "gcc/except.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd07abd7259e11e6e7a9e6e91d100e9c8743273a/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd07abd7259e11e6e7a9e6e91d100e9c8743273a/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=dd07abd7259e11e6e7a9e6e91d100e9c8743273a", "patch": "@@ -73,6 +73,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"langhooks.h\"\n+#include \"cgraph.h\"\n \n /* Provide defaults for stuff that may not be defined when using\n    sjlj exceptions.  */\n@@ -3704,11 +3705,25 @@ output_function_exception_table (void)\n       rtx value;\n \n       if (type == NULL_TREE)\n-\ttype = integer_zero_node;\n+\tvalue = const0_rtx;\n       else\n-\ttype = lookup_type_for_runtime (type);\n+\t{\n+\t  struct cgraph_varpool_node *node;\n+\n+\t  type = lookup_type_for_runtime (type);\n+\t  value = expand_expr (type, NULL_RTX, VOIDmode, EXPAND_INITIALIZER);\n+\n+\t  /* Let cgraph know that the rtti decl is used.  Not all of the\n+\t     paths below go through assemble_integer, which would take\n+\t     care of this for us.  */\n+\t  if (TREE_CODE (type) != ADDR_EXPR)\n+\t    abort ();\n+\t  type = TREE_OPERAND (type, 0);\n+\t  node = cgraph_varpool_node (type);\n+\t  if (node)\n+\t    cgraph_varpool_mark_needed_node (node);\n+\t}\n \n-      value = expand_expr (type, NULL_RTX, VOIDmode, EXPAND_INITIALIZER);\n       if (tt_format == DW_EH_PE_absptr || tt_format == DW_EH_PE_aligned)\n \tassemble_integer (value, tt_format_size,\n \t\t\t  tt_format_size * BITS_PER_UNIT, 1);"}]}