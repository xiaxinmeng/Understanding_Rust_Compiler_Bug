{"sha": "469c76f0d94d03e29467a9d1e77cd3613f46ac2f", "node_id": "C_kwDOANBUbNoAKDQ2OWM3NmYwZDk0ZDAzZTI5NDY3YTlkMWU3N2NkMzYxM2Y0NmFjMmY", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-05-06T18:43:42Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-05-06T18:43:42Z"}, "message": "libstdc++: ppc: conditionalize vsx-only simd intrinsics\n\nlibstdc++'s bits/simd.h section for PowerPC, guarded by __ALTIVEC__,\ndefines various intrinsic vector types that are only available with\n__VSX__: 64-bit long double, double, (un)signed long long, and 64-bit\n(un)signed long.\n\nexperimental/simd/standard_abi_usable{,_2}.cc tests error out\nreporting the unmet requirements when the target cpu doesn't enable\nVSX.  Make the reported instrinsic types conditional on __VSX__ so\nthat <experimental/simd> can be used on PowerPC variants that do not\nsupport VSX.\n\n\nfor  libstdc++-v3/ChangeLog\n\n\t* include/experimental/bits/simd.h [__ALTIVEC__]: Require VSX\n\tfor double, long long, and 64-bit long intrinsic types.\n\t[__ALTIVEC__] (__intrinsic_type): Mention 128-bit in\n\tpreexisting long double diagnostic, adjust no-VSX double\n\tdiagnostic to cover 64-bit long double as well.", "tree": {"sha": "a06d9a0883d5c9a0af960fe98a3724ecc105900d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a06d9a0883d5c9a0af960fe98a3724ecc105900d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/469c76f0d94d03e29467a9d1e77cd3613f46ac2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469c76f0d94d03e29467a9d1e77cd3613f46ac2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/469c76f0d94d03e29467a9d1e77cd3613f46ac2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469c76f0d94d03e29467a9d1e77cd3613f46ac2f/comments", "author": null, "committer": null, "parents": [{"sha": "374b3c936d62c8b6e7c607fdf6e84a83748e85c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374b3c936d62c8b6e7c607fdf6e84a83748e85c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374b3c936d62c8b6e7c607fdf6e84a83748e85c7"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "b0226fa4c5304ce857927e171cb78a3d78a97f27", "filename": "libstdc++-v3/include/experimental/bits/simd.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469c76f0d94d03e29467a9d1e77cd3613f46ac2f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469c76f0d94d03e29467a9d1e77cd3613f46ac2f/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fsimd.h?ref=469c76f0d94d03e29467a9d1e77cd3613f46ac2f", "patch": "@@ -2430,17 +2430,23 @@ template <typename _Tp>\n   template <>                                                                  \\\n     struct __intrinsic_type_impl<_Tp> { using type = __vector _Tp; }\n _GLIBCXX_SIMD_PPC_INTRIN(float);\n+#ifdef __VSX__\n _GLIBCXX_SIMD_PPC_INTRIN(double);\n+#endif\n _GLIBCXX_SIMD_PPC_INTRIN(signed char);\n _GLIBCXX_SIMD_PPC_INTRIN(unsigned char);\n _GLIBCXX_SIMD_PPC_INTRIN(signed short);\n _GLIBCXX_SIMD_PPC_INTRIN(unsigned short);\n _GLIBCXX_SIMD_PPC_INTRIN(signed int);\n _GLIBCXX_SIMD_PPC_INTRIN(unsigned int);\n+#if defined __VSX__ || __SIZEOF_LONG__ == 4\n _GLIBCXX_SIMD_PPC_INTRIN(signed long);\n _GLIBCXX_SIMD_PPC_INTRIN(unsigned long);\n+#endif\n+#ifdef __VSX__\n _GLIBCXX_SIMD_PPC_INTRIN(signed long long);\n _GLIBCXX_SIMD_PPC_INTRIN(unsigned long long);\n+#endif\n #undef _GLIBCXX_SIMD_PPC_INTRIN\n \n template <typename _Tp, size_t _Bytes>\n@@ -2450,10 +2456,11 @@ template <typename _Tp, size_t _Bytes>\n     static constexpr bool _S_is_ldouble = is_same_v<_Tp, long double>;\n     // allow _Tp == long double with -mlong-double-64\n     static_assert(!(_S_is_ldouble && sizeof(long double) > sizeof(double)),\n-\t\t  \"no __intrinsic_type support for long double on PPC\");\n+\t\t  \"no __intrinsic_type support for 128-bit floating point on PowerPC\");\n #ifndef __VSX__\n-    static_assert(!is_same_v<_Tp, double>,\n-\t\t  \"no __intrinsic_type support for double on PPC w/o VSX\");\n+    static_assert(!(is_same_v<_Tp, double>\n+\t\t    || (_S_is_ldouble && sizeof(long double) == sizeof(double))),\n+\t\t  \"no __intrinsic_type support for 64-bit floating point on PowerPC w/o VSX\");\n #endif\n     using type =\n       typename __intrinsic_type_impl<"}]}