{"sha": "8ad0c477e888d34c8fc6dbcc008ef66505071d65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFkMGM0NzdlODg4ZDM0YzhmYzZkYmNjMDA4ZWY2NjUwNTA3MWQ2NQ==", "commit": {"author": {"name": "JeanHeyd Meneide", "email": "phdofthehouse@gmail.com", "date": "2019-10-19T04:51:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-10-19T04:51:59Z"}, "message": "Implement C++20 P1301 [[nodiscard(\"should have a reason\")]].\n\n2019-10-17  JeanHeyd Meneide  <phdofthehouse@gmail.com>\n\ngcc/\n        * escaped_string.h (escaped_string): New header.\n        * tree.c (escaped_string): Remove escaped_string class.\n\ngcc/c-family\n        * c-lex.c (c_common_has_attribute): Update nodiscard value.\n\ngcc/cp/\n        * tree.c (handle_nodiscard_attribute) Added C++2a nodiscard\n\tstring message.\n        (std_attribute_table) Increase nodiscard argument handling\n\tmax_length from 0 to 1.\n        * parser.c (cp_parser_check_std_attribute): Add requirement\n\tthat nodiscard only be seen once in attribute-list.\n        (cp_parser_std_attribute): Check that empty parenthesis lists are\n        not specified for attributes that have max_length > 0 (e.g.\n\t[[attr()]]).\n        * cvt.c (maybe_warn_nodiscard): Add nodiscard message to\n\toutput, if applicable.\n\t(convert_to_void): Allow constructors to be nodiscard-able (P1771).\n\ngcc/testsuite/g++.dg/cpp0x\n        * gen-attrs-67.C: Test new error message for empty-parenthesis-list.\n\ngcc/testsuite/g++.dg/cpp2a\n        * nodiscard-construct.C: New test.\n        * nodiscard-once.C: New test.\n        * nodiscard-reason-nonstring.C: New test.\n        * nodiscard-reason-only-one.C: New test.\n        * nodiscard-reason.C: New test.\n\nReviewed-by: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r277200", "tree": {"sha": "9b2f5e5c5d3601b9c42221f4e30c262c62a681b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b2f5e5c5d3601b9c42221f4e30c262c62a681b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ad0c477e888d34c8fc6dbcc008ef66505071d65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad0c477e888d34c8fc6dbcc008ef66505071d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ad0c477e888d34c8fc6dbcc008ef66505071d65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad0c477e888d34c8fc6dbcc008ef66505071d65/comments", "author": {"login": "ThePhD", "id": 2886436, "node_id": "MDQ6VXNlcjI4ODY0MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/2886436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThePhD", "html_url": "https://github.com/ThePhD", "followers_url": "https://api.github.com/users/ThePhD/followers", "following_url": "https://api.github.com/users/ThePhD/following{/other_user}", "gists_url": "https://api.github.com/users/ThePhD/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThePhD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThePhD/subscriptions", "organizations_url": "https://api.github.com/users/ThePhD/orgs", "repos_url": "https://api.github.com/users/ThePhD/repos", "events_url": "https://api.github.com/users/ThePhD/events{/privacy}", "received_events_url": "https://api.github.com/users/ThePhD/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9299523c9aad158f5276df2bfe777044bb144230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9299523c9aad158f5276df2bfe777044bb144230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9299523c9aad158f5276df2bfe777044bb144230"}], "stats": {"total": 408, "additions": 373, "deletions": 35}, "files": [{"sha": "3e038904186f7ecd3a82d1080535b8b57084f491", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -1,3 +1,8 @@\n+2019-10-17  JeanHeyd Meneide  <phdofthehouse@gmail.com>\n+\n+\t* escaped_string.h (escaped_string): New header.\n+\t* tree.c (escaped_string): Remove escaped_string class.\n+\n 2019-10-18  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/92157"}, {"sha": "aeae1497b92c3c7d6b0c7f180ba92438e3684e3d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -1,3 +1,7 @@\n+2019-10-17  JeanHeyd Meneide  <phdofthehouse@gmail.com>\n+\n+\t* c-lex.c (c_common_has_attribute): Update nodiscard value.\n+\n 2019-10-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-common.h (user_facing_original_type_p): Declare."}, {"sha": "fb05b5f8af05f9720c760fb1134547daab8071b5", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -353,13 +353,14 @@ c_common_has_attribute (cpp_reader *pfile)\n \t      else if (is_attribute_p (\"deprecated\", attr_name))\n \t\tresult = 201309;\n \t      else if (is_attribute_p (\"maybe_unused\", attr_name)\n-\t\t       || is_attribute_p (\"nodiscard\", attr_name)\n \t\t       || is_attribute_p (\"fallthrough\", attr_name))\n \t\tresult = 201603;\n \t      else if (is_attribute_p (\"no_unique_address\", attr_name)\n \t\t       || is_attribute_p (\"likely\", attr_name)\n \t\t       || is_attribute_p (\"unlikely\", attr_name))\n \t\tresult = 201803;\n+\t      else if (is_attribute_p (\"nodiscard\", attr_name))\n+\t\tresult = 201907;\n \t      if (result)\n \t\tattr_name = NULL_TREE;\n \t    }"}, {"sha": "30accc5941759cb99062009836e1f5d2376abaef", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -1,3 +1,19 @@\n+2019-10-17  JeanHeyd Meneide  <phdofthehouse@gmail.com>\n+\n+\tImplement p1301 [[nodiscard(\"should have a reason\")]] + p1771 DR\n+\t* tree.c (handle_nodiscard_attribute): Handle C++2a nodiscard\n+\tstring message.\n+\t(std_attribute_table) Increase nodiscard argument handling\n+\tmax_length from 0 to 1.\n+\t* parser.c (cp_parser_check_std_attribute): Add requirement\n+\tthat nodiscard only be seen once in attribute-list.\n+\t(cp_parser_std_attribute): Check that empty parenthesis lists are\n+\tnot specified for attributes that have max_length > 0 (e.g.\n+\t[[attr()]]).\n+\t* cvt.c (maybe_warn_nodiscard): Add nodiscard message to\n+\toutput, if applicable.\n+\t(convert_to_void): Allow constructors to be nodiscard-able (P1771).\n+\n 2019-10-18  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (struct lang_type): Remove was_anonymous."}, {"sha": "d41aeb8f1fc9dfd260fc6c14bcef6aef0a9575a7", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"convert.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n+#include \"escaped_string.h\"\n \n static tree convert_to_pointer_force (tree, tree, tsubst_flags_t);\n static tree build_type_conversion (tree, tree);\n@@ -1026,22 +1027,39 @@ maybe_warn_nodiscard (tree expr, impl_conv_void implicit)\n \n   tree rettype = TREE_TYPE (type);\n   tree fn = cp_get_fndecl_from_callee (callee);\n+  tree attr;\n   if (implicit != ICV_CAST && fn\n-      && lookup_attribute (\"nodiscard\", DECL_ATTRIBUTES (fn)))\n+      && (attr = lookup_attribute (\"nodiscard\", DECL_ATTRIBUTES (fn))))\n     {\n+      escaped_string msg;\n+      tree args = TREE_VALUE (attr);\n+      if (args)\n+\tmsg.escape (TREE_STRING_POINTER (TREE_VALUE (args)));\n+      const char* format = (msg ?\n+\tG_(\"ignoring return value of %qD, \"\n+\t   \"declared with attribute %<nodiscard%>: %<%s%>\") :\n+\tG_(\"ignoring return value of %qD, \"\n+\t   \"declared with attribute %<nodiscard%>%s\"));\n+      const char* raw_msg = msg ? msg : \"\";\n       auto_diagnostic_group d;\n-      if (warning_at (loc, OPT_Wunused_result,\n-\t\t      \"ignoring return value of %qD, \"\n-\t\t      \"declared with attribute nodiscard\", fn))\n+      if (warning_at (loc, OPT_Wunused_result, format, fn, raw_msg))\n \tinform (DECL_SOURCE_LOCATION (fn), \"declared here\");\n     }\n   else if (implicit != ICV_CAST\n-\t   && lookup_attribute (\"nodiscard\", TYPE_ATTRIBUTES (rettype)))\n+\t   && (attr = lookup_attribute (\"nodiscard\", TYPE_ATTRIBUTES (rettype))))\n     {\n+      escaped_string msg;\n+      tree args = TREE_VALUE (attr);\n+      if (args)\n+\tmsg.escape (TREE_STRING_POINTER (TREE_VALUE (args)));\n+      const char* format = msg ?\n+\tG_(\"ignoring returned value of type %qT, \"\n+\t   \"declared with attribute %<nodiscard%>: %<%s%>\") :\n+\tG_(\"ignoring returned value of type %qT, \"\n+\t   \"declared with attribute %<nodiscard%>%s\");\n+      const char* raw_msg = msg ? msg : \"\";\n       auto_diagnostic_group d;\n-      if (warning_at (loc, OPT_Wunused_result,\n-\t\t      \"ignoring returned value of type %qT, \"\n-\t\t      \"declared with attribute nodiscard\", rettype))\n+      if (warning_at (loc, OPT_Wunused_result, format, rettype, raw_msg))\n \t{\n \t  if (fn)\n \t    inform (DECL_SOURCE_LOCATION (fn),\n@@ -1180,7 +1198,7 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n \t instantiations be affected by an ABI property that is, or at\n \t least ought to be transparent to the language.  */\n       if (tree fn = cp_get_callee_fndecl_nofold (expr))\n-\tif (DECL_CONSTRUCTOR_P (fn) || DECL_DESTRUCTOR_P (fn))\n+\tif (DECL_DESTRUCTOR_P (fn))\n \t  return expr;\n \n       maybe_warn_nodiscard (expr, implicit);"}, {"sha": "450b1447cc1fadfb366434f22eb83fa5c398f214", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -26551,6 +26551,11 @@ cp_parser_std_attribute (cp_parser *parser, tree attr_ns)\n       arguments = error_mark_node;\n     else\n       {\n+\tif (vec->is_empty())\n+\t  /* e.g. [[attr()]].  */\n+\t  error_at (token->location, \"parentheses must be omitted if \"\n+\t\t    \"%qE attribute argument list is empty\",\n+\t\t    attr_id);\n \targuments = build_tree_list_vec (vec);\n \trelease_tree_vector (vec);\n       }\n@@ -26565,9 +26570,9 @@ cp_parser_std_attribute (cp_parser *parser, tree attr_ns)\n }\n \n /* Check that the attribute ATTRIBUTE appears at most once in the\n-   attribute-list ATTRIBUTES.  This is enforced for noreturn (7.6.3)\n-   and deprecated (7.6.5).  Note that carries_dependency (7.6.4)\n-   isn't implemented yet in GCC.  */\n+   attribute-list ATTRIBUTES.  This is enforced for noreturn (7.6.3),\n+   nodiscard, and deprecated (7.6.5).  Note that\n+   carries_dependency (7.6.4) isn't implemented yet in GCC.  */\n \n static void\n cp_parser_check_std_attribute (tree attributes, tree attribute)\n@@ -26583,6 +26588,10 @@ cp_parser_check_std_attribute (tree attributes, tree attribute)\n \t       && lookup_attribute (\"deprecated\", attributes))\n \terror (\"attribute %<deprecated%> can appear at most once \"\n \t       \"in an attribute-list\");\n+      else if (is_attribute_p (\"nodiscard\", name)\n+\t       && lookup_attribute (\"nodiscard\", attributes))\n+\terror (\"attribute %<nodiscard%> can appear at most once \"\n+\t       \"in an attribute-list\");\n     }\n }\n "}, {"sha": "a004bb1aa7f1731005e814e205e0510cad172b6f", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -4369,9 +4369,14 @@ zero_init_p (const_tree t)\n    warn_unused_result attribute.  */\n \n static tree\n-handle_nodiscard_attribute (tree *node, tree name, tree /*args*/,\n+handle_nodiscard_attribute (tree *node, tree name, tree args,\n \t\t\t    int /*flags*/, bool *no_add_attrs)\n {\n+  if (args && TREE_CODE (TREE_VALUE (args)) != STRING_CST)\n+    {\n+      error (\"%qE attribute argument must be a string constant\", name);\n+      *no_add_attrs = true;\n+    }\n   if (TREE_CODE (*node) == FUNCTION_DECL)\n     {\n       if (VOID_TYPE_P (TREE_TYPE (TREE_TYPE (*node)))\n@@ -4461,7 +4466,7 @@ const struct attribute_spec std_attribute_table[] =\n        affects_type_identity, handler, exclude } */\n   { \"maybe_unused\", 0, 0, false, false, false, false,\n     handle_unused_attribute, NULL },\n-  { \"nodiscard\", 0, 0, false, false, false, false,\n+  { \"nodiscard\", 0, 1, false, false, false, false,\n     handle_nodiscard_attribute, NULL },\n   { \"no_unique_address\", 0, 0, true, false, false, false,\n     handle_no_unique_addr_attribute, NULL },"}, {"sha": "b83e1281f27007d05d8b07fbef17537a7574c0d4", "filename": "gcc/escaped_string.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fescaped_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Fescaped_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fescaped_string.h?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -0,0 +1,43 @@\n+/* Shared escaped string class.\n+   Copyright (C) 1999-2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_ESCAPED_STRING_H\n+#define GCC_ESCAPED_STRING_H\n+\n+#include <cstdlib>\n+\n+/* A class to handle converting a string that might contain\n+   control characters, (eg newline, form-feed, etc), into one\n+   in which contains escape sequences instead.  */\n+\n+class escaped_string\n+{\n+ public:\n+  escaped_string () { m_owned = false; m_str = NULL; };\n+  ~escaped_string () { if (m_owned) free (m_str); }\n+  operator const char *() const { return m_str; }\n+  void escape (const char *);\n+ private:\n+  escaped_string(const escaped_string&) {}\n+  escaped_string& operator=(const escaped_string&) { return *this; }\n+  char *m_str;\n+  bool  m_owned;\n+};\n+\n+#endif /* ! GCC_ESCAPED_STRING_H */"}, {"sha": "c195dfe7b804ae07cb1f62acc9f056984f47b5c6", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-67.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-67.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-67.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-67.C?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -5,7 +5,7 @@\n [[noreturn(1)]] void f1 (); // { dg-error \".noreturn. attribute does not take any arguments\" }\n [[noreturn(1, 2)]] void f2 (); // { dg-error \".noreturn. attribute does not take any arguments\" }\n [[maybe_unused()]] int f3(); // { dg-error \".maybe_unused. attribute does not take any arguments\" }\n-[[nodiscard()]] int f4(); // { dg-error \".nodiscard. attribute does not take any arguments\" }\n+[[nodiscard()]] int f4(); // { dg-error \"parentheses must be omitted if .nodiscard. attribute argument list is empty\" }\n [[gnu::noinline()]] int f5(); // { dg-error \".noinline. attribute does not take any arguments\" }\n [[gnu::constructor]] int f6();\n [[gnu::constructor(101)]] int f7(); // { dg-error \"constructor priorities are not supported\" \"\" { target { ! init_priority } } }"}, {"sha": "a18d6aea985159ad8c5f55e2096a8c462abb8594", "filename": "gcc/testsuite/g++.dg/cpp1z/feat-cxx1z.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -439,7 +439,7 @@\n \n #  if ! __has_cpp_attribute(nodiscard)\n #    error \"__has_cpp_attribute(nodiscard)\"\n-#  elif __has_cpp_attribute(nodiscard) != 201603\n+#  elif (__has_cpp_attribute(nodiscard) != 201603 && __has_cpp_attribute(nodiscard) != 201907)\n #    error \"__has_cpp_attribute(nodiscard) != 201603\"\n #  endif\n "}, {"sha": "95251c2f5c692b0df8d40fca4e2b6ffadd772273", "filename": "gcc/testsuite/g++.dg/cpp2a/feat-cxx2a.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -470,8 +470,8 @@\n \n #  if ! __has_cpp_attribute(nodiscard)\n #    error \"__has_cpp_attribute(nodiscard)\"\n-#  elif __has_cpp_attribute(nodiscard) != 201603\n-#    error \"__has_cpp_attribute(nodiscard) != 201603\"\n+#  elif __has_cpp_attribute(nodiscard) != 201907\n+#    error \"__has_cpp_attribute(nodiscard) != 201907\"\n #  endif\n \n #  if ! __has_cpp_attribute(fallthrough)"}, {"sha": "a5c2c6514cf38658bf5d9f441529ed72485a02d7", "filename": "gcc/testsuite/g++.dg/cpp2a/nodiscard-constructor.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-constructor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-constructor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-constructor.c?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -0,0 +1,13 @@\n+/* nodiscard attribute tests  */\n+/* { dg-do compile { target c++2a } } */\n+/* { dg-options \"-O -ftrack-macro-expansion=0\" } */\n+\n+struct A { [[nodiscard(\"bad constructor\")]] A() {} };\n+struct B { [[nodiscard]] B() {} };\n+\n+void\n+test (void)\n+{\n+  A{}; /* { dg-warning \"(?n)nodiscard.*bad constructor\" } */\n+  B{}; /* { dg-warning \"(?n)nodiscard\" } */\n+}"}, {"sha": "4518a11c9704b0523788ad4fd2b97e355f2cc7b0", "filename": "gcc/testsuite/g++.dg/cpp2a/nodiscard-once.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-once.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-once.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-once.C?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -0,0 +1,12 @@\n+/* nodiscard attribute tests  */\n+/* { dg-do compile { target c++2a } } */\n+/* { dg-options \"-O -ftrack-macro-expansion=0\" } */\n+\n+[[nodiscard, nodiscard]] int check1 (void); /* { dg-error \"(?n)nodiscard.*can appear at most once\" } */\n+\n+void\n+test (void)\n+{\n+  check1 ();\n+  (void) check1 ();\n+}"}, {"sha": "af715e2d6b6362603564fb8088da899bd0fc96a2", "filename": "gcc/testsuite/g++.dg/cpp2a/nodiscard-reason-nonstring.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason-nonstring.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason-nonstring.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason-nonstring.C?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -0,0 +1,12 @@\n+/* nodiscard attribute tests  */\n+/* { dg-do compile { target c++2a } } */\n+/* { dg-options \"-O -ftrack-macro-expansion=0\" } */\n+\n+[[nodiscard(123)]] int check1 (void); /* { dg-error \"(?n)nodiscard.*must be a string constant\" } */\n+\n+void\n+test (void)\n+{\n+  check1 ();\n+  (void) check1 ();\n+}"}, {"sha": "602a4e273f579b2ce068807e302bf01479bb9197", "filename": "gcc/testsuite/g++.dg/cpp2a/nodiscard-reason-only-one.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason-only-one.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason-only-one.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason-only-one.C?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -0,0 +1,12 @@\n+/* nodiscard attribute tests  */\n+/* { dg-do compile { target c++2a } } */\n+/* { dg-options \"-O -ftrack-macro-expansion=0\" } */\n+\n+[[nodiscard(\"not\", \"allowed\")]] int check1 (void); /* { dg-error \"(?n)wrong number of arguments..*nodiscard\" } */\n+\n+void\n+test (void)\n+{\n+  check1 ();\n+  (void) check1 ();\n+}"}, {"sha": "0113c9042603d0fe2bee0b5ca17dd8c932e87aa0", "filename": "gcc/testsuite/g++.dg/cpp2a/nodiscard-reason.C", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnodiscard-reason.C?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -0,0 +1,203 @@\n+/* nodiscard attribute tests, adapted from gcc.dg/attr-warn-unused-result.c.  */\n+/* { dg-do compile { target c++2a } } */\n+/* { dg-options \"-O -ftrack-macro-expansion=0\" } */\n+\n+#define NODIS [[nodiscard(\"exact_message\")]]\n+#define NODISAI [[nodiscard(\"exact_inline_message\"), gnu::always_inline]] inline\n+enum [[nodiscard(\"exact_E_message\")]] E { e };\n+typedef E (*fnt) (void);\n+\n+typedef struct { long i; } A;\n+typedef struct { long i; long j; } B;\n+typedef struct { char big[1024]; fnt fn; } C;\n+struct [[nodiscard(\"exact_D_message\")]] D { int i; D(); ~D(); };\n+\n+NODIS E check1 (void);\n+NODIS void check2 (void); /* { dg-warning \"(?n)10:.nodiscard.*exact_message\" } */\n+NODIS int foo;         /* { dg-warning \"(?n)9:.nodiscard.*exact_message\" } */\n+int bar (void);\n+NODISAI E check3 (void) { return (E)bar (); }\n+NODIS A check4 (void);\n+NODIS B check5 (void);\n+NODIS C check6 (void);\n+A bar7 (void);\n+B bar8 (void);\n+C bar9 (void);\n+NODISAI A check7 (void) { return bar7 (); }\n+NODISAI B check8 (void) { return bar8 (); }\n+NODISAI C check9 (void) { return bar9 (); }\n+/* This is useful for checking whether return value of statement\n+   expressions (returning int in this case) is used.  */\n+NODISAI int check_int_result (int res) { return res; }\n+#define GU(v) ({ int e = 0; (v) = bar (); if ((v) < 23) e = 14; e; })\n+fnt fnptr;\n+NODIS E check10 (void);\n+int baz (void);\n+NODISAI E check11 (void) { return (E)baz (); }\n+int k;\n+\n+D check12();\n+\n+void\n+test (void)\n+{\n+  int i = 0, j;\n+  const fnt pcheck1 = check1;\n+  const fnt pcheck3 = check3;\n+  A a;\n+  B b;\n+  C c;\n+  D d;\n+  if (check1 ())\n+    return;\n+  i += check1 ();\n+  i += ({ check1 (); });\n+  check1 ();           /* { dg-warning \"(?n)nodiscard.*exact_message\" } */\n+  (void) check1 ();\n+  check1 (), bar ();   /* { dg-warning \"(?n)nodiscard.*exact_message\" } */\n+  check2 ();\n+  (void) check2 ();\n+  check2 (), bar ();\n+  if (check3 ())\n+    return;\n+  i += check3 ();\n+  i += ({ check3 (); });\n+  check3 ();           /* { dg-warning \"(?n)nodiscard.*exact_inline_message\" } */\n+  (void) check3 ();\n+  check3 (), bar ();   /* { dg-warning \"(?n)nodiscard.*exact_inline_message\" } */\n+  a = check4 ();\n+  if (a.i)\n+    return;\n+  if (check4 ().i)\n+    return;\n+  if (({ check4 (); }).i)\n+    return;\n+  check4 ();           /* { dg-warning \"(?n)nodiscard.*exact_message\" } */\n+  (void) check4 ();\n+  check4 (), bar ();   /* { dg-warning \"(?n)nodiscard.*exact_message\" } */\n+  b = check5 ();\n+  if (b.i + b.j)\n+    return;\n+  if (check5 ().j)\n+    return;\n+  if (({ check5 (); }).j)\n+    return;\n+  check5 ();           /* { dg-warning \"(?n)nodiscard.*exact_message\" } */\n+  (void) check5 ();\n+  check5 (), bar ();   /* { dg-warning \"(?n)nodiscard.*exact_message\" } */\n+  c = check6 ();\n+  if (c.big[12] + c.big[29])\n+    return;\n+  if (check6 ().big[27])\n+    return;\n+  if (({ check6 (); }).big[0])\n+    return;\n+  check6 ();           /* { dg-warning \"(?n)nodiscard.*exact_message\" } */\n+  (void) check6 ();\n+  check6 (), bar ();   /* { dg-warning \"(?n)nodiscard.*exact_message\" } */\n+  a = check7 ();\n+  if (a.i)\n+    return;\n+  if (check7 ().i)\n+    return;\n+  if (({ check7 (); }).i)\n+    return;\n+  check7 ();           /* { dg-warning \"(?n)nodiscard.*exact_inline_message\" } */\n+  (void) check7 ();\n+  check7 (), bar ();   /* { dg-warning \"(?n)nodiscard.*exact_inline_message\" } */\n+  b = check8 ();\n+  if (b.i + b.j)\n+    return;\n+  if (check8 ().j)\n+    return;\n+  if (({ check8 (); }).j)\n+    return;\n+  check8 ();           /* { dg-warning \"(?n)nodiscard.*exact_inline_message\" } */\n+  (void) check8 ();\n+  check8 (), bar ();   /* { dg-warning \"(?n)nodiscard.*exact_inline_message\" } */\n+  c = check9 ();\n+  if (c.big[12] + c.big[29])\n+    return;\n+  if (check9 ().big[27])\n+    return;\n+  if (({ check9 (); }).big[0])\n+    return;\n+  check9 ();           /* { dg-warning \"(?n)nodiscard.*exact_inline_message\" } */\n+  (void) check9 ();\n+  check9 (), bar ();   /* { dg-warning \"(?n)nodiscard.*exact_inline_message\" } */\n+  if (check_int_result (GU (j)))\n+    return;\n+  i += check_int_result (GU (j));\n+  i += ({ check_int_result (GU (j)); });\n+  check_int_result (GU (j)); /* { dg-warning \"(?n)nodiscard.*exact_inline_message\" } */\n+  (void) check_int_result (GU (j));\n+  check_int_result (GU (j)), bar (); /* { dg-warning \"(?n)nodiscard.*exact_inline_message\" } */\n+  if (fnptr ())\n+    return;\n+  i += fnptr ();\n+  i += ({ fnptr (); });\n+  fnptr ();            /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  (void) fnptr ();\n+  fnptr (), bar ();    /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  fnptr = check1;\n+  if (fnptr ())\n+    return;\n+  i += fnptr ();\n+  i += ({ fnptr (); });\n+  fnptr ();            /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  (void) fnptr ();\n+  fnptr (), bar ();    /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  fnptr = check3;\n+  if (fnptr ())\n+    return;\n+  i += fnptr ();\n+  i += ({ fnptr (); });\n+  fnptr ();            /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  (void) fnptr ();\n+  fnptr (), bar ();    /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  if (bar9 ().fn ())\n+    return;\n+  i += bar9 ().fn ();\n+  i += ({ bar9 ().fn (); });\n+  bar9 ().fn ();       /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  (void) bar9 ().fn ();\n+  bar9 ().fn (), bar (); /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  if ((k ? check1 : check10) ())\n+    return;\n+  i += (k ? check1 : check10) ();\n+  i += ({ (k ? check1 : check10) (); });\n+  (k ? check1 : check10) (); /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  (void) (k ? check1 : check10) ();\n+  (k ? check1 : check10) (), bar (); /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  if ((k ? check3 : check11) ())\n+    return;\n+  i += (k ? check3 : check11) ();\n+  i += ({ (k ? check3 : check11) (); });\n+  (k ? check3 : check11) (); /* { dg-warning \"(?n)nodiscard.*exact_inline_message\" } */\n+  (void) (k ? check3 : check11) ();\n+  (k ? check3 : check11) (), bar (); /* { dg-warning \"(?n)nodiscard.*exact_inline_message\" } */\n+  if (pcheck1 ())\n+    return;\n+  i += pcheck1 ();\n+  i += ({ pcheck1 (); });\n+  pcheck1 ();          /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  (void) pcheck1 ();\n+  pcheck1 (), bar ();  /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  if (pcheck3 ())\n+    return;\n+  i += pcheck3 ();\n+  i += ({ pcheck3 (); });\n+  pcheck3 ();          /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  (void) pcheck3 ();\n+  pcheck3 (), bar ();  /* { dg-warning \"(?n)nodiscard.*exact_E_message\" } */\n+  d = check12 ();\n+  if (d.i)\n+    return;\n+  if (check12 ().i)\n+    return;\n+  if (({ check12 (); }).i)\n+    return;\n+  check12 ();          /* { dg-warning \"(?n)nodiscard.*exact_D_message\" } */\n+  (void) check12 ();\n+  check12 (), bar ();  /* { dg-warning \"(?n)nodiscard.*exact_D_message\" } */\n+}"}, {"sha": "2bee1d255ff006d32455f504ef62cc6b9aca193c", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0c477e888d34c8fc6dbcc008ef66505071d65/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8ad0c477e888d34c8fc6dbcc008ef66505071d65", "patch": "@@ -68,6 +68,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"regs.h\"\n #include \"tree-vector-builder.h\"\n #include \"gimple-fold.h\"\n+#include \"escaped_string.h\"\n \n /* Tree code classes.  */\n \n@@ -13225,22 +13226,6 @@ typedef_variant_p (const_tree type)\n   return is_typedef_decl (TYPE_NAME (type));\n }\n \n-/* A class to handle converting a string that might contain\n-   control characters, (eg newline, form-feed, etc), into one\n-   in which contains escape sequences instead.  */\n-\n-class escaped_string\n-{\n- public:\n-  escaped_string () { m_owned = false; m_str = NULL; };\n-  ~escaped_string () { if (m_owned) free (m_str); }\n-  operator const char *() const { return (const char *) m_str; }\n-  void escape (const char *);\n- private:\n-  char *m_str;\n-  bool  m_owned;\n-};\n-\n /* PR 84195: Replace control characters in \"unescaped\" with their\n    escaped equivalents.  Allow newlines if -fmessage-length has\n    been set to a non-zero value.  This is done here, rather than"}]}