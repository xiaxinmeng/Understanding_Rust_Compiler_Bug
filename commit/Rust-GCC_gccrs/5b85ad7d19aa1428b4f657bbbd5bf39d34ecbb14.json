{"sha": "5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI4NWFkN2QxOWFhMTQyOGI0ZjY1N2JiYmQ1YmYzOWQzNGVjYmIxNA==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-12-15T14:09:02Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-12-15T14:09:02Z"}, "message": "exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Use Component_Size of the innermost array instead of Esize of its component...\n\ngcc/ada/\n\n2017-12-15  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Use Component_Size of\n\tthe innermost array instead of Esize of its component type to exclude\n\tinappropriate array types, including packed array types.\n\n2017-12-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Input_Item): Allow concurrent types to appear\n\twithin the input list of Initializes. Remove the uses of Input_OK.\n\n2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_In): Do not replace a membership test on a\n\tscalar type with a validity test when the membership appears in a\n\tpredicate expression, to prevent a spurious error when predicate is\n\tspecified static.\n\t* sem_ch13.adb (Build_Predicate_Functions): Add warning if a static\n\tpredicate, after constant-folding, reduces to True and is this\n\tredundant.\n\t* par-ch4.adb: Typo fixes and minor reformattings.\n\n2017-12-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_elab.adb (Ensure_Prior_Elaboration_Static): Mark the generated\n\twith clause as being implicit for an instantiation in order to\n\tcircumvent an issue with 'W' and 'Z' line encodings in ALI files.\n\n2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Is_Potentially_Unevaluated): Detect further cases of\n\tmisuse of 'Old that appear within an expression that is potentially\n\tunevaluated, when the prefix of the attribute does not statically\n\tdesignate an object (e.g. a function call).\n\n2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Conformking_Types): Two incomplete types are conforming\n\twhen one of them is used as a generic actual, but only within an\n\tinstantiation.\n\t* einfo.ads: Clarify use of flag Used_As_Generic_Actual.\n\n2017-12-15  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_attr.adb (Resolve_Attribute): Modify check for aliased view on\n\tprefix to use the prefix's original node to avoid looking at expanded\n\tconversions for certain array types.\n\n2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Membership_Op): Add warning on a membership\n\toperation on a scalar type for which there is a user-defined equality\n\toperator.\n\n2017-12-15  Yannick Moy  <moy@adacore.com>\n\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Add Ghost assertion\n\tpolicy.\n\ngcc/testsuite/\n\n2017-12-15  Justin Squirek  <squirek@adacore.com>\n\n\t* gnat.dg/aliasing4.adb: New testcase.\n\n2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* gnat.dg/incomplete6.adb, gnat.dg/incomplete6.ads: New testcase.\n\n2017-12-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* gnat.dg/initializes.ads, gnat.dg/initializes.adb: New testcase.\n\n2017-12-15  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* gnat.dg/component_size.adb: New testcase.\n\nFrom-SVN: r255695", "tree": {"sha": "58b9152ed281cbe6a6a154cff71534b94032422c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58b9152ed281cbe6a6a154cff71534b94032422c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/comments", "author": null, "committer": null, "parents": [{"sha": "87a5e0e8c65c0066f497d54e88ff2c1dc6eb3a97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a5e0e8c65c0066f497d54e88ff2c1dc6eb3a97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a5e0e8c65c0066f497d54e88ff2c1dc6eb3a97"}], "stats": {"total": 375, "additions": 319, "deletions": 56}, "files": [{"sha": "fb3e7f48218bd76c5ce66e6c6e3d18fd0410abbd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -1,3 +1,62 @@\n+2017-12-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Use Component_Size of\n+\tthe innermost array instead of Esize of its component type to exclude\n+\tinappropriate array types, including packed array types.\n+\n+2017-12-15  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Input_Item): Allow concurrent types to appear\n+\twithin the input list of Initializes. Remove the uses of Input_OK.\n+\n+2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_In): Do not replace a membership test on a\n+\tscalar type with a validity test when the membership appears in a\n+\tpredicate expression, to prevent a spurious error when predicate is\n+\tspecified static.\n+\t* sem_ch13.adb (Build_Predicate_Functions): Add warning if a static\n+\tpredicate, after constant-folding, reduces to True and is this\n+\tredundant.\n+\t* par-ch4.adb: Typo fixes and minor reformattings.\n+\n+2017-12-15  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_elab.adb (Ensure_Prior_Elaboration_Static): Mark the generated\n+\twith clause as being implicit for an instantiation in order to\n+\tcircumvent an issue with 'W' and 'Z' line encodings in ALI files.\n+\n+2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Is_Potentially_Unevaluated): Detect further cases of\n+\tmisuse of 'Old that appear within an expression that is potentially\n+\tunevaluated, when the prefix of the attribute does not statically\n+\tdesignate an object (e.g. a function call).\n+\n+2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Conformking_Types): Two incomplete types are conforming\n+\twhen one of them is used as a generic actual, but only within an\n+\tinstantiation.\n+\t* einfo.ads: Clarify use of flag Used_As_Generic_Actual.\n+\n+2017-12-15  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute): Modify check for aliased view on\n+\tprefix to use the prefix's original node to avoid looking at expanded\n+\tconversions for certain array types.\n+\n+2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Membership_Op): Add warning on a membership\n+\toperation on a scalar type for which there is a user-defined equality\n+\toperator.\n+\n+2017-12-15  Yannick Moy  <moy@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Add Ghost assertion\n+\tpolicy.\n+\n 2017-12-15  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Analyze_Initialization_Item): Remove the specialized"}, {"sha": "d6ded29fa4063bc6f6de58fbe0469e972e0d22de", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -419,6 +419,7 @@ Syntax::\n                         Assume               |\n                         Contract_Cases       |\n                         Debug                |\n+                        Ghost                |\n                         Invariant            |\n                         Invariant'Class      |\n                         Loop_Invariant       |"}, {"sha": "dd6652b05663476451a2b24598a95fa0218613df", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -4583,7 +4583,9 @@ package Einfo is\n \n --    Used_As_Generic_Actual (Flag222)\n --       Defined in all entities, set if the entity is used as an argument to\n---       a generic instantiation. Used to tune certain warning messages.\n+--       a generic instantiation. Used to tune certain warning messages, and\n+--       in checking type conformance within an instantiation that involves\n+--       incomplete formal and actual types.\n \n --    Uses_Lock_Free (Flag188)\n --       Defined in protected type entities. Set to True when the Lock Free"}, {"sha": "92c040ee8abda94cda27dbac06371706574e1a19", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -4895,14 +4895,14 @@ package body Exp_Aggr is\n \n       --    1. N consists of a single OTHERS choice, possibly recursively\n \n-      --    2. The array type is not packed\n+      --    2. The array type has no null ranges (the purpose of this is to\n+      --       avoid a bogus warning for an out-of-range value).\n \n       --    3. The array type has no atomic components\n \n-      --    4. The array type has no null ranges (the purpose of this is to\n-      --       avoid a bogus warning for an out-of-range value).\n+      --    4. The component type is elementary\n \n-      --    5. The component type is elementary\n+      --    5. The component size is a multiple of Storage_Unit\n \n       --    6. The component size is Storage_Unit or the value is of the form\n       --       M * (1 + A**1 + A**2 + .. A**(K-1)) where A = 2**(Storage_Unit)\n@@ -4918,6 +4918,7 @@ package body Exp_Aggr is\n          Expr      : Node_Id := N;\n          Low       : Node_Id;\n          High      : Node_Id;\n+         Csiz      : Uint;\n          Remainder : Uint;\n          Value     : Uint;\n          Nunits    : Nat;\n@@ -4933,14 +4934,6 @@ package body Exp_Aggr is\n                return False;\n             end if;\n \n-            if Present (Packed_Array_Impl_Type (Ctyp)) then\n-               return False;\n-            end if;\n-\n-            if Has_Atomic_Components (Ctyp) then\n-               return False;\n-            end if;\n-\n             Index := First_Index (Ctyp);\n             while Present (Index) loop\n                Get_Index_Bounds (Index, Low, High);\n@@ -4964,6 +4957,11 @@ package body Exp_Aggr is\n                Expr := Expression (First (Component_Associations (Expr)));\n             end loop;\n \n+            if Has_Atomic_Components (Ctyp) then\n+               return False;\n+            end if;\n+\n+            Csiz := Component_Size (Ctyp);\n             Ctyp := Component_Type (Ctyp);\n \n             if Is_Atomic_Or_VFA (Ctyp) then\n@@ -4978,20 +4976,19 @@ package body Exp_Aggr is\n             return False;\n          end if;\n \n-         --  All elementary types are supported\n+         --  Access types need to be dealt with specially\n \n-         if not Is_Elementary_Type (Ctyp) then\n-            return False;\n-         end if;\n+         if Is_Access_Type (Ctyp) then\n \n-         --  However access types need to be dealt with specially\n+            --  Component_Size is not set by Layout_Type if the component\n+            --  type is an access type ???\n \n-         if Is_Access_Type (Ctyp) then\n+            Csiz := Esize (Ctyp);\n \n             --  Fat pointers are rejected as they are not really elementary\n             --  for the backend.\n \n-            if Esize (Ctyp) /= System_Address_Size then\n+            if Csiz /= System_Address_Size then\n                return False;\n             end if;\n \n@@ -5002,15 +4999,26 @@ package body Exp_Aggr is\n             if Nkind (Expr) /= N_Null and then not Is_Entity_Name (Expr) then\n                return False;\n             end if;\n+\n+         --  Scalar types are OK if their size is a multiple of Storage_Unit\n+\n+         elsif Is_Scalar_Type (Ctyp) then\n+\n+            if Csiz mod System_Storage_Unit /= 0 then\n+               return False;\n+            end if;\n+\n+         --  Composite types are rejected\n+\n+         else\n+            return False;\n          end if;\n \n          --  The expression needs to be analyzed if True is returned\n \n          Analyze_And_Resolve (Expr, Ctyp);\n \n-         --  The back end uses the Esize as the precision of the type\n-\n-         Nunits := UI_To_Int (Esize (Ctyp)) / System_Storage_Unit;\n+         Nunits := UI_To_Int (Csiz) / System_Storage_Unit;\n \n          if Nunits = 1 then\n             return True;"}, {"sha": "c5f64ae9252365790bb4c1641544e99974b031fa", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -6015,10 +6015,20 @@ package body Exp_Ch4 is\n               --  have a test in the generic that makes sense with some types\n               --  and not with other types.\n \n-              and then not In_Instance\n+              --  Similarly, do not rewrite membership as a validity check if\n+              --  within the predicate function for the type.\n+\n             then\n-               Substitute_Valid_Check;\n-               goto Leave;\n+               if In_Instance\n+                 or else (Ekind (Current_Scope) = E_Function\n+                           and then Is_Predicate_Function (Current_Scope))\n+               then\n+                  null;\n+\n+               else\n+                  Substitute_Valid_Check;\n+                  goto Leave;\n+               end if;\n             end if;\n \n             --  If we have an explicit range, do a bit of optimization based on"}, {"sha": "0cec92a88808841503216270d387aa1bfde11c53", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , Nov 09, 2017\n+GNAT Reference Manual , Dec 15, 2017\n \n AdaCore\n \n@@ -1784,6 +1784,7 @@ ID_ASSERTION_KIND ::= Assertions           |\n                       Assume               |\n                       Contract_Cases       |\n                       Debug                |\n+                      Ghost                |\n                       Invariant            |\n                       Invariant'Class      |\n                       Loop_Invariant       |"}, {"sha": "893011a81fc86cadb46b0ad70d33c2b1e7b7644d", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -645,8 +645,8 @@ package body Ch4 is\n          --      case of a name which can be extended in the normal manner.\n          --      This case is handled by LP_State_Name or LP_State_Expr.\n \n-         --      (Ada2020) : the expression can be a reduction_expression_\n-         --      psarameter, i.e. a box or  < Simple_Expression >\n+         --      (Ada 2020): the expression can be a reduction_expression_\n+         --      parameter, i.e. a box or < Simple_Expression >.\n \n          --      Note: if and case expressions (without an extra level of\n          --      parentheses) are permitted in this context).\n@@ -679,7 +679,7 @@ package body Ch4 is\n          end if;\n \n          --  Here we have an expression after all, which may be a reduction\n-         --  expression with a binary operator\n+         --  expression with a binary operator.\n \n          if Token = Tok_Less then\n             Scan; -- past <\n@@ -2894,7 +2894,7 @@ package body Ch4 is\n                Node1 := P_Name;\n                return Node1;\n \n-            --  Ada2020: reduction expression parameter\n+            --  Ada 2020: reduction expression parameter\n \n             when Tok_Less =>\n                Scan; -- past <"}, {"sha": "6db531a7f2bf42777adbbe76bb2d8c72611e0c96", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -11111,7 +11111,7 @@ package body Sem_Attr is\n               and then not (Nkind (P) = N_Selected_Component\n                              and then\n                                Is_Overloadable (Entity (Selector_Name (P))))\n-              and then not Is_Aliased_View (P)\n+              and then not Is_Aliased_View (Original_Node (P))\n               and then not In_Instance\n               and then not In_Inlined_Body\n               and then Comes_From_Source (N)"}, {"sha": "d2533b01f7eb7e2116353abc589983783d3bf7ae", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -11919,6 +11919,12 @@ package body Sem_Ch13 is\n       then\n          return True;\n \n+      elsif Is_Entity_Name (Expr)\n+        and then Entity (Expr) = Standard_True\n+      then\n+         Error_Msg_N (\"predicate is redundant (always True)?\", Expr);\n+         return True;\n+\n       --  That's an exhaustive list of tests, all other cases are not\n       --  predicate-static, so we return False.\n "}, {"sha": "0a6c30ad8b9fea3797294640037e1fb66b459f47", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -4155,7 +4155,7 @@ package body Sem_Ch4 is\n               and then Parent (Loop_Par) /= N\n             then\n                --  The parser cannot distinguish between a loop specification\n-               --  and an iterator specification. If after pre-analysis the\n+               --  and an iterator specification. If after preanalysis the\n                --  proper form has been recognized, rewrite the expression to\n                --  reflect the right kind. This is needed for proper ASIS\n                --  navigation. If expansion is enabled, the transformation is\n@@ -4378,7 +4378,7 @@ package body Sem_Ch4 is\n               and then Parent (Loop_Par) /= N\n             then\n                --  The parser cannot distinguish between a loop specification\n-               --  and an iterator specification. If after pre-analysis the\n+               --  and an iterator specification. If after preanalysis the\n                --  proper form has been recognized, rewrite the expression to\n                --  reflect the right kind. This is needed for proper ASIS\n                --  navigation. If expansion is enabled, the transformation is"}, {"sha": "cb5b3e7bd9aea09fbb7a674417d2dfaf6cfb61ce", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -7666,10 +7666,12 @@ package body Sem_Ch6 is\n          return True;\n \n       --  In Ada 2012, incomplete types (including limited views) can appear\n-      --  as actuals in instantiations.\n+      --  as actuals in instantiations, where they are conformant to the\n+      --  corresponding incomplete formal.\n \n       elsif Is_Incomplete_Type (Type_1)\n         and then Is_Incomplete_Type (Type_2)\n+        and then In_Instance\n         and then (Used_As_Generic_Actual (Type_1)\n                    or else Used_As_Generic_Actual (Type_2))\n       then"}, {"sha": "90746b4862eb3d1510fc35b67b1c5b0a879c0884", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -3585,6 +3585,16 @@ package body Sem_Elab is\n          Set_Implicit_With (Clause);\n          Set_Library_Unit  (Clause, Unit_Cunit);\n \n+         --  The following is a kludge to satisfy a GPRbuild requirement. In\n+         --  general, internal with clauses should be encoded on a 'Z' line in\n+         --  ALI files, but due to an old bug, they are encoded as source with\n+         --  clauses on a 'W' line. As a result, these \"semi-implicit\" clauses\n+         --  introduce spurious build dependencies in GPRbuild. The only way to\n+         --  eliminate this effect is to mark the implicit clauses as generated\n+         --  for an instantiation.\n+\n+         Set_Implicit_With_From_Instantiation (Clause);\n+\n          Append_To (Items, Clause);\n       end if;\n "}, {"sha": "6bf66ad84a8ca21ac6a8992835353b9cf7299eb6", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -2867,7 +2867,6 @@ package body Sem_Prag is\n \n          procedure Analyze_Input_Item (Input : Node_Id) is\n             Input_Id : Entity_Id;\n-            Input_OK : Boolean := True;\n \n          begin\n             --  Null input list\n@@ -2908,6 +2907,8 @@ package body Sem_Prag is\n                                                  E_In_Parameter,\n                                                  E_In_Out_Parameter,\n                                                  E_Out_Parameter,\n+                                                 E_Protected_Type,\n+                                                 E_Task_Type,\n                                                  E_Variable)\n                   then\n                      --  The input cannot denote states or objects declared\n@@ -2933,38 +2934,37 @@ package body Sem_Prag is\n                            null;\n \n                         else\n-                           Input_OK := False;\n                            Error_Msg_Name_1 := Chars (Pack_Id);\n                            SPARK_Msg_NE\n                              (\"input item & cannot denote a visible object or \"\n                               & \"state of package %\", Input, Input_Id);\n+                           return;\n                         end if;\n                      end if;\n \n                      --  Detect a duplicate use of the same input item\n                      --  (SPARK RM 7.1.5(5)).\n \n                      if Contains (Inputs_Seen, Input_Id) then\n-                        Input_OK := False;\n                         SPARK_Msg_N (\"duplicate input item\", Input);\n+                        return;\n                      end if;\n \n-                     --  Input is legal, add it to the list of processed inputs\n+                     --  At this point it is known that the input is legal. Add\n+                     --  it to the list of processed inputs.\n \n-                     if Input_OK then\n-                        Append_New_Elmt (Input_Id, Inputs_Seen);\n+                     Append_New_Elmt (Input_Id, Inputs_Seen);\n \n-                        if Ekind (Input_Id) = E_Abstract_State then\n-                           Append_New_Elmt (Input_Id, States_Seen);\n-                        end if;\n+                     if Ekind (Input_Id) = E_Abstract_State then\n+                        Append_New_Elmt (Input_Id, States_Seen);\n+                     end if;\n \n-                        if Ekind_In (Input_Id, E_Abstract_State,\n-                                               E_Constant,\n-                                               E_Variable)\n-                          and then Present (Encapsulating_State (Input_Id))\n-                        then\n-                           Append_New_Elmt (Input_Id, Constits_Seen);\n-                        end if;\n+                     if Ekind_In (Input_Id, E_Abstract_State,\n+                                            E_Constant,\n+                                            E_Variable)\n+                       and then Present (Encapsulating_State (Input_Id))\n+                     then\n+                        Append_New_Elmt (Input_Id, Constits_Seen);\n                      end if;\n \n                   --  The input references something that is not a state or an"}, {"sha": "23a95a46c8e64e1185c2e1dc98e27a1ca244d042", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -9086,6 +9086,21 @@ package body Sem_Res is\n                end loop;\n             end;\n          end if;\n+\n+         --  RM 4.5.2 (28.1/3) specifies that for types other than records or\n+         --  limited types, evaluation of a membership test uses the predefined\n+         --  equality for the type. This may be confusing to users, and the\n+         --  following warning appears useful for the most common case.\n+\n+         if Is_Scalar_Type (Ltyp)\n+           and then Present (Get_User_Defined_Eq (Ltyp))\n+         then\n+            Error_Msg_NE\n+              (\"membership test on& uses predefined equality?\", N, Ltyp);\n+            Error_Msg_N\n+              (\"\\even if user-defined equality exists (RM 4.5.2 (28.1/3)?\", N);\n+         end if;\n+\n       end Resolve_Set_Membership;\n \n    --  Start of processing for Resolve_Membership_Op"}, {"sha": "972bda5e34640e0eb80e4f91efa3a1e21300e5d7", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -15816,17 +15816,30 @@ package body Sem_Util is\n \n    begin\n       Expr := N;\n-      Par  := Parent (N);\n+      Par  := N;\n \n       --  A postcondition whose expression is a short-circuit is broken down\n       --  into individual aspects for better exception reporting. The original\n       --  short-circuit expression is rewritten as the second operand, and an\n       --  occurrence of 'Old in that operand is potentially unevaluated.\n-      --  See Sem_ch13.adb for details of this transformation.\n+      --  See sem_ch13.adb for details of this transformation. The reference\n+      --  to 'Old may appear within an expression, so we must look for the\n+      --  enclosing pragma argument in the tree that contains the reference.\n \n-      if Nkind (Original_Node (Par)) = N_And_Then then\n-         return True;\n-      end if;\n+      while Present (Par)\n+        and then Nkind (Par) /= N_Pragma_Argument_Association\n+      loop\n+         if Nkind (Original_Node (Par)) = N_And_Then then\n+            return True;\n+         end if;\n+\n+         Par := Parent (Par);\n+      end loop;\n+\n+      --  Other cases; 'Old appears within other expression (not the top-level\n+      --  conjunct in a postcondition) with a potentially unevaluated operand.\n+\n+      Par := Parent (Expr);\n \n       while not Nkind_In (Par, N_If_Expression,\n                                N_Case_Expression,"}, {"sha": "176a7b9c44f8f86f611831b95d3a2a14ca65d8fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -1,3 +1,19 @@\n+2017-12-15  Justin Squirek  <squirek@adacore.com>\n+\n+\t* gnat.dg/aliasing4.adb: New testcase.\n+\n+2017-12-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/incomplete6.adb, gnat.dg/incomplete6.ads: New testcase.\n+\n+2017-12-15  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/initializes.ads, gnat.dg/initializes.adb: New testcase.\n+\n+2017-12-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/component_size.adb: New testcase.\n+\n 2017-12-15  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/83388"}, {"sha": "72b170de6a76334be6c41eda6e707dcd37066cb8", "filename": "gcc/testsuite/gnat.dg/component_size.adb", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Ftestsuite%2Fgnat.dg%2Fcomponent_size.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Ftestsuite%2Fgnat.dg%2Fcomponent_size.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fcomponent_size.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -0,0 +1,37 @@\n+--  { dg-do run }\n+\n+procedure Component_Size is\n+\n+   C_Unsigned_Long_Size : constant := 32;\n+   type T_Unsigned_Long is range 0 .. (2 ** 31) - 1;\n+   for T_Unsigned_Long'Size use C_Unsigned_Long_Size;\n+\n+   C_Unsigned_Byte_Size : constant := 8;\n+   type T_Unsigned_Byte is range 0 .. (2 ** 8) - 1;\n+   for T_Unsigned_Byte'Size use C_Unsigned_Byte_Size;\n+\n+   type T_Unsigned_Byte_Without_Size_Repr is range 0 .. (2 ** 8) - 1;\n+\n+   C_Nb_Data : constant T_Unsigned_Long := 9;\n+   subtype T_Nb_Data is T_Unsigned_Long range 1 .. C_Nb_Data;\n+   \n+   type T_Wrong_Id is array (T_Nb_Data) of T_Unsigned_Byte;\n+   for T_Wrong_Id'Component_Size use C_Unsigned_Long_Size;\n+\n+   type T_Correct_Id is array (T_Nb_Data) of T_Unsigned_Byte_Without_Size_Repr;\n+   for T_Correct_Id'Component_Size use C_Unsigned_Long_Size;  \n+\n+   C_Value : constant := 1;\n+\n+   C_Wrong_Id : constant T_Wrong_Id := T_Wrong_Id'(others => C_Value);\n+   C_Correct_Id : constant T_Correct_Id := T_Correct_Id'(others => C_Value);\n+\n+begin\n+   if C_Correct_Id /= T_Correct_Id'(others => C_Value) then\n+      raise Program_Error;\n+   end if;\n+\n+   if C_Wrong_Id /= T_Wrong_Id'(others => C_Value) then\n+      raise Program_Error;\n+   end if;\n+end;"}, {"sha": "b2bf64297e185376a6d89e9420c8e71373f4ddcd", "filename": "gcc/testsuite/gnat.dg/incomplete6.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Ftestsuite%2Fgnat.dg%2Fincomplete6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Ftestsuite%2Fgnat.dg%2Fincomplete6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fincomplete6.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -0,0 +1,15 @@\n+--  { dg-do compile }\n+\n+package body Incomplete6 is\n+\n+   function \"=\" (Left, Right : Vint) return Boolean is\n+   begin\n+      return Left.Value = Right.Value;\n+   end;\n+   \n+   function \"=\" (Left, Right : Vfloat) return Boolean is\n+   begin\n+      return Left.Value = Right.Value;\n+   end;\n+\n+end;"}, {"sha": "52beb6e5f5be4c2eefdc59a28f7d606fd917388a", "filename": "gcc/testsuite/gnat.dg/incomplete6.ads", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Ftestsuite%2Fgnat.dg%2Fincomplete6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Ftestsuite%2Fgnat.dg%2Fincomplete6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fincomplete6.ads?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -0,0 +1,22 @@\n+with Ada.Unchecked_Conversion;\n+\n+package Incomplete6 is\n+   \n+   type Vint;\n+   function \"=\" (Left, Right : Vint) return Boolean;\n+\n+   type Vint is record\n+      Value : Integer;\n+   end record;\n+\n+   function To_Integer is new \n+     Ada.Unchecked_Conversion(Source => Vint, Target => Integer);\n+   \n+   type Vfloat;\n+   function \"=\" (Left, Right : in Vfloat) return Boolean;\n+\n+   type Vfloat is record\n+      Value : Float;\n+   end record;\n+\n+end;"}, {"sha": "11058ed2b308f563cdc80b31d642187c73f5b0bc", "filename": "gcc/testsuite/gnat.dg/initializes.adb", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Ftestsuite%2Fgnat.dg%2Finitializes.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Ftestsuite%2Fgnat.dg%2Finitializes.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finitializes.adb?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -0,0 +1,33 @@\n+--  { dg-do compile }\n+\n+package body Initializes is\n+   protected body PO is\n+      procedure Proc is\n+         package Inner with Initializes => (Y => PO) is              --  OK\n+            Y : Boolean := X;\n+         end Inner;\n+\n+         procedure Nested with Global => PO is                       --  OK\n+         begin\n+            null;\n+         end Nested;\n+      begin\n+         Nested;\n+      end Proc;\n+   end PO;\n+\n+   protected body PT is\n+      procedure Proc is\n+         package Inner with Initializes => (Y => PT) is              --  OK\n+            Y : Boolean := X;\n+         end Inner;\n+\n+         procedure Nested with Global => PT is                       --  OK\n+         begin\n+            null;\n+         end Nested;\n+      begin\n+         Nested;\n+      end Proc;\n+   end PT;\n+end Initializes;"}, {"sha": "d7b2f93342fbf31f949a216658117240ab255331", "filename": "gcc/testsuite/gnat.dg/initializes.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Ftestsuite%2Fgnat.dg%2Finitializes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14/gcc%2Ftestsuite%2Fgnat.dg%2Finitializes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finitializes.ads?ref=5b85ad7d19aa1428b4f657bbbd5bf39d34ecbb14", "patch": "@@ -0,0 +1,13 @@\n+package Initializes is\n+   protected PO is\n+      procedure Proc;\n+   private\n+      X : Boolean := True;\n+   end PO;\n+\n+   protected type PT is\n+      procedure Proc;\n+   private\n+      X : Boolean := True;\n+   end PT;\n+end Initializes;"}]}