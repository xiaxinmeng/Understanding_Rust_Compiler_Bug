{"sha": "6ad024b4c0011de3a2c3a461e44f5e0ac3b70123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFkMDI0YjRjMDAxMWRlM2EyYzNhNDYxZTQ0ZjVlMGFjM2I3MDEyMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-01-05T13:41:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-01-05T13:41:34Z"}, "message": "re PR tree-optimization/51760 (ICE in set_lattice_value, at tree-ssa-ccp.c:456)\n\n2012-01-05  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/51760\n\t* tree-ssa-ccp.c (likely_value): Drop UNDEFINED to CONSTANT,\n\tnot VARYING.\n\t(bit_value_unop): Handle UNDEFINED operands.\n\t(bit_value_binop): Likewise.\n\n\t* gcc.dg/torture/pr51760.c: New testcase.\n\nFrom-SVN: r182909", "tree": {"sha": "dfc04cfd1214b568092a48852182c24f30c0fd05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfc04cfd1214b568092a48852182c24f30c0fd05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ad024b4c0011de3a2c3a461e44f5e0ac3b70123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad024b4c0011de3a2c3a461e44f5e0ac3b70123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad024b4c0011de3a2c3a461e44f5e0ac3b70123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad024b4c0011de3a2c3a461e44f5e0ac3b70123/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "713b8dfb751d1d60e63b3005df128dc5cd3fd921", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713b8dfb751d1d60e63b3005df128dc5cd3fd921", "html_url": "https://github.com/Rust-GCC/gccrs/commit/713b8dfb751d1d60e63b3005df128dc5cd3fd921"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "487ce17aeabe36e6b008948ba28d53d33b95845d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad024b4c0011de3a2c3a461e44f5e0ac3b70123/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad024b4c0011de3a2c3a461e44f5e0ac3b70123/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ad024b4c0011de3a2c3a461e44f5e0ac3b70123", "patch": "@@ -1,3 +1,11 @@\n+2012-01-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51760\n+\t* tree-ssa-ccp.c (likely_value): Drop UNDEFINED to CONSTANT,\n+\tnot VARYING.\n+\t(bit_value_unop): Handle UNDEFINED operands.\n+\t(bit_value_binop): Likewise.\n+\n 2012-01-05  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.c (avr_replace_prefix): Remove."}, {"sha": "1064393e13882e6d6a9e70dfe0d0a0a2088e9945", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad024b4c0011de3a2c3a461e44f5e0ac3b70123/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad024b4c0011de3a2c3a461e44f5e0ac3b70123/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ad024b4c0011de3a2c3a461e44f5e0ac3b70123", "patch": "@@ -1,3 +1,8 @@\n+2012-01-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/51760\n+\t* gcc.dg/torture/pr51760.c: New testcase.\n+\n 2012-01-05  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR middle-end/51472"}, {"sha": "ebff2c930436b14e5c8cbbb1f861b5e4e785864d", "filename": "gcc/testsuite/gcc.dg/torture/pr51760.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad024b4c0011de3a2c3a461e44f5e0ac3b70123/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51760.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad024b4c0011de3a2c3a461e44f5e0ac3b70123/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51760.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr51760.c?ref=6ad024b4c0011de3a2c3a461e44f5e0ac3b70123", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+\n+extern inline __attribute__ ((always_inline)) void *\n+memmove (void *dest, const void *src, __SIZE_TYPE__ len)\n+{\n+  return __builtin___memmove_chk (dest, src, len,\n+\t\t\t\t  __builtin_object_size (dest, 0));\n+}\n+\n+void\n+foo (void)\n+{\n+  char a[64], *b;\n+  for (;;)\n+    {\n+      memmove (a, b, 0);\n+      b = a;\n+    }\n+}"}, {"sha": "2080c06cce649feb62c7a6bcf23e0f696b8c0588", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad024b4c0011de3a2c3a461e44f5e0ac3b70123/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad024b4c0011de3a2c3a461e44f5e0ac3b70123/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=6ad024b4c0011de3a2c3a461e44f5e0ac3b70123", "patch": "@@ -657,9 +657,10 @@ likely_value (gimple stmt)\n \t}\n     }\n   /* If there was an UNDEFINED operand but the result may be not UNDEFINED\n-     fall back to VARYING even if there were CONSTANT operands.  */\n+     fall back to CONSTANT.  During iteration UNDEFINED may still drop\n+     to CONSTANT.  */\n   if (has_undefined_operand)\n-    return VARYING;\n+    return CONSTANT;\n \n   /* We do not consider virtual operands here -- load from read-only\n      memory may have only VARYING virtual operands, but still be\n@@ -1368,6 +1369,10 @@ bit_value_unop (enum tree_code code, tree type, tree rhs)\n   prop_value_t rval = get_value_for_expr (rhs, true);\n   double_int value, mask;\n   prop_value_t val;\n+\n+  if (rval.lattice_val == UNDEFINED)\n+    return rval;\n+\n   gcc_assert ((rval.lattice_val == CONSTANT\n \t       && TREE_CODE (rval.value) == INTEGER_CST)\n \t      || double_int_minus_one_p (rval.mask));\n@@ -1399,6 +1404,16 @@ bit_value_binop (enum tree_code code, tree type, tree rhs1, tree rhs2)\n   prop_value_t r2val = get_value_for_expr (rhs2, true);\n   double_int value, mask;\n   prop_value_t val;\n+\n+  if (r1val.lattice_val == UNDEFINED\n+      || r2val.lattice_val == UNDEFINED)\n+    {\n+      val.lattice_val = VARYING;\n+      val.value = NULL_TREE;\n+      val.mask = double_int_minus_one;\n+      return val;\n+    }\n+\n   gcc_assert ((r1val.lattice_val == CONSTANT\n \t       && TREE_CODE (r1val.value) == INTEGER_CST)\n \t      || double_int_minus_one_p (r1val.mask));"}]}