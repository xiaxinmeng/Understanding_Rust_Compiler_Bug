{"sha": "4f0504d9072cc2ced75e6a1586d95d1f33e4fb37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwNTA0ZDkwNzJjYzJjZWQ3NWU2YTE1ODZkOTVkMWYzM2U0ZmIzNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2003-10-13T09:57:48Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2003-10-13T09:57:48Z"}, "message": "re PR target/12538 (%l7 is call-clobbered with -mflat -fpic)\n\n\tPR target/12538\n\t* config/sparc/sparc.c (MUST_SAVE_REGISTER): Delete.\n\t(sparc_flat_must_save_register_p): New function to decide whether\n\ta register must be saved/restored in the function prologue/epilogue.\n\t(sparc_flat_compute_frame_size): Use it instead of MUST_SAVE_REGISTER.\n\nFrom-SVN: r72425", "tree": {"sha": "50c7ff5ae002ce78500bcd26a321ceec684290b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50c7ff5ae002ce78500bcd26a321ceec684290b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f0504d9072cc2ced75e6a1586d95d1f33e4fb37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0504d9072cc2ced75e6a1586d95d1f33e4fb37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0504d9072cc2ced75e6a1586d95d1f33e4fb37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0504d9072cc2ced75e6a1586d95d1f33e4fb37/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf27749919d173df7d053658a350cc0bfa314efc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf27749919d173df7d053658a350cc0bfa314efc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf27749919d173df7d053658a350cc0bfa314efc"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "1dc3473e04e70e027f16839ef5b3bd4a9ba749f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0504d9072cc2ced75e6a1586d95d1f33e4fb37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0504d9072cc2ced75e6a1586d95d1f33e4fb37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f0504d9072cc2ced75e6a1586d95d1f33e4fb37", "patch": "@@ -1,3 +1,11 @@\n+2003-10-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/12538\n+\t* config/sparc/sparc.c (MUST_SAVE_REGISTER): Delete.\n+\t(sparc_flat_must_save_register_p): New function to decide whether\n+\ta register must be saved/restored in the function prologue/epilogue.\n+\t(sparc_flat_compute_frame_size): Use it instead of MUST_SAVE_REGISTER.\n+\n 2003-10-12  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* config/avr/avr.c, config/avr/avr-protos.h: Convert to"}, {"sha": "aeb6709923e1880fe33a7366cefb9c01de92b3e1", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0504d9072cc2ced75e6a1586d95d1f33e4fb37/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0504d9072cc2ced75e6a1586d95d1f33e4fb37/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=4f0504d9072cc2ced75e6a1586d95d1f33e4fb37", "patch": "@@ -7257,17 +7257,39 @@ struct sparc_frame_info current_frame_info;\n /* Zero structure to initialize current_frame_info.  */\n struct sparc_frame_info zero_frame_info;\n \n-/* Tell prologue and epilogue if register REGNO should be saved / restored.  */\n-\n #define RETURN_ADDR_REGNUM 15\n #define HARD_FRAME_POINTER_MASK (1 << (HARD_FRAME_POINTER_REGNUM))\n #define RETURN_ADDR_MASK (1 << (RETURN_ADDR_REGNUM))\n+\f\n+/* Tell prologue and epilogue if register REGNO should be saved / restored.  */\n \n-#define MUST_SAVE_REGISTER(regno) \\\n- ((regs_ever_live[regno] && !call_used_regs[regno])\t\t\t\\\n-  || (regno == HARD_FRAME_POINTER_REGNUM && frame_pointer_needed)\t\\\n-  || (regno == RETURN_ADDR_REGNUM && regs_ever_live[RETURN_ADDR_REGNUM]))\n+static bool\n+sparc_flat_must_save_register_p (int regno)\n+{\n+  /* General case: call-saved registers live at some point.  */\n+  if (!call_used_regs[regno] && regs_ever_live[regno])\n+    return true;\n+  \n+  /* Frame pointer register (%i7) if needed.  */\n+  if (regno == HARD_FRAME_POINTER_REGNUM && frame_pointer_needed)\n+    return true;\n+\n+  /* PIC register (%l7) if needed.  */\n+  if (regno == (int) PIC_OFFSET_TABLE_REGNUM\n+      && flag_pic && current_function_uses_pic_offset_table)\n+    return true;\n+\n+  /* Return address register (%o7) if needed.  */\n+  if (regno == RETURN_ADDR_REGNUM\n+      && (regs_ever_live[RETURN_ADDR_REGNUM]\n+\t  /* When the PIC offset table is used, the PIC register\n+\t     is set by using a bare call that clobbers %o7.  */\n+\t  || (flag_pic && current_function_uses_pic_offset_table)))\n+    return true;\n \n+  return false;\n+}\n+\f\n /* Return the bytes needed to compute the frame pointer from the current\n    stack pointer.  */\n \n@@ -7309,11 +7331,11 @@ sparc_flat_compute_frame_size (int size)\n   /* Calculate space needed for gp registers.  */\n   for (regno = 1; regno <= 31; regno++)\n     {\n-      if (MUST_SAVE_REGISTER (regno))\n+      if (sparc_flat_must_save_register_p (regno))\n \t{\n \t  /* If we need to save two regs in a row, ensure there's room to bump\n \t     up the address to align it to a doubleword boundary.  */\n-\t  if ((regno & 0x1) == 0 && MUST_SAVE_REGISTER (regno+1))\n+\t  if ((regno & 0x1) == 0 && sparc_flat_must_save_register_p (regno+1))\n \t    {\n \t      if (gp_reg_size % 8 != 0)\n \t\tgp_reg_size += 4;"}]}