{"sha": "57d6f4d04d438522dc03488ca31f71b4b7b904c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkNmY0ZDA0ZDQzODUyMmRjMDM0ODhjYTMxZjcxYjRiN2I5MDRjOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-06-18T14:54:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-06-18T14:54:34Z"}, "message": "[AArch64] Add a new CC mode for SVE conditions\n\nThe SVE ACLE patches need to introduce a new CC_NZC mode for the\nconditions that can be tested after a PTRUE.  In particular, LT needs\nto map to \"mi\"/\"first\" and GE to \"pl\"/\"nfrst\", instead of the normal\nCC mapping.\n\nAnother advantage of using a separate mode is that we can print the SVE\nnames of the conditions, which makes the output a bit easier to read.\nIt therefore seems like an independent improvement that can go in now.\n\nThe patch also avoids using (compare X (const_int 0)), because that gets\nfolded away when used with LTU and GEU (\"cc\"/\"last\" and \"cs\"/\"nlast\").\nJust using an unspec should be OK.\n\nThe full set of conditions can't be tested without other SVE ACLE patches.\n\n2019-06-18  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-modes.def (CC_NZC): New CC_MODE.\n\t* config/aarch64/aarch64-sve.md (*<optab><mode>3_cc)\n\t(ptest_ptrue<mode>, while_ult<GPI:mode><PRED_ALL:mode>)\n\t(*while_ult<GPI:mode><PRED_ALL:mode>_cc, *cmp<cmp_op><mode>)\n\t(*cmp<cmp_op><mode>_ptest, *cmp<cmp_op><mode>_cc)\n\t(*pred_cmp<cmp_op><mode>_combine, *pred_cmp<cmp_op><mode>)\n\t(vec_cmp<mode><vpred>, vec_cmpu<mode><vpred>, cbranch<mode>4):\n\tUse CC_NZC instead of CC.\n\t* config/aarch64/aarch64.md (condjump): Print a '.' in SVE conditions.\n\t* config/aarch64/aarch64.c (aarch64_sve_condition_codes): New variable.\n\t(aarch64_print_operand): Handle E_CC_NZCmode.\n\t(aarch64_emit_sve_ptrue_op_cc): Use gen_set_clobber_cc_nzc instead\n\tof gen_set_clobber_cc.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/struct_vect_18.c: Allow branches to\n\tcontain dots.\n\t* gcc.target/aarch64/sve/struct_vect_19.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_20.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_21.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_22.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_23.c: Likewise.\n\t* gcc.target/aarch64/sve/unroll-1.c: Likewise.\n\t* gcc.target/aarch64/sve/while_1.c: Check for b.any.\n\nFrom-SVN: r272427", "tree": {"sha": "dd650f90d4926e5b59e3f819ee22468af7c43e87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd650f90d4926e5b59e3f819ee22468af7c43e87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57d6f4d04d438522dc03488ca31f71b4b7b904c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d6f4d04d438522dc03488ca31f71b4b7b904c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d6f4d04d438522dc03488ca31f71b4b7b904c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d6f4d04d438522dc03488ca31f71b4b7b904c8/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea403d8bb5129632aac4d2f270566d2d0073a8ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea403d8bb5129632aac4d2f270566d2d0073a8ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea403d8bb5129632aac4d2f270566d2d0073a8ae"}], "stats": {"total": 193, "additions": 123, "deletions": 70}, "files": [{"sha": "f0a3c3919804877285046beef105f725b496c124", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -1,3 +1,19 @@\n+2019-06-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-modes.def (CC_NZC): New CC_MODE.\n+\t* config/aarch64/aarch64-sve.md (*<optab><mode>3_cc)\n+\t(ptest_ptrue<mode>, while_ult<GPI:mode><PRED_ALL:mode>)\n+\t(*while_ult<GPI:mode><PRED_ALL:mode>_cc, *cmp<cmp_op><mode>)\n+\t(*cmp<cmp_op><mode>_ptest, *cmp<cmp_op><mode>_cc)\n+\t(*pred_cmp<cmp_op><mode>_combine, *pred_cmp<cmp_op><mode>)\n+\t(vec_cmp<mode><vpred>, vec_cmpu<mode><vpred>, cbranch<mode>4):\n+\tUse CC_NZC instead of CC.\n+\t* config/aarch64/aarch64.md (condjump): Print a '.' in SVE conditions.\n+\t* config/aarch64/aarch64.c (aarch64_sve_condition_codes): New variable.\n+\t(aarch64_print_operand): Handle E_CC_NZCmode.\n+\t(aarch64_emit_sve_ptrue_op_cc): Use gen_set_clobber_cc_nzc instead\n+\tof gen_set_clobber_cc.\n+\n 2019-06-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-sve.md: Tabify file."}, {"sha": "e034ffc969b3f16399565c7ad749b85eec9f942a", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -33,6 +33,8 @@\n CC_MODE (CCFP);\n CC_MODE (CCFPE);\n CC_MODE (CC_SWP);\n+CC_MODE (CC_NZC);   /* Only N, Z and C bits of condition flags are valid.\n+\t\t       (Used with SVE predicate tests.)  */\n CC_MODE (CC_NZ);    /* Only N and Z bits of condition flags are valid.  */\n CC_MODE (CC_Z);     /* Only Z bit of condition flags is valid.  */\n CC_MODE (CC_C);     /* C represents unsigned overflow of a simple addition.  */"}, {"sha": "a09e8c7554633a6577c5c734ffb2dfe7bc523934", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 50, "deletions": 57, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -1172,16 +1172,15 @@\n ;; UNSPEC_PTEST_PTRUE is logically redundant, but means that the tested\n ;; value is structurally equivalent to rhs of the second set.\n (define_insn \"*<optab><mode>3_cc\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC\n-\t  (unspec:SI [(match_operand:PRED_ALL 1 \"register_operand\" \"Upa\")\n-\t\t      (and:PRED_ALL\n-\t\t\t(LOGICAL:PRED_ALL\n-\t\t\t  (match_operand:PRED_ALL 2 \"register_operand\" \"Upa\")\n-\t\t\t  (match_operand:PRED_ALL 3 \"register_operand\" \"Upa\"))\n-\t\t\t(match_dup 1))]\n-\t\t     UNSPEC_PTEST_PTRUE)\n-\t  (const_int 0)))\n+  [(set (reg:CC_NZC CC_REGNUM)\n+\t(unspec:CC_NZC\n+\t  [(match_operand:PRED_ALL 1 \"register_operand\" \"Upa\")\n+\t   (and:PRED_ALL\n+\t     (LOGICAL:PRED_ALL\n+\t       (match_operand:PRED_ALL 2 \"register_operand\" \"Upa\")\n+\t       (match_operand:PRED_ALL 3 \"register_operand\" \"Upa\"))\n+\t     (match_dup 1))]\n+\t  UNSPEC_PTEST_PTRUE))\n    (set (match_operand:PRED_ALL 0 \"register_operand\" \"=Upa\")\n \t(and:PRED_ALL (LOGICAL:PRED_ALL (match_dup 2) (match_dup 3))\n \t\t      (match_dup 1)))]\n@@ -1320,12 +1319,11 @@\n ;; the constant.  We would use a separate unspec code for PTESTs involving\n ;; GPs that might not be PTRUEs.\n (define_insn \"ptest_ptrue<mode>\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC\n-\t  (unspec:SI [(match_operand:PRED_ALL 0 \"register_operand\" \"Upa\")\n-\t\t      (match_operand:PRED_ALL 1 \"register_operand\" \"Upa\")]\n-\t\t     UNSPEC_PTEST_PTRUE)\n-\t  (const_int 0)))]\n+  [(set (reg:CC_NZC CC_REGNUM)\n+\t(unspec:CC_NZC\n+\t  [(match_operand:PRED_ALL 0 \"register_operand\" \"Upa\")\n+\t   (match_operand:PRED_ALL 1 \"register_operand\" \"Upa\")]\n+\t  UNSPEC_PTEST_PTRUE))]\n   \"TARGET_SVE\"\n   \"ptest\\t%0, %1.b\"\n )\n@@ -1337,7 +1335,7 @@\n \t(unspec:PRED_ALL [(match_operand:GPI 1 \"aarch64_reg_or_zero\" \"rZ\")\n \t\t\t  (match_operand:GPI 2 \"aarch64_reg_or_zero\" \"rZ\")]\n \t\t\t UNSPEC_WHILE_LO))\n-   (clobber (reg:CC CC_REGNUM))]\n+   (clobber (reg:CC_NZC CC_REGNUM))]\n   \"TARGET_SVE\"\n   \"whilelo\\t%0.<PRED_ALL:Vetype>, %<w>1, %<w>2\"\n )\n@@ -1346,15 +1344,14 @@\n ;; Handle the case in which both results are useful.  The GP operand\n ;; to the PTEST isn't needed, so we allow it to be anything.\n (define_insn_and_rewrite \"*while_ult<GPI:mode><PRED_ALL:mode>_cc\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC\n-\t  (unspec:SI [(match_operand:PRED_ALL 1)\n-\t\t      (unspec:PRED_ALL\n-\t\t\t[(match_operand:GPI 2 \"aarch64_reg_or_zero\" \"rZ\")\n-\t\t\t (match_operand:GPI 3 \"aarch64_reg_or_zero\" \"rZ\")]\n-\t\t\tUNSPEC_WHILE_LO)]\n-\t\t     UNSPEC_PTEST_PTRUE)\n-\t  (const_int 0)))\n+  [(set (reg:CC_NZC CC_REGNUM)\n+\t(unspec:CC_NZC\n+\t  [(match_operand:PRED_ALL 1)\n+\t   (unspec:PRED_ALL\n+\t     [(match_operand:GPI 2 \"aarch64_reg_or_zero\" \"rZ\")\n+\t      (match_operand:GPI 3 \"aarch64_reg_or_zero\" \"rZ\")]\n+\t     UNSPEC_WHILE_LO)]\n+\t  UNSPEC_PTEST_PTRUE))\n    (set (match_operand:PRED_ALL 0 \"register_operand\" \"=Upa\")\n \t(unspec:PRED_ALL [(match_dup 2)\n \t\t\t  (match_dup 3)]\n@@ -1378,7 +1375,7 @@\n \t     (match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n \t     (match_operand:SVE_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n \t  UNSPEC_MERGE_PTRUE))\n-   (clobber (reg:CC CC_REGNUM))]\n+   (clobber (reg:CC_NZC CC_REGNUM))]\n   \"TARGET_SVE\"\n   \"@\n    cmp<cmp_op>\\t%0.<Vetype>, %1/z, %2.<Vetype>, #%3\n@@ -1388,18 +1385,16 @@\n ;; Integer comparisons predicated with a PTRUE in which only the flags result\n ;; is interesting.\n (define_insn \"*cmp<cmp_op><mode>_ptest\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC\n-\t  (unspec:SI\n-\t    [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t     (unspec:<VPRED>\n-\t       [(match_dup 1)\n-\t\t(SVE_INT_CMP:<VPRED>\n-\t\t  (match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n-\t\t  (match_operand:SVE_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n-\t       UNSPEC_MERGE_PTRUE)]\n-\t    UNSPEC_PTEST_PTRUE)\n-\t  (const_int 0)))\n+  [(set (reg:CC_NZC CC_REGNUM)\n+\t(unspec:CC_NZC\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:<VPRED>\n+\t     [(match_dup 1)\n+\t      (SVE_INT_CMP:<VPRED>\n+\t\t(match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n+\t\t(match_operand:SVE_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n+\t     UNSPEC_MERGE_PTRUE)]\n+\t  UNSPEC_PTEST_PTRUE))\n    (clobber (match_scratch:<VPRED> 0 \"=Upa, Upa\"))]\n   \"TARGET_SVE\"\n   \"@\n@@ -1410,18 +1405,16 @@\n ;; Integer comparisons predicated with a PTRUE in which both the flag and\n ;; predicate results are interesting.\n (define_insn \"*cmp<cmp_op><mode>_cc\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC\n-\t  (unspec:SI\n-\t    [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t     (unspec:<VPRED>\n-\t       [(match_dup 1)\n-\t\t(SVE_INT_CMP:<VPRED>\n-\t\t  (match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n-\t\t  (match_operand:SVE_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n-\t       UNSPEC_MERGE_PTRUE)]\n-\t    UNSPEC_PTEST_PTRUE)\n-\t  (const_int 0)))\n+  [(set (reg:CC_NZC CC_REGNUM)\n+\t(unspec:CC_NZC\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:<VPRED>\n+\t     [(match_dup 1)\n+\t      (SVE_INT_CMP:<VPRED>\n+\t\t(match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n+\t\t(match_operand:SVE_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n+\t     UNSPEC_MERGE_PTRUE)]\n+\t  UNSPEC_PTEST_PTRUE))\n    (set (match_operand:<VPRED> 0 \"register_operand\" \"=Upa, Upa\")\n \t(unspec:<VPRED>\n \t  [(match_dup 1)\n@@ -1449,7 +1442,7 @@\n \t      (match_operand:SVE_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n \t   UNSPEC_MERGE_PTRUE)\n \t (match_operand:<VPRED> 4 \"register_operand\" \"Upl, Upl\")))\n-   (clobber (reg:CC CC_REGNUM))]\n+   (clobber (reg:CC_NZC CC_REGNUM))]\n   \"TARGET_SVE\"\n   \"#\"\n   \"&& 1\"\n@@ -1460,7 +1453,7 @@\n \t      (match_dup 2)\n \t      (match_dup 3))\n \t    (match_dup 4)))\n-      (clobber (reg:CC CC_REGNUM))])]\n+      (clobber (reg:CC_NZC CC_REGNUM))])]\n )\n \n ;; Predicated integer comparisons.\n@@ -1471,7 +1464,7 @@\n \t    (match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n \t    (match_operand:SVE_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))\n \t  (match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")))\n-   (clobber (reg:CC CC_REGNUM))]\n+   (clobber (reg:CC_NZC CC_REGNUM))]\n   \"TARGET_SVE\"\n   \"@\n    cmp<cmp_op>\\t%0.<Vetype>, %1/z, %2.<Vetype>, #%3\n@@ -1684,7 +1677,7 @@\n \t  (match_operator:<VPRED> 1 \"comparison_operator\"\n \t    [(match_operand:SVE_I 2 \"register_operand\")\n \t     (match_operand:SVE_I 3 \"nonmemory_operand\")]))\n-     (clobber (reg:CC CC_REGNUM))])]\n+     (clobber (reg:CC_NZC CC_REGNUM))])]\n   \"TARGET_SVE\"\n   {\n     aarch64_expand_sve_vec_cmp_int (operands[0], GET_CODE (operands[1]),\n@@ -1702,7 +1695,7 @@\n \t  (match_operator:<VPRED> 1 \"comparison_operator\"\n \t    [(match_operand:SVE_I 2 \"register_operand\")\n \t     (match_operand:SVE_I 3 \"nonmemory_operand\")]))\n-     (clobber (reg:CC CC_REGNUM))])]\n+     (clobber (reg:CC_NZC CC_REGNUM))])]\n   \"TARGET_SVE\"\n   {\n     aarch64_expand_sve_vec_cmp_int (operands[0], GET_CODE (operands[1]),\n@@ -1749,7 +1742,7 @@\n \t\t\t\t\toperands[2]));\n       }\n     emit_insn (gen_ptest_ptrue<mode> (ptrue, pred));\n-    operands[1] = gen_rtx_REG (CCmode, CC_REGNUM);\n+    operands[1] = gen_rtx_REG (CC_NZCmode, CC_REGNUM);\n     operands[2] = const0_rtx;\n   }\n )"}, {"sha": "285ae1cfa7c942433d32ef34f1110a5b40931e3a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -1308,6 +1308,13 @@ static const char * const aarch64_condition_codes[] =\n   \"hi\", \"ls\", \"ge\", \"lt\", \"gt\", \"le\", \"al\", \"nv\"\n };\n \n+/* The preferred condition codes for SVE conditions.  */\n+static const char *const aarch64_sve_condition_codes[] =\n+{\n+  \"none\", \"any\", \"nlast\", \"last\", \"first\", \"nfrst\", \"vs\", \"vc\",\n+  \"pmore\", \"plast\", \"tcont\", \"tstop\", \"gt\", \"le\", \"al\", \"nv\"\n+};\n+\n /* Generate code to enable conditional branches in functions over 1 MiB.  */\n const char *\n aarch64_gen_far_branch (rtx * operands, int pos_label, const char * dest,\n@@ -7401,6 +7408,21 @@ aarch64_get_condition_code_1 (machine_mode mode, enum rtx_code comp_code)\n \t}\n       break;\n \n+    case E_CC_NZCmode:\n+      switch (comp_code)\n+\t{\n+\tcase NE: return AARCH64_NE; /* = any */\n+\tcase EQ: return AARCH64_EQ; /* = none */\n+\tcase GE: return AARCH64_PL; /* = nfrst */\n+\tcase LT: return AARCH64_MI; /* = first */\n+\tcase GEU: return AARCH64_CS; /* = nlast */\n+\tcase GTU: return AARCH64_HI; /* = pmore */\n+\tcase LEU: return AARCH64_LS; /* = plast */\n+\tcase LTU: return AARCH64_CC; /* = last */\n+\tdefault: return -1;\n+\t}\n+      break;\n+\n     case E_CC_NZmode:\n       switch (comp_code)\n \t{\n@@ -7734,7 +7756,10 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n         gcc_assert (cond_code >= 0);\n \tif (code == 'M')\n \t  cond_code = AARCH64_INVERSE_CONDITION_CODE (cond_code);\n-\tfputs (aarch64_condition_codes[cond_code], f);\n+\tif (GET_MODE (XEXP (x, 0)) == CC_NZCmode)\n+\t  fputs (aarch64_sve_condition_codes[cond_code], f);\n+\telse\n+\t  fputs (aarch64_condition_codes[cond_code], f);\n       }\n       break;\n \n@@ -17059,7 +17084,7 @@ aarch64_emit_sve_ptrue_op_cc (rtx target, rtx ptrue, rtx op)\n   rtx unspec = gen_rtx_UNSPEC (GET_MODE (target),\n \t\t\t       gen_rtvec (2, ptrue, op),\n \t\t\t       UNSPEC_MERGE_PTRUE);\n-  rtx_insn *insn = emit_insn (gen_set_clobber_cc (target, unspec));\n+  rtx_insn *insn = emit_insn (gen_set_clobber_cc_nzc (target, unspec));\n   set_unique_reg_note (insn, REG_EQUAL, copy_rtx (op));\n }\n "}, {"sha": "91e46cf6bf2dc0f9ec71b1ca85424f8ac673951e", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -534,10 +534,14 @@\n \t\t\t   (pc)))]\n   \"\"\n   {\n+    /* GCC's traditional style has been to use \"beq\" instead of \"b.eq\", etc.,\n+       but the \".\" is required for SVE conditions.  */\n+    bool use_dot_p = GET_MODE (operands[1]) == CC_NZCmode;\n     if (get_attr_length (insn) == 8)\n-      return aarch64_gen_far_branch (operands, 2, \"Lbcond\", \"b%M0\\\\t\");\n+      return aarch64_gen_far_branch (operands, 2, \"Lbcond\",\n+\t\t\t\t     use_dot_p ? \"b.%M0\\\\t\" : \"b%M0\\\\t\");\n     else\n-      return  \"b%m0\\\\t%l2\";\n+      return use_dot_p ? \"b.%m0\\\\t%l2\" : \"b%m0\\\\t%l2\";\n   }\n   [(set_attr \"type\" \"branch\")\n    (set (attr \"length\")\n@@ -7121,10 +7125,10 @@\n )\n \n ;; Helper for aarch64.c code.\n-(define_expand \"set_clobber_cc\"\n+(define_expand \"set_clobber_cc_nzc\"\n   [(parallel [(set (match_operand 0)\n \t\t   (match_operand 1))\n-\t      (clobber (reg:CC CC_REGNUM))])])\n+\t      (clobber (reg:CC_NZC CC_REGNUM))])])\n \n ;; Hard speculation barrier.\n (define_insn \"speculation_barrier\""}, {"sha": "cbbaacdeac62002940a8c6ad06942e09ec64ea96", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -1,3 +1,15 @@\n+2019-06-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/struct_vect_18.c: Allow branches to\n+\tcontain dots.\n+\t* gcc.target/aarch64/sve/struct_vect_19.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_20.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_21.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_22.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_23.c: Likewise.\n+\t* gcc.target/aarch64/sve/unroll-1.c: Likewise.\n+\t* gcc.target/aarch64/sve/while_1.c: Check for b.any.\n+\n 2019-06-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/pr81563.c (dg-final): Check that no"}, {"sha": "3bc53b69d1c8a2bc421789ad9d0b255fdb5ed4e0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_18.c?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -46,4 +46,4 @@ TEST (test)\n /* { dg-final { scan-assembler-times {\\tstr\\td} 1 } } */\n \n /* The only branches should be in the vectorized loop.  */\n-/* { dg-final { scan-assembler-times {\\tb[a-z]+\\t} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tb[.a-z]+\\t} 4 } } */"}, {"sha": "833bf06698eb339036a2fd37c7d153c58b91dc79", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_19.c?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -46,4 +46,4 @@ TEST (test)\n /* Each function should have three branches: one directly to the exit\n    (n <= 0), one to the single scalar epilogue iteration (n == 1),\n    and one branch-back for the vectorized loop.  */\n-/* { dg-final { scan-assembler-times {\\tb[a-z]+\\t} 12 } } */\n+/* { dg-final { scan-assembler-times {\\tb[.a-z]+\\t} 12 } } */"}, {"sha": "858ca74f86c3f22175044b7b649cfe6f0e38f61b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_20.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_20.c?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -46,4 +46,4 @@ TEST (test)\n /* { dg-final { scan-assembler-times {\\tstr\\td} 1 } } */\n \n /* The only branches should be in the vectorized loop.  */\n-/* { dg-final { scan-assembler-times {\\tb[a-z]+\\t} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tb[.a-z]+\\t} 4 } } */"}, {"sha": "95691fe9ee3d094b6b2f5a3910e0dbcbafd35c0b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_21.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_21.c?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -46,4 +46,4 @@ TEST (test)\n /* Each function should have three branches: one directly to the exit\n    (n <= 0), one to the single scalar epilogue iteration (n == 1),\n    and one branch-back for the vectorized loop.  */\n-/* { dg-final { scan-assembler-times {\\tb[a-z]+\\t} 12 } } */\n+/* { dg-final { scan-assembler-times {\\tb[.a-z]+\\t} 12 } } */"}, {"sha": "8eb072505751a60df22cfd8f6c5ffe8c63d31aa8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_22.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_22.c?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -46,4 +46,4 @@ TEST (test)\n /* { dg-final { scan-assembler-times {\\tstr\\td} 1 } } */\n \n /* The only branches should be in the vectorized loop.  */\n-/* { dg-final { scan-assembler-times {\\tb[a-z]+\\t} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tb[.a-z]+\\t} 4 } } */"}, {"sha": "705b2350ace81d146ed20a46a1e59311e953cbdd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_23.c?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -46,4 +46,4 @@ TEST (test)\n /* Each function should have three branches: one directly to the exit\n    (n <= 0), one to the single scalar epilogue iteration (n == 1),\n    and one branch-back for the vectorized loop.  */\n-/* { dg-final { scan-assembler-times {\\tb[a-z]+\\t} 12 } } */\n+/* { dg-final { scan-assembler-times {\\tb[.a-z]+\\t} 12 } } */"}, {"sha": "e33777fc3911d0b612aef0073ae1333f8c2297a5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/unroll-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funroll-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funroll-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Funroll-1.c?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -10,4 +10,4 @@ fully_peel_me (double *x)\n     x[i] = x[i] * 2;\n }\n \n-/* { dg-final { scan-assembler-times {b..\\t\\.L.\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tb[.a-z]+\\t} 1 } } */"}, {"sha": "2cfb3f697980bd207ba870eab6255361b5dfd8fe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/while_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fwhile_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d6f4d04d438522dc03488ca31f71b4b7b904c8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fwhile_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fwhile_1.c?ref=57d6f4d04d438522dc03488ca31f71b4b7b904c8", "patch": "@@ -42,3 +42,4 @@ TEST_ALL (ADD_LOOP)\n /* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.s, p[0-7], \\[x0, x[0-9]+, lsl 2\\]\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d, p[0-7]/z, \\[x0, x[0-9]+, lsl 3\\]\\n} 3 } } */\n /* { dg-final { scan-assembler-times {\\tst1d\\tz[0-9]+\\.d, p[0-7], \\[x0, x[0-9]+, lsl 3\\]\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tb\\.any\\t} 10 } } */"}]}