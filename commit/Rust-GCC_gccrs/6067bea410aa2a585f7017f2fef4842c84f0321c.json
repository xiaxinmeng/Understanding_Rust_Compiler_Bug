{"sha": "6067bea410aa2a585f7017f2fef4842c84f0321c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA2N2JlYTQxMGFhMmE1ODVmNzAxN2YyZmVmNDg0MmM4NGYwMzIxYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-02-18T05:45:07Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-02-18T05:45:07Z"}, "message": "[multiple changes]\n\n\n2003-02-17  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/basic_ios.tcc (copyfmt): Copy locale data as well.\n\t* testsuite/27_io/ios_members.cc (test03): New.\n\n2003-02-17  Jerry Quinn  <jlquinn@optonline.net>\n\n\t* include/bits/basic_ios.h (basic_ios::_M_cache_locale): Declare.\n\t(basic_ios::_M_cache_facets): Move into above.\n\t* include/bits/basic_ios.tcc (basic_ios::copyfmt): Rebuild locale\n\tcache.\n\t(basic_ios::imbue): Force locale cache to be built.\n\t(basic_ios::_M_init): Create and initialize locale cache.\n\t* include/bits/ios_base.h (__locale_cache_base): Declare.\n\t(ios_base::_M_locale_cache): New.\n\t(ios_base::_M_cache): Define.\n\t* include/bits/locale_facets.h:\t(__num_base): Fix comment.  Add\n\t_S_end.\n        (__locale_cache_base,__locale_cache<_CharT>):  New classes.\n\t(__locale_cache<char>, __locale_cache<wchar_t>): New specializations.\n\t* include/bits/locale_facets.tcc (num_put::_M_convert_int): Use locale\n\tcache literal string, grouping flag, thousands separator.\n\t(__locale_cache<_CharT>::__locale_cache): New.\n\t(__locale_cache<_CharT>::_M_init): New.\n\t(__locale_cache<_CharT>::_M_populate): New.\n\t* src/ios.cc: Clear _M_locale_cache in constructor.\n\t* src/locale-inst.cc (__locale_cache<char>, __locale_cache<_char_t>):\n\tNew.\n\nFrom-SVN: r63025", "tree": {"sha": "e8f49b2b967a099d049c6df4409481d94e63de77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8f49b2b967a099d049c6df4409481d94e63de77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6067bea410aa2a585f7017f2fef4842c84f0321c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6067bea410aa2a585f7017f2fef4842c84f0321c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6067bea410aa2a585f7017f2fef4842c84f0321c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6067bea410aa2a585f7017f2fef4842c84f0321c/comments", "author": null, "committer": null, "parents": [{"sha": "59ac5a1725b2e1184c83ac7dcd755fd33d06f696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ac5a1725b2e1184c83ac7dcd755fd33d06f696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ac5a1725b2e1184c83ac7dcd755fd33d06f696"}], "stats": {"total": 285, "additions": 224, "deletions": 61}, "files": [{"sha": "f3fb9fe96e42d0ba220b09a9d62183f7c77b6758", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6067bea410aa2a585f7017f2fef4842c84f0321c", "patch": "@@ -1,3 +1,32 @@\n+2003-02-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/basic_ios.tcc (copyfmt): Copy locale data as well.\n+\t* testsuite/27_io/ios_members.cc (test03): New.\n+\n+2003-02-17  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\t* include/bits/basic_ios.h (basic_ios::_M_cache_locale): Declare.\n+\t(basic_ios::_M_cache_facets): Move into above.\n+\t* include/bits/basic_ios.tcc (basic_ios::copyfmt): Rebuild locale\n+\tcache.\n+\t(basic_ios::imbue): Force locale cache to be built.\n+\t(basic_ios::_M_init): Create and initialize locale cache.\n+\t* include/bits/ios_base.h (__locale_cache_base): Declare.\n+\t(ios_base::_M_locale_cache): New.\n+\t(ios_base::_M_cache): Define.\n+\t* include/bits/locale_facets.h:\t(__num_base): Fix comment.  Add\n+\t_S_end.\n+        (__locale_cache_base,__locale_cache<_CharT>):  New classes.\n+\t(__locale_cache<char>, __locale_cache<wchar_t>): New specializations.\n+\t* include/bits/locale_facets.tcc (num_put::_M_convert_int): Use locale\n+\tcache literal string, grouping flag, thousands separator.\n+\t(__locale_cache<_CharT>::__locale_cache): New.\n+\t(__locale_cache<_CharT>::_M_init): New.\n+\t(__locale_cache<_CharT>::_M_populate): New.\n+\t* src/ios.cc: Clear _M_locale_cache in constructor.\n+\t* src/locale-inst.cc (__locale_cache<char>, __locale_cache<_char_t>):\n+\tNew.\n+\n 2003-02-17  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* src/locale-inst.cc: Do not include <cassert>."}, {"sha": "7d0e47ef3af7abcfe4e1297fe64d743db3cdb61b", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=6067bea410aa2a585f7017f2fef4842c84f0321c", "patch": "@@ -1,6 +1,7 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003 \n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -90,9 +91,9 @@ namespace std\n \n       // Cached use_facet<ctype>, which is based on the current locale info.\n       const __ctype_type*                            _M_fctype;      \n-      // From ostream.\n+      // For ostream.\n       const __numput_type*                           _M_fnumput;\n-      // From istream.\n+      // For istream.\n       const __numget_type*                           _M_fnumget;\n \n     public:\n@@ -239,7 +240,8 @@ namespace std\n        *  The parameter is passed by derived streams.\n       */\n       explicit \n-      basic_ios(basic_streambuf<_CharT, _Traits>* __sb) : ios_base() \n+      basic_ios(basic_streambuf<_CharT, _Traits>* __sb) \n+      : ios_base(), _M_fctype(0), _M_fnumput(0), _M_fnumget(0)\n       { this->init(__sb); }\n \n       /**\n@@ -438,7 +440,7 @@ namespace std\n       }\n \n       void\n-      _M_cache_facets(const locale& __loc);\n+      _M_cache_locale(const locale& __loc);\n     };\n } // namespace std\n "}, {"sha": "8ac1c6093225c59b2618475ec7a0bb4a5990f291", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=6067bea410aa2a585f7017f2fef4842c84f0321c", "patch": "@@ -60,12 +60,12 @@ namespace std\n     basic_ios<_CharT, _Traits>&\n     basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)\n     {\n-      // Per 27.1.1.1, do not call imbue, yet must trash all caches\n+      // Per 27.1.1, do not call imbue, yet must trash all caches\n       // associated with imbue()\n \n       // Alloc any new word array first, so if it fails we have \"rollback\".\n       _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?\n-\t_M_local_word : new _Words[__rhs._M_word_size];\n+\t                 _M_local_word : new _Words[__rhs._M_word_size];\n \n       // Bump refs before doing callbacks, for safety.\n       _Callback_list* __cb = __rhs._M_callbacks;\n@@ -79,7 +79,8 @@ namespace std\n \t}\n       _M_dispose_callbacks();\n \n-      _M_callbacks = __cb;  // NB: Don't want any added during above.\n+      // NB: Don't want any added during above.\n+      _M_callbacks = __cb;  \n       for (int __i = 0; __i < __rhs._M_word_size; ++__i)\n \t__words[__i] = __rhs._M_word[__i];\n       if (_M_word != _M_local_word) \n@@ -95,10 +96,14 @@ namespace std\n       this->precision(__rhs.precision());\n       this->tie(__rhs.tie());\n       this->fill(__rhs.fill());\n+      _M_ios_locale = __rhs.getloc();\n+      _M_cache_locale(_M_ios_locale);\n+\n+      _M_call_callbacks(copyfmt_event);\n+\n       // The next is required to be the last assignment.\n       this->exceptions(__rhs.exceptions());\n-      \n-      _M_call_callbacks(copyfmt_event);\n+\n       return *this;\n     }\n \n@@ -129,7 +134,7 @@ namespace std\n     {\n       locale __old(this->getloc());\n       ios_base::imbue(__loc);\n-      _M_cache_facets(__loc);\n+      _M_cache_locale(__loc);\n       if (this->rdbuf() != 0)\n \tthis->rdbuf()->pubimbue(__loc);\n       return __old;\n@@ -141,8 +146,14 @@ namespace std\n     {\n       // NB: This may be called more than once on the same object.\n       ios_base::_M_init();\n-      _M_cache_facets(_M_ios_locale);\n-      _M_tie = 0;\n+\n+      // Cache locale data and specific facets used by iostreams.\n+      if (!_M_locale_cache.get())\n+\t{\n+\t  typedef __locale_cache<_CharT> __cache_t;\n+\t  this->_M_locale_cache = auto_ptr<__locale_cache_base>(static_cast<__locale_cache_base*>(new __cache_t));\n+\t  _M_cache_locale(_M_ios_locale);\n+\t}\n \n       // NB: The 27.4.4.1 Postconditions Table specifies requirements\n       // after basic_ios::init() has been called. As part of this,\n@@ -159,28 +170,23 @@ namespace std\n       _M_fill = _CharT();\n       _M_fill_init = false;\n \n+      _M_tie = 0;\n       _M_exception = goodbit;\n       _M_streambuf = __sb;\n       _M_streambuf_state = __sb ? goodbit : badbit;\n     }\n \n   template<typename _CharT, typename _Traits>\n     void\n-    basic_ios<_CharT, _Traits>::_M_cache_facets(const locale& __loc)\n+    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)\n     {\n-      if (has_facet<__ctype_type>(__loc))\n+      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))\n \t_M_fctype = &use_facet<__ctype_type>(__loc);\n-      else\n-\t_M_fctype = 0;\n-      // Should be filled in by ostream and istream, respectively.\n-      if (has_facet<__numput_type>(__loc))\n+      if (__builtin_expect(has_facet<__numput_type>(__loc), true))\n \t_M_fnumput = &use_facet<__numput_type>(__loc); \n-      else\n-\t_M_fnumput = 0;\n-      if (has_facet<__numget_type>(__loc))\n+      if (__builtin_expect(has_facet<__numget_type>(__loc), true))\n \t_M_fnumget = &use_facet<__numget_type>(__loc); \n-      else\n-\t_M_fnumget = 0;\n+      static_cast<__locale_cache<_CharT>&>(_M_cache())._M_init(__loc); \n     }\n \n   // Inhibit implicit instantiations for required instantiations,"}, {"sha": "26ee38df383a19f1a7b65e4fc6998576900258ec", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=6067bea410aa2a585f7017f2fef4842c84f0321c", "patch": "@@ -146,6 +146,8 @@ namespace std\n \n   enum _Ios_Seekdir { _M_ios_seekdir_end = 1L << 16 };\n \n+  class __locale_cache_base;\n+\n   // 27.4.2  Class ios_base\n   /**\n    *  @brief  The very top of the I/O class hierarchy.\n@@ -430,6 +432,10 @@ namespace std\n     // Members for locale and locale caching.\n     locale \t\t_M_ios_locale;\n \n+    // Cache of locale and facet data.\n+    // Cast this to __locale_cache<_CharT>*\n+    auto_ptr<__locale_cache_base>\t_M_locale_cache;\n+\n     void \n     _M_init();\n \n@@ -636,6 +642,11 @@ namespace std\n       return __word._M_pword;\n     }\n \n+    // Access to the cache.  Not safe to call until basic_ios::_M_init() has\n+    // happened.\n+    __locale_cache_base&\n+    _M_cache() { return *_M_locale_cache; }\n+\n     // Destructor\n     /**\n      *  Destroys local storage and"}, {"sha": "59154f4c35e54883c223c2866c505c3a97bc9093", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 79, "deletions": 8, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=6067bea410aa2a585f7017f2fef4842c84f0321c", "patch": "@@ -161,6 +161,7 @@ namespace std\n       return __s;\n     }\n \n+\n   // 22.2.1.1  Template class ctype\n   // Include host and configuration specific ctype enums for ctype_base.\n   #include <bits/ctype_base.h>\n@@ -531,8 +532,8 @@ namespace std\n   class __num_base \n   {\n   public:\n-    // NB: Code depends on the order of _M_atoms_out elements.\n-    // Below are the indices into _M_atoms_out.\n+    // NB: Code depends on the order of _S_atoms_out elements.\n+    // Below are the indices into _S_atoms_out.\n     enum \n       {  \n         _S_minus, \n@@ -543,14 +544,15 @@ namespace std\n         _S_digits_end = _S_digits + 16,\n         _S_udigits = _S_digits_end,  \n         _S_udigits_end = _S_udigits + 16,\n-        _S_e = _S_digits + 14, // For scientific notation, 'e'\n-        _S_E = _S_udigits + 14 // For scientific notation, 'E'\n+        _S_e = _S_digits + 14,  // For scientific notation, 'e'\n+        _S_E = _S_udigits + 14, // For scientific notation, 'E'\n+\t_S_end = _S_udigits_end\n       };\n     \n-    // A list of valid numeric literals for output. \n-    // This array contains the chars after having been passed through\n-    // the current locale's ctype<_CharT>.widen().\n-    // For the standard \"C\" locale, this is \n+    // A list of valid numeric literals for output.  This array\n+    // contains chars that will be passed through the current locale's\n+    // ctype<_CharT>.widen() and then used to render numbers.\n+    // For the standard \"C\" locale, this is\n     // \"-+xX0123456789abcdef0123456789ABCDEF\".\n     static const char* _S_atoms_out;\n \n@@ -1931,6 +1933,75 @@ namespace std\n     inline _CharT \n     tolower(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }\n+\n+\n+  // __locale_cache holds the information extracted from the\n+  // numpunct<> and moneypunct<> facets in a form optimized for\n+  // parsing and formatting.  It is stored as an\n+  // auto_ptr<__locale_cache_base> member of ios_base and directly\n+  // accessed via a casting to the derived __locale_cache<_CharT> in\n+  // parameterized facets.\n+  // The intent twofold: to avoid the costs of creating a locale\n+  // object and to avoid calling the virtual functions in a locale's\n+  // facet to look up data.\n+  class __locale_cache_base\n+  {\n+  public:\n+    virtual\n+    ~__locale_cache_base() { }\n+  };\n+\n+  template<typename _CharT>\n+    class __locale_cache : public __locale_cache_base\n+    {\n+      // Types:\n+      typedef _CharT               \tchar_type;\n+      typedef char_traits<_CharT>       traits_type;\n+      typedef basic_string<_CharT>\tstring_type;\n+\n+    public: \n+      // Data Members:\n+\n+      // A list of valid numeric literals: for the standard \"C\"\n+      // locale, this is \"-+xX0123456789abcdef0123456789ABCDEF\".  This\n+      // array contains the chars after having been passed through the\n+      // current locale's ctype<_CharT>.widen().\n+      _CharT                    _M_literals[__num_base::_S_end];\n+\n+      // The sign used to separate decimal values: for standard US\n+      // locales, this would usually be: \".\"  Abstracted from\n+      // numpunct::decimal_point().\n+      _CharT                    _M_decimal_point;\n+\n+      // The sign used to separate groups of digits into smaller\n+      // strings that the eye can parse with less difficulty: for\n+      // standard US locales, this would usually be: \",\" Abstracted\n+      // from numpunct::thousands_sep().\n+      _CharT                    _M_thousands_sep;\n+      \n+      // However the US's \"false\" and \"true\" are translated.  From\n+      // numpunct::truename() and numpunct::falsename(), respectively.\n+      string_type \t\t_M_truename;\n+      string_type \t\t_M_falsename;\n+\n+      // If we are checking groupings. This should be equivalent to\n+      // numpunct::groupings().size() != 0\n+      bool                      _M_use_grouping;\n+\n+      // If we are using numpunct's groupings, this is the current\n+      // grouping string in effect (from numpunct::grouping()).\n+      string                    _M_grouping;\n+\n+      __locale_cache() : _M_use_grouping(false) \n+      { };\n+\n+      __locale_cache& \n+      operator=(const __locale_cache& __lc);\n+\n+      // Make sure the cache is built before the first use.\n+      void \n+      _M_init(const locale&);\n+    };\n } // namespace std\n \n #endif"}, {"sha": "857074f976f162f13ee6499b28dd45aece499728", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=6067bea410aa2a585f7017f2fef4842c84f0321c", "patch": "@@ -768,20 +768,14 @@ namespace std\n       _M_convert_int(_OutIter __s, ios_base& __io, _CharT __fill, \n \t\t     _ValueT __v) const\n       {\n-\t// Buildup list of digits given the current ctype.\n-\t_CharT __lit[_S_udigits_end];\n-\tconst locale __loc = __io.getloc();\n-\tif (__builtin_expect(has_facet< ctype<_CharT> >(__loc), true))\n-\t  {\n-\t    const ctype<_CharT>& __ct = use_facet< ctype<_CharT> >(__loc);\n-\t    __ct.widen(_S_atoms_out, _S_atoms_out + _S_udigits_end, __lit);\n-\t  }\n+\ttypedef __locale_cache<_CharT> __cache_type;\n+\t__cache_type& __lc = static_cast<__cache_type&>(__io._M_cache());\n+\t_CharT* __lit = __lc._M_literals;\n \n \t// Long enough to hold hex, dec, and octal representations.\n \tint __ilen = 4 * sizeof(_ValueT);\n \t_CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n \t\t\t\t\t\t\t     * __ilen));\n-\n \t// [22.2.2.2.2] Stage 1, numeric conversion to character.\n \t// Result is returned right-justified in the buffer.\n \tint __len;\n@@ -790,15 +784,13 @@ namespace std\n \t\n \t// Add grouping, if necessary. \n \t_CharT* __cs2;\n-\tconst numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);\n-\tconst string __grouping = __np.grouping();\n-\tif (__grouping.size())\n+\tif (__lc._M_use_grouping)\n \t  {\n \t    // Grouping can add (almost) as many separators as the\n \t    // number of digits, but no more.\n \t    __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n \t\t\t\t\t\t\t  * __len * 2));\n-\t    _M_group_int(__grouping, __np.thousands_sep(), __io, \n+\t    _M_group_int(__lc._M_grouping, __lc._M_thousands_sep, __io, \n \t\t\t __cs2, __cs, __len);\n \t    __cs = __cs2;\n \t  }\n@@ -2216,6 +2208,31 @@ namespace std\n       return __s;\n     }\n \n+  // Generic definition, locale cache initialization.\n+  template<typename _CharT>\n+    void\n+    __locale_cache<_CharT>::_M_init(const locale& __loc)\n+    {\n+      if (__builtin_expect(has_facet<numpunct<_CharT> >(__loc), true))\n+\t{\n+\t  const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);\n+\t  _M_falsename = __np.falsename();\n+\t  _M_truename = __np.truename();\n+\t  _M_thousands_sep = __np.thousands_sep();\n+\t  _M_decimal_point = __np.decimal_point();\n+\t  _M_grouping = __np.grouping();\n+\t  _M_use_grouping = _M_grouping.size() != 0 \n+\t    \t\t    && _M_grouping.data()[0] != 0;\n+\t}\n+      if (__builtin_expect(has_facet<ctype<_CharT> >(__loc), true))\n+\t{\n+\t  const ctype<_CharT>& __ct = use_facet< ctype<_CharT> >(__loc);\n+\t  __ct.widen(__num_base::_S_atoms_out,\n+\t\t     __num_base::_S_atoms_out + __num_base::_S_end, \n+\t\t     _M_literals);\n+\t}\n+    }\n+\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.  \n   // NB: This syntax is a GNU extension."}, {"sha": "9de6d1309f922c1d86e6a94e397c74f68a541de3", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=6067bea410aa2a585f7017f2fef4842c84f0321c", "patch": "@@ -1,6 +1,6 @@\n // Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -302,7 +302,7 @@ namespace std\n     return __old;\n   }\n \n-  ios_base::ios_base() : _M_callbacks(0), _M_word(0)\n+  ios_base::ios_base() : _M_callbacks(0), _M_word(0), _M_locale_cache(0)\n   {\n     // Do nothing: basic_ios::init() does it.  \n     // NB: _M_callbacks and _M_word must be zero for non-initialized"}, {"sha": "73b028df1beff1b7b655d34df4b8aae3544cf49b", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=6067bea410aa2a585f7017f2fef4842c84f0321c", "patch": "@@ -45,6 +45,7 @@ namespace std\n   template class moneypunct_byname<char, true>;\n   template class money_get<char, istreambuf_iterator<char> >;\n   template class money_put<char, ostreambuf_iterator<char> >;\n+  template class __locale_cache<char>;\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class moneypunct<wchar_t, false>;\n@@ -53,6 +54,7 @@ namespace std\n   template class moneypunct_byname<wchar_t, true>;\n   template class money_get<wchar_t, istreambuf_iterator<wchar_t> >;\n   template class money_put<wchar_t, ostreambuf_iterator<wchar_t> >;\n+  template class __locale_cache<wchar_t>;\n #endif\n \n   // numpunct, numpunct_byname, num_get, and num_put"}, {"sha": "4c3598016789f4e10b67a1ee69e539fd6e1d7b42", "filename": "libstdc++-v3/testsuite/27_io/ios_members.cc", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6067bea410aa2a585f7017f2fef4842c84f0321c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_members.cc?ref=6067bea410aa2a585f7017f2fef4842c84f0321c", "patch": "@@ -1,6 +1,6 @@\n // 1999-09-20 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,15 +40,15 @@ void test01()\n   std::ios_base::fmtflags flag02, flag03;\n   const std::ios_base::fmtflags flag01 = std::ios_base::skipws \n     \t\t\t\t\t | std::ios_base::dec;\n-\n-  const std::locale glocale = std::locale();\n+ \n+  const std::locale c_loc = std::locale::classic();\n \n   std::ios ios_01(NULL);\n   std::ios::char_type ct01;\n   std::ios::char_type ct02('x');;\n \n   // 27.4.2.3 locales\n-  ios_01.imbue(glocale);\n+  ios_01.imbue(c_loc);\n \n   // char narrow(char_type c, char dfault) const;\n   char c1 = ios_01.narrow(ct02, 0);\n@@ -57,10 +57,6 @@ void test01()\n   // char_type widen(char c) const;\n   ct01 = ios_01.widen('c');\n   VERIFY( ct01 == 'c' );\n-\n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n }\n \n // 27.4.4.3 basic_ios iostate flags function\n@@ -76,8 +72,6 @@ void test02()\n   const iostate iostate01 = std::ios_base::badbit | std::ios_base::eofbit;\n   const iostate iostate04 = std::ios_base::badbit;\n \n-  const std::locale glocale = std::locale();\n-\n   std::ios ios_01(NULL);\n   std::ios::char_type ct01;\n   std::ios::char_type ct02('x');;\n@@ -135,14 +129,45 @@ void test02()\n   catch(...) {\n     VERIFY( false );\n   }\n+}\n+\n+// copyfmt and locales.\n+void test03()\n+{\n+  bool test = true;\n+\n+  using namespace std;\n \n-#ifdef DEBUG_ASSERT\n-  assert(test);\n-#endif\n+  typedef std::ios_base::fmtflags fmtflags;\n+  typedef std::ios_base::iostate iostate;\n+  locale loc_c = locale::classic();\n+  locale loc_de(\"de_DE\");\n+  std::ios ios_01(NULL);\n+  std::ios ios_02(NULL);\n+  ios_01.imbue(loc_c);\n+  ios_02.imbue(loc_de);\n+  ios_02.setstate(ios_base::badbit);\n+  VERIFY( loc_c == ios_01.getloc() );\n+  VERIFY( loc_de == ios_02.getloc() );\n+\n+  iostate ios1 = ios_01.rdstate();\n+  iostate ios2 = ios_02.rdstate();\n+  streambuf* sb1 = ios_01.rdbuf();\n+  streambuf* sb2 = ios_02.rdbuf();\n+  ios_01.copyfmt(ios_02);\n+\n+  VERIFY( loc_de == ios_01.getloc() );\n+  VERIFY( ios_01.getloc() == ios_02.getloc() );\n+  VERIFY( ios1 == ios_01.rdstate() );\n+  VERIFY( ios2 == ios_02.rdstate() );\n+  VERIFY( sb1 == ios_01.rdbuf() );\n+  VERIFY( sb2 == ios_02.rdbuf() );\n }\n \n-int main() {\n+int main() \n+{\n   test01();\n   test02();\n+  test03();\n   return 0;\n }"}]}