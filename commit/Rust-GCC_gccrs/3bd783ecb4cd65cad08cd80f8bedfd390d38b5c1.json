{"sha": "3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JkNzgzZWNiNGNkNjVjYWQwOGNkODBmOGJlZGZkMzkwZDM4YjVjMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:25:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-16T14:25:29Z"}, "message": "[multiple changes]\n\n2014-07-16  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Document erroneous mixing of thin pointers and\n\tunrestricted access\n\t* gnat_ugn.texi: Add note on size of access types about thin\n\tpointers and the use of attribute Unrestricted_Access.\n\n2014-07-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* a-cbdlli.ads, a-cbdlli.adb, a-cbhama.ads, a-cbhama.adb,\n\t* a-cbhase.ads, a-cbhase.adb, a-cborma.ads, a-cborma.adb,\n\t* a-cborse.ads, a-cborse.adb, a-cobove.ads a-cobove.adb: Add Control\n\tmachinery to detect tampering on bounded vectors.\n\nFrom-SVN: r212653", "tree": {"sha": "9d984e686dfd3ef538316d10cd65b1b43b94ce53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d984e686dfd3ef538316d10cd65b1b43b94ce53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/comments", "author": null, "committer": null, "parents": [{"sha": "473037cb703193ce543fd8143b95bddb9e87f8cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473037cb703193ce543fd8143b95bddb9e87f8cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/473037cb703193ce543fd8143b95bddb9e87f8cf"}], "stats": {"total": 656, "additions": 580, "deletions": 76}, "files": [{"sha": "feff3ffb6397bed49588705a0e5b08a788516be1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -1,3 +1,17 @@\n+2014-07-16  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Document erroneous mixing of thin pointers and\n+\tunrestricted access\n+\t* gnat_ugn.texi: Add note on size of access types about thin\n+\tpointers and the use of attribute Unrestricted_Access.\n+\n+2014-07-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-cbdlli.ads, a-cbdlli.adb, a-cbhama.ads, a-cbhama.adb,\n+\t* a-cbhase.ads, a-cbhase.adb, a-cborma.ads, a-cborma.adb,\n+\t* a-cborse.ads, a-cborse.adb, a-cobove.ads a-cobove.adb: Add Control\n+\tmachinery to detect tampering on bounded vectors.\n+\n 2014-07-16  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Document that leading/trailing asterisks are"}, {"sha": "796d87b7e1b6e2c50ece82812aa40278ae9856da", "filename": "gcc/ada/a-cbdlli.adb", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.adb?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -227,6 +227,24 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       Insert (Container, No_Element, New_Item, Count);\n    end Append;\n \n+   ------------\n+   -- Adjust --\n+   ------------\n+\n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : List renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -324,8 +342,16 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n \n          declare\n             N : Node_Type renames Container.Nodes (Position.Node);\n+            B : Natural renames Position.Container.Busy;\n+            L : Natural renames Position.Container.Lock;\n          begin\n-            return (Element => N.Element'Access);\n+            return R : constant Constant_Reference_Type :=\n+              (Element => N.Element'Access,\n+               Control => (Controlled with Container'Unrestricted_Access))\n+            do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n          end;\n       end if;\n    end Constant_Reference;\n@@ -545,6 +571,22 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : List renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1672,8 +1714,16 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n \n          declare\n             N : Node_Type renames Container.Nodes (Position.Node);\n+            B : Natural   renames Container.Busy;\n+            L : Natural   renames Container.Lock;\n          begin\n-            return (Element => N.Element'Access);\n+            return R : constant Reference_Type :=\n+               (Element => N.Element'Access,\n+                Control => (Controlled with Container'Unrestricted_Access))\n+            do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n          end;\n       end if;\n    end Reference;"}, {"sha": "d7a1f4946829d07830e4f51757f336b4651bfef9", "filename": "gcc/ada/a-cbdlli.ads", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cbdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cbdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.ads?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -284,11 +284,10 @@ private\n    type List_Access is access all List;\n    for List_Access'Storage_Size use 0;\n \n-   type Cursor is\n-      record\n-         Container : List_Access;\n-         Node      : Count_Type := 0;\n-      end record;\n+   type Cursor is record\n+      Container : List_Access;\n+      Node      : Count_Type := 0;\n+   end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -302,23 +301,37 @@ private\n \n    for Cursor'Write use Write;\n \n-   type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+   type Reference_Control_Type is new Controlled with record\n+      Container : List_Access;\n+   end record;\n \n-   procedure Write\n-     (Stream : not null access Root_Stream_Type'Class;\n-      Item   : Constant_Reference_Type);\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n \n-   for Constant_Reference_Type'Write use Write;\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n+   type Constant_Reference_Type\n+     (Element : not null access constant Element_Type) is\n+   record\n+      Control : Reference_Control_Type;\n+   end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n       Item   : out Constant_Reference_Type);\n \n    for Constant_Reference_Type'Read use Read;\n \n-   type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n+   procedure Write\n+     (Stream : not null access Root_Stream_Type'Class;\n+      Item   : Constant_Reference_Type);\n+\n+   for Constant_Reference_Type'Write use Write;\n+\n+   type Reference_Type (Element : not null access Element_Type) is record\n+      Control : Reference_Control_Type;\n+   end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "eb53e757b45d334c313a8e6c7fca460edf08c0c5", "filename": "gcc/ada/a-cbhama.adb", "status": "modified", "additions": 77, "deletions": 5, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cbhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cbhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhama.adb?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -117,6 +117,24 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n       return Is_Equal (Left, Right);\n    end \"=\";\n \n+   ------------\n+   -- Adjust --\n+   ------------\n+\n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Map renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -199,8 +217,16 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n \n       declare\n          N : Node_Type renames Container.Nodes (Position.Node);\n+         B : Natural renames Position.Container.Busy;\n+         L : Natural renames Position.Container.Lock;\n       begin\n-         return (Element => N.Element'Access);\n+         return R : constant Constant_Reference_Type :=\n+            (Element => N.Element'Access,\n+             Control => (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n       end;\n    end Constant_Reference;\n \n@@ -217,9 +243,21 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n       end if;\n \n       declare\n+         Cur  : Cursor := Find (Container, Key);\n+         pragma Unmodified (Cur);\n+\n          N : Node_Type renames Container.Nodes (Node);\n+         B : Natural   renames Cur.Container.Busy;\n+         L : Natural   renames Cur.Container.Lock;\n+\n       begin\n-         return (Element => N.Element'Access);\n+         return R : constant Constant_Reference_Type :=\n+           (Element => N.Element'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n       end;\n    end Constant_Reference;\n \n@@ -446,6 +484,22 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Map renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -976,8 +1030,17 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n \n       declare\n          N : Node_Type renames Container.Nodes (Position.Node);\n+         B : Natural renames Container.Busy;\n+         L : Natural renames Container.Lock;\n+\n       begin\n-         return (Element => N.Element'Access);\n+         return R : constant Reference_Type :=\n+           (Element => N.Element'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n       end;\n    end Reference;\n \n@@ -994,8 +1057,17 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n \n       declare\n          N : Node_Type renames Container.Nodes (Node);\n+         B : Natural   renames Container.Busy;\n+         L : Natural   renames Container.Lock;\n+\n       begin\n-         return (Element => N.Element'Access);\n+         return R : constant Reference_Type :=\n+           (Element => N.Element'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n       end;\n    end Reference;\n "}, {"sha": "a87c1e9eeaeb9715c8330a495bd50b897405db33", "filename": "gcc/ada/a-cbhama.ads", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cbhama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cbhama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhama.ads?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -380,8 +380,21 @@ private\n \n    for Cursor'Write use Write;\n \n+   type Reference_Control_Type is new Controlled with record\n+      Container : Map_Access;\n+   end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+     (Element : not null access constant Element_Type) is\n+   record\n+      Control : Reference_Control_Type;\n+   end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -395,8 +408,9 @@ private\n \n    for Constant_Reference_Type'Read use Read;\n \n-   type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n+   type Reference_Type (Element : not null access Element_Type) is record\n+      Control : Reference_Control_Type;\n+   end record;\n \n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -411,9 +425,10 @@ private\n    for Reference_Type'Read use Read;\n \n    Empty_Map : constant Map :=\n-     (Hash_Table_Type with Capacity => 0, Modulus => 0);\n+                 (Hash_Table_Type with Capacity => 0, Modulus => 0);\n \n    No_Element : constant Cursor := (Container => null, Node => 0);\n+\n    type Iterator is new Limited_Controlled and\n      Map_Iterator_Interfaces.Forward_Iterator with\n    record"}, {"sha": "6ea8e0ad0ef85195dc60089b3a7e67436a287545", "filename": "gcc/ada/a-cbhase.adb", "status": "modified", "additions": 58, "deletions": 3, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cbhase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cbhase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhase.adb?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -138,6 +138,24 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n       return Is_Equal (Left, Right);\n    end \"=\";\n \n+   ------------\n+   -- Adjust --\n+   ------------\n+\n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Set renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -217,8 +235,17 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n \n       declare\n          N : Node_Type renames Container.Nodes (Position.Node);\n+         B : Natural renames Position.Container.Busy;\n+         L : Natural renames Position.Container.Lock;\n+\n       begin\n-         return (Element => N.Element'Access);\n+         return R : constant Constant_Reference_Type :=\n+            (Element => N.Element'Access,\n+             Control => (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n       end;\n    end Constant_Reference;\n \n@@ -617,6 +644,22 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Set renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1613,9 +1656,21 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n          end if;\n \n          declare\n+            Cur  : Cursor := Find (Container, Key);\n+            pragma Unmodified (Cur);\n+\n             N : Node_Type renames Container.Nodes (Node);\n+            B : Natural renames Cur.Container.Busy;\n+            L : Natural renames Cur.Container.Lock;\n+\n          begin\n-            return (Element => N.Element'Access);\n+            return R : constant Constant_Reference_Type :=\n+              (Element => N.Element'Access,\n+               Control => (Controlled with Container'Unrestricted_Access))\n+            do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n          end;\n       end Constant_Reference;\n "}, {"sha": "40eea2f0efb8fd1cbe0165011cc3050f4b34f902", "filename": "gcc/ada/a-cbhase.ads", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cbhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cbhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhase.ads?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -444,8 +444,8 @@ package Ada.Containers.Bounded_Hashed_Sets is\n          Key       : Key_Type) return Reference_Type;\n \n    private\n-      type Reference_Type (Element : not null access Element_Type)\n-         is null record;\n+      type Reference_Type (Element : not null access Element_Type) is\n+        null record;\n \n       use Ada.Streams;\n \n@@ -475,7 +475,7 @@ private\n      new Hash_Tables.Generic_Bounded_Hash_Table_Types (Node_Type);\n \n    type Set (Capacity : Count_Type; Modulus : Hash_Type) is\n-      new HT_Types.Hash_Table_Type (Capacity, Modulus) with null record;\n+     new HT_Types.Hash_Table_Type (Capacity, Modulus) with null record;\n \n    use HT_Types;\n    use Ada.Streams;\n@@ -518,8 +518,21 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Reference_Control_Type is new Controlled with record\n+      Container : Set_Access;\n+   end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-     (Element : not null access constant Element_Type) is null record;\n+     (Element : not null access constant Element_Type) is\n+   record\n+      Control : Reference_Control_Type;\n+   end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "68b6befaad8d5db0262e49c27e0de201c84efb8e", "filename": "gcc/ada/a-cborma.adb", "status": "modified", "additions": 76, "deletions": 5, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cborma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cborma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborma.adb?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -260,6 +260,24 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       end;\n    end \">\";\n \n+   ------------\n+   -- Adjust --\n+   ------------\n+\n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Map renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -404,8 +422,17 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n \n       declare\n          N : Node_Type renames Container.Nodes (Position.Node);\n+         B : Natural renames Position.Container.Busy;\n+         L : Natural renames Position.Container.Lock;\n+\n       begin\n-         return (Element => N.Element'Access);\n+         return R : constant Constant_Reference_Type :=\n+            (Element => N.Element'Access,\n+             Control => (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n       end;\n    end Constant_Reference;\n \n@@ -421,9 +448,21 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       end if;\n \n       declare\n+         Cur  : Cursor := Find (Container, Key);\n+         pragma Unmodified (Cur);\n+\n          N : Node_Type renames Container.Nodes (Node);\n+         B : Natural renames Cur.Container.Busy;\n+         L : Natural renames Cur.Container.Lock;\n+\n       begin\n-         return (Element => N.Element'Access);\n+         return R : constant Constant_Reference_Type :=\n+            (Element => N.Element'Access,\n+             Control => (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n       end;\n    end Constant_Reference;\n \n@@ -595,6 +634,22 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Map renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -1362,8 +1417,16 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n \n       declare\n          N : Node_Type renames Container.Nodes (Position.Node);\n+         B : Natural   renames Container.Busy;\n+         L : Natural   renames Container.Lock;\n       begin\n-         return (Element => N.Element'Access);\n+         return R : constant Reference_Type :=\n+           (Element => N.Element'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n       end;\n    end Reference;\n \n@@ -1380,8 +1443,16 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n \n       declare\n          N : Node_Type renames Container.Nodes (Node);\n+         B : Natural   renames Container.Busy;\n+         L : Natural   renames Container.Lock;\n       begin\n-         return (Element => N.Element'Access);\n+         return R : constant Reference_Type :=\n+           (Element => N.Element'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n       end;\n    end Reference;\n "}, {"sha": "d0286827f0d96c32f13c28301416eb1d47d30277", "filename": "gcc/ada/a-cborma.ads", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cborma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cborma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborma.ads?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -228,6 +228,7 @@ package Ada.Containers.Bounded_Ordered_Maps is\n \n private\n \n+   use Ada.Finalization;\n    pragma Inline (Next);\n    pragma Inline (Previous);\n \n@@ -282,8 +283,21 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Reference_Control_Type is new Controlled with record\n+      Container : Map_Access;\n+   end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+     (Element : not null access constant Element_Type) is\n+   record\n+      Control : Reference_Control_Type;\n+   end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -297,8 +311,9 @@ private\n \n    for Constant_Reference_Type'Write use Write;\n \n-   type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n+   type Reference_Type (Element : not null access Element_Type) is record\n+      Control : Reference_Control_Type;\n+   end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -316,8 +331,6 @@ private\n \n    No_Element : constant Cursor := Cursor'(null, 0);\n \n-   use Ada.Finalization;\n-\n    type Iterator is new Limited_Controlled and\n      Map_Iterator_Interfaces.Reversible_Iterator with\n    record"}, {"sha": "ea6a6d06af16d340ec1451cc427f50fb957f21b6", "filename": "gcc/ada/a-cborse.adb", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cborse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cborse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborse.adb?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -265,6 +265,24 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       return Right < Left.Container.Nodes (Left.Node).Element;\n    end \">\";\n \n+   ------------\n+   -- Adjust --\n+   ------------\n+\n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Set renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -404,8 +422,16 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n \n       declare\n          N : Node_Type renames Container.Nodes (Position.Node);\n+         B : Natural renames Position.Container.Busy;\n+         L : Natural renames Position.Container.Lock;\n       begin\n-         return (Element => N.Element'Access);\n+         return R : constant Constant_Reference_Type :=\n+            (Element => N.Element'Access,\n+             Control => (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n       end;\n    end Constant_Reference;\n \n@@ -594,6 +620,22 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n       end if;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Set renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -720,9 +762,21 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n          end if;\n \n          declare\n+            Cur : Cursor := Find (Container, Key);\n+            pragma Unmodified (Cur);\n+\n             N : Node_Type renames Container.Nodes (Node);\n+            B : Natural renames Cur.Container.Busy;\n+            L : Natural renames Cur.Container.Lock;\n+\n          begin\n-            return (Element => N.Element'Access);\n+            return R : constant Constant_Reference_Type :=\n+              (Element => N.Element'Access,\n+               Control => (Controlled with Container'Unrestricted_Access))\n+            do\n+               B := B + 1;\n+               L := L + 1;\n+            end return;\n          end;\n       end Constant_Reference;\n "}, {"sha": "03fdd49aaa779818a1b568d1a8f31a5d3fd95d47", "filename": "gcc/ada/a-cborse.ads", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cborse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cborse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborse.ads?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -277,8 +277,8 @@ package Ada.Containers.Bounded_Ordered_Sets is\n          Key       : Key_Type) return Reference_Type;\n \n    private\n-      type Reference_Type\n-         (Element : not null access Element_Type) is null record;\n+      type Reference_Type (Element : not null access Element_Type) is\n+        null record;\n \n       use Ada.Streams;\n \n@@ -316,6 +316,7 @@ private\n      new Tree_Types.Tree_Type (Capacity) with null record;\n \n    use Tree_Types;\n+   use Ada.Finalization;\n    use Ada.Streams;\n \n    procedure Write\n@@ -356,8 +357,21 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Reference_Control_Type is new Controlled with record\n+      Container : Set_Access;\n+   end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+      (Element : not null access constant Element_Type) is\n+   record\n+      Control : Reference_Control_Type;\n+   end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -375,8 +389,6 @@ private\n \n    No_Element : constant Cursor := Cursor'(null, 0);\n \n-   use Ada.Finalization;\n-\n    type Iterator is new Limited_Controlled and\n      Set_Iterator_Interfaces.Reversible_Iterator with\n    record"}, {"sha": "a7e7a76a30e27e619570856365c6c1419676b76c", "filename": "gcc/ada/a-cobove.adb", "status": "modified", "additions": 63, "deletions": 5, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.adb?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -314,6 +314,24 @@ package body Ada.Containers.Bounded_Vectors is\n          raise;\n    end \"=\";\n \n+   ------------\n+   -- Adjust --\n+   ------------\n+\n+   procedure Adjust (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Vector renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B + 1;\n+            L := L + 1;\n+         end;\n+      end if;\n+   end Adjust;\n+\n    ------------\n    -- Assign --\n    ------------\n@@ -418,8 +436,16 @@ package body Ada.Containers.Bounded_Vectors is\n       declare\n          A : Elements_Array renames Container.Elements;\n          I : constant Count_Type := To_Array_Index (Position.Index);\n+         B : Natural renames Position.Container.Busy;\n+         L : Natural renames Position.Container.Lock;\n       begin\n-         return (Element => A (I)'Access);\n+         return R : constant Constant_Reference_Type :=\n+           (Element => A (I)'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n+         do\n+            B := B + 1;\n+            L := L + 1;\n+         end return;\n       end;\n    end Constant_Reference;\n \n@@ -436,7 +462,13 @@ package body Ada.Containers.Bounded_Vectors is\n          A : Elements_Array renames Container.Elements;\n          I : constant Count_Type := To_Array_Index (Index);\n       begin\n-         return (Element => A (I)'Access);\n+         return R : constant Constant_Reference_Type :=\n+           (Element => A (I)'Access,\n+            Control => (Controlled with Container'Unrestricted_Access))\n+         do\n+            R.Control.Container.Busy := R.Control.Container.Busy + 1;\n+            R.Control.Container.Lock := R.Control.Container.Lock + 1;\n+         end return;\n       end;\n    end Constant_Reference;\n \n@@ -731,6 +763,22 @@ package body Ada.Containers.Bounded_Vectors is\n       B := B - 1;\n    end Finalize;\n \n+   procedure Finalize (Control : in out Reference_Control_Type) is\n+   begin\n+      if Control.Container /= null then\n+         declare\n+            C : Vector renames Control.Container.all;\n+            B : Natural renames C.Busy;\n+            L : Natural renames C.Lock;\n+         begin\n+            B := B - 1;\n+            L := L - 1;\n+         end;\n+\n+         Control.Container := null;\n+      end if;\n+   end Finalize;\n+\n    ----------\n    -- Find --\n    ----------\n@@ -2317,9 +2365,14 @@ package body Ada.Containers.Bounded_Vectors is\n \n       declare\n          A : Elements_Array renames Container.Elements;\n+         B : Natural        renames Container.Busy;\n+         L : Natural        renames Container.Lock;\n          J : constant Count_Type := To_Array_Index (Position.Index);\n       begin\n-         return (Element => A (J)'Access);\n+         B := B + 1;\n+         L := L + 1;\n+         return (Element => A (J)'Access,\n+                 Control => (Controlled with Container'Unrestricted_Access));\n       end;\n    end Reference;\n \n@@ -2334,9 +2387,14 @@ package body Ada.Containers.Bounded_Vectors is\n \n       declare\n          A : Elements_Array renames Container.Elements;\n+         B : Natural        renames Container.Busy;\n+         L : Natural        renames Container.Lock;\n          J : constant Count_Type := To_Array_Index (Index);\n       begin\n-         return (Element => A (J)'Access);\n+         B := B + 1;\n+         L := L + 1;\n+         return (Element => A (J)'Access,\n+                 Control => (Controlled with Container'Unrestricted_Access));\n       end;\n    end Reference;\n "}, {"sha": "862076a2a92f4b7e384de9fbee9475539c80a150", "filename": "gcc/ada/a-cobove.ads", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cobove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fa-cobove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cobove.ads?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -409,8 +409,21 @@ private\n \n    for Cursor'Read use Read;\n \n+   type Reference_Control_Type is new Controlled with record\n+      Container : Vector_Access;\n+   end record;\n+\n+   overriding procedure Adjust (Control : in out Reference_Control_Type);\n+   pragma Inline (Adjust);\n+\n+   overriding procedure Finalize (Control : in out Reference_Control_Type);\n+   pragma Inline (Finalize);\n+\n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type) is null record;\n+      (Element : not null access constant Element_Type) is\n+   record\n+      Control : Reference_Control_Type;\n+   end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;\n@@ -424,8 +437,9 @@ private\n \n    for Constant_Reference_Type'Write use Write;\n \n-   type Reference_Type\n-      (Element : not null access Element_Type) is null record;\n+   type Reference_Type (Element : not null access Element_Type) is record\n+      Control : Reference_Control_Type;\n+   end record;\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "8f1031a35b363c8f39ce0743ffab7674d6e474e4", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 59, "deletions": 13, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -9470,16 +9470,16 @@ corresponding actual subtype.  The value of this attribute is of type\n @code{System.Aux_DEC.Type_Class}, which has the following definition:\n \n @smallexample @c ada\n-  type Type_Class is\n-    (Type_Class_Enumeration,\n-     Type_Class_Integer,\n-     Type_Class_Fixed_Point,\n-     Type_Class_Floating_Point,\n-     Type_Class_Array,\n-     Type_Class_Record,\n-     Type_Class_Access,\n-     Type_Class_Task,\n-     Type_Class_Address);\n+type Type_Class is\n+  (Type_Class_Enumeration,\n+   Type_Class_Integer,\n+   Type_Class_Fixed_Point,\n+   Type_Class_Floating_Point,\n+   Type_Class_Array,\n+   Type_Class_Record,\n+   Type_Class_Access,\n+   Type_Class_Task,\n+   Type_Class_Address);\n @end smallexample\n \n @noindent\n@@ -9541,7 +9541,7 @@ The @code{Unrestricted_Access} attribute is similar to @code{Access}\n except that all accessibility and aliased view checks are omitted.  This\n is a user-beware attribute.  It is similar to\n @code{Address}, for which it is a desirable replacement where the value\n-desired is an access type.  In other words, its effect is identical to\n+desired is an access type.  In other words, its effect is similar to\n first applying the @code{Address} attribute and then doing an unchecked\n conversion to a desired access type.  In GNAT, but not necessarily in\n other implementations, the use of static chains for inner level\n@@ -9550,12 +9550,58 @@ subprogram yields a value that can be called as long as the subprogram\n is in scope (normal Ada accessibility rules restrict this usage).\n \n It is possible to use @code{Unrestricted_Access} for any type, but care\n-must be exercised if it is used to create pointers to unconstrained\n+must be exercised if it is used to create pointers to unconstrained array\n objects. In this case, the resulting pointer has the same scope as the\n context of the attribute, and may not be returned to some enclosing\n scope. For instance, a function cannot use @code{Unrestricted_Access}\n to create a unconstrained pointer and then return that value to the\n-caller.\n+caller. In addition, it is only valid to create pointers to unconstrained\n+arrays using this attribute if the pointer has the normal default ``fat''\n+representation where a pointer has two components, one points to the array\n+and one points to the bounds. If a size clause is used to force ``thin''\n+representation for a pointer to unconstrained where there is only space for\n+a single pointer, then any use of @code{Unrestricted_Access}\n+to create a value of such a type (e.g. by conversion from fat to\n+thin pointers) is erroneous. Consider the following example:\n+\n+@smallexample @c ada\n+with System; use System;\n+procedure SliceUA is\n+   type A is access all String;\n+   for A'Size use Standard'Address_Size;\n+\n+   procedure P (Arg : A) is\n+   begin\n+      if Arg'Length /= 6 then\n+         raise Program_Error;\n+      end if;\n+   end P;\n+\n+   X : String := \"hello world!\";\n+\n+begin\n+   P (X(7 .. 12)'Unrestricted_Access);\n+end;\n+@end smallexample\n+\n+@noindent\n+This inevitably raises @code{Program_Error}.\n+A normal unconstrained array value\n+or a constrained array object marked as aliased has the bounds in memory\n+just before the array, so a thin pointer can retrieve both the data and\n+the bounds. But in this case, the non-aliased object @code{X} does not have the\n+bounds before the string. If the size clause for type @code{A}\n+were not present, then the pointer\n+would be a fat pointer, where one component is a pointer to the bounds,\n+and all would be well. But with the size clause present, the conversion from\n+fat pointer to think pointer in the call looses the bounds.\n+\n+In general, it is advisable to completely\n+avoid mixing the use of thin pointers and the use of\n+@code{Unrestricted_Access} where the designated type is an\n+unconstrained array. The use of thin pointers should be restricted to\n+cases of porting legacy code which implicitly assumes the size of pointers,\n+and such code should not in any case be using this attribute.\n \n @node Attribute Update\n @unnumberedsec Attribute Update"}, {"sha": "a8c84f0af99b37204a4c71d80c150fa56fc24c96", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=3bd783ecb4cd65cad08cd80f8bedfd390d38b5c1", "patch": "@@ -29185,6 +29185,10 @@ a functionally correct manner and allow porting of existing code.\n Note that another way of forcing a thin pointer representation\n is to use a component size clause for the element size in an array,\n or a record representation clause for an access field in a record.\n+\n+See the documentation of Unrestricted_Access in the GNAT RM for a\n+full discussion of possible problems using this attribute in conjunction\n+with thin pointers.\n @end table\n \n @ifclear vms"}]}