{"sha": "7fda15966e1c2f6613cef8c30c26cc05dba2e590", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZkYTE1OTY2ZTFjMmY2NjEzY2VmOGMzMGMyNmNjMDVkYmEyZTU5MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-09-20T10:29:08Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-09-20T10:29:08Z"}, "message": "exp_dbug.ads: Document new convention for the XVZ variable.\n\n\t* exp_dbug.ads: Document new convention for the XVZ variable.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Generate\n\tdebug info if necessary for the type padding the component type.\n\t<E_Array_Subtype>: Likewise.\n\t(maybe_pad_type): Emit the XVZ variable in units.\n\t* gcc-interface/trans.c (Loop_Statement_to_gnu): Fix formatting nits.\n\t(Subprogram_Body_to_gnu): Set the source line of the subprogram's node\n\ton statements generated to initialize the parameter attributes cache.\n\tSet the source line of the end label of the body on the special return\n\tstatement built for a procedure with copy-in copy-out parameters.\n\nFrom-SVN: r140513", "tree": {"sha": "6670ef5e7e1b5bb1b67c769759e39732ee90221e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6670ef5e7e1b5bb1b67c769759e39732ee90221e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fda15966e1c2f6613cef8c30c26cc05dba2e590", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fda15966e1c2f6613cef8c30c26cc05dba2e590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fda15966e1c2f6613cef8c30c26cc05dba2e590", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fda15966e1c2f6613cef8c30c26cc05dba2e590/comments", "author": null, "committer": null, "parents": [{"sha": "76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e68dca26be88ab2e96aac6c1af79b946d0f4ee"}], "stats": {"total": 52, "additions": 34, "deletions": 18}, "files": [{"sha": "f7dfb866e8d8922ca209b99a80af689ce5e448da", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fda15966e1c2f6613cef8c30c26cc05dba2e590/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fda15966e1c2f6613cef8c30c26cc05dba2e590/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7fda15966e1c2f6613cef8c30c26cc05dba2e590", "patch": "@@ -1,3 +1,16 @@\n+2008-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_dbug.ads: Document new convention for the XVZ variable.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Generate\n+\tdebug info if necessary for the type padding the component type.\n+\t<E_Array_Subtype>: Likewise.\n+\t(maybe_pad_type): Emit the XVZ variable in units.\n+\t* gcc-interface/trans.c (Loop_Statement_to_gnu): Fix formatting nits.\n+\t(Subprogram_Body_to_gnu): Set the source line of the subprogram's node\n+\ton statements generated to initialize the parameter attributes cache.\n+\tSet the source line of the end label of the body on the special return\n+\tstatement built for a procedure with copy-in copy-out parameters.\n+\n 2008-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/37585"}, {"sha": "3a6297ce9eec30f6adce3667db12c9ee7604f79b", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fda15966e1c2f6613cef8c30c26cc05dba2e590/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fda15966e1c2f6613cef8c30c26cc05dba2e590/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=7fda15966e1c2f6613cef8c30c26cc05dba2e590", "patch": "@@ -851,7 +851,7 @@ package Exp_Dbug is\n       --  The size of the objects typed as x should be obtained from the\n       --  structure of x (and x___XVE, if applicable) as for ordinary types\n       --  unless there is a variable named x___XVZ, which, if present, will\n-      --  hold the size (in bits) of x.\n+      --  hold the size (in bytes) of x.\n \n       --  The type x will either be a subtype of y (see also Subtypes of\n       --  Variant Records, below) or will contain no fields at all. The layout,"}, {"sha": "a8fa1badac30e3b74ca548551f0611206b60fe19", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fda15966e1c2f6613cef8c30c26cc05dba2e590/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fda15966e1c2f6613cef8c30c26cc05dba2e590/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=7fda15966e1c2f6613cef8c30c26cc05dba2e590", "patch": "@@ -1955,8 +1955,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t       never be declared otherwise.  This is necessary to ensure\n \t       that its subtrees are properly marked.  */\n \t    if (tem != orig_tem)\n-\t      create_type_decl (TYPE_NAME (tem), tem, NULL, true, false,\n-\t\t\t\tgnat_entity);\n+\t      create_type_decl (TYPE_NAME (tem), tem, NULL, true,\n+\t\t\t\tdebug_info_p, gnat_entity);\n \t  }\n \n \tif (Has_Volatile_Components (gnat_entity))\n@@ -2324,7 +2324,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t     to ensure that its subtrees are properly marked.  */\n \t\t  if (gnu_type != orig_gnu_type)\n \t\t    create_type_decl (TYPE_NAME (gnu_type), gnu_type, NULL,\n-\t\t\t\t      true, false, gnat_entity);\n+\t\t\t\t      true, debug_info_p, gnat_entity);\n \t\t}\n \n \t      if (Has_Volatile_Components (Base_Type (gnat_entity)))\n@@ -5867,8 +5867,8 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n \n       if (size && TREE_CODE (size) != INTEGER_CST && definition)\n \tcreate_var_decl (concat_id_with_name (name, \"XVZ\"), NULL_TREE,\n-\t\t\t bitsizetype, TYPE_SIZE (record), false, false, false,\n-\t\t\t false, NULL, gnat_entity);\n+\t\t\t sizetype, TYPE_SIZE_UNIT (record), false, false,\n+\t\t\t false, false, NULL, gnat_entity);\n     }\n \n   rest_of_record_type_compilation (record);"}, {"sha": "9a6f4cf36ef0c9f9d956e054f3dadf70c18ef599", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fda15966e1c2f6613cef8c30c26cc05dba2e590/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fda15966e1c2f6613cef8c30c26cc05dba2e590/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=7fda15966e1c2f6613cef8c30c26cc05dba2e590", "patch": "@@ -1689,17 +1689,20 @@ Loop_Statement_to_gnu (Node_Id gnat_node)\n   push_stack (&gnu_loop_label_stack, NULL_TREE,\n \t      LOOP_STMT_LABEL (gnu_loop_stmt));\n \n-  /* Set the condition that under which the loop should continue.\n-     For \"LOOP .... END LOOP;\" the condition is always true.  */\n+  /* Set the condition under which the loop must keep going.\n+     For the case \"LOOP .... END LOOP;\" the condition is always true.  */\n   if (No (gnat_iter_scheme))\n     ;\n-  /* The case \"WHILE condition LOOP ..... END LOOP;\" */\n+\n+  /* For the case \"WHILE condition LOOP ..... END LOOP;\" it's immediate.  */\n   else if (Present (Condition (gnat_iter_scheme)))\n     LOOP_STMT_TOP_COND (gnu_loop_stmt)\n       = gnat_to_gnu (Condition (gnat_iter_scheme));\n+\n+  /* Otherwise we have an iteration scheme and the condition is given by\n+     the bounds of the subtype of the iteration variable.  */\n   else\n     {\n-      /* We have an iteration scheme.  */\n       Node_Id gnat_loop_spec = Loop_Parameter_Specification (gnat_iter_scheme);\n       Entity_Id gnat_loop_var = Defining_Entity (gnat_loop_spec);\n       Entity_Id gnat_type = Etype (gnat_loop_var);\n@@ -1745,7 +1748,7 @@ Loop_Statement_to_gnu (Node_Id gnat_node)\n       gnu_loop_var = convert (get_base_type (gnu_type), gnu_loop_var);\n \n       /* Set either the top or bottom exit condition as appropriate depending\n-\t on whether or not we know an overflow cannot occur. */\n+\t on whether or not we know an overflow cannot occur.  */\n       if (gnu_cond_expr)\n \tLOOP_STMT_BOT_COND (gnu_loop_stmt)\n \t  = build_binary_op (NE_EXPR, integer_type_node,\n@@ -1763,12 +1766,12 @@ Loop_Statement_to_gnu (Node_Id gnat_node)\n \t\t\t   convert (TREE_TYPE (gnu_loop_var),\n \t\t\t\t    integer_one_node));\n       set_expr_location_from_node (LOOP_STMT_UPDATE (gnu_loop_stmt),\n-\t\t\t  gnat_iter_scheme);\n+\t\t\t\t   gnat_iter_scheme);\n     }\n \n   /* If the loop was named, have the name point to this loop.  In this case,\n      the association is not a ..._DECL node, but the end label from this\n-     LOOP_STMT. */\n+     LOOP_STMT.  */\n   if (Present (Identifier (gnat_node)))\n     save_gnu_tree (Entity (Identifier (gnat_node)),\n \t\t   LOOP_STMT_LABEL (gnu_loop_stmt), true);\n@@ -1788,7 +1791,7 @@ Loop_Statement_to_gnu (Node_Id gnat_node)\n     }\n \n   /* If we have an outer COND_EXPR, that's our result and this loop is its\n-     \"true\" statement.  Otherwise, the result is the LOOP_STMT. */\n+     \"true\" statement.  Otherwise, the result is the LOOP_STMT.  */\n   if (gnu_cond_expr)\n     {\n       COND_EXPR_THEN (gnu_cond_expr) = gnu_loop_stmt;\n@@ -1981,11 +1984,11 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n       for (i = 0; VEC_iterate (parm_attr, cache, i, pa); i++)\n \t{\n \t  if (pa->first)\n-\t    add_stmt (pa->first);\n+\t    add_stmt_with_node (pa->first, gnat_node);\n \t  if (pa->last)\n-\t    add_stmt (pa->last);\n+\t    add_stmt_with_node (pa->last, gnat_node);\n \t  if (pa->length)\n-\t    add_stmt (pa->length);\n+\t    add_stmt_with_node (pa->length, gnat_node);\n \t}\n \n       add_stmt (gnu_result);\n@@ -2017,7 +2020,7 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n \n       add_stmt_with_node\n \t(build_return_expr (DECL_RESULT (gnu_subprog_decl), gnu_retval),\n-\t gnat_node);\n+\t End_Label (Handled_Statement_Sequence (gnat_node)));\n       gnat_poplevel ();\n       gnu_result = end_stmt_group ();\n     }"}]}