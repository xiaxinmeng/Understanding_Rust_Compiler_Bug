{"sha": "f85716e06e7fdf16123e5db3101dfc81b71afe09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg1NzE2ZTA2ZTdmZGYxNjEyM2U1ZGIzMTAxZGZjODFiNzFhZmUwOQ==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@zen.org", "date": "2003-05-27T22:44:26Z"}, "committer": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "2003-05-27T22:44:26Z"}, "message": "locale_facets.tcc (do_get): Honor $22.2.6.3.3/8 and make sure the number of digits required after the...\n\n2003-05-26  Brendan Kehoe  <brendan@zen.org>\n\n    * include/bits/locale_facets.tcc (do_get): Honor $22.2.6.3.3/8 and\n    make sure the number of digits required after the decimal-point\n    (if any) is exactly the value returned by frac_digits().\n    * testsuite/22_locale/money_get/get/char/9.cc: New.\n    * testsuite/22_locale/money_get/get/wchar_t/9.cc: New.\n\nFrom-SVN: r67196", "tree": {"sha": "898f28cb84ce6cce2a0b82d74ff2de5ecee16e6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/898f28cb84ce6cce2a0b82d74ff2de5ecee16e6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f85716e06e7fdf16123e5db3101dfc81b71afe09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85716e06e7fdf16123e5db3101dfc81b71afe09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f85716e06e7fdf16123e5db3101dfc81b71afe09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85716e06e7fdf16123e5db3101dfc81b71afe09/comments", "author": null, "committer": null, "parents": [{"sha": "ed0d100f7c513dbd9b150385fb6aa8552f6ccb3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed0d100f7c513dbd9b150385fb6aa8552f6ccb3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed0d100f7c513dbd9b150385fb6aa8552f6ccb3e"}], "stats": {"total": 184, "additions": 184, "deletions": 0}, "files": [{"sha": "455331d4cb2f79f75f2c4380e2f947c51d9b2bbb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f85716e06e7fdf16123e5db3101dfc81b71afe09/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f85716e06e7fdf16123e5db3101dfc81b71afe09/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f85716e06e7fdf16123e5db3101dfc81b71afe09", "patch": "@@ -10,6 +10,8 @@\n \t* include/bits/locale_facets.tcc (do_get): Honor $22.2.6.3.3/8 and\n \tmake sure the number of digits required after the decimal-point\n \t(if any) is exactly the value returned by frac_digits().\n+\t* testsuite/22_locale/money_get/get/char/9.cc: New.\n+\t* testsuite/22_locale/money_get/get/wchar_t/9.cc: New.\n \n 2003-05-27  Jonathan Wakely  <redi@gcc.gnu.org>\n "}, {"sha": "cb56e1a362bbf13225e427551eb85c392a2ee6f1", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/9.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f85716e06e7fdf16123e5db3101dfc81b71afe09/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f85716e06e7fdf16123e5db3101dfc81b71afe09/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F9.cc?ref=f85716e06e7fdf16123e5db3101dfc81b71afe09", "patch": "@@ -0,0 +1,91 @@\n+// 2003-05-27 Brendan Kehoe  <brendan@zen.org>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// $22.2.6.3.3/8\n+// The number of digits required after the decimal point (if any) is exactly\n+// the value returned by frac_digits().\n+\n+#include <locale>\n+#include <sstream>\n+\n+class dublin : public std::moneypunct<char> {\n+public:\n+  int do_frac_digits() const { return 3; }\n+};\n+\n+int main()\n+{\n+  std::istringstream liffey;\n+  std::string coins;\n+\n+  std::locale eire(std::locale::classic(), new dublin);\n+  liffey.imbue(eire);\n+\n+  const std::money_get<char>& greed\n+    = std::use_facet<std::money_get<char> >(liffey.getloc());\n+\n+  typedef std::istreambuf_iterator<char> iterator_type;\n+  iterator_type is(liffey);\n+  iterator_type end;\n+\n+  std::ios_base::iostate err01 = std::ios_base::goodbit;\n+\n+  int fails = 0;\n+\n+  // Feed it 1 digit too many, which should fail.\n+  liffey.str(\"12.3456\");\n+  greed.get(is, end, false, liffey, err01, coins);\n+  if (! (err01 & std::ios_base::failbit ))\n+    fails |= 0x01;\n+\n+  err01 = std::ios_base::goodbit;\n+\n+  // Feed it exactly what it wants, which should succeed.\n+  liffey.str(\"12.345\");\n+  greed.get(is, end, false, liffey, err01, coins);\n+  if ( err01 & std::ios_base::failbit )\n+    fails |= 0x02;\n+\n+  err01 = std::ios_base::goodbit;\n+\n+  // Feed it 1 digit too few, which should fail.\n+  liffey.str(\"12.34\");\n+  greed.get(is, end, false, liffey, err01, coins);\n+  if (! ( err01 & std::ios_base::failbit ))\n+    fails |= 0x04;\n+\n+  err01 = std::ios_base::goodbit;\n+\n+  // Feed it only a decimal-point, which should fail.\n+  liffey.str(\"12.\");\n+  greed.get(is, end, false, liffey, err01, coins);\n+  if (! (err01 & std::ios_base::failbit ))\n+    fails |= 0x08;\n+\n+  err01 = std::ios_base::goodbit;\n+\n+  // Feed it no decimal-point at all, which should succeed.\n+  liffey.str(\"12\");\n+  greed.get(is, end, false, liffey, err01, coins);\n+  if ( err01 & std::ios_base::failbit )\n+    fails |= 0x10;\n+\n+  return fails;\n+}"}, {"sha": "989066b392dd359ed1a7a73f60edd98dae089b2e", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/9.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f85716e06e7fdf16123e5db3101dfc81b71afe09/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f85716e06e7fdf16123e5db3101dfc81b71afe09/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F9.cc?ref=f85716e06e7fdf16123e5db3101dfc81b71afe09", "patch": "@@ -0,0 +1,91 @@\n+// 2003-05-27 Brendan Kehoe  <brendan@zen.org>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// $22.2.6.3.3/8\n+// The number of digits required after the decimal point (if any) is exactly\n+// the value returned by frac_digits().\n+\n+#include <locale>\n+#include <sstream>\n+\n+class dublin : public std::moneypunct<wchar_t> {\n+public:\n+  int do_frac_digits() const { return 3; }\n+};\n+\n+int main()\n+{\n+  std::wistringstream liffey;\n+  std::wstring coins;\n+\n+  std::locale eire(std::locale::classic(), new dublin);\n+  liffey.imbue(eire);\n+\n+  const std::money_get<wchar_t>& greed\n+    = std::use_facet<std::money_get<wchar_t> >(liffey.getloc());\n+\n+  typedef std::istreambuf_iterator<wchar_t> iterator_type;\n+  iterator_type is(liffey);\n+  iterator_type end;\n+\n+  std::ios_base::iostate err01 = std::ios_base::goodbit;\n+\n+  int fails = 0;\n+\n+  // Feed it 1 digit too many, which should fail.\n+  liffey.str(L\"12.3456\");\n+  greed.get(is, end, false, liffey, err01, coins);\n+  if (! (err01 & std::ios_base::failbit ))\n+    fails |= 0x01;\n+\n+  err01 = std::ios_base::goodbit;\n+\n+  // Feed it exactly what it wants, which should succeed.\n+  liffey.str(L\"12.345\");\n+  greed.get(is, end, false, liffey, err01, coins);\n+  if ( err01 & std::ios_base::failbit )\n+    fails |= 0x02;\n+\n+  err01 = std::ios_base::goodbit;\n+\n+  // Feed it 1 digit too few, which should fail.\n+  liffey.str(L\"12.34\");\n+  greed.get(is, end, false, liffey, err01, coins);\n+  if (! ( err01 & std::ios_base::failbit ))\n+    fails |= 0x04;\n+\n+  err01 = std::ios_base::goodbit;\n+\n+  // Feed it only a decimal-point, which should fail.\n+  liffey.str(L\"12.\");\n+  greed.get(is, end, false, liffey, err01, coins);\n+  if (! (err01 & std::ios_base::failbit ))\n+    fails |= 0x08;\n+\n+  err01 = std::ios_base::goodbit;\n+\n+  // Feed it no decimal-point at all, which should succeed.\n+  liffey.str(L\"12\");\n+  greed.get(is, end, false, liffey, err01, coins);\n+  if ( err01 & std::ios_base::failbit )\n+    fails |= 0x10;\n+\n+  return fails;\n+}"}]}