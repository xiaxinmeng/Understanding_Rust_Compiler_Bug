{"sha": "4872e46e080c6695dfe1f9dc9db26b4703bc348c", "node_id": "C_kwDOANBUbNoAKDQ4NzJlNDZlMDgwYzY2OTVkZmUxZjlkYzlkYjI2YjQ3MDNiYzM0OGM", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-22T20:11:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-23T03:23:13Z"}, "message": "c++: local class in nested generic lambda [PR109241]\n\nIn this testcase, the tree walk to look for bare parameter packs was\nconfused by finding a type with no TREE_BINFO.  But it should be fine that\nit's unset; we already checked for unexpanded packs at parse time.\n\nI also tried doing the partial instantiation of the local class, which is\nprobably the long-term direction we want to go, but for stage 4 let's go\nwith this safer change.\n\n\tPR c++/109241\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (find_parameter_packs_r): Handle null TREE_BINFO.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/lambda-generic-local-class2.C: New test.", "tree": {"sha": "7745d14d3bdf6eecd0792983c5f44e2df4a3a866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7745d14d3bdf6eecd0792983c5f44e2df4a3a866"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4872e46e080c6695dfe1f9dc9db26b4703bc348c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4872e46e080c6695dfe1f9dc9db26b4703bc348c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4872e46e080c6695dfe1f9dc9db26b4703bc348c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4872e46e080c6695dfe1f9dc9db26b4703bc348c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd0c433e5faba9a18f64881cd761a53a530aa798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0c433e5faba9a18f64881cd761a53a530aa798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0c433e5faba9a18f64881cd761a53a530aa798"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "40deedc9ba93b94204bef4d84c779d408139eda2", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4872e46e080c6695dfe1f9dc9db26b4703bc348c/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4872e46e080c6695dfe1f9dc9db26b4703bc348c/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=4872e46e080c6695dfe1f9dc9db26b4703bc348c", "patch": "@@ -4069,10 +4069,14 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n     case TAG_DEFN:\n       t = TREE_TYPE (t);\n       if (CLASS_TYPE_P (t))\n-\t/* Local class, need to look through the whole definition.  */\n-\tfor (tree bb : BINFO_BASE_BINFOS (TYPE_BINFO (t)))\n-\t  cp_walk_tree (&BINFO_TYPE (bb), &find_parameter_packs_r,\n-\t\t\tppd, ppd->visited);\n+\t{\n+\t  /* Local class, need to look through the whole definition.\n+\t     TYPE_BINFO might be unset for a partial instantiation.  */\n+\t  if (TYPE_BINFO (t))\n+\t    for (tree bb : BINFO_BASE_BINFOS (TYPE_BINFO (t)))\n+\t      cp_walk_tree (&BINFO_TYPE (bb), &find_parameter_packs_r,\n+\t\t\t    ppd, ppd->visited);\n+\t}\n       else\n \t/* Enum, look at the values.  */\n \tfor (tree l = TYPE_VALUES (t); l; l = TREE_CHAIN (l))"}, {"sha": "83856de1f41d3a31449bb7f66becf32e927837d6", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-local-class2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4872e46e080c6695dfe1f9dc9db26b4703bc348c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-local-class2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4872e46e080c6695dfe1f9dc9db26b4703bc348c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-local-class2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-local-class2.C?ref=4872e46e080c6695dfe1f9dc9db26b4703bc348c", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/109241\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"\" } no pedantic\n+\n+void g() {\n+  [](auto) {\n+    [](auto) {\n+      ({\n+        struct A {};\n+      });\n+    };\n+  }(1);\n+}"}]}