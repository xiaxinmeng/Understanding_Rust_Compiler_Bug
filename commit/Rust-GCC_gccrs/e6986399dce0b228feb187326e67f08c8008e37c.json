{"sha": "e6986399dce0b228feb187326e67f08c8008e37c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY5ODYzOTlkY2UwYjIyOGZlYjE4NzMyNmU2N2YwOGM4MDA4ZTM3Yw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2002-07-10T10:36:27Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-07-10T10:36:27Z"}, "message": "diagnostic.h: #include location.h\n\n\t* diagnostic.h: #include location.h\n\t(location_t): Move definition to..\n\t* location.h: ... here.  New file.\n\t* tree.h: #include location.h\n\t(DECL_SOURCE_LOCATION): New macro.\n\t(DECL_SOURCE_FILE): Use.\n\t(DECL_SOURCE_LINE): Likewise.\n\t(struct tree_decl): REplace filename and linenum with locus.\n\t* Makefile.in (TREE_H): add location.h\n\t(diagnostic.o): Depends on gt-location.h\n\t(gt-location.h): Depends on s-gtype\n\nFrom-SVN: r55364", "tree": {"sha": "798555e0df33e387c50ea2b5cb4819e17982e2e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/798555e0df33e387c50ea2b5cb4819e17982e2e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6986399dce0b228feb187326e67f08c8008e37c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6986399dce0b228feb187326e67f08c8008e37c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6986399dce0b228feb187326e67f08c8008e37c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6986399dce0b228feb187326e67f08c8008e37c/comments", "author": null, "committer": null, "parents": [{"sha": "99248579810c9a0dba0daaf12d4a04892b9f52e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99248579810c9a0dba0daaf12d4a04892b9f52e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99248579810c9a0dba0daaf12d4a04892b9f52e9"}], "stats": {"total": 79, "additions": 62, "deletions": 17}, "files": [{"sha": "7a4e95896acb67a41cf486c635cf29092e64d15a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6986399dce0b228feb187326e67f08c8008e37c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6986399dce0b228feb187326e67f08c8008e37c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6986399dce0b228feb187326e67f08c8008e37c", "patch": "@@ -1,3 +1,17 @@\n+2002-07-09  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* diagnostic.h: #include location.h\n+\t(location_t): Move definition to..\n+\t* location.h: ... here.  New file.\n+\t* tree.h: #include location.h\n+\t(DECL_SOURCE_LOCATION): New macro.\n+\t(DECL_SOURCE_FILE): Use.\n+\t(DECL_SOURCE_LINE): Likewise.\n+\t(struct tree_decl): REplace filename and linenum with locus.\n+\t* Makefile.in (TREE_H): add location.h\n+\t(diagnostic.o): Depends on gt-location.h\n+\t(gt-location.h): Depends on s-gtype\n+\n 2002-07-09  Matt Kraai  <kraai@alumni.cmu.edu>\n \n \t* config/rs6000/aix.h: Convert CPP_PREDEFINES to"}, {"sha": "e1e5a61873599c2f212e6b4c062fdffd39c71988", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6986399dce0b228feb187326e67f08c8008e37c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6986399dce0b228feb187326e67f08c8008e37c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e6986399dce0b228feb187326e67f08c8008e37c", "patch": "@@ -553,7 +553,8 @@ MACHMODE_H = machmode.h machmode.def @extra_modes_file@\n RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H)\n RTL_H = $(RTL_BASE_H) genrtl.h\n PARAMS_H = params.h params.def\n-TREE_H = tree.h tree.def $(MACHMODE_H) tree-check.h version.h builtins.def\n+TREE_H = tree.h tree.def $(MACHMODE_H) tree-check.h version.h builtins.def \\\n+          location.h\n BASIC_BLOCK_H = basic-block.h bitmap.h sbitmap.h varray.h\n DEMANGLE_H = $(srcdir)/../include/demangle.h\n RECOG_H = recog.h\n@@ -1807,7 +1808,7 @@ s-preds: genpreds$(build_exeext) $(srcdir)/move-if-change\n \t$(SHELL) $(srcdir)/move-if-change tmp-preds.h tm-preds.h\n \t$(STAMP) s-preds\n \n-GTFILES = $(GCONFIG_H) \\\n+GTFILES = $(GCONFIG_H) $(srcdir)/location.h \\\n   $(HASHTAB_H) \\\n   $(srcdir)/bitmap.h $(srcdir)/function.h  $(srcdir)/rtl.h $(srcdir)/optabs.h \\\n   $(srcdir)/tree.h $(srcdir)/libfuncs.h $(srcdir)/hashtable.h $(srcdir)/real.h \\\n@@ -1834,7 +1835,7 @@ gt-alias.h gt-cselib.h gt-fold-const.h gt-gcse.h gt-profile.h : s-gtype; @true\n gt-expr.h gt-sdbout.h gt-optabs.h gt-bitmap.h gt-dwarf2out.h : s-gtype ; @true\n gt-reg-stack.h gt-dependence.h : s-gtype ; @true\n gt-c-common.h gt-c-decl.h gt-c-parse.h gt-c-pragma.h : s-gtype; @true\n-gt-c-objc-common.h gtype-c.h : s-gtype ; @true\n+gt-c-objc-common.h gtype-c.h gt-location.h : s-gtype ; @true\n \n s-gtype: gengtype$(build_exeext) $(GTFILES)\n \t./gengtype $(GTFILES)"}, {"sha": "c4238df6abacf8e396e9d2cbdc8118129d84f69e", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6986399dce0b228feb187326e67f08c8008e37c/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6986399dce0b228feb187326e67f08c8008e37c/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=e6986399dce0b228feb187326e67f08c8008e37c", "patch": "@@ -23,6 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define GCC_DIAGNOSTIC_H\n \n #include \"obstack.h\"\n+#include \"location.h\"\n \n /* The type of a text to be formatted according a format specification\n    along with a list of things.  */\n@@ -41,16 +42,6 @@ typedef enum\n   DK_LAST_DIAGNOSTIC_KIND\n } diagnostic_t;\n \n-/* The data structure used to record the location of a diagnostic.  */\n-typedef struct\n-{\n-  /* The name of the source file involved in the diagnostic.  */     \n-  const char *file;\n-\n-  /* The line-location in the source file.  */\n-  int line;\n-} location_t;\n-\n /* A diagnostic is described by the MESSAGE to send, the FILE and LINE of\n    its context and its KIND (ice, error, warning, note, ...)  See complete\n    list in diagnostic.def.  */"}, {"sha": "1864f29721be9e637d39dd57e6f3495c683a16a8", "filename": "gcc/location.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6986399dce0b228feb187326e67f08c8008e37c/gcc%2Flocation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6986399dce0b228feb187326e67f08c8008e37c/gcc%2Flocation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocation.h?ref=e6986399dce0b228feb187326e67f08c8008e37c", "patch": "@@ -0,0 +1,38 @@\n+/* Definition of location data type used in various part of GCC\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n+\n+This program is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+ In other words, you are welcome to use, share and improve this program.\n+ You are forbidden to forbid anyone else to use, share and improve\n+ what you give them.   Help stamp out software-hoarding!  */\n+\n+#ifndef GCC_LOCATION_H\n+#define GCC_LOCATION_H\n+\n+/* The data structure used to record a location in a translation unit.  */\n+struct location_s GTY (())\n+{\n+  /* The name of the source file involved.  */     \n+  const char *file;\n+\n+  /* The line-location in the source file.  */\n+  int line;\n+};\n+typedef struct location_s location_t;\n+\n+#endif\n+"}, {"sha": "84a221822aac0adb522a86d58a4da59b5f6f2622", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6986399dce0b228feb187326e67f08c8008e37c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6986399dce0b228feb187326e67f08c8008e37c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e6986399dce0b228feb187326e67f08c8008e37c", "patch": "@@ -21,6 +21,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"machmode.h\"\n #include \"version.h\"\n+#include \"location.h\"\n \n /* Codes of tree nodes */\n \n@@ -1449,8 +1450,9 @@ struct tree_type GTY(())\n    was.  If the declaration appears in several places (as for a C\n    function that is declared first and then defined later), this\n    information should refer to the definition.  */\n-#define DECL_SOURCE_FILE(NODE) (DECL_CHECK (NODE)->decl.filename)\n-#define DECL_SOURCE_LINE(NODE) (DECL_CHECK (NODE)->decl.linenum)\n+#define DECL_SOURCE_LOCATION(NODE) (DECL_CHECK (NODE)->decl.locus)\n+#define DECL_SOURCE_FILE(NODE) (DECL_SOURCE_LOCATION (NODE).file)\n+#define DECL_SOURCE_LINE(NODE) (DECL_SOURCE_LOCATION (NODE).line)\n /* Holds the size of the datum, in bits, as a tree expression.\n    Need not be constant.  */\n #define DECL_SIZE(NODE) (DECL_CHECK (NODE)->decl.size)\n@@ -1770,8 +1772,7 @@ struct function;\n struct tree_decl GTY(())\n {\n   struct tree_common common;\n-  const char *filename;\n-  int linenum;\n+  location_t locus;\n   unsigned int uid;\n   tree size;\n   ENUM_BITFIELD(machine_mode) mode : 8;"}]}