{"sha": "0b774babfb8e8cee784cba061d245868e2e2d3aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI3NzRiYWJmYjhlOGNlZTc4NGNiYTA2MWQyNDU4NjhlMmUyZDNhYQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-12-29T17:43:02Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-12-29T17:43:02Z"}, "message": "cpp.c (gfc_cpp_init): Add pre-defined macros for INTEGER(1) INTEGER(2)...\n\n2018-12-25  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* cpp.c (gfc_cpp_init):  Add pre-defined macros for INTEGER(1)\n\tINTEGER(2), INTEGER(8) and INTEGER(16) if supported.  Add pre-defined\n\tmacros for REAL(10) and REAL(16) if available.\n\t* gfortran.texi: Document new macros.\n\nFrom-SVN: r267464", "tree": {"sha": "7617c79570b39de50ae8da9f7ed431e56dbd61f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7617c79570b39de50ae8da9f7ed431e56dbd61f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b774babfb8e8cee784cba061d245868e2e2d3aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b774babfb8e8cee784cba061d245868e2e2d3aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b774babfb8e8cee784cba061d245868e2e2d3aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b774babfb8e8cee784cba061d245868e2e2d3aa/comments", "author": null, "committer": null, "parents": [{"sha": "40b1bb9f3babc5bda92849a63cd114b1fe9737d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b1bb9f3babc5bda92849a63cd114b1fe9737d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b1bb9f3babc5bda92849a63cd114b1fe9737d6"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "e2600283363f523357ffa4639399c20c4dcaa5b7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b774babfb8e8cee784cba061d245868e2e2d3aa/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b774babfb8e8cee784cba061d245868e2e2d3aa/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0b774babfb8e8cee784cba061d245868e2e2d3aa", "patch": "@@ -1,3 +1,10 @@\n+2018-12-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* cpp.c (gfc_cpp_init):  Add pre-defined macros for INTEGER(1)\n+\tINTEGER(2), INTEGER(8) and INTEGER(16) if supported.  Add pre-defined\n+\tmacros for REAL(10) and REAL(16) if available.\n+\t* gfortran.texi: Document new macros.\n+\n 2018-12-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/81027"}, {"sha": "bf4d8912ba14c056fc5b76a22d3928b83df0f4cb", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b774babfb8e8cee784cba061d245868e2e2d3aa/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b774babfb8e8cee784cba061d245868e2e2d3aa/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=0b774babfb8e8cee784cba061d245868e2e2d3aa", "patch": "@@ -609,6 +609,28 @@ gfc_cpp_init (void)\n \t\t\t opt->arg, opt->code == OPT_MQ);\n     }\n \n+  /* Pre-defined macros for non-required INTEGER kind types.  */\n+  for (gfc_integer_info *itype = gfc_integer_kinds; itype->kind != 0; itype++)\n+    {\n+      if (itype->kind == 1)\n+\tcpp_define (cpp_in, \"__GFC_INT_1__=1\");\n+      if (itype->kind == 2)\n+\tcpp_define (cpp_in, \"__GFC_INT_2__=1\");\n+      if (itype->kind == 8)\n+\tcpp_define (cpp_in, \"__GFC_INT_8__=1\");\n+      if (itype->kind == 16)\n+\tcpp_define (cpp_in, \"__GFC_INT_16__=1\");\n+    }\n+\n+  /* Pre-defined macros for non-required REAL kind types.  */\n+  for (gfc_real_info *rtype = gfc_real_kinds; rtype->kind != 0; rtype++)\n+    {\n+      if (rtype->kind == 10)\n+\tcpp_define (cpp_in, \"__GFC_REAL_10__=1\");\n+      if (rtype->kind == 16)\n+\tcpp_define (cpp_in, \"__GFC_REAL_16__=1\");\n+    }\n+\n   if (gfc_cpp_option.working_directory\n       && gfc_cpp_option.preprocess_only && !gfc_cpp_option.no_line_commands)\n     pp_dir_change (cpp_in, get_src_pwd ());"}, {"sha": "60c5d5d4bfccff314fd10b1e80bac3a79ccc3eab", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b774babfb8e8cee784cba061d245868e2e2d3aa/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b774babfb8e8cee784cba061d245868e2e2d3aa/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=0b774babfb8e8cee784cba061d245868e2e2d3aa", "patch": "@@ -418,10 +418,18 @@ statement, the included file is not preprocessed.  To preprocess included\n files, use the equivalent preprocessor statement @code{#include}.\n \n If GNU Fortran invokes the preprocessor, @code{__GFORTRAN__}\n-is defined and @code{__GNUC__}, @code{__GNUC_MINOR__} and\n+is defined.  The macros @code{__GNUC__}, @code{__GNUC_MINOR__} and\n @code{__GNUC_PATCHLEVEL__} can be used to determine the version of the\n compiler.  See @ref{Top,,Overview,cpp,The C Preprocessor} for details.\n \n+GNU Fortran supports a number of @code{INTEGER} and @code{REAL} kind types\n+in additional to the kind types required by the Fortran standard.\n+The availability of any given kind type is architecture dependent.  The\n+following pre-defined preprocessor macros can be used to conditional\n+include code for these additional kind types: @code{__GFC_INTEGER_1__},\n+@code{__GFC_INTEGER_2__}, @code{__GFC_INTEGER_8__}, @code{__GFC_INTEGER_16__},\n+@code{__GFC_REAL_10__}, and @code{__GFC_REAL_16__}.\n+\n While CPP is the de-facto standard for preprocessing Fortran code,\n Part 3 of the Fortran 95 standard (ISO/IEC 1539-3:1998) defines\n Conditional Compilation, which is not widely used and not directly"}]}