{"sha": "4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d", "node_id": "C_kwDOANBUbNoAKDRmMWM1ZTU0ZDc4MmIyNjMwNGIwMDk1ZmZiM2NlYjRjOTJjM2M3OGQ", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2023-04-15T17:02:44Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2023-04-15T17:02:44Z"}, "message": "Fix handling of large arguments passed by value.\n\n2023-04-15  John David Anglin  <danglin@gcc.gnu.org>\n\ngcc/ChangeLog:\n\n\tPR target/104989\n\t* config/pa/pa-protos.h (pa_function_arg_size): Update prototype.\n\t* config/pa/pa.cc (pa_function_arg): Return NULL_RTX if argument\n\tsize is zero.\n\t(pa_arg_partial_bytes): Don't call pa_function_arg_size twice.\n\t(pa_function_arg_size): Change return type to int.  Return zero\n\tfor arguments larger than 1 GB.  Update comments.", "tree": {"sha": "a5d2b649420288edcfbac31b2837c7fea921b939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5d2b649420288edcfbac31b2837c7fea921b939"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d/comments", "author": null, "committer": null, "parents": [{"sha": "13669741e673fa6a7b7c8d68f992e58ecd393160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13669741e673fa6a7b7c8d68f992e58ecd393160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13669741e673fa6a7b7c8d68f992e58ecd393160"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "b4b1310a52d0d2bbeaa1752a4d23e738862b3de2", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d", "patch": "@@ -106,7 +106,7 @@ extern void pa_asm_output_aligned_local (FILE *, const char *,\n \t\t\t\t\t unsigned int);\n extern void pa_hpux_asm_output_external (FILE *, tree, const char *);\n extern HOST_WIDE_INT pa_initial_elimination_offset (int, int);\n-extern HOST_WIDE_INT pa_function_arg_size (machine_mode, const_tree);\n+extern int pa_function_arg_size (machine_mode, const_tree);\n extern void pa_output_function_label (FILE *);\n extern void hppa_profile_hook (int);\n "}, {"sha": "db633b275e5ebf50ee5b6fc65283908fd9bb2421", "filename": "gcc/config/pa/pa.cc", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d/gcc%2Fconfig%2Fpa%2Fpa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d/gcc%2Fconfig%2Fpa%2Fpa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.cc?ref=4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d", "patch": "@@ -9784,6 +9784,8 @@ pa_function_arg (cumulative_args_t cum_v, const function_arg_info &arg)\n     return NULL_RTX;\n \n   arg_size = pa_function_arg_size (mode, type);\n+  if (!arg_size)\n+    return NULL_RTX;\n \n   /* If this arg would be passed partially or totally on the stack, then\n      this routine should return zero.  pa_arg_partial_bytes will\n@@ -9985,15 +9987,16 @@ pa_arg_partial_bytes (cumulative_args_t cum_v, const function_arg_info &arg)\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n   unsigned int max_arg_words = 8;\n   unsigned int offset = 0;\n+  int arg_size;\n \n   if (!TARGET_64BIT)\n     return 0;\n \n-  if (pa_function_arg_size (arg.mode, arg.type) > 1 && (cum->words & 1))\n+  arg_size = pa_function_arg_size (arg.mode, arg.type);\n+  if (arg_size > 1 && (cum->words & 1))\n     offset = 1;\n \n-  if (cum->words + offset + pa_function_arg_size (arg.mode, arg.type)\n-      <= max_arg_words)\n+  if (cum->words + offset + arg_size <= max_arg_words)\n     /* Arg fits fully into registers.  */\n     return 0;\n   else if (cum->words + offset >= max_arg_words)\n@@ -11067,17 +11070,25 @@ pa_starting_frame_offset (void)\n   return 8;\n }\n \n-/* Figure out the size in words of the function argument.  The size\n-   returned by this function should always be greater than zero because\n-   we pass variable and zero sized objects by reference.  */\n+/* Figure out the size in words of the function argument.  */\n \n-HOST_WIDE_INT\n+int\n pa_function_arg_size (machine_mode mode, const_tree type)\n {\n   HOST_WIDE_INT size;\n \n   size = mode != BLKmode ? GET_MODE_SIZE (mode) : int_size_in_bytes (type); \n-  return CEIL (size, UNITS_PER_WORD);\n+\n+  /* The 64-bit runtime does not restrict the size of stack frames,\n+     but the gcc calling conventions limit argument sizes to 1G.  Our\n+     prologue/epilogue code limits frame sizes to just under 32 bits.\n+     1G is also the maximum frame size that can be handled by the HPUX\n+     unwind descriptor.  Since very large TYPE_SIZE_UNIT values can\n+     occur for (parallel:BLK []), we need to ignore large arguments\n+     passed by value.  */\n+  if (size >= (1 << (HOST_BITS_PER_INT - 2)))\n+    size = 0;\n+  return (int) CEIL (size, UNITS_PER_WORD);\n }\n \n #include \"gt-pa.h\""}]}