{"sha": "c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU2YTQyYjliZWRmYmVkZWYzZmMxYzFhODZlNzU5NGQ1MmVhMmFhNA==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2014-01-14T06:21:06Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-01-14T06:21:06Z"}, "message": "avx512erintrin.h (_mm_rcp28_round_sd): New.\n\ngcc/\n        * config/i386/avx512erintrin.h (_mm_rcp28_round_sd): New.\n        (_mm_rcp28_round_ss): Ditto.\n        (_mm_rsqrt28_round_sd): Ditto.\n        (_mm_rsqrt28_round_ss): Ditto.\n        (_mm_rcp28_sd): Ditto.\n        (_mm_rcp28_ss): Ditto.\n        (_mm_rsqrt28_sd): Ditto.\n        (_mm_rsqrt28_ss): Ditto.\n        * config/i386/avx512fintrin.h (_mm512_stream_load_si512): Ditto.\n        * config/i386/i386-builtin-types.def (V8DI_FTYPE_PV8DI): Ditto.\n        * config/i386/i386.c (IX86_BUILTIN_MOVNTDQA512): Ditto.\n        (IX86_BUILTIN_RCP28SD): Ditto.\n        (IX86_BUILTIN_RCP28SS): Ditto.\n        (IX86_BUILTIN_RSQRT28SD): Ditto.\n        (IX86_BUILTIN_RSQRT28SS): Ditto.\n        (bdesc_special_args): Define __builtin_ia32_movntdqa512,\n        __builtin_ia32_rcp28sd_round, __builtin_ia32_rcp28ss_round,\n        __builtin_ia32_rsqrt28sd_round, __builtin_ia32_rsqrt28ss_round.\n        (ix86_expand_special_args_builtin): Expand new FTYPE.\n        * config/i386/sse.md (define_mode_attr \"sse4_1_avx2\"): Expand to V8DI.\n        (srcp14<mode>): Make insn unary.\n        (avx512f_vmscalef<mode><round_name>): Use substed predicate.\n        (avx512f_sgetexp<mode><round_saeonly_name>): Ditto.\n        (avx512f_rndscale<mode><round_saeonly_name>): Ditto.\n        (<sse4_1_avx2>_movntdqa): Extend to 512 bits.\n        (avx512er_exp2<mode><mask_name><round_saeonly_name>):\n        Fix rounding: make it SAE only.\n        (<mask_codefor>avx512er_rcp28<mode><mask_name><round_saeonly_name>): Ditto.\n        (<mask_codefor>avx512er_rsqrt28<mode><mask_name><round_saeonly_name>): Ditto.\n        (avx512er_vmrcp28<mode><round_saeonly_name>): Ditto.\n        (avx512er_vmrsqrt28<mode><round_saeonly_name>): Ditto.\n        (avx512f_getmant<mode><mask_name><round_saeonly_name>): Ditto.\n        * config/i386/subst.md (round_saeonly_mask_scalar_operand3): Remove.\n        (round_saeonly_mask_scalar_operand4): Ditto.\n        (round_saeonly_mask_scalar_op3): Ditto.\n        (round_saeonly_mask_scalar_op4): Ditto.\n\ngcc/testsuite/\n        * gcc.target/i386/avx-1.c: Fix __builtin_ia32_exp2ps_mask,\n        __builtin_ia32_exp2pd_mask, __builtin_ia32_rcp28ps_mask,\n        __builtin_ia32_rcp28pd_mask, __builtin_ia32_rsqrt28ps_mask,\n        __builtin_ia32_rsqrt28pd_mask. Add __builtin_ia32_rcp28ss_round,\n        __builtin_ia32_rcp28sd_round, __builtin_ia32_rsqrt28ss_round,\n        __builtin_ia32_rsqrt28sd_round.\n        * gcc.target/i386/avx512er-vexp2pd-1.c: Fix rounding mode.\n        * gcc.target/i386/avx512er-vexp2ps-1.c: Ditto.\n        * gcc.target/i386/avx512er-vrcp28pd-1.c: Ditto.\n        * gcc.target/i386/avx512er-vrcp28ps-1.c: Ditto.\n        * gcc.target/i386/avx512er-vrsqrt28pd-1.c: Ditto.\n        * gcc.target/i386/avx512er-vrsqrt28ps-1.c: Ditto.\n        * gcc.target/i386/avx512er-vrcp28sd-1.c: New.\n        * gcc.target/i386/avx512er-vrcp28sd-2.c: Ditto.\n        * gcc.target/i386/avx512er-vrcp28ss-1.c: Ditto.\n        * gcc.target/i386/avx512er-vrcp28ss-2.c: Ditto.\n        * gcc.target/i386/avx512er-vrsqrt28sd-1.c: Ditto.\n        * gcc.target/i386/avx512er-vrsqrt28sd-2.c: Ditto.\n        * gcc.target/i386/avx512er-vrsqrt28ss-1.c: Ditto.\n        * gcc.target/i386/avx512er-vrsqrt28ss-2.c: Ditto.\n        * gcc.target/i386/avx512f-vmovntdqa-1.c: Ditto.\n        * gcc.target/i386/avx512f-vmovntdqa-2.c: Ditto.\n        * gcc.target/i386/avx512f-vrcp14sd-2.c: Fix.\n        * gcc.target/i386/avx512f-vrcp14ss-2.c: Ditto.\n        * gcc.target/i386/sse-22.c: Extend with new built-ins,\n        fix wrong rounding mode (see above).\n        * gcc.target/i386/sse-23.c: Ditto.\n\nFrom-SVN: r206596", "tree": {"sha": "470c6de9ea5210430e48b4be6c4cf9b55623de2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/470c6de9ea5210430e48b4be6c4cf9b55623de2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/comments", "author": null, "committer": null, "parents": [{"sha": "e5e46f5ee53d9969b2d625b4d4e805a06584ca71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e46f5ee53d9969b2d625b4d4e805a06584ca71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5e46f5ee53d9969b2d625b4d4e805a06584ca71"}], "stats": {"total": 599, "additions": 499, "deletions": 100}, "files": [{"sha": "53428a637e9004ba0535aa01909432d411056c9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -1,3 +1,42 @@\n+2014-01-14  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+       * config/i386/avx512erintrin.h (_mm_rcp28_round_sd): New.\n+\t(_mm_rcp28_round_ss): Ditto.\n+\t(_mm_rsqrt28_round_sd): Ditto.\n+\t(_mm_rsqrt28_round_ss): Ditto.\n+\t(_mm_rcp28_sd): Ditto.\n+\t(_mm_rcp28_ss): Ditto.\n+\t(_mm_rsqrt28_sd): Ditto.\n+\t(_mm_rsqrt28_ss): Ditto.\n+\t* config/i386/avx512fintrin.h (_mm512_stream_load_si512): Ditto.\n+\t* config/i386/i386-builtin-types.def (V8DI_FTYPE_PV8DI): Ditto.\n+\t* config/i386/i386.c (IX86_BUILTIN_MOVNTDQA512): Ditto.\n+\t(IX86_BUILTIN_RCP28SD): Ditto.\n+\t(IX86_BUILTIN_RCP28SS): Ditto.\n+\t(IX86_BUILTIN_RSQRT28SD): Ditto.\n+\t(IX86_BUILTIN_RSQRT28SS): Ditto.\n+\t(bdesc_special_args): Define __builtin_ia32_movntdqa512,\n+\t__builtin_ia32_rcp28sd_round, __builtin_ia32_rcp28ss_round,\n+\t__builtin_ia32_rsqrt28sd_round, __builtin_ia32_rsqrt28ss_round.\n+\t(ix86_expand_special_args_builtin): Expand new FTYPE.\n+\t* config/i386/sse.md (define_mode_attr \"sse4_1_avx2\"): Expand to V8DI.\n+\t(srcp14<mode>): Make insn unary.\n+\t(avx512f_vmscalef<mode><round_name>): Use substed predicate.\n+\t(avx512f_sgetexp<mode><round_saeonly_name>): Ditto.\n+\t(avx512f_rndscale<mode><round_saeonly_name>): Ditto.\n+\t(<sse4_1_avx2>_movntdqa): Extend to 512 bits.\n+\t(avx512er_exp2<mode><mask_name><round_saeonly_name>):\n+\tFix rounding: make it SAE only.\n+\t(<mask_codefor>avx512er_rcp28<mode><mask_name><round_saeonly_name>): Ditto.\n+\t(<mask_codefor>avx512er_rsqrt28<mode><mask_name><round_saeonly_name>): Ditto.\n+\t(avx512er_vmrcp28<mode><round_saeonly_name>): Ditto.\n+\t(avx512er_vmrsqrt28<mode><round_saeonly_name>): Ditto.\n+\t(avx512f_getmant<mode><mask_name><round_saeonly_name>): Ditto.\n+\t* config/i386/subst.md (round_saeonly_mask_scalar_operand3): Remove.\n+\t(round_saeonly_mask_scalar_operand4): Ditto.\n+\t(round_saeonly_mask_scalar_op3): Ditto.\n+\t(round_saeonly_mask_scalar_op4): Ditto.\n+\n 2014-01-13  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):"}, {"sha": "6fe05bc6608c818e7a42b3f08fd49c7bad634dab", "filename": "gcc/config/i386/avx512erintrin.h", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Fconfig%2Fi386%2Favx512erintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Fconfig%2Fi386%2Favx512erintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512erintrin.h?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -159,6 +159,24 @@ _mm512_maskz_rcp28_round_ps (__mmask16 __U, __m512 __A, int __R)\n \t\t\t\t\t       (__mmask16) __U, __R);\n }\n \n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_rcp28_round_sd (__m128d __A, __m128d __B, int __R)\n+{\n+  return (__m128d) __builtin_ia32_rcp28sd_round ((__v2df) __A,\n+\t\t\t\t\t\t (__v2df) __B,\n+\t\t\t\t\t\t __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_rcp28_round_ss (__m128 __A, __m128 __B, int __R)\n+{\n+  return (__m128) __builtin_ia32_rcp28ss_round ((__v4sf) __A,\n+\t\t\t\t\t\t(__v4sf) __B,\n+\t\t\t\t\t\t__R);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_rsqrt28_round_pd (__m512d __A, int __R)\n@@ -214,6 +232,25 @@ _mm512_maskz_rsqrt28_round_ps (__mmask16 __U, __m512 __A, int __R)\n \t\t\t\t\t\t (__v16sf) _mm512_setzero_ps (),\n \t\t\t\t\t\t (__mmask16) __U, __R);\n }\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_rsqrt28_round_sd (__m128d __A, __m128d __B, int __R)\n+{\n+  return (__m128d) __builtin_ia32_rsqrt28sd_round ((__v2df) __A,\n+\t\t\t\t\t\t   (__v2df) __B,\n+\t\t\t\t\t\t   __R);\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_rsqrt28_round_ss (__m128 __A, __m128 __B, int __R)\n+{\n+  return (__m128) __builtin_ia32_rsqrt28ss_round ((__v4sf) __A,\n+\t\t\t\t\t\t  (__v4sf) __B,\n+\t\t\t\t\t\t  __R);\n+}\n+\n #else\n #define _mm512_exp2a23_round_pd(A, C)            \\\n     __builtin_ia32_exp2pd_mask(A, (__v8df)_mm512_setzero_pd(), -1, C)\n@@ -268,6 +305,19 @@ _mm512_maskz_rsqrt28_round_ps (__mmask16 __U, __m512 __A, int __R)\n \n #define _mm512_maskz_rsqrt28_round_ps(U, A, C)   \\\n     __builtin_ia32_rsqrt28ps_mask(A, (__v16sf)_mm512_setzero_ps(), U, C)\n+\n+#define _mm_rcp28_round_sd(A, B, R)\t\\\n+    __builtin_ia32_rcp28sd_round(A, B, R)\n+\n+#define _mm_rcp28_round_ss(A, B, R)\t\\\n+    __builtin_ia32_rcp28ss_round(A, B, R)\n+\n+#define _mm_rsqrt28_round_sd(A, B, R)\t\\\n+    __builtin_ia32_rsqrt28sd_round(A, B, R)\n+\n+#define _mm_rsqrt28_round_ss(A, B, R)\t\\\n+    __builtin_ia32_rsqrt28ss_round(A, B, R)\n+\n #endif\n \n #define _mm512_exp2a23_pd(A)                    \\\n@@ -324,6 +374,18 @@ _mm512_maskz_rsqrt28_round_ps (__mmask16 __U, __m512 __A, int __R)\n #define _mm512_maskz_rsqrt28_ps(U, A)     \\\n     _mm512_maskz_rsqrt28_round_ps(U, A, _MM_FROUND_CUR_DIRECTION)\n \n+#define _mm_rcp28_sd(A, B)\t\\\n+    __builtin_ia32_rcp28sd_round(A, B, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_rcp28_ss(A, B)\t\\\n+    __builtin_ia32_rcp28ss_round(A, B, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_rsqrt28_sd(A, B)\t\\\n+    __builtin_ia32_rsqrt28sd_round(A, B, _MM_FROUND_CUR_DIRECTION)\n+\n+#define _mm_rsqrt28_ss(A, B)\t\\\n+    __builtin_ia32_rsqrt28ss_round(A, B, _MM_FROUND_CUR_DIRECTION)\n+\n #ifdef __DISABLE_AVX512ER__\n #undef __DISABLE_AVX512ER__\n #pragma GCC pop_options"}, {"sha": "26f8cb6f553b687ba226b2e8cdcb2ba90eb244f6", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -7809,6 +7809,13 @@ _mm512_stream_pd (double *__P, __m512d __A)\n   __builtin_ia32_movntpd512 (__P, (__v8df) __A);\n }\n \n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_stream_load_si512 (void *__P)\n+{\n+  return __builtin_ia32_movntdqa512 ((__v8di *)__P);\n+}\n+\n #ifdef __OPTIMIZE__\n extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "acf2f32d9e068b7fd78482d840069286de230220", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -287,6 +287,7 @@ DEF_FUNCTION_TYPE (V8DI, PV4DI)\n DEF_FUNCTION_TYPE (V8DF, PV4DF)\n DEF_FUNCTION_TYPE (V8UHI, V8UHI)\n DEF_FUNCTION_TYPE (V8USI, V8USI)\n+DEF_FUNCTION_TYPE (V8DI, PV8DI)\n \n DEF_FUNCTION_TYPE (DI, V2DI, INT)\n DEF_FUNCTION_TYPE (DOUBLE, V2DF, INT)"}, {"sha": "5e25cce6eb743a25fcf111c457274ca75526f84d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -28050,6 +28050,7 @@ enum ix86_builtins\n   IX86_BUILTIN_MOVDQA64STORE512,\n   IX86_BUILTIN_MOVDQA64_512,\n   IX86_BUILTIN_MOVNTDQ512,\n+  IX86_BUILTIN_MOVNTDQA512,\n   IX86_BUILTIN_MOVNTPD512,\n   IX86_BUILTIN_MOVNTPS512,\n   IX86_BUILTIN_MOVSHDUP512,\n@@ -28326,13 +28327,19 @@ enum ix86_builtins\n   IX86_BUILTIN_GATHERPFQPS,\n   IX86_BUILTIN_SCATTERPFDPS,\n   IX86_BUILTIN_SCATTERPFQPS,\n+\n+  /* AVX-512ER */\n   IX86_BUILTIN_EXP2PD_MASK,\n   IX86_BUILTIN_EXP2PS_MASK,\n   IX86_BUILTIN_EXP2PS,\n   IX86_BUILTIN_RCP28PD,\n   IX86_BUILTIN_RCP28PS,\n+  IX86_BUILTIN_RCP28SD,\n+  IX86_BUILTIN_RCP28SS,\n   IX86_BUILTIN_RSQRT28PD,\n   IX86_BUILTIN_RSQRT28PS,\n+  IX86_BUILTIN_RSQRT28SD,\n+  IX86_BUILTIN_RSQRT28SS,\n \n   /* SHA builtins.  */\n   IX86_BUILTIN_SHA1MSG1,\n@@ -28920,6 +28927,7 @@ static const struct builtin_description bdesc_special_args[] =\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_movntv16sf, \"__builtin_ia32_movntps512\", IX86_BUILTIN_MOVNTPS512, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V16SF },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_movntv8df, \"__builtin_ia32_movntpd512\", IX86_BUILTIN_MOVNTPD512, UNKNOWN, (int) VOID_FTYPE_PDOUBLE_V8DF },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_movntv8di, \"__builtin_ia32_movntdq512\", IX86_BUILTIN_MOVNTDQ512, UNKNOWN, (int) VOID_FTYPE_PV8DI_V8DI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_movntdqa, \"__builtin_ia32_movntdqa512\", IX86_BUILTIN_MOVNTDQA512, UNKNOWN, (int) V8DI_FTYPE_PV8DI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_storedquv16si_mask, \"__builtin_ia32_storedqusi512_mask\", IX86_BUILTIN_STOREDQUSI512, UNKNOWN, (int) VOID_FTYPE_PV16SI_V16SI_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_storedquv8di_mask, \"__builtin_ia32_storedqudi512_mask\", IX86_BUILTIN_STOREDQUDI512, UNKNOWN, (int) VOID_FTYPE_PV8DI_V8DI_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_storeupd512_mask, \"__builtin_ia32_storeupd512_mask\", IX86_BUILTIN_STOREUPD512, UNKNOWN, (int) VOID_FTYPE_PV8DF_V8DF_QI },\n@@ -30133,8 +30141,12 @@ static const struct builtin_description bdesc_round_args[] =\n   { OPTION_MASK_ISA_AVX512ER, CODE_FOR_avx512er_exp2v16sf_mask_round, \"__builtin_ia32_exp2ps_mask\", IX86_BUILTIN_EXP2PS_MASK, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI_INT },\n   { OPTION_MASK_ISA_AVX512ER, CODE_FOR_avx512er_rcp28v8df_mask_round, \"__builtin_ia32_rcp28pd_mask\", IX86_BUILTIN_RCP28PD, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512ER, CODE_FOR_avx512er_rcp28v16sf_mask_round, \"__builtin_ia32_rcp28ps_mask\", IX86_BUILTIN_RCP28PS, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512ER, CODE_FOR_avx512er_vmrcp28v2df_round, \"__builtin_ia32_rcp28sd_round\", IX86_BUILTIN_RCP28SD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_AVX512ER, CODE_FOR_avx512er_vmrcp28v4sf_round, \"__builtin_ia32_rcp28ss_round\", IX86_BUILTIN_RCP28SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n   { OPTION_MASK_ISA_AVX512ER, CODE_FOR_avx512er_rsqrt28v8df_mask_round, \"__builtin_ia32_rsqrt28pd_mask\", IX86_BUILTIN_RSQRT28PD, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_QI_INT },\n   { OPTION_MASK_ISA_AVX512ER, CODE_FOR_avx512er_rsqrt28v16sf_mask_round, \"__builtin_ia32_rsqrt28ps_mask\", IX86_BUILTIN_RSQRT28PS, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_HI_INT },\n+  { OPTION_MASK_ISA_AVX512ER, CODE_FOR_avx512er_vmrsqrt28v2df_round, \"__builtin_ia32_rsqrt28sd_round\", IX86_BUILTIN_RSQRT28SD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n+  { OPTION_MASK_ISA_AVX512ER, CODE_FOR_avx512er_vmrsqrt28v4sf_round, \"__builtin_ia32_rsqrt28ss_round\", IX86_BUILTIN_RSQRT28SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n };\n \n /* FMA4 and XOP.  */\n@@ -34367,6 +34379,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case V16SI_FTYPE_PV4SI:\n     case V16SF_FTYPE_PV4SF:\n     case V8DI_FTYPE_PV4DI:\n+    case V8DI_FTYPE_PV8DI:\n     case V8DF_FTYPE_PV4DF:\n       nargs = 1;\n       klass = load;\n@@ -34375,6 +34388,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \t{\n \tcase CODE_FOR_sse4_1_movntdqa:\n \tcase CODE_FOR_avx2_movntdqa:\n+\tcase CODE_FOR_avx512f_movntdqa:\n \t  aligned_mem = true;\n \t  break;\n \tdefault:"}, {"sha": "31e94fe661fa7cea60e615082d2bf8414c68791b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 49, "deletions": 22, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -356,7 +356,7 @@\n    [(V16QI \"sse4_1\") (V32QI \"avx2\")\n     (V8HI \"sse4_1\") (V16HI \"avx2\")\n     (V4SI \"sse4_1\") (V8SI \"avx2\") (V16SI \"avx512f\")\n-    (V2DI \"sse4_1\") (V4DI \"avx2\")])\n+    (V2DI \"sse4_1\") (V4DI \"avx2\") (V8DI \"avx512f\")])\n \n (define_mode_attr avx_avx2\n   [(V4SF \"avx\") (V2DF \"avx\")\n@@ -1463,13 +1463,12 @@\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n-\t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"vm\")]\n+\t    [(match_operand:VF_128 1 \"nonimmediate_operand\" \"vm\")]\n \t    UNSPEC_RCP14)\n-\t  (match_dup 1)\n+\t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n-  \"vrcp14<ssescalarmodesuffix>\\t{%2, %1, %0|, %1, %2}\"\n+  \"vrcp14<ssescalarmodesuffix>\\t{%1, %2, %0|%0, %2, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -6570,7 +6569,7 @@\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"<round_constraint>\")]\n+\t     (match_operand:VF_128 2 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n \t    UNSPEC_SCALEF)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n@@ -6650,7 +6649,7 @@\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")]\n+\t     (match_operand:VF_128 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")]\n \t    UNSPEC_GETEXP)\n \t  (match_dup 1)\n \t  (const_int 1)))]\n@@ -6815,7 +6814,7 @@\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n+\t     (match_operand:VF_128 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t    UNSPEC_ROUND)\n \t  (match_dup 1)\n@@ -11499,14 +11498,14 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sse4_1_avx2>_movntdqa\"\n-  [(set (match_operand:VI8_AVX2 0 \"register_operand\" \"=x\")\n-\t(unspec:VI8_AVX2 [(match_operand:VI8_AVX2 1 \"memory_operand\" \"m\")]\n+  [(set (match_operand:VI8_AVX2_AVX512F 0 \"register_operand\" \"=x, v\")\n+\t(unspec:VI8_AVX2_AVX512F [(match_operand:VI8_AVX2_AVX512F 1 \"memory_operand\" \"m, m\")]\n \t\t     UNSPEC_MOVNTDQA))]\n   \"TARGET_SSE4_1\"\n   \"%vmovntdqa\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix_extra\" \"1, *\")\n+   (set_attr \"prefix\" \"maybe_vex, evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<sse4_1_avx2>_mpsadbw\"\n@@ -12635,36 +12634,64 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"avx512er_exp2<mode><mask_name><round_name>\"\n+(define_insn \"avx512er_exp2<mode><mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n+\t  [(match_operand:VF_512 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")]\n \t  UNSPEC_EXP2))]\n   \"TARGET_AVX512ER\"\n-  \"vexp2<ssemodesuffix>\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n+  \"vexp2<ssemodesuffix>\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\"\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<mask_codefor>avx512er_rcp28<mode><mask_name><round_name>\"\n+(define_insn \"<mask_codefor>avx512er_rcp28<mode><mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n+\t  [(match_operand:VF_512 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")]\n \t  UNSPEC_RCP28))]\n   \"TARGET_AVX512ER\"\n-  \"vrcp28<ssemodesuffix>\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n+  \"vrcp28<ssemodesuffix>\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\"\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<mask_codefor>avx512er_rsqrt28<mode><mask_name><round_name>\"\n+(define_insn \"avx512er_vmrcp28<mode><round_saeonly_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (unspec:VF_128\n+\t    [(match_operand:VF_128 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")]\n+\t    UNSPEC_RCP28)\n+\t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512ER\"\n+  \"vrcp28<ssescalarmodesuffix>\\t{<round_saeonly_op3>%2, %1, %0|%0, %1, %2<round_saeonly_op3>}\"\n+  [(set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"<mask_codefor>avx512er_rsqrt28<mode><mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n \t(unspec:VF_512\n-\t  [(match_operand:VF_512 1 \"<round_nimm_predicate>\" \"<round_constraint>\")]\n+\t  [(match_operand:VF_512 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")]\n \t  UNSPEC_RSQRT28))]\n   \"TARGET_AVX512ER\"\n-  \"vrsqrt28<ssemodesuffix>\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n+  \"vrsqrt28<ssemodesuffix>\\t{<round_saeonly_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_saeonly_mask_op2>}\"\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"avx512er_vmrsqrt28<mode><round_saeonly_name>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VF_128\n+\t  (unspec:VF_128\n+\t    [(match_operand:VF_128 1 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")]\n+\t    UNSPEC_RSQRT28)\n+\t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512ER\"\n+  \"vrsqrt28<ssescalarmodesuffix>\\t{<round_saeonly_op3>%2, %1, %0|%0, %1, %2<round_saeonly_op3>}\"\n+  [(set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; XOP instructions\n@@ -15201,7 +15228,7 @@\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n-\t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")\n+\t     (match_operand:VF_128 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_15_operand\")]\n \t    UNSPEC_GETMANT)\n \t  (match_dup 1)"}, {"sha": "7948e78e8e4255fe79ad9553e08e42441a67e6b5", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -133,8 +133,6 @@\n (define_subst_attr \"round_saeonly_name\" \"round_saeonly\" \"\" \"_round\")\n (define_subst_attr \"round_saeonly_mask_operand2\" \"mask\" \"%R2\" \"%R4\")\n (define_subst_attr \"round_saeonly_mask_operand3\" \"mask\" \"%R3\" \"%R5\")\n-(define_subst_attr \"round_saeonly_mask_scalar_operand3\" \"mask_scalar\" \"%R3\" \"%R5\")\n-(define_subst_attr \"round_saeonly_mask_scalar_operand4\" \"mask_scalar\" \"%R4\" \"%R6\")\n (define_subst_attr \"round_saeonly_mask_scalar_merge_operand4\" \"mask_scalar_merge\" \"%R4\" \"%R5\")\n (define_subst_attr \"round_saeonly_sd_mask_operand5\" \"sd\" \"%R5\" \"%R7\")\n (define_subst_attr \"round_saeonly_op2\" \"round_saeonly\" \"\" \"%R2\")\n@@ -145,8 +143,6 @@\n (define_subst_attr \"round_saeonly_prefix\" \"round_saeonly\" \"vex\" \"evex\")\n (define_subst_attr \"round_saeonly_mask_op2\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand2>\")\n (define_subst_attr \"round_saeonly_mask_op3\" \"round_saeonly\" \"\" \"<round_saeonly_mask_operand3>\")\n-(define_subst_attr \"round_saeonly_mask_scalar_op3\" \"round_saeonly\" \"\" \"<round_saeonly_mask_scalar_operand3>\")\n-(define_subst_attr \"round_saeonly_mask_scalar_op4\" \"round_saeonly\" \"\" \"<round_saeonly_mask_scalar_operand4>\")\n (define_subst_attr \"round_saeonly_mask_scalar_merge_op4\" \"round_saeonly\" \"\" \"<round_saeonly_mask_scalar_merge_operand4>\")\n (define_subst_attr \"round_saeonly_sd_mask_op5\" \"round_saeonly\" \"\" \"<round_saeonly_sd_mask_operand5>\")\n (define_subst_attr \"round_saeonly_constraint\" \"round_saeonly\" \"vm\" \"v\")"}, {"sha": "b2a867c3041fc8819b692c89fa81c77a81a7cdb2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -1,3 +1,33 @@\n+2014-01-14  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+        * gcc.target/i386/avx-1.c: Fix __builtin_ia32_exp2ps_mask,\n+\t__builtin_ia32_exp2pd_mask, __builtin_ia32_rcp28ps_mask,\n+\t__builtin_ia32_rcp28pd_mask, __builtin_ia32_rsqrt28ps_mask,\n+\t__builtin_ia32_rsqrt28pd_mask. Add __builtin_ia32_rcp28ss_round,\n+\t__builtin_ia32_rcp28sd_round, __builtin_ia32_rsqrt28ss_round,\n+\t__builtin_ia32_rsqrt28sd_round.\n+\t* gcc.target/i386/avx512er-vexp2pd-1.c: Fix rounding mode.\n+\t* gcc.target/i386/avx512er-vexp2ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrcp28pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrcp28ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28pd-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28ps-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrcp28sd-1.c: New.\n+\t* gcc.target/i386/avx512er-vrcp28sd-2.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrcp28ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrcp28ss-2.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28sd-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28sd-2.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28ss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovntdqa-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vmovntdqa-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vrcp14sd-2.c: Fix.\n+\t* gcc.target/i386/avx512f-vrcp14ss-2.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Extend with new built-ins,\n+\tfix wrong rounding mode (see above).\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\n 2014-01-13  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.dg/vmx/insert.c: New."}, {"sha": "12674adf18a1114a103a715ab4a23342764a97be", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -344,12 +344,20 @@\n #define __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubps512_mask3(A, B, C, D, 1)\n #define __builtin_ia32_vpermilpd512_mask(A, E, C, D) __builtin_ia32_vpermilpd512_mask(A, 1, C, D)\n #define __builtin_ia32_vpermilps512_mask(A, E, C, D) __builtin_ia32_vpermilps512_mask(A, 1, C, D)\n-#define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask(A, B, C, 1)\n-#define __builtin_ia32_exp2pd_mask(A, B, C, D) __builtin_ia32_exp2pd_mask(A, B, C, 1)\n-#define __builtin_ia32_rcp28ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask(A, B, C, 1)\n-#define __builtin_ia32_rcp28pd_mask(A, B, C, D) __builtin_ia32_exp2pd_mask(A, B, C, 1)\n-#define __builtin_ia32_rsqrt28ps_mask(A, B, C, D) __builtin_ia32_rsqrt28ps_mask(A, B, C, 1)\n-#define __builtin_ia32_rsqrt28pd_mask(A, B, C, D) __builtin_ia32_rsqrt28pd_mask(A, B, C, 1)\n+\n+/* avx512erintrin.h */\n+#define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask(A, B, C, 5)\n+#define __builtin_ia32_exp2pd_mask(A, B, C, D) __builtin_ia32_exp2pd_mask(A, B, C, 5)\n+#define __builtin_ia32_rcp28ps_mask(A, B, C, D) __builtin_ia32_rcp28ps_mask(A, B, C, 5)\n+#define __builtin_ia32_rcp28pd_mask(A, B, C, D) __builtin_ia32_rcp28pd_mask(A, B, C, 5)\n+#define __builtin_ia32_rsqrt28ps_mask(A, B, C, D) __builtin_ia32_rsqrt28ps_mask(A, B, C, 5)\n+#define __builtin_ia32_rsqrt28pd_mask(A, B, C, D) __builtin_ia32_rsqrt28pd_mask(A, B, C, 5)\n+#define __builtin_ia32_rcp28ss_round(A, B, C) __builtin_ia32_rcp28ss_round(A, B, 5)\n+#define __builtin_ia32_rcp28sd_round(A, B, C) __builtin_ia32_rcp28sd_round(A, B, 5)\n+#define __builtin_ia32_rsqrt28ss_round(A, B, C) __builtin_ia32_rsqrt28ss_round(A, B, 5)\n+#define __builtin_ia32_rsqrt28sd_round(A, B, C) __builtin_ia32_rsqrt28sd_round(A, B, 5)\n+\n+/* avx512pfintrin.h */\n #define __builtin_ia32_gatherpfdps(A, B, C, D, E) __builtin_ia32_gatherpfdps(A, B, C, 1, 1)\n #define __builtin_ia32_gatherpfqps(A, B, C, D, E) __builtin_ia32_gatherpfqps(A, B, C, 1, 1)\n #define __builtin_ia32_scatterpfdps(A, B, C, D, E) __builtin_ia32_scatterpfdps(A, B, C, 1, 1)"}, {"sha": "22c086d5a4e5e8634b73fc46c771eb6429b9e3df", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vexp2pd-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2pd-1.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -3,9 +3,9 @@\n /* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]*\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vexp2pd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -18,7 +18,7 @@ avx512er_test (void)\n   x = _mm512_exp2a23_pd (x);\n   x = _mm512_mask_exp2a23_pd (x, m, x);\n   x = _mm512_maskz_exp2a23_pd (m, x);\n-  x = _mm512_exp2a23_round_pd (x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_exp2a23_round_pd (x, m, x, _MM_FROUND_TO_NEG_INF);\n-  x = _mm512_maskz_exp2a23_round_pd (m, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_exp2a23_round_pd (x, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_exp2a23_round_pd (x, m, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_exp2a23_round_pd (m, x, _MM_FROUND_NO_EXC);\n }"}, {"sha": "9d1178e5536e6d1bb2eae65777c873352f47656e", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vexp2ps-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vexp2ps-1.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -3,9 +3,9 @@\n /* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]*\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vexp2ps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -18,7 +18,7 @@ avx512er_test (void)\n   x = _mm512_exp2a23_ps (x);\n   x = _mm512_mask_exp2a23_ps (x, m, x);\n   x = _mm512_maskz_exp2a23_ps (m, x);\n-  x = _mm512_exp2a23_round_ps (x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_exp2a23_round_ps (x, m, x, _MM_FROUND_TO_POS_INF);\n-  x = _mm512_maskz_exp2a23_round_ps (m, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_exp2a23_round_ps (x, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_exp2a23_round_ps (x, m, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_exp2a23_round_ps (m, x, _MM_FROUND_NO_EXC);\n }"}, {"sha": "505c0eb9e3720780970a73116a90af03b2c9d806", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28pd-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28pd-1.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -3,9 +3,9 @@\n /* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]*\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -18,7 +18,7 @@ avx512er_test (void)\n   x = _mm512_rcp28_pd (x);\n   x = _mm512_mask_rcp28_pd (x, m, x);\n   x = _mm512_maskz_rcp28_pd (m, x);\n-  x = _mm512_rcp28_round_pd (x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_rcp28_round_pd (x, m, x, _MM_FROUND_TO_NEG_INF);\n-  x = _mm512_maskz_rcp28_round_pd (m, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_rcp28_round_pd (x, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_rcp28_round_pd (x, m, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_rcp28_round_pd (m, x, _MM_FROUND_NO_EXC);\n }"}, {"sha": "e9245bad4b89fa9783612c83c7d770142d84229a", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28ps-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ps-1.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -3,9 +3,9 @@\n /* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]*\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -18,7 +18,7 @@ avx512er_test (void)\n   x = _mm512_rcp28_ps (x);\n   x = _mm512_mask_rcp28_ps (x, m, x);\n   x = _mm512_maskz_rcp28_ps (m, x);\n-  x = _mm512_rcp28_round_ps (x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_rcp28_round_ps (x, m, x, _MM_FROUND_TO_POS_INF);\n-  x = _mm512_maskz_rcp28_round_ps (m, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_rcp28_round_ps (x, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_rcp28_round_ps (x, m, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_rcp28_round_ps (m, x, _MM_FROUND_NO_EXC);\n }"}, {"sha": "d09ba571112d100a3f83f8686384955a4e15efdd", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28sd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-1.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512er -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrcp28sd\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28sd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]*\\n\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x, y;\n+\n+void extern\n+avx512er_test (void)\n+{\n+  x = _mm_rcp28_sd (x, y);\n+  x = _mm_rcp28_round_sd (x, y, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "d30f08828b6414dffe6a9d6451168e01654b6a3d", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28sd-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28sd-2.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512er } */\n+/* { dg-options \"-O2 -mavx512er\" } */\n+\n+#include \"avx512er-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+#include <math.h>\n+\n+void static\n+avx512er_test (void)\n+{\n+  union128d src, res;\n+  double res_ref[2];\n+  int i;\n+  \n+  for (i = 0; i < 2; i++)\n+    {\n+      src.a[i] = 179.345 - 6.5645 * i;\n+      res_ref[i] = src.a[i];\n+    }\n+\n+  res_ref[0] = 1.0 / src.a[0];\n+\n+  res.x = _mm_rcp28_round_sd (src.x, src.x, _MM_FROUND_NO_EXC);\n+\n+  if (checkVd (res.a, res_ref, 2))\n+    abort ();\n+}"}, {"sha": "3f5ccea150ecd963f9fa5411540179b32d6c9f40", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28ss-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-1.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512er -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrcp28ss\\[ \\\\t\\]+\\[^\\n\\]*%xmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrcp28ss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\\[^\\{\\]*\\n\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x, y;\n+\n+void extern\n+avx512er_test (void)\n+{\n+  x = _mm_rcp28_ss (x, y);\n+  x = _mm_rcp28_round_ss (x, y, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "499a9771e78443e05dc3d5c47c423ce3597103c5", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrcp28ss-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrcp28ss-2.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512er } */\n+/* { dg-options \"-O2 -mavx512er\" } */\n+\n+#include \"avx512er-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+#include <math.h>\n+\n+void static\n+avx512er_test (void)\n+{\n+  union128 src, res;\n+  float res_ref[4];\n+  int i;\n+  \n+  for (i = 0; i < 4; i++)\n+    {\n+      src.a[i] = 179.345 - 6.5645 * i;\n+      res_ref[i] = src.a[i];\n+    }\n+\n+  res_ref[0] = 1.0 / src.a[0];\n+\n+  res.x = _mm_rsqrt28_round_ss (src.x, src.x, _MM_FROUND_NO_EXC);\n+\n+  if (checkVf (res.a, res_ref, 4))\n+    abort ();\n+}"}, {"sha": "5d264ac73fb290d44471cbe5c320651f9a2ffa62", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28pd-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28pd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28pd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28pd-1.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -3,9 +3,9 @@\n /* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rd-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]*\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28pd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -18,7 +18,7 @@ avx512er_test (void)\n   x = _mm512_rsqrt28_pd (x);\n   x = _mm512_mask_rsqrt28_pd (x, m, x);\n   x = _mm512_maskz_rsqrt28_pd (m, x);\n-  x = _mm512_rsqrt28_round_pd (x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_rsqrt28_round_pd (x, m, x, _MM_FROUND_TO_NEG_INF);\n-  x = _mm512_maskz_rsqrt28_round_pd (m, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_rsqrt28_round_pd (x, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_rsqrt28_round_pd (x, m, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_rsqrt28_round_pd (m, x, _MM_FROUND_NO_EXC);\n }"}, {"sha": "bfdb9ac6edb046be2392a6de5a1b8a89095a23fe", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28ps-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ps-1.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -3,9 +3,9 @@\n /* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[\\\\n\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 2 } } */\n /* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rn-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{ru-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{rz-sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]*\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ps\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -18,7 +18,7 @@ avx512er_test (void)\n   x = _mm512_rsqrt28_ps (x);\n   x = _mm512_mask_rsqrt28_ps (x, m, x);\n   x = _mm512_maskz_rsqrt28_ps (m, x);\n-  x = _mm512_rsqrt28_round_ps (x, _MM_FROUND_TO_NEAREST_INT);\n-  x = _mm512_mask_rsqrt28_round_ps (x, m, x, _MM_FROUND_TO_POS_INF);\n-  x = _mm512_maskz_rsqrt28_round_ps (m, x, _MM_FROUND_TO_ZERO);\n+  x = _mm512_rsqrt28_round_ps (x, _MM_FROUND_NO_EXC);\n+  x = _mm512_mask_rsqrt28_round_ps (x, m, x, _MM_FROUND_NO_EXC);\n+  x = _mm512_maskz_rsqrt28_round_ps (m, x, _MM_FROUND_NO_EXC);\n }"}, {"sha": "59dff784eb034f9f2a8c12de75252786ae89a375", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28sd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-1.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512er -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28sd\\[ \\\\t\\]+\\[^\\{^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28sd\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d x, y;\n+\n+void extern\n+avx512er_test (void)\n+{\n+  x = _mm_rsqrt28_sd (x, y);\n+  x = _mm_rsqrt28_round_sd (x, y, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "1537a5932ca9516d219df2f61ce82e4e278e066b", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28sd-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28sd-2.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512er } */\n+/* { dg-options \"-O2 -mavx512er\" } */\n+\n+#include \"avx512er-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+#include <math.h>\n+\n+void static\n+avx512er_test (void)\n+{\n+  union128d src, res;\n+  double res_ref[2];\n+  int i;\n+  \n+  for (i = 0; i < 2; i++)\n+    {\n+      src.a[i] = 179.345 - 6.5645 * i;\n+      res_ref[i] = src.a[i];\n+    }\n+\n+  res_ref[0] = 1.0 / sqrt (src.a[0]);\n+\n+  res.x = _mm_rsqrt28_round_sd (src.x, src.x, _MM_FROUND_NO_EXC);\n+\n+  if (checkVd (res.a, res_ref, 2))\n+    abort ();\n+}"}, {"sha": "a334375811fc1632a82e14bff052d6a6f5883277", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28ss-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-1.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512er -O2\" } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ss\\[ \\\\t\\]+\\[^\\{^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrsqrt28ss\\[ \\\\t\\]+\\[^\\n\\]*\\{sae\\}\\[^\\n\\]*%xmm\\[0-9\\]\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 x, y;\n+\n+void extern\n+avx512er_test (void)\n+{\n+  x = _mm_rsqrt28_ss (x, y);\n+  x = _mm_rsqrt28_round_ss (x, y, _MM_FROUND_NO_EXC);\n+}"}, {"sha": "f88422ea5edd07d7b63e3fe8e2bf35c753fa536e", "filename": "gcc/testsuite/gcc.target/i386/avx512er-vrsqrt28ss-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512er-vrsqrt28ss-2.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512er } */\n+/* { dg-options \"-O2 -mavx512er\" } */\n+\n+#include \"avx512er-check.h\"\n+#include \"avx512f-mask-type.h\"\n+#include \"avx512f-helper.h\"\n+#include <math.h>\n+\n+void static\n+avx512er_test (void)\n+{\n+  union128 src, res;\n+  float res_ref[4];\n+  int i;\n+  \n+  for (i = 0; i < 4; i++)\n+    {\n+      src.a[i] = 179.345 - 6.5645 * i;\n+      res_ref[i] = src.a[i];\n+    }\n+\n+  res_ref[0] = 1.0 / sqrt (src.a[0]);\n+\n+  res.x = _mm_rsqrt28_round_ss (src.x, src.x, _MM_FROUND_NO_EXC);\n+\n+  if (checkVf (res.a, res_ref, 4))\n+    abort ();\n+}"}, {"sha": "d5be976e0dd7fa382b97d8bf20d0e520e6f00c52", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovntdqa-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovntdqa-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovntdqa-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovntdqa-1.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler \"vmovntdqa\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m512i *x;\n+volatile __m512i y;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  y = _mm512_stream_load_si512 (x);\n+}"}, {"sha": "0825781c3aceb3c15114dde5f2e4a1247a16fcc5", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovntdqa-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovntdqa-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovntdqa-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovntdqa-2.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+void static\n+avx512f_test (void)\n+{\n+  union512i_q s, res;\n+\n+  s.x = _mm512_set_epi64 (39578, -429496, 7856, 0, 85632, -1234, 47563, -1);\n+  res.x = _mm512_stream_load_si512 (&s.x);\n+\n+  if (check_union512i_q (s, res.a))\n+    abort ();\n+}"}, {"sha": "0c9211a9a632099dd167bf5925eea2c496559fa4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrcp14sd-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14sd-2.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -8,8 +8,8 @@\n static void\n compute_vrcp14sd (double *s1, double *s2, double *r)\n {\n-  r[0] = 1.0 / s2[0];\n-  r[1] = s1[1];\n+  r[0] = 1.0 / s1[0];\n+  r[1] = s2[1];\n }\n \n static void\n@@ -26,6 +26,6 @@ avx512f_test (void)\n \n   compute_vrcp14sd (s1.a, s2.a, res_ref);\n \n-  if (check_union128d (res1, res_ref))\n+  if (checkVd (res1.a, res_ref, 2))\n     abort ();\n }"}, {"sha": "3344dadb8ef05375fc488d1b5e550c0ff12c0684", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vrcp14ss-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vrcp14ss-2.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -8,10 +8,10 @@\n static void\n compute_vrcp14ss (float *s1, float *s2, float *r)\n {\n-  r[0] = 1.0 / s2[0];\n-  r[1] = s1[1];\n-  r[2] = s1[2];\n-  r[3] = s1[3];\n+  r[0] = 1.0 / s1[0];\n+  r[1] = s2[1];\n+  r[2] = s2[2];\n+  r[3] = s2[3];\n }\n \n static void\n@@ -28,6 +28,6 @@ avx512f_test (void)\n \n   compute_vrcp14ss (s1.a, s2.a, res_ref);\n \n-  if (check_union128 (res1, res_ref))\n+  if (checkVf (res1.a, res_ref, 4))\n     abort ();\n }"}, {"sha": "630c952ab69a134c87e30fba52c3308f1bec41df", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -647,24 +647,28 @@ test_3vx (_mm512_mask_prefetch_i64gather_ps, __m512i, __mmask8, void const *, 1,\n test_3vx (_mm512_mask_prefetch_i64scatter_ps, void const *, __mmask8, __m512i, 1, 1)\n \n /* avx512erintrin.h */\n-test_1 (_mm512_exp2a23_round_pd, __m512d, __m512d, 1)\n-test_1 (_mm512_exp2a23_round_ps, __m512, __m512, 1)\n-test_1 (_mm512_rcp28_round_pd, __m512d, __m512d, 1)\n-test_1 (_mm512_rcp28_round_ps, __m512, __m512, 1)\n-test_1 (_mm512_rsqrt28_round_pd, __m512d, __m512d, 1)\n-test_1 (_mm512_rsqrt28_round_ps, __m512, __m512, 1)\n-test_2 (_mm512_maskz_exp2a23_round_pd, __m512d, __mmask8, __m512d, 1)\n-test_2 (_mm512_maskz_exp2a23_round_ps, __m512, __mmask16, __m512, 1)\n-test_2 (_mm512_maskz_rcp28_round_pd, __m512d, __mmask8, __m512d, 1)\n-test_2 (_mm512_maskz_rcp28_round_ps, __m512, __mmask16, __m512, 1)\n-test_2 (_mm512_maskz_rsqrt28_round_pd, __m512d, __mmask8, __m512d, 1)\n-test_2 (_mm512_maskz_rsqrt28_round_ps, __m512, __mmask16, __m512, 1)\n-test_3 (_mm512_mask_exp2a23_round_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n-test_3 (_mm512_mask_exp2a23_round_ps, __m512, __m512, __mmask16, __m512, 1)\n-test_3 (_mm512_mask_rcp28_round_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n-test_3 (_mm512_mask_rcp28_round_ps, __m512, __m512, __mmask16, __m512, 1)\n-test_3 (_mm512_mask_rsqrt28_round_pd, __m512d, __m512d, __mmask8, __m512d, 1)\n-test_3 (_mm512_mask_rsqrt28_round_ps, __m512, __m512, __mmask16, __m512, 1)\n+test_1 (_mm512_exp2a23_round_pd, __m512d, __m512d, 5)\n+test_1 (_mm512_exp2a23_round_ps, __m512, __m512, 5)\n+test_1 (_mm512_rcp28_round_pd, __m512d, __m512d, 5)\n+test_1 (_mm512_rcp28_round_ps, __m512, __m512, 5)\n+test_1 (_mm512_rsqrt28_round_pd, __m512d, __m512d, 5)\n+test_1 (_mm512_rsqrt28_round_ps, __m512, __m512, 5)\n+test_2 (_mm512_maskz_exp2a23_round_pd, __m512d, __mmask8, __m512d, 5)\n+test_2 (_mm512_maskz_exp2a23_round_ps, __m512, __mmask16, __m512, 5)\n+test_2 (_mm512_maskz_rcp28_round_pd, __m512d, __mmask8, __m512d, 5)\n+test_2 (_mm512_maskz_rcp28_round_ps, __m512, __mmask16, __m512, 5)\n+test_2 (_mm512_maskz_rsqrt28_round_pd, __m512d, __mmask8, __m512d, 5)\n+test_2 (_mm512_maskz_rsqrt28_round_ps, __m512, __mmask16, __m512, 5)\n+test_3 (_mm512_mask_exp2a23_round_pd, __m512d, __m512d, __mmask8, __m512d, 5)\n+test_3 (_mm512_mask_exp2a23_round_ps, __m512, __m512, __mmask16, __m512, 5)\n+test_3 (_mm512_mask_rcp28_round_pd, __m512d, __m512d, __mmask8, __m512d, 5)\n+test_3 (_mm512_mask_rcp28_round_ps, __m512, __m512, __mmask16, __m512, 5)\n+test_3 (_mm512_mask_rsqrt28_round_pd, __m512d, __m512d, __mmask8, __m512d, 5)\n+test_3 (_mm512_mask_rsqrt28_round_ps, __m512, __m512, __mmask16, __m512, 5)\n+test_2 (_mm_rcp28_round_sd, __m128d, __m128d, __m128d, 5)\n+test_2 (_mm_rcp28_round_ss, __m128, __m128, __m128, 5)\n+test_2 (_mm_rsqrt28_round_sd, __m128d, __m128d, __m128d, 5)\n+test_2 (_mm_rsqrt28_round_ss, __m128, __m128, __m128, 5)\n \n /* shaintrin.h */\n test_2 (_mm_sha1rnds4_epu32, __m128i, __m128i, __m128i, 1)"}, {"sha": "309cd739e60ba044c328efa5f0101716f74d3564", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=c56a42b9bedfbedef3fc1c1a86e7594d52ea2aa4", "patch": "@@ -367,12 +367,16 @@\n #define __builtin_ia32_scatterpfqps(A, B, C, D, E) __builtin_ia32_scatterpfqps(A, B, C, 1, 1)\n \n /* avx512erintrin.h */\n-#define __builtin_ia32_exp2pd_mask(A, B, C, D) __builtin_ia32_exp2pd_mask (A, B, C, 1)\n-#define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask (A, B, C, 1)\n-#define __builtin_ia32_rcp28pd_mask(A, B, C, D) __builtin_ia32_rcp28pd_mask (A, B, C, 1)\n-#define __builtin_ia32_rcp28ps_mask(A, B, C, D) __builtin_ia32_rcp28ps_mask (A, B, C, 1)\n-#define __builtin_ia32_rsqrt28pd_mask(A, B, C, D) __builtin_ia32_rsqrt28pd_mask (A, B, C, 1)\n-#define __builtin_ia32_rsqrt28ps_mask(A, B, C, D) __builtin_ia32_rsqrt28ps_mask (A, B, C, 1)\n+#define __builtin_ia32_exp2pd_mask(A, B, C, D) __builtin_ia32_exp2pd_mask (A, B, C, 5)\n+#define __builtin_ia32_exp2ps_mask(A, B, C, D) __builtin_ia32_exp2ps_mask (A, B, C, 5)\n+#define __builtin_ia32_rcp28pd_mask(A, B, C, D) __builtin_ia32_rcp28pd_mask (A, B, C, 5)\n+#define __builtin_ia32_rcp28ps_mask(A, B, C, D) __builtin_ia32_rcp28ps_mask (A, B, C, 5)\n+#define __builtin_ia32_rsqrt28pd_mask(A, B, C, D) __builtin_ia32_rsqrt28pd_mask (A, B, C, 5)\n+#define __builtin_ia32_rsqrt28ps_mask(A, B, C, D) __builtin_ia32_rsqrt28ps_mask (A, B, C, 5)\n+#define __builtin_ia32_rcp28sd_round(A, B, C) __builtin_ia32_rcp28sd_round(A, B, 5)\n+#define __builtin_ia32_rcp28ss_round(A, B, C) __builtin_ia32_rcp28ss_round(A, B, 5)\n+#define __builtin_ia32_rsqrt28sd_round(A, B, C) __builtin_ia32_rsqrt28sd_round(A, B, 5)\n+#define __builtin_ia32_rsqrt28ss_round(A, B, C) __builtin_ia32_rsqrt28ss_round(A, B, 5)\n \n /* shaintrin.h */\n #define __builtin_ia32_sha1rnds4(A, B, C) __builtin_ia32_sha1rnds4(A, B, 1)"}]}