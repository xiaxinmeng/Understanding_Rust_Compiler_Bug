{"sha": "fc0461ae3f649ce1862e907c4b4d401fd10cea76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMwNDYxYWUzZjY0OWNlMTg2MmU5MDdjNGI0ZDQwMWZkMTBjZWE3Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:09:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:09:34Z"}, "message": "[10/77] Make assemble_real take a scalar_float_mode\n\nAs per subject.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* output.h (assemble_real): Take a scalar_float_mode.\n\t* config/arm/arm.c (arm_assemble_integer): Update accordingly.\n\t* config/arm/arm.md (consttable_4): Likewise.\n\t(consttable_8): Likewise.\n\t(consttable_16): Likewise.\n\t* config/mips/mips.md (consttable_float): Likewise.\n\t* config/s390/s390.c (s390_output_pool_entry): Likewise.\n\t* varasm.c (assemble_real): Take a scalar_float_mode.\n\t(output_constant_pool_2): Update accordingly.\n\t(output_constant): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251461", "tree": {"sha": "56abf1fb936c04bf622ce3b3dd28fb1f63fc5c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56abf1fb936c04bf622ce3b3dd28fb1f63fc5c1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc0461ae3f649ce1862e907c4b4d401fd10cea76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc0461ae3f649ce1862e907c4b4d401fd10cea76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc0461ae3f649ce1862e907c4b4d401fd10cea76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc0461ae3f649ce1862e907c4b4d401fd10cea76/comments", "author": null, "committer": null, "parents": [{"sha": "b5f2d801b10c25ef32a80c03d6df8668920a593c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f2d801b10c25ef32a80c03d6df8668920a593c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5f2d801b10c25ef32a80c03d6df8668920a593c"}], "stats": {"total": 78, "additions": 43, "deletions": 35}, "files": [{"sha": "5241db9ffbade878839488e3e460cad336b12e26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc0461ae3f649ce1862e907c4b4d401fd10cea76", "patch": "@@ -1,3 +1,18 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* output.h (assemble_real): Take a scalar_float_mode.\n+\t* config/arm/arm.c (arm_assemble_integer): Update accordingly.\n+\t* config/arm/arm.md (consttable_4): Likewise.\n+\t(consttable_8): Likewise.\n+\t(consttable_16): Likewise.\n+\t* config/mips/mips.md (consttable_float): Likewise.\n+\t* config/s390/s390.c (s390_output_pool_entry): Likewise.\n+\t* varasm.c (assemble_real): Take a scalar_float_mode.\n+\t(output_constant_pool_2): Update accordingly.\n+\t(output_constant): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "3b16c7a2da71cd1e887939dce0820a0b345f486b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=fc0461ae3f649ce1862e907c4b4d401fd10cea76", "patch": "@@ -22667,8 +22667,9 @@ arm_assemble_integer (rtx x, unsigned int size, int aligned_p)\n         for (i = 0; i < units; i++)\n           {\n             rtx elt = CONST_VECTOR_ELT (x, i);\n-            assemble_real\n-              (*CONST_DOUBLE_REAL_VALUE (elt), GET_MODE_INNER (mode),\n+\t    assemble_real\n+\t      (*CONST_DOUBLE_REAL_VALUE (elt),\n+\t       as_a <scalar_float_mode> (GET_MODE_INNER (mode)),\n \t       i == 0 ? BIGGEST_ALIGNMENT : size * BITS_PER_UNIT);\n           }\n "}, {"sha": "242b65b6fdae0bb00ecbba2a10595ac42c7af62d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 16, "deletions": 27, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=fc0461ae3f649ce1862e907c4b4d401fd10cea76", "patch": "@@ -11232,13 +11232,11 @@\n   {\n     rtx x = operands[0];\n     making_const_table = TRUE;\n-    switch (GET_MODE_CLASS (GET_MODE (x)))\n+    scalar_float_mode float_mode;\n+    if (is_a <scalar_float_mode> (GET_MODE (x), &float_mode))\n+      assemble_real (*CONST_DOUBLE_REAL_VALUE (x), float_mode, BITS_PER_WORD);\n+    else\n       {\n-      case MODE_FLOAT:\n-\tassemble_real (*CONST_DOUBLE_REAL_VALUE (x), GET_MODE (x),\n-\t\t       BITS_PER_WORD);\n-\tbreak;\n-      default:\n \t/* XXX: Sometimes gcc does something really dumb and ends up with\n \t   a HIGH in a constant pool entry, usually because it's trying to\n \t   load into a VFP register.  We know this will always be used in\n@@ -11248,7 +11246,6 @@\n \t  x = XEXP (x, 0);\n         assemble_integer (x, 4, BITS_PER_WORD, 1);\n \tmark_symbol_refs_as_used (x);\n-        break;\n       }\n     return \\\"\\\";\n   }\"\n@@ -11262,16 +11259,12 @@\n   \"*\n   {\n     making_const_table = TRUE;\n-    switch (GET_MODE_CLASS (GET_MODE (operands[0])))\n-      {\n-      case MODE_FLOAT:\n-\tassemble_real (*CONST_DOUBLE_REAL_VALUE (operands[0]),\n-\t\t       GET_MODE (operands[0]), BITS_PER_WORD);\n-\tbreak;\n-      default:\n-        assemble_integer (operands[0], 8, BITS_PER_WORD, 1);\n-        break;\n-      }\n+    scalar_float_mode float_mode;\n+    if (is_a <scalar_float_mode> (GET_MODE (operands[0]), &float_mode))\n+      assemble_real (*CONST_DOUBLE_REAL_VALUE (operands[0]),\n+\t\t     float_mode, BITS_PER_WORD);\n+    else\n+      assemble_integer (operands[0], 8, BITS_PER_WORD, 1);\n     return \\\"\\\";\n   }\"\n   [(set_attr \"length\" \"8\")\n@@ -11284,16 +11277,12 @@\n   \"*\n   {\n     making_const_table = TRUE;\n-    switch (GET_MODE_CLASS (GET_MODE (operands[0])))\n-      {\n-      case MODE_FLOAT:\n-\tassemble_real (*CONST_DOUBLE_REAL_VALUE (operands[0]),\n-\t\t       GET_MODE (operands[0]), BITS_PER_WORD);\n-\tbreak;\n-      default:\n-        assemble_integer (operands[0], 16, BITS_PER_WORD, 1);\n-        break;\n-      }\n+    scalar_float_mode float_mode;\n+    if (is_a <scalar_float_mode> (GET_MODE (operands[0]), &float_mode))\n+      assemble_real (*CONST_DOUBLE_REAL_VALUE (operands[0]),\n+\t\t     float_mode, BITS_PER_WORD);\n+    else\n+      assemble_integer (operands[0], 16, BITS_PER_WORD, 1);\n     return \\\"\\\";\n   }\"\n   [(set_attr \"length\" \"16\")"}, {"sha": "aae78fa5a0e7a6d4033d68205399fc453b9fcec3", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=fc0461ae3f649ce1862e907c4b4d401fd10cea76", "patch": "@@ -7363,7 +7363,7 @@\n {\n   gcc_assert (GET_CODE (operands[0]) == CONST_DOUBLE);\n   assemble_real (*CONST_DOUBLE_REAL_VALUE (operands[0]),\n-\t\t GET_MODE (operands[0]),\n+\t\t as_a <scalar_float_mode> (GET_MODE (operands[0])),\n \t\t GET_MODE_BITSIZE (GET_MODE (operands[0])));\n   return \"\";\n }"}, {"sha": "cb0ffb8210beadf0e33978d9aa9d9e64e4e77b68", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=fc0461ae3f649ce1862e907c4b4d401fd10cea76", "patch": "@@ -9498,7 +9498,8 @@ s390_output_pool_entry (rtx exp, machine_mode mode, unsigned int align)\n     case MODE_DECIMAL_FLOAT:\n       gcc_assert (GET_CODE (exp) == CONST_DOUBLE);\n \n-      assemble_real (*CONST_DOUBLE_REAL_VALUE (exp), mode, align);\n+      assemble_real (*CONST_DOUBLE_REAL_VALUE (exp),\n+\t\t     as_a <scalar_float_mode> (mode), align);\n       break;\n \n     case MODE_INT:"}, {"sha": "e2d55031a15d244fffaed27d8015063d043f4f32", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=fc0461ae3f649ce1862e907c4b4d401fd10cea76", "patch": "@@ -281,7 +281,7 @@ extern section *get_named_text_section (tree, const char *, const char *);\n /* Assemble the floating-point constant D into an object of size MODE.  ALIGN\n    is the alignment of the constant in bits.  If REVERSE is true, D is output\n    in reverse storage order.  */\n-extern void assemble_real (REAL_VALUE_TYPE, machine_mode, unsigned,\n+extern void assemble_real (REAL_VALUE_TYPE, scalar_float_mode, unsigned,\n \t\t\t   bool = false);\n \n /* Write the address of the entity given by SYMBOL to SEC.  */"}, {"sha": "21fee7fd15f01e8789069030efde73ba99de088e", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc0461ae3f649ce1862e907c4b4d401fd10cea76/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=fc0461ae3f649ce1862e907c4b4d401fd10cea76", "patch": "@@ -2807,7 +2807,7 @@ assemble_integer (rtx x, unsigned int size, unsigned int align, int force)\n    in reverse storage order.  */\n \n void\n-assemble_real (REAL_VALUE_TYPE d, machine_mode mode, unsigned int align,\n+assemble_real (REAL_VALUE_TYPE d, scalar_float_mode mode, unsigned int align,\n \t       bool reverse)\n {\n   long data[4] = {0, 0, 0, 0};\n@@ -3877,7 +3877,8 @@ output_constant_pool_2 (machine_mode mode, rtx x, unsigned int align)\n     case MODE_DECIMAL_FLOAT:\n       {\n \tgcc_assert (CONST_DOUBLE_AS_FLOAT_P (x));\n-\tassemble_real (*CONST_DOUBLE_REAL_VALUE (x), mode, align, false);\n+\tassemble_real (*CONST_DOUBLE_REAL_VALUE (x),\n+\t\t       as_a <scalar_float_mode> (mode), align, false);\n \tbreak;\n       }\n \n@@ -4859,7 +4860,8 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align,\n       if (TREE_CODE (exp) != REAL_CST)\n \terror (\"initializer for floating value is not a floating constant\");\n       else\n-\tassemble_real (TREE_REAL_CST (exp), TYPE_MODE (TREE_TYPE (exp)),\n+\tassemble_real (TREE_REAL_CST (exp),\n+\t\t       SCALAR_FLOAT_TYPE_MODE (TREE_TYPE (exp)),\n \t\t       align, reverse);\n       break;\n "}]}