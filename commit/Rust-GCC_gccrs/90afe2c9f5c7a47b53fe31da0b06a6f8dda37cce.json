{"sha": "90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBhZmUyYzlmNWM3YTQ3YjUzZmUzMWRhMGIwNmE2ZjhkZGEzN2NjZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-05-14T02:33:00Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-05-14T02:33:00Z"}, "message": "tree.def (documentation): Remove mention of class 'b'.\n\n\t* tree.def (documentation): Remove mention of class 'b'.\n\t(BLOCK): Now in class 'x'.\n\t* c-common.c (verify_tree): Remove case 'b'.\n\t* c-typeck.c (same_translation_unit_p): Change 'b' to 'x'.\n\t* calls.c (calls_function_1): Control cannot get past the switch\n\twhen exp is a BLOCK.\n\t* print-tree.c (print_node): Move code for class 'b' to the class\n\t'c'/'x' switch, as case BLOCK.\n\t* tree.c (tree_size, make_node_stat, tree_node_structure): Likewise.\n\t(unsafe_for_reeval, substitute_placeholder_in_expr)\n\t(stabilize_reference_1): Remove case 'b'.\n\t* tree-browser.c (browse_tree): Change all tests for TREE_CODE_CLASS\n\tof something being 'b' to tests for TREE_CODE of something being\n\tBLOCK.\n\t* tree-ssa-operands.c (get_expr_operands): Likewise.\nada:\n\t* trans.c (gnat_stabilize_reference_1): Remove case 'b'.\n\nFrom-SVN: r81831", "tree": {"sha": "1d87ff9be659423d0f5eae77a93d234f7f649aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d87ff9be659423d0f5eae77a93d234f7f649aa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/comments", "author": null, "committer": null, "parents": [{"sha": "eadf906f463167f90f23bed5d3bb56026a4bfc33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eadf906f463167f90f23bed5d3bb56026a4bfc33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eadf906f463167f90f23bed5d3bb56026a4bfc33"}], "stats": {"total": 138, "additions": 76, "deletions": 62}, "files": [{"sha": "ec71bb6eb7101dc8d3393fcb4168f400962fd97a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "patch": "@@ -1,3 +1,21 @@\n+2004-05-13  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* tree.def (documentation): Remove mention of class 'b'.\n+\t(BLOCK): Now in class 'x'.\n+\t* c-common.c (verify_tree): Remove case 'b'.\n+\t* c-typeck.c (same_translation_unit_p): Change 'b' to 'x'.\n+\t* calls.c (calls_function_1): Control cannot get past the switch\n+\twhen exp is a BLOCK.\n+\t* print-tree.c (print_node): Move code for class 'b' to the class\n+\t'c'/'x' switch, as case BLOCK.\n+\t* tree.c (tree_size, make_node_stat, tree_node_structure): Likewise.\n+\t(unsafe_for_reeval, substitute_placeholder_in_expr)\n+\t(stabilize_reference_1): Remove case 'b'.\n+\t* tree-browser.c (browse_tree): Change all tests for TREE_CODE_CLASS\n+\tof something being 'b' to tests for TREE_CODE of something being\n+\tBLOCK.\n+\t* tree-ssa-operands.c (get_expr_operands): Likewise.\n+\n 2004-05-13  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-gimple.c: Rename from tree-simple.c.\n@@ -861,7 +879,7 @@\n \t* simplify-rtx.c (simplify_rtx): Do not handle\n \tCONSTANT_P_RTX.\n \t* stmt.c (parse_output_constraint): Don't warn for read-write\n-        memory operand.\n+\tmemory operand.\n \t(tail_recursion_args): Use types_compatible_p langhook.\n \t(force_label_rtx): Don't look at inline_function_decl.\n \t(label_rtx): Set LABEL_PRESERVE_P appropriately.\n@@ -1219,17 +1237,17 @@\n 2004-05-12  Paolo Bonzini  <bonzini@gnu.org>\n \n \tReplace several arrays with a struct of arrays.\n-        * combine.c (struct reg_stat): New.\n-        (init_reg_last_arrays): Renamed to...\n-        (init_reg_last): ...this.  Callers adjusted.\n-        (reg_stat): New.\n-        (combine_instructions): Allocate it and use it.\n-        (reg_last_death, reg_last_set, reg_last_set_value,\n-        reg_last_set_label, reg_last_set_table_tick,\n-        reg_last_set_invalid, reg_nonzero_bits, reg_sign_bit_copies,\n-        reg_last_set_mode, reg_last_set_nonzero_bits,\n-        reg_last_set_sign_bit_copies): Replace throughout\n-        with items of reg_stat.\n+\t* combine.c (struct reg_stat): New.\n+\t(init_reg_last_arrays): Renamed to...\n+\t(init_reg_last): ...this.  Callers adjusted.\n+\t(reg_stat): New.\n+\t(combine_instructions): Allocate it and use it.\n+\t(reg_last_death, reg_last_set, reg_last_set_value,\n+\treg_last_set_label, reg_last_set_table_tick,\n+\treg_last_set_invalid, reg_nonzero_bits, reg_sign_bit_copies,\n+\treg_last_set_mode, reg_last_set_nonzero_bits,\n+\treg_last_set_sign_bit_copies): Replace throughout\n+\twith items of reg_stat.\n \n 2004-05-11  Kaz Kojima  <kkojima@gcc.gnu.org>\n "}, {"sha": "4ae1cfda6e76d27168c68042ef883a9cbeca5fde", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "patch": "@@ -1,3 +1,7 @@\n+2004-05-13  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* trans.c (gnat_stabilize_reference_1): Remove case 'b'.\n+\n 2004-05-13  Diego Novillo  <dnovillo@redhat.com>\n \n \tMerge from tree-ssa-20020619-branch.\n@@ -292,7 +296,7 @@\n \n \t* cstand.adb (Create_Standard): Initialize Stand.Boolean_Literals.\n \n-\t* exp_attr.adb, exp_ch5.adb, exp_ch9.adb, exp_disp.adb, \n+\t* exp_attr.adb, exp_ch5.adb, exp_ch9.adb, exp_disp.adb,\n \texp_fixd.adb, sem_attr.adb, sem_dist.adb, sem_util.adb: Use\n \tStand.Boolean_Literals to produce references to entities\n \tStandard_False and Standard_True from compile-time computed boolean\n@@ -584,9 +588,9 @@\n \n 2004-04-23  Laurent GUERBY <laurent@guerby.net>\n \n-\t* Makefile.in: Remove RANLIB_TEST, use -$(RANLIB) including after \n+\t* Makefile.in: Remove RANLIB_TEST, use -$(RANLIB) including after\n \tinstall.\n-\t\n+\n 2004-04-23  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* Make-lang.in (GNATBIND_OBJS): Add s-addope.o.\n@@ -643,8 +647,8 @@\n \t* Make-lang.in: Add entry for s-addope.o to GNAT1 objects\n \t* s-addope.ads, s-addope.adb: New files.\n \n-\t* s-carsi8.adb, s-carun8.adb, s-casi16.adb, s-casi32.adb, \n-\ts-casi64.adb, s-caun16.adb, s-caun32.adb, s-caun64.adb, \n+\t* s-carsi8.adb, s-carun8.adb, s-casi16.adb, s-casi32.adb,\n+\ts-casi64.adb, s-caun16.adb, s-caun32.adb, s-caun64.adb,\n \ts-finimp.adb, s-geveop.adb, s-stoele.adb: Modifications to allow\n \tSystem.Address to be non-private and signed.\n \n@@ -655,7 +659,7 @@\n 2004-04-23  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* trans.c (tree_transform, build_unit_elab): Don't call getdecls.\n-        (tree_transform, case N_If_Statement): Remove non-determinism.\n+\t(tree_transform, case N_If_Statement): Remove non-determinism.\n \n \t* utils.c (begin_subprog_body): Just set DECL_CONTEXT in PARM_DECL.\n \n@@ -991,7 +995,7 @@\n \n \t* sem_util.ads, sem_util.adb: (Has_Declarations): New subprogram\n \n-\t* sinfo.ads, sinfo.adb: \n+\t* sinfo.ads, sinfo.adb:\n \tNew field Access_To_Subprogram_Definition in Access_Definition nodes\n \n \t* sem_ch6.adb (Process_Formals): Move here the code that creates and\n@@ -1147,7 +1151,7 @@\n \n \tPR ada/14988 (partial)\n \t* impunit.adb: Fix typo.\n-\t\n+\n 2004-04-14  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* Make-lang.in: Remove obsolete rts-none, rts-cert, install-rts-none,\n@@ -1226,7 +1230,7 @@\n \tduplication between normal entities and those declared as renamings.\n \tNo functional change.\n \n-\t* s-fileio.ads (Form): Remove pragma Inline, as we cannot currently\t\n+\t* s-fileio.ads (Form): Remove pragma Inline, as we cannot currently\n \tinline functions returning an unconstrained result.\n \n 2004-04-08  Eric Botcazou  <ebotcazou@act-europe.fr>\n@@ -1839,9 +1843,9 @@\n \n 2004-03-19  Laurent Guerby <laurent@guerby.net>\n \n-\t* sem_prag.adb (Suppress_Unsuppress_Echeck): use loop instead of \n+\t* sem_prag.adb (Suppress_Unsuppress_Echeck): use loop instead of\n \taggregate, allows bootstrap from 3.3 on powerpc-darwin.\n-\t\n+\n 2004-03-18  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* ada-tree.h (TYPE_LEFT_JUSTIFIED_MODULAR_P): Add checking.\n@@ -2150,7 +2154,7 @@\n \n \t* a-tags.adb, a-tags.ads, s-finimp.adb, s-finroo.ads,\n \ti-cpoint.ads, i-cpoint.adb, i-cstrin.adb, i-cstrin.ads,\n-\t5iosinte.ads, 5sosinte.ads, 5staspri.ads, 5itaprop.adb, \n+\t5iosinte.ads, 5sosinte.ads, 5staspri.ads, 5itaprop.adb,\n \t5staprop.adb, 5wtaprop.adb, s-tataat.ads, s-tataat.adb: Move\n \tunchecked conversion to spec to avoid warnings.\n \n@@ -2668,7 +2672,7 @@\n \n \tPR ada/6637, PR ada/5911\n \tMerge with libada-branch:\n-        * config-lang.in: Build libada only when ada is built.\n+\t* config-lang.in: Build libada only when ada is built.\n \n 2004-02-09  Ed Schonberg  <schonberg@gnat.com>\n \n@@ -2819,7 +2823,7 @@\n \n 2004-02-04  Ed Schonberg  <schonberg@gnat.com>\n \n-\t* sem_prag.adb: \n+\t* sem_prag.adb:\n \t(Analyze_Pragma, case Warnings): In an inlined body, as in an instance\n \t body, an identifier may be wrapped in an unchecked conversion.\n \n@@ -3020,7 +3024,7 @@\n \n 2004-01-30  Kelley Cook  <kcook@gcc.gnu.org>\n \n-\t* Make-lang.in (doc/gnat_ug_unx.dvi): Use $(abs_docdir). \n+\t* Make-lang.in (doc/gnat_ug_unx.dvi): Use $(abs_docdir).\n \t(doc/gnat_ug_vms.dvi, doc/gnat_ug_unx.dvi): Likewise.\n \t(doc/gnat_ug_unx.dvi, doc/gnat-style.dvi): Likewise.\n \n@@ -3039,7 +3043,7 @@\n \t(Wakeup): Likewise.\n \t(Exit_Task): Use Result.\n \t(Check_No_Locks): Mark Self_ID unreferenced.\n-\t\n+\n \t* 5gtasinf.adb (New_Sproc): Make Attr constant.\n \t(Bound_Thread_Attributes): Make Sproc constant.\n \t(New_Bound_Thread_Attributes): Likewise."}, {"sha": "117a95360dccf9da6029ed3bbf709e36f87fc7ff", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "patch": "@@ -5431,7 +5431,6 @@ gnat_stabilize_reference_1 (tree e, int force)\n     case 'x':\n     case 't':\n     case 'd':\n-    case 'b':\n     case '<':\n     case 's':\n     case 'e':"}, {"sha": "11b4b875d2c2a99086b406853658c9a3f09e2138", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "patch": "@@ -1692,7 +1692,6 @@ verify_tree (tree x, struct tlist **pbefore_sp, struct tlist **pno_sp,\n     case 'r':\n     case '<':\n     case '2':\n-    case 'b':\n     case 'e':\n     case 's':\n     case 'x':"}, {"sha": "6305cc4fb0abcf0aeb16af92c10022f37f4f5b89", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "patch": "@@ -640,7 +640,7 @@ same_translation_unit_p (tree t1, tree t2)\n       {\n       case 'd': t1 = DECL_CONTEXT (t1); break;\n       case 't': t1 = TYPE_CONTEXT (t1); break;\n-      case 'b': t1 = BLOCK_SUPERCONTEXT (t1); break;\n+      case 'x': t1 = BLOCK_SUPERCONTEXT (t1); break;  /* assume block */\n       default: abort ();\n       }\n \n@@ -649,7 +649,7 @@ same_translation_unit_p (tree t1, tree t2)\n       {\n       case 'd': t2 = DECL_CONTEXT (t2); break;\n       case 't': t2 = TYPE_CONTEXT (t2); break;\n-      case 'b': t2 = BLOCK_SUPERCONTEXT (t2); break;\n+      case 'x': t2 = BLOCK_SUPERCONTEXT (t2); break;  /* assume block */\n       default: abort ();\n       }\n "}, {"sha": "35021ea137fae1cbd26ced7b9748f2b64925217a", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "patch": "@@ -259,8 +259,9 @@ calls_function_1 (tree exp, int which)\n       break;\n     }\n \n-  /* Only expressions and blocks can contain calls.  */\n-  if (! IS_EXPR_CODE_CLASS (class) && class != 'b')\n+  /* Only expressions and blocks can contain calls.\n+     Blocks were handled above.  */\n+  if (! IS_EXPR_CODE_CLASS (class))\n     return 0;\n \n   for (i = 0; i < length; i++)"}, {"sha": "1d8ca9618317360479baac0eb18a5be3bf1e72a1", "filename": "gcc/print-tree.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "patch": "@@ -569,15 +569,6 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n       print_node_brief (file, \"chain\", TREE_CHAIN (node), indent + 4);\n       break;\n \n-    case 'b':\n-      print_node (file, \"vars\", BLOCK_VARS (node), indent + 4);\n-      print_node (file, \"supercontext\", BLOCK_SUPERCONTEXT (node), indent + 4);\n-      print_node (file, \"subblocks\", BLOCK_SUBBLOCKS (node), indent + 4);\n-      print_node (file, \"chain\", BLOCK_CHAIN (node), indent + 4);\n-      print_node (file, \"abstract_origin\",\n-\t\t  BLOCK_ABSTRACT_ORIGIN (node), indent + 4);\n-      break;\n-\n     case 'e':\n     case '<':\n     case '1':\n@@ -733,6 +724,16 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t      }\n \t  break;\n \n+\tcase BLOCK:\n+\t  print_node (file, \"vars\", BLOCK_VARS (node), indent + 4);\n+\t  print_node (file, \"supercontext\", BLOCK_SUPERCONTEXT (node),\n+\t\t      indent + 4);\n+\t  print_node (file, \"subblocks\", BLOCK_SUBBLOCKS (node), indent + 4);\n+\t  print_node (file, \"chain\", BLOCK_CHAIN (node), indent + 4);\n+\t  print_node (file, \"abstract_origin\",\n+\t\t      BLOCK_ABSTRACT_ORIGIN (node), indent + 4);\n+\t  break;\n+\n \tdefault:\n \t  if (TREE_CODE_CLASS (TREE_CODE (node)) == 'x')\n \t    lang_hooks.print_xnode (file, node, indent);"}, {"sha": "891c761e25e82fef8ce4500450f195cfbf1c38c4", "filename": "gcc/tree-browser.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Ftree-browser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Ftree-browser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-browser.c?ref=90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "patch": "@@ -239,21 +239,21 @@ browse_tree (tree begin)\n \t  break;\n \n \tcase TB_SUBBLOCKS:\n-\t  if (head && TREE_CODE_CLASS (TREE_CODE (head)) == 'b')\n+\t  if (head && TREE_CODE (head) == BLOCK)\n \t    TB_SET_HEAD (BLOCK_SUBBLOCKS (head));\n \t  else\n \t    TB_WF;\n \t  break;\n \n \tcase TB_SUPERCONTEXT:\n-\t  if (head && TREE_CODE_CLASS (TREE_CODE (head)) == 'b')\n+\t  if (head && TREE_CODE (head) == BLOCK)\n \t    TB_SET_HEAD (BLOCK_SUPERCONTEXT (head));\n \t  else\n \t    TB_WF;\n \t  break;\n \n \tcase TB_VARS:\n-\t  if (head && TREE_CODE_CLASS (TREE_CODE (head)) == 'b')\n+\t  if (head && TREE_CODE (head) == BLOCK)\n \t    TB_SET_HEAD (BLOCK_VARS (head));\n \t  else if (head && TREE_CODE (head) == BIND_EXPR)\n \t    TB_SET_HEAD (TREE_OPERAND (head, 0));\n@@ -361,7 +361,7 @@ browse_tree (tree begin)\n \tcase TB_ABSTRACT_ORIGIN:\n \t  if (head && TREE_CODE_CLASS (TREE_CODE (head)) == 'd')\n \t    TB_SET_HEAD (DECL_ABSTRACT_ORIGIN (head));\n-\t  else if (head && TREE_CODE_CLASS (TREE_CODE (head)) == 'b')\n+\t  else if (head && TREE_CODE (head) == BLOCK)\n \t    TB_SET_HEAD (BLOCK_ABSTRACT_ORIGIN (head));\n \t  else\n \t    TB_WF;\n@@ -584,7 +584,7 @@ browse_tree (tree begin)\n \n \tcase TB_CHAIN:\n \t  /* Don't go further if it's the last node in this chain.  */\n-\t  if (head && TREE_CODE_CLASS (TREE_CODE (head)) == 'b')\n+\t  if (head && TREE_CODE (head) == BLOCK)\n \t    TB_SET_HEAD (BLOCK_CHAIN (head));\n \t  else if (head && TREE_CHAIN (head))\n \t    TB_SET_HEAD (TREE_CHAIN (head));"}, {"sha": "de5b16d1fd4d92a261dcd472305600f188f97c79", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "patch": "@@ -824,7 +824,7 @@ get_expr_operands (tree stmt, tree *expr_p, int flags, voperands_t prev_vops)\n   /* Expressions that make no memory references.  */\n   if (class == 'c'\n       || class == 't'\n-      || class == 'b'\n+      || code == BLOCK\n       || code == FUNCTION_DECL\n       || code == EXC_PTR_EXPR\n       || code == FILTER_EXPR"}, {"sha": "791cc221349f73c3dabc7ac1251c8d08a3cc3881", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "patch": "@@ -155,9 +155,6 @@ tree_size (tree node)\n     case 't':  /* a type node */\n       return sizeof (struct tree_type);\n \n-    case 'b':  /* a lexical block node */\n-      return sizeof (struct tree_block);\n-\n     case 'r':  /* a reference */\n     case 'e':  /* an expression */\n     case 's':  /* an expression with side effects */\n@@ -206,6 +203,7 @@ tree_size (tree node)\n \tcase EEXIT_NODE: \treturn sizeof (struct tree_eref_common);\n \n \tcase STATEMENT_LIST:\treturn sizeof (struct tree_statement_list);\n+\tcase BLOCK:\t\treturn sizeof (struct tree_block);\n \n \tdefault:\n \t  return lang_hooks.tree_size (code);\n@@ -252,10 +250,6 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n       kind = t_kind;\n       break;\n \n-    case 'b':  /* a lexical block */\n-      kind = b_kind;\n-      break;\n-\n     case 's':  /* an expression with side effects */\n       kind = s_kind;\n       break;\n@@ -284,6 +278,8 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n \tkind = phi_kind;\n       else if (code == SSA_NAME)\n \tkind = ssa_name_kind;\n+      else if (code == BLOCK)\n+\tkind = b_kind;\n       else\n \tkind = x_kind;\n       break;\n@@ -1494,7 +1490,6 @@ tree_node_structure (tree t)\n     {\n     case 'd':\treturn TS_DECL;\n     case 't':\treturn TS_TYPE;\n-    case 'b':\treturn TS_BLOCK;\n     case 'r': case '<': case '1': case '2': case 'e': case 's':\n       return TS_EXP;\n     default:  /* 'c' and 'x' */\n@@ -1521,6 +1516,7 @@ tree_node_structure (tree t)\n     case SSA_NAME:\t\treturn TS_SSA_NAME;\n     case PLACEHOLDER_EXPR:\treturn TS_COMMON;\n     case STATEMENT_LIST:\treturn TS_STATEMENT_LIST;\n+    case BLOCK:\t\t\treturn TS_BLOCK;\n \n     default:\n       abort ();\n@@ -1646,7 +1642,6 @@ unsafe_for_reeval (tree expr)\n     case 't':  /* a type node */\n     case 'x':  /* something random, like an identifier or an ERROR_MARK.  */\n     case 'd':  /* A decl node */\n-    case 'b':  /* A block node */\n       return 0;\n \n     case 'e':  /* an expression */\n@@ -2078,7 +2073,6 @@ substitute_placeholder_in_expr (tree exp, tree obj)\n       {\n       case 'c':\n       case 'd':\n-      case 'b':\n \treturn exp;\n \n       case 'x':\n@@ -2267,7 +2261,6 @@ stabilize_reference_1 (tree e)\n     case 'x':\n     case 't':\n     case 'd':\n-    case 'b':\n     case '<':\n     case 's':\n     case 'e':"}, {"sha": "213367b8dfd1221b970b99aa385cf29ece3af0ac", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=90afe2c9f5c7a47b53fe31da0b06a6f8dda37cce", "patch": "@@ -24,7 +24,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* The third argument can be:\n    'x' for an exceptional code (fits no category).\n    't' for a type object code.\n-   'b' for a lexical block.\n    'c' for codes for constants.\n    'd' for codes for declarations (also serving as variable refs).\n    'r' for codes for references to storage.\n@@ -86,7 +85,7 @@ DEFTREECODE (TREE_VEC, \"tree_vec\", 'x', 0)\n    instance of an inline function). \n    TREE_ASM_WRITTEN is nonzero if the block was actually referenced\n    in the generated assembly.  */\n-DEFTREECODE (BLOCK, \"block\", 'b', 0)\n+DEFTREECODE (BLOCK, \"block\", 'x', 0)\n \f\n /* Each data type is represented by a tree node whose code is one of\n    the following:  */"}]}