{"sha": "b308d872e6c73178dd4351a866932709d398313a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMwOGQ4NzJlNmM3MzE3OGRkNDM1MWE4NjY5MzI3MDlkMzk4MzEzYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-12-03T08:43:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-12-03T08:43:22Z"}, "message": "re PR tree-optimization/67800 (Missed vectorization opportunity on x86 (DOT_PROD_EXPR in non-reduction))\n\n2015-12-03  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/67800\n\tPR tree-optimization/68333\n\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Restore\n\trestriction to reduction contexts but allow SLP reductions as well.\n\t(vect_recog_sad_pattern): Likewise.\n\t(vect_recog_widen_sum_pattern): Likewise.\n\n\t* gcc.target/i386/vect-pr67800.c: New testcase.\n\nFrom-SVN: r231221", "tree": {"sha": "6a2ebe9bca470003f81fe49464a25e8c1e2835f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a2ebe9bca470003f81fe49464a25e8c1e2835f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b308d872e6c73178dd4351a866932709d398313a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b308d872e6c73178dd4351a866932709d398313a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b308d872e6c73178dd4351a866932709d398313a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b308d872e6c73178dd4351a866932709d398313a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8349b02428926171736d2db4e075566b98b1604c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8349b02428926171736d2db4e075566b98b1604c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8349b02428926171736d2db4e075566b98b1604c"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "7072624fa7a526415e4ec40d8e019bca2b4ac0a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b308d872e6c73178dd4351a866932709d398313a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b308d872e6c73178dd4351a866932709d398313a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b308d872e6c73178dd4351a866932709d398313a", "patch": "@@ -1,3 +1,12 @@\n+2015-12-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67800\n+\tPR tree-optimization/68333\n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Restore\n+\trestriction to reduction contexts but allow SLP reductions as well.\n+\t(vect_recog_sad_pattern): Likewise.\n+\t(vect_recog_widen_sum_pattern): Likewise.\n+\n 2015-12-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68639"}, {"sha": "074cdceb5259958de6fd8bce441d4a5ef932ae6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b308d872e6c73178dd4351a866932709d398313a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b308d872e6c73178dd4351a866932709d398313a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b308d872e6c73178dd4351a866932709d398313a", "patch": "@@ -1,3 +1,9 @@\n+2015-12-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67800\n+\tPR tree-optimization/68333\n+\t* gcc.target/i386/vect-pr67800.c: New testcase.\n+\n 2015-12-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68639"}, {"sha": "324510858ff10ec6b3bdde3f6d0d4269847def0a", "filename": "gcc/testsuite/gcc.target/i386/vect-pr67800.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b308d872e6c73178dd4351a866932709d398313a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-pr67800.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b308d872e6c73178dd4351a866932709d398313a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-pr67800.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-pr67800.c?ref=b308d872e6c73178dd4351a866932709d398313a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details\" } */\n+/* { dg-additional-options \"-msse4.2\" } */\n+\n+#define ubyte unsigned char\n+#define byte char\n+\n+#define SCALE 8\n+\n+#define R2Y (76)\n+#define G2Y (150)\n+#define B2Y (30)\n+#define R2I (127)\n+#define G2I (-59)\n+#define B2I (-68)\n+#define R2Q (51)\n+#define G2Q (-127)\n+#define B2Q (76)\n+\n+void\n+convert(ubyte *in, ubyte *out, unsigned n)\n+{\n+  ubyte r, g, b;\n+  ubyte y = 0;\n+  byte i, q;\n+\n+  while (--n) {\n+\t  r = *in++;\n+\t  g = *in++;\n+\t  b = *in++;\n+\n+      y = (ubyte)(((R2Y * r) + (G2Y * g) + (B2Y * b) + (1 << (SCALE - 1))) >> SCALE);\n+      i = (byte)(((R2I * r) + (G2I * g) + (B2I * b) + (1 << (SCALE - 1))) >> SCALE);\n+      q = (byte)(((R2Q * r) + (G2Q * g) + (B2Q * b) + (1 << (SCALE - 1))) >> SCALE);\n+\n+      *out++ = y;\n+\t  *out++ = i;\n+\t  *out++ = q;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" } } */"}, {"sha": "4b225fbb4ca94295c2211e02470ce58ba5cc4a26", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b308d872e6c73178dd4351a866932709d398313a/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b308d872e6c73178dd4351a866932709d398313a/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=b308d872e6c73178dd4351a866932709d398313a", "patch": "@@ -312,6 +312,9 @@ vect_recog_dot_prod_pattern (vec<gimple *> *stmts, tree *type_in,\n     {\n       gimple *def_stmt;\n \n+      if (STMT_VINFO_DEF_TYPE (stmt_vinfo) != vect_reduction_def\n+\t  && ! STMT_VINFO_GROUP_FIRST_ELEMENT (stmt_vinfo))\n+\treturn NULL;\n       oprnd0 = gimple_assign_rhs1 (last_stmt);\n       oprnd1 = gimple_assign_rhs2 (last_stmt);\n       if (!types_compatible_p (TREE_TYPE (oprnd0), type)\n@@ -531,6 +534,9 @@ vect_recog_sad_pattern (vec<gimple *> *stmts, tree *type_in,\n     {\n       gimple *def_stmt;\n \n+      if (STMT_VINFO_DEF_TYPE (stmt_vinfo) != vect_reduction_def\n+\t  && ! STMT_VINFO_GROUP_FIRST_ELEMENT (stmt_vinfo))\n+\treturn NULL;\n       plus_oprnd0 = gimple_assign_rhs1 (last_stmt);\n       plus_oprnd1 = gimple_assign_rhs2 (last_stmt);\n       if (!types_compatible_p (TREE_TYPE (plus_oprnd0), sum_type)\n@@ -1152,6 +1158,10 @@ vect_recog_widen_sum_pattern (vec<gimple *> *stmts, tree *type_in,\n   if (gimple_assign_rhs_code (last_stmt) != PLUS_EXPR)\n     return NULL;\n \n+  if (STMT_VINFO_DEF_TYPE (stmt_vinfo) != vect_reduction_def\n+      && ! STMT_VINFO_GROUP_FIRST_ELEMENT (stmt_vinfo))\n+    return NULL;\n+\n   oprnd0 = gimple_assign_rhs1 (last_stmt);\n   oprnd1 = gimple_assign_rhs2 (last_stmt);\n   if (!types_compatible_p (TREE_TYPE (oprnd0), type)"}]}