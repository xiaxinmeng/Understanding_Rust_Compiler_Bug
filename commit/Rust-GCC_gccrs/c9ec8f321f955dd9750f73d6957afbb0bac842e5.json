{"sha": "c9ec8f321f955dd9750f73d6957afbb0bac842e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzllYzhmMzIxZjk1NWRkOTc1MGY3M2Q2OTU3YWZiYjBiYWM4NDJlNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-05-12T18:42:45Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-05-12T18:42:45Z"}, "message": "Add per-function commentary.\n\nFrom-SVN: r42003", "tree": {"sha": "ce9974611e5f1cdf18d989728b95ed19cf47ca2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce9974611e5f1cdf18d989728b95ed19cf47ca2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9ec8f321f955dd9750f73d6957afbb0bac842e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ec8f321f955dd9750f73d6957afbb0bac842e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9ec8f321f955dd9750f73d6957afbb0bac842e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ec8f321f955dd9750f73d6957afbb0bac842e5/comments", "author": null, "committer": null, "parents": [{"sha": "a3eaca15d90a87cec6f1ba4d380679b69bf43423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3eaca15d90a87cec6f1ba4d380679b69bf43423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3eaca15d90a87cec6f1ba4d380679b69bf43423"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "f940342b03d2b9fe38e92d79f88c2ca1d8e273d5", "filename": "gcc/unwind-pe.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ec8f321f955dd9750f73d6957afbb0bac842e5/gcc%2Funwind-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ec8f321f955dd9750f73d6957afbb0bac842e5/gcc%2Funwind-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-pe.h?ref=c9ec8f321f955dd9750f73d6957afbb0bac842e5", "patch": "@@ -42,6 +42,11 @@\n #define DW_EH_PE_funcrel        0x40\n \n #define DW_EH_PE_indirect\t0x80\n+\f\n+\n+/* Given an encoding, return the number of bytes the format occupies.\n+   This is only defined for fixed-size encodings, and so does not \n+   include leb128.  */\n \n static unsigned int\n size_of_encoded_value (unsigned char encoding)\n@@ -63,6 +68,11 @@ size_of_encoded_value (unsigned char encoding)\n   abort ();\n }\n \n+/* Given an encoding and an _Unwind_Context, return the base to which\n+   the encoding is relative.  This base may then be passed to \n+   read_encoded_value_with_base for use when the _Unwind_Context is\n+   not available.  */\n+\n static _Unwind_Ptr\n base_of_encoded_value (unsigned char encoding, _Unwind_Context *context)\n {\n@@ -85,6 +95,10 @@ base_of_encoded_value (unsigned char encoding, _Unwind_Context *context)\n   abort ();\n }\n \n+/* Load an encoded value from memory at P.  The value is returned in VAL;\n+   The function returns P incremented past the value.  BASE is as given\n+   by base_of_encoded_value for this encoding in the appropriate context.  */\n+\n static const unsigned char *\n read_encoded_value_with_base (unsigned char encoding, _Unwind_Ptr base,\n \t\t\t      const unsigned char *p, _Unwind_Ptr *val)\n@@ -186,6 +200,9 @@ read_encoded_value_with_base (unsigned char encoding, _Unwind_Ptr base,\n   return p;\n }\n \n+/* Like read_encoded_value_with_base, but get the base from the context\n+   rather than providing it directly.  */\n+\n static inline const unsigned char *\n read_encoded_value (_Unwind_Context *context, unsigned char encoding,\n \t\t    const unsigned char *p, _Unwind_Ptr *val)\n@@ -195,12 +212,17 @@ read_encoded_value (_Unwind_Context *context, unsigned char encoding,\n \t\tp, val);\n }\n \n+/* Read an unsigned leb128 value from P, store the value in VAL, return\n+   P incremented past the value.  */\n+\n static inline const unsigned char *\n read_uleb128 (const unsigned char *p, _Unwind_Ptr *val)\n {\n   return read_encoded_value_with_base (DW_EH_PE_uleb128, 0, p, val);\n }\n \n+/* Similar, but read a signed leb128 value.  */\n+\n static inline const unsigned char *\n read_sleb128 (const unsigned char *p, _Unwind_Ptr *val)\n {"}]}