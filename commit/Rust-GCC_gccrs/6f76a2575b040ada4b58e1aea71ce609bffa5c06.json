{"sha": "6f76a2575b040ada4b58e1aea71ce609bffa5c06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY3NmEyNTc1YjA0MGFkYTRiNThlMWFlYTcxY2U2MDliZmZhNWMwNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T13:00:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T13:00:26Z"}, "message": "[multiple changes]\n\n2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_Call): Do not expand a call to an internal\n\tprotected operation if the subprogram has been eliminated.\n\n2010-06-17  Vincent Celier  <celier@adacore.com>\n\n\t* prj-nmsc.adb (Check_Library_Attributes): Allow the different\n\tdirectories associated with a library to be any directory when the\n\tlibrary project is externally built.\n\n2010-06-17  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Check): If switch -m is used, deallocate the memory that\n\tmay be allocated when computing the checksum.\n\nFrom-SVN: r160907", "tree": {"sha": "6a2625010c5e52e487613f192efd5e4aa354c359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a2625010c5e52e487613f192efd5e4aa354c359"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f76a2575b040ada4b58e1aea71ce609bffa5c06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f76a2575b040ada4b58e1aea71ce609bffa5c06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f76a2575b040ada4b58e1aea71ce609bffa5c06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f76a2575b040ada4b58e1aea71ce609bffa5c06/comments", "author": null, "committer": null, "parents": [{"sha": "cfab0c49a4c675d04dafd77b48069a482cf6701d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfab0c49a4c675d04dafd77b48069a482cf6701d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfab0c49a4c675d04dafd77b48069a482cf6701d"}], "stats": {"total": 188, "additions": 109, "deletions": 79}, "files": [{"sha": "c3c02be18c34e0d8c81f2c0ca1b5c79851b6ab69", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f76a2575b040ada4b58e1aea71ce609bffa5c06/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f76a2575b040ada4b58e1aea71ce609bffa5c06/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6f76a2575b040ada4b58e1aea71ce609bffa5c06", "patch": "@@ -1,3 +1,19 @@\n+2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call): Do not expand a call to an internal\n+\tprotected operation if the subprogram has been eliminated.\n+\n+2010-06-17  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-nmsc.adb (Check_Library_Attributes): Allow the different\n+\tdirectories associated with a library to be any directory when the\n+\tlibrary project is externally built.\n+\n+2010-06-17  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Check): If switch -m is used, deallocate the memory that\n+\tmay be allocated when computing the checksum.\n+\n 2010-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* g-socthi-mingw.adb (C_Recvmsg): Add 'use type' clause for C.size_t;"}, {"sha": "39e62d5d19a53cfc230b4af34dec50df56dc2ba6", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f76a2575b040ada4b58e1aea71ce609bffa5c06/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f76a2575b040ada4b58e1aea71ce609bffa5c06/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=6f76a2575b040ada4b58e1aea71ce609bffa5c06", "patch": "@@ -3095,12 +3095,14 @@ package body Exp_Ch6 is\n       --  In Ada 2005, this may be an indirect call to an access parameter that\n       --  is an access_to_subprogram. In that case the anonymous type has a\n       --  scope that is a protected operation, but the call is a regular one.\n+      --  In either case do not expand call if subprogram is eliminated.\n \n       Scop := Scope (Subp);\n \n       if Nkind (N) /= N_Entry_Call_Statement\n         and then Is_Protected_Type (Scop)\n         and then Ekind (Subp) /= E_Subprogram_Type\n+        and then not Is_Eliminated (Subp)\n       then\n          --  If the call is an internal one, it is rewritten as a call to the\n          --  corresponding unprotected subprogram."}, {"sha": "f9df7fc2c5056ce8ab177aa837e9e24d955d315f", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f76a2575b040ada4b58e1aea71ce609bffa5c06/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f76a2575b040ada4b58e1aea71ce609bffa5c06/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=6f76a2575b040ada4b58e1aea71ce609bffa5c06", "patch": "@@ -1785,6 +1785,13 @@ package body Make is\n \n          Modified_Source := Time_Stamp_Mismatch (ALI, Read_Only);\n \n+         --  To avoid using too much memory when switch -m is used, free the\n+         --  memory allocated for the source file when computing the checksum.\n+\n+         if Minimal_Recompilation then\n+            Sinput.P.Clear_Source_File_Table;\n+         end if;\n+\n          if Modified_Source /= No_File then\n             ALI := No_ALI_Id;\n "}, {"sha": "ea3ae29e707d8ca91e55d6f8f9263cc52c8ac66d", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 84, "deletions": 79, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f76a2575b040ada4b58e1aea71ce609bffa5c06/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f76a2575b040ada4b58e1aea71ce609bffa5c06/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=6f76a2575b040ada4b58e1aea71ce609bffa5c06", "patch": "@@ -3631,99 +3631,103 @@ package body Prj.Nmsc is\n                   \"library directory { does not exist\",\n                   Lib_Dir.Location, Project);\n \n+            elsif not Project.Externally_Built then\n+\n                --  The library directory cannot be the same as the Object\n                --  directory.\n \n-            elsif Project.Library_Dir.Name = Project.Object_Directory.Name then\n-               Error_Msg\n-                 (Data.Flags,\n-                  \"library directory cannot be the same \" &\n-                  \"as object directory\",\n-                  Lib_Dir.Location, Project);\n-               Project.Library_Dir := No_Path_Information;\n-\n-            else\n-               declare\n-                  OK       : Boolean := True;\n-                  Dirs_Id  : String_List_Id;\n-                  Dir_Elem : String_Element;\n-                  Pid      : Project_List;\n-\n-               begin\n-                  --  The library directory cannot be the same as a source\n-                  --  directory of the current project.\n-\n-                  Dirs_Id := Project.Source_Dirs;\n-                  while Dirs_Id /= Nil_String loop\n-                     Dir_Elem := Data.Tree.String_Elements.Table (Dirs_Id);\n-                     Dirs_Id  := Dir_Elem.Next;\n-\n-                     if Project.Library_Dir.Name =\n-                       Path_Name_Type (Dir_Elem.Value)\n-                     then\n-                        Err_Vars.Error_Msg_File_1 :=\n-                          File_Name_Type (Dir_Elem.Value);\n-                        Error_Msg\n-                          (Data.Flags,\n-                           \"library directory cannot be the same \" &\n-                           \"as source directory {\",\n-                           Lib_Dir.Location, Project);\n-                        OK := False;\n-                        exit;\n-                     end if;\n-                  end loop;\n+               if Project.Library_Dir.Name = Project.Object_Directory.Name then\n+                  Error_Msg\n+                    (Data.Flags,\n+                     \"library directory cannot be the same \" &\n+                     \"as object directory\",\n+                     Lib_Dir.Location, Project);\n+                  Project.Library_Dir := No_Path_Information;\n \n-                  if OK then\n+               else\n+                  declare\n+                     OK       : Boolean := True;\n+                     Dirs_Id  : String_List_Id;\n+                     Dir_Elem : String_Element;\n+                     Pid      : Project_List;\n \n+                  begin\n                      --  The library directory cannot be the same as a source\n-                     --  directory of another project either.\n+                     --  directory of the current project.\n \n-                     Pid := Data.Tree.Projects;\n-                     Project_Loop : loop\n-                        exit Project_Loop when Pid = null;\n+                     Dirs_Id := Project.Source_Dirs;\n+                     while Dirs_Id /= Nil_String loop\n+                        Dir_Elem := Data.Tree.String_Elements.Table (Dirs_Id);\n+                        Dirs_Id  := Dir_Elem.Next;\n+\n+                        if Project.Library_Dir.Name =\n+                          Path_Name_Type (Dir_Elem.Value)\n+                        then\n+                           Err_Vars.Error_Msg_File_1 :=\n+                             File_Name_Type (Dir_Elem.Value);\n+                           Error_Msg\n+                             (Data.Flags,\n+                              \"library directory cannot be the same \" &\n+                              \"as source directory {\",\n+                              Lib_Dir.Location, Project);\n+                           OK := False;\n+                           exit;\n+                        end if;\n+                     end loop;\n \n-                        if Pid.Project /= Project then\n-                           Dirs_Id := Pid.Project.Source_Dirs;\n+                     if OK then\n \n-                           Dir_Loop : while Dirs_Id /= Nil_String loop\n-                              Dir_Elem :=\n-                                Data.Tree.String_Elements.Table (Dirs_Id);\n-                              Dirs_Id  := Dir_Elem.Next;\n+                        --  The library directory cannot be the same as a\n+                        --  source directory of another project either.\n \n-                              if Project.Library_Dir.Name =\n-                                Path_Name_Type (Dir_Elem.Value)\n-                              then\n-                                 Err_Vars.Error_Msg_File_1 :=\n-                                   File_Name_Type (Dir_Elem.Value);\n-                                 Err_Vars.Error_Msg_Name_1 := Pid.Project.Name;\n+                        Pid := Data.Tree.Projects;\n+                        Project_Loop : loop\n+                           exit Project_Loop when Pid = null;\n \n-                                 Error_Msg\n-                                   (Data.Flags,\n-                                    \"library directory cannot be the same \" &\n-                                    \"as source directory { of project %%\",\n-                                    Lib_Dir.Location, Project);\n-                                 OK := False;\n-                                 exit Project_Loop;\n-                              end if;\n-                           end loop Dir_Loop;\n-                        end if;\n+                           if Pid.Project /= Project then\n+                              Dirs_Id := Pid.Project.Source_Dirs;\n+\n+                              Dir_Loop : while Dirs_Id /= Nil_String loop\n+                                 Dir_Elem :=\n+                                   Data.Tree.String_Elements.Table (Dirs_Id);\n+                                 Dirs_Id  := Dir_Elem.Next;\n+\n+                                 if Project.Library_Dir.Name =\n+                                   Path_Name_Type (Dir_Elem.Value)\n+                                 then\n+                                    Err_Vars.Error_Msg_File_1 :=\n+                                      File_Name_Type (Dir_Elem.Value);\n+                                    Err_Vars.Error_Msg_Name_1 :=\n+                                      Pid.Project.Name;\n+\n+                                    Error_Msg\n+                                      (Data.Flags,\n+                                       \"library directory cannot be the same\" &\n+                                       \" as source directory { of project %%\",\n+                                       Lib_Dir.Location, Project);\n+                                    OK := False;\n+                                    exit Project_Loop;\n+                                 end if;\n+                              end loop Dir_Loop;\n+                           end if;\n \n-                        Pid := Pid.Next;\n-                     end loop Project_Loop;\n-                  end if;\n+                           Pid := Pid.Next;\n+                        end loop Project_Loop;\n+                     end if;\n \n-                  if not OK then\n-                     Project.Library_Dir := No_Path_Information;\n+                     if not OK then\n+                        Project.Library_Dir := No_Path_Information;\n \n-                  elsif Current_Verbosity = High then\n+                     elsif Current_Verbosity = High then\n \n-                     --  Display the Library directory in high verbosity\n+                        --  Display the Library directory in high verbosity\n \n-                     Write_Attr\n-                       (\"Library directory\",\n-                        Get_Name_String (Project.Library_Dir.Display_Name));\n-                  end if;\n-               end;\n+                        Write_Attr\n+                          (\"Library directory\",\n+                           Get_Name_String (Project.Library_Dir.Display_Name));\n+                     end if;\n+                  end;\n+               end if;\n             end if;\n          end if;\n \n@@ -3811,8 +3815,9 @@ package body Prj.Nmsc is\n                      Lib_ALI_Dir.Location, Project);\n                end if;\n \n-               if Project.Library_ALI_Dir /= Project.Library_Dir then\n-\n+               if (not Project.Externally_Built) and then\n+                  Project.Library_ALI_Dir /= Project.Library_Dir\n+               then\n                   --  The library ALI directory cannot be the same as the\n                   --  Object directory.\n "}]}