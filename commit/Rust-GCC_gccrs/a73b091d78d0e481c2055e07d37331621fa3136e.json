{"sha": "a73b091d78d0e481c2055e07d37331621fa3136e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTczYjA5MWQ3OGQwZTQ4MWMyMDU1ZTA3ZDM3MzMxNjIxZmEzMTM2ZQ==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2004-09-11T01:49:40Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2004-09-11T01:49:40Z"}, "message": "Add CONST1_RTX (vector mode) support.\n\n* emit-rtl.c (gen_const_vector): Renamed from gen_const_vector_0.\nAdd integer argument named constant.  Use const_tiny_rtx instead of\nCONST0_RTX.\n(gen_rtx_CONST_VECTOR): Rewrite to handle checks for both CONST0_RTX\nand CONST1_RTX.\n(init_emit_once): Fix users of gen_const_vector.  Set CONST1_RTX for\nvector types.\n* expr.c (const_vector_from_tree): Call gen_rtx_CONST_VECTOR instead\nof gen_rtx_raw_CONST_VECTOR.\n\nFrom-SVN: r87337", "tree": {"sha": "5f26c8b021c77fc1c736d8455c21494156de0131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f26c8b021c77fc1c736d8455c21494156de0131"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a73b091d78d0e481c2055e07d37331621fa3136e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73b091d78d0e481c2055e07d37331621fa3136e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a73b091d78d0e481c2055e07d37331621fa3136e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a73b091d78d0e481c2055e07d37331621fa3136e/comments", "author": null, "committer": null, "parents": [{"sha": "769da81848f28f866058a4913f68cdaea431e7e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/769da81848f28f866058a4913f68cdaea431e7e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/769da81848f28f866058a4913f68cdaea431e7e5"}], "stats": {"total": 64, "additions": 49, "deletions": 15}, "files": [{"sha": "8088d9f0189c5d3ea8beb1d1fab1c6d3ef5d086f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73b091d78d0e481c2055e07d37331621fa3136e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73b091d78d0e481c2055e07d37331621fa3136e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a73b091d78d0e481c2055e07d37331621fa3136e", "patch": "@@ -1,3 +1,15 @@\n+2004-09-10  James E Wilson  <wilson@specifixinc.com>\n+\n+\t* emit-rtl.c (gen_const_vector): Renamed from gen_const_vector_0.\n+\tAdd integer argument named constant.  Use const_tiny_rtx instead of\n+\tCONST0_RTX.\n+\t(gen_rtx_CONST_VECTOR): Rewrite to handle checks for both CONST0_RTX\n+\tand CONST1_RTX.\n+\t(init_emit_once): Fix users of gen_const_vector.  Set CONST1_RTX for\n+\tvector types.\n+\t* expr.c (const_vector_from_tree): Call gen_rtx_CONST_VECTOR instead\n+\tof gen_rtx_raw_CONST_VECTOR.\n+\n 2004-09-10  Eric Christopher  <echristo@redhat.com>\n \n \tPR c/16046"}, {"sha": "1dcda2c04034e1c382372a516a848fb2c08852b6", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73b091d78d0e481c2055e07d37331621fa3136e/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73b091d78d0e481c2055e07d37331621fa3136e/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=a73b091d78d0e481c2055e07d37331621fa3136e", "patch": "@@ -194,7 +194,7 @@ static hashval_t reg_attrs_htab_hash (const void *);\n static int reg_attrs_htab_eq (const void *, const void *);\n static reg_attrs *get_reg_attrs (tree, int);\n static tree component_ref_for_mem_expr (tree);\n-static rtx gen_const_vector_0 (enum machine_mode);\n+static rtx gen_const_vector (enum machine_mode, int);\n static rtx gen_complex_constant_part (enum machine_mode, rtx, int);\n static void copy_rtx_if_shared_1 (rtx *orig);\n \n@@ -5162,10 +5162,10 @@ init_emit (void)\n #endif\n }\n \n-/* Generate the constant 0.  */\n+/* Generate a vector constant for mode MODE and constant value CONSTANT.  */\n \n static rtx\n-gen_const_vector_0 (enum machine_mode mode)\n+gen_const_vector (enum machine_mode mode, int constant)\n {\n   rtx tem;\n   rtvec v;\n@@ -5177,28 +5177,44 @@ gen_const_vector_0 (enum machine_mode mode)\n \n   v = rtvec_alloc (units);\n \n-  /* We need to call this function after we to set CONST0_RTX first.  */\n-  gcc_assert (CONST0_RTX (inner));\n+  /* We need to call this function after we set the scalar const_tiny_rtx\n+     entries.  */\n+  gcc_assert (const_tiny_rtx[constant][(int) inner]);\n \n   for (i = 0; i < units; ++i)\n-    RTVEC_ELT (v, i) = CONST0_RTX (inner);\n+    RTVEC_ELT (v, i) = const_tiny_rtx[constant][(int) inner];\n \n   tem = gen_rtx_raw_CONST_VECTOR (mode, v);\n   return tem;\n }\n \n /* Generate a vector like gen_rtx_raw_CONST_VEC, but use the zero vector when\n-   all elements are zero.  */\n+   all elements are zero, and the one vector when all elements are one.  */\n rtx\n gen_rtx_CONST_VECTOR (enum machine_mode mode, rtvec v)\n {\n-  rtx inner_zero = CONST0_RTX (GET_MODE_INNER (mode));\n+  enum machine_mode inner = GET_MODE_INNER (mode);\n+  int nunits = GET_MODE_NUNITS (mode);\n+  rtx x;\n   int i;\n \n-  for (i = GET_MODE_NUNITS (mode) - 1; i >= 0; i--)\n-    if (RTVEC_ELT (v, i) != inner_zero)\n-      return gen_rtx_raw_CONST_VECTOR (mode, v);\n-  return CONST0_RTX (mode);\n+  /* Check to see if all of the elements have the same value.  */\n+  x = RTVEC_ELT (v, nunits - 1);\n+  for (i = nunits - 2; i >= 0; i--)\n+    if (RTVEC_ELT (v, i) != x)\n+      break;\n+\n+  /* If the values are all the same, check to see if we can use one of the\n+     standard constant vectors.  */\n+  if (i == -1)\n+    {\n+      if (x == CONST0_RTX (inner))\n+\treturn CONST0_RTX (mode);\n+      else if (x == CONST1_RTX (inner))\n+\treturn CONST1_RTX (mode);\n+    }\n+\n+  return gen_rtx_raw_CONST_VECTOR (mode, v);\n }\n \n /* Create some permanent unique rtl objects shared between all functions.\n@@ -5352,12 +5368,18 @@ init_emit_once (int line_numbers)\n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_INT);\n        mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n-    const_tiny_rtx[0][(int) mode] = gen_const_vector_0 (mode);\n+    {\n+      const_tiny_rtx[0][(int) mode] = gen_const_vector (mode, 0);\n+      const_tiny_rtx[1][(int) mode] = gen_const_vector (mode, 1);\n+    }\n \n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_FLOAT);\n        mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n-    const_tiny_rtx[0][(int) mode] = gen_const_vector_0 (mode);\n+    {\n+      const_tiny_rtx[0][(int) mode] = gen_const_vector (mode, 0);\n+      const_tiny_rtx[1][(int) mode] = gen_const_vector (mode, 1);\n+    }\n \n   for (i = (int) CCmode; i < (int) MAX_MACHINE_MODE; ++i)\n     if (GET_MODE_CLASS ((enum machine_mode) i) == MODE_CC)"}, {"sha": "44f485b32d48952fb3c1329ab041d24a136be89f", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a73b091d78d0e481c2055e07d37331621fa3136e/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a73b091d78d0e481c2055e07d37331621fa3136e/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a73b091d78d0e481c2055e07d37331621fa3136e", "patch": "@@ -8822,6 +8822,6 @@ const_vector_from_tree (tree exp)\n   for (; i < units; ++i)\n     RTVEC_ELT (v, i) = CONST0_RTX (inner);\n \n-  return gen_rtx_raw_CONST_VECTOR (mode, v);\n+  return gen_rtx_CONST_VECTOR (mode, v);\n }\n #include \"gt-expr.h\""}]}