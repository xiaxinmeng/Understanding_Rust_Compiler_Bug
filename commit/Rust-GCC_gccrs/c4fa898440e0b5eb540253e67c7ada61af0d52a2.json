{"sha": "c4fa898440e0b5eb540253e67c7ada61af0d52a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRmYTg5ODQ0MGUwYjVlYjU0MDI1M2U2N2M3YWRhNjFhZjBkNTJhMg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-08-11T17:45:36Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-08-11T17:45:36Z"}, "message": "re PR fortran/60355 ([F08] constraint C519 for BIND attribute not enforced)\n\n2017-08-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/60355\n\t* resolve.c (resolve_symbol): Adjust (and reformat)\n\tcomment.  Perform check if a BIND(C) is declared\n\tat module level regardless of whether it is typed\n\timplicitly or not.\n\n2017-08-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/60355\n\t* gfortran.dg (bind_c_usage_30): New test.\n\nFrom-SVN: r251054", "tree": {"sha": "9b9933505e7211399953b43071d776a252681b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b9933505e7211399953b43071d776a252681b8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4fa898440e0b5eb540253e67c7ada61af0d52a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4fa898440e0b5eb540253e67c7ada61af0d52a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4fa898440e0b5eb540253e67c7ada61af0d52a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4fa898440e0b5eb540253e67c7ada61af0d52a2/comments", "author": null, "committer": null, "parents": [{"sha": "0a29142da68c793fefacf83e579b11902c9e9602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a29142da68c793fefacf83e579b11902c9e9602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a29142da68c793fefacf83e579b11902c9e9602"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "5c4ad74b785f99d0fdded976fc27c85a103d07a0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fa898440e0b5eb540253e67c7ada61af0d52a2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fa898440e0b5eb540253e67c7ada61af0d52a2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c4fa898440e0b5eb540253e67c7ada61af0d52a2", "patch": "@@ -1,3 +1,11 @@\n+2017-08-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/60355\n+\t* resolve.c (resolve_symbol): Adjust (and reformat)\n+\tcomment.  Perform check if a BIND(C) is declared\n+\tat module level regardless of whether it is typed\n+\timplicitly or not.\n+\n 2017-08-10  Fritz Reese <fritzoreese@gmail.com>\n \n \t* options.c (set_dec_flags): Only set legacy standards when value"}, {"sha": "30928a2ac2dbe0ef6a88a5210906cf806a2e9d5a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fa898440e0b5eb540253e67c7ada61af0d52a2/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fa898440e0b5eb540253e67c7ada61af0d52a2/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c4fa898440e0b5eb540253e67c7ada61af0d52a2", "patch": "@@ -14397,17 +14397,18 @@ resolve_symbol (gfc_symbol *sym)\n \t}\n     }\n \n-  /* If the symbol is marked as bind(c), verify it's type and kind.  Do not\n-     do this for something that was implicitly typed because that is handled\n-     in gfc_set_default_type.  Handle dummy arguments and procedure\n-     definitions separately.  Also, anything that is use associated is not\n-     handled here but instead is handled in the module it is declared in.\n-     Finally, derived type definitions are allowed to be BIND(C) since that\n-     only implies that they're interoperable, and they are checked fully for\n-     interoperability when a variable is declared of that type.  */\n-  if (sym->attr.is_bind_c && sym->attr.implicit_type == 0 &&\n-      sym->attr.use_assoc == 0 && sym->attr.dummy == 0 &&\n-      sym->attr.flavor != FL_PROCEDURE && sym->attr.flavor != FL_DERIVED)\n+  /* If the symbol is marked as bind(c), that it is declared at module level\n+     scope and verify its type and kind.  Do not do the latter for symbols\n+     that are implicitly typed because that is handled in\n+     gfc_set_default_type.  Handle dummy arguments and procedure definitions\n+     separately.  Also, anything that is use associated is not handled here\n+     but instead is handled in the module it is declared in.  Finally, derived\n+     type definitions are allowed to be BIND(C) since that only implies that\n+     they're interoperable, and they are checked fully for interoperability\n+     when a variable is declared of that type.  */\n+  if (sym->attr.is_bind_c && sym->attr.use_assoc == 0\n+      && sym->attr.dummy == 0 && sym->attr.flavor != FL_PROCEDURE\n+      && sym->attr.flavor != FL_DERIVED)\n     {\n       bool t = true;\n \n@@ -14421,11 +14422,11 @@ resolve_symbol (gfc_symbol *sym)\n \t\t     \"module level scope\", sym->name, &(sym->declared_at));\n \t  t = false;\n \t}\n-      else if (sym->common_head != NULL)\n+      else if (sym->common_head != NULL && sym->attr.implicit_type == 0)\n         {\n           t = verify_com_block_vars_c_interop (sym->common_head);\n         }\n-      else\n+      else if (sym->attr.implicit_type == 0)\n \t{\n \t  /* If type() declaration, we need to verify that the components\n \t     of the given type are all C interoperable, etc.  */"}, {"sha": "71b7c6269802e7c66e43df20409a049a4f1c73cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fa898440e0b5eb540253e67c7ada61af0d52a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fa898440e0b5eb540253e67c7ada61af0d52a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4fa898440e0b5eb540253e67c7ada61af0d52a2", "patch": "@@ -1,3 +1,8 @@\n+2017-08-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/60355\n+\t* gfortran.dg (bind_c_usage_30): New test.\n+\n 2017-08-11  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-opt/79987"}, {"sha": "932d38edd30a1e67f5d57e33f25fcae9c5bef2e3", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_30.f90", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fa898440e0b5eb540253e67c7ada61af0d52a2/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_30.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fa898440e0b5eb540253e67c7ada61af0d52a2/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_30.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_30.f90?ref=c4fa898440e0b5eb540253e67c7ada61af0d52a2", "patch": "@@ -0,0 +1,6 @@\n+! { dg-do compile }\n+! PR 60355 - there was no error message for implicitly typed variables\n+! Test case contributed by Vladimir Fuka\n+program main\n+  bind(c) test_BIND ! { dg-error \"cannot be BIND\" }\n+END"}]}