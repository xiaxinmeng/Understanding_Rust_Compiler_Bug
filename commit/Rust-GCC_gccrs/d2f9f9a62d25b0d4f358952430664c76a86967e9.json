{"sha": "d2f9f9a62d25b0d4f358952430664c76a86967e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJmOWY5YTYyZDI1YjBkNGYzNTg5NTI0MzA2NjRjNzZhODY5NjdlOQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gmail.com", "date": "2007-01-21T06:51:07Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-01-21T06:51:07Z"}, "message": "re PR objc/30479 (Precompiled headers don't seem to work with GNU ObjC)\n\n2007-01-20  Andrew Pinski  <pinskia@gmail.com>\n\n        PR objc/30479\n        * objc-act.c (hash_interface): Use IDENTIFIER_HASH_VALUE instead\n        of htab_hash_pointer.\n        (lookup_interface): Likewise.\n        (add_class): Likewise.\n\n2007-01-20  Andrew Pinski  <pinskia@gmail.com>\n\n        PR objc/30479\n        * objc.dg/pch: New directory.\n        * objc.dg/pch/pch.exp: New file.\n        * objc.dg/pch/interface-1.m: New test.\n        * objc.dg/pch/interface-1.hs: New include file.\n        * lib/objc.exp (objc_target_compile): Add\n        \"-x objective-c-header\" in front of the sources if this is\n        a precompiled header being compiled.\n\nFrom-SVN: r121024", "tree": {"sha": "082440aebef934d380dad11831fe7fc3c40506e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/082440aebef934d380dad11831fe7fc3c40506e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2f9f9a62d25b0d4f358952430664c76a86967e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f9f9a62d25b0d4f358952430664c76a86967e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2f9f9a62d25b0d4f358952430664c76a86967e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f9f9a62d25b0d4f358952430664c76a86967e9/comments", "author": {"login": "pinskia", "id": 8496799, "node_id": "MDQ6VXNlcjg0OTY3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8496799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pinskia", "html_url": "https://github.com/pinskia", "followers_url": "https://api.github.com/users/pinskia/followers", "following_url": "https://api.github.com/users/pinskia/following{/other_user}", "gists_url": "https://api.github.com/users/pinskia/gists{/gist_id}", "starred_url": "https://api.github.com/users/pinskia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pinskia/subscriptions", "organizations_url": "https://api.github.com/users/pinskia/orgs", "repos_url": "https://api.github.com/users/pinskia/repos", "events_url": "https://api.github.com/users/pinskia/events{/privacy}", "received_events_url": "https://api.github.com/users/pinskia/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78681dbdee7e724104d79eca9fc0e2eaeaf8eae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78681dbdee7e724104d79eca9fc0e2eaeaf8eae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78681dbdee7e724104d79eca9fc0e2eaeaf8eae2"}], "stats": {"total": 91, "additions": 88, "deletions": 3}, "files": [{"sha": "f3aeb9b3bdd83cf2f4b36866d4ba13e211615698", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=d2f9f9a62d25b0d4f358952430664c76a86967e9", "patch": "@@ -1,3 +1,11 @@\n+2007-01-20  Andrew Pinski  <pinskia@gmail.com>\n+\n+\tPR objc/30479\n+\t* objc-act.c (hash_interface): Use IDENTIFIER_HASH_VALUE instead\n+\tof htab_hash_pointer.\n+\t(lookup_interface): Likewise.\n+\t(add_class): Likewise.\n+\n 2007-01-02  Douglas Gregor  <doug.gregor@gmail.com>\n \t\n \t* objc-act.c (objc_build_volatilized_type): Keep track of"}, {"sha": "86bfd37b6654d6c47a197c4d1965b08a8d22771f", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=d2f9f9a62d25b0d4f358952430664c76a86967e9", "patch": "@@ -3298,7 +3298,7 @@ static hashval_t\n hash_interface (const void *p)\n {\n   const struct interface_tuple *d = p;\n-  return htab_hash_pointer (d->id);\n+  return IDENTIFIER_HASH_VALUE (d->id);\n }\n \n static int\n@@ -3327,7 +3327,7 @@ lookup_interface (tree ident)\n       {\n \tslot = (struct interface_tuple **)\n \t  htab_find_slot_with_hash (interface_htab, ident,\n-\t\t\t\t    htab_hash_pointer (ident),\n+\t\t\t\t    IDENTIFIER_HASH_VALUE (ident),\n \t\t\t\t    NO_INSERT);\n \tif (slot && *slot)\n \t  i = (*slot)->class_name;\n@@ -6997,7 +6997,7 @@ add_class (tree class_name, tree name)\n     interface_htab = htab_create_ggc (31, hash_interface, eq_interface, NULL);\n   slot = (struct interface_tuple **)\n     htab_find_slot_with_hash (interface_htab, name,\n-\t\t\t      htab_hash_pointer (name),\n+\t\t\t      IDENTIFIER_HASH_VALUE (name),\n \t\t\t      INSERT);\n   if (!*slot)\n     {"}, {"sha": "320c90203591d88b070143879d2dc75b6f105c79", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d2f9f9a62d25b0d4f358952430664c76a86967e9", "patch": "@@ -1,3 +1,14 @@\n+2007-01-20  Andrew Pinski  <pinskia@gmail.com>\n+\n+\tPR objc/30479\n+\t* objc.dg/pch: New directory.\n+\t* objc.dg/pch/pch.exp: New file.\n+\t* objc.dg/pch/interface-1.m: New test.\n+\t* objc.dg/pch/interface-1.hs: New include file.\n+\t* lib/objc.exp (objc_target_compile): Add\n+\t\"-x objective-c-header\" in front of the sources if this is\n+\ta precompiled header being compiled.\n+\n 2007-01-20  Roger Sayle  <roger@eyesopen.com>\n \n \t* gfortran.dg/array_memcpy_3.f90: New test case."}, {"sha": "0336d3b3dd6d7349335f4797a6b4108e7810ebbd", "filename": "gcc/testsuite/lib/objc.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=d2f9f9a62d25b0d4f358952430664c76a86967e9", "patch": "@@ -187,6 +187,11 @@ proc objc_target_compile { source dest type options } {\n \tlappend options \"additional_flags=${objc_link_flags}\"\n \tappend ld_library_path \":${libobjc_dir}\"\n     }\n+    if { $type == \"precompiled_header\" } {\n+\t# If we generating a precompiled header, we have say this is an\n+\t# objective-C header\n+\tset source [concat \"-x objective-c-header\" $source]\n+    }\n     lappend options \"compiler=$OBJC_UNDER_TEST\"\n \n     set_ld_library_path_env_vars"}, {"sha": "fe5255af1cc4f49bf7b9bcb90587f4ff713d4381", "filename": "gcc/testsuite/objc.dg/pch/interface-1.hs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Finterface-1.hs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Finterface-1.hs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Finterface-1.hs?ref=d2f9f9a62d25b0d4f358952430664c76a86967e9", "patch": "@@ -0,0 +1,4 @@\n+@interface TestClass\n++ (int) test;\n+@end\n+"}, {"sha": "9bc7ef3a244f05163c16b58d0a03aa4a5a223c9d", "filename": "gcc/testsuite/objc.dg/pch/interface-1.m", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Finterface-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Finterface-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Finterface-1.m?ref=d2f9f9a62d25b0d4f358952430664c76a86967e9", "patch": "@@ -0,0 +1,14 @@\n+#include \"interface-1.h\"\n+\n+@implementation TestClass\n++ (int) test\n+{\n+  return 0;\n+}\n+@end\n+\n+int main (void)\n+{\n+  return [TestClass test];\n+}\n+"}, {"sha": "ad5697b8f9205832af2dd9d48c4d3955ef019238", "filename": "gcc/testsuite/objc.dg/pch/pch.exp", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Fpch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f9f9a62d25b0d4f358952430664c76a86967e9/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Fpch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpch%2Fpch.exp?ref=d2f9f9a62d25b0d4f358952430664c76a86967e9", "patch": "@@ -0,0 +1,43 @@\n+#   Copyright (C) 1997, 2002, 2003 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  \n+\n+# GCC testsuite for precompiled header interaction,\n+# that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib objc-dg.exp\n+load_lib dg-pch.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+set old_dg_do_what_default \"${dg-do-what-default}\"\n+\n+# Main loop.\n+foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.m]] {\n+    global torture_without_loops\n+\n+    # We don't try to use the loop-optimizing options, since they are highly\n+    # unlikely to make any difference to PCH.  However, we do want to\n+    # add -O0 -g, since users who want PCH usually want debugging and quick\n+    # compiles.\n+    dg-pch $subdir $test [concat [list {-O0 -g}] $torture_without_loops] \".h\"\n+}\n+\n+set dg-do-what-default \"$old_dg_do_what_default\"\n+\n+# All done.\n+dg-finish"}]}