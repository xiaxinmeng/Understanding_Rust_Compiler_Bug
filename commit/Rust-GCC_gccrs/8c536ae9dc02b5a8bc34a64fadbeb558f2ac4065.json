{"sha": "8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM1MzZhZTlkYzAyYjVhOGJjMzRhNjRmYWRiZWI1NThmMmFjNDA2NQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-10-15T04:22:11Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-10-15T04:22:11Z"}, "message": "globals.cc (__gnu_cxx::c_locale_impl_compat): Add, alias to c_locale_impl.\n\n\n2002-10-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/globals.cc (__gnu_cxx::c_locale_impl_compat): Add, alias to\n\tc_locale_impl.\n\t* testsuite/abi_check.cc (line_to_symbol_info): Collect size info.\n\t* docs/html/abi.txt: Update.\n\nFrom-SVN: r58147", "tree": {"sha": "64dd2d748cd96f7165aaba10dd9f2d106654dacb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64dd2d748cd96f7165aaba10dd9f2d106654dacb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065/comments", "author": null, "committer": null, "parents": [{"sha": "51502ebc130ebef2a7febc060784c42ac120b754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51502ebc130ebef2a7febc060784c42ac120b754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51502ebc130ebef2a7febc060784c42ac120b754"}], "stats": {"total": 72, "additions": 46, "deletions": 26}, "files": [{"sha": "e6c7b837b91a1fb9ee2d8fdfa3afb1c130ac3504", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065", "patch": "@@ -1,3 +1,10 @@\n+2002-10-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/globals.cc (__gnu_cxx::c_locale_impl_compat): Add, alias to\n+\tc_locale_impl.\n+\t* testsuite/abi_check.cc (line_to_symbol_info): Collect size info.\n+\t* docs/html/abi.txt: Update.\n+\t\n 2002-10-14  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/22_locale/static_members.cc (test02): Less provincial."}, {"sha": "73cb46c9c099dee1c276a9add90ac499538831f8", "filename": "libstdc++-v3/docs/html/abi.txt", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fabi.txt?ref=8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065", "patch": "@@ -1,12 +1,5 @@\n \n-===========================\n-\n-See http://gcc.gnu.org/ml/libstdc++/2002-07/msg00054.html for why this\n-document exists, why it's incomplete, and what needs to be done still.\n-\n-===========================\n-\n-2002-09-06 Benjamin Kosnik\n+2002-10-14 Benjamin Kosnik\n \n Description of the libstdc++ ABI.\n \n@@ -244,7 +237,7 @@ II. Library ABI changes\n The following will cause the library major version number to\n increase, say from \"libstdc++.so.3.0.4\" to \"libstdc++.so.4.0.0\".\n \n-- any g++ compiler ABI changes\n+- (anything) changing in the gcc/g++ compiler ABI\n \n - (anything) changing size of an exported symbol\n \n@@ -256,7 +249,14 @@ increase, say from \"libstdc++.so.3.0.4\" to \"libstdc++.so.4.0.0\".\n \n - (anything) deleting an exported symbol\n \n-Note: adding an exported symbol, if it's in a new linker map name, is ok.\n+- (anything) changing the size, alignment, or layout of types\n+  specified in the C++ standard. These may not necessarily be\n+  instantiated or otherwise exported in the library binary, and\n+  include all the required locale facets, as well as things like\n+  std::basic_streambuf, et al.\n+\n+Note: adding an exported symbol, if it's in a new and dependent\n+interface name, is ok.\n \n The following will cause the library revision version number to\n increase, say from \"libstdc++.so.5.0.0\" to \"libstdc++.so.5.0.1\".\n@@ -331,17 +331,20 @@ addition, all exported names are demangled, and the exported objects\n are checked to make sure they are the same size as the same object in\n the baseline.\n \n-In the future, more tests should be added. In particular, vtable\n-information, offsets of data members in class objects, and other\n-layout information should be checked.\n+This dataset is insufficient, yet a start. Also needed is a\n+comprehensive check for all user-visible types part of the standard\n+library for sizeof() and alignof() changes. \n \n-It should be possible to use sizeof, alignof, and offset to compute\n+Verifying compatible layouts of objects is not even attempted.  It\n+should be possible to use sizeof, alignof, and offsetof to compute\n offsets for each structure and type in the standard library, saving to\n-another datafile. Then, compute this for new binaries, and look for\n-differences.\n+another datafile. Then, compute this in a similar way for new\n+binaries, and look for differences.\n \n Another approach might be to use the -fdump-class-hierarchy flag to\n-get information.\n+get information. However, currently this approach gives insufficient\n+data for use in library testing, as class data members, their offsets,\n+and other detailed data is not displayed with this flag.\n (See g++/7470 on how this was used to find bugs.)\n \n Perhaps there are other C++ ABI checkers. If so, please notify"}, {"sha": "d85bf3a63692ba582fcb5ef034985160cedcc18f", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065", "patch": "@@ -48,6 +48,15 @@ namespace __gnu_cxx\n {\n   using namespace std;\n \n+  typedef char fake_facet_name[sizeof(char*)]\n+  __attribute__ ((aligned(__alignof__(char*))));\n+  fake_facet_name facet_name[6 + _GLIBCPP_NUM_CATEGORIES];\n+\n+  typedef char fake_locale_Impl[sizeof(locale::_Impl)]\n+  __attribute__ ((aligned(__alignof__(locale::_Impl))));\n+  fake_locale_Impl c_locale_impl;\n+\n+\n   // NB: The asm directives renames these non-exported, namespace\n   // __gnu_cxx symbols into the mistakenly exported, namespace std\n   // symbols in GLIBCPP_3.2.\n@@ -61,19 +70,20 @@ namespace __gnu_cxx\n   fake_locale c_locale;\n   _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx8c_localeE, _ZSt8c_locale, GLIBCPP_3.2)\n \n-  typedef char fake_locale_Impl[sizeof(locale::_Impl)]\n-  __attribute__ ((aligned(__alignof__(locale::_Impl))));\n-  fake_locale_Impl c_locale_impl;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx13c_locale_implE, _ZSt13c_locale_impl, GLIBCPP_3.2)\n+  // GLIBCXX_ABI > 5 will not need this symbol at all.\n+  // It's here just as a placeholder, as the size of this exported\n+  // object changed. The new symbol is not exported.\n+  const int o = sizeof(locale::_Impl) - sizeof(char*[_GLIBCPP_NUM_CATEGORIES]);\n+  typedef char fake_locale_Impl_compat[o]\n+  __attribute__ ((aligned(__alignof__(o))));\n+  fake_locale_Impl_compat  c_locale_impl_compat;\n+  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx20c_locale_impl_compatE, _ZSt13c_locale_impl, GLIBCPP_3.2)\n+\n   typedef char fake_facet_vec[sizeof(locale::facet*)]\n   __attribute__ ((aligned(__alignof__(locale::facet*))));\n   fake_facet_vec facet_vec[_GLIBCPP_NUM_FACETS];\n   _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9facet_vecE, _ZSt9facet_vec, GLIBCPP_3.2)\n \n-  typedef char fake_facet_name[sizeof(char*)]\n-  __attribute__ ((aligned(__alignof__(char*))));\n-  fake_facet_name facet_name[6 + _GLIBCPP_NUM_CATEGORIES];\n-\n   typedef char fake_ctype_c[sizeof(std::ctype<char>)]\n   __attribute__ ((aligned(__alignof__(std::ctype<char>))));\n   fake_ctype_c ctype_c;"}, {"sha": "21ca619ca83f278e4823ceeaffe614d514455652", "filename": "libstdc++-v3/testsuite/abi_check.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc?ref=8c536ae9dc02b5a8bc34a64fadbeb558f2ac4065", "patch": "@@ -191,7 +191,7 @@ line_to_symbol_info(std::string& input, symbol_info& output)\n \t  istringstream iss(size);\n \t  int x;\n \t  iss >> x;\n-\t  if (iss.good())\n+\t  if (!iss.fail())\n \t    output.size = x;\n \t  input.erase(input.begin(), input.begin() + n + 1);\n \t}"}]}