{"sha": "be792bce4fcab1a4a636545c69885b680eb74fca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU3OTJiY2U0ZmNhYjFhNGE2MzY1NDVjNjk4ODViNjgwZWI3NGZjYQ==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-01-31T13:19:10Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-01-31T13:19:10Z"}, "message": "constraints.md (Yk): Swap meaning with k.\n\ngcc/\n\t* config/i386/constraints.md (Yk): Swap meaning with k.\n\t* config/i386/i386.md (movhi_internal): Change Yk to k.\n\t(movqi_internal): Ditto.\n\t(*k<logic><mode>): Ditto.\n\t(*andhi_1): Ditto.\n\t(*andqi_1): Ditto.\n\t(kandn<mode>): Ditto.\n\t(*<code>hi_1): Ditto.\n\t(*<code>qi_1): Ditto.\n\t(kxnor<mode>): Ditto.\n\t(kortestzhi): Ditto.\n\t(kortestchi): Ditto.\n\t(kunpckhi): Ditto.\n\t(*one_cmplhi2_1): Ditto.\n\t(*one_cmplqi2_1): Ditto.\n\t* config/i386/sse.md (): Change k to Yk.\n\t(avx512f_load<mode>_mask): Ditto.\n\t(avx512f_blendm<mode>): Ditto.\n\t(avx512f_store<mode>_mask): Ditto.\n\t(avx512f_storeu<ssemodesuffix>512_mask): Ditto.\n\t(avx512f_storedqu<mode>_mask): Ditto.\n\t(avx512f_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>): Ditto.\n\t(avx512f_ucmp<mode>3<mask_scalar_merge_name>): Ditto.\n\t(avx512f_vmcmp<mode>3<round_saeonly_name>): Ditto.\n\t(avx512f_vmcmp<mode>3_mask<round_saeonly_name>): Ditto.\n\t(avx512f_maskcmp<mode>3): Ditto.\n\t(avx512f_fmadd_<mode>_mask<round_name>): Ditto.\n\t(avx512f_fmadd_<mode>_mask3<round_name>): Ditto.\n\t(avx512f_fmsub_<mode>_mask<round_name>): Ditto.\n\t(avx512f_fmsub_<mode>_mask3<round_name>): Ditto.\n\t(avx512f_fnmadd_<mode>_mask<round_name>): Ditto.\n\t(avx512f_fnmadd_<mode>_mask3<round_name>): Ditto.\n\t(avx512f_fnmsub_<mode>_mask<round_name>): Ditto.\n\t(avx512f_fnmsub_<mode>_mask3<round_name>): Ditto.\n\t(avx512f_fmaddsub_<mode>_mask<round_name>): Ditto.\n\t(avx512f_fmaddsub_<mode>_mask3<round_name>): Ditto.\n\t(avx512f_fmsubadd_<mode>_mask<round_name>): Ditto.\n\t(avx512f_fmsubadd_<mode>_mask3<round_name>): Ditto.\n\t(avx512f_vextract<shuffletype>32x4_1_maskm): Ditto.\n\t(vec_extract_lo_<mode>_maskm): Ditto.\n\t(vec_extract_hi_<mode>_maskm): Ditto.\n\t(avx512f_vternlog<mode>_mask): Ditto.\n\t(avx512f_fixupimm<mode>_mask<round_saeonly_name>): Ditto.\n\t(avx512f_sfixupimm<mode>_mask<round_saeonly_name>): Ditto.\n\t(avx512f_<code><pmov_src_lower><mode>2_mask): Ditto.\n\t(avx512f_<code>v8div16qi2_mask): Ditto.\n\t(avx512f_<code>v8div16qi2_mask_store): Ditto.\n\t(avx512f_eq<mode>3<mask_scalar_merge_name>_1): Ditto.\n\t(avx512f_gt<mode>3<mask_scalar_merge_name>): Ditto.\n\t(avx512f_testm<mode>3<mask_scalar_merge_name>): Ditto.\n\t(avx512f_testnm<mode>3<mask_scalar_merge_name>): Ditto.\n\t(*avx512pf_gatherpf<mode>sf_mask): Ditto.\n\t(*avx512pf_gatherpf<mode>df_mask): Ditto.\n\t(*avx512pf_scatterpf<mode>sf_mask): Ditto.\n\t(*avx512pf_scatterpf<mode>df_mask): Ditto.\n\t(avx512cd_maskb_vec_dupv8di): Ditto.\n\t(avx512cd_maskw_vec_dupv16si): Ditto.\n\t(avx512f_vpermi2var<mode>3_maskz): Ditto.\n\t(avx512f_vpermi2var<mode>3_mask): Ditto.\n\t(avx512f_vpermi2var<mode>3_mask): Ditto.\n\t(avx512f_vpermt2var<mode>3_maskz): Ditto.\n\t(*avx512f_gathersi<mode>): Ditto.\n\t(*avx512f_gathersi<mode>_2): Ditto.\n\t(*avx512f_gatherdi<mode>): Ditto.\n\t(*avx512f_gatherdi<mode>_2): Ditto.\n\t(*avx512f_scattersi<mode>): Ditto.\n\t(*avx512f_scatterdi<mode>): Ditto.\n\t(avx512f_compress<mode>_mask): Ditto.\n\t(avx512f_compressstore<mode>_mask): Ditto.\n\t(avx512f_expand<mode>_mask): Ditto.\n\t* config/i386/subst.md (mask): Change k to Yk.\n\t(mask_scalar_merge): Ditto.\n\t(sd): Ditto.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512f-inline-asm.c: Swap Yk and k.\n\t* gcc.target/i386/avx512f-kmovw-1.c: Also allow k0.\n\nFrom-SVN: r207341", "tree": {"sha": "83ecc0f627a8bea076669304d5762d3177fab1cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83ecc0f627a8bea076669304d5762d3177fab1cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be792bce4fcab1a4a636545c69885b680eb74fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be792bce4fcab1a4a636545c69885b680eb74fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be792bce4fcab1a4a636545c69885b680eb74fca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be792bce4fcab1a4a636545c69885b680eb74fca/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c"}], "stats": {"total": 281, "additions": 181, "deletions": 100}, "files": [{"sha": "43c477a0d93e07ae45905e773a7e3f4dab8a59a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be792bce4fcab1a4a636545c69885b680eb74fca", "patch": "@@ -1,3 +1,79 @@\n+2014-01-31  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* config/i386/constraints.md (Yk): Swap meaning with k.\n+\t* config/i386/i386.md (movhi_internal): Change Yk to k.\n+\t(movqi_internal): Ditto.\n+\t(*k<logic><mode>): Ditto.\n+\t(*andhi_1): Ditto.\n+\t(*andqi_1): Ditto.\n+\t(kandn<mode>): Ditto.\n+\t(*<code>hi_1): Ditto.\n+\t(*<code>qi_1): Ditto.\n+\t(kxnor<mode>): Ditto.\n+\t(kortestzhi): Ditto.\n+\t(kortestchi): Ditto.\n+\t(kunpckhi): Ditto.\n+\t(*one_cmplhi2_1): Ditto.\n+\t(*one_cmplqi2_1): Ditto.\n+\t* config/i386/sse.md (): Change k to Yk.\n+\t(avx512f_load<mode>_mask): Ditto.\n+\t(avx512f_blendm<mode>): Ditto.\n+\t(avx512f_store<mode>_mask): Ditto.\n+\t(avx512f_storeu<ssemodesuffix>512_mask): Ditto.\n+\t(avx512f_storedqu<mode>_mask): Ditto.\n+\t(avx512f_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>): Ditto.\n+\t(avx512f_ucmp<mode>3<mask_scalar_merge_name>): Ditto.\n+\t(avx512f_vmcmp<mode>3<round_saeonly_name>): Ditto.\n+\t(avx512f_vmcmp<mode>3_mask<round_saeonly_name>): Ditto.\n+\t(avx512f_maskcmp<mode>3): Ditto.\n+\t(avx512f_fmadd_<mode>_mask<round_name>): Ditto.\n+\t(avx512f_fmadd_<mode>_mask3<round_name>): Ditto.\n+\t(avx512f_fmsub_<mode>_mask<round_name>): Ditto.\n+\t(avx512f_fmsub_<mode>_mask3<round_name>): Ditto.\n+\t(avx512f_fnmadd_<mode>_mask<round_name>): Ditto.\n+\t(avx512f_fnmadd_<mode>_mask3<round_name>): Ditto.\n+\t(avx512f_fnmsub_<mode>_mask<round_name>): Ditto.\n+\t(avx512f_fnmsub_<mode>_mask3<round_name>): Ditto.\n+\t(avx512f_fmaddsub_<mode>_mask<round_name>): Ditto.\n+\t(avx512f_fmaddsub_<mode>_mask3<round_name>): Ditto.\n+\t(avx512f_fmsubadd_<mode>_mask<round_name>): Ditto.\n+\t(avx512f_fmsubadd_<mode>_mask3<round_name>): Ditto.\n+\t(avx512f_vextract<shuffletype>32x4_1_maskm): Ditto.\n+\t(vec_extract_lo_<mode>_maskm): Ditto.\n+\t(vec_extract_hi_<mode>_maskm): Ditto.\n+\t(avx512f_vternlog<mode>_mask): Ditto.\n+\t(avx512f_fixupimm<mode>_mask<round_saeonly_name>): Ditto.\n+\t(avx512f_sfixupimm<mode>_mask<round_saeonly_name>): Ditto.\n+\t(avx512f_<code><pmov_src_lower><mode>2_mask): Ditto.\n+\t(avx512f_<code>v8div16qi2_mask): Ditto.\n+\t(avx512f_<code>v8div16qi2_mask_store): Ditto.\n+\t(avx512f_eq<mode>3<mask_scalar_merge_name>_1): Ditto.\n+\t(avx512f_gt<mode>3<mask_scalar_merge_name>): Ditto.\n+\t(avx512f_testm<mode>3<mask_scalar_merge_name>): Ditto.\n+\t(avx512f_testnm<mode>3<mask_scalar_merge_name>): Ditto.\n+\t(*avx512pf_gatherpf<mode>sf_mask): Ditto.\n+\t(*avx512pf_gatherpf<mode>df_mask): Ditto.\n+\t(*avx512pf_scatterpf<mode>sf_mask): Ditto.\n+\t(*avx512pf_scatterpf<mode>df_mask): Ditto.\n+\t(avx512cd_maskb_vec_dupv8di): Ditto.\n+\t(avx512cd_maskw_vec_dupv16si): Ditto.\n+\t(avx512f_vpermi2var<mode>3_maskz): Ditto.\n+\t(avx512f_vpermi2var<mode>3_mask): Ditto.\n+\t(avx512f_vpermi2var<mode>3_mask): Ditto.\n+\t(avx512f_vpermt2var<mode>3_maskz): Ditto.\n+\t(*avx512f_gathersi<mode>): Ditto.\n+\t(*avx512f_gathersi<mode>_2): Ditto.\n+\t(*avx512f_gatherdi<mode>): Ditto.\n+\t(*avx512f_gatherdi<mode>_2): Ditto.\n+\t(*avx512f_scattersi<mode>): Ditto.\n+\t(*avx512f_scatterdi<mode>): Ditto.\n+\t(avx512f_compress<mode>_mask): Ditto.\n+\t(avx512f_compressstore<mode>_mask): Ditto.\n+\t(avx512f_expand<mode>_mask): Ditto.\n+\t* config/i386/subst.md (mask): Change k to Yk.\n+\t(mask_scalar_merge): Ditto.\n+\t(sd): Ditto.\n+\n 2014-01-31  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* doc/extend.texi (Vector Extensions): Document ?: in C++."}, {"sha": "65335f128775aad6446315d4a02b48c5d271b338", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=be792bce4fcab1a4a636545c69885b680eb74fca", "patch": "@@ -78,10 +78,10 @@\n  \"TARGET_80387 || TARGET_FLOAT_RETURNS_IN_80387 ? FP_SECOND_REG : NO_REGS\"\n  \"Second from top of 80387 floating-point stack (@code{%st(1)}).\")\n \n-(define_register_constraint \"k\" \"TARGET_AVX512F ? MASK_EVEX_REGS : NO_REGS\"\n+(define_register_constraint \"Yk\" \"TARGET_AVX512F ? MASK_EVEX_REGS : NO_REGS\"\n \"@internal Any mask register that can be used as predicate, i.e. k1-k7.\")\n \n-(define_register_constraint \"Yk\" \"TARGET_AVX512F ? MASK_REGS : NO_REGS\"\n+(define_register_constraint \"k\" \"TARGET_AVX512F ? MASK_REGS : NO_REGS\"\n \"@internal Any mask register.\")\n \n ;; Vector registers (also used for plain floating point nowadays)."}, {"sha": "7c53e4d4766750ee7fb6ffd5775e03cf7668faa0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=be792bce4fcab1a4a636545c69885b680eb74fca", "patch": "@@ -2306,8 +2306,8 @@\n \n \n (define_insn \"*movhi_internal\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r ,r ,m ,Yk,Yk,rm\")\n-\t(match_operand:HI 1 \"general_operand\"      \"r ,rn,rm,rn,rm,Yk,Yk\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r ,r ,m ,k,k,rm\")\n+\t(match_operand:HI 1 \"general_operand\"      \"r ,rn,rm,rn,rm,k,k\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2380,9 +2380,9 @@\n \n (define_insn \"*movqi_internal\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\"\n-\t\t\t\"=q,q ,q ,r,r ,?r,m ,Yk,Yk,r\")\n+\t\t\t\"=q,q ,q ,r,r ,?r,m ,k,k,r\")\n \t(match_operand:QI 1 \"general_operand\"\n-\t\t\t\"q ,qn,qm,q,rn,qm,qn,r ,Yk,Yk\"))]\n+\t\t\t\"q ,qn,qm,q,rn,qm,qn,r ,k,k\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -7815,9 +7815,9 @@\n \t\t\t (match_dup 2)))])\n \n (define_insn \"*k<logic><mode>\"\n-  [(set (match_operand:SWI12 0 \"mask_reg_operand\" \"=Yk\")\n-\t(any_logic:SWI12 (match_operand:SWI12 1 \"mask_reg_operand\" \"Yk\")\n-\t\t\t (match_operand:SWI12 2 \"mask_reg_operand\" \"Yk\")))]\n+  [(set (match_operand:SWI12 0 \"mask_reg_operand\" \"=k\")\n+\t(any_logic:SWI12 (match_operand:SWI12 1 \"mask_reg_operand\" \"k\")\n+\t\t\t (match_operand:SWI12 2 \"mask_reg_operand\" \"k\")))]\n   \"TARGET_AVX512F\"\n   \"k<logic>w\\t{%2, %1, %0|%0, %1, %2}\";\n   [(set_attr \"mode\" \"<MODE>\")\n@@ -7947,9 +7947,9 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*andhi_1\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r,Ya,!Yk\")\n-\t(and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,qm,Yk\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"rn,rm,L,Yk\")))\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r,Ya,!k\")\n+\t(and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,qm,k\")\n+\t\t(match_operand:HI 2 \"general_operand\" \"rn,rm,L,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (AND, HImode, operands)\"\n {\n@@ -7978,9 +7978,9 @@\n \n ;; %%% Potential partial reg stall on alternative 2.  What to do?\n (define_insn \"*andqi_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r,!Yk\")\n-\t(and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,Yk\")\n-\t\t(match_operand:QI 2 \"general_operand\" \"qn,qmn,rn,Yk\")))\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r,!k\")\n+\t(and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,k\")\n+\t\t(match_operand:QI 2 \"general_operand\" \"qn,qmn,rn,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (AND, QImode, operands)\"\n   \"@\n@@ -8003,11 +8003,11 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"kandn<mode>\"\n-  [(set (match_operand:SWI12 0 \"register_operand\" \"=r,&r,!Yk\")\n+  [(set (match_operand:SWI12 0 \"register_operand\" \"=r,&r,!k\")\n \t(and:SWI12\n \t  (not:SWI12\n-\t    (match_operand:SWI12 1 \"register_operand\" \"r,0,Yk\"))\n-\t  (match_operand:SWI12 2 \"register_operand\" \"r,r,Yk\")))\n+\t    (match_operand:SWI12 1 \"register_operand\" \"r,0,k\"))\n+\t  (match_operand:SWI12 2 \"register_operand\" \"r,r,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_AVX512F\"\n   \"@\n@@ -8388,10 +8388,10 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*<code>hi_1\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm,!Yk\")\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm,!k\")\n \t(any_or:HI\n-\t (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,Yk\")\n-\t (match_operand:HI 2 \"general_operand\" \"<g>,r<i>,Yk\")))\n+\t (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,k\")\n+\t (match_operand:HI 2 \"general_operand\" \"<g>,r<i>,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, HImode, operands)\"\n   \"@\n@@ -8403,9 +8403,9 @@\n \n ;; %%% Potential partial reg stall on alternative 2.  What to do?\n (define_insn \"*<code>qi_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,m,r,!Yk\")\n-\t(any_or:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,Yk\")\n-\t\t   (match_operand:QI 2 \"general_operand\" \"qmn,qn,rn,Yk\")))\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,m,r,!k\")\n+\t(any_or:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,k\")\n+\t\t   (match_operand:QI 2 \"general_operand\" \"qmn,qn,rn,k\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, QImode, operands)\"\n   \"@\n@@ -8465,11 +8465,11 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"kxnor<mode>\"\n-  [(set (match_operand:SWI12 0 \"register_operand\" \"=r,!Yk\")\n+  [(set (match_operand:SWI12 0 \"register_operand\" \"=r,!k\")\n \t(not:SWI12\n \t  (xor:SWI12\n-\t    (match_operand:SWI12 1 \"register_operand\" \"0,Yk\")\n-\t    (match_operand:SWI12 2 \"register_operand\" \"r,Yk\"))))\n+\t    (match_operand:SWI12 1 \"register_operand\" \"0,k\")\n+\t    (match_operand:SWI12 2 \"register_operand\" \"r,k\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_AVX512F\"\n   \"@\n@@ -8498,8 +8498,8 @@\n   [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ\n \t  (ior:HI\n-\t    (match_operand:HI 0 \"register_operand\" \"Yk\")\n-\t    (match_operand:HI 1 \"register_operand\" \"Yk\"))\n+\t    (match_operand:HI 0 \"register_operand\" \"k\")\n+\t    (match_operand:HI 1 \"register_operand\" \"k\"))\n \t  (const_int 0)))]\n   \"TARGET_AVX512F && ix86_match_ccmode (insn, CCZmode)\"\n   \"kortestw\\t{%1, %0|%0, %1}\"\n@@ -8511,8 +8511,8 @@\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n \t  (ior:HI\n-\t    (match_operand:HI 0 \"register_operand\" \"Yk\")\n-\t    (match_operand:HI 1 \"register_operand\" \"Yk\"))\n+\t    (match_operand:HI 0 \"register_operand\" \"k\")\n+\t    (match_operand:HI 1 \"register_operand\" \"k\"))\n \t  (const_int -1)))]\n   \"TARGET_AVX512F && ix86_match_ccmode (insn, CCCmode)\"\n   \"kortestw\\t{%1, %0|%0, %1}\"\n@@ -8521,12 +8521,12 @@\n    (set_attr \"prefix\" \"vex\")])\n \n (define_insn \"kunpckhi\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=Yk\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=k\")\n \t(ior:HI\n \t  (ashift:HI\n-\t    (match_operand:HI 1 \"register_operand\" \"Yk\")\n+\t    (match_operand:HI 1 \"register_operand\" \"k\")\n \t    (const_int 8))\n-\t  (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"Yk\"))))]\n+\t  (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"k\"))))]\n   \"TARGET_AVX512F\"\n   \"kunpckbw\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"mode\" \"HI\")\n@@ -9140,8 +9140,8 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*one_cmplhi2_1\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,!Yk\")\n-\t(not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,Yk\")))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,!k\")\n+\t(not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,k\")))]\n   \"ix86_unary_operator_ok (NOT, HImode, operands)\"\n   \"@\n    not{w}\\t%0\n@@ -9153,8 +9153,8 @@\n \n ;; %%% Potential partial reg stall on alternative 1.  What to do?\n (define_insn \"*one_cmplqi2_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r,!Yk\")\n-\t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0,Yk\")))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r,!k\")\n+\t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0,k\")))]\n   \"ix86_unary_operator_ok (NOT, QImode, operands)\"\n   \"@\n    not{b}\\t%0"}, {"sha": "cbebd87c425bd25bb39bd280665d64fcc471ce6c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=be792bce4fcab1a4a636545c69885b680eb74fca", "patch": "@@ -781,7 +781,7 @@\n \t(vec_merge:VI48F_512\n \t  (match_operand:VI48F_512 1 \"nonimmediate_operand\" \"v,m\")\n \t  (match_operand:VI48F_512 2 \"vector_move_operand\" \"0C,0C\")\n-\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"k,k\")))]\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512F\"\n {\n   switch (MODE_<sseinsnmode>)\n@@ -807,7 +807,7 @@\n \t(vec_merge:VI48F_512\n \t  (match_operand:VI48F_512 2 \"nonimmediate_operand\" \"vm\")\n \t  (match_operand:VI48F_512 1 \"register_operand\" \"v\")\n-\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"v<sseintprefix>blendm<ssemodesuffix>\\t{%2, %1, %0%{%3%}|%0%{%3%}, %1, %2}\"\n   [(set_attr \"type\" \"ssemov\")\n@@ -819,7 +819,7 @@\n \t(vec_merge:VI48F_512\n \t  (match_operand:VI48F_512 1 \"register_operand\" \"v\")\n \t  (match_dup 0)\n-\t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n {\n   switch (MODE_<sseinsnmode>)\n@@ -1025,7 +1025,7 @@\n \t    [(match_operand:VF_512 1 \"register_operand\" \"v\")]\n \t    UNSPEC_STOREU)\n \t  (match_dup 0)\n-\t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n {\n   switch (get_attr_mode (insn))\n@@ -1157,7 +1157,7 @@\n \t    [(match_operand:VI48_512 1 \"register_operand\" \"v\")]\n \t    UNSPEC_STOREU)\n \t  (match_dup 0)\n-\t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n {\n   if (<MODE>mode == V8DImode)\n@@ -2169,7 +2169,7 @@\n   (V16SI \"const_0_to_7_operand\") (V8DI \"const_0_to_7_operand\")])\n \n (define_insn \"avx512f_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n \t(unspec:<avx512fmaskmode>\n \t  [(match_operand:VI48F_512 1 \"register_operand\" \"v\")\n \t   (match_operand:VI48F_512 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n@@ -2183,7 +2183,7 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"avx512f_ucmp<mode>3<mask_scalar_merge_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n \t(unspec:<avx512fmaskmode>\n \t  [(match_operand:VI48_512 1 \"register_operand\" \"v\")\n \t   (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")\n@@ -2197,7 +2197,7 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"avx512f_vmcmp<mode>3<round_saeonly_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n \t(and:<avx512fmaskmode>\n \t  (unspec:<avx512fmaskmode>\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n@@ -2213,15 +2213,15 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"avx512f_vmcmp<mode>3_mask<round_saeonly_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n \t(and:<avx512fmaskmode>\n \t  (unspec:<avx512fmaskmode>\n \t    [(match_operand:VF_128 1 \"register_operand\" \"v\")\n \t     (match_operand:VF_128 2 \"<round_saeonly_nimm_predicate>\" \"<round_saeonly_constraint>\")\n \t     (match_operand:SI 3 \"const_0_to_31_operand\" \"n\")]\n \t    UNSPEC_PCMP)\n \t  (and:<avx512fmaskmode>\n-\t    (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")\n+\t    (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")\n \t    (const_int 1))))]\n   \"TARGET_AVX512F\"\n   \"vcmp<ssescalarmodesuffix>\\t{%3, <round_saeonly_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_saeonly_op5>, %3}\"\n@@ -2231,7 +2231,7 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"avx512f_maskcmp<mode>3\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n \t(match_operator:<avx512fmaskmode> 3 \"sse_comparison_operator\"\n \t  [(match_operand:VF 1 \"register_operand\" \"v\")\n \t   (match_operand:VF 2 \"nonimmediate_operand\" \"vm\")]))]\n@@ -2806,7 +2806,7 @@\n \t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n \t    (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))\n \t  (match_dup 1)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k,k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512F\"\n   \"@\n    vfmadd132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n@@ -2823,7 +2823,7 @@\n \t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t    (match_operand:VF_512 3 \"register_operand\" \"0\"))\n \t  (match_dup 3)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vfmadd231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n@@ -2857,7 +2857,7 @@\n \t    (neg:VF_512\n \t      (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")))\n \t  (match_dup 1)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k,k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512F\"\n   \"@\n    vfmsub132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n@@ -2875,7 +2875,7 @@\n \t    (neg:VF_512\n \t      (match_operand:VF_512 3 \"register_operand\" \"0\")))\n \t  (match_dup 3)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vfmsub231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n@@ -2909,7 +2909,7 @@\n \t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>,v\")\n \t    (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))\n \t  (match_dup 1)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k,k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512F\"\n   \"@\n    vfnmadd132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n@@ -2927,7 +2927,7 @@\n \t    (match_operand:VF_512 2 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t    (match_operand:VF_512 3 \"register_operand\" \"0\"))\n \t  (match_dup 3)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vfnmadd231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n@@ -2963,7 +2963,7 @@\n \t    (neg:VF_512\n \t      (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")))\n \t  (match_dup 1)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k,k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512F\"\n   \"@\n    vfnmsub132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n@@ -2982,7 +2982,7 @@\n \t    (neg:VF_512\n \t      (match_operand:VF_512 3 \"register_operand\" \"0\")))\n \t  (match_dup 3)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vfnmsub231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n@@ -3050,7 +3050,7 @@\n \t     (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\")]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 1)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k,k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512F\"\n   \"@\n    vfmaddsub132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n@@ -3068,7 +3068,7 @@\n \t     (match_operand:VF_512 3 \"register_operand\" \"0\")]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 3)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vfmaddsub231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n@@ -3104,7 +3104,7 @@\n \t       (match_operand:VF_512 3 \"<round_nimm_predicate>\" \"v,<round_constraint>\"))]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 1)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k,k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512F\"\n   \"@\n    vfmsubadd132<ssemodesuffix>\\t{<round_op5>%2, %3, %0%{%4%}|%0%{%4%}, %3, %2<round_op5>}\n@@ -3123,7 +3123,7 @@\n \t       (match_operand:VF_512 3 \"register_operand\" \"0\"))]\n \t    UNSPEC_FMADDSUB)\n \t  (match_dup 3)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vfmsubadd231<ssemodesuffix>\\t{<round_op5>%2, %1, %0%{%4%}|%0%{%4%}, %1, %2<round_op5>}\"\n   [(set_attr \"isa\" \"fma_avx512f\")\n@@ -5795,7 +5795,7 @@\n \t      (match_operand 4  \"const_0_to_15_operand\")\n \t      (match_operand 5  \"const_0_to_15_operand\")]))\n \t  (match_operand:<ssequartermode> 6 \"memory_operand\" \"0\")\n-\t  (match_operand:QI 7 \"register_operand\" \"k\")))]\n+\t  (match_operand:QI 7 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F && (INTVAL (operands[2]) = INTVAL (operands[3]) - 1)\n   && (INTVAL (operands[3]) = INTVAL (operands[4]) - 1)\n   && (INTVAL (operands[4]) = INTVAL (operands[5]) - 1)\"\n@@ -5891,7 +5891,7 @@\n \t    (parallel [(const_int 0) (const_int 1)\n \t      (const_int 2) (const_int 3)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"memory_operand\" \"0\")\n-\t  (match_operand:QI 3 \"register_operand\" \"k\")))]\n+\t  (match_operand:QI 3 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n \"vextract<shuffletype>64x4\\t{$0x0, %1, %0%{%3%}|%0%{%3%}, %1, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n@@ -5931,7 +5931,7 @@\n \t    (parallel [(const_int 4) (const_int 5)\n \t      (const_int 6) (const_int 7)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"memory_operand\" \"0\")\n-\t  (match_operand:QI 3 \"register_operand\" \"k\")))]\n+\t  (match_operand:QI 3 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vextract<shuffletype>64x4\\t{$0x1, %1, %0%{%3%}|%0%{%3%}, %1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n@@ -6630,7 +6630,7 @@\n \t     (match_operand:SI 4 \"const_0_to_255_operand\")]\n \t    UNSPEC_VTERNLOG)\n \t  (match_dup 1)\n-\t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vpternlog<ssemodesuffix>\\t{%4, %3, %2, %0%{%5%}|%0%{%5%}, %2, %3, %4}\"\n   [(set_attr \"type\" \"sselog\")\n@@ -6742,7 +6742,7 @@\n              (match_operand:SI 4 \"const_0_to_255_operand\")]\n              UNSPEC_FIXUPIMM)\n \t  (match_dup 1)\n-\t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vfixupimm<ssemodesuffix>\\t{%4, <round_saeonly_op6>%3, %2, %0%{%5%}|%0%{%5%}, %2, %3<round_saeonly_op6>, %4}\";\n   [(set_attr \"prefix\" \"evex\")\n@@ -6793,7 +6793,7 @@\n \t    (match_dup 1)\n \t    (const_int 1))\n \t  (match_dup 1)\n-\t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vfixupimm<ssescalarmodesuffix>\\t{%4, <round_saeonly_op6>%3, %2, %0%{%5%}|%0%{%5%}, %2, %3<round_saeonly_op6>, %4}\";\n   [(set_attr \"prefix\" \"evex\")\n@@ -7450,7 +7450,7 @@\n       (any_truncate:PMOV_DST_MODE\n         (match_operand:<pmov_src_mode> 1 \"register_operand\" \"v,v\"))\n       (match_operand:PMOV_DST_MODE 2 \"vector_move_operand\" \"0C,0\")\n-      (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"k,k\")))]\n+      (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vpmov<trunsuffix><pmov_suff>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n@@ -7512,7 +7512,7 @@\n                      (const_int 2) (const_int 3)\n                      (const_int 4) (const_int 5)\n                      (const_int 6) (const_int 7)]))\n-        (match_operand:QI 3 \"register_operand\" \"k\"))\n+        (match_operand:QI 3 \"register_operand\" \"Yk\"))\n       (const_vector:V8QI [(const_int 0) (const_int 0)\n                           (const_int 0) (const_int 0)\n                           (const_int 0) (const_int 0)\n@@ -7535,7 +7535,7 @@\n                      (const_int 2) (const_int 3)\n                      (const_int 4) (const_int 5)\n                      (const_int 6) (const_int 7)]))\n-        (match_operand:QI 2 \"register_operand\" \"k\"))\n+        (match_operand:QI 2 \"register_operand\" \"Yk\"))\n       (vec_select:V8QI\n         (match_dup 0)\n         (parallel [(const_int 8) (const_int 9)\n@@ -8575,7 +8575,7 @@\n   \"ix86_fixup_binary_operands_no_copy (EQ, <MODE>mode, operands);\")\n \n (define_insn \"avx512f_eq<mode>3<mask_scalar_merge_name>_1\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n \t(unspec:<avx512fmaskmode>\n \t  [(match_operand:VI48_512 1 \"register_operand\" \"%v\")\n \t   (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")]\n@@ -8662,7 +8662,7 @@\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"avx512f_gt<mode>3<mask_scalar_merge_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n \t(unspec:<avx512fmaskmode>\n \t  [(match_operand:VI48_512 1 \"register_operand\" \"v\")\n \t   (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")] UNSPEC_MASKED_GT))]\n@@ -9065,7 +9065,7 @@\n \t      (const_string \"<sseinsnmode>\")))])\n \n (define_insn \"avx512f_testm<mode>3<mask_scalar_merge_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n \t(unspec:<avx512fmaskmode>\n \t [(match_operand:VI48_512 1 \"register_operand\" \"v\")\n \t  (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")]\n@@ -9076,7 +9076,7 @@\n    (set_attr \"mode\"  \"<sseinsnmode>\")])\n \n (define_insn \"avx512f_testnm<mode>3<mask_scalar_merge_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n \t(unspec:<avx512fmaskmode>\n \t [(match_operand:VI48_512 1 \"register_operand\" \"v\")\n \t  (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")]\n@@ -12529,7 +12529,7 @@\n \n (define_insn \"*avx512pf_gatherpf<mode>sf_mask\"\n   [(unspec\n-     [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"k\")\n+     [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"Yk\")\n       (match_operator:<GATHER_SCATTER_SF_MEM_MODE> 5 \"vsib_mem_operator\"\n \t[(unspec:P\n \t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n@@ -12601,7 +12601,7 @@\n \n (define_insn \"*avx512pf_gatherpf<mode>df_mask\"\n   [(unspec\n-     [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"k\")\n+     [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"Yk\")\n       (match_operator:V8DF 5 \"vsib_mem_operator\"\n \t[(unspec:P\n \t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n@@ -12673,7 +12673,7 @@\n \n (define_insn \"*avx512pf_scatterpf<mode>sf_mask\"\n   [(unspec\n-     [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"k\")\n+     [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"Yk\")\n       (match_operator:<GATHER_SCATTER_SF_MEM_MODE> 5 \"vsib_mem_operator\"\n \t[(unspec:P\n \t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n@@ -12745,7 +12745,7 @@\n \n (define_insn \"*avx512pf_scatterpf<mode>df_mask\"\n   [(unspec\n-     [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"k\")\n+     [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"Yk\")\n       (match_operator:V8DF 5 \"vsib_mem_operator\"\n \t[(unspec:P\n \t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n@@ -14108,7 +14108,7 @@\n   [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n \t(vec_duplicate:V8DI\n \t  (zero_extend:DI\n-\t    (match_operand:QI 1 \"register_operand\" \"k\"))))]\n+\t    (match_operand:QI 1 \"register_operand\" \"Yk\"))))]\n   \"TARGET_AVX512CD\"\n   \"vpbroadcastmb2q\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mskmov\")\n@@ -14119,7 +14119,7 @@\n   [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n \t(vec_duplicate:V16SI\n \t  (zero_extend:SI\n-\t    (match_operand:HI 1 \"register_operand\" \"k\"))))]\n+\t    (match_operand:HI 1 \"register_operand\" \"Yk\"))))]\n   \"TARGET_AVX512CD\"\n   \"vpbroadcastmw2d\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"mskmov\")\n@@ -14282,7 +14282,7 @@\n    (match_operand:VI48F_512 1 \"register_operand\" \"v\")\n    (match_operand:<sseintvecmode> 2 \"register_operand\" \"0\")\n    (match_operand:VI48F_512 3 \"nonimmediate_operand\" \"vm\")\n-   (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")]\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")]\n   \"TARGET_AVX512F\"\n {\n   emit_insn (gen_avx512f_vpermi2var<mode>3_maskz_1 (\n@@ -14313,7 +14313,7 @@\n \t    (match_operand:VI48F_512 3 \"nonimmediate_operand\" \"vm\")]\n \t    UNSPEC_VPERMI2_MASK)\n \t  (match_dup 0)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vpermi2<ssemodesuffix>\\t{%3, %1, %0%{%4%}|%0%{%4%}, %1, %3}\"\n   [(set_attr \"type\" \"sselog\")\n@@ -14325,7 +14325,7 @@\n    (match_operand:<sseintvecmode> 1 \"register_operand\" \"v\")\n    (match_operand:VI48F_512 2 \"register_operand\" \"0\")\n    (match_operand:VI48F_512 3 \"nonimmediate_operand\" \"vm\")\n-   (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")]\n+   (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")]\n   \"TARGET_AVX512F\"\n {\n   emit_insn (gen_avx512f_vpermt2var<mode>3_maskz_1 (\n@@ -14356,7 +14356,7 @@\n \t    (match_operand:VI48F_512 3 \"nonimmediate_operand\" \"vm\")]\n \t    UNSPEC_VPERMT2)\n \t  (match_dup 2)\n-\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"k\")))]\n+\t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512F\"\n   \"vpermt2<ssemodesuffix>\\t{%3, %1, %0%{%4%}|%0%{%4%}, %1, %3}\"\n   [(set_attr \"type\" \"sselog\")\n@@ -15164,7 +15164,7 @@\n \t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n \t\tUNSPEC_VSIBADDR)])]\n \t  UNSPEC_GATHER))\n-   (clobber (match_scratch:<avx512fmaskmode> 2 \"=&k\"))]\n+   (clobber (match_scratch:<avx512fmaskmode> 2 \"=&Yk\"))]\n   \"TARGET_AVX512F\"\n   \"v<sseintprefix>gatherd<ssemodesuffix>\\t{%6, %0%{%2%}|%0%{%2%}, %g6}\"\n   [(set_attr \"type\" \"ssemov\")\n@@ -15183,7 +15183,7 @@\n \t\t (match_operand:SI 4 \"const1248_operand\" \"n\")]\n \t\tUNSPEC_VSIBADDR)])]\n \t  UNSPEC_GATHER))\n-   (clobber (match_scratch:<avx512fmaskmode> 1 \"=&k\"))]\n+   (clobber (match_scratch:<avx512fmaskmode> 1 \"=&Yk\"))]\n   \"TARGET_AVX512F\"\n   \"v<sseintprefix>gatherd<ssemodesuffix>\\t{%5, %0%{%1%}|%0%{%1%}, %g5}\"\n   [(set_attr \"type\" \"ssemov\")\n@@ -15222,7 +15222,7 @@\n \t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n \t\tUNSPEC_VSIBADDR)])]\n \t  UNSPEC_GATHER))\n-   (clobber (match_scratch:QI 2 \"=&k\"))]\n+   (clobber (match_scratch:QI 2 \"=&Yk\"))]\n   \"TARGET_AVX512F\"\n   \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%6, %1%{%2%}|%1%{%2%}, %g6}\"\n   [(set_attr \"type\" \"ssemov\")\n@@ -15241,7 +15241,7 @@\n \t\t (match_operand:SI 4 \"const1248_operand\" \"n\")]\n \t\tUNSPEC_VSIBADDR)])]\n \t  UNSPEC_GATHER))\n-   (clobber (match_scratch:QI 1 \"=&k\"))]\n+   (clobber (match_scratch:QI 1 \"=&Yk\"))]\n   \"TARGET_AVX512F\"\n {\n   if (<MODE>mode != <VEC_GATHER_SRCDI>mode)\n@@ -15281,7 +15281,7 @@\n \t  [(match_operand:<avx512fmaskmode> 6 \"register_operand\" \"1\")\n \t   (match_operand:VI48F_512 3 \"register_operand\" \"v\")]\n \t  UNSPEC_SCATTER))\n-   (clobber (match_scratch:<avx512fmaskmode> 1 \"=&k\"))]\n+   (clobber (match_scratch:<avx512fmaskmode> 1 \"=&Yk\"))]\n   \"TARGET_AVX512F\"\n   \"v<sseintprefix>scatterd<ssemodesuffix>\\t{%3, %5%{%1%}|%5%{%1%}, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n@@ -15317,7 +15317,7 @@\n \t  [(match_operand:QI 6 \"register_operand\" \"1\")\n \t   (match_operand:<VEC_GATHER_SRCDI> 3 \"register_operand\" \"v\")]\n \t  UNSPEC_SCATTER))\n-   (clobber (match_scratch:QI 1 \"=&k\"))]\n+   (clobber (match_scratch:QI 1 \"=&Yk\"))]\n   \"TARGET_AVX512F\"\n   \"v<sseintprefix>scatterq<ssemodesuffix>\\t{%3, %5%{%1%}|%5%{%1%}, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n@@ -15329,7 +15329,7 @@\n \t(unspec:VI48F_512\n \t  [(match_operand:VI48F_512 1 \"register_operand\" \"v\")\n \t   (match_operand:VI48F_512 2 \"vector_move_operand\" \"0C\")\n-\t   (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"k\")]\n+\t   (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")]\n \t  UNSPEC_COMPRESS))]\n   \"TARGET_AVX512F\"\n   \"v<sseintprefix>compress<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n@@ -15342,7 +15342,7 @@\n \t(unspec:VI48F_512\n \t  [(match_operand:VI48F_512 1 \"register_operand\" \"x\")\n \t   (match_dup 0)\n-\t   (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"k\")]\n+\t   (match_operand:<avx512fmaskmode> 2 \"register_operand\" \"Yk\")]\n \t  UNSPEC_COMPRESS_STORE))]\n   \"TARGET_AVX512F\"\n   \"v<sseintprefix>compress<ssemodesuffix>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n@@ -15378,7 +15378,7 @@\n \t(unspec:VI48F_512\n \t  [(match_operand:VI48F_512 1 \"nonimmediate_operand\" \"v,m\")\n \t   (match_operand:VI48F_512 2 \"vector_move_operand\" \"0C,0C\")\n-\t   (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"k,k\")]\n+\t   (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")]\n \t  UNSPEC_EXPAND))]\n   \"TARGET_AVX512F\"\n   \"v<sseintprefix>expand<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\""}, {"sha": "9c630f7a087f7497d909a00b1d994a5577e86ed8", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=be792bce4fcab1a4a636545c69885b680eb74fca", "patch": "@@ -66,7 +66,7 @@\n         (vec_merge:SUBST_V\n \t  (match_dup 1)\n \t  (match_operand:SUBST_V 2 \"vector_move_operand\" \"0C\")\n-\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"k\")))])\n+\t  (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))])\n \n (define_subst_attr \"mask_scalar_merge_name\" \"mask_scalar_merge\" \"\" \"_mask\")\n (define_subst_attr \"mask_scalar_merge_operand3\" \"mask_scalar_merge\" \"\" \"%{%3%}\")\n@@ -79,7 +79,7 @@\n   [(set (match_dup 0)\n         (and:SUBST_S\n \t  (match_dup 1)\n-\t  (match_operand:SUBST_S 3 \"register_operand\" \"k\")))])\n+\t  (match_operand:SUBST_S 3 \"register_operand\" \"Yk\")))])\n \n (define_subst_attr \"sd_maskz_name\" \"sd\" \"\" \"_maskz_1\")\n (define_subst_attr \"sd_mask_op4\" \"sd\" \"\" \"%{%5%}%N4\")\n@@ -95,7 +95,7 @@\n        (vec_merge:SUBST_V\n \t (match_dup 1)\n \t (match_operand:SUBST_V 2 \"const0_operand\" \"C\")\n-\t (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"k\")))\n+\t (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))\n ])\n \n (define_subst_attr \"round_name\" \"round\" \"\" \"_round\")"}, {"sha": "44b4c01f9b29c86a2aaecef07a75d390a1b375b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be792bce4fcab1a4a636545c69885b680eb74fca", "patch": "@@ -1,3 +1,8 @@\n+2014-01-31  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* gcc.target/i386/avx512f-inline-asm.c: Swap Yk and k.\n+\t* gcc.target/i386/avx512f-kmovw-1.c: Also allow k0.\n+\n 2014-01-31  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/59990"}, {"sha": "2557eab644be105e8f97515ce8e71897148f314d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-inline-asm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-inline-asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-inline-asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-inline-asm.c?ref=be792bce4fcab1a4a636545c69885b680eb74fca", "patch": "@@ -42,8 +42,8 @@ avx512f_test (void)\n   msk_src2 = 0x0F0F;\n \n   asm (\"kandw\\t%2, %1, %0\"\n-       : \"=Yk\" (msk_dst)\n-       : \"Yk\" (msk_src1), \"Yk\" (msk_src2));\n+       : \"=k\" (msk_dst)\n+       : \"k\" (msk_src1), \"k\" (msk_src2));\n \n   msk_dst_ref =  _mm512_kand (msk_src1, msk_src2);\n   if (msk_dst != msk_dst_ref)\n@@ -59,7 +59,7 @@ avx512f_test (void)\n \n   asm (\"vpaddd\\t%2, %1, %0 %{%3%}%{z%}\"\n        : \"=x\" (dst.x)\n-       : \"x\" (src1.x), \"x\" (src2.x), \"k\" (msk_dst));\n+       : \"x\" (src1.x), \"x\" (src2.x), \"Yk\" (msk_dst));\n \n   calc_vpadd_mask_zeroed (dst_ref, msk_dst, src1.a, src2.a);\n "}, {"sha": "9c20472afca2fb5b2eba83fc825036c0d4eb3e2e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kmovw-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be792bce4fcab1a4a636545c69885b680eb74fca/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-1.c?ref=be792bce4fcab1a4a636545c69885b680eb74fca", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler \"kmovw\\[ \\\\t\\]+\\[^\\n\\]*%k\\[1-7\\]\" } } */\n+/* { dg-final { scan-assembler \"kmovw\\[ \\\\t\\]+\\[^\\n\\]*%k\\[0-7\\]\" } } */\n \n #include <immintrin.h>\n volatile __mmask16 k1;"}]}