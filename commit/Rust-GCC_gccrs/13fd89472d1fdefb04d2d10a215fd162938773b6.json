{"sha": "13fd89472d1fdefb04d2d10a215fd162938773b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNmZDg5NDcyZDFmZGVmYjA0ZDJkMTBhMjE1ZmQxNjI5Mzg3NzNiNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-11-26T16:49:20Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-11-26T16:49:20Z"}, "message": "sync.md (memory_barrier_nosse): Disable also for TARGET_64BIT.\n\n\t* config/i386/sync.md (memory_barrier_nosse): Disable also for\n\tTARGET_64BIT.  Remove special asm template for TARGET_64BIT case.\n\t(memory_barrier): Do not generate memory_barrier_nosse instruction\n\tfor TARGET_64BIT.\n\t* config/i386/sse.md (*sse2_mfence): Also enable for TARGET_64BIT.\n\nFrom-SVN: r142224", "tree": {"sha": "6f7ebfee7031b23d16d855839c19d331e91eb768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f7ebfee7031b23d16d855839c19d331e91eb768"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13fd89472d1fdefb04d2d10a215fd162938773b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13fd89472d1fdefb04d2d10a215fd162938773b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13fd89472d1fdefb04d2d10a215fd162938773b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13fd89472d1fdefb04d2d10a215fd162938773b6/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10b923de93e9c5198611c6d4f11d784d80ef75c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b923de93e9c5198611c6d4f11d784d80ef75c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b923de93e9c5198611c6d4f11d784d80ef75c8"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "8efb64aa46d3b36c3ac11f3a9cc061ae21668dcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13fd89472d1fdefb04d2d10a215fd162938773b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13fd89472d1fdefb04d2d10a215fd162938773b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13fd89472d1fdefb04d2d10a215fd162938773b6", "patch": "@@ -1,3 +1,11 @@\n+2008-11-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sync.md (memory_barrier_nosse): Disable also for\n+\tTARGET_64BIT.  Remove special asm template for TARGET_64BIT case.\n+\t(memory_barrier): Do not generate memory_barrier_nosse instruction\n+\tfor TARGET_64BIT.\n+\t* config/i386/sse.md (*sse2_mfence): Also enable for TARGET_64BIT.\n+\n 2008-11-26  Fredrik Unger  <fred@tree.se>\n \n \t* config/soft-fp/floatuntisf.c (__floatuntisf): Correct\n@@ -78,7 +86,7 @@\n 2008-11-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/38254\n-\t* config/i386/sync.md (memory_barrier_nosse): New insn\n+\t* config/i386/sync.md (memory_barrier_nosse): New insn pattern.\n \t(memory_barrier): Generate memory_barrier_nosse insn for !TARGET_SSE2.\n \n 2008-11-24  Maxim Kuvyrkov  <maxim@codesourcery.com>"}, {"sha": "997edc598ae3a2733104f3abb8b9adf3cd033e4e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13fd89472d1fdefb04d2d10a215fd162938773b6/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13fd89472d1fdefb04d2d10a215fd162938773b6/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=13fd89472d1fdefb04d2d10a215fd162938773b6", "patch": "@@ -7719,7 +7719,7 @@\n (define_insn \"*sse2_mfence\"\n   [(set (match_operand:BLK 0 \"\" \"\")\n \t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_64BIT || TARGET_SSE2\"\n   \"mfence\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"memory\" \"unknown\")])"}, {"sha": "4b36d452c4ae5ab7dc443fb982331e309504ef45", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13fd89472d1fdefb04d2d10a215fd162938773b6/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13fd89472d1fdefb04d2d10a215fd162938773b6/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=13fd89472d1fdefb04d2d10a215fd162938773b6", "patch": "@@ -39,7 +39,7 @@\n   operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n   MEM_VOLATILE_P (operands[0]) = 1;\n \n-  if (!TARGET_SSE2)\n+  if (!(TARGET_64BIT || TARGET_SSE2))\n     {\n       emit_insn (gen_memory_barrier_nosse (operands[0]));\n       DONE;\n@@ -50,14 +50,8 @@\n   [(set (match_operand:BLK 0 \"\" \"\")\n \t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))\n    (clobber (reg:CC FLAGS_REG))]\n-\n-  \"!TARGET_SSE2\"\n-{\n-  if (TARGET_64BIT)\n-    return \"lock{%;| }or{q}\\t{$0, (%%rsp)|QWORD PTR [rsp], 0}\";\n-  else\n-    return \"lock{%;| }or{l}\\t{$0, (%%esp)|DWORD PTR [esp], 0}\";\n-}\n+  \"!(TARGET_64BIT || TARGET_SSE2)\"\n+  \"lock{%;| }or{l}\\t{$0, (%%esp)|DWORD PTR [esp], 0}\"\n   [(set_attr \"memory\" \"unknown\")])\n \n ;; ??? It would be possible to use cmpxchg8b on pentium for DImode"}]}