{"sha": "d572e4397d3615c8f85d67913cc7e072417b0b8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU3MmU0Mzk3ZDM2MTVjOGY4NWQ2NzkxM2NjN2UwNzI0MTdiMGI4ZA==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-09-23T23:27:15Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2015-09-23T23:27:15Z"}, "message": "linux-atomic.c (__kernel_cmpxchg2): Reorder error checks.\n\n\t* config/pa/linux-atomic.c (__kernel_cmpxchg2): Reorder error checks.\n\t(__sync_fetch_and_##OP##_##WIDTH): Change result to match type of\n\t__kernel_cmpxchg2.\n\t(__sync_##OP##_and_fetch_##WIDTH): Likewise.\n\t(__sync_val_compare_and_swap_##WIDTH): Likewise.\n\t(__sync_bool_compare_and_swap_##WIDTH): Likewise.\n\t(__sync_lock_test_and_set_##WIDTH): Likewise.\n\t(__sync_lock_release_##WIDTH): Likewise.\n\t(__sync_fetch_and_##OP##_4): Change result to match type of\n\t__kernel_cmpxchg.\n\t(__sync_##OP##_and_fetch_4): Likewise.\n\t(__sync_val_compare_and_swap_4): Likewise.\n\t(__sync_bool_compare_and_swap_4): likewise.\n\t(__sync_lock_test_and_set_4): Likewise.\n\t(__sync_lock_release_4): Likewise.\n\t(FETCH_AND_OP_2): Add long long variants.\n\t(OP_AND_FETCH_2): Likewise.\n\t(COMPARE_AND_SWAP_2 ): Likewise.\n\t(SYNC_LOCK_TEST_AND_SET_2): Likewise.\n\t(SYNC_LOCK_RELEASE_2): Likewise.\n\t(__sync_bool_compare_and_swap_##WIDTH): Correct return.\n\nFrom-SVN: r228065", "tree": {"sha": "449066e8134e9a201f20c520942ac5c696fd817a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/449066e8134e9a201f20c520942ac5c696fd817a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d572e4397d3615c8f85d67913cc7e072417b0b8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d572e4397d3615c8f85d67913cc7e072417b0b8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d572e4397d3615c8f85d67913cc7e072417b0b8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d572e4397d3615c8f85d67913cc7e072417b0b8d/comments", "author": null, "committer": null, "parents": [{"sha": "9f59bddfbf2c345f831bc85dc6f28c894a3a1f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f59bddfbf2c345f831bc85dc6f28c894a3a1f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f59bddfbf2c345f831bc85dc6f28c894a3a1f0e"}], "stats": {"total": 84, "additions": 68, "deletions": 16}, "files": [{"sha": "f4c13aa0077bc2649ae17ab08013c7e60470e6cb", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d572e4397d3615c8f85d67913cc7e072417b0b8d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d572e4397d3615c8f85d67913cc7e072417b0b8d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=d572e4397d3615c8f85d67913cc7e072417b0b8d", "patch": "@@ -1,3 +1,27 @@\n+2015-09-23  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/linux-atomic.c (__kernel_cmpxchg2): Reorder error checks.\n+\t(__sync_fetch_and_##OP##_##WIDTH): Change result to match type of\n+\t__kernel_cmpxchg2.\n+\t(__sync_##OP##_and_fetch_##WIDTH): Likewise.\n+\t(__sync_val_compare_and_swap_##WIDTH): Likewise.\n+\t(__sync_bool_compare_and_swap_##WIDTH): Likewise.\n+\t(__sync_lock_test_and_set_##WIDTH): Likewise.\n+\t(__sync_lock_release_##WIDTH): Likewise.\n+\t(__sync_fetch_and_##OP##_4): Change result to match type of\n+\t__kernel_cmpxchg.\n+\t(__sync_##OP##_and_fetch_4): Likewise.\n+\t(__sync_val_compare_and_swap_4): Likewise.\n+\t(__sync_bool_compare_and_swap_4): likewise.\n+\t(__sync_lock_test_and_set_4): Likewise.\n+\t(__sync_lock_release_4): Likewise.\n+\t(FETCH_AND_OP_2): Add long long variants.\n+\t(OP_AND_FETCH_2): Likewise.\n+\t(COMPARE_AND_SWAP_2 ): Likewise.\n+\t(SYNC_LOCK_TEST_AND_SET_2): Likewise.\n+\t(SYNC_LOCK_RELEASE_2): Likewise.\n+\t(__sync_bool_compare_and_swap_##WIDTH): Correct return.\n+\n 2015-09-22  Kirill Yukhin <kirill.yukhin@intel.com>\n \n \t* libgcc/config/i386/cpuinfo.c (enum processor_features): Add"}, {"sha": "c5003430a5254487e9841781812bd1f6e2838436", "filename": "libgcc/config/pa/linux-atomic.c", "status": "modified", "additions": 44, "deletions": 16, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d572e4397d3615c8f85d67913cc7e072417b0b8d/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d572e4397d3615c8f85d67913cc7e072417b0b8d/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c?ref=d572e4397d3615c8f85d67913cc7e072417b0b8d", "patch": "@@ -88,12 +88,17 @@ __kernel_cmpxchg2 (void *mem, const void *oldval, const void *newval,\n \t: \"i\" (2)\n \t: \"r1\", \"r20\", \"r22\", \"r29\", \"r31\", \"fr4\", \"memory\"\n   );\n+\n+  /* If the kernel LWS call is successful, lws_ret contains 0.  */\n+  if (__builtin_expect (lws_ret == 0, 1))\n+    return 0;\n+\n   if (__builtin_expect (lws_errno == -EFAULT || lws_errno == -ENOSYS, 0))\n     __builtin_trap ();\n \n-  /* If the kernel LWS call fails, return EBUSY */\n-  if (!lws_errno && lws_ret)\n-    lws_errno = -EBUSY;\n+  /* If the kernel LWS call fails with no error, return -EBUSY */\n+  if (__builtin_expect (!lws_errno, 0))\n+    return -EBUSY;\n \n   return lws_errno;\n }\n@@ -111,7 +116,7 @@ __kernel_cmpxchg2 (void *mem, const void *oldval, const void *newval,\n   __sync_fetch_and_##OP##_##WIDTH (TYPE *ptr, TYPE val)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     TYPE tmp, newval;\t\t\t\t\t\t\t\\\n-    int failure;\t\t\t\t\t\t\t\\\n+    long failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n       tmp = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n@@ -122,6 +127,13 @@ __kernel_cmpxchg2 (void *mem, const void *oldval, const void *newval,\n     return tmp;\t\t\t\t\t\t\t\t\\\n   }\n \n+FETCH_AND_OP_2 (add,   , +, long long, 8, 3)\n+FETCH_AND_OP_2 (sub,   , -, long long, 8, 3)\n+FETCH_AND_OP_2 (or,    , |, long long, 8, 3)\n+FETCH_AND_OP_2 (and,   , &, long long, 8, 3)\n+FETCH_AND_OP_2 (xor,   , ^, long long, 8, 3)\n+FETCH_AND_OP_2 (nand, ~, &, long long, 8, 3)\n+\n FETCH_AND_OP_2 (add,   , +, short, 2, 1)\n FETCH_AND_OP_2 (sub,   , -, short, 2, 1)\n FETCH_AND_OP_2 (or,    , |, short, 2, 1)\n@@ -141,7 +153,7 @@ FETCH_AND_OP_2 (nand, ~, &, signed char, 1, 0)\n   __sync_##OP##_and_fetch_##WIDTH (TYPE *ptr, TYPE val)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     TYPE tmp, newval;\t\t\t\t\t\t\t\\\n-    int failure;\t\t\t\t\t\t\t\\\n+    long failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n       tmp = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n@@ -152,6 +164,13 @@ FETCH_AND_OP_2 (nand, ~, &, signed char, 1, 0)\n     return PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n   }\n \n+OP_AND_FETCH_2 (add,   , +, long long, 8, 3)\n+OP_AND_FETCH_2 (sub,   , -, long long, 8, 3)\n+OP_AND_FETCH_2 (or,    , |, long long, 8, 3)\n+OP_AND_FETCH_2 (and,   , &, long long, 8, 3)\n+OP_AND_FETCH_2 (xor,   , ^, long long, 8, 3)\n+OP_AND_FETCH_2 (nand, ~, &, long long, 8, 3)\n+\n OP_AND_FETCH_2 (add,   , +, short, 2, 1)\n OP_AND_FETCH_2 (sub,   , -, short, 2, 1)\n OP_AND_FETCH_2 (or,    , |, short, 2, 1)\n@@ -170,7 +189,8 @@ OP_AND_FETCH_2 (nand, ~, &, signed char, 1, 0)\n   int HIDDEN\t\t\t\t\t\t\t\t\\\n   __sync_fetch_and_##OP##_4 (int *ptr, int val)\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    int failure, tmp;\t\t\t\t\t\t\t\\\n+    int tmp;\t\t\t\t\t\t\t\t\\\n+    long failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n       tmp = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n@@ -191,7 +211,8 @@ FETCH_AND_OP_WORD (nand, ~, &)\n   int HIDDEN\t\t\t\t\t\t\t\t\\\n   __sync_##OP##_and_fetch_4 (int *ptr, int val)\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    int tmp, failure;\t\t\t\t\t\t\t\\\n+    int tmp;\t\t\t\t\t\t\t\t\\\n+    long failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n       tmp = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n@@ -216,7 +237,7 @@ typedef unsigned char bool;\n \t\t\t\t       TYPE newval)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     TYPE actual_oldval;\t\t\t\t\t\t\t\\\n-    int fail;\t\t\t\t\t\t\t\t\\\n+    long fail;\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     while (1)\t\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n@@ -236,17 +257,19 @@ typedef unsigned char bool;\n   __sync_bool_compare_and_swap_##WIDTH (TYPE *ptr, TYPE oldval,\t\t\\\n \t\t\t\t\tTYPE newval)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    int failure = __kernel_cmpxchg2 (ptr, &oldval, &newval, INDEX);\t\\\n-    return (failure != 0);\t\t\t\t\t\t\\\n+    long failure = __kernel_cmpxchg2 (ptr, &oldval, &newval, INDEX);\t\\\n+    return (failure == 0);\t\t\t\t\t\t\\\n   }\n \n+COMPARE_AND_SWAP_2 (long long, 8, 3)\n COMPARE_AND_SWAP_2 (short, 2, 1)\n COMPARE_AND_SWAP_2 (char, 1, 0)\n \n int HIDDEN\n __sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n {\n-  int actual_oldval, fail;\n+  long fail;\n+  int actual_oldval;\n     \n   while (1)\n     {\n@@ -265,7 +288,7 @@ __sync_val_compare_and_swap_4 (int *ptr, int oldval, int newval)\n bool HIDDEN\n __sync_bool_compare_and_swap_4 (int *ptr, int oldval, int newval)\n {\n-  int failure = __kernel_cmpxchg (ptr, oldval, newval);\n+  long failure = __kernel_cmpxchg (ptr, oldval, newval);\n   return (failure == 0);\n }\n \n@@ -274,7 +297,7 @@ TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n   __sync_lock_test_and_set_##WIDTH (TYPE *ptr, TYPE val)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     TYPE oldval;\t\t\t\t\t\t\t\\\n-    int failure;\t\t\t\t\t\t\t\\\n+    long failure;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\t\\\n       oldval = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\t\\\n@@ -284,13 +307,15 @@ TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n     return oldval;\t\t\t\t\t\t\t\\\n   }\n \n+SYNC_LOCK_TEST_AND_SET_2 (long long, 8, 3)\n SYNC_LOCK_TEST_AND_SET_2 (short, 2, 1)\n SYNC_LOCK_TEST_AND_SET_2 (signed char, 1, 0)\n \n int HIDDEN\n __sync_lock_test_and_set_4 (int *ptr, int val)\n {\n-  int failure, oldval;\n+  long failure;\n+  int oldval;\n \n   do {\n     oldval = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\n@@ -304,21 +329,24 @@ __sync_lock_test_and_set_4 (int *ptr, int val)\n   void HIDDEN\t\t\t\t\t\t\t\\\n   __sync_lock_release_##WIDTH (TYPE *ptr)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    TYPE failure, oldval, zero = 0;\t\t\t\t\\\n+    TYPE oldval, zero = 0;\t\t\t\t\t\\\n+    long failure;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\\\n       oldval = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);\t\t\\\n       failure = __kernel_cmpxchg2 (ptr, &oldval, &zero, INDEX);\t\\\n     } while (failure != 0);\t\t\t\t\t\\\n   }\n \n+SYNC_LOCK_RELEASE_2 (long long, 8, 3)\n SYNC_LOCK_RELEASE_2 (short, 2, 1)\n SYNC_LOCK_RELEASE_2 (signed char, 1, 0)\n \n void HIDDEN\n __sync_lock_release_4 (int *ptr)\n {\n-  int failure, oldval;\n+  long failure;\n+  int oldval;\n \n   do {\n     oldval = __atomic_load_n (ptr, __ATOMIC_SEQ_CST);"}]}