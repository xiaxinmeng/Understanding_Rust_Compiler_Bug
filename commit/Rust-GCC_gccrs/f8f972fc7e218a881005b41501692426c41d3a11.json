{"sha": "f8f972fc7e218a881005b41501692426c41d3a11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhmOTcyZmM3ZTIxOGE4ODEwMDViNDE1MDE2OTI0MjZjNDFkM2ExMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-27T10:32:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-27T10:32:14Z"}, "message": "re PR middle-end/49177 (FAIL: gcc.dg/vect/fast-math-ifcvt-1.c)\n\n2011-05-27  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/49177\n\t* fold-const.c (fold_unary_loc): Fold (T)(A CMP B) to\n\tA CMP B ? (T) true : (T) false for non-integral types T again.\n\nFrom-SVN: r174326", "tree": {"sha": "1c87eacf286a398e092186fd6e426d14517215cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c87eacf286a398e092186fd6e426d14517215cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8f972fc7e218a881005b41501692426c41d3a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f972fc7e218a881005b41501692426c41d3a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f972fc7e218a881005b41501692426c41d3a11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f972fc7e218a881005b41501692426c41d3a11/comments", "author": null, "committer": null, "parents": [{"sha": "51a9ed47c9b664c30f7fc8693080f7059ec486e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a9ed47c9b664c30f7fc8693080f7059ec486e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a9ed47c9b664c30f7fc8693080f7059ec486e5"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "14151341640391e8bdf2f2be65336c175f7b04aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f972fc7e218a881005b41501692426c41d3a11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f972fc7e218a881005b41501692426c41d3a11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8f972fc7e218a881005b41501692426c41d3a11", "patch": "@@ -1,21 +1,30 @@\n+2011-05-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/49177\n+\t* fold-const.c (fold_unary_loc): Fold (T)(A CMP B) to\n+\tA CMP B ? (T) true : (T) false for non-integral types T again.\n+\n 2011-05-27  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-streamer-out.c (lto_string_index): break out from...; offset by 1\n \tso 0 means NULL string.\n \t(lto_output_string_with_length): ... here.\n-\t(lto_output_string, output_string_cst, output_identifier): Update handling\n-\tof NULL strings.\n+\t(lto_output_string, output_string_cst, output_identifier): Update\n+\thandling of NULL strings.\n \t(lto_output_location_bitpack): New function.\n \t(lto_output_location): Use it.\n \t(lto_output_tree_ref): Use output_record_start.\n-\t(pack_ts_type_common_value_fields): Pack aliagn & alias set in var len values.\n-\t* lto-streamer-in.c (string_for_index): Break out from ...; offset values by 1.\n+\t(pack_ts_type_common_value_fields): Pack aliagn & alias set in var\n+\tlen values.\n+\t* lto-streamer-in.c (string_for_index): Break out from ...; offset\n+\tvalues by 1.\n \t(input_string_internal): ... here; \n-\t(input_string_cst, input_identifier, lto_input_string): Update handling of\n-\tNULL strings.\n+\t(input_string_cst, input_identifier, lto_input_string): Update handling\n+\tof NULL strings.\n \t(lto_input_location_bitpack): New function\n \t(lto_input_location): Use it.\n-\t(unpack_ts_type_common_value_fields): Pack align & alias in var len values.\n+\t(unpack_ts_type_common_value_fields): Pack align & alias in var len\n+\tvalues.\n \t* lto-streamer.h (bp_pack_val_len_unsigned, bp_pack_val_len_int,\n \tbp_unpack_val_len_unsigned, bp_unpack_val_len_int): Declare.\n \t(bp_pack_value): Sanity check the value range."}, {"sha": "ebb1d34d5f4cd7aa210ffdc218b1421a8d436ac8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f972fc7e218a881005b41501692426c41d3a11/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f972fc7e218a881005b41501692426c41d3a11/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f8f972fc7e218a881005b41501692426c41d3a11", "patch": "@@ -7657,11 +7657,19 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n       if (TREE_TYPE (op0) == type)\n \treturn op0;\n \n-      /* If we have (type) (a CMP b) and type is an integral type, return\n-         new expression involving the new type.  */\n-      if (COMPARISON_CLASS_P (op0) && INTEGRAL_TYPE_P (type))\n-\treturn fold_build2_loc (loc, TREE_CODE (op0), type, TREE_OPERAND (op0, 0),\n-\t\t\t    TREE_OPERAND (op0, 1));\n+      if (COMPARISON_CLASS_P (op0))\n+\t{\n+\t  /* If we have (type) (a CMP b) and type is an integral type, return\n+\t     new expression involving the new type.  */\n+\t  if (INTEGRAL_TYPE_P (type))\n+\t    return fold_build2_loc (loc, TREE_CODE (op0), type,\n+\t\t\t\t    TREE_OPERAND (op0, 0),\n+\t\t\t\t    TREE_OPERAND (op0, 1));\n+\t  else\n+\t    return fold_build3_loc (loc, COND_EXPR, type, op0,\n+\t\t\t\t    fold_convert (type, boolean_true_node),\n+\t\t\t\t    fold_convert (type, boolean_false_node));\n+\t}\n \n       /* Handle cases of two conversions in a row.  */\n       if (CONVERT_EXPR_P (op0))"}]}