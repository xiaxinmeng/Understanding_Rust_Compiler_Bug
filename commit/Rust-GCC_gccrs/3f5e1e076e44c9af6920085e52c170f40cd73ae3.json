{"sha": "3f5e1e076e44c9af6920085e52c170f40cd73ae3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y1ZTFlMDc2ZTQ0YzlhZjY5MjAwODVlNTJjMTcwZjQwY2Q3M2FlMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T08:30:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T08:30:49Z"}, "message": "[multiple changes]\n\n2012-10-01  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.ads: Minor reformatting.\n\n2012-10-01  Yannick Moy  <moy@adacore.com>\n\n\t* types.ads, sem_prag.adb, sem.ads: Correct minor typos in comments.\n\nFrom-SVN: r191897", "tree": {"sha": "d8ac9831b4a2ca7cd48c070ef27d4e70565995d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8ac9831b4a2ca7cd48c070ef27d4e70565995d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f5e1e076e44c9af6920085e52c170f40cd73ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5e1e076e44c9af6920085e52c170f40cd73ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5e1e076e44c9af6920085e52c170f40cd73ae3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5e1e076e44c9af6920085e52c170f40cd73ae3/comments", "author": null, "committer": null, "parents": [{"sha": "05b34c1837a1170b534e532801b0ac8126726e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05b34c1837a1170b534e532801b0ac8126726e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05b34c1837a1170b534e532801b0ac8126726e66"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "71b6339663620cc157023a9f73c128e2cd347b81", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5e1e076e44c9af6920085e52c170f40cd73ae3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5e1e076e44c9af6920085e52c170f40cd73ae3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3f5e1e076e44c9af6920085e52c170f40cd73ae3", "patch": "@@ -1,3 +1,11 @@\n+2012-10-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.ads: Minor reformatting.\n+\n+2012-10-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* types.ads, sem_prag.adb, sem.ads: Correct minor typos in comments.\n+\n 2012-10-01  Vincent Celier  <celier@adacore.com>\n \n \t* make.adb (Scan_Make_Arg): Only test for \"vP\" of the option"}, {"sha": "153d1815ef13fcd1b7dbb3bd91a939b18d268fd4", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5e1e076e44c9af6920085e52c170f40cd73ae3/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5e1e076e44c9af6920085e52c170f40cd73ae3/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=3f5e1e076e44c9af6920085e52c170f40cd73ae3", "patch": "@@ -211,18 +211,18 @@ package Checks is\n       Hi           : out Uint;\n       Assume_Valid : Boolean := False);\n    --  N is a node for a subexpression. If N is of a discrete type with no\n-   --  error indications, and no other peculiarities (e.g. missing type\n-   --  fields), then OK is True on return, and Lo and Hi are set to a\n-   --  conservative estimate of the possible range of values of N. Thus if OK\n-   --  is True on return, the value of the subexpression N is known to like in\n-   --  the range Lo .. Hi (inclusive). If the expression is not of a discrete\n-   --  type, or some kind of error condition is detected, then OK is False on\n-   --  exit, and Lo/Hi are set to No_Uint. Thus the significance of OK being\n-   --  False on return is that no useful information is available on the range\n-   --  of the expression. Assume_Valid determines whether the processing is\n-   --  allowed to assume that values are in range of their subtypes. If it is\n-   --  set to True, then this assumption is valid, if False, then processing\n-   --  is done using base types to allow invalid values.\n+   --  error indications, and no other peculiarities (e.g. missing Etype),\n+   --  then OK is True on return, and Lo and Hi are set to a conservative\n+   --  estimate of the possible range of values of N. Thus if OK is True on\n+   --  return, the value of the subexpression N is known to lie in the range\n+   --  Lo .. Hi (inclusive). If the expression is not of a discrete type, or\n+   --  some kind of error condition is detected, then OK is False on exit, and\n+   --  Lo/Hi are set to No_Uint. Thus the significance of OK being False on\n+   --  return is that no useful information is available on the range of the\n+   --  expression. Assume_Valid determines whether the processing is allowed to\n+   --  assume that values are in range of their subtypes. If it is set to True,\n+   --  then this assumption is valid, if False, then processing is done using\n+   --  base types to allow invalid values.\n \n    procedure Install_Null_Excluding_Check (N : Node_Id);\n    --  Determines whether an access node requires a runtime access check and"}, {"sha": "da6eb52c22851f45bf305602f22f15f383e1f74f", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5e1e076e44c9af6920085e52c170f40cd73ae3/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5e1e076e44c9af6920085e52c170f40cd73ae3/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=3f5e1e076e44c9af6920085e52c170f40cd73ae3", "patch": "@@ -291,10 +291,10 @@ package Sem is\n \n    --  Scope based suppress checks for the predefined checks (from initial\n    --  command line arguments, or from Suppress pragmas not including an entity\n-   --  entity name) are recorded in the Sem.Suppress variable, and all that is\n-   --  necessary is to save the state of this variable on scope entry, and\n-   --  restore it on scope exit. This mechanism allows for fast checking of\n-   --  the scope suppress state without needing complex data structures.\n+   --  name) are recorded in the Sem.Scope_Suppress variable, and all that\n+   --  is necessary is to save the state of this variable on scope entry, and\n+   --  restore it on scope exit. This mechanism allows for fast checking of the\n+   --  scope suppress state without needing complex data structures.\n \n    --  Entity based checks, from Suppress/Unsuppress pragmas giving an\n    --  Entity_Id and scope based checks for non-predefined checks (introduced\n@@ -322,11 +322,11 @@ package Sem is\n    --  This variable contains the current scope based settings of the suppress\n    --  switches. It is initialized from Suppress_Options in Gnat1drv, and then\n    --  modified by pragma Suppress. On entry to each scope, the current setting\n-   --  is saved the scope stack, and then restored on exit from the scope. This\n-   --  record may be rapidly checked to determine the current status of a check\n-   --  if no specific entity is involved or if the specific entity involved is\n-   --  one for which no specific Suppress/Unsuppress pragma has been set (as\n-   --  indicated by the Checks_May_Be_Suppressed flag being set).\n+   --  is saved on the scope stack, and then restored on exit from the scope.\n+   --  This record may be rapidly checked to determine the current status of\n+   --  a check if no specific entity is involved or if the specific entity\n+   --  involved is one for which no specific Suppress/Unsuppress pragma has\n+   --  been set (as indicated by the Checks_May_Be_Suppressed flag being set).\n \n    --  This scheme is a little complex, but serves the purpose of enabling\n    --  a very rapid check in the common case where no entity specific pragma"}, {"sha": "a9c1af7b2b574d1e21d30c21d9d61c0db6868952", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5e1e076e44c9af6920085e52c170f40cd73ae3/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5e1e076e44c9af6920085e52c170f40cd73ae3/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3f5e1e076e44c9af6920085e52c170f40cd73ae3", "patch": "@@ -11761,7 +11761,7 @@ package body Sem_Prag is\n          ---------------------\n \n          --  pragma Overflow_Checks\n-         --    ([General => ] MODE [, [Assertions => ] MODE);\n+         --    ([General => ] MODE [, [Assertions => ] MODE]);\n \n          --  MODE := SUPPRESSED | CHECKED | MINIMIZED | ELIMINATED\n "}, {"sha": "97d2646af72e602748db618b91213e1c44a4b8d8", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5e1e076e44c9af6920085e52c170f40cd73ae3/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5e1e076e44c9af6920085e52c170f40cd73ae3/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=3f5e1e076e44c9af6920085e52c170f40cd73ae3", "patch": "@@ -741,7 +741,7 @@ package Types is\n    type Suppress_Record is record\n       Suppress : Suppress_Array;\n       --  Indicates suppression status of each possible check. Note: there\n-      --  is an entry for Overflow_Checks in this array, but it is never used.\n+      --  is an entry for Overflow_Check in this array, but it is never used.\n       --  Instead we use the more detailed information in the two components\n       --  that follow this one (Overflow_Checks_General/Assertions).\n \n@@ -750,8 +750,8 @@ package Types is\n       --  general expressions outside assertions.\n \n       Overflow_Checks_Assertions : Overflow_Check_Type;\n-      --  This field  indicates the mode of overflow checking to be applied to\n-      --  any expressions occuring inside assertions.\n+      --  This field indicates the mode of overflow checking to be applied to\n+      --  any expression occuring inside assertions.\n    end record;\n \n    Suppress_All : constant Suppress_Record :="}]}