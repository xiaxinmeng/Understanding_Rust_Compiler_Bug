{"sha": "7926a220d853e7c28576e69f90eab1aff684c5ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkyNmEyMjBkODUzZTdjMjg1NzZlNjlmOTBlYWIxYWZmNjg0YzVhZA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2019-09-23T19:28:10Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2019-09-23T19:28:10Z"}, "message": "2019-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_vfp_ok_nocache): New.\n\t(check_effective_target_arm_vfp_ok): Rewrite.\n\t(add_options_for_arm_vfp): New.\n\t(add_options_for_sqrt_insn): Add options for arm.\n\t* gcc.target/arm/attr-neon-builtin-fail2.c: Use dg-add-options.\n\t* gcc.target/arm/short-vfp-1.c: Likewise.\n\nFrom-SVN: r276063", "tree": {"sha": "a8b354e68fbbdfcd0687a39302c59ba0781864d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8b354e68fbbdfcd0687a39302c59ba0781864d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7926a220d853e7c28576e69f90eab1aff684c5ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7926a220d853e7c28576e69f90eab1aff684c5ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7926a220d853e7c28576e69f90eab1aff684c5ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7926a220d853e7c28576e69f90eab1aff684c5ad/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33ba6ac3912614d2e2c5bb1bad2f4f069525e700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ba6ac3912614d2e2c5bb1bad2f4f069525e700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ba6ac3912614d2e2c5bb1bad2f4f069525e700"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "a9b108db1dd9c46a43a9702fc134eead1edeaec8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7926a220d853e7c28576e69f90eab1aff684c5ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7926a220d853e7c28576e69f90eab1aff684c5ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7926a220d853e7c28576e69f90eab1aff684c5ad", "patch": "@@ -1,3 +1,13 @@\n+2019-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_vfp_ok_nocache): New.\n+\t(check_effective_target_arm_vfp_ok): Rewrite.\n+\t(add_options_for_arm_vfp): New.\n+\t(add_options_for_sqrt_insn): Add options for arm.\n+\t* gcc.target/arm/attr-neon-builtin-fail2.c: Use dg-add-options.\n+\t* gcc.target/arm/short-vfp-1.c: Likewise.\n+\n 2019-09-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91844 - Implement CWG 2352, Similar types and reference binding."}, {"sha": "9cb5a2ebb9050d9ef2273558a050386a9096e6d2", "filename": "gcc/testsuite/gcc.target/arm/attr-neon-builtin-fail2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7926a220d853e7c28576e69f90eab1aff684c5ad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-builtin-fail2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7926a220d853e7c28576e69f90eab1aff684c5ad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-builtin-fail2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-builtin-fail2.c?ref=7926a220d853e7c28576e69f90eab1aff684c5ad", "patch": "@@ -1,7 +1,8 @@\n /* Check that calling a neon builtin from a function compiled with vfp fails.  */\n /* { dg-do compile } */\n /* { dg-require-effective-target arm_vfp_ok } */\n-/* { dg-options \"-O2 -mfloat-abi=softfp\" } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_vfp } */\n \n extern __simd64_int8_t a, b;\n "}, {"sha": "3ca1ffc00173e00bf333a4d3662ba0ab68b51628", "filename": "gcc/testsuite/gcc.target/arm/short-vfp-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7926a220d853e7c28576e69f90eab1aff684c5ad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fshort-vfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7926a220d853e7c28576e69f90eab1aff684c5ad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fshort-vfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fshort-vfp-1.c?ref=7926a220d853e7c28576e69f90eab1aff684c5ad", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target arm_vfp_ok }\n-/* { dg-options \"-mfpu=vfp\" } */\n+/* { dg-add-options arm_vfp } */\n \n int\n test_sisf (float x)"}, {"sha": "6a1aaca9691b7fe9ae5e0e5b1874c7af34a3a6e3", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7926a220d853e7c28576e69f90eab1aff684c5ad/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7926a220d853e7c28576e69f90eab1aff684c5ad/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=7926a220d853e7c28576e69f90eab1aff684c5ad", "patch": "@@ -3489,18 +3489,43 @@ proc check_effective_target_arm_soft_ok { } {\n     }\n }\n \n-# Return 1 if this is an ARM target supporting -mfpu=vfp\n-# -mfloat-abi=softfp.  Some multilibs may be incompatible with these\n-# options.\n+# Return 1 if this is an ARM target supporting -mfpu=vfp with an\n+# appropriate abi.\n \n-proc check_effective_target_arm_vfp_ok { } {\n+proc check_effective_target_arm_vfp_ok_nocache { } {\n+    global et_arm_vfp_flags\n+    set et_arm_vfp_flags \"\"\n     if { [check_effective_target_arm32] } {\n-\treturn [check_no_compiler_messages arm_vfp_ok object {\n-\t    int dummy;\n-\t} \"-mfpu=vfp -mfloat-abi=softfp\"]\n-    } else {\n-\treturn 0\n+\tforeach flags {\"-mfpu=vfp\" \"-mfpu=vfp -mfloat-abi=softfp\" \"-mpu=vfp -mfloat-abi=hard\"} {\n+\t    if { [check_no_compiler_messages_nocache arm_fp_ok object {\n+\t\t#ifndef __ARM_FP\n+\t\t#error __ARM_FP not defined\n+\t\t#endif\n+\t    } \"$flags\"] } {\n+\t\tset et_arm_vfp_flags $flags\n+\t\treturn 1\n+\t    }\n+\t}\n     }\n+\n+    return 0\n+}\n+\n+proc check_effective_target_arm_vfp_ok { } {\n+    return [check_cached_effective_target arm_vfp_ok \\\n+\t\tcheck_effective_target_arm_vfp_ok_nocache]\n+}\n+\n+# Add the options needed to compile code with -mfpu=vfp.  We need either\n+# -mfloat-abi=softfp or -mfloat-abi=hard, but if one is already\n+# specified by the multilib, use it.\n+\n+proc add_options_for_arm_vfp { flags } {\n+    if { ! [check_effective_target_arm_vfp_ok] } {\n+\treturn \"$flags\"\n+    }\n+    global et_arm_vfp_flags\n+    return \"$flags $et_arm_vfp_flags\"\n }\n \n # Return 1 if this is an ARM target supporting -mfpu=vfp3\n@@ -6678,6 +6703,9 @@ proc add_options_for_sqrt_insn { flags } {\n     if { [istarget amdgcn*-*-*] } {\n \treturn \"$flags -ffast-math\"\n     }\n+    if { [istarget arm*-*-*] } {\n+\treturn [add_options_for_arm_vfp \"$flags\"]\n+    }\n     return $flags\n }\n "}]}