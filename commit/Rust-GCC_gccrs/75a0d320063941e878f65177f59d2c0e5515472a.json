{"sha": "75a0d320063941e878f65177f59d2c0e5515472a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhMGQzMjAwNjM5NDFlODc4ZjY1MTc3ZjU5ZDJjMGU1NTE1NDcyYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-09-30T17:10:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-09-30T17:10:35Z"}, "message": "re PR c++/16564 (g++ seems to go into an infinite loop after errors)\n\ncp/\n2014-09-30  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n       PR c++/16564\n       * error.c (print_instantiation_context): Delete.\n       * typeck2.c (build_x_arrow): Record location when pushing\n       template instantiation.\n       * pt.c (push_tinst_level): Make it a wrapper around ...\n       (push_tinst_level_loc): ... this. New function. Make excessive\n       template instantiation depth a fatal error. Record location. Use\n       bool as return type.\n       (instantiate_pending_templates): Make excessive\n       template instantiation depth a fatal error.\n       (problematic_instantiation_changed): Use bool as return type.\n       * cp-tree.h (print_instantiation_context): Delete.\n       (push_tinst_level): Update declaration.\n       (problematic_instantiation_changed): Likewise.\n       (push_tinst_level_loc): New.\n\ntestsuite/\n2014-09-30  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n       PR c++/16564\n       * lib/gcc.exp: Accept \"fatal error:\" as error prefix.\n       * lib/g++.exp: Likewise.\n       * lib/obj-c++.exp: Likewise.\n       * lib/objc.exp: Likewise.\n       * g++.dg/template/pr16564.C: New test.\n\n2014-09-30  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/16564\n\t* g++.dg/cpp0x/decltype26.C: Adjust.\n\t* g++.dg/cpp0x/decltype28.C: Likewise.\n\t* g++.dg/cpp0x/decltype29.C: Likewise.\n\t* g++.dg/cpp0x/decltype32.C: Likewise.\n\t* g++.dg/cpp0x/enum11.C: Likewise.\n\t* g++.dg/template/arrow1.C: Likewise.\n\t* g++.dg/template/pr23510.C: Likewise.\n\t* g++.dg/template/recurse.C: Likewise.\n\t* g++.dg/template/recurse2.C: Likewise.\n\t* g++.dg/template/vtable2.C: Likewise.\n\t* g++.old-deja/g++.pt/infinite1.C: Likewise.\n\nFrom-SVN: r215733", "tree": {"sha": "5132174a9e3a445876514de05089e31579631785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5132174a9e3a445876514de05089e31579631785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75a0d320063941e878f65177f59d2c0e5515472a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a0d320063941e878f65177f59d2c0e5515472a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a0d320063941e878f65177f59d2c0e5515472a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a0d320063941e878f65177f59d2c0e5515472a/comments", "author": null, "committer": null, "parents": [{"sha": "cc811a8ae6c760955ac2dca51d8359d003c8e4f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc811a8ae6c760955ac2dca51d8359d003c8e4f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc811a8ae6c760955ac2dca51d8359d003c8e4f2"}], "stats": {"total": 193, "additions": 115, "deletions": 78}, "files": [{"sha": "3fe3f8d5775a41fc31d3afa5f532a4208e1aad1b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -1,3 +1,21 @@\n+2014-09-30  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+       PR c++/16564\n+       * error.c (print_instantiation_context): Delete.\n+       * typeck2.c (build_x_arrow): Record location when pushing\n+       template instantiation.\n+       * pt.c (push_tinst_level): Make it a wrapper around ...\n+       (push_tinst_level_loc): ... this. New function. Make excessive\n+       template instantiation depth a fatal error. Record location. Use\n+       bool as return type.\n+       (instantiate_pending_templates): Make excessive\n+       template instantiation depth a fatal error.\n+       (problematic_instantiation_changed): Use bool as return type.\n+       * cp-tree.h (print_instantiation_context): Delete.\n+       (push_tinst_level): Update declaration.\n+       (problematic_instantiation_changed): Likewise.\n+       (push_tinst_level_loc): New.\n+\n 2014-09-29  Richard Biener  <rguenther@suse.de>\n \n \t* typeck.c (enum_cast_to_int): Use CONVERT_EXPR_P to check"}, {"sha": "f0783abff2debcd5401c01785bf0f6192b297d77", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -5418,7 +5418,6 @@ extern const char *lang_decl_name\t\t(tree, int, bool);\n extern const char *lang_decl_dwarf_name\t\t(tree, int, bool);\n extern const char *language_to_string\t\t(enum languages);\n extern const char *class_key_or_enum_as_string\t(tree);\n-extern void print_instantiation_context\t\t(void);\n extern void maybe_warn_variadic_templates       (void);\n extern void maybe_warn_cpp0x\t\t\t(cpp0x_warn_str str);\n extern bool pedwarn_cxx98                       (location_t, int, const char *, ...) ATTRIBUTE_GCC_DIAG(3,4);\n@@ -5633,7 +5632,7 @@ extern tree tsubst_copy_and_build\t\t(tree, tree, tsubst_flags_t,\n \t\t\t\t\t\t tree, bool, bool);\n extern tree most_general_template\t\t(tree);\n extern tree get_mostly_instantiated_function_type (tree);\n-extern int problematic_instantiation_changed\t(void);\n+extern bool problematic_instantiation_changed\t(void);\n extern void record_last_problematic_instantiation (void);\n extern struct tinst_level *current_instantiation(void);\n extern tree maybe_get_template_decl_from_type_decl (tree);\n@@ -5661,7 +5660,8 @@ extern tree fold_non_dependent_expr_sfinae\t(tree, tsubst_flags_t);\n extern bool alias_type_or_template_p            (tree);\n extern bool alias_template_specialization_p     (const_tree);\n extern bool explicit_class_specialization_p     (tree);\n-extern int push_tinst_level                     (tree);\n+extern bool push_tinst_level                    (tree);\n+extern bool push_tinst_level_loc                (tree, location_t);\n extern void pop_tinst_level                     (void);\n extern struct tinst_level *outermost_tinst_level(void);\n extern void init_template_processing\t\t(void);"}, {"sha": "57f3c31972d221a0b3de2ca50bf2f1a5e0b9273f", "filename": "gcc/cp/error.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -3360,16 +3360,6 @@ maybe_print_instantiation_context (diagnostic_context *context)\n   record_last_problematic_instantiation ();\n   print_instantiation_full_context (context);\n }\n-\n-/* Report the bare minimum context of a template instantiation.  */\n-void\n-print_instantiation_context (void)\n-{\n-  print_instantiation_partial_context\n-    (global_dc, current_instantiation (), input_location);\n-  pp_newline (global_dc->printer);\n-  diagnostic_flush_buffer (global_dc);\n-}\n \f\n /* Report what constexpr call(s) we're trying to expand, if any.  */\n "}, {"sha": "9dd61f3608baa1e7f37af4b51415cb93221c36cd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -8347,37 +8347,37 @@ static GTY(()) struct tinst_level *last_error_tinst_level;\n /* We're starting to instantiate D; record the template instantiation context\n    for diagnostics and to restore it later.  */\n \n-int\n+bool\n push_tinst_level (tree d)\n+{\n+  return push_tinst_level_loc (d, input_location);\n+}\n+\n+/* We're starting to instantiate D; record the template instantiation context\n+   at LOC for diagnostics and to restore it later.  */\n+\n+bool\n+push_tinst_level_loc (tree d, location_t loc)\n {\n   struct tinst_level *new_level;\n \n   if (tinst_depth >= max_tinst_depth)\n     {\n-      last_error_tinst_level = current_tinst_level;\n-      if (TREE_CODE (d) == TREE_LIST)\n-\terror (\"template instantiation depth exceeds maximum of %d (use \"\n-\t       \"-ftemplate-depth= to increase the maximum) substituting %qS\",\n-\t       max_tinst_depth, d);\n-      else\n-\terror (\"template instantiation depth exceeds maximum of %d (use \"\n-\t       \"-ftemplate-depth= to increase the maximum) instantiating %qD\",\n-\t       max_tinst_depth, d);\n-\n-      print_instantiation_context ();\n-\n-      return 0;\n+      fatal_error (\"template instantiation depth exceeds maximum of %d\"\n+                   \" (use -ftemplate-depth= to increase the maximum)\",\n+                   max_tinst_depth);\n+      return false;\n     }\n \n   /* If the current instantiation caused problems, don't let it instantiate\n      anything else.  Do allow deduction substitution and decls usable in\n      constant expressions.  */\n   if (limit_bad_template_recursion (d))\n-    return 0;\n+    return false;\n \n   new_level = ggc_alloc<tinst_level> ();\n   new_level->decl = d;\n-  new_level->locus = input_location;\n+  new_level->locus = loc;\n   new_level->errors = errorcount+sorrycount;\n   new_level->in_system_header_p = in_system_header_at (input_location);\n   new_level->next = current_tinst_level;\n@@ -8387,7 +8387,7 @@ push_tinst_level (tree d)\n   if (GATHER_STATISTICS && (tinst_depth > depth_reached))\n     depth_reached = tinst_depth;\n \n-  return 1;\n+  return true;\n }\n \n /* We're done instantiating this template; return to the instantiation\n@@ -20291,10 +20291,10 @@ instantiate_pending_templates (int retries)\n     {\n       tree decl = pending_templates->tinst->decl;\n \n-      error (\"template instantiation depth exceeds maximum of %d\"\n-\t     \" instantiating %q+D, possibly from virtual table generation\"\n-\t     \" (use -ftemplate-depth= to increase the maximum)\",\n-\t     max_tinst_depth, decl);\n+      fatal_error (\"template instantiation depth exceeds maximum of %d\"\n+                   \" instantiating %q+D, possibly from virtual table generation\"\n+                   \" (use -ftemplate-depth= to increase the maximum)\",\n+                   max_tinst_depth, decl);\n       if (TREE_CODE (decl) == FUNCTION_DECL)\n \t/* Pretend that we defined it.  */\n \tDECL_INITIAL (decl) = error_mark_node;\n@@ -20627,7 +20627,7 @@ get_mostly_instantiated_function_type (tree decl)\n \n /* Return truthvalue if we're processing a template different from\n    the last one involved in diagnostics.  */\n-int\n+bool\n problematic_instantiation_changed (void)\n {\n   return current_tinst_level != last_error_tinst_level;"}, {"sha": "0a851f11596cad58161874eda2289d519298ad7e", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -1639,8 +1639,13 @@ build_x_arrow (location_t loc, tree expr, tsubst_flags_t complain)\n \t  if (expr == error_mark_node)\n \t    return error_mark_node;\n \n+\t  /* This provides a better instantiation backtrace in case of\n+\t     error.  */\n \t  if (fn && DECL_USE_TEMPLATE (fn))\n-\t    push_tinst_level (fn);\n+\t    push_tinst_level_loc (fn, \n+\t\t\t\t  (current_instantiation () != actual_inst)\n+\t\t\t\t  ? DECL_SOURCE_LOCATION (fn)\n+\t\t\t\t  : input_location);\n \t  fn = NULL;\n \n \t  if (vec_member (TREE_TYPE (expr), types_memoized))"}, {"sha": "fae463c52d6016eabb1b9a046e99c3f36df96bd9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -1,3 +1,27 @@\n+2014-09-30  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+       PR c++/16564\n+       * lib/gcc.exp: Accept \"fatal error:\" as error prefix.\n+       * lib/g++.exp: Likewise.\n+       * lib/obj-c++.exp: Likewise.\n+       * lib/objc.exp: Likewise.\n+       * g++.dg/template/pr16564.C: New test.\n+\n+2014-09-30  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/16564\n+\t* g++.dg/cpp0x/decltype26.C: Adjust.\n+\t* g++.dg/cpp0x/decltype28.C: Likewise.\n+\t* g++.dg/cpp0x/decltype29.C: Likewise.\n+\t* g++.dg/cpp0x/decltype32.C: Likewise.\n+\t* g++.dg/cpp0x/enum11.C: Likewise.\n+\t* g++.dg/template/arrow1.C: Likewise.\n+\t* g++.dg/template/pr23510.C: Likewise.\n+\t* g++.dg/template/recurse.C: Likewise.\n+\t* g++.dg/template/recurse2.C: Likewise.\n+\t* g++.dg/template/vtable2.C: Likewise.\n+\t* g++.old-deja/g++.pt/infinite1.C: Likewise.\n+\n 2014-09-30  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR preprocessor/58893\n@@ -9,7 +33,7 @@\n \tPR middle-end/62120\n \t* gcc.target/i386/avx512f-additional-reg-names.c: Use register valid\n \tin 32-bit mode.\n-\t* gcc.target/i386/pr62120.c: New. \n+\t* gcc.target/i386/pr62120.c: New.\n \n 2014-09-30  James Greenhalgh  <james.greenhalgh@arm.com>\n "}, {"sha": "58ba823aca047fbd3e164595d7a118dfa1da8576", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype26.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype26.C?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -10,7 +10,7 @@ decltype(f(T())) f(T t)\t\t// { dg-error \"depth\" }\n \n int main()\n {\n-  f(A());\t\t\t// { dg-error \"no match\" }\n+  f(A());\t\t\t// { dg-message \"from here\" }\n }\n \n-// { dg-prune-output \"note\" }\n+// { dg-prune-output \"compilation terminated\" }"}, {"sha": "8c26fd7330dd320b060252339fb16b900c947eb5", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype28.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype28.C?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -14,3 +14,5 @@ ft (F f, typename enable_if<N==0, int>::type) {}\n int main() {\n   ft<struct a*, 2> (0, 0);\t// { dg-message \"from here\" }\n }\n+\n+// { dg-prune-output \"compilation terminated\" }"}, {"sha": "51da8ddd0ded6a2c1049c6c720a6d21d2889173d", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype29.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype29.C?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -13,7 +13,7 @@ decltype (ft<F> (F()))\t\t// { dg-error \"depth\" }\n ft() {}\n \n int main() {\n-    ft<struct a*, 0>();\t\t// { dg-error \"no match|wrong number\" }\n+    ft<struct a*, 0>();\t\t// { dg-message \"from here\" }\n }\n \n-// { dg-prune-output \"note\" }\n+// { dg-prune-output \"compilation terminated\" }"}, {"sha": "1deb964577d0ff735bcff3976e2a1752dbda8909", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype32.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype32.C?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -4,10 +4,12 @@\n \n template <typename T>\n auto make_array(const T& il) ->\n-decltype(make_array(il))    // { dg-error \"not declared|no matching|exceeds\" }\n+decltype(make_array(il))    // { dg-error \"not declared|no matching|depth\" }\n { }\n \n int main()\n {\n   int z = make_array(1);    // { dg-error \"no matching\" }\n }\n+\n+// { dg-prune-output \"compilation terminated\" }"}, {"sha": "f15b6cda49bddae9853942bfd1b9896663f82e7a", "filename": "gcc/testsuite/g++.dg/cpp0x/enum11.C", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum11.C?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -4,12 +4,10 @@\n \n template<unsigned int N> struct Pair { };\n struct Foo { enum { Mask = 1 }; } foo;\n-template<typename A, typename B> class Pair<A::Mask | B::Mask>\n-operator|(const A &, const B &)\t// { dg-message \"substitution\" }\n+template<typename A, typename B> class Pair<A::Mask | B::Mask> // { dg-error \"depth\" }\n+operator|(const A &, const B &)\n { }\n \n-Pair<Foo::Mask> f = foo|foo;\t// { dg-message \"no match\" }\n+Pair<Foo::Mask> f = foo|foo;\t// { dg-message \"from here\" }\n \n-// { dg-prune-output \"note\" }\n-// { dg-prune-output \"here\" }\n-// { dg-prune-output \"instantiation depth\" }\n+// { dg-prune-output \"compilation terminated\" }"}, {"sha": "690df4c5fcca15c8f1e35ef28ca147bf8501f00b", "filename": "gcc/testsuite/g++.dg/template/arrow1.C", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farrow1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farrow1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farrow1.C?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -9,9 +9,7 @@ struct a {\n };\n \n int main() {\n-    a<0>()->x; // { dg-error \"instantiation depth exceeds maximum\" }\n+    a<0>()->x; // { dg-error \"depth\" }\n }\n \n-// { dg-prune-output \"incomplete type\" }\n-// { dg-prune-output \"declaration of\" }\n-// { dg-prune-output \"used but never defined\" }\n+// { dg-prune-output \"compilation terminated\" }"}, {"sha": "c1ffc176c5e0f824a2f1d25c72015a8f87260715", "filename": "gcc/testsuite/g++.dg/template/pr23510.C", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr23510.C?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -3,21 +3,21 @@\n template<unsigned int nFactor>\n struct Factorial\n {\n-  enum { nValue = nFactor * Factorial<nFactor - 1>::nValue }; // { dg-error \"depth exceeds maximum\" \"exceeds\" } \n-  // { dg-message \"recursively required\" \"recurse\" { target *-*-* } 6 }\n-  // { dg-error \"incomplete type\" \"incomplete\" { target *-*-* } 6 } \n-} // { dg-error \"expected ';' after\" }\n+  enum { nValue = nFactor * Factorial<nFactor - 1>::nValue }; // { dg-error \"depth\" } \n+};\n \n-  template<>\n-  struct Factorial<0>\n-  {\n-    enum { nValue = 1 };\n-  };\n+template<>\n+struct Factorial<0>\n+{\n+  enum { nValue = 1 };\n+};\n \n-    static const unsigned int FACTOR = 20;\n+static const unsigned int FACTOR = 20;\n \n int main()\n {\n-  Factorial<FACTOR>::nValue;\n+  Factorial<FACTOR>::nValue;  // { dg-message \"from here\" }\n   return 0;\n }\n+\n+// { dg-prune-output \"compilation terminated\" }"}, {"sha": "fbd7def061c447bb9fa5ff5259b027fe4b433c63", "filename": "gcc/testsuite/g++.dg/template/recurse.C", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse.C?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -5,10 +5,8 @@ template <int I> struct F\n {\n   int operator()()\n     {\n-      F<I+1> f;\t\t\t// { dg-error \"incomplete type\" \"incomplete\" }\n-\t\t\t\t// { dg-bogus \"exceeds maximum.*exceeds maximum\" \"exceeds\" { xfail *-*-* } 8 }\n-                                // { dg-error \"exceeds maximum\" \"exceeds\" { xfail *-*-* } 8 }\n-      return f()*I;             // { dg-message \"recursively\" \"recurse\" }\n+      F<I+1> f;\t\t\t// { dg-error \"depth\" }\n+      return f()*I;\n     }\n };\n \n@@ -20,8 +18,7 @@ template <> struct F<52>\n int main ()\n {\n   F<1> f;\n-  return f();\t\t// { dg-message \"from here\" \"excessive recursion\" }\n+  return f();\t\t// { dg-message \"from here\" }\n }\n \n-// Ignore excess messages from recursion.\n-// { dg-prune-output \"from 'int\" }\n+// { dg-prune-output \"compilation terminated\" }"}, {"sha": "0df8e5244fdd4bbb65ba63ef0abae70ddda6c97f", "filename": "gcc/testsuite/g++.dg/template/recurse2.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse2.C?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -2,7 +2,8 @@\n // We should not see an error about non-constant initialization.\n \n template <int N> struct X {\n-    static const int value = X<N-1>::value; // { dg-error \"instantiation|incomplete\" }\n-  // { dg-message \"recursively required\" \"\" { target *-*-* } 5 }\n+    static const int value = X<N-1>::value; // { dg-error \"depth\" }\n };\n template struct X<1000>;\n+\n+// { dg-prune-output \"compilation terminated\" }"}, {"sha": "53b72f6f4e04f51228da14ca5fef5d79bae9e6d9", "filename": "gcc/testsuite/g++.dg/template/vtable2.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvtable2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvtable2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fvtable2.C?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -11,8 +11,10 @@\n template <class T> struct inner {};\n \n template <class T> struct parent {\n-  virtual void f()\t\t\t// { dg-error \"instantiation depth\" }\n+  virtual void f()\t\t\t// { dg-error \"depth\" }\n     { parent<inner<T> > p; };\n };\n \n template struct parent<int>;\n+\n+// { dg-prune-output \"compilation terminated\" }"}, {"sha": "a5873b09ef575dbde6e16d75208a91896a3cdef9", "filename": "gcc/testsuite/g++.old-deja/g++.pt/infinite1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finfinite1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finfinite1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Finfinite1.C?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -20,4 +20,4 @@ int main()\n   f<0>();\n }\n \n-// { dg-prune-output \"note\" }\n+// { dg-prune-output \"compilation terminated\" }"}, {"sha": "bad36c4222bbe8d862981ed0cda51d412a2079b3", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -267,7 +267,7 @@ proc g++_init { args } {\n     lappend ALWAYS_CXXFLAGS \"additional_flags=-fmessage-length=0\"\n \n     set gcc_warning_prefix \"warning:\"\n-    set gcc_error_prefix \"error:\"\n+    set gcc_error_prefix \"(fatal )?error:\"\n \n     if { [istarget *-*-darwin*] } {\n \tlappend ALWAYS_CXXFLAGS \"ldflags=-multiply_defined suppress\""}, {"sha": "3507c8a18f35936e679ad6d6a819d5e1f0dea27b", "filename": "gcc/testsuite/lib/gcc.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Flib%2Fgcc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc.exp?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -111,7 +111,7 @@ proc gcc_init { args } {\n     }\n \n     set gcc_warning_prefix \"warning:\"\n-    set gcc_error_prefix \"error:\"\n+    set gcc_error_prefix \"(fatal )?error:\"\n \n     gcc_maybe_build_wrapper \"${tmpdir}/gcc-testglue.o\"\n }"}, {"sha": "92a09feeb8bcc4f2d472d7273ab0eaf3c770c0de", "filename": "gcc/testsuite/lib/obj-c++.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -275,7 +275,7 @@ proc obj-c++_init { args } {\n     lappend ALWAYS_OBJCXXFLAGS \"additional_flags=-fmessage-length=0\"\n \n     set gcc_warning_prefix \"warning:\"\n-    set gcc_error_prefix \"error:\"\n+    set gcc_error_prefix \"(fatal )?error:\"\n \n     if { [istarget *-*-darwin*] } {\n \tlappend ALWAYS_OBJCXXFLAGS \"ldflags=-multiply_defined suppress\""}, {"sha": "c0b4da7360cb9c19d742ff9daa02e76fd2779ec0", "filename": "gcc/testsuite/lib/objc.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a0d320063941e878f65177f59d2c0e5515472a/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=75a0d320063941e878f65177f59d2c0e5515472a", "patch": "@@ -124,7 +124,7 @@ proc objc_init { args } {\n     }\n \n     set gcc_warning_prefix \"warning:\"\n-    set gcc_error_prefix \"error:\"\n+    set gcc_error_prefix \"(fatal )?error:\"\n \n     objc_maybe_build_wrapper \"${tmpdir}/objc-testglue.o\"\n "}]}