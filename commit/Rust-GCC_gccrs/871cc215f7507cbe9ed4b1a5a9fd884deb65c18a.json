{"sha": "871cc215f7507cbe9ed4b1a5a9fd884deb65c18a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcxY2MyMTVmNzUwN2NiZTllZDRiMWE1YTlmZDg4NGRlYjY1YzE4YQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-06-19T13:12:51Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-06-19T13:12:51Z"}, "message": "Fix multi-versioning issues (PR ipa/80732).\n\n2017-06-19  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/80732\n\t* attribs.c (make_dispatcher_decl): Do not append '.ifunc'\n\tto dispatcher function name.\n\t* multiple_target.c (replace_function_decl): New function.\n\t(create_dispatcher_calls): Redirect both edges and references.\n2017-06-19  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/80732\n\t* gcc.target/i386/mvc5.c: Scan indirect_function.\n\t* gcc.target/i386/mvc7.c: Likewise.\n\t* gcc.target/i386/pr80732.c: New test.\n\nFrom-SVN: r249365", "tree": {"sha": "1537ccd22e6aad4a626a95a0ef356332c810e7a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1537ccd22e6aad4a626a95a0ef356332c810e7a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "431abe69f1c4ba0b4b05609f2f4f9206cc6e041a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/431abe69f1c4ba0b4b05609f2f4f9206cc6e041a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/431abe69f1c4ba0b4b05609f2f4f9206cc6e041a"}], "stats": {"total": 232, "additions": 193, "deletions": 39}, "files": [{"sha": "084671af979ce053054e7e8021e2fb4d6efd4070", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=871cc215f7507cbe9ed4b1a5a9fd884deb65c18a", "patch": "@@ -1,3 +1,11 @@\n+2017-06-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/80732\n+\t* attribs.c (make_dispatcher_decl): Do not append '.ifunc'\n+\tto dispatcher function name.\n+\t* multiple_target.c (replace_function_decl): New function.\n+\t(create_dispatcher_calls): Redirect both edges and references.\n+\n 2017-06-19  Jan Hubicka <hubicka@ucw.cz>\n \n \t* profile-count.c (profile_count::dump): Dump quality."}, {"sha": "5eb19e827952e7d46b0c85c349ee090de1dad740", "filename": "gcc/attribs.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=871cc215f7507cbe9ed4b1a5a9fd884deb65c18a", "patch": "@@ -888,12 +888,8 @@ make_dispatcher_decl (const tree decl)\n   tree func_decl;\n   char *func_name;\n   tree fn_type, func_type;\n-  bool is_uniq = false;\n \n-  if (TREE_PUBLIC (decl) == 0)\n-    is_uniq = true;\n-\n-  func_name = make_unique_name (decl, \"ifunc\", is_uniq);\n+  func_name = xstrdup (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n \n   fn_type = TREE_TYPE (decl);\n   func_type = build_function_type (TREE_TYPE (fn_type),"}, {"sha": "bdb5b3bf22815b5caa04b87e11a53a8f23d804b8", "filename": "gcc/multiple_target.c", "status": "modified", "additions": 83, "deletions": 32, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2Fmultiple_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2Fmultiple_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmultiple_target.c?ref=871cc215f7507cbe9ed4b1a5a9fd884deb65c18a", "patch": "@@ -34,71 +34,122 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"attribs.h\"\n #include \"pretty-print.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimple-walk.h\"\n+\n+/* Walker callback that replaces all FUNCTION_DECL of a function that's\n+   going to be versioned.  */\n+\n+static tree\n+replace_function_decl (tree *op, int *walk_subtrees, void *data)\n+{\n+  struct walk_stmt_info *wi = (struct walk_stmt_info *) data;\n+  cgraph_function_version_info *info = (cgraph_function_version_info *)wi->info;\n+\n+  if (TREE_CODE (*op) == FUNCTION_DECL\n+      && info->this_node->decl == *op)\n+    {\n+      *op = info->dispatcher_resolver;\n+      *walk_subtrees = 0;\n+    }\n+\n+  return NULL;\n+}\n \n /* If the call in NODE has multiple target attribute with multiple fields,\n    replace it with dispatcher call and create dispatcher (once).  */\n \n static void\n create_dispatcher_calls (struct cgraph_node *node)\n {\n-  cgraph_edge *e;\n-  cgraph_edge *e_next = NULL;\n+  ipa_ref *ref;\n+\n+  if (!DECL_FUNCTION_VERSIONED (node->decl))\n+    return;\n+\n+  auto_vec<cgraph_edge *> edges_to_redirect;\n+  auto_vec<ipa_ref *> references_to_redirect;\n+\n+  for (unsigned i = 0; node->iterate_referring (i, ref); i++)\n+    references_to_redirect.safe_push (ref);\n \n   /* We need to remember NEXT_CALLER as it could be modified in the loop.  */\n-  for (e = node->callers; e ;e = (e == NULL) ? e_next : e->next_caller)\n-    {\n-      tree resolver_decl;\n-      tree idecl;\n-      tree decl;\n-      gimple *call = e->call_stmt;\n-      struct cgraph_node *inode;\n-\n-      /* Checking if call of function is call of versioned function.\n-\t Versioned function are not inlined, so there is no need to\n-\t check for inline.  */\n-      if (!call\n-\t  || !(decl = gimple_call_fndecl (call))\n-\t  || !DECL_FUNCTION_VERSIONED (decl))\n-\tcontinue;\n+  for (cgraph_edge *e = node->callers; e ; e = e->next_caller)\n+    edges_to_redirect.safe_push (e);\n \n+  if (!edges_to_redirect.is_empty () || !references_to_redirect.is_empty ())\n+    {\n       if (!targetm.has_ifunc_p ())\n \t{\n-\t  error_at (gimple_location (call),\n+\t  error_at (DECL_SOURCE_LOCATION (node->decl),\n \t\t    \"the call requires ifunc, which is not\"\n \t\t    \" supported by this target\");\n-\t  break;\n+\t  return;\n \t}\n       else if (!targetm.get_function_versions_dispatcher)\n \t{\n-\t  error_at (gimple_location (call),\n+\t  error_at (DECL_SOURCE_LOCATION (node->decl),\n \t\t    \"target does not support function version dispatcher\");\n-\t  break;\n+\t  return;\n \t}\n \n-      e_next = e->next_caller;\n-      idecl = targetm.get_function_versions_dispatcher (decl);\n+      tree idecl = targetm.get_function_versions_dispatcher (node->decl);\n       if (!idecl)\n \t{\n-\t  error_at (gimple_location (call),\n+\t  error_at (DECL_SOURCE_LOCATION (node->decl),\n \t\t    \"default target_clones attribute was not set\");\n-\t  break;\n+\t  return;\n \t}\n-      inode = cgraph_node::get (idecl);\n+\n+      cgraph_node *inode = cgraph_node::get (idecl);\n       gcc_assert (inode);\n-      resolver_decl = targetm.generate_version_dispatcher_body (inode);\n+      tree resolver_decl = targetm.generate_version_dispatcher_body (inode);\n \n       /* Update aliases.  */\n       inode->alias = true;\n       inode->alias_target = resolver_decl;\n       if (!inode->analyzed)\n \tinode->resolve_alias (cgraph_node::get (resolver_decl));\n \n-      e->redirect_callee (inode);\n-      e->redirect_call_stmt_to_callee ();\n-      /*  Since REDIRECT_CALLEE modifies NEXT_CALLER field we move to\n-\t  previously set NEXT_CALLER.  */\n-      e = NULL;\n+      /* Redirect edges.  */\n+      unsigned i;\n+      cgraph_edge *e;\n+      FOR_EACH_VEC_ELT (edges_to_redirect, i, e)\n+\t{\n+\t  e->redirect_callee (inode);\n+\t  e->redirect_call_stmt_to_callee ();\n+\t}\n+\n+      /* Redirect references.  */\n+      FOR_EACH_VEC_ELT (references_to_redirect, i, ref)\n+\t{\n+\t  if (ref->use == IPA_REF_ADDR)\n+\t    {\n+\t      struct walk_stmt_info wi;\n+\t      memset (&wi, 0, sizeof (wi));\n+\t      wi.info = (void *)node->function_version ();\n+\n+\t      if (dyn_cast<varpool_node *> (ref->referring))\n+\t\t{\n+\t\t  hash_set<tree> visited_nodes;\n+\t\t  walk_tree (&DECL_INITIAL (ref->referring->decl),\n+\t\t\t     replace_function_decl, &wi, &visited_nodes);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  gimple_stmt_iterator it = gsi_for_stmt (ref->stmt);\n+\t\t  if (ref->referring->decl != resolver_decl)\n+\t\t    walk_gimple_stmt (&it, NULL, replace_function_decl, &wi);\n+\t\t}\n+\t    }\n+\t  else\n+\t    gcc_unreachable ();\n+\t}\n     }\n+\n+  symtab->change_decl_assembler_name (node->decl,\n+\t\t\t\t      clone_function_name (node->decl,\n+\t\t\t\t\t\t\t   \"default\"));\n }\n \n /* Return length of attribute names string,"}, {"sha": "0b55fe02fab0a5d7110302696b4d07905b560228", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=871cc215f7507cbe9ed4b1a5a9fd884deb65c18a", "patch": "@@ -1,3 +1,10 @@\n+2017-06-19  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/80732\n+\t* gcc.target/i386/mvc5.c: Scan indirect_function.\n+\t* gcc.target/i386/mvc7.c: Likewise.\n+\t* gcc.target/i386/pr80732.c: New test.\n+\n 2017-06-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/66093"}, {"sha": "677f79f3fd0069511fa64d9ea5a2a40e380618e9", "filename": "gcc/testsuite/gcc.target/i386/mvc5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc5.c?ref=871cc215f7507cbe9ed4b1a5a9fd884deb65c18a", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-ifunc \"\" } */\n /* { dg-options \"-fno-inline\" } */\n-/* { dg-final { scan-assembler-times \"foo.ifunc\" 6 } } */\n+/* { dg-final { scan-assembler \"foo,foo.resolver\" } } */\n \n __attribute__((target_clones(\"default\",\"avx\",\"avx2\")))\n int"}, {"sha": "a3697ba9b751190801cdff09479a062e14e5f245", "filename": "gcc/testsuite/gcc.target/i386/mvc7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc7.c?ref=871cc215f7507cbe9ed4b1a5a9fd884deb65c18a", "patch": "@@ -3,7 +3,7 @@\n /* { dg-final { scan-assembler \"foo.resolver\" } } */\n /* { dg-final { scan-assembler \"avx\" } } */\n /* { dg-final { scan-assembler \"slm\" } } */\n-/* { dg-final { scan-assembler-times \"foo.ifunc\" 4 } } */\n+/* { dg-final { scan-assembler \"foo,foo.resolver\" } } */\n \n __attribute__((target_clones(\"avx\",\"default\",\"arch=slm\",\"arch=core-avx2\")))\n int foo ();"}, {"sha": "2c59c5e224bd64d6c65bc2d3105fbf49e9bc033f", "filename": "gcc/testsuite/gcc.target/i386/pr80732.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80732.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/871cc215f7507cbe9ed4b1a5a9fd884deb65c18a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80732.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80732.c?ref=871cc215f7507cbe9ed4b1a5a9fd884deb65c18a", "patch": "@@ -0,0 +1,92 @@\n+/* PR ipa/80732 */\n+/* { dg-do run } */\n+/* { dg-options \"-ldl -fPIC -rdynamic -O3 -g -pie\" } */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-require-effective-target fma4 } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target pie } */\n+\n+#include <dlfcn.h>\n+\n+__attribute__((target_clones(\"default\",\"fma\"),noinline,optimize(\"fast-math\")))\n+double f1(double a, double b, double c)\n+{\n+    return a * b + c;\n+}\n+\n+double k1(double a, double b, double c, void **p)\n+{\n+    *p = f1;\n+    return f1(a, b, c);\n+}\n+\n+__attribute__((target(\"fma\"),optimize(\"fast-math\")))\n+static double f2_fma(double a, double b, double c)\n+{\n+    return a * b + c;\n+}\n+\n+__attribute__((optimize(\"fast-math\")))\n+static double f2_default(double a, double b, double c)\n+{\n+    return a * b + c;\n+}\n+\n+static void *f2_resolve(void)\n+{\n+    __builtin_cpu_init ();\n+    if (__builtin_cpu_supports(\"fma\"))\n+        return f2_fma;\n+    else\n+        return f2_default;\n+}\n+\n+double f2(double a, double b, double c) __attribute__((ifunc(\"f2_resolve\")));\n+\n+double k2(double a, double b, double c, void **p)\n+{\n+    *p = f2;\n+    return f2(a, b, c);\n+}\n+\n+double (*initializer) (double, double, double) = { &f1 };\n+\n+int main()\n+{\n+    char buffer[256];\n+    const char *expectation = \"4.93038e-32, 4.93038e-32, 4.93038e-32\";\n+\n+    volatile double a = 1.0000000000000002;\n+    volatile double b = -0.9999999999999998;\n+    volatile double c = 1.0;\n+\n+    void *hdl = dlopen(0, RTLD_NOW);\n+\n+    double (*pf1)(double, double, double) = dlsym(hdl, \"f1\");\n+    double (*pk1)(double, double, double, void**) = dlsym(hdl, \"k1\");\n+    double (*_pf1)(double, double, double);\n+\n+    double v1_1 = pf1(a, b, c);\n+    double v1_2 = pk1(a, b, c, (void**)&_pf1);\n+    double v1_3 = _pf1(a, b, c);\n+    __builtin_sprintf (buffer, \"%g, %g, %g\", v1_1, v1_2, v1_3);\n+    if (__builtin_strcmp (buffer, expectation) != 0)\n+      __builtin_abort ();\n+\n+    double (*pf2)(double, double, double) = dlsym(hdl, \"f2\");\n+    double (*pk2)(double, double, double, void**) = dlsym(hdl, \"k2\");\n+    double (*_pf2)(double, double, double);\n+\n+    double v2_1 = pf2(a, b, c);\n+    double v2_2 = pk2(a, b, c, (void**)&_pf2);\n+    double v2_3 = _pf2(a, b, c);\n+    __builtin_sprintf(buffer, \"%g, %g, %g\", v2_1, v2_2, v2_3);\n+    if (__builtin_strcmp (buffer, expectation) != 0)\n+      __builtin_abort ();\n+\n+    __builtin_sprintf(buffer, \"%g, %g, %g\", initializer (a, b, c), v2_2, v2_3);\n+    if (__builtin_strcmp (buffer, expectation) != 0)\n+      __builtin_abort ();\n+\n+    return 0;\n+}"}]}