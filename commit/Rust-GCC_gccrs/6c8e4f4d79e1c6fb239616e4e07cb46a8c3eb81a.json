{"sha": "6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM4ZTRmNGQ3OWUxYzZmYjIzOTYxNmU0ZTA3Y2I0NmE4YzNlYjgxYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-06T21:55:19Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-06T21:55:19Z"}, "message": "builtins: Add DFP signaling NaN built-in functions\n\nAdd built-in functions __builtin_nansd32, __builtin_nansd64 and\n__builtin_nansd128 to return signaling NaNs of decimal floating-point\ntypes, analogous to the functions already present for binary\nfloating-point types.\n\nThis patch, independent of\n<https://gcc.gnu.org/pipermail/gcc-patches/2020-October/557136.html>\n(pending review), is in preparation for adding the <float.h> macros\nfor such signaling NaNs that are in C2x, analogous to the macros for\nother types that are in that patch.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.  Also ran\nthe new tests for powerpc64le-linux-gnu to confirm they do work in the\ncase (hardware DFP) where floating-point exceptions are supported for\nDFP.\n\ngcc/\n2020-11-06  Joseph Myers  <joseph@codesourcery.com>\n\n\t* builtins.def (BUILT_IN_NANSD32, BUILT_IN_NANSD64)\n\t(BUILT_IN_NANSD128): New built-in functions.\n\t* fold-const-call.c (fold_const_call): Handle the new built-in\n\tfunctions.\n\t* doc/extend.texi (__builtin_nansd32, __builtin_nansd64)\n\t(__builtin_nansd128): Document.\n\t* doc/sourcebuild.texi (Effective-Target Keywords): Document\n\tfenv_exceptions_dfp.\n\ngcc/testsuite/\n2020-11-06  Joseph Myers  <joseph@codesourcery.com>\n\n\t* lib/target-supports.exp\n\t(check_effective_target_fenv_exceptions_dfp): New.\n\t* gcc.dg/dfp/builtin-snan-1.c, gcc.dg/dfp/builtin-snan-2.c: New\n\ttests.", "tree": {"sha": "236697b91fdd8f1dde905d96c56830e3a6c368fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/236697b91fdd8f1dde905d96c56830e3a6c368fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43d3b7bc073df27800218b685e6d7dd78dd31905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43d3b7bc073df27800218b685e6d7dd78dd31905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43d3b7bc073df27800218b685e6d7dd78dd31905"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "b4494c712a1751fbb37378f38cc1411d11a37331", "filename": "gcc/builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a", "patch": "@@ -518,6 +518,9 @@ DEF_GCC_BUILTIN        (BUILT_IN_NANSF, \"nansf\", BT_FN_FLOAT_CONST_STRING, ATTR_\n DEF_GCC_BUILTIN        (BUILT_IN_NANSL, \"nansl\", BT_FN_LONGDOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_FLOATN_NX_BUILTINS (BUILT_IN_NANS, \"nans\", NAN_TYPE, ATTR_CONST_NOTHROW_NONNULL)\n #undef NAN_TYPE\n+DEF_GCC_BUILTIN        (BUILT_IN_NANSD32, \"nansd32\", BT_FN_DFLOAT32_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n+DEF_GCC_BUILTIN        (BUILT_IN_NANSD64, \"nansd64\", BT_FN_DFLOAT64_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n+DEF_GCC_BUILTIN        (BUILT_IN_NANSD128, \"nansd128\", BT_FN_DFLOAT128_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_C99_BUILTIN        (BUILT_IN_NEARBYINT, \"nearbyint\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_NEARBYINTF, \"nearbyintf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_NEARBYINTL, \"nearbyintl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)"}, {"sha": "e6a9bdf10997d848c04738f0e5e3f8b0246ce5a6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a", "patch": "@@ -13865,6 +13865,18 @@ to be a signaling NaN@.  The @code{nans} function is proposed by\n @uref{http://www.open-std.org/jtc1/sc22/wg14/www/docs/n965.htm,,WG14 N965}.\n @end deftypefn\n \n+@deftypefn {Built-in Function} _Decimal32 __builtin_nansd32 (const char *str)\n+Similar to @code{__builtin_nans}, except the return type is @code{_Decimal32}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} _Decimal64 __builtin_nansd64 (const char *str)\n+Similar to @code{__builtin_nans}, except the return type is @code{_Decimal64}.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} _Decimal128 __builtin_nansd128 (const char *str)\n+Similar to @code{__builtin_nans}, except the return type is @code{_Decimal128}.\n+@end deftypefn\n+\n @deftypefn {Built-in Function} float __builtin_nansf (const char *str)\n Similar to @code{__builtin_nans}, except the return type is @code{float}.\n @end deftypefn"}, {"sha": "b3c5e530423d400e910939d63d252a724177383c", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a", "patch": "@@ -2356,6 +2356,11 @@ Target provides @file{fenv.h} include file.\n Target supports @file{fenv.h} with all the standard IEEE exceptions\n and floating-point exceptions are raised by arithmetic operations.\n \n+@item fenv_exceptions_dfp\n+Target supports @file{fenv.h} with all the standard IEEE exceptions\n+and floating-point exceptions are raised by arithmetic operations for\n+decimal floating point.\n+\n @item fileio\n Target offers such file I/O library functions as @code{fopen},\n @code{fclose}, @code{tmpnam}, and @code{remove}.  This is a link-time"}, {"sha": "3548fab78cd9d6dc3a79647acc69c537f5f0c224", "filename": "gcc/fold-const-call.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Ffold-const-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Ffold-const-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const-call.c?ref=6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a", "patch": "@@ -1300,6 +1300,9 @@ fold_const_call (combined_fn fn, tree type, tree arg)\n \n     CASE_CFN_NANS:\n     CASE_FLT_FN_FLOATN_NX (CFN_BUILT_IN_NANS):\n+    case CFN_BUILT_IN_NANSD32:\n+    case CFN_BUILT_IN_NANSD64:\n+    case CFN_BUILT_IN_NANSD128:\n       return fold_const_builtin_nan (type, arg, false);\n \n     case CFN_REDUC_PLUS:"}, {"sha": "49a32c875463cdfdc43e3daa92b5a1692e310061", "filename": "gcc/testsuite/gcc.dg/dfp/builtin-snan-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbuiltin-snan-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbuiltin-snan-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbuiltin-snan-1.c?ref=6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a", "patch": "@@ -0,0 +1,23 @@\n+/* Test __builtin_nansd* functions.  Test not requiring runtime\n+   exceptions support.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+\n+volatile _Decimal32 d32 = __builtin_nansd32 (\"\");\n+volatile _Decimal64 d64 = __builtin_nansd64 (\"\");\n+volatile _Decimal128 d128 = __builtin_nansd128 (\"\");\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  if (!__builtin_isnan (d32))\n+    abort ();\n+  if (!__builtin_isnan (d64))\n+    abort ();\n+  if (!__builtin_isnan (d128))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "248481bd371b80a6694c5787c7ac735567dd6a1c", "filename": "gcc/testsuite/gcc.dg/dfp/builtin-snan-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbuiltin-snan-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbuiltin-snan-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbuiltin-snan-2.c?ref=6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a", "patch": "@@ -0,0 +1,44 @@\n+/* Test __builtin_nansd* functions.  Test requiring runtime exceptions\n+   support.  */\n+/* { dg-do run } */\n+/* { dg-require-effective-target fenv_exceptions_dfp } */\n+/* { dg-options \"\" } */\n+\n+#include <fenv.h>\n+\n+volatile _Decimal32 d32 = __builtin_nansd32 (\"\");\n+volatile _Decimal64 d64 = __builtin_nansd64 (\"\");\n+volatile _Decimal128 d128 = __builtin_nansd128 (\"\");\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  feclearexcept (FE_ALL_EXCEPT);\n+  d32 += d32;\n+  if (!fetestexcept (FE_INVALID))\n+    abort ();\n+  feclearexcept (FE_ALL_EXCEPT);\n+  d32 += d32;\n+  if (fetestexcept (FE_INVALID))\n+    abort ();\n+  feclearexcept (FE_ALL_EXCEPT);\n+  d64 += d64;\n+  if (!fetestexcept (FE_INVALID))\n+    abort ();\n+  feclearexcept (FE_ALL_EXCEPT);\n+  d64 += d64;\n+  if (fetestexcept (FE_INVALID))\n+    abort ();\n+  feclearexcept (FE_ALL_EXCEPT);\n+  d128 += d128;\n+  if (!fetestexcept (FE_INVALID))\n+    abort ();\n+  feclearexcept (FE_ALL_EXCEPT);\n+  d128 += d128;\n+  if (fetestexcept (FE_INVALID))\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "60ebbb39f9d7c26cec95c077ef3e679a0fbd8607", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=6c8e4f4d79e1c6fb239616e4e07cb46a8c3eb81a", "patch": "@@ -9693,6 +9693,44 @@ proc check_effective_target_fenv_exceptions {} {\n     } [add_options_for_ieee \"-std=gnu99\"]]\n }\n \n+# Return 1 if <fenv.h> is available with all the standard IEEE\n+# exceptions and floating-point exceptions are raised by arithmetic\n+# operations for decimal floating point.  (If the target requires\n+# special options for \"inexact\" exceptions, those need to be specified\n+# in the testcases.)\n+\n+proc check_effective_target_fenv_exceptions_dfp {} {\n+    return [check_runtime fenv_exceptions_dfp {\n+\t#include <fenv.h>\n+\t#include <stdlib.h>\n+\t#ifndef FE_DIVBYZERO\n+\t# error Missing FE_DIVBYZERO\n+\t#endif\n+\t#ifndef FE_INEXACT\n+\t# error Missing FE_INEXACT\n+\t#endif\n+\t#ifndef FE_INVALID\n+\t# error Missing FE_INVALID\n+\t#endif\n+\t#ifndef FE_OVERFLOW\n+\t# error Missing FE_OVERFLOW\n+\t#endif\n+\t#ifndef FE_UNDERFLOW\n+\t# error Missing FE_UNDERFLOW\n+\t#endif\n+\tvolatile _Decimal64 a = 0.0DD, r;\n+\tint\n+\tmain (void)\n+\t{\n+\t  r = a / a;\n+\t  if (fetestexcept (FE_INVALID))\n+\t    exit (0);\n+\t  else\n+\t    abort ();\n+\t}\n+    } [add_options_for_ieee \"-std=gnu99\"]]\n+}\n+\n # Return 1 if -fexceptions is supported.\n \n proc check_effective_target_exceptions {} {"}]}