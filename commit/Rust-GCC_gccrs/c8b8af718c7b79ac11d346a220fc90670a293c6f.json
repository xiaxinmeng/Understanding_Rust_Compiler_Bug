{"sha": "c8b8af718c7b79ac11d346a220fc90670a293c6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhiOGFmNzE4YzdiNzlhYzExZDM0NmEyMjBmYzkwNjcwYTI5M2M2Zg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-07-13T17:51:34Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-07-13T17:51:34Z"}, "message": "ggc.h (ggc_internal_alloc_stat, [...]): Add ATTRIBUTE_MALLOC.\n\n\t* ggc.h (ggc_internal_alloc_stat, ggc_alloc_typed_stat,\n\tggc_internal_cleared_alloc_stat, ggc_cleared_alloc_htab_ignore_args,\n\tggc_cleared_alloc_ptr_array_two_args, ggc_splay_alloc): Add\n\tATTRIBUTE_MALLOC.\n\t* alloc-pool.h (pool_alloc): Likewise.\n\n\t* final.c (final): Do not loop to find max_uid.\n\nFrom-SVN: r189470", "tree": {"sha": "6394fa371a1a4a04fba45b009dbafb57a6ce01b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6394fa371a1a4a04fba45b009dbafb57a6ce01b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8b8af718c7b79ac11d346a220fc90670a293c6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b8af718c7b79ac11d346a220fc90670a293c6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b8af718c7b79ac11d346a220fc90670a293c6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b8af718c7b79ac11d346a220fc90670a293c6f/comments", "author": null, "committer": null, "parents": [{"sha": "e4da1e17ea39bb36c9f4f81a3b9b81125f4f4ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4da1e17ea39bb36c9f4f81a3b9b81125f4f4ece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4da1e17ea39bb36c9f4f81a3b9b81125f4f4ece"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "2bff39a212c5c285e8a42966089dda64ae1eb1f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b8af718c7b79ac11d346a220fc90670a293c6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b8af718c7b79ac11d346a220fc90670a293c6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8b8af718c7b79ac11d346a220fc90670a293c6f", "patch": "@@ -1,3 +1,13 @@\n+2012-07-13  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* ggc.h (ggc_internal_alloc_stat, ggc_alloc_typed_stat,\n+\tggc_internal_cleared_alloc_stat, ggc_cleared_alloc_htab_ignore_args,\n+\tggc_cleared_alloc_ptr_array_two_args, ggc_splay_alloc): Add\n+\tATTRIBUTE_MALLOC.\n+\t* alloc-pool.h (pool_alloc): Likewise.\n+\n+\t* final.c (final): Do not loop to find max_uid.\n+\n 2012-07-13  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* emit-rtl.c (make_debug_insn_raw, make_jump_insn_raw): Make static."}, {"sha": "4593b70f4b3a0ec54fdc148eb70696bec9ca1765", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b8af718c7b79ac11d346a220fc90670a293c6f/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b8af718c7b79ac11d346a220fc90670a293c6f/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=c8b8af718c7b79ac11d346a220fc90670a293c6f", "patch": "@@ -61,7 +61,7 @@ extern alloc_pool create_alloc_pool (const char *, size_t, size_t);\n extern void free_alloc_pool (alloc_pool);\n extern void empty_alloc_pool (alloc_pool);\n extern void free_alloc_pool_if_empty (alloc_pool *);\n-extern void *pool_alloc (alloc_pool);\n+extern void *pool_alloc (alloc_pool) ATTRIBUTE_MALLOC;\n extern void pool_free (alloc_pool, void *);\n extern void dump_alloc_pool_statistics (void);\n #endif"}, {"sha": "5f9a5cb7107fd4d98fb4d44a7fd65af32b528184", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b8af718c7b79ac11d346a220fc90670a293c6f/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b8af718c7b79ac11d346a220fc90670a293c6f/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=c8b8af718c7b79ac11d346a220fc90670a293c6f", "patch": "@@ -1826,7 +1826,6 @@ void\n final (rtx first, FILE *file, int optimize_p)\n {\n   rtx insn, next;\n-  int max_uid = 0;\n   int seen = 0;\n \n   /* Used for -dA dump.  */\n@@ -1837,11 +1836,9 @@ final (rtx first, FILE *file, int optimize_p)\n \n   last_ignored_compare = 0;\n \n+#ifdef HAVE_cc0\n   for (insn = first; insn; insn = NEXT_INSN (insn))\n     {\n-      if (INSN_UID (insn) > max_uid)       /* Find largest UID.  */\n-\tmax_uid = INSN_UID (insn);\n-#ifdef HAVE_cc0\n       /* If CC tracking across branches is enabled, record the insn which\n \t jumps to each branch only reached from one place.  */\n       if (optimize_p && JUMP_P (insn))\n@@ -1852,8 +1849,8 @@ final (rtx first, FILE *file, int optimize_p)\n \t      LABEL_REFS (lab) = insn;\n \t    }\n \t}\n-#endif\n     }\n+#endif\n \n   init_recog ();\n "}, {"sha": "d90eec2c207839e0bb019fd7e0fb02cb80b46a6c", "filename": "gcc/ggc.h", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b8af718c7b79ac11d346a220fc90670a293c6f/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b8af718c7b79ac11d346a220fc90670a293c6f/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=c8b8af718c7b79ac11d346a220fc90670a293c6f", "patch": "@@ -143,19 +143,22 @@ extern void gt_pch_save (FILE *f);\n /* Allocation.  */\n \n /* The internal primitive.  */\n-extern void *ggc_internal_alloc_stat (size_t MEM_STAT_DECL);\n+extern void *ggc_internal_alloc_stat (size_t MEM_STAT_DECL)\n+  ATTRIBUTE_MALLOC;\n \n extern size_t ggc_round_alloc_size (size_t requested_size);\n \n #define ggc_internal_alloc(s) ggc_internal_alloc_stat (s MEM_STAT_INFO)\n \n /* Allocate an object of the specified type and size.  */\n-extern void *ggc_alloc_typed_stat (enum gt_types_enum, size_t MEM_STAT_DECL);\n+extern void *ggc_alloc_typed_stat (enum gt_types_enum, size_t MEM_STAT_DECL)\n+  ATTRIBUTE_MALLOC;\n \n #define ggc_alloc_typed(s, z) ggc_alloc_typed_stat (s, z MEM_STAT_INFO)\n \n /* Allocates cleared memory.  */\n-extern void *ggc_internal_cleared_alloc_stat (size_t MEM_STAT_DECL);\n+extern void *ggc_internal_cleared_alloc_stat (size_t MEM_STAT_DECL)\n+  ATTRIBUTE_MALLOC;\n \n /* Resize a block.  */\n extern void *ggc_realloc_stat (void *, size_t MEM_STAT_DECL);\n@@ -202,9 +205,11 @@ ggc_alloc_atomic_stat (size_t s MEM_STAT_DECL)\n #define ggc_alloc_cleared_atomic(S)             \\\n     (ggc_internal_cleared_alloc_stat ((S) MEM_STAT_INFO))\n \n-extern void * ggc_cleared_alloc_htab_ignore_args (size_t, size_t);\n+extern void *ggc_cleared_alloc_htab_ignore_args (size_t, size_t)\n+  ATTRIBUTE_MALLOC;\n \n-extern void * ggc_cleared_alloc_ptr_array_two_args (size_t, size_t);\n+extern void *ggc_cleared_alloc_ptr_array_two_args (size_t, size_t)\n+  ATTRIBUTE_MALLOC;\n \n #define htab_create_ggc(SIZE, HASH, EQ, DEL) \\\n   htab_create_typed_alloc (SIZE, HASH, EQ, DEL,\t\\\n@@ -216,7 +221,8 @@ extern void * ggc_cleared_alloc_ptr_array_two_args (size_t, size_t);\n   splay_tree_new_typed_alloc (COMPARE, NULL, NULL, &ALLOC_TREE, &ALLOC_NODE, \\\n \t\t\t      &ggc_splay_dont_free, NULL)\n \n-extern void *ggc_splay_alloc (enum gt_types_enum, int, void *);\n+extern void *ggc_splay_alloc (enum gt_types_enum, int, void *)\n+  ATTRIBUTE_MALLOC;\n \n extern void ggc_splay_dont_free (void *, void *);\n \n@@ -276,10 +282,12 @@ extern struct alloc_zone tree_id_zone;\n \n /* Allocate an object into the specified allocation zone.  */\n extern void *ggc_internal_alloc_zone_stat (size_t,\n-\t\t\t\t\t  struct alloc_zone * MEM_STAT_DECL);\n+\t\t\t\t\t  struct alloc_zone * MEM_STAT_DECL)\n+  ATTRIBUTE_MALLOC;\n \n extern void *ggc_internal_cleared_alloc_zone_stat (size_t,\n-\t\t\t\t\t  struct alloc_zone * MEM_STAT_DECL);\n+\t\t\t\t\t  struct alloc_zone * MEM_STAT_DECL)\n+  ATTRIBUTE_MALLOC;\n \n static inline void *\n ggc_internal_zone_alloc_stat (struct alloc_zone * z, size_t s MEM_STAT_DECL)"}]}