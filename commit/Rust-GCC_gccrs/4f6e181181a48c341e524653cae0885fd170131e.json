{"sha": "4f6e181181a48c341e524653cae0885fd170131e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY2ZTE4MTE4MWE0OGMzNDFlNTI0NjUzY2FlMDg4NWZkMTcwMTMxZQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-06T20:13:31Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-06T20:14:25Z"}, "message": "Remove support for %G and %K.\n\ngcc/c-family/ChangeLog:\n\n\t* c-format.c (gcc_tdiag_char_table): Remove support for %G and %K.\n\t (gcc_cdiag_char_table): Same.\n\t (gcc_cxxdiag_char_table): Same.\n\ngcc/c/ChangeLog:\n\n\t* c-objc-common.c (c_tree_printer): Remove support for %G and %K.\n\ngcc/cp/ChangeLog:\n\n\t* error.c (cp_printer):  Remove support for %G and %K.\n\ngcc/ChangeLog:\n\n\t* gimple-pretty-print.c (percent_G_format): Remove.\n\t* tree-diagnostic.c (default_tree_printer): Remove calls.\n\t* tree-pretty-print.c (percent_K_format): Remove.\n\t* tree-pretty-print.h (percent_K_format): Remove.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/format/gcc_diag-10.c: Update expected warnings.\n\t* gcc.dg/plugin/diagnostic_plugin_test_inlining.c: Remove %G.", "tree": {"sha": "7add41289221a44a977803ded481637e102b9c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7add41289221a44a977803ded481637e102b9c52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f6e181181a48c341e524653cae0885fd170131e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6e181181a48c341e524653cae0885fd170131e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f6e181181a48c341e524653cae0885fd170131e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6e181181a48c341e524653cae0885fd170131e/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62e43587ef1c874b62a6c4c5c3980969e4a2da97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e43587ef1c874b62a6c4c5c3980969e4a2da97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e43587ef1c874b62a6c4c5c3980969e4a2da97"}], "stats": {"total": 111, "additions": 11, "deletions": 100}, "files": [{"sha": "6fd0bb33d21554a2b70758a2cac1dc84bf1c610b", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=4f6e181181a48c341e524653cae0885fd170131e", "patch": "@@ -781,10 +781,6 @@ static const format_char_info gcc_tdiag_char_table[] =\n   /* These will require a \"tree\" at runtime.  */\n   { \"DFTV\", 1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"'\",   NULL },\n   { \"E\", 1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n-  { \"K\", 1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\\\"\",   NULL },\n-\n-  /* G requires a \"gimple*\" argument at runtime.  */\n-  { \"G\", 1, STD_C89, { T89_G,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\\\"\",   NULL },\n \n   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }\n };\n@@ -799,10 +795,6 @@ static const format_char_info gcc_cdiag_char_table[] =\n   /* These will require a \"tree\" at runtime.  */\n   { \"DFTV\", 1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"'\",   NULL },\n   { \"E\",   1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n-  { \"K\",   1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\\\"\",   NULL },\n-\n-  /* G requires a \"gimple*\" argument at runtime.  */\n-  { \"G\",   1, STD_C89, { T89_G,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\\\"\",   NULL },\n \n   { \"v\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n \n@@ -819,10 +811,6 @@ static const format_char_info gcc_cxxdiag_char_table[] =\n   /* These will require a \"tree\" at runtime.  */\n   { \"ADFHISTVX\",1,STD_C89,{ T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+#\",   \"'\",   NULL },\n   { \"E\", 1,STD_C89,{ T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+#\",   \"\",   NULL },\n-  { \"K\", 1, STD_C89,{ T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",   \"\\\"\",   NULL },\n-\n-  /* G requires a \"gimple*\" argument at runtime.  */\n-  { \"G\", 1, STD_C89,{ T89_G,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",   \"\\\"\",   NULL },\n \n   /* These accept either an 'int' or an 'enum tree_code' (which is handled as an 'int'.)  */\n   { \"CLOPQ\",0,STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },"}, {"sha": "cdb2242758e6c798918a16110a31063569d6cbf2", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=4f6e181181a48c341e524653cae0885fd170131e", "patch": "@@ -247,8 +247,6 @@ print_type (c_pretty_printer *cpp, tree t, bool *quoted)\n    %D: a general decl,\n    %E: an identifier or expression,\n    %F: a function declaration,\n-   %G: a Gimple statement,\n-   %K: a CALL_EXPR,\n    %T: a type.\n    %V: a list of type qualifiers from a tree.\n    %v: an explicit list of type qualifiers\n@@ -269,19 +267,6 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n   if (precision != 0 || wide)\n     return false;\n \n-  if (*spec == 'G')\n-    {\n-      percent_G_format (text);\n-      return true;\n-    }\n-\n-  if (*spec == 'K')\n-    {\n-      t = va_arg (*text->args_ptr, tree);\n-      percent_K_format (text, EXPR_LOCATION (t), TREE_BLOCK (t));\n-      return true;\n-    }\n-\n   if (*spec != 'v')\n     {\n       t = va_arg (*text->args_ptr, tree);"}, {"sha": "012a4ecddf44661f12d8df1d5e474614b5de3d39", "filename": "gcc/cp/error.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=4f6e181181a48c341e524653cae0885fd170131e", "patch": "@@ -4338,10 +4338,8 @@ defer_phase_2_of_type_diff (deferred_printed_type *deferred,\n    %D   declaration.\n    %E   expression.\n    %F   function declaration.\n-   %G   gcall *\n    %H   type difference (from).\n    %I   type difference (to).\n-   %K   tree\n    %L\tlanguage as used in extern \"lang\".\n    %O\tbinary operator.\n    %P   function parameter whose position is indicated by an integer.\n@@ -4391,9 +4389,6 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n       break;\n     case 'E': result = expr_to_string (next_tree);\t\tbreak;\n     case 'F': result = fndecl_to_string (next_tree, verbose);\tbreak;\n-    case 'G':\n-      percent_G_format (text);\n-      return true;\n     case 'H':\n       defer_phase_2_of_type_diff (&postprocessor->m_type_a, next_tree,\n \t\t\t\t  buffer_ptr, verbose, *quoted);\n@@ -4402,10 +4397,6 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n       defer_phase_2_of_type_diff (&postprocessor->m_type_b, next_tree,\n \t\t\t\t  buffer_ptr, verbose, *quoted);\n       return true;\n-    case 'K':\n-      t = va_arg (*text->args_ptr, tree);\n-      percent_K_format (text, EXPR_LOCATION (t), TREE_BLOCK (t));\n-      return true;\n     case 'L': result = language_to_string (next_lang);\t\tbreak;\n     case 'O': result = op_to_string (false, next_tcode);\tbreak;\n     case 'P': result = parm_to_string (next_int);\t\tbreak;"}, {"sha": "39c5775e2cb1f2aa994ae21c06f881c44c9844e1", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=4f6e181181a48c341e524653cae0885fd170131e", "patch": "@@ -3059,23 +3059,6 @@ gimple_dump_bb_for_graph (pretty_printer *pp, basic_block bb)\n   pp_write_text_as_dot_label_to_stream (pp, /*for_record=*/true);\n }\n \n-\n-/* Handle the %G format for TEXT.  Same as %K in handle_K_format in\n-   tree-pretty-print.c but with a Gimple statement as an argument.  */\n-\n-void\n-percent_G_format (text_info *text)\n-{\n-  gimple *stmt = va_arg (*text->args_ptr, gimple*);\n-\n-  /* Fall back on the rich location if the statement doesn't have one.  */\n-  location_t loc = gimple_location (stmt);\n-  if (loc == UNKNOWN_LOCATION)\n-    loc = text->m_richloc->get_loc ();\n-  tree block = gimple_block (stmt);\n-  percent_K_format (text, loc, block);\n-}\n-\n #if __GNUC__ >= 10\n #  pragma GCC diagnostic pop\n #endif"}, {"sha": "dd930f9241e13ea550e6052c402fe30cc329d43a", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-10.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-10.c?ref=4f6e181181a48c341e524653cae0885fd170131e", "patch": "@@ -64,8 +64,8 @@ void test_cdiag (tree t, gimple *gc)\n   cdiag (\"%D\", t);       /* { dg-warning \".D. conversion used unquoted\" } */\n   cdiag (\"%E\", t);\n   cdiag (\"%F\", t);       /* { dg-warning \".F. conversion used unquoted\" } */\n-  cdiag (\"%G\", gc);\n-  cdiag (\"%K\", t);\n+  cdiag (\"%G\", gc);      /* { dg-warning \"format\" } */\n+  cdiag (\"%K\", t);       /* { dg-warning \"format\" } */\n \n   cdiag (\"%R\");       /* { dg-warning \"unmatched color reset directive\" } */\n   cdiag (\"%r\", \"\");   /* { dg-warning \"unterminated color directive\" } */\n@@ -80,8 +80,8 @@ void test_cdiag (tree t, gimple *gc)\n   cdiag (\"%<%D%>\", t);\n   cdiag (\"%<%E%>\", t);\n   cdiag (\"%<%F%>\", t);\n-  cdiag (\"%<%G%>\", gc);  /* { dg-warning \".G. conversion used within a quoted sequence\" } */\n-  cdiag (\"%<%K%>\", t);   /* { dg-warning \".K. conversion used within a quoted sequence\" } */\n+  cdiag (\"%<%G%>\", gc);  /* { dg-warning \"format\" } */\n+  cdiag (\"%<%K%>\", t);   /* { dg-warning \"format\" } */\n \n   cdiag (\"%<%R%>\");      /* { dg-warning \"unmatched color reset directive\" } */\n   cdiag (\"%<%r%>\", \"\");  /* { dg-warning \"unterminated color directive\" } */\n@@ -103,8 +103,8 @@ void test_tdiag (tree t, gimple *gc)\n \n   tdiag (\"%D\", t);       /* { dg-warning \".D. conversion used unquoted\" } */\n   tdiag (\"%E\", t);\n-  tdiag (\"%G\", gc);\n-  tdiag (\"%K\", t);\n+  tdiag (\"%G\", gc);     /* { dg-warning \"format\" } */\n+  tdiag (\"%K\", t);      /* { dg-warning \"format\" } */\n \n   tdiag (\"%R\");          /* { dg-warning \"unmatched color reset directive\" } */\n   tdiag (\"%r\", \"\");   /* { dg-warning \"unterminated color directive\" } */\n@@ -118,8 +118,8 @@ void test_tdiag (tree t, gimple *gc)\n \n   tdiag (\"%<%D%>\", t);\n   tdiag (\"%<%E%>\", t);\n-  tdiag (\"%<%G%>\", gc);  /* { dg-warning \".G. conversion used within a quoted sequence\" } */\n-  tdiag (\"%<%K%>\", t);   /* { dg-warning \".K. conversion used within a quoted sequence\" } */\n+  tdiag (\"%<%G%>\", gc);  /* { dg-warning \"format\" } */\n+  tdiag (\"%<%K%>\", t);   /* { dg-warning \"format\" } */\n \n   tdiag (\"%<%R%>\");      /* { dg-warning \"unmatched color reset directive\" } */\n   tdiag (\"%<%r%>\", \"\");  /* { dg-warning \"unterminated color directive\" } */\n@@ -138,8 +138,8 @@ void test_cxxdiag (tree t, gimple *gc)\n   cxxdiag (\"%D\", t);     /* { dg-warning \".D. conversion used unquoted\" } */\n   cxxdiag (\"%E\", t);\n   cxxdiag (\"%F\", t);     /* { dg-warning \".F. conversion used unquoted\" } */\n-  cxxdiag (\"%G\", gc);\n-  cxxdiag (\"%K\", t);\n+  cxxdiag (\"%G\", gc);    /* { dg-warning \"format\" } */\n+  cxxdiag (\"%K\", t);     /* { dg-warning \"format\" } */\n \n   cxxdiag (\"%R\");        /* { dg-warning \"unmatched color reset directive\" } */\n   cxxdiag (\"%r\", \"\");    /* { dg-warning \"unterminated color directive\" } */"}, {"sha": "d2bfca092a79f77e21dd9fab18594665eb3496e8", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_inlining.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_inlining.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_inlining.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_inlining.c?ref=4f6e181181a48c341e524653cae0885fd170131e", "patch": "@@ -133,7 +133,7 @@ test_inlining (gimple *stmt)\n       return;\n     }\n \n-  warning_at (call->location, 0, \"%G%s\", call,\n+  warning_at (call->location, 0, \"%s\",\n \t      TREE_STRING_POINTER (t_string));\n }\n "}, {"sha": "8bb214b2cf5203ad1578ea74ada58572a3d799b4", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=4f6e181181a48c341e524653cae0885fd170131e", "patch": "@@ -276,15 +276,6 @@ default_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n       t = va_arg (*text->args_ptr, tree);\n       break;\n \n-    case 'G':\n-      percent_G_format (text);\n-      return true;\n-\n-    case 'K':\n-      t = va_arg (*text->args_ptr, tree);\n-      percent_K_format (text, EXPR_LOCATION (t), TREE_BLOCK (t));\n-      return true;\n-\n     default:\n       return false;\n     }"}, {"sha": "fde07dfd0e1938e732d268e07c8aa911613017a3", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=4f6e181181a48c341e524653cae0885fd170131e", "patch": "@@ -4433,32 +4433,6 @@ newline_and_indent (pretty_printer *pp, int spc)\n   INDENT (spc);\n }\n \n-/* Handle the %K format for TEXT.  Separate from default_tree_printer\n-   so it can also be used in front ends.\n-   The location LOC and BLOCK are expected to be extracted by the caller\n-   from the %K argument arg via EXPR_LOCATION(arg) and TREE_BLOCK(arg).  */\n-\n-void\n-percent_K_format (text_info *text, location_t loc, tree block)\n-{\n-  text->set_location (0, loc, SHOW_RANGE_WITH_CARET);\n-  gcc_assert (pp_ti_abstract_origin (text) != NULL);\n-  *pp_ti_abstract_origin (text) = NULL;\n-\n-  while (block\n-\t && TREE_CODE (block) == BLOCK\n-\t && BLOCK_ABSTRACT_ORIGIN (block))\n-    {\n-      tree ao = BLOCK_ABSTRACT_ORIGIN (block);\n-      if (TREE_CODE (ao) == FUNCTION_DECL)\n-\t{\n-\t  *pp_ti_abstract_origin (text) = block;\n-\t  break;\n-\t}\n-      block = BLOCK_SUPERCONTEXT (block);\n-    }\n-}\n-\n /* Print the identifier ID to PRETTY-PRINTER.  */\n \n void"}, {"sha": "dacd256302b2d453dd460307a6611ac279f96481", "filename": "gcc/tree-pretty-print.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Ftree-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f6e181181a48c341e524653cae0885fd170131e/gcc%2Ftree-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.h?ref=4f6e181181a48c341e524653cae0885fd170131e", "patch": "@@ -52,7 +52,6 @@ extern int op_prio (const_tree);\n extern const char *op_symbol_code (enum tree_code);\n extern void pretty_print_string (pretty_printer *, const char *, size_t);\n extern void print_call_name (pretty_printer *, tree, dump_flags_t);\n-extern void percent_K_format (text_info *, location_t, tree);\n extern void pp_tree_identifier (pretty_printer *, tree);\n extern void dump_function_header (FILE *, tree, dump_flags_t);\n extern void pp_double_int (pretty_printer *pp, double_int d, bool uns);"}]}