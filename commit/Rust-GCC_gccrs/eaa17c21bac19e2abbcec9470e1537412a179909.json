{"sha": "eaa17c21bac19e2abbcec9470e1537412a179909", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFhMTdjMjFiYWMxOWUyYWJiY2VjOTQ3MGUxNTM3NDEyYTE3OTkwOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-09-27T20:04:15Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-09-27T20:04:15Z"}, "message": "i386.md (FPSR_REG): Remove.\n\n\t* config/i386/i386.md (FPSR_REG): Remove.\n\t(x86_fnstcw_1): Use (const_int 0) instead of FPCR_REG.\n\t(x86_fldcw_1): Remove insn pattern.\n\t(fnstenv): Do not clobber FPCR_REG.\n\t(fldenv): Ditto.\n\t* config/i386/i386.h (FIXED_REGISTERS) Remove fpsr register.\n\t(CALL_USED_REGISTERS): Ditto.\n\t(REG_ALLOC_ORDER): Ditto.\n\t(REG_CLASS_CONTENTS): Ditto.\n\t(HI_REGISTER_NAMES): Ditto.\n\t(ADDITIONAL_REGISTER_NAMES): Use defines instead\n\tof numerical constants.\n\t* config/i386/i386.c (regclass_map): Remove fpsr register.\n\t(dbx_register_map): Ditto.\n\t(dbx64_register_map): Ditto.\n\t(svr4_dbx_register_map): Ditto.\n\t(print_reg): Do not handle FPCR_REG.\n\ntestsuite/ChangeLog:\n\n\t* gcc.dg/rtl/x86_64/dfinit.c: Update scan-rtl-dump string.\n\t* gcc.dg/rtl/x86_64/times-two.c.before-df.c: Ditto.\n\t* gcc.target/i386/pr79804.c (foo): Use register \"19\", not \"20\".\n\nFrom-SVN: r264676", "tree": {"sha": "bac58ff9591e13df986589d9a70d4382db017a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bac58ff9591e13df986589d9a70d4382db017a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaa17c21bac19e2abbcec9470e1537412a179909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaa17c21bac19e2abbcec9470e1537412a179909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaa17c21bac19e2abbcec9470e1537412a179909", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaa17c21bac19e2abbcec9470e1537412a179909/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24676f1215413e6934132bfc6a25f1c02c9eecca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24676f1215413e6934132bfc6a25f1c02c9eecca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24676f1215413e6934132bfc6a25f1c02c9eecca"}], "stats": {"total": 315, "additions": 162, "deletions": 153}, "files": [{"sha": "a53b9a87109c47195139d588832213fccfb57401", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eaa17c21bac19e2abbcec9470e1537412a179909", "patch": "@@ -1,3 +1,23 @@\n+2018-09-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (FPSR_REG): Remove.\n+\t(x86_fnstcw_1): Use (const_int 0) instead of FPCR_REG.\n+\t(x86_fldcw_1): Remove insn pattern.\n+\t(fnstenv): Do not clobber FPCR_REG.\n+\t(fldenv): Ditto.\n+\t* config/i386/i386.h (FIXED_REGISTERS) Remove fpsr register.\n+\t(CALL_USED_REGISTERS): Ditto.\n+\t(REG_ALLOC_ORDER): Ditto.\n+\t(REG_CLASS_CONTENTS): Ditto.\n+\t(HI_REGISTER_NAMES): Ditto.\n+\t(ADDITIONAL_REGISTER_NAMES): Use defines instead\n+\tof numerical constants.\n+\t* config/i386/i386.c (regclass_map): Remove fpsr register.\n+\t(dbx_register_map): Ditto.\n+\t(dbx64_register_map): Ditto.\n+\t(svr4_dbx_register_map): Ditto.\n+\t(print_reg): Do not handle FPCR_REG.\n+\n 2018-09-27  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/87149"}, {"sha": "4f64e67653b2b11ea9ed72d717f88115a8ea8f08", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=eaa17c21bac19e2abbcec9470e1537412a179909", "patch": "@@ -241,10 +241,8 @@ enum reg_class const regclass_map[FIRST_PSEUDO_REGISTER] =\n   /* FP registers */\n   FP_TOP_REG, FP_SECOND_REG, FLOAT_REGS, FLOAT_REGS,\n   FLOAT_REGS, FLOAT_REGS, FLOAT_REGS, FLOAT_REGS,\n-  /* arg pointer */\n-  NON_Q_REGS,\n-  /* flags, fpsr, fpcr, frame */\n-  NO_REGS, NO_REGS, NO_REGS, NON_Q_REGS,\n+  /* arg pointer, flags, fpsr, frame */\n+  NON_Q_REGS, NO_REGS, NO_REGS, NON_Q_REGS,\n   /* SSE registers */\n   SSE_FIRST_REG, SSE_REGS, SSE_REGS, SSE_REGS,\n   SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS,\n@@ -273,7 +271,7 @@ int const dbx_register_map[FIRST_PSEUDO_REGISTER] =\n {\n   0, 2, 1, 3, 6, 7, 4, 5,\t\t/* general regs */\n   12, 13, 14, 15, 16, 17, 18, 19,\t/* fp regs */\n-  -1, -1, -1, -1, -1,\t\t\t/* arg, flags, fpsr, fpcr, frame */\n+  -1, -1, -1, -1,\t\t\t/* arg, flags, fpsr, frame */\n   21, 22, 23, 24, 25, 26, 27, 28,\t/* SSE */\n   29, 30, 31, 32, 33, 34, 35, 36,       /* MMX */\n   -1, -1, -1, -1, -1, -1, -1, -1,\t/* extended integer registers */\n@@ -289,7 +287,7 @@ int const dbx64_register_map[FIRST_PSEUDO_REGISTER] =\n {\n   0, 1, 2, 3, 4, 5, 6, 7,\t\t/* general regs */\n   33, 34, 35, 36, 37, 38, 39, 40,\t/* fp regs */\n-  -1, -1, -1, -1, -1,\t\t\t/* arg, flags, fpsr, fpcr, frame */\n+  -1, -1, -1, -1,\t\t\t/* arg, flags, fpsr, frame */\n   17, 18, 19, 20, 21, 22, 23, 24,\t/* SSE */\n   41, 42, 43, 44, 45, 46, 47, 48,       /* MMX */\n   8,9,10,11,12,13,14,15,\t\t/* extended integer registers */\n@@ -357,7 +355,7 @@ int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER] =\n {\n   0, 2, 1, 3, 6, 7, 5, 4,\t\t/* general regs */\n   11, 12, 13, 14, 15, 16, 17, 18,\t/* fp regs */\n-  -1, 9, -1, -1, -1,\t\t\t/* arg, flags, fpsr, fpcr, frame */\n+  -1, 9, -1, -1,\t\t\t/* arg, flags, fpsr, frame */\n   21, 22, 23, 24, 25, 26, 27, 28,\t/* SSE registers */\n   29, 30, 31, 32, 33, 34, 35, 36,\t/* MMX registers */\n   -1, -1, -1, -1, -1, -1, -1, -1,\t/* extended integer registers */\n@@ -17372,8 +17370,7 @@ print_reg (rtx x, int code, FILE *file)\n \n   if (regno == ARG_POINTER_REGNUM\n       || regno == FRAME_POINTER_REGNUM\n-      || regno == FPSR_REG\n-      || regno == FPCR_REG)\n+      || regno == FPSR_REG)\n     {\n       output_operand_lossage\n \t(\"invalid use of register '%s'\", reg_names[regno]);"}, {"sha": "0b0e2ed1e1aa53ec14d14050d8b7539225afe702", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 67, "deletions": 65, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=eaa17c21bac19e2abbcec9470e1537412a179909", "patch": "@@ -1026,8 +1026,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define FIXED_REGISTERS\t\t\t\t\t\t\\\n /*ax,dx,cx,bx,si,di,bp,sp,st,st1,st2,st3,st4,st5,st6,st7*/\t\\\n {  0, 0, 0, 0, 0, 0, 0, 1, 0,  0,  0,  0,  0,  0,  0,  0,\t\\\n-/*arg,flags,fpsr,fpcr,frame*/\t\t\t\t\t\\\n-    1,    1,   1,   1,    1,\t\t\t\t\t\\\n+/*arg,flags,fpsr,frame*/\t\t\t\t\t\\\n+    1,    1,   1,    1,\t\t\t\t\t\t\\\n /*xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7*/\t\t\t\\\n      0,   0,   0,   0,   0,   0,   0,   0,\t\t\t\\\n /* mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7*/\t\t\t\\\n@@ -1063,8 +1063,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define CALL_USED_REGISTERS\t\t\t\t\t\\\n /*ax,dx,cx,bx,si,di,bp,sp,st,st1,st2,st3,st4,st5,st6,st7*/\t\\\n {  1, 1, 1, 0, 4, 4, 0, 1, 1,  1,  1,  1,  1,  1,  1,  1,\t\\\n-/*arg,flags,fpsr,fpcr,frame*/\t\t\t\t\t\\\n-    1,   1,    1,   1,    1,\t\t\t\t\t\\\n+/*arg,flags,fpsr,frame*/\t\t\t\t\t\\\n+    1,   1,    1,    1,\t\t\t\t\t\t\\\n /*xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7*/\t\t\t\\\n      1,   1,   1,   1,   1,   1,   6,   6,\t\t\t\\\n /* mm0, mm1, mm2, mm3, mm4, mm5, mm6, mm7*/\t\t\t\\\n@@ -1089,12 +1089,12 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    The ADJUST_REG_ALLOC_ORDER actually overwrite the order,\n    so this is just empty initializer for array.  */\n \n-#define REG_ALLOC_ORDER \t\t\t\t\t\\\n-{  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\\\n-   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\t\\\n-   33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,  \\\n-   48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\t\\\n-   63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76 }\n+#define REG_ALLOC_ORDER\t\t\t\t\t\t\t\\\n+{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\t\t\t\\\n+  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\t\\\n+  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\t\\\n+  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\t\\\n+  64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75 }\n \n /* ADJUST_REG_ALLOC_ORDER is a macro which permits reg_alloc_order\n    to be rearranged based on a particular function.  When using sse math,\n@@ -1315,7 +1315,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    For any two classes, it is very desirable that there be another\n    class that represents their union.\n \n-   The flags, fpsr and fpcr registers are in no class.  */\n+   The flags and fpsr registers are in no class.  */\n \n enum reg_class\n {\n@@ -1411,36 +1411,36 @@ enum reg_class\n    TARGET_CONDITIONAL_REGISTER_USAGE.  */\n \n #define REG_CLASS_CONTENTS\t\t\t\t\t\t\\\n-{      { 0x0,        0x0,    0x0 },\t/* NO_REGS */\t\t\t\\\n-      { 0x01,        0x0,    0x0 },\t/* AREG */\t\t\t\\\n-      { 0x02,        0x0,    0x0 },\t/* DREG */\t\t\t\\\n-      { 0x04,        0x0,    0x0 },\t/* CREG */\t\t\t\\\n-      { 0x08,        0x0,    0x0 },\t/* BREG */\t\t\t\\\n-      { 0x10,        0x0,    0x0 },\t/* SIREG */\t\t\t\\\n-      { 0x20,        0x0,    0x0 },\t/* DIREG */\t\t\t\\\n-      { 0x03,        0x0,    0x0 },\t/* AD_REGS */\t\t\t\\\n-      { 0x07,        0x0,    0x0 },\t/* CLOBBERED_REGS */\t\t\\\n-      { 0x0f,        0x0,    0x0 },\t/* Q_REGS */\t\t\t\\\n-  { 0x1100f0,        0x0,    0x0 },\t/* NON_Q_REGS */\t\t\\\n-      { 0x7e,     0x1fe0,    0x0 },\t/* TLS_GOTBASE_REGS */\t\t\\\n-      { 0x7f,     0x1fe0,    0x0 },\t/* INDEX_REGS */\t\t\\\n-  { 0x1100ff,        0x0,    0x0 },\t/* LEGACY_REGS */\t\t\\\n-  { 0x1100ff,     0x1fe0,    0x0 },\t/* GENERAL_REGS */\t\t\\\n-     { 0x100,        0x0,    0x0 },\t/* FP_TOP_REG */\t\t\\\n-    { 0x0200,        0x0,    0x0 },\t/* FP_SECOND_REG */\t\t\\\n-    { 0xff00,        0x0,    0x0 },\t/* FLOAT_REGS */\t\t\\\n-  { 0x200000,        0x0,    0x0 },\t/* SSE_FIRST_REG */\t\t\\\n-{ 0x1fe00000,        0x0,    0x0 },\t/* NO_REX_SSE_REGS */\t\t\\\n-{ 0x1fe00000,   0x1fe000,    0x0 },\t/* SSE_REGS */\t\t\t\\\n-{ 0x1fe00000, 0xffffe000,   0x1f },\t/* ALL_SSE_REGS */\t\t\\\n-{ 0xe0000000,       0x1f,    0x0 },\t/* MMX_REGS */\t\t\t\\\n-{ 0x1fe0ff00, 0xffffe000,   0x1f },\t/* FLOAT_SSE_REGS */\t\t\\\n-{   0x11ffff,     0x1fe0,    0x0 },\t/* FLOAT_INT_REGS */\t\t\\\n-{ 0x1ff100ff, 0xffffffe0,   0x1f },\t/* INT_SSE_REGS */\t\t\\\n-{ 0x1ff1ffff, 0xffffffe0,   0x1f },\t/* FLOAT_INT_SSE_REGS */\t\\\n-       { 0x0,        0x0, 0x1fc0 },\t/* MASK_REGS */\t\t\t\\\n-       { 0x0,        0x0, 0x1fe0 },\t/* ALL_MASK_REGS */\t\t\\\n-{ 0xffffffff, 0xffffffff, 0x1fff }\t/* ALL_REGS  */\t\t\t\\\n+{      { 0x0,        0x0,   0x0 },\t/* NO_REGS */\t\t\t\\\n+      { 0x01,        0x0,   0x0 },\t/* AREG */\t\t\t\\\n+      { 0x02,        0x0,   0x0 },\t/* DREG */\t\t\t\\\n+      { 0x04,        0x0,   0x0 },\t/* CREG */\t\t\t\\\n+      { 0x08,        0x0,   0x0 },\t/* BREG */\t\t\t\\\n+      { 0x10,        0x0,   0x0 },\t/* SIREG */\t\t\t\\\n+      { 0x20,        0x0,   0x0 },\t/* DIREG */\t\t\t\\\n+      { 0x03,        0x0,   0x0 },\t/* AD_REGS */\t\t\t\\\n+      { 0x07,        0x0,   0x0 },\t/* CLOBBERED_REGS */\t\t\\\n+      { 0x0f,        0x0,   0x0 },\t/* Q_REGS */\t\t\t\\\n+   { 0x900f0,        0x0,   0x0 },\t/* NON_Q_REGS */\t\t\\\n+      { 0x7e,      0xff0,   0x0 },\t/* TLS_GOTBASE_REGS */\t\t\\\n+      { 0x7f,      0xff0,   0x0 },\t/* INDEX_REGS */\t\t\\\n+   { 0x900ff,        0x0,   0x0 },\t/* LEGACY_REGS */\t\t\\\n+   { 0x900ff,      0xff0,   0x0 },\t/* GENERAL_REGS */\t\t\\\n+     { 0x100,        0x0,   0x0 },\t/* FP_TOP_REG */\t\t\\\n+     { 0x200,        0x0,   0x0 },\t/* FP_SECOND_REG */\t\t\\\n+    { 0xff00,        0x0,   0x0 },\t/* FLOAT_REGS */\t\t\\\n+  { 0x100000,        0x0,   0x0 },\t/* SSE_FIRST_REG */\t\t\\\n+ { 0xff00000,        0x0,   0x0 },\t/* NO_REX_SSE_REGS */\t\t\\\n+ { 0xff00000,    0xff000,   0x0 },\t/* SSE_REGS */\t\t\t\\\n+ { 0xff00000, 0xfffff000,   0xf },\t/* ALL_SSE_REGS */\t\t\\\n+{ 0xf0000000,        0xf,   0x0 },\t/* MMX_REGS */\t\t\t\\\n+ { 0xff0ff00, 0xfffff000,   0xf },\t/* FLOAT_SSE_REGS */\t\t\\\n+ {   0x9ffff,      0xff0,   0x0 },\t/* FLOAT_INT_REGS */\t\t\\\n+ { 0xff900ff, 0xfffffff0,   0xf },\t/* INT_SSE_REGS */\t\t\\\n+ { 0xff9ffff, 0xfffffff0,   0xf },\t/* FLOAT_INT_SSE_REGS */\t\\\n+       { 0x0,        0x0, 0xfe0 },\t/* MASK_REGS */\t\t\t\\\n+       { 0x0,        0x0, 0xff0 },\t/* ALL_MASK_REGS */\t\t\\\n+{ 0xffffffff, 0xffffffff, 0xfff }\t/* ALL_REGS  */\t\t\t\\\n }\n \n /* The same information, inverted:\n@@ -2022,7 +2022,7 @@ do {\t\t\t\t\t\t\t\\\n #define HI_REGISTER_NAMES\t\t\t\t\t\t\\\n {\"ax\",\"dx\",\"cx\",\"bx\",\"si\",\"di\",\"bp\",\"sp\",\t\t\t\t\\\n  \"st\",\"st(1)\",\"st(2)\",\"st(3)\",\"st(4)\",\"st(5)\",\"st(6)\",\"st(7)\",\t\t\\\n- \"argp\", \"flags\", \"fpsr\", \"fpcr\", \"frame\",\t\t\t\t\\\n+ \"argp\", \"flags\", \"fpsr\", \"frame\",\t\t\t\t\t\\\n  \"xmm0\",\"xmm1\",\"xmm2\",\"xmm3\",\"xmm4\",\"xmm5\",\"xmm6\",\"xmm7\",\t\t\\\n  \"mm0\", \"mm1\", \"mm2\", \"mm3\", \"mm4\", \"mm5\", \"mm6\", \"mm7\",\t\t\\\n  \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\",\t\t\t\\\n@@ -2037,29 +2037,31 @@ do {\t\t\t\t\t\t\t\\\n \n /* Table of additional register names to use in user input.  */\n \n-#define ADDITIONAL_REGISTER_NAMES \\\n-{ { \"eax\", 0 }, { \"edx\", 1 }, { \"ecx\", 2 }, { \"ebx\", 3 },\t\t\\\n-  { \"esi\", 4 }, { \"edi\", 5 }, { \"ebp\", 6 }, { \"esp\", 7 },\t\t\\\n-  { \"rax\", 0 }, { \"rdx\", 1 }, { \"rcx\", 2 }, { \"rbx\", 3 },\t\t\\\n-  { \"rsi\", 4 }, { \"rdi\", 5 }, { \"rbp\", 6 }, { \"rsp\", 7 },\t\t\\\n-  { \"al\", 0 }, { \"dl\", 1 }, { \"cl\", 2 }, { \"bl\", 3 },\t\t\t\\\n-  { \"ah\", 0 }, { \"dh\", 1 }, { \"ch\", 2 }, { \"bh\", 3 },\t\t\t\\\n-  { \"ymm0\", 21}, { \"ymm1\", 22}, { \"ymm2\", 23}, { \"ymm3\", 24},\t\t\\\n-  { \"ymm4\", 25}, { \"ymm5\", 26}, { \"ymm6\", 27}, { \"ymm7\", 28},\t\t\\\n-  { \"ymm8\", 45}, { \"ymm9\", 46}, { \"ymm10\", 47}, { \"ymm11\", 48},\t\t\\\n-  { \"ymm12\", 49}, { \"ymm13\", 50}, { \"ymm14\", 51}, { \"ymm15\", 52},\t\\\n-  { \"ymm16\", 53}, { \"ymm17\", 54}, { \"ymm18\", 55}, { \"ymm19\", 56},\t\\\n-  { \"ymm20\", 57}, { \"ymm21\", 58}, { \"ymm22\", 59}, { \"ymm23\", 60},\t\\\n-  { \"ymm24\", 61}, { \"ymm25\", 62}, { \"ymm26\", 63}, { \"ymm27\", 64},\t\\\n-  { \"ymm28\", 65}, { \"ymm29\", 66}, { \"ymm30\", 67}, { \"ymm31\", 68},\t\\\n-  { \"zmm0\", 21}, { \"zmm1\", 22}, { \"zmm2\", 23}, { \"zmm3\", 24},\t\t\\\n-  { \"zmm4\", 25}, { \"zmm5\", 26}, { \"zmm6\", 27}, { \"zmm7\", 28},\t\t\\\n-  { \"zmm8\", 45}, { \"zmm9\", 46}, { \"zmm10\", 47}, { \"zmm11\", 48},\t\t\\\n-  { \"zmm12\", 49}, { \"zmm13\", 50}, { \"zmm14\", 51}, { \"zmm15\", 52},\t\\\n-  { \"zmm16\", 53}, { \"zmm17\", 54}, { \"zmm18\", 55}, { \"zmm19\", 56},\t\\\n-  { \"zmm20\", 57}, { \"zmm21\", 58}, { \"zmm22\", 59}, { \"zmm23\", 60},\t\\\n-  { \"zmm24\", 61}, { \"zmm25\", 62}, { \"zmm26\", 63}, { \"zmm27\", 64},\t\\\n-  { \"zmm28\", 65}, { \"zmm29\", 66}, { \"zmm30\", 67}, { \"zmm31\", 68} }\n+#define ADDITIONAL_REGISTER_NAMES\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\t\\\n+  { \"eax\", AX_REG }, { \"edx\", DX_REG }, { \"ecx\", CX_REG }, { \"ebx\", BX_REG },\t\\\n+  { \"esi\", SI_REG }, { \"edi\", DI_REG }, { \"ebp\", BP_REG }, { \"esp\", SP_REG },\t\\\n+  { \"rax\", AX_REG }, { \"rdx\", DX_REG }, { \"rcx\", CX_REG }, { \"rbx\", BX_REG },\t\\\n+  { \"rsi\", SI_REG }, { \"rdi\", DI_REG }, { \"rbp\", BP_REG }, { \"rsp\", SP_REG },\t\\\n+  { \"al\", AX_REG }, { \"dl\", DX_REG }, { \"cl\", CX_REG }, { \"bl\", BX_REG },\t\\\n+  { \"ah\", AX_REG }, { \"dh\", DX_REG }, { \"ch\", CX_REG }, { \"bh\", BX_REG },\t\\\n+  { \"ymm0\", XMM0_REG }, { \"ymm1\", XMM1_REG }, { \"ymm2\", XMM2_REG }, { \"ymm3\", XMM3_REG }, \\\n+  { \"ymm4\", XMM4_REG }, { \"ymm5\", XMM5_REG }, { \"ymm6\", XMM6_REG }, { \"ymm7\", XMM7_REG }, \\\n+  { \"ymm8\", XMM8_REG }, { \"ymm9\", XMM9_REG }, { \"ymm10\", XMM10_REG }, { \"ymm11\", XMM11_REG }, \\\n+  { \"ymm12\", XMM12_REG }, { \"ymm13\", XMM13_REG }, { \"ymm14\", XMM14_REG }, { \"ymm15\", XMM15_REG }, \\\n+  { \"ymm16\", XMM16_REG }, { \"ymm17\", XMM17_REG }, { \"ymm18\", XMM18_REG }, { \"ymm19\", XMM19_REG }, \\\n+  { \"ymm20\", XMM20_REG }, { \"ymm21\", XMM21_REG }, { \"ymm22\", XMM22_REG }, { \"ymm23\", XMM23_REG }, \\\n+  { \"ymm24\", XMM24_REG }, { \"ymm25\", XMM25_REG }, { \"ymm26\", XMM26_REG }, { \"ymm27\", XMM27_REG }, \\\n+  { \"ymm28\", XMM28_REG }, { \"ymm29\", XMM29_REG }, { \"ymm30\", XMM30_REG }, { \"ymm31\", XMM31_REG }, \\\n+  { \"zmm0\", XMM0_REG }, { \"zmm1\", XMM1_REG }, { \"zmm2\", XMM2_REG }, { \"zmm3\", XMM3_REG }, \\\n+  { \"zmm4\", XMM4_REG }, { \"zmm5\", XMM5_REG }, { \"zmm6\", XMM6_REG }, { \"zmm7\", XMM7_REG }, \\\n+  { \"zmm8\", XMM8_REG }, { \"zmm9\", XMM9_REG }, { \"zmm10\", XMM10_REG }, { \"zmm11\", XMM11_REG }, \\\n+  { \"zmm12\", XMM12_REG }, { \"zmm13\", XMM13_REG }, { \"zmm14\", XMM14_REG }, { \"zmm15\", XMM15_REG }, \\\n+  { \"zmm16\", XMM16_REG }, { \"zmm17\", XMM17_REG }, { \"zmm18\", XMM18_REG }, { \"zmm19\", XMM19_REG }, \\\n+  { \"zmm20\", XMM20_REG }, { \"zmm21\", XMM21_REG }, { \"zmm22\", XMM22_REG }, { \"zmm23\", XMM23_REG }, \\\n+  { \"zmm24\", XMM24_REG }, { \"zmm25\", XMM25_REG }, { \"zmm26\", XMM26_REG }, { \"zmm27\", XMM27_REG }, \\\n+  { \"zmm28\", XMM28_REG }, { \"zmm29\", XMM29_REG }, { \"zmm30\", XMM30_REG }, { \"zmm31\", XMM31_REG }  \\\n+}\n \n /* Note we are omitting these since currently I don't know how\n to get gcc to use these, since they want the same but different"}, {"sha": "e85bfc0cecc97cb0db1aed47a2e6ac718114cae1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 59, "deletions": 75, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=eaa17c21bac19e2abbcec9470e1537412a179909", "patch": "@@ -359,65 +359,64 @@\n    (ARGP_REG\t\t\t16)\n    (FLAGS_REG\t\t\t17)\n    (FPSR_REG\t\t\t18)\n-   (FPCR_REG\t\t\t19)\n-   (FRAME_REG\t\t\t20)\n-   (XMM0_REG\t\t\t21)\n-   (XMM1_REG\t\t\t22)\n-   (XMM2_REG\t\t\t23)\n-   (XMM3_REG\t\t\t24)\n-   (XMM4_REG\t\t\t25)\n-   (XMM5_REG\t\t\t26)\n-   (XMM6_REG\t\t\t27)\n-   (XMM7_REG\t\t\t28)\n-   (MM0_REG\t\t\t29)\n-   (MM1_REG\t\t\t30)\n-   (MM2_REG\t\t\t31)\n-   (MM3_REG\t\t\t32)\n-   (MM4_REG\t\t\t33)\n-   (MM5_REG\t\t\t34)\n-   (MM6_REG\t\t\t35)\n-   (MM7_REG\t\t\t36)\n-   (R8_REG\t\t\t37)\n-   (R9_REG\t\t\t38)\n-   (R10_REG\t\t\t39)\n-   (R11_REG\t\t\t40)\n-   (R12_REG\t\t\t41)\n-   (R13_REG\t\t\t42)\n-   (R14_REG\t\t\t43)\n-   (R15_REG\t\t\t44)\n-   (XMM8_REG\t\t\t45)\n-   (XMM9_REG\t\t\t46)\n-   (XMM10_REG\t\t\t47)\n-   (XMM11_REG\t\t\t48)\n-   (XMM12_REG\t\t\t49)\n-   (XMM13_REG\t\t\t50)\n-   (XMM14_REG\t\t\t51)\n-   (XMM15_REG\t\t\t52)\n-   (XMM16_REG\t\t\t53)\n-   (XMM17_REG\t\t\t54)\n-   (XMM18_REG\t\t\t55)\n-   (XMM19_REG\t\t\t56)\n-   (XMM20_REG\t\t\t57)\n-   (XMM21_REG\t\t\t58)\n-   (XMM22_REG\t\t\t59)\n-   (XMM23_REG\t\t\t60)\n-   (XMM24_REG\t\t\t61)\n-   (XMM25_REG\t\t\t62)\n-   (XMM26_REG\t\t\t63)\n-   (XMM27_REG\t\t\t64)\n-   (XMM28_REG\t\t\t65)\n-   (XMM29_REG\t\t\t66)\n-   (XMM30_REG\t\t\t67)\n-   (XMM31_REG\t\t\t68)\n-   (MASK0_REG\t\t\t69)\n-   (MASK1_REG\t\t\t70)\n-   (MASK2_REG\t\t\t71)\n-   (MASK3_REG\t\t\t72)\n-   (MASK4_REG\t\t\t73)\n-   (MASK5_REG\t\t\t74)\n-   (MASK6_REG\t\t\t75)\n-   (MASK7_REG\t\t\t76)\n-   (FIRST_PSEUDO_REG\t\t77)\n+   (FRAME_REG\t\t\t19)\n+   (XMM0_REG\t\t\t20)\n+   (XMM1_REG\t\t\t21)\n+   (XMM2_REG\t\t\t22)\n+   (XMM3_REG\t\t\t23)\n+   (XMM4_REG\t\t\t24)\n+   (XMM5_REG\t\t\t25)\n+   (XMM6_REG\t\t\t26)\n+   (XMM7_REG\t\t\t27)\n+   (MM0_REG\t\t\t28)\n+   (MM1_REG\t\t\t29)\n+   (MM2_REG\t\t\t30)\n+   (MM3_REG\t\t\t31)\n+   (MM4_REG\t\t\t32)\n+   (MM5_REG\t\t\t33)\n+   (MM6_REG\t\t\t34)\n+   (MM7_REG\t\t\t35)\n+   (R8_REG\t\t\t36)\n+   (R9_REG\t\t\t37)\n+   (R10_REG\t\t\t38)\n+   (R11_REG\t\t\t39)\n+   (R12_REG\t\t\t40)\n+   (R13_REG\t\t\t41)\n+   (R14_REG\t\t\t42)\n+   (R15_REG\t\t\t43)\n+   (XMM8_REG\t\t\t44)\n+   (XMM9_REG\t\t\t45)\n+   (XMM10_REG\t\t\t46)\n+   (XMM11_REG\t\t\t47)\n+   (XMM12_REG\t\t\t48)\n+   (XMM13_REG\t\t\t49)\n+   (XMM14_REG\t\t\t50)\n+   (XMM15_REG\t\t\t51)\n+   (XMM16_REG\t\t\t52)\n+   (XMM17_REG\t\t\t53)\n+   (XMM18_REG\t\t\t54)\n+   (XMM19_REG\t\t\t55)\n+   (XMM20_REG\t\t\t56)\n+   (XMM21_REG\t\t\t57)\n+   (XMM22_REG\t\t\t58)\n+   (XMM23_REG\t\t\t59)\n+   (XMM24_REG\t\t\t60)\n+   (XMM25_REG\t\t\t61)\n+   (XMM26_REG\t\t\t62)\n+   (XMM27_REG\t\t\t63)\n+   (XMM28_REG\t\t\t64)\n+   (XMM29_REG\t\t\t65)\n+   (XMM30_REG\t\t\t66)\n+   (XMM31_REG\t\t\t67)\n+   (MASK0_REG\t\t\t68)\n+   (MASK1_REG\t\t\t69)\n+   (MASK2_REG\t\t\t70)\n+   (MASK3_REG\t\t\t71)\n+   (MASK4_REG\t\t\t72)\n+   (MASK5_REG\t\t\t73)\n+   (MASK6_REG\t\t\t74)\n+   (MASK7_REG\t\t\t75)\n+   (FIRST_PSEUDO_REG\t\t76)\n   ])\n \n ;; Insns whose names begin with \"x86_\" are emitted by gen_FOO calls\n@@ -5043,27 +5042,14 @@\n \n (define_insn \"x86_fnstcw_1\"\n   [(set (match_operand:HI 0 \"memory_operand\" \"=m\")\n-\t(unspec:HI [(reg:HI FPCR_REG)] UNSPEC_FSTCW))]\n+\t(unspec:HI [(const_int 0)] UNSPEC_FSTCW))]\n   \"TARGET_80387\"\n   \"fnstcw\\t%0\"\n   [(set (attr \"length\")\n \t(symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))\n    (set_attr \"mode\" \"HI\")\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n-\n-(define_insn \"x86_fldcw_1\"\n-  [(set (reg:HI FPCR_REG)\n-\t(unspec:HI [(match_operand:HI 0 \"memory_operand\" \"m\")] UNSPEC_FLDCW))]\n-  \"TARGET_80387\"\n-  \"fldcw\\t%0\"\n-  [(set (attr \"length\")\n-\t(symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))\n-   (set_attr \"mode\" \"HI\")\n-   (set_attr \"unit\" \"i387\")\n-   (set_attr \"athlon_decode\" \"vector\")\n-   (set_attr \"amdfam10_decode\" \"vector\")\n-   (set_attr \"bdver1_decode\" \"vector\")])\n \f\n ;; Conversion between fixed point and floating point.\n \n@@ -19603,7 +19589,6 @@\n (define_insn \"fnstenv\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n \t(unspec_volatile:BLK [(const_int 0)] UNSPECV_FNSTENV))\n-   (clobber (reg:HI FPCR_REG))\n    (clobber (reg:XF ST0_REG))\n    (clobber (reg:XF ST1_REG))\n    (clobber (reg:XF ST2_REG))\n@@ -19623,7 +19608,6 @@\n   [(unspec_volatile [(match_operand:BLK 0 \"memory_operand\" \"m\")]\n \t\t    UNSPECV_FLDENV)\n    (clobber (reg:CCFP FPSR_REG))\n-   (clobber (reg:HI FPCR_REG))\n    (clobber (reg:XF ST0_REG))\n    (clobber (reg:XF ST1_REG))\n    (clobber (reg:XF ST2_REG))"}, {"sha": "7f46bc8d28ecd05c148421470cfbc29fc9a7d40e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eaa17c21bac19e2abbcec9470e1537412a179909", "patch": "@@ -1,3 +1,9 @@\n+2018-09-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.dg/rtl/x86_64/dfinit.c: Update scan-rtl-dump string.\n+\t* gcc.dg/rtl/x86_64/times-two.c.before-df.c: Ditto.\n+\t* gcc.target/i386/pr79804.c (foo): Use register \"19\", not \"20\".\n+\n 2018-09-27  Martin Liska  <mliska@suse.cz>\n \n \t* g++.dg/pr60518.C: Add -Wno-missing-profile."}, {"sha": "81d3faaa7cb72eabc0025627e992d2d23c20d6e6", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/dfinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fdfinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fdfinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Fdfinit.c?ref=eaa17c21bac19e2abbcec9470e1537412a179909", "patch": "@@ -112,5 +112,5 @@ int __RTL (startwith (\"no-opt dfinit\")) test_1 (int i, int j, int k)\n    frontend, the exit block use of reg 0 (ax) wasn't picked up\n    on, due to not setting up crtl->return_rtx based on\n    DECL_RESULT (fndecl).  */\n-/* { dg-final { scan-rtl-dump \";;  exit block uses.*0 .ax. 6 .bp. 7 .sp. 20 .frame.\" \"dfinit\" } } */\n+/* { dg-final { scan-rtl-dump \";;  exit block uses.*0 .ax. 6 .bp. 7 .sp. 19 .frame.\" \"dfinit\" } } */\n /* { dg-final { scan-rtl-dump \";;  regs ever live.*0 .ax. 1 .dx. 4 .si. 5 .di. 17 .flags.\" \"dfinit\" } } */"}, {"sha": "687ae63f0d8b91bfaddd7300ba304f556704945d", "filename": "gcc/testsuite/gcc.dg/rtl/x86_64/times-two.c.before-df.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftimes-two.c.before-df.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftimes-two.c.before-df.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Fx86_64%2Ftimes-two.c.before-df.c?ref=eaa17c21bac19e2abbcec9470e1537412a179909", "patch": "@@ -49,6 +49,6 @@ int __RTL (startwith (\"rtl-dfinit\")) times_two (int i)\n    on, due to not setting up crtl->return_rtx based on\n    DECL_RESULT (fndecl).  */\n \n-/* { dg-final { scan-rtl-dump \";;  exit block uses.*0 .ax. 6 .bp. 7 .sp. 20 .frame.\" \"dfinit\" } } */\n+/* { dg-final { scan-rtl-dump \";;  exit block uses.*0 .ax. 6 .bp. 7 .sp. 19 .frame.\" \"dfinit\" } } */\n \n /* { dg-final { scan-rtl-dump \";;  regs ever live.*0 .ax. 5 .di. 17 .flags.\" \"dfinit\" } } */"}, {"sha": "10adb44667afa1e154eab61bcdd24b27de6e6db9", "filename": "gcc/testsuite/gcc.target/i386/pr79804.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79804.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa17c21bac19e2abbcec9470e1537412a179909/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79804.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79804.c?ref=eaa17c21bac19e2abbcec9470e1537412a179909", "patch": "@@ -4,7 +4,7 @@\n \n void foo (void)\n {\n-  register int r20 asm (\"20\");\n+  register int r19 asm (\"19\");\n \n-  asm volatile (\"# %0\" : \"=r\"(r20));  /* { dg-error \"invalid use of register\" } */\n+  asm volatile (\"# %0\" : \"=r\"(r19));  /* { dg-error \"invalid use of register\" } */\n }  /* { dg-error \"cannot be used in asm here\" } */"}]}