{"sha": "495333a652d5ca1dbeee793e56d158bf41023bbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk1MzMzYTY1MmQ1Y2ExZGJlZWU3OTNlNTZkMTU4YmY0MTAyM2JiZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-06-12T14:51:09Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-06-12T14:51:09Z"}, "message": "i386.md (shift patterns): Use (TARGET_SHIFT1 || optimize_size) to decide whether emit the short opcode.\n\n\n\t* i386.md (shift patterns): Use (TARGET_SHIFT1 || optimize_size) to\n\tdecide whether emit the short opcode.\n\t* i386.h (x86_shift1): Declare.\n\t(TARGET_SHIFT1): New macro.\n\t* i386.c (x86_shift1): New global variable.\n\n\t* toplev.c (rest_of_compilation): Call find_basic_block pre-loop unconditionally;\n\tmake loop to rebuild CFG; kill unnecesary find_basic_block calls;\n\tkill compute_bb_for_insn call.\n\t* cfgbuild.c (find_basic_blocks): Kill compute_bb_for_insn call.\n\t* haifa-sched.c (sched_init): Likewise.\n\t* ssa-ccp.c (ssa_const_prop): Likewise.\n\t* ssa-dce.c (ssa_eliminate_dead_code): Likewise.\n\nFrom-SVN: r54552", "tree": {"sha": "701aae7fc166b5ad570e72afccb4df30e0b4c171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/701aae7fc166b5ad570e72afccb4df30e0b4c171"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/495333a652d5ca1dbeee793e56d158bf41023bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/495333a652d5ca1dbeee793e56d158bf41023bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/495333a652d5ca1dbeee793e56d158bf41023bbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/495333a652d5ca1dbeee793e56d158bf41023bbd/comments", "author": null, "committer": null, "parents": [{"sha": "8ddfd7e562365b9684e64cedb2325121ea570878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ddfd7e562365b9684e64cedb2325121ea570878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ddfd7e562365b9684e64cedb2325121ea570878"}], "stats": {"total": 141, "additions": 71, "deletions": 70}, "files": [{"sha": "16804400578b691d75fd2c72c81bc2d8b4b4f2fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=495333a652d5ca1dbeee793e56d158bf41023bbd", "patch": "@@ -1,3 +1,19 @@\n+Wed Jun 12 16:45:13 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (shift patterns): Use (TARGET_SHIFT1 || optimize_size) to\n+\tdecide whether emit the short opcode.\n+\t* i386.h (x86_shift1): Declare.\n+\t(TARGET_SHIFT1): New macro.\n+\t* i386.c (x86_shift1): New global variable.\n+\n+\t* toplev.c (rest_of_compilation): Call find_basic_block pre-loop unconditionally;\n+\tmake loop to rebuild CFG; kill unnecesary find_basic_block calls;\n+\tkill compute_bb_for_insn call.\n+\t* cfgbuild.c (find_basic_blocks): Kill compute_bb_for_insn call.\n+\t* haifa-sched.c (sched_init): Likewise.\n+\t* ssa-ccp.c (ssa_const_prop): Likewise.\n+\t* ssa-dce.c (ssa_eliminate_dead_code): Likewise.\n+\n 2002-06-11  David S. Miller  <davem@redhat.com>\n \n \t* emit-rtl.c (emit_*_scope): Only access INSN_SCOPE if"}, {"sha": "8b7b705893135e581b3393ed5c1a07464f4b6bd2", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=495333a652d5ca1dbeee793e56d158bf41023bbd", "patch": "@@ -647,13 +647,6 @@ find_basic_blocks (f, nregs, file)\n \n   find_basic_blocks_1 (f);\n \n-  /* Record the block to which an insn belongs.  */\n-  /* ??? This should be done another way, by which (perhaps) a label is\n-     tagged directly with the basic block that it starts.  It is used for\n-     more than that currently, but IMO that is the only valid use.  */\n-\n-  compute_bb_for_insn ();\n-\n   /* Discover the edges of our cfg.  */\n   make_edges (label_value_list, ENTRY_BLOCK_PTR->next_bb, EXIT_BLOCK_PTR->prev_bb, 0);\n "}, {"sha": "b207abe1601343375f84aa3864ef24cd0b74156b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=495333a652d5ca1dbeee793e56d158bf41023bbd", "patch": "@@ -394,6 +394,7 @@ const int x86_accumulate_outgoing_args = m_ATHLON | m_PENT4 | m_PPRO;\n const int x86_prologue_using_move = m_ATHLON | m_PENT4 | m_PPRO;\n const int x86_epilogue_using_move = m_ATHLON | m_PENT4 | m_PPRO;\n const int x86_decompose_lea = m_PENT4;\n+const int x86_shift1 = ~m_486;\n const int x86_arch_always_fancy_math_387 = m_PENT | m_PPRO | m_ATHLON | m_PENT4;\n \n /* In case the avreage insn count for single function invocation is\n@@ -1834,6 +1835,10 @@ classify_argument (mode, type, classes, bit_offset)\n       return 1;\n     case V4SFmode:\n     case V4SImode:\n+    case V16QImode:\n+    case V8HImode:\n+    case V2DFmode:\n+    case V2DImode:\n       classes[0] = X86_64_SSE_CLASS;\n       classes[1] = X86_64_SSEUP_CLASS;\n       return 2;"}, {"sha": "87b574b0d25b187ebf46879bfa2e7f0ffc512fcf", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=495333a652d5ca1dbeee793e56d158bf41023bbd", "patch": "@@ -208,7 +208,7 @@ extern const int x86_add_esp_4, x86_add_esp_8, x86_sub_esp_4, x86_sub_esp_8;\n extern const int x86_partial_reg_dependency, x86_memory_mismatch_stall;\n extern const int x86_accumulate_outgoing_args, x86_prologue_using_move;\n extern const int x86_epilogue_using_move, x86_decompose_lea;\n-extern const int x86_arch_always_fancy_math_387;\n+extern const int x86_arch_always_fancy_math_387, x86_shift1;\n extern int x86_prefetch_sse;\n \n #define TARGET_USE_LEAVE (x86_use_leave & CPUMASK)\n@@ -250,6 +250,7 @@ extern int x86_prefetch_sse;\n #define TARGET_EPILOGUE_USING_MOVE (x86_epilogue_using_move & CPUMASK)\n #define TARGET_DECOMPOSE_LEA (x86_decompose_lea & CPUMASK)\n #define TARGET_PREFETCH_SSE (x86_prefetch_sse)\n+#define TARGET_SHIFT1 (x86_shift1 & CPUMASK)\n \n #define TARGET_STACK_PROBE (target_flags & MASK_STACK_PROBE)\n "}, {"sha": "094f441bfa5bde3f525cd2c0e2ad588ca76a891a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=495333a652d5ca1dbeee793e56d158bf41023bbd", "patch": "@@ -10354,7 +10354,7 @@\n \treturn \"sal{q}\\t{%b2, %0|%0, %b2}\";\n       else if (GET_CODE (operands[2]) == CONST_INT\n \t       && INTVAL (operands[2]) == 1\n-\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t       && (TARGET_SHIFT1 || optimize_size))\n \treturn \"sal{q}\\t%0\";\n       else\n \treturn \"sal{q}\\t{%2, %0|%0, %2}\";\n@@ -10411,7 +10411,7 @@\n \treturn \"sal{q}\\t{%b2, %0|%0, %b2}\";\n       else if (GET_CODE (operands[2]) == CONST_INT\n \t       && INTVAL (operands[2]) == 1\n-\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t       && (TARGET_SHIFT1 || optimize_size))\n \treturn \"sal{q}\\t%0\";\n       else\n \treturn \"sal{q}\\t{%2, %0|%0, %2}\";\n@@ -10559,7 +10559,7 @@\n \treturn \"sal{l}\\t{%b2, %0|%0, %b2}\";\n       else if (GET_CODE (operands[2]) == CONST_INT\n \t       && INTVAL (operands[2]) == 1\n-\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t       && (TARGET_SHIFT1 || optimize_size))\n \treturn \"sal{l}\\t%0\";\n       else\n \treturn \"sal{l}\\t{%2, %0|%0, %2}\";\n@@ -10620,7 +10620,7 @@\n \treturn \"sal{l}\\t{%b2, %k0|%k0, %b2}\";\n       else if (GET_CODE (operands[2]) == CONST_INT\n \t       && INTVAL (operands[2]) == 1\n-\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t       && (TARGET_SHIFT1 || optimize_size))\n \treturn \"sal{l}\\t%k0\";\n       else\n \treturn \"sal{l}\\t{%2, %k0|%k0, %2}\";\n@@ -10677,7 +10677,7 @@\n \treturn \"sal{l}\\t{%b2, %0|%0, %b2}\";\n       else if (GET_CODE (operands[2]) == CONST_INT\n \t       && INTVAL (operands[2]) == 1\n-\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t       && (TARGET_SHIFT1 || optimize_size))\n \treturn \"sal{l}\\t%0\";\n       else\n \treturn \"sal{l}\\t{%2, %0|%0, %2}\";\n@@ -10716,7 +10716,7 @@\n \treturn \"sal{l}\\t{%b2, %k0|%k0, %b2}\";\n       else if (GET_CODE (operands[2]) == CONST_INT\n \t       && INTVAL (operands[2]) == 1\n-\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t       && (TARGET_SHIFT1 || optimize_size))\n \treturn \"sal{l}\\t%k0\";\n       else\n \treturn \"sal{l}\\t{%2, %k0|%k0, %2}\";\n@@ -10761,7 +10761,7 @@\n \treturn \"sal{w}\\t{%b2, %0|%0, %b2}\";\n       else if (GET_CODE (operands[2]) == CONST_INT\n \t       && INTVAL (operands[2]) == 1\n-\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t       && (TARGET_SHIFT1 || optimize_size))\n \treturn \"sal{w}\\t%0\";\n       else\n \treturn \"sal{w}\\t{%2, %0|%0, %2}\";\n@@ -10799,7 +10799,7 @@\n \treturn \"sal{w}\\t{%b2, %0|%0, %b2}\";\n       else if (GET_CODE (operands[2]) == CONST_INT\n \t       && INTVAL (operands[2]) == 1\n-\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t       && (TARGET_SHIFT1 || optimize_size))\n \treturn \"sal{w}\\t%0\";\n       else\n \treturn \"sal{w}\\t{%2, %0|%0, %2}\";\n@@ -10841,7 +10841,7 @@\n \treturn \"sal{w}\\t{%b2, %0|%0, %b2}\";\n       else if (GET_CODE (operands[2]) == CONST_INT\n \t       && INTVAL (operands[2]) == 1\n-\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t       && (TARGET_SHIFT1 || optimize_size))\n \treturn \"sal{w}\\t%0\";\n       else\n \treturn \"sal{w}\\t{%2, %0|%0, %2}\";\n@@ -10897,7 +10897,7 @@\n \t}\n       else if (GET_CODE (operands[2]) == CONST_INT\n \t       && INTVAL (operands[2]) == 1\n-\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t       && (TARGET_SHIFT1 || optimize_size))\n \t{\n \t  if (get_attr_mode (insn) == MODE_SI)\n \t    return \"sal{l}\\t%0\";\n@@ -10953,7 +10953,7 @@\n \t}\n       else if (GET_CODE (operands[2]) == CONST_INT\n \t       && INTVAL (operands[2]) == 1\n-\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t       && (TARGET_SHIFT1 || optimize_size))\n \t{\n \t  if (get_attr_mode (insn) == MODE_SI)\n \t    return \"sal{l}\\t%0\";\n@@ -11005,7 +11005,7 @@\n \treturn \"sal{b}\\t{%b2, %0|%0, %b2}\";\n       else if (GET_CODE (operands[2]) == CONST_INT\n \t       && INTVAL (operands[2]) == 1\n-\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t       && (TARGET_SHIFT1 || optimize_size))\n \treturn \"sal{b}\\t%0\";\n       else\n \treturn \"sal{b}\\t{%2, %0|%0, %2}\";\n@@ -11061,7 +11061,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"sar{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n@@ -11093,7 +11093,7 @@\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && (TARGET_SHIFT1 || optimize_size)\n    && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n   \"sar{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11250,7 +11250,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"sar{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n@@ -11264,7 +11264,7 @@\n \t\t\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\"))))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"sar{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"length\" \"2\")])\n@@ -11305,7 +11305,7 @@\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && (TARGET_SHIFT1 || optimize_size)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11323,7 +11323,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (ashiftrt:SI (match_dup 1) (match_dup 2))))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCmode)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && (TARGET_SHIFT1 || optimize_size)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"sar{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11374,7 +11374,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"sar{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n@@ -11406,7 +11406,7 @@\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && (TARGET_SHIFT1 || optimize_size)\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"sar{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11446,7 +11446,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n@@ -11461,7 +11461,7 @@\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\n    && (! TARGET_PARTIAL_REG_STALL || optimize_size)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n@@ -11506,7 +11506,7 @@\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && (TARGET_SHIFT1 || optimize_size)\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"sar{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11558,7 +11558,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"shr{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n@@ -11590,7 +11590,7 @@\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && (TARGET_SHIFT1 || optimize_size)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{q}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11668,7 +11668,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"shr{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n@@ -11682,7 +11682,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"shr{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"length\" \"2\")])\n@@ -11724,7 +11724,7 @@\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && (TARGET_SHIFT1 || optimize_size)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11742,7 +11742,7 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (zero_extend:DI (match_dup 1)) (match_dup 2)))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && (TARGET_SHIFT1 || optimize_size)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{l}\\t%k0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11793,7 +11793,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"shr{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n@@ -11825,7 +11825,7 @@\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && (TARGET_SHIFT1 || optimize_size)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"shr{w}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11865,7 +11865,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n@@ -11880,7 +11880,7 @@\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length\") \n@@ -11925,7 +11925,7 @@\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(lshiftrt:QI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && (TARGET_SHIFT1 || optimize_size)\n    && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n   \"shr{b}\\t%0\"\n   [(set_attr \"type\" \"ishift\")\n@@ -11967,7 +11967,7 @@\n \t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ROTATE, DImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"rol{q}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\") \n@@ -12001,7 +12001,7 @@\n \t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ROTATE, SImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"rol{l}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\") \n@@ -12016,7 +12016,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\"))))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ROTATE, SImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"rol{l}\\t%k0\"\n   [(set_attr \"type\" \"rotate\")\n    (set_attr \"length\" \"2\")])\n@@ -12060,7 +12060,7 @@\n \t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ROTATE, HImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"rol{w}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\") \n@@ -12095,7 +12095,7 @@\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n    && ix86_binary_operator_ok (ROTATE, QImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"rol{b}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\") \n@@ -12109,7 +12109,7 @@\n \t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ROTATE, QImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"rol{b}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\") \n@@ -12156,7 +12156,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ROTATERT, DImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"ror{q}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\") \n@@ -12190,7 +12190,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ROTATERT, SImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"ror{l}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\") \n@@ -12205,7 +12205,7 @@\n \t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))))\n    (clobber (reg:CC 17))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ROTATERT, SImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"ror{l}\\t%k0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\") \n@@ -12252,7 +12252,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ROTATERT, HImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"ror{w}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\") \n@@ -12286,7 +12286,7 @@\n \t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n    (clobber (reg:CC 17))]\n   \"ix86_binary_operator_ok (ROTATERT, QImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"ror{b}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\") \n@@ -12301,7 +12301,7 @@\n    (clobber (reg:CC 17))]\n   \"(! TARGET_PARTIAL_REG_STALL || optimize_size)\n    && ix86_binary_operator_ok (ROTATERT, QImode, operands)\n-   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+   && (TARGET_SHIFT1 || optimize_size)\"\n   \"ror{b}\\t%0\"\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length\") "}, {"sha": "7eb079b34445f1585cfa65a21db5a5a4821aa116", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=495333a652d5ca1dbeee793e56d158bf41023bbd", "patch": "@@ -2368,8 +2368,6 @@ sched_init (dump_file)\n \n   init_dependency_caches (luid);\n \n-  compute_bb_for_insn ();\n-\n   init_alias_analysis ();\n \n   if (write_symbols != NO_DEBUG)"}, {"sha": "e02ff8a59e8367bbd11fa6bd2017d53b762d6163", "filename": "gcc/ssa-ccp.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-ccp.c?ref=495333a652d5ca1dbeee793e56d158bf41023bbd", "patch": "@@ -991,9 +991,6 @@ ssa_const_prop ()\n   df_analyse (df_analyzer, 0,\n \t      DF_RD_CHAIN | DF_RU_CHAIN | DF_REG_INFO | DF_HARD_REGS);\n \n-  /* We need mappings from insn to its containing block.  */\n-  compute_bb_for_insn ();\n-\n   /* Perform a quick and dirty dead code elimination pass.  This is not\n      as aggressive as it could be, but it's good enough to clean up a\n      lot of unwanted junk and it is fast.  */"}, {"sha": "ffee1c9b5c0a30bd3ba3d62e811e92df5233d98d", "filename": "gcc/ssa-dce.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Fssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa-dce.c?ref=495333a652d5ca1dbeee793e56d158bf41023bbd", "patch": "@@ -508,8 +508,6 @@ ssa_eliminate_dead_code ()\n \n   /* Prepare for use of BLOCK_NUM ().  */\n   connect_infinite_loops_to_exit ();\n-   /* Be careful not to clear the added edges.  */\n-  compute_bb_for_insn ();\n \n   /* Compute control dependence.  */\n   pdom = (int *) xmalloc (last_basic_block * sizeof (int));"}, {"sha": "5105ec8c6939b3ea08d8f2cafe4534b309588cde", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/495333a652d5ca1dbeee793e56d158bf41023bbd/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=495333a652d5ca1dbeee793e56d158bf41023bbd", "patch": "@@ -2642,6 +2642,7 @@ rest_of_compilation (decl)\n   free_bb_for_insn ();\n   copy_loop_headers (insns);\n   purge_line_number_notes (insns);\n+  find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n \n   timevar_pop (TV_JUMP);\n   close_dump_file (DFI_jump, print_rtl, insns);\n@@ -2662,7 +2663,6 @@ rest_of_compilation (decl)\n       timevar_push (TV_TO_SSA);\n       open_dump_file (DFI_ssa, decl);\n \n-      find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n       cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n       convert_to_ssa ();\n \n@@ -2717,16 +2717,13 @@ rest_of_compilation (decl)\n       timevar_pop (TV_FROM_SSA);\n \n       ggc_collect ();\n-      /* CFG is no longer maintained up-to-date.  */\n-      free_bb_for_insn ();\n     }\n \n   timevar_push (TV_JUMP);\n \n   if (flag_delete_null_pointer_checks || flag_if_conversion)\n     {\n       open_dump_file (DFI_null, decl);\n-      find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n       if (rtl_dump_file)\n \tdump_flow_info (rtl_dump_file);\n       cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n@@ -2745,8 +2742,6 @@ rest_of_compilation (decl)\n      maximum instruction UID, so if we can reduce the maximum UID\n      we'll save big on memory.  */\n   renumber_insns (rtl_dump_file);\n-  if (optimize)\n-    compute_bb_for_insn ();\n   timevar_pop (TV_JUMP);\n \n   close_dump_file (DFI_jump, print_rtl_with_bb, insns);\n@@ -2794,7 +2789,6 @@ rest_of_compilation (decl)\n       /* The second pass of jump optimization is likely to have\n          removed a bunch more instructions.  */\n       renumber_insns (rtl_dump_file);\n-      compute_bb_for_insn ();\n \n       timevar_pop (TV_CSE);\n       close_dump_file (DFI_cse, print_rtl_with_bb, insns);\n@@ -2912,6 +2906,7 @@ rest_of_compilation (decl)\n       delete_trivially_dead_insns (insns, max_reg_num ());\n       close_dump_file (DFI_loop, print_rtl, insns);\n       timevar_pop (TV_LOOP);\n+      find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n \n       ggc_collect ();\n     }\n@@ -2921,8 +2916,6 @@ rest_of_compilation (decl)\n \n   timevar_push (TV_FLOW);\n   open_dump_file (DFI_cfg, decl);\n-\n-  find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n   if (rtl_dump_file)\n     dump_flow_info (rtl_dump_file);\n   cleanup_cfg ((optimize ? CLEANUP_EXPENSIVE : 0)"}]}