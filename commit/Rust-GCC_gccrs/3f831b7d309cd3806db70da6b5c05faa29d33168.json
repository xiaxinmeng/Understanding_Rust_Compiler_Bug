{"sha": "3f831b7d309cd3806db70da6b5c05faa29d33168", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4MzFiN2QzMDljZDM4MDZkYjcwZGE2YjVjMDVmYWEyOWQzMzE2OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-05-29T18:51:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-05-29T18:51:48Z"}, "message": "re PR rtl-optimization/49095 (Horrible code generation for trivial decrement with test)\n\n\tPR rtl-optimization/49095\n\t* config/i386/predicates.md (plusminuslogic_operator): New predicate.\n\t* config/i386/i386.md: Add peepholes for mem {+,-,&,|,^}= x; mem != 0.\n\n\t* gcc.target/i386/pr49095.c: New test.\n\nFrom-SVN: r174413", "tree": {"sha": "e3942ff4a32ccdefecf128d160069a33707c0ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3942ff4a32ccdefecf128d160069a33707c0ecd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f831b7d309cd3806db70da6b5c05faa29d33168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f831b7d309cd3806db70da6b5c05faa29d33168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f831b7d309cd3806db70da6b5c05faa29d33168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f831b7d309cd3806db70da6b5c05faa29d33168/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb03a37e57f31ad176cd901fcc39243d524d4cd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb03a37e57f31ad176cd901fcc39243d524d4cd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb03a37e57f31ad176cd901fcc39243d524d4cd4"}], "stats": {"total": 175, "additions": 174, "deletions": 1}, "files": [{"sha": "eaa7f6438b9668bc7158620735fc794c2cf0689c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f831b7d309cd3806db70da6b5c05faa29d33168/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f831b7d309cd3806db70da6b5c05faa29d33168/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f831b7d309cd3806db70da6b5c05faa29d33168", "patch": "@@ -1,3 +1,9 @@\n+2011-05-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/49095\n+\t* config/i386/predicates.md (plusminuslogic_operator): New predicate.\n+\t* config/i386/i386.md: Add peepholes for mem {+,-,&,|,^}= x; mem != 0.\n+\n 2011-05-29  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR target/43995"}, {"sha": "73dc7e891ff4d31a6b497bd20dace646a356354b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f831b7d309cd3806db70da6b5c05faa29d33168/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f831b7d309cd3806db70da6b5c05faa29d33168/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3f831b7d309cd3806db70da6b5c05faa29d33168", "patch": "@@ -16868,6 +16868,91 @@\n               (clobber (reg:CC FLAGS_REG))])\n    (set (match_dup 0) (match_dup 2))])\n \n+;; Attempt to use arith or logical operations with memory outputs with\n+;; setting of flags.\n+(define_peephole2\n+  [(set (match_operand:SWI 0 \"register_operand\" \"\")\n+\t(match_operand:SWI 1 \"memory_operand\" \"\"))\n+   (parallel [(set (match_dup 0)\n+\t\t   (match_operator:SWI 3 \"plusminuslogic_operator\"\n+\t\t     [(match_dup 0)\n+\t\t      (match_operand:SWI 2 \"<nonmemory_operand>\" \"\")]))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (match_dup 1) (match_dup 0))\n+   (set (reg FLAGS_REG) (compare (match_dup 0) (const_int 0)))]\n+  \"(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n+   && peep2_reg_dead_p (4, operands[0])\n+   && !reg_overlap_mentioned_p (operands[0], operands[1])\n+   && ix86_match_ccmode (peep2_next_insn (3),\n+\t\t\t (GET_CODE (operands[3]) == PLUS\n+\t\t\t  || GET_CODE (operands[3]) == MINUS)\n+\t\t\t ? CCGOCmode : CCNOmode)\"\n+  [(parallel [(set (match_dup 4) (match_dup 5))\n+\t      (set (match_dup 1) (match_op_dup 3 [(match_dup 1)\n+\t\t\t\t\t\t  (match_dup 2)]))])]\n+  \"operands[4] = SET_DEST (PATTERN (peep2_next_insn (3)));\n+   operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n+\t\t\t\t copy_rtx (operands[1]),\n+\t\t\t\t copy_rtx (operands[2]));\n+   operands[5] = gen_rtx_COMPARE (GET_MODE (operands[4]),\n+\t\t\t\t  operands[5], const0_rtx);\")\n+\n+(define_peephole2\n+  [(parallel [(set (match_operand:SWI 0 \"register_operand\" \"\")\n+\t\t   (match_operator:SWI 2 \"plusminuslogic_operator\"\n+\t\t     [(match_dup 0)\n+\t\t      (match_operand:SWI 1 \"memory_operand\" \"\")]))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (match_dup 1) (match_dup 0))\n+   (set (reg FLAGS_REG) (compare (match_dup 0) (const_int 0)))]\n+  \"(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n+   && GET_CODE (operands[2]) != MINUS\n+   && peep2_reg_dead_p (3, operands[0])\n+   && !reg_overlap_mentioned_p (operands[0], operands[1])\n+   && ix86_match_ccmode (peep2_next_insn (2),\n+\t\t\t GET_CODE (operands[2]) == PLUS\n+\t\t\t ? CCGOCmode : CCNOmode)\"\n+  [(parallel [(set (match_dup 3) (match_dup 4))\n+\t      (set (match_dup 1) (match_op_dup 2 [(match_dup 1)\n+\t\t\t\t\t\t  (match_dup 0)]))])]\n+  \"operands[3] = SET_DEST (PATTERN (peep2_next_insn (2)));\n+   operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[2]), <MODE>mode,\n+\t\t\t\t copy_rtx (operands[1]),\n+\t\t\t\t copy_rtx (operands[0]));\n+   operands[4] = gen_rtx_COMPARE (GET_MODE (operands[3]),\n+\t\t\t\t  operands[4], const0_rtx);\")\n+\n+(define_peephole2\n+  [(set (match_operand:SWI12 0 \"register_operand\" \"\")\n+\t(match_operand:SWI12 1 \"memory_operand\" \"\"))\n+   (parallel [(set (match_operand:SI 4 \"register_operand\" \"\")\n+\t\t   (match_operator:SI 3 \"plusminuslogic_operator\"\n+\t\t     [(match_dup 4)\n+\t\t      (match_operand:SI 2 \"nonmemory_operand\" \"\")]))\n+\t      (clobber (reg:CC FLAGS_REG))])\n+   (set (match_dup 1) (match_dup 0))\n+   (set (reg FLAGS_REG) (compare (match_dup 0) (const_int 0)))]\n+  \"(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n+   && REG_P (operands[0]) && REG_P (operands[4])\n+   && REGNO (operands[0]) == REGNO (operands[4])\n+   && peep2_reg_dead_p (4, operands[0])\n+   && !reg_overlap_mentioned_p (operands[0], operands[1])\n+   && ix86_match_ccmode (peep2_next_insn (3),\n+\t\t\t (GET_CODE (operands[3]) == PLUS\n+\t\t\t  || GET_CODE (operands[3]) == MINUS)\n+\t\t\t ? CCGOCmode : CCNOmode)\"\n+  [(parallel [(set (match_dup 4) (match_dup 5))\n+\t      (set (match_dup 1) (match_dup 6))])]\n+  \"operands[2] = gen_lowpart (<MODE>mode, operands[2]);\n+   operands[4] = SET_DEST (PATTERN (peep2_next_insn (3)));\n+   operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n+\t\t\t\t copy_rtx (operands[1]), operands[2]);\n+   operands[5] = gen_rtx_COMPARE (GET_MODE (operands[4]),\n+\t\t\t\t  operands[5], const0_rtx);\n+   operands[6] = gen_rtx_fmt_ee (GET_CODE (operands[3]), <MODE>mode,\n+\t\t\t\t copy_rtx (operands[1]),\n+\t\t\t\t copy_rtx (operands[2]));\")\n+\n ;; Attempt to always use XOR for zeroing registers.\n (define_peephole2\n   [(set (match_operand 0 \"register_operand\" \"\")"}, {"sha": "358d04f6532bc5c206173a7de96aa930044ef7c7", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f831b7d309cd3806db70da6b5c05faa29d33168/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f831b7d309cd3806db70da6b5c05faa29d33168/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=3f831b7d309cd3806db70da6b5c05faa29d33168", "patch": "@@ -1,5 +1,5 @@\n ;; Predicate definitions for IA-32 and x86-64.\n-;; Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+;; Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n ;; Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n@@ -1070,6 +1070,10 @@\n (define_predicate \"div_operator\"\n   (match_code \"div\"))\n \n+;; Return true if this is a plus, minus, and, ior or xor operation.\n+(define_predicate \"plusminuslogic_operator\"\n+  (match_code \"plus,minus,and,ior,xor\"))\n+\n ;; Return true if this is a float extend operation.\n (define_predicate \"float_operator\"\n   (match_code \"float\"))"}, {"sha": "0f2b1dc1fe2540fe3ac835c7fc5272454769a99c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f831b7d309cd3806db70da6b5c05faa29d33168/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f831b7d309cd3806db70da6b5c05faa29d33168/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f831b7d309cd3806db70da6b5c05faa29d33168", "patch": "@@ -1,3 +1,8 @@\n+2011-05-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/49095\n+\t* gcc.target/i386/pr49095.c: New test.\n+\n 2011-05-29  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "bc820204e979d36fa3199ae242b98bbfd237477c", "filename": "gcc/testsuite/gcc.target/i386/pr49095.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f831b7d309cd3806db70da6b5c05faa29d33168/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49095.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f831b7d309cd3806db70da6b5c05faa29d33168/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49095.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49095.c?ref=3f831b7d309cd3806db70da6b5c05faa29d33168", "patch": "@@ -0,0 +1,73 @@\n+/* PR rtl-optimization/49095 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+/* { dg-options \"-Os -mregparm=2\" { target ilp32 } } */\n+\n+void foo (void *);\n+\n+int *\n+f1 (int *x)\n+{\n+  if (!--*x)\n+    foo (x);\n+  return x;\n+}\n+\n+int\n+g1 (int x)\n+{\n+  if (!--x)\n+    foo ((void *) 0);\n+  return x;\n+}\n+\n+#define F(T, OP, OPN) \\\n+T *\t\t\t\\\n+f##T##OPN (T *x, T y)\t\\\n+{\t\t\t\\\n+  *x OP y;\t\t\\\n+  if (!*x)\t\t\\\n+    foo (x);\t\t\\\n+  return x;\t\t\\\n+}\t\t\t\\\n+\t\t\t\\\n+T\t\t\t\\\n+g##T##OPN (T x, T y)\t\\\n+{\t\t\t\\\n+  x OP y;\t\t\\\n+  if (!x)\t\t\\\n+    foo ((void *) 0);\t\\\n+  return x;\t\t\\\n+}\t\t\t\\\n+\t\t\t\\\n+T *\t\t\t\\\n+h##T##OPN (T *x)\t\\\n+{\t\t\t\\\n+  *x OP 24;\t\t\\\n+  if (!*x)\t\t\\\n+    foo (x);\t\t\\\n+  return x;\t\t\\\n+}\t\t\t\\\n+\t\t\t\\\n+T\t\t\t\\\n+i##T##OPN (T x, T y)\t\\\n+{\t\t\t\\\n+  x OP 24;\t\t\\\n+  if (!x)\t\t\\\n+    foo ((void *) 0);\t\\\n+  return x;\t\t\\\n+}\n+\n+#define G(T) \\\n+F (T, +=, plus)\t\t\\\n+F (T, -=, minus)\t\\\n+F (T, &=, and)\t\t\\\n+F (T, |=, or)\t\t\\\n+F (T, ^=, xor)\n+\n+G (char)\n+G (short)\n+G (int)\n+G (long)\n+\n+/* { dg-final { scan-assembler-not \"test\\[lq\\]\" } } */"}]}