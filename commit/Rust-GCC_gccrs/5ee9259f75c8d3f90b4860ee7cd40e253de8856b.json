{"sha": "5ee9259f75c8d3f90b4860ee7cd40e253de8856b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVlOTI1OWY3NWM4ZDNmOTBiNDg2MGVlN2NkNDBlMjUzZGU4ODU2Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-19T20:37:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-19T20:37:50Z"}, "message": "Generate an init function if any global variable needs a preinit.\n\nFrom-SVN: r169023", "tree": {"sha": "285525af646b8fd9037c502e76778000afdb2b48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/285525af646b8fd9037c502e76778000afdb2b48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ee9259f75c8d3f90b4860ee7cd40e253de8856b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee9259f75c8d3f90b4860ee7cd40e253de8856b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ee9259f75c8d3f90b4860ee7cd40e253de8856b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ee9259f75c8d3f90b4860ee7cd40e253de8856b/comments", "author": null, "committer": null, "parents": [{"sha": "e9dd48d91da11d1af1e61f773a060a44fd9e457e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9dd48d91da11d1af1e61f773a060a44fd9e457e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9dd48d91da11d1af1e61f773a060a44fd9e457e"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "8e67074941c6e77b955f175dfce5a93d7fc37ad0", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee9259f75c8d3f90b4860ee7cd40e253de8856b/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee9259f75c8d3f90b4860ee7cd40e253de8856b/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=5ee9259f75c8d3f90b4860ee7cd40e253de8856b", "patch": "@@ -1395,8 +1395,6 @@ Gogo::determine_types()\n \t  // initialization, we need an initialization function.\n \t  if (!variable->is_global())\n \t    ;\n-\t  else if (variable->has_pre_init())\n-\t    this->need_init_fn_ = true;\n \t  else if (variable->init() == NULL)\n \t    ;\n \t  else if (variable->type()->interface_type() != NULL)\n@@ -1604,9 +1602,10 @@ Find_shortcut::expression(Expression** pexpr)\n class Shortcuts : public Traverse\n {\n  public:\n-  Shortcuts()\n+  Shortcuts(Gogo* gogo)\n     : Traverse(traverse_variables\n-\t       | traverse_statements)\n+\t       | traverse_statements),\n+      gogo_(gogo)\n   { }\n \n  protected:\n@@ -1620,6 +1619,9 @@ class Shortcuts : public Traverse\n   // Convert a shortcut operator.\n   Statement*\n   convert_shortcut(Block* enclosing, Expression** pshortcut);\n+\n+  // The IR.\n+  Gogo* gogo_;\n };\n \n // Remove shortcut operators in a single statement.\n@@ -1687,7 +1689,7 @@ Shortcuts::variable(Named_object* no)\n \treturn TRAVERSE_CONTINUE;\n \n       Statement* snew = this->convert_shortcut(NULL, pshortcut);\n-      var->add_preinit_statement(snew);\n+      var->add_preinit_statement(this->gogo_, snew);\n       if (pshortcut == &init)\n \tvar->set_init(init);\n     }\n@@ -1730,7 +1732,7 @@ Shortcuts::convert_shortcut(Block* enclosing, Expression** pshortcut)\n   delete shortcut;\n \n   // Now convert any shortcut operators in LEFT and RIGHT.\n-  Shortcuts shortcuts;\n+  Shortcuts shortcuts(this->gogo_);\n   retblock->traverse(&shortcuts);\n \n   return Statement::make_block_statement(retblock, loc);\n@@ -1742,7 +1744,7 @@ Shortcuts::convert_shortcut(Block* enclosing, Expression** pshortcut)\n void\n Gogo::remove_shortcuts()\n {\n-  Shortcuts shortcuts;\n+  Shortcuts shortcuts(this);\n   this->traverse(&shortcuts);\n }\n \n@@ -1812,16 +1814,21 @@ Find_eval_ordering::expression(Expression** expression_pointer)\n class Order_eval : public Traverse\n {\n  public:\n-  Order_eval()\n+  Order_eval(Gogo* gogo)\n     : Traverse(traverse_variables\n-\t       | traverse_statements)\n+\t       | traverse_statements),\n+      gogo_(gogo)\n   { }\n \n   int\n   variable(Named_object*);\n \n   int\n   statement(Block*, size_t*, Statement*);\n+\n+ private:\n+  // The IR.\n+  Gogo* gogo_;\n };\n \n // Implement the order of evaluation rules for a statement.\n@@ -1942,7 +1949,7 @@ Order_eval::variable(Named_object* no)\n       Expression** pexpr = *p;\n       source_location loc = (*pexpr)->location();\n       Temporary_statement* ts = Statement::make_temporary(NULL, *pexpr, loc);\n-      var->add_preinit_statement(ts);\n+      var->add_preinit_statement(this->gogo_, ts);\n       *pexpr = Expression::make_temporary_reference(ts, loc);\n     }\n \n@@ -1954,7 +1961,7 @@ Order_eval::variable(Named_object* no)\n void\n Gogo::order_evaluations()\n {\n-  Order_eval order_eval;\n+  Order_eval order_eval(this);\n   this->traverse(&order_eval);\n }\n \n@@ -3155,20 +3162,25 @@ Variable::lower_init_expression(Gogo* gogo, Named_object* function)\n // Get the preinit block.\n \n Block*\n-Variable::preinit_block()\n+Variable::preinit_block(Gogo* gogo)\n {\n   gcc_assert(this->is_global_);\n   if (this->preinit_ == NULL)\n     this->preinit_ = new Block(NULL, this->location());\n+\n+  // If a global variable has a preinitialization statement, then we\n+  // need to have an initialization function.\n+  gogo->set_need_init_fn();\n+\n   return this->preinit_;\n }\n \n // Add a statement to be run before the initialization expression.\n \n void\n-Variable::add_preinit_statement(Statement* s)\n+Variable::add_preinit_statement(Gogo* gogo, Statement* s)\n {\n-  Block* b = this->preinit_block();\n+  Block* b = this->preinit_block(gogo);\n   b->add_statement(s);\n   b->set_end_location(s->location());\n }"}, {"sha": "0a822c58cd063407b9570a9ad5c95aea913857f1", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee9259f75c8d3f90b4860ee7cd40e253de8856b/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee9259f75c8d3f90b4860ee7cd40e253de8856b/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=5ee9259f75c8d3f90b4860ee7cd40e253de8856b", "patch": "@@ -318,6 +318,11 @@ class Gogo\n   void\n   record_interface_type(Interface_type*);\n \n+  // Note that we need an initialization function.\n+  void\n+  set_need_init_fn()\n+  { this->need_init_fn_ = true; }\n+\n   // Clear out all names in file scope.  This is called when we start\n   // parsing a new file.\n   void\n@@ -1143,12 +1148,12 @@ class Variable\n   // Get the preinit block, a block of statements to be run before the\n   // initialization expression.\n   Block*\n-  preinit_block();\n+  preinit_block(Gogo*);\n \n   // Add a statement to be run before the initialization expression.\n   // This is only used for global variables.\n   void\n-  add_preinit_statement(Statement*);\n+  add_preinit_statement(Gogo*, Statement*);\n \n   // Lower the initialization expression after parsing is complete.\n   void"}, {"sha": "53414ebcb09cabda6f6874f1d22201771314cab4", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ee9259f75c8d3f90b4860ee7cd40e253de8856b/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ee9259f75c8d3f90b4860ee7cd40e253de8856b/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=5ee9259f75c8d3f90b4860ee7cd40e253de8856b", "patch": "@@ -1657,20 +1657,20 @@ Parse::init_vars_from_map(const Typed_identifier_list* vars, Type* type,\n   else if (!val_no->is_sink())\n     {\n       if (val_no->is_variable())\n-\tval_no->var_value()->add_preinit_statement(s);\n+\tval_no->var_value()->add_preinit_statement(this->gogo_, s);\n     }\n   else if (!no->is_sink())\n     {\n       if (no->is_variable())\n-\tno->var_value()->add_preinit_statement(s);\n+\tno->var_value()->add_preinit_statement(this->gogo_, s);\n     }\n   else\n     {\n       // Execute the map index expression just so that we can fail if\n       // the map is nil.\n       Named_object* dummy = this->create_dummy_global(Type::lookup_bool_type(),\n \t\t\t\t\t\t      NULL, location);\n-      dummy->var_value()->add_preinit_statement(s);\n+      dummy->var_value()->add_preinit_statement(this->gogo_, s);\n     }\n \n   return true;\n@@ -1724,18 +1724,18 @@ Parse::init_vars_from_receive(const Typed_identifier_list* vars, Type* type,\n   else if (!val_no->is_sink())\n     {\n       if (val_no->is_variable())\n-\tval_no->var_value()->add_preinit_statement(s);\n+\tval_no->var_value()->add_preinit_statement(this->gogo_, s);\n     }\n   else if (!no->is_sink())\n     {\n       if (no->is_variable())\n-\tno->var_value()->add_preinit_statement(s);\n+\tno->var_value()->add_preinit_statement(this->gogo_, s);\n     }\n   else\n     {\n       Named_object* dummy = this->create_dummy_global(Type::lookup_bool_type(),\n \t\t\t\t\t\t      NULL, location);\n-      dummy->var_value()->add_preinit_statement(s);\n+      dummy->var_value()->add_preinit_statement(this->gogo_, s);\n     }\n \n   return true;\n@@ -1790,17 +1790,17 @@ Parse::init_vars_from_type_guard(const Typed_identifier_list* vars,\n   else if (!val_no->is_sink())\n     {\n       if (val_no->is_variable())\n-\tval_no->var_value()->add_preinit_statement(s);\n+\tval_no->var_value()->add_preinit_statement(this->gogo_, s);\n     }\n   else if (!no->is_sink())\n     {\n       if (no->is_variable())\n-\tno->var_value()->add_preinit_statement(s);\n+\tno->var_value()->add_preinit_statement(this->gogo_, s);\n     }\n   else\n     {\n       Named_object* dummy = this->create_dummy_global(type, NULL, location);\n-      dummy->var_value()->add_preinit_statement(s);\n+      dummy->var_value()->add_preinit_statement(this->gogo_, s);\n     }\n \n   return true;"}]}