{"sha": "e18476eb94e8679ccd9e12776717944c5f6d52a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE4NDc2ZWI5NGU4Njc5Y2NkOWUxMjc3NjcxNzk0NGM1ZjZkNTJhMQ==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2004-07-25T00:13:01Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-07-25T00:13:01Z"}, "message": "c-common.c: Convert ATTRIBUTE_UNUSED to ARG_UNUSED in parameter lists.\n\n\t* c-common.c: Convert ATTRIBUTE_UNUSED to ARG_UNUSED in parameter\n\tlists.\n\t* c-decl.c: Likewise.\n\t* c-format.c: Likewise.\n\t* c-lex.c: Likewise.\n\t* c-opts.c: Likewise.\n\t* c-pragma.c: Likewise.\n\t* c-typeck.c: Likewise.\n\t* gencheck.c: Likewise.\n\t* genconditions.c: Likewise.\n\t* genconfig.c: Likewise.\n\t* genflags.c: Likewise.\n\t* gengtype.c: Likewise.\n\t* gensupport.c: Likewise.\n\t* ggc-none.c: Likewise.\n\t* langhooks.c: Likewise.\n\t* statistics.h: Likewise.\n\t* stub-objc.c: Likewise.\n\t* java/decl.c: Likewise.\n\nFrom-SVN: r85128", "tree": {"sha": "6ec6310142f700f2527b493abb45b8e621af8dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ec6310142f700f2527b493abb45b8e621af8dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e18476eb94e8679ccd9e12776717944c5f6d52a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18476eb94e8679ccd9e12776717944c5f6d52a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e18476eb94e8679ccd9e12776717944c5f6d52a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18476eb94e8679ccd9e12776717944c5f6d52a1/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72bb2c39ce1c3506d94f7e2e7c2db84ee8535add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72bb2c39ce1c3506d94f7e2e7c2db84ee8535add"}], "stats": {"total": 280, "additions": 153, "deletions": 127}, "files": [{"sha": "318b03fa87aaed6b921bc9de4b53ec9e0c1b5479", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -1,3 +1,25 @@\n+2004-07-25  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* c-common.c: Convert ATTRIBUTE_UNUSED to ARG_UNUSED in parameter\n+\tlists.\n+\t* c-decl.c: Likewise.\n+\t* c-format.c: Likewise.\n+\t* c-lex.c: Likewise.\n+\t* c-opts.c: Likewise.\n+\t* c-pragma.c: Likewise.\n+\t* c-typeck.c: Likewise.\n+\t* gencheck.c: Likewise.\n+\t* genconditions.c: Likewise.\n+\t* genconfig.c: Likewise.\n+\t* genflags.c: Likewise.\n+\t* gengtype.c: Likewise.\n+\t* gensupport.c: Likewise.\n+\t* ggc-none.c: Likewise.\n+\t* langhooks.c: Likewise.\n+\t* statistics.h: Likewise.\n+\t* stub-objc.c: Likewise.\n+\t* java/decl.c: Likewise.\n+\n 2004-07-24  Roman Zippel  <zippel@linux-m68k.org>\n \n \t* config/m68k/m68k.c (output_scc_di): Fix coding style."}, {"sha": "fe702fb215057c91469118d21feef72b440b6043", "filename": "gcc/c-common.c", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -3923,7 +3923,7 @@ c_init_attributes (void)\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_packed_attribute (tree *node, tree name, tree args  ATTRIBUTE_UNUSED,\n+handle_packed_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t\t int flags, bool *no_add_attrs)\n {\n   if (TYPE_P (*node))\n@@ -3967,8 +3967,8 @@ handle_packed_attribute (tree *node, tree name, tree args  ATTRIBUTE_UNUSED,\n \n static tree\n handle_nocommon_attribute (tree *node, tree name,\n-\t\t\t   tree args ATTRIBUTE_UNUSED,\n-\t\t\t   int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+\t\t\t   tree ARG_UNUSED (args),\n+\t\t\t   int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == VAR_DECL)\n     DECL_COMMON (*node) = 0;\n@@ -3985,8 +3985,8 @@ handle_nocommon_attribute (tree *node, tree name,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_common_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t\t int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+handle_common_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\t int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == VAR_DECL)\n     DECL_COMMON (*node) = 1;\n@@ -4003,8 +4003,8 @@ handle_common_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_noreturn_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t\t   int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+handle_noreturn_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\t   int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   tree type = TREE_TYPE (*node);\n \n@@ -4031,8 +4031,8 @@ handle_noreturn_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n \n static tree\n handle_noinline_attribute (tree *node, tree name,\n-\t\t\t   tree args ATTRIBUTE_UNUSED,\n-\t\t\t   int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+\t\t\t   tree ARG_UNUSED (args),\n+\t\t\t   int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == FUNCTION_DECL)\n     DECL_UNINLINABLE (*node) = 1;\n@@ -4050,8 +4050,8 @@ handle_noinline_attribute (tree *node, tree name,\n \n static tree\n handle_always_inline_attribute (tree *node, tree name,\n-\t\t\t\ttree args ATTRIBUTE_UNUSED,\n-\t\t\t\tint flags ATTRIBUTE_UNUSED,\n+\t\t\t\ttree ARG_UNUSED (args),\n+\t\t\t\tint ARG_UNUSED (flags),\n \t\t\t\tbool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == FUNCTION_DECL)\n@@ -4072,8 +4072,8 @@ handle_always_inline_attribute (tree *node, tree name,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_used_attribute (tree *pnode, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t       int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+handle_used_attribute (tree *pnode, tree name, tree ARG_UNUSED (args),\n+\t\t       int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   tree node = *pnode;\n \n@@ -4095,8 +4095,8 @@ handle_used_attribute (tree *pnode, tree name, tree args ATTRIBUTE_UNUSED,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_unused_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t\t int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+handle_unused_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\t int flags, bool *no_add_attrs)\n {\n   if (DECL_P (*node))\n     {\n@@ -4128,8 +4128,8 @@ handle_unused_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_const_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t\tint flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+handle_const_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\tint ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   tree type = TREE_TYPE (*node);\n \n@@ -4156,7 +4156,7 @@ handle_const_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n \n static tree\n handle_transparent_union_attribute (tree *node, tree name,\n-\t\t\t\t    tree args ATTRIBUTE_UNUSED, int flags,\n+\t\t\t\t    tree ARG_UNUSED (args), int flags,\n \t\t\t\t    bool *no_add_attrs)\n {\n   tree decl = NULL_TREE;\n@@ -4200,8 +4200,8 @@ handle_transparent_union_attribute (tree *node, tree name,\n \n static tree\n handle_constructor_attribute (tree *node, tree name,\n-\t\t\t      tree args ATTRIBUTE_UNUSED,\n-\t\t\t      int flags ATTRIBUTE_UNUSED,\n+\t\t\t      tree ARG_UNUSED (args),\n+\t\t\t      int ARG_UNUSED (flags),\n \t\t\t      bool *no_add_attrs)\n {\n   tree decl = *node;\n@@ -4228,8 +4228,8 @@ handle_constructor_attribute (tree *node, tree name,\n \n static tree\n handle_destructor_attribute (tree *node, tree name,\n-\t\t\t     tree args ATTRIBUTE_UNUSED,\n-\t\t\t     int flags ATTRIBUTE_UNUSED,\n+\t\t\t     tree ARG_UNUSED (args),\n+\t\t\t     int ARG_UNUSED (flags),\n \t\t\t     bool *no_add_attrs)\n {\n   tree decl = *node;\n@@ -4255,8 +4255,8 @@ handle_destructor_attribute (tree *node, tree name,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_mode_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t       int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+handle_mode_attribute (tree *node, tree name, tree args,\n+\t\t       int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   tree type = *node;\n \n@@ -4352,8 +4352,8 @@ handle_mode_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_section_attribute (tree *node, tree name ATTRIBUTE_UNUSED, tree args,\n-\t\t\t  int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+handle_section_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n+\t\t\t  int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   tree decl = *node;\n \n@@ -4404,7 +4404,7 @@ handle_section_attribute (tree *node, tree name ATTRIBUTE_UNUSED, tree args,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_aligned_attribute (tree *node, tree name ATTRIBUTE_UNUSED, tree args,\n+handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n \t\t\t  int flags, bool *no_add_attrs)\n {\n   tree decl = NULL_TREE;\n@@ -4483,10 +4483,10 @@ handle_aligned_attribute (tree *node, tree name ATTRIBUTE_UNUSED, tree args,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_weak_attribute (tree *node, tree name ATTRIBUTE_UNUSED,\n-\t\t       tree args ATTRIBUTE_UNUSED,\n-\t\t       int flags ATTRIBUTE_UNUSED,\n-\t\t       bool *no_add_attrs ATTRIBUTE_UNUSED)\n+handle_weak_attribute (tree *node, tree ARG_UNUSED (name),\n+\t\t       tree ARG_UNUSED (args),\n+\t\t       int ARG_UNUSED (flags),\n+\t\t       bool * ARG_UNUSED (no_add_attrs))\n {\n   declare_weak (*node);\n \n@@ -4498,7 +4498,7 @@ handle_weak_attribute (tree *node, tree name ATTRIBUTE_UNUSED,\n \n static tree\n handle_alias_attribute (tree *node, tree name, tree args,\n-\t\t\tint flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+\t\t\tint ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   tree decl = *node;\n \n@@ -4551,7 +4551,7 @@ handle_alias_attribute (tree *node, tree name, tree args,\n \n static tree\n handle_visibility_attribute (tree *node, tree name, tree args,\n-\t\t\t     int flags ATTRIBUTE_UNUSED,\n+\t\t\t     int ARG_UNUSED (flags),\n \t\t\t     bool *no_add_attrs)\n {\n   tree decl = *node;\n@@ -4590,7 +4590,7 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n \n static tree\n handle_tls_model_attribute (tree *node, tree name, tree args,\n-\t\t\t    int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+\t\t\t    int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   tree decl = *node;\n \n@@ -4629,8 +4629,8 @@ handle_tls_model_attribute (tree *node, tree name, tree args,\n \n static tree\n handle_no_instrument_function_attribute (tree *node, tree name,\n-\t\t\t\t\t tree args ATTRIBUTE_UNUSED,\n-\t\t\t\t\t int flags ATTRIBUTE_UNUSED,\n+\t\t\t\t\t tree ARG_UNUSED (args),\n+\t\t\t\t\t int ARG_UNUSED (flags),\n \t\t\t\t\t bool *no_add_attrs)\n {\n   tree decl = *node;\n@@ -4655,8 +4655,8 @@ handle_no_instrument_function_attribute (tree *node, tree name,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_malloc_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t\t int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+handle_malloc_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\t int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == FUNCTION_DECL)\n     DECL_IS_MALLOC (*node) = 1;\n@@ -4675,8 +4675,8 @@ handle_malloc_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n \n static tree\n handle_no_limit_stack_attribute (tree *node, tree name,\n-\t\t\t\t tree args ATTRIBUTE_UNUSED,\n-\t\t\t\t int flags ATTRIBUTE_UNUSED,\n+\t\t\t\t tree ARG_UNUSED (args),\n+\t\t\t\t int ARG_UNUSED (flags),\n \t\t\t\t bool *no_add_attrs)\n {\n   tree decl = *node;\n@@ -4701,8 +4701,8 @@ handle_no_limit_stack_attribute (tree *node, tree name,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_pure_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t       int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+handle_pure_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t       int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == FUNCTION_DECL)\n     DECL_IS_PURE (*node) = 1;\n@@ -4721,7 +4721,7 @@ handle_pure_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n \n static tree\n handle_deprecated_attribute (tree *node, tree name,\n-\t\t\t     tree args ATTRIBUTE_UNUSED, int flags,\n+\t\t\t     tree ARG_UNUSED (args), int flags,\n \t\t\t     bool *no_add_attrs)\n {\n   tree type = NULL_TREE;\n@@ -4779,7 +4779,7 @@ handle_deprecated_attribute (tree *node, tree name,\n \n static tree\n handle_vector_size_attribute (tree *node, tree name, tree args,\n-\t\t\t      int flags ATTRIBUTE_UNUSED,\n+\t\t\t      int ARG_UNUSED (flags),\n \t\t\t      bool *no_add_attrs)\n {\n   unsigned HOST_WIDE_INT vecsize, nunits;\n@@ -4848,8 +4848,8 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n \n /* Handle the \"nonnull\" attribute.  */\n static tree\n-handle_nonnull_attribute (tree *node, tree name ATTRIBUTE_UNUSED,\n-\t\t\t  tree args, int flags ATTRIBUTE_UNUSED,\n+handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n+\t\t\t  tree args, int ARG_UNUSED (flags),\n \t\t\t  bool *no_add_attrs)\n {\n   tree type = *node;\n@@ -4973,7 +4973,7 @@ nonnull_check_p (tree args, unsigned HOST_WIDE_INT param_num)\n    via check_function_arguments_recurse.  */\n \n static void\n-check_nonnull_arg (void *ctx ATTRIBUTE_UNUSED, tree param,\n+check_nonnull_arg (void * ARG_UNUSED (ctx), tree param,\n \t\t   unsigned HOST_WIDE_INT param_num)\n {\n   /* Just skip checking the argument if it's not a pointer.  This can\n@@ -5013,8 +5013,8 @@ get_nonnull_operand (tree arg_num_expr, unsigned HOST_WIDE_INT *valp)\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_nothrow_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n-\t\t\t  int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+handle_nothrow_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\t  int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == FUNCTION_DECL)\n     TREE_NOTHROW (*node) = 1;\n@@ -5033,7 +5033,7 @@ handle_nothrow_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n \n static tree\n handle_cleanup_attribute (tree *node, tree name, tree args,\n-\t\t\t  int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+\t\t\t  int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   tree decl = *node;\n   tree cleanup_id, cleanup_decl;\n@@ -5077,8 +5077,8 @@ handle_cleanup_attribute (tree *node, tree name, tree args,\n \n static tree\n handle_warn_unused_result_attribute (tree *node, tree name,\n-\t\t\t       tree args ATTRIBUTE_UNUSED,\n-\t\t\t       int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+\t\t\t       tree ARG_UNUSED (args),\n+\t\t\t       int ARG_UNUSED (flags), bool *no_add_attrs)\n {\n   /* Ignore the attribute for functions not returning any value.  */\n   if (VOID_TYPE_P (TREE_TYPE (*node)))\n@@ -5245,11 +5245,11 @@ resort_field_decl_cmp (const void *x_p, const void *y_p)\n \n void\n resort_sorted_fields (void *obj,\n-\t\t      void *orig_obj ATTRIBUTE_UNUSED ,\n+\t\t      void * ARG_UNUSED (orig_obj),\n \t\t      gt_pointer_operator new_value,\n \t\t      void *cookie)\n {\n-  struct sorted_fields_type *sf = obj;\n+  struct sorted_fields_type *sf = (struct sorted_fields_type *) obj;\n   resort_data.new_value = new_value;\n   resort_data.cookie = cookie;\n   qsort (&sf->elts[0], sf->len, sizeof (tree),"}, {"sha": "65fd24d02cbb687b4ab6699a73bf59aa42cd6d80", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -6526,7 +6526,7 @@ current_stmt_tree (void)\n    C.  */\n \n int\n-anon_aggr_type_p (tree node ATTRIBUTE_UNUSED)\n+anon_aggr_type_p (tree ARG_UNUSED (node))\n {\n   return 0;\n }"}, {"sha": "37a58c203e60dc5713c038b3e4873eb9fecbe7d7", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -83,7 +83,7 @@ static bool get_constant (tree expr, unsigned HOST_WIDE_INT *value,\n /* Handle a \"format_arg\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n tree\n-handle_format_arg_attribute (tree *node, tree name ATTRIBUTE_UNUSED,\n+handle_format_arg_attribute (tree *node, tree ARG_UNUSED (name),\n \t\t\t     tree args, int flags, bool *no_add_attrs)\n {\n   tree type = *node;\n@@ -2457,7 +2457,7 @@ extern const format_kind_info TARGET_FORMAT_TYPES[];\n /* Handle a \"format\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n tree\n-handle_format_attribute (tree *node, tree name ATTRIBUTE_UNUSED, tree args,\n+handle_format_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n \t\t\t int flags, bool *no_add_attrs)\n {\n   tree type = *node;"}, {"sha": "61f39d09b3eb386393aaa6b634667eaf2239fbc1", "filename": "gcc/c-lex.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -147,7 +147,7 @@ update_header_times (const char *name)\n }\n \n static int\n-dump_one_header (splay_tree_node n, void *dummy ATTRIBUTE_UNUSED)\n+dump_one_header (splay_tree_node n, void * ARG_UNUSED (dummy))\n {\n   print_time ((const char *) n->key,\n \t      ((struct c_fileinfo *) n->value)->time);\n@@ -172,9 +172,9 @@ dump_time_statistics (void)\n }\n \n static void\n-cb_ident (cpp_reader *pfile ATTRIBUTE_UNUSED,\n-\t  unsigned int line ATTRIBUTE_UNUSED,\n-\t  const cpp_string *str ATTRIBUTE_UNUSED)\n+cb_ident (cpp_reader * ARG_UNUSED (pfile),\n+\t  unsigned int ARG_UNUSED (line),\n+\t  const cpp_string * ARG_UNUSED (str))\n {\n #ifdef ASM_OUTPUT_IDENT\n   if (! flag_no_ident)\n@@ -193,7 +193,7 @@ cb_ident (cpp_reader *pfile ATTRIBUTE_UNUSED,\n /* Called at the start of every non-empty line.  TOKEN is the first\n    lexed token on the line.  Used for diagnostic line numbers.  */\n static void\n-cb_line_change (cpp_reader *pfile ATTRIBUTE_UNUSED, const cpp_token *token,\n+cb_line_change (cpp_reader * ARG_UNUSED (pfile), const cpp_token *token,\n \t\tint parsing_args)\n {\n   if (token->type != CPP_EOF && !parsing_args)\n@@ -315,7 +315,7 @@ cb_define (cpp_reader *pfile, source_location loc, cpp_hashnode *node)\n \n /* #undef callback for DWARF and DWARF2 debug info.  */\n static void\n-cb_undef (cpp_reader *pfile ATTRIBUTE_UNUSED, source_location loc,\n+cb_undef (cpp_reader * ARG_UNUSED (pfile), source_location loc,\n \t  cpp_hashnode *node)\n {\n   const struct line_map *map = linemap_lookup (&line_table, loc);"}, {"sha": "656aa2d9dcfbf01721d4e8351a9253d54063bca2", "filename": "gcc/c-opts.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -194,7 +194,7 @@ defer_opt (enum opt_code code, const char *arg)\n \n /* Common initialization before parsing options.  */\n unsigned int\n-c_common_init_options (unsigned int argc, const char **argv ATTRIBUTE_UNUSED)\n+c_common_init_options (unsigned int argc, const char ** ARG_UNUSED (argv))\n {\n   static const unsigned int lang_flags[] = {CL_C, CL_ObjC, CL_CXX, CL_ObjCXX};\n   unsigned int result;\n@@ -1354,7 +1354,7 @@ push_command_line_include (void)\n \n /* File change callback.  Has to handle -include files.  */\n static void\n-cb_file_change (cpp_reader *pfile ATTRIBUTE_UNUSED,\n+cb_file_change (cpp_reader * ARG_UNUSED (pfile),\n \t\tconst struct line_map *new_map)\n {\n   if (flag_preprocess_only)\n@@ -1367,7 +1367,7 @@ cb_file_change (cpp_reader *pfile ATTRIBUTE_UNUSED,\n }\n \n void\n-cb_dir_change (cpp_reader *pfile ATTRIBUTE_UNUSED, const char *dir)\n+cb_dir_change (cpp_reader * ARG_UNUSED (pfile), const char *dir)\n {\n   if (! set_src_pwd (dir))\n     warning (\"too late for # directive to set debug directory\");"}, {"sha": "11e14be5157ca80b987c6cdb505f2b7a53669ccc", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -155,7 +155,7 @@ pop_alignment (tree id)\n    #pragma pack (pop)\n    #pragma pack (pop, ID) */\n static void\n-handle_pragma_pack (cpp_reader *dummy ATTRIBUTE_UNUSED)\n+handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n {\n   tree x, id = 0;\n   int align = -1;\n@@ -315,7 +315,7 @@ maybe_apply_pragma_weak (tree decl)\n \n /* #pragma weak name [= value] */\n static void\n-handle_pragma_weak (cpp_reader *dummy ATTRIBUTE_UNUSED)\n+handle_pragma_weak (cpp_reader * ARG_UNUSED (dummy))\n {\n   tree name, value, x, decl;\n   enum cpp_ttype t;\n@@ -346,7 +346,7 @@ handle_pragma_weak (cpp_reader *dummy ATTRIBUTE_UNUSED)\n }\n #else\n void\n-maybe_apply_pragma_weak (tree decl ATTRIBUTE_UNUSED)\n+maybe_apply_pragma_weak (tree ARG_UNUSED (decl))\n {\n }\n #endif /* HANDLE_PRAGMA_WEAK */\n@@ -389,7 +389,7 @@ static void handle_pragma_redefine_extname (cpp_reader *);\n \n /* #pragma redefine_extname oldname newname */\n static void\n-handle_pragma_redefine_extname (cpp_reader *dummy ATTRIBUTE_UNUSED)\n+handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n {\n   tree oldname, newname, decl, x;\n   enum cpp_ttype t;\n@@ -458,7 +458,7 @@ static GTY(()) tree pragma_extern_prefix;\n \n /* #pragma extern_prefix \"prefix\" */\n static void\n-handle_pragma_extern_prefix (cpp_reader *dummy ATTRIBUTE_UNUSED)\n+handle_pragma_extern_prefix (cpp_reader * ARG_UNUSED (dummy))\n {\n   tree prefix, x;\n   enum cpp_ttype t;"}, {"sha": "d00f86c8e043851700e2c180b5a2ba6e089c6afb", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -6806,7 +6806,7 @@ c_end_compound_stmt (tree stmt, bool do_scope)\n    meant to apply to normal control flow transfer.  */\n \n void\n-push_cleanup (tree decl ATTRIBUTE_UNUSED, tree cleanup, bool eh_only)\n+push_cleanup (tree ARG_UNUSED (decl), tree cleanup, bool eh_only)\n {\n   enum tree_code code;\n   tree stmt, list;"}, {"sha": "b70371cc18b6e8c3301fe79509e449ebb2501f25", "filename": "gcc/gencheck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fgencheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fgencheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencheck.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -42,7 +42,7 @@ usage (void)\n }\n \n int\n-main (int argc, char **argv ATTRIBUTE_UNUSED)\n+main (int argc, char ** ARG_UNUSED (argv))\n {\n   int i, j;\n "}, {"sha": "6a5c40b2dd743f0bec0f3be38329a89122dcca2f", "filename": "gcc/genconditions.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fgenconditions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fgenconditions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconditions.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -138,7 +138,7 @@ extern rtx operands[];\\n\");\n     MAYBE_EVAL (! optimize_size && ! TARGET_READ_MODIFY_WRITE) },  */\n \n static int\n-write_one_condition (void **slot, void *dummy ATTRIBUTE_UNUSED)\n+write_one_condition (void **slot, void * ARG_UNUSED (dummy))\n {\n   const struct c_test *test = * (const struct c_test **) slot;\n   const char *p;"}, {"sha": "4e7195391f4a31524784ad7bc529271771005b7e", "filename": "gcc/genconfig.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -369,7 +369,7 @@ main (int argc, char **argv)\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n const char *\n-get_insn_name (int code ATTRIBUTE_UNUSED)\n+get_insn_name (int ARG_UNUSED (code))\n {\n   return NULL;\n }"}, {"sha": "27296c9f2394091e6a069da4e137689f1521479a", "filename": "gcc/genflags.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -179,8 +179,8 @@ gen_proto (rtx insn)\n \t{\n \t  putchar ('(');\n \t  for (i = 0; i < num-1; i++)\n-\t    printf (\"rtx %c ATTRIBUTE_UNUSED, \", 'a' + i);\n-\t  printf (\"rtx %c ATTRIBUTE_UNUSED)\\n\", 'a' + i);\n+\t    printf (\"rtx ARG_UNUSED (%c), \", 'a' + i);\n+\t  printf (\"rtx ARG_UNUSED (%c))\\n\", 'a' + i);\n \t}\n       else\n \tputs (\"(void)\");\n@@ -287,7 +287,7 @@ main (int argc, char **argv)\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n const char *\n-get_insn_name (int code ATTRIBUTE_UNUSED)\n+get_insn_name (int ARG_UNUSED (code))\n {\n   return NULL;\n }"}, {"sha": "d8dc502584b7b186e19ab1ff8784c9862e2ff51d", "filename": "gcc/gengtype.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -391,7 +391,7 @@ write_rtx_next (void)\n    are based in a complex way on the type of RTL.  */\n \n static type_p\n-adjust_field_rtx_def (type_p t, options_p opt ATTRIBUTE_UNUSED)\n+adjust_field_rtx_def (type_p t, options_p ARG_UNUSED (opt))\n {\n   pair_p flds = NULL;\n   options_p nodot;\n@@ -2233,7 +2233,10 @@ write_local_func_for_structure (type_p orig_s, type_p s, type_p *param)\n   oprintf (d.of, \"void\\n\");\n   oprintf (d.of, \"gt_pch_p_\");\n   output_mangled_typename (d.of, orig_s);\n-  oprintf (d.of, \" (void *this_obj ATTRIBUTE_UNUSED,\\n\\tvoid *x_p,\\n\\tgt_pointer_operator op ATTRIBUTE_UNUSED,\\n\\tvoid *cookie ATTRIBUTE_UNUSED)\\n\");\n+  oprintf (d.of, \" (ATTRIBUTE_UNUSED void *this_obj,\\n\"\n+\t   \"\\tvoid *x_p,\\n\"\n+\t   \"\\tATTRIBUTE_UNUSED gt_pointer_operator op,\\n\"\n+\t   \"\\tATTRIBUTE_UNUSED void *cookie)\\n\");\n   oprintf (d.of, \"{\\n\");\n   oprintf (d.of, \"  %s %s * const x ATTRIBUTE_UNUSED = (%s %s *)x_p;\\n\",\n \t   s->kind == TYPE_UNION ? \"union\" : \"struct\", s->u.s.tag,\n@@ -2648,11 +2651,12 @@ write_array (outf_p f, pair_p v, const struct write_types_data *wtd)\n       oprintf (f, \"static void gt_%sa_%s\\n\", wtd->param_prefix, v->name);\n       oprintf (f,\n        \"    (void *, void *, gt_pointer_operator, void *);\\n\");\n-      oprintf (f, \"static void gt_%sa_%s (void *this_obj ATTRIBUTE_UNUSED,\\n\",\n+      oprintf (f, \"static void gt_%sa_%s (ATTRIBUTE_UNUSED void *this_obj,\\n\",\n \t       wtd->param_prefix, v->name);\n-      oprintf (d.of, \"      void *x_p ATTRIBUTE_UNUSED,\\n\");\n-      oprintf (d.of, \"      gt_pointer_operator op ATTRIBUTE_UNUSED,\\n\");\n-      oprintf (d.of, \"      void *cookie ATTRIBUTE_UNUSED)\\n\");\n+      oprintf (d.of,\n+\t       \"      ATTRIBUTE_UNUSED void *x_p,\\n\"\n+\t       \"      ATTRIBUTE_UNUSED gt_pointer_operator op,\\n\"\n+\t       \"      ATTRIBUTE_UNUSED void * cookie)\\n\");\n       oprintf (d.of, \"{\\n\");\n       d.prev_val[0] = d.prev_val[1] = d.prev_val[2] = d.val = v->name;\n       d.process_field = write_types_local_process_field;\n@@ -2663,7 +2667,7 @@ write_array (outf_p f, pair_p v, const struct write_types_data *wtd)\n   d.opt = v->opt;\n   oprintf (f, \"static void gt_%sa_%s (void *);\\n\",\n \t   wtd->prefix, v->name);\n-  oprintf (f, \"static void\\ngt_%sa_%s (void *x_p ATTRIBUTE_UNUSED)\\n\",\n+  oprintf (f, \"static void\\ngt_%sa_%s (ATTRIBUTE_UNUSED void *x_p)\\n\",\n \t   wtd->prefix, v->name);\n   oprintf (f, \"{\\n\");\n   d.prev_val[0] = d.prev_val[1] = d.prev_val[2] = d.val = v->name;\n@@ -2924,7 +2928,7 @@ write_roots (pair_p variables)\n \f\n extern int main (int argc, char **argv);\n int\n-main(int argc ATTRIBUTE_UNUSED, char **argv ATTRIBUTE_UNUSED)\n+main(int ARG_UNUSED (argc), char ** ARG_UNUSED (argv))\n {\n   unsigned i;\n   static struct fileloc pos = { __FILE__, __LINE__ };"}, {"sha": "36cccde648a829a6650abd38a0fd40c4c45ae68a", "filename": "gcc/gensupport.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -128,7 +128,7 @@ message_with_line (int lineno, const char *msg, ...)\n    the gensupport programs.  */\n \n rtx\n-gen_rtx_CONST_INT (enum machine_mode mode ATTRIBUTE_UNUSED,\n+gen_rtx_CONST_INT (enum machine_mode ARG_UNUSED (mode),\n \t\t   HOST_WIDE_INT arg)\n {\n   rtx rt = rtx_alloc (CONST_INT);"}, {"sha": "4c7e5190682f5f09a933f97af44bb14f46bbd108", "filename": "gcc/ggc-none.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fggc-none.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fggc-none.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-none.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -32,7 +32,7 @@ struct alloc_zone *rtl_zone = NULL;\n struct alloc_zone *garbage_zone = NULL;\n \n void *\n-ggc_alloc_typed_stat (enum gt_types_enum gte ATTRIBUTE_UNUSED, size_t size\n+ggc_alloc_typed_stat (enum gt_types_enum ARG_UNUSED (gte), size_t size\n \t\t      MEM_STAT_DECL)\n {\n   return xmalloc (size);\n@@ -45,7 +45,7 @@ ggc_alloc_stat (size_t size MEM_STAT_DECL)\n }\n \n void *\n-ggc_alloc_zone_stat (size_t size, struct alloc_zone *zone ATTRIBUTE_UNUSED\n+ggc_alloc_zone_stat (size_t size, struct alloc_zone * ARG_UNUSED (zone)\n \t\t     MEM_STAT_DECL)\n {\n   return xmalloc (size);"}, {"sha": "33708bdc629479ca5a40b736687ad01c63e01386", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -501,7 +501,7 @@ builtin_function (const char *name,\n \t\t  int function_code,\n \t\t  enum built_in_class class,\n \t\t  const char *library_name,\n-\t\t  tree attrs ATTRIBUTE_UNUSED)\n+\t\t  tree ARG_UNUSED (attrs))\n {\n   tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n   DECL_EXTERNAL (decl) = 1;"}, {"sha": "8a2802147f4ddfad21bf771f645d294559b1f2c1", "filename": "gcc/langhooks.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -46,31 +46,31 @@ lhd_do_nothing (void)\n /* Do nothing (tree).  */\n \n void\n-lhd_do_nothing_t (tree t ATTRIBUTE_UNUSED)\n+lhd_do_nothing_t (tree ARG_UNUSED (t))\n {\n }\n \n /* Do nothing (int).  */\n \n void\n-lhd_do_nothing_i (int i ATTRIBUTE_UNUSED)\n+lhd_do_nothing_i (int ARG_UNUSED (i))\n {\n }\n \n /* Do nothing (int, int, int).  Return NULL_TREE.  */\n \n tree\n-lhd_do_nothing_iii_return_null_tree (int i ATTRIBUTE_UNUSED, \n-\t\t\t\t     int j ATTRIBUTE_UNUSED,\n-\t\t\t\t     int k ATTRIBUTE_UNUSED)\n+lhd_do_nothing_iii_return_null_tree (int ARG_UNUSED (i), \n+\t\t\t\t     int ARG_UNUSED (j),\n+\t\t\t\t     int ARG_UNUSED (k))\n {\n   return NULL_TREE;\n }\n \n /* Do nothing (function).  */\n \n void\n-lhd_do_nothing_f (struct function *f ATTRIBUTE_UNUSED)\n+lhd_do_nothing_f (struct function * ARG_UNUSED (f))\n {\n }\n \n@@ -93,50 +93,50 @@ lhd_return_null_tree_v (void)\n /* Do nothing (return NULL_TREE).  */\n \n tree\n-lhd_return_null_tree (tree t ATTRIBUTE_UNUSED)\n+lhd_return_null_tree (tree ARG_UNUSED (t))\n {\n   return NULL_TREE;\n }\n \n /* The default post options hook.  */\n \n bool\n-lhd_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n+lhd_post_options (const char ** ARG_UNUSED (pfilename))\n {\n   return false;\n }\n \n /* Called from by print-tree.c.  */\n \n void\n-lhd_print_tree_nothing (FILE *file ATTRIBUTE_UNUSED,\n-\t\t\ttree node ATTRIBUTE_UNUSED,\n-\t\t\tint indent ATTRIBUTE_UNUSED)\n+lhd_print_tree_nothing (FILE * ARG_UNUSED (file),\n+\t\t\ttree ARG_UNUSED (node),\n+\t\t\tint ARG_UNUSED (indent))\n {\n }\n \n /* Called from safe_from_p.  */\n \n int\n-lhd_safe_from_p (rtx x ATTRIBUTE_UNUSED, tree exp ATTRIBUTE_UNUSED)\n+lhd_safe_from_p (rtx ARG_UNUSED (x), tree ARG_UNUSED (exp))\n {\n   return 1;\n }\n \n /* Called from unsafe_for_reeval.  */\n \n int\n-lhd_unsafe_for_reeval (tree t ATTRIBUTE_UNUSED)\n+lhd_unsafe_for_reeval (tree ARG_UNUSED (t))\n {\n   return -1;\n }\n \n /* Called from staticp.  */\n \n-int\n-lhd_staticp (tree exp ATTRIBUTE_UNUSED)\n+bool\n+lhd_staticp (tree ARG_UNUSED (exp))\n {\n-  return 0;\n+  return false;\n }\n \n /* Called from check_global_declarations.  */\n@@ -207,21 +207,21 @@ lhd_can_use_bit_fields_p (void)\n \n /* Type promotion for variable arguments.  */\n tree\n-lhd_type_promotes_to (tree type ATTRIBUTE_UNUSED)\n+lhd_type_promotes_to (tree ARG_UNUSED (type))\n {\n   abort ();\n }\n \n /* Registration of machine- or os-specific builtin types.  */\n void\n-lhd_register_builtin_type (tree type ATTRIBUTE_UNUSED, \n-\t\t\t   const char* name ATTRIBUTE_UNUSED)\n+lhd_register_builtin_type (tree ARG_UNUSED (type), \n+\t\t\t   const char * ARG_UNUSED (name))\n {\n }\n \n /* Invalid use of an incomplete type.  */\n void\n-lhd_incomplete_type_error (tree value ATTRIBUTE_UNUSED, tree type)\n+lhd_incomplete_type_error (tree ARG_UNUSED (value), tree type)\n {\n   if (TREE_CODE (type) == ERROR_MARK)\n     return;\n@@ -233,7 +233,7 @@ lhd_incomplete_type_error (tree value ATTRIBUTE_UNUSED, tree type)\n    is used by languages that don't need to do anything special.  */\n \n HOST_WIDE_INT\n-lhd_get_alias_set (tree t ATTRIBUTE_UNUSED)\n+lhd_get_alias_set (tree ARG_UNUSED (t))\n {\n   return -1;\n }\n@@ -242,18 +242,18 @@ lhd_get_alias_set (tree t ATTRIBUTE_UNUSED)\n    used by languages that haven't deal with alias sets yet.  */\n \n HOST_WIDE_INT\n-hook_get_alias_set_0 (tree t ATTRIBUTE_UNUSED)\n+hook_get_alias_set_0 (tree ARG_UNUSED (t))\n {\n   return 0;\n }\n \n /* This is the default expand_expr function.  */\n \n rtx\n-lhd_expand_expr (tree t ATTRIBUTE_UNUSED, rtx r ATTRIBUTE_UNUSED,\n-\t\t enum machine_mode mm ATTRIBUTE_UNUSED,\n-\t\t int em ATTRIBUTE_UNUSED,\n-\t\t rtx *a ATTRIBUTE_UNUSED)\n+lhd_expand_expr (tree ARG_UNUSED (t), rtx ARG_UNUSED (r),\n+\t\t enum machine_mode ARG_UNUSED (mm),\n+\t\t int ARG_UNUSED (em),\n+\t\t rtx * ARG_UNUSED (a))\n {\n   abort ();\n }\n@@ -265,15 +265,15 @@ lhd_expand_expr (tree t ATTRIBUTE_UNUSED, rtx r ATTRIBUTE_UNUSED,\n    any RTL generation.  */\n \n int\n-lhd_expand_decl (tree t ATTRIBUTE_UNUSED)\n+lhd_expand_decl (tree ARG_UNUSED (t))\n {\n   return 0;\n }\n \n /* This is the default decl_printable_name function.  */\n \n const char *\n-lhd_decl_printable_name (tree decl, int verbosity ATTRIBUTE_UNUSED)\n+lhd_decl_printable_name (tree decl, int ARG_UNUSED (verbosity))\n {\n   return IDENTIFIER_POINTER (DECL_NAME (decl));\n }"}, {"sha": "76a100108c0259097a1af4d1167cfc3cb9bb047d", "filename": "gcc/statistics.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fstatistics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fstatistics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstatistics.h?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -23,7 +23,7 @@\n #ifndef GCC_STATISTICS\n #define GCC_STATISTICS\n #ifdef GATHER_STATISTICS\n-#define MEM_STAT_DECL , const char *_loc_name ATTRIBUTE_UNUSED, int _loc_line ATTRIBUTE_UNUSED, const char *_loc_function ATTRIBUTE_UNUSED\n+#define MEM_STAT_DECL , const char * ARG_UNUSED (_loc_name), int ARG_UNUSED (_loc_line), const char * ARG_UNUSED (_loc_function)\n #define PASS_MEM_STAT , _loc_name, _loc_line,  _loc_function\n #define MEM_STAT_INFO , __FILE__, __LINE__, __FUNCTION__\n #else"}, {"sha": "fc1afe0eff64eaee429764624ddb064428bfc4d4", "filename": "gcc/stub-objc.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18476eb94e8679ccd9e12776717944c5f6d52a1/gcc%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstub-objc.c?ref=e18476eb94e8679ccd9e12776717944c5f6d52a1", "patch": "@@ -28,37 +28,37 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"c-common.h\"\n \n tree\n-lookup_interface (tree arg ATTRIBUTE_UNUSED)\n+lookup_interface (tree ARG_UNUSED (arg))\n {\n   return 0;\n }\n \n tree\n-is_class_name (tree arg ATTRIBUTE_UNUSED)\n+is_class_name (tree ARG_UNUSED (arg))\n {\n   return 0;\n }\n \n tree\n-objc_is_object_ptr (tree arg ATTRIBUTE_UNUSED)\n+objc_is_object_ptr (tree ARG_UNUSED (arg))\n {\n   return 0;\n }\n \n tree\n-lookup_objc_ivar (tree arg ATTRIBUTE_UNUSED)\n+lookup_objc_ivar (tree ARG_UNUSED (arg))\n {\n   return 0;\n }\n \n void\n-objc_check_decl (tree decl ATTRIBUTE_UNUSED)\n+objc_check_decl (tree ARG_UNUSED (decl))\n {\n }\n    \n int\n-objc_comptypes (tree lhs ATTRIBUTE_UNUSED, tree rhs ATTRIBUTE_UNUSED,\n-                int reflexive ATTRIBUTE_UNUSED)\n+objc_comptypes (tree ARG_UNUSED (lhs), tree ARG_UNUSED (rhs),\n+                int ARG_UNUSED (reflexive))\n { \n   return -1;\n }\n@@ -75,7 +75,7 @@ objc_clear_super_receiver (void)\n }\n \n int\n-objc_is_public (tree expr ATTRIBUTE_UNUSED, tree identifier ATTRIBUTE_UNUSED)\n+objc_is_public (tree ARG_UNUSED (expr), tree ARG_UNUSED (identifier))\n {\n   return 1;\n }"}]}