{"sha": "7a28353e36d0c2b1dc81883437d2064a50c00e8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EyODM1M2UzNmQwYzJiMWRjODE4ODM0MzdkMjA2NGE1MGMwMGU4ZQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2016-12-13T18:55:20Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2016-12-13T18:55:20Z"}, "message": "re PR fortran/78798 ([cleanup] some int-valued functions should be bool)\n\n2016-12-13  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/78798\n\t* gfortran.h (gfc_is_constant_expr, gfc_is_formal_arg,\n\tgfc_is_compile_time_shape): Return bool instead of int.\n\t* array.c (gfc_is_compile_time_shape): Ditto.\n\t* expr.c (gfc_is_constant_expr): Ditto.\n\t* resolve.c (gfc_is_formal_arg): Ditto. Make formal_arg_flag bool.\n\nFrom-SVN: r243621", "tree": {"sha": "9d1e9d025f22b461e270aae2ebd39ebc4c5a4ffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d1e9d025f22b461e270aae2ebd39ebc4c5a4ffb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a28353e36d0c2b1dc81883437d2064a50c00e8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a28353e36d0c2b1dc81883437d2064a50c00e8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a28353e36d0c2b1dc81883437d2064a50c00e8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a28353e36d0c2b1dc81883437d2064a50c00e8e/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3c54e0f074083d3bdfe97153a704f5584ec3fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c54e0f074083d3bdfe97153a704f5584ec3fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3c54e0f074083d3bdfe97153a704f5584ec3fa4"}], "stats": {"total": 64, "additions": 35, "deletions": 29}, "files": [{"sha": "40b578325d1e34fa69419142dbb962fcdc9095ca", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a28353e36d0c2b1dc81883437d2064a50c00e8e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a28353e36d0c2b1dc81883437d2064a50c00e8e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7a28353e36d0c2b1dc81883437d2064a50c00e8e", "patch": "@@ -1,3 +1,12 @@\n+2016-12-13  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/78798\n+\t* gfortran.h (gfc_is_constant_expr, gfc_is_formal_arg,\n+\tgfc_is_compile_time_shape): Return bool instead of int.\n+\t* array.c (gfc_is_compile_time_shape): Ditto.\n+\t* expr.c (gfc_is_constant_expr): Ditto.\n+\t* resolve.c (gfc_is_formal_arg): Ditto. Make formal_arg_flag bool.\n+\n 2016-12-13  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/77785"}, {"sha": "154b860689747490bb6f3407b25265e896468328", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a28353e36d0c2b1dc81883437d2064a50c00e8e/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a28353e36d0c2b1dc81883437d2064a50c00e8e/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=7a28353e36d0c2b1dc81883437d2064a50c00e8e", "patch": "@@ -2581,18 +2581,16 @@ gfc_find_array_ref (gfc_expr *e)\n \n /* Find out if an array shape is known at compile time.  */\n \n-int\n+bool\n gfc_is_compile_time_shape (gfc_array_spec *as)\n {\n-  int i;\n-\n   if (as->type != AS_EXPLICIT)\n-    return 0;\n+    return false;\n \n-  for (i = 0; i < as->rank; i++)\n+  for (int i = 0; i < as->rank; i++)\n     if (!gfc_is_constant_expr (as->lower[i])\n \t|| !gfc_is_constant_expr (as->upper[i]))\n-      return 0;\n+      return false;\n \n-  return 1;\n+  return true;\n }"}, {"sha": "f57198fc35bbb393543c26ea2604b55d8a65b7af", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a28353e36d0c2b1dc81883437d2064a50c00e8e/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a28353e36d0c2b1dc81883437d2064a50c00e8e/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=7a28353e36d0c2b1dc81883437d2064a50c00e8e", "patch": "@@ -882,17 +882,16 @@ gfc_type_convert_binary (gfc_expr *e, int wconversion)\n \n \n /* Determine if an expression is constant in the sense of F08:7.1.12.\n- * This function expects that the expression has already been simplified.\n- * FIXME: Return a bool, not an int.  */\n+ * This function expects that the expression has already been simplified.  */\n \n-int\n+bool\n gfc_is_constant_expr (gfc_expr *e)\n {\n   gfc_constructor *c;\n   gfc_actual_arglist *arg;\n \n   if (e == NULL)\n-    return 1;\n+    return true;\n \n   switch (e->expr_type)\n     {\n@@ -902,7 +901,7 @@ gfc_is_constant_expr (gfc_expr *e)\n \t\t  || gfc_is_constant_expr (e->value.op.op2)));\n \n     case EXPR_VARIABLE:\n-      return 0;\n+      return false;\n \n     case EXPR_FUNCTION:\n     case EXPR_PPC:\n@@ -915,21 +914,21 @@ gfc_is_constant_expr (gfc_expr *e)\n \t{\n \t  for (arg = e->value.function.actual; arg; arg = arg->next)\n \t    if (!gfc_is_constant_expr (arg->expr))\n-\t      return 0;\n+\t      return false;\n \t}\n \n       if (e->value.function.isym\n \t  && (e->value.function.isym->elemental\n \t      || e->value.function.isym->pure\n \t      || e->value.function.isym->inquiry\n \t      || e->value.function.isym->transformational))\n-\treturn 1;\n+\treturn true;\n \n-      return 0;\n+      return false;\n \n     case EXPR_CONSTANT:\n     case EXPR_NULL:\n-      return 1;\n+      return true;\n \n     case EXPR_SUBSTRING:\n       return e->ref == NULL || (gfc_is_constant_expr (e->ref->u.ss.start)\n@@ -943,14 +942,14 @@ gfc_is_constant_expr (gfc_expr *e)\n \n       for (; c; c = gfc_constructor_next (c))\n \tif (!gfc_is_constant_expr (c->expr))\n-\t  return 0;\n+\t  return false;\n \n-      return 1;\n+      return true;\n \n \n     default:\n       gfc_internal_error (\"gfc_is_constant_expr(): Unknown expression type\");\n-      return 0;\n+      return false;\n     }\n }\n "}, {"sha": "da653363712ccc26e280b0fa1eef84f16f698a13", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a28353e36d0c2b1dc81883437d2064a50c00e8e/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a28353e36d0c2b1dc81883437d2064a50c00e8e/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7a28353e36d0c2b1dc81883437d2064a50c00e8e", "patch": "@@ -3088,7 +3088,7 @@ bool gfc_check_init_expr (gfc_expr *);\n gfc_expr *gfc_build_conversion (gfc_expr *);\n void gfc_free_ref_list (gfc_ref *);\n void gfc_type_convert_binary (gfc_expr *, int);\n-int gfc_is_constant_expr (gfc_expr *);\n+bool gfc_is_constant_expr (gfc_expr *);\n bool gfc_simplify_expr (gfc_expr *, int);\n int gfc_has_vector_index (gfc_expr *);\n \n@@ -3180,7 +3180,7 @@ bool gfc_resolve_iterator (gfc_iterator *, bool, bool);\n bool find_forall_index (gfc_expr *, gfc_symbol *, int);\n bool gfc_resolve_index (gfc_expr *, int);\n bool gfc_resolve_dim_arg (gfc_expr *);\n-int gfc_is_formal_arg (void);\n+bool gfc_is_formal_arg (void);\n void gfc_resolve_substring_charlen (gfc_expr *);\n match gfc_iso_c_sub_interface(gfc_code *, gfc_symbol *);\n gfc_expr *gfc_expr_to_initialize (gfc_expr *);\n@@ -3218,7 +3218,7 @@ gfc_array_ref *gfc_find_array_ref (gfc_expr *);\n tree gfc_conv_array_initializer (tree type, gfc_expr *);\n bool spec_size (gfc_array_spec *, mpz_t *);\n bool spec_dimen_size (gfc_array_spec *, int, mpz_t *);\n-int gfc_is_compile_time_shape (gfc_array_spec *);\n+bool gfc_is_compile_time_shape (gfc_array_spec *);\n \n bool gfc_ref_dimen_size (gfc_array_ref *, int dimen, mpz_t *, mpz_t *);\n "}, {"sha": "2c70e6cfe9bfcf1bd4607e3a7972d57cfc17eab5", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a28353e36d0c2b1dc81883437d2064a50c00e8e/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a28353e36d0c2b1dc81883437d2064a50c00e8e/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=7a28353e36d0c2b1dc81883437d2064a50c00e8e", "patch": "@@ -72,9 +72,9 @@ static bool first_actual_arg = false;\n \n static int omp_workshare_flag;\n \n-/* Nonzero if we are processing a formal arglist. The corresponding function\n+/* True if we are processing a formal arglist. The corresponding function\n    resets the flag each time that it is read.  */\n-static int formal_arg_flag = 0;\n+static bool formal_arg_flag = false;\n \n /* True if we are resolving a specification expression.  */\n static bool specification_expr = false;\n@@ -89,7 +89,7 @@ static bitmap_obstack labels_obstack;\n static bool inquiry_argument = false;\n \n \n-int\n+bool\n gfc_is_formal_arg (void)\n {\n   return formal_arg_flag;\n@@ -285,7 +285,7 @@ resolve_formal_arglist (gfc_symbol *proc)\n       sym->attr.always_explicit = 1;\n     }\n \n-  formal_arg_flag = 1;\n+  formal_arg_flag = true;\n \n   for (f = proc->formal; f; f = f->next)\n     {\n@@ -530,7 +530,7 @@ resolve_formal_arglist (gfc_symbol *proc)\n \t    }\n \t}\n     }\n-  formal_arg_flag = 0;\n+  formal_arg_flag = false;\n }\n \n \n@@ -14722,14 +14722,14 @@ resolve_symbol (gfc_symbol *sym)\n      an error for host associated variables in the specification\n      expression for an array_valued function.  */\n   if (sym->attr.function && sym->as)\n-    formal_arg_flag = 1;\n+    formal_arg_flag = true;\n \n   saved_specification_expr = specification_expr;\n   specification_expr = true;\n   gfc_resolve_array_spec (sym->as, check_constant);\n   specification_expr = saved_specification_expr;\n \n-  formal_arg_flag = 0;\n+  formal_arg_flag = false;\n \n   /* Resolve formal namespaces.  */\n   if (sym->formal_ns && sym->formal_ns != gfc_current_ns"}]}