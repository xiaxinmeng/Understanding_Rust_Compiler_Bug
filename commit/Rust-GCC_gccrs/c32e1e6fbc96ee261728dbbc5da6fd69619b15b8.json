{"sha": "c32e1e6fbc96ee261728dbbc5da6fd69619b15b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMyZTFlNmZiYzk2ZWUyNjE3MjhkYmJjNWRhNmZkNjk2MTliMTViOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-11-09T00:26:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-11-09T00:26:34Z"}, "message": "flow.c (init_propagate_block_info): Protect the rtx stored in mem_set_list from modification by find_auto_inc.\n\n        * flow.c (init_propagate_block_info): Protect the rtx stored in\n        mem_set_list from modification by find_auto_inc.\n        (mark_set_1): Likewise.\n\nFrom-SVN: r37330", "tree": {"sha": "424ab1377c7f1bbb66c3532a2d7d64391c87ef02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/424ab1377c7f1bbb66c3532a2d7d64391c87ef02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c32e1e6fbc96ee261728dbbc5da6fd69619b15b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32e1e6fbc96ee261728dbbc5da6fd69619b15b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c32e1e6fbc96ee261728dbbc5da6fd69619b15b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32e1e6fbc96ee261728dbbc5da6fd69619b15b8/comments", "author": null, "committer": null, "parents": [{"sha": "adb84b4254d23c4ff58f53c4f48971b6cd8395d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb84b4254d23c4ff58f53c4f48971b6cd8395d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb84b4254d23c4ff58f53c4f48971b6cd8395d1"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "e28acbc3d896a04ebfb5631ff37ae0ab68c8ad29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32e1e6fbc96ee261728dbbc5da6fd69619b15b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32e1e6fbc96ee261728dbbc5da6fd69619b15b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c32e1e6fbc96ee261728dbbc5da6fd69619b15b8", "patch": "@@ -1,3 +1,9 @@\n+2000-11-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* flow.c (init_propagate_block_info): Protect the rtx stored in\n+\tmem_set_list from modification by find_auto_inc.\n+\t(mark_set_1): Likewise.\n+\n 2000-11-08  Neil Booth  <neilb@earthling.net>\n \n         Move directive handling into the lexer itself."}, {"sha": "b855114d47bf3dee26a52159e8634660bff4240b", "filename": "gcc/flow.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32e1e6fbc96ee261728dbbc5da6fd69619b15b8/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32e1e6fbc96ee261728dbbc5da6fd69619b15b8/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=c32e1e6fbc96ee261728dbbc5da6fd69619b15b8", "patch": "@@ -3930,7 +3930,21 @@ init_propagate_block_info (bb, live, local_set, flags)\n \t\t|| (GET_CODE (XEXP (mem, 0)) == PLUS\n \t\t    && XEXP (XEXP (mem, 0), 0) == frame_pointer_rtx\n \t\t    && GET_CODE (XEXP (XEXP (mem, 0), 1)) == CONST_INT))\n-\t      pbi->mem_set_list = alloc_EXPR_LIST (0, mem, pbi->mem_set_list);\n+\t      {\n+#ifdef AUTO_INC_DEC\n+\t\t/* Store a copy of mem, otherwise the address may be scrogged\n+\t\t   by find_auto_inc.  This matters because insn_dead_p uses\n+\t\t   an rtx_equal_p check to determine if two addresses are\n+\t\t   the same.  This works before find_auto_inc, but fails\n+\t\t   after find_auto_inc, causing discrepencies between the\n+\t\t   set of live registers calculated during the\n+\t\t   calculate_global_regs_live phase and what actually exists\n+\t\t   after flow completes, leading to aborts.  */\n+\t\tif (flags & PROP_AUTOINC)\n+\t\t  mem = shallow_copy_rtx (mem);\n+#endif\n+\t\tpbi->mem_set_list = alloc_EXPR_LIST (0, mem, pbi->mem_set_list);\n+\t      }\n \t  }\n     }\n \n@@ -4561,7 +4575,15 @@ mark_set_1 (pbi, code, reg, cond, insn, flags)\n \t     everything that invalidates it.  To be safe, don't eliminate any\n \t     stores though SP; none of them should be redundant anyway.  */\n \t  && ! reg_mentioned_p (stack_pointer_rtx, reg))\n-\tpbi->mem_set_list = alloc_EXPR_LIST (0, reg, pbi->mem_set_list);\n+\t{\n+#ifdef AUTO_INC_DEC\n+\t  /* Store a copy of mem, otherwise the address may be\n+\t     scrogged by find_auto_inc.  */\n+\t  if (flags & PROP_AUTOINC)\n+\t    reg = shallow_copy_rtx (reg);\n+#endif\n+\t  pbi->mem_set_list = alloc_EXPR_LIST (0, reg, pbi->mem_set_list);\n+\t}\n     }\n \n   if (GET_CODE (reg) == REG"}]}