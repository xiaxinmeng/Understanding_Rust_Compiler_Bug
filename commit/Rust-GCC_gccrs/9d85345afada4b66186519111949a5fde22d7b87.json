{"sha": "9d85345afada4b66186519111949a5fde22d7b87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ4NTM0NWFmYWRhNGI2NjE4NjUxOTExMTk0OWE1ZmRlMjJkN2I4Nw==", "commit": {"author": {"name": "Aditya Kumar", "email": "hiraditya@msn.com", "date": "2015-10-02T15:28:23Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-10-02T15:28:23Z"}, "message": "outline functions from stmt_simple_for_scop_p\n\nOutlined functions from stmt_simple_for_scop_p. No functional changes intended.\nPasses regtest and bootstrap.\n\ngcc/ChangeLog:\n\n2015-10-01  Aditya Kumar  <hiraditya@msn.com>\n\n        * graphite-scop-detection.c (stmt_has_side_effects): New function\n          outlined from stmt_simple_for_scop_p.\n        (graphite_can_represent_stmt): Same.\n        (stmt_simple_for_scop_p): Moved code out of this function for better\n        readability.\n\nFrom-SVN: r228400", "tree": {"sha": "9a745a7d1b9f2cec69266d0c26f27df8edf69f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a745a7d1b9f2cec69266d0c26f27df8edf69f82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d85345afada4b66186519111949a5fde22d7b87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d85345afada4b66186519111949a5fde22d7b87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d85345afada4b66186519111949a5fde22d7b87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d85345afada4b66186519111949a5fde22d7b87/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab91c076b76cce3f0e8eb767765c314c633dfaff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab91c076b76cce3f0e8eb767765c314c633dfaff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab91c076b76cce3f0e8eb767765c314c633dfaff"}], "stats": {"total": 83, "additions": 53, "deletions": 30}, "files": [{"sha": "c2de032b88418a58e98b7d9796510370fe354a53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d85345afada4b66186519111949a5fde22d7b87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d85345afada4b66186519111949a5fde22d7b87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d85345afada4b66186519111949a5fde22d7b87", "patch": "@@ -1,3 +1,11 @@\n+2015-10-02  Aditya Kumar  <hiraditya@msn.com>\n+\n+\t* graphite-scop-detection.c (stmt_has_side_effects): New function\n+\t  outlined from stmt_simple_for_scop_p.\n+\t(graphite_can_represent_stmt): Same.\n+\t(stmt_simple_for_scop_p): Moved code out of this function for better\n+\treadability.\n+\n 2015-10-02  Kirill Yukhin  <kirill.yukhin@intel.com>\n \t* config/i386/i386.c (processor_features): Add F_AVX512VBMI,\n \tF_AVX512IFMA."}, {"sha": "30e2cb056ce78f632b7ae637e3bb921247687bb5", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 45, "deletions": 30, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d85345afada4b66186519111949a5fde22d7b87/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d85345afada4b66186519111949a5fde22d7b87/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=9d85345afada4b66186519111949a5fde22d7b87", "patch": "@@ -317,44 +317,33 @@ stmt_has_simple_data_refs_p (sese_l scop, gimple *stmt)\n   return true;\n }\n \n-/* Return true only when STMT is simple enough for being handled by Graphite.\n-   This depends on SCOP, as the parameters are initialized relatively to\n-   this basic block, the linear functions are initialized based on the outermost\n-   loop containing STMT inside the SCOP.  BB is the place where we try to\n-   evaluate the STMT.  */\n+/* GIMPLE_ASM and GIMPLE_CALL may embed arbitrary side effects.\n+   Calls have side-effects, except those to const or pure\n+   functions.  */\n \n static bool\n-stmt_simple_for_scop_p (sese_l scop, gimple *stmt, basic_block bb)\n+stmt_has_side_effects (gimple *stmt)\n {\n-  loop_p loop = bb->loop_father;\n-\n-  gcc_assert (scop);\n-\n-  /* GIMPLE_ASM and GIMPLE_CALL may embed arbitrary side effects.\n-     Calls have side-effects, except those to const or pure\n-     functions.  */\n   if (gimple_has_volatile_ops (stmt)\n       || (gimple_code (stmt) == GIMPLE_CALL\n \t  && !(gimple_call_flags (stmt) & (ECF_CONST | ECF_PURE)))\n       || (gimple_code (stmt) == GIMPLE_ASM))\n     {\n       DEBUG_PRINT (dp << \"[scop-detection-fail] \"\n-\t\t      << \"Graphite cannot handle this stmt:\\n\";\n+\t\t      << \"Statement has side-effects:\\n\";\n \tprint_gimple_stmt (dump_file, stmt, 0, TDF_VOPS|TDF_MEMSYMS));\n-      return false;\n+      return true;\n     }\n+  return false;\n+}\n \n-  if (is_gimple_debug (stmt))\n-    return true;\n-\n-  if (!stmt_has_simple_data_refs_p (scop, stmt))\n-    {\n-      DEBUG_PRINT (dp << \"[scop-detection-fail] \"\n-\t\t      << \"Graphite cannot handle data-refs in stmt:\\n\";\n-\tprint_gimple_stmt (dump_file, stmt, 0, TDF_VOPS|TDF_MEMSYMS););\n-      return false;\n-    }\n+/* Returns true if STMT can be represented in polyhedral model. LABEL,\n+   simple COND stmts, pure calls, and assignments can be repesented.  */\n \n+static bool\n+graphite_can_represent_stmt (sese_l scop, gimple *stmt, basic_block bb)\n+{\n+  loop_p loop = bb->loop_father;\n   switch (gimple_code (stmt))\n     {\n     case GIMPLE_LABEL:\n@@ -365,15 +354,15 @@ stmt_simple_for_scop_p (sese_l scop, gimple *stmt, basic_block bb)\n \t/* We can handle all binary comparisons.  Inequalities are\n \t   also supported as they can be represented with union of\n \t   polyhedra.  */\n-        enum tree_code code = gimple_cond_code (stmt);\n-        if (!(code == LT_EXPR\n+\tenum tree_code code = gimple_cond_code (stmt);\n+\tif (!(code == LT_EXPR\n \t      || code == GT_EXPR\n \t      || code == LE_EXPR\n \t      || code == GE_EXPR\n \t      || code == EQ_EXPR\n \t      || code == NE_EXPR))\n-          {\n-\t    DEBUG_PRINT (dp <<  \"[scop-detection-fail] \"\n+\t  {\n+\t    DEBUG_PRINT (dp << \"[scop-detection-fail] \"\n \t\t\t    << \"Graphite cannot handle cond stmt:\\n\";\n \t      print_gimple_stmt (dump_file, stmt, 0, TDF_VOPS|TDF_MEMSYMS));\n \t    return false;\n@@ -407,8 +396,34 @@ stmt_simple_for_scop_p (sese_l scop, gimple *stmt, basic_block bb)\n \tprint_gimple_stmt (dump_file, stmt, 0, TDF_VOPS|TDF_MEMSYMS));\n       return false;\n     }\n+}\n \n-  return false;\n+/* Return true only when STMT is simple enough for being handled by Graphite.\n+   This depends on SCOP, as the parameters are initialized relatively to\n+   this basic block, the linear functions are initialized based on the outermost\n+   loop containing STMT inside the SCOP.  BB is the place where we try to\n+   evaluate the STMT.  */\n+\n+static bool\n+stmt_simple_for_scop_p (sese_l scop, gimple *stmt, basic_block bb)\n+{\n+  gcc_assert (scop);\n+\n+  if (is_gimple_debug (stmt))\n+    return true;\n+\n+  if (stmt_has_side_effects (stmt))\n+    return false;\n+\n+  if (!stmt_has_simple_data_refs_p (scop, stmt))\n+    {\n+      DEBUG_PRINT (dp << \"[scop-detection-fail] \"\n+\t\t      << \"Graphite cannot handle data-refs in stmt:\\n\";\n+\tprint_gimple_stmt (dump_file, stmt, 0, TDF_VOPS|TDF_MEMSYMS););\n+      return false;\n+    }\n+\n+  return graphite_can_represent_stmt (scop, stmt, bb);\n }\n \n /* Return true when BB contains a harmful operation for a scop: that"}]}