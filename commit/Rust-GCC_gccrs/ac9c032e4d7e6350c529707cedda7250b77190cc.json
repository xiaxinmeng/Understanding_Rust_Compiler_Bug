{"sha": "ac9c032e4d7e6350c529707cedda7250b77190cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM5YzAzMmU0ZDdlNjM1MGM1Mjk3MDdjZWRkYTcyNTBiNzcxOTBjYw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-09-20T05:43:28Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-09-20T05:43:28Z"}, "message": "combine-stack-adj.c (combine_stack_adjustments_for_block): Do nothing for stack adjustments with REG_STACK_CHECK.\n\n\t* combine-stack-adj.c (combine_stack_adjustments_for_block): Do\n\tnothing for stack adjustments with REG_STACK_CHECK.\n\t* sched-deps.c (parse_add_or_inc): Reject insns with\n\tREG_STACK_CHECK from dependency breaking.\n\t* config/i386/i386.c (pro_epilogue_adjust_stack): Return insn.\n\t(ix86_adjust_satck_and_probe_stack_clash): Add REG_STACK_NOTEs.\n\t* reg-notes.def (STACK_CHECK): New note.\n\n\t* gcc.target/i386/stack-check-11.c: New test.\n\nFrom-SVN: r252999", "tree": {"sha": "926f3e77aacdcb0040c2b0731fb7dd61d5f8b7aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/926f3e77aacdcb0040c2b0731fb7dd61d5f8b7aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac9c032e4d7e6350c529707cedda7250b77190cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9c032e4d7e6350c529707cedda7250b77190cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac9c032e4d7e6350c529707cedda7250b77190cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9c032e4d7e6350c529707cedda7250b77190cc/comments", "author": null, "committer": null, "parents": [{"sha": "8e7a09c353842f38c05b8cb171efa9784ab84862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7a09c353842f38c05b8cb171efa9784ab84862", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e7a09c353842f38c05b8cb171efa9784ab84862"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "8f3485bfc1d62ddf1feaf06375d8ffb4b758924a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac9c032e4d7e6350c529707cedda7250b77190cc", "patch": "@@ -1,5 +1,13 @@\n 2017-09-19  Jeff Law  <law@redhat.com>\n \n+\t* combine-stack-adj.c (combine_stack_adjustments_for_block): Do\n+\tnothing for stack adjustments with REG_STACK_CHECK.\n+\t* sched-deps.c (parse_add_or_inc): Reject insns with\n+\tREG_STACK_CHECK from dependency breaking.\n+\t* config/i386/i386.c (pro_epilogue_adjust_stack): Return insn.\n+\t(ix86_adjust_satck_and_probe_stack_clash): Add REG_STACK_NOTEs.\n+\t* reg-notes.def (STACK_CHECK): New note.\n+\n \t* config/i386/i386.c (ix86_adjust_stack_and_probe_stack_clash): New.\n \t(ix86_expand_prologue): Dump stack clash info as needed.\n \tCall ix86_adjust_stack_and_probe_stack_clash as needed."}, {"sha": "82d6dba856fe374d3cb2e1b68f238217a507fabb", "filename": "gcc/combine-stack-adj.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2Fcombine-stack-adj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2Fcombine-stack-adj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine-stack-adj.c?ref=ac9c032e4d7e6350c529707cedda7250b77190cc", "patch": "@@ -508,6 +508,8 @@ combine_stack_adjustments_for_block (basic_block bb)\n \tcontinue;\n \n       set = single_set_for_csa (insn);\n+      if (set && find_reg_note (insn, REG_STACK_CHECK, NULL_RTX))\n+\tset = NULL_RTX;\n       if (set)\n \t{\n \t  rtx dest = SET_DEST (set);"}, {"sha": "d19c770d4cb6877f9a8fb9c69a7a24fa72a02c61", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ac9c032e4d7e6350c529707cedda7250b77190cc", "patch": "@@ -13547,7 +13547,7 @@ ix86_add_queued_cfa_restore_notes (rtx insn)\n    zero if %r11 register is live and cannot be freely used and positive\n    otherwise.  */\n \n-static void\n+static rtx\n pro_epilogue_adjust_stack (rtx dest, rtx src, rtx offset,\n \t\t\t   int style, bool set_cfa)\n {\n@@ -13638,6 +13638,7 @@ pro_epilogue_adjust_stack (rtx dest, rtx src, rtx offset,\n       m->fs.sp_valid = valid;\n       m->fs.sp_realigned = realigned;\n     }\n+  return insn;\n }\n \n /* Find an available register to be used as dynamic realign argument\n@@ -13987,9 +13988,11 @@ ix86_adjust_stack_and_probe_stack_clash (const HOST_WIDE_INT size)\n       for (i = probe_interval; i <= size; i += probe_interval)\n \t{\n \t  /* Allocate PROBE_INTERVAL bytes.  */\n-\t  pro_epilogue_adjust_stack (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t     GEN_INT (-probe_interval), -1,\n-\t\t\t\t     m->fs.cfa_reg == stack_pointer_rtx);\n+\t  rtx insn\n+\t    = pro_epilogue_adjust_stack (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t\t GEN_INT (-PROBE_INTERVAL), -1,\n+\t\t\t\t\t m->fs.cfa_reg == stack_pointer_rtx);\n+\t  add_reg_note (insn, REG_STACK_CHECK, const0_rtx);\n \n \t  /* And probe at *sp.  */\n \t  emit_stack_probe (stack_pointer_rtx);"}, {"sha": "a542990cde2d6d3c9e9c03185de14cb2c7e30bb2", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=ac9c032e4d7e6350c529707cedda7250b77190cc", "patch": "@@ -224,6 +224,10 @@ REG_NOTE (ARGS_SIZE)\n    pseudo reg.  */\n REG_NOTE (RETURNED)\n \n+/* Indicates the instruction is a stack check probe that should not\n+   be combined with other stack adjustments.  */\n+REG_NOTE (STACK_CHECK)\n+\n /* Used to mark a call with the function decl called by the call.\n    The decl might not be available in the call due to splitting of the call\n    insn.  This note is a SYMBOL_REF.  */"}, {"sha": "a64e4e17bbc8115982d253d041032243e9506802", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=ac9c032e4d7e6350c529707cedda7250b77190cc", "patch": "@@ -4714,6 +4714,11 @@ parse_add_or_inc (struct mem_inc_info *mii, rtx_insn *insn, bool before_mem)\n   if (RTX_FRAME_RELATED_P (insn) || !pat)\n     return false;\n \n+  /* Do not allow breaking data dependencies for insns that are marked\n+     with REG_STACK_CHECK.  */\n+  if (find_reg_note (insn, REG_STACK_CHECK, NULL))\n+    return false;\n+\n   /* Result must be single reg.  */\n   if (!REG_P (SET_DEST (pat)))\n     return false;"}, {"sha": "d2eec19d4d077f0cc2920df176361423be4a872f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac9c032e4d7e6350c529707cedda7250b77190cc", "patch": "@@ -1,5 +1,7 @@\n 2017-09-19  Jeff Law  <law@redhat.com>\n \n+\t* gcc.target/i386/stack-check-11.c: New test.\n+\n \t* gcc.dg/stack-check-4.c: New test.\n \t* gcc.dg/stack-check-5.c: New test.\n \t* gcc.dg/stack-check-6.c: New test."}, {"sha": "183103f01e50bdcec06f438fc6fc2bbe2f2bdc44", "filename": "gcc/testsuite/gcc.target/i386/stack-check-11.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9c032e4d7e6350c529707cedda7250b77190cc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstack-check-11.c?ref=ac9c032e4d7e6350c529707cedda7250b77190cc", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fstack-clash-protection\" } */\n+/* { dg-require-effective-target supports_stack_clash_protection } */\n+\n+extern void arf (unsigned long int *, unsigned long int *);\n+void\n+frob ()\n+{\n+  unsigned long int num[859];\n+  unsigned long int den[859];\n+  arf (den, num);\n+}\n+\n+/* { dg-final { scan-assembler-times \"subq\" 4 } } */\n+/* { dg-final { scan-assembler-times \"orq\" 3 } } */\n+"}]}