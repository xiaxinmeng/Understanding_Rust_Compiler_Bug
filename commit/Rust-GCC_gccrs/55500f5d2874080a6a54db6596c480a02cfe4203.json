{"sha": "55500f5d2874080a6a54db6596c480a02cfe4203", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU1MDBmNWQyODc0MDgwYTZhNTRkYjY1OTZjNDgwYTAyY2ZlNDIwMw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-08-24T20:31:53Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-08-24T20:31:53Z"}, "message": "stl_list.h [!_GLIBCXX_INLINE_VERSION](_List_base<>::_S_distance): Remove.\n\n2017-08-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_list.h\n\t[!_GLIBCXX_INLINE_VERSION](_List_base<>::_S_distance): Remove.\n\t(_List_impl(_Node_alloc_type&&, _List_impl&&)): New.\n\t(_List_base(_Node_alloc_type&&, _List_base&&)): New, use latter.\n\t[!_GLIBCXX_INLINE_VERSION](_List_base(_Node_alloc_type&&,_List_base&&)):\n\tRemove.\n\t(_List_base(_Node_alloc_type&&)): New.\n\t[!_GLIBCXX_INLINE_VERSION](_List_base<>::_M_distance): Remove.\n\t[!_GLIBCXX_INLINE_VERSION](_List_base<>::_M_node_count): Remove.\n\t(list<>::_M_node_count): New.\n\t(list<>::size()): Adapt to call latter.\n\t(list<>::_S_distance(const_iterator, const_iterator)): New.\n\t(list<>::splice(iterator, list&, const_iterator, const_iterator)):\n\tAdapt to call latter.\n\t(list(list&&, const allocator_type&, true_type)): New.\n\t(list(list&&, const allocator_type&, false_type)): New.\n\t(list(list&&, const allocator_type&)): Adapt to call latters.\n\nFrom-SVN: r251342", "tree": {"sha": "51a3608c33d1213979595a6864d1b43947e8365d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51a3608c33d1213979595a6864d1b43947e8365d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55500f5d2874080a6a54db6596c480a02cfe4203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55500f5d2874080a6a54db6596c480a02cfe4203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55500f5d2874080a6a54db6596c480a02cfe4203", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55500f5d2874080a6a54db6596c480a02cfe4203/comments", "author": null, "committer": null, "parents": [{"sha": "db1e5f32c2d861ff627397815c6536c7ea35b897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1e5f32c2d861ff627397815c6536c7ea35b897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db1e5f32c2d861ff627397815c6536c7ea35b897"}], "stats": {"total": 94, "additions": 85, "deletions": 9}, "files": [{"sha": "cfc1ed359a1a8c9f0f5b6ceb26f19ef37b2608e4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55500f5d2874080a6a54db6596c480a02cfe4203/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55500f5d2874080a6a54db6596c480a02cfe4203/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=55500f5d2874080a6a54db6596c480a02cfe4203", "patch": "@@ -1,3 +1,23 @@\n+2017-08-24  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_list.h\n+\t[!_GLIBCXX_INLINE_VERSION](_List_base<>::_S_distance): Remove.\n+\t(_List_impl(_Node_alloc_type&&, _List_impl&&)): New.\n+\t(_List_base(_Node_alloc_type&&, _List_base&&)): New, use latter.\n+\t[!_GLIBCXX_INLINE_VERSION](_List_base(_Node_alloc_type&&,_List_base&&)):\n+\tRemove.\n+\t(_List_base(_Node_alloc_type&&)): New.\n+\t[!_GLIBCXX_INLINE_VERSION](_List_base<>::_M_distance): Remove.\n+\t[!_GLIBCXX_INLINE_VERSION](_List_base<>::_M_node_count): Remove.\n+\t(list<>::_M_node_count): New.\n+\t(list<>::size()): Adapt to call latter.\n+\t(list<>::_S_distance(const_iterator, const_iterator)): New.\n+\t(list<>::splice(iterator, list&, const_iterator, const_iterator)):\n+\tAdapt to call latter.\n+\t(list(list&&, const allocator_type&, true_type)): New.\n+\t(list(list&&, const allocator_type&, false_type)): New.\n+\t(list(list&&, const allocator_type&)): Adapt to call latters.\n+\n 2017-08-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/81912"}, {"sha": "be5bb5e5b68dc45430a114a6670ce875f0c70f4c", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55500f5d2874080a6a54db6596c480a02cfe4203/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55500f5d2874080a6a54db6596c480a02cfe4203/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=55500f5d2874080a6a54db6596c480a02cfe4203", "patch": "@@ -364,6 +364,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \trebind<_List_node<_Tp> >::other _Node_alloc_type;\n       typedef __gnu_cxx::__alloc_traits<_Node_alloc_type> _Node_alloc_traits;\n \n+#if !_GLIBCXX_INLINE_VERSION\n       static size_t\n       _S_distance(const __detail::_List_node_base* __first,\n \t\t  const __detail::_List_node_base* __last)\n@@ -376,6 +377,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  }\n \treturn __n;\n       }\n+#endif\n \n       struct _List_impl\n       : public _Node_alloc_type\n@@ -393,6 +395,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus >= 201103L\n \t_List_impl(_List_impl&&) = default;\n \n+\t_List_impl(_Node_alloc_type&& __a, _List_impl&& __x)\n+\t: _Node_alloc_type(std::move(__a)), _M_node(std::move(__x._M_node))\n+\t{ }\n+\n \t_List_impl(_Node_alloc_type&& __a) noexcept\n \t: _Node_alloc_type(std::move(__a))\n \t{ }\n@@ -410,19 +416,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }\n \n+# if !_GLIBCXX_INLINE_VERSION\n       size_t\n       _M_distance(const __detail::_List_node_base* __first,\n \t\t  const __detail::_List_node_base* __last) const\n       { return _S_distance(__first, __last); }\n \n       // return the stored size\n       size_t _M_node_count() const { return _M_get_size(); }\n+# endif\n #else\n       // dummy implementations used when the size is not stored\n       size_t _M_get_size() const { return 0; }\n       void _M_set_size(size_t) { }\n       void _M_inc_size(size_t) { }\n       void _M_dec_size(size_t) { }\n+\n+# if !_GLIBCXX_INLINE_VERSION\n       size_t _M_distance(const void*, const void*) const { return 0; }\n \n       // count the number of nodes\n@@ -431,6 +441,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \treturn _S_distance(_M_impl._M_node._M_next,\n \t\t\t   std::__addressof(_M_impl._M_node));\n       }\n+# endif\n #endif\n \n       typename _Node_alloc_traits::pointer\n@@ -465,13 +476,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus >= 201103L\n       _List_base(_List_base&&) = default;\n \n+# if !_GLIBCXX_INLINE_VERSION\n       _List_base(_List_base&& __x, _Node_alloc_type&& __a)\n       : _M_impl(std::move(__a))\n       {\n \tif (__x._M_get_Node_allocator() == _M_get_Node_allocator())\n \t  _M_move_nodes(std::move(__x));\n \t// else caller must move individual elements.\n       }\n+# endif\n+\n+      // Used when allocator is_always_equal.\n+      _List_base(_Node_alloc_type&& __a, _List_base&& __x)\n+      : _M_impl(std::move(__a), std::move(__x._M_impl))\n+      { }\n+\n+      // Used when allocator !is_always_equal.\n+      _List_base(_Node_alloc_type&& __a)\n+      : _M_impl(std::move(__a))\n+      { }\n \n       void\n       _M_move_nodes(_List_base&& __x)\n@@ -616,6 +639,27 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t}\n #endif\n \n+#if _GLIBCXX_USE_CXX11_ABI\n+      static size_t\n+      _S_distance(const_iterator __first, const_iterator __last)\n+      { return std::distance(__first, __last); }\n+\n+      // return the stored size\n+      size_t\n+      _M_node_count() const\n+      { return this->_M_get_size(); }\n+#else\n+      // dummy implementations used when the size is not stored\n+      static size_t\n+      _S_distance(const_iterator, const_iterator)\n+      { return 0; }\n+\n+      // count the number of nodes\n+      size_t\n+      _M_node_count() const\n+      { return std::distance(begin(), end()); }\n+#endif\n+\n     public:\n       // [23.2.2.1] construct/copy/destroy\n       // (assign() and get_allocator() are also listed in this section)\n@@ -718,15 +762,27 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       : _Base(_Node_alloc_type(__a))\n       { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }\n \n-      list(list&& __x, const allocator_type& __a)\n-      noexcept(_Node_alloc_traits::_S_always_equal())\n-      : _Base(std::move(__x), _Node_alloc_type(__a))\n+    private:\n+      list(list&& __x, const allocator_type& __a, true_type) noexcept\n+      : _Base(_Node_alloc_type(__a), std::move(__x))\n+      { }\n+\n+      list(list&& __x, const allocator_type& __a, false_type)\n+      : _Base(_Node_alloc_type(__a))\n       {\n-\t// If __x is not empty it means its allocator is not equal to __a,\n-\t// so we need to move from each element individually.\n-\tinsert(begin(), std::__make_move_if_noexcept_iterator(__x.begin()),\n-\t\t\tstd::__make_move_if_noexcept_iterator(__x.end()));\n+\tif (__x._M_get_Node_allocator() == this->_M_get_Node_allocator())\n+\t  this->_M_move_nodes(std::move(__x));\n+\telse\n+\t  insert(begin(), std::__make_move_if_noexcept_iterator(__x.begin()),\n+\t\t\t  std::__make_move_if_noexcept_iterator(__x.end()));\n       }\n+\n+    public:\n+      list(list&& __x, const allocator_type& __a)\n+      noexcept(_Node_alloc_traits::_S_always_equal())\n+      : list(std::move(__x), __a,\n+\t     typename _Node_alloc_traits::is_always_equal{})\n+      { }\n #endif\n \n       /**\n@@ -1000,7 +1056,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       /**  Returns the number of elements in the %list.  */\n       size_type\n       size() const _GLIBCXX_NOEXCEPT\n-      { return this->_M_node_count(); }\n+      { return _M_node_count(); }\n \n       /**  Returns the size() of the largest possible %list.  */\n       size_type\n@@ -1578,7 +1634,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t    if (this != std::__addressof(__x))\n \t      _M_check_equal_allocators(__x);\n \n-\t    size_t __n = this->_M_distance(__first._M_node, __last._M_node);\n+\t    size_t __n = _S_distance(__first, __last);\n \t    this->_M_inc_size(__n);\n \t    __x._M_dec_size(__n);\n "}]}