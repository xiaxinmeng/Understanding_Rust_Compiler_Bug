{"sha": "fb2ca25a9d578674144a76548fc4f90187a5ca03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyY2EyNWE5ZDU3ODY3NDE0NGE3NjU0OGZjNGY5MDE4N2E1Y2EwMw==", "commit": {"author": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-08-24T09:53:21Z"}, "committer": {"name": "Kresten Krab Thorup", "email": "krab@gcc.gnu.org", "date": "1993-08-24T09:53:21Z"}, "message": "(apply_args_register_offset): New function\n\n(apply_args_register_offset): New function\n(apply_args_register_offset): New function\n(apply_args_reg_offset): New variable\n(apply_args_size): Added initialization of apply_args_reg_offset.\n\nFrom-SVN: r5198", "tree": {"sha": "c07260788568dae808d319fab2be926a19a16166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c07260788568dae808d319fab2be926a19a16166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb2ca25a9d578674144a76548fc4f90187a5ca03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2ca25a9d578674144a76548fc4f90187a5ca03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb2ca25a9d578674144a76548fc4f90187a5ca03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2ca25a9d578674144a76548fc4f90187a5ca03/comments", "author": null, "committer": null, "parents": [{"sha": "87881feba59b9b87f8ad970b3cdb1deeb0e20b21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87881feba59b9b87f8ad970b3cdb1deeb0e20b21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87881feba59b9b87f8ad970b3cdb1deeb0e20b21"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "f7e1c6752c5dbccb435e189b26f0ece8a9bbb093", "filename": "gcc/expr.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2ca25a9d578674144a76548fc4f90187a5ca03/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2ca25a9d578674144a76548fc4f90187a5ca03/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=fb2ca25a9d578674144a76548fc4f90187a5ca03", "patch": "@@ -6507,6 +6507,28 @@ static enum machine_mode apply_args_mode[FIRST_PSEUDO_REGISTER];\n    INCOMING_REGNO gives the corresponding inbound register.  */\n static enum machine_mode apply_result_mode[FIRST_PSEUDO_REGISTER];\n \n+/* For each register that may be used for calling a function, this\n+   gives the offset of that register into the block returned by\n+   __bultin_apply_args.  0 indicates that the register is not\n+   used for calling a function. */\n+static int apply_args_reg_offset[FIRST_PSEUDO_REGISTER];\n+\n+/* Return the offset of register REGNO into the block returned by \n+   __builtin_apply_args.  This is not declared static, since it is\n+   needed in objc-act.c. */\n+int \n+apply_args_register_offset (int regno)\n+{\n+  apply_args_size ();\n+\n+  /* Arguments are always put in outgoing registers (in the argument\n+     block) if such make sense. */\n+#ifdef OUTGOING_REGNO\n+  regno = OUTGOING_REGNO(regno);\n+#endif\n+  return apply_args_reg_offset[regno];\n+}\n+\n /* Return the size required for the block returned by __builtin_apply_args,\n    and initialize apply_args_mode.  */\n static int\n@@ -6557,11 +6579,15 @@ apply_args_size ()\n \t    align = GET_MODE_ALIGNMENT (mode) / BITS_PER_UNIT;\n \t    if (size % align != 0)\n \t      size = CEIL (size, align) * align;\n+\t    apply_args_reg_offset[regno] = size;\n \t    size += GET_MODE_SIZE (mode);\n \t    apply_args_mode[regno] = mode;\n \t  }\n \telse\n-\t  apply_args_mode[regno] = VOIDmode;\n+\t  {\n+\t    apply_args_mode[regno] = VOIDmode;\n+\t    apply_args_reg_offset[regno] = 0;\n+\t  }\n     }\n   return size;\n }"}]}