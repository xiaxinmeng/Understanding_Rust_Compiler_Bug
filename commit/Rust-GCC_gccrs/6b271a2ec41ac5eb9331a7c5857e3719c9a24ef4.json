{"sha": "6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIyNzFhMmVjNDFhYzVlYjkzMzFhN2M1ODU3ZTM3MTljOWEyNGVmNA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-01-22T13:31:08Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-01-22T13:31:08Z"}, "message": "PR 78534, 83704 Large character lengths\n\nThis patch fixes various parts of the code to use a larger type than\nint for the character length. Depending on the situation,\nHOST_WIDE_INT, size_t, or gfc_charlen_t is appropriate.\n\nRegtested on x86_64-pc-linux-gnu and i686-pc-linux-gnu.\n\ngcc/fortran/ChangeLog:\n\n2018-01-22  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR 78534\n\tPR 83704\n\t* arith.c (gfc_arith_concat): Use size_t for string length.\n\t(gfc_compare_string): Likewise.\n\t(gfc_compare_with_Cstring): Likewise.\n\t* array.c (gfc_resolve_character_array_constructor): Use\n\tHOST_WIDE_INT, gfc_mpz_get_hwi.\n\t* check.c (gfc_check_fe_runtime_error): Use size_t.\n\t* data.c (create_character_initializer): Use HOST_WIDE_INT,\n\tgfc_extract_hwi.\n\t* decl.c (gfc_set_constant_character_len): Use gfc_charlen_t.\n\t(add_init_expr_to_sym): Use HOST_WIDE_INT.\n\t* expr.c (gfc_build_init_expr): Use HOST_WIDE_INT,\n\tgfc_extract_hwi.\n\t(gfc_apply_init): Likewise.\n\t* match.h (gfc_set_constant_character_len): Update prototype.\n\t* primary.c (match_string_constant): Use size_t.\n\t* resolve.c (resolve_ordinary_assign): Use HOST_WIDE_INT,\n\tgfc_mpz_get_hwi.\n\t* simplify.c (init_result_expr): Likewise.\n\t(gfc_simplify_len_trim): Use size_t.\n\t* target-memory.c (gfc_encode_character): Use size_t.\n\t(gfc_target_encode_expr): Use HOST_WIDE_INT, gfc_mpz_get_hwi.\n\t(interpret_array): Use size_t.\n\t(gfc_interpret_character): Likewise.\n\t* target-memory.h (gfc_encode_character): Update prototype.\n\t(gfc_interpret_character): Likewise.\n\t(gfc_target_interpret_expr): Likewise.\n\t* trans-const.c (gfc_build_string_const): Use size_t for length\n\targument.\n\t(gfc_build_wide_string_const): Likewise.\n\t* trans-const.h (gfc_build_string_const): Likewise.\n\t(gfc_build_wide_string_const): Likewise.\n\n2018-01-22  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR 78534\n\tPR 83704\n\t* gfortran.dg/string_1.f90: Remove printing the length.\n\nFrom-SVN: r256944", "tree": {"sha": "f3d3d61b5081f8526d7ce8cd08c24e54cd76f230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3d3d61b5081f8526d7ce8cd08c24e54cd76f230"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/comments", "author": null, "committer": null, "parents": [{"sha": "1dba94d42c835094c540e6cbeeaaa3c2e068a624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dba94d42c835094c540e6cbeeaaa3c2e068a624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dba94d42c835094c540e6cbeeaaa3c2e068a624"}], "stats": {"total": 199, "additions": 113, "deletions": 86}, "files": [{"sha": "f8a7c9a3a0b406aab071a92a4314ee812c8d54cf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -1,3 +1,39 @@\n+2018-01-22  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR 78534\n+\tPR 83704\n+\t* arith.c (gfc_arith_concat): Use size_t for string length.\n+\t(gfc_compare_string): Likewise.\n+\t(gfc_compare_with_Cstring): Likewise.\n+\t* array.c (gfc_resolve_character_array_constructor): Use\n+\tHOST_WIDE_INT, gfc_mpz_get_hwi.\n+\t* check.c (gfc_check_fe_runtime_error): Use size_t.\n+\t* data.c (create_character_initializer): Use HOST_WIDE_INT,\n+\tgfc_extract_hwi.\n+\t* decl.c (gfc_set_constant_character_len): Use gfc_charlen_t.\n+\t(add_init_expr_to_sym): Use HOST_WIDE_INT.\n+\t* expr.c (gfc_build_init_expr): Use HOST_WIDE_INT,\n+\tgfc_extract_hwi.\n+\t(gfc_apply_init): Likewise.\n+\t* match.h (gfc_set_constant_character_len): Update prototype.\n+\t* primary.c (match_string_constant): Use size_t.\n+\t* resolve.c (resolve_ordinary_assign): Use HOST_WIDE_INT,\n+\tgfc_mpz_get_hwi.\n+\t* simplify.c (init_result_expr): Likewise.\n+\t(gfc_simplify_len_trim): Use size_t.\n+\t* target-memory.c (gfc_encode_character): Use size_t.\n+\t(gfc_target_encode_expr): Use HOST_WIDE_INT, gfc_mpz_get_hwi.\n+\t(interpret_array): Use size_t.\n+\t(gfc_interpret_character): Likewise.\n+\t* target-memory.h (gfc_encode_character): Update prototype.\n+\t(gfc_interpret_character): Likewise.\n+\t(gfc_target_interpret_expr): Likewise.\n+\t* trans-const.c (gfc_build_string_const): Use size_t for length\n+\targument.\n+\t(gfc_build_wide_string_const): Likewise.\n+\t* trans-const.h (gfc_build_string_const): Likewise.\n+\t(gfc_build_wide_string_const): Likewise.\n+\n 2018-01-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/83900"}, {"sha": "8f328fe4c52c1e3661b44baf177aa63bd4aabac1", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -980,7 +980,7 @@ static arith\n gfc_arith_concat (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n {\n   gfc_expr *result;\n-  int len;\n+  size_t len;\n \n   gcc_assert (op1->ts.kind == op2->ts.kind);\n   result = gfc_get_constant_expr (BT_CHARACTER, op1->ts.kind,\n@@ -1089,7 +1089,7 @@ compare_complex (gfc_expr *op1, gfc_expr *op2)\n int\n gfc_compare_string (gfc_expr *a, gfc_expr *b)\n {\n-  int len, alen, blen, i;\n+  size_t len, alen, blen, i;\n   gfc_char_t ac, bc;\n \n   alen = a->value.character.length;\n@@ -1116,7 +1116,7 @@ gfc_compare_string (gfc_expr *a, gfc_expr *b)\n int\n gfc_compare_with_Cstring (gfc_expr *a, const char *b, bool case_sensitive)\n {\n-  int len, alen, blen, i;\n+  size_t len, alen, blen, i;\n   gfc_char_t ac, bc;\n \n   alen = a->value.character.length;"}, {"sha": "93deb0d932b63a441e2e73bc4acee5af1b4dbbe3", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -1962,7 +1962,7 @@ bool\n gfc_resolve_character_array_constructor (gfc_expr *expr)\n {\n   gfc_constructor *p;\n-  int found_length;\n+  HOST_WIDE_INT found_length;\n \n   gcc_assert (expr->expr_type == EXPR_ARRAY);\n   gcc_assert (expr->ts.type == BT_CHARACTER);\n@@ -1994,7 +1994,7 @@ gfc_resolve_character_array_constructor (gfc_expr *expr)\n       for (p = gfc_constructor_first (expr->value.constructor);\n \t   p; p = gfc_constructor_next (p))\n \t{\n-\t  int current_length = -1;\n+\t  HOST_WIDE_INT current_length = -1;\n \t  gfc_ref *ref;\n \t  for (ref = p->expr->ref; ref; ref = ref->next)\n \t    if (ref->type == REF_SUBSTRING\n@@ -2005,19 +2005,11 @@ gfc_resolve_character_array_constructor (gfc_expr *expr)\n \t  if (p->expr->expr_type == EXPR_CONSTANT)\n \t    current_length = p->expr->value.character.length;\n \t  else if (ref)\n-\t    {\n-\t      long j;\n-\t      j = mpz_get_ui (ref->u.ss.end->value.integer)\n-\t\t- mpz_get_ui (ref->u.ss.start->value.integer) + 1;\n-\t      current_length = (int) j;\n-\t    }\n+\t    current_length = gfc_mpz_get_hwi (ref->u.ss.end->value.integer)\n+\t      - gfc_mpz_get_hwi (ref->u.ss.start->value.integer) + 1;\n \t  else if (p->expr->ts.u.cl && p->expr->ts.u.cl->length\n \t\t   && p->expr->ts.u.cl->length->expr_type == EXPR_CONSTANT)\n-\t    {\n-\t      long j;\n-\t      j = mpz_get_si (p->expr->ts.u.cl->length->value.integer);\n-\t      current_length = (int) j;\n-\t    }\n+\t    current_length = gfc_mpz_get_hwi (p->expr->ts.u.cl->length->value.integer);\n \t  else\n \t    return true;\n \n@@ -2027,9 +2019,9 @@ gfc_resolve_character_array_constructor (gfc_expr *expr)\n \t    found_length = current_length;\n \t  else if (found_length != current_length)\n \t    {\n-\t      gfc_error (\"Different CHARACTER lengths (%d/%d) in array\"\n-\t\t\t \" constructor at %L\", found_length, current_length,\n-\t\t\t &p->expr->where);\n+\t      gfc_error (\"Different CHARACTER lengths (%ld/%ld) in array\"\n+\t\t\t \" constructor at %L\", (long) found_length,\n+\t\t\t (long) current_length, &p->expr->where);\n \t      return false;\n \t    }\n \n@@ -2051,7 +2043,7 @@ gfc_resolve_character_array_constructor (gfc_expr *expr)\n       /* If we've got a constant character length, pad according to this.\n \t gfc_extract_int does check for BT_INTEGER and EXPR_CONSTANT and sets\n \t max_length only if they pass.  */\n-      gfc_extract_int (expr->ts.u.cl->length, &found_length);\n+      gfc_extract_hwi (expr->ts.u.cl->length, &found_length);\n \n       /* Now pad/truncate the elements accordingly to the specified character\n \t length.  This is ok inside this conditional, as in the case above\n@@ -2063,13 +2055,13 @@ gfc_resolve_character_array_constructor (gfc_expr *expr)\n \t  if (p->expr->expr_type == EXPR_CONSTANT)\n \t    {\n \t      gfc_expr *cl = NULL;\n-\t      int current_length = -1;\n+\t      HOST_WIDE_INT current_length = -1;\n \t      bool has_ts;\n \n \t      if (p->expr->ts.u.cl && p->expr->ts.u.cl->length)\n \t      {\n \t\tcl = p->expr->ts.u.cl->length;\n-\t\tgfc_extract_int (cl, &current_length);\n+\t\tgfc_extract_hwi (cl, &current_length);\n \t      }\n \n \t      /* If gfc_extract_int above set current_length, we implicitly"}, {"sha": "f1c6695044ac2f0c59bc2eab7a79b74eb43bba29", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -5860,7 +5860,7 @@ bool\n gfc_check_fe_runtime_error (gfc_actual_arglist *a)\n {\n   gfc_expr *e;\n-  int len, i;\n+  size_t len, i;\n   int num_percent, nargs;\n \n   e = a->expr;"}, {"sha": "fdd7052e6a4a2edd7c1b041545b65ec04e638d11", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -104,11 +104,11 @@ static gfc_expr *\n create_character_initializer (gfc_expr *init, gfc_typespec *ts,\n \t\t\t      gfc_ref *ref, gfc_expr *rvalue)\n {\n-  int len, start, end, tlen;\n+  HOST_WIDE_INT len, start, end, tlen;\n   gfc_char_t *dest;\n   bool alloced_init = false;\n \t    \n-  gfc_extract_int (ts->u.cl->length, &len);\n+  gfc_extract_hwi (ts->u.cl->length, &len);\n \n   if (init == NULL)\n     {\n@@ -143,10 +143,10 @@ create_character_initializer (gfc_expr *init, gfc_typespec *ts,\n \t  return NULL;\n \t}\n \n-      gfc_extract_int (start_expr, &start);\n+      gfc_extract_hwi (start_expr, &start);\n       gfc_free_expr (start_expr);\n       start--;\n-      gfc_extract_int (end_expr, &end);\n+      gfc_extract_hwi (end_expr, &end);\n       gfc_free_expr (end_expr);\n     }\n   else\n@@ -174,16 +174,15 @@ create_character_initializer (gfc_expr *init, gfc_typespec *ts,\n       else\n \t{\n \t  gfc_warning_now (0, \"Initialization string at %L was truncated to \"\n-\t\t\t   \"fit the variable (%d/%d)\", &rvalue->where,\n-\t\t\t   tlen, len);\n+\t\t\t   \"fit the variable (%ld/%ld)\", &rvalue->where,\n+\t\t\t   (long) tlen, (long) len);\n \t  len = tlen;\n \t}\n     }\n \n   if (rvalue->ts.type == BT_HOLLERITH)\n     {\n-      int i;\n-      for (i = 0; i < len; i++)\n+      for (size_t i = 0; i < (size_t) len; i++)\n \tdest[start+i] = rvalue->representation.string[i];\n     }\n   else"}, {"sha": "710c6f7937e7a60736bab5b2e697b5386481020d", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -1538,10 +1538,11 @@ build_sym (const char *name, gfc_charlen *cl, bool cl_deferred,\n    means no checking.  */\n \n void\n-gfc_set_constant_character_len (int len, gfc_expr *expr, int check_len)\n+gfc_set_constant_character_len (gfc_charlen_t len, gfc_expr *expr,\n+\t\t\t\tgfc_charlen_t check_len)\n {\n   gfc_char_t *s;\n-  int slen;\n+  gfc_charlen_t slen;\n \n   if (expr->ts.type != BT_CHARACTER)\n     return;\n@@ -1564,15 +1565,17 @@ gfc_set_constant_character_len (int len, gfc_expr *expr, int check_len)\n       if (warn_character_truncation && slen > len)\n \tgfc_warning_now (OPT_Wcharacter_truncation,\n \t\t\t \"CHARACTER expression at %L is being truncated \"\n-\t\t\t \"(%d/%d)\", &expr->where, slen, len);\n+\t\t\t \"(%ld/%ld)\", &expr->where,\n+\t\t\t (long) slen, (long) len);\n \n       /* Apply the standard by 'hand' otherwise it gets cleared for\n \t initializers.  */\n       if (check_len != -1 && slen != check_len\n           && !(gfc_option.allow_std & GFC_STD_GNU))\n \tgfc_error_now (\"The CHARACTER elements of the array constructor \"\n-\t\t       \"at %L must have the same length (%d/%d)\",\n-\t\t\t&expr->where, slen, check_len);\n+\t\t       \"at %L must have the same length (%ld/%ld)\",\n+\t\t       &expr->where, (long) slen,\n+\t\t       (long) check_len);\n \n       s[len] = '\\0';\n       free (expr->value.character.string);\n@@ -1751,12 +1754,10 @@ add_init_expr_to_sym (const char *name, gfc_expr **initp, locus *var_locus)\n \t  /* Update initializer character length according symbol.  */\n \t  else if (sym->ts.u.cl->length->expr_type == EXPR_CONSTANT)\n \t    {\n-\t      int len;\n-\n \t      if (!gfc_specification_expr (sym->ts.u.cl->length))\n \t\treturn false;\n \n-\t      len = mpz_get_si (sym->ts.u.cl->length->value.integer);\n+\t      HOST_WIDE_INT len = gfc_mpz_get_hwi (sym->ts.u.cl->length->value.integer);\n \n \t      if (init->expr_type == EXPR_CONSTANT)\n \t\tgfc_set_constant_character_len (len, init, -1);"}, {"sha": "2a5f8eca7d5fc6af0486f3c50d1aaf435a1ed1f7", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -4088,9 +4088,7 @@ gfc_build_default_init_expr (gfc_typespec *ts, locus *where)\n gfc_expr *\n gfc_build_init_expr (gfc_typespec *ts, locus *where, bool force)\n {\n-  int char_len;\n   gfc_expr *init_expr;\n-  int i;\n \n   /* Try to build an initializer expression.  */\n   init_expr = gfc_get_constant_expr (ts->type, ts->kind, where);\n@@ -4202,10 +4200,10 @@ gfc_build_init_expr (gfc_typespec *ts, locus *where, bool force)\n           && ts->u.cl->length\n           && ts->u.cl->length->expr_type == EXPR_CONSTANT)\n         {\n-          char_len = mpz_get_si (ts->u.cl->length->value.integer);\n+          HOST_WIDE_INT char_len = gfc_mpz_get_hwi (ts->u.cl->length->value.integer);\n           init_expr->value.character.length = char_len;\n           init_expr->value.character.string = gfc_get_wide_string (char_len+1);\n-          for (i = 0; i < char_len; i++)\n+          for (size_t i = 0; i < (size_t) char_len; i++)\n             init_expr->value.character.string[i]\n               = (unsigned char) gfc_option.flag_init_character_value;\n         }\n@@ -4255,13 +4253,11 @@ gfc_apply_init (gfc_typespec *ts, symbol_attribute *attr, gfc_expr *init)\n       && ts->u.cl\n       && ts->u.cl->length && ts->u.cl->length->expr_type == EXPR_CONSTANT)\n     {\n-      int len;\n-\n       gcc_assert (ts->u.cl && ts->u.cl->length);\n       gcc_assert (ts->u.cl->length->expr_type == EXPR_CONSTANT);\n       gcc_assert (ts->u.cl->length->ts.type == BT_INTEGER);\n \n-      len = mpz_get_si (ts->u.cl->length->value.integer);\n+      HOST_WIDE_INT len = gfc_mpz_get_hwi (ts->u.cl->length->value.integer);\n \n       if (init->expr_type == EXPR_CONSTANT)\n         gfc_set_constant_character_len (len, init, -1);\n@@ -4276,7 +4272,6 @@ gfc_apply_init (gfc_typespec *ts, symbol_attribute *attr, gfc_expr *init)\n \n           if (ctor)\n             {\n-              int first_len;\n               bool has_ts = (init->ts.u.cl\n                              && init->ts.u.cl->length_from_typespec);\n \n@@ -4285,7 +4280,7 @@ gfc_apply_init (gfc_typespec *ts, symbol_attribute *attr, gfc_expr *init)\n                  length.  This need not be the length of the LHS!  */\n               gcc_assert (ctor->expr->expr_type == EXPR_CONSTANT);\n               gcc_assert (ctor->expr->ts.type == BT_CHARACTER);\n-              first_len = ctor->expr->value.character.length;\n+              gfc_charlen_t first_len = ctor->expr->value.character.length;\n \n               for ( ; ctor; ctor = gfc_constructor_next (ctor))\n                 if (ctor->expr->expr_type == EXPR_CONSTANT)"}, {"sha": "6f12b13a1c8bafd0090f0d5c52f29cd6f00e3bf3", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -230,7 +230,8 @@ match gfc_match_type (gfc_statement *);\n match gfc_match_implicit_none (void);\n match gfc_match_implicit (void);\n \n-void gfc_set_constant_character_len (int, gfc_expr *, int);\n+void gfc_set_constant_character_len (gfc_charlen_t, gfc_expr *,\n+\t\t\t\t     gfc_charlen_t);\n \n /* Matchers for attribute declarations.  */\n match gfc_match_allocatable (void);"}, {"sha": "3d076736fdcb89b65ac5c029aacd1ab62a130810", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -1006,7 +1006,8 @@ static match\n match_string_constant (gfc_expr **result)\n {\n   char name[GFC_MAX_SYMBOL_LEN + 1], peek;\n-  int i, kind, length, save_warn_ampersand, ret;\n+  size_t length;\n+  int kind,save_warn_ampersand, ret;\n   locus old_locus, start_locus;\n   gfc_symbol *sym;\n   gfc_expr *e;\n@@ -1125,7 +1126,7 @@ match_string_constant (gfc_expr **result)\n   warn_ampersand = false;\n \n   p = e->value.character.string;\n-  for (i = 0; i < length; i++)\n+  for (size_t i = 0; i < length; i++)\n     {\n       c = next_string_char (delimiter, &ret);\n "}, {"sha": "a2b892aa65a135c50c324cf73565d919b3e5c23f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -10117,8 +10117,6 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n   bool rval = false;\n   gfc_expr *lhs;\n   gfc_expr *rhs;\n-  int llen = 0;\n-  int rlen = 0;\n   int n;\n   gfc_ref *ref;\n   symbol_attribute attr;\n@@ -10200,24 +10198,25 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n   if (lhs->ts.type == BT_CHARACTER\n \t&& warn_character_truncation)\n     {\n+      HOST_WIDE_INT llen = 0, rlen = 0;\n       if (lhs->ts.u.cl != NULL\n \t    && lhs->ts.u.cl->length != NULL\n \t    && lhs->ts.u.cl->length->expr_type == EXPR_CONSTANT)\n-\tllen = mpz_get_si (lhs->ts.u.cl->length->value.integer);\n+\tllen = gfc_mpz_get_hwi (lhs->ts.u.cl->length->value.integer);\n \n       if (rhs->expr_type == EXPR_CONSTANT)\n  \trlen = rhs->value.character.length;\n \n       else if (rhs->ts.u.cl != NULL\n \t\t && rhs->ts.u.cl->length != NULL\n \t\t && rhs->ts.u.cl->length->expr_type == EXPR_CONSTANT)\n-\trlen = mpz_get_si (rhs->ts.u.cl->length->value.integer);\n+\trlen = gfc_mpz_get_hwi (rhs->ts.u.cl->length->value.integer);\n \n       if (rlen && llen && rlen > llen)\n \tgfc_warning_now (OPT_Wcharacter_truncation,\n \t\t\t \"CHARACTER expression will be truncated \"\n-\t\t\t \"in assignment (%d/%d) at %L\",\n-\t\t\t llen, rlen, &code->loc);\n+\t\t\t \"in assignment (%ld/%ld) at %L\",\n+\t\t\t (long) llen, (long) rlen, &code->loc);\n     }\n \n   /* Ensure that a vector index expression for the lvalue is evaluated"}, {"sha": "1f88b5cf3a350b7323ee52df1479aefc580d43ef", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -275,7 +275,7 @@ init_result_expr (gfc_expr *e, int init, gfc_expr *array)\n   else if (e && e->expr_type == EXPR_CONSTANT)\n     {\n       int i = gfc_validate_kind (e->ts.type, e->ts.kind, false);\n-      int length;\n+      HOST_WIDE_INT length;\n       gfc_char_t *string;\n \n       switch (e->ts.type)\n@@ -313,14 +313,14 @@ init_result_expr (gfc_expr *e, int init, gfc_expr *array)\n \t    if (init == INT_MIN)\n \t      {\n \t\tgfc_expr *len = gfc_simplify_len (array, NULL);\n-\t\tgfc_extract_int (len, &length);\n+\t\tgfc_extract_hwi (len, &length);\n \t\tstring = gfc_get_wide_string (length + 1);\n \t\tgfc_wide_memset (string, 0, length);\n \t      }\n \t    else if (init == INT_MAX)\n \t      {\n \t\tgfc_expr *len = gfc_simplify_len (array, NULL);\n-\t\tgfc_extract_int (len, &length);\n+\t\tgfc_extract_hwi (len, &length);\n \t\tstring = gfc_get_wide_string (length + 1);\n \t\tgfc_wide_memset (string, 255, length);\n \t      }\n@@ -4415,7 +4415,7 @@ gfc_expr *\n gfc_simplify_len_trim (gfc_expr *e, gfc_expr *kind)\n {\n   gfc_expr *result;\n-  int count, len, i;\n+  size_t count, len, i;\n   int k = get_kind (BT_INTEGER, kind, \"LEN_TRIM\", gfc_default_integer_kind);\n \n   if (k == -1)"}, {"sha": "e445fbe665da1b408b004186722503d6168e820b", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -216,16 +216,16 @@ encode_logical (int kind, int logical, unsigned char *buffer, size_t buffer_size\n }\n \n \n-int\n-gfc_encode_character (int kind, gfc_charlen_t length, const gfc_char_t *string,\n+size_t\n+gfc_encode_character (int kind, size_t length, const gfc_char_t *string,\n \t\t      unsigned char *buffer, size_t buffer_size)\n {\n   size_t elsize = size_character (1, kind);\n   tree type = gfc_get_char_type (kind);\n \n   gcc_assert (buffer_size >= size_character (length, kind));\n \n-  for (size_t i = 0; i < (size_t) length; i++)\n+  for (size_t i = 0; i < length; i++)\n     native_encode_expr (build_int_cst (type, string[i]), &buffer[i*elsize],\n \t\t\telsize);\n \n@@ -318,11 +318,11 @@ gfc_target_encode_expr (gfc_expr *source, unsigned char *buffer,\n \t\t\t\t     buffer, buffer_size);\n       else\n \t{\n-\t  int start, end;\n+\t  HOST_WIDE_INT start, end;\n \n \t  gcc_assert (source->expr_type == EXPR_SUBSTRING);\n-\t  gfc_extract_int (source->ref->u.ss.start, &start);\n-\t  gfc_extract_int (source->ref->u.ss.end, &end);\n+\t  gfc_extract_hwi (source->ref->u.ss.start, &start);\n+\t  gfc_extract_hwi (source->ref->u.ss.end, &end);\n \t  return gfc_encode_character (source->ts.kind, MAX(end - start + 1, 0),\n \t\t\t\t       &source->value.character.string[start-1],\n \t\t\t\t       buffer, buffer_size);\n@@ -348,22 +348,21 @@ gfc_target_encode_expr (gfc_expr *source, unsigned char *buffer,\n }\n \n \n-static int\n+static size_t\n interpret_array (unsigned char *buffer, size_t buffer_size, gfc_expr *result)\n {\n   gfc_constructor_base base = NULL;\n-  int array_size = 1;\n-  int i;\n-  int ptr = 0;\n+  size_t array_size = 1;\n+  size_t ptr = 0;\n \n   /* Calculate array size from its shape and rank.  */\n   gcc_assert (result->rank > 0 && result->shape);\n \n-  for (i = 0; i < result->rank; i++)\n-    array_size *= (int)mpz_get_ui (result->shape[i]);\n+  for (int i = 0; i < result->rank; i++)\n+    array_size *= mpz_get_ui (result->shape[i]);\n \n   /* Iterate over array elements, producing constructors.  */\n-  for (i = 0; i < array_size; i++)\n+  for (size_t i = 0; i < array_size; i++)\n     {\n       gfc_expr *e = gfc_get_constant_expr (result->ts.type, result->ts.kind,\n \t\t\t\t\t   &result->where);\n@@ -433,7 +432,7 @@ gfc_interpret_logical (int kind, unsigned char *buffer, size_t buffer_size,\n }\n \n \n-int\n+size_t\n gfc_interpret_character (unsigned char *buffer, size_t buffer_size,\n \t\t\t gfc_expr *result)\n {\n@@ -452,7 +451,7 @@ gfc_interpret_character (unsigned char *buffer, size_t buffer_size,\n   else\n     {\n       mpz_t integer;\n-      unsigned bytes = size_character (1, result->ts.kind);\n+      size_t bytes = size_character (1, result->ts.kind);\n       mpz_init (integer);\n       gcc_assert (bytes <= sizeof (unsigned long));\n \n@@ -556,7 +555,7 @@ gfc_interpret_derived (unsigned char *buffer, size_t buffer_size, gfc_expr *resu\n \n \n /* Read a binary buffer to a constant expression.  */\n-int\n+size_t\n gfc_target_interpret_expr (unsigned char *buffer, size_t buffer_size,\n \t\t\t   gfc_expr *result, bool convert_widechar)\n {"}, {"sha": "8f25899a92cf77d85e83479076470c83efca1f47", "filename": "gcc/fortran/target-memory.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Ftarget-memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Ftarget-memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.h?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -28,7 +28,7 @@ size_t gfc_element_size (gfc_expr *);\n size_t gfc_target_expr_size (gfc_expr *);\n \n /* Write a constant expression in binary form to a target buffer.  */\n-int gfc_encode_character (int, gfc_charlen_t, const gfc_char_t *, unsigned char *,\n+size_t gfc_encode_character (int, size_t, const gfc_char_t *, unsigned char *,\n \t\t\t  size_t);\n unsigned HOST_WIDE_INT gfc_target_encode_expr (gfc_expr *, unsigned char *,\n \t\t\t\t\t       size_t);\n@@ -39,9 +39,9 @@ int gfc_interpret_integer (int, unsigned char *, size_t, mpz_t);\n int gfc_interpret_float (int, unsigned char *, size_t, mpfr_t);\n int gfc_interpret_complex (int, unsigned char *, size_t, mpc_t);\n int gfc_interpret_logical (int, unsigned char *, size_t, int *);\n-int gfc_interpret_character (unsigned char *, size_t, gfc_expr *);\n+size_t gfc_interpret_character (unsigned char *, size_t, gfc_expr *);\n int gfc_interpret_derived (unsigned char *, size_t, gfc_expr *);\n-int gfc_target_interpret_expr (unsigned char *, size_t, gfc_expr *, bool);\n+size_t gfc_target_interpret_expr (unsigned char *, size_t, gfc_expr *, bool);\n \n /* Merge overlapping equivalence initializers for trans-common.c. */\n size_t gfc_merge_initializers (gfc_typespec, gfc_expr *, locus *,"}, {"sha": "4b6adbf078631183494fd00769f87969cb0ba1b8", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -69,7 +69,7 @@ gfc_build_const (tree type, tree intval)\n /* Build a string constant with C char type.  */\n \n tree\n-gfc_build_string_const (int length, const char *s)\n+gfc_build_string_const (size_t length, const char *s)\n {\n   tree str;\n   tree len;\n@@ -89,7 +89,7 @@ gfc_build_string_const (int length, const char *s)\n    non-default character kinds.  */\n \n tree\n-gfc_build_wide_string_const (int kind, int length, const gfc_char_t *string)\n+gfc_build_wide_string_const (int kind, size_t length, const gfc_char_t *string)\n {\n   int i;\n   tree str, len;"}, {"sha": "4f5a520ad29198b61815274d674abf0c2fd6f13f", "filename": "gcc/fortran/trans-const.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Ftrans-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ffortran%2Ftrans-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.h?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -44,8 +44,8 @@ tree gfc_conv_constant_to_tree (gfc_expr *);\n    structures.  Also sets the length of CHARACTER strings in the gfc_se.  */\n void gfc_conv_constant (gfc_se *, gfc_expr *);\n \n-tree gfc_build_string_const (int, const char *);\n-tree gfc_build_wide_string_const (int, int, const gfc_char_t *);\n+tree gfc_build_string_const (size_t, const char *);\n+tree gfc_build_wide_string_const (int, size_t, const gfc_char_t *);\n tree gfc_build_cstring_const (const char *);\n tree gfc_build_localized_cstring_const (const char *);\n "}, {"sha": "512bf5128b3a2f5b3be4c487a7785a7c8b69ae1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -1,3 +1,9 @@\n+2018-01-22  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR 78534\n+\tPR 83704\n+\t* gfortran.dg/string_1.f90: Remove printing the length.\n+\n 2018-01-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83963"}, {"sha": "272b51e29864dc77558733ee299398bceadc5f59", "filename": "gcc/testsuite/gfortran.dg/string_1.f90", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstring_1.f90?ref=6b271a2ec41ac5eb9331a7c5857e3719c9a24ef4", "patch": "@@ -10,6 +10,4 @@ program main\n   character (len=int(huge(0_4),kind=8) + 1_8) :: z ! { dg-error \"too large\" }\n   character (len=int(huge(0_4),kind=8) + 0_8) :: w\n \n-  print *, len(s)\n-\n end program main"}]}