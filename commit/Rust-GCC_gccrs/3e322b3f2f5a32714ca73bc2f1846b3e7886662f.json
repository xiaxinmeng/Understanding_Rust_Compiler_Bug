{"sha": "3e322b3f2f5a32714ca73bc2f1846b3e7886662f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UzMjJiM2YyZjVhMzI3MTRjYTczYmMyZjE4NDZiM2U3ODg2NjYyZg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-08-01T14:54:57Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-08-01T14:54:57Z"}, "message": "[AArch64][1/2] Fix offset glitch in load reg pair pattern\n\non aarch64, we are using load register pair post-writeback instruction in\nepilogue.\n\nfor example, for the following instruction:\n\nldp, x0, x1, [sp], #16\n\nwhat it's doing is:\n\nx0 <- MEM(sp + 0)\nx1 <- MEM(sp + 8)\nsp < sp + 16\n\nwhile there is a glitch in our loadwb_pair* pattern, the restore of the\nfirst reg should always be with offset zero.\n\n(set (match_operand:GPI 2 \"register_operand\" \"=r\")\n-          (mem:GPI (plus:P (match_dup 1)\n-                   (match_dup 4))))\n+          (mem:GPI (match_dup 1)))\n\ngcc/\n  * config/aarch64/aarch64.md (loadwb_pair<GPI:mode>_<P:mode>): Fix offset.\n  (loadwb_pair<GPI:mode>_<P:mode>): Likewise.\n  * config/aarch64/aarch64.c (aarch64_gen_loadwb_pair): Likewise.\n\nFrom-SVN: r213485", "tree": {"sha": "3c8880f2009e49886a084c2d8830fc9e339f626b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c8880f2009e49886a084c2d8830fc9e339f626b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e322b3f2f5a32714ca73bc2f1846b3e7886662f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e322b3f2f5a32714ca73bc2f1846b3e7886662f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e322b3f2f5a32714ca73bc2f1846b3e7886662f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e322b3f2f5a32714ca73bc2f1846b3e7886662f/comments", "author": null, "committer": null, "parents": [{"sha": "fb01ed3883bc4a543776ef52d17d64631835ac88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb01ed3883bc4a543776ef52d17d64631835ac88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb01ed3883bc4a543776ef52d17d64631835ac88"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "8a8e8a9416e82a46ebe26c26453af5e37dc385bc", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e322b3f2f5a32714ca73bc2f1846b3e7886662f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e322b3f2f5a32714ca73bc2f1846b3e7886662f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=3e322b3f2f5a32714ca73bc2f1846b3e7886662f", "patch": "@@ -2006,10 +2006,10 @@ aarch64_gen_loadwb_pair (enum machine_mode mode, rtx base, rtx reg, rtx reg2,\n     {\n     case DImode:\n       return gen_loadwb_pairdi_di (base, base, reg, reg2, GEN_INT (adjustment),\n-\t\t\t\t   GEN_INT (adjustment + UNITS_PER_WORD));\n+\t\t\t\t   GEN_INT (UNITS_PER_WORD));\n     case DFmode:\n       return gen_loadwb_pairdf_di (base, base, reg, reg2, GEN_INT (adjustment),\n-\t\t\t\t   GEN_INT (adjustment + UNITS_PER_WORD));\n+\t\t\t\t   GEN_INT (UNITS_PER_WORD));\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "0728fb67664699e489f6e477a9975a969089eed1", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e322b3f2f5a32714ca73bc2f1846b3e7886662f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e322b3f2f5a32714ca73bc2f1846b3e7886662f/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=3e322b3f2f5a32714ca73bc2f1846b3e7886662f", "patch": "@@ -1016,20 +1016,19 @@\n   [(set_attr \"type\" \"neon_store1_2reg<q>\")]\n )\n \n-;; Load pair with writeback.  This is primarily used in function epilogues\n-;; when restoring [fp,lr]\n+;; Load pair with post-index writeback.  This is primarily used in function\n+;; epilogues.\n (define_insn \"loadwb_pair<GPI:mode>_<P:mode>\"\n   [(parallel\n     [(set (match_operand:P 0 \"register_operand\" \"=k\")\n           (plus:P (match_operand:P 1 \"register_operand\" \"0\")\n                   (match_operand:P 4 \"const_int_operand\" \"n\")))\n      (set (match_operand:GPI 2 \"register_operand\" \"=r\")\n-          (mem:GPI (plus:P (match_dup 1)\n-                   (match_dup 4))))\n+          (mem:GPI (match_dup 1)))\n      (set (match_operand:GPI 3 \"register_operand\" \"=r\")\n           (mem:GPI (plus:P (match_dup 1)\n                    (match_operand:P 5 \"const_int_operand\" \"n\"))))])]\n-  \"INTVAL (operands[5]) == INTVAL (operands[4]) + GET_MODE_SIZE (<GPI:MODE>mode)\"\n+  \"INTVAL (operands[5]) == GET_MODE_SIZE (<GPI:MODE>mode)\"\n   \"ldp\\\\t%<w>2, %<w>3, [%1], %4\"\n   [(set_attr \"type\" \"load2\")]\n )\n@@ -1040,18 +1039,17 @@\n           (plus:P (match_operand:P 1 \"register_operand\" \"0\")\n                   (match_operand:P 4 \"const_int_operand\" \"n\")))\n      (set (match_operand:GPF 2 \"register_operand\" \"=w\")\n-          (mem:GPF (plus:P (match_dup 1)\n-                   (match_dup 4))))\n+          (mem:GPF (match_dup 1)))\n      (set (match_operand:GPF 3 \"register_operand\" \"=w\")\n           (mem:GPF (plus:P (match_dup 1)\n                    (match_operand:P 5 \"const_int_operand\" \"n\"))))])]\n-  \"INTVAL (operands[5]) == INTVAL (operands[4]) + GET_MODE_SIZE (<GPF:MODE>mode)\"\n+  \"INTVAL (operands[5]) == GET_MODE_SIZE (<GPF:MODE>mode)\"\n   \"ldp\\\\t%<w>2, %<w>3, [%1], %4\"\n   [(set_attr \"type\" \"neon_load1_2reg\")]\n )\n \n-;; Store pair with writeback.  This is primarily used in function prologues\n-;; when saving [fp,lr]\n+;; Store pair with pre-index writeback.  This is primarily used in function\n+;; prologues.\n (define_insn \"storewb_pair<GPI:mode>_<P:mode>\"\n   [(parallel\n     [(set (match_operand:P 0 \"register_operand\" \"=&k\")"}]}