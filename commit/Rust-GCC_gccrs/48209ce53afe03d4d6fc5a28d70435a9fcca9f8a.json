{"sha": "48209ce53afe03d4d6fc5a28d70435a9fcca9f8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgyMDljZTUzYWZlMDNkNGQ2ZmM1YTI4ZDcwNDM1YTlmY2NhOWY4YQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2002-08-20T19:56:30Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2002-08-20T19:56:30Z"}, "message": "cppinit.c (remove_dup_dir): Add head_ptr argument to handle removal at head.\n\n\t* cppinit.c (remove_dup_dir): Add head_ptr argument to handle removal\n\tat head.\n\t(remove_dup_nonsys_dirs): New function.\n\t(remove_dup_dirs): Change argument head to head_ptr.  Remove warnings.\n\t(merge_include_chains): Remove non-system include directories from\n\tquote and bracket include chains when they duplicate equivalent system\n\tdirectories.\n\t* doc/cpp.texi (-I): Update.\n        * doc/cppopts.texi (-I): Update.\n        * doc/install.texi (--with-local-prefix): Further document usage of\n\tthis option.\n\t* doc/invoke.texi (-I): Update.\n\nFrom-SVN: r56468", "tree": {"sha": "ed9dcff5f785d529974799767abd4fd5544d93c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed9dcff5f785d529974799767abd4fd5544d93c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a/comments", "author": null, "committer": null, "parents": [{"sha": "4ca79136cf4d88e6b53d2fce4cbe720f75a5b358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca79136cf4d88e6b53d2fce4cbe720f75a5b358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca79136cf4d88e6b53d2fce4cbe720f75a5b358"}], "stats": {"total": 223, "additions": 160, "deletions": 63}, "files": [{"sha": "8df1641a8b1679f4cef6bf8225279230b38256a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48209ce53afe03d4d6fc5a28d70435a9fcca9f8a", "patch": "@@ -1,3 +1,18 @@\n+2002-08-20  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* cppinit.c (remove_dup_dir): Add head_ptr argument to handle removal\n+\tat head.\n+\t(remove_dup_nonsys_dirs): New function.\n+\t(remove_dup_dirs): Change argument head to head_ptr.  Remove warnings.\n+\t(merge_include_chains): Remove non-system include directories from\n+\tquote and bracket include chains when they duplicate equivalent system\n+\tdirectories.\n+\t* doc/cpp.texi (-I): Update.\n+        * doc/cppopts.texi (-I): Update.\n+        * doc/install.texi (--with-local-prefix): Further document usage of\n+\tthis option.\n+\t* doc/invoke.texi (-I): Update.\n+\n 2002-08-20  Richard Henderson  <rth@redhat.com>\n \n \t* expr.c (TARGET_MEM_FUNCTIONS): Transform to boolean."}, {"sha": "bdee5a66b31ec30043c5b82e167a7c49f09657d2", "filename": "gcc/cppinit.c", "status": "modified", "additions": 79, "deletions": 33, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=48209ce53afe03d4d6fc5a28d70435a9fcca9f8a", "patch": "@@ -94,9 +94,13 @@ static void mark_named_operators\tPARAMS ((cpp_reader *));\n static void append_include_chain\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t char *, int, int));\n static struct search_path * remove_dup_dir\tPARAMS ((cpp_reader *,\n+\t\t\t\t\t\t struct search_path *,\n+\t\t\t\t\t\t struct search_path **));\n+static struct search_path * remove_dup_nonsys_dirs PARAMS ((cpp_reader *,\n+\t\t\t\t\t\t struct search_path **,\n \t\t\t\t\t\t struct search_path *));\n static struct search_path * remove_dup_dirs PARAMS ((cpp_reader *,\n-\t\t\t\t\t\t struct search_path *));\n+\t\t\t\t\t\t struct search_path **));\n static void merge_include_chains\tPARAMS ((cpp_reader *));\n static bool push_include\t\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t struct pending_option *));\n@@ -257,55 +261,92 @@ append_include_chain (pfile, dir, path, cxx_aware)\n }\n \n /* Handle a duplicated include path.  PREV is the link in the chain\n-   before the duplicate.  The duplicate is removed from the chain and\n-   freed.  Returns PREV.  */\n+   before the duplicate, or NULL if the duplicate is at the head of\n+   the chain.  The duplicate is removed from the chain and freed.\n+   Returns PREV.  */\n static struct search_path *\n-remove_dup_dir (pfile, prev)\n+remove_dup_dir (pfile, prev, head_ptr)\n      cpp_reader *pfile;\n      struct search_path *prev;\n+     struct search_path **head_ptr;\n {\n-  struct search_path *cur = prev->next;\n+  struct search_path *cur;\n+\n+  if (prev != NULL)\n+    {\n+      cur = prev->next;\n+      prev->next = cur->next;\n+    }\n+  else\n+    {\n+      cur = *head_ptr;\n+      *head_ptr = cur->next;\n+    }\n \n   if (CPP_OPTION (pfile, verbose))\n     fprintf (stderr, _(\"ignoring duplicate directory \\\"%s\\\"\\n\"), cur->name);\n \n-  prev->next = cur->next;\n   free ((PTR) cur->name);\n   free (cur);\n \n   return prev;\n }\n \n+/* Remove duplicate non-system directories for which there is an equivalent\n+   system directory latter in the chain.  The range for removal is between\n+   *HEAD_PTR and END.  Returns the directory before END, or NULL if none.\n+   This algorithm is quadratic in the number system directories, which is\n+   acceptable since there aren't usually that many of them.  */\n+static struct search_path *\n+remove_dup_nonsys_dirs (pfile, head_ptr, end)\n+     cpp_reader *pfile;\n+     struct search_path **head_ptr;\n+     struct search_path *end;\n+{\n+  struct search_path *prev, *cur, *other;\n+\n+  for (cur = *head_ptr; cur; cur = cur->next)\n+    {\n+      if (cur->sysp)\n+\t{\n+\t  for (other = *head_ptr, prev = NULL;\n+\t       other != end;\n+\t       other = other ? other->next : *head_ptr)\n+\t    {\n+\t      if (!other->sysp\n+\t\t  && INO_T_EQ (cur->ino, other->ino)\n+\t\t  && cur->dev == other->dev)\n+\t\t{\n+\t\t  other = remove_dup_dir (pfile, prev, head_ptr);\n+\t\t  if (CPP_OPTION (pfile, verbose))\n+\t\t    fprintf (stderr,\n+  _(\"  as it is a non-system directory that duplicates a system directory\\n\"));\n+\t\t}\n+\t      prev = other;\n+\t    }\n+\t}\n+    }\n+\n+  return prev;\n+}\n+\n /* Remove duplicate directories from a chain.  Returns the tail of the\n    chain, or NULL if the chain is empty.  This algorithm is quadratic\n    in the number of -I switches, which is acceptable since there\n    aren't usually that many of them.  */\n static struct search_path *\n-remove_dup_dirs (pfile, head)\n+remove_dup_dirs (pfile, head_ptr)\n      cpp_reader *pfile;\n-     struct search_path *head;\n+     struct search_path **head_ptr;\n {\n   struct search_path *prev = NULL, *cur, *other;\n \n-  for (cur = head; cur; cur = cur->next)\n+  for (cur = *head_ptr; cur; cur = cur->next)\n     {\n-      for (other = head; other != cur; other = other->next)\n+      for (other = *head_ptr; other != cur; other = other->next)\n \tif (INO_T_EQ (cur->ino, other->ino) && cur->dev == other->dev)\n \t  {\n-\t    if (cur->sysp && !other->sysp)\n-\t      {\n-\t\tcpp_error (pfile, DL_WARNING,\n-\t\t\t   \"changing search order for system directory \\\"%s\\\"\",\n-\t\t\t   cur->name);\n-\t\tif (strcmp (cur->name, other->name))\n-\t\t  cpp_error (pfile, DL_WARNING,\n-\t\t\t     \"  as it is the same as non-system directory \\\"%s\\\"\",\n-\t\t\t     other->name);\n-\t\telse\n-\t\t  cpp_error (pfile, DL_WARNING,\n-\t\t\t     \"  as it has already been specified as a non-system directory\");\n-\t      }\n-\t    cur = remove_dup_dir (pfile, prev);\n+\t    cur = remove_dup_dir (pfile, prev, head_ptr);\n \t    break;\n \t  }\n       prev = cur;\n@@ -343,28 +384,33 @@ merge_include_chains (pfile)\n   else\n     brack = systm;\n \n-  /* This is a bit tricky.  First we drop dupes from the quote-include\n-     list.  Then we drop dupes from the bracket-include list.\n-     Finally, if qtail and brack are the same directory, we cut out\n-     brack and move brack up to point to qtail.\n+  /* This is a bit tricky.  First we drop non-system dupes of system\n+     directories from the merged bracket-include list.  Next we drop\n+     dupes from the bracket and quote include lists.  Then we drop\n+     non-system dupes from the merged quote-include list.  Finally,\n+     if qtail and brack are the same directory, we cut out brack and\n+     move brack up to point to qtail.\n \n      We can't just merge the lists and then uniquify them because\n      then we may lose directories from the <> search path that should\n-     be there; consider -Ifoo -Ibar -I- -Ifoo -Iquux. It is however\n+     be there; consider -Ifoo -Ibar -I- -Ifoo -Iquux.  It is however\n      safe to treat -Ibar -Ifoo -I- -Ifoo -Iquux as if written\n      -Ibar -I- -Ifoo -Iquux.  */\n \n-  remove_dup_dirs (pfile, brack);\n-  qtail = remove_dup_dirs (pfile, quote);\n+  remove_dup_nonsys_dirs (pfile, &brack, systm);\n+  remove_dup_dirs (pfile, &brack);\n \n   if (quote)\n     {\n+      qtail = remove_dup_dirs (pfile, &quote);\n       qtail->next = brack;\n \n+      qtail = remove_dup_nonsys_dirs (pfile, &quote, brack);\n+\n       /* If brack == qtail, remove brack as it's simpler.  */\n-      if (brack && INO_T_EQ (qtail->ino, brack->ino)\n+      if (qtail && brack && INO_T_EQ (qtail->ino, brack->ino)\n \t  && qtail->dev == brack->dev)\n-\tbrack = remove_dup_dir (pfile, qtail);\n+\tbrack = remove_dup_dir (pfile, qtail, &quote);\n     }\n   else\n     quote = brack;"}, {"sha": "71f0d870f4897e67c44efab5c28d20b1345ff652", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=48209ce53afe03d4d6fc5a28d70435a9fcca9f8a", "patch": "@@ -823,11 +823,22 @@ version of GCC in use.\n \n You can add to this list with the @option{-I@var{dir}} command line\n option.  All the directories named by @option{-I} are searched, in\n-left-to-right order, @emph{before} the default directories.  You can\n-also prevent GCC from searching any of the default directories with the\n-@option{-nostdinc} option.  This is useful when you are compiling an\n+left-to-right order, @emph{before} the default directories.  The only\n+exception is when @file{dir} is already searched by default.  In\n+this case, the option is ignored and the search order for system\n+directories remains unchanged.\n+\n+Duplicate directories are removed from the quote and bracket search\n+chains before the two chains are merged to make the final search chain.\n+Thus, it is possible for a directory to occur twice in the final search\n+chain if it was specified in both the quote and bracket chains.\n+\n+You can prevent GCC from searching any of the default directories with\n+the @option{-nostdinc} option.  This is useful when you are compiling an\n operating system kernel or some other program that does not use the\n standard C library facilities, or the standard C library itself.\n+@option{-I} options are not ignored as described above when\n+@option{-nostdinc} is in effect.\n \n GCC looks for headers requested with @code{@w{#include \"@var{file}\"}}\n first in the directory containing the current file, then in the same\n@@ -836,12 +847,6 @@ For example, if @file{/usr/include/sys/stat.h} contains\n @code{@w{#include \"types.h\"}}, GCC looks for @file{types.h} first in\n @file{/usr/include/sys}, then in its usual search path.\n \n-If you name a search directory with @option{-I@var{dir}} that is also a\n-system include directory, the @option{-I} wins; the directory will be\n-searched according to the @option{-I} ordering, and it will not be\n-treated as a system include directory. GCC will warn you when a system\n-include directory is hidden in this way.\n-\n @samp{#line} (@pxref{Line Control}) does not change GCC's idea of the\n directory containing the current file.\n \n@@ -1074,8 +1079,8 @@ found in that directory will be considered system headers.\n All directories named by @option{-isystem} are searched @emph{after} all\n directories named by @option{-I}, no matter what their order was on the\n command line.  If the same directory is named by both @option{-I} and\n-@option{-isystem}, @option{-I} wins; it is as if the @option{-isystem} option\n-had never been specified at all. GCC warns you when this happens.\n+@option{-isystem}, the @option{-I} option is ignored.  GCC provides an\n+informative message when this occurs if @option{-v} is used.\n \n @findex #pragma GCC system_header\n There is also a directive, @code{@w{#pragma GCC system_header}}, which\n@@ -1817,9 +1822,7 @@ conformance to the C Standard.  CPP follows the host convention when\n processing system header files, but when processing user files\n @code{__STDC__} is always 1.  This has been reported to cause problems;\n for instance, some versions of Solaris provide X Windows headers that\n-expect @code{__STDC__} to be either undefined or 1.  You may be able to\n-work around this sort of problem by using an @option{-I} option to\n-cancel treatment of those headers as system headers.  @xref{Invocation}.\n+expect @code{__STDC__} to be either undefined or 1.  @xref{Invocation}.\n \n @item __STDC_VERSION__\n This macro expands to the C Standard's version number, a long integer"}, {"sha": "e2265eb9bd6bd17dc72bd1b9a0d1a8e82b96c456", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=48209ce53afe03d4d6fc5a28d70435a9fcca9f8a", "patch": "@@ -51,16 +51,14 @@ for header files.\n @xref{Search Path}.\n @end ifset\n Directories named by @option{-I} are searched before the standard\n-system include directories.\n-\n-It is dangerous to specify a standard system include directory in an\n-@option{-I} option.  This defeats the special treatment of system\n-headers\n+system include directories.  If the directory @var{dir} is a standard\n+system include directory, the option is ignored to ensure that the\n+default search order for system directories and the special treatment\n+of system headers are not defeated\n @ifset cppmanual\n (@pxref{System Headers})\n @end ifset\n-.  It can also defeat the repairs to buggy system headers which GCC\n-makes when it is installed.\n+.\n \n @item -o @var{file}\n @opindex o"}, {"sha": "9e2d6296f428a2a31557b83b57c2c6d2828b4007", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=48209ce53afe03d4d6fc5a28d70435a9fcca9f8a", "patch": "@@ -467,6 +467,43 @@ any in that directory---are not part of GCC@.  They are part of other\n programs---perhaps many others.  (GCC installs its own header files in\n another directory which is based on the @option{--prefix} value.)\n \n+Both the local-prefix include directory and the GCC-prefix include\n+directory are part of GCC's \"system include\" directories.  Although these\n+two directories are not fixed, they need to be searched in the proper\n+order for the correct processing of the include_next directive.  The\n+local-prefix include directory is searched before the GCC-prefix\n+include directory.  Another characteristic of system include directories\n+is that pedantic warnings are turned off for headers in these directories.\n+\n+Some autoconf macros add @option{-I @var{directory}} options to the\n+compiler command line, to ensure that directories containing installed\n+packages' headers are searched.  When @var{directory} is one of GCC's\n+system include directories, GCC will ignore the option so that system\n+directories continue to be processed in the correct order.  This\n+may result in a search order different from what was specified but the\n+directory will still be searched.\n+\n+GCC automatically searches for ordinary libraries using\n+@env{GCC_EXEC_PREFIX}.  Thus, when the same installation prefix is\n+used for both GCC and packages, GCC will automatically search for\n+both headers and libraries.  This provides a configuration that is\n+easy to use.  GCC behaves in a manner similar to that when it is\n+installed as a system compiler in @file{/usr}.\n+\n+Sites that need to install multiple versions of GCC may not want to\n+use the above simple configuration.  It is possible to use the\n+@option{--program-prefix}, @option{--program-suffix} and\n+@option{--program-transform-name} options to install multiple versions\n+into a single directory, but it may be simpler to use different prefixes\n+and the @option{--with-local-prefix} option to specify the location of the\n+site-specific files for each version.  It will then be necessary for\n+users to specify explicitly the location of local site libraries\n+(e.g., with @env{LIBRARY_PATH}).\n+\n+The same value can be used for both @option{--with-local-prefix} and\n+@option{--prefix} provided it is not @file{/usr}.  This can be used\n+to avoid the default search of @file{/usr/local/include}.\n+\n @strong{Do not} specify @file{/usr} as the @option{--with-local-prefix}!\n The directory you use for @option{--with-local-prefix} @strong{must not}\n contain any of the system's standard header files.  If it did contain"}, {"sha": "d2fc0f74d0e7095ff7c2bdb7b3b84e12155397ea", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48209ce53afe03d4d6fc5a28d70435a9fcca9f8a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=48209ce53afe03d4d6fc5a28d70435a9fcca9f8a", "patch": "@@ -4281,15 +4281,13 @@ one @option{-I} option, the directories are scanned in left-to-right\n order; the standard system directories come after.\n \n If a standard system include directory, or a directory specified with\n-@option{-isystem}, is also specified with @option{-I}, it will be\n-searched only in the position requested by @option{-I}.  Also, it will\n-not be considered a system include directory.  If that directory really\n-does contain system headers, there is a good chance that they will\n-break.  For instance, if GCC's installation procedure edited the headers\n-in @file{/usr/include} to fix bugs, @samp{-I/usr/include} will cause the\n-original, buggy headers to be found instead of the corrected ones.  GCC\n-will issue a warning when a system include directory is hidden in this\n-way.\n+@option{-isystem}, is also specified with @option{-I}, the @option{-I}\n+option will be ignored.  The directory will still be searched but as a\n+system directory at its normal position in the system include chain.\n+This is to ensure that GCC's procedure to fix buggy system headers and\n+the ordering for the include_next directive are not inadvertantly changed.\n+If you really need to change the search order for system directories,\n+use the @option{-nostdinc} and/or @option{-isystem} options.\n \n @item -I-\n @opindex I-"}]}