{"sha": "cb18fd07f2962779c2651adc970541210d4ad98f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IxOGZkMDdmMjk2Mjc3OWMyNjUxYWRjOTcwNTQxMjEwZDRhZDk4Zg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-08-18T18:52:43Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-08-18T18:52:43Z"}, "message": "Spelling suggestions for misspelled preprocessor directives\n\nThis patch allows the preprocessor to offer suggestions for misspelled\ndirectives, taking us from e.g.:\n\ntest.c:5:2: error: invalid preprocessing directive #endfi\n #endfi\n  ^~~~~\n\nto:\n\ntest.c:5:2: error: invalid preprocessing directive #endfi; did you mean #endif?\n #endfi\n  ^~~~~\n  endif\n\ngcc/c-family/ChangeLog:\n\t* c-common.c: Include \"spellcheck.h\".\n\t(cb_get_suggestion): New function.\n\t* c-common.h (cb_get_suggestion): New decl.\n\t* c-lex.c (init_c_lex): Initialize cb->get_suggestion to\n\tcb_get_suggestion.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/cpp/misspelled-directive-1.c: New testcase.\n\t* gcc.dg/cpp/misspelled-directive-2.c: New testcase.\n\nlibcpp/ChangeLog:\n\t* directives.c (directive_names): New array.\n\t(_cpp_handle_directive): Offer spelling suggestions for misspelled\n\tdirectives.\n\t* errors.c (cpp_diagnostic_at_richloc): New function.\n\t(cpp_error_at_richloc): New function.\n\t* include/cpplib.h (struct cpp_callbacks): Add field\n\t\"get_suggestion\".\n\t(cpp_error_at_richloc): New decl.\n\nFrom-SVN: r239585", "tree": {"sha": "b325fd07e1c9c2f08551326602a989303e28ddfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b325fd07e1c9c2f08551326602a989303e28ddfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb18fd07f2962779c2651adc970541210d4ad98f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb18fd07f2962779c2651adc970541210d4ad98f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb18fd07f2962779c2651adc970541210d4ad98f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb18fd07f2962779c2651adc970541210d4ad98f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a76989dc7c9236214856db196da88a739f0e7baa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a76989dc7c9236214856db196da88a739f0e7baa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a76989dc7c9236214856db196da88a739f0e7baa"}], "stats": {"total": 165, "additions": 163, "deletions": 2}, "files": [{"sha": "1ed5268a91fa70a11c235e7d3fbd88392e2b0921", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=cb18fd07f2962779c2651adc970541210d4ad98f", "patch": "@@ -1,3 +1,11 @@\n+2016-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-common.c: Include \"spellcheck.h\".\n+\t(cb_get_suggestion): New function.\n+\t* c-common.h (cb_get_suggestion): New decl.\n+\t* c-lex.c (init_c_lex): Initialize cb->get_suggestion to\n+\tcb_get_suggestion.\n+\n 2016-08-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/71514"}, {"sha": "9082883cb6852dc0db54ad1ab59aa9d0b8b04abd", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=cb18fd07f2962779c2651adc970541210d4ad98f", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"gimplify.h\"\n #include \"substring-locations.h\"\n+#include \"spellcheck.h\"\n \n cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \n@@ -12948,6 +12949,22 @@ cb_get_source_date_epoch (cpp_reader *pfile ATTRIBUTE_UNUSED)\n   return (time_t) epoch;\n }\n \n+/* Callback for libcpp for offering spelling suggestions for misspelled\n+   directives.  GOAL is an unrecognized string; CANDIDATES is a\n+   NULL-terminated array of candidate strings.  Return the closest\n+   match to GOAL within CANDIDATES, or NULL if none are good\n+   suggestions.  */\n+\n+const char *\n+cb_get_suggestion (cpp_reader *, const char *goal,\n+\t\t   const char *const *candidates)\n+{\n+  best_match<const char *, const char *> bm (goal);\n+  while (*candidates)\n+    bm.consider (*candidates++);\n+  return bm.get_best_meaningful_candidate ();\n+}\n+\n /* Check and possibly warn if two declarations have contradictory\n    attributes, such as always_inline vs. noinline.  */\n "}, {"sha": "31320bf7c877a028f30c8934c8c71808e7a9cb7d", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=cb18fd07f2962779c2651adc970541210d4ad98f", "patch": "@@ -1110,6 +1110,11 @@ extern time_t cb_get_source_date_epoch (cpp_reader *pfile);\n    __TIME__ can store.  */\n #define MAX_SOURCE_DATE_EPOCH HOST_WIDE_INT_C (253402300799)\n \n+/* Callback for libcpp for offering spelling suggestions for misspelled\n+   directives.  */\n+extern const char *cb_get_suggestion (cpp_reader *, const char *,\n+\t\t\t\t      const char *const *);\n+\n extern GTY(()) string_concat_db *g_string_concat_db;\n \n /* libcpp can calculate location information about a range of characters"}, {"sha": "c904ee67fc0b8eae333b4d0d513baf217f3777d2", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=cb18fd07f2962779c2651adc970541210d4ad98f", "patch": "@@ -81,6 +81,7 @@ init_c_lex (void)\n   cb->read_pch = c_common_read_pch;\n   cb->has_attribute = c_common_has_attribute;\n   cb->get_source_date_epoch = cb_get_source_date_epoch;\n+  cb->get_suggestion = cb_get_suggestion;\n \n   /* Set the debug callbacks if we can use them.  */\n   if ((debug_info_level == DINFO_LEVEL_VERBOSE"}, {"sha": "21e97704db664e6b7e7c7ac029a8b45b71df2cf1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb18fd07f2962779c2651adc970541210d4ad98f", "patch": "@@ -1,3 +1,8 @@\n+2016-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/cpp/misspelled-directive-1.c: New testcase.\n+\t* gcc.dg/cpp/misspelled-directive-2.c: New testcase.\n+\n 2016-08-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/71514"}, {"sha": "f79670a17cbb56bd6d52afdf09729ff3f921bee9", "filename": "gcc/testsuite/gcc.dg/cpp/misspelled-directive-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmisspelled-directive-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmisspelled-directive-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmisspelled-directive-1.c?ref=cb18fd07f2962779c2651adc970541210d4ad98f", "patch": "@@ -0,0 +1,12 @@\n+#ifndef SOME_GUARD /* { dg-error \"unterminated\" } */\n+\n+#if 1\n+/* Typo here: \"endfi\" should have been \"endif\".  */\n+#endfi /* { dg-error \"invalid preprocessing directive #endfi; did you mean #endif?\" } */\n+\n+int make_non_empty;\n+\n+/* Another transposition typo:  */\n+#deifne FOO /* { dg-error \"invalid preprocessing directive #deifne; did you mean #define?\" } */ \n+\n+#endif /* #ifndef SOME_GUARD */"}, {"sha": "7ec5dee9024e3e76b48b8ea092bbd10cba7fff76", "filename": "gcc/testsuite/gcc.dg/cpp/misspelled-directive-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmisspelled-directive-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb18fd07f2962779c2651adc970541210d4ad98f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmisspelled-directive-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmisspelled-directive-2.c?ref=cb18fd07f2962779c2651adc970541210d4ad98f", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+#endfi /* { dg-error \"invalid preprocessing directive #endfi; did you mean #endif?\" } */\n+\n+/* Verify that we offer fix-it hints.  */\n+/* { dg-begin-multiline-output \"\" }\n+ #endfi\n+  ^~~~~\n+  endif\n+  { dg-end-multiline-output \"\" } */\n+\n+/* Test coverage for the case of an unrecognized directive where no suggestion\n+   is offered.  */\n+\n+#this_does_not_match_anything /* { dg-error \"invalid preprocessing directive #this_does_not_match_anything\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ #this_does_not_match_anything\n+  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+  { dg-end-multiline-output \"\" } */\n+\n+int make_non_empty;"}, {"sha": "5d4a09450e0fe55b1718c9cb314fdb40383b1b8f", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb18fd07f2962779c2651adc970541210d4ad98f/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb18fd07f2962779c2651adc970541210d4ad98f/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=cb18fd07f2962779c2651adc970541210d4ad98f", "patch": "@@ -1,3 +1,14 @@\n+2016-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* directives.c (directive_names): New array.\n+\t(_cpp_handle_directive): Offer spelling suggestions for misspelled\n+\tdirectives.\n+\t* errors.c (cpp_diagnostic_at_richloc): New function.\n+\t(cpp_error_at_richloc): New function.\n+\t* include/cpplib.h (struct cpp_callbacks): Add field\n+\t\"get_suggestion\".\n+\t(cpp_error_at_richloc): New decl.\n+\n 2016-08-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/7652"}, {"sha": "c0006a49cc489dcc5a39a3340d82f1b0901d1168", "filename": "libcpp/directives.c", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb18fd07f2962779c2651adc970541210d4ad98f/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb18fd07f2962779c2651adc970541210d4ad98f/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=cb18fd07f2962779c2651adc970541210d4ad98f", "patch": "@@ -188,6 +188,16 @@ static const directive dtable[] =\n DIRECTIVE_TABLE\n };\n #undef D\n+\n+/* A NULL-terminated array of directive names for use\n+   when suggesting corrections for misspelled directives.  */\n+#define D(name, t, origin, flags) #name,\n+static const char * const directive_names[] = {\n+DIRECTIVE_TABLE\n+  NULL\n+};\n+#undef D\n+\n #undef DIRECTIVE_TABLE\n \n /* Wrapper struct directive for linemarkers.\n@@ -498,8 +508,35 @@ _cpp_handle_directive (cpp_reader *pfile, int indented)\n       if (CPP_OPTION (pfile, lang) == CLK_ASM)\n \tskip = 0;\n       else if (!pfile->state.skipping)\n-\tcpp_error (pfile, CPP_DL_ERROR, \"invalid preprocessing directive #%s\",\n-\t\t   cpp_token_as_text (pfile, dname));\n+\t{\n+\t  const char *unrecognized\n+\t    = (const char *)cpp_token_as_text (pfile, dname);\n+\t  const char *hint = NULL;\n+\n+\t  /* Call back into gcc to get a spelling suggestion.  Ideally\n+\t     we'd just use best_match from gcc/spellcheck.h (and filter\n+\t     out the uncommon directives), but that requires moving it\n+\t     to a support library.  */\n+\t  if (pfile->cb.get_suggestion)\n+\t    hint = pfile->cb.get_suggestion (pfile, unrecognized,\n+\t\t\t\t\t     directive_names);\n+\n+\t  if (hint)\n+\t    {\n+\t      rich_location richloc (pfile->line_table, dname->src_loc);\n+\t      source_range misspelled_token_range\n+\t\t= get_range_from_loc (pfile->line_table, dname->src_loc);\n+\t      richloc.add_fixit_replace (misspelled_token_range, hint);\n+\t      cpp_error_at_richloc (pfile, CPP_DL_ERROR, &richloc,\n+\t\t\t\t    \"invalid preprocessing directive #%s;\"\n+\t\t\t\t    \" did you mean #%s?\",\n+\t\t\t\t    unrecognized, hint);\n+\t    }\n+\t  else\n+\t    cpp_error (pfile, CPP_DL_ERROR,\n+\t\t       \"invalid preprocessing directive #%s\",\n+\t\t       unrecognized);\n+\t}\n     }\n \n   pfile->directive = dir;"}, {"sha": "3b0a0b414612aa2cd0ae92a0b297b7009263b385", "filename": "libcpp/errors.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb18fd07f2962779c2651adc970541210d4ad98f/libcpp%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb18fd07f2962779c2651adc970541210d4ad98f/libcpp%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ferrors.c?ref=cb18fd07f2962779c2651adc970541210d4ad98f", "patch": "@@ -29,6 +29,23 @@ along with this program; see the file COPYING3.  If not see\n \n /* Print a diagnostic at the given location.  */\n \n+ATTRIBUTE_FPTR_PRINTF(5,0)\n+static bool\n+cpp_diagnostic_at_richloc (cpp_reader * pfile, int level, int reason,\n+\t\t\t   rich_location *richloc,\n+\t\t\t   const char *msgid, va_list *ap)\n+{\n+  bool ret;\n+\n+  if (!pfile->cb.error)\n+    abort ();\n+  ret = pfile->cb.error (pfile, level, reason, richloc, _(msgid), ap);\n+\n+  return ret;\n+}\n+\n+/* Print a diagnostic at the given location.  */\n+\n ATTRIBUTE_FPTR_PRINTF(5,0)\n static bool\n cpp_diagnostic_at (cpp_reader * pfile, int level, int reason,\n@@ -255,6 +272,25 @@ cpp_error_at (cpp_reader * pfile, int level, source_location src_loc,\n   return ret;\n }\n \n+/* As cpp_error, but use RICHLOC as the location of the error, without\n+   a column override.  */\n+\n+bool\n+cpp_error_at_richloc (cpp_reader * pfile, int level, rich_location *richloc,\n+\t\t      const char *msgid, ...)\n+{\n+  va_list ap;\n+  bool ret;\n+\n+  va_start (ap, msgid);\n+\n+  ret = cpp_diagnostic_at_richloc (pfile, level, CPP_W_NONE, richloc,\n+\t\t\t\t   msgid, &ap);\n+\n+  va_end (ap);\n+  return ret;\n+}\n+\n /* Print a warning or error, depending on the value of LEVEL.  Include\n    information from errno.  */\n "}, {"sha": "a497811eec07b8fc0dcc3b807a62ba110f006268", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb18fd07f2962779c2651adc970541210d4ad98f/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb18fd07f2962779c2651adc970541210d4ad98f/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=cb18fd07f2962779c2651adc970541210d4ad98f", "patch": "@@ -597,6 +597,9 @@ struct cpp_callbacks\n \n   /* Callback to parse SOURCE_DATE_EPOCH from environment.  */\n   time_t (*get_source_date_epoch) (cpp_reader *);\n+\n+  /* Callback for providing suggestions for misspelled directives.  */\n+  const char *(*get_suggestion) (cpp_reader *, const char *, const char *const *);\n };\n \n #ifdef VMS\n@@ -1066,6 +1069,11 @@ extern bool cpp_error_at (cpp_reader * pfile, int level,\n \t\t\t  source_location src_loc, const char *msgid, ...)\n   ATTRIBUTE_PRINTF_4;\n \n+extern bool cpp_error_at_richloc (cpp_reader * pfile, int level,\n+\t\t\t\t  rich_location *richloc, const char *msgid,\n+\t\t\t\t  ...)\n+  ATTRIBUTE_PRINTF_4;\n+\n /* In lex.c */\n extern int cpp_ideq (const cpp_token *, const char *);\n extern void cpp_output_line (cpp_reader *, FILE *);"}]}