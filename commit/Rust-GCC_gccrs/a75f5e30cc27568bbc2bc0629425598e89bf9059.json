{"sha": "a75f5e30cc27568bbc2bc0629425598e89bf9059", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc1ZjVlMzBjYzI3NTY4YmJjMmJjMDYyOTQyNTU5OGU4OWJmOTA1OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-03-03T09:12:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-03-03T09:12:53Z"}, "message": "re PR tree-optimization/55936 (Missed VRP optimization)\n\n2016-03-03  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/55936\n\t* tree-vrp.c (compare_name_with_value): Add use_equiv_p\n\tparameter and guard unsafe equivalence use.\n\t(vrp_evaluate_conditional_warnv_with_ops): Always use\n\tsafe equivalences but not via the quadratic compare_names\n\thelper.\n\n\t* gcc.dg/tree-ssa/vrp06.c: Remove XFAIL.\n\nFrom-SVN: r233928", "tree": {"sha": "05f432bea9dada8406010e5ee06973c6c266c6bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05f432bea9dada8406010e5ee06973c6c266c6bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a75f5e30cc27568bbc2bc0629425598e89bf9059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75f5e30cc27568bbc2bc0629425598e89bf9059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a75f5e30cc27568bbc2bc0629425598e89bf9059", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75f5e30cc27568bbc2bc0629425598e89bf9059/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a67ef4c4de7bf55d3ef3c7bc61a9480e0d213bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a67ef4c4de7bf55d3ef3c7bc61a9480e0d213bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a67ef4c4de7bf55d3ef3c7bc61a9480e0d213bd"}], "stats": {"total": 56, "additions": 36, "deletions": 20}, "files": [{"sha": "97d3bb6144e8cfd89c72a7e72d649095d7e6e0f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75f5e30cc27568bbc2bc0629425598e89bf9059/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75f5e30cc27568bbc2bc0629425598e89bf9059/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a75f5e30cc27568bbc2bc0629425598e89bf9059", "patch": "@@ -1,3 +1,12 @@\n+2016-03-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55936\n+\t* tree-vrp.c (compare_name_with_value): Add use_equiv_p\n+\tparameter and guard unsafe equivalence use.\n+\t(vrp_evaluate_conditional_warnv_with_ops): Always use\n+\tsafe equivalences but not via the quadratic compare_names\n+\thelper.\n+\n 2016-03-03  Michael Collison  <michael.collison@linaro.org>\n \n \tPR target/70014"}, {"sha": "1c6e170ce0e85050df3608a241cba9e15d1cb527", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75f5e30cc27568bbc2bc0629425598e89bf9059/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75f5e30cc27568bbc2bc0629425598e89bf9059/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a75f5e30cc27568bbc2bc0629425598e89bf9059", "patch": "@@ -1,3 +1,8 @@\n+2016-03-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55936\n+\t* gcc.dg/tree-ssa/vrp06.c: Remove XFAIL.\n+\n 2016-03-02  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/69942"}, {"sha": "cdad534ef04c6854a8edef8f253893d08ec8e843", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp06.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75f5e30cc27568bbc2bc0629425598e89bf9059/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp06.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75f5e30cc27568bbc2bc0629425598e89bf9059/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp06.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp06.c?ref=a75f5e30cc27568bbc2bc0629425598e89bf9059", "patch": "@@ -30,4 +30,4 @@ foo (int i, int j, int a)\n \n /* { dg-final { scan-tree-dump-times \"Folding predicate i_\\[0-9\\]+.*0 to 0\" 1 \"vrp1\" } } */\n /* { dg-final { scan-tree-dump-times \"Folding predicate j_\\[0-9\\]+.*0 to 1\" 1 \"vrp1\" } } */\n-/* { dg-final { scan-tree-dump-times \"Folding predicate i_\\[0-9]+.*j_\\[0-9\\]+.* to 0\" 1 \"vrp1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"Folding predicate i_\\[0-9]+.*j_\\[0-9\\]+.* to 0\" 1 \"vrp1\" } } */"}, {"sha": "b5654c536f9855a4a305cd7b5d3ce309d27e2724", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75f5e30cc27568bbc2bc0629425598e89bf9059/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75f5e30cc27568bbc2bc0629425598e89bf9059/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a75f5e30cc27568bbc2bc0629425598e89bf9059", "patch": "@@ -7161,7 +7161,7 @@ get_vr_for_comparison (int i)\n \n static tree\n compare_name_with_value (enum tree_code comp, tree var, tree val,\n-\t\t\t bool *strict_overflow_p)\n+\t\t\t bool *strict_overflow_p, bool use_equiv_p)\n {\n   bitmap_iterator bi;\n   unsigned i;\n@@ -7196,6 +7196,11 @@ compare_name_with_value (enum tree_code comp, tree var, tree val,\n \n   EXECUTE_IF_SET_IN_BITMAP (e, 0, i, bi)\n     {\n+      if (! use_equiv_p\n+\t  && ! SSA_NAME_IS_DEFAULT_DEF (ssa_name (i))\n+\t  && prop_simulate_again_p (SSA_NAME_DEF_STMT (ssa_name (i))))\n+\tcontinue;\n+\n       equiv_vr = get_vr_for_comparison (i);\n       sop = false;\n       t = compare_range_with_value (comp, &equiv_vr, val, &sop);\n@@ -7381,24 +7386,21 @@ vrp_evaluate_conditional_warnv_with_ops (enum tree_code code, tree op0,\n       && !POINTER_TYPE_P (TREE_TYPE (op0)))\n     return NULL_TREE;\n \n-  if (use_equiv_p)\n-    {\n-      if (only_ranges\n-          && (ret = vrp_evaluate_conditional_warnv_with_ops_using_ranges\n-\t              (code, op0, op1, strict_overflow_p)))\n-\treturn ret;\n-      *only_ranges = false;\n-      if (TREE_CODE (op0) == SSA_NAME && TREE_CODE (op1) == SSA_NAME)\n-\treturn compare_names (code, op0, op1, strict_overflow_p);\n-      else if (TREE_CODE (op0) == SSA_NAME)\n-\treturn compare_name_with_value (code, op0, op1, strict_overflow_p);\n-      else if (TREE_CODE (op1) == SSA_NAME)\n-\treturn (compare_name_with_value\n-\t\t(swap_tree_comparison (code), op1, op0, strict_overflow_p));\n-    }\n-  else\n-    return vrp_evaluate_conditional_warnv_with_ops_using_ranges (code, op0, op1,\n-\t\t\t\t\t\t\t\t strict_overflow_p);\n+  if ((ret = vrp_evaluate_conditional_warnv_with_ops_using_ranges\n+\t       (code, op0, op1, strict_overflow_p)))\n+    return ret;\n+  if (only_ranges)\n+    *only_ranges = false;\n+  /* Do not use compare_names during propagation, it's quadratic.  */\n+  if (TREE_CODE (op0) == SSA_NAME && TREE_CODE (op1) == SSA_NAME\n+      && use_equiv_p)\n+    return compare_names (code, op0, op1, strict_overflow_p);\n+  else if (TREE_CODE (op0) == SSA_NAME)\n+    return compare_name_with_value (code, op0, op1,\n+\t\t\t\t    strict_overflow_p, use_equiv_p);\n+  else if (TREE_CODE (op1) == SSA_NAME)\n+    return compare_name_with_value (swap_tree_comparison (code), op1, op0,\n+\t\t\t\t    strict_overflow_p, use_equiv_p);\n   return NULL_TREE;\n }\n "}]}