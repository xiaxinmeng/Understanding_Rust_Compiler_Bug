{"sha": "c11048a764d722894ee432466282cad8ae11b312", "node_id": "C_kwDOANBUbNoAKGMxMTA0OGE3NjRkNzIyODk0ZWU0MzI0NjYyODJjYWQ4YWUxMWIzMTI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-21T21:08:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-21T21:08:32Z"}, "message": "Merge #880\n\n880: Covariant types should respect the get_name r=philberty a=philberty\n\nThis changes the Reference and Pointer types to respect the get_name\r\nconvention this means the canonical name for functions with their respective\r\nsubstitutions string is properly formatted.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "f118e491df87044a5cb2862ee1067149bd8001d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f118e491df87044a5cb2862ee1067149bd8001d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c11048a764d722894ee432466282cad8ae11b312", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh6yDQCRBK7hj4Ov3rIwAA5psIAFKQarkhYktZWbiQZ6Si9Bru\n+lNNWNDHH0Fdv/XJ7PVp/5qlaY8CW9+qBZ5m1FisOyxkLSvif6ncQyH3IR68GYFz\nzM2JDruC64NhZPSA9o7DkYn+xj3BLaaBvGa38zaWAKdKmdlLcBP17whS9o53YBhd\n5xHN7uOMLgEWJsCUM6a0G6ni5Be0kyKeN7JPej8J44sASJ456QS+yGbsaU+8UoeU\nQs6oUM188beN9fuFCZqSLR1unSYUOEFkkwCa8tJ62Oguc9O84xVF0INvdn01YC2I\nHhwHNjlpOtPsZhpAld5DKkVsXbJo2PB3ZCqng5+qUkcMawZ4o1BHtIxl5gR5zb0=\n=X7IP\n-----END PGP SIGNATURE-----\n", "payload": "tree f118e491df87044a5cb2862ee1067149bd8001d0\nparent d956be99334b6ce2fa9f2b2942b65937ede7146d\nparent 0f9257baae824948b48e8bcdbebbd7c58f296ea9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1642799312 +0000\ncommitter GitHub <noreply@github.com> 1642799312 +0000\n\nMerge #880\n\n880: Covariant types should respect the get_name r=philberty a=philberty\n\nThis changes the Reference and Pointer types to respect the get_name\r\nconvention this means the canonical name for functions with their respective\r\nsubstitutions string is properly formatted.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11048a764d722894ee432466282cad8ae11b312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c11048a764d722894ee432466282cad8ae11b312", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11048a764d722894ee432466282cad8ae11b312/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d956be99334b6ce2fa9f2b2942b65937ede7146d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d956be99334b6ce2fa9f2b2942b65937ede7146d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d956be99334b6ce2fa9f2b2942b65937ede7146d"}, {"sha": "0f9257baae824948b48e8bcdbebbd7c58f296ea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9257baae824948b48e8bcdbebbd7c58f296ea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9257baae824948b48e8bcdbebbd7c58f296ea9"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "f2c250fbe3960f04a66168ca7e4d713621ad789f", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11048a764d722894ee432466282cad8ae11b312/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11048a764d722894ee432466282cad8ae11b312/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=c11048a764d722894ee432466282cad8ae11b312", "patch": "@@ -1930,7 +1930,10 @@ class ReferenceType : public BaseType\n \n   std::string as_string () const override;\n \n-  std::string get_name () const override final { return as_string (); }\n+  std::string get_name () const override final\n+  {\n+    return \"&\" + get_base ()->get_name ();\n+  }\n \n   BaseType *unify (BaseType *other) override;\n   bool can_eq (const BaseType *other, bool emit_errors,\n@@ -1978,7 +1981,10 @@ class PointerType : public BaseType\n \n   std::string as_string () const override;\n \n-  std::string get_name () const override final { return as_string (); }\n+  std::string get_name () const override final\n+  {\n+    return \"*\" + get_base ()->get_name ();\n+  }\n \n   BaseType *unify (BaseType *other) override;\n   bool can_eq (const BaseType *other, bool emit_errors,"}]}