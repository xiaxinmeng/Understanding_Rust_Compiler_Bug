{"sha": "63ffc486171b8fb7402fd345c2544318a53111aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNmZmM0ODYxNzFiOGZiNzQwMmZkMzQ1YzI1NDQzMThhNTMxMTFhYQ==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@ira.uka.de", "date": "2009-10-02T07:47:48Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2009-10-02T07:47:48Z"}, "message": "base.h: Take integer types from <tr1/cstdint>.\n\n2009-10-02  Johannes Singler  <singler@ira.uka.de>\n\n        * include/parallel/base.h: Take integer types from <tr1/cstdint>.\n        * include/parallel/compatibility.h: Likewise.\n        * include/parallel/multiseq_selection.h: Likewise.\n        * include/parallel/random_shuffle.h: Likewise.\n        * include/parallel/random_number.h: Likewise;\n        use numeric_limits<>::digit instead of sizeof()*8.\n        * include/parallel/types.h: Likewise.\n        * doc/html/manual/bk01pt12ch31s03.html:\n        Document dependency on stdint.h.\n\nFrom-SVN: r152396", "tree": {"sha": "f960a055d1cff9e78b6714ae7eb260dbedd79e90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f960a055d1cff9e78b6714ae7eb260dbedd79e90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63ffc486171b8fb7402fd345c2544318a53111aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ffc486171b8fb7402fd345c2544318a53111aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63ffc486171b8fb7402fd345c2544318a53111aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ffc486171b8fb7402fd345c2544318a53111aa/comments", "author": null, "committer": null, "parents": [{"sha": "e6d92cecfb2fa189ee958ea4574ffd8a1109a022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d92cecfb2fa189ee958ea4574ffd8a1109a022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d92cecfb2fa189ee958ea4574ffd8a1109a022"}], "stats": {"total": 161, "additions": 82, "deletions": 79}, "files": [{"sha": "860b20002141d3ab2addf7eb69c36252efaed7d9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=63ffc486171b8fb7402fd345c2544318a53111aa", "patch": "@@ -1,3 +1,15 @@\n+2009-10-02  Johannes Singler  <singler@ira.uka.de>\n+\n+        * include/parallel/base.h: Take integer types from <tr1/cstdint>.\n+        * include/parallel/compatibility.h: Likewise.\n+        * include/parallel/multiseq_selection.h: Likewise.\n+        * include/parallel/random_shuffle.h: Likewise.\n+        * include/parallel/random_number.h: Likewise;\n+        use numeric_limits<>::digit instead of sizeof()*8.\n+        * include/parallel/types.h: Likewise.\n+        * doc/html/manual/bk01pt12ch31s03.html:\n+        Document dependency on stdint.h.\n+\n 2009-10-01  Phil Muldoon <pmuldoon@redhat.com>\n \n \t* python/libstdcxx/v6/printers.py (StdListPrinter):"}, {"sha": "cdd2f3df46acfbc8b291361f88121de27857313d", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch31s03.html", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s03.html?ref=63ffc486171b8fb7402fd345c2544318a53111aa", "patch": "@@ -17,7 +17,11 @@\n   as <code class=\"literal\">-march=i686</code>,\n   <code class=\"literal\">-march=native</code> or <code class=\"literal\">-mcpu=v9</code>. See\n   the GCC manual for more information.\n-</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"parallel_mode.using.parallel_mode\"></a>Using Parallel Mode</h3></div></div></div><p>\n+</p>\n+<p>\n+  Also, the parallel mode requires platform support for stdint.h.\n+</p>\n+</div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"parallel_mode.using.parallel_mode\"></a>Using Parallel Mode</h3></div></div></div><p>\n   To use the libstdc++ parallel mode, compile your application with\n   the prerequisite flags as detailed above, and in addition\n   add <code class=\"constant\">-D_GLIBCXX_PARALLEL</code>. This will convert all"}, {"sha": "6bdcedc206a276125984ec33c81b043a1e6b783f", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=63ffc486171b8fb7402fd345c2544318a53111aa", "patch": "@@ -392,8 +392,8 @@ template<typename _Tp, typename _DifferenceTp>\n   public:\n     typedef _DifferenceTp _DifferenceType;\n \n-    // Better case down to uint64, than up to _DifferenceTp.\n-    typedef _PseudoSequenceIterator<_Tp, uint64> iterator;\n+    // Better cast down to uint64_t, than up to _DifferenceTp.\n+    typedef _PseudoSequenceIterator<_Tp, uint64_t> iterator;\n \n     /** @brief Constructor.\n       *  @param _M_val Element of the sequence."}, {"sha": "c4f691e5b77d63771d94fc28ee3177d4fb01e3f6", "filename": "libstdc++-v3/include/parallel/compatibility.h", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompatibility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompatibility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompatibility.h?ref=63ffc486171b8fb7402fd345c2544318a53111aa", "patch": "@@ -62,7 +62,7 @@ namespace __gnu_parallel\n {\n #if defined(__ICC)\n   template<typename _MustBeInt = int>\n-  int32 __faa32(int32* __x, int32 __inc)\n+  int32_t __faa32(int32_t* __x, int32_t __inc)\n   {\n     asm volatile(\"lock xadd %0,%1\"\n                  : \"=__r\" (__inc), \"=__m\" (*__x)\n@@ -72,7 +72,7 @@ namespace __gnu_parallel\n   }\n #if defined(__x86_64)\n   template<typename _MustBeInt = int>\n-  int64 __faa64(int64* __x, int64 __inc)\n+  int64_t __faa64(int64_t* __x, int64_t __inc)\n   {\n     asm volatile(\"lock xadd %0,%1\"\n                  : \"=__r\" (__inc), \"=__m\" (*__x)\n@@ -91,8 +91,8 @@ namespace __gnu_parallel\n    *  @param __ptr Pointer to a 32-bit signed integer.\n    *  @param __addend Value to add.\n    */\n-  inline int32\n-  __fetch_and_add_32(volatile int32* __ptr, int32 __addend)\n+  inline int32_t\n+  __fetch_and_add_32(volatile int32_t* __ptr, int32_t __addend)\n   {\n #if defined(__ICC)      //x86 version\n     return _InterlockedExchangeAdd((void*)__ptr, __addend);\n@@ -104,7 +104,7 @@ namespace __gnu_parallel\n #elif defined(__GNUC__)\n     return __sync_fetch_and_add(__ptr, __addend);\n #elif defined(__SUNPRO_CC) && defined(__sparc)\n-    volatile int32 __before, __after;\n+    volatile int32_t __before, __after;\n     do\n       {\n         __before = *__ptr;\n@@ -114,7 +114,7 @@ namespace __gnu_parallel\n     return __before;\n #else   //fallback, slow\n #pragma message(\"slow __fetch_and_add_32\")\n-    int32 __res;\n+    int32_t __res;\n #pragma omp critical\n     {\n       __res = *__ptr;\n@@ -130,11 +130,11 @@ namespace __gnu_parallel\n    *  @param __ptr Pointer to a 64-bit signed integer.\n    *  @param __addend Value to add.\n    */\n-  inline int64\n-  __fetch_and_add_64(volatile int64* __ptr, int64 __addend)\n+  inline int64_t\n+  __fetch_and_add_64(volatile int64_t* __ptr, int64_t __addend)\n   {\n #if defined(__ICC) && defined(__x86_64) //x86 version\n-    return __faa64<int>((int64*)__ptr, __addend);\n+    return __faa64<int>((int64_t*)__ptr, __addend);\n #elif defined(__ECC)    //IA-64 version\n     return _InterlockedExchangeAdd64((void*)__ptr, __addend);\n #elif defined(__ICL) || defined(_MSC_VER)\n@@ -150,7 +150,7 @@ namespace __gnu_parallel\n   (defined(__i686) || defined(__pentium4) || defined(__athlon))\n     return __sync_fetch_and_add(__ptr, __addend);\n #elif defined(__SUNPRO_CC) && defined(__sparc)\n-    volatile int64 __before, __after;\n+    volatile int64_t __before, __after;\n     do\n       {\n         __before = *__ptr;\n@@ -164,7 +164,7 @@ namespace __gnu_parallel\n     //#warning \"please compile with -march=i686 or better\"\n #endif\n #pragma message(\"slow __fetch_and_add_64\")\n-    int64 __res;\n+    int64_t __res;\n #pragma omp critical\n     {\n       __res = *__ptr;\n@@ -184,10 +184,12 @@ namespace __gnu_parallel\n   inline _Tp\n   __fetch_and_add(volatile _Tp* __ptr, _Tp __addend)\n   {\n-    if (sizeof(_Tp) == sizeof(int32))\n-      return (_Tp)__fetch_and_add_32((volatile int32*) __ptr, (int32)__addend);\n-    else if (sizeof(_Tp) == sizeof(int64))\n-      return (_Tp)__fetch_and_add_64((volatile int64*) __ptr, (int64)__addend);\n+    if (sizeof(_Tp) == sizeof(int32_t))\n+      return\n+        (_Tp)__fetch_and_add_32((volatile int32_t*) __ptr, (int32_t)__addend);\n+    else if (sizeof(_Tp) == sizeof(int64_t))\n+      return\n+        (_Tp)__fetch_and_add_64((volatile int64_t*) __ptr, (int64_t)__addend);\n     else\n       _GLIBCXX_PARALLEL_ASSERT(false);\n   }\n@@ -196,10 +198,10 @@ namespace __gnu_parallel\n #if defined(__ICC)\n \n   template<typename _MustBeInt = int>\n-  inline int32\n-  __cas32(volatile int32* __ptr, int32 __old, int32 __nw)\n+  inline int32_t\n+  __cas32(volatile int32_t* __ptr, int32_t __old, int32_t __nw)\n   {\n-    int32 __before;\n+    int32_t __before;\n     __asm__ __volatile__(\"lock; cmpxchgl %1,%2\"\n                          : \"=a\"(__before)\n                          : \"q\"(__nw), \"__m\"(*(volatile long long*)(__ptr)),\n@@ -210,10 +212,10 @@ namespace __gnu_parallel\n \n #if defined(__x86_64)\n   template<typename _MustBeInt = int>\n-  inline int64\n-  __cas64(volatile int64 *__ptr, int64 __old, int64 __nw)\n+  inline int64_t\n+  __cas64(volatile int64_t *__ptr, int64_t __old, int64_t __nw)\n   {\n-    int64 __before;\n+    int64_t __before;\n     __asm__ __volatile__(\"lock; cmpxchgq %1,%2\"\n                          : \"=a\"(__before)\n                          : \"q\"(__nw), \"__m\"(*(volatile long long*)(__ptr)),\n@@ -234,8 +236,8 @@ namespace __gnu_parallel\n    *  @param __replacement Replacement value.\n    */\n   inline bool\n-  __compare_and_swap_32(volatile int32* __ptr, int32 __comparand,\n-                        int32 __replacement)\n+  __compare_and_swap_32(volatile int32_t* __ptr, int32_t __comparand,\n+                        int32_t __replacement)\n   {\n #if defined(__ICC)      //x86 version\n     return _InterlockedCompareExchange((void*)__ptr, __replacement,\n@@ -277,8 +279,8 @@ namespace __gnu_parallel\n    *  @param __replacement Replacement value.\n    */\n   inline bool\n-  __compare_and_swap_64(volatile int64* __ptr, int64 __comparand,\n-                        int64 __replacement)\n+  __compare_and_swap_64(volatile int64_t* __ptr, int64_t __comparand,\n+                        int64_t __replacement)\n   {\n #if defined(__ICC) && defined(__x86_64) //x86 version\n     return __cas64<int>(__ptr, __comparand, __replacement) == __comparand;\n@@ -332,12 +334,14 @@ namespace __gnu_parallel\n   inline bool\n   __compare_and_swap(volatile _Tp* __ptr, _Tp __comparand, _Tp __replacement)\n   {\n-    if (sizeof(_Tp) == sizeof(int32))\n-      return __compare_and_swap_32((volatile int32*) __ptr, (int32)__comparand,\n-                                   (int32)__replacement);\n-    else if (sizeof(_Tp) == sizeof(int64))\n-      return __compare_and_swap_64((volatile int64*) __ptr, (int64)__comparand,\n-                                   (int64)__replacement);\n+    if (sizeof(_Tp) == sizeof(int32_t))\n+      return __compare_and_swap_32((volatile int32_t*) __ptr,\n+                                   (int32_t)__comparand,\n+                                   (int32_t)__replacement);\n+    else if (sizeof(_Tp) == sizeof(int64_t))\n+      return __compare_and_swap_64((volatile int64_t*) __ptr,\n+                                   (int64_t)__comparand,\n+                                   (int64_t)__replacement);\n     else\n       _GLIBCXX_PARALLEL_ASSERT(false);\n   }"}, {"sha": "fdce872c5a1a71aab5510ada17a1b45e3df31c6a", "filename": "libstdc++-v3/include/parallel/multiseq_selection.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h?ref=63ffc486171b8fb7402fd345c2544318a53111aa", "patch": "@@ -273,7 +273,7 @@ namespace __gnu_parallel\n             }\n           \n           _DifferenceType __skew = static_cast<_DifferenceType>\n-            (static_cast<uint64>(__total) * __rank / __N - __leftsize);\n+            (static_cast<uint64_t>(__total) * __rank / __N - __leftsize);\n \n           if (__skew > 0)\n             {"}, {"sha": "4df91df0583e6589ce34380d21fc6d6ad9111a5b", "filename": "libstdc++-v3/include/parallel/random_number.h", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_number.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_number.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_number.h?ref=63ffc486171b8fb7402fd345c2544318a53111aa", "patch": "@@ -34,6 +34,7 @@\n \n #include <parallel/types.h>\n #include <tr1/random>\n+#include <limits>\n \n namespace __gnu_parallel\n {\n@@ -42,37 +43,37 @@ namespace __gnu_parallel\n   {\n   private:\n     std::tr1::mt19937   _M_mt;\n-    uint64              _M_supremum;\n-    uint64              _M_rand_sup;\n+    uint64_t            _M_supremum;\n+    uint64_t            _M_rand_sup;\n     double              _M_supremum_reciprocal;\n     double              _M_rand_sup_reciprocal;\n \n     // Assumed to be twice as long as the usual random number.\n-    uint64              __cache;  \n+    uint64_t              __cache;\n \n     // Bit results.\n     int __bits_left;\n     \n-    static uint32\n-    __scale_down(uint64 __x,\n+    static uint32_t\n+    __scale_down(uint64_t __x,\n #if _GLIBCXX_SCALE_DOWN_FPU\n-               uint64 /*_M_supremum*/, double _M_supremum_reciprocal)\n+               uint64_t /*_M_supremum*/, double _M_supremum_reciprocal)\n #else\n-               uint64 _M_supremum, double /*_M_supremum_reciprocal*/)\n+               uint64_t _M_supremum, double /*_M_supremum_reciprocal*/)\n #endif\n         {\n #if _GLIBCXX_SCALE_DOWN_FPU\n-          return uint32(__x * _M_supremum_reciprocal);\n+          return uint32_t(__x * _M_supremum_reciprocal);\n #else\n-          return static_cast<uint32>(__x % _M_supremum);\n+          return static_cast<uint32_t>(__x % _M_supremum);\n #endif\n         }\n \n   public:\n     /** @brief Default constructor. Seed with 0. */\n     _RandomNumber()\n     : _M_mt(0), _M_supremum(0x100000000ULL),\n-      _M_rand_sup(1ULL << (sizeof(uint32) * 8)),\n+      _M_rand_sup(1ULL << std::numeric_limits<uint32_t>::digits),\n       _M_supremum_reciprocal(double(_M_supremum) / double(_M_rand_sup)),\n       _M_rand_sup_reciprocal(1.0 / double(_M_rand_sup)),\n       __cache(0), __bits_left(0) { }\n@@ -81,22 +82,22 @@ namespace __gnu_parallel\n      *  @param __seed Random __seed.\n      *  @param _M_supremum Generate integer random numbers in the\n      *                  interval @__c [0,_M_supremum). */\n-    _RandomNumber(uint32 __seed, uint64 _M_supremum = 0x100000000ULL)\n+    _RandomNumber(uint32_t __seed, uint64_t _M_supremum = 0x100000000ULL)\n     : _M_mt(__seed), _M_supremum(_M_supremum),\n-      _M_rand_sup(1ULL << (sizeof(uint32) * 8)),\n+      _M_rand_sup(1ULL << std::numeric_limits<uint32_t>::digits),\n       _M_supremum_reciprocal(double(_M_supremum) / double(_M_rand_sup)),\n       _M_rand_sup_reciprocal(1.0 / double(_M_rand_sup)),\n       __cache(0), __bits_left(0) { }\n \n     /** @brief Generate unsigned random 32-bit integer. */\n-    uint32\n+    uint32_t\n     operator()()\n     { return __scale_down(_M_mt(), _M_supremum, _M_supremum_reciprocal); }\n \n     /** @brief Generate unsigned random 32-bit integer in the\n         interval @__c [0,local_supremum). */\n-    uint32\n-    operator()(uint64 local_supremum)\n+    uint32_t\n+    operator()(uint64_t local_supremum)\n     {\n       return __scale_down(_M_mt(), local_supremum,\n                         double(local_supremum * _M_rand_sup_reciprocal));\n@@ -112,7 +113,7 @@ namespace __gnu_parallel\n       __bits_left -= __bits;\n       if (__bits_left < 32)\n         {\n-          __cache |= ((uint64(_M_mt())) << __bits_left);\n+          __cache |= ((uint64_t(_M_mt())) << __bits_left);\n           __bits_left += 32;\n         }\n       return __res;"}, {"sha": "a74b9ac82aca19cdf882abfba2a98fc775caadb0", "filename": "libstdc++-v3/include/parallel/random_shuffle.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h?ref=63ffc486171b8fb7402fd345c2544318a53111aa", "patch": "@@ -100,7 +100,7 @@ template<typename _RAIter, typename _RandomNumberGenerator>\n     _BinIndex __bins_end;\n \n     /** @brief Random _M_seed for this thread. */\n-    uint32 _M_seed;\n+    uint32_t _M_seed;\n \n     /** @brief Pointer to global data. */\n     _DRandomShufflingGlobalData<_RAIter>* _M_sd;\n@@ -372,7 +372,8 @@ template<typename _RAIter, typename _RandomNumberGenerator>\n                 for (; __j < bin_cursor; ++__j)\n                   _M_sd._M_bin_proc[__j] = __i;\n                 __pus[__i]._M_num_threads = __num_threads;\n-                __pus[__i]._M_seed = __rng(std::numeric_limits<uint32>::max());\n+                __pus[__i]._M_seed =\n+                        __rng(std::numeric_limits<uint32_t>::max());\n                 __pus[__i]._M_sd = &_M_sd;\n               }\n             _M_starts[__num_threads] = __start;"}, {"sha": "bb6eaa5ed8b8a9bff225caaaf8be3f6c9fde7998", "filename": "libstdc++-v3/include/parallel/types.h", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ffc486171b8fb7402fd345c2544318a53111aa/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftypes.h?ref=63ffc486171b8fb7402fd345c2544318a53111aa", "patch": "@@ -33,6 +33,8 @@\n #define _GLIBCXX_PARALLEL_TYPES_H 1\n \n #include <cstdlib>\n+#include <limits>\n+#include <tr1/cstdint>\n \n namespace __gnu_parallel\n {\n@@ -108,45 +110,24 @@ namespace __gnu_parallel\n       EQUAL_SPLIT \n     };\n \n-  /// _Integer Types.\n-  // XXX need to use <cstdint>\n-  /** @brief 16-bit signed integer. */\n-  typedef short int16;\n-\n-  /** @brief 16-bit unsigned integer. */\n-  typedef unsigned short uint16;\n-\n-  /** @brief 32-bit signed integer. */\n-  typedef int int32;\n-\n-  /** @brief 32-bit unsigned integer. */\n-  typedef unsigned int uint32;\n-\n-  /** @brief 64-bit signed integer. */\n-  typedef long long int64;\n-\n-  /** @brief 64-bit unsigned integer. */\n-  typedef unsigned long long uint64;\n-\n   /**\n    * @brief Unsigned integer to index __elements.\n    * The total number of elements for each algorithm must fit into this type.\n    */\n-  typedef uint64 _SequenceIndex;\n+  typedef uint64_t _SequenceIndex;\n \n   /**\n    * @brief Unsigned integer to index a thread number.\n    * The maximum thread number (for each processor) must fit into this type.\n    */\n-  typedef uint16 _ThreadIndex;\n+  typedef uint16_t _ThreadIndex;\n \n   // XXX atomics interface?\n   /// Longest compare-and-swappable integer type on this platform.\n-  typedef int64 _CASable;\n+  typedef int64_t _CASable;\n \n-  // XXX numeric_limits::digits?\n-  /// Number of bits of ::_CASable.\n-  static const int _CASable_bits = sizeof(_CASable) * 8;\n+  /// Number of bits of _CASable.\n+  static const int _CASable_bits = std::numeric_limits<_CASable>::digits;\n \n   /// ::_CASable with the right half of bits set to 1.\n   static const _CASable _CASable_mask ="}]}