{"sha": "4d562591018a51f155a2e5d8b9f3e5860111a327", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ1NjI1OTEwMThhNTFmMTU1YTJlNWQ4YjlmM2U1ODYwMTExYTMyNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-04T07:22:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-04T08:35:27Z"}, "message": "tree-optimization/101769 - tail recursion creates possibly infinite loop\n\nThis makes tail recursion optimization produce a loop structure\nmanually rather than relying on loop fixup.  That also allows the\nloop to be marked as finite (it would eventually blow the stack\nif it were not).\n\n2021-08-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101769\n\t* tree-tailcall.c (eliminate_tail_call): Add the created loop\n\tfor the first recursion and return it via the new output parameter.\n\t(optimize_tail_call): Pass through new output param.\n\t(tree_optimize_tail_calls_1): After creating all latches,\n\tadd the created loop to the loop tree.  Do not mark loops for fixup.\n\n\t* g++.dg/tree-ssa/pr101769.C: New testcase.", "tree": {"sha": "d9471d510954643e8739f6edb6e20c5e23eedf27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9471d510954643e8739f6edb6e20c5e23eedf27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d562591018a51f155a2e5d8b9f3e5860111a327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d562591018a51f155a2e5d8b9f3e5860111a327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d562591018a51f155a2e5d8b9f3e5860111a327", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d562591018a51f155a2e5d8b9f3e5860111a327/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c73b94fdc46f03c761ee5c66e30e00a2bf9ee91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c73b94fdc46f03c761ee5c66e30e00a2bf9ee91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c73b94fdc46f03c761ee5c66e30e00a2bf9ee91"}], "stats": {"total": 90, "additions": 77, "deletions": 13}, "files": [{"sha": "4979c42236bbd55c20e338b292382305b013f49d", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr101769.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d562591018a51f155a2e5d8b9f3e5860111a327/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr101769.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d562591018a51f155a2e5d8b9f3e5860111a327/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr101769.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr101769.C?ref=4d562591018a51f155a2e5d8b9f3e5860111a327", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+// { dg-options \"-O2 -fdump-tree-optimized\" }\n+\n+struct Node\n+{\n+  Node*\tright;\n+  Node*\tdown;\n+};\n+\n+inline\n+void free_node(Node*)\n+{\n+}\n+\n+void free_all(Node* n_)\n+{\n+  if (n_ == nullptr) {\n+      return;\n+  }\n+  free_all(n_->right);\n+  do {\n+      Node* t = n_->down;\n+      free_node(n_);\n+      n_ = t;\n+  } while (n_);\n+}\n+\n+void free_all2_r(Node* n_)\n+{\n+  if (n_->right) {\n+      free_all2_r(n_->right);\n+  }\n+  do {\n+      Node* t = n_->down;\n+      free_node(n_);\n+      n_ = t;\n+  } while (n_);\n+}\n+\n+void free_all2(Node* n_)\n+{\n+  if (n_) {\n+      free_all2_r(n_);\n+  }\n+}\n+\n+void loop(Node* n_)\n+{\n+  do {\n+      n_ = n_->down;\n+  } while (n_);\n+}\n+\n+// All functions should be empty.\n+// { dg-final { scan-tree-dump-times \"<bb \" 4 \"optimized\" } }"}, {"sha": "f2f3a6b6dc11b3ca5582c4cd2de3f720a9cba14e", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d562591018a51f155a2e5d8b9f3e5860111a327/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d562591018a51f155a2e5d8b9f3e5860111a327/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=4d562591018a51f155a2e5d8b9f3e5860111a327", "patch": "@@ -131,9 +131,6 @@ static tree m_acc, a_acc;\n \n static bitmap tailr_arg_needs_copy;\n \n-static bool optimize_tail_call (struct tailcall *, bool);\n-static void eliminate_tail_call (struct tailcall *);\n-\n /* Returns false when the function is not suitable for tail call optimization\n    from some reason (e.g. if it takes variable number of arguments).  */\n \n@@ -926,10 +923,11 @@ decrease_profile (basic_block bb, profile_count count)\n }\n \n /* Eliminates tail call described by T.  TMP_VARS is a list of\n-   temporary variables used to copy the function arguments.  */\n+   temporary variables used to copy the function arguments.\n+   Allocates *NEW_LOOP if not already done and initializes it.  */\n \n static void\n-eliminate_tail_call (struct tailcall *t)\n+eliminate_tail_call (struct tailcall *t, class loop *&new_loop)\n {\n   tree param, rslt;\n   gimple *stmt, *call;\n@@ -999,6 +997,16 @@ eliminate_tail_call (struct tailcall *t)\n   gcc_assert (e);\n   PENDING_STMT (e) = NULL;\n \n+  /* Add the new loop.  */\n+  if (!new_loop)\n+    {\n+      new_loop = alloc_loop ();\n+      new_loop->header = first;\n+      new_loop->finite_p = true;\n+    }\n+  else\n+    gcc_assert (new_loop->header == first);\n+\n   /* Add phi node entries for arguments.  The ordering of the phi nodes should\n      be the same as the ordering of the arguments.  */\n   for (param = DECL_ARGUMENTS (current_function_decl),\n@@ -1037,11 +1045,12 @@ eliminate_tail_call (struct tailcall *t)\n    mark the tailcalls for the sibcall optimization.  */\n \n static bool\n-optimize_tail_call (struct tailcall *t, bool opt_tailcalls)\n+optimize_tail_call (struct tailcall *t, bool opt_tailcalls,\n+\t\t    class loop *&new_loop)\n {\n   if (t->tail_recursion)\n     {\n-      eliminate_tail_call (t);\n+      eliminate_tail_call (t, new_loop);\n       return true;\n     }\n \n@@ -1177,12 +1186,15 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n       opt_tailcalls = false;\n     }\n \n+  class loop *new_loop = NULL;\n   for (; tailcalls; tailcalls = next)\n     {\n       next = tailcalls->next;\n-      changed |= optimize_tail_call (tailcalls, opt_tailcalls);\n+      changed |= optimize_tail_call (tailcalls, opt_tailcalls, new_loop);\n       free (tailcalls);\n     }\n+  if (new_loop)\n+    add_loop (new_loop, loops_for_fn (cfun)->tree_root);\n \n   if (a_acc || m_acc)\n     {\n@@ -1198,11 +1210,7 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n     }\n \n   if (changed)\n-    {\n-      /* We may have created new loops.  Make them magically appear.  */\n-      loops_state_set (LOOPS_NEED_FIXUP);\n-      free_dominance_info (CDI_DOMINATORS);\n-    }\n+    free_dominance_info (CDI_DOMINATORS);\n \n   /* Add phi nodes for the virtual operands defined in the function to the\n      header of the loop created by tail recursion elimination.  Do so"}]}