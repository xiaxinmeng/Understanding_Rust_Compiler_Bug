{"sha": "41a7c2158dd2e6a2e34fe11b0c147eac4b760850", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFhN2MyMTU4ZGQyZTZhMmUzNGZlMTFiMGMxNDdlYWM0Yjc2MDg1MA==", "commit": {"author": {"name": "Cameron McInally", "email": "cameron.mcinally@nyu.edu", "date": "2013-07-25T20:47:16Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-07-25T20:47:16Z"}, "message": "re PR target/38836 (Documentation for x86 builtins is outdated)\n\n2013-07-25  Cameron McInally  <cameron.mcinally@nyu.edu>\n\n\t* doc/extend.texi: Fix return types for __builtin_ia32_cmp*s builtins.\n\n2013-07-25  Cameron McInally  <cameron.mcinally@nyu.edu>\n\n\tPR target/38836\n\t* doc/extend.texi: Remove obsolete builtins. Fix\n\ttypo for __builtin_ia32_loadss and __builtin_ia32_cmpnltss.\n\nFrom-SVN: r201252", "tree": {"sha": "29749dea7b7a2f9bb4958a5e57d809a02eb962e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29749dea7b7a2f9bb4958a5e57d809a02eb962e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41a7c2158dd2e6a2e34fe11b0c147eac4b760850", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a7c2158dd2e6a2e34fe11b0c147eac4b760850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a7c2158dd2e6a2e34fe11b0c147eac4b760850", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a7c2158dd2e6a2e34fe11b0c147eac4b760850/comments", "author": {"login": "mcinally", "id": 19612094, "node_id": "MDQ6VXNlcjE5NjEyMDk0", "avatar_url": "https://avatars.githubusercontent.com/u/19612094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcinally", "html_url": "https://github.com/mcinally", "followers_url": "https://api.github.com/users/mcinally/followers", "following_url": "https://api.github.com/users/mcinally/following{/other_user}", "gists_url": "https://api.github.com/users/mcinally/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcinally/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcinally/subscriptions", "organizations_url": "https://api.github.com/users/mcinally/orgs", "repos_url": "https://api.github.com/users/mcinally/repos", "events_url": "https://api.github.com/users/mcinally/events{/privacy}", "received_events_url": "https://api.github.com/users/mcinally/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49bde17554926a2352b7f1df98d4e02becc1e065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49bde17554926a2352b7f1df98d4e02becc1e065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49bde17554926a2352b7f1df98d4e02becc1e065"}], "stats": {"total": 84, "additions": 38, "deletions": 46}, "files": [{"sha": "a47ad4dc0c7a7fc1929097b9c2ad3212c05f0e1e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7c2158dd2e6a2e34fe11b0c147eac4b760850/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7c2158dd2e6a2e34fe11b0c147eac4b760850/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41a7c2158dd2e6a2e34fe11b0c147eac4b760850", "patch": "@@ -1,3 +1,13 @@\n+2013-07-25  Cameron McInally  <cameron.mcinally@nyu.edu>\n+\n+\t* doc/extend.texi: Fix return types for __builtin_ia32_cmp*s builtins.\n+\n+2013-07-25  Cameron McInally  <cameron.mcinally@nyu.edu>\n+\n+\tPR target/38836\n+\t* doc/extend.texi: Remove obsolete builtins. Fix\n+\ttypo for __builtin_ia32_loadss and __builtin_ia32_cmpnltss.\n+\n 2013-07-25  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (release_function_body): Break out from ...\n@@ -8,8 +18,8 @@\n \t(create_specialized_node): Update.\n \t* lto-cgraph.c (output_node_opt_summary): Do not translate old_tree\n \tinto index.\n-\t* cgraphclones.c (cgraph_create_virtual_clone): Do not copy DECL_ARGUMENTS,\n-\tDECL_INITIAL and DECL_RESULT.\n+\t* cgraphclones.c (cgraph_create_virtual_clone): Do not copy\n+\tDECL_ARGUMENTS, DECL_INITIAL and DECL_RESULT.\n \t* ipa-prop.c (ipa_populate_param_decls): Look for origin of clones.\n \t* tree-inline.c (initialize_cfun): Initialize DECL_ARGUMENTS and\n \tDECL_RESULT.\n@@ -44,7 +54,8 @@\n \t* cgraph.c (cgraph_remove_node): Do not release function body\n \twhen in cgraph streaming.\n \t* ipa.c (process_references, symtab_remove_unreachable_nodes): Objects\n-\tin other partitions are not considered reachable; fix handling of clones.\n+\tin other partitions are not considered reachable; fix handling of\n+\tclones.\n \n 2013-07-25  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n@@ -57,8 +68,7 @@\n \tPR target/57748\n \t* config/arm/arm.md (\"*sibcall_insn): Replace use of\n \tSs with US. Adjust output for v5 and v4t.\n-\t(*sibcall_value_insn): Likewise and loosen predicate on\n-\toperand0.\n+\t(*sibcall_value_insn): Likewise and loosen predicate on operand0.\n \n \t* config/arm/constraints.md (\"Ss\"): Rename to US.\n \n@@ -85,8 +95,7 @@\n \t(toplev.o): Add CONTEXT_H to dependencies.\n \t(context.o): New.\n \n-\t* toplev.c (general_init): Create the singleton gcc::context\n-\tinstance.\n+\t* toplev.c (general_init): Create the singleton gcc::context instance.\n \n \t* context.c: New.\n \n@@ -365,7 +374,7 @@\n \t* dwarf2out.c (die_odr_checksum): New function to use\n \tCHECKSUM_ macros and ULEB128 for DIE tag.\n \t(generate_type_signature): Use.\n-\t\n+\n 2013-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config.gcc (sparc*-*-*): Accept leon3 processor."}, {"sha": "68d9426533fcbe30fede33049af5c5c4d6450f42", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 21, "deletions": 38, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a7c2158dd2e6a2e34fe11b0c147eac4b760850/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a7c2158dd2e6a2e34fe11b0c147eac4b760850/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=41a7c2158dd2e6a2e34fe11b0c147eac4b760850", "patch": "@@ -9925,8 +9925,6 @@ v8qi __builtin_ia32_pmaxub (v8qi, v8qi)\n v4hi __builtin_ia32_pmaxsw (v4hi, v4hi)\n v8qi __builtin_ia32_pminub (v8qi, v8qi)\n v4hi __builtin_ia32_pminsw (v4hi, v4hi)\n-int __builtin_ia32_pextrw (v4hi, int)\n-v4hi __builtin_ia32_pinsrw (v4hi, int, int)\n int __builtin_ia32_pmovmskb (v8qi)\n void __builtin_ia32_maskmovq (v8qi, v8qi, char *)\n void __builtin_ia32_movntq (di *, di)\n@@ -9957,26 +9955,26 @@ v4sf __builtin_ia32_addss (v4sf, v4sf)\n v4sf __builtin_ia32_subss (v4sf, v4sf)\n v4sf __builtin_ia32_mulss (v4sf, v4sf)\n v4sf __builtin_ia32_divss (v4sf, v4sf)\n-v4si __builtin_ia32_cmpeqps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpltps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpleps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpgtps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpgeps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpunordps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpneqps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpnltps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpnleps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpngtps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpngeps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpordps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpeqss (v4sf, v4sf)\n-v4si __builtin_ia32_cmpltss (v4sf, v4sf)\n-v4si __builtin_ia32_cmpless (v4sf, v4sf)\n-v4si __builtin_ia32_cmpunordss (v4sf, v4sf)\n-v4si __builtin_ia32_cmpneqss (v4sf, v4sf)\n-v4si __builtin_ia32_cmpnlts (v4sf, v4sf)\n-v4si __builtin_ia32_cmpnless (v4sf, v4sf)\n-v4si __builtin_ia32_cmpordss (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpeqps (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpltps (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpleps (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpgtps (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpgeps (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpunordps (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpneqps (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpnltps (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpnleps (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpngtps (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpngeps (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpordps (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpeqss (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpltss (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpless (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpunordss (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpneqss (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpnltss (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpnless (v4sf, v4sf)\n+v4sf __builtin_ia32_cmpordss (v4sf, v4sf)\n v4sf __builtin_ia32_maxps (v4sf, v4sf)\n v4sf __builtin_ia32_maxss (v4sf, v4sf)\n v4sf __builtin_ia32_minps (v4sf, v4sf)\n@@ -10010,18 +10008,12 @@ int __builtin_ia32_movmskps (v4sf)\n The following built-in functions are available when @option{-msse} is used.\n \n @table @code\n-@item v4sf __builtin_ia32_loadaps (float *)\n-Generates the @code{movaps} machine instruction as a load from memory.\n-@item void __builtin_ia32_storeaps (float *, v4sf)\n-Generates the @code{movaps} machine instruction as a store to memory.\n @item v4sf __builtin_ia32_loadups (float *)\n Generates the @code{movups} machine instruction as a load from memory.\n @item void __builtin_ia32_storeups (float *, v4sf)\n Generates the @code{movups} machine instruction as a store to memory.\n-@item v4sf __builtin_ia32_loadsss (float *)\n+@item v4sf __builtin_ia32_loadss (float *)\n Generates the @code{movss} machine instruction as a load from memory.\n-@item void __builtin_ia32_storess (float *, v4sf)\n-Generates the @code{movss} machine instruction as a store to memory.\n @item v4sf __builtin_ia32_loadhps (v4sf, const v2sf *)\n Generates the @code{movhps} machine instruction as a load from memory.\n @item v4sf __builtin_ia32_loadlps (v4sf, const v2sf *)\n@@ -10205,19 +10197,11 @@ v2df __builtin_ia32_hsubpd (v2df, v2df)\n v4sf __builtin_ia32_hsubps (v4sf, v4sf)\n v16qi __builtin_ia32_lddqu (char const *)\n void __builtin_ia32_monitor (void *, unsigned int, unsigned int)\n-v2df __builtin_ia32_movddup (v2df)\n v4sf __builtin_ia32_movshdup (v4sf)\n v4sf __builtin_ia32_movsldup (v4sf)\n void __builtin_ia32_mwait (unsigned int, unsigned int)\n @end smallexample\n \n-The following built-in functions are available when @option{-msse3} is used.\n-\n-@table @code\n-@item v2df __builtin_ia32_loadddup (double const *)\n-Generates the @code{movddup} machine instruction as a load from memory.\n-@end table\n-\n The following built-in functions are available when @option{-mssse3} is used.\n All of them generate the machine instruction that is part of the name\n with MMX registers.\n@@ -11000,7 +10984,6 @@ v2sf __builtin_ia32_pfrcp (v2sf)\n v2sf __builtin_ia32_pfrcpit1 (v2sf, v2sf)\n v2sf __builtin_ia32_pfrcpit2 (v2sf, v2sf)\n v2sf __builtin_ia32_pfrsqrt (v2sf)\n-v2sf __builtin_ia32_pfrsqrtit1 (v2sf, v2sf)\n v2sf __builtin_ia32_pfsub (v2sf, v2sf)\n v2sf __builtin_ia32_pfsubr (v2sf, v2sf)\n v2sf __builtin_ia32_pi2fd (v2si)"}]}