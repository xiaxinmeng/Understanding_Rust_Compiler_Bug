{"sha": "b1c11e0e0a912a1581d060a71f6e1bb02b4f386a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFjMTFlMGUwYTkxMmExNTgxZDA2MGE3MWY2ZTFiYjAyYjRmMzg2YQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2008-08-04T12:14:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-04T12:14:25Z"}, "message": "sem_ch3.adb (Access_Subprogram_Declaration): Adding missing support for N_Formal_Object_Declaration nodes.\n\n2008-08-04  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Access_Subprogram_Declaration): Adding missing support\n\tfor N_Formal_Object_Declaration nodes. Adding kludge required by\n\tFirst_Formal to provide its functionality with access to functions.\n\t(Replace_Anonymous_Access_To_Protected_Subprogram): Add missing support\n\tfor anonymous access types returned by functions.\n\n\t* sem_ch5.adb (Analyze_Assignment): Code cleanup to avoid duplicate\n\tconversion of null-excluding access types (required only once to force\n\tthe generation of the required runtime check).\n\n\t* sem_type.adb (Covers): minor reformating\n\n\t* checks.adb (Null_Exclusion_Static_Checks): Avoid reporting errors\n\twith internally generated nodes. Avoid generating the error inside init\n\tprocs.\n\n\t* sem_res.adb (Resolve_Membership_Test): Minor reformating.\n\t(Resolve_Null): Generate the null-excluding check in case of assignment\n\tto a null-excluding object.\n\t(Valid_Conversion): Add missing support for anonymous access to\n\tsubprograms.\n\n\t* sem_ch6.adb (Check_Return_Subtype_Indication): Add missing support for\n\tanonymous access types whose designated type is an itype. This case\n\toccurs with anonymous access to protected subprograms types.\n\t(Analyze_Return_Type):  Add missing support for anonymous access to\n\tprotected subprogram.\n\n\t* sem_eval.adb (Subtypes_Statically_Match): In case of access to\n\tsubprograms addition of missing check on matching convention. Required\n\tto properly handle access to protected subprogram types.\n\n\t* exp_ch3 (Build_Assignment): Code cleanup removing duplicated check on\n\tnull excluding access types.\n\nFrom-SVN: r138610", "tree": {"sha": "a52c5e1da5d0dd6afa9050656b9edb462a9793c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a52c5e1da5d0dd6afa9050656b9edb462a9793c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10fb8ecd51bf6ac25ee3dc9d726be52f723ecf4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10fb8ecd51bf6ac25ee3dc9d726be52f723ecf4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10fb8ecd51bf6ac25ee3dc9d726be52f723ecf4f"}], "stats": {"total": 185, "additions": 137, "deletions": 48}, "files": [{"sha": "af78d6a35e4d65c25ddccf4d337eb28eba3d5c2a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b1c11e0e0a912a1581d060a71f6e1bb02b4f386a", "patch": "@@ -1,3 +1,40 @@\n+2008-08-04  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Access_Subprogram_Declaration): Adding missing support\n+\tfor N_Formal_Object_Declaration nodes. Adding kludge required by\n+\tFirst_Formal to provide its functionality with access to functions.\n+\t(Replace_Anonymous_Access_To_Protected_Subprogram): Add missing support\n+\tfor anonymous access types returned by functions.\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Code cleanup to avoid duplicate\n+\tconversion of null-excluding access types (required only once to force\n+\tthe generation of the required runtime check).\n+\n+\t* sem_type.adb (Covers): minor reformating\n+\n+\t* checks.adb (Null_Exclusion_Static_Checks): Avoid reporting errors\n+\twith internally generated nodes. Avoid generating the error inside init\n+\tprocs.\n+\n+\t* sem_res.adb (Resolve_Membership_Test): Minor reformating.\n+\t(Resolve_Null): Generate the null-excluding check in case of assignment\n+\tto a null-excluding object.\n+\t(Valid_Conversion): Add missing support for anonymous access to\n+\tsubprograms.\n+\n+\t* sem_ch6.adb (Check_Return_Subtype_Indication): Add missing support for\n+\tanonymous access types whose designated type is an itype. This case\n+\toccurs with anonymous access to protected subprograms types.\n+\t(Analyze_Return_Type):  Add missing support for anonymous access to\n+\tprotected subprogram.\n+\n+\t* sem_eval.adb (Subtypes_Statically_Match): In case of access to\n+\tsubprograms addition of missing check on matching convention. Required\n+\tto properly handle access to protected subprogram types.\n+\n+\t* exp_ch3 (Build_Assignment): Code cleanup removing duplicated check on\n+\tnull excluding access types.\n+\n 2008-08-04  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch12.adb: Add comments"}, {"sha": "38b1a07e409903bf786c0e3b3fdcea9131e35d20", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=b1c11e0e0a912a1581d060a71f6e1bb02b4f386a", "patch": "@@ -2871,11 +2871,7 @@ package body Checks is\n          --  be applied to a [sub]type that does not exclude null already.\n \n          elsif Can_Never_Be_Null (Typ)\n-\n-            --  No need to check itypes that have a null exclusion because\n-            --  they are already examined at their point of creation.\n-\n-           and then not Is_Itype (Typ)\n+           and then Comes_From_Source (Typ)\n          then\n             Error_Msg_NE\n               (\"`NOT NULL` not allowed (& already excludes null)\",\n@@ -5306,10 +5302,20 @@ package body Checks is\n       --  If known to be null, here is where we generate a compile time check\n \n       if Known_Null (N) then\n-         Apply_Compile_Time_Constraint_Error\n-           (N,\n-            \"null value not allowed here?\",\n-            CE_Access_Check_Failed);\n+\n+         --  Avoid generating warning message inside init procs\n+\n+         if not Inside_Init_Proc then\n+            Apply_Compile_Time_Constraint_Error\n+              (N,\n+               \"null value not allowed here?\",\n+               CE_Access_Check_Failed);\n+         else\n+            Insert_Action (N,\n+              Make_Raise_Constraint_Error (Loc,\n+                Reason => CE_Access_Check_Failed));\n+         end if;\n+\n          Mark_Non_Null;\n          return;\n       end if;"}, {"sha": "92a5f8c3b60af02662248aa8eb29ce0a318a3861", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=b1c11e0e0a912a1581d060a71f6e1bb02b4f386a", "patch": "@@ -1826,23 +1826,6 @@ package body Exp_Ch3 is\n                 Attribute_Name => Name_Unrestricted_Access);\n          end if;\n \n-         --  Ada 2005 (AI-231): Add the run-time check if required\n-\n-         if Ada_Version >= Ada_05\n-           and then Can_Never_Be_Null (Etype (Id))            -- Lhs\n-         then\n-            if Known_Null (Exp) then\n-               return New_List (\n-                 Make_Raise_Constraint_Error (Sloc (Exp),\n-                   Reason => CE_Null_Not_Allowed));\n-\n-            elsif Present (Etype (Exp))\n-              and then not Can_Never_Be_Null (Etype (Exp))\n-            then\n-               Install_Null_Excluding_Check (Exp);\n-            end if;\n-         end if;\n-\n          --  Take a copy of Exp to ensure that later copies of this component\n          --  declaration in derived types see the original tree, not a node\n          --  rewritten during expansion of the init_proc."}, {"sha": "307b6a158b6cebeecb726a410ed89d3c8d6f1635", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=b1c11e0e0a912a1581d060a71f6e1bb02b4f386a", "patch": "@@ -1056,6 +1056,7 @@ package body Sem_Ch3 is\n                                    N_Object_Renaming_Declaration,\n                                    N_Formal_Object_Declaration,\n                                    N_Formal_Type_Declaration,\n+                                   N_Formal_Object_Declaration,\n                                    N_Task_Type_Declaration,\n                                    N_Protected_Type_Declaration))\n       loop\n@@ -1117,13 +1118,32 @@ package body Sem_Ch3 is\n \n       if Present (Formals) then\n          Push_Scope (Desig_Type);\n+\n+         --  A bit of a kludge here. These kludges will be removed when Itypes\n+         --  have proper parent pointers to their declarations???\n+\n+         --  Kludge 1) Link definining_identifier of formals. Required by\n+         --  First_Formal to provide its functionality.\n+\n+         declare\n+            F : Node_Id;\n+\n+         begin\n+            F := First (Formals);\n+            while Present (F) loop\n+               if No (Parent (Defining_Identifier (F))) then\n+                  Set_Parent (Defining_Identifier (F), F);\n+               end if;\n+\n+               Next (F);\n+            end loop;\n+         end;\n+\n          Process_Formals (Formals, Parent (T_Def));\n \n-         --  A bit of a kludge here, End_Scope requires that the parent\n-         --  pointer be set to something reasonable, but Itypes don't have\n-         --  parent pointers. So we set it and then unset it ??? If and when\n-         --  Itypes have proper parent pointers to their declarations, this\n-         --  kludge can be removed.\n+         --  Kludge 2) End_Scope requires that the parent pointer be set to\n+         --  something reasonable, but Itypes don't have parent pointers. So\n+         --  we set it and then unset it ???\n \n          Set_Parent (Desig_Type, T_Name);\n          End_Scope;\n@@ -4441,6 +4461,10 @@ package body Sem_Ch3 is\n             Comp := Object_Definition (N);\n             Acc  := Comp;\n \n+         when N_Function_Specification =>\n+            Comp := Result_Definition (N);\n+            Acc  := Comp;\n+\n          when others =>\n             raise Program_Error;\n       end case;\n@@ -4485,6 +4509,10 @@ package body Sem_Ch3 is\n       elsif Nkind (N) = N_Access_Function_Definition then\n          Rewrite (Comp, New_Occurrence_Of (Anon, Loc));\n \n+      elsif Nkind (N) = N_Function_Specification then\n+         Rewrite (Comp, New_Occurrence_Of (Anon, Loc));\n+         Set_Etype (Defining_Unit_Name (N), Anon);\n+\n       else\n          Rewrite (Comp,\n            Make_Component_Definition (Loc,"}, {"sha": "139675969a93853cccaf894aed15f26cd594c13b", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=b1c11e0e0a912a1581d060a71f6e1bb02b4f386a", "patch": "@@ -579,18 +579,15 @@ package body Sem_Ch5 is\n          end if;\n       end if;\n \n-      --  Ada 2005 (AI-230 and AI-385): When the lhs type is an anonymous\n-      --  access type, apply an implicit conversion of the rhs to that type\n-      --  to force appropriate static and run-time accessibility checks.\n-      --  This applies as well to anonymous access-to-subprogram types that\n+      --  Ada 2005 (AI-385): When the lhs type is an anonymous access type,\n+      --  apply an implicit conversion of the rhs to that type to force\n+      --  appropriate static and run-time accessibility checks. This\n+      --  applies as well to anonymous access-to-subprogram types that\n       --  are component subtypes.\n \n       if Ada_Version >= Ada_05\n-        and then\n-          Is_Access_Type (T1)\n-            and then\n-             (Is_Local_Anonymous_Access (T1)\n-               or else Can_Never_Be_Null (T1))\n+        and then Is_Access_Type (T1)\n+        and then Is_Local_Anonymous_Access (T1)\n       then\n          Rewrite (Rhs, Convert_To (T1, Relocate_Node (Rhs)));\n          Analyze_And_Resolve (Rhs, T1);"}, {"sha": "ea1a21ed1781b10dfef4d19bd7957304c4762ef0", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b1c11e0e0a912a1581d060a71f6e1bb02b4f386a", "patch": "@@ -1262,7 +1262,20 @@ package body Sem_Ch6 is\n \n       if Result_Definition (N) /= Error then\n          if Nkind (Result_Definition (N)) = N_Access_Definition then\n-            Typ := Access_Definition (N, Result_Definition (N));\n+\n+            --  Ada 2005 (AI-254): Handle anonymous access to subprograms\n+\n+            declare\n+               AD : constant Node_Id :=\n+                      Access_To_Subprogram_Definition (Result_Definition (N));\n+            begin\n+               if Present (AD) and then Protected_Present (AD) then\n+                  Typ := Replace_Anonymous_Access_To_Protected_Subprogram (N);\n+               else\n+                  Typ := Access_Definition (N, Result_Definition (N));\n+               end if;\n+            end;\n+\n             Set_Parent (Typ, Result_Definition (N));\n             Set_Is_Local_Anonymous_Access (Typ);\n             Set_Etype (Designator, Typ);"}, {"sha": "ea4f769ea23386796c3627cbf5ae03086e915822", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=b1c11e0e0a912a1581d060a71f6e1bb02b4f386a", "patch": "@@ -4388,7 +4388,12 @@ package body Sem_Eval is\n             return\n               Subtype_Conformant\n                 (Designated_Type (T1),\n-                 Designated_Type (T2));\n+                 Designated_Type (T2))\n+\n+               --  Convention check required to cover protected subprograms\n+\n+               and then Convention (Designated_Type (T1)) =\n+                        Convention (Designated_Type (T2));\n          else\n             return\n               Subtypes_Statically_Match"}, {"sha": "6c632fdb5f73bea8f8545b566afd9c6d5885f74c", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=b1c11e0e0a912a1581d060a71f6e1bb02b4f386a", "patch": "@@ -6572,8 +6572,8 @@ package body Sem_Res is\n    procedure Resolve_Membership_Op (N : Node_Id; Typ : Entity_Id) is\n       pragma Warnings (Off, Typ);\n \n-      L : constant Node_Id   := Left_Opnd (N);\n-      R : constant Node_Id   := Right_Opnd (N);\n+      L : constant Node_Id := Left_Opnd (N);\n+      R : constant Node_Id := Right_Opnd (N);\n       T : Entity_Id;\n \n    begin\n@@ -6638,6 +6638,8 @@ package body Sem_Res is\n    ------------------\n \n    procedure Resolve_Null (N : Node_Id; Typ : Entity_Id) is\n+      Loc : constant Source_Ptr := Sloc (N);\n+\n    begin\n       --  Handle restriction against anonymous null access values This\n       --  restriction can be turned off using -gnatdj.\n@@ -6666,6 +6668,26 @@ package body Sem_Res is\n          end if;\n       end if;\n \n+      --  Ada 2005 (AI-231): Generate the null-excluding check in case of\n+      --  assignment to a null-excluding object\n+\n+      if Ada_Version >= Ada_05\n+        and then Can_Never_Be_Null (Typ)\n+        and then Nkind (Parent (N)) = N_Assignment_Statement\n+      then\n+         if not Inside_Init_Proc then\n+            Insert_Action\n+              (Compile_Time_Constraint_Error (N,\n+                 \"(Ada 2005) null not allowed in null-excluding objects?\"),\n+               Make_Raise_Constraint_Error (Loc,\n+                 Reason => CE_Access_Check_Failed));\n+         else\n+            Insert_Action (N,\n+              Make_Raise_Constraint_Error (Loc,\n+                Reason => CE_Access_Check_Failed));\n+         end if;\n+      end if;\n+\n       --  In a distributed context, null for a remote access to subprogram\n       --  may need to be replaced with a special record aggregate. In this\n       --  case, return after having done the transformation.\n@@ -9511,9 +9533,7 @@ package body Sem_Res is\n       --  return statement, because in that case the accessibility check\n       --  takes place after the return.\n \n-      elsif (Ekind (Target_Type) = E_Access_Subprogram_Type\n-               or else\n-             Ekind (Target_Type) = E_Anonymous_Access_Subprogram_Type)\n+      elsif Ekind (Target_Type) in Access_Subprogram_Kind\n         and then No (Corresponding_Remote_Type (Opnd_Type))\n       then\n          if Ekind (Base_Type (Opnd_Type)) = E_Anonymous_Access_Subprogram_Type"}, {"sha": "bdd1c388220bf1e1f45783e837e6b1021ae7191b", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1c11e0e0a912a1581d060a71f6e1bb02b4f386a/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=b1c11e0e0a912a1581d060a71f6e1bb02b4f386a", "patch": "@@ -766,7 +766,7 @@ package body Sem_Type is\n       if T1 = T2 then\n          return True;\n \n-      elsif  BT1 = BT2\n+      elsif BT1 = BT2\n         or else BT1 = T2\n         or else BT2 = T1\n       then"}]}