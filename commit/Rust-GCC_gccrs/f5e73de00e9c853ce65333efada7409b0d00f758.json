{"sha": "f5e73de00e9c853ce65333efada7409b0d00f758", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlNzNkZTAwZTljODUzY2U2NTMzM2VmYWRhNzQwOWIwZDAwZjc1OA==", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-09-14T13:47:24Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-09-21T08:38:23Z"}, "message": "aarch64: Fix ICE on fpsr fpcr getters [PR96968]\n\ngcc/ChangeLog\n\n2020-09-14  Andrea Corallo  <andrea.corallo@arm.com>\n\n\tPR target/96968\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_expand_fpsr_fpcr_setter): Fix comment nit.\n\t(aarch64_expand_fpsr_fpcr_getter): New function, expand these\n\tgetters using expand_insn machinery.\n\t(aarch64_general_expand_builtin): Make use of.\n\ngcc/testsuite/ChangeLog\n\n2020-09-14  Andrea Corallo  <andrea.corallo@arm.com>\n\n\tPR target/96968\n\t* gcc.target/aarch64/pr96968.c: New test.", "tree": {"sha": "61c9b9d3ec20b95f9512f5cc6d044b5046c67ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61c9b9d3ec20b95f9512f5cc6d044b5046c67ca4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5e73de00e9c853ce65333efada7409b0d00f758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e73de00e9c853ce65333efada7409b0d00f758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e73de00e9c853ce65333efada7409b0d00f758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e73de00e9c853ce65333efada7409b0d00f758/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da87190421877142987487b594b4ba9b78ec29af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da87190421877142987487b594b4ba9b78ec29af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da87190421877142987487b594b4ba9b78ec29af"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "2f4753b25cc9ed8bf63a3d4a0e6b9e4f6f17b8ec", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e73de00e9c853ce65333efada7409b0d00f758/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e73de00e9c853ce65333efada7409b0d00f758/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=f5e73de00e9c853ce65333efada7409b0d00f758", "patch": "@@ -2024,7 +2024,7 @@ aarch64_expand_builtin_memtag (int fcode, tree exp, rtx target)\n   return target;\n }\n \n-/* Expand an expression EXP as fpsr or cpsr setter (depending on\n+/* Expand an expression EXP as fpsr or fpcr setter (depending on\n    UNSPEC) using MODE.  */\n static void\n aarch64_expand_fpsr_fpcr_setter (int unspec, machine_mode mode, tree exp)\n@@ -2034,6 +2034,18 @@ aarch64_expand_fpsr_fpcr_setter (int unspec, machine_mode mode, tree exp)\n   emit_insn (gen_aarch64_set (unspec, mode, op));\n }\n \n+/* Expand a fpsr or fpcr getter (depending on UNSPEC) using MODE.\n+   Return the target.  */\n+static rtx\n+aarch64_expand_fpsr_fpcr_getter (enum insn_code icode, machine_mode mode,\n+\t\t\t\t rtx target)\n+{\n+  expand_operand op;\n+  create_output_operand (&op, target, mode);\n+  expand_insn (icode, 1, &op);\n+  return op.value;\n+}\n+\n /* Expand an expression EXP that calls built-in function FCODE,\n    with result going to TARGET if that's convenient.  IGNORE is true\n    if the result of the builtin is ignored.  */\n@@ -2048,26 +2060,26 @@ aarch64_general_expand_builtin (unsigned int fcode, tree exp, rtx target,\n   switch (fcode)\n     {\n     case AARCH64_BUILTIN_GET_FPCR:\n-      emit_insn (gen_aarch64_get (UNSPECV_GET_FPCR, SImode, target));\n-      return target;\n+      return aarch64_expand_fpsr_fpcr_getter (CODE_FOR_aarch64_get_fpcrsi,\n+\t\t\t\t\t      SImode, target);\n     case AARCH64_BUILTIN_SET_FPCR:\n       aarch64_expand_fpsr_fpcr_setter (UNSPECV_SET_FPCR, SImode, exp);\n       return target;\n     case AARCH64_BUILTIN_GET_FPSR:\n-      emit_insn (gen_aarch64_get (UNSPECV_GET_FPSR, SImode, target));\n-      return target;\n+      return aarch64_expand_fpsr_fpcr_getter (CODE_FOR_aarch64_get_fpsrsi,\n+\t\t\t\t\t      SImode, target);\n     case AARCH64_BUILTIN_SET_FPSR:\n       aarch64_expand_fpsr_fpcr_setter (UNSPECV_SET_FPSR, SImode, exp);\n       return target;\n     case AARCH64_BUILTIN_GET_FPCR64:\n-      emit_insn (gen_aarch64_get (UNSPECV_GET_FPCR, DImode, target));\n-      return target;\n+      return aarch64_expand_fpsr_fpcr_getter (CODE_FOR_aarch64_get_fpcrdi,\n+\t\t\t\t\t      DImode, target);\n     case AARCH64_BUILTIN_SET_FPCR64:\n       aarch64_expand_fpsr_fpcr_setter (UNSPECV_SET_FPCR, DImode, exp);\n       return target;\n     case AARCH64_BUILTIN_GET_FPSR64:\n-      emit_insn (gen_aarch64_get (UNSPECV_GET_FPSR, DImode, target));\n-      return target;\n+      return aarch64_expand_fpsr_fpcr_getter (CODE_FOR_aarch64_get_fpsrdi,\n+\t\t\t\t\t      DImode, target);\n     case AARCH64_BUILTIN_SET_FPSR64:\n       aarch64_expand_fpsr_fpcr_setter (UNSPECV_SET_FPSR, DImode, exp);\n       return target;"}, {"sha": "21ffd955153844b2479700b35f1e5194db0e2455", "filename": "gcc/testsuite/gcc.target/aarch64/pr96968.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e73de00e9c853ce65333efada7409b0d00f758/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr96968.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e73de00e9c853ce65333efada7409b0d00f758/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr96968.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr96968.c?ref=f5e73de00e9c853ce65333efada7409b0d00f758", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-options \"-O1\" } */\n+\n+void\n+fpsr_getter (void)\n+{\n+  unsigned int fpsr = __builtin_aarch64_get_fpsr ();\n+}\n+\n+void\n+fpsr64_getter (void)\n+{\n+  unsigned long fpsr = __builtin_aarch64_get_fpsr64 ();\n+}\n+\n+void\n+fpcr_getter (void)\n+{\n+  unsigned int fpcr = __builtin_aarch64_get_fpcr ();\n+}\n+\n+void\n+fpcr64_getter (void)\n+{\n+  unsigned long fpcr = __builtin_aarch64_get_fpcr64 ();\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tmrs\\tx0, fpsr\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmrs\\tx0, fpcr\\n} 2 } } */"}]}