{"sha": "a35ad1689150363a44dc08da824b57a6de14e957", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM1YWQxNjg5MTUwMzYzYTQ0ZGMwOGRhODI0YjU3YTZkZTE0ZTk1Nw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-09-24T19:56:05Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1993-09-24T19:56:05Z"}, "message": "stmt.c: (expand_goto): Set hard_frame_pointer_rtx when restoring the frame.\n\n* stmt.c: (expand_goto): Set hard_frame_pointer_rtx when restoring\nthe frame.  Use it when restoring other registers.\n(expand_end_bindings): ARG_POINTER_REGNUM will be eliminated into\nHARD_FRAME_POINTER_REGNUM, not FRAME_POINTER_REGNUM; adjust code accordingly.\n\nFrom-SVN: r5468", "tree": {"sha": "5b49f31869be44f0f3b1d799f03004a2d7fba753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b49f31869be44f0f3b1d799f03004a2d7fba753"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a35ad1689150363a44dc08da824b57a6de14e957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a35ad1689150363a44dc08da824b57a6de14e957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a35ad1689150363a44dc08da824b57a6de14e957", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a35ad1689150363a44dc08da824b57a6de14e957/comments", "author": null, "committer": null, "parents": [{"sha": "d8a0edf4b49e68de596279d9c720932713304ca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a0edf4b49e68de596279d9c720932713304ca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8a0edf4b49e68de596279d9c720932713304ca7"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "799f9be39cf36757e4eae802a6d8b9f0915586f7", "filename": "gcc/stmt.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a35ad1689150363a44dc08da824b57a6de14e957/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a35ad1689150363a44dc08da824b57a6de14e957/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=a35ad1689150363a44dc08da824b57a6de14e957", "patch": "@@ -726,7 +726,7 @@ expand_goto (label)\n \t     to the location of the function's incoming static chain info.\n \t     The non-local goto handler will then adjust it to contain the\n \t     proper value and reload the argument pointer, if needed.  */\n-\t  emit_move_insn (frame_pointer_rtx, lookup_static_chain (label));\n+\t  emit_move_insn (hard_frame_pointer_rtx, lookup_static_chain (label));\n \n \t  /* We have now loaded the frame pointer hardware register with\n \t     the address of that corresponds to the start of the virtual\n@@ -737,21 +737,22 @@ expand_goto (label)\n \t     which will do any cleanups and then jump to the label.  */\n \t  addr = copy_rtx (p->nonlocal_goto_handler_slot);\n \t  temp = copy_to_reg (replace_rtx (addr, virtual_stack_vars_rtx,\n-\t\t\t\t\t   frame_pointer_rtx));\n+\t\t\t\t\t   hard_frame_pointer_rtx));\n \t  \n \t  /* Restore the stack pointer.  Note this uses fp just restored.  */\n \t  addr = p->nonlocal_goto_stack_level;\n \t  if (addr)\n \t    addr = replace_rtx (copy_rtx (addr),\n-\t\t\t\tvirtual_stack_vars_rtx, frame_pointer_rtx);\n+\t\t\t\tvirtual_stack_vars_rtx,\n+\t\t\t\thard_frame_pointer_rtx);\n \n \t  emit_stack_restore (SAVE_NONLOCAL, addr, NULL_RTX);\n \n \t  /* Put in the static chain register the nonlocal label address.  */\n \t  emit_move_insn (static_chain_rtx, label_ref);\n-\t  /* USE of frame_pointer_rtx added for consistency; not clear if\n+\t  /* USE of hard_frame_pointer_rtx added for consistency; not clear if\n \t     really needed.  */\n-\t  emit_insn (gen_rtx (USE, VOIDmode, frame_pointer_rtx));\n+\t  emit_insn (gen_rtx (USE, VOIDmode, hard_frame_pointer_rtx));\n \t  emit_insn (gen_rtx (USE, VOIDmode, stack_pointer_rtx));\n \t  emit_insn (gen_rtx (USE, VOIDmode, static_chain_rtx));\n \t  emit_indirect_jump (temp);\n@@ -3144,7 +3145,7 @@ expand_end_bindings (vars, mark_ends, dont_jump_in)\n \t   decrementing fp by STARTING_FRAME_OFFSET.  */\n \temit_move_insn (virtual_stack_vars_rtx, frame_pointer_rtx);\n \n-#if ARG_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+#if ARG_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n       if (fixed_regs[ARG_POINTER_REGNUM])\n \t{\n #ifdef ELIMINABLE_REGS\n@@ -3158,7 +3159,7 @@ expand_end_bindings (vars, mark_ends, dont_jump_in)\n \n \t  for (i = 0; i < sizeof elim_regs / sizeof elim_regs[0]; i++)\n \t    if (elim_regs[i].from == ARG_POINTER_REGNUM\n-\t\t&& elim_regs[i].to == FRAME_POINTER_REGNUM)\n+\t\t&& elim_regs[i].to == HARD_FRAME_POINTER_REGNUM)\n \t      break;\n \n \t  if (i == sizeof elim_regs / sizeof elim_regs [0])"}]}