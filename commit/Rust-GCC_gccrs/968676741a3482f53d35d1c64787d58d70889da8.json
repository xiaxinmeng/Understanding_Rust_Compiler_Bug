{"sha": "968676741a3482f53d35d1c64787d58d70889da8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY4Njc2NzQxYTM0ODJmNTNkMzVkMWM2NDc4N2Q1OGQ3MDg4OWRhOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T16:16:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T16:16:55Z"}, "message": "[multiple changes]\n\n2009-11-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par_sco.adb (Traverse_Handled_Statement_Sequence): Do not emit SCO's\n\tfor null statements that do not come from source.\n\t* sinfo.ads: Clarify documentation of Comes_From_Source\n\n2009-11-30  Vincent Celier  <celier@adacore.com>\n\n\t* prj-nmsc.adb (Add_Source): Use Display_Name for both projects when\n\tdisplaying the paths in error message.\n\n2009-11-30  Emmanuel Briot  <briot@adacore.com>\n\n\t* adaint.h, adaint.c (file_attributes): force the use of unsigned char.\n \tOn some platforms, \"char\" is signed, on others unsigned, so we\n \texplicitly specify the one we expect\n\nFrom-SVN: r154826", "tree": {"sha": "9d34ffd54ee9a2be41640e14b0c888afe283d912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d34ffd54ee9a2be41640e14b0c888afe283d912"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/968676741a3482f53d35d1c64787d58d70889da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/968676741a3482f53d35d1c64787d58d70889da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/968676741a3482f53d35d1c64787d58d70889da8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/968676741a3482f53d35d1c64787d58d70889da8/comments", "author": null, "committer": null, "parents": [{"sha": "3acdda2df1a74e1976268366f9f1abda979a6e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3acdda2df1a74e1976268366f9f1abda979a6e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3acdda2df1a74e1976268366f9f1abda979a6e7b"}], "stats": {"total": 88, "additions": 61, "deletions": 27}, "files": [{"sha": "2d93b5d2eca490d251d1c51841fa3488152b48e7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968676741a3482f53d35d1c64787d58d70889da8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968676741a3482f53d35d1c64787d58d70889da8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=968676741a3482f53d35d1c64787d58d70889da8", "patch": "@@ -1,3 +1,20 @@\n+2009-11-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par_sco.adb (Traverse_Handled_Statement_Sequence): Do not emit SCO's\n+\tfor null statements that do not come from source.\n+\t* sinfo.ads: Clarify documentation of Comes_From_Source\n+\n+2009-11-30  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-nmsc.adb (Add_Source): Use Display_Name for both projects when\n+\tdisplaying the paths in error message.\n+\n+2009-11-30  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* adaint.h, adaint.c (file_attributes): force the use of unsigned char.\n+ \tOn some platforms, \"char\" is signed, on others unsigned, so we\n+ \texplicitly specify the one we expect\n+\n 2009-11-30  Matthew Heaney  <heaney@adacore.com>\n \n \t* a-coinve.adb (Insert): Move exception handler closer to point where"}, {"sha": "54b32232bb89c991055de90bf4a4974797d9b55c", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968676741a3482f53d35d1c64787d58d70889da8/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968676741a3482f53d35d1c64787d58d70889da8/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=968676741a3482f53d35d1c64787d58d70889da8", "patch": "@@ -377,19 +377,21 @@ to_ptr32 (char **ptr64)\n #define MAYBE_TO_PTR32(argv) argv\n #endif\n \n+const char ATTR_UNSET = 127;\n+\n void\n __gnat_reset_attributes\n   (struct file_attributes* attr)\n {\n-  attr->exists     = -1;\n+  attr->exists     = ATTR_UNSET;\n \n-  attr->writable   = -1;\n-  attr->readable   = -1;\n-  attr->executable = -1;\n+  attr->writable   = ATTR_UNSET;\n+  attr->readable   = ATTR_UNSET;\n+  attr->executable = ATTR_UNSET;\n \n-  attr->regular    = -1;\n-  attr->symbolic_link = -1;\n-  attr->directory = -1;\n+  attr->regular    = ATTR_UNSET;\n+  attr->symbolic_link = ATTR_UNSET;\n+  attr->directory = ATTR_UNSET;\n \n   attr->timestamp = (OS_Time)-2;\n   attr->file_length = -1;\n@@ -1799,7 +1801,7 @@ __gnat_stat (char *name, GNAT_STRUCT_STAT *statbuf)\n int\n __gnat_file_exists_attr (char* name, struct file_attributes* attr)\n {\n-   if (attr->exists == -1) {\n+   if (attr->exists == ATTR_UNSET) {\n #ifdef __MINGW32__\n       /*  On Windows do not use __gnat_stat() because of a bug in Microsoft\n          _stat() routine. When the system time-zone is set with a negative\n@@ -1865,7 +1867,7 @@ __gnat_is_absolute_path (char *name, int length)\n int\n __gnat_is_regular_file_attr (char* name, struct file_attributes* attr)\n {\n-   if (attr->regular == -1) {\n+   if (attr->regular == ATTR_UNSET) {\n       __gnat_stat_to_attr (-1, name, attr);\n    }\n \n@@ -1883,7 +1885,7 @@ __gnat_is_regular_file (char *name)\n int\n __gnat_is_directory_attr (char* name, struct file_attributes* attr)\n {\n-   if (attr->directory == -1) {\n+   if (attr->directory == ATTR_UNSET) {\n       __gnat_stat_to_attr (-1, name, attr);\n    }\n \n@@ -2091,7 +2093,7 @@ __gnat_can_use_acl (TCHAR *wname)\n int\n __gnat_is_readable_file_attr (char* name, struct file_attributes* attr)\n {\n-   if (attr->readable == -1) {\n+   if (attr->readable == ATTR_UNSET) {\n #if defined (_WIN32) && !defined (RTX)\n      TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n      GENERIC_MAPPING GenericMapping;\n@@ -2125,7 +2127,7 @@ __gnat_is_readable_file (char *name)\n int\n __gnat_is_writable_file_attr (char* name, struct file_attributes* attr)\n {\n-   if (attr->writable == -1) {\n+   if (attr->writable == ATTR_UNSET) {\n #if defined (_WIN32) && !defined (RTX)\n      TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n      GENERIC_MAPPING GenericMapping;\n@@ -2163,7 +2165,7 @@ __gnat_is_writable_file (char *name)\n int\n __gnat_is_executable_file_attr (char* name, struct file_attributes* attr)\n {\n-   if (attr->executable == -1) {\n+   if (attr->executable == ATTR_UNSET) {\n #if defined (_WIN32) && !defined (RTX)\n      TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n      GENERIC_MAPPING GenericMapping;\n@@ -2314,7 +2316,7 @@ __gnat_set_non_readable (char *name)\n int\n __gnat_is_symbolic_link_attr (char* name, struct file_attributes* attr)\n {\n-   if (attr->symbolic_link == -1) {\n+   if (attr->symbolic_link == ATTR_UNSET) {\n #if defined (__vxworks) || defined (__nucleus__)\n       attr->symbolic_link = 0;\n "}, {"sha": "7af079e35a961510d071f9e367c09278bfefecb0", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968676741a3482f53d35d1c64787d58d70889da8/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968676741a3482f53d35d1c64787d58d70889da8/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=968676741a3482f53d35d1c64787d58d70889da8", "patch": "@@ -74,15 +74,15 @@ typedef long OS_Time;\n */\n \n struct file_attributes {\n-  char exists;\n+  unsigned char exists;\n \n-  char writable;\n-  char readable;\n-  char executable;\n+  unsigned char writable;\n+  unsigned char readable;\n+  unsigned char executable;\n \n-  char symbolic_link;\n-  char regular;\n-  char directory;\n+  unsigned char symbolic_link;\n+  unsigned char regular;\n+  unsigned char directory;\n \n   OS_Time timestamp;\n   long file_length;"}, {"sha": "dddc3fffc7108fb36c5782913e831811be5a3584", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968676741a3482f53d35d1c64787d58d70889da8/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968676741a3482f53d35d1c64787d58d70889da8/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=968676741a3482f53d35d1c64787d58d70889da8", "patch": "@@ -989,7 +989,14 @@ package body Par_SCO is\n       Handler : Node_Id;\n \n    begin\n-      if Present (N) then\n+\n+      --  for package bodies without a statement part, the parser adds an\n+      --  empty one, to normalize the representation. The null statement\n+      --  therein, which does not come from source, does not get a SCO.\n+\n+      if Present (N)\n+        and then Comes_From_Source (N)\n+      then\n          Traverse_Declarations_Or_Statements (Statements (N));\n \n          if Present (Exception_Handlers (N)) then"}, {"sha": "35d7e041bb641410c5aff10d38d95458a82e8c43", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968676741a3482f53d35d1c64787d58d70889da8/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968676741a3482f53d35d1c64787d58d70889da8/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=968676741a3482f53d35d1c64787d58d70889da8", "patch": "@@ -655,7 +655,7 @@ package body Prj.Nmsc is\n                   Location, Project);\n \n                Error_Msg_Name_1 := Project.Name;\n-               Error_Msg_Name_2 := Name_Id (Path.Name);\n+               Error_Msg_Name_2 := Name_Id (Path.Display_Name);\n                Error_Msg\n                  (Data.Flags, \"\\  project %%, %%\", Location, Project);\n "}, {"sha": "bb6012904a9d004cf340538639723fa051e9339b", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/968676741a3482f53d35d1c64787d58d70889da8/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/968676741a3482f53d35d1c64787d58d70889da8/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=968676741a3482f53d35d1c64787d58d70889da8", "patch": "@@ -462,10 +462,18 @@ package Sinfo is\n    --    reasons.\n \n    --  Comes_From_Source (Flag2)\n-   --    This flag is on for any nodes built by the scanner or parser from the\n-   --    source program, and off for any nodes built by the analyzer or\n-   --    expander. It indicates that a node comes from the original source.\n-   --    This flag is defined in Atree.\n+   --    This flag is set if the node comes directly from an explicit construct\n+   --    in the source. It is normally on for any nodes built by the scanner or\n+   --    parser from the source program, with the exception that in a few cases\n+   --    the parser adds nodes to normalize the representation (in particular\n+   --    a null statement is added to a package body if there is no begin/end\n+   --    initialization section.\n+   --\n+   --    Most nodes inserted by the analyzer or expander are not considered\n+   --    as coming from source, so the flag is off for such nodes. In a few\n+   --    cases, the expander constructs nodes closely equivalent to nodes\n+   --    from the source program (e.g. the allocator built for build-in-place\n+   --    case), and the Comes_From_Source flag is deliberately set.\n \n    --  Error_Posted (Flag3)\n    --    This flag is used to avoid multiple error messages being posted on or"}]}