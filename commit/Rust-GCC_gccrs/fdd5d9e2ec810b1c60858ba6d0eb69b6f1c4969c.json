{"sha": "fdd5d9e2ec810b1c60858ba6d0eb69b6f1c4969c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRkNWQ5ZTJlYzgxMGIxYzYwODU4YmE2ZDBlYjY5YjZmMWM0OTY5Yw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-10-05T17:10:42Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-10-05T17:10:42Z"}, "message": "builtins.c (expand_builtin_memmove): Delete duplicate code and accept a tree type for the result.\n\n\t* builtins.c (expand_builtin_memmove): Delete duplicate code\n\tand accept a tree type for the result.\n\t(expand_builtin_bcopy): Accept a tree type for the result.\n\t(fold_builtin_memmove): Accept an arglist and tree type for\n\tthe result.\n\nFrom-SVN: r88563", "tree": {"sha": "f701a614c5d5177f2070b1870eafb26d3f72961e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f701a614c5d5177f2070b1870eafb26d3f72961e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdd5d9e2ec810b1c60858ba6d0eb69b6f1c4969c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd5d9e2ec810b1c60858ba6d0eb69b6f1c4969c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdd5d9e2ec810b1c60858ba6d0eb69b6f1c4969c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd5d9e2ec810b1c60858ba6d0eb69b6f1c4969c/comments", "author": null, "committer": null, "parents": [{"sha": "5544148e928e9fb556792281b5a856f89d265d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5544148e928e9fb556792281b5a856f89d265d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5544148e928e9fb556792281b5a856f89d265d77"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "a94318e9d786f484d0f36af5bd0fc1d12989f10e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd5d9e2ec810b1c60858ba6d0eb69b6f1c4969c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd5d9e2ec810b1c60858ba6d0eb69b6f1c4969c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdd5d9e2ec810b1c60858ba6d0eb69b6f1c4969c", "patch": "@@ -1,3 +1,11 @@\n+2004-10-05  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_memmove): Delete duplicate code\n+\tand accept a tree type for the result.\n+\t(expand_builtin_bcopy): Accept a tree type for the result.\n+\t(fold_builtin_memmove): Accept an arglist and tree type for\n+\tthe result.\n+\n 2004-10-05  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_dump_pool): Remove return value."}, {"sha": "b4ddcdb1d9c6a0574e1076397e40e3badc382ecb", "filename": "gcc/builtins.c", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd5d9e2ec810b1c60858ba6d0eb69b6f1c4969c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd5d9e2ec810b1c60858ba6d0eb69b6f1c4969c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=fdd5d9e2ec810b1c60858ba6d0eb69b6f1c4969c", "patch": "@@ -113,8 +113,8 @@ static rtx expand_builtin_strspn (tree, rtx, enum machine_mode);\n static rtx expand_builtin_strcspn (tree, rtx, enum machine_mode);\n static rtx expand_builtin_memcpy (tree, rtx, enum machine_mode);\n static rtx expand_builtin_mempcpy (tree, rtx, enum machine_mode, int);\n-static rtx expand_builtin_memmove (tree, rtx, enum machine_mode);\n-static rtx expand_builtin_bcopy (tree);\n+static rtx expand_builtin_memmove (tree, tree, rtx, enum machine_mode);\n+static rtx expand_builtin_bcopy (tree, tree);\n static rtx expand_builtin_strcpy (tree, rtx, enum machine_mode);\n static rtx expand_builtin_stpcpy (tree, rtx, enum machine_mode);\n static rtx builtin_strncpy_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n@@ -163,7 +163,7 @@ static tree fold_builtin_round (tree);\n static tree fold_builtin_bitop (tree);\n static tree fold_builtin_memcpy (tree);\n static tree fold_builtin_mempcpy (tree);\n-static tree fold_builtin_memmove (tree);\n+static tree fold_builtin_memmove (tree, tree);\n static tree fold_builtin_strchr (tree);\n static tree fold_builtin_memcmp (tree);\n static tree fold_builtin_strcmp (tree);\n@@ -2735,7 +2735,8 @@ expand_builtin_mempcpy (tree arglist, rtx target, enum machine_mode mode,\n    if we failed the caller should emit a normal call.  */\n \n static rtx\n-expand_builtin_memmove (tree arglist, rtx target, enum machine_mode mode)\n+expand_builtin_memmove (tree arglist, tree type, rtx target,\n+\t\t\tenum machine_mode mode)\n {\n   if (!validate_arglist (arglist,\n \t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n@@ -2749,27 +2750,15 @@ expand_builtin_memmove (tree arglist, rtx target, enum machine_mode mode)\n       unsigned int src_align = get_pointer_alignment (src, BIGGEST_ALIGNMENT);\n       unsigned int dest_align\n \t= get_pointer_alignment (dest, BIGGEST_ALIGNMENT);\n+      tree result = fold_builtin_memmove (arglist, type);\n+\n+      if (result)\n+\texpand_expr (result, target, mode, EXPAND_NORMAL);\n \n       /* If DEST is not a pointer type, call the normal function.  */\n       if (dest_align == 0)\n \treturn 0;\n \n-      /* If the LEN parameter is zero, return DEST.  */\n-      if (integer_zerop (len))\n-\t{\n-\t  /* Evaluate and ignore SRC in case it has side-effects.  */\n-\t  expand_expr (src, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-\t  return expand_expr (dest, target, mode, EXPAND_NORMAL);\n-\t}\n-\n-      /* If SRC and DEST are the same (and not volatile), return DEST.  */\n-      if (operand_equal_p (src, dest, 0))\n-\t{\n-\t  /* Evaluate and ignore LEN in case it has side-effects.  */\n-\t  expand_expr (len, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-\t  return expand_expr (dest, target, mode, EXPAND_NORMAL);\n-\t}\n-\n       /* If either SRC is not a pointer type, don't do this\n          operation in-line.  */\n       if (src_align == 0)\n@@ -2805,7 +2794,7 @@ expand_builtin_memmove (tree arglist, rtx target, enum machine_mode mode)\n    if we failed the caller should emit a normal call.  */\n \n static rtx\n-expand_builtin_bcopy (tree arglist)\n+expand_builtin_bcopy (tree arglist, tree type)\n {\n   tree src, dest, size, newarglist;\n \n@@ -2826,7 +2815,7 @@ expand_builtin_bcopy (tree arglist)\n   newarglist = tree_cons (NULL_TREE, src, newarglist);\n   newarglist = tree_cons (NULL_TREE, dest, newarglist);\n \n-  return expand_builtin_memmove (newarglist, const0_rtx, VOIDmode);\n+  return expand_builtin_memmove (newarglist, type, const0_rtx, VOIDmode);\n }\n \n #ifndef HAVE_movstr\n@@ -5491,13 +5480,13 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     case BUILT_IN_MEMMOVE:\n-      target = expand_builtin_memmove (arglist, target, mode);\n+      target = expand_builtin_memmove (arglist, TREE_TYPE (exp), target, mode);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_BCOPY:\n-      target = expand_builtin_bcopy (arglist);\n+      target = expand_builtin_bcopy (arglist, TREE_TYPE (exp));\n       if (target)\n \treturn target;\n       break;\n@@ -7049,9 +7038,8 @@ fold_builtin_mempcpy (tree exp)\n    NULL_TREE if no simplification can be made.  */\n \n static tree\n-fold_builtin_memmove (tree exp)\n+fold_builtin_memmove (tree arglist, tree type)\n {\n-  tree arglist = TREE_OPERAND (exp, 1);\n   tree dest, src, len;\n \n   if (!validate_arglist (arglist,\n@@ -7064,11 +7052,11 @@ fold_builtin_memmove (tree exp)\n \n   /* If the LEN parameter is zero, return DEST.  */\n   if (integer_zerop (len))\n-    return omit_one_operand (TREE_TYPE (exp), dest, src);\n+    return omit_one_operand (type, dest, src);\n \n   /* If SRC and DEST are the same (and not volatile), return DEST.  */\n   if (operand_equal_p (src, dest, 0))\n-    return omit_one_operand (TREE_TYPE (exp), dest, len);\n+    return omit_one_operand (type, dest, len);\n \n   return 0;\n }\n@@ -8014,7 +8002,7 @@ fold_builtin_1 (tree exp, bool ignore)\n       return fold_builtin_mempcpy (exp);\n \n     case BUILT_IN_MEMMOVE:\n-      return fold_builtin_memmove (exp);\n+      return fold_builtin_memmove (arglist, type);\n \n     case BUILT_IN_SIGNBIT:\n     case BUILT_IN_SIGNBITF:"}]}