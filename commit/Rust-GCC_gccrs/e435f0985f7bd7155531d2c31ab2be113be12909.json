{"sha": "e435f0985f7bd7155531d2c31ab2be113be12909", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQzNWYwOTg1ZjdiZDcxNTU1MzFkMmMzMWFiMmJlMTEzYmUxMjkwOQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2011-01-26T17:49:56Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2011-01-26T17:49:56Z"}, "message": "re PR target/46997 (new ia64 vector instructions are broken on HP-UX (big-endian))\n\n2011-01-26  Steve Ellcey  <sje@cup.hp.com>\n\n\tPR target/46997\n\t* config/ia64/vect.md (mulv2si3): Enable and fix for TARGET_BIG_ENDIAN.\n\t(*mux2): Ditto.\n\t(vec_extract_evenodd_help): Ditto.\n\t(vec_extract_evenv4hi): Ditto.\n\t(vec_extract_oddv4hi): Ditto.\n\t(vec_interleave_lowv2si): Ditto.\n\t(vec_interleave_highv2si): Ditto.\n\t(vec_extract_evenv2si): Ditto.\n\t(vec_extract_oddv2si: Ditto.\n\t(vec_pack_trunc_v2si): Ditto.\n\nFrom-SVN: r169296", "tree": {"sha": "41638ec2d0bc5ca379bb185a164b797ab3aa1052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41638ec2d0bc5ca379bb185a164b797ab3aa1052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e435f0985f7bd7155531d2c31ab2be113be12909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e435f0985f7bd7155531d2c31ab2be113be12909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e435f0985f7bd7155531d2c31ab2be113be12909", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e435f0985f7bd7155531d2c31ab2be113be12909/comments", "author": null, "committer": null, "parents": [{"sha": "34f0eee0f62579c181a641d59f8ae63913ca8cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f0eee0f62579c181a641d59f8ae63913ca8cb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f0eee0f62579c181a641d59f8ae63913ca8cb4"}], "stats": {"total": 89, "additions": 67, "deletions": 22}, "files": [{"sha": "9a0da01fc05e59356fda5e2bc845da9bad6ccd59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e435f0985f7bd7155531d2c31ab2be113be12909/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e435f0985f7bd7155531d2c31ab2be113be12909/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e435f0985f7bd7155531d2c31ab2be113be12909", "patch": "@@ -1,3 +1,17 @@\n+2011-01-26  Steve Ellcey  <sje@cup.hp.com>\n+\n+\tPR target/46997\n+\t* config/ia64/vect.md (mulv2si3): Enable and fix for TARGET_BIG_ENDIAN.\n+\t(*mux2): Ditto.\n+\t(vec_extract_evenodd_help): Ditto.\n+\t(vec_extract_evenv4hi): Ditto.\n+\t(vec_extract_oddv4hi): Ditto.\n+\t(vec_interleave_lowv2si): Ditto.\n+\t(vec_interleave_highv2si): Ditto.\n+\t(vec_extract_evenv2si): Ditto.\n+\t(vec_extract_oddv2si: Ditto.\n+\t(vec_pack_trunc_v2si): Ditto.\n+\n 2011-01-22  Jan Hubicka  <jh@suse.cz>\n \n \tPR target/47237"}, {"sha": "4e5977c05a2557ae18cf8db1556d1ed26c564f02", "filename": "gcc/config/ia64/vect.md", "status": "modified", "additions": 53, "deletions": 22, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e435f0985f7bd7155531d2c31ab2be113be12909/gcc%2Fconfig%2Fia64%2Fvect.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e435f0985f7bd7155531d2c31ab2be113be12909/gcc%2Fconfig%2Fia64%2Fvect.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvect.md?ref=e435f0985f7bd7155531d2c31ab2be113be12909", "patch": "@@ -370,7 +370,7 @@\n   [(set (match_operand:V2SI 0 \"gr_register_operand\" \"\")\n \t(mult:V2SI (match_operand:V2SI 1 \"gr_register_operand\" \"r\")\n \t\t   (match_operand:V2SI 2 \"gr_register_operand\" \"r\")))]\n-  \"!TARGET_BIG_ENDIAN\"\n+  \"\"\n {\n   rtx t0, t1, t2, t3, t4, t5, t6, t7, x;\n   rtx op1h = gen_lowpart (V4HImode, operands[1]);\n@@ -390,8 +390,12 @@\n      of the full 32-bit product.  */\n \n   /* T0 = CDBA.  */\n-  x = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (4, const1_rtx, const0_rtx,\n-\t\t\t\t\t     GEN_INT (3), const2_rtx));\n+  if (TARGET_BIG_ENDIAN)\n+    x = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (4, GEN_INT (3), const2_rtx,\n+\t\t\t\t\t       const1_rtx, const0_rtx));\n+  else\n+    x = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (4, const1_rtx, const0_rtx,\n+\t\t\t\t\t       GEN_INT (3), const2_rtx));\n   x = gen_rtx_VEC_SELECT (V4HImode, op1h, x);\n   emit_insn (gen_rtx_SET (VOIDmode, t0, x));\n \n@@ -971,10 +975,20 @@\n   \"\"\n {\n   int mask;\n-  mask  = INTVAL (operands[2]);\n-  mask |= INTVAL (operands[3]) << 2;\n-  mask |= INTVAL (operands[4]) << 4;\n-  mask |= INTVAL (operands[5]) << 6;\n+  if (TARGET_BIG_ENDIAN)\n+    {\n+      mask  = INTVAL (operands[2]) << 4;\n+      mask |= INTVAL (operands[3]) << 6;\n+      mask |= INTVAL (operands[4]);\n+      mask |= INTVAL (operands[5]) << 2;\n+    }\n+  else\n+    {\n+      mask  = INTVAL (operands[2]);\n+      mask |= INTVAL (operands[3]) << 2;\n+      mask |= INTVAL (operands[4]) << 4;\n+      mask |= INTVAL (operands[5]) << 6;\n+    }\n   operands[2] = GEN_INT (mask);\n   return \"%,mux2 %0 = %1, %2\";\n }\n@@ -988,16 +1002,19 @@\n \t\t     (const_int 2)\n \t\t     (const_int 1)\n \t\t     (const_int 3)])))]\n-  \"!TARGET_BIG_ENDIAN\")\n+  \"\")\n \n (define_expand \"vec_extract_evenv4hi\"\n   [(match_operand:V4HI 0 \"gr_register_operand\")\n    (match_operand:V4HI 1 \"gr_reg_or_0_operand\")\n    (match_operand:V4HI 2 \"gr_reg_or_0_operand\")]\n-  \"!TARGET_BIG_ENDIAN\"\n+  \"\"\n {\n   rtx temp = gen_reg_rtx (V4HImode);\n-  emit_insn (gen_mix2_r (temp, operands[1], operands[2]));\n+  if (TARGET_BIG_ENDIAN)\n+    emit_insn (gen_mix2_l (temp, operands[1], operands[2]));\n+  else\n+    emit_insn (gen_mix2_r (temp, operands[1], operands[2]));\n   emit_insn (gen_vec_extract_evenodd_helper (operands[0], temp));\n   DONE;\n })\n@@ -1006,10 +1023,13 @@\n   [(match_operand:V4HI 0 \"gr_register_operand\")\n    (match_operand:V4HI 1 \"gr_reg_or_0_operand\")\n    (match_operand:V4HI 2 \"gr_reg_or_0_operand\")]\n-  \"!TARGET_BIG_ENDIAN\"\n+  \"\"\n {\n   rtx temp = gen_reg_rtx (V4HImode);\n-  emit_insn (gen_mix2_l (temp, operands[1], operands[2]));\n+  if (TARGET_BIG_ENDIAN)\n+    emit_insn (gen_mix2_r (temp, operands[1], operands[2]));\n+  else\n+    emit_insn (gen_mix2_l (temp, operands[1], operands[2]));\n   emit_insn (gen_vec_extract_evenodd_helper (operands[0], temp));\n   DONE;\n })\n@@ -1035,7 +1055,7 @@\n {\n   /* Recall that vector elements are numbered in memory order.  */\n   if (TARGET_BIG_ENDIAN)\n-    return \"%,unpack4.h %0 = %r1, %r2\";\n+    return \"%,unpack4.l %0 = %r1, %r2\";\n   else\n     return \"%,unpack4.l %0 = %r2, %r1\";\n }\n@@ -1054,7 +1074,7 @@\n {\n   /* Recall that vector elements are numbered in memory order.  */\n   if (TARGET_BIG_ENDIAN)\n-    return \"%,unpack4.l %0 = %r1, %r2\";\n+    return \"%,unpack4.h %0 = %r1, %r2\";\n   else\n     return \"%,unpack4.h %0 = %r2, %r1\";\n }\n@@ -1064,21 +1084,29 @@\n   [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n    (match_operand:V2SI 1 \"gr_register_operand\" \"\")\n    (match_operand:V2SI 2 \"gr_register_operand\" \"\")]\n-  \"!TARGET_BIG_ENDIAN\"\n+  \"\"\n {\n-  emit_insn (gen_vec_interleave_lowv2si (operands[0], operands[1],\n-\t\t\t\t\t operands[2]));\n+  if (TARGET_BIG_ENDIAN)\n+    emit_insn (gen_vec_interleave_highv2si (operands[0], operands[1],\n+\t\t\t\t\t   operands[2]));\n+  else\n+    emit_insn (gen_vec_interleave_lowv2si (operands[0], operands[1],\n+\t\t\t\t\t   operands[2]));\n   DONE;\n })\n \n (define_expand \"vec_extract_oddv2si\"\n   [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n    (match_operand:V2SI 1 \"gr_register_operand\" \"\")\n    (match_operand:V2SI 2 \"gr_register_operand\" \"\")]\n-  \"!TARGET_BIG_ENDIAN\"\n+  \"\"\n {\n-  emit_insn (gen_vec_interleave_highv2si (operands[0], operands[1],\n-\t\t\t\t\t  operands[2]));\n+  if (TARGET_BIG_ENDIAN)\n+    emit_insn (gen_vec_interleave_lowv2si (operands[0], operands[1],\n+\t\t\t\t\t    operands[2]));\n+  else\n+    emit_insn (gen_vec_interleave_highv2si (operands[0], operands[1],\n+\t\t\t\t\t    operands[2]));\n   DONE;\n })\n \n@@ -1594,11 +1622,14 @@\n   [(match_operand:V4HI 0 \"gr_register_operand\" \"\")\n    (match_operand:V2SI 1 \"gr_register_operand\" \"\")\n    (match_operand:V2SI 2 \"gr_register_operand\" \"\")]\n-  \"!TARGET_BIG_ENDIAN\"\n+  \"\"\n {\n   rtx op1 = gen_lowpart(V4HImode, operands[1]);\n   rtx op2 = gen_lowpart(V4HImode, operands[2]);\n-  emit_insn (gen_vec_extract_evenv4hi (operands[0], op1, op2));\n+  if (TARGET_BIG_ENDIAN)\n+    emit_insn (gen_vec_extract_oddv4hi (operands[0], op1, op2));\n+  else\n+    emit_insn (gen_vec_extract_evenv4hi (operands[0], op1, op2));\n   DONE;\n })\n "}]}