{"sha": "67091cb476bc792a2050d2ce43f878c33465ae36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcwOTFjYjQ3NmJjNzkyYTIwNTBkMmNlNDNmODc4YzMzNDY1YWUzNg==", "commit": {"author": {"name": "Daniel Cederman", "email": "cederman@gaisler.com", "date": "2017-07-11T07:18:50Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-07-11T07:18:50Z"}, "message": "sparc.opt (mfix-ut700): New option.\n\n\t* config/sparc/sparc.opt (mfix-ut700): New option.\n\t(mfix-gr712rc): Likewise.\n\t(sparc_fix_b2bst): New variable.\n\t* doc/invoke.texi (SPARC options): Document them.\n\t(ARM options): Fix warnings.\n\t* config/sparc/sparc.c (sparc_do_work_around_errata): Insert NOP\n\tinstructions to prevent sequences that can trigger the store-store\n\terrata for certain LEON3FT processors.\n\t(pass_work_around_errata::gate): Also test sparc_fix_b2bst.\n\t(sparc_option_override): Set sparc_fix_b2bst appropriately.\n\t* config/sparc/sparc.md (fix_b2bst): New attribute.\n\t(in_branch_delay): Prevent stores in delay slot if fix_b2bst.\n\nFrom-SVN: r250114", "tree": {"sha": "d6324d01feead32d9eb13845d531efd48b661480", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6324d01feead32d9eb13845d531efd48b661480"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67091cb476bc792a2050d2ce43f878c33465ae36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67091cb476bc792a2050d2ce43f878c33465ae36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67091cb476bc792a2050d2ce43f878c33465ae36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67091cb476bc792a2050d2ce43f878c33465ae36/comments", "author": {"login": "doac", "id": 2056695, "node_id": "MDQ6VXNlcjIwNTY2OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2056695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doac", "html_url": "https://github.com/doac", "followers_url": "https://api.github.com/users/doac/followers", "following_url": "https://api.github.com/users/doac/following{/other_user}", "gists_url": "https://api.github.com/users/doac/gists{/gist_id}", "starred_url": "https://api.github.com/users/doac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doac/subscriptions", "organizations_url": "https://api.github.com/users/doac/orgs", "repos_url": "https://api.github.com/users/doac/repos", "events_url": "https://api.github.com/users/doac/events{/privacy}", "received_events_url": "https://api.github.com/users/doac/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "214f700a8bd18c37fc4a5390ccdee164d22443e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/214f700a8bd18c37fc4a5390ccdee164d22443e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/214f700a8bd18c37fc4a5390ccdee164d22443e2"}], "stats": {"total": 139, "additions": 133, "deletions": 6}, "files": [{"sha": "185ae3313eba5d02b54117725a1e565b0ac48518", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67091cb476bc792a2050d2ce43f878c33465ae36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67091cb476bc792a2050d2ce43f878c33465ae36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67091cb476bc792a2050d2ce43f878c33465ae36", "patch": "@@ -1,3 +1,18 @@\n+2017-07-11  Daniel Cederman  <cederman@gaisler.com>\n+\n+\t* config/sparc/sparc.opt (mfix-ut700): New option.\n+\t(mfix-gr712rc): Likewise.\n+\t(sparc_fix_b2bst): New variable.\n+\t* doc/invoke.texi (SPARC options): Document them.\n+\t(ARM options): Fix warnings.\n+\t* config/sparc/sparc.c (sparc_do_work_around_errata): Insert NOP\n+\tinstructions to prevent sequences that can trigger the store-store\n+\terrata for certain LEON3FT processors.\n+\t(pass_work_around_errata::gate): Also test sparc_fix_b2bst.\n+\t(sparc_option_override): Set sparc_fix_b2bst appropriately.\n+\t* config/sparc/sparc.md (fix_b2bst): New attribute.\n+\t(in_branch_delay): Prevent stores in delay slot if fix_b2bst.\n+\n 2017-07-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/81375"}, {"sha": "dae241111874becbcfe196a566e5383a8400ed58", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 86, "deletions": 2, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67091cb476bc792a2050d2ce43f878c33465ae36/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67091cb476bc792a2050d2ce43f878c33465ae36/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=67091cb476bc792a2050d2ce43f878c33465ae36", "patch": "@@ -920,6 +920,12 @@ mem_ref (rtx x)\n    to properly detect the various hazards.  Therefore, this machine specific\n    pass runs as late as possible.  */\n \n+/* True if INSN is a md pattern or asm statement.  */\n+#define USEFUL_INSN_P(INSN)\t\t\t\t\t\t\\\n+  (NONDEBUG_INSN_P (INSN)\t\t\t\t\t\t\\\n+   && GET_CODE (PATTERN (INSN)) != USE\t\t\t\t\t\\\n+   && GET_CODE (PATTERN (INSN)) != CLOBBER)\n+\n static unsigned int\n sparc_do_work_around_errata (void)\n {\n@@ -939,6 +945,81 @@ sparc_do_work_around_errata (void)\n \tif (rtx_sequence *seq = dyn_cast <rtx_sequence *> (PATTERN (insn)))\n \t  insn = seq->insn (1);\n \n+      /* Look for either of these two sequences:\n+\n+\t Sequence A:\n+\t 1. store of word size or less (e.g. st / stb / sth / stf)\n+\t 2. any single instruction that is not a load or store\n+\t 3. any store instruction (e.g. st / stb / sth / stf / std / stdf)\n+\n+\t Sequence B:\n+\t 1. store of double word size (e.g. std / stdf)\n+\t 2. any store instruction (e.g. st / stb / sth / stf / std / stdf)  */\n+      if (sparc_fix_b2bst\n+\t  && NONJUMP_INSN_P (insn)\n+\t  && (set = single_set (insn)) != NULL_RTX\n+\t  && MEM_P (SET_DEST (set)))\n+\t{\n+\t  /* Sequence B begins with a double-word store.  */\n+\t  bool seq_b = GET_MODE_SIZE (GET_MODE (SET_DEST (set))) == 8;\n+\t  rtx_insn *after;\n+\t  int i;\n+\n+\t  next = next_active_insn (insn);\n+\t  if (!next)\n+\t    break;\n+\n+\t  for (after = next, i = 0; i < 2; i++)\n+\t    {\n+\t      /* Skip empty assembly statements.  */\n+\t      if ((GET_CODE (PATTERN (after)) == UNSPEC_VOLATILE)\n+\t\t  || (USEFUL_INSN_P (after)\n+\t\t      && (asm_noperands (PATTERN (after))>=0)\n+\t\t      && !strcmp (decode_asm_operands (PATTERN (after),\n+\t\t\t\t\t\t       NULL, NULL, NULL,\n+\t\t\t\t\t\t       NULL, NULL), \"\")))\n+\t\tafter = next_active_insn (after);\n+\t      if (!after)\n+\t\tbreak;\n+\n+\t      /* If the insn is a branch, then it cannot be problematic.  */\n+\t      if (!NONJUMP_INSN_P (after)\n+\t\t  || GET_CODE (PATTERN (after)) == SEQUENCE)\n+\t\tbreak;\n+\n+\t      /* Sequence B is only two instructions long.  */\n+\t      if (seq_b)\n+\t\t{\n+\t\t  /* Add NOP if followed by a store.  */\n+\t\t  if ((set = single_set (after)) != NULL_RTX\n+\t\t      && MEM_P (SET_DEST (set)))\n+\t\t    insert_nop = true;\n+\n+\t\t  /* Otherwise it is ok.  */\n+\t\t  break;\n+\t\t}\n+\n+\t      /* If the second instruction is a load or a store,\n+\t\t then the sequence cannot be problematic.  */\n+\t      if (i == 0)\n+\t\t{\n+\t\t  if (((set = single_set (after)) != NULL_RTX)\n+\t\t      && (MEM_P (SET_DEST (set)) || MEM_P (SET_SRC (set))))\n+\t\t    break;\n+\n+\t\t  after = next_active_insn (after);\n+\t\t  if (!after)\n+\t\t    break;\n+\t\t}\n+\n+\t      /* Add NOP if third instruction is a store.  */\n+\t      if (i == 1\n+\t\t  && ((set = single_set (after)) != NULL_RTX)\n+\t\t  && MEM_P (SET_DEST (set)))\n+\t\tinsert_nop = true;\n+\t    }\n+\t}\n+      else\n       /* Look for a single-word load into an odd-numbered FP register.  */\n       if (sparc_fix_at697f\n \t  && NONJUMP_INSN_P (insn)\n@@ -1191,8 +1272,7 @@ class pass_work_around_errata : public rtl_opt_pass\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      /* The only errata we handle are those of the AT697F and UT699.  */\n-      return sparc_fix_at697f != 0 || sparc_fix_ut699 != 0;\n+      return sparc_fix_at697f || sparc_fix_ut699 || sparc_fix_b2bst;\n     }\n \n   virtual unsigned int execute (function *)\n@@ -1557,6 +1637,10 @@ sparc_option_override (void)\n   if (!(target_flags_explicit & MASK_LRA))\n     target_flags |= MASK_LRA;\n \n+  /* Enable the back-to-back store errata workaround for LEON3FT.  */\n+  if (sparc_fix_ut699 || sparc_fix_ut700 || sparc_fix_gr712rc)\n+    sparc_fix_b2bst = 1;\n+\n   /* Supply a default value for align_functions.  */\n   if (align_functions == 0)\n     {"}, {"sha": "afdc7d12700b1276a5cc265a582df7c0a0aeaf54", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67091cb476bc792a2050d2ce43f878c33465ae36/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67091cb476bc792a2050d2ce43f878c33465ae36/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=67091cb476bc792a2050d2ce43f878c33465ae36", "patch": "@@ -426,6 +426,10 @@\n    (symbol_ref \"(sparc_fix_ut699 != 0\n \t\t ? FIX_UT699_TRUE : FIX_UT699_FALSE)\"))\n \n+(define_attr \"fix_b2bst\" \"false,true\"\n+   (symbol_ref \"(sparc_fix_b2bst != 0\n+\t\t ? FIX_B2BST_TRUE : FIX_B2BST_FALSE)\"))\n+\n ;; Length (in # of insns).\n ;; Beware that setting a length greater or equal to 3 for conditional branches\n ;; has a side-effect (see output_cbranch and output_v9branch).\n@@ -573,6 +577,8 @@\n (define_attr \"in_branch_delay\" \"false,true\"\n   (cond [(eq_attr \"type\" \"uncond_branch,branch,cbcond,uncond_cbcond,call,sibcall,call_no_delay_slot,multi\")\n \t   (const_string \"false\")\n+\t (and (eq_attr \"fix_b2bst\" \"true\") (eq_attr \"type\" \"store,fpstore\"))\n+\t   (const_string \"false\")\n \t (and (eq_attr \"fix_ut699\" \"true\") (eq_attr \"type\" \"load,sload\"))\n \t   (const_string \"false\")\n \t (and (eq_attr \"fix_ut699\" \"true\")"}, {"sha": "ae63d2018e3a8ee0948470a009ababbf529d4860", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67091cb476bc792a2050d2ce43f878c33465ae36/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67091cb476bc792a2050d2ce43f878c33465ae36/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=67091cb476bc792a2050d2ce43f878c33465ae36", "patch": "@@ -237,6 +237,18 @@ mfix-ut699\n Target Report RejectNegative Var(sparc_fix_ut699)\n Enable workarounds for the errata of the UT699 processor.\n \n+mfix-ut700\n+Target Report RejectNegative Var(sparc_fix_ut700)\n+Enable workarounds for the errata of the UT699E/UT700 processor.\n+\n+mfix-gr712rc\n+Target Report RejectNegative Var(sparc_fix_gr712rc)\n+Enable workarounds for the errata of the GR712RC processor.\n+\n+;; Enable workaround for back-to-back store errata\n+TargetVariable\n+unsigned int sparc_fix_b2bst\n+\n Mask(LONG_DOUBLE_128)\n ;; Use 128-bit long double\n "}, {"sha": "f93c825f15dcaeba051cc8763f0386672a0fc0f6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67091cb476bc792a2050d2ce43f878c33465ae36/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67091cb476bc792a2050d2ce43f878c33465ae36/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=67091cb476bc792a2050d2ce43f878c33465ae36", "patch": "@@ -1128,8 +1128,8 @@ See RS/6000 and PowerPC Options.\n -mvis2  -mno-vis2  -mvis3  -mno-vis3 @gol\n -mvis4 -mno-vis4 -mvis4b -mno-vis4b @gol\n -mcbcond  -mno-cbcond  -mfmaf  -mno-fmaf  @gol\n--mpopc  -mno-popc  -msubxc  -mno-subxc@gol\n--mfix-at697f  -mfix-ut699 @gol\n+-mpopc  -mno-popc  -msubxc  -mno-subxc @gol\n+-mfix-at697f  -mfix-ut699  -mfix-ut700  -mfix-gr712rc @gol\n -mlra  -mno-lra}\n \n @emph{SPU Options}\n@@ -15205,7 +15205,7 @@ default is dependent on the selected target architecture.  For ARMv6\n and later architectures the default is BE8, for older architectures\n the default is BE32.  BE32 format has been deprecated by ARM.\n \n-@item -march=@var{name@r{[}+extension@dots{}@r{]}}\n+@item -march=@var{name}@r{[}+extension@dots{}@r{]}\n @opindex march\n This specifies the name of the target ARM architecture.  GCC uses this\n name to determine what kind of instructions it can emit when generating\n@@ -15579,7 +15579,7 @@ of the build computer.  At present, this feature is only supported on\n GNU/Linux, and not all architectures are recognized.  If the auto-detect is\n unsuccessful the option has no effect.\n \n-@item -mcpu=@var{name@r{[}+extension@dots{}@r{]}}\n+@item -mcpu=@var{name}@r{[}+extension@dots{}@r{]}\n @opindex mcpu\n This specifies the name of the target ARM processor.  GCC uses this name\n to derive the name of the target ARM architecture (as if specified\n@@ -24102,6 +24102,16 @@ processor (which corresponds to erratum #13 of the AT697E processor).\n @opindex mfix-ut699\n Enable the documented workarounds for the floating-point errata and the data\n cache nullify errata of the UT699 processor.\n+\n+@item -mfix-ut700\n+@opindex mfix-ut700\n+Enable the documented workaround for the back-to-back store errata of\n+the UT699E/UT700 processor.\n+\n+@item -mfix-gr712rc\n+@opindex mfix-gr712rc\n+Enable the documented workaround for the back-to-back store errata of\n+the GR712RC processor.\n @end table\n \n These @samp{-m} options are supported in addition to the above"}]}