{"sha": "5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYxN2MxMzVlN2ZlNGVhNGQ2N2JkZjNmYmU5NGFjZmFjZmE4N2IxNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-08-03T06:13:04Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-08-03T06:13:04Z"}, "message": "re PR target/36992 (Very stange code for _mm_move_epi64)\n\n\tPR target/36992\n\t* config/i386/sse.md (vec_concatv2di): Add Y2 constraint to\n\talternative 0 of operand 1.\n\t(*vec_concatv2di_rex64_sse): Ditto.\n\t(*vec_concatv2di_rex64_sse4_1): Add x constraint to alternative 0\n\tof operand 1.\n\t(*sse2_storeq_rex64): Penalize allocation of \"r\" registers.\n\t* config/i386/mmx.md (*mov<mode>_internal_rex64): Penalize allocation\n\tof \"Y2\" registers to avoid SSE <-> MMX conversions for DImode moves.\n\t(*movv2sf_internal_rex64): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/36992\n\t* gcc.target/i386/pr36992-1.c: New test.\n\t* gcc.target/i386/pr36992-2.c: Ditto.\n\nFrom-SVN: r138564", "tree": {"sha": "56be5e1a2f0236eb84f46e1fb1388f1d95be1d9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56be5e1a2f0236eb84f46e1fb1388f1d95be1d9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16/comments", "author": null, "committer": null, "parents": [{"sha": "d6833cf9a69f8b88e36a37f06d0c038161f5c0fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6833cf9a69f8b88e36a37f06d0c038161f5c0fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6833cf9a69f8b88e36a37f06d0c038161f5c0fb"}], "stats": {"total": 179, "additions": 102, "deletions": 77}, "files": [{"sha": "7ff6c0c6e04e7cf824257d1a2d8bd6c6567a44f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 54, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16", "patch": "@@ -1,3 +1,16 @@\n+2008-08-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/36992\n+\t* config/i386/sse.md (vec_concatv2di): Add Y2 constraint to\n+\talternative 0 of operand 1.\n+\t(*vec_concatv2di_rex64_sse): Ditto.\n+\t(*vec_concatv2di_rex64_sse4_1): Add x constraint to alternative 0\n+\tof operand 1.\n+\t(*sse2_storeq_rex64): Penalize allocation of \"r\" registers.\n+\t* config/i386/mmx.md (*mov<mode>_internal_rex64): Penalize allocation\n+\tof \"Y2\" registers to avoid SSE <-> MMX conversions for DImode moves.\n+\t(*movv2sf_internal_rex64): Ditto.\n+\n 2008-08-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR target/35252\n@@ -20,16 +33,16 @@\n \t* matrix-reorg.c: Re-enable all code.\n \t(struct malloc_call_data): Change CALL_STMT to gimple type.\n \t(collect_data_for_malloc_call): Tuplify.\n- \t(struct access_site_info): Change STMT to gimple type.\n+\t(struct access_site_info): Change STMT to gimple type.\n \t(struct matrix_info): Change MIN_INDIRECT_LEVEL_ESCAPE_STMT,\n \tand MALLOC_FOR_LEVEL to gimple and gimple pointer type.\n \t(struct free_info): Change STMT to gimple type.\n- \t(struct matrix_access_phi_node):  Change PHI to gimple type.\n+\t(struct matrix_access_phi_node):  Change PHI to gimple type.\n \t(get_inner_of_cast_expr): Remove.\n \t(may_flatten_matrices_1): Tuplify.\n \t(may_flatten_matrices): Ditto.\n \t(mark_min_matrix_escape_level): Ditto.\n- \t(ssa_accessed_in_tree): Refactor statement RHS related code into ...\n+\t(ssa_accessed_in_tree): Refactor statement RHS related code into ...\n \t(ssa_accessed_in_call_rhs): New\n \t(ssa_accessed_in_assign_rhs): New\n \t(record_access_alloc_site_info): Tuplify.\n@@ -50,7 +63,7 @@\n \t(can_calculate_expr_before_stmt): Factor out statement related code\n \tinto ...\n \t(can_calculate_stmt_before_stmt): New.\n- \t(check_allocation_function): Tuplify.\n+\t(check_allocation_function): Tuplify.\n \t(find_sites_in_func): Ditto.\n \t(record_all_accesses_in_func): Ditto.\n \t(transform_access_sites): Ditto.\n@@ -161,13 +174,12 @@\n \t* dwarf2out.c (based_loc_descr): Check crtl->stack_realign_tried\n \tfor stack alignment.\n \n-\t* function.h (rtl_data): Add stack_realign_tried.  Update\n-\tcomments.\n+\t* function.h (rtl_data): Add stack_realign_tried.  Update comments.\n \n 2008-07-31  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c (sh_canonical_va_list_type): Remove.\n-\t(TARGET_CANONICAL_VA_LIST_TYPE): Remove.\t    \n+\t(TARGET_CANONICAL_VA_LIST_TYPE): Remove.\n \n 2008-07-31  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -203,8 +215,7 @@\n \n \t* passes.c (init_optimization_passes): Always call\n \tpass_early_warn_uninitialized.\n-\t* opts.c (decode_options): Do not warn about -Wuninitialized\n-\tat -O0.\n+\t* opts.c (decode_options): Do not warn about -Wuninitialized at -O0.\n \t* doc/invoke.texi (-Wuninitialized): Correct for enabling at -O0.\n \t* doc/passes.texi (Warn for uninitialized variables): Adjust.\n \n@@ -312,8 +323,7 @@\n \t(TARGET_CALLS): Add TARGET_UPDATE_STACK_BOUNDARY and\n \tTARGET_GET_DRAP_RTX.\n \n-\t* target.h (gcc_target): Add update_stack_boundary and\n-\tget_drap_rtx.\n+\t* target.h (gcc_target): Add update_stack_boundary and get_drap_rtx.\n \n \t* tree-vectorizer.c (vect_can_force_dr_alignment_p): Replace\n \tSTACK_BOUNDARY with MAX_STACK_ALIGNMENT.\n@@ -360,16 +370,14 @@\n \tforce_align_arg_pointer.\n \t(ix86_handle_cconv_attribute): Likewise.\n \t(ix86_function_regparm): Likewise.\n-\t(setup_incoming_varargs_64): Don't set stack_alignment_needed\n-\there.\n+\t(setup_incoming_varargs_64): Don't set stack_alignment_needed here.\n \t(ix86_va_start): Replace virtual_incoming_args_rtx with\n \tcrtl->args.internal_arg_pointer.\n \t(ix86_select_alt_pic_regnum): Check DRAP register.\n \t(ix86_save_reg): Replace force_align_arg_pointer with drap_reg.\n \t(ix86_compute_frame_layout): Compute frame layout wrt stack\n \trealignment.\n-\t(ix86_internal_arg_pointer): Just return\n-\tvirtual_incoming_args_rtx.\n+\t(ix86_internal_arg_pointer): Just return virtual_incoming_args_rtx.\n \t(ix86_expand_prologue): Decide if stack realignment is needed\n \tand generate prologue code accordingly.\n \t(ix86_expand_epilogue): Generate epilogue code wrt stack\n@@ -448,8 +456,8 @@\n \n 2008-07-30  Rafael Avila de Espindola  <espindola@google.com>\n \n-       * final.c (call_from_call_insn): New.\n-       (final_scan_insn): Call assemble_external on FUNCTION_DECLs.\n+\t* final.c (call_from_call_insn): New.\n+\t(final_scan_insn): Call assemble_external on FUNCTION_DECLs.\n \n 2008-07-30  Paolo Bonzini  <bonzini@gnu.org>\n \n@@ -522,8 +530,7 @@\n \n 2008-07-29  Richard Guenther  <rguenther@suse.de>\n \n-\t* gimplify.c (gimplify_expr): Clear TREE_SIDE_EFFECTS for\n-\tOBJ_TYPE_REF.\n+\t* gimplify.c (gimplify_expr): Clear TREE_SIDE_EFFECTS for OBJ_TYPE_REF.\n \n 2008-07-29  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -599,8 +606,7 @@\n \t(insert_fake_stores): Remove.\n \t(realify_fake_stores): Likewise.\n \t(execute_pre): Remove dead code.\n-\t* tree-ssa-structalias.c (get_constraint_for_1): Remove tcc_unary\n-\tcase.\n+\t* tree-ssa-structalias.c (get_constraint_for_1): Remove tcc_unary case.\n \t(find_func_aliases): Deal with it here instead.\n \tRe-enable gcc_unreachable call.\n \n@@ -838,7 +844,8 @@\n \n 2008-07-25  Jan Hubicka  <jh@suse.cz>\n \n-\t* cgraph.c (cgraph_function_possibly_inlined_p): Do not rely on DECL_INLINE.\n+\t* cgraph.c (cgraph_function_possibly_inlined_p): Do not rely on\n+\tDECL_INLINE.\n \t* cgraphunit.c (record_cdtor_fn): Do not initialize DECL_INLINE\n \t(cgraph_preserve_function_body_p): Do not rely on DECL_INLINE.\n \t* dojump.c (clear_pending_stack_adjust): Likewise.\n@@ -985,8 +992,7 @@\n \n \t* config/sh/sh.h (OPTIMIZATION_OPTIONS): Set flag_omit_frame_pointer\n \tto 2 instead of -1.\n-\t(OVERRIDE_OPTIONS): Check if flag_omit_frame_pointer is equal\n-\tto 2.\n+\t(OVERRIDE_OPTIONS): Check if flag_omit_frame_pointer is equal to 2.\n \n 2008-07-24  Kai Tietz  <kai.tietz@onevision.com>\n \n@@ -1351,15 +1357,13 @@\n \t(optimize_args): New static vector to remember the optimization\n \targuments.\n \t(parse_optimize_options): New function to set up the optimization\n-\targuments from either the optimize attribute or #pragma GCC\n-\toptimize.\n+\targuments from either the optimize attribute or #pragma GCC optimize.\n \n \t* c-common.h (c_cpp_builtins_optimize_pragma): Add declaration.\n \t(builtin_define_std): Ditto.\n \n \t* config.gcc (i[3467]86-*-*): Add i386-c.o to C/C++ languages.\n-\tAdd t-i386 Makefile fragment to add i386-c.o and i386.o\n-\tdependencies.\n+\tAdd t-i386 Makefile fragment to add i386-c.o and i386.o dependencies.\n \t(x86_64-*-*): Ditto.\n \n \t* Makefile.in (TREE_H): Add options.h.\n@@ -1377,12 +1381,10 @@\n \t(Save): Document Save option to create target specific options\n \tthat can be saved/restored on a function specific context.\n \n-\t* doc/c-tree.texi (DECL_FUNCTION_SPECIFIC_TARGET): Document new\n-\tmacro.\n+\t* doc/c-tree.texi (DECL_FUNCTION_SPECIFIC_TARGET): Document new macro.\n \t(DECL_FUNCTION_SPECIFIC_OPTIMIZATION): Ditto.\n \n-\t* doc/tm.texi (TARGET_VALID_OPTION_ATTRIBUTE_P): Document new\n-\thook.\n+\t* doc/tm.texi (TARGET_VALID_OPTION_ATTRIBUTE_P): Document new hook.\n \t(TARGET_OPTION_SAVE): Ditto.\n \t(TARGET_OPTION_RESTORE): Ditto.\n \t(TARGET_OPTION_PRINT): Ditto.\n@@ -1396,8 +1398,7 @@\n 2008-07-23  Michael Meissner  <gnu@the-meissners.org>\n \t    Karthik Kumar  <karthikkumar@gmail.com>\n \n-\t* config/i386/i386.h (TARGET_ABM): Move switch into\n-\tix86_isa_flags.\n+\t* config/i386/i386.h (TARGET_ABM): Move switch into ix86_isa_flags.\n \t(TARGET_POPCNT): Ditto.\n \t(TARGET_SAHF): Ditto.\n \t(TARGET_AES): Ditto.\n@@ -1412,8 +1413,7 @@\n \t(REGISTER_TARGET_PRAGMAS): Define, call ix86_register_pragmas.\n \n \t* config/i386/i386.opt (arch): New TargetSave field to define\n-\tfields that need to be saved for function specific option\n-\tsupport.\n+\tfields that need to be saved for function specific option support.\n \t(tune): Ditto.\n \t(fpmath): Ditto.\n \t(branch_cost): Ditto.\n@@ -1484,8 +1484,7 @@\n \t(i386.o): Make dependencies mirror the include files used.\n \t(i386-c.o): New file, add dependencies.\n \n-\t* config/i386/i386-protos.h (override_options): Add bool\n-\targument.\n+\t* config/i386/i386-protos.h (override_options): Add bool argument.\n \t(ix86_valid_option_attribute_tree): Add declaration.\n \t(ix86_target_macros): Ditto.\n \t(ix86_register_macros): Ditto.\n@@ -1498,8 +1497,7 @@\n \tmasks for the tune variables.\n \t(ix86_arch_features): Move initialization of the target masks to\n \tinitial_ix86_arch_features to allow functions to have different\n-\ttarget options.  Make type unsigned char, instead of unsigned\n-\tint.\n+\ttarget options.  Make type unsigned char, instead of unsigned int.\n \t(initial_ix86_arch_features): New static vector to hold processor\n \tmasks for the arch variables.\n \t(enum ix86_function_specific_strings): New enum to describe the\n@@ -1509,8 +1507,7 @@\n \t(ix86_debug_options): New function to print the current options in\n \tthe debugger.\n \t(ix86_function_specific_save): New function hook to save the\n-\tfunction specific global variables in the cl_target_option\n-\tstructure.\n+\tfunction specific global variables in the cl_target_option structure.\n \t(ix86_function_specific_restore): New function hook to restore the\n \tfunction specific variables from the cl_target_option structure to\n \tthe global variables.\n@@ -1520,8 +1517,7 @@\n \tattribute((option(...))) arguments.\n \t(ix86_valid_option_attribute_tree): New function that is common\n \tcode between attribute((option(...))) and #pragma GCC option\n-\tsupport that parses the options and returns a tree holding the\n-\toptions.\n+\tsupport that parses the options and returns a tree holding the options.\n \t(ix86_valid_option_attribute_inner_p): New helper function for\n \tix86_valid_option_attribute_tree.\n \t(ix86_can_inline_p): New function hook to decide if one function\n@@ -1548,8 +1544,7 @@\n \t(struct ptt): Move to static file scope from override_options.\n \t(processor_target_table): Ditto.\n \t(cpu_names): Ditto.\n-\t(ix86_handle_option): Add support for options that are now isa\n-\toptions.\n+\t(ix86_handle_option): Add support for options that are now isa options.\n \t(override_options): Add support for declaring functions that\n \tsupport different target options than were specified on the\n \tcommand line.  Move struct ptt, processor_target_table, cpu_names,\n@@ -1577,8 +1572,8 @@\n \n 2008-07-22  Rafael Avila de Espindola  <espindola@google.com>\n \n-       * c-typeck.c (build_external_ref): Don't call assemble_external.\n-       * final.c (output_operand): Call assemble_external.\n+\t* c-typeck.c (build_external_ref): Don't call assemble_external.\n+\t* final.c (output_operand): Call assemble_external.\n \n 2008-07-21  DJ Delorie  <dj@redhat.com>\n \n@@ -1900,8 +1895,8 @@\n \n 2007-07-16  Rafael Avila de Espindola  <espindola@google.com>\n \n-       * c-decl.c (merge_decls): Keep DECL_SOURCE_LOCATION and\n-       DECL_IN_SYSTEM_HEADER in sync.\n+\t* c-decl.c (merge_decls): Keep DECL_SOURCE_LOCATION and\n+\tDECL_IN_SYSTEM_HEADER in sync.\n \n 2008-07-15  Daniel Berlin  <dberlin@dberlin.org>\n \n@@ -12790,7 +12785,7 @@\n \t(finish_optimization_passes): Update.\n \t(all_passes, all_ipa_passes, all_lowering_passes): Update declaration.\n \t(register_one_dump_file, register_dump_files_1, next_pass_1):\n- \tUpdate arguments.\n+\tUpdate arguments.\n \t(init_optimization_passes): Update handling of new types.\n \t(execute_one_pass, execute_pass_list, execute_ipa_pass_list): Update.\n \t* ipa-struct-reorg.c: Update tree_pass descriptors.\n@@ -12971,7 +12966,7 @@\n \t* config/avr/avr.c (avr_arch_types): Add avr6 entry.\n \t(avr_arch): Add ARCH_AVR6.\n \t(avr_mcu_types): Add 'atmega2560' and 'atmega2561' entry.\n- \t(initial_elimination_offset): Initialize and use 'avr_pc_size'\n+\t(initial_elimination_offset): Initialize and use 'avr_pc_size'\n \tinstead of fixed value 2.\n \t(print_operand_address): Use gs() asm specifier instead of pm().\n \t(avr_assemble_integer): (Ditto.).\n@@ -16203,12 +16198,12 @@\n \t'have_elpm', 'have_elpmx', 'have_eijmp_eicall', 'reserved'. Rename\n \t'mega' to 'have_jmp_call'.\n \t(TARGET_CPU_CPP_BUILTINS): Define \"__AVR_HAVE_JMP_CALL__\",\n-\t\"__AVR_HAVE_RAMPZ__\", \t\"__AVR_HAVE_ELPM__\" and  \"__AVR_HAVE_ELPMX__\"\n+\t\"__AVR_HAVE_RAMPZ__\", \"__AVR_HAVE_ELPM__\" and \"__AVR_HAVE_ELPMX__\"\n \tmacros.\n \t(LINK_SPEC, CRT_BINUTILS_SPECS, ASM_SPEC): Add 'avr31' and 'avr51'\n \tarchitectures.\n \t* config/avr/t-avr (MULTILIB_OPTIONS, MULTILIB_DIRNAMES,\n-\tMULTILIB_MATCHES): (Ditto.).\n+\tMULTILIB_MATCHES): Ditto.\n \n 2008-01-23  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "ca09587c0cd33bc90757aa4468da24d294caf167", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16", "patch": "@@ -65,9 +65,9 @@\n \n (define_insn \"*mov<mode>_internal_rex64\"\n   [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=rm,r,!?y,!?y ,m  ,!y,Y2,x,x ,m,r,x\")\n+\t\t\t\t\"=rm,r,!?y,!?y ,m  ,!y,*Y2,x,x ,m,r,x\")\n \t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n-\t\t\t\t\"Cr ,m,C  ,!?ym,!?y,Y2,!y,C,xm,x,x,r\"))]\n+\t\t\t\t\"Cr ,m,C  ,!?ym,!?y,*Y2,!y,C,xm,x,x,r\"))]\n   \"TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -124,9 +124,9 @@\n \n (define_insn \"*movv2sf_internal_rex64\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=rm,r ,!?y,!?y ,m ,!y,Y2,x,x,x,m,r,x\")\n+\t\t\t\t\"=rm,r ,!?y,!?y ,m ,!y,*Y2,x,x,x,m,r,x\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n-\t\t\t\t\"Cr ,m ,C  ,!?ym,!y,Y2,!y,C,x,m,x,x,r\"))]\n+\t\t\t\t\"Cr ,m ,C  ,!?ym,!y,*Y2,!y,C,x,m,x,x,r\"))]\n   \"TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@"}, {"sha": "baa9976d4006d6581b12459d89b32ba4e7e4cf55", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16", "patch": "@@ -4777,7 +4777,7 @@\n   \"\")\n \n (define_insn \"*sse2_storeq_rex64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=mx,r,r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=mx,*r,r\")\n \t(vec_select:DI\n \t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"x,Yi,o\")\n \t  (parallel [(const_int 0)])))]\n@@ -4940,10 +4940,10 @@\n    (set_attr \"mode\" \"TI,V4SF,V2SF\")])\n \n (define_insn \"vec_concatv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2,?Y2,Y2,x,x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2 ,?Y2,Y2,x,x,x\")\n \t(vec_concat:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \"  m,*y ,0 ,0,0,m\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"  \"  C,  C,Y2,x,m,0\")))]\n+\t  (match_operand:DI 1 \"nonimmediate_operand\" \" mY2,*y ,0 ,0,0,m\")\n+\t  (match_operand:DI 2 \"vector_move_operand\"  \" C  ,  C,Y2,x,m,0\")))]\n   \"!TARGET_64BIT && TARGET_SSE\"\n   \"@\n    movq\\t{%1, %0|%0, %1}\n@@ -4956,10 +4956,10 @@\n    (set_attr \"mode\" \"TI,TI,TI,V4SF,V2SF,V2SF\")])\n \n (define_insn \"*vec_concatv2di_rex64_sse4_1\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=x,x,Yi,!x,x,x,x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\"     \"=x ,x ,Yi,!x,x,x,x,x\")\n \t(vec_concat:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \" 0,m,r ,*y,0,0,0,m\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"  \"rm,C,C ,C ,x,x,m,0\")))]\n+\t  (match_operand:DI 1 \"nonimmediate_operand\" \" 0 ,mx,r ,*y,0,0,0,m\")\n+\t  (match_operand:DI 2 \"vector_move_operand\"  \" rm,C ,C ,C ,x,x,m,0\")))]\n   \"TARGET_64BIT && TARGET_SSE4_1\"\n   \"@\n    pinsrq\\t{$0x1, %2, %0|%0, %2, 0x1}\n@@ -4975,10 +4975,10 @@\n    (set_attr \"mode\" \"TI,TI,TI,TI,TI,V4SF,V2SF,V2SF\")])\n \n (define_insn \"*vec_concatv2di_rex64_sse\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2,Yi,!Y2,Y2,x,x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2 ,Yi,!Y2,Y2,x,x,x\")\n \t(vec_concat:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \"  m,r ,*y ,0 ,0,0,m\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"  \"  C,C ,C  ,Y2,x,m,0\")))]\n+\t  (match_operand:DI 1 \"nonimmediate_operand\" \" mY2,r ,*y ,0 ,0,0,m\")\n+\t  (match_operand:DI 2 \"vector_move_operand\"  \" C  ,C ,C  ,Y2,x,m,0\")))]\n   \"TARGET_64BIT && TARGET_SSE\"\n   \"@\n    movq\\t{%1, %0|%0, %1}"}, {"sha": "e3d7628f70b7e813a5ab8c4431c461fc6baf869a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16", "patch": "@@ -1,3 +1,9 @@\n+2008-08-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/36992\n+\t* gcc.target/i386/pr36992-1.c: New test.\n+\t* gcc.target/i386/pr36992-2.c: Ditto.\n+\n 2008-08-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR target/35252\n@@ -458,16 +464,16 @@\n \n 2008-07-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-        PR c++/36871\n+\tPR c++/36871\n \tPR c++/36872\n-        * g++.dg/ext/has_nothrow_copy.C: Rename to...\n-        * g++.dg/ext/has_nothrow_copy-1.C: ... this.\n-        * g++.dg/ext/has_nothrow_copy-2.C: New.\n-        * g++.dg/ext/has_nothrow_copy-3.C: Likewise.\n-        * g++.dg/ext/has_nothrow_copy-4.C: Likewise.\n-        * g++.dg/ext/has_nothrow_copy-5.C: Likewise.\n-        * g++.dg/ext/has_nothrow_copy-6.C: Likewise.\n-        * g++.dg/ext/has_nothrow_copy-7.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy.C: Rename to...\n+\t* g++.dg/ext/has_nothrow_copy-1.C: ... this.\n+\t* g++.dg/ext/has_nothrow_copy-2.C: New.\n+\t* g++.dg/ext/has_nothrow_copy-3.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-4.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-5.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-6.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-7.C: Likewise.\n \n 2008-07-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n "}, {"sha": "aad6f7cd14de5fd13566b30ef47e7883af979780", "filename": "gcc/testsuite/gcc.target/i386/pr36992-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36992-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36992-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36992-1.c?ref=5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile }\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include <emmintrin.h>\n+\n+__m128i\n+test (__m128i b)\n+{\n+  return _mm_move_epi64 (b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"mov\\[qd\\]\\[ \\\\t\\]+.*%xmm\" 1 } } */"}, {"sha": "eb9c3a28fee5fd9e2884d39d9d63f53dc5e3b23d", "filename": "gcc/testsuite/gcc.target/i386/pr36992-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36992-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36992-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36992-2.c?ref=5617c135e7fe4ea4d67bdf3fbe94acfacfa87b16", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile }\n+/* { dg-options \"-O0 -msse2\" } */\n+\n+#include <emmintrin.h>\n+\n+__m128i\n+test (__m128i b)\n+{\n+  return _mm_move_epi64 (b);\n+}\n+\n+/* { dg-final { scan-assembler-not \"%mm\" } } */"}]}