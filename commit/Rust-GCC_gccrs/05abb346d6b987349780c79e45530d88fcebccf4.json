{"sha": "05abb346d6b987349780c79e45530d88fcebccf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVhYmIzNDZkNmI5ODczNDk3ODBjNzllNDU1MzBkODhmY2ViY2NmNA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-11-23T22:11:40Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-11-23T22:11:40Z"}, "message": "quadmath-rounding-mode.h: New.\n\n2012-11-23  Tobias Burnus  <burnus@net-b.de>\n            Joseph Myers  <joseph@codesourcery.com>\n\n        * quadmath-rounding-mode.h: New.\n        * printf/fpioconst.c: Update from GLIBC. Fix strtod rounding.\n        * printf/fpioconst.h: Ditto.\n        * printf/printf_fp.c (__quadmath_printf_fp): Update from GLIBC.\n        Make printf respect the rounding mode for decimal output.\n        * printf/printf_fphex.c (__quadmath_printf_fphex): Update from\n        GLIBC.  Make printf respect the rounding mode for hex output.\n        * strtod/strtod_l.c: Update from GLIBC. Make strtod respect the\n        rounding mode. Fix strtod handling of underflow.\n\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r193770", "tree": {"sha": "f676fe7bb615062ab0007c6d0428c43bc9f80712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f676fe7bb615062ab0007c6d0428c43bc9f80712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05abb346d6b987349780c79e45530d88fcebccf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05abb346d6b987349780c79e45530d88fcebccf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05abb346d6b987349780c79e45530d88fcebccf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05abb346d6b987349780c79e45530d88fcebccf4/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa66b299c8e766fb453279b55efcdd64d4ef360c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa66b299c8e766fb453279b55efcdd64d4ef360c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa66b299c8e766fb453279b55efcdd64d4ef360c"}], "stats": {"total": 1437, "additions": 1275, "deletions": 162}, "files": [{"sha": "6bbe420b9fe2e81a55989e5bd2b88bd2cd8c85ac", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abb346d6b987349780c79e45530d88fcebccf4/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abb346d6b987349780c79e45530d88fcebccf4/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=05abb346d6b987349780c79e45530d88fcebccf4", "patch": "@@ -1,3 +1,16 @@\n+2012-11-23  Tobias Burnus  <burnus@net-b.de>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* quadmath-rounding-mode.h: New.\n+\t* printf/fpioconst.c: Update from GLIBC. Fix strtod rounding.\n+\t* printf/fpioconst.h: Ditto.\n+\t* printf/printf_fp.c (__quadmath_printf_fp): Update from GLIBC.\n+\tMake printf respect the rounding mode for decimal output.\n+\t* printf/printf_fphex.c (__quadmath_printf_fphex): Update from\n+\tGLIBC.  Make printf respect the rounding mode for hex output.\n+\t* strtod/strtod_l.c: Update from GLIBC. Make strtod respect the\n+\trounding mode. Fix strtod handling of underflow.\n+\n 2012-11-22  David S. Miller  <davem@davemloft.net>\n \t    Tobias Burnus  <burnus@net-b.de>\n \t    Joseph Myers  <joseph@codesourcery.com>"}, {"sha": "cacb1446dde1d6301c59eaf8346be2ce41cc298a", "filename": "libquadmath/printf/fpioconst.c", "status": "modified", "additions": 888, "deletions": 23, "changes": 911, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abb346d6b987349780c79e45530d88fcebccf4/libquadmath%2Fprintf%2Ffpioconst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abb346d6b987349780c79e45530d88fcebccf4/libquadmath%2Fprintf%2Ffpioconst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fprintf%2Ffpioconst.c?ref=05abb346d6b987349780c79e45530d88fcebccf4", "patch": "@@ -14,9 +14,8 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include <config.h>\n #include \"gmp-impl.h\"\t\t/* This defines BITS_PER_MP_LIMB.  */\n@@ -77,9 +76,8 @@ const mp_limb_t __tens[] =\n   0x26b2716e, 0xadc666b0, 0x1d153624, 0x3c42d35a, 0x63ff540e, 0xcc5573c0,\n   0x65f9ef17, 0x55bc28f2, 0x80dcc7f7, 0xf46eeddc, 0x5fdcefce, 0x000553f7,\n \n-#ifndef __NO_LONG_DOUBLE_MATH\n-# define TENS_P9_IDX\t(TENS_P8_IDX + TENS_P8_SIZE)\n-# define TENS_P9_SIZE\t56\n+#define TENS_P9_IDX\t(TENS_P8_IDX + TENS_P8_SIZE)\n+#define TENS_P9_SIZE\t56\n   [TENS_P9_IDX] = 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n   0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n   0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n@@ -91,8 +89,8 @@ const mp_limb_t __tens[] =\n   0xb099bc81, 0x45a71d46, 0xa2699748, 0x8cb07303, 0x8a0b1f13, 0x8cab8a97,\n   0xc1d238d9, 0x633415d4, 0x0000001c,\n \n-# define TENS_P10_IDX\t(TENS_P9_IDX + TENS_P9_SIZE)\n-# define TENS_P10_SIZE\t109\n+#define TENS_P10_IDX\t(TENS_P9_IDX + TENS_P9_SIZE)\n+#define TENS_P10_SIZE\t109\n   [TENS_P10_IDX] = 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n   0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n   0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n@@ -113,6 +111,7 @@ const mp_limb_t __tens[] =\n   0xd2db49ef, 0x926c3f5b, 0xae6209d4, 0x2d433949, 0x34f4a3c6, 0xd4305d94,\n   0xd9d61a05, 0x00000325,\n \n+#ifndef __NO_LONG_DOUBLE_MATH\n # define TENS_P11_IDX\t(TENS_P10_IDX + TENS_P10_SIZE)\n # define TENS_P11_SIZE\t215\n   [TENS_P11_IDX] = 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n@@ -225,9 +224,442 @@ const mp_limb_t __tens[] =\n   0x35fcb457, 0x1bb6c6e4, 0xf74eb928, 0x3d5d0b54, 0x87cc1d21, 0x4964046f,\n   0x18ae4240, 0xd868b275, 0x8bd2b496, 0x1c5563f4, 0xc234d8f5, 0xf868e970,\n   0xf9151fff, 0xae7be4a2, 0x271133ee, 0xbb0fd922, 0x25254932, 0xa60a9fc0,\n-  0x104bcd64, 0x30290145, 0x00000062\n-#endif\t/* !__NO_LONG_DOUBLE_MATH */\n+  0x104bcd64, 0x30290145, 0x00000062,\n+\n+# define TENS_P13_IDX\t(TENS_P12_IDX + TENS_P12_SIZE)\n+# define TENS_P13_SIZE\t853\n+  [TENS_P13_IDX] = 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x64cf8001, 0x9f345226, 0x644963e5, 0x7b8d5053, 0x49f0aa29,\n+  0xb945c82f, 0x430ff478, 0x933b6bb8, 0x5ff82d0a, 0x64c501d4, 0x73bbf174,\n+  0x9ec1e1b3, 0x3bfbe803, 0xe9010689, 0xf7390d8e, 0x3fef8d80, 0xf31d1325,\n+  0x2c73446b, 0xf5ca7a92, 0x1c19e379, 0x270af2be, 0xf52d9d9c, 0xeb2bed48,\n+  0x3abf72e1, 0x4ac4ffc2, 0x7ecf3508, 0x22019a82, 0x38597a5a, 0xbe6a7b3c,\n+  0x9a51ff6e, 0xa2d28437, 0x0c0abe9d, 0x7c9ec6ea, 0xc79887ff, 0x5851c899,\n+  0x436420d0, 0xefead581, 0x72b5547f, 0x99b1d2b5, 0x077ad8f8, 0x5cddbf5b,\n+  0x3b4305ed, 0xe3861ac7, 0x2d88f3fd, 0x3d6b43be, 0x393220aa, 0xe5382405,\n+  0x1cd62095, 0x61a10c96, 0x87a0d1e1, 0xca95a55d, 0x68c933e6, 0x9ee082e2,\n+  0x778089bb, 0x41429ee9, 0xfbb6d8d4, 0xc529500d, 0x26cf5471, 0x68b9be29,\n+  0xd6c9b140, 0x07be635a, 0x84151852, 0xb5572182, 0x83730335, 0xeb2300b4,\n+  0xdd312d31, 0x05d6dd9b, 0x488da59c, 0x37784d25, 0xda2c2e40, 0x6a8d92fa,\n+  0x6a57d720, 0x950b41ac, 0xf07a8632, 0xcd55f062, 0x2ecad06a, 0xe6a3dfe7,\n+  0x34c98bb0, 0x9c767d8f, 0xb60521b1, 0x752aafd1, 0xe87d16be, 0x9de1d728,\n+  0xe58a8b0c, 0xc6013830, 0x2fa2c119, 0x3c4f9156, 0x519b40c8, 0x5058fc8f,\n+  0xab78701b, 0xadc59c47, 0xc502a554, 0x0fb3286f, 0x6647f04c, 0x9db4076e,\n+  0x5ea495c8, 0x9c74fab1, 0xb4f00f8b, 0x897c7a3c, 0xd092b4c6, 0x283e0340,\n+  0x32f31fa8, 0xeeb708cc, 0x67b63de2, 0x4f7b3c8b, 0xef2bc02b, 0xda14bfe3,\n+  0xc49344c0, 0xaabc85be, 0xb6c4e69e, 0x2ece8aa6, 0x63a11016, 0x19cfba4d,\n+  0x726ae4d9, 0x0fc90b42, 0xee6ae707, 0x4290b04a, 0x4d9aabc5, 0xfb2b070e,\n+  0xf34906cd, 0x1ff54b0a, 0x52ca9709, 0x0b42bfe1, 0x16431570, 0x980f3076,\n+  0x6b5565bb, 0xeb8c4c4a, 0x9ce63c76, 0xb9e4c771, 0x3da24c53, 0x6f0266fa,\n+  0xb50e3c66, 0x76e34f79, 0x01bb4b96, 0x9948cf3e, 0x0fbea124, 0x86bead12,\n+  0xa1fa4edc, 0xd11e901c, 0xc3b97bf9, 0x71730e03, 0x370ca58e, 0x48b19715,\n+  0x886467e2, 0xdb237497, 0x3c727e24, 0x2116ccd2, 0x8e67d76e, 0xf973aecf,\n+  0x34bdedd3, 0x31d680ec, 0xb042ab05, 0x770e96a0, 0xfc5c3c17, 0xab6f1874,\n+  0xb8204ece, 0x5843f3a5, 0x416c0ced, 0x11dd112f, 0x95780183, 0xb1c74bd8,\n+  0x7e0e8613, 0x96c6453b, 0xa79ffc10, 0xb2157651, 0xfcd6da0a, 0x836a34a7,\n+  0x3dd0ccac, 0x316e5a36, 0x496049ed, 0x0322bcb2, 0xdea1a97d, 0xcdf2aa5a,\n+  0x39578d53, 0x1d1aa931, 0x030565c9, 0xd198cbed, 0x324e0a27, 0x5db83e8a,\n+  0x28432534, 0x90bf23e8, 0x5cb134c0, 0xdd0adab6, 0x009e5051, 0xf8ad61da,\n+  0x7e36a6d7, 0x84c75e57, 0xbdffe6aa, 0xb5d5532e, 0x138d680e, 0xbd84ddac,\n+  0x4a5f74a1, 0xccff00d1, 0x55538cfa, 0xb0948b8c, 0x48528011, 0xe345f82e,\n+  0x9e047ad7, 0x6ee770ff, 0xea77bef0, 0x0fc13669, 0x2f162567, 0x869426ac,\n+  0x0614686c, 0x3a3ff464, 0x4263ed82, 0xb3589b47, 0x57205a7a, 0x213f24ad,\n+  0xae6fc46b, 0x3de03e4e, 0xd92b133f, 0x315a589b, 0x1b49c24a, 0x73381bcb,\n+  0x1641c138, 0x7bc99425, 0xbc680ada, 0xa5cfbc9a, 0x962e9884, 0x0a960d70,\n+  0xfc8d12f6, 0xed18ef4c, 0x60acc868, 0x9aea5d14, 0x13113036, 0xc747c87e,\n+  0x2d99a5b0, 0x3a369bb3, 0x006b3658, 0x118a5135, 0xe43fa6e6, 0xb4947190,\n+  0xa13dc05e, 0xd7733db8, 0x0dbd7170, 0xc3fb67d1, 0x117ed7e7, 0xe2d72a49,\n+  0xc05fe99e, 0x9638db40, 0xd971a25b, 0x4239d468, 0x1a159559, 0x850a223c,\n+  0xc1117392, 0x22d2dbd8, 0x567b5fc0, 0x92c5b4eb, 0xc051007a, 0x11cc0099,\n+  0xfb355720, 0x6907810d, 0x39848161, 0x5e8534f4, 0x61d19ef2, 0x2ee8c466,\n+  0x8a0ab03c, 0xc234af76, 0x879aa514, 0x9774a235, 0x59e5da57, 0x9bc466b3,\n+  0xf339bd5a, 0x44ab026d, 0xbbb5fd67, 0x2b977202, 0x3685c9f2, 0x03e5dc00,\n+  0x7054359e, 0x5239cfb0, 0x9ba11f08, 0xf8237562, 0x9c258687, 0xa3b510dd,\n+  0x52c7bf8f, 0xb31ed0cf, 0x3245e079, 0xff9ff8d3, 0xbaee38c7, 0xf17d5562,\n+  0xf702b3b9, 0xcc4c8563, 0xcbca275d, 0xe005d9d1, 0xe817dbac, 0x05c6920a,\n+  0x62cee350, 0x0f1deac0, 0x19e049b9, 0x59599f74, 0xb2a27a16, 0xf0911d5a,\n+  0x7dcef00d, 0x3603dd66, 0x37552251, 0x97813735, 0x5fa022da, 0x0d849416,\n+  0xefbe57c2, 0x30a0e592, 0x57619296, 0xc953cc47, 0x11735043, 0xa83526ad,\n+  0xc0444be0, 0xb5f8463c, 0x16ff5136, 0x2a0a6631, 0xf037572c, 0xd30464da,\n+  0xb1bf8daa, 0x7f5718f7, 0x0f3e9e7e, 0xe5a4cfe7, 0xc26f2624, 0x8c9b5ae4,\n+  0xdfe8f485, 0xf6fa82e3, 0xc64a1509, 0xacb24aea, 0x3024b220, 0xddb02ac0,\n+  0xddcdfedd, 0xd834c574, 0x384c86c3, 0xd904e099, 0xdd48a571, 0x4550a05f,\n+  0x77b35c74, 0x81e85f71, 0xaaebdc6d, 0x0f9bb0b1, 0xd4cdc054, 0x7af4df85,\n+  0x845786af, 0xe5e53887, 0xdf2a91ca, 0xf6a58211, 0x5689a3c4, 0x8cf6aa15,\n+  0xa705983a, 0x9fbf2f52, 0x2ce7fef0, 0x48e84a62, 0x4a3b5365, 0xf8281a47,\n+  0xd48a0872, 0x8423dcf6, 0xf0929c3e, 0x044a5049, 0xe9ec071b, 0x17decc36,\n+  0x20e30c1b, 0x45fc2813, 0x3342196a, 0x46afb7f9, 0x6601e337, 0x30754439,\n+  0xf18094d1, 0xd38b4112, 0x61410dd1, 0xd8796b36, 0xd97d4dd8, 0x47e9bc0b,\n+  0x80805191, 0x1584e2da, 0xcde438c1, 0x955d24f1, 0x409659a1, 0x1b0950b1,\n+  0x5a09635f, 0x65b1febe, 0x615472b9, 0x525dc00a, 0x6308e067, 0x4089e2d4,\n+  0xd4e705a4, 0x43fc9209, 0x32c18b26, 0x4447a5fa, 0xaf271153, 0x3617cadc,\n+  0x4dc4f0d2, 0x692eb386, 0x6aa116ef, 0x655991bc, 0x0641dc0b, 0x54469597,\n+  0xc6559664, 0x749c0fe8, 0x4bdc0d1a, 0xa7d3381e, 0xc5292a61, 0x4eb65fdc,\n+  0x42474cc2, 0xf2c6b173, 0x19dfc9ee, 0x0a19a199, 0xbece2ee3, 0xc68b778d,\n+  0xaa03aa7c, 0xc8db86f0, 0xae54d2be, 0xb92a01e0, 0xdee3f48f, 0x6023c0a9,\n+  0xf6ae2852, 0xa233763b, 0xa441cb9e, 0x3246dddd, 0x3a8bb4b7, 0x44faa3c3,\n+  0x308ef2c8, 0xfd1c8516, 0xd2862534, 0x3b25ebe7, 0x62336f6f, 0x0c336a45,\n+  0x0b8e2ce6, 0xe867f171, 0x11eea1f2, 0x523972ec, 0x68df4903, 0x50c05824,\n+  0x51ef4cb7, 0xcb4df2a8, 0x3ffae115, 0xb51aca2f, 0x3ed1635f, 0xd6ff1cc6,\n+  0x0a5ac09f, 0xde8ed9d6, 0x0a3dc76f, 0x5dc2d8dd, 0x37991dde, 0xf95bacb2,\n+  0x80ad6e13, 0x163005ee, 0xd4f8c7a6, 0x3225d180, 0xa4760f08, 0x5fff004d,\n+  0x9b2b1a87, 0xe7ea8576, 0x5cd00b66, 0xec478452, 0x285dd80d, 0x20112439,\n+  0x4301b3a1, 0xff879fc8, 0xfacbb68c, 0xaf6af6b8, 0xb17fdf84, 0xc208d9f1,\n+  0xf4489576, 0x8794a6e9, 0xadcc862c, 0x0e83e54c, 0x931685a4, 0xab01c580,\n+  0x1e40293b, 0xcad784fa, 0x1f1ddf7f, 0x6b856084, 0xcee722b2, 0x1c39938b,\n+  0x74254eb4, 0xc7ccebf4, 0xb9c26d9a, 0x6b08dfb9, 0x2e3ece24, 0x981455ec,\n+  0xdff60410, 0xbc804e2b, 0xe06fa38b, 0xb534540c, 0x72e53c52, 0x02dfb2ef,\n+  0xb2a5c05a, 0x5002a2a5, 0x97313338, 0x597c53ff, 0xd61df455, 0x34e5261a,\n+  0x39ac2ec5, 0xc6bc0cab, 0x388b7539, 0x3f732fc0, 0x00eac704, 0x92fb21d9,\n+  0xc089971e, 0xb4ffa503, 0x7af93f8f, 0x72e353b6, 0xa8311b23, 0x8266c9af,\n+  0x1de496ca, 0xdbdb16b0, 0xd6fa0b51, 0x9991a5ef, 0xbd563089, 0x168cbe0f,\n+  0x0954a1e3, 0x537b9245, 0x53d09723, 0x2867272d, 0x86558cb9, 0x0b83f026,\n+  0xfac85d10, 0xf8562951, 0x1e5ddb95, 0xad3668c8, 0x48d27b92, 0xc930b7e6,\n+  0x19b58a99, 0xa3de74e3, 0xa9cda917, 0xcb6e35ee, 0x7a4dd16e, 0x4c80e9d5,\n+  0x4d84073f, 0x74a95ba8, 0x9cffcfc0, 0xd28485eb, 0x15796372, 0x5717e9cd,\n+  0x77eda8df, 0xab473c4e, 0xadb965e1, 0xffad6959, 0x5bc05659, 0x6ed63880,\n+  0xfb240227, 0x2014850b, 0xd15fdddf, 0xfdd74592, 0xb538f37d, 0x3a8e2e82,\n+  0x1473396f, 0xf6a5edf8, 0x3ce41a21, 0x0cc4351a, 0x754e8264, 0xaab95e73,\n+  0xc7821b96, 0xf42ff463, 0xc242faaa, 0xdd00ac65, 0x087e260e, 0x17d193f5,\n+  0x0dbe0328, 0x844a63c9, 0xf9d10f96, 0x85aa91dd, 0xbaf127ec, 0x0ab6dabb,\n+  0xce85e6a5, 0x1af5d24f, 0xe7b56a16, 0xcd6c5a19, 0x57d1d79f, 0x5dfc2b28,\n+  0xec4dd2f0, 0x18fe64a1, 0x8d72216a, 0x5f222077, 0x72f14a08, 0xd8b09b11,\n+  0x3bf038ab, 0xc6cf1f44, 0xc4265d7c, 0xdab1b0e7, 0x46398d2c, 0x7dcfdc68,\n+  0xb6e705d3, 0x4aafd1e6, 0x362c1183, 0xd8701107, 0xf6ac98b7, 0xad114d7e,\n+  0xd6649424, 0xc40ab551, 0xddd1c6e4, 0xa132030f, 0xc9d284c8, 0xdb1f662a,\n+  0x824069ee, 0x4157904b, 0xc846b3ad, 0xd38481ca, 0x0a248c17, 0xc846831f,\n+  0xe8745feb, 0x000025a8,\n+\n+# define TENS_P14_IDX\t(TENS_P13_IDX + TENS_P13_SIZE)\n+# define TENS_P14_SIZE\t1703\n+  [TENS_P14_IDX] = 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x099f0001,\n+  0x41b5687d, 0xcbfd1b6e, 0x8c75ee63, 0x4b191cea, 0xd75296ad, 0x2394d80a,\n+  0x1eb5da9b, 0x18a004ed, 0x5c79fed9, 0x37e3b01c, 0xed67a1b8, 0x78d9a714,\n+  0x2a1a34d5, 0x8fbe7f0d, 0x6b1d3516, 0xe57c43ea, 0xa7825681, 0xc81d32e8,\n+  0xd3e716e1, 0x58860b00, 0xa6d93d65, 0x83159c97, 0x0113232f, 0xd6122269,\n+  0x7321c3a0, 0xbe6a92f3, 0xca4ca9d3, 0xd1e276a5, 0xc0e55163, 0xb05915d6,\n+  0x7b7a78c1, 0x0fae0ca4, 0x62a3df4b, 0x08abec6f, 0x13030d11, 0xd446338a,\n+  0x60dcc8f2, 0x5f05d1d5, 0x25e1f9f6, 0x04a40bee, 0x7f8c7113, 0x88f47ec0,\n+  0x589ff59a, 0x308c3661, 0xea5068a1, 0x95fb108f, 0x06e87dff, 0x1559e741,\n+  0xd4d4abdc, 0x01e092e4, 0xee16907c, 0x5a7b78e6, 0xe73aabcb, 0x146bb7e0,\n+  0xad372889, 0x4f6b43c5, 0xfd49fc1d, 0x0f29f589, 0xd3739253, 0xc4745a56,\n+  0xe2acfcc2, 0xd75ccbc7, 0xedd016cd, 0xac5a63e0, 0xef82ccd3, 0xb352496e,\n+  0x2bdabfc4, 0x5b3d0401, 0x01b0197f, 0xade96d3c, 0x29d9253d, 0x19bebdba,\n+  0x73c56b1b, 0x255e7b25, 0x1f2b7f1e, 0xa56a457e, 0x6299c836, 0x5c63cc78,\n+  0xa2ca74c6, 0x5c85fe93, 0xee571bea, 0x508e2561, 0x2db5f1d0, 0xb1fde6a9,\n+  0xa9b87b99, 0x4fb90a37, 0xf7260f07, 0xff58c5fd, 0x56ee7e97, 0xbab9fa46,\n+  0x42e6f9ce, 0x78816f73, 0x1b76d267, 0xfdb2c728, 0x4566519c, 0xae17dd8d,\n+  0xb9f6a95f, 0x1cd533a1, 0x67160dea, 0x14534bac, 0xfcd8f8f9, 0xf3f2901d,\n+  0x708b1f0a, 0x8829063b, 0x9457a1df, 0x8f872aa1, 0x36bb9335, 0xb5672c0e,\n+  0xd889d109, 0x7ec63a6a, 0x93306672, 0x39b6d457, 0x8239ab68, 0xef2e2506,\n+  0xbe0d7a1f, 0x4251b635, 0x05f65522, 0x0ef0bd55, 0x03286891, 0x2c42b664,\n+  0x9815fbac, 0x471fd611, 0x814e379c, 0x7dd8349d, 0xa4a25bda, 0x9886b84c,\n+  0x01b9e39d, 0x5a7ce1a2, 0xae31cbc9, 0x86d07f32, 0x83ef8faf, 0xb66b5b76,\n+  0x58470fdf, 0x96d59b73, 0x51618889, 0xdc400cf7, 0xfc8e0fc6, 0xaf693670,\n+  0x09a08e56, 0x91737de6, 0x74f682e1, 0x0e03923f, 0x7f8ac56d, 0x7400cfd4,\n+  0x8e05e49a, 0x4cebea3c, 0x384e1164, 0xb2e43d8c, 0xb50ae05e, 0x0f0b3ed9,\n+  0xa4006123, 0x64137137, 0x4e9a1934, 0x05404100, 0xd9621be6, 0x9329a255,\n+  0x5c347ebb, 0x75cbeb1b, 0xe684346b, 0x840fee55, 0xba6a9753, 0xf43836f6,\n+  0x60505b7b, 0x334a9278, 0xfd6d475d, 0x5db94761, 0x267375aa, 0xc110e160,\n+  0x024f6d63, 0x2ec96610, 0xa99b4c19, 0xb915c9f4, 0x338cfd90, 0xf02ea846,\n+  0xb9e51a09, 0xae928fb1, 0xfae31d88, 0x1a3db721, 0x8475dd26, 0x5769489d,\n+  0x7ad4c407, 0x0a49e9f0, 0x34e275c8, 0x3d075d83, 0x1d63114a, 0x72a96415,\n+  0x6b98e947, 0x1d500b5f, 0xd50fdc36, 0x141e5085, 0x87751275, 0xe7843834,\n+  0x2278809e, 0xb15c52ee, 0x947aead2, 0xfedb7b02, 0x5197b744, 0x64e09ba8,\n+  0x8849d0a6, 0x23beaa85, 0x11ecb913, 0x0f7ed667, 0x5d984848, 0x9f6331ea,\n+  0x588290e9, 0xa24d64d1, 0x7e09e9e5, 0x32592033, 0x03a501df, 0x27c270a6,\n+  0xbb3df738, 0x3c7c5a70, 0x4190833c, 0x7d4bf9f4, 0x80e5d89b, 0xa7fc6194,\n+  0xfaefb663, 0x62e52b49, 0xd3b6adcd, 0x809646fc, 0x1f2cf73a, 0xb765ed4f,\n+  0x531e4bfb, 0x92cd05f2, 0xaf12d1a6, 0x22ee30f3, 0x38da1074, 0xed6447bb,\n+  0x1a725608, 0xaff222d3, 0x7a3c6f54, 0xbca79a56, 0x7b0e8d12, 0x1c4660c5,\n+  0x6e34d6fb, 0x6f481a9f, 0xfe9dc99c, 0xf888db82, 0xd8489ea0, 0x84b4c0fa,\n+  0xc0dea281, 0x977a8583, 0xae30e887, 0x8c1cbcec, 0x1d4848cb, 0x0ee0d137,\n+  0xd011b0fc, 0x94b5fd49, 0x478d7dd4, 0x3d67f2e7, 0xacab62ad, 0x0ab4e62a,\n+  0x1dfc7df5, 0xd22e4553, 0x870b0e75, 0x49b7b001, 0x1b73bf6d, 0x12807ffd,\n+  0xdc9f0737, 0x6f3e5852, 0xc0e2f250, 0x93e62e4a, 0x4d96a55a, 0xc1d0e185,\n+  0x83a126db, 0x190b917b, 0xefbfd043, 0xc7df1669, 0x8f25b6dd, 0x2062eac9,\n+  0x476c17a6, 0xcb60f278, 0x25460383, 0x0e85e996, 0xda8c05be, 0x6f678a34,\n+  0x69206234, 0xf59be929, 0x1947b69a, 0x0ebfa11b, 0x90fd8322, 0x15c1e9bf,\n+  0xd699b1ec, 0xb2f0343f, 0x7001d002, 0xcf76eaaa, 0xc0778ab5, 0x5173eda8,\n+  0xb7b008e2, 0x4e00e4c6, 0x505d3f4d, 0x99dd341a, 0x1c9d4e12, 0x4ffb6978,\n+  0x474c5e95, 0x6e9ca6dd, 0xda19f938, 0xe2dda6e0, 0x98dc318e, 0xda455e54,\n+  0x3f67b836, 0x21e4181c, 0xa97e9a64, 0x1e17f655, 0x527a08bb, 0x1712dc21,\n+  0x682972ad, 0x0042d256, 0xccbeadf1, 0xca497b96, 0x861e99e0, 0x0d8aa585,\n+  0xeeb0f650, 0xdcc3c3da, 0x506af77e, 0x5deb9768, 0x7c9d60be, 0xe9d978b7,\n+  0x37b37e95, 0x77ad0b94, 0x42747f75, 0x07be42c4, 0x6d5fd2fe, 0x4c8c5da9,\n+  0x0d8fc27d, 0x0f2fd50f, 0x0ccf6023, 0x5b56053f, 0x3b1101bd, 0x56d34906,\n+  0xc0feca27, 0x7602a150, 0xc4888da4, 0x419abe54, 0x56d10633, 0xc76120ed,\n+  0x8db14123, 0xb656e675, 0x741e8f76, 0xd297b94e, 0x96be6f21, 0x3662439d,\n+  0x9b409e27, 0x6626574d, 0x35fff92a, 0xbf558205, 0x69e02439, 0xbe6838b7,\n+  0x6400fd4c, 0xa00f64ca, 0x1f4b158a, 0x9e2052ae, 0x04cca558, 0xfb5ee69e,\n+  0x58da644c, 0x96f26e1f, 0x8ab19401, 0xbee1e16b, 0xed8bf908, 0x2f2809a4,\n+  0xd50babab, 0x6e57f7e6, 0x6b0a8929, 0xf7356431, 0xb54a4cfc, 0x9a1d0ac4,\n+  0x6f9fd6cb, 0x836bfbf8, 0x3b42f469, 0x8bd32129, 0x40111b6b, 0x7c278fb1,\n+  0xb345d955, 0xff1fd188, 0xd32cd13c, 0xf7ec3aa0, 0x3789f792, 0xab707fa4,\n+  0x4d79a4bf, 0xb3a28ceb, 0xd9c24d8e, 0x7134dadc, 0x06e2eb3e, 0xd7c04f76,\n+  0xb379d811, 0x2b3b0ebc, 0x8c94fc33, 0xa28b53ab, 0xc06c5d01, 0xd900432a,\n+  0x7fea91ca, 0x6d30b008, 0x64845f08, 0x796f5349, 0xfde4687d, 0xf888fe67,\n+  0xe0046c56, 0xae482177, 0xce98cb11, 0x84590c46, 0x1feb4400, 0x6e1ba29b,\n+  0xff2f1611, 0xf73f3e9c, 0x3159ca8c, 0x34845918, 0x56f0ed46, 0xb7d10c32,\n+  0xd9a16a01, 0x405b9e91, 0x3cee3e24, 0x8739e4a6, 0x2ab396b4, 0x3f1b7871,\n+  0x09835dfd, 0x8c7a489f, 0x1592b74a, 0x05df7c81, 0x0e8d3f37, 0xa61ff273,\n+  0x68b29622, 0x259cd337, 0x43ff84a6, 0x81cf8fe9, 0x566ed883, 0x48427fc6,\n+  0x35c79428, 0xcfd2fb59, 0xa97e8c8b, 0x750aaed8, 0x32ddca23, 0xaa8108ef,\n+  0x96fbfff9, 0xa1d039aa, 0xe3cdf588, 0x47e77e00, 0xcd6b3fdb, 0xe72a9a80,\n+  0x9a522152, 0xeda06283, 0xef175610, 0xa670cfa1, 0x339fe6c4, 0x2dfbf3ee,\n+  0xc2d7f53b, 0x92a44e27, 0xcc47e4b0, 0xdfa212bc, 0xd64f83c9, 0x997e5475,\n+  0xb51319bf, 0x9fffe599, 0x1fc2c7b6, 0xef5605e7, 0x832169dd, 0xfeb6be4e,\n+  0xbf921dc8, 0x60bdfb1d, 0x72759f8d, 0x3546efa0, 0x020eebed, 0xcaab3d64,\n+  0xdb20a2fe, 0xba1218f6, 0xb2b62bdd, 0x3101eff0, 0x8fde5cfa, 0x2e319213,\n+  0xa52114d2, 0x87eead3f, 0xdf08b1dd, 0xa5387642, 0x746f34d0, 0xd76c4844,\n+  0x4cc40317, 0xe4f689c9, 0xb7d76071, 0x5fe0b4a2, 0x6e1c7915, 0xc7d43f53,\n+  0x3efb7d71, 0x068dd906, 0x35a75f5f, 0x652d7770, 0x750f4607, 0x64a1656c,\n+  0x36c2cf8e, 0x214d758b, 0x9348ef93, 0xe4058978, 0x9674b7f3, 0x10570b0b,\n+  0xbdfaba8f, 0xcef09dd7, 0xa92b261f, 0x071c21b6, 0xcbebb81f, 0xf427ed6c,\n+  0x44228cd6, 0x65e56fcf, 0x5036c460, 0xad919def, 0xccfd848b, 0x61d158a6,\n+  0x7527dca3, 0x4cf30459, 0x50855075, 0xa70dfd09, 0x3540f5aa, 0x35577adb,\n+  0xb5ba3d4e, 0x35736c4f, 0xcdfb689f, 0xefe8fa82, 0x97ab0dca, 0x51bd2ff3,\n+  0x77a7fe9c, 0x3107846c, 0x3d618b81, 0xbca797a4, 0xfc5e9651, 0xe2e08fbc,\n+  0xf7e8791f, 0x772f1cc0, 0x7c426f9d, 0x08d56f88, 0x0080c3ab, 0x0deea663,\n+  0xe6d46ec6, 0x7dca4eb7, 0x6b681d9d, 0xda06730b, 0x4af0e0f2, 0x038bf468,\n+  0x52097463, 0xca19d302, 0xbc09bb9a, 0xaa55aeb1, 0x3ded4433, 0xf27938ba,\n+  0x3e4b7865, 0x28296be7, 0x7ef96314, 0x7a1d55cc, 0xdf0b6b47, 0xcde11852,\n+  0xcedda5bd, 0xf00a0eb3, 0x72ca1a8b, 0x5241b572, 0xb002fdcc, 0xff8898b3,\n+  0xc4878862, 0xb3e85372, 0xbf4bca29, 0x7e1fef45, 0xf2d83189, 0x0f5427af,\n+  0x3cdf9e05, 0x75bae885, 0xf65c06ac, 0x9c71a700, 0xa3145eac, 0xde63bab2,\n+  0x76255bbf, 0x6e817be6, 0x4c6ad3d0, 0x25ab9935, 0xe95ef2f8, 0x11cd095a,\n+  0xd54f78de, 0xa001ae7e, 0xb3829dcb, 0x5abd18bd, 0x18eb9c9e, 0xada3c504,\n+  0xe3e3556c, 0xd35479aa, 0x5191ac5f, 0x221821ac, 0xc8d1d9d3, 0x313a8c51,\n+  0x088c3fc8, 0xc146a264, 0xb154abed, 0x92755bc5, 0x349ec093, 0xf94aba57,\n+  0x41d5886c, 0x0a5ad8b2, 0x36aba94b, 0x883a6758, 0xa9ad229f, 0x5d64069a,\n+  0x0546172f, 0x0366da16, 0xc3808ea4, 0x0b172403, 0x70f0a235, 0xfa816e66,\n+  0x4fceb827, 0xa65fcfea, 0x167b56d5, 0xfe2b9fb2, 0xfec36bcd, 0xa84c4cc9,\n+  0xcd96320f, 0x3e128584, 0x09eda8b8, 0x91eca525, 0x7ec7e17b, 0xbc45bedc,\n+  0xc14032f4, 0x9be689a7, 0x2eb20bc0, 0xffdf1efc, 0x14ef835f, 0xc6966c59,\n+  0xcd778dd8, 0x5feb0f3b, 0x23d47715, 0xd64b87c8, 0x5722a550, 0x62883198,\n+  0x315a1a8b, 0x648e17e6, 0x4b7e9d7a, 0x2ba43d28, 0x67caca84, 0x741f0398,\n+  0x6e660159, 0x3e16e1a9, 0x3dde3c45, 0xa53e56ae, 0xc7eb0aef, 0x3f39f33e,\n+  0x78751d73, 0x45816df8, 0x626770f7, 0xcb17d28d, 0x909e87f4, 0x93a86aba,\n+  0xc1dcf328, 0x1a1e4ce2, 0xd895d042, 0xb9f6dd69, 0xbb00eaf5, 0xacc37687,\n+  0xca609578, 0x5b490d39, 0xf8b86d4c, 0xf2737ef0, 0x39419f6d, 0x69267bc0,\n+  0x72524a03, 0x6eb060c4, 0xdbc01e93, 0x291035b1, 0x83984d54, 0xf673ad85,\n+  0xe08cbc20, 0x1fb24915, 0x584803a6, 0xe15bbcd7, 0x4088ddb5, 0xd4c22542,\n+  0x2c18041a, 0xa51372d1, 0xb2ba69b4, 0x2299283f, 0xcd11c296, 0x25dcd6f3,\n+  0xac54df23, 0x24a3a55e, 0x77e16e1d, 0xb3cd415b, 0xb99d85c0, 0x497befc7,\n+  0xe91154e3, 0x7365cd8b, 0xb55100aa, 0x0ee699eb, 0xfc0927a6, 0xefb374de,\n+  0x8acaa910, 0x83b40e3d, 0xda3f0006, 0x8590a089, 0xc6ce1b75, 0x54f6ff20,\n+  0xfda2f7f3, 0xd2ab58f6, 0xd0763b6d, 0x6caf2515, 0x2519622d, 0xc3714057,\n+  0x9863638f, 0xea00bb4f, 0x09ea4a4d, 0xe69de96d, 0x6b01fe5f, 0x960161a5,\n+  0x529e32ec, 0xf8260ae9, 0x01a37eea, 0x69710577, 0x5aa0716f, 0xcb3fb1da,\n+  0x4260feda, 0xa33fb790, 0x76012f75, 0x24c0e5be, 0x130f09ae, 0x2e8323dc,\n+  0x5c8ecb76, 0x17cb8f12, 0x401b5f5c, 0x5f0a63e0, 0x47e1560a, 0xdc57a786,\n+  0xee1377d4, 0x228e7ee5, 0x0aa294b9, 0xaea6c534, 0x55b0fe2f, 0x922d318a,\n+  0xf108b772, 0xf15bddf6, 0xdfb69702, 0xcd438a4e, 0x90e1db66, 0x584ce4a1,\n+  0x568ef6cb, 0x69e55f9d, 0x6da376ba, 0x5ca6c109, 0x45c7e294, 0xc977b3e9,\n+  0xcf5b6c0c, 0x1d694499, 0x11b487ae, 0xcf8339ac, 0xbcb3cc6e, 0x50b828e0,\n+  0x046b1071, 0x5703ed0d, 0x2c615946, 0x720d1610, 0xa908dbd0, 0x742bbe33,\n+  0x22c076e2, 0x48966a66, 0x1d0cefa4, 0x1dde819f, 0x601352bf, 0xb9370c39,\n+  0xa585cc4a, 0xeb857f94, 0x5a2f7206, 0x3fae6b58, 0x49cd0f1f, 0x78e5fb3d,\n+  0x1b89d476, 0x74e9e65b, 0xed82945b, 0xb74e6483, 0x2941c4d9, 0x7e087acc,\n+  0x565c18dc, 0x1a09f2e5, 0xbf4ccd3d, 0xd304e977, 0xa522631d, 0x6123378e,\n+  0x4517109b, 0xb7e4285a, 0x4bf1a506, 0x625803c2, 0x683172f8, 0xc84e7354,\n+  0x3f8a2b11, 0x7dd12b89, 0xed420491, 0x8c698b0b, 0x9853fb97, 0x9631777b,\n+  0xb697e1c9, 0x5f028f05, 0x51038110, 0x9055f055, 0x30e255e3, 0xe2d0c1b6,\n+  0xb990321e, 0xa8fdf4d1, 0xff4dc144, 0x521a3056, 0x148999e0, 0xa8111c66,\n+  0xa9c96852, 0x8157f508, 0x4b394a94, 0xa0dc4df1, 0x94ec2e93, 0x6e6afa56,\n+  0x8fc28377, 0xf72ffa04, 0xc435186f, 0xf91488b7, 0x8d037f6f, 0xa899ec1e,\n+  0x48757727, 0x4101b612, 0xb8cf377d, 0xa5a54e68, 0xb4570569, 0x2ac5a0a0,\n+  0x063d9cfd, 0x7c504c74, 0xf1a5884c, 0x0a9b1955, 0x8d0b91bf, 0xe5f6862f,\n+  0x79ff5361, 0x0ed3d38f, 0xc6fd31fb, 0x9fe131c7, 0x85b9c648, 0x8febf2b4,\n+  0x8e77e86b, 0x992ba80e, 0x56429986, 0x6848879a, 0x608cdda5, 0x3e0d106e,\n+  0x754b300e, 0x25200576, 0xafd5195b, 0x5d37aad9, 0xe81f0939, 0xe00a390e,\n+  0xdeeea20a, 0xf5fef0be, 0xb5d51155, 0x6e27d173, 0x9e72ebcf, 0xb776e978,\n+  0xb966f7ba, 0x09520238, 0x726c8408, 0x3347ebc5, 0x65dce5a2, 0x3ec78337,\n+  0x8c92d740, 0x3cdde3fe, 0x32caec93, 0xd20379ae, 0x411be811, 0x41756580,\n+  0x72fa1bbd, 0xa92125b3, 0x84c42f04, 0xdd4ee5fe, 0x3a25922c, 0x96446853,\n+  0x49ad3be0, 0x2880366d, 0x1c841afe, 0xf1e09019, 0xfb905fe1, 0xa451ad59,\n+  0x3ba9d0c9, 0x56db2e9c, 0xa42419f2, 0xe921e7a0, 0x3c9a3ca5, 0xad8ea375,\n+  0xcec7d091, 0x99bdb940, 0x477ef58f, 0x8a4933c7, 0xb2598b8d, 0xf5659df7,\n+  0xcfac1e1c, 0x339f8748, 0xe2a04aab, 0xe122b03f, 0x45bc6f37, 0xc9feeb30,\n+  0x9c75aaa0, 0xc13c174e, 0x0ea0585d, 0xdc58bbb4, 0x3a96bd5a, 0x20251482,\n+  0x3c7a714d, 0x696897eb, 0x6cb83b6b, 0xa37de406, 0x3b496b5f, 0x37e75d6a,\n+  0x380dd382, 0x0e1a513c, 0xda26fac9, 0xf2458364, 0x12b5c6ea, 0x79ce9e47,\n+  0x1ff1fcbf, 0xbe7c6e86, 0x59a6a7ba, 0x8d70f515, 0x94761453, 0x6b04e425,\n+  0x8768ffb2, 0x1ca5f425, 0x3f9e8407, 0x3b641184, 0x5f8f6756, 0x62b1a5a5,\n+  0x56bc2120, 0xd1e5da68, 0x17f2fa18, 0x8cce5e2d, 0xa1bc9c06, 0x8e290fb1,\n+  0x892df1af, 0xad10b8c8, 0xb43e5517, 0xd0597409, 0x4407c38f, 0x4a020d81,\n+  0xfea9c9b6, 0xd8e0e7d6, 0xd5b2aaf9, 0xde5e9b40, 0xda44ed4a, 0x45d6bf41,\n+  0x87aa3ca0, 0xc62d12fc, 0x4708acc8, 0x10212e26, 0x0d1227ff, 0xfeeb5742,\n+  0x5da02550, 0xd66668e7, 0x1d56e5e1, 0x32c215ec, 0xae1e0bef, 0x7f048b7e,\n+  0x58c0e922, 0x2aea8619, 0x58251aac, 0xbbe10425, 0xa1fea536, 0x2e1d9667,\n+  0xd233eb7d, 0xcf435c0b, 0xb0693c67, 0x61d918ea, 0x903ec9f0, 0xd6c4e8ac,\n+  0x0efb1788, 0xb0098f5b, 0x1709d878, 0x3c12b35e, 0x3f6ce1b7, 0xa1b3ff54,\n+  0x8a8f7dbb, 0x37608d6a, 0x73e8563e, 0xa3330540, 0x64e00749, 0xebbfcab9,\n+  0x8d5caaf9, 0x3bc87c7e, 0xedb2bd94, 0x22f8f62d, 0xe656dec3, 0xc5683222,\n+  0x670c1626, 0x94089e7f, 0x4237542f, 0x47d29440, 0x2fc4e530, 0x8419441e,\n+  0x8b288dac, 0x7f9245f9, 0xa7afb4e9, 0x8a15650d, 0x082adef7, 0x3104ef19,\n+  0x043c62de, 0x0aff3dc5, 0x7ecd0635, 0xe7e80a8b, 0xe0600fad, 0x4d8e81cc,\n+  0x81ebf4e0, 0xf587e30f, 0x7b372af7, 0x2d8f8ca0, 0xdee11c6f, 0xd3624b1c,\n+  0xf8adc426, 0xca9debed, 0x5c22de4f, 0x3634f778, 0xfae3186b, 0xacf8b595,\n+  0xd7bfa75f, 0x003cd316, 0xbbfe3cf6, 0xb023cb50, 0xc51055a1, 0x0063cffd,\n+  0x93869a77, 0x51e022d4, 0xfbceeb10, 0x5187457e, 0x109defc9, 0x673892d8,\n+  0xe13cfde2, 0xd4aa3272, 0xc09c8134, 0xbf89ad5b, 0x0327181b, 0x09511ec7,\n+  0xaa21b632, 0xd7e72186, 0xe41885b5, 0x46713f9c, 0x493d2789, 0x1386c526,\n+  0xd5d22a5c, 0xcefddfc4, 0xcf59281c, 0x92973ea6, 0x4ebe43f6, 0xeac5c6ad,\n+  0x6cf4897d, 0xd95082a0, 0x82ce562a, 0x28e5e9bd, 0x28d8f0db, 0xddf06e81,\n+  0x707b0166, 0x7dae3f00, 0xfbf5756a, 0x035a4680, 0x4f114102, 0xe7ba4b33,\n+  0x5190fedf, 0x106a7594, 0xe5f1bc49, 0xaae3ad67, 0xd7a1a766, 0x040ee971,\n+  0x9120a214, 0xf415b374, 0x1edc87ea, 0x17aab43c, 0xc6ad637d, 0x885858c1,\n+  0xd90303c7, 0xbfd4b70b, 0x3ff4eb0e, 0x344a9a88, 0xd81eea30, 0x95925446,\n+  0x5adef0ec, 0xabb5f5e7, 0x20bbd8c3, 0xc1c22cce, 0xe6944262, 0xc5acdb23,\n+  0x80024021, 0x2232c635, 0x94b30c81, 0x55f07648, 0x78569acd, 0x9696ea39,\n+  0x4dd6b528, 0x1c3e1b40, 0xde5853b3, 0x8a2c3679, 0x6eb5a7d8, 0x56bda89a,\n+  0x8f9cf096, 0xfda86d5b, 0x6481c7e7, 0x50a6a7d5, 0x15bfb45d, 0x4f9a5381,\n+  0xc057d45d, 0x4fb10024, 0xa0009f00, 0x5e1ca0dd, 0xac420f74, 0xcfbb38bd,\n+  0xf0d4a615, 0x19bf0318, 0x0e3aef84, 0xcb3d7b20, 0x166c1e3e, 0x58272fdd,\n+  0x3bfacf9f, 0xc0f5ce46, 0x63a13528, 0xea59e333, 0xa020ca8c, 0xaadd116b,\n+  0x3dbb5a3d, 0xe5523f47, 0x747f55ea, 0x0922171e, 0x64d520fb, 0x6c709e84,\n+  0x07ce951b, 0x35fdc402, 0x7508eb6d, 0xc495a8fa, 0xb0d11c39, 0x81313d65,\n+  0x57447ef0, 0xa7b61e26, 0xf72301f3, 0xbb096315, 0x45a3a7c5, 0xa903a44b,\n+  0x00432f88, 0x19081987, 0xeb4e1b66, 0xbb7b66bd, 0x6d245171, 0xde4182f5,\n+  0x0d89bd0b, 0x87f4de6c, 0xf70d8a60, 0x9a87855b, 0x08a27449, 0x4ac7720a,\n+  0xd4964017, 0xb0d9ddac, 0x4db3488c, 0xfe397d44, 0xd07b745b, 0x197dcb7b,\n+  0x6e9d567d, 0xe3b90812, 0x9143fef1, 0xb9e002ac, 0x115ff96d, 0xf60a2201,\n+  0x5b61c9c8, 0x09abab2f, 0xb14a44a7, 0x0ca19c73, 0x843c7997, 0xe3a9bbe6,\n+  0x5e3fc18c, 0x0c0404ee, 0x764df59d, 0x990ec2c2, 0x4ad0ba3c, 0x05e8be0f,\n+  0xe599647d, 0xc19d365d, 0x4d0c2990, 0xe5a9d9ac, 0xb680a72d, 0x4ce2e5dd,\n+  0x6d6c0267, 0x06f9c25b, 0xbd6078e0, 0xb5fcdc81, 0xd742fa41, 0xcccc2399,\n+  0xc691adc0, 0x215ad82c, 0xea73b0c3, 0xa511e5b0, 0xf499e0a6, 0x53e27ab0,\n+  0xd94440a2, 0x47752521, 0x9a6e3644, 0xab113708, 0x8f8b301d, 0x058a42a3,\n };\n+#endif /* !__NO_LONG_DOUBLE_MATH */\n \f\n #elif BITS_PER_MP_LIMB == 64\n \n@@ -279,9 +711,9 @@ const mp_limb_t __tens[] =\n   0x26b2716ed595d80full, 0x1d153624adc666b0ull, 0x63ff540e3c42d35aull,\n   0x65f9ef17cc5573c0ull, 0x80dcc7f755bc28f2ull, 0x5fdcefcef46eeddcull,\n   0x00000000000553f7ull,\n-#if FLT128_MAX_EXP > 1024\n-# define TENS_P9_IDX\t(TENS_P8_IDX + TENS_P8_SIZE)\n-# define TENS_P9_SIZE\t28\n+\n+#define TENS_P9_IDX\t(TENS_P8_IDX + TENS_P8_SIZE)\n+#define TENS_P9_SIZE\t28\n   [TENS_P9_IDX] = 0x0000000000000000ull, 0x0000000000000000ull,\n   0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n   0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n@@ -293,8 +725,8 @@ const mp_limb_t __tens[] =\n   0xb099bc817343afacull, 0xa269974845a71d46ull, 0x8a0b1f138cb07303ull,\n   0xc1d238d98cab8a97ull, 0x0000001c633415d4ull,\n \n-# define TENS_P10_IDX\t(TENS_P9_IDX + TENS_P9_SIZE)\n-# define TENS_P10_SIZE\t55\n+#define TENS_P10_IDX\t(TENS_P9_IDX + TENS_P9_SIZE)\n+#define TENS_P10_SIZE\t55\n   [TENS_P10_IDX] = 0x0000000000000000ull, 0x0000000000000000ull,\n   0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n   0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n@@ -315,6 +747,7 @@ const mp_limb_t __tens[] =\n   0xd2db49ef47187094ull, 0xae6209d4926c3f5bull, 0x34f4a3c62d433949ull,\n   0xd9d61a05d4305d94ull, 0x0000000000000325ull,\n \n+#if FLT128_MAX_EXP > 1024\n # define TENS_P11_IDX\t(TENS_P10_IDX + TENS_P10_SIZE)\n # define TENS_P11_SIZE\t108\n   [TENS_P11_IDX] = 0x0000000000000000ull, 0x0000000000000000ull,\n@@ -428,7 +861,441 @@ const mp_limb_t __tens[] =\n   0x35fcb457200c03a5ull, 0xf74eb9281bb6c6e4ull, 0x87cc1d213d5d0b54ull,\n   0x18ae42404964046full, 0x8bd2b496d868b275ull, 0xc234d8f51c5563f4ull,\n   0xf9151ffff868e970ull, 0x271133eeae7be4a2ull, 0x25254932bb0fd922ull,\n-  0x104bcd64a60a9fc0ull, 0x0000006230290145ull\n+  0x104bcd64a60a9fc0ull, 0x0000006230290145ull,\n+\n+# define TENS_P13_IDX\t(TENS_P12_IDX + TENS_P12_SIZE)\n+# define TENS_P13_SIZE\t427\n+  [TENS_P13_IDX] = 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x9f34522664cf8001ull, 0x7b8d5053644963e5ull,\n+  0xb945c82f49f0aa29ull, 0x933b6bb8430ff478ull, 0x64c501d45ff82d0aull,\n+  0x9ec1e1b373bbf174ull, 0xe90106893bfbe803ull, 0x3fef8d80f7390d8eull,\n+  0x2c73446bf31d1325ull, 0x1c19e379f5ca7a92ull, 0xf52d9d9c270af2beull,\n+  0x3abf72e1eb2bed48ull, 0x7ecf35084ac4ffc2ull, 0x38597a5a22019a82ull,\n+  0x9a51ff6ebe6a7b3cull, 0x0c0abe9da2d28437ull, 0xc79887ff7c9ec6eaull,\n+  0x436420d05851c899ull, 0x72b5547fefead581ull, 0x077ad8f899b1d2b5ull,\n+  0x3b4305ed5cddbf5bull, 0x2d88f3fde3861ac7ull, 0x393220aa3d6b43beull,\n+  0x1cd62095e5382405ull, 0x87a0d1e161a10c96ull, 0x68c933e6ca95a55dull,\n+  0x778089bb9ee082e2ull, 0xfbb6d8d441429ee9ull, 0x26cf5471c529500dull,\n+  0xd6c9b14068b9be29ull, 0x8415185207be635aull, 0x83730335b5572182ull,\n+  0xdd312d31eb2300b4ull, 0x488da59c05d6dd9bull, 0xda2c2e4037784d25ull,\n+  0x6a57d7206a8d92faull, 0xf07a8632950b41acull, 0x2ecad06acd55f062ull,\n+  0x34c98bb0e6a3dfe7ull, 0xb60521b19c767d8full, 0xe87d16be752aafd1ull,\n+  0xe58a8b0c9de1d728ull, 0x2fa2c119c6013830ull, 0x519b40c83c4f9156ull,\n+  0xab78701b5058fc8full, 0xc502a554adc59c47ull, 0x6647f04c0fb3286full,\n+  0x5ea495c89db4076eull, 0xb4f00f8b9c74fab1ull, 0xd092b4c6897c7a3cull,\n+  0x32f31fa8283e0340ull, 0x67b63de2eeb708ccull, 0xef2bc02b4f7b3c8bull,\n+  0xc49344c0da14bfe3ull, 0xb6c4e69eaabc85beull, 0x63a110162ece8aa6ull,\n+  0x726ae4d919cfba4dull, 0xee6ae7070fc90b42ull, 0x4d9aabc54290b04aull,\n+  0xf34906cdfb2b070eull, 0x52ca97091ff54b0aull, 0x164315700b42bfe1ull,\n+  0x6b5565bb980f3076ull, 0x9ce63c76eb8c4c4aull, 0x3da24c53b9e4c771ull,\n+  0xb50e3c666f0266faull, 0x01bb4b9676e34f79ull, 0x0fbea1249948cf3eull,\n+  0xa1fa4edc86bead12ull, 0xc3b97bf9d11e901cull, 0x370ca58e71730e03ull,\n+  0x886467e248b19715ull, 0x3c727e24db237497ull, 0x8e67d76e2116ccd2ull,\n+  0x34bdedd3f973aecfull, 0xb042ab0531d680ecull, 0xfc5c3c17770e96a0ull,\n+  0xb8204eceab6f1874ull, 0x416c0ced5843f3a5ull, 0x9578018311dd112full,\n+  0x7e0e8613b1c74bd8ull, 0xa79ffc1096c6453bull, 0xfcd6da0ab2157651ull,\n+  0x3dd0ccac836a34a7ull, 0x496049ed316e5a36ull, 0xdea1a97d0322bcb2ull,\n+  0x39578d53cdf2aa5aull, 0x030565c91d1aa931ull, 0x324e0a27d198cbedull,\n+  0x284325345db83e8aull, 0x5cb134c090bf23e8ull, 0x009e5051dd0adab6ull,\n+  0x7e36a6d7f8ad61daull, 0xbdffe6aa84c75e57ull, 0x138d680eb5d5532eull,\n+  0x4a5f74a1bd84ddacull, 0x55538cfaccff00d1ull, 0x48528011b0948b8cull,\n+  0x9e047ad7e345f82eull, 0xea77bef06ee770ffull, 0x2f1625670fc13669ull,\n+  0x0614686c869426acull, 0x4263ed823a3ff464ull, 0x57205a7ab3589b47ull,\n+  0xae6fc46b213f24adull, 0xd92b133f3de03e4eull, 0x1b49c24a315a589bull,\n+  0x1641c13873381bcbull, 0xbc680ada7bc99425ull, 0x962e9884a5cfbc9aull,\n+  0xfc8d12f60a960d70ull, 0x60acc868ed18ef4cull, 0x131130369aea5d14ull,\n+  0x2d99a5b0c747c87eull, 0x006b36583a369bb3ull, 0xe43fa6e6118a5135ull,\n+  0xa13dc05eb4947190ull, 0x0dbd7170d7733db8ull, 0x117ed7e7c3fb67d1ull,\n+  0xc05fe99ee2d72a49ull, 0xd971a25b9638db40ull, 0x1a1595594239d468ull,\n+  0xc1117392850a223cull, 0x567b5fc022d2dbd8ull, 0xc051007a92c5b4ebull,\n+  0xfb35572011cc0099ull, 0x398481616907810dull, 0x61d19ef25e8534f4ull,\n+  0x8a0ab03c2ee8c466ull, 0x879aa514c234af76ull, 0x59e5da579774a235ull,\n+  0xf339bd5a9bc466b3ull, 0xbbb5fd6744ab026dull, 0x3685c9f22b977202ull,\n+  0x7054359e03e5dc00ull, 0x9ba11f085239cfb0ull, 0x9c258687f8237562ull,\n+  0x52c7bf8fa3b510ddull, 0x3245e079b31ed0cfull, 0xbaee38c7ff9ff8d3ull,\n+  0xf702b3b9f17d5562ull, 0xcbca275dcc4c8563ull, 0xe817dbace005d9d1ull,\n+  0x62cee35005c6920aull, 0x19e049b90f1deac0ull, 0xb2a27a1659599f74ull,\n+  0x7dcef00df0911d5aull, 0x375522513603dd66ull, 0x5fa022da97813735ull,\n+  0xefbe57c20d849416ull, 0x5761929630a0e592ull, 0x11735043c953cc47ull,\n+  0xc0444be0a83526adull, 0x16ff5136b5f8463cull, 0xf037572c2a0a6631ull,\n+  0xb1bf8daad30464daull, 0x0f3e9e7e7f5718f7ull, 0xc26f2624e5a4cfe7ull,\n+  0xdfe8f4858c9b5ae4ull, 0xc64a1509f6fa82e3ull, 0x3024b220acb24aeaull,\n+  0xddcdfeddddb02ac0ull, 0x384c86c3d834c574ull, 0xdd48a571d904e099ull,\n+  0x77b35c744550a05full, 0xaaebdc6d81e85f71ull, 0xd4cdc0540f9bb0b1ull,\n+  0x845786af7af4df85ull, 0xdf2a91cae5e53887ull, 0x5689a3c4f6a58211ull,\n+  0xa705983a8cf6aa15ull, 0x2ce7fef09fbf2f52ull, 0x4a3b536548e84a62ull,\n+  0xd48a0872f8281a47ull, 0xf0929c3e8423dcf6ull, 0xe9ec071b044a5049ull,\n+  0x20e30c1b17decc36ull, 0x3342196a45fc2813ull, 0x6601e33746afb7f9ull,\n+  0xf18094d130754439ull, 0x61410dd1d38b4112ull, 0xd97d4dd8d8796b36ull,\n+  0x8080519147e9bc0bull, 0xcde438c11584e2daull, 0x409659a1955d24f1ull,\n+  0x5a09635f1b0950b1ull, 0x615472b965b1febeull, 0x6308e067525dc00aull,\n+  0xd4e705a44089e2d4ull, 0x32c18b2643fc9209ull, 0xaf2711534447a5faull,\n+  0x4dc4f0d23617cadcull, 0x6aa116ef692eb386ull, 0x0641dc0b655991bcull,\n+  0xc655966454469597ull, 0x4bdc0d1a749c0fe8ull, 0xc5292a61a7d3381eull,\n+  0x42474cc24eb65fdcull, 0x19dfc9eef2c6b173ull, 0xbece2ee30a19a199ull,\n+  0xaa03aa7cc68b778dull, 0xae54d2bec8db86f0ull, 0xdee3f48fb92a01e0ull,\n+  0xf6ae28526023c0a9ull, 0xa441cb9ea233763bull, 0x3a8bb4b73246ddddull,\n+  0x308ef2c844faa3c3ull, 0xd2862534fd1c8516ull, 0x62336f6f3b25ebe7ull,\n+  0x0b8e2ce60c336a45ull, 0x11eea1f2e867f171ull, 0x68df4903523972ecull,\n+  0x51ef4cb750c05824ull, 0x3ffae115cb4df2a8ull, 0x3ed1635fb51aca2full,\n+  0x0a5ac09fd6ff1cc6ull, 0x0a3dc76fde8ed9d6ull, 0x37991dde5dc2d8ddull,\n+  0x80ad6e13f95bacb2ull, 0xd4f8c7a6163005eeull, 0xa4760f083225d180ull,\n+  0x9b2b1a875fff004dull, 0x5cd00b66e7ea8576ull, 0x285dd80dec478452ull,\n+  0x4301b3a120112439ull, 0xfacbb68cff879fc8ull, 0xb17fdf84af6af6b8ull,\n+  0xf4489576c208d9f1ull, 0xadcc862c8794a6e9ull, 0x931685a40e83e54cull,\n+  0x1e40293bab01c580ull, 0x1f1ddf7fcad784faull, 0xcee722b26b856084ull,\n+  0x74254eb41c39938bull, 0xb9c26d9ac7ccebf4ull, 0x2e3ece246b08dfb9ull,\n+  0xdff60410981455ecull, 0xe06fa38bbc804e2bull, 0x72e53c52b534540cull,\n+  0xb2a5c05a02dfb2efull, 0x973133385002a2a5ull, 0xd61df455597c53ffull,\n+  0x39ac2ec534e5261aull, 0x388b7539c6bc0cabull, 0x00eac7043f732fc0ull,\n+  0xc089971e92fb21d9ull, 0x7af93f8fb4ffa503ull, 0xa8311b2372e353b6ull,\n+  0x1de496ca8266c9afull, 0xd6fa0b51dbdb16b0ull, 0xbd5630899991a5efull,\n+  0x0954a1e3168cbe0full, 0x53d09723537b9245ull, 0x86558cb92867272dull,\n+  0xfac85d100b83f026ull, 0x1e5ddb95f8562951ull, 0x48d27b92ad3668c8ull,\n+  0x19b58a99c930b7e6ull, 0xa9cda917a3de74e3ull, 0x7a4dd16ecb6e35eeull,\n+  0x4d84073f4c80e9d5ull, 0x9cffcfc074a95ba8ull, 0x15796372d28485ebull,\n+  0x77eda8df5717e9cdull, 0xadb965e1ab473c4eull, 0x5bc05659ffad6959ull,\n+  0xfb2402276ed63880ull, 0xd15fdddf2014850bull, 0xb538f37dfdd74592ull,\n+  0x1473396f3a8e2e82ull, 0x3ce41a21f6a5edf8ull, 0x754e82640cc4351aull,\n+  0xc7821b96aab95e73ull, 0xc242faaaf42ff463ull, 0x087e260edd00ac65ull,\n+  0x0dbe032817d193f5ull, 0xf9d10f96844a63c9ull, 0xbaf127ec85aa91ddull,\n+  0xce85e6a50ab6dabbull, 0xe7b56a161af5d24full, 0x57d1d79fcd6c5a19ull,\n+  0xec4dd2f05dfc2b28ull, 0x8d72216a18fe64a1ull, 0x72f14a085f222077ull,\n+  0x3bf038abd8b09b11ull, 0xc4265d7cc6cf1f44ull, 0x46398d2cdab1b0e7ull,\n+  0xb6e705d37dcfdc68ull, 0x362c11834aafd1e6ull, 0xf6ac98b7d8701107ull,\n+  0xd6649424ad114d7eull, 0xddd1c6e4c40ab551ull, 0xc9d284c8a132030full,\n+  0x824069eedb1f662aull, 0xc846b3ad4157904bull, 0x0a248c17d38481caull,\n+  0xe8745febc846831full, 0x00000000000025a8ull,\n+\n+# define TENS_P14_IDX\t(TENS_P13_IDX + TENS_P13_SIZE)\n+# define TENS_P14_SIZE\t852\n+  [TENS_P14_IDX] = 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,\n+  0x41b5687d099f0001ull, 0x8c75ee63cbfd1b6eull, 0xd75296ad4b191ceaull,\n+  0x1eb5da9b2394d80aull, 0x5c79fed918a004edull, 0xed67a1b837e3b01cull,\n+  0x2a1a34d578d9a714ull, 0x6b1d35168fbe7f0dull, 0xa7825681e57c43eaull,\n+  0xd3e716e1c81d32e8ull, 0xa6d93d6558860b00ull, 0x0113232f83159c97ull,\n+  0x7321c3a0d6122269ull, 0xca4ca9d3be6a92f3ull, 0xc0e55163d1e276a5ull,\n+  0x7b7a78c1b05915d6ull, 0x62a3df4b0fae0ca4ull, 0x13030d1108abec6full,\n+  0x60dcc8f2d446338aull, 0x25e1f9f65f05d1d5ull, 0x7f8c711304a40beeull,\n+  0x589ff59a88f47ec0ull, 0xea5068a1308c3661ull, 0x06e87dff95fb108full,\n+  0xd4d4abdc1559e741ull, 0xee16907c01e092e4ull, 0xe73aabcb5a7b78e6ull,\n+  0xad372889146bb7e0ull, 0xfd49fc1d4f6b43c5ull, 0xd37392530f29f589ull,\n+  0xe2acfcc2c4745a56ull, 0xedd016cdd75ccbc7ull, 0xef82ccd3ac5a63e0ull,\n+  0x2bdabfc4b352496eull, 0x01b0197f5b3d0401ull, 0x29d9253dade96d3cull,\n+  0x73c56b1b19bebdbaull, 0x1f2b7f1e255e7b25ull, 0x6299c836a56a457eull,\n+  0xa2ca74c65c63cc78ull, 0xee571bea5c85fe93ull, 0x2db5f1d0508e2561ull,\n+  0xa9b87b99b1fde6a9ull, 0xf7260f074fb90a37ull, 0x56ee7e97ff58c5fdull,\n+  0x42e6f9cebab9fa46ull, 0x1b76d26778816f73ull, 0x4566519cfdb2c728ull,\n+  0xb9f6a95fae17dd8dull, 0x67160dea1cd533a1ull, 0xfcd8f8f914534bacull,\n+  0x708b1f0af3f2901dull, 0x9457a1df8829063bull, 0x36bb93358f872aa1ull,\n+  0xd889d109b5672c0eull, 0x933066727ec63a6aull, 0x8239ab6839b6d457ull,\n+  0xbe0d7a1fef2e2506ull, 0x05f655224251b635ull, 0x032868910ef0bd55ull,\n+  0x9815fbac2c42b664ull, 0x814e379c471fd611ull, 0xa4a25bda7dd8349dull,\n+  0x01b9e39d9886b84cull, 0xae31cbc95a7ce1a2ull, 0x83ef8faf86d07f32ull,\n+  0x58470fdfb66b5b76ull, 0x5161888996d59b73ull, 0xfc8e0fc6dc400cf7ull,\n+  0x09a08e56af693670ull, 0x74f682e191737de6ull, 0x7f8ac56d0e03923full,\n+  0x8e05e49a7400cfd4ull, 0x384e11644cebea3cull, 0xb50ae05eb2e43d8cull,\n+  0xa40061230f0b3ed9ull, 0x4e9a193464137137ull, 0xd9621be605404100ull,\n+  0x5c347ebb9329a255ull, 0xe684346b75cbeb1bull, 0xba6a9753840fee55ull,\n+  0x60505b7bf43836f6ull, 0xfd6d475d334a9278ull, 0x267375aa5db94761ull,\n+  0x024f6d63c110e160ull, 0xa99b4c192ec96610ull, 0x338cfd90b915c9f4ull,\n+  0xb9e51a09f02ea846ull, 0xfae31d88ae928fb1ull, 0x8475dd261a3db721ull,\n+  0x7ad4c4075769489dull, 0x34e275c80a49e9f0ull, 0x1d63114a3d075d83ull,\n+  0x6b98e94772a96415ull, 0xd50fdc361d500b5full, 0x87751275141e5085ull,\n+  0x2278809ee7843834ull, 0x947aead2b15c52eeull, 0x5197b744fedb7b02ull,\n+  0x8849d0a664e09ba8ull, 0x11ecb91323beaa85ull, 0x5d9848480f7ed667ull,\n+  0x588290e99f6331eaull, 0x7e09e9e5a24d64d1ull, 0x03a501df32592033ull,\n+  0xbb3df73827c270a6ull, 0x4190833c3c7c5a70ull, 0x80e5d89b7d4bf9f4ull,\n+  0xfaefb663a7fc6194ull, 0xd3b6adcd62e52b49ull, 0x1f2cf73a809646fcull,\n+  0x531e4bfbb765ed4full, 0xaf12d1a692cd05f2ull, 0x38da107422ee30f3ull,\n+  0x1a725608ed6447bbull, 0x7a3c6f54aff222d3ull, 0x7b0e8d12bca79a56ull,\n+  0x6e34d6fb1c4660c5ull, 0xfe9dc99c6f481a9full, 0xd8489ea0f888db82ull,\n+  0xc0dea28184b4c0faull, 0xae30e887977a8583ull, 0x1d4848cb8c1cbcecull,\n+  0xd011b0fc0ee0d137ull, 0x478d7dd494b5fd49ull, 0xacab62ad3d67f2e7ull,\n+  0x1dfc7df50ab4e62aull, 0x870b0e75d22e4553ull, 0x1b73bf6d49b7b001ull,\n+  0xdc9f073712807ffdull, 0xc0e2f2506f3e5852ull, 0x4d96a55a93e62e4aull,\n+  0x83a126dbc1d0e185ull, 0xefbfd043190b917bull, 0x8f25b6ddc7df1669ull,\n+  0x476c17a62062eac9ull, 0x25460383cb60f278ull, 0xda8c05be0e85e996ull,\n+  0x692062346f678a34ull, 0x1947b69af59be929ull, 0x90fd83220ebfa11bull,\n+  0xd699b1ec15c1e9bfull, 0x7001d002b2f0343full, 0xc0778ab5cf76eaaaull,\n+  0xb7b008e25173eda8ull, 0x505d3f4d4e00e4c6ull, 0x1c9d4e1299dd341aull,\n+  0x474c5e954ffb6978ull, 0xda19f9386e9ca6ddull, 0x98dc318ee2dda6e0ull,\n+  0x3f67b836da455e54ull, 0xa97e9a6421e4181cull, 0x527a08bb1e17f655ull,\n+  0x682972ad1712dc21ull, 0xccbeadf10042d256ull, 0x861e99e0ca497b96ull,\n+  0xeeb0f6500d8aa585ull, 0x506af77edcc3c3daull, 0x7c9d60be5deb9768ull,\n+  0x37b37e95e9d978b7ull, 0x42747f7577ad0b94ull, 0x6d5fd2fe07be42c4ull,\n+  0x0d8fc27d4c8c5da9ull, 0x0ccf60230f2fd50full, 0x3b1101bd5b56053full,\n+  0xc0feca2756d34906ull, 0xc4888da47602a150ull, 0x56d10633419abe54ull,\n+  0x8db14123c76120edull, 0x741e8f76b656e675ull, 0x96be6f21d297b94eull,\n+  0x9b409e273662439dull, 0x35fff92a6626574dull, 0x69e02439bf558205ull,\n+  0x6400fd4cbe6838b7ull, 0x1f4b158aa00f64caull, 0x04cca5589e2052aeull,\n+  0x58da644cfb5ee69eull, 0x8ab1940196f26e1full, 0xed8bf908bee1e16bull,\n+  0xd50babab2f2809a4ull, 0x6b0a89296e57f7e6ull, 0xb54a4cfcf7356431ull,\n+  0x6f9fd6cb9a1d0ac4ull, 0x3b42f469836bfbf8ull, 0x40111b6b8bd32129ull,\n+  0xb345d9557c278fb1ull, 0xd32cd13cff1fd188ull, 0x3789f792f7ec3aa0ull,\n+  0x4d79a4bfab707fa4ull, 0xd9c24d8eb3a28cebull, 0x06e2eb3e7134dadcull,\n+  0xb379d811d7c04f76ull, 0x8c94fc332b3b0ebcull, 0xc06c5d01a28b53abull,\n+  0x7fea91cad900432aull, 0x64845f086d30b008ull, 0xfde4687d796f5349ull,\n+  0xe0046c56f888fe67ull, 0xce98cb11ae482177ull, 0x1feb440084590c46ull,\n+  0xff2f16116e1ba29bull, 0x3159ca8cf73f3e9cull, 0x56f0ed4634845918ull,\n+  0xd9a16a01b7d10c32ull, 0x3cee3e24405b9e91ull, 0x2ab396b48739e4a6ull,\n+  0x09835dfd3f1b7871ull, 0x1592b74a8c7a489full, 0x0e8d3f3705df7c81ull,\n+  0x68b29622a61ff273ull, 0x43ff84a6259cd337ull, 0x566ed88381cf8fe9ull,\n+  0x35c7942848427fc6ull, 0xa97e8c8bcfd2fb59ull, 0x32ddca23750aaed8ull,\n+  0x96fbfff9aa8108efull, 0xe3cdf588a1d039aaull, 0xcd6b3fdb47e77e00ull,\n+  0x9a522152e72a9a80ull, 0xef175610eda06283ull, 0x339fe6c4a670cfa1ull,\n+  0xc2d7f53b2dfbf3eeull, 0xcc47e4b092a44e27ull, 0xd64f83c9dfa212bcull,\n+  0xb51319bf997e5475ull, 0x1fc2c7b69fffe599ull, 0x832169ddef5605e7ull,\n+  0xbf921dc8feb6be4eull, 0x72759f8d60bdfb1dull, 0x020eebed3546efa0ull,\n+  0xdb20a2fecaab3d64ull, 0xb2b62bddba1218f6ull, 0x8fde5cfa3101eff0ull,\n+  0xa52114d22e319213ull, 0xdf08b1dd87eead3full, 0x746f34d0a5387642ull,\n+  0x4cc40317d76c4844ull, 0xb7d76071e4f689c9ull, 0x6e1c79155fe0b4a2ull,\n+  0x3efb7d71c7d43f53ull, 0x35a75f5f068dd906ull, 0x750f4607652d7770ull,\n+  0x36c2cf8e64a1656cull, 0x9348ef93214d758bull, 0x9674b7f3e4058978ull,\n+  0xbdfaba8f10570b0bull, 0xa92b261fcef09dd7ull, 0xcbebb81f071c21b6ull,\n+  0x44228cd6f427ed6cull, 0x5036c46065e56fcfull, 0xccfd848bad919defull,\n+  0x7527dca361d158a6ull, 0x508550754cf30459ull, 0x3540f5aaa70dfd09ull,\n+  0xb5ba3d4e35577adbull, 0xcdfb689f35736c4full, 0x97ab0dcaefe8fa82ull,\n+  0x77a7fe9c51bd2ff3ull, 0x3d618b813107846cull, 0xfc5e9651bca797a4ull,\n+  0xf7e8791fe2e08fbcull, 0x7c426f9d772f1cc0ull, 0x0080c3ab08d56f88ull,\n+  0xe6d46ec60deea663ull, 0x6b681d9d7dca4eb7ull, 0x4af0e0f2da06730bull,\n+  0x52097463038bf468ull, 0xbc09bb9aca19d302ull, 0x3ded4433aa55aeb1ull,\n+  0x3e4b7865f27938baull, 0x7ef9631428296be7ull, 0xdf0b6b477a1d55ccull,\n+  0xcedda5bdcde11852ull, 0x72ca1a8bf00a0eb3ull, 0xb002fdcc5241b572ull,\n+  0xc4878862ff8898b3ull, 0xbf4bca29b3e85372ull, 0xf2d831897e1fef45ull,\n+  0x3cdf9e050f5427afull, 0xf65c06ac75bae885ull, 0xa3145eac9c71a700ull,\n+  0x76255bbfde63bab2ull, 0x4c6ad3d06e817be6ull, 0xe95ef2f825ab9935ull,\n+  0xd54f78de11cd095aull, 0xb3829dcba001ae7eull, 0x18eb9c9e5abd18bdull,\n+  0xe3e3556cada3c504ull, 0x5191ac5fd35479aaull, 0xc8d1d9d3221821acull,\n+  0x088c3fc8313a8c51ull, 0xb154abedc146a264ull, 0x349ec09392755bc5ull,\n+  0x41d5886cf94aba57ull, 0x36aba94b0a5ad8b2ull, 0xa9ad229f883a6758ull,\n+  0x0546172f5d64069aull, 0xc3808ea40366da16ull, 0x70f0a2350b172403ull,\n+  0x4fceb827fa816e66ull, 0x167b56d5a65fcfeaull, 0xfec36bcdfe2b9fb2ull,\n+  0xcd96320fa84c4cc9ull, 0x09eda8b83e128584ull, 0x7ec7e17b91eca525ull,\n+  0xc14032f4bc45bedcull, 0x2eb20bc09be689a7ull, 0x14ef835fffdf1efcull,\n+  0xcd778dd8c6966c59ull, 0x23d477155feb0f3bull, 0x5722a550d64b87c8ull,\n+  0x315a1a8b62883198ull, 0x4b7e9d7a648e17e6ull, 0x67caca842ba43d28ull,\n+  0x6e660159741f0398ull, 0x3dde3c453e16e1a9ull, 0xc7eb0aefa53e56aeull,\n+  0x78751d733f39f33eull, 0x626770f745816df8ull, 0x909e87f4cb17d28dull,\n+  0xc1dcf32893a86abaull, 0xd895d0421a1e4ce2ull, 0xbb00eaf5b9f6dd69ull,\n+  0xca609578acc37687ull, 0xf8b86d4c5b490d39ull, 0x39419f6df2737ef0ull,\n+  0x72524a0369267bc0ull, 0xdbc01e936eb060c4ull, 0x83984d54291035b1ull,\n+  0xe08cbc20f673ad85ull, 0x584803a61fb24915ull, 0x4088ddb5e15bbcd7ull,\n+  0x2c18041ad4c22542ull, 0xb2ba69b4a51372d1ull, 0xcd11c2962299283full,\n+  0xac54df2325dcd6f3ull, 0x77e16e1d24a3a55eull, 0xb99d85c0b3cd415bull,\n+  0xe91154e3497befc7ull, 0xb55100aa7365cd8bull, 0xfc0927a60ee699ebull,\n+  0x8acaa910efb374deull, 0xda3f000683b40e3dull, 0xc6ce1b758590a089ull,\n+  0xfda2f7f354f6ff20ull, 0xd0763b6dd2ab58f6ull, 0x2519622d6caf2515ull,\n+  0x9863638fc3714057ull, 0x09ea4a4dea00bb4full, 0x6b01fe5fe69de96dull,\n+  0x529e32ec960161a5ull, 0x01a37eeaf8260ae9ull, 0x5aa0716f69710577ull,\n+  0x4260fedacb3fb1daull, 0x76012f75a33fb790ull, 0x130f09ae24c0e5beull,\n+  0x5c8ecb762e8323dcull, 0x401b5f5c17cb8f12ull, 0x47e1560a5f0a63e0ull,\n+  0xee1377d4dc57a786ull, 0x0aa294b9228e7ee5ull, 0x55b0fe2faea6c534ull,\n+  0xf108b772922d318aull, 0xdfb69702f15bddf6ull, 0x90e1db66cd438a4eull,\n+  0x568ef6cb584ce4a1ull, 0x6da376ba69e55f9dull, 0x45c7e2945ca6c109ull,\n+  0xcf5b6c0cc977b3e9ull, 0x11b487ae1d694499ull, 0xbcb3cc6ecf8339acull,\n+  0x046b107150b828e0ull, 0x2c6159465703ed0dull, 0xa908dbd0720d1610ull,\n+  0x22c076e2742bbe33ull, 0x1d0cefa448966a66ull, 0x601352bf1dde819full,\n+  0xa585cc4ab9370c39ull, 0x5a2f7206eb857f94ull, 0x49cd0f1f3fae6b58ull,\n+  0x1b89d47678e5fb3dull, 0xed82945b74e9e65bull, 0x2941c4d9b74e6483ull,\n+  0x565c18dc7e087accull, 0xbf4ccd3d1a09f2e5ull, 0xa522631dd304e977ull,\n+  0x4517109b6123378eull, 0x4bf1a506b7e4285aull, 0x683172f8625803c2ull,\n+  0x3f8a2b11c84e7354ull, 0xed4204917dd12b89ull, 0x9853fb978c698b0bull,\n+  0xb697e1c99631777bull, 0x510381105f028f05ull, 0x30e255e39055f055ull,\n+  0xb990321ee2d0c1b6ull, 0xff4dc144a8fdf4d1ull, 0x148999e0521a3056ull,\n+  0xa9c96852a8111c66ull, 0x4b394a948157f508ull, 0x94ec2e93a0dc4df1ull,\n+  0x8fc283776e6afa56ull, 0xc435186ff72ffa04ull, 0x8d037f6ff91488b7ull,\n+  0x48757727a899ec1eull, 0xb8cf377d4101b612ull, 0xb4570569a5a54e68ull,\n+  0x063d9cfd2ac5a0a0ull, 0xf1a5884c7c504c74ull, 0x8d0b91bf0a9b1955ull,\n+  0x79ff5361e5f6862full, 0xc6fd31fb0ed3d38full, 0x85b9c6489fe131c7ull,\n+  0x8e77e86b8febf2b4ull, 0x56429986992ba80eull, 0x608cdda56848879aull,\n+  0x754b300e3e0d106eull, 0xafd5195b25200576ull, 0xe81f09395d37aad9ull,\n+  0xdeeea20ae00a390eull, 0xb5d51155f5fef0beull, 0x9e72ebcf6e27d173ull,\n+  0xb966f7bab776e978ull, 0x726c840809520238ull, 0x65dce5a23347ebc5ull,\n+  0x8c92d7403ec78337ull, 0x32caec933cdde3feull, 0x411be811d20379aeull,\n+  0x72fa1bbd41756580ull, 0x84c42f04a92125b3ull, 0x3a25922cdd4ee5feull,\n+  0x49ad3be096446853ull, 0x1c841afe2880366dull, 0xfb905fe1f1e09019ull,\n+  0x3ba9d0c9a451ad59ull, 0xa42419f256db2e9cull, 0x3c9a3ca5e921e7a0ull,\n+  0xcec7d091ad8ea375ull, 0x477ef58f99bdb940ull, 0xb2598b8d8a4933c7ull,\n+  0xcfac1e1cf5659df7ull, 0xe2a04aab339f8748ull, 0x45bc6f37e122b03full,\n+  0x9c75aaa0c9feeb30ull, 0x0ea0585dc13c174eull, 0x3a96bd5adc58bbb4ull,\n+  0x3c7a714d20251482ull, 0x6cb83b6b696897ebull, 0x3b496b5fa37de406ull,\n+  0x380dd38237e75d6aull, 0xda26fac90e1a513cull, 0x12b5c6eaf2458364ull,\n+  0x1ff1fcbf79ce9e47ull, 0x59a6a7babe7c6e86ull, 0x947614538d70f515ull,\n+  0x8768ffb26b04e425ull, 0x3f9e84071ca5f425ull, 0x5f8f67563b641184ull,\n+  0x56bc212062b1a5a5ull, 0x17f2fa18d1e5da68ull, 0xa1bc9c068cce5e2dull,\n+  0x892df1af8e290fb1ull, 0xb43e5517ad10b8c8ull, 0x4407c38fd0597409ull,\n+  0xfea9c9b64a020d81ull, 0xd5b2aaf9d8e0e7d6ull, 0xda44ed4ade5e9b40ull,\n+  0x87aa3ca045d6bf41ull, 0x4708acc8c62d12fcull, 0x0d1227ff10212e26ull,\n+  0x5da02550feeb5742ull, 0x1d56e5e1d66668e7ull, 0xae1e0bef32c215ecull,\n+  0x58c0e9227f048b7eull, 0x58251aac2aea8619ull, 0xa1fea536bbe10425ull,\n+  0xd233eb7d2e1d9667ull, 0xb0693c67cf435c0bull, 0x903ec9f061d918eaull,\n+  0x0efb1788d6c4e8acull, 0x1709d878b0098f5bull, 0x3f6ce1b73c12b35eull,\n+  0x8a8f7dbba1b3ff54ull, 0x73e8563e37608d6aull, 0x64e00749a3330540ull,\n+  0x8d5caaf9ebbfcab9ull, 0xedb2bd943bc87c7eull, 0xe656dec322f8f62dull,\n+  0x670c1626c5683222ull, 0x4237542f94089e7full, 0x2fc4e53047d29440ull,\n+  0x8b288dac8419441eull, 0xa7afb4e97f9245f9ull, 0x082adef78a15650dull,\n+  0x043c62de3104ef19ull, 0x7ecd06350aff3dc5ull, 0xe0600fade7e80a8bull,\n+  0x81ebf4e04d8e81ccull, 0x7b372af7f587e30full, 0xdee11c6f2d8f8ca0ull,\n+  0xf8adc426d3624b1cull, 0x5c22de4fca9debedull, 0xfae3186b3634f778ull,\n+  0xd7bfa75facf8b595ull, 0xbbfe3cf6003cd316ull, 0xc51055a1b023cb50ull,\n+  0x93869a770063cffdull, 0xfbceeb1051e022d4ull, 0x109defc95187457eull,\n+  0xe13cfde2673892d8ull, 0xc09c8134d4aa3272ull, 0x0327181bbf89ad5bull,\n+  0xaa21b63209511ec7ull, 0xe41885b5d7e72186ull, 0x493d278946713f9cull,\n+  0xd5d22a5c1386c526ull, 0xcf59281ccefddfc4ull, 0x4ebe43f692973ea6ull,\n+  0x6cf4897deac5c6adull, 0x82ce562ad95082a0ull, 0x28d8f0db28e5e9bdull,\n+  0x707b0166ddf06e81ull, 0xfbf5756a7dae3f00ull, 0x4f114102035a4680ull,\n+  0x5190fedfe7ba4b33ull, 0xe5f1bc49106a7594ull, 0xd7a1a766aae3ad67ull,\n+  0x9120a214040ee971ull, 0x1edc87eaf415b374ull, 0xc6ad637d17aab43cull,\n+  0xd90303c7885858c1ull, 0x3ff4eb0ebfd4b70bull, 0xd81eea30344a9a88ull,\n+  0x5adef0ec95925446ull, 0x20bbd8c3abb5f5e7ull, 0xe6944262c1c22cceull,\n+  0x80024021c5acdb23ull, 0x94b30c812232c635ull, 0x78569acd55f07648ull,\n+  0x4dd6b5289696ea39ull, 0xde5853b31c3e1b40ull, 0x6eb5a7d88a2c3679ull,\n+  0x8f9cf09656bda89aull, 0x6481c7e7fda86d5bull, 0x15bfb45d50a6a7d5ull,\n+  0xc057d45d4f9a5381ull, 0xa0009f004fb10024ull, 0xac420f745e1ca0ddull,\n+  0xf0d4a615cfbb38bdull, 0x0e3aef8419bf0318ull, 0x166c1e3ecb3d7b20ull,\n+  0x3bfacf9f58272fddull, 0x63a13528c0f5ce46ull, 0xa020ca8cea59e333ull,\n+  0x3dbb5a3daadd116bull, 0x747f55eae5523f47ull, 0x64d520fb0922171eull,\n+  0x07ce951b6c709e84ull, 0x7508eb6d35fdc402ull, 0xb0d11c39c495a8faull,\n+  0x57447ef081313d65ull, 0xf72301f3a7b61e26ull, 0x45a3a7c5bb096315ull,\n+  0x00432f88a903a44bull, 0xeb4e1b6619081987ull, 0x6d245171bb7b66bdull,\n+  0x0d89bd0bde4182f5ull, 0xf70d8a6087f4de6cull, 0x08a274499a87855bull,\n+  0xd49640174ac7720aull, 0x4db3488cb0d9ddacull, 0xd07b745bfe397d44ull,\n+  0x6e9d567d197dcb7bull, 0x9143fef1e3b90812ull, 0x115ff96db9e002acull,\n+  0x5b61c9c8f60a2201ull, 0xb14a44a709abab2full, 0x843c79970ca19c73ull,\n+  0x5e3fc18ce3a9bbe6ull, 0x764df59d0c0404eeull, 0x4ad0ba3c990ec2c2ull,\n+  0xe599647d05e8be0full, 0x4d0c2990c19d365dull, 0xb680a72de5a9d9acull,\n+  0x6d6c02674ce2e5ddull, 0xbd6078e006f9c25bull, 0xd742fa41b5fcdc81ull,\n+  0xc691adc0cccc2399ull, 0xea73b0c3215ad82cull, 0xf499e0a6a511e5b0ull,\n+  0xd94440a253e27ab0ull, 0x9a6e364447752521ull, 0x8f8b301dab113708ull,\n+  0x00000000058a42a3ull,\n #endif\n };\n \f\n@@ -439,7 +1306,7 @@ const mp_limb_t __tens[] =\n /* Each of array variable above defines one mpn integer which is a power of 10.\n    This table points to those variables, indexed by the exponent.  */\n \n-const struct mp_power _fpioconst_pow10[FLT128_MAX_10_EXP_LOG + 1] =\n+const struct mp_power _fpioconst_pow10[FPIOCONST_POW10_ARRAY_SIZE] =\n {\n   { TENS_P0_IDX, TENS_P0_SIZE,\t\t4,\t     },\n   { TENS_P1_IDX, TENS_P1_SIZE,\t\t7,\t   4 },\n@@ -450,14 +1317,12 @@ const struct mp_power _fpioconst_pow10[FLT128_MAX_10_EXP_LOG + 1] =\n   { TENS_P6_IDX, TENS_P6_SIZE,\t\t213,\t 210 },\n   { TENS_P7_IDX, TENS_P7_SIZE,\t\t426,\t 422 },\n   { TENS_P8_IDX, TENS_P8_SIZE,  \t851,\t 848 },\n-#if FLT128_MAX_EXP > 1024\n   { TENS_P9_IDX, TENS_P9_SIZE,\t \t1701,\t1698 },\n   { TENS_P10_IDX, TENS_P10_SIZE,\t3402,\t3399 },\n+#if FLT128_MAX_EXP > 1024\n   { TENS_P11_IDX, TENS_P11_SIZE,\t6804,\t6800 },\n-  { TENS_P12_IDX, TENS_P12_SIZE, \t13607, 13604 }\n+  { TENS_P12_IDX, TENS_P12_SIZE,\t13607,\t13604 },\n+  { TENS_P13_IDX, TENS_P13_SIZE,\t27214,\t27210 },\n+  { TENS_P14_IDX, TENS_P14_SIZE,\t54427,\t54424 },\n #endif\n };\n-\n-#if LAST_POW10 > _LAST_POW10\n-# error \"Need to expand 10^(2^i) table for i up to\" LAST_POW10\n-#endif"}, {"sha": "7b7a40a27b00ce29d7508dcfcf8261e7721c60aa", "filename": "libquadmath/printf/fpioconst.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abb346d6b987349780c79e45530d88fcebccf4/libquadmath%2Fprintf%2Ffpioconst.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abb346d6b987349780c79e45530d88fcebccf4/libquadmath%2Fprintf%2Ffpioconst.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fprintf%2Ffpioconst.h?ref=05abb346d6b987349780c79e45530d88fcebccf4", "patch": "@@ -35,6 +35,14 @@\n \n #define FLT128_MAX_10_EXP_LOG\t12 /* = floor(log_2(FLT128_MAX_10_EXP)) */\n \n+/* For strtoq, we need powers of 10 up to floor (log_2 (FLT128_MANT_DIG\n+   - FLT128_MIN_EXP + 2)).  */\n+#if !defined __NO_LONG_DOUBLE_MATH && FLT128_MAX_EXP > 1024\n+# define FPIOCONST_POW10_ARRAY_SIZE    15\n+#else\n+# define FPIOCONST_POW10_ARRAY_SIZE    11\n+#endif\n+\n \n /* The array with the number representation. */\n #define __tens __quadmath_tens\n@@ -50,7 +58,7 @@ struct mp_power\n     int m_expo;\t\t\t/* Exponent of the number 10^-(2^i-1).  */\n   };\n #define _fpioconst_pow10 __quadmath_fpioconst_pow10\n-extern const struct mp_power _fpioconst_pow10[FLT128_MAX_10_EXP_LOG + 1]\n+extern const struct mp_power _fpioconst_pow10[FPIOCONST_POW10_ARRAY_SIZE]\n      attribute_hidden;\n \n /* The constants in the array `_fpioconst_pow10' have an offset.  */"}, {"sha": "8effcee88faaee1519d9fca05fb08102ea91b25d", "filename": "libquadmath/printf/printf_fp.c", "status": "modified", "additions": 55, "deletions": 43, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abb346d6b987349780c79e45530d88fcebccf4/libquadmath%2Fprintf%2Fprintf_fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abb346d6b987349780c79e45530d88fcebccf4/libquadmath%2Fprintf%2Fprintf_fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fprintf%2Fprintf_fp.c?ref=05abb346d6b987349780c79e45530d88fcebccf4", "patch": "@@ -1,5 +1,5 @@\n /* Floating point output for `printf'.\n-   Copyright (C) 1995-2003, 2006-2008, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 1995-2012 Free Software Foundation, Inc.\n \n    This file is part of the GNU C Library.\n    Written by Ulrich Drepper <drepper@gnu.ai.mit.edu>, 1995.\n@@ -15,23 +15,27 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include <config.h>\n #include <float.h>\n+#include <limits.h>\n #include <math.h>\n #include <string.h>\n #include <unistd.h>\n #include <stdlib.h>\n+#include <stdbool.h>\n #define NDEBUG\n #include <assert.h>\n #ifdef HAVE_ERRNO_H\n #include <errno.h>\n #endif\n #include <stdio.h>\n #include <stdarg.h>\n+#ifdef HAVE_FENV_H\n+#include \"quadmath-rounding-mode.h\"\n+#endif\n #include \"quadmath-printf.h\"\n #include \"fpioconst.h\"\n \n@@ -162,7 +166,8 @@ __quadmath_printf_fp (struct __quadmath_printf_file *fp,\n   MPN_VAR(tmp);\n \n   /* Digit which is result of last hack_digit() call.  */\n-  wchar_t digit;\n+  wchar_t last_digit, next_digit;\n+  bool more_bits;\n \n   /* The type of output format that will be used: 'e'/'E' or 'f'.  */\n   int type;\n@@ -370,11 +375,11 @@ __quadmath_printf_fp (struct __quadmath_printf_file *fp,\n \t      special = \"NAN\";\n \t      wspecial = L_(\"NAN\");\n \t    }\n-\t    else\n-\t      {\n-\t\tspecial = \"nan\";\n+\t  else\n+\t    {\n+\t      special = \"nan\";\n \t\twspecial = L_(\"nan\");\n-\t      }\n+\t    }\n \t}\n       else if (isinfq (fpnum))\n \t{\n@@ -935,33 +940,32 @@ __quadmath_printf_fp (struct __quadmath_printf_file *fp,\n       }\n \n     /* Do rounding.  */\n-    digit = hack_digit ();\n-    if (digit > L_('4'))\n+    last_digit = wcp[-1] != decimalwc ? wcp[-1] : wcp[-2];\n+    next_digit =hack_digit ();\n+\n+    if (next_digit != L_('0') && next_digit != L_('5'))\n+      more_bits = true;\n+    else if (fracsize == 1 && frac[0] == 0)\n+      /* Rest of the number is zero.  */\n+      more_bits = false;\n+    else if (scalesize == 0)\n       {\n-\twchar_t *wtp = wcp;\n+\t/* Here we have to see whether all limbs are zero since no\n+\t   normalization happened.  */\n+\tsize_t lcnt = fracsize;\n+\twhile (lcnt >= 1 && frac[lcnt - 1] == 0)\n+\t  --lcnt;\n+\tmore_bits = lcnt > 0;\n+      }\n+    else\n+      more_bits = true;\n \n-\tif (digit == L_('5')\n-\t    && ((*(wcp - 1) != decimalwc && (*(wcp - 1) & 1) == 0)\n-\t\t|| ((*(wcp - 1) == decimalwc && (*(wcp - 2) & 1) == 0))))\n-\t  {\n-\t    /* This is the critical case.\t */\n-\t    if (fracsize == 1 && frac[0] == 0)\n-\t      /* Rest of the number is zero -> round to even.\n-\t\t (IEEE 754-1985 4.1 says this is the default rounding.)  */\n-\t      goto do_expo;\n-\t    else if (scalesize == 0)\n-\t      {\n-\t\t/* Here we have to see whether all limbs are zero since no\n-\t\t   normalization happened.  */\n-\t\tsize_t lcnt = fracsize;\n-\t\twhile (lcnt >= 1 && frac[lcnt - 1] == 0)\n-\t\t  --lcnt;\n-\t\tif (lcnt == 0)\n-\t\t  /* Rest of the number is zero -> round to even.\n-\t\t     (IEEE 754-1985 4.1 says this is the default rounding.)  */\n-\t\t  goto do_expo;\n-\t      }\n-\t  }\n+#ifdef HAVE_FENV_H\n+    int rounding_mode = get_rounding_mode ();\n+    if (round_away (is_neg, (last_digit - L_('0')) & 1, next_digit >= L_('5'),\n+\t\t    more_bits, rounding_mode))\n+      {\n+\twchar_t *wtp = wcp;\n \n \tif (fracdig_no > 0)\n \t  {\n@@ -1055,8 +1059,8 @@ __quadmath_printf_fp (struct __quadmath_printf_file *fp,\n \t      }\n \t  }\n       }\n+#endif\n \n-  do_expo:\n     /* Now remove unnecessary '0' at the end of the string.  */\n     while (fracdig_no > fracdig_min + added_zeros && *(wcp - 1) == L_('0'))\n       {\n@@ -1249,15 +1253,19 @@ guess_grouping (unsigned int intdig_max, const char *grouping)\n       ++groups;\n       intdig_max -= *grouping++;\n \n-      if (*grouping == 0)\n+      if (*grouping == CHAR_MAX\n+#if CHAR_MIN < 0\n+\t  || *grouping < 0\n+#endif\n+\t  )\n+\t/* No more grouping should be done.  */\n+\tbreak;\n+      else if (*grouping == 0)\n \t{\n \t  /* Same grouping repeats.  */\n \t  groups += (intdig_max - 1) / grouping[-1];\n \t  break;\n \t}\n-      else if (*grouping == CHAR_MAX || *grouping <= 0)\n-\t/* No more grouping should be done.  */\n-\tbreak;\n     }\n \n   return groups;\n@@ -1289,12 +1297,16 @@ group_number (wchar_t *buf, wchar_t *bufend, unsigned int intdig_no,\n       while (--len > 0);\n       *p-- = thousands_sep;\n \n-      if (*grouping == 0)\n-\t/* Same grouping repeats.  */\n-\t--grouping;\n-      else if (*grouping == CHAR_MAX || *grouping <= 0)\n+      if (*grouping == CHAR_MAX\n+#if CHAR_MIN < 0\n+\t  || *grouping < 0\n+#endif\n+\t  )\n \t/* No more grouping should be done.  */\n \tbreak;\n+      else if (*grouping == 0)\n+\t/* Same grouping repeats.  */\n+\t--grouping;\n     } while (intdig_no > (unsigned int) *grouping);\n \n   /* Copy the remaining ungrouped digits.  */"}, {"sha": "fc960f38eb9a77d90833f7751156853a00303b80", "filename": "libquadmath/printf/printf_fphex.c", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abb346d6b987349780c79e45530d88fcebccf4/libquadmath%2Fprintf%2Fprintf_fphex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abb346d6b987349780c79e45530d88fcebccf4/libquadmath%2Fprintf%2Fprintf_fphex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fprintf%2Fprintf_fphex.c?ref=05abb346d6b987349780c79e45530d88fcebccf4", "patch": "@@ -1,5 +1,5 @@\n /* Print floating point number in hexadecimal notation according to ISO C99.\n-   Copyright (C) 1997-2002,2004,2006 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2012 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,17 +14,18 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include <config.h>\n #include <math.h>\n #include <stdlib.h>\n #include <stdio.h>\n #include <string.h>\n+#include <stdbool.h>\n #define NDEBUG\n #include <assert.h>\n+#include \"quadmath-rounding-mode.h\"\n #include \"quadmath-printf.h\"\n #include \"_itoa.h\"\n #include \"_itowa.h\"\n@@ -116,6 +117,8 @@ __quadmath_printf_fphex (struct __quadmath_printf_file *fp,\n   /* Nonzero if this is output on a wide character stream.  */\n   int wide = info->wide;\n \n+  bool do_round_away;\n+\n   /* Figure out the decimal point character.  */\n #ifdef USE_NL_LANGINFO\n   if (info->extra == 0)\n@@ -274,8 +277,8 @@ __quadmath_printf_fphex (struct __quadmath_printf_file *fp,\n       /* Fill with zeroes.  */\n       while (numstr > numbuf + (sizeof numbuf - 112 / 4))\n \t{\n-\t  *--numstr = '0';\n \t  *--wnumstr = L_('0');\n+\t  *--numstr = '0';\n \t}\n \n       leading = fpnum.ieee.exponent == 0 ? '0' : '1';\n@@ -316,21 +319,35 @@ __quadmath_printf_fphex (struct __quadmath_printf_file *fp,\n \t  --numend;\n \t}\n \n+      do_round_away = false;\n+\n+      if (precision != -1 && precision < numend - numstr)\n+\t{\n+\t  char last_digit = precision > 0 ? numstr[precision - 1] : leading;\n+\t  char next_digit = numstr[precision];\n+\t  int last_digit_value = (last_digit >= 'A' && last_digit <= 'F'\n+\t\t\t\t  ? last_digit - 'A' + 10\n+\t\t\t\t  : (last_digit >= 'a' && last_digit <= 'f'\n+\t\t\t\t     ? last_digit - 'a' + 10\n+\t\t\t\t     : last_digit - '0'));\n+\t  int next_digit_value = (next_digit >= 'A' && next_digit <= 'F'\n+\t\t\t\t  ? next_digit - 'A' + 10\n+\t\t\t\t  : (next_digit >= 'a' && next_digit <= 'f'\n+\t\t\t\t     ? next_digit - 'a' + 10\n+\t\t\t\t     : next_digit - '0'));\n+\t  bool more_bits = ((next_digit_value & 7) != 0\n+\t\t\t    || precision + 1 < numend - numstr);\n+#ifdef HAVE_FENV_H\n+\t  int rounding_mode = get_rounding_mode ();\n+\t  do_round_away = round_away (negative, last_digit_value & 1,\n+\t\t\t\t      next_digit_value >= 8, more_bits,\n+\t\t\t\t      rounding_mode);\n+#endif\n+\t}\n+\n       if (precision == -1)\n \tprecision = numend - numstr;\n-      else if (precision < numend - numstr\n-\t       && (numstr[precision] > '8'\n-\t\t   || (('A' < '0' || 'a' < '0')\n-\t\t       && numstr[precision] < '0')\n-\t\t   || (numstr[precision] == '8'\n-\t\t       && (precision + 1 < numend - numstr\n-\t\t\t   /* Round to even.  */\n-\t\t\t   || (precision > 0\n-\t\t\t       && ((numstr[precision - 1] & 1)\n-\t\t\t\t   ^ (isdigit (numstr[precision - 1]) == 0)))\n-\t\t\t   || (precision == 0\n-\t\t\t       && ((leading & 1)\n-\t\t\t\t   ^ (isdigit (leading) == 0)))))))\n+      else if (do_round_away)\n \t{\n \t  /* Round up.  */\n \t  int cnt = precision;"}, {"sha": "5e3321fd7429f433037536ebf66a5cc5ee8ff973", "filename": "libquadmath/strtod/strtod_l.c", "status": "modified", "additions": 275, "deletions": 77, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05abb346d6b987349780c79e45530d88fcebccf4/libquadmath%2Fstrtod%2Fstrtod_l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05abb346d6b987349780c79e45530d88fcebccf4/libquadmath%2Fstrtod%2Fstrtod_l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fstrtod%2Fstrtod_l.c?ref=05abb346d6b987349780c79e45530d88fcebccf4", "patch": "@@ -1,6 +1,5 @@\n /* Convert string representing a number to float value, using given locale.\n-   Copyright (C) 1997,1998,2002,2004,2005,2006,2007,2008,2009,2010\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1997-2012 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -15,24 +14,32 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include <config.h>\n #include <stdarg.h>\n #include <string.h>\n+#include <stdint.h>\n+#include <stdbool.h>\n #include <float.h>\n #include <math.h>\n #define NDEBUG 1\n #include <assert.h>\n #ifdef HAVE_ERRNO_H\n #include <errno.h>\n #endif\n+\n+#ifdef HAVE_FENV_H\n+#include <fenv.h>\n+#endif\n+\n+#ifdef HAVE_FENV_H\n+#include \"quadmath-rounding-mode.h\"\n+#endif\n #include \"../printf/quadmath-printf.h\"\n #include \"../printf/fpioconst.h\"\n \n-\n #undef L_\n #ifdef USE_WIDE_CHAR\n # define STRING_TYPE wchar_t\n@@ -89,6 +96,8 @@ __quadmath_strncasecmp_c (const char *s1, const char *s2, size_t n)\n #define\tMIN_EXP\t\tPASTE(FLT,_MIN_EXP)\n #define MAX_10_EXP\tPASTE(FLT,_MAX_10_EXP)\n #define MIN_10_EXP\tPASTE(FLT,_MIN_10_EXP)\n+#define MAX_VALUE\tPASTE(FLT,_MAX)\n+#define MIN_VALUE\tPASTE(FLT,_MIN)\n \n /* Extra macros required to get FLT expanded before the pasting.  */\n #define PASTE(a,b)\tPASTE1(a,b)\n@@ -125,33 +134,62 @@ extern const mp_limb_t _tens_in_limb[MAX_DIG_PER_LIMB + 1] attribute_hidden;\n     do { if (endptr != NULL) *endptr = (STRING_TYPE *) (end);\t\t      \\\n \t return val; } while (0)\n \n-/* Maximum size necessary for mpn integers to hold floating point numbers.  */\n-#define\tMPNSIZE\t\t(howmany (MAX_EXP + 2 * MANT_DIG, BITS_PER_MP_LIMB) \\\n-\t\t\t + 2)\n+/* Maximum size necessary for mpn integers to hold floating point\n+   numbers.  The largest number we need to hold is 10^n where 2^-n is\n+   1/4 ulp of the smallest representable value (that is, n = MANT_DIG\n+   - MIN_EXP + 2).  Approximate using 10^3 < 2^10.  */\n+#define\tMPNSIZE\t\t(howmany (1 + ((MANT_DIG - MIN_EXP + 2) * 10) / 3, \\\n+\t\t\t\t  BITS_PER_MP_LIMB) + 2)\n /* Declare an mpn integer variable that big.  */\n #define\tMPN_VAR(name)\tmp_limb_t name[MPNSIZE]; mp_size_t name##size\n /* Copy an mpn integer value.  */\n #define MPN_ASSIGN(dst, src) \\\n \tmemcpy (dst, src, (dst##size = src##size) * sizeof (mp_limb_t))\n \n+/* Set errno and return an overflowing value with sign specified by\n+   NEGATIVE.  */\n+static FLOAT\n+overflow_value (int negative)\n+{\n+#if defined HAVE_ERRNO_H && defined ERANGE\n+  errno = ERANGE;\n+#endif\n+  FLOAT result = (negative ? -MAX_VALUE : MAX_VALUE) * MAX_VALUE;\n+  return result;\n+}\n+\n+/* Set errno and return an underflowing value with sign specified by\n+   NEGATIVE.  */\n+static FLOAT\n+underflow_value (int negative)\n+{\n+#if defined HAVE_ERRNO_H && defined ERANGE\n+  errno = ERANGE;\n+#endif\n+  FLOAT result = (negative ? -MIN_VALUE : MIN_VALUE) * MIN_VALUE;\n+  return result;\n+}\n \n /* Return a floating point number of the needed type according to the given\n    multi-precision number after possible rounding.  */\n static FLOAT\n-round_and_return (mp_limb_t *retval, int exponent, int negative,\n+round_and_return (mp_limb_t *retval, intmax_t exponent, int negative,\n \t\t  mp_limb_t round_limb, mp_size_t round_bit, int more_bits)\n {\n+#ifdef HAVE_FENV_H\n+  int mode = get_rounding_mode ();\n+#endif\n+\n   if (exponent < MIN_EXP - 1)\n     {\n-      mp_size_t shift = MIN_EXP - 1 - exponent;\n+      mp_size_t shift;\n+      bool is_tiny;\n \n-      if (shift > MANT_DIG)\n-\t{\n-#if defined HAVE_ERRNO_H && defined EDOM\n-\t  errno = EDOM;\n-#endif\n-\t  return 0.0;\n-\t}\n+      if (exponent < MIN_EXP - 1 - MANT_DIG)\n+\treturn underflow_value (negative);\n+\n+      shift = MIN_EXP - 1 - exponent;\n+      is_tiny = true;\n \n       more_bits |= (round_limb & ((((mp_limb_t) 1) << round_bit) - 1)) != 0;\n       if (shift == MANT_DIG)\n@@ -185,6 +223,35 @@ round_and_return (mp_limb_t *retval, int exponent, int negative,\n \t}\n       else if (shift > 0)\n \t{\n+#ifdef HAVE_GET_ROUNDING_MODE\n+\t  if (TININESS_AFTER_ROUNDING && shift == 1)\n+\t    {\n+\t      /* Whether the result counts as tiny depends on whether,\n+\t\t after rounding to the normal precision, it still has\n+\t\t a subnormal exponent.  */\n+\t      mp_limb_t retval_normal[RETURN_LIMB_SIZE];\n+\t      if (round_away (negative,\n+\t\t\t      (retval[0] & 1) != 0,\n+\t\t\t      (round_limb\n+\t\t\t       & (((mp_limb_t) 1) << round_bit)) != 0,\n+\t\t\t      (more_bits\n+\t\t\t       || ((round_limb\n+\t\t\t\t    & ((((mp_limb_t) 1) << round_bit) - 1))\n+\t\t\t\t   != 0)),\n+\t\t\t      mode))\n+\t\t{\n+\t\t  mp_limb_t cy = mpn_add_1 (retval_normal, retval,\n+\t\t\t\t\t      RETURN_LIMB_SIZE, 1);\n+\n+\t\t  if (((MANT_DIG % BITS_PER_MP_LIMB) == 0 && cy) ||\n+\t\t      ((MANT_DIG % BITS_PER_MP_LIMB) != 0 &&\n+\t\t       ((retval_normal[RETURN_LIMB_SIZE - 1]\n+\t\t\t& (((mp_limb_t) 1) << (MANT_DIG % BITS_PER_MP_LIMB)))\n+\t\t\t!= 0)))\n+\t\t    is_tiny = false;\n+\t\t}\n+\t    }\n+#endif\n \t  round_limb = retval[0];\n \t  round_bit = shift - 1;\n \t  (void) mpn_rshift (retval, retval, RETURN_LIMB_SIZE, shift);\n@@ -196,14 +263,29 @@ round_and_return (mp_limb_t *retval, int exponent, int negative,\n # define DENORM_EXP (MIN_EXP - 2)\n #endif\n       exponent = DENORM_EXP;\n+      if (is_tiny\n+\t  && ((round_limb & (((mp_limb_t) 1) << round_bit)) != 0\n+\t      || more_bits\n+\t      || (round_limb & ((((mp_limb_t) 1) << round_bit) - 1)) != 0))\n+\t{\n #if defined HAVE_ERRNO_H && defined ERANGE\n-      errno = ERANGE;\n+\t  errno = ERANGE;\n #endif\n+\t  volatile FLOAT force_underflow_exception = MIN_VALUE * MIN_VALUE;\n+\t  (void) force_underflow_exception;\n+\t}\n     }\n \n-  if ((round_limb & (((mp_limb_t) 1) << round_bit)) != 0\n-      && (more_bits || (retval[0] & 1) != 0\n-\t  || (round_limb & ((((mp_limb_t) 1) << round_bit) - 1)) != 0))\n+  if (exponent > MAX_EXP)\n+    goto overflow;\n+\n+#ifdef HAVE_GET_ROUNDING_MODE\n+  if (round_away (negative,\n+\t\t  (retval[0] & 1) != 0,\n+\t\t  (round_limb & (((mp_limb_t) 1) << round_bit)) != 0,\n+\t\t  (more_bits\n+\t\t   || (round_limb & ((((mp_limb_t) 1) << round_bit) - 1)) != 0),\n+\t\t  mode))\n     {\n       mp_limb_t cy = mpn_add_1 (retval, retval, RETURN_LIMB_SIZE, 1);\n \n@@ -224,9 +306,11 @@ round_and_return (mp_limb_t *retval, int exponent, int negative,\n \t  /* The number was denormalized but now normalized.  */\n \texponent = MIN_EXP - 1;\n     }\n+#endif\n \n   if (exponent > MAX_EXP)\n-    return negative ? -FLOAT_HUGE_VAL : FLOAT_HUGE_VAL;\n+  overflow:\n+    return overflow_value (negative);\n \n   return MPN2FLOAT (retval, exponent, negative);\n }\n@@ -239,7 +323,7 @@ round_and_return (mp_limb_t *retval, int exponent, int negative,\n    factor for the resulting number (see code) multiply by it.  */\n static const STRING_TYPE *\n str_to_mpn (const STRING_TYPE *str, int digcnt, mp_limb_t *n, mp_size_t *nsize,\n-\t    int *exponent\n+\t    intmax_t *exponent\n #ifndef USE_WIDE_CHAR\n \t    , const char *decimal, size_t decimal_len, const char *thousands\n #endif\n@@ -269,6 +353,7 @@ str_to_mpn (const STRING_TYPE *str, int digcnt, mp_limb_t *n, mp_size_t *nsize,\n \t      cy += mpn_add_1 (n, n, *nsize, low);\n \t      if (cy != 0)\n \t\t{\n+\t\t  assert (*nsize < MPNSIZE);\n \t\t  n[*nsize] = cy;\n \t\t  ++(*nsize);\n \t\t}\n@@ -303,7 +388,7 @@ str_to_mpn (const STRING_TYPE *str, int digcnt, mp_limb_t *n, mp_size_t *nsize,\n     }\n   while (--digcnt > 0);\n \n-  if (*exponent > 0 && cnt + *exponent <= MAX_DIG_PER_LIMB)\n+  if (*exponent > 0 && *exponent <= MAX_DIG_PER_LIMB - cnt)\n     {\n       low *= _tens_in_limb[*exponent];\n       start = _tens_in_limb[cnt + *exponent];\n@@ -323,7 +408,10 @@ str_to_mpn (const STRING_TYPE *str, int digcnt, mp_limb_t *n, mp_size_t *nsize,\n       cy = mpn_mul_1 (n, n, *nsize, start);\n       cy += mpn_add_1 (n, n, *nsize, low);\n       if (cy != 0)\n-\tn[(*nsize)++] = cy;\n+\t{\n+\t  assert (*nsize < MPNSIZE);\n+\t  n[(*nsize)++] = cy;\n+\t}\n     }\n \n   return str;\n@@ -380,7 +468,7 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n {\n   int negative;\t\t\t/* The sign of the number.  */\n   MPN_VAR (num);\t\t/* MP representation of the number.  */\n-  int exponent;\t\t\t/* Exponent of the number.  */\n+  intmax_t exponent;\t\t/* Exponent of the number.  */\n \n   /* Numbers starting `0X' or `0x' have to be processed with base 16.  */\n   int base = 10;\n@@ -402,10 +490,15 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n   /* Points at the character following the integer and fractional digits.  */\n   const STRING_TYPE *expp;\n   /* Total number of digit and number of digits in integer part.  */\n-  int dig_no, int_no, lead_zero;\n+  size_t dig_no, int_no, lead_zero;\n   /* Contains the last character read.  */\n   CHAR_TYPE c;\n \n+/* We should get wint_t from <stddef.h>, but not all GCC versions define it\n+   there.  So define it ourselves if it remains undefined.  */\n+#ifndef _WINT_T\n+  typedef unsigned int wint_t;\n+#endif\n   /* The radix character of the current locale.  */\n #ifdef USE_WIDE_CHAR\n   wchar_t decimal;\n@@ -758,7 +851,7 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n      are all or any is really a fractional digit will be decided\n      later.  */\n   int_no = dig_no;\n-  lead_zero = int_no == 0 ? -1 : 0;\n+  lead_zero = int_no == 0 ? (size_t) -1 : 0;\n \n   /* Read the fractional digits.  A special case are the 'american\n      style' numbers like `16.' i.e. with decimal point but without\n@@ -780,12 +873,13 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n \t     (base == 16 && ({ CHAR_TYPE lo = TOLOWER (c);\n \t\t\t       lo >= L_('a') && lo <= L_('f'); })))\n \t{\n-\t  if (c != L_('0') && lead_zero == -1)\n+\t  if (c != L_('0') && lead_zero == (size_t) -1)\n \t    lead_zero = dig_no - int_no;\n \t  ++dig_no;\n \t  c = *++cp;\n \t}\n     }\n+  assert (dig_no <= (uintmax_t) INTMAX_MAX);\n \n   /* Remember start of exponent (if any).  */\n   expp = cp;\n@@ -808,24 +902,80 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n \n       if (c >= L_('0') && c <= L_('9'))\n \t{\n-\t  int exp_limit;\n+\t  intmax_t exp_limit;\n \n \t  /* Get the exponent limit. */\n \t  if (base == 16)\n-\t    exp_limit = (exp_negative ?\n-\t\t\t -MIN_EXP + MANT_DIG + 4 * int_no :\n-\t\t\t MAX_EXP - 4 * int_no + 4 * lead_zero + 3);\n+\t    {\n+\t      if (exp_negative)\n+\t\t{\n+\t\t  assert (int_no <= (uintmax_t) (INTMAX_MAX\n+\t\t\t\t\t\t + MIN_EXP - MANT_DIG) / 4);\n+\t\t  exp_limit = -MIN_EXP + MANT_DIG + 4 * (intmax_t) int_no;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (int_no)\n+\t\t    {\n+\t\t      assert (lead_zero == 0\n+\t\t\t      && int_no <= (uintmax_t) INTMAX_MAX / 4);\n+\t\t      exp_limit = MAX_EXP - 4 * (intmax_t) int_no + 3;\n+\t\t    }\n+\t\t  else if (lead_zero == (size_t) -1)\n+\t\t    {\n+\t\t      /* The number is zero and this limit is\n+\t\t\t arbitrary.  */\n+\t\t      exp_limit = MAX_EXP + 3;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      assert (lead_zero\n+\t\t\t      <= (uintmax_t) (INTMAX_MAX - MAX_EXP - 3) / 4);\n+\t\t      exp_limit = (MAX_EXP\n+\t\t\t\t   + 4 * (intmax_t) lead_zero\n+\t\t\t\t   + 3);\n+\t\t    }\n+\t\t}\n+\t    }\n \t  else\n-\t    exp_limit = (exp_negative ?\n-\t\t\t -MIN_10_EXP + MANT_DIG + int_no :\n-\t\t\t MAX_10_EXP - int_no + lead_zero + 1);\n+\t    {\n+\t      if (exp_negative)\n+\t\t{\n+\t\t  assert (int_no\n+\t\t\t  <= (uintmax_t) (INTMAX_MAX + MIN_10_EXP - MANT_DIG));\n+\t\t  exp_limit = -MIN_10_EXP + MANT_DIG + (intmax_t) int_no;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (int_no)\n+\t\t    {\n+\t\t      assert (lead_zero == 0\n+\t\t\t      && int_no <= (uintmax_t) INTMAX_MAX);\n+\t\t      exp_limit = MAX_10_EXP - (intmax_t) int_no + 1;\n+\t\t    }\n+\t\t  else if (lead_zero == (size_t) -1)\n+\t\t    {\n+\t\t      /* The number is zero and this limit is\n+\t\t\t arbitrary.  */\n+\t\t      exp_limit = MAX_10_EXP + 1;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      assert (lead_zero\n+\t\t\t      <= (uintmax_t) (INTMAX_MAX - MAX_10_EXP - 1));\n+\t\t      exp_limit = MAX_10_EXP + (intmax_t) lead_zero + 1;\n+\t\t    }\n+\t\t}\n+\t    }\n+\n+\t  if (exp_limit < 0)\n+\t    exp_limit = 0;\n \n \t  do\n \t    {\n-\t      exponent *= 10;\n-\t      exponent += c - L_('0');\n-\n-\t      if (__builtin_expect (exponent > exp_limit, 0))\n+\t      if (__builtin_expect ((exponent > exp_limit / 10\n+\t\t\t\t     || (exponent == exp_limit / 10\n+\t\t\t\t\t && c - L_('0') > exp_limit % 10)), 0))\n \t\t/* The exponent is too large/small to represent a valid\n \t\t   number.  */\n \t\t{\n@@ -834,7 +984,7 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n \t\t  /* We have to take care for special situation: a joker\n \t\t     might have written \"0.0e100000\" which is in fact\n \t\t     zero.  */\n-\t\t  if (lead_zero == -1)\n+\t\t  if (lead_zero == (size_t) -1)\n \t\t    result = negative ? -0.0 : 0.0;\n \t\t  else\n \t\t    {\n@@ -923,7 +1073,14 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n \t}\n #endif\n       startp += lead_zero + decimal_len;\n-      exponent -= base == 16 ? 4 * lead_zero : lead_zero;\n+      assert (lead_zero <= (base == 16\n+\t\t\t    ? (uintmax_t) INTMAX_MAX / 4\n+\t\t\t    : (uintmax_t) INTMAX_MAX));\n+      assert (lead_zero <= (base == 16\n+\t\t\t    ? ((uintmax_t) exponent\n+\t\t\t       - (uintmax_t) INTMAX_MIN) / 4\n+\t\t\t    : ((uintmax_t) exponent - (uintmax_t) INTMAX_MIN)));\n+      exponent -= base == 16 ? 4 * (intmax_t) lead_zero : (intmax_t) lead_zero;\n       dig_no -= lead_zero;\n     }\n \n@@ -965,7 +1122,10 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n \t}\n \n       /* Adjust the exponent for the bits we are shifting in.  */\n-      exponent += bits - 1 + (int_no - 1) * 4;\n+      assert (int_no <= (uintmax_t) (exponent < 0\n+\t\t\t\t     ? (INTMAX_MAX - bits + 1) / 4\n+\t\t\t\t     : (INTMAX_MAX - exponent - bits + 1) / 4));\n+      exponent += bits - 1 + ((intmax_t) int_no - 1) * 4;\n \n       while (--dig_no > 0 && idx >= 0)\n \t{\n@@ -986,8 +1146,20 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n \t      retval[idx--] |= val >> (4 - pos - 1);\n \t      val <<= BITS_PER_MP_LIMB - (4 - pos - 1);\n \t      if (idx < 0)\n-\t\treturn round_and_return (retval, exponent, negative, val,\n-\t\t\t\t\t BITS_PER_MP_LIMB - 1, dig_no > 0);\n+\t\t{\n+\t\t  int rest_nonzero = 0;\n+\t\t  while (--dig_no > 0)\n+\t\t    {\n+\t\t      if (*startp != L_('0'))\n+\t\t\t{\n+\t\t\t  rest_nonzero = 1;\n+\t\t\t  break;\n+\t\t\t}\n+\t\t      startp++;\n+\t\t    }\n+\t\t  return round_and_return (retval, exponent, negative, val,\n+\t\t\t\t\t   BITS_PER_MP_LIMB - 1, rest_nonzero);\n+\t\t}\n \n \t      retval[idx] = val;\n \t      pos = BITS_PER_MP_LIMB - 1 - (4 - pos - 1);\n@@ -1005,27 +1177,19 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n      really integer digits or belong to the fractional part; i.e. we normalize\n      123e-2 to 1.23.  */\n   {\n-    register int incr = (exponent < 0 ? MAX (-int_no, exponent)\n-\t\t\t : MIN (dig_no - int_no, exponent));\n+    register intmax_t incr = (exponent < 0\n+\t\t\t      ? MAX (-(intmax_t) int_no, exponent)\n+\t\t\t      : MIN ((intmax_t) dig_no - (intmax_t) int_no,\n+\t\t\t\t     exponent));\n     int_no += incr;\n     exponent -= incr;\n   }\n \n-  if (__builtin_expect (int_no + exponent > MAX_10_EXP + 1, 0))\n-    {\n-#if defined HAVE_ERRNO_H && defined ERANGE\n-      errno = ERANGE;\n-#endif\n-      return negative ? -FLOAT_HUGE_VAL : FLOAT_HUGE_VAL;\n-    }\n+  if (__builtin_expect (exponent > MAX_10_EXP + 1 - (intmax_t) int_no, 0))\n+    return overflow_value (negative);\n \n   if (__builtin_expect (exponent < MIN_10_EXP - (DIG + 1), 0))\n-    {\n-#if defined HAVE_ERRNO_H && defined ERANGE\n-      errno = ERANGE;\n-#endif\n-      return negative ? -0.0 : 0.0;\n-    }\n+    return underflow_value (negative);\n \n   if (int_no > 0)\n     {\n@@ -1086,12 +1250,7 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n       /* Now we know the exponent of the number in base two.\n \t Check it against the maximum possible exponent.  */\n       if (__builtin_expect (bits > MAX_EXP, 0))\n-\t{\n-#if defined HAVE_ERRNO_H && defined ERANGE\n-\t  errno = ERANGE;\n-#endif\n-\t  return negative ? -FLOAT_HUGE_VAL : FLOAT_HUGE_VAL;\n-\t}\n+\treturn overflow_value (negative);\n \n       /* We have already the first BITS bits of the result.  Together with\n \t the information whether more non-zero bits follow this is enough\n@@ -1188,29 +1347,66 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n     int expbit;\n     int neg_exp;\n     int more_bits;\n+    int need_frac_digits;\n     mp_limb_t cy;\n     mp_limb_t *psrc = den;\n     mp_limb_t *pdest = num;\n     const struct mp_power *ttab = &_fpioconst_pow10[0];\n \n-    assert (dig_no > int_no && exponent <= 0);\n+    assert (dig_no > int_no\n+\t    && exponent <= 0\n+\t    && exponent >= MIN_10_EXP - (DIG + 1));\n+\n+    /* We need to compute MANT_DIG - BITS fractional bits that lie\n+       within the mantissa of the result, the following bit for\n+       rounding, and to know whether any subsequent bit is 0.\n+       Computing a bit with value 2^-n means looking at n digits after\n+       the decimal point.  */\n+    if (bits > 0)\n+      {\n+\t/* The bits required are those immediately after the point.  */\n+\tassert (int_no > 0 && exponent == 0);\n+\tneed_frac_digits = 1 + MANT_DIG - bits;\n+      }\n+    else\n+      {\n+\t/* The number is in the form .123eEXPONENT.  */\n+\tassert (int_no == 0 && *startp != L_('0'));\n+\t/* The number is at least 10^(EXPONENT-1), and 10^3 <\n+\t   2^10.  */\n+\tint neg_exp_2 = ((1 - exponent) * 10) / 3 + 1;\n+\t/* The number is at least 2^-NEG_EXP_2.  We need up to\n+\t   MANT_DIG bits following that bit.  */\n+\tneed_frac_digits = neg_exp_2 + MANT_DIG;\n+\t/* However, we never need bits beyond 1/4 ulp of the smallest\n+\t   representable value.  (That 1/4 ulp bit is only needed to\n+\t   determine tinyness on machines where tinyness is determined\n+\t   after rounding.)  */\n+\tif (need_frac_digits > MANT_DIG - MIN_EXP + 2)\n+\t  need_frac_digits = MANT_DIG - MIN_EXP + 2;\n+\t/* At this point, NEED_FRAC_DIGITS is the total number of\n+\t   digits needed after the point, but some of those may be\n+\t   leading 0s.  */\n+\tneed_frac_digits += exponent;\n+\t/* Any cases underflowing enough that none of the fractional\n+\t   digits are needed should have been caught earlier (such\n+\t   cases are on the order of 10^-n or smaller where 2^-n is\n+\t   the least subnormal).  */\n+\tassert (need_frac_digits > 0);\n+      }\n \n+    if (need_frac_digits > (intmax_t) dig_no - (intmax_t) int_no)\n+      need_frac_digits = (intmax_t) dig_no - (intmax_t) int_no;\n \n-    /* For the fractional part we need not process too many digits.  One\n-       decimal digits gives us log_2(10) ~ 3.32 bits.  If we now compute\n-\t\t\tceil(BITS / 3) =: N\n-       digits we should have enough bits for the result.  The remaining\n-       decimal digits give us the information that more bits are following.\n-       This can be used while rounding.  (Two added as a safety margin.)  */\n-    if (dig_no - int_no > (MANT_DIG - bits + 2) / 3 + 2)\n+    if ((intmax_t) dig_no > (intmax_t) int_no + need_frac_digits)\n       {\n-\tdig_no = int_no + (MANT_DIG - bits + 2) / 3 + 2;\n+\tdig_no = int_no + need_frac_digits;\n \tmore_bits = 1;\n       }\n     else\n       more_bits = 0;\n \n-    neg_exp = dig_no - int_no - exponent;\n+    neg_exp = (intmax_t) dig_no - (intmax_t) int_no - exponent;\n \n     /* Construct the denominator.  */\n     densize = 0;\n@@ -1510,6 +1706,7 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n \t      assert (numsize == densize);\n \t      for (i = numsize; i > 0; --i)\n \t\tnum[i] = num[i - 1];\n+\t      num[0] = 0;\n \t    }\n \n \t  den[densize] = 0;\n@@ -1554,6 +1751,7 @@ ____STRTOF_INTERNAL (nptr, endptr, group)\n \t      n0 = num[densize] = num[densize - 1];\n \t      for (i = densize - 1; i > 0; --i)\n \t\tnum[i] = num[i - 1];\n+\t      num[0] = 0;\n \n \t      got_limb;\n \t    }"}]}