{"sha": "cb8010f922d1d8f39a3035ffcce56dfca32fb822", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I4MDEwZjkyMmQxZDhmMzlhMzAzNWZmY2NlNTZkZmNhMzJmYjgyMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-11-09T22:25:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-09T22:25:25Z"}, "message": "re PR c++/50972 ([C++0x] ICE on undeclared identifier)\n\n\tPR c++/50972\n\t* pt.c (maybe_instantiate_noexcept): Check the return value of\n\tpush_tinst_level.\n\nFrom-SVN: r181240", "tree": {"sha": "6de1b21febb0a09f719c9b82af804a887aa3252c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6de1b21febb0a09f719c9b82af804a887aa3252c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb8010f922d1d8f39a3035ffcce56dfca32fb822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8010f922d1d8f39a3035ffcce56dfca32fb822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8010f922d1d8f39a3035ffcce56dfca32fb822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8010f922d1d8f39a3035ffcce56dfca32fb822/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59276295d6017de1e98bd9f359771daf0ca7216a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59276295d6017de1e98bd9f359771daf0ca7216a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59276295d6017de1e98bd9f359771daf0ca7216a"}], "stats": {"total": 164, "additions": 153, "deletions": 11}, "files": [{"sha": "406f77c72665ba1366d75420c9cde7388a4c34f3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8010f922d1d8f39a3035ffcce56dfca32fb822/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8010f922d1d8f39a3035ffcce56dfca32fb822/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cb8010f922d1d8f39a3035ffcce56dfca32fb822", "patch": "@@ -1,5 +1,9 @@\n 2011-11-09  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/50972\n+\t* pt.c (maybe_instantiate_noexcept): Check the return value of\n+\tpush_tinst_level.\n+\n \tPR c++/51046\n \t* parser.c (cp_parser_range_for): check_for_bare_parameter_packs.\n "}, {"sha": "55eba5a0910a59a39b042e4e85292c237868458f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8010f922d1d8f39a3035ffcce56dfca32fb822/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8010f922d1d8f39a3035ffcce56dfca32fb822/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cb8010f922d1d8f39a3035ffcce56dfca32fb822", "patch": "@@ -18166,17 +18166,22 @@ maybe_instantiate_noexcept (tree fn)\n \n   if (TREE_CODE (noex) == DEFERRED_NOEXCEPT)\n     {\n-      push_tinst_level (fn);\n-      push_access_scope (fn);\n-      input_location = DECL_SOURCE_LOCATION (fn);\n-      noex = tsubst_copy_and_build (DEFERRED_NOEXCEPT_PATTERN (noex),\n-\t\t\t\t    DEFERRED_NOEXCEPT_ARGS (noex),\n-\t\t\t\t    tf_warning_or_error, fn, /*function_p=*/false,\n-\t\t\t\t    /*integral_constant_expression_p=*/true);\n-      pop_access_scope (fn);\n-      pop_tinst_level ();\n-      spec = build_noexcept_spec (noex, tf_warning_or_error);\n-      if (spec == error_mark_node)\n+      if (push_tinst_level (fn))\n+\t{\n+\t  push_access_scope (fn);\n+\t  input_location = DECL_SOURCE_LOCATION (fn);\n+\t  noex = tsubst_copy_and_build (DEFERRED_NOEXCEPT_PATTERN (noex),\n+\t\t\t\t\tDEFERRED_NOEXCEPT_ARGS (noex),\n+\t\t\t\t\ttf_warning_or_error, fn,\n+\t\t\t\t\t/*function_p=*/false,\n+\t\t\t\t\t/*integral_constant_expression_p=*/true);\n+\t  pop_access_scope (fn);\n+\t  pop_tinst_level ();\n+\t  spec = build_noexcept_spec (noex, tf_warning_or_error);\n+\t  if (spec == error_mark_node)\n+\t    spec = noexcept_false_spec;\n+\t}\n+      else\n \tspec = noexcept_false_spec;\n     }\n   else"}, {"sha": "0f71e6773a3c18cb5c4529ff9974b36b65ca1f51", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8010f922d1d8f39a3035ffcce56dfca32fb822/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8010f922d1d8f39a3035ffcce56dfca32fb822/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb8010f922d1d8f39a3035ffcce56dfca32fb822", "patch": "@@ -1,5 +1,8 @@\n 2011-11-09  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/50972\n+\t* g++.dg/cpp0x/noexcept16.C: New.\n+\n \tPR c++/51046\n \t* g++.dg/cpp0x/variadic119.C: New.\n "}, {"sha": "10e0be9588798b70bc13fd42580e4d502e3e680a", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept16.C", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8010f922d1d8f39a3035ffcce56dfca32fb822/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8010f922d1d8f39a3035ffcce56dfca32fb822/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept16.C?ref=cb8010f922d1d8f39a3035ffcce56dfca32fb822", "patch": "@@ -0,0 +1,130 @@\n+// PR c++/50972\n+// { dg-do compile { target c++11 } }\n+// Ignore all errors, we're just testing that this doesn't ICE\n+// { dg-prune-output \"error\" }\n+\n+namespace std\n+typedef long unsigned int size_t;\n+template<typename...>\n+struct __and_;\n+template<typename _Tp>\n+struct is_nothrow_move_constructible\n+{\n+};\n+template<typename _Tp>\n+struct is_nothrow_move_assignable\n+struct __add_rvalue_reference_helper<_Tp, true>\n+{ typedef _Tp&& type; };\n+template<typename _Tp>\n+struct add_rvalue_reference\n+  : public __add_rvalue_reference_helper<_Tp>\n+{\n+};\n+template<typename _Tp>\n+inline typename add_rvalue_reference<_Tp>::type\n+declval() noexcept\n+{\n+}\n+}\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\n+template<typename _Tp>\n+class new_allocator\n+{\n+};\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\")))\n+class allocator: public __gnu_cxx::new_allocator<_Tp>\n+{\n+  template<typename _Tp1>\n+  struct rebind\n+  { typedef allocator<_Tp1> other; };\n+};\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\")))\n+template<typename _Alloc, typename _Tp>\n+struct __alloctr_rebind<_Alloc, _Tp, true>\n+{\n+  typedef typename _Alloc::template rebind<_Tp>::other __type;\n+};\n+template<typename _Alloc>\n+struct allocator_traits\n+{\n+  template<typename _Tp>\n+  struct __rebind_alloc\n+  {\n+    typedef typename __alloctr_rebind<_Alloc, _Tp>::__type __type;\n+  };\n+}\n+  }\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\n+template<typename _Alloc>\n+struct __alloc_traits\n+{\n+  typedef std::allocator_traits<_Alloc> _Base_type;\n+  static constexpr bool _S_nothrow_swap()\n+  {\n+    return !_S_propagate_on_swap()\n+      || noexcept(swap(std::declval<_Alloc&>(), std::declval<_Alloc&>()));\n+  }\n+  template<typename _Tp>\n+  struct rebind\n+  { typedef typename _Base_type::template __rebind_alloc<_Tp>::__type other; };\n+};\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\")))\n+template<typename _Tp, typename _Alloc>\n+struct _Vector_base\n+{\n+  typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n+  rebind<_Tp>::other _Tp_alloc_type;\n+};\n+template<typename _Tp, typename _Alloc = std::allocator<_Tp> >\n+class vector : protected _Vector_base<_Tp, _Alloc>\n+{\n+  typedef _Vector_base<_Tp, _Alloc> _Base;\n+  typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;\n+  typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;\n+  swap(vector& __x)\n+  noexcept(_Alloc_traits::_S_nothrow_swap());\n+};\n+}\n+namespace lexertl\n+namespace detail\n+}\n+namespace detail\n+template<typename id_type>\n+struct basic_internals\n+{\n+  typedef std::vector<id_type> id_type_vector;\n+};\n+};\n+template<typename char_type, typename id_type = std::size_t>\n+class basic_state_machine\n+{\n+  typedef detail::basic_internals<id_type> internals;\n+  void minimise ()\n+  {\n+    minimise_dfa (dfa_alphabet_, *dfa_, size_);\n+  }\n+  typedef typename internals::id_type_vector id_type_vector;\n+  void minimise_dfa (const id_type dfa_alphabet_,\n+\t\t     id_type_vector &dfa_, std::size_t size_)\n+  {\n+    id_type_vector new_dfa_ (front_, front_ + dfa_alphabet_);\n+    dfa_.swap (new_dfa_);\n+  }\n+}\n+  }\n+namespace std __attribute__ ((__visibility__ (\"default\")))\n+template<typename _Tp>\n+void\n+swap(_Tp&, _Tp&)\n+  noexcept(__and_<is_nothrow_move_constructible<_Tp>,\n+\t   is_nothrow_move_assignable<_Tp>>::value)\n+  ;\n+typedef lexertl::basic_state_machine<char32_t> lexstate;\n+lexstate m_state_machine;\n+GenerateLexer()\n+{\n+  m_state_machine.minimise();\n+}"}]}