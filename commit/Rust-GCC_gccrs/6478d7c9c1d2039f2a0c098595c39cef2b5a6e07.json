{"sha": "6478d7c9c1d2039f2a0c098595c39cef2b5a6e07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ3OGQ3YzljMWQyMDM5ZjJhMGMwOTg1OTVjMzljZWYyYjVhNmUwNw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-02-08T04:48:03Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-02-08T04:48:03Z"}, "message": "natFile.cc (_access): Use __builtin_alloca.\n\n\t* java/io/natFile.cc (_access): Use __builtin_alloca.\n\t(_stat): Likewise.\n\t(attr): Likewise.\n\t(getCanonicalPath): Likewise.\n\t(performList): Likewise.\n\t(performMkdir): Likewise.\n\t(performSetReadOnly): Likewise.\n\t(performRenameTo): Likewise.\n\t(performSetLastModified): Likewise.\n\t(performCreate): Likewise.\n\t(performDelete): Likewise.\n\nFrom-SVN: r49607", "tree": {"sha": "5579de687ff18f93a32aefc3a7dfdf512d66f5ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5579de687ff18f93a32aefc3a7dfdf512d66f5ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6478d7c9c1d2039f2a0c098595c39cef2b5a6e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6478d7c9c1d2039f2a0c098595c39cef2b5a6e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6478d7c9c1d2039f2a0c098595c39cef2b5a6e07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6478d7c9c1d2039f2a0c098595c39cef2b5a6e07/comments", "author": null, "committer": null, "parents": [{"sha": "5c7f5a5f556f11be24e728ed044c1f3e06612866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c7f5a5f556f11be24e728ed044c1f3e06612866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c7f5a5f556f11be24e728ed044c1f3e06612866"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "baa56db5e3b393c6a41eee6655e913722e9b7696", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6478d7c9c1d2039f2a0c098595c39cef2b5a6e07/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6478d7c9c1d2039f2a0c098595c39cef2b5a6e07/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6478d7c9c1d2039f2a0c098595c39cef2b5a6e07", "patch": "@@ -1,3 +1,17 @@\n+2002-02-07  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/io/natFile.cc (_access): Use __builtin_alloca.\n+\t(_stat): Likewise.\n+\t(attr): Likewise.\n+\t(getCanonicalPath): Likewise.\n+\t(performList): Likewise.\n+\t(performMkdir): Likewise.\n+\t(performSetReadOnly): Likewise.\n+\t(performRenameTo): Likewise.\n+\t(performSetLastModified): Likewise.\n+\t(performCreate): Likewise.\n+\t(performDelete): Likewise.\n+\n 2002-02-08  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* HACKING: Fix URL for the automake-gcj."}, {"sha": "cd04571b04e4aed59fe9bc067a9899677bcd637a", "filename": "libjava/java/io/natFile.cc", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6478d7c9c1d2039f2a0c098595c39cef2b5a6e07/libjava%2Fjava%2Fio%2FnatFile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6478d7c9c1d2039f2a0c098595c39cef2b5a6e07/libjava%2Fjava%2Fio%2FnatFile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFile.cc?ref=6478d7c9c1d2039f2a0c098595c39cef2b5a6e07", "patch": "@@ -39,7 +39,7 @@ details.  */\n jboolean\n java::io::File::_access (jint query)\n {\n-  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n   JvAssert (query == READ || query == WRITE || query == EXISTS);\n@@ -60,7 +60,7 @@ java::io::File::_access (jint query)\n jboolean\n java::io::File::_stat (jint query)\n {\n-  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n \n@@ -83,7 +83,7 @@ java::io::File::_stat (jint query)\n jlong\n java::io::File::attr (jint query)\n {\n-  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n \n@@ -104,7 +104,7 @@ java::io::File::attr (jint query)\n jstring\n java::io::File::getCanonicalPath (void)\n {\n-  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   char buf2[MAXPATHLEN];\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n@@ -135,7 +135,7 @@ java::io::File::performList (java::io::FilenameFilter *filter,\n   /* Some systems have dirent.h, but no directory reading functions like\n      opendir.  */\n #if defined(HAVE_DIRENT_H) && defined(HAVE_OPENDIR)\n-  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n \n@@ -188,7 +188,7 @@ java::io::File::performList (java::io::FilenameFilter *filter,\n jboolean\n java::io::File::performMkdir (void)\n {\n-  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n \n@@ -202,7 +202,7 @@ java::io::File::performMkdir (void)\n jboolean\n java::io::File::performSetReadOnly (void)\n {\n-  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n \n@@ -233,10 +233,11 @@ java::io::File::performListRoots ()\n jboolean\n java::io::File::performRenameTo (File *dest)\n {\n-  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n-  char *buf2 = (char *) _Jv_AllocBytes (JvGetStringUTFLength (dest->path) + 1);\n+  char *buf2\n+    = (char *) __builtin_alloca (JvGetStringUTFLength (dest->path) + 1);\n   total = JvGetStringUTFRegion (dest->path, 0, dest->path->length(), buf2);\n   buf2[total] = '\\0';\n \n@@ -253,7 +254,7 @@ java::io::File::performSetLastModified (jlong time)\n #ifdef HAVE_UTIME\n   utimbuf tb;\n \n-  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n   \n@@ -268,7 +269,7 @@ java::io::File::performSetLastModified (jlong time)\n jboolean\n java::io::File::performCreate (void)\n {\n-  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n \n@@ -290,7 +291,7 @@ java::io::File::performCreate (void)\n jboolean\n java::io::File::performDelete (void)\n {\n-  char *buf = (char *) _Jv_AllocBytes (JvGetStringUTFLength (path) + 1);\n+  char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (path) + 1);\n   jsize total = JvGetStringUTFRegion (path, 0, path->length(), buf);\n   buf[total] = '\\0';\n "}]}