{"sha": "fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyZjk4YmI2YzVlMDE2NTE0YmMzYjkzZjhmMTU1MGUzOWU3ZDI4Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-16T15:13:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-16T15:13:32Z"}, "message": "Two fixes for live-out SLP inductions (PR 83857)\n\nvect_analyze_loop_operations was calling vectorizable_live_operation\nfor all live-out phis, which led to a bogus ncopies calculation in\nthe pure SLP case.  I think v_a_l_o should only be passing phis\nthat are vectorised using normal loop vectorisation, since\nvect_slp_analyze_node_operations handles the SLP side (and knows\nthe correct slp_index and slp_node arguments to pass in, via\nvect_analyze_stmt).\n\nWith that fixed we hit an older bug that vectorizable_live_operation\ndidn't handle live-out SLP inductions.  Fixed by using gimple_phi_result\nrather than gimple_get_lhs for phis.\n\n2018-01-16  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR tree-optimization/83857\n\t* tree-vect-loop.c (vect_analyze_loop_operations): Don't call\n\tvectorizable_live_operation for pure SLP statements.\n\t(vectorizable_live_operation): Handle PHIs.\n\ngcc/testsuite/\n\tPR tree-optimization/83857\n\t* gcc.dg/vect/pr83857.c: New test.\n\nFrom-SVN: r256747", "tree": {"sha": "202d41236e118c3135fd0ed5979c117e2ca2e0dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/202d41236e118c3135fd0ed5979c117e2ca2e0dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f/comments", "author": null, "committer": null, "parents": [{"sha": "e57d9a82996838e73cc5470a1f3367e9c616b947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57d9a82996838e73cc5470a1f3367e9c616b947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57d9a82996838e73cc5470a1f3367e9c616b947"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "979f5ae487144845c7f19b6ef8b619d825fa330b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f", "patch": "@@ -1,3 +1,10 @@\n+2018-01-16  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/83857\n+\t* tree-vect-loop.c (vect_analyze_loop_operations): Don't call\n+\tvectorizable_live_operation for pure SLP statements.\n+\t(vectorizable_live_operation): Handle PHIs.\n+\n 2018-01-16  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83867"}, {"sha": "0e24ae440bd8d8627c428edd5b212931a33077b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f", "patch": "@@ -1,3 +1,8 @@\n+2018-01-16  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/83857\n+\t* gcc.dg/vect/pr83857.c: New test.\n+\n 2018-01-16  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83867"}, {"sha": "92e648b857be1144584ade18baa82e4c196171fe", "filename": "gcc/testsuite/gcc.dg/vect/pr83857.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr83857.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr83857.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr83857.c?ref=fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-ffast-math\" } */\n+\n+#define N 100\n+\n+double __attribute__ ((noinline, noclone))\n+f (double *x, double y)\n+{\n+  double a = 0;\n+  for (int i = 0; i < N; ++i)\n+    {\n+      a += y;\n+      x[i * 2] += a;\n+      x[i * 2 + 1] += a;\n+    }\n+  return a - y;\n+}\n+\n+double x[N * 2];\n+\n+int\n+main (void)\n+{\n+  if (f (x, 5) != (N - 1) * 5)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Loop contains only SLP stmts\" \"vect\" { target vect_double } } } */\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { target vect_double } } } */"}, {"sha": "79b818608dff1633b9feec654174b30e163b270c", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f", "patch": "@@ -1851,7 +1851,10 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n \t\tok = vectorizable_reduction (phi, NULL, NULL, NULL, NULL);\n             }\n \n-\t  if (ok && STMT_VINFO_LIVE_P (stmt_info))\n+\t  /* SLP PHIs are tested by vect_slp_analyze_node_operations.  */\n+\t  if (ok\n+\t      && STMT_VINFO_LIVE_P (stmt_info)\n+\t      && !PURE_SLP_STMT (stmt_info))\n \t    ok = vectorizable_live_operation (phi, NULL, NULL, -1, NULL);\n \n           if (!ok)\n@@ -8217,7 +8220,11 @@ vectorizable_live_operation (gimple *stmt,\n       gcc_assert (!LOOP_VINFO_FULLY_MASKED_P (loop_vinfo));\n \n       /* Get the correct slp vectorized stmt.  */\n-      vec_lhs = gimple_get_lhs (SLP_TREE_VEC_STMTS (slp_node)[vec_entry]);\n+      gimple *vec_stmt = SLP_TREE_VEC_STMTS (slp_node)[vec_entry];\n+      if (gphi *phi = dyn_cast <gphi *> (vec_stmt))\n+\tvec_lhs = gimple_phi_result (phi);\n+      else\n+\tvec_lhs = gimple_get_lhs (vec_stmt);\n \n       /* Get entry to use.  */\n       bitstart = bitsize_int (vec_index);"}]}