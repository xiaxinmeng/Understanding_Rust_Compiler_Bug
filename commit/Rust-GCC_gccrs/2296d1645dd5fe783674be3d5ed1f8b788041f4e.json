{"sha": "2296d1645dd5fe783674be3d5ed1f8b788041f4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5NmQxNjQ1ZGQ1ZmU3ODM2NzRiZTNkNWVkMWY4Yjc4ODA0MWY0ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-10-05T20:07:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-10-05T20:07:24Z"}, "message": "gcc.c: Move data on prefixes forward in file and reorganize.\n\n\t* gcc.c: Move data on prefixes forward in file and reorganize.\n\t(md_exec_prefix, md_startfile_prefix, md_startfile_prefix_1):\n\tAlways define, but make null if no value.\n\t(static_specs): Add \"md_exec_prefix\", \"md_startfile_prefix\",\n\tand \"md_startfile_prefix_1\".\n\t(main): Check whether md_exec_prefix and the others are the\n\tnull string rather than whether the macro is defined.\n\nFrom-SVN: r36730", "tree": {"sha": "9e7844db35ebfb97f1a7c3df5c3cc187c9f64194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e7844db35ebfb97f1a7c3df5c3cc187c9f64194"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2296d1645dd5fe783674be3d5ed1f8b788041f4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2296d1645dd5fe783674be3d5ed1f8b788041f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2296d1645dd5fe783674be3d5ed1f8b788041f4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2296d1645dd5fe783674be3d5ed1f8b788041f4e/comments", "author": null, "committer": null, "parents": [{"sha": "43d75418889fe7c7e28e5d0687fa83609e5c3e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43d75418889fe7c7e28e5d0687fa83609e5c3e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43d75418889fe7c7e28e5d0687fa83609e5c3e75"}], "stats": {"total": 231, "additions": 124, "deletions": 107}, "files": [{"sha": "941a6e451fb8440a985dbbd1e1fe977c78a62483", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296d1645dd5fe783674be3d5ed1f8b788041f4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296d1645dd5fe783674be3d5ed1f8b788041f4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2296d1645dd5fe783674be3d5ed1f8b788041f4e", "patch": "@@ -1,3 +1,13 @@\n+Thu Oct  5 16:16:57 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* gcc.c: Move data on prefixes forward in file and reorganize.\n+\t(md_exec_prefix, md_startfile_prefix, md_startfile_prefix_1):\n+\tAlways define, but make null if no value.\n+\t(static_specs): Add \"md_exec_prefix\", \"md_startfile_prefix\",\n+\tand \"md_startfile_prefix_1\".\n+\t(main): Check whether md_exec_prefix and the others are the\n+\tnull string rather than whether the macro is defined.\n+\n Thu Oct  5 19:04:18 2000  J\"orn Rennecke <amylaar@redhat.co.uk>\n \n \t* (convert_move): Use zero_extendpsisi2 to do an unsigned extension"}, {"sha": "f24077bb462ebb2041a23ee9dcc4a22ee18cb00b", "filename": "gcc/gcc.c", "status": "modified", "additions": 114, "deletions": 107, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2296d1645dd5fe783674be3d5ed1f8b788041f4e/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2296d1645dd5fe783674be3d5ed1f8b788041f4e/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=2296d1645dd5fe783674be3d5ed1f8b788041f4e", "patch": "@@ -1065,6 +1065,104 @@ skip_whitespace (p)\n \n   return p;\n }\n+/* Structures to keep track of prefixes to try when looking for files.  */\n+\n+struct prefix_list\n+{\n+  char *prefix;               /* String to prepend to the path.  */\n+  struct prefix_list *next;   /* Next in linked list.  */\n+  int require_machine_suffix; /* Don't use without machine_suffix.  */\n+  /* 2 means try both machine_suffix and just_machine_suffix.  */\n+  int *used_flag_ptr;\t      /* 1 if a file was found with this prefix.  */\n+  int priority;\t\t      /* Sort key - priority within list */\n+};\n+\n+struct path_prefix\n+{\n+  struct prefix_list *plist;  /* List of prefixes to try */\n+  int max_len;                /* Max length of a prefix in PLIST */\n+  const char *name;           /* Name of this list (used in config stuff) */\n+};\n+\n+/* List of prefixes to try when looking for executables.  */\n+\n+static struct path_prefix exec_prefixes = { 0, 0, \"exec\" };\n+\n+/* List of prefixes to try when looking for startup (crt0) files.  */\n+\n+static struct path_prefix startfile_prefixes = { 0, 0, \"startfile\" };\n+\n+/* List of prefixes to try when looking for include files.  */\n+\n+static struct path_prefix include_prefixes = { 0, 0, \"include\" };\n+\n+/* Suffix to attach to directories searched for commands.\n+   This looks like `MACHINE/VERSION/'.  */\n+\n+static const char *machine_suffix = 0;\n+\n+/* Suffix to attach to directories searched for commands.\n+   This is just `MACHINE/'.  */\n+\n+static const char *just_machine_suffix = 0;\n+\n+/* Adjusted value of GCC_EXEC_PREFIX envvar.  */\n+\n+static const char *gcc_exec_prefix;\n+\n+/* Default prefixes to attach to command names.  */\n+\n+#ifdef CROSS_COMPILE  /* Don't use these prefixes for a cross compiler.  */\n+#undef MD_EXEC_PREFIX\n+#undef MD_STARTFILE_PREFIX\n+#undef MD_STARTFILE_PREFIX_1\n+#endif\n+\n+/* If no prefixes defined, use the null string, which will disable them.  */\n+#ifndef MD_EXEC_PREFIX\n+#define MD_EXEC_PREFIX \"\"\n+#endif\n+#ifndef MD_STARTFILE_PREFIX\n+#define MD_STARTFILE_PREFIX \"\"\n+#endif\n+#ifndef MD_STARTFILE_PREFIX_1\n+#define MD_STARTFILE_PREFIX_1 \"\"\n+#endif\n+\n+/* Supply defaults for the standard prefixes.  */\n+\n+#ifndef STANDARD_EXEC_PREFIX\n+#define STANDARD_EXEC_PREFIX \"/usr/local/lib/gcc-lib/\"\n+#endif\n+#ifndef STANDARD_STARTFILE_PREFIX\n+#define STANDARD_STARTFILE_PREFIX \"/usr/local/lib/\"\n+#endif\n+#ifndef TOOLDIR_BASE_PREFIX\n+#define TOOLDIR_BASE_PREFIX \"/usr/local/\"\n+#endif\n+#ifndef STANDARD_BINDIR_PREFIX\n+#define STANDARD_BINDIR_PREFIX \"/usr/local/bin\"\n+#endif\n+\n+static const char *standard_exec_prefix = STANDARD_EXEC_PREFIX;\n+static const char *standard_exec_prefix_1 = \"/usr/lib/gcc/\";\n+static const char *md_exec_prefix = MD_EXEC_PREFIX;\n+\n+static const char *md_startfile_prefix = MD_STARTFILE_PREFIX;\n+static const char *md_startfile_prefix_1 = MD_STARTFILE_PREFIX_1;\n+static const char *standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;\n+static const char *standard_startfile_prefix_1 = \"/lib/\";\n+static const char *standard_startfile_prefix_2 = \"/usr/lib/\";\n+\n+static const char *tooldir_base_prefix = TOOLDIR_BASE_PREFIX;\n+static const char *tooldir_prefix;\n+\n+static const char *standard_bindir_prefix = STANDARD_BINDIR_PREFIX;\n+\n+/* Subdirectory to use for locating libraries.  Set by\n+   set_multilib_dir based on the compilation options.  */\n+\n+static const char *multilib_dir;\n \f\n /* Structure to keep track of the specs that have been defined so far.\n    These are accessed using %(specname) or %[specname] in a compiler\n@@ -1118,6 +1216,9 @@ static struct spec_list static_specs[] =\n   INIT_STATIC_SPEC (\"multilib_exclusions\",\t&multilib_exclusions),\n   INIT_STATIC_SPEC (\"linker\",\t\t\t&linker_name_spec),\n   INIT_STATIC_SPEC (\"link_libgcc\",\t\t&link_libgcc_spec),\n+  INIT_STATIC_SPEC (\"md_exec_prefix\",\t\t&md_exec_prefix),\n+  INIT_STATIC_SPEC (\"md_startfile_prefix\",\t&md_startfile_prefix),\n+  INIT_STATIC_SPEC (\"md_startfile_prefix_1\",\t&md_startfile_prefix_1),\n };\n \n #ifdef EXTRA_SPECS\t\t/* additional specs needed */\n@@ -1279,99 +1380,6 @@ static int signal_count;\n \n static const char *programname;\n \f\n-/* Structures to keep track of prefixes to try when looking for files.  */\n-\n-struct prefix_list\n-{\n-  char *prefix;               /* String to prepend to the path.  */\n-  struct prefix_list *next;   /* Next in linked list.  */\n-  int require_machine_suffix; /* Don't use without machine_suffix.  */\n-  /* 2 means try both machine_suffix and just_machine_suffix.  */\n-  int *used_flag_ptr;\t      /* 1 if a file was found with this prefix.  */\n-  int priority;\t\t      /* Sort key - priority within list */\n-};\n-\n-struct path_prefix\n-{\n-  struct prefix_list *plist;  /* List of prefixes to try */\n-  int max_len;                /* Max length of a prefix in PLIST */\n-  const char *name;           /* Name of this list (used in config stuff) */\n-};\n-\n-/* List of prefixes to try when looking for executables.  */\n-\n-static struct path_prefix exec_prefixes = { 0, 0, \"exec\" };\n-\n-/* List of prefixes to try when looking for startup (crt0) files.  */\n-\n-static struct path_prefix startfile_prefixes = { 0, 0, \"startfile\" };\n-\n-/* List of prefixes to try when looking for include files.  */\n-\n-static struct path_prefix include_prefixes = { 0, 0, \"include\" };\n-\n-/* Suffix to attach to directories searched for commands.\n-   This looks like `MACHINE/VERSION/'.  */\n-\n-static const char *machine_suffix = 0;\n-\n-/* Suffix to attach to directories searched for commands.\n-   This is just `MACHINE/'.  */\n-\n-static const char *just_machine_suffix = 0;\n-\n-/* Adjusted value of GCC_EXEC_PREFIX envvar.  */\n-\n-static const char *gcc_exec_prefix;\n-\n-/* Default prefixes to attach to command names.  */\n-\n-#ifdef CROSS_COMPILE  /* Don't use these prefixes for a cross compiler.  */\n-#undef MD_EXEC_PREFIX\n-#undef MD_STARTFILE_PREFIX\n-#undef MD_STARTFILE_PREFIX_1\n-#endif\n-\n-#ifndef STANDARD_EXEC_PREFIX\n-#define STANDARD_EXEC_PREFIX \"/usr/local/lib/gcc-lib/\"\n-#endif /* !defined STANDARD_EXEC_PREFIX */\n-\n-static const char *standard_exec_prefix = STANDARD_EXEC_PREFIX;\n-static const char *standard_exec_prefix_1 = \"/usr/lib/gcc/\";\n-#ifdef MD_EXEC_PREFIX\n-static const char *md_exec_prefix = MD_EXEC_PREFIX;\n-#endif\n-\n-#ifndef STANDARD_STARTFILE_PREFIX\n-#define STANDARD_STARTFILE_PREFIX \"/usr/local/lib/\"\n-#endif /* !defined STANDARD_STARTFILE_PREFIX */\n-\n-#ifdef MD_STARTFILE_PREFIX\n-static const char *md_startfile_prefix = MD_STARTFILE_PREFIX;\n-#endif\n-#ifdef MD_STARTFILE_PREFIX_1\n-static const char *md_startfile_prefix_1 = MD_STARTFILE_PREFIX_1;\n-#endif\n-static const char *standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;\n-static const char *standard_startfile_prefix_1 = \"/lib/\";\n-static const char *standard_startfile_prefix_2 = \"/usr/lib/\";\n-\n-#ifndef TOOLDIR_BASE_PREFIX\n-#define TOOLDIR_BASE_PREFIX \"/usr/local/\"\n-#endif\n-static const char *tooldir_base_prefix = TOOLDIR_BASE_PREFIX;\n-static const char *tooldir_prefix;\n-\n-#ifndef STANDARD_BINDIR_PREFIX\n-#define STANDARD_BINDIR_PREFIX \"/usr/local/bin\"\n-#endif\n-static const char *standard_bindir_prefix = STANDARD_BINDIR_PREFIX;\n-\n-/* Subdirectory to use for locating libraries.  Set by\n-   set_multilib_dir based on the compilation options.  */\n-\n-static const char *multilib_dir;\n-\n /* Clear out the vector of arguments (after a command is executed).  */\n \n static void\n@@ -5339,22 +5347,21 @@ main (argc, argv)\n   /* If not cross-compiling, look for startfiles in the standard places.  */\n   if (*cross_compile == '0')\n     {\n-#ifdef MD_EXEC_PREFIX\n-      add_prefix (&exec_prefixes, md_exec_prefix, \"GCC\",\n-\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n-      add_prefix (&startfile_prefixes, md_exec_prefix, \"GCC\",\n-\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n-#endif\n+      if (*md_exec_prefix)\n+\t{\n+\t  add_prefix (&exec_prefixes, md_exec_prefix, \"GCC\",\n+\t\t      PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t  add_prefix (&startfile_prefixes, md_exec_prefix, \"GCC\",\n+\t\t      PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+\t}\n \n-#ifdef MD_STARTFILE_PREFIX\n-      add_prefix (&startfile_prefixes, md_startfile_prefix, \"GCC\",\n-\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n-#endif\n+      if (*md_startfile_prefix)\n+\tadd_prefix (&startfile_prefixes, md_startfile_prefix, \"GCC\",\n+\t\t    PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n \n-#ifdef MD_STARTFILE_PREFIX_1\n-      add_prefix (&startfile_prefixes, md_startfile_prefix_1, \"GCC\",\n-\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n-#endif\n+      if (*md_startfile_prefix_1)\n+\tadd_prefix (&startfile_prefixes, md_startfile_prefix_1, \"GCC\",\n+\t\t    PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n \n       /* If standard_startfile_prefix is relative, base it on\n \t standard_exec_prefix.  This lets us move the installed tree"}]}