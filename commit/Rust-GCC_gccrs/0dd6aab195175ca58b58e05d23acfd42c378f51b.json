{"sha": "0dd6aab195175ca58b58e05d23acfd42c378f51b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRkNmFhYjE5NTE3NWNhNThiNThlMDVkMjNhY2ZkNDJjMzc4ZjUxYg==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2020-10-16T14:56:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-26T08:39:40Z"}, "message": "[Ada] New warning on questionable missing parentheses\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Equality_Op): Warn when -gnatwq is used\n\t(the default) and the problematic case is encountered.", "tree": {"sha": "b085b98ffc2e553b39179a616aba2f73ba423bf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b085b98ffc2e553b39179a616aba2f73ba423bf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dd6aab195175ca58b58e05d23acfd42c378f51b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd6aab195175ca58b58e05d23acfd42c378f51b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dd6aab195175ca58b58e05d23acfd42c378f51b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd6aab195175ca58b58e05d23acfd42c378f51b/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96ccfec0296a20558942e034b9b7e64573b8b56a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ccfec0296a20558942e034b9b7e64573b8b56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ccfec0296a20558942e034b9b7e64573b8b56a"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "fc839b79ade5279056c628fb18d48d5ed468cb55", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd6aab195175ca58b58e05d23acfd42c378f51b/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd6aab195175ca58b58e05d23acfd42c378f51b/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=0dd6aab195175ca58b58e05d23acfd42c378f51b", "patch": "@@ -8418,6 +8418,11 @@ package body Sem_Res is\n       --  This is semantically dubious, and of no interest to any real code,\n       --  but c48008a makes it all worthwhile.\n \n+      function Suspicious_Prio_For_Equality return Boolean;\n+      --  Returns True iff the parent node is a and/or/xor operation that\n+      --  could be the cause of confused priorities. Note that if the not is\n+      --  in parens, then False is returned.\n+\n       -------------------------\n       -- Check_If_Expression --\n       -------------------------\n@@ -8547,6 +8552,47 @@ package body Sem_Res is\n          return Empty;\n       end Find_Unique_Access_Type;\n \n+      ----------------------------------\n+      -- Suspicious_Prio_For_Equality --\n+      ----------------------------------\n+\n+      function Suspicious_Prio_For_Equality return Boolean is\n+         Par : constant Node_Id := Parent (N);\n+\n+      begin\n+         --  Check if parent node is one of and/or/xor, not parenthesized\n+         --  explicitly, and its own parent is not of this kind. Otherwise,\n+         --  it's a case of chained Boolean conditions which is likely well\n+         --  parenthesized.\n+\n+         if Nkind (Par) in N_Op_And | N_Op_Or | N_Op_Xor\n+           and then Paren_Count (N) = 0\n+           and then Nkind (Parent (Par)) not in N_Op_And | N_Op_Or | N_Op_Xor\n+         then\n+            declare\n+               Compar : Node_Id :=\n+                 (if Left_Opnd (Par) = N then\n+                     Right_Opnd (Par)\n+                  else\n+                     Left_Opnd (Par));\n+            begin\n+               --  Compar may have been rewritten, for example from (a /= b)\n+               --  into not (a = b). Use the Original_Node instead.\n+\n+               Compar := Original_Node (Compar);\n+\n+               --  If the other argument of the and/or/xor is also a\n+               --  comparison, or another and/or/xor then most likely\n+               --  the priorities are correctly set.\n+\n+               return Nkind (Compar) not in N_Op_Boolean;\n+            end;\n+\n+         else\n+            return False;\n+         end if;\n+      end Suspicious_Prio_For_Equality;\n+\n    --  Start of processing for Resolve_Equality_Op\n \n    begin\n@@ -8627,6 +8673,24 @@ package body Sem_Res is\n             Explain_Redundancy (Original_Node (R));\n          end if;\n \n+         --  Warn on a (in)equality between boolean values which is not\n+         --  parenthesized when the parent expression is one of and/or/xor, as\n+         --  this is interpreted as (a = b) op c where most likely a = (b op c)\n+         --  was intended. Do not generate a warning in generic instances, as\n+         --  the problematic expression may be implicitly parenthesized in\n+         --  the generic itself if one of the operators is a generic formal.\n+         --  Also do not generate a warning for generated equality, for\n+         --  example from rewritting a membership test.\n+\n+         if Warn_On_Questionable_Missing_Parens\n+           and then not In_Instance\n+           and then Comes_From_Source (N)\n+           and then Is_Boolean_Type (T)\n+           and then Suspicious_Prio_For_Equality\n+         then\n+            Error_Msg_N (\"?q?equality should be parenthesized here!\", N);\n+         end if;\n+\n          --  If the equality is overloaded and the operands have resolved\n          --  properly, set the proper equality operator on the node. The\n          --  current setting is the first one found during analysis, which"}]}