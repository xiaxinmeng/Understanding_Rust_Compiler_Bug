{"sha": "6488759f404f3aff6642b005242a9c82a1c2cee2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ4ODc1OWY0MDRmM2FmZjY2NDJiMDA1MjQyYTljODJhMWMyY2VlMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-10-10T19:31:58Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-10-10T19:31:58Z"}, "message": "ipa-reference.c: Do not include splay-tree.h\n\n\t* ipa-reference.c: Do not include splay-tree.h\n\t(reference_vars_to_consider): Turn to hash map.\n\t(get_static_name, ipa_init, analyze_function, propagate,\n\tstream_out_bitmap, ipa_reference_write_optimization_summary,\n\tipa_reference_write_optimization_summary): Update.\n\nFrom-SVN: r276850", "tree": {"sha": "ad489c8232dc50fc38c00aa122319b8892d5fb51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad489c8232dc50fc38c00aa122319b8892d5fb51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6488759f404f3aff6642b005242a9c82a1c2cee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6488759f404f3aff6642b005242a9c82a1c2cee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6488759f404f3aff6642b005242a9c82a1c2cee2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6488759f404f3aff6642b005242a9c82a1c2cee2/comments", "author": null, "committer": null, "parents": [{"sha": "cd8589ab05a8d926c5330055c1099d300d64a0a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8589ab05a8d926c5330055c1099d300d64a0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd8589ab05a8d926c5330055c1099d300d64a0a8"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "6a86dd802b1ecd7a9762ff1539c3748074e7f37e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6488759f404f3aff6642b005242a9c82a1c2cee2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6488759f404f3aff6642b005242a9c82a1c2cee2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6488759f404f3aff6642b005242a9c82a1c2cee2", "patch": "@@ -1,3 +1,11 @@\n+2019-10-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-reference.c: Do not include splay-tree.h\n+\t(reference_vars_to_consider): Turn to hash map.\n+\t(get_static_name, ipa_init, analyze_function, propagate,\n+\tstream_out_bitmap, ipa_reference_write_optimization_summary,\n+\tipa_reference_write_optimization_summary): Update.\n+\n 2019-10-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-reference.c (propagate): Fix releasing of IPA summaries."}, {"sha": "977eb2d0fd83f26e21d8c47c530cee6072692ba4", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6488759f404f3aff6642b005242a9c82a1c2cee2/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6488759f404f3aff6642b005242a9c82a1c2cee2/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=6488759f404f3aff6642b005242a9c82a1c2cee2", "patch": "@@ -46,7 +46,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"data-streamer.h\"\n #include \"calls.h\"\n-#include \"splay-tree.h\"\n #include \"ipa-utils.h\"\n #include \"ipa-reference.h\"\n #include \"symbol-summary.h\"\n@@ -92,9 +91,11 @@ struct ipa_reference_vars_info_d\n \n typedef struct ipa_reference_vars_info_d *ipa_reference_vars_info_t;\n \n-/* This splay tree contains all of the static variables that are\n+/* This map contains all of the static variables that are\n    being considered by the compilation level alias analysis.  */\n-static splay_tree reference_vars_to_consider;\n+typedef hash_map<int_hash <unsigned int, -1U>, tree>\n+\t reference_vars_to_consider_t;\n+static reference_vars_to_consider_t *reference_vars_to_consider;\n \n /* Set of all interesting module statics.  A bit is set for every module\n    static we are considering.  This is added to the local info when asm\n@@ -272,9 +273,7 @@ is_proper_for_analysis (tree t)\n static const char *\n get_static_name (int index)\n {\n-  splay_tree_node stn =\n-    splay_tree_lookup (reference_vars_to_consider, index);\n-  return fndecl_name ((tree)(stn->value));\n+  return fndecl_name (*reference_vars_to_consider->get (index));\n }\n \n /* Dump a set of static vars to FILE.  */\n@@ -416,7 +415,7 @@ ipa_init (void)\n   ipa_init_p = true;\n \n   if (dump_file)\n-    reference_vars_to_consider = splay_tree_new (splay_tree_compare_ints, 0, 0);\n+    reference_vars_to_consider = new reference_vars_to_consider_t(251);\n \n   bitmap_obstack_initialize (&local_info_obstack);\n   bitmap_obstack_initialize (&optimization_summary_obstack);\n@@ -476,9 +475,8 @@ analyze_function (struct cgraph_node *fn)\n \t  && bitmap_set_bit (all_module_statics, ipa_reference_var_uid (var)))\n \t{\n \t  if (dump_file)\n-\t    splay_tree_insert (reference_vars_to_consider,\n-\t\t\t       ipa_reference_var_uid (var),\n-\t\t\t       (splay_tree_value)var);\n+\t    reference_vars_to_consider->put (ipa_reference_var_uid (var),\n+\t\t\t\t\t\tvar);\n \t}\n       switch (ref->use)\n \t{\n@@ -898,7 +896,7 @@ propagate (void)\n     }\n \n   if (dump_file)\n-    splay_tree_delete (reference_vars_to_consider);\n+    delete reference_vars_to_consider;\n   reference_vars_to_consider = NULL;\n   return remove_p ? TODO_remove_functions : 0;\n }\n@@ -968,8 +966,7 @@ stream_out_bitmap (struct lto_simple_output_block *ob,\n     return;\n   EXECUTE_IF_AND_IN_BITMAP (bits, ltrans_statics, 0, index, bi)\n     {\n-      tree decl = (tree)splay_tree_lookup (reference_vars_to_consider,\n-\t\t\t\t\t   index)->value;\n+      tree decl = *reference_vars_to_consider->get (index);\n       lto_output_var_decl_index (ob->decl_state, ob->main_stream, decl);\n     }\n }\n@@ -987,7 +984,7 @@ ipa_reference_write_optimization_summary (void)\n   auto_bitmap ltrans_statics;\n   int i;\n \n-  reference_vars_to_consider = splay_tree_new (splay_tree_compare_ints, 0, 0);\n+  reference_vars_to_consider = new reference_vars_to_consider_t (251);\n \n   /* See what variables we are interested in.  */\n   for (i = 0; i < lto_symtab_encoder_size (encoder); i++)\n@@ -1001,9 +998,8 @@ ipa_reference_write_optimization_summary (void)\n \t{\n \t  tree decl = vnode->decl;\n \t  bitmap_set_bit (ltrans_statics, ipa_reference_var_uid (decl));\n-\t  splay_tree_insert (reference_vars_to_consider,\n-\t\t\t     ipa_reference_var_uid (decl),\n-\t\t\t     (splay_tree_value)decl);\n+\t  reference_vars_to_consider->put\n+\t\t (ipa_reference_var_uid (decl), decl);\n \t  ltrans_statics_bitcount ++;\n \t}\n     }\n@@ -1045,7 +1041,7 @@ ipa_reference_write_optimization_summary (void)\n \t  }\n       }\n   lto_destroy_simple_output_block (ob);\n-  splay_tree_delete (reference_vars_to_consider);\n+  delete reference_vars_to_consider;\n }\n \n /* Deserialize the ipa info for lto.  */"}]}