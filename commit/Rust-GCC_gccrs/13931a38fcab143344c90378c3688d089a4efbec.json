{"sha": "13931a38fcab143344c90378c3688d089a4efbec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM5MzFhMzhmY2FiMTQzMzQ0YzkwMzc4YzM2ODhkMDg5YTRlZmJlYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-12T08:58:52Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-12T08:58:52Z"}, "message": "[Ada] Fix missing range check for In/Out parameter with -gnatVa\n\nThis plugs another small loophole in the front-end which fails to\ngenerate a range check for a scalar In/Out parameter when -gnatVa is\nspecified.  This also fixes a few more leaks of the Do_Range_Check flag\non actual parameters, both in regular and -gnatVa modes, as well as a\nleak specific to expression function in -gnatp mode.\n\n2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb (Insert_Valid_Check): Reset the Do_Range_Check flag\n\ton the validated object.\n\t* exp_ch6.adb (Add_Call_By_Copy_Code): Reset the Do_Range_Check\n\tflag on the actual here, as well as on the Expression if the\n\tactual is a N_Type_Conversion node.\n\t(Add_Validation_Call_By_Copy_Code): Generate the incoming range\n\tcheck if needed and reset the Do_Range_Check flag on the\n\tExpression if the actual is a N_Type_Conversion node.\n\t(Expand_Actuals): Do not reset the Do_Range_Check flag here.\n\tGenerate the incoming range check for In parameters here instead\n\tof...\n\t(Expand_Call_Helper): ...here.  Remove redudant condition.\n\t* sem_res.adb (Resolve_Actuals): Use local variable A_Typ and\n\tremove obsolete comments.\n\t(Resolve_Type_Conversion): Do not force the Do_Range_Check flag\n\ton the operand if range checks are suppressed.\n\ngcc/testsuite/\n\n\t* gnat.dg/range_check6.adb: New testcase.\n\nFrom-SVN: r274280", "tree": {"sha": "6807e239f7ce5f0594b5a7f77dc97463476a4a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6807e239f7ce5f0594b5a7f77dc97463476a4a59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13931a38fcab143344c90378c3688d089a4efbec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13931a38fcab143344c90378c3688d089a4efbec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13931a38fcab143344c90378c3688d089a4efbec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13931a38fcab143344c90378c3688d089a4efbec/comments", "author": null, "committer": null, "parents": [{"sha": "68c8d72a1aa31d750ddeb6a0eb3f472f1498a154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c8d72a1aa31d750ddeb6a0eb3f472f1498a154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c8d72a1aa31d750ddeb6a0eb3f472f1498a154"}], "stats": {"total": 130, "additions": 94, "deletions": 36}, "files": [{"sha": "7c7aa8330a0fc7f534f91c393dde9db858bb4061", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13931a38fcab143344c90378c3688d089a4efbec/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13931a38fcab143344c90378c3688d089a4efbec/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=13931a38fcab143344c90378c3688d089a4efbec", "patch": "@@ -1,3 +1,22 @@\n+2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.adb (Insert_Valid_Check): Reset the Do_Range_Check flag\n+\ton the validated object.\n+\t* exp_ch6.adb (Add_Call_By_Copy_Code): Reset the Do_Range_Check\n+\tflag on the actual here, as well as on the Expression if the\n+\tactual is a N_Type_Conversion node.\n+\t(Add_Validation_Call_By_Copy_Code): Generate the incoming range\n+\tcheck if needed and reset the Do_Range_Check flag on the\n+\tExpression if the actual is a N_Type_Conversion node.\n+\t(Expand_Actuals): Do not reset the Do_Range_Check flag here.\n+\tGenerate the incoming range check for In parameters here instead\n+\tof...\n+\t(Expand_Call_Helper): ...here.  Remove redudant condition.\n+\t* sem_res.adb (Resolve_Actuals): Use local variable A_Typ and\n+\tremove obsolete comments.\n+\t(Resolve_Type_Conversion): Do not force the Do_Range_Check flag\n+\ton the operand if range checks are suppressed.\n+\n 2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* checks.adb (Activate_Range_Check): Remove redundant argument."}, {"sha": "5d8efce90800953ac53fa1d3cc38231ab3624419", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13931a38fcab143344c90378c3688d089a4efbec/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13931a38fcab143344c90378c3688d089a4efbec/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=13931a38fcab143344c90378c3688d089a4efbec", "patch": "@@ -7588,8 +7588,12 @@ package body Checks is\n               Suppress => Validity_Check);\n \n             Set_Validated_Object (Var_Id, New_Copy_Tree (Exp));\n+\n+            --  Reset the Do_Range_Check flag so it doesn't leak elsewhere\n+\n+            Set_Do_Range_Check (Validated_Object (Var_Id), False);\n+\n             Rewrite (Exp, New_Occurrence_Of (Var_Id, Loc));\n-            PV := New_Occurrence_Of (Var_Id, Loc);\n \n             --  Copy the Do_Range_Check flag over to the new Exp, so it doesn't\n             --  get lost. Floating point types are handled elsewhere.\n@@ -7598,6 +7602,8 @@ package body Checks is\n                Set_Do_Range_Check (Exp, Do_Range_Check (Original_Node (Exp)));\n             end if;\n \n+            PV := New_Occurrence_Of (Var_Id, Loc);\n+\n          --  Otherwise the expression does not denote a variable. Force its\n          --  evaluation by capturing its value in a constant. Generate:\n "}, {"sha": "3f2d0e3178388a3162f3b02b25b62c53a7da40ae", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13931a38fcab143344c90378c3688d089a4efbec/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13931a38fcab143344c90378c3688d089a4efbec/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=13931a38fcab143344c90378c3688d089a4efbec", "patch": "@@ -1295,7 +1295,14 @@ package body Exp_Ch6 is\n             Indic := New_Occurrence_Of (F_Typ, Loc);\n          end if;\n \n+         --  The new code will be properly analyzed below and the setting of\n+         --  the Do_Range_Check flag recomputed so remove the obsolete one.\n+\n+         Set_Do_Range_Check (Actual, False);\n+\n          if Nkind (Actual) = N_Type_Conversion then\n+            Set_Do_Range_Check (Expression (Actual), False);\n+\n             V_Typ := Etype (Expression (Actual));\n \n             --  If the formal is an (in-)out parameter, capture the name\n@@ -1689,6 +1696,20 @@ package body Exp_Ch6 is\n          Var_Id  : Entity_Id;\n \n       begin\n+         --  Generate range check if required\n+\n+         if Do_Range_Check (Actual) then\n+            Generate_Range_Check (Actual, E_Formal, CE_Range_Check_Failed);\n+         end if;\n+\n+         --  If there is a type conversion in the actual, it will be reinstated\n+         --  below, the new instance will be properly analyzed and the setting\n+         --  of the Do_Range_Check flag recomputed so remove the obsolete one.\n+\n+         if Nkind (Actual) = N_Type_Conversion then\n+            Set_Do_Range_Check (Expression (Actual), False);\n+         end if;\n+\n          --  Copy the value of the validation variable back into the object\n          --  being validated.\n \n@@ -2073,14 +2094,6 @@ package body Exp_Ch6 is\n                     (Ekind (Formal) = E_In_Out_Parameter\n                       and then not In_Subrange_Of (E_Actual, E_Formal)))\n             then\n-               --  Perhaps the setting back to False should be done within\n-               --  Add_Call_By_Copy_Code, since it could get set on other\n-               --  cases occurring above???\n-\n-               if Do_Range_Check (Actual) then\n-                  Set_Do_Range_Check (Actual, False);\n-               end if;\n-\n                Add_Call_By_Copy_Code;\n             end if;\n \n@@ -2194,6 +2207,12 @@ package body Exp_Ch6 is\n          --  Processing for IN parameters\n \n          else\n+            --  Generate range check if required\n+\n+            if Do_Range_Check (Actual) then\n+               Generate_Range_Check (Actual, E_Formal, CE_Range_Check_Failed);\n+            end if;\n+\n             --  For IN parameters in the bit-packed array case, we expand an\n             --  indexed component (the circuit in Exp_Ch4 deliberately left\n             --  indexed components appearing as actuals untouched, so that\n@@ -3054,16 +3073,6 @@ package body Exp_Ch6 is\n       Actual := First_Actual (Call_Node);\n       Param_Count := 1;\n       while Present (Formal) loop\n-\n-         --  Generate range check if required\n-\n-         if Do_Range_Check (Actual)\n-           and then Ekind (Formal) = E_In_Parameter\n-         then\n-            Generate_Range_Check\n-              (Actual, Etype (Formal), CE_Range_Check_Failed);\n-         end if;\n-\n          --  Prepare to examine current entry\n \n          Prev := Actual;\n@@ -3582,9 +3591,7 @@ package body Exp_Ch6 is\n                --  or IN OUT parameter. We do reset the Is_Known_Valid flag\n                --  since the subprogram could have returned in invalid value.\n \n-               if Ekind_In (Formal, E_Out_Parameter, E_In_Out_Parameter)\n-                 and then Is_Assignable (Ent)\n-               then\n+               if Is_Assignable (Ent) then\n                   Sav := Last_Assignment (Ent);\n                   Kill_Current_Values (Ent);\n                   Set_Last_Assignment (Ent, Sav);"}, {"sha": "8162b8e05206d4182b5bbbaae980edbcc21dce1a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13931a38fcab143344c90378c3688d089a4efbec/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13931a38fcab143344c90378c3688d089a4efbec/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=13931a38fcab143344c90378c3688d089a4efbec", "patch": "@@ -4517,7 +4517,7 @@ package body Sem_Res is\n                end if;\n             end if;\n \n-            if Etype (A) = Any_Type then\n+            if A_Typ = Any_Type then\n                Set_Etype (N, Any_Type);\n                return;\n             end if;\n@@ -4539,18 +4539,10 @@ package body Sem_Res is\n \n                --  Apply required constraint checks\n \n-               --  Gigi looks at the check flag and uses the appropriate types.\n-               --  For now since one flag is used there is an optimization\n-               --  which might not be done in the IN OUT case since Gigi does\n-               --  not do any analysis. More thought required about this ???\n-\n-               --  In fact is this comment obsolete??? doesn't the expander now\n-               --  generate all these tests anyway???\n-\n-               if Is_Scalar_Type (Etype (A)) then\n+               if Is_Scalar_Type (A_Typ) then\n                   Apply_Scalar_Range_Check (A, F_Typ);\n \n-               elsif Is_Array_Type (Etype (A)) then\n+               elsif Is_Array_Type (A_Typ) then\n                   Apply_Length_Check (A, F_Typ);\n \n                elsif Is_Record_Type (F_Typ)\n@@ -4624,9 +4616,8 @@ package body Sem_Res is\n                      Apply_Scalar_Range_Check\n                        (Expression (A), Etype (Expression (A)), A_Typ);\n \n-                     --  In addition, the returned value of the parameter must\n-                     --  satisfy the bounds of the object type (see comment\n-                     --  below).\n+                     --  In addition the return value must meet the constraints\n+                     --  of the object type (see the comment below).\n \n                      Apply_Scalar_Range_Check (A, A_Typ, F_Typ);\n \n@@ -4650,6 +4641,7 @@ package body Sem_Res is\n                     and then Ekind (F) = E_Out_Parameter\n                   then\n                      Apply_Length_Check (A, F_Typ);\n+\n                   else\n                      Apply_Range_Check (A, A_Typ, F_Typ);\n                   end if;\n@@ -11757,6 +11749,8 @@ package body Sem_Res is\n         and then (Is_Fixed_Point_Type (Operand_Typ)\n                    or else (not GNATprove_Mode\n                              and then Is_Floating_Point_Type (Operand_Typ)))\n+        and then not Range_Checks_Suppressed (Target_Typ)\n+        and then not Range_Checks_Suppressed (Operand_Typ)\n       then\n          Set_Do_Range_Check (Operand);\n       end if;"}, {"sha": "90ce94df7551984e2fdbc22089c5fa01af78db3f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13931a38fcab143344c90378c3688d089a4efbec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13931a38fcab143344c90378c3688d089a4efbec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=13931a38fcab143344c90378c3688d089a4efbec", "patch": "@@ -1,3 +1,7 @@\n+2019-08-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/range_check6.adb: New testcase.\n+\n 2019-08-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/90601"}, {"sha": "00fa705d21b34aba19b87e7b7f23ba8c98f466cf", "filename": "gcc/testsuite/gnat.dg/range_check6.adb", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13931a38fcab143344c90378c3688d089a4efbec/gcc%2Ftestsuite%2Fgnat.dg%2Frange_check6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13931a38fcab143344c90378c3688d089a4efbec/gcc%2Ftestsuite%2Fgnat.dg%2Frange_check6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frange_check6.adb?ref=13931a38fcab143344c90378c3688d089a4efbec", "patch": "@@ -0,0 +1,28 @@\n+--  { dg-do run }\n+--  { dg-options \"-O0 -gnatVa\" }\n+\n+procedure Range_Check6 is\n+\n+  type Byte is range -2**7 .. 2**7-1;\n+  for Byte'Size use 8;\n+\n+  subtype Hour is Byte range 0 .. 23;\n+\n+  type Rec is record\n+    B : Byte;\n+  end record;\n+\n+  procedure Encode (H : in out Hour) is\n+  begin\n+    null;\n+  end;\n+\n+  R : Rec;\n+\n+begin\n+  R.B := 24;\n+  Encode (R.B);\n+  raise Program_Error;\n+exception\n+  when Constraint_Error => null;\n+end;"}]}