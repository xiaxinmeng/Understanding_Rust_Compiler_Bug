{"sha": "83a49336c63889db05b75d05fe5b2794071da7aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNhNDkzMzZjNjM4ODlkYjA1Yjc1ZDA1ZmU1YjI3OTQwNzFkYTdhYQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-11-13T13:47:29Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-11-13T13:47:29Z"}, "message": "Enhance syntax of -fdbg-cnt.\n\n2019-11-13  Martin Liska  <mliska@suse.cz>\n\n\t* common.opt: Document change of -fdbg-cnt option.\n\t* dbgcnt.c (DEBUG_COUNTER): Remove.\n\t(dbg_cnt_is_enabled): Remove.\n\t(dbg_cnt): Work with new intervals.\n\t(dbg_cnt_set_limit_by_index): Set to new\n\tlist of intervals.\n\t(dbg_cnt_set_limit_by_name): Likewise.\n\t(dbg_cnt_process_single_pair): Process new format.\n\t(dbg_cnt_process_opt): Likewise.\n\t(dbg_cnt_list_all_counters): Likewise.\n\t* doc/invoke.texi: Document change of -fdbg-cnt option.\n\t(cmp_tuples): New.\n2019-11-13  Martin Liska  <mliska@suse.cz>\n\n\t* gcc.dg/ipa/ipa-icf-39.c: Update -fdbg-cnt to the new format.\n\t* gcc.dg/pr68766.c: Likewise.\n\nFrom-SVN: r278140", "tree": {"sha": "f1b7c997f964b2f6f1eca8e4ceafcd3ea15c43a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1b7c997f964b2f6f1eca8e4ceafcd3ea15c43a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83a49336c63889db05b75d05fe5b2794071da7aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a49336c63889db05b75d05fe5b2794071da7aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a49336c63889db05b75d05fe5b2794071da7aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a49336c63889db05b75d05fe5b2794071da7aa/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2895b172d56c355373b64517a3298a01a2f10ec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2895b172d56c355373b64517a3298a01a2f10ec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2895b172d56c355373b64517a3298a01a2f10ec0"}], "stats": {"total": 207, "additions": 133, "deletions": 74}, "files": [{"sha": "0075f3188027e473a735ad77690a10d9f0041cf5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83a49336c63889db05b75d05fe5b2794071da7aa", "patch": "@@ -1,3 +1,18 @@\n+2019-11-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* common.opt: Document change of -fdbg-cnt option.\n+\t* dbgcnt.c (DEBUG_COUNTER): Remove.\n+\t(dbg_cnt_is_enabled): Remove.\n+\t(dbg_cnt): Work with new intervals.\n+\t(dbg_cnt_set_limit_by_index): Set to new\n+\tlist of intervals.\n+\t(dbg_cnt_set_limit_by_name): Likewise.\n+\t(dbg_cnt_process_single_pair): Process new format.\n+\t(dbg_cnt_process_opt): Likewise.\n+\t(dbg_cnt_list_all_counters): Likewise.\n+\t* doc/invoke.texi: Document change of -fdbg-cnt option.\n+\t(cmp_tuples): New.\n+\n 2019-11-13  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline.c (ipa_inline): Check that function is defined before"}, {"sha": "e7b87820bc932e2e914b8412d8b9a76197bce393", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=83a49336c63889db05b75d05fe5b2794071da7aa", "patch": "@@ -1188,7 +1188,7 @@ List all available debugging counters with their limits and counts.\n \n fdbg-cnt=\n Common RejectNegative Joined Var(common_deferred_options) Defer\n--fdbg-cnt=<counter>[:<lower_limit>]:<upper_limit>[,<counter>:...]\tSet the debug counter limit.\n+-fdbg-cnt=<counter>[:<lower_limit1>-]<upper_limit1>[:<lower_limit2>-<upper_limit2>:...][,<counter>:...]\tSet the debug counter limit.\n \n fdebug-prefix-map=\n Common Joined RejectNegative Var(common_deferred_options) Defer"}, {"sha": "283a4575425832d855dd7dad400579ddf3878388", "filename": "gcc/dbgcnt.c", "status": "modified", "additions": 104, "deletions": 62, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2Fdbgcnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2Fdbgcnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbgcnt.c?ref=83a49336c63889db05b75d05fe5b2794071da7aa", "patch": "@@ -40,24 +40,12 @@ static struct string2counter_map map[debug_counter_number_of_counters] =\n };\n #undef DEBUG_COUNTER\n \n-#define DEBUG_COUNTER(a) UINT_MAX,\n-static unsigned int limit_high[debug_counter_number_of_counters] =\n-{\n-#include \"dbgcnt.def\"\n-};\n-#undef DEBUG_COUNTER\n+typedef std::pair<unsigned int, unsigned int> limit_tuple;\n \n-static unsigned int limit_low[debug_counter_number_of_counters];\n+static vec<limit_tuple> limits[debug_counter_number_of_counters];\n \n static unsigned int count[debug_counter_number_of_counters];\n \n-bool\n-dbg_cnt_is_enabled (enum debug_counter index)\n-{\n-  unsigned v = count[index];\n-  return v > limit_low[index] && v <= limit_high[index];\n-}\n-\n static void\n print_limit_reach (const char *counter, int limit, bool upper_p)\n {\n@@ -72,47 +60,86 @@ print_limit_reach (const char *counter, int limit, bool upper_p)\n bool\n dbg_cnt (enum debug_counter index)\n {\n-  count[index]++;\n+  unsigned v = ++count[index];\n+\n+  if (!limits[index].exists ())\n+    return true;\n+  else if (limits[index].is_empty ())\n+    return false;\n \n-  /* Do not print the info for default lower limit.  */\n-  if (count[index] == limit_low[index] && limit_low[index] > 0)\n-    print_limit_reach (map[index].name, limit_low[index], false);\n-  else if (count[index] == limit_high[index])\n-    print_limit_reach (map[index].name, limit_high[index], true);\n+  unsigned last = limits[index].length () - 1;\n+  unsigned int min = limits[index][last].first;\n+  unsigned int max = limits[index][last].second;\n \n-  return dbg_cnt_is_enabled (index);\n+  if (v < min)\n+    return false;\n+  else if (v == min)\n+    {\n+      print_limit_reach (map[index].name, v, false);\n+      if (min == max)\n+\tlimits[index].pop ();\n+      return true;\n+    }\n+  else if (v < max)\n+    return true;\n+  else if (v == max)\n+    {\n+      print_limit_reach (map[index].name, v, true);\n+      limits[index].pop ();\n+      return true;\n+    }\n+  else\n+    return false;\n }\n \n-static void\n-dbg_cnt_set_limit_by_index (enum debug_counter index, int low, int high)\n-{\n-  limit_low[index] = low;\n-  limit_high[index] = high;\n+/* Compare limit_tuple intervals by first item in descending order.  */\n \n-  fprintf (stderr, \"dbg_cnt '%s' set to %d-%d\\n\", map[index].name, low, high);\n+static int\n+cmp_tuples (const void *ptr1, const void *ptr2)\n+{\n+  const limit_tuple *p1 = (const limit_tuple *)ptr1;\n+  const limit_tuple *p2 = (const limit_tuple *)ptr2;\n+\n+  if (p1->first < p2->first)\n+    return 1;\n+  else if (p1->first > p2->first)\n+    return -1;\n+  return 0;\n }\n \n static bool\n-dbg_cnt_set_limit_by_name (const char *name, int low, int high)\n+dbg_cnt_set_limit_by_index (enum debug_counter index, const char *name,\n+\t\t\t    unsigned int low, unsigned int high)\n {\n-  if (high < low)\n-    {\n-      error (\"%<-fdbg-cnt=%s:%d:%d%> has smaller upper limit than the lower\",\n-\t     name, low, high);\n-      return false;\n-    }\n+  if (!limits[index].exists ())\n+    limits[index].create (1);\n \n-  if (low < 0)\n+  limits[index].safe_push (limit_tuple (low, high));\n+  limits[index].qsort (cmp_tuples);\n+\n+  for (unsigned i = 0; i < limits[index].length () - 1; i++)\n     {\n-      error (\"Lower limit %d of %<-fdbg-cnt=%s%> must be a non-negative \"\n-\t     \"number\", low, name);\n-      return false;\n+      limit_tuple t1 = limits[index][i];\n+      limit_tuple t2 = limits[index][i + 1];\n+      if (t1.first <= t2.second)\n+\t{\n+\t  error (\"Interval overlap of %<-fdbg-cnt=%s%>: [%u, %u] and \"\n+\t\t \"[%u, %u]\\n\", name, t2.first, t2.second, t1.first, t1.second);\n+\t  return false;\n+\t}\n     }\n \n-  if (high < 0)\n+  return true;\n+}\n+\n+static bool\n+dbg_cnt_set_limit_by_name (const char *name, unsigned int low,\n+\t\t\t   unsigned int high)\n+{\n+  if (high < low)\n     {\n-      error (\"Upper limit %d of %<-fdbg-cnt=%s%> must be a non-negative \"\n-\t     \"number\", high, name);\n+      error (\"%<-fdbg-cnt=%s:%d-%d%> has smaller upper limit than the lower\",\n+\t     name, low, high);\n       return false;\n     }\n \n@@ -124,31 +151,27 @@ dbg_cnt_set_limit_by_name (const char *name, int low, int high)\n   if (i < 0)\n     return false;\n \n-  dbg_cnt_set_limit_by_index ((enum debug_counter) i, low, high);\n-  return true;\n+  return dbg_cnt_set_limit_by_index ((enum debug_counter) i, name, low, high);\n }\n \n-\n-/* Process a single \"name:value\" pair.\n+/* Process a single \"low:high\" pair.\n    Returns NULL if there's no valid pair is found.\n    Otherwise returns a pointer to the end of the pair. */\n \n static bool\n-dbg_cnt_process_single_pair (const char *arg)\n+dbg_cnt_process_single_pair (char *name, char *str)\n {\n-  char *str = xstrdup (arg);\n-  char *name = strtok (str, \":\");\n-  char *value1 = strtok (NULL, \":\");\n-  char *value2 = strtok (NULL, \":\");\n+  char *value1 = strtok (str, \"-\");\n+  char *value2 = strtok (NULL, \"-\");\n \n-  int high, low;\n+  unsigned int high, low;\n \n   if (value1 == NULL)\n     return false;\n \n   if (value2 == NULL)\n     {\n-      low = 0;\n+      low = 1;\n       high = strtol (value1, NULL, 10);\n     }\n   else\n@@ -166,17 +189,24 @@ dbg_cnt_process_opt (const char *arg)\n   char *str = xstrdup (arg);\n   unsigned int start = 0;\n \n-  auto_vec<const char *> tokens;\n-  for (const char *next = strtok (str, \",\"); next != NULL;\n-       next = strtok (NULL, \",\"))\n+  auto_vec<char *> tokens;\n+  for (char *next = strtok (str, \",\"); next != NULL; next = strtok (NULL, \",\"))\n     tokens.safe_push (next);\n \n   unsigned i;\n   for (i = 0; i < tokens.length (); i++)\n     {\n-     if (!dbg_cnt_process_single_pair (tokens[i]))\n-       break;\n-     start += strlen (tokens[i]) + 1;\n+      auto_vec<char *> ranges;\n+      char *name = strtok (tokens[i], \":\");\n+      for (char *part = strtok (NULL, \":\"); part; part = strtok (NULL, \":\"))\n+\tranges.safe_push (part);\n+\n+      for (unsigned j = 0; j < ranges.length (); j++)\n+\t{\n+\t  if (!dbg_cnt_process_single_pair (name, ranges[j]))\n+\t    break;\n+\t}\n+      start += strlen (tokens[i]) + 1;\n     }\n \n    if (i != tokens.length ())\n@@ -195,11 +225,23 @@ void\n dbg_cnt_list_all_counters (void)\n {\n   int i;\n-  printf (\"  %-32s %-11s %-12s\\n\", \"counter name\",  \"low limit\",\n-\t  \"high limit\");\n+  printf (\"  %-30s %s\\n\", \"counter name\", \"closed intervals\");\n   printf (\"-----------------------------------------------------------------\\n\");\n   for (i = 0; i < debug_counter_number_of_counters; i++)\n-    printf (\"  %-30s %11u %12u\\n\",\n-\t    map[i].name, limit_low[map[i].counter], limit_high[map[i].counter]);\n+    {\n+      printf (\"  %-30s \", map[i].name);\n+      if (limits[i].exists ())\n+\t{\n+\t  for (int j = limits[i].length () - 1; j >= 0; j--)\n+\t    {\n+\t      printf (\"[%u, %u]\", limits[i][j].first, limits[i][j].second);\n+\t      if (j > 0)\n+\t\tprintf (\", \");\n+\t    }\n+\t  putchar ('\\n');\n+\t}\n+      else\n+\tprintf (\"unset\\n\");\n+    }\n   printf (\"\\n\");\n }"}, {"sha": "a5a06262848a2a94da737b5b66bc3c9e0035291a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=83a49336c63889db05b75d05fe5b2794071da7aa", "patch": "@@ -15656,15 +15656,14 @@ Print the name and the counter upper bound for all debug counters.\n @item -fdbg-cnt=@var{counter-value-list}\n @opindex fdbg-cnt\n Set the internal debug counter lower and upper bound.  @var{counter-value-list}\n-is a comma-separated list of @var{name}:@var{lower_bound}:@var{upper_bound}\n-tuples which sets the lower and the upper bound of each debug\n-counter @var{name}.  The @var{lower_bound} is optional and is zero\n+is a comma-separated list of @var{name}:@var{lower_bound1}-@var{upper_bound1}\n+[:@var{lower_bound2}-@var{upper_bound2}...] tuples which sets\n+the name of the counter and list of closed intervals.\n+The @var{lower_bound} is optional and is zero\n initialized if not set.\n-All debug counters have the initial upper bound of @code{UINT_MAX};\n-thus @code{dbg_cnt} returns true always unless the upper bound\n-is set by this option.\n-For example, with @option{-fdbg-cnt=dce:2:4,tail_call:10},\n-@code{dbg_cnt(dce)} returns true only for third and fourth invocation.\n+For example, with @option{-fdbg-cnt=dce:2-4:10-11,tail_call:10},\n+@code{dbg_cnt(dce)} returns true only for second, third, fourth, tenth and\n+eleventh invocation.\n For @code{dbg_cnt(tail_call)} true is returned for first 10 invocations.\n \n @item -print-file-name=@var{library}"}, {"sha": "1993960909fc7e0489a39290b126c525b92aac5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83a49336c63889db05b75d05fe5b2794071da7aa", "patch": "@@ -1,3 +1,8 @@\n+2019-11-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/ipa/ipa-icf-39.c: Update -fdbg-cnt to the new format.\n+\t* gcc.dg/pr68766.c: Likewise.\n+\n 2019-11-13  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.c-torture/compile/flatten.c: New testcase."}, {"sha": "cf03894c4e7b83e135611487fe1968aefb16b81f", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-39.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-39.c?ref=83a49336c63889db05b75d05fe5b2794071da7aa", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-alias \"\" } */\n-/* { dg-options \"-O2 -fdump-ipa-icf-optimized -fmerge-all-constants -fdbg-cnt=merged_ipa_icf:1:3\"  } */\n-/* { dg-prune-output \"dbg_cnt 'merged_ipa_icf' set to 1-3\" } */\n+/* { dg-options \"-O2 -fdump-ipa-icf-optimized -fmerge-all-constants -fdbg-cnt=merged_ipa_icf:1-2\"  } */\n /* { dg-prune-output \"\\\\*\\\\*\\\\*dbgcnt:.*limit.*reached\" } */\n \n static int a;"}, {"sha": "82b54d4743b29c5b24d47a3b4536dd17882cbab6", "filename": "gcc/testsuite/gcc.dg/pr68766.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68766.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a49336c63889db05b75d05fe5b2794071da7aa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68766.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr68766.c?ref=83a49336c63889db05b75d05fe5b2794071da7aa", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -ftree-vectorize -fdbg-cnt=vect_loop:1\" } */\n /* { dg-additional-options \"-mavx2\" { target { i?86-*-* x86_64-*-* } } } */\n-/* { dg-prune-output \"dbg_cnt 'vect_loop' set to 0-1\" } */\n /* { dg-prune-output \"\\\\*\\\\*\\\\*dbgcnt:.*limit.*reached\" } */\n \n int a, b, g, h;"}]}