{"sha": "95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVlN2JiYjhkNjBjMjcyNWZmMmNkZDBjZGQ5ZjM1OTQyZGViYjU5OQ==", "commit": {"author": {"name": "Dmitry Vyukov", "email": "dvyukov@google.com", "date": "2015-12-04T18:27:54Z"}, "committer": {"name": "Dmitry Vyukov", "email": "dvyukov@gcc.gnu.org", "date": "2015-12-04T18:27:54Z"}, "message": "Add fuzzing coverage support\n\n\t* sancov.c: New file.\n\t* Makefile.in (OBJS): Add sancov.o.\n\t* invoke.texi (-fsanitize-coverage=trace-pc): Describe.\n\t* passes.def (sancov_pass): Add.\n\t* tree-pass.h  (sancov_pass): Add.\n\t* common.opt (-fsanitize-coverage=trace-pc): Add.\n\t* sanitizer.def (BUILT_IN_SANITIZER_COV_TRACE_PC): Add.\n\t* builtins.def (DEF_SANITIZER_BUILTIN): Enable for\n\tflag_sanitize_coverage.\n\nFrom-SVN: r231296", "tree": {"sha": "9be0f083fcd490b1940dc33ac1c11dc8d4632fd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9be0f083fcd490b1940dc33ac1c11dc8d4632fd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/comments", "author": {"login": "dvyukov", "id": 1095328, "node_id": "MDQ6VXNlcjEwOTUzMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1095328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dvyukov", "html_url": "https://github.com/dvyukov", "followers_url": "https://api.github.com/users/dvyukov/followers", "following_url": "https://api.github.com/users/dvyukov/following{/other_user}", "gists_url": "https://api.github.com/users/dvyukov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dvyukov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dvyukov/subscriptions", "organizations_url": "https://api.github.com/users/dvyukov/orgs", "repos_url": "https://api.github.com/users/dvyukov/repos", "events_url": "https://api.github.com/users/dvyukov/events{/privacy}", "received_events_url": "https://api.github.com/users/dvyukov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f58101cf288f731c7ca5598d14254940cd8d0e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58101cf288f731c7ca5598d14254940cd8d0e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f58101cf288f731c7ca5598d14254940cd8d0e8a"}], "stats": {"total": 235, "additions": 234, "deletions": 1}, "files": [{"sha": "62c6b96abc8914ca8a0893d870cafa644a9b1c77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -1,3 +1,15 @@\n+2015-12-04  Dmitry Vyukov  <dvyukov@google.com>\n+\n+\t* sancov.c: New file.\n+\t* Makefile.in (OBJS): Add sancov.o.\n+\t* invoke.texi (-fsanitize-coverage=trace-pc): Describe.\n+\t* passes.def (sancov_pass): Add.\n+\t* tree-pass.h  (sancov_pass): Add.\n+\t* common.opt (-fsanitize-coverage=trace-pc): Add.\n+\t* sanitizer.def (BUILT_IN_SANITIZER_COV_TRACE_PC): Add.\n+\t* builtins.def (DEF_SANITIZER_BUILTIN): Enable for\n+\tflag_sanitize_coverage.\n+\n 2015-12-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/65958"}, {"sha": "1f698798aa2df3f44d6b3a478bb4bf48e9fa7372", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -1427,6 +1427,7 @@ OBJS = \\\n \ttsan.o \\\n \tubsan.o \\\n \tsanopt.o \\\n+\tsancov.o \\\n \ttree-call-cdce.o \\\n \ttree-cfg.o \\\n \ttree-cfgcleanup.o \\\n@@ -2400,6 +2401,7 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/ubsan.c \\\n   $(srcdir)/tsan.c \\\n   $(srcdir)/sanopt.c \\\n+  $(srcdir)/sancov.c \\\n   $(srcdir)/ipa-devirt.c \\\n   $(srcdir)/internal-fn.h \\\n   @all_gtfiles@"}, {"sha": "238f38fd3dd129b34a5765ddf9553d13f0379734", "filename": "gcc/builtins.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -210,7 +210,8 @@ along with GCC; see the file COPYING3.  If not see\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,    \\\n \t       true, true, true, ATTRS, true, \\\n \t      (flag_sanitize & (SANITIZE_ADDRESS | SANITIZE_THREAD \\\n-\t\t\t\t| SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT)))\n+\t\t\t\t| SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT) \\\n+\t       || flag_sanitize_coverage))\n \n #undef DEF_CILKPLUS_BUILTIN\n #define DEF_CILKPLUS_BUILTIN(ENUM, NAME, TYPE, ATTRS)  \\"}, {"sha": "1de4c24fbc62280786c1be6eb2a5636aa56b9226", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -225,6 +225,11 @@ unsigned int flag_sanitize\n Variable\n unsigned int flag_sanitize_recover = SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT | SANITIZE_KERNEL_ADDRESS\n \n+fsanitize-coverage=trace-pc\n+Common Report Var(flag_sanitize_coverage)\n+Enable coverage-guided fuzzing code instrumentation.\n+Inserts call to __sanitizer_cov_trace_pc into every basic block.\n+\n ; Flag whether a prefix has been added to dump_base_name\n Variable\n bool dump_base_name_prefixed = false"}, {"sha": "52560313881039b2d26ccbda96afda7788bf3cc1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -6136,6 +6136,11 @@ a @code{libubsan} library routine.  The advantage of this is that the\n @code{libubsan} library is not needed and is not linked in, so this\n is usable even in freestanding environments.\n \n+@item -fsanitize-coverage=trace-pc\n+@opindex fsanitize-coverage=trace-pc\n+Enable coverage-guided fuzzing code instrumentation.\n+Inserts call to __sanitizer_cov_trace_pc into every basic block.\n+\n @item -fcheck-pointer-bounds\n @opindex fcheck-pointer-bounds\n @opindex fno-check-pointer-bounds"}, {"sha": "624d121fe47f6650879364c139f0c325bf4290de", "filename": "gcc/passes.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -237,6 +237,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_split_crit_edges);\n       NEXT_PASS (pass_pre);\n       NEXT_PASS (pass_sink_code);\n+      NEXT_PASS (pass_sancov);\n       NEXT_PASS (pass_asan);\n       NEXT_PASS (pass_tsan);\n       /* Pass group that runs when 1) enabled, 2) there are loops\n@@ -346,6 +347,7 @@ along with GCC; see the file COPYING3.  If not see\n          to forward object-size and builtin folding results properly.  */\n       NEXT_PASS (pass_copy_prop);\n       NEXT_PASS (pass_dce);\n+      NEXT_PASS (pass_sancov);\n       NEXT_PASS (pass_asan);\n       NEXT_PASS (pass_tsan);\n       /* ???  We do want some kind of loop invariant motion, but we possibly\n@@ -369,6 +371,7 @@ along with GCC; see the file COPYING3.  If not see\n   NEXT_PASS (pass_lower_vaarg);\n   NEXT_PASS (pass_lower_vector);\n   NEXT_PASS (pass_lower_complex_O0);\n+  NEXT_PASS (pass_sancov_O0);\n   NEXT_PASS (pass_asan_O0);\n   NEXT_PASS (pass_tsan_O0);\n   NEXT_PASS (pass_sanopt);"}, {"sha": "edc1fbcf31bcbef32e10ff2f474288dc4f16aabc", "filename": "gcc/sancov.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Fsancov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Fsancov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsancov.c?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -0,0 +1,108 @@\n+/* Code coverage instrumentation for fuzzing.\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+   Contributed by Dmitry Vyukov <dvyukov@google.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"backend.h\"\n+#include \"tree.h\"\n+#include \"gimple.h\"\n+#include \"basic-block.h\"\n+#include \"options.h\"\n+#include \"flags.h\"\n+#include \"stmt.h\"\n+#include \"gimple-iterator.h\"\n+#include \"tree-cfg.h\"\n+#include \"tree-pass.h\"\n+#include \"tree-iterator.h\"\n+#include \"asan.h\"\n+\n+namespace {\n+\n+unsigned\n+sancov_pass (function *fun)\n+{\n+  initialize_sanitizer_builtins ();\n+\n+  /* Insert callback into beginning of every BB. */\n+  tree fndecl = builtin_decl_implicit (BUILT_IN_SANITIZER_COV_TRACE_PC);\n+  basic_block bb;\n+  FOR_EACH_BB_FN (bb, fun)\n+    {\n+      gimple_stmt_iterator gsi = gsi_after_labels (bb);\n+      if (gsi_end_p (gsi))\n+\tcontinue;\n+      gimple *stmt = gsi_stmt (gsi);\n+      gimple *gcall = gimple_build_call (fndecl, 0);\n+      gimple_set_location (gcall, gimple_location (stmt));\n+      gsi_insert_before (&gsi, gcall, GSI_SAME_STMT);\n+    }\n+  return 0;\n+}\n+\n+template <bool O0> class pass_sancov : public gimple_opt_pass\n+{\n+public:\n+  pass_sancov (gcc::context *ctxt) : gimple_opt_pass (data, ctxt) {}\n+\n+  static const pass_data data;\n+  opt_pass *\n+  clone ()\n+  {\n+    return new pass_sancov<O0> (m_ctxt);\n+  }\n+  virtual bool\n+  gate (function *)\n+  {\n+    return flag_sanitize_coverage && (!O0 || !optimize);\n+  }\n+  virtual unsigned int\n+  execute (function *fun)\n+  {\n+    return sancov_pass (fun);\n+  }\n+}; // class pass_sancov\n+\n+template <bool O0>\n+const pass_data pass_sancov<O0>::data = {\n+  GIMPLE_PASS,\t\t       /* type */\n+  O0 ? \"sancov_O0\" : \"sancov\", /* name */\n+  OPTGROUP_NONE,\t       /* optinfo_flags */\n+  TV_NONE,\t\t       /* tv_id */\n+  (PROP_cfg),\t\t       /* properties_required */\n+  0,\t\t\t       /* properties_provided */\n+  0,\t\t\t       /* properties_destroyed */\n+  0,\t\t\t       /* todo_flags_start */\n+  TODO_update_ssa,\t     /* todo_flags_finish */\n+};\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_sancov (gcc::context *ctxt)\n+{\n+  return new pass_sancov<false> (ctxt);\n+}\n+\n+gimple_opt_pass *\n+make_pass_sancov_O0 (gcc::context *ctxt)\n+{\n+  return new pass_sancov<true> (ctxt);\n+}"}, {"sha": "2780dd95cf028458fd8208fd5256d7712cb38a10", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -510,3 +510,8 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS_ABORT,\n \t\t      \"__ubsan_handle_dynamic_type_cache_miss_abort\",\n \t\t      BT_FN_VOID_PTR_PTR_PTR,\n \t\t      ATTR_COLD_NOTHROW_LEAF_LIST)\n+\n+/* Sanitizer coverage */\n+DEF_SANITIZER_BUILTIN(BUILT_IN_SANITIZER_COV_TRACE_PC,\n+\t\t      \"__sanitizer_cov_trace_pc\",\n+\t\t      BT_FN_VOID, ATTR_NOTHROW_LEAF_LIST)"}, {"sha": "f566ed2cd4db1af1a37b45e37f0134b27049d4ce", "filename": "gcc/testsuite/gcc.dg/sancov/asan.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fasan.c?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -0,0 +1,18 @@\n+/* Test coverage/asan interaction:\n+     - coverage instruments __asan_init ctor (thus 4 covarage callbacks)\n+     - coverage does not instrument asan-emitted basic blocks\n+     - asan considers coverage callback as \"nonfreeing\" (thus 1 asan store\n+       callback.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize-coverage=trace-pc -fsanitize=address -fdump-tree-optimized\" } */\n+\n+void foo(volatile int *a, int *b)\n+{\n+  *a = 1;\n+  if (*b)\n+    *a = 2;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin___sanitizer_cov_trace_pc \\\\(\\\\)\" 4 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin___asan_report_load4 \\\\(\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin___asan_report_store4 \\\\(\" 1 \"optimized\" } } */"}, {"sha": "af69b2d12ed264578e3de35f2d7ac9a6b7fa9abd", "filename": "gcc/testsuite/gcc.dg/sancov/basic0.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fbasic0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fbasic0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fbasic0.c?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -0,0 +1,9 @@\n+/* Basic test on number of inserted callbacks.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize-coverage=trace-pc -fdump-tree-optimized\" } */\n+\n+void foo(void)\n+{\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin___sanitizer_cov_trace_pc \\\\(\\\\)\" 1 \"optimized\" } } */"}, {"sha": "e0ae5b4d7b70879ae04a08164e7e8e6ac5b084b9", "filename": "gcc/testsuite/gcc.dg/sancov/basic1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fbasic1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fbasic1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fbasic1.c?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -0,0 +1,12 @@\n+/* Basic test on number of inserted callbacks.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize-coverage=trace-pc -fdump-tree-optimized\" } */\n+\n+void foo (int *a, int *b, int *c)\n+{\n+  *a = 1;\n+  if (*b)\n+    *c = 2;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin___sanitizer_cov_trace_pc \\\\(\\\\)\" 3 \"optimized\" } } */"}, {"sha": "ac2ec785091553d127e606ad2194dd451e7848f9", "filename": "gcc/testsuite/gcc.dg/sancov/basic2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fbasic2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fbasic2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fbasic2.c?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -0,0 +1,14 @@\n+/* Basic test on number of inserted callbacks.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize-coverage=trace-pc -fdump-tree-optimized\" } */\n+\n+void foo(int *a, int *b, int *c, int *d)\n+{\n+  *a = 1;\n+  if (*b)\n+    *c = 2;\n+  else\n+    *d = 3;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin___sanitizer_cov_trace_pc \\\\(\\\\)\" 4 \"optimized\" } } */"}, {"sha": "e36d743a3cdb4e8759719f86384196ac4ae43f69", "filename": "gcc/testsuite/gcc.dg/sancov/sancov.exp", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fsancov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fsancov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsancov%2Fsancov.exp?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -0,0 +1,37 @@\n+# Copyright (C) 2015 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+load_lib gcc-dg.exp\n+load_lib torture-options.exp\n+\n+dg-init\n+torture-init\n+set-torture-options [list \\\n+\t{ -O0 } \\\n+\t{ -O1 } \\\n+\t{ -O2 } \\\n+\t{ -O3 } \\\n+\t{ -O0 -g } \\\n+\t{ -O1 -g } \\\n+\t{ -O2 -g } \\\n+\t{ -O3 -g } ]\n+\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c]] \"\" \"\"\n+\n+torture-finish\n+dg-finish"}, {"sha": "e1cbce923e43ec224c1349607f9c0710a910163e", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "patch": "@@ -351,6 +351,8 @@ extern gimple_opt_pass *make_pass_asan (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_asan_O0 (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_tsan (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_tsan_O0 (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_sancov (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_sancov_O0 (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_lower_cf (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_refactor_eh (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_lower_eh (gcc::context *ctxt);"}]}