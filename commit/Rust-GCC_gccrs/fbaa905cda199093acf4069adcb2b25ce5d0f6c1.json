{"sha": "fbaa905cda199093acf4069adcb2b25ce5d0f6c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJhYTkwNWNkYTE5OTA5M2FjZjQwNjlhZGNiMmIyNWNlNWQwZjZjMQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-09T19:21:11Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-09T19:21:11Z"}, "message": "fold-const.c (fold_unary, [...]): Take decomposed arguments, code, type, op0, and op1 in case of fold_binary.\n\n\t* fold-const.c (fold_unary, fold_binary): Take decomposed\n\targuments, code, type, op0, and op1 in case of fold_binary.\n\t(fold): Update calls to fold_unary and fold_binary.\n\nFrom-SVN: r96202", "tree": {"sha": "ebe7a797873997482f562ac91acebdcb152b0801", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebe7a797873997482f562ac91acebdcb152b0801"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbaa905cda199093acf4069adcb2b25ce5d0f6c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbaa905cda199093acf4069adcb2b25ce5d0f6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbaa905cda199093acf4069adcb2b25ce5d0f6c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbaa905cda199093acf4069adcb2b25ce5d0f6c1/comments", "author": null, "committer": null, "parents": [{"sha": "62ab45cc129875ec3baef6eea7d60c69d263d853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ab45cc129875ec3baef6eea7d60c69d263d853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62ab45cc129875ec3baef6eea7d60c69d263d853"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "e969a7b17af438594d06dad5c7e701db75b879bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbaa905cda199093acf4069adcb2b25ce5d0f6c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbaa905cda199093acf4069adcb2b25ce5d0f6c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbaa905cda199093acf4069adcb2b25ce5d0f6c1", "patch": "@@ -5,6 +5,10 @@\n \t(fold): Return the original tree when any of the functions\n \tmentioned above NULL_TREE.\n \n+\t* fold-const.c (fold_unary, fold_binary): Take decomposed\n+\targuments, code, type, op0, and op1 in case of fold_binary.\n+\t(fold): Update calls to fold_unary and fold_binary.\n+\n 2005-03-09  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (fold_builtin_unordered_cmp): Change prototype to take"}, {"sha": "6d099d9db9d69a98562d5609430d5ff551c9da96", "filename": "gcc/fold-const.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbaa905cda199093acf4069adcb2b25ce5d0f6c1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbaa905cda199093acf4069adcb2b25ce5d0f6c1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=fbaa905cda199093acf4069adcb2b25ce5d0f6c1", "patch": "@@ -6605,20 +6605,16 @@ fold_complex_div (tree type, tree ac, tree bc, enum tree_code code)\n    expression.  */\n \n static tree\n-fold_unary (tree expr)\n+fold_unary (enum tree_code code, tree type, tree op0)\n {\n-  const tree t = expr;\n-  const tree type = TREE_TYPE (expr);\n   tree tem;\n-  tree op0, arg0;\n-  enum tree_code code = TREE_CODE (t);\n+  tree arg0;\n   enum tree_code_class kind = TREE_CODE_CLASS (code);\n \n   gcc_assert (IS_EXPR_CODE_CLASS (kind)\n \t      && TREE_CODE_LENGTH (code) == 1);\n \n-\n-  arg0 = op0 = TREE_OPERAND (t, 0);\n+  arg0 = op0;\n   if (arg0)\n     {\n       if (code == NOP_EXPR || code == FLOAT_EXPR || code == CONVERT_EXPR)\n@@ -7022,15 +7018,11 @@ fold_unary (tree expr)\n    expression.  */\n \n static tree\n-fold_binary (tree expr)\n+fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n {\n-  const tree t = expr;\n-  const tree type = TREE_TYPE (expr);\n   tree t1 = NULL_TREE;\n   tree tem;\n-  tree op0, op1;\n   tree arg0 = NULL_TREE, arg1 = NULL_TREE;\n-  enum tree_code code = TREE_CODE (t);\n   enum tree_code_class kind = TREE_CODE_CLASS (code);\n \n   /* WINS will be nonzero when the switch is done\n@@ -7040,8 +7032,8 @@ fold_binary (tree expr)\n   gcc_assert (IS_EXPR_CODE_CLASS (kind)\n \t      && TREE_CODE_LENGTH (code) == 2);\n \n-  arg0 = op0 = TREE_OPERAND (t, 0);\n-  arg1 = op1 = TREE_OPERAND (t, 1);\n+  arg0 = op0;\n+  arg1 = op1;\n \n   if (arg0)\n     {\n@@ -9908,13 +9900,19 @@ fold (tree expr)\n \n   if (IS_EXPR_CODE_CLASS (kind))\n     {\n+      tree type = TREE_TYPE (t);\n+      tree op0, op1;\n+\n       switch (TREE_CODE_LENGTH (code))\n \t{\n \tcase 1:\n-\t  tem = fold_unary (expr);\n+\t  op0 = TREE_OPERAND (t, 0);\n+\t  tem = fold_unary (code, type, op0);\n \t  return tem ? tem : expr;\n \tcase 2:\n-\t  tem = fold_binary (expr);\n+\t  op0 = TREE_OPERAND (t, 0);\n+\t  op1 = TREE_OPERAND (t, 1);\n+\t  tem = fold_binary (code, type, op0, op1);\n \t  return tem ? tem : expr;\n \tcase 3:\n \t  tem = fold_ternary (expr);"}]}