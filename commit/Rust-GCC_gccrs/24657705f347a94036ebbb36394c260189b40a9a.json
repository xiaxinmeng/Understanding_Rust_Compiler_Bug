{"sha": "24657705f347a94036ebbb36394c260189b40a9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ2NTc3MDVmMzQ3YTk0MDM2ZWJiYjM2Mzk0YzI2MDE4OWI0MGE5YQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2007-10-15T13:56:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-10-15T13:56:46Z"}, "message": "sem_ch4.adb: Minor code and comment reformatting.\n\n2007-10-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch4.adb: Minor code and comment reformatting.\n\t(Analyze_Allocator): When the designated type of an unconstrained\n\tallocator is a record with unknown discriminants or an array with\n\tunknown range bounds, emit a detailed error message depending on the\n\tcompilation mode and whether the designated type is limited.\n\nFrom-SVN: r129334", "tree": {"sha": "4e5567f70f7c21cde224110746127276a38d77da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e5567f70f7c21cde224110746127276a38d77da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24657705f347a94036ebbb36394c260189b40a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24657705f347a94036ebbb36394c260189b40a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24657705f347a94036ebbb36394c260189b40a9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24657705f347a94036ebbb36394c260189b40a9a/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0501956d00279d9194fc417293f8601861fcd29a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0501956d00279d9194fc417293f8601861fcd29a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0501956d00279d9194fc417293f8601861fcd29a"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "818d576100aaadb4e2e204a029e7563766c85ee1", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24657705f347a94036ebbb36394c260189b40a9a/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24657705f347a94036ebbb36394c260189b40a9a/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=24657705f347a94036ebbb36394c260189b40a9a", "patch": "@@ -424,8 +424,8 @@ package body Sem_Ch4 is\n                   then\n                      Error_Msg_N (\"constraint not allowed here\", E);\n \n-                     if Nkind (Constraint (E))\n-                       = N_Index_Or_Discriminant_Constraint\n+                     if Nkind (Constraint (E)) =\n+                       N_Index_Or_Discriminant_Constraint\n                      then\n                         Error_Msg_N\n                           (\"\\if qualified expression was meant, \" &\n@@ -499,7 +499,7 @@ package body Sem_Ch4 is\n \n             --  Check for missing initialization. Skip this check if we already\n             --  had errors on analyzing the allocator, since in that case these\n-            --  are probably cascaded errors\n+            --  are probably cascaded errors.\n \n             if Is_Indefinite_Subtype (Type_Id)\n               and then Serious_Errors_Detected = Sav_Errs\n@@ -508,8 +508,44 @@ package body Sem_Ch4 is\n                   Error_Msg_N\n                     (\"initialization required in class-wide allocation\", N);\n                else\n-                  Error_Msg_N\n-                    (\"initialization required in unconstrained allocation\", N);\n+                  if Ada_Version < Ada_05\n+                    and then Is_Limited_Type (Type_Id)\n+                  then\n+                     Error_Msg_N (\"unconstrained allocation not allowed\", N);\n+\n+                     if Is_Array_Type (Type_Id) then\n+                        Error_Msg_N\n+                          (\"\\constraint with array bounds required\", N);\n+\n+                     elsif Has_Unknown_Discriminants (Type_Id) then\n+                        null;\n+\n+                     else pragma Assert (Has_Discriminants (Type_Id));\n+                        Error_Msg_N\n+                          (\"\\constraint with discriminant values required\", N);\n+                     end if;\n+\n+                  --  Limited Ada 2005 and general non-limited case\n+\n+                  else\n+                     Error_Msg_N\n+                       (\"uninitialized unconstrained allocation not allowed\",\n+                        N);\n+\n+                     if Is_Array_Type (Type_Id) then\n+                        Error_Msg_N\n+                          (\"\\qualified expression or constraint with \" &\n+                           \"array bounds required\", N);\n+\n+                     elsif Has_Unknown_Discriminants (Type_Id) then\n+                        Error_Msg_N (\"\\qualified expression required\", N);\n+\n+                     else pragma Assert (Has_Discriminants (Type_Id));\n+                        Error_Msg_N\n+                          (\"\\qualified expression or constraint with \" &\n+                           \"discriminant values required\", N);\n+                     end if;\n+                  end if;\n                end if;\n             end if;\n          end;\n@@ -3908,11 +3944,13 @@ package body Sem_Ch4 is\n       Actual           : Node_Id;\n       X                : Interp_Index;\n       It               : Interp;\n-      Success          : Boolean;\n       Err_Mode         : Boolean;\n       New_Nam          : Node_Id;\n       Void_Interp_Seen : Boolean := False;\n \n+      Success : Boolean;\n+      pragma Warnings (Off, Boolean);\n+\n    begin\n       if Ada_Version >= Ada_05 then\n          Actual := First_Actual (N);\n@@ -5148,9 +5186,11 @@ package body Sem_Ch4 is\n       Nam : Entity_Id;\n       Typ : Entity_Id) return Boolean\n    is\n-      Actual  : Node_Id;\n-      Formal  : Entity_Id;\n+      Actual : Node_Id;\n+      Formal : Entity_Id;\n+\n       Call_OK : Boolean;\n+      pragma Warnings (Off, Call_OK);\n \n    begin\n       Normalize_Actuals (N, Designated_Type (Typ), False, Call_OK);"}]}