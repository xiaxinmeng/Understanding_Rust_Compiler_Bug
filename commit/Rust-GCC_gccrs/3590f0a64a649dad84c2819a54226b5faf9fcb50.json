{"sha": "3590f0a64a649dad84c2819a54226b5faf9fcb50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU5MGYwYTY0YTY0OWRhZDg0YzI4MTlhNTQyMjZiNWZhZjlmY2I1MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-09-14T00:29:03Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-09-14T00:29:03Z"}, "message": "re PR c++/16716 (ICE in cp_parser_parse_and_diagnose_invalid_type_name)\n\n\tPR c++/16716\n\t* parser.c (cp_parser_parse_and_diagnose_invalid_type_name):\n\tRobustify.\n\n\tPR c++/17327\n\t* pt.c (unify): Add ENUMERAL_TYPE case.  Replace sorry with\n\tgcc_unreacable.\n\n\tPR c++/16716\n\t* g++.dg/parse/crash17.C: New test.\n\n\tPR c++/17327\n\t* g++.dg/template/enum3.C: New test.\n\nFrom-SVN: r87467", "tree": {"sha": "9e8aa45a4505b9e993c796f41e14d74020abf258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e8aa45a4505b9e993c796f41e14d74020abf258"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3590f0a64a649dad84c2819a54226b5faf9fcb50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3590f0a64a649dad84c2819a54226b5faf9fcb50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3590f0a64a649dad84c2819a54226b5faf9fcb50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3590f0a64a649dad84c2819a54226b5faf9fcb50/comments", "author": null, "committer": null, "parents": [{"sha": "86620a426faae66239e1f483dabdb900dc8ae051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86620a426faae66239e1f483dabdb900dc8ae051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86620a426faae66239e1f483dabdb900dc8ae051"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "010320136ddc4141938070ff7fdb259216a1cfae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3590f0a64a649dad84c2819a54226b5faf9fcb50/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3590f0a64a649dad84c2819a54226b5faf9fcb50/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3590f0a64a649dad84c2819a54226b5faf9fcb50", "patch": "@@ -1,3 +1,13 @@\n+2004-09-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/16716\n+\t* parser.c (cp_parser_parse_and_diagnose_invalid_type_name):\n+\tRobustify.\n+\n+\tPR c++/17327\n+\t* pt.c (unify): Add ENUMERAL_TYPE case.  Replace sorry with\n+\tgcc_unreacable.\n+\n 2004-09-12  Richard Henderson  <rth@redhat.com>\n \n \tPR c++/16254"}, {"sha": "6ac5c717d3f21be9fb3f176ba7d20a5aa2b368e6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3590f0a64a649dad84c2819a54226b5faf9fcb50/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3590f0a64a649dad84c2819a54226b5faf9fcb50/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3590f0a64a649dad84c2819a54226b5faf9fcb50", "patch": "@@ -2286,13 +2286,10 @@ cp_parser_parse_and_diagnose_invalid_type_name (cp_parser *parser)\n       cp_parser_abort_tentative_parse (parser);\n       return false;\n     }\n-  if (!cp_parser_parse_definitely (parser))\n+  if (!cp_parser_parse_definitely (parser)\n+      || TREE_CODE (id) != IDENTIFIER_NODE)\n     return false;\n \n-  /* If we got here, this cannot be a valid variable declaration, thus\n-     the cp_parser_id_expression must have resolved to a plain identifier\n-     node (not a TYPE_DECL or TEMPLATE_ID_EXPR).  */\n-  gcc_assert (TREE_CODE (id) == IDENTIFIER_NODE);\n   /* Emit a diagnostic for the invalid type.  */\n   cp_parser_diagnose_invalid_type_name (parser, parser->scope, id);\n   /* Skip to the end of the declaration; there's no point in"}, {"sha": "90efa06d7cc4ffd38fc4c6556ee5d9c745762cc4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3590f0a64a649dad84c2819a54226b5faf9fcb50/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3590f0a64a649dad84c2819a54226b5faf9fcb50/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3590f0a64a649dad84c2819a54226b5faf9fcb50", "patch": "@@ -9975,6 +9975,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n     case VECTOR_TYPE:\n     case INTEGER_TYPE:\n     case BOOLEAN_TYPE:\n+    case ENUMERAL_TYPE:\n     case VOID_TYPE:\n       if (TREE_CODE (arg) != TREE_CODE (parm))\n \treturn 1;\n@@ -10136,10 +10137,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t  else\n \t    return 0;\n \t}\n-      else\n-\tsorry (\"use of `%s' in template type unification\",\n-\t       tree_code_name [(int) TREE_CODE (parm)]);\n-\n+      gcc_unreachable ();\n       return 1;\n     }\n }"}, {"sha": "f81a893348c6433ed1f5a3b27267eed1a78c6bd4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3590f0a64a649dad84c2819a54226b5faf9fcb50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3590f0a64a649dad84c2819a54226b5faf9fcb50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3590f0a64a649dad84c2819a54226b5faf9fcb50", "patch": "@@ -1,3 +1,11 @@\n+2004-09-13  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/16716\n+\t* g++.dg/parse/crash17.C: New test.\n+\t\n+\tPR c++/17327\n+\t* g++.dg/template/enum3.C: New test.\n+\n 2004-09-13  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* lib/gcc-defs.exp: Load wrapper.exp."}, {"sha": "bdc66399f274ed08ba6d46bdf4c918f2430d9b92", "filename": "gcc/testsuite/g++.dg/parse/crash17.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3590f0a64a649dad84c2819a54226b5faf9fcb50/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3590f0a64a649dad84c2819a54226b5faf9fcb50/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash17.C?ref=3590f0a64a649dad84c2819a54226b5faf9fcb50", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/16716\n+\n+template <typename> class allocator; \n+ \n+template<typename T> class vector { \n+  // With the dg-error on the next line, we are really just trying to\n+  // check that the message is not an ICE message.\n+  typedef typename allocator<T> allocator_type; // { dg-error \"expected|forbids\" }\n+}; "}, {"sha": "b248d788c50e54c927a54658e169174034196c64", "filename": "gcc/testsuite/g++.dg/template/enum3.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3590f0a64a649dad84c2819a54226b5faf9fcb50/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3590f0a64a649dad84c2819a54226b5faf9fcb50/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fenum3.C?ref=3590f0a64a649dad84c2819a54226b5faf9fcb50", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/17327\n+\n+enum E { E0, E1 };\n+template <class T,class U> class A {};\n+template <class T> void f(A<E,T>) {}\n+// We used to issue a \"sorry\" message.  By using an explicit error\n+// message below, we make sure that we will not match \"sorry\".\n+template void f(A<int,E>); // { dg-error \"template-id\" }"}]}