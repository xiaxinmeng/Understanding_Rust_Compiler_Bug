{"sha": "4640884658bae7ba9ff09068efcbe4b7e94baf8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY0MDg4NDY1OGJhZTdiYTlmZjA5MDY4ZWZjYmU0YjdlOTRiYWY4ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-06-30T00:50:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-06-30T00:50:45Z"}, "message": "class.c (type_has_virtual_destructor): New.\n\n\t* class.c (type_has_virtual_destructor): New.\n\t* cp-tree.h: Declare it.\n\t* semantics.c (trait_expr_value): Use it.\n\n\t* call.c (build_over_call): Only give warnings with tf_warning.\n\n\t* name-lookup.c (pop_scope): Handle NULL_TREE.\n\nFrom-SVN: r161578", "tree": {"sha": "85c05d67287f91a060fe0e69e71f48258e217270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85c05d67287f91a060fe0e69e71f48258e217270"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4640884658bae7ba9ff09068efcbe4b7e94baf8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4640884658bae7ba9ff09068efcbe4b7e94baf8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4640884658bae7ba9ff09068efcbe4b7e94baf8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4640884658bae7ba9ff09068efcbe4b7e94baf8d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "066ec0a4a0c12148352889d7d26a2975960d5571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/066ec0a4a0c12148352889d7d26a2975960d5571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/066ec0a4a0c12148352889d7d26a2975960d5571"}], "stats": {"total": 96, "additions": 85, "deletions": 11}, "files": [{"sha": "bc02bd02c43567932786f7ae712c010737eacff3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4640884658bae7ba9ff09068efcbe4b7e94baf8d", "patch": "@@ -1,5 +1,13 @@\n 2010-06-29  Jason Merrill  <jason@redhat.com>\n \n+\t* class.c (type_has_virtual_destructor): New.\n+\t* cp-tree.h: Declare it.\n+\t* semantics.c (trait_expr_value): Use it.\n+\n+\t* call.c (build_over_call): Only give warnings with tf_warning.\n+\n+\t* name-lookup.c (pop_scope): Handle NULL_TREE.\n+\n \t* cp-tree.h (TYPE_HAS_ASSIGN_REF): Rename to TYPE_HAS_COPY_ASSIGN.\n \t(TYPE_HAS_CONST_ASSIGN_REF): Rename to TYPE_HAS_CONST_COPY_ASSIGN.\n \t(TYPE_HAS_INIT_REF): Rename to TYPE_HAS_COPY_CTOR."}, {"sha": "852c7ea983eec0ee386967e5987bf02200513af7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4640884658bae7ba9ff09068efcbe4b7e94baf8d", "patch": "@@ -5600,7 +5600,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n     }\n \n   /* Give any warnings we noticed during overload resolution.  */\n-  if (cand->warnings)\n+  if (cand->warnings && (complain & tf_warning))\n     {\n       struct candidate_warning *w;\n       for (w = cand->warnings; w; w = w->next)"}, {"sha": "bfd311382e1d64b09d670fc4d2d9f0b62a6906b3", "filename": "gcc/cp/class.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4640884658bae7ba9ff09068efcbe4b7e94baf8d", "patch": "@@ -3838,7 +3838,9 @@ check_methods (tree t)\n \t  if (DECL_PURE_VIRTUAL_P (x))\n \t    VEC_safe_push (tree, gc, CLASSTYPE_PURE_VIRTUALS (t), x);\n \t}\n-      /* All user-provided destructors are non-trivial.  */\n+      /* All user-provided destructors are non-trivial.\n+         Constructors and assignment ops are handled in\n+\t grok_special_member_properties.  */\n       if (DECL_DESTRUCTOR_P (x) && user_provided_p (x))\n \tTYPE_HAS_NONTRIVIAL_DESTRUCTOR (t) = 1;\n     }\n@@ -4260,6 +4262,21 @@ type_has_user_provided_default_constructor (tree t)\n   return false;\n }\n \n+/* Returns true iff class TYPE has a virtual destructor.  */\n+\n+bool\n+type_has_virtual_destructor (tree type)\n+{\n+  tree dtor;\n+\n+  if (!CLASS_TYPE_P (type))\n+    return false;\n+\n+  gcc_assert (COMPLETE_TYPE_P (type));\n+  dtor = CLASSTYPE_DESTRUCTORS (type);\n+  return (dtor && DECL_VIRTUAL_P (dtor));\n+}\n+\n /* Remove all zero-width bit-fields from T.  */\n \n static void"}, {"sha": "bfdf036f2aa39ac3b063e3bd82e3fcedcd7af6e2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4640884658bae7ba9ff09068efcbe4b7e94baf8d", "patch": "@@ -4655,6 +4655,7 @@ extern tree in_class_defaulted_default_constructor (tree);\n extern bool user_provided_p\t\t\t(tree);\n extern bool type_has_user_provided_constructor  (tree);\n extern bool type_has_user_provided_default_constructor (tree);\n+extern bool type_has_virtual_destructor\t\t(tree);\n extern void defaulted_late_check\t\t(tree);\n extern bool defaultable_fn_check\t\t(tree);\n extern void fixup_type_variants\t\t\t(tree);\n@@ -5280,6 +5281,7 @@ extern bool pod_type_p\t\t\t\t(const_tree);\n extern bool layout_pod_type_p\t\t\t(const_tree);\n extern bool std_layout_type_p\t\t\t(const_tree);\n extern bool trivial_type_p\t\t\t(const_tree);\n+extern bool trivially_copyable_p\t\t(const_tree);\n extern bool type_has_nontrivial_default_init\t(const_tree);\n extern bool type_has_nontrivial_copy_init\t(const_tree);\n extern bool class_tmpl_impl_spec_p\t\t(const_tree);"}, {"sha": "0c2f7e5726668f1a31efef9d2468b2434737bd85", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4640884658bae7ba9ff09068efcbe4b7e94baf8d", "patch": "@@ -10295,6 +10295,7 @@ grok_special_member_properties (tree decl)\n \t    TYPE_HAS_CONST_COPY_ASSIGN (class_type) = 1;\n \t}\n     }\n+  /* Destructors are handled in check_methods.  */\n }\n \n /* Check a constructor DECL has the correct form.  Complains"}, {"sha": "67131190305cec7d0b1b643748b2129292456f0e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=4640884658bae7ba9ff09068efcbe4b7e94baf8d", "patch": "@@ -2480,6 +2480,8 @@ push_scope (tree t)\n void\n pop_scope (tree t)\n {\n+  if (t == NULL_TREE)\n+    return;\n   if (TREE_CODE (t) == NAMESPACE_DECL)\n     pop_decl_namespace ();\n   else if CLASS_TYPE_P (t)"}, {"sha": "adc5e7fe6ba783386c8ee5dada75d26b50b5c953", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4640884658bae7ba9ff09068efcbe4b7e94baf8d", "patch": "@@ -5104,8 +5104,7 @@ trait_expr_value (cp_trait_kind kind, tree type1, tree type2)\n \t\t  && TYPE_HAS_TRIVIAL_DESTRUCTOR (type1)));\n \n     case CPTK_HAS_VIRTUAL_DESTRUCTOR:\n-      return (CLASS_TYPE_P (type1)\n-\t      && (t = locate_dtor (type1, NULL)) && DECL_VIRTUAL_P (t));\n+      return type_has_virtual_destructor (type1);\n \n     case CPTK_IS_ABSTRACT:\n       return (CLASS_TYPE_P (type1) && CLASSTYPE_PURE_VIRTUALS (type1));"}, {"sha": "72369244b4320ad67edc9a121da0af9bacf6f237", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4640884658bae7ba9ff09068efcbe4b7e94baf8d", "patch": "@@ -2381,22 +2381,37 @@ type_has_nontrivial_copy_init (const_tree t)\n     return 0;\n }\n \n-/* Returns 1 iff type T is a trivial type, as defined in [basic.types].  */\n+/* Returns 1 iff type T is a trivially copyable type, as defined in\n+   [basic.types] and [class].  */\n \n bool\n-trivial_type_p (const_tree t)\n+trivially_copyable_p (const_tree t)\n {\n   t = strip_array_types (CONST_CAST_TREE (t));\n \n   if (CLASS_TYPE_P (t))\n-    return (TYPE_HAS_TRIVIAL_DFLT (t)\n-\t    && TYPE_HAS_TRIVIAL_COPY_CTOR (t)\n+    return (TYPE_HAS_TRIVIAL_COPY_CTOR (t)\n \t    && TYPE_HAS_TRIVIAL_COPY_ASSIGN (t)\n \t    && TYPE_HAS_TRIVIAL_DESTRUCTOR (t));\n   else\n     return scalarish_type_p (t);\n }\n \n+/* Returns 1 iff type T is a trivial type, as defined in [basic.types] and\n+   [class].  */\n+\n+bool\n+trivial_type_p (const_tree t)\n+{\n+  t = strip_array_types (CONST_CAST_TREE (t));\n+\n+  if (CLASS_TYPE_P (t))\n+    return (TYPE_HAS_TRIVIAL_DFLT (t)\n+\t    && trivially_copyable_p (t));\n+  else\n+    return scalarish_type_p (t);\n+}\n+\n /* Returns 1 iff type T is a POD type, as defined in [basic.types].  */\n \n bool"}, {"sha": "2d1aa2d74ed0fcc4ebee52e755a6ef75fc4fc105", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4640884658bae7ba9ff09068efcbe4b7e94baf8d", "patch": "@@ -1,3 +1,10 @@\n+2010-06-29  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/defaulted19.C: New.\n+\n+\t* g++.dg/expr/string-1.C: Fix for -std=c++0x.\n+\t* g++.dg/template/error23.C: Fix for -std=c++0x.\n+\n 2010-06-29  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/44718"}, {"sha": "ea33df39838e1e71d0f834095ba399ef13947c4f", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted19.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted19.C?ref=4640884658bae7ba9ff09068efcbe4b7e94baf8d", "patch": "@@ -0,0 +1,21 @@\n+// We allocate a cookie to help us run the destructor even if it's deleted.\n+// { dg-options -std=c++0x }\n+// { dg-do run }\n+\n+struct A\n+{\n+  ~A() = delete;\n+};\n+\n+void *p = 0;\n+void *operator new[](__SIZE_TYPE__ t)\n+{\n+  p = ::operator new (t);\n+  return p;\n+}\n+\n+int main()\n+{\n+  A* ap = new A[5];\n+  return ap == p;\n+}"}, {"sha": "9a0a5ff7b4596505b9ca8b0c3ce79cc06b426144", "filename": "gcc/testsuite/g++.dg/expr/string-1.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstring-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstring-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstring-1.C?ref=4640884658bae7ba9ff09068efcbe4b7e94baf8d", "patch": "@@ -1,9 +1,11 @@\n // { dg-do compile }\n // This testcase used to seg fault (PR c++/38648)\n \n+// { dg-prune-output \"initializer lists\" }\n+\n char a[1];\n \n-int foo( // { dg-error \"extended initializer lists only available\" }\n+int foo(\n {\n   a = \"\"; // { dg-error \"\" }\n   return 0; // { dg-error \"\" }"}, {"sha": "f21d8d9d07c9954836ce6c83d59a25ecca79810b", "filename": "gcc/testsuite/g++.dg/template/error23.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4640884658bae7ba9ff09068efcbe4b7e94baf8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror23.C?ref=4640884658bae7ba9ff09068efcbe4b7e94baf8d", "patch": "@@ -8,10 +8,10 @@ struct nullptr_type {\n   operator T* ( void ) const {\n     return ( 0 );\n   }\n-} const nullptr;\n+} const nullptr_ob;\n \n int main ( void ) {\n-  0 == nullptr; // { dg-error \"match\" }\n+  0 == nullptr_ob; // { dg-error \"match\" }\n }\n \n "}]}