{"sha": "727987844249aafe00ffaf7a8030564c1f731607", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI3OTg3ODQ0MjQ5YWFmZTAwZmZhZjdhODAzMDU2NGMxZjczMTYwNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-04-14T11:48:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-04-14T11:48:22Z"}, "message": "tree-switch-conversion.c (lshift_cheap_p): Get speed_p as argument.\n\n2014-04-14  Richard Biener  <rguenther@suse.de>\n\n\t* tree-switch-conversion.c (lshift_cheap_p): Get speed_p\n\tas argument.\n\t(expand_switch_using_bit_tests_p): Likewise.\n\t(process_switch): Compute and pass on speed_p based on the\n\tswitch stmt.\n\t* tree-ssa-math-opts.c (gimple_expand_builtin_pow): Use\n\toptimize_bb_for_speed_p.\n\nFrom-SVN: r209364", "tree": {"sha": "f84d71d3dd776681297695f30004e73b68bd9c62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f84d71d3dd776681297695f30004e73b68bd9c62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/727987844249aafe00ffaf7a8030564c1f731607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727987844249aafe00ffaf7a8030564c1f731607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/727987844249aafe00ffaf7a8030564c1f731607", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727987844249aafe00ffaf7a8030564c1f731607/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15b59794635b6d6b3ebdda6bbc7f32d801118f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15b59794635b6d6b3ebdda6bbc7f32d801118f6"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "61e0e21512515bc02bfa4f4c2ca2dfa69690480c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727987844249aafe00ffaf7a8030564c1f731607/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727987844249aafe00ffaf7a8030564c1f731607/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=727987844249aafe00ffaf7a8030564c1f731607", "patch": "@@ -1,3 +1,13 @@\n+2014-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-switch-conversion.c (lshift_cheap_p): Get speed_p\n+\tas argument.\n+\t(expand_switch_using_bit_tests_p): Likewise.\n+\t(process_switch): Compute and pass on speed_p based on the\n+\tswitch stmt.\n+\t* tree-ssa-math-opts.c (gimple_expand_builtin_pow): Use\n+\toptimize_bb_for_speed_p.\n+\n 2014-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* cfgloop.h (struct loop): Rename force_vect into force_vectorize."}, {"sha": "63aba8e546877ca74385a49e79a83585df81d49d", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727987844249aafe00ffaf7a8030564c1f731607/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727987844249aafe00ffaf7a8030564c1f731607/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=727987844249aafe00ffaf7a8030564c1f731607", "patch": "@@ -1162,7 +1162,7 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n   if (c_is_int\n       && ((n >= -1 && n <= 2)\n \t  || (flag_unsafe_math_optimizations\n-\t      && optimize_insn_for_speed_p ()\n+\t      && optimize_bb_for_speed_p (gsi_bb (*gsi))\n \t      && powi_cost (n) <= POWI_MAX_MULTS)))\n     return gimple_expand_builtin_powi (gsi, loc, arg0, n);\n "}, {"sha": "5540ed38a858b20f44eee86fbace101cd29ebf16", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/727987844249aafe00ffaf7a8030564c1f731607/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/727987844249aafe00ffaf7a8030564c1f731607/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=727987844249aafe00ffaf7a8030564c1f731607", "patch": "@@ -130,21 +130,18 @@ hoist_edge_and_branch_if_true (gimple_stmt_iterator *gsip,\n    This function (and similar RTL-related cost code in e.g. IVOPTS) should\n    be moved to some kind of interface file for GIMPLE/RTL interactions.  */\n static bool\n-lshift_cheap_p (void)\n+lshift_cheap_p (bool speed_p)\n {\n   /* FIXME: This should be made target dependent via this \"this_target\"\n      mechanism, similar to e.g. can_copy_init_p in gcse.c.  */\n   static bool init[2] = {false, false};\n   static bool cheap[2] = {true, true};\n-  bool speed_p;\n \n   /* If the targer has no lshift in word_mode, the operation will most\n      probably not be cheap.  ??? Does GCC even work for such targets?  */\n   if (optab_handler (ashl_optab, word_mode) == CODE_FOR_nothing)\n     return false;\n \n-  speed_p = optimize_insn_for_speed_p ();\n-\n   if (!init[speed_p])\n     {\n       rtx reg = gen_raw_REG (word_mode, 10000);\n@@ -165,12 +162,12 @@ lshift_cheap_p (void)\n static bool\n expand_switch_using_bit_tests_p (tree range,\n \t\t\t\t unsigned int uniq,\n-\t\t\t\t unsigned int count)\n+\t\t\t\t unsigned int count, bool speed_p)\n {\n   return (((uniq == 1 && count >= 3)\n \t   || (uniq == 2 && count >= 5)\n \t   || (uniq == 3 && count >= 6))\n-\t  && lshift_cheap_p ()\n+\t  && lshift_cheap_p (speed_p)\n \t  && compare_tree_int (range, GET_MODE_BITSIZE (word_mode)) < 0\n \t  && compare_tree_int (range, 0) > 0);\n }\n@@ -1357,7 +1354,9 @@ process_switch (gimple swtch)\n   if (info.uniq <= MAX_CASE_BIT_TESTS)\n     {\n       if (expand_switch_using_bit_tests_p (info.range_size,\n-\t\t\t\t\t   info.uniq, info.count))\n+\t\t\t\t\t   info.uniq, info.count,\n+\t\t\t\t\t   optimize_bb_for_speed_p\n+\t\t\t\t\t     (gimple_bb (swtch))))\n \t{\n \t  if (dump_file)\n \t    fputs (\"  expanding as bit test is preferable\\n\", dump_file);"}]}