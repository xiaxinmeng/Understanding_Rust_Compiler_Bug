{"sha": "c990877a412109c1e7eac6506239a27ab309051f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk5MDg3N2E0MTIxMDljMWU3ZWFjNjUwNjIzOWEyN2FiMzA5MDUxZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-12-14T01:36:11Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-14T01:36:11Z"}, "message": "compiler: Move import of Go export data to gcc side of interface.\n\n\t* go-backend.c: #include \"simple-object.h\" and \"intl.h\".\n\t(GO_EXPORT_SEGMENT_NAME): Define if not defined.\n\t(GO_EXPORT_SECTION_NAME): Likewise.\n\t(go_write_export_data): Use GO_EXPORT_SECTION_NAME.\n\t(go_read_export_data): New function.\n\t* go-c.h (go_read_export_data): Declare.\n\nFrom-SVN: r182321", "tree": {"sha": "017c5531c568d8f5cbcec96d54dfb41febb26294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/017c5531c568d8f5cbcec96d54dfb41febb26294"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c990877a412109c1e7eac6506239a27ab309051f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c990877a412109c1e7eac6506239a27ab309051f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c990877a412109c1e7eac6506239a27ab309051f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c990877a412109c1e7eac6506239a27ab309051f/comments", "author": null, "committer": null, "parents": [{"sha": "6fdc547369f2ae57120d8fa1eb91cbff24374a21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fdc547369f2ae57120d8fa1eb91cbff24374a21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fdc547369f2ae57120d8fa1eb91cbff24374a21"}], "stats": {"total": 158, "additions": 120, "deletions": 38}, "files": [{"sha": "9b17bf4b2341eea391b66ee5a50eb08ab2323083", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c990877a412109c1e7eac6506239a27ab309051f/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c990877a412109c1e7eac6506239a27ab309051f/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=c990877a412109c1e7eac6506239a27ab309051f", "patch": "@@ -1,3 +1,12 @@\n+2011-12-13  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-backend.c: #include \"simple-object.h\" and \"intl.h\".\n+\t(GO_EXPORT_SEGMENT_NAME): Define if not defined.\n+\t(GO_EXPORT_SECTION_NAME): Likewise.\n+\t(go_write_export_data): Use GO_EXPORT_SECTION_NAME.\n+\t(go_read_export_data): New function.\n+\t* go-c.h (go_read_export_data): Declare.\n+\n 2011-11-29  Sanjoy Das  <thedigitalangel@gmail.com>\n \t    Ian Lance Taylor  <iant@google.com>\n "}, {"sha": "4d1ea827c5e2fe3a9c66adbc8c28e9366b6d37a5", "filename": "gcc/go/go-backend.c", "status": "modified", "additions": 95, "deletions": 2, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c990877a412109c1e7eac6506239a27ab309051f/gcc%2Fgo%2Fgo-backend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c990877a412109c1e7eac6506239a27ab309051f/gcc%2Fgo%2Fgo-backend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-backend.c?ref=c990877a412109c1e7eac6506239a27ab309051f", "patch": "@@ -20,16 +20,31 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"simple-object.h\"\n #include \"tm.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"tm_p.h\"\n+#include \"intl.h\"\n #include \"output.h\"\n #include \"target.h\"\n #include \"common/common-target.h\"\n \n #include \"go-c.h\"\n \n+/* The segment name we pass to simple_object_start_read to find Go\n+   export data.  */\n+\n+#ifndef GO_EXPORT_SEGMENT_NAME\n+#define GO_EXPORT_SEGMENT_NAME \"__GNU_GO\"\n+#endif\n+\n+/* The section name we use when reading and writing export data.  */\n+\n+#ifndef GO_EXPORT_SECTION_NAME\n+#define GO_EXPORT_SECTION_NAME \".go_export\"\n+#endif\n+\n /* This file holds all the cases where the Go frontend needs\n    information from gcc's backend.  */\n \n@@ -95,7 +110,7 @@ go_imported_unsafe (void)\n }\n \n /* This is called by the Go frontend proper to add data to the\n-   .go_export section.  */\n+   section containing Go export data.  */\n \n void\n go_write_export_data (const char *bytes, unsigned int size)\n@@ -105,9 +120,87 @@ go_write_export_data (const char *bytes, unsigned int size)\n   if (sec == NULL)\n     {\n       gcc_assert (targetm_common.have_named_sections);\n-      sec = get_section (\".go_export\", SECTION_DEBUG, NULL);\n+      sec = get_section (GO_EXPORT_SECTION_NAME, SECTION_DEBUG, NULL);\n     }\n \n   switch_to_section (sec);\n   assemble_string (bytes, size);\n }\n+\n+/* The go_read_export_data function is called by the Go frontend\n+   proper to read Go export data from an object file.  FD is a file\n+   descriptor open for reading.  OFFSET is the offset within the file\n+   where the object file starts; this will be 0 except when reading an\n+   archive.  On success this returns NULL and sets *PBUF to a buffer\n+   allocated using malloc, of size *PLEN, holding the export data.  If\n+   the data is not found, this returns NULL and sets *PBUF to NULL and\n+   *PLEN to 0.  If some error occurs, this returns an error message\n+   and sets *PERR to an errno value or 0 if there is no relevant\n+   errno.  */\n+\n+const char *\n+go_read_export_data (int fd, off_t offset, char **pbuf, size_t *plen,\n+\t\t     int *perr)\n+{\n+  simple_object_read *sobj;\n+  const char *errmsg;\n+  off_t sec_offset;\n+  off_t sec_length;\n+  int found;\n+  char *buf;\n+  ssize_t c;\n+\n+  *pbuf = NULL;\n+  *plen = 0;\n+\n+  sobj = simple_object_start_read (fd, offset, GO_EXPORT_SEGMENT_NAME,\n+\t\t\t\t   &errmsg, perr);\n+  if (sobj == NULL)\n+    {\n+      /* If we get an error here, just pretend that we didn't find any\n+\t export data.  This is the right thing to do if the error is\n+\t that the file was not recognized as an object file.  This\n+\t will ignore file I/O errors, but it's not too big a deal\n+\t because we will wind up giving some other error later.  */\n+      return NULL;\n+    }\n+\n+  found = simple_object_find_section (sobj, GO_EXPORT_SECTION_NAME,\n+\t\t\t\t      &sec_offset, &sec_length,\n+\t\t\t\t      &errmsg, perr);\n+  simple_object_release_read (sobj);\n+  if (!found)\n+    return errmsg;\n+\n+  if (lseek (fd, offset + sec_offset, SEEK_SET) < 0)\n+    {\n+      *perr = errno;\n+      return _(\"lseek failed while reading export data\");\n+    }\n+\n+  buf = XNEWVEC (char, sec_length);\n+  if (buf == NULL)\n+    {\n+      *perr = errno;\n+      return _(\"memory allocation failed while reading export data\");\n+    }\n+\n+  c = read (fd, buf, sec_length);\n+  if (c < 0)\n+    {\n+      *perr = errno;\n+      free (buf);\n+      return _(\"read failed while reading export data\");\n+    }\n+\n+  if (c < sec_length)\n+    {\n+      free (buf);\n+      return _(\"short read while reading export data\");\n+    }\n+\n+  *pbuf = buf;\n+  *plen = sec_length;\n+\n+  return NULL;\n+}"}, {"sha": "5e65dead72e567e19faf0abe6fa5f441a2b311eb", "filename": "gcc/go/go-c.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c990877a412109c1e7eac6506239a27ab309051f/gcc%2Fgo%2Fgo-c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c990877a412109c1e7eac6506239a27ab309051f/gcc%2Fgo%2Fgo-c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-c.h?ref=c990877a412109c1e7eac6506239a27ab309051f", "patch": "@@ -69,6 +69,8 @@ extern void go_imported_unsafe (void);\n \n extern void go_write_export_data (const char *, unsigned int);\n \n+extern const char *go_read_export_data (int, off_t, char **, size_t *, int *);\n+\n #if defined(__cplusplus) && !defined(ENABLE_BUILD_WITH_CXX)\n } /* End extern \"C\".  */\n #endif"}, {"sha": "a62069e8e23ce724b0e7c53abb5e7546b2e404c6", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 12, "deletions": 34, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c990877a412109c1e7eac6506239a27ab309051f/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c990877a412109c1e7eac6506239a27ab309051f/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=c990877a412109c1e7eac6506239a27ab309051f", "patch": "@@ -215,46 +215,24 @@ Import::find_object_export_data(const std::string& filename,\n \t\t\t\toff_t offset,\n \t\t\t\tLocation location)\n {\n-  const char* errmsg;\n+  char *buf;\n+  size_t len;\n   int err;\n-  simple_object_read* sobj = simple_object_start_read(fd, offset,\n-\t\t\t\t\t\t      \"__GNU_GO\",\n-\t\t\t\t\t\t      &errmsg, &err);\n-  if (sobj == NULL)\n-    return NULL;\n-\n-  off_t sec_offset;\n-  off_t sec_length;\n-  int found = simple_object_find_section(sobj, \".go_export\", &sec_offset,\n-\t\t\t\t\t &sec_length, &errmsg, &err);\n-\n-  simple_object_release_read(sobj);\n-\n-  if (!found)\n-    return NULL;\n-\n-  if (lseek(fd, offset + sec_offset, SEEK_SET) < 0)\n+  const char *errmsg = go_read_export_data(fd, offset, &buf, &len, &err);\n+  if (errmsg != NULL)\n     {\n-      error_at(location, \"lseek %s failed: %m\", filename.c_str());\n+      if (err == 0)\n+\terror_at(location, \"%s: %s\", filename.c_str(), errmsg);\n+      else\n+\terror_at(location, \"%s: %s: %s\", filename.c_str(), errmsg,\n+\t\t xstrerror(err));\n       return NULL;\n     }\n \n-  char* buf = new char[sec_length];\n-  ssize_t c = read(fd, buf, sec_length);\n-  if (c < 0)\n-    {\n-      error_at(location, \"read %s failed: %m\", filename.c_str());\n-      delete[] buf;\n-      return NULL;\n-    }\n-  if (c < sec_length)\n-    {\n-      error_at(location, \"%s: short read\", filename.c_str());\n-      delete[] buf;\n-      return NULL;\n-    }\n+  if (buf == NULL)\n+    return NULL;\n \n-  return new Stream_from_buffer(buf, sec_length);\n+  return new Stream_from_buffer(buf, len);\n }\n \n // Class Import."}, {"sha": "bdff0c2a9e1b4ce20c57e983d176b4c73b081b1e", "filename": "gcc/go/gofrontend/import.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c990877a412109c1e7eac6506239a27ab309051f/gcc%2Fgo%2Fgofrontend%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c990877a412109c1e7eac6506239a27ab309051f/gcc%2Fgo%2Fgofrontend%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.h?ref=c990877a412109c1e7eac6506239a27ab309051f", "patch": "@@ -287,7 +287,7 @@ class Stream_from_string : public Import::Stream\n   size_t pos_;\n };\n \n-// Read import data from an allocated buffer.\n+// Read import data from a buffer allocated using malloc.\n \n class Stream_from_buffer : public Import::Stream\n {\n@@ -297,7 +297,7 @@ class Stream_from_buffer : public Import::Stream\n   { }\n \n   ~Stream_from_buffer()\n-  { delete[] this->buf_; }\n+  { free(this->buf_); }\n \n  protected:\n   bool"}]}