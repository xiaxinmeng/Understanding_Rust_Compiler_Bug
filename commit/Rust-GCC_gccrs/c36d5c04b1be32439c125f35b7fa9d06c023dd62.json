{"sha": "c36d5c04b1be32439c125f35b7fa9d06c023dd62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM2ZDVjMDRiMWJlMzI0MzljMTI1ZjM1YjdmYTlkMDZjMDIzZGQ2Mg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-23T10:21:31Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-23T10:21:31Z"}, "message": "2003-12-23  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/print/attribute/AttributeSetUtilities.java\n\t(verifyCategoryForValue): Renamed from verifyCategoryForAttribute.\n\t* javax/print/attribute/HashAttributeSet.java\n\t(HashAttributeSet): Call internal add methods, added missing\n\texceptions.\n\t(add): Call addInternal, added exceptions to documentation.\n\t(addInternal): New method.\n\t(addAll): Call addAllInternal, added exception to documentation.\n\t(addAllInternal): New method.\n\t(clear): Added exception to documentation.\n\t(remove): Likewise.\n\t* javax/print/attribute/URISyntax.java\n\t(serialVersionUID): Fixed value.\n\nFrom-SVN: r74969", "tree": {"sha": "5fd9c9b6b07753d11449c69906384fe6779cb4dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fd9c9b6b07753d11449c69906384fe6779cb4dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c36d5c04b1be32439c125f35b7fa9d06c023dd62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c36d5c04b1be32439c125f35b7fa9d06c023dd62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c36d5c04b1be32439c125f35b7fa9d06c023dd62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c36d5c04b1be32439c125f35b7fa9d06c023dd62/comments", "author": null, "committer": null, "parents": [{"sha": "5d027e7b0312df4d691c9e5fb90020e41a034af9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d027e7b0312df4d691c9e5fb90020e41a034af9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d027e7b0312df4d691c9e5fb90020e41a034af9"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "9ca19caa69d435f4d736b19659986a3aa443e894", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36d5c04b1be32439c125f35b7fa9d06c023dd62/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36d5c04b1be32439c125f35b7fa9d06c023dd62/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c36d5c04b1be32439c125f35b7fa9d06c023dd62", "patch": "@@ -1,3 +1,19 @@\n+2003-12-23  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/print/attribute/AttributeSetUtilities.java\n+\t(verifyCategoryForValue): Renamed from verifyCategoryForAttribute.\n+\t* javax/print/attribute/HashAttributeSet.java\n+\t(HashAttributeSet): Call internal add methods, added missing\n+\texceptions.\n+\t(add): Call addInternal, added exceptions to documentation.\n+\t(addInternal): New method.\n+\t(addAll): Call addAllInternal, added exception to documentation.\n+\t(addAllInternal): New method.\n+\t(clear): Added exception to documentation.\n+\t(remove): Likewise.\n+\t* javax/print/attribute/URISyntax.java\n+\t(serialVersionUID): Fixed value.\n+\n 2003-12-22  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c"}, {"sha": "65cf3782687a7ccbbb46a1053a9d714326dd71a6", "filename": "libjava/javax/print/attribute/AttributeSetUtilities.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36d5c04b1be32439c125f35b7fa9d06c023dd62/libjava%2Fjavax%2Fprint%2Fattribute%2FAttributeSetUtilities.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36d5c04b1be32439c125f35b7fa9d06c023dd62/libjava%2Fjavax%2Fprint%2Fattribute%2FAttributeSetUtilities.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FAttributeSetUtilities.java?ref=c36d5c04b1be32439c125f35b7fa9d06c023dd62", "patch": "@@ -432,8 +432,8 @@ public static Attribute verifyAttributeValue(Object object,\n    * @exception IllegalArgumentException if the categories are not equal\n    * @exception NullPointerException if category is null\n    */\n-  public static void verifyCategoryForAttribute(Class category,\n-                                                Attribute attribute)\n+  public static void verifyCategoryForValue(Class category,\n+                                            Attribute attribute)\n   {\n     if (category == null)\n       throw new NullPointerException(\"object may not be null\");"}, {"sha": "63b4105cb42cf43619ca23839763d7458423ca20", "filename": "libjava/javax/print/attribute/HashAttributeSet.java", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36d5c04b1be32439c125f35b7fa9d06c023dd62/libjava%2Fjavax%2Fprint%2Fattribute%2FHashAttributeSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36d5c04b1be32439c125f35b7fa9d06c023dd62/libjava%2Fjavax%2Fprint%2Fattribute%2FHashAttributeSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FHashAttributeSet.java?ref=c36d5c04b1be32439c125f35b7fa9d06c023dd62", "patch": "@@ -124,7 +124,7 @@ protected HashAttributeSet(Attribute attribute, Class interfaceName)\n     if (attribute == null)\n       throw new NullPointerException();\n     \n-    add(attribute);\n+    addInternal(attribute, interfaceName);\n   }\n \n   /**\n@@ -142,22 +142,21 @@ protected HashAttributeSet(Attribute[] attributes, Class interfaceName)\n       throw new NullPointerException();\n     \n     for (int index = 0; index < attributes.length; index++)\n-      add(attributes[index]);\n+      addInternal(attributes[index], interfaceName);\n   }\n \n   /**\n    * Creates an empty <code>HashAttributeSet</code> object.\n    *\n    * @exception ClassCastException if any element of attributes is not an\n    * interface of interfaceName\n-   * @exception NullPointerException if attributes or interfaceName is null\n    */\n   public HashAttributeSet(AttributeSet attributes, Class interfaceName)\n   {\n     this(interfaceName);\n     \n     if (attributes != null)\n-      addAll(attributes);\n+      addAllInternal(attributes, interfaceName);\n   }\n \n   /**\n@@ -166,12 +165,24 @@ public HashAttributeSet(AttributeSet attributes, Class interfaceName)\n    * @param attribute the attribute to add\n    *\n    * @return true if the attribute set has changed, false otherwise\n+   *\n+   * @exception NullPointerException if attribute is null\n+   * @exception UnmodifiableSetException if this attribute set does not\n+   * support this action.\n    */\n   public boolean add(Attribute attribute)\n+  {\n+    return addInternal(attribute, interfaceName);\n+  }\n+\n+  private boolean addInternal(Attribute attribute, Class interfaceName)\n   {\n     if (attribute == null)\n       throw new NullPointerException(\"attribute may not be null\");\n \n+    AttributeSetUtilities.verifyAttributeCategory(interfaceName,\n+\t\t\t\t\t\t  this.interfaceName);\n+\n     Object old = attributeMap.put\n       (attribute.getCategory(), AttributeSetUtilities.verifyAttributeValue\n                                   (attribute, interfaceName));\n@@ -184,21 +195,32 @@ public boolean add(Attribute attribute)\n    * @param attributes the attributes to add\n    *\n    * @return true if the attribute set has changed, false otherwise\n+   *\n+   * @exception UnmodifiableSetException if this attribute set does not\n+   * support this action.\n    */\n   public boolean addAll(AttributeSet attributes)\n+  {\n+    return addAllInternal(attributes, interfaceName);\n+  }\n+\n+  private boolean addAllInternal(AttributeSet attributes, Class interfaceName)\n   {\n     boolean modified = false;\n     Attribute[] array = attributes.toArray();\n \n     for (int index = 0; index < array.length; index++)\n-      if (! add(array[index]))\n+      if (addInternal(array[index], interfaceName))\n         modified = true;\n \n     return modified;\n   }\n \n   /**\n    * Removes all attributes from this attribute set.\n+   *\n+   * @exception UnmodifiableSetException if this attribute set does not\n+   * support this action.\n    */\n   public void clear()\n   {\n@@ -285,6 +307,9 @@ public boolean isEmpty()\n    * @param attribute the attribute value of the entry to be removed\n    *\n    * @return true if the attribute set has changed, false otherwise.\n+   *\n+   * @exception UnmodifiableSetException if this attribute set does not\n+   * support this action.\n    */\n   public boolean remove(Attribute attribute)\n   {"}, {"sha": "56a25368fd59a19620314d4d3c4a133c4711b1d3", "filename": "libjava/javax/print/attribute/URISyntax.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c36d5c04b1be32439c125f35b7fa9d06c023dd62/libjava%2Fjavax%2Fprint%2Fattribute%2FURISyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c36d5c04b1be32439c125f35b7fa9d06c023dd62/libjava%2Fjavax%2Fprint%2Fattribute%2FURISyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FURISyntax.java?ref=c36d5c04b1be32439c125f35b7fa9d06c023dd62", "patch": "@@ -46,7 +46,7 @@\n public abstract class URISyntax\n   implements Cloneable, Serializable\n {\n-  private static final long serialVersionUID = 3666874174847632203L;\n+  private static final long serialVersionUID = -7842661210486401678L;\n \n   private URI uri;\n "}]}