{"sha": "74500b3e10a9980a4719ed570ae45d8c3bc811c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ1MDBiM2UxMGE5OTgwYTQ3MTllZDU3MGFlNDVkOGMzYmM4MTFjMA==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2010-04-22T18:03:01Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2010-04-22T18:03:01Z"}, "message": "re PR tree-optimization/43842 (ice in vect_create_epilog_for_reduction)\n\n\n\tPR tree-optimization/43842\n\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Handle \n\tloop unrolling in update of exit phis. Fix comment.\n\t* tree-vect-slp.c (vect_analyze_slp): Check that there are at\n\tleast two reduction statements in the loop before starting SLP \n\tanalysis.\n\nFrom-SVN: r158650", "tree": {"sha": "144fa12816f0643bd8e04966503f8528729a0649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/144fa12816f0643bd8e04966503f8528729a0649"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74500b3e10a9980a4719ed570ae45d8c3bc811c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74500b3e10a9980a4719ed570ae45d8c3bc811c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74500b3e10a9980a4719ed570ae45d8c3bc811c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74500b3e10a9980a4719ed570ae45d8c3bc811c0/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e80fcacfae2e4f30100fe3a1073dec81d7fa51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e80fcacfae2e4f30100fe3a1073dec81d7fa51e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e80fcacfae2e4f30100fe3a1073dec81d7fa51e"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "91cc23621431b74017f59a8de0007e2b10881e2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74500b3e10a9980a4719ed570ae45d8c3bc811c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74500b3e10a9980a4719ed570ae45d8c3bc811c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74500b3e10a9980a4719ed570ae45d8c3bc811c0", "patch": "@@ -1,3 +1,12 @@\n+2010-04-22 Ira Rosen <irar@il.ibm.com>\n+\n+\tPR tree-optimization/43482\n+\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Handle \n+\tloop unrolling in update of exit phis. Fix comment.\n+\t* tree-vect-slp.c (vect_analyze_slp): Check that there are at\n+\tleast two reduction statements in the loop before starting SLP \n+\tanalysis.\n+\n 2010-04-22  Nick Clifton  <nickc@redhat.com>\n \n \t* config/stormy16/stormy16-lib2.c (__ucmpsi2): Fix thinko."}, {"sha": "d21af46c2094990f03a69f5108bd9336d57b21aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74500b3e10a9980a4719ed570ae45d8c3bc811c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74500b3e10a9980a4719ed570ae45d8c3bc811c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74500b3e10a9980a4719ed570ae45d8c3bc811c0", "patch": "@@ -1,3 +1,8 @@\n+2010-04-22 Ira Rosen <irar@il.ibm.com>\n+\n+\tPR tree-optimization/43482\n+\t* gcc.dg/vect/pr43842.c: New test.\n+\n 2010-04-22  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* gcc.target/i386/wmul-1.c: Add dg-require-effective-target ilp32."}, {"sha": "593404ffbcb78a179751bcb5a078ddb714ba2e47", "filename": "gcc/testsuite/gcc.dg/vect/pr43842.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74500b3e10a9980a4719ed570ae45d8c3bc811c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43842.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74500b3e10a9980a4719ed570ae45d8c3bc811c0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43842.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43842.c?ref=74500b3e10a9980a4719ed570ae45d8c3bc811c0", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+\n+typedef char int8_t;\n+typedef short int int16_t;\n+typedef int int32_t;\n+typedef unsigned char uint8_t;\n+typedef unsigned short int uint16_t;\n+typedef unsigned int uint32_t;\n+\n+static int16_t\n+safe_rshift_func_int16_t_s_u (int16_t left, unsigned int right)\n+{\n+  return left || right >= 1 * 8 ? left : left >> right;\n+}\n+\n+static int8_t\n+safe_rshift_func_int8_t_s_u (int8_t left, unsigned int right)\n+{\n+  return left || right >= 1 * 8 ? left : left >> right;\n+}\n+\n+\n+static uint32_t\n+safe_add_func_uint32_t_u_u (uint32_t ui1, uint16_t ui2)\n+{\n+  return ui1 + ui2;\n+}\n+\n+int16_t g_4;\n+int8_t g_4_8;\n+uint32_t g_9[1];\n+uint32_t g_9_8[2];\n+int161 (void)\n+{\n+  int32_t l_2;\n+\n+  for (l_2 = -25; l_2; l_2 = safe_add_func_uint32_t_u_u (l_2, 1))\n+    g_9[0] ^= safe_rshift_func_int16_t_s_u (g_4, 1);\n+}\n+\n+int81 (void)\n+{\n+  int32_t l_2;\n+\n+  for (l_2 = -25; l_2; l_2 = safe_add_func_uint32_t_u_u (l_2, 1))\n+    {\n+      g_9[0] ^= safe_rshift_func_int8_t_s_u (g_4_8, 1);\n+      g_9[1] ^= safe_rshift_func_int8_t_s_u (g_4_8, 1);\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "83b823d84bfed060645250ce0950ec27ac749c4d", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74500b3e10a9980a4719ed570ae45d8c3bc811c0/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74500b3e10a9980a4719ed570ae45d8c3bc811c0/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=74500b3e10a9980a4719ed570ae45d8c3bc811c0", "patch": "@@ -2961,7 +2961,7 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n   enum vect_def_type dt = vect_unknown_def_type;\n   int j, i;\n   VEC (tree, heap) *scalar_results = NULL;\n-  int group_size = 1, k, ratio;\n+  unsigned int group_size = 1, k, ratio;\n   VEC (tree, heap) *vec_initial_defs = NULL;\n   VEC (gimple, heap) *phis;\n \n@@ -3439,16 +3439,22 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n           v_out2 = reduce <v_out1>\n           s_out3 = extract_field <v_out2, 0>\n           s_out4 = adjust_result <s_out3>\n-          use <s_out4>  */\n+          use <s_out4>  \n+          use <s_out4> */\n \n   /* In SLP we may have several statements in NEW_PHIS and REDUCTION_PHIS (in \n      case that GROUP_SIZE is greater than vectorization factor). Therefore, we\n      need to match SCALAR_RESULTS with corresponding statements. The first\n      (GROUP_SIZE / number of new vector stmts) scalar results correspond to\n      the first vector stmt, etc.  \n      (RATIO is equal to (GROUP_SIZE / number of new vector stmts)).  */ \n-  ratio = group_size / VEC_length (gimple, new_phis);\n-  gcc_assert (!(group_size % VEC_length (gimple, new_phis)));\n+  if (group_size > VEC_length (gimple, new_phis))\n+    {\n+      ratio = group_size / VEC_length (gimple, new_phis);\n+      gcc_assert (!(group_size % VEC_length (gimple, new_phis)));\n+    }\n+  else\n+    ratio = 1;\n \n   for (k = 0; k < group_size; k++)\n     {"}, {"sha": "6949ebdf8730cd8aa742128513e6eec7841245b9", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74500b3e10a9980a4719ed570ae45d8c3bc811c0/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74500b3e10a9980a4719ed570ae45d8c3bc811c0/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=74500b3e10a9980a4719ed570ae45d8c3bc811c0", "patch": "@@ -1213,7 +1213,7 @@ vect_analyze_slp (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n     }\n \n   /* Find SLP sequences starting from groups of reductions.  */\n-  if (loop_vinfo &&  VEC_length (gimple, LOOP_VINFO_REDUCTIONS (loop_vinfo))\n+  if (loop_vinfo && VEC_length (gimple, LOOP_VINFO_REDUCTIONS (loop_vinfo)) > 1\n       && vect_analyze_slp_instance (loop_vinfo, bb_vinfo, \n                                     VEC_index (gimple, reductions, 0)))\n     ok = true;"}]}