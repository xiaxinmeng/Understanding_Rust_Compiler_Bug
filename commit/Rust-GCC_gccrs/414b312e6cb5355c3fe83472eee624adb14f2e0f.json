{"sha": "414b312e6cb5355c3fe83472eee624adb14f2e0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE0YjMxMmU2Y2I1MzU1YzNmZTgzNDcyZWVlNjI0YWRiMTRmMmUwZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-02T14:54:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-02T14:54:08Z"}, "message": "[multiple changes]\n\n2011-12-02  Bob Duff  <duff@adacore.com>\n\n\t* gnat_ugn.texi: Clarify usage of -p binder switch.\n\n2011-12-02  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_util.ads, sem_util.adb, sem_aux.ads, sem_aux.adb\n\t(Effectively_Has_Constrained_Partial_View): Moved to sem_aux\n\t(In_Generic_Body): Moved to sem_aux.\n\t(Unit_Declaration_Node): Moved to sem_aux.\n\t* einfo.ads (Effectively_Has_Constrained_Partial_View): Complete\n\tdocumentation.\n\t* exp_attr.adb, live.adb, sem_ch10.adb, checks.adb, sem.adb,\n\trtsfind.adb, sem_attr.adb, sem_elab.adb, exp_ch4.adb, sem_ch4.adb,\n\texp_ch13.adb: Add with-clause on Sem_Aux.\n\nFrom-SVN: r181917", "tree": {"sha": "e89f4cf3b8b8fda8f0216c18afc94ec7dfa99bd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e89f4cf3b8b8fda8f0216c18afc94ec7dfa99bd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/414b312e6cb5355c3fe83472eee624adb14f2e0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414b312e6cb5355c3fe83472eee624adb14f2e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/414b312e6cb5355c3fe83472eee624adb14f2e0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414b312e6cb5355c3fe83472eee624adb14f2e0f/comments", "author": null, "committer": null, "parents": [{"sha": "151c42b0b5d8606b9b40eddbd396a8c93432c12f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151c42b0b5d8606b9b40eddbd396a8c93432c12f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/151c42b0b5d8606b9b40eddbd396a8c93432c12f"}], "stats": {"total": 303, "additions": 170, "deletions": 133}, "files": [{"sha": "d0eba3833438d2036cdec8dbf4242997df4c4fa0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -1,3 +1,19 @@\n+2011-12-02  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat_ugn.texi: Clarify usage of -p binder switch.\n+\n+2011-12-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb, sem_aux.ads, sem_aux.adb\n+\t(Effectively_Has_Constrained_Partial_View): Moved to sem_aux\n+\t(In_Generic_Body): Moved to sem_aux.\n+\t(Unit_Declaration_Node): Moved to sem_aux.\n+\t* einfo.ads (Effectively_Has_Constrained_Partial_View): Complete\n+\tdocumentation.\n+\t* exp_attr.adb, live.adb, sem_ch10.adb, checks.adb, sem.adb,\n+\trtsfind.adb, sem_attr.adb, sem_elab.adb, exp_ch4.adb, sem_ch4.adb,\n+\texp_ch13.adb: Add with-clause on Sem_Aux.\n+\n 2011-12-02  Yannick Moy  <moy@adacore.com>\n \n \t* sem_util.adb (Unique_Name): Reach through Unique_Entity to"}, {"sha": "5383bd8299cb1eef0bc1e1bbb795ebe4620e86f8", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -1240,7 +1240,9 @@ package body Checks is\n       --  partial view that is constrained.\n \n       elsif Ada_Version >= Ada_2005\n-        and then Effectively_Has_Constrained_Partial_View (Base_Type (T_Typ))\n+        and then Effectively_Has_Constrained_Partial_View\n+                   (Typ  => Base_Type (T_Typ),\n+                    Scop => Current_Scope)\n       then\n          return;\n       end if;"}, {"sha": "be607652923df4fde299b738d7f370133c3f9511", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -1420,8 +1420,11 @@ package Einfo is\n --       type has no discriminants and the full view has discriminants with\n --       defaults. In Ada 2005 heap-allocated objects of such types are not\n --       constrained, and can change their discriminants with full assignment.\n---       Sem_Util.Effectively_Has_Constrained_Partial_View should be always\n---       used by callers, rather than reading this attribute directly.\n+--       Sem_Aux.Effectively_Has_Constrained_Partial_View should be always\n+--       used by callers, rather than reading this attribute directly because,\n+--       according to RM 3.10.2 (27/2), untagged generic formal private types\n+--       and subtypes are also considered to have a constrained partial view\n+--       [when in a generic body].\n \n --    Has_Contiguous_Rep (Flag181)\n --       Present in enumeration types. True if the type as a representation"}, {"sha": "a4d9149bd7c42549f2e4cc6452b2471c8a299a59", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -1563,7 +1563,8 @@ package body Exp_Attr is\n                            (Nkind (Obj) = N_Explicit_Dereference\n                               and then\n                                 not Effectively_Has_Constrained_Partial_View\n-                                      (Base_Type (Etype (Obj)))));\n+                                      (Typ  => Base_Type (Etype (Obj)),\n+                                       Scop => Current_Scope)));\n             end if;\n          end Is_Constrained_Aliased_View;\n \n@@ -1686,7 +1687,8 @@ package body Exp_Attr is\n                      (Nkind (Pref) = N_Explicit_Dereference\n                        and then\n                          not Effectively_Has_Constrained_Partial_View\n-                               (Base_Type (Ptyp)))\n+                               (Typ  => Base_Type (Ptyp),\n+                                Scop => Current_Scope))\n                     or else Is_Constrained (Underlying_Type (Ptyp))\n                     or else (Ada_Version >= Ada_2012\n                               and then Is_Tagged_Type (Underlying_Type (Ptyp))"}, {"sha": "038a8442b61b848b26102e5ed698ae02794fd292", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -39,6 +39,7 @@ with Restrict; use Restrict;\n with Rident;   use Rident;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n+with Sem_Aux;  use Sem_Aux;\n with Sem_Ch7;  use Sem_Ch7;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Eval; use Sem_Eval;"}, {"sha": "12980a74ad4a855b9b95afef6d14e75459bba856", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -3905,7 +3905,8 @@ package body Exp_Ch4 is\n                        and then (Ada_Version < Ada_2005\n                                   or else not\n                                     Effectively_Has_Constrained_Partial_View\n-                                      (Typ))\n+                                      (Typ  => Typ,\n+                                       Scop => Current_Scope))\n                      then\n                         Typ := Build_Default_Subtype (Typ, N);\n                         Set_Expression (N, New_Reference_To (Typ, Loc));"}, {"sha": "52198c6b7d7f167272e6540c36c5295e2194b49c", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -8660,6 +8660,9 @@ This is because in the default static elaboration mode, all necessary\n These implicit pragmas are still respected by the binder in\n @option{^-p^/PESSIMISTIC_ELABORATION^} mode, so a\n safe elaboration order is assured.\n+\n+Note that @option{^-p^/PESSIMISTIC_ELABORATION^} is not intended for\n+production use; it is more for debugging/experimental use.\n @end table\n \n @node Output Control"}, {"sha": "b0c616f961ecea5b188bce7abd23fe497977a5bf", "filename": "gcc/ada/live.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Flive.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Flive.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flive.adb?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -27,6 +27,7 @@ with Atree;    use Atree;\n with Einfo;    use Einfo;\n with Lib;      use Lib;\n with Nlists;   use Nlists;\n+with Sem_Aux;  use Sem_Aux;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n with Types;    use Types;"}, {"sha": "b8a6b1fe9c1a567fed6c9963b54c918557f16e29", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -42,6 +42,7 @@ with Output;   use Output;\n with Opt;      use Opt;\n with Restrict; use Restrict;\n with Sem;      use Sem;\n+with Sem_Aux;  use Sem_Aux;\n with Sem_Ch7;  use Sem_Ch7;\n with Sem_Dist; use Sem_Dist;\n with Sem_Util; use Sem_Util;"}, {"sha": "ce6d88b8fb1db443aa85a809e574c1ac4cf231d9", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -37,6 +37,7 @@ with Nlists;   use Nlists;\n with Output;   use Output;\n with Restrict; use Restrict;\n with Sem_Attr; use Sem_Attr;\n+with Sem_Aux;  use Sem_Aux;\n with Sem_Ch2;  use Sem_Ch2;\n with Sem_Ch3;  use Sem_Ch3;\n with Sem_Ch4;  use Sem_Ch4;"}, {"sha": "bfad3f8b7d09fef86201c417f12ee4aa5eb33e72", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -8633,7 +8633,8 @@ package body Sem_Attr is\n                    (Ada_Version < Ada_2005\n                      or else\n                        not Effectively_Has_Constrained_Partial_View\n-                             (Designated_Type (Base_Type (Typ))))\n+                        (Typ => Designated_Type (Base_Type (Typ)),\n+                         Scop => Current_Scope))\n                then\n                   null;\n "}, {"sha": "4f93f22ab361724a16d82e6ecf654855c6534122", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -152,6 +152,25 @@ package body Sem_Aux is\n       end if;\n    end Constant_Value;\n \n+   ----------------------------------------------\n+   -- Effectively_Has_Constrained_Partial_View --\n+   ----------------------------------------------\n+\n+   function Effectively_Has_Constrained_Partial_View\n+     (Typ  : Entity_Id;\n+      Scop : Entity_Id) return Boolean\n+   is\n+   begin\n+      return Has_Constrained_Partial_View (Typ)\n+        or else (In_Generic_Body (Scop)\n+                   and then Is_Generic_Type (Base_Type (Typ))\n+                   and then Is_Private_Type (Base_Type (Typ))\n+                   and then not Is_Tagged_Type (Typ)\n+                   and then not (Is_Array_Type (Typ)\n+                                   and then not Is_Constrained (Typ))\n+                   and then Has_Discriminants (Typ));\n+   end Effectively_Has_Constrained_Partial_View;\n+\n    -----------------------------\n    -- Enclosing_Dynamic_Scope --\n    -----------------------------\n@@ -418,6 +437,43 @@ package body Sem_Aux is\n       Obsolescent_Warnings.Init;\n    end Initialize;\n \n+   ---------------------\n+   -- In_Generic_Body --\n+   ---------------------\n+\n+   function In_Generic_Body (Id : Entity_Id) return Boolean is\n+      S : Entity_Id;\n+\n+   begin\n+      --  Climb scopes looking for generic body\n+\n+      S := Id;\n+      while Present (S) and then S /= Standard_Standard loop\n+\n+         --  Generic package body\n+\n+         if Ekind (S) = E_Generic_Package\n+           and then In_Package_Body (S)\n+         then\n+            return True;\n+\n+         --  Generic subprogram body\n+\n+         elsif Is_Subprogram (S)\n+           and then Nkind (Unit_Declaration_Node (S))\n+                      = N_Generic_Subprogram_Declaration\n+         then\n+            return True;\n+         end if;\n+\n+         S := Scope (S);\n+      end loop;\n+\n+      --  False if top of scope stack without finding a generic body\n+\n+      return False;\n+   end In_Generic_Body;\n+\n    ---------------------\n    -- Is_By_Copy_Type --\n    ---------------------\n@@ -904,4 +960,53 @@ package body Sem_Aux is\n       return E;\n    end Ultimate_Alias;\n \n+   --------------------------\n+   -- Unit_Declaration_Node --\n+   --------------------------\n+\n+   function Unit_Declaration_Node (Unit_Id : Entity_Id) return Node_Id is\n+      N : Node_Id := Parent (Unit_Id);\n+\n+   begin\n+      --  Predefined operators do not have a full function declaration\n+\n+      if Ekind (Unit_Id) = E_Operator then\n+         return N;\n+      end if;\n+\n+      --  Isn't there some better way to express the following ???\n+\n+      while Nkind (N) /= N_Abstract_Subprogram_Declaration\n+        and then Nkind (N) /= N_Formal_Package_Declaration\n+        and then Nkind (N) /= N_Function_Instantiation\n+        and then Nkind (N) /= N_Generic_Package_Declaration\n+        and then Nkind (N) /= N_Generic_Subprogram_Declaration\n+        and then Nkind (N) /= N_Package_Declaration\n+        and then Nkind (N) /= N_Package_Body\n+        and then Nkind (N) /= N_Package_Instantiation\n+        and then Nkind (N) /= N_Package_Renaming_Declaration\n+        and then Nkind (N) /= N_Procedure_Instantiation\n+        and then Nkind (N) /= N_Protected_Body\n+        and then Nkind (N) /= N_Subprogram_Declaration\n+        and then Nkind (N) /= N_Subprogram_Body\n+        and then Nkind (N) /= N_Subprogram_Body_Stub\n+        and then Nkind (N) /= N_Subprogram_Renaming_Declaration\n+        and then Nkind (N) /= N_Task_Body\n+        and then Nkind (N) /= N_Task_Type_Declaration\n+        and then Nkind (N) not in N_Formal_Subprogram_Declaration\n+        and then Nkind (N) not in N_Generic_Renaming_Declaration\n+      loop\n+         N := Parent (N);\n+\n+         --  We don't use Assert here, because that causes an infinite loop\n+         --  when assertions are turned off. Better to crash.\n+\n+         if No (N) then\n+            raise Program_Error;\n+         end if;\n+      end loop;\n+\n+      return N;\n+   end Unit_Declaration_Node;\n+\n end Sem_Aux;"}, {"sha": "d4875a4612745a3d57cb72ae1ee85f42820669eb", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -104,6 +104,14 @@ package Sem_Aux is\n    --  constants from the point of view of constant folding. Empty is also\n    --  returned for variables with no initialization expression.\n \n+   function Effectively_Has_Constrained_Partial_View\n+     (Typ  : Entity_Id;\n+      Scop : Entity_Id) return Boolean;\n+   --  Return True if Typ has attribute Has_Constrained_Partial_View set to\n+   --  True; in addition, within a generic body, return True if a subtype is\n+   --  a descendant of an untagged generic formal private or derived type, and\n+   --  the subtype is not an unconstrained array subtype (RM 3.3(23.10/3)).\n+\n    function Enclosing_Dynamic_Scope (Ent : Entity_Id) return Entity_Id;\n    --  For any entity, Ent, returns the closest dynamic scope in which the\n    --  entity is declared or Standard_Standard for library-level entities.\n@@ -147,6 +155,9 @@ package Sem_Aux is\n    --  Typ must be a tagged record type. This function returns the Entity for\n    --  the first _Tag field in the record type.\n \n+   function In_Generic_Body (Id : Entity_Id) return Boolean;\n+   --  Determine whether entity Id appears inside a generic body\n+\n    function Is_By_Copy_Type (Ent : Entity_Id) return Boolean;\n    --  Ent is any entity. Returns True if Ent is a type entity where the type\n    --  is required to be passed by copy, as defined in (RM 6.2(3)).\n@@ -228,4 +239,11 @@ package Sem_Aux is\n    --  Return the last entity in the chain of aliased entities of Prim. If Prim\n    --  has no alias return Prim.\n \n+   function Unit_Declaration_Node (Unit_Id : Entity_Id) return Node_Id;\n+   --  Unit_Id is the simple name of a program unit, this function returns the\n+   --  corresponding xxx_Declaration node for the entity. Also applies to the\n+   --  body entities for subprograms, tasks and protected units, in which case\n+   --  it returns the subprogram, task or protected body node for it. The unit\n+   --  may be a child unit with any number of ancestors.\n+\n end Sem_Aux;"}, {"sha": "4913b13e00ea494ba4ed03cba72b7928a25756d4", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -47,6 +47,7 @@ with Restrict; use Restrict;\n with Rident;   use Rident;\n with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n+with Sem_Aux;  use Sem_Aux;\n with Sem_Ch3;  use Sem_Ch3;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch7;  use Sem_Ch7;"}, {"sha": "8f1e43a56b4413d828f7658584386d7a24da9999", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -576,7 +576,9 @@ package body Sem_Ch4 is\n                --  and the allocated object is unconstrained.\n \n                elsif Ada_Version >= Ada_2005\n-                 and then Effectively_Has_Constrained_Partial_View (Base_Typ)\n+                 and then Effectively_Has_Constrained_Partial_View\n+                            (Typ  => Base_Typ,\n+                             Scop => Current_Scope)\n                then\n                   Error_Msg_N\n                     (\"constraint not allowed when type \" &"}, {"sha": "6df8c3249b424309edb51daead3c96f25fad3ca1", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -43,6 +43,7 @@ with Output;   use Output;\n with Restrict; use Restrict;\n with Rident;   use Rident;\n with Sem;      use Sem;\n+with Sem_Aux;  use Sem_Aux;\n with Sem_Cat;  use Sem_Cat;\n with Sem_Ch7;  use Sem_Ch7;\n with Sem_Ch8;  use Sem_Ch8;"}, {"sha": "203eec19a1d5657820ea497e78221c162b3d90ba", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 106, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -3039,25 +3039,6 @@ package body Sem_Util is\n       return Extra_Accessibility (Id);\n    end Effective_Extra_Accessibility;\n \n-   ----------------------------------------------\n-   -- Effectively_Has_Constrained_Partial_View --\n-   ----------------------------------------------\n-\n-   function Effectively_Has_Constrained_Partial_View\n-     (Typ  : Entity_Id;\n-      Scop : Entity_Id := Current_Scope) return Boolean\n-   is\n-   begin\n-      return Has_Constrained_Partial_View (Typ)\n-        or else (In_Generic_Body (Scop)\n-                   and then Is_Generic_Type (Base_Type (Typ))\n-                   and then Is_Private_Type (Base_Type (Typ))\n-                   and then not Is_Tagged_Type (Typ)\n-                   and then not (Is_Array_Type (Typ)\n-                                   and then not Is_Constrained (Typ))\n-                   and then Has_Discriminants (Typ));\n-   end Effectively_Has_Constrained_Partial_View;\n-\n    --------------------------\n    -- Enclosing_CPP_Parent --\n    --------------------------\n@@ -6107,43 +6088,6 @@ package body Sem_Util is\n       return False;\n    end Implements_Interface;\n \n-   ---------------------\n-   -- In_Generic_Body --\n-   ---------------------\n-\n-   function In_Generic_Body (Id : Entity_Id) return Boolean is\n-      S : Entity_Id;\n-\n-   begin\n-      --  Climb scopes looking for generic body\n-\n-      S := Id;\n-      while Present (S) and then S /= Standard_Standard loop\n-\n-         --  Generic package body\n-\n-         if Ekind (S) = E_Generic_Package\n-           and then In_Package_Body (S)\n-         then\n-            return True;\n-\n-         --  Generic subprogram body\n-\n-         elsif Is_Subprogram (S)\n-           and then Nkind (Unit_Declaration_Node (S))\n-                      = N_Generic_Subprogram_Declaration\n-         then\n-            return True;\n-         end if;\n-\n-         S := Scope (S);\n-      end loop;\n-\n-      --  False if top of scope stack without finding a generic body\n-\n-      return False;\n-   end In_Generic_Body;\n-\n    -----------------\n    -- In_Instance --\n    -----------------\n@@ -7002,7 +6946,8 @@ package body Sem_Util is\n \n                   if Ekind (Prefix_Type) = E_Access_Type\n                     and then not Effectively_Has_Constrained_Partial_View\n-                                   (Designated_Type (Prefix_Type))\n+                                   (Typ  => Designated_Type (Prefix_Type),\n+                                    Scop => Current_Scope)\n                   then\n                      return False;\n \n@@ -12985,55 +12930,6 @@ package body Sem_Util is\n       end if;\n    end Unique_Name;\n \n-   --------------------------\n-   -- Unit_Declaration_Node --\n-   --------------------------\n-\n-   function Unit_Declaration_Node (Unit_Id : Entity_Id) return Node_Id is\n-      N : Node_Id := Parent (Unit_Id);\n-\n-   begin\n-      --  Predefined operators do not have a full function declaration\n-\n-      if Ekind (Unit_Id) = E_Operator then\n-         return N;\n-      end if;\n-\n-      --  Isn't there some better way to express the following ???\n-\n-      while Nkind (N) /= N_Abstract_Subprogram_Declaration\n-        and then Nkind (N) /= N_Formal_Package_Declaration\n-        and then Nkind (N) /= N_Function_Instantiation\n-        and then Nkind (N) /= N_Generic_Package_Declaration\n-        and then Nkind (N) /= N_Generic_Subprogram_Declaration\n-        and then Nkind (N) /= N_Package_Declaration\n-        and then Nkind (N) /= N_Package_Body\n-        and then Nkind (N) /= N_Package_Instantiation\n-        and then Nkind (N) /= N_Package_Renaming_Declaration\n-        and then Nkind (N) /= N_Procedure_Instantiation\n-        and then Nkind (N) /= N_Protected_Body\n-        and then Nkind (N) /= N_Subprogram_Declaration\n-        and then Nkind (N) /= N_Subprogram_Body\n-        and then Nkind (N) /= N_Subprogram_Body_Stub\n-        and then Nkind (N) /= N_Subprogram_Renaming_Declaration\n-        and then Nkind (N) /= N_Task_Body\n-        and then Nkind (N) /= N_Task_Type_Declaration\n-        and then Nkind (N) not in N_Formal_Subprogram_Declaration\n-        and then Nkind (N) not in N_Generic_Renaming_Declaration\n-      loop\n-         N := Parent (N);\n-\n-         --  We don't use Assert here, because that causes an infinite loop\n-         --  when assertions are turned off. Better to crash.\n-\n-         if No (N) then\n-            raise Program_Error;\n-         end if;\n-      end loop;\n-\n-      return N;\n-   end Unit_Declaration_Node;\n-\n    ---------------------\n    -- Unit_Is_Visible --\n    ---------------------"}, {"sha": "d7154a26aeca93df5054432a6adc9f5a720ce2b5", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b312e6cb5355c3fe83472eee624adb14f2e0f/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=414b312e6cb5355c3fe83472eee624adb14f2e0f", "patch": "@@ -368,14 +368,6 @@ package Sem_Util is\n    --  Same as Einfo.Extra_Accessibility except thtat object renames\n    --  are looked through.\n \n-   function Effectively_Has_Constrained_Partial_View\n-     (Typ  : Entity_Id;\n-      Scop : Entity_Id := Current_Scope) return Boolean;\n-   --  Return True if Typ has attribute Has_Constrained_Partial_View set to\n-   --  True; in addition, within a generic body, return True if a subtype is\n-   --  a descendant of an untagged generic formal private or derived type, and\n-   --  the subtype is not an unconstrained array subtype (RM 3.3(23.10/3)).\n-\n    function Enclosing_CPP_Parent (Typ : Entity_Id) return Entity_Id;\n    --  Returns the closest ancestor of Typ that is a CPP type.\n \n@@ -725,9 +717,6 @@ package Sem_Util is\n       Exclude_Parents : Boolean := False) return Boolean;\n    --  Returns true if the Typ_Ent implements interface Iface_Ent\n \n-   function In_Generic_Body (Id : Entity_Id) return Boolean;\n-   --  Determine whether entity Id appears inside a generic body\n-\n    function In_Instance return Boolean;\n    --  Returns True if the current scope is within a generic instance\n \n@@ -1503,13 +1492,6 @@ package Sem_Util is\n    --  Return a unique name for entity E, which could be used to identify E\n    --  across compilation units.\n \n-   function Unit_Declaration_Node (Unit_Id : Entity_Id) return Node_Id;\n-   --  Unit_Id is the simple name of a program unit, this function returns the\n-   --  corresponding xxx_Declaration node for the entity. Also applies to the\n-   --  body entities for subprograms, tasks and protected units, in which case\n-   --  it returns the subprogram, task or protected body node for it. The unit\n-   --  may be a child unit with any number of ancestors.\n-\n    function Unit_Is_Visible (U : Entity_Id) return Boolean;\n    --  Determine whether a compilation unit is visible in the current context,\n    --  because there is a with_clause that makes the unit available. Used to"}]}