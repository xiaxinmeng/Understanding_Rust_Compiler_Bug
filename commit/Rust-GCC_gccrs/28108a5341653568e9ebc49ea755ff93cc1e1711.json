{"sha": "28108a5341653568e9ebc49ea755ff93cc1e1711", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgxMDhhNTM0MTY1MzU2OGU5ZWJjNDllYTc1NWZmOTNjYzFlMTcxMQ==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2019-05-22T16:09:59Z"}, "committer": {"name": "Matthew Malcomson", "email": "matmal01@gcc.gnu.org", "date": "2019-05-22T16:09:59Z"}, "message": "[aarch64] Introduce flags for SVE2.\n\n\nThis patch adds support in the compiler for the architecture feature\nflags that binutils will use to enable/disable the new \"Future\nArchitecture Technologies\" feature Scalable Vector Extension V2 (SVE2)\nannounced at Linaro Connect this week.\n\nThe \"sve2\" extension that enables the core sve2 instructions.\nThis also enables the sve extension, since sve is a requirement of sve2.\n\nExtra optional sve2 features are the bitperm, sm4, aes, and sha3 extensions.\nThese are all given extra feature flags, \"bitperm\", \"sve2-sm4\",\n\"sve2-aes\", and \"sve2-sha3\" respectively.\nThe sm4, aes, and sha3 extensions are explicitly marked as sve2\nextensions to distinguish them from the corresponding NEON extensions.\n\nWhen introducing macros to denote these new features we have gone past\nwhat a 32 bit value can represent which means we need to change the type\nof those variables working with these feature flags to ensure they use\n64 bit quantities.\n\nTested with bootstrap on aarch64-none-linux-gnu and manually seeing that\n-march=armv8-a+typo prints out the expected flags while using the new\nfeature flags does not complain about a missing flag (until reaching the\nassembler).\n\ngcc/ChangeLog:\n\n2019-05-22  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* common/config/aarch64/aarch64-common.c\n\t(struct aarch64_option_extension, struct processor_name_to_arch,\n\tstruct arch_to_arch_name, aarch64_parse_extension, opt_ext_cmp,\n\taarch64_contains_opt,\n\taarch64_get_extension_string_for_isa_flags): Change type of\n\tvariables storing flags to uint64_t.\n\t* config/aarch64/aarch64-option-extensions.def (sve2, sve2-sm4,\n\tsve2-aes, sve2-sha3, bitperm): New optional SVE2 extension flags.\n\t* config/aarch64/aarch64.c (struct processor,\n\taarch64_parse_arch, aarch64_parse_cpu, aarch64_validate_mcpu,\n\taarch64_validate_march, aarch64_override_options,\n\taarch64_option_print, aarch64_handle_attr_isa_flags,\n\taarch64_declare_function_name, aarch64_start_file): Make flag\n\tvariables uint64_t.\n\t* config/aarch64/aarch64.h (AARCH64_FL_SVE2, AARCH64_FL_SVE2_AES,\n\tAARCH64_FL_SVE2_SM4, AARCH64_FL_SVE2_SHA3,\n\tAARCH64_FL_SVE2_BITPERM): New macro feature flags.\n\t* config/aarch64/aarch64.opt (aarch64_isa_flags): Make uint64_t.\n\t* config/aarch64/driver-aarch64.c\n\t(struct aarch64_arch_extension, struct aarch64_core_data,\n\tstruct aarch64_arch_driver_info, host_detect_local_cpu): Make\n\tflag variables uint64_t.\n\t* doc/invoke.texi: Add documentation for new arguments.\n\nFrom-SVN: r271514", "tree": {"sha": "9ca112acb2ac02b30f6a2915b2e521941130003a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ca112acb2ac02b30f6a2915b2e521941130003a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28108a5341653568e9ebc49ea755ff93cc1e1711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28108a5341653568e9ebc49ea755ff93cc1e1711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28108a5341653568e9ebc49ea755ff93cc1e1711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28108a5341653568e9ebc49ea755ff93cc1e1711/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee49c5a4513c99c8013c5cd1598559c5e4c2810c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee49c5a4513c99c8013c5cd1598559c5e4c2810c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee49c5a4513c99c8013c5cd1598559c5e4c2810c"}], "stats": {"total": 177, "additions": 125, "deletions": 52}, "files": [{"sha": "c3d8a415bffb704724bff2759450ada2776bf567", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28108a5341653568e9ebc49ea755ff93cc1e1711", "patch": "@@ -1,3 +1,29 @@\n+2019-05-22  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* common/config/aarch64/aarch64-common.c\n+\t(struct aarch64_option_extension, struct processor_name_to_arch,\n+\tstruct arch_to_arch_name, aarch64_parse_extension, opt_ext_cmp,\n+\taarch64_contains_opt,\n+\taarch64_get_extension_string_for_isa_flags): Change type of\n+\tvariables storing flags to uint64_t.\n+\t* config/aarch64/aarch64-option-extensions.def (sve2, sve2-sm4,\n+\tsve2-aes, sve2-sha3, bitperm): New optional SVE2 extension flags.\n+\t* config/aarch64/aarch64.c (struct processor,\n+\taarch64_parse_arch, aarch64_parse_cpu, aarch64_validate_mcpu,\n+\taarch64_validate_march, aarch64_override_options,\n+\taarch64_option_print, aarch64_handle_attr_isa_flags,\n+\taarch64_declare_function_name, aarch64_start_file): Make flag\n+\tvariables uint64_t.\n+\t* config/aarch64/aarch64.h (AARCH64_FL_SVE2, AARCH64_FL_SVE2_AES,\n+\tAARCH64_FL_SVE2_SM4, AARCH64_FL_SVE2_SHA3,\n+\tAARCH64_FL_SVE2_BITPERM): New macro feature flags.\n+\t* config/aarch64/aarch64.opt (aarch64_isa_flags): Make uint64_t.\n+\t* config/aarch64/driver-aarch64.c\n+\t(struct aarch64_arch_extension, struct aarch64_core_data,\n+\tstruct aarch64_arch_driver_info, host_detect_local_cpu): Make\n+\tflag variables uint64_t.\n+\t* doc/invoke.texi: Add documentation for new arguments.\n+\n 2019-05-22  Richard Biener  <rguenther@suse.de>\n \n \t* alias.c (ao_ref_from_mem): Move stack-slot sharing"}, {"sha": "f9051056589861ce0ffe1bae4fa04cf44d34b9a2", "filename": "gcc/common/config/aarch64/aarch64-common.c", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c?ref=28108a5341653568e9ebc49ea755ff93cc1e1711", "patch": "@@ -170,9 +170,9 @@ aarch64_handle_option (struct gcc_options *opts,\n struct aarch64_option_extension\n {\n   const char *const name;\n-  const unsigned long flag_canonical;\n-  const unsigned long flags_on;\n-  const unsigned long flags_off;\n+  const uint64_t flag_canonical;\n+  const uint64_t flags_on;\n+  const uint64_t flags_off;\n   const bool is_synthetic;\n };\n \n@@ -201,14 +201,14 @@ struct processor_name_to_arch\n {\n   const std::string processor_name;\n   const enum aarch64_arch arch;\n-  const unsigned long flags;\n+  const uint64_t flags;\n };\n \n struct arch_to_arch_name\n {\n   const enum aarch64_arch arch;\n   const std::string arch_name;\n-  const unsigned long flags;\n+  const uint64_t flags;\n };\n \n /* Map processor names to the architecture revision they implement and\n@@ -238,7 +238,7 @@ static const struct arch_to_arch_name all_architectures[] =\n    a copy of the string is created and stored to INVALID_EXTENSION.  */\n \n enum aarch64_parse_opt_result\n-aarch64_parse_extension (const char *str, unsigned long *isa_flags,\n+aarch64_parse_extension (const char *str, uint64_t *isa_flags,\n \t\t\t std::string *invalid_extension)\n {\n   /* The extension string is parsed left to right.  */\n@@ -326,18 +326,21 @@ int opt_ext_cmp (const void* a, const void* b)\n      turns on as a dependency.  As an example +dotprod turns on FL_DOTPROD and\n      FL_SIMD.  As such the set of bits represented by this option is\n      {FL_DOTPROD, FL_SIMD}. */\n-  unsigned long total_flags_a = opt_a->flag_canonical & opt_a->flags_on;\n-  unsigned long total_flags_b = opt_b->flag_canonical & opt_b->flags_on;\n+  uint64_t total_flags_a = opt_a->flag_canonical & opt_a->flags_on;\n+  uint64_t total_flags_b = opt_b->flag_canonical & opt_b->flags_on;\n   int popcnt_a = popcount_hwi ((HOST_WIDE_INT)total_flags_a);\n   int popcnt_b = popcount_hwi ((HOST_WIDE_INT)total_flags_b);\n   int order = popcnt_b - popcnt_a;\n \n   /* If they have the same amount of bits set, give it a more\n      deterministic ordering by using the value of the bits themselves.  */\n-  if (order == 0)\n-    return total_flags_b - total_flags_a;\n+  if (order != 0)\n+    return order;\n \n-  return order;\n+  if (total_flags_a != total_flags_b)\n+    return total_flags_a < total_flags_b ? 1 : -1;\n+\n+  return 0;\n }\n \n /* Implement TARGET_OPTION_INIT_STRUCT.  */\n@@ -373,9 +376,9 @@ aarch64_option_init_struct (struct gcc_options *opts ATTRIBUTE_UNUSED)\n */\n \n static bool\n-aarch64_contains_opt (unsigned long isa_flag_bits, opt_ext *opt)\n+aarch64_contains_opt (uint64_t isa_flag_bits, opt_ext *opt)\n {\n-  unsigned long flags_check\n+  uint64_t flags_check\n     = opt->is_synthetic ? opt->flags_on : opt->flag_canonical;\n \n   return (isa_flag_bits & flags_check) == flags_check;\n@@ -388,13 +391,13 @@ aarch64_contains_opt (unsigned long isa_flag_bits, opt_ext *opt)\n    that all the \"+\" flags come before the \"+no\" flags.  */\n \n std::string\n-aarch64_get_extension_string_for_isa_flags (unsigned long isa_flags,\n-\t\t\t\t\t    unsigned long default_arch_flags)\n+aarch64_get_extension_string_for_isa_flags (uint64_t isa_flags,\n+\t\t\t\t\t    uint64_t default_arch_flags)\n {\n   const struct aarch64_option_extension *opt = NULL;\n   std::string outstr = \"\";\n \n-  unsigned long isa_flag_bits = isa_flags;\n+  uint64_t isa_flag_bits = isa_flags;\n \n   /* Pass one: Minimize the search space by reducing the set of options\n      to the smallest set that still turns on the same features as before in"}, {"sha": "4b10c62d20401a66374eb68e36531d73df300af1", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=28108a5341653568e9ebc49ea755ff93cc1e1711", "patch": "@@ -57,17 +57,20 @@\n \n /* Enabling \"fp\" just enables \"fp\".\n    Disabling \"fp\" also disables \"simd\", \"crypto\", \"fp16\", \"aes\", \"sha2\",\n-   \"sha3\", sm3/sm4 and \"sve\".  */\n-AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE, false, \"fp\")\n+   \"sha3\", sm3/sm4, \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\", and\n+   \"bitperm\".  */\n+AARCH64_OPT_EXTENSION(\"fp\", AARCH64_FL_FP, 0, AARCH64_FL_SIMD | AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE | AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \"fp\")\n \n /* Enabling \"simd\" also enables \"fp\".\n    Disabling \"simd\" also disables \"crypto\", \"dotprod\", \"aes\", \"sha2\", \"sha3\",\n-   \"sm3/sm4\" and \"sve\".  */\n-AARCH64_OPT_EXTENSION(\"simd\", AARCH64_FL_SIMD, AARCH64_FL_FP, AARCH64_FL_CRYPTO | AARCH64_FL_DOTPROD | AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE, false, \"asimd\")\n+   \"sm3/sm4\", \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\", and \"bitperm\".\n+   */\n+AARCH64_OPT_EXTENSION(\"simd\", AARCH64_FL_SIMD, AARCH64_FL_FP, AARCH64_FL_CRYPTO | AARCH64_FL_DOTPROD | AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE | AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \"asimd\")\n \n /* Enabling \"crypto\" also enables \"fp\", \"simd\", \"aes\" and \"sha2\".\n-   Disabling \"crypto\" disables \"crypto\", \"aes\", \"sha2\", \"sha3\" and \"sm3/sm4\".  */\n-AARCH64_OPT_EXTENSION(\"crypto\", AARCH64_FL_CRYPTO, AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_AES | AARCH64_FL_SHA2, AARCH64_FL_AES | AARCH64_FL_SHA2 |AARCH64_FL_SHA3 | AARCH64_FL_SM4, true, \"aes pmull sha1 sha2\")\n+   Disabling \"crypto\" disables \"crypto\", \"aes\", \"sha2\", \"sha3\" and \"sm3/sm4\",\n+   \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\".  */\n+AARCH64_OPT_EXTENSION(\"crypto\", AARCH64_FL_CRYPTO, AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_AES | AARCH64_FL_SHA2, AARCH64_FL_AES | AARCH64_FL_SHA2 | AARCH64_FL_SHA3 | AARCH64_FL_SM4 | AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4, true, \"aes pmull sha1 sha2\")\n \n /* Enabling or disabling \"crc\" only changes \"crc\".  */\n AARCH64_OPT_EXTENSION(\"crc\", AARCH64_FL_CRC, 0, 0, false, \"crc32\")\n@@ -76,8 +79,9 @@ AARCH64_OPT_EXTENSION(\"crc\", AARCH64_FL_CRC, 0, 0, false, \"crc32\")\n AARCH64_OPT_EXTENSION(\"lse\", AARCH64_FL_LSE, 0, 0, false, \"atomics\")\n \n /* Enabling \"fp16\" also enables \"fp\".\n-   Disabling \"fp16\" disables \"fp16\", \"fp16fml\" and \"sve\".  */\n-AARCH64_OPT_EXTENSION(\"fp16\", AARCH64_FL_F16, AARCH64_FL_FP, AARCH64_FL_F16FML | AARCH64_FL_SVE, false, \"fphp asimdhp\")\n+   Disabling \"fp16\" disables \"fp16\", \"fp16fml\", \"sve\", \"sve2\", \"sve2-aes\",\n+   \"sve2-sha3\", \"sve2-sm4\", and \"bitperm\".  */\n+AARCH64_OPT_EXTENSION(\"fp16\", AARCH64_FL_F16, AARCH64_FL_FP, AARCH64_FL_F16FML | AARCH64_FL_SVE | AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \"fphp asimdhp\")\n \n /* Enabling or disabling \"rcpc\" only changes \"rcpc\".  */\n AARCH64_OPT_EXTENSION(\"rcpc\", AARCH64_FL_RCPC, 0, 0, false, \"lrcpc\")\n@@ -91,28 +95,29 @@ AARCH64_OPT_EXTENSION(\"rdma\", AARCH64_FL_RDMA, AARCH64_FL_FP | AARCH64_FL_SIMD,\n AARCH64_OPT_EXTENSION(\"dotprod\", AARCH64_FL_DOTPROD, AARCH64_FL_SIMD, 0, false, \"asimddp\")\n \n /* Enabling \"aes\" also enables \"simd\".\n-   Disabling \"aes\" just disables \"aes\".  */\n-AARCH64_OPT_EXTENSION(\"aes\", AARCH64_FL_AES, AARCH64_FL_SIMD, 0, false, \"aes\")\n+   Disabling \"aes\" disables \"aes\" and \"sve2-aes'.  */\n+AARCH64_OPT_EXTENSION(\"aes\", AARCH64_FL_AES, AARCH64_FL_SIMD, AARCH64_FL_SVE2_AES, false, \"aes\")\n \n /* Enabling \"sha2\" also enables \"simd\".\n    Disabling \"sha2\" just disables \"sha2\".  */\n AARCH64_OPT_EXTENSION(\"sha2\", AARCH64_FL_SHA2, AARCH64_FL_SIMD, 0, false, \"sha1 sha2\")\n \n /* Enabling \"sha3\" enables \"simd\" and \"sha2\".\n-   Disabling \"sha3\" just disables \"sha3\".  */\n-AARCH64_OPT_EXTENSION(\"sha3\", AARCH64_FL_SHA3, AARCH64_FL_SIMD | AARCH64_FL_SHA2, 0, false, \"sha3 sha512\")\n+   Disabling \"sha3\" disables \"sha3\" and \"sve2-sha3\".  */\n+AARCH64_OPT_EXTENSION(\"sha3\", AARCH64_FL_SHA3, AARCH64_FL_SIMD | AARCH64_FL_SHA2, AARCH64_FL_SVE2_SHA3, false, \"sha3 sha512\")\n \n /* Enabling \"sm4\" also enables \"simd\".\n-   Disabling \"sm4\" just disables \"sm4\".  */\n-AARCH64_OPT_EXTENSION(\"sm4\", AARCH64_FL_SM4, AARCH64_FL_SIMD, 0, false, \"sm3 sm4\")\n+   Disabling \"sm4\" disables \"sm4\" and \"sve2-sm4\".  */\n+AARCH64_OPT_EXTENSION(\"sm4\", AARCH64_FL_SM4, AARCH64_FL_SIMD, AARCH64_FL_SVE2_SM4, false, \"sm3 sm4\")\n \n /* Enabling \"fp16fml\" also enables \"fp\" and \"fp16\".\n    Disabling \"fp16fml\" just disables \"fp16fml\".  */\n AARCH64_OPT_EXTENSION(\"fp16fml\", AARCH64_FL_F16FML, AARCH64_FL_FP | AARCH64_FL_F16, 0, false, \"asimdfml\")\n \n /* Enabling \"sve\" also enables \"fp16\", \"fp\" and \"simd\".\n-   Disabling \"sve\" just disables \"sve\".  */\n-AARCH64_OPT_EXTENSION(\"sve\", AARCH64_FL_SVE, AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_F16, 0, false, \"sve\")\n+   Disabling \"sve\" disables \"sve\", \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\"\n+   and \"bitperm\".  */\n+AARCH64_OPT_EXTENSION(\"sve\", AARCH64_FL_SVE, AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_F16, AARCH64_FL_SVE2 | AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \"sve\")\n \n /* Enabling/Disabling \"profile\" does not enable/disable any other feature.  */\n AARCH64_OPT_EXTENSION(\"profile\", AARCH64_FL_PROFILE, 0, 0, false, \"\")\n@@ -132,4 +137,25 @@ AARCH64_OPT_EXTENSION(\"ssbs\", AARCH64_FL_SSBS, 0, 0, false, \"\")\n /* Enabling/Disabling \"predres\" only changes \"predres\".  */\n AARCH64_OPT_EXTENSION(\"predres\", AARCH64_FL_PREDRES, 0, 0, false, \"\")\n \n+/* Enabling \"sve2\" also enables \"sve\", \"fp16\", \"fp\", and \"simd\".\n+   Disabling \"sve2\" disables \"sve2\", \"sve2-aes\", \"sve2-sha3\", \"sve2-sm4\", and\n+   \"bitperm\".  */\n+AARCH64_OPT_EXTENSION(\"sve2\", AARCH64_FL_SVE2, AARCH64_FL_SVE | AARCH64_FL_FP | AARCH64_FL_SIMD | AARCH64_FL_F16, AARCH64_FL_SVE2_AES | AARCH64_FL_SVE2_SHA3 | AARCH64_FL_SVE2_SM4 | AARCH64_FL_SVE2_BITPERM, false, \"\")\n+\n+/* Enabling \"sve2-sm4\" also enables \"sm4\", \"simd\", \"fp16\", \"fp\", \"sve\", and\n+   \"sve2\". Disabling \"sve2-sm4\" just disables \"sve2-sm4\".  */\n+AARCH64_OPT_EXTENSION(\"sve2-sm4\", AARCH64_FL_SVE2_SM4, AARCH64_FL_SM4 | AARCH64_FL_SIMD | AARCH64_FL_F16 | AARCH64_FL_FP | AARCH64_FL_SVE | AARCH64_FL_SVE2, 0, false, \"\")\n+\n+/* Enabling \"sve2-aes\" also enables \"aes\", \"simd\", \"fp16\", \"fp\", \"sve\", and\n+   \"sve2\". Disabling \"sve2-aes\" just disables \"sve2-aes\".  */\n+AARCH64_OPT_EXTENSION(\"sve2-aes\", AARCH64_FL_SVE2_AES, AARCH64_FL_AES | AARCH64_FL_SIMD | AARCH64_FL_F16 | AARCH64_FL_FP | AARCH64_FL_SVE | AARCH64_FL_SVE2, 0, false, \"\")\n+\n+/* Enabling \"sve2-sha3\" also enables \"sha3\", \"simd\", \"fp16\", \"fp\", \"sve\", and\n+   \"sve2\". Disabling \"sve2-sha3\" just disables \"sve2-sha3\".  */\n+AARCH64_OPT_EXTENSION(\"sve2-sha3\", AARCH64_FL_SVE2_SHA3, AARCH64_FL_SHA3 | AARCH64_FL_SIMD | AARCH64_FL_F16 | AARCH64_FL_FP | AARCH64_FL_SVE | AARCH64_FL_SVE2, 0, false, \"\")\n+\n+/* Enabling \"bitperm\" also enables \"simd\", \"fp16\", \"fp\", \"sve\", and \"sve2\".\n+   Disabling \"bitperm\" just disables \"bitperm\".  */\n+AARCH64_OPT_EXTENSION(\"bitperm\", AARCH64_FL_SVE2_BITPERM, AARCH64_FL_SIMD | AARCH64_FL_F16 | AARCH64_FL_FP | AARCH64_FL_SVE | AARCH64_FL_SVE2, 0, false, \"\")\n+\n #undef AARCH64_OPT_EXTENSION"}, {"sha": "83453d03095018eddd1801e71ef3836849267444", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=28108a5341653568e9ebc49ea755ff93cc1e1711", "patch": "@@ -177,7 +177,7 @@ unsigned aarch64_architecture_version;\n enum aarch64_processor aarch64_tune = cortexa53;\n \n /* Mask to specify which instruction scheduling options should be used.  */\n-unsigned long aarch64_tune_flags = 0;\n+uint64_t aarch64_tune_flags = 0;\n \n /* Global flag for PC relative loads.  */\n bool aarch64_pcrelative_literal_loads;\n@@ -1139,7 +1139,7 @@ struct processor\n   enum aarch64_processor sched_core;\n   enum aarch64_arch arch;\n   unsigned architecture_version;\n-  const unsigned long flags;\n+  const uint64_t flags;\n   const struct tune_params *const tune;\n };\n \n@@ -11043,7 +11043,7 @@ static void initialize_aarch64_code_model (struct gcc_options *);\n \n static enum aarch64_parse_opt_result\n aarch64_parse_arch (const char *to_parse, const struct processor **res,\n-\t\t    unsigned long *isa_flags, std::string *invalid_extension)\n+\t\t    uint64_t *isa_flags, std::string *invalid_extension)\n {\n   const char *ext;\n   const struct processor *arch;\n@@ -11066,7 +11066,7 @@ aarch64_parse_arch (const char *to_parse, const struct processor **res,\n       if (strlen (arch->name) == len\n \t  && strncmp (arch->name, to_parse, len) == 0)\n \t{\n-\t  unsigned long isa_temp = arch->flags;\n+\t  uint64_t isa_temp = arch->flags;\n \n \t  if (ext != NULL)\n \t    {\n@@ -11098,7 +11098,7 @@ aarch64_parse_arch (const char *to_parse, const struct processor **res,\n \n static enum aarch64_parse_opt_result\n aarch64_parse_cpu (const char *to_parse, const struct processor **res,\n-\t\t   unsigned long *isa_flags, std::string *invalid_extension)\n+\t\t   uint64_t *isa_flags, std::string *invalid_extension)\n {\n   const char *ext;\n   const struct processor *cpu;\n@@ -11120,7 +11120,7 @@ aarch64_parse_cpu (const char *to_parse, const struct processor **res,\n     {\n       if (strlen (cpu->name) == len && strncmp (cpu->name, to_parse, len) == 0)\n \t{\n-\t  unsigned long isa_temp = cpu->flags;\n+\t  uint64_t isa_temp = cpu->flags;\n \n \n \t  if (ext != NULL)\n@@ -11705,7 +11705,7 @@ aarch64_print_hint_for_extensions (const std::string &str)\n \n static bool\n aarch64_validate_mcpu (const char *str, const struct processor **res,\n-\t\t       unsigned long *isa_flags)\n+\t\t       uint64_t *isa_flags)\n {\n   std::string invalid_extension;\n   enum aarch64_parse_opt_result parse_res\n@@ -11846,7 +11846,7 @@ aarch64_validate_mbranch_protection (const char *const_str)\n \n static bool\n aarch64_validate_march (const char *str, const struct processor **res,\n-\t\t\t unsigned long *isa_flags)\n+\t\t\t uint64_t *isa_flags)\n {\n   std::string invalid_extension;\n   enum aarch64_parse_opt_result parse_res\n@@ -11961,8 +11961,8 @@ aarch64_convert_sve_vector_bits (aarch64_sve_vector_bits_enum value)\n static void\n aarch64_override_options (void)\n {\n-  unsigned long cpu_isa = 0;\n-  unsigned long arch_isa = 0;\n+  uint64_t cpu_isa = 0;\n+  uint64_t arch_isa = 0;\n   aarch64_isa_flags = 0;\n \n   bool valid_cpu = true;\n@@ -12202,7 +12202,7 @@ aarch64_option_print (FILE *file, int indent, struct cl_target_option *ptr)\n {\n   const struct processor *cpu\n     = aarch64_get_tune_cpu (ptr->x_explicit_tune_core);\n-  unsigned long isa_flags = ptr->x_aarch64_isa_flags;\n+  uint64_t isa_flags = ptr->x_aarch64_isa_flags;\n   const struct processor *arch = aarch64_get_arch (ptr->x_explicit_arch);\n   std::string extension\n     = aarch64_get_extension_string_for_isa_flags (isa_flags, arch->flags);\n@@ -12455,7 +12455,7 @@ static bool\n aarch64_handle_attr_isa_flags (char *str)\n {\n   enum aarch64_parse_opt_result parse_res;\n-  unsigned long isa_flags = aarch64_isa_flags;\n+  uint64_t isa_flags = aarch64_isa_flags;\n \n   /* We allow \"+nothing\" in the beginning to clear out all architectural\n      features if the user wants to handpick specific features.  */\n@@ -15299,7 +15299,7 @@ aarch64_declare_function_name (FILE *stream, const char* name,\n   const struct processor *this_arch\n     = aarch64_get_arch (targ_options->x_explicit_arch);\n \n-  unsigned long isa_flags = targ_options->x_aarch64_isa_flags;\n+  uint64_t isa_flags = targ_options->x_aarch64_isa_flags;\n   std::string extension\n     = aarch64_get_extension_string_for_isa_flags (isa_flags,\n \t\t\t\t\t\t  this_arch->flags);\n@@ -15340,7 +15340,7 @@ aarch64_start_file (void)\n \n   const struct processor *default_arch\n     = aarch64_get_arch (default_options->x_explicit_arch);\n-  unsigned long default_isa_flags = default_options->x_aarch64_isa_flags;\n+  uint64_t default_isa_flags = default_options->x_aarch64_isa_flags;\n   std::string extension\n     = aarch64_get_extension_string_for_isa_flags (default_isa_flags,\n \t\t\t\t\t\t  default_arch->flags);"}, {"sha": "be6981889ab6a796183ef1fd96c3af99243f4466", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=28108a5341653568e9ebc49ea755ff93cc1e1711", "patch": "@@ -192,6 +192,13 @@ extern unsigned aarch64_architecture_version;\n /* Execution and Data Prediction Restriction instructions supported.  */\n #define AARCH64_FL_PREDRES    (1 << 27)\n \n+/* SVE2 instruction supported.  */\n+#define AARCH64_FL_SVE2\t\t(1 << 28)\n+#define AARCH64_FL_SVE2_AES\t(1 << 29)\n+#define AARCH64_FL_SVE2_SM4\t(1 << 30)\n+#define AARCH64_FL_SVE2_SHA3\t(1ULL << 31)\n+#define AARCH64_FL_SVE2_BITPERM\t(1ULL << 32)\n+\n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n "}, {"sha": "2c8b22c3b09a6000dc79913586dcaa00b80b50b9", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=28108a5341653568e9ebc49ea755ff93cc1e1711", "patch": "@@ -31,7 +31,7 @@ TargetSave\n const char *x_aarch64_override_tune_string\n \n TargetVariable\n-unsigned long aarch64_isa_flags = 0\n+uint64_t aarch64_isa_flags = 0\n \n TargetVariable\n unsigned aarch64_enable_bti = 2"}, {"sha": "ef4f183524868b3b1ea444a2f132ac63d1235c3a", "filename": "gcc/config/aarch64/driver-aarch64.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c?ref=28108a5341653568e9ebc49ea755ff93cc1e1711", "patch": "@@ -32,7 +32,7 @@ std::string aarch64_get_extension_string_for_isa_flags (unsigned long,\n struct aarch64_arch_extension\n {\n   const char *ext;\n-  unsigned int flag;\n+  uint64_t flag;\n   const char *feat_string;\n };\n \n@@ -52,7 +52,7 @@ struct aarch64_core_data\n   unsigned char implementer_id; /* Exactly 8 bits */\n   unsigned int part_no; /* 12 bits + 12 bits */\n   unsigned variant;\n-  const unsigned long flags;\n+  const uint64_t flags;\n };\n \n #define AARCH64_BIG_LITTLE(BIG, LITTLE) \\\n@@ -75,7 +75,7 @@ struct aarch64_arch_driver_info\n {\n   const char* id;\n   const char* name;\n-  const unsigned long flags;\n+  const uint64_t flags;\n };\n \n #define AARCH64_ARCH(NAME, CORE, ARCH_IDENT, ARCH_REV, FLAGS) \\\n@@ -179,8 +179,8 @@ host_detect_local_cpu (int argc, const char **argv)\n   unsigned int variants[2] = { ALL_VARIANTS, ALL_VARIANTS };\n   unsigned int n_variants = 0;\n   bool processed_exts = false;\n-  unsigned long extension_flags = 0;\n-  unsigned long default_flags = 0;\n+  uint64_t extension_flags = 0;\n+  uint64_t default_flags = 0;\n \n   gcc_assert (argc);\n "}, {"sha": "6c89843ef2b94bfa916e41624c396b5a89fb2fa8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28108a5341653568e9ebc49ea755ff93cc1e1711/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=28108a5341653568e9ebc49ea755ff93cc1e1711", "patch": "@@ -16008,6 +16008,17 @@ generation.  This option is enabled by default for @option{-march=armv8.5-a}.\n Enable the Armv8-a Execution and Data Prediction Restriction instructions.\n This option is only to enable the extension at the assembler level and does\n not affect code generation.  This option is enabled by default for\n+@item sve2\n+Enable the Armv8-a Scalable Vector Extension 2.  This also enables SVE\n+instructions.\n+@item bitperm\n+Enable SVE2 bitperm instructions.  This also enables SVE2 instructions.\n+@item sve2-sm4\n+Enable SVE2 sm4 instructions.  This also enables SVE2 instructions.\n+@item sve2-aes\n+Enable SVE2 aes instructions.  This also enables SVE2 instructions.\n+@item sve2-sha3\n+Enable SVE2 sha3 instructions.  This also enables SVE2 instructions.\n @option{-march=armv8.5-a}.\n \n @end table"}]}