{"sha": "f788537d682b78a5496276da4e35c8462317175f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc4ODUzN2Q2ODJiNzhhNTQ5NjI3NmRhNGUzNWM4NDYyMzE3MTc1Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-06T20:57:03Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-06T20:57:03Z"}, "message": "compiler: typing fixes for Interface_mtable_expression\n    \n    Interface_mtable_expression::do_type computes a type that incorporates\n    Go type descriptors for the interface methods, whereas in order to\n    have strict type agreement with the mtable data, the interface method\n    fields need to be C function ptrs. Change the type recipe accordingly,\n    and then update Interface_mtable_expression::do_get_backend to compute\n    a revised backend type that uses the correct fcn types.\n    \n    Reviewed-on: https://go-review.googlesource.com/44750\n\nFrom-SVN: r248934", "tree": {"sha": "ebc21445074d9318af7561d390a57dd6c06bd2ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebc21445074d9318af7561d390a57dd6c06bd2ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f788537d682b78a5496276da4e35c8462317175f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f788537d682b78a5496276da4e35c8462317175f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f788537d682b78a5496276da4e35c8462317175f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f788537d682b78a5496276da4e35c8462317175f/comments", "author": null, "committer": null, "parents": [{"sha": "bbf974160054c4b8aa3f0f49084bb46521195a51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf974160054c4b8aa3f0f49084bb46521195a51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbf974160054c4b8aa3f0f49084bb46521195a51"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "df16770883ef14e370e828a19d34af4927ba3039", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f788537d682b78a5496276da4e35c8462317175f/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f788537d682b78a5496276da4e35c8462317175f/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=f788537d682b78a5496276da4e35c8462317175f", "patch": "@@ -1,4 +1,4 @@\n-e5870eac67d4d5b1f86bdbfb13dadf4d5723f71d\n+7e3904e4370ccfd9062c2661c612476288244e17\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a656b0681a18bbef73f24a2a4ccea925b454c63c", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f788537d682b78a5496276da4e35c8462317175f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f788537d682b78a5496276da4e35c8462317175f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=f788537d682b78a5496276da4e35c8462317175f", "patch": "@@ -10156,9 +10156,13 @@ Call_expression::do_must_eval_in_order() const\n Expression*\n Call_expression::interface_method_function(\n     Interface_field_reference_expression* interface_method,\n-    Expression** first_arg_ptr)\n+    Expression** first_arg_ptr,\n+    Location location)\n {\n-  *first_arg_ptr = interface_method->get_underlying_object();\n+  Expression* object = interface_method->get_underlying_object();\n+  Type* unsafe_ptr_type = Type::make_pointer_type(Type::make_void_type());\n+  *first_arg_ptr =\n+      Expression::make_unsafe_cast(unsafe_ptr_type, object, location);\n   return interface_method->get_function();\n }\n \n@@ -10267,7 +10271,8 @@ Call_expression::do_get_backend(Translate_context* context)\n   else\n     {\n       Expression* first_arg;\n-      fn = this->interface_method_function(interface_method, &first_arg);\n+      fn = this->interface_method_function(interface_method, &first_arg,\n+                                           location);\n       fn_args[0] = first_arg->get_backend(context);\n     }\n \n@@ -15392,10 +15397,16 @@ Interface_mtable_expression::do_type()\n   Typed_identifier tid(\"__type_descriptor\", Type::make_type_descriptor_ptr_type(),\n                        this->location());\n   sfl->push_back(Struct_field(tid));\n+  Type* unsafe_ptr_type = Type::make_pointer_type(Type::make_void_type());\n   for (Typed_identifier_list::const_iterator p = interface_methods->begin();\n        p != interface_methods->end();\n        ++p)\n-    sfl->push_back(Struct_field(*p));\n+    {\n+      // We want C function pointers here, not func descriptors; model\n+      // using void* pointers.\n+      Typed_identifier method(p->name(), unsafe_ptr_type, p->location());\n+      sfl->push_back(Struct_field(method));\n+    }\n   Struct_type* st = Type::make_struct_type(sfl, this->location());\n   st->set_is_struct_incomparable();\n   this->method_table_type_ = st;\n@@ -15456,11 +15467,18 @@ Interface_mtable_expression::do_get_backend(Translate_context* context)\n   else\n     td_type = Type::make_pointer_type(this->type_);\n \n+  std::vector<Backend::Btyped_identifier> bstructfields;\n+\n   // Build an interface method table for a type: a type descriptor followed by a\n   // list of function pointers, one for each interface method.  This is used for\n   // interfaces.\n   Expression_list* svals = new Expression_list();\n-  svals->push_back(Expression::make_type_descriptor(td_type, loc));\n+  Expression* tdescriptor = Expression::make_type_descriptor(td_type, loc);\n+  svals->push_back(tdescriptor);\n+\n+  Btype* tdesc_btype = tdescriptor->type()->get_backend(gogo);\n+  Backend::Btyped_identifier btd(\"_type\", tdesc_btype, loc);\n+  bstructfields.push_back(btd);\n \n   Named_type* nt = this->type_->named_type();\n   Struct_type* st = this->type_->struct_type();\n@@ -15480,13 +15498,24 @@ Interface_mtable_expression::do_get_backend(Translate_context* context)\n       Named_object* no = m->named_object();\n \n       go_assert(no->is_function() || no->is_function_declaration());\n+\n+      Btype* fcn_btype = m->type()->get_backend_fntype(gogo);\n+      Backend::Btyped_identifier bmtype(p->name(), fcn_btype, loc);\n+      bstructfields.push_back(bmtype);\n+\n       svals->push_back(Expression::make_func_code_reference(no, loc));\n     }\n \n-  Btype* btype = this->type()->get_backend(gogo);\n-  Expression* mtable = Expression::make_struct_composite_literal(this->type(),\n-                                                                 svals, loc);\n-  Bexpression* ctor = mtable->get_backend(context);\n+  Btype *btype = gogo->backend()->struct_type(bstructfields);\n+  std::vector<Bexpression*> ctor_bexprs;\n+  for (Expression_list::const_iterator pe = svals->begin();\n+       pe != svals->end();\n+       ++pe)\n+    {\n+      ctor_bexprs.push_back((*pe)->get_backend(context));\n+    }\n+  Bexpression* ctor =\n+      gogo->backend()->constructor_expression(btype, ctor_bexprs, loc);\n \n   bool is_public = has_hidden_methods && this->type_->named_type() != NULL;\n   std::string asm_name(go_selectively_encode_id(mangled_name));"}, {"sha": "43fb854e8d1bafcc688efe730eca50ccb35c7d8c", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f788537d682b78a5496276da4e35c8462317175f/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f788537d682b78a5496276da4e35c8462317175f/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=f788537d682b78a5496276da4e35c8462317175f", "patch": "@@ -2287,7 +2287,7 @@ class Call_expression : public Expression\n \n   Expression*\n   interface_method_function(Interface_field_reference_expression*,\n-\t\t\t    Expression**);\n+\t\t\t    Expression**, Location);\n \n   Bexpression*\n   set_results(Translate_context*);"}]}