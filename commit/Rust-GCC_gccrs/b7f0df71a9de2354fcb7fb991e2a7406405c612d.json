{"sha": "b7f0df71a9de2354fcb7fb991e2a7406405c612d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdmMGRmNzFhOWRlMjM1NGZjYjdmYjk5MWUyYTc0MDY0MDVjNjEyZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-05-29T07:44:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-05-29T07:44:50Z"}, "message": "P1091R3 - Extending structured bindings to be more like var decls P1381R1 - Reference capture of structured bindings\n\n\tP1091R3 - Extending structured bindings to be more like var decls\n\tP1381R1 - Reference capture of structured bindings\n\t* decl.c (cp_maybe_mangle_decomp): Handle TREE_STATIC decls even at\n\tfunction scope.\n\t(cp_finish_decomp): Copy over various decl properties from decl to\n\tv[i] in the tuple case.\n\t(grokdeclarator): Allow static, thread_local and __thread for C++2a\n\tand use pedwarn instead of error for older standard revisions.\n\tMake other structured binding diagnostic messages more i18n friendly.\n\n\t* g++.dg/cpp1z/decomp3.C (test): For static, expect only warning\n\tinstead of error and only for c++17_down.  Add a thread_local test.\n\t(z2): Add a __thread test.\n\t* g++.dg/cpp2a/decomp1.C: New test.\n\t* g++.dg/cpp2a/decomp1-aux.cc: New file.\n\t* g++.dg/cpp2a/decomp2.C: New test.\n\t* g++.dg/cpp2a/decomp3.C: New test.\n\nFrom-SVN: r271730", "tree": {"sha": "664035c798dd7103c37102b0e519d9445c3ebf65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/664035c798dd7103c37102b0e519d9445c3ebf65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7f0df71a9de2354fcb7fb991e2a7406405c612d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7f0df71a9de2354fcb7fb991e2a7406405c612d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7f0df71a9de2354fcb7fb991e2a7406405c612d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7f0df71a9de2354fcb7fb991e2a7406405c612d/comments", "author": null, "committer": null, "parents": [{"sha": "2186b5d022d787d76a7311f0bd37d3597ab72ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2186b5d022d787d76a7311f0bd37d3597ab72ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2186b5d022d787d76a7311f0bd37d3597ab72ab8"}], "stats": {"total": 325, "additions": 299, "deletions": 26}, "files": [{"sha": "99d75574d51594962c71fba60591718b9a30f3ce", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 47, "deletions": 25, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f0df71a9de2354fcb7fb991e2a7406405c612d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f0df71a9de2354fcb7fb991e2a7406405c612d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b7f0df71a9de2354fcb7fb991e2a7406405c612d", "patch": "@@ -7626,7 +7626,7 @@ cp_maybe_mangle_decomp (tree decl, tree first, unsigned int count)\n {\n   if (!processing_template_decl\n       && !error_operand_p (decl)\n-      && DECL_NAMESPACE_SCOPE_P (decl))\n+      && TREE_STATIC (decl))\n     {\n       auto_vec<tree, 16> v;\n       v.safe_grow (count);\n@@ -7857,8 +7857,27 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t      DECL_HAS_VALUE_EXPR_P (v[i]) = 0;\n \t    }\n \t  if (!processing_template_decl)\n-\t    cp_finish_decl (v[i], init, /*constexpr*/false,\n-\t\t\t    /*asm*/NULL_TREE, LOOKUP_NORMAL);\n+\t    {\n+\t      TREE_PUBLIC (v[i]) = TREE_PUBLIC (decl);\n+\t      TREE_STATIC (v[i]) = TREE_STATIC (decl);\n+\t      DECL_COMMON (v[i]) = DECL_COMMON (decl);\n+\t      DECL_COMDAT (v[i]) = DECL_COMDAT (decl);\n+\t      if (TREE_STATIC (v[i]))\n+\t\t{\n+\t\t  CP_DECL_THREAD_LOCAL_P (v[i])\n+\t\t    = CP_DECL_THREAD_LOCAL_P (decl);\n+\t\t  set_decl_tls_model (v[i], DECL_TLS_MODEL (decl));\n+\t\t  if (DECL_ONE_ONLY (decl))\n+\t\t    make_decl_one_only (v[i], cxx_comdat_group (v[i]));\n+\t\t  if (TREE_PUBLIC (decl))\n+\t\t    DECL_WEAK (v[i]) = DECL_WEAK (decl);\n+\t\t  DECL_VISIBILITY (v[i]) = DECL_VISIBILITY (decl);\n+\t\t  DECL_VISIBILITY_SPECIFIED (v[i])\n+\t\t    = DECL_VISIBILITY_SPECIFIED (decl);\n+\t\t}\n+\t      cp_finish_decl (v[i], init, /*constexpr*/false,\n+\t\t\t      /*asm*/NULL_TREE, LOOKUP_NORMAL);\n+\t    }\n \t}\n       /* Ignore reads from the underlying decl performed during initialization\n \t of the individual variables.  If those will be read, we'll mark\n@@ -11067,40 +11086,43 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t? declarator->declarator->id_loc : declarator->id_loc);\n       if (inlinep)\n \terror_at (declspecs->locations[ds_inline],\n-\t\t  \"structured binding declaration cannot be %<inline%>\");\n+\t\t  \"structured binding declaration cannot be %qs\", \"inline\");\n       if (typedef_p)\n \terror_at (declspecs->locations[ds_typedef],\n-\t\t  \"structured binding declaration cannot be %<typedef%>\");\n+\t\t  \"structured binding declaration cannot be %qs\", \"typedef\");\n       if (constexpr_p)\n \terror_at (declspecs->locations[ds_constexpr], \"structured \"\n-\t\t  \"binding declaration cannot be %<constexpr%>\");\n-      if (thread_p)\n-\terror_at (declspecs->locations[ds_thread],\n-\t\t  \"structured binding declaration cannot be %qs\",\n-\t\t  declspecs->gnu_thread_keyword_p\n-\t\t  ? \"__thread\" : \"thread_local\");\n+\t\t  \"binding declaration cannot be %qs\", \"constexpr\");\n+      if (thread_p && cxx_dialect < cxx2a)\n+\tpedwarn (declspecs->locations[ds_thread], 0,\n+\t\t \"structured binding declaration can be %qs only in \"\n+\t\t \"%<-std=c++2a%> or %<-std=gnu++2a%>\",\n+\t\t declspecs->gnu_thread_keyword_p\n+\t\t ? \"__thread\" : \"thread_local\");\n       if (concept_p)\n \terror_at (declspecs->locations[ds_concept],\n-\t\t  \"structured binding declaration cannot be %<concept%>\");\n+\t\t  \"structured binding declaration cannot be %qs\", \"concept\");\n       switch (storage_class)\n \t{\n \tcase sc_none:\n \t  break;\n \tcase sc_register:\n-\t  error_at (loc, \"structured binding declaration cannot be \"\n-\t\t    \"%<register%>\");\n+\t  error_at (loc, \"structured binding declaration cannot be %qs\",\n+\t\t    \"register\");\n \t  break;\n \tcase sc_static:\n-\t  error_at (loc, \"structured binding declaration cannot be \"\n-\t\t    \"%<static%>\");\n+\t  if (cxx_dialect < cxx2a)\n+\t    pedwarn (loc, 0,\n+\t\t     \"structured binding declaration can be %qs only in \"\n+\t\t     \"%<-std=c++2a%> or %<-std=gnu++2a%>\", \"static\");\n \t  break;\n \tcase sc_extern:\n-\t  error_at (loc, \"structured binding declaration cannot be \"\n-\t\t    \"%<extern%>\");\n+\t  error_at (loc, \"structured binding declaration cannot be %qs\",\n+\t\t    \"extern\");\n \t  break;\n \tcase sc_mutable:\n-\t  error_at (loc, \"structured binding declaration cannot be \"\n-\t\t    \"%<mutable%>\");\n+\t  error_at (loc, \"structured binding declaration cannot be %qs\",\n+\t\t    \"mutable\");\n \t  break;\n \tcase sc_auto:\n \t  error_at (loc, \"structured binding declaration cannot be \"\n@@ -11126,12 +11148,12 @@ grokdeclarator (const cp_declarator *declarator,\n       inlinep = 0;\n       typedef_p = 0;\n       constexpr_p = 0;\n-      thread_p = 0;\n       concept_p = 0;\n-      storage_class = sc_none;\n-      staticp = 0;\n-      declspecs->storage_class = sc_none;\n-      declspecs->locations[ds_thread] = UNKNOWN_LOCATION;\n+      if (storage_class != sc_static)\n+\t{\n+\t  storage_class = sc_none;\n+\t  declspecs->storage_class = sc_none;\n+\t}\n     }\n \n   /* Static anonymous unions are dealt with here.  */"}, {"sha": "a9b23b08d83afc229689ffa135aa2a0a32630de7", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp3.C", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f0df71a9de2354fcb7fb991e2a7406405c612d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f0df71a9de2354fcb7fb991e2a7406405c612d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp3.C?ref=b7f0df71a9de2354fcb7fb991e2a7406405c612d", "patch": "@@ -35,12 +35,17 @@ test (A &b, B c)\n \t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   explicit auto [ w ] = c;\t\t// { dg-error \"'explicit' outside class declaration\" }\n \t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n-  static auto [ x ] = c;\t\t// { dg-error \"structured binding declaration cannot be 'static'\" }\n+  static auto [ x ] = c;\t\t// { dg-warning \"structured binding declaration can be 'static' only in\" \"\" { target c++17_down } }\n \t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n   extern auto [ y ] { c };\t\t// { dg-error \"structured binding declaration cannot be 'extern'\" }\n \t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n+  thread_local auto [ z ] = c;\t\t// { dg-warning \"structured binding declaration can be 'thread_local' only in\" \"\" { target c++17_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n }\n \n+__thread auto [ z2 ] = B ();\t\t// { dg-warning \"structured binding declaration can be '__thread' only in\" \"\" { target c++17_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with '-std=c..17' or '-std=gnu..17'\" \"\" { target c++14_down } .-1 }\n+\n void\n test2 (auto & [ p ] = bar ())\t\t// { dg-error \"'p' was not declared in this scope\" }\n {\t\t\t\t\t// { dg-warning \"auto\" \"\" { target { ! concepts } } .-1 }"}, {"sha": "2aaa2dfc50b6144d762d3de4bdc171f8bd12d16a", "filename": "gcc/testsuite/g++.dg/cpp2a/decomp1-aux.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f0df71a9de2354fcb7fb991e2a7406405c612d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp1-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f0df71a9de2354fcb7fb991e2a7406405c612d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp1-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp1-aux.cc?ref=b7f0df71a9de2354fcb7fb991e2a7406405c612d", "patch": "@@ -0,0 +1,52 @@\n+// P1091R3\n+// { dg-do compile { target { c++17 && c++14_down } } }\n+\n+namespace std {\n+  template<typename T> struct tuple_size;\n+  template<int, typename> struct tuple_element;\n+}\n+\n+struct A {\n+  int i;\n+  A(int x) : i(x) {}\n+  template <int I> int& get() { return i; }\n+};\n+struct B { int a, b, c; };\n+\n+template<> struct std::tuple_size<A> { static const int value = 2; };\n+template<int I> struct std::tuple_element<I,A> { using type = int; };\n+\n+B s = { 1, 2, 3 };\n+\n+#line 1\n+static auto [ d, e, f ] = s;\n+static auto [ g, h ] = A (42);\n+\n+int &\n+foo (int x)\n+{\n+  switch (x)\n+    {\n+    case 0: return d;\n+    case 1: return e;\n+    case 2: return f;\n+    case 3: return g;\n+    default: return h;\n+    }\n+}\n+\n+int\n+bar (int x)\n+{\n+#line 3\n+  static auto [ m, n, o ] = s;\n+  static auto [ p, q ] = A (43);\n+  switch (x)\n+    {\n+    case 0: return ++m;\n+    case 1: return ++n;\n+    case 2: return ++o;\n+    case 3: return ++p;\n+    default: return ++q;\n+    }\n+}"}, {"sha": "7f7dab534b916f3a2d2bcf68b330c68d788306a9", "filename": "gcc/testsuite/g++.dg/cpp2a/decomp1.C", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f0df71a9de2354fcb7fb991e2a7406405c612d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f0df71a9de2354fcb7fb991e2a7406405c612d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp1.C?ref=b7f0df71a9de2354fcb7fb991e2a7406405c612d", "patch": "@@ -0,0 +1,92 @@\n+// P1091R3\n+// { dg-do run { target c++11 } }\n+// { dg-options \"\" }\n+// { dg-additional-sources decomp1-aux.cc }\n+\n+namespace std {\n+  template<typename T> struct tuple_size;\n+  template<int, typename> struct tuple_element;\n+}\n+\n+struct A {\n+  int i;\n+  A(int x) : i(x) {}\n+  template <int I> int& get() { return i; }\n+};\n+struct B { int a, b, c; };\n+\n+template<> struct std::tuple_size<A> { static const int value = 2; };\n+template<int I> struct std::tuple_element<I,A> { using type = int; };\n+\n+extern int &foo (int);\n+extern int bar (int);\n+extern B s;\n+extern \"C\" void abort ();\n+B t = { 4, 5, 6 };\n+\n+static auto [ d, e, f ] = t;\t// { dg-warning \"structured binding declaration can be 'static' only\" \"\" { target c++17_down } }\n+\t\t\t\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } .-1 }\n+static auto [ g, h ] = A (44);\t// { dg-warning \"structured binding declaration can be 'static' only\" \"\" { target c++17_down } }\n+\t\t\t\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } .-1  }\n+// The following warnings are in decomp1-aux.cc with #line directive.\n+// { dg-warning \"structured binding declaration can be 'static' only\" \"\" { target c++17_down } 1 }\n+// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } 1 }\n+// { dg-warning \"structured binding declaration can be 'static' only\" \"\" { target c++17_down } 2 }\n+// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } 2 }\n+// { dg-warning \"structured binding declaration can be 'static' only\" \"\" { target c++17_down } 3 }\n+// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } 3 }\n+// { dg-warning \"structured binding declaration can be 'static' only\" \"\" { target c++17_down } 4 }\n+// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } 4 }\n+\n+int &\n+baz (int x)\n+{\n+  switch (x)\n+    {\n+    case 0: return d;\n+    case 1: return e;\n+    case 2: return f;\n+    case 3: return g;\n+    default: return h;\n+    }\n+}\n+\n+int\n+qux (int x)\n+{\n+  static auto [ m, n, o ] = t;\t// { dg-warning \"structured binding declaration can be 'static' only\" \"\" { target c++17_down } }\n+\t\t\t\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } .-1  }\n+  static auto [ p, q ] = A (45);\t// { dg-warning \"structured binding declaration can be 'static' only\" \"\" { target c++17_down } }\n+\t\t\t\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } .-1  }\n+  switch (x)\n+    {\n+    case 0: return ++m;\n+    case 1: return ++n;\n+    case 2: return ++o;\n+    case 3: return ++p;\n+    default: return ++q;\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  int *a[10];\n+  for (int i = 0; i < 5; ++i)\n+    {\n+      a[i] = &foo (i);\n+      a[i + 5] = &baz (i);\n+    }\n+  for (int i = 0; i < 10; ++i)\n+    for (int j = i + 1; j < 10; ++j)\n+      if (a[i] == a[j] && (j != i + 1 || (i % 5) != 3))\n+\tabort ();\n+  if (a[1] != a[0] + 1 || a[2] != a[0] + 2 || a[4] != a[3]\n+      || a[6] != a[5] + 1 || a[7] != a[5] + 2 || a[9] != a[8])\n+    abort ();\n+  int b[] = { 1, 2, 3, 43, 43 + 6, 4, 5, 6, 45, 45 + 11 };\n+  for (int i = 0; i < 10; ++i)\n+    for (int j = 0; j < 3 + i; ++j)\n+      if ((i < 5 ? bar (i) : qux (i - 5)) != b[i] + 1 + j)\n+\tabort ();\n+}"}, {"sha": "9149d0253e98dabe71072ee7e84892251a8c336d", "filename": "gcc/testsuite/g++.dg/cpp2a/decomp2.C", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f0df71a9de2354fcb7fb991e2a7406405c612d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f0df71a9de2354fcb7fb991e2a7406405c612d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp2.C?ref=b7f0df71a9de2354fcb7fb991e2a7406405c612d", "patch": "@@ -0,0 +1,76 @@\n+// P1091R3\n+// { dg-do run { target c++11 } }\n+// { dg-options \"\" }\n+// { dg-require-effective-target tls }\n+\n+namespace std {\n+  template<typename T> struct tuple_size;\n+  template<int, typename> struct tuple_element;\n+}\n+\n+struct A {\n+  int i;\n+  A(int x) : i(x) {}\n+  template <int I> int& get() { return i; }\n+};\n+struct B { int a, b, c; };\n+\n+template<> struct std::tuple_size<A> { static const int value = 2; };\n+template<int I> struct std::tuple_element<I,A> { using type = int; };\n+\n+extern \"C\" void abort ();\n+B t = { 4, 5, 6 };\n+\n+thread_local auto [ d, e, f ] = t;\t// { dg-warning \"structured binding declaration can be 'thread_local' only\" \"\" { target c++17_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } .-1 }\n+thread_local auto [ g, h ] = A (44);\t// { dg-warning \"structured binding declaration can be 'thread_local' only\" \"\" { target c++17_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } .-1  }\n+\n+int &\n+baz (int x)\n+{\n+  switch (x)\n+    {\n+    case 0: return d;\n+    case 1: return e;\n+    case 2: return f;\n+    case 3: return g;\n+    default: return h;\n+    }\n+}\n+\n+int\n+qux (int x)\n+{\n+  thread_local auto [ m, n, o ] = t;\t// { dg-warning \"structured binding declaration can be 'thread_local' only\" \"\" { target c++17_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } .-1  }\n+  thread_local auto [ p, q ] = A (45);\t// { dg-warning \"structured binding declaration can be 'thread_local' only\" \"\" { target c++17_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } .-1  }\n+  switch (x)\n+    {\n+    case 0: return ++m;\n+    case 1: return ++n;\n+    case 2: return ++o;\n+    case 3: return ++p;\n+    default: return ++q;\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  int *a[5];\n+  for (int i = 0; i < 5; ++i)\n+    a[i] = &baz (i);\n+  for (int i = 0; i < 5; ++i)\n+    for (int j = i + 1; j < 5; ++j)\n+      if (a[i] == a[j] && (j != i + 1 || i != 3))\n+\tabort ();\n+  if (a[1] != a[0] + 1 || a[2] != a[0] + 2 || a[4] != a[3])\n+    abort ();\n+  int b[] = { 4, 5, 6, 45, 45 + 6 };\n+  for (int i = 0; i < 5; ++i)\n+    for (int j = 0; j < 3 + i; ++j)\n+      if (qux (i) != b[i] + 1 + j)\n+\tabort ();\n+}"}, {"sha": "1afaefd66b1b034cab6dfb7175d6db5009a896c3", "filename": "gcc/testsuite/g++.dg/cpp2a/decomp3.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f0df71a9de2354fcb7fb991e2a7406405c612d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f0df71a9de2354fcb7fb991e2a7406405c612d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp3.C?ref=b7f0df71a9de2354fcb7fb991e2a7406405c612d", "patch": "@@ -0,0 +1,26 @@\n+// P1381R1\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+struct Foo { int a : 1; int b; };\n+\n+int main() {\n+  auto[a, b] = Foo();\t\t\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n+\n+  auto f1 = [&] { return a; };\t\t// { dg-error \"cannot bind bitfield\" }\n+  auto f2 = [&a = a] { return a; };\t// { dg-error \"cannot bind bitfield\" }\n+\t\t\t\t\t// { dg-warning \"lambda capture initializers only available with\" \"\" { target c++11_only } .-1 }\n+  auto f3 = [&a] { return a; };\t\t// { dg-error \"cannot bind bitfield\" }\n+\n+  auto g1 = [&] { return b; };\n+  auto g2 = [&b = b] { return b; };\t// { dg-warning \"lambda capture initializers only available with\" \"\" { target c++11_only } }\n+  auto g3 = [&b] { return b; };\n+\n+  auto h1 = [=] { return a; };\n+  auto h2 = [a = a] { return a; };\t// { dg-warning \"lambda capture initializers only available with\" \"\" { target c++11_only } }\n+  auto h3 = [a] { return a; };\n+\n+  auto i1 = [=] { return b; };\n+  auto i2 = [b = b] { return b; };\t// { dg-warning \"lambda capture initializers only available with\" \"\" { target c++11_only } }\n+  auto i3 = [b] { return b; };\n+}"}]}