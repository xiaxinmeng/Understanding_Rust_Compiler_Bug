{"sha": "6a49f11019c0927147f2b11efc45fddacd51d6fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE0OWYxMTAxOWMwOTI3MTQ3ZjJiMTFlZmM0NWZkZGFjZDUxZDZmZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T08:52:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T08:52:52Z"}, "message": "[multiple changes]\n\n2011-08-04  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_strm.adb (Build_Array_Input_Function): if the array type is\n\tconstrained, do not attempt to build a subtype of it.\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* errout.ads Change comments: remove 'R'M as an example where quotes\n\tare needed; add ALFA as another case where quotes are not needed\n\t* erroutc.adb (Set_Msg_Insertion_Reserved_Word): add ALFA as another\n\tcase where quotes are not needed.\n\t* sem_ch11.adb, sem_ch13.adb, sem_ch2.adb, sem_ch3.adb, sem_ch4.adb,\n\tsem_ch5.adb, sem_ch6.adb, sem_ch9.adb, sem_prag.adb, sem_res.adb:\n\tRemove all occurrences of 'A'L'F'A\n\n2011-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb: check legality of invariant pragma.\n\nFrom-SVN: r177335", "tree": {"sha": "cf9117d20a6ae44e087010ef13e99f9d232e3109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf9117d20a6ae44e087010ef13e99f9d232e3109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a49f11019c0927147f2b11efc45fddacd51d6fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a49f11019c0927147f2b11efc45fddacd51d6fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a49f11019c0927147f2b11efc45fddacd51d6fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a49f11019c0927147f2b11efc45fddacd51d6fe/comments", "author": null, "committer": null, "parents": [{"sha": "a4640a3936bb760801ca5d2d44152a3424a8facb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4640a3936bb760801ca5d2d44152a3424a8facb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4640a3936bb760801ca5d2d44152a3424a8facb"}], "stats": {"total": 180, "additions": 107, "deletions": 73}, "files": [{"sha": "278186f39666c4b8e14a77fd7370c36352f64c38", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -1,3 +1,22 @@\n+2011-08-04  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_strm.adb (Build_Array_Input_Function): if the array type is\n+\tconstrained, do not attempt to build a subtype of it.\n+\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* errout.ads Change comments: remove 'R'M as an example where quotes\n+\tare needed; add ALFA as another case where quotes are not needed\n+\t* erroutc.adb (Set_Msg_Insertion_Reserved_Word): add ALFA as another\n+\tcase where quotes are not needed.\n+\t* sem_ch11.adb, sem_ch13.adb, sem_ch2.adb, sem_ch3.adb, sem_ch4.adb,\n+\tsem_ch5.adb, sem_ch6.adb, sem_ch9.adb, sem_prag.adb, sem_res.adb:\n+\tRemove all occurrences of 'A'L'F'A\n+\n+2011-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb: check legality of invariant pragma.\n+\n 2011-08-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* bindgen.adb: Add comments."}, {"sha": "ef3dcc47c292d444fb4909b438e2fb70679b01c6", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -319,8 +319,8 @@ package Errout is\n    --      Precedes a character which is placed literally into the message.\n    --      Used to insert characters into messages that are one of the\n    --      insertion characters defined here. Also useful in inserting\n-   --      sequences of upper case letters (e.g. RM) which are not to be\n-   --      treated as keywords.\n+   --      sequences of upper case letters which are not to be treated as\n+   --      keywords.\n \n    --    Insertion character \\ (Backslash: continuation message)\n    --      Indicates that the message is a continuation of a message\n@@ -494,7 +494,9 @@ package Errout is\n \n    --  Note: a special exception is that RM is never treated as a keyword\n    --  but instead is copied literally into the message, this avoids the\n-   --  need for writing 'R'M for all reference manual quotes.\n+   --  need for writing 'R'M for all reference manual quotes. A similar\n+   --  exception is applied to the occurrence of the string ALFA used in\n+   --  error messages about the ALFA subset of Ada.\n \n    --  In the case of names, the default mode for the error text processor\n    --  is to surround the name by quotation marks automatically. The case"}, {"sha": "4ea4a16b0c071af9b96d8ad3985d56558d57387d", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -21,7 +21,7 @@\n -- GNAT was originally developed  by the GNAT team at  New York University. --\n -- Extensive contributions were provided by Ada Core Technologies Inc.      --\n --                                                                          --\n-------------------------------------------------------------------------------\n+-------------------------------------------R-----------------------------------\n \n --  Warning! Error messages can be generated during Gigi processing by direct\n --  calls to error message routines, so it is essential that the processing\n@@ -955,7 +955,12 @@ package body Erroutc is\n       if Name_Len = 2 and then Name_Buffer (1 .. 2) = \"RM\" then\n          Set_Msg_Name_Buffer;\n \n-      --  Not RM: case appropriately and add surrounding quotes\n+      --  We make a similar exception for ALFA\n+\n+      elsif Name_Len = 4 and then Name_Buffer (1 .. 4) = \"ALFA\" then\n+         Set_Msg_Name_Buffer;\n+\n+      --  Neither RM nor ALFA: case appropriately and add surrounding quotes\n \n       else\n          Set_Casing (Keyword_Casing (Flag_Source), All_Lower_Case);"}, {"sha": "d3d4751c6453fbafaae46e35006539071948f3e3", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -195,15 +195,14 @@ package body Exp_Strm is\n          Next_Index (Indx);\n       end loop;\n \n-      --  If the first subtype is constrained, use it directly. Otherwise\n-      --  build a subtype indication with the proper bounds.\n+      --  If the type is constrained, use it directly. Otherwise build a\n+      --  subtype indication with the proper bounds.\n \n-      if Is_Constrained (Stream_Base_Type (Typ)) then\n+      if Is_Constrained (Typ) then\n          Odecl :=\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Make_Defining_Identifier (Loc, Name_V),\n-             Object_Definition   =>\n-               New_Occurrence_Of (Stream_Base_Type (Typ), Loc));\n+             Object_Definition   => New_Occurrence_Of (Typ, Loc));\n       else\n          Odecl :=\n            Make_Object_Declaration (Loc,"}, {"sha": "cf7f50e28a933cd2eae62b7ac6c4e1751c26e03b", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -434,7 +434,7 @@ package body Sem_Ch11 is\n       P              : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"raise statement is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"raise statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"raise statement is not allowed\", N);\n       Check_Unreachable_Code (N);\n "}, {"sha": "3351cdecb43d032cedd31c0d7b5f2148c7b6d2d8", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -1163,6 +1163,15 @@ package body Sem_Ch13 is\n                when Aspect_Invariant      |\n                     Aspect_Type_Invariant =>\n \n+                  --  Check placement legality\n+\n+                  if not Nkind_In (N, N_Private_Type_Declaration,\n+                                      N_Private_Extension_Declaration)\n+                  then\n+                     Error_Msg_N\n+                       (\"invariant aspect must apply to a private type\", N);\n+                  end if;\n+\n                   --  Construct the pragma\n \n                   Aitem :="}, {"sha": "d4393963a054c3b61d28635182de1cb582bf987c", "filename": "gcc/ada/sem_ch2.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch2.adb?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -81,7 +81,7 @@ package body Sem_Ch2 is\n            and then Is_Object (Entity (N))\n            and then not Is_In_ALFA (Entity (N))\n          then\n-            Mark_Non_ALFA_Subprogram (\"object is not in 'A'L'F'A\", N);\n+            Mark_Non_ALFA_Subprogram (\"object is not in ALFA\", N);\n          end if;\n       end if;\n    end Analyze_Identifier;"}, {"sha": "988db9afaea904474131f323547e54673d9d0ad4", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -3053,9 +3053,9 @@ package body Sem_Ch3 is\n       --  not aliased.\n \n       if not Is_In_ALFA (T) then\n-         Mark_Non_ALFA_Subprogram (\"object type is not in 'A'L'F'A\", N);\n+         Mark_Non_ALFA_Subprogram (\"object type is not in ALFA\", N);\n       elsif Aliased_Present (N) then\n-         Mark_Non_ALFA_Subprogram (\"ALIASED is not in 'A'L'F'A\", N);\n+         Mark_Non_ALFA_Subprogram (\"ALIASED is not in ALFA\", N);\n       else\n          Set_Is_In_ALFA (Id);\n       end if;"}, {"sha": "6aa3ae9f7c09be9966b1d7edbd4a4de3d72914ee", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -350,7 +350,7 @@ package body Sem_Ch4 is\n \n    procedure Analyze_Aggregate (N : Node_Id) is\n    begin\n-      Mark_Non_ALFA_Subprogram (\"aggregate is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"aggregate is not in ALFA\", N);\n \n       if No (Etype (N)) then\n          Set_Etype (N, Any_Composite);\n@@ -371,7 +371,7 @@ package body Sem_Ch4 is\n       C        : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"allocator is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"allocator is not in ALFA\", N);\n       Check_SPARK_Restriction (\"allocator is not allowed\", N);\n \n       --  Deal with allocator restrictions\n@@ -989,9 +989,9 @@ package body Sem_Ch4 is\n          --  ALFA, then the call is not in ALFA.\n \n          if not Is_Subprogram (Nam_Ent) then\n-            Mark_Non_ALFA_Subprogram (\"indirect call is not in 'A'L'F'A\", N);\n+            Mark_Non_ALFA_Subprogram (\"indirect call is not in ALFA\", N);\n          elsif not Is_In_ALFA (Nam_Ent) then\n-            Mark_Non_ALFA_Subprogram (\"call to subprogram not in 'A'L'F'A\", N);\n+            Mark_Non_ALFA_Subprogram (\"call to subprogram not in ALFA\", N);\n          end if;\n \n          Analyze_One_Call (N, Nam_Ent, True, Success);\n@@ -1370,7 +1370,7 @@ package body Sem_Ch4 is\n       L  : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"concatenation is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"concatenation is not in ALFA\", N);\n \n       Candidate_Type := Empty;\n \n@@ -1541,7 +1541,7 @@ package body Sem_Ch4 is\n \n       if Present (Else_Expr) and then not In_Pre_Post_Expression then\n          Mark_Non_ALFA_Subprogram\n-           (\"this form of conditional expression is not in 'A'L'F'A\", N);\n+           (\"this form of conditional expression is not in ALFA\", N);\n       end if;\n \n       if Comes_From_Source (N) then\n@@ -1740,7 +1740,7 @@ package body Sem_Ch4 is\n    --  Start of processing for Analyze_Explicit_Dereference\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"explicit dereference is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"explicit dereference is not in ALFA\", N);\n       Check_SPARK_Restriction (\"explicit dereference is not allowed\", N);\n \n       Analyze (P);\n@@ -2623,7 +2623,7 @@ package body Sem_Ch4 is\n \n    procedure Analyze_Null (N : Node_Id) is\n    begin\n-      Mark_Non_ALFA_Subprogram (\"null is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"null is not in ALFA\", N);\n       Check_SPARK_Restriction (\"null is not allowed\", N);\n \n       Set_Etype (N, Any_Access);\n@@ -3255,7 +3255,7 @@ package body Sem_Ch4 is\n       T    : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"qualified expression is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"qualified expression is not in ALFA\", N);\n \n       Analyze_Expression (Expr);\n \n@@ -3315,7 +3315,7 @@ package body Sem_Ch4 is\n       Iterator : Node_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"quantified expression is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"quantified expression is not in ALFA\", N);\n       Check_SPARK_Restriction (\"quantified expression is not allowed\", N);\n \n       Set_Etype  (Ent,  Standard_Void_Type);\n@@ -3481,7 +3481,7 @@ package body Sem_Ch4 is\n       Acc_Type : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"reference is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"reference is not in ALFA\", N);\n \n       Analyze (P);\n \n@@ -4347,7 +4347,7 @@ package body Sem_Ch4 is\n    --  Start of processing for Analyze_Slice\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"slice is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"slice is not in ALFA\", N);\n       Check_SPARK_Restriction (\"slice is not allowed\", N);\n \n       Analyze (P);\n@@ -4418,7 +4418,7 @@ package body Sem_Ch4 is\n \n       if not (Is_Scalar_Type (Etype (Expr)) and then Is_Scalar_Type (T)) then\n          Mark_Non_ALFA_Subprogram\n-           (\"only type conversion between scalar types is in 'A'L'F'A\", N);\n+           (\"only type conversion between scalar types is in ALFA\", N);\n       end if;\n \n       --  Only remaining step is validity checks on the argument. These\n@@ -4531,7 +4531,7 @@ package body Sem_Ch4 is\n    procedure Analyze_Unchecked_Type_Conversion (N : Node_Id) is\n    begin\n       Mark_Non_ALFA_Subprogram\n-        (\"unchecked type conversion is not in 'A'L'F'A\", N);\n+        (\"unchecked type conversion is not in ALFA\", N);\n       Find_Type (Subtype_Mark (N));\n       Analyze_Expression (Expression (N));\n       Set_Etype (N, Entity (Subtype_Mark (N)));"}, {"sha": "afd338df0949441554aab29289b74ead69004cd6", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -1114,7 +1114,7 @@ package body Sem_Ch5 is\n         and then List_Length (Alternatives (N)) = 1\n       then\n          Mark_Non_ALFA_Subprogram\n-           (\"OTHERS as unique case alternative is not in 'A'L'F'A\", N);\n+           (\"OTHERS as unique case alternative is not in ALFA\", N);\n          Check_SPARK_Restriction\n            (\"OTHERS as unique case alternative is not allowed\", N);\n       end if;\n@@ -1198,7 +1198,7 @@ package body Sem_Ch5 is\n             if Has_Loop_In_Inner_Open_Scopes (U_Name) then\n                Mark_Non_ALFA_Subprogram\n                  (\"exit label must name the closest enclosing loop\"\n-                   & \" in 'A'L'F'A\", N);\n+                   & \" in ALFA\", N);\n                Check_SPARK_Restriction\n                  (\"exit label must name the closest enclosing loop\", N);\n             end if;\n@@ -1247,7 +1247,7 @@ package body Sem_Ch5 is\n          if Nkind (Parent (N)) /= N_Loop_Statement then\n             Mark_Non_ALFA_Subprogram\n               (\"exit with when clause must be directly in loop\"\n-                & \" in 'A'L'F'A\", N);\n+                & \" in ALFA\", N);\n             Check_SPARK_Restriction\n               (\"exit with when clause must be directly in loop\", N);\n          end if;\n@@ -1256,18 +1256,18 @@ package body Sem_Ch5 is\n          if Nkind (Parent (N)) /= N_If_Statement then\n             if Nkind (Parent (N)) = N_Elsif_Part then\n                Mark_Non_ALFA_Subprogram\n-                 (\"exit must be in IF without ELSIF in 'A'L'F'A\", N);\n+                 (\"exit must be in IF without ELSIF in ALFA\", N);\n                Check_SPARK_Restriction\n                  (\"exit must be in IF without ELSIF\", N);\n             else\n                Mark_Non_ALFA_Subprogram\n-                 (\"exit must be directly in IF in 'A'L'F'A\", N);\n+                 (\"exit must be directly in IF in ALFA\", N);\n                Check_SPARK_Restriction (\"exit must be directly in IF\", N);\n             end if;\n \n          elsif Nkind (Parent (Parent (N))) /= N_Loop_Statement then\n             Mark_Non_ALFA_Subprogram\n-              (\"exit must be in IF directly in loop in 'A'L'F'A\", N);\n+              (\"exit must be in IF directly in loop in ALFA\", N);\n             Check_SPARK_Restriction\n               (\"exit must be in IF directly in loop\", N);\n \n@@ -1276,15 +1276,15 @@ package body Sem_Ch5 is\n \n          elsif Present (Else_Statements (Parent (N))) then\n             Mark_Non_ALFA_Subprogram\n-              (\"exit must be in IF without ELSE in 'A'L'F'A\", N);\n+              (\"exit must be in IF without ELSE in ALFA\", N);\n             Check_SPARK_Restriction (\"exit must be in IF without ELSE\", N);\n \n             --  An exit in an ELSIF does not reach here, as it would have been\n             --  detected in the case (Nkind (Parent (N)) /= N_If_Statement).\n \n          elsif Present (Elsif_Parts (Parent (N))) then\n             Mark_Non_ALFA_Subprogram\n-              (\"exit must be in IF without ELSIF in 'A'L'F'A\", N);\n+              (\"exit must be in IF without ELSIF in ALFA\", N);\n             Check_SPARK_Restriction (\"exit must be in IF without ELSIF\", N);\n          end if;\n       end if;\n@@ -1313,7 +1313,7 @@ package body Sem_Ch5 is\n       Label_Ent   : Entity_Id;\n \n    begin\n-      Mark_Non_ALFA_Subprogram (\"goto statement is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"goto statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"goto statement is not allowed\", N);\n \n       --  Actual semantic checks"}, {"sha": "847f920825e8f3ef9c27e8fb8213eef34e6a389a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -650,13 +650,13 @@ package body Sem_Ch6 is\n                or else Present (Next (N)))\n          then\n             Mark_Non_ALFA_Subprogram\n-              (\"RETURN should be the last statement in 'A'L'F'A\", N);\n+              (\"RETURN should be the last statement in ALFA\", N);\n             Check_SPARK_Restriction\n               (\"RETURN should be the last statement in function\", N);\n          end if;\n \n       else\n-         Mark_Non_ALFA_Subprogram (\"extended RETURN is not in 'A'L'F'A\", N);\n+         Mark_Non_ALFA_Subprogram (\"extended RETURN is not in ALFA\", N);\n          Check_SPARK_Restriction (\"extended RETURN is not allowed\", N);\n \n          --  Analyze parts specific to extended_return_statement:\n@@ -8887,7 +8887,7 @@ package body Sem_Ch6 is\n          if Is_In_ALFA (Formal_Type) then\n             Set_Is_In_ALFA (Formal);\n          else\n-            Mark_Non_ALFA_Subprogram (\"formal is not in 'A'L'F'A\", Formal);\n+            Mark_Non_ALFA_Subprogram (\"formal is not in ALFA\", Formal);\n          end if;\n \n          Default := Expression (Param_Spec);"}, {"sha": "9ded3d25d9399ba4f4d61aa1aebe78c07206e3f6", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -101,7 +101,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"abort statement is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"abort statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"abort statement is not allowed\", N);\n \n       T_Name := First (Names (N));\n@@ -140,7 +140,7 @@ package body Sem_Ch9 is\n    procedure Analyze_Accept_Alternative (N : Node_Id) is\n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"accept is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"accept is not in ALFA\", N);\n \n       if Present (Pragmas_Before (N)) then\n          Analyze_List (Pragmas_Before (N));\n@@ -174,7 +174,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"accept statement is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"accept statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"accept statement is not allowed\", N);\n \n       --  Entry name is initialized to Any_Id. It should get reset to the\n@@ -406,7 +406,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"select statement is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"select statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (Max_Asynchronous_Select_Nesting, N);\n       Check_Restriction (No_Select_Statements, N);\n@@ -453,7 +453,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"select statement is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"select statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (No_Select_Statements, N);\n \n@@ -500,7 +500,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"delay is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"delay is not in ALFA\", N);\n       Check_Restriction (No_Delay, N);\n \n       if Present (Pragmas_Before (N)) then\n@@ -552,7 +552,7 @@ package body Sem_Ch9 is\n       E : constant Node_Id := Expression (N);\n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"delay statement is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"delay statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"delay statement is not allowed\", N);\n       Check_Restriction (No_Relative_Delay, N);\n       Check_Restriction (No_Delay, N);\n@@ -571,7 +571,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"delay statement is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"delay statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"delay statement is not allowed\", N);\n       Check_Restriction (No_Delay, N);\n       Check_Potentially_Blocking_Operation (N);\n@@ -600,7 +600,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"entry is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"entry is not in ALFA\", N);\n \n       --  Entry_Name is initialized to Any_Id. It should get reset to the\n       --  matching entry entity. An error is signalled if it is not reset\n@@ -833,7 +833,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"entry is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"entry is not in ALFA\", N);\n \n       if Present (Index) then\n          Analyze (Index);\n@@ -861,7 +861,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"entry call is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"entry call is not in ALFA\", N);\n       Check_SPARK_Restriction (\"entry call is not allowed\", N);\n \n       if Present (Pragmas_Before (N)) then\n@@ -897,7 +897,7 @@ package body Sem_Ch9 is\n    begin\n       Generate_Definition (Def_Id);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"entry is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"entry is not in ALFA\", N);\n \n       --  Case of no discrete subtype definition\n \n@@ -967,7 +967,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"entry is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"entry is not in ALFA\", N);\n       Analyze (Def);\n \n       --  There is no elaboration of the entry index specification. Therefore,\n@@ -1009,7 +1009,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"protected body is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"protected body is not in ALFA\", N);\n       Set_Ekind (Body_Id, E_Protected_Body);\n       Spec_Id := Find_Concurrent_Spec (Body_Id);\n \n@@ -1128,7 +1128,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"protected definition is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"protected definition is not in ALFA\", N);\n       Check_SPARK_Restriction (\"protected definition is not allowed\", N);\n       Analyze_Declarations (Visible_Declarations (N));\n \n@@ -1182,7 +1182,7 @@ package body Sem_Ch9 is\n       end if;\n \n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"protected type is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"protected type is not in ALFA\", N);\n       Check_Restriction (No_Protected_Types, N);\n \n       T := Find_Type_Name (N);\n@@ -1324,7 +1324,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"requeue statement is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"requeue statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"requeue statement is not allowed\", N);\n       Check_Restriction (No_Requeue_Statements, N);\n       Check_Unreachable_Code (N);\n@@ -1599,7 +1599,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"select statement is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"select statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (No_Select_Statements, N);\n \n@@ -1720,7 +1720,7 @@ package body Sem_Ch9 is\n    begin\n       Generate_Definition (Id);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"protected object is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"protected object is not in ALFA\", N);\n \n       --  The node is rewritten as a protected type declaration, in exact\n       --  analogy with what is done with single tasks.\n@@ -1782,7 +1782,7 @@ package body Sem_Ch9 is\n    begin\n       Generate_Definition (Id);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"task is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"task is not in ALFA\", N);\n \n       --  The node is rewritten as a task type declaration, followed by an\n       --  object declaration of that anonymous task type.\n@@ -1860,7 +1860,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"task body is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"task body is not in ALFA\", N);\n       Set_Ekind (Body_Id, E_Task_Body);\n       Set_Scope (Body_Id, Current_Scope);\n       Spec_Id := Find_Concurrent_Spec (Body_Id);\n@@ -1981,7 +1981,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"task definition is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"task definition is not in ALFA\", N);\n       Check_SPARK_Restriction (\"task definition is not allowed\", N);\n \n       if Present (Visible_Declarations (N)) then\n@@ -2016,7 +2016,7 @@ package body Sem_Ch9 is\n    begin\n       Check_Restriction (No_Tasking, N);\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"task type is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"task type is not in ALFA\", N);\n       T := Find_Type_Name (N);\n       Generate_Definition (T);\n \n@@ -2122,7 +2122,7 @@ package body Sem_Ch9 is\n    procedure Analyze_Terminate_Alternative (N : Node_Id) is\n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"terminate is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"terminate is not in ALFA\", N);\n \n       if Present (Pragmas_Before (N)) then\n          Analyze_List (Pragmas_Before (N));\n@@ -2144,7 +2144,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"select statement is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"select statement is not in ALFA\", N);\n       Check_SPARK_Restriction (\"select statement is not allowed\", N);\n       Check_Restriction (No_Select_Statements, N);\n \n@@ -2181,7 +2181,7 @@ package body Sem_Ch9 is\n \n    begin\n       Tasking_Used := True;\n-      Mark_Non_ALFA_Subprogram (\"triggering statement is not in 'A'L'F'A\", N);\n+      Mark_Non_ALFA_Subprogram (\"triggering statement is not in ALFA\", N);\n \n       if Present (Pragmas_Before (N)) then\n          Analyze_List (Pragmas_Before (N));"}, {"sha": "721b54e862e2da994091e8ac9d403f76be3ef740", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -6144,7 +6144,7 @@ package body Sem_Prag is\n                      then\n                         Error_Pragma\n                           (\"pragma% is placed after violation\"\n-                           & \" of 'A'L'F'A\");\n+                           & \" of ALFA\");\n                      end if;\n \n                      --  We treat this as a Rep_Item to record it on the rep"}, {"sha": "f5bf36899121cd07b573e3a1971cafac47fd6881", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a49f11019c0927147f2b11efc45fddacd51d6fe/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=6a49f11019c0927147f2b11efc45fddacd51d6fe", "patch": "@@ -5797,13 +5797,13 @@ package body Sem_Res is\n \n       if Is_Boolean_Type (T) then\n          Mark_Non_ALFA_Subprogram\n-           (\"ordering operator on boolean type is not in 'A'L'F'A\", N);\n+           (\"ordering operator on boolean type is not in ALFA\", N);\n          Check_SPARK_Restriction\n            (\"comparison is not defined on Boolean type\", N);\n \n       elsif Is_Array_Type (T) then\n          Mark_Non_ALFA_Subprogram\n-           (\"ordering operator on array type is not in 'A'L'F'A\", N);\n+           (\"ordering operator on array type is not in ALFA\", N);\n \n          if Base_Type (T) /= Standard_String then\n             Check_SPARK_Restriction\n@@ -5864,7 +5864,7 @@ package body Sem_Res is\n \n       if Root_Type (Typ) /= Standard_Boolean then\n          Mark_Non_ALFA_Subprogram\n-           (\"non-boolean conditional expression is not in 'A'L'F'A\", N);\n+           (\"non-boolean conditional expression is not in ALFA\", N);\n       end if;\n \n       Set_Etype (N, Typ);\n@@ -6668,7 +6668,7 @@ package body Sem_Res is\n \n          if Is_Array_Type (T) then\n             Mark_Non_ALFA_Subprogram\n-              (\"equality operator on array is not in 'A'L'F'A\", N);\n+              (\"equality operator on array is not in ALFA\", N);\n \n             --  Protect call to Matching_Static_Array_Bounds to avoid costly\n             --  operation if not needed.\n@@ -7219,7 +7219,7 @@ package body Sem_Res is\n         and then Nkind (N) in N_Binary_Op\n       then\n          Mark_Non_ALFA_Subprogram\n-           (\"binary operator on array is not in 'A'L'F'A\", N);\n+           (\"binary operator on array is not in ALFA\", N);\n \n          declare\n             Left_Typ  : constant Node_Id := Etype (Left_Opnd (N));"}]}