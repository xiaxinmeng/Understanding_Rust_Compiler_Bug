{"sha": "bd9eb5dacc6e850014842b8f248a1c38c43a15a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5ZWI1ZGFjYzZlODUwMDE0ODQyYjhmMjQ4YTFjMzhjNDNhMTVhNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-05-22T12:56:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-05-22T12:56:53Z"}, "message": "gimple.c (gimple_types_compatible_p): Check type qualifications before merging pointer to complete and pointer to...\n\n2010-05-22  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.c (gimple_types_compatible_p): Check type qualifications\n\tbefore merging pointer to complete and pointer to incomplete type.\n\t* lto-symtab.c (lto_symtab_resolve_symbols): For commons make sure\n\twe use our own resolution algorithm.  The gold linker plugin\n\tdoesn't do the job we want it to do here.\n\n\tlto/\n\t* lto.c (read_cgraph_and_symbols): Do not collect.\n\nFrom-SVN: r159696", "tree": {"sha": "75a0267d14937ac168a33af993b2c8c63ed5a1d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75a0267d14937ac168a33af993b2c8c63ed5a1d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd9eb5dacc6e850014842b8f248a1c38c43a15a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9eb5dacc6e850014842b8f248a1c38c43a15a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd9eb5dacc6e850014842b8f248a1c38c43a15a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9eb5dacc6e850014842b8f248a1c38c43a15a4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c9b8fb912cdbac53aab302ab0e6b1b0831036df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9b8fb912cdbac53aab302ab0e6b1b0831036df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c9b8fb912cdbac53aab302ab0e6b1b0831036df"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "d6caa0c10fa47bea685de5dda9e2e42f9cb247bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9eb5dacc6e850014842b8f248a1c38c43a15a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9eb5dacc6e850014842b8f248a1c38c43a15a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd9eb5dacc6e850014842b8f248a1c38c43a15a4", "patch": "@@ -1,3 +1,11 @@\n+2010-05-22  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.c (gimple_types_compatible_p): Check type qualifications\n+\tbefore merging pointer to complete and pointer to incomplete type.\n+\t* lto-symtab.c (lto_symtab_resolve_symbols): For commons make sure\n+\twe use our own resolution algorithm.  The gold linker plugin\n+\tdoesn't do the job we want it to do here.\n+\n 2010-05-22  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/sparc/sparc.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove."}, {"sha": "e5dc184d460834de44c00d6129045f7e4b87c21a", "filename": "gcc/gimple.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9eb5dacc6e850014842b8f248a1c38c43a15a4/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9eb5dacc6e850014842b8f248a1c38c43a15a4/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=bd9eb5dacc6e850014842b8f248a1c38c43a15a4", "patch": "@@ -3481,11 +3481,20 @@ gimple_types_compatible_p (tree t1, tree t2)\n \t    && RECORD_OR_UNION_TYPE_P (TREE_TYPE (t1))\n \t    && (!COMPLETE_TYPE_P (TREE_TYPE (t1))\n \t\t|| !COMPLETE_TYPE_P (TREE_TYPE (t2)))\n+\t    && TYPE_QUALS (TREE_TYPE (t1)) == TYPE_QUALS (TREE_TYPE (t2))\n \t    && compare_type_names_p (TYPE_MAIN_VARIANT (TREE_TYPE (t1)),\n \t\t\t\t     TYPE_MAIN_VARIANT (TREE_TYPE (t2)), true))\n \t  {\n \t    /* Replace the pointed-to incomplete type with the\n-\t       complete one.  */\n+\t       complete one.\n+\t       ???  This simple name-based merging causes at least some\n+\t       of the ICEs in canonicalizing FIELD_DECLs during stmt\n+\t       read.  For example in GCC we have two different struct deps\n+\t       and we mismatch the use in struct cpp_reader in sched-int.h\n+\t       vs. mkdeps.c.  Of course the whole exercise is for TBAA\n+\t       with structs which contain pointers to incomplete types\n+\t       in one unit and to complete ones in another.  So we\n+\t       probably should merge these types only with more context.  */\n \t    if (COMPLETE_TYPE_P (TREE_TYPE (t2)))\n \t      TREE_TYPE (t1) = TREE_TYPE (t2);\n \t    else"}, {"sha": "f02824d1f45d2166b48246a40d4a0d7b9e5fb726", "filename": "gcc/lto-symtab.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9eb5dacc6e850014842b8f248a1c38c43a15a4/gcc%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9eb5dacc6e850014842b8f248a1c38c43a15a4/gcc%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-symtab.c?ref=bd9eb5dacc6e850014842b8f248a1c38c43a15a4", "patch": "@@ -463,7 +463,13 @@ lto_symtab_resolve_symbols (void **slot)\n       if (TREE_CODE (e->decl) == FUNCTION_DECL)\n \te->node = cgraph_get_node (e->decl);\n       else if (TREE_CODE (e->decl) == VAR_DECL)\n-\te->vnode = varpool_get_node (e->decl);\n+\t{\n+\t  e->vnode = varpool_get_node (e->decl);\n+\t  /* The LTO plugin for gold doesn't handle common symbols\n+\t     properly.  Let us choose manually.  */\n+\t  if (DECL_COMMON (e->decl))\n+\t    e->resolution = LDPR_UNKNOWN;\n+\t}\n     }\n \n   e = (lto_symtab_entry_t) *slot;"}, {"sha": "83cfe3e3e90d65748c0c9806adbb66cafa873741", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9eb5dacc6e850014842b8f248a1c38c43a15a4/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9eb5dacc6e850014842b8f248a1c38c43a15a4/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=bd9eb5dacc6e850014842b8f248a1c38c43a15a4", "patch": "@@ -1,3 +1,7 @@\n+2010-05-22  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lto.c (read_cgraph_and_symbols): Do not collect.\n+\n 2010-05-20  Jan Hubicka  <jh@suse.cz>\n \n \t* lto.c (promote_var, promote_fn): New functions."}, {"sha": "d1ccc5a9adfcc4d794e6304373df01028233c898", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9eb5dacc6e850014842b8f248a1c38c43a15a4/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9eb5dacc6e850014842b8f248a1c38c43a15a4/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=bd9eb5dacc6e850014842b8f248a1c38c43a15a4", "patch": "@@ -1633,7 +1633,8 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n \n       lto_obj_file_close (current_lto_file);\n       current_lto_file = NULL;\n-      ggc_collect ();\n+      /* ???  We'd want but can't ggc_collect () here as the type merging\n+         code in gimple.c uses hashtables that are not ggc aware.  */\n     }\n \n   if (resolution_file_name)"}]}