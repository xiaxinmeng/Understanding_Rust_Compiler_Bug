{"sha": "db847fa8f2cca6139188b8dfa0a7064319b19193", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI4NDdmYThmMmNjYTYxMzkxODhiOGRmYTBhNzA2NDMxOWIxOTE5Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-02-26T12:26:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-02-26T12:26:11Z"}, "message": "passes.c (ipa_write_summaries_1): Call lto_output_init_mode_table.\n\n\t* passes.c (ipa_write_summaries_1): Call lto_output_init_mode_table.\n\t(ipa_write_optimization_summaries): Likewise.\n\t* tree-streamer.h: Include data-streamer.h.\n\t(streamer_mode_table): Declare extern variable.\n\t(bp_pack_machine_mode, bp_unpack_machine_mode): New inline functions.\n\t* lto-streamer-out.c (lto_output_init_mode_table,\n\tlto_write_mode_table): New functions.\n\t(produce_asm_for_decls): Call lto_write_mode_table when streaming\n\toffloading LTO.\n\t* lto-section-in.c (lto_section_name): Add \"mode_table\" entry.\n\t(lto_create_simple_input_block): Add mode_table argument to the\n\tlto_input_block constructors.\n\t* ipa-prop.c (ipa_prop_read_section, read_replacements_section):\n\tLikewise.\n\t* data-streamer-in.c (string_for_index): Likewise.\n\t* ipa-inline-analysis.c (inline_read_section): Likewise.\n\t* ipa-icf.c (sem_item_optimizer::read_section): Likewise.\n\t* lto-cgraph.c (input_cgraph_opt_section): Likewise.\n\t* lto-streamer-in.c (lto_read_body_or_constructor,\n\tlto_input_toplevel_asms): Likewise.\n\t(lto_input_mode_table): New function.\n\t* tree-streamer-out.c (pack_ts_fixed_cst_value_fields,\n\tpack_ts_decl_common_value_fields, pack_ts_type_common_value_fields):\n\tUse bp_pack_machine_mode.\n\t* real.h (struct real_format): Add name field.\n\t* lto-streamer.h (enum lto_section_type): Add LTO_section_mode_table.\n\t(class lto_input_block): Add mode_table member.\n\t(lto_input_block::lto_input_block): Add mode_table_ argument,\n\tinitialize mode_table.\n\t(struct lto_file_decl_data): Add mode_table field.\n\t(lto_input_mode_table, lto_output_init_mode_table): New prototypes.\n\t* tree-streamer-in.c (unpack_ts_fixed_cst_value_fields,\n\tunpack_ts_decl_common_value_fields,\n\tunpack_ts_type_common_value_fields): Call bp_unpack_machine_mode.\n\t* tree-streamer.c (streamer_mode_table): New variable.\n\t* real.c (ieee_single_format, mips_single_format,\n\tmotorola_single_format, spu_single_format, ieee_double_format,\n\tmips_double_format, motorola_double_format,\n\tieee_extended_motorola_format, ieee_extended_intel_96_format,\n\tieee_extended_intel_128_format, ieee_extended_intel_96_round_53_format,\n\tibm_extended_format, mips_extended_format, ieee_quad_format,\n\tmips_quad_format, vax_f_format, vax_d_format, vax_g_format,\n\tdecimal_single_format, decimal_double_format, decimal_quad_format,\n\tieee_half_format, arm_half_format, real_internal_format): Add name\n\tfield.\n\t* config/pdp11/pdp11.c (pdp11_f_format, pdp11_d_format): Likewise.\nlto/\n\t* lto.c (lto_mode_identity_table): New variable.\n\t(lto_read_decls): Add mode_table argument to the lto_input_block\n\tconstructor.\n\t(lto_file_finalize): Initialize mode_table.\n\t(lto_init): Initialize lto_mode_identity_table.\n\nFrom-SVN: r221005", "tree": {"sha": "4cfafb39979c3cd73421161d2411ccb6693f4928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cfafb39979c3cd73421161d2411ccb6693f4928"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db847fa8f2cca6139188b8dfa0a7064319b19193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db847fa8f2cca6139188b8dfa0a7064319b19193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db847fa8f2cca6139188b8dfa0a7064319b19193", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db847fa8f2cca6139188b8dfa0a7064319b19193/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "948f9b763d00ae77117179edf1980eb40d284326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948f9b763d00ae77117179edf1980eb40d284326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/948f9b763d00ae77117179edf1980eb40d284326"}], "stats": {"total": 444, "additions": 396, "deletions": 48}, "files": [{"sha": "98a0d24f03193fc5d57b2aa6ca8350ba98e7daa9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -1,3 +1,52 @@\n+2015-02-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* passes.c (ipa_write_summaries_1): Call lto_output_init_mode_table.\n+\t(ipa_write_optimization_summaries): Likewise.\n+\t* tree-streamer.h: Include data-streamer.h.\n+\t(streamer_mode_table): Declare extern variable.\n+\t(bp_pack_machine_mode, bp_unpack_machine_mode): New inline functions.\n+\t* lto-streamer-out.c (lto_output_init_mode_table,\n+\tlto_write_mode_table): New functions.\n+\t(produce_asm_for_decls): Call lto_write_mode_table when streaming\n+\toffloading LTO.\n+\t* lto-section-in.c (lto_section_name): Add \"mode_table\" entry.\n+\t(lto_create_simple_input_block): Add mode_table argument to the\n+\tlto_input_block constructors.\n+\t* ipa-prop.c (ipa_prop_read_section, read_replacements_section):\n+\tLikewise.\n+\t* data-streamer-in.c (string_for_index): Likewise.\n+\t* ipa-inline-analysis.c (inline_read_section): Likewise.\n+\t* ipa-icf.c (sem_item_optimizer::read_section): Likewise.\n+\t* lto-cgraph.c (input_cgraph_opt_section): Likewise.\n+\t* lto-streamer-in.c (lto_read_body_or_constructor,\n+\tlto_input_toplevel_asms): Likewise.\n+\t(lto_input_mode_table): New function.\n+\t* tree-streamer-out.c (pack_ts_fixed_cst_value_fields,\n+\tpack_ts_decl_common_value_fields, pack_ts_type_common_value_fields):\n+\tUse bp_pack_machine_mode.\n+\t* real.h (struct real_format): Add name field.\n+\t* lto-streamer.h (enum lto_section_type): Add LTO_section_mode_table.\n+\t(class lto_input_block): Add mode_table member.\n+\t(lto_input_block::lto_input_block): Add mode_table_ argument,\n+\tinitialize mode_table.\n+\t(struct lto_file_decl_data): Add mode_table field.\n+\t(lto_input_mode_table, lto_output_init_mode_table): New prototypes.\n+\t* tree-streamer-in.c (unpack_ts_fixed_cst_value_fields,\n+\tunpack_ts_decl_common_value_fields,\n+\tunpack_ts_type_common_value_fields): Call bp_unpack_machine_mode.\n+\t* tree-streamer.c (streamer_mode_table): New variable.\n+\t* real.c (ieee_single_format, mips_single_format,\n+\tmotorola_single_format, spu_single_format, ieee_double_format,\n+\tmips_double_format, motorola_double_format,\n+\tieee_extended_motorola_format, ieee_extended_intel_96_format,\n+\tieee_extended_intel_128_format, ieee_extended_intel_96_round_53_format,\n+\tibm_extended_format, mips_extended_format, ieee_quad_format,\n+\tmips_quad_format, vax_f_format, vax_d_format, vax_g_format,\n+\tdecimal_single_format, decimal_double_format, decimal_quad_format,\n+\tieee_half_format, arm_half_format, real_internal_format): Add name\n+\tfield.\n+\t* config/pdp11/pdp11.c (pdp11_f_format, pdp11_d_format): Likewise.\n+\n 2015-02-26  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR target/65161"}, {"sha": "cb805d3b35cb2f9a314810e8dee3366fde42421d", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -107,7 +107,8 @@ const struct real_format pdp11_f_format =\n     false,\n     false,\n     false,\n-    false\n+    false,\n+    \"pdp11_f\"\n   };\n \n const struct real_format pdp11_d_format =\n@@ -128,7 +129,8 @@ const struct real_format pdp11_d_format =\n     false,\n     false,\n     false,\n-    false\n+    false,\n+    \"pdp11_d\"\n   };\n \n static void"}, {"sha": "424d52295fa986dcff379a3c97322a76bd875915", "filename": "gcc/data-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Fdata-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Fdata-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer-in.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -70,7 +70,7 @@ string_for_index (struct data_in *data_in, unsigned int loc, unsigned int *rlen)\n     }\n \n   /* Get the string stored at location LOC in DATA_IN->STRINGS.  */\n-  lto_input_block str_tab (data_in->strings, loc - 1, data_in->strings_len);\n+  lto_input_block str_tab (data_in->strings, loc - 1, data_in->strings_len, NULL);\n   len = streamer_read_uhwi (&str_tab);\n   *rlen = len;\n "}, {"sha": "c564a928ccbc83f7d5f1a46279573180c32e7001", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -1496,7 +1496,7 @@ sem_item_optimizer::read_section (lto_file_decl_data *file_data,\n   unsigned int count;\n \n   lto_input_block ib_main ((const char *) data + main_offset, 0,\n-\t\t\t   header->main_size);\n+\t\t\t   header->main_size, file_data->mode_table);\n \n   data_in =\n     lto_data_in_create (file_data, (const char *) data + string_offset,"}, {"sha": "be178ad445c27ad543700409b3c288f1a17b18a5", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -4190,7 +4190,8 @@ inline_read_section (struct lto_file_decl_data *file_data, const char *data,\n   unsigned int i, count2, j;\n   unsigned int f_count;\n \n-  lto_input_block ib ((const char *) data + main_offset, header->main_size);\n+  lto_input_block ib ((const char *) data + main_offset, header->main_size,\n+\t\t      file_data->mode_table);\n \n   data_in =\n     lto_data_in_create (file_data, (const char *) data + string_offset,"}, {"sha": "cfd9c16ed9c17c6ff0fc181379d25d8bac088367", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -4868,7 +4868,7 @@ ipa_prop_read_section (struct lto_file_decl_data *file_data, const char *data,\n   unsigned int count;\n \n   lto_input_block ib_main ((const char *) data + main_offset,\n-\t\t\t   header->main_size);\n+\t\t\t   header->main_size, file_data->mode_table);\n \n   data_in =\n     lto_data_in_create (file_data, (const char *) data + string_offset,\n@@ -5089,7 +5089,7 @@ read_replacements_section (struct lto_file_decl_data *file_data,\n   unsigned int count;\n \n   lto_input_block ib_main ((const char *) data + main_offset,\n-\t\t\t   header->main_size);\n+\t\t\t   header->main_size, file_data->mode_table);\n \n   data_in = lto_data_in_create (file_data, (const char *) data + string_offset,\n \t\t\t\theader->string_size, vNULL);"}, {"sha": "c875fed1dbe36f8d5ec4cbbbad3a6f737e682f26", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -2122,7 +2122,7 @@ input_cgraph_opt_section (struct lto_file_decl_data *file_data,\n   unsigned int count;\n \n   lto_input_block ib_main ((const char *) data + main_offset,\n-\t\t\t   header->main_size);\n+\t\t\t   header->main_size, file_data->mode_table);\n \n   data_in =\n     lto_data_in_create (file_data, (const char *) data + string_offset,"}, {"sha": "092b0e289235111f4d32637ade9cd2a41753f78f", "filename": "gcc/lto-section-in.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto-section-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto-section-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-in.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -89,7 +89,8 @@ const char *lto_section_name[LTO_N_SECTION_TYPES] =\n   \"inline\",\n   \"ipcp_trans\",\n   \"icf\",\n-  \"offload_table\"\n+  \"offload_table\",\n+  \"mode_table\"\n };\n \n \n@@ -262,7 +263,8 @@ lto_create_simple_input_block (struct lto_file_decl_data *file_data,\n     return NULL;\n \n   *datar = data;\n-  return new lto_input_block (data + main_offset, header->main_size);\n+  return new lto_input_block (data + main_offset, header->main_size,\n+\t\t\t      file_data->mode_table);\n }\n \n "}, {"sha": "a045b9746c60c436a9fec71e1ae61b06ca1bbc2d", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 123, "deletions": 3, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -1116,10 +1116,12 @@ lto_read_body_or_constructor (struct lto_file_decl_data *file_data, struct symta\n \n       /* Set up the struct function.  */\n       from = data_in->reader_cache->nodes.length ();\n-      lto_input_block ib_main (data + main_offset, header->main_size);\n+      lto_input_block ib_main (data + main_offset, header->main_size,\n+\t\t\t       file_data->mode_table);\n       if (TREE_CODE (node->decl) == FUNCTION_DECL)\n \t{\n-\t  lto_input_block ib_cfg (data + cfg_offset, header->cfg_size);\n+\t  lto_input_block ib_cfg (data + cfg_offset, header->cfg_size,\n+\t\t\t\t  file_data->mode_table);\n \t  input_function (fn_decl, data_in, &ib_main, &ib_cfg);\n \t}\n       else\n@@ -1384,7 +1386,8 @@ lto_input_toplevel_asms (struct lto_file_decl_data *file_data, int order_base)\n \n   string_offset = sizeof (*header) + header->main_size;\n \n-  lto_input_block ib (data + sizeof (*header), header->main_size);\n+  lto_input_block ib (data + sizeof (*header), header->main_size,\n+\t\t      file_data->mode_table);\n \n   data_in = lto_data_in_create (file_data, data + string_offset,\n \t\t\t      header->string_size, vNULL);\n@@ -1403,6 +1406,123 @@ lto_input_toplevel_asms (struct lto_file_decl_data *file_data, int order_base)\n }\n \n \n+/* Input mode table.  */\n+\n+void\n+lto_input_mode_table (struct lto_file_decl_data *file_data)\n+{\n+  size_t len;\n+  const char *data = lto_get_section_data (file_data, LTO_section_mode_table,\n+\t\t\t\t\t   NULL, &len);\n+  if (! data)\n+    {\n+      internal_error (\"cannot read LTO mode table from %s\",\n+\t\t      file_data->file_name);\n+      return;\n+    }\n+\n+  unsigned char *table = ggc_cleared_vec_alloc<unsigned char> (1 << 8);\n+  file_data->mode_table = table;\n+  const struct lto_simple_header_with_strings *header\n+    = (const struct lto_simple_header_with_strings *) data;\n+  int string_offset;\n+  struct data_in *data_in;\n+  string_offset = sizeof (*header) + header->main_size;\n+\n+  lto_input_block ib (data + sizeof (*header), header->main_size, NULL);\n+  data_in = lto_data_in_create (file_data, data + string_offset,\n+\t\t\t\theader->string_size, vNULL);\n+  bitpack_d bp = streamer_read_bitpack (&ib);\n+\n+  table[VOIDmode] = VOIDmode;\n+  table[BLKmode] = BLKmode;\n+  unsigned int m;\n+  while ((m = bp_unpack_value (&bp, 8)) != VOIDmode)\n+    {\n+      enum mode_class mclass\n+\t= bp_unpack_enum (&bp, mode_class, MAX_MODE_CLASS);\n+      unsigned int size = bp_unpack_value (&bp, 8);\n+      unsigned int prec = bp_unpack_value (&bp, 16);\n+      machine_mode inner = (machine_mode) table[bp_unpack_value (&bp, 8)];\n+      unsigned int nunits = bp_unpack_value (&bp, 8);\n+      unsigned int ibit = 0, fbit = 0;\n+      unsigned int real_fmt_len = 0;\n+      const char *real_fmt_name = NULL;\n+      switch (mclass)\n+\t{\n+\tcase MODE_FRACT:\n+\tcase MODE_UFRACT:\n+\tcase MODE_ACCUM:\n+\tcase MODE_UACCUM:\n+\t  ibit = bp_unpack_value (&bp, 8);\n+\t  fbit = bp_unpack_value (&bp, 8);\n+\t  break;\n+\tcase MODE_FLOAT:\n+\tcase MODE_DECIMAL_FLOAT:\n+\t  real_fmt_name = bp_unpack_indexed_string (data_in, &bp,\n+\t\t\t\t\t\t    &real_fmt_len);\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+      /* First search just the GET_CLASS_NARROWEST_MODE to wider modes,\n+\t if not found, fallback to all modes.  */\n+      int pass;\n+      for (pass = 0; pass < 2; pass++)\n+\tfor (machine_mode mr = pass ? VOIDmode\n+\t\t\t\t    : GET_CLASS_NARROWEST_MODE (mclass);\n+\t     pass ? mr < MAX_MACHINE_MODE : mr != VOIDmode;\n+\t     pass ? mr = (machine_mode) (m + 1)\n+\t\t  : mr = GET_MODE_WIDER_MODE (mr))\n+\t  if (GET_MODE_CLASS (mr) != mclass\n+\t      || GET_MODE_SIZE (mr) != size\n+\t      || GET_MODE_PRECISION (mr) != prec\n+\t      || GET_MODE_INNER (mr) != inner\n+\t      || GET_MODE_IBIT (mr) != ibit\n+\t      || GET_MODE_FBIT (mr) != fbit\n+\t      || GET_MODE_NUNITS (mr) != nunits)\n+\t    continue;\n+\t  else if ((mclass == MODE_FLOAT || mclass == MODE_DECIMAL_FLOAT)\n+\t\t   && strcmp (REAL_MODE_FORMAT (mr)->name, real_fmt_name) != 0)\n+\t    continue;\n+\t  else\n+\t    {\n+\t      table[m] = mr;\n+\t      pass = 2;\n+\t      break;\n+\t    }\n+      unsigned int mname_len;\n+      const char *mname = bp_unpack_indexed_string (data_in, &bp, &mname_len);\n+      if (pass == 2)\n+\t{\n+\t  switch (mclass)\n+\t    {\n+\t    case MODE_VECTOR_INT:\n+\t    case MODE_VECTOR_FLOAT:\n+\t    case MODE_VECTOR_FRACT:\n+\t    case MODE_VECTOR_UFRACT:\n+\t    case MODE_VECTOR_ACCUM:\n+\t    case MODE_VECTOR_UACCUM:\n+\t      /* For unsupported vector modes just use BLKmode,\n+\t\t if the scalar mode is supported.  */\n+\t      if (inner != VOIDmode)\n+\t\t{\n+\t\t  table[m] = BLKmode;\n+\t\t  break;\n+\t\t}\n+\t      /* FALLTHRU */\n+\t    default:\n+\t      fatal_error (UNKNOWN_LOCATION, \"unsupported mode %s\\n\", mname);\n+\t      break;\n+\t    }\n+\t}\n+    }\n+  lto_data_in_delete (data_in);\n+\n+  lto_free_section_data (file_data, LTO_section_mode_table, NULL, data, len);\n+}\n+\n+\n /* Initialization for the LTO reader.  */\n \n void"}, {"sha": "671bac3806bbda94cb7c3390b96ebe468976ef74", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -2642,6 +2642,96 @@ produce_symtab (struct output_block *ob)\n }\n \n \n+/* Init the streamer_mode_table for output, where we collect info on what\n+   machine_mode values have been streamed.  */\n+void\n+lto_output_init_mode_table (void)\n+{\n+  memset (streamer_mode_table, '\\0', MAX_MACHINE_MODE);\n+}\n+\n+\n+/* Write the mode table.  */\n+static void\n+lto_write_mode_table (void)\n+{\n+  struct output_block *ob;\n+  ob = create_output_block (LTO_section_mode_table);\n+  bitpack_d bp = bitpack_create (ob->main_stream);\n+\n+  /* Ensure that for GET_MODE_INNER (m) != VOIDmode we have\n+     also the inner mode marked.  */\n+  for (int i = 0; i < (int) MAX_MACHINE_MODE; i++)\n+    if (streamer_mode_table[i])\n+      {\n+\tmachine_mode m = (machine_mode) i;\n+\tif (GET_MODE_INNER (m) != VOIDmode)\n+\t  streamer_mode_table[(int) GET_MODE_INNER (m)] = 1;\n+      }\n+  /* First stream modes that have GET_MODE_INNER (m) == VOIDmode,\n+     so that we can refer to them afterwards.  */\n+  for (int pass = 0; pass < 2; pass++)\n+    for (int i = 0; i < (int) MAX_MACHINE_MODE; i++)\n+      if (streamer_mode_table[i] && i != (int) VOIDmode && i != (int) BLKmode)\n+\t{\n+\t  machine_mode m = (machine_mode) i;\n+\t  if ((GET_MODE_INNER (m) == VOIDmode) ^ (pass == 0))\n+\t    continue;\n+\t  bp_pack_value (&bp, m, 8);\n+\t  bp_pack_enum (&bp, mode_class, MAX_MODE_CLASS, GET_MODE_CLASS (m));\n+\t  bp_pack_value (&bp, GET_MODE_SIZE (m), 8);\n+\t  bp_pack_value (&bp, GET_MODE_PRECISION (m), 16);\n+\t  bp_pack_value (&bp, GET_MODE_INNER (m), 8);\n+\t  bp_pack_value (&bp, GET_MODE_NUNITS (m), 8);\n+\t  switch (GET_MODE_CLASS (m))\n+\t    {\n+\t    case MODE_FRACT:\n+\t    case MODE_UFRACT:\n+\t    case MODE_ACCUM:\n+\t    case MODE_UACCUM:\n+\t      bp_pack_value (&bp, GET_MODE_IBIT (m), 8);\n+\t      bp_pack_value (&bp, GET_MODE_FBIT (m), 8);\n+\t      break;\n+\t    case MODE_FLOAT:\n+\t    case MODE_DECIMAL_FLOAT:\n+\t      bp_pack_string (ob, &bp, REAL_MODE_FORMAT (m)->name, true);\n+\t      break;\n+\t    default:\n+\t      break;\n+\t    }\n+\t  bp_pack_string (ob, &bp, GET_MODE_NAME (m), true);\n+\t}\n+  bp_pack_value (&bp, VOIDmode, 8);\n+\n+  streamer_write_bitpack (&bp);\n+\n+  char *section_name\n+    = lto_get_section_name (LTO_section_mode_table, NULL, NULL);\n+  lto_begin_section (section_name, !flag_wpa);\n+  free (section_name);\n+\n+  /* The entire header stream is computed here.  */\n+  struct lto_simple_header_with_strings header;\n+  memset (&header, 0, sizeof (header));\n+\n+  /* Write the header.  */\n+  header.major_version = LTO_major_version;\n+  header.minor_version = LTO_minor_version;\n+\n+  header.main_size = ob->main_stream->total_size;\n+  header.string_size = ob->string_stream->total_size;\n+  lto_write_data (&header, sizeof header);\n+\n+  /* Put all of the gimple and the string table out the asm file as a\n+     block of text.  */\n+  lto_write_stream (ob->main_stream);\n+  lto_write_stream (ob->string_stream);\n+\n+  lto_end_section ();\n+  destroy_output_block (ob);\n+}\n+\n+\n /* This pass is run after all of the functions are serialized and all\n    of the IPA passes have written their serialized forms.  This pass\n    causes the vector of all of the global decls and types used from\n@@ -2749,4 +2839,6 @@ produce_asm_for_decls (void)\n   lto_symtab_encoder_delete (ob->decl_state->symtab_node_encoder);\n   lto_function_decl_states.release ();\n   destroy_output_block (ob);\n+  if (lto_stream_offload_p)\n+    lto_write_mode_table ();\n }"}, {"sha": "c8862a290e023bc977bb7d048b76db1d2010ed48", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -248,6 +248,7 @@ enum lto_section_type\n   LTO_section_ipcp_transform,\n   LTO_section_ipa_icf,\n   LTO_section_offload_table,\n+  LTO_section_mode_table,\n   LTO_N_SECTION_TYPES\t\t/* Must be last.  */\n };\n \n@@ -312,12 +313,15 @@ class lto_input_block\n public:\n   /* Special constructor for the string table, it abuses this to\n      do random access but use the uhwi decoder.  */\n-  lto_input_block (const char *data_, unsigned int p_, unsigned int len_)\n-      : data (data_), p (p_), len (len_) {}\n-  lto_input_block (const char *data_, unsigned int len_)\n-      : data (data_), p (0), len (len_) {}\n+  lto_input_block (const char *data_, unsigned int p_, unsigned int len_,\n+\t\t   const unsigned char *mode_table_)\n+      : data (data_), mode_table (mode_table_), p (p_), len (len_) {}\n+  lto_input_block (const char *data_, unsigned int len_,\n+\t\t   const unsigned char *mode_table_)\n+      : data (data_), mode_table (mode_table_), p (0), len (len_) {}\n \n   const char *data;\n+  const unsigned char *mode_table;\n   unsigned int p;\n   unsigned int len;\n };\n@@ -527,6 +531,9 @@ struct GTY(()) lto_file_decl_data\n \n   /* Map assigning declarations their resolutions.  */\n   hash_map<tree, ld_plugin_symbol_resolution> * GTY((skip)) resolution_map;\n+\n+  /* Mode translation table.  */\n+  const unsigned char *mode_table;\n };\n \n typedef struct lto_file_decl_data *lto_file_decl_data_ptr;\n@@ -775,6 +782,7 @@ extern void lto_input_variable_constructor (struct lto_file_decl_data *,\n extern void lto_input_constructors_and_inits (struct lto_file_decl_data *,\n \t\t\t\t\t      const char *);\n extern void lto_input_toplevel_asms (struct lto_file_decl_data *, int);\n+extern void lto_input_mode_table (struct lto_file_decl_data *);\n extern struct data_in *lto_data_in_create (struct lto_file_decl_data *,\n \t\t\t\t    const char *, unsigned,\n \t\t\t\t    vec<ld_plugin_symbol_resolution_t> );\n@@ -807,6 +815,7 @@ void lto_output_decl_state_refs (struct output_block *,\n \t\t\t         struct lto_output_stream *,\n \t\t\t         struct lto_out_decl_state *);\n void lto_output_location (struct output_block *, struct bitpack_d *, location_t);\n+void lto_output_init_mode_table (void);\n \n \n /* In lto-cgraph.c  */"}, {"sha": "994189f75b0c86c7981090eda98ef63b4cbd6f57", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -1,3 +1,11 @@\n+2015-02-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lto.c (lto_mode_identity_table): New variable.\n+\t(lto_read_decls): Add mode_table argument to the lto_input_block\n+\tconstructor.\n+\t(lto_file_finalize): Initialize mode_table.\n+\t(lto_init): Initialize lto_mode_identity_table.\n+\n 2015-02-24  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR libgomp/64625"}, {"sha": "ce7e6b1974a74353cd46bfc301a2d309a67b6973", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -85,6 +85,8 @@ static int lto_parallelism;\n \n static GTY(()) tree first_personality_decl;\n \n+static GTY(()) const unsigned char *lto_mode_identity_table;\n+\n /* Returns a hash code for P.  */\n \n static hashval_t\n@@ -1877,7 +1879,7 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n   uint32_t num_decl_states;\n \n   lto_input_block ib_main ((const char *) data + main_offset,\n-\t\t\t   header->main_size);\n+\t\t\t   header->main_size, decl_data->mode_table);\n \n   data_in = lto_data_in_create (decl_data, (const char *) data + string_offset,\n \t\t\t\theader->string_size, resolutions);\n@@ -2219,6 +2221,11 @@ lto_file_finalize (struct lto_file_decl_data *file_data, lto_file *file)\n \n   file_data->renaming_hash_table = lto_create_renaming_table ();\n   file_data->file_name = file->filename;\n+#ifdef ACCEL_COMPILER\n+  lto_input_mode_table (file_data);\n+#else\n+  file_data->mode_table = lto_mode_identity_table;\n+#endif\n   data = lto_get_section_data (file_data, LTO_section_decls, NULL, &len);\n   if (data == NULL)\n     {\n@@ -3394,6 +3401,13 @@ lto_init (void)\n   memset (&lto_stats, 0, sizeof (lto_stats));\n   bitmap_obstack_initialize (NULL);\n   gimple_register_cfg_hooks ();\n+#ifndef ACCEL_COMPILER\n+  unsigned char *table\n+    = ggc_vec_alloc<unsigned char> (MAX_MACHINE_MODE);\n+  for (int m = 0; m < MAX_MACHINE_MODE; m++)\n+    table[m] = m;\n+  lto_mode_identity_table = table;\n+#endif\n }\n \n "}, {"sha": "23a90d9e2ebf680574ccecf8c631bda6fd236fef", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -2460,6 +2460,7 @@ ipa_write_summaries_1 (lto_symtab_encoder_t encoder)\n   struct lto_out_decl_state *state = lto_new_out_decl_state ();\n   state->symtab_node_encoder = encoder;\n \n+  lto_output_init_mode_table ();\n   lto_push_out_decl_state (state);\n \n   gcc_assert (!flag_wpa);\n@@ -2581,6 +2582,7 @@ ipa_write_optimization_summaries (lto_symtab_encoder_t encoder)\n   lto_symtab_encoder_iterator lsei;\n   state->symtab_node_encoder = encoder;\n \n+  lto_output_init_mode_table ();\n   lto_push_out_decl_state (state);\n   for (lsei = lsei_start_function_in_partition (encoder);\n        !lsei_end_p (lsei); lsei_next_function_in_partition (&lsei))"}, {"sha": "1d1d510333c0e0f3dd36bc2c69d1ddd141344066", "filename": "gcc/real.c", "status": "modified", "additions": 48, "deletions": 24, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -3031,7 +3031,8 @@ const struct real_format ieee_single_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    \"ieee_single\"\n   };\n \n const struct real_format mips_single_format =\n@@ -3052,7 +3053,8 @@ const struct real_format mips_single_format =\n     true,\n     true,\n     false,\n-    true\n+    true,\n+    \"mips_single\"\n   };\n \n const struct real_format motorola_single_format =\n@@ -3073,7 +3075,8 @@ const struct real_format motorola_single_format =\n     true,\n     true,\n     true,\n-    true\n+    true,\n+    \"motorola_single\"\n   };\n \n /*  SPU Single Precision (Extended-Range Mode) format is the same as IEEE\n@@ -3105,7 +3108,8 @@ const struct real_format spu_single_format =\n     true,\n     true,\n     false,\n-    false\n+    false,\n+    \"spu_single\"\n   };\n \f\n /* IEEE double-precision format.  */\n@@ -3314,7 +3318,8 @@ const struct real_format ieee_double_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    \"ieee_double\"\n   };\n \n const struct real_format mips_double_format =\n@@ -3335,7 +3340,8 @@ const struct real_format mips_double_format =\n     true,\n     true,\n     false,\n-    true\n+    true,\n+    \"mips_double\"\n   };\n \n const struct real_format motorola_double_format =\n@@ -3356,7 +3362,8 @@ const struct real_format motorola_double_format =\n     true,\n     true,\n     true,\n-    true\n+    true,\n+    \"motorola_double\"\n   };\n \f\n /* IEEE extended real format.  This comes in three flavors: Intel's as\n@@ -3700,7 +3707,8 @@ const struct real_format ieee_extended_motorola_format =\n     true,\n     true,\n     true,\n-    true\n+    true,\n+    \"ieee_extended_motorola\"\n   };\n \n const struct real_format ieee_extended_intel_96_format =\n@@ -3721,7 +3729,8 @@ const struct real_format ieee_extended_intel_96_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    \"ieee_extended_intel_96\"\n   };\n \n const struct real_format ieee_extended_intel_128_format =\n@@ -3742,7 +3751,8 @@ const struct real_format ieee_extended_intel_128_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    \"ieee_extended_intel_128\"\n   };\n \n /* The following caters to i386 systems that set the rounding precision\n@@ -3765,7 +3775,8 @@ const struct real_format ieee_extended_intel_96_round_53_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    \"ieee_extended_intel_96_round_53\"\n   };\n \f\n /* IBM 128-bit extended precision format: a pair of IEEE double precision\n@@ -3853,7 +3864,8 @@ const struct real_format ibm_extended_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    \"ibm_extended\"\n   };\n \n const struct real_format mips_extended_format =\n@@ -3874,7 +3886,8 @@ const struct real_format mips_extended_format =\n     true,\n     true,\n     false,\n-    true\n+    true,\n+    \"mips_extended\"\n   };\n \n \f\n@@ -4137,7 +4150,8 @@ const struct real_format ieee_quad_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    \"ieee_quad\"\n   };\n \n const struct real_format mips_quad_format =\n@@ -4158,7 +4172,8 @@ const struct real_format mips_quad_format =\n     true,\n     true,\n     false,\n-    true\n+    true,\n+    \"mips_quad\"\n   };\n \f\n /* Descriptions of VAX floating point formats can be found beginning at\n@@ -4458,7 +4473,8 @@ const struct real_format vax_f_format =\n     false,\n     false,\n     false,\n-    false\n+    false,\n+    \"vax_f\"\n   };\n \n const struct real_format vax_d_format =\n@@ -4479,7 +4495,8 @@ const struct real_format vax_d_format =\n     false,\n     false,\n     false,\n-    false\n+    false,\n+    \"vax_d\"\n   };\n \n const struct real_format vax_g_format =\n@@ -4500,7 +4517,8 @@ const struct real_format vax_g_format =\n     false,\n     false,\n     false,\n-    false\n+    false,\n+    \"vax_g\"\n   };\n \f\n /* Encode real R into a single precision DFP value in BUF.  */\n@@ -4576,7 +4594,8 @@ const struct real_format decimal_single_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    \"decimal_single\"\n   };\n \n /* Double precision decimal floating point (IEEE 754). */\n@@ -4598,7 +4617,8 @@ const struct real_format decimal_double_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    \"decimal_double\"\n   };\n \n /* Quad precision decimal floating point (IEEE 754). */\n@@ -4620,7 +4640,8 @@ const struct real_format decimal_quad_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    \"decimal_quad\"\n   };\n \f\n /* Encode half-precision floats.  This routine is used both for the IEEE\n@@ -4757,7 +4778,8 @@ const struct real_format ieee_half_format =\n     true,\n     true,\n     true,\n-    false\n+    false,\n+    \"ieee_half\"\n   };\n \n /* ARM's alternative half-precision format, similar to IEEE but with\n@@ -4781,7 +4803,8 @@ const struct real_format arm_half_format =\n     true,\n     true,\n     false,\n-    false\n+    false,\n+    \"arm_half\"\n   };\n \f\n /* A synthetic \"format\" for internal arithmetic.  It's the size of the\n@@ -4826,7 +4849,8 @@ const struct real_format real_internal_format =\n     false,\n     true,\n     true,\n-    false\n+    false,\n+    \"real_internal\"\n   };\n \f\n /* Calculate X raised to the integer exponent N in mode MODE and store"}, {"sha": "37a8499baa18e9cedb4eb43784ad198cc0ddf18a", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -155,6 +155,7 @@ struct real_format\n   bool has_signed_zero;\n   bool qnan_msb_set;\n   bool canonical_nan_lsbs_set;\n+  const char *name;\n };\n \n "}, {"sha": "42e2a73393d517ebd57d77a483db4cb52e413d52", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -224,7 +224,7 @@ static void\n unpack_ts_fixed_cst_value_fields (struct bitpack_d *bp, tree expr)\n {\n   FIXED_VALUE_TYPE *fp = ggc_alloc<fixed_value> ();\n-  fp->mode = bp_unpack_enum (bp, machine_mode, MAX_MACHINE_MODE);\n+  fp->mode = bp_unpack_machine_mode (bp);\n   fp->data.low = bp_unpack_var_len_int (bp);\n   fp->data.high = bp_unpack_var_len_int (bp);\n   TREE_FIXED_CST_PTR (expr) = fp;\n@@ -236,7 +236,7 @@ unpack_ts_fixed_cst_value_fields (struct bitpack_d *bp, tree expr)\n static void\n unpack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n {\n-  DECL_MODE (expr) = bp_unpack_enum (bp, machine_mode, MAX_MACHINE_MODE);\n+  DECL_MODE (expr) = bp_unpack_machine_mode (bp);\n   DECL_NONLOCAL (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_VIRTUAL_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_IGNORED_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n@@ -376,7 +376,7 @@ unpack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n {\n   machine_mode mode;\n \n-  mode = bp_unpack_enum (bp, machine_mode, MAX_MACHINE_MODE);\n+  mode = bp_unpack_machine_mode (bp);\n   SET_TYPE_MODE (expr, mode);\n   TYPE_STRING_FLAG (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_NO_FORCE_BLK (expr) = (unsigned) bp_unpack_value (bp, 1);"}, {"sha": "0e5458b14f2f3ac43ef64e4d0e2e29d42ccc6ac3", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -190,7 +190,7 @@ static void\n pack_ts_fixed_cst_value_fields (struct bitpack_d *bp, tree expr)\n {\n   struct fixed_value fv = TREE_FIXED_CST (expr);\n-  bp_pack_enum (bp, machine_mode, MAX_MACHINE_MODE, fv.mode);\n+  bp_pack_machine_mode (bp, fv.mode);\n   bp_pack_var_len_int (bp, fv.data.low);\n   bp_pack_var_len_int (bp, fv.data.high);\n }\n@@ -201,7 +201,7 @@ pack_ts_fixed_cst_value_fields (struct bitpack_d *bp, tree expr)\n static void\n pack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n {\n-  bp_pack_enum (bp, machine_mode, MAX_MACHINE_MODE, DECL_MODE (expr));\n+  bp_pack_machine_mode (bp, DECL_MODE (expr));\n   bp_pack_value (bp, DECL_NONLOCAL (expr), 1);\n   bp_pack_value (bp, DECL_VIRTUAL_P (expr), 1);\n   bp_pack_value (bp, DECL_IGNORED_P (expr), 1);\n@@ -325,7 +325,7 @@ pack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n static void\n pack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n {\n-  bp_pack_enum (bp, machine_mode, MAX_MACHINE_MODE, TYPE_MODE (expr));\n+  bp_pack_machine_mode (bp, TYPE_MODE (expr));\n   bp_pack_value (bp, TYPE_STRING_FLAG (expr), 1);\n   bp_pack_value (bp, TYPE_NO_FORCE_BLK (expr), 1);\n   bp_pack_value (bp, TYPE_NEEDS_CONSTRUCTING (expr), 1);"}, {"sha": "2eb0305f3dcdac3f3184c2e4bb3c0e79d6892ccc", "filename": "gcc/tree-streamer.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Ftree-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Ftree-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.c?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -53,6 +53,14 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"tree-streamer.h\"\n \n+/* Table indexed by machine_mode, used for 2 different purposes.\n+   During streaming out we record there non-zero value for all modes\n+   that were streamed out.\n+   During streaming in, we translate the on the disk mode using this\n+   table.  For normal LTO it is set to identity, for ACCEL_COMPILER\n+   depending on the mode_table content.  */\n+unsigned char streamer_mode_table[1 << 8];\n+\n /* Check that all the TS_* structures handled by the streamer_write_* and\n    streamer_read_* routines are exactly ALL the structures defined in\n    treestruct.def.  */"}, {"sha": "20e2621511d710f3e6c7afa85caea35a307fdac7", "filename": "gcc/tree-streamer.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Ftree-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db847fa8f2cca6139188b8dfa0a7064319b19193/gcc%2Ftree-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.h?ref=db847fa8f2cca6139188b8dfa0a7064319b19193", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"streamer-hooks.h\"\n #include \"lto-streamer.h\"\n+#include \"data-streamer.h\"\n #include \"hash-map.h\"\n \n /* Cache of pickled nodes.  Used to avoid writing the same node more\n@@ -91,6 +92,7 @@ void streamer_write_integer_cst (struct output_block *, tree, bool);\n void streamer_write_builtin (struct output_block *, tree);\n \n /* In tree-streamer.c.  */\n+extern unsigned char streamer_mode_table[1 << 8];\n void streamer_check_handled_ts_structures (void);\n bool streamer_tree_cache_insert (struct streamer_tree_cache_d *, tree,\n \t\t\t\t hashval_t, unsigned *);\n@@ -119,5 +121,19 @@ streamer_tree_cache_get_hash (struct streamer_tree_cache_d *cache, unsigned ix)\n   return cache->hashes[ix];\n }\n \n+static inline void\n+bp_pack_machine_mode (struct bitpack_d *bp, machine_mode mode)\n+{\n+  streamer_mode_table[mode] = 1;\n+  bp_pack_enum (bp, machine_mode, 1 << 8, mode);\n+}\n+\n+static inline machine_mode\n+bp_unpack_machine_mode (struct bitpack_d *bp)\n+{\n+  return (machine_mode)\n+\t   ((struct lto_input_block *)\n+\t    bp->stream)->mode_table[bp_unpack_enum (bp, machine_mode, 1 << 8)];\n+}\n \n #endif  /* GCC_TREE_STREAMER_H  */"}]}