{"sha": "57979da1a8af9ae176809eee99390d6401ec389e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc5NzlkYTFhOGFmOWFlMTc2ODA5ZWVlOTkzOTBkNjQwMWVjMzg5ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-05T11:10:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-05T11:10:42Z"}, "message": "[multiple changes]\n\n2015-02-05  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Check_Pragma_Conformance): Add\n\tlocal variable Arg. Ensure that all errors are associated with\n\tthe pragma if it appears without an argument. Add comments on\n\tvarious cases.\n\n2015-02-05  Robert Dewar  <dewar@adacore.com>\n\n\t* lib-xref.adb: Minor reformatting.\n\nFrom-SVN: r220442", "tree": {"sha": "e6de1795907be9dfc82d63b1c74852406d971866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6de1795907be9dfc82d63b1c74852406d971866"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57979da1a8af9ae176809eee99390d6401ec389e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57979da1a8af9ae176809eee99390d6401ec389e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57979da1a8af9ae176809eee99390d6401ec389e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57979da1a8af9ae176809eee99390d6401ec389e/comments", "author": null, "committer": null, "parents": [{"sha": "27d16306413f2e6f5eb3471db9593666c35694e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d16306413f2e6f5eb3471db9593666c35694e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d16306413f2e6f5eb3471db9593666c35694e3"}], "stats": {"total": 69, "additions": 56, "deletions": 13}, "files": [{"sha": "46faa3da57fa5bfe2209c0da39d31ffa021addfc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57979da1a8af9ae176809eee99390d6401ec389e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57979da1a8af9ae176809eee99390d6401ec389e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=57979da1a8af9ae176809eee99390d6401ec389e", "patch": "@@ -1,3 +1,14 @@\n+2015-02-05  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Check_Pragma_Conformance): Add\n+\tlocal variable Arg. Ensure that all errors are associated with\n+\tthe pragma if it appears without an argument. Add comments on\n+\tvarious cases.\n+\n+2015-02-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* lib-xref.adb: Minor reformatting.\n+\n 2015-02-05  Tristan Gingold  <gingold@adacore.com>\n \n \tPR ada/64349da/64349"}, {"sha": "2ebdb146a2e09ddc0d16b524120c278e1e0d90dc", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57979da1a8af9ae176809eee99390d6401ec389e/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57979da1a8af9ae176809eee99390d6401ec389e/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=57979da1a8af9ae176809eee99390d6401ec389e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -415,13 +415,15 @@ package body Lib.Xref is\n \n       function Get_Through_Renamings (E : Entity_Id) return Entity_Id is\n          Result : Entity_Id := E;\n+\n       begin\n          while Present (Result)\n            and then Is_Object (Result)\n            and then Present (Renamed_Object (Result))\n          loop\n             Result := Get_Enclosing_Object (Renamed_Object (Result));\n          end loop;\n+\n          return Result;\n       end Get_Through_Renamings;\n \n@@ -646,11 +648,11 @@ package body Lib.Xref is\n       --  initialized type.\n \n       if not In_Extended_Main_Source_Unit (N) then\n-         if Typ = 'e'\n-           or else Typ = 'I'\n-           or else Typ = 'p'\n-           or else Typ = 'i'\n-           or else Typ = 'k'\n+         if Typ = 'e' or else\n+            Typ = 'I' or else\n+            Typ = 'p' or else\n+            Typ = 'i' or else\n+            Typ = 'k'\n            or else (Typ = 'b' and then Is_Generic_Instance (E))\n \n             --  Allow the generation of references to reads, writes and calls"}, {"sha": "49fcf2fb023ddbbb67e54cdbed6e73e6b77e208d", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57979da1a8af9ae176809eee99390d6401ec389e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57979da1a8af9ae176809eee99390d6401ec389e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=57979da1a8af9ae176809eee99390d6401ec389e", "patch": "@@ -19615,42 +19615,72 @@ package body Sem_Prag is\n                Entity_Pragma  : Node_Id;\n                Entity         : Entity_Id)\n             is\n+               Arg : Node_Id := Arg1;\n+\n             begin\n+               --  The current pragma may appear without an argument. If this\n+               --  is the case, associate all error messages with the pragma\n+               --  itself.\n+\n+               if No (Arg) then\n+                  Arg := N;\n+               end if;\n+\n+               --  The mode of the current pragma is compared against that of\n+               --  an enclosing context.\n+\n                if Present (Context_Pragma) then\n                   pragma Assert (Nkind (Context_Pragma) = N_Pragma);\n \n-                  --  New mode less restrictive than the established mode\n+                  --  Issue an error if the new mode is less restrictive than\n+                  --  that of the context.\n \n                   if Get_SPARK_Mode_From_Pragma (Context_Pragma) = Off\n                     and then Get_SPARK_Mode_From_Pragma (N) = On\n                   then\n                      Error_Msg_N\n-                       (\"cannot change SPARK_Mode from Off to On\", Arg1);\n+                       (\"cannot change SPARK_Mode from Off to On\", Arg);\n                      Error_Msg_Sloc := Sloc (SPARK_Mode_Pragma);\n-                     Error_Msg_N (\"\\SPARK_Mode was set to Off#\", Arg1);\n+                     Error_Msg_N (\"\\SPARK_Mode was set to Off#\", Arg);\n                      raise Pragma_Exit;\n                   end if;\n                end if;\n \n+               --  The mode of the current pragma is compared against that of\n+               --  an initial package/subprogram declaration.\n+\n                if Present (Entity) then\n+\n+                  --  Both the initial declaration and the completion carry\n+                  --  SPARK_Mode pragmas.\n+\n                   if Present (Entity_Pragma) then\n+                     pragma Assert (Nkind (Entity_Pragma) = N_Pragma);\n+\n+                     --  Issue an error if the new mode is less restrictive\n+                     --  than that of the initial declaration.\n+\n                      if Get_SPARK_Mode_From_Pragma (Entity_Pragma) = Off\n                        and then Get_SPARK_Mode_From_Pragma (N) = On\n                      then\n-                        Error_Msg_N (\"incorrect use of SPARK_Mode\", Arg1);\n+                        Error_Msg_N (\"incorrect use of SPARK_Mode\", Arg);\n                         Error_Msg_Sloc := Sloc (Entity_Pragma);\n                         Error_Msg_NE\n                           (\"\\value Off was set for SPARK_Mode on&#\",\n-                           Arg1, Entity);\n+                           Arg, Entity);\n                         raise Pragma_Exit;\n                      end if;\n \n+                  --  Otherwise the initial declaration lacks a SPARK_Mode\n+                  --  pragma in which case the current pragma is illegal as\n+                  --  it cannot \"complete\".\n+\n                   else\n-                     Error_Msg_N (\"incorrect use of SPARK_Mode\", Arg1);\n+                     Error_Msg_N (\"incorrect use of SPARK_Mode\", Arg);\n                      Error_Msg_Sloc := Sloc (Entity);\n                      Error_Msg_NE\n                        (\"\\no value was set for SPARK_Mode on&#\",\n-                        Arg1, Entity);\n+                        Arg, Entity);\n                      raise Pragma_Exit;\n                   end if;\n                end if;"}]}