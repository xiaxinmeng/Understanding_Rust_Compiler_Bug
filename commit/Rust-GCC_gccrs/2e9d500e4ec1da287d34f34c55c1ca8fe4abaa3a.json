{"sha": "2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU5ZDUwMGU0ZWMxZGEyODdkMzRmMzRjNTVjMWNhOGZlNGFiYWEzYQ==", "commit": {"author": {"name": "Sameera Deshpande", "email": "sameera.deshpande@linaro.org", "date": "2018-10-31T07:32:53Z"}, "committer": {"name": "Sameera Deshpande", "email": "sameerad@gcc.gnu.org", "date": "2018-10-31T07:32:53Z"}, "message": "Add pipeline description for Qualcomm Saphira core.\n\nFrom-SVN: r265653", "tree": {"sha": "b17ca4d83523673b07dc4cc434f944152179fcca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b17ca4d83523673b07dc4cc434f944152179fcca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a/comments", "author": null, "committer": null, "parents": [{"sha": "8f4103c5aa10d89ff491fd03e372dbc96d703847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4103c5aa10d89ff491fd03e372dbc96d703847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f4103c5aa10d89ff491fd03e372dbc96d703847"}], "stats": {"total": 569, "additions": 568, "deletions": 1}, "files": [{"sha": "4ed9cd6d37d9d8697b22179e8e0892ff6fd2dbf6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a", "patch": "@@ -1,3 +1,9 @@\n+2018-10-31 Sameera Deshpande <sameera.deshpande@linaro.org>\n+\n+\t* config/aarch64/aarch64-cores.def (saphira): Use saphira pipeline.\n+\t* config/aarch64/aarch64.md: Include saphira.md\n+\t* config/aarch64/saphira.md: New file for pipeline description.\n+\n 2018-10-30  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/87041"}, {"sha": "de1a998bbe2a21ad15b5f714b9440ef1e43126e8", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a", "patch": "@@ -96,7 +96,7 @@ AARCH64_CORE(\"cortex-a76\",  cortexa76, cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_2\n AARCH64_CORE(\"tsv110\",     tsv110,    cortexa57,    8_4A, AARCH64_FL_FOR_ARCH8_4 | AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2, tsv110,   0x48, 0xd01, -1)\n \n /* Qualcomm ('Q') cores. */\n-AARCH64_CORE(\"saphira\",     saphira,    falkor,    8_4A,  AARCH64_FL_FOR_ARCH8_4 | AARCH64_FL_CRYPTO | AARCH64_FL_RCPC, saphira,   0x51, 0xC01, -1)\n+AARCH64_CORE(\"saphira\",     saphira,    saphira,    8_4A,  AARCH64_FL_FOR_ARCH8_4 | AARCH64_FL_CRYPTO | AARCH64_FL_RCPC, saphira,   0x51, 0xC01, -1)\n \n /* ARMv8-A big.LITTLE implementations.  */\n "}, {"sha": "ada623bb6f11172f9500bf6104781f05b6d60e50", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a", "patch": "@@ -344,6 +344,7 @@\n (include \"../arm/cortex-a57.md\")\n (include \"../arm/exynos-m1.md\")\n (include \"falkor.md\")\n+(include \"saphira.md\")\n (include \"thunderx.md\")\n (include \"../arm/xgene1.md\")\n (include \"thunderx2t99.md\")"}, {"sha": "ff1a13a0ec5f90087b73e12bc15c70df1d2f8fab", "filename": "gcc/config/aarch64/saphira.md", "status": "added", "additions": 560, "deletions": 0, "changes": 560, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a/gcc%2Fconfig%2Faarch64%2Fsaphira.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a/gcc%2Fconfig%2Faarch64%2Fsaphira.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fsaphira.md?ref=2e9d500e4ec1da287d34f34c55c1ca8fe4abaa3a", "patch": "@@ -0,0 +1,560 @@\n+;; Saphira pipeline description\n+;; Copyright (C) 2017-2018 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"saphira\")\n+\n+;; Complex int instructions (e.g. multiply and divide) execute in the X\n+;; pipeline.  Simple int instructions execute in the X, Y, Z and B pipelines.\n+\n+(define_cpu_unit \"saphira_x\" \"saphira\")\n+(define_cpu_unit \"saphira_y\" \"saphira\")\n+\n+;; Branches execute in the Z or B pipeline or in one of the int pipelines depending\n+;; on how complex it is.  Simple int insns (like movz) can also execute here.\n+\n+(define_cpu_unit \"saphira_z\" \"saphira\")\n+(define_cpu_unit \"saphira_b\" \"saphira\")\n+\n+;; Vector and FP insns execute in the VX and VY pipelines.\n+\n+(define_automaton \"saphira_vfp\")\n+\n+(define_cpu_unit \"saphira_vx\" \"saphira_vfp\")\n+(define_cpu_unit \"saphira_vy\" \"saphira_vfp\")\n+\n+;; Loads execute in the LD pipeline.\n+;; Stores execute in the ST pipeline, for address, data, and\n+;; vector data.\n+\n+(define_automaton \"saphira_mem\")\n+\n+(define_cpu_unit \"saphira_ld\" \"saphira_mem\")\n+(define_cpu_unit \"saphira_st\" \"saphira_mem\")\n+\n+;; The GTOV and VTOG pipelines are for general to vector reg moves, and vice\n+;; versa.\n+\n+(define_cpu_unit \"saphira_gtov\" \"saphira\")\n+(define_cpu_unit \"saphira_vtog\" \"saphira\")\n+\n+;; Common reservation combinations.\n+\n+(define_reservation \"saphira_vxvy\" \"saphira_vx|saphira_vy\")\n+(define_reservation \"saphira_zb\"   \"saphira_z|saphira_b\")\n+(define_reservation \"saphira_xyzb\" \"saphira_x|saphira_y|saphira_z|saphira_b\")\n+\n+;; SIMD Floating-Point Instructions\n+\n+(define_insn_reservation \"saphira_afp_1_vxvy\" 1\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_neg_s,neon_fp_neg_d,neon_fp_abs_s,neon_fp_abs_d,neon_fp_neg_s_q,neon_fp_neg_d_q,neon_fp_abs_s_q,neon_fp_abs_d_q\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_afp_2_vxvy\" 2\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_minmax_s,neon_fp_minmax_d,neon_fp_reduc_minmax_s,neon_fp_reduc_minmax_d,neon_fp_compare_s,neon_fp_compare_d,neon_fp_round_s,neon_fp_round_d,neon_fp_minmax_s_q,neon_fp_minmax_d_q,neon_fp_compare_s_q,neon_fp_compare_d_q,neon_fp_round_s_q,neon_fp_round_d_q\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_afp_3_vxvy\" 3\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_reduc_minmax_s_q,neon_fp_reduc_minmax_d_q,neon_fp_abd_s,neon_fp_abd_d,neon_fp_addsub_s,neon_fp_addsub_d,neon_fp_reduc_add_s,neon_fp_reduc_add_d,neon_fp_abd_s_q,neon_fp_abd_d_q,neon_fp_addsub_s_q,neon_fp_addsub_d_q,neon_fp_reduc_add_s_q,neon_fp_reduc_add_d_q\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_afp_4_vxvy\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_to_int_s,neon_fp_to_int_d,neon_int_to_fp_s,neon_int_to_fp_d,neon_fp_cvt_widen_h,neon_fp_cvt_widen_s,neon_fp_to_int_s_q,neon_fp_to_int_d_q,neon_int_to_fp_s_q,neon_int_to_fp_d_q\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_afp_5_vxvy_mul\" 5\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_mul_s,neon_fp_mul_s_scalar,neon_fp_mul_s_q,neon_fp_mul_s_scalar_q\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_afp_5_vxvy_mla\" 5\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_mla_s,neon_fp_mla_s_scalar,neon_fp_mla_s_q,neon_fp_mla_s_scalar_q\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_afp_6_vxvy_mul\" 6\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_mul_d,neon_fp_mul_d_q,neon_fp_mul_d_scalar_q\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_afp_6_vxvy_mla\" 6\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_mla_d,neon_fp_mla_d_q,neon_fp_mla_d_scalar_q\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_afp_4_vxvy_vxvy_vxvy\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_cvt_narrow_s_q,neon_fp_cvt_narrow_d_q\"))\n+  \"saphira_vxvy+saphira_vxvy,saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_afp_6_vx_vy\" 6\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_div_s\"))\n+  \"saphira_vx+saphira_vy\")\n+\n+(define_insn_reservation \"saphira_afp_11_vx_vy\" 11\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_div_d\"))\n+  \"saphira_vx+saphira_vy\")\n+\n+(define_insn_reservation \"saphira_afp_6_vx_vy_vx_vy\" 6\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_div_s_q\"))\n+  \"(saphira_vx+saphira_vy),(saphira_vx+saphira_vy)\")\n+\n+(define_insn_reservation \"saphira_afp_11_vx_vy_vx_vy\" 11\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_div_d_q\"))\n+  \"(saphira_vx+saphira_vy),(saphira_vx+saphira_vy)\")\n+\n+(define_insn_reservation \"saphira_afp_12_vx_vy\" 12\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_sqrt_s\"))\n+  \"saphira_vx+saphira_vy\")\n+\n+(define_insn_reservation \"saphira_afp_22_vx_vy\" 22\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_sqrt_d\"))\n+  \"saphira_vx+saphira_vy\")\n+\n+(define_insn_reservation \"saphira_afp_12_vx_vy_vx_vy\" 12\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_sqrt_s_q\"))\n+  \"(saphira_vx+saphira_vy),(saphira_vx+saphira_vy)\")\n+\n+(define_insn_reservation \"saphira_afp_22_vx_vy_vx_vy\" 22\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_sqrt_d_q\"))\n+  \"(saphira_vx+saphira_vy),(saphira_vx+saphira_vy)\")\n+\n+;; SIMD Integer Instructions\n+\n+(define_insn_reservation \"saphira_ai_1_vxvy\" 1\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_add,neon_reduc_add,neon_logic,neon_neg,neon_sub,neon_add_q,neon_reduc_add_q,neon_logic_q,neon_neg_q,neon_sub_q\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_ai_2_vxvy\" 2\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_add_long,neon_sub_long,neon_add_halve,neon_sub_halve,neon_shift_imm,neon_shift_reg,neon_minmax,neon_abs,neon_compare,neon_compare_zero,neon_tst,neon_shift_imm_long,neon_reduc_add_long,neon_add_halve_q,neon_sub_halve_q,neon_shift_imm_q,neon_shift_reg_q,neon_minmax_q,neon_abs_q,neon_compare_q,neon_compare_zero_q,neon_tst_q\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_ai_3_vxvy\" 3\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_shift_acc,neon_reduc_add_acc,neon_abd,neon_qadd,neon_qsub,neon_qabs,neon_qneg,neon_sat_shift_imm,neon_sat_shift_imm_narrow_q,neon_sat_shift_reg,neon_shift_acc_q,neon_reduc_add_acc_q,neon_abd_q,neon_abd_long,neon_qadd_q,neon_qsub_q,neon_qabs_q,neon_qneg_q,neon_sat_shift_imm_q,neon_sat_shift_reg_q,neon_add_halve_narrow_q,neon_sub_halve_narrow_q\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_ai_4_vxvy\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_reduc_minmax,neon_reduc_minmax_q,neon_arith_acc,neon_arith_acc_q\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_ai_4_vxvy_mul\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_mul_b,neon_mul_h,neon_mul_s,neon_mul_h_scalar,neon_mul_s_scalar,neon_sat_mul_b,neon_sat_mul_h,neon_sat_mul_s,neon_sat_mul_h_scalar,neon_sat_mul_s_scalar,neon_mul_b_q,neon_mul_h_q,neon_mul_s_q,neon_mul_h_scalar_q,neon_mul_s_scalar_q,neon_sat_mul_b_q,neon_sat_mul_h_q,neon_sat_mul_s_q,neon_mul_b_long,neon_mul_h_long,neon_mul_s_long,neon_mul_d_long,neon_mul_h_scalar_long,neon_mul_s_scalar_long,neon_sat_mul_b_long,neon_sat_mul_h_long,neon_sat_mul_s_long,neon_sat_mul_h_scalar_q,neon_sat_mul_s_scalar_q,neon_sat_mul_h_scalar_long,neon_sat_mul_s_scalar_long\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_ai_4_vxvy_mla\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_mla_b,neon_mla_h,neon_mla_s,neon_mla_h_scalar,neon_mla_s_scalar,neon_mla_b_q,neon_mla_h_q,neon_mla_s_q,neon_mla_h_scalar_q,neon_mla_s_scalar_q,neon_mla_b_long,neon_mla_h_long,neon_mla_s_long,neon_mla_h_scalar_long,neon_mla_s_scalar_long,neon_sat_mla_b_long,neon_sat_mla_h_long,neon_sat_mla_s_long,neon_sat_mla_h_scalar_long,neon_sat_mla_s_scalar_long\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_2_ai_vxvy_vxvy\" 2\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_add_widen,neon_sub_widen\"))\n+  \"(saphira_vxvy),(saphira_vxvy)\")\n+\n+;; SIMD Load Instructions\n+\n+(define_insn_reservation \"saphira_ald_4_ld\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_load1_1reg,neon_load1_1reg_q,neon_load1_all_lanes,neon_load2_one_lane\"))\n+  \"saphira_ld\")\n+\n+(define_insn_reservation \"saphira_ald_4_ld_none\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_load1_2reg,neon_load2_2reg,neon_load2_all_lanes\"))\n+  \"saphira_ld\")\n+\n+(define_insn_reservation \"saphira_ald_4_ld_ld\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_load1_2reg_q,neon_load2_2reg_q,neon_load2_all_lanes_q,neon_load3_one_lane,neon_load4_one_lane,neon_ldp,neon_ldp_q\"))\n+  \"saphira_ld,saphira_ld\")\n+\n+(define_insn_reservation \"saphira_ald_4_ld_ld_none\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_load1_3reg,neon_load3_3reg,neon_load3_all_lanes\"))\n+  \"saphira_ld,saphira_ld\")\n+\n+(define_insn_reservation \"saphira_ald_4_ld_ld_ld\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_load1_3reg_q,neon_load3_3reg_q,neon_load3_all_lanes_q\"))\n+  \"saphira_ld,saphira_ld,saphira_ld\")\n+\n+(define_insn_reservation \"saphira_ald_4_ld_ld_none_none\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_load1_4reg,neon_load4_4reg\"))\n+  \"saphira_ld,saphira_ld\")\n+\n+(define_insn_reservation \"saphira_ald_4_ld_ld_ld_ld\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_load1_4reg_q,neon_load4_4reg_q,neon_load4_all_lanes,neon_load4_all_lanes_q\"))\n+  \"saphira_ld,saphira_ld,saphira_ld,saphira_ld\")\n+\n+;; Arithmetic and Logical Instructions\n+\n+(define_insn_reservation \"saphira_alu_1_xyz\" 1\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"alus_sreg,alus_imm,alus_shift_imm,csel,adc_reg,alu_imm,alu_sreg,alu_shift_imm,alu_ext,alus_ext,logic_imm,logic_reg,logic_shift_imm,logics_imm,logics_reg,logics_shift_imm,mov_reg\"))\n+  \"saphira_xyzb\")\n+\n+;; SIMD Miscellaneous Instructions\n+\n+;; No separate type for ins and dup.  But this is correct for both.\n+\n+(define_insn_reservation \"saphira_am_3_gtov\" 3\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_from_gp\"))\n+  \"saphira_gtov\")\n+\n+;; No separate type for ins and dup.  Assuming dup is more common.  Ins is\n+;; gtov+vxvy and latency of 4.\n+\n+(define_insn_reservation \"saphira_am_3_gtov_gtov\" 3\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_from_gp_q\"))\n+  \"saphira_gtov,saphira_gtov\")\n+\n+;; DUP  does not use vector pipes in Q mode, only gtov+gtov.\n+(define_insn_reservation \"saphira_am_1_gtov_gtov\" 1\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_dup_q\"))\n+  \"saphira_gtov,saphira_gtov\")\n+\n+;; neon_to_gp_q is used for 32-bit ARM instructions that move 64-bits of data\n+;; so no use needed here.\n+\n+(define_insn_reservation \"saphira_am_3_vtog\" 3\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_to_gp\"))\n+  \"saphira_vtog\")\n+\n+(define_insn_reservation \"saphira_am_1_vxvy\" 1\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_bsl,neon_dup,neon_ext,neon_ins,neon_ins_q,neon_move,neon_rev,neon_tbl1,neon_permute,neon_shift_imm_narrow_q,neon_bsl_q,neon_ext_q,neon_move_q,neon_rev_q,neon_tbl1_q,neon_permute_q,neon_tbl1,neon_tbl1_q,neon_tbl2_q,neon_tbl2\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_am_2_vxvy\" 2\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_cls,neon_cnt,neon_rbit,neon_cls_q,neon_cnt_q,neon_rbit_q,neon_tbl2,neon_tbl3_q,neon_tbl3\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_am_3_vxvy\" 3\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_recpe_s,neon_fp_recpe_d,neon_fp_rsqrte_s,neon_fp_rsqrte_d,neon_fp_recpx_s,neon_fp_recpx_d,neon_fp_recpe_s_q,neon_fp_recpe_d_q,neon_fp_rsqrte_s_q,neon_fp_rsqrte_d_q,neon_tbl4_q,neon_tbl4\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_am_5_vxvy\" 5\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_recps_s,neon_fp_recps_s_q\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_am_6_vxvy\" 6\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_fp_recps_d,neon_fp_rsqrts_d,neon_fp_recps_d_q,neon_fp_rsqrts_d_q\"))\n+  \"saphira_vxvy\")\n+\n+;; SIMD Store Instructions\n+\n+;; ??? stp is neon_store1_2reg in aarch64.md, but neon_stp in aarch64-simd.md.\n+;; Similarly with ldp.\n+\n+(define_insn_reservation \"saphira_ast_st_vsd\" 0\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_store1_1reg,neon_store1_1reg_q,neon_store1_one_lane,neon_store1_one_lane_q,neon_store1_2reg,neon_store2_2reg,neon_store2_one_lane,neon_store2_one_lane_q,neon_stp\"))\n+  \"saphira_st\")\n+\n+(define_insn_reservation \"saphira_as_0_st_vsd_st_vsd\" 0\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_store1_2reg_q,neon_store1_3reg,neon_store1_4reg,neon_store2_2reg_q,neon_store3_3reg,neon_store4_4reg,neon_store3_one_lane,neon_store3_one_lane_q,neon_store4_one_lane,neon_store4_one_lane_q,neon_stp_q\"))\n+  \"(saphira_st),(saphira_st)\")\n+\n+(define_insn_reservation \"saphira_as_0_st_vsd_st_vsd_st_vsd\" 0\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_store1_3reg_q,neon_store3_3reg_q\"))\n+  \"(saphira_st),(saphira_st),(saphira_st)\")\n+\n+(define_insn_reservation \"saphira_as_0_st_vsd_st_vsd_st_vsd_st_vsd\" 0\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"neon_store1_4reg_q,neon_store4_4reg_q\"))\n+  \"(saphira_st),(saphira_st),(saphira_st),(saphira_st)\")\n+\n+;; Branch Instructions\n+\n+(define_insn_reservation \"saphira_branch_0_zb\" 0\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"branch\"))\n+  \"saphira_zb\")\n+\n+(define_insn_reservation \"saphira_call_0_xyzb\" 0\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"call\"))\n+  \"saphira_xyzb\")\n+\n+;; Cryptography Extensions\n+\n+(define_insn_reservation \"saphira_cry_1_vxvy\" 1\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"crypto_sha1_fast\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_cry_2_vxvy\" 2\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"crypto_aesmc\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_cry_2_vxvy_vxvy\" 2\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"crypto_sha1_xor,crypto_sha256_fast,crypto_pmull,crypto_aese\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_cry_4_vy_vx\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"crypto_sha1_slow\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_cry_5_vy_vx\" 5\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"crypto_sha256_slow\"))\n+  \"saphira_vxvy\")\n+\n+;; FP Load Instructions\n+\n+(define_insn_reservation \"saphira_fld_4_ld\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"f_loads,f_loadd\"))\n+  \"saphira_ld\")\n+\n+;; No separate FP store section, these are found in the SIMD store section.\n+\n+(define_insn_reservation \"saphira_fld_0_st_vsd\" 0\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"f_stores,f_stored\"))\n+  \"saphira_st\")\n+\n+;; FP Data Processing Instructions\n+\n+(define_insn_reservation \"saphira_fpdt_0_vxvy\" 0\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"fcmps,fcmpd,fccmps,fccmpd\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_fpdt_5_vtog\" 5\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"f_cvtf2i\"))\n+  \"saphira_vtog\")\n+\n+(define_insn_reservation \"saphira_fpdt_1_vxvy\" 1\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"ffariths,ffarithd,fcsel\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_fpdt_2_vxvy\" 2\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"f_minmaxd,f_minmaxs,f_rintd,f_rints\"))\n+  \"saphira_vxvy\")\n+\n+;; Scalar FP ABD is handled same as vector FP ABD.\n+\n+(define_insn_reservation \"saphira_fpdt_3_vxvy\" 3\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"faddd,fadds\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_fpdt_4_vxvy\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"f_cvt\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_fpdt_5_vxvy_mul\" 5\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"fmuls\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_fpdt_5_vxvy_mla\" 5\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"fmacs,ffmas\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_fpdt_6_vxvy_mul\" 6\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"fmuld\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_fpdt_6_vxvy_mla\" 6\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"fmacd,ffmad\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_fpdt_6_vx_vy\" 6\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"fdivs\"))\n+  \"saphira_vx+saphira_vy\")\n+\n+(define_insn_reservation \"saphira_fpdt_11_vx_vy\" 11\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"fdivd\"))\n+  \"saphira_vx+saphira_vy\")\n+\n+(define_insn_reservation \"saphira_fpdt_12_vx_vy\" 12\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"fsqrts\"))\n+  \"saphira_vxvy\")\n+\n+(define_insn_reservation \"saphira_fpdt_22_vx_vy\" 22\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"fsqrtd\"))\n+  \"saphira_vxvy\")\n+\n+;; FP Miscellaneous Instructions\n+\n+(define_insn_reservation \"saphira_fpmsc_3_vtog\" 3\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"f_mrc\"))\n+  \"saphira_vtog\")\n+\n+(define_insn_reservation \"saphira_fpmsc_3_gtov\" 3\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"f_mcr\"))\n+  \"saphira_gtov\")\n+\n+(define_insn_reservation \"saphira_fpmsc_1_vxvy\" 1\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"fmov,fconsts,fconstd\"))\n+  \"saphira_vxvy\")\n+\n+;; No separate type for float-to-fixed conversions.  Same type as\n+;; float-to-int conversions.  They schedule the same though, so no problem.\n+\n+(define_insn_reservation \"saphira_fpmsc_6_gtov\" 6\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"f_cvti2f\"))\n+  \"saphira_gtov\")\n+\n+;; Load Instructions\n+\n+(define_insn_reservation \"saphira_ld_3_ld\" 3\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"load_4,load_8,load_16\"))\n+  \"saphira_ld\")\n+\n+;; Miscellaneous Data-Processing Instructions\n+\n+(define_insn_reservation \"saphira_misc_1_xyzb\" 1\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"bfx,bfm,extend,rotate_imm,shift_imm\"))\n+  \"saphira_xyzb\")\n+\n+(define_insn_reservation \"saphira_misc_2_x\" 2\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"crc\"))\n+  \"saphira_x\")\n+\n+(define_insn_reservation \"saphira_misc_2_xyzb\" 2\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"clz,rbit,rev\"))\n+  \"saphira_xyzb\")\n+\n+;; Divide and Multiply Instructions\n+\n+(define_insn_reservation \"saphira_muldiv_4_x_mul\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"mul\"))\n+  \"saphira_x\")\n+\n+(define_insn_reservation \"saphira_muldiv_4_x_mla\" 4\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"mla,smlal,umlal\"))\n+  \"saphira_x\")\n+\n+(define_insn_reservation \"saphira_muldiv_5_x_mul\" 5\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"smull,umull\"))\n+  \"saphira_x\")\n+\n+(define_insn_reservation \"saphira_md_11_x_zb\" 11\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"sdiv,udiv\"))\n+  \"saphira_x+saphira_zb\")\n+\n+;; Move and Shift Instructions\n+\n+(define_insn_reservation \"saphira_mvs_1_xyzb\" 1\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"mov_imm,shift_reg,adr\"))\n+  \"saphira_xyzb\")\n+\n+;; Other Instructions\n+\n+;; Block is for instruction scheduling blockage insns in RTL.  There are no\n+;; hardware instructions emitted for them, so don't use any resources.\n+\n+(define_insn_reservation \"saphira_other_0_nothing\" 0\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"no_insn,trap,block\"))\n+  \"nothing\")\n+\n+(define_insn_reservation \"saphira_other_2_ld\" 2\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"mrs\"))\n+  \"saphira_ld\")\n+\n+;; Assume multiple instructions use all pipes.\n+\n+(define_insn_reservation \"saphira_extra\" 1\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"multiple\"))\n+  \"saphira_x+saphira_y+saphira_z+saphira_b+saphira_vx+saphira_vy+saphira_ld+saphira_st+saphira_gtov+saphira_vtog\")\n+\n+;; Store Instructions\n+\n+;; No use of store_rel, store3, or store4 in aarch64.\n+\n+(define_insn_reservation \"saphira_st_0_st_sd\" 0\n+  (and (eq_attr \"tune\" \"saphira\")\n+       (eq_attr \"type\" \"store_4,store_8,store_16\"))\n+  \"saphira_st\")\n+\f\n+;; Muliply bypasses.\n+\n+;; 1 cycle latency (0 bubble) for an integer mul or mac feeding into a mac.\n+\n+(define_bypass 1\n+  \"saphira_ai_4_vxvy_mul,saphira_ai_4_vxvy_mla,saphira_muldiv_4_x_mul,saphira_muldiv_4_x_mla,saphira_muldiv_5_x_mul\"\n+  \"saphira_ai_4_vxvy_mla,saphira_muldiv_4_x_mla\")\n+\n+;; 3 cycle latency (2 bubbles) for an FP mul or mac feeding into a mac.\n+\n+(define_bypass 3\n+  \"saphira_afp_5_vxvy_mul,saphira_afp_5_vxvy_mla,saphira_afp_6_vxvy_mul,saphira_afp_6_vxvy_mla,saphira_fpdt_5_vxvy_mul,saphira_fpdt_5_vxvy_mla,saphira_fpdt_6_vxvy_mul,saphira_fpdt_6_vxvy_mla\"\n+  \"saphira_afp_5_vxvy_mla,saphira_afp_6_vxvy_mla,saphira_fpdt_5_vxvy_mla,saphira_fpdt_6_vxvy_mla\")\n+"}]}