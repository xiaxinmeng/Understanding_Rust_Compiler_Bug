{"sha": "80f8cd77304aea092dafc29fe0e7f943b6588062", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBmOGNkNzczMDRhZWEwOTJkYWZjMjlmZTBlN2Y5NDNiNjU4ODA2Mg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2019-10-10T09:04:02Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2019-10-10T09:04:02Z"}, "message": "S/390: Add support for z15 as CPU name.\n\nSo far z15 was identified as arch13. After the machine has been\nannounced we can now add the real name.\n\ngcc/ChangeLog:\n\n2019-10-10  Andreas Krebbel  <krebbel@linux.ibm.com>\n\n\t* common/config/s390/s390-common.c (PF_ARCH13): Rename to...\n\t(PF_Z15): ... this.\n\t* config.gcc: Add z15 as option for --with-arch and --with-tune\n\tconfigure switches.\n\t* config/s390/s390-c.c (s390_resolve_overloaded_builtin): Add\n\terror reporting for unsupported builtins.\n\t* config/s390/s390-opts.h (enum processor_type): Rename\n\tPROCESSOR_8561_ARCH13 to PROCESSOR_8561_Z15.\n\t* config/s390/8561.md: Rename arch13 to z15 throughout the file.\n\t* config/s390/driver-native.c (s390_host_detect_local_cpu):\n\tLikewise.\n\t* config/s390/s390-builtins.def: Likewise.\n\t* config/s390/s390.c (processor_table): Add z15 as option and keep arch13 as alternative.\n\t(s390_expand_builtin): Add missing check for unsupported builtins.\n\t(s390_canonicalize_comparison): Rename TARGET_ARCH13 to TARGET_Z15.\n\t(s390_rtx_costs): Likewise.\n\t(s390_get_sched_attrmask): Rename arch13 to z15.\n\t(s390_get_unit_mask): Likewise.\n\t(s390_is_fpd): Likewise.\n\t(s390_is_fxd): Likewise.\n\t* config/s390/s390.h (enum processor_flags): Likewise.\n\t* config/s390/s390.md: Likewise.\n\t* config/s390/vector.md: Likewise.\n\t* config/s390/vx-builtins.md: Likewise.\n\t* config/s390/s390.opt: Add z15 to processor_type value.\n\nFrom-SVN: r276792", "tree": {"sha": "932922b1cfd2b29420e1a61771b6da5ba18de2cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/932922b1cfd2b29420e1a61771b6da5ba18de2cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80f8cd77304aea092dafc29fe0e7f943b6588062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f8cd77304aea092dafc29fe0e7f943b6588062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f8cd77304aea092dafc29fe0e7f943b6588062", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f8cd77304aea092dafc29fe0e7f943b6588062/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a9150d04a2a9b6f322d3deb65eaf5b4f614ed12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a9150d04a2a9b6f322d3deb65eaf5b4f614ed12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a9150d04a2a9b6f322d3deb65eaf5b4f614ed12"}], "stats": {"total": 286, "additions": 169, "deletions": 117}, "files": [{"sha": "2e34b80eaa9fb1c0725bd5c804007d5bf752b6a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -1,3 +1,31 @@\n+2019-10-10  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* common/config/s390/s390-common.c (PF_ARCH13): Rename to...\n+\t(PF_Z15): ... this.\n+\t* config.gcc: Add z15 as option for --with-arch and --with-tune\n+\tconfigure switches.\n+\t* config/s390/s390-c.c (s390_resolve_overloaded_builtin): Add\n+\terror reporting for unsupported builtins.\n+\t* config/s390/s390-opts.h (enum processor_type): Rename\n+\tPROCESSOR_8561_ARCH13 to PROCESSOR_8561_Z15.\n+\t* config/s390/8561.md: Rename arch13 to z15 throughout the file.\n+\t* config/s390/driver-native.c (s390_host_detect_local_cpu):\n+\tLikewise.\n+\t* config/s390/s390-builtins.def: Likewise.\n+\t* config/s390/s390.c (processor_table): Add z15 as option and keep arch13 as alternative.\n+\t(s390_expand_builtin): Add missing check for unsupported builtins.\n+\t(s390_canonicalize_comparison): Rename TARGET_ARCH13 to TARGET_Z15.\n+\t(s390_rtx_costs): Likewise.\n+\t(s390_get_sched_attrmask): Rename arch13 to z15.\n+\t(s390_get_unit_mask): Likewise.\n+\t(s390_is_fpd): Likewise.\n+\t(s390_is_fxd): Likewise.\n+\t* config/s390/s390.h (enum processor_flags): Likewise.\n+\t* config/s390/s390.md: Likewise.\n+\t* config/s390/vector.md: Likewise.\n+\t* config/s390/vx-builtins.md: Likewise.\n+\t* config/s390/s390.opt: Add z15 to processor_type value.\n+\n 2019-10-10  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \tPR target/91035"}, {"sha": "2e1914e376818cdc18dfa10efc89fe839085bef9", "filename": "gcc/common/config/s390/s390-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -47,9 +47,9 @@ EXPORTED_CONST int processor_flags_table[] =\n     /* z14 */    PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n \t\t | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196 | PF_ZEC12 | PF_TX\n \t\t | PF_Z13 | PF_VX | PF_VXE | PF_Z14,\n-    /* arch13 */ PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n+    /* z15 */    PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n \t\t | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196 | PF_ZEC12 | PF_TX\n-\t\t | PF_Z13 | PF_VX | PF_VXE | PF_Z14 | PF_VXE2 | PF_ARCH13\n+\t\t | PF_Z13 | PF_VX | PF_VXE | PF_Z14 | PF_VXE2 | PF_Z15\n   };\n \n /* Change optimizations to be performed, depending on the"}, {"sha": "bdc2253f8efd23baa7a9aaa624aff3c4f7c4062b", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -4826,7 +4826,7 @@ case \"${target}\" in\n \t\tfor which in arch tune; do\n \t\t\teval \"val=\\$with_$which\"\n \t\t\tcase ${val} in\n-\t\t\t\"\" | native | z900 | z990 | z9-109 | z9-ec | z10 | z196 | zEC12 | z13 | z14 | arch5 | arch6 | arch7 | arch8 | arch9 | arch10 | arch11 | arch12 | arch13 )\n+\t\t\t\"\" | native | z900 | z990 | z9-109 | z9-ec | z10 | z196 | zEC12 | z13 | z14 | z15 | arch5 | arch6 | arch7 | arch8 | arch9 | arch10 | arch11 | arch12 | arch13 )\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "2442349271bb9adb13fd2455660051eb661aa5f3", "filename": "gcc/config/s390/8561.md", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2F8561.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2F8561.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F8561.md?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -1,4 +1,4 @@\n-;; Scheduling description for arch13.\n+;; Scheduling description for z15.\n ;;   Copyright (C) 2019 Free Software Foundation, Inc.\n ;;   Contributed by Robin Dapp (rdapp@linux.ibm.com)\n ;; This file is part of GCC.\n@@ -17,12 +17,12 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-(define_attr \"arch13_unit_fpd\" \"\"\n+(define_attr \"z15_unit_fpd\" \"\"\n (cond [(eq_attr \"mnemonic\" \"ddb,ddbr,deb,debr,dxbr,sqdb,sqdbr,sqeb,\\\n sqebr,sqxbr,vfddb,vfdsb,vfsqdb,vfsqsb,wfddb,wfdsb,wfdxb,wfsqdb,wfsqxb\")\n  (const_int 1)] (const_int 0)))\n \n-(define_attr \"arch13_unit_fxa\" \"\"\n+(define_attr \"z15_unit_fxa\" \"\"\n (cond [(eq_attr \"mnemonic\" \"a,afi,ag,agf,agfi,agfr,agh,aghi,aghik,\\\n agr,agrk,ah,ahi,ahik,ahy,al,alc,alcg,alcgr,alcr,alfi,alg,algf,algfi,algfr,\\\n alghsik,algr,algrk,alhsik,alr,alrk,aly,ar,ark,ay,bras,brasl,etnd,exrl,flogr,\\\n@@ -39,7 +39,7 @@ slgrk,sll,sllg,sllk,slr,slrk,sly,sr,sra,srag,srak,srk,srl,srlg,srlk,sy,x,xg,\\\n xgr,xgrk,xihf,xilf,xr,xrk,xy\")\n  (const_int 1)] (const_int 0)))\n \n-(define_attr \"arch13_unit_fxb\" \"\"\n+(define_attr \"z15_unit_fxb\" \"\"\n (cond [(eq_attr \"mnemonic\" \"agsi,algsi,alsi,asi,b,bc,bcr,bi,br,brcl,\\\n c,cfi,cg,cgf,cgfi,cgfr,cgfrl,cgh,cghi,cghrl,cghsi,cgit,cgr,cgrl,cgrt,ch,\\\n chi,chrl,chsi,chy,cit,cl,clfhsi,clfi,clfit,clg,clgf,clgfi,clgfr,clgfrl,\\\n@@ -52,11 +52,11 @@ tmhl,tml,tmlh,tmll,tmy,vlgvb,vlgvf,vlgvg,vlgvh,vlr,vlvgb,vlvgf,vlvgg,vlvgh,\\\n vlvgp,vst,vstef,vsteg,vstl,vstrl,vstrlr,xi,xiy\")\n  (const_int 1)] (const_int 0)))\n \n-(define_attr \"arch13_unit_fxd\" \"\"\n+(define_attr \"z15_unit_fxd\" \"\"\n (cond [(eq_attr \"mnemonic\" \"dlgr,dlr,dr,dsgfr,dsgr\")\n  (const_int 1)] (const_int 0)))\n \n-(define_attr \"arch13_unit_lsu\" \"\"\n+(define_attr \"z15_unit_lsu\" \"\"\n (cond [(eq_attr \"mnemonic\" \"a,adb,aeb,ag,agf,agh,agsi,ah,ahy,al,alc,\\\n alcg,alg,algf,algsi,alsi,aly,asi,ay,c,cdb,ceb,cg,cgf,cgfrl,cgh,cghrl,cghsi,\\\n cgrl,ch,chrl,chsi,chy,cl,clc,clfhsi,clg,clgf,clgfrl,clghrl,clghsi,clgrl,\\\n@@ -73,7 +73,7 @@ vllezf,vllezg,vllezh,vllezlf,vlrepb,vlrepf,vlrepg,vlreph,vlrl,vlrlr,vst,\\\n vstef,vsteg,vstl,vstrl,vstrlr,x,xg,xi,xiy,xy\")\n  (const_int 1)] (const_int 0)))\n \n-(define_attr \"arch13_unit_vfu\" \"\"\n+(define_attr \"z15_unit_vfu\" \"\"\n (cond [(eq_attr \"mnemonic\" \"adb,adbr,adtr,aeb,aebr,axbr,axtr,cdb,\\\n cdbr,cdtr,ceb,cebr,cpsdr,cxbr,cxtr,ddtr,dxtr,fidbr,fidbra,fidtr,fiebr,\\\n fiebra,fixbr,fixbra,fixtr,lcdbr,lcebr,lcxbr,ldeb,ldebr,ldetr,le,ledbr,ledtr,\\\n@@ -115,42 +115,42 @@ wflpxb,wfmadb,wfmasb,wfmaxb,wfmaxxb,wfmdb,wfminxb,wfmsb,wfmsdb,wfmssb,wfmsxb,\\\n wfmxb,wfnmaxb,wfnmsxb,wfsdb,wfssb,wfsxb,wldeb,wledb\")\n  (const_int 1)] (const_int 0)))\n \n-(define_attr \"arch13_cracked\" \"\"\n+(define_attr \"z15_cracked\" \"\"\n (cond [(eq_attr \"mnemonic\" \"bas,basr,cdfbr,cdftr,cdgbr,cdgtr,cdlfbr,\\\n cdlftr,cdlgbr,cdlgtr,cefbr,cegbr,celfbr,celgbr,cfdbr,cfebr,cfxbr,cgdbr,cgdtr,\\\n cgebr,cgxbr,cgxtr,chhsi,clfdbr,clfdtr,clfebr,clfxbr,clfxtr,clgdbr,clgdtr,\\\n clgebr,clgxbr,clgxtr,cs,csg,csy,d,efpc,ex,lcgfr,lngfr,lpgfr,lpq,lxr,lzxr,\\\n rxsbg,stpq,vgef,vgeg,vscef,vsceg,vsteb,vsteh\")\n  (const_int 1)] (const_int 0)))\n \n-(define_attr \"arch13_expanded\" \"\"\n+(define_attr \"z15_expanded\" \"\"\n (cond [(eq_attr \"mnemonic\" \"cds,cdsg,cdsy,cxfbr,cxftr,cxgbr,cxgtr,\\\n cxlfbr,cxlftr,cxlgbr,cxlgtr,dl,dlg,dsg,dsgf,lam,lm,lmg,lmy,sldl,srda,srdl,\\\n stam,stm,stmg,stmy,tbegin,tbeginc\")\n  (const_int 1)] (const_int 0)))\n \n-(define_attr \"arch13_groupalone\" \"\"\n+(define_attr \"z15_groupalone\" \"\"\n (cond [(eq_attr \"mnemonic\" \"alc,alcg,alcgr,alcr,axbr,axtr,clc,cxbr,\\\n cxtr,dlgr,dlr,dr,dsgfr,dsgr,dxbr,dxtr,fixbr,fixbra,fixtr,flogr,lcxbr,lnxbr,\\\n lpxbr,ltxbr,ltxtr,lxdb,lxdbr,lxdtr,lxeb,lxebr,m,madb,maeb,maebr,mfy,mg,mgrk,\\\n ml,mlg,mlgr,mlr,mr,msdb,mseb,msebr,mvc,mxbr,mxtr,nc,oc,ppa,sfpc,slb,slbg,\\\n slbgr,slbr,sqxbr,sxbr,sxtr,tabort,tcxb,tdcxt,tend,xc\")\n  (const_int 1)] (const_int 0)))\n \n-(define_attr \"arch13_endgroup\" \"\"\n+(define_attr \"z15_endgroup\" \"\"\n (cond [(eq_attr \"mnemonic\" \"bras,brasl,exrl,ipm\")\n  (const_int 1)] (const_int 0)))\n \n-(define_attr \"arch13_groupoftwo\" \"\"\n+(define_attr \"z15_groupoftwo\" \"\"\n (cond [(eq_attr \"mnemonic\" \"vacccq,vacq,vfmadb,vfmasb,vfmsdb,vfmssb,\\\n vfnmadb,vfnmasb,vfnmsdb,vfnmssb,vgfmab,vgfmaf,vgfmag,vgfmah,vmaeb,vmaef,vmaeh,\\\n vmahb,vmahf,vmahh,vmalb,vmaleb,vmalef,vmaleh,vmalf,vmalhb,vmalhf,vmalhh,\\\n vmalhw,vmalob,vmalof,vmaloh,vmaob,vmaof,vmaoh,vmslg,vperm,vsbcbiq,vsbiq,vsel,\\\n wfmadb,wfmasb,wfmaxb,wfmsdb,wfmssb,wfmsxb,wfnmaxb,wfnmsxb\")\n  (const_int 1)] (const_int 0)))\n \n-(define_insn_reservation \"arch13_0\" 0\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_0\" 0\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"a,afi,ag,agfi,aghi,aghik,agr,agrk,ahi,ahik,al,\\\n alfi,alg,algf,algfi,algfr,alghsik,algr,algrk,alhsik,alr,alrk,aly,ar,ark,ay,\\\n b,bc,bcr,bi,br,bras,brasl,brcl,c,cfi,cg,cgfi,cghi,cghsi,cgit,cgr,cgrl,\\\n@@ -168,8 +168,8 @@ sllk,slr,slrk,sly,sr,sra,srag,srak,srda,srdl,srk,srl,srlg,srlk,sy,tm,tmh,\\\n tmhh,tmhl,tml,tmlh,tmll,tmy,vlr,vlvgb,vlvgf,vlvgg,vlvgh,x,xg,xgr,xgrk,xihf,\\\n xilf,xr,xrk,xy\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_1\" 1\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_1\" 1\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"agf,agfr,agh,agsi,ah,ahy,algsi,alsi,asi,cgf,\\\n cgfr,cgfrl,cgh,cghrl,ch,chrl,chy,clm,clmy,cpsdr,laa,laag,lan,lang,lao,laog,\\\n lax,laxg,le,ler,ley,loc,locg,locghi,locgr,lochi,locr,mvghi,mvhhi,mvhi,mvi,\\\n@@ -196,8 +196,8 @@ wfcedb,wfcesb,wfcexb,wfchdb,wfchedb,wfchesb,wfchexb,wfchsb,wfchxb,wflcdb,\\\n wflcsb,wflcxb,wflndb,wflnsb,wflnxb,wflpdb,wflpsb,wflpxb,wfmaxxb,wfminxb,xi,\\\n xiy\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_2\" 2\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_2\" 2\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"cdb,cdbr,ceb,cebr,ear,ipm,l,lcbb,lcdbr,lcebr,ld,\\\n lde,ldy,lg,lgdr,lgrl,llc,llgc,llgf,llgfrl,llgh,llghrl,llgt,llh,llhrl,lm,\\\n lmg,lmy,lndbr,lnebr,lpdbr,lpebr,lrl,ltdbr,ltebr,ly,popcnt,sar,tcdb,tceb,\\\n@@ -208,8 +208,8 @@ vistrh,vlgvb,vlgvf,vlgvg,vlgvh,vllezb,vllezf,vllezg,vllezh,vllezlf,vlrepb,\\\n vlrepf,vlrepg,vlreph,vlrl,vlvgp,vpklsfs,vpklsgs,vpklshs,vpksfs,vpksgs,vpkshs,\\\n wfcdb,wfcexbs,wfchexbs,wfchxbs,wfcsb\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_3\" 3\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_3\" 3\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"cds,cdsy,mgh,mghi,mh,mhi,mhy,std,stdy,ste,stey,\\\n vcksm,vfeezbs,vfeezfs,vfeezhs,vgfmab,vgfmaf,vgfmag,vgfmah,vgfmb,vgfmf,vgfmg,\\\n vgfmh,vistrbs,vistrfs,vistrhs,vl,vlbb,vll,vlrlr,vmaeb,vmaef,vmaeh,vmahb,\\\n@@ -218,68 +218,68 @@ vmalob,vmalof,vmaloh,vmaob,vmaof,vmaoh,vmeb,vmef,vmeh,vmhb,vmhf,vmhh,vmlb,\\\n vmleb,vmlef,vmleh,vmlf,vmlhb,vmlhf,vmlhh,vmlhw,vmlob,vmlof,vmloh,vmob,vmof,\\\n vmoh,vsumb,vsumgf,vsumgh,vsumh,vsumqf,vsumqg,vtm\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_4\" 4\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_4\" 4\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"bas,basr,chhsi,clc,ex,lam,lcgfr,lngfr,lpgfr,lxr,\\\n lzxr,ms,msfi,msgf,msgfi,msgfr,msr,msy,mvc,nc,oc,ppa,rxsbg,tabort,tbegin,\\\n tbeginc,tend,vst,vstef,vsteg,vstl,vstrl,vstrlr,xc\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_5\" 5\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_5\" 5\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"adb,adbr,aeb,aebr,alc,alcg,alcgr,alcr,cs,csg,\\\n csy,fidbr,fidbra,fiebr,fiebra,ldeb,ldebr,ledbr,madbr,mdb,mdbr,meeb,meebr,\\\n msdbr,msrkc,sdb,sdbr,seb,sebr,slb,slbg,slbgr,slbr,stm,stmg,stmy,vfadb,vfasb,\\\n vfidb,vfisb,vfmadb,vfmasb,vfmdb,vfmsb,vfmsdb,vfmssb,vfnmadb,vfnmasb,vfnmsdb,\\\n vfnmssb,vfsdb,vfssb,vldeb,vledb,vmslg,wfadb,wfasb,wfidb,wfisb,wflld,wfmadb,\\\n wfmasb,wfmdb,wfmsb,wfmsdb,wfmssb,wfsdb,wfssb,wldeb,wledb\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_6\" 6\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_6\" 6\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"msg,msgr,sfpc\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_7\" 7\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_7\" 7\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"adtr,cdtr,fidtr,ldetr,ltdtr,msgrkc,sdtr,tdcdt,\\\n tdcet,vgef,vgeg\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_8\" 8\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_8\" 8\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"cdsg,flogr,lpq,stpq,vsteb,vsteh\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_9\" 9\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_9\" 9\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"cdfbr,cdgbr,cdlfbr,cdlgbr,cefbr,cegbr,celfbr,\\\n celgbr,cxfbr,cxgbr,cxlfbr,cxlgbr,m,madb,maeb,maebr,mfy,ml,mlr,mr,msdb,mseb,\\\n msebr,stam,wfaxb,wfixb,wfsxb\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_10\" 10\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_10\" 10\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"lxdb,lxdbr,lxeb,lxebr,vscef,vsceg\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_11\" 11\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_11\" 11\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"cfdbr,cfebr,cgdbr,cgebr,clfdbr,clfebr,clgdbr,\\\n clgebr,mg,mgrk,mlg,mlgr\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_12\" 12\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_12\" 12\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"cxbr,cxftr,cxlftr,cxtr,tcxb,tdcxt\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_13\" 13\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_13\" 13\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"axbr,axtr,fixbr,fixbra,fixtr,lcxbr,lnxbr,lpxbr,\\\n ltxbr,ltxtr,lxdtr,sxbr,sxtr\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_14\" 14\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_14\" 14\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"cfxbr,cgxbr,clfxbr,clgxbr,ledtr\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_16\" 16\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_16\" 16\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"cdftr,cdlftr\")) \"nothing\")\n \n-(define_insn_reservation \"arch13_20\" 20\n-  (and (eq_attr \"cpu\" \"arch13\")\n+(define_insn_reservation \"z15_20\" 20\n+  (and (eq_attr \"cpu\" \"z15\")\n (eq_attr \"mnemonic\" \"cdgtr,cdlgtr,cgdtr,cgxtr,clfdtr,clfxtr,clgdtr,\\\n clgxtr,cxgtr,cxlgtr,d,ddb,ddbr,ddtr,deb,debr,dl,dlg,dlgr,dlr,dr,dsg,dsgf,\\\n dsgfr,dsgr,dxbr,dxtr,efpc,mdtr,mxbr,mxtr,sqdb,sqdbr,sqeb,sqebr,sqxbr,vfddb,\\"}, {"sha": "6bc7d590668fc2b987112b5cdc31f365b1831b20", "filename": "gcc/config/s390/driver-native.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fdriver-native.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fdriver-native.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fdriver-native.c?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -121,10 +121,10 @@ s390_host_detect_local_cpu (int argc, const char **argv)\n \t      break;\n \t    case 0x8561:\n \t    case 0x8562:\n-\t      cpu = \"arch13\";\n+\t      cpu = \"z15\";\n \t      break;\n \t    default:\n-\t      cpu = \"arch13\";\n+\t      cpu = \"z15\";\n \t      break;\n \t    }\n \t}"}, {"sha": "7e49d089fa2fee5b8e3177cf954769f28ada5100", "filename": "gcc/config/s390/s390-builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.def?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -281,7 +281,7 @@\n #define B_HTM   (1 << 1)  /* Builtins requiring the transactional execution facility.  */\n #define B_VX    (1 << 2)  /* Builtins requiring the z13 vector extensions.  */\n #define B_VXE   (1 << 3)  /* Builtins requiring the z14 vector extensions.  */\n-#define B_VXE2  (1 << 4)  /* Builtins requiring the arch13 vector extensions.  */\n+#define B_VXE2  (1 << 4)  /* Builtins requiring the z15 vector extensions.  */\n #define B_DEP   (1 << 5)  /* Builtin has been deprecated and a warning should be issued.  */\n \n /* B_DEF defines a standard (not overloaded) builtin"}, {"sha": "629c79dbdbde6dd3ac5d864e619c018ea014def9", "filename": "gcc/config/s390/s390-c.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-c.c?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -905,6 +905,12 @@ s390_resolve_overloaded_builtin (location_t loc,\n       return error_mark_node;\n     }\n \n+  if (!TARGET_VXE2 && (ob_flags & B_VXE2))\n+    {\n+      error_at (loc, \"%qF requires z15 or higher\", ob_fndecl);\n+      return error_mark_node;\n+    }\n+\n   ob_fcode -= S390_BUILTIN_MAX;\n \n   for (b_arg_chain = TYPE_ARG_TYPES (TREE_TYPE (ob_fndecl));\n@@ -983,6 +989,15 @@ s390_resolve_overloaded_builtin (location_t loc,\n       return error_mark_node;\n     }\n \n+\n+  if (!TARGET_VXE2\n+      && bflags_overloaded_builtin_var[last_match_index] & B_VXE2)\n+    {\n+      error_at (loc, \"%qs matching variant requires z15 or higher\",\n+\t\tIDENTIFIER_POINTER (DECL_NAME (ob_fndecl)));\n+      return error_mark_node;\n+    }\n+\n   if (bflags_overloaded_builtin_var[last_match_index] & B_DEP)\n     warning_at (loc, 0, \"%qs matching variant is deprecated.\",\n \t\tIDENTIFIER_POINTER (DECL_NAME (ob_fndecl)));"}, {"sha": "502edea719b807b020b60222bd055d85b67d33a8", "filename": "gcc/config/s390/s390-opts.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-opts.h?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -37,7 +37,7 @@ enum processor_type\n   PROCESSOR_2827_ZEC12,\n   PROCESSOR_2964_Z13,\n   PROCESSOR_3906_Z14,\n-  PROCESSOR_8561_ARCH13,\n+  PROCESSOR_8561_Z15,\n   PROCESSOR_NATIVE,\n   PROCESSOR_max\n };"}, {"sha": "10a9b7bc77d80834fafe3e66b7e86a95899c9384", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -337,7 +337,7 @@ const struct s390_processor processor_table[] =\n   { \"zEC12\",  \"zEC12\",  PROCESSOR_2827_ZEC12,  &zEC12_cost,  10 },\n   { \"z13\",    \"z13\",    PROCESSOR_2964_Z13,    &zEC12_cost,  11 },\n   { \"z14\",    \"arch12\", PROCESSOR_3906_Z14,    &zEC12_cost,  12 },\n-  { \"arch13\", \"\",       PROCESSOR_8561_ARCH13, &zEC12_cost,  13 },\n+  { \"z15\",    \"arch13\", PROCESSOR_8561_Z15,    &zEC12_cost,  13 },\n   { \"native\", \"\",       PROCESSOR_NATIVE,      NULL,         0  }\n };\n \n@@ -811,6 +811,12 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t  error (\"Builtin %qF requires z14 or higher.\", fndecl);\n \t  return const0_rtx;\n \t}\n+\n+      if ((bflags & B_VXE2) && !TARGET_VXE2)\n+\t{\n+\t  error (\"Builtin %qF requires z15 or higher.\", fndecl);\n+\t  return const0_rtx;\n+\t}\n     }\n   if (fcode >= S390_OVERLOADED_BUILTIN_VAR_OFFSET\n       && fcode < S390_ALL_BUILTIN_MAX)\n@@ -1796,7 +1802,7 @@ s390_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n     }\n \n   /* ~a==b -> ~(a^b)==0   ~a!=b -> ~(a^b)!=0 */\n-  if (TARGET_ARCH13\n+  if (TARGET_Z15\n       && (*code == EQ || *code == NE)\n       && (GET_MODE (*op0) == DImode || GET_MODE (*op0) == SImode)\n       && GET_CODE (*op0) == NOT)\n@@ -1808,7 +1814,7 @@ s390_canonicalize_comparison (int *code, rtx *op0, rtx *op1,\n     }\n \n   /* a&b == -1 -> ~a|~b == 0    a|b == -1 -> ~a&~b == 0  */\n-  if (TARGET_ARCH13\n+  if (TARGET_Z15\n       && (*code == EQ || *code == NE)\n       && (GET_CODE (*op0) == AND || GET_CODE (*op0) == IOR)\n       && (GET_MODE (*op0) == DImode || GET_MODE (*op0) == SImode)\n@@ -3582,7 +3588,7 @@ s390_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \n \t/* It is a real IF-THEN-ELSE.  An additional move will be\n \t   needed to implement that.  */\n-\tif (!TARGET_ARCH13\n+\tif (!TARGET_Z15\n \t    && reload_completed\n \t    && !rtx_equal_p (dst, then)\n \t    && !rtx_equal_p (dst, els))\n@@ -3604,7 +3610,7 @@ s390_rtx_costs (rtx x, machine_mode mode, int outer_code,\n     case IOR:\n \n       /* nnrk, nngrk */\n-      if (TARGET_ARCH13\n+      if (TARGET_Z15\n \t  && (mode == SImode || mode == DImode)\n \t  && GET_CODE (XEXP (x, 0)) == NOT\n \t  && GET_CODE (XEXP (x, 1)) == NOT)\n@@ -3651,7 +3657,7 @@ s390_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \n     case AND:\n       /* nork, nogrk */\n-      if (TARGET_ARCH13\n+      if (TARGET_Z15\n \t  && (mode == SImode || mode == DImode)\n \t  && GET_CODE (XEXP (x, 0)) == NOT\n \t  && GET_CODE (XEXP (x, 1)) == NOT)\n@@ -3823,7 +3829,7 @@ s390_rtx_costs (rtx x, machine_mode mode, int outer_code,\n       *total = COSTS_N_INSNS (1);\n \n       /* nxrk, nxgrk ~(a^b)==0 */\n-      if (TARGET_ARCH13\n+      if (TARGET_Z15\n \t  && GET_CODE (XEXP (x, 0)) == NOT\n \t  && XEXP (x, 1) == const0_rtx\n \t  && GET_CODE (XEXP (XEXP (x, 0), 0)) == XOR\n@@ -3838,7 +3844,7 @@ s390_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \t}\n \n       /* nnrk, nngrk, nork, nogrk */\n-      if (TARGET_ARCH13\n+      if (TARGET_Z15\n \t  && (GET_CODE (XEXP (x, 0)) == AND || GET_CODE (XEXP (x, 0)) == IOR)\n \t  && XEXP (x, 1) == const0_rtx\n \t  && (GET_MODE (XEXP (x, 0)) == SImode || GET_MODE (XEXP (x, 0)) == DImode)\n@@ -14528,16 +14534,16 @@ s390_get_sched_attrmask (rtx_insn *insn)\n       if (get_attr_z14_groupoftwo (insn))\n \tmask |= S390_SCHED_ATTR_MASK_GROUPOFTWO;\n       break;\n-    case PROCESSOR_8561_ARCH13:\n-      if (get_attr_arch13_cracked (insn))\n+    case PROCESSOR_8561_Z15:\n+      if (get_attr_z15_cracked (insn))\n \tmask |= S390_SCHED_ATTR_MASK_CRACKED;\n-      if (get_attr_arch13_expanded (insn))\n+      if (get_attr_z15_expanded (insn))\n \tmask |= S390_SCHED_ATTR_MASK_EXPANDED;\n-      if (get_attr_arch13_endgroup (insn))\n+      if (get_attr_z15_endgroup (insn))\n \tmask |= S390_SCHED_ATTR_MASK_ENDGROUP;\n-      if (get_attr_arch13_groupalone (insn))\n+      if (get_attr_z15_groupalone (insn))\n \tmask |= S390_SCHED_ATTR_MASK_GROUPALONE;\n-      if (get_attr_arch13_groupoftwo (insn))\n+      if (get_attr_z15_groupoftwo (insn))\n \tmask |= S390_SCHED_ATTR_MASK_GROUPOFTWO;\n       break;\n     default:\n@@ -14575,15 +14581,15 @@ s390_get_unit_mask (rtx_insn *insn, int *units)\n       if (get_attr_z14_unit_vfu (insn))\n \tmask |= 1 << 3;\n       break;\n-    case PROCESSOR_8561_ARCH13:\n+    case PROCESSOR_8561_Z15:\n       *units = 4;\n-      if (get_attr_arch13_unit_lsu (insn))\n+      if (get_attr_z15_unit_lsu (insn))\n \tmask |= 1 << 0;\n-      if (get_attr_arch13_unit_fxa (insn))\n+      if (get_attr_z15_unit_fxa (insn))\n \tmask |= 1 << 1;\n-      if (get_attr_arch13_unit_fxb (insn))\n+      if (get_attr_z15_unit_fxb (insn))\n \tmask |= 1 << 2;\n-      if (get_attr_arch13_unit_vfu (insn))\n+      if (get_attr_z15_unit_vfu (insn))\n \tmask |= 1 << 3;\n       break;\n     default:\n@@ -14599,7 +14605,7 @@ s390_is_fpd (rtx_insn *insn)\n     return false;\n \n   return get_attr_z13_unit_fpd (insn) || get_attr_z14_unit_fpd (insn)\n-    || get_attr_arch13_unit_fpd (insn);\n+    || get_attr_z15_unit_fpd (insn);\n }\n \n static bool\n@@ -14609,7 +14615,7 @@ s390_is_fxd (rtx_insn *insn)\n     return false;\n \n   return get_attr_z13_unit_fxd (insn) || get_attr_z14_unit_fxd (insn)\n-    || get_attr_arch13_unit_fxd (insn);\n+    || get_attr_z15_unit_fxd (insn);\n }\n \n /* Returns TRUE if INSN is a long-running instruction.  */"}, {"sha": "dc38b2ed6b96fb3b2ca1e43974b6cc96f360d5e0", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -41,12 +41,12 @@ enum processor_flags\n   PF_Z14 = 2048,\n   PF_VXE = 4096,\n   PF_VXE2 = 8192,\n-  PF_ARCH13 = 16384\n+  PF_Z15 = 16384\n };\n \n /* This is necessary to avoid a warning about comparing different enum\n    types.  */\n-#define s390_tune_attr ((enum attr_cpu)(s390_tune > PROCESSOR_8561_ARCH13 ? PROCESSOR_8561_ARCH13 : s390_tune ))\n+#define s390_tune_attr ((enum attr_cpu)(s390_tune > PROCESSOR_8561_Z15 ? PROCESSOR_8561_Z15 : s390_tune ))\n \n /* These flags indicate that the generated code should run on a cpu\n    providing the respective hardware facility regardless of the\n@@ -100,10 +100,10 @@ enum processor_flags\n \t(s390_arch_flags & PF_VXE)\n #define TARGET_CPU_VXE_P(opts) \\\n \t(opts->x_s390_arch_flags & PF_VXE)\n-#define TARGET_CPU_ARCH13 \\\n-\t(s390_arch_flags & PF_ARCH13)\n-#define TARGET_CPU_ARCH13_P(opts) \\\n-\t(opts->x_s390_arch_flags & PF_ARCH13)\n+#define TARGET_CPU_Z15 \\\n+\t(s390_arch_flags & PF_Z15)\n+#define TARGET_CPU_Z15_P(opts) \\\n+\t(opts->x_s390_arch_flags & PF_Z15)\n #define TARGET_CPU_VXE2 \\\n \t(s390_arch_flags & PF_VXE2)\n #define TARGET_CPU_VXE2_P(opts) \\\n@@ -160,9 +160,9 @@ enum processor_flags\n \t(TARGET_VX && TARGET_CPU_VXE)\n #define TARGET_VXE_P(opts)\t\t\t\t\t\t\\\n \t(TARGET_VX_P (opts) && TARGET_CPU_VXE_P (opts))\n-#define TARGET_ARCH13 (TARGET_ZARCH && TARGET_CPU_ARCH13)\n-#define TARGET_ARCH13_P(opts)\t\t\t\t\t\t\\\n-\t(TARGET_ZARCH_P (opts->x_target_flags) && TARGET_CPU_ARCH13_P (opts))\n+#define TARGET_Z15 (TARGET_ZARCH && TARGET_CPU_Z15)\n+#define TARGET_Z15_P(opts)\t\t\t\t\t\t\\\n+\t(TARGET_ZARCH_P (opts->x_target_flags) && TARGET_CPU_Z15_P (opts))\n #define TARGET_VXE2\t\t\t\t\t\\\n \t(TARGET_VX && TARGET_CPU_VXE2)\n #define TARGET_VXE2_P(opts)\t\t\t\t\t\t\\"}, {"sha": "73a8c3590943ad6834fb36163e6dcd52444f7aa4", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -512,11 +512,11 @@\n ;; Processor type.  This attribute must exactly match the processor_type\n ;; enumeration in s390.h.\n \n-(define_attr \"cpu\" \"z900,z990,z9_109,z9_ec,z10,z196,zEC12,z13,z14,arch13\"\n+(define_attr \"cpu\" \"z900,z990,z9_109,z9_ec,z10,z196,zEC12,z13,z14,z15\"\n   (const (symbol_ref \"s390_tune_attr\")))\n \n (define_attr \"cpu_facility\"\n-  \"standard,ieee,zarch,cpu_zarch,longdisp,extimm,dfp,z10,z196,zEC12,vx,z13,z14,vxe,arch13,vxe2\"\n+  \"standard,ieee,zarch,cpu_zarch,longdisp,extimm,dfp,z10,z196,zEC12,vx,z13,z14,vxe,z15,vxe2\"\n   (const_string \"standard\"))\n \n (define_attr \"enabled\" \"\"\n@@ -574,8 +574,8 @@\n \t      (match_test \"TARGET_VXE\"))\n \t (const_int 1)\n \n-\t (and (eq_attr \"cpu_facility\" \"arch13\")\n-\t      (match_test \"TARGET_ARCH13\"))\n+\t (and (eq_attr \"cpu_facility\" \"z15\")\n+\t      (match_test \"TARGET_Z15\"))\n \t (const_int 1)\n \n          (and (eq_attr \"cpu_facility\" \"vxe2\")\n@@ -612,7 +612,7 @@\n ;; Pipeline description for z14\n (include \"3906.md\")\n \n-;; Pipeline description for arch13\n+;; Pipeline description for z15\n (include \"8561.md\")\n \n ;; Predicates\n@@ -641,7 +641,7 @@\n (define_mode_iterator DD_DF [DF DD])\n (define_mode_iterator TD_TF [TF TD])\n \n-; 32 bit int<->fp conversion instructions are available since VXE2 (arch13).\n+; 32 bit int<->fp conversion instructions are available since VXE2 (z15).\n (define_mode_iterator VX_CONV_BFP [DF (SF \"TARGET_VXE2\")])\n (define_mode_iterator VX_CONV_INT [DI (SI \"TARGET_VXE2\")])\n \n@@ -6860,7 +6860,7 @@\n    stoc<g>%C1\\t%3,%0\n    stoc<g>%D1\\t%4,%0\"\n   [(set_attr \"op_type\" \"RRF,RRF,RRF,RSY,RSY,RIE,RIE,RSY,RSY\")\n-   (set_attr \"cpu_facility\" \"*,*,arch13,*,*,z13,z13,*,*\")])\n+   (set_attr \"cpu_facility\" \"*,*,z15,*,*,z13,z13,*,*\")])\n \n ;;\n ;;- Multiply instructions.\n@@ -7711,7 +7711,7 @@\n \t(and:GPR (not:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"\"))\n \t\t (match_operand:GPR 2 \"general_operand\" \"\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"!TARGET_ARCH13\n+  \"!TARGET_Z15\n    && ! reload_completed\n    && (GET_CODE (operands[0]) != MEM\n       /* Ensure that s390_logical_operator_ok_p will succeed even\n@@ -8068,7 +8068,7 @@\n    (set (match_operand:GPR 0 \"register_operand\" \"=d\")\n \t(ANDOR:GPR (not:GPR (match_dup 1))\n \t\t   (match_dup 2)))]\n-  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"TARGET_Z15 && s390_match_ccmode(insn, CCTmode)\"\n   \"<ANDOR:noxa>c<GPR:g>rk\\t%0,%2,%1\"\n   [(set_attr \"op_type\" \"RRF\")])\n \n@@ -8080,7 +8080,7 @@\n \t\t    (match_operand:GPR 2 \"register_operand\" \"d\"))\n \t (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=d\"))]\n-  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"TARGET_Z15 && s390_match_ccmode(insn, CCTmode)\"\n   \"<ANDOR:noxa>c<GPR:g>rk\\t%0,%2,%1\"\n   [(set_attr \"op_type\" \"RRF\")])\n \n@@ -8090,7 +8090,7 @@\n \t(ANDOR:GPR (not:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))\n \t\t   (match_operand:GPR 2 \"register_operand\" \"d\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_ARCH13\"\n+  \"TARGET_Z15\"\n   \"<ANDOR:noxa>c<GPR:g>rk\\t%0,%2,%1\"\n   [(set_attr \"op_type\" \"RRF\")])\n \n@@ -8108,7 +8108,7 @@\n    (set (match_operand:GPR 0 \"register_operand\" \"=d\")\n \t(ANDOR:GPR (not:GPR (match_dup 1))\n \t\t   (not:GPR (match_dup 2))))]\n-  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"TARGET_Z15 && s390_match_ccmode(insn, CCTmode)\"\n   \"n<ANDOR:inv_no><GPR:g>rk\\t%0,%1,%2\"\n   [(set_attr \"op_type\" \"RRF\")])\n \n@@ -8120,7 +8120,7 @@\n \t\t    (not:GPR (match_operand:GPR 2 \"register_operand\" \"d\")))\n \t (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=d\"))]\n-  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"TARGET_Z15 && s390_match_ccmode(insn, CCTmode)\"\n   \"n<ANDOR:inv_no><GPR:g>rk\\t%0,%1,%2\"\n   [(set_attr \"op_type\" \"RRF\")])\n \n@@ -8130,7 +8130,7 @@\n \t(ANDOR:GPR (not:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))\n \t\t   (not:GPR (match_operand:GPR 2 \"register_operand\" \"d\"))))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_ARCH13\"\n+  \"TARGET_Z15\"\n   \"n<ANDOR:inv_no><GPR:g>rk\\t%0,%1,%2\"\n   [(set_attr \"op_type\" \"RRF\")])\n \n@@ -8514,7 +8514,7 @@\n    (set (match_operand:GPR 0 \"register_operand\" \"=d\")\n \t(xor:GPR (not:GPR (match_dup 1))\n \t\t    (match_dup 2)))]\n-  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"TARGET_Z15 && s390_match_ccmode(insn, CCTmode)\"\n   \"nx<GPR:g>rk\\t%0,%1,%2\"\n   [(set_attr \"op_type\" \"RRF\")])\n \n@@ -8526,7 +8526,7 @@\n \t\t\t   (match_operand:GPR 2 \"register_operand\" \"d\")))\n \t (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=d\"))]\n-  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"TARGET_Z15 && s390_match_ccmode(insn, CCTmode)\"\n   \"nx<GPR:g>rk\\t%0,%1,%2\"\n   [(set_attr \"op_type\" \"RRF\")])\n \n@@ -8536,7 +8536,7 @@\n \t(not:GPR (xor:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n \t\t\t  (match_operand:GPR 2 \"register_operand\" \"d\"))))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_ARCH13\"\n+  \"TARGET_Z15\"\n   \"nx<GPR:g>rk\\t%0,%1,%2\"\n   [(set_attr \"op_type\" \"RRF\")])\n \n@@ -11495,34 +11495,34 @@\n ; Population count instruction\n ;\n \n-(define_insn \"*popcountdi_arch13_cc\"\n+(define_insn \"*popcountdi_z15_cc\"\n   [(set (reg CC_REGNUM)\n \t(compare (popcount:DI (match_operand:DI 1 \"register_operand\" \"d\"))\n \t\t (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(match_dup 1))]\n-  \"TARGET_ARCH13 && s390_match_ccmode (insn, CCTmode)\"\n+  \"TARGET_Z15 && s390_match_ccmode (insn, CCTmode)\"\n   \"popcnt\\t%0,%1,8\"\n   [(set_attr \"op_type\" \"RRF\")])\n \n-(define_insn \"*popcountdi_arch13_cconly\"\n+(define_insn \"*popcountdi_z15_cconly\"\n   [(set (reg CC_REGNUM)\n \t(compare (popcount:DI (match_operand:DI 1 \"register_operand\" \"d\"))\n \t\t (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=d\"))]\n-  \"TARGET_ARCH13 && s390_match_ccmode(insn, CCTmode)\"\n+  \"TARGET_Z15 && s390_match_ccmode(insn, CCTmode)\"\n   \"popcnt\\t%0,%1,8\"\n   [(set_attr \"op_type\" \"RRF\")])\n \n-(define_insn \"*popcountdi_arch13\"\n+(define_insn \"*popcountdi_z15\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n \t(popcount:DI (match_operand:DI 1 \"register_operand\" \"d\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_ARCH13\"\n+  \"TARGET_Z15\"\n   \"popcnt\\t%0,%1,8\"\n   [(set_attr \"op_type\" \"RRF\")])\n \n-; The pre-arch13 popcount instruction counts the bits of op1 in 8 byte\n+; The pre-z15 popcount instruction counts the bits of op1 in 8 byte\n ; portions and stores the result in the corresponding bytes in op0.\n (define_insn \"*popcount<mode>_z196\"\n   [(set (match_operand:INT 0 \"register_operand\" \"=d\")\n@@ -11566,7 +11566,7 @@\n      (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_Z196\"\n {\n-  if (!TARGET_ARCH13)\n+  if (!TARGET_Z15)\n     {\n       emit_insn (gen_popcountdi2_z196 (operands[0], operands[1]));\n       DONE;\n@@ -11597,7 +11597,7 @@\n \n ; popcount always counts on the full 64 bit. With the z196 version\n ; counting bits per byte we just ignore the upper 4 bytes.  With the\n-; arch13 version we have to zero out the upper 32 bits first.\n+; z15 version we have to zero out the upper 32 bits first.\n (define_expand \"popcountsi2\"\n   [(set (match_dup 2)\n \t(zero_extend:DI (match_operand:SI 1 \"register_operand\")))\n@@ -11607,7 +11607,7 @@\n \t(subreg:SI (match_dup 3) 4))]\n   \"TARGET_Z196\"\n {\n-  if (!TARGET_ARCH13)\n+  if (!TARGET_Z15)\n     {\n       emit_insn (gen_popcountsi2_z196 (operands[0], operands[1]));\n       DONE;\n@@ -11645,7 +11645,7 @@\n \t(subreg:HI (match_dup 3) 6))]\n   \"TARGET_Z196\"\n {\n-  if (!TARGET_ARCH13)\n+  if (!TARGET_Z15)\n     {\n       emit_insn (gen_popcounthi2_z196 (operands[0], operands[1]));\n       DONE;\n@@ -11660,7 +11660,7 @@\n ; For popcount on a single byte the old z196 style popcount\n ; instruction is ideal.  Since it anyway does a byte-wise popcount we\n ; just use it instead of zero extending the QImode input to DImode and\n-; using the arch13 popcount variant.\n+; using the z15 popcount variant.\n (define_expand \"popcountqi2\"\n   [; popcnt op0, op1\n    (parallel [(set (match_operand:QI 0 \"register_operand\" \"\")"}, {"sha": "6a6e1f75736f1372f9ad74e225a32e9f4a4dc22f", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -110,7 +110,10 @@ EnumValue\n Enum(processor_type) String(arch12) Value(PROCESSOR_3906_Z14)\n \n EnumValue\n-Enum(processor_type) String(arch13) Value(PROCESSOR_8561_ARCH13)\n+Enum(processor_type) String(z15) Value(PROCESSOR_8561_Z15)\n+\n+EnumValue\n+Enum(processor_type) String(arch13) Value(PROCESSOR_8561_Z15)\n \n EnumValue\n Enum(processor_type) String(native) Value(PROCESSOR_NATIVE) DriverOnly"}, {"sha": "127b75f63f1db49c01f885dd378ece51e28d9f13", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -70,7 +70,7 @@\n \n (define_mode_iterator V_128_NOSINGLE [V16QI V8HI V4SI V4SF V2DI V2DF])\n \n-; 32 bit int<->fp vector conversion instructions are available since VXE2 (arch13).\n+; 32 bit int<->fp vector conversion instructions are available since VXE2 (z15).\n (define_mode_iterator VX_VEC_CONV_BFP [V2DF (V4SF \"TARGET_VXE2\")])\n (define_mode_iterator VX_VEC_CONV_INT [V2DI (V4SI \"TARGET_VXE2\")])\n "}, {"sha": "4b6079aa4fd52e5d43258291204eb44f1c493b27", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f8cd77304aea092dafc29fe0e7f943b6588062/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=80f8cd77304aea092dafc29fe0e7f943b6588062", "patch": "@@ -2147,7 +2147,7 @@\n   \"<vw>fmax<sdx>b\\t%v0,%v1,%v2,%b3\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n-; The element reversal builtins introduced with arch13 have been made\n+; The element reversal builtins introduced with z15 have been made\n ; available also for older CPUs down to z13.\n (define_expand \"eltswap<mode>\"\n   [(set (match_operand:VEC_HW                 0 \"nonimmediate_operand\" \"\")\n@@ -2181,8 +2181,8 @@\n    vster<bhfgq>\\t%v1,%v0\"\n   [(set_attr \"op_type\" \"*,VRX,VRX\")])\n \n-; arch13 has instructions for doing element reversal from mem to reg\n-; or the other way around.  For reg to reg or on pre arch13 machines\n+; z15 has instructions for doing element reversal from mem to reg\n+; or the other way around.  For reg to reg or on pre z15 machines\n ; we have to emulate it with vector permute.\n (define_insn_and_split \"*eltswap<mode>_emu\"\n   [(set (match_operand:VEC_HW                 0 \"nonimmediate_operand\" \"=vR\")"}]}