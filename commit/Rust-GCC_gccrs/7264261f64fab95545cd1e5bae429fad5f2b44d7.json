{"sha": "7264261f64fab95545cd1e5bae429fad5f2b44d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI2NDI2MWY2NGZhYjk1NTQ1Y2QxZTViYWU0MjlmYWQ1ZjJiNDRkNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-07-13T20:25:57Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-07-13T20:25:57Z"}, "message": "x86: Tune Skylake, Cannonlake and Icelake as Haswell\n\nr259399, which added PROCESSOR_SKYLAKE, disabled many x86 optimizations\nwhich are enabled by PROCESSOR_HASWELL.  As the result, -mtune=skylake\ngenerates slower codes on Skylake than before.  The same also applies\nto Cannonlake and Icelak tuning.\n\nThis patch changes -mtune={skylake|cannonlake|icelake} to tune like\n-mtune=haswell for until their tuning is properly adjusted. It also\nenables -mprefer-vector-width=256 for -mtune=haswell, which has no\nimpact on codegen when AVX512 isn't enabled.\n\nPerformance impacts on SPEC CPU 2017 rate with 1 copy using\n\n-march=native -mfpmath=sse -O2 -m64\n\nare\n\n1. On Broadwell server:\n\n500.perlbench_r\t\t-0.56%\n502.gcc_r\t\t-0.18%\n505.mcf_r\t\t0.24%\n520.omnetpp_r\t\t0.00%\n523.xalancbmk_r\t\t-0.32%\n525.x264_r\t\t-0.17%\n531.deepsjeng_r\t\t0.00%\n541.leela_r\t\t0.00%\n548.exchange2_r\t\t0.12%\n557.xz_r\t\t0.00%\nGeomean\t\t\t0.00%\n\n503.bwaves_r\t\t0.00%\n507.cactuBSSN_r\t\t0.21%\n508.namd_r\t\t0.00%\n510.parest_r\t\t0.19%\n511.povray_r\t\t-0.48%\n519.lbm_r\t\t0.00%\n521.wrf_r\t\t0.28%\n526.blender_r\t\t0.19%\n527.cam4_r\t\t0.39%\n538.imagick_r\t\t0.00%\n544.nab_r\t\t-0.36%\n549.fotonik3d_r\t\t0.51%\n554.roms_r\t\t0.00%\nGeomean\t\t\t0.17%\n\nOn Skylake client:\n\n500.perlbench_r\t\t0.96%\n502.gcc_r\t\t0.13%\n505.mcf_r\t\t-1.03%\n520.omnetpp_r\t\t-1.11%\n523.xalancbmk_r\t\t1.02%\n525.x264_r\t\t0.50%\n531.deepsjeng_r\t\t2.97%\n541.leela_r\t\t0.50%\n548.exchange2_r\t\t-0.95%\n557.xz_r\t\t2.41%\nGeomean\t\t\t0.56%\n\n503.bwaves_r\t\t0.49%\n507.cactuBSSN_r\t\t3.17%\n508.namd_r\t\t4.05%\n510.parest_r\t\t0.15%\n511.povray_r\t\t0.80%\n519.lbm_r\t\t3.15%\n521.wrf_r\t\t10.56%\n526.blender_r\t\t2.97%\n527.cam4_r\t\t2.36%\n538.imagick_r\t\t46.40%\n544.nab_r\t\t2.04%\n549.fotonik3d_r\t\t0.00%\n554.roms_r\t\t1.27%\nGeomean\t\t\t5.49%\n\nOn Skylake server:\n\n500.perlbench_r\t\t0.71%\n502.gcc_r\t\t-0.51%\n505.mcf_r\t\t-1.06%\n520.omnetpp_r\t\t-0.33%\n523.xalancbmk_r\t\t-0.22%\n525.x264_r\t\t1.72%\n531.deepsjeng_r\t\t-0.26%\n541.leela_r\t\t0.57%\n548.exchange2_r\t\t-0.75%\n557.xz_r\t\t-1.28%\nGeomean\t\t\t-0.21%\n\n503.bwaves_r\t\t0.00%\n507.cactuBSSN_r\t\t2.66%\n508.namd_r\t\t3.67%\n510.parest_r\t\t1.25%\n511.povray_r\t\t2.26%\n519.lbm_r\t\t1.69%\n521.wrf_r\t\t11.03%\n526.blender_r\t\t3.39%\n527.cam4_r\t\t1.69%\n538.imagick_r\t\t64.59%\n544.nab_r\t\t-0.54%\n549.fotonik3d_r\t\t2.68%\n554.roms_r\t\t0.00%\nGeomean\t\t\t6.19%\n\nThis patch improves -march=native performance on Skylake up to 60% and\nleaves -march=native performance unchanged on Haswell.\n\ngcc/\n\n2018-07-13  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Sunil K Pandey  <sunil.k.pandey@intel.com>\n\n\tPR target/84413\n\t* config/i386/i386.c (m_CORE_AVX512): New.\n\t(m_CORE_AVX2): Likewise.\n\t(m_CORE_ALL): Add m_CORE_AVX2.\n\t* config/i386/x86-tune.def: Replace m_HASWELL with m_CORE_AVX2.\n\tReplace m_SKYLAKE_AVX512 with m_CORE_AVX512 on avx256_optimal\n\tand remove the rest of m_SKYLAKE_AVX512.\n\ngcc/testsuite/\n\n2018-07-13  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Sunil K Pandey  <sunil.k.pandey@intel.com>\n\n\tPR target/84413\n\t* gcc.target/i386/pr84413-1.c: New test.\n\t* gcc.target/i386/pr84413-2.c: Likewise.\n\t* gcc.target/i386/pr84413-3.c: Likewise.\n\nCo-Authored-By: Sunil K Pandey <sunil.k.pandey@intel.com>\n\nFrom-SVN: r262649", "tree": {"sha": "4cd1d5bd90d6dae339f33b0c6cabf9e43b74ca2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cd1d5bd90d6dae339f33b0c6cabf9e43b74ca2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7264261f64fab95545cd1e5bae429fad5f2b44d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7264261f64fab95545cd1e5bae429fad5f2b44d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7264261f64fab95545cd1e5bae429fad5f2b44d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7264261f64fab95545cd1e5bae429fad5f2b44d7/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "814f3331877bd59654178543198e1801abee6acf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814f3331877bd59654178543198e1801abee6acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/814f3331877bd59654178543198e1801abee6acf"}], "stats": {"total": 101, "additions": 87, "deletions": 14}, "files": [{"sha": "2fcd6c565e230e46661710b45edfe9497f6ec753", "filename": "ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7264261f64fab95545cd1e5bae429fad5f2b44d7/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7264261f64fab95545cd1e5bae429fad5f2b44d7/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=7264261f64fab95545cd1e5bae429fad5f2b44d7", "patch": "@@ -1,3 +1,14 @@\n+2018-07-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Sunil K Pandey  <sunil.k.pandey@intel.com>\n+\n+\tPR target/84413\n+\t* config/i386/i386.c (m_CORE_AVX512): New.\n+\t(m_CORE_AVX2): Likewise.\n+\t(m_CORE_ALL): Add m_CORE_AVX2.\n+\t* config/i386/x86-tune.def: Replace m_HASWELL with m_CORE_AVX2.\n+\tReplace m_SKYLAKE_AVX512 with m_CORE_AVX512 on avx256_optimal\n+\tand remove the rest of m_SKYLAKE_AVX512.\n+\n 2018-07-06  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config.sub: Sync with upstream version 2018-07-03."}, {"sha": "ccc24e375ade7b64ab81f521fcf3d1b10e41e09f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7264261f64fab95545cd1e5bae429fad5f2b44d7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7264261f64fab95545cd1e5bae429fad5f2b44d7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7264261f64fab95545cd1e5bae429fad5f2b44d7", "patch": "@@ -138,7 +138,6 @@ const struct processor_costs *ix86_cost = NULL;\n #define m_NEHALEM (HOST_WIDE_INT_1U<<PROCESSOR_NEHALEM)\n #define m_SANDYBRIDGE (HOST_WIDE_INT_1U<<PROCESSOR_SANDYBRIDGE)\n #define m_HASWELL (HOST_WIDE_INT_1U<<PROCESSOR_HASWELL)\n-#define m_CORE_ALL (m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE | m_HASWELL)\n #define m_BONNELL (HOST_WIDE_INT_1U<<PROCESSOR_BONNELL)\n #define m_SILVERMONT (HOST_WIDE_INT_1U<<PROCESSOR_SILVERMONT)\n #define m_KNL (HOST_WIDE_INT_1U<<PROCESSOR_KNL)\n@@ -148,6 +147,10 @@ const struct processor_costs *ix86_cost = NULL;\n #define m_CANNONLAKE (HOST_WIDE_INT_1U<<PROCESSOR_CANNONLAKE)\n #define m_ICELAKE_CLIENT (HOST_WIDE_INT_1U<<PROCESSOR_ICELAKE_CLIENT)\n #define m_ICELAKE_SERVER (HOST_WIDE_INT_1U<<PROCESSOR_ICELAKE_SERVER)\n+#define m_CORE_AVX512 (m_SKYLAKE_AVX512 | m_CANNONLAKE \\\n+\t\t       | m_ICELAKE_CLIENT | m_ICELAKE_SERVER)\n+#define m_CORE_AVX2 (m_HASWELL | m_SKYLAKE | m_CORE_AVX512)\n+#define m_CORE_ALL (m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE | m_CORE_AVX2)\n #define m_GOLDMONT (HOST_WIDE_INT_1U<<PROCESSOR_GOLDMONT)\n #define m_GOLDMONT_PLUS (HOST_WIDE_INT_1U<<PROCESSOR_GOLDMONT_PLUS)\n #define m_TREMONT (HOST_WIDE_INT_1U<<PROCESSOR_TREMONT)"}, {"sha": "a46450ad99dc5c959f80c0c96e2e734e205f8383", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7264261f64fab95545cd1e5bae429fad5f2b44d7/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7264261f64fab95545cd1e5bae429fad5f2b44d7/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=7264261f64fab95545cd1e5bae429fad5f2b44d7", "patch": "@@ -49,9 +49,9 @@ DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\",\n    over partial stores.  For example preffer MOVZBL or MOVQ to load 8bit\n    value over movb.  */\n DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\",\n-          m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE | m_HASWELL\n+          m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE | m_CORE_AVX2\n \t  | m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_GOLDMONT_PLUS | m_INTEL\n-\t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_SKYLAKE_AVX512 | m_TREMONT\n+\t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_TREMONT\n \t  | m_GENERIC)\n \n /* X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY: This knob promotes all store\n@@ -87,8 +87,8 @@ DEF_TUNE (X86_TUNE_PARTIAL_FLAG_REG_STALL, \"partial_flag_reg_stall\",\n DEF_TUNE (X86_TUNE_MOVX, \"movx\",\n           m_PPRO | m_P4_NOCONA | m_CORE2 | m_NEHALEM  | m_SANDYBRIDGE\n \t  | m_BONNELL | m_SILVERMONT | m_GOLDMONT | m_KNL | m_KNM | m_INTEL\n-\t  | m_GOLDMONT_PLUS | m_GEODE | m_AMD_MULTIPLE | m_SKYLAKE_AVX512\n-\t  | m_HASWELL | m_TREMONT | m_GENERIC)\n+\t  | m_GOLDMONT_PLUS | m_GEODE | m_AMD_MULTIPLE\n+\t  | m_CORE_AVX2 | m_TREMONT | m_GENERIC)\n \n /* X86_TUNE_MEMORY_MISMATCH_STALL: Avoid partial stores that are followed by\n    full sized loads.  */\n@@ -105,19 +105,19 @@ DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_32, \"fuse_cmp_and_branch_32\",\n /* X86_TUNE_FUSE_CMP_AND_BRANCH_64: Fuse compare with a subsequent\n    conditional jump instruction for TARGET_64BIT.  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_64, \"fuse_cmp_and_branch_64\",\n-\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_BDVER | m_ZNVER1 | m_GENERIC)\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_BDVER | m_ZNVER1 | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS: Fuse compare with a\n    subsequent conditional jump instruction when the condition jump\n    check sign flag (SF) or overflow flag (OF).  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS, \"fuse_cmp_and_branch_soflags\",\n-\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_BDVER | m_ZNVER1 | m_GENERIC)\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_BDVER | m_ZNVER1 | m_GENERIC)\n \n /* X86_TUNE_FUSE_ALU_AND_BRANCH: Fuse alu with a subsequent conditional\n    jump instruction when the alu instruction produces the CCFLAG consumed by\n    the conditional jump instruction. */\n DEF_TUNE (X86_TUNE_FUSE_ALU_AND_BRANCH, \"fuse_alu_and_branch\",\n-          m_SANDYBRIDGE | m_HASWELL | m_GENERIC)\n+          m_SANDYBRIDGE | m_CORE_AVX2 | m_GENERIC)\n \n \n /*****************************************************************************/\n@@ -297,7 +297,7 @@ DEF_TUNE (X86_TUNE_USE_BT, \"use_bt\",\n /* X86_TUNE_AVOID_FALSE_DEP_FOR_BMI: Avoid false dependency\n    for bit-manipulation instructions.  */\n DEF_TUNE (X86_TUNE_AVOID_FALSE_DEP_FOR_BMI, \"avoid_false_dep_for_bmi\",\n-\t  m_SANDYBRIDGE | m_HASWELL | m_GENERIC)\n+\t  m_SANDYBRIDGE | m_CORE_AVX2 | m_GENERIC)\n \n /* X86_TUNE_ADJUST_UNROLL: This enables adjusting the unroll factor based\n    on hardware capabilities. Bdver3 hardware has a loop buffer which makes\n@@ -349,15 +349,15 @@ DEF_TUNE (X86_TUNE_GENERAL_REGS_SSE_SPILL, \"general_regs_sse_spill\",\n /* X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL: Use movups for misaligned loads instead\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\",\n-\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_SILVERMONT | m_KNL | m_KNM\n-\t  | m_INTEL | m_SKYLAKE_AVX512 | m_GOLDMONT | m_GOLDMONT_PLUS\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_SILVERMONT | m_KNL | m_KNM\n+\t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS\n \t  | m_TREMONT | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER1 | m_GENERIC)\n \n /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL: Use movups for misaligned stores instead\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\",\n-\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_SILVERMONT | m_KNL | m_KNM\n-\t  | m_INTEL | m_SKYLAKE_AVX512 | m_GOLDMONT | m_GOLDMONT_PLUS\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_SILVERMONT | m_KNL | m_KNM\n+\t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS\n \t  | m_TREMONT | m_BDVER | m_ZNVER1 | m_GENERIC)\n \n /* Use packed single precision instructions where posisble.  I.e. movups instead\n@@ -446,7 +446,7 @@ DEF_TUNE (X86_TUNE_AVX128_OPTIMAL, \"avx128_optimal\", m_BDVER | m_BTVER2\n \n /* X86_TUNE_AVX256_OPTIMAL: Use 256-bit AVX instructions instead of 512-bit AVX\n    instructions in the auto-vectorizer.  */\n-DEF_TUNE (X86_TUNE_AVX256_OPTIMAL, \"avx256_optimal\", m_SKYLAKE_AVX512)\n+DEF_TUNE (X86_TUNE_AVX256_OPTIMAL, \"avx256_optimal\", m_CORE_AVX512)\n \n /*****************************************************************************/\n /* Historical relics: tuning flags that helps a specific old CPU designs     */"}, {"sha": "b19764297117c2067ef66952ff28e30b9b493b1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7264261f64fab95545cd1e5bae429fad5f2b44d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7264261f64fab95545cd1e5bae429fad5f2b44d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7264261f64fab95545cd1e5bae429fad5f2b44d7", "patch": "@@ -1,3 +1,11 @@\n+2018-07-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Sunil K Pandey  <sunil.k.pandey@intel.com>\n+\n+\tPR target/84413\n+\t* gcc.target/i386/pr84413-1.c: New test.\n+\t* gcc.target/i386/pr84413-2.c: Likewise.\n+\t* gcc.target/i386/pr84413-3.c: Likewise.\n+\n 2018-07-13  Bill Schmidt  <wschmidt@linux.ibm.com>\n \t    Steve Munroe  <munroesj52@gmail.com>\n "}, {"sha": "1c94d7715cfdde330435d11059af5317f244c9ed", "filename": "gcc/testsuite/gcc.target/i386/pr84413-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7264261f64fab95545cd1e5bae429fad5f2b44d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84413-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7264261f64fab95545cd1e5bae429fad5f2b44d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84413-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84413-1.c?ref=7264261f64fab95545cd1e5bae429fad5f2b44d7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=skylake-avx512\" } */\n+/* { dg-final { scan-assembler-not \"%zmm\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"vmulpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" } } */\n+\n+#define N 1024\n+\n+double a[N], b[N], c[N];\n+\n+void\n+avx512f_test (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    c[i] = a[i] * b[i];\n+}"}, {"sha": "adf9b527cd66901b76a2b63517b7c85c4d2ad997", "filename": "gcc/testsuite/gcc.target/i386/pr84413-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7264261f64fab95545cd1e5bae429fad5f2b44d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84413-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7264261f64fab95545cd1e5bae429fad5f2b44d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84413-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84413-2.c?ref=7264261f64fab95545cd1e5bae429fad5f2b44d7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=cannonlake\" } */\n+/* { dg-final { scan-assembler-not \"%zmm\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"vmulpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" } } */\n+\n+#define N 1024\n+\n+double a[N], b[N], c[N];\n+\n+void\n+avx512f_test (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    c[i] = a[i] * b[i];\n+}"}, {"sha": "76bf25fc56b8b170589ed2a282d49a5d17d98ea0", "filename": "gcc/testsuite/gcc.target/i386/pr84413-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7264261f64fab95545cd1e5bae429fad5f2b44d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84413-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7264261f64fab95545cd1e5bae429fad5f2b44d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84413-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr84413-3.c?ref=7264261f64fab95545cd1e5bae429fad5f2b44d7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=icelake-server\" } */\n+/* { dg-final { scan-assembler-not \"%zmm\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"vmulpd\\[ \\\\t\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\" } } */\n+\n+#define N 1024\n+\n+double a[N], b[N], c[N];\n+\n+void\n+avx512f_test (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    c[i] = a[i] * b[i];\n+}"}]}