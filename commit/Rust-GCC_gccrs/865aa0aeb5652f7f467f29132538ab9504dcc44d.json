{"sha": "865aa0aeb5652f7f467f29132538ab9504dcc44d", "node_id": "C_kwDOANBUbNoAKDg2NWFhMGFlYjU2NTJmN2Y0NjdmMjkxMzI1MzhhYjk1MDRkY2M0NGQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-22T16:19:30Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-22T16:19:30Z"}, "message": "Add new Builtin attributes mappings\n\nThis class keeps track of all known builtin attributes and specifies which\npass they are handled at. This replaces the checks we added for outer\nattributes during hir lowering making it a more maintainable data\nstructure.", "tree": {"sha": "54781829b4dbe2aa0371562c6eb05cdaf375e4c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54781829b4dbe2aa0371562c6eb05cdaf375e4c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/865aa0aeb5652f7f467f29132538ab9504dcc44d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865aa0aeb5652f7f467f29132538ab9504dcc44d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/865aa0aeb5652f7f467f29132538ab9504dcc44d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865aa0aeb5652f7f467f29132538ab9504dcc44d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bdc5462f218099ee5a38a4a33b375cbd1d5d732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bdc5462f218099ee5a38a4a33b375cbd1d5d732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bdc5462f218099ee5a38a4a33b375cbd1d5d732"}], "stats": {"total": 182, "additions": 152, "deletions": 30}, "files": [{"sha": "080b9dd8db3180e3b77b3663411f543250e4fc85", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865aa0aeb5652f7f467f29132538ab9504dcc44d/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865aa0aeb5652f7f467f29132538ab9504dcc44d/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=865aa0aeb5652f7f467f29132538ab9504dcc44d", "patch": "@@ -77,6 +77,7 @@ GRS_OBJS = \\\n     rust/rust-macro-invoc-lexer.o \\\n     rust/rust-hir-full-test.o \\\n     rust/rust-hir-map.o \\\n+    rust/rust-attributes.o \\\n     rust/rust-abi.o \\\n     rust/rust-ast-lower.o \\\n     rust/rust-ast-lower-pattern.o \\"}, {"sha": "9eb9300cd6e956110af8efa50bdf99e5fb52393f", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865aa0aeb5652f7f467f29132538ab9504dcc44d/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865aa0aeb5652f7f467f29132538ab9504dcc44d/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=865aa0aeb5652f7f467f29132538ab9504dcc44d", "patch": "@@ -24,6 +24,7 @@\n #include \"rust-ast-visitor.h\"\n #include \"rust-hir-map.h\"\n #include \"rust-hir-full.h\"\n+#include \"rust-attributes.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -230,9 +231,13 @@ class ASTLoweringBase : public AST::ASTVisitor\n   virtual void visit (AST::BareFunctionType &type) {}\n \n protected:\n-  ASTLoweringBase () : mappings (Analysis::Mappings::get ()) {}\n+  ASTLoweringBase ()\n+    : mappings (Analysis::Mappings::get ()),\n+      attr_mappings (Analysis::BuiltinAttributeMappings::get ())\n+  {}\n \n   Analysis::Mappings *mappings;\n+  Analysis::BuiltinAttributeMappings *attr_mappings;\n \n   HIR::Lifetime lower_lifetime (AST::Lifetime &lifetime)\n   {\n@@ -287,10 +292,10 @@ class ASTLoweringBase : public AST::ASTVisitor\n   void handle_lang_item_attribute (const HIR::Item &item,\n \t\t\t\t   const AST::Attribute &attr);\n \n-  static bool is_known_attribute (const std::string &attribute_path);\n+  bool is_known_attribute (const std::string &attribute_path) const;\n \n-  static bool\n-  attribute_handled_in_another_pass (const std::string &attribute_path);\n+  bool\n+  attribute_handled_in_another_pass (const std::string &attribute_path) const;\n };\n \n } // namespace HIR"}, {"sha": "8062f2f635287be8d21d746e10f7d4d805095bda", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865aa0aeb5652f7f467f29132538ab9504dcc44d/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865aa0aeb5652f7f467f29132538ab9504dcc44d/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=865aa0aeb5652f7f467f29132538ab9504dcc44d", "patch": "@@ -653,39 +653,24 @@ ASTLoweringBase::handle_lang_item_attribute (const HIR::Item &item,\n }\n \n bool\n-ASTLoweringBase::is_known_attribute (const std::string &attribute_path)\n+ASTLoweringBase::is_known_attribute (const std::string &attribute_path) const\n {\n-  if (attribute_path.compare (\"inline\") == 0)\n-    return true;\n-  else if (attribute_path.compare (\"cfg\") == 0)\n-    return true;\n-  else if (attribute_path.compare (\"cfg_attr\") == 0)\n-    return true;\n-  else if (attribute_path.compare (\"allow\") == 0)\n-    return true;\n-  else if (attribute_path.compare (\"lang\") == 0)\n-    return true;\n-\n-  return false;\n+  const auto &lookup = attr_mappings->lookup_builtin (attribute_path);\n+  return !lookup.is_error ();\n }\n \n bool\n ASTLoweringBase::attribute_handled_in_another_pass (\n-  const std::string &attribute_path)\n+  const std::string &attribute_path) const\n {\n-  // handled during code-generation\n-  if (attribute_path.compare (\"inline\") == 0)\n-    return true;\n-\n-  // handled during previous expansion pass\n-  else if (attribute_path.compare (\"cfg\") == 0)\n-    return true;\n-  else if (attribute_path.compare (\"cfg_attr\") == 0)\n-    return true;\n-  else if (attribute_path.compare (\"allow\") == 0)\n-    return true;\n+  const auto &lookup = attr_mappings->lookup_builtin (attribute_path);\n+  if (lookup.is_error ())\n+    return false;\n \n-  return false;\n+  if (lookup.handler == Analysis::CompilerPass::UNKNOWN)\n+    return false;\n+\n+  return lookup.handler != Analysis::CompilerPass::HIR_LOWERING;\n }\n \n } // namespace HIR"}, {"sha": "3809ad76cd606668203808e8dc30e538d3143d39", "filename": "gcc/rust/util/rust-attributes.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865aa0aeb5652f7f467f29132538ab9504dcc44d/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865aa0aeb5652f7f467f29132538ab9504dcc44d/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=865aa0aeb5652f7f467f29132538ab9504dcc44d", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-attributes.h\"\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+// https://doc.rust-lang.org/stable/nightly-rustc/src/rustc_feature/builtin_attrs.rs.html#256\n+static const BuiltinAttrDefinition __definitions[] = {\n+  {\"inline\", CODE_GENERATION}, {\"cfg\", EXPANSION},     {\"cfg_attr\", EXPANSION},\n+  {\"allow\", STATIC_ANALYSIS},  {\"lang\", HIR_LOWERING},\n+};\n+\n+BuiltinAttributeMappings *\n+BuiltinAttributeMappings::get ()\n+{\n+  static BuiltinAttributeMappings *instance = nullptr;\n+  if (instance == nullptr)\n+    instance = new BuiltinAttributeMappings ();\n+\n+  return instance;\n+}\n+\n+const BuiltinAttrDefinition &\n+BuiltinAttributeMappings::lookup_builtin (const std::string &attr_name) const\n+{\n+  auto it = mappings.find (attr_name);\n+  if (it == mappings.end ())\n+    return BuiltinAttrDefinition::error_node ();\n+\n+  return it->second;\n+}\n+\n+BuiltinAttributeMappings::BuiltinAttributeMappings ()\n+{\n+  size_t ndefinitions = sizeof (__definitions) / sizeof (BuiltinAttrDefinition);\n+  for (size_t i = 0; i < ndefinitions; i++)\n+    {\n+      const BuiltinAttrDefinition &def = __definitions[i];\n+      mappings.insert ({def.name, def});\n+    }\n+}\n+\n+} // namespace Analysis\n+} // namespace Rust"}, {"sha": "6c2063c74558234c3b0e957674bdc6fabd1f8dc0", "filename": "gcc/rust/util/rust-attributes.h", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865aa0aeb5652f7f467f29132538ab9504dcc44d/gcc%2Frust%2Futil%2Frust-attributes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865aa0aeb5652f7f467f29132538ab9504dcc44d/gcc%2Frust%2Futil%2Frust-attributes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.h?ref=865aa0aeb5652f7f467f29132538ab9504dcc44d", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-system.h\"\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+enum CompilerPass\n+{\n+  UNKNOWN,\n+\n+  EXPANSION,\n+  NAME_RESOLUTION,\n+  HIR_LOWERING,\n+  TYPE_CHECK,\n+  STATIC_ANALYSIS,\n+  CODE_GENERATION\n+};\n+\n+struct BuiltinAttrDefinition\n+{\n+  std::string name;\n+  CompilerPass handler;\n+\n+  static BuiltinAttrDefinition get_error ()\n+  {\n+    return BuiltinAttrDefinition{\"\", UNKNOWN};\n+  }\n+\n+  static BuiltinAttrDefinition &error_node ()\n+  {\n+    static BuiltinAttrDefinition error_node = get_error ();\n+    return error_node;\n+  }\n+\n+  bool is_error () const { return name.empty (); }\n+};\n+\n+class BuiltinAttributeMappings\n+{\n+public:\n+  static BuiltinAttributeMappings *get ();\n+\n+  const BuiltinAttrDefinition &\n+  lookup_builtin (const std::string &attr_name) const;\n+\n+private:\n+  BuiltinAttributeMappings ();\n+\n+  std::map<std::string, const BuiltinAttrDefinition> mappings;\n+};\n+\n+} // namespace Analysis\n+} // namespace Rust"}]}