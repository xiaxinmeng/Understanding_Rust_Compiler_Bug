{"sha": "87ca8b8cab6fe24abd2bd440aca0471ac5ca850f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjYThiOGNhYjZmZTI0YWJkMmJkNDQwYWNhMDQ3MWFjNWNhODUwZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-02T17:16:53Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-02T17:16:53Z"}, "message": "genattrtab.c: Don't handle MATCH_INSN.\n\n\t* genattrtab.c: Don't handle MATCH_INSN.\n\t* genrecog.c: Likewise.\n\t* gensupport.c: Likewise.\n\t* rtl.def (match_insn): Remove.\n\t* doc/md.texi (match_insn, match_insn2): Remove.\n\nFrom-SVN: r78768", "tree": {"sha": "ede5d4eeedcfcf93063869cb9c105abf5002335f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ede5d4eeedcfcf93063869cb9c105abf5002335f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f/comments", "author": null, "committer": null, "parents": [{"sha": "bdc2893ce826f67f466aa0f5b214ddfd4b312222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc2893ce826f67f466aa0f5b214ddfd4b312222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc2893ce826f67f466aa0f5b214ddfd4b312222"}], "stats": {"total": 42, "additions": 8, "deletions": 34}, "files": [{"sha": "7cd729097c0aa352ba014c12c009208e6c81b909", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87ca8b8cab6fe24abd2bd440aca0471ac5ca850f", "patch": "@@ -1,3 +1,11 @@\n+2004-03-02  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* genattrtab.c: Don't handle MATCH_INSN.\n+\t* genrecog.c: Likewise.\n+\t* gensupport.c: Likewise.\n+\t* rtl.def (match_insn): Remove.\n+\t* doc/md.texi (match_insn, match_insn2): Remove.\n+\n 2004-03-02  Mark Mitchell  <mark@codesourcery.com>\n \n \t* doc/c-tree.texi (DECL_ASSEMBLER_NAME): Mention that using this"}, {"sha": "b8809c5502cdf6bc92808d41b234a4356ac18f19", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=87ca8b8cab6fe24abd2bd440aca0471ac5ca850f", "patch": "@@ -489,25 +489,6 @@ An insn that matches this pattern might look like:\n Like @code{match_op_dup}, but for @code{match_parallel} instead of\n @code{match_operator}.\n \n-@findex match_insn\n-@item (match_insn @var{predicate})\n-Match a complete insn.  Unlike the other @code{match_*} recognizers,\n-@code{match_insn} does not take an operand number.\n-\n-The machine mode @var{m} of @code{match_insn} works like that of\n-@code{match_operand}: it is passed as the second argument to the\n-predicate function, and that function is solely responsible for\n-deciding whether the expression to be matched ``has'' that mode.\n-\n-@findex match_insn2\n-@item (match_insn2 @var{n} @var{predicate})\n-Match a complete insn.\n-\n-The machine mode @var{m} of @code{match_insn2} works like that of\n-@code{match_operand}: it is passed as the second argument to the\n-predicate function, and that function is solely responsible for\n-deciding whether the expression to be matched ``has'' that mode.\n-\n @end table\n \n @node Output Template"}, {"sha": "3bfeca3fd9d1873dd5dff87f38175c64503e474e", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=87ca8b8cab6fe24abd2bd440aca0471ac5ca850f", "patch": "@@ -1026,7 +1026,6 @@ check_attr_test (rtx exp, int is_const, int lineno)\n       XEXP (exp, 0) = check_attr_test (XEXP (exp, 0), is_const, lineno);\n       break;\n \n-    case MATCH_INSN:\n     case MATCH_OPERAND:\n       if (is_const)\n \tfatal (\"RTL operator \\\"%s\\\" not valid in constant attribute test\",\n@@ -4795,10 +4794,6 @@ write_test_expr (rtx exp, int flags)\n \t\tXSTR (exp, 1), XINT (exp, 0), GET_MODE_NAME (GET_MODE (exp)));\n       break;\n \n-    case MATCH_INSN:\n-      printf (\"%s (insn)\", XSTR (exp, 0));\n-      break;\n-\n     /* Constant integer.  */\n     case CONST_INT:\n       printf (HOST_WIDE_INT_PRINT_DEC, XWINT (exp, 0));"}, {"sha": "2f5028cac8da4f5d6f92336187b71bfa8c22cacf", "filename": "gcc/genrecog.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=87ca8b8cab6fe24abd2bd440aca0471ac5ca850f", "patch": "@@ -361,7 +361,6 @@ find_operand (rtx pattern, int n, rtx stop)\n \n   code = GET_CODE (pattern);\n   if ((code == MATCH_SCRATCH\n-       || code == MATCH_INSN\n        || code == MATCH_OPERAND\n        || code == MATCH_OPERATOR\n        || code == MATCH_PARALLEL)\n@@ -482,7 +481,6 @@ validate_pattern (rtx pattern, rtx insn, rtx set, int set_code)\n           error_count++;\n \t}\n       break;\n-    case MATCH_INSN:\n     case MATCH_OPERAND:\n     case MATCH_OPERATOR:\n       {\n@@ -832,7 +830,6 @@ add_to_sequence (rtx pattern, struct decision_head *last, const char *position,\n     case MATCH_OPERAND:\n     case MATCH_SCRATCH:\n     case MATCH_OPERATOR:\n-    case MATCH_INSN:\n       {\n \tconst char *pred_name;\n \tRTX_CODE was_code = code;"}, {"sha": "b8cf5e67a519ae72d2b33737e78c253e4fdd4d19", "filename": "gcc/gensupport.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=87ca8b8cab6fe24abd2bd440aca0471ac5ca850f", "patch": "@@ -517,7 +517,6 @@ collect_insn_data (rtx pattern, int *palt, int *pmax)\n     case MATCH_OPERATOR:\n     case MATCH_SCRATCH:\n     case MATCH_PARALLEL:\n-    case MATCH_INSN:\n       i = XINT (pattern, 0);\n       if (i > *pmax)\n \t*pmax = i;\n@@ -600,7 +599,6 @@ alter_predicate_for_insn (rtx pattern, int alt, int max_op, int lineno)\n     case MATCH_OPERATOR:\n     case MATCH_SCRATCH:\n     case MATCH_PARALLEL:\n-    case MATCH_INSN:\n       XINT (pattern, 0) += max_op;\n       break;\n "}, {"sha": "4e77373bc37d7ef8b993458b21a7dce41f6da42b", "filename": "gcc/rtl.def", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca8b8cab6fe24abd2bd440aca0471ac5ca850f/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=87ca8b8cab6fe24abd2bd440aca0471ac5ca850f", "patch": "@@ -167,11 +167,6 @@ DEF_RTL_EXPR(MATCH_OP_DUP, \"match_op_dup\", \"iE\", 'm')\n    at the index specified by the argument.  For MATCH_PARALLEL.  */\n DEF_RTL_EXPR(MATCH_PAR_DUP, \"match_par_dup\", \"iE\", 'm')\n \n-/* Appears only in machine descriptions.\n-   Operand 0 is the operand number, as in match_operand.\n-   Operand 1 is the predicate to apply to the insn.  */\n-DEF_RTL_EXPR(MATCH_INSN, \"match_insn\", \"is\", 'm')\n-\n /* Appears only in machine descriptions.\n    Defines the pattern for one kind of instruction.\n    Operand:"}]}