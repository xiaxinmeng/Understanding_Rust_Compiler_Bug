{"sha": "17bc631c6806974d84c81360c6f8b3196b70d4e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdiYzYzMWM2ODA2OTc0ZDg0YzgxMzYwYzZmOGIzMTk2YjcwZDRlMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-03-15T18:29:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-03-15T18:29:00Z"}, "message": "c-common.c (max_constexpr_depth): New.\n\nc-family/\n\t* c-common.c (max_constexpr_depth): New.\n\t* c-common.h: Declare it.\n\t* c-opts.c (c_common_handle_option): Set it.\n\t* c.opt (fconstexpr-depth): New option.\ncp/\n\t* semantics.c (push_cx_call_context): Return bool.\n\t(cxx_eval_call_expression): Handle excess depth.\n\nFrom-SVN: r171012", "tree": {"sha": "3303539709cda0985ea091e558f6238ba2e62ce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3303539709cda0985ea091e558f6238ba2e62ce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17bc631c6806974d84c81360c6f8b3196b70d4e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17bc631c6806974d84c81360c6f8b3196b70d4e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17bc631c6806974d84c81360c6f8b3196b70d4e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17bc631c6806974d84c81360c6f8b3196b70d4e3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92d0652c1eda06a6ec396470550aede34cb72079", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d0652c1eda06a6ec396470550aede34cb72079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d0652c1eda06a6ec396470550aede34cb72079"}], "stats": {"total": 118, "additions": 85, "deletions": 33}, "files": [{"sha": "a0268fd5b5bfd8a8281113e412fd05ed6e5df747", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=17bc631c6806974d84c81360c6f8b3196b70d4e3", "patch": "@@ -1,3 +1,10 @@\n+2011-03-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.c (max_constexpr_depth): New.\n+\t* c-common.h: Declare it.\n+\t* c-opts.c (c_common_handle_option): Set it.\n+\t* c.opt (fconstexpr-depth): New option.\n+\n 2011-03-11  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.c (attribute_takes_identifier_p): Add missing const."}, {"sha": "6674c58ffabe343a1537621559f65d90714a204f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=17bc631c6806974d84c81360c6f8b3196b70d4e3", "patch": "@@ -255,12 +255,15 @@ int flag_use_repository;\n enum cxx_dialect cxx_dialect = cxx98;\n \n /* Maximum template instantiation depth.  This limit exists to limit the\n-   time it takes to notice infinite template instantiations; the default\n-   value of 1024 is likely to be in the next C++ standard.  */\n+   time it takes to notice excessively recursive template instantiations;\n+   the default value of 1024 is likely to be in the next C++ standard.  */\n \n int max_tinst_depth = 1024;\n \n+/* Likewise, for constexpr function call evaluations.  N3225 specifies a\n+   minimum of 512.  */\n \n+int max_constexpr_depth = 512;\n \n /* The elements of `ridpointers' are identifier nodes for the reserved\n    type names and storage classes.  It is indexed by a RID_... value.  */"}, {"sha": "b6fcee9e2d60c72f7d6104d6e89fdc879d73582d", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=17bc631c6806974d84c81360c6f8b3196b70d4e3", "patch": "@@ -619,10 +619,14 @@ extern enum cxx_dialect cxx_dialect;\n \n /* Maximum template instantiation depth.  This limit is rather\n    arbitrary, but it exists to limit the time it takes to notice\n-   infinite template instantiations.  */\n+   excessively recursive template instantiations.  */\n \n extern int max_tinst_depth;\n \n+/* Likewise, for constexpr function call evaluations.  */\n+\n+extern int max_constexpr_depth;\n+\n /* Nonzero means that we should not issue warnings about problems that\n    occur when the code is executed, because the code being processed\n    is not expected to be executed.  This is set during parsing.  This"}, {"sha": "8d2a08bad9f9c7536dc1d8457627da5d35c547e4", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=17bc631c6806974d84c81360c6f8b3196b70d4e3", "patch": "@@ -568,6 +568,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \tdisable_builtin_function (arg);\n       break;\n \n+    case OPT_fconstexpr_depth_:\n+      max_constexpr_depth = value;\n+      break;\n+\n     case OPT_fdirectives_only:\n       cpp_opts->directives_only = value;\n       break;"}, {"sha": "f791190f9e810218f80917ca4630de5bbea4ffdf", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=17bc631c6806974d84c81360c6f8b3196b70d4e3", "patch": "@@ -719,6 +719,10 @@ fconstant-string-class=\n ObjC ObjC++ Joined MissingArgError(no class name specified with %qs)\n -fconst-string-class=<name>\tUse class <name> for constant strings\n \n+fconstexpr-depth=\n+C++ ObjC++ Joined RejectNegative UInteger\n+-constexpr-depth=<number>\tSpecify maximum constexpr recursion depth\n+\n fdeduce-init-list\n C++ ObjC++ Var(flag_deduce_init_list) Init(1)\n -fno-deduce-init-list\tdisable deduction of std::initializer_list for a template type parameter from a brace-enclosed initializer-list"}, {"sha": "09ab014df09710d0e82c2ac6181cdbb0f6d39fd1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=17bc631c6806974d84c81360c6f8b3196b70d4e3", "patch": "@@ -1,5 +1,8 @@\n 2011-03-15  Jason Merrill  <jason@redhat.com>\n \n+\t* semantics.c (push_cx_call_context): Return bool.\n+\t(cxx_eval_call_expression): Handle excess depth.\n+\n \tCore 1191\n \t* method.c (synthesized_method_walk): Cleanups don't affect the\n \ttriviality of a constructor, but do affect deletion and exception"}, {"sha": "53497f39876b42aafb5964c16bda96347819a37b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 42, "deletions": 29, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=17bc631c6806974d84c81360c6f8b3196b70d4e3", "patch": "@@ -5922,17 +5922,21 @@ cxx_bind_parameters_in_call (const constexpr_call *old_call, tree t,\n /* Variables and functions to manage constexpr call expansion context.\n    These do not need to be marked for PCH or GC.  */\n \n+/* FIXME remember and print actual constant arguments.  */\n static VEC(tree,heap) *call_stack = NULL;\n static int call_stack_tick;\n static int last_cx_error_tick;\n \n-static void\n+static bool\n push_cx_call_context (tree call)\n {\n   ++call_stack_tick;\n   if (!EXPR_HAS_LOCATION (call))\n     SET_EXPR_LOCATION (call, input_location);\n   VEC_safe_push (tree, heap, call_stack, call);\n+  if (VEC_length (tree, call_stack) > (unsigned) max_constexpr_depth)\n+    return false;\n+  return true;\n }\n \n static void\n@@ -5967,6 +5971,9 @@ cxx_eval_call_expression (const constexpr_call *old_call, tree t,\n   tree result;\n   constexpr_call new_call = { NULL, NULL, NULL, 0 };\n   constexpr_call **slot;\n+  constexpr_call *entry;\n+  bool depth_ok;\n+\n   if (TREE_CODE (fun) != FUNCTION_DECL)\n     {\n       /* Might be a constexpr function pointer.  */\n@@ -6029,7 +6036,7 @@ cxx_eval_call_expression (const constexpr_call *old_call, tree t,\n   if (*non_constant_p)\n     return t;\n \n-  push_cx_call_context (t);\n+  depth_ok = push_cx_call_context (t);\n \n   new_call.hash\n     = iterative_hash_template_arg (new_call.bindings,\n@@ -6039,37 +6046,43 @@ cxx_eval_call_expression (const constexpr_call *old_call, tree t,\n   maybe_initialize_constexpr_call_table ();\n   slot = (constexpr_call **)\n     htab_find_slot (constexpr_call_table, &new_call, INSERT);\n-  if (*slot != NULL)\n-    {\n-      /* Calls which are in progress have their result set to NULL\n-         so that we can detect circular dependencies.  */\n-      if ((*slot)->result == NULL)\n-        {\n-\t  if (!allow_non_constant)\n-\t    error (\"call has circular dependency\");\n-\t  (*slot)->result = result = error_mark_node;\n-        }\n-      else\n-\t{\n-\t  result = (*slot)->result;\n-\t  if (result == error_mark_node && !allow_non_constant)\n-\t    /* Re-evaluate to get the error.  */\n-\t    cxx_eval_constant_expression (&new_call, new_call.fundef->body,\n-\t\t\t\t\t  allow_non_constant, addr,\n-\t\t\t\t\t  non_constant_p);\n-\t}\n-    }\n-  else\n+  entry = *slot;\n+  if (entry == NULL)\n     {\n       /* We need to keep a pointer to the entry, not just the slot, as the\n \t slot can move in the call to cxx_eval_builtin_function_call.  */\n-      constexpr_call *entry = ggc_alloc_constexpr_call ();\n+      *slot = entry = ggc_alloc_constexpr_call ();\n       *entry = new_call;\n-      *slot = entry;\n-      result\n-\t= cxx_eval_constant_expression (&new_call, new_call.fundef->body,\n-\t\t\t\t\tallow_non_constant, addr,\n-\t\t\t\t\tnon_constant_p);\n+    }\n+  /* Calls which are in progress have their result set to NULL\n+     so that we can detect circular dependencies.  */\n+  else if (entry->result == NULL)\n+    {\n+      if (!allow_non_constant)\n+\terror (\"call has circular dependency\");\n+      *non_constant_p = true;\n+      entry->result = result = error_mark_node;\n+    }\n+\n+  if (!depth_ok)\n+    {\n+      if (!allow_non_constant)\n+\terror (\"constexpr evaluation depth exceeds maximum of %d (use \"\n+\t       \"-fconstexpr-depth= to increase the maximum)\",\n+\t       max_constexpr_depth);\n+      *non_constant_p = true;\n+      entry->result = result = error_mark_node;\n+    }\n+  else\n+    {\n+      result = entry->result;\n+      if (!result || (result == error_mark_node && !allow_non_constant))\n+\tresult = (cxx_eval_constant_expression\n+\t\t  (&new_call, new_call.fundef->body,\n+\t\t   allow_non_constant, addr,\n+\t\t   non_constant_p));\n+      if (result == error_mark_node)\n+\t*non_constant_p = true;\n       if (*non_constant_p)\n \tentry->result = result = error_mark_node;\n       else"}, {"sha": "b498eaccc60f0674449eb26b62c745bb9a809fdf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=17bc631c6806974d84c81360c6f8b3196b70d4e3", "patch": "@@ -181,7 +181,7 @@ in the following sections.\n @item C++ Language Options\n @xref{C++ Dialect Options,,Options Controlling C++ Dialect}.\n @gccoptlist{-fabi-version=@var{n}  -fno-access-control  -fcheck-new @gol\n--fconserve-space  -ffriend-injection @gol\n+-fconserve-space  -fconstexpr-depth=@var{n}  -ffriend-injection @gol\n -fno-elide-constructors @gol\n -fno-enforce-eh-specs @gol\n -ffor-scope  -fno-for-scope  -fno-gnu-keywords @gol\n@@ -1881,6 +1881,13 @@ two definitions were merged.\n This option is no longer useful on most targets, now that support has\n been added for putting variables into BSS without making them common.\n \n+@item -fconstexpr-depth=@var{n}\n+@opindex fconstexpr-depth\n+Set the maximum nested evaluation depth for C++0x constexpr functions\n+to @var{n}.  A limit is needed to detect endless recursion during\n+constant expression evaluation.  The minimum specified by the standard\n+is 512; G++ defaults to 1024.\n+\n @item -fno-deduce-init-list\n @opindex fno-deduce-init-list\n Disable deduction of a template type parameter as"}, {"sha": "09bdda97c5cebdd77e3348fef1a11a7c39309c7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17bc631c6806974d84c81360c6f8b3196b70d4e3", "patch": "@@ -1,5 +1,7 @@\n 2011-03-15  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/constexpr-recursion.C: New.\n+\n \t* g++.dg/cpp0x/implicit11.C: New.\n \n 2011-03-15  Rodrigo Rivas Costa  <rodrigorivascosta@gmail.com>"}, {"sha": "2f9b4887df6dde933ec320e828a9f48fb5a77487", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-recursion.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-recursion.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc631c6806974d84c81360c6f8b3196b70d4e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-recursion.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-recursion.C?ref=17bc631c6806974d84c81360c6f8b3196b70d4e3", "patch": "@@ -0,0 +1,5 @@\n+// Test that we catch excessive recursion.\n+// { dg-options \"-std=c++0x -fconstexpr-depth=5\" }\n+// { dg-prune-output \"in constexpr expansion\" }\n+constexpr int f (int i) { return f (i-1); }\n+constexpr int i = f(42);\t// { dg-error \"constexpr evaluation depth\" }"}]}