{"sha": "ad24823466a52926eb20b83b07fd60d39fd139c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQyNDgyMzQ2NmE1MjkyNmViMjBiODNiMDdmZDYwZDM5ZmQxMzljNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-28T20:48:18Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-28T20:48:18Z"}, "message": "(__objc_block_forward): New function.\n\n(get_imp, objc_msg_lookup): Use different forwarding function\nwhen the returning a floating point value.\n\nFrom-SVN: r12371", "tree": {"sha": "9f6e9f06338f3237f890593e29df3477781c69b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f6e9f06338f3237f890593e29df3477781c69b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad24823466a52926eb20b83b07fd60d39fd139c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad24823466a52926eb20b83b07fd60d39fd139c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad24823466a52926eb20b83b07fd60d39fd139c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad24823466a52926eb20b83b07fd60d39fd139c6/comments", "author": null, "committer": null, "parents": [{"sha": "7f5648a54c9d541c0b3180e62402f2bcb8df5cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5648a54c9d541c0b3180e62402f2bcb8df5cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5648a54c9d541c0b3180e62402f2bcb8df5cef"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "97b49fede6740ff358930c237f49f556b7acac42", "filename": "gcc/objc/sendmsg.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad24823466a52926eb20b83b07fd60d39fd139c6/gcc%2Fobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad24823466a52926eb20b83b07fd60d39fd139c6/gcc%2Fobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fsendmsg.c?ref=ad24823466a52926eb20b83b07fd60d39fd139c6", "patch": "@@ -49,6 +49,14 @@ static void __objc_install_dispatch_table_for_class (Class);\n \n /* Forward declare some functions */\n static void __objc_init_install_dtable(id, SEL);\n+\n+/* Various forwarding functions that are used based upon the\n+   return type for the selector.\n+   __objc_block_forward for structures.\n+   __objc_double_forward for floats/doubles.\n+   __objc_word_forward for pointers or types that fit in registers.\n+   */\n+static double __objc_double_forward(id, SEL, ...);\n static id __objc_word_forward(id, SEL, ...);\n typedef struct { id many[8]; } __big;\n #if INVISIBLE_STRUCT_RETURN \n@@ -80,6 +88,8 @@ get_imp (Class class, SEL sel)\n       const char *t = sel->sel_types;\n       if (t && (*t == '[' || *t == '(' || *t == '{'))\n \tres = (IMP)__objc_block_forward;\n+      else if (t && (*t == 'f' || *t == 'd'))\n+\tres = (IMP)__objc_double_forward;\n       else\n \tres = (IMP)__objc_word_forward;\n     }\n@@ -116,6 +126,8 @@ objc_msg_lookup(id receiver, SEL op)\n \t  const char *t = op->sel_types;\n \t  if (t && (*t == '[' || *t == '(' || *t == '{'))\n \t    result = (IMP)__objc_block_forward;\n+\t  else if (t && (*t == 'f' || *t == 'd'))\n+\t    result = (IMP)__objc_double_forward;\n \t  else\n \t    result = (IMP)__objc_word_forward;\n \t}\n@@ -458,6 +470,7 @@ search_for_method_in_list (MethodList_t list, SEL op)\n \n static retval_t __objc_forward (id object, SEL sel, arglist_t args);\n \n+/* Forwarding pointers/integers through the normal registers */\n static id\n __objc_word_forward (id rcv, SEL op, ...)\n {\n@@ -471,6 +484,21 @@ __objc_word_forward (id rcv, SEL op, ...)\n     return res;\n }\n \n+/* Specific routine for forwarding floats/double because of\n+   architectural differences on some processors.  i386s for\n+   example which uses a floating point stack versus general\n+   registers for floating point numbers.  This forward routine \n+   makes sure that GCC restores the proper return values. */\n+static double\n+__objc_double_forward (id rcv, SEL op, ...)\n+{\n+  void *args, *res;\n+\n+  args = __builtin_apply_args ();\n+  res = __objc_forward (rcv, op, args);\n+  __builtin_return (res);\n+}\n+\n #if INVISIBLE_STRUCT_RETURN\n static __big\n #else"}]}