{"sha": "637aeb6b8da36a621cf076068498adc5322be069", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM3YWViNmI4ZGEzNmE2MjFjZjA3NjA2ODQ5OGFkYzUzMjJiZTA2OQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-11-02T14:40:10Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-11-02T14:40:10Z"}, "message": "arm: Fix multiple inheritance thunks for thumb-1 with -mpure-code\n\nWhen -mpure-code is used, we cannot load delta from code memory (like\nwe do without -mpure-code).\n\nThis patch builds the value of mi_delta into r3 with a series of\nmovs/adds/lsls.\n\nWe also do some cleanup by not emitting the function address and delta\nvia .word directives at the end of the thunk since we don't use them\nwith -mpure-code.\n\nNo need for new testcases, this bug was already identified by:\ng++.dg/ipa/pr46287-3.C\ng++.dg/ipa/pr46984.C\ng++.dg/opt/thunk1.C\ng++.dg/torture/pr46287.C\ng++.dg/torture/pr45699.C\n\n2020-11-02  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/arm.c (arm_thumb1_mi_thunk): Build mi_delta in r3 and\n\tdo not emit function address and delta when -mpure-code is used.", "tree": {"sha": "a4ea4dd47a42902f893a1bbe0ef5adca2f25fc03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4ea4dd47a42902f893a1bbe0ef5adca2f25fc03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/637aeb6b8da36a621cf076068498adc5322be069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637aeb6b8da36a621cf076068498adc5322be069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/637aeb6b8da36a621cf076068498adc5322be069", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637aeb6b8da36a621cf076068498adc5322be069/comments", "author": null, "committer": null, "parents": [{"sha": "c7f49e0579329961c49ece7f9a048914bcc106d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f49e0579329961c49ece7f9a048914bcc106d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f49e0579329961c49ece7f9a048914bcc106d0"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "5612d1e7e180589a04214c4b18fed33d50ba76e8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637aeb6b8da36a621cf076068498adc5322be069/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637aeb6b8da36a621cf076068498adc5322be069/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=637aeb6b8da36a621cf076068498adc5322be069", "patch": "@@ -28528,9 +28528,19 @@ arm_thumb1_mi_thunk (FILE *file, tree, HOST_WIDE_INT delta,\n     {\n       if (mi_delta > 255)\n \t{\n-\t  fputs (\"\\tldr\\tr3, \", file);\n-\t  assemble_name (file, label);\n-\t  fputs (\"+4\\n\", file);\n+\t  /* With -mpure-code, we cannot load MI_DELTA from the\n+\t     constant pool: we build it explicitly.  */\n+\t  if (target_pure_code)\n+\t    {\n+\t      thumb1_const_print r3 (file, 3);\n+\t      thumb1_gen_const_int_1 (r3, mi_delta);\n+\t    }\n+\t  else\n+\t    {\n+\t      fputs (\"\\tldr\\tr3, \", file);\n+\t      assemble_name (file, label);\n+\t      fputs (\"+4\\n\", file);\n+\t    }\n \t  asm_fprintf (file, \"\\t%ss\\t%r, %r, r3\\n\",\n \t\t       mi_op, this_regno, this_regno);\n \t}\n@@ -28566,30 +28576,37 @@ arm_thumb1_mi_thunk (FILE *file, tree, HOST_WIDE_INT delta,\n \tfputs (\"\\tpop\\t{r3}\\n\", file);\n \n       fprintf (file, \"\\tbx\\tr12\\n\");\n-      ASM_OUTPUT_ALIGN (file, 2);\n-      assemble_name (file, label);\n-      fputs (\":\\n\", file);\n-      if (flag_pic)\n+\n+      /* With -mpure-code, we don't need to emit literals for the\n+\t function address and delta since we emitted code to build\n+\t them.  */\n+      if (!target_pure_code)\n \t{\n-\t  /* Output \".word .LTHUNKn-[3,7]-.LTHUNKPCn\".  */\n-\t  rtx tem = XEXP (DECL_RTL (function), 0);\n-\t  /* For TARGET_THUMB1_ONLY the thunk is in Thumb mode, so the PC\n-\t     pipeline offset is four rather than eight.  Adjust the offset\n-\t     accordingly.  */\n-\t  tem = plus_constant (GET_MODE (tem), tem,\n-\t\t\t       TARGET_THUMB1_ONLY ? -3 : -7);\n-\t  tem = gen_rtx_MINUS (GET_MODE (tem),\n-\t\t\t       tem,\n-\t\t\t       gen_rtx_SYMBOL_REF (Pmode,\n-\t\t\t\t\t\t   ggc_strdup (labelpc)));\n-\t  assemble_integer (tem, 4, BITS_PER_WORD, 1);\n-\t}\n-      else\n-\t/* Output \".word .LTHUNKn\".  */\n-\tassemble_integer (XEXP (DECL_RTL (function), 0), 4, BITS_PER_WORD, 1);\n+\t  ASM_OUTPUT_ALIGN (file, 2);\n+\t  assemble_name (file, label);\n+\t  fputs (\":\\n\", file);\n+\t  if (flag_pic)\n+\t    {\n+\t      /* Output \".word .LTHUNKn-[3,7]-.LTHUNKPCn\".  */\n+\t      rtx tem = XEXP (DECL_RTL (function), 0);\n+\t      /* For TARGET_THUMB1_ONLY the thunk is in Thumb mode, so the PC\n+\t\t pipeline offset is four rather than eight.  Adjust the offset\n+\t\t accordingly.  */\n+\t      tem = plus_constant (GET_MODE (tem), tem,\n+\t\t\t\t   TARGET_THUMB1_ONLY ? -3 : -7);\n+\t      tem = gen_rtx_MINUS (GET_MODE (tem),\n+\t\t\t\t   tem,\n+\t\t\t\t   gen_rtx_SYMBOL_REF (Pmode,\n+\t\t\t\t\t\t       ggc_strdup (labelpc)));\n+\t      assemble_integer (tem, 4, BITS_PER_WORD, 1);\n+\t    }\n+\t  else\n+\t    /* Output \".word .LTHUNKn\".  */\n+\t    assemble_integer (XEXP (DECL_RTL (function), 0), 4, BITS_PER_WORD, 1);\n \n-      if (TARGET_THUMB1_ONLY && mi_delta > 255)\n-\tassemble_integer (GEN_INT(mi_delta), 4, BITS_PER_WORD, 1);\n+\t  if (TARGET_THUMB1_ONLY && mi_delta > 255)\n+\t    assemble_integer (GEN_INT (mi_delta), 4, BITS_PER_WORD, 1);\n+\t}\n     }\n   else\n     {"}]}