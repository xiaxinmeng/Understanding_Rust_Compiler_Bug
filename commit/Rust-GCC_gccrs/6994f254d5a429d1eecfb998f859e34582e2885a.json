{"sha": "6994f254d5a429d1eecfb998f859e34582e2885a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk5NGYyNTRkNWE0MjlkMWVlY2ZiOTk4Zjg1OWUzNDU4MmUyODg1YQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2008-02-02T15:00:57Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2008-02-02T15:00:57Z"}, "message": "re PR target/35045 (gcc-4.3 generates wrong code on i386 with -O3)\n\n        PR target/35045\n        * postreload-gcse.c (record_last_reg_set_info_regno): Renamed\n        from record_last_reg_set_info.\n        (record_last_reg_set_info): Take an RTX argument, iterate over all\n        constituent hardregs.\n        (record_last_set_info, record_opr_changes): Change calls to\n        new signature or to record_last_reg_set_info_regno.\n\n        * gcc.dg/pr35045.c: New test.\n\nFrom-SVN: r132071", "tree": {"sha": "b73cc38ec06002dccdc72be72d79e7b0f64ff53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b73cc38ec06002dccdc72be72d79e7b0f64ff53e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6994f254d5a429d1eecfb998f859e34582e2885a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6994f254d5a429d1eecfb998f859e34582e2885a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6994f254d5a429d1eecfb998f859e34582e2885a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6994f254d5a429d1eecfb998f859e34582e2885a/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee440dd05de292dde12376f8a977d2a4bf22c2c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee440dd05de292dde12376f8a977d2a4bf22c2c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee440dd05de292dde12376f8a977d2a4bf22c2c3"}], "stats": {"total": 85, "additions": 73, "deletions": 12}, "files": [{"sha": "c17605d39313dfbfb5e6003822516297583db4f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6994f254d5a429d1eecfb998f859e34582e2885a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6994f254d5a429d1eecfb998f859e34582e2885a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6994f254d5a429d1eecfb998f859e34582e2885a", "patch": "@@ -1,3 +1,13 @@\n+2008-02-02  Michael Matz  <matz@suse.de>\n+\n+\tPR target/35045\n+\t* postreload-gcse.c (record_last_reg_set_info_regno): Renamed\n+\tfrom record_last_reg_set_info.\n+\t(record_last_reg_set_info): Take an RTX argument, iterate over all\n+\tconstituent hardregs.\n+\t(record_last_set_info, record_opr_changes): Change calls to\n+\tnew signature or to record_last_reg_set_info_regno.\n+\n 2008-02-02  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/extend.texi (X86 Built-in Functions): Fix grammar."}, {"sha": "805608dc5fab463a5154fe31b21fb4ca72a8cf42", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6994f254d5a429d1eecfb998f859e34582e2885a/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6994f254d5a429d1eecfb998f859e34582e2885a/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=6994f254d5a429d1eecfb998f859e34582e2885a", "patch": "@@ -175,7 +175,8 @@ static void free_mem (void);\n \n /* Support for hash table construction and transformations.  */\n static bool oprs_unchanged_p (rtx, rtx, bool);\n-static void record_last_reg_set_info (rtx, int);\n+static void record_last_reg_set_info (rtx, rtx);\n+static void record_last_reg_set_info_regno (rtx, int);\n static void record_last_mem_set_info (rtx);\n static void record_last_set_info (rtx, const_rtx, void *);\n static void record_opr_changes (rtx);\n@@ -645,7 +646,19 @@ load_killed_in_block_p (int uid_limit, rtx x, bool after_insn)\n /* Record register first/last/block set information for REGNO in INSN.  */\n \n static inline void\n-record_last_reg_set_info (rtx insn, int regno)\n+record_last_reg_set_info (rtx insn, rtx reg)\n+{\n+  unsigned int regno, end_regno;\n+\n+  regno = REGNO (reg);\n+  end_regno = END_HARD_REGNO (reg);\n+  do\n+    reg_avail_info[regno] = INSN_CUID (insn);\n+  while (++regno < end_regno);\n+}\n+\n+static inline void\n+record_last_reg_set_info_regno (rtx insn, int regno)\n {\n   reg_avail_info[regno] = INSN_CUID (insn);\n }\n@@ -680,7 +693,7 @@ record_last_set_info (rtx dest, const_rtx setter ATTRIBUTE_UNUSED, void *data)\n     dest = SUBREG_REG (dest);\n \n   if (REG_P (dest))\n-    record_last_reg_set_info (last_set_insn, REGNO (dest));\n+    record_last_reg_set_info (last_set_insn, dest);\n   else if (MEM_P (dest))\n     {\n       /* Ignore pushes, they don't clobber memory.  They may still\n@@ -691,7 +704,7 @@ record_last_set_info (rtx dest, const_rtx setter ATTRIBUTE_UNUSED, void *data)\n       if (! push_operand (dest, GET_MODE (dest)))\n \trecord_last_mem_set_info (last_set_insn);\n       else\n-\trecord_last_reg_set_info (last_set_insn, STACK_POINTER_REGNUM);\n+\trecord_last_reg_set_info_regno (last_set_insn, STACK_POINTER_REGNUM);\n     }\n }\n \n@@ -722,17 +735,17 @@ record_opr_changes (rtx insn)\n   /* Also record autoincremented REGs for this insn as changed.  */\n   for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n     if (REG_NOTE_KIND (note) == REG_INC)\n-      record_last_reg_set_info (insn, REGNO (XEXP (note, 0)));\n+      record_last_reg_set_info (insn, XEXP (note, 0));\n \n   /* Finally, if this is a call, record all call clobbers.  */\n   if (CALL_P (insn))\n     {\n-      unsigned int regno, end_regno;\n+      unsigned int regno;\n       rtx link, x;\n \n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \tif (TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n-\t  record_last_reg_set_info (insn, regno);\n+\t  record_last_reg_set_info_regno (insn, regno);\n \n       for (link = CALL_INSN_FUNCTION_USAGE (insn); link; link = XEXP (link, 1))\n \tif (GET_CODE (XEXP (link, 0)) == CLOBBER)\n@@ -741,11 +754,7 @@ record_opr_changes (rtx insn)\n \t    if (REG_P (x))\n \t      {\n \t\tgcc_assert (HARD_REGISTER_P (x));\n-\t        regno = REGNO (x);\n-\t\tend_regno = END_HARD_REGNO (x);\n-\t\tdo\n-\t\t  record_last_reg_set_info (insn, regno);\n-\t\twhile (++regno < end_regno);\n+\t\trecord_last_reg_set_info (insn, x);\n \t      }\n \t  }\n "}, {"sha": "9a2f57050ce3ef702d4893ec5828930eaa253ffa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6994f254d5a429d1eecfb998f859e34582e2885a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6994f254d5a429d1eecfb998f859e34582e2885a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6994f254d5a429d1eecfb998f859e34582e2885a", "patch": "@@ -1,3 +1,8 @@\n+2008-02-02  Michael Matz  <matz@suse.de>\n+\n+\tPR target/35045\n+\t* gcc.dg/pr35045.c: New test.\n+\n 2008-02-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/35001"}, {"sha": "16f8799c52d107b3748b15427adec7c998f918fe", "filename": "gcc/testsuite/gcc.dg/pr35045.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6994f254d5a429d1eecfb998f859e34582e2885a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35045.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6994f254d5a429d1eecfb998f859e34582e2885a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35045.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35045.c?ref=6994f254d5a429d1eecfb998f859e34582e2885a", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fgcse-after-reload\" } */\n+\n+extern void abort (void);\n+\n+__attribute__((noinline)) __complex__ float\n+give_neg1 (void)\n+{\n+  __complex__ float res;\n+  __real__ res = -1.0;\n+  __imag__ res = 1.0;\n+  return res;\n+}\n+\n+__attribute__((noinline)) __complex__ float\n+mycacoshf (__complex__ float x)\n+{\n+  __complex__ float res;\n+  res = give_neg1 ();\n+\n+  /* We have to use the positive branch.  */\n+  if (__real__ res < 0.0)\n+    {\n+      unsigned a,b,c,d,e,f;\n+      res = -res; \n+      asm __volatile__ (\"\" : \"=r\" (a), \"=r\" (b), \"=r\" (c), \"=r\" (d), \"=r\" (e), \"=r\" (f));\n+    }\n+  return res;\n+}\n+\n+int main()\n+{\n+  __complex__ float res = mycacoshf(1.0);\n+  if (__imag__ res >= 0.0)\n+    abort();\n+  return 0;\n+}"}]}