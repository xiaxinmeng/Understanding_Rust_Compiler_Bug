{"sha": "566be57c16be30fa2386e4badef6c1c26c150002", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY2YmU1N2MxNmJlMzBmYTIzODZlNGJhZGVmNmMxYzI2YzE1MDAwMg==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-05-12T21:59:13Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-05-12T21:59:13Z"}, "message": "epiphany.c (epiphany_init): Check size of NUM_MODES_FOR_MODE_SWITCHING.\n\n\t* config/epiphany/epiphany.c (epiphany_init): Check size of\n\tNUM_MODES_FOR_MODE_SWITCHING.\n\t(epiphany_expand_prologue):\n\tRemove CONFIG_REGNUM initial value handling code.\n\t(epiphany_optimize_mode_switching): Handle EPIPHANY_MSW_ENTITY_CONFIG.\n\t(epiphany_mode_needed, epiphany_mode_entry_exit): Likewise.\n\t(emit_set_fp_mode): Likewise.\n\t(epiphany_mode_needed) <Handle EPIPHANY_MSW_ENTITY_AND>:\n\tDon't return 1 for FP_MODE_NONE.\n\t* config/epiphany/epiphany.h (NUM_MODES_FOR_MODE_SWITCHING):\n\tAdd value for EPIPHANY_MSW_ENTITY_CONFIG.\n\t(EPIPHANY_MSW_ENTITY_CONFIG, EPIPHANY_MSW_ENTITY_NUM): Define.\n\t* config/epiphany/epiphany.md (save_config): New pattern.\n\nFrom-SVN: r198807", "tree": {"sha": "e892f70f94b4869df9c7a715811bf47f323f666e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e892f70f94b4869df9c7a715811bf47f323f666e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/566be57c16be30fa2386e4badef6c1c26c150002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566be57c16be30fa2386e4badef6c1c26c150002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/566be57c16be30fa2386e4badef6c1c26c150002", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566be57c16be30fa2386e4badef6c1c26c150002/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f2c2331121cbb13426284112a9bddf18bde97ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2c2331121cbb13426284112a9bddf18bde97ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f2c2331121cbb13426284112a9bddf18bde97ea"}], "stats": {"total": 108, "additions": 65, "deletions": 43}, "files": [{"sha": "554ae342024eb6c5a5cf2f84d851d12a5213c3eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566be57c16be30fa2386e4badef6c1c26c150002/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566be57c16be30fa2386e4badef6c1c26c150002/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=566be57c16be30fa2386e4badef6c1c26c150002", "patch": "@@ -1,3 +1,19 @@\n+2013-05-12  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* config/epiphany/epiphany.c (epiphany_init): Check size of\n+\tNUM_MODES_FOR_MODE_SWITCHING.\n+\t(epiphany_expand_prologue):\n+\tRemove CONFIG_REGNUM initial value handling code.\n+\t(epiphany_optimize_mode_switching): Handle EPIPHANY_MSW_ENTITY_CONFIG.\n+\t(epiphany_mode_needed, epiphany_mode_entry_exit): Likewise.\n+\t(emit_set_fp_mode): Likewise.\n+\t(epiphany_mode_needed) <Handle EPIPHANY_MSW_ENTITY_AND>:\n+\tDon't return 1 for FP_MODE_NONE.\n+\t* config/epiphany/epiphany.h (NUM_MODES_FOR_MODE_SWITCHING):\n+\tAdd value for EPIPHANY_MSW_ENTITY_CONFIG.\n+\t(EPIPHANY_MSW_ENTITY_CONFIG, EPIPHANY_MSW_ENTITY_NUM): Define.\n+\t* config/epiphany/epiphany.md (save_config): New pattern.\n+\n 2013-05-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*zero_extendsidi2): Add *x->?r alternative."}, {"sha": "74192bf46217226b59ee619b3ceb26821a22049f", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 34, "deletions": 41, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566be57c16be30fa2386e4badef6c1c26c150002/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566be57c16be30fa2386e4badef6c1c26c150002/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=566be57c16be30fa2386e4badef6c1c26c150002", "patch": "@@ -181,6 +181,8 @@ epiphany_init (void)\n     = { &pass_split_all_insns.pass, \"mode_sw\",\n \t1, PASS_POS_INSERT_AFTER\n       };\n+  static const int num_modes[] = NUM_MODES_FOR_MODE_SWITCHING;\n+#define N_ENTITIES ARRAY_SIZE (num_modes)\n \n   epiphany_init_reg_tables ();\n \n@@ -196,6 +198,8 @@ epiphany_init (void)\n   register_pass (&mode_sw3_info);\n   register_pass (&insert_use_info);\n   register_pass (&mode_sw2_info);\n+  /* Verify that NUM_MODES_FOR_MODE_SWITCHING has one value per entity.  */\n+  gcc_assert (N_ENTITIES == EPIPHANY_MSW_ENTITY_NUM);\n \n #if 1 /* As long as peep2_rescan is not implemented,\n          (see http://gcc.gnu.org/ml/gcc-patches/2011-10/msg02819.html,)\n@@ -1773,44 +1777,6 @@ epiphany_expand_prologue (void)\n \t}\n       frame_insn (gen_stack_adjust_add (off, mem));\n     }\n-\n-  /* Mode switching uses get_hard_reg_initial_val after\n-      emit_initial_value_sets, so we have to fix this up now.  */\n-  save_config = has_hard_reg_initial_val (SImode, CONFIG_REGNUM);\n-  if (save_config)\n-    {\n-      if (REG_P (save_config))\n-\t{\n-\t  if (REGNO (save_config) >= FIRST_PSEUDO_REGISTER)\n-\t    gcc_assert (!df_regs_ever_live_p (REGNO (save_config)));\n-\t  else\n-\t    frame_move_insn (save_config,\n-\t\t\t     get_hard_reg_initial_reg (save_config));\n-\t}\n-      else\n-\t{\n-\t  rtx save_dst = save_config;\n-\n-\t  reg = gen_rtx_REG (SImode, GPR_IP);\n-\t  gcc_assert (MEM_P (save_dst));\n-\t  if (!memory_operand (save_dst, SImode))\n-\t    {\n-\t      rtx addr = XEXP (save_dst, 0);\n-\t      rtx reg2 = gen_rtx_REG (SImode, GPR_16);\n-\n-\t      gcc_assert (GET_CODE (addr) == PLUS);\n-\t      gcc_assert (XEXP (addr, 0) == hard_frame_pointer_rtx\n-\t\t\t  || XEXP (addr, 0) == stack_pointer_rtx);\n-\t      emit_move_insn (reg2, XEXP (addr, 1));\n-\t      save_dst\n-\t\t= replace_equiv_address (save_dst,\n-\t\t\t\t\t gen_rtx_PLUS (Pmode, XEXP (addr, 0),\n-\t\t\t\t\t\t       reg2));\n-\t    }\n-\t  emit_move_insn (reg, get_hard_reg_initial_reg (save_config));\n-\t  emit_move_insn (save_dst, reg);\n-\t}\n-    }\n }\n \n void\n@@ -2271,6 +2237,7 @@ epiphany_optimize_mode_switching (int entity)\n     {\n     case EPIPHANY_MSW_ENTITY_AND:\n     case EPIPHANY_MSW_ENTITY_OR:\n+    case EPIPHANY_MSW_ENTITY_CONFIG:\n       return true;\n     case EPIPHANY_MSW_ENTITY_NEAREST:\n     case EPIPHANY_MSW_ENTITY_TRUNC:\n@@ -2289,7 +2256,8 @@ epiphany_optimize_mode_switching (int entity)\n int\n epiphany_mode_priority_to_mode (int entity, unsigned priority)\n {\n-  if (entity == EPIPHANY_MSW_ENTITY_AND || entity == EPIPHANY_MSW_ENTITY_OR)\n+  if (entity == EPIPHANY_MSW_ENTITY_AND || entity == EPIPHANY_MSW_ENTITY_OR\n+      || entity== EPIPHANY_MSW_ENTITY_CONFIG)\n     return priority;\n   if (priority > 3)\n     switch (priority)\n@@ -2341,7 +2309,8 @@ epiphany_mode_needed (int entity, rtx insn)\n   if (recog_memoized (insn) < 0)\n     {\n       if (entity == EPIPHANY_MSW_ENTITY_AND\n-\t  || entity == EPIPHANY_MSW_ENTITY_OR)\n+\t  || entity == EPIPHANY_MSW_ENTITY_OR\n+\t  || entity == EPIPHANY_MSW_ENTITY_CONFIG)\n \treturn 2;\n       return FP_MODE_NONE;\n     }\n@@ -2350,9 +2319,16 @@ epiphany_mode_needed (int entity, rtx insn)\n   switch (entity)\n   {\n   case EPIPHANY_MSW_ENTITY_AND:\n-    return mode != FP_MODE_INT ? 1 : 2;\n+    return mode != FP_MODE_NONE && mode != FP_MODE_INT ? 1 : 2;\n   case EPIPHANY_MSW_ENTITY_OR:\n     return mode == FP_MODE_INT ? 1 : 2;\n+  case EPIPHANY_MSW_ENTITY_CONFIG:\n+    /* We must know/save config before we set it to something else.\n+       Where we need the original value, we are fine with having it\n+       just unchanged from the function start.\n+       Because of the nature of the mode switching optimization,\n+       a restore will be dominated by a clobber.  */\n+    return mode != FP_MODE_NONE && mode != FP_MODE_CALLER ? 1 : 2;\n   case EPIPHANY_MSW_ENTITY_ROUND_KNOWN:\n     if (recog_memoized (insn) == CODE_FOR_set_fp_mode)\n       mode = (enum attr_fp_mode) epiphany_mode_after (entity, mode, insn);\n@@ -2396,6 +2372,10 @@ epiphany_mode_entry_exit (int entity, bool exit)\n       if (exit)\n \treturn normal_mode == FP_MODE_INT ? 1 : 2;\n       return 0;\n+    case EPIPHANY_MSW_ENTITY_CONFIG:\n+      if (exit)\n+\treturn 2;\n+      return normal_mode == FP_MODE_CALLER ? 0 : 1;\n     case EPIPHANY_MSW_ENTITY_ROUND_UNKNOWN:\n       if (normal_mode == FP_MODE_ROUND_NEAREST\n \t  || normal_mode == FP_MODE_ROUND_TRUNC)\n@@ -2475,12 +2455,25 @@ emit_set_fp_mode (int entity, int mode, HARD_REG_SET regs_live ATTRIBUTE_UNUSED)\n \temit_move_insn (MACHINE_FUNCTION (cfun)->or_mask, GEN_INT(0x00080000));\n       return;\n     }\n+  else if (entity == EPIPHANY_MSW_ENTITY_CONFIG)\n+    {\n+      /* Mode switching optimization is done after emit_initial_value_sets,\n+\t so we have to take care of CONFIG_REGNUM here.  */\n+      gcc_assert (mode >= 0 && mode <= 2);\n+      rtx save = get_hard_reg_initial_val (SImode, CONFIG_REGNUM);\n+      if (mode == 1)\n+\temit_insn (gen_save_config (save));\n+      return;\n+    }\n   fp_mode = (enum attr_fp_mode) mode;\n   src = NULL_RTX;\n \n   switch (fp_mode)\n     {\n       case FP_MODE_CALLER:\n+\t/* The EPIPHANY_MSW_ENTITY_CONFIG processing must come later\n+\t   so that the config save gets inserted before the first use.  */\n+\tgcc_assert (entity > EPIPHANY_MSW_ENTITY_CONFIG);\n \tsrc = get_hard_reg_initial_val (SImode, CONFIG_REGNUM);\n \tmask = MACHINE_FUNCTION (cfun)->and_mask;\n \tbreak;"}, {"sha": "bd84b5c793f3c84d7ec923ac15da889ab73463ee", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566be57c16be30fa2386e4badef6c1c26c150002/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566be57c16be30fa2386e4badef6c1c26c150002/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=566be57c16be30fa2386e4badef6c1c26c150002", "patch": "@@ -896,7 +896,8 @@ enum epiphany_function_type\n    finally an entity that runs in a second mode switching pass to\n    resolve FP_MODE_ROUND_UNKNOWN.  */\n #define NUM_MODES_FOR_MODE_SWITCHING \\\n-  { 2, 2, FP_MODE_NONE, FP_MODE_NONE, FP_MODE_NONE, FP_MODE_NONE, FP_MODE_NONE }\n+  { 2, 2, 2, \\\n+    FP_MODE_NONE, FP_MODE_NONE, FP_MODE_NONE, FP_MODE_NONE, FP_MODE_NONE }\n \n #define MODE_NEEDED(ENTITY, INSN) epiphany_mode_needed((ENTITY), (INSN))\n \n@@ -918,11 +919,13 @@ enum\n {\n   EPIPHANY_MSW_ENTITY_AND,\n   EPIPHANY_MSW_ENTITY_OR,\n+  EPIPHANY_MSW_ENTITY_CONFIG, /* 1 means config is known or saved.  */\n   EPIPHANY_MSW_ENTITY_NEAREST,\n   EPIPHANY_MSW_ENTITY_TRUNC,\n   EPIPHANY_MSW_ENTITY_ROUND_UNKNOWN,\n   EPIPHANY_MSW_ENTITY_ROUND_KNOWN,\n-  EPIPHANY_MSW_ENTITY_FPU_OMNIBUS\n+  EPIPHANY_MSW_ENTITY_FPU_OMNIBUS,\n+  EPIPHANY_MSW_ENTITY_NUM\n };\n \n extern int epiphany_normal_fp_rounding;"}, {"sha": "1e2d2ab02ed48e65cba364d6178fa6128973b40c", "filename": "gcc/config/epiphany/epiphany.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566be57c16be30fa2386e4badef6c1c26c150002/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566be57c16be30fa2386e4badef6c1c26c150002/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.md?ref=566be57c16be30fa2386e4badef6c1c26c150002", "patch": "@@ -1448,6 +1448,16 @@\n   [(set_attr \"type\" \"flow\")\n    (set_attr \"length\" \"20,4\")])\n \n+(define_insn_and_split \"save_config\"\n+  [(set (match_operand:SI 0 \"gpr_operand\" \"=r\") (reg:SI CONFIG_REGNUM))\n+   (use (reg:SI FP_NEAREST_REGNUM))\n+   (use (reg:SI FP_TRUNCATE_REGNUM))\n+   (use (reg:SI FP_ANYFP_REGNUM))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 0) (reg:SI CONFIG_REGNUM))])\n+\n (define_insn_and_split \"set_fp_mode\"\n   [(set (reg:SI FP_NEAREST_REGNUM)\n \t(match_operand:SI 0 \"set_fp_mode_operand\" \"rCfm\"))"}]}