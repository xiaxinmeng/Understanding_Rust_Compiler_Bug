{"sha": "2e3dac6f94ec46ecfe05f34bba26f09d35b8681b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUzZGFjNmY5NGVjNDZlY2ZlMDVmMzRiYmEyNmYwOWQzNWI4NjgxYg==", "commit": {"author": {"name": "Ozkan Sezer", "email": "sezeroz@gmail.com", "date": "2009-09-03T16:46:00Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-09-03T16:46:00Z"}, "message": "re PR target/39065 (libiberty hashtab.c:hash_pointer() needs intptr_t)\n\n2009-09-03  Ozkan Sezer  <sezeroz@gmail.com>\n\n\tPR target/39065\n\t* configure.ac: Also check for intptr_t.\n\t* config.h.in: Regenerated.\n\t* configure: Regenerated.\n\t* hashtab.c (hash_pointer): Cast the pointer argument to intptr_t\n\tinstead of of long.\n\nFrom-SVN: r151386", "tree": {"sha": "4f84a6682bd1aaed5aa99472dceeb58546c9315f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f84a6682bd1aaed5aa99472dceeb58546c9315f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b/comments", "author": {"login": "sezero", "id": 4222725, "node_id": "MDQ6VXNlcjQyMjI3MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/4222725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sezero", "html_url": "https://github.com/sezero", "followers_url": "https://api.github.com/users/sezero/followers", "following_url": "https://api.github.com/users/sezero/following{/other_user}", "gists_url": "https://api.github.com/users/sezero/gists{/gist_id}", "starred_url": "https://api.github.com/users/sezero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sezero/subscriptions", "organizations_url": "https://api.github.com/users/sezero/orgs", "repos_url": "https://api.github.com/users/sezero/repos", "events_url": "https://api.github.com/users/sezero/events{/privacy}", "received_events_url": "https://api.github.com/users/sezero/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d4507cb3051f5c256ffe567951744a53bd7f2d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4507cb3051f5c256ffe567951744a53bd7f2d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4507cb3051f5c256ffe567951744a53bd7f2d7"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "17fb033c6f99ca52125a5c0e2d491acd94ad9c35", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=2e3dac6f94ec46ecfe05f34bba26f09d35b8681b", "patch": "@@ -1,3 +1,12 @@\n+2009-09-03  Ozkan Sezer  <sezeroz@gmail.com>\n+\n+\tPR target/39065\n+\t* configure.ac: Also check for intptr_t.\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* hashtab.c (hash_pointer): Cast the pointer argument to intptr_t\n+\tinstead of of long.\n+\n 2009-09-02  Tristan Gingold  <gingold@adacore.com>\n \n \t* vmsbuild.com: Removed as unused and superceeded by makefile.vms."}, {"sha": "e962769e6a950922fb8a9496c105b4aaae3d7d07", "filename": "libiberty/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=2e3dac6f94ec46ecfe05f34bba26f09d35b8681b", "patch": "@@ -457,6 +457,9 @@\n #undef inline\n #endif\n \n+/* Define to `long' if <sys/types.h> does not define. */\n+#undef intptr_t\n+\n /* Define to `int' if <sys/types.h> does not define. */\n #undef pid_t\n "}, {"sha": "9463f8f506f54aa1a66977ff2f25f08eb724e6bc", "filename": "libiberty/configure", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=2e3dac6f94ec46ecfe05f34bba26f09d35b8681b", "patch": "@@ -5046,6 +5046,17 @@ _ACEOF\n \n \n \n+ac_fn_c_check_type \"$LINENO\" \"intptr_t\" \"ac_cv_type_intptr_t\" \"$ac_includes_default\"\n+if test \"x$ac_cv_type_intptr_t\" = x\"\"yes; then :\n+\n+else\n+\n+cat >>confdefs.h <<_ACEOF\n+#define intptr_t long\n+_ACEOF\n+\n+fi\n+\n ac_fn_c_check_type \"$LINENO\" \"uintptr_t\" \"ac_cv_type_uintptr_t\" \"$ac_includes_default\"\n if test \"x$ac_cv_type_uintptr_t\" = x\"\"yes; then :\n "}, {"sha": "c34fc10b81bf5b2959701fc3d2e7545fa28c7ad7", "filename": "libiberty/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=2e3dac6f94ec46ecfe05f34bba26f09d35b8681b", "patch": "@@ -254,6 +254,7 @@ libiberty_AC_DECLARE_ERRNO\n # Determine the size of an int for struct fibnode.\n AC_CHECK_SIZEOF([int])\n \n+AC_CHECK_TYPE(intptr_t, long)\n AC_CHECK_TYPE(uintptr_t, unsigned long)\n \n # Look for a 64-bit type."}, {"sha": "8c8bd3110ade2a1d509321a46341baa52a3f8131", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e3dac6f94ec46ecfe05f34bba26f09d35b8681b/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=2e3dac6f94ec46ecfe05f34bba26f09d35b8681b", "patch": "@@ -196,7 +196,7 @@ higher_prime_index (unsigned long n)\n static hashval_t\n hash_pointer (const PTR p)\n {\n-  return (hashval_t) ((long)p >> 3);\n+  return (hashval_t) ((intptr_t)p >> 3);\n }\n \n /* Returns non-zero if P1 and P2 are equal.  */"}]}