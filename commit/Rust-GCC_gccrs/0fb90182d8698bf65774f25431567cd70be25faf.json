{"sha": "0fb90182d8698bf65774f25431567cd70be25faf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZiOTAxODJkODY5OGJmNjU3NzRmMjU0MzE1NjdjZDcwYmUyNWZhZg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2018-04-05T14:37:18Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2018-04-05T14:37:18Z"}, "message": "Implement P0961\n\ngcc/cp\n\nImplement P0961\n* decl.c (get_tuple_decomp_init): Check the templatedness\nof a member get.\n\ntestsuite/\n\nImplement P0961\n* g++.dg/cpp1z/decomp10.C: Adjust.\n* g++.dg/cpp1z/decomp37.C: New.\n\nFrom-SVN: r259128", "tree": {"sha": "7ac1a0f9796b1dad39846a5caebc5f8dd9f53e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ac1a0f9796b1dad39846a5caebc5f8dd9f53e12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fb90182d8698bf65774f25431567cd70be25faf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb90182d8698bf65774f25431567cd70be25faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb90182d8698bf65774f25431567cd70be25faf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb90182d8698bf65774f25431567cd70be25faf/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e99d77c97fbee5c17594374b978a0c4f9cd125f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99d77c97fbee5c17594374b978a0c4f9cd125f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e99d77c97fbee5c17594374b978a0c4f9cd125f4"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "090190612851fbebdb4a10c94d8dbac3fb1e8d74", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb90182d8698bf65774f25431567cd70be25faf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb90182d8698bf65774f25431567cd70be25faf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0fb90182d8698bf65774f25431567cd70be25faf", "patch": "@@ -1,3 +1,9 @@\n+2018-04-05  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement P0961\n+\t* decl.c (get_tuple_decomp_init): Check the templatedness\n+\tof a member get.\n+\n 2018-04-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/85200 - ICE with constexpr if in generic lambda."}, {"sha": "31d9c983e9f380044c62dfcfe9e5f8d1ba22ed24", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb90182d8698bf65774f25431567cd70be25faf/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb90182d8698bf65774f25431567cd70be25faf/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0fb90182d8698bf65774f25431567cd70be25faf", "patch": "@@ -7432,7 +7432,27 @@ get_tuple_decomp_init (tree decl, unsigned i)\n \n   tree fns = lookup_qualified_name (TREE_TYPE (e), get_id,\n \t\t\t\t    /*type*/false, /*complain*/false);\n-  if (fns != error_mark_node)\n+  bool use_member_get = false;\n+\n+  /* To use a member get, member lookup must find at least one\n+     declaration that is a function template\n+     whose first template parameter is a non-type parameter.  */\n+  for (lkp_iterator iter (MAYBE_BASELINK_FUNCTIONS (fns)); iter; ++iter)\n+    {\n+      tree fn = *iter;\n+      if (TREE_CODE (fn) == TEMPLATE_DECL)\n+\t{\n+\t  tree tparms = DECL_TEMPLATE_PARMS (fn);\n+\t  tree parm = TREE_VEC_ELT (INNERMOST_TEMPLATE_PARMS (tparms), 0);\n+\t  if (TREE_CODE (TREE_VALUE (parm)) == PARM_DECL)\n+\t    {\n+\t      use_member_get = true;\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n+  if (use_member_get)\n     {\n       fns = lookup_template_function (fns, targs);\n       return build_new_method_call (e, fns, /*args*/NULL,"}, {"sha": "b4169d343204700bc4b2d8c3eef7773f9b00b484", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb90182d8698bf65774f25431567cd70be25faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb90182d8698bf65774f25431567cd70be25faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp10.C?ref=0fb90182d8698bf65774f25431567cd70be25faf", "patch": "@@ -20,7 +20,7 @@ void f3() { auto [ x ] = a3; }\t// { dg-error \"get\" }\n \n struct A3a { int i,j; int get(); } a3a;\n template<> struct std::tuple_size<A3a> { enum { value = 1 }; };\n-void f3a() { auto [ x ] = a3a; }\t// { dg-error \"get<0>\" }\n+void f3a() { auto [ x ] = a3a; }\t// { dg-error \"get\" }\n \n struct A3b { int i,j; } a3b;\n int get(A3b&&);"}, {"sha": "dc47908cddfc7685497632ff60dc62f2201c53f1", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp37.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fb90182d8698bf65774f25431567cd70be25faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fb90182d8698bf65774f25431567cd70be25faf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp37.C?ref=0fb90182d8698bf65774f25431567cd70be25faf", "patch": "@@ -0,0 +1,62 @@\n+// { dg-additional-options -std=c++17 }\n+// { dg-do compile }\n+\n+#include <memory>\n+#include <tuple>\n+#include <string>\n+\n+struct X : private std::shared_ptr<int>\n+{\n+  std::string fun_payload;\n+};\n+\n+template<int N> std::string& get(X& x)\n+{\n+  if constexpr(N==0) return x.fun_payload;\n+}\n+\n+namespace std {\n+  template<> class tuple_size<X> : public std::integral_constant<int, 1> {};\n+  template<> class tuple_element<0, X> {public: using type = std::string;};\n+}\n+\n+struct X2 : private std::shared_ptr<int>\n+{\n+  int fun_payload;\n+  template <class T> void get();\n+};\n+\n+template<int N> int& get(X2& x)\n+{\n+  if constexpr(N==0) return x.fun_payload;\n+}\n+\n+namespace std {\n+  template<> class tuple_size<X2> : public std::integral_constant<int, 1> {};\n+  template<> class tuple_element<0, X2> {public: using type = int;};\n+}\n+\n+class X3\n+{\n+  double fun_payload;\n+public:\n+  template <int N> double& get()\n+  {\n+    if constexpr(N==0) return fun_payload;\n+  }\n+};\n+\n+namespace std {\n+  template<> class tuple_size<X3> : public std::integral_constant<int, 1> {};\n+  template<> class tuple_element<0, X3> {public: using type = double;};\n+}\n+\n+int main()\n+{\n+  X x;\n+  auto& [b1] = x;\n+  X2 x2;\n+  auto& [b2] = x2;\n+  X3 x3;\n+  auto& [b3] = x3;\n+}"}]}