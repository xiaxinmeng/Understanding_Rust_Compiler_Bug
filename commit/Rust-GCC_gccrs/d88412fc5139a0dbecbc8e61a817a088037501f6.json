{"sha": "d88412fc5139a0dbecbc8e61a817a088037501f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg4NDEyZmM1MTM5YTBkYmVjYmM4ZTYxYTgxN2EwODgwMzc1MDFmNg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-11-05T17:24:37Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-11-05T17:24:37Z"}, "message": "re PR fortran/82471 (Reorder loop for unfavorable index ordering in DO  CONCURRENT and FORALL)\n\n2017-11-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/82471\n\t* lang.opt (ffrontend-loop-interchange): New option.\n\t(Wfrontend-loop-interchange): New option.\n\t* options.c (gfc_post_options): Handle ffrontend-loop-interchange.\n\t* frontend-passes.c (gfc_run_passes): Run\n\toptimize_namespace if flag_frontend_optimize or\n\tflag_frontend_loop_interchange are set.\n\t(optimize_namespace): Run functions according to flags set;\n\talso call index_interchange.\n\t(ind_type): New function.\n\t(has_var): New function.\n\t(index_cost): New function.\n\t(loop_comp): New function.\n\n2017-11-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/82471\n\t* gfortran.dg/loop_interchange_1.f90: New test.\n\nFrom-SVN: r254430", "tree": {"sha": "a619106d5d0f15135e88affa6a1b775ec677d5c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a619106d5d0f15135e88affa6a1b775ec677d5c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d88412fc5139a0dbecbc8e61a817a088037501f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88412fc5139a0dbecbc8e61a817a088037501f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88412fc5139a0dbecbc8e61a817a088037501f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88412fc5139a0dbecbc8e61a817a088037501f6/comments", "author": null, "committer": null, "parents": [{"sha": "5233d45559d5869fe7dc9705d6c79e6538d8a2ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5233d45559d5869fe7dc9705d6c79e6538d8a2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5233d45559d5869fe7dc9705d6c79e6538d8a2ab"}], "stats": {"total": 291, "additions": 270, "deletions": 21}, "files": [{"sha": "58ee3e50237eb110e86d139f607613fd5f7c53df", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d88412fc5139a0dbecbc8e61a817a088037501f6", "patch": "@@ -1,3 +1,19 @@\n+2017-11-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/82471\n+\t* lang.opt (ffrontend-loop-interchange): New option.\n+\t(Wfrontend-loop-interchange): New option.\n+\t* options.c (gfc_post_options): Handle ffrontend-loop-interchange.\n+\t* frontend-passes.c (gfc_run_passes): Run\n+\toptimize_namespace if flag_frontend_optimize or\n+\tflag_frontend_loop_interchange are set.\n+\t(optimize_namespace): Run functions according to flags set;\n+\talso call index_interchange.\n+\t(ind_type): New function.\n+\t(has_var): New function.\n+\t(index_cost): New function.\n+\t(loop_comp): New function.\n+\n 2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/78641"}, {"sha": "b3db18ac5f1c371cdecefd4acbc3689e182eae9e", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 195, "deletions": 19, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=d88412fc5139a0dbecbc8e61a817a088037501f6", "patch": "@@ -55,6 +55,7 @@ static gfc_expr* check_conjg_transpose_variable (gfc_expr *, bool *,\n \t\t\t\t\t\t bool *);\n static bool has_dimen_vector_ref (gfc_expr *);\n static int matmul_temp_args (gfc_code **, int *,void *data);\n+static int index_interchange (gfc_code **, int*, void *);\n \n #ifdef CHECKING_P\n static void check_locus (gfc_namespace *);\n@@ -155,9 +156,11 @@ gfc_run_passes (gfc_namespace *ns)\n   check_locus (ns);\n #endif\n \n+  if (flag_frontend_optimize || flag_frontend_loop_interchange)\n+    optimize_namespace (ns);\n+\n   if (flag_frontend_optimize)\n     {\n-      optimize_namespace (ns);\n       optimize_reduction (ns);\n       if (flag_dump_fortran_optimized)\n \tgfc_dump_parse_tree (ns, stdout);\n@@ -1350,7 +1353,9 @@ simplify_io_impl_do (gfc_code **code, int *walk_subtrees,\n   return 0;\n }\n \n-/* Optimize a namespace, including all contained namespaces.  */\n+/* Optimize a namespace, including all contained namespaces.\n+  flag_frontend_optimize and flag_fronend_loop_interchange are\n+  handled separately.  */\n \n static void\n optimize_namespace (gfc_namespace *ns)\n@@ -1363,28 +1368,35 @@ optimize_namespace (gfc_namespace *ns)\n   in_assoc_list = false;\n   in_omp_workshare = false;\n \n-  gfc_code_walker (&ns->code, simplify_io_impl_do, dummy_expr_callback, NULL);\n-  gfc_code_walker (&ns->code, convert_do_while, dummy_expr_callback, NULL);\n-  gfc_code_walker (&ns->code, convert_elseif, dummy_expr_callback, NULL);\n-  gfc_code_walker (&ns->code, cfe_code, cfe_expr_0, NULL);\n-  gfc_code_walker (&ns->code, optimize_code, optimize_expr, NULL);\n-  if (flag_inline_matmul_limit != 0)\n+  if (flag_frontend_optimize)\n     {\n-      bool found;\n-      do\n+      gfc_code_walker (&ns->code, simplify_io_impl_do, dummy_expr_callback, NULL);\n+      gfc_code_walker (&ns->code, convert_do_while, dummy_expr_callback, NULL);\n+      gfc_code_walker (&ns->code, convert_elseif, dummy_expr_callback, NULL);\n+      gfc_code_walker (&ns->code, cfe_code, cfe_expr_0, NULL);\n+      gfc_code_walker (&ns->code, optimize_code, optimize_expr, NULL);\n+      if (flag_inline_matmul_limit != 0)\n \t{\n-\t  found = false;\n-\t  gfc_code_walker (&ns->code, matmul_to_var_code, matmul_to_var_expr,\n-\t\t\t   (void *) &found);\n-\t}\n-      while (found);\n+\t  bool found;\n+\t  do\n+\t    {\n+\t      found = false;\n+\t      gfc_code_walker (&ns->code, matmul_to_var_code, matmul_to_var_expr,\n+\t\t\t       (void *) &found);\n+\t    }\n+\t  while (found);\n \n-      gfc_code_walker (&ns->code, matmul_temp_args, dummy_expr_callback,\n-\t\t       NULL);\n-      gfc_code_walker (&ns->code, inline_matmul_assign, dummy_expr_callback,\n-\t\t       NULL);\n+\t  gfc_code_walker (&ns->code, matmul_temp_args, dummy_expr_callback,\n+\t\t\t   NULL);\n+\t  gfc_code_walker (&ns->code, inline_matmul_assign, dummy_expr_callback,\n+\t\t\t   NULL);\n+\t}\n     }\n \n+  if (flag_frontend_loop_interchange)\n+    gfc_code_walker (&ns->code, index_interchange, dummy_expr_callback,\n+\t\t     NULL);\n+\n   /* BLOCKs are handled in the expression walker below.  */\n   for (ns = ns->contained; ns; ns = ns->sibling)\n     {\n@@ -4225,6 +4237,170 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n   return 0;\n }\n \n+\n+/* Code for index interchange for loops which are grouped together in DO\n+   CONCURRENT or FORALL statements.  This is currently only applied if the\n+   iterations are grouped together in a single statement.\n+\n+   For this transformation, it is assumed that memory access in strides is\n+   expensive, and that loops which access later indices (which access memory\n+   in bigger strides) should be moved to the first loops.\n+\n+   For this, a loop over all the statements is executed, counting the times\n+   that the loop iteration values are accessed in each index.  The loop\n+   indices are then sorted to minimize access to later indices from inner\n+   loops.  */\n+\n+/* Type for holding index information.  */\n+\n+typedef struct {\n+  gfc_symbol *sym;\n+  gfc_forall_iterator *fa;\n+  int num;\n+  int n[GFC_MAX_DIMENSIONS];\n+} ind_type;\n+\n+/* Callback function to determine if an expression is the \n+   corresponding variable.  */\n+\n+static int\n+has_var (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED, void *data)\n+{\n+  gfc_expr *expr = *e;\n+  gfc_symbol *sym;\n+\n+  if (expr->expr_type != EXPR_VARIABLE)\n+    return 0;\n+\n+  sym = (gfc_symbol *) data;\n+  return sym == expr->symtree->n.sym;\n+}\n+\n+/* Callback function to calculate the cost of a certain index.  */\n+\n+static int\n+index_cost (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t    void *data)\n+{\n+  ind_type *ind;\n+  gfc_expr *expr;\n+  gfc_array_ref *ar;\n+  gfc_ref *ref;\n+  int i,j;\n+\n+  expr = *e;\n+  if (expr->expr_type != EXPR_VARIABLE)\n+    return 0;\n+\n+  ar = NULL;\n+  for (ref = expr->ref; ref; ref = ref->next)\n+    {\n+      if (ref->type == REF_ARRAY)\n+\t{\n+\t  ar = &ref->u.ar;\n+\t  break;\n+\t}\n+    }\n+  if (ar == NULL || ar->type != AR_ELEMENT)\n+    return 0;\n+\n+  ind = (ind_type *) data;\n+  for (i = 0; i < ar->dimen; i++)\n+    {\n+      for (j=0; ind[j].sym != NULL; j++)\n+\t{\n+\t  if (gfc_expr_walker (&ar->start[i], has_var, (void *) (ind[j].sym)))\n+\t      ind[j].n[i]++;\n+\t}\n+    }\n+  return 0;\n+}\n+\n+/* Callback function for qsort, to sort the loop indices. */\n+\n+static int\n+loop_comp (const void *e1, const void *e2)\n+{\n+  const ind_type *i1 = (const ind_type *) e1;\n+  const ind_type *i2 = (const ind_type *) e2;\n+  int i;\n+\n+  for (i=GFC_MAX_DIMENSIONS-1; i >= 0; i--)\n+    {\n+      if (i1->n[i] != i2->n[i])\n+\treturn i1->n[i] - i2->n[i];\n+    }\n+  /* All other things being equal, let's not change the ordering.  */\n+  return i2->num - i1->num;\n+}\n+\n+/* Main function to do the index interchange.  */\n+\n+static int\n+index_interchange (gfc_code **c, int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t  void *data ATTRIBUTE_UNUSED)\n+{\n+  gfc_code *co;\n+  co = *c;\n+  int n_iter;\n+  gfc_forall_iterator *fa;\n+  ind_type *ind;\n+  int i, j;\n+  \n+  if (co->op != EXEC_FORALL && co->op != EXEC_DO_CONCURRENT)\n+    return 0;\n+\n+  n_iter = 0;\n+  for (fa = co->ext.forall_iterator; fa; fa = fa->next)\n+    n_iter ++;\n+\n+  /* Nothing to reorder. */\n+  if (n_iter < 2)\n+    return 0;\n+\n+  ind = XALLOCAVEC (ind_type, n_iter + 1);\n+\n+  i = 0;\n+  for (fa = co->ext.forall_iterator; fa; fa = fa->next)\n+    {\n+      ind[i].sym = fa->var->symtree->n.sym;\n+      ind[i].fa = fa;\n+      for (j=0; j<GFC_MAX_DIMENSIONS; j++)\n+\tind[i].n[j] = 0;\n+      ind[i].num = i;\n+      i++;\n+    }\n+  ind[n_iter].sym = NULL;\n+  ind[n_iter].fa = NULL;\n+\n+  gfc_code_walker (c, gfc_dummy_code_callback, index_cost, (void *) ind);\n+  qsort ((void *) ind, n_iter, sizeof (ind_type), loop_comp);\n+\n+  /* Do the actual index interchange.  */\n+  co->ext.forall_iterator = fa = ind[0].fa;\n+  for (i=1; i<n_iter; i++)\n+    {\n+      fa->next = ind[i].fa;\n+      fa = fa->next;\n+    }\n+  fa->next = NULL;\n+\n+  if (flag_warn_frontend_loop_interchange)\n+    {\n+      for (i=1; i<n_iter; i++)\n+\t{\n+\t  if (ind[i-1].num > ind[i].num)\n+\t    {\n+\t      gfc_warning (OPT_Wfrontend_loop_interchange,\n+\t\t\t   \"Interchanging loops at %L\", &co->loc);\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n #define WALK_SUBEXPR(NODE) \\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\"}, {"sha": "bcb62434931a90e82b11484c6584d6f670974ad9", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=d88412fc5139a0dbecbc8e61a817a088037501f6", "patch": "@@ -149,8 +149,9 @@ and warnings}.\n -Wdo-subscript -Wfunction-elimination -Wimplicit-interface @gol\n -Wimplicit-procedure -Wintrinsic-shadow -Wuse-without-only -Wintrinsics-std @gol\n -Wline-truncation -Wno-align-commons -Wno-tabs -Wreal-q-constant @gol\n--Wsurprising -Wunderflow -Wunused-parameter -Wrealloc-lhs -Wrealloc-lhs-all @gol\n--Wtarget-lifetime -fmax-errors=@var{n} -fsyntax-only -pedantic -pedantic-errors\n+-Wsurprising -Wunderflow -Wunused-parameter -Wrealloc-lhs @gol\n+-Wrealloc-lhs-all -Wfrontend-loop-interchange -Wtarget-lifetime @gol\n+-fmax-errors=@var{n} -fsyntax-only -pedantic -pedantic-errors @gol\n }\n \n @item Debugging Options\n@@ -183,6 +184,7 @@ and warnings}.\n -fbounds-check -fcheck-array-temporaries @gol\n -fcheck=@var{<all|array-temps|bounds|do|mem|pointer|recursion>} @gol\n -fcoarray=@var{<none|single|lib>} -fexternal-blas -ff2c\n+-ffrontend-loop-interchange @gol\n -ffrontend-optimize @gol\n -finit-character=@var{n} -finit-integer=@var{n} -finit-local-zero @gol\n -finit-derived @gol\n@@ -910,6 +912,13 @@ Enables some warning options for usages of language features which\n may be problematic. This currently includes @option{-Wcompare-reals},\n @option{-Wunused-parameter} and @option{-Wdo-subscript}.\n \n+@item -Wfrontend-loop-interchange\n+@opindex @code{Wfrontend-loop-interchange}\n+@cindex warnings, loop interchange\n+@cindex loop interchange, warning\n+Enable warning for loop interchanges performed by the\n+@option{-ffrontend-loop-interchange} option.\n+\n @item -Wimplicit-interface\n @opindex @code{Wimplicit-interface}\n @cindex warnings, implicit interface\n@@ -1782,6 +1791,14 @@ expressions, removing unnecessary calls to @code{TRIM} in comparisons\n and assignments and replacing @code{TRIM(a)} with\n @code{a(1:LEN_TRIM(a))}.  It can be deselected by specifying\n @option{-fno-frontend-optimize}.\n+\n+@item -ffrontend-loop-interchange\n+@opindex @code{frontend-loop-interchange}\n+@cindex loop interchange, Fortran\n+Attempt to interchange loops in the Fortran front end where\n+profitable.  Enabled by default by any @option{-O} option.\n+At the moment, this option only affects @code{FORALL} and\n+@code{DO CONCURRENT} statements with several forall triplets.\n @end table\n \n @xref{Code Gen Options,,Options for Code Generation Conventions,"}, {"sha": "780335f3de767ed5a8921646ded3c50a1d8234e5", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=d88412fc5139a0dbecbc8e61a817a088037501f6", "patch": "@@ -245,6 +245,10 @@ Wextra\n Fortran Warning\n ; Documented in common\n \n+Wfrontend-loop-interchange\n+Fortran Var(flag_warn_frontend_loop_interchange)\n+Warn if loops have been interchanged.\n+\n Wfunction-elimination\n Fortran Warning Var(warn_function_elimination)\n Warn about function call elimination.\n@@ -548,6 +552,10 @@ ffree-line-length-\n Fortran RejectNegative Joined UInteger Var(flag_free_line_length) Init(132)\n -ffree-line-length-<n>\tUse n as character line width in free mode.\n \n+ffrontend-loop-interchange\n+Fortran Var(flag_frontend_loop_interchange) Init(-1)\n+Try to interchange loops if profitable.\n+\n ffrontend-optimize\n Fortran Var(flag_frontend_optimize) Init(-1)\n Enable front end optimization."}, {"sha": "0ee6b7808d97aaae479646dd14df15dcaa5bc4d5", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=d88412fc5139a0dbecbc8e61a817a088037501f6", "patch": "@@ -417,6 +417,11 @@ gfc_post_options (const char **pfilename)\n   if (flag_frontend_optimize == -1)\n     flag_frontend_optimize = optimize;\n \n+  /* Same for front end loop interchange.  */\n+\n+  if (flag_frontend_loop_interchange == -1)\n+    flag_frontend_loop_interchange = optimize;\n+\n   if (flag_max_array_constructor < 65535)\n     flag_max_array_constructor = 65535;\n "}, {"sha": "e739cac7572e9f173cca6e5e2bb55a770b19a8af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d88412fc5139a0dbecbc8e61a817a088037501f6", "patch": "@@ -1,3 +1,8 @@\n+2017-11-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/82471\n+\t* gfortran.dg/loop_interchange_1.f90: New test.\n+\n 2017-11-05  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/78641"}, {"sha": "a061e28b35ad2a9a820968cb91d4b5387c5173fe", "filename": "gcc/testsuite/gfortran.dg/loop_interchange_1.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ftestsuite%2Fgfortran.dg%2Floop_interchange_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88412fc5139a0dbecbc8e61a817a088037501f6/gcc%2Ftestsuite%2Fgfortran.dg%2Floop_interchange_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Floop_interchange_1.f90?ref=d88412fc5139a0dbecbc8e61a817a088037501f6", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-O -Wfrontend-loop-interchange\" }\n+PROGRAM TEST_DO_SPEED\n+  IMPLICIT NONE\n+\n+  REAL, ALLOCATABLE :: A(:,:,:), B(:,:,:), C(:,:,:)\n+  REAL :: TIC\n+  INTEGER :: T0, T1, T2\n+  INTEGER :: I, J, K\n+  INTEGER, PARAMETER :: L = 512, M = 512, N = 512\n+\n+  ALLOCATE( A(L,M,N), B(L,M,N), C(L,M,N) )\n+  CALL RANDOM_NUMBER(A)\n+  CALL RANDOM_NUMBER(B)\n+\n+  CALL SYSTEM_CLOCK( T0, TIC)\n+\n+  DO CONCURRENT( K=1:N, J=1:M, I=1:L) ! { dg-warning \"Interchanging loops\" }\n+    C(I,J,K) = A(I,J,K) +B(I,J,K)\n+  END DO\n+END\n+"}]}