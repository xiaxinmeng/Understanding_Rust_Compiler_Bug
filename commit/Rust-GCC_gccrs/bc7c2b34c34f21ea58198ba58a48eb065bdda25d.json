{"sha": "bc7c2b34c34f21ea58198ba58a48eb065bdda25d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM3YzJiMzRjMzRmMjFlYTU4MTk4YmE1OGE0OGViMDY1YmRkYTI1ZA==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-01-22T08:29:09Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-02-02T08:56:06Z"}, "message": "PR target/98743: Fix ICE in convert_move for RISC-V\n\n - Check `from` mode is not BLMmode before call store_expr, calling store_expr\n   with BLKmode will cause ICE.\n\n - Verified with riscv64, x86_64 and aarch64, no introduce new regression.\n\nNote: Those logic was introduced by 3e60ddeb8220ed388819bb3f14e8caa9309fd3c2,\n      so I cc Jakub for reivew.\n\nChanges for V2:\n\n - Checking mode of `from` rather than mode of `to`.\n - Verified on riscv64, x86_64 and aarch64 again.\n\ngcc/ChangeLog:\n\n\tPR target/98743\n\t* expr.c: Check mode before calling store_expr.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/98743\n\t* g++.dg/opt/pr98743.C: New.", "tree": {"sha": "1e790669a1a090b73234f5eae23f5b1494af6baa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e790669a1a090b73234f5eae23f5b1494af6baa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc7c2b34c34f21ea58198ba58a48eb065bdda25d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7c2b34c34f21ea58198ba58a48eb065bdda25d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc7c2b34c34f21ea58198ba58a48eb065bdda25d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7c2b34c34f21ea58198ba58a48eb065bdda25d/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "250fd9fb118a6897e6c824a0faac634861ea7716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/250fd9fb118a6897e6c824a0faac634861ea7716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/250fd9fb118a6897e6c824a0faac634861ea7716"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "86dc1b6c97349fd35126ecbaa217d6cc769c7d66", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7c2b34c34f21ea58198ba58a48eb065bdda25d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7c2b34c34f21ea58198ba58a48eb065bdda25d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=bc7c2b34c34f21ea58198ba58a48eb065bdda25d", "patch": "@@ -5459,6 +5459,7 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \t      /* If to_rtx is a promoted subreg, we need to zero or sign\n \t\t extend the value afterwards.  */\n \t      if (TREE_CODE (to) == MEM_REF\n+\t\t  && TYPE_MODE (TREE_TYPE (from)) != BLKmode\n \t\t  && !REF_REVERSE_STORAGE_ORDER (to)\n \t\t  && known_eq (bitpos, 0)\n \t\t  && known_eq (bitsize, GET_MODE_BITSIZE (GET_MODE (to_rtx))))"}, {"sha": "41f476fbe8e93609f8c895d435353919c286d9a8", "filename": "gcc/testsuite/g++.dg/opt/pr98743.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7c2b34c34f21ea58198ba58a48eb065bdda25d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr98743.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7c2b34c34f21ea58198ba58a48eb065bdda25d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr98743.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr98743.C?ref=bc7c2b34c34f21ea58198ba58a48eb065bdda25d", "patch": "@@ -0,0 +1,27 @@\n+// Test for value-initialization via {}\n+// { dg-do run { target c++11 } }\n+/* { dg-options \"-Og -fno-early-inlining -finline-small-functions -fpack-struct\" */\n+void * operator new (__SIZE_TYPE__, void *p) { return p; }\n+void * operator new[] (__SIZE_TYPE__, void *p) { return p; }\n+\n+// Empty base so A isn't an aggregate\n+struct B {};\n+struct A: B {\n+  int i;\n+};\n+\n+struct C: A {\n+  C(): A{} {}\n+};\n+\n+int main()\n+{\n+  int space = 42;\n+  A* ap = new (&space) A{};\n+  int space1[1] = { 42 };\n+  A* a1p = new (space1) A[1]{};\n+  if (ap->i != 0 ||\n+      a1p[0].i != 0)\n+    return 1;\n+  return 0;\n+}"}]}