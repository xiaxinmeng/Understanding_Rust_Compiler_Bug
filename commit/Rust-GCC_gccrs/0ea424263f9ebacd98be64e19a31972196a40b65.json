{"sha": "0ea424263f9ebacd98be64e19a31972196a40b65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVhNDI0MjYzZjllYmFjZDk4YmU2NGUxOWEzMTk3MjE5NmE0MGI2NQ==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2015-08-05T07:58:54Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2015-08-05T07:58:54Z"}, "message": "Merge SSE and AVX ptest patterns.\n\ngcc/\n\t* config/i386/i386.c (bdesc_args): Rename CODE_FOR_sse4_1_ptest into\n\tCODE_FOR_sse4_1_ptestv2di and CODE_FOR_avx_vtestps256 into\n\tCODE_FOR_avx_ptestv4di.\n\t* config/i386/sse.md (define_mode_iterator V_AVX): New.\n\t(define_mode_attr sse4_1): Extend to other 128/256-bit modes.\n\t(define_insn \"avx_ptest256\"): Merge this ...\n\t(define_insn \"sse4_1_ptest\"): And this ...\n\t(define_insn \"<sse4_1>_ptest<mode>\"): Into this. Use V_AVX iterator.\n\nFrom-SVN: r226611", "tree": {"sha": "2b7b9572e37439040c91b437ef501d5ed5758fa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b7b9572e37439040c91b437ef501d5ed5758fa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ea424263f9ebacd98be64e19a31972196a40b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea424263f9ebacd98be64e19a31972196a40b65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea424263f9ebacd98be64e19a31972196a40b65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea424263f9ebacd98be64e19a31972196a40b65/comments", "author": null, "committer": null, "parents": [{"sha": "97af59b2a431dd25e40d19eba669a62814bf7b7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97af59b2a431dd25e40d19eba669a62814bf7b7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97af59b2a431dd25e40d19eba669a62814bf7b7a"}], "stats": {"total": 64, "additions": 39, "deletions": 25}, "files": [{"sha": "74fd97b1fd7dbdafdb326b5eb67762ea3e6b3003", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea424263f9ebacd98be64e19a31972196a40b65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea424263f9ebacd98be64e19a31972196a40b65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ea424263f9ebacd98be64e19a31972196a40b65", "patch": "@@ -1,3 +1,14 @@\n+2015-08-05  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* config/i386/i386.c (bdesc_args): Rename CODE_FOR_sse4_1_ptest into\n+\tCODE_FOR_sse4_1_ptestv2di and CODE_FOR_avx_vtestps256 into\n+\tCODE_FOR_avx_ptestv4di.\n+\t* config/i386/sse.md (define_mode_iterator V_AVX): New.\n+\t(define_mode_attr sse4_1): Extend to other 128/256-bit modes.\n+\t(define_insn \"avx_ptest256\"): Merge this ...\n+\t(define_insn \"sse4_1_ptest\"): And this ...\n+\t(define_insn \"<sse4_1>_ptest<mode>\"): Into this. Use V_AVX iterator.\n+\n 2015-08-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/67109"}, {"sha": "0b785d8946b0617ece0ede808a42559c61234fff", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea424263f9ebacd98be64e19a31972196a40b65/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea424263f9ebacd98be64e19a31972196a40b65/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0ea424263f9ebacd98be64e19a31972196a40b65", "patch": "@@ -31734,9 +31734,9 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_roundv4sf2, \"__builtin_ia32_roundps_az\", IX86_BUILTIN_ROUNDPS_AZ, UNKNOWN, (int) V4SF_FTYPE_V4SF },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_roundv4sf2_sfix, \"__builtin_ia32_roundps_az_sfix\", IX86_BUILTIN_ROUNDPS_AZ_SFIX, UNKNOWN, (int) V4SI_FTYPE_V4SF },\n \n-  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptest, \"__builtin_ia32_ptestz128\", IX86_BUILTIN_PTESTZ, EQ, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n-  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptest, \"__builtin_ia32_ptestc128\", IX86_BUILTIN_PTESTC, LTU, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n-  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptest, \"__builtin_ia32_ptestnzc128\", IX86_BUILTIN_PTESTNZC, GTU, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptestv2di, \"__builtin_ia32_ptestz128\", IX86_BUILTIN_PTESTZ, EQ, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptestv2di, \"__builtin_ia32_ptestc128\", IX86_BUILTIN_PTESTC, LTU, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptestv2di, \"__builtin_ia32_ptestnzc128\", IX86_BUILTIN_PTESTNZC, GTU, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n \n   /* SSE4.2 */\n   { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_gtv2di3, \"__builtin_ia32_pcmpgtq\", IX86_BUILTIN_PCMPGTQ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n@@ -31892,9 +31892,9 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vtestps256, \"__builtin_ia32_vtestzps256\", IX86_BUILTIN_VTESTZPS256, EQ, (int) INT_FTYPE_V8SF_V8SF_PTEST },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vtestps256, \"__builtin_ia32_vtestcps256\", IX86_BUILTIN_VTESTCPS256, LTU, (int) INT_FTYPE_V8SF_V8SF_PTEST },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_vtestps256, \"__builtin_ia32_vtestnzcps256\", IX86_BUILTIN_VTESTNZCPS256, GTU, (int) INT_FTYPE_V8SF_V8SF_PTEST },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_ptest256, \"__builtin_ia32_ptestz256\", IX86_BUILTIN_PTESTZ256, EQ, (int) INT_FTYPE_V4DI_V4DI_PTEST },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_ptest256, \"__builtin_ia32_ptestc256\", IX86_BUILTIN_PTESTC256, LTU, (int) INT_FTYPE_V4DI_V4DI_PTEST },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_ptest256, \"__builtin_ia32_ptestnzc256\", IX86_BUILTIN_PTESTNZC256, GTU, (int) INT_FTYPE_V4DI_V4DI_PTEST },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_ptestv4di, \"__builtin_ia32_ptestz256\", IX86_BUILTIN_PTESTZ256, EQ, (int) INT_FTYPE_V4DI_V4DI_PTEST },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_ptestv4di, \"__builtin_ia32_ptestc256\", IX86_BUILTIN_PTESTC256, LTU, (int) INT_FTYPE_V4DI_V4DI_PTEST },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_ptestv4di, \"__builtin_ia32_ptestnzc256\", IX86_BUILTIN_PTESTNZC256, GTU, (int) INT_FTYPE_V4DI_V4DI_PTEST },\n \n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_movmskpd256, \"__builtin_ia32_movmskpd256\", IX86_BUILTIN_MOVMSKPD256, UNKNOWN, (int) INT_FTYPE_V4DF  },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_movmskps256, \"__builtin_ia32_movmskps256\", IX86_BUILTIN_MOVMSKPS256, UNKNOWN, (int) INT_FTYPE_V8SF },"}, {"sha": "0ffc27dfacbfac45e733b21ed41df40386d9e68a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea424263f9ebacd98be64e19a31972196a40b65/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea424263f9ebacd98be64e19a31972196a40b65/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=0ea424263f9ebacd98be64e19a31972196a40b65", "patch": "@@ -299,6 +299,12 @@\n    V8DI (V4DI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")])\n \n ;; All DImode vector integer modes\n+(define_mode_iterator V_AVX\n+  [V16QI V8HI V4SI V2DI V4SF V2DF\n+   (V32QI \"TARGET_AVX\") (V16HI \"TARGET_AVX\")\n+   (V8SI \"TARGET_AVX\") (V4DI \"TARGET_AVX\")\n+   (V8SF \"TARGET_AVX\") (V4DF\"TARGET_AVX\")])\n+\n (define_mode_iterator VI8\n   [(V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\") V2DI])\n \n@@ -566,7 +572,11 @@\n (define_mode_attr sse4_1\n   [(V4SF \"sse4_1\") (V2DF \"sse4_1\")\n    (V8SF \"avx\") (V4DF \"avx\")\n-   (V8DF \"avx512f\")])\n+   (V8DF \"avx512f\")\n+   (V4DI \"avx\") (V2DI \"sse4_1\")\n+   (V8SI \"avx\") (V4SI \"sse4_1\")\n+   (V16QI \"sse4_1\") (V32QI \"avx\")\n+   (V8HI \"sse4_1\") (V16HI \"avx\")])\n \n (define_mode_attr avxsizesuffix\n   [(V64QI \"512\") (V32HI \"512\") (V16SI \"512\") (V8DI \"512\")\n@@ -14640,30 +14650,23 @@\n \n ;; ptest is very similar to comiss and ucomiss when setting FLAGS_REG.\n ;; But it is not a really compare instruction.\n-(define_insn \"avx_ptest256\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(unspec:CC [(match_operand:V4DI 0 \"register_operand\" \"x\")\n-\t\t    (match_operand:V4DI 1 \"nonimmediate_operand\" \"xm\")]\n-\t\t   UNSPEC_PTEST))]\n-  \"TARGET_AVX\"\n-  \"vptest\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecomi\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"btver2_decode\" \"vector\")\n-   (set_attr \"mode\" \"OI\")])\n-\n-(define_insn \"sse4_1_ptest\"\n+(define_insn \"<sse4_1>_ptest<mode>\"\n   [(set (reg:CC FLAGS_REG)\n-\t(unspec:CC [(match_operand:V2DI 0 \"register_operand\" \"Yr,*x\")\n-\t\t    (match_operand:V2DI 1 \"nonimmediate_operand\" \"Yrm,*xm\")]\n+\t(unspec:CC [(match_operand:V_AVX 0 \"register_operand\" \"Yr, *x, x\")\n+\t\t    (match_operand:V_AVX 1 \"nonimmediate_operand\" \"Yrm, *xm, xm\")]\n \t\t   UNSPEC_PTEST))]\n   \"TARGET_SSE4_1\"\n   \"%vptest\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecomi\")\n+  [(set_attr \"isa\" \"*,*,avx\")\n+   (set_attr \"type\" \"ssecomi\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"TI\")])\n+   (set (attr \"btver2_decode\")\n+     (if_then_else\n+       (match_test \"<sseinsnmode>mode==OImode\")\n+     (const_string \"vector\")\n+     (const_string \"*\")))\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<sse4_1>_round<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x\")"}]}