{"sha": "9c49362f039750b5ea63a32c3e403bd9865a3738", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM0OTM2MmYwMzk3NTBiNWVhNjNhMzJjM2U0MDNiZDk4NjVhMzczOA==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2016-03-30T07:47:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-03-30T07:47:40Z"}, "message": "re PR middle-end/12392 (very long optimized compile)\n\n2016-03-30  Michael Matz  <matz@suse.de>\n\tRichard Biener  <rguenther@suse.de>\n\n\tPR ipa/12392\n\t* ipa-polymorphic-call.c (struct type_change_info): Change\n\tspeculative to an unsigned allowing to limit the work we do.\n\t(csftc_abort_walking_p): New inline function..\n\t(check_stmt_for_type_change): Limit the number of may-defs\n\tskipped for speculative devirtualization to\n\tmax-speculative-devirt-maydefs.\n\t* params.def (max-speculative-devirt-maydefs): New param.\n\t* doc/invoke.texi (--param max-speculative-devirt-maydefs): Document.\n\nCo-Authored-By: Richard Biener <rguenther@suse.de>\n\nFrom-SVN: r234546", "tree": {"sha": "5dd64bc5ae9caf164ad4a275a4e6b6fbc63d9faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dd64bc5ae9caf164ad4a275a4e6b6fbc63d9faf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c49362f039750b5ea63a32c3e403bd9865a3738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c49362f039750b5ea63a32c3e403bd9865a3738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c49362f039750b5ea63a32c3e403bd9865a3738", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c49362f039750b5ea63a32c3e403bd9865a3738/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff734e26c2a4efbba465f206e4a7c282a33a2b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff734e26c2a4efbba465f206e4a7c282a33a2b59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff734e26c2a4efbba465f206e4a7c282a33a2b59"}], "stats": {"total": 65, "additions": 52, "deletions": 13}, "files": [{"sha": "f09c0a0263881fc0668375b5cea1ce5c362b09b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c49362f039750b5ea63a32c3e403bd9865a3738/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c49362f039750b5ea63a32c3e403bd9865a3738/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c49362f039750b5ea63a32c3e403bd9865a3738", "patch": "@@ -1,3 +1,16 @@\n+2016-03-30  Michael Matz  <matz@suse.de>\n+\tRichard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/12392\n+\t* ipa-polymorphic-call.c (struct type_change_info): Change\n+\tspeculative to an unsigned allowing to limit the work we do.\n+\t(csftc_abort_walking_p): New inline function..\n+\t(check_stmt_for_type_change): Limit the number of may-defs\n+\tskipped for speculative devirtualization to\n+\tmax-speculative-devirt-maydefs.\n+\t* params.def (max-speculative-devirt-maydefs): New param.\n+\t* doc/invoke.texi (--param max-speculative-devirt-maydefs): Document.\n+\n 2016-03-30  Mike Stump  <mrs@gcc.gnu.org>\n \n \tPR target/63890"}, {"sha": "e9763d44d8d7aa6a64821a4b1811e55025aaaa4e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c49362f039750b5ea63a32c3e403bd9865a3738/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c49362f039750b5ea63a32c3e403bd9865a3738/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9c49362f039750b5ea63a32c3e403bd9865a3738", "patch": "@@ -9601,6 +9601,11 @@ Enable emission of special debug stores within HSA kernels which are\n then read and reported by libgomp plugin.  Generation of these stores\n is disabled by default, use @option{--param hsa-gen-debug-stores=1} to\n enable it.\n+\n+@item max-speculative-devirt-maydefs\n+The maximum number of may-defs we analyze when looking for a must-def\n+specifying the dynamic type of an object that invokes a virtual call\n+we may be able to devirtualize speculatively.\n @end table\n @end table\n "}, {"sha": "0ebbd4ae66da5ab9f02afb87e8c2f40af63d2226", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c49362f039750b5ea63a32c3e403bd9865a3738/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c49362f039750b5ea63a32c3e403bd9865a3738/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=9c49362f039750b5ea63a32c3e403bd9865a3738", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-dfa.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-into-ssa.h\"\n+#include \"params.h\"\n \n /* Return true when TYPE contains an polymorphic type and thus is interesting\n    for devirtualization machinery.  */\n@@ -1094,14 +1095,15 @@ struct type_change_info\n   tree known_current_type;\n   HOST_WIDE_INT known_current_offset;\n \n+  /* Set to nonzero if we possibly missed some dynamic type changes and we\n+     should consider the set to be speculative.  */\n+  unsigned speculative;\n+\n   /* Set to true if dynamic type change has been detected.  */\n   bool type_maybe_changed;\n   /* Set to true if multiple types have been encountered.  known_current_type\n      must be disregarded in that case.  */\n   bool multiple_types_encountered;\n-  /* Set to true if we possibly missed some dynamic type changes and we should\n-     consider the set to be speculative.  */\n-  bool speculative;\n   bool seen_unanalyzed_store;\n };\n \n@@ -1338,6 +1340,19 @@ record_known_type (struct type_change_info *tci, tree type, HOST_WIDE_INT offset\n   tci->type_maybe_changed = true;\n }\n \n+\n+/* The maximum number of may-defs we visit when looking for a must-def\n+   that changes the dynamic type in check_stmt_for_type_change.  Tuned\n+   after the PR12392 testcase which unlimited spends 40% time within\n+   these alias walks and 8% with the following limit.  */\n+\n+static inline bool\n+csftc_abort_walking_p (unsigned speculative)\n+{\n+  unsigned max = PARAM_VALUE (PARAM_MAX_SPECULATIVE_DEVIRT_MAYDEFS);\n+  return speculative > max ? true : false;\n+}\n+\n /* Callback of walk_aliased_vdefs and a helper function for\n    detect_type_change to check whether a particular statement may modify\n    the virtual table pointer, and if possible also determine the new type of\n@@ -1384,15 +1399,15 @@ check_stmt_for_type_change (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef, void *data)\n \t\t\t\t\t  &size, &max_size, &reverse);\n \t    if (size != max_size || max_size == -1)\n \t      {\n-                tci->speculative = true;\n-\t        return false;\n+                tci->speculative++;\n+\t        return csftc_abort_walking_p (tci->speculative);\n \t      }\n \t    if (op && TREE_CODE (op) == MEM_REF)\n \t      {\n \t\tif (!tree_fits_shwi_p (TREE_OPERAND (op, 1)))\n \t\t  {\n-                    tci->speculative = true;\n-\t\t    return false;\n+                    tci->speculative++;\n+\t\t    return csftc_abort_walking_p (tci->speculative);\n \t\t  }\n \t\toffset += tree_to_shwi (TREE_OPERAND (op, 1))\n \t\t\t  * BITS_PER_UNIT;\n@@ -1402,8 +1417,8 @@ check_stmt_for_type_change (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef, void *data)\n \t      ;\n \t    else\n \t      {\n-                tci->speculative = true;\n-\t        return false;\n+                tci->speculative++;\n+\t        return csftc_abort_walking_p (tci->speculative);\n \t      }\n \t    op = walk_ssa_copies (op);\n \t  }\n@@ -1438,8 +1453,8 @@ check_stmt_for_type_change (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef, void *data)\n           fprintf (dump_file, \"  Function call may change dynamic type:\");\n \t  print_gimple_stmt (dump_file, stmt, 0, 0);\n \t}\n-     tci->speculative = true;\n-     return false;\n+     tci->speculative++;\n+     return csftc_abort_walking_p (tci->speculative);\n    }\n   /* Check for inlined virtual table store.  */\n   else if (noncall_stmt_may_be_vtbl_ptr_store (stmt))\n@@ -1461,7 +1476,7 @@ check_stmt_for_type_change (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef, void *data)\n \t  if (dump_file)\n \t    fprintf (dump_file, \"  Unanalyzed store may change type.\\n\");\n \t  tci->seen_unanalyzed_store = true;\n-\t  tci->speculative = true;\n+\t  tci->speculative++;\n \t}\n       else\n         record_known_type (tci, type, offset);\n@@ -1646,7 +1661,7 @@ ipa_polymorphic_call_context::get_dynamic_type (tree instance,\n   tci.otr_type = otr_type;\n   tci.type_maybe_changed = false;\n   tci.multiple_types_encountered = false;\n-  tci.speculative = false;\n+  tci.speculative = 0;\n   tci.seen_unanalyzed_store = false;\n \n   walk_aliased_vdefs (&ao, gimple_vuse (stmt), check_stmt_for_type_change,"}, {"sha": "dbff305b7f40a2ff36170785a1097757e6a76dd0", "filename": "gcc/params.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c49362f039750b5ea63a32c3e403bd9865a3738/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c49362f039750b5ea63a32c3e403bd9865a3738/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=9c49362f039750b5ea63a32c3e403bd9865a3738", "patch": "@@ -1203,6 +1203,12 @@ DEFPARAM (PARAM_HSA_GEN_DEBUG_STORES,\n \t  \"hsa-gen-debug-stores\",\n \t  \"Level of hsa debug stores verbosity\",\n \t  0, 0, 1)\n+\n+DEFPARAM (PARAM_MAX_SPECULATIVE_DEVIRT_MAYDEFS,\n+\t  \"max-speculative-devirt-maydefs\",\n+\t  \"Maximum number of may-defs visited when devirtualizing \"\n+\t  \"speculatively\", 50, 0, 0)\n+\n /*\n \n Local variables:"}]}