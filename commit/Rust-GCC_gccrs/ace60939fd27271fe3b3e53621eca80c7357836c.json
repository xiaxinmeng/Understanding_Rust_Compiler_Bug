{"sha": "ace60939fd27271fe3b3e53621eca80c7357836c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNlNjA5MzlmZDI3MjcxZmUzYjNlNTM2MjFlY2E4MGM3MzU3ODM2Yw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-06-29T17:19:06Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2020-06-29T20:19:01Z"}, "message": "rs6000: Documentation updates for \"future\" rename\n\n2020-06-29  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\t* doc/extend.texi: Change references to \"future architecture\" to\n\t\"ISA 3.1\", \"-mcpu=future\" to \"-mcpu=power10\", and remove vaguer\n\treferences to \"future\" (because the future is now).", "tree": {"sha": "12592f52105456ec5ec3e0752a016cb96d5b9dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12592f52105456ec5ec3e0752a016cb96d5b9dec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ace60939fd27271fe3b3e53621eca80c7357836c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace60939fd27271fe3b3e53621eca80c7357836c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace60939fd27271fe3b3e53621eca80c7357836c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace60939fd27271fe3b3e53621eca80c7357836c/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d161c4b30ef8fbcf331b90feec74087bfabe0e71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d161c4b30ef8fbcf331b90feec74087bfabe0e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d161c4b30ef8fbcf331b90feec74087bfabe0e71"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "5a57c1c49c56d9fcc59639be4b5878580259fece", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 29, "deletions": 33, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace60939fd27271fe3b3e53621eca80c7357836c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace60939fd27271fe3b3e53621eca80c7357836c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ace60939fd27271fe3b3e53621eca80c7357836c", "patch": "@@ -17091,7 +17091,7 @@ implementing assertions.\n * Basic PowerPC Built-in Functions Available on ISA 2.06::\n * Basic PowerPC Built-in Functions Available on ISA 2.07::\n * Basic PowerPC Built-in Functions Available on ISA 3.0::\n-* Basic PowerPC Built-in Functions Available for a Future Architecture::\n+* Basic PowerPC Built-in Functions Available on ISA 3.1::\n @end menu\n \n This section describes PowerPC built-in functions that do not require\n@@ -17651,25 +17651,23 @@ the FPSCR.  The instruction is a lower latency version of the @code{mffs}\n instruction.  If the @code{mffsl} instruction is not available, then the\n builtin uses the older @code{mffs} instruction to read the FPSCR.\n \n-@node Basic PowerPC Built-in Functions Available for a Future Architecture\n-@subsubsection Basic PowerPC Built-in Functions Available for a Future Architecture\n+@node Basic PowerPC Built-in Functions Available on ISA 3.1\n+@subsubsection Basic PowerPC Built-in Functions Available on ISA 3.1\n \n The basic built-in functions described in this section are\n-available on the PowerPC family of processors starting with a\n-hypothetical CPU which may or may not be available in the future, as\n-requested by specifying @option{-mcpu=future} on the command line.\n-Unless explicitly disabled on the command line,\n-specifying @option{-mcpu=future} has the effect of enabling all the\n-same options as for @option{-mcpu=power9}.\n+available on the PowerPC family of processors starting with ISA 3.1.\n+Unless specific options are explicitly disabled on the\n+command line, specifying option @option{-mcpu=power10} has the effect of\n+enabling all the same options as for @option{-mcpu=power9}.\n \n The following built-in functions are available on Linux 64-bit systems\n-that use a future architecture instruction set (@option{-mcpu=future}):\n+that use a future architecture instruction set (@option{-mcpu=power10}):\n \n @smallexample\n @exdent unsigned long long int\n @exdent __builtin_cfuged (unsigned long long int, unsigned long long int)\n @end smallexample\n-Perform a 64-bit centrifuge operation, as if implemented by the Future\n+Perform a 64-bit centrifuge operation, as if implemented by the\n @code{cfuged} instruction.\n @findex __builtin_cfuged\n \n@@ -17678,31 +17676,31 @@ Perform a 64-bit centrifuge operation, as if implemented by the Future\n @exdent __builtin_cntlzdm (unsigned long long int, unsigned long long int)\n @end smallexample\n Perform a 64-bit count leading zeros operation under mask, as if\n-implemented by the future @code{cntlzdm} instruction.\n+implemented by the @code{cntlzdm} instruction.\n @findex __builtin_cntlzdm\n \n @smallexample\n @exdent unsigned long long int\n @exdent __builtin_cnttzdm (unsigned long long int, unsigned long long int)\n @end smallexample\n Perform a 64-bit count trailing zeros operation under mask, as if\n-implemented by the future @code{cnttzdm} instruction.\n+implemented by the @code{cnttzdm} instruction.\n @findex __builtin_cnttzdm\n \n @smallexample\n @exdent unsigned long long int\n @exdent __builtin_pdepd (unsigned long long int, unsigned long long int)\n @end smallexample\n Perform a 64-bit parallel bits deposit operation, as if implemented by the\n-Future @code{pdepd} instruction.\n+@code{pdepd} instruction.\n @findex __builtin_pdepd\n \n @smallexample\n @exdent unsigned long long int\n @exdent __builtin_pextd (unsigned long long int, unsigned long long int)\n @end smallexample\n Perform a 64-bit parallel bits extract operation, as if implemented by the\n-Future @code{pextd} instruction.\n+@code{pextd} instruction.\n @findex __builtin_pextd\n \n @node PowerPC AltiVec/VSX Built-in Functions\n@@ -17816,7 +17814,7 @@ briefly described below.\n * PowerPC AltiVec Built-in Functions Available on ISA 2.06::\n * PowerPC AltiVec Built-in Functions Available on ISA 2.07::\n * PowerPC AltiVec Built-in Functions Available on ISA 3.0::\n-* PowerPC AltiVec Built-in Functions Available for a Future Architecture::\n+* PowerPC AltiVec Built-in Functions Available on ISA 3.1::\n @end menu\n \n @node PowerPC AltiVec Built-in Functions on ISA 2.05\n@@ -20860,20 +20858,18 @@ void vec_xst (vector unsigned char, int, vector unsigned char *);\n void vec_xst (vector unsigned char, int, unsigned char *);\n @end smallexample\n \n-@node PowerPC AltiVec Built-in Functions Available for a Future Architecture\n-@subsubsection PowerPC AltiVec Built-in Functions Available for a Future Architecture\n+@node PowerPC AltiVec Built-in Functions Available on ISA 3.1\n+@subsubsection PowerPC AltiVec Built-in Functions Available on ISA 3.1\n \n The following additional built-in functions are also available for the\n-PowerPC family of processors, starting with a hypothetical CPU\n-which may or may not be available in the future\n-(@option{-mcpu=future}) or later:\n+PowerPC family of processors, starting with ISA 3.1 (@option{-mcpu=power10}):\n \n \n @smallexample\n @exdent vector unsigned long long int\n @exdent vec_cfuge (vector unsigned long long int, vector unsigned long long int)\n @end smallexample\n-Perform a vector centrifuge operation, as if implemented by the Future\n+Perform a vector centrifuge operation, as if implemented by the\n @code{vcfuged} instruction.\n @findex vec_cfuge\n \n@@ -20882,15 +20878,15 @@ Perform a vector centrifuge operation, as if implemented by the Future\n @exdent vec_cntlzm (vector unsigned long long int, vector unsigned long long int)\n @end smallexample\n Perform a vector count leading zeros under bit mask operation, as if\n-implemented by the Future @code{vclzdm} instruction.\n+implemented by the @code{vclzdm} instruction.\n @findex vec_cntlzm\n \n @smallexample\n @exdent vector unsigned long long int\n @exdent vec_cnttzm (vector unsigned long long int, vector unsigned long long int)\n @end smallexample\n Perform a vector count trailing zeros under bit mask operation, as if\n-implemented by the Future @code{vctzdm} instruction.\n+implemented by the @code{vctzdm} instruction.\n @findex vec_cnttzm\n \n @smallexample\n@@ -20921,7 +20917,7 @@ value of @code{n} that is greater than 16 is treated as if it equaled 16.\n @exdent vector unsigned long long int\n @exdent vec_gnb (vector unsigned __int128, const unsigned char)\n @end smallexample\n-Perform a 128-bit vector gather  operation, as if implemented by the Future\n+Perform a 128-bit vector gather  operation, as if implemented by the\n @code{vgnb} instruction.  The second argument must be a literal\n integer value between 2 and 7 inclusive.\n @findex vec_gnb\n@@ -20939,10 +20935,10 @@ integer value between 2 and 7 inclusive.\n Extract a single element from the vector formed by catenating this function's\n first two arguments at the byte offset specified by this function's\n third argument.  On big-endian targets, this function behaves as if\n-implemented by the Future @code{vextdubvlx}, @code{vextduhvlx},\n+implemented by the @code{vextdubvlx}, @code{vextduhvlx},\n @code{vextduwvlx}, or @code{vextddvlx} instructions, depending on the\n types of the function's first two arguments.  On little-endian\n-targets, this function behaves as if implemented by the Future\n+targets, this function behaves as if implemented by the\n @code{vextdubvrx}, @code{vextduhvrx},\n @code{vextduwvrx}, or @code{vextddvrx} instructions.\n The byte offset of the element to be extracted is calculated\n@@ -20966,12 +20962,12 @@ Extract a single element from the vector formed by catenating this function's\n first two arguments at the byte offset calculated by subtracting this\n function's third argument from 31.  On big-endian targets, this\n function behaves as if\n-implemented by the Future\n+implemented by the\n @code{vextdubvrx}, @code{vextduhvrx},\n @code{vextduwvrx}, or @code{vextddvrx} instructions, depending on the\n types of the function's first two arguments.\n On little-endian\n-targets, this function behaves as if implemented by the Future\n+targets, this function behaves as if implemented by the\n @code{vextdubvlx}, @code{vextduhvlx},\n @code{vextduwvlx}, or @code{vextddvlx} instructions.\n The byte offset of the element to be extracted, measured from the\n@@ -20987,15 +20983,15 @@ result is undefined.\n @exdent vec_pdep (vector unsigned long long int, vector unsigned long long int)\n @end smallexample\n Perform a vector parallel bits deposit operation, as if implemented by\n-the Future @code{vpdepd} instruction.\n+the @code{vpdepd} instruction.\n @findex vec_pdep\n \n @smallexample\n @exdent vector unsigned long long int\n @exdent vec_pext (vector unsigned long long int, vector unsigned long long int)\n @end smallexample\n Perform a vector parallel bit extract operation, as if implemented by\n-the Future @code{vpextd} instruction.\n+the @code{vpextd} instruction.\n @findex vec_pext\n \n @smallexample\n@@ -21072,7 +21068,7 @@ zero element if the same argument is also passed to @code{vec_strir}.\n             vector unsigned __int128, const unsigned int)\n @end smallexample\n Perform a 128-bit vector evaluate operation, as if implemented by the\n-Future @code{xxeval} instruction.  The fourth argument must be a literal\n+@code{xxeval} instruction.  The fourth argument must be a literal\n integer value between 0 and 255 inclusive.\n @findex vec_ternarylogic\n \n@@ -21083,7 +21079,7 @@ integer value between 0 and 255 inclusive.\n @exdent vector unsigned int vec_genpcvm (vector unsigned long long int,\n                                          const int)\n @end smallexample\n-Generate PCV from specified Mask size, as if implemented by the Future\n+Generate PCV from specified Mask size, as if implemented by the\n @code{xxgenpcvbm}, @code{xxgenpcvhm}, @code{xxgenpcvwm} instructions, where\n immediate value is either 0, 1, 2 or 3.\n @findex vec_genpcvm"}]}