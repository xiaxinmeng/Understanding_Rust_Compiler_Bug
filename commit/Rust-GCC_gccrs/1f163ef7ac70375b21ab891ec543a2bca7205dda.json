{"sha": "1f163ef7ac70375b21ab891ec543a2bca7205dda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYxNjNlZjdhYzcwMzc1YjIxYWI4OTFlYzU0M2EyYmNhNzIwNWRkYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-15T09:15:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-03-15T09:15:49Z"}, "message": "[multiple changes]\n\n2012-03-15  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.ads: Add entry for translating -gnateinn to\n\t/MAX_INSTANTIATIONS for VMS.\n\t* hostparm.ads (Max_Instantiations): Moved to Opt.\n\t* opt.ads (Maximum_Instantiations): Moved from Hostparm, and renamed.\n\t* sem_ch12.adb (Maximum_Instantiations): New name of\n\tMax_Instantiations (Analyze_Package_Instantiation): Change error\n\tmsg for too many instantiations (mention -gnateinn switch).\n\t* switch-c.adb (Scan_Front_End_Switches): Implement -gnateinn switch.\n\t* switch.ads: Minor comment update.\n\t* usage.adb (Usage): Output line for -maxeinn switch.\n\t* vms_data.ads: Add entry for MAX_INSTANTIATIONS (-gnateinn).\n\n2012-03-15  Yannick Moy  <moy@adacore.com>\n\n\t* alfa.ads Update the decription of ALI sections.\n\t(Alfa_File_Record): Add a component Unit_File_Name to store the\n\tunit file name for subunits.\n\t* get_alfa.adb, put_alfa.adb Adapt to the possible presence of\n\ta unit file name.\n\t* lib-xref-alfa.adb (Add_Alfa_File): For subunits, retrieve the\n\tfile name of the unit.\n\n2012-03-15  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch6.adb (Check_Subprogram_Contract): Do\n\tnot issue warning on missing 'Result in postcondition if all\n\tpostconditions and contract-cases already get a warning for only\n\treferring to pre-state.\n\n2012-03-15  Bob Duff  <duff@adacore.com>\n\n\t* debug.adb: Add new debug switch -gnatd.U, which disables the\n\tsupport added below, in case someone trips over a cycle, and needs\n\tto disable this.\n\t* sem_attr.adb (Analyze_Access_Attribute):\n\tTreat Subp'Access as a call for elaboration purposes.\n\t* sem_elab.ads, sem_elab.adb (Check_Elab_Call): Add support\n\tfor Subp'Access.\n\nFrom-SVN: r185422", "tree": {"sha": "c43cf174da633a8771c76dd0a61ddba4871bb105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c43cf174da633a8771c76dd0a61ddba4871bb105"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f163ef7ac70375b21ab891ec543a2bca7205dda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f163ef7ac70375b21ab891ec543a2bca7205dda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f163ef7ac70375b21ab891ec543a2bca7205dda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f163ef7ac70375b21ab891ec543a2bca7205dda/comments", "author": null, "committer": null, "parents": [{"sha": "b3e42de5be47e747f427cda06482e2bddc3b9947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e42de5be47e747f427cda06482e2bddc3b9947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3e42de5be47e747f427cda06482e2bddc3b9947"}], "stats": {"total": 374, "additions": 274, "deletions": 100}, "files": [{"sha": "9fa56eb335b0e6b3149d838796c28c7c3e8789d3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -1,3 +1,44 @@\n+2012-03-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.ads: Add entry for translating -gnateinn to\n+\t/MAX_INSTANTIATIONS for VMS.\n+\t* hostparm.ads (Max_Instantiations): Moved to Opt.\n+\t* opt.ads (Maximum_Instantiations): Moved from Hostparm, and renamed.\n+\t* sem_ch12.adb (Maximum_Instantiations): New name of\n+\tMax_Instantiations (Analyze_Package_Instantiation): Change error\n+\tmsg for too many instantiations (mention -gnateinn switch).\n+\t* switch-c.adb (Scan_Front_End_Switches): Implement -gnateinn switch.\n+\t* switch.ads: Minor comment update.\n+\t* usage.adb (Usage): Output line for -maxeinn switch.\n+\t* vms_data.ads: Add entry for MAX_INSTANTIATIONS (-gnateinn).\n+\n+2012-03-15  Yannick Moy  <moy@adacore.com>\n+\n+\t* alfa.ads Update the decription of ALI sections.\n+\t(Alfa_File_Record): Add a component Unit_File_Name to store the\n+\tunit file name for subunits.\n+\t* get_alfa.adb, put_alfa.adb Adapt to the possible presence of\n+\ta unit file name.\n+\t* lib-xref-alfa.adb (Add_Alfa_File): For subunits, retrieve the\n+\tfile name of the unit.\n+\n+2012-03-15  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Subprogram_Contract): Do\n+\tnot issue warning on missing 'Result in postcondition if all\n+\tpostconditions and contract-cases already get a warning for only\n+\treferring to pre-state.\n+\n+2012-03-15  Bob Duff  <duff@adacore.com>\n+\n+\t* debug.adb: Add new debug switch -gnatd.U, which disables the\n+\tsupport added below, in case someone trips over a cycle, and needs\n+\tto disable this.\n+\t* sem_attr.adb (Analyze_Access_Attribute):\n+\tTreat Subp'Access as a call for elaboration purposes.\n+\t* sem_elab.ads, sem_elab.adb (Check_Elab_Call): Add support\n+\tfor Subp'Access.\n+\n 2012-03-15  Vincent Pucci  <pucci@adacore.com>\n \n \t* sem.ads, sem.adb (Preanalyze): New routine."}, {"sha": "26c8247ccc666de0d8689baa8334c777160039b1", "filename": "gcc/ada/alfa.ads", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Falfa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Falfa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falfa.ads?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---             Copyright (C) 2011, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -70,7 +70,7 @@ package Alfa is\n    --  subprogram declaration and body, when both present, define two different\n    --  scopes.\n \n-   --    FD dependency-number filename\n+   --    FD dependency-number filename (-> unit-filename)?\n \n    --      This header precedes scope information for the unit identified by\n    --      dependency number and file name. The dependency number is the index\n@@ -89,6 +89,8 @@ package Alfa is\n    --      reading of the Alfa information, and means that the Alfa information\n    --      can stand on its own without needing other parts of the ALI file.\n \n+   --      The optional unit filename is given only for subunits.\n+\n    --    FS . scope line type col entity (-> spec-file . spec-scope)?\n \n    --      (The ? mark stands for an optional entry in the syntax)\n@@ -314,6 +316,10 @@ package Alfa is\n       File_Name : String_Ptr;\n       --  Pointer to file name in ALI file\n \n+      Unit_File_Name : String_Ptr;\n+      --  Pointer to file name for unit in ALI file, when File_Name refers to a\n+      --  subunit. Otherwise null.\n+\n       File_Num : Nat;\n       --  Dependency number in ALI file\n "}, {"sha": "a4207044297dd5db6b3aa3a1388726bb19e2f783", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -138,7 +138,7 @@ package body Debug is\n    --  d.R\n    --  d.S  Force Optimize_Alignment (Space)\n    --  d.T  Force Optimize_Alignment (Time)\n-   --  d.U\n+   --  d.U  Ignore indirect calls for static elaboration\n    --  d.V\n    --  d.W  Print out debugging information for Walk_Library_Items\n    --  d.X  Use Expression_With_Actions\n@@ -642,6 +642,12 @@ package body Debug is\n \n    --  d.T  Force Optimize_Alignment (Time) mode as the default\n \n+   --  d.U  Ignore indirect calls for static elaboration. The static\n+   --       elaboration model is conservative, especially regarding indirect\n+   --       calls. If you say Proc'Access, it will assume you might call\n+   --       Proc. This can cause elaboration cycles at bind time. This flag\n+   --       reverts to the behavior of earlier compilers.\n+\n    --  d.W  Print out debugging information for Walk_Library_Items, including\n    --       the order in which units are walked. This is primarily for use in\n    --       debugging CodePeer mode."}, {"sha": "13ce3ac42e07333dfd0568fc487fb185c9936349", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -380,6 +380,9 @@ package Errout is\n    Gname8 : aliased constant String := \"gnat2012\";\n    Vname8 : aliased constant String := \"2012\";\n \n+   Gname9 : aliased constant String := \"gnateinn\";\n+   Vname9 : aliased constant String := \"MAX_INSTANTIATIONS=nn\";\n+\n    type Cstring_Ptr is access constant String;\n \n    Gnames : array (Nat range <>) of Cstring_Ptr :=\n@@ -390,7 +393,8 @@ package Errout is\n                Gname5'Access,\n                Gname6'Access,\n                Gname7'Access,\n-               Gname8'Access);\n+               Gname8'Access,\n+               Gname9'Access);\n \n    Vnames : array (Nat range <>) of Cstring_Ptr :=\n               (Vname1'Access,\n@@ -400,7 +404,8 @@ package Errout is\n                Vname5'Access,\n                Vname6'Access,\n                Vname7'Access,\n-               Vname8'Access);\n+               Vname8'Access,\n+               Vname9'Access);\n \n    -----------------------------------------------------\n    -- Global Values Used for Error Message Insertions --"}, {"sha": "a10637cd360af74234b3e2c3bd0efb4f31c927e4", "filename": "gcc/ada/get_alfa.adb", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fget_alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fget_alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_alfa.adb?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2011, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -51,6 +51,9 @@ procedure Get_Alfa is\n    --  Local string used to store name of File/entity scanned as\n    --  Name_Str (1 .. Name_Len).\n \n+   File_Name : String_Ptr;\n+   Unit_File_Name : String_Ptr;\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -236,15 +239,32 @@ begin\n             Skip_Spaces;\n             Cur_File := Get_Nat;\n             Skip_Spaces;\n+\n             Get_Name;\n+            File_Name := new String'(Name_Str (1 .. Name_Len));\n+            Skip_Spaces;\n+\n+            --  Scan out unit file name when present (for subunits)\n+\n+            if Nextc = '-' then\n+               Skipc;\n+               Check ('>');\n+               Skip_Spaces;\n+               Get_Name;\n+               Unit_File_Name := new String'(Name_Str (1 .. Name_Len));\n+\n+            else\n+               Unit_File_Name := null;\n+            end if;\n \n             --  Make new File table entry (will fill in To_Scope later)\n \n             Alfa_File_Table.Append (\n-              (File_Name  => new String'(Name_Str (1 .. Name_Len)),\n-               File_Num   => Cur_File,\n-               From_Scope => Alfa_Scope_Table.Last + 1,\n-               To_Scope   => 0));\n+              (File_Name      => File_Name,\n+               Unit_File_Name => Unit_File_Name,\n+               File_Num       => Cur_File,\n+               From_Scope     => Alfa_Scope_Table.Last + 1,\n+               To_Scope       => 0));\n \n             --  Initialize counter for scopes\n "}, {"sha": "ebecd5ceeffa0b31503a87df7c6771589b53325b", "filename": "gcc/ada/hostparm.ads", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fhostparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fhostparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fhostparm.ads?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -69,11 +69,6 @@ package Hostparm is\n    --  of file names in the library, must be at least Max_Line_Length, but\n    --  can be larger.\n \n-   Max_Instantiations : constant := 8000;\n-   --  Maximum number of instantiations permitted (to stop runaway cases\n-   --  of nested instantiations). These situations probably only occur in\n-   --  specially concocted test cases.\n-\n    Tag_Errors : constant Boolean := False;\n    --  If set to true, then brief form error messages will be prefaced by\n    --  the string \"error:\". Used as default for Opt.Unique_Error_Tag."}, {"sha": "c1c6b25ca9c95af8a1476a23824db9a3a809ede2", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2011, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -214,6 +214,8 @@ package body Alfa is\n \n       S : constant Source_File_Index := Source_Index (U);\n \n+      File_Name, Unit_File_Name : String_Ptr;\n+\n    begin\n       --  Source file could be inexistant as a result of an error, if option\n       --  gnatQ is used.\n@@ -275,12 +277,23 @@ package body Alfa is\n       --  Make entry for new file in file table\n \n       Get_Name_String (Reference_Name (S));\n+      File_Name := new String'(Name_Buffer (1 .. Name_Len));\n+\n+      --  For subunits, also retrieve the file name of the unit\n+\n+      if Present (Cunit (Unit (S)))\n+        and then Nkind (Unit (Cunit (Unit (S)))) = N_Subunit\n+      then\n+         Get_Name_String (Reference_Name (Main_Source_File));\n+         Unit_File_Name := new String'(Name_Buffer (1 .. Name_Len));\n+      end if;\n \n       Alfa_File_Table.Append (\n-        (File_Name  => new String'(Name_Buffer (1 .. Name_Len)),\n-         File_Num   => D,\n-         From_Scope => From,\n-         To_Scope   => Alfa_Scope_Table.Last));\n+        (File_Name      => File_Name,\n+         Unit_File_Name => Unit_File_Name,\n+         File_Num       => D,\n+         From_Scope     => From,\n+         To_Scope       => Alfa_Scope_Table.Last));\n    end Add_Alfa_File;\n \n    --------------------"}, {"sha": "5fcd0bf31197d8b3bb8e13c31ebab273df349097", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -931,6 +931,12 @@ package Opt is\n    --  extension, as set by the appropriate switch. If no switch is given,\n    --  then this value is initialized by Osint to the appropriate value.\n \n+   Maximum_Instantiations : Int := 8000;\n+   --  GNAT\n+   --  Maximum number of instantiations permitted (to stop runaway cases\n+   --  of nested instantiations). These situations probably only occur in\n+   --  specially concocted test cases. Can be modified by -gnateinn switch.\n+\n    Maximum_Processes : Positive := 1;\n    --  GNATMAKE, GPRMAKE, GPRBUILD\n    --  Maximum number of processes that should be spawned to carry out\n@@ -940,12 +946,6 @@ package Opt is\n    --  GNATMAKE\n    --  Set to True if minimal recompilation mode requested\n \n-   Special_Exception_Package_Used : Boolean := False;\n-   --  GNAT\n-   --  Set to True if either of the unit GNAT.Most_Recent_Exception or\n-   --  GNAT.Exception_Traces is with'ed. Used to inhibit transformation of\n-   --  local raise statements into gotos in the presence of either package.\n-\n    Multiple_Unit_Index : Int;\n    --  GNAT\n    --  This is set non-zero if the current unit is being compiled in multiple\n@@ -1182,6 +1182,12 @@ package Opt is\n    --  GNAT\n    --  Set True if a pragma Short_Descriptors applies to the current unit.\n \n+   Special_Exception_Package_Used : Boolean := False;\n+   --  GNAT\n+   --  Set to True if either of the unit GNAT.Most_Recent_Exception or\n+   --  GNAT.Exception_Traces is with'ed. Used to inhibit transformation of\n+   --  local raise statements into gotos in the presence of either package.\n+\n    Sprint_Line_Limit : Nat := 72;\n    --  GNAT\n    --  Limit values for chopping long lines in Sprint output, can be reset"}, {"sha": "a5580a8018c0b264056e8ba2f40ba014a6a73602", "filename": "gcc/ada/put_alfa.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fput_alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fput_alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_alfa.adb?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2011, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,6 +49,18 @@ begin\n             Write_Info_Char (F.File_Name (N));\n          end loop;\n \n+         --  If file is a subunit, print the file name for the unit\n+\n+         if F.Unit_File_Name /= null then\n+            Write_Info_Char (' ');\n+            Write_Info_Char ('-');\n+            Write_Info_Char ('>');\n+            Write_Info_Char (' ');\n+            for N in F.Unit_File_Name'Range loop\n+               Write_Info_Char (F.Unit_File_Name (N));\n+            end loop;\n+         end if;\n+\n          Write_Info_Terminate;\n \n          --  Loop through scope entries for this file"}, {"sha": "084e621dad7baaf030ba8cc732ce5b7f1392f387", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -28,6 +28,7 @@ with Ada.Characters.Latin_1; use Ada.Characters.Latin_1;\n with Atree;    use Atree;\n with Casing;   use Casing;\n with Checks;   use Checks;\n+with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Errout;   use Errout;\n with Eval_Fat;\n@@ -54,6 +55,7 @@ with Sem_Ch8;  use Sem_Ch8;\n with Sem_Ch10; use Sem_Ch10;\n with Sem_Dim;  use Sem_Dim;\n with Sem_Dist; use Sem_Dist;\n+with Sem_Elab; use Sem_Elab;\n with Sem_Elim; use Sem_Elim;\n with Sem_Eval; use Sem_Eval;\n with Sem_Res;  use Sem_Res;\n@@ -644,6 +646,13 @@ package body Sem_Attr is\n                Kill_Current_Values;\n             end if;\n \n+            --  Treat as call for elaboration purposes and we are all\n+            --  done. Suppress this treatment under debug flag.\n+\n+            if not Debug_Flag_Dot_UU then\n+               Check_Elab_Call (N);\n+            end if;\n+\n             return;\n \n          --  Component is an operation of a protected type"}, {"sha": "054772964ef6a3f3ccea43ba595de4cb2999fbf4", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -34,7 +34,6 @@ with Exp_Disp; use Exp_Disp;\n with Fname;    use Fname;\n with Fname.UF; use Fname.UF;\n with Freeze;   use Freeze;\n-with Hostparm;\n with Itypes;   use Itypes;\n with Lib;      use Lib;\n with Lib.Load; use Lib.Load;\n@@ -3784,8 +3783,10 @@ package body Sem_Ch12 is\n             --  Here is a defence against a ludicrous number of instantiations\n             --  caused by a circular set of instantiation attempts.\n \n-            if Pending_Instantiations.Last > Hostparm.Max_Instantiations then\n-               Error_Msg_N (\"too many instantiations\", N);\n+            if Pending_Instantiations.Last > Maximum_Instantiations then\n+               Error_Msg_Uint_1 := UI_From_Int (Maximum_Instantiations);\n+               Error_Msg_N (\"too many instantiations, exceeds max of^\", N);\n+               Error_Msg_N (\"\\limit can be changed using -gnateinn switch\", N);\n                raise Unrecoverable_Error;\n             end if;\n "}, {"sha": "a2d729c72cfc9462981b0988aaf46c5b69802a05", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -6937,6 +6937,10 @@ package body Sem_Ch6 is\n       Attribute_Result_Mentioned : Boolean := False;\n       --  Whether attribute 'Result is mentioned in a postcondition\n \n+      No_Warning_On_Some_Postcondition : Boolean := False;\n+      --  Whether there exists a postcondition or a contract-case without a\n+      --  corresponding warning.\n+\n       Post_State_Mentioned : Boolean := False;\n       --  Whether some expression mentioned in a postcondition can have a\n       --  different value in the post-state than in the pre-state.\n@@ -7081,7 +7085,9 @@ package body Sem_Ch6 is\n                Post_State_Mentioned := False;\n                Ignored := Find_Post_State (Arg);\n \n-               if not Post_State_Mentioned then\n+               if Post_State_Mentioned then\n+                  No_Warning_On_Some_Postcondition := True;\n+               else\n                   Error_Msg_N (\"?`Ensures` component refers only to pre-state\",\n                                Prag);\n                end if;\n@@ -7133,7 +7139,9 @@ package body Sem_Ch6 is\n                   Post_State_Mentioned := False;\n                   Ignored := Find_Post_State (Arg);\n \n-                  if not Post_State_Mentioned then\n+                  if Post_State_Mentioned then\n+                     No_Warning_On_Some_Postcondition := True;\n+                  else\n                      Error_Msg_N\n                        (\"?postcondition refers only to pre-state\", Prag);\n                   end if;\n@@ -7177,12 +7185,15 @@ package body Sem_Ch6 is\n       end if;\n \n       --  Issue warning for functions whose postcondition does not mention\n-      --  'Result after all postconditions have been processed.\n+      --  'Result after all postconditions have been processed, and provided\n+      --  all postconditions do not already get a warning that they only refer\n+      --  to pre-state.\n \n       if Ekind_In (Spec_Id, E_Function, E_Generic_Function)\n         and then (Present (Last_Postcondition)\n                    or else Present (Last_Contract_Case))\n         and then not Attribute_Result_Mentioned\n+        and then No_Warning_On_Some_Postcondition\n       then\n          if Present (Last_Postcondition) then\n             if Present (Last_Contract_Case) then"}, {"sha": "2656f46de5b181d2d49cdf80acccab119a4615d8", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 79, "deletions": 52, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -180,16 +180,19 @@ package body Sem_Elab is\n       Inter_Unit_Only   : Boolean;\n       Generate_Warnings : Boolean := True;\n       In_Init_Proc      : Boolean := False);\n-   --  This is the internal recursive routine that is called to check for a\n+   --  This is the internal recursive routine that is called to check for\n    --  possible elaboration error. The argument N is a subprogram call or\n    --  generic instantiation to be checked, and E is the entity of the called\n    --  subprogram, or instantiated generic unit. The flag Outer_Scope is the\n    --  outer level scope for the original call. Inter_Unit_Only is set if the\n    --  call is only to be checked in the case where it is to another unit (and\n    --  skipped if within a unit). Generate_Warnings is set to False to suppress\n    --  warning messages about missing pragma Elaborate_All's. These messages\n-   --  are not wanted for inner calls in the dynamic model. Flag In_Init_Proc\n-   --  should be set whenever the current context is a type init proc.\n+   --  are not wanted for inner calls in the dynamic model. Note that an\n+   --  instance of the Access attribute applied to a subprogram also generates\n+   --  a call to this procedure (since the referenced subprogram may be called\n+   --  later indirectly). Flag In_Init_Proc should be set whenever the current\n+   --  context is a type init proc.\n \n    procedure Check_Bad_Instantiation (N : Node_Id);\n    --  N is a node for an instantiation (if called with any other node kind,\n@@ -270,6 +273,13 @@ package body Sem_Elab is\n    --  On entry C_Scope is set to some scope. On return, C_Scope is reset\n    --  to be the enclosing compilation unit of this scope.\n \n+   function Get_Referenced_Ent (N : Node_Id) return Entity_Id;\n+   --  N is either a function or procedure call or an access attribute that\n+   --  references a subprogram. This call retrieves the relevant entity. If\n+   --  this is a call to a protected subprogram, the entity is a selected\n+   --  component. The callable entity may be absent, in which case Empty is\n+   --  returned. This happens with non-analyzed calls in nested generics.\n+\n    procedure Set_Elaboration_Constraint\n     (Call : Node_Id;\n      Subp : Entity_Id;\n@@ -827,14 +837,19 @@ package body Sem_Elab is\n          --  the init proc is in the root package, and we start from the entity\n          --  of the name in the call.\n \n-         if Is_Entity_Name (Name (N))\n-           and then Is_Init_Proc (Entity (Name (N)))\n-           and then not In_Same_Extended_Unit (N, Entity (Name (N)))\n-         then\n-            W_Scope := Scope (Entity (Name (N)));\n-         else\n-            W_Scope := E;\n-         end if;\n+         declare\n+            Ent : constant Entity_Id := Get_Referenced_Ent (N);\n+         begin\n+            if Is_Init_Proc (Ent)\n+              and then not In_Same_Extended_Unit (N, Ent)\n+            then\n+               W_Scope := Scope (Ent);\n+            else\n+               W_Scope := E;\n+            end if;\n+         end;\n+\n+         --  Now loop through scopes to get to the enclosing compilation unit\n \n          while not Is_Compilation_Unit (W_Scope) loop\n             W_Scope := Scope (W_Scope);\n@@ -1126,36 +1141,6 @@ package body Sem_Elab is\n       Ent : Entity_Id;\n       P   : Node_Id;\n \n-      function Get_Called_Ent return Entity_Id;\n-      --  Retrieve called entity. If this is a call to a protected subprogram,\n-      --  entity is a selected component. The callable entity may be absent,\n-      --  in which case there is no check to perform. This happens with\n-      --  non-analyzed calls in nested generics.\n-\n-      --------------------\n-      -- Get_Called_Ent --\n-      --------------------\n-\n-      function Get_Called_Ent return Entity_Id is\n-         Nam : Node_Id;\n-\n-      begin\n-         Nam := Name (N);\n-\n-         if No (Nam) then\n-            return Empty;\n-\n-         elsif Nkind (Nam) = N_Selected_Component then\n-            return Entity (Selector_Name (Nam));\n-\n-         elsif not Is_Entity_Name (Nam) then\n-            return Empty;\n-\n-         else\n-            return Entity (Nam);\n-         end if;\n-      end Get_Called_Ent;\n-\n    --  Start of processing for Check_Elab_Call\n \n    begin\n@@ -1174,11 +1159,12 @@ package body Sem_Elab is\n       then\n          Check_Restriction (No_Entry_Calls_In_Elaboration_Code, N);\n \n-      --  Nothing to do if this is not a call (happens in some error\n-      --  conditions, and in some cases where rewriting occurs).\n+      --  Nothing to do if this is not a call or attribute reference (happens\n+      --  in some error conditions, and in some cases where rewriting occurs).\n \n       elsif Nkind (N) /= N_Function_Call\n         and then Nkind (N) /= N_Procedure_Call_Statement\n+        and then Nkind (N) /= N_Attribute_Reference\n       then\n          return;\n \n@@ -1267,6 +1253,7 @@ package body Sem_Elab is\n             if Comes_From_Source (N)\n               and then In_Preelaborated_Unit\n               and then not In_Inlined_Body\n+              and then Nkind (N) /= N_Attribute_Reference\n             then\n                --  This is a warning in GNAT mode allowing such calls to be\n                --  used in the predefined library with appropriate care.\n@@ -1352,12 +1339,10 @@ package body Sem_Elab is\n \n                      elsif Dynamic_Elaboration_Checks then\n \n-                        --  This is a rather new check, going into version\n-                        --  3.14a1 for the first time (V1.80 of this unit), so\n-                        --  we provide a debug flag to enable it. That way we\n-                        --  have an easy work around for regressions that are\n-                        --  caused by this new check. This debug flag can be\n-                        --  removed later.\n+                        --  We provide a debug flag to disable this check. That\n+                        --  way we have an easy work around for regressions\n+                        --  that are caused by this new check. This debug flag\n+                        --  can be removed later.\n \n                         if Debug_Flag_DD then\n                            return;\n@@ -1373,7 +1358,7 @@ package body Sem_Elab is\n                         --  but we need to capture local suppress pragmas\n                         --  that may inhibit checks on this call.\n \n-                        Ent := Get_Called_Ent;\n+                        Ent := Get_Referenced_Ent (N);\n \n                         if No (Ent) then\n                            return;\n@@ -1400,7 +1385,7 @@ package body Sem_Elab is\n          end if;\n       end if;\n \n-      Ent := Get_Called_Ent;\n+      Ent := Get_Referenced_Ent (N);\n \n       if No (Ent) then\n          return;\n@@ -2012,6 +1997,20 @@ package body Sem_Elab is\n \n             return OK;\n \n+         --  If we have an access attribute for a subprogram, check\n+         --  it. Suppress this behavior under debug flag.\n+\n+         elsif not Debug_Flag_Dot_UU\n+           and then Nkind (N) = N_Attribute_Reference\n+           and then (Attribute_Name (N) = Name_Access\n+                       or else\n+                     Attribute_Name (N) = Name_Unrestricted_Access)\n+           and then Is_Entity_Name (Prefix (N))\n+           and then Is_Subprogram (Entity (Prefix (N)))\n+         then\n+            Check_Elab_Call (N, Outer_Scope);\n+            return OK;\n+\n          --  If we have a generic instantiation, check it\n \n          elsif Nkind (N) in N_Generic_Instantiation then\n@@ -2605,6 +2604,34 @@ package body Sem_Elab is\n       Set_Suppress_Elaboration_Warnings (Elab_Unit, True);\n    end Set_Elaboration_Constraint;\n \n+   ------------------------\n+   -- Get_Referenced_Ent --\n+   ------------------------\n+\n+   function Get_Referenced_Ent (N : Node_Id) return Entity_Id is\n+      Nam : Node_Id;\n+\n+   begin\n+      if Nkind (N) = N_Attribute_Reference then\n+         Nam := Prefix (N);\n+      else\n+         Nam := Name (N);\n+      end if;\n+\n+      if No (Nam) then\n+         return Empty;\n+\n+      elsif Nkind (Nam) = N_Selected_Component then\n+         return Entity (Selector_Name (Nam));\n+\n+      elsif not Is_Entity_Name (Nam) then\n+         return Empty;\n+\n+      else\n+         return Entity (Nam);\n+      end if;\n+   end Get_Referenced_Ent;\n+\n    ----------------------\n    -- Has_Generic_Body --\n    ----------------------"}, {"sha": "abae4dd56c60f2d9b5157d1036461f7565b4b214", "filename": "gcc/ada/sem_elab.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fsem_elab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fsem_elab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.ads?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1997-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -122,8 +122,9 @@ package Sem_Elab is\n      (N            : Node_Id;\n       Outer_Scope  : Entity_Id := Empty;\n       In_Init_Proc : Boolean   := False);\n-   --  Check a call for possible elaboration problems. The node N is either\n-   --  an N_Function_Call or N_Procedure_Call_Statement node. The Outer_Scope\n+   --  Check a call for possible elaboration problems. The node N is either an\n+   --  N_Function_Call or N_Procedure_Call_Statement node or an access\n+   --  attribute reference whose prefix is a subprogram. The Outer_Scope\n    --  argument indicates whether this is an outer level call from Sem_Res\n    --  (Outer_Scope set to Empty), or an internal recursive call (Outer_Scope\n    --  set to entity of outermost call, see body). Flag In_Init_Proc should be"}, {"sha": "cece29465c82f862ae1601e78642f5246b5020e2", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -482,6 +482,13 @@ package body Switch.C is\n                      Generate_Processed_File := True;\n                      Ptr := Ptr + 1;\n \n+                  --  -gnatei (max number of instantiations)\n+\n+                  when 'i' =>\n+                     Ptr := Ptr + 1;\n+                     Scan_Pos\n+                       (Switch_Chars, Max, Ptr, Maximum_Instantiations, C);\n+\n                   --  -gnateI (index of unit in multi-unit source)\n \n                   when 'I' =>"}, {"sha": "5f02ba2a164f494bc4a18c08c68849cfd9f47e40", "filename": "gcc/ada/switch.ads", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fswitch.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fswitch.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch.ads?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -123,9 +123,8 @@ private\n       Ptr          : in out Integer;\n       Result       : out Pos;\n       Switch       : Character);\n-   --  Scan positive integer parameter for switch. On entry, Ptr points just\n-   --  past the switch character, on exit it points past the last digit of the\n-   --  integer value.\n+   --  Scan positive integer parameter for switch. Identical to Scan_Nat with\n+   --  same parameters except that zero is considered out of range.\n \n    procedure Bad_Switch (Switch : Character);\n    procedure Bad_Switch (Switch : String);"}, {"sha": "637097bf5b63da0ae441aa09bb30e171017e9850", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                B o d y                                   --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -197,6 +197,11 @@ begin\n    Write_Switch_Char (\"eG\");\n    Write_Line (\"Generate preprocessed source\");\n \n+   --  Line for -gnatei switch\n+\n+   Write_Switch_Char (\"einn\");\n+   Write_Line (\"Set maximumum number of instantiations to nn\");\n+\n    --  Line for -gnateI switch\n \n    Write_Switch_Char (\"eInn\");"}, {"sha": "f89ab630449c435a45f4b052480be9d381068833", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f163ef7ac70375b21ab891ec543a2bca7205dda/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=1f163ef7ac70375b21ab891ec543a2bca7205dda", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1926,11 +1926,14 @@ package VMS_Data is\n    --   When using a project file, GNAT MAKE creates a temporary mapping file\n    --   and communicates it to the compiler using this switch.\n \n-   S_GCC_Multi   : aliased constant S := \"/MULTI_UNIT_INDEX=#\"             &\n-                                            \"-gnateI#\";\n-   --        /MULTI_UNIT_INDEX=nnn\n+   S_GCC_MaxI    : aliased constant S := \"/MAX_INSTANTIATIONS=#\"           &\n+                                            \"-gnatei#\";\n+\n+   --        /MAX_INSTANTIATIONS=nnn\n    --\n-   --   Specify the index of the unit to compile in a multi-unit source file.\n+   --   Specify the maximum number of instantiations permitted. The default\n+   --   value is 8000, which is probably enough for all programs except those\n+   --   containing some kind of runaway unintended instantiation loop.\n \n    S_GCC_Mess    : aliased constant S := \"/MESSAGES_PROJECT_FILE=\"         &\n                                             \"DEFAULT \"                     &\n@@ -1951,6 +1954,12 @@ package VMS_Data is\n    --      HIGH        A great number of messages are output, most of them not\n    --                  being useful for the user.\n \n+   S_GCC_Multi   : aliased constant S := \"/MULTI_UNIT_INDEX=#\"             &\n+                                            \"-gnateI#\";\n+   --        /MULTI_UNIT_INDEX=nnn\n+   --\n+   --   Specify the index of the unit to compile in a multi-unit source file.\n+\n    S_GCC_Nesting  : aliased constant S := \"/MAX_NESTING=#\"                 &\n                                              \"-gnatyL#\";\n    --        /MAX_NESTING=nnn\n@@ -3585,6 +3594,7 @@ package VMS_Data is\n                      S_GCC_Output  'Access,\n                      S_GCC_Machine 'Access,\n                      S_GCC_Mapping 'Access,\n+                     S_GCC_MaxI    'Access,\n                      S_GCC_Multi   'Access,\n                      S_GCC_Mess    'Access,\n                      S_GCC_Nesting 'Access,"}]}