{"sha": "d40477b49fd716b39484746200db3ae99fef7230", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwNDc3YjQ5ZmQ3MTZiMzk0ODQ3NDYyMDBkYjNhZTk5ZmVmNzIzMA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-07-11T07:55:11Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-07-11T07:55:11Z"}, "message": "re PR fortran/44869 ([OOP] generic TBPs not initialized properly)\n\n2010-07-11  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44689\n\t* decl.c (build_sym,attr_decl1): Only build the class container if the\n\tsymbol has sufficient attributes.\n\t* expr.c (gfc_check_pointer_assign): Use class_pointer instead of\n\tpointer attribute for classes.\n\t* match.c (gfc_match_allocate,gfc_match_deallocate): Ditto.\n\t* module.c (MOD_VERSION): Bump.\n\t(enum ab_attribute,attr_bits): Add AB_CLASS_POINTER.\n\t(mio_symbol_attribute): Handle class_pointer attribute.\n\t* parse.c (parse_derived): Use class_pointer instead of pointer\n\tattribute for classes.\n\t* primary.c (gfc_variable_attr,gfc_expr_attr): Ditto.\n\t* resolve.c (resolve_structure_cons,resolve_deallocate_expr,\n\tresolve_allocate_expr,resolve_fl_derived): Ditto.\n\t(resolve_fl_var_and_proc): Check for class_ok attribute.\n\n2010-07-11  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44689\n\t* gfortran.dg/class_24.f03: New.\n\nFrom-SVN: r162052", "tree": {"sha": "16cd0f7ef9f241752f876619444e0b2b144f087f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16cd0f7ef9f241752f876619444e0b2b144f087f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d40477b49fd716b39484746200db3ae99fef7230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40477b49fd716b39484746200db3ae99fef7230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40477b49fd716b39484746200db3ae99fef7230", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40477b49fd716b39484746200db3ae99fef7230/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76986b412bae95c36f54fa5c13cf46a54dca2e30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76986b412bae95c36f54fa5c13cf46a54dca2e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76986b412bae95c36f54fa5c13cf46a54dca2e30"}], "stats": {"total": 110, "additions": 82, "deletions": 28}, "files": [{"sha": "1c0f727df5927969c636d98d6bf7fa79f4f35938", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d40477b49fd716b39484746200db3ae99fef7230", "patch": "@@ -1,3 +1,21 @@\n+2010-07-11  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44689\n+\t* decl.c (build_sym,attr_decl1): Only build the class container if the\n+\tsymbol has sufficient attributes.\n+\t* expr.c (gfc_check_pointer_assign): Use class_pointer instead of\n+\tpointer attribute for classes.\n+\t* match.c (gfc_match_allocate,gfc_match_deallocate): Ditto.\n+\t* module.c (MOD_VERSION): Bump.\n+\t(enum ab_attribute,attr_bits): Add AB_CLASS_POINTER.\n+\t(mio_symbol_attribute): Handle class_pointer attribute.\n+\t* parse.c (parse_derived): Use class_pointer instead of pointer\n+\tattribute for classes.\n+\t* primary.c (gfc_variable_attr,gfc_expr_attr): Ditto.\n+\t* resolve.c (resolve_structure_cons,resolve_deallocate_expr,\n+\tresolve_allocate_expr,resolve_fl_derived): Ditto.\n+\t(resolve_fl_var_and_proc): Check for class_ok attribute.\n+\n 2010-07-10  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-io.c (gfc_build_st_parameter): Update calls to"}, {"sha": "9515676acc9b49ceee41f0a83de1b4f3760a4836", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=d40477b49fd716b39484746200db3ae99fef7230", "patch": "@@ -1155,13 +1155,10 @@ build_sym (const char *name, gfc_charlen *cl,\n \n   sym->attr.implied_index = 0;\n \n-  if (sym->ts.type == BT_CLASS)\n-    {\n-      sym->attr.class_ok = (sym->attr.dummy\n-\t\t\t      || sym->attr.pointer\n-\t\t\t      || sym->attr.allocatable) ? 1 : 0;\n-      gfc_build_class_symbol (&sym->ts, &sym->attr, &sym->as, false);\n-    }\n+  if (sym->ts.type == BT_CLASS\n+      && (sym->attr.class_ok = sym->attr.dummy || sym->attr.pointer\n+\t\t\t       || sym->attr.allocatable))\n+    gfc_build_class_symbol (&sym->ts, &sym->attr, &sym->as, false);\n \n   return SUCCESS;\n }\n@@ -5874,16 +5871,14 @@ attr_decl1 (void)\n   /* Update symbol table.  DIMENSION attribute is set in\n      gfc_set_array_spec().  For CLASS variables, this must be applied\n      to the first component, or '$data' field.  */\n-  if (sym->ts.type == BT_CLASS)\n+  if (sym->ts.type == BT_CLASS && sym->ts.u.derived->attr.is_class)\n     {\n       if (gfc_copy_attr (&CLASS_DATA (sym)->attr, &current_attr,&var_locus)\n \t  == FAILURE)\n \t{\n \t  m = MATCH_ERROR;\n \t  goto cleanup;\n \t}\n-      sym->attr.class_ok = (sym->attr.class_ok || current_attr.allocatable\n-\t\t\t    || current_attr.pointer);\n     }\n   else\n     {\n@@ -5894,6 +5889,11 @@ attr_decl1 (void)\n \t  goto cleanup;\n \t}\n     }\n+    \n+  if (sym->ts.type == BT_CLASS && !sym->attr.class_ok\n+      && (sym->attr.class_ok = sym->attr.class_ok || current_attr.allocatable\n+\t\t\t       || current_attr.pointer))\n+    gfc_build_class_symbol (&sym->ts, &sym->attr, &sym->as, false);\n \n   if (gfc_set_array_spec (sym, as, &var_locus) == FAILURE)\n     {"}, {"sha": "39fc7493264ca097b082fe74a660085bbf491aa9", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=d40477b49fd716b39484746200db3ae99fef7230", "patch": "@@ -3306,7 +3306,8 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n     }\n \n   if (!pointer && !proc_pointer\n-\t&& !(lvalue->ts.type == BT_CLASS && CLASS_DATA (lvalue)->attr.pointer))\n+      && !(lvalue->ts.type == BT_CLASS\n+\t   && CLASS_DATA (lvalue)->attr.class_pointer))\n     {\n       gfc_error (\"Pointer assignment to non-POINTER at %L\", &lvalue->where);\n       return FAILURE;\n@@ -3543,7 +3544,7 @@ gfc_check_assign_symbol (gfc_symbol *sym, gfc_expr *rvalue)\n   lvalue.where = sym->declared_at;\n \n   if (sym->attr.pointer || sym->attr.proc_pointer\n-      || (sym->ts.type == BT_CLASS && CLASS_DATA (sym)->attr.pointer\n+      || (sym->ts.type == BT_CLASS && CLASS_DATA (sym)->attr.class_pointer\n \t  && rvalue->expr_type == EXPR_NULL))\n     r = gfc_check_pointer_assign (&lvalue, rvalue);\n   else"}, {"sha": "56e9d1d515dd9085be3d98d5579a0ddc1e40623f", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=d40477b49fd716b39484746200db3ae99fef7230", "patch": "@@ -2896,7 +2896,7 @@ gfc_match_allocate (void)\n \t\t|| tail->expr->ref->type == REF_ARRAY));\n       if (sym && sym->ts.type == BT_CLASS)\n \tb2 = !(CLASS_DATA (sym)->attr.allocatable\n-\t       || CLASS_DATA (sym)->attr.pointer);\n+\t       || CLASS_DATA (sym)->attr.class_pointer);\n       else\n \tb2 = sym && !(sym->attr.allocatable || sym->attr.pointer\n \t\t      || sym->attr.proc_pointer);\n@@ -3202,7 +3202,7 @@ gfc_match_deallocate (void)\n \t       || tail->expr->ref->type == REF_ARRAY));\n       if (sym && sym->ts.type == BT_CLASS)\n \tb2 = !(CLASS_DATA (sym)->attr.allocatable\n-\t       || CLASS_DATA (sym)->attr.pointer);\n+\t       || CLASS_DATA (sym)->attr.class_pointer);\n       else\n \tb2 = sym && !(sym->attr.allocatable || sym->attr.pointer\n \t\t      || sym->attr.proc_pointer);"}, {"sha": "aa6e72eeeff135be77e3b003072b124227dd1c6e", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=d40477b49fd716b39484746200db3ae99fef7230", "patch": "@@ -80,7 +80,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Don't put any single quote (') in MOD_VERSION, \n    if yout want it to be recognized.  */\n-#define MOD_VERSION \"5\"\n+#define MOD_VERSION \"6\"\n \n \n /* Structure that describes a position within a module file.  */\n@@ -1675,7 +1675,7 @@ typedef enum\n   AB_POINTER_COMP, AB_PRIVATE_COMP, AB_VALUE, AB_VOLATILE, AB_PROTECTED,\n   AB_IS_BIND_C, AB_IS_C_INTEROP, AB_IS_ISO_C, AB_ABSTRACT, AB_ZERO_COMP,\n   AB_IS_CLASS, AB_PROCEDURE, AB_PROC_POINTER, AB_ASYNCHRONOUS, AB_CODIMENSION,\n-  AB_COARRAY_COMP, AB_VTYPE, AB_VTAB, AB_CONTIGUOUS\n+  AB_COARRAY_COMP, AB_VTYPE, AB_VTAB, AB_CONTIGUOUS, AB_CLASS_POINTER\n }\n ab_attribute;\n \n@@ -1724,6 +1724,7 @@ static const mstring attr_bits[] =\n     minit (\"PROC_POINTER\", AB_PROC_POINTER),\n     minit (\"VTYPE\", AB_VTYPE),\n     minit (\"VTAB\", AB_VTAB),\n+    minit (\"CLASS_POINTER\", AB_CLASS_POINTER),\n     minit (NULL, -1)\n };\n \n@@ -1818,6 +1819,8 @@ mio_symbol_attribute (symbol_attribute *attr)\n \tMIO_NAME (ab_attribute) (AB_OPTIONAL, attr_bits);\n       if (attr->pointer)\n \tMIO_NAME (ab_attribute) (AB_POINTER, attr_bits);\n+      if (attr->class_pointer)\n+\tMIO_NAME (ab_attribute) (AB_CLASS_POINTER, attr_bits);\n       if (attr->is_protected)\n \tMIO_NAME (ab_attribute) (AB_PROTECTED, attr_bits);\n       if (attr->value)\n@@ -1933,6 +1936,9 @@ mio_symbol_attribute (symbol_attribute *attr)\n \t    case AB_POINTER:\n \t      attr->pointer = 1;\n \t      break;\n+\t    case AB_CLASS_POINTER:\n+\t      attr->class_pointer = 1;\n+\t      break;\n \t    case AB_PROTECTED:\n \t      attr->is_protected = 1;\n \t      break;"}, {"sha": "a1af026465893e596882196fe73c80366471850a", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=d40477b49fd716b39484746200db3ae99fef7230", "patch": "@@ -2103,7 +2103,7 @@ parse_derived (void)\n \n       /* Look for pointer components.  */\n       if (c->attr.pointer\n-\t  || (c->ts.type == BT_CLASS && CLASS_DATA (c)->attr.pointer)\n+\t  || (c->ts.type == BT_CLASS && CLASS_DATA (c)->attr.class_pointer)\n \t  || (c->ts.type == BT_DERIVED && c->ts.u.derived->attr.pointer_comp))\n \tsym->attr.pointer_comp = 1;\n "}, {"sha": "cb6fae20c41bfd90bc67d215dd4ffd9467e7d255", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=d40477b49fd716b39484746200db3ae99fef7230", "patch": "@@ -1999,7 +1999,7 @@ gfc_variable_attr (gfc_expr *expr, gfc_typespec *ts)\n   if (sym->ts.type == BT_CLASS)\n     {\n       dimension = CLASS_DATA (sym)->attr.dimension;\n-      pointer = CLASS_DATA (sym)->attr.pointer;\n+      pointer = CLASS_DATA (sym)->attr.class_pointer;\n       allocatable = CLASS_DATA (sym)->attr.allocatable;\n     }\n   else\n@@ -2059,7 +2059,7 @@ gfc_variable_attr (gfc_expr *expr, gfc_typespec *ts)\n \n \tif (comp->ts.type == BT_CLASS)\n \t  {\n-\t    pointer = CLASS_DATA (comp)->attr.pointer;\n+\t    pointer = CLASS_DATA (comp)->attr.class_pointer;\n \t    allocatable = CLASS_DATA (comp)->attr.allocatable;\n \t  }\n \telse\n@@ -2109,7 +2109,7 @@ gfc_expr_attr (gfc_expr *e)\n \t  if (sym->ts.type == BT_CLASS)\n \t    {\n \t      attr.dimension = CLASS_DATA (sym)->attr.dimension;\n-\t      attr.pointer = CLASS_DATA (sym)->attr.pointer;\n+\t      attr.pointer = CLASS_DATA (sym)->attr.class_pointer;\n \t      attr.allocatable = CLASS_DATA (sym)->attr.allocatable;\n \t    }\n \t}"}, {"sha": "d5c422ac35ec48bc4d20d29f44ba0e25e68bcf78", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=d40477b49fd716b39484746200db3ae99fef7230", "patch": "@@ -905,7 +905,7 @@ resolve_structure_cons (gfc_expr *expr)\n \t  && !(comp->attr.pointer || comp->attr.allocatable\n \t       || comp->attr.proc_pointer\n \t       || (comp->ts.type == BT_CLASS\n-\t\t   && (CLASS_DATA (comp)->attr.pointer\n+\t\t   && (CLASS_DATA (comp)->attr.class_pointer\n \t\t       || CLASS_DATA (comp)->attr.allocatable))))\n \t{\n \t  t = FAILURE;\n@@ -6096,7 +6096,7 @@ resolve_deallocate_expr (gfc_expr *e)\n   if (sym->ts.type == BT_CLASS)\n     {\n       allocatable = CLASS_DATA (sym)->attr.allocatable;\n-      pointer = CLASS_DATA (sym)->attr.pointer;\n+      pointer = CLASS_DATA (sym)->attr.class_pointer;\n     }\n   else\n     {\n@@ -6120,7 +6120,7 @@ resolve_deallocate_expr (gfc_expr *e)\n \t  if (c->ts.type == BT_CLASS)\n \t    {\n \t      allocatable = CLASS_DATA (c)->attr.allocatable;\n-\t      pointer = CLASS_DATA (c)->attr.pointer;\n+\t      pointer = CLASS_DATA (c)->attr.class_pointer;\n \t    }\n \t  else\n \t    {\n@@ -6319,7 +6319,7 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n       if (sym->ts.type == BT_CLASS)\n \t{\n \t  allocatable = CLASS_DATA (sym)->attr.allocatable;\n-\t  pointer = CLASS_DATA (sym)->attr.pointer;\n+\t  pointer = CLASS_DATA (sym)->attr.class_pointer;\n \t  dimension = CLASS_DATA (sym)->attr.dimension;\n \t  codimension = CLASS_DATA (sym)->attr.codimension;\n \t  is_abstract = CLASS_DATA (sym)->attr.abstract;\n@@ -6357,7 +6357,7 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code)\n \t\tif (c->ts.type == BT_CLASS)\n \t\t  {\n \t\t    allocatable = CLASS_DATA (c)->attr.allocatable;\n-\t\t    pointer = CLASS_DATA (c)->attr.pointer;\n+\t\t    pointer = CLASS_DATA (c)->attr.class_pointer;\n \t\t    dimension = CLASS_DATA (c)->attr.dimension;\n \t\t    codimension = CLASS_DATA (c)->attr.codimension;\n \t\t    is_abstract = CLASS_DATA (c)->attr.abstract;\n@@ -9327,7 +9327,8 @@ resolve_fl_var_and_proc (gfc_symbol *sym, int mp_flag)\n   if (sym->ts.type == BT_CLASS && !(sym->result && sym->result != sym))\n     {\n       /* F03:C502.  */\n-      if (!gfc_type_is_extensible (CLASS_DATA (sym)->ts.u.derived))\n+      if (sym->attr.class_ok\n+\t  && !gfc_type_is_extensible (CLASS_DATA (sym)->ts.u.derived))\n \t{\n \t  gfc_error (\"Type '%s' of CLASS variable '%s' at %L is not extensible\",\n \t\t     CLASS_DATA (sym)->ts.u.derived->name, sym->name,\n@@ -11093,7 +11094,7 @@ resolve_fl_derived (gfc_symbol *sym)\n \t  return FAILURE;\n \t}\n \n-      if (c->ts.type == BT_CLASS && CLASS_DATA (c)->attr.pointer\n+      if (c->ts.type == BT_CLASS && CLASS_DATA (c)->attr.class_pointer\n \t  && CLASS_DATA (c)->ts.u.derived->components == NULL\n \t  && !CLASS_DATA (c)->ts.u.derived->attr.zero_comp)\n \t{\n@@ -11105,7 +11106,8 @@ resolve_fl_derived (gfc_symbol *sym)\n \n       /* C437.  */\n       if (c->ts.type == BT_CLASS\n-\t  && !(CLASS_DATA (c)->attr.pointer || CLASS_DATA (c)->attr.allocatable))\n+\t  && !(CLASS_DATA (c)->attr.class_pointer\n+\t       || CLASS_DATA (c)->attr.allocatable))\n \t{\n \t  gfc_error (\"Component '%s' with CLASS at %L must be allocatable \"\n \t\t     \"or pointer\", c->name, &c->loc);"}, {"sha": "646aae638799930c735d5b826053cfe343a579ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d40477b49fd716b39484746200db3ae99fef7230", "patch": "@@ -1,3 +1,8 @@\n+2010-07-11  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44689\n+\t* gfortran.dg/class_24.f03: New.\n+\n 2010-07-10  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/44889"}, {"sha": "085e6d1e1ce89c295fb044d64c1d1496e428a2e5", "filename": "gcc/testsuite/gfortran.dg/class_24.f03", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_24.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40477b49fd716b39484746200db3ae99fef7230/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_24.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_24.f03?ref=d40477b49fd716b39484746200db3ae99fef7230", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+!\n+! PR 44869: [OOP] Missing TARGET check - and wrong code or accepts-invalid?\n+!\n+! Contributed by Satish.BD <bdsatish@gmail.com>\n+\n+  type :: test_case\n+  end type \n+\n+  type :: test_suite\n+    type(test_case) :: list\n+  end type\n+\n+contains\n+\n+  subroutine sub(self)\n+    class(test_suite), intent(inout) :: self\n+    type(test_case), pointer :: tst_case\n+    tst_case => self%list       ! { dg-error \"is neither TARGET nor POINTER\" }\n+  end subroutine\n+\n+end"}]}