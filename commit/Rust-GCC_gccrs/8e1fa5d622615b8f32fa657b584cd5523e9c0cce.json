{"sha": "8e1fa5d622615b8f32fa657b584cd5523e9c0cce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUxZmE1ZDYyMjYxNWI4ZjMyZmE2NTdiNTg0Y2Q1NTIzZTljMGNjZQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-04-09T22:41:35Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2005-04-09T22:41:35Z"}, "message": "simplify.c (gfc_simplify_anint): Use mpfr_round()\n\n* simplify.c (gfc_simplify_anint): Use mpfr_round()\n(gfc_simplify_dnint): ditto.\n(gfc_simplify_nint): ditto.\n\nFrom-SVN: r97930", "tree": {"sha": "4fed2a7790843316c3942d5623a1e9f33edb7f93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fed2a7790843316c3942d5623a1e9f33edb7f93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e1fa5d622615b8f32fa657b584cd5523e9c0cce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e1fa5d622615b8f32fa657b584cd5523e9c0cce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e1fa5d622615b8f32fa657b584cd5523e9c0cce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e1fa5d622615b8f32fa657b584cd5523e9c0cce/comments", "author": null, "committer": null, "parents": [{"sha": "50dd63a96201720c74d336aad9197a0efa019e4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50dd63a96201720c74d336aad9197a0efa019e4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50dd63a96201720c74d336aad9197a0efa019e4d"}], "stats": {"total": 93, "additions": 15, "deletions": 78}, "files": [{"sha": "74bfa1a0ec15d34d4d794eeebcbf5d226d809126", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1fa5d622615b8f32fa657b584cd5523e9c0cce/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1fa5d622615b8f32fa657b584cd5523e9c0cce/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8e1fa5d622615b8f32fa657b584cd5523e9c0cce", "patch": "@@ -1,3 +1,9 @@\n+2005-04-09  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* simplify.c (gfc_simplify_anint): Use mpfr_round()\n+\t(gfc_simplify_dnint): ditto.\n+\t(gfc_simplify_nint): ditto.\n+\n 2005-04-09  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR fortran/13257"}, {"sha": "e4b891697bbf2a31cde7af64e0ccf302dadc2332", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 9, "deletions": 78, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e1fa5d622615b8f32fa657b584cd5523e9c0cce/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e1fa5d622615b8f32fa657b584cd5523e9c0cce/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=8e1fa5d622615b8f32fa657b584cd5523e9c0cce", "patch": "@@ -409,9 +409,8 @@ gfc_simplify_dint (gfc_expr * e)\n gfc_expr *\n gfc_simplify_anint (gfc_expr * e, gfc_expr * k)\n {\n-  gfc_expr *rtrunc, *result;\n-  int kind, cmp;\n-  mpfr_t half;\n+  gfc_expr *result;\n+  int kind;\n \n   kind = get_kind (BT_REAL, k, \"ANINT\", e->ts.kind);\n   if (kind == -1)\n@@ -422,29 +421,7 @@ gfc_simplify_anint (gfc_expr * e, gfc_expr * k)\n \n   result = gfc_constant_result (e->ts.type, kind, &e->where);\n \n-  rtrunc = gfc_copy_expr (e);\n-\n-  cmp = mpfr_cmp_ui (e->value.real, 0);\n-\n-  gfc_set_model_kind (kind);\n-  mpfr_init (half);\n-  mpfr_set_str (half, \"0.5\", 10, GFC_RND_MODE);\n-\n-  if (cmp > 0)\n-    {\n-      mpfr_add (rtrunc->value.real, e->value.real, half, GFC_RND_MODE);\n-      mpfr_trunc (result->value.real, rtrunc->value.real);\n-    }\n-  else if (cmp < 0)\n-    {\n-      mpfr_sub (rtrunc->value.real, e->value.real, half, GFC_RND_MODE);\n-      mpfr_trunc (result->value.real, rtrunc->value.real);\n-    }\n-  else\n-    mpfr_set_ui (result->value.real, 0, GFC_RND_MODE);\n-\n-  gfc_free_expr (rtrunc);\n-  mpfr_clear (half);\n+  mpfr_round (result->value.real, e->value.real);\n \n   return range_check (result, \"ANINT\");\n }\n@@ -453,39 +430,14 @@ gfc_simplify_anint (gfc_expr * e, gfc_expr * k)\n gfc_expr *\n gfc_simplify_dnint (gfc_expr * e)\n {\n-  gfc_expr *rtrunc, *result;\n-  int cmp;\n-  mpfr_t half;\n+  gfc_expr *result;\n \n   if (e->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  result =\n-    gfc_constant_result (BT_REAL, gfc_default_double_kind, &e->where);\n-\n-  rtrunc = gfc_copy_expr (e);\n+  result = gfc_constant_result (BT_REAL, gfc_default_double_kind, &e->where);\n \n-  cmp = mpfr_cmp_ui (e->value.real, 0);\n-\n-  gfc_set_model_kind (gfc_default_double_kind);\n-  mpfr_init (half);\n-  mpfr_set_str (half, \"0.5\", 10, GFC_RND_MODE);\n-\n-  if (cmp > 0)\n-    {\n-      mpfr_add (rtrunc->value.real, e->value.real, half, GFC_RND_MODE);\n-      mpfr_trunc (result->value.real, rtrunc->value.real);\n-    }\n-  else if (cmp < 0)\n-    {\n-      mpfr_sub (rtrunc->value.real, e->value.real, half, GFC_RND_MODE);\n-      mpfr_trunc (result->value.real, rtrunc->value.real);\n-    }\n-  else\n-    mpfr_set_ui (result->value.real, 0, GFC_RND_MODE);\n-\n-  gfc_free_expr (rtrunc);\n-  mpfr_clear (half);\n+  mpfr_round (result->value.real, e->value.real);\n \n   return range_check (result, \"DNINT\");\n }\n@@ -2378,9 +2330,8 @@ gfc_simplify_nearest (gfc_expr * x, gfc_expr * s)\n static gfc_expr *\n simplify_nint (const char *name, gfc_expr * e, gfc_expr * k)\n {\n-  gfc_expr *rtrunc, *itrunc, *result;\n-  int kind, cmp;\n-  mpfr_t half;\n+  gfc_expr *itrunc, *result;\n+  int kind;\n \n   kind = get_kind (BT_INTEGER, k, name, gfc_default_integer_kind);\n   if (kind == -1)\n@@ -2391,33 +2342,13 @@ simplify_nint (const char *name, gfc_expr * e, gfc_expr * k)\n \n   result = gfc_constant_result (BT_INTEGER, kind, &e->where);\n \n-  rtrunc = gfc_copy_expr (e);\n   itrunc = gfc_copy_expr (e);\n \n-  cmp = mpfr_cmp_ui (e->value.real, 0);\n-\n-  gfc_set_model (e->value.real);\n-  mpfr_init (half);\n-  mpfr_set_str (half, \"0.5\", 10, GFC_RND_MODE);\n-\n-  if (cmp > 0)\n-    {\n-      mpfr_add (rtrunc->value.real, e->value.real, half, GFC_RND_MODE);\n-      mpfr_trunc (itrunc->value.real, rtrunc->value.real);\n-    }\n-  else if (cmp < 0)\n-    {\n-      mpfr_sub (rtrunc->value.real, e->value.real, half, GFC_RND_MODE);\n-      mpfr_trunc (itrunc->value.real, rtrunc->value.real);\n-    }\n-  else\n-    mpfr_set_ui (itrunc->value.real, 0, GFC_RND_MODE);\n+  mpfr_round(itrunc->value.real, e->value.real);\n \n   gfc_mpfr_to_mpz (result->value.integer, itrunc->value.real);\n \n   gfc_free_expr (itrunc);\n-  gfc_free_expr (rtrunc);\n-  mpfr_clear (half);\n \n   return range_check (result, name);\n }"}]}