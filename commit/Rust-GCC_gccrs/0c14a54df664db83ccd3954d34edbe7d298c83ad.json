{"sha": "0c14a54df664db83ccd3954d34edbe7d298c83ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMxNGE1NGRmNjY0ZGI4M2NjZDM5NTRkMzRlZGJlN2QyOThjODNhZA==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2002-06-27T04:33:41Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2002-06-27T04:33:41Z"}, "message": "xtensa-protos.h (xtensa_return_addr): Declare.\n\n        * config/xtensa/xtensa-protos.h (xtensa_return_addr): Declare.\n        config/xtensa/xtensa.c (xtensa_return_addr): New function.\n        config/xtensa/xtensa.h (RETURN_ADDR_RTX): Use xtensa_return_addr.\n        config/xtensa/xtensa.md (fix_return_addr): New pattern.\n\nFrom-SVN: r55020", "tree": {"sha": "38c67d5efdf712d104945d3513f73941e6148563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38c67d5efdf712d104945d3513f73941e6148563"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c14a54df664db83ccd3954d34edbe7d298c83ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c14a54df664db83ccd3954d34edbe7d298c83ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c14a54df664db83ccd3954d34edbe7d298c83ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c14a54df664db83ccd3954d34edbe7d298c83ad/comments", "author": null, "committer": null, "parents": [{"sha": "e9873fd5e10401fa9dab8f1524266b443ac0ede5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9873fd5e10401fa9dab8f1524266b443ac0ede5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9873fd5e10401fa9dab8f1524266b443ac0ede5"}], "stats": {"total": 75, "additions": 57, "deletions": 18}, "files": [{"sha": "973df1e14a91e2cf128e833d103b728a2b89e60c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c14a54df664db83ccd3954d34edbe7d298c83ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c14a54df664db83ccd3954d34edbe7d298c83ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c14a54df664db83ccd3954d34edbe7d298c83ad", "patch": "@@ -1,3 +1,10 @@\n+2002-06-26  Bob Wilson  <bob.wilson@acm.org>\n+\n+\t* config/xtensa/xtensa-protos.h (xtensa_return_addr): Declare.\n+\tconfig/xtensa/xtensa.c (xtensa_return_addr): New function.\n+\tconfig/xtensa/xtensa.h (RETURN_ADDR_RTX): Use xtensa_return_addr.\n+\tconfig/xtensa/xtensa.md (fix_return_addr): New pattern.\n+\n 2002-06-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* mips.c (coprocessor_operand, coprocessor2_operand,"}, {"sha": "bb640bb4384d585e45b00f826994b1728d1dda0a", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c14a54df664db83ccd3954d34edbe7d298c83ad/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c14a54df664db83ccd3954d34edbe7d298c83ad/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=0c14a54df664db83ccd3954d34edbe7d298c83ad", "patch": "@@ -86,6 +86,7 @@ extern void print_operand_address PARAMS ((FILE *, rtx));\n extern void xtensa_output_literal\n   PARAMS ((FILE *, rtx, enum machine_mode, int labelno));\n extern void xtensa_reorg PARAMS ((rtx));\n+extern rtx xtensa_return_addr PARAMS ((int, rtx));\n extern rtx xtensa_builtin_saveregs PARAMS ((void));\n extern enum reg_class xtensa_preferred_reload_class\n   PARAMS ((rtx, enum reg_class));"}, {"sha": "bf669da250363c4f14aecf8e330285463422680b", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c14a54df664db83ccd3954d34edbe7d298c83ad/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c14a54df664db83ccd3954d34edbe7d298c83ad/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=0c14a54df664db83ccd3954d34edbe7d298c83ad", "patch": "@@ -2281,6 +2281,33 @@ xtensa_function_epilogue (file, size)\n }\n \n \n+rtx\n+xtensa_return_addr (count, frame)\n+     int count;\n+     rtx frame;\n+{\n+  rtx result, retaddr;\n+\n+  if (count == -1)\n+    retaddr = gen_rtx_REG (Pmode, 0);\n+  else\n+    {\n+      rtx addr = plus_constant (frame, -4 * UNITS_PER_WORD);\n+      addr = memory_address (Pmode, addr);\n+      retaddr = gen_reg_rtx (Pmode);\n+      emit_move_insn (retaddr, gen_rtx_MEM (Pmode, addr));\n+    }\n+\n+  /* The 2 most-significant bits of the return address on Xtensa hold\n+     the register window size.  To get the real return address, these\n+     bits must be replaced with the high bits from the current PC.  */\n+\n+  result = gen_reg_rtx (Pmode);\n+  emit_insn (gen_fix_return_addr (result, retaddr));\n+  return result;\n+}\n+\n+\n /* Create the va_list data type.\n    This structure is set up by __builtin_saveregs.  The __va_reg\n    field points to a stack-allocated region holding the contents of the"}, {"sha": "22fcb79a14da888607040bd2b33943a5a663c185", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c14a54df664db83ccd3954d34edbe7d298c83ad/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c14a54df664db83ccd3954d34edbe7d298c83ad/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=0c14a54df664db83ccd3954d34edbe7d298c83ad", "patch": "@@ -1060,8 +1060,7 @@ typedef struct xtensa_args {\n    we currently need to ensure that there is a frame pointer when these\n    builtin functions are used. */\n \n-#define SETUP_FRAME_ADDRESSES() \\\n-  xtensa_setup_frame_addresses ()\n+#define SETUP_FRAME_ADDRESSES  xtensa_setup_frame_addresses\n \n /* A C expression whose value is RTL representing the address in a\n    stack frame where the pointer to the caller's frame is stored.\n@@ -1085,22 +1084,8 @@ typedef struct xtensa_args {\n \n /* A C expression whose value is RTL representing the value of the\n    return address for the frame COUNT steps up from the current\n-   frame, after the prologue.  FRAMEADDR is the frame pointer of the\n-   COUNT frame, or the frame pointer of the COUNT - 1 frame if\n-   'RETURN_ADDR_IN_PREVIOUS_FRAME' is defined.\n-\n-   The 2 most-significant bits of the return address on Xtensa hold\n-   the register window size.  To get the real return address, these bits\n-   must be masked off and replaced with the high bits from the current\n-   PC.  Since it is unclear how the __builtin_return_address function\n-   is used, the current code does not do this masking and simply returns\n-   the raw return address from the a0 register. */\n-#define RETURN_ADDR_RTX(count, frame)\t\t\t\t\t\\\n-  ((count) == -1\t\t\t\t\t\t\t\\\n-   ? gen_rtx_REG (Pmode, 0)\t\t\t\t\t\t\\\n-   : gen_rtx_MEM (Pmode, memory_address\t\t\t\t\t\\\n-\t\t  (Pmode, plus_constant (frame, -4 * UNITS_PER_WORD))))\n-\n+   frame, after the prologue.  */\n+#define RETURN_ADDR_RTX  xtensa_return_addr\n \n /* Addressing modes, and classification of registers for them.  */\n "}, {"sha": "cf07ffc25b8fd90f80b1d1e026518c844fea2167", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c14a54df664db83ccd3954d34edbe7d298c83ad/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c14a54df664db83ccd3954d34edbe7d298c83ad/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=0c14a54df664db83ccd3954d34edbe7d298c83ad", "patch": "@@ -34,6 +34,7 @@\n   (UNSPEC_NSAU\t\t1)\n   (UNSPEC_NOP\t\t2)\n   (UNSPEC_PLT\t\t3)\n+  (UNSPEC_RET_ADDR\t4)\n   (UNSPECV_SET_FP\t1)\n ])\n \n@@ -1370,6 +1371,7 @@\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"6,6\")])\n \n+\n ;;\n ;;  ....................\n ;;\n@@ -2432,6 +2434,23 @@\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"0\")])\n \n+;; The fix_return_addr pattern sets the high 2 bits of an address in a\n+;; register to match the high bits of the current PC.\n+\n+(define_insn \"fix_return_addr\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")]\n+\t\t   UNSPEC_RET_ADDR))\n+   (clobber (match_scratch:SI 2 \"=r\"))\n+   (clobber (match_scratch:SI 3 \"=r\"))]\n+  \"\"\n+  \"mov\\\\t%2, a0\\;call0\\\\t0f\\;.align\\\\t4\\;0:\\;mov\\\\t%3, a0\\;mov\\\\ta0, %2\\;\\\n+srli\\\\t%3, %3, 30\\;slli\\\\t%0, %1, 2\\;ssai\\\\t2\\;src\\\\t%0, %3, %0\"\n+  [(set_attr \"type\"\t\"multi\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"24\")])\n+\n+\n ;;\n ;;  ....................\n ;;"}]}