{"sha": "2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEyNTNjNWJiYTllY2Y0ZjA5MjQyMjUzYmY4ZWZkMDVjOWNjZTlkZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T10:58:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T10:58:41Z"}, "message": "[multiple changes]\n\n2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_elab.adb (Check_Internal_Call): Do not\n\tconsider a call when it appears within pragma Initial_Condition\n\tsince the pragma is part of the elaboration statements of a\n\tpackage body and may only call external subprograms or subprograms\n\twhose body is already available.\n\t(Within_Initial_Condition): New routine.\n\n2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.adb (Build_Procedure_Form): Prevent double generation\n\tof the procedure form when dealing with an expression function\n\twhose return type is an array.\n\t* sem_ch3.adb: Fix out-of order Has_Predicates setting.\n\t* exp_ch6.adb: Proper conversion for inherited operation in C.\n\t* sem_ch6.adb: Code cleanup.\n\n2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* lib-xref.ads, sem_ch10.adb: minor style fix in comment\n\t* g-socket.adb: Minor reformatting.\n\t* sinfo.ads: Minor comment correction.\n\t* sem_warn.ads: minor grammar fix in comment\n\nFrom-SVN: r235482", "tree": {"sha": "2f34e307917721b814a777309cf21c4f55dddb89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f34e307917721b814a777309cf21c4f55dddb89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/comments", "author": null, "committer": null, "parents": [{"sha": "780fd3766a642683f0026ac3ac8747529f7a839f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/780fd3766a642683f0026ac3ac8747529f7a839f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/780fd3766a642683f0026ac3ac8747529f7a839f"}], "stats": {"total": 172, "additions": 141, "deletions": 31}, "files": [{"sha": "8971b75a27a5c3bd79deca84b6fa1a2030c1447c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "patch": "@@ -1,3 +1,28 @@\n+2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_elab.adb (Check_Internal_Call): Do not\n+\tconsider a call when it appears within pragma Initial_Condition\n+\tsince the pragma is part of the elaboration statements of a\n+\tpackage body and may only call external subprograms or subprograms\n+\twhose body is already available.\n+\t(Within_Initial_Condition): New routine.\n+\n+2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb (Build_Procedure_Form): Prevent double generation\n+\tof the procedure form when dealing with an expression function\n+\twhose return type is an array.\n+\t* sem_ch3.adb: Fix out-of order Has_Predicates setting.\n+\t* exp_ch6.adb: Proper conversion for inherited operation in C.\n+\t* sem_ch6.adb: Code cleanup.\n+\n+2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* lib-xref.ads, sem_ch10.adb: minor style fix in comment\n+\t* g-socket.adb: Minor reformatting.\n+\t* sinfo.ads: Minor comment correction.\n+\t* sem_warn.ads: minor grammar fix in comment\n+\n 2016-04-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (gnat_to_gnu_entity): Adjust prototype."}, {"sha": "4e996a1641150aaabeabc9ef66dd092adad68c9b", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "patch": "@@ -8477,7 +8477,10 @@ package body Exp_Ch6 is\n          if not Comes_From_Source (Orig_Func)\n            and then Etype (Orig_Func) /= Etype (Func_Id)\n          then\n-            Last_Actual := Unchecked_Convert_To (Etype (Func_Id), Last_Actual);\n+            Last_Actual :=\n+              Make_Type_Conversion (Loc,\n+                New_Occurrence_Of (Etype (Func_Id), Loc),\n+                Last_Actual);\n          end if;\n \n          Append_To (Actuals,"}, {"sha": "6090ab93b7d4ce0a5ff06a2f95a24b69e393d06d", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "patch": "@@ -932,15 +932,23 @@ package body Exp_Util is\n       Proc_Decl    : Node_Id;\n \n    begin\n-      --  No action needed if this transformation was already done or in case\n-      --  of subprogram renaming declarations\n+      --  No action needed if this transformation was already done, or in case\n+      --  of subprogram renaming declarations.\n \n       if Nkind (Specification (N)) = N_Procedure_Specification\n         or else Nkind (N) = N_Subprogram_Renaming_Declaration\n       then\n          return;\n       end if;\n \n+      --  Ditto when dealing with an expression function, where both the\n+      --  original expression and the generated declaration end up being\n+      --  expanded here.\n+\n+      if Rewritten_For_C (Subp) then\n+         return;\n+      end if;\n+\n       Proc_Formals := New_List;\n \n       --  Create a list of formal parameters with the same types as the"}, {"sha": "6a61a810e3958355e47b857d557783e6c2d2df55", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "patch": "@@ -1703,9 +1703,12 @@ package body GNAT.Sockets is\n \n    procedure Raise_Host_Error (H_Error : Integer; Name : String) is\n       function Dedot (Value : String) return String is\n-        (if Value /= \"\" and then Value (Value'Last) = '.'\n-         then Value (Value'First .. Value'Last - 1) else Value);\n+        (if Value /= \"\" and then Value (Value'Last) = '.' then\n+            Value (Value'First .. Value'Last - 1)\n+         else\n+            Value);\n       --  Removes dot at the end of error message\n+\n    begin\n       raise Host_Error with\n         Err_Code_Image (H_Error)"}, {"sha": "4b5edb8eda70e276e8bfa23780b98cd879220dc8", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1998-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -611,7 +611,7 @@ package Lib.Xref is\n      Table_Name           => \"Name_Deferred_References\");\n \n    procedure Process_Deferred_References;\n-   --  This procedure is called from Frontend to process these table entries.\n+   --  This procedure is called from Frontend to process these table entries\n \n    -----------------------------\n    -- SPARK Xrefs Information --"}, {"sha": "9855c9e818e4cd4df92c564bed3dde8e6c9da224", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "patch": "@@ -693,7 +693,7 @@ package body Sem_Ch10 is\n       if Nkind (Unit_Node) = N_Package_Body then\n \n          --  If no Lib_Unit, then there was a serious previous error, so just\n-         --  ignore the entire analysis effort\n+         --  ignore the entire analysis effort.\n \n          if No (Lib_Unit) then\n             Check_Error_Detected;"}, {"sha": "63704fba139b53c9811b28da220cabba0a26596d", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "patch": "@@ -20057,11 +20057,11 @@ package body Sem_Ch3 is\n       --  built. Still it is a cheap check and seems safer to make it.\n \n       if Has_Predicates (Priv_T) then\n+         Set_Has_Predicates (Full_T);\n+\n          if Present (Predicate_Function (Priv_T)) then\n             Set_Predicate_Function (Full_T, Predicate_Function (Priv_T));\n          end if;\n-\n-         Set_Has_Predicates (Full_T);\n       end if;\n    end Process_Full_View;\n "}, {"sha": "a6f22b1744b9b3a8a9f5fa7514ee06f08b1b390b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "patch": "@@ -3306,12 +3306,14 @@ package body Sem_Ch6 is\n       --  has already been created. We reuse the source body of the function,\n       --  because in an instance it may contain global references that cannot\n       --  be reanalyzed. The source function itself is not used any further,\n-      --  so we mark it as having a completion.\n+      --  so we mark it as having a completion. If the subprogram is a stub the\n+      --  transformation is done later, when the proper body is analyzed.\n \n       if Expander_Active\n         and then Modify_Tree_For_C\n         and then Present (Spec_Id)\n         and then Ekind (Spec_Id) = E_Function\n+        and then Nkind (N) /= N_Subprogram_Body_Stub\n         and then Rewritten_For_C (Spec_Id)\n       then\n          Set_Has_Completion (Spec_Id);"}, {"sha": "2b2747e02c016a550de8d0db9314e7167392a541", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 85, "deletions": 16, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -91,16 +91,16 @@ package body Sem_Elab is\n      Table_Increment      => 100,\n      Table_Name           => \"Elab_Visited\");\n \n-   --  This table stores calls to Check_Internal_Call that are delayed\n-   --  until all generics are instantiated, and in particular that all\n-   --  generic bodies have been inserted. We need to delay, because we\n-   --  need to be able to look through the inserted bodies.\n+   --  This table stores calls to Check_Internal_Call that are delayed until\n+   --  all generics are instantiated and in particular until after all generic\n+   --  bodies have been inserted. We need to delay, because we need to be able\n+   --  to look through the inserted bodies.\n \n    type Delay_Element is record\n       N : Node_Id;\n-      --  The parameter N from the call to Check_Internal_Call. Note that\n-      --  this node may get rewritten over the delay period by expansion\n-      --  in the call case (but not in the instantiation case).\n+      --  The parameter N from the call to Check_Internal_Call. Note that this\n+      --  node may get rewritten over the delay period by expansion in the call\n+      --  case (but not in the instantiation case).\n \n       E : Entity_Id;\n       --  The parameter E from the call to Check_Internal_Call\n@@ -109,8 +109,8 @@ package body Sem_Elab is\n       --  The parameter Orig_Ent from the call to Check_Internal_Call\n \n       Curscop : Entity_Id;\n-      --  The current scope of the call. This is restored when we complete\n-      --  the delayed call, so that we do this in the right scope.\n+      --  The current scope of the call. This is restored when we complete the\n+      --  delayed call, so that we do this in the right scope.\n \n       From_Elab_Code : Boolean;\n       --  Save indication of whether this call is from elaboration code\n@@ -2032,24 +2032,85 @@ package body Sem_Elab is\n       Outer_Scope : Entity_Id;\n       Orig_Ent    : Entity_Id)\n    is\n+      function Within_Initial_Condition (Call : Node_Id) return Boolean;\n+      --  Determine whether call Call occurs within pragma Initial_Condition or\n+      --  pragma Check with check_kind set to Initial_Condition.\n+\n+      ------------------------------\n+      -- Within_Initial_Condition --\n+      ------------------------------\n+\n+      function Within_Initial_Condition (Call : Node_Id) return Boolean is\n+         Args : List_Id;\n+         Nam  : Name_Id;\n+         Par  : Node_Id;\n+\n+      begin\n+         --  Traverse the parent chain looking for an enclosing pragma\n+\n+         Par := Call;\n+         while Present (Par) loop\n+            if Nkind (Par) = N_Pragma then\n+               Nam := Pragma_Name (Par);\n+\n+               --  Pragma Initial_Condition appears in its alternative from as\n+               --  Check (Initial_Condition, ...).\n+\n+               if Nam = Name_Check then\n+                  Args := Pragma_Argument_Associations (Par);\n+\n+                  --  Pragma Check should have at least two arguments\n+\n+                  pragma Assert (Present (Args));\n+\n+                  return\n+                    Chars (Expression (First (Args))) = Name_Initial_Condition;\n+\n+               --  Direct match\n+\n+               elsif Nam = Name_Initial_Condition then\n+                  return True;\n+\n+               --  Since pragmas are never nested within other pragmas, stop\n+               --  the traversal.\n+\n+               else\n+                  return False;\n+               end if;\n+\n+            --  Prevent the search from going too far\n+\n+            elsif Is_Body_Or_Package_Declaration (Par) then\n+               exit;\n+            end if;\n+\n+            Par := Parent (Par);\n+         end loop;\n+\n+         return False;\n+      end Within_Initial_Condition;\n+\n+      --  Local variables\n+\n       Inst_Case : constant Boolean := Nkind (N) in N_Generic_Instantiation;\n \n+   --  Start of processing for Check_Internal_Call\n+\n    begin\n       --  For P'Access, we want to warn if the -gnatw.f switch is set, and the\n       --  node comes from source.\n \n-      if Nkind (N) = N_Attribute_Reference and then\n-        (not Warn_On_Elab_Access or else not Comes_From_Source (N))\n+      if Nkind (N) = N_Attribute_Reference\n+        and then (not Warn_On_Elab_Access or else not Comes_From_Source (N))\n       then\n          return;\n \n       --  If not function or procedure call, instantiation, or 'Access, then\n       --  ignore call (this happens in some error cases and rewriting cases).\n \n-      elsif not Nkind_In\n-               (N, N_Function_Call,\n-                   N_Procedure_Call_Statement,\n-                   N_Attribute_Reference)\n+      elsif not Nkind_In (N, N_Attribute_Reference,\n+                             N_Function_Call,\n+                             N_Procedure_Call_Statement)\n         and then not Inst_Case\n       then\n          return;\n@@ -2091,6 +2152,14 @@ package body Sem_Elab is\n \n       elsif Inside_A_Generic then\n          return;\n+\n+      --  Nothing to do when the call appears within pragma Initial_Condition.\n+      --  The pragma is part of the elaboration statements of a package body\n+      --  and may only call external subprograms or subprograms whose body is\n+      --  already available.\n+\n+      elsif Within_Initial_Condition (N) then\n+         return;\n       end if;\n \n       --  Delay this call if we are still delaying calls"}, {"sha": "cd71e3466b8123911cf99ef0c87e8ab4d84e60ab", "filename": "gcc/ada/sem_warn.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fsem_warn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fsem_warn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.ads?ref=2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -238,7 +238,7 @@ package Sem_Warn is\n    --  should only be made if at least one of the flags Warn_On_Modified_Unread\n    --  or Warn_On_All_Unread_Out_Parameters is True, and if Ent is in the\n    --  extended main source unit. N is Empty for the end of block call\n-   --  (warning message says value unreferenced), or the it is the node for\n+   --  (warning message says value unreferenced), or it is the node for\n    --  an overwriting assignment (warning message points to this assignment).\n \n    procedure Warn_On_Useless_Assignments (E : Entity_Id);"}, {"sha": "d27cb734fe21306c5279aa3707590e078c8f19f2", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a253c5bba9ecf4f09242253bf8efd05c9cce9de/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=2a253c5bba9ecf4f09242253bf8efd05c9cce9de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2754,7 +2754,7 @@ package Sinfo is\n \n       --  Note: aliased is not permitted in Ada 83 mode\n \n-      --  The N_Object_Declaration node is only for the first two cases.\n+      --  The N_Object_Declaration node is only for the first three cases.\n       --  Single task declaration is handled by P_Task (9.1)\n       --  Single protected declaration is handled by P_protected (9.5)\n "}]}