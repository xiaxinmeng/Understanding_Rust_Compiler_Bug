{"sha": "3ea1fdd31863e664a1beffbec13556184a1848cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VhMWZkZDMxODYzZTY2NGExYmVmZmJlYzEzNTU2MTg0YTE4NDhjZg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-25T20:24:03Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-25T20:24:03Z"}, "message": "(sparc_builtin_saveregs): New function.\n\nFrom-SVN: r3337", "tree": {"sha": "a9c7823deb1e83c63cd1e8de37c09764dd7a323e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9c7823deb1e83c63cd1e8de37c09764dd7a323e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ea1fdd31863e664a1beffbec13556184a1848cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea1fdd31863e664a1beffbec13556184a1848cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ea1fdd31863e664a1beffbec13556184a1848cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea1fdd31863e664a1beffbec13556184a1848cf/comments", "author": null, "committer": null, "parents": [{"sha": "8b1d5eb76b5f9f8aba560fa3b5d92c6f0d821565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b1d5eb76b5f9f8aba560fa3b5d92c6f0d821565", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b1d5eb76b5f9f8aba560fa3b5d92c6f0d821565"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "5b501961f56ba2e7c6f137ebb3df77182679d92e", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ea1fdd31863e664a1beffbec13556184a1848cf/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ea1fdd31863e664a1beffbec13556184a1848cf/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3ea1fdd31863e664a1beffbec13556184a1848cf", "patch": "@@ -2259,6 +2259,42 @@ output_function_epilogue (file, size, leaf_function)\n       target_flags |= old_target_epilogue;\n     }\n }\n+\n+/* Do what is necessary for `va_start'.  The argument is ignored;\n+   We look at the current function to determine if stdarg or varargs\n+   is used and return the address of the first unnamed parameter.  */\n+\n+rtx\n+sparc_builtin_saveregs (arglist)\n+     tree arglist;\n+{\n+  tree fntype = TREE_TYPE (current_function_decl);\n+  int stdarg = (TYPE_ARG_TYPES (fntype) != 0\n+\t\t&& (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n+\t\t    != void_type_node));\n+  int first_reg = current_function_args_info;\n+  rtx address;\n+  int regno;\n+\n+  if (! stdarg)\n+    first_reg = 0;\n+\n+  for (regno = first_reg; regno < NPARM_REGS; regno++)\n+    emit_move_insn (gen_rtx (MEM, word_mode,\n+\t\t\t     gen_rtx (PLUS, Pmode,\n+\t\t\t\t      frame_pointer_rtx,\n+\t\t\t\t      GEN_INT (STACK_POINTER_OFFSET\n+\t\t\t\t\t       + UNITS_PER_WORD * regno))),\n+\t\t    gen_rtx (REG, word_mode, BASE_INCOMING_ARG_REG (word_mode)\n+\t\t\t     + regno));\n+\n+  address = gen_rtx (PLUS, Pmode,\n+\t\t     frame_pointer_rtx,\n+\t\t     GEN_INT (STACK_POINTER_OFFSET\n+\t\t\t      + UNITS_PER_WORD * first_reg));\n+\n+  return address;\n+}\n \f\n /* Return the string to output a conditional branch to LABEL, which is\n    the operand number of the label.  OP is the conditional expression.  The"}]}