{"sha": "b12ebd96ba91490e361a139dca9d0fc17a67312f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyZWJkOTZiYTkxNDkwZTM2MWExMzlkY2E5ZDBmYzE3YTY3MzEyZg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2013-09-12T13:30:31Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-09-12T13:30:31Z"}, "message": "tree-flow.h (FREE_SSANAMES): Move to tree-ssanames.c (SSANAMES...\n\n\n\t* tree-flow.h (FREE_SSANAMES): Move to tree-ssanames.c\n\t(SSANAMES, MODIFIED_NORETURN_CALLS, DEFAULT_DEFS, ptr_info_def,\n\tnum_ssa_names, ssa_name): Move to tree-ssanames.h + prototypes.\n\t* tree-flow-inline.h (make_ssa_name, copy_ssa_name, duplicate_ssa_name,\n\tmake_temp_ssa_name): move to tree-ssanames.h\n\t* tree-ssa-alias.h: Move prototype.\n\t* tree-ssa.h: Include tree-ssanames.h.\n\t* tree-ssanames.c (FREE_SSANAMES): Move to here.\n\t* tree-ssanames.h: New.  Move items from tree-flow*.h\n\t* Makefile.in (tree-ssanames.h): Add to tree-ssanames.o and GTFILES.\n\nFrom-SVN: r202527", "tree": {"sha": "e3ce39c8fbda173b827c7f34d8c74d43cf39f543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3ce39c8fbda173b827c7f34d8c74d43cf39f543"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b12ebd96ba91490e361a139dca9d0fc17a67312f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12ebd96ba91490e361a139dca9d0fc17a67312f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b12ebd96ba91490e361a139dca9d0fc17a67312f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12ebd96ba91490e361a139dca9d0fc17a67312f/comments", "author": null, "committer": null, "parents": [{"sha": "0e2cd22d3dcffb2c2182bdbdf835644d2b862564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2cd22d3dcffb2c2182bdbdf835644d2b862564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e2cd22d3dcffb2c2182bdbdf835644d2b862564"}], "stats": {"total": 244, "additions": 138, "deletions": 106}, "files": [{"sha": "82c4c08ee38a1da3b240ca49dc306567c50b019e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b12ebd96ba91490e361a139dca9d0fc17a67312f", "patch": "@@ -1,3 +1,16 @@\n+2013-09-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-flow.h (FREE_SSANAMES): Move to tree-ssanames.c\n+\t(SSANAMES, MODIFIED_NORETURN_CALLS, DEFAULT_DEFS, ptr_info_def,\n+\tnum_ssa_names, ssa_name): Move to tree-ssanames.h + prototypes.\n+\t* tree-flow-inline.h (make_ssa_name, copy_ssa_name, duplicate_ssa_name,\n+\tmake_temp_ssa_name): move to tree-ssanames.h\n+\t* tree-ssa-alias.h: Move prototype.\n+\t* tree-ssa.h: Include tree-ssanames.h.\n+\t* tree-ssanames.c (FREE_SSANAMES): Move to here.\n+\t* tree-ssanames.h: New.  Move items from tree-flow*.h\n+\t* Makefile.in (tree-ssanames.h): Add to tree-ssanames.o and GTFILES.\n+\n 2013-09-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58404"}, {"sha": "b02d61d3d04fd994cb97394c700aef5438a7ba31", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b12ebd96ba91490e361a139dca9d0fc17a67312f", "patch": "@@ -2379,7 +2379,7 @@ tree-ssa-threadupdate.o : tree-ssa-threadupdate.c $(TREE_SSA_H) $(CONFIG_H) \\\n    $(DIAGNOSTIC_H) $(FUNCTION_H) $(TM_H) coretypes.h $(DUMPFILE_H) \\\n    $(BASIC_BLOCK_H) $(FLAGS_H) $(CFGLOOP_H)\n tree-ssanames.o : tree-ssanames.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(TREE_H) $(TREE_SSA_H) $(TREE_PASS_H)\n+   $(TM_H) $(TREE_H) $(TREE_SSA_H) $(TREE_PASS_H) tree-ssanames.h\n tree-phinodes.o : tree-phinodes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(GGC_H) $(BASIC_BLOCK_H) $(TREE_SSA_H) \\\n    gt-tree-phinodes.h $(DIAGNOSTIC_CORE_H) $(GIMPLE_H)\n@@ -3837,6 +3837,7 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/tree-ssa-propagate.c \\\n   $(srcdir)/tree-phinodes.c \\\n   $(srcdir)/tree-ssa-alias.h \\\n+  $(srcdir)/tree-ssanames.h \\\n   $(srcdir)/ipa-prop.h \\\n   $(srcdir)/trans-mem.c \\\n   $(srcdir)/lto-streamer.h \\"}, {"sha": "03c4840bf1a2916f8c69662e1d8dfcf2feb10cc7", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=b12ebd96ba91490e361a139dca9d0fc17a67312f", "patch": "@@ -1159,46 +1159,6 @@ gimple_ssa_operands (const struct function *fun)\n }\n \n \n-/* Return an SSA_NAME node for variable VAR defined in statement STMT\n-   in function cfun.  */\n-\n-static inline tree\n-make_ssa_name (tree var, gimple stmt)\n-{\n-  return make_ssa_name_fn (cfun, var, stmt);\n-}\n-\n-/* Return an SSA_NAME node using the template SSA name NAME defined in\n-   statement STMT in function cfun.  */\n-\n-static inline tree\n-copy_ssa_name (tree var, gimple stmt)\n-{\n-  return copy_ssa_name_fn (cfun, var, stmt);\n-}\n-\n-/*  Creates a duplicate of a SSA name NAME tobe defined by statement STMT\n-    in function cfun.  */\n-\n-static inline tree\n-duplicate_ssa_name (tree var, gimple stmt)\n-{\n-  return duplicate_ssa_name_fn (cfun, var, stmt);\n-}\n-\n-/* Return an anonymous SSA_NAME node for type TYPE defined in statement STMT\n-   in function cfun.  Arrange so that it uses NAME in dumps.  */\n-\n-static inline tree\n-make_temp_ssa_name (tree type, gimple stmt, const char *name)\n-{\n-  tree ssa_name;\n-  gcc_checking_assert (TYPE_P (type));\n-  ssa_name = make_ssa_name_fn (cfun, type, stmt);\n-  SET_SSA_NAME_VAR_OR_IDENTIFIER (ssa_name, get_identifier (name));\n-  return ssa_name;\n-}\n-\n /* Returns the base object and a constant BITS_PER_UNIT offset in *POFFSET that\n    denotes the starting address of the memory access EXP.\n    Returns NULL_TREE if the offset is not constant or any component"}, {"sha": "9c5d979872d0ac40f3ca4e23f8125f12b931d4e5", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=b12ebd96ba91490e361a139dca9d0fc17a67312f", "patch": "@@ -92,12 +92,6 @@ struct GTY(()) gimple_df {\n   htab_t GTY ((param_is (struct tm_restart_node))) tm_restart;\n };\n \n-/* Accessors for internal use only.  Generic code should use abstraction\n-   provided by tree-flow-inline.h or specific modules.  */\n-#define FREE_SSANAMES(fun) (fun)->gimple_df->free_ssanames\n-#define SSANAMES(fun) (fun)->gimple_df->ssa_names\n-#define MODIFIED_NORETURN_CALLS(fun) (fun)->gimple_df->modified_noreturn_calls\n-#define DEFAULT_DEFS(fun) (fun)->gimple_df->default_defs\n \n typedef struct\n {\n@@ -113,41 +107,6 @@ typedef struct\n \t!end_htab_p (&(ITER)); \\\n \tRESULT = (TYPE) next_htab_element (&(ITER)))\n \n-/*---------------------------------------------------------------------------\n-\t\t      Attributes for SSA_NAMEs.\n-\n-  NOTE: These structures are stored in struct tree_ssa_name\n-  but are only used by the tree optimizers, so it makes better sense\n-  to declare them here to avoid recompiling unrelated files when\n-  making changes.\n----------------------------------------------------------------------------*/\n-\n-/* Aliasing information for SSA_NAMEs representing pointer variables.  */\n-\n-struct GTY(()) ptr_info_def\n-{\n-  /* The points-to solution.  */\n-  struct pt_solution pt;\n-\n-  /* Alignment and misalignment of the pointer in bytes.  Together\n-     align and misalign specify low known bits of the pointer.\n-     ptr & (align - 1) == misalign.  */\n-\n-  /* When known, this is the power-of-two byte alignment of the object this\n-     pointer points into.  This is usually DECL_ALIGN_UNIT for decls and\n-     MALLOC_ABI_ALIGNMENT for allocated storage.  When the alignment is not\n-     known, it is zero.  Do not access directly but use functions\n-     get_ptr_info_alignment, set_ptr_info_alignment,\n-     mark_ptr_info_alignment_unknown and similar.  */\n-  unsigned int align;\n-\n-  /* When alignment is known, the byte offset this pointer differs from the\n-     above alignment.  Access only through the same helper functions as align\n-     above.  */\n-  unsigned int misalign;\n-};\n-\n-\n /* It is advantageous to avoid things like life analysis for variables which\n    do not need PHI nodes.  This enum describes whether or not a particular\n    variable may need a PHI node.  */\n@@ -282,9 +241,6 @@ struct int_tree_map {\n   tree to;\n };\n \n-#define num_ssa_names (vec_safe_length (cfun->gimple_df->ssa_names))\n-#define ssa_name(i) ((*cfun->gimple_df->ssa_names)[(i)])\n-\n /* Macros for showing usage statistics.  */\n #define SCALE(x) ((unsigned long) ((x) < 1024*10\t\\\n \t\t  ? (x)\t\t\t\t\t\\\n@@ -479,26 +435,6 @@ void mark_virtual_operands_for_renaming (struct function *);\n tree get_current_def (tree);\n void set_current_def (tree, tree);\n \n-/* In tree-ssanames.c  */\n-extern void init_ssanames (struct function *, int);\n-extern void fini_ssanames (void);\n-extern tree make_ssa_name_fn (struct function *, tree, gimple);\n-extern tree copy_ssa_name_fn (struct function *, tree, gimple);\n-extern tree duplicate_ssa_name_fn (struct function *, tree, gimple);\n-extern void duplicate_ssa_name_ptr_info (tree, struct ptr_info_def *);\n-extern void release_ssa_name (tree);\n-extern void release_defs (gimple);\n-extern void replace_ssa_name_symbol (tree, tree);\n-extern bool get_ptr_info_alignment (struct ptr_info_def *, unsigned int *,\n-\t\t\t\t    unsigned int *);\n-extern void mark_ptr_info_alignment_unknown (struct ptr_info_def *);\n-extern void set_ptr_info_alignment (struct ptr_info_def *, unsigned int,\n-\t\t\t\t    unsigned int);\n-extern void adjust_ptr_info_misalignment (struct ptr_info_def *,\n-\t\t\t\t\t  unsigned int);\n-\n-extern void ssanames_print_statistics (void);\n-\n /* In tree-ssa-ccp.c  */\n tree fold_const_aggregate_ref (tree);\n tree gimple_fold_stmt_to_constant (gimple, tree (*)(tree));"}, {"sha": "e560685028bba67e554849c2449e6c271745180e", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=b12ebd96ba91490e361a139dca9d0fc17a67312f", "patch": "@@ -116,7 +116,6 @@ extern void *walk_non_aliased_vuses (ao_ref *, tree,\n extern unsigned int walk_aliased_vdefs (ao_ref *, tree,\n \t\t\t\t\tbool (*)(ao_ref *, tree, void *),\n \t\t\t\t\tvoid *, bitmap *);\n-extern struct ptr_info_def *get_ptr_info (tree);\n extern void dump_alias_info (FILE *);\n extern void debug_alias_info (void);\n extern void dump_points_to_solution (FILE *, struct pt_solution *);"}, {"sha": "457fd6bf5e7bde0bee9a7a57ad3506a351dc20d1", "filename": "gcc/tree-ssa.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2Ftree-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2Ftree-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.h?ref=b12ebd96ba91490e361a139dca9d0fc17a67312f", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_TREE_SSA_H\n \n #include \"tree-flow.h\"\n+#include \"tree-ssanames.h\"\n \n /* Mapping for redirected edges.  */\n struct _edge_var_map {"}, {"sha": "e64bd656dffdd2ee344ee83bcb4603fe26872eef", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=b12ebd96ba91490e361a139dca9d0fc17a67312f", "patch": "@@ -60,6 +60,9 @@ along with GCC; see the file COPYING3.  If not see\n unsigned int ssa_name_nodes_reused;\n unsigned int ssa_name_nodes_created;\n \n+#define FREE_SSANAMES(fun) (fun)->gimple_df->free_ssanames\n+\n+\n /* Initialize management of SSA_NAMEs to default SIZE.  If SIZE is\n    zero use default.  */\n "}, {"sha": "8cc3efd02b1a57be0c21540d930c1b88ed1a948e", "filename": "gcc/tree-ssanames.h", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b12ebd96ba91490e361a139dca9d0fc17a67312f/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=b12ebd96ba91490e361a139dca9d0fc17a67312f", "patch": "@@ -0,0 +1,119 @@\n+/* SSA name expresssons routines\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_TREE_SSANAMES_H\n+#define GCC_TREE_SSANAMES_H\n+\n+/* Aliasing information for SSA_NAMEs representing pointer variables.  */\n+\n+struct GTY(()) ptr_info_def\n+{\n+  /* The points-to solution.  */\n+  struct pt_solution pt;\n+\n+  /* Alignment and misalignment of the pointer in bytes.  Together\n+     align and misalign specify low known bits of the pointer.\n+     ptr & (align - 1) == misalign.  */\n+\n+  /* When known, this is the power-of-two byte alignment of the object this\n+     pointer points into.  This is usually DECL_ALIGN_UNIT for decls and\n+     MALLOC_ABI_ALIGNMENT for allocated storage.  When the alignment is not\n+     known, it is zero.  Do not access directly but use functions\n+     get_ptr_info_alignment, set_ptr_info_alignment,\n+     mark_ptr_info_alignment_unknown and similar.  */\n+  unsigned int align;\n+\n+  /* When alignment is known, the byte offset this pointer differs from the\n+     above alignment.  Access only through the same helper functions as align\n+     above.  */\n+  unsigned int misalign;\n+};\n+\n+\n+#define SSANAMES(fun) (fun)->gimple_df->ssa_names\n+#define MODIFIED_NORETURN_CALLS(fun) (fun)->gimple_df->modified_noreturn_calls\n+#define DEFAULT_DEFS(fun) (fun)->gimple_df->default_defs\n+\n+#define num_ssa_names (vec_safe_length (cfun->gimple_df->ssa_names))\n+#define ssa_name(i) ((*cfun->gimple_df->ssa_names)[(i)])\n+\n+\n+extern void init_ssanames (struct function *, int);\n+extern void fini_ssanames (void);\n+extern void ssanames_print_statistics (void);\n+extern tree make_ssa_name_fn (struct function *, tree, gimple);\n+extern void release_ssa_name (tree);\n+extern bool get_ptr_info_alignment (struct ptr_info_def *, unsigned int *,\n+\t\t\t\t    unsigned int *);\n+extern void mark_ptr_info_alignment_unknown (struct ptr_info_def *);\n+extern void set_ptr_info_alignment (struct ptr_info_def *, unsigned int,\n+\t\t\t\t    unsigned int);\n+extern void adjust_ptr_info_misalignment (struct ptr_info_def *,\n+\t\t\t\t\t  unsigned int);\n+extern struct ptr_info_def *get_ptr_info (tree);\n+\n+extern tree copy_ssa_name_fn (struct function *, tree, gimple);\n+extern void duplicate_ssa_name_ptr_info (tree, struct ptr_info_def *);\n+extern tree duplicate_ssa_name_fn (struct function *, tree, gimple);\n+extern void release_defs (gimple);\n+extern void replace_ssa_name_symbol (tree, tree);\n+\n+\n+/* Return an SSA_NAME node for variable VAR defined in statement STMT\n+   in function cfun.  */\n+\n+static inline tree\n+make_ssa_name (tree var, gimple stmt)\n+{\n+  return make_ssa_name_fn (cfun, var, stmt);\n+}\n+\n+/* Return an SSA_NAME node using the template SSA name NAME defined in\n+   statement STMT in function cfun.  */\n+\n+static inline tree\n+copy_ssa_name (tree var, gimple stmt)\n+{\n+  return copy_ssa_name_fn (cfun, var, stmt);\n+}\n+\n+/*  Creates a duplicate of a SSA name NAME tobe defined by statement STMT\n+    in function cfun.  */\n+\n+static inline tree\n+duplicate_ssa_name (tree var, gimple stmt)\n+{\n+  return duplicate_ssa_name_fn (cfun, var, stmt);\n+}\n+\n+/* Return an anonymous SSA_NAME node for type TYPE defined in statement STMT\n+   in function cfun.  Arrange so that it uses NAME in dumps.  */\n+\n+static inline tree\n+make_temp_ssa_name (tree type, gimple stmt, const char *name)\n+{\n+  tree ssa_name;\n+  gcc_checking_assert (TYPE_P (type));\n+  ssa_name = make_ssa_name_fn (cfun, type, stmt);\n+  SET_SSA_NAME_VAR_OR_IDENTIFIER (ssa_name, get_identifier (name));\n+  return ssa_name;\n+}\n+\n+\n+#endif /* GCC_TREE_SSANAMES_H */"}]}