{"sha": "6539bbc14836b8e0fa08944be2c069b58bed9455", "node_id": "C_kwDOANBUbNoAKDY1MzliYmMxNDgzNmI4ZTBmYTA4OTQ0YmUyYzA2OWI1OGJlZDk0NTU", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-12-14T18:01:11Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-12-14T18:08:49Z"}, "message": "ipa-sra: Fix address escape case when detecting Fortran descriptors\n\nThe discussion about scan_expr_access in ipa-sra.cc brought my\nattention to a missing case of handling an ADDR_EXPR.  As the added\ntestcase shows, the heuristics which looks for parameters which are\nlocal variables that are only written to and passed by reference in\ncalls can miss a case where the address of the variable in question is\nstored elsewhere in an assignment.\n\nThis patch adds that case to the function and also adds the\noptimization that Richi suggested, i.e. bailing out early on simple\nSSA_NAMEs and constant trees.\n\ngcc/ChangeLog:\n\n2022-12-14  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-sra.cc (loaded_decls): Adjust comment.\n\t(scan_expr_access): Also detect assignments of address of local\n\tvariables to a variable.  Bail out early on SSA_NAMEs and\n\tconstants as an optimization.\n\ngcc/testsuite/ChangeLog:\n\n2022-12-14  Martin Jambor  <mjambor@suse.cz>\n\n\t* gcc.dg/ipa/ipa-sra-29.c: New test.", "tree": {"sha": "8ba85336d97cc0091725697dc5e5812a907ee73f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba85336d97cc0091725697dc5e5812a907ee73f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6539bbc14836b8e0fa08944be2c069b58bed9455", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmOaETEACgkQv2PBvD+k\nNUBdXRAAvTJSs2tSBJDlW9hyM70eNStGoGvuCK5Mbqg3LM91cvkM4HRFfYMynoz/\nhFebEU0U7HGfhx/8110UlezyIqsyH0RVtqvMzCtJ6BGiSDm0bwQhknQgyTApFlaV\n0DVPiewmj9JqeqgwvuNqiY3x2VnYv28uectkNgwJFiXXl/Tin1ROz7mz9uA0BEDS\naqdAcdeU5wiQzrkela/MLzVZWyo+lGfSfGibBJg1nYc1FOUFWUtlOVgEOTLN1xX3\nuWUdJqUwUQs7F/kn3lUec7tA9A6mK31sEdykhwxwOOo1yS9Qziia3ncTbUMGOuQw\nISDdgEezrz81NLlXuUXOl9pvvmnSwi1LEmAjH6KaKung4YKPy1/LLwpEMXIiDDIs\nABHpo5C3E77Z81od/F7es2FRmbEKsz7Ko7OYluHn/veErlFLt0w5gXvEZ/QfINV5\nqtanOa3z52uaseMuYY3fzqWwHmMi/LqveElR6wfW4eXHLJQrrr5xVSRnWiUhmgfk\n8uvRe0OeVycTdP7/B0bnTjQe9HLbEd4/B5hck1ezXjJnc4prc393xkPVObUfgssT\nNTBK/uX/RK82jMdHZr5tA+vrMEnBiLkjfz1pMfoJEHbE7tfZdAb4z89+cYQfaT2Q\nA1gIoVMtmSQe9Y1d1sreRXIvdhJ2my/wsAY3aL39wM5680wtIbg=\n=+FYB\n-----END PGP SIGNATURE-----", "payload": "tree 8ba85336d97cc0091725697dc5e5812a907ee73f\nparent 1eee94d351774cdc2efc8ee508b82d065184c6ee\nauthor Martin Jambor <mjambor@suse.cz> 1671040871 +0100\ncommitter Martin Jambor <mjambor@suse.cz> 1671041329 +0100\n\nipa-sra: Fix address escape case when detecting Fortran descriptors\n\nThe discussion about scan_expr_access in ipa-sra.cc brought my\nattention to a missing case of handling an ADDR_EXPR.  As the added\ntestcase shows, the heuristics which looks for parameters which are\nlocal variables that are only written to and passed by reference in\ncalls can miss a case where the address of the variable in question is\nstored elsewhere in an assignment.\n\nThis patch adds that case to the function and also adds the\noptimization that Richi suggested, i.e. bailing out early on simple\nSSA_NAMEs and constant trees.\n\ngcc/ChangeLog:\n\n2022-12-14  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-sra.cc (loaded_decls): Adjust comment.\n\t(scan_expr_access): Also detect assignments of address of local\n\tvariables to a variable.  Bail out early on SSA_NAMEs and\n\tconstants as an optimization.\n\ngcc/testsuite/ChangeLog:\n\n2022-12-14  Martin Jambor  <mjambor@suse.cz>\n\n\t* gcc.dg/ipa/ipa-sra-29.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6539bbc14836b8e0fa08944be2c069b58bed9455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6539bbc14836b8e0fa08944be2c069b58bed9455", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6539bbc14836b8e0fa08944be2c069b58bed9455/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eee94d351774cdc2efc8ee508b82d065184c6ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eee94d351774cdc2efc8ee508b82d065184c6ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eee94d351774cdc2efc8ee508b82d065184c6ee"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "bcabdedfc6c8c501fbe61d37109546d7c6f6c634", "filename": "gcc/ipa-sra.cc", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6539bbc14836b8e0fa08944be2c069b58bed9455/gcc%2Fipa-sra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6539bbc14836b8e0fa08944be2c069b58bed9455/gcc%2Fipa-sra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.cc?ref=6539bbc14836b8e0fa08944be2c069b58bed9455", "patch": "@@ -592,7 +592,8 @@ namespace {\n \n hash_map<tree, gensum_param_desc *> *decl2desc;\n \n-/* All local DECLs ever loaded from.  */\n+/* All local DECLs ever loaded from of and of those that have their address\n+   assigned to a variable.  */\n \n hash_set <tree> *loaded_decls;\n \n@@ -1743,6 +1744,19 @@ scan_expr_access (tree expr, gimple *stmt, isra_scan_context ctx,\n   bool deref = false;\n   bool reverse;\n \n+  if (TREE_CODE (expr) == ADDR_EXPR)\n+    {\n+      if (ctx == ISRA_CTX_ARG)\n+\treturn;\n+      tree t = get_base_address (TREE_OPERAND (expr, 0));\n+      if (TREE_CODE (t) == VAR_DECL && !TREE_STATIC (t))\n+\tloaded_decls->add (t);\n+      return;\n+    }\n+  if (TREE_CODE (expr) == SSA_NAME\n+      || CONSTANT_CLASS_P (expr))\n+    return;\n+\n   if (TREE_CODE (expr) == BIT_FIELD_REF\n       || TREE_CODE (expr) == IMAGPART_EXPR\n       || TREE_CODE (expr) == REALPART_EXPR)"}, {"sha": "aee45ea0e8f76d9c40c7160e41e9c50091ee520b", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-sra-29.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6539bbc14836b8e0fa08944be2c069b58bed9455/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6539bbc14836b8e0fa08944be2c069b58bed9455/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-29.c?ref=6539bbc14836b8e0fa08944be2c069b58bed9455", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-sra-details\"  } */\n+\n+struct S\n+{\n+  float f;\n+  int i;\n+  void *p;\n+};\n+\n+extern struct S *gp;\n+int baz (float);\n+\n+static int\n+__attribute__((noinline))\n+bar (struct S *p)\n+{\n+  if (p->i != 6)\n+    __builtin_abort ();\n+\n+  return baz(p->f);\n+}\n+\n+int\n+foo (void)\n+{\n+  struct S s;\n+\n+  gp = &s;\n+  s.f = 7.4;\n+  s.i = 6;\n+  s.p = &s;\n+\n+  bar (&s);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump-not \"Variable constructed just to be passed to calls\" \"sra\" } } */"}]}