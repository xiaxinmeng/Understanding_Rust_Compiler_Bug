{"sha": "150f4100817050b1c419fae4be1192ed2b2ca6db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUwZjQxMDA4MTcwNTBiMWM0MTlmYWU0YmUxMTkyZWQyYjJjYTZkYg==", "commit": {"author": {"name": "Denis Chertykov", "email": "denisc@overta.ru", "date": "2000-09-03T11:33:33Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-09-03T11:33:33Z"}, "message": "avr.md (\"*tablejump_lib\"): New pattern.\n\n\t* config/avr/avr.md (\"*tablejump_lib\"): New pattern.\n\t(call_value_insn): Right length claculation.\n\t(call_insn): Likewise.\n\nFrom-SVN: r36119", "tree": {"sha": "befee9209e0ced2f8b5ad57d845e03475c65aed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/befee9209e0ced2f8b5ad57d845e03475c65aed7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/150f4100817050b1c419fae4be1192ed2b2ca6db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150f4100817050b1c419fae4be1192ed2b2ca6db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/150f4100817050b1c419fae4be1192ed2b2ca6db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150f4100817050b1c419fae4be1192ed2b2ca6db/comments", "author": null, "committer": null, "parents": [{"sha": "2c9f84822a6c10afa3d517a2b98ce6c39f7378be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c9f84822a6c10afa3d517a2b98ce6c39f7378be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c9f84822a6c10afa3d517a2b98ce6c39f7378be"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "ff47d02e00da3b78505efb409cdef94a0cb49de4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150f4100817050b1c419fae4be1192ed2b2ca6db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150f4100817050b1c419fae4be1192ed2b2ca6db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=150f4100817050b1c419fae4be1192ed2b2ca6db", "patch": "@@ -1,3 +1,9 @@\n+Sun Sep  3 13:10:56 2000  Denis Chertykov  <denisc@overta.ru>\n+\n+\t* config/avr/avr.md (\"*tablejump_lib\"): New pattern.\n+\t(call_value_insn): Right length claculation.\n+\t(call_insn): Likewise.\n+\n 2000-09-02  Marek Michalkiewicz  <marekm@linux.org.pl>\n \n \t* config/avr/avr-protos.h, config/avr/avr.c (unique_section,"}, {"sha": "ba456ff0706d61addc16d0aef15009f7ae43c72f", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150f4100817050b1c419fae4be1192ed2b2ca6db/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150f4100817050b1c419fae4be1192ed2b2ca6db/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=150f4100817050b1c419fae4be1192ed2b2ca6db", "patch": "@@ -1616,15 +1616,13 @@\n   \"\"\n   \"\")\n \n-;; TODO: insn length for AVR_ENHANCED\n (define_insn \"call_insn\"\n   [(call (mem:HI (match_operand:HI 0 \"nonmemory_operand\" \"!z,*r,i\"))\n          (match_operand:HI 1 \"general_operand\" \"X,X,X\"))]\n ;; We don't need in saving Z register because r30,r31 is a call used registers\n   ;; Operand 1 not used on the AVR.\n   \"(register_operand (operands[0], HImode) || CONSTANT_P (operands[0]))\"\n-  \"*\n-{\n+  \"*{\n   if (which_alternative==0)\n      return \\\"icall\\\";\n   else if (which_alternative==1)\n@@ -1645,14 +1643,16 @@\n    (set (attr \"length\")\n \t(cond [(eq (symbol_ref \"which_alternative\") (const_int 0))\n \t       (const_int 1)\n-\t       (eq (symbol_ref \"which_alternative\") (const_int 1))\n+\t       (eq (symbol_ref \"(which_alternative == 1 && AVR_ENHANCED)\")\n+                   (const_int 1))\n+\t       (const_int 2)\n+\t       (eq (symbol_ref \"(which_alternative == 1 && !AVR_ENHANCED)\")\n+                   (const_int 1))\n \t       (const_int 3)\n-\t       (eq (symbol_ref \"!AVR_MEGA\")\n-\t\t   (const_int 0))\n+\t       (eq (symbol_ref \"!AVR_MEGA\") (const_int 0))\n \t       (const_int 2)]\n \t(const_int 1)))])\n \n-;; TODO: insn length for AVR_ENHANCED\n (define_insn \"call_value_insn\"\n   [(set (match_operand 0 \"register_operand\" \"=r,r,r\")\n         (call (mem:HI (match_operand:HI 1 \"nonmemory_operand\" \"!z,*r,i\"))\n@@ -1682,7 +1682,11 @@\n    (set (attr \"length\")\n \t(cond [(eq (symbol_ref \"which_alternative\") (const_int 0))\n \t       (const_int 1)\n-\t       (eq (symbol_ref \"which_alternative\") (const_int 1))\n+\t       (eq (symbol_ref \"(which_alternative == 1 && AVR_ENHANCED)\")\n+                   (const_int 1))\n+\t       (const_int 2)\n+\t       (eq (symbol_ref \"(which_alternative == 1 && !AVR_ENHANCED)\")\n+                   (const_int 1))\n \t       (const_int 3)\n \t       (eq (symbol_ref \"!AVR_MEGA\")\n \t\t   (const_int 0))\n@@ -1713,7 +1717,26 @@\n   \"optimize\"\n   \"\")\n \n-;; TODO: jump to __tabjejump__ in libgcc\n+;; Not a prologue, but similar idea - move the common piece of code to libgcc.\n+(define_insn \"*tablejump_lib\"\n+   [(set (pc) (mem:HI (plus:HI (match_operand:HI 0 \"register_operand\" \"=&z\")\n+\t\t\t       (label_ref (match_operand 2 \"\" \"\")))))\n+    (use (label_ref (match_operand 1 \"\" \"\")))]\n+  \"TARGET_CALL_PROLOGUES\"\n+  \"*{\n+  output_asm_insn (AS2 (subi,r30,lo8(-(%2))) CR_TAB\n+\t           AS2 (sbci,r31,hi8(-(%2))), operands);\n+  return (AVR_MEGA\n+          ? AS1 (jmp,__tablejump__)\n+          : AS1 (rjmp,__tablejump__));\n+  }\"\n+  [(set_attr \"cc\" \"clobber\")\n+   (set (attr \"length\")\n+\t(if_then_else (eq (symbol_ref \"AVR_MEGA\")\n+\t\t\t  (const_int 0))\n+\t\t      (const_int 3)\n+\t\t      (const_int 4)))])\n+\n \n (define_insn \"*tablejump_enh\"\n    [(set (pc) (mem:HI"}]}