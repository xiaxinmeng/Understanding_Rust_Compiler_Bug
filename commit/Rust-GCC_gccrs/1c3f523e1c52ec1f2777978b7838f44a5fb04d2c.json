{"sha": "1c3f523e1c52ec1f2777978b7838f44a5fb04d2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMzZjUyM2UxYzUyZWMxZjI3Nzc5NzhiNzgzOGY0NGE1ZmIwNGQyYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-07-19T17:42:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-07-19T17:42:48Z"}, "message": "gcc/\n\t* rtl.h (MEM_ALIAS_SET, MEM_EXPR, MEM_OFFSET, MEM_ADDR_SPACE)\n\t(MEM_SIZE, MEM_ALIGN): Redefine in terms of get_mem_attrs.\n\tProvide a dummy definition of MEM_ADDR_SPACE for generators.\n\t(target_rtl): Add x_mode_mem_attrs.\n\t(mode_mem_attrs): New macro.\n\t(get_mem_attrs): New function.\n\t* emit-rtl.c (get_mem_attrs): Rename to...\n\t(find_mem_attrs): ...this.\n\t(set_mem_attributes_minus_bitpos, set_mem_alias_set)\n\t(set_mem_addr_space, set_mem_align, set_mem_expr, set_mem_offset)\n\t(set_mem_size, change_address, adjust_address_1, offset_address)\n\t(widen_memory_access, get_spill_slot_decl, set_mem_attrs_for_spill):\n\tUpdate accordingly.\n\t(init_emit_regs): Initialize mode_mem_attrs.\n\nFrom-SVN: r176474", "tree": {"sha": "817bf84e56ee95f3c64cf50deab2152c969fc22f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/817bf84e56ee95f3c64cf50deab2152c969fc22f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c3f523e1c52ec1f2777978b7838f44a5fb04d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c3f523e1c52ec1f2777978b7838f44a5fb04d2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c3f523e1c52ec1f2777978b7838f44a5fb04d2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c3f523e1c52ec1f2777978b7838f44a5fb04d2c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37457866673a1ed44cec3395459dc0c4f0135da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37457866673a1ed44cec3395459dc0c4f0135da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37457866673a1ed44cec3395459dc0c4f0135da2"}], "stats": {"total": 156, "additions": 103, "deletions": 53}, "files": [{"sha": "2b17a6ecb84bf92bdc6b2e0ba01e1f6c38f40106", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c3f523e1c52ec1f2777978b7838f44a5fb04d2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c3f523e1c52ec1f2777978b7838f44a5fb04d2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c3f523e1c52ec1f2777978b7838f44a5fb04d2c", "patch": "@@ -1,3 +1,20 @@\n+2011-07-19  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* rtl.h (MEM_ALIAS_SET, MEM_EXPR, MEM_OFFSET, MEM_ADDR_SPACE)\n+\t(MEM_SIZE, MEM_ALIGN): Redefine in terms of get_mem_attrs.\n+\tProvide a dummy definition of MEM_ADDR_SPACE for generators.\n+\t(target_rtl): Add x_mode_mem_attrs.\n+\t(mode_mem_attrs): New macro.\n+\t(get_mem_attrs): New function.\n+\t* emit-rtl.c (get_mem_attrs): Rename to...\n+\t(find_mem_attrs): ...this.\n+\t(set_mem_attributes_minus_bitpos, set_mem_alias_set)\n+\t(set_mem_addr_space, set_mem_align, set_mem_expr, set_mem_offset)\n+\t(set_mem_size, change_address, adjust_address_1, offset_address)\n+\t(widen_memory_access, get_spill_slot_decl, set_mem_attrs_for_spill):\n+\tUpdate accordingly.\n+\t(init_emit_regs): Initialize mode_mem_attrs.\n+\n 2011-07-19  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-forwprop.c (lookup_logical_inverted_value): Remove"}, {"sha": "717510c2874b161d4f00e3cb6e7029aa2d7db749", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 57, "deletions": 40, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c3f523e1c52ec1f2777978b7838f44a5fb04d2c/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c3f523e1c52ec1f2777978b7838f44a5fb04d2c/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1c3f523e1c52ec1f2777978b7838f44a5fb04d2c", "patch": "@@ -157,8 +157,6 @@ static int const_fixed_htab_eq (const void *, const void *);\n static rtx lookup_const_fixed (rtx);\n static hashval_t mem_attrs_htab_hash (const void *);\n static int mem_attrs_htab_eq (const void *, const void *);\n-static mem_attrs *get_mem_attrs (alias_set_type, tree, rtx, rtx, unsigned int,\n-\t\t\t\t addr_space_t, enum machine_mode);\n static hashval_t reg_attrs_htab_hash (const void *);\n static int reg_attrs_htab_eq (const void *, const void *);\n static reg_attrs *get_reg_attrs (tree, int);\n@@ -286,8 +284,9 @@ mem_attrs_htab_eq (const void *x, const void *y)\n    MEM of mode MODE.  */\n \n static mem_attrs *\n-get_mem_attrs (alias_set_type alias, tree expr, rtx offset, rtx size,\n-\t       unsigned int align, addr_space_t addrspace, enum machine_mode mode)\n+find_mem_attrs (alias_set_type alias, tree expr, rtx offset, rtx size,\n+\t\tunsigned int align, addr_space_t addrspace,\n+\t\tenum machine_mode mode)\n {\n   mem_attrs attrs;\n   void **slot;\n@@ -1833,8 +1832,8 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \n   /* Now set the attributes we computed above.  */\n   MEM_ATTRS (ref)\n-    = get_mem_attrs (alias, expr, offset, size, align,\n-\t\t     TYPE_ADDR_SPACE (type), GET_MODE (ref));\n+    = find_mem_attrs (alias, expr, offset, size, align,\n+\t\t      TYPE_ADDR_SPACE (type), GET_MODE (ref));\n \n   /* If this is already known to be a scalar or aggregate, we are done.  */\n   if (MEM_IN_STRUCT_P (ref) || MEM_SCALAR_P (ref))\n@@ -1862,29 +1861,29 @@ set_mem_alias_set (rtx mem, alias_set_type set)\n   /* If the new and old alias sets don't conflict, something is wrong.  */\n   gcc_checking_assert (alias_sets_conflict_p (set, MEM_ALIAS_SET (mem)));\n \n-  MEM_ATTRS (mem) = get_mem_attrs (set, MEM_EXPR (mem), MEM_OFFSET (mem),\n-\t\t\t\t   MEM_SIZE (mem), MEM_ALIGN (mem),\n-\t\t\t\t   MEM_ADDR_SPACE (mem), GET_MODE (mem));\n+  MEM_ATTRS (mem) = find_mem_attrs (set, MEM_EXPR (mem), MEM_OFFSET (mem),\n+\t\t\t\t    MEM_SIZE (mem), MEM_ALIGN (mem),\n+\t\t\t\t    MEM_ADDR_SPACE (mem), GET_MODE (mem));\n }\n \n /* Set the address space of MEM to ADDRSPACE (target-defined).  */\n \n void\n set_mem_addr_space (rtx mem, addr_space_t addrspace)\n {\n-  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),\n-\t\t\t\t   MEM_OFFSET (mem), MEM_SIZE (mem),\n-\t\t\t\t   MEM_ALIGN (mem), addrspace, GET_MODE (mem));\n+  MEM_ATTRS (mem) = find_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),\n+\t\t\t\t    MEM_OFFSET (mem), MEM_SIZE (mem),\n+\t\t\t\t    MEM_ALIGN (mem), addrspace, GET_MODE (mem));\n }\n \n /* Set the alignment of MEM to ALIGN bits.  */\n \n void\n set_mem_align (rtx mem, unsigned int align)\n {\n-  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),\n-\t\t\t\t   MEM_OFFSET (mem), MEM_SIZE (mem), align,\n-\t\t\t\t   MEM_ADDR_SPACE (mem), GET_MODE (mem));\n+  MEM_ATTRS (mem) = find_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),\n+\t\t\t\t    MEM_OFFSET (mem), MEM_SIZE (mem), align,\n+\t\t\t\t    MEM_ADDR_SPACE (mem), GET_MODE (mem));\n }\n \n /* Set the expr for MEM to EXPR.  */\n@@ -1893,29 +1892,29 @@ void\n set_mem_expr (rtx mem, tree expr)\n {\n   MEM_ATTRS (mem)\n-    = get_mem_attrs (MEM_ALIAS_SET (mem), expr, MEM_OFFSET (mem),\n-\t\t     MEM_SIZE (mem), MEM_ALIGN (mem),\n-\t\t     MEM_ADDR_SPACE (mem), GET_MODE (mem));\n+    = find_mem_attrs (MEM_ALIAS_SET (mem), expr, MEM_OFFSET (mem),\n+\t\t      MEM_SIZE (mem), MEM_ALIGN (mem),\n+\t\t      MEM_ADDR_SPACE (mem), GET_MODE (mem));\n }\n \n /* Set the offset of MEM to OFFSET.  */\n \n void\n set_mem_offset (rtx mem, rtx offset)\n {\n-  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),\n-\t\t\t\t   offset, MEM_SIZE (mem), MEM_ALIGN (mem),\n-\t\t\t\t   MEM_ADDR_SPACE (mem), GET_MODE (mem));\n+  MEM_ATTRS (mem) = find_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),\n+\t\t\t\t    offset, MEM_SIZE (mem), MEM_ALIGN (mem),\n+\t\t\t\t    MEM_ADDR_SPACE (mem), GET_MODE (mem));\n }\n \n /* Set the size of MEM to SIZE.  */\n \n void\n set_mem_size (rtx mem, rtx size)\n {\n-  MEM_ATTRS (mem) = get_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),\n-\t\t\t\t   MEM_OFFSET (mem), size, MEM_ALIGN (mem),\n-\t\t\t\t   MEM_ADDR_SPACE (mem), GET_MODE (mem));\n+  MEM_ATTRS (mem) = find_mem_attrs (MEM_ALIAS_SET (mem), MEM_EXPR (mem),\n+\t\t\t\t    MEM_OFFSET (mem), size, MEM_ALIGN (mem),\n+\t\t\t\t    MEM_ADDR_SPACE (mem), GET_MODE (mem));\n }\n \f\n /* Return a memory reference like MEMREF, but with its mode changed to MODE\n@@ -1984,8 +1983,8 @@ change_address (rtx memref, enum machine_mode mode, rtx addr)\n     }\n \n   MEM_ATTRS (new_rtx)\n-    = get_mem_attrs (MEM_ALIAS_SET (memref), 0, 0, size, align,\n-\t\t     MEM_ADDR_SPACE (memref), mmode);\n+    = find_mem_attrs (MEM_ALIAS_SET (memref), 0, 0, size, align,\n+\t\t      MEM_ADDR_SPACE (memref), mmode);\n \n   return new_rtx;\n }\n@@ -2069,9 +2068,10 @@ adjust_address_1 (rtx memref, enum machine_mode mode, HOST_WIDE_INT offset,\n   else if (MEM_SIZE (memref))\n     size = plus_constant (MEM_SIZE (memref), -offset);\n \n-  MEM_ATTRS (new_rtx) = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref),\n-\t\t\t\t       memoffset, size, memalign, as,\n-\t\t\t\t       GET_MODE (new_rtx));\n+  MEM_ATTRS (new_rtx) = find_mem_attrs (MEM_ALIAS_SET (memref),\n+\t\t\t\t\tMEM_EXPR (memref),\n+\t\t\t\t\tmemoffset, size, memalign, as,\n+\t\t\t\t\tGET_MODE (new_rtx));\n \n   /* At some point, we should validate that this offset is within the object,\n      if all the appropriate values are known.  */\n@@ -2129,9 +2129,9 @@ offset_address (rtx memref, rtx offset, unsigned HOST_WIDE_INT pow2)\n   /* Update the alignment to reflect the offset.  Reset the offset, which\n      we don't know.  */\n   MEM_ATTRS (new_rtx)\n-    = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref), 0, 0,\n-\t\t     MIN (MEM_ALIGN (memref), pow2 * BITS_PER_UNIT),\n-\t\t     as, GET_MODE (new_rtx));\n+    = find_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref), 0, 0,\n+\t\t      MIN (MEM_ALIGN (memref), pow2 * BITS_PER_UNIT),\n+\t\t      as, GET_MODE (new_rtx));\n   return new_rtx;\n }\n \n@@ -2234,9 +2234,9 @@ widen_memory_access (rtx memref, enum machine_mode mode, HOST_WIDE_INT offset)\n   /* The widened memory may alias other stuff, so zap the alias set.  */\n   /* ??? Maybe use get_alias_set on any remaining expression.  */\n \n-  MEM_ATTRS (new_rtx) = get_mem_attrs (0, expr, memoffset, GEN_INT (size),\n-\t\t\t\t       MEM_ALIGN (new_rtx),\n-\t\t\t\t       MEM_ADDR_SPACE (new_rtx), mode);\n+  MEM_ATTRS (new_rtx) = find_mem_attrs (0, expr, memoffset, GEN_INT (size),\n+\t\t\t\t\tMEM_ALIGN (new_rtx),\n+\t\t\t\t\tMEM_ADDR_SPACE (new_rtx), mode);\n \n   return new_rtx;\n }\n@@ -2262,8 +2262,8 @@ get_spill_slot_decl (bool force_build_p)\n \n   rd = gen_rtx_MEM (BLKmode, frame_pointer_rtx);\n   MEM_NOTRAP_P (rd) = 1;\n-  MEM_ATTRS (rd) = get_mem_attrs (new_alias_set (), d, const0_rtx,\n-\t\t\t\t  NULL_RTX, 0, ADDR_SPACE_GENERIC, BLKmode);\n+  MEM_ATTRS (rd) = find_mem_attrs (new_alias_set (), d, const0_rtx,\n+\t\t\t\t   NULL_RTX, 0, ADDR_SPACE_GENERIC, BLKmode);\n   SET_DECL_RTL (d, rd);\n \n   return d;\n@@ -2294,9 +2294,9 @@ set_mem_attrs_for_spill (rtx mem)\n       && CONST_INT_P (XEXP (addr, 1)))\n     offset = XEXP (addr, 1);\n \n-  MEM_ATTRS (mem) = get_mem_attrs (alias, expr, offset,\n-\t\t\t\t   MEM_SIZE (mem), MEM_ALIGN (mem),\n-\t\t\t\t   ADDR_SPACE_GENERIC, GET_MODE (mem));\n+  MEM_ATTRS (mem) = find_mem_attrs (alias, expr, offset,\n+\t\t\t\t    MEM_SIZE (mem), MEM_ALIGN (mem),\n+\t\t\t\t    ADDR_SPACE_GENERIC, GET_MODE (mem));\n   MEM_NOTRAP_P (mem) = 1;\n }\n \f\n@@ -5442,6 +5442,8 @@ void\n init_emit_regs (void)\n {\n   int i;\n+  enum machine_mode mode;\n+  mem_attrs *attrs;\n \n   /* Reset register attributes */\n   htab_empty (reg_attrs_htab);\n@@ -5483,6 +5485,21 @@ init_emit_regs (void)\n     pic_offset_table_rtx = gen_raw_REG (Pmode, PIC_OFFSET_TABLE_REGNUM);\n   else\n     pic_offset_table_rtx = NULL_RTX;\n+\n+  for (i = 0; i < (int) MAX_MACHINE_MODE; i++)\n+    {\n+      mode = (enum machine_mode) i;\n+      attrs = ggc_alloc_cleared_mem_attrs ();\n+      attrs->align = BITS_PER_UNIT;\n+      attrs->addrspace = ADDR_SPACE_GENERIC;\n+      if (mode != BLKmode)\n+\t{\n+\t  attrs->size = GEN_INT (GET_MODE_SIZE (mode));\n+\t  if (STRICT_ALIGNMENT)\n+\t    attrs->align = GET_MODE_ALIGNMENT (mode);\n+\t}\n+      mode_mem_attrs[i] = attrs;\n+    }\n }\n \n /* Create some permanent unique rtl objects shared between all functions.  */"}, {"sha": "d8be935a64a3a8994305214118a8975a0b952ca6", "filename": "gcc/rtl.h", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c3f523e1c52ec1f2777978b7838f44a5fb04d2c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c3f523e1c52ec1f2777978b7838f44a5fb04d2c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=1c3f523e1c52ec1f2777978b7838f44a5fb04d2c", "patch": "@@ -1289,39 +1289,36 @@ do {\t\t\t\t\t\t\t\t\t\\\n    in the block and provide defaults if none specified.  */\n #define REG_ATTRS(RTX) X0REGATTR (RTX, 2)\n \n+#ifndef GENERATOR_FILE\n /* For a MEM rtx, the alias set.  If 0, this MEM is not in any alias\n    set, and may alias anything.  Otherwise, the MEM can only alias\n    MEMs in a conflicting alias set.  This value is set in a\n    language-dependent manner in the front-end, and should not be\n    altered in the back-end.  These set numbers are tested with\n    alias_sets_conflict_p.  */\n-#define MEM_ALIAS_SET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->alias)\n+#define MEM_ALIAS_SET(RTX) (get_mem_attrs (RTX)->alias)\n \n /* For a MEM rtx, the decl it is known to refer to, if it is known to\n    refer to part of a DECL.  It may also be a COMPONENT_REF.  */\n-#define MEM_EXPR(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->expr)\n+#define MEM_EXPR(RTX) (get_mem_attrs (RTX)->expr)\n \n /* For a MEM rtx, the offset from the start of MEM_EXPR, if known, as a\n    RTX that is always a CONST_INT.  */\n-#define MEM_OFFSET(RTX) (MEM_ATTRS (RTX) == 0 ? 0 : MEM_ATTRS (RTX)->offset)\n+#define MEM_OFFSET(RTX) (get_mem_attrs (RTX)->offset)\n \n /* For a MEM rtx, the address space.  */\n-#define MEM_ADDR_SPACE(RTX) (MEM_ATTRS (RTX) == 0 ? ADDR_SPACE_GENERIC \\\n-\t\t\t\t\t\t  : MEM_ATTRS (RTX)->addrspace)\n+#define MEM_ADDR_SPACE(RTX) (get_mem_attrs (RTX)->addrspace)\n \n /* For a MEM rtx, the size in bytes of the MEM, if known, as an RTX that\n    is always a CONST_INT.  */\n-#define MEM_SIZE(RTX)\t\t\t\t\t\t\t\\\n-(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->size\t\t\t\t\\\n- : GET_MODE (RTX) != BLKmode ? GEN_INT (GET_MODE_SIZE (GET_MODE (RTX)))\t\\\n- : 0)\n+#define MEM_SIZE(RTX) (get_mem_attrs (RTX)->size)\n \n /* For a MEM rtx, the alignment in bits.  We can use the alignment of the\n    mode as a default when STRICT_ALIGNMENT, but not if not.  */\n-#define MEM_ALIGN(RTX)\t\t\t\t\t\t\t\\\n-(MEM_ATTRS (RTX) != 0 ? MEM_ATTRS (RTX)->align\t\t\t\t\\\n- : (STRICT_ALIGNMENT && GET_MODE (RTX) != BLKmode\t\t\t\\\n-    ? GET_MODE_ALIGNMENT (GET_MODE (RTX)) : BITS_PER_UNIT))\n+#define MEM_ALIGN(RTX) (get_mem_attrs (RTX)->align)\n+#else\n+#define MEM_ADDR_SPACE(RTX) ADDR_SPACE_GENERIC\n+#endif\n \n /* For a REG rtx, the decl it is known to refer to, if it is known to\n    refer to part of a DECL.  */\n@@ -2120,6 +2117,9 @@ struct GTY(()) target_rtl {\n   /* Static hunks of RTL used by the aliasing code; these are treated\n      as persistent to avoid unnecessary RTL allocations.  */\n   rtx x_static_reg_base_value[FIRST_PSEUDO_REGISTER];\n+\n+  /* The default memory attributes for each mode.  */\n+  struct mem_attrs *x_mode_mem_attrs[(int) MAX_MACHINE_MODE];\n };\n \n extern GTY(()) struct target_rtl default_target_rtl;\n@@ -2137,6 +2137,8 @@ extern struct target_rtl *this_target_rtl;\n   (this_target_rtl->x_return_address_pointer_rtx)\n #define top_of_stack \\\n   (this_target_rtl->x_top_of_stack)\n+#define mode_mem_attrs \\\n+  (this_target_rtl->x_mode_mem_attrs)\n \n /* Standard pieces of rtx, to be substituted directly into things.  */\n #define pc_rtx                  (global_rtl[GR_PC])\n@@ -2151,6 +2153,20 @@ extern struct target_rtl *this_target_rtl;\n #define hard_frame_pointer_rtx\t(global_rtl[GR_HARD_FRAME_POINTER])\n #define arg_pointer_rtx\t\t(global_rtl[GR_ARG_POINTER])\n \n+#ifndef GENERATOR_FILE\n+/* Return the attributes of a MEM rtx.  */\n+static inline struct mem_attrs *\n+get_mem_attrs (const_rtx x)\n+{\n+  struct mem_attrs *attrs;\n+\n+  attrs = MEM_ATTRS (x);\n+  if (!attrs)\n+    attrs = mode_mem_attrs[(int) GET_MODE (x)];\n+  return attrs;\n+}\n+#endif\n+\n /* Include the RTL generation functions.  */\n \n #ifndef GENERATOR_FILE"}]}