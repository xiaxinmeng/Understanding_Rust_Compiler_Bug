{"sha": "7b69b603ec8f75d1132849f7604667596811d74e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I2OWI2MDNlYzhmNzVkMTEzMjg0OWY3NjA0NjY3NTk2ODExZDc0ZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2014-11-18T16:18:46Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-11-18T16:18:46Z"}, "message": "fibonacci_heap is used for var-tracking.\n\n\t* var-tracking.c (vt_find_locations): New fibonacci_node is used.\n\nFrom-SVN: r217724", "tree": {"sha": "1a005630a7954c63dc418f35c9c2beafcac91d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a005630a7954c63dc418f35c9c2beafcac91d2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b69b603ec8f75d1132849f7604667596811d74e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b69b603ec8f75d1132849f7604667596811d74e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b69b603ec8f75d1132849f7604667596811d74e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b69b603ec8f75d1132849f7604667596811d74e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5bfe5bddeea2fadd6bb8c244a95959b988ccb16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5bfe5bddeea2fadd6bb8c244a95959b988ccb16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5bfe5bddeea2fadd6bb8c244a95959b988ccb16"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "a15197eefc609139370029812a4c610ec7ba3bae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b69b603ec8f75d1132849f7604667596811d74e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b69b603ec8f75d1132849f7604667596811d74e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b69b603ec8f75d1132849f7604667596811d74e", "patch": "@@ -1,3 +1,7 @@\n+2014-11-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* var-tracking.c (vt_find_locations): New fibonacci_node is used.\n+\n 2014-11-18  Martin Liska  <mliska@suse.cz>\n \n \t* bt-load.c (add_btr_def): New fibonacci_heap is used."}, {"sha": "e7d4ff19802778ca433bf05a469f42e94c428788", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b69b603ec8f75d1132849f7604667596811d74e/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b69b603ec8f75d1132849f7604667596811d74e/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=7b69b603ec8f75d1132849f7604667596811d74e", "patch": "@@ -114,7 +114,6 @@\n #include \"reload.h\"\n #include \"sbitmap.h\"\n #include \"alloc-pool.h\"\n-#include \"fibheap.h\"\n #include \"regs.h\"\n #include \"expr.h\"\n #include \"tree-pass.h\"\n@@ -130,6 +129,10 @@\n #include \"tm_p.h\"\n #include \"alias.h\"\n #include \"rtl-iter.h\"\n+#include \"fibonacci_heap.h\"\n+\n+typedef fibonacci_heap <long, basic_block_def> bb_heap_t;\n+typedef fibonacci_node <long, basic_block_def> bb_heap_node_t;\n \n /* var-tracking.c assumes that tree code with the same value as VALUE rtx code\n    has no chance to appear in REG_EXPR/MEM_EXPRs and isn't a decl.\n@@ -6961,7 +6964,9 @@ compute_bb_dataflow (basic_block bb)\n static bool\n vt_find_locations (void)\n {\n-  fibheap_t worklist, pending, fibheap_swap;\n+  bb_heap_t *worklist = new bb_heap_t (LONG_MIN);\n+  bb_heap_t *pending = new bb_heap_t (LONG_MIN);\n+  bb_heap_t *fibheap_swap = NULL;\n   sbitmap visited, in_worklist, in_pending, sbitmap_swap;\n   basic_block bb;\n   edge e;\n@@ -6982,18 +6987,16 @@ vt_find_locations (void)\n     bb_order[rc_order[i]] = i;\n   free (rc_order);\n \n-  worklist = fibheap_new ();\n-  pending = fibheap_new ();\n   visited = sbitmap_alloc (last_basic_block_for_fn (cfun));\n   in_worklist = sbitmap_alloc (last_basic_block_for_fn (cfun));\n   in_pending = sbitmap_alloc (last_basic_block_for_fn (cfun));\n   bitmap_clear (in_worklist);\n \n   FOR_EACH_BB_FN (bb, cfun)\n-    fibheap_insert (pending, bb_order[bb->index], bb);\n+    pending->insert (bb_order[bb->index], bb);\n   bitmap_ones (in_pending);\n \n-  while (success && !fibheap_empty (pending))\n+  while (success && !pending->empty ())\n     {\n       fibheap_swap = pending;\n       pending = worklist;\n@@ -7004,9 +7007,9 @@ vt_find_locations (void)\n \n       bitmap_clear (visited);\n \n-      while (!fibheap_empty (worklist))\n+      while (!worklist->empty ())\n \t{\n-\t  bb = (basic_block) fibheap_extract_min (worklist);\n+\t  bb = worklist->extract_min ();\n \t  bitmap_clear_bit (in_worklist, bb->index);\n \t  gcc_assert (!bitmap_bit_p (visited, bb->index));\n \t  if (!bitmap_bit_p (visited, bb->index))\n@@ -7113,17 +7116,16 @@ vt_find_locations (void)\n \t\t\t    {\n \t\t\t      /* Send E->DEST to next round.  */\n \t\t\t      bitmap_set_bit (in_pending, e->dest->index);\n-\t\t\t      fibheap_insert (pending,\n-\t\t\t\t\t      bb_order[e->dest->index],\n-\t\t\t\t\t      e->dest);\n+\t\t\t      pending->insert (bb_order[e->dest->index],\n+\t\t\t\t\t       e->dest);\n \t\t\t    }\n \t\t\t}\n \t\t      else if (!bitmap_bit_p (in_worklist, e->dest->index))\n \t\t\t{\n \t\t\t  /* Add E->DEST to current round.  */\n \t\t\t  bitmap_set_bit (in_worklist, e->dest->index);\n-\t\t\t  fibheap_insert (worklist, bb_order[e->dest->index],\n-\t\t\t\t\t  e->dest);\n+\t\t\t  worklist->insert (bb_order[e->dest->index],\n+\t\t\t\t\t    e->dest);\n \t\t\t}\n \t\t    }\n \t\t}\n@@ -7136,7 +7138,8 @@ vt_find_locations (void)\n \t\t\t oldinsz,\n \t\t\t (int)shared_hash_htab (VTI (bb)->out.vars)->size (),\n \t\t\t oldoutsz,\n-\t\t\t (int)worklist->nodes, (int)pending->nodes, htabsz);\n+\t\t\t (int)worklist->nodes (), (int)pending->nodes (),\n+\t\t\t htabsz);\n \n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n@@ -7154,8 +7157,8 @@ vt_find_locations (void)\n       gcc_assert (VTI (bb)->flooded);\n \n   free (bb_order);\n-  fibheap_delete (worklist);\n-  fibheap_delete (pending);\n+  delete worklist;\n+  delete pending;\n   sbitmap_free (visited);\n   sbitmap_free (in_worklist);\n   sbitmap_free (in_pending);"}]}