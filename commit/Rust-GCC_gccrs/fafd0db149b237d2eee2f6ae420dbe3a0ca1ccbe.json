{"sha": "fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFmZDBkYjE0OWIyMzdkMmVlZTJmNmFlNDIwZGJlM2EwY2ExY2NiZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-06-11T21:13:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-06-11T21:13:19Z"}, "message": "decl.c (grok_op_properties): Consistently use the location of the decl...\n\n/cp\n2018-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grok_op_properties): Consistently use the location\n\tof the decl; remove special casing of POSTINCREMENT_EXPR and\n\tPOSTDECREMENT_EXPR wrt default arguments.\n\n/testsuite\n2018-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/lookup/new2.C: Test locations too.\n\t* g++.dg/other/ellipsis1.C: Likewise.\n\t* g++.dg/other/operator1.C: Likewise.\n\t* g++.dg/other/operator2.C: Likewise.\n\t* g++.dg/overload/operator2.C: Likewise.\n\t* g++.dg/parse/defarg11.C: Likewise.\n\t* g++.dg/parse/operator4.C: Likewise.\n\t* g++.dg/template/error30.C: Likewise.\n\t* g++.dg/template/explicit-args3.C: Likewise.\n\t* g++.dg/warn/effc1.C: Likewise.\n\t* g++.old-deja/g++.brendan/prepost2.C: Likewise.\n\t* g++.old-deja/g++.brendan/prepost3.C: Likewise.\n\t* g++.old-deja/g++.bugs/900215_01.C: Likewise.\n\t* g++.old-deja/g++.jason/conversion5.C: Likewise.\n\t* g++.old-deja/g++.jason/operator.C: Likewise.\n\nFrom-SVN: r261455", "tree": {"sha": "1e3525eaf4f1a5e052295e7a161178dfd78ff5b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e3525eaf4f1a5e052295e7a161178dfd78ff5b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/comments", "author": null, "committer": null, "parents": [{"sha": "9b0607def49d8e30128253635ec44771f7c03530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b0607def49d8e30128253635ec44771f7c03530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b0607def49d8e30128253635ec44771f7c03530"}], "stats": {"total": 182, "additions": 96, "deletions": 86}, "files": [{"sha": "9458b4150a83e48ad9d60ced6c496398995f162e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -1,3 +1,9 @@\n+2018-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (grok_op_properties): Consistently use the location\n+\tof the decl; remove special casing of POSTINCREMENT_EXPR and\n+\tPOSTDECREMENT_EXPR wrt default arguments.\n+\n 2018-06-05  Jason Merrill  <jason@redhat.com>\n \n \t* constexpr.c (cxx_eval_binary_expression): Special case comparison"}, {"sha": "c8353405a1a6675a5ff77f8f3b4b7a910f50a5b6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 56, "deletions": 55, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -13078,6 +13078,7 @@ grok_op_properties (tree decl, bool complain)\n   tree argtypes = TYPE_ARG_TYPES (TREE_TYPE (decl));\n   bool methodp = TREE_CODE (TREE_TYPE (decl)) == METHOD_TYPE;\n   tree name = DECL_NAME (decl);\n+  location_t loc = DECL_SOURCE_LOCATION (decl);\n \n   tree class_type = DECL_CONTEXT (decl);\n   if (class_type && !CLASS_TYPE_P (class_type))\n@@ -13139,13 +13140,14 @@ grok_op_properties (tree decl, bool complain)\n \t{\n \t  if (CP_DECL_CONTEXT (decl) != global_namespace)\n \t    {\n-\t      error (\"%qD may not be declared within a namespace\", decl);\n+\t      error_at (loc, \"%qD may not be declared within a namespace\",\n+\t\t\tdecl);\n \t      return false;\n \t    }\n \n \t  if (!TREE_PUBLIC (decl))\n \t    {\n-\t      error (\"%qD may not be declared as static\", decl);\n+\t      error_at (loc, \"%qD may not be declared as static\", decl);\n \t      return false;\n \t    }\n \t}\n@@ -13172,14 +13174,14 @@ grok_op_properties (tree decl, bool complain)\n \t  || operator_code == ARRAY_REF\n \t  || operator_code == NOP_EXPR)\n \t{\n-\t  error (\"%qD must be a nonstatic member function\", decl);\n+\t  error_at (loc, \"%qD must be a nonstatic member function\", decl);\n \t  return false;\n \t}\n \n       if (DECL_STATIC_FUNCTION_P (decl))\n \t{\n-\t  error (\"%qD must be either a non-static member \"\n-\t\t \"function or a non-member function\", decl);\n+\t  error_at (loc, \"%qD must be either a non-static member \"\n+\t\t    \"function or a non-member function\", decl);\n \t  return false;\n \t}\n \n@@ -13188,8 +13190,8 @@ grok_op_properties (tree decl, bool complain)\n \t  if (!arg || arg == void_list_node)\n \t    {\n \t      if (complain)\n-\t\terror (\"%qD must have an argument of class or \"\n-\t\t       \"enumerated type\", decl);\n+\t\terror_at(loc, \"%qD must have an argument of class or \"\n+\t\t\t \"enumerated type\", decl);\n \t      return false;\n \t    }\n       \n@@ -13214,7 +13216,7 @@ grok_op_properties (tree decl, bool complain)\n   if (operator_code == COND_EXPR)\n     {\n       /* 13.4.0.3 */\n-      error (\"ISO C++ prohibits overloading operator ?:\");\n+      error_at (loc, \"ISO C++ prohibits overloading operator ?:\");\n       return false;\n     }\n \n@@ -13225,7 +13227,8 @@ grok_op_properties (tree decl, bool complain)\n       if (!arg)\n \t{\n \t  /* Variadic.  */\n-\t  error (\"%qD must not have variable number of arguments\", decl);\n+\t  error_at (loc, \"%qD must not have variable number of arguments\",\n+\t\t    decl);\n \t  return false;\n \t}\n       ++arity;\n@@ -13248,9 +13251,10 @@ grok_op_properties (tree decl, bool complain)\n       else if (arity != 2)\n \t{\n \t  /* This was an ambiguous operator but is invalid. */\n-\t  error (methodp\n-\t\t ? G_(\"%qD must have either zero or one argument\")\n-\t\t : G_(\"%qD must have either one or two arguments\"), decl);\n+\t  error_at (loc,\n+\t\t    methodp\n+\t\t    ? G_(\"%qD must have either zero or one argument\")\n+\t\t    : G_(\"%qD must have either one or two arguments\"), decl);\n \t  return false;\n \t}\n       else if ((operator_code == POSTINCREMENT_EXPR\n@@ -13260,30 +13264,33 @@ grok_op_properties (tree decl, bool complain)\n \t       && ! same_type_p (TREE_VALUE (TREE_CHAIN (argtypes)),\n \t\t\t\t integer_type_node))\n \t{\n-\t  error (methodp\n-\t\t ? G_(\"postfix %qD must have %<int%> as its argument\")\n-\t\t : G_(\"postfix %qD must have %<int%> as its second argument\"),\n-\t\t decl);\n+\t  error_at (loc,\n+\t\t    methodp\n+\t\t    ? G_(\"postfix %qD must have %<int%> as its argument\")\n+\t\t    : G_(\"postfix %qD must have %<int%> as its second argument\"),\n+\t\t    decl);\n \t  return false;\n \t}\n       break;\n \n     case OVL_OP_FLAG_UNARY:\n       if (arity != 1)\n \t{\n-\t  error (methodp\n-\t\t ? G_(\"%qD must have no arguments\")\n-\t\t : G_(\"%qD must have exactly one argument\"), decl);\n+\t  error_at (loc,\n+\t\t    methodp\n+\t\t    ? G_(\"%qD must have no arguments\")\n+\t\t    : G_(\"%qD must have exactly one argument\"), decl);\n \t  return false;\n \t}\n       break;\n \n     case OVL_OP_FLAG_BINARY:\n       if (arity != 2)\n \t{\n-\t  error (methodp\n-\t\t ? G_(\"%qD must have exactly one argument\")\n-\t\t : G_(\"%qD must have exactly two arguments\"), decl);\n+\t  error_at (loc,\n+\t\t    methodp\n+\t\t    ? G_(\"%qD must have exactly one argument\")\n+\t\t    : G_(\"%qD must have exactly two arguments\"), decl);\n \t  return false;\n \t}\n       break;\n@@ -13297,15 +13304,8 @@ grok_op_properties (tree decl, bool complain)\n     if (TREE_PURPOSE (arg))\n       {\n \tTREE_PURPOSE (arg) = NULL_TREE;\n-\tif (operator_code == POSTINCREMENT_EXPR\n-\t    || operator_code == POSTDECREMENT_EXPR)\n-\t  pedwarn (input_location, OPT_Wpedantic,\n-\t\t   \"%qD cannot have default arguments\", decl);\n-\telse\n-\t  {\n-\t    error (\"%qD cannot have default arguments\", decl);\n-\t    return false;\n-\t  }\n+\terror_at (loc, \"%qD cannot have default arguments\", decl);\n+\treturn false;\n       }\n \n   /* At this point the declaration is well-formed.  It may not be\n@@ -13328,31 +13328,31 @@ grok_op_properties (tree decl, bool complain)\n \tt = TYPE_MAIN_VARIANT (TREE_TYPE (t));\n \n       if (VOID_TYPE_P (t))\n-\twarning (OPT_Wconversion,\n-\t\t ref\n-\t\t ? G_(\"conversion to a reference to void \"\n-\t\t      \"will never use a type conversion operator\")\n-\t\t : G_(\"conversion to void \"\n-\t\t      \"will never use a type conversion operator\"));\n+\twarning_at (loc, OPT_Wconversion,\n+\t\t    ref\n+\t\t    ? G_(\"conversion to a reference to void \"\n+\t\t\t \"will never use a type conversion operator\")\n+\t\t    : G_(\"conversion to void \"\n+\t\t\t \"will never use a type conversion operator\"));\n       else if (class_type)\n \t{\n \t  if (t == class_type)\n-\t    warning (OPT_Wconversion,\n-                     ref\n-                     ? G_(\"conversion to a reference to the same type \"\n-                          \"will never use a type conversion operator\")\n-                     : G_(\"conversion to the same type \"\n-                          \"will never use a type conversion operator\"));\n+\t    warning_at (loc, OPT_Wconversion,\n+\t\t\tref\n+\t\t\t? G_(\"conversion to a reference to the same type \"\n+\t\t\t     \"will never use a type conversion operator\")\n+\t\t\t: G_(\"conversion to the same type \"\n+\t\t\t     \"will never use a type conversion operator\"));\n \t  /* Don't force t to be complete here.  */\n \t  else if (MAYBE_CLASS_TYPE_P (t)\n \t\t   && COMPLETE_TYPE_P (t)\n \t\t   && DERIVED_FROM_P (t, class_type))\n-\t    warning (OPT_Wconversion,\n-\t\t     ref\n-\t\t     ? G_(\"conversion to a reference to a base class \"\n-\t\t\t  \"will never use a type conversion operator\")\n-\t\t     : G_(\"conversion to a base class \"\n-\t\t\t  \"will never use a type conversion operator\"));\n+\t    warning_at (loc, OPT_Wconversion,\n+\t\t\tref\n+\t\t\t? G_(\"conversion to a reference to a base class \"\n+\t\t\t     \"will never use a type conversion operator\")\n+\t\t\t: G_(\"conversion to a base class \"\n+\t\t\t     \"will never use a type conversion operator\"));\n \t}\n     }\n \n@@ -13365,8 +13365,8 @@ grok_op_properties (tree decl, bool complain)\n   if (operator_code == TRUTH_ANDIF_EXPR\n       || operator_code == TRUTH_ORIF_EXPR\n       || operator_code == COMPOUND_EXPR)\n-    warning (OPT_Weffc__,\n-\t     \"user-defined %qD always evaluates both arguments\", decl);\n+    warning_at (loc, OPT_Weffc__,\n+\t\t\"user-defined %qD always evaluates both arguments\", decl);\n   \n   /* More Effective C++ rule 6.  */\n   if (operator_code == POSTINCREMENT_EXPR\n@@ -13385,13 +13385,14 @@ grok_op_properties (tree decl, bool complain)\n \t{\n \t  if (!TYPE_REF_P (ret)\n \t      || !same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (ret)), arg))\n-\t    warning (OPT_Weffc__, \"prefix %qD should return %qT\", decl,\n-\t\t     build_reference_type (arg));\n+\t    warning_at (loc, OPT_Weffc__, \"prefix %qD should return %qT\", decl,\n+\t\t\tbuild_reference_type (arg));\n \t}\n       else\n \t{\n \t  if (!same_type_p (TYPE_MAIN_VARIANT (ret), arg))\n-\t    warning (OPT_Weffc__, \"postfix %qD should return %qT\", decl, arg);\n+\t    warning_at (loc, OPT_Weffc__,\n+\t\t\t\"postfix %qD should return %qT\", decl, arg);\n \t}\n     }\n \n@@ -13403,7 +13404,7 @@ grok_op_properties (tree decl, bool complain)\n \t  || operator_code == MULT_EXPR\n \t  || operator_code == TRUNC_MOD_EXPR)\n       && TYPE_REF_P (TREE_TYPE (TREE_TYPE (decl))))\n-    warning (OPT_Weffc__, \"%qD should return by value\", decl);\n+    warning_at (loc, OPT_Weffc__, \"%qD should return by value\", decl);\n \n   return true;\n }"}, {"sha": "0eee4a0018d440d0f389f0fe48b730da264aa4b6", "filename": "gcc/testsuite/g++.dg/lookup/new2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fnew2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fnew2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fnew2.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -4,8 +4,8 @@\n \n namespace A {\n   void* operator new(__SIZE_TYPE__ s, int* p); // { dg-error \"namespace\" }\n-  void  operator delete(void*);                // { dg-error \"namespace\" }\n+  void  operator delete(void*);                // { dg-error \"9:.void A::operator delete\\\\(void\\\\*\\\\). may not be declared within a namespace\" }\n }\n \n static void* operator new(__SIZE_TYPE__ s, int* p); // { dg-error \"static\" }\n-static void  operator delete(void*);                // { dg-error \"static\" }\n+static void  operator delete(void*);                // { dg-error \"14:.void operator delete\\\\(void\\\\*\\\\). may not be declared as static\" }"}, {"sha": "54756b8d27c7e390464920c67734bda429f094a2", "filename": "gcc/testsuite/g++.dg/other/ellipsis1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fellipsis1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fellipsis1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fellipsis1.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -3,10 +3,10 @@\n \n struct A\n {\n-    A& operator= (A,...);  // { dg-error \"variable number of arguments\" }\n-    A operator+ (...);     // { dg-error \"variable number of arguments\" }\n-    operator int(...);     // { dg-error \"variable number of arguments\" }\n+    A& operator= (A,...);  // { dg-error \"8:.A& A::operator=\\\\(A, ...\\\\). must not have variable number of arguments\" }\n+    A operator+ (...);     // { dg-error \"7:.A A::operator\\\\+\\\\(...\\\\). must not have variable number of arguments\" }\n+    operator int(...);     // { dg-error \"5:.A::operator int\\\\(...\\\\). must not have variable number of arguments\" }\n     int operator() (...);\n };\n \n-A operator- (A,...);       // { dg-error \"variable number of arguments\" }\n+A operator- (A,...);       // { dg-error \"3:.A operator-\\\\(A, ...\\\\). must not have variable number of arguments\" }"}, {"sha": "d0b0cb25f8cfa89503b3985c57dd90bead4348c9", "filename": "gcc/testsuite/g++.dg/other/operator1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator1.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -1,7 +1,7 @@\n // PR c++/27547\n // { dg-do compile }\n \n-int operator=(int);  // { dg-error \"member function\" }\n+int operator=(int);  // { dg-error \"5:.int operator=\\\\(int\\\\). must be a nonstatic member function\" }\n \n void foo()\n {"}, {"sha": "3587311271866273b8a2510f6bc90dfc31e26aee", "filename": "gcc/testsuite/g++.dg/other/operator2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Foperator2.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -3,7 +3,7 @@\n \n struct A\n {\n-  operator int&(int);  // { dg-error \"no arguments\" }\n+  operator int&(int);  // { dg-error \"3:.A::operator int&\\\\(int\\\\). must have no arguments\" }\n };\n \n A a;"}, {"sha": "b60c629744ecfb4c28e8a1d951ed377487da4a7f", "filename": "gcc/testsuite/g++.dg/overload/operator2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator2.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -3,12 +3,12 @@\n \n struct A\n {\n-  static operator int(); // { dg-error \"must be a nonstatic\" }\n+  static operator int(); // { dg-error \"10:.static A::operator int\\\\(\\\\). must be a nonstatic member function\" }\n };\n \n struct B\n {\n-  static int operator*(); // { dg-error \"must be either\" }\n+  static int operator*(); // { dg-error \"14:.static int B::operator\\\\*\\\\(\\\\). must be either a non-static member function or a non-member function\" }\n };\n \n-static operator int(); // { dg-error \"must be a nonstatic\" }\n+static operator int(); // { dg-error \"8:.operator int\\\\(\\\\). must be a nonstatic member function\" }"}, {"sha": "33f4b8ac70ad5d49a9d23392977ba020323ab64d", "filename": "gcc/testsuite/g++.dg/parse/defarg11.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg11.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -3,7 +3,7 @@\n \n class foo {\n public:\n-  void operator& (int = 1);  // { dg-error \"default argument\" }\n-  void operator++ (int = 2); // { dg-warning \"default argument\" }\n-  void operator-- (int = 3); // { dg-warning \"default argument\" }\n+  void operator& (int = 1);  // { dg-error \"8:.void foo::operator&\\\\(int\\\\). cannot have default arguments\" }\n+  void operator++ (int = 2); // { dg-error \"8:.void foo::operator\\\\+\\\\+\\\\(int\\\\). cannot have default arguments\" }\n+  void operator-- (int = 3); // { dg-error \"8:.void foo::operator--\\\\(int\\\\). cannot have default arguments\" }\n };"}, {"sha": "1c81fbf2b444bf618a29dd2d601c76026eb061ef", "filename": "gcc/testsuite/g++.dg/parse/operator4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foperator4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foperator4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foperator4.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -1 +1 @@\n-int operator *(int, ...); // { dg-error \"class|variable number of arguments\" }\n+int operator *(int, ...); // { dg-error \".int operator\\\\*\\\\(int, ...\\\\). must have an argument of class or enumerated type\" }"}, {"sha": "e1706af0b7a6a03b13e06d6f36b9573d04271406", "filename": "gcc/testsuite/g++.dg/template/error30.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror30.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -2,4 +2,4 @@\n \n template<int> struct A;\n \n-template<template<typename> class B> A<B<int>::x> operator() (); // { dg-error \"A<B<int>::x>\" }\n+template<template<typename> class B> A<B<int>::x> operator() (); // { dg-error \"51:.A<B<int>::x> operator\\\\(\\\\)\\\\(\\\\). must be a nonstatic member function\" }"}, {"sha": "5e16c21b3fd48fa0a5b40ff2e546b9421a89f844", "filename": "gcc/testsuite/g++.dg/template/explicit-args3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit-args3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit-args3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit-args3.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -4,7 +4,7 @@ template <class T>\n struct A { };\n \n template <class T>\n-void operator+(T, T);\t\t// { dg-error \"class or enum\" }\n+void operator+(T, T);\t\t// { dg-error \"6:.void operator\\\\+\\\\(T, T\\\\) \\\\\\[with T = int\\\\\\]. must have an argument of class or enumerated type\" }\n \n int main()\n {"}, {"sha": "2911451ee6d07f8545f1ed8d9fd48651b0eea1fd", "filename": "gcc/testsuite/g++.dg/warn/effc1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Feffc1.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -10,7 +10,7 @@ class A\n {\n   public:\n   A & operator+=( int );\n-  A & operator+( int ); // { dg-warning \".* should return by value\" }\n+  A & operator+( int );  // { dg-warning \"7:.A& A::operator\\\\+\\\\(int\\\\). should return by value\" }\n   A operator+=( float );\n   A operator+( float );\n };"}, {"sha": "cbd05e647b132040af417e389f85d0acdf07a3ce", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/prepost2.C", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost2.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -4,7 +4,10 @@ class foo {\n public:\n       operator ++ (); // { dg-error \"\" } no type or storage class\n       operator ++ (int); // { dg-error \"\" } no type or storage class\n-      operator ++ (char);\t\t// illegal// { dg-error \"\" } .*\n-      operator ++ (short);\t\t// illegal// { dg-error \"\" } .*\n-      operator ++ (long);\t\t// illegal// { dg-error \"\" } .*\n+      operator ++ (char);\t\t// { dg-error \"no type\" }\n+// { dg-error \"7:postfix .int foo::operator\\\\+\\\\+\\\\(char\\\\). must have .int. as its argument\" \"sec\" { target *-*-* } .-1 }\n+      operator ++ (short);\t\t// { dg-error \"no type\" }\n+// { dg-error \"7:postfix .int foo::operator\\\\+\\\\+\\\\(short int\\\\). must have .int. as its argument\" \"sec\" { target *-*-* } .-1 }\n+      operator ++ (long);\t\t// { dg-error \"no type\" }\n+// { dg-error \"7:postfix .int foo::operator\\\\+\\\\+\\\\(long int\\\\). must have .int. as its argument\" \"sec\" { target *-*-* } .-1 }\n };"}, {"sha": "f55c3dc35b3890f2c7700c0799ffc99387be2223", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/prepost3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fprepost3.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -3,5 +3,5 @@\n class Y {\n public:\n    friend Y operator++ (Y&);\n-   friend Y operator++ (Y&, char);\t// illegal// { dg-error \"\" } .*\n+   friend Y operator++ (Y&, char);  // { dg-error \"13:postfix .Y operator\\\\+\\\\+\\\\(Y&, char\\\\). must have .int. as its second argument\" }\n };"}, {"sha": "0cd9b321e3e7d64d8fc04fc537a549d36b8cd292", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900215_01.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900215_01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900215_01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900215_01.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -24,7 +24,7 @@\n \n struct struct0 {\n \n-  operator void ();\t\t// { dg-warning \"\" } operator void\n+  operator void ();  // { dg-warning \"3:conversion to void will never use a type conversion operator\" }\n };\n \n int exit_status = 1;"}, {"sha": "a9531a6d20916fec5e020cf849512d8b426dffef", "filename": "gcc/testsuite/g++.old-deja/g++.jason/conversion5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fconversion5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fconversion5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fconversion5.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -3,7 +3,7 @@\n struct A { };\n struct B: public A {\n   A a;\n-  operator A () { return a; }\t// { dg-warning \"\" } never used implicitly\n+  operator A () { return a; }  // { dg-warning \"3:conversion to a base class will never use a type conversion operator\" }\n };\n void f (const A&);\n void g()"}, {"sha": "ba6d407d1b9031048c89747d0ab585c6b0291ecd", "filename": "gcc/testsuite/g++.old-deja/g++.jason/operator.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foperator.C?ref=fafd0db149b237d2eee2f6ae420dbe3a0ca1ccbe", "patch": "@@ -6,27 +6,27 @@ typedef __SIZE_TYPE__ size_t;\n \n struct A {\n   int operator?:(int a, int b);\t   // { dg-error \"expected type-specifier\" } \n-  static int operator()(int a);\t   // { dg-error \"must be a nonstatic member\" }\n-  static int operator+(A,A);\t   // { dg-error \"either a non-static member\" } \n-  int operator+(int a, int b = 1); // { dg-error \"either zero or one\" }\n-  int operator++(char);\t\t   // { dg-error \"must have 'int'\" }\n+  static int operator()(int a);\t   // { dg-error \"14:.static int A::operator\\\\(\\\\)\\\\(int\\\\). must be a nonstatic member function\" }\n+  static int operator+(A,A);\t   // { dg-error \"14:.static int A::operator\\\\+\\\\(A, A\\\\). must be either a non-static member function or a non-member function\" } \n+  int operator+(int a, int b = 1); // { dg-error \"7:.int A::operator\\\\+\\\\(int, int\\\\). must have either zero or one argument\" }\n+  int operator++(char);\t\t   // { dg-error \"7:postfix .int A::operator\\\\+\\\\+\\\\(char\\\\). must have .int. as its argument\" }\n   void operator delete (void *);   \n   void operator delete (void *, unsigned long);\t\n };\n \n struct B {\n   void * operator new (size_t, void *);\n-  int operator++(int = 0);\n+  int operator++(int = 0);      // { dg-error \"7:.int B::operator\\\\+\\\\+\\\\(int\\\\). cannot have default arguments\" } \n   int operator+ (int);\n   void operator()();\n   char * operator[](int);\n   B * operator->();\n };\n \n-int operator-(int a, int b);\t// { dg-error \"argument of class or\" }\n+int operator-(int a, int b);\t// { dg-error \"5:.int operator-\\\\(int, int\\\\). must have an argument of class or enumerated type\" }\n \n void * operator new (A a);\t// { dg-error \"first parameter\" }\n void operator delete (A a);\t// { dg-error \"first parameter\" }\n \n char * operator char * (int);\t// { dg-error \"return type\" \"ret\" }\n-// { dg-error \"nonstatic member function\" \"mem\" { target *-*-* } .-1 }\n+// { dg-error \"8:.operator char\\\\*\\\\*\\\\(int\\\\). must be a nonstatic member function\" \"mem\" { target *-*-* } .-1 }"}]}