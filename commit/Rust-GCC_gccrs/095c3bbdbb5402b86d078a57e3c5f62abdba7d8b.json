{"sha": "095c3bbdbb5402b86d078a57e3c5f62abdba7d8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk1YzNiYmRiYjU0MDJiODZkMDc4YTU3ZTNjNWY2MmFiZGJhN2Q4Yg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2003-12-01T17:05:16Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2003-12-01T17:05:16Z"}, "message": "flow.c (count_or_remove_death_notes_bb): New.\n\n        * flow.c (count_or_remove_death_notes_bb): New.  Extracted from\n        count_or_remove_death_notes.\n        (count_or_remove_death_notes): Use EXECUTE_IF_SET_IN_SBITMAP.\n\nFrom-SVN: r74111", "tree": {"sha": "aeb2801dd9b947d89f976847d77b7ded7fd6e8c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeb2801dd9b947d89f976847d77b7ded7fd6e8c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/095c3bbdbb5402b86d078a57e3c5f62abdba7d8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/095c3bbdbb5402b86d078a57e3c5f62abdba7d8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/095c3bbdbb5402b86d078a57e3c5f62abdba7d8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/095c3bbdbb5402b86d078a57e3c5f62abdba7d8b/comments", "author": null, "committer": null, "parents": [{"sha": "8325a4ec9c0d79b68856e355323052ad8fbdd21c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8325a4ec9c0d79b68856e355323052ad8fbdd21c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8325a4ec9c0d79b68856e355323052ad8fbdd21c"}], "stats": {"total": 119, "additions": 78, "deletions": 41}, "files": [{"sha": "00e4063938eabb647e8c150bf74aacd1a0d88246", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/095c3bbdbb5402b86d078a57e3c5f62abdba7d8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/095c3bbdbb5402b86d078a57e3c5f62abdba7d8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=095c3bbdbb5402b86d078a57e3c5f62abdba7d8b", "patch": "@@ -1,3 +1,9 @@\n+2003-12-01  Jeff Law  <law@redhat.com>\n+\n+\t* flow.c (count_or_remove_death_notes_bb): New.  Extracted from\n+\tcount_or_remove_death_notes.\n+\t(count_or_remove_death_notes): Use EXECUTE_IF_SET_IN_SBITMAP.\n+\n 2003-12-01  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* builtins.c (expand_builtin_longjmp): Added two memory clobbers."}, {"sha": "d131fab5a8b38b7c089b93be05676d3b83e5bcfd", "filename": "gcc/flow.c", "status": "modified", "additions": 72, "deletions": 41, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/095c3bbdbb5402b86d078a57e3c5f62abdba7d8b/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/095c3bbdbb5402b86d078a57e3c5f62abdba7d8b/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=095c3bbdbb5402b86d078a57e3c5f62abdba7d8b", "patch": "@@ -326,6 +326,7 @@ static void add_to_mem_set_list (struct propagate_block_info *, rtx);\n static int invalidate_mems_from_autoinc (rtx *, void *);\n static void invalidate_mems_from_set (struct propagate_block_info *, rtx);\n static void clear_log_links (sbitmap);\n+static int count_or_remove_death_notes_bb (basic_block, int);\n \f\n \n void\n@@ -4168,65 +4169,95 @@ int\n count_or_remove_death_notes (sbitmap blocks, int kill)\n {\n   int count = 0;\n+  int i;\n   basic_block bb;\n \n-  FOR_EACH_BB_REVERSE (bb)\n+  \n+  /* This used to be a loop over all the blocks with a membership test\n+     inside the loop.  That can be amazingly expensive on a large CFG\n+     when only a small number of bits are set in BLOCKs (for example,\n+     the calls from the scheduler typically have very few bits set).\n+\n+     For extra credit, someone should convert BLOCKS to a bitmap rather\n+     than an sbitmap.  */\n+  if (blocks)\n+    {\n+      EXECUTE_IF_SET_IN_SBITMAP (blocks, 0, i,\n+\t{\n+\t  count += count_or_remove_death_notes_bb (BASIC_BLOCK (i), kill);\n+\t});\n+    }\n+  else\n     {\n-      rtx insn;\n+      FOR_EACH_BB (bb)\n+\t{\n+\t  count += count_or_remove_death_notes_bb (bb, kill);\n+\t}\n+    }\n \n-      if (blocks && ! TEST_BIT (blocks, bb->index))\n-\tcontinue;\n+  return count;\n+}\n+  \n+/* Optionally removes all the REG_DEAD and REG_UNUSED notes from basic\n+   block BB.  Returns a count of the number of registers that died.  */\n+\n+static int\n+count_or_remove_death_notes_bb (basic_block bb, int kill)\n+{\n+  int count = 0;\n+  rtx insn;\n \n-      for (insn = bb->head;; insn = NEXT_INSN (insn))\n+  for (insn = bb->head;; insn = NEXT_INSN (insn))\n+    {\n+      if (INSN_P (insn))\n \t{\n-\t  if (INSN_P (insn))\n-\t    {\n-\t      rtx *pprev = &REG_NOTES (insn);\n-\t      rtx link = *pprev;\n+\t  rtx *pprev = &REG_NOTES (insn);\n+\t  rtx link = *pprev;\n \n-\t      while (link)\n+\t  while (link)\n+\t    {\n+\t      switch (REG_NOTE_KIND (link))\n \t\t{\n-\t\t  switch (REG_NOTE_KIND (link))\n+\t\tcase REG_DEAD:\n+\t\t  if (GET_CODE (XEXP (link, 0)) == REG)\n \t\t    {\n-\t\t    case REG_DEAD:\n-\t\t      if (GET_CODE (XEXP (link, 0)) == REG)\n-\t\t\t{\n-\t\t\t  rtx reg = XEXP (link, 0);\n-\t\t\t  int n;\n-\n-\t\t\t  if (REGNO (reg) >= FIRST_PSEUDO_REGISTER)\n-\t\t\t    n = 1;\n-\t\t\t  else\n-\t\t\t    n = HARD_REGNO_NREGS (REGNO (reg), GET_MODE (reg));\n-\t\t\t  count += n;\n-\t\t\t}\n-\t\t      /* Fall through.  */\n-\n-\t\t    case REG_UNUSED:\n-\t\t      if (kill)\n-\t\t\t{\n-\t\t\t  rtx next = XEXP (link, 1);\n-\t\t\t  free_EXPR_LIST_node (link);\n-\t\t\t  *pprev = link = next;\n-\t\t\t  break;\n-\t\t\t}\n-\t\t      /* Fall through.  */\n-\n-\t\t    default:\n-\t\t      pprev = &XEXP (link, 1);\n-\t\t      link = *pprev;\n+\t\t      rtx reg = XEXP (link, 0);\n+\t\t      int n;\n+\n+\t\t      if (REGNO (reg) >= FIRST_PSEUDO_REGISTER)\n+\t\t        n = 1;\n+\t\t      else\n+\t\t        n = HARD_REGNO_NREGS (REGNO (reg), GET_MODE (reg));\n+\t\t      count += n;\n+\t\t    }\n+\n+\t\t  /* Fall through.  */\n+\n+\t\tcase REG_UNUSED:\n+\t\t  if (kill)\n+\t\t    {\n+\t\t      rtx next = XEXP (link, 1);\n+\t\t      free_EXPR_LIST_node (link);\n+\t\t      *pprev = link = next;\n \t\t      break;\n \t\t    }\n+\t\t  /* Fall through.  */\n+\n+\t\tdefault:\n+\t\t  pprev = &XEXP (link, 1);\n+\t\t  link = *pprev;\n+\t\t  break;\n \t\t}\n \t    }\n-\n-\t  if (insn == bb->end)\n-\t    break;\n \t}\n+\n+      if (insn == bb->end)\n+\tbreak;\n     }\n \n   return count;\n }\n+\n /* Clear LOG_LINKS fields of insns in a selected blocks or whole chain\n    if blocks is NULL.  */\n "}]}