{"sha": "1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU2ZDNiMTBlM2E0ZWI1NTRmMTI3NWFjOGEwZDdlZTMwZjMxZjQ3Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-02-16T09:26:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-02-16T09:26:27Z"}, "message": "re PR target/84272 (AddressSanitizer: heap-use-after-free ../../gcc/config/aarch64/cortex-a57-fma-steering.c:519 in fma_node::get_parity())\n\n\tPR target/84272\n\t* config/aarch64/cortex-a57-fma-steering.c (fma_forest::merge_forest):\n\tUse ++iter rather than iter++ for std::list iterators.\n\t(func_fma_steering::dfs): Likewise.  Don't delete nodes right away,\n\tdefer deleting them until all nodes in the forest are processed.  Do\n\tfree even leaf nodes.  Change to_process into auto_vec.\n\n\t* g++.dg/opt/pr84272.C: New test.\n\nFrom-SVN: r257727", "tree": {"sha": "d0a8c71cdc7dc0e301af120598d15e5c900705df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0a8c71cdc7dc0e301af120598d15e5c900705df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab67039ccd31de6d0192d4560ff971ff0af81726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab67039ccd31de6d0192d4560ff971ff0af81726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab67039ccd31de6d0192d4560ff971ff0af81726"}], "stats": {"total": 68, "additions": 51, "deletions": 17}, "files": [{"sha": "67e207385eea700176d842090aad3047b0a5c1f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476", "patch": "@@ -1,5 +1,12 @@\n 2018-02-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/84272\n+\t* config/aarch64/cortex-a57-fma-steering.c (fma_forest::merge_forest):\n+\tUse ++iter rather than iter++ for std::list iterators.\n+\t(func_fma_steering::dfs): Likewise.  Don't delete nodes right away,\n+\tdefer deleting them until all nodes in the forest are processed.  Do\n+\tfree even leaf nodes.  Change to_process into auto_vec.\n+\n \tPR bootstrap/84405\n \t* system.h (BROKEN_VALUE_INITIALIZATION): Define for GCC < 4.3.\n \t* vec.h (vec_default_construct): Use memset instead of placement new"}, {"sha": "50e5108aa59f63b465a91451ce0decb0028fd8ab", "filename": "gcc/config/aarch64/cortex-a57-fma-steering.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476/gcc%2Fconfig%2Faarch64%2Fcortex-a57-fma-steering.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476/gcc%2Fconfig%2Faarch64%2Fcortex-a57-fma-steering.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fcortex-a57-fma-steering.c?ref=1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476", "patch": "@@ -406,7 +406,7 @@ fma_forest::merge_forest (fma_forest *other_forest)\n \n   /* Update root nodes' pointer to forest.  */\n   for (other_root_iter = other_roots->begin ();\n-       other_root_iter != other_roots->end (); other_root_iter++)\n+       other_root_iter != other_roots->end (); ++other_root_iter)\n     (*other_root_iter)->set_forest (this);\n \n   /* Remove other_forest from the list of forests and move its tree roots in\n@@ -847,14 +847,13 @@ func_fma_steering::dfs (void (*process_forest) (fma_forest *),\n \t\t\tvoid (*process_node) (fma_forest *, fma_node *),\n \t\t\tbool free)\n {\n-  vec<fma_node *> to_process;\n+  auto_vec<fma_node *> to_process;\n+  auto_vec<fma_node *> to_free;\n   std::list<fma_forest *>::iterator forest_iter;\n \n-  to_process.create (0);\n-\n   /* For each forest.  */\n   for (forest_iter = this->m_fma_forests.begin ();\n-       forest_iter != this->m_fma_forests.end (); forest_iter++)\n+       forest_iter != this->m_fma_forests.end (); ++forest_iter)\n     {\n       std::list<fma_root_node *>::iterator root_iter;\n \n@@ -863,7 +862,7 @@ func_fma_steering::dfs (void (*process_forest) (fma_forest *),\n \n       /* For each tree root in this forest.  */\n       for (root_iter = (*forest_iter)->get_roots ()->begin ();\n-\t   root_iter != (*forest_iter)->get_roots ()->end (); root_iter++)\n+\t   root_iter != (*forest_iter)->get_roots ()->end (); ++root_iter)\n \t{\n \t  if (process_root)\n \t    process_root (*forest_iter, *root_iter);\n@@ -881,28 +880,30 @@ func_fma_steering::dfs (void (*process_forest) (fma_forest *),\n \t  if (process_node)\n \t    process_node (*forest_iter, node);\n \n-\t  /* Absence of children might indicate an alternate root of a *chain*.\n-\t     It's ok to skip it here as the chain will be renamed when\n-\t     processing the canonical root for that chain.  */\n-\t  if (node->get_children ()->empty ())\n-\t    continue;\n-\n \t  for (child_iter = node->get_children ()->begin ();\n-\t       child_iter != node->get_children ()->end (); child_iter++)\n+\t       child_iter != node->get_children ()->end (); ++child_iter)\n \t    to_process.safe_push (*child_iter);\n+\n+\t  /* Defer freeing so that the process_node callback can access the\n+\t     parent and children of the node being processed.  */\n \t  if (free)\n+\t    to_free.safe_push (node);\n+\t}\n+\n+      if (free)\n+\t{\n+\t  delete *forest_iter;\n+\n+\t  while (!to_free.is_empty ())\n \t    {\n+\t      fma_node *node = to_free.pop ();\n \t      if (node->root_p ())\n \t\tdelete static_cast<fma_root_node *> (node);\n \t      else\n \t\tdelete node;\n \t    }\n \t}\n-      if (free)\n-\tdelete *forest_iter;\n     }\n-\n-  to_process.release ();\n }\n \n /* Build the dependency trees of FMUL and FMADD/FMSUB instructions.  */"}, {"sha": "2ead408c90a6e632c1c7e1b9902540d5186703f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476", "patch": "@@ -1,5 +1,8 @@\n 2018-02-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/84272\n+\t* g++.dg/opt/pr84272.C: New test.\n+\n \tPR rtl-optimization/83723\n \t* gcc.dg/pr83723.c: New test.\n "}, {"sha": "ad4b8a29cd7d0ae8d756f3ecac1428b3bb7ae40b", "filename": "gcc/testsuite/g++.dg/opt/pr84272.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr84272.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr84272.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr84272.C?ref=1e6d3b10e3a4eb554f1275ac8a0d7ee30f31f476", "patch": "@@ -0,0 +1,23 @@\n+// PR target/84272\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-march=armv8-a -mtune=cortex-a57\" { target aarch64-*-* } }\n+\n+struct A\n+{\n+  float b, c;\n+  A ();\n+  A (float, float, float);\n+  float operator * (A)\n+  {\n+    float d = b * b + c * c;\n+    return d;\n+  }\n+};\n+\n+void\n+foo ()\n+{\n+  A g[1];\n+  A h (0, 0, h * g[2]);\n+}"}]}