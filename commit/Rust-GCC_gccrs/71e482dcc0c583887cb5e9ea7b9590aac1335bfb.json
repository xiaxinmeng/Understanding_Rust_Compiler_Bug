{"sha": "71e482dcc0c583887cb5e9ea7b9590aac1335bfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFlNDgyZGNjMGM1ODM4ODdjYjVlOWVhN2I5NTkwYWFjMTMzNWJmYg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-09-25T19:54:12Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-09-25T19:54:12Z"}, "message": "re PR fortran/57697 ([OOP] Segfault with defined assignment for components during intrinsic assignment)\n\n2013-09-25  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/57697\n        PR fortran/58469\n        * resolve.c (generate_component_assignments): Avoid double free\n        at runtime and freeing a still-being used expr.\n\n2013-09-25  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/57697\n        PR fortran/58469\n        * gfortran.dg/defined_assignment_8.f90: New.\n        * gfortran.dg/defined_assignment_9.f90: New.\n\nFrom-SVN: r202922", "tree": {"sha": "53370fa886d4e0792ef91fd1ea8c97fe80488b02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53370fa886d4e0792ef91fd1ea8c97fe80488b02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71e482dcc0c583887cb5e9ea7b9590aac1335bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e482dcc0c583887cb5e9ea7b9590aac1335bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71e482dcc0c583887cb5e9ea7b9590aac1335bfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e482dcc0c583887cb5e9ea7b9590aac1335bfb/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2272ddac7e097e53f2929b30767dec06396f642e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2272ddac7e097e53f2929b30767dec06396f642e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2272ddac7e097e53f2929b30767dec06396f642e"}], "stats": {"total": 138, "additions": 127, "deletions": 11}, "files": [{"sha": "445dfaef17669f1bfa676fd06845e338bc04e78e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e482dcc0c583887cb5e9ea7b9590aac1335bfb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e482dcc0c583887cb5e9ea7b9590aac1335bfb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=71e482dcc0c583887cb5e9ea7b9590aac1335bfb", "patch": "@@ -1,3 +1,10 @@\n+2013-09-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57697\n+\tPR fortran/58469\n+\t* resolve.c (generate_component_assignments): Avoid double free\n+\tat runtime and freeing a still-being used expr.\n+\n 2013-09-25  Tom Tromey  <tromey@redhat.com>\n \n \t* Make-lang.in (fortran_OBJS): Use fortran/gfortranspec.o."}, {"sha": "4befb9fdda411fd389a62b5657058a6c46832ba2", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e482dcc0c583887cb5e9ea7b9590aac1335bfb/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e482dcc0c583887cb5e9ea7b9590aac1335bfb/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=71e482dcc0c583887cb5e9ea7b9590aac1335bfb", "patch": "@@ -9602,8 +9602,9 @@ generate_component_assignments (gfc_code **code, gfc_namespace *ns)\n \t\t  && gfc_expr_attr ((*code)->expr1).allocatable)\n \t\t{\n \t\t  gfc_code *block;\n-                  gfc_expr *cond;\n-                  cond = gfc_get_expr ();\n+\t\t  gfc_expr *cond;\n+\n+\t\t  cond = gfc_get_expr ();\n \t\t  cond->ts.type = BT_LOGICAL;\n \t\t  cond->ts.kind = gfc_default_logical_kind;\n \t\t  cond->expr_type = EXPR_OP;\n@@ -9621,7 +9622,7 @@ generate_component_assignments (gfc_code **code, gfc_namespace *ns)\n \t\t  add_code_to_chain (&block, &head, &tail);\n \t\t}\n \t    }\n-\t  }\n+\t}\n       else if (this_code->op == EXEC_ASSIGN && !this_code->next)\n \t{\n \t  /* Don't add intrinsic assignments since they are already\n@@ -9643,13 +9644,6 @@ generate_component_assignments (gfc_code **code, gfc_namespace *ns)\n \t}\n     }\n \n-  /* This is probably not necessary.  */\n-  if (this_code)\n-    {\n-      gfc_free_statements (this_code);\n-      this_code = NULL;\n-    }\n-\n   /* Put the temporary assignments at the top of the generated code.  */\n   if (tmp_head && component_assignment_level == 1)\n     {\n@@ -9658,6 +9652,28 @@ generate_component_assignments (gfc_code **code, gfc_namespace *ns)\n       tmp_head = tmp_tail = NULL;\n     }\n \n+  // If we did a pointer assignment - thus, we need to ensure that the LHS is\n+  // not accidentally deallocated. Hence, nullify t1.\n+  if (t1 && (*code)->expr1->symtree->n.sym->attr.allocatable\n+      && gfc_expr_attr ((*code)->expr1).allocatable)\n+    {\n+      gfc_code *block;\n+      gfc_expr *cond;\n+      gfc_expr *e;\n+\n+      e = gfc_lval_expr_from_sym ((*code)->expr1->symtree->n.sym);\n+      cond = gfc_build_intrinsic_call (ns, GFC_ISYM_ASSOCIATED, \"associated\",\n+\t\t\t\t       (*code)->loc, 2, gfc_copy_expr (t1), e);\n+      block = gfc_get_code (EXEC_IF);\n+      block->block = gfc_get_code (EXEC_IF);\n+      block->block->expr1 = cond;\n+      block->block->next = build_assignment (EXEC_POINTER_ASSIGN,\n+\t\t\t\t\tt1, gfc_get_null_expr (&(*code)->loc),\n+\t\t\t\t\tNULL, NULL, (*code)->loc);\n+      gfc_append_code (tail, block);\n+      tail = block;\n+    }\n+\n   /* Now attach the remaining code chain to the input code.  Step on\n      to the end of the new code since resolution is complete.  */\n   gcc_assert ((*code)->op == EXEC_ASSIGN);\n@@ -9667,7 +9683,8 @@ generate_component_assignments (gfc_code **code, gfc_namespace *ns)\n   gfc_free_expr ((*code)->expr1);\n   gfc_free_expr ((*code)->expr2);\n   **code = *head;\n-  free (head);\n+  if (head != tail)\n+    free (head);\n   *code = tail;\n \n   component_assignment_level--;"}, {"sha": "cf19ecf33b07de498b9d7e4e85ef6c7990310c86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e482dcc0c583887cb5e9ea7b9590aac1335bfb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e482dcc0c583887cb5e9ea7b9590aac1335bfb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71e482dcc0c583887cb5e9ea7b9590aac1335bfb", "patch": "@@ -1,3 +1,10 @@\n+2013-09-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57697\n+\tPR fortran/58469\n+\t* gfortran.dg/defined_assignment_8.f90: New.\n+\t* gfortran.dg/defined_assignment_9.f90: New.\n+\n 2013-09-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/58413"}, {"sha": "aab808583adf55f81463ff0d3aa682aa28606c02", "filename": "gcc/testsuite/gfortran.dg/defined_assignment_8.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e482dcc0c583887cb5e9ea7b9590aac1335bfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_assignment_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e482dcc0c583887cb5e9ea7b9590aac1335bfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_assignment_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_assignment_8.f90?ref=71e482dcc0c583887cb5e9ea7b9590aac1335bfb", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do compile }\n+!\n+! PR fortran/58469\n+!\n+! Related: PR fortran/57697\n+!\n+! Was ICEing before\n+!\n+module m0\n+  implicit none\n+  type :: component\n+    integer :: i = 42\n+  contains\n+    procedure :: assign0\n+    generic :: assignment(=) => assign0\n+  end type\n+  type, extends(component) :: comp2\n+    real :: aa\n+  end type comp2\n+  type parent\n+    type(comp2) :: foo\n+  end type\n+contains\n+  elemental subroutine assign0(lhs,rhs)\n+    class(component), intent(INout) :: lhs\n+    class(component), intent(in) :: rhs\n+    lhs%i = 20\n+  end subroutine\n+end module\n+\n+program main\n+  use m0\n+  implicit none\n+  type(parent), allocatable :: left\n+  type(parent) :: right\n+  print *, right%foo\n+  left = right\n+  print *, left%foo\n+  if (left%foo%i /= 42) call abort()\n+end"}, {"sha": "50fa0070f18a0f30df19a7121328b7b177c17aed", "filename": "gcc/testsuite/gfortran.dg/defined_assignment_9.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e482dcc0c583887cb5e9ea7b9590aac1335bfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_assignment_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e482dcc0c583887cb5e9ea7b9590aac1335bfb/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_assignment_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_assignment_9.f90?ref=71e482dcc0c583887cb5e9ea7b9590aac1335bfb", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+!\n+! PR fortran/57697\n+!\n+! Further test of typebound defined assignment\n+!\n+module m0\n+  implicit none\n+  type component\n+    integer :: i = 42\n+  contains\n+    procedure :: assign0\n+    generic :: assignment(=) => assign0\n+  end type\n+  type parent\n+    type(component) :: foo\n+  end type\n+contains\n+  elemental subroutine assign0(lhs,rhs)\n+    class(component), intent(INout) :: lhs\n+    class(component), intent(in) :: rhs\n+    lhs%i = 20\n+  end subroutine\n+end module\n+\n+program main\n+  use m0\n+  implicit none\n+  block\n+    type(parent), allocatable :: left\n+    type(parent) :: right\n+!    print *, right%foo\n+    left = right\n+!    print *, left%foo\n+    if (left%foo%i /= 20) call abort()\n+  end block\n+  block\n+    type(parent), allocatable :: left(:)\n+    type(parent) :: right(5)\n+!    print *, right%foo\n+    left = right\n+!    print *, left%foo\n+    if (any (left%foo%i /= 20)) call abort()\n+  end block\n+end"}]}