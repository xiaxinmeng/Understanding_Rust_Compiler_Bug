{"sha": "3c9f496337f754f7c22afb46b017871db5844a97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M5ZjQ5NjMzN2Y3NTRmN2MyMmFmYjQ2YjAxNzg3MWRiNTg0NGE5Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T10:48:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T10:48:50Z"}, "message": "[AArch64] Add SVE conditional integer unary patterns\n\nThis patch adds patterns to match conditional unary operations\non integers.  At the moment we rely on combine to merge separate\narithmetic and vcond_mask operations, and since the latter doesn't\naccept zero operands, we miss out on the opportunity to use the\nmovprfx /z alternative.  (This alternative is tested by the ACLE\npatches though.)\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md\n\t(*cond_<SVE_INT_UNARY:optab><SVE_I:mode>_2): New pattern.\n\t(*cond_<SVE_INT_UNARY:optab><SVE_I:mode>_any): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_unary_1.c: New test.\n\t* gcc.target/aarch64/sve/cond_unary_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_4_run.c: Likewise.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274476", "tree": {"sha": "c7f6bc70f479f067509224ea9e24e87b31444d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7f6bc70f479f067509224ea9e24e87b31444d03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c9f496337f754f7c22afb46b017871db5844a97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9f496337f754f7c22afb46b017871db5844a97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9f496337f754f7c22afb46b017871db5844a97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9f496337f754f7c22afb46b017871db5844a97/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7eeb5982c3d5b7fdd024769d076f4eca15b87aa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eeb5982c3d5b7fdd024769d076f4eca15b87aa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eeb5982c3d5b7fdd024769d076f4eca15b87aa9"}], "stats": {"total": 344, "additions": 344, "deletions": 0}, "files": [{"sha": "4184b0f0ed2bb27d5d2f1507b988fc2544adcc02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c9f496337f754f7c22afb46b017871db5844a97", "patch": "@@ -1,3 +1,10 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/aarch64-sve.md\n+\t(*cond_<SVE_INT_UNARY:optab><SVE_I:mode>_2): New pattern.\n+\t(*cond_<SVE_INT_UNARY:optab><SVE_I:mode>_any): Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (SVE_COND_FP_ABS_CMP): New iterator."}, {"sha": "bed8da9f8bae027629ebbb0a314b0ddce8c09d45", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=3c9f496337f754f7c22afb46b017871db5844a97", "patch": "@@ -1454,6 +1454,45 @@\n   \"<sve_int_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n )\n \n+;; Predicated integer unary arithmetic, merging with the first input.\n+(define_insn \"*cond_<optab><mode>_2\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (SVE_INT_UNARY:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"0, w\"))\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>\n+   movprfx\\t%0, %2\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated integer unary arithmetic, merging with an independent value.\n+;;\n+;; The earlyclobber isn't needed for the first alternative, but omitting\n+;; it would only help the case in which operands 2 and 3 are the same,\n+;; which is handled above rather than here.  Marking all the alternatives\n+;; as earlyclobber helps to make the instruction more regular to the\n+;; register allocator.\n+(define_insn \"*cond_<optab><mode>_any\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, ?&w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (SVE_INT_UNARY:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"w, w, w\"))\n+\t   (match_operand:SVE_I 3 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE && !rtx_equal_p (operands[2], operands[3])\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\n+   movprfx\\t%0, %3\\;<sve_int_op>\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes,yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Logical inverse\n ;; -------------------------------------------------------------------------"}, {"sha": "cf0f7a0be09cc5de4e07e24ac0a6661cc871b4fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c9f496337f754f7c22afb46b017871db5844a97", "patch": "@@ -1,3 +1,15 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/cond_unary_1.c: New test.\n+\t* gcc.target/aarch64/sve/cond_unary_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_4_run.c: Likewise.\n+\n 2019-08-14  Bob Duff  <duff@adacore.com>\n \n \t* gnat.dg/alignment15.adb: New testcase."}, {"sha": "2705a76530ca4133a38d52fcb019e0a8c5ab0dcc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_1.c?ref=3c9f496337f754f7c22afb46b017871db5844a97", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define abs(A) ((A) < 0 ? -(A) : (A))\n+#define neg(A) (-(A))\n+\n+#define DEF_LOOP(TYPE, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE##_##OP (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t\t      TYPE *__restrict pred, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      r[i] = pred[i] ? OP (a[i]) : a[i];\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, abs) \\\n+  T (TYPE, neg)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int8_t) \\\n+  TEST_TYPE (T, int16_t) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* XFAILed because the ?: gets canonicalized so that the operation is in\n+   the false arm.  */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} { xfail *-*-* } } } */"}, {"sha": "a6c1a49dd1f9cbc2d1dba9b1f48bf228bc5fe4d7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_1_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_1_run.c?ref=3c9f496337f754f7c22afb46b017871db5844a97", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_unary_1.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, OP)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], pred[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tpred[i] = (i % 7 < 4);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##OP (r, a, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? OP (a[i]) : a[i]))\t\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "3d346fb23cacbcd004a0b642360cafb38f715f00", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_2.c?ref=3c9f496337f754f7c22afb46b017871db5844a97", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define abs(A) ((A) < 0 ? -(A) : (A))\n+#define neg(A) (-(A))\n+\n+#define DEF_LOOP(TYPE, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE##_##OP (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t\t      TYPE *__restrict b,\t\t\t\\\n+\t\t      TYPE *__restrict pred, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      r[i] = pred[i] ? OP (a[i]) : b[i];\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, abs) \\\n+  T (TYPE, neg)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int8_t) \\\n+  TEST_TYPE (T, int16_t) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "1a385c323bd452a8e68feb11b007e0643366101c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_2_run.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_2_run.c?ref=3c9f496337f754f7c22afb46b017871db5844a97", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_unary_2.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, OP)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], pred[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tb[i] = (i % 9) * (i % 7 + 1);\t\t\t\t\\\n+\tpred[i] = (i % 7 < 4);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##OP (r, a, b, pred, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? OP (a[i]) : b[i]))\t\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "ab2e99a0341a62535efbe33a5c07ee46e9550e9e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_3.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_3.c?ref=3c9f496337f754f7c22afb46b017871db5844a97", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define abs(A) ((A) < 0 ? -(A) : (A))\n+#define neg(A) (-(A))\n+\n+#define DEF_LOOP(TYPE, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE##_##OP (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t\t      TYPE *__restrict pred, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      r[i] = pred[i] ? OP (a[i]) : 5;\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, abs) \\\n+  T (TYPE, neg)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int8_t) \\\n+  TEST_TYPE (T, int16_t) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 8 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "3c72b239acfd3a8da8a8cfa4e6e2296fcfed0d9b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_3_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_3_run.c?ref=3c9f496337f754f7c22afb46b017871db5844a97", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_unary_3.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, OP)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], pred[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tpred[i] = (i % 7 < 4);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##OP (r, a, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? OP (a[i]) : 5))\t\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "5ad0d809aeaca464e15620af9b9f3134e7174724", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_4.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_4.c?ref=3c9f496337f754f7c22afb46b017871db5844a97", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define abs(A) ((A) < 0 ? -(A) : (A))\n+#define neg(A) (-(A))\n+\n+#define DEF_LOOP(TYPE, OP)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##TYPE##_##OP (TYPE *__restrict r, TYPE *__restrict a,\t\\\n+\t\t      TYPE *__restrict pred, int n)\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+      r[i] = pred[i] ? OP (a[i]) : 0;\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, abs) \\\n+  T (TYPE, neg)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int8_t) \\\n+  TEST_TYPE (T, int16_t) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, int64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tabs\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.b, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.h, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.s, p[0-7]/m,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tneg\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n+\n+/* Really we should be able to use MOVPRFX /z here, but at the moment\n+   we're relying on combine to merge a SEL and an arithmetic operation,\n+   and the SEL doesn't allow the \"false\" value to be zero when the \"true\"\n+   value is a register.  */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+, z[0-9]+\\n} 8 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "48d2541508af9d385c4628cb4f8c1b9cd5a20371", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_4_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9f496337f754f7c22afb46b017871db5844a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_4_run.c?ref=3c9f496337f754f7c22afb46b017871db5844a97", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_unary_4.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, OP)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], pred[N];\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i) * (i % 3 == 0 ? 1 : -1);\t\\\n+\tpred[i] = (i % 7 < 4);\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##OP (r, a, pred, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      if (r[i] != (pred[i] ? OP (a[i]) : 0))\t\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}