{"sha": "0ff6b2f10b96f79eeb088d4e77df272c60b04385", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZmNmIyZjEwYjk2Zjc5ZWViMDg4ZDRlNzdkZjI3MmM2MGIwNDM4NQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-04-16T17:25:08Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-04-16T17:25:08Z"}, "message": "JIS0201.h: New file, generated from Unicode table.\n\n\ufffd\n\t* gnu/gcj/convert/JIS0201.h:  New file, generated from Unicode table.\n\t* gnu/gcj/convert/Input_JavaSrc.java: New BytesToUnicode class.\n\t* gnu/gcj/convert/Input_SJIS.java: New BytesToUnicode class.\n\t* gnu/gcj/convert/Output_EUCJIS.java:  New UnicodeToBytes class.\n\t* gnu/gcj/convert/Output_SJIS.java:  New UnicodeToBytes class.\n\t* gnu/gcj/convert/natInput_EUCJIS.cc:  New file.\n\t* gnu/gcj/convert/natInput_SJIS.cc:  New file.\n\t* gnu/gcj/convert/natOutput_EUCJIS.cc:  New file.\n\t* gnu/gcj/convert/natOutput_SJIS.cc:  New file.\n\t* gnu/gcj/convert/make-trie.c:  New file: functions to make a trie.\n\t* gnu/gcj/convert/gen-from-JIS.c:  Invoke make-trie for output.\n\t* gnu/gcj/convert/Unicode_to_JIS.cc:  New generated trie table.\n\nFrom-SVN: r26502", "tree": {"sha": "cddd6c89fd51beb6c0917d09795fe8ba7e6fab1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cddd6c89fd51beb6c0917d09795fe8ba7e6fab1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ff6b2f10b96f79eeb088d4e77df272c60b04385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ff6b2f10b96f79eeb088d4e77df272c60b04385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ff6b2f10b96f79eeb088d4e77df272c60b04385", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ff6b2f10b96f79eeb088d4e77df272c60b04385/comments", "author": null, "committer": null, "parents": [{"sha": "7b824de381af8ec76c78819f0858e935b6bb44b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b824de381af8ec76c78819f0858e935b6bb44b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b824de381af8ec76c78819f0858e935b6bb44b8"}], "stats": {"total": 23330, "additions": 23330, "deletions": 0}, "files": [{"sha": "fc2107a591b7274150ce398918d2e544fdddf0ab", "filename": "libjava/gnu/gcj/convert/Input_JavaSrc.java", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff6b2f10b96f79eeb088d4e77df272c60b04385/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_JavaSrc.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff6b2f10b96f79eeb088d4e77df272c60b04385/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_JavaSrc.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FInput_JavaSrc.java?ref=0ff6b2f10b96f79eeb088d4e77df272c60b04385", "patch": "@@ -0,0 +1,89 @@\n+/* Copyright (C) 1999  Cygnus Solutions\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.convert; \n+ \n+/**\n+ * Convert Ascii with \\ u XXXX-escapes to Unicode.\n+ * @author Per Bothner <bothner@cygnus.com>\n+ * @date April 1999.\n+ */\n+\n+public class Input_JavaSrc extends BytesToUnicode\n+{\n+  public String getName() { return \"JavaSrc\"; }\n+\n+  // 0: normal\n+  // 1: seen '\\\\'\n+  // 2: seen '\\\\' and 'u'\n+  // 3: seen '\\\\' and need to emit value.\n+  // 4, 5, 6, 7:  seen '\\\\u', 'u' and (state-3) hex digits.\n+  int state = 0;\n+\n+  int value;\n+\n+  public int read (char[] outbuffer, int outpos, int outlength)\n+  {\n+    int origpos = outpos;\n+    for (;;)\n+      {\n+\tif (inpos >= inlength)\n+\t  break;\n+\tif (outpos >= outlength)\n+\t  break;\n+\tchar b = (char) (inbuffer[inpos++] & 0xFF);\n+\tswitch (state)\n+\t  {\n+\t  case 0:\n+\t    if (b == '\\\\')\n+\t      {\n+\t\tstate = 1;\n+\t\tcontinue;\n+\t      }\n+\t    break;\n+\t  case 1:\n+\t    if (b == 'u')\n+\t      {\n+\t\tstate = 2;\n+\t\tcontinue;\n+\t      }\n+\t    if (b != '\\\\')\n+\t      {\n+\t\tvalue = b;\n+\t\tb = '\\\\';\n+\t\tstate = 3;\n+\t      }\n+\t    break;\n+\t  case 3:\n+\t    b = (char) value;\n+\t    break;\n+\t  default:  //  case 4:  case 5:  case 6:  case 7:\n+\t    int digit = Character.digit(b, 16);\n+\t    if (digit < 0)\n+\t      {\n+\t\tb = '\\uFFFD';\n+\t\tstate = 0;\n+\t      }\n+\t    else\n+\t      {\n+\t\tvalue = value * 16 + digit;\n+\t\tif (state < 7)\n+\t\t  {\n+\t\t    state++;\n+\t\t    continue;\n+\t\t  }\n+\t\tb = (char) value;\n+\t      }\n+\t    state = 0;\n+\t  }\n+\toutbuffer[outpos++] = b;\n+      }\n+    return outpos - origpos;\n+  }\n+}\n+"}, {"sha": "7fba4bc9eb170d1cdc7e0871be419faf17cd0993", "filename": "libjava/gnu/gcj/convert/Output_SJIS.java", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff6b2f10b96f79eeb088d4e77df272c60b04385/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_SJIS.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff6b2f10b96f79eeb088d4e77df272c60b04385/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_SJIS.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_SJIS.java?ref=0ff6b2f10b96f79eeb088d4e77df272c60b04385", "patch": "@@ -0,0 +1,26 @@\n+/* Copyright (C) 1999  Cygnus Solutions\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.convert;\n+\n+/**\n+ * Convert Unicode to SJIS (Shift JIS, used on Japanese MS-Windows).\n+ * @author Per Bothner <bothner@cygnus.com>\n+ * @date April 1999.\n+ */\n+\n+public class Output_SJIS extends UnicodeToBytes\n+{\n+  public String getName() { return \"SJIS\"; }\n+\n+  public native int write (char[] inbuffer, int inpos, int inlength);\n+\n+  public native int write (String str, int inpos, int inlength, char[] work);\n+\n+  int pending = -1;\n+}"}, {"sha": "10b3b7003db8e2f17002e9de6327b8e19c64b2c8", "filename": "libjava/gnu/gcj/convert/Unicode_to_JIS.cc", "status": "added", "additions": 23139, "deletions": 0, "changes": 23139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff6b2f10b96f79eeb088d4e77df272c60b04385/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicode_to_JIS.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff6b2f10b96f79eeb088d4e77df272c60b04385/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicode_to_JIS.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FUnicode_to_JIS.cc?ref=0ff6b2f10b96f79eeb088d4e77df272c60b04385"}, {"sha": "59ad532ec82340627f978ac41a25152f8a179664", "filename": "libjava/gnu/gcj/convert/natInput_SJIS.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ff6b2f10b96f79eeb088d4e77df272c60b04385/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatInput_SJIS.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ff6b2f10b96f79eeb088d4e77df272c60b04385/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatInput_SJIS.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FnatInput_SJIS.cc?ref=0ff6b2f10b96f79eeb088d4e77df272c60b04385", "patch": "@@ -0,0 +1,76 @@\n+/* Copyright (C) 1999  Cygnus Solutions\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <cni.h>\n+#include <gnu/gcj/convert/Input_SJIS.h>\n+\n+#define ERROR_CHAR 0xFFFD\n+\n+extern unsigned short JIS0208_to_Unicode[84][94];\n+extern unsigned short JIS0212_to_Unicode[76][94];\n+\n+jint\n+gnu::gcj::convert::Input_SJIS::read(jcharArray outbuffer, jint outpos,\n+\t\t\t\t    jint outlength)\n+{\n+  jint start_outpos = outpos;\n+  for (;;)\n+    {\n+      if (outpos >= outlength)\n+\tbreak;\n+      if (inpos >= inlength)\n+\tbreak;\n+      int b = ((unsigned char*) elements(inbuffer))[inpos++];\n+      if (first_byte == 0)\n+\t{\n+\t  if (b < 128)\n+\t    {\n+#if 1\n+\t      // Technically, we should translate 0x5c to Yen symbol;\n+\t      // in practice, it is not clear.\n+\t      if (b == 0x5c)\n+\t\tb = 0x00A5;  // Yen sign.\n+#endif\n+\t      elements(outbuffer)[outpos++] = (char) b;\n+\t    }\n+\t  else if (b >= 0xA1 && b <= 0xDF)\n+\t    {\n+\t      b += 0xFF61 - 0xA1;\n+\t      elements(outbuffer)[outpos++] = b;\n+\t    }\n+\t  else\n+\t    first_byte = b;\n+\t}\n+      else\n+\t{\n+\t  // From Lunde: \"CJKV Informatio Processing\", O'Reilly, 1999, p 420:\n+\t  bool adjust = b < 159;\n+\t  int rowOffset = first_byte < 160 ? 112 : 176;\n+\t  int cellOffset = adjust ? (b > 127 ? 32 : 31) : 126;\n+\t  first_byte = ((first_byte - rowOffset) << 1) - adjust;\n+\t  b -= cellOffset;\n+\n+\t  first_byte -= 33;\n+\t  b -= 33;\n+\n+\t  if ((unsigned) first_byte >= 84 || (unsigned) b >= 94)\n+\t    b = ERROR_CHAR;\n+\t  else\n+\t    {\n+\t      b = JIS0208_to_Unicode[first_byte][b];\n+\t      if (b == 0)\n+\t\tb = ERROR_CHAR;\n+\t    }\n+\t  elements(outbuffer)[outpos++] = b;\n+\n+\t  first_byte = 0;\n+\t}\n+    }\n+  return outpos - start_outpos;\n+}"}]}