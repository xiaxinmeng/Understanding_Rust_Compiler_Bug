{"sha": "575f7c2bd23fecbeeb4b01dd5e67079078d39496", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc1ZjdjMmJkMjNmZWNiZWViNGIwMWRkNWU2NzA3OTA3OGQzOTQ5Ng==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-10-06T18:22:00Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-10-06T18:22:00Z"}, "message": "s390-protos.h (s_imm_operand): Remove.\n\n\t* config/s390/s390-protos.h (s_imm_operand): Remove.\n\t(s390_pool_operand): Add prototype.\n\t* config/s390/s390.c (general_s_operand): Remove.\n\t(s_imm_operand): Remove.\n\t(s_operand): Merge contents of general_s_operand.\n\t(s390_pool_operand): New function.\n\t* config/s390/s390.h (PREDICATE_CODES): Remove s_imm_operand.\n\t* config/s390/s390.md (\"*cmpdi_cct\", \"*cmpsi_cct\"): New insns.\n\t(\"*cmpdi_ccu\"): Merge Q->Q alternative.\n\t(\"*cmpsi_ccu\", \"*cmphi_ccu\"): Likewise.\n\t(\"*cmpqi_ccu\"): Merge Q->Q, n->Q, n->S alternatives.\n\t(\"*cli\"): Remove.\n\t(\"*cmpdi_ccu_mem\", \"*cmpsi_ccu_mem\"): Likewise.\n\t(\"*cmphi_ccu_mem\", \"*cmpqi_ccu_mem\"): Likewise.\n\t(\"*movstricthi\"): Use memory_operand instead of s_imm_operand.\n\nFrom-SVN: r88614", "tree": {"sha": "566ea3a273ef6907d47abdb88b1ef283d0fd5b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/566ea3a273ef6907d47abdb88b1ef283d0fd5b9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/575f7c2bd23fecbeeb4b01dd5e67079078d39496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575f7c2bd23fecbeeb4b01dd5e67079078d39496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/575f7c2bd23fecbeeb4b01dd5e67079078d39496", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575f7c2bd23fecbeeb4b01dd5e67079078d39496/comments", "author": null, "committer": null, "parents": [{"sha": "71dfe05195d2604f3d512c16a92c03c567fb7bc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71dfe05195d2604f3d512c16a92c03c567fb7bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71dfe05195d2604f3d512c16a92c03c567fb7bc3"}], "stats": {"total": 243, "additions": 125, "deletions": 118}, "files": [{"sha": "761013a5d1e6be9bba2e3bcdaa1dfbf9ebabc445", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575f7c2bd23fecbeeb4b01dd5e67079078d39496/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575f7c2bd23fecbeeb4b01dd5e67079078d39496/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=575f7c2bd23fecbeeb4b01dd5e67079078d39496", "patch": "@@ -1,3 +1,21 @@\n+2004-10-06  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s_imm_operand): Remove.\n+\t(s390_pool_operand): Add prototype.\n+\t* config/s390/s390.c (general_s_operand): Remove.\n+\t(s_imm_operand): Remove.\n+\t(s_operand): Merge contents of general_s_operand.\n+\t(s390_pool_operand): New function.\n+\t* config/s390/s390.h (PREDICATE_CODES): Remove s_imm_operand.\n+\t* config/s390/s390.md (\"*cmpdi_cct\", \"*cmpsi_cct\"): New insns.\n+\t(\"*cmpdi_ccu\"): Merge Q->Q alternative.\n+\t(\"*cmpsi_ccu\", \"*cmphi_ccu\"): Likewise.\n+\t(\"*cmpqi_ccu\"): Merge Q->Q, n->Q, n->S alternatives.\n+\t(\"*cli\"): Remove.\n+\t(\"*cmpdi_ccu_mem\", \"*cmpsi_ccu_mem\"): Likewise.\n+\t(\"*cmphi_ccu_mem\", \"*cmpqi_ccu_mem\"): Likewise.\n+\t(\"*movstricthi\"): Use memory_operand instead of s_imm_operand.\n+\n 2004-10-06  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/ia64/ia64.h (FUNCTION_ARG_BOUNDARY): Change macro to"}, {"sha": "b4b695a159f25b2e320e05b9b3e2ba439a16e03a", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575f7c2bd23fecbeeb4b01dd5e67079078d39496/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575f7c2bd23fecbeeb4b01dd5e67079078d39496/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=575f7c2bd23fecbeeb4b01dd5e67079078d39496", "patch": "@@ -37,7 +37,6 @@ extern int const0_operand (rtx, enum machine_mode);\n extern int consttable_operand (rtx, enum machine_mode);\n extern int larl_operand (rtx, enum machine_mode);\n extern int s_operand (rtx, enum machine_mode);\n-extern int s_imm_operand (rtx, enum machine_mode);\n extern int shift_count_operand (rtx, enum machine_mode);\n extern int bras_sym_operand (rtx, enum machine_mode);\n extern int load_multiple_operation (rtx, enum machine_mode);\n@@ -88,6 +87,7 @@ extern rtx s390_emit_call (rtx, rtx, rtx, rtx);\n extern void s390_expand_logical_operator (enum rtx_code,\n \t\t\t\t\t  enum machine_mode, rtx *);\n extern bool s390_logical_operator_ok_p (rtx *);\n+extern bool s390_pool_operand (rtx);\n \n extern bool s390_output_addr_const_extra (FILE*, rtx);\n extern void print_operand_address (FILE *, rtx);"}, {"sha": "45eb905fb666f648cc966c31d6258e0b50f7b63b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 40, "deletions": 53, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575f7c2bd23fecbeeb4b01dd5e67079078d39496/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575f7c2bd23fecbeeb4b01dd5e67079078d39496/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=575f7c2bd23fecbeeb4b01dd5e67079078d39496", "patch": "@@ -279,7 +279,6 @@ static int s390_match_ccmode_set (rtx, enum machine_mode);\n static int s390_branch_condition_mask (rtx);\n static const char *s390_branch_condition_mnemonic (rtx, int);\n static int check_mode (rtx, enum machine_mode *);\n-static int general_s_operand (rtx, enum machine_mode, int);\n static int s390_short_displacement (rtx);\n static int s390_decompose_address (rtx, struct s390_address *);\n static rtx get_thread_pointer (void);\n@@ -1423,15 +1422,12 @@ larl_operand (register rtx op, enum machine_mode mode)\n   return 0;\n }\n \n-/* Helper routine to implement s_operand and s_imm_operand.\n+/* Return true if OP is a valid S-type operand.\n    OP is the current operation.\n-   MODE is the current operation mode.\n-   ALLOW_IMMEDIATE specifies whether immediate operands should\n-   be accepted or not.  */\n+   MODE is the current operation mode.  */\n \n-static int\n-general_s_operand (register rtx op, enum machine_mode mode,\n-\t\t   int allow_immediate)\n+int\n+s_operand (rtx op, enum machine_mode mode)\n {\n   struct s390_address addr;\n \n@@ -1447,58 +1443,49 @@ general_s_operand (register rtx op, enum machine_mode mode,\n       && GET_CODE (SUBREG_REG (op)) == MEM)\n     op = SUBREG_REG (op);\n \n-  switch (GET_CODE (op))\n-    {\n-      /* Constants are OK as s-operand if ALLOW_IMMEDIATE\n-\t is true and we are still before reload.  */\n-      case CONST_INT:\n-      case CONST_DOUBLE:\n-\tif (!allow_immediate || reload_completed)\n-\t  return 0;\n-\treturn 1;\n-\n-      /* Memory operands are OK unless they already use an\n-\t index register.  */\n-      case MEM:\n-\tif (!s390_decompose_address (XEXP (op, 0), &addr))\n-\t  return 0;\n-\tif (addr.indx)\n-\t  return 0;\n-\t/* Do not allow literal pool references unless ALLOW_IMMEDIATE\n-\t   is true.  This prevents compares between two literal pool\n-\t   entries from being accepted.  */\n-\tif (!allow_immediate\n-\t    && addr.base && REGNO (addr.base) == BASE_REGNUM)\n-\t  return 0;\n-\treturn 1;\n-\n-      default:\n-\tbreak;\n-    }\n+  if (GET_CODE (op) != MEM)\n+    return 0;\n+  if (!s390_decompose_address (XEXP (op, 0), &addr))\n+    return 0;\n+  if (addr.indx)\n+    return 0;\n \n-  return 0;\n+  return 1;\n }\n \n-/* Return true if OP is a valid S-type operand.\n-   OP is the current operation.\n-   MODE is the current operation mode.  */\n+/* Return true if OP is a memory operand pointing to the\n+   literal pool, or an immediate operand.  */\n \n-int\n-s_operand (register rtx op, enum machine_mode mode)\n+bool\n+s390_pool_operand (rtx op)\n {\n-  return general_s_operand (op, mode, 0);\n-}\n+  struct s390_address addr;\n \n-/* Return true if OP is a valid S-type operand or an immediate\n-   operand that can be addressed as S-type operand by forcing\n-   it into the literal pool.\n-   OP is the current operation.\n-   MODE is the current operation mode.  */\n+  /* Just like memory_operand, allow (subreg (mem ...))\n+     after reload.  */\n+  if (reload_completed\n+      && GET_CODE (op) == SUBREG\n+      && GET_CODE (SUBREG_REG (op)) == MEM)\n+    op = SUBREG_REG (op);\n \n-int\n-s_imm_operand (register rtx op, enum machine_mode mode)\n-{\n-  return general_s_operand (op, mode, 1);\n+  switch (GET_CODE (op))\n+    {\n+    case CONST_INT:\n+    case CONST_DOUBLE:\n+      return true;\n+\n+    case MEM:\n+      if (!s390_decompose_address (XEXP (op, 0), &addr))\n+\treturn false;\n+      if (addr.base && REG_P (addr.base) && REGNO (addr.base) == BASE_REGNUM)\n+\treturn true;\n+      if (addr.indx && REG_P (addr.indx) && REGNO (addr.indx) == BASE_REGNUM)\n+\treturn true;\n+      return false;\n+\n+    default:\n+      return false;\n+    }\n }\n \n /* Return true if OP a valid shift count operand."}, {"sha": "601314f1843385f426c968bdf4f60628a17a3a1b", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575f7c2bd23fecbeeb4b01dd5e67079078d39496/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575f7c2bd23fecbeeb4b01dd5e67079078d39496/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=575f7c2bd23fecbeeb4b01dd5e67079078d39496", "patch": "@@ -1015,7 +1015,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Define the codes that are matched by predicates in aux-output.c.  */\n #define PREDICATE_CODES\t\t\t\t\t\t\t\\\n   {\"s_operand\",       { SUBREG, MEM }},\t\t\t\t\t\\\n-  {\"s_imm_operand\",   { CONST_INT, CONST_DOUBLE, SUBREG, MEM }},\t\\\n   {\"shift_count_operand\", { REG, SUBREG, PLUS, CONST_INT }},\t\t\\\n   {\"bras_sym_operand\",{ SYMBOL_REF, CONST }},\t\t\t\t\\\n   {\"larl_operand\",    { SYMBOL_REF, CONST, CONST_INT, CONST_DOUBLE }},\t\\"}, {"sha": "feea29836e8118be52eb2097335cdbf0a03129f9", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 66, "deletions": 63, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575f7c2bd23fecbeeb4b01dd5e67079078d39496/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575f7c2bd23fecbeeb4b01dd5e67079078d39496/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=575f7c2bd23fecbeeb4b01dd5e67079078d39496", "patch": "@@ -517,6 +517,39 @@\n   [(set_attr \"op_type\" \"RS,RSY\")])\n \n \n+; Compare (equality) instructions\n+\n+(define_insn \"*cmpdi_cct\"\n+  [(set (reg 33)\n+        (compare (match_operand:DI 0 \"nonimmediate_operand\" \"d,d,d,m,Q\")\n+                 (match_operand:DI 1 \"general_operand\" \"d,K,m,d,Q\")))]\n+  \"s390_match_ccmode (insn, CCTmode) && TARGET_64BIT\n+   && (!s390_pool_operand (operands[0]) || !s390_pool_operand (operands[1]))\"\n+  \"@\n+   cgr\\t%0,%1\n+   cghi\\t%0,%c1\n+   cg\\t%0,%1\n+   cg\\t%1,%0\n+   clc\\t%O0(8,%R0),%1\"\n+  [(set_attr \"op_type\" \"RRE,RI,RXY,RXY,SS\")])\n+\n+(define_insn \"*cmpsi_cct\"\n+  [(set (reg 33)\n+        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"d,d,d,d,R,T,Q\")\n+                 (match_operand:SI 1 \"general_operand\" \"d,K,R,T,d,d,Q\")))]\n+  \"s390_match_ccmode (insn, CCTmode)\n+   && (!s390_pool_operand (operands[0]) || !s390_pool_operand (operands[1]))\"\n+  \"@\n+   cr\\t%0,%1\n+   chi\\t%0,%c1\n+   c\\t%0,%1\n+   cy\\t%0,%1\n+   c\\t%1,%0\n+   cy\\t%1,%0\n+   clc\\t%O0(4,%R0),%1\"\n+  [(set_attr \"op_type\" \"RR,RI,RX,RXY,RX,RXY,SS\")])\n+\n+\n ; Compare (signed) instructions\n \n (define_insn \"*cmpdi_ccs_sign\"\n@@ -569,94 +602,64 @@\n   [(set (reg 33)\n         (compare (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"d,m\"))\n                  (match_operand:DI 0 \"register_operand\" \"d,d\")))]\n-  \"s390_match_ccmode(insn, CCURmode) && TARGET_64BIT\"\n+  \"s390_match_ccmode (insn, CCURmode) && TARGET_64BIT\"\n   \"@\n    clgfr\\t%0,%1\n    clgf\\t%0,%1\"\n   [(set_attr \"op_type\" \"RRE,RXY\")])\n \n (define_insn \"*cmpdi_ccu\"\n   [(set (reg 33)\n-        (compare (match_operand:DI 0 \"register_operand\" \"d,d\")\n-                 (match_operand:DI 1 \"general_operand\" \"d,m\")))]\n-  \"s390_match_ccmode(insn, CCUmode) && TARGET_64BIT\"\n+        (compare (match_operand:DI 0 \"nonimmediate_operand\" \"d,d,Q\")\n+                 (match_operand:DI 1 \"general_operand\" \"d,m,Q\")))]\n+  \"s390_match_ccmode (insn, CCUmode) && TARGET_64BIT\n+   && (!s390_pool_operand (operands[0]) || !s390_pool_operand (operands[1]))\"\n   \"@\n    clgr\\t%0,%1\n-   clg\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RRE,RXY\")])\n+   clg\\t%0,%1\n+   clc\\t%O0(8,%R0),%1\"\n+  [(set_attr \"op_type\" \"RRE,RXY,SS\")])\n \n (define_insn \"*cmpsi_ccu\"\n   [(set (reg 33)\n-        (compare (match_operand:SI 0 \"register_operand\" \"d,d,d\")\n-                 (match_operand:SI 1 \"general_operand\" \"d,R,T\")))]\n-  \"s390_match_ccmode(insn, CCUmode)\"\n+        (compare (match_operand:SI 0 \"nonimmediate_operand\" \"d,d,d,Q\")\n+                 (match_operand:SI 1 \"general_operand\" \"d,R,T,Q\")))]\n+  \"s390_match_ccmode (insn, CCUmode)\n+   && (!s390_pool_operand (operands[0]) || !s390_pool_operand (operands[1]))\"\n   \"@\n    clr\\t%0,%1\n    cl\\t%0,%1\n-   cly\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RR,RX,RXY\")])\n+   cly\\t%0,%1\n+   clc\\t%O0(4,%R0),%1\"\n+  [(set_attr \"op_type\" \"RR,RX,RXY,SS\")])\n \n (define_insn \"*cmphi_ccu\"\n   [(set (reg 33)\n-        (compare (match_operand:HI 0 \"register_operand\" \"d,d\")\n-                 (match_operand:HI 1 \"s_imm_operand\" \"Q,S\")))]\n-  \"s390_match_ccmode(insn, CCUmode)\"\n+        (compare (match_operand:HI 0 \"nonimmediate_operand\" \"d,d,Q\")\n+                 (match_operand:HI 1 \"general_operand\" \"Q,S,Q\")))]\n+  \"s390_match_ccmode (insn, CCUmode)\n+   && (!s390_pool_operand (operands[0]) || !s390_pool_operand (operands[1]))\n+   && !register_operand (operands[1], HImode)\"\n   \"@\n    clm\\t%0,3,%1\n-   clmy\\t%0,3,%1\"\n-  [(set_attr \"op_type\" \"RS,RSY\")])\n+   clmy\\t%0,3,%1\n+   clc\\t%O0(2,%R0),%1\"\n+  [(set_attr \"op_type\" \"RS,RSY,SS\")])\n \n (define_insn \"*cmpqi_ccu\"\n   [(set (reg 33)\n-        (compare (match_operand:QI 0 \"register_operand\" \"d,d\")\n-                 (match_operand:QI 1 \"s_imm_operand\" \"Q,S\")))]\n-  \"s390_match_ccmode(insn, CCUmode)\"\n+        (compare (match_operand:QI 0 \"nonimmediate_operand\" \"d,d,Q,S,Q\")\n+                 (match_operand:QI 1 \"general_operand\" \"Q,S,n,n,Q\")))]\n+  \"s390_match_ccmode (insn, CCUmode)\n+   && (!s390_pool_operand (operands[0]) || !s390_pool_operand (operands[1]))\n+   && !register_operand (operands[1], QImode)\"\n   \"@\n    clm\\t%0,1,%1\n-   clmy\\t%0,1,%1\"\n-  [(set_attr \"op_type\" \"RS,RSY\")])\n-\n-(define_insn \"*cli\"\n-  [(set (reg 33)\n-        (compare (match_operand:QI 0 \"memory_operand\" \"Q,S\")\n-                 (match_operand:QI 1 \"immediate_operand\" \"n,n\")))]\n-  \"s390_match_ccmode (insn, CCUmode)\"\n-  \"@\n+   clmy\\t%0,1,%1\n    cli\\t%0,%b1\n-   cliy\\t%0,%b1\"\n-  [(set_attr \"op_type\" \"SI,SIY\")])\n-\n-(define_insn \"*cmpdi_ccu_mem\"\n-  [(set (reg 33)\n-        (compare (match_operand:DI 0 \"s_operand\" \"Q\")\n-                 (match_operand:DI 1 \"s_imm_operand\" \"Q\")))]\n-  \"s390_match_ccmode(insn, CCUmode)\"\n-  \"clc\\t%O0(8,%R0),%1\"\n-  [(set_attr \"op_type\" \"SS\")])\n-\n-(define_insn \"*cmpsi_ccu_mem\"\n-  [(set (reg 33)\n-        (compare (match_operand:SI 0 \"s_operand\" \"Q\")\n-                 (match_operand:SI 1 \"s_imm_operand\" \"Q\")))]\n-  \"s390_match_ccmode(insn, CCUmode)\"\n-  \"clc\\t%O0(4,%R0),%1\"\n-   [(set_attr \"op_type\" \"SS\")])\n-\n-(define_insn \"*cmphi_ccu_mem\"\n-  [(set (reg 33)\n-        (compare (match_operand:HI 0 \"s_operand\" \"Q\")\n-                 (match_operand:HI 1 \"s_imm_operand\" \"Q\")))]\n-  \"s390_match_ccmode(insn, CCUmode)\"\n-  \"clc\\t%O0(2,%R0),%1\"\n-  [(set_attr \"op_type\" \"SS\")])\n-\n-(define_insn \"*cmpqi_ccu_mem\"\n-  [(set (reg 33)\n-        (compare (match_operand:QI 0 \"s_operand\" \"Q\")\n-                 (match_operand:QI 1 \"s_imm_operand\" \"Q\")))]\n-  \"s390_match_ccmode(insn, CCUmode)\"\n-  \"clc\\t%O0(1,%R0),%1\"\n-  [(set_attr \"op_type\" \"SS\")])\n+   cliy\\t%0,%b1\n+   clc\\t%O0(1,%R0),%1\"\n+  [(set_attr \"op_type\" \"RS,RSY,SI,SIY,SS\")])\n \n \n ; DF instructions\n@@ -1264,7 +1267,7 @@\n \n (define_insn \"*movstricthi\"\n   [(set (strict_low_part (match_operand:HI 0 \"register_operand\" \"+d,d\"))\n-                         (match_operand:HI 1 \"s_imm_operand\" \"Q,S\"))\n+                         (match_operand:HI 1 \"memory_operand\" \"Q,S\"))\n    (clobber (reg:CC 33))]\n   \"\"\n   \"@"}]}