{"sha": "31ed166586451e3955d0da9c7931c71da968eee4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFlZDE2NjU4NjQ1MWUzOTU1ZDBkYTljNzkzMWM3MWRhOTY4ZWVlNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-03T11:45:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-03T11:45:04Z"}, "message": "re PR rtl-optimization/70467 (Useless \"and [esp],-1\" emitted on AND with uint64_t variable)\n\n\tPR rtl-optimization/70467\n\t* config/i386/predicates.md (x86_64_hilo_int_operand,\n\tx86_64_hilo_general_operand): New predicates.\n\t* config/i386/constraints.md (Wd): New constraint.\n\t* config/i386/i386.md (mode attr di): Use Wd instead of e.\n\t(general_hilo_operand): New mode attr.\n\t(add<mode>3, sub<mode>3): Use <general_hilo_operand>\n\tinstead of <general_operand>.\n\t(*add<dwi>3_doubleword, *sub<dwi>3_doubleword): Use\n\tx86_64_hilo_general_operand instead of <general_operand>.\n\n\t* gcc.target/i386/pr70467-3.c: New test.\n\t* gcc.target/i386/pr70467-4.c: New test.\n\nCo-Authored-By: Uros Bizjak <ubizjak@gmail.com>\n\nFrom-SVN: r235816", "tree": {"sha": "1ce1e1bae4e7829ce25014d49a2a894842c9b7d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ce1e1bae4e7829ce25014d49a2a894842c9b7d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31ed166586451e3955d0da9c7931c71da968eee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ed166586451e3955d0da9c7931c71da968eee4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ed166586451e3955d0da9c7931c71da968eee4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ed166586451e3955d0da9c7931c71da968eee4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7437b594f9c54bc07a2ef0bda9801ce62b1eab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7437b594f9c54bc07a2ef0bda9801ce62b1eab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7437b594f9c54bc07a2ef0bda9801ce62b1eab7"}], "stats": {"total": 112, "additions": 107, "deletions": 5}, "files": [{"sha": "9b1b95b5fff357cc9f0f047779968833db3edd13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31ed166586451e3955d0da9c7931c71da968eee4", "patch": "@@ -1,3 +1,17 @@\n+2016-05-03  Jakub Jelinek  <jakub@redhat.com>\n+\t    Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/70467\n+\t* config/i386/predicates.md (x86_64_hilo_int_operand,\n+\tx86_64_hilo_general_operand): New predicates.\n+\t* config/i386/constraints.md (Wd): New constraint.\n+\t* config/i386/i386.md (mode attr di): Use Wd instead of e.\n+\t(general_hilo_operand): New mode attr.\n+\t(add<mode>3, sub<mode>3): Use <general_hilo_operand>\n+\tinstead of <general_operand>.\n+\t(*add<dwi>3_doubleword, *sub<dwi>3_doubleword): Use\n+\tx86_64_hilo_general_operand instead of <general_operand>.\n+\n 2016-05-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/70916"}, {"sha": "ccebee775e194edcd061080b0b2adf3b19cfaa73", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=31ed166586451e3955d0da9c7931c71da968eee4", "patch": "@@ -270,6 +270,11 @@\n   (and (match_operand 0 \"x86_64_zext_immediate_operand\")\n        (match_test \"GET_MODE (op) != VOIDmode\")))\n \n+(define_constraint \"Wd\"\n+  \"128-bit integer constant where both the high and low 64-bit word\n+   of it satisfies the e constraint.\"\n+  (match_operand 0 \"x86_64_hilo_int_operand\"))\n+\n (define_constraint \"Z\"\n   \"32-bit unsigned integer constant, or a symbolic reference known\n    to fit that range (for immediate operands in zero-extending x86-64"}, {"sha": "940dc204be5cfe401d5cf39f3899dde199baae4a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=31ed166586451e3955d0da9c7931c71da968eee4", "patch": "@@ -1065,7 +1065,7 @@\n (define_mode_attr g [(QI \"qmn\") (HI \"rmn\") (SI \"rme\") (DI \"rme\")])\n \n ;; Immediate operand constraint for double integer modes.\n-(define_mode_attr di [(SI \"nF\") (DI \"e\")])\n+(define_mode_attr di [(SI \"nF\") (DI \"Wd\")])\n \n ;; Immediate operand constraint for shifts.\n (define_mode_attr S [(QI \"I\") (HI \"I\") (SI \"I\") (DI \"J\") (TI \"O\")])\n@@ -1078,6 +1078,15 @@\n \t (DI \"x86_64_general_operand\")\n \t (TI \"x86_64_general_operand\")])\n \n+;; General operand predicate for integer modes, where for TImode\n+;; we need both words of the operand to be general operands.\n+(define_mode_attr general_hilo_operand\n+\t[(QI \"general_operand\")\n+\t (HI \"general_operand\")\n+\t (SI \"x86_64_general_operand\")\n+\t (DI \"x86_64_general_operand\")\n+\t (TI \"x86_64_hilo_general_operand\")])\n+\n ;; General sign extend operand predicate for integer modes,\n ;; which disallows VOIDmode operands and thus it is suitable\n ;; for use inside sign_extend.\n@@ -5433,15 +5442,16 @@\n (define_expand \"add<mode>3\"\n   [(set (match_operand:SDWIM 0 \"nonimmediate_operand\")\n \t(plus:SDWIM (match_operand:SDWIM 1 \"nonimmediate_operand\")\n-\t\t    (match_operand:SDWIM 2 \"<general_operand>\")))]\n+\t\t    (match_operand:SDWIM 2 \"<general_hilo_operand>\")))]\n   \"\"\n   \"ix86_expand_binary_operator (PLUS, <MODE>mode, operands); DONE;\")\n \n (define_insn_and_split \"*add<dwi>3_doubleword\"\n   [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=r,o\")\n \t(plus:<DWI>\n \t  (match_operand:<DWI> 1 \"nonimmediate_operand\" \"%0,0\")\n-\t  (match_operand:<DWI> 2 \"<general_operand>\" \"ro<di>,r<di>\")))\n+\t  (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\"\n+\t\t\t\t\t\t\t\"ro<di>,r<di>\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, <DWI>mode, operands)\"\n   \"#\"\n@@ -6345,15 +6355,16 @@\n (define_expand \"sub<mode>3\"\n   [(set (match_operand:SDWIM 0 \"nonimmediate_operand\")\n \t(minus:SDWIM (match_operand:SDWIM 1 \"nonimmediate_operand\")\n-\t\t     (match_operand:SDWIM 2 \"<general_operand>\")))]\n+\t\t     (match_operand:SDWIM 2 \"<general_hilo_operand>\")))]\n   \"\"\n   \"ix86_expand_binary_operator (MINUS, <MODE>mode, operands); DONE;\")\n \n (define_insn_and_split \"*sub<dwi>3_doubleword\"\n   [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=r,o\")\n \t(minus:<DWI>\n \t  (match_operand:<DWI> 1 \"nonimmediate_operand\" \"0,0\")\n-\t  (match_operand:<DWI> 2 \"<general_operand>\" \"ro<di>,r<di>\")))\n+\t  (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\"\n+\t\t\t\t\t\t\t\"ro<di>,r<di>\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n   \"#\""}, {"sha": "b3a471d8b7669e188acd033b7e2c434d5209542f", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=31ed166586451e3955d0da9c7931c71da968eee4", "patch": "@@ -342,6 +342,29 @@\n   return false;\n })\n \n+;; Return true if VALUE is a constant integer whose low and high words satisfy\n+;; x86_64_immediate_operand.\n+(define_predicate \"x86_64_hilo_int_operand\"\n+  (match_code \"const_int,const_wide_int\")\n+{\n+  switch (GET_CODE (op))\n+    {\n+    case CONST_INT:\n+      return x86_64_immediate_operand (op, mode);\n+\n+    case CONST_WIDE_INT:\n+      gcc_assert (CONST_WIDE_INT_NUNITS (op) == 2);\n+      return (x86_64_immediate_operand (GEN_INT (CONST_WIDE_INT_ELT (op, 0)),\n+\t\t\t\t\tDImode)\n+\t      && x86_64_immediate_operand (GEN_INT (CONST_WIDE_INT_ELT (op,\n+\t\t\t\t\t\t\t\t\t1)),\n+\t\t\t\t\t   DImode));\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+})\n+\n ;; Return true if size of VALUE can be stored in a sign\n ;; extended immediate field.\n (define_predicate \"x86_64_immediate_size_operand\"\n@@ -357,6 +380,14 @@\n \t (match_operand 0 \"x86_64_immediate_operand\"))\n     (match_operand 0 \"general_operand\")))\n \n+;; Return true if OP's both words are general operands representable\n+;; on x86_64.\n+(define_predicate \"x86_64_hilo_general_operand\"\n+  (if_then_else (match_test \"TARGET_64BIT\")\n+    (ior (match_operand 0 \"nonimmediate_operand\")\n+\t (match_operand 0 \"x86_64_hilo_int_operand\"))\n+    (match_operand 0 \"general_operand\")))\n+\n ;; Return true if OP is non-VOIDmode general operand representable\n ;; on x86_64.  This predicate is used in sign-extending conversion\n ;; operations that require non-VOIDmode immediate operands."}, {"sha": "7a898688fc582ee9f737d9c13284c73a0b31fee9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31ed166586451e3955d0da9c7931c71da968eee4", "patch": "@@ -1,5 +1,9 @@\n 2016-05-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/70467\n+\t* gcc.target/i386/pr70467-3.c: New test.\n+\t* gcc.target/i386/pr70467-4.c: New test.\n+\n \tPR tree-optimization/70916\n \t* gcc.c-torture/compile/pr70916.c: New test.\n "}, {"sha": "4d2a6cfaead47a9b6d441000af4e7a9a4419b42a", "filename": "gcc/testsuite/gcc.target/i386/pr70467-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70467-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70467-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70467-3.c?ref=31ed166586451e3955d0da9c7931c71da968eee4", "patch": "@@ -0,0 +1,19 @@\n+/* PR rtl-optimization/70467 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+__uint128_t\n+foo (__uint128_t x)\n+{\n+  return x + ((__uint128_t) 123456 << 64);\n+}\n+\n+__uint128_t\n+bar (__uint128_t x)\n+{\n+  return x - ((__uint128_t) 123456 << 64);\n+}\n+\n+/* Make sure there are no unnecessary additions with carry.  */\n+/* { dg-final { scan-assembler-not \"adcq\\[^\\n\\r\\]*%\" } } */\n+/* { dg-final { scan-assembler-not \"sbbq\\[^\\n\\r\\]*%\" } } */"}, {"sha": "91f9b6f43c93a253d947c863aa1b59bea5a058fe", "filename": "gcc/testsuite/gcc.target/i386/pr70467-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70467-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31ed166586451e3955d0da9c7931c71da968eee4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70467-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70467-4.c?ref=31ed166586451e3955d0da9c7931c71da968eee4", "patch": "@@ -0,0 +1,18 @@\n+/* PR rtl-optimization/70467 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+__uint128_t\n+foo (__uint128_t x)\n+{\n+  return x + ((__uint128_t) 123456 << 64) + 0x1234567;\n+}\n+\n+__uint128_t\n+bar (__uint128_t x)\n+{\n+  return x - ((__uint128_t) 123456 << 64) + 0x1234567;\n+}\n+\n+/* Make sure the immediates are not loaded into registers first.  */\n+/* { dg-final { scan-assembler-not \"mov\\[lq\\]\\[ \\t\\]*.\\[0-9-\\]\" } } */"}]}