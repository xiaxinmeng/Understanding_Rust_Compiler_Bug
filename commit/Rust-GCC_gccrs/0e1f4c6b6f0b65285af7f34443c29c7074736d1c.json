{"sha": "0e1f4c6b6f0b65285af7f34443c29c7074736d1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUxZjRjNmI2ZjBiNjUyODVhZjdmMzQ0NDNjMjljNzA3NDczNmQxYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-07-04T09:34:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-07-04T09:34:36Z"}, "message": "tree-ssa-structalias.c (lookup_vi_for_tree): Declare.\n\n2008-07-04  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (lookup_vi_for_tree): Declare.\n\t(do_sd_constraint): Handle a dereference of ESCAPED and CALLUSED\n\tproperly to compute the reachability set if we do field-sensitive PTA.\n\t* invoke.texi (max-fields-for-field-sensitive): Document default.\n\t* opts.c (decode_options): Set max-fields-for-field-sensitive to\n\t100 for optimize >= 2.\n\n\t* gcc.dg/tree-ssa/pta-callused.c: New testcase.\n\nFrom-SVN: r137453", "tree": {"sha": "c246ed79651a3ea0f60e636497df49b18fcf12da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c246ed79651a3ea0f60e636497df49b18fcf12da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e1f4c6b6f0b65285af7f34443c29c7074736d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1f4c6b6f0b65285af7f34443c29c7074736d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e1f4c6b6f0b65285af7f34443c29c7074736d1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1f4c6b6f0b65285af7f34443c29c7074736d1c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b4b69ef79271e8e6a2dfa2eaa3376a75fa05d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b4b69ef79271e8e6a2dfa2eaa3376a75fa05d03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b4b69ef79271e8e6a2dfa2eaa3376a75fa05d03"}], "stats": {"total": 88, "additions": 87, "deletions": 1}, "files": [{"sha": "9655811db9b84ffdf53849cf521d62b8198836f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1f4c6b6f0b65285af7f34443c29c7074736d1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1f4c6b6f0b65285af7f34443c29c7074736d1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e1f4c6b6f0b65285af7f34443c29c7074736d1c", "patch": "@@ -1,3 +1,12 @@\n+2008-07-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (lookup_vi_for_tree): Declare.\n+\t(do_sd_constraint): Handle a dereference of ESCAPED and CALLUSED\n+\tproperly to compute the reachability set if we do field-sensitive PTA.\n+\t* invoke.texi (max-fields-for-field-sensitive): Document default.\n+\t* opts.c (decode_options): Set max-fields-for-field-sensitive to\n+\t100 for optimize >= 2.\n+\n 2008-07-04  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config.gcc (extra_headers): Add cross-stdarg.h for target"}, {"sha": "5732d984d44fe36e3604fe910755021ca16a3c4f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1f4c6b6f0b65285af7f34443c29c7074736d1c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1f4c6b6f0b65285af7f34443c29c7074736d1c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0e1f4c6b6f0b65285af7f34443c29c7074736d1c", "patch": "@@ -7323,7 +7323,8 @@ duplicated when threading jumps.\n \n @item max-fields-for-field-sensitive\n Maximum number of fields in a structure we will treat in\n-a field sensitive manner during pointer analysis.\n+a field sensitive manner during pointer analysis.  The default is zero\n+for -O0, and -O1 and 100 for -Os, -O2, and -O3.\n \n @item prefetch-latency\n Estimate on average number of instructions that are executed before"}, {"sha": "c26260acdd762d2efdd0f81f53147e10107a058d", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1f4c6b6f0b65285af7f34443c29c7074736d1c/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1f4c6b6f0b65285af7f34443c29c7074736d1c/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=0e1f4c6b6f0b65285af7f34443c29c7074736d1c", "patch": "@@ -903,6 +903,9 @@ decode_options (unsigned int argc, const char **argv)\n \n       /* Allow more virtual operators to increase alias precision.  */\n       set_param_value (\"max-aliased-vops\", 500);\n+\n+      /* Track fields in field-sensitive alias analysis.  */\n+      set_param_value (\"max-fields-for-field-sensitive\", 100);\n     }\n \n   if (optimize >= 3)"}, {"sha": "923bd133b58e3e2a3df6b8b646539ac8a9ee8166", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1f4c6b6f0b65285af7f34443c29c7074736d1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1f4c6b6f0b65285af7f34443c29c7074736d1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e1f4c6b6f0b65285af7f34443c29c7074736d1c", "patch": "@@ -1,3 +1,7 @@\n+2008-07-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/pta-callused.c: New testcase.\n+\n 2008-07-04  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* gcc.dg/callabi/callabi.h: New."}, {"sha": "44d095a1b98165171e9bca7f00e7991b26a02e81", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-callused.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1f4c6b6f0b65285af7f34443c29c7074736d1c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-callused.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1f4c6b6f0b65285af7f34443c29c7074736d1c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-callused.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-callused.c?ref=0e1f4c6b6f0b65285af7f34443c29c7074736d1c", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 --param max-fields-for-field-sensitive=2 -fdump-tree-alias\" } */\n+\n+struct Foo {\n+  int *p, *q;\n+};\n+\n+int foo (int ***x) __attribute__((pure));\n+\n+int bar (int b)\n+{\n+  int i;\n+  struct Foo f;\n+  int *p, **q;\n+  p = &i;\n+  f.p = &i;\n+  f.q = f.p;\n+  if (b)\n+    q = &f.p;\n+  else\n+    q = &f.q;\n+  return foo (&q);\n+}\n+\n+/* { dg-final { scan-tree-dump \"CALLUSED = { f f.q i q }\" \"alias\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias\" } } */\n+"}, {"sha": "0b68b84dce027b990abaa7c265816e43d0530fb6", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1f4c6b6f0b65285af7f34443c29c7074736d1c/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1f4c6b6f0b65285af7f34443c29c7074736d1c/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=0e1f4c6b6f0b65285af7f34443c29c7074736d1c", "patch": "@@ -262,6 +262,7 @@ struct variable_info\n typedef struct variable_info *varinfo_t;\n \n static varinfo_t first_vi_for_offset (varinfo_t, unsigned HOST_WIDE_INT);\n+static varinfo_t lookup_vi_for_tree (tree);\n \n /* Pool of variable info structures.  */\n static alloc_pool variable_info_pool;\n@@ -1406,6 +1407,47 @@ do_sd_constraint (constraint_graph_t graph, constraint_t c,\n       goto done;\n     }\n \n+  /* For x = *ESCAPED and x = *CALLUSED we want to compute the\n+     reachability set of the rhs var.  As a pointer to a sub-field\n+     of a variable can also reach all other fields of the variable\n+     we simply have to expand the solution to contain all sub-fields\n+     if one sub-field is contained.  */\n+  if (c->rhs.var == escaped_id\n+      || c->rhs.var == callused_id)\n+    {\n+      bitmap vars = NULL;\n+      /* In a first pass record all variables we need to add all\n+         sub-fields off.  This avoids quadratic behavior.  */\n+      EXECUTE_IF_SET_IN_BITMAP (delta, 0, j, bi)\n+\t{\n+\t  varinfo_t v = lookup_vi_for_tree (get_varinfo (j)->decl);\n+\t  if (v->next != NULL)\n+\t    {\n+\t      if (vars == NULL)\n+\t\tvars = BITMAP_ALLOC (NULL);\n+\t      bitmap_set_bit (vars, v->id);\n+\t    }\n+\t}\n+      /* In the second pass now do the addition to the solution and\n+         to speed up solving add it to the delta as well.  */\n+      if (vars != NULL)\n+\t{\n+\t  EXECUTE_IF_SET_IN_BITMAP (vars, 0, j, bi)\n+\t    {\n+\t      varinfo_t v = get_varinfo (j);\n+\t      for (; v != NULL; v = v->next)\n+\t\t{\n+\t\t  if (bitmap_set_bit (sol, v->id))\n+\t\t    {\n+\t\t      flag = true;\n+\t\t      bitmap_set_bit (delta, v->id);\n+\t\t    }\n+\t\t}\n+\t    }\n+\t  BITMAP_FREE (vars);\n+\t}\n+    }\n+\n   /* For each variable j in delta (Sol(y)), add\n      an edge in the graph from j to x, and union Sol(j) into Sol(x).  */\n   EXECUTE_IF_SET_IN_BITMAP (delta, 0, j, bi)"}]}