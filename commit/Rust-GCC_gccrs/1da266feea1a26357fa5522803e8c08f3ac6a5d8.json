{"sha": "1da266feea1a26357fa5522803e8c08f3ac6a5d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRhMjY2ZmVlYTFhMjYzNTdmYTU1MjI4MDNlOGMwOGYzYWM2YTVkOA==", "commit": {"author": {"name": "Gabor Loki", "email": "loki@gcc.gnu.org", "date": "2008-03-05T10:15:45Z"}, "committer": {"name": "Gabor Loki", "email": "loki@gcc.gnu.org", "date": "2008-03-05T10:15:45Z"}, "message": "re PR rtl-optimization/33009 (-frtl-abstract-sequences causes an infinite loop)\n\n2008-03-05  Gabor Loki  <loki@gcc.gnu.org>\n\n\tPR gcc/33009\n\t* rtl-factoring.c (clear_regs_live_in_seq): Fix backward steps.\n\t(split_block_and_df_analyze): New. Split basic block and rebuild\n\tdataflow.\n\t(block_label_after): Use SPLIT_BLOCK_AND_DF_ANALYZE instead of\n\tSPLIT_BLOCK.\n\t(split_pattern_seq): Likewise.\n\t(erase_matching_seqs): Likewise.\n\t(split_pattern_seq): Skip return insn in case of REG_NORETURN note.\n\n\tPR testsuite/33009\n\t* gcc.c-torture/compile/pr11832.c: Check -frtl-abstract-sequences.\n\t* gcc.c-torture/compile/pr33009.c: Likewise.\n\nFrom-SVN: r132893", "tree": {"sha": "b2a0902127232292cc6e3b703166fce6e81efdcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2a0902127232292cc6e3b703166fce6e81efdcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1da266feea1a26357fa5522803e8c08f3ac6a5d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da266feea1a26357fa5522803e8c08f3ac6a5d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1da266feea1a26357fa5522803e8c08f3ac6a5d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da266feea1a26357fa5522803e8c08f3ac6a5d8/comments", "author": null, "committer": null, "parents": [{"sha": "f0f00f130d6ab8f53d69d7c7fa1e9ad3ab87cfda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0f00f130d6ab8f53d69d7c7fa1e9ad3ab87cfda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0f00f130d6ab8f53d69d7c7fa1e9ad3ab87cfda"}], "stats": {"total": 114, "additions": 105, "deletions": 9}, "files": [{"sha": "22e5ce0e600f8d05f111c7782c85405213eec1fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da266feea1a26357fa5522803e8c08f3ac6a5d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da266feea1a26357fa5522803e8c08f3ac6a5d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1da266feea1a26357fa5522803e8c08f3ac6a5d8", "patch": "@@ -1,3 +1,15 @@\n+2008-03-05  Gabor Loki  <loki@gcc.gnu.org>\n+\n+\tPR gcc/33009\n+\t* rtl-factoring.c (clear_regs_live_in_seq): Fix backward steps.\n+\t(split_block_and_df_analyze): New. Split basic block and rebuild\n+\tdataflow.\n+\t(block_label_after): Use SPLIT_BLOCK_AND_DF_ANALYZE instead of\n+\tSPLIT_BLOCK.\n+\t(split_pattern_seq): Likewise.\n+\t(erase_matching_seqs): Likewise.\n+\t(split_pattern_seq): Skip return insn in case of REG_NORETURN note.\n+\n 2008-03-04  Geoff Keating  <geoffk@apple.com>\n \n \t* fold-const.c (tree_single_nonnegative_warnv_p): Fix mixed"}, {"sha": "20e9cf29097936666a92cffc52556d023f532ad3", "filename": "gcc/rtl-factoring.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da266feea1a26357fa5522803e8c08f3ac6a5d8/gcc%2Frtl-factoring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da266feea1a26357fa5522803e8c08f3ac6a5d8/gcc%2Frtl-factoring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-factoring.c?ref=1da266feea1a26357fa5522803e8c08f3ac6a5d8", "patch": "@@ -1,5 +1,5 @@\n /* RTL factoring (sequence abstraction).\n-   Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -551,8 +551,8 @@ clear_regs_live_in_seq (HARD_REG_SET * regs, rtx insn, int length)\n   df_simulate_artificial_refs_at_end (bb, &live);\n \n   /* Propagate until INSN if found.  */\n-  for (x = BB_END (bb); x != insn;)\n-    df_simulate_one_insn_backwards (bb, insn, &live);\n+  for (x = BB_END (bb); x != insn; x = PREV_INSN (x))\n+    df_simulate_one_insn_backwards (bb, x, &live);\n \n   /* Clear registers live after INSN.  */\n   renumbered_reg_set_to_hard_reg_set (&hlive, &live);\n@@ -562,7 +562,7 @@ clear_regs_live_in_seq (HARD_REG_SET * regs, rtx insn, int length)\n   for (i = 0; i < length;)\n     {\n       rtx prev = PREV_INSN (x);\n-      df_simulate_one_insn_backwards (bb, insn, &live);\n+      df_simulate_one_insn_backwards (bb, x, &live);\n \n       if (INSN_P (x))\n         {\n@@ -949,6 +949,17 @@ gen_symbol_ref_rtx_for_label (const_rtx label)\n   return sym;\n }\n \n+/* Splits basic block at the requested insn and rebuilds dataflow.  */\n+\n+static basic_block\n+split_block_and_df_analyze (basic_block bb, rtx insn)\n+{\n+  basic_block next;\n+  next = split_block (bb, insn)->dest;\n+  df_analyze ();\n+  return next;\n+}\n+\n /* Ensures that INSN is the last insn in its block and returns the block label\n    of the next block.  */\n \n@@ -959,7 +970,7 @@ block_label_after (rtx insn)\n   if ((insn == BB_END (bb)) && (bb->next_bb != EXIT_BLOCK_PTR))\n     return block_label (bb->next_bb);\n   else\n-    return block_label (split_block (bb, insn)->dest);\n+    return block_label (split_block_and_df_analyze (bb, insn));\n }\n \n /* Ensures that the last insns of the best pattern and its matching sequences\n@@ -1008,8 +1019,9 @@ split_pattern_seq (void)\n \n   /* Emit an indirect jump via the link register after the sequence acting\n      as the return insn.  Also emit a barrier and update the basic block.  */\n-  retjmp = emit_jump_insn_after (gen_indirect_jump (pattern_seqs->link_reg),\n-                                 BB_END (bb));\n+  if (!find_reg_note (BB_END (bb), REG_NORETURN, NULL))\n+    retjmp = emit_jump_insn_after (gen_indirect_jump (pattern_seqs->link_reg),\n+                                   BB_END (bb));\n   emit_barrier_after (BB_END (bb));\n \n   /* Replace all outgoing edges with a new one to the block of RETLABEL.  */\n@@ -1025,7 +1037,7 @@ split_pattern_seq (void)\n       for (; i < sb->length; i++)\n         insn = prev_insn_in_block (insn);\n \n-      sb->label = block_label (split_block (bb, insn)->dest);\n+      sb->label = block_label (split_block_and_df_analyze (bb, insn));\n     }\n \n   /* Emit an insn saving the return address to the link register before the\n@@ -1067,7 +1079,7 @@ erase_matching_seqs (void)\n           /* Delete the insns of the sequence.  */\n           for (i = 0; i < sb->length; i++)\n             insn = prev_insn_in_block (insn);\n-          delete_basic_block (split_block (bb, insn)->dest);\n+          delete_basic_block (split_block_and_df_analyze (bb, insn));\n \n           /* Emit an insn saving the return address to the link register\n              before the deleted sequence.  */"}, {"sha": "8341b280545289de35b3c54e35d805ea2dd93fb8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da266feea1a26357fa5522803e8c08f3ac6a5d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da266feea1a26357fa5522803e8c08f3ac6a5d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1da266feea1a26357fa5522803e8c08f3ac6a5d8", "patch": "@@ -1,3 +1,9 @@\n+2007-03-05  Gabor Loki  <loki@gcc.gnu.org>\n+\n+\tPR 33009\n+\t* gcc.c-torture/compile/pr11832.c: Check -frtl-abstract-sequences.\n+\t* gcc.c-torture/compile/pr33009.c: Likewise.\n+\n 2008-03-05  Victor Kaplansky  <victork@gcc.gnu.org>\n \n \tPR 31341"}, {"sha": "a4c3eece2b6e50edc59a2085b1b50754fd058f1d", "filename": "gcc/testsuite/gcc.c-torture/compile/pr11832.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da266feea1a26357fa5522803e8c08f3ac6a5d8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr11832.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da266feea1a26357fa5522803e8c08f3ac6a5d8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr11832.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr11832.c?ref=1da266feea1a26357fa5522803e8c08f3ac6a5d8", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-frtl-abstract-sequences\" } */\n+\n+int a, b, e;\n+unsigned char *c;\n+void foo()\n+{\n+  int d = 13;\n+  b = -1;   \n+  switch (e) {\n+    case 1:\n+      b++; c[b] = (unsigned char)d;\n+      break;\n+    case 2:\n+      b++; c[b] = (unsigned char)d;\n+      b++; c[b] = (unsigned char)d;\n+      break;\n+    case 3:\n+      b++; c[b] = (unsigned char)d;\n+      b++; c[b] = (unsigned char)d;\n+      b++; c[b] = (unsigned char)d;\n+      break;\n+    default:\n+      a = 1;\n+      b++; c[b] = (unsigned char)d;\n+      b++; c[b] = (unsigned char)d;\n+      b++; c[b] = (unsigned char)d;\n+      b++; c[b] = (unsigned char)d;\n+  }\n+}"}, {"sha": "781e1fe001e3513c05b740af755e46991726d4f9", "filename": "gcc/testsuite/gcc.c-torture/compile/pr33009.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1da266feea1a26357fa5522803e8c08f3ac6a5d8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr33009.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1da266feea1a26357fa5522803e8c08f3ac6a5d8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr33009.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr33009.c?ref=1da266feea1a26357fa5522803e8c08f3ac6a5d8", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-frtl-abstract-sequences\" } */\n+\n+char *progName;\n+int bar0 (char *, ...);\n+void bar1 (char *);\n+void exit (int);\n+\n+\n+#define SAME \\\n+ bar0 (\"%s: Bad flag `%s'\\n\", argv[i], argv[i] );\\\n+ bar1 ( progName ); \\\n+ exit ( 1 );\n+\n+\n+int foo ( int argc, char *argv[] )\n+{\n+    int i;\n+    for (i = 0; i < argc; i++) {\n+\tswitch (argv[i][0]) {\n+\tcase 'c':\n+\t    break;\n+\tdefault: \n+\t\n+\t    SAME\n+\t    \n+\t    break;\n+\t}\n+    }\n+    for (i = 0; i < argc; i++) {\n+    \n+\tSAME\n+\t\n+    }\n+    return 0;\n+}"}]}