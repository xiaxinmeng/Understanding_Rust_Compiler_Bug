{"sha": "57870f8acd9cb9d86c18104702e6752b9cb08171", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc4NzBmOGFjZDljYjlkODZjMTgxMDQ3MDJlNjc1MmI5Y2IwODE3MQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-11-10T04:40:58Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-11-10T04:40:58Z"}, "message": "config.gcc (i[34567]86-dg-dgux*): Don't set `out_file'.\n\n\t* config.gcc (i[34567]86-dg-dgux*): Don't set `out_file'.\n\n\t* i386/dgux.h (ASM_FILE_START): Set to the meaningful portions\n\tof dgux.c:output_file_start().\n\n\t* i386/dgux.c: Delete file.\n\nFrom-SVN: r46911", "tree": {"sha": "34e89f5b0be7cab89e0eb4960fbe52dcece2898d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34e89f5b0be7cab89e0eb4960fbe52dcece2898d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57870f8acd9cb9d86c18104702e6752b9cb08171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57870f8acd9cb9d86c18104702e6752b9cb08171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57870f8acd9cb9d86c18104702e6752b9cb08171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57870f8acd9cb9d86c18104702e6752b9cb08171/comments", "author": null, "committer": null, "parents": [{"sha": "62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1"}], "stats": {"total": 220, "additions": 17, "deletions": 203}, "files": [{"sha": "face7bda47b4b7d755d16626edaf2db75fd5c40c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57870f8acd9cb9d86c18104702e6752b9cb08171/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57870f8acd9cb9d86c18104702e6752b9cb08171/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57870f8acd9cb9d86c18104702e6752b9cb08171", "patch": "@@ -1,3 +1,12 @@\n+2001-11-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* config.gcc (i[34567]86-dg-dgux*): Don't set `out_file'.\n+\n+\t* i386/dgux.h (ASM_FILE_START): Set to the meaningful portions\n+\tof dgux.c:output_file_start().\n+\n+\t* i386/dgux.c: Delete file.\n+\n 2001-11-09  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (decl_in_text_section): New."}, {"sha": "d439ed9ecd932b0651d966a993cf46897bbeb368", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57870f8acd9cb9d86c18104702e6752b9cb08171/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57870f8acd9cb9d86c18104702e6752b9cb08171/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=57870f8acd9cb9d86c18104702e6752b9cb08171", "patch": "@@ -1443,7 +1443,6 @@ i[34567]86-*-interix*)\n \t;;\n i[34567]86-dg-dgux*)\n \txm_defines=POSIX\n-\tout_file=i386/dgux.c\n \ttm_file=\"${tm_file} i386/att.h elfos.h svr4.h i386/sysv4.h i386/dgux.h\"\n \ttmake_file=i386/t-dgux\n \txmake_file=i386/x-dgux"}, {"sha": "e9d2b51c3b7337e36bcbf3c25feebf330c065ce9", "filename": "gcc/config/i386/dgux.c", "status": "removed", "additions": 0, "deletions": 198, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1/gcc%2Fconfig%2Fi386%2Fdgux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1/gcc%2Fconfig%2Fi386%2Fdgux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.c?ref=62918bd31b3a5682e8b1bc330fc212f8f0f5b9d1", "patch": "@@ -1,198 +0,0 @@\n-/* Subroutines for GNU compiler for Intel 80x86 running DG/ux\n-   Copyright (C) 1993, 1995, 1997, 1999, 2000 Free Software Foundation, Inc.\n-   Currently maintained by (gcc@dg-rtp.dg.com)\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-#include <time.h>\n-#include \"i386/i386.c\"\n-\n-struct lang_independent_option\n-{\n-  char *string;\n-  int *variable;\n-  int on_value;\n-  char *description;\n-};\n-\n-static int\n-output_option (file, sep, type, name, indent, pos, max)\n-     FILE *file;\n-     char *sep;\n-     char *type;\n-     char *name;\n-     char *indent;\n-     int pos;\n-     int max;\n-{\n-  if (strlen (sep) + strlen (type) + strlen (name) + pos > max)\n-    {\n-      fprintf (file, indent);\n-      return fprintf (file, \"%s%s\", type, name);\n-    }\n-  return pos + fprintf (file, \"%s%s%s\", sep, type, name);\n-}\n-\n-static struct { \n-  char *name; \n-  int value; \n-  const char * description;\n-} m_options[] = TARGET_SWITCHES;\n-\n-static void\n-output_options (file, f_options, f_len, W_options, W_len,\n-\t\tpos, max, sep, indent, term)\n-     FILE *file;\n-     struct lang_independent_option *f_options;\n-     struct lang_independent_option *W_options;\n-     int f_len, W_len;\n-     int pos;\n-     int max;\n-     int sep;\n-     char *indent;\n-     char *term;\n-{\n-  register int j;\n-\n-  if (optimize)\n-    pos = output_option (file, sep, \"-O\", \"\", indent, pos, max);\n-  if (write_symbols != NO_DEBUG)\n-    pos = output_option (file, sep, \"-g\", \"\", indent, pos, max);\n-/*  if (flag_traditional)\n-    pos = output_option (file, sep, \"-traditional\", \"\", indent, pos, max);*/\n-  if (profile_flag)\n-    pos = output_option (file, sep, \"-p\", \"\", indent, pos, max);\n-  if (profile_block_flag)\n-    pos = output_option (file, sep, \"-a\", \"\", indent, pos, max);\n-\n-  for (j = 0; j < f_len; j++)\n-    if (*f_options[j].variable == f_options[j].on_value)\n-      pos = output_option (file, sep, \"-f\", f_options[j].string,\n-\t\t\t   indent, pos, max);\n-\n-  for (j = 0; j < W_len; j++)\n-    if (*W_options[j].variable == W_options[j].on_value)\n-      pos = output_option (file, sep, \"-W\", W_options[j].string,\n-\t\t\t   indent, pos, max);\n-\n-  for (j = 0; j < ARRAY_SIZE (m_options); j++)\n-    if (m_options[j].name[0] != '\\0'\n-\t&& m_options[j].value > 0\n-\t&& ((m_options[j].value & target_flags)\n-\t    == m_options[j].value))\n-      pos = output_option (file, sep, \"-m\", m_options[j].name,\n-\t\t\t   indent, pos, max);\n-\n-  if (ix86_cpu_string)\n-    pos = output_option (file, sep, \"-mcpu=\", ix86_cpu_string, \n-\t\t\t indent, pos, max);\n-  if (ix86_arch_string)\n-    pos = output_option (file, sep, \"-march=\", ix86_arch_string, \n-\t\t\t indent, pos, max);\n-  fprintf (file, term);\n-}\n-\n-/* Output to FILE the start of the assembler file.  */\n-\n-void\n-output_file_start (file, f_options, f_len, W_options, W_len)\n-     FILE *file;\n-     struct lang_independent_option *f_options;\n-     struct lang_independent_option *W_options;\n-     int f_len, W_len;\n-{\n-  register int pos;\n-\n-  output_file_directive (file, main_input_filename);\n-  fprintf (file, \"\\t.version\\t\\\"01.01\\\"\\n\");\t\t\t\\\n-  /* Switch to the data section so that the coffsem symbol\n-     isn't in the text section.  */\n-  data_section ();\n-\n-  pos = fprintf (file, \"\\n// cc1 (%s) arguments:\", VERSION_STRING);\n-  output_options (file, f_options, f_len, W_options, W_len,\n-\t\t  pos, 75, \" \", \"\\n// \", \"\\n\\n\");\n-\n-#ifdef TARGET_IDENTIFY_REVISION\n-  if (TARGET_IDENTIFY_REVISION)\n-    {\n-      char indent[256];\n-\n-      time_t now = time ((time_t *)0);\n-      sprintf (indent, \"]\\\"\\n%s\\\"@(#)%s [\", IDENT_ASM_OP, main_input_filename);\n-      fprintf (file, indent+3);\n-      pos = fprintf (file, \"gcc %s, %.24s,\", VERSION_STRING, ctime (&now));\n-      output_options (file, f_options, f_len, W_options, W_len,\n-\t\t      pos, 150 - strlen (indent), \" \", indent, \"]\\\"\\n\\n\");\n-    }\n-#endif /* TARGET_IDENTIFY_REVISION */\n-}\n-\n-#ifndef CROSS_COMPILE\n-#if defined (_abort_aux) \n-/* Debugging aid to be registered via `atexit'.  See the definition\n-   of abort in dgux.h.  */\n-void\n-abort_aux ()\n-{\n-  extern int insn_;\n-  extern char * file_;\n-  extern int line_;\n-  static int done;\n-  rtx line_note;\n-\n-  if (done++)\n-    return;\n-  if (file_ || line_)\n-    {\n-      if (write_symbols != NO_DEBUG)\n-\t{\n-\t  for (line_note = (rtx) insn_ ; line_note != 0 ; line_note = PREV_INSN (line_note))\n-\t    if (GET_CODE (line_note) == NOTE && NOTE_LINE_NUMBER (line_note) > 0)\n-\t      break;\n-\t  if (line_note != 0)\n-\t    {\n-\t      error_with_file_and_line (NOTE_SOURCE_FILE (line_note),\n-\t\t\t\t\tNOTE_LINE_NUMBER (line_note),\n-\t\t\t\t\t\"Internal gcc abort from %s:%d\",\n-\t\t\t\t\tfile_ ? file_ : \"<nofile>\", line_);\n-\t      if (insn_ && file_ && strcmp (file_, \"toplev.c\"))\n-\t\t{\n-\t\t  error_with_file_and_line (NOTE_SOURCE_FILE (line_note),\n-\t\t\t\t\t    NOTE_LINE_NUMBER (line_note),\n-\t\t\t\t\t    \"The local variable `insn' has the value:\", 0);\n-\t\t  debug_rtx ((rtx) insn_);\n-\t\t}\n-\t    }\n-\t}\n-      if (write_symbols == NO_DEBUG || line_note == 0)\n-\t{\n-\t  error (\"Internal gcc abort from %s:%d\",\n-\t\t file_ ? file_ : \"<nofile>\", line_);\n-\t  if (insn_ && file_ && strcmp (file_, \"toplev.c\"))\n-\t    {\n-\t      error (\"The local variable `insn' has the value:\", 0);\n-\t      debug_rtx ((rtx) insn_);\n-\t    }\n-\t}\n-    }\n-}\n-#endif\n-#endif\n-\n-"}, {"sha": "f1707c1a614bbb9bd5060670d8cdc2d290da8365", "filename": "gcc/config/i386/dgux.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57870f8acd9cb9d86c18104702e6752b9cb08171/gcc%2Fconfig%2Fi386%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57870f8acd9cb9d86c18104702e6752b9cb08171/gcc%2Fconfig%2Fi386%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdgux.h?ref=57870f8acd9cb9d86c18104702e6752b9cb08171", "patch": "@@ -25,7 +25,7 @@ Boston, MA 02111-1307, USA.  */\n */\n \n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.14 $\"\n+#define VERSION_INFO2   \"$Revision: 1.15 $\"\n #endif\n \n #ifndef VERSION_STRING\n@@ -81,11 +81,15 @@ Boston, MA 02111-1307, USA.  */\n #undef  PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF_DEBUG\n \n-/* Override svr[34].h.  */\n+/* Override svr[34].h.  Switch to the data section so that the coffsem\n+   symbol isn't in the text section.  */\n #undef\tASM_FILE_START\n #define ASM_FILE_START(FILE) \\\n-  output_file_start (FILE, f_options, ARRAY_SIZE (f_options), \\\n-\t\t     W_options, ARRAY_SIZE (W_options))\n+  do { \\\n+    output_file_directive (FILE, main_input_filename); \\\n+    fprintf (FILE, \"\\t.version\\t\\\"01.01\\\"\\n\"); \\\n+    data_section (); \\\n+  } while (0)\n \n /* ix86 abi specified type for wchar_t */\n "}]}