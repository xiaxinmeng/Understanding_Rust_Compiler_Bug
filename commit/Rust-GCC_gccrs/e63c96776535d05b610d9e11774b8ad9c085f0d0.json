{"sha": "e63c96776535d05b610d9e11774b8ad9c085f0d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYzYzk2Nzc2NTM1ZDA1YjYxMGQ5ZTExNzc0YjhhZDljMDg1ZjBkMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-10-31T11:16:17Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-10-31T11:16:17Z"}, "message": "Apply LOCAL_PATCHES and remove not used ones.\n\n2018-10-31  Martin Liska  <mliska@suse.cz>\n\n\t* LOCAL_PATCHES: Update patch list.\n\t* asan/asan_globals.cc (CheckODRViolationViaIndicator): Apply\n\tpatches from GCC's trunk.\n\t(CheckODRViolationViaPoisoning): Likewise.\n\t(RegisterGlobal): Likewise.\n\t* sanitizer_common/sanitizer_mac.cc (defined): Likewise.\n\t* sanitizer_common/sanitizer_stacktrace.cc (GetCanonicFrame): Likewise.\n\t* ubsan/ubsan_handlers.cc (__ubsan::__ubsan_handle_cfi_bad_icall): Likewise.\n\t(__ubsan::__ubsan_handle_cfi_bad_icall_abort): Likewise.\n\t* ubsan/ubsan_handlers.h (struct CFIBadIcallData): Likewise.\n\t(struct CFICheckFailData): Likewise.\n\t(RECOVERABLE): Likewise.\n\nFrom-SVN: r265667", "tree": {"sha": "e0e0b6cb5ea5fca5113df0eb6b2b54ca42c3c34f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0e0b6cb5ea5fca5113df0eb6b2b54ca42c3c34f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e63c96776535d05b610d9e11774b8ad9c085f0d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e63c96776535d05b610d9e11774b8ad9c085f0d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e63c96776535d05b610d9e11774b8ad9c085f0d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e63c96776535d05b610d9e11774b8ad9c085f0d0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8468f94425979ede4f7ae165b280748d99b2b981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8468f94425979ede4f7ae165b280748d99b2b981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8468f94425979ede4f7ae165b280748d99b2b981"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "ba0c30f06e47d99d358e36b2abc0a217e43b289d", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=e63c96776535d05b610d9e11774b8ad9c085f0d0", "patch": "@@ -1,3 +1,18 @@\n+2018-10-31  Martin Liska  <mliska@suse.cz>\n+\n+\t* LOCAL_PATCHES: Update patch list.\n+\t* asan/asan_globals.cc (CheckODRViolationViaIndicator): Apply\n+\tpatches from GCC's trunk.\n+\t(CheckODRViolationViaPoisoning): Likewise.\n+\t(RegisterGlobal): Likewise.\n+\t* sanitizer_common/sanitizer_mac.cc (defined): Likewise.\n+\t* sanitizer_common/sanitizer_stacktrace.cc (GetCanonicFrame): Likewise.\n+\t* ubsan/ubsan_handlers.cc (__ubsan::__ubsan_handle_cfi_bad_icall): Likewise.\n+\t(__ubsan::__ubsan_handle_cfi_bad_icall_abort): Likewise.\n+\t* ubsan/ubsan_handlers.h (struct CFIBadIcallData): Likewise.\n+\t(struct CFICheckFailData): Likewise.\n+\t(RECOVERABLE): Likewise.\n+\n 2018-10-31  Martin Liska  <mliska@suse.cz>\n \n \t* config.h.in: Regenerate."}, {"sha": "69544c33a8996d747612cf7996a4ee1cd888a8c9", "filename": "libsanitizer/LOCAL_PATCHES", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2FLOCAL_PATCHES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2FLOCAL_PATCHES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FLOCAL_PATCHES?ref=e63c96776535d05b610d9e11774b8ad9c085f0d0", "patch": "@@ -1,6 +1,4 @@\n-r241978\n r241980\n r241981\n r242478\n r242633\n-r243014"}, {"sha": "a59a2dc27a47be412fe91e04e013bf4a60b4018c", "filename": "libsanitizer/asan/asan_globals.cc", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2Fasan%2Fasan_globals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2Fasan%2Fasan_globals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_globals.cc?ref=e63c96776535d05b610d9e11774b8ad9c085f0d0", "patch": "@@ -147,23 +147,6 @@ static void CheckODRViolationViaIndicator(const Global *g) {\n   }\n }\n \n-// Check ODR violation for given global G by checking if it's already poisoned.\n-// We use this method in case compiler doesn't use private aliases for global\n-// variables.\n-static void CheckODRViolationViaPoisoning(const Global *g) {\n-  if (__asan_region_is_poisoned(g->beg, g->size_with_redzone)) {\n-    // This check may not be enough: if the first global is much larger\n-    // the entire redzone of the second global may be within the first global.\n-    for (ListOfGlobals *l = list_of_all_globals; l; l = l->next) {\n-      if (g->beg == l->g->beg &&\n-          (flags()->detect_odr_violation >= 2 || g->size != l->g->size) &&\n-          !IsODRViolationSuppressed(g->name))\n-        ReportODRViolation(g, FindRegistrationSite(g),\n-                           l->g, FindRegistrationSite(l->g));\n-    }\n-  }\n-}\n-\n // Clang provides two different ways for global variables protection:\n // it can poison the global itself or its private alias. In former\n // case we may poison same symbol multiple times, that can help us to\n@@ -211,8 +194,6 @@ static void RegisterGlobal(const Global *g) {\n     // where two globals with the same name are defined in different modules.\n     if (UseODRIndicator(g))\n       CheckODRViolationViaIndicator(g);\n-    else\n-      CheckODRViolationViaPoisoning(g);\n   }\n   if (CanPoisonMemory())\n     PoisonRedZones(*g);"}, {"sha": "28b2906e226b14599b1b15a428ba757b9c134566", "filename": "libsanitizer/sanitizer_common/sanitizer_mac.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cc?ref=e63c96776535d05b610d9e11774b8ad9c085f0d0", "patch": "@@ -35,7 +35,7 @@\n extern char **environ;\n #endif\n \n-#if defined(__has_include) && __has_include(<os/trace.h>)\n+#if defined(__has_include) && __has_include(<os/trace.h>) && defined(__BLOCKS__)\n #define SANITIZER_OS_TRACE 1\n #include <os/trace.h>\n #else"}, {"sha": "699fd9fdce07b670a903745fb6603e0867a0fc8c", "filename": "libsanitizer/sanitizer_common/sanitizer_stacktrace.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cc?ref=e63c96776535d05b610d9e11774b8ad9c085f0d0", "patch": "@@ -59,8 +59,8 @@ static inline uhwptr *GetCanonicFrame(uptr bp,\n   // Nope, this does not look right either. This means the frame after next does\n   // not have a valid frame pointer, but we can still extract the caller PC.\n   // Unfortunately, there is no way to decide between GCC and LLVM frame\n-  // layouts. Assume LLVM.\n-  return bp_prev;\n+  // layouts. Assume GCC.\n+  return bp_prev - 1;\n #else\n   return (uhwptr*)bp;\n #endif"}, {"sha": "f67b9e30fb9f2b7031dfc46b7c050fc032626edc", "filename": "libsanitizer/ubsan/ubsan_handlers.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2Fubsan%2Fubsan_handlers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2Fubsan%2Fubsan_handlers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.cc?ref=e63c96776535d05b610d9e11774b8ad9c085f0d0", "patch": "@@ -771,6 +771,21 @@ void __ubsan_handle_cfi_bad_type(CFICheckFailData *Data, ValueHandle Vtable,\n \n }  // namespace __ubsan\n \n+void __ubsan::__ubsan_handle_cfi_bad_icall(CFIBadIcallData *CallData,\n+                                           ValueHandle Function) {\n+  GET_REPORT_OPTIONS(false);\n+  CFICheckFailData Data = {CFITCK_ICall, CallData->Loc, CallData->Type};\n+  handleCFIBadIcall(&Data, Function, Opts);\n+}\n+\n+void __ubsan::__ubsan_handle_cfi_bad_icall_abort(CFIBadIcallData *CallData,\n+                                                 ValueHandle Function) {\n+  GET_REPORT_OPTIONS(true);\n+  CFICheckFailData Data = {CFITCK_ICall, CallData->Loc, CallData->Type};\n+  handleCFIBadIcall(&Data, Function, Opts);\n+  Die();\n+}\n+\n void __ubsan::__ubsan_handle_cfi_check_fail(CFICheckFailData *Data,\n                                             ValueHandle Value,\n                                             uptr ValidVtable) {"}, {"sha": "87e3c3439b60b044040b5f9a6a60178ecfef85a5", "filename": "libsanitizer/ubsan/ubsan_handlers.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2Fubsan%2Fubsan_handlers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e63c96776535d05b610d9e11774b8ad9c085f0d0/libsanitizer%2Fubsan%2Fubsan_handlers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.h?ref=e63c96776535d05b610d9e11774b8ad9c085f0d0", "patch": "@@ -202,12 +202,20 @@ enum CFITypeCheckKind : unsigned char {\n   CFITCK_VMFCall,\n };\n \n+struct CFIBadIcallData {\n+  SourceLocation Loc;\n+  const TypeDescriptor &Type;\n+};\n+\n struct CFICheckFailData {\n   CFITypeCheckKind CheckKind;\n   SourceLocation Loc;\n   const TypeDescriptor &Type;\n };\n \n+/// \\brief Handle control flow integrity failure for indirect function calls.\n+RECOVERABLE(cfi_bad_icall, CFIBadIcallData *Data, ValueHandle Function)\n+\n /// \\brief Handle control flow integrity failures.\n RECOVERABLE(cfi_check_fail, CFICheckFailData *Data, ValueHandle Function,\n             uptr VtableIsValid)"}]}