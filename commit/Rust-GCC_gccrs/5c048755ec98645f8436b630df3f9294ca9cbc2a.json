{"sha": "5c048755ec98645f8436b630df3f9294ca9cbc2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMwNDg3NTVlYzk4NjQ1Zjg0MzZiNjMwZGYzZjkyOTRjYTljYmMyYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-03-10T23:03:37Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-03-13T23:04:56Z"}, "message": "analyzer: handle NOP_EXPR in get_lvalue [PR94099,PR94105]\n\nPR analyzer/94099 and PR analyzer/94105 both report ICEs relating to\ncalling region_model::get_lvalue on a NOP_EXPR.\n\nPR analyzer/94099's ICE happens when generating a checker_path when\nencountering an unhandled tree code (NOP_EXPR) in get_lvalue with a\nNULL context (from for_each_state_change).\n\nPR analyzer/94105 ICE happens when handling an ARRAY_REF where the\nfirst operand is a NOP_EXPR: the unhandled tree code gives us\na symbolic_region, but the case for ARRAY_REF assumes we have an\narray_region.\n\nThis patch fixes the ICEs by handling NOP_EXPR within\nregion_model::get_lvalue, and bulletproofs both of the above sources\nof failure.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/94099\n\tPR analyzer/94105\n\t* diagnostic-manager.cc (for_each_state_change): Bulletproof\n\tagainst errors in get_rvalue by passing a\n\ttentative_region_model_context and rejecting if there's an error.\n\t* region-model.cc (region_model::get_lvalue_1): When handling\n\tARRAY_REF, handle results of error-handling.  Handle NOP_EXPR.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/94099\n\tPR analyzer/94105\n\t* gcc.dg/analyzer/pr94099.c: New test.\n\t* gcc.dg/analyzer/pr94105.c: New test.", "tree": {"sha": "6e35062f9015c2bff321865d694370830ffbbda9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e35062f9015c2bff321865d694370830ffbbda9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c048755ec98645f8436b630df3f9294ca9cbc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c048755ec98645f8436b630df3f9294ca9cbc2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c048755ec98645f8436b630df3f9294ca9cbc2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c048755ec98645f8436b630df3f9294ca9cbc2a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b74dd0a2278365eb562d9d1999c3c11cddb733c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b74dd0a2278365eb562d9d1999c3c11cddb733c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b74dd0a2278365eb562d9d1999c3c11cddb733c"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "8fc5dc4448f49c4ed38a7a96ee3c859922526edf", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c048755ec98645f8436b630df3f9294ca9cbc2a/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c048755ec98645f8436b630df3f9294ca9cbc2a/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=5c048755ec98645f8436b630df3f9294ca9cbc2a", "patch": "@@ -1,3 +1,13 @@\n+2020-03-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94099\n+\tPR analyzer/94105\n+\t* diagnostic-manager.cc (for_each_state_change): Bulletproof\n+\tagainst errors in get_rvalue by passing a\n+\ttentative_region_model_context and rejecting if there's an error.\n+\t* region-model.cc (region_model::get_lvalue_1): When handling\n+\tARRAY_REF, handle results of error-handling.  Handle NOP_EXPR.\n+\n 2020-03-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer.h (class array_region): New forward decl."}, {"sha": "bea566da9fce32ce1b4410f217e29565c88d9ead", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c048755ec98645f8436b630df3f9294ca9cbc2a/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c048755ec98645f8436b630df3f9294ca9cbc2a/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=5c048755ec98645f8436b630df3f9294ca9cbc2a", "patch": "@@ -768,9 +768,10 @@ for_each_state_change (const program_state &src_state,\n \t      if (dst_pv->m_stack_depth\n \t\t  >= src_state.m_region_model->get_stack_depth ())\n \t\tcontinue;\n+\t      tentative_region_model_context ctxt;\n \t      svalue_id src_sid\n-\t\t= src_state.m_region_model->get_rvalue (*dst_pv, NULL);\n-\t      if (src_sid.null_p ())\n+\t\t= src_state.m_region_model->get_rvalue (*dst_pv, &ctxt);\n+\t      if (src_sid.null_p () || ctxt.had_errors_p ())\n \t\tcontinue;\n \t      state_machine::state_t src_sm_val = src_smap.get_state (src_sid);\n \t      if (dst_sm_val != src_sm_val)"}, {"sha": "45a190299ea12cc1706de159cd1a15e7d1bc0fce", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c048755ec98645f8436b630df3f9294ca9cbc2a/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c048755ec98645f8436b630df3f9294ca9cbc2a/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=5c048755ec98645f8436b630df3f9294ca9cbc2a", "patch": "@@ -4749,7 +4749,18 @@ region_model::get_lvalue_1 (path_var pv, region_model_context *ctxt)\n \n \tregion_id array_rid = get_lvalue (array, ctxt);\n \tsvalue_id index_sid = get_rvalue (index, ctxt);\n-\tarray_region *array_reg = get_region<array_region> (array_rid);\n+\tregion *base_array_reg = get_region (array_rid);\n+\tarray_region *array_reg  = base_array_reg->dyn_cast_array_region ();\n+\tif (!array_reg)\n+\t  {\n+\t    /* Normally, array_rid ought to refer to an array_region, since\n+\t       array's type will be ARRAY_TYPE.  However, if we have an\n+\t       unexpected tree code for array, we could have a\n+\t       symbolic_region here.  If so, we're in error-handling. */\n+\t    gcc_assert (base_array_reg->get_type () == NULL_TREE);\n+\t    return make_region_for_unexpected_tree_code (ctxt, expr,\n+\t\t\t\t\t\t\t dump_location_t ());\n+\t  }\n \treturn array_reg->get_element (this, array_rid, index_sid, ctxt);\n       }\n       break;\n@@ -4849,6 +4860,7 @@ region_model::get_lvalue_1 (path_var pv, region_model_context *ctxt)\n       }\n       break;\n \n+    case NOP_EXPR:\n     case VIEW_CONVERT_EXPR:\n       {\n \ttree obj = TREE_OPERAND (expr, 0);"}, {"sha": "75d6041ba90642e84c8ef4da0ecf2065c39e882b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c048755ec98645f8436b630df3f9294ca9cbc2a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c048755ec98645f8436b630df3f9294ca9cbc2a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c048755ec98645f8436b630df3f9294ca9cbc2a", "patch": "@@ -1,3 +1,10 @@\n+2020-03-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94099\n+\tPR analyzer/94105\n+\t* gcc.dg/analyzer/pr94099.c: New test.\n+\t* gcc.dg/analyzer/pr94105.c: New test.\n+\n 2020-03-13  Vasee Vinayagamoorthy  <vaseeharan.vinayagamoorthy@arm.com>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/bfcvt-nosimd.c: Fix DejaGnu"}, {"sha": "0a34f56182174a78d6254ac4df555f45dac7405e", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94099.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c048755ec98645f8436b630df3f9294ca9cbc2a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94099.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c048755ec98645f8436b630df3f9294ca9cbc2a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94099.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94099.c?ref=5c048755ec98645f8436b630df3f9294ca9cbc2a", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-additional-options \"-O1\" } */\n+\n+struct cg {\n+  int hk;\n+  int *bg;\n+};\n+\n+union vb {\n+  struct cg gk;\n+};\n+\n+void\n+l3 (union vb *);\n+\n+void\n+pl (void)\n+{\n+  union vb th = { 0, };\n+  int sc;\n+\n+  for (sc = 0; sc < 1; ++sc)\n+    {\n+      th.gk.hk = 0;\n+      th.gk.bg[sc] = 0; /* { dg-warning \"uninitialized\" } */\n+      l3 (&th);\n+    }\n+}"}, {"sha": "8220723bf6cd5ed35cd92abb8a169a1efb4af6c4", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94105.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c048755ec98645f8436b630df3f9294ca9cbc2a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94105.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c048755ec98645f8436b630df3f9294ca9cbc2a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94105.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94105.c?ref=5c048755ec98645f8436b630df3f9294ca9cbc2a", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-do compile } */\n+\n+#include \"../../c-c++-common/torture/pr58794-1.c\""}]}