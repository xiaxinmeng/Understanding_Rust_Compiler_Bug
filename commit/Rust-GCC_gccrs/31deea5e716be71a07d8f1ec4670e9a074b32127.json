{"sha": "31deea5e716be71a07d8f1ec4670e9a074b32127", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFkZWVhNWU3MTZiZTcxYTA3ZDhmMWVjNDY3MGU5YTA3NGIzMjEyNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-02-11T16:11:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-02-11T16:11:57Z"}, "message": "re PR tree-optimization/79224 (Large C-Ray slowdown)\n\n\n\tPR ipa/79224\n\t* ipa-inline-analysis.c (get_minimal_bb): New function.\n\t(record_modified): Use it.\n\t(remap_edge_change_prob): Handle also ancestor functions.\n\nFrom-SVN: r245357", "tree": {"sha": "e6a7756caa5c6eea66f27278605a6eb45ff0a73d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6a7756caa5c6eea66f27278605a6eb45ff0a73d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31deea5e716be71a07d8f1ec4670e9a074b32127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31deea5e716be71a07d8f1ec4670e9a074b32127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31deea5e716be71a07d8f1ec4670e9a074b32127", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31deea5e716be71a07d8f1ec4670e9a074b32127/comments", "author": null, "committer": null, "parents": [{"sha": "56a9ca70382a7077d864a65e018616a7f409359c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a9ca70382a7077d864a65e018616a7f409359c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a9ca70382a7077d864a65e018616a7f409359c"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "424fb4f6f299b09f977b796777ca48b4de47869b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31deea5e716be71a07d8f1ec4670e9a074b32127/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31deea5e716be71a07d8f1ec4670e9a074b32127/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31deea5e716be71a07d8f1ec4670e9a074b32127", "patch": "@@ -1,3 +1,10 @@\n+2017-02-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/79224\n+\t* ipa-inline-analysis.c (get_minimal_bb): New function.\n+\t(record_modified): Use it.\n+\t(remap_edge_change_prob): Handle also ancestor functions.\n+\n 2017-02-11  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/contrib.texi (Contributors): Remove broken link into"}, {"sha": "611faab570f67b83e88f890a9cdb7ec311a0726f", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31deea5e716be71a07d8f1ec4670e9a074b32127/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31deea5e716be71a07d8f1ec4670e9a074b32127/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=31deea5e716be71a07d8f1ec4670e9a074b32127", "patch": "@@ -2151,6 +2151,23 @@ struct record_modified_bb_info\n   gimple *stmt;\n };\n \n+/* Value is initialized in INIT_BB and used in USE_BB.  We want to copute\n+   probability how often it changes between USE_BB.\n+   INIT_BB->frequency/USE_BB->frequency is an estimate, but if INIT_BB\n+   is in different loop nest, we can do better.\n+   This is all just estimate.  In theory we look for minimal cut separating\n+   INIT_BB and USE_BB, but we only want to anticipate loop invariant motion\n+   anyway.  */\n+\n+static basic_block\n+get_minimal_bb (basic_block init_bb, basic_block use_bb)\n+{\n+  struct loop *l = find_common_loop (init_bb->loop_father, use_bb->loop_father);\n+  if (l && l->header->frequency < init_bb->frequency)\n+    return l->header;\n+  return init_bb;\n+}\n+\n /* Callback of walk_aliased_vdefs.  Records basic blocks where the value may be\n    set except for info->stmt.  */\n \n@@ -2164,7 +2181,9 @@ record_modified (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef, void *data)\n   bitmap_set_bit (info->bb_set,\n \t\t  SSA_NAME_IS_DEFAULT_DEF (vdef)\n \t\t  ? ENTRY_BLOCK_PTR_FOR_FN (cfun)->index\n-\t\t  : gimple_bb (SSA_NAME_DEF_STMT (vdef))->index);\n+\t\t  : get_minimal_bb\n+\t\t\t (gimple_bb (SSA_NAME_DEF_STMT (vdef)),\n+\t\t\t  gimple_bb (info->stmt))->index);\n   return false;\n }\n \n@@ -2206,7 +2225,9 @@ param_change_prob (gimple *stmt, int i)\n       if (SSA_NAME_IS_DEFAULT_DEF (base))\n \tinit_freq = ENTRY_BLOCK_PTR_FOR_FN (cfun)->frequency;\n       else\n-\tinit_freq = gimple_bb (SSA_NAME_DEF_STMT (base))->frequency;\n+\tinit_freq = get_minimal_bb\n+\t\t      (gimple_bb (SSA_NAME_DEF_STMT (base)),\n+\t\t       gimple_bb (stmt))->frequency;\n \n       if (!init_freq)\n \tinit_freq = 1;\n@@ -3521,18 +3542,22 @@ remap_edge_change_prob (struct cgraph_edge *inlined_edge,\n \t{\n \t  struct ipa_jump_func *jfunc = ipa_get_ith_jump_func (args, i);\n \t  if (jfunc->type == IPA_JF_PASS_THROUGH\n-\t      && (ipa_get_jf_pass_through_formal_id (jfunc)\n-\t\t  < (int) inlined_es->param.length ()))\n+\t      || jfunc->type == IPA_JF_ANCESTOR)\n \t    {\n-\t      int jf_formal_id = ipa_get_jf_pass_through_formal_id (jfunc);\n-\t      int prob1 = es->param[i].change_prob;\n-\t      int prob2 = inlined_es->param[jf_formal_id].change_prob;\n-\t      int prob = combine_probabilities (prob1, prob2);\n+\t      int id = jfunc->type == IPA_JF_PASS_THROUGH\n+\t\t       ? ipa_get_jf_pass_through_formal_id (jfunc)\n+\t\t       : ipa_get_jf_ancestor_formal_id (jfunc);\n+\t      if (id < (int) inlined_es->param.length ())\n+\t\t{\n+\t\t  int prob1 = es->param[i].change_prob;\n+\t\t  int prob2 = inlined_es->param[id].change_prob;\n+\t\t  int prob = combine_probabilities (prob1, prob2);\n \n-\t      if (prob1 && prob2 && !prob)\n-\t\tprob = 1;\n+\t\t  if (prob1 && prob2 && !prob)\n+\t\t    prob = 1;\n \n-\t      es->param[i].change_prob = prob;\n+\t\t  es->param[i].change_prob = prob;\n+\t\t}\n \t    }\n \t}\n     }"}]}