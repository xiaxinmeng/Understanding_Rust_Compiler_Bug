{"sha": "5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQxYjJhMWU0MjFlNzcwYWJhMDU2ZTZiMTQwNWVkMGViMjlkMjllYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-10-14T23:03:26Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-10-14T23:03:26Z"}, "message": "mt_allocator.h (__mt_alloc::deallocate): Check for null pointer.\n\n\n2004-10-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/mt_allocator.h (__mt_alloc::deallocate): Check for\n\tnull pointer.\n\t* include/ext/pool_allocator.h (debug_allocator::deallocate):\n\tCheck pointer value.\n\t* include/ext/debug_allocator.h (debug_allocator::deallocate):\n\tThrow exceptions, don't abort.\n\t* include/ext/array_allocator.h\n\t(array_allocator_base::deallocate): Remove unused parameters.\n\t* testsuite/testsuite_allocator.h (check_deallocate_null): New.\n\t* testsuite/ext/mt_allocator/check_deallocate_null.cc: New.\n\t* testsuite/ext/mt_allocator/check_deallocate_null_thread.cc: New.\n\t* testsuite/ext/array_allocator/check_deallocate_null.cc: New.\n\t* testsuite/ext/debug_allocator/check_deallocate_null.cc: New.\n\t* testsuite/ext/malloc_allocator/check_deallocate_null.cc: New.\n\t* testsuite/ext/new_allocator/check_deallocate_null.cc: New.\n\t* testsuite/ext/pool_allocator/check_deallocate_null.cc: New.\n\n\t* testsuite/testsuite_allocator.h (check_new): Add instance argument.\n\t* testsuite/ext/array_allocator/check_new.cc: New.\n\nFrom-SVN: r89060", "tree": {"sha": "76f340573e6c3e486eb792b698ac5d5058a12c6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76f340573e6c3e486eb792b698ac5d5058a12c6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/comments", "author": null, "committer": null, "parents": [{"sha": "c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece"}], "stats": {"total": 405, "additions": 373, "deletions": 32}, "files": [{"sha": "d5bdab551b0603b181a472374305b02d990471b8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -1,3 +1,25 @@\n+2004-10-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/mt_allocator.h (__mt_alloc::deallocate): Check for\n+\tnull pointer.\n+\t* include/ext/pool_allocator.h (debug_allocator::deallocate):\n+\tCheck pointer value.\n+\t* include/ext/debug_allocator.h (debug_allocator::deallocate):\n+\tThrow exceptions, don't abort.\n+\t* include/ext/array_allocator.h\n+\t(array_allocator_base::deallocate): Remove unused parameters.\n+\t* testsuite/testsuite_allocator.h (check_deallocate_null): New.\n+\t* testsuite/ext/mt_allocator/check_deallocate_null.cc: New.\n+\t* testsuite/ext/mt_allocator/check_deallocate_null_thread.cc: New.\n+\t* testsuite/ext/array_allocator/check_deallocate_null.cc: New.\n+\t* testsuite/ext/debug_allocator/check_deallocate_null.cc: New.\n+\t* testsuite/ext/malloc_allocator/check_deallocate_null.cc: New.\n+\t* testsuite/ext/new_allocator/check_deallocate_null.cc: New.\n+\t* testsuite/ext/pool_allocator/check_deallocate_null.cc: New.\n+\n+\t* testsuite/testsuite_allocator.h (check_new): Add instance argument.\n+\t* testsuite/ext/array_allocator/check_new.cc: New.\n+\t\n 2004-10-14  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/bitmap_allocator.h (bitmap_allocator::_Alloc_block):"}, {"sha": "585570a5722bd2e8f72eaa5429f5a510c04681d4", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -55,7 +55,7 @@ namespace __gnu_cxx\n       address(const_reference __x) const { return &__x; }\n \n       void\n-      deallocate(pointer __p, size_type)\n+      deallocate(pointer, size_type)\n       { \n \t// Does nothing.\n       }"}, {"sha": "7fff5d389d88be6d1735260dbb1c18c41a126eda", "filename": "libstdc++-v3/include/ext/debug_allocator.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fdebug_allocator.h?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -48,7 +48,7 @@\n #ifndef _DEBUG_ALLOCATOR_H\n #define _DEBUG_ALLOCATOR_H 1\n \n-#include <cstdlib>\n+#include <stdexcept>\n \n namespace __gnu_cxx\n {\n@@ -108,12 +108,18 @@ namespace __gnu_cxx\n       void\n       deallocate(pointer __p, size_type __n)\n       {\n-\tif (!__p)\n-\t  abort();\n-\tpointer __real_p = __p - _M_extra;\n-        if (*reinterpret_cast<size_type*>(__real_p) != __n)\n-          abort();\n-        _M_allocator.deallocate(__real_p, __n + _M_extra);\n+\tif (__p)\n+\t  {\n+\t    pointer __real_p = __p - _M_extra;\n+\t    if (*reinterpret_cast<size_type*>(__real_p) != __n)\n+\t      {\n+\t\tthrow std::runtime_error(\"debug_allocator::deallocate\"\n+\t\t\t\t\t \" wrong size\");\n+\t      }\n+\t    _M_allocator.deallocate(__real_p, __n + _M_extra);\n+\t  }\n+\telse\n+\t  throw std::runtime_error(\"debug_allocator::deallocate null pointer\");\n       }\n     };\n } // namespace __gnu_cxx"}, {"sha": "d4d51d8a55ecd9c1751802a1142f379ce59c0696", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -724,14 +724,17 @@ namespace __gnu_cxx\n     __mt_alloc<_Tp, _Poolp>::\n     deallocate(pointer __p, size_type __n)\n     {\n-      // Requests larger than _M_max_bytes are handled by operators\n-      // new/delete directly.\n-      __pool_type& __pool = this->_S_get_pool();\n-      const size_t __bytes = __n * sizeof(_Tp);\n-      if (__pool._M_check_threshold(__bytes))\n-\t::operator delete(__p);\n-      else\n-\t__pool._M_reclaim_block(reinterpret_cast<char*>(__p), __bytes);\n+      if (__builtin_expect(__p != 0, true))\n+\t{\n+\t  // Requests larger than _M_max_bytes are handled by\n+\t  // operators new/delete directly.\n+\t  __pool_type& __pool = this->_S_get_pool();\n+\t  const size_t __bytes = __n * sizeof(_Tp);\n+\t  if (__pool._M_check_threshold(__bytes))\n+\t    ::operator delete(__p);\n+\t  else\n+\t    __pool._M_reclaim_block(reinterpret_cast<char*>(__p), __bytes);\n+\t}\n     }\n   \n   template<typename _Tp, typename _Poolp>"}, {"sha": "0b95906ccfd1b93a4bc78d2d21ca5735b5b81b1d", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -234,7 +234,7 @@ namespace __gnu_cxx\n     void\n     __pool_alloc<_Tp>::deallocate(pointer __p, size_type __n)\n     {\n-      if (__n)\n+      if (__n && (__p != 0))\n \t{\n \t  const size_t __bytes = __n * sizeof(_Tp);\n \t  if (__bytes > static_cast<size_t>(_S_max_bytes) || _S_force_new == 1)"}, {"sha": "9d743a19178cff878987b7649662994f1570376e", "filename": "libstdc++-v3/testsuite/ext/array_allocator/check_deallocate_null.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_deallocate_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_deallocate_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_deallocate_null.cc?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -0,0 +1,32 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/array_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef __gnu_cxx::array_allocator<value_type> allocator_type;\n+  __gnu_test::check_deallocate_null<allocator_type>(); \n+  return 0;\n+}\n+"}, {"sha": "2d15972f6a7900669620dabae8758eef88024ca5", "filename": "libstdc++-v3/testsuite/ext/array_allocator/check_new.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_new.cc?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -0,0 +1,59 @@\n+// 2001-11-25  Phil Edwards  <pme@gcc.gnu.org>\n+//\n+// Copyright (C) 2001, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <cstdlib>\n+#include <ext/array_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+using __gnu_cxx::array_allocator;\n+\n+void* \n+operator new(std::size_t n) throw(std::bad_alloc)\n+{\n+  new_called = true;\n+  requested = n;\n+  return std::malloc(n);\n+}\n+\n+void\n+operator delete(void *v) throw()\n+{\n+  delete_called = true;\n+  return std::free(v);\n+}\n+\n+// These just help tracking down error messages.\n+bool test01() \n+{ \n+  typedef unsigned int value_type;\n+  typedef std::tr1::array<value_type, 15> array_type;\n+  typedef array_allocator<value_type, array_type> allocator_type;\n+  array_type store;\n+  allocator_type a(&store);\n+  return (__gnu_test::check_new<allocator_type, false>(a) == false); \n+}\n+\n+int main()\n+{\n+  return test01();\n+}\n+"}, {"sha": "dd9d28114d510a2f5abc7921875fd794c6288714", "filename": "libstdc++-v3/testsuite/ext/debug_allocator/check_deallocate_null.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_deallocate_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_deallocate_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fdebug_allocator%2Fcheck_deallocate_null.cc?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -0,0 +1,48 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <memory>\n+#include <ext/debug_allocator.h>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef std::allocator<value_type> debug_type;\n+  typedef __gnu_cxx::debug_allocator<debug_type> allocator_type;\n+\n+  try\n+    {\n+      __gnu_test::check_deallocate_null<allocator_type>(); \n+    }\n+  catch (std::runtime_error& obj)\n+    {\n+      // Ok.\n+    }\n+  catch (...)\n+    { \n+      // Shouldn't get here.\n+      throw;\n+    }\n+  return 0;\n+}\n+"}, {"sha": "bdea99b5ad7c788cca6a1a6053e214157ea14b13", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/check_deallocate_null.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_deallocate_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_deallocate_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_deallocate_null.cc?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -0,0 +1,32 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/malloc_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef __gnu_cxx::malloc_allocator<value_type> allocator_type;\n+  __gnu_test::check_deallocate_null<allocator_type>(); \n+  return 0;\n+}\n+"}, {"sha": "d9cdb0f7b52744ab724d4127f5f51c7450803e10", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/check_deallocate_null.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_deallocate_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_deallocate_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_deallocate_null.cc?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -0,0 +1,33 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/mt_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef __gnu_cxx::__common_pool_policy<false> policy_type;\n+  typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n+  __gnu_test::check_deallocate_null<allocator_type>(); \n+  return 0;\n+}\n+"}, {"sha": "28aed3b3ea0fd21f52fde91d2f0f4293c97c2c91", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/check_deallocate_null_thread.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_deallocate_null_thread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_deallocate_null_thread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_deallocate_null_thread.cc?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -0,0 +1,33 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/mt_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef __gnu_cxx::__common_pool_policy<true> policy_type;\n+  typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n+  __gnu_test::check_deallocate_null<allocator_type>(); \n+  return 0;\n+}\n+"}, {"sha": "34ed42c147bd8603397531324ac022c615ae909d", "filename": "libstdc++-v3/testsuite/ext/new_allocator/check_deallocate_null.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_deallocate_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_deallocate_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_deallocate_null.cc?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -0,0 +1,32 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/new_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef __gnu_cxx::new_allocator<value_type> allocator_type;\n+  __gnu_test::check_deallocate_null<allocator_type>(); \n+  return 0;\n+}\n+"}, {"sha": "4b4999eb6e0469bdfed2d444dc96e365d6b8d5c7", "filename": "libstdc++-v3/testsuite/ext/pool_allocator/check_deallocate_null.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_deallocate_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_deallocate_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_deallocate_null.cc?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -0,0 +1,32 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/pool_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef __gnu_cxx::__pool_alloc<value_type> allocator_type;\n+  __gnu_test::check_deallocate_null<allocator_type>(); \n+  return 0;\n+}\n+"}, {"sha": "ecb210e1fde87b70d3cac307168c1653cb446cd2", "filename": "libstdc++-v3/testsuite/testsuite_allocator.h", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h?ref=5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Testing allocator for the C++ library testsuite.\n //\n-// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -181,20 +181,29 @@ namespace __gnu_test\n   check_construct_destroy(const char* tag, int expected_c, int expected_d);\n \n   template<typename Alloc, bool uses_global_new_and_delete>\n-  bool check_new()\n-  {\n-    bool test __attribute__((unused)) = true;\n-    Alloc  a;\n-    typename Alloc::pointer p = a.allocate(10);\n-    if (uses_global_new_and_delete)  \n-      test &= ( requested >= (10 * 15 * sizeof(long)) );\n-\n-    test &= ( new_called == uses_global_new_and_delete );\n-    a.deallocate(p, 10);\n-    test &= ( delete_called == uses_global_new_and_delete );\n-  \n-    return test;\n-  }\n+    bool \n+    check_new(Alloc a = Alloc())\n+    {\n+      bool test __attribute__((unused)) = true;\n+      typename Alloc::pointer p = a.allocate(10);\n+      if (uses_global_new_and_delete)  \n+\ttest &= ( requested >= (10 * 15 * sizeof(long)) );\n+      \n+      test &= ( new_called == uses_global_new_and_delete );\n+      a.deallocate(p, 10);\n+      test &= ( delete_called == uses_global_new_and_delete );\n+      \n+      return test;\n+    }\n+\n+  template<typename Alloc>\n+    bool \n+    check_deallocate_null()\n+    {\n+      // Let's not core here...\n+      Alloc  a;\n+      a.deallocate(NULL, 10);\n+    }\n }; // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_ALLOCATOR_H"}]}