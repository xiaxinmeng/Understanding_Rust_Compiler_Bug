{"sha": "2accfbc7bb3d360ff9985aa71b506514689419c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFjY2ZiYzdiYjNkMzYwZmY5OTg1YWE3MWI1MDY1MTQ2ODk0MTljNQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-03T16:31:01Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-03T16:31:01Z"}, "message": "h8300.h (h8300_funcvec_function_p): Declaration moved here.\n\n        * h8300.h (h8300_funcvec_function_p): Declaration moved here.\n        * h8300.c (h8300_funcvec_function_p): Declaration removed\n        from here.\n        * h8300.md (tstqi): Tweak to work like other tstXX patterns.\n        (cmphi): Turn into a define_expand.  Add two anonymous\n        matterns to match the output of the cmphi expander.\n        (cmpsi): Accept constants as the second input operand.\n\nFrom-SVN: r11656", "tree": {"sha": "78d0868508f901e9058883c7a67a4cbb0b1c2fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78d0868508f901e9058883c7a67a4cbb0b1c2fbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2accfbc7bb3d360ff9985aa71b506514689419c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2accfbc7bb3d360ff9985aa71b506514689419c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2accfbc7bb3d360ff9985aa71b506514689419c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2accfbc7bb3d360ff9985aa71b506514689419c5/comments", "author": null, "committer": null, "parents": [{"sha": "20c359e43d339d93b77b85e91d2de714b6cd8dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20c359e43d339d93b77b85e91d2de714b6cd8dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20c359e43d339d93b77b85e91d2de714b6cd8dab"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "25ccff59c738e2f66c9a1856c85852f46eaf89cb", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2accfbc7bb3d360ff9985aa71b506514689419c5/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2accfbc7bb3d360ff9985aa71b506514689419c5/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=2accfbc7bb3d360ff9985aa71b506514689419c5", "patch": "@@ -41,7 +41,6 @@ void print_operand_address ();\n char *index ();\n \n static int h8300_interrupt_function_p PROTO ((tree));\n-static int h8300_funcvec_function_p PROTO ((tree));\n \n /* CPU_TYPE, says what cpu we're compiling for.  */\n int cpu_type;"}, {"sha": "f2bee2c1dd95ffe3f60f6e1f9b152c2f13ac19e8", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2accfbc7bb3d360ff9985aa71b506514689419c5/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2accfbc7bb3d360ff9985aa71b506514689419c5/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=2accfbc7bb3d360ff9985aa71b506514689419c5", "patch": "@@ -1334,5 +1334,4 @@ do { char dstr[30];\t\t\t\t\t\\\n \n /* Declarations for functions used in insn-output.c.  */\n char *emit_a_shift ();\n-\n-\n+int h8300_funcvec_function_p ();"}, {"sha": "4555fcb9bcd02377b053dc0d833a458f9d38bd73", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2accfbc7bb3d360ff9985aa71b506514689419c5/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2accfbc7bb3d360ff9985aa71b506514689419c5/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=2accfbc7bb3d360ff9985aa71b506514689419c5", "patch": "@@ -35,6 +35,12 @@\n ;; Some move patterns have conditions which check that one operand\n ;; is a register.  Shouldn't all of them have such a condition?\n \n+;; Loading some 32bit integer constants could be done more\n+;; efficiently.  For example loading the value 4 as a 32bit\n+;; is normally done via mov.l #4,erX.  sub.l erX,erX, inc.l #4,erX \n+;; would be more efficient time and space-wise.\n+\n+\n (define_attr \"type\" \"branch,return,call,arith,move,float,multi\"\n   (const_string \"arith\"))\n \n@@ -406,9 +412,9 @@\n ;; ----------------------------------------------------------------------\n \n (define_insn \"tstqi\"\n-  [(set (cc0) (match_operand:QI 0 \"register_operand\" \"ra\"))]\n+  [(set (cc0) (match_operand:QI 0 \"general_operand\" \"ra\"))]\n   \"\"\n-  \"cmp.b\t#0,%X0\"\n+  \"mov.b\t%X0,%X0\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set\")])\n@@ -439,24 +445,43 @@\n    (set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"compare\")])\n \n-;; ??? 300h can have an immediate operand here.\n+(define_expand \"cmphi\"\n+  [(set (cc0)\n+\t(compare:HI (match_operand:HI 0 \"register_operand\" \"\")\n+\t\t    (match_operand:HI 1 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+  \"\n+{\n+  /* Force operand1 into a register if we're compiling\n+     for the h8/300.  */\n+  if (GET_CODE (operands[1]) != REG && !TARGET_H8300H)\n+    operands[1] = force_reg (HImode, operands[1]);\n+}\")\n \n-(define_insn \"cmphi\"\n+(define_insn \"\"\n   [(set (cc0)\n \t(compare:HI (match_operand:HI 0 \"register_operand\" \"ra\")\n \t\t    (match_operand:HI 1 \"register_operand\" \"ra\")))]\n-  \"\"\n+  \"!TARGET_H8300H\"\n   \"cmp.w\t%T1,%T0\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"compare\")])\n \n-;; ??? 300h can have an immediate operand here.\n+(define_insn \"\"\n+  [(set (cc0)\n+\t(compare:HI (match_operand:HI 0 \"register_operand\" \"ra\")\n+\t\t    (match_operand:HI 1 \"nonmemory_operand\" \"rai\")))]\n+  \"TARGET_H8300H\"\n+  \"cmp.w\t%T1,%T0\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"compare\")])\n \n (define_insn \"cmpsi\"\n   [(set (cc0)\n \t(compare:SI (match_operand:SI 0 \"register_operand\" \"ra\")\n-\t\t    (match_operand:SI 1 \"register_operand\" \"ra\")))]\n+\t\t    (match_operand:SI 1 \"nonmemory_operand\" \"rai\")))]\n   \"TARGET_H8300H\"\n   \"cmp.l\t%S1,%S0\"\n   [(set_attr \"type\" \"arith\")"}]}