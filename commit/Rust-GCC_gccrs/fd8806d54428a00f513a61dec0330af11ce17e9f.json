{"sha": "fd8806d54428a00f513a61dec0330af11ce17e9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ4ODA2ZDU0NDI4YTAwZjUxM2E2MWRlYzAzMzBhZjExY2UxN2U5Zg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2014-10-24T11:53:04Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-10-24T11:53:04Z"}, "message": "vldX.c: New file.\n\n2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vldX.c: New file.\n\nFrom-SVN: r216658", "tree": {"sha": "de4b91088f9acccc3aeb6d5072ee8e8941725e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de4b91088f9acccc3aeb6d5072ee8e8941725e9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd8806d54428a00f513a61dec0330af11ce17e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd8806d54428a00f513a61dec0330af11ce17e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd8806d54428a00f513a61dec0330af11ce17e9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd8806d54428a00f513a61dec0330af11ce17e9f/comments", "author": null, "committer": null, "parents": [{"sha": "a23001f6770607fa8eee9b6ad3f0ca95ecc81ee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23001f6770607fa8eee9b6ad3f0ca95ecc81ee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23001f6770607fa8eee9b6ad3f0ca95ecc81ee6"}], "stats": {"total": 696, "additions": 696, "deletions": 0}, "files": [{"sha": "331229d2dfd87e3bff760a718f1cc363d1d7df32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8806d54428a00f513a61dec0330af11ce17e9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8806d54428a00f513a61dec0330af11ce17e9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd8806d54428a00f513a61dec0330af11ce17e9f", "patch": "@@ -1,3 +1,7 @@\n+2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vldX.c: New file.\n+\n 2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vld1_dup.c: New file."}, {"sha": "fe00640fd7646a350cdb67148cdee55dc16b2078", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vldX.c", "status": "added", "additions": 692, "deletions": 0, "changes": 692, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd8806d54428a00f513a61dec0330af11ce17e9f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd8806d54428a00f513a61dec0330af11ce17e9f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvldX.c?ref=fd8806d54428a00f513a61dec0330af11ce17e9f", "patch": "@@ -0,0 +1,692 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+\n+/* vld2/chunk 0.  */\n+VECT_VAR_DECL(expected_vld2_0,int,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t      0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected_vld2_0,int,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld2_0,int,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_vld2_0,int,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected_vld2_0,uint,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected_vld2_0,uint,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld2_0,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_vld2_0,uint,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected_vld2_0,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected_vld2_0,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld2_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n+VECT_VAR_DECL(expected_vld2_0,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t       0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld2_0,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t       0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld2_0,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t       0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld2_0,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld2_0,uint,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t\t0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld2_0,uint,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t\t0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld2_0,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t\t0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld2_0,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld2_0,poly,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t\t0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld2_0,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t\t0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld2_0,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n+\t\t\t\t\t\t  0xc1600000, 0xc1500000 };\n+\n+/* vld2/chunk 1.  */\n+VECT_VAR_DECL(expected_vld2_1,int,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t      0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld2_1,int,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld2_1,int,32,2) [] = { 0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld2_1,int,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected_vld2_1,uint,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld2_1,uint,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld2_1,uint,32,2) [] = { 0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld2_1,uint,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected_vld2_1,poly,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld2_1,poly,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld2_1,hfloat,32,2) [] = { 0xc1600000, 0xc1500000 };\n+VECT_VAR_DECL(expected_vld2_1,int,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t       0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t       0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t       0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld2_1,int,16,8) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb,\n+\t\t\t\t\t       0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld2_1,int,32,4) [] = { 0xfffffff4, 0xfffffff5,\n+\t\t\t\t\t       0xfffffff6, 0xfffffff7 };\n+VECT_VAR_DECL(expected_vld2_1,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld2_1,uint,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t\t0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t\t0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t\t0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld2_1,uint,16,8) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb,\n+\t\t\t\t\t\t0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld2_1,uint,32,4) [] = { 0xfffffff4, 0xfffffff5,\n+\t\t\t\t\t\t0xfffffff6, 0xfffffff7 };\n+VECT_VAR_DECL(expected_vld2_1,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld2_1,poly,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t\t0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t\t0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t\t0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld2_1,poly,16,8) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb,\n+\t\t\t\t\t\t0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld2_1,hfloat,32,4) [] = { 0xc1400000, 0xc1300000,\n+\t\t\t\t\t\t  0xc1200000, 0xc1100000 };\n+\n+/* vld3/chunk 0.  */\n+VECT_VAR_DECL(expected_vld3_0,int,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t      0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected_vld3_0,int,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld3_0,int,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_vld3_0,int,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected_vld3_0,uint,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected_vld3_0,uint,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld3_0,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_vld3_0,uint,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected_vld3_0,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected_vld3_0,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld3_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n+VECT_VAR_DECL(expected_vld3_0,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t       0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld3_0,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t       0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld3_0,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t       0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld3_0,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_0,uint,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t\t0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld3_0,uint,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t\t0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld3_0,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t\t0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld3_0,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_0,poly,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t\t0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld3_0,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t\t0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld3_0,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n+\t\t\t\t\t\t  0xc1600000, 0xc1500000 };\n+\n+/* vld3/chunk 1.  */\n+VECT_VAR_DECL(expected_vld3_1,int,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t      0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld3_1,int,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld3_1,int,32,2) [] = { 0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld3_1,int,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected_vld3_1,uint,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld3_1,uint,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld3_1,uint,32,2) [] = { 0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld3_1,uint,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected_vld3_1,poly,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld3_1,poly,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld3_1,hfloat,32,2) [] = { 0xc1600000, 0xc1500000 };\n+VECT_VAR_DECL(expected_vld3_1,int,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t       0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t       0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t       0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld3_1,int,16,8) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb,\n+\t\t\t\t\t       0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld3_1,int,32,4) [] = { 0xfffffff4, 0xfffffff5,\n+\t\t\t\t\t       0xfffffff6, 0xfffffff7 };\n+VECT_VAR_DECL(expected_vld3_1,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_1,uint,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t\t0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t\t0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t\t0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld3_1,uint,16,8) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb,\n+\t\t\t\t\t\t0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld3_1,uint,32,4) [] = { 0xfffffff4, 0xfffffff5,\n+\t\t\t\t\t\t0xfffffff6, 0xfffffff7 };\n+VECT_VAR_DECL(expected_vld3_1,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_1,poly,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t\t0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t\t0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t\t0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld3_1,poly,16,8) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb,\n+\t\t\t\t\t\t0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld3_1,hfloat,32,4) [] = { 0xc1400000, 0xc1300000,\n+\t\t\t\t\t\t  0xc1200000, 0xc1100000 };\n+\n+/* vld3/chunk 2.  */\n+VECT_VAR_DECL(expected_vld3_2,int,8,8) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t      0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld3_2,int,16,4) [] = { 0xfff8, 0xfff9,\n+\t\t\t\t\t       0xfffa, 0xfffb };\n+VECT_VAR_DECL(expected_vld3_2,int,32,2) [] = { 0xfffffff4, 0xfffffff5 };\n+VECT_VAR_DECL(expected_vld3_2,int,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(expected_vld3_2,uint,8,8) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t       0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld3_2,uint,16,4) [] = { 0xfff8, 0xfff9,\n+\t\t\t\t\t\t0xfffa, 0xfffb };\n+VECT_VAR_DECL(expected_vld3_2,uint,32,2) [] = { 0xfffffff4, 0xfffffff5 };\n+VECT_VAR_DECL(expected_vld3_2,uint,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(expected_vld3_2,poly,8,8) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t       0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld3_2,poly,16,4) [] = { 0xfff8, 0xfff9,\n+\t\t\t\t\t\t0xfffa, 0xfffb };\n+VECT_VAR_DECL(expected_vld3_2,hfloat,32,2) [] = { 0xc1400000, 0xc1300000 };\n+VECT_VAR_DECL(expected_vld3_2,int,8,16) [] = { 0x10, 0x11, 0x12, 0x13,\n+\t\t\t\t\t       0x14, 0x15, 0x16, 0x17,\n+\t\t\t\t\t       0x18, 0x19, 0x1a, 0x1b,\n+\t\t\t\t\t       0x1c, 0x1d, 0x1e, 0x1f };\n+VECT_VAR_DECL(expected_vld3_2,int,16,8) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t       0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld3_2,int,32,4) [] = { 0xfffffff8, 0xfffffff9,\n+\t\t\t\t\t       0xfffffffa, 0xfffffffb };\n+VECT_VAR_DECL(expected_vld3_2,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_2,uint,8,16) [] = { 0x10, 0x11, 0x12, 0x13,\n+\t\t\t\t\t\t0x14, 0x15, 0x16, 0x17,\n+\t\t\t\t\t\t0x18, 0x19, 0x1a, 0x1b,\n+\t\t\t\t\t\t0x1c, 0x1d, 0x1e, 0x1f };\n+VECT_VAR_DECL(expected_vld3_2,uint,16,8) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t\t0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld3_2,uint,32,4) [] = { 0xfffffff8, 0xfffffff9,\n+\t\t\t\t\t\t0xfffffffa, 0xfffffffb };\n+VECT_VAR_DECL(expected_vld3_2,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld3_2,poly,8,16) [] = { 0x10, 0x11, 0x12, 0x13,\n+\t\t\t\t\t\t0x14, 0x15, 0x16, 0x17,\n+\t\t\t\t\t\t0x18, 0x19, 0x1a, 0x1b,\n+\t\t\t\t\t\t0x1c, 0x1d, 0x1e, 0x1f };\n+VECT_VAR_DECL(expected_vld3_2,poly,16,8) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t\t0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld3_2,hfloat,32,4) [] = { 0xc1000000, 0xc0e00000,\n+\t\t\t\t\t\t  0xc0c00000, 0xc0a00000 };\n+\n+/* vld4/chunk 0.  */\n+VECT_VAR_DECL(expected_vld4_0,int,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t      0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected_vld4_0,int,16,4) [] = { 0xfff0, 0xfff1,\n+\t\t\t\t\t       0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_0,int,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_vld4_0,int,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected_vld4_0,uint,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected_vld4_0,uint,16,4) [] = { 0xfff0, 0xfff1,\n+\t\t\t\t\t\t0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_0,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+VECT_VAR_DECL(expected_vld4_0,uint,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected_vld4_0,poly,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7 };\n+VECT_VAR_DECL(expected_vld4_0,poly,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected_vld4_0,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n+VECT_VAR_DECL(expected_vld4_0,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t       0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld4_0,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t       0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld4_0,int,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t       0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld4_0,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_0,uint,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t\t0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld4_0,uint,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t\t0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld4_0,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n+\t\t\t\t\t\t0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld4_0,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_0,poly,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n+\t\t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n+\t\t\t\t\t\t0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld4_0,poly,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t\t0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld4_0,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n+\t\t\t\t\t\t  0xc1600000, 0xc1500000 };\n+\n+/* vld4/chunk 1.  */\n+VECT_VAR_DECL(expected_vld4_1,int,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t      0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld4_1,int,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld4_1,int,32,2) [] = { 0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld4_1,int,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected_vld4_1,uint,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld4_1,uint,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld4_1,uint,32,2) [] = { 0xfffffff2, 0xfffffff3 };\n+VECT_VAR_DECL(expected_vld4_1,uint,64,1) [] = { 0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected_vld4_1,poly,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected_vld4_1,poly,16,4) [] = { 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected_vld4_1,hfloat,32,2) [] = { 0xc1600000, 0xc1500000 };\n+VECT_VAR_DECL(expected_vld4_1,int,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t       0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t       0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t       0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld4_1,int,16,8) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb,\n+\t\t\t\t\t       0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld4_1,int,32,4) [] = { 0xfffffff4, 0xfffffff5,\n+\t\t\t\t\t       0xfffffff6, 0xfffffff7 };\n+VECT_VAR_DECL(expected_vld4_1,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_1,uint,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t\t0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t\t0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t\t0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld4_1,uint,16,8) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb,\n+\t\t\t\t\t\t0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld4_1,uint,32,4) [] = { 0xfffffff4, 0xfffffff5,\n+\t\t\t\t\t\t0xfffffff6, 0xfffffff7 };\n+VECT_VAR_DECL(expected_vld4_1,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_1,poly,8,16) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t\t0x4, 0x5, 0x6, 0x7,\n+\t\t\t\t\t\t0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t\t0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld4_1,poly,16,8) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb,\n+\t\t\t\t\t\t0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld4_1,hfloat,32,4) [] = { 0xc1400000, 0xc1300000,\n+\t\t\t\t\t\t  0xc1200000, 0xc1100000 };\n+\n+/* vld4/chunk 2.  */\n+VECT_VAR_DECL(expected_vld4_2,int,8,8) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t      0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld4_2,int,16,4) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb };\n+VECT_VAR_DECL(expected_vld4_2,int,32,2) [] = { 0xfffffff4, 0xfffffff5 };\n+VECT_VAR_DECL(expected_vld4_2,int,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(expected_vld4_2,uint,8,8) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t       0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld4_2,uint,16,4) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb };\n+VECT_VAR_DECL(expected_vld4_2,uint,32,2) [] = { 0xfffffff4, 0xfffffff5 };\n+VECT_VAR_DECL(expected_vld4_2,uint,64,1) [] = { 0xfffffffffffffff2 };\n+VECT_VAR_DECL(expected_vld4_2,poly,8,8) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t       0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld4_2,poly,16,4) [] = { 0xfff8, 0xfff9, 0xfffa, 0xfffb };\n+VECT_VAR_DECL(expected_vld4_2,hfloat,32,2) [] = { 0xc1400000, 0xc1300000 };\n+VECT_VAR_DECL(expected_vld4_2,int,8,16) [] = { 0x10, 0x11, 0x12, 0x13,\n+\t\t\t\t\t       0x14, 0x15, 0x16, 0x17,\n+\t\t\t\t\t       0x18, 0x19, 0x1a, 0x1b,\n+\t\t\t\t\t       0x1c, 0x1d, 0x1e, 0x1f };\n+VECT_VAR_DECL(expected_vld4_2,int,16,8) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t       0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld4_2,int,32,4) [] = { 0xfffffff8, 0xfffffff9,\n+\t\t\t\t\t       0xfffffffa, 0xfffffffb };\n+VECT_VAR_DECL(expected_vld4_2,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_2,uint,8,16) [] = { 0x10, 0x11, 0x12, 0x13,\n+\t\t\t\t\t\t0x14, 0x15, 0x16, 0x17,\n+\t\t\t\t\t\t0x18, 0x19, 0x1a, 0x1b,\n+\t\t\t\t\t\t0x1c, 0x1d, 0x1e, 0x1f };\n+VECT_VAR_DECL(expected_vld4_2,uint,16,8) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t\t0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld4_2,uint,32,4) [] = { 0xfffffff8, 0xfffffff9,\n+\t\t\t\t\t\t0xfffffffa, 0xfffffffb };\n+VECT_VAR_DECL(expected_vld4_2,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_2,poly,8,16) [] = { 0x10, 0x11, 0x12, 0x13,\n+\t\t\t\t\t\t0x14, 0x15, 0x16, 0x17,\n+\t\t\t\t\t\t0x18, 0x19, 0x1a, 0x1b,\n+\t\t\t\t\t\t0x1c, 0x1d, 0x1e, 0x1f };\n+VECT_VAR_DECL(expected_vld4_2,poly,16,8) [] = { 0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t\t0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected_vld4_2,hfloat,32,4) [] = { 0xc1000000, 0xc0e00000,\n+\t\t\t\t\t\t  0xc0c00000, 0xc0a00000 };\n+\n+/* vld4/chunk 3.  */\n+VECT_VAR_DECL(expected_vld4_3,int,8,8) [] = { 0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t      0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld4_3,int,16,4) [] = { 0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld4_3,int,32,2) [] = { 0xfffffff6, 0xfffffff7 };\n+VECT_VAR_DECL(expected_vld4_3,int,64,1) [] = { 0xfffffffffffffff3 };\n+VECT_VAR_DECL(expected_vld4_3,uint,8,8) [] = { 0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t       0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld4_3,uint,16,4) [] = { 0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld4_3,uint,32,2) [] = { 0xfffffff6, 0xfffffff7 };\n+VECT_VAR_DECL(expected_vld4_3,uint,64,1) [] = { 0xfffffffffffffff3 };\n+VECT_VAR_DECL(expected_vld4_3,poly,8,8) [] = { 0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t       0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld4_3,poly,16,4) [] = { 0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected_vld4_3,hfloat,32,2) [] = { 0xc1200000, 0xc1100000 };\n+VECT_VAR_DECL(expected_vld4_3,int,8,16) [] = { 0x20, 0x21, 0x22, 0x23,\n+\t\t\t\t\t       0x24, 0x25, 0x26, 0x27,\n+\t\t\t\t\t       0x28, 0x29, 0x2a, 0x2b,\n+\t\t\t\t\t       0x2c, 0x2d, 0x2e, 0x2f };\n+VECT_VAR_DECL(expected_vld4_3,int,16,8) [] = { 0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t       0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld4_3,int,32,4) [] = { 0xfffffffc, 0xfffffffd,\n+\t\t\t\t\t       0xfffffffe, 0xffffffff };\n+VECT_VAR_DECL(expected_vld4_3,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_3,uint,8,16) [] = { 0x20, 0x21, 0x22, 0x23,\n+\t\t\t\t\t\t0x24, 0x25, 0x26, 0x27,\n+\t\t\t\t\t\t0x28, 0x29, 0x2a, 0x2b,\n+\t\t\t\t\t\t0x2c, 0x2d, 0x2e, 0x2f };\n+VECT_VAR_DECL(expected_vld4_3,uint,16,8) [] = { 0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t\t0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld4_3,uint,32,4) [] = { 0xfffffffc, 0xfffffffd,\n+\t\t\t\t\t\t0xfffffffe, 0xffffffff };\n+VECT_VAR_DECL(expected_vld4_3,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_vld4_3,poly,8,16) [] = { 0x20, 0x21, 0x22, 0x23,\n+\t\t\t\t\t\t0x24, 0x25, 0x26, 0x27,\n+\t\t\t\t\t\t0x28, 0x29, 0x2a, 0x2b,\n+\t\t\t\t\t\t0x2c, 0x2d, 0x2e, 0x2f };\n+VECT_VAR_DECL(expected_vld4_3,poly,16,8) [] = { 0x8, 0x9, 0xa, 0xb,\n+\t\t\t\t\t\t0xc, 0xd, 0xe, 0xf };\n+VECT_VAR_DECL(expected_vld4_3,hfloat,32,4) [] = { 0xc0800000, 0xc0400000,\n+\t\t\t\t\t\t  0xc0000000, 0xbf800000 };\n+\n+void exec_vldX (void)\n+{\n+  /* In this case, input variables are arrays of vectors.  */\n+#define DECL_VLDX(T1, W, N, X)\t\t\t\t\t\t\\\n+  VECT_ARRAY_TYPE(T1, W, N, X) VECT_ARRAY_VAR(vector, T1, W, N, X);\t\\\n+  VECT_VAR_DECL(result_bis_##X, T1, W, N)[X * N]\n+\n+  /* We need to use a temporary result buffer (result_bis), because\n+     the one used for other tests is not large enough. A subset of the\n+     result data is moved from result_bis to result, and it is this\n+     subset which is used to check the actual behaviour. The next\n+     macro enables to move another chunk of data from result_bis to\n+     result.  */\n+#define TEST_VLDX(Q, T1, T2, W, N, X)\t\t\t\t\t\\\n+  VECT_ARRAY_VAR(vector, T1, W, N, X) =\t\t\t\t\t\\\n+    /* Use dedicated init buffer, of size X */\t\t\t\t\\\n+    vld##X##Q##_##T2##W(VECT_ARRAY_VAR(buffer_vld##X, T1, W, N, X));\t\\\n+  vst##X##Q##_##T2##W(VECT_VAR(result_bis_##X, T1, W, N),\t\t\\\n+\t\t      VECT_ARRAY_VAR(vector, T1, W, N, X));\t\t\\\n+  memcpy(VECT_VAR(result, T1, W, N), VECT_VAR(result_bis_##X, T1, W, N), \\\n+\t sizeof(VECT_VAR(result, T1, W, N)));\n+\n+  /* Overwrite \"result\" with the contents of \"result_bis\"[Y].  */\n+#define TEST_EXTRA_CHUNK(T1, W, N, X,Y)\t\t\t\\\n+  memcpy(VECT_VAR(result, T1, W, N),\t\t\t\\\n+\t &(VECT_VAR(result_bis_##X, T1, W, N)[Y*N]),\t\\\n+\t sizeof(VECT_VAR(result, T1, W, N)));\n+\n+  /* We need all variants in 64 bits, but there is no 64x2 variant.  */\n+#define DECL_ALL_VLDX(X)\t\t\t\\\n+  DECL_VLDX(int, 8, 8, X);\t\t\t\\\n+  DECL_VLDX(int, 16, 4, X);\t\t\t\\\n+  DECL_VLDX(int, 32, 2, X);\t\t\t\\\n+  DECL_VLDX(int, 64, 1, X);\t\t\t\\\n+  DECL_VLDX(uint, 8, 8, X);\t\t\t\\\n+  DECL_VLDX(uint, 16, 4, X);\t\t\t\\\n+  DECL_VLDX(uint, 32, 2, X);\t\t\t\\\n+  DECL_VLDX(uint, 64, 1, X);\t\t\t\\\n+  DECL_VLDX(poly, 8, 8, X);\t\t\t\\\n+  DECL_VLDX(poly, 16, 4, X);\t\t\t\\\n+  DECL_VLDX(float, 32, 2, X);\t\t\t\\\n+  DECL_VLDX(int, 8, 16, X);\t\t\t\\\n+  DECL_VLDX(int, 16, 8, X);\t\t\t\\\n+  DECL_VLDX(int, 32, 4, X);\t\t\t\\\n+  DECL_VLDX(uint, 8, 16, X);\t\t\t\\\n+  DECL_VLDX(uint, 16, 8, X);\t\t\t\\\n+  DECL_VLDX(uint, 32, 4, X);\t\t\t\\\n+  DECL_VLDX(poly, 8, 16, X);\t\t\t\\\n+  DECL_VLDX(poly, 16, 8, X);\t\t\t\\\n+  DECL_VLDX(float, 32, 4, X)\n+\n+#define TEST_ALL_VLDX(X)\t\t\t\\\n+  TEST_VLDX(, int, s, 8, 8, X);\t\t\t\\\n+  TEST_VLDX(, int, s, 16, 4, X);\t\t\\\n+  TEST_VLDX(, int, s, 32, 2, X);\t\t\\\n+  TEST_VLDX(, int, s, 64, 1, X);\t\t\\\n+  TEST_VLDX(, uint, u, 8, 8, X);\t\t\\\n+  TEST_VLDX(, uint, u, 16, 4, X);\t\t\\\n+  TEST_VLDX(, uint, u, 32, 2, X);\t\t\\\n+  TEST_VLDX(, uint, u, 64, 1, X);\t\t\\\n+  TEST_VLDX(, poly, p, 8, 8, X);\t\t\\\n+  TEST_VLDX(, poly, p, 16, 4, X);\t\t\\\n+  TEST_VLDX(, float, f, 32, 2, X);\t\t\\\n+  TEST_VLDX(q, int, s, 8, 16, X);\t\t\\\n+  TEST_VLDX(q, int, s, 16, 8, X);\t\t\\\n+  TEST_VLDX(q, int, s, 32, 4, X);\t\t\\\n+  TEST_VLDX(q, uint, u, 8, 16, X);\t\t\\\n+  TEST_VLDX(q, uint, u, 16, 8, X);\t\t\\\n+  TEST_VLDX(q, uint, u, 32, 4, X);\t\t\\\n+  TEST_VLDX(q, poly, p, 8, 16, X);\t\t\\\n+  TEST_VLDX(q, poly, p, 16, 8, X);\t\t\\\n+  TEST_VLDX(q, float, f, 32, 4, X)\n+\n+#define TEST_ALL_EXTRA_CHUNKS(X, Y)\t\t\\\n+  TEST_EXTRA_CHUNK(int, 8, 8, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 16, 4, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 32, 2, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 64, 1, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 8, 8, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 16, 4, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 32, 2, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 64, 1, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(poly, 8, 8, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(poly, 16, 4, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(float, 32, 2, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 8, 16, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 16, 8, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(int, 32, 4, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 8, 16, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 16, 8, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(uint, 32, 4, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(poly, 8, 16, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(poly, 16, 8, X, Y);\t\t\\\n+  TEST_EXTRA_CHUNK(float, 32, 4, X, Y)\n+\n+  DECL_ALL_VLDX(2);\n+  DECL_ALL_VLDX(3);\n+  DECL_ALL_VLDX(4);\n+\n+  /* Special input buffers of suitable size are needed for vld2/vld3/vld4.  */\n+  /* Input buffers for vld2, 1 of each size */\n+  VECT_ARRAY_INIT2(buffer_vld2, int, 8, 8);\n+  PAD(buffer_vld2_pad, int, 8, 8);\n+  VECT_ARRAY_INIT2(buffer_vld2, int, 16, 4);\n+  PAD(buffer_vld2_pad, int, 16, 4);\n+  VECT_ARRAY_INIT2(buffer_vld2, int, 32, 2);\n+  PAD(buffer_vld2_pad, int, 32, 2);\n+  VECT_ARRAY_INIT2(buffer_vld2, int, 64, 1);\n+  PAD(buffer_vld2_pad, int, 64, 1);\n+  VECT_ARRAY_INIT2(buffer_vld2, uint, 8, 8);\n+  PAD(buffer_vld2_pad, uint, 8, 8);\n+  VECT_ARRAY_INIT2(buffer_vld2, uint, 16, 4);\n+  PAD(buffer_vld2_pad, uint, 16, 4);\n+  VECT_ARRAY_INIT2(buffer_vld2, uint, 32, 2);\n+  PAD(buffer_vld2_pad, uint, 32, 2);\n+  VECT_ARRAY_INIT2(buffer_vld2, uint, 64, 1);\n+  PAD(buffer_vld2_pad, uint, 64, 1);\n+  VECT_ARRAY_INIT2(buffer_vld2, poly, 8, 8);\n+  PAD(buffer_vld2_pad, poly, 8, 8);\n+  VECT_ARRAY_INIT2(buffer_vld2, poly, 16, 4);\n+  PAD(buffer_vld2_pad, poly, 16, 4);\n+  VECT_ARRAY_INIT2(buffer_vld2, float, 32, 2);\n+  PAD(buffer_vld2_pad, float, 32, 2);\n+\n+  VECT_ARRAY_INIT2(buffer_vld2, int, 8, 16);\n+  PAD(buffer_vld2_pad, int, 8, 16);\n+  VECT_ARRAY_INIT2(buffer_vld2, int, 16, 8);\n+  PAD(buffer_vld2_pad, int, 16, 8);\n+  VECT_ARRAY_INIT2(buffer_vld2, int, 32, 4);\n+  PAD(buffer_vld2_pad, int, 32, 4);\n+  VECT_ARRAY_INIT2(buffer_vld2, int, 64, 2);\n+  PAD(buffer_vld2_pad, int, 64, 2);\n+  VECT_ARRAY_INIT2(buffer_vld2, uint, 8, 16);\n+  PAD(buffer_vld2_pad, uint, 8, 16);\n+  VECT_ARRAY_INIT2(buffer_vld2, uint, 16, 8);\n+  PAD(buffer_vld2_pad, uint, 16, 8);\n+  VECT_ARRAY_INIT2(buffer_vld2, uint, 32, 4);\n+  PAD(buffer_vld2_pad, uint, 32, 4);\n+  VECT_ARRAY_INIT2(buffer_vld2, uint, 64, 2);\n+  PAD(buffer_vld2_pad, uint, 64, 2);\n+  VECT_ARRAY_INIT2(buffer_vld2, poly, 8, 16);\n+  PAD(buffer_vld2_pad, poly, 8, 16);\n+  VECT_ARRAY_INIT2(buffer_vld2, poly, 16, 8);\n+  PAD(buffer_vld2_pad, poly, 16, 8);\n+  VECT_ARRAY_INIT2(buffer_vld2, float, 32, 4);\n+  PAD(buffer_vld2_pad, float, 32, 4);\n+\n+  /* Input buffers for vld3, 1 of each size */\n+  VECT_ARRAY_INIT3(buffer_vld3, int, 8, 8);\n+  PAD(buffer_vld3_pad, int, 8, 8);\n+  VECT_ARRAY_INIT3(buffer_vld3, int, 16, 4);\n+  PAD(buffer_vld3_pad, int, 16, 4);\n+  VECT_ARRAY_INIT3(buffer_vld3, int, 32, 2);\n+  PAD(buffer_vld3_pad, int, 32, 2);\n+  VECT_ARRAY_INIT3(buffer_vld3, int, 64, 1);\n+  PAD(buffer_vld3_pad, int, 64, 1);\n+  VECT_ARRAY_INIT3(buffer_vld3, uint, 8, 8);\n+  PAD(buffer_vld3_pad, uint, 8, 8);\n+  VECT_ARRAY_INIT3(buffer_vld3, uint, 16, 4);\n+  PAD(buffer_vld3_pad, uint, 16, 4);\n+  VECT_ARRAY_INIT3(buffer_vld3, uint, 32, 2);\n+  PAD(buffer_vld3_pad, uint, 32, 2);\n+  VECT_ARRAY_INIT3(buffer_vld3, uint, 64, 1);\n+  PAD(buffer_vld3_pad, uint, 64, 1);\n+  VECT_ARRAY_INIT3(buffer_vld3, poly, 8, 8);\n+  PAD(buffer_vld3_pad, poly, 8, 8);\n+  VECT_ARRAY_INIT3(buffer_vld3, poly, 16, 4);\n+  PAD(buffer_vld3_pad, poly, 16, 4);\n+  VECT_ARRAY_INIT3(buffer_vld3, float, 32, 2);\n+  PAD(buffer_vld3_pad, float, 32, 2);\n+\n+  VECT_ARRAY_INIT3(buffer_vld3, int, 8, 16);\n+  PAD(buffer_vld3_pad, int, 8, 16);\n+  VECT_ARRAY_INIT3(buffer_vld3, int, 16, 8);\n+  PAD(buffer_vld3_pad, int, 16, 8);\n+  VECT_ARRAY_INIT3(buffer_vld3, int, 32, 4);\n+  PAD(buffer_vld3_pad, int, 32, 4);\n+  VECT_ARRAY_INIT3(buffer_vld3, int, 64, 2);\n+  PAD(buffer_vld3_pad, int, 64, 2);\n+  VECT_ARRAY_INIT3(buffer_vld3, uint, 8, 16);\n+  PAD(buffer_vld3_pad, uint, 8, 16);\n+  VECT_ARRAY_INIT3(buffer_vld3, uint, 16, 8);\n+  PAD(buffer_vld3_pad, uint, 16, 8);\n+  VECT_ARRAY_INIT3(buffer_vld3, uint, 32, 4);\n+  PAD(buffer_vld3_pad, uint, 32, 4);\n+  VECT_ARRAY_INIT3(buffer_vld3, uint, 64, 2);\n+  PAD(buffer_vld3_pad, uint, 64, 2);\n+  VECT_ARRAY_INIT3(buffer_vld3, poly, 8, 16);\n+  PAD(buffer_vld3_pad, poly, 8, 16);\n+  VECT_ARRAY_INIT3(buffer_vld3, poly, 16, 8);\n+  PAD(buffer_vld3_pad, poly, 16, 8);\n+  VECT_ARRAY_INIT3(buffer_vld3, float, 32, 4);\n+  PAD(buffer_vld3_pad, float, 32, 4);\n+\n+  /* Input buffers for vld4, 1 of each size */\n+  VECT_ARRAY_INIT4(buffer_vld4, int, 8, 8);\n+  PAD(buffer_vld4_pad, int, 8, 8);\n+  VECT_ARRAY_INIT4(buffer_vld4, int, 16, 4);\n+  PAD(buffer_vld4_pad, int, 16, 4);\n+  VECT_ARRAY_INIT4(buffer_vld4, int, 32, 2);\n+  PAD(buffer_vld4_pad, int, 32, 2);\n+  VECT_ARRAY_INIT4(buffer_vld4, int, 64, 1);\n+  PAD(buffer_vld4_pad, int, 64, 1);\n+  VECT_ARRAY_INIT4(buffer_vld4, uint, 8, 8);\n+  PAD(buffer_vld4_pad, uint, 8, 8);\n+  VECT_ARRAY_INIT4(buffer_vld4, uint, 16, 4);\n+  PAD(buffer_vld4_pad, uint, 16, 4);\n+  VECT_ARRAY_INIT4(buffer_vld4, uint, 32, 2);\n+  PAD(buffer_vld4_pad, uint, 32, 2);\n+  VECT_ARRAY_INIT4(buffer_vld4, uint, 64, 1);\n+  PAD(buffer_vld4_pad, uint, 64, 1);\n+  VECT_ARRAY_INIT4(buffer_vld4, poly, 8, 8);\n+  PAD(buffer_vld4_pad, poly, 8, 8);\n+  VECT_ARRAY_INIT4(buffer_vld4, poly, 16, 4);\n+  PAD(buffer_vld4_pad, poly, 16, 4);\n+  VECT_ARRAY_INIT4(buffer_vld4, float, 32, 2);\n+  PAD(buffer_vld4_pad, float, 32, 2);\n+\n+  VECT_ARRAY_INIT4(buffer_vld4, int, 8, 16);\n+  PAD(buffer_vld4_pad, int, 8, 16);\n+  VECT_ARRAY_INIT4(buffer_vld4, int, 16, 8);\n+  PAD(buffer_vld4_pad, int, 16, 8);\n+  VECT_ARRAY_INIT4(buffer_vld4, int, 32, 4);\n+  PAD(buffer_vld4_pad, int, 32, 4);\n+  VECT_ARRAY_INIT4(buffer_vld4, int, 64, 2);\n+  PAD(buffer_vld4_pad, int, 64, 2);\n+  VECT_ARRAY_INIT4(buffer_vld4, uint, 8, 16);\n+  PAD(buffer_vld4_pad, uint, 8, 16);\n+  VECT_ARRAY_INIT4(buffer_vld4, uint, 16, 8);\n+  PAD(buffer_vld4_pad, uint, 16, 8);\n+  VECT_ARRAY_INIT4(buffer_vld4, uint, 32, 4);\n+  PAD(buffer_vld4_pad, uint, 32, 4);\n+  VECT_ARRAY_INIT4(buffer_vld4, uint, 64, 2);\n+  PAD(buffer_vld4_pad, uint, 64, 2);\n+  VECT_ARRAY_INIT4(buffer_vld4, poly, 8, 16);\n+  PAD(buffer_vld4_pad, poly, 8, 16);\n+  VECT_ARRAY_INIT4(buffer_vld4, poly, 16, 8);\n+  PAD(buffer_vld4_pad, poly, 16, 8);\n+  VECT_ARRAY_INIT4(buffer_vld4, float, 32, 4);\n+  PAD(buffer_vld4_pad, float, 32, 4);\n+\n+  /* Check vld2/vld2q.  */\n+  clean_results ();\n+#define TEST_MSG \"VLD2/VLD2Q\"\n+  TEST_ALL_VLDX(2);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld2_0, \"chunk 0\");\n+\n+  TEST_ALL_EXTRA_CHUNKS(2, 1);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld2_1, \"chunk 1\");\n+\n+  /* Check vld3/vld3q.  */\n+  clean_results ();\n+#undef TEST_MSG\n+#define TEST_MSG \"VLD3/VLD3Q\"\n+  TEST_ALL_VLDX(3);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld3_0, \"chunk 0\");\n+\n+  TEST_ALL_EXTRA_CHUNKS(3, 1);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld3_1, \"chunk 1\");\n+\n+  TEST_ALL_EXTRA_CHUNKS(3, 2);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld3_2, \"chunk 2\");\n+\n+  /* Check vld4/vld4q.  */\n+  clean_results ();\n+#undef TEST_MSG\n+#define TEST_MSG \"VLD4/VLD4Q\"\n+  TEST_ALL_VLDX(4);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld4_0, \"chunk 0\");\n+\n+  TEST_ALL_EXTRA_CHUNKS(4, 1);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld4_1, \"chunk 1\");\n+\n+  TEST_ALL_EXTRA_CHUNKS(4, 2);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld4_2, \"chunk 2\");\n+\n+  TEST_ALL_EXTRA_CHUNKS(4, 3);\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_vld4_3, \"chunk 3\");\n+}\n+\n+int main (void)\n+{\n+  exec_vldX ();\n+  return 0;\n+}"}]}