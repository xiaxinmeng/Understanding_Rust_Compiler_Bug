{"sha": "839f286453b6f62a108eec6b76042f7289db0125", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5ZjI4NjQ1M2I2ZjYyYTEwOGVlYzZiNzYwNDJmNzI4OWRiMDEyNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-09-16T14:05:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-09-16T14:05:47Z"}, "message": "decl.c (gnat_to_gnu_field): Add DEBUG_INFO_P parameter.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_field): Add DEBUG_INFO_P parameter.\n\tIf a padding type was made for the field, declare it.\n\t(components_to_record): Add DEBUG_INFO_P parameter.  Adjust call\n\tto gnat_to_gnu_field and call to self.\n\t(gnat_to_gnu_entity) <E_Array_Type>: Do not redeclare padding types.\n\t<E_Array_Subtype>: Likewise.\n\tAdjust calls to gnat_to_gnu_field and components_to_record.\n\nFrom-SVN: r151755", "tree": {"sha": "173ae77b8b17d5784365b182d12152624cec45a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/173ae77b8b17d5784365b182d12152624cec45a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/839f286453b6f62a108eec6b76042f7289db0125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839f286453b6f62a108eec6b76042f7289db0125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839f286453b6f62a108eec6b76042f7289db0125", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839f286453b6f62a108eec6b76042f7289db0125/comments", "author": null, "committer": null, "parents": [{"sha": "54384f7f0ac2aae9b2da7cf32e22f8d3418fa836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54384f7f0ac2aae9b2da7cf32e22f8d3418fa836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54384f7f0ac2aae9b2da7cf32e22f8d3418fa836"}], "stats": {"total": 108, "additions": 92, "deletions": 16}, "files": [{"sha": "485562fb29b8cee0cdabca38ed101e2be3f6a676", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f286453b6f62a108eec6b76042f7289db0125/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f286453b6f62a108eec6b76042f7289db0125/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=839f286453b6f62a108eec6b76042f7289db0125", "patch": "@@ -1,3 +1,13 @@\n+2009-09-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_field): Add DEBUG_INFO_P parameter.\n+\tIf a padding type was made for the field, declare it.\n+\t(components_to_record): Add DEBUG_INFO_P parameter.  Adjust call\n+\tto gnat_to_gnu_field and call to self.\n+\t(gnat_to_gnu_entity) <E_Array_Type>: Do not redeclare padding types.\n+\t<E_Array_Subtype>: Likewise.\n+\tAdjust calls to gnat_to_gnu_field and components_to_record.\n+\n 2009-09-16  Robert Dewar  <dewar@adacore.com>\n \n \t* prj-nmsc.adb: Minor reformatting"}, {"sha": "58c07a777d730968dd04b56a6b5756e3568f9ba8", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f286453b6f62a108eec6b76042f7289db0125/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f286453b6f62a108eec6b76042f7289db0125/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=839f286453b6f62a108eec6b76042f7289db0125", "patch": "@@ -131,15 +131,15 @@ static tree elaborate_expression (Node_Id, Entity_Id, tree, bool, bool, bool);\n static bool is_variable_size (tree);\n static tree elaborate_expression_1 (tree, Entity_Id, tree, bool, bool);\n static tree make_packable_type (tree, bool);\n-static tree gnat_to_gnu_field (Entity_Id, tree, int, bool);\n+static tree gnat_to_gnu_field (Entity_Id, tree, int, bool, bool);\n static tree gnat_to_gnu_param (Entity_Id, Mechanism_Type, Entity_Id, bool,\n \t\t\t       bool *);\n static bool same_discriminant_p (Entity_Id, Entity_Id);\n static bool array_type_has_nonaliased_component (Entity_Id, tree);\n static bool compile_time_known_address_p (Node_Id);\n static bool cannot_be_superflat_p (Node_Id);\n static void components_to_record (tree, Node_Id, tree, int, bool, tree *,\n-\t\t\t\t  bool, bool, bool, bool);\n+\t\t\t\t  bool, bool, bool, bool, bool);\n static Uint annotate_value (tree);\n static void annotate_rep (Entity_Id, tree);\n static tree compute_field_positions (tree, tree, tree, tree, unsigned int);\n@@ -1990,7 +1990,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    /* If a padding record was made, declare it now since it will\n \t       never be declared otherwise.  This is necessary to ensure\n \t       that its subtrees are properly marked.  */\n-\t    if (tem != orig_tem)\n+\t    if (tem != orig_tem && !DECL_P (TYPE_NAME (tem)))\n \t      create_type_decl (TYPE_NAME (tem), tem, NULL, true,\n \t\t\t\tdebug_info_p, gnat_entity);\n \t  }\n@@ -2364,7 +2364,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t      if (gnu_comp_size && !Is_Bit_Packed_Array (gnat_entity))\n \t\t{\n-\t\t  tree orig_gnu_type = gnu_type;\n+\t\t  tree orig_type = gnu_type;\n \t\t  unsigned int max_align;\n \n \t\t  /* If an alignment is specified, use it as a cap on the\n@@ -2381,9 +2381,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t  gnu_type\n \t\t    = make_type_from_size (gnu_type, gnu_comp_size, false);\n \t\t  if (max_align > 0 && TYPE_ALIGN (gnu_type) > max_align)\n-\t\t    gnu_type = orig_gnu_type;\n+\t\t    gnu_type = orig_type;\n \t\t  else\n-\t\t    orig_gnu_type = gnu_type;\n+\t\t    orig_type = gnu_type;\n \n \t\t  gnu_type = maybe_pad_type (gnu_type, gnu_comp_size, 0,\n \t\t\t\t\t     gnat_entity, \"C_PAD\", false,\n@@ -2392,7 +2392,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t  /* If a padding record was made, declare it now since it\n \t\t     will never be declared otherwise.  This is necessary\n \t\t     to ensure that its subtrees are properly marked.  */\n-\t\t  if (gnu_type != orig_gnu_type)\n+\t\t  if (gnu_type != orig_type && !DECL_P (TYPE_NAME (gnu_type)))\n \t\t    create_type_decl (TYPE_NAME (gnu_type), gnu_type, NULL,\n \t\t\t\t      true, debug_info_p, gnat_entity);\n \t\t}\n@@ -2952,7 +2952,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\tcontinue;\n \n \t      gnu_field\n-\t\t= gnat_to_gnu_field (gnat_field, gnu_type, packed, definition);\n+\t\t= gnat_to_gnu_field (gnat_field, gnu_type, packed, definition,\n+\t\t\t\t     debug_info_p);\n \n \t      /* Make an expression using a PLACEHOLDER_EXPR from the\n \t\t FIELD_DECL node just created and link that with the\n@@ -2973,7 +2974,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t/* Add the fields into the record type and finish it up.  */\n \tcomponents_to_record (gnu_type, Component_List (record_definition),\n \t\t\t      gnu_field_list, packed, definition, NULL,\n-\t\t\t      false, all_rep, false, is_unchecked_union);\n+\t\t\t      false, all_rep, false, is_unchecked_union,\n+\t\t\t      debug_info_p);\n \n \t/* If it is a tagged record force the type to BLKmode to insure that\n \t   these objects will always be put in memory.  Likewise for limited\n@@ -6412,11 +6414,14 @@ adjust_packed (tree field_type, tree record_type, int packed)\n    record has Component_Alignment of Storage_Unit, -2 if the enclosing\n    record has a specified alignment.\n \n-   DEFINITION is true if this field is for a record being defined.  */\n+   DEFINITION is true if this field is for a record being defined.\n+\n+   DEBUG_INFO_P is true if we need to write debug information for types\n+   that we may create in the process.  */\n \n static tree\n gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n-\t\t   bool definition)\n+\t\t   bool definition, bool debug_info_p)\n {\n   tree gnu_field_id = get_entity_name (gnat_field);\n   tree gnu_field_type = gnat_to_gnu_type (Etype (gnat_field));\n@@ -6635,6 +6640,8 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n   /* If a size is specified, adjust the field's type to it.  */\n   if (gnu_size)\n     {\n+      tree orig_field_type;\n+\n       /* If the field's type is justified modular, we would need to remove\n \t the wrapper to (better) meet the layout requirements.  However we\n \t can do so only if the field is not aliased to preserve the unique\n@@ -6650,8 +6657,18 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n       gnu_field_type\n \t= make_type_from_size (gnu_field_type, gnu_size,\n \t\t\t       Has_Biased_Representation (gnat_field));\n+\n+      orig_field_type = gnu_field_type;\n       gnu_field_type = maybe_pad_type (gnu_field_type, gnu_size, 0, gnat_field,\n \t\t\t\t       \"PAD\", false, definition, true);\n+\n+      /* If a padding record was made, declare it now since it will never be\n+\t declared otherwise.  This is necessary to ensure that its subtrees\n+\t are properly marked.  */\n+      if (gnu_field_type != orig_field_type\n+\t  && !DECL_P (TYPE_NAME (gnu_field_type)))\n+\tcreate_type_decl (TYPE_NAME (gnu_field_type), gnu_field_type, NULL,\n+\t\t\t  true, debug_info_p, gnat_field);\n     }\n \n   /* Otherwise (or if there was an error), don't specify a position.  */\n@@ -6746,13 +6763,17 @@ compare_field_bitpos (const PTR rt1, const PTR rt2)\n    modified afterwards so it will not be finalized here.\n \n    UNCHECKED_UNION, if true, means that we are building a type for a record\n-   with a Pragma Unchecked_Union.  */\n+   with a Pragma Unchecked_Union.\n+\n+   DEBUG_INFO_P, if true, means that we need to write debug information for\n+   types that we may create in the process.  */\n \n static void\n components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n \t\t      tree gnu_field_list, int packed, bool definition,\n \t\t      tree *p_gnu_rep_list, bool cancel_alignment,\n-\t\t      bool all_rep, bool do_not_finalize, bool unchecked_union)\n+\t\t      bool all_rep, bool do_not_finalize,\n+\t\t      bool unchecked_union, bool debug_info_p)\n {\n   bool all_rep_and_size = all_rep && TYPE_SIZE (gnu_record_type);\n   bool layout_with_rep = false;\n@@ -6780,8 +6801,8 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n \t  }\n \telse\n \t  {\n-\t    gnu_field = gnat_to_gnu_field (gnat_field, gnu_record_type,\n-\t\t\t\t\t   packed, definition);\n+\t    gnu_field = gnat_to_gnu_field (gnat_field, gnu_record_type, packed,\n+\t\t\t\t\t   definition, debug_info_p);\n \n \t    /* If this is the _Tag field, put it before any other fields.  */\n \t    if (gnat_name == Name_uTag)\n@@ -6887,7 +6908,7 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n \t  components_to_record (gnu_variant_type, Component_List (variant),\n \t\t\t\tNULL_TREE, packed, definition,\n \t\t\t\t&gnu_our_rep_list, !all_rep_and_size, all_rep,\n-\t\t\t\ttrue, unchecked_union);\n+\t\t\t\ttrue, unchecked_union, debug_info_p);\n \n \t  gnu_qual = choices_to_gnu (gnu_discr, Discrete_Choices (variant));\n "}, {"sha": "ac05fd3a73f499b72f53d835794be9d28dadd9dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f286453b6f62a108eec6b76042f7289db0125/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f286453b6f62a108eec6b76042f7289db0125/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=839f286453b6f62a108eec6b76042f7289db0125", "patch": "@@ -1,3 +1,7 @@\n+2009-09-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/discr20.ad[sb]: New test.\n+\n 2009-09-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/34011"}, {"sha": "358d5654058c56bafa6848ea041ac978949d9b38", "filename": "gcc/testsuite/gnat.dg/discr20.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f286453b6f62a108eec6b76042f7289db0125/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr20.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f286453b6f62a108eec6b76042f7289db0125/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr20.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr20.adb?ref=839f286453b6f62a108eec6b76042f7289db0125", "patch": "@@ -0,0 +1,10 @@\n+-- { dg-do compile }\n+\n+package body Discr20 is\n+\n+  function Get (X : Wrapper) return Def is\n+  begin\n+     return X.It;\n+  end Get;\n+\n+end Discr20;"}, {"sha": "a447b3309c320a7fefac46c0a96ab682333b0973", "filename": "gcc/testsuite/gnat.dg/discr20.ads", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839f286453b6f62a108eec6b76042f7289db0125/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr20.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839f286453b6f62a108eec6b76042f7289db0125/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr20.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr20.ads?ref=839f286453b6f62a108eec6b76042f7289db0125", "patch": "@@ -0,0 +1,31 @@\n+package Discr20 is\n+\n+  Size : Integer;\n+\n+  type Name is new String (1..Size);\n+\n+  type Rec is record\n+     It : Name;\n+  end record;\n+\n+  type Danger is (This, That);\n+  type def (X : Danger := This) is record\n+    case X is\n+       when This => It : Rec;\n+       when That => null;\n+       end case;\n+   end record;\n+\n+   type Switch is (On, Off);\n+   type Wrapper (Disc : Switch := On) is private;\n+   function Get (X : Wrapper) return Def;\n+\n+private\n+   type Wrapper (Disc : Switch := On) is record\n+      Case Disc is\n+         when On  => It : Def;\n+         when Off => null;\n+      end case;\n+   end record;\n+\n+end Discr20;"}]}