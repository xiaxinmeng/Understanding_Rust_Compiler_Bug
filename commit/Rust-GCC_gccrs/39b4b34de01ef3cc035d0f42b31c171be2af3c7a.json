{"sha": "39b4b34de01ef3cc035d0f42b31c171be2af3c7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzliNGIzNGRlMDFlZjNjYzAzNWQwZjQyYjMxYzE3MWJlMmFmM2M3YQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2016-11-07T19:33:27Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2016-11-07T19:33:27Z"}, "message": "re PR fortran/78226 (Fill out location information everywhere)\n\n2016-11-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/78226\n\t* expr.c (gfc_generate_initializer):  Add where to EXPR_NULL\n\tstatement.\n\t* iresolve.c (gfc_resolve_extends_type_of):  Add where to\n\tboth arguments of the function.\n\t* resolve.c (resolve_select_type):  Add where to the\n\tsecond argument of the new statement.\n\nFrom-SVN: r241927", "tree": {"sha": "0f41f6dc1da3c15e7735fc3fd4a56653bb15b923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f41f6dc1da3c15e7735fc3fd4a56653bb15b923"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39b4b34de01ef3cc035d0f42b31c171be2af3c7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39b4b34de01ef3cc035d0f42b31c171be2af3c7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39b4b34de01ef3cc035d0f42b31c171be2af3c7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39b4b34de01ef3cc035d0f42b31c171be2af3c7a/comments", "author": null, "committer": null, "parents": [{"sha": "98a989094b11c0e5395b127d84fe0eb65191feda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98a989094b11c0e5395b127d84fe0eb65191feda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98a989094b11c0e5395b127d84fe0eb65191feda"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "535a5c15c89dc79f9083eb479b44a6dc0eb8dd85", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b4b34de01ef3cc035d0f42b31c171be2af3c7a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b4b34de01ef3cc035d0f42b31c171be2af3c7a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=39b4b34de01ef3cc035d0f42b31c171be2af3c7a", "patch": "@@ -1,3 +1,13 @@\n+2016-11-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/78226\n+\t* expr.c (gfc_generate_initializer):  Add where to EXPR_NULL\n+\tstatement.\n+\t* iresolve.c (gfc_resolve_extends_type_of):  Add where to\n+\tboth arguments of the function.\n+\t* resolve.c (resolve_select_type):  Add where to the\n+\tsecond argument of the new statement.\n+\n 2016-11-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/78226"}, {"sha": "ba79190daf1fc97661489cdf7212d6834bcbd1c5", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b4b34de01ef3cc035d0f42b31c171be2af3c7a/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b4b34de01ef3cc035d0f42b31c171be2af3c7a/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=39b4b34de01ef3cc035d0f42b31c171be2af3c7a", "patch": "@@ -4367,6 +4367,7 @@ gfc_generate_initializer (gfc_typespec *ts, bool generate)\n \t{\n \t  ctor->expr = gfc_get_expr ();\n \t  ctor->expr->expr_type = EXPR_NULL;\n+\t  ctor->expr->where = init->where;\n \t  ctor->expr->ts = comp->ts;\n \t}\n "}, {"sha": "b289c9f684058973c435541e7dfe2531018e9dfd", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b4b34de01ef3cc035d0f42b31c171be2af3c7a/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b4b34de01ef3cc035d0f42b31c171be2af3c7a/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=39b4b34de01ef3cc035d0f42b31c171be2af3c7a", "patch": "@@ -1044,31 +1044,39 @@ gfc_resolve_extends_type_of (gfc_expr *f, gfc_expr *a, gfc_expr *mo)\n     gfc_add_vptr_component (a);\n   else if (a->ts.type == BT_DERIVED)\n     {\n+      locus where;\n+\n       vtab = gfc_find_derived_vtab (a->ts.u.derived);\n       /* Clear the old expr.  */\n       gfc_free_ref_list (a->ref);\n+      where = a->where;\n       memset (a, '\\0', sizeof (gfc_expr));\n       /* Construct a new one.  */\n       a->expr_type = EXPR_VARIABLE;\n       st = gfc_find_symtree (vtab->ns->sym_root, vtab->name);\n       a->symtree = st;\n       a->ts = vtab->ts;\n+      a->where = where;\n     }\n \n   /* Replace the second argument with the corresponding vtab.  */\n   if (mo->ts.type == BT_CLASS)\n     gfc_add_vptr_component (mo);\n   else if (mo->ts.type == BT_DERIVED)\n     {\n+      locus where;\n+\n       vtab = gfc_find_derived_vtab (mo->ts.u.derived);\n       /* Clear the old expr.  */\n+      where = mo->where;\n       gfc_free_ref_list (mo->ref);\n       memset (mo, '\\0', sizeof (gfc_expr));\n       /* Construct a new one.  */\n       mo->expr_type = EXPR_VARIABLE;\n       st = gfc_find_symtree (vtab->ns->sym_root, vtab->name);\n       mo->symtree = st;\n       mo->ts = vtab->ts;\n+      mo->where = where;\n     }\n \n   f->ts.type = BT_LOGICAL;"}, {"sha": "3a4dd1f77e68c515d22374e027462ae7a99ed148", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b4b34de01ef3cc035d0f42b31c171be2af3c7a/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b4b34de01ef3cc035d0f42b31c171be2af3c7a/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=39b4b34de01ef3cc035d0f42b31c171be2af3c7a", "patch": "@@ -8863,6 +8863,7 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t  st = gfc_find_symtree (vtab->ns->sym_root, vtab->name);\n \t  new_st->expr1->value.function.actual->next = gfc_get_actual_arglist ();\n \t  new_st->expr1->value.function.actual->next->expr = gfc_get_variable_expr (st);\n+\t  new_st->expr1->value.function.actual->next->expr->where = code->loc;\n \t  new_st->next = body->next;\n \t}\n \tif (default_case->next)"}]}