{"sha": "40a350c903278bd4c184e79d6a3c5c55c8da8346", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBhMzUwYzkwMzI3OGJkNGMxODRlNzlkNmEzYzVjNTVjOGRhODM0Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-07-13T05:53:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-07-13T05:53:28Z"}, "message": "* config/mips/mips.h (TARGET_*): Boolify.\n\nFrom-SVN: r84601", "tree": {"sha": "7aa0cb6a14d78126aaae89ce80a7b7914e948cf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aa0cb6a14d78126aaae89ce80a7b7914e948cf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40a350c903278bd4c184e79d6a3c5c55c8da8346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40a350c903278bd4c184e79d6a3c5c55c8da8346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40a350c903278bd4c184e79d6a3c5c55c8da8346", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40a350c903278bd4c184e79d6a3c5c55c8da8346/comments", "author": null, "committer": null, "parents": [{"sha": "f6a874ac425769d67bd9a0a0cf66719d7ae1bef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a874ac425769d67bd9a0a0cf66719d7ae1bef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6a874ac425769d67bd9a0a0cf66719d7ae1bef7"}], "stats": {"total": 67, "additions": 36, "deletions": 31}, "files": [{"sha": "7caaa7f2e0ee16838d5e3ea00c591780ea795cb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a350c903278bd4c184e79d6a3c5c55c8da8346/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a350c903278bd4c184e79d6a3c5c55c8da8346/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40a350c903278bd4c184e79d6a3c5c55c8da8346", "patch": "@@ -1,3 +1,7 @@\n+2004-07-13  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (TARGET_*): Boolify.\n+\n 2004-07-12  James E Wilson  <wilson@specifixinc.com>\n \n \t* Makefile.in (AR): Use @AR@ not ar."}, {"sha": "7c411b176cd664a87edeab05c3c2d0b68df9a8ae", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40a350c903278bd4c184e79d6a3c5c55c8da8346/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40a350c903278bd4c184e79d6a3c5c55c8da8346/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=40a350c903278bd4c184e79d6a3c5c55c8da8346", "patch": "@@ -182,82 +182,83 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define MASK_MIPS_TFILE\t0\t\t/* flag for mips-tfile usage */\n \n \t\t\t\t\t/* r4000 64 bit sizes */\n-#define TARGET_INT64\t\t(target_flags & MASK_INT64)\n-#define TARGET_LONG64\t\t(target_flags & MASK_LONG64)\n-#define TARGET_FLOAT64\t\t(target_flags & MASK_FLOAT64)\n-#define TARGET_64BIT\t\t(target_flags & MASK_64BIT)\n+#define TARGET_INT64\t\t((target_flags & MASK_INT64) != 0)\n+#define TARGET_LONG64\t\t((target_flags & MASK_LONG64) != 0)\n+#define TARGET_FLOAT64\t\t((target_flags & MASK_FLOAT64) != 0)\n+#define TARGET_64BIT\t\t((target_flags & MASK_64BIT) != 0)\n \n \t\t\t\t\t/* Mips vs. GNU linker */\n-#define TARGET_SPLIT_ADDRESSES\t(target_flags & MASK_SPLIT_ADDR)\n+#define TARGET_SPLIT_ADDRESSES\t((target_flags & MASK_SPLIT_ADDR) != 0)\n \n \t\t\t\t\t/* Mips vs. GNU assembler */\n-#define TARGET_GAS\t\t(target_flags & MASK_GAS)\n+#define TARGET_GAS\t\t((target_flags & MASK_GAS) != 0)\n #define TARGET_MIPS_AS\t\t(!TARGET_GAS)\n \n \t\t\t\t\t/* Debug Modes */\n-#define TARGET_DEBUG_MODE\t(target_flags & MASK_DEBUG)\n-#define TARGET_DEBUG_D_MODE\t(target_flags & MASK_DEBUG_D)\n+#define TARGET_DEBUG_MODE\t((target_flags & MASK_DEBUG) != 0)\n+#define TARGET_DEBUG_D_MODE\t((target_flags & MASK_DEBUG_D) != 0)\n \n \t\t\t\t\t/* Reg. Naming in .s ($21 vs. $a0) */\n-#define TARGET_NAME_REGS\t(target_flags & MASK_NAME_REGS)\n+#define TARGET_NAME_REGS\t((target_flags & MASK_NAME_REGS) != 0)\n \n \t\t\t\t\t/* call memcpy instead of inline code */\n-#define TARGET_MEMCPY\t\t(target_flags & MASK_MEMCPY)\n+#define TARGET_MEMCPY\t\t((target_flags & MASK_MEMCPY) != 0)\n \n \t\t\t\t\t/* .abicalls, etc from Pyramid V.4 */\n-#define TARGET_ABICALLS\t\t(target_flags & MASK_ABICALLS)\n-#define TARGET_XGOT\t\t(target_flags & MASK_XGOT)\n+#define TARGET_ABICALLS\t\t((target_flags & MASK_ABICALLS) != 0)\n+#define TARGET_XGOT\t\t((target_flags & MASK_XGOT) != 0)\n \n \t\t\t\t\t/* software floating point */\n-#define TARGET_SOFT_FLOAT\t(target_flags & MASK_SOFT_FLOAT)\n+#define TARGET_SOFT_FLOAT\t((target_flags & MASK_SOFT_FLOAT) != 0)\n #define TARGET_HARD_FLOAT\t(! TARGET_SOFT_FLOAT)\n \n \t\t\t\t\t/* always call through a register */\n-#define TARGET_LONG_CALLS\t(target_flags & MASK_LONG_CALLS)\n+#define TARGET_LONG_CALLS\t((target_flags & MASK_LONG_CALLS) != 0)\n \n \t\t\t\t\t/* for embedded systems, optimize for\n \t\t\t\t\t   reduced RAM space instead of for\n \t\t\t\t\t   fastest code.  */\n-#define TARGET_EMBEDDED_DATA\t(target_flags & MASK_EMBEDDED_DATA)\n+#define TARGET_EMBEDDED_DATA\t((target_flags & MASK_EMBEDDED_DATA) != 0)\n \n \t\t\t\t\t/* always store uninitialized const\n \t\t\t\t\t   variables in rodata, requires\n \t\t\t\t\t   TARGET_EMBEDDED_DATA.  */\n-#define TARGET_UNINIT_CONST_IN_RODATA\t(target_flags & MASK_UNINIT_CONST_IN_RODATA)\n+#define TARGET_UNINIT_CONST_IN_RODATA\t\\\n+\t\t\t((target_flags & MASK_UNINIT_CONST_IN_RODATA) != 0)\n \n \t\t\t\t\t/* generate big endian code.  */\n-#define TARGET_BIG_ENDIAN\t(target_flags & MASK_BIG_ENDIAN)\n+#define TARGET_BIG_ENDIAN\t((target_flags & MASK_BIG_ENDIAN) != 0)\n \n-#define TARGET_SINGLE_FLOAT\t(target_flags & MASK_SINGLE_FLOAT)\n+#define TARGET_SINGLE_FLOAT\t((target_flags & MASK_SINGLE_FLOAT) != 0)\n #define TARGET_DOUBLE_FLOAT\t(! TARGET_SINGLE_FLOAT)\n \n-#define TARGET_MAD\t\t(target_flags & MASK_MAD)\n+#define TARGET_MAD\t\t((target_flags & MASK_MAD) != 0)\n \n-#define TARGET_FUSED_MADD\t(! (target_flags & MASK_NO_FUSED_MADD))\n+#define TARGET_FUSED_MADD\t((target_flags & MASK_NO_FUSED_MADD) == 0)\n \n-#define TARGET_4300_MUL_FIX     (target_flags & MASK_4300_MUL_FIX)\n+#define TARGET_4300_MUL_FIX     ((target_flags & MASK_4300_MUL_FIX) != 0)\n \n-#define TARGET_CHECK_ZERO_DIV   (!(target_flags & MASK_NO_CHECK_ZERO_DIV))\n+#define TARGET_CHECK_ZERO_DIV   ((target_flags & MASK_NO_CHECK_ZERO_DIV) == 0)\n \n-#define TARGET_BRANCHLIKELY\t(target_flags & MASK_BRANCHLIKELY)\n+#define TARGET_BRANCHLIKELY\t((target_flags & MASK_BRANCHLIKELY) != 0)\n \n-#define TARGET_FIX_SB1\t\t(target_flags & MASK_FIX_SB1)\n+#define TARGET_FIX_SB1\t\t((target_flags & MASK_FIX_SB1) != 0)\n \n \t\t\t\t\t/* Work around R4000 errata.  */\n-#define TARGET_FIX_R4000\t(target_flags & MASK_FIX_R4000)\n+#define TARGET_FIX_R4000\t((target_flags & MASK_FIX_R4000) != 0)\n \n \t\t\t\t\t/* Work around R4400 errata.  */\n-#define TARGET_FIX_R4400\t(target_flags & MASK_FIX_R4400)\n-#define TARGET_FIX_VR4120\t(target_flags & MASK_FIX_VR4120)\n-#define TARGET_VR4130_ALIGN\t(target_flags & MASK_VR4130_ALIGN)\n+#define TARGET_FIX_R4400\t((target_flags & MASK_FIX_R4400) != 0)\n+#define TARGET_FIX_VR4120\t((target_flags & MASK_FIX_VR4120) != 0)\n+#define TARGET_VR4130_ALIGN\t((target_flags & MASK_VR4130_ALIGN) != 0)\n \n-#define TARGET_FP_EXCEPTIONS\t(target_flags & MASK_FP_EXCEPTIONS)\n+#define TARGET_FP_EXCEPTIONS\t((target_flags & MASK_FP_EXCEPTIONS) != 0)\n \n /* True if we should use NewABI-style relocation operators for\n    symbolic addresses.  This is never true for mips16 code,\n    which has its own conventions.  */\n \n-#define TARGET_EXPLICIT_RELOCS\t(target_flags & MASK_EXPLICIT_RELOCS)\n+#define TARGET_EXPLICIT_RELOCS\t((target_flags & MASK_EXPLICIT_RELOCS) != 0)\n \n \n /* True if the call patterns should be split into a jalr followed by\n@@ -303,7 +304,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define TARGET_GPWORD (TARGET_ABICALLS && !(TARGET_NEWABI && TARGET_IRIX))\n \n \t\t\t\t\t/* Generate mips16 code */\n-#define TARGET_MIPS16\t\t(target_flags & MASK_MIPS16)\n+#define TARGET_MIPS16\t\t((target_flags & MASK_MIPS16) != 0)\n \n /* Generic ISA defines.  */\n #define ISA_MIPS1\t\t    (mips_isa == 1)"}]}