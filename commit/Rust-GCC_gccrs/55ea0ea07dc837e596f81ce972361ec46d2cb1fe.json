{"sha": "55ea0ea07dc837e596f81ce972361ec46d2cb1fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVlYTBlYTA3ZGM4MzdlNTk2ZjgxY2U5NzIzNjFlYzQ2ZDJjYjFmZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-22T04:13:36Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-22T04:13:36Z"}, "message": "compiler, runtime: better stack trace for `go f()` where f is nil\n    \n    The test for this is TestGoNil in the runtime package, which we don't\n    run yet but will run with a subsequent gotools patch.\n    \n    Updates golang/go#8045\n    \n    Reviewed-on: https://go-review.googlesource.com/46392\n\nFrom-SVN: r249494", "tree": {"sha": "b318ec0d3a71e91a29241ff9dbe39c796b084a0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b318ec0d3a71e91a29241ff9dbe39c796b084a0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55ea0ea07dc837e596f81ce972361ec46d2cb1fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ea0ea07dc837e596f81ce972361ec46d2cb1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55ea0ea07dc837e596f81ce972361ec46d2cb1fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ea0ea07dc837e596f81ce972361ec46d2cb1fe/comments", "author": null, "committer": null, "parents": [{"sha": "bc216de9f65527cd80fd02a645da036e8bfb7818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc216de9f65527cd80fd02a645da036e8bfb7818", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc216de9f65527cd80fd02a645da036e8bfb7818"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "9a23eb98b98ec140e34af414a7df7efb20922f72", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ea0ea07dc837e596f81ce972361ec46d2cb1fe/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ea0ea07dc837e596f81ce972361ec46d2cb1fe/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=55ea0ea07dc837e596f81ce972361ec46d2cb1fe", "patch": "@@ -1,4 +1,4 @@\n-dac4bb4f4ed8e7f2939d45439048dec2f6db14cf\n+075e67bdbcb730669c1af1aa2d53bb77cbb2a3c5\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a04a1a36ee31ef07b861cd3b887f7e0c2e180550", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ea0ea07dc837e596f81ce972361ec46d2cb1fe/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ea0ea07dc837e596f81ce972361ec46d2cb1fe/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=55ea0ea07dc837e596f81ce972361ec46d2cb1fe", "patch": "@@ -3379,6 +3379,9 @@ static const int RUNTIME_ERROR_MAKE_CHAN_OUT_OF_BOUNDS = 9;\n // Division by zero.\n static const int RUNTIME_ERROR_DIVISION_BY_ZERO = 10;\n \n+// Go statement with nil function.\n+static const int RUNTIME_ERROR_GO_NIL = 11;\n+\n // This is used by some of the langhooks.\n extern Gogo* go_get_gogo();\n "}, {"sha": "e59217672866ce70b9501c71d6a7debe158eeb40", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ea0ea07dc837e596f81ce972361ec46d2cb1fe/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ea0ea07dc837e596f81ce972361ec46d2cb1fe/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=55ea0ea07dc837e596f81ce972361ec46d2cb1fe", "patch": "@@ -2201,6 +2201,15 @@ Thunk_statement::simplify_statement(Gogo* gogo, Named_object* function,\n \n   Location location = this->location();\n \n+  bool is_constant_function = this->is_constant_function();\n+  Temporary_statement* fn_temp = NULL;\n+  if (!is_constant_function)\n+    {\n+      fn_temp = Statement::make_temporary(NULL, fn, location);\n+      block->insert_statement_before(block->statements()->size() - 1, fn_temp);\n+      fn = Expression::make_temporary_reference(fn_temp, location);\n+    }\n+\n   std::string thunk_name = Gogo::thunk_name();\n \n   // Build the thunk.\n@@ -2212,7 +2221,7 @@ Thunk_statement::simplify_statement(Gogo* gogo, Named_object* function,\n   // argument to the thunk.\n \n   Expression_list* vals = new Expression_list();\n-  if (!this->is_constant_function())\n+  if (!is_constant_function)\n     vals->push_back(fn);\n \n   if (interface_method != NULL)\n@@ -2238,6 +2247,23 @@ Thunk_statement::simplify_statement(Gogo* gogo, Named_object* function,\n   // Allocate the initialized struct on the heap.\n   constructor = Expression::make_heap_expression(constructor, location);\n \n+  // Throw an error if the function is nil.  This is so that for `go\n+  // nil` we get a backtrace from the go statement, rather than a\n+  // useless backtrace from the brand new goroutine.\n+  Expression* param = constructor;\n+  if (!is_constant_function)\n+    {\n+      fn = Expression::make_temporary_reference(fn_temp, location);\n+      Expression* nil = Expression::make_nil(location);\n+      Expression* isnil = Expression::make_binary(OPERATOR_EQEQ, fn, nil,\n+\t\t\t\t\t\t  location);\n+      Expression* crash = gogo->runtime_error(RUNTIME_ERROR_GO_NIL, location);\n+      crash = Expression::make_conditional(isnil, crash,\n+\t\t\t\t\t   Expression::make_nil(location),\n+\t\t\t\t\t   location);\n+      param = Expression::make_compound(crash, constructor, location);\n+    }\n+\n   // Look up the thunk.\n   Named_object* named_thunk = gogo->lookup(thunk_name, NULL);\n   go_assert(named_thunk != NULL && named_thunk->is_function());\n@@ -2246,7 +2272,7 @@ Thunk_statement::simplify_statement(Gogo* gogo, Named_object* function,\n   Expression* func = Expression::make_func_reference(named_thunk, NULL,\n \t\t\t\t\t\t     location);\n   Expression_list* params = new Expression_list();\n-  params->push_back(constructor);\n+  params->push_back(param);\n   Call_expression* call = Expression::make_call(func, params, false, location);\n \n   // Build the simple go or defer statement."}, {"sha": "4f563fc9ed5e37e8b1a059ac8d33dc7e63a54c4d", "filename": "libgo/runtime/go-runtime-error.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ea0ea07dc837e596f81ce972361ec46d2cb1fe/libgo%2Fruntime%2Fgo-runtime-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ea0ea07dc837e596f81ce972361ec46d2cb1fe/libgo%2Fruntime%2Fgo-runtime-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-runtime-error.c?ref=55ea0ea07dc837e596f81ce972361ec46d2cb1fe", "patch": "@@ -49,7 +49,10 @@ enum\n   MAKE_CHAN_OUT_OF_BOUNDS = 9,\n \n   /* Integer division by zero.  */\n-  DIVISION_BY_ZERO = 10\n+  DIVISION_BY_ZERO = 10,\n+\n+  /* Go statement with nil function.  */\n+  GO_NIL = 11\n };\n \n extern void __go_runtime_error () __attribute__ ((noreturn));\n@@ -84,6 +87,12 @@ __go_runtime_error (int32 i)\n     case DIVISION_BY_ZERO:\n       runtime_panicstring (\"integer divide by zero\");\n \n+    case GO_NIL:\n+      /* This one is a throw, rather than a panic.  Set throwing to\n+\t not dump full stacks.  */\n+      runtime_g()->m->throwing = -1;\n+      runtime_throw (\"go of nil func value\");\n+\n     default:\n       runtime_panicstring (\"unknown runtime error\");\n     }"}]}