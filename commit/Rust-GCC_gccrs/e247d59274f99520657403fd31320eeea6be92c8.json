{"sha": "e247d59274f99520657403fd31320eeea6be92c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0N2Q1OTI3NGY5OTUyMDY1NzQwM2ZkMzEzMjBlZWVhNmJlOTJjOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-26T13:32:32Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-27T10:04:57Z"}, "message": "Add new git-backport.py script.\n\ncontrib/ChangeLog:\n\n\t* gcc-git-customization.sh: Use git-backport.py to drop\n\tall changes for ChangeLog files.\n\t* git-backport.py: New file.", "tree": {"sha": "b8d15680af95e50803d27b874cbbaa379b034f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8d15680af95e50803d27b874cbbaa379b034f0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e247d59274f99520657403fd31320eeea6be92c8", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7OO0sACgkQTcGC3A+n\nN4XzBggAuIXVyEsNeJg2dwDmzyTpcIHZEitfXCAqGDSkO7jIIAtNn1RA6J8gE6Rd\nwXAxGkJew1mlnY7NCRgDb4bzXMTe75gdD+nD9smwkMmssgVrR37tMk7qFfJBm6/g\nxaS2IkiVKBQBUeAeQEDXm40kNHjLdNoQruTuYN/VRDPb/gQJuQgNMRtrThm/b7iK\nr9BD1gP2vWF127HoaNowZnJd4vLKTIiRqxshsQqlmWWnmWy97JoZjMDbVfilbaHC\nlBrndZisF5BiRImGNSy3kULxdy6Sja3RVhZWSl/Hu6Oi9F+WrZKI3eSmmv1nZGSa\nKEFb3Azy9wjNNL/i3Lplc0zzJ/LkLA==\n=n+13\n-----END PGP SIGNATURE-----", "payload": "tree b8d15680af95e50803d27b874cbbaa379b034f0d\nparent 8d6bae5548366a72437c58e213eba7eacd934b15\nauthor Martin Liska <mliska@suse.cz> 1590499952 +0200\ncommitter Martin Liska <mliska@suse.cz> 1590573897 +0200\n\nAdd new git-backport.py script.\n\ncontrib/ChangeLog:\n\n\t* gcc-git-customization.sh: Use git-backport.py to drop\n\tall changes for ChangeLog files.\n\t* git-backport.py: New file.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e247d59274f99520657403fd31320eeea6be92c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e247d59274f99520657403fd31320eeea6be92c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e247d59274f99520657403fd31320eeea6be92c8/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d6bae5548366a72437c58e213eba7eacd934b15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6bae5548366a72437c58e213eba7eacd934b15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d6bae5548366a72437c58e213eba7eacd934b15"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "200b81eec31f71b1b3555d87343f996e17889323", "filename": "contrib/gcc-git-customization.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e247d59274f99520657403fd31320eeea6be92c8/contrib%2Fgcc-git-customization.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e247d59274f99520657403fd31320eeea6be92c8/contrib%2Fgcc-git-customization.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-git-customization.sh?ref=e247d59274f99520657403fd31320eeea6be92c8", "patch": "@@ -26,7 +26,7 @@ git config alias.gcc-descr \\!\"f() { if test \\${1:-no} = --full; then c=\\${2:-mas\n git config alias.gcc-undescr \\!\"f() { o=\\$(git config --get gcc-config.upstream); r=\\$(echo \\$1 | sed -n 's,^r\\\\([0-9]\\\\+\\\\)-[0-9]\\\\+\\$,\\\\1,p'); n=\\$(echo \\$1 | sed -n 's,^r[0-9]\\\\+-\\\\([0-9]\\\\+\\\\)\\$,\\\\1,p'); test -z \\$r && echo Invalid id \\$1 && exit 1; h=\\$(git rev-parse --verify --quiet \\${o:-origin}/releases/gcc-\\$r); test -z \\$h && h=\\$(git rev-parse --verify --quiet \\${o:-origin}/master); p=\\$(git describe --all --match 'basepoints/gcc-'\\$r \\$h | sed -n 's,^\\\\(tags/\\\\)\\\\?basepoints/gcc-[0-9]\\\\+-\\\\([0-9]\\\\+\\\\)-g[0-9a-f]*\\$,\\\\2,p;s,^\\\\(tags/\\\\)\\\\?basepoints/gcc-[0-9]\\\\+\\$,0,p'); git rev-parse --verify \\$h~\\$(expr \\$p - \\$n); }; f\"\n \n git config alias.gcc-verify '!f() { \"`git rev-parse --show-toplevel`/contrib/gcc-changelog/git_check_commit.py\" $@; } ; f'\n-git config alias.gcc-backport '!f() { rev=$1; git cherry-pick -x $@; } ; f'\n+git config alias.gcc-backport '!f() { \"`git rev-parse --show-toplevel`/contrib/git-backport.py\" $@; } ; f'\n git config alias.gcc-mklog '!f() { \"`git rev-parse --show-toplevel`/contrib/mklog.py\" $@; } ; f'\n git config alias.gcc-commit-mklog '!f() { GCC_FORCE_MKLOG=1 git commit \"$@\"; }; f'\n "}, {"sha": "6a115c34d401ab2eb5b2cca381f3293f7884f97f", "filename": "contrib/git-backport.py", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e247d59274f99520657403fd31320eeea6be92c8/contrib%2Fgit-backport.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e247d59274f99520657403fd31320eeea6be92c8/contrib%2Fgit-backport.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgit-backport.py?ref=e247d59274f99520657403fd31320eeea6be92c8", "patch": "@@ -0,0 +1,60 @@\n+#!/usr/bin/env python3\n+\n+# Copyright (C) 2020 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02110-1301, USA.\n+\n+import argparse\n+import subprocess\n+\n+if __name__ == '__main__':\n+    parser = argparse.ArgumentParser(description='Backport a git revision and '\n+                                     'stash all ChangeLog files.')\n+    parser.add_argument('revision', help='Revision')\n+    args = parser.parse_args()\n+\n+    r = subprocess.run('git cherry-pick -x %s' % args.revision, shell=True)\n+    if r.returncode == 0:\n+        cmd = 'git show --name-only --pretty=\"\" -- \"*ChangeLog\" |' \\\n+              'xargs git checkout HEAD~'\n+        subprocess.check_output(cmd, shell=True)\n+        subprocess.check_output('git commit --amend --no-edit', shell=True)\n+    else:\n+        # 1) remove all ChangeLog files from conflicts\n+        out = subprocess.check_output('git diff --name-only --diff-filter=U',\n+                                      shell=True,\n+                                      encoding='utf8')\n+        conflicts = out.strip().split('\\n')\n+        changelogs = [c for c in conflicts if c.endswith('ChangeLog')]\n+        if changelogs:\n+            cmd = 'git checkout --theirs %s' % '\\n'.join(changelogs)\n+            subprocess.check_output(cmd, shell=True)\n+        # 2) remove all ChangeLog files from index\n+        cmd = 'git diff --name-only --diff-filter=M HEAD'\n+        out = subprocess.check_output(cmd, shell=True, encoding='utf8')\n+        out = out.strip().split('\\n')\n+        modified = [c for c in out if c.endswith('ChangeLog')]\n+        for m in modified:\n+            subprocess.check_output('git reset %s' % m, shell=True)\n+            subprocess.check_output('git checkout %s' % m, shell=True)\n+\n+        # try to continue\n+        if len(conflicts) == len(changelogs):\n+            subprocess.check_output('git cherry-pick --continue', shell=True)\n+        else:\n+            print('Please resolve all remaining file conflicts.')"}]}