{"sha": "3d9e6767939e9658260e2506e81ec32b37cba041", "node_id": "C_kwDOANBUbNoAKDNkOWU2NzY3OTM5ZTk2NTgyNjBlMjUwNmU4MWVjMzJiMzdjYmEwNDE", "commit": {"author": {"name": "Eugene Rozenfeld", "email": "erozen@microsoft.com", "date": "2021-12-03T02:37:09Z"}, "committer": {"name": "Eugene Rozenfeld", "email": "erozen@microsoft.com", "date": "2021-12-07T00:59:31Z"}, "message": "Improve AutoFDO count propagation algorithm\n\nWhen a basic block A has been annotated with a count and it has only one\nsuccessor (or predecessor) B, we can propagate the A's count to B.\nThe algoritm without this change could leave B without an annotation if B had\nother unannotated predecessors (or successors). For example, in the test case I added,\nthe loop header block was left unannotated, which prevented loop unrolling.\n\ngcc/ChangeLog:\n\t* auto-profile.c (afdo_propagate_edge): Improve count propagation algorithm.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/tree-prof/init-array.c: New test for unrolling inner loops.", "tree": {"sha": "5c370b6ac6c2e973dffae64ef2678868dee685e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c370b6ac6c2e973dffae64ef2678868dee685e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d9e6767939e9658260e2506e81ec32b37cba041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9e6767939e9658260e2506e81ec32b37cba041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d9e6767939e9658260e2506e81ec32b37cba041", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d9e6767939e9658260e2506e81ec32b37cba041/comments", "author": {"login": "erozenfeld", "id": 10624223, "node_id": "MDQ6VXNlcjEwNjI0MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/10624223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erozenfeld", "html_url": "https://github.com/erozenfeld", "followers_url": "https://api.github.com/users/erozenfeld/followers", "following_url": "https://api.github.com/users/erozenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/erozenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/erozenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erozenfeld/subscriptions", "organizations_url": "https://api.github.com/users/erozenfeld/orgs", "repos_url": "https://api.github.com/users/erozenfeld/repos", "events_url": "https://api.github.com/users/erozenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/erozenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erozenfeld", "id": 10624223, "node_id": "MDQ6VXNlcjEwNjI0MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/10624223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erozenfeld", "html_url": "https://github.com/erozenfeld", "followers_url": "https://api.github.com/users/erozenfeld/followers", "following_url": "https://api.github.com/users/erozenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/erozenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/erozenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erozenfeld/subscriptions", "organizations_url": "https://api.github.com/users/erozenfeld/orgs", "repos_url": "https://api.github.com/users/erozenfeld/repos", "events_url": "https://api.github.com/users/erozenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/erozenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a580f967e55733303d2aa29d1f9e75bed81af83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a580f967e55733303d2aa29d1f9e75bed81af83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a580f967e55733303d2aa29d1f9e75bed81af83"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "dfcd68113aaf7f3db7db3678852bdd763f074e6d", "filename": "gcc/auto-profile.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9e6767939e9658260e2506e81ec32b37cba041/gcc%2Fauto-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9e6767939e9658260e2506e81ec32b37cba041/gcc%2Fauto-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-profile.c?ref=3d9e6767939e9658260e2506e81ec32b37cba041", "patch": "@@ -1192,7 +1192,8 @@ afdo_find_equiv_class (bb_set *annotated_bb)\n /* If a basic block's count is known, and only one of its in/out edges' count\n    is unknown, its count can be calculated. Meanwhile, if all of the in/out\n    edges' counts are known, then the basic block's unknown count can also be\n-   calculated.\n+   calculated. Also, if a block has a single predecessor or successor, the block's\n+   count can be propagated to that predecessor or successor.\n    IS_SUCC is true if out edges of a basic blocks are examined.\n    Update ANNOTATED_BB accordingly.\n    Return TRUE if any basic block/edge count is changed.  */\n@@ -1208,6 +1209,7 @@ afdo_propagate_edge (bool is_succ, bb_set *annotated_bb)\n     edge e, unknown_edge = NULL;\n     edge_iterator ei;\n     int num_unknown_edge = 0;\n+    int num_edge = 0;\n     profile_count total_known_count = profile_count::zero ().afdo ();\n \n     FOR_EACH_EDGE (e, ei, is_succ ? bb->succs : bb->preds)\n@@ -1217,6 +1219,7 @@ afdo_propagate_edge (bool is_succ, bb_set *annotated_bb)\n \t  num_unknown_edge++, unknown_edge = e;\n \telse\n \t  total_known_count += AFDO_EINFO (e)->get_count ();\n+\tnum_edge++;\n       }\n \n     /* Be careful not to annotate block with no successor in special cases.  */\n@@ -1230,7 +1233,20 @@ afdo_propagate_edge (bool is_succ, bb_set *annotated_bb)\n     else if (num_unknown_edge == 1 && is_bb_annotated (bb, *annotated_bb))\n       {\n \tif (bb->count > total_known_count)\n-\t  AFDO_EINFO (unknown_edge)->set_count (bb->count - total_known_count);\n+\t  {\n+\t      profile_count new_count = bb->count - total_known_count;\n+\t      AFDO_EINFO(unknown_edge)->set_count(new_count);\n+\t      if (num_edge == 1)\n+\t\t{\n+\t\t  basic_block succ_or_pred_bb = is_succ ? unknown_edge->dest : unknown_edge->src;\n+\t\t  if (new_count > succ_or_pred_bb->count)\n+\t\t    {\n+\t\t      succ_or_pred_bb->count = new_count;\n+\t\t      if (!is_bb_annotated (succ_or_pred_bb, *annotated_bb))\n+\t\t\tset_bb_annotated (succ_or_pred_bb, annotated_bb);\n+\t\t    }\n+\t\t}\n+\t   }\n \telse\n \t  AFDO_EINFO (unknown_edge)->set_count (profile_count::zero().afdo ());\n \tAFDO_EINFO (unknown_edge)->set_annotated ();"}, {"sha": "0f7a5c84481dd45e4004cd4896bdf99260e34e8d", "filename": "gcc/testsuite/gcc.dg/tree-prof/init-array.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d9e6767939e9658260e2506e81ec32b37cba041/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Finit-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d9e6767939e9658260e2506e81ec32b37cba041/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Finit-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Finit-array.c?ref=3d9e6767939e9658260e2506e81ec32b37cba041", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-options \"-O3 -fdump-tree-cunrolli-details\" } */\n+\n+static int s[10][10][10];\n+static int d[10][10][10];\n+\n+__attribute__((noipa)) \n+int array()\n+{\n+\tint i;\n+\tregister int j, k;\n+\tfor (i = 0; i < 10; i++)\n+\t\tfor (j = 0; j < 10; j++)\n+\t\t\tfor (k = 0; k < 10; k++)\n+\t\t\t\td[i][j][k] = s[i][j][k];\n+\n+\treturn(0);\n+}\n+\n+__attribute__((noipa)) \n+void TestBench()\n+{\n+\tfor (int i = 0; i < 150000; ++i)\n+\t{ \n+\t   array();\n+\t}\n+}\n+\n+int main(int argc, char *argv[])\n+{\n+\n+\tTestBench();\n+\n+\tif (d[9][9][9] == 0 && s[9][9][9] == 0)\n+\t{\n+\t\treturn 0;\n+\t}\n+\telse\n+\t{\n+\t\treturn -1;\n+\t}\t\n+}\n+\n+/* { dg-final-use { scan-tree-dump-times \"loop with 10 iterations completely unrolled\" 2 \"cunrolli\"} } */"}]}