{"sha": "ec049fdb0fd92e48e3d8e28e23d6dc5340331796", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMwNDlmZGIwZmQ5MmU0OGUzZDhlMjhlMjNkNmRjNTM0MDMzMTc5Ng==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-07-09T00:44:34Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-07-09T00:44:34Z"}, "message": "genattr.c (internal_dfa_insn_code): Don't prototype.\n\n\t* genattr.c (internal_dfa_insn_code): Don't prototype.\n\t* genattrtab.c (attr_desc): Add `static_p' field.\n\t(expand_units): Make blockage range and ready cost functions\n\tstatic.\n\t(write_attr_get): Don't add extern prototypes in C file.  Mark\n\tstatic functions as appropriate.\n\t(find_attr, make_internal_attr): Initialize static_p.\n\t* genattrtab.h (ATTR_STATIC): New macro.\n\t* genautomata.c (output_internal_reset_func): Mark output function\n\tas inline.\n\t(make_internal_dfa_insn_code_attr): Mark output function as static.\n\nFrom-SVN: r69116", "tree": {"sha": "de9aaefcc4ca5501862b82012e9dc7f369354405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de9aaefcc4ca5501862b82012e9dc7f369354405"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec049fdb0fd92e48e3d8e28e23d6dc5340331796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec049fdb0fd92e48e3d8e28e23d6dc5340331796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec049fdb0fd92e48e3d8e28e23d6dc5340331796", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec049fdb0fd92e48e3d8e28e23d6dc5340331796/comments", "author": null, "committer": null, "parents": [{"sha": "9e7facfd47ed8da719ee0693ffb170e5d3d21379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e7facfd47ed8da719ee0693ffb170e5d3d21379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e7facfd47ed8da719ee0693ffb170e5d3d21379"}], "stats": {"total": 55, "additions": 30, "deletions": 25}, "files": [{"sha": "6e43c3ea4468496c33cf0ea836689e4ab1f83131", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec049fdb0fd92e48e3d8e28e23d6dc5340331796/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec049fdb0fd92e48e3d8e28e23d6dc5340331796/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec049fdb0fd92e48e3d8e28e23d6dc5340331796", "patch": "@@ -1,3 +1,17 @@\n+2003-07-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* genattr.c (internal_dfa_insn_code): Don't prototype.\n+\t* genattrtab.c (attr_desc): Add `static_p' field.\n+\t(expand_units): Make blockage range and ready cost functions\n+\tstatic.\n+\t(write_attr_get): Don't add extern prototypes in C file.  Mark\n+\tstatic functions as appropriate.\n+\t(find_attr, make_internal_attr): Initialize static_p.\n+\t* genattrtab.h (ATTR_STATIC): New macro.\n+\t* genautomata.c (output_internal_reset_func): Mark output function\n+\tas inline.\n+\t(make_internal_dfa_insn_code_attr): Mark output function as static.\n+\n 2003-07-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* genattrtab.h: Add new macros for attr `special' flags."}, {"sha": "98cd08cee4d82ecf35f8cbec34cbae4891658ada", "filename": "gcc/genattr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec049fdb0fd92e48e3d8e28e23d6dc5340331796/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec049fdb0fd92e48e3d8e28e23d6dc5340331796/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=ec049fdb0fd92e48e3d8e28e23d6dc5340331796", "patch": "@@ -379,7 +379,6 @@ main (int argc, char **argv)\n       printf (\"   insns scheduling heuristics. */\\n\");\n       printf (\"extern int insn_alts (rtx);\\n\\n\");\n       printf (\"#endif\\n\\n\");\n-      printf (\"extern int internal_dfa_insn_code (rtx);\\n\\n\");\n       printf (\"/* Maximal possible number of insns waiting results being\\n\");\n       printf (\"   produced by insns whose execution is not finished. */\\n\");\n       printf (\"extern int max_insn_queue_index;\\n\\n\");"}, {"sha": "15a8afabc227dca99faa47611e35d65da5f49f2e", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec049fdb0fd92e48e3d8e28e23d6dc5340331796/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec049fdb0fd92e48e3d8e28e23d6dc5340331796/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=ec049fdb0fd92e48e3d8e28e23d6dc5340331796", "patch": "@@ -185,6 +185,7 @@ struct attr_desc\n   unsigned is_special\t: 1;\t/* Don't call `write_attr_set'.  */\n   unsigned func_units_p\t: 1;\t/* this is the function_units attribute */\n   unsigned blockage_p\t: 1;\t/* this is the blockage range function */\n+  unsigned static_p\t: 1;\t/* Make the output function static.  */\n };\n \n #define NULL_ATTR (struct attr_desc *) NULL\n@@ -2078,18 +2079,20 @@ expand_units (void)\n \t      str = attr_printf ((strlen (unit->name)\n \t\t\t\t  + sizeof \"*_unit_blockage_range\"),\n \t\t\t\t \"*%s_unit_blockage_range\", unit->name);\n-\t      make_internal_attr (str, newexp, (ATTR_BLOCKAGE|ATTR_UNSIGNED));\n+\t      make_internal_attr (str, newexp, (ATTR_STATIC|ATTR_BLOCKAGE|ATTR_UNSIGNED));\n \t    }\n \n \t  str = attr_printf (strlen (unit->name) + sizeof \"*_unit_ready_cost\",\n \t\t\t     \"*%s_unit_ready_cost\", unit->name);\n+\t  make_internal_attr (str, readycost, ATTR_STATIC);\n \t}\n       else\n-\tstr = \"*result_ready_cost\";\n-\n-      /* Make an attribute for the ready_cost function.  Simplifying\n-\t further with simplify_by_exploding doesn't win.  */\n-      make_internal_attr (str, readycost, ATTR_NONE);\n+        {\n+\t  /* Make an attribute for the ready_cost function.  Simplifying\n+\t     further with simplify_by_exploding doesn't win.  */\n+\t  str = \"*result_ready_cost\";\n+\t  make_internal_attr (str, readycost, ATTR_NONE);\n+\t}\n     }\n \n   /* For each unit that requires a conflict cost function, make an attribute\n@@ -4766,23 +4769,10 @@ write_attr_get (struct attr_desc *attr)\n      switch we will generate.  */\n   common_av = find_most_used (attr);\n \n-  /* Write out prototype of function.  */\n-  if (!attr->is_numeric)\n-    printf (\"extern enum attr_%s \", attr->name);\n-  else if (attr->unsigned_p)\n-    printf (\"extern unsigned int \");\n-  else\n-    printf (\"extern int \");\n-  /* If the attribute name starts with a star, the remainder is the name of\n-     the subroutine to use, instead of `get_attr_...'.  */\n-  if (attr->name[0] == '*')\n-    printf (\"%s (rtx);\\n\", &attr->name[1]);\n-  else\n-    printf (\"get_attr_%s (%s);\\n\", attr->name,\n-\t    (attr->is_const ? \"void\" : \"rtx\"));\n-\n   /* Write out start of function, then all values with explicit `case' lines,\n      then a `default', then the value with the most uses.  */\n+  if (attr->static_p)\n+    printf (\"static \");\n   if (!attr->is_numeric)\n     printf (\"enum attr_%s\\n\", attr->name);\n   else if (attr->unsigned_p)\n@@ -5593,7 +5583,7 @@ find_attr (const char *name, int create)\n   attr->name = attr_string (name, strlen (name));\n   attr->first_value = attr->default_val = NULL;\n   attr->is_numeric = attr->negative_ok = attr->is_const = attr->is_special = 0;\n-  attr->unsigned_p = attr->func_units_p = attr->blockage_p = 0;\n+  attr->unsigned_p = attr->func_units_p = attr->blockage_p = attr->static_p = 0;\n   attr->next = attrs[index];\n   attrs[index] = attr;\n \n@@ -5618,6 +5608,7 @@ make_internal_attr (const char *name, rtx value, int special)\n   attr->unsigned_p = (special & ATTR_UNSIGNED) != 0;\n   attr->func_units_p = (special & ATTR_FUNC_UNITS) != 0;\n   attr->blockage_p = (special & ATTR_BLOCKAGE) != 0;\n+  attr->static_p = (special & ATTR_STATIC) != 0;\n   attr->default_val = get_attr_value (value, attr, -2);\n }\n "}, {"sha": "1af43c0a191682ed2f7bae0a98571efb9a0d94c2", "filename": "gcc/genattrtab.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec049fdb0fd92e48e3d8e28e23d6dc5340331796/gcc%2Fgenattrtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec049fdb0fd92e48e3d8e28e23d6dc5340331796/gcc%2Fgenattrtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.h?ref=ec049fdb0fd92e48e3d8e28e23d6dc5340331796", "patch": "@@ -55,3 +55,4 @@ extern void write_automata (void);\n #define ATTR_UNSIGNED\t\t(1 << 2)\n #define ATTR_FUNC_UNITS\t\t(1 << 3)\n #define ATTR_BLOCKAGE\t\t(1 << 4)\n+#define ATTR_STATIC\t\t(1 << 5)"}, {"sha": "bafb2553cdef3eb4f70580ea50a8b70c52c99262", "filename": "gcc/genautomata.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec049fdb0fd92e48e3d8e28e23d6dc5340331796/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec049fdb0fd92e48e3d8e28e23d6dc5340331796/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=ec049fdb0fd92e48e3d8e28e23d6dc5340331796", "patch": "@@ -8572,7 +8572,7 @@ output_dead_lock_func (void)\n static void\n output_internal_reset_func (void)\n {\n-  fprintf (output_file, \"static void\\n%s (struct %s *%s)\\n\",\n+  fprintf (output_file, \"static inline void\\n%s (struct %s *%s)\\n\",\n \t   INTERNAL_RESET_FUNC_NAME, CHIP_NAME, CHIP_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  memset (%s, 0, sizeof (struct %s));\\n}\\n\\n\",\n \t   CHIP_PARAMETER_NAME, CHIP_NAME);\n@@ -9474,7 +9474,7 @@ make_internal_dfa_insn_code_attr (void)\n     (attr_printf (sizeof (\"*\")\n \t\t  + strlen (INTERNAL_DFA_INSN_CODE_FUNC_NAME) + 1,\n \t\t  \"*%s\", INTERNAL_DFA_INSN_CODE_FUNC_NAME),\n-     condexp, ATTR_NONE);\n+     condexp, ATTR_STATIC);\n }\n \n \f"}]}