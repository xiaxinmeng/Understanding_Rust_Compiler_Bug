{"sha": "5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZmYzM1MDA1MWViMmRiOWQ3NmJiOTgyMmVhNmI2YzY1YmJjNWZjMg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2002-02-02T05:23:34Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2002-02-02T05:23:34Z"}, "message": "Contribute regression tester scripts\n\nFrom-SVN: r49432", "tree": {"sha": "e007d075c3a60634a7e2e0dc17e212df0f3b430a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e007d075c3a60634a7e2e0dc17e212df0f3b430a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/comments", "author": null, "committer": null, "parents": [{"sha": "ce762b4bde0598e4eb99e5ba05d8a11858e39bb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce762b4bde0598e4eb99e5ba05d8a11858e39bb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce762b4bde0598e4eb99e5ba05d8a11858e39bb7"}], "stats": {"total": 344, "additions": 344, "deletions": 0}, "files": [{"sha": "adf2ce227a83f10bf51ea96dd55a4eee488b0263", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2", "patch": "@@ -1,3 +1,8 @@\n+2002-01-31  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* MAINTAINERS: Put self in as maintainer for contrib/regression\n+\tdirectory.\n+\n 2002-01-28  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* MAINTAINERS:  Update my email address."}, {"sha": "2fcbacf8e1effd3ffa92cc1c1b0ac69b3894aa99", "filename": "MAINTAINERS", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/MAINTAINERS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/MAINTAINERS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/MAINTAINERS?ref=5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2", "patch": "@@ -122,6 +122,7 @@ docs co-maintainer\tJoseph Myers\t\tjsm28@cam.ac.uk\n Pico-Java port\t\tSteve Chamberlain\tsac@transmeta.com\n RTEMS Ports\t\tJoel Sherrill\n predict.def\t\tJan Hubicka\t\tjh@suse.cz\n+contrib/regression\tGeoff Keating\t\tgeoffk@redhat.com\n \n Note individuals who maintain parts of the compiler need approval to check\n in changes outside of the parts of the compiler they maintain."}, {"sha": "5008173453494c7f7e920ec04157fab773990983", "filename": "contrib/regression/ChangeLog", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/contrib%2Fregression%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/contrib%2Fregression%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fregression%2FChangeLog?ref=5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2", "patch": "@@ -0,0 +1,9 @@\n+2002-01-31  Geoffrey Keating  <geoffk@redhat.com>\n+\n+\t* btest-gcc.sh: New file.\n+\t* objs-gcc.sh: New file.\n+\t* site.exp: New file.\n+\t* ChangeLog: New file.\n+\t* README: New file.\n+\n+"}, {"sha": "7e0e657932e5fb65f776713f950f0e467e408565", "filename": "contrib/regression/README", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/contrib%2Fregression%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/contrib%2Fregression%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fregression%2FREADME?ref=5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2", "patch": "@@ -0,0 +1,18 @@\n+This directory contains scripts that are used by the regression\n+tester, <http://people.redhat.com/geoffk/gcc-regression/>.\n+\n+The primary script is 'btest-gcc.sh'.  This is the script that is run\n+to actually test the compiler.\n+\n+'objs-gcc.sh' takes a combined tree and builds (but does not test) the\n+tools required for 'btest-gcc.sh'.  It is run periodically to update\n+the tools.  This script is followed by running 'btest-gcc.sh' using\n+the newly-build tools to check that they will not cause regressions.\n+\n+'site.exp' is what $DEJAGNU points to when the regression tester runs\n+these scripts.\n+\n+Note that any changes made here need to be approved by the regression\n+tester's maintainer (see MAINTAINERS).  The changes will be used on\n+the tester's next run, so `experimental' changes are very strongly\n+discouraged :-)."}, {"sha": "1bd7e8ca61e16e7b041eff2e4b81524e7c61cb2e", "filename": "contrib/regression/btest-gcc.sh", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/contrib%2Fregression%2Fbtest-gcc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/contrib%2Fregression%2Fbtest-gcc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fregression%2Fbtest-gcc.sh?ref=5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2", "patch": "@@ -0,0 +1,172 @@\n+#!/bin/sh\n+\n+#  Test GCC.\n+#  Copyright (C) 1999, 2000, 2001, 2002  Free Software Foundation, Inc.\n+\n+#  This program is free software; you can redistribute it and/or modify\n+#  it under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 2 of the License, or\n+#  (at your option) any later version.\n+\n+#  This program is distributed in the hope that it will be useful,\n+#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#  GNU General Public License for more details.\n+\n+#  You should have received a copy of the GNU General Public License\n+#  along with this program; if not, write to the Free Software\n+#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+\n+# INPUT:\n+# btest <target> <source> <prefix> <state> <build>\n+# TARGET is the target triplet.  It should be the same one\n+# as used in constructing PREFIX.\n+TARGET=$1\n+# SOURCE is the directory containing the toplevel configure.\n+SOURCE=$2\n+\n+# PREFIX is the directory for the --prefix option to configure.\n+#   For cross compilers, it needs to contain header files,\n+#   libraries, and binutils.  PATH should probably include\n+#   $PREFIX/bin.  \n+PREFIX=$3\n+# This script also needs to include the GDB testsuite in\n+#   $PREFIX/share/gdb-testsuite.\n+GDB_TESTSUITE=$PREFIX/share/gdb-testsuite\n+\n+# STATE is where the tester maintains its internal state,\n+#   described below.\n+STATE=$4\n+\n+# BUILD is a temporary directory that this script will\n+#   delete and recreate, containing the build tree.\n+BUILD=$5\n+\n+# you also probably need to set these variables:\n+# PATH: should contain a native gcc, and a cross gdb.\n+# DEJAGNU: should point to a site.exp suitable for testing\n+#   the compiler and debugger.\n+\n+\n+# OUTPUT: in $RESULT, one of the following keywords:\n+#   error\tthe script failed due to\n+#\t\ta misconfiguration or resource limitation\n+#   build\tthe build failed\n+#   regress-<n>\tthe build succeeded, but there were <n>\n+#\t\ttestsuite regressions, listed in $REGRESS\n+#   pass\tbuild succeeded and there were no regressions\n+RESULT=$STATE/RESULT\n+# in BUILD_LOG, the output of the build\n+BUILD_LOG=$STATE/build_log\n+# in FAILED, a list of failing testcases\n+FAILED=$STATE/failed\n+# in PASSES, the list of testcases we expect to pass\n+PASSES=$STATE/passes\n+# in REGRESS, a list of testcases we expected to pass but that failed\n+REGRESS=$STATE/regress\n+\n+# Make sure various files exist.\n+[ -d $STATE ] || mkdir $STATE\n+[ -f $PASSES ] || touch $PASSES\n+\n+# These lines should stay in this order, because\n+# that way if something is badly wrong and $RESULT can't\n+# be modified then cron will mail the error message.\n+# The reverse order could lead to the testsuite claiming that\n+# everything always passes, without running any tests.\n+echo error > $RESULT || exit 1\n+exec > $BUILD_LOG 2>&1 || exit 1\n+\n+set -x\n+\n+# Nuke $BUILD and recreate it.\n+rm -rf $BUILD $REGRESS $FAILED\n+mkdir $BUILD || exit 1\n+cd $BUILD || exit 1\n+\n+H_BUILD=`$SOURCE/config.guess || exit 1`\n+H_HOST=$H_BUILD\n+if [ $TARGET = native ] ; then\n+  H_TARGET=$H_HOST\n+else\n+  H_TARGET=$TARGET\n+fi\n+H_REAL_TARGET=`$SOURCE/config.sub $H_TARGET || exit 1`\n+\n+# TESTLOGS is the list of dejagnu .sum files that the tester should\n+# look at.\n+TESTLOGS=\"gcc/testsuite/gcc.sum\n+gcc/testsuite/g++.sum\n+gcc/testsuite/g77.sum\n+gcc/testsuite/objc.sum\n+test-gdb/gdb.sum\"\n+# $H_TARGET/libstdc++-v3/testsuite/libstdc++-v3.sum\n+\n+# Build.\n+echo build > $RESULT\n+$SOURCE/configure --prefix=$PREFIX --target=$H_TARGET || exit 1\n+if [ $H_HOST = $H_TARGET ] ; then\n+  if ! make bootstrap ; then\n+    [ -s gcc/.bad_compare ] || exit 1\n+    cat gcc/.bad_compare >> $REGRESS || exit 1\n+    make all || exit 1\n+  fi\n+else\n+  make || exit 1\n+fi\n+echo error > $RESULT || exit 1\n+\n+# Test GCC against its internal testsuite.\n+make -k check-gcc\n+\n+# Test libstd++-v3\n+make check-target-libstdc++-v3\n+\n+# Test the just-built GCC with the GDB testsuite.\n+mkdir test-gdb || exit 1\n+cd $GDB_TESTSUITE || exit 1\n+for i in gdb.* ; do\n+  if [ -d $i ] ; then\n+    mkdir $BUILD/test-gdb/$i\n+  fi\n+done\n+cd $BUILD/test-gdb || exit 1\n+echo \"set host_alias $H_HOST\" > site.exp\n+echo \"set host_triplet $H_HOST\" >> site.exp\n+echo \"set target_alias $H_TARGET\" >> site.exp\n+echo \"set target_triplet $H_REAL_TARGET\" >> site.exp\n+echo \"set build_alias $H_BUILD\" >> site.exp\n+echo \"set build_triplet $H_BUILD\" >> site.exp\n+echo \"set srcdir $GDB_TESTSUITE\" >> site.exp\n+runtest --tool gdb\n+\n+# Sanity-check the testlogs.  They should contain at least one PASS.\n+cd $BUILD || exit 1\n+for LOG in $TESTLOGS ; do\n+  if ! grep ^PASS: $LOG > /dev/null ; then\n+    echo build > $RESULT\n+    exit 1\n+  fi\n+done\n+\n+# Work out what failed\n+for LOG in $TESTLOGS ; do\n+  L=`basename $LOG`\n+  awk '/^FAIL: / { print \"'$L'\",$2; }' $LOG || exit 1\n+done | sort | uniq > $FAILED || exit 1\n+comm -12 $FAILED $PASSES >> $REGRESS || exit 1\n+NUMREGRESS=`wc -l < $REGRESS | tr -d ' '`\n+if [ $NUMREGRESS -ne 0 ] ; then\n+  echo regress-$NUMREGRESS > $RESULT\n+  exit 1\n+fi\n+\n+# It passed.  Update the state.\n+for LOG in $TESTLOGS ; do\n+  L=`basename $LOG`\n+  awk '/^PASS: / { print \"'$L'\",$2; }' $LOG || exit 1\n+done | sort | uniq | comm -23 - $FAILED > ${PASSES}~ || exit 1\n+[ -s ${PASSES}~ ] || exit 1\n+mv ${PASSES}~ ${PASSES} || exit 1\n+echo pass > $RESULT\n+exit 0"}, {"sha": "839fcffb6124a415cc7387c889428a6ab7e627d9", "filename": "contrib/regression/objs-gcc.sh", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/contrib%2Fregression%2Fobjs-gcc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/contrib%2Fregression%2Fobjs-gcc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fregression%2Fobjs-gcc.sh?ref=5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2", "patch": "@@ -0,0 +1,121 @@\n+#!/bin/sh\n+\n+#  Build tools for testing GCC.\n+#  Copyright (C) 1999, 2000, 2001, 2002  Free Software Foundation, Inc.\n+\n+#  This program is free software; you can redistribute it and/or modify\n+#  it under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 2 of the License, or\n+#  (at your option) any later version.\n+\n+#  This program is distributed in the hope that it will be useful,\n+#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#  GNU General Public License for more details.\n+\n+#  You should have received a copy of the GNU General Public License\n+#  along with this program; if not, write to the Free Software\n+#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n+\n+# INPUT:\n+# btest <target> <source> <prefix> <state> <build>\n+# TARGET is the target triplet.  It should be the same one\n+# as used in constructing PREFIX.\n+TARGET=$1\n+# SOURCE is the directory containing the toplevel configure.\n+SOURCE=$2\n+\n+# PREFIX is the directory for the --prefix option to configure.\n+PREFIX=$3\n+\n+# STATE is where the tester maintains its internal state,\n+#   described below.\n+STATE=$4\n+\n+# BUILD is a temporary directory that this script will\n+#   delete and recreate, containing the build tree.\n+BUILD=$5\n+\n+# you also probably need to set these variables:\n+# DEJAGNU: should point to a site.exp suitable for testing\n+#   the compiler and debugger.\n+\n+# OUTPUT: in $RESULT, one of the following keywords:\n+#   error\tthe script failed due to\n+#\t\ta misconfiguration or resource limitation\n+#   build\tthe build failed\n+#   regress-<n>\tthe build succeeded, but there were <n>\n+#\t\ttestsuite regressions, listed in $REGRESS\n+#   pass\tbuild succeeded and there were no regressions\n+RESULT=$STATE/RESULT\n+# in BUILD_LOG, the output of the build\n+BUILD_LOG=$STATE/build_log\n+# in FAILED, a list of failing testcases\n+FAILED=$STATE/failed\n+# in PASSES, the list of testcases we expect to pass\n+PASSES=$STATE/passes\n+# in REGRESS, a list of testcases we expected to pass but that failed\n+REGRESS=$STATE/regress\n+\n+# Make sure various files exist.\n+[ -d $STATE ] || mkdir $STATE\n+[ -f $PASSES ] || touch $PASSES\n+\n+# These lines should stay in this order, because\n+# that way if something is badly wrong and $RESULT can't\n+# be modified then cron will mail the error message.\n+# The reverse order could lead to the testsuite claiming that\n+# everything always passes, without running any tests.\n+echo error > $RESULT || exit 1\n+exec > $BUILD_LOG 2>&1 || exit 1\n+\n+set -x\n+\n+# TESTLOGS is the list of dejagnu .sum files that the tester should\n+# look at.\n+TESTLOGS=\"test/gcc/gcc.sum\n+test/g++/g++.sum\"\n+\n+# Nuke $BUILD and recreate it.\n+rm -rf $BUILD $REGRESS $FAILED\n+mkdir $BUILD $BUILD/build $BUILD/objs || exit 1\n+cd $BUILD || exit 1\n+\n+# This script used to use config.guess, but that is not how releng\n+# determines hostnames.\n+H_BUILD=`$SOURCE/config.guess || exit 1`\n+H_HOST=$H_BUILD\n+if [ $TARGET = native ] ; then\n+  H_TARGET=$H_HOST\n+else\n+  H_TARGET=$TARGET\n+fi\n+H_REAL_TARGET=`$SOURCE/config.sub $H_TARGET || exit 1`\n+H_REAL_BUILD=`$SOURCE/config.sub $H_BUILD || exit 1`\n+H_REAL_HOST=`$SOURCE/config.sub $H_HOST || exit 1`\n+\n+# Build.\n+echo build > $RESULT\n+\n+cd $BUILD/build || exit 1\n+TMP_PREFIX=$BUILD/install\n+$SOURCE/configure --prefix=$PREFIX --target=$H_TARGET || exit 1\n+if [ $H_REAL_TARGET = $H_REAL_HOST -a $H_REAL_TARGET = i686-pc-linux-gnu ]\n+ then\n+  make all-gdb all-dejagnu all-ld || exit 1\n+  make install-gdb install-dejagnu install-ld || exit 1\n+else\n+  make || exit 1\n+  make install || exit 1\n+fi\n+\n+mkdir -p $PREFIX/share/gdb-testsuite || exit 1\n+cd $SOURCE/gdb/testsuite || exit 1\n+find . -print | cpio -pdmu $PREFIX/share/gdb-testsuite || exit 1\n+# selftest.exp requires keeping old sources around, which is impractical\n+rm $PREFIX/share/gdb-testsuite/gdb.base/selftest.exp\n+# these tests seem to be broken and randomly failing\n+rm -r $PREFIX/share/gdb-testsuite/gdb.mi\n+\n+echo pass > $RESULT\n+exit 0"}, {"sha": "fa50920d2fa056d52e700527fc32d84c547f36b7", "filename": "contrib/regression/site.exp", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/contrib%2Fregression%2Fsite.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2/contrib%2Fregression%2Fsite.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fregression%2Fsite.exp?ref=5ffc350051eb2db9d76bb9822ea6b6c65bbc5fc2", "patch": "@@ -0,0 +1,18 @@\n+global target_list\n+\n+case \"$target_triplet\" in {\n+    { \"powerpc*-*eabi*\" } {\n+#\tif { [info exists tool] && $tool == \"gcc\" } {\n+#\t    set target_list { \"powerpc-sim{,-fpic}\" }\n+#\t} else {\n+\t    set target_list { \"powerpc-sim\" }\n+#\t}\n+    }\n+    { \"mips-elf\" } {\n+\tset target_list { \"mips-sim\" }\n+    }\n+\n+    default {\n+        set target_list { \"unix\" }\n+    }\n+}"}]}