{"sha": "c8fb20d8bd45a88c2f000be86936b64ba67ef8e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhmYjIwZDhiZDQ1YTg4YzJmMDAwYmU4NjkzNmI2NGJhNjdlZjhlNQ==", "commit": {"author": {"name": "Yury Gribov", "email": "tetra2005@gmail.com", "date": "2017-06-29T08:50:21Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2017-06-29T08:50:21Z"}, "message": "re PR ipa/80565 (ICE at -O2 and -O3 in 32-bit mode (not 64-bit) on x86_64-linux-gnu (in edge_badness, at ipa-inline.c:1028))\n\n2017-06-29  Yury Gribov  <tetra2005@gmail.com>\n\n\tPR bootstrap/80565\n        * ipa-cp.c (allocate_and_init_ipcp_value): Add initialization\n\tcode.\n        * ipa-inline.h\n\t(edge_growth_cache_entry::edge_growth_cache_entry): New\n\tfunction.\n        (reset_edge_growth_cache): Update to use constructor.\n\nFrom-SVN: r249771", "tree": {"sha": "89facb31679bcd9da11f2eec6fb97c63236f5429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89facb31679bcd9da11f2eec6fb97c63236f5429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8fb20d8bd45a88c2f000be86936b64ba67ef8e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8fb20d8bd45a88c2f000be86936b64ba67ef8e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8fb20d8bd45a88c2f000be86936b64ba67ef8e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8fb20d8bd45a88c2f000be86936b64ba67ef8e5/comments", "author": {"login": "yugr", "id": 1101391, "node_id": "MDQ6VXNlcjExMDEzOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1101391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yugr", "html_url": "https://github.com/yugr", "followers_url": "https://api.github.com/users/yugr/followers", "following_url": "https://api.github.com/users/yugr/following{/other_user}", "gists_url": "https://api.github.com/users/yugr/gists{/gist_id}", "starred_url": "https://api.github.com/users/yugr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yugr/subscriptions", "organizations_url": "https://api.github.com/users/yugr/orgs", "repos_url": "https://api.github.com/users/yugr/repos", "events_url": "https://api.github.com/users/yugr/events{/privacy}", "received_events_url": "https://api.github.com/users/yugr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1cc6250db088a1d2cee97acf73d917cdd6f48ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc6250db088a1d2cee97acf73d917cdd6f48ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc6250db088a1d2cee97acf73d917cdd6f48ab1"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "68129a5aafa366cfd5acca406d32498e656c2060", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8fb20d8bd45a88c2f000be86936b64ba67ef8e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8fb20d8bd45a88c2f000be86936b64ba67ef8e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8fb20d8bd45a88c2f000be86936b64ba67ef8e5", "patch": "@@ -1,3 +1,13 @@\n+2017-06-29  Yury Gribov  <tetra2005@gmail.com>\n+\n+\tPR bootstrap/80565\n+        * ipa-cp.c (allocate_and_init_ipcp_value): Add initialization\n+\tcode.\n+        * ipa-inline.h\n+\t(edge_growth_cache_entry::edge_growth_cache_entry): New\n+\tfunction.\n+        (reset_edge_growth_cache): Update to use constructor.\n+\n 2017-06-28  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/aarch64/aarch64.h (AARCH64_EXPAND_ALIGNMENT): New."}, {"sha": "ee0aa9f9c6cdb8a0bd7e307f12e667b88aed24fb", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8fb20d8bd45a88c2f000be86936b64ba67ef8e5/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8fb20d8bd45a88c2f000be86936b64ba67ef8e5/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=c8fb20d8bd45a88c2f000be86936b64ba67ef8e5", "patch": "@@ -159,6 +159,10 @@ class ipcp_value_base\n   /* Time benefit and size cost that specializing the function for this value\n      can bring about in it's callees (transitively).  */\n   int prop_time_benefit, prop_size_cost;\n+\n+  ipcp_value_base ()\n+    : local_time_benefit (0), local_size_cost (0),\n+      prop_time_benefit (0), prop_size_cost (0) {}\n };\n \n /* Describes one particular value stored in struct ipcp_lattice.  */\n@@ -188,6 +192,10 @@ class ipcp_value : public ipcp_value_base\n   /* True if this valye is currently on the topo-sort stack.  */\n   bool on_stack;\n \n+  ipcp_value()\n+    : sources (0), next (0), scc_next (0), topo_next (0),\n+      spec_node (0), dfs (0), low_link (0), on_stack (false) {}\n+\n   void add_source (cgraph_edge *cs, ipcp_value *src_val, int src_idx,\n \t\t   HOST_WIDE_INT offset);\n };"}, {"sha": "4b9a1c2191ad49c7172e38e9ffe07910ef3715e6", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8fb20d8bd45a88c2f000be86936b64ba67ef8e5/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8fb20d8bd45a88c2f000be86936b64ba67ef8e5/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=c8fb20d8bd45a88c2f000be86936b64ba67ef8e5", "patch": "@@ -28,6 +28,14 @@ struct edge_growth_cache_entry\n   sreal time, nonspec_time;\n   int size;\n   ipa_hints hints;\n+\n+  edge_growth_cache_entry()\n+    : size (0), hints (0) {}\n+\n+  edge_growth_cache_entry(int64_t time, int64_t nonspec_time,\n+\t\t\t  int size, ipa_hints hints)\n+    : time (time), nonspec_time (nonspec_time), size (size),\n+      hints (hints) {}\n };\n \n extern vec<edge_growth_cache_entry> edge_growth_cache;\n@@ -116,7 +124,7 @@ reset_edge_growth_cache (struct cgraph_edge *edge)\n {\n   if ((int)edge_growth_cache.length () > edge->uid)\n     {\n-      struct edge_growth_cache_entry zero = {0, 0, 0, 0};\n+      struct edge_growth_cache_entry zero (0, 0, 0, 0);\n       edge_growth_cache[edge->uid] = zero;\n     }\n }"}]}