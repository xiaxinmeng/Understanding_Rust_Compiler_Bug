{"sha": "2010cdcdd7bfd38c480fdffc147e875b7f277a70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAxMGNkY2RkN2JmZDM4YzQ4MGZkZmZjMTQ3ZTg3NWI3ZjI3N2E3MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-09-16T15:41:45Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-09-16T15:41:45Z"}, "message": "re PR c++/21514 ([DR 488] templates and anonymous enum)\n\n\tPR c++/21514\n\t* pt.c (check_instantiated_args): Treat uses of anonymous types as\n\tcausing type-deduction failure.\n\n\tPR c++/21514\n\t* g++.dg/template/crash19.C: Remove dg-error marker.\n\t* g++.dg/template/local4.C: New test.\n\nFrom-SVN: r104344", "tree": {"sha": "5f4499835199488c0191de94813c9caef0ece492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f4499835199488c0191de94813c9caef0ece492"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2010cdcdd7bfd38c480fdffc147e875b7f277a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2010cdcdd7bfd38c480fdffc147e875b7f277a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2010cdcdd7bfd38c480fdffc147e875b7f277a70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2010cdcdd7bfd38c480fdffc147e875b7f277a70/comments", "author": null, "committer": null, "parents": [{"sha": "6a4e47783a529fabc08694929bb74efa5b39f814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4e47783a529fabc08694929bb74efa5b39f814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4e47783a529fabc08694929bb74efa5b39f814"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "91dc40597f2b88cdcc16de8213e596a3adfb6207", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2010cdcdd7bfd38c480fdffc147e875b7f277a70/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2010cdcdd7bfd38c480fdffc147e875b7f277a70/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2010cdcdd7bfd38c480fdffc147e875b7f277a70", "patch": "@@ -1,3 +1,9 @@\n+2005-09-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/21514\n+\t* pt.c (check_instantiated_args): Treat uses of anonymous types as\n+\tcausing type-deduction failure.\n+\n 2005-09-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/23357"}, {"sha": "be2f0312bdf9d7deab7f64f6b88cf3c57ce0427b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2010cdcdd7bfd38c480fdffc147e875b7f277a70/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2010cdcdd7bfd38c480fdffc147e875b7f277a70/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2010cdcdd7bfd38c480fdffc147e875b7f277a70", "patch": "@@ -8967,7 +8967,6 @@ check_instantiated_args (tree tmpl, tree args, tsubst_flags_t complain)\n {\n   int ix, len = DECL_NTPARMS (tmpl);\n   bool result = false;\n-  bool error_p = complain & tf_error;\n \n   for (ix = 0; ix != len; ix++)\n     {\n@@ -8984,12 +8983,16 @@ check_instantiated_args (tree tmpl, tree args, tsubst_flags_t complain)\n \n \t  if (nt)\n \t    {\n-\t      if (TYPE_ANONYMOUS_P (nt))\n-\t\terror (\"%qT is/uses anonymous type\", t);\n-\t      else\n-\t\terror (\"%qT uses local type %qT\", t, nt);\n+\t      /* DR 488 makes use of a type with no linkage causes\n+\t\t type deduction to fail.  */ \n+\t      if (complain & tf_error)\n+\t\t{\n+\t\t  if (TYPE_ANONYMOUS_P (nt))\n+\t\t    error (\"%qT is/uses anonymous type\", t);\n+\t\t  else\n+\t\t    error (\"%qT uses local type %qT\", t, nt);\n+\t\t}\n \t      result = true;\n-\t      error_p = true;\n \t    }\n \t  /* In order to avoid all sorts of complications, we do not\n \t     allow variably-modified types as template arguments.  */\n@@ -9011,7 +9014,7 @@ check_instantiated_args (tree tmpl, tree args, tsubst_flags_t complain)\n \t  result = true;\n \t}\n     }\n-  if (result && error_p)\n+  if (result && (complain & tf_error))\n     error (\"  trying to instantiate %qD\", tmpl);\n   return result;\n }"}, {"sha": "6103389ca2be1c61fe3497a17e74fac6613d69f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2010cdcdd7bfd38c480fdffc147e875b7f277a70/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2010cdcdd7bfd38c480fdffc147e875b7f277a70/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2010cdcdd7bfd38c480fdffc147e875b7f277a70", "patch": "@@ -1,3 +1,9 @@\n+2005-09-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/21514\n+\t* g++.dg/template/crash19.C: Remove dg-error marker.\n+\t* g++.dg/template/local4.C: New test.\n+\n 2005-09-16  Paul Brook  <paul@codesourcery.com>\n \n \tPR fortran/23906"}, {"sha": "a28827f31ac80ced0e4cffb3bdaef2c98719ee3f", "filename": "gcc/testsuite/g++.dg/template/crash19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2010cdcdd7bfd38c480fdffc147e875b7f277a70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2010cdcdd7bfd38c480fdffc147e875b7f277a70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash19.C?ref=2010cdcdd7bfd38c480fdffc147e875b7f277a70", "patch": "@@ -9,7 +9,7 @@ template <class T>\n struct X { \n     enum { SIXTY_FOUR=64 }; \n     struct node {\n-      unsigned char *ptr[sizeof(T)*SIXTY_FOUR]; // { dg-error \"\" }\n+      unsigned char *ptr[sizeof(T)*SIXTY_FOUR];\n         void d() {}\n     };\n     node *head; "}, {"sha": "cfa37364975b27430ef47271e71d67aee7b3b33c", "filename": "gcc/testsuite/g++.dg/template/local4.C", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2010cdcdd7bfd38c480fdffc147e875b7f277a70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2010cdcdd7bfd38c480fdffc147e875b7f277a70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal4.C?ref=2010cdcdd7bfd38c480fdffc147e875b7f277a70", "patch": "@@ -4,8 +4,5 @@ template <typename T> void foo() {}\n \n int main () {\n   struct S {};\n-  // We do not simply use \"local|match\" on line 10 because we want to\n-  // make sure that \"local\" appears.\n-  // { dg-error \"local\" \"local\" { target *-*-* } 10 }\n-  foo<S> (); // { dg-error \"trying|match\" } \n+  foo<S> (); // { dg-error \"match\" } \n }"}]}