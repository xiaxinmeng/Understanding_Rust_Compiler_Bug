{"sha": "2e7f5dc0e434647df5e36133a81500139635e131", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU3ZjVkYzBlNDM0NjQ3ZGY1ZTM2MTMzYTgxNTAwMTM5NjM1ZTEzMQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-05-13T13:30:18Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-05-13T13:30:18Z"}, "message": "Change ix86_save_reg/ix86_hard_regno_mode_ok to return bool.\n\n2011-05-13  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (ix86_save_reg): Change return type to\n\tbool.\n\t(ix86_hard_regno_mode_ok): Change return value to bool.  Use\n\tcan_create_pseudo_p ().\n\nFrom-SVN: r173731", "tree": {"sha": "5caee0bedd5c634228bef49f6c5f9a93534704ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5caee0bedd5c634228bef49f6c5f9a93534704ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e7f5dc0e434647df5e36133a81500139635e131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e7f5dc0e434647df5e36133a81500139635e131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e7f5dc0e434647df5e36133a81500139635e131", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e7f5dc0e434647df5e36133a81500139635e131/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e834e95c36679e28a45cdd27b6d59ffd6b9c00f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e834e95c36679e28a45cdd27b6d59ffd6b9c00f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e834e95c36679e28a45cdd27b6d59ffd6b9c00f1"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "62015642ef5cda46964e6cae123ab00e0bb299c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e7f5dc0e434647df5e36133a81500139635e131/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e7f5dc0e434647df5e36133a81500139635e131/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e7f5dc0e434647df5e36133a81500139635e131", "patch": "@@ -1,3 +1,10 @@\n+2011-05-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (ix86_save_reg): Change return type to\n+\tbool.\n+\t(ix86_hard_regno_mode_ok): Change return value to bool.  Use\n+\tcan_create_pseudo_p ().\n+\n 2011-05-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/48978"}, {"sha": "a23367f553a01629d44716c2bf749861e0270075", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e7f5dc0e434647df5e36133a81500139635e131/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e7f5dc0e434647df5e36133a81500139635e131/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2e7f5dc0e434647df5e36133a81500139635e131", "patch": "@@ -9001,8 +9001,9 @@ ix86_select_alt_pic_regnum (void)\n   return INVALID_REGNUM;\n }\n \n-/* Return 1 if we need to save REGNO.  */\n-static int\n+/* Return TRUE if we need to save REGNO.  */\n+\n+static bool\n ix86_save_reg (unsigned int regno, bool maybe_eh_return)\n {\n   if (pic_offset_table_rtx\n@@ -9011,11 +9012,7 @@ ix86_save_reg (unsigned int regno, bool maybe_eh_return)\n \t  || crtl->profile\n \t  || crtl->calls_eh_return\n \t  || crtl->uses_const_pool))\n-    {\n-      if (ix86_select_alt_pic_regnum () != INVALID_REGNUM)\n-\treturn 0;\n-      return 1;\n-    }\n+    return ix86_select_alt_pic_regnum () == INVALID_REGNUM;\n \n   if (crtl->calls_eh_return && maybe_eh_return)\n     {\n@@ -9026,12 +9023,12 @@ ix86_save_reg (unsigned int regno, bool maybe_eh_return)\n \t  if (test == INVALID_REGNUM)\n \t    break;\n \t  if (test == regno)\n-\t    return 1;\n+\t    return true;\n \t}\n     }\n \n   if (crtl->drap_reg && regno == REGNO (crtl->drap_reg))\n-    return 1;\n+    return true;\n \n   return (df_regs_ever_live_p (regno)\n \t  && !call_used_regs[regno]\n@@ -28936,7 +28933,8 @@ ix86_register_move_cost (enum machine_mode mode, reg_class_t class1_i,\n   return 2;\n }\n \n-/* Return 1 if hard register REGNO can hold a value of machine-mode MODE.  */\n+/* Return TRUE if hard register REGNO can hold a value of machine-mode\n+   MODE.  */\n \n bool\n ix86_hard_regno_mode_ok (int regno, enum machine_mode mode)\n@@ -28947,7 +28945,7 @@ ix86_hard_regno_mode_ok (int regno, enum machine_mode mode)\n   if (GET_MODE_CLASS (mode) == MODE_CC\n       || GET_MODE_CLASS (mode) == MODE_RANDOM\n       || GET_MODE_CLASS (mode) == MODE_PARTIAL_INT)\n-    return 0;\n+    return false;\n   if (FP_REGNO_P (regno))\n     return VALID_FP_MODE_P (mode);\n   if (SSE_REGNO_P (regno))\n@@ -28977,26 +28975,26 @@ ix86_hard_regno_mode_ok (int regno, enum machine_mode mode)\n       /* Take care for QImode values - they can be in non-QI regs,\n \t but then they do cause partial register stalls.  */\n       if (regno <= BX_REG || TARGET_64BIT)\n-\treturn 1;\n+\treturn true;\n       if (!TARGET_PARTIAL_REG_STALL)\n-\treturn 1;\n-      return reload_in_progress || reload_completed;\n+\treturn true;\n+      return !can_create_pseudo_p ();\n     }\n   /* We handle both integer and floats in the general purpose registers.  */\n   else if (VALID_INT_MODE_P (mode))\n-    return 1;\n+    return true;\n   else if (VALID_FP_MODE_P (mode))\n-    return 1;\n+    return true;\n   else if (VALID_DFP_MODE_P (mode))\n-    return 1;\n+    return true;\n   /* Lots of MMX code casts 8 byte vector modes to DImode.  If we then go\n      on to use that value in smaller contexts, this can easily force a\n      pseudo to be allocated to GENERAL_REGS.  Since this is no worse than\n      supporting DImode, allow it.  */\n   else if (VALID_MMX_REG_MODE_3DNOW (mode) || VALID_MMX_REG_MODE (mode))\n-    return 1;\n+    return true;\n \n-  return 0;\n+  return false;\n }\n \n /* A subroutine of ix86_modes_tieable_p.  Return true if MODE is a"}]}