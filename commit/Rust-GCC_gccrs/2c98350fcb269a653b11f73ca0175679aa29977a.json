{"sha": "2c98350fcb269a653b11f73ca0175679aa29977a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM5ODM1MGZjYjI2OWE2NTNiMTFmNzNjYTAxNzU2NzlhYTI5OTc3YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-12-03T18:06:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-12-03T18:06:24Z"}, "message": "Mark constant-sized objects as addressable if they have poly-int accesses\n\nIf SVE code is written for a specific vector length, it might load from\nor store to fixed-sized objects.  This needs to work even without\n-msve-vector-bits=N (which should never be needed for correctness).\n\nThere's no way of handling a direct poly-int sized reference to a\nfixed-size register; it would have to go via memory.  And in that\ncase it's more efficient to mark the fixed-size object as\naddressable from the outset, like we do for array references\nwith non-constant indices.\n\n2019-12-03  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* cfgexpand.c (discover_nonconstant_array_refs_r): If an access\n\twith POLY_INT_CST size is made to a fixed-size object, force the\n\tobject to live in memory.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/general/deref_1.c: New test.\n\nFrom-SVN: r278941", "tree": {"sha": "534ac9a3aa65dae82b9fb9147b106d537ec913b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/534ac9a3aa65dae82b9fb9147b106d537ec913b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c98350fcb269a653b11f73ca0175679aa29977a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c98350fcb269a653b11f73ca0175679aa29977a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c98350fcb269a653b11f73ca0175679aa29977a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c98350fcb269a653b11f73ca0175679aa29977a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e93b5262fdec906660ce7b7763d0e76e705f0803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93b5262fdec906660ce7b7763d0e76e705f0803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93b5262fdec906660ce7b7763d0e76e705f0803"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "1b246171d46825af89a8e22e0cdbc3e8202bf716", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c98350fcb269a653b11f73ca0175679aa29977a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c98350fcb269a653b11f73ca0175679aa29977a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c98350fcb269a653b11f73ca0175679aa29977a", "patch": "@@ -1,3 +1,9 @@\n+2019-12-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* cfgexpand.c (discover_nonconstant_array_refs_r): If an access\n+\twith POLY_INT_CST size is made to a fixed-size object, force the\n+\tobject to live in memory.\n+\n 2019-12-03  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn-valu.md: Change \"vcondu\" patterns to use VEC_1REG_MODE"}, {"sha": "bb31fef70143307380a48b8b7f4178a865e1a2c3", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c98350fcb269a653b11f73ca0175679aa29977a/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c98350fcb269a653b11f73ca0175679aa29977a/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=2c98350fcb269a653b11f73ca0175679aa29977a", "patch": "@@ -6133,6 +6133,21 @@ discover_nonconstant_array_refs_r (tree * tp, int *walk_subtrees,\n \n       *walk_subtrees = 0;\n     }\n+  /* References of size POLY_INT_CST to a fixed-size object must go\n+     through memory.  It's more efficient to force that here than\n+     to create temporary slots on the fly.  */\n+  else if ((TREE_CODE (t) == MEM_REF || TREE_CODE (t) == TARGET_MEM_REF)\n+\t   && TYPE_SIZE (TREE_TYPE (t))\n+\t   && POLY_INT_CST_P (TYPE_SIZE (TREE_TYPE (t))))\n+    {\n+      tree base = get_base_address (t);\n+      if (base\n+\t  && DECL_P (base)\n+\t  && DECL_MODE (base) != BLKmode\n+\t  && GET_MODE_SIZE (DECL_MODE (base)).is_constant ())\n+\tTREE_ADDRESSABLE (base) = 1;\n+      *walk_subtrees = 0;\n+    }\n \n   return NULL_TREE;\n }"}, {"sha": "028755bb51a864efad8dbb5ea6cdf1f0d9301f52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c98350fcb269a653b11f73ca0175679aa29977a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c98350fcb269a653b11f73ca0175679aa29977a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c98350fcb269a653b11f73ca0175679aa29977a", "patch": "@@ -1,3 +1,7 @@\n+2019-12-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general/deref_1.c: New test.\n+\n 2019-12-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91363 - P0960R3: Parenthesized initialization of aggregates."}, {"sha": "99d831936a54f225d9717e8c71a74cca69449e24", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/general/deref_1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c98350fcb269a653b11f73ca0175679aa29977a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fderef_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c98350fcb269a653b11f73ca0175679aa29977a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fderef_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fgeneral%2Fderef_1.c?ref=2c98350fcb269a653b11f73ca0175679aa29977a", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-options \"-O2\" } */\n+\n+#include <arm_sve.h>\n+\n+uint64_t\n+f1 (int32_t *x, int32_t *y)\n+{\n+  union { uint64_t x; char c[8]; } u;\n+  svbool_t pg = svptrue_b32 ();\n+  *(svbool_t *)&u.c[0] = svcmpeq (pg, svld1 (pg, x), 0);\n+  *(svbool_t *)&u.c[4] = svcmpeq (pg, svld1 (pg, y), 1);\n+  return u.x;\n+}\n+\n+typedef unsigned int v4si __attribute__((vector_size(16)));\n+\n+/* The aliasing is somewhat dubious here, but it must compile.  */\n+\n+v4si\n+f2 (void)\n+{\n+  v4si res;\n+  *(svuint32_t *) &res = svindex_u32 (0, 1);\n+  return res;\n+}"}]}