{"sha": "8259d36468b77548cec3e35406201d8fb384eafb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI1OWQzNjQ2OGI3NzU0OGNlYzNlMzU0MDYyMDFkOGZiMzg0ZWFmYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-06-19T21:24:58Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-06-19T21:24:58Z"}, "message": "compiler: reject incorrect unsafe.Offsetof expressions.\n\nThe x.Field argument to Offsetof may not involve hidden\ndereferences of embedded pointer fields.\n\nAlso correct uninitialized implicit_ field.\n\nFrom-SVN: r200221", "tree": {"sha": "34cc2bd8b95185769b746c126f7bc3aaedf4bbf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34cc2bd8b95185769b746c126f7bc3aaedf4bbf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8259d36468b77548cec3e35406201d8fb384eafb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8259d36468b77548cec3e35406201d8fb384eafb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8259d36468b77548cec3e35406201d8fb384eafb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8259d36468b77548cec3e35406201d8fb384eafb/comments", "author": null, "committer": null, "parents": [{"sha": "a09f1a766b297f1e248c86b3d2795c1501a506ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09f1a766b297f1e248c86b3d2795c1501a506ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09f1a766b297f1e248c86b3d2795c1501a506ef"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "adadfbbebb8f58649516cd658ffd2d12a47846f5", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8259d36468b77548cec3e35406201d8fb384eafb/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8259d36468b77548cec3e35406201d8fb384eafb/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=8259d36468b77548cec3e35406201d8fb384eafb", "patch": "@@ -6955,6 +6955,26 @@ Builtin_call_expression::do_lower(Gogo* gogo, Named_object* function,\n       return Expression::make_error(loc);\n     }\n \n+  if (this->code_ == BUILTIN_OFFSETOF)\n+    {\n+      Expression* arg = this->one_arg();\n+      Field_reference_expression* farg = arg->field_reference_expression();\n+      while (farg != NULL)\n+\t{\n+\t  if (!farg->implicit())\n+\t    break;\n+\t  // When the selector refers to an embedded field,\n+\t  // it must not be reached through pointer indirections.\n+\t  if (farg->expr()->deref() != farg->expr())\n+\t    {\n+\t      this->report_error(_(\"argument of Offsetof implies indirection of an embedded field\"));\n+\t      return this;\n+\t    }\n+\t  // Go up until we reach the original base.\n+\t  farg = farg->expr()->field_reference_expression();\n+\t}\n+    }\n+ \n   if (this->is_constant())\n     {\n       Numeric_constant nc;"}, {"sha": "3f4db91ebf6761552c77a02974065287de076336", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8259d36468b77548cec3e35406201d8fb384eafb/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8259d36468b77548cec3e35406201d8fb384eafb/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=8259d36468b77548cec3e35406201d8fb384eafb", "patch": "@@ -1872,7 +1872,7 @@ class Field_reference_expression : public Expression\n   Field_reference_expression(Expression* expr, unsigned int field_index,\n \t\t\t     Location location)\n     : Expression(EXPRESSION_FIELD_REFERENCE, location),\n-      expr_(expr), field_index_(field_index), called_fieldtrack_(false)\n+      expr_(expr), field_index_(field_index), implicit_(false), called_fieldtrack_(false)\n   { }\n \n   // Return the struct expression."}]}