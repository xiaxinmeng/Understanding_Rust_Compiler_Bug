{"sha": "751aa7cc88d7267cd95cf1513558a9424e46c694", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUxYWE3Y2M4OGQ3MjY3Y2Q5NWNmMTUxMzU1OGE5NDI0ZTQ2YzY5NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-02-18T14:34:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-02-18T14:34:57Z"}, "message": "rtl.h (add_clobbers): Remove duplicate declaration.\n\n\t* rtl.h (add_clobbers): Remove duplicate declaration.\n\t* recog.h (added_clobbers_hard_reg_p): New declaration.\n\t* genemit.c (struct clobber_pat): New field has_hard_reg.\n\t(gen_insn): Record if added clobbers clobber hard reg.\n\t(gen_split): Avoid unused warning if number of operands is 0.\n\t(output_added_clobbers_hard_reg_p): New function.\n\t(main): Call it.\n\nFrom-SVN: r39832", "tree": {"sha": "eb602218d9bf6424e3c5e83b0e4ea3f56fc77911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb602218d9bf6424e3c5e83b0e4ea3f56fc77911"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/751aa7cc88d7267cd95cf1513558a9424e46c694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/751aa7cc88d7267cd95cf1513558a9424e46c694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/751aa7cc88d7267cd95cf1513558a9424e46c694", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/751aa7cc88d7267cd95cf1513558a9424e46c694/comments", "author": null, "committer": null, "parents": [{"sha": "ad37f6ea74b89de420a1b00ff8437fb1cd11e104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad37f6ea74b89de420a1b00ff8437fb1cd11e104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad37f6ea74b89de420a1b00ff8437fb1cd11e104"}], "stats": {"total": 87, "additions": 71, "deletions": 16}, "files": [{"sha": "9a4b2bfa4677848a601668e6bbcce63df072e37b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751aa7cc88d7267cd95cf1513558a9424e46c694/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751aa7cc88d7267cd95cf1513558a9424e46c694/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=751aa7cc88d7267cd95cf1513558a9424e46c694", "patch": "@@ -1,3 +1,13 @@\n+Sun Feb 18 09:30:09 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* rtl.h (add_clobbers): Remove duplicate declaration.\n+\t* recog.h (added_clobbers_hard_reg_p): New declaration.\n+\t* genemit.c (struct clobber_pat): New field has_hard_reg.\n+\t(gen_insn): Record if added clobbers clobber hard reg.\n+\t(gen_split): Avoid unused warning if number of operands is 0.\n+\t(output_added_clobbers_hard_reg_p): New function.\n+\t(main): Call it.\n+\n 2001-02-18  Alan Modra <alan@linuxcare.com.au>\n \n  \t* pa.c (hppa_expand_prologue): Simplify code storing return"}, {"sha": "fafa04fd8f63cfce20168cb5220a672ed410760a", "filename": "gcc/genemit.c", "status": "modified", "additions": 58, "deletions": 11, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751aa7cc88d7267cd95cf1513558a9424e46c694/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751aa7cc88d7267cd95cf1513558a9424e46c694/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=751aa7cc88d7267cd95cf1513558a9424e46c694", "patch": "@@ -1,5 +1,5 @@\n /* Generate code from machine description to emit insns as rtl.\n-   Copyright (C) 1987, 1988, 1991, 1994, 1995, 1997, 1998, 1999, 2000\n+   Copyright (C) 1987, 1988, 1991, 1994, 1995, 1997, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -44,6 +44,7 @@ struct clobber_pat\n   rtx pattern;\n   int first_clobber;\n   struct clobber_pat *next;\n+  int has_hard_reg;\n } *clobber_list;\n \n /* Records one insn that uses the clobber list.  */\n@@ -62,6 +63,7 @@ static void gen_insn\t\t\tPARAMS ((rtx));\n static void gen_expand\t\t\tPARAMS ((rtx));\n static void gen_split\t\t\tPARAMS ((rtx));\n static void output_add_clobbers\t\tPARAMS ((void));\n+static void output_added_clobbers_hard_reg_p PARAMS ((void));\n static void gen_rtx_scratch\t\tPARAMS ((rtx, enum rtx_code));\n static void output_peephole2_scratches\tPARAMS ((rtx));\n \n@@ -297,11 +299,18 @@ gen_insn (insn)\n \n   if (XVEC (insn, 1))\n     {\n+      int has_hard_reg = 0;\n+\n       for (i = XVECLEN (insn, 1) - 1; i > 0; i--)\n-\tif (GET_CODE (XVECEXP (insn, 1, i)) != CLOBBER\n-\t    || (GET_CODE (XEXP (XVECEXP (insn, 1, i), 0)) != REG\n-\t\t&& GET_CODE (XEXP (XVECEXP (insn, 1, i), 0)) != MATCH_SCRATCH))\n-\t  break;\n+\t{\n+\t  if (GET_CODE (XVECEXP (insn, 1, i)) != CLOBBER)\n+\t    break;\n+\n+\t  if (GET_CODE (XEXP (XVECEXP (insn, 1, i), 0)) == REG)\n+\t    has_hard_reg = 1;\n+\t  else if (GET_CODE (XEXP (XVECEXP (insn, 1, i), 0)) != MATCH_SCRATCH)\n+\t    break;\n+\t}\n \n       if (i != XVECLEN (insn, 1) - 1)\n \t{\n@@ -349,6 +358,7 @@ gen_insn (insn)\n \t      p->pattern = insn;\n \t      p->first_clobber = i + 1;\n \t      p->next = clobber_list;\n+\t      p->has_hard_reg = has_hard_reg;\n \t      clobber_list = p;\n \t    }\n \n@@ -549,6 +559,7 @@ gen_split (split)\n   register int i;\n   int operands;\n   const char *name = \"split\";\n+  const char *unused;\n \n   if (GET_CODE (split) == DEFINE_PEEPHOLE2)\n     name = \"peephole2\";\n@@ -564,22 +575,23 @@ gen_split (split)\n \n   max_operand_vec (split, 2);\n   operands = MAX (max_opno, MAX (max_dup_opno, max_scratch_opno)) + 1;\n+  unused = (operands == 0 ? \" ATTRIBUTE_UNUSED\" : \"\");\n \n   /* Output the prototype, function name and argument declarations.  */\n   if (GET_CODE (split) == DEFINE_PEEPHOLE2)\n     {\n       printf (\"extern rtx gen_%s_%d PARAMS ((rtx, rtx *));\\n\",\n \t      name, insn_code_number);\n-      printf (\"rtx\\ngen_%s_%d (curr_insn, operands)\\n\\\n-     rtx curr_insn ATTRIBUTE_UNUSED;\\n\\\n-     rtx *operands;\\n\", \n+      printf (\"rtx\\ngen_%s_%d (curr_insn, operands)\\n\",\n \t      name, insn_code_number);\n+      printf (\"     rtx curr_insn ATTRIBUTE_UNUSED;\\n\");\n+      printf (\"     rtx *operands%s;\\n\", unused);\n     }\n   else\n     {\n       printf (\"extern rtx gen_split_%d PARAMS ((rtx *));\\n\", insn_code_number);\n-      printf (\"rtx\\ngen_%s_%d (operands)\\n     rtx *operands;\\n\", name,\n-\t      insn_code_number);\n+      printf (\"rtx\\ngen_%s_%d (operands)\\n\", name, insn_code_number);\n+      printf (\"      rtx *operands%s;\\n\", unused);\n     }\n   printf (\"{\\n\");\n \n@@ -689,6 +701,39 @@ output_add_clobbers ()\n   printf (\"}\\n\");\n }\n \f\n+/* Write a function, `added_clobbers_hard_reg_p' this is given an insn_code\n+   number that needs clobbers and returns 1 if they include a clobber of a\n+   hard reg and 0 if they just clobber SCRATCH.  */\n+\n+static void\n+output_added_clobbers_hard_reg_p ()\n+{\n+  struct clobber_pat *clobber;\n+  struct clobber_ent *ent;\n+  int clobber_p;\n+\n+  printf (\"\\n\\nint\\nadded_clobbers_hard_reg_p (insn_code_number)\\n\");\n+  printf (\"     int insn_code_number;\\n\");\n+  printf (\"{\\n\");\n+  printf (\"  switch (insn_code_number)\\n\");\n+  printf (\"    {\\n\");\n+\n+  for (clobber_p = 0; clobber_p <= 1; clobber_p++)\n+    {\n+      for (clobber = clobber_list; clobber; clobber = clobber->next)\n+\tif (clobber->has_hard_reg == clobber_p)\n+\t  for (ent = clobber->insns; ent; ent = ent->next)\n+\t    printf (\"    case %d:\\n\", ent->code_number);\n+\n+      printf (\"      return %d;\\n\\n\", clobber_p);\n+    }\n+\n+  printf (\"    default:\\n\");\n+  printf (\"      abort ();\\n\");\n+  printf (\"    }\\n\");\n+  printf (\"}\\n\");\n+}\n+\f\n /* Generate code to invoke find_free_register () as needed for the\n    scratch registers used by the peephole2 pattern in SPLIT. */\n \n@@ -812,8 +857,10 @@ from the machine description file `md'.  */\\n\\n\");\n       ++insn_index_number;\n     }\n \n-  /* Write out the routine to add CLOBBERs to a pattern.  */\n+  /* Write out the routines to add CLOBBERs to a pattern and say whether they\n+     clobber a hard reg.  */\n   output_add_clobbers ();\n+  output_added_clobbers_hard_reg_p ();\n \n   fflush (stdout);\n   return (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);"}, {"sha": "b59d66498f037f7b9e9d2623c20ed91cceb187fa", "filename": "gcc/recog.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751aa7cc88d7267cd95cf1513558a9424e46c694/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751aa7cc88d7267cd95cf1513558a9424e46c694/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=751aa7cc88d7267cd95cf1513558a9424e46c694", "patch": "@@ -1,6 +1,6 @@\n /* Declarations for interface to insn recognizer and insn-output.c.\n-   Copyright (C) 1987, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1996, 1997, 1998, 1999, 2000, 2001\n+   Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -119,6 +119,7 @@ extern int mode_dependent_address_p\tPARAMS ((rtx));\n \n extern int recog\t\t\tPARAMS ((rtx, rtx, int *));\n extern void add_clobbers\t\tPARAMS ((rtx, int));\n+extern int added_clobbers_hard_reg_p\tPARAMS ((int));\n extern void insn_extract\t\tPARAMS ((rtx));\n extern void extract_insn\t\tPARAMS ((rtx));\n extern void extract_constrain_insn_cached PARAMS ((rtx));"}, {"sha": "99c20ce368c810f38e8916b2324ac535da14ca17", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/751aa7cc88d7267cd95cf1513558a9424e46c694/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/751aa7cc88d7267cd95cf1513558a9424e46c694/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=751aa7cc88d7267cd95cf1513558a9424e46c694", "patch": "@@ -1783,9 +1783,6 @@ void restore_line_number_status PARAMS ((int old_value));\n extern void renumber_insns                      PARAMS ((FILE *));\n extern void remove_unnecessary_notes             PARAMS ((void));\n \n-/* In insn-emit.c */\n-extern void add_clobbers\t\tPARAMS ((rtx, int));\n-\n /* In combine.c */\n extern int combine_instructions\t\tPARAMS ((rtx, unsigned int));\n extern unsigned int extended_count\tPARAMS ((rtx, enum machine_mode, int));"}]}