{"sha": "6a0a6ac4c168206195185ec63130685ce7d7d61a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEwYTZhYzRjMTY4MjA2MTk1MTg1ZWM2MzEzMDY4NWNlN2Q3ZDYxYQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-10-22T07:59:41Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2002-10-22T07:59:41Z"}, "message": "output.h (SECTION_NOTYPE): Define.\n\n\t* output.h (SECTION_NOTYPE): Define.\n\t* varasm.c (default_section_type_flags_1): Set SECTION_NOTYPE for\n\tinit array sections.\n\t(default_elf_asm_named_section): Mind SECTION_NOTYPE.\n\t* config/arm/arm.c (arm_elf_asm_named_section): Likewise.  Also\n\tmerge TLS support.\n\nFrom-SVN: r58404", "tree": {"sha": "994d078816785a89195501d16762dd944bcc8cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/994d078816785a89195501d16762dd944bcc8cc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a0a6ac4c168206195185ec63130685ce7d7d61a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0a6ac4c168206195185ec63130685ce7d7d61a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a0a6ac4c168206195185ec63130685ce7d7d61a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0a6ac4c168206195185ec63130685ce7d7d61a/comments", "author": null, "committer": null, "parents": [{"sha": "f87229e947c5dea5a1ffb8ead338ee5b023a19b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87229e947c5dea5a1ffb8ead338ee5b023a19b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f87229e947c5dea5a1ffb8ead338ee5b023a19b5"}], "stats": {"total": 89, "additions": 65, "deletions": 24}, "files": [{"sha": "c1656be3701cb48e6b70688de5ee35fcba4da325", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0a6ac4c168206195185ec63130685ce7d7d61a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0a6ac4c168206195185ec63130685ce7d7d61a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a0a6ac4c168206195185ec63130685ce7d7d61a", "patch": "@@ -1,3 +1,12 @@\n+2002-10-22  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* output.h (SECTION_NOTYPE): Define.\n+\t* varasm.c (default_section_type_flags_1): Set SECTION_NOTYPE for\n+\tinit array sections.\n+\t(default_elf_asm_named_section): Mind SECTION_NOTYPE.\n+\t* config/arm/arm.c (arm_elf_asm_named_section): Likewise.  Also\n+\tmerge TLS support.\n+\n 2002-10-21  Richard Henderson  <rth@redhat.com>\n \n \t* real.c (sticky_rshift_significand): Return inexact, don't"}, {"sha": "d6c1a027a29e0f00029c16d1a29c4e349c92386d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0a6ac4c168206195185ec63130685ce7d7d61a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0a6ac4c168206195185ec63130685ce7d7d61a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6a0a6ac4c168206195185ec63130685ce7d7d61a", "patch": "@@ -11068,8 +11068,13 @@ arm_elf_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n {\n-  char flagchars[8], *f = flagchars;\n-  const char *type;\n+  char flagchars[10], *f = flagchars;\n+\n+  if (! named_section_first_declaration (name))\n+    {\n+      fprintf (asm_out_file, \"\\t.section\\t%s\\n\", name);\n+      return;\n+    }\n \n   if (!(flags & SECTION_DEBUG))\n     *f++ = 'a';\n@@ -11083,19 +11088,28 @@ arm_elf_asm_named_section (name, flags)\n     *f++ = 'M';\n   if (flags & SECTION_STRINGS)\n     *f++ = 'S';\n+  if (flags & SECTION_TLS)\n+    *f++ = 'T';\n   *f = '\\0';\n \n-  if (flags & SECTION_BSS)\n-    type = \"nobits\";\n-  else\n-    type = \"progbits\";\n+  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\"\", name, flagchars);\n \n-  if (flags & SECTION_ENTSIZE)\n-    fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\",%%%s,%d\\n\",\n-\t     name, flagchars, type, flags & SECTION_ENTSIZE);\n-  else\n-    fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\",%%%s\\n\",\n-\t     name, flagchars, type);\n+  if (!(flags & SECTION_NOTYPE))\n+    {\n+      const char *type;\n+\n+      if (flags & SECTION_BSS)\n+\ttype = \"nobits\";\n+      else\n+\ttype = \"progbits\";\n+\n+      fprintf (asm_out_file, \",%%%s\", type);\n+\n+      if (flags & SECTION_ENTSIZE)\n+\tfprintf (asm_out_file, \",%d\", flags & SECTION_ENTSIZE);\n+    }\n+\n+  putc ('\\n', asm_out_file);\n }\n #endif\n "}, {"sha": "4070f955814601d9d2db2f67f25b437ad4e23a6a", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0a6ac4c168206195185ec63130685ce7d7d61a/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0a6ac4c168206195185ec63130685ce7d7d61a/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=6a0a6ac4c168206195185ec63130685ce7d7d61a", "patch": "@@ -485,7 +485,8 @@ extern void no_asm_to_stream PARAMS ((FILE *));\n \t\t\t\t\t   embedded zeros */\n #define SECTION_OVERRIDE 0x20000\t/* allow override of default flags */\n #define SECTION_TLS\t 0x40000\t/* contains thread-local storage */\n-#define SECTION_MACH_DEP 0x80000\t/* subsequent bits reserved for target */\n+#define SECTION_NOTYPE\t 0x80000\t/* don't output @progbits */\n+#define SECTION_MACH_DEP 0x100000\t/* subsequent bits reserved for target */\n \n extern unsigned int get_named_section_flags PARAMS ((const char *));\n extern bool set_named_section_flags\tPARAMS ((const char *, unsigned int));"}, {"sha": "e2d5f3a9a6ce7dd8baf8aa34dded06a22d010362", "filename": "gcc/varasm.c", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0a6ac4c168206195185ec63130685ce7d7d61a/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0a6ac4c168206195185ec63130685ce7d7d61a/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6a0a6ac4c168206195185ec63130685ce7d7d61a", "patch": "@@ -4828,6 +4828,17 @@ default_section_type_flags_1 (decl, name, reloc, shlib)\n       || strncmp (name, \".gnu.linkonce.tb.\", 17) == 0)\n     flags |= SECTION_TLS;\n \n+  /* These three sections have special ELF types.  They are neither\n+     SHT_PROGBITS nor SHT_NOBITS, so when changing sections we don't\n+     want to print a section type (@progbits or @nobits).  If someone\n+     is silly enough to emit code or TLS variables to one of these\n+     sections, then don't handle them specially.  */\n+  if (!(flags & (SECTION_CODE | SECTION_BSS | SECTION_TLS))\n+      && (strcmp (name, \".init_array\") == 0\n+\t  || strcmp (name, \".fini_array\") == 0\n+\t  || strcmp (name, \".preinit_array\") == 0))\n+    flags |= SECTION_NOTYPE;\n+\n   return flags;\n }\n \n@@ -4850,7 +4861,6 @@ default_elf_asm_named_section (name, flags)\n      unsigned int flags;\n {\n   char flagchars[10], *f = flagchars;\n-  const char *type;\n \n   if (! named_section_first_declaration (name))\n     {\n@@ -4874,17 +4884,24 @@ default_elf_asm_named_section (name, flags)\n     *f++ = 'T';\n   *f = '\\0';\n \n-  if (flags & SECTION_BSS)\n-    type = \"nobits\";\n-  else\n-    type = \"progbits\";\n+  fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\"\", name, flagchars);\n \n-  if (flags & SECTION_ENTSIZE)\n-    fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\",@%s,%d\\n\",\n-\t     name, flagchars, type, flags & SECTION_ENTSIZE);\n-  else\n-    fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\",@%s\\n\",\n-\t     name, flagchars, type);\n+  if (!(flags & SECTION_NOTYPE))\n+    {\n+      const char *type;\n+\n+      if (flags & SECTION_BSS)\n+\ttype = \"nobits\";\n+      else\n+\ttype = \"progbits\";\n+\n+      fprintf (asm_out_file, \",@%s\", type);\n+\n+      if (flags & SECTION_ENTSIZE)\n+\tfprintf (asm_out_file, \",%d\", flags & SECTION_ENTSIZE);\n+    }\n+\n+  putc ('\\n', asm_out_file);\n }\n \n void"}]}