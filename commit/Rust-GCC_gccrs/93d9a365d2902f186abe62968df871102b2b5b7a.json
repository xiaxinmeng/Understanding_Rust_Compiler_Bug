{"sha": "93d9a365d2902f186abe62968df871102b2b5b7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNkOWEzNjVkMjkwMmYxODZhYmU2Mjk2OGRmODcxMTAyYjJiNWI3YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-03-05T16:31:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-03-05T16:31:50Z"}, "message": "stl_algobase.h (iter_swap): In C++11 mode just call swap.\n\n2012-03-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algobase.h (iter_swap): In C++11 mode just\n\tcall swap.\n\t* include/bits/stl_bvector.h (swap(_Bit_reference,\n\t_Bit_reference), swap(_Bit_reference, bool&),\n\tswap(bool&, _Bit_reference)): Add.\n\t* testsuite/23_containers/vector/bool/swap.cc: New.\n\nFrom-SVN: r184939", "tree": {"sha": "797da951e525976483dc863bd4ee868353f828c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/797da951e525976483dc863bd4ee868353f828c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93d9a365d2902f186abe62968df871102b2b5b7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d9a365d2902f186abe62968df871102b2b5b7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d9a365d2902f186abe62968df871102b2b5b7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d9a365d2902f186abe62968df871102b2b5b7a/comments", "author": null, "committer": null, "parents": [{"sha": "510dbcce34f09967759f452e24c29269821f563d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/510dbcce34f09967759f452e24c29269821f563d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/510dbcce34f09967759f452e24c29269821f563d"}], "stats": {"total": 113, "additions": 107, "deletions": 6}, "files": [{"sha": "cf6d91339d0cbe9cf1bf7db4e248042034a6fee5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d9a365d2902f186abe62968df871102b2b5b7a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d9a365d2902f186abe62968df871102b2b5b7a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=93d9a365d2902f186abe62968df871102b2b5b7a", "patch": "@@ -1,3 +1,12 @@\n+2012-03-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algobase.h (iter_swap): In C++11 mode simply\n+\tcall swap.\n+\t* include/bits/stl_bvector.h (swap(_Bit_reference,\n+\t_Bit_reference), swap(_Bit_reference, bool&),\n+\tswap(bool&, _Bit_reference)): Add.\n+\t* testsuite/23_containers/vector/bool/swap.cc: New.\n+\n 2012-03-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n "}, {"sha": "4e6e0f49c5bf8866acb7a865a1b33ead58346166", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d9a365d2902f186abe62968df871102b2b5b7a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d9a365d2902f186abe62968df871102b2b5b7a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=93d9a365d2902f186abe62968df871102b2b5b7a", "patch": "@@ -1,7 +1,7 @@\n // Core algorithmic facilities -*- C++ -*-\n \n // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-// 2011 Free Software Foundation, Inc.\n+// 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -74,6 +74,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a\n   // nutshell, we are partially implementing the resolution of DR 187,\n   // when it's safe, i.e., the value_types are equal.\n@@ -102,6 +103,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           swap(*__a, *__b);\n         }\n     };\n+#endif\n \n   /**\n    *  @brief Swaps the contents of two iterators.\n@@ -117,16 +119,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline void\n     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\n     {\n-      typedef typename iterator_traits<_ForwardIterator1>::value_type\n-\t_ValueType1;\n-      typedef typename iterator_traits<_ForwardIterator2>::value_type\n-\t_ValueType2;\n-\n       // concept requirements\n       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<\n \t\t\t\t  _ForwardIterator1>)\n       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<\n \t\t\t\t  _ForwardIterator2>)\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+      typedef typename iterator_traits<_ForwardIterator1>::value_type\n+\t_ValueType1;\n+      typedef typename iterator_traits<_ForwardIterator2>::value_type\n+\t_ValueType2;\n+\n       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,\n \t\t\t\t  _ValueType2>)\n       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,\n@@ -140,6 +144,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t&& __are_same<_ValueType1&, _ReferenceType1>::__value\n \t&& __are_same<_ValueType2&, _ReferenceType2>::__value>::\n \titer_swap(__a, __b);\n+#else\n+      swap(*__a, *__b);\n+#endif\n     }\n \n   /**"}, {"sha": "dfa0b32a65eacaf945d21f4a7bbe63e3d0fb3539", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d9a365d2902f186abe62968df871102b2b5b7a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d9a365d2902f186abe62968df871102b2b5b7a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=93d9a365d2902f186abe62968df871102b2b5b7a", "patch": "@@ -108,6 +108,32 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     { *_M_p ^= _M_mask; }\n   };\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  inline void\n+  swap(_Bit_reference __x, _Bit_reference __y) noexcept\n+  {\n+    bool __tmp = __x;\n+    __x = __y;\n+    __y = __tmp;\n+  }\n+\n+  inline void\n+  swap(_Bit_reference __x, bool& __y) noexcept\n+  {\n+    bool __tmp = __x;\n+    __x = __y;\n+    __y = __tmp;\n+  }\n+\n+  inline void\n+  swap(bool& __x, _Bit_reference __y) noexcept\n+  {\n+    bool __tmp = __x;\n+    __x = __y;\n+    __y = __tmp;\n+  }\n+#endif\n+\n   struct _Bit_iterator_base\n   : public std::iterator<std::random_access_iterator_tag, bool>\n   {"}, {"sha": "04aa0db0c6a34b27e0b9a24464597698130aef8b", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/swap.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d9a365d2902f186abe62968df871102b2b5b7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d9a365d2902f186abe62968df871102b2b5b7a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fswap.cc?ref=93d9a365d2902f186abe62968df871102b2b5b7a", "patch": "@@ -0,0 +1,59 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+template<class Cont>\n+  void\n+  my_reverse(Cont& c)\n+  {\n+    for (std::size_t i = 0, j = c.size(); i < j; ++i)\n+      {\n+\t--j;\n+\tusing std::swap;\n+\tswap(c[i], c[j]);\n+      }\n+  }\n+\n+template<class Cont>\n+  void\n+  my_compare(const Cont& c1, const Cont& c2)\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    VERIFY( c1.size() == c2.size() );\n+\n+    for (std::size_t i = 0; i < c1.size(); ++i)\n+      VERIFY( c1[i] == c2[c1.size() - i - 1] );\n+  }\n+\n+void test01()\n+{\n+  const std::vector<bool> vb_ref{0, 1, 1, 0, 1};\n+  std::vector<bool>       vb(vb_ref);\n+  my_reverse(vb);\n+  my_compare(vb_ref, vb);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}