{"sha": "f50f7e2c00bb3cbf404b241d88af8697b33d2279", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUwZjdlMmMwMGJiM2NiZjQwNGIyNDFkODhhZjg2OTdiMzNkMjI3OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-04T10:17:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-04T10:17:30Z"}, "message": "[multiple changes]\n\n2016-07-04  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_prag.adb (Analyze_Unmodified_Or_Unused and\n\tAnalyze_Unreferenced_Or_Unused): Change warning message to be\n\tmore clear about pragma duplicates.\n\n2016-07-04  Yannick Moy  <moy@adacore.com>\n\n\t* sinput-l.adb (Create_Instantiation_Source): Set component\n\tInlined_Call for inherited pragma case.\n\t* sinput.adb, sinput.ads (Instantiation): Return component\n\tInlined_Call for inherited pragma case.\n\n2016-07-04  Bob Duff  <duff@adacore.com>\n\n\t* sem_type.adb (Remove_Conversions): Protect\n\tthe call to Left_Opnd by checking for Nkind in N_Unary_Op --\n\tunary operators do not have a left operand.\n\n2016-07-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): A declaration of a\n\tconstant in a protected operation may be a homonym of a private\n\tcomponent of the enclosing protected type. This declaration hides\n\tthe component renaming constructed within the protected operation.\n\nFrom-SVN: r237964", "tree": {"sha": "250809c1f3f20dfc031662b25454c1bd0249e8a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/250809c1f3f20dfc031662b25454c1bd0249e8a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f50f7e2c00bb3cbf404b241d88af8697b33d2279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50f7e2c00bb3cbf404b241d88af8697b33d2279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f50f7e2c00bb3cbf404b241d88af8697b33d2279", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50f7e2c00bb3cbf404b241d88af8697b33d2279/comments", "author": null, "committer": null, "parents": [{"sha": "96df3ff4bd3b0f2ce63f519955f20f7d93612929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96df3ff4bd3b0f2ce63f519955f20f7d93612929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96df3ff4bd3b0f2ce63f519955f20f7d93612929"}], "stats": {"total": 82, "additions": 60, "deletions": 22}, "files": [{"sha": "3c8ac5ee3e5c10c7b56a2610c2fa48b3e9dd2fac", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f50f7e2c00bb3cbf404b241d88af8697b33d2279", "patch": "@@ -1,3 +1,29 @@\n+2016-07-04  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Unmodified_Or_Unused and\n+\tAnalyze_Unreferenced_Or_Unused): Change warning message to be\n+\tmore clear about pragma duplicates.\n+\n+2016-07-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* sinput-l.adb (Create_Instantiation_Source): Set component\n+\tInlined_Call for inherited pragma case.\n+\t* sinput.adb, sinput.ads (Instantiation): Return component\n+\tInlined_Call for inherited pragma case.\n+\n+2016-07-04  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_type.adb (Remove_Conversions): Protect\n+\tthe call to Left_Opnd by checking for Nkind in N_Unary_Op --\n+\tunary operators do not have a left operand.\n+\n+2016-07-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): A declaration of a\n+\tconstant in a protected operation may be a homonym of a private\n+\tcomponent of the enclosing protected type. This declaration hides\n+\tthe component renaming constructed within the protected operation.\n+\n 2016-07-04  Bob Duff  <duff@adacore.com>\n \n \t* xref_lib.adb (Parse_X_Filename, Parse_Identifier_Info): Ignore"}, {"sha": "4dec6ff44f41055eb1f081fc4cec1a872171ebb6", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f50f7e2c00bb3cbf404b241d88af8697b33d2279", "patch": "@@ -3466,7 +3466,17 @@ package body Sem_Ch3 is\n                                                N_Package_Renaming_Declaration\n                    and then not Comes_From_Source (Prev_Entity)\n                    and then\n-                     Is_Generic_Instance (Renamed_Entity (Prev_Entity))))\n+                     Is_Generic_Instance (Renamed_Entity (Prev_Entity)))\n+\n+               --  The entity may be a homonym of a private component of the\n+               --  enclosing protected object, for which we create a local\n+               --  renaming declaration. The declaration is legal, even\n+               --  if useless when it just captures that component.\n+\n+               or else\n+                  (Ekind (Scope (Current_Scope)) = E_Protected_Type\n+                  and then Nkind (Parent (Prev_Entity)) =\n+                     N_Object_Renaming_Declaration))\n          then\n             Prev_Entity := Empty;\n          end if;"}, {"sha": "3a14fdffe9496b7a8acd4128b17172230c40633a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f50f7e2c00bb3cbf404b241d88af8697b33d2279", "patch": "@@ -4568,10 +4568,12 @@ package body Sem_Prag is\n                elsif Has_Pragma_Unmodified (Arg_Id) then\n                   if Has_Pragma_Unused (Arg_Id) then\n                      Error_Msg_NE\n-                       (\"??pragma Unused given for &!\", Arg_Expr, Arg_Id);\n+                       (\"??pragma Unused already given for &!\", Arg_Expr,\n+                         Arg_Id);\n                   else\n                      Error_Msg_NE\n-                       (\"??pragma Unmodified given for &!\", Arg_Expr, Arg_Id);\n+                       (\"??pragma Unmodified already given for &!\", Arg_Expr,\n+                         Arg_Id);\n                   end if;\n \n                --  Otherwise the pragma referenced an illegal entity\n@@ -4674,11 +4676,12 @@ package body Sem_Prag is\n                   if Has_Pragma_Unreferenced (Arg_Id) then\n                      if Has_Pragma_Unused (Arg_Id) then\n                         Error_Msg_NE\n-                          (\"??pragma Unused given for &!\", Arg_Expr, Arg_Id);\n+                          (\"??pragma Unused already given for &!\", Arg_Expr,\n+                            Arg_Id);\n                      else\n                         Error_Msg_NE\n-                          (\"??pragma Unreferenced given for &!\", Arg_Expr,\n-                           Arg_Id);\n+                          (\"??pragma Unreferenced already given for &!\",\n+                            Arg_Expr, Arg_Id);\n                      end if;\n \n                   --  Apply Unreferenced to the entity"}, {"sha": "a770149128df6882aee55edcf730fb597664b461", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=f50f7e2c00bb3cbf404b241d88af8697b33d2279", "patch": "@@ -1619,8 +1619,10 @@ package body Sem_Type is\n \n                if Nkind (Act1) in N_Op\n                  and then Is_Overloaded (Act1)\n-                 and then Nkind_In (Left_Opnd (Act1), N_Integer_Literal,\n-                                                      N_Real_Literal)\n+                 and then (Nkind (Act1) in N_Unary_Op\n+                             or else Nkind_In\n+                               (Left_Opnd (Act1), N_Integer_Literal,\n+                                                  N_Real_Literal))\n                  and then Nkind_In (Right_Opnd (Act1), N_Integer_Literal,\n                                                        N_Real_Literal)\n                  and then Has_Compatible_Type (Act1, Standard_Boolean)"}, {"sha": "f0cce8d2cba1c2a5c7118a45e17fb719ee23cf7f", "filename": "gcc/ada/sinput-l.adb", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2Fsinput-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2Fsinput-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.adb?ref=f50f7e2c00bb3cbf404b241d88af8697b33d2279", "patch": "@@ -151,16 +151,12 @@ package body Sinput.L is\n          Snew.Template         := Xold;\n \n          --  For a genuine generic instantiation, assign new instance id. For\n-         --  inlined bodies, we retain that of the template, but we save the\n-         --  call location. For inherited pragmas, we simply retain that of\n-         --  the template.\n+         --  inlined bodies or inherited pragmas, we retain that of the\n+         --  template, but we save the call location.\n \n-         if Inlined_Body then\n+         if Inlined_Body or Inherited_Pragma then\n             Snew.Inlined_Call := Sloc (Inst_Node);\n \n-         elsif Inherited_Pragma then\n-            null;\n-\n          else\n             --  If the spec has been instantiated already, and we are now\n             --  creating the instance source for the corresponding body now,"}, {"sha": "a03949463e95d38c5a3c9bc013141d3a55fe67cf", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=f50f7e2c00bb3cbf404b241d88af8697b33d2279", "patch": "@@ -493,7 +493,7 @@ package body Sinput is\n    function Instantiation (S : SFI) return Source_Ptr is\n       SIE : Source_File_Record renames Source_File.Table (S);\n    begin\n-      if SIE.Inlined_Body then\n+      if SIE.Inlined_Body or SIE.Inherited_Pragma then\n          return SIE.Inlined_Call;\n       else\n          return Instances.Table (SIE.Instance);"}, {"sha": "8165a8f6dea660ed8ef03a0cdbfe09ba2ffe3058", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50f7e2c00bb3cbf404b241d88af8697b33d2279/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=f50f7e2c00bb3cbf404b241d88af8697b33d2279", "patch": "@@ -260,14 +260,13 @@ package Sinput is\n \n    --  Inlined_Call : Source_Ptr;\n    --    Source file location of the subprogram call if this source file entry\n-   --    represents an inlined body. Set to No_Location otherwise.\n-   --    This field is read-only for clients.\n+   --    represents an inlined body or an inherited pragma. Set to No_Location\n+   --    otherwise. This field is read-only for clients.\n \n    --  Inlined_Body : Boolean;\n    --    This can only be set True if Instantiation has a value other than\n    --    No_Location. If true it indicates that the instantiation is actually\n    --    an instance of an inlined body.\n-   --    ??? Redundant, always equal to (Inlined_Call /= No_Location)\n \n    --  Inherited_Pragma : Boolean;\n    --    This can only be set True if Instantiation has a value other than\n@@ -426,9 +425,11 @@ package Sinput is\n \n    function Instantiation (S : SFI) return Source_Ptr;\n    --  For a source file entry that represents an inlined body, source location\n-   --  of the inlined call. Otherwise, for a source file entry that represents\n-   --  a generic instantiation, source location of the instantiation. Returns\n-   --  No_Location in all other cases.\n+   --  of the inlined call. For a source file entry that represents an\n+   --  inherited pragma, source location of the declaration to which the\n+   --  overriding subprogram for the inherited pragma is attached. Otherwise,\n+   --  for a source file entry that represents a generic instantiation, source\n+   --  location of the instantiation. Returns No_Location in all other cases.\n \n    -----------------\n    -- Global Data --"}]}