{"sha": "c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU5YjdlMjg1NmNjOGYyNTlmYjZlNGY4YTk0MGZhY2U1ZWNjOWZhMw==", "commit": {"author": {"name": "Sofiane Naci", "email": "sofiane.naci@arm.com", "date": "2013-05-13T14:22:02Z"}, "committer": {"name": "Sofiane Naci", "email": "sofiane@gcc.gnu.org", "date": "2013-05-13T14:22:02Z"}, "message": "aarch64-simd.md (aarch64_simd_mov<mode>): Group similar switch cases.\n\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_mov<mode>): Group\n\tsimilar switch cases.\n\t(aarch64_simd_mov): Rename to aarch64_split_simd_mov. Update.\n\t(aarch64_simd_mov_to_<mode>low): Delete.\n\t(aarch64_simd_mov_to_<mode>high): Delete.\n\t(move_lo_quad_<mode>): Add w<-r alternative.\n\t(aarch64_simd_move_hi_quad_<mode>): Likewise.\n    (aarch64_simd_mov_from_*): Update type attribute.\n\t* config/aarch64/aarch64.c (aarch64_split_simd_move): Refacror switch\n\tstatement.\n\nFrom-SVN: r198831", "tree": {"sha": "30adb02edc3eeff3540a30c07f59847d710bf01b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30adb02edc3eeff3540a30c07f59847d710bf01b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3/comments", "author": null, "committer": null, "parents": [{"sha": "5f28524a011ad3b8bf7612a604e0ad4c557e47d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f28524a011ad3b8bf7612a604e0ad4c557e47d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f28524a011ad3b8bf7612a604e0ad4c557e47d3"}], "stats": {"total": 135, "additions": 69, "deletions": 66}, "files": [{"sha": "c28cfdb4e510d48e02a41d9ec5189d516d9b0a3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3", "patch": "@@ -1,3 +1,16 @@\n+2013-05-13  Sofiane Naci  <sofiane.naci@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_mov<mode>): Group\n+\tsimilar switch cases.\n+\t(aarch64_simd_mov): Rename to aarch64_split_simd_mov. Update.\n+\t(aarch64_simd_mov_to_<mode>low): Delete.\n+\t(aarch64_simd_mov_to_<mode>high): Delete.\n+\t(move_lo_quad_<mode>): Add w<-r alternative.\n+\t(aarch64_simd_move_hi_quad_<mode>): Likewise.\n+\t(aarch64_simd_mov_from_*): Update type attribute.\n+\t* config/aarch64/aarch64.c (aarch64_split_simd_move): Refacror switch\n+\tstatement.\n+\n 2013-05-13  Jan Hubicka  <jh@suse.cz>\n \n \t* mode-switching.c (optimize_mode_switching): Set correct RTL profile."}, {"sha": "b7cc9d3845e5f7768915058ad349a3ad19a5d43b", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 46, "deletions": 60, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3", "patch": "@@ -429,16 +429,20 @@\n {\n   switch (which_alternative)\n     {\n-    case 0: return \"ld1\\t{%0.<Vtype>}, %1\";\n-    case 1: return \"st1\\t{%1.<Vtype>}, %0\";\n-    case 2: return \"orr\\t%0.<Vbtype>, %1.<Vbtype>, %1.<Vbtype>\";\n-    case 3: return \"#\";\n-    case 4: return \"#\";\n-    case 5: return \"#\";\n+    case 0:\n+\treturn \"ld1\\t{%0.<Vtype>}, %1\";\n+    case 1:\n+\treturn \"st1\\t{%1.<Vtype>}, %0\";\n+    case 2:\n+\treturn \"orr\\t%0.<Vbtype>, %1.<Vbtype>, %1.<Vbtype>\";\n+    case 3:\n+    case 4:\n+    case 5:\n+\treturn \"#\";\n     case 6:\n-\treturn aarch64_output_simd_mov_immediate (&operands[1],\n-\t\t\t\t\t\t  <MODE>mode, 128);\n-    default: gcc_unreachable ();\n+\treturn aarch64_output_simd_mov_immediate (&operands[1], <MODE>mode, 128);\n+    default:\n+\tgcc_unreachable ();\n     }\n }\n   [(set_attr \"simd_type\" \"simd_load1,simd_store1,simd_move,simd_movgp,simd_insgp,simd_move,simd_move_imm\")\n@@ -479,7 +483,7 @@\n   DONE;\n })\n \n-(define_expand \"aarch64_simd_mov<mode>\"\n+(define_expand \"aarch64_split_simd_mov<mode>\"\n   [(set (match_operand:VQ 0)\n         (match_operand:VQ 1))]\n   \"TARGET_SIMD\"\n@@ -489,67 +493,39 @@\n \n     if (GP_REGNUM_P (REGNO (src)))\n       {\n-        rtx low_part = gen_lowpart (<VHALF>mode, src);\n-        rtx high_part = gen_highpart (<VHALF>mode, src);\n+        rtx src_low_part = gen_lowpart (<VHALF>mode, src);\n+        rtx src_high_part = gen_highpart (<VHALF>mode, src);\n \n         emit_insn\n-          (gen_aarch64_simd_mov_to_<mode>low (dst, low_part));\n+          (gen_move_lo_quad_<mode> (dst, src_low_part));\n         emit_insn\n-          (gen_aarch64_simd_mov_to_<mode>high (dst, high_part));\n+          (gen_move_hi_quad_<mode> (dst, src_high_part));\n       }\n \n     else\n       {\n-        rtx low_half = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n-        rtx high_half = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-        rtx low_part = gen_lowpart (<VHALF>mode, dst);\n-        rtx high_part = gen_highpart (<VHALF>mode, dst);\n+        rtx dst_low_part = gen_lowpart (<VHALF>mode, dst);\n+        rtx dst_high_part = gen_highpart (<VHALF>mode, dst);\n+        rtx lo = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n+        rtx hi = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n \n         emit_insn\n-          (gen_aarch64_simd_mov_from_<mode>low (low_part, src, low_half));\n+          (gen_aarch64_simd_mov_from_<mode>low (dst_low_part, src, lo));\n         emit_insn\n-          (gen_aarch64_simd_mov_from_<mode>high (high_part, src, high_half));\n+          (gen_aarch64_simd_mov_from_<mode>high (dst_high_part, src, hi));\n       }\n     DONE;\n   }\n )\n \n-(define_insn \"aarch64_simd_mov_to_<mode>low\"\n-  [(set (zero_extract:VQ\n-          (match_operand:VQ 0 \"register_operand\" \"+w\")\n-          (const_int 64) (const_int 0))\n-        (vec_concat:VQ\n-          (match_operand:<VHALF> 1 \"register_operand\" \"r\")\n-          (vec_duplicate:<VHALF> (const_int 0))))]\n-  \"TARGET_SIMD && reload_completed\"\n-  \"ins\\t%0.d[0], %1\"\n-  [(set_attr \"simd_type\" \"simd_move\")\n-   (set_attr \"simd_mode\" \"<MODE>\")\n-   (set_attr \"length\" \"4\")\n-  ])\n-\n-(define_insn \"aarch64_simd_mov_to_<mode>high\"\n-  [(set (zero_extract:VQ\n-          (match_operand:VQ 0 \"register_operand\" \"+w\")\n-          (const_int 64) (const_int 64))\n-        (vec_concat:VQ\n-          (match_operand:<VHALF> 1 \"register_operand\" \"r\")\n-          (vec_duplicate:<VHALF> (const_int 0))))]\n-  \"TARGET_SIMD && reload_completed\"\n-  \"ins\\t%0.d[1], %1\"\n-  [(set_attr \"simd_type\" \"simd_move\")\n-   (set_attr \"simd_mode\" \"<MODE>\")\n-   (set_attr \"length\" \"4\")\n-  ])\n-\n (define_insn \"aarch64_simd_mov_from_<mode>low\"\n   [(set (match_operand:<VHALF> 0 \"register_operand\" \"=r\")\n         (vec_select:<VHALF>\n           (match_operand:VQ 1 \"register_operand\" \"w\")\n           (match_operand:VQ 2 \"vect_par_cnst_lo_half\" \"\")))]\n   \"TARGET_SIMD && reload_completed\"\n   \"umov\\t%0, %1.d[0]\"\n-  [(set_attr \"simd_type\" \"simd_move\")\n+  [(set_attr \"simd_type\" \"simd_movgp\")\n    (set_attr \"simd_mode\" \"<MODE>\")\n    (set_attr \"length\" \"4\")\n   ])\n@@ -561,7 +537,7 @@\n           (match_operand:VQ 2 \"vect_par_cnst_hi_half\" \"\")))]\n   \"TARGET_SIMD && reload_completed\"\n   \"umov\\t%0, %1.d[1]\"\n-  [(set_attr \"simd_type\" \"simd_move\")\n+  [(set_attr \"simd_type\" \"simd_movgp\")\n    (set_attr \"simd_mode\" \"<MODE>\")\n    (set_attr \"length\" \"4\")\n   ])\n@@ -1076,29 +1052,39 @@\n ;; Move into low-half clearing high half to 0.\n \n (define_insn \"move_lo_quad_<mode>\"\n-  [(set (match_operand:VQ 0 \"register_operand\" \"=w\")\n+  [(set (match_operand:VQ 0 \"register_operand\" \"=w,w,w\")\n         (vec_concat:VQ\n-\t  (match_operand:<VHALF> 1 \"register_operand\" \"w\")\n+\t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r,r\")\n \t  (vec_duplicate:<VHALF> (const_int 0))))]\n   \"TARGET_SIMD\"\n-  \"mov\\\\t%d0, %d1\";\n-  [(set_attr \"simd_type\" \"simd_dup\")\n-   (set_attr \"simd_mode\" \"<MODE>\")]\n+  \"@\n+   mov\\\\t%d0, %d1\n+   fmov\\t%d0, %1\n+   dup\\t%d0, %1\"\n+  [(set_attr \"v8type\" \"*,fmov,*\")\n+   (set_attr \"simd_type\" \"simd_dup,*,simd_dup\")\n+   (set_attr \"simd_mode\" \"<MODE>\")\n+   (set_attr \"simd\" \"yes,*,yes\")\n+   (set_attr \"fp\" \"*,yes,*\")\n+   (set_attr \"length\" \"4\")]\n )\n \n ;; Move into high-half.\n \n (define_insn \"aarch64_simd_move_hi_quad_<mode>\"\n-  [(set (match_operand:VQ 0 \"register_operand\" \"+w\")\n+  [(set (match_operand:VQ 0 \"register_operand\" \"+w,w\")\n         (vec_concat:VQ\n           (vec_select:<VHALF>\n                 (match_dup 0)\n                 (match_operand:VQ 2 \"vect_par_cnst_lo_half\" \"\"))\n-\t  (match_operand:<VHALF> 1 \"register_operand\" \"w\")))]\n+\t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r\")))]\n   \"TARGET_SIMD\"\n-  \"ins\\\\t%0.d[1], %1.d[0]\";\n-  [(set_attr \"simd_type\" \"simd_ins\")\n-   (set_attr \"simd_mode\" \"<MODE>\")]\n+  \"@\n+   ins\\\\t%0.d[1], %1.d[0]\n+   ins\\\\t%0.d[1], %1\"\n+  [(set_attr \"simd_type\" \"simd_ins,simd_ins\")\n+   (set_attr \"simd_mode\" \"<MODE>\")\n+   (set_attr \"length\" \"4\")]\n )\n \n (define_expand \"move_hi_quad_<mode>\""}, {"sha": "a0aff58668bcb9c7766907ce89fe7e828eb90cf5", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c59b7e2856cc8f259fb6e4f8a940face5ecc9fa3", "patch": "@@ -704,31 +704,35 @@ aarch64_split_simd_move (rtx dst, rtx src)\n \n   if (REG_P (dst) && REG_P (src))\n     {\n+      rtx (*gen) (rtx, rtx);\n+\n       gcc_assert (VECTOR_MODE_P (src_mode));\n \n       switch (src_mode)\n \t{\n \tcase V16QImode:\n-\t  emit_insn (gen_aarch64_simd_movv16qi (dst, src));\n+\t  gen = gen_aarch64_split_simd_movv16qi;\n \t  break;\n \tcase V8HImode:\n-\t  emit_insn (gen_aarch64_simd_movv8hi (dst, src));\n+\t  gen = gen_aarch64_split_simd_movv8hi;\n \t  break;\n \tcase V4SImode:\n-\t  emit_insn (gen_aarch64_simd_movv4si (dst, src));\n+\t  gen = gen_aarch64_split_simd_movv4si;\n \t  break;\n \tcase V2DImode:\n-\t  emit_insn (gen_aarch64_simd_movv2di (dst, src));\n+\t  gen = gen_aarch64_split_simd_movv2di;\n \t  break;\n \tcase V4SFmode:\n-\t  emit_insn (gen_aarch64_simd_movv4sf (dst, src));\n+\t  gen = gen_aarch64_split_simd_movv4sf;\n \t  break;\n \tcase V2DFmode:\n-\t  emit_insn (gen_aarch64_simd_movv2df (dst, src));\n+\t  gen = gen_aarch64_split_simd_movv2df;\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n+\n+      emit_insn (gen (dst, src));\n       return;\n     }\n }"}]}