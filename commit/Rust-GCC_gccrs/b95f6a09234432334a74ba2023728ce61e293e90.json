{"sha": "b95f6a09234432334a74ba2023728ce61e293e90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk1ZjZhMDkyMzQ0MzIzMzRhNzRiYTIwMjM3MjhjZTYxZTI5M2U5MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-05-24T20:38:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-05-24T20:38:40Z"}, "message": "ia64intrin.h: Define nothing for C++: overloaded builtins have been ported to C++.\n\n2005-05-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* config/ia64/ia64intrin.h: Define nothing for C++:\n\toverloaded builtins have been ported to C++.\n\nFrom-SVN: r100112", "tree": {"sha": "02e20a5891cb720874edfac4a8a420403bc9b46a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02e20a5891cb720874edfac4a8a420403bc9b46a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b95f6a09234432334a74ba2023728ce61e293e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b95f6a09234432334a74ba2023728ce61e293e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b95f6a09234432334a74ba2023728ce61e293e90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b95f6a09234432334a74ba2023728ce61e293e90/comments", "author": null, "committer": null, "parents": [{"sha": "9b22c09e3c3b849389f7a40e6dadd16e101670dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b22c09e3c3b849389f7a40e6dadd16e101670dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b22c09e3c3b849389f7a40e6dadd16e101670dd"}], "stats": {"total": 98, "additions": 7, "deletions": 91}, "files": [{"sha": "1b03546adec6669addd73382a37792862a4341a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b95f6a09234432334a74ba2023728ce61e293e90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b95f6a09234432334a74ba2023728ce61e293e90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b95f6a09234432334a74ba2023728ce61e293e90", "patch": "@@ -1,3 +1,8 @@\n+2005-05-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* config/ia64/ia64intrin.h: Define nothing for C++:\n+\toverloaded builtins have been ported to C++.\n+\n 2005-05-24  Jeff Law  <law@redhat.com>\n \n \t* tree-nested.c (build_addr): New \"context\" argument.  Temporarily"}, {"sha": "fba7296aacb4f9c05ef9f078114c984c77856b5a", "filename": "gcc/config/ia64/ia64intrin.h", "status": "modified", "additions": 2, "deletions": 91, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b95f6a09234432334a74ba2023728ce61e293e90/gcc%2Fconfig%2Fia64%2Fia64intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b95f6a09234432334a74ba2023728ce61e293e90/gcc%2Fconfig%2Fia64%2Fia64intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64intrin.h?ref=b95f6a09234432334a74ba2023728ce61e293e90", "patch": "@@ -1,91 +1,2 @@\n-#ifndef _IA64INTRIN_H_INCLUDED\n-#define _IA64INTRIN_H_INCLUDED\n-\n-/* ??? Overloaded builtins havn't been ported to C++ yet.  */\n-#ifdef __cplusplus\n-\n-#define __sync_val_compare_and_swap(PTR, OLD, NEW)\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR)))\t\t\t\t\t\t\\\n-    __sync_val_compare_and_swap_4((int *)(void *)(PTR),(int)(OLD),(int)(NEW))\t\\\n-  : (__typeof__(*(PTR)))\t\t\t\t\t\t\\\n-    __sync_val_compare_and_swap_8((long *)(void *)(PTR),(long)(OLD),(long)(NEW)))\n-\n-#define __sync_bool_compare_and_swap(PTR, OLD, NEW)\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? __sync_bool_compare_and_swap_4((int *)(void *)(PTR),(int)(OLD),(int)(NEW))\t\\\n-  : __sync_bool_compare_and_swap_8((long *)(void *)(PTR),(long)(OLD),(long)(NEW)))\n-\n-#define __sync_lock_release(PTR)\t\t\\\n-  ((sizeof (*(PTR)) == sizeof(int))\t\t\\\n-   ? __sync_lock_release_4((int *)(void *)(PTR))\t\\\n-   : __sync_lock_release_8((long *)(void *)(PTR)))\n-\n-#define __sync_lock_test_and_set(PTR,VAL)\t\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_lock_test_and_set_4((int *)(void *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_lock_test_and_set_8((long *)(void *)(PTR),(long)(VAL)))\n-\n-#define __sync_fetch_and_add(PTR,VAL)\t\t\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_fetch_and_add_4((int *)(void *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_fetch_and_add_8((long *)(void *)(PTR),(long)(VAL)))\n-\n-#define __sync_fetch_and_sub(PTR,VAL)\t\t\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_fetch_and_sub_4((int *)(void *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_fetch_and_sub_8((long *)(void *)(PTR),(long)(VAL)))\n-\n-#define __sync_fetch_and_and(PTR,VAL)\t\t\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_fetch_and_and_4((int *)(void *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_fetch_and_and_8((long *)(void *)(PTR),(long)(VAL)))\n-\n-#define __sync_fetch_and_or(PTR,VAL)\t\t\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_fetch_and_or_4((int *)(void *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_fetch_and_or_8((long *)(void *)(PTR),(long)(VAL)))\n-\n-#define __sync_fetch_and_xor(PTR,VAL)\t\t\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_fetch_and_xor_4((int *)(void *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_fetch_and_xor_8((long *)(void *)(PTR),(long)(VAL)))\n-\n-#define __sync_fetch_and_nand(PTR,VAL)\t\t\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_fetch_and_nand_4((int *)(void *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_fetch_and_nand_8((long *)(void *)(PTR),(long)(VAL)))\n-\n-#define __sync_add_and_fetch(PTR,VAL)\t\t\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_add_and_fetch_4((int *)(void *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_add_and_fetch_8((long *)(void *)(PTR),(long)(VAL)))\n-\n-#define __sync_sub_and_fetch(PTR,VAL)\t\t\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_sub_and_fetch_4((int *)(void *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_sub_and_fetch_8((long *)(void *)(PTR),(long)(VAL)))\n-\n-#define __sync_and_and_fetch(PTR,VAL)\t\t\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_and_and_fetch_4((int *)(void *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_and_and_fetch_8((long *)(void *)(PTR),(long)(VAL)))\n-\n-#define __sync_or_and_fetch(PTR,VAL)\t\t\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_or_and_fetch_4((int *)(void *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_or_and_fetch_8((long *)(void *)(PTR),(long)(VAL)))\n-\n-#define __sync_xor_and_fetch(PTR,VAL)\t\t\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_xor_and_fetch_4((int *)(void *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_xor_and_fetch_8((long *)(void *)(PTR),(long)(VAL)))\n-\n-#define __sync_nand_and_fetch(PTR,VAL)\t\t\t\t\t\\\n- ((sizeof (*(PTR)) == sizeof(int))\t\t\t\t\t\\\n-  ? (__typeof__(*(PTR))) __sync_nand_and_fetch_4((int *)(void *)(PTR),(int)(VAL)) \\\n-  : (__typeof__(*(PTR))) __sync_nand_and_fetch_8((long *)(void *)(PTR),(long)(VAL)))\n-\n-#endif /* __cplusplus */\n-\n-#endif /* _IA64INTRIN_H_INCLUDED */\n+/* Overloaded builtins have been ported to C++: nothing is needed\n+   in the header anymore.  This file intentionally left void.  */"}]}