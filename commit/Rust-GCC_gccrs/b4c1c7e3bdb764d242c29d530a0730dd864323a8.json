{"sha": "b4c1c7e3bdb764d242c29d530a0730dd864323a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRjMWM3ZTNiZGI3NjRkMjQyYzI5ZDUzMGEwNzMwZGQ4NjQzMjNhOA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2007-01-14T20:07:42Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-01-14T20:07:42Z"}, "message": "loop-unswitch.c (unswitch_loop): Do not call fix_loop_placement.\n\n\t* loop-unswitch.c (unswitch_loop): Do not call fix_loop_placement.\n\t* cfgloopmanip.c (fix_loop_placement): Made static.  Use\n\tget_loop_exit_edges.  Changed return type to bool.\n\t* cfgloop.h (fix_loop_placement): Declaration removed.\n\nFrom-SVN: r120782", "tree": {"sha": "18a27a7ce6c6eb581f08c16c0df3ef47d68304a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18a27a7ce6c6eb581f08c16c0df3ef47d68304a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4c1c7e3bdb764d242c29d530a0730dd864323a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c1c7e3bdb764d242c29d530a0730dd864323a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4c1c7e3bdb764d242c29d530a0730dd864323a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c1c7e3bdb764d242c29d530a0730dd864323a8/comments", "author": null, "committer": null, "parents": [{"sha": "cd9ae11c1a02a8a99da7f7e3b574e66d5428a99f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9ae11c1a02a8a99da7f7e3b574e66d5428a99f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd9ae11c1a02a8a99da7f7e3b574e66d5428a99f"}], "stats": {"total": 90, "additions": 47, "deletions": 43}, "files": [{"sha": "24d6dc652583d13d4da85274e9690bc5b7ccbc42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c1c7e3bdb764d242c29d530a0730dd864323a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c1c7e3bdb764d242c29d530a0730dd864323a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4c1c7e3bdb764d242c29d530a0730dd864323a8", "patch": "@@ -1,3 +1,10 @@\n+2007-01-14  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* loop-unswitch.c (unswitch_loop): Do not call fix_loop_placement.\n+\t* cfgloopmanip.c (fix_loop_placement): Made static.  Use\n+\tget_loop_exit_edges.  Changed return type to bool.\n+\t* cfgloop.h (fix_loop_placement): Declaration removed.\n+\n 2007-01-14  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* param.h (MIN_VECT_LOOP_BOUND): New."}, {"sha": "47bfa576103c528c0bda6ff1af16e5a7ff3bf996", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c1c7e3bdb764d242c29d530a0730dd864323a8/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c1c7e3bdb764d242c29d530a0730dd864323a8/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=b4c1c7e3bdb764d242c29d530a0730dd864323a8", "patch": "@@ -242,8 +242,6 @@ extern void remove_bb_from_loops (basic_block);\n extern void cancel_loop_tree (struct loop *);\n extern void delete_loop (struct loop *);\n \n-extern int fix_loop_placement (struct loop *);\n-\n enum\n {\n   CP_SIMPLE_PREHEADERS = 1"}, {"sha": "74f7b0781a74586ef5aa14dfb16d0d83669f4367", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c1c7e3bdb764d242c29d530a0730dd864323a8/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c1c7e3bdb764d242c29d530a0730dd864323a8/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=b4c1c7e3bdb764d242c29d530a0730dd864323a8", "patch": "@@ -120,6 +120,46 @@ fix_bb_placement (basic_block bb)\n   return true;\n }\n \n+/* Fix placement of LOOP inside loop tree, i.e. find the innermost superloop\n+   of LOOP to that leads at least one exit edge of LOOP, and set it\n+   as the immediate superloop of LOOP.  Return true if the immediate superloop\n+   of LOOP changed.  */\n+\n+static bool\n+fix_loop_placement (struct loop *loop)\n+{\n+  unsigned i;\n+  edge e;\n+  VEC (edge, heap) *exits = get_loop_exit_edges (loop);\n+  struct loop *father = current_loops->tree_root, *act;\n+  bool ret = false;\n+\n+  for (i = 0; VEC_iterate (edge, exits, i, e); i++)\n+    {\n+      act = find_common_loop (loop, e->dest->loop_father);\n+      if (flow_loop_nested_p (father, act))\n+\tfather = act;\n+    }\n+\n+  if (father != loop->outer)\n+    {\n+      for (act = loop->outer; act != father; act = act->outer)\n+\tact->num_nodes -= loop->num_nodes;\n+      flow_loop_tree_node_remove (loop);\n+      flow_loop_tree_node_add (father, loop);\n+\n+      /* The exit edges of LOOP no longer exits its original immediate\n+\t superloops; remove them from the appropriate exit lists.  */\n+      for (i = 0; VEC_iterate (edge, exits, i, e); i++)\n+\trescan_loop_exit (e, false, false);\n+\n+      ret = true;\n+    }\n+\n+  VEC_free (edge, heap, exits);\n+  return ret;\n+}\n+\n /* Fix placements of basic blocks inside loop hierarchy stored in loops; i.e.\n    enforce condition condition stated in description of fix_bb_placement. We\n    start from basic block FROM that had some of its successors removed, so that\n@@ -563,42 +603,6 @@ unloop (struct loop *loop, bool *irred_invalidated)\n   fix_bb_placements (latch, &dummy);\n }\n \n-/* Fix placement of LOOP inside loop tree, i.e. find the innermost superloop\n-   FATHER of LOOP such that all of the edges coming out of LOOP belong to\n-   FATHER, and set it as outer loop of LOOP.  Return true if placement of\n-   LOOP changed.  */\n-\n-int\n-fix_loop_placement (struct loop *loop)\n-{\n-  basic_block *body;\n-  unsigned i;\n-  edge e;\n-  edge_iterator ei;\n-  struct loop *father = loop->pred[0], *act;\n-\n-  body = get_loop_body (loop);\n-  for (i = 0; i < loop->num_nodes; i++)\n-    FOR_EACH_EDGE (e, ei, body[i]->succs)\n-      if (!flow_bb_inside_loop_p (loop, e->dest))\n-\t{\n-\t  act = find_common_loop (loop, e->dest->loop_father);\n-\t  if (flow_loop_nested_p (father, act))\n-\t    father = act;\n-\t}\n-  free (body);\n-\n-  if (father != loop->outer)\n-    {\n-      for (act = loop->outer; act != father; act = act->outer)\n-\tact->num_nodes -= loop->num_nodes;\n-      flow_loop_tree_node_remove (loop);\n-      flow_loop_tree_node_add (father, loop);\n-      return 1;\n-    }\n-  return 0;\n-}\n-\n /* Fix placement of superloops of LOOP inside loop tree, i.e. ensure that\n    condition stated in description of fix_loop_placement holds for them.\n    It is used in case when we removed some edges coming out of LOOP, which"}, {"sha": "05530adcfaf942805c6664e4b9d84fd1ca90f27e", "filename": "gcc/loop-unswitch.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c1c7e3bdb764d242c29d530a0730dd864323a8/gcc%2Floop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c1c7e3bdb764d242c29d530a0730dd864323a8/gcc%2Floop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unswitch.c?ref=b4c1c7e3bdb764d242c29d530a0730dd864323a8", "patch": "@@ -458,11 +458,6 @@ unswitch_loop (struct loop *loop, basic_block unswitch_on, rtx cond, rtx cinsn)\n   remove_path (true_edge);\n   remove_path (false_edge);\n \n-  /* One of created loops do not have to be subloop of the outer loop now,\n-     so fix its placement in loop data structure.  */\n-  fix_loop_placement (loop);\n-  fix_loop_placement (nloop);\n-\n   /* Preserve the simple loop preheaders.  */\n   split_edge (loop_preheader_edge (loop));\n   split_edge (loop_preheader_edge (nloop));"}]}