{"sha": "15941d29c876e99179d1184c82100edc6dde4d2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU5NDFkMjljODc2ZTk5MTc5ZDExODRjODIxMDBlZGM2ZGRlNGQyYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-02-17T21:54:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-17T21:54:24Z"}, "message": "combine.c (simplify_rtx): Obey CLASS_CANNOT_CHANGE_SIZE when simplifying a subreg of a hard reg.\n\n        * combine.c (simplify_rtx): Obey CLASS_CANNOT_CHANGE_SIZE when\n        simplifying a subreg of a hard reg.\n        (expand_compound_operation): Likewise.\n        (force_to_mode): Likewise.\n\nFrom-SVN: r18052", "tree": {"sha": "b858b5b177590b137ed147ae1f5109f540493519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b858b5b177590b137ed147ae1f5109f540493519"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15941d29c876e99179d1184c82100edc6dde4d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15941d29c876e99179d1184c82100edc6dde4d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15941d29c876e99179d1184c82100edc6dde4d2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15941d29c876e99179d1184c82100edc6dde4d2a/comments", "author": null, "committer": null, "parents": [{"sha": "d84a12e2de3b034e416eba9f808be56e309bc30d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d84a12e2de3b034e416eba9f808be56e309bc30d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d84a12e2de3b034e416eba9f808be56e309bc30d"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "757b6aa018754412588c286836765dbc87490eea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15941d29c876e99179d1184c82100edc6dde4d2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15941d29c876e99179d1184c82100edc6dde4d2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15941d29c876e99179d1184c82100edc6dde4d2a", "patch": "@@ -1,3 +1,10 @@\n+Tue Feb 17 22:56:14 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* combine.c (simplify_rtx): Obey CLASS_CANNOT_CHANGE_SIZE when\n+\tsimplifying a subreg of a hard reg.\n+\t(expand_compound_operation): Likewise.\n+\t(force_to_mode): Likewise.\n+\n Tue Feb 17 22:37:22 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (gcc.o): Depend on system.h, in accordance with last"}, {"sha": "dc8cc63853c38a210335a76ab1448f20bb516b54", "filename": "gcc/combine.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15941d29c876e99179d1184c82100edc6dde4d2a/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15941d29c876e99179d1184c82100edc6dde4d2a/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=15941d29c876e99179d1184c82100edc6dde4d2a", "patch": "@@ -3483,6 +3483,13 @@ simplify_rtx (x, op0_mode, last, in_dest)\n \n       if (GET_CODE (SUBREG_REG (x)) == REG\n \t  && REGNO (SUBREG_REG (x)) < FIRST_PSEUDO_REGISTER\n+#ifdef CLASS_CANNOT_CHANGE_SIZE\n+\t  && (! (TEST_HARD_REG_BIT\n+\t\t (reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n+\t\t  REGNO (SUBREG_REG (x))))\n+\t      || (GET_MODE_SIZE (mode)\n+\t\t  == GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))\n+#endif\n \t  && REGNO (SUBREG_REG (x)) != FRAME_POINTER_REGNUM\n #if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n \t  && REGNO (SUBREG_REG (x)) != HARD_FRAME_POINTER_REGNUM\n@@ -5106,6 +5113,20 @@ expand_compound_operation (x)\n   int modewidth;\n   rtx tem;\n \n+#ifdef CLASS_CANNOT_CHANGE_SIZE\n+  /* When dealing with hard regs that cannot change size, don't even try\n+     expanding to shifts, since we wind up violating the rule.  */\n+  if (GET_RTX_CLASS (GET_CODE (x)) == '1'\n+      && GET_CODE (XEXP (x, 0)) == REG\n+      && REGNO (SUBREG_REG (x)) < FIRST_PSEUDO_REGISTER\n+      && (TEST_HARD_REG_BIT\n+\t  (reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n+\t   REGNO (SUBREG_REG (x))))\n+      && (GET_MODE_SIZE (GET_MODE (x))\n+\t  != GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))\n+    return x;\n+#endif\n+\n   switch (GET_CODE (x))\n     {\n     case ZERO_EXTEND:\n@@ -6222,6 +6243,17 @@ force_to_mode (x, mode, mask, reg, just_select)\n       break;\n \n     case SUBREG:\n+#ifdef CLASS_CANNOT_CHANGE_SIZE\n+      if (GET_CODE (SUBREG_REG (x)) == REG\n+\t  && REGNO (SUBREG_REG (x)) < FIRST_PSEUDO_REGISTER\n+\t  && (TEST_HARD_REG_BIT\n+\t      (reg_class_contents[(int) CLASS_CANNOT_CHANGE_SIZE],\n+\t       REGNO (SUBREG_REG (x))))\n+\t  && (GET_MODE_SIZE (GET_MODE (x))\n+\t      != GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))))\n+\treturn x;\n+#endif\n+\n       if (subreg_lowpart_p (x)\n \t  /* We can ignore the effect of this SUBREG if it narrows the mode or\n \t     if the constant masks to zero all the bits the mode doesn't"}]}