{"sha": "9bf9f27ac6db4823628c435da9b242fd82bf8d68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmOWYyN2FjNmRiNDgyMzYyOGM0MzVkYTliMjQyZmQ4MmJmOGQ2OA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-08T17:34:27Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-07-08T17:43:47Z"}, "message": "Use Object Size Type zero for -Warray-bounds [PR101374].\n\nResolves:\nPR bootstrap/101374 - -Warray-bounds accessing a member subobject as derived\n\ngcc/cp/ChangeLog:\n\tPR bootstrap/101374\n\t* module.cc (module_state::read_macro_maps): Temporarily disable\n\t-Warray-bounds.\n\t(module_state::install_macros): Same.\n\ngcc/ChangeLog:\n\tPR bootstrap/101374\n\t* gimple-array-bounds.cc (array_bounds_checker::check_mem_ref):\n\tUse Object Size Type 0 instead of 1.\n\ngcc/testsuite/ChangeLog:\n\tPR bootstrap/101374\n\t* c-c++-common/Warray-bounds-3.c: Xfail assertion.\n\t* c-c++-common/Warray-bounds-4.c: Same.", "tree": {"sha": "eb069a0bbba285e95cf3db4c4c11742f6fc26117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb069a0bbba285e95cf3db4c4c11742f6fc26117"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bf9f27ac6db4823628c435da9b242fd82bf8d68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf9f27ac6db4823628c435da9b242fd82bf8d68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf9f27ac6db4823628c435da9b242fd82bf8d68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf9f27ac6db4823628c435da9b242fd82bf8d68/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ca642d785c49e9e0b28651b190720267703f023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca642d785c49e9e0b28651b190720267703f023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca642d785c49e9e0b28651b190720267703f023"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "8a890c167cf893d876d5f8e2223242ed6ee9828f", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf9f27ac6db4823628c435da9b242fd82bf8d68/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf9f27ac6db4823628c435da9b242fd82bf8d68/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=9bf9f27ac6db4823628c435da9b242fd82bf8d68", "patch": "@@ -16301,11 +16301,18 @@ module_state::read_macro_maps ()\n \t}\n       if (count)\n \tsec.set_overrun ();\n+\n+      /* FIXME: Re-enable or fix after root causing.  */\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Warray-bounds\"\n+\n       dump (dumper::LOCATION)\n \t&& dump (\"Macro:%u %I %u/%u*2 locations [%u,%u)\",\n \t\t ix, identifier (node), runs, n_tokens,\n \t\t MAP_START_LOCATION (macro),\n \t\t MAP_START_LOCATION (macro) + n_tokens);\n+\n+#pragma GCC diagnostic pop\n     }\n   location_t lwm = sec.u ();\n   macro_locs.first = lwm - slurp->loc_deltas.second;\n@@ -16911,6 +16918,10 @@ module_state::install_macros ()\n       macro_import::slot &slot = imp.append (mod, flags);\n       slot.offset = sec.u ();\n \n+      /* FIXME: Re-enable or fix after root causing.  */\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Warray-bounds\"\n+\n       dump (dumper::MACRO)\n \t&& dump (\"Read %s macro %s%s%s %I at %u\",\n \t\t imp.length () > 1 ? \"add\" : \"new\",\n@@ -16931,6 +16942,8 @@ module_state::install_macros ()\n \t    exp.def = cur;\n \t    dump (dumper::MACRO)\n \t      && dump (\"Saving current #define %I\", identifier (node));\n+\n+#pragma GCC diagnostic pop\n \t  }\n     }\n "}, {"sha": "8dfd6f9500ad89a5f5df015e654d0beef0babf77", "filename": "gcc/gimple-array-bounds.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf9f27ac6db4823628c435da9b242fd82bf8d68/gcc%2Fgimple-array-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf9f27ac6db4823628c435da9b242fd82bf8d68/gcc%2Fgimple-array-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.cc?ref=9bf9f27ac6db4823628c435da9b242fd82bf8d68", "patch": "@@ -427,7 +427,7 @@ array_bounds_checker::check_mem_ref (location_t location, tree ref,\n \taxssize = wi::to_offset (access_size);\n \n   access_ref aref;\n-  if (!compute_objsize (ref, 1, &aref, ranges))\n+  if (!compute_objsize (ref, 0, &aref, ranges))\n     return false;\n \n   if (aref.offset_in_range (axssize))"}, {"sha": "75f9a496eae801cdc45f2d97760dd9b48d0036d6", "filename": "gcc/testsuite/c-c++-common/Warray-bounds-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf9f27ac6db4823628c435da9b242fd82bf8d68/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf9f27ac6db4823628c435da9b242fd82bf8d68/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-3.c?ref=9bf9f27ac6db4823628c435da9b242fd82bf8d68", "patch": "@@ -178,7 +178,7 @@ void test_memcpy_bounds_memarray_range (void)\n \n   TM (ma.a5, ma.a5 + i, ma.a5, 1);\n   TM (ma.a5, ma.a5 + i, ma.a5, 3);\n-  TM (ma.a5, ma.a5 + i, ma.a5, 5);     /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+  TM (ma.a5, ma.a5 + i, ma.a5, 5);     /* { dg-warning \"\\\\\\[-Warray-bounds\" \"pr101374\" { xfail *-*-* } } */\n   TM (ma.a5, ma.a5 + i, ma.a5, 7);     /* diagnosed with -Warray-bounds=2 */\n }\n "}, {"sha": "835c634fd27bffbefa8fb08596c643b41aeef576", "filename": "gcc/testsuite/c-c++-common/Warray-bounds-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf9f27ac6db4823628c435da9b242fd82bf8d68/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf9f27ac6db4823628c435da9b242fd82bf8d68/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-4.c?ref=9bf9f27ac6db4823628c435da9b242fd82bf8d68", "patch": "@@ -52,7 +52,7 @@ void test_memcpy_bounds_memarray_range (void)\n          = MEM <unsigned char[5]> [(char * {ref-all})&ma];\n      and could be improved.  Just verify that one is issued but not its\n      full text.  */\n-  TM (ma.a5, ma.a5 + j, ma.a5, 5);        /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+  TM (ma.a5, ma.a5 + j, ma.a5, 5);        /* { dg-warning \"\\\\\\[-Warray-bounds\" \"pr101374\" { xfail *-*-* } } */\n \n   TM (ma.a5, ma.a5 + j, ma.a5, 7);        /* { dg-warning \"offset \\\\\\[5, 7] from the object at .ma. is out of the bounds of referenced subobject .\\(MA::\\)?a5. with type .char ?\\\\\\[5]. at offset 0\" } */\n   TM (ma.a5, ma.a5 + j, ma.a5, 9);        /* { dg-warning \"offset \\\\\\[5, 9] from the object at .ma. is out of the bounds of referenced subobject .\\(MA::\\)?a5. with type .char ?\\\\\\[5]. at offset 0\" } */"}]}