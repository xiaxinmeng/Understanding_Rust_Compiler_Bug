{"sha": "36b729105699ba208e17f22fd04f69c9d9cff72d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZiNzI5MTA1Njk5YmEyMDhlMTdmMjJmZDA0ZjY5YzlkOWNmZjcyZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-01-08T20:23:05Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-01-08T20:23:05Z"}, "message": "re PR tree-optimization/55823 (ice in inline_call, at ipa-inline-transform.c:270)\n\n\n\tPR tree-optimization/55823\n\t* ipa-prop.c (update_indirect_edges_after_inlining): Fix ordering issue.\n\nFrom-SVN: r195033", "tree": {"sha": "5da1cd3c072173cd3c6af1874bb0860ea4e36257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5da1cd3c072173cd3c6af1874bb0860ea4e36257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36b729105699ba208e17f22fd04f69c9d9cff72d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b729105699ba208e17f22fd04f69c9d9cff72d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b729105699ba208e17f22fd04f69c9d9cff72d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b729105699ba208e17f22fd04f69c9d9cff72d/comments", "author": null, "committer": null, "parents": [{"sha": "8158c6570359ab4eedb325997e2417e87451fb9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8158c6570359ab4eedb325997e2417e87451fb9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8158c6570359ab4eedb325997e2417e87451fb9e"}], "stats": {"total": 96, "additions": 69, "deletions": 27}, "files": [{"sha": "05754555fcd3715320e463b61115e37790e4d4b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b729105699ba208e17f22fd04f69c9d9cff72d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b729105699ba208e17f22fd04f69c9d9cff72d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36b729105699ba208e17f22fd04f69c9d9cff72d", "patch": "@@ -1,3 +1,8 @@\n+2013-01-04  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/55823\n+\t* ipa-prop.c (update_indirect_edges_after_inlining): Fix ordering issue.\n+\n 2012-01-08  Jakub Jelinek  <jakub@redhat.com>\n \t    Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "2c7e13c3276425ef064f92388f40be1d65949a50", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b729105699ba208e17f22fd04f69c9d9cff72d/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b729105699ba208e17f22fd04f69c9d9cff72d/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=36b729105699ba208e17f22fd04f69c9d9cff72d", "patch": "@@ -2264,40 +2264,15 @@ update_indirect_edges_after_inlining (struct cgraph_edge *cs,\n \n       param_index = ici->param_index;\n       jfunc = ipa_get_ith_jump_func (top, param_index);\n-      if (jfunc->type == IPA_JF_PASS_THROUGH\n-\t  && ipa_get_jf_pass_through_operation (jfunc) == NOP_EXPR)\n-\t{\n-\t  if (ici->agg_contents\n-\t      && !ipa_get_jf_pass_through_agg_preserved (jfunc))\n-\t    ici->param_index = -1;\n-\t  else\n-\t    ici->param_index = ipa_get_jf_pass_through_formal_id (jfunc);\n-\t}\n-      else if (jfunc->type == IPA_JF_ANCESTOR)\n-\t{\n-\t  if (ici->agg_contents\n-\t      && !ipa_get_jf_ancestor_agg_preserved (jfunc))\n-\t    ici->param_index = -1;\n-\t  else\n-\t    {\n-\t      ici->param_index = ipa_get_jf_ancestor_formal_id (jfunc);\n-\t      ici->offset += ipa_get_jf_ancestor_offset (jfunc);\n-\t    }\n-\t}\n-      else\n-\t/* Either we can find a destination for this edge now or never. */\n-\tici->param_index = -1;\n \n       if (!flag_indirect_inlining)\n-\tcontinue;\n-\n-      if (ici->polymorphic)\n+\tnew_direct_edge = NULL;\n+      else if (ici->polymorphic)\n \tnew_direct_edge = try_make_edge_direct_virtual_call (ie, jfunc,\n \t\t\t\t\t\t\t     new_root_info);\n       else\n \tnew_direct_edge = try_make_edge_direct_simple_call (ie, jfunc,\n \t\t\t\t\t\t\t    new_root_info);\n-\n       if (new_direct_edge)\n \t{\n \t  new_direct_edge->indirect_inlining_edge = 1;\n@@ -2312,6 +2287,29 @@ update_indirect_edges_after_inlining (struct cgraph_edge *cs,\n \t      res = true;\n \t    }\n \t}\n+      else if (jfunc->type == IPA_JF_PASS_THROUGH\n+\t       && ipa_get_jf_pass_through_operation (jfunc) == NOP_EXPR)\n+\t{\n+\t  if (ici->agg_contents\n+\t      && !ipa_get_jf_pass_through_agg_preserved (jfunc))\n+\t    ici->param_index = -1;\n+\t  else\n+\t    ici->param_index = ipa_get_jf_pass_through_formal_id (jfunc);\n+\t}\n+      else if (jfunc->type == IPA_JF_ANCESTOR)\n+\t{\n+\t  if (ici->agg_contents\n+\t      && !ipa_get_jf_ancestor_agg_preserved (jfunc))\n+\t    ici->param_index = -1;\n+\t  else\n+\t    {\n+\t      ici->param_index = ipa_get_jf_ancestor_formal_id (jfunc);\n+\t      ici->offset += ipa_get_jf_ancestor_offset (jfunc);\n+\t    }\n+\t}\n+      else\n+\t/* Either we can find a destination for this edge now or never. */\n+\tici->param_index = -1;\n     }\n \n   return res;"}, {"sha": "f22287404f953bb59de668284cff0e731c757b5f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b729105699ba208e17f22fd04f69c9d9cff72d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b729105699ba208e17f22fd04f69c9d9cff72d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36b729105699ba208e17f22fd04f69c9d9cff72d", "patch": "@@ -1,3 +1,8 @@\n+2013-01-04  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimization/55823\n+\t* g++.dg/ipa/devirt-10.C: New testcase.\n+\n 2012-01-08  Uros Bizjak  <ubizjak@gmail.com>\n \t    Vladimir Yakovlev  <vladimir.b.yakovlev@intel.com>\n "}, {"sha": "6550ff0991e5f8abab319c87027fec6a2f8fa0b4", "filename": "gcc/testsuite/g++.dg/ipa/devirt-10.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b729105699ba208e17f22fd04f69c9d9cff72d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b729105699ba208e17f22fd04f69c9d9cff72d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-10.C?ref=36b729105699ba208e17f22fd04f69c9d9cff72d", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-ipa-inline -fdump-ipa-cp\"  } */\n+class wxPaintEvent {  };\n+struct wxDCBase\n+{ \n+  wxDCBase ();\n+  virtual int GetLayoutDirection() const{}\n+  virtual void SetLayoutDirection(int){}\n+};\n+struct wxWindowDC  : public wxDCBase {};\n+struct wxBufferedDC  : public wxDCBase\n+{ \n+  void Init(wxDCBase*dc) {\n+    InitCommon(dc);\n+  }\n+  void InitCommon(wxDCBase*dc) {\n+    if (dc)\n+      SetLayoutDirection(dc->GetLayoutDirection());\n+  }\n+};\n+struct wxBufferedPaintDC  : public wxBufferedDC {\n+  wxBufferedPaintDC() {\n+    Init(&m_paintdc);\n+  }\n+ wxWindowDC m_paintdc;\n+};\n+void  OnPaint(wxPaintEvent & event) {\n+  wxBufferedPaintDC dc;\n+}\n+/* IPA-CP should really discover both cases, but for time being the second is handled by inliner.  */\n+/* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a known target\" 1 \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump-times \"Discovered a virtual call to a known target\" 1 \"cp\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"inline\" } } */\n+/* { dg-final { cleanup-ipa-dump \"cp\" } } */"}]}