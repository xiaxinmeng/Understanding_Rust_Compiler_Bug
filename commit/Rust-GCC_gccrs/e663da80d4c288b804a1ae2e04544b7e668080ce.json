{"sha": "e663da80d4c288b804a1ae2e04544b7e668080ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY2M2RhODBkNGMyODhiODA0YTFhZTJlMDQ1NDRiN2U2NjgwODBjZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2008-05-08T21:28:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-05-08T21:28:27Z"}, "message": "gensupport.h (pred_data): Add a \"num_codes\" field.\n\ngcc/\n\t* gensupport.h (pred_data): Add a \"num_codes\" field.\n\t(add_predicate_code): Declare.\n\t* gensupport.c (add_predicate_code): New function.\n\t(std_pred_table): Add an \"allows_const_p\" field.\n\t(std_preds): Set this field for predicates that allow RTX_CONST_OBJs.\n\tRemove the (incomplete) list of such codes from the codes field.\n\t(init_predicate_table): Use add_predicate_code.  Add all\n\tRTX_CONST_OBJs if allows_const_p is true.\n\t* genrecog.c (process_define_predicate): Use add_predicate_code.\n\nFrom-SVN: r135090", "tree": {"sha": "be8f401f9b48aa6d624266499579b7f40d103455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be8f401f9b48aa6d624266499579b7f40d103455"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e663da80d4c288b804a1ae2e04544b7e668080ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e663da80d4c288b804a1ae2e04544b7e668080ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e663da80d4c288b804a1ae2e04544b7e668080ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e663da80d4c288b804a1ae2e04544b7e668080ce/comments", "author": null, "committer": null, "parents": [{"sha": "977502ff8431f42bc84b71dd5814658439610c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/977502ff8431f42bc84b71dd5814658439610c7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/977502ff8431f42bc84b71dd5814658439610c7b"}], "stats": {"total": 130, "additions": 71, "deletions": 59}, "files": [{"sha": "7a53d5d62b554a64d0d91eff17c489f38455ec9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e663da80d4c288b804a1ae2e04544b7e668080ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e663da80d4c288b804a1ae2e04544b7e668080ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e663da80d4c288b804a1ae2e04544b7e668080ce", "patch": "@@ -1,3 +1,15 @@\n+2008-05-08  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* gensupport.h (pred_data): Add a \"num_codes\" field.\n+\t(add_predicate_code): Declare.\n+\t* gensupport.c (add_predicate_code): New function.\n+\t(std_pred_table): Add an \"allows_const_p\" field.\n+\t(std_preds): Set this field for predicates that allow RTX_CONST_OBJs.\n+\tRemove the (incomplete) list of such codes from the codes field.\n+\t(init_predicate_table): Use add_predicate_code.  Add all\n+\tRTX_CONST_OBJs if allows_const_p is true.\n+\t* genrecog.c (process_define_predicate): Use add_predicate_code.\n+\n 2008-05-08  David Daney  <ddaney@avtrex.com>\n \t    Richard Sandiford  <rsandifo@nildram.co.uk>\n \t"}, {"sha": "43afa7f449ce1bbf467391561db7dd022d1e9664", "filename": "gcc/genrecog.c", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e663da80d4c288b804a1ae2e04544b7e668080ce/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e663da80d4c288b804a1ae2e04544b7e668080ce/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=e663da80d4c288b804a1ae2e04544b7e668080ce", "patch": "@@ -368,7 +368,6 @@ process_define_predicate (rtx desc)\n {\n   struct pred_data *pred = xcalloc (sizeof (struct pred_data), 1);\n   char codes[NUM_RTX_CODE];\n-  bool seen_one = false;\n   int i;\n \n   pred->name = XSTR (desc, 0);\n@@ -379,26 +378,8 @@ process_define_predicate (rtx desc)\n \n   for (i = 0; i < NUM_RTX_CODE; i++)\n     if (codes[i] != N)\n-      {\n-\tpred->codes[i] = true;\n-\tif (GET_RTX_CLASS (i) != RTX_CONST_OBJ)\n-\t  pred->allows_non_const = true;\n-\tif (i != REG\n-\t    && i != SUBREG\n-\t    && i != MEM\n-\t    && i != CONCAT\n-\t    && i != PARALLEL\n-\t    && i != STRICT_LOW_PART)\n-\t  pred->allows_non_lvalue = true;\n-\n-\tif (seen_one)\n-\t  pred->singleton = UNKNOWN;\n-\telse\n-\t  {\n-\t    pred->singleton = i;\n-\t    seen_one = true;\n-\t  }\n-      }\n+      add_predicate_code (pred, i);\n+\n   add_predicate (pred);\n }\n #undef I"}, {"sha": "f455eb9726003ac75338db6fa68cea5b81b64d43", "filename": "gcc/gensupport.c", "status": "modified", "additions": 55, "deletions": 38, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e663da80d4c288b804a1ae2e04544b7e668080ce/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e663da80d4c288b804a1ae2e04544b7e668080ce/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=e663da80d4c288b804a1ae2e04544b7e668080ce", "patch": "@@ -1299,6 +1299,34 @@ lookup_predicate (const char *name)\n   return (struct pred_data *) htab_find (predicate_table, &key);\n }\n \n+/* Record that predicate PRED can accept CODE.  */\n+\n+void\n+add_predicate_code (struct pred_data *pred, enum rtx_code code)\n+{\n+  if (!pred->codes[code])\n+    {\n+      pred->num_codes++;\n+      pred->codes[code] = true;\n+\n+      if (GET_RTX_CLASS (code) != RTX_CONST_OBJ)\n+\tpred->allows_non_const = true;\n+\n+      if (code != REG\n+\t  && code != SUBREG\n+\t  && code != MEM\n+\t  && code != CONCAT\n+\t  && code != PARALLEL\n+\t  && code != STRICT_LOW_PART)\n+\tpred->allows_non_lvalue = true;\n+\n+      if (pred->num_codes == 1)\n+\tpred->singleton = code;\n+      else if (pred->num_codes == 2)\n+\tpred->singleton = UNKNOWN;\n+    }\n+}\n+\n void\n add_predicate (struct pred_data *pred)\n {\n@@ -1320,32 +1348,31 @@ struct std_pred_table\n {\n   const char *name;\n   bool special;\n+  bool allows_const_p;\n   RTX_CODE codes[NUM_RTX_CODE];\n };\n \n static const struct std_pred_table std_preds[] = {\n-  {\"general_operand\", false, {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n-\t\t\t      LABEL_REF, SUBREG, REG, MEM }},\n-  {\"address_operand\", true, {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n-\t\t\t     LABEL_REF, SUBREG, REG, MEM,\n-\t\t\t     PLUS, MINUS, MULT}},\n-  {\"register_operand\", false, {SUBREG, REG}},\n-  {\"pmode_register_operand\", true, {SUBREG, REG}},\n-  {\"scratch_operand\", false, {SCRATCH, REG}},\n-  {\"immediate_operand\", false, {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n-\t\t\t\tLABEL_REF}},\n-  {\"const_int_operand\", false, {CONST_INT}},\n-  {\"const_double_operand\", false, {CONST_INT, CONST_DOUBLE}},\n-  {\"nonimmediate_operand\", false, {SUBREG, REG, MEM}},\n-  {\"nonmemory_operand\", false, {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n-\t\t\t        LABEL_REF, SUBREG, REG}},\n-  {\"push_operand\", false, {MEM}},\n-  {\"pop_operand\", false, {MEM}},\n-  {\"memory_operand\", false, {SUBREG, MEM}},\n-  {\"indirect_operand\", false, {SUBREG, MEM}},\n-  {\"comparison_operator\", false, {EQ, NE, LE, LT, GE, GT, LEU, LTU, GEU, GTU,\n-\t\t\t\t  UNORDERED, ORDERED, UNEQ, UNGE, UNGT, UNLE,\n-\t\t\t\t  UNLT, LTGT}}\n+  {\"general_operand\", false, true, {SUBREG, REG, MEM}},\n+  {\"address_operand\", true, true, {SUBREG, REG, MEM, PLUS, MINUS, MULT}},\n+  {\"register_operand\", false, false, {SUBREG, REG}},\n+  {\"pmode_register_operand\", true, false, {SUBREG, REG}},\n+  {\"scratch_operand\", false, false, {SCRATCH, REG}},\n+  {\"immediate_operand\", false, true, {0}},\n+  {\"const_int_operand\", false, false, {CONST_INT}},\n+  {\"const_double_operand\", false, false, {CONST_INT, CONST_DOUBLE}},\n+  {\"nonimmediate_operand\", false, false, {SUBREG, REG, MEM}},\n+  {\"nonmemory_operand\", false, true, {SUBREG, REG}},\n+  {\"push_operand\", false, false, {MEM}},\n+  {\"pop_operand\", false, false, {MEM}},\n+  {\"memory_operand\", false, false, {SUBREG, MEM}},\n+  {\"indirect_operand\", false, false, {SUBREG, MEM}},\n+  {\"comparison_operator\", false, false, {EQ, NE,\n+\t\t\t\t\t LE, LT, GE, GT,\n+\t\t\t\t\t LEU, LTU, GEU, GTU,\n+\t\t\t\t\t UNORDERED, ORDERED,\n+\t\t\t\t\t UNEQ, UNGE, UNGT,\n+\t\t\t\t\t UNLE, UNLT, LTGT}}\n };\n #define NUM_KNOWN_STD_PREDS ARRAY_SIZE (std_preds)\n \n@@ -1369,22 +1396,12 @@ init_predicate_table (void)\n       pred->special = std_preds[i].special;\n \n       for (j = 0; std_preds[i].codes[j] != 0; j++)\n-\t{\n-\t  enum rtx_code code = std_preds[i].codes[j];\n-\n-\t  pred->codes[code] = true;\n-\t  if (GET_RTX_CLASS (code) != RTX_CONST_OBJ)\n-\t    pred->allows_non_const = true;\n-\t  if (code != REG\n-\t      && code != SUBREG\n-\t      && code != MEM\n-\t      && code != CONCAT\n-\t      && code != PARALLEL\n-\t      && code != STRICT_LOW_PART)\n-\t    pred->allows_non_lvalue = true;\n-\t}\n-      if (j == 1)\n-\tpred->singleton = std_preds[i].codes[0];\n+\tadd_predicate_code (pred, std_preds[i].codes[j]);\n+\n+      if (std_preds[i].allows_const_p)\n+\tfor (j = 0; j < NUM_RTX_CODE; j++)\n+\t  if (GET_RTX_CLASS (j) == RTX_CONST_OBJ)\n+\t    add_predicate_code (pred, j);\n       \n       add_predicate (pred);\n     }"}, {"sha": "effd4a4b397ad72e7b67247fa09c1d91e81219e5", "filename": "gcc/gensupport.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e663da80d4c288b804a1ae2e04544b7e668080ce/gcc%2Fgensupport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e663da80d4c288b804a1ae2e04544b7e668080ce/gcc%2Fgensupport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.h?ref=e663da80d4c288b804a1ae2e04544b7e668080ce", "patch": "@@ -76,13 +76,15 @@ struct pred_data\n \n   /* data used primarily by genrecog.c */\n   enum rtx_code singleton;\t/* if pred takes only one code, that code */\n+  int num_codes;\t\t/* number of codes accepted */\n   bool allows_non_lvalue;\t/* if pred allows non-lvalue expressions */\n   bool allows_non_const;\t/* if pred allows non-const expressions */\n   bool codes[NUM_RTX_CODE];\t/* set of codes accepted */\n };\n \n extern struct pred_data *first_predicate;\n extern struct pred_data *lookup_predicate (const char *);\n+extern void add_predicate_code (struct pred_data *, enum rtx_code);\n extern void add_predicate (struct pred_data *);\n \n #define FOR_ALL_PREDICATES(p) for (p = first_predicate; p; p = p->next)"}]}