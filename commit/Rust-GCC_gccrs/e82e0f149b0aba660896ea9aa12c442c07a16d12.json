{"sha": "e82e0f149b0aba660896ea9aa12c442c07a16d12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgyZTBmMTQ5YjBhYmE2NjA4OTZlYTlhYTEyYzQ0MmMwN2ExNmQxMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-08-23T18:07:39Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-08-23T18:07:39Z"}, "message": "analyzer: assume that POINTER_PLUS_EXPR of non-NULL is non-NULL [PR101962]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/101962\n\t* region-model.cc (region_model::eval_condition_without_cm):\n\tRefactor comparison against zero, adding a check for\n\tPOINTER_PLUS_EXPR of non-NULL.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/101962\n\t* gcc.dg/analyzer/data-model-23.c: New test.\n\t* gcc.dg/analyzer/pr101962.c: New test.", "tree": {"sha": "bc133a101b92b4371785c28962ffd69e0781045c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc133a101b92b4371785c28962ffd69e0781045c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e82e0f149b0aba660896ea9aa12c442c07a16d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e82e0f149b0aba660896ea9aa12c442c07a16d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e82e0f149b0aba660896ea9aa12c442c07a16d12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e82e0f149b0aba660896ea9aa12c442c07a16d12/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4892b3087412e6afc261cc9977ef4b54c799660f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4892b3087412e6afc261cc9977ef4b54c799660f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4892b3087412e6afc261cc9977ef4b54c799660f"}], "stats": {"total": 150, "additions": 122, "deletions": 28}, "files": [{"sha": "f54be14e6396f176c80ae4a2de8507acfd09e218", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 45, "deletions": 28, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e82e0f149b0aba660896ea9aa12c442c07a16d12/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e82e0f149b0aba660896ea9aa12c442c07a16d12/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=e82e0f149b0aba660896ea9aa12c442c07a16d12", "patch": "@@ -2488,34 +2488,51 @@ region_model::eval_condition_without_cm (const svalue *lhs,\n     if (const constant_svalue *cst_rhs = rhs->dyn_cast_constant_svalue ())\n       return constant_svalue::eval_condition (cst_lhs, op, cst_rhs);\n \n-  /* Handle comparison of a region_svalue against zero.  */\n-\n-  if (const region_svalue *ptr = lhs->dyn_cast_region_svalue ())\n-    if (const constant_svalue *cst_rhs = rhs->dyn_cast_constant_svalue ())\n-      if (zerop (cst_rhs->get_constant ()))\n-\t{\n-\t  /* A region_svalue is a non-NULL pointer, except in certain\n-\t     special cases (see the comment for region::non_null_p.  */\n-\t  const region *pointee = ptr->get_pointee ();\n-\t  if (pointee->non_null_p ())\n-\t    {\n-\t      switch (op)\n-\t\t{\n-\t\tdefault:\n-\t\t  gcc_unreachable ();\n-\n-\t\tcase EQ_EXPR:\n-\t\tcase GE_EXPR:\n-\t\tcase LE_EXPR:\n-\t\t  return tristate::TS_FALSE;\n-\n-\t\tcase NE_EXPR:\n-\t\tcase GT_EXPR:\n-\t\tcase LT_EXPR:\n-\t\t  return tristate::TS_TRUE;\n-\t\t}\n-\t    }\n-\t}\n+  /* Handle comparison against zero.  */\n+  if (const constant_svalue *cst_rhs = rhs->dyn_cast_constant_svalue ())\n+    if (zerop (cst_rhs->get_constant ()))\n+      {\n+\tif (const region_svalue *ptr = lhs->dyn_cast_region_svalue ())\n+\t  {\n+\t    /* A region_svalue is a non-NULL pointer, except in certain\n+\t       special cases (see the comment for region::non_null_p).  */\n+\t    const region *pointee = ptr->get_pointee ();\n+\t    if (pointee->non_null_p ())\n+\t      {\n+\t\tswitch (op)\n+\t\t  {\n+\t\t  default:\n+\t\t    gcc_unreachable ();\n+\n+\t\t  case EQ_EXPR:\n+\t\t  case GE_EXPR:\n+\t\t  case LE_EXPR:\n+\t\t    return tristate::TS_FALSE;\n+\n+\t\t  case NE_EXPR:\n+\t\t  case GT_EXPR:\n+\t\t  case LT_EXPR:\n+\t\t    return tristate::TS_TRUE;\n+\t\t  }\n+\t      }\n+\t  }\n+\telse if (const binop_svalue *binop = lhs->dyn_cast_binop_svalue ())\n+\t  {\n+\t    /* Treat offsets from a non-NULL pointer as being non-NULL.  This\n+\t       isn't strictly true, in that eventually ptr++ will wrap\n+\t       around and be NULL, but it won't occur in practise and thus\n+\t       can be used to suppress effectively false positives that we\n+\t       shouldn't warn for.  */\n+\t    if (binop->get_op () == POINTER_PLUS_EXPR)\n+\t      {\n+\t\ttristate lhs_ts\n+\t\t  = eval_condition_without_cm (binop->get_arg0 (),\n+\t\t\t\t\t       op, rhs);\n+\t\tif (lhs_ts.is_known ())\n+\t\t  return lhs_ts;\n+\t      }\n+\t  }\n+      }\n \n   /* Handle rejection of equality for comparisons of the initial values of\n      \"external\" values (such as params) with the address of locals.  */"}, {"sha": "c76dd4ed31e0f71c6068a38b220fe0caca4b3d31", "filename": "gcc/testsuite/gcc.dg/analyzer/data-model-23.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e82e0f149b0aba660896ea9aa12c442c07a16d12/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e82e0f149b0aba660896ea9aa12c442c07a16d12/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdata-model-23.c?ref=e82e0f149b0aba660896ea9aa12c442c07a16d12", "patch": "@@ -0,0 +1,26 @@\n+#include \"analyzer-decls.h\"\n+\n+#define NULL ((void *)0)\n+\n+void * __attribute__((noinline))\n+hide (void *ptr)\n+{\n+  return ptr;\n+}\n+\n+void test_1 (void)\n+{\n+  int a;\n+  __analyzer_eval (hide (&a) == NULL); /* { dg-warning \"FALSE\" } */\n+  __analyzer_eval (hide (&a) + 1 != NULL); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (hide (&a) + 1 == NULL); /* { dg-warning \"FALSE\" } */\n+  __analyzer_eval (hide (&a) - 1 != NULL); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (hide (&a) - 1 == NULL); /* { dg-warning \"FALSE\" } */\n+}\n+\n+void test_2 (void)\n+{\n+  __analyzer_eval (hide (NULL) == NULL); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (hide (NULL) - 1 == NULL); /* { dg-warning \"FALSE\" } */\n+  __analyzer_eval (hide (NULL) + 1 == NULL); /* { dg-warning \"FALSE\" } */\n+}"}, {"sha": "7b83d0345b72f9ef09708222292062d559b2462d", "filename": "gcc/testsuite/gcc.dg/analyzer/pr101962.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e82e0f149b0aba660896ea9aa12c442c07a16d12/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101962.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e82e0f149b0aba660896ea9aa12c442c07a16d12/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101962.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr101962.c?ref=e82e0f149b0aba660896ea9aa12c442c07a16d12", "patch": "@@ -0,0 +1,51 @@\n+#include \"analyzer-decls.h\"\n+\n+#define NULL ((void *)0)\n+\n+/* Verify that the analyzer makes the simplifying assumption that we don't\n+   hit NULL when incrementing pointers to non-NULL memory regions.  */\n+\n+static int * __attribute__((noinline))\n+maybe_inc_int_ptr (int *ptr)\n+{\n+  if (!ptr)\n+    return NULL;\n+  return ++ptr;\n+}\n+\n+int\n+test_1 (void)\n+{\n+  int stack;\n+  int *a = &stack;\n+  a = maybe_inc_int_ptr (a);\n+  a = maybe_inc_int_ptr (a);\n+  __analyzer_eval (a == NULL); /* { dg-warning \"FALSE\" } */\n+  __analyzer_eval (a != NULL); /* { dg-warning \"TRUE\" } */\n+  return *a; /* { dg-warning \"use of uninitialized value '\\\\*a'\" } */\n+  /* TODO: a complaint about out-of-bounds would be a better warning.  */\n+}\n+\n+static const char * __attribute__((noinline))\n+maybe_inc_char_ptr (const char *ptr)\n+{\n+  if (!ptr)\n+    return NULL;\n+  return ++ptr;\n+}\n+\n+char\n+test_s (void)\n+{\n+  const char *msg = \"hello world\";\n+  const char *a = msg;\n+  __analyzer_eval (*a == 'h'); /* { dg-warning \"TRUE\" } */\n+  a = maybe_inc_char_ptr (a);\n+  __analyzer_eval (*a == 'e'); /* { dg-warning \"TRUE\" } */\n+  a = maybe_inc_char_ptr (a);\n+  __analyzer_eval (*a == 'l'); /* { dg-warning \"TRUE\" } */\n+  a = maybe_inc_char_ptr (a);\n+  __analyzer_eval (*a == 'l'); /* { dg-warning \"TRUE\" } */\n+  a = maybe_inc_char_ptr (a);\n+  __analyzer_eval (*a == 'o'); /* { dg-warning \"TRUE\" } */\n+}"}]}