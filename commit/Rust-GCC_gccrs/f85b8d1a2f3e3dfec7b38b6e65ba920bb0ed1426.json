{"sha": "f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg1YjhkMWEyZjNlM2RmZWM3YjM4YjZlNjViYTkyMGJiMGVkMTQyNg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-06-03T19:06:55Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-06-03T19:06:55Z"}, "message": "install-old.texi: Remove more old installation documentation.\n\n\t* doc/install-old.texi: Remove more old installation\n\tdocumentation.\n\t* doc/install.texi: Add relevant parts here.\n\nFrom-SVN: r42831", "tree": {"sha": "40bf14023fdfb043cf25a08f605902c6f32f4788", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40bf14023fdfb043cf25a08f605902c6f32f4788"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad82b43886d41756df0b778f44ebcb40c1ffe04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad82b43886d41756df0b778f44ebcb40c1ffe04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad82b43886d41756df0b778f44ebcb40c1ffe04"}], "stats": {"total": 541, "additions": 140, "deletions": 401}, "files": [{"sha": "c77ed73ae867da570b7970dbf0344a2b82982df0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426", "patch": "@@ -1,3 +1,9 @@\n+2001-06-03  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/install-old.texi: Remove more old installation\n+\tdocumentation.\n+\t* doc/install.texi: Add relevant parts here.\n+\n 2001-06-03  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* doc/install.texi2html: New script."}, {"sha": "3e1dbc94f6595a8b9a05cbcb476a60103acb7c11", "filename": "gcc/doc/install-old.texi", "status": "modified", "additions": 5, "deletions": 396, "changes": 401, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426/gcc%2Fdoc%2Finstall-old.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426/gcc%2Fdoc%2Finstall-old.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall-old.texi?ref=f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426", "patch": "@@ -2,64 +2,27 @@\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n-@c The text of this file appears in the file INSTALL\n-@c in the GCC distribution, as well as in the GCC manual.\n-\n-Note most of this information is out of date and superseded by the\n-online GCC install procedures @uref{http://gcc.gnu.org/install/}.  It is\n-provided for historical reference only.\n-\n-@ifclear INSTALLONLY\n @node Installation\n @chapter Installing GNU CC\n-@end ifclear\n @cindex installing GNU CC\n \n+Note most of this information is out of date and superseded by the\n+new GCC install manual @file{gcc/doc/install.texi}.  It is\n+provided for historical reference only.\n+\n @menu\n * Configuration Files::  Files created by running @code{configure}.\n * Configurations::    Configurations Supported by GNU CC.\n-* Other Dir::     Compiling in a separate directory (not where the source is).\n * Cross-Compiler::   Building and installing a cross-compiler.\n * VMS Install::   See below for installation on VMS.\n * Collect2::\t  How @code{collect2} works; how it finds @code{ld}.\n * Header Dirs::   Understanding the standard header file directories.\n @end menu\n \n Here is the procedure for installing GNU CC on a GNU or Unix system.\n-See @ref{VMS Install}, for VMS systems.  In this section we assume you\n-compile in the same directory that contains the source files; see\n-@ref{Other Dir}, to find out how to compile in a separate directory on\n-Unix systems.\n-\n-You cannot install GNU C by itself on MSDOS; it will not compile under\n-any MSDOS compiler except itself.  You need to get the complete\n-compilation package DJGPP, which includes binaries as well as sources,\n-and includes all the necessary compilation tools and libraries.\n+See @ref{VMS Install}, for VMS systems.\n \n @enumerate\n-@item\n-If you have built GNU CC previously in the same directory for a\n-different target machine, do @samp{make distclean} to delete all files\n-that might be invalid.  One of the files this deletes is\n-@file{Makefile}; if @samp{make distclean} complains that @file{Makefile}\n-does not exist, it probably means that the directory is already suitably\n-clean.\n-\n-@item\n-On a System V release 4 system, make sure @file{/usr/bin} precedes\n-@file{/usr/ucb} in @code{PATH}.  The @code{cc} command in\n-@file{/usr/ucb} uses libraries which have bugs.\n-\n-@cindex Bison parser generator\n-@cindex parser generator, Bison\n-@item\n-Make sure the Bison parser generator is installed.  (This is unnecessary\n-if the Bison output file @file{c-parse.c} is more recent than\n-@file{c-parse.y},and you do not plan to change the @samp{.y} file.)\n-\n-Bison versions older than Sept 8, 1988 will produce incorrect output\n-for @file{c-parse.c}.\n-\n @item\n If you have chosen a configuration for GNU CC which requires other GNU\n tools (such as GAS or the GNU linker) instead of the standard system\n@@ -194,63 +157,6 @@ information normally used on 386 SVR4 platforms; stabs provide a\n workable alternative.  This requires gas and gdb, as the normal SVR4\n tools can not generate or interpret stabs.\n \n-@item --nfp\n-On certain systems, you must specify whether the machine has a floating\n-point unit.  These systems include @samp{m68k-sun-sunos@var{n}} and\n-@samp{m68k-isi-bsd}.  On any other system, @samp{--nfp} currently has no\n-effect, though perhaps there are other systems where it could usefully\n-make a difference.\n-\n-@cindex Internal Compiler Checking\n-@item --enable-checking\n-When you specify this option, the compiler is built to perform checking\n-of tree node types when referencing fields of that node.  This does not\n-change the generated code, but adds error checking within the compiler.\n-This will slow down the compiler and may only work properly if you\n-are building the compiler with GNU C.\n-\n-@cindex Native Language Support\n-@cindex NLS\n-@item --enable-nls\n-@itemx --disable-nls\n-The @samp{--enable-nls} option enables Native Language Support (NLS),\n-which lets GCC output diagnostics in languages other than American\n-English. Native Language Support is enabled by default if not doing a\n-canadian cross build. The @samp{--disable-nls} option disables NLS.\n-\n-@cindex @code{gettext}\n-@item --with-included-gettext\n-If NLS is enbled, the @samp{--with-included-gettext} option causes the build\n-procedure to prefer its copy of GNU @code{gettext}. This is the default. If\n-you want the GCC build procedure to prefer the host's @code{gettext}\n-libraries, use @samp{--without-included-gettext}.\n-\n-@cindex @code{catgets}\n-@item --with-catgets\n-If NLS is enabled, and if the host lacks @code{gettext} but has the\n-inferior @code{catgets} interface, the GCC build procedure normally\n-ignores @code{catgets} and instead uses GCC's copy of the GNU\n-@code{gettext} library.  The @samp{--with-catgets} option causes the\n-build procedure to use the host's @code{catgets} in this situation.\n-\n-@cindex Windows32 Registry support\n-@item --enable-win32-registry\n-@itemx --enable-win32-registry=@var{KEY}\n-@itemx --disable-win32-registry\n-The @samp{--enable-win32-registry} option enables Windows-hosted GCC\n-to look up installations paths in the registry using the following key:\n-\n-@smallexample\n-@code{HKEY_LOCAL_MACHINE\\SOFTWARE\\Free Software Foundation\\<KEY>}\n-@end smallexample\n-\n-<KEY> defaults to GCC version number, and can be overridden by the\n-@code{--enable-win32-registry=KEY} option. Vendors and distributors\n-who use custom installers are encouraged to provide a different key,\n-perhaps one comprised of vendor name and GCC version number, to\n-avoid conflict with existing installations. This feature is enabled\n-by default, and can be disabled by @code{--disable-win32-registry}\n-option.  This option has no effect on the other hosts.\n @end table\n \n @item\n@@ -271,242 +177,6 @@ words from the list @samp{c}, @samp{c++}, @samp{objective-c},\n GNU compilers as subdirectories of the GNU CC source directory, you may\n also specify their names in this list.\n \n-Ignore any warnings you may see about ``statement not reached'' in\n-@file{insn-emit.c}; they are normal.  Also, warnings about ``unknown\n-escape sequence'' are normal in @file{genopinit.c} and perhaps some\n-other files.  Likewise, you should ignore warnings about ``constant is\n-so large that it is unsigned'' in @file{insn-emit.c} and\n-@file{insn-recog.c}, and a warning about a comparison always being zero\n-in @file{enquire.o}.  Any other compilation errors may represent bugs in\n-the port to your machine or operating system, and\n-@ifclear INSTALLONLY\n-should be investigated and reported (@pxref{Bugs}).\n-@end ifclear\n-@ifset INSTALLONLY\n-should be investigated and reported.\n-@end ifset\n-\n-Some compilers fail to compile GNU CC because they have bugs or\n-limitations.  For example, the Microsoft compiler is said to run out of\n-macro space.  Some Ultrix compilers run out of expression space; then\n-you need to break up the statement where the problem happens.\n-\n-@item\n-If you are building a cross-compiler, stop here.  @xref{Cross-Compiler}.\n-\n-@cindex stage1\n-@item\n-Move the first-stage object files and executables into a subdirectory\n-with this command:\n-\n-@smallexample\n-make stage1\n-@end smallexample\n-\n-The files are moved into a subdirectory named @file{stage1}.\n-Once installation is complete, you may wish to delete these files\n-with @code{rm -r stage1}.\n-\n-@item\n-If you have chosen a configuration for GNU CC which requires other GNU\n-tools (such as GAS or the GNU linker) instead of the standard system\n-tools, install the required tools in the @file{stage1} subdirectory\n-under the names @file{as}, @file{ld} or whatever is appropriate.  This\n-will enable the stage 1 compiler to find the proper tools in the\n-following stage.\n-\n-Alternatively, you can do subsequent compilation using a value of the\n-@code{PATH} environment variable such that the necessary GNU tools come\n-before the standard system tools.\n-\n-@item\n-Recompile the compiler with itself, with this command:\n-\n-@smallexample\n-make CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"-g -O2\"\n-@end smallexample\n-\n-This is called making the stage 2 compiler.\n-\n-The command shown above builds compilers for all the supported\n-languages.  If you don't want them all, you can specify the languages to\n-build by typing the argument @samp{LANGUAGES=\"@var{list}\"}.  @var{list}\n-should contain one or more words from the list @samp{c}, @samp{c++},\n-@samp{objective-c}, and @samp{proto}.  Separate the words with spaces.\n-@samp{proto} stands for the programs @code{protoize} and\n-@code{unprotoize}; they are not a separate language, but you use\n-@code{LANGUAGES} to enable or disable their installation.\n-\n-If you are going to build the stage 3 compiler, then you might want to\n-build only the C language in stage 2.\n-\n-Once you have built the stage 2 compiler, if you are short of disk\n-space, you can delete the subdirectory @file{stage1}.\n-\n-On a 68000 or 68020 system lacking floating point hardware,\n-unless you have selected a @file{tm.h} file that expects by default\n-that there is no such hardware, do this instead:\n-\n-@smallexample\n-make CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"-g -O2 -msoft-float\"\n-@end smallexample\n-\n-@item\n-If you wish to test the compiler by compiling it with itself one more\n-time, install any other necessary GNU tools (such as GAS or the GNU\n-linker) in the @file{stage2} subdirectory as you did in the\n-@file{stage1} subdirectory, then do this:\n-\n-@smallexample\n-make stage2\n-make CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"-g -O2\"\n-@end smallexample\n-\n-@noindent\n-This is called making the stage 3 compiler.  Aside from the @samp{-B}\n-option, the compiler options should be the same as when you made the\n-stage 2 compiler.  But the @code{LANGUAGES} option need not be the\n-same.  The command shown above builds compilers for all the supported\n-languages; if you don't want them all, you can specify the languages to\n-build by typing the argument @samp{LANGUAGES=\"@var{list}\"}, as described\n-above.\n-\n-If you do not have to install any additional GNU tools, you may use the\n-command\n-\n-@smallexample\n-make bootstrap LANGUAGES=@var{language-list} BOOT_CFLAGS=@var{option-list}\n-@end smallexample\n-\n-@noindent\n-instead of making @file{stage1}, @file{stage2}, and performing\n-the two compiler builds.\n-\n-@item\n-Compare the latest object files with the stage 2 object files---they\n-ought to be identical, aside from time stamps (if any).\n-\n-On some systems, meaningful comparison of object files is impossible;\n-they always appear ``different.''  This is currently true on Solaris and\n-some systems that use ELF object file format.  On some versions of Irix\n-on SGI machines and DEC Unix (OSF/1) on Alpha systems, you will not be\n-able to compare the files without specifying @file{-save-temps}; see the\n-description of individual systems above to see if you get comparison\n-failures.  You may have similar problems on other systems.\n-\n-Use this command to compare the files:\n-\n-@smallexample\n-make compare\n-@end smallexample\n-\n-This will mention any object files that differ between stage 2 and stage\n-3.  Any difference, no matter how innocuous, indicates that the stage 2\n-compiler has compiled GNU CC incorrectly, and is therefore a potentially\n-@ifclear INSTALLONLY\n-serious bug which you should investigate and report (@pxref{Bugs}).\n-@end ifclear\n-@ifset INSTALLONLY\n-serious bug which you should investigate and report.\n-@end ifset\n-\n-If your system does not put time stamps in the object files, then this\n-is a faster way to compare them (using the Bourne shell):\n-\n-@smallexample\n-for file in *.o; do\n-cmp $file stage2/$file\n-done\n-@end smallexample\n-\n-If you have built the compiler with the @samp{-mno-mips-tfile} option on\n-MIPS machines, you will not be able to compare the files.\n-\n-@item\n-Install the compiler driver, the compiler's passes and run-time support\n-with @samp{make install}.  Use the same value for @code{CC},\n-@code{CFLAGS} and @code{LANGUAGES} that you used when compiling the\n-files that are being installed.  One reason this is necessary is that\n-some versions of Make have bugs and recompile files gratuitously when\n-you do this step.  If you use the same variable values, those files will\n-be recompiled properly.\n-\n-For example, if you have built the stage 2 compiler, you can use the\n-following command:\n-\n-@smallexample\n-make install CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"-g -O\" LANGUAGES=\"@var{list}\"\n-@end smallexample\n-\n-@noindent\n-This copies the files @file{cc1}, @file{cpp} and @file{libgcc.a} to\n-files @file{cc1}, @file{cpp} and @file{libgcc.a} in the directory\n-@file{/usr/local/lib/gcc-lib/@var{target}/@var{version}}, which is where\n-the compiler driver program looks for them.  Here @var{target} is the\n-canonicalized form of target machine type specified when you ran\n-@file{configure}, and @var{version} is the version number of GNU CC.\n-This naming scheme permits various versions and/or cross-compilers to\n-coexist.  It also copies the executables for compilers for other\n-languages (e.g., @file{cc1plus} for C++) to the same directory.\n-\n-This also copies the driver program @file{xgcc} into\n-@file{/usr/local/bin/gcc}, so that it appears in typical execution\n-search paths.  It also copies @file{gcc.1} into\n-@file{/usr/local/man/man1} and info pages into @file{/usr/local/info}.\n-\n-On some systems, this command causes recompilation of some files.  This\n-is usually due to bugs in @code{make}.  You should either ignore this\n-problem, or use GNU Make.\n-\n-(It is usually better to install GNU CC executables from stage 2 or 3,\n-since they usually run faster than the ones compiled with some other\n-compiler.)\n-\n-@item\n-GNU CC includes a runtime library for Objective-C because it is an\n-integral part of the language.  You can find the files associated with\n-the library in the subdirectory @file{objc}.  The GNU Objective-C\n-Runtime Library requires header files for the target's C library in\n-order to be compiled,and also requires the header files for the target's\n-thread library if you want thread support.  @xref{Cross Headers,\n-Cross-Compilers and Header Files, Cross-Compilers and Header Files}, for\n-discussion about header files issues for cross-compilation.\n-\n-When you run @file{configure}, it picks the appropriate Objective-C\n-thread implementation file for the target platform.  In some situations,\n-you may wish to choose a different back-end as some platforms support\n-multiple thread implementations or you may wish to disable thread\n-support completely.  You do this by specifying a value for the\n-@var{OBJC_THREAD_FILE} makefile variable on the command line when you\n-run make, for example:\n-\n-@smallexample\n-make CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"-g -O2\" OBJC_THREAD_FILE=thr-single\n-@end smallexample\n-\n-@noindent\n-Below is a list of the currently available back-ends.\n-\n-@itemize @bullet\n-@item thr-single\n-Disable thread support, should work for all platforms.\n-@item thr-decosf1\n-DEC OSF/1 thread support.\n-@item thr-irix\n-SGI IRIX thread support.\n-@item thr-mach\n-Generic MACH thread support, known to work on NEXTSTEP.\n-@item thr-os2\n-IBM OS/2 thread support.\n-@item thr-posix\n-Generix POSIX thread support.\n-@item thr-pthreads\n-PCThreads on Linux-based GNU systems.\n-@item thr-solaris\n-SUN Solaris thread support.\n-@item thr-win32\n-Microsoft Win32 API thread support.\n-@end itemize\n @end enumerate\n \n @node Configuration Files\n@@ -668,67 +338,6 @@ things you must know:\n See @ref{VMS Install}, for details on how to install GNU CC on VMS.\n @end table\n \n-@node Other Dir\n-@section Compilation in a Separate Directory\n-@cindex other directory, compilation in\n-@cindex compilation in a separate directory\n-@cindex separate directory, compilation in\n-\n-If you wish to build the object files and executables in a directory\n-other than the one containing the source files, here is what you must\n-do differently:\n-\n-@enumerate\n-@item\n-Make sure you have a version of Make that supports the @code{VPATH}\n-feature.  (GNU Make supports it, as do Make versions on most BSD\n-systems.)\n-\n-@item\n-If you have ever run @file{configure} in the source directory, you must undo\n-the configuration.  Do this by running:\n-\n-@example\n-make distclean\n-@end example\n-\n-@item\n-Go to the directory in which you want to build the compiler before\n-running @file{configure}:\n-\n-@example\n-mkdir gcc-sun3\n-cd gcc-sun3\n-@end example\n-\n-On systems that do not support symbolic links, this directory must be\n-on the same file system as the source code directory.\n-\n-@item\n-Specify where to find @file{configure} when you run it:\n-\n-@example\n-../gcc/configure @dots{}\n-@end example\n-\n-This also tells @code{configure} where to find the compiler sources;\n-@code{configure} takes the directory from the file name that was used to\n-invoke it.  But if you want to be sure, you can specify the source\n-directory with the @samp{--srcdir} option, like this:\n-\n-@example\n-../gcc/configure --srcdir=../gcc @var{other options}\n-@end example\n-\n-The directory you specify with @samp{--srcdir} need not be the same\n-as the one that @code{configure} is found in.\n-@end enumerate\n-\n-Now, you can run @code{make} in that directory.  You need not repeat the\n-configuration steps shown above, when ordinary source files change.  You\n-must, however, run @code{configure} again when the configuration files\n-change, if your system does not support symbolic links.\n-\n @node Cross-Compiler\n @section Building and Installing a Cross-Compiler\n @cindex cross-compiler, installation"}, {"sha": "f8b1bfaece2190576ec9ad5f31a32087db6a279f", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 129, "deletions": 5, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=f85b8d1a2f3e3dfec7b38b6e65ba920bb0ed1426", "patch": "@@ -33,7 +33,7 @@\n @settitle Installing GCC: Binaries\n @end ifset\n \n-@comment $Id: install.texi,v 1.13 2001/06/02 22:33:30 jsm28 Exp $\n+@comment $Id: install.texi,v 1.14 2001/06/03 06:40:15 dje Exp $\n @c Copyright (C) 2001 Free Software Foundation, Inc.\n @c *** Converted to texinfo by Dean Wakerley, dean@wakerley.com\n \n@@ -247,6 +247,15 @@ where @var{srcdir} == @var{objdir} should still work, but doesn't\n get extensive testing; building where @var{objdir} is a subdirectory\n of @var{srcdir} is unsupported.\n \n+If you have built GNU CC previously in the same directory for a\n+different target machine, do @samp{make distclean} to delete all files\n+that might be invalid.  One of the files this deletes is\n+@file{Makefile}; if @samp{make distclean} complains that @file{Makefile}\n+does not exist, it probably means that the directory is already suitably\n+clean.  However, with the recommended method of building in a separate\n+@var{objdir}, you should simply use a different @var{objdir} for each\n+target.\n+\n Second, when configuring a native system, either @command{cc} or\n @command{gcc} must be in your path or you must set @env{CC} in\n your environment before running configure.  Otherwise the configuration\n@@ -407,10 +416,34 @@ On some systems, this is the default.\n Specify that\n @var{lib} is the thread support library.  This affects the Objective-C\n compiler and runtime library, and exception handling for other languages\n-like C++ and Java.  The possibilities for @var{lib} are @samp{aix},\n-@samp{dce}, @samp{decosf1}, @samp{irix}, @samp{mach}, @samp{os2},\n-@samp{posix}, @samp{pthreads}, @samp{single}, @samp{solaris},\n-@samp{vxworks} and @samp{win32}.\n+like C++ and Java.  The possibilities for @var{lib} are:\n+\n+@table @code\n+@item aix\n+AIX thread support.\n+@item dce\n+DCE thread support.\n+@item decosf1\n+DEC OSF/1 thread support.\n+@item irix\n+SGI IRIX thread support.\n+@item mach\n+Generic MACH thread support, known to work on NEXTSTEP.\n+@item os2\n+IBM OS/2 thread support.\n+@item posix\n+Generix POSIX thread support.\n+@item pthreads\n+Same as @samp{posix}.\n+@item single\n+Disable thread support, should work for all platforms.\n+@item solaris\n+SUN Solaris thread support.\n+@item vxworks\n+VxWorks thread support.\n+@item win32\n+Microsoft Win32 API thread support.\n+@end table\n \n @item --with-cpu=@var{cpu}\n Specify which cpu variant the\n@@ -493,6 +526,61 @@ you may use @option{--enable-libgcj} to override the default.\n @item --with-dwarf2\n Specify that the compiler should\n use DWARF2 debugging information as the default.\n+\n+@item --enable-win32-registry\n+@itemx --enable-win32-registry=@var{KEY}\n+@itemx --disable-win32-registry\n+The @samp{--enable-win32-registry} option enables Windows-hosted GCC\n+to look up installations paths in the registry using the following key:\n+\n+@smallexample\n+@code{HKEY_LOCAL_MACHINE\\SOFTWARE\\Free Software Foundation\\<KEY>}\n+@end smallexample\n+\n+<KEY> defaults to GCC version number, and can be overridden by the\n+@code{--enable-win32-registry=KEY} option. Vendors and distributors\n+who use custom installers are encouraged to provide a different key,\n+perhaps one comprised of vendor name and GCC version number, to\n+avoid conflict with existing installations. This feature is enabled\n+by default, and can be disabled by @code{--disable-win32-registry}\n+option.  This option has no effect on the other hosts.\n+\n+@item --nfp\n+Specify that the machine does not have a floating point unit.  This\n+option only applies to @samp{m68k-sun-sunos@var{n}} and\n+@samp{m68k-isi-bsd}.  On any other system, @samp{--nfp} has no effect.\n+\n+@item --enable-checking\n+@itemx --enable-checking=@var{list}\n+When you specify this option, the compiler is built to perform checking\n+of tree node types when referencing fields of that node, and some other\n+internal consistency checks.  This does not change the generated code,\n+but adds error checking within the compiler.  This will slow down the\n+compiler and may only work properly if you are building the compiler\n+with GNU C.  This is on by default when building from CVS or snapshots,\n+but off for releases.  More control over the checks may be had by\n+specifying @var{list}; the categories of checks available are\n+@samp{misc}, @samp{tree}, @samp{gc}, @samp{rtl} and @samp{gcac}.  The\n+default when @var{list} is not specified is @samp{misc,tree,gc}; the\n+checks @samp{rtl} and @samp{gcac} are very expensive.\n+\n+@item --enable-nls\n+@itemx --disable-nls\n+The @samp{--enable-nls} option enables Native Language Support (NLS),\n+which lets GCC output diagnostics in languages other than American\n+English. Native Language Support is enabled by default if not doing a\n+canadian cross build. The @samp{--disable-nls} option disables NLS.\n+\n+@item --with-included-gettext\n+If NLS is enbled, the @samp{--with-included-gettext} option causes the build\n+procedure to prefer its copy of GNU @code{gettext}.\n+\n+@item --with-catgets\n+If NLS is enabled, and if the host lacks @code{gettext} but has the\n+inferior @code{catgets} interface, the GCC build procedure normally\n+ignores @code{catgets} and instead uses GCC's copy of the GNU\n+@code{gettext} library.  The @samp{--with-catgets} option causes the\n+build procedure to use the host's @code{catgets} in this situation.\n @end table\n \n Some options which only apply to building cross compilers:\n@@ -580,6 +668,17 @@ that type mismatches occur, this could be the cause.\n \n The solution is not to use such a directory for building GCC.\n \n+When building from CVS or snapshots, or if you modify parser sources,\n+you need the Bison parser generator installed.  Any version 1.25 or\n+later should work; older versions may also work.  If you do not modify\n+parser sources, releases contain the Bison-generated files and you do\n+not need Bison installed to build them.\n+\n+When building from CVS or snapshots, or if you modify Texinfo\n+documentation, you need version 4.0 or later of Texinfo installed if you\n+want Info documentation to be regenerated.  Releases contain Info\n+documentation pre-built for the unmodified documentation in the release.\n+\n @section Building a native compiler\n \n For a native build issue the command @samp{make bootstrap}.  This \n@@ -621,13 +720,30 @@ without debugging information with @samp{make CFLAGS='-O' LIBCFLAGS='-g\n roughly 40% of disk space both for the bootstrap and the final installation.\n (Libraries will still contain debugging information.)\n \n+If you wish to use non-default flags when compiling the stage2 and\n+stage3 compile, set @code{BOOT_CFLAGS} on the command line when doing\n+@samp{make bootstrap}.  Non-default optimization flags are less well\n+tested here than the default of @samp{-g -O2}, but should still work.\n+In a few cases, you may find that you need to specify special flags such\n+as @option{-msoft-float} here to complete the bootstrap; or, if the\n+native compiler miscompiles the stage1 compiler, you may need to work\n+around this, by choosing @code{BOOT_CFLAGS} to avoid the parts of the\n+stage1 compiler that were miscompiled, or by using @samp{make\n+bootstrap4} to increase the number of stages of bootstrap.\n+\n If you used the flag @option{--enable-languages=...} to restrict\n the compilers to be built, only those you've actually enabled will be\n built. This will of course only build those runtime libraries, for\n which the particular compiler has been built.  Please note,\n that re-defining LANGUAGES when calling @samp{make bootstrap}\n @strong{does not} work anymore!\n \n+If the comparison of stage2 and stage3 fails, this normally indicates\n+that the stage 2 compiler has compiled GCC incorrectly, and is therefore\n+a potentially serious bug which you should investigate and report.  (On\n+a few systems, meaningful comparison of object files is impossible; they\n+always appear ``different''.  If you encounter this problem, you will\n+need to disable comparison in the @file{Makefile}.)\n \n @section Building a cross compiler\n \n@@ -1477,6 +1593,11 @@ compilers, you may need to add @samp{-Wf,-XNg1500 -Olimit 3000}.\n \n Please have a look at our @uref{binaries.html,,binaries page}.\n \n+You cannot install GNU C by itself on MSDOS; it will not compile under\n+any MSDOS compiler except itself.  You need to get the complete\n+compilation package DJGPP, which includes binaries as well as sources,\n+and includes all the necessary compilation tools and libraries.\n+\n @html\n </p>\n <hr>\n@@ -2895,6 +3016,9 @@ On System V, if you get an error like this,\n @noindent\n that too indicates a problem with disk space, ULIMIT, or @code{MAXUMEM}.\n \n+On a System V release 4 system, make sure @file{/usr/bin} precedes\n+@file{/usr/ucb} in @code{PATH}.  The @code{cc} command in\n+@file{/usr/ucb} uses libraries which have bugs.\n \n @html\n </p>"}]}