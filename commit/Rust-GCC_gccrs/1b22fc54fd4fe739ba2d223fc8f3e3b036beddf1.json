{"sha": "1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIyMmZjNTRmZDRmZTczOWJhMmQyMjNmYzhmM2UzYjAzNmJlZGRmMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-05-25T18:29:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-05-25T18:29:14Z"}, "message": "PR c++/71173 - wrong qualified lookup\n\n\tPR c++/70522\n\t* cp-tree.h (enum tag_types): Add scope_type.\n\t* parser.c (cp_parser_class_name): Use scope_type.\n\t(prefer_type_arg): Handle scope_type.\n\t(cp_parser_lookup_name): Use prefer_type_arg.\n\t* name-lookup.c (lookup_qualified_name): Change bool is_type_p to\n\tint prefer_type, use lookup_flags.\n\t* name-lookup.h: Adjust.\n\nFrom-SVN: r236736", "tree": {"sha": "0cd1bfde15477ae2028496320a01fa745b2ca052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cd1bfde15477ae2028496320a01fa745b2ca052"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04080f22d657e9762500f5a7f6c9843ebfc46517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04080f22d657e9762500f5a7f6c9843ebfc46517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04080f22d657e9762500f5a7f6c9843ebfc46517"}], "stats": {"total": 81, "additions": 63, "deletions": 18}, "files": [{"sha": "f0cd5d9abc09d13c00c530b72b85a9236a0800fc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1", "patch": "@@ -1,3 +1,15 @@\n+2016-05-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/71173\n+\tPR c++/70522\n+\t* cp-tree.h (enum tag_types): Add scope_type.\n+\t* parser.c (cp_parser_class_name): Use scope_type.\n+\t(prefer_type_arg): Handle scope_type.\n+\t(cp_parser_lookup_name): Use prefer_type_arg.\n+\t* name-lookup.c (lookup_qualified_name): Change bool is_type_p to\n+\tint prefer_type, use lookup_flags.\n+\t* name-lookup.h: Adjust.\n+\n 2016-05-24  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* parser.c (cp_parser_oacc_declare): Add support for"}, {"sha": "c2be21c7424c20668fb09027384df3ed40c6b800", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1", "patch": "@@ -4601,7 +4601,8 @@ enum tag_types {\n   class_type,    /* \"class\" types.  */\n   union_type,    /* \"union\" types.  */\n   enum_type,     /* \"enum\" types.  */\n-  typename_type  /* \"typename\" types.  */\n+  typename_type, /* \"typename\" types.  */\n+  scope_type\t /* namespace or tagged type of a name followed by :: */\n };\n \n /* The various kinds of lvalues we distinguish.  */"}, {"sha": "eb128db5733a4e5534ffa2830bf3fb71922ef005", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1", "patch": "@@ -4507,37 +4507,36 @@ unqualified_namespace_lookup (tree name, int flags)\n }\n \n /* Look up NAME (an IDENTIFIER_NODE) in SCOPE (either a NAMESPACE_DECL\n-   or a class TYPE).  If IS_TYPE_P is TRUE, then ignore non-type\n-   bindings.\n+   or a class TYPE).\n+\n+   If PREFER_TYPE is > 0, we only return TYPE_DECLs or namespaces.\n+   If PREFER_TYPE is > 1, we only return TYPE_DECLs.\n \n    Returns a DECL (or OVERLOAD, or BASELINK) representing the\n    declaration found.  If no suitable declaration can be found,\n    ERROR_MARK_NODE is returned.  If COMPLAIN is true and SCOPE is\n    neither a class-type nor a namespace a diagnostic is issued.  */\n \n tree\n-lookup_qualified_name (tree scope, tree name, bool is_type_p, bool complain,\n+lookup_qualified_name (tree scope, tree name, int prefer_type, bool complain,\n \t\t       bool find_hidden)\n {\n-  int flags = 0;\n   tree t = NULL_TREE;\n \n-  if (find_hidden)\n-    flags |= LOOKUP_HIDDEN;\n-\n   if (TREE_CODE (scope) == NAMESPACE_DECL)\n     {\n       struct scope_binding binding = EMPTY_SCOPE_BINDING;\n \n-      if (is_type_p)\n-\tflags |= LOOKUP_PREFER_TYPES;\n+      int flags = lookup_flags (prefer_type, /*namespaces_only*/false);\n+      if (find_hidden)\n+\tflags |= LOOKUP_HIDDEN;\n       if (qualified_lookup_using_namespace (name, scope, &binding, flags))\n \tt = binding.value;\n     }\n   else if (cxx_dialect != cxx98 && TREE_CODE (scope) == ENUMERAL_TYPE)\n     t = lookup_enumerator (scope, name);\n   else if (is_class_type (scope, complain))\n-    t = lookup_member (scope, name, 2, is_type_p, tf_warning_or_error);\n+    t = lookup_member (scope, name, 2, prefer_type, tf_warning_or_error);\n \n   if (!t)\n     return error_mark_node;"}, {"sha": "2f8447a64c768b50d94d19d91ce4cf62b28329b8", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1", "patch": "@@ -327,7 +327,7 @@ extern tree namespace_binding (tree, tree);\n extern void set_namespace_binding (tree, tree, tree);\n extern bool hidden_name_p (tree);\n extern tree remove_hidden_names (tree);\n-extern tree lookup_qualified_name (tree, tree, bool, bool, /*hidden*/bool = false);\n+extern tree lookup_qualified_name (tree, tree, int, bool, /*hidden*/bool = false);\n extern tree lookup_name_nonclass (tree);\n extern tree lookup_name_innermost_nonclass_level (tree);\n extern bool is_local_extern (tree);"}, {"sha": "546aada5156a1e38207aa91e0fcb7e3af75be91f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1", "patch": "@@ -21190,7 +21190,7 @@ cp_parser_class_name (cp_parser *parser,\n \t     resolution operator, object, function, and enumerator\n \t     names are ignored.  */\n \t  if (cp_lexer_next_token_is (parser->lexer, CPP_SCOPE))\n-\t    tag_type = typename_type;\n+\t    tag_type = scope_type;\n \t  /* Look up the name.  */\n \t  decl = cp_parser_lookup_name (parser, identifier,\n \t\t\t\t\ttag_type,\n@@ -24595,6 +24595,24 @@ cp_parser_nested_requirement (cp_parser *parser)\n \n /* Support Functions */\n \n+/* Return the appropriate prefer_type argument for lookup_name_real based on\n+   tag_type and template_mem_access.  */\n+\n+static inline int\n+prefer_type_arg (tag_types tag_type, bool template_mem_access = false)\n+{\n+  /* DR 141: When looking in the current enclosing context for a template-name\n+     after -> or ., only consider class templates.  */\n+  if (template_mem_access)\n+    return 2;\n+  switch (tag_type)\n+    {\n+    case none_type:  return 0;\t// No preference.\n+    case scope_type: return 1;\t// Type or namespace.\n+    default:         return 2;\t// Type only.\n+    }\n+}\n+\n /* Looks up NAME in the current scope, as given by PARSER->SCOPE.\n    NAME should have one of the representations used for an\n    id-expression.  If NAME is the ERROR_MARK_NODE, the ERROR_MARK_NODE\n@@ -24731,7 +24749,7 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n \t     errors may be issued.  Even if we rollback the current\n \t     tentative parse, those errors are valid.  */\n \t  decl = lookup_qualified_name (parser->scope, name,\n-\t\t\t\t\ttag_type != none_type,\n+\t\t\t\t\tprefer_type_arg (tag_type),\n \t\t\t\t\t/*complain=*/true);\n \n \t  /* 3.4.3.1: In a lookup in which the constructor is an acceptable\n@@ -24752,7 +24770,7 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n \t      && DECL_SELF_REFERENCE_P (decl)\n \t      && same_type_p (DECL_CONTEXT (decl), parser->scope))\n \t    decl = lookup_qualified_name (parser->scope, ctor_identifier,\n-\t\t\t\t\t  tag_type != none_type,\n+\t\t\t\t\t  prefer_type_arg (tag_type),\n \t\t\t\t\t  /*complain=*/true);\n \n \t  /* If we have a single function from a using decl, pull it out.  */\n@@ -24808,15 +24826,15 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n \tdecl = lookup_member (object_type,\n \t\t\t      name,\n \t\t\t      /*protect=*/0,\n-\t\t\t      tag_type != none_type,\n+\t\t\t      prefer_type_arg (tag_type),\n \t\t\t      tf_warning_or_error);\n       else\n \tdecl = NULL_TREE;\n \n       if (!decl)\n \t/* Look it up in the enclosing context.  DR 141: When looking for a\n \t   template-name after -> or ., only consider class templates.  */\n-\tdecl = lookup_name_real (name, tag_type != none_type || is_template,\n+\tdecl = lookup_name_real (name, prefer_type_arg (tag_type, is_template),\n \t\t\t\t /*nonclass=*/0,\n \t\t\t\t /*block_p=*/true, is_namespace, 0);\n       if (object_type == unknown_type_node)\n@@ -24828,7 +24846,7 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n     }\n   else\n     {\n-      decl = lookup_name_real (name, tag_type != none_type,\n+      decl = lookup_name_real (name, prefer_type_arg (tag_type),\n \t\t\t       /*nonclass=*/0,\n \t\t\t       /*block_p=*/true, is_namespace, 0);\n       parser->qualifying_scope = NULL_TREE;"}, {"sha": "c604297c6db3eb5ddab982daf4f2683ed60c41a7", "filename": "gcc/testsuite/g++.dg/lookup/scoped10.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped10.C?ref=1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1", "patch": "@@ -0,0 +1,5 @@\n+namespace A { }\n+namespace N { struct A; }\n+using namespace N;\n+\n+struct ::A *p;"}, {"sha": "06f09028b0a50a84049628426e10ae1317588b0f", "filename": "gcc/testsuite/g++.dg/lookup/scoped9.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped9.C?ref=1b22fc54fd4fe739ba2d223fc8f3e3b036beddf1", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/71173\n+\n+namespace foo {\n+  namespace bar {\n+    class foo {};\n+  }\n+  class baz {};\n+}\n+using namespace foo::bar;\n+::foo::baz mybaz;"}]}