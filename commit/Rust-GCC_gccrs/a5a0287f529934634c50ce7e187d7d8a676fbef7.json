{"sha": "a5a0287f529934634c50ce7e187d7d8a676fbef7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhMDI4N2Y1Mjk5MzQ2MzRjNTBjZTdlMTg3ZDdkOGE2NzZmYmVmNw==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-27T10:37:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-27T10:37:29Z"}, "message": "Merge #646\n\n646: Resolve module filename from path attribute r=philberty a=CohenArthur\n\nAllow for the user to specify the path of a module using the `#[path]` attribute\n\nCo-authored-by: CohenArthur <arthur.cohen@epita.fr>", "tree": {"sha": "3db35b7ca1f10df66a244056e36752dd843793bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3db35b7ca1f10df66a244056e36752dd843793bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5a0287f529934634c50ce7e187d7d8a676fbef7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhKMBpCRBK7hj4Ov3rIwAAohgIAJnvujDowo79EjCRwzj3ytpm\n0SzP83wHKX8PRgR7Zk6pCqOWdj2Fqmlud4QkhQAuN4zc1emUSnXNcon8v+GiIvJl\ng/fSDu4Kk+eiVq4RsVmDkSKJTB2NX1I7y/P3ecxt7vnuMCxVhLkRaK/TcxwMJnil\nQQzuaPWdPl2cIfnOqE9brliEwz0hCARrdWOnELkpwi8jv9g5mXX4uSVSVwO2vXWq\nGmrHndJUU4toa9ZHhTFep1UCewM5bqvUFBQuyRXUPdzfpYLmK8aFifitwyGc/fXc\ndrFONMWXH36IuASQknYF8YuW6+C91VB6khkgCAqXgc4s2qUnJhLIKTwHRwGBFtc=\n=psfB\n-----END PGP SIGNATURE-----\n", "payload": "tree 3db35b7ca1f10df66a244056e36752dd843793bf\nparent 40042ce11fc5d7f62e31be99e82bf6a0db83234a\nparent 602f5e90c2e1392bd02407095052ee2fde470154\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630060649 +0000\ncommitter GitHub <noreply@github.com> 1630060649 +0000\n\nMerge #646\n\n646: Resolve module filename from path attribute r=philberty a=CohenArthur\n\nAllow for the user to specify the path of a module using the `#[path]` attribute\n\nCo-authored-by: CohenArthur <arthur.cohen@epita.fr>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a0287f529934634c50ce7e187d7d8a676fbef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a0287f529934634c50ce7e187d7d8a676fbef7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a0287f529934634c50ce7e187d7d8a676fbef7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40042ce11fc5d7f62e31be99e82bf6a0db83234a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40042ce11fc5d7f62e31be99e82bf6a0db83234a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40042ce11fc5d7f62e31be99e82bf6a0db83234a"}, {"sha": "602f5e90c2e1392bd02407095052ee2fde470154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/602f5e90c2e1392bd02407095052ee2fde470154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/602f5e90c2e1392bd02407095052ee2fde470154"}], "stats": {"total": 79, "additions": 72, "deletions": 7}, "files": [{"sha": "c18d4c4fd74c4c81575e262bb05e64770fff360f", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a0287f529934634c50ce7e187d7d8a676fbef7/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a0287f529934634c50ce7e187d7d8a676fbef7/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=a5a0287f529934634c50ce7e187d7d8a676fbef7", "patch": "@@ -4061,17 +4061,59 @@ file_exists (const std::string path)\n   return access (path.c_str (), F_OK) != -1;\n }\n \n-// FIXME: This function should also check if the module has a `path` outer\n-// attribute and fetch the path from here in that case, i.e:\n-// ```\n-// #[path=\"<dir>/<subdir>/<file>.rs\"]\n-// mod <mod_name>;\n-// ```\n+static std::string\n+filename_from_path_attribute (std::vector<Attribute> &outer_attrs)\n+{\n+  Attribute path_attr = Attribute::create_empty ();\n+  for (auto attr : outer_attrs)\n+    {\n+      if (attr.get_path ().as_string () == \"path\")\n+\t{\n+\t  path_attr = attr;\n+\t  break;\n+\t}\n+    }\n+\n+  // We didn't find a path attribute. This is not an error, there simply isn't\n+  // one present\n+  if (path_attr.is_empty ())\n+    return \"\";\n+\n+  // Here, we found a path attribute, but it has no associated string. This is\n+  // invalid\n+  if (!path_attr.has_attr_input ())\n+    {\n+      rust_error_at (\n+\tpath_attr.get_locus (),\n+\t// Split the format string so that -Wformat-diag does not complain...\n+\t\"path attributes must contain a filename: '%s'\", \"#[path = \\\"file\\\"]\");\n+      return \"\";\n+    }\n+\n+  auto path = path_attr.get_attr_input ().as_string ();\n+\n+  // On windows, the path might mix '/' and '\\' separators. Replace the\n+  // UNIX-like separators by MSDOS separators to make sure the path will resolve\n+  // properly.\n+  //\n+  // Source: rustc compiler\n+  // (https://github.com/rust-lang/rust/blob/9863bf51a52b8e61bcad312f81b5193d53099f9f/compiler/rustc_expand/src/module.rs#L174)\n+#if defined(HAVE_DOS_BASED_FILE_SYSTEM)\n+  path.replace ('/', '\\\\');\n+#endif /* HAVE_DOS_BASED_FILE_SYSTEM */\n+\n+  return path_attr.get_attr_input ().as_string ();\n+}\n+\n std::string\n Module::get_filename ()\n {\n   rust_assert (kind == Module::ModuleKind::UNLOADED);\n \n+  auto path_string = filename_from_path_attribute (get_outer_attrs ());\n+  if (!path_string.empty ())\n+    return path_string;\n+\n   // This corresponds to the path of the file 'including' the module. So the\n   // file that contains the 'mod <file>;' directive\n   std::string including_fname (outer_filename);"}, {"sha": "1efcc868d1cdb363cb07805fab3834e1b4cdd02d", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a0287f529934634c50ce7e187d7d8a676fbef7/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a0287f529934634c50ce7e187d7d8a676fbef7/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=a5a0287f529934634c50ce7e187d7d8a676fbef7", "patch": "@@ -457,6 +457,8 @@ struct Attribute\n \n   Location get_locus () const { return locus; }\n \n+  AttrInput &get_attr_input () const { return *attr_input; }\n+\n   /* e.g.:\n       #![crate_type = \"lib\"]\n       #[test]"}, {"sha": "316eb13db514c55f129b6681c400d9a270c1d68d", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a0287f529934634c50ce7e187d7d8a676fbef7/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a0287f529934634c50ce7e187d7d8a676fbef7/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=a5a0287f529934634c50ce7e187d7d8a676fbef7", "patch": "@@ -2039,6 +2039,8 @@ class AttrVisitor : public AST::ASTVisitor\n     else\n       {\n \tstd::string mod_file = module.get_filename ();\n+\tif (!mod_file.empty ())\n+\t  rust_debug (\"Module filename found: %s\", mod_file.c_str ());\n       }\n \n     // strip items if required"}, {"sha": "4b2feae53f7810bfab33b52290922f8f68d18199", "filename": "gcc/rust/lex/rust-lex.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a0287f529934634c50ce7e187d7d8a676fbef7/gcc%2Frust%2Flex%2Frust-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a0287f529934634c50ce7e187d7d8a676fbef7/gcc%2Frust%2Flex%2Frust-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.h?ref=a5a0287f529934634c50ce7e187d7d8a676fbef7", "patch": "@@ -35,11 +35,15 @@ struct RAIIFile\n   RAIIFile &operator= (const RAIIFile &other) = delete;\n \n   // have to specify setting file to nullptr, otherwise unintended fclose occurs\n-  RAIIFile (RAIIFile &&other) : file (other.file) { other.file = nullptr; }\n+  RAIIFile (RAIIFile &&other) : file (other.file), filename (other.filename)\n+  {\n+    other.file = nullptr;\n+  }\n   RAIIFile &operator= (RAIIFile &&other)\n   {\n     close ();\n     file = other.file;\n+    filename = other.filename;\n     other.file = nullptr;\n \n     return *this;"}, {"sha": "67c8a13220d26c0480bb0c3897667b664d37cedb", "filename": "gcc/testsuite/rust/compile/extern_mod2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a0287f529934634c50ce7e187d7d8a676fbef7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fextern_mod2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a0287f529934634c50ce7e187d7d8a676fbef7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fextern_mod2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fextern_mod2.rs?ref=a5a0287f529934634c50ce7e187d7d8a676fbef7", "patch": "@@ -0,0 +1,14 @@\n+#[path = \"modules/valid_path.rs\"]\n+mod not_a_valid_path;\n+\n+#[path] // { dg-error \"path attributes must contain a filename\" }\n+mod error; // { dg-error \"no candidate found for module error\" }\n+\n+// This is \"valid\", and should only error out when parsing\n+// the file\n+// FIXME: Add a dg-error directive on the `mod another_error` line once module expansion\n+// is added\n+#[path = \"not_a_valid_file.rs\"]\n+mod another_error;\n+\n+fn main() {}"}, {"sha": "6a1519c3fc45a588200123ea4a9dbdfb8ec7fee5", "filename": "gcc/testsuite/rust/compile/modules/valid_path.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a0287f529934634c50ce7e187d7d8a676fbef7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmodules%2Fvalid_path.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a0287f529934634c50ce7e187d7d8a676fbef7/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmodules%2Fvalid_path.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmodules%2Fvalid_path.rs?ref=a5a0287f529934634c50ce7e187d7d8a676fbef7", "patch": "@@ -0,0 +1 @@\n+fn unused() {}"}]}