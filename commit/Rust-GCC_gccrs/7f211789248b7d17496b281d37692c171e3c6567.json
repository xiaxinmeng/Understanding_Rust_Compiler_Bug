{"sha": "7f211789248b7d17496b281d37692c171e3c6567", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YyMTE3ODkyNDhiN2QxNzQ5NmIyODFkMzc2OTJjMTcxZTNjNjU2Nw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-20T14:43:07Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-20T14:43:07Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r804", "tree": {"sha": "57c78dd5f90da17a930448853b2b03b9209c3e97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57c78dd5f90da17a930448853b2b03b9209c3e97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f211789248b7d17496b281d37692c171e3c6567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f211789248b7d17496b281d37692c171e3c6567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f211789248b7d17496b281d37692c171e3c6567", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f211789248b7d17496b281d37692c171e3c6567/comments", "author": null, "committer": null, "parents": [{"sha": "7025258008b6f19407440af1953162341518b527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7025258008b6f19407440af1953162341518b527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7025258008b6f19407440af1953162341518b527"}], "stats": {"total": 679, "additions": 383, "deletions": 296}, "files": [{"sha": "2085a5d9f5fda4a55a21d3b15cd0a18de75e0a09", "filename": "gcc/make-cc1.com", "status": "modified", "additions": 179, "deletions": 292, "changes": 471, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f211789248b7d17496b281d37692c171e3c6567/gcc%2Fmake-cc1.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f211789248b7d17496b281d37692c171e3c6567/gcc%2Fmake-cc1.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-cc1.com?ref=7f211789248b7d17496b281d37692c171e3c6567", "patch": "@@ -2,11 +2,36 @@ $! Set the def dir to proper place for use in batch. Works for interactive too.\n $flnm = f$enviroment(\"PROCEDURE\")     ! get current procedure name\n $set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n $!\n+$ v=f$verify(0)\n+$set symbol/scope=(nolocal,noglobal)\n $!\n $! CAUTION: If you want to link gcc-cc1 to the sharable image library\n $! VAXCRTL, see the notes in gcc.texinfo (or INSTALL) first.\n $!\n-$!\tBuild a GNU compiler on VMS\n+$!\tBuild the GNU \"C\" compiler on VMS\n+$!\n+$!\tC compiler\n+$!\n+$ CC\t:=\tgcc\n+$! CC\t:=\tcc\t!uncomment for VAXC\n+$ BISON\t:=\tbison\n+$ RENAME\t:=\trename/new_vers\n+$ LINK\t:=\tlink\n+$!\n+$!\tCompiler options\n+$!\n+$ CFLAGS =\t\"/debug/cc1_options=\"\"-mpcc-alignment\"\"/incl=([],[.config])\"\n+$! CFLAGS =\t\"/noopt/incl=([],[.config])\"\n+$!\n+$!\tLink options\n+$!\n+$ LDFLAGS :=\t/nomap\n+$!\n+$!\tLink libraries\n+$!\n+$ LIBS :=\tgnu_cc:[000000]gcclib.olb/libr,sys$library:vaxcrtl.olb/libr\n+$! LIBS :=\talloca.obj,sys$library:vaxcrtl.olb/libr\n+$!\n $!\n $!  First we figure out what needs to be done.  This is sort of like a limited\n $! make facility - the command line options specify exactly what components\n@@ -39,15 +64,18 @@ $!\n $! If you do not specify which compiler you want to build, it is assumed that\n $! you want to build GNU-C (\"CC1\").\n $!\n+$! Now figure out what we have been requested to do.\n $p1 = p1+\" \"+p2+\" \"+p3+\" \"+p4+\" \"+p5+\" \"+p6+\" \"+p7 \n $p1 = f$edit(p1,\"COMPRESS\")\n $i=0\n $DO_ALL = 0\n $DO_LINK = 0\n $DO_DEBUG = 0\n-$DO_CC1 = 0\n-$DO_CC1PLUS = 0\n-$DO_CC1OBJ = 0\n+$open cfile$ compilers.list\n+$cinit:read cfile$ compilername/end=cinit_done\n+$DO_'compilername'=0\n+$goto cinit\n+$cinit_done: close cfile$\n $DO_INDEPENDENT = 1\n $DO_DEFAULT = 1\n $loop:\n@@ -66,328 +94,187 @@ $goto loop\n $!\n $done:\n $if DO_DEFAULT.eq.1 then DO_CC1 = 1\n-$if DO_ALL.eq.1 then DO_CC1 = 1\n-$if DO_ALL.eq.1 then DO_CC1PLUS = 1\n-$if DO_ALL.eq.1 then DO_CC1OBJ = 1\n-$say:==write sys$Output\n-$say \"This command file will now perform the following actions:\n+$echo := write sys$Output\n+$echo \"This command file will now perform the following actions:\n $if DO_LINK.eq.1 then goto link_only\n-$if DO_CC1.eq.1 then say \"   Compile C specific object modules.\"\n-$if DO_CC1PLUS.eq.1 then say \"   Compile C++ specific object modules.\"\n-$if DO_CC1OBJ.eq.1 then say \"   Compile obj-C specific object modules.\"\n-$if DO_INDEPENDENT.eq.1 then say \"   Compile language independent object modules.\"\n+$if DO_ALL.eq.1 then echo \"   Compile all language specific object modules.\"\n+$if DO_CC1.eq.1 then echo \"   Compile C specific object modules.\"\n+$if DO_CC1PLUS.eq.1 then echo \"   Compile C++ specific object modules.\"\n+$if DO_CC1OBJ.eq.1 then echo \"   Compile obj-C specific object modules.\"\n+$if DO_INDEPENDENT.eq.1 then echo \"   Compile language independent object modules.\"\n $link_only:\n-$if DO_CC1.eq.1 then \tsay \"   Link C compiler (gcc-cc1.exe).\"\n-$if DO_CC1PLUS.eq.1 then say \"   Link C++ compiler (gcc-cc1plus.exe).\"\n-$if DO_CC1OBJ.eq.1 then say \"   Link objective-C compiler (gcc-cc1obj.exe).\"\n-$if DO_DEBUG.eq.1 then say  \"   Link images to run under debugger.\"\n+$if DO_CC1.eq.1 then\techo \"   Link C compiler (gcc-cc1.exe).\"\n+$if DO_CC1PLUS.eq.1 then echo \"   Link C++ compiler (gcc-cc1plus.exe).\"\n+$if DO_CC1OBJ.eq.1 then echo \"   Link objective-C compiler (gcc-cc1obj.exe).\"\n+$if DO_DEBUG.eq.1 then echo  \"   Link images to run under debugger.\"\n+$!\n+$! Test and see if we need these messages or not.  The -1 switch gives it away.\n+$!\n+$gas := $gnu_cc:[000000]gcc-as.exe\n+$if f$search(gas-\"$\").eqs.\"\" then  goto gas_message\t!must be VAXC\n+$define/user sys$error sys$scratch:gas_test.tmp\n+$gas -1 nla0: -o nla0:\n+$size=f$file_attributes(\"sys$scratch:gas_test.tmp\",\"ALQ\")\n+$delete/nolog sys$scratch:gas_test.tmp;*\n+$if size.eq.0 then goto no_message\n+$gas_message:\n $type sys$input\n \n \tNote: GCC 2.0 treats external variables differently than GCC 1.40 does.\n Before you use GCC 2.0, you should obtain a version of the assembler which \n contains the patches to work with GCC 2.0 (GCC-AS 1.38 does not contain \n-these patches - whatever comes after this probably will).\n+these patches - whatever comes after this probably will).  The assembler\n+in gcc-vms-1.40.tar.Z from prep does contain the proper patches.\n \n \tIf you do not update the assembler, the compiler will still work,\n but `extern const' variables will be treated as `extern'.  This will result\n in linker warning messages about mismatched psect attributes, and these\n variables will be placed in read/write storage.\n \n $!\n+$no_message:\n $!\n $!\n-$! CAUTION: If you want to link gcc-cc1 to the sharable image library\n-$! VAXCRTL, see the notes in gcc.texinfo (or INSTALL) first.\n-$!\n-$!\tBuild the GNU \"C\" compiler on VMS\n-$!   (To try to build with VAX C, replace `gcc' with `cc/noopt'\n-$!    and delete `cc1_options=\"-mpcc-alignment\"'.\n-$!    Also add `/sel' after `gcclib/lib' except in the last link.\n-$!    You also need to get alloca.mar from Bison\n-$!    and to make definitions for bzero, bcopy and bcmp.)\n-$!\n-$!\tC compiler\n-$!\n-$ CC\t:=\tgcc\n-$ BISON\t:=\tbison\n-$ RENAME :=\trename\n-$ LINK\t:=\tlink\n+$ if DO_DEBUG.eq.1 then LDFLAGS :='LDFLAGS'/debug\n $!\n-$!\tCompiler options\n+$if DO_LINK.eq.1 then goto compile_cc1\n+$if DO_INDEPENDENT.eq.1 \n+$\tTHEN \n $!\n-$ CFLAGS =\t\"/debug/cc1_options=\"\"-mpcc-alignment\"\"/inc=([],[.config])\"\n+$! Build alloca if necessary (in 'LIBS for use with VAXC)\n $!\n-$!\tLink options\n+$ if f$locate(\"alloca.obj\",f$edit(LIBS,\"lowercase\")).ge.f$length(LIBS) then -\n+\tgoto skip_alloca\n+$ if f$search(\"alloca.obj\").nes.\"\" then -  !does .obj exist? is it up to date?\n+    if f$cvtime(f$file_attributes(\"alloca.obj\",\"RDT\")).gts.-\n+       f$cvtime(f$file_attributes(\"alloca.c\",\"RDT\")) then  goto skip_alloca\n+$set verify\n+$ 'CC 'CFLAGS /define=\"STACK_DIRECTION=(-1)\" alloca.c\n+$!'f$verify(0)\n+$skip_alloca:\n $!\n-$ LDFLAGS :=\t/nomap\n-$ if DO_DEBUG.eq.1 then LDFLAGS :='LDFLAGS'/debug\n-$!\n-$!\tLink libraries\n+$! First build a couple of header files from the machine description\n+$! These are used by many of the source modules, so we build them now.\n $!\n-$ LIBS :=\tgnu_cc:[000000]gcclib/libr,sys$share:vaxcrtl/libr\n+$set verify\n+$ 'CC 'CFLAGS rtl.C\n+$ 'CC 'CFLAGS obstack.C\n+$!'f$verify(0)\n+$! Generate insn-attr.h\n+$\tcall generate insn-attr.h\n+$\tcall generate insn-flags.h\n+$\tcall generate insn-codes.h\n+$\tcall generate insn-config.h\n $!\n+$call compile independent.opt \"rtl,obstack,insn-attrtab\"\n $!\n+$\tcall generate insn-attrtab.c \"rtlanal,\"\n+$set verify\n+$ 'CC 'CFLAGS insn-attrtab.c\n+$!'f$verify(0)\n+$\tendif\n $!\n+$compile_cc1:\n+$open cfile$ compilers.list\n+$cloop:read cfile$ compilername/end=cdone\n+$! language specific modules\n $!\n-$! Language independent object and header files.\n+$if (DO_ALL + DO_'compilername').eq.0 then goto cloop\n+$if DO_LINK.eq.0 then call compile 'compilername'-objs.opt \"obstack\"\n $!\n-$! create a linker options file that lists all of the language independent\n-$! object modules.\n+$! CAUTION: If you want to link gcc-cc1* to the sharable image library\n+$! VAXCRTL, see the notes in gcc.texinfo (or INSTALL) first.\n $!\n-$create independent.opt\n-!\n-! List of object files for the linker - these are language independent\n-! (i.e. the same files will be used for all of the compilers).\n-!\n-toplev,tree,print-tree,stor-layout,fold-const,varasm,rtl,rtlanal,expr,stmt\n-expmed,explow,optabs,emit-rtl,insn-emit,jump,cse,loop,flow,stupid,combine\n-regclass,local-alloc,global-alloc,reload,reload1,insn-peep,final,recog\n-insn-recog,insn-extract,insn-output,obstack,integrate,caller-save,calls\n-dwarfout,xcoffout,function,insn-attrtab,reorg,sched,sdbout,dbxout,unroll\n-reg-stack,aux-output,print-rtl,getpwd,version\n+$set verify\n+$ link 'LDFLAGS' /exe=gcc-'compilername'  version.opt/opt, -\n+\t  'compilername'-objs.opt/opt, independent.opt/opt, -\n+\t  'LIBS'\n+$!'f$verify(0)\n+$goto cloop\n $!\n-$pur/nolog independent.opt\n $!\n-$ if DO_LINK.eq.1 then goto compile_cc1\n-$if DO_INDEPENDENT.eq.0 THEN GOTO compile_cc1\n+$cdone: close cfile$\n $!\n-$! First build a couple of header files from the machine description\n-$! These are used by many of the source modules, so we build them now.\n+$!\tDone\n $!\n-$\t'CC 'CFLAGS rtl.c\n-$\t'CC 'CFLAGS obstack.c\n-$\t'CC 'CFLAGS print-rtl.c\n-$! Generate insn-attr.h\n-$\t'CC 'CFLAGS genattr.c\n-$\tlink 'LDFLAGS' genattr,rtl,obstack, 'LIBS'\n-$\tassign/user insn-attr.h sys$output:\n-$\tmcr sys$disk:[]genattr md\n-$! Generate insn-flags.h\n-$\t'CC 'CFLAGS genflags.c\n-$\tlink 'LDFLAGS' genflags,rtl,obstack, 'LIBS'\n-$\tassign/user insn-flags.h sys$output:\n-$\tmcr sys$disk:[]genflags md\n-$! Generate insn-codes.h\n-$\t'CC 'CFLAGS gencodes.c\n-$\tlink 'LDFLAGS' gencodes,rtl,obstack, 'LIBS'\n-$\tassign/user insn-codes.h sys$output:\n-$\tmcr sys$disk:[]gencodes md\n-$! Generate insn-config.h\n-$\t'CC 'CFLAGS genconfig.c\n-$\tlink 'LDFLAGS' genconfig,rtl,obstack, 'LIBS'\n-$\tassign/user insn-config.h sys$output:\n-$\tmcr sys$disk:[]genconfig md\n-$!\n-$! Now compile the source modules\n-$!\n-$\t'CC 'CFLAGS toplev.c\n-$\t'CC 'CFLAGS version.c\n-$\t'CC 'CFLAGS tree.c\n-$\t'CC 'CFLAGS print-tree.c\n-$\t'CC 'CFLAGS stor-layout.c\n-$\t'CC 'CFLAGS fold-const.c\n-$\t'CC 'CFLAGS varasm.c\n-$\t'CC 'CFLAGS expr.c\n-$\t'CC 'CFLAGS stmt.c\n-$\t'CC 'CFLAGS expmed.c\n-$\t'CC 'CFLAGS explow.c\n-$\t'CC 'CFLAGS optabs.c\n-$\t'CC 'CFLAGS rtlanal.c\n-$\t'CC 'CFLAGS emit-rtl.c\n-$! Generate insn-emit.c\n-$\t'CC 'CFLAGS genemit.c\n-$\tlink 'LDFLAGS' genemit,rtl,obstack, 'LIBS'\n-$\tassign/user insn-emit.c sys$output:\n-$\tmcr sys$disk:[]genemit md\n-$!\n-$\t'CC 'CFLAGS insn-emit.c\n-$\t'CC 'CFLAGS jump.c\n-$\t'CC 'CFLAGS cse.c\n-$\t'CC 'CFLAGS loop.c\n-$\t'CC 'CFLAGS flow.c\n-$\t'CC 'CFLAGS stupid.c\n-$\t'CC 'CFLAGS combine.c\n-$\t'CC 'CFLAGS regclass.c\n-$\t'CC 'CFLAGS local-alloc.c\n-$\t'CC 'CFLAGS global-alloc.c\n-$\t'CC 'CFLAGS reload.c\n-$\t'CC 'CFLAGS reload1.c\n-$! Generate insn-peep.c\n-$\t'CC 'CFLAGS genpeep.c\n-$\tlink 'LDFLAGS' genpeep,rtl,obstack, 'LIBS'\n-$\tassign/user insn-peep.c sys$output:\n-$\tmcr sys$disk:[]genpeep md\n-$!\n-$\t'CC 'CFLAGS insn-peep.c\n-$\t'CC 'CFLAGS final.c\n-$\t'CC 'CFLAGS recog.c\n-$! Generate insn-recog.c\n-$\t'CC 'CFLAGS genrecog.c\n-$\tlink 'LDFLAGS' genrecog,rtl,obstack, 'LIBS'\n-$\tassign/user insn-recog.c sys$output:\n-$\tmcr sys$disk:[]genrecog md\n-$!\n-$\t'CC 'CFLAGS insn-recog.c\n-$! Generate insn-extract.c\n-$\t'CC 'CFLAGS genextract.c\n-$\tlink 'LDFLAGS' genextract,rtl,obstack, 'LIBS'\n-$\tassign/user insn-extract.c sys$output:\n-$\tmcr sys$disk:[]genextract md\n-$!\n-$\t'CC 'CFLAGS insn-extract.c\n-$! Generate insn-output.c\n-$\t'CC 'CFLAGS genoutput.c\n-$ \tlink 'LDFLAGS' genoutput,rtl,obstack, 'LIBS'\n-$\tassign/user insn-output.c sys$output:\n-$\tmcr sys$disk:[]genoutput md\n-$!\n-$\t'CC 'CFLAGS insn-output.c\n-$\t'CC 'CFLAGS integrate.c\n-$\t'CC 'CFLAGS caller-save.c\n-$\t'CC 'CFLAGS calls.c\n-$\t'CC 'CFLAGS dwarfout.c\n-$\t'CC 'CFLAGS dbxout.c\n-$\t'CC 'CFLAGS xcoffout.c\n-$\t'CC 'CFLAGS reg-stack.c\n-$\t'CC 'CFLAGS function.c\n-$\t'CC 'CFLAGS reorg.c\n-$\t'CC 'CFLAGS sched.c\n-$\t'CC 'CFLAGS sdbout.c\n-$\t'CC 'CFLAGS unroll.c\n-$! Generate insn-attrtab.c\n-$\t'CC 'CFLAGS genattrtab.c\n-$\tlink 'LDFLAGS' genattrtab,rtl,rtlanal,obstack, 'LIBS'\n-$\tassign/user insn-attrtab.c sys$output:\n-$\tmcr sys$disk:[]genattrtab md\n-$\t'CC 'CFLAGS insn-attrtab.c\n-$\t'CC 'CFLAGS aux-output.c\n-$\t'CC 'CFLAGS getpwd.c\n+$! 'f$verify(v)\n+$exit\n $!\n-$compile_cc1:\n+$!  Various DCL subroutines follow...\n $!\n-$! C language specific modules\n-$!\n-$if DO_CC1.eq.0 then goto compile_cc1plus\n-$if DO_LINK.eq.1 then goto link_cc1\n-$!\n-$\tif (f$search(\"C-PARSE.C\") .eqs. \"\") then goto gcc_bison\n-$\tif (f$cvtime(f$file_attributes(\"C-PARSE.Y\",\"RDT\")).les. -\n- \t    f$cvtime(f$file_attributes(\"C-PARSE.C\",\"RDT\")))  -\n-\t\tthen goto gcc_nobison\n-$gcc_bison:  'BISON' /define /verbose c-parse.y\n-$\t 'RENAME' c-parse_tab.c c-parse.c\n-$\t 'RENAME' c-parse_tab.h c-parse.h\n-$gcc_nobison:\n-$\t'CC 'CFLAGS c-parse.c\n-$\t'CC 'CFLAGS c-lex.c\n-$\t'CC 'CFLAGS c-decl.c\n-$\t'CC 'CFLAGS c-typeck.c\n-$\t'CC 'CFLAGS c-convert.c\n-$\t'CC 'CFLAGS c-aux-info.c\n-$\t'CC 'CFLAGS c-common.c\n-$\t'CC 'CFLAGS c-lang.c\n+$!  This routine takes parameter p1 to be a linker options file with a list\n+$!  of object files that are needed.  It extracts the names, and compiles\n+$!  each source module, one by one.  File names that begin with an\n+$!  \"INSN-\" are assumed to be generated by a GEN*.C program.\n $!\n-$! CAUTION: If you want to link gcc-cc1 to the sharable image library\n-$! VAXCRTL, see the notes in gcc.texinfo (or INSTALL) first.\n+$!  Parameter P2 is a list of files which will appear in the options file\n+$!  that should not be compiled.  This allows us to handle special cases.\n $!\n-$link_cc1:\n-$ link 'LDFLAGS' /exe=gcc-cc1  version.opt/opt,sys$input:/opt, -\n-\tindependent.opt/opt,'LIBS'\n-!\n-!\t\"CC1\" Linker options file\n-!\n-!\n-c-parse,c-decl,c-typeck,c-convert,c-aux-info,c-common,c-lang,c-lex\n-$!\n-$! C++ language specific modules\n-$!\n-$compile_cc1plus:\n-$!\n-$if DO_CC1PLUS.eq.0 then goto compile_cc1obj\n-$if DO_LINK.eq.1 then goto link_cc1plus\n-$!\n-$\tif (f$search(\"CP-PARSE.C\") .eqs. \"\") then goto cplus_bison\n-$\tif (f$cvtime(f$file_attributes(\"CP-PARSE.Y\",\"RDT\")).les. -\n- \t    f$cvtime(f$file_attributes(\"CP-PARSE.C\",\"RDT\")))  -\n-  \t\tthen goto cplus_nobison\n-$cplus_bison:\n-$\t 'BISON' /define /verbose cp-parse.y\n-$\t 'RENAME' cp-parse_tab.c cp-parse.c\n-$\t 'RENAME' cp-parse_tab.h cp-parse.h\n-$cplus_nobison:\n-$!\n-$\t'CC 'CFLAGS cp-parse.c\n-$\t'CC 'CFLAGS cp-decl.c\n-$\t'CC 'CFLAGS cp-decl2.c\n-$\t'CC 'CFLAGS cp-typeck.c\n-$\t'CC 'CFLAGS cp-type2.c\n-$\t'CC 'CFLAGS cp-tree.c\n-$\t'CC 'CFLAGS cp-ptree.c\n-$\t'CC 'CFLAGS cp-cvt.c\n-$\t'CC 'CFLAGS cp-search.c\n-$\t'CC 'CFLAGS cp-lex.c\n-$\t'CC 'CFLAGS cp-gc.c\n-$\t'CC 'CFLAGS cp-call.c\n-$\t'CC 'CFLAGS cp-class.c\n-$\t'CC 'CFLAGS cp-init.c\n-$\t'CC 'CFLAGS cp-method.c\n-$\t'CC 'CFLAGS cp-except.c\n-$\t'CC 'CFLAGS cp-expr.c\n-$\t'CC 'CFLAGS cp-pt.c\n-$\t'CC 'CFLAGS cp-edsel.c\n-$\t'CC 'CFLAGS cp-xref.c\n-$\t'CC 'CFLAGS cp-spew.c\n-$\t'CC 'CFLAGS c-common.c\n-$!\n-$link_cc1plus:\n-$ link 'LDFLAGS' /exe=gcc-cc1plus  version.opt/opt,sys$input:/opt, -\n-\t\tindependent.opt/opt,'LIBS'\n-!\n-!\t\"CC1PLUS\" Linker options file\n-!\n-cp-parse,cp-decl,cp-decl2,cp-typeck,cp-type2,cp-tree\n-cp-ptree,cp-cvt,cp-search,cp-lex,cp-gc,cp-call,cp-class\n-cp-init,cp-method,cp-except,cp-expr,cp-pt,cp-edsel\n-cp-xref,cp-spew,c-common\n-$!\n-$! objective language specific modules\n-$!\n-$compile_cc1obj:\n-$if DO_CC1OBJ.eq.0 then goto all_done\n-$if DO_LINK.eq.1 then goto LINK_CC1OBJ\n-$!\n-$\tif (f$search(\"OBJC-PARSE.C\") .eqs. \"\") then goto objc_bison\n-$\tif (f$cvtime(f$file_attributes(\"OBJC-PARSE.Y\",\"RDT\")).les. -\n- \t    f$cvtime(f$file_attributes(\"OBJC-PARSE.C\",\"RDT\")))  -\n-\t\tthen goto objc_nobison\n-$objc_bison:\n-$\t 'BISON' /define /verbose OBJC-PARSE.y\n-$\t 'RENAME' OBJC-PARSE_tab.c OBJC-PARSE.c\n-$\t 'RENAME' OBJC-PARSE_tab.h OBJC-PARSE.h\n-$objc_nobison:\n-$\t'CC 'CFLAGS objc-parse.c\n-$\t'CC 'CFLAGS objc-actions.c\n-$!\n-$! If have also built CC1, we do not need to recompile these modules.\n-$!\n-$if DO_CC1.eq.1 then goto LINK_CC1OBJ\n-$\t'CC 'CFLAGS c-lex.c\n-$\t'CC 'CFLAGS c-decl.c\n-$\t'CC 'CFLAGS c-typeck.c\n-$\t'CC 'CFLAGS c-convert.c\n-$\t'CC 'CFLAGS c-aux-info.c\n-$\t'CC 'CFLAGS c-common.c\n-$!\n-$!\n-$LINK_CC1OBJ:\n-$ link 'LDFLAGS' /exe=gcc-cc1obj version.opt/opt,sys$input:/opt, -\n-\tindependent.opt/opt,'LIBS'\n-!\n-!\t\"Objective C\" Linker options file\n-!\n-objc-parse,objc-actions,c-lex,c-decl,c-typeck,c-convert,c-aux-info,c-common\n-$!\n-$all_done:\n+$compile:\n+$subroutine\n+$open ifile$ 'p1'\n+$loop: read ifile$ line/end=c_done\n $!\n-$!\tDone\n+$i=0\n+$loop1:\n+$flnm=f$element(i,\",\",line)\n+$i=i+1\n+$if flnm.eqs.\"\" then goto loop\n+$if flnm.eqs.\",\" then goto loop\n+$if f$locate(flnm,\"''p2'\").nes.f$length(\"''p2'\") then goto loop1\n+$!\n+$if f$locate(\"-parse\",flnm).nes.f$length(flnm)\n+$\tthen\n+$\tif (f$search(\"''flnm'.C\") .eqs. \"\") then goto yes_bison\n+$\tif (f$cvtime(f$file_attributes(\"''flnm'.Y\",\"RDT\")).les. -\n+ \t    f$cvtime(f$file_attributes(\"''flnm'.C\",\"RDT\")))  -\n+\t\tthen goto no_bison\n+$yes_bison:\n+$set verify\n+$\t 'BISON' /define /verbose 'flnm'.y\n+$\t 'RENAME' 'flnm'_tab.c 'flnm'.c\n+$\t 'RENAME' 'flnm'_tab.h 'flnm'.h\n+$!'f$verify(0)\n+$no_bison:\n+$\tendif\n+$!\n+$if f$extract(0,5,flnm).eqs.\"insn-\" then call generate 'flnm'.c\n+$!\n+$set verify\n+$ 'CC 'CFLAGS 'flnm'.c\n+$!'f$verify(0)\n+$goto loop1\n $!\n+$goto loop\n+$c_done:\n+$close ifile$\n+$endsubroutine\n+$!\n+$! This subroutine generates the insn-* files.  The first argument is the\n+$! name of the insn-* file to generate.  The second argument contains a \n+$! list of any other object modules which must be linked to the gen*.c\n+$! program.\n+$!\n+$! If a previous version of insn-* exists, it is compared to the new one,\n+$! and if it has not changed, then the new one is discarded.  This is\n+$! done so that make like programs do not get thrown off.\n+$!\n+$generate:\n+$subroutine\n+$if f$extract(0,5,p1).nes.\"INSN-\"\n+$\tthen\n+$\twrite sys$error \"Unknown file passed to generate.\"\n+$\texit 1\n+$\tendif\n+$root1=f$parse(f$extract(5,255,p1),,,\"NAME\")\n+$\tset verify\n+$ 'CC 'CFLAGS GEN'root1'.C\n+$ link 'LDFLAGS' GEN'root1',rtl,obstack,'p2' -\n+\t  'LIBS'\n+$!\t'f$verify(0)\n+$!\n+$set verify\n+$\tassign/user 'p1' sys$output:\n+$\tmcr sys$disk:[]GEN'root1' md\n+$!'f$verify(0)\n+$endsubroutine"}, {"sha": "a4e45c6079a88e06522b88b04527cb50c801e12b", "filename": "gcc/make-l2.com", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f211789248b7d17496b281d37692c171e3c6567/gcc%2Fmake-l2.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f211789248b7d17496b281d37692c171e3c6567/gcc%2Fmake-l2.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-l2.com?ref=7f211789248b7d17496b281d37692c171e3c6567", "patch": "@@ -2,8 +2,6 @@ $! Set the def dir to proper place for use in batch. Works for interactive too.\n $flnm = f$enviroment(\"PROCEDURE\")     ! get current procedure name\n $set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n $!\n-$set symbol/scope=(nolocal,noglobal)\n-$!\n $! Command file to build libgcc2.olb.  You should only run this once you \n $! have the current compiler installed, otherwise some of the builtins will\n $! not be recognized.  Once you have built libgcc2.olb, you can merge this\n@@ -28,6 +26,9 @@ $!\n $gcc_as:=$gnu_cc:[000000]gcc-as\n $cpp_file:=sys$scratch:gcc_'f$getjpi(0,\"pid\")'.cpp\n $s_file:=sys$scratch:gcc_'f$getjpi(0,\"pid\")'.s\n+$!\n+$set symbol/scope=(nolocal,noglobal)\n+$!\n $goto compile\n $!\n $nocompile:\n@@ -79,10 +80,10 @@ $! We do this by hand, since the VMS compiler driver does not have a way\n $! of specifying an alternate location for the compiler executables.\n $!\n $ gcc_cpp \"-I[]\" \"-I[.CONFIG]\" \"-D''p1'\"  LIBGCC2.C 'cpp_file'\n-$ gcc_cc1 'cpp_file' -dumpbase LIBGCC2 -\n+$ gcc_cc1 'cpp_file' -dumpbase 'objname' -\n         -quiet -mgnu -g \"-O1\" -mvaxc-alignment   -o 's_file'\n $ delete/nolog 'cpp_file';\n-$ gcc_as 's_file'  -o 'p1'.OBJ\n+$ gcc_as 's_file'  -o 'objname'.OBJ\n $ delete/nolog 's_file';\n $!\n $lib libgcc2.olb 'objname'.obj"}, {"sha": "1a453d33eb4a62423556475355ff1917b047cda0", "filename": "gcc/vmsconfig.com", "status": "modified", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f211789248b7d17496b281d37692c171e3c6567/gcc%2Fvmsconfig.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f211789248b7d17496b281d37692c171e3c6567/gcc%2Fvmsconfig.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsconfig.com?ref=7f211789248b7d17496b281d37692c171e3c6567", "patch": "@@ -1,6 +1,12 @@\n $ !\n $ !\tSet up to compile GCC on VMS\n $ !\n+$! Set the def dir to proper place for use in batch. Works for interactive too.\n+$flnm = f$enviroment(\"PROCEDURE\")     ! get current procedure name\n+$set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n+$ !\n+$set symbol/scope=(nolocal,noglobal)\n+$ !\n $ echo = \"write sys$output\"\n $ !\n $ if f$search(\"config.h\") .nes. \"\" then delete config.h.*\n@@ -54,8 +60,201 @@ $close ifile$\n $pur version.opt/nolog\n $!\n $!\n+$! create linker options files that lists all of the components for all\n+$! possible compilers.  We do this by editing the file Makefile.in, and \n+$! generating the relevant files from it.\n+$!\n+$!\n+$echo \"Now processing Makefile.in to generate linker option files.\"\n+$edit/tpu/nojournal/nosection/nodisplay/command=sys$input\n+   PROCEDURE generate_option_file (TAG_NAME, outfile)\n+        position (beginning_of (newbuffer));\n+        recursive_fetch_tag (TAG_NAME);\n+!\n+! Now fix up a few things in the output buffer\n+!\n+\tpat_replace (\".o \",\",\");\n+\tpat_replace (\".o\",\"\");  !appear at end of lines.\n+!\n+! Remove trailing commas, if present.\n+!\n+\tposition (beginning_of (newbuffer));\n+\tLOOP\n+\t  range1:=search_quietly(\",\" & ((SPAN(\" \") & LINE_END) | LINE_END), FORWARD, EXACT);\n+\t  exitif range1 = 0;\n+\t  position (beginning_of (range1));\n+\t  erase(range1);\n+\t  split_line;\t\t\n+\t  ENDLOOP;\n+! get rid of leading spaces on lines.\n+        position (beginning_of (current_buffer)) ;\n+\tLOOP\n+          range1 := search_quietly ( LINE_BEGIN & \" \", FORWARD, EXACT) ;\n+\t  EXITIF range1 = 0;\n+\t  position (end_of (range1));\n+\t  erase_character(1);\n+\tENDLOOP;       \n+!\n+! Now write the output file.\n+!\n+\tSET(OUTPUT_FILE, newbuffer, outfile);\n+      write_file (newbuffer);\n+      erase (newbuffer);\n+   ENDPROCEDURE;\n+\n+!\n+! Looks up a tag, copies it to newbuffer, and then translates any $(...)\n+! definitions that appear.  The translation is put at the current point.\n+!\n+   PROCEDURE recursive_fetch_tag (TAG_N);\n+   fetch_tag (TAG_N);\n+!\n+! substitute any  makefile symbols $(...)\n+!\n+        position (beginning_of (current_buffer)) ;\n+\tLOOP\n+          range1 := search_quietly (\"$(\" &  \n+\t     SPAN(\"abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ#~0123456789\") & \")\", FORWARD, EXACT) ;\n+\t  EXITIF range1 = 0;\n+\t  position (beginning_of (range1));\n+\t  move_horizontal(2);\n+\t  mark_1 := MARK (NONE);\n+\t  position (end_of (range1));\n+\t  move_horizontal(-1);\n+\t  mark_2 := MARK (NONE);\n+\t  tag_range := CREATE_RANGE(MARK_1, MARK_2, NONE);\n+\t  position (end_of (range1));\n+\t  tag_string := STR (tag_range);\n+\t  erase (range1);\n+\t  fetch_tag (LINE_BEGIN & tag_string & ((SPAN(\" \") & \"=\") | \"=\"));\n+          position (beginning_of (current_buffer)) ;\n+\tENDLOOP;       \n+   ENDPROCEDURE;\n+\n+!\n+! Looks up the translation of a tag, and inserts it at the current location\n+! in the buffer\n+!\n+   PROCEDURE fetch_tag (TAG_N);\n+      LOCAL mark1, mark2, mark3, range2;\n+      mark3 := MARK(NONE) ;\n+      position (beginning_of (mainbuffer)) ;\n+      range2 := search_quietly (TAG_N, FORWARD, EXACT) ;\n+      IF (range2 = 0) then \n+\tposition (mark3);\n+\treturn;\n+\tendif;\n+      position (end_of (range2)) ;\n+      MOVE_HORIZONTAL(1);\n+      mark1 := MARK(NONE) ;\n+      position (beginning_of (range2)) ;\n+      MOVE_VERTICAL(1);\n+      MOVE_HORIZONTAL(-2);\n+      LOOP\n+\tEXITIF CURRENT_CHARACTER <> \"\\\" ;\n+\tERASE_CHARACTER(1);\n+\tMOVE_HORIZONTAL(1);\n+\tMOVE_VERTICAL(1);\n+\tMOVE_HORIZONTAL(-2);\n+\tENDLOOP;\n+      MOVE_HORIZONTAL(1);\n+      mark2 := MARK(NONE) ;\n+      range2 := CREATE_RANGE(mark1, mark2, NONE) ;\n+      position (mark3);\n+      if (length(range2) = 0) then return; endif;\n+      copy_text(range2);\n+   ENDPROCEDURE;\n+\n+   PROCEDURE pat_replace (\n+      oldstring, !\n+      newstring)  !\n+      LOCAL range2;\n+      position (beginning_of (current_buffer)) ;\n+      LOOP\n+         range2 := search_quietly (oldstring, FORWARD, EXACT) ;\n+         EXITIF range2 = 0 ;\n+         position (beginning_of (range2)) ;\n+         erase (range2) ;\n+         copy_text (newstring) ;\n+         ENDLOOP ;\n+   ENDPROCEDURE ;\n+\n+! this is the start of the main procedure\n+   filename := GET_INFO (COMMAND_LINE, 'file_name') ;\n+   mainbuffer := CREATE_BUFFER (\"Makefile.in\", \"Makefile.in\") ;\n+   newbuffer := CREATE_BUFFER(\"outfile\");\n+   compiler_list := CREATE_BUFFER(\"compilers\");\n+!\n+! Add to this list, as required.  The file \"Makefile.in\" is searched for a\n+! tag that looks like \"LINE_BEGIN + 'tag + (optional space) + \"=\"\".  The\n+! contents are assumed to be a list of object files, and from this list a\n+! VMS linker options file is generated.\n+!\n+   position (beginning_of (compiler_list));\n+   recursive_fetch_tag(LINE_BEGIN & \"COMPILERS\" & ((SPAN(\" \") & \"=\") | \"=\"));\n+   position (beginning_of (compiler_list));\n+   LOOP ! kill leading spaces.\n+\texitif current_character <> \" \";\n+\terase_character(1);\n+\tENDLOOP;\n+   position (beginning_of (compiler_list));\n+      LOOP ! remove any double spaces.\n+         range1 := search_quietly (\"  \", FORWARD, EXACT) ; EXITIF range1 = 0 ;\n+         position (beginning_of (range1)) ;\n+         erase_character(1);\n+         ENDLOOP ;\n+   position (end_of (compiler_list));\n+   move_horizontal(-1);\n+   LOOP ! kill trailing spaces.\n+\texitif current_character <> \" \";\n+\terase_character(1);\n+\tmove_horizontal(-1);\n+\tENDLOOP;\n+   position (beginning_of (compiler_list));\n+      LOOP\n+         range1 := search_quietly (\" \", FORWARD, EXACT) ;\n+         EXITIF range1 = 0 ;\n+         position (beginning_of (range1)) ;\n+         erase (range1) ;\n+\t split_line;\n+         ENDLOOP ;\n+!\n+! We now have a list of supported compilers.  Now write it, and use it.\n+!\n+\tSET(OUTPUT_FILE, compiler_list, \"compilers.list\");\n+      write_file (compiler_list);\n+   generate_option_file(LINE_BEGIN & \"OBJS\" & ((SPAN(\" \") & \"=\") | \"=\"),\"independent.opt\");\n+!\n+! Now change OBJS in the Makefile, so each language specific options file \n+! does not pick up all of the language independent files.\n+!\n+   position (beginning_of (mainbuffer));\n+   range1 := search_quietly (LINE_BEGIN & \"OBJS\" & ((SPAN(\" \") & \"=\") | \"=\"), FORWARD, EXACT) ;\n+   position (end_of (range1));\n+   split_line;\n+   position (beginning_of (compiler_list));\n+   LOOP\n+     cmark := mark(NONE);\n+     exitif cmark = end_of(compiler_list);\n+     message(current_line);\n+     generate_option_file(LINE_BEGIN & Current_line & ((SPAN(\" \") & \":\") | \":\"),\n+\tcurrent_line+\"-objs.opt\");\n+     position (cmark);\n+     move_vertical(1);\n+   ENDLOOP ;\n+   quit ;\n+$ echo \"\"\n+$!\n+$! Remove excessive versions of the options file...\n+$!\n+$purge/nolog *.opt\n+$purge/nolog compilers.list\n+$!\n+$!\n+$!\n $ if f$search(\"config.status\") .nes. \"\" then delete config.status.*\n $ open/write file config.status\n $ write file \"Links are now set up for use with a vax running VMS.\"\n $ close file\n $ type config.status\n+$ echo \"\""}]}