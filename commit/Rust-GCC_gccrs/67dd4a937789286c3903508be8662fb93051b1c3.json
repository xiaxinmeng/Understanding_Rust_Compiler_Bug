{"sha": "67dd4a937789286c3903508be8662fb93051b1c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdkZDRhOTM3Nzg5Mjg2YzM5MDM1MDhiZTg2NjJmYjkzMDUxYjFjMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-09-14T18:35:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-09-14T18:35:21Z"}, "message": "cpp_type_traits.h: Rename __is_trivially_copyable to __is_scalar...\n\n2004-09-14  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/cpp_type_traits.h: Rename __is_trivially_copyable\n\tto __is_scalar, more clear and consistent with \"tr1\" naming.\n\t* include/bits/stl_algobase.h: Update consistently throughout.\n\nFrom-SVN: r87497", "tree": {"sha": "2f508d04ccaa16c83b72fa7199962c702b746c28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f508d04ccaa16c83b72fa7199962c702b746c28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67dd4a937789286c3903508be8662fb93051b1c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67dd4a937789286c3903508be8662fb93051b1c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67dd4a937789286c3903508be8662fb93051b1c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67dd4a937789286c3903508be8662fb93051b1c3/comments", "author": null, "committer": null, "parents": [{"sha": "a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e1aa26d9f2a2f5f77c1bfde7c33ac7104124ff"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "79919512177169de271c792e2d7931b633936d78", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dd4a937789286c3903508be8662fb93051b1c3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dd4a937789286c3903508be8662fb93051b1c3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=67dd4a937789286c3903508be8662fb93051b1c3", "patch": "@@ -1,3 +1,9 @@\n+2004-09-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/cpp_type_traits.h: Rename __is_trivially_copyable\n+\tto __is_scalar, more clear and consistent with \"tr1\" naming.\n+\t* include/bits/stl_algobase.h: Update consistently throughout.\n+\n 2004-09-13  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/11722"}, {"sha": "81a1dce7b5bee03805cea8951de0a880a40cf525", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dd4a937789286c3903508be8662fb93051b1c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dd4a937789286c3903508be8662fb93051b1c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=67dd4a937789286c3903508be8662fb93051b1c3", "patch": "@@ -378,10 +378,10 @@ namespace std\n     };\n \n   //\n-  // A trivially copyable type is an arithmetic type or a pointer type\n+  // A scalar type is an arithmetic type or a pointer type\n   // \n   template<typename _Tp>\n-    struct __is_trivially_copyable\n+    struct __is_scalar\n     {\n       enum\n \t{"}, {"sha": "f3f20e6680244d431b7ef34a3dcf7ee579653fc6", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67dd4a937789286c3903508be8662fb93051b1c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67dd4a937789286c3903508be8662fb93051b1c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=67dd4a937789286c3903508be8662fb93051b1c3", "patch": "@@ -274,7 +274,7 @@ namespace std\n       typedef typename iterator_traits<_II>::value_type _ValueTypeI;\n       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;\n       typedef typename iterator_traits<_II>::iterator_category _Category;\n-      const bool __simple = (__is_trivially_copyable<_ValueTypeI>::_M_type\n+      const bool __simple = (__is_scalar<_ValueTypeI>::_M_type\n \t                     && __is_pointer<_II>::_M_type\n \t                     && __is_pointer<_OI>::_M_type\n \t\t\t     && __are_same<_ValueTypeI, _ValueTypeO>::_M_type);\n@@ -399,7 +399,7 @@ namespace std\n       typedef typename iterator_traits<_BI1>::value_type _ValueType1;\n       typedef typename iterator_traits<_BI2>::value_type _ValueType2;\n       typedef typename iterator_traits<_BI1>::iterator_category _Category;\n-      const bool __simple = (__is_trivially_copyable<_ValueType1>::_M_type\n+      const bool __simple = (__is_scalar<_ValueType1>::_M_type\n \t                     && __is_pointer<_BI1>::_M_type\n \t                     && __is_pointer<_BI2>::_M_type\n \t\t\t     && __are_same<_ValueType1, _ValueType2>::_M_type);\n@@ -529,8 +529,8 @@ namespace std\n \t\t\t\t  _ForwardIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      const bool __trivial = __is_trivially_copyable<_Tp>::_M_type;\n-      std::__fill<__trivial>::fill(__first, __last, __value);\n+      const bool __scalar = __is_scalar<_Tp>::_M_type;\n+      std::__fill<__scalar>::fill(__first, __last, __value);\n     }\n \n   // Specialization: for one-byte types we can use memset.\n@@ -603,8 +603,8 @@ namespace std\n       // concept requirements\n       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _Tp>)\n \n-      const bool __trivial = __is_trivially_copyable<_Tp>::_M_type;\n-      return std::__fill_n<__trivial>::fill_n(__first, __n, __value);\n+      const bool __scalar = __is_scalar<_Tp>::_M_type;\n+      return std::__fill_n<__scalar>::fill_n(__first, __n, __value);\n     }\n \n   template<typename _Size>"}]}