{"sha": "2735b82d096137ab53517510fd3669e60a663915", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjczNWI4MmQwOTYxMzdhYjUzNTE3NTEwZmQzNjY5ZTYwYTY2MzkxNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-05-21T10:48:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-05-21T10:48:37Z"}, "message": "[multiple changes]\n\n2014-05-21  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads: Minor reformatting.\n\t* ceinfo.adb: Deal with slight format change of einfo.ads.\n\n2014-05-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_Part_Of): Further work on the proper\n\timplementation of the SPARK 2014 rule concerning private child\n\tunits (LRM 7.2.6).\n\n2014-05-21  Vincent Celier  <celier@adacore.com>\n\n\t* makeusg.adb: Add switch -d to usage.\n\n2014-05-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Find_Actual): If an actual that is the prefix\n\tof an enclosing prefixed call has been rewritten, use Nkind\n\tand Sloc to identify the corresponding formal, when handling\n\tdeferred references.\n\n2014-05-21  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb: Document -gnatd.z switch.\n\t* sem_eval.adb (Why_Non_Static): Test -gnatd.z switch.\n\nFrom-SVN: r210689", "tree": {"sha": "2b61dc53cf097856ce13cbea844e143b7a52001a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b61dc53cf097856ce13cbea844e143b7a52001a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2735b82d096137ab53517510fd3669e60a663915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2735b82d096137ab53517510fd3669e60a663915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2735b82d096137ab53517510fd3669e60a663915", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2735b82d096137ab53517510fd3669e60a663915/comments", "author": null, "committer": null, "parents": [{"sha": "149604e46a31c3f1a22194e61ba3a0f01903de03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149604e46a31c3f1a22194e61ba3a0f01903de03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/149604e46a31c3f1a22194e61ba3a0f01903de03"}], "stats": {"total": 219, "additions": 146, "deletions": 73}, "files": [{"sha": "12038bf56b524a8d4b3d9b33bcfe1a9e56088113", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2735b82d096137ab53517510fd3669e60a663915", "patch": "@@ -1,3 +1,30 @@\n+2014-05-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads: Minor reformatting.\n+\t* ceinfo.adb: Deal with slight format change of einfo.ads.\n+\n+2014-05-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Part_Of): Further work on the proper\n+\timplementation of the SPARK 2014 rule concerning private child\n+\tunits (LRM 7.2.6).\n+\n+2014-05-21  Vincent Celier  <celier@adacore.com>\n+\n+\t* makeusg.adb: Add switch -d to usage.\n+\n+2014-05-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Find_Actual): If an actual that is the prefix\n+\tof an enclosing prefixed call has been rewritten, use Nkind\n+\tand Sloc to identify the corresponding formal, when handling\n+\tdeferred references.\n+\n+2014-05-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: Document -gnatd.z switch.\n+\t* sem_eval.adb (Why_Non_Static): Test -gnatd.z switch.\n+\n 2014-05-21  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.ads (Can_Never_Be_Null): Minor comment update."}, {"sha": "9c3b6eaa1261995af517074e0d6b4471e25136b7", "filename": "gcc/ada/ceinfo.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Fceinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Fceinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fceinfo.adb?ref=2735b82d096137ab53517510fd3669e60a663915", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -99,8 +99,15 @@ begin\n \n    loop\n       Next_Line;\n+\n+      --  Old format of einfo.ads\n+\n       exit when Match (Line, \"   -- Access Kinds --\");\n \n+      --  New format of einfo.ads\n+\n+      exit when Match (Line, \"-- Access Kinds --\");\n+\n       if Match (Line, Field_Def) then\n          Set (Fields, Fieldnm, Accessfunc);\n       end if;"}, {"sha": "f2f118bb594851abe8ed7fbe7761720dd80ea27f", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=2735b82d096137ab53517510fd3669e60a663915", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -116,7 +116,7 @@ package body Debug is\n    --  d.w  Do not check for infinite loops\n    --  d.x  No exception handlers\n    --  d.y\n-   --  d.z\n+   --  d.z  Temporary ASIS kludge for why non-static messages\n \n    --  d.A  Read/write Aspect_Specifications hash table to tree\n    --  d.B\n@@ -589,6 +589,11 @@ package body Debug is\n    --       fully compiled and analyzed, they just get eliminated from the\n    --       code generation step.\n \n+   --  d.z  Temporary debug switch for control of the why non-static messages\n+   --       generated by Why_Non_Static. Normally these messages are suppressed\n+   --       in ASIS mode (d2), but if d.z is set they are not suppressed. This\n+   --       is a temporary switch to aid in updating ASIS base lines.\n+\n    --  d.A  There seems to be a problem with ASIS if we activate the circuit\n    --       for reading and writing the aspect specification hash table, so\n    --       for now, this is controlled by the debug flag d.A. The hash table"}, {"sha": "998be8b78422bf57ac59c19e187b5958acbdcca6", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 53, "deletions": 54, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=2735b82d096137ab53517510fd3669e60a663915", "patch": "@@ -4115,29 +4115,28 @@ package Einfo is\n --       Is_Primitive_Wrapper. Set to the entity being wrapper.\n \n ---------------------------\n--- Renaming and aliasing --\n+-- Renaming and Aliasing --\n ---------------------------\n \n---  Several entity attributes relate to renaming constructs, and to the use\n---  of different names to refer to the same entity. Here is a summary of\n+--  Several entity attributes relate to renaming constructs, and to the use of\n+--  different names to refer to the same entity. The following is a summary of\n --  these constructs and their prefered uses.\n \n --  There are three related attributes:\n---\n---  Renamed_Entity\n---  Renamed_Object\n---  Alias\n---\n+\n+--    Renamed_Entity\n+--    Renamed_Object\n+--    Alias\n+\n --  They all overlap because they are supposed to apply to different entity\n---  kinds, and are semantically related, but they have the following intended\n---  uses:\n---\n+--  kinds. They are semantically related, and have the following intended uses:\n+\n --  a) Renamed_Entity appplies to entities in renaming declarations that rename\n --  an entity, so the value of the attribute IS an entity. This applies to\n --  generic renamings, package renamings, exception renamings, and subprograms\n --  renamings that rename a subprogram (rather than an attribute, an entry, a\n --  protected operation, etc).\n---\n+\n --  b) Alias applies to overloadable entities, and the value is an overloadable\n --  entity. so this is a subset of the previous one. We use the term Alias to\n --  cover both renamings and inherited operations, because both cases are\n@@ -4195,56 +4194,56 @@ package Einfo is\n --  If a subprogram has an access parameter whose designated type is incomplete\n --  the subprogram has the flag set.\n \n-   ------------------\n-   -- Access Kinds --\n-   ------------------\n+------------------\n+-- Access Kinds --\n+------------------\n \n-   --  The following entity kinds are introduced by the corresponding type\n-   --  definitions:\n+--  The following entity kinds are introduced by the corresponding type\n+--  definitions:\n \n-   --    E_Access_Type,\n-   --    E_General_Access_Type,\n-   --    E_Access_Subprogram_Type,\n-   --    E_Anonymous_Access_Subprogram_Type,\n-   --    E_Access_Protected_Subprogram_Type,\n-   --    E_Anonymous_Access_Protected_Subprogram_Type\n-   --    E_Anonymous_Access_Type.\n+--    E_Access_Type,\n+--    E_General_Access_Type,\n+--    E_Access_Subprogram_Type,\n+--    E_Anonymous_Access_Subprogram_Type,\n+--    E_Access_Protected_Subprogram_Type,\n+--    E_Anonymous_Access_Protected_Subprogram_Type\n+--    E_Anonymous_Access_Type.\n \n-   --  E_Access_Subtype is for an access subtype created by a subtype\n-   --  declaration.\n+--  E_Access_Subtype is for an access subtype created by a subtype\n+--  declaration.\n \n-   --  In addition, we define the kind E_Allocator_Type to label allocators.\n-   --  This is because special resolution rules apply to this construct.\n-   --  Eventually the constructs are labeled with the access type imposed by\n-   --  the context. Gigi should never see the type E_Allocator.\n+--  In addition, we define the kind E_Allocator_Type to label allocators.\n+--  This is because special resolution rules apply to this construct.\n+--  Eventually the constructs are labeled with the access type imposed by\n+--  the context. Gigi should never see the type E_Allocator.\n \n-   --  Similarly, the type E_Access_Attribute_Type is used as the initial kind\n-   --  associated with an access attribute. After resolution a specific access\n-   --  type will be established as determined by the context.\n+--  Similarly, the type E_Access_Attribute_Type is used as the initial kind\n+--  associated with an access attribute. After resolution a specific access\n+--  type will be established as determined by the context.\n \n-   --  Finally, the type Any_Access is used to label -null- during type\n-   --  resolution. Any_Access is also replaced by the context type after\n-   --  resolution.\n+--  Finally, the type Any_Access is used to label -null- during type\n+--  resolution. Any_Access is also replaced by the context type after\n+--  resolution.\n \n-   --------------------------------\n-   -- Classification of Entities --\n-   --------------------------------\n+--------------------------------\n+-- Classification of Entities --\n+--------------------------------\n \n-   --  The classification of program entities which follows is a refinement of\n-   --  the list given in RM 3.1(1). E.g., separate entities denote subtypes of\n-   --  different type classes. Ada 95 entities include class wide types,\n-   --  protected types, subprogram types, generalized access types,  generic\n-   --  formal derived types and generic formal packages.\n-\n-   --  The order chosen for these kinds allows us to classify related entities\n-   --  so that they are contiguous. As a result, they do not appear in the\n-   --  exact same order as their order of first appearance in the LRM (For\n-   --  example, private types are listed before packages). The contiguity\n-   --  allows us to define useful subtypes (see below) such as type entities,\n-   --  overloaded entities, etc.\n-\n-   --  Each entity (explicitly or implicitly declared) has a kind, which is\n-   --  a value of the following type:\n+--  The classification of program entities which follows is a refinement of\n+--  the list given in RM 3.1(1). E.g., separate entities denote subtypes of\n+--  different type classes. Ada 95 entities include class wide types,\n+--  protected types, subprogram types, generalized access types,  generic\n+--  formal derived types and generic formal packages.\n+\n+--  The order chosen for these kinds allows us to classify related entities\n+--  so that they are contiguous. As a result, they do not appear in the\n+--  exact same order as their order of first appearance in the LRM (For\n+--  example, private types are listed before packages). The contiguity\n+--  allows us to define useful subtypes (see below) such as type entities,\n+--  overloaded entities, etc.\n+\n+--  Each entity (explicitly or implicitly declared) has a kind, which is\n+--  a value of the following type:\n \n    type Entity_Kind is (\n "}, {"sha": "16eb5f968b15dbf9419952ea8a10a393ac63ed67", "filename": "gcc/ada/makeusg.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Fmakeusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Fmakeusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeusg.adb?ref=2735b82d096137ab53517510fd3669e60a663915", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -86,6 +86,11 @@ begin\n               \"invoke compiler with mapping file mapp\");\n    Write_Eol;\n \n+   --  Line for -d\n+\n+   Write_Str (\"  -d       Display compilation progress\");\n+   Write_Eol;\n+\n    --  Line for -D\n \n    Write_Str (\"  -D dir   Specify dir as the object directory\");"}, {"sha": "35663b3e436f0ccbaf7398a412d54552ebae7794", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=2735b82d096137ab53517510fd3669e60a663915", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -5488,7 +5488,6 @@ package body Sem_Eval is\n \n       procedure Why_Not_Static_List (L : List_Id) is\n          N : Node_Id;\n-\n       begin\n          if Is_Non_Empty_List (L) then\n             N := First (L);\n@@ -5503,9 +5502,11 @@ package body Sem_Eval is\n \n    begin\n       --  If in ACATS mode (debug flag 2), then suppress all these messages,\n-      --  this avoids massive updates to the ACATS base line.\n+      --  this avoids massive updates to the ACATS base line. But if the flag\n+      --  d.z is set, then don't suppress the messages. This is a temporary\n+      --  kludge to aid in doing the necessary updates to the ACATS base line.\n \n-      if Debug_Flag_2 then\n+      if Debug_Flag_2 and then not Debug_Flag_Dot_Z then\n          return;\n       end if;\n "}, {"sha": "c8ef01aa0e26a0dc9bfdbffd15434dde0aae87cb", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=2735b82d096137ab53517510fd3669e60a663915", "patch": "@@ -3444,9 +3444,10 @@ package body Sem_Prag is\n          Indic   : Node_Id;\n          Legal   : out Boolean)\n       is\n-         Pack_Id   : Entity_Id;\n-         Placement : State_Space_Kind;\n-         State_Id  : Entity_Id;\n+         Pack_Id     : Entity_Id;\n+         Placement   : State_Space_Kind;\n+         Parent_Unit : Entity_Id;\n+         State_Id    : Entity_Id;\n \n       begin\n          --  Assume that the pragma/option is illegal\n@@ -3509,22 +3510,40 @@ package body Sem_Prag is\n             if Is_Child_Unit (Pack_Id)\n               and then Is_Private_Descendant (Pack_Id)\n             then\n+               --  A variable or state abstraction which is part of the\n+               --  visible state of a private child unit (or a public\n+               --  descendant thereof) shall have its Part_Of indicator\n+               --  specified; the Part_Of indicator shall denote a state\n+               --  abstraction declared by either the parent unit of the\n+               --  private unit or by a public descendant of that parent unit.\n+\n+               --  Find parent unit of nearest private ancestor.\n+\n+               Parent_Unit := Pack_Id;\n+               while Present (Parent_Unit) loop\n+                  exit when Private_Present\n+                              (Parent (Unit_Declaration_Node (Parent_Unit)));\n+                  Parent_Unit := Scope (Parent_Unit);\n+               end loop;\n+\n+               Parent_Unit := Scope (Parent_Unit);\n+\n                if not Is_Child_Or_Sibling (Pack_Id, Scope (State_Id)) then\n                   Error_Msg_N\n                     (\"indicator Part_Of must denote an abstract state of \"\n                      & \"parent unit or descendant (SPARK RM 7.2.6(3))\", Indic);\n \n-               --  If the unit is a public child of a private unit it cannot\n-               --  refine the state of a private parent, only that of a\n-               --  public ancestor or descendant thereof.\n-\n-               elsif not Private_Present\n-                           (Parent (Unit_Declaration_Node (Pack_Id)))\n-                 and then Is_Private_Descendant (Scope (State_Id))\n+               elsif Scope (State_Id) = Parent_Unit\n+                 or else (Is_Ancestor_Package (Parent_Unit, Scope (State_Id))\n+                           and then\n+                             not Is_Private_Descendant (Scope (State_Id)))\n                then\n+                  null;\n+\n+               else\n                   Error_Msg_N\n                     (\"indicator Part_Of must denote the abstract state of \"\n-                     & \"a public ancestor\", State);\n+                     & \"parent of private ancestor\", State);\n                end if;\n \n             --  Indicator Part_Of is not needed when the related package is not"}, {"sha": "a981960ae48c064ed9fb1acaed994f86faad898f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2735b82d096137ab53517510fd3669e60a663915/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=2735b82d096137ab53517510fd3669e60a663915", "patch": "@@ -5518,6 +5518,16 @@ package body Sem_Util is\n          while Present (Formal) and then Present (Actual) loop\n             if Actual = N then\n                return;\n+\n+            --  An actual that is the prefix in a prefixed call may have\n+            --  been rewritten in the call, after the deferred reference\n+            --  was collected. Check if sloc and kinds match.\n+\n+            elsif Sloc (Actual) = Sloc (N)\n+              and then Nkind (Actual) = Nkind (N)\n+            then\n+               return;\n+\n             else\n                Actual := Next_Actual (Actual);\n                Formal := Next_Formal (Formal);"}]}