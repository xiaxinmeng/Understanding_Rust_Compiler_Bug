{"sha": "f2cbd86c34ffc36a36090944d18b86985b22442d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJjYmQ4NmMzNGZmYzM2YTM2MDkwOTQ0ZDE4Yjg2OTg1YjIyNDQyZA==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2010-05-13T14:08:05Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2010-05-13T14:08:05Z"}, "message": "re PR fortran/35779 (error pointer wrong in PARAMETER)\n\ngcc/fortran/:\n2010-05-13  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/35779\n        * intrinsic.c (gfc_init_expr): Renamed to gfc_init_expr_flag.\n        Updated all usages.\n        * expr.c (init_flag): Removed; use gfc_init_expr_flag everywhere.\n        * array.c (match_array_list): Pass on gfc_init_expr_flag when matching\n        iterators.\n\ngcc/testsuite/:\n2010-05-13  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/35779\n        * gfortran.dg/initialization_25.f90: New.\n\nFrom-SVN: r159366", "tree": {"sha": "c4f84c65f11ace6d3113c31c9459bee24b509b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4f84c65f11ace6d3113c31c9459bee24b509b97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2cbd86c34ffc36a36090944d18b86985b22442d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2cbd86c34ffc36a36090944d18b86985b22442d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2cbd86c34ffc36a36090944d18b86985b22442d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2cbd86c34ffc36a36090944d18b86985b22442d/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "917ed77360cf86ddf2b45851187f532c137d77d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917ed77360cf86ddf2b45851187f532c137d77d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917ed77360cf86ddf2b45851187f532c137d77d0"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "ef1031a084e320cbd01d1249b509b23d55f59cea", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f2cbd86c34ffc36a36090944d18b86985b22442d", "patch": "@@ -1,3 +1,12 @@\n+2010-05-13  Daniel Franke  <franke.daniel@gmail.com>\n+\n+        PR fortran/35779\n+        * intrinsic.c (gfc_init_expr): Renamed to gfc_init_expr_flag.\n+        Updated all usages.\n+        * expr.c (init_flag): Removed; use gfc_init_expr_flag everywhere.\n+        * array.c (match_array_list): Pass on gfc_init_expr_flag when matching\n+        iterators.\n+\n 2010-05-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/44036"}, {"sha": "1e90584be49819344abbec273352b57ce9f2b5b6", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=f2cbd86c34ffc36a36090944d18b86985b22442d", "patch": "@@ -784,7 +784,6 @@ arith_power (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n   int power_sign;\n   gfc_expr *result;\n   arith rc;\n-  extern bool init_flag;\n \n   rc = ARITH_OK;\n   result = gfc_get_constant_expr (op1->ts.type, op1->ts.kind, &op1->where);\n@@ -899,7 +898,7 @@ arith_power (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n \n     case BT_REAL:\n \n-      if (init_flag)\n+      if (gfc_init_expr_flag)\n \t{\n \t  if (gfc_notify_std (GFC_STD_F2003,\"Fortran 2003: Noninteger \"\n \t\t\t      \"exponent in an initialization \"\n@@ -921,7 +920,7 @@ arith_power (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n \n     case BT_COMPLEX:\n       {\n-\tif (init_flag)\n+\tif (gfc_init_expr_flag)\n \t  {\n \t    if (gfc_notify_std (GFC_STD_F2003,\"Fortran 2003: Noninteger \"\n \t\t\t\t\"exponent in an initialization \""}, {"sha": "25c6e140306a10b51ac792ebcdc16a1c311ffd9a", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=f2cbd86c34ffc36a36090944d18b86985b22442d", "patch": "@@ -879,7 +879,7 @@ match_array_list (gfc_constructor_base *result)\n \n   for (n = 1;; n++)\n     {\n-      m = gfc_match_iterator (&iter, 0);\n+      m = gfc_match_iterator (&iter, gfc_init_expr_flag);\n       if (m == MATCH_YES)\n \tbreak;\n       if (m == MATCH_ERROR)"}, {"sha": "8230b46d6a2c0f477b6e2272b1d67be531f48e9f", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=f2cbd86c34ffc36a36090944d18b86985b22442d", "patch": "@@ -1895,7 +1895,7 @@ gfc_simplify_expr (gfc_expr *p, int type)\n       /* Only substitute array parameter variables if we are in an\n \t initialization expression, or we want a subsection.  */\n       if (p->symtree->n.sym->attr.flavor == FL_PARAMETER\n-\t  && (gfc_init_expr || p->ref\n+\t  && (gfc_init_expr_flag || p->ref\n \t      || p->symtree->n.sym->value->expr_type != EXPR_ARRAY))\n \t{\n \t  if (simplify_parameter_variable (p, type) == FAILURE)\n@@ -2626,11 +2626,11 @@ gfc_reduce_init_expr (gfc_expr *expr)\n {\n   gfc_try t;\n \n-  gfc_init_expr = 1;\n+  gfc_init_expr_flag = true;\n   t = gfc_resolve_expr (expr);\n   if (t == SUCCESS)\n     t = check_init_expr (expr);\n-  gfc_init_expr = 0;\n+  gfc_init_expr_flag = false;\n \n   if (t == FAILURE)\n     return FAILURE;\n@@ -2648,11 +2648,7 @@ gfc_reduce_init_expr (gfc_expr *expr)\n \n \n /* Match an initialization expression.  We work by first matching an\n-   expression, then reducing it to a constant.  The reducing it to \n-   constant part requires a global variable to flag the prohibition\n-   of a non-integer exponent in -std=f95 mode.  */\n-\n-bool init_flag = false;\n+   expression, then reducing it to a constant.  */\n \n match\n gfc_match_init_expr (gfc_expr **result)\n@@ -2663,25 +2659,25 @@ gfc_match_init_expr (gfc_expr **result)\n \n   expr = NULL;\n \n-  init_flag = true;\n+  gfc_init_expr_flag = true;\n \n   m = gfc_match_expr (&expr);\n   if (m != MATCH_YES)\n     {\n-      init_flag = false;\n+      gfc_init_expr_flag = false;\n       return m;\n     }\n \n   t = gfc_reduce_init_expr (expr);\n   if (t != SUCCESS)\n     {\n       gfc_free_expr (expr);\n-      init_flag = false;\n+      gfc_init_expr_flag = false;\n       return MATCH_ERROR;\n     }\n \n   *result = expr;\n-  init_flag = false;\n+  gfc_init_expr_flag = false;\n \n   return MATCH_YES;\n }"}, {"sha": "91c8b80ba64bd3e742a6b575cadb0a583c6340cb", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f2cbd86c34ffc36a36090944d18b86985b22442d", "patch": "@@ -2537,8 +2537,8 @@ void gfc_free_finalizer (gfc_finalizer *el); /* Needed in resolve.c, too  */\n \n gfc_try gfc_check_symbol_typed (gfc_symbol*, gfc_namespace*, bool, locus);\n \n-/* intrinsic.c */\n-extern int gfc_init_expr;\n+/* intrinsic.c -- true if working in an init-expr, false otherwise.  */\n+extern bool gfc_init_expr_flag;\n \n /* Given a symbol that we have decided is intrinsic, mark it as such\n    by placing it into a special module that is otherwise impossible to"}, {"sha": "ff0049be88e576b5ebf0505dbf7f06b9e41b3839", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=f2cbd86c34ffc36a36090944d18b86985b22442d", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Namespace to hold the resolved symbols for intrinsic subroutines.  */\n static gfc_namespace *gfc_intrinsic_namespace;\n \n-int gfc_init_expr = 0;\n+bool gfc_init_expr_flag = false;\n \n /* Pointers to an intrinsic function and its argument names that are being\n    checked.  */\n@@ -3803,7 +3803,7 @@ gfc_intrinsic_func_interface (gfc_expr *expr, int error_flag)\n \n   if ((isym->id == GFC_ISYM_REAL || isym->id == GFC_ISYM_DBLE\n        || isym->id == GFC_ISYM_CMPLX)\n-      && gfc_init_expr\n+      && gfc_init_expr_flag\n       && gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: Function '%s' \"\n \t\t\t \"as initialization expression at %L\", name,\n \t\t\t &expr->where) == FAILURE)\n@@ -3879,7 +3879,7 @@ gfc_intrinsic_func_interface (gfc_expr *expr, int error_flag)\n      (4)   A reference to an elemental standard intrinsic function,\n            where each argument is an initialization expression  */\n \n-  if (gfc_init_expr && isym->elemental && flag\n+  if (gfc_init_expr_flag && isym->elemental && flag\n       && gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: Elemental function \"\n \t\t\t\"as initialization expression with non-integer/non-\"\n \t\t        \"character arguments at %L\", &expr->where) == FAILURE)"}, {"sha": "743c46329868db4bb7a6c0818fa5591dc9e640c4", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=f2cbd86c34ffc36a36090944d18b86985b22442d", "patch": "@@ -5180,7 +5180,7 @@ gfc_simplify_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n   unsigned char *buffer;\n \n   if (!gfc_is_constant_expr (source)\n-\t|| (gfc_init_expr && !gfc_is_constant_expr (mold))\n+\t|| (gfc_init_expr_flag && !gfc_is_constant_expr (mold))\n \t|| !gfc_is_constant_expr (size))\n     return NULL;\n "}, {"sha": "7c50d6151abac3e5389511339b07b4b821f86b98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2cbd86c34ffc36a36090944d18b86985b22442d", "patch": "@@ -1,3 +1,8 @@\n+2010-05-13  Daniel Franke  <franke.daniel@gmail.com>\n+\n+        PR fortran/35779\n+        * gfortran.dg/initialization_25.f90: New.\n+\n 2010-05-13  Martin Jambor  <mjambor@suse.cz>\n \n \t* g++.dg/otr-fold-1.C: New test."}, {"sha": "d6fab972c182ec03139337a3db223052b6ce92d6", "filename": "gcc/testsuite/gfortran.dg/initialization_25.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2cbd86c34ffc36a36090944d18b86985b22442d/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_25.f90?ref=f2cbd86c34ffc36a36090944d18b86985b22442d", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do \"compile\" }\n+!\n+! PR fortran/35779 - unrelated error message\n+! Tescase contributed by\n+! Dick Hendrickson <dick DOT hendrickson AT gmail DOT com>\n+!\n+\n+  INTEGER :: J1\n+  INTEGER,PARAMETER :: I3(10) = (/(J1,J1=10,1,-1)/)\n+  INTEGER,PARAMETER :: I2(10) = (/(J1,J1=its_bad,1,-1)/) ! { dg-error \"does not reduce\" }\n+END"}]}