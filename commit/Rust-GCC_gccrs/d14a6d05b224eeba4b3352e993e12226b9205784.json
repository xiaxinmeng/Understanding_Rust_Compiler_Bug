{"sha": "d14a6d05b224eeba4b3352e993e12226b9205784", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE0YTZkMDViMjI0ZWViYTRiMzM1MmU5OTNlMTIyMjZiOTIwNTc4NA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-02-23T20:30:26Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-02-23T20:30:26Z"}, "message": "Support -msoft-float; support eabi -mrelocatable\n\nFrom-SVN: r9053", "tree": {"sha": "c2b4efdbe30b5f9d7312246bfa31d814f51bc4ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2b4efdbe30b5f9d7312246bfa31d814f51bc4ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d14a6d05b224eeba4b3352e993e12226b9205784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d14a6d05b224eeba4b3352e993e12226b9205784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d14a6d05b224eeba4b3352e993e12226b9205784", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d14a6d05b224eeba4b3352e993e12226b9205784/comments", "author": null, "committer": null, "parents": [{"sha": "919e340a210618bec185f6f1b17ff88accb3609a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/919e340a210618bec185f6f1b17ff88accb3609a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/919e340a210618bec185f6f1b17ff88accb3609a"}], "stats": {"total": 449, "additions": 311, "deletions": 138}, "files": [{"sha": "65b75182ccd38e0b190ace56c277306122916bed", "filename": "gcc/config/rs6000/eabi.asm", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Feabi.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Feabi.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.asm?ref=d14a6d05b224eeba4b3352e993e12226b9205784", "patch": "@@ -0,0 +1,57 @@\n+# File to either setup register 2 to point to the GOT, or to adjust the\n+# pointers in the .got2 section to point to their new addresses.\n+\n+\t.file\t\"eabi.asm\"\n+\t.section \".text\"\n+\t.globl\t __eabi\n+\n+\t.long\t0x4000\t\t\t\t# traceback table\n+__eabi:\tmflr\t0\n+\tbl\t.Laddr\t\t\t\t# get current address\n+\n+# Table of addresses\n+.Ltable:\n+\t.long\t.Ltable\t\t\t\t# address we are really at\n+\t.long\t_GLOBAL_OFFSET_TABLE_\t\t# normal GOT address\n+\t.long\t_GOT2_START_\t\t\t# -mrelocatable GOT pointers start\n+\t.long\t_GOT2_END_\t\t\t# -mrelocatable GOT pointers end\n+\n+.Laddr:\tmflr\t11\t\t\t\t# real address of .Ltable\n+\tlwz\t12,0(11)\t\t\t# linker generated address of .Ltable\n+\tsubf.\t12,12,11\t\t\t# calculate difference\n+\tbc\t4,2,.Lreloc\t\t\t# skip if we need to relocate\n+\n+# Normal program, load up register 2\n+\n+\tmtlr\t0\t\t\t\t# restore link register\n+\tlwz\t2,4(11)\t\t\t\t# normal GOT address\n+\tblr\n+\n+# We need to relocate the .got2 pointers.  Don't load register 2\n+\n+.Lreloc:\n+\tstwu\t30,-4(1)\n+\tstwu\t31,-4(1)\n+\tlwz\t30,8(11)\t\t\t# GOT pointers start\n+\tlwz\t31,12(11)\t\t\t# GOT pointers end\n+\tadd\t30,12,30\t\t\t# adjust pointers\n+\tadd\t31,12,31\n+\n+\tcmpw\t1,30,31\t\t\t\t# any pointers to adjust\n+\tbc\t12,6,.Ldone\n+\n+.Lloop:\tlwz\t11,0(30)\t\t\t# next pointer\n+\tadd\t11,11,12\t\t\t# adjust\n+\tstw\t11,0(30)\n+\taddi\t30,30,4\t\t\t\t# bump to next word\n+\tcmpw\t1,30,31\t\t\t\t# more pointers to adjust?\n+\tbc\t4,6,.Lloop\n+\n+# Done adjusting pointers, return\n+\n+.Ldone:\n+\tmtlr\t0\t\t\t\t# restore link register\n+\tlwz\t31,0(1)\n+\tlwz\t30,-4(1)\t\t\t# restore regs\n+\taddic\t1,1,8\t\t\t\t# pop stack\n+\tblr"}, {"sha": "2a9ae8dc7e011044ac468b4387e9a7bb747a5289", "filename": "gcc/config/rs6000/eabi.h", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Feabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Feabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.h?ref=d14a6d05b224eeba4b3352e993e12226b9205784", "patch": "@@ -19,22 +19,6 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n-/* eABI local switches */\n-/* Set PCC_BITFIELD_TYPE_MATTERS to 0 to ignore the type of bitfields\n-   when calculating alignment.  */\n-#define\tMASK_NO_BITFIELD_TYPE\t0x40000000\n-#define\tMASK_STRICT_ALIGN\t0x20000000\n-\n-#define\tTARGET_NO_BITFIELD_TYPE\t(target_flags & MASK_NO_BITFIELD_TYPE)\n-#define\tTARGET_BITFIELD_TYPE\t(! TARGET_NO_BITFIELD_TYPE)\n-#define TARGET_STRICT_ALIGN\t(target_flags & MASK_STRICT_ALIGN)\n-\n-#define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n-  { \"bit-align\",\t-MASK_NO_BITFIELD_TYPE },\t\t\t\\\n-  { \"no-bit-align\",\t MASK_NO_BITFIELD_TYPE },\t\t\t\\\n-  { \"strict-align\",\t MASK_STRICT_ALIGN },\t\t\t\t\\\n-  { \"no-strict-align\",\t-MASK_STRICT_ALIGN },\n-\n #include \"rs6000/sysv4.h\"\n \n /* For now, make stabs the default debugging type, not dwarf. */\n@@ -60,6 +44,15 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef\tBIGGEST_ALIGNMENT\n #define BIGGEST_ALIGNMENT 64\n \n+/* Put PC relative got entries in .got2 */\n+#undef\tMINIMAL_TOC_SECTION_ASM_OP\n+#define MINIMAL_TOC_SECTION_ASM_OP \\\n+  ((TARGET_RELOCATABLE) ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\" : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\")\n+\n+/* Invoke an initializer function to set up the GOT */\n+#define INVOKE__main 1\n+#define NAME__MAIN \"__eabi\"\n+\n #undef TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (PowerPC Embedded)\");\n "}, {"sha": "4890134d09169062146f19cd8c75f8482a85fb9d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 58, "deletions": 16, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d14a6d05b224eeba4b3352e993e12226b9205784", "patch": "@@ -75,7 +75,7 @@ rs6000_override_options ()\n   /* Simplify the entries below by making a mask for any POWER\n      variant and any PowerPC variant.  */\n \n-#define POWER_MASKS (MASK_POWER | MASK_POWER2)\n+#define POWER_MASKS (MASK_POWER | MASK_POWER2 | MASK_MULTIPLE)\n #define POWERPC_MASKS (MASK_POWERPC | MASK_PPC_GPOPT \\\n \t\t       | MASK_PPC_GFXOPT | MASK_POWERPC64)\n #define POWERPC_OPT_MASKS (MASK_PPC_GPOPT | MASK_PPC_GFXOPT)\n@@ -89,34 +89,34 @@ rs6000_override_options ()\n     } processor_target_table[]\n       = {{\"common\", PROCESSOR_COMMON, 0, POWER_MASKS | POWERPC_MASKS},\n \t {\"power\", PROCESSOR_POWER,\n-\t    MASK_POWER,\n+\t    MASK_POWER | MASK_MULTIPLE,\n \t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n \t {\"powerpc\", PROCESSOR_POWERPC,\n \t    MASK_POWERPC | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"rios\", PROCESSOR_RIOS1,\n-\t    MASK_POWER,\n+\t    MASK_POWER | MASK_MULTIPLE,\n \t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n \t {\"rios1\", PROCESSOR_RIOS1,\n-\t    MASK_POWER,\n+\t    MASK_POWER | MASK_MULTIPLE,\n \t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n \t {\"rsc\", PROCESSOR_PPC601,\n-\t    MASK_POWER,\n+\t    MASK_POWER | MASK_MULTIPLE,\n \t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n \t {\"rsc1\", PROCESSOR_PPC601,\n-\t    MASK_POWER,\n+\t    MASK_POWER | MASK_MULTIPLE,\n \t    MASK_POWER2 | POWERPC_MASKS | MASK_NEW_MNEMONICS},\n \t {\"rios2\", PROCESSOR_RIOS2,\n-\t    MASK_POWER | MASK_POWER2,\n+\t    MASK_POWER | MASK_MULTIPLE | MASK_POWER2,\n \t    POWERPC_MASKS | MASK_NEW_MNEMONICS},\n \t {\"601\", PROCESSOR_PPC601,\n-\t    MASK_POWER | MASK_POWERPC | MASK_NEW_MNEMONICS,\n+\t    MASK_POWER | MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_MULTIPLE,\n \t    MASK_POWER2 | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"mpc601\", PROCESSOR_PPC601,\n-\t    MASK_POWER | MASK_POWERPC | MASK_NEW_MNEMONICS,\n+\t    MASK_POWER | MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_MULTIPLE,\n \t    MASK_POWER2 | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"ppc601\", PROCESSOR_PPC601,\n-\t    MASK_POWER | MASK_POWERPC | MASK_NEW_MNEMONICS,\n+\t    MASK_POWER | MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_MULTIPLE,\n \t    MASK_POWER2 | POWERPC_OPT_MASKS | MASK_POWERPC64},\n \t {\"603\", PROCESSOR_PPC603,\n \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n@@ -1601,6 +1601,12 @@ output_prolog (file, size)\n       common_mode_defined = 1;\n     }\n \n+#ifdef USING_SVR4_H\n+  /* If we have a relocatable GOT section, we need to save the LR. */\n+  if (TARGET_RELOCATABLE && get_pool_size () != 0)\n+    regs_ever_live[65] = 1;\n+#endif\n+\n   /* If we have to call a function to save fpr's, or if we are doing profiling,\n      then we will be using LR.  */\n   if (first_fp_reg < 62 || profile_flag)\n@@ -1673,12 +1679,38 @@ output_prolog (file, size)\n      TOC_TABLE address into register 30.  */\n   if (TARGET_MINIMAL_TOC && get_pool_size () != 0)\n     {\n-      char buf[100];\n+      char buf[256];\n \n-      ASM_GENERATE_INTERNAL_LABEL (buf, \"LCTOC\", 0);\n-      asm_fprintf (file, \"\\t{l|lwz} 30,\");\n-      assemble_name (file, buf);\n-      asm_fprintf (file, \"(2)\\n\");\n+#ifdef USING_SVR4_H\n+      if (TARGET_RELOCATABLE)\n+\t{\n+\t  static int labelno = 0;\n+\n+\t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LCF\", labelno);\n+\t  fprintf (file, \"\\tbl \");\n+\t  assemble_name (file, buf);\n+\t  fprintf (file, \"\\n\");\n+\n+\t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LCTOC\", 1);\n+\t  fprintf (file, (TARGET_POWERPC64) ? \"\\t.quad \" : \"\\t.long \");\n+\t  assemble_name (file, buf);\n+\t  fprintf (file, \"-.\\n\");\n+\n+\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"LCF\", labelno);\n+\t  fprintf (file, \"\\tmflr 30\\n\");\n+\n+\t  asm_fprintf (file, (TARGET_POWERPC64) ? \"\\tld 0,0(30)\\n\" : \"\\t{l|lwz} 0,0(30)\\n\");\n+\t  asm_fprintf (file, \"\\t{cax|add} 30,0,30\\n\");\n+\t  labelno++;\n+\t}\n+      else\n+#endif /* USING_SVR4_H */\n+\t{\n+\t  ASM_GENERATE_INTERNAL_LABEL (buf, \"LCTOC\", 0);\n+\t  asm_fprintf (file, \"\\t{l|lwz} 30,\");\n+\t  assemble_name (file, buf);\n+\t  asm_fprintf (file, \"(2)\\n\");\n+\t}\n     }\n }\n \n@@ -1973,7 +2005,17 @@ output_toc (file, x, labelno)\n   rtx base = x;\n   int offset = 0;\n \n-  ASM_OUTPUT_INTERNAL_LABEL (file, \"LC\", labelno);\n+#ifdef USING_SVR4_H\n+  if (TARGET_MINIMAL_TOC)\n+    {\n+      ASM_OUTPUT_INTERNAL_LABEL_PREFIX (file, \"LC\");\n+      fprintf (file, \"%d = .-\", labelno);\n+      ASM_OUTPUT_INTERNAL_LABEL_PREFIX (file, \"LCTOC\");\n+      fprintf (file, \"1\\n\");\n+    }\n+  else\n+#endif /* USING_SVR4_H */\n+    ASM_OUTPUT_INTERNAL_LABEL (file, \"LC\", labelno);\n \n   /* Handle FP constants specially.  Note that if we have a minimal\n      TOC, things we put here aren't actually in the TOC, so we can allow"}, {"sha": "55f52cb6b2440f65934beaaaaa31a5f389bdd282", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d14a6d05b224eeba4b3352e993e12226b9205784", "patch": "@@ -148,7 +148,7 @@ extern int target_flags;\n #define MASK_64BIT\t\t0x400\n \n /* Disable use of FPRs.  */\n-#define MASK_NO_FPR\t\t0x800\n+#define MASK_SOFT_FLOAT\t\t0x800\n \n /* Enable load/store multiple, even on powerpc */\n #define\tMASK_MULTIPLE\t\t0x1000\n@@ -164,9 +164,11 @@ extern int target_flags;\n #define TARGET_NO_SUM_IN_TOC\t\t(target_flags & MASK_NO_SUM_IN_TOC)\n #define TARGET_MINIMAL_TOC\t\t(target_flags & MASK_MINIMAL_TOC)\n #define TARGET_64BIT\t\t\t(target_flags & MASK_64BIT)\n-#define TARGET_NO_FPR\t\t\t(target_flags & MASK_NO_FPR)\n+#define TARGET_SOFT_FLOAT\t\t(target_flags & MASK_SOFT_FLOAT)\n #define\tTARGET_MULTIPLE\t\t\t(target_flags & MASK_MULTIPLE)\n \n+#define TARGET_HARD_FLOAT\t\t(! TARGET_SOFT_FLOAT)\n+\n /* Run-time compilation parameters selecting different hardware subsets.\n \n    Macro to define tables used to set the flags.\n@@ -181,10 +183,10 @@ extern int target_flags;\n #endif\n \n #define TARGET_SWITCHES\t\t\t\t\t\t\\\n- {{\"power\",\t\tMASK_POWER},\t\t\t\t\\\n-  {\"power2\",\t\tMASK_POWER | MASK_POWER2},\t\t\\\n+ {{\"power\",\t\tMASK_POWER  | MASK_MULTIPLE},\t\t\\\n+  {\"power2\",\t\tMASK_POWER | MASK_MULTIPLE | MASK_POWER2}, \\\n   {\"no-power2\",\t\t- MASK_POWER2},\t\t\t\t\\\n-  {\"no-power\",\t\t- (MASK_POWER | MASK_POWER2)},\t\t\\\n+  {\"no-power\",\t\t- (MASK_POWER | MASK_POWER2 | MASK_MULTIPLE)}, \\\n   {\"powerpc\",\t\tMASK_POWERPC},\t\t\t\t\\\n   {\"no-powerpc\",\t- (MASK_POWERPC | MASK_PPC_GPOPT \t\\\n \t\t\t   | MASK_PPC_GFXOPT | MASK_POWERPC64)}, \\\n@@ -203,8 +205,8 @@ extern int target_flags;\n   {\"minimal-toc\",\tMASK_MINIMAL_TOC},\t\t\t\\\n   {\"minimal-toc\",\t- (MASK_NO_FP_IN_TOC | MASK_NO_SUM_IN_TOC)}, \\\n   {\"no-minimal-toc\",\t- MASK_MINIMAL_TOC},\t\t\t\\\n-  {\"fp-regs\",\t\t- MASK_NO_FPR},\t\t\t\t\\\n-  {\"no-fp-regs\",\tMASK_NO_FPR},\t\t\t\t\\\n+  {\"hard-float\",\t- MASK_SOFT_FLOAT},\t\t\t\\\n+  {\"soft-float\",\tMASK_SOFT_FLOAT},\t\t\t\\\n   {\"multiple\",\t\tMASK_MULTIPLE},\t\t\t\t\\\n   {\"no-multiple\",\t- MASK_MULTIPLE},\t\t\t\\\n   SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n@@ -615,8 +617,8 @@ do {\t\t\t\t\\\n {\t\t\t\t\t\\\n   if (! TARGET_POWER)\t\t\t\\\n     fixed_regs[64] = 1;\t\t\t\\\n-  if (TARGET_NO_FPR)\t\t\t\\\n-    for (i = 32; i < 64; i++)\t\t\t\\\n+  if (TARGET_SOFT_FLOAT)\t\t\\\n+    for (i = 32; i < 64; i++)\t\t\\\n       fixed_regs[i] = call_used_regs[i] = 1; \\\n }\n \n@@ -896,17 +898,17 @@ enum reg_class { NO_REGS, BASE_REGS, GENERAL_REGS, FLOAT_REGS,\n    otherwise, FUNC is 0.\n \n    On RS/6000 an integer value is in r3 and a floating-point value is in \n-   fp1.  */\n+   fp1, unless -msoft-float.  */\n \n #define FUNCTION_VALUE(VALTYPE, FUNC)\t\\\n   gen_rtx (REG, TYPE_MODE (VALTYPE),\t\\\n-\t   TREE_CODE (VALTYPE) == REAL_TYPE ? 33 : 3)\n+\t   TREE_CODE (VALTYPE) == REAL_TYPE && TARGET_HARD_FLOAT ? 33 : 3)\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n \n #define LIBCALL_VALUE(MODE)\t\t\\\n-  gen_rtx (REG, MODE, GET_MODE_CLASS (MODE) == MODE_FLOAT ? 33 : 3)\n+  gen_rtx (REG, MODE, GET_MODE_CLASS (MODE) == MODE_FLOAT && TARGET_HARD_FLOAT ? 33 : 3)\n \n /* The definition of this macro implies that there are cases where\n    a scalar value cannot be returned in registers.\n@@ -989,7 +991,7 @@ struct rs6000_args {int words, fregno, nargs_prototype; };\n \n /* Non-zero if we can use a floating-point register to pass this arg.  */\n #define USE_FP_FOR_ARG_P(CUM,MODE,TYPE)\t\\\n-  (GET_MODE_CLASS (MODE) == MODE_FLOAT && (CUM).fregno < 46)\n+  (GET_MODE_CLASS (MODE) == MODE_FLOAT && (CUM).fregno < 46 && TARGET_HARD_FLOAT)\n \n /* Determine where to put an argument to a function.\n    Value is zero to push the argument on the stack,\n@@ -1361,6 +1363,7 @@ struct rs6000_args {int words, fregno, nargs_prototype; };\n   if (LEGITIMATE_OFFSET_ADDRESS_P (MODE, X))\t\t\\\n     goto ADDR;\t\t\t\t\t\t\\\n   if ((MODE) != DImode && (MODE) != TImode\t\t\\\n+      && (TARGET_HARD_FLOAT || (MODE) != DFmode)\t\\\n       && LEGITIMATE_INDEXED_ADDRESS_P (X))\t\t\\\n     goto ADDR;\t\t\t\t\t\t\\\n }\n@@ -1465,7 +1468,7 @@ struct rs6000_args {int words, fregno, nargs_prototype; };\n \n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n-#define MOVE_MAX (TARGET_POWER ? 16 : (TARGET_POWERPC64 ? 8 : 4))\n+#define MOVE_MAX (TARGET_MULTIPLE ? 16 : (TARGET_POWERPC64 ? 8 : 4))\n #define MAX_MOVE_MAX 16\n \n /* Nonzero if access to memory by bytes is no faster than for words."}, {"sha": "13de97be92892060844f5bb01bddffa307d27a7e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 100, "deletions": 75, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d14a6d05b224eeba4b3352e993e12226b9205784", "patch": "@@ -2510,7 +2510,7 @@\n (define_insn \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_extend:DF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"*\n {\n   if (REGNO (operands[0]) == REGNO (operands[1]))\n@@ -2523,120 +2523,120 @@\n (define_insn \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_truncate:SF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"frsp %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"negsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"fneg %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"abssf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(abs:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"fabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:SF (abs:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\"))))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"fnabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"addsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"fadds %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"{fa|fadd} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"subsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"fsubs %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"{fs|fsub} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"mulsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"fmuls %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"{fm|fmul} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"fdivs %0,%1,%2\"\n   [(set_attr \"type\" \"sdiv\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"{fd|fdiv} %0,%1,%2\"\n   [(set_attr \"type\" \"sdiv\")])\n \n@@ -2645,7 +2645,7 @@\n \t(plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"fmadds %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -2654,7 +2654,7 @@\n \t(plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"{fma|fmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -2663,7 +2663,7 @@\n \t(minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"fmsubs %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -2672,7 +2672,7 @@\n \t(minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"{fms|fmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -2681,7 +2681,7 @@\n \t(neg:SF (plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_POWERPC\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"fnmadds %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -2690,7 +2690,7 @@\n \t(neg:SF (plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -2699,7 +2699,7 @@\n \t(neg:SF (minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_POWERPC\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"fnmsubs %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -2708,27 +2708,27 @@\n \t(neg:SF (minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PPC_GPOPT || TARGET_POWER2\"\n+  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GPOPT\"\n+  \"TARGET_PPC_GPOPT && TARGET_HARD_FLOAT\"\n   \"fsqrts %0,%1\"\n   [(set_attr \"type\" \"ssqrt\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWER2\"\n+  \"TARGET_POWER2 && TARGET_HARD_FLOAT\"\n   \"fsqrt %0,%1\"\n   [(set_attr \"type\" \"dsqrt\")])\n \n@@ -2745,7 +2745,7 @@\n \t\t\t     (const_int 0))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPC_GFXOPT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   \"\n { operands[3] = gen_reg_rtx (SFmode); }\")\n \n@@ -2754,7 +2754,7 @@\n \t(smax:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"\")))\n    (clobber (match_operand:SF 3 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_PPC_GFXOPT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   [(set (match_dup 3)\n \t(minus:SF (match_dup 1) (match_dup 2)))\n    (set (match_dup 0)\n@@ -2773,7 +2773,7 @@\n \t\t\t     (const_int 0))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPC_GFXOPT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   \"\n { operands[3] = gen_reg_rtx (SFmode); }\")\n \n@@ -2782,7 +2782,7 @@\n \t(smin:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"\")))\n    (clobber (match_operand:SF 3 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_PPC_GFXOPT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   [(set (match_dup 3)\n \t(minus:SF (match_dup 2) (match_dup 1)))\n    (set (match_dup 0)\n@@ -2797,7 +2797,7 @@\n \t (if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   \"\n {\n   rtx temp, op0, op1;\n@@ -2867,7 +2867,7 @@\n \t\t\t     (const_int 0))\n \t\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -2877,59 +2877,59 @@\n \t\t\t     (const_int 0))\n \t\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n (define_insn \"negdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"fneg %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"absdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(abs:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"fabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:DF (abs:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"fnabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"adddf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"{fa|fadd} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"subdf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"{fs|fsub} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"muldf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"{fm|fmul} %0,%1,%2\"\n   [(set_attr \"type\" \"dmul\")])\n \n (define_insn \"divdf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"{fd|fdiv} %0,%1,%2\"\n   [(set_attr \"type\" \"ddiv\")])\n \n@@ -2938,7 +2938,7 @@\n \t(plus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"{fma|fmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -2947,7 +2947,7 @@\n \t(minus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"{fms|fmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -2956,7 +2956,7 @@\n \t(neg:DF (plus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -2965,14 +2965,14 @@\n \t(neg:DF (minus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GPOPT || TARGET_POWER2\"\n+  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT\"\n   \"fsqrt %0,%1\"\n   [(set_attr \"type\" \"dsqrt\")])\n \n@@ -2990,7 +2990,7 @@\n \t\t\t     (const_int 0))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPC_GFXOPT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   \"\n { operands[3] = gen_reg_rtx (DFmode); }\")\n \n@@ -2999,7 +2999,7 @@\n \t(smax:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"\")))\n    (clobber (match_operand:DF 3 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_PPC_GFXOPT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   [(set (match_dup 3)\n \t(minus:DF (match_dup 1) (match_dup 2)))\n    (set (match_dup 0)\n@@ -3018,7 +3018,7 @@\n \t\t\t     (const_int 0))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPC_GFXOPT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   \"\n { operands[3] = gen_reg_rtx (DFmode); }\")\n \n@@ -3027,7 +3027,7 @@\n \t(smin:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"\")))\n    (clobber (match_operand:DF 3 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_PPC_GFXOPT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   [(set (match_dup 3)\n \t(minus:DF (match_dup 2) (match_dup 1)))\n    (set (match_dup 0)\n@@ -3042,7 +3042,7 @@\n \t (if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   \"\n {\n   rtx temp, op0, op1;\n@@ -3112,7 +3112,7 @@\n \t\t\t     (const_int 0))\n \t\t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n (define_insn \"fselsfdf4\"\n@@ -3135,7 +3135,7 @@\n    (set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(minus:DF (subreg:DF (match_dup 2) 0)\n \t\t  (match_dup 5)))]\n-  \"! TARGET_POWERPC64 && HOST_BITS_PER_INT == BITS_PER_WORD\"\n+  \"! TARGET_POWERPC64 && (HOST_BITS_PER_INT == BITS_PER_WORD) && TARGET_HARD_FLOAT\"\n   \"\n {\n   operands[2] = gen_reg_rtx (DImode);\n@@ -3152,7 +3152,7 @@\n    (set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(minus:DF (subreg:DF (match_dup 2) 0)\n \t\t  (match_dup 4)))]\n-  \"! TARGET_POWERPC64 && HOST_BITS_PER_INT == BITS_PER_WORD\"\n+  \"! TARGET_POWERPC64 && (HOST_BITS_PER_INT == BITS_PER_WORD) && TARGET_HARD_FLOAT\"\n   \"\n {\n   operands[2] = gen_reg_rtx (DImode);\n@@ -3232,7 +3232,7 @@\n (define_expand \"fix_truncdfsi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\n {\n   if (TARGET_POWER2 || TARGET_POWERPC)\n@@ -3258,14 +3258,14 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=f\")\n \t(sign_extend:DI\n \t (fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_POWER2 || TARGET_POWERPC\"\n+  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT\"\n   \"{fcirz|fctiwz} %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"fixuns_truncdfsi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(unsigned_fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n-  \"! TARGET_POWER2 && ! TARGET_POWERPC\"\n+  \"! TARGET_POWER2 && ! TARGET_POWERPC && TARGET_HARD_FLOAT\"\n   \"\n {\n   emit_insn (gen_trunc_call (operands[0], operands[1],\n@@ -3277,7 +3277,7 @@\n   [(parallel [(set (match_operand:SI 0 \"\" \"\")\n \t\t   (fix:SI (match_operand:DF 1 \"\" \"\")))\n \t      (use (match_operand:SI 2 \"\" \"\"))])]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\n {\n   rtx insns = gen_trunc_call_rtl (operands[0], operands[1], operands[2]);\n@@ -3300,7 +3300,7 @@\n \t      (clobber (scratch:SI))])\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(reg:SI 3))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\n { \n   rs6000_trunc_used = 1;\n@@ -3309,14 +3309,14 @@\n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n   \"fcfid %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=f\")\n \t(fix:DI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n   \"fctidz %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \f\n@@ -3953,13 +3953,28 @@\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"fp_reg_or_mem_operand\" \"=f,f,m\")\n \t(match_operand:SF 1 \"input_operand\" \"f,m,f\"))]\n-  \"gpc_reg_operand (operands[0], SFmode)\n-   || gpc_reg_operand (operands[1], SFmode)\"\n+  \"(gpc_reg_operand (operands[0], SFmode)\n+   || gpc_reg_operand (operands[1], SFmode)) && TARGET_HARD_FLOAT\"\n   \"@\n    fmr %0,%1\n    lfs%U1%X1 %0,%1\n    stfs%U0%X0 %1,%0\"\n   [(set_attr \"type\" \"fp,fpload,*\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r\")\n+\t(match_operand:SF 1 \"input_operand\" \"r,m,r,I,J,R\"))]\n+  \"(gpc_reg_operand (operands[0], SFmode)\n+   || gpc_reg_operand (operands[1], SFmode)) && TARGET_SOFT_FLOAT\"\n+  \"@\n+   mr %0,%1\n+   {l%U1%X1|lwz%U1%X1} %0,%1\n+   {st%U0%X0|stw%U0%X0} %1,%0\n+   {lil|li} %0,%1\n+   {liu|lis} %0,%u1\n+   {cal|la} %0,%1(%*)\"\n+  [(set_attr \"type\" \"*,load,*,*,*,*\")])\n+\n \f\n (define_expand \"movdf\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n@@ -4168,7 +4183,7 @@\n   [(parallel [(set (match_operand:TI 0 \"general_operand\" \"\")\n \t\t   (match_operand:TI 1 \"general_operand\" \"\"))\n \t      (clobber (scratch:SI))])]\n-  \"TARGET_POWER || TARGET_POWERPC64\"\n+  \"TARGET_MULTIPLE || TARGET_POWERPC64\"\n   \"\n {\n   if (GET_CODE (operands[0]) == MEM)\n@@ -4196,7 +4211,7 @@\n   [(set (match_operand:TI 0 \"reg_or_mem_operand\" \"=Q,m,????r,????r,????r\")\n \t(match_operand:TI 1 \"reg_or_mem_operand\" \"r,r,r,Q,m\"))\n    (clobber (match_scratch:SI 2 \"=q,q#X,X,X,X\"))]\n-  \"TARGET_POWER && ! TARGET_POWERPC64 && (gpc_reg_operand (operands[0], TImode)\n+  \"TARGET_MULTIPLE && ! TARGET_POWERPC64 && (gpc_reg_operand (operands[0], TImode)\n    || gpc_reg_operand (operands[1], TImode))\"\n   \"*\n {\n@@ -4392,7 +4407,15 @@\n \t\t   [(set (match_operand:SI 1 \"indirect_operand\" \"=Q\")\n \t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n \t\t    (clobber (match_scratch:SI 3 \"=q\"))])]\n-  \"TARGET_POWER\"\n+  \"TARGET_MULTIPLE && !TARGET_POWERPC\"\n+  \"{stsi|stswi} %2,%P1,%O0\")\n+\n+(define_insn \"\"\n+  [(match_parallel 0 \"store_multiple_operation\"\n+\t\t   [(set (match_operand:SI 1 \"indirect_operand\" \"=Q\")\n+\t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n+\t\t    (clobber (match_scratch:SI 3 \"X\"))])]\n+  \"TARGET_MULTIPLE && TARGET_POWERPC\"\n   \"{stsi|stswi} %2,%P1,%O0\")\n \f\n ;; Define insns that do load or store with update.  Some of these we can \n@@ -4552,7 +4575,7 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"@\n    lfsux %3,%0,%2\n    lfsu %3,%2(%0)\"\n@@ -4564,7 +4587,7 @@\n \t(match_operand:SF 3 \"gpc_reg_operand\" \"f,f\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"@\n    stfsux %3,%0,%2\n    stfsu %3,%2(%0)\")\n@@ -4575,7 +4598,7 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"@\n    lfdux %3,%0,%2\n    lfdu %3,%2(%0)\"\n@@ -4587,7 +4610,7 @@\n \t(match_operand:DF 3 \"gpc_reg_operand\" \"f,f\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"@\n    stfdux %3,%0,%2\n    stfdu %3,%2(%0)\")\n@@ -4600,6 +4623,7 @@\n    (set (match_operand:DF 2 \"gpc_reg_operand\" \"=f\")\n \t(match_operand:DF 3 \"memory_operand\" \"\"))]\n   \"TARGET_POWER2\n+   && TARGET_HARD_FLOAT\n    && registers_ok_for_quad_peep (operands[0], operands[2])\n    && ! MEM_VOLATILE_P (operands[1]) && ! MEM_VOLATILE_P (operands[3])\n    && addrs_ok_for_quad_peep (XEXP (operands[1], 0), XEXP (operands[3], 0))\"\n@@ -4611,6 +4635,7 @@\n    (set (match_operand:DF 2 \"memory_operand\" \"\")\n \t(match_operand:DF 3 \"gpc_reg_operand\" \"f\"))]\n   \"TARGET_POWER2\n+   && TARGET_HARD_FLOAT\n    && registers_ok_for_quad_peep (operands[1], operands[3])\n    && ! MEM_VOLATILE_P (operands[0]) && ! MEM_VOLATILE_P (operands[2])\n    && addrs_ok_for_quad_peep (XEXP (operands[0], 0), XEXP (operands[2], 0))\"\n@@ -4891,7 +4916,7 @@\n (define_expand \"cmpsf\"\n   [(set (cc0) (compare (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t\t       (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\n {\n   rs6000_compare_op0 = operands[0];\n@@ -4903,7 +4928,7 @@\n (define_expand \"cmpdf\"\n   [(set (cc0) (compare (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t\t       (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\n {\n   rs6000_compare_op0 = operands[0];\n@@ -5290,15 +5315,15 @@\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCFP (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t      (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"fcmpu %0,%1,%2\"\n   [(set_attr \"type\" \"fpcompare\")])\n \n (define_insn \"\"\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCFP (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t      (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"\"\n+  \"TARGET_HARD_FLOAT\"\n   \"fcmpu %0,%1,%2\"\n   [(set_attr \"type\" \"fpcompare\")])\n \f"}, {"sha": "e2ff344b91141c462acaa170533f101bcecedcd7", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 51, "deletions": 17, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=d14a6d05b224eeba4b3352e993e12226b9205784", "patch": "@@ -18,6 +18,27 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n+/* eABI local switches -- put here rather than eabi.h, so the switches\n+   can be tested in macros.  */\n+\n+#define\tMASK_NO_BITFIELD_TYPE\t0x40000000\t/* Set PCC_BITFIELD_TYPE_MATTERS to 0 */\n+#define\tMASK_STRICT_ALIGN\t0x20000000\t/* Set STRICT_ALIGNMENT to 1.  */\n+#define MASK_RELOCATABLE\t0x10000000\t/* GOT pointers are PC relative */\n+\n+#define\tTARGET_NO_BITFIELD_TYPE\t(target_flags & MASK_NO_BITFIELD_TYPE)\n+#define\tTARGET_BITFIELD_TYPE\t(! TARGET_NO_BITFIELD_TYPE)\n+#define TARGET_STRICT_ALIGN\t(target_flags & MASK_STRICT_ALIGN)\n+#define TARGET_RELOCATABLE\t(target_flags & MASK_RELOCATABLE)\n+\n+#undef\tSUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n+  { \"bit-align\",\t-MASK_NO_BITFIELD_TYPE },\t\t\t\\\n+  { \"no-bit-align\",\t MASK_NO_BITFIELD_TYPE },\t\t\t\\\n+  { \"strict-align\",\t MASK_STRICT_ALIGN },\t\t\t\t\\\n+  { \"no-strict-align\",\t-MASK_STRICT_ALIGN },\t\t\t\t\\\n+  { \"relocatable\",\t MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC }, \\\n+  { \"no-relocatable\",\t-MASK_RELOCATABLE },\n+\n #include \"rs6000/powerpc.h\"\n \n /* Don't generate XCOFF debugging information.  */\n@@ -106,33 +127,46 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n void\t\t\t\t\t\t\t\t\t\\\n toc_section ()\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_MINIMAL_TOC)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      static int toc_initialized = 0;\t\t\t\t\t\\\n+  static int toc_initialized = 0;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_toc)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n       if (! toc_initialized)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  fprintf (asm_out_file, \"%s\\n\", TOC_SECTION_ASM_OP);\t\t\\\n-\t  fprintf (asm_out_file, \".LCTOC0:\\n\");\t\t\t\t\\\n-\t  fprintf (asm_out_file, \"\\t.tc .LCTOC1\\n\");\t\t\t\\\n-\t  fprintf (asm_out_file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\t\\\n-\t  fprintf (asm_out_file, \".LCTOC1:\\n\");\t\t\t\t\\\n+\t  if (!TARGET_RELOCATABLE)\t\t\t\t\t\\\n+\t    fprintf (asm_out_file, \"%s\\n\", TOC_SECTION_ASM_OP);\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  if (TARGET_MINIMAL_TOC)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      if (!TARGET_RELOCATABLE)\t\t\t\t\t\\\n+\t\t{\t\t\t\t\t\t\t\\\n+\t\t  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LCTOC\", 0);\t\\\n+\t\t  fprintf (asm_out_file, \"\\t.tc \");\t\t\t\\\n+\t\t  ASM_OUTPUT_INTERNAL_LABEL_PREFIX (asm_out_file, \"LCTOC1[TC],\"); \\\n+\t\t  ASM_OUTPUT_INTERNAL_LABEL_PREFIX (asm_out_file, \"LCTOC1\"); \\\n+\t\t  fprintf (asm_out_file, \"\\n\");\t\t\t\t\\\n+\t\t}\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t      fprintf (asm_out_file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP); \\\n+\t      ASM_OUTPUT_INTERNAL_LABEL_PREFIX (asm_out_file, \"LCTOC1\"); \\\n+\t      fprintf (asm_out_file, \" = .+32768\\n\");\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t  toc_initialized = 1;\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_toc)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\",\t\t\t\t\t\\\n-\t       (TARGET_MINIMAL_TOC\t\t\t\t\t\\\n-\t\t? MINIMAL_TOC_SECTION_ASM_OP\t\t\t\t\\\n-\t\t: TOC_SECTION_ASM_OP));\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tfprintf (asm_out_file, \"%s\\n\",\t\t\t\t\t\\\n+\t\t (TARGET_MINIMAL_TOC\t\t\t\t\t\\\n+\t\t  ? MINIMAL_TOC_SECTION_ASM_OP\t\t\t\t\\\n+\t\t  : TOC_SECTION_ASM_OP));\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n       in_section = in_toc;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define TOC_SECTION_ASM_OP \"\\t.section\\t.got,\\\"aw\\\"\"\n-#define MINIMAL_TOC_SECTION_ASM_OP \"\\t.section\\t.got1,\\\"aw\\\"\"\n+#define TOC_SECTION_ASM_OP \"\\t.section\\t\\\".got\\\",\\\"aw\\\"\"\n+#define MINIMAL_TOC_SECTION_ASM_OP \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\"\n \n /* Use the TOC section for TOC entries.  */\n "}, {"sha": "4c659a629d773b2786f02658880b80f14af03f2d", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d14a6d05b224eeba4b3352e993e12226b9205784/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=d14a6d05b224eeba4b3352e993e12226b9205784", "patch": "@@ -1,3 +1,22 @@\n # Do not build libgcc1.\n LIBGCC1 =\n CROSS_LIBGCC1 =\n+\n+# These are really part of libgcc1, but this will cause them to be\n+# built correctly, so... [taken from t-sparclite]\n+LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+# Build the libraries for both hard and soft floating point\n+\n+MULTILIB_OPTIONS = msoft-float\n+MULTILIB_DIRNAMES = soft-float\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib"}]}