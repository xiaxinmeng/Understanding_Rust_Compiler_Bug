{"sha": "fc06280eb11be2316b12a51112cb62614141f32d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMwNjI4MGViMTFiZTIzMTZiMTJhNTExMTJjYjYyNjE0MTQxZjMyZA==", "commit": {"author": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2015-02-13T05:44:46Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2015-02-13T05:44:46Z"}, "message": "re PR tree-optimization/64705 (Bad code generation of sieve on x86-64 because of too aggressive IV optimizations)\n\n\n\tPR tree-optimization/64705\n\t* tree-ssa-loop-niter.h (expand_simple_operations): New parameter.\n\t* tree-ssa-loop-niter.c (expand_simple_operations): New parameter.\n\t* tree-ssa-loop-ivopts.c (extract_single_var_from_expr): New.\n\t(find_bivs, find_givs_in_stmt_scev): Pass new argument to\n\texpand_simple_operations.\n\n\ttestsuite\n\tPR tree-optimization/64705\n\t* gcc.dg/tree-ssa/pr64705.c: New test.\n\nFrom-SVN: r220676", "tree": {"sha": "1306ae46686893d216153301b433362f1e20624d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1306ae46686893d216153301b433362f1e20624d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc06280eb11be2316b12a51112cb62614141f32d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc06280eb11be2316b12a51112cb62614141f32d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc06280eb11be2316b12a51112cb62614141f32d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc06280eb11be2316b12a51112cb62614141f32d/comments", "author": null, "committer": null, "parents": [{"sha": "785f21af82139f512eb12f3318899c9f967409e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785f21af82139f512eb12f3318899c9f967409e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/785f21af82139f512eb12f3318899c9f967409e6"}], "stats": {"total": 114, "additions": 98, "deletions": 16}, "files": [{"sha": "66550042ee9ee6e01f304eaf647de6ecded5a08a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc06280eb11be2316b12a51112cb62614141f32d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc06280eb11be2316b12a51112cb62614141f32d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc06280eb11be2316b12a51112cb62614141f32d", "patch": "@@ -1,4 +1,13 @@\n-2015-02-12  H.J. Lu  <hongjiu.lu@intel.com>\n+2015-02-13  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/64705\n+\t* tree-ssa-loop-niter.h (expand_simple_operations): New parameter.\n+\t* tree-ssa-loop-niter.c (expand_simple_operations): New parameter.\n+\t* tree-ssa-loop-ivopts.c (extract_single_var_from_expr): New.\n+\t(find_bivs, find_givs_in_stmt_scev): Pass new argument to\n+\texpand_simple_operations.\n+\n+2015-02-13  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Richard Henderson  <rth@redhat.com>\n \n \tPR rtl/32219\n@@ -21,7 +30,7 @@\n \t* config/rs6000/rs6000.c (rs6000_emit_epilogue): Fix typo in\n \tcode setting up r11 for out-of-line fp restore.\n \n-2015-02-12  Eric Botcazou  <ebotcazou@adacore.com>\n+2015-02-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/visium/visium.opt (msv-mode): Add RejectNegative and Report.\n \t(muser-mode): Likewise."}, {"sha": "729f92d14fa8d4eaefe04d8e601467921f4ebb22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc06280eb11be2316b12a51112cb62614141f32d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc06280eb11be2316b12a51112cb62614141f32d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc06280eb11be2316b12a51112cb62614141f32d", "patch": "@@ -1,3 +1,8 @@\n+2015-02-13  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/64705\n+\t* gcc.dg/tree-ssa/pr64705.c: New test.\n+\n 2015-02-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl/32219"}, {"sha": "35a696168f5dcae0d1b69bc1ee393e0a2bf57771", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr64705.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc06280eb11be2316b12a51112cb62614141f32d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64705.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc06280eb11be2316b12a51112cb62614141f32d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64705.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr64705.c?ref=fc06280eb11be2316b12a51112cb62614141f32d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ivopts-details\" } */\n+\n+double g;\n+\n+int foo(char *flags, long len, long i, long steps)\n+{\n+  register long step, iter;\n+\n+  if(*(flags + i))\n+    {\n+      step = i + i + 3;\n+      for(iter = i + step ; iter <= len ; iter += step)\n+\t{\n+\t  steps++;\n+\t  *(flags + iter)=0;\n+\t}\n+    }\n+   g = 5.0*(double)steps;\n+\n+   return 0;\n+}\n+\n+/* Don't expand iv {base+step, step}_loop into {base+x+y, step}_loop\n+   even if \"step == x + y\".  */\n+/* { dg-final { scan-tree-dump \"base step_\\[0-9\\]* \\\\+ iter|base iter_\\[0-9\\]* \\\\+ step\" \"ivopts\"} } */\n+/* { dg-final { cleanup-tree-dump \"ivopts\" } } */"}, {"sha": "6c964308067f6a35faa3daa37e10087a09a5c8ab", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc06280eb11be2316b12a51112cb62614141f32d/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc06280eb11be2316b12a51112cb62614141f32d/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=fc06280eb11be2316b12a51112cb62614141f32d", "patch": "@@ -1081,13 +1081,40 @@ determine_biv_step (gphi *phi)\n   return integer_zerop (iv.step) ? NULL_TREE : iv.step;\n }\n \n+/* Return the first non-invariant ssa var found in EXPR.  */\n+\n+static tree\n+extract_single_var_from_expr (tree expr)\n+{\n+  int i, n;\n+  tree tmp;\n+  enum tree_code code;\n+\n+  if (!expr || is_gimple_min_invariant (expr))\n+    return NULL;\n+\n+  code = TREE_CODE (expr);\n+  if (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (code)))\n+    {\n+      n = TREE_OPERAND_LENGTH (expr);\n+      for (i = 0; i < n; i++)\n+\t{\n+\t  tmp = extract_single_var_from_expr (TREE_OPERAND (expr, i));\n+\n+\t  if (tmp)\n+\t    return tmp;\n+\t}\n+    }\n+  return (TREE_CODE (expr) == SSA_NAME) ? expr : NULL;\n+}\n+\n /* Finds basic ivs.  */\n \n static bool\n find_bivs (struct ivopts_data *data)\n {\n   gphi *phi;\n-  tree step, type, base;\n+  tree step, type, base, stop;\n   bool found = false;\n   struct loop *loop = data->current_loop;\n   gphi_iterator psi;\n@@ -1104,7 +1131,13 @@ find_bivs (struct ivopts_data *data)\n \tcontinue;\n \n       base = PHI_ARG_DEF_FROM_EDGE (phi, loop_preheader_edge (loop));\n-      base = expand_simple_operations (base);\n+      /* Stop expanding iv base at the first ssa var referred by iv step.\n+\t Ideally we should stop at any ssa var, because that's expensive\n+\t and unusual to happen, we just do it on the first one.\n+\n+\t See PR64705 for the rationale.  */\n+      stop = extract_single_var_from_expr (step);\n+      base = expand_simple_operations (base, stop);\n       if (contains_abnormal_ssa_name_p (base)\n \t  || contains_abnormal_ssa_name_p (step))\n \tcontinue;\n@@ -1176,7 +1209,7 @@ mark_bivs (struct ivopts_data *data)\n static bool\n find_givs_in_stmt_scev (struct ivopts_data *data, gimple stmt, affine_iv *iv)\n {\n-  tree lhs;\n+  tree lhs, stop;\n   struct loop *loop = data->current_loop;\n \n   iv->base = NULL_TREE;\n@@ -1191,13 +1224,19 @@ find_givs_in_stmt_scev (struct ivopts_data *data, gimple stmt, affine_iv *iv)\n \n   if (!simple_iv (loop, loop_containing_stmt (stmt), lhs, iv, true))\n     return false;\n-  iv->base = expand_simple_operations (iv->base);\n \n+  /* Stop expanding iv base at the first ssa var referred by iv step.\n+     Ideally we should stop at any ssa var, because that's expensive\n+     and unusual to happen, we just do it on the first one.\n+\n+     See PR64705 for the rationale.  */\n+  stop = extract_single_var_from_expr (iv->step);\n+  iv->base = expand_simple_operations (iv->base, stop);\n   if (contains_abnormal_ssa_name_p (iv->base)\n       || contains_abnormal_ssa_name_p (iv->step))\n     return false;\n \n-  /* If STMT could throw, then do not consider STMT as defining a GIV.  \n+  /* If STMT could throw, then do not consider STMT as defining a GIV.\n      While this will suppress optimizations, we can not safely delete this\n      GIV and associated statements, even if it appears it is not used.  */\n   if (stmt_could_throw_p (stmt))"}, {"sha": "7f6c451c0c29854e1ccb3b559f60eca2ea53e17e", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc06280eb11be2316b12a51112cb62614141f32d/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc06280eb11be2316b12a51112cb62614141f32d/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=fc06280eb11be2316b12a51112cb62614141f32d", "patch": "@@ -1563,10 +1563,11 @@ simplify_replace_tree (tree expr, tree old, tree new_tree)\n }\n \n /* Expand definitions of ssa names in EXPR as long as they are simple\n-   enough, and return the new expression.  */\n+   enough, and return the new expression.  If STOP is specified, stop\n+   expanding if EXPR equals to it.  */\n \n tree\n-expand_simple_operations (tree expr)\n+expand_simple_operations (tree expr, tree stop)\n {\n   unsigned i, n;\n   tree ret = NULL_TREE, e, ee, e1;\n@@ -1586,7 +1587,7 @@ expand_simple_operations (tree expr)\n       for (i = 0; i < n; i++)\n \t{\n \t  e = TREE_OPERAND (expr, i);\n-\t  ee = expand_simple_operations (e);\n+\t  ee = expand_simple_operations (e, stop);\n \t  if (e == ee)\n \t    continue;\n \n@@ -1605,7 +1606,8 @@ expand_simple_operations (tree expr)\n       return ret;\n     }\n \n-  if (TREE_CODE (expr) != SSA_NAME)\n+  /* Stop if it's not ssa name or the one we don't want to expand.  */\n+  if (TREE_CODE (expr) != SSA_NAME || expr == stop)\n     return expr;\n \n   stmt = SSA_NAME_DEF_STMT (expr);\n@@ -1625,7 +1627,7 @@ expand_simple_operations (tree expr)\n \t  && src->loop_father != dest->loop_father)\n \treturn expr;\n \n-      return expand_simple_operations (e);\n+      return expand_simple_operations (e, stop);\n     }\n   if (gimple_code (stmt) != GIMPLE_ASSIGN)\n     return expr;\n@@ -1645,7 +1647,7 @@ expand_simple_operations (tree expr)\n \treturn e;\n \n       if (code == SSA_NAME)\n-\treturn expand_simple_operations (e);\n+\treturn expand_simple_operations (e, stop);\n \n       return expr;\n     }\n@@ -1654,7 +1656,7 @@ expand_simple_operations (tree expr)\n     {\n     CASE_CONVERT:\n       /* Casts are simple.  */\n-      ee = expand_simple_operations (e);\n+      ee = expand_simple_operations (e, stop);\n       return fold_build1 (code, TREE_TYPE (expr), ee);\n \n     case PLUS_EXPR:\n@@ -1669,7 +1671,7 @@ expand_simple_operations (tree expr)\n       if (!is_gimple_min_invariant (e1))\n \treturn expr;\n \n-      ee = expand_simple_operations (e);\n+      ee = expand_simple_operations (e, stop);\n       return fold_build2 (code, TREE_TYPE (expr), ee, e1);\n \n     default:"}, {"sha": "7134906dd8033aace53259ea63746654788ffe36", "filename": "gcc/tree-ssa-loop-niter.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc06280eb11be2316b12a51112cb62614141f32d/gcc%2Ftree-ssa-loop-niter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc06280eb11be2316b12a51112cb62614141f32d/gcc%2Ftree-ssa-loop-niter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.h?ref=fc06280eb11be2316b12a51112cb62614141f32d", "patch": "@@ -20,7 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_TREE_SSA_LOOP_NITER_H\n #define GCC_TREE_SSA_LOOP_NITER_H\n \n-extern tree expand_simple_operations (tree);\n+extern tree expand_simple_operations (tree, tree = NULL);\n extern bool loop_only_exit_p (const struct loop *, const_edge);\n extern bool number_of_iterations_exit (struct loop *, edge,\n \t\t\t\t       struct tree_niter_desc *niter, bool,"}]}