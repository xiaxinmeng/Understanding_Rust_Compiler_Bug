{"sha": "f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2ZGRiNDJmODJjMDRiYWY2YjE0YWVmMWI1MzJjY2I1YTA0MjViYg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-27T13:36:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-27T13:36:51Z"}, "message": "Merge #598\n\n598: Hello world r=philberty a=philberty\n\n```rust\r\nextern \"C\" {\r\n    fn puts(s: *const i8);\r\n}\r\n\r\nfn main() {\r\n    unsafe {\r\n        let a = \"Hello World\\0\";\r\n        let b = a as *const str;\r\n        let c = b as *const i8;\r\n        puts(c);\r\n    }\r\n}\r\n```\r\n\r\nFixes #421\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "5b2ddeb0e2c1839ff97d7aa78886345295ef607a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b2ddeb0e2c1839ff97d7aa78886345295ef607a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhAAvzCRBK7hj4Ov3rIwAA410IAKlFjM49+3gkh0tSr7Ko8e3x\n5DltTdNdPiUTf6S6ec+osrP+MmwvvQArQLTqhUXN/etMFhXhDsyuNg5GE3Hb1h0I\nLQv7oq9Pasfd8qqVCVQZayBaLyQ3kJNzKyS3h2lSmNCJ4KYLXgtGW2iXnp/iSUQe\nuAf57QyD3TpSrDXPaqCJlS2U++t4CvldZTiqjV6IiJFXZFvZdtd/AU/FqImKyNr3\nULIgq9lXow0H+1aCm1/metP/2nh/xzpDgoSjcPezyfEWgg0YWdohKusapG+w3BUs\nSKFcSLWgrrpoK6tdqZoYf7sy/Q1D15YjOGr5O4WZjAPM0CnNEGiX4+kr1kTGIFI=\n=nTXs\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b2ddeb0e2c1839ff97d7aa78886345295ef607a\nparent 9526e6d62167ff824814c7ac8c09b36316029262\nparent 7f8adccb5056152edc4aacf08ce2ed040f076171\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1627393011 +0000\ncommitter GitHub <noreply@github.com> 1627393011 +0000\n\nMerge #598\n\n598: Hello world r=philberty a=philberty\n\n```rust\r\nextern \"C\" {\r\n    fn puts(s: *const i8);\r\n}\r\n\r\nfn main() {\r\n    unsafe {\r\n        let a = \"Hello World\\0\";\r\n        let b = a as *const str;\r\n        let c = b as *const i8;\r\n        puts(c);\r\n    }\r\n}\r\n```\r\n\r\nFixes #421\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9526e6d62167ff824814c7ac8c09b36316029262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9526e6d62167ff824814c7ac8c09b36316029262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9526e6d62167ff824814c7ac8c09b36316029262"}, {"sha": "7f8adccb5056152edc4aacf08ce2ed040f076171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8adccb5056152edc4aacf08ce2ed040f076171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8adccb5056152edc4aacf08ce2ed040f076171"}], "stats": {"total": 559, "additions": 513, "deletions": 46}, "files": [{"sha": "0aaf084f04f02f9dacf28e7ab53b2f5982755f1a", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -371,9 +371,14 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n \tparameters.push_back (compiled_param);\n       }\n \n-    translated = ctx->get_backend ()->function_type (\n-      receiver, parameters, results, NULL,\n-      ctx->get_mappings ()->lookup_location (type.get_ref ()));\n+    if (!type.is_varadic ())\n+      translated = ctx->get_backend ()->function_type (\n+\treceiver, parameters, results, NULL,\n+\tctx->get_mappings ()->lookup_location (type.get_ref ()));\n+    else\n+      translated = ctx->get_backend ()->function_type_varadic (\n+\treceiver, parameters, results, NULL,\n+\tctx->get_mappings ()->lookup_location (type.get_ref ()));\n   }\n \n   void visit (TyTy::FnPtr &type) override"}, {"sha": "a0ad2002bef7af9ddc04d087385da863fdb8ec7f", "filename": "gcc/rust/backend/rust-compile-extern.h", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-extern.h?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -0,0 +1,148 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_COMPILE_EXTERN_ITEM\n+#define RUST_COMPILE_EXTERN_ITEM\n+\n+#include \"rust-compile-base.h\"\n+#include \"rust-compile-tyty.h\"\n+#include \"rust-compile-implitem.h\"\n+#include \"rust-compile-var-decl.h\"\n+#include \"rust-compile-stmt.h\"\n+#include \"rust-compile-expr.h\"\n+#include \"rust-compile-fnparam.h\"\n+\n+namespace Rust {\n+namespace Compile {\n+\n+class CompileExternItem : public HIRCompileBase\n+{\n+  using Rust::Compile::HIRCompileBase::visit;\n+\n+public:\n+  static void compile (HIR::ExternalItem *item, Context *ctx,\n+\t\t       bool compile_fns = true,\n+\t\t       TyTy::BaseType *concrete = nullptr)\n+  {\n+    CompileExternItem compiler (ctx, compile_fns, concrete);\n+    item->accept_vis (compiler);\n+  }\n+\n+  void visit (HIR::ExternalStaticItem &item) override\n+  {\n+    TyTy::BaseType *resolved_type = nullptr;\n+    bool ok = ctx->get_tyctx ()->lookup_type (item.get_mappings ().get_hirid (),\n+\t\t\t\t\t      &resolved_type);\n+    rust_assert (ok);\n+\n+    std::string name = item.get_item_name ();\n+    // FIXME this is assuming C ABI\n+    std::string asm_name = name;\n+\n+    Btype *type = TyTyResolveCompile::compile (ctx, resolved_type);\n+    bool is_external = true;\n+    bool is_hidden = false;\n+    bool in_unique_section = false;\n+\n+    Bvariable *static_global\n+      = ctx->get_backend ()->global_variable (name, asm_name, type, is_external,\n+\t\t\t\t\t      is_hidden, in_unique_section,\n+\t\t\t\t\t      item.get_locus ());\n+    ctx->insert_var_decl (item.get_mappings ().get_hirid (), static_global);\n+    ctx->push_var (static_global);\n+  }\n+\n+  void visit (HIR::ExternalFunctionItem &function) override\n+  {\n+    if (!compile_fns)\n+      return;\n+\n+    TyTy::BaseType *fntype_tyty;\n+    if (!ctx->get_tyctx ()->lookup_type (function.get_mappings ().get_hirid (),\n+\t\t\t\t\t &fntype_tyty))\n+      {\n+\trust_fatal_error (function.get_locus (),\n+\t\t\t  \"failed to lookup function type\");\n+\treturn;\n+      }\n+\n+    rust_assert (fntype_tyty->get_kind () == TyTy::TypeKind::FNDEF);\n+    TyTy::FnType *fntype = static_cast<TyTy::FnType *> (fntype_tyty);\n+    if (fntype->has_subsititions_defined ())\n+      {\n+\t// we cant do anything for this only when it is used and a concrete type\n+\t// is given\n+\tif (concrete == nullptr)\n+\t  return;\n+\telse\n+\t  {\n+\t    rust_assert (concrete->get_kind () == TyTy::TypeKind::FNDEF);\n+\t    fntype = static_cast<TyTy::FnType *> (concrete);\n+\t  }\n+      }\n+\n+    // items can be forward compiled which means we may not need to invoke this\n+    // code. We might also have already compiled this generic function as well.\n+    Bfunction *lookup = nullptr;\n+    if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup, fntype))\n+      {\n+\t// has this been added to the list then it must be finished\n+\tif (ctx->function_completed (lookup))\n+\t  {\n+\t    Bfunction *dummy = nullptr;\n+\t    if (!ctx->lookup_function_decl (fntype->get_ty_ref (), &dummy))\n+\t      ctx->insert_function_decl (fntype->get_ty_ref (), lookup, fntype);\n+\n+\t    return;\n+\t  }\n+      }\n+\n+    if (fntype->has_subsititions_defined ())\n+      {\n+\t// override the Hir Lookups for the substituions in this context\n+\tfntype->override_context ();\n+      }\n+\n+    ::Btype *compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n+\n+    const unsigned int flags\n+      = Backend::function_is_declaration | Backend::function_is_visible;\n+\n+    std::string ir_symbol_name = function.get_item_name ();\n+    // FIXME this assumes C ABI\n+    std::string asm_name = function.get_item_name ();\n+\n+    Bfunction *fndecl\n+      = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,\n+\t\t\t\t       asm_name, flags, function.get_locus ());\n+    ctx->insert_function_decl (fntype->get_ty_ref (), fndecl, fntype);\n+  }\n+\n+private:\n+  CompileExternItem (Context *ctx, bool compile_fns, TyTy::BaseType *concrete)\n+    : HIRCompileBase (ctx), compile_fns (compile_fns), concrete (concrete)\n+  {}\n+\n+  bool compile_fns;\n+  TyTy::BaseType *concrete;\n+};\n+\n+} // namespace Compile\n+} // namespace Rust\n+\n+#endif // RUST_COMPILE_EXTERN_ITEM"}, {"sha": "a6bc7f3f73bf077da5ea917d69b07c1f29d89128", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -26,6 +26,7 @@\n #include \"rust-compile-stmt.h\"\n #include \"rust-compile-expr.h\"\n #include \"rust-compile-fnparam.h\"\n+#include \"rust-compile-extern.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -274,6 +275,14 @@ class CompileItem : public HIRCompileBase\n \t\t\t\t\tcompile_fns);\n   }\n \n+  void visit (HIR::ExternBlock &extern_block) override\n+  {\n+    for (auto &item : extern_block.get_extern_items ())\n+      {\n+\tCompileExternItem::compile (item.get (), ctx, compile_fns, concrete);\n+      }\n+  }\n+\n private:\n   CompileItem (Context *ctx, bool compile_fns, TyTy::BaseType *concrete)\n     : HIRCompileBase (ctx), compile_fns (compile_fns), concrete (concrete)"}, {"sha": "3ddc29ac1ab7300ce2938c6bdca0f4c44efae9a0", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -95,9 +95,15 @@ class TyTyCompile : public TyTy::TyVisitor\n \tparameters.push_back (compiled_param);\n       }\n \n-    translated\n-      = backend->function_type (receiver, parameters, results, NULL,\n-\t\t\t\tmappings->lookup_location (type.get_ref ()));\n+    if (!type.is_varadic ())\n+      translated\n+\t= backend->function_type (receiver, parameters, results, NULL,\n+\t\t\t\t  mappings->lookup_location (type.get_ref ()));\n+    else\n+      translated\n+\t= backend->function_type_varadic (receiver, parameters, results, NULL,\n+\t\t\t\t\t  mappings->lookup_location (\n+\t\t\t\t\t    type.get_ref ()));\n   }\n \n   void visit (TyTy::BoolType &) override"}, {"sha": "4ea0019d71952105d10aad4a1e34acea84578bc9", "filename": "gcc/rust/hir/rust-ast-lower-extern.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -47,8 +47,6 @@ class ASTLoweringExternItem : public ASTLoweringBase\n     Analysis::NodeMapping mapping (crate_num, item.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       item.get_locus ());\n \n     HIR::ExternalStaticItem *static_item\n       = new HIR::ExternalStaticItem (mapping, item.get_identifier (),\n@@ -58,6 +56,11 @@ class ASTLoweringExternItem : public ASTLoweringBase\n \t\t\t\t     item.get_locus ());\n \n     translated = static_item;\n+\n+    mappings->insert_hir_extern_item (crate_num, mapping.get_hirid (),\n+\t\t\t\t      translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       item.get_locus ());\n   }\n \n   void visit (AST::ExternalFunctionItem &function) override\n@@ -97,8 +100,6 @@ class ASTLoweringExternItem : public ASTLoweringBase\n     Analysis::NodeMapping mapping (crate_num, function.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       function.get_locus ());\n \n     HIR::ExternalFunctionItem *function_item = new HIR::ExternalFunctionItem (\n       mapping, function.get_identifier (), std::move (generic_params),\n@@ -107,6 +108,11 @@ class ASTLoweringExternItem : public ASTLoweringBase\n       function.get_outer_attrs (), function.get_locus ());\n \n     translated = function_item;\n+\n+    mappings->insert_hir_extern_item (crate_num, mapping.get_hirid (),\n+\t\t\t\t      translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       function.get_locus ());\n   }\n \n private:"}, {"sha": "80ca29859fba2cf5aeded2a27da643be7d7ccfa8", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -571,10 +571,6 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n-    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n-    mappings->insert_location (crate_num, mapping.get_hirid (),\n-\t\t\t       extern_block.get_locus ());\n-\n     HIR::ExternBlock *hir_extern_block\n       = new HIR::ExternBlock (mapping, extern_block.get_abi (),\n \t\t\t      std::move (extern_items), std::move (vis),\n@@ -583,6 +579,12 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t      extern_block.get_locus ());\n \n     translated = hir_extern_block;\n+\n+    mappings->insert_defid_mapping (mapping.get_defid (), translated);\n+    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       extern_block.get_locus ());\n   }\n \n private:"}, {"sha": "7d976c5c991c69e0de6043d54d4c69435979e42a", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -2713,6 +2713,8 @@ class ExternalItem\n \n   Analysis::NodeMapping get_mappings () const { return mappings; }\n \n+  Identifier get_item_name () const { return item_name; }\n+\n protected:\n   ExternalItem (Analysis::NodeMapping mappings, Identifier item_name,\n \t\tVisibility vis, AST::AttrVec outer_attrs, Location locus)\n@@ -2746,9 +2748,6 @@ class ExternalItem\n \n   // Clone function implementation as pure virtual method\n   virtual ExternalItem *clone_external_item_impl () const = 0;\n-\n-  // possibly make this public if required\n-  std::string get_item_name () const { return item_name; }\n };\n \n // A static item used in an extern block\n@@ -2790,6 +2789,8 @@ class ExternalStaticItem : public ExternalItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::unique_ptr<Type> &get_item_type () { return item_type; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2840,6 +2841,12 @@ struct NamedFunctionParam\n   NamedFunctionParam &operator= (NamedFunctionParam &&other) = default;\n \n   std::string as_string () const;\n+\n+  Identifier get_param_name () const { return name; }\n+\n+  std::unique_ptr<Type> &get_type () { return param_type; }\n+\n+  Analysis::NodeMapping get_mappings () const { return mappings; }\n };\n \n // A function item used in an extern block\n@@ -2920,6 +2927,20 @@ class ExternalFunctionItem : public ExternalItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::vector<std::unique_ptr<GenericParam> > &get_generic_params ()\n+  {\n+    return generic_params;\n+  }\n+\n+  std::unique_ptr<Type> &get_return_type () { return return_type; }\n+\n+  std::vector<NamedFunctionParam> &get_function_params ()\n+  {\n+    return function_params;\n+  }\n+\n+  bool is_variadic () const { return has_variadics; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */\n@@ -2999,6 +3020,11 @@ class ExternBlock : public VisItem\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::vector<std::unique_ptr<ExternalItem> > &get_extern_items ()\n+  {\n+    return extern_items;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "539229d60fa2ba52ed6806cab2afcd51f7be424c", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -619,7 +619,7 @@ class ResolveExternItem : public ResolverBase\n \n private:\n   ResolveExternItem () : ResolverBase (UNKNOWN_NODEID) {}\n-}; // namespace Resolver\n+};\n \n } // namespace Resolver\n } // namespace Rust"}, {"sha": "06a341a0586ab5fa4f019e6b733c5e88093e04f2", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -637,7 +637,9 @@ ResolveItem::resolve_impl_item (AST::InherentImplItem *item,\n \n void\n ResolveItem::resolve_extern_item (AST::ExternalItem *item)\n-{}\n+{\n+  ResolveExternItem::go (item);\n+}\n \n } // namespace Resolver\n } // namespace Rust"}, {"sha": "be23fd3d852ca62cf056e711a8ef62f264565892", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -163,6 +163,13 @@ class Backend\n \t\t Btype *result_struct, Location location)\n     = 0;\n \n+  virtual Btype *\n+  function_type_varadic (const Btyped_identifier &receiver,\n+\t\t\t const std::vector<Btyped_identifier> &parameters,\n+\t\t\t const std::vector<Btyped_identifier> &results,\n+\t\t\t Btype *result_struct, Location location)\n+    = 0;\n+\n   virtual Btype *function_ptr_type (Btype *result,\n \t\t\t\t    const std::vector<Btype *> &praameters,\n \t\t\t\t    Location location)"}, {"sha": "44617a68d2a4afbbfc76a858f223ca64bad7f5c7", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -256,6 +256,11 @@ class Gcc_backend : public Backend\n \t\t\tconst std::vector<Btyped_identifier> &, Btype *,\n \t\t\tconst Location);\n \n+  Btype *function_type_varadic (const Btyped_identifier &,\n+\t\t\t\tconst std::vector<Btyped_identifier> &,\n+\t\t\t\tconst std::vector<Btyped_identifier> &, Btype *,\n+\t\t\t\tconst Location);\n+\n   Btype *function_ptr_type (Btype *, const std::vector<Btype *> &, Location);\n \n   Btype *struct_type (const std::vector<Btyped_identifier> &);\n@@ -1048,6 +1053,62 @@ Gcc_backend::function_type (const Btyped_identifier &receiver,\n   return this->make_type (build_pointer_type (fntype));\n }\n \n+Btype *\n+Gcc_backend::function_type_varadic (\n+  const Btyped_identifier &receiver,\n+  const std::vector<Btyped_identifier> &parameters,\n+  const std::vector<Btyped_identifier> &results, Btype *result_struct, Location)\n+{\n+  size_t n = parameters.size () + (receiver.btype != NULL ? 1 : 0);\n+  tree *args = XALLOCAVEC (tree, n);\n+  size_t offs = 0;\n+\n+  if (receiver.btype != NULL)\n+    {\n+      tree t = receiver.btype->get_tree ();\n+      if (t == error_mark_node)\n+\treturn this->error_type ();\n+\n+      args[offs++] = t;\n+    }\n+\n+  for (std::vector<Btyped_identifier>::const_iterator p = parameters.begin ();\n+       p != parameters.end (); ++p)\n+    {\n+      tree t = p->btype->get_tree ();\n+      if (t == error_mark_node)\n+\treturn this->error_type ();\n+      args[offs++] = t;\n+    }\n+\n+  tree result;\n+  if (results.empty ())\n+    result = void_type_node;\n+  else if (results.size () == 1)\n+    result = results.front ().btype->get_tree ();\n+  else\n+    {\n+      gcc_assert (result_struct != NULL);\n+      result = result_struct->get_tree ();\n+    }\n+  if (result == error_mark_node)\n+    return this->error_type ();\n+\n+  // The libffi library cannot represent a zero-sized object.  To\n+  // avoid causing confusion on 32-bit SPARC, we treat a function that\n+  // returns a zero-sized value as returning void.  That should do no\n+  // harm since there is no actual value to be returned.  See\n+  // https://gcc.gnu.org/PR72814 for details.\n+  if (result != void_type_node && int_size_in_bytes (result) == 0)\n+    result = void_type_node;\n+\n+  tree fntype = build_varargs_function_type_array (result, n, args);\n+  if (fntype == error_mark_node)\n+    return this->error_type ();\n+\n+  return this->make_type (build_pointer_type (fntype));\n+}\n+\n Btype *\n Gcc_backend::function_ptr_type (Btype *result_type,\n \t\t\t\tconst std::vector<Btype *> &parameters,"}, {"sha": "65088be4d9cd7207a5ac9e61357188471f5bc770", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 104, "deletions": 5, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -28,6 +28,105 @@\n namespace Rust {\n namespace Resolver {\n \n+class TypeCheckTopLevelExternItem : public TypeCheckBase\n+{\n+  using Rust::Resolver::TypeCheckBase::visit;\n+\n+public:\n+  static void Resolve (HIR::ExternalItem *item)\n+  {\n+    TypeCheckTopLevelExternItem resolver;\n+    item->accept_vis (resolver);\n+  }\n+\n+  void visit (HIR::ExternalStaticItem &item) override\n+  {\n+    TyTy::BaseType *actual_type\n+      = TypeCheckType::Resolve (item.get_item_type ().get ());\n+\n+    context->insert_type (item.get_mappings (), actual_type);\n+  }\n+\n+  void visit (HIR::ExternalFunctionItem &function) override\n+  {\n+    std::vector<TyTy::SubstitutionParamMapping> substitutions;\n+    if (function.has_generics ())\n+      {\n+\tfor (auto &generic_param : function.get_generic_params ())\n+\t  {\n+\t    switch (generic_param.get ()->get_kind ())\n+\t      {\n+\t      case HIR::GenericParam::GenericKind::LIFETIME:\n+\t\t// Skipping Lifetime completely until better handling.\n+\t\tbreak;\n+\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  auto param_type\n+\t\t    = TypeResolveGenericParam::Resolve (generic_param.get ());\n+\t\t  context->insert_type (generic_param->get_mappings (),\n+\t\t\t\t\tparam_type);\n+\n+\t\t  substitutions.push_back (TyTy::SubstitutionParamMapping (\n+\t\t    static_cast<HIR::TypeParam &> (*generic_param),\n+\t\t    param_type));\n+\t\t}\n+\t\tbreak;\n+\t      }\n+\t  }\n+      }\n+\n+    TyTy::BaseType *ret_type = nullptr;\n+    if (!function.has_return_type ())\n+      ret_type = new TyTy::TupleType (function.get_mappings ().get_hirid ());\n+    else\n+      {\n+\tauto resolved\n+\t  = TypeCheckType::Resolve (function.get_return_type ().get ());\n+\tif (resolved == nullptr)\n+\t  {\n+\t    rust_error_at (function.get_locus (),\n+\t\t\t   \"failed to resolve return type\");\n+\t    return;\n+\t  }\n+\n+\tret_type = resolved->clone ();\n+\tret_type->set_ref (\n+\t  function.get_return_type ()->get_mappings ().get_hirid ());\n+      }\n+\n+    std::vector<std::pair<HIR::Pattern *, TyTy::BaseType *> > params;\n+    for (auto &param : function.get_function_params ())\n+      {\n+\t// get the name as well required for later on\n+\tauto param_tyty = TypeCheckType::Resolve (param.get_type ().get ());\n+\n+\tHIR::IdentifierPattern *param_pattern = new HIR::IdentifierPattern (\n+\t  param.get_param_name (), Location (), false, false,\n+\t  std::unique_ptr<HIR::Pattern> (nullptr));\n+\n+\tparams.push_back (\n+\t  std::pair<HIR::Pattern *, TyTy::BaseType *> (param_pattern,\n+\t\t\t\t\t\t       param_tyty));\n+\n+\tcontext->insert_type (param.get_mappings (), param_tyty);\n+      }\n+\n+    uint8_t flags = FNTYPE_IS_EXTERN_FLAG;\n+    if (function.is_variadic ())\n+      flags |= FNTYPE_IS_VARADIC_FLAG;\n+\n+    auto fnType\n+      = new TyTy::FnType (function.get_mappings ().get_hirid (),\n+\t\t\t  function.get_mappings ().get_defid (),\n+\t\t\t  function.get_item_name (), flags, std::move (params),\n+\t\t\t  ret_type, std::move (substitutions));\n+    context->insert_type (function.get_mappings (), fnType);\n+  }\n+\n+private:\n+  TypeCheckTopLevelExternItem () : TypeCheckBase () {}\n+};\n+\n class TypeCheckTopLevelImplItem : public TypeCheckBase\n {\n   using Rust::Resolver::TypeCheckBase::visit;\n@@ -134,11 +233,11 @@ class TypeCheckTopLevelImplItem : public TypeCheckBase\n \tcontext->insert_type (param.get_mappings (), param_tyty);\n       }\n \n-    auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n-\t\t\t\t    function.get_mappings ().get_defid (),\n-\t\t\t\t    function.get_function_name (),\n-\t\t\t\t    function.is_method (), std::move (params),\n-\t\t\t\t    ret_type, std::move (substitutions));\n+    auto fnType = new TyTy::FnType (\n+      function.get_mappings ().get_hirid (),\n+      function.get_mappings ().get_defid (), function.get_function_name (),\n+      function.is_method () ? FNTYPE_IS_METHOD_FLAG : FNTYPE_DEFAULT_FLAGS,\n+      std::move (params), ret_type, std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }\n "}, {"sha": "18f3e7254164c3cdcfefea3a15e6e900e9db5103", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -230,9 +230,9 @@ class TypeCheckTopLevel : public TypeCheckBase\n \n     auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n \t\t\t\t    function.get_mappings ().get_defid (),\n-\t\t\t\t    function.get_function_name (), false,\n-\t\t\t\t    std::move (params), ret_type,\n-\t\t\t\t    std::move (substitutions));\n+\t\t\t\t    function.get_function_name (),\n+\t\t\t\t    FNTYPE_DEFAULT_FLAGS, std::move (params),\n+\t\t\t\t    ret_type, std::move (substitutions));\n     context->insert_type (function.get_mappings (), fnType);\n   }\n \n@@ -274,6 +274,14 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t\t\t\t\t  substitutions);\n   }\n \n+  void visit (HIR::ExternBlock &extern_block) override\n+  {\n+    for (auto &item : extern_block.get_extern_items ())\n+      {\n+\tTypeCheckTopLevelExternItem::Resolve (item.get ());\n+      }\n+  }\n+\n private:\n   TypeCheckTopLevel () : TypeCheckBase () {}\n };"}, {"sha": "1ca28fae061fa0aa1e99dbace9c236404f416ec9", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -816,7 +816,7 @@ FnType::clone ()\n       std::pair<HIR::Pattern *, BaseType *> (p.first, p.second->clone ()));\n \n   return new FnType (get_ref (), get_ty_ref (), get_id (), get_identifier (),\n-\t\t     is_method_flag, std::move (cloned_params),\n+\t\t     flags, std::move (cloned_params),\n \t\t     get_return_type ()->clone (), clone_substs (),\n \t\t     get_combined_refs ());\n }\n@@ -2055,15 +2055,27 @@ TypeCheckCallExpr::visit (FnType &type)\n {\n   if (call.num_params () != type.num_params ())\n     {\n-      rust_error_at (call.get_locus (),\n-\t\t     \"unexpected number of arguments %lu expected %lu\",\n-\t\t     call.num_params (), type.num_params ());\n-      return;\n+      if (type.is_varadic ())\n+\t{\n+\t  if (call.num_params () < type.num_params ())\n+\t    {\n+\t      rust_error_at (call.get_locus (),\n+\t\t\t     \"unexpected number of arguments %lu expected %lu\",\n+\t\t\t     call.num_params (), type.num_params ());\n+\t      return;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  rust_error_at (call.get_locus (),\n+\t\t\t \"unexpected number of arguments %lu expected %lu\",\n+\t\t\t call.num_params (), type.num_params ());\n+\t  return;\n+\t}\n     }\n \n   size_t i = 0;\n   call.iterate_params ([&] (HIR::Expr *param) mutable -> bool {\n-    auto fnparam = type.param_at (i);\n     auto argument_expr_tyty = Resolver::TypeCheckExpr::Resolve (param, false);\n     if (argument_expr_tyty == nullptr)\n       {\n@@ -2072,12 +2084,19 @@ TypeCheckCallExpr::visit (FnType &type)\n \treturn false;\n       }\n \n-    auto resolved_argument_type = fnparam.second->unify (argument_expr_tyty);\n-    if (resolved_argument_type == nullptr)\n+    auto resolved_argument_type = argument_expr_tyty;\n+\n+    // it might be a varadic function\n+    if (i < type.num_params ())\n       {\n-\trust_error_at (param->get_locus_slow (),\n-\t\t       \"Type Resolution failure on parameter\");\n-\treturn false;\n+\tauto fnparam = type.param_at (i);\n+\tresolved_argument_type = fnparam.second->unify (argument_expr_tyty);\n+\tif (resolved_argument_type == nullptr)\n+\t  {\n+\t    rust_error_at (param->get_locus_slow (),\n+\t\t\t   \"Type Resolution failure on parameter\");\n+\t    return false;\n+\t  }\n       }\n \n     context->insert_type (param->get_mappings (), resolved_argument_type);\n@@ -2086,7 +2105,7 @@ TypeCheckCallExpr::visit (FnType &type)\n     return true;\n   });\n \n-  if (i != call.num_params ())\n+  if (i < call.num_params ())\n     {\n       rust_error_at (call.get_locus (),\n \t\t     \"unexpected number of arguments %lu expected %lu\", i,"}, {"sha": "336d42b15f9343f09317c99f09afe370c4e56193", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -970,30 +970,35 @@ class ADTType : public BaseType, public SubstitutionRef\n class FnType : public BaseType, public SubstitutionRef\n {\n public:\n-  FnType (HirId ref, DefId id, std::string identifier, bool is_method,\n+#define FNTYPE_DEFAULT_FLAGS 0x00\n+#define FNTYPE_IS_METHOD_FLAG 0x01\n+#define FNTYPE_IS_EXTERN_FLAG 0x02\n+#define FNTYPE_IS_VARADIC_FLAG 0X04\n+\n+  FnType (HirId ref, DefId id, std::string identifier, uint8_t flags,\n \t  std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n \t  BaseType *type, std::vector<SubstitutionParamMapping> subst_refs,\n \t  std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ref, TypeKind::FNDEF, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n-      params (std::move (params)), type (type), is_method_flag (is_method),\n+      params (std::move (params)), type (type), flags (flags),\n       identifier (identifier), id (id)\n   {\n     LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n     rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n   }\n \n   FnType (HirId ref, HirId ty_ref, DefId id, std::string identifier,\n-\t  bool is_method,\n+\t  uint8_t flags,\n \t  std::vector<std::pair<HIR::Pattern *, BaseType *> > params,\n \t  BaseType *type, std::vector<SubstitutionParamMapping> subst_refs,\n \t  std::set<HirId> refs = std::set<HirId> ())\n     : BaseType (ref, ty_ref, TypeKind::FNDEF, refs),\n       SubstitutionRef (std::move (subst_refs),\n \t\t       SubstitutionArgumentMappings::error ()),\n-      params (params), type (type), is_method_flag (is_method),\n-      identifier (identifier), id (id)\n+      params (params), type (type), flags (flags), identifier (identifier),\n+      id (id)\n   {\n     LocalDefId local_def_id = id & DEF_ID_LOCAL_DEF_MASK;\n     rust_assert (local_def_id != UNKNOWN_LOCAL_DEFID);\n@@ -1022,9 +1027,13 @@ class FnType : public BaseType, public SubstitutionRef\n     if (num_params () == 0)\n       return false;\n \n-    return is_method_flag;\n+    return (flags & FNTYPE_IS_METHOD_FLAG) != 0;\n   }\n \n+  bool is_extern () const { return (flags & FNTYPE_IS_EXTERN_FLAG) != 0; }\n+\n+  bool is_varadic () const { return (flags & FNTYPE_IS_VARADIC_FLAG) != 0; }\n+\n   DefId get_id () const { return id; }\n \n   // get the Self type for the method\n@@ -1077,7 +1086,7 @@ class FnType : public BaseType, public SubstitutionRef\n private:\n   std::vector<std::pair<HIR::Pattern *, BaseType *> > params;\n   BaseType *type;\n-  bool is_method_flag;\n+  uint8_t flags;\n   std::string identifier;\n   DefId id;\n };"}, {"sha": "69fbe250b7e2c4d2d14acf387ee6f6fde3d599b1", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -283,6 +283,30 @@ Mappings::lookup_hir_trait_item (CrateNum crateNum, HirId id)\n   return iy->second;\n }\n \n+void\n+Mappings::insert_hir_extern_item (CrateNum crateNum, HirId id,\n+\t\t\t\t  HIR::ExternalItem *item)\n+{\n+  rust_assert (lookup_hir_extern_item (crateNum, id) == nullptr);\n+\n+  hirExternItemMappings[crateNum][id] = item;\n+  nodeIdToHirMappings[crateNum][item->get_mappings ().get_nodeid ()] = id;\n+}\n+\n+HIR::ExternalItem *\n+Mappings::lookup_hir_extern_item (CrateNum crateNum, HirId id)\n+{\n+  auto it = hirExternItemMappings.find (crateNum);\n+  if (it == hirExternItemMappings.end ())\n+    return nullptr;\n+\n+  auto iy = it->second.find (id);\n+  if (iy == it->second.end ())\n+    return nullptr;\n+\n+  return iy->second;\n+}\n+\n void\n Mappings::insert_hir_impl_block (CrateNum crateNum, HirId id,\n \t\t\t\t HIR::ImplBlock *item)"}, {"sha": "7e5449c701400e4e1aa4cb20b84fa5c4bb8af690", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -132,6 +132,10 @@ class Mappings\n \t\t\t      HIR::TraitItem *item);\n   HIR::TraitItem *lookup_hir_trait_item (CrateNum crateNum, HirId id);\n \n+  void insert_hir_extern_item (CrateNum crateNum, HirId id,\n+\t\t\t       HIR::ExternalItem *item);\n+  HIR::ExternalItem *lookup_hir_extern_item (CrateNum crateNum, HirId id);\n+\n   void insert_hir_impl_block (CrateNum crateNum, HirId id,\n \t\t\t      HIR::ImplBlock *item);\n   HIR::ImplBlock *lookup_hir_impl_block (CrateNum crateNum, HirId id);\n@@ -239,6 +243,8 @@ class Mappings\n   std::map<HirId, HIR::ImplBlock *> hirImplItemsToImplMappings;\n   std::map<CrateNum, std::map<HirId, HIR::ImplBlock *> > hirImplBlockMappings;\n   std::map<CrateNum, std::map<HirId, HIR::TraitItem *> > hirTraitItemMappings;\n+  std::map<CrateNum, std::map<HirId, HIR::ExternalItem *> >\n+    hirExternItemMappings;\n \n   // location info\n   std::map<CrateNum, std::map<NodeId, Location> > locations;"}, {"sha": "d416efa33af66cf99be3f9d9a1b394d90d37274b", "filename": "gcc/testsuite/rust/execute/torture/helloworld1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld1.rs?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-output \"Hello World\" }*/\n+extern \"C\" {\n+    fn puts(s: *const i8);\n+}\n+\n+fn main() -> i32 {\n+    unsafe {\n+        let a = \"Hello World\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        puts(c);\n+    }\n+    0\n+}"}, {"sha": "cc05f3798fac51fadeaac4b0fa276024263c5370", "filename": "gcc/testsuite/rust/execute/torture/helloworld2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76ddb42f82c04baf6b14aef1b532ccb5a0425bb/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld2.rs?ref=f76ddb42f82c04baf6b14aef1b532ccb5a0425bb", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-output \"Hello World 123\\n\" }*/\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn main() -> i32 {\n+    unsafe {\n+        let a = \"Hello World %i\\n\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c, 123);\n+    }\n+    0\n+}"}]}