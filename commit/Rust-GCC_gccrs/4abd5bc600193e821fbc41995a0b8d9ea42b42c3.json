{"sha": "4abd5bc600193e821fbc41995a0b8d9ea42b42c3", "node_id": "C_kwDOANBUbNoAKDRhYmQ1YmM2MDAxOTNlODIxZmJjNDE5OTVhMGI4ZDllYTQyYjQyYzM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-28T21:07:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-01T21:26:08Z"}, "message": "libstdc++: Make std::chrono::current_zone() default to UTC\n\nThis is consistent with the behaviour of glibc, which assumes UTC when\n/etc/localtime and TZ do not identify a valid time zone. The fallback\ntzdb used when no valid tzdata exists always contains the UTC zone, so\nthis change means we have a valid tzdb and valid current zone even in\nthe degenerate case.\n\nWith this default we no longer need the AIX-specific kluge to try and\nidentify TZ values specifying a 0-offset zone. We can just use the UTC\ndefault for those, as it has the same effect.\n\nIt's still possible for chrono::current_zone() to fail, because the user\ncould have provided a custom tzdata.zi file which doesn't contain the\nUTC time zone, so the \"UTC\" default would fail to find a valid zone, and\nthrow an exception. That's just user error, they should not provide bad\ndata and expect reasonable behaviour.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++20/tzdb.cc (chrono::tzdb::current_zone()) Use \"UTC\" if\n\tcurrent time zone cannot be determined.\n\t* testsuite/std/time/tzdb/1.cc: Remove conditions based on\n\tHAVE_TZDB macro and test all members unconditionally.", "tree": {"sha": "63d094ee9628e23e341c9f7c07a748d52b136b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63d094ee9628e23e341c9f7c07a748d52b136b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4abd5bc600193e821fbc41995a0b8d9ea42b42c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4abd5bc600193e821fbc41995a0b8d9ea42b42c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4abd5bc600193e821fbc41995a0b8d9ea42b42c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4abd5bc600193e821fbc41995a0b8d9ea42b42c3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "096f034a8f5df41f610e62c1592fb90a3f551cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096f034a8f5df41f610e62c1592fb90a3f551cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096f034a8f5df41f610e62c1592fb90a3f551cd5"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "2b68888e3b9df1388e3e157495ff12cbdc379bee", "filename": "libstdc++-v3/src/c++20/tzdb.cc", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4abd5bc600193e821fbc41995a0b8d9ea42b42c3/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4abd5bc600193e821fbc41995a0b8d9ea42b42c3/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdb.cc?ref=4abd5bc600193e821fbc41995a0b8d9ea42b42c3", "patch": "@@ -1692,19 +1692,16 @@ namespace std::chrono\n     // https://www.ibm.com/support/pages/managing-time-zone-variable-posix\n     if (const char* env = std::getenv(\"TZ\"))\n       {\n-\tstring_view s(env);\n-\tif (s == \"GMT0\")\n-\t  s = \"Etc/GMT\";\n-\telse if (s.size() == 4 && s[3] == '0')\n-\t  s = \"Etc/UTC\";\n-\n-\t// This will fail unless TZ contains an IANA time zone name,\n-\t// or one of the special cases above.\n-\tif (auto tz = do_locate_zone(this->zones, this->links, s))\n+\t// This will fail unless TZ contains an IANA time zone name.\n+\tif (auto tz = do_locate_zone(this->zones, this->links, env))\n \t  return tz;\n       }\n #endif\n \n+    // Default to UTC.\n+    if (auto tz = do_locate_zone(this->zones, this->links, \"UTC\"))\n+      return tz;\n+\n     __throw_runtime_error(\"tzdb: cannot determine current zone\");\n   }\n "}, {"sha": "877a55b8d31f51bfec12f35d516fb497f7c99370", "filename": "libstdc++-v3/testsuite/std/time/tzdb/1.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4abd5bc600193e821fbc41995a0b8d9ea42b42c3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftzdb%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4abd5bc600193e821fbc41995a0b8d9ea42b42c3/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftzdb%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftzdb%2F1.cc?ref=4abd5bc600193e821fbc41995a0b8d9ea42b42c3", "patch": "@@ -1,7 +1,6 @@\n // { dg-options \"-std=gnu++20\" }\n // { dg-do run { target c++20 } }\n // { dg-require-effective-target cxx11_abi }\n-// { dg-additional-options \"-DHAVE_TZDB\" { target tzdb } }\n \n #include <chrono>\n #include <testsuite_hooks.h>\n@@ -14,22 +13,25 @@ test_version()\n   const tzdb& db = get_tzdb();\n   VERIFY( &db == &get_tzdb_list().front() );\n \n-#ifdef HAVE_TZDB\n-  VERIFY( db.version == remote_version() );\n-  const tzdb& reloaded = reload_tzdb();\n-  if (reloaded.version == db.version)\n-    VERIFY( &reloaded == &db );\n-#endif\n+  const char* func;\n+  try {\n+    func = \"remote_version\";\n+    VERIFY( db.version == remote_version() );\n+    func = \"reload_tzdb\";\n+    const tzdb& reloaded = reload_tzdb();\n+    if (reloaded.version == db.version)\n+      VERIFY( &reloaded == &db );\n+  } catch (const std::exception&) {\n+    std::printf(\"std::chrono::%s() failed\\n\", func);\n+  }\n }\n \n void\n test_current()\n {\n-#ifdef HAVE_TZDB\n   const tzdb& db = get_tzdb();\n   const time_zone* tz = db.current_zone();\n   VERIFY( tz == std::chrono::current_zone() );\n-#endif\n }\n \n void\n@@ -43,9 +45,7 @@ test_locate()\n   VERIFY( tz == db.locate_zone(\"Etc/GMT\") );\n   VERIFY( tz == db.locate_zone(\"Etc/GMT+0\") );\n \n-#ifdef HAVE_TZDB\n   VERIFY( db.locate_zone(db.current_zone()->name()) == db.current_zone() );\n-#endif\n }\n \n int main()"}]}