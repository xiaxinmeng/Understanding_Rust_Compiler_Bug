{"sha": "c1b9cb1a83b0d6485d9922ecef097d250a22d830", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFiOWNiMWE4M2IwZDY0ODVkOTkyMmVjZWYwOTdkMjUwYTIyZDgzMA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-07-24T18:38:38Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-07-24T19:13:39Z"}, "message": "[PR96230] some -dumpbase-ext fixes\n\nThe initial bug report was that compiling (-c) with -dumpbase \"\"\n-dumpbase-ext .<ext> crashes the driver.\n\nThe verification of -dumpbase-ext against -dumpbase doesn't cover the\ncase in which -dumpbase activates backward-compatibility mode.\n\nI added a test for that, and for -dumpbase-ext without -dumpbase,\ntrying to make it work in a sensible way, as if applied to the default\n-dumpbase for each file.  It turned out that this made for too much\ncomplexity in dealing with suffixes derived from input filenames, so I\ngave that up and returned to discarding -dumpbase-ext as documented,\nending up with a change identical to that in the original bug report.\n\nI also thought I caught an off-by-one error in the initial\nverification, that caused dumpbase_ext to be discarded if it was\nidentical to the specified dumpbase, but that turned out to be\nintentional as well, so I put in comments and a test to reflect it.\n\nFinally, an earlier version of the newly-added tests used \"$var.ext\"\nin an expected output list, which showed me the handling of string\nexpansion was incorrect.  Reworked the expr into an eval to make that\nwork, and, absent any reliance on post-eval adjustments to so-expanded\noutput names, I arranged for the adjustments to be skipped after eval.\n\n\nCo-Authored-By: \"Zhanghaijian (A)\" <z.zhanghaijian@huawei.com>\nfor  gcc/ChangeLog\n\n\tPR driver/96230\n\t* gcc.c (process_command): Adjust and document conditions to\n\treset dumpbase_ext.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR driver/96230\n\t* gcc.misc-tests/outputs.exp: Add tests with -dumpbase-ext,\n\twith identical -dumpbase, with -dumpbase \"\", and without any\n\t-dumpbase.\n\t(outest): Fix \"\" expansion in expected outputs, skip\n\tadjustments.", "tree": {"sha": "b71070491f66be51eaaa51f81480f5cd61dc1114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b71070491f66be51eaaa51f81480f5cd61dc1114"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1b9cb1a83b0d6485d9922ecef097d250a22d830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b9cb1a83b0d6485d9922ecef097d250a22d830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b9cb1a83b0d6485d9922ecef097d250a22d830", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b9cb1a83b0d6485d9922ecef097d250a22d830/comments", "author": null, "committer": null, "parents": [{"sha": "5fa1767aa45e1a927e832ccc09e959d4c8a9548c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa1767aa45e1a927e832ccc09e959d4c8a9548c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fa1767aa45e1a927e832ccc09e959d4c8a9548c"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "10bc9881aed3ce3c5cfc2e22ae2c4dfd62728ca3", "filename": "gcc/gcc.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b9cb1a83b0d6485d9922ecef097d250a22d830/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b9cb1a83b0d6485d9922ecef097d250a22d830/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=c1b9cb1a83b0d6485d9922ecef097d250a22d830", "patch": "@@ -4907,6 +4907,9 @@ process_command (unsigned int decoded_options_count,\n       int lendb = strlen (dumpbase);\n       int lendbx = strlen (dumpbase_ext);\n \n+      /* -dumpbase-ext must be a suffix proper; discard it if it\n+\t  matches all of -dumpbase, as that would make for an empty\n+\t  basename.  */\n       if (lendbx >= lendb\n \t  || strcmp (dumpbase + lendb - lendbx, dumpbase_ext) != 0)\n \t{\n@@ -5083,10 +5086,18 @@ process_command (unsigned int decoded_options_count,\n   /* Check that dumpbase_ext, if still present, still matches the end\n      of dumpbase, if present, and drop it otherwise.  We only retained\n      it above when dumpbase was absent to maybe use it to drop the\n-     extension from output_name before combining it with dumpdir.  */\n+     extension from output_name before combining it with dumpdir.  We\n+     won't deal with -dumpbase-ext when -dumpbase is not explicitly\n+     given, even if just to activate backward-compatible dumpbase:\n+     dropping it on the floor is correct, expected and documented\n+     behavior.  Attempting to deal with a -dumpbase-ext that might\n+     match the end of some input filename, or of the combination of\n+     the output basename with the suffix of the input filename,\n+     possible with an intermediate .gk extension for -fcompare-debug,\n+     is just calling for trouble.  */\n   if (dumpbase_ext)\n     {\n-      if (!dumpbase)\n+      if (!dumpbase || !*dumpbase)\n \t{\n \t  free (dumpbase_ext);\n \t  dumpbase_ext = NULL;"}, {"sha": "1e3cd4122a62566f2f443643e0d0d15a2ca17941", "filename": "gcc/testsuite/gcc.misc-tests/outputs.exp", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b9cb1a83b0d6485d9922ecef097d250a22d830/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foutputs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b9cb1a83b0d6485d9922ecef097d250a22d830/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foutputs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Foutputs.exp?ref=c1b9cb1a83b0d6485d9922ecef097d250a22d830", "patch": "@@ -137,11 +137,9 @@ proc outest { test sources opts dirs outputs } {\n \n \t    if { [string match \"\\[\\$\\\"\\]\" [string index $og 0]] } {\n \t\tglobal aout\n-\t\tset og [expr $og]\n-\t\tif { \"$og\" == \"\" } { continue }\n-\t    }\n-\n-\t    if { [string index $og 0] == \"-\" } then {\n+\t\teval set o $og\n+\t\tif { \"$o\" == \"\" } { continue }\n+\t    } elseif { [string index $og 0] == \"-\" } then {\n \t\tif { [string index $og 1] == \"-\" \\\n \t\t     || [string index $og 1] == \".\" } then {\n \t\t    set o \"$b-$b[string range $og 1 end]\"\n@@ -723,6 +721,21 @@ outest \"$b lto st mult namedb\" $mult \"-o dir/$b.exe -save-temps -O2 -flto -flto-\n # !$skip_lto\n }\n \n+# PR96230 - -dumpbase \"\" with -dumpbase-ext, not linking\n+outest \"$b single  -c  -o -db'' -dbx.c\" $sing \"-c -o dir/$b.o -dumpbase \\\"\\\" -dumpbase-ext .c -fdump-rtl-final -fstack-usage $gsplit_dwarf\" {dir/} {{-0.c.???r.final -0.su !!$gspd -0.dwo !0 .o} {}}\n+outest \"$b mult  -c  -dd -db'' -dbx.c\" $mult \"-c -dumpdir dir/ -dumpbase \\\"\\\" -dumpbase-ext .c -fdump-rtl-final -fstack-usage $gsplit_dwarf\" {dir/} {{-1.c.???r.final -1.su !!$gspd -1.dwo !0 -2.c.???r.final -2.su !!$gspd -2.dwo} {-1.o -2.o}}\n+outest \"$b single  -c  -o -db'' -dbx.x\" $sing \"-c -o dir/$b.o -dumpbase \\\"\\\" -dumpbase-ext .x -fdump-rtl-final -fstack-usage $gsplit_dwarf\" {dir/} {{-0.c.???r.final -0.su !!$gspd -0.dwo !0 .o} {}}\n+outest \"$b mult  -c  -dd -db'' -dbx.x\" $mult \"-c -dumpdir dir/ -dumpbase \\\"\\\" -dumpbase-ext .x -fdump-rtl-final -fstack-usage $gsplit_dwarf\" {dir/} {{-1.c.???r.final -1.su !!$gspd -1.dwo !0 -2.c.???r.final -2.su !!$gspd -2.dwo} {-1.o -2.o}}\n+# Test -dumpbase-ext without an explicit -dumpbase too.\n+outest \"$b single  -c  -o -dbx.c\" $sing \"-c -o dir/$b.o -dumpbase-ext .c -fdump-rtl-final -fstack-usage $gsplit_dwarf\" {dir/} {{.c.???r.final .su !!$gspd .dwo !0 .o} {}}\n+outest \"$b mult  -c  -dd -dbx.c\" $mult \"-c -dumpdir dir/ -dumpbase-ext .c -fdump-rtl-final -fstack-usage $gsplit_dwarf\" {dir/} {{-1.c.???r.final -1.su !!$gspd -1.dwo !0 -2.c.???r.final -2.su !!$gspd -2.dwo} {-1.o -2.o}}\n+outest \"$b single  -c  -o -dbx.x\" $sing \"-c -o dir/$b.o -dumpbase-ext .x -fdump-rtl-final -fstack-usage $gsplit_dwarf\" {dir/} {{.c.???r.final .su !!$gspd .dwo !0 .o} {}}\n+outest \"$b mult  -c  -dd -dbx.x\" $mult \"-c -dumpdir dir/ -dumpbase-ext .x -fdump-rtl-final -fstack-usage $gsplit_dwarf\" {dir/} {{-1.c.???r.final -1.su !!$gspd -1.dwo !0 -2.c.???r.final -2.su !!$gspd -2.dwo} {-1.o -2.o}}\n+outest \"$b obj compare-debug save-temps -dbx.x\" $sing \"-c -fcompare-debug -save-temps -fdump-rtl-final -fstack-usage $gsplit_dwarf -fdump-final-insns -dumpbase-ext .x\" {} {{-0.c.???r.final -0.su -0.i -0.c.gkd -0.s -0.gk.i -0.gk.c.???r.final -0.gk.c.gkd !!$gspd -0.dwo !0 -0.o}}\n+# -dumpbase-ext is dropped if identical to -dumpbase.\n+outest \"$b asm db=dbext 1\" $sing \"-S -fdump-rtl-final -fstack-usage $gsplit_dwarf -dumpbase a -dumpbase-ext a\" {} {{a.???r.final a.su -0.s}}\n+\n+\n # Below are examples taken from the documentation.\n # They are likely redundant with earlier test,\n # but we want to make sure behavior matches the docs."}]}