{"sha": "641cac0b195f01af249f6e96207b7b27c3094557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQxY2FjMGIxOTVmMDFhZjI0OWY2ZTk2MjA3YjdiMjdjMzA5NDU1Nw==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-05-06T20:46:25Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-05-06T20:46:25Z"}, "message": "expr.c (get_def_for_expr): Move it up in the file.\n\n\t* expr.c (get_def_for_expr): Move it up in the file.\n\t(store_field): When expanding a bit-field store, look at the\n\tdefining gimple stmt for the masking conversion.\n\nFrom-SVN: r147203", "tree": {"sha": "6c86279911568e42d00cc522d22e78b11e7c5bd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c86279911568e42d00cc522d22e78b11e7c5bd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/641cac0b195f01af249f6e96207b7b27c3094557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/641cac0b195f01af249f6e96207b7b27c3094557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/641cac0b195f01af249f6e96207b7b27c3094557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/641cac0b195f01af249f6e96207b7b27c3094557/comments", "author": null, "committer": null, "parents": [{"sha": "c7cb9f42a8842aba5a14138afb9f4e67067c28fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7cb9f42a8842aba5a14138afb9f4e67067c28fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7cb9f42a8842aba5a14138afb9f4e67067c28fa"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "b717be6f384efeb040a9997982b090c831755769", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641cac0b195f01af249f6e96207b7b27c3094557/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641cac0b195f01af249f6e96207b7b27c3094557/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=641cac0b195f01af249f6e96207b7b27c3094557", "patch": "@@ -1,3 +1,9 @@\n+2009-05-06  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* expr.c (get_def_for_expr): Move it up in the file.\n+\t(store_field): When expanding a bit-field store, look at the\n+\tdefining gimple stmt for the masking conversion.\n+\n 2009-05-06  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR middle-end/39986"}, {"sha": "aca8c578c8e20fcd37ba9e643191047dbf40b778", "filename": "gcc/expr.c", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641cac0b195f01af249f6e96207b7b27c3094557/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641cac0b195f01af249f6e96207b7b27c3094557/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=641cac0b195f01af249f6e96207b7b27c3094557", "patch": "@@ -2249,6 +2249,26 @@ use_group_regs (rtx *call_fusage, rtx regs)\n \tuse_reg (call_fusage, reg);\n     }\n }\n+\n+/* Return the defining gimple statement for SSA_NAME NAME if it is an\n+   assigment and the code of the expresion on the RHS is CODE.  Return\n+   NULL otherwise.  */\n+\n+static gimple\n+get_def_for_expr (tree name, enum tree_code code)\n+{\n+  gimple def_stmt;\n+\n+  if (TREE_CODE (name) != SSA_NAME)\n+    return NULL;\n+\n+  def_stmt = get_gimple_for_ssa_name (name);\n+  if (!def_stmt\n+      || gimple_assign_rhs_code (def_stmt) != code)\n+    return NULL;\n+\n+  return def_stmt;\n+}\n \f\n \n /* Determine whether the LEN bytes generated by CONSTFUN can be\n@@ -5776,22 +5796,25 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \t  && compare_tree_int (TYPE_SIZE (TREE_TYPE (exp)), bitsize) != 0))\n     {\n       rtx temp;\n+      gimple nop_def;\n \n       /* If EXP is a NOP_EXPR of precision less than its mode, then that\n \t implies a mask operation.  If the precision is the same size as\n \t the field we're storing into, that mask is redundant.  This is\n \t particularly common with bit field assignments generated by the\n \t C front end.  */\n-      if (TREE_CODE (exp) == NOP_EXPR)\n+      nop_def = get_def_for_expr (exp, NOP_EXPR);\n+      if (nop_def)\n \t{\n \t  tree type = TREE_TYPE (exp);\n \t  if (INTEGRAL_TYPE_P (type)\n \t      && TYPE_PRECISION (type) < GET_MODE_BITSIZE (TYPE_MODE (type))\n \t      && bitsize == TYPE_PRECISION (type))\n \t    {\n-\t      type = TREE_TYPE (TREE_OPERAND (exp, 0));\n+\t      tree op = gimple_assign_rhs1 (nop_def);\n+\t      type = TREE_TYPE (op);\n \t      if (INTEGRAL_TYPE_P (type) && TYPE_PRECISION (type) >= bitsize)\n-\t\texp = TREE_OPERAND (exp, 0);\n+\t\texp = op;\n \t    }\n \t}\n \n@@ -6992,26 +7015,6 @@ expand_constructor (tree exp, rtx target, enum expand_modifier modifier,\n   return target;\n }\n \n-/* Return the defining gimple statement for SSA_NAME NAME if it is an\n-   assigment and the code of the expresion on the RHS is CODE.  Return\n-   NULL otherwise.  */\n-\n-static gimple\n-get_def_for_expr (tree name, enum tree_code code)\n-{\n-  gimple def_stmt;\n-\n-  if (TREE_CODE (name) != SSA_NAME)\n-    return NULL;\n-\n-  def_stmt = get_gimple_for_ssa_name (name);\n-  if (!def_stmt\n-      || gimple_assign_rhs_code (def_stmt) != code)\n-    return NULL;\n-\n-  return def_stmt;\n-}\n-\n \n /* expand_expr: generate code for computing expression EXP.\n    An rtx for the computed value is returned.  The value is never null."}]}