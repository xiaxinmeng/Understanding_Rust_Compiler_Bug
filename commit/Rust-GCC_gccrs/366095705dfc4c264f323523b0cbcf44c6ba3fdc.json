{"sha": "366095705dfc4c264f323523b0cbcf44c6ba3fdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY2MDk1NzA1ZGZjNGMyNjRmMzIzNTIzYjBjYmNmNDRjNmJhM2ZkYw==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-07-15T11:08:30Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-07-15T11:08:30Z"}, "message": "acinclude.m4: \"Inline\" LIBGCJ_CONFIGURE macro into...\n\n\t* acinclude.m4: \"Inline\" LIBGCJ_CONFIGURE macro into...\n\t* configure.in: ...here.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\nFrom-SVN: r84749", "tree": {"sha": "0ec64a092befba3b8a64221cc3c552500eb49e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ec64a092befba3b8a64221cc3c552500eb49e95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/366095705dfc4c264f323523b0cbcf44c6ba3fdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366095705dfc4c264f323523b0cbcf44c6ba3fdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366095705dfc4c264f323523b0cbcf44c6ba3fdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366095705dfc4c264f323523b0cbcf44c6ba3fdc/comments", "author": null, "committer": null, "parents": [{"sha": "37a247a0a0fdbe1450ce2284b12b8e7f6c304909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a247a0a0fdbe1450ce2284b12b8e7f6c304909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37a247a0a0fdbe1450ce2284b12b8e7f6c304909"}], "stats": {"total": 1530, "additions": 695, "deletions": 835}, "files": [{"sha": "ae51a6d4136e506d490ceb7fb2671e49a4b27b88", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366095705dfc4c264f323523b0cbcf44c6ba3fdc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366095705dfc4c264f323523b0cbcf44c6ba3fdc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=366095705dfc4c264f323523b0cbcf44c6ba3fdc", "patch": "@@ -1,5 +1,10 @@\n 2004-07-14  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n+\t* acinclude.m4: \"Inline\" LIBGCJ_CONFIGURE macro into...\n+\t* configure.in: ...here.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\n \t* aclocal.m4: Rebuilt with aclocal gcj-1.4.\n \t* configure: Rebuilt with autoconf 2.13.\n \t* Makefile.in, gcj/Makefile.in, include/Makefile.in,"}, {"sha": "2751d2b8dea3e8fa37797d13d4d4ceb5e710d1e1", "filename": "libjava/acinclude.m4", "status": "modified", "additions": 0, "deletions": 135, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366095705dfc4c264f323523b0cbcf44c6ba3fdc/libjava%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366095705dfc4c264f323523b0cbcf44c6ba3fdc/libjava%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Facinclude.m4?ref=366095705dfc4c264f323523b0cbcf44c6ba3fdc", "patch": "@@ -1,140 +1,5 @@\n sinclude(../config/accross.m4)\n \n-AC_DEFUN(LIBGCJ_CONFIGURE,\n-[\n-dnl Default to --enable-multilib\n-AC_ARG_ENABLE(multilib,\n-[  --enable-multilib       build many library versions (default)],\n-[case \"${enableval}\" in\n-  yes) multilib=yes ;;\n-  no)  multilib=no ;;\n-  *)   AC_MSG_ERROR(bad value ${enableval} for multilib option) ;;\n- esac], [multilib=yes])dnl\n-\n-dnl We may get other options which we don't document:\n-dnl --with-target-subdir, --with-multisrctop, --with-multisubdir\n-\n-# When building with srcdir == objdir, links to the source files will\n-# be created in directories within the target_subdir.  We have to\n-# adjust toplevel_srcdir accordingly, so that configure finds\n-# install-sh and other auxiliary files that live in the top-level\n-# source directory.\n-if test \"${srcdir}\" = \".\"; then\n-  if test -z \"${with_target_subdir}\"; then\n-    toprel=\"..\"\n-  else\n-    if test \"${with_target_subdir}\" != \".\"; then\n-      toprel=\"${with_multisrctop}../..\"\n-    else\n-      toprel=\"${with_multisrctop}..\"\n-    fi\n-  fi\n-else\n-  toprel=\"..\"\n-fi\n-\n-libgcj_basedir=$srcdir/$toprel/$1/libjava\n-AC_SUBST(libgcj_basedir)\n-\n-AC_CONFIG_AUX_DIR(${srcdir}/$toprel)\n-if :; then :; else\n-  # This overrides the previous occurrence for automake, but not for\n-  # autoconf, which is exactly what we want.\n-  AC_CONFIG_AUX_DIR(..)\n-fi\n-\n-# This works around an automake problem.\n-mkinstalldirs=\"`cd $ac_aux_dir && ${PWDCMD-pwd}`/mkinstalldirs\"\n-AC_SUBST(mkinstalldirs)\n-\n-AC_CANONICAL_SYSTEM\n-\n-dnl This shouldn't be needed, as long as top-level dependencies are\n-dnl defined correctly and shared-library paths are set up so that\n-dnl execution tests succeed.  FIXME.\n-define([AC_PROG_CC_WORKS],[])\n-define([AC_PROG_CXX_WORKS],[])\n-\n-AC_PROG_CC\n-\n-# We use the libstdc++-v3 version of LIB_AC_PROG_CXX, but use\n-# glibjava_CXX instead of glibcpp_CXX.  That's because we're passed a\n-# different definition of CXX than other directories, since we don't\n-# depend on libstdc++-v3 having already been built.\n-AC_DEFUN(LIB_AC_PROG_CXX,\n-[AC_BEFORE([$0], [AC_PROG_CXXCPP])dnl\n-dnl Fool anybody using AC_PROG_CXX.\n-AC_PROVIDE([AC_PROG_CXX])\n-# Use glibjava_CXX so that we do not cause CXX to be cached with the\n-# flags that come in CXX while configuring libjava.  They're different\n-# from those used for all other target libraries.  If CXX is set in\n-# the environment, respect that here.\n-glibjava_CXX=$CXX\n-AC_CHECK_PROGS(glibjava_CXX, $CCC c++ g++ gcc CC cxx cc++, gcc)\n-AC_SUBST(CXX)\n-CXX=$glibjava_CXX\n-test -z \"$glibjava_CXX\" && AC_MSG_ERROR([no acceptable c++ found in \\$PATH])\n-\n-AC_PROG_CXX_GNU\n-\n-if test $ac_cv_prog_gxx = yes; then\n-  GXX=yes\n-dnl Check whether -g works, even if CXXFLAGS is set, in case the package\n-dnl plays around with CXXFLAGS (such as to build both debugging and\n-dnl normal versions of a library), tasteless as that idea is.\n-  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\n-  AC_PROG_CXX_G\n-  if test \"$ac_test_CXXFLAGS\" = set; then\n-    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  elif test $ac_cv_prog_cxx_g = yes; then\n-    CXXFLAGS=\"-g -O2\"\n-  else\n-    CXXFLAGS=\"-O2\"\n-  fi\n-else\n-  GXX=\n-  test \"${CXXFLAGS+set}\" = set || CXXFLAGS=\"-g\"\n-fi\n-])\n-\n-LIB_AC_PROG_CXX\n-\n-dnl version is pulled out to make it a bit easier to change using sed.\n-version=0.0.7\n-dnl Still use \"libjava\" here to placate dejagnu.\n-AM_INIT_AUTOMAKE(libjava, $version)\n-\n-AC_CHECK_TOOL(AS, as)\n-AC_CHECK_TOOL(AR, ar)\n-AC_CHECK_TOOL(RANLIB, ranlib, :)\n-\n-AC_PROG_INSTALL\n-\n-AM_MAINTAINER_MODE\n-\n-AC_EXEEXT\n-\n-# configure.host sets the following important variables\n-#\tlibgcj_cflags    - host specific C compiler flags\n-#\tlibgcj_cxxflags  - host specific C++ compiler flags\n-#\tlibgcj_javaflags - host specific Java compiler flags\n-\n-libgcj_cflags=\n-libgcj_cxxflags=\n-libgcj_javaflags=\n-\n-. [$]{srcdir}/configure.host\n-\n-LIBGCJ_CFLAGS=\"[$]{libgcj_cflags}\"\n-LIBGCJ_CXXFLAGS=\"[$]{libgcj_cxxflags}\"\n-LIBGCJ_JAVAFLAGS=\"[$]{libgcj_javaflags}\"\n-AC_SUBST(LIBGCJ_CFLAGS)\n-AC_SUBST(LIBGCJ_CXXFLAGS)\n-AC_SUBST(LIBGCJ_JAVAFLAGS)\n-])dnl\n-\n sinclude(../libtool.m4)\n dnl The lines below arrange for aclocal not to bring libtool.m4\n dnl AM_PROG_LIBTOOL into aclocal.m4, while still arranging for automake"}, {"sha": "4df1f21200e2101d190c31cbb847835eb3d5cfaf", "filename": "libjava/aclocal.m4", "status": "modified", "additions": 0, "deletions": 135, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366095705dfc4c264f323523b0cbcf44c6ba3fdc/libjava%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366095705dfc4c264f323523b0cbcf44c6ba3fdc/libjava%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Faclocal.m4?ref=366095705dfc4c264f323523b0cbcf44c6ba3fdc", "patch": "@@ -12,141 +12,6 @@ dnl PARTICULAR PURPOSE.\n \n sinclude(../config/accross.m4)\n \n-AC_DEFUN(LIBGCJ_CONFIGURE,\n-[\n-dnl Default to --enable-multilib\n-AC_ARG_ENABLE(multilib,\n-[  --enable-multilib       build many library versions (default)],\n-[case \"${enableval}\" in\n-  yes) multilib=yes ;;\n-  no)  multilib=no ;;\n-  *)   AC_MSG_ERROR(bad value ${enableval} for multilib option) ;;\n- esac], [multilib=yes])dnl\n-\n-dnl We may get other options which we don't document:\n-dnl --with-target-subdir, --with-multisrctop, --with-multisubdir\n-\n-# When building with srcdir == objdir, links to the source files will\n-# be created in directories within the target_subdir.  We have to\n-# adjust toplevel_srcdir accordingly, so that configure finds\n-# install-sh and other auxiliary files that live in the top-level\n-# source directory.\n-if test \"${srcdir}\" = \".\"; then\n-  if test -z \"${with_target_subdir}\"; then\n-    toprel=\"..\"\n-  else\n-    if test \"${with_target_subdir}\" != \".\"; then\n-      toprel=\"${with_multisrctop}../..\"\n-    else\n-      toprel=\"${with_multisrctop}..\"\n-    fi\n-  fi\n-else\n-  toprel=\"..\"\n-fi\n-\n-libgcj_basedir=$srcdir/$toprel/$1/libjava\n-AC_SUBST(libgcj_basedir)\n-\n-AC_CONFIG_AUX_DIR(${srcdir}/$toprel)\n-if :; then :; else\n-  # This overrides the previous occurrence for automake, but not for\n-  # autoconf, which is exactly what we want.\n-  AC_CONFIG_AUX_DIR(..)\n-fi\n-\n-# This works around an automake problem.\n-mkinstalldirs=\"`cd $ac_aux_dir && ${PWDCMD-pwd}`/mkinstalldirs\"\n-AC_SUBST(mkinstalldirs)\n-\n-AC_CANONICAL_SYSTEM\n-\n-dnl This shouldn't be needed, as long as top-level dependencies are\n-dnl defined correctly and shared-library paths are set up so that\n-dnl execution tests succeed.  FIXME.\n-define([AC_PROG_CC_WORKS],[])\n-define([AC_PROG_CXX_WORKS],[])\n-\n-AC_PROG_CC\n-\n-# We use the libstdc++-v3 version of LIB_AC_PROG_CXX, but use\n-# glibjava_CXX instead of glibcpp_CXX.  That's because we're passed a\n-# different definition of CXX than other directories, since we don't\n-# depend on libstdc++-v3 having already been built.\n-AC_DEFUN(LIB_AC_PROG_CXX,\n-[AC_BEFORE([$0], [AC_PROG_CXXCPP])dnl\n-dnl Fool anybody using AC_PROG_CXX.\n-AC_PROVIDE([AC_PROG_CXX])\n-# Use glibjava_CXX so that we do not cause CXX to be cached with the\n-# flags that come in CXX while configuring libjava.  They're different\n-# from those used for all other target libraries.  If CXX is set in\n-# the environment, respect that here.\n-glibjava_CXX=$CXX\n-AC_CHECK_PROGS(glibjava_CXX, $CCC c++ g++ gcc CC cxx cc++, gcc)\n-AC_SUBST(CXX)\n-CXX=$glibjava_CXX\n-test -z \"$glibjava_CXX\" && AC_MSG_ERROR([no acceptable c++ found in \\$PATH])\n-\n-AC_PROG_CXX_GNU\n-\n-if test $ac_cv_prog_gxx = yes; then\n-  GXX=yes\n-dnl Check whether -g works, even if CXXFLAGS is set, in case the package\n-dnl plays around with CXXFLAGS (such as to build both debugging and\n-dnl normal versions of a library), tasteless as that idea is.\n-  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\n-  AC_PROG_CXX_G\n-  if test \"$ac_test_CXXFLAGS\" = set; then\n-    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  elif test $ac_cv_prog_cxx_g = yes; then\n-    CXXFLAGS=\"-g -O2\"\n-  else\n-    CXXFLAGS=\"-O2\"\n-  fi\n-else\n-  GXX=\n-  test \"${CXXFLAGS+set}\" = set || CXXFLAGS=\"-g\"\n-fi\n-])\n-\n-LIB_AC_PROG_CXX\n-\n-dnl version is pulled out to make it a bit easier to change using sed.\n-version=0.0.7\n-dnl Still use \"libjava\" here to placate dejagnu.\n-AM_INIT_AUTOMAKE(libjava, $version)\n-\n-AC_CHECK_TOOL(AS, as)\n-AC_CHECK_TOOL(AR, ar)\n-AC_CHECK_TOOL(RANLIB, ranlib, :)\n-\n-AC_PROG_INSTALL\n-\n-AM_MAINTAINER_MODE\n-\n-AC_EXEEXT\n-\n-# configure.host sets the following important variables\n-#\tlibgcj_cflags    - host specific C compiler flags\n-#\tlibgcj_cxxflags  - host specific C++ compiler flags\n-#\tlibgcj_javaflags - host specific Java compiler flags\n-\n-libgcj_cflags=\n-libgcj_cxxflags=\n-libgcj_javaflags=\n-\n-. [$]{srcdir}/configure.host\n-\n-LIBGCJ_CFLAGS=\"[$]{libgcj_cflags}\"\n-LIBGCJ_CXXFLAGS=\"[$]{libgcj_cxxflags}\"\n-LIBGCJ_JAVAFLAGS=\"[$]{libgcj_javaflags}\"\n-AC_SUBST(LIBGCJ_CFLAGS)\n-AC_SUBST(LIBGCJ_CXXFLAGS)\n-AC_SUBST(LIBGCJ_JAVAFLAGS)\n-])dnl\n-\n sinclude(../libtool.m4)\n dnl The lines below arrange for aclocal not to bring libtool.m4\n dnl AM_PROG_LIBTOOL into aclocal.m4, while still arranging for automake"}, {"sha": "59016083b5eb677e6eab71d9e4e74125d92771f3", "filename": "libjava/configure", "status": "modified", "additions": 560, "deletions": 564, "changes": 1124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366095705dfc4c264f323523b0cbcf44c6ba3fdc/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366095705dfc4c264f323523b0cbcf44c6ba3fdc/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=366095705dfc4c264f323523b0cbcf44c6ba3fdc"}, {"sha": "fd524b413dc1e9c1302628ad6264db9d919e06de", "filename": "libjava/configure.in", "status": "modified", "additions": 130, "deletions": 1, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366095705dfc4c264f323523b0cbcf44c6ba3fdc/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366095705dfc4c264f323523b0cbcf44c6ba3fdc/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=366095705dfc4c264f323523b0cbcf44c6ba3fdc", "patch": "@@ -32,8 +32,137 @@ AC_ARG_ENABLE(version-specific-runtime-libs,\n     [version_specific_libs=no]\n )\n \n+dnl Default to --enable-multilib\n+AC_ARG_ENABLE(multilib,\n+[  --enable-multilib       build many library versions (default)],\n+[case \"${enableval}\" in\n+  yes) multilib=yes ;;\n+  no)  multilib=no ;;\n+  *)   AC_MSG_ERROR(bad value ${enableval} for multilib option) ;;\n+ esac], [multilib=yes])dnl\n+\n+dnl We may get other options which we don't document:\n+dnl --with-target-subdir, --with-multisrctop, --with-multisubdir\n+\n+# When building with srcdir == objdir, links to the source files will\n+# be created in directories within the target_subdir.  We have to\n+# adjust toplevel_srcdir accordingly, so that configure finds\n+# install-sh and other auxiliary files that live in the top-level\n+# source directory.\n+if test \"${srcdir}\" = \".\"; then\n+  if test -z \"${with_target_subdir}\"; then\n+    toprel=\"..\"\n+  else\n+    if test \"${with_target_subdir}\" != \".\"; then\n+      toprel=\"${with_multisrctop}../..\"\n+    else\n+      toprel=\"${with_multisrctop}..\"\n+    fi\n+  fi\n+else\n+  toprel=\"..\"\n+fi\n+\n+libgcj_basedir=$srcdir/$toprel/./libjava\n+AC_SUBST(libgcj_basedir)\n+\n+AC_CONFIG_AUX_DIR(${srcdir}/$toprel)\n+if :; then :; else\n+  # This overrides the previous occurrence for automake, but not for\n+  # autoconf, which is exactly what we want.\n+  AC_CONFIG_AUX_DIR(..)\n+fi\n+\n+# This works around an automake problem.\n+mkinstalldirs=\"`cd $ac_aux_dir && ${PWDCMD-pwd}`/mkinstalldirs\"\n+AC_SUBST(mkinstalldirs)\n+\n+AC_CANONICAL_SYSTEM\n+\n+dnl This shouldn't be needed, as long as top-level dependencies are\n+dnl defined correctly and shared-library paths are set up so that\n+dnl execution tests succeed.  FIXME.\n+define([AC_PROG_CC_WORKS],[])\n+define([AC_PROG_CXX_WORKS],[])\n+\n+AC_PROG_CC\n+\n+# We use the libstdc++-v3 version of LIB_AC_PROG_CXX, but use\n+# glibjava_CXX instead of glibcpp_CXX.  That's because we're passed a\n+# different definition of CXX than other directories, since we don't\n+# depend on libstdc++-v3 having already been built.\n+AC_DEFUN(LIB_AC_PROG_CXX,\n+[AC_BEFORE([$0], [AC_PROG_CXXCPP])dnl\n+dnl Fool anybody using AC_PROG_CXX.\n+AC_PROVIDE([AC_PROG_CXX])\n+# Use glibjava_CXX so that we do not cause CXX to be cached with the\n+# flags that come in CXX while configuring libjava.  They're different\n+# from those used for all other target libraries.  If CXX is set in\n+# the environment, respect that here.\n+glibjava_CXX=$CXX\n+AC_CHECK_PROGS(glibjava_CXX, $CCC c++ g++ gcc CC cxx cc++, gcc)\n+AC_SUBST(CXX)\n+CXX=$glibjava_CXX\n+test -z \"$glibjava_CXX\" && AC_MSG_ERROR([no acceptable c++ found in \\$PATH])\n+\n+AC_PROG_CXX_GNU\n+\n+if test $ac_cv_prog_gxx = yes; then\n+  GXX=yes\n+dnl Check whether -g works, even if CXXFLAGS is set, in case the package\n+dnl plays around with CXXFLAGS (such as to build both debugging and\n+dnl normal versions of a library), tasteless as that idea is.\n+  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\n+  AC_PROG_CXX_G\n+  if test \"$ac_test_CXXFLAGS\" = set; then\n+    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  elif test $ac_cv_prog_cxx_g = yes; then\n+    CXXFLAGS=\"-g -O2\"\n+  else\n+    CXXFLAGS=\"-O2\"\n+  fi\n+else\n+  GXX=\n+  test \"${CXXFLAGS+set}\" = set || CXXFLAGS=\"-g\"\n+fi\n+])\n+\n+LIB_AC_PROG_CXX\n+\n+dnl version is pulled out to make it a bit easier to change using sed.\n+version=0.0.7\n+dnl Still use \"libjava\" here to placate dejagnu.\n+AM_INIT_AUTOMAKE(libjava, $version)\n+\n+AC_CHECK_TOOL(AS, as)\n+AC_CHECK_TOOL(AR, ar)\n+AC_CHECK_TOOL(RANLIB, ranlib, :)\n+\n+AC_PROG_INSTALL\n+\n+AM_MAINTAINER_MODE\n+\n+AC_EXEEXT\n+\n+# configure.host sets the following important variables\n+#\tlibgcj_cflags    - host specific C compiler flags\n+#\tlibgcj_cxxflags  - host specific C++ compiler flags\n+#\tlibgcj_javaflags - host specific Java compiler flags\n+\n+libgcj_cflags=\n+libgcj_cxxflags=\n+libgcj_javaflags=\n+\n+. [$]{srcdir}/configure.host\n \n-LIBGCJ_CONFIGURE(.)\n+LIBGCJ_CFLAGS=\"[$]{libgcj_cflags}\"\n+LIBGCJ_CXXFLAGS=\"[$]{libgcj_cxxflags}\"\n+LIBGCJ_JAVAFLAGS=\"[$]{libgcj_javaflags}\"\n+AC_SUBST(LIBGCJ_CFLAGS)\n+AC_SUBST(LIBGCJ_CXXFLAGS)\n+AC_SUBST(LIBGCJ_JAVAFLAGS)\n \n AM_CONFIG_HEADER(include/config.h gcj/libgcj-config.h)\n "}]}