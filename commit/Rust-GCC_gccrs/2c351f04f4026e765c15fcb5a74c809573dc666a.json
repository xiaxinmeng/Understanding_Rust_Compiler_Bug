{"sha": "2c351f04f4026e765c15fcb5a74c809573dc666a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMzNTFmMDRmNDAyNmU3NjVjMTVmY2I1YTc0YzgwOTU3M2RjNjY2YQ==", "commit": {"author": {"name": "Quentin Ochem", "email": "ochem@adacore.com", "date": "2006-02-15T09:37:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:37:21Z"}, "message": "bindusg.adb: Updated documentation for -d and -D switches.\n\n2006-02-13  Quentin Ochem  <ochem@adacore.com>\n\t    Olivier Hainque  <hainque@adacore.com>\n\n\t* bindusg.adb: Updated documentation for -d and -D switches.\n\n\t* raise.h (__gnat_set_globals): added new parameter for\n\tDefault_Stack_Size.\n\n\t* init.c (__gnat_adjust_context_for_raise) <alpha-vms case>: Implement.\n\t(__gnat_handle_vms_condition): Adjust context before raise.\n\t(__gnat_install_handler): Restore the global vector setup for GCC\n\tversions before 3.4, as the frame based circtuitry is not available\n\tin this case.\n\t(__gnat_set_globals): added a parameter default_stack_size\n\t(__gl_default_stack_size): new variable.\n\nFrom-SVN: r111056", "tree": {"sha": "8a2a937d7f81a97a585f84040849a1517c06251d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a2a937d7f81a97a585f84040849a1517c06251d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c351f04f4026e765c15fcb5a74c809573dc666a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c351f04f4026e765c15fcb5a74c809573dc666a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c351f04f4026e765c15fcb5a74c809573dc666a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c351f04f4026e765c15fcb5a74c809573dc666a/comments", "author": {"login": "QuentinOchem", "id": 5612750, "node_id": "MDQ6VXNlcjU2MTI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5612750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuentinOchem", "html_url": "https://github.com/QuentinOchem", "followers_url": "https://api.github.com/users/QuentinOchem/followers", "following_url": "https://api.github.com/users/QuentinOchem/following{/other_user}", "gists_url": "https://api.github.com/users/QuentinOchem/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuentinOchem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuentinOchem/subscriptions", "organizations_url": "https://api.github.com/users/QuentinOchem/orgs", "repos_url": "https://api.github.com/users/QuentinOchem/repos", "events_url": "https://api.github.com/users/QuentinOchem/events{/privacy}", "received_events_url": "https://api.github.com/users/QuentinOchem/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba6739078139fc22634a0b45c4c34147a14665df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6739078139fc22634a0b45c4c34147a14665df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6739078139fc22634a0b45c4c34147a14665df"}], "stats": {"total": 115, "additions": 82, "deletions": 33}, "files": [{"sha": "d39789a8ad546dee724344d5d62fb64a1d9ffbeb", "filename": "gcc/ada/bindusg.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c351f04f4026e765c15fcb5a74c809573dc666a/gcc%2Fada%2Fbindusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c351f04f4026e765c15fcb5a74c809573dc666a/gcc%2Fada%2Fbindusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindusg.adb?ref=2c351f04f4026e765c15fcb5a74c809573dc666a", "patch": "@@ -78,9 +78,16 @@ begin\n    Write_Str (\"  -C        Generate binder program in C\");\n    Write_Eol;\n \n+   --  Line for -d switch\n+\n+   Write_Str (\"  -dnn[k|m] Default primary stack size = nn [kilo|mega] \");\n+   Write_Str (\"bytes \");\n+   Write_Eol;\n+\n    --  Line for D switch\n \n-   Write_Str (\"  -Dnnn     Default secondary stack size = nnn bytes\");\n+   Write_Str (\"  -Dnn[k|m] Default secondary stack size = nnn [kilo|mega] \");\n+   Write_Str (\"bytes\");\n    Write_Eol;\n \n    --  Line for -e switch"}, {"sha": "eb10d6363f1633256225c5db7bcabf1b221ce55d", "filename": "gcc/ada/init.c", "status": "modified", "additions": 73, "deletions": 31, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c351f04f4026e765c15fcb5a74c809573dc666a/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c351f04f4026e765c15fcb5a74c809573dc666a/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=2c351f04f4026e765c15fcb5a74c809573dc666a", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2005, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2006, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -102,6 +102,7 @@ int   __gl_unreserve_all_interrupts = 0;\n int   __gl_exception_tracebacks     = 0;\n int   __gl_zero_cost_exceptions     = 0;\n int   __gl_detect_blocking          = 0;\n+int   __gl_default_stack_size       = -1;\n \n /* Indication of whether synchronous signal handler has already been\n    installed by a previous call to adainit */\n@@ -171,7 +172,8 @@ __gnat_set_globals (int main_priority,\n                     int unreserve_all_interrupts,\n                     int exception_tracebacks,\n                     int zero_cost_exceptions,\n-                    int detect_blocking)\n+                    int detect_blocking,\n+                    int default_stack_size)\n {\n   static int already_called = 0;\n \n@@ -210,7 +212,8 @@ __gnat_set_globals (int main_priority,\n \t  || __gl_queuing_policy           != queuing_policy\n \t  || __gl_task_dispatching_policy  != task_dispatching_policy\n \t  || __gl_unreserve_all_interrupts != unreserve_all_interrupts\n-\t  || __gl_zero_cost_exceptions     != zero_cost_exceptions)\n+\t  || __gl_zero_cost_exceptions     != zero_cost_exceptions\n+\t  || __gl_default_stack_size       != default_stack_size)\n \t__gnat_raise_program_error (__FILE__, __LINE__);\n \n       /* If either a library or the main program set the exception traceback\n@@ -244,8 +247,11 @@ __gnat_set_globals (int main_priority,\n      reasonable other way. This could be removed as soon as the next major\n      release is out.  */\n \n+   /* ??? ditto for __gl_default_stack_size, new in 5.04 */\n+\n #ifdef IN_RTS\n   __gl_zero_cost_exceptions = zero_cost_exceptions;\n+  __gl_default_stack_size = default_stack_size;\n #else\n   __gl_zero_cost_exceptions = 0;\n   /* We never build the compiler to run in ZCX mode currently anyway.  */\n@@ -280,22 +286,18 @@ __gnat_set_globals (int main_priority,\n    the triggering instruction happens to be the very first of a region, the\n    later adjustments performed by the unwinder would yield an address outside\n    that region. We need to compensate for those adjustments at some point,\n-   which we currently do in the GCC unwinding fallback macro.\n+   which we used to do in the GCC unwinding fallback macro.\n \n    The thread at http://gcc.gnu.org/ml/gcc-patches/2004-05/msg00343.html\n-   describes a couple of issues with our current approach. Basically: on some\n-   targets the adjustment to apply depends on the triggering signal, which is\n-   not easily accessible from the macro, and we actually do not tackle this as\n-   of today. Besides, other languages, e.g. Java, deal with this by performing\n-   the adjustment in the signal handler before the raise, so our adjustments\n-   may break those front-ends.\n-\n-   To have it all right, we should either find a way to deal with the signal\n-   variants from the macro and convert Java on all targets (ugh), or remove\n-   our macro adjustments and update our signal handlers a-la-java way.  The\n-   latter option appears the simplest, although some targets have their share\n-   of subtleties to account for.  See for instance the syscall(SYS_sigaction)\n-   story in libjava/include/i386-signal.h.  */\n+   describes a couple of issues with the fallback based compensation approach.\n+   First, on some targets the adjustment to apply depends on the triggering\n+   signal, which is not easily accessible from the macro.  Besides, other\n+   languages, e.g. Java, deal with this by performing the adjustment in the\n+   signal handler before the raise, so fallback adjustments just break those\n+   front-ends.\n+\n+   We now follow the Java way for most targets, via adjust_context_for_raise\n+   below.  */\n \n /***************/\n /* AIX Section */\n@@ -1371,16 +1373,14 @@ copy_msg (msgdesc, message)\n }\n \n long\n-__gnat_error_handler (int *sigargs, void *mechargs)\n+__gnat_handle_vms_condition (int *sigargs, void *mechargs)\n {\n   struct Exception_Data *exception = 0;\n   Exception_Code base_code;\n   struct descriptor_s gnat_facility = {4,0,\"GNAT\"};\n   char message [Default_Exception_Msg_Max_Length];\n \n   const char *msg = \"\";\n-  char curr_icb[544];\n-  long curr_invo_handle;\n \n   /* Check for conditions to resignal which aren't effected by pragma\n      Import_Exception.  */\n@@ -1485,34 +1485,76 @@ __gnat_error_handler (int *sigargs, void *mechargs)\n \tbreak;\n       }\n \n-  Raise_From_Signal_Handler (exception, msg);\n+ __gnat_adjust_context_for_raise (0, (void *)sigargs);\n+ Raise_From_Signal_Handler (exception, msg);\n+}\n+\n+long\n+__gnat_error_handler (int *sigargs, void *mechargs)\n+{\n+  return __gnat_handle_vms_condition (sigargs, mechargs);\n }\n \n void\n __gnat_install_handler (void)\n {\n-  long prvhnd;\n-#if defined (IN_RTS) && !defined (__IA64)\n-  char *c;\n-\n-  c = (char *) xmalloc (2049);\n+  long prvhnd ATTRIBUTE_UNUSED;\n \n-  __gnat_error_prehandler_stack = &c[2048];\n+#if !defined (IN_RTS)\n+  SYS$SETEXV (1, __gnat_error_handler, 3, &prvhnd);\n+#endif\n \n-  /* __gnat_error_prehandler is an assembly function.  */\n-  SYS$SETEXV (1, __gnat_error_prehandler, 3, &prvhnd);\n-#else\n #if defined (IN_RTS) && defined (__IA64)\n   if (getenv (\"DBG$TDBG\"))\n     printf (\"DBG$TDBG defined, __gnat_error_handler not installed!\\n\");\n   else\n-#endif\n     SYS$SETEXV (1, __gnat_error_handler, 3, &prvhnd);\n #endif\n \n+  /* On alpha-vms, we avoid the global vector annoyance thanks to frame based\n+     handlers to turn conditions into exceptions since GCC 3.4.  The global\n+     vector is still required for earlier GCC versions.  We're resorting to\n+     the __gnat_error_prehandler assembly function in this case.  */\n+\n+#if defined (IN_RTS) && defined (__alpha__)\n+  if ((__GNUC__ * 10 + __GNUC_MINOR__) < 34)\n+    {\n+      char * c = (char *) xmalloc (2049);\n+\n+      __gnat_error_prehandler_stack = &c[2048];\n+      SYS$SETEXV (1, __gnat_error_prehandler, 3, &prvhnd);\n+    }\n+#endif\n+\n   __gnat_handler_installed = 1;\n }\n \n+/* __gnat_adjust_context_for_raise for alpha - see comments along with the\n+   default version later in this file.  */\n+\n+#if defined (IN_RTS) && defined (__alpha__)\n+\n+#include <vms/chfctxdef.h>\n+#include <vms/chfdef.h>\n+\n+#define HAVE_GNAT_ADJUST_CONTEXT_FOR_RAISE\n+\n+void\n+__gnat_adjust_context_for_raise (int signo ATTRIBUTE_UNUSED, void *ucontext)\n+{\n+  /* Add one to the address of the instruction signaling the condition,\n+     located in the sigargs array.  */\n+\n+  CHF$SIGNAL_ARRAY * sigargs = (CHF$SIGNAL_ARRAY *) ucontext;\n+\n+  int vcount = sigargs->chf$is_sig_args;\n+  int * pc_slot = & (&sigargs->chf$l_sig_name)[vcount-2];\n+\n+  (*pc_slot) ++;\n+}\n+\n+#endif\n+\n /*******************/\n /* FreeBSD Section */\n /*******************/"}, {"sha": "5e4d0cb6fd444ce55552b7842b87c1ac6ffc952e", "filename": "gcc/ada/raise.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c351f04f4026e765c15fcb5a74c809573dc666a/gcc%2Fada%2Fraise.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c351f04f4026e765c15fcb5a74c809573dc666a/gcc%2Fada%2Fraise.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise.h?ref=2c351f04f4026e765c15fcb5a74c809573dc666a", "patch": "@@ -67,7 +67,7 @@ extern void set_gnat_exit_status\t(int);\n extern void __gnat_set_globals\t\t(int, int,\n \t\t\t\t\t\t char, char, char, char,\n \t\t\t\t\t\t char *, char *,\n-\t\t\t\t\t\t int, int, int, int, int);\n+\t\t\t\t\t\t int, int, int, int, int, int);\n extern void __gnat_initialize\t\t(void *);\n extern void __gnat_init_float\t\t(void);\n extern void __gnat_install_handler\t(void);"}]}