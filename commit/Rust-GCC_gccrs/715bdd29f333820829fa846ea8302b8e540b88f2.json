{"sha": "715bdd29f333820829fa846ea8302b8e540b88f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE1YmRkMjlmMzMzODIwODI5ZmE4NDZlYTgzMDJiOGU1NDBiODhmMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-17T02:33:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-17T02:33:41Z"}, "message": "varasm.c (named_section_flags): Remove align parameter.\n\n        * varasm.c (named_section_flags): Remove align parameter.\n        * varasm.c, dwarf2out.c: Update all callers.\n        * output.h: Update prototypes.\n\n        * target.h (target.asm_out.named_section): Remove align parameter.\n        * varasm.c, config/a29k/a29k.c, config/alpha/alpha.c,\n        config/arm/arm.c, config/c4x/c4x.c, config/h8300/h8300.c,\n        config/i386/i386.c, config/i386/winnt.c, config/m68k/m68k.c,\n        config/mcore/mcore.c, config/mips/mips.c, config/rs6000/rs6000.c,\n        config/sh/sh.c, config/sparc/sparc.c: Update implementations to match.\n\n        * varasm.c (in_named_entry_eq, in_named_entry_hash): New.\n        (get_named_section_flags, set_named_section_flags): New.\n        (named_section_flags): Use them.\n        (named_section): Do decl vs section flags check here...\n        (default_section_type_flags): ... not here.\n        (init_varasm_once): Create in_named_htab.\n        (resolve_unique_section): Mark reloc unused.\n\nFrom-SVN: r44953", "tree": {"sha": "0a6ccfe97cf32b2d424aaa6d485705e909e9d189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a6ccfe97cf32b2d424aaa6d485705e909e9d189"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/715bdd29f333820829fa846ea8302b8e540b88f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715bdd29f333820829fa846ea8302b8e540b88f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/715bdd29f333820829fa846ea8302b8e540b88f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715bdd29f333820829fa846ea8302b8e540b88f2/comments", "author": null, "committer": null, "parents": [{"sha": "09e07be6d7e6d66b2d48fc20516ce0385cfb268e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09e07be6d7e6d66b2d48fc20516ce0385cfb268e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09e07be6d7e6d66b2d48fc20516ce0385cfb268e"}], "stats": {"total": 338, "additions": 191, "deletions": 147}, "files": [{"sha": "87a50a6fc393eb05f9d7e834121a41d8df63d5e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -1,3 +1,24 @@\n+2001-08-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* varasm.c (named_section_flags): Remove align parameter.\n+\t* varasm.c, dwarf2out.c: Update all callers.\n+\t* output.h: Update prototypes.\n+\n+\t* target.h (target.asm_out.named_section): Remove align parameter.\n+\t* varasm.c, config/a29k/a29k.c, config/alpha/alpha.c, \n+\tconfig/arm/arm.c, config/c4x/c4x.c, config/h8300/h8300.c,\n+\tconfig/i386/i386.c, config/i386/winnt.c, config/m68k/m68k.c,\n+\tconfig/mcore/mcore.c, config/mips/mips.c, config/rs6000/rs6000.c,\n+\tconfig/sh/sh.c, config/sparc/sparc.c: Update implementations to match.\n+\n+\t* varasm.c (in_named_entry_eq, in_named_entry_hash): New.\n+\t(get_named_section_flags, set_named_section_flags): New.\n+\t(named_section_flags): Use them.\n+\t(named_section): Do decl vs section flags check here...\n+\t(default_section_type_flags): ... not here.\n+\t(init_varasm_once): Create in_named_htab.\n+\t(resolve_unique_section): Mark reloc unused.\n+\n 2001-08-16  Richard Henderson  <rth@redhat.com>\n \n \t* varasm.c (force_const_mem): Keep pool alignment in bits."}, {"sha": "420e2f51dda3058b9dd36be25e3000c97f7a4460", "filename": "gcc/config/a29k/a29k.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fa29k%2Fa29k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fa29k%2Fa29k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -48,8 +48,7 @@ static void compute_regstack_size PARAMS ((void));\n static void check_epilogue_internal_label PARAMS ((FILE *));\n static void output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void a29k_asm_named_section PARAMS ((const char *, unsigned int,\n-\t\t\t\t\t    unsigned int));\n+static void a29k_asm_named_section PARAMS ((const char *, unsigned int));\n \n #define min(A,B)\t((A) < (B) ? (A) : (B))\n \n@@ -1572,10 +1571,9 @@ output_function_epilogue (file, size)\n }\n \n static void\n-a29k_asm_named_section (name, flags, align)\n+a29k_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags ATTRIBUTE_UNUSED;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n   /* ??? Is it really correct to mark all sections as \"bss\"?  */\n   fprintf (asm_out_file, \"\\t.sect %s, bss\\n\\t.use %s\\n\", name, name);"}, {"sha": "741a5ee97a48b7b759c07e1f26dcb4dc888a37b2", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -151,8 +151,7 @@ static void alpha_output_function_end_prologue\n #if TARGET_ABI_OPEN_VMS\n static int vms_valid_decl_attribute_p PARAMS ((tree, tree, tree, tree));\n static unsigned int vms_section_type_flags PARAMS ((tree, const char *, int));\n-static void vms_asm_named_section PARAMS ((const char *, unsigned int,\n-\t\t\t\t\t   unsigned int));\n+static void vms_asm_named_section PARAMS ((const char *, unsigned int));\n static void vms_asm_out_constructor PARAMS ((rtx, int));\n static void vms_asm_out_destructor PARAMS ((rtx, int));\n # undef TARGET_VALID_DECL_ATTRIBUTE\n@@ -6568,10 +6567,9 @@ vms_section_type_flags (decl, name, reloc)\n    the section; 0 if the default should be used.  */\n \n static void\n-vms_asm_named_section (name, flags, align)\n+vms_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n-     unsigned int align;\n {\n   const char *flag_str = \"\";\n \n@@ -6581,11 +6579,6 @@ vms_asm_named_section (name, flags, align)\n     flag_str = \",NOWRT\";\n \n   fprintf (asm_out_file, \".section\\t%s%s\\n\", name, flag_str);\n-\n-  /* ??? An indicated alignment of 1 byte is only used by dwarf,\n-     and for that we turn off auto-alignment.  */\n-  if (align == 1)\n-    ASM_OUTPUT_ALIGN (asm_out_file, 0);\n }\n \n /* Record an element in the table of global constructors.  SYMBOL is"}, {"sha": "13669b75440c4017258ad833bae77bb6c4472664", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -116,7 +116,6 @@ static void\t thumb_output_function_prologue PARAMS ((FILE *,\n static int\t arm_comp_type_attributes\tPARAMS ((tree, tree));\n static void\t arm_set_default_type_attributes\tPARAMS ((tree));\n static void\t arm_elf_asm_named_section\tPARAMS ((const char *,\n-\t\t\t\t\t\t\t unsigned int,\n \t\t\t\t\t\t\t unsigned int));\n #undef Hint\n #undef Mmode\n@@ -10829,10 +10828,9 @@ aof_dump_imports (f)\n    used before the section type.  */\n \n static void\n-arm_elf_asm_named_section (name, flags, align)\n+arm_elf_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n   char flagchars[8], *f = flagchars;\n   const char *type;"}, {"sha": "71d4c5c9394b97dfebabe2d8cbc55bdeec39ef5d", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -193,8 +193,7 @@ static int c4x_rptb_valid_p PARAMS ((rtx, rtx));\n static int c4x_label_ref_used_p PARAMS ((rtx, rtx));\n static int c4x_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n static void c4x_insert_attributes PARAMS ((tree, tree *));\n-static void c4x_asm_named_section PARAMS ((const char *, unsigned int,\n-\t\t\t\t\t   unsigned int));\n+static void c4x_asm_named_section PARAMS ((const char *, unsigned int));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_VALID_TYPE_ATTRIBUTE\n@@ -5183,10 +5182,9 @@ c4x_expand_builtin (exp, target, subtarget, mode, ignore)\n }\n \n static void\n-c4x_asm_named_section (name, flags, align)\n+c4x_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags ATTRIBUTE_UNUSED;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n   fprintf (asm_out_file, \"\\t.sect\\t\\\"%s\\\"\\n\", name);\n }"}, {"sha": "61c255f9cf7e7e7ccc2e4d60e48ba48289e17ce6", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -56,8 +56,7 @@ static const char *cond_string PARAMS ((enum rtx_code));\n static int h8300_valid_decl_attribute PARAMS ((tree, tree, tree, tree));\n static void h8300_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void h8300_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void h8300_asm_named_section PARAMS ((const char *, unsigned int,\n-\t\t\t\t\t     unsigned int));\n+static void h8300_asm_named_section PARAMS ((const char *, unsigned int));\n \n /* CPU_TYPE, says what cpu we're compiling for.  */\n int cpu_type;\n@@ -3329,10 +3328,9 @@ h8300_adjust_insn_length (insn, length)\n }\n \n static void\n-h8300_asm_named_section (name, flags, align)\n+h8300_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags ATTRIBUTE_UNUSED;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n   /* ??? Perhaps we should be using default_coff_asm_named_section.  */\n   fprintf (asm_out_file, \"\\t.section %s\\n\", name);"}, {"sha": "e952e61b08f2a08f0625f8e22648748dff12b1d7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -612,8 +612,7 @@ static int ix86_comp_type_attributes PARAMS ((tree, tree));\n static void ix86_svr3_asm_out_constructor PARAMS ((rtx, int));\n #endif\n #if defined(TARGET_ELF) && defined(TARGET_COFF)\n-static void sco_asm_named_section PARAMS ((const char *, unsigned int,\n-\t\t\t\t\t   unsigned int));\n+static void sco_asm_named_section PARAMS ((const char *, unsigned int));\n static void sco_asm_out_constructor PARAMS ((rtx, int));\n #endif\n \f\n@@ -2342,7 +2341,7 @@ ix86_asm_file_end (file)\n \t\t\t      error_mark_node);\n       DECL_ONE_ONLY (decl) = 1;\n       UNIQUE_SECTION (decl, 0);\n-      named_section (decl, NULL, 0);\n+      named_section (decl, NULL);\n     }\n   else\n #else\n@@ -10839,15 +10838,14 @@ ix86_svr3_asm_out_constructor (symbol, priority)\n \n #if defined(TARGET_ELF) && defined(TARGET_COFF)\n static void\n-sco_asm_named_section (name, flags, align)\n+sco_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n-     unsigned int align;\n {\n   if (TARGET_ELF)\n-    default_elf_asm_named_section (name, flags, align);\n+    default_elf_asm_named_section (name, flags);\n   else\n-    default_coff_asm_named_section (name, flags, align);\n+    default_coff_asm_named_section (name, flags);\n }\n \n static void"}, {"sha": "d32224f238215b2bd0771dd3c97b907ab928ad29", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -523,10 +523,9 @@ i386_pe_section_type_flags (decl, name, reloc)\n }\n \n void\n-i386_pe_asm_named_section (name, flags, align)\n+i386_pe_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n   char flagchars[8], *f = flagchars;\n "}, {"sha": "3a832ffbc4c28139f07e65f1a4e0900175e65d23", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -61,8 +61,7 @@ static rtx find_addr_reg PARAMS ((rtx));\n static const char *singlemove_string PARAMS ((rtx *));\n static void m68k_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void m68k_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void m68k_coff_asm_named_section PARAMS ((const char *, unsigned int,\n-\t\t\t\t\t\t unsigned int));\n+static void m68k_coff_asm_named_section PARAMS ((const char *, unsigned int));\n #ifdef CTOR_LIST_BEGIN\n static void m68k_svr3_asm_out_constructor PARAMS ((rtx, int));\n #endif\n@@ -4218,10 +4217,9 @@ output_xorsi3 (operands)\n /* Output assembly to switch to section NAME with attribute FLAGS.  */\n \n static void\n-m68k_coff_asm_named_section (name, flags, align)\n+m68k_coff_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n   char flagchar;\n "}, {"sha": "742875e4f697a092aa6c34a117a9525f279f351b", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -133,7 +133,6 @@ static int        mcore_dllimport_p            PARAMS ((tree));\n static int        mcore_valid_decl_attribute   PARAMS ((tree, tree,\n \t\t\t\t\t\t\ttree, tree));\n static void\t  mcore_asm_named_section      PARAMS ((const char *,\n-\t\t\t\t\t\t\tunsigned int,\n \t\t\t\t\t\t\tunsigned int));\n \f\n /* Initialize the GCC target structure.  */\n@@ -3599,10 +3598,9 @@ mcore_naked_function_p ()\n }\n \n static void\n-mcore_asm_named_section (name, flags, align)\n+mcore_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags ATTRIBUTE_UNUSED;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n   fprintf (asm_out_file, \"\\t.section %s\\n\", name);\n }"}, {"sha": "5e8516059b73f5c16f48ffe409ef0fa15a086201", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -116,7 +116,6 @@ static void mips_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void mips_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static enum processor_type mips_parse_cpu       PARAMS ((const char *));\n static void iris6_asm_named_section\t\tPARAMS ((const char *,\n-\t\t\t\t\t\t\t unsigned int,\n \t\t\t\t\t\t\t unsigned int));\n /* Global variables for machine-dependent things.  */\n \n@@ -9754,10 +9753,9 @@ mips_parse_cpu (cpu_string)\n /* Output assembly to switch to section NAME with attribute FLAGS.  */\n \n static void\n-iris6_asm_named_section (name, flags, align)\n+iris6_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n-     unsigned int align;\n {\n   unsigned int sh_type, sh_flags, sh_entsize;\n \n@@ -9785,16 +9783,8 @@ iris6_asm_named_section (name, flags, align)\n   else\n     sh_entsize = 0;\n \n-  if (align == 0)\n-    {\n-      if (flags & SECTION_CODE)\n-\talign = 4;\n-      else\n-\talign = 8;\n-    }\n-\n   fprintf (asm_out_file, \"\\t.section %s,%u,%u,%u,%u\\n\",\n-\t   name, sh_type, sh_flags, sh_entsize, align);\n+\t   name, sh_type, sh_flags, sh_entsize, 0);\n }\n \n /* Cover function for UNIQUE_SECTION.  */"}, {"sha": "838315ea7dc15873c02fe4f70f21ecf688b1b2d1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -139,8 +139,7 @@ static void rs6000_elf_asm_out_constructor PARAMS ((rtx, int));\n static void rs6000_elf_asm_out_destructor PARAMS ((rtx, int));\n #endif\n #ifdef OBJECT_FORMAT_COFF\n-static void xcoff_asm_named_section PARAMS ((const char *, unsigned int,\n-\t\t\t\t\t     unsigned int));\n+static void xcoff_asm_named_section PARAMS ((const char *, unsigned int));\n #endif\n \f\n /* Default register names.  */\n@@ -8736,7 +8735,8 @@ rs6000_elf_asm_out_constructor (symbol, priority)\n       section = buf;\n     }\n \n-  named_section_flags (section, SECTION_WRITE, POINTER_SIZE / BITS_PER_UNIT);\n+  named_section_flags (section, SECTION_WRITE);\n+  assemble_align (POINTER_SIZE);\n \n   if (TARGET_RELOCATABLE)\n     {\n@@ -8766,7 +8766,8 @@ rs6000_elf_asm_out_destructor (symbol, priority)\n       section = buf;\n     }\n \n-  named_section_flags (section, SECTION_WRITE, POINTER_SIZE / BITS_PER_UNIT);\n+  named_section_flags (section, SECTION_WRITE);\n+  assemble_align (POINTER_SIZE);\n \n   if (TARGET_RELOCATABLE)\n     {\n@@ -8781,10 +8782,9 @@ rs6000_elf_asm_out_destructor (symbol, priority)\n \n #ifdef OBJECT_FORMAT_COFF\n static void\n-xcoff_asm_named_section (name, flags, align)\n+xcoff_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags ATTRIBUTE_UNUSED;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n   fprintf (asm_out_file, \"\\t.csect %s\\n\", name);\n }"}, {"sha": "f8d77d416f3284b0aa5183ffac5cc96b69676244", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -157,8 +157,7 @@ static rtx mark_constant_pool_use PARAMS ((rtx));\n static int sh_valid_decl_attribute PARAMS ((tree, tree, tree, tree));\n static void sh_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void sh_insert_attributes PARAMS ((tree, tree *));\n-static void sh_asm_named_section PARAMS ((const char *, unsigned int,\n-\t\t\t\t\t  unsigned int));\n+static void sh_asm_named_section PARAMS ((const char *, unsigned int));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_VALID_DECL_ATTRIBUTE\n@@ -5560,10 +5559,9 @@ sh_can_redirect_branch (branch1, branch2)\n }\n \n static void\n-sh_asm_named_section (name, flags, align)\n+sh_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags ATTRIBUTE_UNUSED;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n   /* ??? Perhaps we should be using default_coff_asm_named_section.  */\n   fprintf (asm_out_file, \"\\t.section %s\\n\", name);"}, {"sha": "b0d9ade6ea07e7d59159157d6fcd66ca0eb599b4", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -167,8 +167,7 @@ static void sparc_nonflat_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT,\n \t\t\t\t\t\t     int));\n static void sparc_nonflat_function_prologue PARAMS ((FILE *, HOST_WIDE_INT,\n \t\t\t\t\t\t     int));\n-static void sparc_elf_asm_named_section PARAMS ((const char *, unsigned int,\n-\t\t\t\t\t\t unsigned int));\n+static void sparc_elf_asm_named_section PARAMS ((const char *, unsigned int));\n \f\n /* Option handling.  */\n \n@@ -8695,10 +8694,9 @@ sparc_add_gc_roots ()\n }\n \n static void\n-sparc_elf_asm_named_section (name, flags, align)\n+sparc_elf_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n   fprintf (asm_out_file, \"\\t.section\\t\\\"%s\\\"\", name);\n "}, {"sha": "39861bedfe3d5f7572c237026ed920a22ed377e1", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -1738,8 +1738,7 @@ output_call_frame_info (for_eh)\n   if (for_eh)\n     {\n #ifdef EH_FRAME_SECTION_NAME\n-      named_section_flags (EH_FRAME_SECTION_NAME, SECTION_WRITE,\n-\t\t\t   DWARF_OFFSET_SIZE);\n+      named_section_flags (EH_FRAME_SECTION_NAME, SECTION_WRITE);\n #else\n       tree label = get_file_function_name ('F');\n \n@@ -1751,7 +1750,7 @@ output_call_frame_info (for_eh)\n       assemble_label (\"__FRAME_BEGIN__\");\n     }\n   else\n-    named_section_flags (DEBUG_FRAME_SECTION, SECTION_DEBUG, 1);\n+    named_section_flags (DEBUG_FRAME_SECTION, SECTION_DEBUG);\n \n   /* Output the CIE.  */\n   ASM_GENERATE_INTERNAL_LABEL (l1, CIE_AFTER_SIZE_LABEL, for_eh);\n@@ -6322,7 +6321,7 @@ output_comp_unit (die)\n     secname = (const char *) DEBUG_INFO_SECTION;\n \n   /* Output debugging information.  */\n-  named_section_flags (secname, SECTION_DEBUG, 1);\n+  named_section_flags (secname, SECTION_DEBUG);\n   output_compilation_unit_header ();\n   output_die (die);\n \n@@ -11560,7 +11559,7 @@ dwarf2out_start_source_file (lineno, filename)\n     }\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG, 1);\n+      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG);\n       dw2_asm_output_data (1, DW_MACINFO_start_file, \"Start new file\");\n       dw2_asm_output_data_uleb128 (lineno, \"Included from line number %d\",\n \t\t\t\t   lineno);\n@@ -11582,7 +11581,7 @@ dwarf2out_end_source_file (lineno)\n     }\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG, 1);\n+      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG);\n       dw2_asm_output_data (1, DW_MACINFO_end_file, \"End file\");\n     }\n }\n@@ -11604,7 +11603,7 @@ dwarf2out_define (lineno, buffer)\n     }\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG, 1);\n+      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG);\n       dw2_asm_output_data (1, DW_MACINFO_define, \"Define macro\");\n       dw2_asm_output_data_uleb128 (lineno, \"At line number %d\", lineno);\n       dw2_asm_output_nstring (buffer, -1, \"The macro\");\n@@ -11622,7 +11621,7 @@ dwarf2out_undef (lineno, buffer)\n {\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG, 1);\n+      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG);\n       dw2_asm_output_data (1, DW_MACINFO_undef, \"Undefine macro\");\n       dw2_asm_output_data_uleb128 (lineno, \"At line number %d\", lineno);\n       dw2_asm_output_nstring (buffer, -1, \"The macro\");\n@@ -11695,17 +11694,17 @@ dwarf2out_init (main_input_filename)\n   ASM_GENERATE_INTERNAL_LABEL (debug_line_section_label,\n \t\t\t       DEBUG_LINE_SECTION_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (loc_section_label, DEBUG_LOC_SECTION_LABEL, 0);\n-  named_section_flags (DEBUG_LOC_SECTION, SECTION_DEBUG, 1);\n+  named_section_flags (DEBUG_LOC_SECTION, SECTION_DEBUG);\n   ASM_OUTPUT_LABEL (asm_out_file, loc_section_label);\n-  named_section_flags (DEBUG_ABBREV_SECTION, SECTION_DEBUG, 1);\n+  named_section_flags (DEBUG_ABBREV_SECTION, SECTION_DEBUG);\n   ASM_OUTPUT_LABEL (asm_out_file, abbrev_section_label);\n-  named_section_flags (DEBUG_INFO_SECTION, SECTION_DEBUG, 1);\n+  named_section_flags (DEBUG_INFO_SECTION, SECTION_DEBUG);\n   ASM_OUTPUT_LABEL (asm_out_file, debug_info_section_label);\n-  named_section_flags (DEBUG_LINE_SECTION, SECTION_DEBUG, 1);\n+  named_section_flags (DEBUG_LINE_SECTION, SECTION_DEBUG);\n   ASM_OUTPUT_LABEL (asm_out_file, debug_line_section_label);\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     {\n-      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG, 1);\n+      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG);\n       ASM_GENERATE_INTERNAL_LABEL (macinfo_section_label,\n \t\t\t\t   DEBUG_MACINFO_SECTION_LABEL, 0);\n       ASM_OUTPUT_LABEL (asm_out_file, macinfo_section_label);\n@@ -11782,7 +11781,7 @@ dwarf2out_finish (input_filename)\n      examining the file.  */\n   if (! DWARF2_ASM_LINE_DEBUG_INFO)\n     {\n-      named_section_flags (DEBUG_LINE_SECTION, SECTION_DEBUG, 1);\n+      named_section_flags (DEBUG_LINE_SECTION, SECTION_DEBUG);\n       output_line_info ();\n     }\n \n@@ -11813,13 +11812,13 @@ dwarf2out_finish (input_filename)\n   output_comp_unit (comp_unit_die);\n \n   /* Output the abbreviation table.  */\n-  named_section_flags (DEBUG_ABBREV_SECTION, SECTION_DEBUG, 1);\n+  named_section_flags (DEBUG_ABBREV_SECTION, SECTION_DEBUG);\n   output_abbrev_section ();\n \n   if (pubname_table_in_use)\n     {\n       /* Output public names table.  */\n-      named_section_flags (DEBUG_PUBNAMES_SECTION, SECTION_DEBUG, 1);\n+      named_section_flags (DEBUG_PUBNAMES_SECTION, SECTION_DEBUG);\n       output_pubnames ();\n     }\n \n@@ -11828,30 +11827,30 @@ dwarf2out_finish (input_filename)\n   if (fde_table_in_use)\n     {\n       /* Output the address range information.  */\n-      named_section_flags (DEBUG_ARANGES_SECTION, SECTION_DEBUG, 1);\n+      named_section_flags (DEBUG_ARANGES_SECTION, SECTION_DEBUG);\n       output_aranges ();\n     }\n \n   /* Output location list section if necessary.  */\n   if (have_location_lists)\n     {\n       /* Output the location lists info.  */\n-      named_section_flags (DEBUG_LOC_SECTION, SECTION_DEBUG, 1);\n+      named_section_flags (DEBUG_LOC_SECTION, SECTION_DEBUG);\n       output_location_lists (die);\n       have_location_lists = 0;\n     }\n \n   /* Output ranges section if necessary.  */\n   if (ranges_table_in_use)\n     {\n-      named_section_flags (DEBUG_RANGES_SECTION, SECTION_DEBUG, 1);\n+      named_section_flags (DEBUG_RANGES_SECTION, SECTION_DEBUG);\n       output_ranges ();\n     }\n \n   /* Have to end the primary source file.  */\n   if (debug_info_level >= DINFO_LEVEL_VERBOSE)\n     { \n-      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG, 1);\n+      named_section_flags (DEBUG_MACINFO_SECTION, SECTION_DEBUG);\n       dw2_asm_output_data (1, DW_MACINFO_end_file, \"End file\");\n     }\n }"}, {"sha": "0f68e5ca75b2904c84d08a91dc77fa1b3973a0f1", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -1889,8 +1889,8 @@ emit_register_classes ()\n     {\n #ifdef JCR_SECTION_NAME\n       tree t;\n-      named_section_flags (JCR_SECTION_NAME, SECTION_WRITE,\n-\t\t\t   POINTER_SIZE / BITS_PER_UNIT);\n+      named_section_flags (JCR_SECTION_NAME, SECTION_WRITE);\n+      assemble_align (POINTER_SIZE);\n       for (t = registered_class; t; t = TREE_CHAIN (t))\n \tassemble_integer (XEXP (DECL_RTL (t), 0),\n \t\t\t  POINTER_SIZE / BITS_PER_UNIT, 1);"}, {"sha": "6b8ffbcd37b3772cba438969e2d744d2c73d9cfc", "filename": "gcc/output.h", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -454,21 +454,19 @@ extern void no_asm_to_stream PARAMS ((FILE *));\n #define SECTION_FORGET\t   64\t/* forget that we've entered the section */\n #define SECTION_MACH_DEP  128\t/* subsequent bits reserved for target */\n \n-extern void named_section_flags\t\tPARAMS ((const char *, unsigned int,\n-\t\t\t\t\t\t unsigned int));\n+extern unsigned int get_named_section_flags PARAMS ((const char *));\n+extern bool set_named_section_flags\tPARAMS ((const char *, unsigned int));\n+extern void named_section_flags\t\tPARAMS ((const char *, unsigned int));\n \n union tree_node;\n extern unsigned int default_section_type_flags PARAMS ((union tree_node *,\n \t\t\t\t\t\t\tconst char *, int));\n \n-extern void default_no_named_section PARAMS ((const char *, unsigned int,\n-\t\t\t\t\t      unsigned int));\n-extern void default_elf_asm_named_section PARAMS ((const char *, unsigned int,\n-\t\t\t\t\t      unsigned int));\n-extern void default_coff_asm_named_section PARAMS ((const char *, unsigned int,\n-\t\t\t\t\t      unsigned int));\n-extern void default_pe_asm_named_section PARAMS ((const char *, unsigned int,\n-\t\t\t\t\t      unsigned int));\n+extern void default_no_named_section PARAMS ((const char *, unsigned int));\n+extern void default_elf_asm_named_section PARAMS ((const char *, unsigned int));\n+extern void default_coff_asm_named_section PARAMS ((const char *,\n+\t\t\t\t\t\t    unsigned int));\n+extern void default_pe_asm_named_section PARAMS ((const char *, unsigned int));\n \n extern void default_stabs_asm_out_destructor PARAMS ((struct rtx_def *, int));\n extern void default_named_section_asm_out_destructor PARAMS ((struct rtx_def *,"}, {"sha": "bc839c5c8293bf2e1a415c1add220b6cb6a5e3f3", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -67,11 +67,9 @@ struct gcc_target\n     /* Output the assembler code for function exit.  */\n     void (* function_epilogue) PARAMS ((FILE *, HOST_WIDE_INT));\n \n-    /* Switch to an arbitrary section NAME with attributes as specified\n-       by FLAGS.  ALIGN specifies any known alignment requirements for\n-       the section; 0 if the default should be used.  */\n-    void (* named_section) PARAMS ((const char *, unsigned int,\n-\t\t\t\t    unsigned int));\n+    /* Switch to an arbitrary section NAME with attributes as\n+       specified by FLAGS.  */\n+    void (* named_section) PARAMS ((const char *, unsigned int));\n \n     /* Output a constructor for a symbol with a given priority.  */\n     void (* constructor) PARAMS ((struct rtx_def *, int));"}, {"sha": "4e39a8ad08d8d1812eb9a3cf229e60e59b902711", "filename": "gcc/varasm.c", "status": "modified", "additions": 108, "deletions": 44, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/715bdd29f333820829fa846ea8302b8e540b88f2/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=715bdd29f333820829fa846ea8302b8e540b88f2", "patch": "@@ -165,6 +165,8 @@ static void output_constructor\t\tPARAMS ((tree, int));\n #ifdef ASM_WEAKEN_LABEL\n static void remove_from_pending_weak_list\tPARAMS ((const char *));\n #endif\n+static int in_named_entry_eq\t\tPARAMS ((const PTR, const PTR));\n+static hashval_t in_named_entry_hash\tPARAMS ((const PTR));\n #ifdef ASM_OUTPUT_BSS\n static void asm_output_bss\t\tPARAMS ((FILE *, tree, const char *, int, int));\n #endif\n@@ -209,6 +211,16 @@ static enum in_section { no_section, in_text, in_data, in_named\n /* Text of section name when in_section == in_named.  */\n static const char *in_named_name;\n \n+/* Hash table of flags that have been used for a particular named section.  */\n+\n+struct in_named_entry\n+{\n+  const char *name;\n+  unsigned int flags;\n+};\n+\n+static htab_t in_named_htab;\n+\n /* Define functions like text_section for any extra sections.  */\n #ifdef EXTRA_SECTION_FUNCTIONS\n EXTRA_SECTION_FUNCTIONS\n@@ -286,17 +298,86 @@ in_data_section ()\n   return in_section == in_data;\n }\n \n+/* Helper routines for maintaining in_named_htab.  */\n+\n+static int\n+in_named_entry_eq (p1, p2)\n+     const PTR p1;\n+     const PTR p2;\n+{\n+  const struct in_named_entry *old = p1;\n+  const char *new = p2;\n+\n+  return strcmp (old->name, new) == 0;\n+}\n+\n+static hashval_t\n+in_named_entry_hash (p)\n+     const PTR p;\n+{\n+  const struct in_named_entry *old = p;\n+  return htab_hash_string (old->name);\n+}\n+\n+/* If SECTION has been seen before as a named section, return the flags\n+   that were used.  Otherwise, return 0.  Note, that 0 is a perfectly valid\n+   set of flags for a section to have, so 0 does not mean that the section\n+   has not been seen.  */\n+\n+unsigned int\n+get_named_section_flags (section)\n+     const char *section;\n+{\n+  struct in_named_entry **slot;\n+\n+  slot = (struct in_named_entry**)\n+    htab_find_slot_with_hash (in_named_htab, section,\n+\t\t\t      htab_hash_string (section), NO_INSERT);\n+\n+  return slot ? (*slot)->flags : 0;\n+}\n+\n+/* Record FLAGS for SECTION.  If SECTION was previously recorded with a\n+   different set of flags, return false.  */\n+\n+bool\n+set_named_section_flags (section, flags)\n+     const char *section;\n+     unsigned int flags;\n+{\n+  struct in_named_entry **slot, *entry;\n+\n+  slot = (struct in_named_entry**)\n+    htab_find_slot_with_hash (in_named_htab, section,\n+\t\t\t      htab_hash_string (section), INSERT);\n+  entry = *slot;\n+\n+  if (!entry)\n+    {\n+      entry = (struct in_named_entry *) xmalloc (sizeof (*entry));\n+      *slot = entry;\n+      entry->name = ggc_strdup (section);\n+      entry->flags = flags;\n+    }\n+  else if (entry->flags != flags)\n+    return false;\n+\n+  return true;\n+}\n+\n /* Tell assembler to change to section NAME with attributes FLAGS.  */\n \n void\n-named_section_flags (name, flags, align)\n+named_section_flags (name, flags)\n      const char *name;\n      unsigned int flags;\n-     unsigned int align;\n {\n-  if (in_section != in_named || strcmp (name, in_named_name))\n+  if (in_section != in_named || strcmp (name, in_named_name) != 0)\n     {\n-      (* targetm.asm_out.named_section) (name, flags, align);\n+      if (! set_named_section_flags (name, flags))\n+\tabort ();\n+\n+      (* targetm.asm_out.named_section) (name, flags);\n \n       if (flags & SECTION_FORGET)\n \tin_section = no_section;\n@@ -327,15 +408,24 @@ named_section (decl, name, reloc)\n     name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n \n   flags = (* targetm.section_type_flags) (decl, name, reloc);\n-  named_section_flags (name, flags, 0);\n+\n+  /* Sanity check user variables for flag changes.  Non-user\n+     section flag changes will abort in named_section_flags.  */\n+  if (decl && ! set_named_section_flags (name, flags))\n+    {\n+      error_with_decl (decl, \"%s causes a section type conflict\");\n+      flags = get_named_section_flags (name);\n+    }\n+\n+  named_section_flags (name, flags);\n }\n \n /* If required, set DECL_SECTION_NAME to a unique name.  */\n \n static void\n resolve_unique_section (decl, reloc)\n      tree decl;\n-     int reloc;\n+     int reloc ATTRIBUTE_UNUSED;\n {\n   if (DECL_SECTION_NAME (decl) == NULL_TREE\n       && (flag_function_sections\n@@ -855,7 +945,8 @@ default_named_section_asm_out_destructor (symbol, priority)\n       section = buf;\n     }\n \n-  named_section_flags (section, SECTION_WRITE, POINTER_SIZE / BITS_PER_UNIT);\n+  named_section_flags (section, SECTION_WRITE);\n+  assemble_align (POINTER_SIZE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n }\n \n@@ -915,7 +1006,7 @@ default_named_section_asm_out_constructor (symbol, priority)\n       section = buf;\n     }\n \n-  named_section_flags (section, SECTION_WRITE, POINTER_SIZE / BITS_PER_UNIT);\n+  named_section_flags (section, SECTION_WRITE);\n   assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, 1);\n }\n \n@@ -4820,6 +4911,9 @@ init_varasm_once ()\n {\n   const_str_htab = htab_create (128, const_str_htab_hash, const_str_htab_eq,\n   \t\t\t\tconst_str_htab_del);\n+  in_named_htab = htab_create (31, in_named_entry_hash,\n+\t\t\t       in_named_entry_eq, NULL);\n+\n   ggc_add_root (const_hash_table, MAX_HASH_TABLE, sizeof const_hash_table[0],\n \t\tmark_const_hash_entry);\n   ggc_add_root (&const_str_htab, 1, sizeof const_str_htab,\n@@ -4831,28 +4925,15 @@ init_varasm_once ()\n    might contain runtime relocations.\n \n    We make the section read-only and executable for a function decl,\n-   read-only for a const data decl, and writable for a non-const data decl.\n-\n-   If the section has already been defined, to not allow it to have\n-   different attributes, as (1) this is ambiguous since we're not seeing\n-   all the declarations up front and (2) some assemblers (e.g. SVR4)\n-   do not recoginize section redefinitions.  */\n+   read-only for a const data decl, and writable for a non-const data decl.  */\n \n unsigned int\n default_section_type_flags (decl, name, reloc)\n      tree decl;\n      const char *name;\n      int reloc;\n {\n-  static htab_t htab;\n   unsigned int flags;\n-  unsigned int **slot;\n-\n-  /* The names we put in the hashtable will always be the unique\n-     versions gived to us by the stringtable, so we can just use\n-     their addresses as the keys.  */\n-  if (!htab)\n-    htab = htab_create (31, htab_hash_pointer, htab_eq_pointer, NULL);\n \n   if (decl && TREE_CODE (decl) == FUNCTION_DECL)\n     flags = SECTION_CODE;\n@@ -4872,41 +4953,26 @@ default_section_type_flags (decl, name, reloc)\n       || strncmp (name, \".gnu.linkonce.sb.\", 17) == 0)\n     flags |= SECTION_BSS;\n \n-  /* See if we already have an entry for this section.  */\n-  slot = (unsigned int **) htab_find_slot (htab, name, INSERT);\n-  if (!*slot)\n-    {\n-      *slot = (unsigned int *) xmalloc (sizeof (unsigned int));\n-      **slot = flags;\n-    }\n-  else\n-    {\n-      if (decl && **slot != flags)\n-\terror_with_decl (decl, \"%s causes a section type conflict\");\n-    }\n-\n   return flags;\n }\n \n /* Output assembly to switch to section NAME with attribute FLAGS.\n    Four variants for common object file formats.  */\n \n void\n-default_no_named_section (name, flags, align)\n+default_no_named_section (name, flags)\n      const char *name ATTRIBUTE_UNUSED;\n      unsigned int flags ATTRIBUTE_UNUSED;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n   /* Some object formats don't support named sections at all.  The\n      front-end should already have flagged this as an error.  */\n   abort ();\n }\n \n void\n-default_elf_asm_named_section (name, flags, align)\n+default_elf_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n   char flagchars[8], *f = flagchars;\n   const char *type;\n@@ -4931,10 +4997,9 @@ default_elf_asm_named_section (name, flags, align)\n }\n \n void\n-default_coff_asm_named_section (name, flags, align)\n+default_coff_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n   char flagchars[8], *f = flagchars;\n \n@@ -4948,12 +5013,11 @@ default_coff_asm_named_section (name, flags, align)\n }\n \n void\n-default_pe_asm_named_section (name, flags, align)\n+default_pe_asm_named_section (name, flags)\n      const char *name;\n      unsigned int flags;\n-     unsigned int align ATTRIBUTE_UNUSED;\n {\n-  default_coff_asm_named_section (name, flags, align);\n+  default_coff_asm_named_section (name, flags);\n \n   if (flags & SECTION_LINKONCE)\n     {"}]}