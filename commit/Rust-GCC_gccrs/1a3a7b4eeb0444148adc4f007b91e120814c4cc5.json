{"sha": "1a3a7b4eeb0444148adc4f007b91e120814c4cc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEzYTdiNGVlYjA0NDQxNDhhZGM0ZjAwN2I5MWUxMjA4MTRjNGNjNQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-05-01T00:10:10Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-05-01T00:10:10Z"}, "message": "Add gcc_rich_location::add_fixit_insert_formatted\n\nThis patch adds a support function to class gcc_rich_location\nto make it easier for fix-it hints to use idiomatic C/C++\nindentation, for use by the patch for PR c++/85523.\n\ngcc/ChangeLog:\n\tPR c++/85523\n\t* gcc-rich-location.c (blank_line_before_p): New function.\n\t(use_new_line): New function.\n\t(gcc_rich_location::add_fixit_insert_formatted): New function.\n\t* gcc-rich-location.h\n\t(gcc_rich_location::add_fixit_insert_formatted): New function.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/85523\n\t* gcc.dg/plugin/diagnostic-test-show-locus-generate-patch.c\n\t(test_add_fixit_insert_formatted_single_line): New function.\n\t(test_add_fixit_insert_formatted_multiline): New function.\n\tExtend expected output of generated patch to include fix-it hints\n\tfor these.\n\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c: Include\n\t\"gcc-rich-location.h\".  Add test coverage for\n\tgcc_rich_location::add_fixit_insert_formatted.\n\nFrom-SVN: r259783", "tree": {"sha": "ea1a9a931bb387718caee06b1c2785faf6296e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea1a9a931bb387718caee06b1c2785faf6296e9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a3a7b4eeb0444148adc4f007b91e120814c4cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a3a7b4eeb0444148adc4f007b91e120814c4cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a3a7b4eeb0444148adc4f007b91e120814c4cc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a3a7b4eeb0444148adc4f007b91e120814c4cc5/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47ae164c051c575234f4bef916f10346765d9565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ae164c051c575234f4bef916f10346765d9565", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ae164c051c575234f4bef916f10346765d9565"}], "stats": {"total": 224, "additions": 224, "deletions": 0}, "files": [{"sha": "60ca47c0ad087d492cf600397f3d3ed6299e57f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a3a7b4eeb0444148adc4f007b91e120814c4cc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a3a7b4eeb0444148adc4f007b91e120814c4cc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a3a7b4eeb0444148adc4f007b91e120814c4cc5", "patch": "@@ -1,3 +1,12 @@\n+2018-04-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/85523\n+\t* gcc-rich-location.c (blank_line_before_p): New function.\n+\t(use_new_line): New function.\n+\t(gcc_rich_location::add_fixit_insert_formatted): New function.\n+\t* gcc-rich-location.h\n+\t(gcc_rich_location::add_fixit_insert_formatted): New function.\n+\n 2018-04-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* selftest.c (assert_streq): Rename \"expected\" and \"actual\" to"}, {"sha": "0a0adf932c1dceafc3872e12420ffd60256df090", "filename": "gcc/gcc-rich-location.c", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a3a7b4eeb0444148adc4f007b91e120814c4cc5/gcc%2Fgcc-rich-location.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a3a7b4eeb0444148adc4f007b91e120814c4cc5/gcc%2Fgcc-rich-location.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-rich-location.c?ref=1a3a7b4eeb0444148adc4f007b91e120814c4cc5", "patch": "@@ -69,3 +69,114 @@ gcc_rich_location::add_fixit_misspelled_id (location_t misspelled_token_loc,\n \n   add_fixit_replace (misspelled_token_loc, IDENTIFIER_POINTER (hint_id));\n }\n+\n+/* Return true if there is nothing on LOC's line before LOC.  */\n+\n+static bool\n+blank_line_before_p (location_t loc)\n+{\n+  expanded_location exploc = expand_location (loc);\n+  char_span line = location_get_source_line (exploc.file, exploc.line);\n+  if (!line)\n+    return false;\n+  if (line.length () < (size_t)exploc.column)\n+    return false;\n+  /* Columns are 1-based.  */\n+  for (int column = 1; column < exploc.column; ++column)\n+    if (!ISSPACE (line[column - 1]))\n+      return false;\n+  return true;\n+}\n+\n+/* Subroutine of gcc_rich_location::add_fixit_insert_formatted.\n+   Return true if we should add the content on its own line,\n+   false otherwise.\n+   If true is returned then *OUT_START_OF_LINE is written to.  */\n+\n+static bool\n+use_new_line (location_t insertion_point, location_t indent,\n+\t      location_t *out_start_of_line)\n+{\n+  if (indent == UNKNOWN_LOCATION)\n+    return false;\n+  const line_map *indent_map = linemap_lookup (line_table, indent);\n+  if (linemap_macro_expansion_map_p (indent_map))\n+    return false;\n+\n+  if (!blank_line_before_p (insertion_point))\n+    return false;\n+\n+  /* Locate the start of the line containing INSERTION_POINT.  */\n+  const line_map *insertion_point_map\n+    = linemap_lookup (line_table, insertion_point);\n+  if (linemap_macro_expansion_map_p (insertion_point_map))\n+    return false;\n+  const line_map_ordinary *ordmap\n+    = linemap_check_ordinary (insertion_point_map);\n+  expanded_location exploc_insertion_point = expand_location (insertion_point);\n+  location_t start_of_line\n+    = linemap_position_for_line_and_column (line_table, ordmap,\n+\t\t\t\t\t    exploc_insertion_point.line, 1);\n+  *out_start_of_line = start_of_line;\n+  return true;\n+}\n+\n+/* Add a fix-it hint suggesting the insertion of CONTENT before\n+   INSERTION_POINT.\n+\n+   Attempt to handle formatting: if INSERTION_POINT is the first thing on\n+   its line, and INDENT is sufficiently sane, then add CONTENT on its own\n+   line, using the indentation of INDENT.\n+   Otherwise, add CONTENT directly before INSERTION_POINT.\n+\n+   For example, adding \"CONTENT;\" with the closing brace as the insertion\n+   point and \"INDENT;\" as the indentation point:\n+\n+   if ()\n+     {\n+       INDENT;\n+     }\n+\n+  would lead to:\n+\n+   if ()\n+     {\n+       INDENT;\n+       CONTENT;\n+     }\n+\n+  but adding it to:\n+\n+    if () {INDENT;}\n+\n+  would lead to:\n+\n+    if () {INDENT;CONTENT;}\n+*/\n+\n+void\n+gcc_rich_location::add_fixit_insert_formatted (const char *content,\n+\t\t\t\t\t       location_t insertion_point,\n+\t\t\t\t\t       location_t indent)\n+{\n+  location_t start_of_line;\n+  if (use_new_line (insertion_point, indent, &start_of_line))\n+    {\n+      /* Add CONTENT on its own line, using the indentation of INDENT.  */\n+\n+      /* Generate an insertion string, indenting by the amount INDENT\n+\t was indented.  */\n+      int indent_column = LOCATION_COLUMN (get_start (indent));\n+      pretty_printer tmp_pp;\n+      pretty_printer *pp = &tmp_pp;\n+      /* Columns are 1-based.  */\n+      for (int column = 1; column < indent_column; ++column)\n+\tpp_space (pp);\n+      pp_string (pp, content);\n+      pp_newline (pp);\n+\n+      add_fixit_insert_before (start_of_line, pp_formatted_text (pp));\n+    }\n+  else\n+    add_fixit_insert_before (insertion_point, content);\n+}"}, {"sha": "9c705c86a726612c8c3102c594c53c83329781ef", "filename": "gcc/gcc-rich-location.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a3a7b4eeb0444148adc4f007b91e120814c4cc5/gcc%2Fgcc-rich-location.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a3a7b4eeb0444148adc4f007b91e120814c4cc5/gcc%2Fgcc-rich-location.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-rich-location.h?ref=1a3a7b4eeb0444148adc4f007b91e120814c4cc5", "patch": "@@ -61,6 +61,42 @@ class gcc_rich_location : public rich_location\n      Implemented in diagnostic-show-locus.c.  */\n \n   bool add_location_if_nearby (location_t loc);\n+\n+  /* Add a fix-it hint suggesting the insertion of CONTENT before\n+     INSERTION_POINT.\n+\n+     Attempt to handle formatting: if INSERTION_POINT is the first thing on\n+     its line, and INDENT is sufficiently sane, then add CONTENT on its own\n+     line, using the indentation of INDENT.\n+     Otherwise, add CONTENT directly before INSERTION_POINT.\n+\n+     For example, adding \"CONTENT;\" with the closing brace as the insertion\n+     point and using \"INDENT;\" for indentation:\n+\n+       if ()\n+         {\n+           INDENT;\n+         }\n+\n+     would lead to:\n+\n+       if ()\n+         {\n+           INDENT;\n+           CONTENT;\n+         }\n+\n+     but adding it to:\n+\n+       if () {INDENT;}\n+\n+     would lead to:\n+\n+       if () {INDENT;CONTENT;}\n+  */\n+  void add_fixit_insert_formatted (const char *content,\n+\t\t\t\t   location_t insertion_point,\n+\t\t\t\t   location_t indent);\n };\n \n #endif /* GCC_RICH_LOCATION_H */"}, {"sha": "7e0a41ee7af298e7de519666528aaa69377c6215", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a3a7b4eeb0444148adc4f007b91e120814c4cc5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a3a7b4eeb0444148adc4f007b91e120814c4cc5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a3a7b4eeb0444148adc4f007b91e120814c4cc5", "patch": "@@ -1,3 +1,15 @@\n+2018-04-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/85523\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-generate-patch.c\n+\t(test_add_fixit_insert_formatted_single_line): New function.\n+\t(test_add_fixit_insert_formatted_multiline): New function.\n+\tExtend expected output of generated patch to include fix-it hints\n+\tfor these.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c: Include\n+\t\"gcc-rich-location.h\".  Add test coverage for\n+\tgcc_rich_location::add_fixit_insert_formatted.\n+\n 2018-04-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c"}, {"sha": "cfdc20819bed5ee7519282a0be9fc3e0abbe98e2", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-generate-patch.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a3a7b4eeb0444148adc4f007b91e120814c4cc5/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-generate-patch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a3a7b4eeb0444148adc4f007b91e120814c4cc5/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-generate-patch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-generate-patch.c?ref=1a3a7b4eeb0444148adc4f007b91e120814c4cc5", "patch": "@@ -64,6 +64,21 @@ void test_mutually_exclusive_suggestions (void)\n #endif\n }\n \n+/* Unit tests for add_fixit_insert_formatted.  */\n+\n+void test_add_fixit_insert_formatted_single_line (void)\n+{\n+  {}\n+}\n+\n+void test_add_fixit_insert_formatted_multiline (void)\n+{\n+  if (1)\n+    {\n+    }\n+}\n+\n+\n /* Verify the output from -fdiagnostics-generate-patch.\n    We expect a header, containing the filename.  This is the absolute path,\n    so we can only capture it via regexps.  */\n@@ -108,4 +123,21 @@ void test_mutually_exclusive_suggestions (void)\n      case 'b':\n        x = b;\n      }\n+@@ -68,7 +69,7 @@\n+ \n+ void test_add_fixit_insert_formatted_single_line (void)\n+ {\n+-  {}\n++  {INSERTED-CONTENT}\n+ }\n+ \n+ void test_add_fixit_insert_formatted_multiline (void)\n+@@ -76,6 +77,7 @@\n+   if (1)\n+     {\n+     }\n++  INSERTED-CONTENT\n+ }\n+ \n+ \n    { dg-end-multiline-output \"\" } */"}, {"sha": "1d340aa0e6a02b50a30db32663608356ea955a30", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_show_locus.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a3a7b4eeb0444148adc4f007b91e120814c4cc5/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a3a7b4eeb0444148adc4f007b91e120814c4cc5/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c?ref=1a3a7b4eeb0444148adc4f007b91e120814c4cc5", "patch": "@@ -60,6 +60,7 @@\n #include \"diagnostic.h\"\n #include \"context.h\"\n #include \"print-tree.h\"\n+#include \"gcc-rich-location.h\"\n \n int plugin_is_GPL_compatible;\n \n@@ -333,6 +334,29 @@ test_show_locus (function *fun)\n       }\n     }  \n \n+  /* Tests of gcc_rich_location::add_fixit_insert_formatted.  */\n+\n+  if (0 == strcmp (fnname, \"test_add_fixit_insert_formatted_single_line\"))\n+    {\n+      const int line = fnstart_line + 1;\n+      location_t insertion_point = get_loc (line, 3);\n+      location_t indent = get_loc (line, 2);\n+      gcc_rich_location richloc (insertion_point);\n+      richloc.add_fixit_insert_formatted (\"INSERTED-CONTENT\",\n+\t\t\t\t\t  insertion_point, indent);\n+      inform (&richloc, \"single-line insertion\");\n+    }\n+\n+  if (0 == strcmp (fnname, \"test_add_fixit_insert_formatted_multiline\"))\n+    {\n+      location_t insertion_point = fun->function_end_locus;\n+      location_t indent = get_loc (fnstart_line + 1, 2);\n+      gcc_rich_location richloc (insertion_point);\n+      richloc.add_fixit_insert_formatted (\"INSERTED-CONTENT\",\n+\t\t\t\t\t  insertion_point, indent);\n+      inform (&richloc, \"multiline insertion\");\n+    }\n+\n   /* Example of two carets where both carets appear to have an off-by-one\n      error appearing one column early.\n      Seen with gfortran.dg/associate_5.f03."}]}