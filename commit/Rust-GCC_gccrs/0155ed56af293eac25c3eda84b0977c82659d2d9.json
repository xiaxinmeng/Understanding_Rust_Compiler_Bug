{"sha": "0155ed56af293eac25c3eda84b0977c82659d2d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE1NWVkNTZhZjI5M2VhYzI1YzNlZGE4NGIwOTc3YzgyNjU5ZDJkOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-04-18T19:17:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-04-18T19:17:32Z"}, "message": "re PR tree-optimization/80443 (ICE on valid code at -O2 on x86_64-linux-gnu: in set_value_range, at tree-vrp.c:367)\n\n\tPR tree-optimization/80443\n\t* tree-vrp.c (intersect_ranges): For signed 1-bit precision type,\n\tinstead of adding 1, subtract -1 and similarly instead of subtracting\n\t1 add -1.\n\n\t* gcc.c-torture/compile/pr80443.c: New test.\n\nFrom-SVN: r246981", "tree": {"sha": "bd98f09658d83ba8af9235cf1a7c8425added391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd98f09658d83ba8af9235cf1a7c8425added391"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0155ed56af293eac25c3eda84b0977c82659d2d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0155ed56af293eac25c3eda84b0977c82659d2d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0155ed56af293eac25c3eda84b0977c82659d2d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0155ed56af293eac25c3eda84b0977c82659d2d9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f380f6082268c9e88fe635b198d9e6e735f07c5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f380f6082268c9e88fe635b198d9e6e735f07c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f380f6082268c9e88fe635b198d9e6e735f07c5f"}], "stats": {"total": 88, "additions": 72, "deletions": 16}, "files": [{"sha": "ea44ddb553ea3f015ada80eb38d706f25b14fdf2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0155ed56af293eac25c3eda84b0977c82659d2d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0155ed56af293eac25c3eda84b0977c82659d2d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0155ed56af293eac25c3eda84b0977c82659d2d9", "patch": "@@ -1,3 +1,10 @@\n+2017-04-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/80443\n+\t* tree-vrp.c (intersect_ranges): For signed 1-bit precision type,\n+\tinstead of adding 1, subtract -1 and similarly instead of subtracting\n+\t1 add -1.\n+\n 2017-04-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/80357"}, {"sha": "11410bb7045f8364664fc77a927346fd361a8d9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0155ed56af293eac25c3eda84b0977c82659d2d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0155ed56af293eac25c3eda84b0977c82659d2d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0155ed56af293eac25c3eda84b0977c82659d2d9", "patch": "@@ -1,3 +1,8 @@\n+2017-04-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/80443\n+\t* gcc.c-torture/compile/pr80443.c: New test.\n+\n 2017-04-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/80357"}, {"sha": "8c30cce3488badf128b37f44b3aa79cdc325c9e5", "filename": "gcc/testsuite/gcc.c-torture/compile/pr80443.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0155ed56af293eac25c3eda84b0977c82659d2d9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr80443.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0155ed56af293eac25c3eda84b0977c82659d2d9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr80443.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr80443.c?ref=0155ed56af293eac25c3eda84b0977c82659d2d9", "patch": "@@ -0,0 +1,20 @@\n+/* PR tree-optimization/80443 */\n+\n+struct S { int a : 1; } b, c;\n+signed char d, e, f;\n+\n+void\n+foo ()\n+{ \n+  while (f)\n+    { \n+      signed char g = b.a;\n+      if (g)\n+\tb.a = ~(1 + (d || c.a));\n+      if (b.a < g && b.a)\n+\tg = 0;\n+      if (b.a > c.a)\n+\tb.a = g;\n+      c.a = e;\n+    }\n+}"}, {"sha": "6d802de29a802376efd5e164091bdb1a740edbb8", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0155ed56af293eac25c3eda84b0977c82659d2d9/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0155ed56af293eac25c3eda84b0977c82659d2d9/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=0155ed56af293eac25c3eda84b0977c82659d2d9", "patch": "@@ -8756,20 +8756,32 @@ intersect_ranges (enum value_range_type *vr0type,\n \t  /* Choose the right gap if the left one is empty.  */\n \t  if (mineq)\n \t    {\n-\t      if (TREE_CODE (vr1max) == INTEGER_CST)\n-\t\t*vr0min = int_const_binop (PLUS_EXPR, vr1max,\n-\t\t\t\t\t   build_int_cst (TREE_TYPE (vr1max), 1));\n-\t      else\n+\t      if (TREE_CODE (vr1max) != INTEGER_CST)\n \t\t*vr0min = vr1max;\n+\t      else if (TYPE_PRECISION (TREE_TYPE (vr1max)) == 1\n+\t\t       && !TYPE_UNSIGNED (TREE_TYPE (vr1max)))\n+\t\t*vr0min\n+\t\t  = int_const_binop (MINUS_EXPR, vr1max,\n+\t\t\t\t     build_int_cst (TREE_TYPE (vr1max), -1));\n+\t      else\n+\t\t*vr0min\n+\t\t  = int_const_binop (PLUS_EXPR, vr1max,\n+\t\t\t\t     build_int_cst (TREE_TYPE (vr1max), 1));\n \t    }\n \t  /* Choose the left gap if the right one is empty.  */\n \t  else if (maxeq)\n \t    {\n-\t      if (TREE_CODE (vr1min) == INTEGER_CST)\n-\t\t*vr0max = int_const_binop (MINUS_EXPR, vr1min,\n-\t\t\t\t\t   build_int_cst (TREE_TYPE (vr1min), 1));\n-\t      else\n+\t      if (TREE_CODE (vr1min) != INTEGER_CST)\n \t\t*vr0max = vr1min;\n+\t      else if (TYPE_PRECISION (TREE_TYPE (vr1min)) == 1\n+\t\t       && !TYPE_UNSIGNED (TREE_TYPE (vr1min)))\n+\t\t*vr0max\n+\t\t  = int_const_binop (PLUS_EXPR, vr1min,\n+\t\t\t\t     build_int_cst (TREE_TYPE (vr1min), -1));\n+\t      else\n+\t\t*vr0max\n+\t\t  = int_const_binop (MINUS_EXPR, vr1min,\n+\t\t\t\t     build_int_cst (TREE_TYPE (vr1min), 1));\n \t    }\n \t  /* Choose the anti-range if the range is effectively varying.  */\n \t  else if (vrp_val_is_min (*vr0min)\n@@ -8811,22 +8823,34 @@ intersect_ranges (enum value_range_type *vr0type,\n \t  if (mineq)\n \t    {\n \t      *vr0type = VR_RANGE;\n-\t      if (TREE_CODE (*vr0max) == INTEGER_CST)\n-\t\t*vr0min = int_const_binop (PLUS_EXPR, *vr0max,\n-\t\t\t\t\t   build_int_cst (TREE_TYPE (*vr0max), 1));\n-\t      else\n+\t      if (TREE_CODE (*vr0max) != INTEGER_CST)\n \t\t*vr0min = *vr0max;\n+\t      else if (TYPE_PRECISION (TREE_TYPE (*vr0max)) == 1\n+\t\t       && !TYPE_UNSIGNED (TREE_TYPE (*vr0max)))\n+\t\t*vr0min\n+\t\t  = int_const_binop (MINUS_EXPR, *vr0max,\n+\t\t\t\t     build_int_cst (TREE_TYPE (*vr0max), -1));\n+\t      else\n+\t\t*vr0min\n+\t\t  = int_const_binop (PLUS_EXPR, *vr0max,\n+\t\t\t\t     build_int_cst (TREE_TYPE (*vr0max), 1));\n \t      *vr0max = vr1max;\n \t    }\n \t  /* Choose the left gap if the right is empty.  */\n \t  else if (maxeq)\n \t    {\n \t      *vr0type = VR_RANGE;\n-\t      if (TREE_CODE (*vr0min) == INTEGER_CST)\n-\t\t*vr0max = int_const_binop (MINUS_EXPR, *vr0min,\n-\t\t\t\t\t   build_int_cst (TREE_TYPE (*vr0min), 1));\n-\t      else\n+\t      if (TREE_CODE (*vr0min) != INTEGER_CST)\n \t\t*vr0max = *vr0min;\n+\t      else if (TYPE_PRECISION (TREE_TYPE (*vr0min)) == 1\n+\t\t       && !TYPE_UNSIGNED (TREE_TYPE (*vr0min)))\n+\t\t*vr0max\n+\t\t  = int_const_binop (PLUS_EXPR, *vr0min,\n+\t\t\t\t     build_int_cst (TREE_TYPE (*vr0min), -1));\n+\t      else\n+\t\t*vr0max\n+\t\t  = int_const_binop (MINUS_EXPR, *vr0min,\n+\t\t\t\t     build_int_cst (TREE_TYPE (*vr0min), 1));\n \t      *vr0min = vr1min;\n \t    }\n \t  /* Choose the anti-range if the range is effectively varying.  */"}]}