{"sha": "d0e2ffcca0ef6d526de8d221ba41567526b4cb40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBlMmZmY2NhMGVmNmQ1MjZkZThkMjIxYmE0MTU2NzUyNmI0Y2I0MA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-10-23T01:41:15Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-10-24T03:58:19Z"}, "message": "[RS6000] altivec style lvx/stvx addresses vs power10\n\ngcc.target/powerpc/fold-vec-st-pixel.c and other testcases fail on\npower10, generating\n\taddi 9,5,12\n\trldicr 9,9,0,59\n\tstxv 34,0(9)\nrather than\n\taddi 5,5,12\n\tstvx 2,0,5\nfor an altivec lvx/stvx style address.\n\nThe problem starts with fwprop creating\n(insn 9 4 0 2 (set (mem:V8HI (and:DI (plus:DI (reg/v/f:DI 121 [ vpp ])\n                    (const_int 12 [0xc]))\n                (const_int -16 [0xfffffffffffffff0])) [0 MEM <vector(8) short int> [(void *)_4 & -16B]+0 S16 A128])\n        (reg/v:V8HI 120 [ vp1 ])) \"pixel.c\":6:10 1237 {vsx_movv8hi_64bit}\nwhich is finally thrown out as invalid by lra.  lra of course does that\nby reloading the entire address.\n\nfwprop creates the invalid address due to rs6000_legitimate_address_p\ntrimming off the outer AND of altivec style addresses before applying\nother predicates.  address_is_prefixed then allows the inner address.\n\nNow at the time the AND stripping was added (git commit 850e8d3d56d),\nrs6000_legitimate_address looked a lot simpler.  This patch allows\nthrough just those addresses that were legitimate in those simpler\ndays.\n\n\t* config/rs6000/rs6000.c (rs6000_legitimate_address_p): Limit\n\tAND addressing to just lvx/stvx style addresses.", "tree": {"sha": "0bb83ba1fe4d7a4b8ed8450c0821017a0e5eeb39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bb83ba1fe4d7a4b8ed8450c0821017a0e5eeb39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0e2ffcca0ef6d526de8d221ba41567526b4cb40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e2ffcca0ef6d526de8d221ba41567526b4cb40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e2ffcca0ef6d526de8d221ba41567526b4cb40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e2ffcca0ef6d526de8d221ba41567526b4cb40/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a21c0ecd96ac5f91f0149a1edc8bfc4eb10c1f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a21c0ecd96ac5f91f0149a1edc8bfc4eb10c1f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a21c0ecd96ac5f91f0149a1edc8bfc4eb10c1f8"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "4d528a39a374dcd89173975cee3f753783841227", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e2ffcca0ef6d526de8d221ba41567526b4cb40/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e2ffcca0ef6d526de8d221ba41567526b4cb40/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d0e2ffcca0ef6d526de8d221ba41567526b4cb40", "patch": "@@ -9110,15 +9110,21 @@ rs6000_legitimate_address_p (machine_mode mode, rtx x, bool reg_ok_strict)\n   bool reg_offset_p = reg_offset_addressing_ok_p (mode);\n   bool quad_offset_p = mode_supports_dq_form (mode);\n \n-  /* If this is an unaligned stvx/ldvx type address, discard the outer AND.  */\n+  if (TARGET_ELF && RS6000_SYMBOL_REF_TLS_P (x))\n+    return 0;\n+\n+  /* Handle unaligned altivec lvx/stvx type addresses.  */\n   if (VECTOR_MEM_ALTIVEC_OR_VSX_P (mode)\n       && GET_CODE (x) == AND\n       && CONST_INT_P (XEXP (x, 1))\n       && INTVAL (XEXP (x, 1)) == -16)\n-    x = XEXP (x, 0);\n+    {\n+      x = XEXP (x, 0);\n+      return (legitimate_indirect_address_p (x, reg_ok_strict)\n+\t      || legitimate_indexed_address_p (x, reg_ok_strict)\n+\t      || virtual_stack_registers_memory_p (x));\n+    }\n \n-  if (TARGET_ELF && RS6000_SYMBOL_REF_TLS_P (x))\n-    return 0;\n   if (legitimate_indirect_address_p (x, reg_ok_strict))\n     return 1;\n   if (TARGET_UPDATE"}]}