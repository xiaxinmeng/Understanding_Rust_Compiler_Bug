{"sha": "ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY2Y2I0YzcxNmI5Y2ViNDY3MjgyMzU3ZTViYTBjMTZmZTcxYzZmNg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-05-16T14:51:02Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-05-16T14:51:02Z"}, "message": "Add default value for last argument of dump functions.\n\n2017-05-16  Martin Liska  <mliska@suse.cz>\n\n\t* parser.c (cp_lexer_print_token): Add default value for flags\n\targument of print_gimple_stmt, print_gimple_expr,\n\tprint_generic_stmt and print_generic_expr.\n2017-05-16  Martin Liska  <mliska@suse.cz>\n\n\t* cgraph.c (cgraph_edge::resolve_speculation): Add default value for flags\n\targument of print_gimple_stmt, print_gimple_expr,\n\tprint_generic_stmt and print_generic_expr.\n\t* cgraphclones.c (symbol_table::materialize_all_clones): Likewise.\n\t* coretypes.h: Likewise.\n\t* except.c (dump_eh_tree): Likewise.\n\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Likewise.\n\t* gimple-pretty-print.h: Likewise.\n\t* gimple-ssa-backprop.c (dump_usage_prefix): Likewise.\n\t(backprop::push_to_worklist): Likewise.\n\t(backprop::pop_from_worklist): Likewise.\n\t(backprop::process_use): Likewise.\n\t(backprop::intersect_uses): Likewise.\n\t(note_replacement): Likewise.\n\t* gimple-ssa-store-merging.c (pass_store_merging::terminate_all_aliasing_chains): Likewise.\n\t(imm_store_chain_info::coalesce_immediate_stores): Likewise.\n\t(pass_store_merging::execute): Likewise.\n\t* gimple-ssa-strength-reduction.c (dump_candidate): Likewise.\n\t(ssa_base_cand_dump_callback): Likewise.\n\t(dump_incr_vec): Likewise.\n\t(replace_refs): Likewise.\n\t(replace_mult_candidate): Likewise.\n\t(create_add_on_incoming_edge): Likewise.\n\t(create_phi_basis): Likewise.\n\t(insert_initializers): Likewise.\n\t(all_phi_incrs_profitable): Likewise.\n\t(introduce_cast_before_cand): Likewise.\n\t(replace_one_candidate): Likewise.\n\t* gimplify.c (gimplify_expr): Likewise.\n\t* graphite-isl-ast-to-gimple.c (is_valid_rename): Likewise.\n\t(set_rename): Likewise.\n\t(rename_uses): Likewise.\n\t(copy_loop_phi_nodes): Likewise.\n\t(add_close_phis_to_merge_points): Likewise.\n\t(copy_loop_close_phi_args): Likewise.\n\t(copy_cond_phi_args): Likewise.\n\t(graphite_copy_stmts_from_block): Likewise.\n\t(translate_pending_phi_nodes): Likewise.\n\t* graphite-poly.c (print_pdr): Likewise.\n\t(dump_gbb_cases): Likewise.\n\t(dump_gbb_conditions): Likewise.\n\t(print_scop_params): Likewise.\n\t* graphite-scop-detection.c (build_cross_bb_scalars_def): Likewise.\n\t(build_cross_bb_scalars_use): Likewise.\n\t(gather_bbs::before_dom_children): Likewise.\n\t* hsa-dump.c (dump_hsa_immed): Likewise.\n\t* ipa-cp.c (print_ipcp_constant_value): Likewise.\n\t(get_replacement_map): Likewise.\n\t* ipa-inline-analysis.c (dump_condition): Likewise.\n\t(estimate_function_body_sizes): Likewise.\n\t* ipa-polymorphic-call.c (check_stmt_for_type_change): Likewise.\n\t(ipa_polymorphic_call_context::get_dynamic_type): Likewise.\n\t* ipa-prop.c (ipa_dump_param): Likewise.\n\t(ipa_print_node_jump_functions_for_edge): Likewise.\n\t(ipa_modify_call_arguments): Likewise.\n\t(ipa_modify_expr): Likewise.\n\t(ipa_dump_param_adjustments): Likewise.\n\t(ipa_dump_agg_replacement_values): Likewise.\n\t(ipcp_modif_dom_walker::before_dom_children): Likewise.\n\t* ipa-pure-const.c (check_stmt): Likewise.\n\t(pass_nothrow::execute): Likewise.\n\t* ipa-split.c (execute_split_functions): Likewise.\n\t* omp-offload.c (dump_oacc_loop_part): Likewise.\n\t(dump_oacc_loop): Likewise.\n\t* trans-mem.c (tm_log_emit): Likewise.\n\t(tm_memopt_accumulate_memops): Likewise.\n\t(dump_tm_memopt_set): Likewise.\n\t(dump_tm_memopt_transform): Likewise.\n\t* tree-cfg.c (gimple_verify_flow_info): Likewise.\n\t(print_loop): Likewise.\n\t* tree-chkp-opt.c (chkp_print_addr): Likewise.\n\t(chkp_gather_checks_info): Likewise.\n\t(chkp_get_check_result): Likewise.\n\t(chkp_remove_check_if_pass): Likewise.\n\t(chkp_use_outer_bounds_if_possible): Likewise.\n\t(chkp_reduce_bounds_lifetime): Likewise.\n\t* tree-chkp.c (chkp_register_addr_bounds): Likewise.\n\t(chkp_mark_completed_bounds): Likewise.\n\t(chkp_register_incomplete_bounds): Likewise.\n\t(chkp_mark_invalid_bounds): Likewise.\n\t(chkp_maybe_copy_and_register_bounds): Likewise.\n\t(chkp_build_returned_bound): Likewise.\n\t(chkp_get_bound_for_parm): Likewise.\n\t(chkp_build_bndldx): Likewise.\n\t(chkp_get_bounds_by_definition): Likewise.\n\t(chkp_generate_extern_var_bounds): Likewise.\n\t(chkp_get_bounds_for_decl_addr): Likewise.\n\t* tree-chrec.c (chrec_apply): Likewise.\n\t* tree-data-ref.c (dump_data_reference): Likewise.\n\t(dump_subscript): Likewise.\n\t(dump_data_dependence_relation): Likewise.\n\t(analyze_overlapping_iterations): Likewise.\n\t* tree-inline.c (expand_call_inline): Likewise.\n\t(tree_function_versioning): Likewise.\n\t* tree-into-ssa.c (dump_defs_stack): Likewise.\n\t(dump_currdefs): Likewise.\n\t(dump_names_replaced_by): Likewise.\n\t(dump_update_ssa): Likewise.\n\t(update_ssa): Likewise.\n\t* tree-object-size.c (pass_object_sizes::execute): Likewise.\n\t* tree-parloops.c (build_new_reduction): Likewise.\n\t(try_create_reduction_list): Likewise.\n\t(ref_conflicts_with_region): Likewise.\n\t(oacc_entry_exit_ok_1): Likewise.\n\t(oacc_entry_exit_single_gang): Likewise.\n\t* tree-pretty-print.h: Likewise.\n\t* tree-scalar-evolution.c (set_scalar_evolution): Likewise.\n\t(get_scalar_evolution): Likewise.\n\t(add_to_evolution): Likewise.\n\t(get_loop_exit_condition): Likewise.\n\t(analyze_evolution_in_loop): Likewise.\n\t(analyze_initial_condition): Likewise.\n\t(analyze_scalar_evolution): Likewise.\n\t(instantiate_scev): Likewise.\n\t(number_of_latch_executions): Likewise.\n\t(gather_chrec_stats): Likewise.\n\t(final_value_replacement_loop): Likewise.\n\t(scev_const_prop): Likewise.\n\t* tree-sra.c (dump_access): Likewise.\n\t(disqualify_candidate): Likewise.\n\t(create_access): Likewise.\n\t(reject): Likewise.\n\t(maybe_add_sra_candidate): Likewise.\n\t(create_access_replacement): Likewise.\n\t(analyze_access_subtree): Likewise.\n\t(analyze_all_variable_accesses): Likewise.\n\t(sra_modify_assign): Likewise.\n\t(initialize_constant_pool_replacements): Likewise.\n\t(find_param_candidates): Likewise.\n\t(decide_one_param_reduction): Likewise.\n\t(replace_removed_params_ssa_names): Likewise.\n\t* tree-ssa-ccp.c (ccp_fold_stmt): Likewise.\n\t* tree-ssa-copy.c (dump_copy_of): Likewise.\n\t(copy_prop_visit_cond_stmt): Likewise.\n\t* tree-ssa-dce.c (mark_operand_necessary): Likewise.\n\t* tree-ssa-dom.c (pass_dominator::execute): Likewise.\n\t(record_equivalences_from_stmt): Likewise.\n\t* tree-ssa-dse.c (compute_trims): Likewise.\n\t(delete_dead_call): Likewise.\n\t(delete_dead_assignment): Likewise.\n\t* tree-ssa-forwprop.c (forward_propagate_into_gimple_cond): Likewise.\n\t(forward_propagate_into_cond): Likewise.\n\t(pass_forwprop::execute): Likewise.\n\t* tree-ssa-ifcombine.c (ifcombine_ifandif): Likewise.\n\t* tree-ssa-loop-im.c (invariantness_dom_walker::before_dom_children): Likewise.\n\t(move_computations_worker): Likewise.\n\t(execute_sm): Likewise.\n\t* tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Likewise.\n\t(remove_exits_and_undefined_stmts): Likewise.\n\t(remove_redundant_iv_tests): Likewise.\n\t* tree-ssa-loop-ivopts.c (dump_use): Likewise.\n\t(adjust_iv_update_pos): Likewise.\n\t* tree-ssa-math-opts.c (bswap_replace): Likewise.\n\t* tree-ssa-phiopt.c (factor_out_conditional_conversion): Likewise.\n\t(value_replacement): Likewise.\n\t* tree-ssa-phiprop.c (phiprop_insert_phi): Likewise.\n\t* tree-ssa-pre.c (print_pre_expr): Likewise.\n\t(get_representative_for): Likewise.\n\t(create_expression_by_pieces): Likewise.\n\t(insert_into_preds_of_block): Likewise.\n\t(eliminate_insert): Likewise.\n\t(eliminate_dom_walker::before_dom_children): Likewise.\n\t(eliminate): Likewise.\n\t(remove_dead_inserted_code): Likewise.\n\t* tree-ssa-propagate.c (substitute_and_fold): Likewise.\n\t* tree-ssa-reassoc.c (get_rank): Likewise.\n\t(eliminate_duplicate_pair): Likewise.\n\t(eliminate_plus_minus_pair): Likewise.\n\t(eliminate_not_pairs): Likewise.\n\t(undistribute_ops_list): Likewise.\n\t(eliminate_redundant_comparison): Likewise.\n\t(update_range_test): Likewise.\n\t(optimize_range_tests_var_bound): Likewise.\n\t(optimize_vec_cond_expr): Likewise.\n\t(rewrite_expr_tree): Likewise.\n\t(rewrite_expr_tree_parallel): Likewise.\n\t(linearize_expr): Likewise.\n\t(break_up_subtract): Likewise.\n\t(linearize_expr_tree): Likewise.\n\t(attempt_builtin_powi): Likewise.\n\t(attempt_builtin_copysign): Likewise.\n\t(transform_stmt_to_copy): Likewise.\n\t(transform_stmt_to_multiply): Likewise.\n\t(dump_ops_vector): Likewise.\n\t* tree-ssa-sccvn.c (vn_nary_build_or_lookup_1): Likewise.\n\t(print_scc): Likewise.\n\t(set_ssa_val_to): Likewise.\n\t(visit_reference_op_store): Likewise.\n\t(visit_use): Likewise.\n\t(sccvn_dom_walker::before_dom_children): Likewise.\n\t(run_scc_vn): Likewise.\n\t* tree-ssa-scopedtables.c (avail_exprs_stack::lookup_avail_expr): Likewise.\n\t(expr_hash_elt::print): Likewise.\n\t(const_and_copies::pop_to_marker): Likewise.\n\t(const_and_copies::record_const_or_copy_raw): Likewise.\n\t* tree-ssa-structalias.c (compute_dependence_clique): Likewise.\n\t* tree-ssa-uninit.c (collect_phi_def_edges): Likewise.\n\t(dump_predicates): Likewise.\n\t(find_uninit_use): Likewise.\n\t(warn_uninitialized_phi): Likewise.\n\t(pass_late_warn_uninitialized::execute): Likewise.\n\t* tree-ssa.c (verify_vssa): Likewise.\n\t(verify_ssa): Likewise.\n\t(maybe_optimize_var): Likewise.\n\t* tree-vrp.c (dump_value_range): Likewise.\n\t(dump_all_value_ranges): Likewise.\n\t(dump_asserts_for): Likewise.\n\t(register_edge_assert_for_2): Likewise.\n\t(vrp_visit_cond_stmt): Likewise.\n\t(vrp_visit_switch_stmt): Likewise.\n\t(vrp_visit_stmt): Likewise.\n\t(vrp_visit_phi_node): Likewise.\n\t(simplify_cond_using_ranges_1): Likewise.\n\t(fold_predicate_in): Likewise.\n\t(evrp_dom_walker::before_dom_children): Likewise.\n\t(evrp_dom_walker::push_value_range): Likewise.\n\t(evrp_dom_walker::pop_value_range): Likewise.\n\t(execute_early_vrp): Likewise.\n\nFrom-SVN: r248113", "tree": {"sha": "a4756dbf75a4b0d4f6d35c8aae15677e9128d2f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4756dbf75a4b0d4f6d35c8aae15677e9128d2f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f267553fca2671ca4abb0dbbe3c9f625357edf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f267553fca2671ca4abb0dbbe3c9f625357edf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f267553fca2671ca4abb0dbbe3c9f625357edf0"}], "stats": {"total": 1203, "additions": 715, "deletions": 488}, "files": [{"sha": "b60812396502b9b78bf722c2bf596d637bfcc99b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1,3 +1,224 @@\n+2017-05-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* cgraph.c (cgraph_edge::resolve_speculation): Add default value for flags\n+\targument of print_gimple_stmt, print_gimple_expr,\n+\tprint_generic_stmt and print_generic_expr.\n+\t* cgraphclones.c (symbol_table::materialize_all_clones): Likewise.\n+\t* coretypes.h: Likewise.\n+\t* except.c (dump_eh_tree): Likewise.\n+\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Likewise.\n+\t* gimple-pretty-print.h: Likewise.\n+\t* gimple-ssa-backprop.c (dump_usage_prefix): Likewise.\n+\t(backprop::push_to_worklist): Likewise.\n+\t(backprop::pop_from_worklist): Likewise.\n+\t(backprop::process_use): Likewise.\n+\t(backprop::intersect_uses): Likewise.\n+\t(note_replacement): Likewise.\n+\t* gimple-ssa-store-merging.c (pass_store_merging::terminate_all_aliasing_chains): Likewise.\n+\t(imm_store_chain_info::coalesce_immediate_stores): Likewise.\n+\t(pass_store_merging::execute): Likewise.\n+\t* gimple-ssa-strength-reduction.c (dump_candidate): Likewise.\n+\t(ssa_base_cand_dump_callback): Likewise.\n+\t(dump_incr_vec): Likewise.\n+\t(replace_refs): Likewise.\n+\t(replace_mult_candidate): Likewise.\n+\t(create_add_on_incoming_edge): Likewise.\n+\t(create_phi_basis): Likewise.\n+\t(insert_initializers): Likewise.\n+\t(all_phi_incrs_profitable): Likewise.\n+\t(introduce_cast_before_cand): Likewise.\n+\t(replace_one_candidate): Likewise.\n+\t* gimplify.c (gimplify_expr): Likewise.\n+\t* graphite-isl-ast-to-gimple.c (is_valid_rename): Likewise.\n+\t(set_rename): Likewise.\n+\t(rename_uses): Likewise.\n+\t(copy_loop_phi_nodes): Likewise.\n+\t(add_close_phis_to_merge_points): Likewise.\n+\t(copy_loop_close_phi_args): Likewise.\n+\t(copy_cond_phi_args): Likewise.\n+\t(graphite_copy_stmts_from_block): Likewise.\n+\t(translate_pending_phi_nodes): Likewise.\n+\t* graphite-poly.c (print_pdr): Likewise.\n+\t(dump_gbb_cases): Likewise.\n+\t(dump_gbb_conditions): Likewise.\n+\t(print_scop_params): Likewise.\n+\t* graphite-scop-detection.c (build_cross_bb_scalars_def): Likewise.\n+\t(build_cross_bb_scalars_use): Likewise.\n+\t(gather_bbs::before_dom_children): Likewise.\n+\t* hsa-dump.c (dump_hsa_immed): Likewise.\n+\t* ipa-cp.c (print_ipcp_constant_value): Likewise.\n+\t(get_replacement_map): Likewise.\n+\t* ipa-inline-analysis.c (dump_condition): Likewise.\n+\t(estimate_function_body_sizes): Likewise.\n+\t* ipa-polymorphic-call.c (check_stmt_for_type_change): Likewise.\n+\t(ipa_polymorphic_call_context::get_dynamic_type): Likewise.\n+\t* ipa-prop.c (ipa_dump_param): Likewise.\n+\t(ipa_print_node_jump_functions_for_edge): Likewise.\n+\t(ipa_modify_call_arguments): Likewise.\n+\t(ipa_modify_expr): Likewise.\n+\t(ipa_dump_param_adjustments): Likewise.\n+\t(ipa_dump_agg_replacement_values): Likewise.\n+\t(ipcp_modif_dom_walker::before_dom_children): Likewise.\n+\t* ipa-pure-const.c (check_stmt): Likewise.\n+\t(pass_nothrow::execute): Likewise.\n+\t* ipa-split.c (execute_split_functions): Likewise.\n+\t* omp-offload.c (dump_oacc_loop_part): Likewise.\n+\t(dump_oacc_loop): Likewise.\n+\t* trans-mem.c (tm_log_emit): Likewise.\n+\t(tm_memopt_accumulate_memops): Likewise.\n+\t(dump_tm_memopt_set): Likewise.\n+\t(dump_tm_memopt_transform): Likewise.\n+\t* tree-cfg.c (gimple_verify_flow_info): Likewise.\n+\t(print_loop): Likewise.\n+\t* tree-chkp-opt.c (chkp_print_addr): Likewise.\n+\t(chkp_gather_checks_info): Likewise.\n+\t(chkp_get_check_result): Likewise.\n+\t(chkp_remove_check_if_pass): Likewise.\n+\t(chkp_use_outer_bounds_if_possible): Likewise.\n+\t(chkp_reduce_bounds_lifetime): Likewise.\n+\t* tree-chkp.c (chkp_register_addr_bounds): Likewise.\n+\t(chkp_mark_completed_bounds): Likewise.\n+\t(chkp_register_incomplete_bounds): Likewise.\n+\t(chkp_mark_invalid_bounds): Likewise.\n+\t(chkp_maybe_copy_and_register_bounds): Likewise.\n+\t(chkp_build_returned_bound): Likewise.\n+\t(chkp_get_bound_for_parm): Likewise.\n+\t(chkp_build_bndldx): Likewise.\n+\t(chkp_get_bounds_by_definition): Likewise.\n+\t(chkp_generate_extern_var_bounds): Likewise.\n+\t(chkp_get_bounds_for_decl_addr): Likewise.\n+\t* tree-chrec.c (chrec_apply): Likewise.\n+\t* tree-data-ref.c (dump_data_reference): Likewise.\n+\t(dump_subscript): Likewise.\n+\t(dump_data_dependence_relation): Likewise.\n+\t(analyze_overlapping_iterations): Likewise.\n+\t* tree-inline.c (expand_call_inline): Likewise.\n+\t(tree_function_versioning): Likewise.\n+\t* tree-into-ssa.c (dump_defs_stack): Likewise.\n+\t(dump_currdefs): Likewise.\n+\t(dump_names_replaced_by): Likewise.\n+\t(dump_update_ssa): Likewise.\n+\t(update_ssa): Likewise.\n+\t* tree-object-size.c (pass_object_sizes::execute): Likewise.\n+\t* tree-parloops.c (build_new_reduction): Likewise.\n+\t(try_create_reduction_list): Likewise.\n+\t(ref_conflicts_with_region): Likewise.\n+\t(oacc_entry_exit_ok_1): Likewise.\n+\t(oacc_entry_exit_single_gang): Likewise.\n+\t* tree-pretty-print.h: Likewise.\n+\t* tree-scalar-evolution.c (set_scalar_evolution): Likewise.\n+\t(get_scalar_evolution): Likewise.\n+\t(add_to_evolution): Likewise.\n+\t(get_loop_exit_condition): Likewise.\n+\t(analyze_evolution_in_loop): Likewise.\n+\t(analyze_initial_condition): Likewise.\n+\t(analyze_scalar_evolution): Likewise.\n+\t(instantiate_scev): Likewise.\n+\t(number_of_latch_executions): Likewise.\n+\t(gather_chrec_stats): Likewise.\n+\t(final_value_replacement_loop): Likewise.\n+\t(scev_const_prop): Likewise.\n+\t* tree-sra.c (dump_access): Likewise.\n+\t(disqualify_candidate): Likewise.\n+\t(create_access): Likewise.\n+\t(reject): Likewise.\n+\t(maybe_add_sra_candidate): Likewise.\n+\t(create_access_replacement): Likewise.\n+\t(analyze_access_subtree): Likewise.\n+\t(analyze_all_variable_accesses): Likewise.\n+\t(sra_modify_assign): Likewise.\n+\t(initialize_constant_pool_replacements): Likewise.\n+\t(find_param_candidates): Likewise.\n+\t(decide_one_param_reduction): Likewise.\n+\t(replace_removed_params_ssa_names): Likewise.\n+\t* tree-ssa-ccp.c (ccp_fold_stmt): Likewise.\n+\t* tree-ssa-copy.c (dump_copy_of): Likewise.\n+\t(copy_prop_visit_cond_stmt): Likewise.\n+\t* tree-ssa-dce.c (mark_operand_necessary): Likewise.\n+\t* tree-ssa-dom.c (pass_dominator::execute): Likewise.\n+\t(record_equivalences_from_stmt): Likewise.\n+\t* tree-ssa-dse.c (compute_trims): Likewise.\n+\t(delete_dead_call): Likewise.\n+\t(delete_dead_assignment): Likewise.\n+\t* tree-ssa-forwprop.c (forward_propagate_into_gimple_cond): Likewise.\n+\t(forward_propagate_into_cond): Likewise.\n+\t(pass_forwprop::execute): Likewise.\n+\t* tree-ssa-ifcombine.c (ifcombine_ifandif): Likewise.\n+\t* tree-ssa-loop-im.c (invariantness_dom_walker::before_dom_children): Likewise.\n+\t(move_computations_worker): Likewise.\n+\t(execute_sm): Likewise.\n+\t* tree-ssa-loop-ivcanon.c (tree_estimate_loop_size): Likewise.\n+\t(remove_exits_and_undefined_stmts): Likewise.\n+\t(remove_redundant_iv_tests): Likewise.\n+\t* tree-ssa-loop-ivopts.c (dump_use): Likewise.\n+\t(adjust_iv_update_pos): Likewise.\n+\t* tree-ssa-math-opts.c (bswap_replace): Likewise.\n+\t* tree-ssa-phiopt.c (factor_out_conditional_conversion): Likewise.\n+\t(value_replacement): Likewise.\n+\t* tree-ssa-phiprop.c (phiprop_insert_phi): Likewise.\n+\t* tree-ssa-pre.c (print_pre_expr): Likewise.\n+\t(get_representative_for): Likewise.\n+\t(create_expression_by_pieces): Likewise.\n+\t(insert_into_preds_of_block): Likewise.\n+\t(eliminate_insert): Likewise.\n+\t(eliminate_dom_walker::before_dom_children): Likewise.\n+\t(eliminate): Likewise.\n+\t(remove_dead_inserted_code): Likewise.\n+\t* tree-ssa-propagate.c (substitute_and_fold): Likewise.\n+\t* tree-ssa-reassoc.c (get_rank): Likewise.\n+\t(eliminate_duplicate_pair): Likewise.\n+\t(eliminate_plus_minus_pair): Likewise.\n+\t(eliminate_not_pairs): Likewise.\n+\t(undistribute_ops_list): Likewise.\n+\t(eliminate_redundant_comparison): Likewise.\n+\t(update_range_test): Likewise.\n+\t(optimize_range_tests_var_bound): Likewise.\n+\t(optimize_vec_cond_expr): Likewise.\n+\t(rewrite_expr_tree): Likewise.\n+\t(rewrite_expr_tree_parallel): Likewise.\n+\t(linearize_expr): Likewise.\n+\t(break_up_subtract): Likewise.\n+\t(linearize_expr_tree): Likewise.\n+\t(attempt_builtin_powi): Likewise.\n+\t(attempt_builtin_copysign): Likewise.\n+\t(transform_stmt_to_copy): Likewise.\n+\t(transform_stmt_to_multiply): Likewise.\n+\t(dump_ops_vector): Likewise.\n+\t* tree-ssa-sccvn.c (vn_nary_build_or_lookup_1): Likewise.\n+\t(print_scc): Likewise.\n+\t(set_ssa_val_to): Likewise.\n+\t(visit_reference_op_store): Likewise.\n+\t(visit_use): Likewise.\n+\t(sccvn_dom_walker::before_dom_children): Likewise.\n+\t(run_scc_vn): Likewise.\n+\t* tree-ssa-scopedtables.c (avail_exprs_stack::lookup_avail_expr): Likewise.\n+\t(expr_hash_elt::print): Likewise.\n+\t(const_and_copies::pop_to_marker): Likewise.\n+\t(const_and_copies::record_const_or_copy_raw): Likewise.\n+\t* tree-ssa-structalias.c (compute_dependence_clique): Likewise.\n+\t* tree-ssa-uninit.c (collect_phi_def_edges): Likewise.\n+\t(dump_predicates): Likewise.\n+\t(find_uninit_use): Likewise.\n+\t(warn_uninitialized_phi): Likewise.\n+\t(pass_late_warn_uninitialized::execute): Likewise.\n+\t* tree-ssa.c (verify_vssa): Likewise.\n+\t(verify_ssa): Likewise.\n+\t(maybe_optimize_var): Likewise.\n+\t* tree-vrp.c (dump_value_range): Likewise.\n+\t(dump_all_value_ranges): Likewise.\n+\t(dump_asserts_for): Likewise.\n+\t(register_edge_assert_for_2): Likewise.\n+\t(vrp_visit_cond_stmt): Likewise.\n+\t(vrp_visit_switch_stmt): Likewise.\n+\t(vrp_visit_stmt): Likewise.\n+\t(vrp_visit_phi_node): Likewise.\n+\t(simplify_cond_using_ranges_1): Likewise.\n+\t(fold_predicate_in): Likewise.\n+\t(evrp_dom_walker::before_dom_children): Likewise.\n+\t(evrp_dom_walker::push_value_range): Likewise.\n+\t(evrp_dom_walker::pop_value_range): Likewise.\n+\t(execute_early_vrp): Likewise.\n+\n 2017-05-16  Richard Biener  <rguenther@suse.de>\n \n \t* dwarf2out.c (loc_list_from_tree_1): Do not create"}, {"sha": "d5294c8ce9253fee7f91c5c70c50ea0103b444cf", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1169,7 +1169,7 @@ cgraph_edge::resolve_speculation (tree callee_decl)\n \t\t       edge->caller->order,\n \t\t       xstrdup_for_dump (e2->callee->name ()),\n \t\t       e2->callee->order);\n-\t      print_generic_expr (dump_file, callee_decl, 0);\n+\t      print_generic_expr (dump_file, callee_decl);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  else"}, {"sha": "ec9006637482b89289e21f8494b58739b45fefb2", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1118,9 +1118,11 @@ symbol_table::materialize_all_clones (void)\n \t\t\t    {\n \t\t\t      ipa_replace_map *replace_info;\n \t\t\t      replace_info = (*node->clone.tree_map)[i];\n-\t\t\t      print_generic_expr (symtab->dump_file, replace_info->old_tree, 0);\n+\t\t\t      print_generic_expr (symtab->dump_file,\n+\t\t\t\t\t\t  replace_info->old_tree);\n \t\t\t      fprintf (symtab->dump_file, \" -> \");\n-\t\t\t      print_generic_expr (symtab->dump_file, replace_info->new_tree, 0);\n+\t\t\t      print_generic_expr (symtab->dump_file,\n+\t\t\t\t\t\t  replace_info->new_tree);\n \t\t\t      fprintf (symtab->dump_file, \"%s%s;\",\n \t\t\t      \t       replace_info->replace_p ? \"(replace)\":\"\",\n \t\t\t\t       replace_info->ref_p ? \"(ref)\":\"\");"}, {"sha": "16a6e4c7e2fe93bfb290bd135341c36271b672ed", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1,3 +1,9 @@\n+2017-05-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* parser.c (cp_lexer_print_token): Add default value for flags\n+\targument of print_gimple_stmt, print_gimple_expr,\n+\tprint_generic_stmt and print_generic_expr.\n+\n 2017-05-16  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (class ovl_iterator, class lkp_iterator): New OVERLOAD"}, {"sha": "7ba20752b6a6282370f0492b7a14745595a3ed0f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1280,7 +1280,7 @@ cp_lexer_print_token (FILE * stream, cp_token *token)\n       break;\n \n     case CPP_NUMBER:\n-      print_generic_expr (stream, token->u.value, 0);\n+      print_generic_expr (stream, token->u.value);\n       break;\n \n     default:"}, {"sha": "0bf2c2eac0e538acc9fc2b9c7c7ffed886d401d8", "filename": "gcc/except.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -3196,7 +3196,7 @@ dump_eh_tree (FILE * out, struct function *fun)\n \t      for (lp = i->landing_pads; lp ; lp = lp->next_lp)\n \t\t{\n \t\t  fprintf (out, \"{%i,\", lp->index);\n-\t\t  print_generic_expr (out, lp->post_landing_pad, 0);\n+\t\t  print_generic_expr (out, lp->post_landing_pad);\n \t\t  fputc ('}', out);\n \t\t  if (lp->next_lp)\n \t\t    fputc (',', out);\n@@ -3242,10 +3242,10 @@ dump_eh_tree (FILE * out, struct function *fun)\n \t\tif (c->label)\n \t\t  {\n \t\t    fprintf (out, \"lab:\");\n-\t\t    print_generic_expr (out, c->label, 0);\n+\t\t    print_generic_expr (out, c->label);\n \t\t    fputc (';', out);\n \t\t  }\n-\t\tprint_generic_expr (out, c->type_list, 0);\n+\t\tprint_generic_expr (out, c->type_list);\n \t\tfputc ('}', out);\n \t\tif (c->next_catch)\n \t\t  fputc (',', out);\n@@ -3255,7 +3255,7 @@ dump_eh_tree (FILE * out, struct function *fun)\n \n \tcase ERT_ALLOWED_EXCEPTIONS:\n \t  fprintf (out, \" filter :%i types:\", i->u.allowed.filter);\n-\t  print_generic_expr (out, i->u.allowed.type_list, 0);\n+\t  print_generic_expr (out, i->u.allowed.type_list);\n \t  break;\n \t}\n       fputc ('\\n', out);"}, {"sha": "d12f9d053c9a5f7e83065a5570640244a242c55a", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -5741,7 +5741,7 @@ gimple_fold_stmt_to_constant_1 (gimple *stmt, tree (*valueize) (tree),\n \t      fprintf (dump_file, \"Match-and-simplified \");\n \t      print_gimple_expr (dump_file, stmt, 0, TDF_SLIM);\n \t      fprintf (dump_file, \" to \");\n-\t      print_generic_expr (dump_file, res, 0);\n+\t      print_generic_expr (dump_file, res);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  return res;"}, {"sha": "4c1d9258847e164c79e0f55e4e95a7c73b690231", "filename": "gcc/gimple-pretty-print.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgimple-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgimple-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.h?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -27,10 +27,10 @@ along with GCC; see the file COPYING3.  If not see\n extern void debug_gimple_stmt (gimple *);\n extern void debug_gimple_seq (gimple_seq);\n extern void print_gimple_seq (FILE *, gimple_seq, int, int);\n-extern void print_gimple_stmt (FILE *, gimple *, int, int);\n+extern void print_gimple_stmt (FILE *, gimple *, int, int = 0);\n extern void debug (gimple &ref);\n extern void debug (gimple *ptr);\n-extern void print_gimple_expr (FILE *, gimple *, int, int);\n+extern void print_gimple_expr (FILE *, gimple *, int, int = 0);\n extern void pp_gimple_stmt_1 (pretty_printer *, gimple *, int, int);\n extern void gimple_dump_bb (FILE *, basic_block, int, int);\n extern void gimple_dump_bb_for_graph (pretty_printer *, basic_block);"}, {"sha": "f321ebb38175d55f1c783a406cf70b35d634b250", "filename": "gcc/gimple-ssa-backprop.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgimple-ssa-backprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgimple-ssa-backprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-backprop.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -188,7 +188,7 @@ static void\n dump_usage_prefix (FILE *file, tree var)\n {\n   fprintf (file, \"  \");\n-  print_generic_expr (file, var, 0);\n+  print_generic_expr (file, var);\n   fprintf (file, \": \");\n }\n \n@@ -309,7 +309,7 @@ backprop::push_to_worklist (tree var)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"[WORKLIST] Pushing \");\n-      print_generic_expr (dump_file, var, 0);\n+      print_generic_expr (dump_file, var);\n       fprintf (dump_file, \"\\n\");\n     }\n }\n@@ -325,7 +325,7 @@ backprop::pop_from_worklist ()\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"[WORKLIST] Popping \");\n-      print_generic_expr (dump_file, var, 0);\n+      print_generic_expr (dump_file, var);\n       fprintf (dump_file, \"\\n\");\n     }\n   return var;\n@@ -469,7 +469,7 @@ backprop::process_use (gimple *stmt, tree rhs, usage_info *info)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"[USE] \");\n-      print_generic_expr (dump_file, rhs, 0);\n+      print_generic_expr (dump_file, rhs);\n       fprintf (dump_file, \" in \");\n       print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n     }\n@@ -507,7 +507,7 @@ backprop::intersect_uses (tree var, usage_info *info)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"[BACKEDGE] \");\n-\t      print_generic_expr (dump_file, var, 0);\n+\t      print_generic_expr (dump_file, var);\n \t      fprintf (dump_file, \" in \");\n \t      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n \t    }\n@@ -658,9 +658,9 @@ static void\n note_replacement (gimple *stmt, tree old_rhs, tree new_rhs)\n {\n   fprintf (dump_file, \"Replacing use of \");\n-  print_generic_expr (dump_file, old_rhs, 0);\n+  print_generic_expr (dump_file, old_rhs);\n   fprintf (dump_file, \" with \");\n-  print_generic_expr (dump_file, new_rhs, 0);\n+  print_generic_expr (dump_file, new_rhs);\n   fprintf (dump_file, \" in \");\n   print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n }"}, {"sha": "64b83517c7a2f43c2a585700815537586e7a7083", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -823,7 +823,7 @@ pass_store_merging::terminate_all_aliasing_chains (imm_store_chain_info\n \t\t    {\n \t\t      fprintf (dump_file,\n \t\t\t       \"stmt causes chain termination:\\n\");\n-\t\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t      print_gimple_stmt (dump_file, stmt, 0);\n \t\t    }\n \t\t  terminate_and_release_chain (*chain_info);\n \t\t  ret = true;\n@@ -906,7 +906,7 @@ imm_store_chain_info::coalesce_immediate_stores ()\n \t  fprintf (dump_file, \"Store %u:\\nbitsize:\" HOST_WIDE_INT_PRINT_DEC\n \t\t\t      \" bitpos:\" HOST_WIDE_INT_PRINT_DEC \" val:\\n\",\n \t\t   i, info->bitsize, info->bitpos);\n-\t  print_generic_expr (dump_file, gimple_assign_rhs1 (info->stmt), 0);\n+\t  print_generic_expr (dump_file, gimple_assign_rhs1 (info->stmt));\n \t  fprintf (dump_file, \"\\n------------\\n\");\n \t}\n \n@@ -1467,7 +1467,7 @@ pass_store_merging::execute (function *fun)\n \t\t\t{\n \t\t\t  fprintf (dump_file,\n \t\t\t\t   \"Recording immediate store from stmt:\\n\");\n-\t\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t\t  print_gimple_stmt (dump_file, stmt, 0);\n \t\t\t}\n \t\t      (*chain_info)->m_store_info.safe_push (info);\n \t\t      /* If we reach the limit of stores to merge in a chain\n@@ -1498,9 +1498,9 @@ pass_store_merging::execute (function *fun)\n \t\t    {\n \t\t      fprintf (dump_file,\n \t\t\t       \"Starting new chain with statement:\\n\");\n-\t\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t      print_gimple_stmt (dump_file, stmt, 0);\n \t\t      fprintf (dump_file, \"The base object is:\\n\");\n-\t\t      print_generic_expr (dump_file, base_addr, 0);\n+\t\t      print_generic_expr (dump_file, base_addr);\n \t\t      fprintf (dump_file, \"\\n\");\n \t\t    }\n \t\t}"}, {"sha": "25f751a60baa051073a67615e5403b2f859cccd6", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1772,61 +1772,61 @@ dump_candidate (slsr_cand_t c)\n {\n   fprintf (dump_file, \"%3d  [%d] \", c->cand_num,\n \t   gimple_bb (c->cand_stmt)->index);\n-  print_gimple_stmt (dump_file, c->cand_stmt, 0, 0);\n+  print_gimple_stmt (dump_file, c->cand_stmt, 0);\n   switch (c->kind)\n     {\n     case CAND_MULT:\n       fputs (\"     MULT : (\", dump_file);\n-      print_generic_expr (dump_file, c->base_expr, 0);\n+      print_generic_expr (dump_file, c->base_expr);\n       fputs (\" + \", dump_file);\n       print_decs (c->index, dump_file);\n       fputs (\") * \", dump_file);\n       if (TREE_CODE (c->stride) != INTEGER_CST\n \t  && c->stride_type != TREE_TYPE (c->stride))\n \t{\n \t  fputs (\"(\", dump_file);\n-\t  print_generic_expr (dump_file, c->stride_type, 0);\n+\t  print_generic_expr (dump_file, c->stride_type);\n \t  fputs (\")\", dump_file);\n \t}\n-      print_generic_expr (dump_file, c->stride, 0);\n+      print_generic_expr (dump_file, c->stride);\n       fputs (\" : \", dump_file);\n       break;\n     case CAND_ADD:\n       fputs (\"     ADD  : \", dump_file);\n-      print_generic_expr (dump_file, c->base_expr, 0);\n+      print_generic_expr (dump_file, c->base_expr);\n       fputs (\" + (\", dump_file);\n       print_decs (c->index, dump_file);\n       fputs (\" * \", dump_file);\n       if (TREE_CODE (c->stride) != INTEGER_CST\n \t  && c->stride_type != TREE_TYPE (c->stride))\n \t{\n \t  fputs (\"(\", dump_file);\n-\t  print_generic_expr (dump_file, c->stride_type, 0);\n+\t  print_generic_expr (dump_file, c->stride_type);\n \t  fputs (\")\", dump_file);\n \t}\n-      print_generic_expr (dump_file, c->stride, 0);\n+      print_generic_expr (dump_file, c->stride);\n       fputs (\") : \", dump_file);\n       break;\n     case CAND_REF:\n       fputs (\"     REF  : \", dump_file);\n-      print_generic_expr (dump_file, c->base_expr, 0);\n+      print_generic_expr (dump_file, c->base_expr);\n       fputs (\" + (\", dump_file);\n-      print_generic_expr (dump_file, c->stride, 0);\n+      print_generic_expr (dump_file, c->stride);\n       fputs (\") + \", dump_file);\n       print_decs (c->index, dump_file);\n       fputs (\" : \", dump_file);\n       break;\n     case CAND_PHI:\n       fputs (\"     PHI  : \", dump_file);\n-      print_generic_expr (dump_file, c->base_expr, 0);\n+      print_generic_expr (dump_file, c->base_expr);\n       fputs (\" + (unknown * \", dump_file);\n-      print_generic_expr (dump_file, c->stride, 0);\n+      print_generic_expr (dump_file, c->stride);\n       fputs (\") : \", dump_file);\n       break;\n     default:\n       gcc_unreachable ();\n     }\n-  print_generic_expr (dump_file, c->cand_type, 0);\n+  print_generic_expr (dump_file, c->cand_type);\n   fprintf (dump_file, \"\\n     basis: %d  dependent: %d  sibling: %d\\n\",\n \t   c->basis, c->dependent, c->sibling);\n   fprintf (dump_file, \"     next-interp: %d  dead-savings: %d\\n\",\n@@ -1858,7 +1858,7 @@ ssa_base_cand_dump_callback (cand_chain **slot, void *ignored ATTRIBUTE_UNUSED)\n   const_cand_chain_t chain = *slot;\n   cand_chain_t p;\n \n-  print_generic_expr (dump_file, chain->base_expr, 0);\n+  print_generic_expr (dump_file, chain->base_expr);\n   fprintf (dump_file, \" -> %d\", chain->cand->cand_num);\n \n   for (p = chain->next; p; p = p->next)\n@@ -1897,7 +1897,7 @@ dump_incr_vec (void)\n \t  fprintf (dump_file, \"\\n     count:       %d\", incr_vec[i].count);\n \t  fprintf (dump_file, \"\\n     cost:        %d\", incr_vec[i].cost);\n \t  fputs (\"\\n     initializer: \", dump_file);\n-\t  print_generic_expr (dump_file, incr_vec[i].initializer, 0);\n+\t  print_generic_expr (dump_file, incr_vec[i].initializer);\n \t  fputs (\"\\n\\n\", dump_file);\n \t}\n     }\n@@ -1947,7 +1947,7 @@ replace_refs (slsr_cand_t c)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fputs (\"Replacing reference: \", dump_file);\n-      print_gimple_stmt (dump_file, c->cand_stmt, 0, 0);\n+      print_gimple_stmt (dump_file, c->cand_stmt, 0);\n     }\n \n   if (gimple_vdef (c->cand_stmt))\n@@ -1964,7 +1964,7 @@ replace_refs (slsr_cand_t c)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fputs (\"With: \", dump_file);\n-      print_gimple_stmt (dump_file, c->cand_stmt, 0, 0);\n+      print_gimple_stmt (dump_file, c->cand_stmt, 0);\n       fputs (\"\\n\", dump_file);\n     }\n \n@@ -2078,7 +2078,7 @@ replace_mult_candidate (slsr_cand_t c, tree basis_name, widest_int bump)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fputs (\"Replacing: \", dump_file);\n-\t  print_gimple_stmt (dump_file, c->cand_stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, c->cand_stmt, 0);\n \t}\n \n       if (bump == 0)\n@@ -2138,7 +2138,7 @@ replace_mult_candidate (slsr_cand_t c, tree basis_name, widest_int bump)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fputs (\"With: \", dump_file);\n-\t  print_gimple_stmt (dump_file, stmt_to_print, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt_to_print, 0);\n \t  fputs (\"\\n\", dump_file);\n   \t}\n     }\n@@ -2292,10 +2292,10 @@ create_add_on_incoming_edge (slsr_cand_t c, tree basis_name,\n \t{\n \t  fprintf (dump_file, \"Inserting cast in block %d: \",\n \t\t   insert_bb->index);\n-\t  print_gimple_stmt (dump_file, cast_stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, cast_stmt, 0);\n \t}\n       fprintf (dump_file, \"Inserting in block %d: \", insert_bb->index);\n-      print_gimple_stmt (dump_file, new_stmt, 0, 0);\n+      print_gimple_stmt (dump_file, new_stmt, 0);\n     }\n \n   return lhs;\n@@ -2384,7 +2384,7 @@ create_phi_basis (slsr_cand_t c, gimple *from_phi, tree basis_name,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fputs (\"Introducing new phi basis: \", dump_file);\n-      print_gimple_stmt (dump_file, phi, 0, 0);\n+      print_gimple_stmt (dump_file, phi, 0);\n     }\n \n   return name;\n@@ -3282,10 +3282,10 @@ insert_initializers (slsr_cand_t c)\n \t  if (cast_stmt)\n \t    {\n \t      fputs (\"Inserting stride cast: \", dump_file);\n-\t      print_gimple_stmt (dump_file, cast_stmt, 0, 0);\n+\t      print_gimple_stmt (dump_file, cast_stmt, 0);\n \t    }\n \t  fputs (\"Inserting initializer: \", dump_file);\n-\t  print_gimple_stmt (dump_file, init_stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, init_stmt, 0);\n \t}\n     }\n }\n@@ -3345,7 +3345,7 @@ all_phi_incrs_profitable (slsr_cand_t c, gphi *phi)\n \t\t{\n \t\t  fprintf (dump_file, \"  Conditional candidate %d, phi: \",\n \t\t\t   c->cand_num);\n-\t\t  print_gimple_stmt (dump_file, phi, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, phi, 0);\n \t\t  fputs (\"    increment: \", dump_file);\n \t\t  print_decs (increment, dump_file);\n \t\t  if (j < 0)\n@@ -3389,7 +3389,7 @@ introduce_cast_before_cand (slsr_cand_t c, tree to_type, tree from_expr)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fputs (\"  Inserting: \", dump_file);\n-      print_gimple_stmt (dump_file, cast_stmt, 0, 0);\n+      print_gimple_stmt (dump_file, cast_stmt, 0);\n     }\n \n   return cast_lhs;\n@@ -3457,7 +3457,7 @@ replace_one_candidate (slsr_cand_t c, unsigned i, tree basis_name)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fputs (\"Replacing: \", dump_file);\n-      print_gimple_stmt (dump_file, c->cand_stmt, 0, 0);\n+      print_gimple_stmt (dump_file, c->cand_stmt, 0);\n       stmt_to_print = c->cand_stmt;\n     }\n \n@@ -3590,7 +3590,7 @@ replace_one_candidate (slsr_cand_t c, unsigned i, tree basis_name)\n   if (dump_file && (dump_flags & TDF_DETAILS) && stmt_to_print)\n     {\n       fputs (\"With: \", dump_file);\n-      print_gimple_stmt (dump_file, stmt_to_print, 0, 0);\n+      print_gimple_stmt (dump_file, stmt_to_print, 0);\n       fputs (\"\\n\", dump_file);\n     }\n }"}, {"sha": "acaab8bd5aa99a2d875f58a043f85dcfdbf7e466", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -12217,7 +12217,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n       if (!(fallback & fb_mayfail))\n \t{\n \t  fprintf (stderr, \"gimplification failed:\\n\");\n-\t  print_generic_expr (stderr, *expr_p, 0);\n+\t  print_generic_expr (stderr, *expr_p);\n \t  debug_tree (*expr_p);\n \t  internal_error (\"gimplification failed\");\n \t}"}, {"sha": "be54b75baf629be5b9e855b2add403f35e31f073", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1133,7 +1133,7 @@ is_valid_rename (tree rename, basic_block def_bb, basic_block use_bb,\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"[codegen] rename not in loop closed ssa: \");\n-\t  print_generic_expr (dump_file, rename, 0);\n+\t  print_generic_expr (dump_file, rename);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n       return false;\n@@ -1233,9 +1233,9 @@ set_rename (tree old_name, tree expr)\n   if (dump_file)\n     {\n       fprintf (dump_file, \"[codegen] setting rename: old_name = \");\n-      print_generic_expr (dump_file, old_name, 0);\n+      print_generic_expr (dump_file, old_name);\n       fprintf (dump_file, \", new_name = \");\n-      print_generic_expr (dump_file, expr, 0);\n+      print_generic_expr (dump_file, expr);\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -1656,7 +1656,7 @@ rename_uses (gimple *copy, gimple_stmt_iterator *gsi_tgt, basic_block old_bb,\n   if (dump_file)\n     {\n       fprintf (dump_file, \"[codegen] renaming uses of stmt: \");\n-      print_gimple_stmt (dump_file, copy, 0, 0);\n+      print_gimple_stmt (dump_file, copy, 0);\n     }\n \n   use_operand_p use_p;\n@@ -1668,7 +1668,7 @@ rename_uses (gimple *copy, gimple_stmt_iterator *gsi_tgt, basic_block old_bb,\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"[codegen] renaming old_name = \");\n-\t  print_generic_expr (dump_file, old_name, 0);\n+\t  print_generic_expr (dump_file, old_name);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n@@ -1688,7 +1688,7 @@ rename_uses (gimple *copy, gimple_stmt_iterator *gsi_tgt, basic_block old_bb,\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"[codegen] from rename_map: new_name = \");\n-\t      print_generic_expr (dump_file, new_expr, 0);\n+\t      print_generic_expr (dump_file, new_expr);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \n@@ -1718,7 +1718,7 @@ rename_uses (gimple *copy, gimple_stmt_iterator *gsi_tgt, basic_block old_bb,\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"[codegen] not in rename map, scev: \");\n-\t  print_generic_expr (dump_file, new_expr, 0);\n+\t  print_generic_expr (dump_file, new_expr);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n@@ -1906,7 +1906,7 @@ copy_loop_phi_nodes (basic_block bb, basic_block new_bb)\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"[codegen] creating loop-phi node: \");\n-\t  print_gimple_stmt (dump_file, new_phi, 0, 0);\n+\t  print_gimple_stmt (dump_file, new_phi, 0);\n \t}\n     }\n \n@@ -2066,7 +2066,7 @@ add_close_phis_to_merge_points (gphi *old_close_phi, gphi *new_close_phi,\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"[codegen] Adding guard-phi: \");\n-\t  print_gimple_stmt (dump_file, merge_phi, 0, 0);\n+\t  print_gimple_stmt (dump_file, merge_phi, 0);\n \t}\n \n       update_stmt (merge_phi);\n@@ -2112,7 +2112,7 @@ copy_loop_close_phi_args (basic_block old_bb, basic_block new_bb, bool postpone)\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"[codegen] Adding loop close phi: \");\n-\t  print_gimple_stmt (dump_file, new_close_phi, 0, 0);\n+\t  print_gimple_stmt (dump_file, new_close_phi, 0);\n \t}\n \n       update_stmt (new_close_phi);\n@@ -2136,7 +2136,7 @@ copy_loop_close_phi_args (basic_block old_bb, basic_block new_bb, bool postpone)\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"[codegen] postpone close phi nodes: \");\n-\t      print_gimple_stmt (dump_file, new_close_phi, 0, 0);\n+\t      print_gimple_stmt (dump_file, new_close_phi, 0);\n \t    }\n \t  continue;\n \t}\n@@ -2385,7 +2385,7 @@ copy_cond_phi_args (gphi *phi, gphi *new_phi, vec<tree> iv_map, bool postpone)\n \t    {\n \t      fprintf (dump_file,\n \t\t       \"[codegen] parameter argument to phi, new_expr: \");\n-\t      print_generic_expr (dump_file, new_phi_args[i], 0);\n+\t      print_generic_expr (dump_file, new_phi_args[i]);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  continue;\n@@ -2414,7 +2414,7 @@ copy_cond_phi_args (gphi *phi, gphi *new_phi, vec<tree> iv_map, bool postpone)\n \t\t{\n \t\t  fprintf (dump_file,\n \t\t\t   \"[codegen] scev analyzeable, new_expr: \");\n-\t\t  print_generic_expr (dump_file, new_expr, 0);\n+\t\t  print_generic_expr (dump_file, new_expr);\n \t\t  fprintf (dump_file, \"\\n\");\n \t\t}\n \t      gsi_insert_earliest (stmts);\n@@ -2428,7 +2428,7 @@ copy_cond_phi_args (gphi *phi, gphi *new_phi, vec<tree> iv_map, bool postpone)\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"[codegen] postpone cond phi nodes: \");\n-\t      print_gimple_stmt (dump_file, new_phi, 0, 0);\n+\t      print_gimple_stmt (dump_file, new_phi, 0);\n \t    }\n \n \t  new_phi_args [i] = NULL_TREE;\n@@ -2563,7 +2563,7 @@ graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"[codegen] inserting statement: \");\n-\t  print_gimple_stmt (dump_file, copy, 0, 0);\n+\t  print_gimple_stmt (dump_file, copy, 0);\n \t}\n \n       maybe_duplicate_eh_stmt (copy, stmt);\n@@ -2816,7 +2816,7 @@ translate_pending_phi_nodes ()\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"[codegen] translating pending old-phi: \");\n-\t  print_gimple_stmt (dump_file, old_phi, 0, 0);\n+\t  print_gimple_stmt (dump_file, old_phi, 0);\n \t}\n \n       auto_vec <tree, 1> iv_map;\n@@ -2831,7 +2831,7 @@ translate_pending_phi_nodes ()\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"[codegen] to new-phi: \");\n-\t  print_gimple_stmt (dump_file, new_phi, 0, 0);\n+\t  print_gimple_stmt (dump_file, new_phi, 0);\n \t}\n       if (codegen_error_p ())\n \treturn;"}, {"sha": "a22243b3335a194579d893cc969314f1e0e6a1b0", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -192,7 +192,7 @@ print_pdr (FILE *file, poly_dr_p pdr)\n     }\n \n   fprintf (file, \"in gimple stmt: \");\n-  print_gimple_stmt (file, pdr->stmt, 0, 0);\n+  print_gimple_stmt (file, pdr->stmt, 0);\n   fprintf (file, \"data accesses: \");\n   print_isl_map (file, pdr->accesses);\n   fprintf (file, \"subscript sizes: \");\n@@ -323,7 +323,7 @@ dump_gbb_cases (FILE *file, gimple_poly_bb_p gbb)\n   fprintf (file, \"cases bb_%d (\\n\", GBB_BB (gbb)->index);\n \n   FOR_EACH_VEC_ELT (cases, i, stmt)\n-    print_gimple_stmt (file, stmt, 0, 0);\n+    print_gimple_stmt (file, stmt, 0);\n \n   fprintf (file, \")\\n\");\n }\n@@ -347,7 +347,7 @@ dump_gbb_conditions (FILE *file, gimple_poly_bb_p gbb)\n   fprintf (file, \"conditions bb_%d (\\n\", GBB_BB (gbb)->index);\n \n   FOR_EACH_VEC_ELT (conditions, i, stmt)\n-    print_gimple_stmt (file, stmt, 0, 0);\n+    print_gimple_stmt (file, stmt, 0);\n \n   fprintf (file, \")\\n\");\n }\n@@ -435,7 +435,7 @@ print_scop_params (FILE *file, scop_p scop)\n   fprintf (file, \"parameters (\");\n   FOR_EACH_VEC_ELT (scop->scop_info->params, i, t)\n     {\n-      print_generic_expr (file, t, 0);\n+      print_generic_expr (file, t);\n       fprintf (file, \", \");\n     }\n   fprintf (file, \")\\n\");"}, {"sha": "e3a627df46d805b8de6b4f7a4bf3e2675bb18be8", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1748,10 +1748,10 @@ build_cross_bb_scalars_def (scop_p scop, tree def, basic_block def_bb,\n       {\n \twrites->safe_push (def);\n \tDEBUG_PRINT (dp << \"Adding scalar write: \";\n-\t\t     print_generic_expr (dump_file, def, 0);\n+\t\t     print_generic_expr (dump_file, def);\n \t\t     dp << \"\\nFrom stmt: \";\n \t\t     print_gimple_stmt (dump_file,\n-\t\t\t\t\tSSA_NAME_DEF_STMT (def), 0, 0));\n+\t\t\t\t\tSSA_NAME_DEF_STMT (def), 0));\n \t/* This is required by the FOR_EACH_IMM_USE_STMT when we want to break\n \t   before all the uses have been visited.  */\n \tBREAK_FROM_IMM_USE_STMT (imm_iter);\n@@ -1777,9 +1777,9 @@ build_cross_bb_scalars_use (scop_p scop, tree use, gimple *use_stmt,\n   if (gimple_bb (def_stmt) != gimple_bb (use_stmt))\n     {\n       DEBUG_PRINT (dp << \"Adding scalar read: \";\n-\t\t   print_generic_expr (dump_file, use, 0);\n+\t\t   print_generic_expr (dump_file, use);\n \t\t   dp << \"\\nFrom stmt: \";\n-\t\t   print_gimple_stmt (dump_file, use_stmt, 0, 0));\n+\t\t   print_gimple_stmt (dump_file, use_stmt, 0));\n       reads->safe_push (std::make_pair (use_stmt, use));\n     }\n }\n@@ -1973,9 +1973,9 @@ gather_bbs::before_dom_children (basic_block bb)\n \t\t     dp << \"read: \";\n \t\t   else\n \t\t     dp << \"write: \";\n-\t\t   print_generic_expr (dump_file, dr->ref, 0);\n+\t\t   print_generic_expr (dump_file, dr->ref);\n \t\t   dp << \"\\nFrom stmt: \";\n-\t\t   print_gimple_stmt (dump_file, dr->stmt, 0, 0));\n+\t\t   print_gimple_stmt (dump_file, dr->stmt, 0));\n \n       scop->drs.safe_push (dr_info (dr, pbb));\n     }"}, {"sha": "865de96bb616fe7f5d77b72ac758fc20f9225640", "filename": "gcc/hsa-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fhsa-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fhsa-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-dump.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -726,7 +726,7 @@ dump_hsa_immed (FILE *f, hsa_op_immed *imm)\n     & imm->m_type;\n \n   if (imm->m_tree_value)\n-    print_generic_expr (f, imm->m_tree_value, 0);\n+    print_generic_expr (f, imm->m_tree_value);\n   else\n     {\n       if (unsigned_int_type)"}, {"sha": "b97d7af854f8bd7e6b409a4697a9e5d9fab988e0", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -427,10 +427,10 @@ print_ipcp_constant_value (FILE * f, tree v)\n       && TREE_CODE (TREE_OPERAND (v, 0)) == CONST_DECL)\n     {\n       fprintf (f, \"& \");\n-      print_generic_expr (f, DECL_INITIAL (TREE_OPERAND (v, 0)), 0);\n+      print_generic_expr (f, DECL_INITIAL (TREE_OPERAND (v, 0)));\n     }\n   else\n-    print_generic_expr (f, v, 0);\n+    print_generic_expr (f, v);\n }\n \n /* Print V which is extracted from a value in a lattice to F.  */\n@@ -3594,7 +3594,7 @@ get_replacement_map (struct ipa_node_params *info, tree value, int parm_num)\n       ipa_dump_param (dump_file, info, parm_num);\n \n       fprintf (dump_file, \" with const \");\n-      print_generic_expr (dump_file, value, 0);\n+      print_generic_expr (dump_file, value);\n       fprintf (dump_file, \"\\n\");\n     }\n   replace_map->old_tree = NULL;"}, {"sha": "dcfed9e4c4c39f58251e87ea5bf96d4a5c41507f", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -558,7 +558,7 @@ dump_condition (FILE *f, conditions conditions, int cond)\n \t  return;\n \t}\n       fprintf (f, \" %s \", op_symbol_code (c->code));\n-      print_generic_expr (f, c->val, 1);\n+      print_generic_expr (f, c->val);\n     }\n }\n \n@@ -2710,7 +2710,7 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n \t\t  fprintf (dump_file, \"  \");\n-\t\t  print_gimple_stmt (dump_file, gsi_stmt (bsi), 0, 0);\n+\t\t  print_gimple_stmt (dump_file, gsi_stmt (bsi), 0);\n \t\t}\n \t      predicate_for_phi_result (info, bsi.phi (), &phi_predicate,\n \t\t\t\t\tnonconstant_names);\n@@ -2739,7 +2739,7 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"  \");\n-\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t      print_gimple_stmt (dump_file, stmt, 0);\n \t      fprintf (dump_file, \"\\t\\tfreq:%3.2f size:%3i time:%3i\\n\",\n \t\t       ((double) freq) / CGRAPH_FREQ_BASE, this_size,\n \t\t       this_time);"}, {"sha": "abbcfbf5adaa79989da83e61a825e4993d7df7e5", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1398,7 +1398,7 @@ check_stmt_for_type_change (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef, void *data)\n \tif (dump_file)\n \t  {\n \t    fprintf (dump_file, \"  Checking constructor call: \");\n-\t    print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t    print_gimple_stmt (dump_file, stmt, 0);\n \t  }\n \n \t/* See if THIS parameter seems like instance pointer.  */\n@@ -1460,7 +1460,7 @@ check_stmt_for_type_change (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef, void *data)\n      if (dump_file)\n \t{\n           fprintf (dump_file, \"  Function call may change dynamic type:\");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t}\n      tci->speculative++;\n      return csftc_abort_walking_p (tci->speculative);\n@@ -1473,7 +1473,7 @@ check_stmt_for_type_change (ao_ref *ao ATTRIBUTE_UNUSED, tree vdef, void *data)\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"  Checking vtbl store: \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t}\n \n       type = extr_type_from_vtbl_ptr_store (stmt, tci, &offset);\n@@ -1653,9 +1653,9 @@ ipa_polymorphic_call_context::get_dynamic_type (tree instance,\n   if (dump_file)\n     {\n       fprintf (dump_file, \"Determining dynamic type for call: \");\n-      print_gimple_stmt (dump_file, call, 0, 0);\n+      print_gimple_stmt (dump_file, call, 0);\n       fprintf (dump_file, \"  Starting walk at: \");\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n       fprintf (dump_file, \"  instance pointer: \");\n       print_generic_expr (dump_file, otr_object, TDF_SLIM);\n       fprintf (dump_file, \"  Outer instance pointer: \");"}, {"sha": "8b06a219b2f9d680a825ac86906b6b339e4c3bef", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -257,7 +257,7 @@ ipa_dump_param (FILE *file, struct ipa_node_params *info, int i)\n   if ((*info->descriptors)[i].decl_or_type)\n     {\n       fprintf (file, \" \");\n-      print_generic_expr (file, (*info->descriptors)[i].decl_or_type, 0);\n+      print_generic_expr (file, (*info->descriptors)[i].decl_or_type);\n     }\n }\n \n@@ -315,13 +315,12 @@ ipa_print_node_jump_functions_for_edge (FILE *f, struct cgraph_edge *cs)\n \t{\n \t  tree val = jump_func->value.constant.value;\n \t  fprintf (f, \"CONST: \");\n-\t  print_generic_expr (f, val, 0);\n+\t  print_generic_expr (f, val);\n \t  if (TREE_CODE (val) == ADDR_EXPR\n \t      && TREE_CODE (TREE_OPERAND (val, 0)) == CONST_DECL)\n \t    {\n \t      fprintf (f, \" -> \");\n-\t      print_generic_expr (f, DECL_INITIAL (TREE_OPERAND (val, 0)),\n-\t\t\t\t  0);\n+\t      print_generic_expr (f, DECL_INITIAL (TREE_OPERAND (val, 0)));\n \t    }\n \t  fprintf (f, \"\\n\");\n \t}\n@@ -334,8 +333,7 @@ ipa_print_node_jump_functions_for_edge (FILE *f, struct cgraph_edge *cs)\n \t  if (jump_func->value.pass_through.operation != NOP_EXPR)\n \t    {\n \t      fprintf (f, \" \");\n-\t      print_generic_expr (f,\n-\t\t\t\t  jump_func->value.pass_through.operand, 0);\n+\t      print_generic_expr (f, jump_func->value.pass_through.operand);\n \t    }\n \t  if (jump_func->value.pass_through.agg_preserved)\n \t    fprintf (f, \", agg_preserved\");\n@@ -369,7 +367,7 @@ ipa_print_node_jump_functions_for_edge (FILE *f, struct cgraph_edge *cs)\n \t      else\n \t\t{\n \t\t  fprintf (f, \"cst: \");\n-\t\t  print_generic_expr (f, item->value, 0);\n+\t\t  print_generic_expr (f, item->value);\n \t\t}\n \t      fprintf (f, \"\\n\");\n \t    }\n@@ -4465,7 +4463,7 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gcall *stmt,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"replacing stmt:\");\n-      print_gimple_stmt (dump_file, gsi_stmt (gsi), 0, 0);\n+      print_gimple_stmt (dump_file, gsi_stmt (gsi), 0);\n     }\n \n   new_stmt = gimple_build_call_vec (callee_decl, vargs);\n@@ -4491,7 +4489,7 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gcall *stmt,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"with stmt:\");\n-      print_gimple_stmt (dump_file, new_stmt, 0, 0);\n+      print_gimple_stmt (dump_file, new_stmt, 0);\n       fprintf (dump_file, \"\\n\");\n     }\n   gsi_replace (&gsi, new_stmt, true);\n@@ -4533,9 +4531,9 @@ ipa_modify_expr (tree *expr, bool convert,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"About to replace expr \");\n-      print_generic_expr (dump_file, *expr, 0);\n+      print_generic_expr (dump_file, *expr);\n       fprintf (dump_file, \" with \");\n-      print_generic_expr (dump_file, src, 0);\n+      print_generic_expr (dump_file, src);\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -4758,21 +4756,21 @@ ipa_dump_param_adjustments (FILE *file, ipa_parm_adjustment_vec adjustments,\n \tfirst = false;\n \n       fprintf (file, \"%i. base_index: %i - \", i, adj->base_index);\n-      print_generic_expr (file, parms[adj->base_index], 0);\n+      print_generic_expr (file, parms[adj->base_index]);\n       if (adj->base)\n \t{\n \t  fprintf (file, \", base: \");\n-\t  print_generic_expr (file, adj->base, 0);\n+\t  print_generic_expr (file, adj->base);\n \t}\n       if (adj->new_decl)\n \t{\n \t  fprintf (file, \", new_decl: \");\n-\t  print_generic_expr (file, adj->new_decl, 0);\n+\t  print_generic_expr (file, adj->new_decl);\n \t}\n       if (adj->new_ssa_base)\n \t{\n \t  fprintf (file, \", new_ssa_base: \");\n-\t  print_generic_expr (file, adj->new_ssa_base, 0);\n+\t  print_generic_expr (file, adj->new_ssa_base);\n \t}\n \n       if (adj->op == IPA_PARM_OP_COPY)\n@@ -4800,7 +4798,7 @@ ipa_dump_agg_replacement_values (FILE *f, struct ipa_agg_replacement_value *av)\n     {\n       fprintf (f, \"%s %i[\" HOST_WIDE_INT_PRINT_DEC \"]=\", comma ? \",\" : \"\",\n \t       av->index, av->offset);\n-      print_generic_expr (f, av->value, 0);\n+      print_generic_expr (f, av->value);\n       comma = true;\n     }\n   fprintf (f, \"\\n\");\n@@ -5647,9 +5645,9 @@ ipcp_modif_dom_walker::before_dom_children (basic_block bb)\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file, \"    const \");\n-\t\t  print_generic_expr (dump_file, v->value, 0);\n+\t\t  print_generic_expr (dump_file, v->value);\n \t\t  fprintf (dump_file, \"  can't be converted to type of \");\n-\t\t  print_generic_expr (dump_file, rhs, 0);\n+\t\t  print_generic_expr (dump_file, rhs);\n \t\t  fprintf (dump_file, \"\\n\");\n \t\t}\n \t      continue;\n@@ -5661,15 +5659,15 @@ ipcp_modif_dom_walker::before_dom_children (basic_block bb)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Modifying stmt:\\n  \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t}\n       gimple_assign_set_rhs_from_tree (&gsi, val);\n       update_stmt (stmt);\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"into:\\n  \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n "}, {"sha": "2379ec88e13b8dfa82bc87d9127c1861ec64bbb1", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -739,7 +739,7 @@ check_stmt (gimple_stmt_iterator *gsip, funct_state local, bool ipa)\n   if (dump_file)\n     {\n       fprintf (dump_file, \"  scanning: \");\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n     }\n \n   if (gimple_has_volatile_ops (stmt)\n@@ -2013,7 +2013,7 @@ pass_nothrow::execute (function *)\n \t    if (dump_file)\n \t      {\n \t\tfprintf (dump_file, \"Statement can throw: \");\n-\t\tprint_gimple_stmt (dump_file, gsi_stmt (gsi), 0, 0);\n+\t\tprint_gimple_stmt (dump_file, gsi_stmt (gsi), 0);\n \t      }\n \t    return 0;\n \t  }"}, {"sha": "eb1f4c3f74dbdb5e6950a977fee4040837b21d46", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1841,7 +1841,7 @@ execute_split_functions (void)\n \t    {\n \t      fprintf (dump_file, \"  freq:%6i size:%3i time:%3i \",\n \t\t       freq, this_size, this_time);\n-\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t      print_gimple_stmt (dump_file, stmt, 0);\n \t    }\n \n \t  if ((flag_sanitize & SANITIZE_THREAD)"}, {"sha": "f02b4f8905e3e9b057f32e8665458ad9b7fdf6eb", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -788,7 +788,7 @@ dump_oacc_loop_part (FILE *file, gcall *from, int depth,\n \t  if (k == kind && stmt != from)\n \t    break;\n \t}\n-      print_gimple_stmt (file, stmt, depth * 2 + 2, 0);\n+      print_gimple_stmt (file, stmt, depth * 2 + 2);\n \n       gsi_next (&gsi);\n       while (gsi_end_p (gsi))\n@@ -808,7 +808,7 @@ dump_oacc_loop (FILE *file, oacc_loop *loop, int depth)\n \t   LOCATION_FILE (loop->loc), LOCATION_LINE (loop->loc));\n \n   if (loop->marker)\n-    print_gimple_stmt (file, loop->marker, depth * 2, 0);\n+    print_gimple_stmt (file, loop->marker, depth * 2);\n \n   if (loop->routine)\n     fprintf (file, \"%*sRoutine %s:%u:%s\\n\","}, {"sha": "f9809d54006c0b4e9fabc046e709f7ba7687e04c", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1275,7 +1275,7 @@ tm_log_emit (void)\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"TM thread private mem logging: \");\n-\t  print_generic_expr (dump_file, lp->addr, 0);\n+\t  print_generic_expr (dump_file, lp->addr);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n@@ -3582,7 +3582,7 @@ tm_memopt_accumulate_memops (basic_block bb)\n \t  fprintf (dump_file, \"TM memopt (%s): value num=%d, BB=%d, addr=\",\n \t\t   is_tm_load (stmt) ? \"LOAD\" : \"STORE\", loc,\n \t\t   gimple_bb (stmt)->index);\n-\t  print_generic_expr (dump_file, gimple_call_arg (stmt, 0), 0);\n+\t  print_generic_expr (dump_file, gimple_call_arg (stmt, 0));\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }\n@@ -3610,7 +3610,7 @@ dump_tm_memopt_set (const char *set_name, bitmap bits)\n       gcc_assert (mem->value_id == i);\n       fprintf (dump_file, \"%s\", comma);\n       comma = \", \";\n-      print_generic_expr (dump_file, mem->addr, 0);\n+      print_generic_expr (dump_file, mem->addr);\n     }\n   fprintf (dump_file, \"]\\n\");\n }\n@@ -3910,7 +3910,7 @@ dump_tm_memopt_transform (gimple *stmt)\n   if (dump_file)\n     {\n       fprintf (dump_file, \"TM memopt: transforming: \");\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n       fprintf (dump_file, \"\\n\");\n     }\n }"}, {"sha": "7dbd0a8c247417959fe9b5995eadfc4d61362a11", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -5340,7 +5340,7 @@ gimple_verify_flow_info (void)\n \t  if (prev_stmt && DECL_NONLOCAL (label))\n \t    {\n \t      error (\"nonlocal label \");\n-\t      print_generic_expr (stderr, label, 0);\n+\t      print_generic_expr (stderr, label);\n \t      fprintf (stderr, \" is not first in a sequence of labels in bb %d\",\n \t\t       bb->index);\n \t      err = 1;\n@@ -5349,7 +5349,7 @@ gimple_verify_flow_info (void)\n \t  if (prev_stmt && EH_LANDING_PAD_NR (label) != 0)\n \t    {\n \t      error (\"EH landing pad label \");\n-\t      print_generic_expr (stderr, label, 0);\n+\t      print_generic_expr (stderr, label);\n \t      fprintf (stderr, \" is not first in a sequence of labels in bb %d\",\n \t\t       bb->index);\n \t      err = 1;\n@@ -5358,7 +5358,7 @@ gimple_verify_flow_info (void)\n \t  if (label_to_block (label) != bb)\n \t    {\n \t      error (\"label \");\n-\t      print_generic_expr (stderr, label, 0);\n+\t      print_generic_expr (stderr, label);\n \t      fprintf (stderr, \" to block does not match in bb %d\",\n \t\t       bb->index);\n \t      err = 1;\n@@ -5367,7 +5367,7 @@ gimple_verify_flow_info (void)\n \t  if (decl_function_context (label) != current_function_decl)\n \t    {\n \t      error (\"label \");\n-\t      print_generic_expr (stderr, label, 0);\n+\t      print_generic_expr (stderr, label);\n \t      fprintf (stderr, \" has incorrect context in bb %d\",\n \t\t       bb->index);\n \t      err = 1;\n@@ -5392,7 +5392,7 @@ gimple_verify_flow_info (void)\n \t  if (glabel *label_stmt = dyn_cast <glabel *> (stmt))\n \t    {\n \t      error (\"label \");\n-\t      print_generic_expr (stderr, gimple_label_label (label_stmt), 0);\n+\t      print_generic_expr (stderr, gimple_label_label (label_stmt));\n \t      fprintf (stderr, \" in the middle of basic block %d\", bb->index);\n \t      err = 1;\n \t    }\n@@ -5534,9 +5534,9 @@ gimple_verify_flow_info (void)\n \t\t    && !tree_int_cst_lt (CASE_LOW (prev), CASE_LOW (c)))\n \t\t  {\n \t\t    error (\"case labels not sorted: \");\n-\t\t    print_generic_expr (stderr, prev, 0);\n+\t\t    print_generic_expr (stderr, prev);\n \t\t    fprintf (stderr,\" is greater than \");\n-\t\t    print_generic_expr (stderr, c, 0);\n+\t\t    print_generic_expr (stderr, c);\n \t\t    fprintf (stderr,\" but comes before it.\\n\");\n \t\t    err = 1;\n \t\t  }\n@@ -7851,7 +7851,7 @@ print_loop (FILE *file, struct loop *loop, int indent, int verbosity)\n   else\n     fprintf (file, \", multiple latches\");\n   fprintf (file, \", niter = \");\n-  print_generic_expr (file, loop->nb_iterations, 0);\n+  print_generic_expr (file, loop->nb_iterations);\n \n   if (loop->any_upper_bound)\n     {"}, {"sha": "a08f081943522fdda3183867cc46b0a2191f7bed", "filename": "gcc/tree-chkp-opt.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-chkp-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-chkp-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp-opt.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -262,16 +262,16 @@ chkp_print_addr (const address_t &addr)\n \tfprintf (dump_file, \" + \");\n \n       if (addr.pol[n].var == NULL_TREE)\n-\tprint_generic_expr (dump_file, addr.pol[n].cst, 0);\n+\tprint_generic_expr (dump_file, addr.pol[n].cst);\n       else\n \t{\n \t  if (TREE_CODE (addr.pol[n].cst) != INTEGER_CST\n \t      || !integer_onep (addr.pol[n].cst))\n \t    {\n-\t      print_generic_expr (dump_file, addr.pol[n].cst, 0);\n+\t      print_generic_expr (dump_file, addr.pol[n].cst);\n \t      fprintf (dump_file, \" * \");\n \t    }\n-\t  print_generic_expr (dump_file, addr.pol[n].var, 0);\n+\t  print_generic_expr (dump_file, addr.pol[n].var);\n \t}\n     }\n }\n@@ -518,11 +518,11 @@ chkp_gather_checks_info (void)\n \t\t{\n \t\t  fprintf (dump_file, \"Adding check information:\\n\");\n \t\t  fprintf (dump_file, \"  bounds: \");\n-\t\t  print_generic_expr (dump_file, ci.bounds, 0);\n+\t\t  print_generic_expr (dump_file, ci.bounds);\n \t\t  fprintf (dump_file, \"\\n  address: \");\n \t\t  chkp_print_addr (ci.addr);\n \t\t  fprintf (dump_file, \"\\n  check: \");\n-\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, stmt, 0);\n \t\t}\n \t    }\n \t}\n@@ -543,11 +543,11 @@ chkp_get_check_result (struct check_info *ci, tree bounds)\n     {\n       fprintf (dump_file, \"Trying to compute result of the check\\n\");\n       fprintf (dump_file, \"  check: \");\n-      print_gimple_stmt (dump_file, ci->stmt, 0, 0);\n+      print_gimple_stmt (dump_file, ci->stmt, 0);\n       fprintf (dump_file, \"  address: \");\n       chkp_print_addr (ci->addr);\n       fprintf (dump_file, \"\\n  bounds: \");\n-      print_generic_expr (dump_file, bounds, 0);\n+      print_generic_expr (dump_file, bounds);\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -695,7 +695,7 @@ chkp_remove_check_if_pass (struct check_info *ci)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Trying to remove check: \");\n-      print_gimple_stmt (dump_file, ci->stmt, 0, 0);\n+      print_gimple_stmt (dump_file, ci->stmt, 0);\n     }\n \n   result = chkp_get_check_result (ci, ci->bounds);\n@@ -749,9 +749,9 @@ chkp_use_outer_bounds_if_possible (struct check_info *ci)\n     {\n       fprintf (dump_file, \"Check if bounds intersection is redundant: \\n\");\n       fprintf (dump_file, \"  check: \");\n-      print_gimple_stmt (dump_file, ci->stmt, 0, 0);\n+      print_gimple_stmt (dump_file, ci->stmt, 0);\n       fprintf (dump_file, \"  intersection: \");\n-      print_gimple_stmt (dump_file, bnd_def, 0, 0);\n+      print_gimple_stmt (dump_file, bnd_def, 0);\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -774,9 +774,9 @@ chkp_use_outer_bounds_if_possible (struct check_info *ci)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"  action: use \");\n-\t  print_generic_expr (dump_file, bnd2, 0);\n+\t  print_generic_expr (dump_file, bnd2);\n \t  fprintf (dump_file, \" instead of \");\n-\t  print_generic_expr (dump_file, ci->bounds, 0);\n+\t  print_generic_expr (dump_file, ci->bounds);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n@@ -1199,7 +1199,7 @@ chkp_reduce_bounds_lifetime (void)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Moving creation of \");\n-\t      print_generic_expr (dump_file, op, 0);\n+\t      print_generic_expr (dump_file, op);\n \t      fprintf (dump_file, \" down to its use.\\n\");\n \t    }\n "}, {"sha": "2300e989908a90982940cf29fd11728f9393e004", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -635,9 +635,9 @@ chkp_register_addr_bounds (tree obj, tree bnd)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Regsitered bound \");\n-      print_generic_expr (dump_file, bnd, 0);\n+      print_generic_expr (dump_file, bnd);\n       fprintf (dump_file, \" for address of \");\n-      print_generic_expr (dump_file, obj, 0);\n+      print_generic_expr (dump_file, obj);\n       fprintf (dump_file, \"\\n\");\n     }\n }\n@@ -659,7 +659,7 @@ chkp_mark_completed_bounds (tree bounds)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Marked bounds \");\n-      print_generic_expr (dump_file, bounds, 0);\n+      print_generic_expr (dump_file, bounds);\n       fprintf (dump_file, \" as completed\\n\");\n     }\n }\n@@ -688,9 +688,9 @@ chkp_register_incomplete_bounds (tree bounds, tree ptr)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Regsitered incomplete bounds \");\n-      print_generic_expr (dump_file, bounds, 0);\n+      print_generic_expr (dump_file, bounds);\n       fprintf (dump_file, \" for \");\n-      print_generic_expr (dump_file, ptr, 0);\n+      print_generic_expr (dump_file, ptr);\n       fprintf (dump_file, \"\\n\");\n     }\n }\n@@ -818,7 +818,7 @@ chkp_mark_invalid_bounds (tree bounds)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Marked bounds \");\n-      print_generic_expr (dump_file, bounds, 0);\n+      print_generic_expr (dump_file, bounds);\n       fprintf (dump_file, \" as invalid\\n\");\n     }\n }\n@@ -1209,9 +1209,9 @@ chkp_maybe_copy_and_register_bounds (tree ptr, tree bnd)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Using default def bounds \");\n-\t      print_generic_expr (dump_file, bnd, 0);\n+\t      print_generic_expr (dump_file, bnd);\n \t      fprintf (dump_file, \" for abnormal default def SSA name \");\n-\t      print_generic_expr (dump_file, ptr, 0);\n+\t      print_generic_expr (dump_file, ptr);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t}\n@@ -1234,9 +1234,9 @@ chkp_maybe_copy_and_register_bounds (tree ptr, tree bnd)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Creating a copy of bounds \");\n-\t      print_generic_expr (dump_file, bnd, 0);\n+\t      print_generic_expr (dump_file, bnd);\n \t      fprintf (dump_file, \" for abnormal SSA name \");\n-\t      print_generic_expr (dump_file, ptr, 0);\n+\t      print_generic_expr (dump_file, ptr);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \n@@ -1274,9 +1274,9 @@ chkp_maybe_copy_and_register_bounds (tree ptr, tree bnd)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Regsitered bound \");\n-      print_generic_expr (dump_file, bnd, 0);\n+      print_generic_expr (dump_file, bnd);\n       fprintf (dump_file, \" for pointer \");\n-      print_generic_expr (dump_file, ptr, 0);\n+      print_generic_expr (dump_file, ptr);\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -2307,9 +2307,9 @@ chkp_build_returned_bound (gcall *call)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Built returned bounds (\");\n-      print_generic_expr (dump_file, bounds, 0);\n+      print_generic_expr (dump_file, bounds);\n       fprintf (dump_file, \") for call: \");\n-      print_gimple_stmt (dump_file, call, 0, TDF_VOPS|TDF_MEMSYMS);\n+      print_gimple_stmt (dump_file, call, 0, TDF_VOPS | TDF_MEMSYMS);\n     }\n \n   bounds = chkp_maybe_copy_and_register_bounds (lhs, bounds);\n@@ -2390,7 +2390,7 @@ chkp_get_bound_for_parm (tree parm)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Built arg bounds (\");\n-\t      print_generic_expr (dump_file, bounds, 0);\n+\t      print_generic_expr (dump_file, bounds);\n \t      fprintf (dump_file, \") for arg: \");\n \t      print_node (dump_file, \"\", decl, 0);\n \t    }\n@@ -2405,11 +2405,11 @@ chkp_get_bound_for_parm (tree parm)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Using bounds \");\n-      print_generic_expr (dump_file, bounds, 0);\n+      print_generic_expr (dump_file, bounds);\n       fprintf (dump_file, \" for parm \");\n-      print_generic_expr (dump_file, parm, 0);\n+      print_generic_expr (dump_file, parm);\n       fprintf (dump_file, \" of type \");\n-      print_generic_expr (dump_file, TREE_TYPE (parm), 0);\n+      print_generic_expr (dump_file, TREE_TYPE (parm));\n       fprintf (dump_file, \".\\n\");\n     }\n \n@@ -2457,9 +2457,9 @@ chkp_build_bndldx (tree addr, tree ptr, gimple_stmt_iterator *gsi)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Generated bndldx for pointer \");\n-      print_generic_expr (dump_file, ptr, 0);\n+      print_generic_expr (dump_file, ptr);\n       fprintf (dump_file, \": \");\n-      print_gimple_stmt (dump_file, stmt, 0, TDF_VOPS|TDF_MEMSYMS);\n+      print_gimple_stmt (dump_file, stmt, 0, TDF_VOPS | TDF_MEMSYMS);\n     }\n \n   return bounds;\n@@ -2813,10 +2813,10 @@ chkp_get_bounds_by_definition (tree node, gimple *def_stmt,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Searching for bounds for node: \");\n-      print_generic_expr (dump_file, node, 0);\n+      print_generic_expr (dump_file, node);\n \n       fprintf (dump_file, \" using its definition: \");\n-      print_gimple_stmt (dump_file, def_stmt, 0, TDF_VOPS|TDF_MEMSYMS);\n+      print_gimple_stmt (dump_file, def_stmt, 0, TDF_VOPS | TDF_MEMSYMS);\n     }\n \n   switch (code)\n@@ -2857,7 +2857,7 @@ chkp_get_bounds_by_definition (tree node, gimple *def_stmt,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Unexpected var with no definition\\n\");\n-\t      print_generic_expr (dump_file, var, 0);\n+\t      print_generic_expr (dump_file, var);\n \t    }\n \t  internal_error (\"chkp_get_bounds_by_definition: Unexpected var of type %s\",\n \t\t\t  get_tree_code_name (TREE_CODE (var)));\n@@ -3048,7 +3048,7 @@ chkp_generate_extern_var_bounds (tree var)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Generating bounds for extern symbol '\");\n-      print_generic_expr (dump_file, var, 0);\n+      print_generic_expr (dump_file, var);\n       fprintf (dump_file, \"'\\n\");\n     }\n \n@@ -3132,7 +3132,7 @@ chkp_get_bounds_for_decl_addr (tree decl)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Building bounds for address of decl \");\n-      print_generic_expr (dump_file, decl, 0);\n+      print_generic_expr (dump_file, decl);\n       fprintf (dump_file, \"\\n\");\n     }\n "}, {"sha": "66d3a7bd370dfc37afeb332843cba03ab3fc1960", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -662,11 +662,11 @@ chrec_apply (unsigned var,\n     {\n       fprintf (dump_file, \"  (varying_loop = %d\\n\", var);\n       fprintf (dump_file, \")\\n  (chrec = \");\n-      print_generic_expr (dump_file, chrec, 0);\n+      print_generic_expr (dump_file, chrec);\n       fprintf (dump_file, \")\\n  (x = \");\n-      print_generic_expr (dump_file, x, 0);\n+      print_generic_expr (dump_file, x);\n       fprintf (dump_file, \")\\n  (res = \");\n-      print_generic_expr (dump_file, res, 0);\n+      print_generic_expr (dump_file, res);\n       fprintf (dump_file, \"))\\n\");\n     }\n "}, {"sha": "9af287b46a81b8ee49c0e0ba7a52837bcded49c5", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -203,16 +203,16 @@ dump_data_reference (FILE *outf,\n   fprintf (outf, \"#(Data Ref: \\n\");\n   fprintf (outf, \"#  bb: %d \\n\", gimple_bb (DR_STMT (dr))->index);\n   fprintf (outf, \"#  stmt: \");\n-  print_gimple_stmt (outf, DR_STMT (dr), 0, 0);\n+  print_gimple_stmt (outf, DR_STMT (dr), 0);\n   fprintf (outf, \"#  ref: \");\n-  print_generic_stmt (outf, DR_REF (dr), 0);\n+  print_generic_stmt (outf, DR_REF (dr));\n   fprintf (outf, \"#  base_object: \");\n-  print_generic_stmt (outf, DR_BASE_OBJECT (dr), 0);\n+  print_generic_stmt (outf, DR_BASE_OBJECT (dr));\n \n   for (i = 0; i < DR_NUM_DIMENSIONS (dr); i++)\n     {\n       fprintf (outf, \"#  Access function %d: \", i);\n-      print_generic_stmt (outf, DR_ACCESS_FN (dr, i), 0);\n+      print_generic_stmt (outf, DR_ACCESS_FN (dr, i));\n     }\n   fprintf (outf, \"#)\\n\");\n }\n@@ -290,7 +290,7 @@ dump_subscript (FILE *outf, struct subscript *subscript)\n     {\n       tree last_iteration = SUB_LAST_CONFLICT (subscript);\n       fprintf (outf, \"\\n  last_conflict: \");\n-      print_generic_expr (outf, last_iteration, 0);\n+      print_generic_expr (outf, last_iteration);\n     }\n \n   cf = SUB_CONFLICTS_IN_B (subscript);\n@@ -300,11 +300,11 @@ dump_subscript (FILE *outf, struct subscript *subscript)\n     {\n       tree last_iteration = SUB_LAST_CONFLICT (subscript);\n       fprintf (outf, \"\\n  last_conflict: \");\n-      print_generic_expr (outf, last_iteration, 0);\n+      print_generic_expr (outf, last_iteration);\n     }\n \n   fprintf (outf, \"\\n  (Subscript distance: \");\n-  print_generic_expr (outf, SUB_DISTANCE (subscript), 0);\n+  print_generic_expr (outf, SUB_DISTANCE (subscript));\n   fprintf (outf, \" ))\\n\");\n }\n \n@@ -436,9 +436,9 @@ dump_data_dependence_relation (FILE *outf,\n       for (i = 0; i < DDR_NUM_SUBSCRIPTS (ddr); i++)\n \t{\n \t  fprintf (outf, \"  access_fn_A: \");\n-\t  print_generic_stmt (outf, DR_ACCESS_FN (dra, i), 0);\n+\t  print_generic_stmt (outf, DR_ACCESS_FN (dra, i));\n \t  fprintf (outf, \"  access_fn_B: \");\n-\t  print_generic_stmt (outf, DR_ACCESS_FN (drb, i), 0);\n+\t  print_generic_stmt (outf, DR_ACCESS_FN (drb, i));\n \t  dump_subscript (outf, DDR_SUBSCRIPT (ddr, i));\n \t}\n \n@@ -3037,9 +3037,9 @@ analyze_overlapping_iterations (tree chrec_a,\n     {\n       fprintf (dump_file, \"(analyze_overlapping_iterations \\n\");\n       fprintf (dump_file, \"  (chrec_a = \");\n-      print_generic_expr (dump_file, chrec_a, 0);\n+      print_generic_expr (dump_file, chrec_a);\n       fprintf (dump_file, \")\\n  (chrec_b = \");\n-      print_generic_expr (dump_file, chrec_b, 0);\n+      print_generic_expr (dump_file, chrec_b);\n       fprintf (dump_file, \")\\n\");\n     }\n "}, {"sha": "f3ec404ef0938db46419fdd635444a9c8f1b7760", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -4722,9 +4722,9 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Inlining \");\n-      print_generic_expr (dump_file, id->src_fn, 0);\n+      print_generic_expr (dump_file, id->src_fn);\n       fprintf (dump_file, \" to \");\n-      print_generic_expr (dump_file, id->dst_fn, 0);\n+      print_generic_expr (dump_file, id->dst_fn);\n       fprintf (dump_file, \" with frequency %i\\n\", cg_edge->frequency);\n     }\n \n@@ -5903,10 +5903,10 @@ tree_function_versioning (tree old_decl, tree new_decl,\n \t\t\t  {\n \t\t\t    fprintf (dump_file, \"    const \");\n \t\t\t    print_generic_expr (dump_file,\n-\t\t\t\t\t\treplace_info->new_tree, 0);\n+\t\t\t\t\t\treplace_info->new_tree);\n \t\t\t    fprintf (dump_file,\n \t\t\t\t     \"  can't be converted to param \");\n-\t\t\t    print_generic_expr (dump_file, parm, 0);\n+\t\t\t    print_generic_expr (dump_file, parm);\n \t\t\t    fprintf (dump_file, \"\\n\");\n \t\t\t  }\n \t\t\treplace_info->old_tree = NULL;"}, {"sha": "d4056373f318dfee0714363de5f11c5e1a437005", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1608,10 +1608,10 @@ dump_defs_stack (FILE *file, int n)\n \t}\n \n       fprintf (file, \"    Previous CURRDEF (\");\n-      print_generic_expr (file, var, 0);\n+      print_generic_expr (file, var);\n       fprintf (file, \") = \");\n       if (name)\n-\tprint_generic_expr (file, name, 0);\n+\tprint_generic_expr (file, name);\n       else\n \tfprintf (file, \"<NIL>\");\n       fprintf (file, \"\\n\");\n@@ -1647,10 +1647,10 @@ dump_currdefs (FILE *file)\n     {\n       common_info *info = get_common_info (var);\n       fprintf (file, \"CURRDEF (\");\n-      print_generic_expr (file, var, 0);\n+      print_generic_expr (file, var);\n       fprintf (file, \") = \");\n       if (info->current_def)\n-\tprint_generic_expr (file, info->current_def, 0);\n+\tprint_generic_expr (file, info->current_def);\n       else\n \tfprintf (file, \"<NIL>\");\n       fprintf (file, \"\\n\");\n@@ -2784,13 +2784,13 @@ dump_names_replaced_by (FILE *file, tree name)\n   bitmap old_set;\n   bitmap_iterator bi;\n \n-  print_generic_expr (file, name, 0);\n+  print_generic_expr (file, name);\n   fprintf (file, \" -> { \");\n \n   old_set = names_replaced_by (name);\n   EXECUTE_IF_SET_IN_BITMAP (old_set, 0, i, bi)\n     {\n-      print_generic_expr (file, ssa_name (i), 0);\n+      print_generic_expr (file, ssa_name (i));\n       fprintf (file, \" \");\n     }\n \n@@ -2842,7 +2842,7 @@ dump_update_ssa (FILE *file)\n       fprintf (file, \"\\nSSA names to release after updating the SSA web\\n\\n\");\n       EXECUTE_IF_SET_IN_BITMAP (names_to_release, 0, i, bi)\n \t{\n-\t  print_generic_expr (file, ssa_name (i), 0);\n+\t  print_generic_expr (file, ssa_name (i));\n \t  fprintf (file, \" \");\n \t}\n       fprintf (file, \"\\n\");\n@@ -3287,7 +3287,7 @@ update_ssa (unsigned update_flags)\n \t\t      error (\"statement uses released SSA name:\");\n \t\t      debug_gimple_stmt (stmt);\n \t\t      fprintf (stderr, \"The use of \");\n-\t\t      print_generic_expr (stderr, use, 0);\n+\t\t      print_generic_expr (stderr, use);\n \t\t      fprintf (stderr,\" should have been replaced\\n\");\n \t\t      err = true;\n \t\t    }"}, {"sha": "723a5283da60232beffdd0d91f6dc8b9a0b63d6d", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1380,7 +1380,7 @@ pass_object_sizes::execute (function *fun)\n \t      fprintf (dump_file, \"Simplified\\n  \");\n \t      print_gimple_stmt (dump_file, call, 0, dump_flags);\n \t      fprintf (dump_file, \" to \");\n-\t      print_generic_expr (dump_file, result, 0);\n+\t      print_generic_expr (dump_file, result);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n "}, {"sha": "83d3c803080eca1c315ee87d57ce0035fae33205", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -2478,7 +2478,7 @@ build_new_reduction (reduction_info_table_type *reduction_list,\n     {\n       fprintf (dump_file,\n \t       \"Detected reduction. reduction stmt is:\\n\");\n-      print_gimple_stmt (dump_file, reduc_stmt, 0, 0);\n+      print_gimple_stmt (dump_file, reduc_stmt, 0);\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -2724,9 +2724,9 @@ try_create_reduction_list (loop_p loop,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"phi is \");\n-\t      print_gimple_stmt (dump_file, phi, 0, 0);\n+\t      print_gimple_stmt (dump_file, phi, 0);\n \t      fprintf (dump_file, \"arg of phi to exit:   value \");\n-\t      print_generic_expr (dump_file, val, 0);\n+\t      print_generic_expr (dump_file, val);\n \t      fprintf (dump_file, \" used outside loop\\n\");\n \t      fprintf (dump_file,\n \t\t       \"  checking if it is part of reduction pattern:\\n\");\n@@ -2767,9 +2767,9 @@ try_create_reduction_list (loop_p loop,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"reduction phi is  \");\n-\t      print_gimple_stmt (dump_file, red->reduc_phi, 0, 0);\n+\t      print_gimple_stmt (dump_file, red->reduc_phi, 0);\n \t      fprintf (dump_file, \"reduction stmt is  \");\n-\t      print_gimple_stmt (dump_file, red->reduc_stmt, 0, 0);\n+\t      print_gimple_stmt (dump_file, red->reduc_stmt, 0);\n \t    }\n \t}\n     }\n@@ -2877,7 +2877,7 @@ ref_conflicts_with_region (gimple_stmt_iterator gsi, ao_ref *ref,\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file, \"skipping reduction store: \");\n-\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, stmt, 0);\n \t\t}\n \t      continue;\n \t    }\n@@ -2896,7 +2896,7 @@ ref_conflicts_with_region (gimple_stmt_iterator gsi, ao_ref *ref,\n \t\t  if (dump_file)\n \t\t    {\n \t\t      fprintf (dump_file, \"Stmt \");\n-\t\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t      print_gimple_stmt (dump_file, stmt, 0);\n \t\t    }\n \t\t  return true;\n \t\t}\n@@ -2908,7 +2908,7 @@ ref_conflicts_with_region (gimple_stmt_iterator gsi, ao_ref *ref,\n \t\t  if (dump_file)\n \t\t    {\n \t\t      fprintf (dump_file, \"Stmt \");\n-\t\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t      print_gimple_stmt (dump_file, stmt, 0);\n \t\t    }\n \t\t  return true;\n \t\t}\n@@ -2987,7 +2987,7 @@ oacc_entry_exit_ok_1 (bitmap in_loop_bbs, vec<basic_block> region_bbs,\n \t\t\t      if (dump_file)\n \t\t\t\t{\n \t\t\t\t  fprintf (dump_file, \"found reduction load: \");\n-\t\t\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t\t\t  print_gimple_stmt (dump_file, stmt, 0);\n \t\t\t\t}\n \t\t\t    }\n \t\t\t}\n@@ -3018,7 +3018,7 @@ oacc_entry_exit_ok_1 (bitmap in_loop_bbs, vec<basic_block> region_bbs,\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file, \"Unhandled stmt in entry/exit: \");\n-\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, stmt, 0);\n \t\t}\n \t      return false;\n \t    }\n@@ -3029,7 +3029,7 @@ oacc_entry_exit_ok_1 (bitmap in_loop_bbs, vec<basic_block> region_bbs,\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file, \"conflicts with entry/exit stmt: \");\n-\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, stmt, 0);\n \t\t}\n \t      return false;\n \t    }\n@@ -3077,7 +3077,7 @@ oacc_entry_exit_single_gang (bitmap in_loop_bbs, vec<basic_block> region_bbs,\n \t\t  fprintf (dump_file,\n \t\t\t   \"skipped reduction store for single-gang\"\n \t\t\t   \" neutering: \");\n-\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, stmt, 0);\n \t\t}\n \n \t      /* Update gsi to point to next stmt.  */\n@@ -3105,7 +3105,7 @@ oacc_entry_exit_single_gang (bitmap in_loop_bbs, vec<basic_block> region_bbs,\n \t    {\n \t      fprintf (dump_file,\n \t\t       \"found store that needs single-gang neutering: \");\n-\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t      print_gimple_stmt (dump_file, stmt, 0);\n \t    }\n \n \t  {"}, {"sha": "0af1acc609a22b873d352abda7c1265fb6ff3dec", "filename": "gcc/tree-pretty-print.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.h?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -35,9 +35,9 @@ extern void debug_generic_expr (tree);\n extern void debug_generic_stmt (tree);\n extern void debug_tree_chain (tree);\n extern void print_generic_decl (FILE *, tree, int);\n-extern void print_generic_stmt (FILE *, tree, int);\n+extern void print_generic_stmt (FILE *, tree, int = 0);\n extern void print_generic_stmt_indented (FILE *, tree, int, int);\n-extern void print_generic_expr (FILE *, tree, int);\n+extern void print_generic_expr (FILE *, tree, int = 0);\n extern void dump_omp_clauses (pretty_printer *, tree, int, int);\n extern int dump_generic_node (pretty_printer *, tree, int, int, bool);\n extern void print_declaration (pretty_printer *, tree, int, int);"}, {"sha": "95f65b042b72a0f4103e14c6385645fb2e842209", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -531,9 +531,9 @@ set_scalar_evolution (basic_block instantiated_below, tree scalar, tree chrec)\n \t  fprintf (dump_file, \"  instantiated_below = %d \\n\",\n \t\t   instantiated_below->index);\n \t  fprintf (dump_file, \"  (scalar = \");\n-\t  print_generic_expr (dump_file, scalar, 0);\n+\t  print_generic_expr (dump_file, scalar);\n \t  fprintf (dump_file, \")\\n  (scalar_evolution = \");\n-\t  print_generic_expr (dump_file, chrec, 0);\n+\t  print_generic_expr (dump_file, chrec);\n \t  fprintf (dump_file, \"))\\n\");\n \t}\n       if (dump_flags & TDF_STATS)\n@@ -557,7 +557,7 @@ get_scalar_evolution (basic_block instantiated_below, tree scalar)\n \t{\n \t  fprintf (dump_file, \"(get_scalar_evolution \\n\");\n \t  fprintf (dump_file, \"  (scalar = \");\n-\t  print_generic_expr (dump_file, scalar, 0);\n+\t  print_generic_expr (dump_file, scalar);\n \t  fprintf (dump_file, \")\\n\");\n \t}\n       if (dump_flags & TDF_STATS)\n@@ -584,7 +584,7 @@ get_scalar_evolution (basic_block instantiated_below, tree scalar)\n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n       fprintf (dump_file, \"  (scalar_evolution = \");\n-      print_generic_expr (dump_file, res, 0);\n+      print_generic_expr (dump_file, res);\n       fprintf (dump_file, \"))\\n\");\n     }\n \n@@ -819,9 +819,9 @@ add_to_evolution (unsigned loop_nb, tree chrec_before, enum tree_code code,\n       fprintf (dump_file, \"(add_to_evolution \\n\");\n       fprintf (dump_file, \"  (loop_nb = %d)\\n\", loop_nb);\n       fprintf (dump_file, \"  (chrec_before = \");\n-      print_generic_expr (dump_file, chrec_before, 0);\n+      print_generic_expr (dump_file, chrec_before);\n       fprintf (dump_file, \")\\n  (to_add = \");\n-      print_generic_expr (dump_file, to_add, 0);\n+      print_generic_expr (dump_file, to_add);\n       fprintf (dump_file, \")\\n\");\n     }\n \n@@ -835,7 +835,7 @@ add_to_evolution (unsigned loop_nb, tree chrec_before, enum tree_code code,\n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n       fprintf (dump_file, \"  (res = \");\n-      print_generic_expr (dump_file, res, 0);\n+      print_generic_expr (dump_file, res);\n       fprintf (dump_file, \"))\\n\");\n     }\n \n@@ -872,7 +872,7 @@ get_loop_exit_condition (const struct loop *loop)\n \n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n-      print_gimple_stmt (dump_file, res, 0, 0);\n+      print_gimple_stmt (dump_file, res, 0);\n       fprintf (dump_file, \")\\n\");\n     }\n \n@@ -1448,7 +1448,7 @@ analyze_evolution_in_loop (gphi *loop_phi_node,\n     {\n       fprintf (dump_file, \"(analyze_evolution_in_loop \\n\");\n       fprintf (dump_file, \"  (loop_phi_node = \");\n-      print_gimple_stmt (dump_file, loop_phi_node, 0, 0);\n+      print_gimple_stmt (dump_file, loop_phi_node, 0);\n       fprintf (dump_file, \")\\n\");\n     }\n \n@@ -1518,7 +1518,7 @@ analyze_evolution_in_loop (gphi *loop_phi_node,\n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n       fprintf (dump_file, \"  (evolution_function = \");\n-      print_generic_expr (dump_file, evolution_function, 0);\n+      print_generic_expr (dump_file, evolution_function);\n       fprintf (dump_file, \"))\\n\");\n     }\n \n@@ -1571,7 +1571,7 @@ analyze_initial_condition (gphi *loop_phi_node)\n     {\n       fprintf (dump_file, \"(analyze_initial_condition \\n\");\n       fprintf (dump_file, \"  (loop_phi_node = \\n\");\n-      print_gimple_stmt (dump_file, loop_phi_node, 0, 0);\n+      print_gimple_stmt (dump_file, loop_phi_node, 0);\n       fprintf (dump_file, \")\\n\");\n     }\n \n@@ -1612,7 +1612,7 @@ analyze_initial_condition (gphi *loop_phi_node)\n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n       fprintf (dump_file, \"  (init_cond = \");\n-      print_generic_expr (dump_file, init_cond, 0);\n+      print_generic_expr (dump_file, init_cond);\n       fprintf (dump_file, \"))\\n\");\n     }\n \n@@ -2139,7 +2139,7 @@ analyze_scalar_evolution (struct loop *loop, tree var)\n       fprintf (dump_file, \"(analyze_scalar_evolution \\n\");\n       fprintf (dump_file, \"  (loop_nb = %d)\\n\", loop->num);\n       fprintf (dump_file, \"  (scalar = \");\n-      print_generic_expr (dump_file, var, 0);\n+      print_generic_expr (dump_file, var);\n       fprintf (dump_file, \")\\n\");\n     }\n \n@@ -2972,7 +2972,7 @@ instantiate_scev (basic_block instantiate_below, struct loop *evolution_loop,\n       fprintf (dump_file, \"  (instantiate_below = %d)\\n\", instantiate_below->index);\n       fprintf (dump_file, \"  (evolution_loop = %d)\\n\", evolution_loop->num);\n       fprintf (dump_file, \"  (chrec = \");\n-      print_generic_expr (dump_file, chrec, 0);\n+      print_generic_expr (dump_file, chrec);\n       fprintf (dump_file, \")\\n\");\n     }\n \n@@ -2995,7 +2995,7 @@ instantiate_scev (basic_block instantiate_below, struct loop *evolution_loop,\n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n       fprintf (dump_file, \"  (res = \");\n-      print_generic_expr (dump_file, res, 0);\n+      print_generic_expr (dump_file, res);\n       fprintf (dump_file, \"))\\n\");\n     }\n \n@@ -3100,7 +3100,7 @@ number_of_latch_executions (struct loop *loop)\n   if (dump_file && (dump_flags & TDF_SCEV))\n     {\n       fprintf (dump_file, \"  (set_nb_iterations_in_loop = \");\n-      print_generic_expr (dump_file, res, 0);\n+      print_generic_expr (dump_file, res);\n       fprintf (dump_file, \"))\\n\");\n     }\n \n@@ -3167,7 +3167,7 @@ gather_chrec_stats (tree chrec, struct chrec_stats *stats)\n   if (dump_file && (dump_flags & TDF_STATS))\n     {\n       fprintf (dump_file, \"(classify_chrec \");\n-      print_generic_expr (dump_file, chrec, 0);\n+      print_generic_expr (dump_file, chrec);\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -3749,7 +3749,7 @@ final_value_replacement_loop (struct loop *loop)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"not replacing:\\n  \");\n-\t      print_gimple_stmt (dump_file, phi, 0, 0);\n+\t      print_gimple_stmt (dump_file, phi, 0);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  gsi_next (&psi);\n@@ -3761,7 +3761,7 @@ final_value_replacement_loop (struct loop *loop)\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"\\nfinal value replacement:\\n  \");\n-\t  print_gimple_stmt (dump_file, phi, 0, 0);\n+\t  print_gimple_stmt (dump_file, phi, 0);\n \t  fprintf (dump_file, \"  with\\n  \");\n \t}\n       def = unshare_expr (def);\n@@ -3801,7 +3801,7 @@ final_value_replacement_loop (struct loop *loop)\n       gsi_insert_before (&gsi, ass, GSI_SAME_STMT);\n       if (dump_file)\n \t{\n-\t  print_gimple_stmt (dump_file, ass, 0, 0);\n+\t  print_gimple_stmt (dump_file, ass, 0);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }\n@@ -3858,9 +3858,9 @@ scev_const_prop (void)\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n \t\t  fprintf (dump_file, \"Replacing uses of: \");\n-\t\t  print_generic_expr (dump_file, name, 0);\n+\t\t  print_generic_expr (dump_file, name);\n \t\t  fprintf (dump_file, \" with: \");\n-\t\t  print_generic_expr (dump_file, ev, 0);\n+\t\t  print_generic_expr (dump_file, ev);\n \t\t  fprintf (dump_file, \"\\n\");\n \t\t}\n \t      replace_uses_by (name, ev);"}, {"sha": "84320642075705f00f2005b719e5e052f6fd9968", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -427,13 +427,13 @@ dump_access (FILE *f, struct access *access, bool grp)\n {\n   fprintf (f, \"access { \");\n   fprintf (f, \"base = (%d)'\", DECL_UID (access->base));\n-  print_generic_expr (f, access->base, 0);\n+  print_generic_expr (f, access->base);\n   fprintf (f, \"', offset = \" HOST_WIDE_INT_PRINT_DEC, access->offset);\n   fprintf (f, \", size = \" HOST_WIDE_INT_PRINT_DEC, access->size);\n   fprintf (f, \", expr = \");\n-  print_generic_expr (f, access->expr, 0);\n+  print_generic_expr (f, access->expr);\n   fprintf (f, \", type = \");\n-  print_generic_expr (f, access->type, 0);\n+  print_generic_expr (f, access->type);\n   fprintf (f, \", non_addressable = %d, reverse = %d\",\n \t   access->non_addressable, access->reverse);\n   if (grp)\n@@ -720,7 +720,7 @@ disqualify_candidate (tree decl, const char *reason)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"! Disqualifying \");\n-      print_generic_expr (dump_file, decl, 0);\n+      print_generic_expr (dump_file, decl);\n       fprintf (dump_file, \" - %s\\n\", reason);\n     }\n \n@@ -915,7 +915,7 @@ create_access (tree expr, gimple *stmt, bool write)\n \t     multi-element arrays in their own right).  */\n \t  fprintf (dump_file, \"Allowing non-reg-type load of part\"\n \t\t\t      \" of constant-pool entry: \");\n-\t  print_generic_expr (dump_file, expr, 0);\n+\t  print_generic_expr (dump_file, expr);\n \t}\n       maybe_add_sra_candidate (base);\n     }\n@@ -1924,7 +1924,7 @@ reject (tree var, const char *msg)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Rejected (%d): %s: \", DECL_UID (var), msg);\n-      print_generic_expr (dump_file, var, 0);\n+      print_generic_expr (dump_file, var);\n       fprintf (dump_file, \"\\n\");\n     }\n }\n@@ -1993,7 +1993,7 @@ maybe_add_sra_candidate (tree var)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Candidate (%d): \", DECL_UID (var));\n-      print_generic_expr (dump_file, var, 0);\n+      print_generic_expr (dump_file, var);\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -2241,17 +2241,17 @@ create_access_replacement (struct access *access)\n       if (access->grp_to_be_debug_replaced)\n \t{\n \t  fprintf (dump_file, \"Created a debug-only replacement for \");\n-\t  print_generic_expr (dump_file, access->base, 0);\n+\t  print_generic_expr (dump_file, access->base);\n \t  fprintf (dump_file, \" offset: %u, size: %u\\n\",\n \t\t   (unsigned) access->offset, (unsigned) access->size);\n \t}\n       else\n \t{\n \t  fprintf (dump_file, \"Created a replacement for \");\n-\t  print_generic_expr (dump_file, access->base, 0);\n+\t  print_generic_expr (dump_file, access->base);\n \t  fprintf (dump_file, \" offset: %u, size: %u: \",\n \t\t   (unsigned) access->offset, (unsigned) access->size);\n-\t  print_generic_expr (dump_file, repl, 0);\n+\t  print_generic_expr (dump_file, repl);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }\n@@ -2445,7 +2445,7 @@ analyze_access_subtree (struct access *root, struct access *parent,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Changing the type of a replacement for \");\n-\t      print_generic_expr (dump_file, root->base, 0);\n+\t      print_generic_expr (dump_file, root->base);\n \t      fprintf (dump_file, \" offset: %u, size: %u \",\n \t\t       (unsigned) root->offset, (unsigned) root->size);\n \t      fprintf (dump_file, \" to an integer.\\n\");\n@@ -2759,14 +2759,14 @@ analyze_all_variable_accesses (void)\n \t\tif (dump_file && (dump_flags & TDF_DETAILS))\n \t\t  {\n \t\t    fprintf (dump_file, \"Will attempt to totally scalarize \");\n-\t\t    print_generic_expr (dump_file, var, 0);\n+\t\t    print_generic_expr (dump_file, var);\n \t\t    fprintf (dump_file, \" (UID: %u): \\n\", DECL_UID (var));\n \t\t  }\n \t      }\n \t    else if (dump_file && (dump_flags & TDF_DETAILS))\n \t      {\n \t\tfprintf (dump_file, \"Too big to totally scalarize: \");\n-\t\tprint_generic_expr (dump_file, var, 0);\n+\t\tprint_generic_expr (dump_file, var);\n \t\tfprintf (dump_file, \" (UID: %u)\\n\", DECL_UID (var));\n \t      }\n \t  }\n@@ -2798,7 +2798,7 @@ analyze_all_variable_accesses (void)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"\\nAccess trees for \");\n-\t      print_generic_expr (dump_file, var, 0);\n+\t      print_generic_expr (dump_file, var);\n \t      fprintf (dump_file, \" (UID: %u): \\n\", DECL_UID (var));\n \t      dump_access_tree (dump_file, access);\n \t      fprintf (dump_file, \"\\n\");\n@@ -3611,7 +3611,7 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file, \"Removing load: \");\n-\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, stmt, 0);\n \t\t}\n \t      generate_subtree_copies (racc->first_child, lhs,\n \t\t\t\t       racc->offset, 0, 0, gsi,\n@@ -3673,7 +3673,7 @@ initialize_constant_pool_replacements (void)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Generating constant initializer: \");\n-\t      print_gimple_stmt (dump_file, stmt, 0, 1);\n+\t      print_gimple_stmt (dump_file, stmt, 0);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  gsi_insert_after (&gsi, stmt, GSI_NEW_STMT);\n@@ -4105,7 +4105,7 @@ find_param_candidates (void)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Candidate (%d): \", DECL_UID (parm));\n-\t  print_generic_expr (dump_file, parm, 0);\n+\t  print_generic_expr (dump_file, parm);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }\n@@ -4502,7 +4502,7 @@ decide_one_param_reduction (struct access *repr)\n     {\n       struct access *acc;\n       fprintf (dump_file, \"Evaluating PARAM group sizes for \");\n-      print_generic_expr (dump_file, parm, 0);\n+      print_generic_expr (dump_file, parm);\n       fprintf (dump_file, \" (UID: %u): \\n\", DECL_UID (parm));\n       for (acc = repr; acc; acc = acc->next_grp)\n \tdump_access (dump_file, acc, true);\n@@ -4865,9 +4865,9 @@ replace_removed_params_ssa_names (tree old_name, gimple *stmt,\n   if (dump_file)\n     {\n       fprintf (dump_file, \"replacing an SSA name of a removed param \");\n-      print_generic_expr (dump_file, old_name, 0);\n+      print_generic_expr (dump_file, old_name);\n       fprintf (dump_file, \" with \");\n-      print_generic_expr (dump_file, new_name, 0);\n+      print_generic_expr (dump_file, new_name);\n       fprintf (dump_file, \"\\n\");\n     }\n "}, {"sha": "b54062c9cea8387a41606feaf746dd627dc0f6c9", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -2184,9 +2184,9 @@ ccp_fold_stmt (gimple_stmt_iterator *gsi)\n \tif (dump_file)\n \t  {\n \t    fprintf (dump_file, \"Folding predicate \");\n-\t    print_gimple_expr (dump_file, stmt, 0, 0);\n+\t    print_gimple_expr (dump_file, stmt, 0);\n \t    fprintf (dump_file, \" to \");\n-\t    print_generic_expr (dump_file, val.value, 0);\n+\t    print_generic_expr (dump_file, val.value);\n \t    fprintf (dump_file, \"\\n\");\n \t  }\n "}, {"sha": "9f0fe541ded9bb96b2e44a676b0ed23fc5f95415", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -168,7 +168,7 @@ dump_copy_of (FILE *file, tree var)\n \n   val = copy_of[SSA_NAME_VERSION (var)].value;\n   fprintf (file, \" copy-of chain: \");\n-  print_generic_expr (file, var, 0);\n+  print_generic_expr (file, var);\n   fprintf (file, \" \");\n   if (!val)\n     fprintf (file, \"[UNDEFINED]\");\n@@ -177,7 +177,7 @@ dump_copy_of (FILE *file, tree var)\n   else\n     {\n       fprintf (file, \"-> \");\n-      print_generic_expr (file, val, 0);\n+      print_generic_expr (file, val);\n       fprintf (file, \" \");\n       fprintf (file, \"[COPY]\");\n     }\n@@ -231,7 +231,7 @@ copy_prop_visit_cond_stmt (gimple *stmt, edge *taken_edge_p)\n     {\n       fprintf (dump_file, \"Trying to determine truth value of \");\n       fprintf (dump_file, \"predicate \");\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n     }\n \n   /* Fold COND and see whether we get a useful result.  */"}, {"sha": "934324990e838ce9e4cf07e268625fefb8b508e8", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -171,9 +171,9 @@ mark_operand_necessary (tree op)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"marking necessary through \");\n-      print_generic_expr (dump_file, op, 0);\n+      print_generic_expr (dump_file, op);\n       fprintf (dump_file, \" stmt \");\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n     }\n \n   gimple_set_plf (stmt, STMT_NECESSARY, true);"}, {"sha": "494b472e121cfcef37019295f5f7a5733f2245cd", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -554,7 +554,7 @@ pass_dominator::execute (function *fun)\n       if (dump_file && dump_flags & TDF_DETAILS)\n \t{\n \t  fprintf (dump_file, \"Fixing up noreturn call \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n       fixup_noreturn_call (stmt);\n@@ -1360,9 +1360,9 @@ record_equivalences_from_stmt (gimple *stmt, int may_optimize_p,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"==== ASGN \");\n-\t      print_generic_expr (dump_file, lhs, 0);\n+\t      print_generic_expr (dump_file, lhs);\n \t      fprintf (dump_file, \" = \");\n-\t      print_generic_expr (dump_file, rhs, 0);\n+\t      print_generic_expr (dump_file, rhs);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \n@@ -1387,9 +1387,9 @@ record_equivalences_from_stmt (gimple *stmt, int may_optimize_p,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"==== ASGN \");\n-\t  print_generic_expr (dump_file, lhs, 0);\n+\t  print_generic_expr (dump_file, lhs);\n \t  fprintf (dump_file, \" = \");\n-\t  print_generic_expr (dump_file, new_rhs, 0);\n+\t  print_generic_expr (dump_file, new_rhs);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n "}, {"sha": "70c8b073359a75ff9ec7e5c7f32b21c96310bb59", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -241,7 +241,7 @@ compute_trims (ao_ref *ref, sbitmap live, int *trim_head, int *trim_tail,\n     {\n       fprintf (dump_file, \"  Trimming statement (head = %d, tail = %d): \",\n \t       *trim_head, *trim_tail);\n-      print_gimple_stmt (dump_file, stmt, dump_flags, 0);\n+      print_gimple_stmt (dump_file, stmt, 0, dump_flags);\n       fprintf (dump_file, \"\\n\");\n     }\n }\n@@ -621,7 +621,7 @@ delete_dead_call (gimple_stmt_iterator *gsi)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"  Deleted dead call: \");\n-      print_gimple_stmt (dump_file, stmt, dump_flags, 0);\n+      print_gimple_stmt (dump_file, stmt, 0, dump_flags);\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -655,7 +655,7 @@ delete_dead_assignment (gimple_stmt_iterator *gsi)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"  Deleted dead store: \");\n-      print_gimple_stmt (dump_file, stmt, dump_flags, 0);\n+      print_gimple_stmt (dump_file, stmt, 0, dump_flags);\n       fprintf (dump_file, \"\\n\");\n     }\n "}, {"sha": "5719b992eb81fe6ca9deea9dde07217975e879d0", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -527,9 +527,9 @@ forward_propagate_into_gimple_cond (gcond *stmt)\n       if (dump_file && tmp)\n \t{\n \t  fprintf (dump_file, \"  Replaced '\");\n-\t  print_gimple_expr (dump_file, stmt, 0, 0);\n+\t  print_gimple_expr (dump_file, stmt, 0);\n \t  fprintf (dump_file, \"' with '\");\n-\t  print_generic_expr (dump_file, tmp, 0);\n+\t  print_generic_expr (dump_file, tmp);\n \t  fprintf (dump_file, \"'\\n\");\n \t}\n \n@@ -605,9 +605,9 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n       if (dump_file && tmp)\n \t{\n \t  fprintf (dump_file, \"  Replaced '\");\n-\t  print_generic_expr (dump_file, cond, 0);\n+\t  print_generic_expr (dump_file, cond);\n \t  fprintf (dump_file, \"' with '\");\n-\t  print_generic_expr (dump_file, tmp, 0);\n+\t  print_generic_expr (dump_file, tmp);\n \t  fprintf (dump_file, \"'\\n\");\n \t}\n \n@@ -2527,7 +2527,7 @@ pass_forwprop::execute (function *fun)\n       if (dump_file && dump_flags & TDF_DETAILS)\n \t{\n \t  fprintf (dump_file, \"Fixing up noreturn call \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n       cfg_changed |= fixup_noreturn_call (stmt);"}, {"sha": "9d9c5ac962454382f8f7b696af3562717a454d94", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -444,11 +444,11 @@ ifcombine_ifandif (basic_block inner_cond_bb, bool inner_inv,\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"optimizing double bit test to \");\n-\t  print_generic_expr (dump_file, name1, 0);\n+\t  print_generic_expr (dump_file, name1);\n \t  fprintf (dump_file, \" & T == T\\nwith temporary T = (1 << \");\n-\t  print_generic_expr (dump_file, bit1, 0);\n+\t  print_generic_expr (dump_file, bit1);\n \t  fprintf (dump_file, \") | (1 << \");\n-\t  print_generic_expr (dump_file, bit2, 0);\n+\t  print_generic_expr (dump_file, bit2);\n \t  fprintf (dump_file, \")\\n\");\n \t}\n \n@@ -523,11 +523,11 @@ ifcombine_ifandif (basic_block inner_cond_bb, bool inner_inv,\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"optimizing bits or bits test to \");\n-\t  print_generic_expr (dump_file, name1, 0);\n+\t  print_generic_expr (dump_file, name1);\n \t  fprintf (dump_file, \" & T != 0\\nwith temporary T = \");\n-\t  print_generic_expr (dump_file, bits1, 0);\n+\t  print_generic_expr (dump_file, bits1);\n \t  fprintf (dump_file, \" | \");\n-\t  print_generic_expr (dump_file, bits2, 0);\n+\t  print_generic_expr (dump_file, bits2);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n@@ -607,7 +607,7 @@ ifcombine_ifandif (basic_block inner_cond_bb, bool inner_inv,\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"optimizing two comparisons to \");\n-\t  print_generic_expr (dump_file, t, 0);\n+\t  print_generic_expr (dump_file, t);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n "}, {"sha": "c0e06bb1d4b8293c27b7542380c8bb3caab37e90", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1010,7 +1010,7 @@ invariantness_dom_walker::before_dom_children (basic_block bb)\n \n \tif (dump_file && (dump_flags & TDF_DETAILS))\n \t  {\n-\t    print_gimple_stmt (dump_file, stmt, 2, 0);\n+\t    print_gimple_stmt (dump_file, stmt, 2);\n \t    fprintf (dump_file, \"  invariant up to level %d, cost %d.\\n\\n\",\n \t\t     loop_depth (lim_data->max_loop),\n \t\t     lim_data->cost);\n@@ -1086,7 +1086,7 @@ invariantness_dom_walker::before_dom_children (basic_block bb)\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n-\t  print_gimple_stmt (dump_file, stmt, 2, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 2);\n \t  fprintf (dump_file, \"  invariant up to level %d, cost %d.\\n\\n\",\n \t\t   loop_depth (lim_data->max_loop),\n \t\t   lim_data->cost);\n@@ -1149,7 +1149,7 @@ move_computations_worker (basic_block bb)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Moving PHI node\\n\");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t  fprintf (dump_file, \"(cost %u) out of loop %d.\\n\\n\",\n \t\t   cost, level->num);\n \t}\n@@ -1218,7 +1218,7 @@ move_computations_worker (basic_block bb)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Moving statement\\n\");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t  fprintf (dump_file, \"(cost %u) out of loop %d.\\n\\n\",\n \t\t   cost, level->num);\n \t}\n@@ -1950,7 +1950,7 @@ execute_sm (struct loop *loop, vec<edge> exits, im_mem_ref *ref)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Executing store motion of \");\n-      print_generic_expr (dump_file, ref->mem.ref, 0);\n+      print_generic_expr (dump_file, ref->mem.ref);\n       fprintf (dump_file, \" from loop %d\\n\", loop->num);\n     }\n "}, {"sha": "e09ac29a58b7deb71188454be3a9415afd96c7fc", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -248,7 +248,7 @@ tree_estimate_loop_size (struct loop *loop, edge exit, edge edge_to_cancel,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"  size: %3i \", num);\n-\t      print_gimple_stmt (dump_file, gsi_stmt (gsi), 0, 0);\n+\t      print_gimple_stmt (dump_file, gsi_stmt (gsi), 0);\n \t    }\n \n \t  /* Look for reasons why we might optimize this stmt away. */\n@@ -512,7 +512,7 @@ remove_exits_and_undefined_stmts (struct loop *loop, unsigned int npeeled)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Forced statement unreachable: \");\n-\t      print_gimple_stmt (dump_file, elt->stmt, 0, 0);\n+\t      print_gimple_stmt (dump_file, elt->stmt, 0);\n \t    }\n \t}\n       /* If we know the exit will be taken after peeling, update.  */\n@@ -525,7 +525,7 @@ remove_exits_and_undefined_stmts (struct loop *loop, unsigned int npeeled)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Forced exit to be taken: \");\n-\t      print_gimple_stmt (dump_file, elt->stmt, 0, 0);\n+\t      print_gimple_stmt (dump_file, elt->stmt, 0);\n \t    }\n \t  if (!loop_exit_edge_p (loop, exit_edge))\n \t    exit_edge = EDGE_SUCC (bb, 1);\n@@ -582,7 +582,7 @@ remove_redundant_iv_tests (struct loop *loop)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Removed pointless exit: \");\n-\t      print_gimple_stmt (dump_file, elt->stmt, 0, 0);\n+\t      print_gimple_stmt (dump_file, elt->stmt, 0);\n \t    }\n \t  gcond *cond_stmt = as_a <gcond *> (elt->stmt);\n \t  if (exit_edge->flags & EDGE_TRUE_VALUE)"}, {"sha": "c03d177ff71dcf5614a6853fbc4cfd781d562f1e", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -746,7 +746,7 @@ dump_use (FILE *file, struct iv_use *use)\n {\n   fprintf (file, \"  Use %d.%d:\\n\", use->group_id, use->id);\n   fprintf (file, \"    At stmt:\\t\");\n-  print_gimple_stmt (file, use->stmt, 0, 0);\n+  print_gimple_stmt (file, use->stmt, 0);\n   fprintf (file, \"    At pos:\\t\");\n   if (use->op_p)\n     print_generic_expr (file, *use->op_p, TDF_SLIM);\n@@ -6943,8 +6943,8 @@ adjust_iv_update_pos (struct iv_cand *cand, struct iv_use *use)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Reordering \\n\");\n-      print_gimple_stmt (dump_file, iv_update, 0, 0);\n-      print_gimple_stmt (dump_file, use->stmt, 0, 0);\n+      print_gimple_stmt (dump_file, iv_update, 0);\n+      print_gimple_stmt (dump_file, use->stmt, 0);\n       fprintf (dump_file, \"\\n\");\n     }\n "}, {"sha": "d044374dbc28c60500f3e5b902093722efbc1ea0", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -2734,7 +2734,7 @@ bswap_replace (gimple *cur_stmt, gimple *ins_stmt, tree fndecl,\n \t      fprintf (dump_file,\n \t\t       \"%d bit load in target endianness found at: \",\n \t\t       (int) n->range);\n-\t      print_gimple_stmt (dump_file, cur_stmt, 0, 0);\n+\t      print_gimple_stmt (dump_file, cur_stmt, 0);\n \t    }\n \t  return true;\n \t}\n@@ -2803,7 +2803,7 @@ bswap_replace (gimple *cur_stmt, gimple *ins_stmt, tree fndecl,\n     {\n       fprintf (dump_file, \"%d bit bswap implementation found at: \",\n \t       (int) n->range);\n-      print_gimple_stmt (dump_file, cur_stmt, 0, 0);\n+      print_gimple_stmt (dump_file, cur_stmt, 0);\n     }\n \n   gsi_insert_after (&gsi, bswap_stmt, GSI_SAME_STMT);"}, {"sha": "b652361b255e3d4a5e99fd6e6938c8cfbe8cb512", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -525,11 +525,11 @@ factor_out_conditional_conversion (edge e0, edge e1, gphi *phi,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"PHI \");\n-      print_generic_expr (dump_file, gimple_phi_result (phi), 0);\n+      print_generic_expr (dump_file, gimple_phi_result (phi));\n       fprintf (dump_file,\n \t       \" changed to factor conversion out from COND_EXPR.\\n\");\n       fprintf (dump_file, \"New stmt with CAST that defines \");\n-      print_generic_expr (dump_file, result, 0);\n+      print_generic_expr (dump_file, result);\n       fprintf (dump_file, \".\\n\");\n     }\n \n@@ -984,10 +984,10 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"PHI \");\n-\t      print_generic_expr (dump_file, gimple_phi_result (phi), 0);\n+\t      print_generic_expr (dump_file, gimple_phi_result (phi));\n \t      fprintf (dump_file, \" reduced for COND_EXPR in block %d to \",\n \t\t       cond_bb->index);\n-\t      print_generic_expr (dump_file, arg, 0);\n+\t      print_generic_expr (dump_file, arg);\n \t      fprintf (dump_file, \".\\n\");\n             }\n           return 1;"}, {"sha": "8f8c1336c02ed302a367953a324f4d5c77c138a1", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -150,7 +150,7 @@ phiprop_insert_phi (basic_block bb, gphi *phi, gimple *use_stmt,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Inserting PHI for result of load \");\n-      print_gimple_stmt (dump_file, use_stmt, 0, 0);\n+      print_gimple_stmt (dump_file, use_stmt, 0);\n     }\n \n   /* Add PHI arguments for each edge inserting loads of the\n@@ -177,10 +177,10 @@ phiprop_insert_phi (basic_block bb, gphi *phi, gimple *use_stmt,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"  for edge defining \");\n-\t      print_generic_expr (dump_file, PHI_ARG_DEF_FROM_EDGE (phi, e), 0);\n+\t      print_generic_expr (dump_file, PHI_ARG_DEF_FROM_EDGE (phi, e));\n \t      fprintf (dump_file, \" reusing PHI result \");\n \t      print_generic_expr (dump_file,\n-\t\t\t\t  phivn[SSA_NAME_VERSION (old_arg)].value, 0);\n+\t\t\t\t  phivn[SSA_NAME_VERSION (old_arg)].value);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  /* Reuse a formerly created dereference.  */\n@@ -210,9 +210,9 @@ phiprop_insert_phi (basic_block bb, gphi *phi, gimple *use_stmt,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"  for edge defining \");\n-\t      print_generic_expr (dump_file, PHI_ARG_DEF_FROM_EDGE (phi, e), 0);\n+\t      print_generic_expr (dump_file, PHI_ARG_DEF_FROM_EDGE (phi, e));\n \t      fprintf (dump_file, \" inserting load \");\n-\t      print_gimple_stmt (dump_file, tmp, 0, 0);\n+\t      print_gimple_stmt (dump_file, tmp, 0);\n \t    }\n \t}\n \n@@ -225,7 +225,7 @@ phiprop_insert_phi (basic_block bb, gphi *phi, gimple *use_stmt,\n       update_stmt (new_phi);\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n-\tprint_gimple_stmt (dump_file, new_phi, 0, 0);\n+\tprint_gimple_stmt (dump_file, new_phi, 0);\n     }\n \n   return res;"}, {"sha": "2a431c96f7fe9e57b7097431fdf4ef24227a791c", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -990,10 +990,10 @@ print_pre_expr (FILE *outfile, const pre_expr expr)\n   switch (expr->kind)\n     {\n     case CONSTANT:\n-      print_generic_expr (outfile, PRE_EXPR_CONSTANT (expr), 0);\n+      print_generic_expr (outfile, PRE_EXPR_CONSTANT (expr));\n       break;\n     case NAME:\n-      print_generic_expr (outfile, PRE_EXPR_NAME (expr), 0);\n+      print_generic_expr (outfile, PRE_EXPR_NAME (expr));\n       break;\n     case NARY:\n       {\n@@ -1002,7 +1002,7 @@ print_pre_expr (FILE *outfile, const pre_expr expr)\n \tfprintf (outfile, \"{%s,\", get_tree_code_name (nary->opcode));\n \tfor (i = 0; i < nary->length; i++)\n \t  {\n-\t    print_generic_expr (outfile, nary->op[i], 0);\n+\t    print_generic_expr (outfile, nary->op[i]);\n \t    if (i != (unsigned) nary->length - 1)\n \t      fprintf (outfile, \",\");\n \t  }\n@@ -1033,16 +1033,16 @@ print_pre_expr (FILE *outfile, const pre_expr expr)\n \t      }\n \t    if (vro->op0)\n \t      {\n-\t\tprint_generic_expr (outfile, vro->op0, 0);\n+\t\tprint_generic_expr (outfile, vro->op0);\n \t\tif (vro->op1)\n \t\t  {\n \t\t    fprintf (outfile, \",\");\n-\t\t    print_generic_expr (outfile, vro->op1, 0);\n+\t\t    print_generic_expr (outfile, vro->op1);\n \t\t  }\n \t\tif (vro->op2)\n \t\t  {\n \t\t    fprintf (outfile, \",\");\n-\t\t    print_generic_expr (outfile, vro->op2, 0);\n+\t\t    print_generic_expr (outfile, vro->op2);\n \t\t  }\n \t      }\n \t    if (closebrace)\n@@ -1054,7 +1054,7 @@ print_pre_expr (FILE *outfile, const pre_expr expr)\n \tif (ref->vuse)\n \t  {\n \t    fprintf (outfile, \"@\");\n-\t    print_generic_expr (outfile, ref->vuse, 0);\n+\t    print_generic_expr (outfile, ref->vuse);\n \t  }\n       }\n       break;\n@@ -1386,7 +1386,7 @@ get_representative_for (const pre_expr e)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Created SSA_NAME representative \");\n-      print_generic_expr (dump_file, name, 0);\n+      print_generic_expr (dump_file, name);\n       fprintf (dump_file, \" for expression:\");\n       print_pre_expr (dump_file, e);\n       fprintf (dump_file, \" (%04d)\\n\", value_id);\n@@ -2961,7 +2961,7 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Inserted \");\n-      print_gimple_stmt (dump_file, gsi_stmt (gsi_last (*stmts)), 0, 0);\n+      print_gimple_stmt (dump_file, gsi_stmt (gsi_last (*stmts)), 0);\n       fprintf (dump_file, \" in predecessor %d (%04d)\\n\",\n \t       block->index, value_id);\n     }\n@@ -3122,7 +3122,7 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Created phi \");\n-      print_gimple_stmt (dump_file, phi, 0, 0);\n+      print_gimple_stmt (dump_file, phi, 0);\n       fprintf (dump_file, \" in block %d (%04d)\\n\", block->index, val);\n     }\n   pre_stats.phis++;\n@@ -4147,9 +4147,9 @@ eliminate_insert (gimple_stmt_iterator *gsi, tree val)\n \t  if (res)\n \t    {\n \t      fprintf (dump_file, \"Failed to insert expression for value \");\n-\t      print_generic_expr (dump_file, val, 0);\n+\t      print_generic_expr (dump_file, val);\n \t      fprintf (dump_file, \" which is really fully redundant to \");\n-\t      print_generic_expr (dump_file, res, 0);\n+\t      print_generic_expr (dump_file, res);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t}\n@@ -4169,7 +4169,7 @@ eliminate_insert (gimple_stmt_iterator *gsi, tree val)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Inserted \");\n-      print_gimple_stmt (dump_file, SSA_NAME_DEF_STMT (res), 0, 0);\n+      print_gimple_stmt (dump_file, SSA_NAME_DEF_STMT (res), 0);\n     }\n \n   return res;\n@@ -4222,9 +4222,9 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Replaced redundant PHI node defining \");\n-\t      print_generic_expr (dump_file, res, 0);\n+\t      print_generic_expr (dump_file, res);\n \t      fprintf (dump_file, \" with \");\n-\t      print_generic_expr (dump_file, sprime, 0);\n+\t      print_generic_expr (dump_file, sprime);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \n@@ -4370,9 +4370,9 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t\t{\n \t\t\t  fprintf (dump_file, \"Not replacing \");\n-\t\t\t  print_gimple_expr (dump_file, stmt, 0, 0);\n+\t\t\t  print_gimple_expr (dump_file, stmt, 0);\n \t\t\t  fprintf (dump_file, \" with \");\n-\t\t\t  print_generic_expr (dump_file, sprime, 0);\n+\t\t\t  print_generic_expr (dump_file, sprime);\n \t\t\t  fprintf (dump_file, \" which would add a loop\"\n \t\t\t\t   \" carried dependence to loop %d\\n\",\n \t\t\t\t   loop->num);\n@@ -4401,11 +4401,11 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t    {\n \t\t      fprintf (dump_file, \"Replaced \");\n-\t\t      print_gimple_expr (dump_file, stmt, 0, 0);\n+\t\t      print_gimple_expr (dump_file, stmt, 0);\n \t\t      fprintf (dump_file, \" with \");\n-\t\t      print_generic_expr (dump_file, sprime, 0);\n+\t\t      print_generic_expr (dump_file, sprime);\n \t\t      fprintf (dump_file, \" in all uses of \");\n-\t\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t      print_gimple_stmt (dump_file, stmt, 0);\n \t\t    }\n \n \t\t  pre_stats.eliminations++;\n@@ -4427,11 +4427,11 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n \t\t  fprintf (dump_file, \"Replaced \");\n-\t\t  print_gimple_expr (dump_file, stmt, 0, 0);\n+\t\t  print_gimple_expr (dump_file, stmt, 0);\n \t\t  fprintf (dump_file, \" with \");\n-\t\t  print_generic_expr (dump_file, sprime, 0);\n+\t\t  print_generic_expr (dump_file, sprime);\n \t\t  fprintf (dump_file, \" in \");\n-\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, stmt, 0);\n \t\t}\n \n \t      if (TREE_CODE (sprime) == SSA_NAME)\n@@ -4505,7 +4505,7 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t    {\n \t\t      fprintf (dump_file, \"Deleted redundant store \");\n-\t\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t      print_gimple_stmt (dump_file, stmt, 0);\n \t\t    }\n \n \t\t  /* Queue stmt for removal.  */\n@@ -4526,7 +4526,7 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n               if (dump_file && (dump_flags & TDF_DETAILS))\n                 {\n                   fprintf (dump_file, \"Removing unexecutable edge from \");\n-                  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, stmt, 0);\n                 }\n \t      if (((EDGE_SUCC (b, 0)->flags & EDGE_TRUE_VALUE) != 0)\n \t\t  == ((EDGE_SUCC (b, 0)->flags & EDGE_EXECUTABLE) != 0))\n@@ -4847,7 +4847,7 @@ fini_eliminate (void)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Fixing up noreturn call \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t}\n \n       if (fixup_noreturn_call (stmt))\n@@ -4982,7 +4982,7 @@ remove_dead_inserted_code (void)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Removing unnecessary insertion:\");\n-\t      print_gimple_stmt (dump_file, t, 0, 0);\n+\t      print_gimple_stmt (dump_file, t, 0);\n \t    }\n \n \t  gsi = gsi_for_stmt (t);"}, {"sha": "00ab3d725647a3c30ae2b394ab719fe74b67f9bb", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1196,7 +1196,7 @@ substitute_and_fold (ssa_prop_get_value_fn get_value_fn,\n       if (dump_file && dump_flags & TDF_DETAILS)\n \t{\n \t  fprintf (dump_file, \"Removing dead stmt \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n       prop_stats.num_dce++;\n@@ -1224,7 +1224,7 @@ substitute_and_fold (ssa_prop_get_value_fn get_value_fn,\n       if (dump_file && dump_flags & TDF_DETAILS)\n \t{\n \t  fprintf (dump_file, \"Fixing up noreturn call \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n       fixup_noreturn_call (stmt);"}, {"sha": "a2b0955df7aaa96362cb4f13ac14ba9acf50d9cd", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -454,7 +454,7 @@ get_rank (tree e)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Rank for \");\n-\t  print_generic_expr (dump_file, e, 0);\n+\t  print_generic_expr (dump_file, e);\n \t  fprintf (dump_file, \" is %ld\\n\", (rank + 1));\n \t}\n \n@@ -723,11 +723,11 @@ eliminate_duplicate_pair (enum tree_code opcode,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Equivalence: \");\n-\t      print_generic_expr (dump_file, curr->op, 0);\n+\t      print_generic_expr (dump_file, curr->op);\n \t      fprintf (dump_file, \" [&|minmax] \");\n-\t      print_generic_expr (dump_file, last->op, 0);\n+\t      print_generic_expr (dump_file, last->op);\n \t      fprintf (dump_file, \" -> \");\n-\t      print_generic_stmt (dump_file, last->op, 0);\n+\t      print_generic_stmt (dump_file, last->op);\n \t    }\n \n \t  ops->ordered_remove (i);\n@@ -739,9 +739,9 @@ eliminate_duplicate_pair (enum tree_code opcode,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Equivalence: \");\n-\t      print_generic_expr (dump_file, curr->op, 0);\n+\t      print_generic_expr (dump_file, curr->op);\n \t      fprintf (dump_file, \" ^ \");\n-\t      print_generic_expr (dump_file, last->op, 0);\n+\t      print_generic_expr (dump_file, last->op);\n \t      fprintf (dump_file, \" -> nothing\\n\");\n \t    }\n \n@@ -810,9 +810,9 @@ eliminate_plus_minus_pair (enum tree_code opcode,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Equivalence: \");\n-\t      print_generic_expr (dump_file, negateop, 0);\n+\t      print_generic_expr (dump_file, negateop);\n \t      fprintf (dump_file, \" + -\");\n-\t      print_generic_expr (dump_file, oe->op, 0);\n+\t      print_generic_expr (dump_file, oe->op);\n \t      fprintf (dump_file, \" -> 0\\n\");\n \t    }\n \n@@ -831,9 +831,9 @@ eliminate_plus_minus_pair (enum tree_code opcode,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Equivalence: \");\n-\t      print_generic_expr (dump_file, notop, 0);\n+\t      print_generic_expr (dump_file, notop);\n \t      fprintf (dump_file, \" + ~\");\n-\t      print_generic_expr (dump_file, oe->op, 0);\n+\t      print_generic_expr (dump_file, oe->op);\n \t      fprintf (dump_file, \" -> -1\\n\");\n \t    }\n \n@@ -893,12 +893,12 @@ eliminate_not_pairs (enum tree_code opcode,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Equivalence: \");\n-\t      print_generic_expr (dump_file, notop, 0);\n+\t      print_generic_expr (dump_file, notop);\n \t      if (opcode == BIT_AND_EXPR)\n \t\tfprintf (dump_file, \" & ~\");\n \t      else if (opcode == BIT_IOR_EXPR)\n \t\tfprintf (dump_file, \" | ~\");\n-\t      print_generic_expr (dump_file, oe->op, 0);\n+\t      print_generic_expr (dump_file, oe->op);\n \t      if (opcode == BIT_AND_EXPR)\n \t\tfprintf (dump_file, \" -> 0\\n\");\n \t      else if (opcode == BIT_IOR_EXPR)\n@@ -1655,7 +1655,7 @@ undistribute_ops_list (enum tree_code opcode,\n \t  fprintf (dump_file, \"  %u %s: \", c->cnt,\n \t\t   c->oecode == MULT_EXPR\n \t\t   ? \"*\" : c->oecode == RDIV_EXPR ? \"/\" : \"?\");\n-\t  print_generic_expr (dump_file, c->op, 0);\n+\t  print_generic_expr (dump_file, c->op);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }\n@@ -1711,7 +1711,7 @@ undistribute_ops_list (enum tree_code opcode,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Building (\");\n-\t      print_generic_expr (dump_file, oe1->op, 0);\n+\t      print_generic_expr (dump_file, oe1->op);\n \t    }\n \t  zero_one_operation (&oe1->op, c->oecode, c->op);\n \t  EXECUTE_IF_SET_IN_BITMAP (candidates2, first+1, i, sbi0)\n@@ -1721,7 +1721,7 @@ undistribute_ops_list (enum tree_code opcode,\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n \t\t  fprintf (dump_file, \" + \");\n-\t\t  print_generic_expr (dump_file, oe2->op, 0);\n+\t\t  print_generic_expr (dump_file, oe2->op);\n \t\t}\n \t      zero_one_operation (&oe2->op, c->oecode, c->op);\n \t      sum = build_and_add_sum (TREE_TYPE (oe1->op),\n@@ -1737,7 +1737,7 @@ undistribute_ops_list (enum tree_code opcode,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \") %s \", c->oecode == MULT_EXPR ? \"*\" : \"/\");\n-\t      print_generic_expr (dump_file, c->op, 0);\n+\t      print_generic_expr (dump_file, c->op);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \n@@ -1844,11 +1844,11 @@ eliminate_redundant_comparison (enum tree_code opcode,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Equivalence: \");\n-\t  print_generic_expr (dump_file, curr->op, 0);\n+\t  print_generic_expr (dump_file, curr->op);\n \t  fprintf (dump_file, \" %s \", op_symbol_code (opcode));\n-\t  print_generic_expr (dump_file, oe->op, 0);\n+\t  print_generic_expr (dump_file, oe->op);\n \t  fprintf (dump_file, \" -> \");\n-\t  print_generic_expr (dump_file, t, 0);\n+\t  print_generic_expr (dump_file, t);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n@@ -2347,11 +2347,11 @@ update_range_test (struct range_entry *range, struct range_entry *otherrange,\n     {\n       struct range_entry *r;\n       fprintf (dump_file, \"Optimizing range tests \");\n-      print_generic_expr (dump_file, range->exp, 0);\n+      print_generic_expr (dump_file, range->exp);\n       fprintf (dump_file, \" %c[\", range->in_p ? '+' : '-');\n-      print_generic_expr (dump_file, range->low, 0);\n+      print_generic_expr (dump_file, range->low);\n       fprintf (dump_file, \", \");\n-      print_generic_expr (dump_file, range->high, 0);\n+      print_generic_expr (dump_file, range->high);\n       fprintf (dump_file, \"]\");\n       for (i = 0; i < count; i++)\n \t{\n@@ -2360,13 +2360,13 @@ update_range_test (struct range_entry *range, struct range_entry *otherrange,\n \t  else\n \t    r = otherrangep[i];\n \t  fprintf (dump_file, \" and %c[\", r->in_p ? '+' : '-');\n-\t  print_generic_expr (dump_file, r->low, 0);\n+\t  print_generic_expr (dump_file, r->low);\n \t  fprintf (dump_file, \", \");\n-\t  print_generic_expr (dump_file, r->high, 0);\n+\t  print_generic_expr (dump_file, r->high);\n \t  fprintf (dump_file, \"]\");\n \t}\n       fprintf (dump_file, \"\\n into \");\n-      print_generic_expr (dump_file, tem, 0);\n+      print_generic_expr (dump_file, tem);\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -2978,23 +2978,23 @@ optimize_range_tests_var_bound (enum tree_code opcode, int first, int length,\n \t{\n \t  struct range_entry *r = &ranges[*idx];\n \t  fprintf (dump_file, \"Optimizing range test \");\n-\t  print_generic_expr (dump_file, r->exp, 0);\n+\t  print_generic_expr (dump_file, r->exp);\n \t  fprintf (dump_file, \" +[\");\n-\t  print_generic_expr (dump_file, r->low, 0);\n+\t  print_generic_expr (dump_file, r->low);\n \t  fprintf (dump_file, \", \");\n-\t  print_generic_expr (dump_file, r->high, 0);\n+\t  print_generic_expr (dump_file, r->high);\n \t  fprintf (dump_file, \"] and comparison \");\n-\t  print_generic_expr (dump_file, rhs1, 0);\n+\t  print_generic_expr (dump_file, rhs1);\n \t  fprintf (dump_file, \" %s \", op_symbol_code (ccode));\n-\t  print_generic_expr (dump_file, rhs2, 0);\n+\t  print_generic_expr (dump_file, rhs2);\n \t  fprintf (dump_file, \"\\n into (\");\n-\t  print_generic_expr (dump_file, utype, 0);\n+\t  print_generic_expr (dump_file, utype);\n \t  fprintf (dump_file, \") \");\n-\t  print_generic_expr (dump_file, rhs1, 0);\n+\t  print_generic_expr (dump_file, rhs1);\n \t  fprintf (dump_file, \" %s (\", op_symbol_code (ccode));\n-\t  print_generic_expr (dump_file, utype, 0);\n+\t  print_generic_expr (dump_file, utype);\n \t  fprintf (dump_file, \") \");\n-\t  print_generic_expr (dump_file, rhs2, 0);\n+\t  print_generic_expr (dump_file, rhs2);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n@@ -3284,11 +3284,11 @@ optimize_vec_cond_expr (tree_code opcode, vec<operand_entry *> *ops)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Transforming \");\n-\t      print_generic_expr (dump_file, cond0, 0);\n+\t      print_generic_expr (dump_file, cond0);\n \t      fprintf (dump_file, \" %c \", opcode == BIT_AND_EXPR ? '&' : '|');\n-\t      print_generic_expr (dump_file, cond1, 0);\n+\t      print_generic_expr (dump_file, cond1);\n \t      fprintf (dump_file, \" into \");\n-\t      print_generic_expr (dump_file, comb, 0);\n+\t      print_generic_expr (dump_file, comb);\n \t      fputc ('\\n', dump_file);\n \t    }\n \n@@ -4219,7 +4219,7 @@ rewrite_expr_tree (gimple *stmt, unsigned int opindex,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Transforming \");\n-\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t      print_gimple_stmt (dump_file, stmt, 0);\n \t    }\n \n \t  /* If the stmt that defines operand has to be inserted, insert it\n@@ -4262,7 +4262,7 @@ rewrite_expr_tree (gimple *stmt, unsigned int opindex,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \" into \");\n-\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t      print_gimple_stmt (dump_file, stmt, 0);\n \t    }\n \t}\n       return lhs;\n@@ -4290,7 +4290,7 @@ rewrite_expr_tree (gimple *stmt, unsigned int opindex,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Transforming \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t}\n \n       /* If changed is false, this is either opindex == 0\n@@ -4328,7 +4328,7 @@ rewrite_expr_tree (gimple *stmt, unsigned int opindex,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \" into \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t}\n     }\n   return lhs;\n@@ -4488,7 +4488,7 @@ rewrite_expr_tree_parallel (gassign *stmt, int width,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Transforming \");\n-\t  print_gimple_stmt (dump_file, stmts[i], 0, 0);\n+\t  print_gimple_stmt (dump_file, stmts[i], 0);\n \t}\n \n       /* If the stmt that defines operand has to be inserted, insert it\n@@ -4514,7 +4514,7 @@ rewrite_expr_tree_parallel (gassign *stmt, int width,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \" into \");\n-\t  print_gimple_stmt (dump_file, stmts[i], 0, 0);\n+\t  print_gimple_stmt (dump_file, stmts[i], 0);\n \t}\n     }\n \n@@ -4557,7 +4557,7 @@ linearize_expr (gimple *stmt)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Linearized: \");\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n     }\n \n   reassociate_stats.linearized++;\n@@ -4698,7 +4698,7 @@ break_up_subtract (gimple *stmt, gimple_stmt_iterator *gsip)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Breaking up subtract \");\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n     }\n \n   rhs2 = negate_value (rhs2, gsip);\n@@ -4869,7 +4869,7 @@ linearize_expr_tree (vec<operand_entry *> *ops, gimple *stmt,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"swapping operands of \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t}\n \n       swap_ssa_operands (stmt,\n@@ -4880,7 +4880,7 @@ linearize_expr_tree (vec<operand_entry *> *ops, gimple *stmt,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \" is now \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t}\n \n       /* We want to make it so the lhs is always the reassociative op,\n@@ -5224,7 +5224,7 @@ attempt_builtin_powi (gimple *stmt, vec<operand_entry *> *ops)\n \t\t  for (elt = j; elt < vec_len; elt++)\n \t\t    {\n \t\t      rf = &repeat_factor_vec[elt];\n-\t\t      print_generic_expr (dump_file, rf->factor, 0);\n+\t\t      print_generic_expr (dump_file, rf->factor);\n \t\t      if (elt < vec_len - 1)\n \t\t\tfputs (\" * \", dump_file);\n \t\t    }\n@@ -5251,7 +5251,7 @@ attempt_builtin_powi (gimple *stmt, vec<operand_entry *> *ops)\n \t\t  for (elt = j; elt < vec_len; elt++)\n \t\t    {\n \t\t      rf = &repeat_factor_vec[elt];\n-\t\t      print_generic_expr (dump_file, rf->factor, 0);\n+\t\t      print_generic_expr (dump_file, rf->factor);\n \t\t      if (elt < vec_len - 1)\n \t\t\tfputs (\" * \", dump_file);\n \t\t    }\n@@ -5285,7 +5285,7 @@ attempt_builtin_powi (gimple *stmt, vec<operand_entry *> *ops)\n \t      for (elt = j; elt < vec_len; elt++)\n \t\t{\n \t\t  rf = &repeat_factor_vec[elt];\n-\t\t  print_generic_expr (dump_file, rf->factor, 0);\n+\t\t  print_generic_expr (dump_file, rf->factor);\n \t\t  if (elt < vec_len - 1)\n \t\t    fputs (\" * \", dump_file);\n \t\t}\n@@ -5479,16 +5479,16 @@ attempt_builtin_copysign (vec<operand_entry *> *ops)\n \t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t\t{\n \t\t\t  fprintf (dump_file, \"Optimizing copysign: \");\n-\t\t\t  print_generic_expr (dump_file, cst, 0);\n+\t\t\t  print_generic_expr (dump_file, cst);\n \t\t\t  fprintf (dump_file, \" * COPYSIGN (\");\n-\t\t\t  print_generic_expr (dump_file, arg0, 0);\n+\t\t\t  print_generic_expr (dump_file, arg0);\n \t\t\t  fprintf (dump_file, \", \");\n-\t\t\t  print_generic_expr (dump_file, arg1, 0);\n+\t\t\t  print_generic_expr (dump_file, arg1);\n \t\t\t  fprintf (dump_file, \") into %sCOPYSIGN (\",\n \t\t\t\t   cst1_neg ? \"-\" : \"\");\n-\t\t\t  print_generic_expr (dump_file, mul, 0);\n+\t\t\t  print_generic_expr (dump_file, mul);\n \t\t\t  fprintf (dump_file, \", \");\n-\t\t\t  print_generic_expr (dump_file, arg1, 0);\n+\t\t\t  print_generic_expr (dump_file, arg1);\n \t\t\t  fprintf (dump_file, \"\\n\");\n \t\t\t}\n \t\t      return;\n@@ -5512,7 +5512,7 @@ transform_stmt_to_copy (gimple_stmt_iterator *gsi, gimple *stmt, tree new_rhs)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Transforming \");\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n     }\n \n   rhs1 = gimple_assign_rhs1 (stmt);\n@@ -5523,7 +5523,7 @@ transform_stmt_to_copy (gimple_stmt_iterator *gsi, gimple *stmt, tree new_rhs)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \" into \");\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n     }\n }\n \n@@ -5536,7 +5536,7 @@ transform_stmt_to_multiply (gimple_stmt_iterator *gsi, gimple *stmt,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Transforming \");\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n     }\n \n   gimple_assign_set_rhs_with_ops (gsi, MULT_EXPR, rhs1, rhs2);\n@@ -5546,7 +5546,7 @@ transform_stmt_to_multiply (gimple_stmt_iterator *gsi, gimple *stmt,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \" into \");\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n     }\n }\n \n@@ -5868,7 +5868,7 @@ dump_ops_vector (FILE *file, vec<operand_entry *> ops)\n   FOR_EACH_VEC_ELT (ops, i, oe)\n     {\n       fprintf (file, \"Op %d -> rank: %d, tree: \", i, oe->rank);\n-      print_generic_expr (file, oe->op, 0);\n+      print_generic_expr (file, oe->op);\n       fprintf (file, \"\\n\");\n     }\n }"}, {"sha": "c140c358fc31c9d9f01cdd02372780059e04a10e", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -1740,7 +1740,7 @@ vn_nary_build_or_lookup_1 (code_helper rcode, tree type, tree *ops,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Inserting name \");\n-\t  print_generic_expr (dump_file, result, 0);\n+\t  print_generic_expr (dump_file, result);\n \t  fprintf (dump_file, \" for expression \");\n \t  print_gimple_expr (dump_file, new_stmt, 0, TDF_SLIM);\n \t  fprintf (dump_file, \"\\n\");\n@@ -3157,7 +3157,7 @@ print_scc (FILE *out, vec<tree> scc)\n   FOR_EACH_VEC_ELT (scc, i, var)\n     {\n       fprintf (out, \" \");\n-      print_generic_expr (out, var, 0);\n+      print_generic_expr (out, var);\n     }\n   fprintf (out, \"\\n\");\n }\n@@ -3279,9 +3279,9 @@ set_ssa_val_to (tree from, tree to)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Not changing value number of \");\n-\t      print_generic_expr (dump_file, from, 0);\n+\t      print_generic_expr (dump_file, from);\n \t      fprintf (dump_file, \" from VARYING to \");\n-\t      print_generic_expr (dump_file, to, 0);\n+\t      print_generic_expr (dump_file, to);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t  return false;\n@@ -3294,11 +3294,11 @@ set_ssa_val_to (tree from, tree to)\n \t    {\n \t      fprintf (dump_file, \"Forcing VARYING instead of changing \"\n \t\t       \"value number of \");\n-\t      print_generic_expr (dump_file, from, 0);\n+\t      print_generic_expr (dump_file, from);\n \t      fprintf (dump_file, \" from \");\n-\t      print_generic_expr (dump_file, currval, 0);\n+\t      print_generic_expr (dump_file, currval);\n \t      fprintf (dump_file, \" (non-constant) to \");\n-\t      print_generic_expr (dump_file, to, 0);\n+\t      print_generic_expr (dump_file, to);\n \t      fprintf (dump_file, \" (constant)\\n\");\n \t    }\n \t  to = from;\n@@ -3311,9 +3311,9 @@ set_ssa_val_to (tree from, tree to)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Setting value number of \");\n-      print_generic_expr (dump_file, from, 0);\n+      print_generic_expr (dump_file, from);\n       fprintf (dump_file, \" to \");\n-      print_generic_expr (dump_file, to, 0);\n+      print_generic_expr (dump_file, to);\n     }\n \n   if (currval != to\n@@ -3790,9 +3790,9 @@ visit_reference_op_store (tree lhs, tree op, gimple *stmt)\n \t{\n \t  fprintf (dump_file, \"No store match\\n\");\n \t  fprintf (dump_file, \"Value numbering store \");\n-\t  print_generic_expr (dump_file, lhs, 0);\n+\t  print_generic_expr (dump_file, lhs);\n \t  fprintf (dump_file, \" to \");\n-\t  print_generic_expr (dump_file, op, 0);\n+\t  print_generic_expr (dump_file, op);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n       /* Have to set value numbers before insert, since insert is\n@@ -3934,9 +3934,9 @@ visit_use (tree use)\n       && !SSA_NAME_IS_DEFAULT_DEF (use))\n     {\n       fprintf (dump_file, \"Value numbering \");\n-      print_generic_expr (dump_file, use, 0);\n+      print_generic_expr (dump_file, use);\n       fprintf (dump_file, \" stmt = \");\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n     }\n \n   /* Handle uninitialized uses.  */\n@@ -3967,9 +3967,9 @@ visit_use (tree use)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"RHS \");\n-\t      print_gimple_expr (dump_file, ass, 0, 0);\n+\t      print_gimple_expr (dump_file, ass, 0);\n \t      fprintf (dump_file, \" simplified to \");\n-\t      print_generic_expr (dump_file, simplified, 0);\n+\t      print_generic_expr (dump_file, simplified);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t}\n@@ -4053,9 +4053,9 @@ visit_use (tree use)\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n \t\t  fprintf (dump_file, \"call \");\n-\t\t  print_gimple_expr (dump_file, call_stmt, 0, 0);\n+\t\t  print_gimple_expr (dump_file, call_stmt, 0);\n \t\t  fprintf (dump_file, \" simplified to \");\n-\t\t  print_generic_expr (dump_file, simplified, 0);\n+\t\t  print_generic_expr (dump_file, simplified);\n \t\t  fprintf (dump_file, \"\\n\");\n \t\t}\n \t    }\n@@ -4886,7 +4886,7 @@ sccvn_dom_walker::before_dom_children (basic_block bb)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Visiting control stmt ending BB %d: \", bb->index);\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n     }\n \n   /* ???  We can even handle stmts with outgoing EH or ABNORMAL edges\n@@ -5014,9 +5014,9 @@ run_scc_vn (vn_lookup_kind default_vn_walk_kind_)\n \t  if (VN_INFO (name)->visited\n \t      && SSA_VAL (name) != name)\n \t    {\n-\t      print_generic_expr (dump_file, name, 0);\n+\t      print_generic_expr (dump_file, name);\n \t      fprintf (dump_file, \" = \");\n-\t      print_generic_expr (dump_file, SSA_VAL (name), 0);\n+\t      print_generic_expr (dump_file, SSA_VAL (name));\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t}"}, {"sha": "814f1c7b05b29ea17e3ffb57abe4f352611173cf", "filename": "gcc/tree-ssa-scopedtables.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-scopedtables.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-scopedtables.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-scopedtables.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -215,7 +215,7 @@ avail_exprs_stack::lookup_avail_expr (gimple *stmt, bool insert, bool tbaa_p)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"FIND: \");\n-      print_generic_expr (dump_file, lhs, 0);\n+      print_generic_expr (dump_file, lhs);\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -737,36 +737,36 @@ expr_hash_elt::print (FILE *stream)\n \n   if (m_lhs)\n     {\n-      print_generic_expr (stream, m_lhs, 0);\n+      print_generic_expr (stream, m_lhs);\n       fprintf (stream, \" = \");\n     }\n \n   switch (m_expr.kind)\n     {\n       case EXPR_SINGLE:\n-        print_generic_expr (stream, m_expr.ops.single.rhs, 0);\n-        break;\n+\tprint_generic_expr (stream, m_expr.ops.single.rhs);\n+\tbreak;\n \n       case EXPR_UNARY:\n \tfprintf (stream, \"%s \", get_tree_code_name (m_expr.ops.unary.op));\n-        print_generic_expr (stream, m_expr.ops.unary.opnd, 0);\n-        break;\n+\tprint_generic_expr (stream, m_expr.ops.unary.opnd);\n+\tbreak;\n \n       case EXPR_BINARY:\n-        print_generic_expr (stream, m_expr.ops.binary.opnd0, 0);\n+\tprint_generic_expr (stream, m_expr.ops.binary.opnd0);\n \tfprintf (stream, \" %s \", get_tree_code_name (m_expr.ops.binary.op));\n-        print_generic_expr (stream, m_expr.ops.binary.opnd1, 0);\n-        break;\n+\tprint_generic_expr (stream, m_expr.ops.binary.opnd1);\n+\tbreak;\n \n       case EXPR_TERNARY:\n \tfprintf (stream, \" %s <\", get_tree_code_name (m_expr.ops.ternary.op));\n-        print_generic_expr (stream, m_expr.ops.ternary.opnd0, 0);\n+\tprint_generic_expr (stream, m_expr.ops.ternary.opnd0);\n \tfputs (\", \", stream);\n-        print_generic_expr (stream, m_expr.ops.ternary.opnd1, 0);\n+\tprint_generic_expr (stream, m_expr.ops.ternary.opnd1);\n \tfputs (\", \", stream);\n-        print_generic_expr (stream, m_expr.ops.ternary.opnd2, 0);\n+\tprint_generic_expr (stream, m_expr.ops.ternary.opnd2);\n \tfputs (\">\", stream);\n-        break;\n+\tbreak;\n \n       case EXPR_CALL:\n         {\n@@ -779,11 +779,11 @@ expr_hash_elt::print (FILE *stream)\n             fputs (internal_fn_name (gimple_call_internal_fn (fn_from)),\n                    stream);\n           else\n-            print_generic_expr (stream, gimple_call_fn (fn_from), 0);\n+\t    print_generic_expr (stream, gimple_call_fn (fn_from));\n           fprintf (stream, \" (\");\n           for (i = 0; i < nargs; i++)\n             {\n-              print_generic_expr (stream, m_expr.ops.call.args[i], 0);\n+\t      print_generic_expr (stream, m_expr.ops.call.args[i]);\n               if (i + 1 < nargs)\n                 fprintf (stream, \", \");\n             }\n@@ -799,7 +799,7 @@ expr_hash_elt::print (FILE *stream)\n           fprintf (stream, \"PHI <\");\n           for (i = 0; i < nargs; i++)\n             {\n-              print_generic_expr (stream, m_expr.ops.phi.args[i], 0);\n+\t      print_generic_expr (stream, m_expr.ops.phi.args[i]);\n               if (i + 1 < nargs)\n                 fprintf (stream, \", \");\n             }\n@@ -811,7 +811,7 @@ expr_hash_elt::print (FILE *stream)\n   if (m_vop)\n     {\n       fprintf (stream, \" with \");\n-      print_generic_expr (stream, m_vop, 0);\n+      print_generic_expr (stream, m_vop);\n     }\n \n   fprintf (stream, \"\\n\");\n@@ -838,9 +838,9 @@ const_and_copies::pop_to_marker (void)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"<<<< COPY \");\n-\t  print_generic_expr (dump_file, dest, 0);\n+\t  print_generic_expr (dump_file, dest);\n \t  fprintf (dump_file, \" = \");\n-\t  print_generic_expr (dump_file, SSA_NAME_VALUE (dest), 0);\n+\t  print_generic_expr (dump_file, SSA_NAME_VALUE (dest));\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n@@ -859,9 +859,9 @@ const_and_copies::record_const_or_copy_raw (tree x, tree y, tree prev_x)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"0>>> COPY \");\n-      print_generic_expr (dump_file, x, 0);\n+      print_generic_expr (dump_file, x);\n       fprintf (dump_file, \" = \");\n-      print_generic_expr (dump_file, y, 0);\n+      print_generic_expr (dump_file, y);\n       fprintf (dump_file, \"\\n\");\n     }\n "}, {"sha": "5c2fee00a5aa71a12ab817e10695b810ab68cefd", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -7453,7 +7453,7 @@ compute_dependence_clique (void)\n \t\t    {\n \t\t      fprintf (dump_file, \"found restrict pointed-to \"\n \t\t\t       \"for \");\n-\t\t      print_generic_expr (dump_file, ptr, 0);\n+\t\t      print_generic_expr (dump_file, ptr);\n \t\t      fprintf (dump_file, \" but not exclusively\\n\");\n \t\t    }\n \t\t  restrict_var = NULL;"}, {"sha": "b587599f8f87acf70d21e6cbcfc445a88f5c5a29", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -808,7 +808,7 @@ collect_phi_def_edges (gphi *phi, basic_block cd_root,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"\\n[CHECK] Found def edge %d in \", (int) i);\n-\t      print_gimple_stmt (dump_file, phi, 0, 0);\n+\t      print_gimple_stmt (dump_file, phi, 0);\n \t    }\n \t  edges->safe_push (opnd_edge);\n \t}\n@@ -826,7 +826,7 @@ collect_phi_def_edges (gphi *phi, basic_block cd_root,\n \t\t{\n \t\t  fprintf (dump_file, \"\\n[CHECK] Found def edge %d in \",\n \t\t\t   (int) i);\n-\t\t  print_gimple_stmt (dump_file, phi, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, phi, 0);\n \t\t}\n \t      edges->safe_push (opnd_edge);\n \t    }\n@@ -899,7 +899,7 @@ dump_predicates (gimple *usestmt, pred_chain_union preds, const char *msg)\n   size_t i, j;\n   pred_chain one_pred_chain = vNULL;\n   fprintf (dump_file, \"%s\", msg);\n-  print_gimple_stmt (dump_file, usestmt, 0, 0);\n+  print_gimple_stmt (dump_file, usestmt, 0);\n   fprintf (dump_file, \"is guarded by :\\n\\n\");\n   size_t num_preds = preds.length ();\n   /* Do some dumping here:  */\n@@ -915,9 +915,9 @@ dump_predicates (gimple *usestmt, pred_chain_union preds, const char *msg)\n \t  pred_info one_pred = one_pred_chain[j];\n \t  if (one_pred.invert)\n \t    fprintf (dump_file, \" (.NOT.) \");\n-\t  print_generic_expr (dump_file, one_pred.pred_lhs, 0);\n+\t  print_generic_expr (dump_file, one_pred.pred_lhs);\n \t  fprintf (dump_file, \" %s \", op_symbol_code (one_pred.cond_code));\n-\t  print_generic_expr (dump_file, one_pred.pred_rhs, 0);\n+\t  print_generic_expr (dump_file, one_pred.pred_rhs);\n \t  if (j < np - 1)\n \t    fprintf (dump_file, \" (.AND.) \");\n \t  else\n@@ -2472,7 +2472,7 @@ find_uninit_use (gphi *phi, unsigned uninit_opnds,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"[CHECK]: Found unguarded use: \");\n-\t  print_gimple_stmt (dump_file, use_stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, use_stmt, 0);\n \t}\n       /* Found one real use, return.  */\n       if (gimple_code (use_stmt) != GIMPLE_PHI)\n@@ -2488,7 +2488,7 @@ find_uninit_use (gphi *phi, unsigned uninit_opnds,\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"[WORKLIST]: Update worklist with phi: \");\n-\t      print_gimple_stmt (dump_file, use_stmt, 0, 0);\n+\t      print_gimple_stmt (dump_file, use_stmt, 0);\n \t    }\n \n \t  worklist->safe_push (as_a<gphi *> (use_stmt));\n@@ -2530,7 +2530,7 @@ warn_uninitialized_phi (gphi *phi, vec<gphi *> *worklist,\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"[CHECK]: examining phi: \");\n-      print_gimple_stmt (dump_file, phi, 0, 0);\n+      print_gimple_stmt (dump_file, phi, 0);\n     }\n \n   /* Now check if we have any use of the value without proper guard.  */\n@@ -2632,7 +2632,7 @@ pass_late_warn_uninitialized::execute (function *fun)\n \t\tif (dump_file && (dump_flags & TDF_DETAILS))\n \t\t  {\n \t\t    fprintf (dump_file, \"[WORKLIST]: add to initial list: \");\n-\t\t    print_gimple_stmt (dump_file, phi, 0, 0);\n+\t\t    print_gimple_stmt (dump_file, phi, 0);\n \t\t  }\n \t\tbreak;\n \t      }"}, {"sha": "45b9951bf256b3012d36fa9c51590358ba83ebb9", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -640,8 +640,8 @@ verify_vssa (basic_block bb, tree current_vdef, sbitmap visited)\n \t  if (phi)\n \t    {\n \t      error (\"multiple virtual PHI nodes in BB %d\", bb->index);\n-\t      print_gimple_stmt (stderr, phi, 0, 0);\n-\t      print_gimple_stmt (stderr, si.phi (), 0, 0);\n+\t      print_gimple_stmt (stderr, phi, 0);\n+\t      print_gimple_stmt (stderr, si.phi (), 0);\n \t      err = true;\n \t    }\n \t  else\n@@ -654,7 +654,7 @@ verify_vssa (basic_block bb, tree current_vdef, sbitmap visited)\n       if (TREE_CODE (current_vdef) != SSA_NAME)\n \t{\n \t  error (\"virtual definition is not an SSA name\");\n-\t  print_gimple_stmt (stderr, phi, 0, 0);\n+\t  print_gimple_stmt (stderr, phi, 0);\n \t  err = true;\n \t}\n     }\n@@ -672,7 +672,7 @@ verify_vssa (basic_block bb, tree current_vdef, sbitmap visited)\n \t      error (\"stmt with wrong VUSE\");\n \t      print_gimple_stmt (stderr, stmt, 0, TDF_VOPS);\n \t      fprintf (stderr, \"expected \");\n-\t      print_generic_expr (stderr, current_vdef, 0);\n+\t      print_generic_expr (stderr, current_vdef);\n \t      fprintf (stderr, \"\\n\");\n \t      err = true;\n \t    }\n@@ -683,7 +683,7 @@ verify_vssa (basic_block bb, tree current_vdef, sbitmap visited)\n \t      if (TREE_CODE (current_vdef) != SSA_NAME)\n \t\t{\n \t\t  error (\"virtual definition is not an SSA name\");\n-\t\t  print_gimple_stmt (stderr, phi, 0, 0);\n+\t\t  print_gimple_stmt (stderr, phi, 0);\n \t\t  err = true;\n \t\t}\n \t    }\n@@ -703,7 +703,7 @@ verify_vssa (basic_block bb, tree current_vdef, sbitmap visited)\n \t\t e->src->index);\n \t  print_gimple_stmt (stderr, phi, 0, TDF_VOPS);\n \t  fprintf (stderr, \"expected \");\n-\t  print_generic_expr (stderr, current_vdef, 0);\n+\t  print_generic_expr (stderr, current_vdef);\n \t  fprintf (stderr, \"\\n\");\n \t  err = true;\n \t}\n@@ -820,7 +820,7 @@ verify_def (basic_block bb, basic_block *definition_block, tree ssa_name,\n \n err:\n   fprintf (stderr, \"while verifying SSA_NAME \");\n-  print_generic_expr (stderr, ssa_name, 0);\n+  print_generic_expr (stderr, ssa_name);\n   fprintf (stderr, \" in statement\\n\");\n   print_gimple_stmt (stderr, stmt, 4, TDF_VOPS);\n \n@@ -1062,9 +1062,9 @@ verify_ssa (bool check_modified_stmt, bool check_ssa_operands)\n \t      if (existed)\n \t\t{\n \t\t  error (\"shared SSA name info\");\n-\t\t  print_generic_expr (stderr, val, 0);\n+\t\t  print_generic_expr (stderr, val);\n \t\t  fprintf (stderr, \" and \");\n-\t\t  print_generic_expr (stderr, name, 0);\n+\t\t  print_generic_expr (stderr, name);\n \t\t  fprintf (stderr, \"\\n\");\n \t\t  goto err;\n \t\t}\n@@ -1564,7 +1564,7 @@ maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs,\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"No longer having address taken: \");\n-\t  print_generic_expr (dump_file, var, 0);\n+\t  print_generic_expr (dump_file, var);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }\n@@ -1581,7 +1581,7 @@ maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs,\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"Now a gimple register: \");\n-\t  print_generic_expr (dump_file, var, 0);\n+\t  print_generic_expr (dump_file, var);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }"}, {"sha": "716a7c285b337f21fd77bc7802cc1a8bd1545037", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6", "patch": "@@ -4417,15 +4417,15 @@ dump_value_range (FILE *file, const value_range *vr)\n \t  && vrp_val_is_min (vr->min))\n \tfprintf (file, \"-INF\");\n       else\n-\tprint_generic_expr (file, vr->min, 0);\n+\tprint_generic_expr (file, vr->min);\n \n       fprintf (file, \", \");\n \n       if (INTEGRAL_TYPE_P (type)\n \t  && vrp_val_is_max (vr->max))\n \tfprintf (file, \"+INF\");\n       else\n-\tprint_generic_expr (file, vr->max, 0);\n+\tprint_generic_expr (file, vr->max);\n \n       fprintf (file, \"]\");\n \n@@ -4438,7 +4438,7 @@ dump_value_range (FILE *file, const value_range *vr)\n \n \t  EXECUTE_IF_SET_IN_BITMAP (vr->equiv, 0, i, bi)\n \t    {\n-\t      print_generic_expr (file, ssa_name (i), 0);\n+\t      print_generic_expr (file, ssa_name (i));\n \t      fprintf (file, \" \");\n \t      c++;\n \t    }\n@@ -4474,7 +4474,7 @@ dump_all_value_ranges (FILE *file)\n     {\n       if (vr_value[i])\n \t{\n-\t  print_generic_expr (file, ssa_name (i), 0);\n+\t  print_generic_expr (file, ssa_name (i));\n \t  fprintf (file, \": \");\n \t  dump_value_range (file, vr_value[i]);\n \t  fprintf (file, \"\\n\");\n@@ -4587,14 +4587,14 @@ dump_asserts_for (FILE *file, tree name)\n   assert_locus *loc;\n \n   fprintf (file, \"Assertions to be inserted for \");\n-  print_generic_expr (file, name, 0);\n+  print_generic_expr (file, name);\n   fprintf (file, \"\\n\");\n \n   loc = asserts_for[SSA_NAME_VERSION (name)];\n   while (loc)\n     {\n       fprintf (file, \"\\t\");\n-      print_gimple_stmt (file, gsi_stmt (loc->si), 0, 0);\n+      print_gimple_stmt (file, gsi_stmt (loc->si), 0);\n       fprintf (file, \"\\n\\tBB #%d\", loc->bb->index);\n       if (loc->e)\n \t{\n@@ -4603,9 +4603,9 @@ dump_asserts_for (FILE *file, tree name)\n \t  dump_edge_info (file, loc->e, dump_flags, 0);\n \t}\n       fprintf (file, \"\\n\\tPREDICATE: \");\n-      print_generic_expr (file, loc->expr, 0);\n+      print_generic_expr (file, loc->expr);\n       fprintf (file, \" %s \", get_tree_code_name (loc->comp_code));\n-      print_generic_expr (file, loc->val, 0);\n+      print_generic_expr (file, loc->val);\n       fprintf (file, \"\\n\\n\");\n       loc = loc->next;\n     }\n@@ -5061,9 +5061,9 @@ register_edge_assert_for_2 (tree name, edge e,\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"Adding assert for \");\n-\t      print_generic_expr (dump_file, name3, 0);\n+\t      print_generic_expr (dump_file, name3);\n \t      fprintf (dump_file, \" from \");\n-\t      print_generic_expr (dump_file, tmp, 0);\n+\t      print_generic_expr (dump_file, tmp);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \n@@ -5088,9 +5088,9 @@ register_edge_assert_for_2 (tree name, edge e,\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"Adding assert for \");\n-\t      print_generic_expr (dump_file, name2, 0);\n+\t      print_generic_expr (dump_file, name2);\n \t      fprintf (dump_file, \" from \");\n-\t      print_generic_expr (dump_file, tmp, 0);\n+\t      print_generic_expr (dump_file, tmp);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \n@@ -5220,9 +5220,9 @@ register_edge_assert_for_2 (tree name, edge e,\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file, \"Adding assert for \");\n-\t\t  print_generic_expr (dump_file, name2, 0);\n+\t\t  print_generic_expr (dump_file, name2);\n \t\t  fprintf (dump_file, \" from \");\n-\t\t  print_generic_expr (dump_file, tmp, 0);\n+\t\t  print_generic_expr (dump_file, tmp);\n \t\t  fprintf (dump_file, \"\\n\");\n \t\t}\n \n@@ -5294,9 +5294,9 @@ register_edge_assert_for_2 (tree name, edge e,\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file, \"Adding assert for \");\n-\t\t  print_generic_expr (dump_file, name2, 0);\n+\t\t  print_generic_expr (dump_file, name2);\n \t\t  fprintf (dump_file, \" from \");\n-\t\t  print_generic_expr (dump_file, tmp, 0);\n+\t\t  print_generic_expr (dump_file, tmp);\n \t\t  fprintf (dump_file, \"\\n\");\n \t\t}\n \n@@ -5533,9 +5533,9 @@ register_edge_assert_for_2 (tree name, edge e,\n \t\t    if (dump_file)\n \t\t      {\n \t\t\tfprintf (dump_file, \"Adding assert for \");\n-\t\t\tprint_generic_expr (dump_file, names[i], 0);\n+\t\t\tprint_generic_expr (dump_file, names[i]);\n \t\t\tfprintf (dump_file, \" from \");\n-\t\t\tprint_generic_expr (dump_file, tmp, 0);\n+\t\t\tprint_generic_expr (dump_file, tmp);\n \t\t\tfprintf (dump_file, \"\\n\");\n \t\t      }\n \n@@ -7541,13 +7541,13 @@ vrp_visit_cond_stmt (gcond *stmt, edge *taken_edge_p)\n       ssa_op_iter i;\n \n       fprintf (dump_file, \"\\nVisiting conditional with predicate: \");\n-      print_gimple_stmt (dump_file, stmt, 0, 0);\n+      print_gimple_stmt (dump_file, stmt, 0);\n       fprintf (dump_file, \"\\nWith known ranges\\n\");\n \n       FOR_EACH_SSA_TREE_OPERAND (use, stmt, i, SSA_OP_USE)\n \t{\n \t  fprintf (dump_file, \"\\t\");\n-\t  print_generic_expr (dump_file, use, 0);\n+\t  print_generic_expr (dump_file, use);\n \t  fprintf (dump_file, \": \");\n \t  dump_value_range (dump_file, vr_value[SSA_NAME_VERSION (use)]);\n \t}\n@@ -7612,7 +7612,7 @@ vrp_visit_cond_stmt (gcond *stmt, edge *taken_edge_p)\n       if (val == NULL_TREE)\n \tfprintf (dump_file, \"DON'T KNOW\\n\");\n       else\n-\tprint_generic_stmt (dump_file, val, 0);\n+\tprint_generic_stmt (dump_file, val);\n     }\n }\n \n@@ -7829,7 +7829,7 @@ vrp_visit_switch_stmt (gswitch *stmt, edge *taken_edge_p)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"\\nVisiting switch expression with operand \");\n-      print_generic_expr (dump_file, op, 0);\n+      print_generic_expr (dump_file, op);\n       fprintf (dump_file, \" with known range \");\n       dump_value_range (dump_file, vr);\n       fprintf (dump_file, \"\\n\");\n@@ -7893,7 +7893,7 @@ vrp_visit_switch_stmt (gswitch *stmt, edge *taken_edge_p)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"  will take edge to \");\n-      print_generic_stmt (dump_file, CASE_LABEL (val), 0);\n+      print_generic_stmt (dump_file, CASE_LABEL (val));\n     }\n }\n \n@@ -7948,7 +7948,7 @@ vrp_visit_stmt (gimple *stmt, edge *taken_edge_p, tree *output_p)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Found new range for \");\n-\t      print_generic_expr (dump_file, *output_p, 0);\n+\t      print_generic_expr (dump_file, *output_p);\n \t      fprintf (dump_file, \": \");\n \t      dump_value_range (dump_file, &vr);\n \t      fprintf (dump_file, \"\\n\");\n@@ -9037,7 +9037,7 @@ vrp_visit_phi_node (gphi *phi)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Found new range for \");\n-\t  print_generic_expr (dump_file, lhs, 0);\n+\t  print_generic_expr (dump_file, lhs);\n \t  fprintf (dump_file, \": \");\n \t  dump_value_range (dump_file, &vr_result);\n \t  fprintf (dump_file, \"\\n\");\n@@ -9579,7 +9579,7 @@ simplify_cond_using_ranges_1 (gcond *stmt)\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file, \"Simplified relational \");\n-\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, stmt, 0);\n \t\t  fprintf (dump_file, \" into \");\n \t\t}\n \n@@ -9591,7 +9591,7 @@ simplify_cond_using_ranges_1 (gcond *stmt)\n \n \t      if (dump_file)\n \t\t{\n-\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, stmt, 0);\n \t\t  fprintf (dump_file, \"\\n\");\n \t\t}\n \n@@ -9609,7 +9609,7 @@ simplify_cond_using_ranges_1 (gcond *stmt)\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file, \"Simplified relational \");\n-\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, stmt, 0);\n \t\t  fprintf (dump_file, \" into \");\n \t\t}\n \n@@ -9621,7 +9621,7 @@ simplify_cond_using_ranges_1 (gcond *stmt)\n \n \t      if (dump_file)\n \t\t{\n-\t\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t  print_gimple_stmt (dump_file, stmt, 0);\n \t\t  fprintf (dump_file, \"\\n\");\n \t\t}\n \n@@ -10335,9 +10335,9 @@ fold_predicate_in (gimple_stmt_iterator *si)\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"Folding predicate \");\n-\t  print_gimple_expr (dump_file, stmt, 0, 0);\n+\t  print_gimple_expr (dump_file, stmt, 0);\n \t  fprintf (dump_file, \" to \");\n-\t  print_generic_expr (dump_file, val, 0);\n+\t  print_generic_expr (dump_file, val);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n \n@@ -10817,7 +10817,7 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Visiting controlling predicate \");\n-\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t      print_gimple_stmt (dump_file, stmt, 0);\n \t    }\n \t  /* Entering a new scope.  Try to see if we can find a VR\n \t     here.  */\n@@ -10870,7 +10870,7 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n       if (interesting && dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Visiting PHI node \");\n-\t  print_gimple_stmt (dump_file, phi, 0, 0);\n+\t  print_gimple_stmt (dump_file, phi, 0);\n \t}\n       if (!has_unvisited_preds\n \t  && interesting)\n@@ -10933,7 +10933,7 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"Visiting stmt \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t}\n \n       if (gcond *cond = dyn_cast <gcond *> (stmt))\n@@ -11123,7 +11123,7 @@ evrp_dom_walker::push_value_range (tree var, value_range *vr)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"pushing new range for \");\n-      print_generic_expr (dump_file, var, 0);\n+      print_generic_expr (dump_file, var);\n       fprintf (dump_file, \": \");\n       dump_value_range (dump_file, vr);\n       fprintf (dump_file, \"\\n\");\n@@ -11142,7 +11142,7 @@ evrp_dom_walker::pop_value_range (tree var)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"popping range for \");\n-      print_generic_expr (dump_file, var, 0);\n+      print_generic_expr (dump_file, var);\n       fprintf (dump_file, \", restoring \");\n       dump_value_range (dump_file, vr);\n       fprintf (dump_file, \"\\n\");\n@@ -11194,7 +11194,7 @@ execute_early_vrp ()\n       if (dump_file && dump_flags & TDF_DETAILS)\n \t{\n \t  fprintf (dump_file, \"Removing dead stmt \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t  print_gimple_stmt (dump_file, stmt, 0);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n       gimple_stmt_iterator gsi = gsi_for_stmt (stmt);"}]}