{"sha": "7123b6ed1f20ca337ec222656264ac7783b5d00c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyM2I2ZWQxZjIwY2EzMzdlYzIyMjY1NjI2NGFjNzc4M2I1ZDAwYw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-07-16T20:07:55Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-07-16T20:07:55Z"}, "message": "pa.c (out_of_line_prologue_epilogue): Delete.\n\n        * pa.c (out_of_line_prologue_epilogue): Delete.\n        (override_options): Remove -mspace related code.\n        (hppa_expand_prologue, hppa_expand_epilogue): Likewise.\n        (compute_frame_size): Only allocate space for register that\n        actually need to be saved.\n        * pa.h (MASK_SPACE, TARGET_SPACE): Delete.\n        (TARGET_SWITCHES): Remove -mspace, -mno-space\n        * pa/t-pa (LIB2FUNCS_EXTRA): Remove ee.asm and ee_fp.asm\n        * pa/t-pro (LIB2FUNCS_EXTRA): Likewise.  Remove -mspace multilib.\n        * pa/ee.asm, pa/ee_fp.asm: Delete.\n\nFrom-SVN: r28125", "tree": {"sha": "7be139fb0e23a4f85e020bd5243d58153f2435b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7be139fb0e23a4f85e020bd5243d58153f2435b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7123b6ed1f20ca337ec222656264ac7783b5d00c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7123b6ed1f20ca337ec222656264ac7783b5d00c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7123b6ed1f20ca337ec222656264ac7783b5d00c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7123b6ed1f20ca337ec222656264ac7783b5d00c/comments", "author": null, "committer": null, "parents": [{"sha": "15c58c19b683768f2a398756bac03e280f0e5527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c58c19b683768f2a398756bac03e280f0e5527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c58c19b683768f2a398756bac03e280f0e5527"}], "stats": {"total": 731, "additions": 15, "deletions": 716}, "files": [{"sha": "1901d20c5e1f3c5db9269a282ddda5a65afc5c80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123b6ed1f20ca337ec222656264ac7783b5d00c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123b6ed1f20ca337ec222656264ac7783b5d00c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7123b6ed1f20ca337ec222656264ac7783b5d00c", "patch": "@@ -1,5 +1,16 @@\n Fri Jul 16 13:48:09 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* pa.c (out_of_line_prologue_epilogue): Delete.\n+\t(override_options): Remove -mspace related code.\n+\t(hppa_expand_prologue, hppa_expand_epilogue): Likewise.\n+\t(compute_frame_size): Only allocate space for register that\n+\tactually need to be saved.\n+\t* pa.h (MASK_SPACE, TARGET_SPACE): Delete.\n+\t(TARGET_SWITCHES): Remove -mspace, -mno-space\n+\t* pa/t-pa (LIB2FUNCS_EXTRA): Remove ee.asm and ee_fp.asm\n+\t* pa/t-pro (LIB2FUNCS_EXTRA): Likewise.  Remove -mspace multilib.\n+\t* pa/ee.asm, pa/ee_fp.asm: Delete.\n+\n \t* pa/elf.h (ASM_OUTPUT_DOUBLE_INT): Define.\n \n \t* config/svr4.h (CONST_SECTION_ASM_OP): Do not emit assembler"}, {"sha": "f707aa43455ac49441a2bdbf557b9af0c5624187", "filename": "gcc/config/pa/ee.asm", "status": "removed", "additions": 0, "deletions": 261, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c58c19b683768f2a398756bac03e280f0e5527/gcc%2Fconfig%2Fpa%2Fee.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c58c19b683768f2a398756bac03e280f0e5527/gcc%2Fconfig%2Fpa%2Fee.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fee.asm?ref=15c58c19b683768f2a398756bac03e280f0e5527", "patch": "@@ -1,261 +0,0 @@\n-;  Subroutines for out of line prologues and epilogues on for the HPPA\n-;  Copyright (C) 1994, 1995, 1996 Free Software Foundation, Inc.\n-\n-;  This file is part of GNU CC.\n-\n-;  GNU CC is free software; you can redistribute it and/or modify\n-;  it under the terms of the GNU General Public License as published by\n-;  the Free Software Foundation; either version 2, or (at your option)\n-;  any later version.\n-\n-;  GNU CC is distributed in the hope that it will be useful,\n-;  but WITHOUT ANY WARRANTY; without even the implied warranty of\n-;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-;  GNU General Public License for more details.\n-\n-;  You should have received a copy of the GNU General Public License\n-;  along with GNU CC; see the file COPYING.  If not, write to\n-;  the Free Software Foundation, 59 Temple Place - Suite 330,\n-;  Boston, MA 02111-1307, USA.\n-\n-\t.SPACE $PRIVATE$\n-\t.SUBSPA $DATA$,QUAD=1,ALIGN=8,ACCESS=31\n-\t.SUBSPA $BSS$,QUAD=1,ALIGN=8,ACCESS=31,ZERO,SORT=82\n-\t.SPACE $TEXT$\n-\t.SUBSPA $LIT$,QUAD=0,ALIGN=8,ACCESS=44\n-\t.SUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\n-\t.SUBSPA $MILLICODE$,QUAD=0,ALIGN=8,ACCESS=44,SORT=8\n-\n-; This is an out-of-line prologue.\n-;\n-; It performs the following operations:\n-;\n-;\t* Saves the return pointer at sp - 20\n-;\n-;\t* Creates a new stack frame (sp'), size of the frame is passed in %r21\n-;\n-;\t* The old stack pointer is saved at sp (frame pointer version only).\n-;\n-;\t* Saves grs (passed in low 16 bits of %r22 into the stack frame\n-;\tat sp' + local_fsize (passed in %r19).\n-;\n-;\t* Saves frs (passed in high 16 bits of %r22) into the stack\n-;\tframe at sp' + local_fsize (passed in %r19).\n-;\n-;\t* Sets up a frame pointer (in %r3) (frame pointer version only).\n-;\n-;\t* Returns to the instruction _immediately_ after the call to\n-;\tthis function.\n-\n-\t.SPACE $TEXT$\n-\t.SUBSPA $MILLICODE$\n-\t.EXPORT __outline_prologue,MILLICODE\n-\t.align 32\n-__outline_prologue\n-\t.PROC\n-\t.CALLINFO FRAME=0,NO_CALLS\n-\t.ENTRY\n-\tcopy %r30,%r20\n-\n-\t; Subtract 4 from our return pointer so that we return to\n-\t; the right location.\n-        ldo -4(%r31),%r31\n-\n-\t; Save off %r2\n-\tstw %r2,-20(%r30)\n-\n-\t; Make our new frame.\n-\tadd %r21,%r30,%r30\n-\n-\t; Add in local_fsize to our frame pointer so we do register\n-\t; saves into the right place\n-\tadd %r20,%r19,%r20\n-\n-\t; %r22 tells us what registers we need to save.  The upper half\n-\t; is for fp registers, the lower half for integer registers.\n-\t; We put the lower half in %r1 and the upper half into %r22\n-\t; for later use.\n-\textru %r22,31,16,%r1\n-\textrs %r22,15,16,%r22\n-\n-\t; %r1 now olds a value 0-18 which corresponds to the number\n-\t; of grs we need to save.  We need to reverse that value so\n-\t; we can just into the table and straight-line execute to the\n-\t; end of the gr saves.\n-\tcomb,= %r0,%r1,L$0000\n-\tsubi 18,%r1,%r1\n-\tblr,n %r1,%r0\n-\tb,n L$0000\n-\tstws,ma %r18,4(%r20)\n-\tnop\n-\tstws,ma %r17,4(%r20)\n-\tnop\n-\tstws,ma %r16,4(%r20)\n-\tnop\n-\tstws,ma %r15,4(%r20)\n-\tnop\n-\tstws,ma %r14,4(%r20)\n-\tnop\n-\tstws,ma %r13,4(%r20)\n-\tnop\n-\tstws,ma %r12,4(%r20)\n-\tnop\n-\tstws,ma %r11,4(%r20)\n-\tnop\n-\tstws,ma %r10,4(%r20)\n-\tnop\n-\tstws,ma %r9,4(%r20)\n-\tnop\n-\tstws,ma %r8,4(%r20)\n-\tnop\n-\tstws,ma %r7,4(%r20)\n-\tnop\n-\tstws,ma %r6,4(%r20)\n-\tnop\n-\tstws,ma %r5,4(%r20)\n-\tnop\n-\tstws,ma %r4,4(%r20)\n-\tnop\n-\tstws,ma %r3,4(%r20)\n-\tnop\n-L$0000\n-\t; All gr saves are done.  Align the temporary frame pointer and\n-\t; do the fr saves.\n-\tldo 7(%r20),%r20\n-\tdepi 0,31,3,%r20\n-\n-\tcomb,= %r0,%r22,L$0001\n-\tsubi 21,%r22,%r22\n-\tblr,n %r22,%r0\n-\tb,n L$0001\n-\tfstws,ma %fr21,8(%r20)\n-\tnop\n-\tfstws,ma %fr20,8(%r20)\n-\tnop\n-\tfstws,ma %fr19,8(%r20)\n-\tnop\n-\tfstws,ma %fr18,8(%r20)\n-\tnop\n-\tfstws,ma %fr17,8(%r20)\n-\tnop\n-\tfstws,ma %fr16,8(%r20)\n-\tnop\n-\tfstws,ma %fr15,8(%r20)\n-\tnop\n-\tfstws,ma %fr14,8(%r20)\n-\tnop\n-\tfstws,ma %fr13,8(%r20)\n-\tnop\n-\tfstws,ma %fr12,8(%r20)\n-\tnop\n-L$0001\n-\t; Return\n-\tbv,n %r0(%r31)\n-\t.EXIT\n-\t.PROCEND\n-\n-\n-\n-\t.EXPORT __outline_epilogue,MILLICODE\n-\t.align 32\n-__outline_epilogue\n-\t.PROC\n-\t.CALLINFO FRAME=0,NO_CALLS\n-\t.ENTRY\n-\t; Get our original stack pointer and put it in %r20\n-\tsub %r30,%r21,%r20\n-\n-\t; Subtract 4 from our return pointer so that we return to\n-\t; the right location.\n-        ldo -4(%r31),%r31\n-\n-\t; Reload %r2\n-\tldw -20(%r20),%r2\n-\n-\t; Add in local_fsize (%r19) to the frame pointer to find\n-\t; the saved registers.\n-\tadd %r20,%r19,%r20\n-\n-\t; %r22 tells us what registers we need to restore.  The upper half\n-\t; is for fp registers, the lower half for integer registers.\n-\t; We put the lower half in %r1 and the upper half into %r22\n-\t; for later use.\n-\textru %r22,31,16,%r1\n-\textrs %r22,15,16,%r22\n-\n-\t; %r1 now olds a value 0-18 which corresponds to the number\n-\t; of grs we need to restore.  We need to reverse that value so\n-\t; we can just into the table and straight-line execute to the\n-\t; end of the gr restore.\n-\tcomb,= %r0,%r1,L$0004\n-\tsubi 18,%r1,%r1\n-\tblr,n %r1,%r0\n-\tb,n L$0004\n-\tldws,ma 4(%r20),%r18\n-\tnop\n-\tldws,ma 4(%r20),%r17\n-\tnop\n-\tldws,ma 4(%r20),%r16\n-\tnop\n-\tldws,ma 4(%r20),%r15\n-\tnop\n-\tldws,ma 4(%r20),%r14\n-\tnop\n-\tldws,ma 4(%r20),%r13\n-\tnop\n-\tldws,ma 4(%r20),%r12\n-\tnop\n-\tldws,ma 4(%r20),%r11\n-\tnop\n-\tldws,ma 4(%r20),%r10\n-\tnop\n-\tldws,ma 4(%r20),%r9\n-\tnop\n-\tldws,ma 4(%r20),%r8\n-\tnop\n-\tldws,ma 4(%r20),%r7\n-\tnop\n-\tldws,ma 4(%r20),%r6\n-\tnop\n-\tldws,ma 4(%r20),%r5\n-\tnop\n-\tldws,ma 4(%r20),%r4\n-\tnop\n-\tldws,ma 4(%r20),%r3\n-\tnop\n-L$0004\n-\t; All gr restore are done.  Align the temporary frame pointer and\n-\t; do the fr restore.\n-\tldo 7(%r20),%r20\n-\tdepi 0,31,3,%r20\n-\n-\tcomb,= %r0,%r22,L$0005\n-\tsubi 21,%r22,%r22\n-\tblr,n %r22,%r0\n-\tb,n L$0005\n-\tfldws,ma 8(%r20),%fr21\n-\tnop\n-\tfldws,ma 8(%r20),%fr20\n-\tnop\n-\tfldws,ma 8(%r20),%fr19\n-\tnop\n-\tfldws,ma 8(%r20),%fr18\n-\tnop\n-\tfldws,ma 8(%r20),%fr17\n-\tnop\n-\tfldws,ma 8(%r20),%fr16\n-\tnop\n-\tfldws,ma 8(%r20),%fr15\n-\tnop\n-\tfldws,ma 8(%r20),%fr14\n-\tnop\n-\tfldws,ma 8(%r20),%fr13\n-\tnop\n-\tfldws,ma 8(%r20),%fr12\n-\tnop\n-L$0005\n-\t; Return and deallocate our frame.\n-\tbv %r0(%r31)\n-\tsub %r30,%r21,%r30\n-\t.EXIT\n-\t.PROCEND"}, {"sha": "ad08acb686b6fa97cf976007b7888a8fc057955a", "filename": "gcc/config/pa/ee_fp.asm", "status": "removed", "additions": 0, "deletions": 274, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c58c19b683768f2a398756bac03e280f0e5527/gcc%2Fconfig%2Fpa%2Fee_fp.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c58c19b683768f2a398756bac03e280f0e5527/gcc%2Fconfig%2Fpa%2Fee_fp.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fee_fp.asm?ref=15c58c19b683768f2a398756bac03e280f0e5527", "patch": "@@ -1,274 +0,0 @@\n-;  Subroutines for out of line prologues and epilogues on for the HPPA\n-;  Copyright (C) 1994, 1995, 1996 Free Software Foundation, Inc.\n-\n-;  This file is part of GNU CC.\n-\n-;  GNU CC is free software; you can redistribute it and/or modify\n-;  it under the terms of the GNU General Public License as published by\n-;  the Free Software Foundation; either version 2, or (at your option)\n-;  any later version.\n-\n-;  GNU CC is distributed in the hope that it will be useful,\n-;  but WITHOUT ANY WARRANTY; without even the implied warranty of\n-;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-;  GNU General Public License for more details.\n-\n-;  You should have received a copy of the GNU General Public License\n-;  along with GNU CC; see the file COPYING.  If not, write to\n-;  the Free Software Foundation, 59 Temple Place - Suite 330,\n-;  Boston, MA 02111-1307, USA.\n-\n-\t.SPACE $PRIVATE$\n-\t.SUBSPA $DATA$,QUAD=1,ALIGN=8,ACCESS=31\n-\t.SUBSPA $BSS$,QUAD=1,ALIGN=8,ACCESS=31,ZERO,SORT=82\n-\t.SPACE $TEXT$\n-\t.SUBSPA $LIT$,QUAD=0,ALIGN=8,ACCESS=44\n-\t.SUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\n-\t.SUBSPA $MILLICODE$,QUAD=0,ALIGN=8,ACCESS=44,SORT=8\n-\n-\n-; This is an out-of-line prologue.\n-;\n-; It performs the following operations:\n-;\n-;\t* Saves the return pointer at sp - 20\n-;\n-;\t* Creates a new stack frame (sp'), size of the frame is passed in %r21\n-;\n-;\t* The old stack pointer is saved at sp (frame pointer version only).\n-;\n-;\t* Saves grs (passed in low 16 bits of %r22 into the stack frame\n-;\tat sp' + local_fsize (passed in %r19).\n-;\n-;\t* Saves frs (passed in high 16 bits of %r22) into the stack\n-;\tframe at sp' + local_fsize (passed in %r19).\n-;\n-;\t* Sets up a frame pointer (in %r3) (frame pointer version only).\n-;\n-;\t* Returns to the instruction _immediately_ after the call to\n-;\tthis function.\n-\n-\t.SPACE $TEXT$\n-\t.SUBSPA $MILLICODE$\n-\t.EXPORT __outline_prologue_fp,MILLICODE\n-\t.align 32\n-__outline_prologue_fp\n-\t.PROC\n-\t.CALLINFO FRAME=0,NO_CALLS\n-\t.ENTRY\n-\tcopy %r30,%r20\n-\n-\t; Subtract 4 from our return pointer so that we return to\n-\t; the right location.\n-        ldo -4(%r31),%r31\n-\n-\t; Save off %r2\n-\tstw %r2,-20(%r30)\n-\n-\t; Make our new frame.\n-\tadd %r21,%r30,%r30\n-\n-\t; Save our old stack pointer.\n-\tstw %r20,0(%r20)\n-\n-\t; Add in local_fsize to our frame pointer so we do register\n-\t; saves into the right place\n-\tadd %r20,%r19,%r20\n-\n-\t; %r22 tells us what registers we need to save.  The upper half\n-\t; is for fp registers, the lower half for integer registers.\n-\t; We put the lower half in %r1 and the upper half into %r22\n-\t; for later use.\n-\textru %r22,31,16,%r1\n-\textrs %r22,15,16,%r22\n-\n-\t; %r1 now olds a value 0-18 which corresponds to the number\n-\t; of grs we need to save.  We need to reverse that value so\n-\t; we can just into the table and straight-line execute to the\n-\t; end of the gr saves.\n-\tcomb,= %r0,%r1,L$0002\n-\tsubi 18,%r1,%r1\n-\tblr,n %r1,%r0\n-\tb,n L$0002\n-\tstws,ma %r18,4(%r20)\n-\tnop\n-\tstws,ma %r17,4(%r20)\n-\tnop\n-\tstws,ma %r16,4(%r20)\n-\tnop\n-\tstws,ma %r15,4(%r20)\n-\tnop\n-\tstws,ma %r14,4(%r20)\n-\tnop\n-\tstws,ma %r13,4(%r20)\n-\tnop\n-\tstws,ma %r12,4(%r20)\n-\tnop\n-\tstws,ma %r11,4(%r20)\n-\tnop\n-\tstws,ma %r10,4(%r20)\n-\tnop\n-\tstws,ma %r9,4(%r20)\n-\tnop\n-\tstws,ma %r8,4(%r20)\n-\tnop\n-\tstws,ma %r7,4(%r20)\n-\tnop\n-\tstws,ma %r6,4(%r20)\n-\tnop\n-\tstws,ma %r5,4(%r20)\n-\tnop\n-\tstws,ma %r4,4(%r20)\n-\tnop\n-\tstws,ma %r3,4(%r20)\n-\tnop\n-L$0002\n-\t; All gr saves are done.  Align the temporary frame pointer and\n-\t; do the fr saves.\n-\tldo 7(%r20),%r20\n-\tdepi 0,31,3,%r20\n-\n-\tcomb,= %r0,%r22,L$0003\n-\tsubi 21,%r22,%r22\n-\tblr,n %r22,%r0\n-\tb,n L$0003\n-\tfstws,ma %fr21,8(%r20)\n-\tnop\n-\tfstws,ma %fr20,8(%r20)\n-\tnop\n-\tfstws,ma %fr19,8(%r20)\n-\tnop\n-\tfstws,ma %fr18,8(%r20)\n-\tnop\n-\tfstws,ma %fr17,8(%r20)\n-\tnop\n-\tfstws,ma %fr16,8(%r20)\n-\tnop\n-\tfstws,ma %fr15,8(%r20)\n-\tnop\n-\tfstws,ma %fr14,8(%r20)\n-\tnop\n-\tfstws,ma %fr13,8(%r20)\n-\tnop\n-\tfstws,ma %fr12,8(%r20)\n-\tnop\n-L$0003\n-\t; Return, setting up a frame pointer in the delay slot\n-\tbv %r0(%r31)\n-\tsub %r30,%r21,%r3\n-\t.EXIT\n-\t.PROCEND\n-\n-\n-; This is an out-of-line epilogue.  It's operation is basically the reverse\n-; of the out-of-line prologue.\n-\n-\t.EXPORT __outline_epilogue_fp,MILLICODE\n-\t.align 32\n-__outline_epilogue_fp\n-\t.PROC\n-\t.CALLINFO FRAME=0,NO_CALLS\n-\t.ENTRY\n-\t; Make a copy of our frame pointer into %r20\n-\tcopy %r3,%r20\n-\n-\t; Subtract 4 from our return pointer so that we return to\n-\t; the right location.\n-        ldo -4(%r31),%r31\n-\n-\t; Reload %r2\n-\t; First save off %r2\n-\tldw -20(%r20),%r2\n-\n-\t; Load our old stack pointer, save it in %r21.\n-\tldw 0(%r20),%r21\n-\n-\t; Add in local_fsize (%r19) to the frame pointer to find\n-\t; the saved registers.\n-\tadd %r20,%r19,%r20\n-\n-\t; %r22 tells us what registers we need to restore.  The upper half\n-\t; is for fp registers, the lower half for integer registers.\n-\t; We put the lower half in %r1 and the upper half into %r22\n-\t; for later use.\n-\textru %r22,31,16,%r1\n-\textrs %r22,15,16,%r22\n-\n-\t; %r1 now olds a value 0-18 which corresponds to the number\n-\t; of grs we need to restore.  We need to reverse that value so\n-\t; we can just into the table and straight-line execute to the\n-\t; end of the gr restore.\n-\tcomb,= %r0,%r1,L$0006\n-\tsubi 18,%r1,%r1\n-\tblr,n %r1,%r0\n-\tb,n L$0006\n-\tldws,ma 4(%r20),%r18\n-\tnop\n-\tldws,ma 4(%r20),%r17\n-\tnop\n-\tldws,ma 4(%r20),%r16\n-\tnop\n-\tldws,ma 4(%r20),%r15\n-\tnop\n-\tldws,ma 4(%r20),%r14\n-\tnop\n-\tldws,ma 4(%r20),%r13\n-\tnop\n-\tldws,ma 4(%r20),%r12\n-\tnop\n-\tldws,ma 4(%r20),%r11\n-\tnop\n-\tldws,ma 4(%r20),%r10\n-\tnop\n-\tldws,ma 4(%r20),%r9\n-\tnop\n-\tldws,ma 4(%r20),%r8\n-\tnop\n-\tldws,ma 4(%r20),%r7\n-\tnop\n-\tldws,ma 4(%r20),%r6\n-\tnop\n-\tldws,ma 4(%r20),%r5\n-\tnop\n-\tldws,ma 4(%r20),%r4\n-\tnop\n-\tldws,ma 4(%r20),%r3\n-\tnop\n-L$0006\n-\t; All gr restore are done.  Align the temporary frame pointer and\n-\t; do the fr restore.\n-\tldo 7(%r20),%r20\n-\tdepi 0,31,3,%r20\n-\n-\tcomb,= %r0,%r22,L$0007\n-\tsubi 21,%r22,%r22\n-\tblr,n %r22,%r0\n-\tb,n L$0007\n-\tfldws,ma 8(%r20),%fr21\n-\tnop\n-\tfldws,ma 8(%r20),%fr20\n-\tnop\n-\tfldws,ma 8(%r20),%fr19\n-\tnop\n-\tfldws,ma 8(%r20),%fr18\n-\tnop\n-\tfldws,ma 8(%r20),%fr17\n-\tnop\n-\tfldws,ma 8(%r20),%fr16\n-\tnop\n-\tfldws,ma 8(%r20),%fr15\n-\tnop\n-\tfldws,ma 8(%r20),%fr14\n-\tnop\n-\tfldws,ma 8(%r20),%fr13\n-\tnop\n-\tfldws,ma 8(%r20),%fr12\n-\tnop\n-L$0007\n-\t; Return and deallocate our frame.\n-\tbv %r0(%r31)\n-\tcopy %r21,%r30\n-\t.EXIT\n-\t.PROCEND\n-\n-"}, {"sha": "af748e08a7bb80bdff8cad7bf9861edcd224ff08", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 147, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123b6ed1f20ca337ec222656264ac7783b5d00c/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123b6ed1f20ca337ec222656264ac7783b5d00c/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=7123b6ed1f20ca337ec222656264ac7783b5d00c", "patch": "@@ -71,10 +71,6 @@ int hp_profile_labelno;\n    registers which were saved by the current function's prologue.  */\n static int gr_saved, fr_saved;\n \n-/* Whether or not the current function uses an out-of-line prologue\n-   and epilogue.  */\n-static int out_of_line_prologue_epilogue;\n-\n static rtx find_addr_reg ();\n \n /* Keep track of the number of bytes we have output in the CODE subspaces\n@@ -174,12 +170,6 @@ override_options ()\n       warning (\"PIC code generation is not compatible with profiling\\n\");\n     }\n \n-  if (TARGET_SPACE && (flag_pic || profile_flag))\n-    {\n-      warning (\"Out of line entry/exit sequences are not compatible\\n\");\n-      warning (\"with PIC or profiling\\n\");\n-    }\n-\n   if (! TARGET_GAS && write_symbols != NO_DEBUG)\n     {\n       warning (\"-g is only supported when using GAS on this processor,\");\n@@ -2566,31 +2556,23 @@ compute_frame_size (size, fregs_live)\n      we need to add this in because of STARTING_FRAME_OFFSET. */\n   fsize = size + (size || frame_pointer_needed ? 8 : 0);\n \n-  /* We must leave enough space for all the callee saved registers\n-     from 3 .. highest used callee save register since we don't\n-     know if we're going to have an inline or out of line prologue\n-     and epilogue.  */\n   for (i = 18; i >= 3; i--)\n     if (regs_ever_live[i])\n       {\n-\tfsize += 4 * (i - 2);\n+\tfsize += 4;\n \tbreak;\n       }\n \n   /* Round the stack.  */\n   fsize = (fsize + 7) & ~7;\n \n-  /* We must leave enough space for all the callee saved registers\n-     from 3 .. highest used callee save register since we don't\n-     know if we're going to have an inline or out of line prologue\n-     and epilogue.  */\n   for (i = 66; i >= 48; i -= 2)\n     if (regs_ever_live[i] || regs_ever_live[i + 1])\n       {\n \tif (fregs_live)\n \t  *fregs_live = 1;\n \n-\tfsize += 4 * (i - 46);\n+\tfsize += 4;\n \tbreak;\n       }\n \n@@ -2691,91 +2673,6 @@ hppa_expand_prologue()\n   tmpreg = gen_rtx_REG (SImode, 1);\n   size_rtx = GEN_INT (actual_fsize);\n \n-  /* Handle out of line prologues and epilogues.  */\n-  if (TARGET_SPACE)\n-    {\n-      rtx operands[2];\n-      int saves = 0;\n-      int outline_insn_count = 0;\n-      int inline_insn_count = 0;\n-\n-      /* Count the number of insns for the inline and out of line\n-\t variants so we can choose one appropriately.\n-\n-\t No need to screw with counting actual_fsize operations -- they're\n-\t done for both inline and out of line prologues.  */\n-      if (regs_ever_live[2])\n-\tinline_insn_count += 1;\n-\n-      if (! cint_ok_for_move (local_fsize))\n-\toutline_insn_count += 2;\n-      else\n-\toutline_insn_count += 1;\n-\n-      /* Put the register save info into %r22.  */\n-      for (i = 18; i >= 3; i--)\n-\tif (regs_ever_live[i] && ! call_used_regs[i])\n-\t  {\n-\t    /* -1 because the stack adjustment is normally done in\n-\t       the same insn as a register save.  */\n-\t    inline_insn_count += (i - 2) - 1;\n-\t    saves = i;\n-            break;\n-\t  }\n-  \n-      for (i = 66; i >= 48; i -= 2)\n-\tif (regs_ever_live[i] || regs_ever_live[i + 1])\n-\t  {\n-\t    /* +1 needed as we load %r1 with the start of the freg\n-\t       save area.  */\n-\t    inline_insn_count += (i/2 - 23) + 1;\n-\t    saves |= ((i/2 - 12 ) << 16);\n-\t    break;\n-\t  }\n-\n-      if (frame_pointer_needed)\n-\tinline_insn_count += 3;\n-\n-      if (! cint_ok_for_move (saves))\n-\toutline_insn_count += 2;\n-      else\n-\toutline_insn_count += 1;\n-\n-      if (TARGET_PORTABLE_RUNTIME)\n-\toutline_insn_count += 2;\n-      else\n-\toutline_insn_count += 1;\n-\t\n-      /* If there's a lot of insns in the prologue, then do it as\n-\t an out-of-line sequence.  */\n-      if (inline_insn_count > outline_insn_count)\n-\t{\n-\t  /* Put the local_fisze into %r19.  */\n-\t  operands[0] = gen_rtx_REG (SImode, 19);\n-\t  operands[1] = GEN_INT (local_fsize);\n-\t  emit_move_insn (operands[0], operands[1]);\n-\n-\t  /* Put the stack size into %r21.  */\n-\t  operands[0] = gen_rtx_REG (SImode, 21);\n-\t  operands[1] = size_rtx;\n-\t  emit_move_insn (operands[0], operands[1]);\n-\n-\t  operands[0] = gen_rtx_REG (SImode, 22);\n-\t  operands[1] = GEN_INT (saves);\n-\t  emit_move_insn (operands[0], operands[1]);\n-\n-\t  /* Now call the out-of-line prologue.  */\n-\t  emit_insn (gen_outline_prologue_call ());\n-\t  emit_insn (gen_blockage ());\n-\n-\t  /* Note that we're using an out-of-line prologue.  */\n-\t  out_of_line_prologue_epilogue = 1;\n-\t  return;     \n-\t}\n-    }\n-\n-  out_of_line_prologue_epilogue = 0;\n-\n   /* Save RP first.  The calling conventions manual states RP will\n      always be stored into the caller's frame at sp-20.  */\n   if (regs_ever_live[2] || profile_flag)\n@@ -3038,48 +2935,6 @@ hppa_expand_epilogue ()\n   int offset,i;\n   int merge_sp_adjust_with_load  = 0;\n \n-  /* Handle out of line prologues and epilogues.  */\n-  if (TARGET_SPACE && out_of_line_prologue_epilogue)\n-    {\n-      int saves = 0;\n-      rtx operands[2];\n-\n-      /* Put the register save info into %r22.  */\n-      for (i = 18; i >= 3; i--)\n-\tif (regs_ever_live[i] && ! call_used_regs[i])\n-\t  {\n-\t    saves = i;\n-            break;\n-\t  }\n-\t  \n-      for (i = 66; i >= 48; i -= 2)\n-\tif (regs_ever_live[i] || regs_ever_live[i + 1])\n-\t  {\n-\t    saves |= ((i/2 - 12 ) << 16);\n-\t    break;\n-\t  }\n-\n-      emit_insn (gen_blockage ());\n-\n-      /* Put the local_fisze into %r19.  */\n-      operands[0] = gen_rtx_REG (SImode, 19);\n-      operands[1] = GEN_INT (local_fsize);\n-      emit_move_insn (operands[0], operands[1]);\n-\n-      /* Put the stack size into %r21.  */\n-      operands[0] = gen_rtx_REG (SImode, 21);\n-      operands[1] = GEN_INT (actual_fsize);\n-      emit_move_insn (operands[0], operands[1]);\n-\n-      operands[0] = gen_rtx_REG (SImode, 22);\n-      operands[1] = GEN_INT (saves);\n-      emit_move_insn (operands[0], operands[1]);\n-\n-      /* Now call the out-of-line epilogue.  */\n-      emit_insn (gen_outline_epilogue_call ());\n-      return;\n-    }\n-\n   /* We will use this often.  */\n   tmpreg = gen_rtx_REG (SImode, 1);\n "}, {"sha": "8132c7bfbcea32a03279cd5b4950298b2c37f3b3", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123b6ed1f20ca337ec222656264ac7783b5d00c/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123b6ed1f20ca337ec222656264ac7783b5d00c/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=7123b6ed1f20ca337ec222656264ac7783b5d00c", "patch": "@@ -108,11 +108,6 @@ extern int target_flags;\n #define MASK_JUMP_IN_DELAY 8\n #define TARGET_JUMP_IN_DELAY (target_flags & MASK_JUMP_IN_DELAY)\n \n-/* Optimize for space.  Currently this only turns on out of line\n-   prologues and epilogues.  */\n-#define MASK_SPACE 16\n-#define TARGET_SPACE (target_flags & MASK_SPACE)\n-\n /* Disable indexed addressing modes.  */\n #define MASK_DISABLE_INDEXING 32\n #define TARGET_DISABLE_INDEXING (target_flags & MASK_DISABLE_INDEXING)\n@@ -174,8 +169,6 @@ extern int target_flags;\n    {\"space-regs\", -MASK_NO_SPACE_REGS, \"Do not disable space regs\"},\t\\\n    {\"jump-in-delay\", MASK_JUMP_IN_DELAY, \"Put jumps in call delay slots\"},\\\n    {\"no-jump-in-delay\", -MASK_JUMP_IN_DELAY, \"Do not put jumps in call delay slots\"},\t\\\n-   {\"space\", MASK_SPACE, \"Optimize for code space\"},\t\t\t\\\n-   {\"no-space\", -MASK_SPACE, \"Do not optimize for code space\"},\t\t\\\n    {\"disable-indexing\", MASK_DISABLE_INDEXING, \"Disable indexed addressing\"},\\\n    {\"no-disable-indexing\", -MASK_DISABLE_INDEXING, \"Do not disable indexed addressing\"},\\\n    {\"portable-runtime\", MASK_PORTABLE_RUNTIME, \"Use portable calling conventions\"},\t\\"}, {"sha": "0d6675836573083a0f9bc0ee59d9f5cc85e25db9", "filename": "gcc/config/pa/t-pa", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123b6ed1f20ca337ec222656264ac7783b5d00c/gcc%2Fconfig%2Fpa%2Ft-pa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123b6ed1f20ca337ec222656264ac7783b5d00c/gcc%2Fconfig%2Fpa%2Ft-pa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pa?ref=7123b6ed1f20ca337ec222656264ac7783b5d00c", "patch": "@@ -1,18 +1,10 @@\n LIBGCC1=libgcc1.null\n CROSS_LIBGCC1=libgcc1.null\n ADA_CFLAGS=-mdisable-indexing\n-LIB2FUNCS_EXTRA=lib2funcs.asm ee.asm ee_fp.asm\n+LIB2FUNCS_EXTRA=lib2funcs.asm\n \n lib2funcs.asm: $(srcdir)/config/pa/lib2funcs.asm\n \trm -f lib2funcs.asm\n \tcp $(srcdir)/config/pa/lib2funcs.asm .\n \n-ee.asm: $(srcdir)/config/pa/ee.asm\n-\trm -f ee.asm\n-\tcp $(srcdir)/config/pa/ee.asm .\n-\n-ee_fp.asm: $(srcdir)/config/pa/ee_fp.asm\n-\trm -f ee_fp.asm\n-\tcp $(srcdir)/config/pa/ee_fp.asm .\n-\n TARGET_LIBGCC2_CFLAGS = -fPIC"}, {"sha": "e68fd179c82f6916bf889c4767a4a37d0f235bc2", "filename": "gcc/config/pa/t-pro", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7123b6ed1f20ca337ec222656264ac7783b5d00c/gcc%2Fconfig%2Fpa%2Ft-pro", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7123b6ed1f20ca337ec222656264ac7783b5d00c/gcc%2Fconfig%2Fpa%2Ft-pro", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pro?ref=7123b6ed1f20ca337ec222656264ac7783b5d00c", "patch": "@@ -7,7 +7,7 @@ LIBGCC1_TEST =\n \n ADA_CFLAGS=-mdisable-indexing\n \n-LIB2FUNCS_EXTRA=fp-bit.c dp-bit.c lib2funcs.asm ee.asm ee_fp.asm\n+LIB2FUNCS_EXTRA=fp-bit.c dp-bit.c lib2funcs.asm \n \n dp-bit.c: $(srcdir)/config/fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c > dp-bit.c\n@@ -19,20 +19,3 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n lib2funcs.asm: $(srcdir)/config/pa/lib2funcs.asm\n \trm -f lib2funcs.asm\n \tcp $(srcdir)/config/pa/lib2funcs.asm .\n-\n-ee.asm: $(srcdir)/config/pa/ee.asm\n-\trm -f ee.asm\n-\tcp $(srcdir)/config/pa/ee.asm .\n-\n-ee_fp.asm: $(srcdir)/config/pa/ee_fp.asm\n-\trm -f ee_fp.asm\n-\tcp $(srcdir)/config/pa/ee_fp.asm .\n-\n-# Build the libraries for both speed and space optimizations\n-\n-MULTILIB_OPTIONS=mspace\n-MULTILIB_DIRNAMES=space\n-MULTILIB_MATCHES=\n-\n-LIBGCC = stmp-multilib\n-INSTALL_LIBGCC = install-multilib"}]}