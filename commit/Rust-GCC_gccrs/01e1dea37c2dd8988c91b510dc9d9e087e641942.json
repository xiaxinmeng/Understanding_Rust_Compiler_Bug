{"sha": "01e1dea37c2dd8988c91b510dc9d9e087e641942", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFlMWRlYTM3YzJkZDg5ODhjOTFiNTEwZGM5ZDllMDg3ZTY0MTk0Mg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-01-26T17:08:12Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-01-26T17:08:12Z"}, "message": "PR other/69006: fix extra newlines after diagnostics\n\ngcc/c-family/ChangeLog:\n\tPR other/69006\n\t* c-opts.c (c_diagnostic_finalizer): Replace invocation of\n\tpp_newline_and_flush with pp_flush.\n\ngcc/cp/ChangeLog:\n\tPR other/69006\n\t* error.c (print_instantiation_partial_context_line): Add missing\n\tnewlines from output for the t == NULL case.\n\t(print_instantiation_partial_context): Remove call to pp_newline.\n\ngcc/ChangeLog:\n\tPR other/69006\n\t* diagnostic-show-locus.c (layout::print_source_line): Replace\n\tcall to pp_newline with call to layout::print_newline.\n\t(layout::print_annotation_line): Likewise.\n\t(layout::move_to_column): Likewise.\n\t(layout::print_any_fixits): After printing any fixits, print a\n\ttrailing newline, if necessary.\n\t(layout::print_newline): New method, resetting any colorization\n\tbefore a newline.\n\t(diagnostic_show_locus): Move the pp_newline to before the\n\tearly bailout.  Remove dummy block enclosing the layout instance.\n\t* diagnostic.c (default_diagnostic_finalizer): Replace invocation\n\tof pp_newline_and_flush with pp_flush.\n\t(diagnostic_append_note): Delete use of pp_newline.\n\t(diagnostic_append_note_at_rich_loc): Delete.\n\t* diagnostic.h (diagnostic_append_note_at_rich_loc): Delete.\n\t* pretty-print.h (output_buffer_append_r): Reset buff->line_length\n\twhen newline characters are added to the buffer.\n\ngcc/fortran/ChangeLog:\n\tPR other/69006\n\t* error.c (gfc_diagnostic_starter): Delete use of pp_newline.\n\ngcc/testsuite/ChangeLog:\n\tPR other/69006\n\t* g++.dg/ext/timevar1.C: Add dg-allow-blank-lines-in-output\n\tdirective.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-color.c: Update\n\texpected multiline output to reflect the colorization being\n\tdisabled before newlines.\n\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n\t(custom_diagnostic_finalizer): Replace call to\n\tpp_newline_and_flush with call to pp_flush.\n\t* gcc.dg/unroll-2.c: Add dg-allow-blank-lines-in-output directive.\n\t* gfortran.dg/implicit_class_1.f90: Likewise.\n\t* lib/gcc-dg.exp (allow_blank_lines): New global.\n\t(dg-allow-blank-lines-in-output): New procedure.\n\t(gcc-dg-prune): Complain about blank lines in the output, unless\n\tdg-allow-blank-lines-in-output was called.\n\t* lib/multiline.exp (_build_multiline_regex): Only support\n\tarbitrary followup text for non-blank-lines, not for blank lines.\n\nFrom-SVN: r232837", "tree": {"sha": "b1f95695dbde83aeccf5ef984f65ac1d0f987b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1f95695dbde83aeccf5ef984f65ac1d0f987b81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01e1dea37c2dd8988c91b510dc9d9e087e641942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e1dea37c2dd8988c91b510dc9d9e087e641942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e1dea37c2dd8988c91b510dc9d9e087e641942", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e1dea37c2dd8988c91b510dc9d9e087e641942/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3dde4d658b231673bd2d61dddd4708ab4ff66b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dde4d658b231673bd2d61dddd4708ab4ff66b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dde4d658b231673bd2d61dddd4708ab4ff66b49"}], "stats": {"total": 304, "additions": 179, "deletions": 125}, "files": [{"sha": "f030101656c25f2c9cf332d6dcfb61162a2bd97b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -1,3 +1,24 @@\n+2016-01-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR other/69006\n+\t* diagnostic-show-locus.c (layout::print_source_line): Replace\n+\tcall to pp_newline with call to layout::print_newline.\n+\t(layout::print_annotation_line): Likewise.\n+\t(layout::move_to_column): Likewise.\n+\t(layout::print_any_fixits): After printing any fixits, print a\n+\ttrailing newline, if necessary.\n+\t(layout::print_newline): New method, resetting any colorization\n+\tbefore a newline.\n+\t(diagnostic_show_locus): Move the pp_newline to before the\n+\tearly bailout.  Remove dummy block enclosing the layout instance.\n+\t* diagnostic.c (default_diagnostic_finalizer): Replace invocation\n+\tof pp_newline_and_flush with pp_flush.\n+\t(diagnostic_append_note): Delete use of pp_newline.\n+\t(diagnostic_append_note_at_rich_loc): Delete.\n+\t* diagnostic.h (diagnostic_append_note_at_rich_loc): Delete.\n+\t* pretty-print.h (output_buffer_append_r): Reset buff->line_length\n+\twhen newline characters are added to the buffer.\n+\n 2016-01-26  Michael Matz  <matz@suse.de>\n \n \t* configure.ac (ac_cv_std_swap_in_utility): New test."}, {"sha": "fdc96eabd7cf3ddcf78450e21fec26ddb6009abf", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -1,3 +1,9 @@\n+2016-01-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR other/69006\n+\t* c-opts.c (c_diagnostic_finalizer): Replace invocation of\n+\tpp_newline_and_flush with pp_flush.\n+\n 2016-01-20  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/69405"}, {"sha": "8cc28aff6000ce829e3e841cd6b06910005441ce", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -169,7 +169,7 @@ c_diagnostic_finalizer (diagnostic_context *context,\n      finalizer -- for tokens resulting from macro expansion.  */\n   virt_loc_aware_diagnostic_finalizer (context, diagnostic);\n   pp_destroy_prefix (context->printer);\n-  pp_newline_and_flush (context->printer);\n+  pp_flush (context->printer);\n }\n \n /* Common default settings for diagnostics.  */"}, {"sha": "b57030b67f730f898bb6932950bf567ceeb58945", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -1,3 +1,10 @@\n+2016-01-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR other/69006\n+\t* error.c (print_instantiation_partial_context_line): Add missing\n+\tnewlines from output for the t == NULL case.\n+\t(print_instantiation_partial_context): Remove call to pp_newline.\n+\n 2016-01-24  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tRevert:"}, {"sha": "89a00a02a3aa4a1e4d4f6151a81a5efafe4bd0fb", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -3365,8 +3365,8 @@ print_instantiation_partial_context_line (diagnostic_context *context,\n     {\n       pp_verbatim (context->printer,\n \t\t   recursive_p\n-\t\t   ? _(\"recursively required from here\")\n-\t\t   : _(\"required from here\"));\n+\t\t   ? _(\"recursively required from here\\n\")\n+\t\t   : _(\"required from here\\n\"));\n     }\n }\n \n@@ -3450,7 +3450,6 @@ print_instantiation_partial_context (diagnostic_context *context,\n     }\n   print_instantiation_partial_context_line (context, NULL, loc,\n \t\t\t\t\t    /*recursive_p=*/false);\n-  pp_newline (context->printer);\n }\n \n /* Called from cp_thing to print the template context for an error.  */"}, {"sha": "d9b6750339b31a0d4c519af4a6a7564b267951e5", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -159,6 +159,8 @@ class layout\n   void print_any_fixits (int row, const rich_location *richloc);\n \n  private:\n+  void print_newline ();\n+\n   bool\n   get_state_at_point (/* Inputs.  */\n \t\t      int row, int column,\n@@ -574,7 +576,7 @@ layout::print_source_line (int row, line_bounds *lbounds_out)\n       pp_character (m_pp, c);\n       line++;\n     }\n-  pp_newline (m_pp);\n+  print_newline ();\n \n   lbounds_out->m_first_non_ws = first_non_ws;\n   lbounds_out->m_last_non_ws = last_non_ws;\n@@ -616,7 +618,7 @@ layout::print_annotation_line (int row, const line_bounds lbounds)\n \t  pp_character (m_pp, ' ');\n \t}\n     }\n-  pp_newline (m_pp);\n+  print_newline ();\n }\n \n /* If there are any fixit hints on source line ROW within RICHLOC, print them.\n@@ -684,6 +686,18 @@ layout::print_any_fixits (int row, const rich_location *richloc)\n \t    }\n \t}\n     }\n+\n+  /* Add a trailing newline, if necessary.  */\n+  move_to_column (&column, 0);\n+}\n+\n+/* Disable any colorization and emit a newline.  */\n+\n+void\n+layout::print_newline ()\n+{\n+  m_colorizer.set_normal_text ();\n+  pp_newline (m_pp);\n }\n \n /* Return true if (ROW/COLUMN) is within a range of the layout.\n@@ -778,7 +792,7 @@ layout::move_to_column (int *column, int dest_column)\n   /* Start a new line if we need to.  */\n   if (*column > dest_column)\n     {\n-      pp_newline (m_pp);\n+      print_newline ();\n       *column = 0;\n     }\n \n@@ -798,41 +812,32 @@ void\n diagnostic_show_locus (diagnostic_context * context,\n \t\t       const diagnostic_info *diagnostic)\n {\n+  pp_newline (context->printer);\n+\n   if (!context->show_caret\n       || diagnostic_location (diagnostic, 0) <= BUILTINS_LOCATION\n       || diagnostic_location (diagnostic, 0) == context->last_location)\n     return;\n \n   context->last_location = diagnostic_location (diagnostic, 0);\n \n-  pp_newline (context->printer);\n-\n   const char *saved_prefix = pp_get_prefix (context->printer);\n   pp_set_prefix (context->printer, NULL);\n \n-  {\n-    layout layout (context, diagnostic);\n-    int last_line = layout.get_last_line ();\n-    for (int row = layout.get_first_line ();\n-\t row <= last_line;\n-\t row++)\n-      {\n-\t/* Print the source line, followed by an annotation line\n-\t   consisting of any caret/underlines, then any fixits.\n-\t   If the source line can't be read, print nothing.  */\n-\tline_bounds lbounds;\n-\tif (layout.print_source_line (row, &lbounds))\n-\t  {\n-\t    layout.print_annotation_line (row, lbounds);\n-\t    layout.print_any_fixits (row, diagnostic->richloc);\n-\t  }\n-      }\n-\n-    /* The closing scope here leads to the dtor for layout and thus\n-       colorizer being called here, which affects the precise\n-       place where colorization is turned off in the unittest\n-       for colorized output.  */\n-  }\n+  layout layout (context, diagnostic);\n+  int last_line = layout.get_last_line ();\n+  for (int row = layout.get_first_line (); row <= last_line; row++)\n+    {\n+      /* Print the source line, followed by an annotation line\n+\t consisting of any caret/underlines, then any fixits.\n+\t If the source line can't be read, print nothing.  */\n+      line_bounds lbounds;\n+      if (layout.print_source_line (row, &lbounds))\n+\t{\n+\t  layout.print_annotation_line (row, lbounds);\n+\t  layout.print_any_fixits (row, diagnostic->richloc);\n+\t}\n+    }\n \n   pp_set_prefix (context->printer, saved_prefix);\n }"}, {"sha": "f661b57db5adc8e02a2acb024bfaa5637ef668a7", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -546,7 +546,7 @@ default_diagnostic_finalizer (diagnostic_context *context,\n {\n   diagnostic_show_locus (context, diagnostic);\n   pp_destroy_prefix (context->printer);\n-  pp_newline_and_flush (context->printer);\n+  pp_flush (context->printer);\n }\n \n /* Interface to specify diagnostic kind overrides.  Returns the\n@@ -879,37 +879,6 @@ diagnostic_append_note (diagnostic_context *context,\n   saved_prefix = pp_get_prefix (context->printer);\n   pp_set_prefix (context->printer,\n                  diagnostic_build_prefix (context, &diagnostic));\n-  pp_newline (context->printer);\n-  pp_format (context->printer, &diagnostic.message);\n-  pp_output_formatted_text (context->printer);\n-  pp_destroy_prefix (context->printer);\n-  pp_set_prefix (context->printer, saved_prefix);\n-  diagnostic_show_locus (context, &diagnostic);\n-  va_end (ap);\n-}\n-\n-/* Same as diagnostic_append_note, but at RICHLOC. */\n-\n-void\n-diagnostic_append_note_at_rich_loc (diagnostic_context *context,\n-\t\t\t\t    rich_location *richloc,\n-\t\t\t\t    const char * gmsgid, ...)\n-{\n-  diagnostic_info diagnostic;\n-  va_list ap;\n-  const char *saved_prefix;\n-\n-  va_start (ap, gmsgid);\n-  diagnostic_set_info (&diagnostic, gmsgid, &ap, richloc, DK_NOTE);\n-  if (context->inhibit_notes_p)\n-    {\n-      va_end (ap);\n-      return;\n-    }\n-  saved_prefix = pp_get_prefix (context->printer);\n-  pp_set_prefix (context->printer,\n-                 diagnostic_build_prefix (context, &diagnostic));\n-  pp_newline (context->printer);\n   pp_format (context->printer, &diagnostic.message);\n   pp_output_formatted_text (context->printer);\n   pp_destroy_prefix (context->printer);"}, {"sha": "7cc5cff185ba198a28a7fc4a094824df6b6e31af", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -293,10 +293,6 @@ extern void diagnostic_set_info_translated (diagnostic_info *, const char *,\n      ATTRIBUTE_GCC_DIAG(2,0);\n extern void diagnostic_append_note (diagnostic_context *, location_t,\n                                     const char *, ...) ATTRIBUTE_GCC_DIAG(3,4);\n-extern void diagnostic_append_note_at_rich_loc (diagnostic_context *,\n-\t\t\t\t\t\trich_location *,\n-\t\t\t\t\t\tconst char *, ...)\n-  ATTRIBUTE_GCC_DIAG(3,4);\n #endif\n extern char *diagnostic_build_prefix (diagnostic_context *, const diagnostic_info *);\n void default_diagnostic_starter (diagnostic_context *, diagnostic_info *);"}, {"sha": "a137e919fe48826446d28dc917f0b6848456473f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -1,3 +1,8 @@\n+2016-01-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR other/69006\n+\t* error.c (gfc_diagnostic_starter): Delete use of pp_newline.\n+\n 2016-01-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/69397"}, {"sha": "e7f4ba7dac055442acb5dc2e4ac51c2b5857ff0a", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -1096,7 +1096,6 @@ gfc_diagnostic_starter (diagnostic_context *context,\n       /* Fortran uses an empty line between locus and caret line.  */\n       pp_newline (context->printer);\n       diagnostic_show_locus (context, diagnostic);\n-      pp_newline (context->printer);\n       /* If the caret line was shown, the prefix does not contain the\n \t locus.  */\n       pp_set_prefix (context->printer, kind_prefix);"}, {"sha": "f49f35ac610b5f797df9e6a554a65d12908a83b5", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -125,7 +125,11 @@ output_buffer_append_r (output_buffer *buff, const char *start, int length)\n {\n   gcc_checking_assert (start);\n   obstack_grow (buff->obstack, start, length);\n-  buff->line_length += length;\n+  for (int i = 0; i < length; i++)\n+    if (start[i] == '\\n')\n+      buff->line_length = 0;\n+    else\n+      buff->line_length++;\n }\n \n /*  Return a pointer to the last character emitted in the"}, {"sha": "18aa8af737fee224558a504720f07bd39b47c6e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -1,3 +1,23 @@\n+2016-01-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR other/69006\n+\t* g++.dg/ext/timevar1.C: Add dg-allow-blank-lines-in-output\n+\tdirective.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-color.c: Update\n+\texpected multiline output to reflect the colorization being\n+\tdisabled before newlines.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c\n+\t(custom_diagnostic_finalizer): Replace call to\n+\tpp_newline_and_flush with call to pp_flush.\n+\t* gcc.dg/unroll-2.c: Add dg-allow-blank-lines-in-output directive.\n+\t* gfortran.dg/implicit_class_1.f90: Likewise.\n+\t* lib/gcc-dg.exp (allow_blank_lines): New global.\n+\t(dg-allow-blank-lines-in-output): New procedure.\n+\t(gcc-dg-prune): Complain about blank lines in the output, unless\n+\tdg-allow-blank-lines-in-output was called.\n+\t* lib/multiline.exp (_build_multiline_regex): Only support\n+\tarbitrary followup text for non-blank-lines, not for blank lines.\n+\n 2016-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69483"}, {"sha": "a48f8ba3705a4bff34460f31c8a8c9d6936c3c24", "filename": "gcc/testsuite/g++.dg/ext/timevar1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftimevar1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftimevar1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftimevar1.C?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -1,5 +1,6 @@\n // PR c++/52248\n // { dg-options \"-ftime-report\" }\n+// { dg-allow-blank-lines-in-output 1 }\n // { dg-prune-output \"wall\" }\n // { dg-prune-output \"times\" }\n // { dg-prune-output \"TOTAL\" }"}, {"sha": "a59025870a6da38bed450df95656c0d3647f2ea7", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-color.c", "status": "modified", "additions": 41, "deletions": 50, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color.c?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -15,8 +15,7 @@ void test_simple (void)\n \n /* { dg-begin-multiline-output \"\" }\n    myvar = \u001b[32m\u001b[Kmyvar\u001b[m\u001b[K\u001b[01;35m\u001b[K.\u001b[m\u001b[K\u001b[34m\u001b[Kx\u001b[m\u001b[K;\n-           \u001b[32m\u001b[K~~~~~\u001b[m\u001b[K\u001b[01;35m\u001b[K^\u001b[m\u001b[K\u001b[34m\u001b[K~\n-\u001b[m\u001b[K\n+           \u001b[32m\u001b[K~~~~~\u001b[m\u001b[K\u001b[01;35m\u001b[K^\u001b[m\u001b[K\u001b[34m\u001b[K~\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -28,8 +27,7 @@ void test_simple_2 (void)\n \n /* { dg-begin-multiline-output \"\" }\n    x = \u001b[32m\u001b[Kfirst_function ()\u001b[m\u001b[K \u001b[01;35m\u001b[K+\u001b[m\u001b[K \u001b[34m\u001b[Ksecond_function ()\u001b[m\u001b[K;\n-       \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~\u001b[m\u001b[K \u001b[01;35m\u001b[K^\u001b[m\u001b[K \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~\n-\u001b[m\u001b[K\n+       \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~\u001b[m\u001b[K \u001b[01;35m\u001b[K^\u001b[m\u001b[K \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -42,11 +40,10 @@ void test_multiline (void)\n        + second_function ()); /* { dg-warning \"test\" } */\n \n /* { dg-begin-multiline-output \"\" }\n-   x = (\u001b[32m\u001b[Kfirst_function ()\n- \u001b[m\u001b[K       \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~\n-\u001b[m\u001b[K        \u001b[01;35m\u001b[K+\u001b[m\u001b[K \u001b[34m\u001b[Ksecond_function ()\u001b[m\u001b[K);\n-        \u001b[01;35m\u001b[K^\u001b[m\u001b[K \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~\n-\u001b[m\u001b[K\n+   x = (\u001b[32m\u001b[Kfirst_function ()\u001b[m\u001b[K\n+        \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+        \u001b[01;35m\u001b[K+\u001b[m\u001b[K \u001b[34m\u001b[Ksecond_function ()\u001b[m\u001b[K);\n+        \u001b[01;35m\u001b[K^\u001b[m\u001b[K \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -67,29 +64,28 @@ void test_many_lines (void)\n                                                 magna, aliqua));\n \n /* { dg-begin-multiline-output \"\" }\n-   x = (\u001b[32m\u001b[Kfirst_function_with_a_very_long_name (lorem, ipsum, dolor, sit, amet,\n- \u001b[m\u001b[K       \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\u001b[m\u001b[K \u001b[32m\u001b[K                                            consectetur, adipiscing, elit,\n- \u001b[m\u001b[K                                            \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\u001b[m\u001b[K \u001b[32m\u001b[K                                            sed, eiusmod, tempor,\n- \u001b[m\u001b[K                                            \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~~\n-\u001b[m\u001b[K \u001b[32m\u001b[K                                            incididunt, ut, labore, et,\n- \u001b[m\u001b[K                                            \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\u001b[m\u001b[K \u001b[32m\u001b[K                                            dolore, magna, aliqua)\n- \u001b[m\u001b[K                                            \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~~~\n-\u001b[m\u001b[K        \u001b[01;35m\u001b[K+\u001b[m\u001b[K \u001b[34m\u001b[Ksecond_function_with_a_very_long_name (lorem, ipsum, dolor, sit,\n- \u001b[m\u001b[K       \u001b[01;35m\u001b[K^\u001b[m\u001b[K \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\u001b[m\u001b[K \u001b[34m\u001b[K                                                amet, consectetur,\n- \u001b[m\u001b[K                                                \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~\n-\u001b[m\u001b[K \u001b[34m\u001b[K                                                adipiscing, elit, sed,\n- \u001b[m\u001b[K                                                \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~~~~~\n-\u001b[m\u001b[K \u001b[34m\u001b[K                                                eiusmod, tempor, incididunt,\n- \u001b[m\u001b[K                                                \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\u001b[m\u001b[K \u001b[34m\u001b[K                                                ut, labore, et, dolore,\n- \u001b[m\u001b[K                                                \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~\n-\u001b[m\u001b[K \u001b[34m\u001b[K                                                magna, aliqua)\u001b[m\u001b[K);\n-                                                 \u001b[34m\u001b[K~~~~~~~~~~~~~~\n-\u001b[m\u001b[K\n+   x = (\u001b[32m\u001b[Kfirst_function_with_a_very_long_name (lorem, ipsum, dolor, sit, amet,\u001b[m\u001b[K\n+        \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+ \u001b[32m\u001b[K                                            consectetur, adipiscing, elit,\u001b[m\u001b[K\n+                                             \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+ \u001b[32m\u001b[K                                            sed, eiusmod, tempor,\u001b[m\u001b[K\n+                                             \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+ \u001b[32m\u001b[K                                            incididunt, ut, labore, et,\u001b[m\u001b[K\n+                                             \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+ \u001b[32m\u001b[K                                            dolore, magna, aliqua)\u001b[m\u001b[K\n+                                             \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+        \u001b[01;35m\u001b[K+\u001b[m\u001b[K \u001b[34m\u001b[Ksecond_function_with_a_very_long_name (lorem, ipsum, dolor, sit,\n+        \u001b[01;35m\u001b[K^\u001b[m\u001b[K \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+ \u001b[34m\u001b[K                                                amet, consectetur,\u001b[m\u001b[K\n+                                                 \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+ \u001b[34m\u001b[K                                                adipiscing, elit, sed,\u001b[m\u001b[K\n+                                                 \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+ \u001b[34m\u001b[K                                                eiusmod, tempor, incididunt,\u001b[m\u001b[K\n+                                                 \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+ \u001b[34m\u001b[K                                                ut, labore, et, dolore,\u001b[m\u001b[K\n+                                                 \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+ \u001b[34m\u001b[K                                                magna, aliqua)\u001b[m\u001b[K);\n+                                                 \u001b[34m\u001b[K~~~~~~~~~~~~~~\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -100,8 +96,7 @@ void test_richloc_from_proper_range (void)\n   float f = 98.6f; /* { dg-warning \"test\" } */\n /* { dg-begin-multiline-output \"\" }\n    float f = \u001b[01;35m\u001b[K98.6f\u001b[m\u001b[K;\n-             \u001b[01;35m\u001b[K^~~~~\n-\u001b[m\u001b[K\n+             \u001b[01;35m\u001b[K^~~~~\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -112,8 +107,7 @@ void test_caret_within_proper_range (void)\n   float f = foo * bar; /* { dg-warning \"17: test\" } */\n /* { dg-begin-multiline-output \"\" }\n    float f = \u001b[01;35m\u001b[Kfoo * bar\u001b[m\u001b[K;\n-             \u001b[01;35m\u001b[K~~~~^~~~~\n-\u001b[m\u001b[K\n+             \u001b[01;35m\u001b[K~~~~^~~~~\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -124,8 +118,7 @@ void test_very_wide_line (void)\n                                                                                 float f = foo * bar; /* { dg-warning \"95: test\" } */\n /* { dg-begin-multiline-output \"\" }\n                                               float f = \u001b[01;35m\u001b[Kfoo * bar\u001b[m\u001b[K;\n-                                                        \u001b[01;35m\u001b[K~~~~^~~~~\n-\u001b[m\u001b[K\n+                                                        \u001b[01;35m\u001b[K~~~~^~~~~\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -136,8 +129,7 @@ void test_multiple_carets (void)\n    x = x + y /* { dg-warning \"8: test\" } */\n /* { dg-begin-multiline-output \"\" }\n     x = \u001b[01;35m\u001b[Kx\u001b[m\u001b[K + \u001b[32m\u001b[Ky\u001b[m\u001b[K\n-        \u001b[01;35m\u001b[KA\u001b[m\u001b[K   \u001b[32m\u001b[KB\n-\u001b[m\u001b[K\n+        \u001b[01;35m\u001b[KA\u001b[m\u001b[K   \u001b[32m\u001b[KB\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -149,10 +141,9 @@ void test_caret_on_leading_whitespace (void)\n       y = 5 /* { dg-warning \"6: test\" } */\n /* { dg-begin-multiline-output \"\" }\n      ASSOCIATE (y =>\u001b[32m\u001b[K \u001b[m\u001b[Kx)\n-                    \u001b[32m\u001b[K2\n-\u001b[m\u001b[K      \u001b[01;35m\u001b[K \u001b[m\u001b[Ky = 5\n-      \u001b[01;35m\u001b[K1\n-\u001b[m\u001b[K\n+                    \u001b[32m\u001b[K2\u001b[m\u001b[K\n+      \u001b[01;35m\u001b[K \u001b[m\u001b[Ky = 5\n+      \u001b[01;35m\u001b[K1\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -166,8 +157,8 @@ void test_fixit_insert (void)\n    int a[2][2] = { 0, 1 , 2, 3 }; /* { dg-warning \"insertion hints\" } */\n /* { dg-begin-multiline-output \"\" }\n     int a[2][2] = { \u001b[01;35m\u001b[K0, 1\u001b[m\u001b[K , 2, 3 };\n-                    \u001b[01;35m\u001b[K^~~~\n-                    {\u001b[m\u001b[K   \u001b[01;35m\u001b[K}\u001b[m\u001b[K\n+                    \u001b[01;35m\u001b[K^~~~\u001b[m\u001b[K\n+                    \u001b[01;35m\u001b[K{\u001b[m\u001b[K   \u001b[01;35m\u001b[K}\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -180,8 +171,8 @@ void test_fixit_remove (void)\n   int a;; /* { dg-warning \"example of a removal hint\" } */\n /* { dg-begin-multiline-output \"\" }\n    int a;\u001b[01;35m\u001b[K;\u001b[m\u001b[K\n-         \u001b[01;35m\u001b[K^\n-         -\u001b[m\u001b[K\n+         \u001b[01;35m\u001b[K^\u001b[m\u001b[K\n+         \u001b[01;35m\u001b[K-\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -194,8 +185,8 @@ void test_fixit_replace (void)\n   gtk_widget_showall (dlg); /* { dg-warning \"example of a replacement hint\" } */\n /* { dg-begin-multiline-output \"\" }\n    \u001b[01;35m\u001b[Kgtk_widget_showall\u001b[m\u001b[K (dlg);\n-   \u001b[01;35m\u001b[K^~~~~~~~~~~~~~~~~~\n-   gtk_widget_show_all\u001b[m\u001b[K\n+   \u001b[01;35m\u001b[K^~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+   \u001b[01;35m\u001b[Kgtk_widget_show_all\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }"}, {"sha": "b4f12ba68c16d3fb5d2d5b5ee3d723827f8321a7", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_show_locus.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -137,7 +137,7 @@ custom_diagnostic_finalizer (diagnostic_context *context,\n   pp_show_color (context->printer) = old_show_color;\n \n   pp_destroy_prefix (context->printer);\n-  pp_newline_and_flush (context->printer);\n+  pp_flush (context->printer);\n }\n \n /* Exercise the diagnostic machinery to emit various warnings,"}, {"sha": "05a141056d720e98624c6774be72837bfd3cd9b7", "filename": "gcc/testsuite/gcc.dg/unroll-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-2.c?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -1,6 +1,10 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-cunrolli-details=stderr -fno-peel-loops -fno-tree-vrp  -fdisable-tree-cunroll -fenable-tree-cunrolli\" } */\n \n+/* Blank lines can occur in the output of\n+   -fdump-tree-cunrolli-details=stderr.  */\n+/* { dg-allow-blank-lines-in-output 1 } */\n+\n unsigned a[100], b[100];\n inline void bar()\n {"}, {"sha": "2ab90405eb0095325384bbbaec58ae6c20ba3ccd", "filename": "gcc/testsuite/gfortran.dg/implicit_class_1.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_class_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_class_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_class_1.f90?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -8,6 +8,7 @@\n ! segfault is working correctly.  No cleanup needed, because the dump\n ! goes to stdout.\n ! { dg-options \"-fdump-fortran-original\" }\n+! { dg-allow-blank-lines-in-output 1 }\n ! { dg-prune-output \"Namespace:.*-{42}\" }\n \n program upimp"}, {"sha": "3dd85645395c21c59cf4874a994f6692168e669c", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -310,13 +310,37 @@ proc gcc-dg-test { prog do_what extra_tool_flags } {\n     return [gcc-dg-test-1 gcc_target_compile $prog $do_what $extra_tool_flags]\n }\n \n+# Global: should blank lines be allowed in the output?\n+# By default, they should not be.  (PR other/69006)\n+# However, there are some ways for them to validly occur.\n+set allow_blank_lines 0\n+\n+# A command for use by testcases to mark themselves as expecting\n+# blank lines in the output.\n+\n+proc dg-allow-blank-lines-in-output { args } {\n+    global allow_blank_lines\n+    set allow_blank_lines 1\n+}\n+\n proc gcc-dg-prune { system text } {\n     global additional_prunes\n \n     # Extra prune rules that will apply to tests defined in a .exp file.\n     # Always remember to clear it in .exp file after executed all tests.\n     global dg_runtest_extra_prunes\n \n+    # Complain about blank lines in the output (PR other/69006)\n+    global allow_blank_lines\n+    if { !$allow_blank_lines } {\n+\tset num_blank_lines [llength [regexp -all -inline \"\\n\\n\" $text]]\n+\tif { $num_blank_lines } {\n+\t    global testname_with_flags\n+\t    fail \"$testname_with_flags $num_blank_lines blank line(s) in output\"\n+\t}\n+\tset allow_blank_lines 0\n+    }\n+\n     set text [prune_gcc_output $text]\n \n     foreach p \"$additional_prunes $dg_runtest_extra_prunes\" {"}, {"sha": "a2e963e555f1a3c910e632df99531431e18c9f9d", "filename": "gcc/testsuite/lib/multiline.exp", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Flib%2Fmultiline.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e1dea37c2dd8988c91b510dc9d9e087e641942/gcc%2Ftestsuite%2Flib%2Fmultiline.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fmultiline.exp?ref=01e1dea37c2dd8988c91b510dc9d9e087e641942", "patch": "@@ -224,10 +224,12 @@ proc _build_multiline_regex { multiline index } {\n \t    set rexp \"${rexp}\\\\|\"\n \t} else {\n \t    # Assume that we have a quoted source line.\n-\t    # Support arbitrary followup text on each line,\n-\t    # to deal with comments containing containing DejaGnu\n-\t    # directives.\n-\t    append rexp \".*\"\n+\t    if {![string equal \"\" $line] }  {\n+\t\t# Support arbitrary followup text on each non-empty line,\n+\t\t# to deal with comments containing containing DejaGnu\n+\t\t# directives.\n+\t\tappend rexp \".*\"\n+\t    }\n \t}\n \tappend rexp \"\\n\"\n     }"}]}