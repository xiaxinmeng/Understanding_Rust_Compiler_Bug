{"sha": "febd7c43bce0a305aa24ed214ea6a5cba69753dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmViZDdjNDNiY2UwYTMwNWFhMjRlZDIxNGVhNmE1Y2JhNjk3NTNkZA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-07-19T13:18:08Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-07-30T16:02:59Z"}, "message": "d: Inline bounds checking for simple array assignments.\n\nThis optimizes the code generation of simple array assignments, inlining\nthe array bounds checking code so there is no reliance on the library\nroutine _d_arraycopy(), which also deals with postblit and copy\nconstructors for non-trivial arrays.\n\ngcc/d/ChangeLog:\n\n\t* expr.cc (ExprVisitor::visit (AssignExp *)): Inline bounds checking\n\tfor simple array assignments.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/array1.d: New test.", "tree": {"sha": "e8ccc50f5a38f3ab0d85756c5b235a0830b74d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8ccc50f5a38f3ab0d85756c5b235a0830b74d5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/febd7c43bce0a305aa24ed214ea6a5cba69753dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/febd7c43bce0a305aa24ed214ea6a5cba69753dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/febd7c43bce0a305aa24ed214ea6a5cba69753dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/febd7c43bce0a305aa24ed214ea6a5cba69753dd/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab0edbcb371cce5f82136f20ad45155c003d4982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0edbcb371cce5f82136f20ad45155c003d4982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab0edbcb371cce5f82136f20ad45155c003d4982"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "355561a481ed003f2351c46170784fb9c066d933", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/febd7c43bce0a305aa24ed214ea6a5cba69753dd/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/febd7c43bce0a305aa24ed214ea6a5cba69753dd/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=febd7c43bce0a305aa24ed214ea6a5cba69753dd", "patch": "@@ -962,14 +962,47 @@ class ExprVisitor : public Visitor\n \t    /* Perform a memcpy operation.  */\n \t    gcc_assert (e->e2->type->ty != Tpointer);\n \n-\t    if (!postblit && !destructor && !array_bounds_check ())\n+\t    if (!postblit && !destructor)\n \t      {\n \t\ttree t1 = d_save_expr (d_array_convert (e->e1));\n-\t\ttree t2 = d_array_convert (e->e2);\n-\t\ttree size = size_mult_expr (d_array_length (t1),\n-\t\t\t\t\t    size_int (etype->size ()));\n-\t\ttree result = build_memcpy_call (d_array_ptr (t1),\n-\t\t\t\t\t\t d_array_ptr (t2), size);\n+\t\ttree t2 = d_save_expr (d_array_convert (e->e2));\n+\n+\t\t/* References to array data.  */\n+\t\ttree t1ptr = d_array_ptr (t1);\n+\t\ttree t1len = d_array_length (t1);\n+\t\ttree t2ptr = d_array_ptr (t2);\n+\n+\t\t/* Generate: memcpy(to, from, size)  */\n+\t\ttree size = size_mult_expr (t1len, size_int (etype->size ()));\n+\t\ttree result = build_memcpy_call (t1ptr, t2ptr, size);\n+\n+\t\t/* Insert check that array lengths match and do not overlap.  */\n+\t\tif (array_bounds_check ())\n+\t\t  {\n+\t\t    /* tlencmp = (t1len == t2len)  */\n+\t\t    tree t2len = d_array_length (t2);\n+\t\t    tree tlencmp = build_boolop (EQ_EXPR, t1len, t2len);\n+\n+\t\t    /* toverlap = (t1ptr + size <= t2ptr\n+\t\t\t\t   || t2ptr + size <= t1ptr)  */\n+\t\t    tree t1ptrcmp = build_boolop (LE_EXPR,\n+\t\t\t\t\t\t  build_offset (t1ptr, size),\n+\t\t\t\t\t\t  t2ptr);\n+\t\t    tree t2ptrcmp = build_boolop (LE_EXPR,\n+\t\t\t\t\t\t  build_offset (t2ptr, size),\n+\t\t\t\t\t\t  t1ptr);\n+\t\t    tree toverlap = build_boolop (TRUTH_ORIF_EXPR, t1ptrcmp,\n+\t\t\t\t\t\t  t2ptrcmp);\n+\n+\t\t    /* (tlencmp && toverlap) ? memcpy() : _d_arraybounds()  */\n+\t\t    tree tassert = build_array_bounds_call (e->loc);\n+\t\t    tree tboundscheck = build_boolop (TRUTH_ANDIF_EXPR,\n+\t\t\t\t\t\t      tlencmp, toverlap);\n+\n+\t\t    result = build_condition (void_type_node, tboundscheck,\n+\t\t\t\t\t      result, tassert);\n+\t\t  }\n+\n \t\tthis->result_ = compound_expr (result, t1);\n \t      }\n \t    else if ((postblit || destructor) && e->op != TOKblit)"}, {"sha": "af81813e7365f08d3aa5c39e0f6a1262eb15fb2d", "filename": "gcc/testsuite/gdc.dg/array1.d", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/febd7c43bce0a305aa24ed214ea6a5cba69753dd/gcc%2Ftestsuite%2Fgdc.dg%2Farray1.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/febd7c43bce0a305aa24ed214ea6a5cba69753dd/gcc%2Ftestsuite%2Fgdc.dg%2Farray1.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Farray1.d?ref=febd7c43bce0a305aa24ed214ea6a5cba69753dd", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+// { dg-final { scan-assembler-not \"_d_arraycopy\" } }\n+\n+void test1()\n+{\n+    int[10] a1 = void;\n+    int[10] a2 = void;\n+    a1[] = a2[];\n+}\n+\n+void test2(int[] a1, int[] a2)\n+{\n+    a1[] = a2[];\n+}"}]}