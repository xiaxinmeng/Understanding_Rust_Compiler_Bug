{"sha": "98024b4e443c398b12321059039b888be9cb6ef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwMjRiNGU0NDNjMzk4YjEyMzIxMDU5MDM5Yjg4OGJlOWNiNmVmOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-25T16:58:24Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-25T16:58:24Z"}, "message": "config/avr: Use rtx_insn\n\ngcc/\n\t* config/avr/avr-protos.h (output_movqi): Strengthen first param\n\tfrom rtx to rtx_insn *.\n\t(output_movhi): Likewise.\n\t(output_movsisf): Likewise.\n\t(avr_out_tstsi): Likewise.\n\t(avr_out_tsthi): Likewise.\n\t(avr_out_tstpsi): Likewise.\n\t(avr_out_compare): Likewise.\n\t(avr_out_compare64): Likewise.\n\t(avr_out_movpsi): Likewise.\n\t(ashlqi3_out): Likewise.\n\t(ashlhi3_out): Likewise.\n\t(ashlsi3_out): Likewise.\n\t(ashrqi3_out): Likewise.\n\t(ashrhi3_out): Likewise.\n\t(ashrsi3_out): Likewise.\n\t(lshrqi3_out): Likewise.\n\t(lshrhi3_out): Likewise.\n\t(lshrsi3_out): Likewise.\n\t(avr_out_ashlpsi3): Likewise.\n\t(avr_out_ashrpsi3): Likewise.\n\t(avr_out_lshrpsi3): Likewise.\n\t(avr_out_fract): Likewise.\n\t(avr_out_sbxx_branch): Likewise.\n\t(avr_out_round): Likewise.\n\t(avr_out_xload): Likewise.\n\t(avr_out_movmem): Likewise.\n\t(adjust_insn_length): Likewise.\n\t(avr_out_lpm): Likewise.\n\t(reg_unused_after): Likewise.\n\t(_reg_unused_after): Likewise.\n\t(avr_jump_mode): Likewise for second param.\n\t(jump_over_one_insn): Likewise for first param.\n\t(avr_final_prescan_insn): Likewise.\n\t(out_shift_with_cnt): Likewise for second param.\n\n\t* config/avr/avr.c (get_sequence_length): Likewise for param\n\t\"insns\" and local \"insn\".\n\t(emit_push_byte): Likewise for local \"insn\".\n\t(emit_push_sfr): Likewise.\n\t(avr_prologue_setup_frame): Likewise for locals \"insn\",\n\t\"fp_plus_insns\", \"sp_plus_insns\".\n\t(avr_expand_epilogue): Likewise for local \"fp_plus_insns\",\n\t\"sp_plus_insns\".\n\t(avr_jump_mode): Likewise for param \"insn\".\n\t(avr_final_prescan_insn): Likewise.\n\t(avr_find_unused_d_reg): Likewise.\n\t(avr_out_lpm_no_lpmx): Likewise.\n\t(avr_out_lpm): Likewise.\n\t(avr_out_xload): Likewise.\n\t(output_movqi): Likewise.\n\t(output_movhi): Likewise.\n\t(out_movqi_r_mr): Likewise.\n\t(out_movhi_r_mr): Likewise.\n\t(out_movsi_r_mr): Likewise.\n\t(out_movsi_mr_r): Likewise.\n\t(output_movsisf): Likewise.\n\t(avr_out_load_psi): Likewise.\n\t(avr_out_store_psi): Likewise.\n\t(avr_out_movpsi): Likewise.\n\t(out_movqi_mr_r): Likewise.\n\t(avr_out_movhi_mr_r_xmega): Likewise.\n\t(out_movhi_mr_r): Likewise.\n\t(compare_condition): Likewise for param \"insn\" and local \"next\".\n\t(compare_sign_p): Likewise for param \"insn\".\n\t(compare_diff_p): Likewise.\n\t(compare_eq_p): Likewise.\n\t(avr_out_compare): Likewise.\n\t(avr_out_compare64): Likewise.\n\t(avr_out_tsthi): Likewise.\n\t(avr_out_tstpsi): Likewise.\n\t(avr_out_tstsi): Likewise.\n\t(out_shift_with_cnt): Likewise.\n\t(ashlqi3_out): Likewise.\n\t(ashlhi3_out): Likewise.\n\t(avr_out_ashlpsi3): Likewise.\n\t(ashlsi3_out): Likewise.\n\t(ashrqi3_out): Likewise.\n\t(ashrhi3_out): Likewise.\n\t(avr_out_ashrpsi3): Likewise.\n\t(ashrsi3_out): Likewise.\n\t(lshrqi3_out): Likewise.\n\t(lshrhi3_out): Likewise.\n\t(avr_out_lshrpsi3): Likewise.\n\t(lshrsi3_out): Likewise.\n\t(avr_out_fract): Likewise.\n\t(avr_out_round): Likewise.\n\t(avr_adjust_insn_length): Likewise.\n\t(reg_unused_after): Likewise.\n\t(_reg_unused_after): Likewise.\n\t(avr_compare_pattern): Likewise.\n\t(avr_reorg_remove_redundant_compare): Likewise for param \"insn1\"\n\tand locals \"branch1\", \"branch2\", \"insn2\", \"jump\".\n\t(avr_reorg): Likewise for local \"insn\".\n\t(avr_2word_insn_p): Likewise for param \"insn\".\n\t(jump_over_one_insn_p): Likewise.\n\t(avr_out_sbxx_branch): Likewise.\n\t(avr_out_movmem): Likewise.\n\nFrom-SVN: r214438", "tree": {"sha": "916ccb9f7d200a5af46db260dcf80279307cbd05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/916ccb9f7d200a5af46db260dcf80279307cbd05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98024b4e443c398b12321059039b888be9cb6ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98024b4e443c398b12321059039b888be9cb6ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98024b4e443c398b12321059039b888be9cb6ef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98024b4e443c398b12321059039b888be9cb6ef9/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81e3f921e473493e6003cebcb14a4625d503aa72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81e3f921e473493e6003cebcb14a4625d503aa72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81e3f921e473493e6003cebcb14a4625d503aa72"}], "stats": {"total": 323, "additions": 215, "deletions": 108}, "files": [{"sha": "9db3493ba3ca7f91376e3c7b7d61a3a14427be09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98024b4e443c398b12321059039b888be9cb6ef9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98024b4e443c398b12321059039b888be9cb6ef9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98024b4e443c398b12321059039b888be9cb6ef9", "patch": "@@ -1,3 +1,104 @@\n+2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/avr/avr-protos.h (output_movqi): Strengthen first param\n+\tfrom rtx to rtx_insn *.\n+\t(output_movhi): Likewise.\n+\t(output_movsisf): Likewise.\n+\t(avr_out_tstsi): Likewise.\n+\t(avr_out_tsthi): Likewise.\n+\t(avr_out_tstpsi): Likewise.\n+\t(avr_out_compare): Likewise.\n+\t(avr_out_compare64): Likewise.\n+\t(avr_out_movpsi): Likewise.\n+\t(ashlqi3_out): Likewise.\n+\t(ashlhi3_out): Likewise.\n+\t(ashlsi3_out): Likewise.\n+\t(ashrqi3_out): Likewise.\n+\t(ashrhi3_out): Likewise.\n+\t(ashrsi3_out): Likewise.\n+\t(lshrqi3_out): Likewise.\n+\t(lshrhi3_out): Likewise.\n+\t(lshrsi3_out): Likewise.\n+\t(avr_out_ashlpsi3): Likewise.\n+\t(avr_out_ashrpsi3): Likewise.\n+\t(avr_out_lshrpsi3): Likewise.\n+\t(avr_out_fract): Likewise.\n+\t(avr_out_sbxx_branch): Likewise.\n+\t(avr_out_round): Likewise.\n+\t(avr_out_xload): Likewise.\n+\t(avr_out_movmem): Likewise.\n+\t(adjust_insn_length): Likewise.\n+\t(avr_out_lpm): Likewise.\n+\t(reg_unused_after): Likewise.\n+\t(_reg_unused_after): Likewise.\n+\t(avr_jump_mode): Likewise for second param.\n+\t(jump_over_one_insn): Likewise for first param.\n+\t(avr_final_prescan_insn): Likewise.\n+\t(out_shift_with_cnt): Likewise for second param.\n+\n+\t* config/avr/avr.c (get_sequence_length): Likewise for param\n+\t\"insns\" and local \"insn\".\n+\t(emit_push_byte): Likewise for local \"insn\".\n+\t(emit_push_sfr): Likewise.\n+\t(avr_prologue_setup_frame): Likewise for locals \"insn\",\n+\t\"fp_plus_insns\", \"sp_plus_insns\".\n+\t(avr_expand_epilogue): Likewise for local \"fp_plus_insns\",\n+\t\"sp_plus_insns\".\n+\t(avr_jump_mode): Likewise for param \"insn\".\n+\t(avr_final_prescan_insn): Likewise.\n+\t(avr_find_unused_d_reg): Likewise.\n+\t(avr_out_lpm_no_lpmx): Likewise.\n+\t(avr_out_lpm): Likewise.\n+\t(avr_out_xload): Likewise.\n+\t(output_movqi): Likewise.\n+\t(output_movhi): Likewise.\n+\t(out_movqi_r_mr): Likewise.\n+\t(out_movhi_r_mr): Likewise.\n+\t(out_movsi_r_mr): Likewise.\n+\t(out_movsi_mr_r): Likewise.\n+\t(output_movsisf): Likewise.\n+\t(avr_out_load_psi): Likewise.\n+\t(avr_out_store_psi): Likewise.\n+\t(avr_out_movpsi): Likewise.\n+\t(out_movqi_mr_r): Likewise.\n+\t(avr_out_movhi_mr_r_xmega): Likewise.\n+\t(out_movhi_mr_r): Likewise.\n+\t(compare_condition): Likewise for param \"insn\" and local \"next\".\n+\t(compare_sign_p): Likewise for param \"insn\".\n+\t(compare_diff_p): Likewise.\n+\t(compare_eq_p): Likewise.\n+\t(avr_out_compare): Likewise.\n+\t(avr_out_compare64): Likewise.\n+\t(avr_out_tsthi): Likewise.\n+\t(avr_out_tstpsi): Likewise.\n+\t(avr_out_tstsi): Likewise.\n+\t(out_shift_with_cnt): Likewise.\n+\t(ashlqi3_out): Likewise.\n+\t(ashlhi3_out): Likewise.\n+\t(avr_out_ashlpsi3): Likewise.\n+\t(ashlsi3_out): Likewise.\n+\t(ashrqi3_out): Likewise.\n+\t(ashrhi3_out): Likewise.\n+\t(avr_out_ashrpsi3): Likewise.\n+\t(ashrsi3_out): Likewise.\n+\t(lshrqi3_out): Likewise.\n+\t(lshrhi3_out): Likewise.\n+\t(avr_out_lshrpsi3): Likewise.\n+\t(lshrsi3_out): Likewise.\n+\t(avr_out_fract): Likewise.\n+\t(avr_out_round): Likewise.\n+\t(avr_adjust_insn_length): Likewise.\n+\t(reg_unused_after): Likewise.\n+\t(_reg_unused_after): Likewise.\n+\t(avr_compare_pattern): Likewise.\n+\t(avr_reorg_remove_redundant_compare): Likewise for param \"insn1\"\n+\tand locals \"branch1\", \"branch2\", \"insn2\", \"jump\".\n+\t(avr_reorg): Likewise for local \"insn\".\n+\t(avr_2word_insn_p): Likewise for param \"insn\".\n+\t(jump_over_one_insn_p): Likewise.\n+\t(avr_out_sbxx_branch): Likewise.\n+\t(avr_out_movmem): Likewise.\n+\n 2014-08-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/arm/arm-protos.h (arm_final_prescan_insn): Strengthen"}, {"sha": "9fa93246b9541bf73d39037e496cee78e4599f12", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98024b4e443c398b12321059039b888be9cb6ef9/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98024b4e443c398b12321059039b888be9cb6ef9/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=98024b4e443c398b12321059039b888be9cb6ef9", "patch": "@@ -45,36 +45,36 @@ extern void avr_init_cumulative_args (CUMULATIVE_ARGS*, tree, rtx, tree);\n \n #ifdef RTX_CODE\n extern int avr_hard_regno_call_part_clobbered (unsigned, enum machine_mode);\n-extern const char *output_movqi (rtx insn, rtx operands[], int *l);\n-extern const char *output_movhi (rtx insn, rtx operands[], int *l);\n-extern const char *output_movsisf (rtx insn, rtx operands[], int *l);\n-extern const char *avr_out_tstsi (rtx, rtx*, int*);\n-extern const char *avr_out_tsthi (rtx, rtx*, int*);\n-extern const char *avr_out_tstpsi (rtx, rtx*, int*);\n-extern const char *avr_out_compare (rtx, rtx*, int*);\n-extern const char *avr_out_compare64 (rtx, rtx*, int*);\n+extern const char *output_movqi (rtx_insn *insn, rtx operands[], int *l);\n+extern const char *output_movhi (rtx_insn *insn, rtx operands[], int *l);\n+extern const char *output_movsisf (rtx_insn *insn, rtx operands[], int *l);\n+extern const char *avr_out_tstsi (rtx_insn *, rtx*, int*);\n+extern const char *avr_out_tsthi (rtx_insn *, rtx*, int*);\n+extern const char *avr_out_tstpsi (rtx_insn *, rtx*, int*);\n+extern const char *avr_out_compare (rtx_insn *, rtx*, int*);\n+extern const char *avr_out_compare64 (rtx_insn *, rtx*, int*);\n extern const char *ret_cond_branch (rtx x, int len, int reverse);\n-extern const char *avr_out_movpsi (rtx, rtx*, int*);\n+extern const char *avr_out_movpsi (rtx_insn *, rtx*, int*);\n \n-extern const char *ashlqi3_out (rtx insn, rtx operands[], int *len);\n-extern const char *ashlhi3_out (rtx insn, rtx operands[], int *len);\n-extern const char *ashlsi3_out (rtx insn, rtx operands[], int *len);\n+extern const char *ashlqi3_out (rtx_insn *insn, rtx operands[], int *len);\n+extern const char *ashlhi3_out (rtx_insn *insn, rtx operands[], int *len);\n+extern const char *ashlsi3_out (rtx_insn *insn, rtx operands[], int *len);\n \n-extern const char *ashrqi3_out (rtx insn, rtx operands[], int *len);\n-extern const char *ashrhi3_out (rtx insn, rtx operands[], int *len);\n-extern const char *ashrsi3_out (rtx insn, rtx operands[], int *len);\n+extern const char *ashrqi3_out (rtx_insn *insn, rtx operands[], int *len);\n+extern const char *ashrhi3_out (rtx_insn *insn, rtx operands[], int *len);\n+extern const char *ashrsi3_out (rtx_insn *insn, rtx operands[], int *len);\n \n-extern const char *lshrqi3_out (rtx insn, rtx operands[], int *len);\n-extern const char *lshrhi3_out (rtx insn, rtx operands[], int *len);\n-extern const char *lshrsi3_out (rtx insn, rtx operands[], int *len);\n+extern const char *lshrqi3_out (rtx_insn *insn, rtx operands[], int *len);\n+extern const char *lshrhi3_out (rtx_insn *insn, rtx operands[], int *len);\n+extern const char *lshrsi3_out (rtx_insn *insn, rtx operands[], int *len);\n \n-extern const char *avr_out_ashlpsi3 (rtx, rtx*, int*);\n-extern const char *avr_out_ashrpsi3 (rtx, rtx*, int*);\n-extern const char *avr_out_lshrpsi3 (rtx, rtx*, int*);\n+extern const char *avr_out_ashlpsi3 (rtx_insn *, rtx*, int*);\n+extern const char *avr_out_ashrpsi3 (rtx_insn *, rtx*, int*);\n+extern const char *avr_out_lshrpsi3 (rtx_insn *, rtx*, int*);\n \n extern bool avr_rotate_bytes (rtx operands[]);\n \n-extern const char* avr_out_fract (rtx, rtx[], bool, int*);\n+extern const char* avr_out_fract (rtx_insn *, rtx[], bool, int*);\n extern rtx avr_to_int_mode (rtx);\n \n extern void avr_expand_prologue (void);\n@@ -84,36 +84,37 @@ extern int avr_epilogue_uses (int regno);\n extern int avr_starting_frame_offset (void);\n \n extern void avr_output_addr_vec_elt (FILE *stream, int value);\n-extern const char *avr_out_sbxx_branch (rtx insn, rtx operands[]);\n+extern const char *avr_out_sbxx_branch (rtx_insn *insn, rtx operands[]);\n extern const char* avr_out_bitop (rtx, rtx*, int*);\n extern const char* avr_out_plus (rtx, rtx*, int* =NULL, int* =NULL, bool =true);\n-extern const char* avr_out_round (rtx, rtx*, int* =NULL);\n+extern const char* avr_out_round (rtx_insn *, rtx*, int* =NULL);\n extern const char* avr_out_addto_sp (rtx*, int*);\n-extern const char* avr_out_xload (rtx, rtx*, int*);\n-extern const char* avr_out_movmem (rtx, rtx*, int*);\n+extern const char* avr_out_xload (rtx_insn *, rtx*, int*);\n+extern const char* avr_out_movmem (rtx_insn *, rtx*, int*);\n extern const char* avr_out_insert_bits (rtx*, int*);\n extern bool avr_popcount_each_byte (rtx, int, int);\n extern bool avr_has_nibble_0xf (rtx);\n \n extern int extra_constraint_Q (rtx x);\n-extern int avr_adjust_insn_length (rtx insn, int len);\n+extern int avr_adjust_insn_length (rtx_insn *insn, int len);\n extern const char* output_reload_inhi (rtx*, rtx, int*);\n extern const char* output_reload_insisf (rtx*, rtx, int*);\n extern const char* avr_out_reload_inpsi (rtx*, rtx, int*);\n-extern const char* avr_out_lpm (rtx, rtx*, int*);\n+extern const char* avr_out_lpm (rtx_insn *, rtx*, int*);\n extern void avr_notice_update_cc (rtx body, rtx insn);\n-extern int reg_unused_after (rtx insn, rtx reg);\n-extern int _reg_unused_after (rtx insn, rtx reg);\n-extern int avr_jump_mode (rtx x, rtx insn);\n+extern int reg_unused_after (rtx_insn *insn, rtx reg);\n+extern int _reg_unused_after (rtx_insn *insn, rtx reg);\n+extern int avr_jump_mode (rtx x, rtx_insn *insn);\n extern int test_hard_reg_class (enum reg_class rclass, rtx x);\n-extern int jump_over_one_insn_p (rtx insn, rtx dest);\n+extern int jump_over_one_insn_p (rtx_insn *insn, rtx dest);\n \n extern int avr_hard_regno_mode_ok (int regno, enum machine_mode mode);\n-extern void avr_final_prescan_insn (rtx insn, rtx *operand, int num_operands);\n+extern void avr_final_prescan_insn (rtx_insn *insn, rtx *operand,\n+\t\t\t\t    int num_operands);\n extern int avr_simplify_comparison_p (enum machine_mode mode,\n \t\t\t\t      RTX_CODE op, rtx x);\n extern RTX_CODE avr_normalize_condition (RTX_CODE condition);\n-extern void out_shift_with_cnt (const char *templ, rtx insn,\n+extern void out_shift_with_cnt (const char *templ, rtx_insn *insn,\n \t\t\t\trtx operands[], int *len, int t_len);\n extern enum reg_class avr_mode_code_base_reg_class (enum machine_mode, addr_space_t, RTX_CODE, RTX_CODE);\n extern bool avr_regno_mode_code_ok_for_base_p (int, enum machine_mode, addr_space_t, RTX_CODE, RTX_CODE);"}, {"sha": "1bb6718102e649fa8e008c646d8eb06f933ce090", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 79, "deletions": 74, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98024b4e443c398b12321059039b888be9cb6ef9/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98024b4e443c398b12321059039b888be9cb6ef9/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=98024b4e443c398b12321059039b888be9cb6ef9", "patch": "@@ -124,14 +124,14 @@ static avr_addr_t avr_addr;\n \n /* Prototypes for local helper functions.  */\n \n-static const char* out_movqi_r_mr (rtx, rtx[], int*);\n-static const char* out_movhi_r_mr (rtx, rtx[], int*);\n-static const char* out_movsi_r_mr (rtx, rtx[], int*);\n-static const char* out_movqi_mr_r (rtx, rtx[], int*);\n-static const char* out_movhi_mr_r (rtx, rtx[], int*);\n-static const char* out_movsi_mr_r (rtx, rtx[], int*);\n-\n-static int get_sequence_length (rtx insns);\n+static const char* out_movqi_r_mr (rtx_insn *, rtx[], int*);\n+static const char* out_movhi_r_mr (rtx_insn *, rtx[], int*);\n+static const char* out_movsi_r_mr (rtx_insn *, rtx[], int*);\n+static const char* out_movqi_mr_r (rtx_insn *, rtx[], int*);\n+static const char* out_movhi_mr_r (rtx_insn *, rtx[], int*);\n+static const char* out_movsi_mr_r (rtx_insn *, rtx[], int*);\n+\n+static int get_sequence_length (rtx_insn *insns);\n static int sequent_regs_live (void);\n static const char *ptrreg_to_str (int);\n static const char *cond_string (enum rtx_code);\n@@ -951,9 +951,9 @@ sequent_regs_live (void)\n /* Obtain the length sequence of insns.  */\n \n int\n-get_sequence_length (rtx insns)\n+get_sequence_length (rtx_insn *insns)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   int length;\n \n   for (insn = insns, length = 0; insn; insn = NEXT_INSN (insn))\n@@ -978,7 +978,8 @@ avr_incoming_return_addr_rtx (void)\n static void\n emit_push_byte (unsigned regno, bool frame_related_p)\n {\n-  rtx mem, reg, insn;\n+  rtx mem, reg;\n+  rtx_insn *insn;\n \n   mem = gen_rtx_POST_DEC (HImode, stack_pointer_rtx);\n   mem = gen_frame_mem (QImode, mem);\n@@ -999,7 +1000,7 @@ emit_push_byte (unsigned regno, bool frame_related_p)\n static void\n emit_push_sfr (rtx sfr, bool frame_related_p, bool clr_p)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   gcc_assert (MEM_P (sfr));\n \n@@ -1023,7 +1024,7 @@ emit_push_sfr (rtx sfr, bool frame_related_p, bool clr_p)\n static void\n avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   bool isr_p = cfun->machine->is_interrupt || cfun->machine->is_signal;\n   int live_seq = sequent_regs_live ();\n \n@@ -1139,7 +1140,8 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n \n           int irq_state = -1;\n           HOST_WIDE_INT size_cfa = size, neg_size;\n-          rtx fp_plus_insns, fp, my_fp;\n+          rtx_insn *fp_plus_insns;\n+          rtx fp, my_fp;\n \n           gcc_assert (frame_pointer_needed\n                       || !isr_p\n@@ -1248,7 +1250,7 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n \n           if (avr_sp_immediate_operand (gen_int_mode (-size, HImode), HImode))\n             {\n-              rtx sp_plus_insns;\n+              rtx_insn *sp_plus_insns;\n \n               start_sequence ();\n \n@@ -1490,7 +1492,7 @@ avr_expand_epilogue (bool sibcall_p)\n \n       int irq_state = -1;\n       rtx fp, my_fp;\n-      rtx fp_plus_insns;\n+      rtx_insn *fp_plus_insns;\n       HOST_WIDE_INT size_max;\n \n       gcc_assert (frame_pointer_needed\n@@ -1543,7 +1545,7 @@ avr_expand_epilogue (bool sibcall_p)\n \n       if (avr_sp_immediate_operand (gen_int_mode (size, HImode), HImode))\n         {\n-          rtx sp_plus_insns;\n+          rtx_insn *sp_plus_insns;\n \n           start_sequence ();\n \n@@ -2399,7 +2401,7 @@ avr_notice_update_cc (rtx body ATTRIBUTE_UNUSED, rtx insn)\n    3 - absolute jump (only for ATmega[16]03).  */\n \n int\n-avr_jump_mode (rtx x, rtx insn)\n+avr_jump_mode (rtx x, rtx_insn *insn)\n {\n   int dest_addr = INSN_ADDRESSES (INSN_UID (GET_CODE (x) == LABEL_REF\n                                             ? XEXP (x, 0) : x));\n@@ -2523,7 +2525,7 @@ ret_cond_branch (rtx x, int len, int reverse)\n /* Output insn cost for next insn.  */\n \n void\n-avr_final_prescan_insn (rtx insn, rtx *operand ATTRIBUTE_UNUSED,\n+avr_final_prescan_insn (rtx_insn *insn, rtx *operand ATTRIBUTE_UNUSED,\n                         int num_operands ATTRIBUTE_UNUSED)\n {\n   if (avr_log.rtx_costs)\n@@ -2781,7 +2783,7 @@ avr_xload_libgcc_p (enum machine_mode mode)\n    Return a QImode d-register or NULL_RTX if nothing found.  */\n \n static rtx\n-avr_find_unused_d_reg (rtx insn, rtx exclude)\n+avr_find_unused_d_reg (rtx_insn *insn, rtx exclude)\n {\n   int regno;\n   bool isr_p = (avr_interrupt_function_p (current_function_decl)\n@@ -2827,7 +2829,7 @@ avr_find_unused_d_reg (rtx insn, rtx exclude)\n    version of LPM instruction is available.  */\n \n static const char*\n-avr_out_lpm_no_lpmx (rtx insn, rtx *xop, int *plen)\n+avr_out_lpm_no_lpmx (rtx_insn *insn, rtx *xop, int *plen)\n {\n   rtx dest = xop[0];\n   rtx addr = xop[1];\n@@ -2926,7 +2928,7 @@ avr_out_lpm_no_lpmx (rtx insn, rtx *xop, int *plen)\n    Return \"\".  */\n \n const char*\n-avr_out_lpm (rtx insn, rtx *op, int *plen)\n+avr_out_lpm (rtx_insn *insn, rtx *op, int *plen)\n {\n   rtx xop[7];\n   rtx dest = op[0];\n@@ -3097,7 +3099,7 @@ avr_out_lpm (rtx insn, rtx *op, int *plen)\n /* Worker function for xload_8 insn.  */\n \n const char*\n-avr_out_xload (rtx insn ATTRIBUTE_UNUSED, rtx *op, int *plen)\n+avr_out_xload (rtx_insn *insn ATTRIBUTE_UNUSED, rtx *op, int *plen)\n {\n   rtx xop[4];\n \n@@ -3119,7 +3121,7 @@ avr_out_xload (rtx insn ATTRIBUTE_UNUSED, rtx *op, int *plen)\n \n \n const char*\n-output_movqi (rtx insn, rtx operands[], int *plen)\n+output_movqi (rtx_insn *insn, rtx operands[], int *plen)\n {\n   rtx dest = operands[0];\n   rtx src = operands[1];\n@@ -3166,7 +3168,7 @@ output_movqi (rtx insn, rtx operands[], int *plen)\n \n \n const char *\n-output_movhi (rtx insn, rtx xop[], int *plen)\n+output_movhi (rtx_insn *insn, rtx xop[], int *plen)\n {\n   rtx dest = xop[0];\n   rtx src = xop[1];\n@@ -3246,7 +3248,7 @@ output_movhi (rtx insn, rtx xop[], int *plen)\n }\n \n static const char*\n-out_movqi_r_mr (rtx insn, rtx op[], int *plen)\n+out_movqi_r_mr (rtx_insn *insn, rtx op[], int *plen)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n@@ -3306,7 +3308,7 @@ out_movqi_r_mr (rtx insn, rtx op[], int *plen)\n }\n \n static const char*\n-out_movhi_r_mr (rtx insn, rtx op[], int *plen)\n+out_movhi_r_mr (rtx_insn *insn, rtx op[], int *plen)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n@@ -3426,7 +3428,7 @@ out_movhi_r_mr (rtx insn, rtx op[], int *plen)\n }\n \n static const char*\n-out_movsi_r_mr (rtx insn, rtx op[], int *l)\n+out_movsi_r_mr (rtx_insn *insn, rtx op[], int *l)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n@@ -3587,7 +3589,7 @@ out_movsi_r_mr (rtx insn, rtx op[], int *l)\n }\n \n static const char*\n-out_movsi_mr_r (rtx insn, rtx op[], int *l)\n+out_movsi_mr_r (rtx_insn *insn, rtx op[], int *l)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n@@ -3742,7 +3744,7 @@ out_movsi_mr_r (rtx insn, rtx op[], int *l)\n }\n \n const char *\n-output_movsisf (rtx insn, rtx operands[], int *l)\n+output_movsisf (rtx_insn *insn, rtx operands[], int *l)\n {\n   int dummy;\n   rtx dest = operands[0];\n@@ -3822,7 +3824,7 @@ output_movsisf (rtx insn, rtx operands[], int *l)\n /* Handle loads of 24-bit types from memory to register.  */\n \n static const char*\n-avr_out_load_psi (rtx insn, rtx *op, int *plen)\n+avr_out_load_psi (rtx_insn *insn, rtx *op, int *plen)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n@@ -3953,7 +3955,7 @@ avr_out_load_psi (rtx insn, rtx *op, int *plen)\n /* Handle store of 24-bit type from register or zero to memory.  */\n \n static const char*\n-avr_out_store_psi (rtx insn, rtx *op, int *plen)\n+avr_out_store_psi (rtx_insn *insn, rtx *op, int *plen)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n@@ -4047,7 +4049,7 @@ avr_out_store_psi (rtx insn, rtx *op, int *plen)\n /* Move around 24-bit stuff.  */\n \n const char *\n-avr_out_movpsi (rtx insn, rtx *op, int *plen)\n+avr_out_movpsi (rtx_insn *insn, rtx *op, int *plen)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n@@ -4106,7 +4108,7 @@ avr_out_movpsi (rtx insn, rtx *op, int *plen)\n \n \n static const char*\n-out_movqi_mr_r (rtx insn, rtx op[], int *plen)\n+out_movqi_mr_r (rtx_insn *insn, rtx op[], int *plen)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n@@ -4173,7 +4175,7 @@ out_movqi_mr_r (rtx insn, rtx op[], int *plen)\n    but with low byte first.  */\n \n static const char*\n-avr_out_movhi_mr_r_xmega (rtx insn, rtx op[], int *plen)\n+avr_out_movhi_mr_r_xmega (rtx_insn *insn, rtx op[], int *plen)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n@@ -4282,7 +4284,7 @@ avr_out_movhi_mr_r_xmega (rtx insn, rtx op[], int *plen)\n \n \n static const char*\n-out_movhi_mr_r (rtx insn, rtx op[], int *plen)\n+out_movhi_mr_r (rtx_insn *insn, rtx op[], int *plen)\n {\n   rtx dest = op[0];\n   rtx src = op[1];\n@@ -4416,9 +4418,9 @@ avr_frame_pointer_required_p (void)\n /* Returns the condition of compare insn INSN, or UNKNOWN.  */\n \n static RTX_CODE\n-compare_condition (rtx insn)\n+compare_condition (rtx_insn *insn)\n {\n-  rtx next = next_real_insn (insn);\n+  rtx_insn *next = next_real_insn (insn);\n \n   if (next && JUMP_P (next))\n     {\n@@ -4436,7 +4438,7 @@ compare_condition (rtx insn)\n /* Returns true iff INSN is a tst insn that only tests the sign.  */\n \n static bool\n-compare_sign_p (rtx insn)\n+compare_sign_p (rtx_insn *insn)\n {\n   RTX_CODE cond = compare_condition (insn);\n   return (cond == GE || cond == LT);\n@@ -4447,7 +4449,7 @@ compare_sign_p (rtx insn)\n    that needs to be swapped (GT, GTU, LE, LEU).  */\n \n static bool\n-compare_diff_p (rtx insn)\n+compare_diff_p (rtx_insn *insn)\n {\n   RTX_CODE cond = compare_condition (insn);\n   return (cond == GT || cond == GTU || cond == LE || cond == LEU) ? cond : 0;\n@@ -4456,7 +4458,7 @@ compare_diff_p (rtx insn)\n /* Returns true iff INSN is a compare insn with the EQ or NE condition.  */\n \n static bool\n-compare_eq_p (rtx insn)\n+compare_eq_p (rtx_insn *insn)\n {\n   RTX_CODE cond = compare_condition (insn);\n   return (cond == EQ || cond == NE);\n@@ -4475,7 +4477,7 @@ compare_eq_p (rtx insn)\n                   Don't output anything.  */\n \n const char*\n-avr_out_compare (rtx insn, rtx *xop, int *plen)\n+avr_out_compare (rtx_insn *insn, rtx *xop, int *plen)\n {\n   /* Register to compare and value to compare against. */\n   rtx xreg = xop[0];\n@@ -4632,7 +4634,7 @@ avr_out_compare (rtx insn, rtx *xop, int *plen)\n /* Prepare operands of compare_const_di2 to be used with avr_out_compare.  */\n \n const char*\n-avr_out_compare64 (rtx insn, rtx *op, int *plen)\n+avr_out_compare64 (rtx_insn *insn, rtx *op, int *plen)\n {\n   rtx xop[3];\n \n@@ -4646,7 +4648,7 @@ avr_out_compare64 (rtx insn, rtx *op, int *plen)\n /* Output test instruction for HImode.  */\n \n const char*\n-avr_out_tsthi (rtx insn, rtx *op, int *plen)\n+avr_out_tsthi (rtx_insn *insn, rtx *op, int *plen)\n {\n   if (compare_sign_p (insn))\n     {\n@@ -4670,7 +4672,7 @@ avr_out_tsthi (rtx insn, rtx *op, int *plen)\n /* Output test instruction for PSImode.  */\n \n const char*\n-avr_out_tstpsi (rtx insn, rtx *op, int *plen)\n+avr_out_tstpsi (rtx_insn *insn, rtx *op, int *plen)\n {\n   if (compare_sign_p (insn))\n     {\n@@ -4695,7 +4697,7 @@ avr_out_tstpsi (rtx insn, rtx *op, int *plen)\n /* Output test instruction for SImode.  */\n \n const char*\n-avr_out_tstsi (rtx insn, rtx *op, int *plen)\n+avr_out_tstsi (rtx_insn *insn, rtx *op, int *plen)\n {\n   if (compare_sign_p (insn))\n     {\n@@ -4730,7 +4732,7 @@ avr_out_tstsi (rtx insn, rtx *op, int *plen)\n    T_LEN is the length of this template.  */\n \n void\n-out_shift_with_cnt (const char *templ, rtx insn, rtx operands[],\n+out_shift_with_cnt (const char *templ, rtx_insn *insn, rtx operands[],\n \t\t    int *plen, int t_len)\n {\n   bool second_label = true;\n@@ -4844,7 +4846,7 @@ out_shift_with_cnt (const char *templ, rtx insn, rtx operands[],\n /* 8bit shift left ((char)x << i)   */\n \n const char *\n-ashlqi3_out (rtx insn, rtx operands[], int *len)\n+ashlqi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n@@ -4941,7 +4943,7 @@ ashlqi3_out (rtx insn, rtx operands[], int *len)\n /* 16bit shift left ((short)x << i)   */\n \n const char *\n-ashlhi3_out (rtx insn, rtx operands[], int *len)\n+ashlhi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n@@ -5198,7 +5200,7 @@ ashlhi3_out (rtx insn, rtx operands[], int *len)\n /* 24-bit shift left */\n \n const char*\n-avr_out_ashlpsi3 (rtx insn, rtx *op, int *plen)\n+avr_out_ashlpsi3 (rtx_insn *insn, rtx *op, int *plen)\n {\n   if (plen)\n     *plen = 0;\n@@ -5261,7 +5263,7 @@ avr_out_ashlpsi3 (rtx insn, rtx *op, int *plen)\n /* 32bit shift left ((long)x << i)   */\n \n const char *\n-ashlsi3_out (rtx insn, rtx operands[], int *len)\n+ashlsi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n@@ -5350,7 +5352,7 @@ ashlsi3_out (rtx insn, rtx operands[], int *len)\n /* 8bit arithmetic shift right  ((signed char)x >> i) */\n \n const char *\n-ashrqi3_out (rtx insn, rtx operands[], int *len)\n+ashrqi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n@@ -5422,7 +5424,7 @@ ashrqi3_out (rtx insn, rtx operands[], int *len)\n /* 16bit arithmetic shift right  ((signed short)x >> i) */\n \n const char *\n-ashrhi3_out (rtx insn, rtx operands[], int *len)\n+ashrhi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n@@ -5585,7 +5587,7 @@ ashrhi3_out (rtx insn, rtx operands[], int *len)\n /* 24-bit arithmetic shift right */\n \n const char*\n-avr_out_ashrpsi3 (rtx insn, rtx *op, int *plen)\n+avr_out_ashrpsi3 (rtx_insn *insn, rtx *op, int *plen)\n {\n   int dest = REGNO (op[0]);\n   int src = REGNO (op[1]);\n@@ -5644,7 +5646,7 @@ avr_out_ashrpsi3 (rtx insn, rtx *op, int *plen)\n /* 32-bit arithmetic shift right  ((signed long)x >> i) */\n \n const char *\n-ashrsi3_out (rtx insn, rtx operands[], int *len)\n+ashrsi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n@@ -5741,7 +5743,7 @@ ashrsi3_out (rtx insn, rtx operands[], int *len)\n /* 8-bit logic shift right ((unsigned char)x >> i) */\n \n const char *\n-lshrqi3_out (rtx insn, rtx operands[], int *len)\n+lshrqi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n@@ -5836,7 +5838,7 @@ lshrqi3_out (rtx insn, rtx operands[], int *len)\n /* 16-bit logic shift right ((unsigned short)x >> i) */\n \n const char *\n-lshrhi3_out (rtx insn, rtx operands[], int *len)\n+lshrhi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n@@ -6093,7 +6095,7 @@ lshrhi3_out (rtx insn, rtx operands[], int *len)\n /* 24-bit logic shift right */\n \n const char*\n-avr_out_lshrpsi3 (rtx insn, rtx *op, int *plen)\n+avr_out_lshrpsi3 (rtx_insn *insn, rtx *op, int *plen)\n {\n   int dest = REGNO (op[0]);\n   int src = REGNO (op[1]);\n@@ -6147,7 +6149,7 @@ avr_out_lshrpsi3 (rtx insn, rtx *op, int *plen)\n /* 32-bit logic shift right ((unsigned int)x >> i) */\n \n const char *\n-lshrsi3_out (rtx insn, rtx operands[], int *len)\n+lshrsi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n@@ -7051,7 +7053,7 @@ avr_out_addto_sp (rtx *op, int *plen)\n    is stored in either the carry or T bit.  */\n \n const char*\n-avr_out_fract (rtx insn, rtx operands[], bool intsigned, int *plen)\n+avr_out_fract (rtx_insn *insn, rtx operands[], bool intsigned, int *plen)\n {\n   size_t i;\n   rtx xop[6];\n@@ -7567,7 +7569,7 @@ avr_out_fract (rtx insn, rtx operands[], bool intsigned, int *plen)\n    preparing operands for calls to `avr_out_plus' and `avr_out_bitop'.  */\n \n const char*\n-avr_out_round (rtx insn ATTRIBUTE_UNUSED, rtx *xop, int *plen)\n+avr_out_round (rtx_insn *insn ATTRIBUTE_UNUSED, rtx *xop, int *plen)\n {\n   enum machine_mode mode = GET_MODE (xop[0]);\n   enum machine_mode imode = int_mode_for_mode (mode);\n@@ -7777,7 +7779,7 @@ avr_rotate_bytes (rtx operands[])\n    LEN is the initially computed length of the insn.  */\n \n int\n-avr_adjust_insn_length (rtx insn, int len)\n+avr_adjust_insn_length (rtx_insn *insn, int len)\n {\n   rtx *op = recog_data.operand;\n   enum attr_adjust_len adjust_len;\n@@ -7869,7 +7871,7 @@ avr_adjust_insn_length (rtx insn, int len)\n /* Return nonzero if register REG dead after INSN.  */\n \n int\n-reg_unused_after (rtx insn, rtx reg)\n+reg_unused_after (rtx_insn *insn, rtx reg)\n {\n   return (dead_or_set_p (insn, reg)\n \t  || (REG_P(reg) && _reg_unused_after (insn, reg)));\n@@ -7880,7 +7882,7 @@ reg_unused_after (rtx insn, rtx reg)\n    not live past labels.  It may live past calls or jumps though.  */\n \n int\n-_reg_unused_after (rtx insn, rtx reg)\n+_reg_unused_after (rtx_insn *insn, rtx reg)\n {\n   enum rtx_code code;\n   rtx set;\n@@ -9789,7 +9791,7 @@ avr_normalize_condition (RTX_CODE condition)\n /* Helper function for `avr_reorg'.  */\n \n static rtx\n-avr_compare_pattern (rtx insn)\n+avr_compare_pattern (rtx_insn *insn)\n {\n   rtx pattern = single_set (insn);\n \n@@ -9845,12 +9847,15 @@ avr_compare_pattern (rtx insn)\n    basic blocks.  */\n \n static bool\n-avr_reorg_remove_redundant_compare (rtx insn1)\n+avr_reorg_remove_redundant_compare (rtx_insn *insn1)\n {\n-  rtx comp1, ifelse1, xcond1, branch1;\n-  rtx comp2, ifelse2, xcond2, branch2, insn2;\n+  rtx comp1, ifelse1, xcond1;\n+  rtx_insn *branch1;\n+  rtx comp2, ifelse2, xcond2;\n+  rtx_insn *branch2, *insn2;\n   enum rtx_code code;\n-  rtx jump, target, cond;\n+  rtx_insn *jump;\n+  rtx target, cond;\n \n   /* Look out for:  compare1 - branch1 - compare2 - branch2  */\n \n@@ -9988,7 +9993,7 @@ avr_reorg_remove_redundant_compare (rtx insn1)\n static void\n avr_reorg (void)\n {\n-  rtx insn = get_insns();\n+  rtx_insn *insn = get_insns();\n \n   for (insn = next_real_insn (insn); insn; insn = next_real_insn (insn))\n     {\n@@ -10134,7 +10139,7 @@ test_hard_reg_class (enum reg_class rclass, rtx x)\n    and thus is suitable to be skipped by CPSE, SBRC, etc.  */\n \n static bool\n-avr_2word_insn_p (rtx insn)\n+avr_2word_insn_p (rtx_insn *insn)\n {\n   if ((avr_current_device->dev_attribute & AVR_ERRATA_SKIP)\n       || !insn\n@@ -10180,7 +10185,7 @@ avr_2word_insn_p (rtx insn)\n \n \n int\n-jump_over_one_insn_p (rtx insn, rtx dest)\n+jump_over_one_insn_p (rtx_insn *insn, rtx dest)\n {\n   int uid = INSN_UID (GET_CODE (dest) == LABEL_REF\n \t\t      ? XEXP (dest, 0)\n@@ -10734,7 +10739,7 @@ avr_hard_regno_rename_ok (unsigned int old_reg,\n    Operand 3: label to jump to if the test is true.  */\n \n const char*\n-avr_out_sbxx_branch (rtx insn, rtx operands[])\n+avr_out_sbxx_branch (rtx_insn *insn, rtx operands[])\n {\n   enum rtx_code comp = GET_CODE (operands[0]);\n   bool long_jump = get_attr_length (insn) >= 4;\n@@ -11242,7 +11247,7 @@ avr_emit_movmemhi (rtx *xop)\n */\n \n const char*\n-avr_out_movmem (rtx insn ATTRIBUTE_UNUSED, rtx *op, int *plen)\n+avr_out_movmem (rtx_insn *insn ATTRIBUTE_UNUSED, rtx *op, int *plen)\n {\n   addr_space_t as = (addr_space_t) INTVAL (op[0]);\n   enum machine_mode loop_mode = GET_MODE (op[1]);"}]}