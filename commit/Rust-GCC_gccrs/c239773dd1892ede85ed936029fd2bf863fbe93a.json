{"sha": "c239773dd1892ede85ed936029fd2bf863fbe93a", "node_id": "C_kwDOANBUbNoAKGMyMzk3NzNkZDE4OTJlZGU4NWVkOTM2MDI5ZmQyYmY4NjNmYmU5M2E", "commit": {"author": {"name": "Claire Dross", "email": "dross@adacore.com", "date": "2021-12-01T13:03:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-05T11:32:35Z"}, "message": "[Ada] Introduce expression functions for contract of Scan_Exponent\n\ngcc/ada/\n\n\t* libgnat/s-valuti.ads (Starts_As_Exponent_Format_Ghost): Ghost\n\tfunction to determine if a string is recognized as something\n\twhich might be an exponent.\n\t(Is_Opt_Exponent_Format_Ghost): Ghost function to determine if a\n\tstring has the correct format for an optional exponent.\n\t(Scan_Exponent): Use ghost functions to factorize contracts.", "tree": {"sha": "4df47d07bad83df76b346b790bf0b65c00baaf08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4df47d07bad83df76b346b790bf0b65c00baaf08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c239773dd1892ede85ed936029fd2bf863fbe93a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c239773dd1892ede85ed936029fd2bf863fbe93a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c239773dd1892ede85ed936029fd2bf863fbe93a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c239773dd1892ede85ed936029fd2bf863fbe93a/comments", "author": {"login": "clairedross", "id": 8180017, "node_id": "MDQ6VXNlcjgxODAwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8180017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clairedross", "html_url": "https://github.com/clairedross", "followers_url": "https://api.github.com/users/clairedross/followers", "following_url": "https://api.github.com/users/clairedross/following{/other_user}", "gists_url": "https://api.github.com/users/clairedross/gists{/gist_id}", "starred_url": "https://api.github.com/users/clairedross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clairedross/subscriptions", "organizations_url": "https://api.github.com/users/clairedross/orgs", "repos_url": "https://api.github.com/users/clairedross/repos", "events_url": "https://api.github.com/users/clairedross/events{/privacy}", "received_events_url": "https://api.github.com/users/clairedross/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6505936a35e7a5c66e36f7c4e2032c5c7f64838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6505936a35e7a5c66e36f7c4e2032c5c7f64838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6505936a35e7a5c66e36f7c4e2032c5c7f64838"}], "stats": {"total": 92, "additions": 54, "deletions": 38}, "files": [{"sha": "f542bf6bb4844aa9739377f0520c940f095c45e2", "filename": "gcc/ada/libgnat/s-valuti.ads", "status": "modified", "additions": 54, "deletions": 38, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c239773dd1892ede85ed936029fd2bf863fbe93a/gcc%2Fada%2Flibgnat%2Fs-valuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c239773dd1892ede85ed936029fd2bf863fbe93a/gcc%2Fada%2Flibgnat%2Fs-valuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuti.ads?ref=c239773dd1892ede85ed936029fd2bf863fbe93a", "patch": "@@ -213,6 +213,50 @@ is\n    --  natural number, consisting in a sequence of figures possibly separated\n    --  by single underscores. It may be followed by other characters.\n \n+   function Starts_As_Exponent_Format_Ghost\n+     (Str  : String;\n+      Real : Boolean) return Boolean\n+   is\n+     (Str'Length > 1\n+      and then Str (Str'First) in 'E' | 'e'\n+      and then\n+        (declare\n+            Plus_Sign  : constant Boolean := Str (Str'First + 1) = '+';\n+            Minus_Sign : constant Boolean := Str (Str'First + 1) = '-';\n+            Sign       : constant Boolean := Plus_Sign or Minus_Sign;\n+         begin\n+           (if Minus_Sign then Real)\n+            and then (if Sign then Str'Length > 2)\n+            and then\n+              (declare\n+                 Start : constant Natural :=\n+                  (if Sign then Str'First + 2 else Str'First + 1);\n+               begin\n+                 Str (Start) in '0' .. '9')))\n+   with\n+     Ghost;\n+   --  Ghost function that determines if Str is recognized as something which\n+   --  might be an exponent, ie. it starts with an 'e', capitalized or not,\n+   --  followed by an optional sign which can only be '-' if we are working on\n+   --  real numbers (Real is True), and then a digit in decimal notation.\n+\n+   function Is_Opt_Exponent_Format_Ghost\n+     (Str  : String;\n+      Real : Boolean) return Boolean\n+   is\n+     (not Starts_As_Exponent_Format_Ghost (Str, Real)\n+      or else\n+        (declare\n+           Start : constant Natural :=\n+             (if Str (Str'First + 1) in '+' | '-' then Str'First + 2\n+              else Str'First + 1);\n+         begin Is_Natural_Format_Ghost (Str (Start .. Str'Last))))\n+   with\n+     Ghost;\n+   --  Ghost function that determines if Str has the correct format for an\n+   --  optional exponent, that is, either it does not start as an exponent, or\n+   --  it is in a correct format for a natural number.\n+\n    function Scan_Natural_Ghost\n      (Str : String;\n       P   : Natural;\n@@ -238,50 +282,22 @@ is\n      Pre =>\n        --  Ptr.all .. Max is either an empty range, or a valid range in Str\n        (Ptr.all > Max or else (Ptr.all >= Str'First and then Max <= Str'Last))\n-         and then\n-       Max < Natural'Last\n-         and then\n-       (if Ptr.all < Max and then Str (Ptr.all) in 'E' | 'e' then\n-          (declare\n-             Plus_Sign  : constant Boolean := Str (Ptr.all + 1) = '+';\n-             Minus_Sign : constant Boolean := Str (Ptr.all + 1) = '-';\n-             Sign       : constant Boolean := Plus_Sign or Minus_Sign;\n-           begin\n-             (if Minus_Sign and not Real then True\n-              elsif Sign\n-                and then (Ptr.all > Max - 2\n-                            or else Str (Ptr.all + 2) not in '0' .. '9')\n-              then True\n-              else\n-                (declare\n-                   Start : constant Natural :=\n-                     (if Sign then Ptr.all + 2 else Ptr.all + 1);\n-                 begin\n-                   Is_Natural_Format_Ghost (Str (Start .. Max)))))),\n+         and then Max < Natural'Last\n+         and then Is_Opt_Exponent_Format_Ghost (Str (Ptr.all .. Max), Real),\n      Post =>\n-       (if Ptr.all'Old < Max and then Str (Ptr.all'Old) in 'E' | 'e' then\n+       (if Starts_As_Exponent_Format_Ghost (Str (Ptr.all'Old .. Max), Real)\n+        then\n           (declare\n              Plus_Sign  : constant Boolean := Str (Ptr.all'Old + 1) = '+';\n              Minus_Sign : constant Boolean := Str (Ptr.all'Old + 1) = '-';\n              Sign       : constant Boolean := Plus_Sign or Minus_Sign;\n-             Unchanged  : constant Boolean :=\n-               Exp = 0 and Ptr.all = Ptr.all'Old;\n+             Start      : constant Natural :=\n+               (if Sign then Ptr.all'Old + 2 else Ptr.all'Old + 1);\n+             Value      : constant Natural :=\n+               Scan_Natural_Ghost (Str (Start .. Max), Start, 0);\n            begin\n-             (if Minus_Sign and not Real then Unchanged\n-              elsif Sign\n-                and then (Ptr.all'Old > Max - 2\n-                            or else Str (Ptr.all'Old + 2) not in '0' .. '9')\n-              then Unchanged\n-              else\n-                (declare\n-                   Start : constant Natural :=\n-                     (if Sign then Ptr.all'Old + 2 else Ptr.all'Old + 1);\n-                   Value : constant Natural :=\n-                     Scan_Natural_Ghost (Str (Start .. Max), Start, 0);\n-                 begin\n-                   Exp = (if Minus_Sign then -Value else Value))))\n-        else\n-          Exp = 0 and Ptr.all = Ptr.all'Old);\n+             Exp = (if Minus_Sign then -Value else Value))\n+        else Exp = 0 and Ptr.all = Ptr.all'Old);\n    --  Called to scan a possible exponent. Str, Ptr, Max are as described above\n    --  for Scan_Sign. If Ptr.all < Max and Str (Ptr.all) = 'E' or 'e', then an\n    --  exponent is scanned out, with the exponent value returned in Exp, and"}]}