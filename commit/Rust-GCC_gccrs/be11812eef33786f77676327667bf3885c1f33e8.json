{"sha": "be11812eef33786f77676327667bf3885c1f33e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUxMTgxMmVlZjMzNzg2Zjc3Njc2MzI3NjY3YmYzODg1YzFmMzNlOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-11T11:34:53Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-11T11:57:10Z"}, "message": "git_update_version: add --current argument.\n\nThe argument can be useful to update arbitrary branch, the changes\nare added to git index and user is supposed to make a commit.\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_update_version.py: Add --curent argument.", "tree": {"sha": "4c4da5c7206192f4d66ef9481239992252d51d0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c4da5c7206192f4d66ef9481239992252d51d0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be11812eef33786f77676327667bf3885c1f33e8", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7iHBYACgkQTcGC3A+n\nN4VMoggAqihKmaGjjuRl6s2QqYE5Y9WFoj4VhzJ8oxVLfFk8E3fqxEgeOIelJ3LS\nW6GyOTboDd/wPutqfFnEB/I6wt4BIw/ng2PYvirQSNQz5+zpsdExsNwZ0WelsMcJ\npkrK0ulTrUIWxwadsKDbjGN5Rym39YoGQrpV/1Qwi5BHps9ZCgQDE4M9soZWiPxC\nSUAifk1PBLlj8aV2dDHzHKAfkj9QORrxqasFi5e0GdERG14JkvZkwIss0E7Sp5EQ\nXG3ZP8mrtC/MOCumnAFkoG/C0TvfAA5qUMgh8y9ksA36cwSQgoRcrKqRKFRd785z\n5X+nqmKx2EdO3NFhd96MYVtk0e6z1g==\n=IigG\n-----END PGP SIGNATURE-----", "payload": "tree 4c4da5c7206192f4d66ef9481239992252d51d0e\nparent 6a07010b774cb5a0b1790b857e69d3d8534eebd2\nauthor Martin Liska <mliska@suse.cz> 1591875293 +0200\ncommitter Martin Liska <mliska@suse.cz> 1591876630 +0200\n\ngit_update_version: add --current argument.\n\nThe argument can be useful to update arbitrary branch, the changes\nare added to git index and user is supposed to make a commit.\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_update_version.py: Add --curent argument.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be11812eef33786f77676327667bf3885c1f33e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be11812eef33786f77676327667bf3885c1f33e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be11812eef33786f77676327667bf3885c1f33e8/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a07010b774cb5a0b1790b857e69d3d8534eebd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a07010b774cb5a0b1790b857e69d3d8534eebd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a07010b774cb5a0b1790b857e69d3d8534eebd2"}], "stats": {"total": 106, "additions": 59, "deletions": 47}, "files": [{"sha": "733a1a0f14a1ca15c9e57b164335f93d7c2c7ceb", "filename": "contrib/gcc-changelog/git_update_version.py", "status": "modified", "additions": 59, "deletions": 47, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be11812eef33786f77676327667bf3885c1f33e8/contrib%2Fgcc-changelog%2Fgit_update_version.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be11812eef33786f77676327667bf3885c1f33e8/contrib%2Fgcc-changelog%2Fgit_update_version.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_update_version.py?ref=be11812eef33786f77676327667bf3885c1f33e8", "patch": "@@ -66,60 +66,72 @@ def prepend_to_changelog_files(repo, folder, git_commit, add_to_git):\n                     help='Generate patch for ChangeLog entries and do it'\n                          ' even if DATESTAMP is unchanged; folder argument'\n                          ' is expected')\n+parser.add_argument('-c', '--current', action='store_true',\n+                    help='Modify current branch (--push argument is ignored)')\n args = parser.parse_args()\n \n repo = Repo(args.git_path)\n origin = repo.remotes['origin']\n \n-for ref in origin.refs:\n-    assert ref.name.startswith('origin/')\n-    name = ref.name[len('origin/'):]\n-    if name in active_refs:\n-        if name in repo.branches:\n-            branch = repo.branches[name]\n+\n+def update_current_branch():\n+    commit = repo.head.commit\n+    commit_count = 1\n+    while commit:\n+        if (commit.author.email == 'gccadmin@gcc.gnu.org'\n+                and commit.message.strip() == 'Daily bump.'):\n+            break\n+        commit = commit.parents[0]\n+        commit_count += 1\n+\n+    print('%d revisions since last Daily bump' % commit_count)\n+    datestamp_path = os.path.join(args.git_path, 'gcc/DATESTAMP')\n+    if (read_timestamp(datestamp_path) != current_timestamp\n+            or args.dry_mode or args.current):\n+        commits = parse_git_revisions(args.git_path, '%s..HEAD'\n+                                      % commit.hexsha)\n+        for git_commit in reversed(commits):\n+            prepend_to_changelog_files(repo, args.git_path, git_commit,\n+                                       not args.dry_mode)\n+        if args.dry_mode:\n+            diff = repo.git.diff('HEAD')\n+            patch = os.path.join(args.dry_mode,\n+                                 branch.name.split('/')[-1] + '.patch')\n+            with open(patch, 'w+') as f:\n+                f.write(diff)\n+            print('branch diff written to %s' % patch)\n+            repo.git.checkout(force=True)\n         else:\n-            branch = repo.create_head(name, ref).set_tracking_branch(ref)\n-        print('=== Working on: %s ===' % branch, flush=True)\n-        origin.pull(rebase=True)\n-        branch.checkout()\n-        print('branch pulled and checked out')\n-        assert not repo.index.diff(None)\n-        commit = branch.commit\n-        commit_count = 1\n-        while commit:\n-            if (commit.author.email == 'gccadmin@gcc.gnu.org'\n-                    and commit.message.strip() == 'Daily bump.'):\n-                break\n-            commit = commit.parents[0]\n-            commit_count += 1\n-\n-        print('%d revisions since last Daily bump' % commit_count)\n-        datestamp_path = os.path.join(args.git_path, 'gcc/DATESTAMP')\n-        if (read_timestamp(datestamp_path) != current_timestamp\n-                or args.dry_mode):\n-            commits = parse_git_revisions(args.git_path, '%s..HEAD'\n-                                          % commit.hexsha)\n-            for git_commit in reversed(commits):\n-                prepend_to_changelog_files(repo, args.git_path, git_commit,\n-                                           not args.dry_mode)\n-            if args.dry_mode:\n-                diff = repo.git.diff('HEAD')\n-                patch = os.path.join(args.dry_mode,\n-                                     branch.name.split('/')[-1] + '.patch')\n-                with open(patch, 'w+') as f:\n-                    f.write(diff)\n-                print('branch diff written to %s' % patch)\n-                repo.git.checkout(force=True)\n-            else:\n-                # update timestamp\n-                print('DATESTAMP will be changed:')\n-                with open(datestamp_path, 'w+') as f:\n-                    f.write(current_timestamp)\n-                repo.git.add(datestamp_path)\n+            # update timestamp\n+            print('DATESTAMP will be changed:')\n+            with open(datestamp_path, 'w+') as f:\n+                f.write(current_timestamp)\n+            repo.git.add(datestamp_path)\n+            if not args.current:\n                 repo.index.commit('Daily bump.')\n                 if args.push:\n                     repo.git.push('origin', branch)\n                     print('branch is pushed')\n-        else:\n-            print('DATESTAMP unchanged')\n-        print('branch is done\\n', flush=True)\n+    else:\n+        print('DATESTAMP unchanged')\n+\n+\n+if args.current:\n+    print('=== Working on the current branch ===', flush=True)\n+    update_current_branch()\n+else:\n+    for ref in origin.refs:\n+        assert ref.name.startswith('origin/')\n+        name = ref.name[len('origin/'):]\n+        if name in active_refs:\n+            if name in repo.branches:\n+                branch = repo.branches[name]\n+            else:\n+                branch = repo.create_head(name, ref).set_tracking_branch(ref)\n+            print('=== Working on: %s ===' % branch, flush=True)\n+            origin.pull(rebase=True)\n+            branch.checkout()\n+            print('branch pulled and checked out')\n+            update_current_branch()\n+            assert not repo.index.diff(None)\n+            print('branch is done\\n', flush=True)"}]}