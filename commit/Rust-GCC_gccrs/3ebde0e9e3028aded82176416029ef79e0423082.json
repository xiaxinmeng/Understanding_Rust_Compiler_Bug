{"sha": "3ebde0e9e3028aded82176416029ef79e0423082", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ViZGUwZTllMzAyOGFkZWQ4MjE3NjQxNjAyOWVmNzllMDQyMzA4Mg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "ulrich.weigand@linaro.org", "date": "2012-06-15T13:30:36Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2012-06-15T13:30:36Z"}, "message": "re PR tree-optimization/53636 (SLP may create invalid unaligned memory accesses)\n\n\tgcc/\n\tPR tree-optimization/53636\n\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Verify\n\tstride when doing basic-block vectorization.\n\n\tgcc/testsuite/\n\tPR tree-optimization/53636\n\t* gcc.target/arm/pr53636.c: New test.\n\nFrom-SVN: r188661", "tree": {"sha": "629dfbbc2c395e48be2a51e32ab649b17842ee3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/629dfbbc2c395e48be2a51e32ab649b17842ee3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ebde0e9e3028aded82176416029ef79e0423082", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebde0e9e3028aded82176416029ef79e0423082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebde0e9e3028aded82176416029ef79e0423082", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebde0e9e3028aded82176416029ef79e0423082/comments", "author": null, "committer": null, "parents": [{"sha": "273d260f83a0d914f30f8e5a055731357d53617d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/273d260f83a0d914f30f8e5a055731357d53617d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/273d260f83a0d914f30f8e5a055731357d53617d"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "99e290433f5fb6f5ecc7d34e355bef96463af9dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebde0e9e3028aded82176416029ef79e0423082/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebde0e9e3028aded82176416029ef79e0423082/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ebde0e9e3028aded82176416029ef79e0423082", "patch": "@@ -1,3 +1,9 @@\n+2012-06-15  Ulrich Weigand  <ulrich.weigand@linaro.org>\n+\n+\tPR tree-optimization/53636\n+\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Verify\n+\tstride when doing basic-block vectorization.\n+\n 2012-06-15  Ramana Radhakrishnan  <ramana.radhakrishnan@linaro.org>\n \n \t* tree-vect-generic.c (lower_vec_perm): Propagate vector constants"}, {"sha": "ca264c33a3c92f8b8cbd37b7e964dd19f756d49a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebde0e9e3028aded82176416029ef79e0423082/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebde0e9e3028aded82176416029ef79e0423082/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ebde0e9e3028aded82176416029ef79e0423082", "patch": "@@ -1,3 +1,8 @@\n+2012-06-15  Ulrich Weigand  <ulrich.weigand@linaro.org>\n+\n+\tPR tree-optimization/53636\n+\t* gcc.target/arm/pr53636.c: New test.\n+\n 2012-06-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/51581"}, {"sha": "dbad7957e546e4170cf0344ddeef415b426d68ed", "filename": "gcc/testsuite/gcc.target/arm/pr53636.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebde0e9e3028aded82176416029ef79e0423082/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53636.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebde0e9e3028aded82176416029ef79e0423082/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53636.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53636.c?ref=3ebde0e9e3028aded82176416029ef79e0423082", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O -ftree-vectorize\" } */\n+/* { dg-add-options arm_neon } */\n+\n+void fill (short *buf) __attribute__ ((noinline));\n+void fill (short *buf)\n+{\n+  int i;\n+\n+  for (i = 0; i < 11 * 8; i++)\n+    buf[i] = i;\n+}\n+\n+void test (unsigned char *dst) __attribute__ ((noinline));\n+void test (unsigned char *dst)\n+{\n+  short tmp[11 * 8], *tptr;\n+  int i;\n+\n+  fill (tmp);\n+\n+  tptr = tmp;\n+  for (i = 0; i < 8; i++)\n+    {\n+      dst[0] = (-tptr[0] + 9 * tptr[0 + 1] + 9 * tptr[0 + 2] - tptr[0 + 3]) >> 7;\n+      dst[1] = (-tptr[1] + 9 * tptr[1 + 1] + 9 * tptr[1 + 2] - tptr[1 + 3]) >> 7;\n+      dst[2] = (-tptr[2] + 9 * tptr[2 + 1] + 9 * tptr[2 + 2] - tptr[2 + 3]) >> 7;\n+      dst[3] = (-tptr[3] + 9 * tptr[3 + 1] + 9 * tptr[3 + 2] - tptr[3 + 3]) >> 7;\n+      dst[4] = (-tptr[4] + 9 * tptr[4 + 1] + 9 * tptr[4 + 2] - tptr[4 + 3]) >> 7;\n+      dst[5] = (-tptr[5] + 9 * tptr[5 + 1] + 9 * tptr[5 + 2] - tptr[5 + 3]) >> 7;\n+      dst[6] = (-tptr[6] + 9 * tptr[6 + 1] + 9 * tptr[6 + 2] - tptr[6 + 3]) >> 7;\n+      dst[7] = (-tptr[7] + 9 * tptr[7 + 1] + 9 * tptr[7 + 2] - tptr[7 + 3]) >> 7;\n+\n+      dst += 8;\n+      tptr += 11;\n+    }\n+}\n+\n+int main (void)\n+{\n+  char buf [8 * 8];\n+\n+  test (buf);\n+\n+  return 0;\n+}\n+"}, {"sha": "29dff45482be9a923428e0528de6fab4641fae7a", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ebde0e9e3028aded82176416029ef79e0423082/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ebde0e9e3028aded82176416029ef79e0423082/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=3ebde0e9e3028aded82176416029ef79e0423082", "patch": "@@ -861,6 +861,24 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n \t}\n     }\n \n+  /* Similarly, if we're doing basic-block vectorization, we can only use\n+     base and misalignment information relative to an innermost loop if the\n+     misalignment stays the same throughout the execution of the loop.\n+     As above, this is the case if the stride of the dataref evenly divides\n+     by the vector size.  */\n+  if (!loop)\n+    {\n+      tree step = DR_STEP (dr);\n+      HOST_WIDE_INT dr_step = TREE_INT_CST_LOW (step);\n+\n+      if (dr_step % GET_MODE_SIZE (TYPE_MODE (vectype)) != 0)\n+\t{\n+\t  if (vect_print_dump_info (REPORT_ALIGNMENT))\n+\t    fprintf (vect_dump, \"SLP: step doesn't divide the vector-size.\");\n+\t  misalign = NULL_TREE;\n+\t}\n+    }\n+\n   base = build_fold_indirect_ref (base_addr);\n   alignment = ssize_int (TYPE_ALIGN (vectype)/BITS_PER_UNIT);\n "}]}