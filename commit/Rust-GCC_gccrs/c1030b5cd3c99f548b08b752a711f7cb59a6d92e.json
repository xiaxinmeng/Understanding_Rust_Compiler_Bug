{"sha": "c1030b5cd3c99f548b08b752a711f7cb59a6d92e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEwMzBiNWNkM2M5OWY1NDhiMDhiNzUyYTcxMWY3Y2I1OWE2ZDkyZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2020-01-08T15:00:39Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2020-01-08T15:00:39Z"}, "message": "libgomp.texi: Fix typos, use https (actual change)\n\nFrom-SVN: r280008", "tree": {"sha": "146dc1da0f8856edfe463b1ae7d5195e8dac49b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/146dc1da0f8856edfe463b1ae7d5195e8dac49b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1030b5cd3c99f548b08b752a711f7cb59a6d92e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1030b5cd3c99f548b08b752a711f7cb59a6d92e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1030b5cd3c99f548b08b752a711f7cb59a6d92e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1030b5cd3c99f548b08b752a711f7cb59a6d92e/comments", "author": null, "committer": null, "parents": [{"sha": "df2c0d36202466c6b2dbc2f993040311d72554a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2c0d36202466c6b2dbc2f993040311d72554a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2c0d36202466c6b2dbc2f993040311d72554a1"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "f082a4a401b7850cee80bd8af38b6a14eec6416d", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1030b5cd3c99f548b08b752a711f7cb59a6d92e/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1030b5cd3c99f548b08b752a711f7cb59a6d92e/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=c1030b5cd3c99f548b08b752a711f7cb59a6d92e", "patch": "@@ -1727,9 +1727,9 @@ the stack size is system dependent.\n @ref{OMP_STACKSIZE}\n \n @item @emph{Reference}: \n-@uref{http://gcc.gnu.org/ml/gcc-patches/2006-06/msg00493.html, \n+@uref{https://gcc.gnu.org/ml/gcc-patches/2006-06/msg00493.html,\n GCC Patches Mailinglist}, \n-@uref{http://gcc.gnu.org/ml/gcc-patches/2006-06/msg00496.html,\n+@uref{https://gcc.gnu.org/ml/gcc-patches/2006-06/msg00496.html,\n GCC Patches Mailinglist}\n @end table\n \n@@ -1811,7 +1811,7 @@ pools available and their worker threads run at priority four.\n \n To activate the OpenACC extensions for C/C++ and Fortran, the compile-time \n flag @option{-fopenacc} must be specified.  This enables the OpenACC directive\n-@code{#pragma acc} in C/C++ and @code{!$accp} directives in free form,\n+@code{#pragma acc} in C/C++ and @code{!$acc} directives in free form,\n @code{c$acc}, @code{*$acc} and @code{!$acc} directives in fixed form,\n @code{!$} conditional compilation sentinels in free form and @code{c$},\n @code{*$} and @code{!$} sentinels in fixed form, for Fortran.  The flag also\n@@ -1852,11 +1852,11 @@ acceleration device.\n * acc_get_property::            Get device property.\n * acc_async_test::              Tests for completion of a specific asynchronous\n                                 operation.\n-* acc_async_test_all::          Tests for completion of all asychronous\n+* acc_async_test_all::          Tests for completion of all asynchronous\n                                 operations.\n * acc_wait::                    Wait for completion of a specific asynchronous\n                                 operation.\n-* acc_wait_all::                Waits for completion of all asyncrhonous\n+* acc_wait_all::                Waits for completion of all asynchronous\n                                 operations.\n * acc_wait_all_async::          Wait for completion of all asynchronous\n                                 operations.\n@@ -1939,7 +1939,7 @@ for the device type specified in @var{devicetype}.\n @section @code{acc_set_device_type} -- Set type of device accelerator to use.\n @table @asis\n @item @emph{Description}\n-This function indicates to the runtime library which device typr, specified\n+This function indicates to the runtime library which device type, specified\n in @var{devicetype}, to use when executing a parallel or kernels region. \n \n @item @emph{C/C++}:\n@@ -1990,7 +1990,7 @@ parallel or kernels region.\n @table @asis\n @item @emph{Description}\n This function will indicate to the runtime which device number,\n-specified by @var{num}, associated with the specifed device\n+specified by @var{num}, associated with the specified device\n type @var{devicetype}.\n \n @item @emph{C/C++}:\n@@ -2393,7 +2393,7 @@ variable or array element and @var{len} specifies the length in bytes.\n @section @code{acc_present_or_copyin} -- If the data is not present on the device, allocate device memory and copy from host memory.\n @table @asis\n @item @emph{Description}\n-This function tests if the host data specifed by @var{a} and of length\n+This function tests if the host data specified by @var{a} and of length\n @var{len} is present or not. If it is not present, then device memory\n will be allocated and the host memory copied. The device address of\n the newly allocated device memory is returned.\n@@ -2466,7 +2466,7 @@ array element and @var{len} specifies the length in bytes.\n @section @code{acc_present_or_create} -- If the data is not present on the device, allocate device memory and map it to host memory.\n @table @asis\n @item @emph{Description}\n-This function tests if the host data specifed by @var{a} and of length\n+This function tests if the host data specified by @var{a} and of length\n @var{len} is present or not. If it is not present, then device memory\n will be allocated and mapped to host memory. In C/C++, the device address\n of the newly allocated device memory is returned.\n@@ -3033,7 +3033,7 @@ asynchronous functionality is implemented by making use of CUDA\n streams@footnote{See \"Stream Management\" in \"CUDA Driver API\",\n TRM-06703-001, Version 5.5, for additional information}.\n \n-The primary means by that the asychronous functionality is accessed\n+The primary means by that the asynchronous functionality is accessed\n is through the use of those OpenACC directives which make use of the\n @code{async} and @code{wait} clauses.  When the @code{async} clause is\n first used with a directive, it creates a CUDA stream.  If an\n@@ -3935,7 +3935,7 @@ becomes\n @chapter Reporting Bugs\n \n Bugs in the GNU Offloading and Multi Processing Runtime Library should\n-be reported via @uref{http://gcc.gnu.org/bugzilla/, Bugzilla}.  Please add\n+be reported via @uref{https://gcc.gnu.org/bugzilla/, Bugzilla}.  Please add\n \"openacc\", or \"openmp\", or both to the keywords field in the bug\n report, as appropriate.\n "}]}