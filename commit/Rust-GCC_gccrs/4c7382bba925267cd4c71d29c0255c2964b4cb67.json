{"sha": "4c7382bba925267cd4c71d29c0255c2964b4cb67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM3MzgyYmJhOTI1MjY3Y2Q0YzcxZDI5YzAyNTVjMjk2NGI0Y2I2Nw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-05-14T21:20:10Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-05-14T21:20:10Z"}, "message": "re PR fortran/35682 (assignment to run-time zero-sized complex section stores a value)\n\n\tPR fortran/35682\n\n\t* trans-array.c (gfc_conv_ss_startstride): Any negative size is\n\tthe same as zero size.\n\t(gfc_conv_loop_setup): Fix size calculation.\n\n\t* gfortran.dg/bound_4.f90: New test.\n\t* gfortran.dg/bounds_check_14.f90: New test.\n\nFrom-SVN: r135306", "tree": {"sha": "1c3a56e6dca368522831f733c93f7761f0f54c3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c3a56e6dca368522831f733c93f7761f0f54c3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c7382bba925267cd4c71d29c0255c2964b4cb67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7382bba925267cd4c71d29c0255c2964b4cb67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c7382bba925267cd4c71d29c0255c2964b4cb67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c7382bba925267cd4c71d29c0255c2964b4cb67/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f10827b13be2d7f3a031c93ba6fcc35f81f762fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10827b13be2d7f3a031c93ba6fcc35f81f762fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10827b13be2d7f3a031c93ba6fcc35f81f762fd"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "d2470a1edd6200bf4d4c74d5966bb3e92b97fe48", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7382bba925267cd4c71d29c0255c2964b4cb67/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7382bba925267cd4c71d29c0255c2964b4cb67/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4c7382bba925267cd4c71d29c0255c2964b4cb67", "patch": "@@ -1,3 +1,10 @@\n+2008-05-14  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/35682\n+\t* trans-array.c (gfc_conv_ss_startstride): Any negative size is\n+\tthe same as zero size.\n+\t(gfc_conv_loop_setup): Fix size calculation.\n+\n 2008-05-14  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/35685"}, {"sha": "3c099ddcc9d02f3c1463e8b5c6b31743089f84b8", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7382bba925267cd4c71d29c0255c2964b4cb67/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7382bba925267cd4c71d29c0255c2964b4cb67/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=4c7382bba925267cd4c71d29c0255c2964b4cb67", "patch": "@@ -3083,6 +3083,8 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t\t\t\t info->start[n]);\n \t      tmp = fold_build2 (FLOOR_DIV_EXPR, gfc_array_index_type, tmp,\n \t\t\t\t info->stride[n]);\n+\t      tmp = fold_build2 (MAX_EXPR, gfc_array_index_type, tmp,\n+\t\t\t\t build_int_cst (gfc_array_index_type, 0));\n \t      /* We remember the size of the first section, and check all the\n \t         others against this.  */\n \t      if (size[n])\n@@ -3435,8 +3437,10 @@ gfc_conv_loop_setup (gfc_loopinfo * loop)\n \t     for (i = 0; i<=last; i++){...};  */\n \t  tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n \t\t\t     loop->to[n], loop->from[n]);\n-\t  tmp = fold_build2 (TRUNC_DIV_EXPR, gfc_array_index_type, \n+\t  tmp = fold_build2 (FLOOR_DIV_EXPR, gfc_array_index_type, \n \t\t\t     tmp, info->stride[n]);\n+\t  tmp = fold_build2 (MAX_EXPR, gfc_array_index_type, tmp,\n+\t\t\t     build_int_cst (gfc_array_index_type, -1));\n \t  loop->to[n] = gfc_evaluate_now (tmp, &loop->pre);\n \t  /* Make the loop variable start at 0.  */\n \t  loop->from[n] = gfc_index_zero_node;"}, {"sha": "2fa16223fab24889620b3747a191f240796b476d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7382bba925267cd4c71d29c0255c2964b4cb67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7382bba925267cd4c71d29c0255c2964b4cb67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c7382bba925267cd4c71d29c0255c2964b4cb67", "patch": "@@ -1,3 +1,9 @@\n+2008-05-14  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/35682\n+\t* gfortran.dg/bound_4.f90: New test.\n+\t* gfortran.dg/bounds_check_14.f90: New test.\n+\n 2008-05-14  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/35685"}, {"sha": "dd934519d53a4635ae787fec63819eaf23c609df", "filename": "gcc/testsuite/gfortran.dg/bound_4.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7382bba925267cd4c71d29c0255c2964b4cb67/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7382bba925267cd4c71d29c0255c2964b4cb67/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_4.f90?ref=4c7382bba925267cd4c71d29c0255c2964b4cb67", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run }\n+\n+program test\n+  integer x(20)\n+  integer, volatile :: n\n+  n = 1\n+  if (size(x(n:2:-3)) /= 0) call abort\n+\n+  call ha0020(-3)\n+  call ha0020(-1)\n+end program test\n+\n+subroutine ha0020(mf3)\n+  implicit none\n+  integer xca(1), xda(1), mf3\n+\n+  xca = 1\n+  xda = -1\n+\n+  xca(1:1) = xda(1:2:mf3)\n+\n+  if (any (xca /= -1)) call abort\n+  if (any(xda(1:2:mf3) /= xda(1:0))) call abort\n+  if (size(xda(1:2:mf3)) /= 0) call abort\n+  if (any(shape(xda(1:2:mf3)) /= 0)) call abort\n+  if (any(ubound(xda(1:2:mf3)) /= 0)) call abort\n+  if (ubound(xda(1:2:mf3),1) /= 0) call abort\n+  if (lbound(xda(1:2:mf3),1) /= 1) call abort\n+\n+end subroutine"}, {"sha": "0b7edfe565bf12e0b6a74a05e1cd56005f8d89d4", "filename": "gcc/testsuite/gfortran.dg/bounds_check_14.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c7382bba925267cd4c71d29c0255c2964b4cb67/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c7382bba925267cd4c71d29c0255c2964b4cb67/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_14.f90?ref=4c7382bba925267cd4c71d29c0255c2964b4cb67", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+\n+program test\n+  integer x(20)\n+  integer, volatile :: n\n+  n = 1\n+  if (size(x(n:2:-3)) /= 0) call abort\n+\n+  call ha0020(-3)\n+  call ha0020(-1)\n+end program test\n+\n+subroutine ha0020(mf3)\n+  implicit none\n+  integer xca(1), xda(1), mf3\n+\n+  xca = 1\n+  xda = -1\n+\n+  xca(1:1) = xda(1:2:mf3)\n+\n+  if (any (xca /= -1)) call abort\n+  if (any(xda(1:2:mf3) /= xda(1:0))) call abort\n+  if (size(xda(1:2:mf3)) /= 0) call abort\n+  if (any(shape(xda(1:2:mf3)) /= 0)) call abort\n+  if (any(ubound(xda(1:2:mf3)) /= 0)) call abort\n+  if (ubound(xda(1:2:mf3),1) /= 0) call abort\n+  if (lbound(xda(1:2:mf3),1) /= 1) call abort\n+\n+end subroutine"}]}