{"sha": "bb0d2039bae9105b7afe749c923b2c60c579bbb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIwZDIwMzliYWU5MTA1YjdhZmU3NDljOTIzYjJjNjBjNTc5YmJiOQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@vnet.linux.ibm.com", "date": "2013-08-03T14:37:26Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2013-08-03T14:37:26Z"}, "message": "gimple-ssa-strength-reduction.c (replace_mult_candidate): Update candidate table when replacing a candidate statement.\n\ngcc:\n\n2013-08-03  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n\n\t* gimple-ssa-strength-reduction.c (replace_mult_candidate): Update\n\tcandidate table when replacing a candidate statement.\n\t(replace_rhs_if_not_dup): Likewise.\n\t(replace_one_candidate): Likewise.\n\ngcc/testsuite:\n\n2013-08-03  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n\n\t* gcc.dg/torture/pr57993-2.cpp: New.\n\nFrom-SVN: r201466", "tree": {"sha": "d1382f2adf3cc916dda4fb158217884119cd7e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1382f2adf3cc916dda4fb158217884119cd7e75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb0d2039bae9105b7afe749c923b2c60c579bbb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb0d2039bae9105b7afe749c923b2c60c579bbb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb0d2039bae9105b7afe749c923b2c60c579bbb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb0d2039bae9105b7afe749c923b2c60c579bbb9/comments", "author": null, "committer": null, "parents": [{"sha": "399eeef9786cb661aa86981ee9e7a9f3dec373d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/399eeef9786cb661aa86981ee9e7a9f3dec373d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/399eeef9786cb661aa86981ee9e7a9f3dec373d6"}], "stats": {"total": 227, "additions": 227, "deletions": 0}, "files": [{"sha": "b77491af00e5257408b78a4a923a5ee31e5397b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0d2039bae9105b7afe749c923b2c60c579bbb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0d2039bae9105b7afe749c923b2c60c579bbb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb0d2039bae9105b7afe749c923b2c60c579bbb9", "patch": "@@ -1,3 +1,10 @@\n+2013-08-03  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n+\n+\t* gimple-ssa-strength-reduction.c (replace_mult_candidate): Update\n+\tcandidate table when replacing a candidate statement.\n+\t(replace_rhs_if_not_dup): Likewise.\n+\t(replace_one_candidate): Likewise.\n+\n 2013-08-02  Jan Hubicka  <jh@suse.cz>\n \t    Martin Liska  <marxin.liska@gmail.com>\n "}, {"sha": "4a0d631722aee67dc3616fe670a327f9ab0ca79f", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0d2039bae9105b7afe749c923b2c60c579bbb9/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0d2039bae9105b7afe749c923b2c60c579bbb9/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=bb0d2039bae9105b7afe749c923b2c60c579bbb9", "patch": "@@ -1911,6 +1911,7 @@ replace_mult_candidate (slsr_cand_t c, tree basis_name, double_int bump)\n \t      gimple_assign_set_rhs_with_ops (&gsi, code,\n \t\t\t\t\t      basis_name, bump_tree);\n \t      update_stmt (gsi_stmt (gsi));\n+              c->cand_stmt = gsi_stmt (gsi);\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\tstmt_to_print = gsi_stmt (gsi);\n \t    }\n@@ -3114,6 +3115,7 @@ replace_rhs_if_not_dup (enum tree_code new_code, tree new_rhs1, tree new_rhs2,\n       gimple_stmt_iterator gsi = gsi_for_stmt (c->cand_stmt);\n       gimple_assign_set_rhs_with_ops (&gsi, new_code, new_rhs1, new_rhs2);\n       update_stmt (gsi_stmt (gsi));\n+      c->cand_stmt = gsi_stmt (gsi);\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \treturn gsi_stmt (gsi);\n@@ -3219,6 +3221,7 @@ replace_one_candidate (slsr_cand_t c, unsigned i, tree basis_name)\n \t  gimple_stmt_iterator gsi = gsi_for_stmt (c->cand_stmt);\n \t  gimple_assign_set_rhs_with_ops (&gsi, MINUS_EXPR, basis_name, rhs2);\n \t  update_stmt (gsi_stmt (gsi));\n+          c->cand_stmt = gsi_stmt (gsi);\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    stmt_to_print = gsi_stmt (gsi);"}, {"sha": "f98ca348ff98f9b235d6930c6b1b308d76abc132", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0d2039bae9105b7afe749c923b2c60c579bbb9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0d2039bae9105b7afe749c923b2c60c579bbb9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb0d2039bae9105b7afe749c923b2c60c579bbb9", "patch": "@@ -1,3 +1,7 @@\n+2013-08-03  Bill Schmidt  <wschmidt@vnet.linux.ibm.com>\n+\n+\t* gcc.dg/torture/pr57993-2.cpp: New.\n+\n 2013-08-02  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/ipa/ipa-1.c: Update."}, {"sha": "d8fd371b0967f5728989afeb9443fb8a5adf8f54", "filename": "gcc/testsuite/gcc.dg/torture/pr57993-2.cpp", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0d2039bae9105b7afe749c923b2c60c579bbb9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57993-2.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0d2039bae9105b7afe749c923b2c60c579bbb9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57993-2.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57993-2.cpp?ref=bb0d2039bae9105b7afe749c923b2c60c579bbb9", "patch": "@@ -0,0 +1,213 @@\n+/* This ICEd due to an incomplete fix for PR57993.  */\n+/* { dg-compile } */\n+\n+extern \"C\"\n+{\n+  extern double sqrt (double __x) throw ();\n+  typedef long unsigned int size_t;\n+  typedef struct\n+  {\n+  }\n+  __mbstate_t;\n+  void *pov_malloc (size_t size, const char *file, int line, const char *msg);\n+  typedef struct Object_Struct OBJECT;\n+  typedef struct Ray_Struct RAY;\n+  typedef struct istack_struct ISTACK;\n+  typedef struct istk_entry INTERSECTION;\n+  typedef double UV_VECT[2];\n+  typedef double VECTOR[3];\n+  typedef struct Transform_Struct TRANSFORM;\n+  typedef struct Method_Struct METHODS;\n+  typedef int (*ALL_INTERSECTIONS_METHOD) (OBJECT *, RAY *, ISTACK *);\n+  typedef int (*INSIDE_METHOD) (VECTOR, OBJECT *);\n+  typedef void (*NORMAL_METHOD) (VECTOR, OBJECT *, INTERSECTION *);\n+  typedef void (*UVCOORD_METHOD) (UV_VECT, OBJECT *, INTERSECTION *);\n+  typedef void *(*COPY_METHOD) (OBJECT *);\n+  typedef void (*TRANSLATE_METHOD) (OBJECT *, VECTOR, TRANSFORM *);\n+  typedef void (*ROTATE_METHOD) (OBJECT *, VECTOR, TRANSFORM *);\n+  typedef void (*SCALE_METHOD) (OBJECT *, VECTOR, TRANSFORM *);\n+  typedef void (*TRANSFORM_METHOD) (OBJECT *, TRANSFORM *);\n+  typedef void (*INVERT_METHOD) (OBJECT *);\n+  typedef void (*DESTROY_METHOD) (OBJECT *);\n+  struct Method_Struct\n+  {\n+    ALL_INTERSECTIONS_METHOD All_Intersections_Method;\n+    INSIDE_METHOD Inside_Method;\n+    NORMAL_METHOD Normal_Method;\n+    UVCOORD_METHOD UVCoord_Method;\n+    COPY_METHOD Copy_Method;\n+    TRANSLATE_METHOD Translate_Method;\n+    ROTATE_METHOD Rotate_Method;\n+    SCALE_METHOD Scale_Method;\n+    TRANSFORM_METHOD Transform_Method;\n+    INVERT_METHOD Invert_Method;\n+    DESTROY_METHOD Destroy_Method;\n+  };\n+  typedef struct Bicubic_Patch_Struct BICUBIC_PATCH;\n+  typedef struct Bezier_Node_Struct BEZIER_NODE;\n+  struct Bezier_Node_Struct\n+  {\n+    int Node_Type;\n+    int Count;\n+  };\n+  struct Bicubic_Patch_Struct\n+  {\n+    METHODS *Methods;\n+    int Patch_Type, U_Steps, V_Steps;\n+    VECTOR Control_Points[4][4];\n+    BEZIER_NODE *Node_Tree;\n+  };\n+  typedef enum\n+  {\n+    CSV, SYS, PPM, TARGA, PNG, NONE\n+  }\n+  SHELLDATA;\n+  typedef enum STATS\n+  {\n+    Number_Of_Pixels =\n+      0, Number_Of_Pixels_Supersampled, Number_Of_Samples, Number_Of_Rays,\n+      Calls_To_DNoise, Calls_To_Noise, ADC_Saves, Istack_overflows,\n+      Ray_RBezier_Tests, Ray_RBezier_Tests_Succeeded, Ray_Bicubic_Tests,\n+      Ray_Bicubic_Tests_Succeeded, Ray_Blob_Tests, Ray_Blob_Tests_Succeeded,\n+      Blob_Element_Tests, Blob_Element_Tests_Succeeded, Blob_Bound_Tests,\n+      Blob_Bound_Tests_Succeeded, Ray_Box_Tests, Ray_Box_Tests_Succeeded,\n+      Ray_Cone_Tests, Ray_Cone_Tests_Succeeded, Ray_CSG_Intersection_Tests,\n+      Ray_CSG_Intersection_Tests_Succeeded, Ray_CSG_Merge_Tests,\n+      Ray_CSG_Merge_Tests_Succeeded, Ray_CSG_Union_Tests,\n+      Ray_CSG_Union_Tests_Succeeded, Ray_Disc_Tests, Ray_Disc_Tests_Succeeded,\n+      Ray_Fractal_Tests, Ray_Fractal_Tests_Succeeded, Ray_HField_Tests,\n+      Ray_HField_Tests_Succeeded, Ray_HField_Box_Tests,\n+      Ray_HField_Box_Tests_Succeeded, Ray_HField_Triangle_Tests,\n+      Ray_HField_Triangle_Tests_Succeeded, Ray_HField_Block_Tests,\n+      Ray_HField_Block_Tests_Succeeded, Ray_HField_Cell_Tests,\n+      Ray_HField_Cell_Tests_Succeeded, Ray_IsoSurface_Tests,\n+      Ray_IsoSurface_Tests_Succeeded, Ray_IsoSurface_Bound_Tests,\n+      Ray_IsoSurface_Bound_Tests_Succeeded, Ray_IsoSurface_Cache,\n+      Ray_IsoSurface_Cache_Succeeded, Ray_Lathe_Tests,\n+      Ray_Lathe_Tests_Succeeded, Lathe_Bound_Tests,\n+      Lathe_Bound_Tests_Succeeded, Ray_Mesh_Tests, Ray_Mesh_Tests_Succeeded,\n+      Ray_Plane_Tests, Ray_Plane_Tests_Succeeded, Ray_Polygon_Tests,\n+      Ray_Polygon_Tests_Succeeded, Ray_Prism_Tests, Ray_Prism_Tests_Succeeded,\n+      Prism_Bound_Tests, Prism_Bound_Tests_Succeeded, Ray_Parametric_Tests,\n+      Ray_Parametric_Tests_Succeeded, Ray_Par_Bound_Tests,\n+      Ray_Par_Bound_Tests_Succeeded, Ray_Quadric_Tests,\n+      Ray_Quadric_Tests_Succeeded, Ray_Poly_Tests, Ray_Poly_Tests_Succeeded,\n+      Ray_Sphere_Tests, Ray_Sphere_Tests_Succeeded, Ray_Sphere_Sweep_Tests,\n+      Ray_Sphere_Sweep_Tests_Succeeded, Ray_Superellipsoid_Tests,\n+      Ray_Superellipsoid_Tests_Succeeded, Ray_Sor_Tests,\n+      Ray_Sor_Tests_Succeeded, Sor_Bound_Tests, Sor_Bound_Tests_Succeeded,\n+      Ray_Torus_Tests, Ray_Torus_Tests_Succeeded, Torus_Bound_Tests,\n+      Torus_Bound_Tests_Succeeded, Ray_Triangle_Tests,\n+      Ray_Triangle_Tests_Succeeded, Ray_TTF_Tests, Ray_TTF_Tests_Succeeded,\n+      Bounding_Region_Tests, Bounding_Region_Tests_Succeeded,\n+      Clipping_Region_Tests, Clipping_Region_Tests_Succeeded,\n+      Ray_IsoSurface_Find_Root, Ray_Function_VM_Calls,\n+      Ray_Function_VM_Instruction_Est, VBuffer_Tests, VBuffer_Tests_Succeeded,\n+      LBuffer_Tests, LBuffer_Tests_Succeeded, Media_Samples, Media_Intervals,\n+      Reflected_Rays_Traced, Refracted_Rays_Traced, Transmitted_Rays_Traced,\n+      Internal_Reflected_Rays_Traced, Shadow_Cache_Hits,\n+      Shadow_Rays_Succeeded, Shadow_Ray_Tests, nChecked, nEnqueued,\n+      totalQueues, totalQueueResets, totalQueueResizes, Polynomials_Tested,\n+      Roots_Eliminated, MemStat_Smallest_Alloc, MemStat_Largest_Alloc,\n+      MemStat_Largest_Mem_Usage, Number_Of_Photons_Shot,\n+      Number_Of_Photons_Stored, Number_Of_Global_Photons_Stored,\n+      Number_Of_Media_Photons_Stored, Priority_Queue_Add,\n+      Priority_Queue_Remove, Gather_Performed_Count, Gather_Expanded_Count,\n+      MaxStat\n+  }\n+  Stats;\n+  static int All_Bicubic_Patch_Intersections (OBJECT * Object, RAY * Ray,\n+\t\t\t\t\t      ISTACK * Depth_Stack);\n+  static int Inside_Bicubic_Patch (VECTOR IPoint, OBJECT * Object);\n+  static void Bicubic_Patch_Normal (VECTOR Result, OBJECT * Object,\n+\t\t\t\t    INTERSECTION * Inter);\n+  static void Bicubic_Patch_UVCoord (UV_VECT Result, OBJECT * Object,\n+\t\t\t\t     INTERSECTION * Inter);\n+  static BICUBIC_PATCH *Copy_Bicubic_Patch (OBJECT * Object);\n+  static void Translate_Bicubic_Patch (OBJECT * Object, VECTOR Vector,\n+\t\t\t\t       TRANSFORM * Trans);\n+  static void Rotate_Bicubic_Patch (OBJECT * Object, VECTOR Vector,\n+\t\t\t\t    TRANSFORM * Trans);\n+  static void Scale_Bicubic_Patch (OBJECT * Object, VECTOR Vector,\n+\t\t\t\t   TRANSFORM * Trans);\n+  static void Transform_Bicubic_Patch (OBJECT * Object, TRANSFORM * Trans);\n+  static void Invert_Bicubic_Patch (OBJECT * Object);\n+  static void Destroy_Bicubic_Patch (OBJECT * Object);\n+  static METHODS Bicubic_Patch_Methods = {\n+    All_Bicubic_Patch_Intersections, Inside_Bicubic_Patch,\n+      Bicubic_Patch_Normal, Bicubic_Patch_UVCoord,\n+      (COPY_METHOD) Copy_Bicubic_Patch, Translate_Bicubic_Patch,\n+      Rotate_Bicubic_Patch, Scale_Bicubic_Patch, Transform_Bicubic_Patch,\n+      Invert_Bicubic_Patch, Destroy_Bicubic_Patch\n+  };\n+  static void bezier_value (VECTOR (*Control_Points)[4][4], double u0,\n+\t\t\t    double v0, VECTOR P, VECTOR N)\n+  {\n+    int i, j;\n+    double c, t, ut, vt;\n+    double u[4], uu[4], v[4], vv[4];\n+    double du[4], duu[4], dv[4], dvv[4];\n+    for (i = 1; i < 4; i++)\n+      {\n+\tvv[i] = vv[i - 1] * (1.0 - v0);\n+\tdvv[i] = -i * vv[i - 1];\n+      }\n+    for (i = 0; i < 4; i++)\n+      {\n+\tfor (j = 0; j < 4; j++)\n+\t  {\n+\t    t = c * ut * (dv[j] * vv[3 - j] + v[j] * dvv[3 - j]);\n+\t  }\n+\tt = 1.0 / sqrt (t);\n+      }\n+  }\n+  static int intersect_subpatch (BICUBIC_PATCH * Shape, RAY * ray,\n+\t\t\t\t VECTOR V1[3], double uu[3], double vv[3],\n+\t\t\t\t double *Depth, VECTOR P, VECTOR N, double *u,\n+\t\t\t\t double *v)\n+  {\n+    VECTOR Q, T1;\n+    VECTOR B[3], IB[3], NN[3];\n+    bezier_value ((VECTOR (*)[4][4]) & Shape->Control_Points, uu[1], vv[1],\n+\t\t  T1, NN[1]);\n+  }\n+  static int bezier_tree_walker (RAY * Ray, BICUBIC_PATCH * Shape,\n+\t\t\t\t BEZIER_NODE * Node, ISTACK * Depth_Stack)\n+  {\n+    int i, cnt = 0;\n+    double Depth, u, v;\n+    double uu[3], vv[3];\n+    VECTOR N, P;\n+    VECTOR V1[3];\n+    if (Node->Node_Type == 0)\n+      {\n+\tfor (i = 0; i < Node->Count; i++)\n+\t  {\n+\t  }\n+\tif (intersect_subpatch (Shape, Ray, V1, uu, vv, &Depth, P, N, &u, &v))\n+\t  {\n+\t  }\n+      }\n+  }\n+  static int All_Bicubic_Patch_Intersections (OBJECT * Object, RAY * Ray,\n+\t\t\t\t\t      ISTACK * Depth_Stack)\n+  {\n+    int Found, cnt = 0;\n+    switch (((BICUBIC_PATCH *) Object)->Patch_Type)\n+      {\n+      case 1:\n+\tcnt =\n+\t  bezier_tree_walker (Ray, (BICUBIC_PATCH *) Object,\n+\t\t\t      ((BICUBIC_PATCH *) Object)->Node_Tree,\n+\t\t\t      Depth_Stack);\n+      }\n+  }\n+  BICUBIC_PATCH *Create_Bicubic_Patch ()\n+  {\n+    BICUBIC_PATCH *New;\n+    New =\n+      (BICUBIC_PATCH *) pov_malloc ((sizeof (BICUBIC_PATCH)), \"bezier.cpp\",\n+\t\t\t\t    2079, (\"bicubic patch\"));\n+    New->Methods = &Bicubic_Patch_Methods;\n+  }\n+}"}]}