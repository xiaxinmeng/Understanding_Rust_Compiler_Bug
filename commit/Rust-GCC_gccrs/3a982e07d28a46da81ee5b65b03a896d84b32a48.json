{"sha": "3a982e07d28a46da81ee5b65b03a896d84b32a48", "node_id": "C_kwDOANBUbNoAKDNhOTgyZTA3ZDI4YTQ2ZGE4MWVlNWI2NWIwM2E4OTZkODRiMzJhNDg", "commit": {"author": {"name": "Pan Li", "email": "pan2.li@intel.com", "date": "2023-03-08T07:33:33Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-23T08:39:17Z"}, "message": "RISC-V: Bugfix for rvv bool mode size adjustment\n\nFix the bug of the rvv bool mode size by the adjustment.\nBesides the mode precision (aka bit size [1, 2, 4, 8, 16, 32, 64])\nof the vbool*_t, the mode size (aka byte size) will be adjusted to\n[1, 1, 1, 1, 2, 4, 8] according to the rvv spec 1.0 isa. The\nadjustment will provide correct information for the underlying\nredundant instruction elimiation.\n\nGiven the below sample code:\n{\n  vbool1_t v1 = *(vbool1_t*)in;\n  vbool64_t v2 = *(vbool64_t*)in;\n\n  *(vbool1_t*)(out + 100) = v1;\n  *(vbool64_t*)(out + 200) = v2;\n}\n\nBefore the size adjustment:\ncsrr    t0,vlenb\nslli    t1,t0,1\ncsrr    a3,vlenb\nsub     sp,sp,t1\nslli    a4,a3,1\nadd     a4,a4,sp\naddi    a2,a1,100\nvsetvli a5,zero,e8,m8,ta,ma\nsub     a3,a4,a3\nvlm.v   v24,0(a0)\nvsm.v   v24,0(a2)\nvsm.v   v24,0(a3)\naddi    a1,a1,200\ncsrr    t0,vlenb\nvsetvli a4,zero,e8,mf8,ta,ma\nslli    t1,t0,1\nvlm.v   v24,0(a3)\nvsm.v   v24,0(a1)\nadd     sp,sp,t1\njr      ra\n\nAfter the size adjustment:\naddi    a3,a1,100\nvsetvli a4,zero,e8,m8,ta,ma\naddi    a1,a1,200\nvlm.v   v24,0(a0)\nvsm.v   v24,0(a3)\nvsetvli a5,zero,e8,mf8,ta,ma\nvlm.v   v24,0(a0)\nvsm.v   v24,0(a1)\nret\n\nAdditionally, the size adjust cannot cover all possible combinations\nof the vbool*_t code pattern like above. We will take a look into it\nin another patches.\n\nPR 108185\nPR 108654\n\ngcc/ChangeLog:\n\n\tPR target/108654\n\tPR target/108185\n\t* config/riscv/riscv-modes.def (ADJUST_BYTESIZE): Adjust size\n\tfor vector mask modes.\n\t* config/riscv/riscv.cc (riscv_v_adjust_bytesize): New.\n\t* config/riscv/riscv.h (riscv_v_adjust_bytesize): New.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/108654\n\tPR target/108185\n\t* gcc.target/riscv/rvv/base/pr108185-1.c: Update.\n\t* gcc.target/riscv/rvv/base/pr108185-2.c: Ditto.\n\t* gcc.target/riscv/rvv/base/pr108185-3.c: Ditto.\n\nSigned-off-by: Pan Li <pan2.li@intel.com>\nCo-authored-by: Ju-Zhe Zhong <juzhe.zhong@rivai.ai>", "tree": {"sha": "a66f06c1ea82755e93dceea0a561181661c90f97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a66f06c1ea82755e93dceea0a561181661c90f97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a982e07d28a46da81ee5b65b03a896d84b32a48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a982e07d28a46da81ee5b65b03a896d84b32a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a982e07d28a46da81ee5b65b03a896d84b32a48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a982e07d28a46da81ee5b65b03a896d84b32a48/comments", "author": {"login": "Incarnation-p-lee", "id": 6782002, "node_id": "MDQ6VXNlcjY3ODIwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6782002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Incarnation-p-lee", "html_url": "https://github.com/Incarnation-p-lee", "followers_url": "https://api.github.com/users/Incarnation-p-lee/followers", "following_url": "https://api.github.com/users/Incarnation-p-lee/following{/other_user}", "gists_url": "https://api.github.com/users/Incarnation-p-lee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Incarnation-p-lee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Incarnation-p-lee/subscriptions", "organizations_url": "https://api.github.com/users/Incarnation-p-lee/orgs", "repos_url": "https://api.github.com/users/Incarnation-p-lee/repos", "events_url": "https://api.github.com/users/Incarnation-p-lee/events{/privacy}", "received_events_url": "https://api.github.com/users/Incarnation-p-lee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37dd1f14b6e0e7775973e0f31876066f503f5b21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37dd1f14b6e0e7775973e0f31876066f503f5b21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37dd1f14b6e0e7775973e0f31876066f503f5b21"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "4cf7cf8b1c6eb7f6f4b27d100e620e4c6a8fcc33", "filename": "gcc/config/riscv/riscv-modes.def", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a982e07d28a46da81ee5b65b03a896d84b32a48/gcc%2Fconfig%2Friscv%2Friscv-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a982e07d28a46da81ee5b65b03a896d84b32a48/gcc%2Fconfig%2Friscv%2Friscv-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-modes.def?ref=3a982e07d28a46da81ee5b65b03a896d84b32a48", "patch": "@@ -64,13 +64,13 @@ ADJUST_ALIGNMENT (VNx16BI, 1);\n ADJUST_ALIGNMENT (VNx32BI, 1);\n ADJUST_ALIGNMENT (VNx64BI, 1);\n \n-ADJUST_BYTESIZE (VNx1BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n-ADJUST_BYTESIZE (VNx2BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n-ADJUST_BYTESIZE (VNx4BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n-ADJUST_BYTESIZE (VNx8BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n-ADJUST_BYTESIZE (VNx16BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n-ADJUST_BYTESIZE (VNx32BI, riscv_vector_chunks * riscv_bytes_per_vector_chunk);\n-ADJUST_BYTESIZE (VNx64BI, riscv_v_adjust_nunits (VNx64BImode, 8));\n+ADJUST_BYTESIZE (VNx1BI, riscv_v_adjust_bytesize (VNx1BImode, 1));\n+ADJUST_BYTESIZE (VNx2BI, riscv_v_adjust_bytesize (VNx2BImode, 1));\n+ADJUST_BYTESIZE (VNx4BI, riscv_v_adjust_bytesize (VNx4BImode, 1));\n+ADJUST_BYTESIZE (VNx8BI, riscv_v_adjust_bytesize (VNx8BImode, 1));\n+ADJUST_BYTESIZE (VNx16BI, riscv_v_adjust_bytesize (VNx16BImode, 2));\n+ADJUST_BYTESIZE (VNx32BI, riscv_v_adjust_bytesize (VNx32BImode, 4));\n+ADJUST_BYTESIZE (VNx64BI, riscv_v_adjust_bytesize (VNx64BImode, 8));\n \n ADJUST_PRECISION (VNx1BI, riscv_v_adjust_precision (VNx1BImode, 1));\n ADJUST_PRECISION (VNx2BI, riscv_v_adjust_precision (VNx2BImode, 2));"}, {"sha": "76eee4a55e9c06999f458ba84df4f3cc4e1a3940", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a982e07d28a46da81ee5b65b03a896d84b32a48/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a982e07d28a46da81ee5b65b03a896d84b32a48/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=3a982e07d28a46da81ee5b65b03a896d84b32a48", "patch": "@@ -1003,6 +1003,28 @@ riscv_v_adjust_nunits (machine_mode mode, int scale)\n   return scale;\n }\n \n+/* Call from ADJUST_BYTESIZE in riscv-modes.def.  Return the correct\n+   BYTE size for corresponding machine_mode.  */\n+\n+poly_int64\n+riscv_v_adjust_bytesize (machine_mode mode, int scale)\n+{\n+  if (riscv_v_ext_vector_mode_p (mode))\n+  {\n+    poly_uint16 mode_size = GET_MODE_SIZE (mode);\n+\n+    if (maybe_eq (mode_size, (uint16_t)-1))\n+      mode_size = riscv_vector_chunks * scale;\n+\n+    if (known_gt (mode_size, BYTES_PER_RISCV_VECTOR))\n+      mode_size = BYTES_PER_RISCV_VECTOR;\n+\n+    return mode_size;\n+  }\n+\n+  return scale;\n+}\n+\n /* Call from ADJUST_PRECISION in riscv-modes.def.  Return the correct\n    PRECISION size for corresponding machine_mode.  */\n "}, {"sha": "66fb07d66521843fcab130c7640f483f8a4516ec", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a982e07d28a46da81ee5b65b03a896d84b32a48/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a982e07d28a46da81ee5b65b03a896d84b32a48/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=3a982e07d28a46da81ee5b65b03a896d84b32a48", "patch": "@@ -1026,6 +1026,7 @@ extern unsigned riscv_bytes_per_vector_chunk;\n extern poly_uint16 riscv_vector_chunks;\n extern poly_int64 riscv_v_adjust_nunits (enum machine_mode, int);\n extern poly_int64 riscv_v_adjust_precision (enum machine_mode, int);\n+extern poly_int64 riscv_v_adjust_bytesize (enum machine_mode, int);\n /* The number of bits and bytes in a RVV vector.  */\n #define BITS_PER_RISCV_VECTOR (poly_uint16 (riscv_vector_chunks * riscv_bytes_per_vector_chunk * 8))\n #define BYTES_PER_RISCV_VECTOR (poly_uint16 (riscv_vector_chunks * riscv_bytes_per_vector_chunk))"}, {"sha": "c3d0b10271a403b03013068f7b83cfd52493fd87", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr108185-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a982e07d28a46da81ee5b65b03a896d84b32a48/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a982e07d28a46da81ee5b65b03a896d84b32a48/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-1.c?ref=3a982e07d28a46da81ee5b65b03a896d84b32a48", "patch": "@@ -65,4 +65,4 @@ test_vbool1_then_vbool64(int8_t * restrict in, int8_t * restrict out) {\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*ta,\\s*ma} 1 } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*ta,\\s*ma} 1 } } */\n /* { dg-final { scan-assembler-times {vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */\n-/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 18 } } */\n+/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */"}, {"sha": "bd13ba916dae78d86b028d34cb33bb5e8f00b134", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr108185-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a982e07d28a46da81ee5b65b03a896d84b32a48/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a982e07d28a46da81ee5b65b03a896d84b32a48/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-2.c?ref=3a982e07d28a46da81ee5b65b03a896d84b32a48", "patch": "@@ -65,4 +65,4 @@ test_vbool2_then_vbool64(int8_t * restrict in, int8_t * restrict out) {\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*ta,\\s*ma} 1 } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*ta,\\s*ma} 1 } } */\n /* { dg-final { scan-assembler-times {vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */\n-/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 17 } } */\n+/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */"}, {"sha": "99928f7b1ccd3e8d33462ce9cabe44905cb8f4ce", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/pr108185-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a982e07d28a46da81ee5b65b03a896d84b32a48/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a982e07d28a46da81ee5b65b03a896d84b32a48/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fpr108185-3.c?ref=3a982e07d28a46da81ee5b65b03a896d84b32a48", "patch": "@@ -65,4 +65,4 @@ test_vbool4_then_vbool64(int8_t * restrict in, int8_t * restrict out) {\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*ta,\\s*ma} 1 } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x][0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*ta,\\s*ma} 1 } } */\n /* { dg-final { scan-assembler-times {vlm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */\n-/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 16 } } */\n+/* { dg-final { scan-assembler-times {vsm\\.v\\s+v[0-9]+,\\s*0\\([a-x][0-9]+\\)} 12 } } */"}]}