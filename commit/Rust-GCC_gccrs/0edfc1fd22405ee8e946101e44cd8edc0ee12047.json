{"sha": "0edfc1fd22405ee8e946101e44cd8edc0ee12047", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVkZmMxZmQyMjQwNWVlOGU5NDYxMDFlNDRjZDhlZGMwZWUxMjA0Nw==", "commit": {"author": {"name": "Douglas B Rupp", "email": "douglas.b.rupp@gmail.com", "date": "2020-05-31T20:25:28Z"}, "committer": {"name": "Douglas B Rupp", "email": "douglas.b.rupp@gmail.com", "date": "2020-05-31T21:32:27Z"}, "message": "Check for more missing math decls on vxworks.\n\nUse the GLIBCXX_CHECK_MATH_DECL macro to check for the full list of\nvxworks math decls.\n\nlibstdc++-v3/ChangeLog\n\n\t* crossconfig.m4 (<*-vxworks>): Check for more math decls.\n\t* configure: Rebuild.", "tree": {"sha": "d9b365cf3d9456c82f604c1beac1774462b87533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9b365cf3d9456c82f604c1beac1774462b87533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0edfc1fd22405ee8e946101e44cd8edc0ee12047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0edfc1fd22405ee8e946101e44cd8edc0ee12047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0edfc1fd22405ee8e946101e44cd8edc0ee12047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0edfc1fd22405ee8e946101e44cd8edc0ee12047/comments", "author": null, "committer": null, "parents": [{"sha": "1bb808504643e6c3c0df0fdd68a941ed2a64c7f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb808504643e6c3c0df0fdd68a941ed2a64c7f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb808504643e6c3c0df0fdd68a941ed2a64c7f0"}], "stats": {"total": 258, "additions": 257, "deletions": 1}, "files": [{"sha": "4ef678e001ed160587cb7fe27a08c618a2dd8640", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0edfc1fd22405ee8e946101e44cd8edc0ee12047/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0edfc1fd22405ee8e946101e44cd8edc0ee12047/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=0edfc1fd22405ee8e946101e44cd8edc0ee12047", "patch": "@@ -74116,6 +74116,261 @@ _ACEOF\n \n \n \n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for hypotl declaration\" >&5\n+$as_echo_n \"checking for hypotl declaration... \" >&6; }\n+if ${glibcxx_cv_func_hypotl_use+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+\n+      ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#include <math.h>\n+#ifdef HAVE_IEEEFP_H\n+# include <ieeefp.h>\n+#endif\n+#undef hypotl\n+\n+int\n+main ()\n+{\n+\n+  void (*f)(void) = (void (*)(void))hypotl;\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_func_hypotl_use=yes\n+\n+else\n+  glibcxx_cv_func_hypotl_use=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_func_hypotl_use\" >&5\n+$as_echo \"$glibcxx_cv_func_hypotl_use\" >&6; }\n+  if test \"x$glibcxx_cv_func_hypotl_use\" = xyes; then\n+    cat >>confdefs.h <<_ACEOF\n+#define HAVE_HYPOTL 1\n+_ACEOF\n+\n+  fi\n+\n+\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ldexpf declaration\" >&5\n+$as_echo_n \"checking for ldexpf declaration... \" >&6; }\n+if ${glibcxx_cv_func_ldexpf_use+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+\n+      ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#include <math.h>\n+#ifdef HAVE_IEEEFP_H\n+# include <ieeefp.h>\n+#endif\n+#undef ldexpf\n+\n+int\n+main ()\n+{\n+\n+  void (*f)(void) = (void (*)(void))ldexpf;\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_func_ldexpf_use=yes\n+\n+else\n+  glibcxx_cv_func_ldexpf_use=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_func_ldexpf_use\" >&5\n+$as_echo \"$glibcxx_cv_func_ldexpf_use\" >&6; }\n+  if test \"x$glibcxx_cv_func_ldexpf_use\" = xyes; then\n+    cat >>confdefs.h <<_ACEOF\n+#define HAVE_LDEXPF 1\n+_ACEOF\n+\n+  fi\n+\n+\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for modff declaration\" >&5\n+$as_echo_n \"checking for modff declaration... \" >&6; }\n+if ${glibcxx_cv_func_modff_use+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+\n+      ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#include <math.h>\n+#ifdef HAVE_IEEEFP_H\n+# include <ieeefp.h>\n+#endif\n+#undef modff\n+\n+int\n+main ()\n+{\n+\n+  void (*f)(void) = (void (*)(void))modff;\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_func_modff_use=yes\n+\n+else\n+  glibcxx_cv_func_modff_use=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_func_modff_use\" >&5\n+$as_echo \"$glibcxx_cv_func_modff_use\" >&6; }\n+  if test \"x$glibcxx_cv_func_modff_use\" = xyes; then\n+    cat >>confdefs.h <<_ACEOF\n+#define HAVE_MODFF 1\n+_ACEOF\n+\n+  fi\n+\n+\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for hypotf declaration\" >&5\n+$as_echo_n \"checking for hypotf declaration... \" >&6; }\n+if ${glibcxx_cv_func_hypotf_use+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+\n+      ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#include <math.h>\n+#ifdef HAVE_IEEEFP_H\n+# include <ieeefp.h>\n+#endif\n+#undef hypotf\n+\n+int\n+main ()\n+{\n+\n+  void (*f)(void) = (void (*)(void))hypotf;\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_func_hypotf_use=yes\n+\n+else\n+  glibcxx_cv_func_hypotf_use=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_func_hypotf_use\" >&5\n+$as_echo \"$glibcxx_cv_func_hypotf_use\" >&6; }\n+  if test \"x$glibcxx_cv_func_hypotf_use\" = xyes; then\n+    cat >>confdefs.h <<_ACEOF\n+#define HAVE_HYPOTF 1\n+_ACEOF\n+\n+  fi\n+\n+\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for frexpf declaration\" >&5\n+$as_echo_n \"checking for frexpf declaration... \" >&6; }\n+if ${glibcxx_cv_func_frexpf_use+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+\n+      ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#include <math.h>\n+#ifdef HAVE_IEEEFP_H\n+# include <ieeefp.h>\n+#endif\n+#undef frexpf\n+\n+int\n+main ()\n+{\n+\n+  void (*f)(void) = (void (*)(void))frexpf;\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_func_frexpf_use=yes\n+\n+else\n+  glibcxx_cv_func_frexpf_use=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_func_frexpf_use\" >&5\n+$as_echo \"$glibcxx_cv_func_frexpf_use\" >&6; }\n+  if test \"x$glibcxx_cv_func_frexpf_use\" = xyes; then\n+    cat >>confdefs.h <<_ACEOF\n+#define HAVE_FREXPF 1\n+_ACEOF\n+\n+  fi\n+\n+\n+\n     ;;\n   *)\n     as_fn_error $? \"No support for this host/target combination.\" \"$LINENO\" 5"}, {"sha": "313f84d05f49a95a4def2adfd2804b75ac52f724", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0edfc1fd22405ee8e946101e44cd8edc0ee12047/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0edfc1fd22405ee8e946101e44cd8edc0ee12047/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=0edfc1fd22405ee8e946101e44cd8edc0ee12047", "patch": "@@ -299,7 +299,8 @@ dnl # macros, in which case the tests might fail, and we might have to\n dnl # switch to more elaborate tests.\n     GLIBCXX_CHECK_MATH_DECLS([\n       acosl asinl atan2l atanl ceill cosl coshl expl fabsl floorl fmodl\n-      frexpl ldexpl log10l logl modfl powl sinl sinhl sqrtl tanl tanhl])\n+      frexpl ldexpl log10l logl modfl powl sinl sinhl sqrtl tanl tanhl hypotl\n+      ldexpf modff hypotf frexpf])\n dnl # sincosl is the only one missing here, compared with the *l\n dnl # functions in the list guarded by\n dnl # long_double_math_on_this_cpu in configure.ac, right after"}]}