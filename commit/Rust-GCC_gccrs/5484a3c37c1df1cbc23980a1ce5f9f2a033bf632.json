{"sha": "5484a3c37c1df1cbc23980a1ce5f9f2a033bf632", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ4NGEzYzM3YzFkZjFjYmMyMzk4MGExY2U1ZjlmMmEwMzNiZjYzMg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-25T22:29:48Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-25T22:29:48Z"}, "message": "simplify-rtx.c (simplify_relational_operation_1): Simplify (X^Y) == 0 as X == Y and (X^Y) != 0 as X != Y.\n\n\n\t* simplify-rtx.c (simplify_relational_operation_1):  Simplify\n\t(X^Y) == 0 as X == Y and (X^Y) != 0 as X != Y.  Simplify (X^Y) == Y\n\tas X == 0, and some symmetry related transformations.\n\tSimplify (X^C1) == C2 as X == (C1^C2).  Split long comment line.\n\nFrom-SVN: r111443", "tree": {"sha": "3639946e27528ed722acbb12268a53cb71913145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3639946e27528ed722acbb12268a53cb71913145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5484a3c37c1df1cbc23980a1ce5f9f2a033bf632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5484a3c37c1df1cbc23980a1ce5f9f2a033bf632", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5484a3c37c1df1cbc23980a1ce5f9f2a033bf632", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5484a3c37c1df1cbc23980a1ce5f9f2a033bf632/comments", "author": null, "committer": null, "parents": [{"sha": "eb8dffe0fbff242efc573fba9eff7a1da7eb893f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb8dffe0fbff242efc573fba9eff7a1da7eb893f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb8dffe0fbff242efc573fba9eff7a1da7eb893f"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "526af5d7054dae73d4ecfa0fe24abddb63a7ceb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5484a3c37c1df1cbc23980a1ce5f9f2a033bf632/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5484a3c37c1df1cbc23980a1ce5f9f2a033bf632/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5484a3c37c1df1cbc23980a1ce5f9f2a033bf632", "patch": "@@ -1,3 +1,10 @@\n+2006-02-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* simplify-rtx.c (simplify_relational_operation_1):  Simplify\n+\t(X^Y) == 0 as X == Y and (X^Y) != 0 as X != Y.  Simplify (X^Y) == Y\n+\tas X == 0, and some symmetry related transformations.\n+\tSimplify (X^C1) == C2 as X == (C1^C2).  Split long comment line.\n+\n 2006-02-25  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/23673"}, {"sha": "e84beda68b47f27128efb2b077498ac600879c53", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5484a3c37c1df1cbc23980a1ce5f9f2a033bf632/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5484a3c37c1df1cbc23980a1ce5f9f2a033bf632/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=5484a3c37c1df1cbc23980a1ce5f9f2a033bf632", "patch": "@@ -3512,7 +3512,8 @@ simplify_relational_operation_1 (enum rtx_code code, enum machine_mode mode,\n     {\n       if (INTVAL (op1) == 0 && COMPARISON_P (op0))\n \t{\n-\t  /* If op0 is a comparison, extract the comparison arguments form it.  */\n+\t  /* If op0 is a comparison, extract the comparison arguments\n+\t     from it.  */\n \t  if (code == NE)\n \t    {\n \t      if (GET_MODE (op0) == mode)\n@@ -3561,6 +3562,37 @@ simplify_relational_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t   ? simplify_gen_unary (ZERO_EXTEND, mode, op0, cmp_mode)\n \t   : lowpart_subreg (mode, op0, cmp_mode);\n \n+  /* (eq/ne (xor x y) 0) simplifies to (eq/ne x y).  */\n+  if ((code == EQ || code == NE)\n+      && op1 == const0_rtx\n+      && op0code == XOR)\n+    return simplify_gen_relational (code, mode, cmp_mode,\n+\t\t\t\t    XEXP (op0, 0), XEXP (op0, 1));\n+\n+  /* (eq/ne (xor x y) x) simplifies to (eq/ne x 0).  */\n+  if ((code == EQ || code == NE)\n+      && op0code == XOR\n+      && rtx_equal_p (XEXP (op0, 0), op1)\n+      && !side_effects_p (XEXP (op0, 1)))\n+    return simplify_gen_relational (code, mode, cmp_mode, op1, const0_rtx);\n+  /* Likewise (eq/ne (xor x y) y) simplifies to (eq/ne y 0).  */\n+  if ((code == EQ || code == NE)\n+      && op0code == XOR\n+      && rtx_equal_p (XEXP (op0, 1), op1)\n+      && !side_effects_p (XEXP (op0, 0)))\n+    return simplify_gen_relational (code, mode, cmp_mode, op1, const0_rtx);\n+\n+  /* (eq/ne (xor x C1) C2) simplifies to (eq/ne x (C1^C2)).  */\n+  if ((code == EQ || code == NE)\n+      && op0code == XOR\n+      && (GET_CODE (op1) == CONST_INT\n+\t  || GET_CODE (op1) == CONST_DOUBLE)\n+      && (GET_CODE (XEXP (op0, 1)) == CONST_INT\n+\t  || GET_CODE (XEXP (op0, 1)) == CONST_DOUBLE))\n+    return simplify_gen_relational (code, mode, cmp_mode, XEXP (op0, 0),\n+\t\t\t\t    simplify_gen_binary (XOR, cmp_mode,\n+\t\t\t\t\t\t\t XEXP (op0, 1), op1));\n+\n   return NULL_RTX;\n }\n "}]}