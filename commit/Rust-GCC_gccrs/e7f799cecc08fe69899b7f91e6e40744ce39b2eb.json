{"sha": "e7f799cecc08fe69899b7f91e6e40744ce39b2eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmNzk5Y2VjYzA4ZmU2OTg5OWI3ZjkxZTZlNDA3NDRjZTM5YjJlYg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-09-16T21:21:38Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-09-16T21:21:38Z"}, "message": "visintrin.h: New file.\n\n\t* config/sparc/visintrin.h: New file.\n\t* config.gcc: Add it to extra_headers on sparc.\n\nFrom-SVN: r178919", "tree": {"sha": "c36d4b1f7b285d42211d4696938390eb8b7451e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c36d4b1f7b285d42211d4696938390eb8b7451e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7f799cecc08fe69899b7f91e6e40744ce39b2eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f799cecc08fe69899b7f91e6e40744ce39b2eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f799cecc08fe69899b7f91e6e40744ce39b2eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f799cecc08fe69899b7f91e6e40744ce39b2eb/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5507a6c379755d2dbdcd6465943c77666eddccd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5507a6c379755d2dbdcd6465943c77666eddccd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5507a6c379755d2dbdcd6465943c77666eddccd2"}], "stats": {"total": 168, "additions": 167, "deletions": 1}, "files": [{"sha": "a5a2b00a54d60fae28b83fdb052c2c99fc05dbae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f799cecc08fe69899b7f91e6e40744ce39b2eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f799cecc08fe69899b7f91e6e40744ce39b2eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7f799cecc08fe69899b7f91e6e40744ce39b2eb", "patch": "@@ -1,3 +1,8 @@\n+2011-09-16  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/visintrin.h: New file.\n+\t* config.gcc: Add it to extra_headers on sparc.\n+\n 2011-09-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.c (ix86_expand_reduc_v4sf): Rename to ...\n@@ -19,7 +24,7 @@\n \t32-byte vector modes if TARGET_AVX.\n \n 2011-09-16  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \t* config/avr/avr.md: (umulqihi3, mulqihi3): Write as one pattern.\n \t(umulqi3_highpart, smulqi3_highpart): Ditto.\n \t(*maddqihi4.const, *umaddqihi4.uconst): Ditto."}, {"sha": "7183f269c48faa256fc7d0a4d4f3ecfe1cab425d", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f799cecc08fe69899b7f91e6e40744ce39b2eb/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f799cecc08fe69899b7f91e6e40744ce39b2eb/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e7f799cecc08fe69899b7f91e6e40744ce39b2eb", "patch": "@@ -422,6 +422,7 @@ score*-*-*)\n \t;;\n sparc*-*-*)\n \tcpu_type=sparc\n+\textra_headers=\"visintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n spu*-*-*)"}, {"sha": "5687c9b7860ff140701f42197d9e60d1d06f089e", "filename": "gcc/config/sparc/visintrin.h", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f799cecc08fe69899b7f91e6e40744ce39b2eb/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f799cecc08fe69899b7f91e6e40744ce39b2eb/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvisintrin.h?ref=e7f799cecc08fe69899b7f91e6e40744ce39b2eb", "patch": "@@ -0,0 +1,160 @@\n+/* Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _VISINTRIN_H_INCLUDED\n+#define _VISINTRIN_H_INCLUDED\n+\n+typedef int __v2si __attribute__ ((__vector_size__ (8)));\n+typedef short __v4hi __attribute__ ((__vector_size__ (8)));\n+typedef short __v2hi __attribute__ ((__vector_size__ (4)));\n+typedef char __v8qi __attribute__ ((__vector_size__ (8)));\n+typedef char __v4qi __attribute__ ((__vector_size__ (4)));\n+typedef int __i64 __attribute__ ((__mode__ (DI)));\n+\n+extern __inline void *\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_alignaddr (void *__A, long __B)\n+{\n+  return __builtin_vis_alignaddr (__A, __B);\n+}\n+\n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_faligndatadi (__i64 __A)\n+{\n+  return __builtin_vis_faligndatadi (__A);\n+}\n+\n+extern __inline __v2si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_faligndatav2si (__v2si __A)\n+{\n+  return __builtin_vis_faligndatav2si (__A);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_faligndatav4hi (__v4hi __A)\n+{\n+  return __builtin_vis_faligndatav4hi (__A);\n+}\n+\n+extern __inline __v8qi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_faligndatav8qi (__v8qi __A)\n+{\n+  return __builtin_vis_faligndatav8qi (__A);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fexpand (__v4qi __A)\n+{\n+  return __builtin_vis_fexpand (__A);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fmul8x16 (__v4qi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fmul8x16 (__A, __B);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fmul8x16au (__v4qi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fmul8x16au (__A, __B);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fmul8x16al (__v4qi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fmul8x16al (__A, __B);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fmul8sux16 (__v8qi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fmul8sux16 (__A, __B);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fmul8ulx16 (__v8qi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fmul8ulx16 (__A, __B);\n+}\n+\n+extern __inline __v2si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fmuld8sux16 (__v4qi __A, __v2hi __B)\n+{\n+  return __builtin_vis_fmuld8sux16 (__A, __B);\n+}\n+\n+extern __inline __v2si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fmuld8ulx16 (__v4qi __A, __v2hi __B)\n+{\n+  return __builtin_vis_fmuld8ulx16 (__A, __B);\n+}\n+\n+extern __inline __v4qi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpack16 (__v4hi __A)\n+{\n+  return __builtin_vis_fpack16 (__A);\n+}\n+\n+extern __inline __v8qi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpack32 (__v2si __A, __v2si __B)\n+{\n+  return __builtin_vis_fpack32 (__A, __B);\n+}\n+\n+extern __inline __v2hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpackfix (__v2si __A)\n+{\n+  return __builtin_vis_fpackfix (__A);\n+}\n+\n+extern __inline __v8qi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpmerge (__v4qi __A, __v4qi __B)\n+{\n+  return __builtin_vis_fpmerge (__A, __B);\n+}\n+\n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_pdist (__v8qi __A, __v8qi __B, __i64 __C)\n+{\n+  return __builtin_vis_pdist (__A, __B, __C);\n+}\n+\n+#endif  /* _VISINTRIN_H_INCLUDED */"}]}