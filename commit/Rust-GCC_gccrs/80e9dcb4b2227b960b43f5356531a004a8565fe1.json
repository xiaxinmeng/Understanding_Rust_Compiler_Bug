{"sha": "80e9dcb4b2227b960b43f5356531a004a8565fe1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBlOWRjYjRiMjIyN2I5NjBiNDNmNTM1NjUzMWEwMDRhODU2NWZlMQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.columbia.edu", "date": "1999-04-19T11:55:04Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-04-19T11:55:04Z"}, "message": "cpplib.c (output_line_command): Drop CONDITIONAL argument.\n\n1999-04-19 14:51 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n\t* cpplib.c (output_line_command): Drop CONDITIONAL argument.\n\tWe can omit unnecessary line commands if file_change ==\n\tsame_file and pfile->lineno != 0.  All callers changed.\n\t(cpp_get_token [case '\\n']): Don't bump pfile->lineno if\n\tCPP_OPTIONS (pfile)->no_line_commands is set.\n\t* cpplib.h: Fix prototype of output_line_command.\n\nFrom-SVN: r26547", "tree": {"sha": "ebb02ccf6b002d0d03abebf1a917eaf581d86c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebb02ccf6b002d0d03abebf1a917eaf581d86c4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80e9dcb4b2227b960b43f5356531a004a8565fe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e9dcb4b2227b960b43f5356531a004a8565fe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80e9dcb4b2227b960b43f5356531a004a8565fe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80e9dcb4b2227b960b43f5356531a004a8565fe1/comments", "author": null, "committer": null, "parents": [{"sha": "a3f406ce4c9fe47d97f951a48bc1488285f995a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f406ce4c9fe47d97f951a48bc1488285f995a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f406ce4c9fe47d97f951a48bc1488285f995a9"}], "stats": {"total": 85, "additions": 59, "deletions": 26}, "files": [{"sha": "d3dc6a26396f70cc546cbbe1c51d11276e74511f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e9dcb4b2227b960b43f5356531a004a8565fe1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e9dcb4b2227b960b43f5356531a004a8565fe1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80e9dcb4b2227b960b43f5356531a004a8565fe1", "patch": "@@ -1,3 +1,12 @@\n+1999-04-19 14:51 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* cpplib.c (output_line_command): Drop CONDITIONAL argument.\n+\tWe can omit unnecessary line commands if file_change ==\n+\tsame_file and pfile->lineno != 0.  All callers changed.\n+\t(cpp_get_token [case '\\n']): Don't bump pfile->lineno if\n+\tCPP_OPTIONS (pfile)->no_line_commands is set.\n+\t* cpplib.h: Fix prototype of output_line_command.\n+\n 1999-04-18 17:46 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n \n \t* cppfiles.c (find_position, read_and_prescan): Use `unsigned"}, {"sha": "9b2ecca459ac1c77df8897260b34854562fd3def", "filename": "gcc/cppinit.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e9dcb4b2227b960b43f5356531a004a8565fe1/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e9dcb4b2227b960b43f5356531a004a8565fe1/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=80e9dcb4b2227b960b43f5356531a004a8565fe1", "patch": "@@ -505,7 +505,7 @@ dump_special_to_buffer (pfile, macro_name)\n {\n   static char define_directive[] = \"#define \";\n   int macro_name_length = strlen (macro_name);\n-  output_line_command (pfile, 0, same_file);\n+  output_line_command (pfile, same_file);\n   CPP_RESERVE (pfile, sizeof(define_directive) + macro_name_length);\n   CPP_PUTS_Q (pfile, define_directive, sizeof(define_directive)-1);\n   CPP_PUTS_Q (pfile, macro_name, macro_name_length);\n@@ -814,7 +814,7 @@ cpp_start_read (pfile, fname)\n   while (p)\n     {\n       if (opts->debug_output)\n-\toutput_line_command (pfile, 0, same_file);\n+\toutput_line_command (pfile, same_file);\n       if (p->undef)\n \tcpp_undef (pfile, p->arg);\n       else\n@@ -829,7 +829,7 @@ cpp_start_read (pfile, fname)\n   while (p)\n     {\n       if (opts->debug_output)\n-\toutput_line_command (pfile, 0, same_file);\n+\toutput_line_command (pfile, same_file);\n       if (p->undef)\n \tcpp_unassert (pfile, p->arg);\n       else\n@@ -980,7 +980,7 @@ cpp_start_read (pfile, fname)\n   ih_fake->limit = 0;\n   if (!finclude (pfile, f, ih_fake))\n     return 0;\n-  output_line_command (pfile, 0, same_file);\n+  output_line_command (pfile, same_file);\n   pfile->only_seen_white = 2;\n \n   /* The -imacros files can be scanned now, but the -include files\n@@ -1043,7 +1043,7 @@ cpp_start_read (pfile, fname)\n       ih_fake->buf = (char *)-1;\n       ih_fake->limit = 0;\n       if (finclude (pfile, fd, ih_fake))\n-\toutput_line_command (pfile, 0, enter_file);\n+\toutput_line_command (pfile, enter_file);\n \n       q = p->next;\n       free (p);\n@@ -1094,6 +1094,25 @@ cpp_finish (pfile)\n \t    }\n \t}\n     }\n+\n+  if (opts->dump_macros == dump_only)\n+    {\n+      int i;\n+      HASHNODE *h;\n+      MACRODEF m;\n+      for (i = HASHSIZE; --i >= 0;)\n+\t{\n+\t  for (h = pfile->hashtab[i]; h; h = h->next)\n+\t    if (h->type == T_MACRO)\n+\t      {\n+\t\tm.defn = h->value.defn;\n+\t\tm.symnam = h->name;\n+\t\tm.symlen = h->length;\n+\t\tdump_definition (pfile, m);\n+\t\tCPP_PUTC (pfile, '\\n');\n+\t      }\n+\t}\n+    }\n }\n \n /* Handle one command-line option in (argc, argv)."}, {"sha": "eb43e3ba32972f10122484d1a8fa5f57a4197e43", "filename": "gcc/cpplib.c", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e9dcb4b2227b960b43f5356531a004a8565fe1/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e9dcb4b2227b960b43f5356531a004a8565fe1/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=80e9dcb4b2227b960b43f5356531a004a8565fe1", "patch": "@@ -896,19 +896,15 @@ cpp_file_buffer (pfile)\n \n /*\n  * write out a #line command, for instance, after an #include file.\n- * If CONDITIONAL is nonzero, we can omit the #line if it would\n- * appear to be a no-op, and we can output a few newlines instead\n- * if we want to increase the line number by a small amount.\n  * FILE_CHANGE says whether we are entering a file, leaving, or neither.\n  */\n \n void\n-output_line_command (pfile, conditional, file_change)\n+output_line_command (pfile, file_change)\n      cpp_reader *pfile;\n-     int conditional;\n      enum file_change_code file_change;\n {\n-  long line, col;\n+  long line;\n   cpp_buffer *ip = CPP_BUFFER (pfile);\n \n   if (ip->fname == NULL)\n@@ -918,9 +914,15 @@ output_line_command (pfile, conditional, file_change)\n       || CPP_OPTIONS (pfile)->no_output)\n     return;\n \n-  cpp_buf_line_and_col (CPP_BUFFER (pfile), &line, &col);\n+  cpp_buf_line_and_col (CPP_BUFFER (pfile), &line, NULL);\n \n-  if (conditional)\n+  /* If the current file has not changed, we omit the #line if it would\n+     appear to be a no-op, and we output a few newlines instead\n+     if we want to increase the line number by a small amount.\n+     We cannot do this if pfile->lineno is zero, because that means we\n+     haven't output any line commands yet.  (The very first line command\n+     output is a `same_file' command.)  */\n+  if (file_change == same_file && pfile->lineno != 0)\n     {\n       if (line == pfile->lineno)\n \treturn;\n@@ -1232,7 +1234,7 @@ do_include (pfile, keyword)\n \n   if (finclude (pfile, fd, ihash))\n     {\n-      output_line_command (pfile, 0, enter_file);\n+      output_line_command (pfile, enter_file);\n       pfile->only_seen_white = 2;\n     }\n \n@@ -1357,7 +1359,7 @@ do_line (pfile, keyword)\n      we must store a line number now that is one less.  */\n   ip->lineno = new_lineno - 1;\n   CPP_SET_WRITTEN (pfile, old_written);\n-  output_line_command (pfile, 0, file_change);\n+  output_line_command (pfile, file_change);\n   return 0;\n \n  bad_line_directive:\n@@ -1647,7 +1649,7 @@ do_elif (pfile, keyword)\n       skip_if_group (pfile);\n     else {\n       ++pfile->if_stack->if_succeeded;\t/* continue processing input */\n-      output_line_command (pfile, 1, same_file);\n+      output_line_command (pfile, same_file);\n     }\n   }\n   return 0;\n@@ -1786,7 +1788,7 @@ conditional_skip (pfile, skip, type, control_macro)\n     return;\n   } else {\n     ++pfile->if_stack->if_succeeded;\n-    output_line_command (pfile, 1, same_file);\n+    output_line_command (pfile, same_file);\n   }\n }\n \n@@ -1881,7 +1883,7 @@ skip_if_group (pfile)\n     {\n       CPP_PUTS (pfile, \"#failed\\n\", 8);\n       pfile->lineno++;\n-      output_line_command (pfile, 1, same_file);\n+      output_line_command (pfile, same_file);\n     }\n \n   old_written = CPP_WRITTEN (pfile);\n@@ -1986,7 +1988,7 @@ do_else (pfile, keyword)\n     skip_if_group (pfile);\n   else {\n     ++pfile->if_stack->if_succeeded;\t/* continue processing input */\n-    output_line_command (pfile, 1, same_file);\n+    output_line_command (pfile, same_file);\n   }\n   return 0;\n }\n@@ -2041,7 +2043,7 @@ do_endif (pfile, keyword)\n \t    }\n         }\n       free (temp);\n-      output_line_command (pfile, 1, same_file);\n+      output_line_command (pfile, same_file);\n     }\n   return 0;\n }\n@@ -2101,7 +2103,7 @@ cpp_get_token (pfile)\n \t      cpp_buffer *cur_buffer = CPP_BUFFER (pfile);\n \t      CPP_BUFFER (pfile) = next_buf;\n \t      pfile->input_stack_listing_current = 0;\n-\t      output_line_command (pfile, 0, leave_file);\n+\t      output_line_command (pfile, leave_file);\n \t      CPP_BUFFER (pfile) = cur_buffer;\n \t    }\n \t  return CPP_POP;\n@@ -2157,7 +2159,7 @@ cpp_get_token (pfile)\n \t      /* OK, now bring us back to the state we were in before we entered\n \t\t this branch.  We need #line because the newline for the pragma\n \t\t could mess things up.  */\n-\t      output_line_command (pfile, 0, same_file);\n+\t      output_line_command (pfile, same_file);\n \t      *(obp++) = ' ';\t/* just in case, if comments are copied thru */\n \t      *(obp++) = '/';\n \t    }\n@@ -2527,9 +2529,12 @@ cpp_get_token (pfile)\n \t  if (pfile->only_seen_white == 0)\n \t    pfile->only_seen_white = 1;\n \t  CPP_BUMP_LINE (pfile);\n-\t  pfile->lineno++;\n-\t  if (CPP_BUFFER (pfile)->lineno != pfile->lineno)\n-\t    output_line_command (pfile, 1, same_file);\n+\t  if (! CPP_OPTIONS (pfile)->no_line_commands)\n+\t    {\n+\t      pfile->lineno++;\n+\t      if (CPP_BUFFER (pfile)->lineno != pfile->lineno)\n+\t\toutput_line_command (pfile, same_file);\n+\t    }\n \t  return CPP_VSPACE;\n \n \tcase '(': token = CPP_LPAREN;    goto char1;"}, {"sha": "45f025e9717e299dc4942b45699d57d10b580b01", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80e9dcb4b2227b960b43f5356531a004a8565fe1/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80e9dcb4b2227b960b43f5356531a004a8565fe1/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=80e9dcb4b2227b960b43f5356531a004a8565fe1", "patch": "@@ -726,7 +726,7 @@ extern int check_macro_name\t\tPARAMS ((cpp_reader *, U_CHAR *, int));\n \n /* Last arg to output_line_command.  */\n enum file_change_code {same_file, enter_file, leave_file};\n-extern void output_line_command\t\tPARAMS ((cpp_reader *, int,\n+extern void output_line_command\t\tPARAMS ((cpp_reader *,\n \t\t\t\t\t\t enum file_change_code));\n \n /* From cpperror.c */"}]}