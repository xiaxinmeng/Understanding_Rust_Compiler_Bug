{"sha": "0889c5c3faa0eb0915f6b5e5092060888a9efec6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg4OWM1YzNmYWEwZWIwOTE1ZjZiNWU1MDkyMDYwODg4YTllZmVjNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-10-12T12:14:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-10-12T12:14:48Z"}, "message": "tree-streamer-out.c (pack_ts_target_option): Rename from ...\n\n2012-10-12  Richard Biener  <rguenther@suse.de>\n\n\t* tree-streamer-out.c (pack_ts_target_option): Rename from ...\n\t(write_ts_target_option): ... this.\n\t(pack_ts_optimization): Rename from ...\n\t(write_ts_optimization): ... this.\n\t(streamer_pack_tree_bitfields): Pack them in the bitfield section ...\n\t(streamer_write_tree_body): ... not here.\n\t* tree-streamer-in.c (unpack_ts_target_option): Rename from ...\n\t(lto_input_ts_target_option): ... this.\n\t(unpack_ts_optimization): Rename from ...\n\t(lto_input_ts_optimization): ... this.\n\t(unpack_value_fields): Unpack them from the bitfield section ...\n\t(streamer_read_tree_body): ... not from here.\n\nFrom-SVN: r192398", "tree": {"sha": "c984d5bf61b729a9977d8afce864a8758acf87d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c984d5bf61b729a9977d8afce864a8758acf87d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0889c5c3faa0eb0915f6b5e5092060888a9efec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0889c5c3faa0eb0915f6b5e5092060888a9efec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0889c5c3faa0eb0915f6b5e5092060888a9efec6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0889c5c3faa0eb0915f6b5e5092060888a9efec6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aec06f6fa8948de6eb8e23028b5ebf4e5fd3e36a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec06f6fa8948de6eb8e23028b5ebf4e5fd3e36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec06f6fa8948de6eb8e23028b5ebf4e5fd3e36a"}], "stats": {"total": 182, "additions": 94, "deletions": 88}, "files": [{"sha": "2084d916fb490ecaac1efeb2dc280ee77f1fe273", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0889c5c3faa0eb0915f6b5e5092060888a9efec6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0889c5c3faa0eb0915f6b5e5092060888a9efec6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0889c5c3faa0eb0915f6b5e5092060888a9efec6", "patch": "@@ -1,3 +1,18 @@\n+2012-10-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-streamer-out.c (pack_ts_target_option): Rename from ...\n+\t(write_ts_target_option): ... this.\n+\t(pack_ts_optimization): Rename from ...\n+\t(write_ts_optimization): ... this.\n+\t(streamer_pack_tree_bitfields): Pack them in the bitfield section ...\n+\t(streamer_write_tree_body): ... not here.\n+\t* tree-streamer-in.c (unpack_ts_target_option): Rename from ...\n+\t(lto_input_ts_target_option): ... this.\n+\t(unpack_ts_optimization): Rename from ...\n+\t(lto_input_ts_optimization): ... this.\n+\t(unpack_value_fields): Unpack them from the bitfield section ...\n+\t(streamer_read_tree_body): ... not from here.\n+\n 2012-10-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.md (vecmodesuffix): New mode attribute."}, {"sha": "f77a66933f230df57089d0715dc2f8c8af14c87c", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0889c5c3faa0eb0915f6b5e5092060888a9efec6/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0889c5c3faa0eb0915f6b5e5092060888a9efec6/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=0889c5c3faa0eb0915f6b5e5092060888a9efec6", "patch": "@@ -370,6 +370,37 @@ unpack_ts_translation_unit_decl_value_fields (struct bitpack_d *bp ATTRIBUTE_UNU\n {\n }\n \n+/* Unpack a TS_TARGET_OPTION tree from BP into EXPR.  */\n+\n+static void\n+unpack_ts_target_option (struct bitpack_d *bp, tree expr)\n+{\n+  unsigned i, len;\n+  struct cl_target_option *t = TREE_TARGET_OPTION (expr);\n+\n+  len = sizeof (struct cl_target_option);\n+  for (i = 0; i < len; i++)\n+    ((unsigned char *)t)[i] = bp_unpack_value (bp, 8);\n+  if (bp_unpack_value (bp, 32) != 0x12345678)\n+    fatal_error (\"cl_target_option size mismatch in LTO reader and writer\");\n+}\n+\n+/* Unpack a TS_OPTIMIZATION tree from BP into EXPR.  */\n+\n+static void\n+unpack_ts_optimization (struct bitpack_d *bp, tree expr)\n+{\n+  unsigned i, len;\n+  struct cl_optimization *t = TREE_OPTIMIZATION (expr);\n+\n+  len = sizeof (struct cl_optimization);\n+  for (i = 0; i < len; i++)\n+    ((unsigned char *)t)[i] = bp_unpack_value (bp, 8);\n+  if (bp_unpack_value (bp, 32) != 0x12345678)\n+    fatal_error (\"cl_optimization size mismatch in LTO reader and writer\");\n+}\n+\n+\n /* Unpack all the non-pointer fields in EXPR into a bit pack.  */\n \n static void\n@@ -415,6 +446,12 @@ unpack_value_fields (struct data_in *data_in, struct bitpack_d *bp, tree expr)\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n     unpack_ts_translation_unit_decl_value_fields (bp, expr);\n+\n+  if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n+    unpack_ts_target_option (bp, expr);\n+\n+  if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n+    unpack_ts_optimization (bp, expr);\n }\n \n \n@@ -900,40 +937,6 @@ lto_input_ts_constructor_tree_pointers (struct lto_input_block *ib,\n }\n \n \n-/* Input a TS_TARGET_OPTION tree from IB into EXPR.  */\n-\n-static void\n-lto_input_ts_target_option (struct lto_input_block *ib, tree expr)\n-{\n-  unsigned i, len;\n-  struct bitpack_d bp;\n-  struct cl_target_option *t = TREE_TARGET_OPTION (expr);\n-\n-  bp = streamer_read_bitpack (ib);\n-  len = sizeof (struct cl_target_option);\n-  for (i = 0; i < len; i++)\n-    ((unsigned char *)t)[i] = bp_unpack_value (&bp, 8);\n-  if (bp_unpack_value (&bp, 32) != 0x12345678)\n-    fatal_error (\"cl_target_option size mismatch in LTO reader and writer\");\n-}\n-\n-/* Input a TS_OPTIMIZATION tree from IB into EXPR.  */\n-\n-static void\n-lto_input_ts_optimization (struct lto_input_block *ib, tree expr)\n-{\n-  unsigned i, len;\n-  struct bitpack_d bp;\n-  struct cl_optimization *t = TREE_OPTIMIZATION (expr);\n-\n-  bp = streamer_read_bitpack (ib);\n-  len = sizeof (struct cl_optimization);\n-  for (i = 0; i < len; i++)\n-    ((unsigned char *)t)[i] = bp_unpack_value (&bp, 8);\n-  if (bp_unpack_value (&bp, 32) != 0x12345678)\n-    fatal_error (\"cl_optimization size mismatch in LTO reader and writer\");\n-}\n-\n /* Input a TS_TRANSLATION_UNIT_DECL tree from IB and DATA_IN into EXPR.  */\n \n static void\n@@ -1007,12 +1010,6 @@ streamer_read_tree_body (struct lto_input_block *ib, struct data_in *data_in,\n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     lto_input_ts_constructor_tree_pointers (ib, data_in, expr);\n \n-  if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n-    lto_input_ts_target_option (ib, expr);\n-\n-  if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n-    lto_input_ts_optimization (ib, expr);\n-\n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n     lto_input_ts_translation_unit_decl_tree_pointers (ib, data_in, expr);\n }"}, {"sha": "fc70eb9f856b7006b37c727051d7fb2ff2fe3628", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 42, "deletions": 48, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0889c5c3faa0eb0915f6b5e5092060888a9efec6/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0889c5c3faa0eb0915f6b5e5092060888a9efec6/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=0889c5c3faa0eb0915f6b5e5092060888a9efec6", "patch": "@@ -320,6 +320,42 @@ pack_ts_translation_unit_decl_value_fields (struct bitpack_d *bp ATTRIBUTE_UNUSE\n {\n }\n \n+/* Pack a TS_TARGET_OPTION tree in EXPR to BP.  */\n+\n+static void\n+pack_ts_target_option (struct bitpack_d *bp, tree expr)\n+{\n+  struct cl_target_option *t = TREE_TARGET_OPTION (expr);\n+  unsigned i, len;\n+\n+  /* The cl_target_option is target specific and generated by the options\n+     awk script, so we just recreate a byte-by-byte copy here. */\n+\n+  len = sizeof (struct cl_target_option);\n+  for (i = 0; i < len; i++)\n+    bp_pack_value (bp, ((unsigned char *)t)[i], 8);\n+  /* Catch struct size mismatches between reader and writer. */\n+  bp_pack_value (bp, 0x12345678, 32);\n+}\n+\n+/* Pack a TS_OPTIMIZATION tree in EXPR to BP.  */\n+\n+static void\n+pack_ts_optimization (struct bitpack_d *bp, tree expr)\n+{\n+  struct cl_optimization *t = TREE_OPTIMIZATION (expr);\n+  unsigned i, len;\n+\n+  /* The cl_optimization is generated by the options\n+     awk script, so we just recreate a byte-by-byte copy here. */\n+\n+  len = sizeof (struct cl_optimization);\n+  for (i = 0; i < len; i++)\n+    bp_pack_value (bp, ((unsigned char *)t)[i], 8);\n+  /* Catch struct size mismatches between reader and writer. */\n+  bp_pack_value (bp, 0x12345678, 32);\n+}\n+\n \n /* Pack all the bitfields in EXPR into a bit pack.  */\n \n@@ -367,6 +403,12 @@ streamer_pack_tree_bitfields (struct output_block *ob,\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n     pack_ts_translation_unit_decl_value_fields (bp, expr);\n+\n+  if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n+    pack_ts_target_option (bp, expr);\n+\n+  if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n+    pack_ts_optimization (bp, expr);\n }\n \n \n@@ -773,48 +815,6 @@ write_ts_constructor_tree_pointers (struct output_block *ob, tree expr,\n     }\n }\n \n-/* Write a TS_TARGET_OPTION tree in EXPR to OB.  */\n-\n-static void\n-write_ts_target_option (struct output_block *ob, tree expr)\n-{\n-  struct cl_target_option *t = TREE_TARGET_OPTION (expr);\n-  struct bitpack_d bp;\n-  unsigned i, len;\n-\n-  /* The cl_target_option is target specific and generated by the options\n-     awk script, so we just recreate a byte-by-byte copy here. */\n-\n-  bp = bitpack_create (ob->main_stream);\n-  len = sizeof (struct cl_target_option);\n-  for (i = 0; i < len; i++)\n-    bp_pack_value (&bp, ((unsigned char *)t)[i], 8);\n-  /* Catch struct size mismatches between reader and writer. */\n-  bp_pack_value (&bp, 0x12345678, 32);\n-  streamer_write_bitpack (&bp);\n-}\n-\n-/* Write a TS_OPTIMIZATION tree in EXPR to OB.  */\n-\n-static void\n-write_ts_optimization (struct output_block *ob, tree expr)\n-{\n-  struct cl_optimization *t = TREE_OPTIMIZATION (expr);\n-  struct bitpack_d bp;\n-  unsigned i, len;\n-\n-  /* The cl_optimization is generated by the options\n-     awk script, so we just recreate a byte-by-byte copy here. */\n-\n-  bp = bitpack_create (ob->main_stream);\n-  len = sizeof (struct cl_optimization);\n-  for (i = 0; i < len; i++)\n-    bp_pack_value (&bp, ((unsigned char *)t)[i], 8);\n-  /* Catch struct size mismatches between reader and writer. */\n-  bp_pack_value (&bp, 0x12345678, 32);\n-  streamer_write_bitpack (&bp);\n-}\n-\n /* Write a TS_TRANSLATION_UNIT_DECL tree in EXPR to OB.  */\n \n static void\n@@ -886,12 +886,6 @@ streamer_write_tree_body (struct output_block *ob, tree expr, bool ref_p)\n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     write_ts_constructor_tree_pointers (ob, expr, ref_p);\n \n-  if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n-    write_ts_target_option (ob, expr);\n-\n-  if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n-    write_ts_optimization (ob, expr);\n-\n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n     write_ts_translation_unit_decl_tree_pointers (ob, expr);\n }"}]}