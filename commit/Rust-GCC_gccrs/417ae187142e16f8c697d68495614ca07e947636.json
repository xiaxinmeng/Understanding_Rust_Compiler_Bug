{"sha": "417ae187142e16f8c697d68495614ca07e947636", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE3YWUxODcxNDJlMTZmOGM2OTdkNjg0OTU2MTRjYTA3ZTk0NzYzNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-29T21:19:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-29T21:19:31Z"}, "message": "DR 1207 PR c++/49003\n\n\tDR 1207\n\tPR c++/49003\n\t* cp-tree.h (struct saved_scope): Add x_current_class_ptr,\n\tx_current_class_ref.\n\t(current_class_ptr, current_class_ref): Use them.\n\t* decl.c (build_this_parm): Handle getting the class type.\n\t* parser.c (cp_parser_late_return_type_opt): Set up 'this'\n\tfor use within the trailing return type.\n\nFrom-SVN: r175671", "tree": {"sha": "75c88014994e59c28429b6a5dced3b345cb8ed38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75c88014994e59c28429b6a5dced3b345cb8ed38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/417ae187142e16f8c697d68495614ca07e947636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417ae187142e16f8c697d68495614ca07e947636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/417ae187142e16f8c697d68495614ca07e947636", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417ae187142e16f8c697d68495614ca07e947636/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fe98897323ab6672dcfb765272fbdb2bdab1015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe98897323ab6672dcfb765272fbdb2bdab1015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe98897323ab6672dcfb765272fbdb2bdab1015"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "c5751bd1a4150d4a0acb60a1941a29701caa151e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ae187142e16f8c697d68495614ca07e947636/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ae187142e16f8c697d68495614ca07e947636/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=417ae187142e16f8c697d68495614ca07e947636", "patch": "@@ -1,5 +1,14 @@\n 2011-06-29  Jason Merrill  <jason@redhat.com>\n \n+\tDR 1207\n+\tPR c++/49003\n+\t* cp-tree.h (struct saved_scope): Add x_current_class_ptr,\n+\tx_current_class_ref.\n+\t(current_class_ptr, current_class_ref): Use them.\n+\t* decl.c (build_this_parm): Handle getting the class type.\n+\t* parser.c (cp_parser_late_return_type_opt): Set up 'this'\n+\tfor use within the trailing return type.\n+\n \t* pt.c (tsubst_decl) [VAR_DECL]: In unevaluated operand,\n \tdon't tsubst DECL_INITIAL unless our type use auto.\n "}, {"sha": "ef25c97aafbfc5684ef83bb49dcd370fb9a4aab9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ae187142e16f8c697d68495614ca07e947636/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ae187142e16f8c697d68495614ca07e947636/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=417ae187142e16f8c697d68495614ca07e947636", "patch": "@@ -953,6 +953,10 @@ struct GTY(()) saved_scope {\n   struct cp_binding_level *x_previous_class_level;\n   tree x_saved_tree;\n \n+  /* Only used for uses of this in trailing return type.  */\n+  tree x_current_class_ptr;\n+  tree x_current_class_ref;\n+\n   int x_processing_template_decl;\n   int x_processing_specialization;\n   BOOL_BITFIELD x_processing_explicit_instantiation : 1;\n@@ -1070,12 +1074,14 @@ struct GTY(()) language_function {\n    PARM_DECL for the `this' pointer.  The current_class_ref is an\n    expression for `*this'.  */\n \n-#define current_class_ptr \\\n-  (cfun && cp_function_chain\t\t\t\t\t\\\n-   ? cp_function_chain->x_current_class_ptr : NULL_TREE)\n-#define current_class_ref \\\n-  ((cfun && cp_function_chain)                                  \\\n-   ? cp_function_chain->x_current_class_ref : NULL_TREE)\n+#define current_class_ptr\t\t\t\\\n+  (*(cfun && cp_function_chain\t\t\t\\\n+     ? &cp_function_chain->x_current_class_ptr\t\\\n+     : &scope_chain->x_current_class_ptr))\n+#define current_class_ref\t\t\t\\\n+  (*(cfun && cp_function_chain\t\t\t\\\n+     ? &cp_function_chain->x_current_class_ref\t\\\n+     : &scope_chain->x_current_class_ref))\n \n /* The EH_SPEC_BLOCK for the exception-specifiers for the current\n    function, if any.  */"}, {"sha": "94d686d3aefc1253c42fa63279d8e702bb076c7d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ae187142e16f8c697d68495614ca07e947636/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ae187142e16f8c697d68495614ca07e947636/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=417ae187142e16f8c697d68495614ca07e947636", "patch": "@@ -7001,7 +7001,14 @@ build_this_parm (tree type, cp_cv_quals quals)\n   tree parm;\n   cp_cv_quals this_quals;\n \n-  this_type = type_of_this_parm (type);\n+  if (CLASS_TYPE_P (type))\n+    {\n+      this_type\n+\t= cp_build_qualified_type (type, quals & ~TYPE_QUAL_RESTRICT);\n+      this_type = build_pointer_type (this_type);\n+    }\n+  else\n+    this_type = type_of_this_parm (type);\n   /* The `this' parameter is implicitly `const'; it cannot be\n      assigned to.  */\n   this_quals = (quals & TYPE_QUAL_RESTRICT) | TYPE_QUAL_CONST;\n@@ -12675,6 +12682,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \n       cp_function_chain->x_current_class_ref\n \t= cp_build_indirect_ref (t, RO_NULL, tf_warning_or_error);\n+      /* Set this second to avoid shortcut in cp_build_indirect_ref.  */\n       cp_function_chain->x_current_class_ptr = t;\n \n       /* Constructors and destructors need to know whether they're \"in"}, {"sha": "d79326d2808bf8322fa50306c17b7ff68cbab880", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ae187142e16f8c697d68495614ca07e947636/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ae187142e16f8c697d68495614ca07e947636/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=417ae187142e16f8c697d68495614ca07e947636", "patch": "@@ -1696,7 +1696,7 @@ static cp_cv_quals cp_parser_cv_qualifier_seq_opt\n static cp_virt_specifiers cp_parser_virt_specifier_seq_opt\n   (cp_parser *);\n static tree cp_parser_late_return_type_opt\n-  (cp_parser *);\n+  (cp_parser *, cp_cv_quals);\n static tree cp_parser_declarator_id\n   (cp_parser *, bool);\n static tree cp_parser_type_id\n@@ -14968,7 +14968,7 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t  virt_specifiers = cp_parser_virt_specifier_seq_opt (parser);\n \n \t\t  late_return\n-\t\t    = cp_parser_late_return_type_opt (parser);\n+\t\t    = cp_parser_late_return_type_opt (parser, cv_quals);\n \n \t\t  /* Create the function-declarator.  */\n \t\t  declarator = make_call_declarator (declarator,\n@@ -15537,9 +15537,10 @@ cp_parser_virt_specifier_seq_opt (cp_parser* parser)\n    Returns the type indicated by the type-id.  */\n \n static tree\n-cp_parser_late_return_type_opt (cp_parser* parser)\n+cp_parser_late_return_type_opt (cp_parser* parser, cp_cv_quals quals)\n {\n   cp_token *token;\n+  tree type;\n \n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n@@ -15550,7 +15551,23 @@ cp_parser_late_return_type_opt (cp_parser* parser)\n   /* Consume the ->.  */\n   cp_lexer_consume_token (parser->lexer);\n \n-  return cp_parser_trailing_type_id (parser);\n+  if (current_class_type)\n+    {\n+      /* DR 1207: 'this' is in scope in the trailing return type.  */\n+      tree this_parm = build_this_parm (current_class_type, quals);\n+      gcc_assert (current_class_ptr == NULL_TREE);\n+      current_class_ref\n+\t= cp_build_indirect_ref (this_parm, RO_NULL, tf_warning_or_error);\n+      /* Set this second to avoid shortcut in cp_build_indirect_ref.  */\n+      current_class_ptr = this_parm;\n+    }\n+\n+  type = cp_parser_trailing_type_id (parser);\n+\n+  if (current_class_type)\n+    current_class_ptr = current_class_ref = NULL_TREE;\n+\n+  return type;\n }\n \n /* Parse a declarator-id."}, {"sha": "da5b817620da4a5856650fb7d815f435fe866991", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ae187142e16f8c697d68495614ca07e947636/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ae187142e16f8c697d68495614ca07e947636/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=417ae187142e16f8c697d68495614ca07e947636", "patch": "@@ -1,5 +1,9 @@\n 2011-06-29  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49003\n+\t* g++.dg/cpp0x/trailing6.C: New.\n+\t* g++.dg/cpp0x/pr45908.C: No error.\n+\n \tPR c++/49272\n \t* g++.old-deja/g++.jason/rfg10.C: Accept other overflow error too.\n "}, {"sha": "45399b5395fbd7ef6935ff61cd6441a41fa75c69", "filename": "gcc/testsuite/g++.dg/cpp0x/pr45908.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ae187142e16f8c697d68495614ca07e947636/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr45908.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ae187142e16f8c697d68495614ca07e947636/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr45908.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr45908.C?ref=417ae187142e16f8c697d68495614ca07e947636", "patch": "@@ -14,5 +14,5 @@ struct vector {\n class block {\n     vector v;\n     auto end() const -> decltype(v.begin())\n-    { return v.begin(); } // { dg-error \"could not convert\" }\n+    { return v.begin(); }\n };"}, {"sha": "3476e90e580560cfb10858a2928f90f5ffb797ae", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing6.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/417ae187142e16f8c697d68495614ca07e947636/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/417ae187142e16f8c697d68495614ca07e947636/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing6.C?ref=417ae187142e16f8c697d68495614ca07e947636", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/49003\n+// { dg-options -std=c++0x }\n+\n+struct A {\n+    auto a() const -> decltype(this) { return this; }\n+};"}]}