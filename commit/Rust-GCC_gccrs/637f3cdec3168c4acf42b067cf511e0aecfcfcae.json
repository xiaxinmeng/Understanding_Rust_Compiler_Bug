{"sha": "637f3cdec3168c4acf42b067cf511e0aecfcfcae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM3ZjNjZGVjMzE2OGM0YWNmNDJiMDY3Y2Y1MTFlMGFlY2ZjZmNhZQ==", "commit": {"author": {"name": "Pekka J\u00e4\u00e4skel\u00e4inen", "email": "pekka.jaaskelainen@parmance.com", "date": "2018-05-04T16:44:02Z"}, "committer": {"name": "Pekka J\u00e4\u00e4skel\u00e4inen", "email": "visit0r@gcc.gnu.org", "date": "2018-05-04T16:44:02Z"}, "message": "[BRIGFE] Enable whole program optimizations\n\nHSA assumes all program scope HSAIL symbols can be queried from\nthe host runtime API, thus cannot be removed by the IPA.\n\nGetting some inlining happening in the finalized binary required:\n* explicitly marking the 'prog' scope functions and the launcher\nfunction \"externally_visible\" to avoid the inliner removing it\n* also the host_def ptr is set to externally visible, otherwise\nIPA assumes it's never set\n* adding the 'inline' keyword to functions to enable inlining,\notherwise GCC defaults to replaceable functions (one can link\nover the previous one) which cannot be inlined\n* replacing all calls to declarations with calls to definitions to\nenable the inliner to find the definition\n* to fix missing hidden argument types in the generated functions.\nThese were ignored silently until GCC started to be able to\ninline calls to such functions.\n* do not gimplify before fixing the call targets. Otherwise the\ncalls get detached and the definitions are not found. The reason\nwhy this happens is not clear, but gimplifying only after call\ntarget decl->def conversion fixes this.\n\nFrom-SVN: r259943", "tree": {"sha": "80d215262b7bd5f8483b0fb4fd5c18c1c691b01b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80d215262b7bd5f8483b0fb4fd5c18c1c691b01b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/637f3cdec3168c4acf42b067cf511e0aecfcfcae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637f3cdec3168c4acf42b067cf511e0aecfcfcae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/637f3cdec3168c4acf42b067cf511e0aecfcfcae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637f3cdec3168c4acf42b067cf511e0aecfcfcae/comments", "author": {"login": "pjaaskel", "id": 1652632, "node_id": "MDQ6VXNlcjE2NTI2MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1652632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pjaaskel", "html_url": "https://github.com/pjaaskel", "followers_url": "https://api.github.com/users/pjaaskel/followers", "following_url": "https://api.github.com/users/pjaaskel/following{/other_user}", "gists_url": "https://api.github.com/users/pjaaskel/gists{/gist_id}", "starred_url": "https://api.github.com/users/pjaaskel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pjaaskel/subscriptions", "organizations_url": "https://api.github.com/users/pjaaskel/orgs", "repos_url": "https://api.github.com/users/pjaaskel/repos", "events_url": "https://api.github.com/users/pjaaskel/events{/privacy}", "received_events_url": "https://api.github.com/users/pjaaskel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b40975c87503035f4a1647f959740369f9f3aed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b40975c87503035f4a1647f959740369f9f3aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b40975c87503035f4a1647f959740369f9f3aed"}], "stats": {"total": 144, "additions": 130, "deletions": 14}, "files": [{"sha": "57d44b71e367893bae2c53bf2a979dc374e543ca", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=637f3cdec3168c4acf42b067cf511e0aecfcfcae", "patch": "@@ -1,3 +1,14 @@\n+2018-05-04  Pekka J\u00e4\u00e4skel\u00e4inen  <pekka.jaaskelainen@parmance.com>\n+\n+\t* brig/brig-lang.c: Add support for whole program\n+\toptimizations by marking the kernels externally visible.\n+\t* brig/brigfrontend/brig-branch-inst-handler.cc: See above.\n+\t* brig/brigfrontend/brig-function-handler.cc: See above.\n+\t* brig/brigfrontend/brig-function.cc: See above.\n+\t* brig/brigfrontend/brig-to-generic.cc: See above.\n+\t* brig/brigfrontend/brig-to-generic.h: See above.\n+\t* brig/brigfrontend/brig-variable-handler.h: See above.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "030d76a745e403ba5ecb913f2afa9aa821c70fc1", "filename": "gcc/brig/brig-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrig-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrig-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrig-lang.c?ref=637f3cdec3168c4acf42b067cf511e0aecfcfcae", "patch": "@@ -57,7 +57,7 @@ static tree handle_pure_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nothrow_attribute (tree *, tree, tree, int, bool *);\n static tree handle_returns_twice_attribute (tree *, tree, tree, int, bool *);\n \n-/* This file is based on Go frontent'd go-lang.c and gogo-tree.cc.  */\n+/* This file is based on Go frontend's go-lang.c and gogo-tree.cc.  */\n \n /* If -v set.  */\n \n@@ -123,7 +123,7 @@ brig_langhook_init_options_struct (struct gcc_options *opts)\n   /* If we set this to one, the whole program optimizations internalize\n      all global variables, making them invisible to the dyn loader (and\n      thus the HSA runtime implementation).  */\n-  opts->x_flag_whole_program = 0;\n+  opts->x_flag_whole_program = 1;\n \n   /* The builtin math functions should not set errno.  */\n   opts->x_flag_errno_math = 0;"}, {"sha": "1340b74dd35f442728184c3f8ffe8e5e36911a73", "filename": "gcc/brig/brigfrontend/brig-branch-inst-handler.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-branch-inst-handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-branch-inst-handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-branch-inst-handler.cc?ref=637f3cdec3168c4acf42b067cf511e0aecfcfcae", "patch": "@@ -150,6 +150,8 @@ brig_branch_inst_handler::operator () (const BrigBase *base)\n \t}\n \n       m_parent.m_cf->m_called_functions.push_back (func_ref);\n+      if (DECL_EXTERNAL (func_ref))\n+\tm_parent.add_decl_call (call);\n \n       return base->byteCount;\n     }"}, {"sha": "c524dbe092affafb4e50154218f6708d58d4a2f5", "filename": "gcc/brig/brigfrontend/brig-function-handler.cc", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-function-handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-function-handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-function-handler.cc?ref=637f3cdec3168c4acf42b067cf511e0aecfcfcae", "patch": "@@ -132,6 +132,14 @@ brig_directive_function_handler::operator () (const BrigBase *base)\n       DECL_RESULT (fndecl) = resdecl;\n       DECL_CONTEXT (resdecl) = fndecl;\n       DECL_EXTERNAL (fndecl) = 0;\n+\n+      /* Aggressive inlining to the kernel function is usually a good\n+\t idea with offlined functionality to enchance SIMD execution on\n+\t GPUs and vector units.  */\n+\n+      DECL_ATTRIBUTES (fndecl)\n+\t= tree_cons (get_identifier (\"flatten\"), NULL,\n+\t\t     DECL_ATTRIBUTES (fndecl));\n     }\n   else\n     {\n@@ -228,6 +236,8 @@ brig_directive_function_handler::operator () (const BrigBase *base)\n \n       vec_safe_push (args, ptr_type_node);\n       vec_safe_push (args, ptr_type_node);\n+      vec_safe_push (args, ptr_type_node);\n+      vec_safe_push (args, ptr_type_node);\n \n       fndecl = build_decl (UNKNOWN_LOCATION, FUNCTION_DECL, name_identifier,\n \t\t\t   build_function_type_vec (ret_type, args));\n@@ -295,21 +305,21 @@ brig_directive_function_handler::operator () (const BrigBase *base)\n \n   DECL_SAVED_TREE (fndecl) = bind_expr;\n \n-  /* Try to preserve the functions across IPA.  */\n-  DECL_PRESERVE_P (fndecl) = 1;\n-  TREE_SIDE_EFFECTS (fndecl) = 1;\n-\n-  TREE_ADDRESSABLE (fndecl) = 1;\n+  set_externally_visible (fndecl);\n \n   if (base->kind == BRIG_KIND_DIRECTIVE_FUNCTION)\n     {\n-      TREE_STATIC (fndecl) = 1;\n+      TREE_STATIC (fndecl) = 0;\n       TREE_PUBLIC (fndecl) = 1;\n+      DECL_EXTERNAL (fndecl) = 0;\n+      DECL_DECLARED_INLINE_P (fndecl) = 1;\n     }\n   else if (base->kind == BRIG_KIND_DIRECTIVE_KERNEL)\n     {\n-      TREE_STATIC (fndecl) = 1;\n+      TREE_STATIC (fndecl) = 0;\n       TREE_PUBLIC (fndecl) = 1;\n+      DECL_EXTERNAL (fndecl) = 0;\n+      set_externally_visible (fndecl);\n     }\n   else if (base->kind == BRIG_KIND_DIRECTIVE_SIGNATURE)\n     {\n@@ -349,8 +359,12 @@ brig_directive_function_handler::operator () (const BrigBase *base)\n   m_parent.add_function_decl (func_name, fndecl);\n   m_parent.append_global (fndecl);\n \n+\n   if (!is_definition)\n-    return bytes_consumed;\n+    {\n+      DECL_EXTERNAL (fndecl) = 1;\n+      return bytes_consumed;\n+    }\n \n   m_parent.start_function (fndecl);\n "}, {"sha": "e1a14da8b72efec7b2477ec62844e0e35ddbc49a", "filename": "gcc/brig/brigfrontend/brig-function.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-function.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-function.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-function.cc?ref=637f3cdec3168c4acf42b067cf511e0aecfcfcae", "patch": "@@ -589,7 +589,7 @@ brig_function::emit_launcher_and_metadata ()\n \n   tree bind_expr = build3 (BIND_EXPR, void_type_node, NULL, stmt_list, NULL);\n \n-  TREE_STATIC (launcher) = 0;\n+  TREE_STATIC (launcher) = 1;\n   TREE_PUBLIC (launcher) = 1;\n \n   DECL_SAVED_TREE (launcher) = bind_expr;\n@@ -633,6 +633,8 @@ brig_function::emit_launcher_and_metadata ()\n \n   emit_metadata (stmt_list);\n \n+  set_externally_visible (launcher);\n+\n   return launcher;\n }\n "}, {"sha": "ee212b1f7b41b60f1ca36d954fae6fe4f4865de7", "filename": "gcc/brig/brigfrontend/brig-to-generic.cc", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.cc?ref=637f3cdec3168c4acf42b067cf511e0aecfcfcae", "patch": "@@ -52,6 +52,7 @@\n #include \"cgraph.h\"\n #include \"dumpfile.h\"\n #include \"tree-pretty-print.h\"\n+#include \"attribs.h\"\n \n extern int gccbrig_verbose;\n \n@@ -487,7 +488,9 @@ brig_to_generic::add_global_variable (const std::string &name, tree var_decl)\n   tree var_addr = build1 (ADDR_EXPR, ptype, var_decl);\n \n   DECL_INITIAL (host_def_var) = var_addr;\n-  TREE_PUBLIC (host_def_var) = 0;\n+  TREE_PUBLIC (host_def_var) = 1;\n+\n+  set_externally_visible (host_def_var);\n }\n \n /* Adds an indirection pointer for a potential host-defined program scope\n@@ -510,10 +513,18 @@ brig_to_generic::add_host_def_var_ptr (const std::string &name, tree var_decl)\n   TREE_ADDRESSABLE (ptr_var) = 1;\n   TREE_STATIC (ptr_var) = 1;\n \n+  set_externally_visible (ptr_var);\n+\n   append_global (ptr_var);\n   m_global_variables[var_name] = ptr_var;\n }\n \n+void\n+brig_to_generic::add_decl_call (tree call)\n+{\n+  m_decl_call.push_back (call);\n+}\n+\n /* Produce a \"mangled name\" for the given brig function or kernel.\n    The mangling is used to make unique global symbol name in case of\n    module scope functions.  Program scope functions are not mangled\n@@ -701,8 +712,6 @@ brig_to_generic::finish_function ()\n       m_cf->finish ();\n       m_cf->emit_metadata (stmts);\n       dump_function (m_dump_file, m_cf);\n-      gimplify_function_tree (m_cf->m_func_decl);\n-      cgraph_node::finalize_function (m_cf->m_func_decl, true);\n     }\n   else\n     /* Emit the kernel only at the very end so we can analyze the total\n@@ -846,6 +855,43 @@ call_builtin (tree pdecl, int nargs, tree rettype, ...)\n void\n brig_to_generic::write_globals ()\n {\n+\n+  /* Replace calls to declarations with calls to definitions.  Otherwise\n+     inlining will fail to find the definition to inline from.  */\n+\n+  for (size_t i = 0; i < m_decl_call.size(); ++i)\n+    {\n+      tree decl_call = m_decl_call.at(i);\n+      tree func_decl = get_callee_fndecl (decl_call);\n+      brig_function *brig_function = get_finished_function (func_decl);\n+\n+      if (brig_function && brig_function->m_func_decl\n+\t  && DECL_EXTERNAL (brig_function->m_func_decl) == 0\n+\t  && brig_function->m_func_decl != func_decl)\n+\t{\n+\n+\t  decl_call = CALL_EXPR_FN (decl_call);\n+\t  STRIP_NOPS (decl_call);\n+\t  if (TREE_CODE (decl_call) == ADDR_EXPR\n+\t      && TREE_CODE (TREE_OPERAND (decl_call, 0)) == FUNCTION_DECL)\n+\t    TREE_OPERAND (decl_call, 0) = brig_function->m_func_decl;\n+\t}\n+    }\n+\n+  for (std::map<std::string, brig_function *>::iterator i\n+\t = m_finished_functions.begin(), e = m_finished_functions.end();\n+       i != e; ++i)\n+    {\n+      brig_function *brig_f = (*i).second;\n+      if (brig_f->m_is_kernel)\n+\tcontinue;\n+\n+      /* Finalize only at this point to allow the cgraph analysis to\n+\t see definitions to calls to later functions.  */\n+      gimplify_function_tree (brig_f->m_func_decl);\n+      cgraph_node::finalize_function (brig_f->m_func_decl, true);\n+    }\n+\n   /* Now that the whole BRIG module has been processed, build a launcher\n      and a metadata section for each built kernel.  */\n   for (size_t i = 0; i < m_kernels.size (); ++i)\n@@ -880,6 +926,17 @@ brig_to_generic::write_globals ()\n \n       append_global (launcher);\n \n+      if (m_dump_file)\n+\t{\n+\t  std::string kern_name = f->m_name.substr (1);\n+\t  fprintf (m_dump_file, \"\\n;; Function %s\", kern_name.c_str());\n+\t  fprintf (m_dump_file, \"\\n;; enabled by -%s\\n\\n\",\n+\t\t   dump_flag_name (TDI_original));\n+\t  print_generic_decl (m_dump_file, launcher, 0);\n+\t  print_generic_expr (m_dump_file, DECL_SAVED_TREE (launcher), 0);\n+\t  fprintf (m_dump_file, \"\\n\");\n+\t}\n+\n       gimplify_function_tree (launcher);\n       cgraph_node::finalize_function (launcher, true);\n       pop_cfun ();\n@@ -933,6 +990,25 @@ get_scalar_unsigned_int_type (tree original_type)\n \t\t\t\t\t * BITS_PER_UNIT, true);\n }\n \n+/* Set the declaration externally visible so it won't get removed by\n+   whole program optimizations.  */\n+\n+void\n+set_externally_visible (tree decl)\n+{\n+  if (!lookup_attribute (\"externally_visible\", DECL_ATTRIBUTES (decl)))\n+    DECL_ATTRIBUTES (decl) = tree_cons (get_identifier (\"externally_visible\"),\n+\t\t\t\t\tNULL, DECL_ATTRIBUTES (decl));\n+}\n+\n+void\n+set_inline (tree decl)\n+{\n+  if (!lookup_attribute (\"inline\", DECL_ATTRIBUTES (decl)))\n+    DECL_ATTRIBUTES (decl) = tree_cons (get_identifier (\"inline\"),\n+\t\t\t\t\tNULL, DECL_ATTRIBUTES (decl));\n+}\n+\n void\n dump_function (FILE *dump_file, brig_function *f)\n {"}, {"sha": "a3eb4329a8221e52654a491f781e4b4f38eb8bc6", "filename": "gcc/brig/brigfrontend/brig-to-generic.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.h?ref=637f3cdec3168c4acf42b067cf511e0aecfcfcae", "patch": "@@ -74,6 +74,7 @@ class brig_to_generic\n   tree global_variable (const std::string &name) const;\n   void add_global_variable (const std::string &name, tree var_decl);\n   void add_host_def_var_ptr (const std::string &name, tree var_decl);\n+  void add_decl_call (tree call);\n \n   void start_function (tree f);\n   void finish_function ();\n@@ -152,6 +153,10 @@ class brig_to_generic\n \n   label_index m_global_variables;\n \n+  /* Calls to declarations to be fixed in the end of processing to call\n+     defs instead.  */\n+  std::vector<tree> m_decl_call;\n+\n   /* The size of each private variable, including the alignment padding.  */\n   std::map<std::string, size_t> m_private_data_sizes;\n \n@@ -226,6 +231,9 @@ tree build_stmt (enum tree_code code, ...);\n tree get_unsigned_int_type (tree type);\n \n tree get_scalar_unsigned_int_type (tree type);\n+void set_externally_visible (tree decl);\n+\n+void set_inline (tree decl);\n \n void dump_function (FILE *dump_file, brig_function *f);\n "}, {"sha": "39263086c227a023210411ac5a3317b4b1d53d4b", "filename": "gcc/brig/brigfrontend/brig-variable-handler.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-variable-handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637f3cdec3168c4acf42b067cf511e0aecfcfcae/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-variable-handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-variable-handler.cc?ref=637f3cdec3168c4acf42b067cf511e0aecfcfcae", "patch": "@@ -27,6 +27,7 @@\n #include \"brig-util.h\"\n #include \"print-tree.h\"\n #include \"diagnostic-core.h\"\n+#include \"brig-to-generic.h\"\n \n tree\n brig_directive_variable_handler::build_variable\n@@ -206,6 +207,8 @@ brig_directive_variable_handler::operator () (const BrigBase *base)\n \t     so we can get their address from the Runtime API.  */\n \t  DECL_CONTEXT (var_decl) = NULL_TREE;\n \t  TREE_STATIC (var_decl) = 1;\n+\t  TREE_PUBLIC (var_decl) = 1;\n+\t  set_externally_visible (var_decl);\n \t  m_parent.add_global_variable (var_name, var_decl);\n \t}\n     }"}]}