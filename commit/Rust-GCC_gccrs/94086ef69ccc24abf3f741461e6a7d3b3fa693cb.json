{"sha": "94086ef69ccc24abf3f741461e6a7d3b3fa693cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQwODZlZjY5Y2NjMjRhYmYzZjc0MTQ2MWU2YTdkM2IzZmE2OTNjYg==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2009-11-05T13:59:54Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2009-11-05T13:59:54Z"}, "message": "lto-plugin.c (temp_obj_dir_name): Remove.\n\n2009-11-05  Rafael Avila de Espindola  <espindola@google.com>\n\n\t* lto-plugin.c (temp_obj_dir_name): Remove.\n\t(arguments_file_name): New.\n\t(free_2): Free arguments_file_name instead of temp_obj_dir_name.\n\t(exec_lto_wrapper):  Create arguments file with make_temp_file.\n\t(cleanup_handler): Don't remove the temporary directory. Remove the\n\targuments file.\n\t(onload): Don't create the temporary directory.\n\nFrom-SVN: r153938", "tree": {"sha": "9e05e3ca317073115a78c159f1f6c78ab6c88cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e05e3ca317073115a78c159f1f6c78ab6c88cf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94086ef69ccc24abf3f741461e6a7d3b3fa693cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94086ef69ccc24abf3f741461e6a7d3b3fa693cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94086ef69ccc24abf3f741461e6a7d3b3fa693cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94086ef69ccc24abf3f741461e6a7d3b3fa693cb/comments", "author": null, "committer": null, "parents": [{"sha": "3be9759a0141b8d9915c70c771431f3fc11276cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3be9759a0141b8d9915c70c771431f3fc11276cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3be9759a0141b8d9915c70c771431f3fc11276cd"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "27713cad3d9dd41611d137ead99e1784c6f9b62a", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94086ef69ccc24abf3f741461e6a7d3b3fa693cb/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94086ef69ccc24abf3f741461e6a7d3b3fa693cb/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=94086ef69ccc24abf3f741461e6a7d3b3fa693cb", "patch": "@@ -1,3 +1,13 @@\n+2009-11-05  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* lto-plugin.c (temp_obj_dir_name): Remove.\n+\t(arguments_file_name): New.\n+\t(free_2): Free arguments_file_name instead of temp_obj_dir_name.\n+\t(exec_lto_wrapper):  Create arguments file with make_temp_file.\n+\t(cleanup_handler): Don't remove the temporary directory. Remove the\n+\targuments file.\n+\t(onload): Don't create the temporary directory.\n+\n 2009-11-04  Richard Guenther  <rguenther@suse.de>\n             Rafael Avila de Espindola  <espindola@google.com>\n "}, {"sha": "e8e88cbb3c75152f44c99f6c41547023292dd34e", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94086ef69ccc24abf3f741461e6a7d3b3fa693cb/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94086ef69ccc24abf3f741461e6a7d3b3fa693cb/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=94086ef69ccc24abf3f741461e6a7d3b3fa693cb", "patch": "@@ -72,7 +72,7 @@ struct plugin_file_info\n };\n \n \n-static char *temp_obj_dir_name;\n+static char *arguments_file_name;\n static ld_plugin_register_claim_file register_claim_file;\n static ld_plugin_add_symbols add_symbols;\n static ld_plugin_register_all_symbols_read register_all_symbols_read;\n@@ -291,8 +291,9 @@ free_2 (void)\n   claimed_files = NULL;\n   num_claimed_files = 0;\n \n-  free (temp_obj_dir_name);\n-  temp_obj_dir_name = NULL;\n+  if (arguments_file_name)\n+    free (arguments_file_name);\n+  arguments_file_name = NULL;\n \n   if (resolution_file)\n     {\n@@ -374,26 +375,28 @@ exec_lto_wrapper (char *argv[])\n   int t;\n   int status;\n   char *at_args;\n-  char *args_name;\n   FILE *args;\n   FILE *wrapper_output;\n   char *new_argv[3];\n   struct pex_obj *pex;\n   const char *errmsg;\n \n   /* Write argv to a file to avoid a command line that is too long. */\n-  t = asprintf (&at_args, \"@%s/arguments\", temp_obj_dir_name);\n-  check (t >= 0, LDPL_FATAL, \"asprintf failed\");\n+  arguments_file_name = make_temp_file (\"\");\n+  check (arguments_file_name, LDPL_FATAL,\n+         \"Failed to generate a temorary file name\");\n \n-  args_name = at_args + 1;\n-  args = fopen (args_name, \"w\");\n+  args = fopen (arguments_file_name, \"w\");\n   check (args, LDPL_FATAL, \"could not open arguments file\");\n \n   t = writeargv (&argv[1], args);\n   check (t == 0, LDPL_FATAL, \"could not write arguments\");\n   t = fclose (args);\n   check (t == 0, LDPL_FATAL, \"could not close arguments file\");\n \n+  at_args = concat (\"@\", arguments_file_name, NULL);\n+  check (at_args, LDPL_FATAL, \"could not allocate\");\n+\n   new_argv[0] = argv[0];\n   new_argv[1] = at_args;\n   new_argv[2] = NULL;\n@@ -426,8 +429,6 @@ exec_lto_wrapper (char *argv[])\n \n   pex_free (pex);\n \n-  t = unlink (args_name);\n-  check (t == 0, LDPL_FATAL, \"could not unlink arguments file\");\n   free (at_args);\n }\n \n@@ -511,25 +512,15 @@ static enum ld_plugin_status\n cleanup_handler (void)\n {\n   int t;\n-  char *arguments;\n-  struct stat buf;\n \n   if (debug)\n     return LDPS_OK;\n \n-  /* If we are being called from an error handler, it is possible\n-     that the arguments file is still exists. */\n-  t = asprintf (&arguments, \"%s/arguments\", temp_obj_dir_name);\n-  check (t >= 0, LDPL_FATAL, \"asprintf failed\");\n-  if (stat(arguments, &buf) == 0)\n+  if (arguments_file_name)\n     {\n-      t = unlink (arguments);\n+      t = unlink (arguments_file_name);\n       check (t == 0, LDPL_FATAL, \"could not unlink arguments file\");\n     }\n-  free (arguments);\n-\n-  t = rmdir (temp_obj_dir_name);\n-  check (t == 0, LDPL_FATAL, \"could not remove temporary directory\");\n \n   free_2 ();\n   return LDPS_OK;\n@@ -651,7 +642,6 @@ onload (struct ld_plugin_tv *tv)\n {\n   struct ld_plugin_tv *p;\n   enum ld_plugin_status status;\n-  char *t;\n \n   unsigned version = elf_version (EV_CURRENT);\n   check (version != EV_NONE, LDPL_FATAL, \"invalid ELF version\");\n@@ -715,8 +705,5 @@ onload (struct ld_plugin_tv *tv)\n \t     \"could not register the all_symbols_read callback\");\n     }\n \n-  temp_obj_dir_name = strdup (\"tmp_objectsXXXXXX\");\n-  t = mkdtemp (temp_obj_dir_name);\n-  assert (t == temp_obj_dir_name);\n   return LDPS_OK;\n }"}]}