{"sha": "aabdb83166b53a13956071f0e01f841a184340f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFiZGI4MzE2NmI1M2ExMzk1NjA3MWYwZTAxZjg0MWExODQzNDBmNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-12-07T04:34:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-12-07T04:34:51Z"}, "message": "Fix memclass5.C, memfriend10.C, var-templ19.C with -std=c++1z.\n\n\t* constraint.cc (strictly_subsumes): New.\n\t* cp-tree.h: Declare it.\n\t* pt.c (process_partial_specialization): Use it instead of\n\tsubsumes_constraints.\n\t(maybe_new_partial_specialization): Do compare null constraints.\n\t* search.c (lookup_member): Handle currently_open_class returning null.\n\nFrom-SVN: r231350", "tree": {"sha": "5f9e83453e33cd3a415991604a480c3fb9f00a73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f9e83453e33cd3a415991604a480c3fb9f00a73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aabdb83166b53a13956071f0e01f841a184340f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aabdb83166b53a13956071f0e01f841a184340f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aabdb83166b53a13956071f0e01f841a184340f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aabdb83166b53a13956071f0e01f841a184340f7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5dc58049178775591a6e2dd04c9ce9cee4007dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc58049178775591a6e2dd04c9ce9cee4007dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dc58049178775591a6e2dd04c9ce9cee4007dab"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "310cdba837b5a7b22a9d6aee98887b6cfafc65eb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabdb83166b53a13956071f0e01f841a184340f7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabdb83166b53a13956071f0e01f841a184340f7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aabdb83166b53a13956071f0e01f841a184340f7", "patch": "@@ -1,4 +1,11 @@\n-2015-12-05  Jason Merrill  <jason@redhat.com>\n+2015-12-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* constraint.cc (strictly_subsumes): New.\n+\t* cp-tree.h: Declare it.\n+\t* pt.c (process_partial_specialization): Use it instead of\n+\tsubsumes_constraints.\n+\t(maybe_new_partial_specialization): Do compare null constraints.\n+\t* search.c (lookup_member): Handle currently_open_class returning null.\n \n \tPR c++/68597, fix auto9.C and auto-neg1.C with -std=c++1z.\n \t* decl.c (check_tag_decl): Use ds_type_spec in auto diagnostic."}, {"sha": "89da6ecbf797155ba83024c4db8ac885716a75ba", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabdb83166b53a13956071f0e01f841a184340f7/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabdb83166b53a13956071f0e01f841a184340f7/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=aabdb83166b53a13956071f0e01f841a184340f7", "patch": "@@ -2314,6 +2314,15 @@ subsumes_constraints (tree a, tree b)\n   return subsumes (a, b);\n }\n \n+/* Returns true when the the constraints in A subsume those in B, but\n+   the constraints in B do not subsume the constraints in A.  */\n+\n+bool\n+strictly_subsumes (tree a, tree b)\n+{\n+  return subsumes (a, b) && !subsumes (b, a);\n+}\n+\n /* Determines which of the declarations, A or B, is more constrained.\n    That is, which declaration's constraints subsume but are not subsumed\n    by the other's?"}, {"sha": "1b2563d00ee00449219b1ed3590ccb6429cb3535", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabdb83166b53a13956071f0e01f841a184340f7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabdb83166b53a13956071f0e01f841a184340f7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=aabdb83166b53a13956071f0e01f841a184340f7", "patch": "@@ -6866,6 +6866,7 @@ extern bool constraints_satisfied_p             (tree, tree);\n extern bool equivalent_constraints              (tree, tree);\n extern bool equivalently_constrained            (tree, tree);\n extern bool subsumes_constraints                (tree, tree);\n+extern bool strictly_subsumes\t\t\t(tree, tree);\n extern int more_constrained                     (tree, tree);\n \n extern void diagnose_constraints                (location_t, tree, tree);"}, {"sha": "22dcee281ba5baabdb3bee6a94416f09baec3d47", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabdb83166b53a13956071f0e01f841a184340f7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabdb83166b53a13956071f0e01f841a184340f7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=aabdb83166b53a13956071f0e01f841a184340f7", "patch": "@@ -860,9 +860,11 @@ maybe_new_partial_specialization (tree type)\n       tree type_constr = current_template_constraints ();\n \n       if (type == TREE_TYPE (tmpl))\n-\tif (tree main_constr = get_constraints (tmpl))\n+\t{\n+\t  tree main_constr = get_constraints (tmpl);\n \t  if (equivalent_constraints (type_constr, main_constr))\n \t    return NULL_TREE;\n+\t}\n \n       // Also, if there's a pre-existing specialization with matching\n       // constraints, then this also isn't new.\n@@ -4508,8 +4510,8 @@ process_partial_specialization (tree decl)\n     = TI_ARGS (get_template_info (DECL_TEMPLATE_RESULT (maintmpl)));\n   if (comp_template_args (inner_args, INNERMOST_TEMPLATE_ARGS (main_args))\n       && (!flag_concepts\n-\t  || !subsumes_constraints (current_template_constraints (),\n-\t\t\t\t    get_constraints (maintmpl))))\n+\t  || !strictly_subsumes (current_template_constraints (),\n+\t\t\t\t get_constraints (maintmpl))))\n     {\n       if (!flag_concepts)\n         error (\"partial specialization %q+D does not specialize \""}, {"sha": "05a45c3fbfb171e121d3f5187af36d882b44c001", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aabdb83166b53a13956071f0e01f841a184340f7/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aabdb83166b53a13956071f0e01f841a184340f7/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=aabdb83166b53a13956071f0e01f841a184340f7", "patch": "@@ -1271,7 +1271,8 @@ lookup_member (tree xbasetype, tree name, int protect, bool want_type,\n   /* Make sure we're looking for a member of the current instantiation in the\n      right partial specialization.  */\n   if (flag_concepts && dependent_type_p (type))\n-    type = currently_open_class (type);\n+    if (tree t = currently_open_class (type))\n+      type = t;\n \n   if (!basetype_path)\n     basetype_path = TYPE_BINFO (type);"}]}