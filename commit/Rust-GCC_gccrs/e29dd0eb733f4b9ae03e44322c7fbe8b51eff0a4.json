{"sha": "e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI5ZGQwZWI3MzNmNGI5YWUwM2U0NDMyMmM3ZmJlOGI1MWVmZjBhNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-11-11T11:42:45Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-11-11T11:42:45Z"}, "message": "vect: Allow vconds between different vector sizes\n\nThe vcond code requires the compared vectors and the selected\nvectors to have both the same size and the same number of elements\nas each other.  But the operation makes logical sense even for\ndifferent vector sizes.  E.g. you could compare two V4SIs and\nuse the result to select between two V4DIs.\n\nThe underlying optab already allows the compared mode and the selected\nmode to be specified separately.  Since the vectoriser now also\nsupports mixed vector sizes, I think we can simply remove the\nequal-size check and just keep the equal-lanes check.  It's then\nup to the target to decide which (if any) mixtures of sizes it\nsupports.\n\ngcc/\n\t* optabs-tree.c (expand_vec_cond_expr_p): Allow the compared values\n\tand the selected values to have different mode sizes.\n\t* gimple-isel.cc (gimple_expand_vec_cond_expr): Likewise.", "tree": {"sha": "aed14aaf95c4b6801b834767bea500336c7016f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aed14aaf95c4b6801b834767bea500336c7016f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ebaea3b6677ef8edfa5638800304db1a4f7c2f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ebaea3b6677ef8edfa5638800304db1a4f7c2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ebaea3b6677ef8edfa5638800304db1a4f7c2f8"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "b5362cc4b01947b3254dbcfdbd1a00354ae126d0", "filename": "gcc/gimple-isel.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4/gcc%2Fgimple-isel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4/gcc%2Fgimple-isel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-isel.cc?ref=e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4", "patch": "@@ -199,9 +199,8 @@ gimple_expand_vec_cond_expr (gimple_stmt_iterator *gsi,\n   unsignedp = TYPE_UNSIGNED (TREE_TYPE (op0a));\n \n \n-  gcc_assert (known_eq (GET_MODE_SIZE (mode), GET_MODE_SIZE (cmp_op_mode))\n-\t      && known_eq (GET_MODE_NUNITS (mode),\n-\t\t\t   GET_MODE_NUNITS (cmp_op_mode)));\n+  gcc_assert (known_eq (GET_MODE_NUNITS (mode),\n+\t\t\tGET_MODE_NUNITS (cmp_op_mode)));\n \n   icode = get_vcond_icode (mode, cmp_op_mode, unsignedp);\n   if (icode == CODE_FOR_nothing)"}, {"sha": "4dfda756932de1693667c39c6fabed043b20b63b", "filename": "gcc/optabs-tree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4/gcc%2Foptabs-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4/gcc%2Foptabs-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-tree.c?ref=e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4", "patch": "@@ -377,8 +377,7 @@ expand_vec_cond_expr_p (tree value_type, tree cmp_op_type, enum tree_code code)\n \t\t\t       TYPE_MODE (cmp_op_type)) != CODE_FOR_nothing)\n     return true;\n \n-  if (maybe_ne (GET_MODE_SIZE (value_mode), GET_MODE_SIZE (cmp_op_mode))\n-      || maybe_ne (GET_MODE_NUNITS (value_mode), GET_MODE_NUNITS (cmp_op_mode)))\n+  if (maybe_ne (GET_MODE_NUNITS (value_mode), GET_MODE_NUNITS (cmp_op_mode)))\n     return false;\n \n   if (TREE_CODE_CLASS (code) != tcc_comparison)"}]}