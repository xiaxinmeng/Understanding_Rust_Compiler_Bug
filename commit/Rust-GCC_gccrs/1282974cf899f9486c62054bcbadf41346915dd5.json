{"sha": "1282974cf899f9486c62054bcbadf41346915dd5", "node_id": "C_kwDOANBUbNoAKDEyODI5NzRjZjg5OWY5NDg2YzYyMDU0YmNiYWRmNDEzNDY5MTVkZDU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-29T11:01:05Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-29T11:10:08Z"}, "message": "Ensure we support generic arguments on mangled type-paths\n\nThis allows us to have the generic arguments within type paths for mangled\nsymbols such as those in impl-blocks. This also updates our symbol\nmanagling to mangle comma's to $C$.", "tree": {"sha": "b556162c6cb759c387191527ea6f001c300c3ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b556162c6cb759c387191527ea6f001c300c3ab3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1282974cf899f9486c62054bcbadf41346915dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1282974cf899f9486c62054bcbadf41346915dd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1282974cf899f9486c62054bcbadf41346915dd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1282974cf899f9486c62054bcbadf41346915dd5/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c88cc0aa644836c361ce5d8ff5225a9c12333dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c88cc0aa644836c361ce5d8ff5225a9c12333dea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c88cc0aa644836c361ce5d8ff5225a9c12333dea"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "4d202078a70ee7bc1a9ee1826a1ee51190122240", "filename": "gcc/rust/backend/rust-mangle.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1282974cf899f9486c62054bcbadf41346915dd5/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1282974cf899f9486c62054bcbadf41346915dd5/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-mangle.cc?ref=1282974cf899f9486c62054bcbadf41346915dd5", "patch": "@@ -14,6 +14,7 @@ static const std::string kMangledPtr = \"$BP$\";\n static const std::string kMangledLeftSqParen = \"$u5b$\";\t // [\n static const std::string kMangledRightSqParen = \"$u5d$\"; // ]\n static const std::string kQualPathBegin = \"_\" + kMangledSubstBegin;\n+static const std::string kMangledComma = \"$C$\";\n \n namespace Rust {\n namespace Compile {\n@@ -39,6 +40,9 @@ legacy_mangle_name (const std::string &name)\n   //\n   // example::Foo<T>::new:\n   // _ZN7example12Foo$LT$T$GT$3new17h9a2aacb7fd783515E:\n+  //\n+  // <example::Identity as example::FnLike<&T,&T>>::call\n+  // _ZN74_$LT$example..Identity$u20$as$u20$example..FnLike$LT$$RF$T$C$$RF$T$GT$$GT$4call17ha9ee58935895acb3E\n \n   std::string buffer;\n   for (size_t i = 0; i < name.size (); i++)\n@@ -62,6 +66,8 @@ legacy_mangle_name (const std::string &name)\n \tm = kMangledLeftSqParen;\n       else if (c == ']')\n \tm = kMangledRightSqParen;\n+      else if (c == ',')\n+\tm = kMangledComma;\n       else if (c == ':')\n \t{\n \t  rust_assert (i + 1 < name.size ());"}, {"sha": "a823543e18d9c1bb304f485fdc93a8cbfbffa08c", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1282974cf899f9486c62054bcbadf41346915dd5/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1282974cf899f9486c62054bcbadf41346915dd5/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=1282974cf899f9486c62054bcbadf41346915dd5", "patch": "@@ -356,7 +356,52 @@ ResolveTypeToCanonicalPath::visit (AST::TypePath &path)\n   if (mappings->lookup_canonical_path (mappings->get_current_crate (),\n \t\t\t\t       resolved_node, &type_path))\n     {\n-      result = *type_path;\n+      auto &final_seg = path.get_segments ().back ();\n+      switch (final_seg->get_type ())\n+\t{\n+\t  case AST::TypePathSegment::SegmentType::GENERIC: {\n+\t    AST::TypePathSegmentGeneric *s\n+\t      = static_cast<AST::TypePathSegmentGeneric *> (final_seg.get ());\n+\n+\t    std::vector<CanonicalPath> args;\n+\t    if (s->has_generic_args ())\n+\t      {\n+\t\tfor (auto &gt : s->get_generic_args ().get_type_args ())\n+\t\t  {\n+\t\t    CanonicalPath arg = CanonicalPath::create_empty ();\n+\t\t    bool ok = ResolveTypeToCanonicalPath::go (gt.get (), arg);\n+\t\t    if (ok)\n+\t\t      args.push_back (std::move (arg));\n+\t\t  }\n+\t      }\n+\n+\t    result = *type_path;\n+\t    if (!args.empty ())\n+\t      {\n+\t\t// append this onto the path\n+\t\tstd::string buf;\n+\t\tfor (size_t i = 0; i < args.size (); i++)\n+\t\t  {\n+\t\t    bool has_next = (i + 1) < args.size ();\n+\t\t    const auto &arg = args.at (i);\n+\n+\t\t    buf += arg.get ();\n+\t\t    if (has_next)\n+\t\t      buf += \", \";\n+\t\t  }\n+\n+\t\tstd::string arg_seg = \"<\" + buf + \">\";\n+\t\tCanonicalPath argument_seg\n+\t\t  = CanonicalPath::new_seg (s->get_node_id (), arg_seg);\n+\t\tresult = result.append (argument_seg);\n+\t      }\n+\t  }\n+\t  break;\n+\n+\tdefault:\n+\t  result = *type_path;\n+\t  break;\n+\t}\n     }\n }\n "}]}