{"sha": "38f1276bb50d7ecc37d928c07e6745c2edba24ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhmMTI3NmJiNTBkN2VjYzM3ZDkyOGMwN2U2NzQ1YzJlZGJhMjRjYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-04-27T21:27:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-04-27T21:27:04Z"}, "message": "semantics.c (finish_qualified_id_expr): Use maybe_dummy_object rather than checking current_class_ref directly.\n\n\t* semantics.c (finish_qualified_id_expr): Use maybe_dummy_object\n\trather than checking current_class_ref directly.\n\t(finish_call_expr): Likewise.\n\nFrom-SVN: r158808", "tree": {"sha": "e278fcba3022e3642f8a3fd12e94bff62d6de2b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e278fcba3022e3642f8a3fd12e94bff62d6de2b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38f1276bb50d7ecc37d928c07e6745c2edba24ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f1276bb50d7ecc37d928c07e6745c2edba24ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38f1276bb50d7ecc37d928c07e6745c2edba24ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f1276bb50d7ecc37d928c07e6745c2edba24ca/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a684685337dc14afc172c7e2172b40d65dd4fa7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a684685337dc14afc172c7e2172b40d65dd4fa7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a684685337dc14afc172c7e2172b40d65dd4fa7b"}], "stats": {"total": 37, "additions": 15, "deletions": 22}, "files": [{"sha": "9e74bc6291968267d9bed9414c0b260b35f1ad69", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f1276bb50d7ecc37d928c07e6745c2edba24ca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f1276bb50d7ecc37d928c07e6745c2edba24ca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38f1276bb50d7ecc37d928c07e6745c2edba24ca", "patch": "@@ -1,5 +1,9 @@\n 2010-04-27  Jason Merrill  <jason@redhat.com>\n \n+\t* semantics.c (finish_qualified_id_expr): Use maybe_dummy_object\n+\trather than checking current_class_ref directly.\n+\t(finish_call_expr): Likewise.\n+\n \tPR c++/43856\n \t* name-lookup.c (qualify_lookup): Disqualify lambda op().\n \t* class.c (current_nonlambda_class_type): New fn."}, {"sha": "7bcd75690fc61234440bbedbdbb36f80e886bcd5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f1276bb50d7ecc37d928c07e6745c2edba24ca/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f1276bb50d7ecc37d928c07e6745c2edba24ca/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=38f1276bb50d7ecc37d928c07e6745c2edba24ca", "patch": "@@ -1690,17 +1690,18 @@ finish_qualified_id_expr (tree qualifying_class,\n   else if (BASELINK_P (expr) && !processing_template_decl)\n     {\n       tree fns;\n+      tree ob;\n \n       /* See if any of the functions are non-static members.  */\n       fns = BASELINK_FUNCTIONS (expr);\n       if (TREE_CODE (fns) == TEMPLATE_ID_EXPR)\n \tfns = TREE_OPERAND (fns, 0);\n       /* If so, the expression may be relative to 'this'.  */\n       if (!shared_member_p (fns)\n-\t  && current_class_ref\n-\t  && DERIVED_FROM_P (qualifying_class, TREE_TYPE (current_class_ref)))\n+\t  && (ob = maybe_dummy_object (qualifying_class, NULL),\n+\t      !is_dummy_object (ob)))\n \texpr = (build_class_member_access_expr\n-\t\t(maybe_dummy_object (qualifying_class, NULL),\n+\t\t(ob,\n \t\t expr,\n \t\t BASELINK_ACCESS_BINFO (expr),\n \t\t /*preserve_reference=*/false,\n@@ -2002,31 +2003,18 @@ finish_call_expr (tree fn, VEC(tree,gc) **args, bool disallow_virtual,\n \t   . operator.... [Otherwise] a contrived object of type T\n \t   becomes the implied object argument.\n \n-\tThis paragraph is unclear about this situation:\n+\tIn this situation:\n \n \t  struct A { void f(); };\n \t  struct B : public A {};\n \t  struct C : public A { void g() { B::f(); }};\n \n-\tIn particular, for `B::f', this paragraph does not make clear\n-\twhether \"the class of that member function\" refers to `A' or\n-\tto `B'.  We believe it refers to `B'.  */\n-      if (current_class_type\n-\t  && DERIVED_FROM_P (BINFO_TYPE (BASELINK_ACCESS_BINFO (fn)),\n-\t\t\t     current_class_type)\n-\t  && current_class_ref)\n-\tobject = maybe_dummy_object (BINFO_TYPE (BASELINK_ACCESS_BINFO (fn)),\n-\t\t\t\t     NULL);\n-      else\n-\t{\n-\t  tree representative_fn;\n+\t\"the class of that member function\" refers to `A'.  But 11.2\n+\t[class.access.base] says that we need to convert 'this' to B* as\n+\tpart of the access, so we pass 'B' to maybe_dummy_object.  */\n \n-\t  representative_fn = BASELINK_FUNCTIONS (fn);\n-\t  if (TREE_CODE (representative_fn) == TEMPLATE_ID_EXPR)\n-\t    representative_fn = TREE_OPERAND (representative_fn, 0);\n-\t  representative_fn = get_first_fn (representative_fn);\n-\t  object = build_dummy_object (DECL_CONTEXT (representative_fn));\n-\t}\n+      object = maybe_dummy_object (BINFO_TYPE (BASELINK_ACCESS_BINFO (fn)),\n+\t\t\t\t   NULL);\n \n       if (processing_template_decl)\n \t{"}, {"sha": "04fe474c733c2532bdd26a85d735f4c2bf664e67", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-this2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38f1276bb50d7ecc37d928c07e6745c2edba24ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38f1276bb50d7ecc37d928c07e6745c2edba24ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this2.C?ref=38f1276bb50d7ecc37d928c07e6745c2edba24ca", "patch": "@@ -10,6 +10,7 @@ struct S1 {\n     [=]() {\n       i;\n       g();\n+      S1::g();\n       operator()(42);\n     };\n   }"}]}