{"sha": "d57d34243215318c25a0139d971b15c9b9a1c099", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU3ZDM0MjQzMjE1MzE4YzI1YTAxMzlkOTcxYjE1YzliOWExYzA5OQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-03-31T05:11:03Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-03-31T05:11:03Z"}, "message": "re PR libfortran/26890 (SIZE parameter interacts with same variable in IO list character length specification.)\n\n2006-03-30  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/26890\n\t* io/io.h: Add size_used to st_parameter_dt, adjust pad size.\n\t*io/transfer.c (data_transfer_init): Initialize size_used to zero.\n\t(read_sf): Use size_used.\n\t(read_block): Likewise.\n\t(read_block_direct): Likewise.\n\t(write_block): Likewise.\n\t(write_buf): Likewise and eliminate erroneous FAILURE return.\n\t(finalize_transfer): Assign value of size_used to *dtp->size.\n\nFrom-SVN: r112570", "tree": {"sha": "3c5050ef1ac6e0c17e084d5eae16cd52bdcf69ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c5050ef1ac6e0c17e084d5eae16cd52bdcf69ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d57d34243215318c25a0139d971b15c9b9a1c099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57d34243215318c25a0139d971b15c9b9a1c099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d57d34243215318c25a0139d971b15c9b9a1c099", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57d34243215318c25a0139d971b15c9b9a1c099/comments", "author": null, "committer": null, "parents": [{"sha": "5650dfbdb03f468f4d14fedc94894eee4edbc05d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5650dfbdb03f468f4d14fedc94894eee4edbc05d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5650dfbdb03f468f4d14fedc94894eee4edbc05d"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "33cfb15d0b4fab72d14eac6d406cd333cd8ac709", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57d34243215318c25a0139d971b15c9b9a1c099/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57d34243215318c25a0139d971b15c9b9a1c099/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=d57d34243215318c25a0139d971b15c9b9a1c099", "patch": "@@ -1,3 +1,15 @@\n+2006-03-30  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/26890\n+\t* io/io.h: Add size_used to st_parameter_dt, adjust pad size.\n+\t*io/transfer.c (data_transfer_init): Initialize size_used to zero.\n+\t(read_sf): Use size_used.\n+\t(read_block): Likewise.\n+\t(read_block_direct): Likewise.\n+\t(write_block): Likewise.\n+\t(write_buf): Likewise and eliminate erroneous FAILURE return.\n+\t(finalize_transfer): Assign value of size_used to *dtp->size.\n+\n 2006-03-30  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR libfortran/26712"}, {"sha": "b14576c5c0f84446a123526915905737655c4755", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57d34243215318c25a0139d971b15c9b9a1c099/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57d34243215318c25a0139d971b15c9b9a1c099/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=d57d34243215318c25a0139d971b15c9b9a1c099", "patch": "@@ -412,7 +412,7 @@ typedef struct st_parameter_dt\n \t     formatted field width.  */\n \t  unsigned sf_read_comma : 1;\n           /* A namelist specific flag used to enable reading input from \n-\t       line_buffer for logical reads.  */\n+\t     line_buffer for logical reads.  */\n \t  unsigned line_buffer_enabled : 1;\n \t  /* 18 unused bits.  */\n \n@@ -434,8 +434,9 @@ typedef struct st_parameter_dt\n \t     enough to hold a complex value (two reals) of the largest\n \t     kind.  */\n \t  char value[32];\n+\t  gfc_offset size_used;\n \t} p;\n-      char pad[16 * sizeof (char *) + 34 * sizeof (int)];\n+      char pad[16 * sizeof (char *) + 34 * sizeof (int) - sizeof (gfc_offset)];\n     } u;\n }\n st_parameter_dt;"}, {"sha": "6097c35d8a46a169b342fd1b3b6a5133a05399ad", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57d34243215318c25a0139d971b15c9b9a1c099/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57d34243215318c25a0139d971b15c9b9a1c099/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=d57d34243215318c25a0139d971b15c9b9a1c099", "patch": "@@ -233,7 +233,7 @@ read_sf (st_parameter_dt *dtp, int *length, int no_error)\n   dtp->u.p.current_unit->bytes_left -= *length;\n \n   if ((dtp->common.flags & IOPARM_DT_HAS_SIZE) != 0)\n-    *dtp->size += *length;\n+    dtp->u.p.size_used += (gfc_offset) *length;\n \n   return base;\n }\n@@ -277,7 +277,7 @@ read_block (st_parameter_dt *dtp, int *length)\n   source = salloc_r (dtp->u.p.current_unit->s, &nread);\n \n   if ((dtp->common.flags & IOPARM_DT_HAS_SIZE) != 0)\n-    *dtp->size += nread;\n+    dtp->u.p.size_used += (gfc_offset) nread;\n \n   if (nread != *length)\n     {\t\t\t\t/* Short read, this shouldn't happen.  */\n@@ -334,7 +334,7 @@ read_block_direct (st_parameter_dt *dtp, void *buf, size_t *nbytes)\n     }\n \n   if ((dtp->common.flags & IOPARM_DT_HAS_SIZE) != 0)\n-    *dtp->size += (GFC_INTEGER_4) nread;\n+    dtp->u.p.size_used += (gfc_offset) nread;\n \n   if (nread != *nbytes)\n     {\t\t\t\t/* Short read, e.g. if we hit EOF.  */\n@@ -375,7 +375,7 @@ write_block (st_parameter_dt *dtp, int length)\n     }\n \n   if ((dtp->common.flags & IOPARM_DT_HAS_SIZE) != 0)\n-    *dtp->size += length;\n+    dtp->u.p.size_used += (gfc_offset) length;\n \n   return dest;\n }\n@@ -404,10 +404,7 @@ write_buf (st_parameter_dt *dtp, void *buf, size_t nbytes)\n     }\n \n   if ((dtp->common.flags & IOPARM_DT_HAS_SIZE) != 0)\n-    {\n-      *dtp->size += (GFC_INTEGER_4) nbytes;\n-      return FAILURE;\n-    }\n+    dtp->u.p.size_used += (gfc_offset) nbytes;\n \n   return SUCCESS;\n }\n@@ -1388,7 +1385,7 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n   dtp->u.p.mode = read_flag ? READING : WRITING;\n \n   if ((cf & IOPARM_DT_HAS_SIZE) != 0)\n-    *dtp->size = 0;\t\t/* Initialize the count.  */\n+    dtp->u.p.size_used = 0;  /* Initialize the count.  */\n \n   dtp->u.p.current_unit = get_unit (dtp, 1);\n   if (dtp->u.p.current_unit->s == NULL)\n@@ -2147,6 +2144,9 @@ finalize_transfer (st_parameter_dt *dtp)\n   jmp_buf eof_jump;\n   GFC_INTEGER_4 cf = dtp->common.flags;\n \n+  if ((dtp->common.flags & IOPARM_DT_HAS_SIZE) != 0)\n+    *dtp->size = (GFC_INTEGER_4) dtp->u.p.size_used;\n+\n   if (dtp->u.p.eor_condition)\n     {\n       generate_error (&dtp->common, ERROR_EOR, NULL);"}]}