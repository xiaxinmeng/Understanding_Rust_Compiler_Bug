{"sha": "880ab4be197623b3f39eefde091611ef4ad77549", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgwYWI0YmUxOTc2MjNiM2YzOWVlZmRlMDkxNjExZWY0YWQ3NzU0OQ==", "commit": {"author": {"name": "Andrey Turetskiy", "email": "andrey.turetskiy@gmail.com", "date": "2012-11-06T07:43:37Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2012-11-06T07:43:37Z"}, "message": "i386.c (bdesc_args): Rename CODE_FOR_avx2_umulhrswv16hi3 to CODE_FOR_avx2_pmulhrswv16hi3.\n\n\t* config/i386/i386.c (bdesc_args): Rename CODE_FOR_avx2_umulhrswv16hi3 to\n\tCODE_FOR_avx2_pmulhrswv16hi3.\n\t* config/i386/predicates.md (const1_operand): Extend for vectors.\n\t* config/i386/sse.md (ssse3_avx2): Extend.\n\t(ssedoublemode): Ditto.\n\t(<sse2_avx2>_uavg<mode>3): Merge avx2_uavgv32qi3, sse2_uavgv16qi3,\n\tavx2_uavgv16hi3 and sse2_uavgv8hi3 into one.\n\t(*<sse2_avx2>_uavg<mode>3): Merge *avx2_uavgv32qi3, *sse2_uavgv16qi3,\n\t*avx2_uavgv16hi3 and *sse2_uavgv8hi3 into one.\n\t(PMULHRSW): New.\n\t(<ssse3_avx2>_pmulhrsw<mode>3): Merge avx2_umulhrswv16hi3,\n\tssse3_pmulhrswv8hi3 and ssse3_pmulhrswv4hi3 into one.\n\t(*avx2_pmulhrswv16hi3): Replace const_vector with const1_operand\n\tpredicate.\n\t(*ssse3_pmulhrswv8hi3): Ditto.\n\t(*ssse3_pmulhrswv4hi3): Ditto.\n\nFrom-SVN: r193208", "tree": {"sha": "adc456919f028b0b2a3ff2b1bd3073515bf2e469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adc456919f028b0b2a3ff2b1bd3073515bf2e469"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/880ab4be197623b3f39eefde091611ef4ad77549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880ab4be197623b3f39eefde091611ef4ad77549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880ab4be197623b3f39eefde091611ef4ad77549", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880ab4be197623b3f39eefde091611ef4ad77549/comments", "author": {"login": "aturetsk", "id": 22938838, "node_id": "MDQ6VXNlcjIyOTM4ODM4", "avatar_url": "https://avatars.githubusercontent.com/u/22938838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturetsk", "html_url": "https://github.com/aturetsk", "followers_url": "https://api.github.com/users/aturetsk/followers", "following_url": "https://api.github.com/users/aturetsk/following{/other_user}", "gists_url": "https://api.github.com/users/aturetsk/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturetsk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturetsk/subscriptions", "organizations_url": "https://api.github.com/users/aturetsk/orgs", "repos_url": "https://api.github.com/users/aturetsk/repos", "events_url": "https://api.github.com/users/aturetsk/events{/privacy}", "received_events_url": "https://api.github.com/users/aturetsk/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36947bd6e444bc20682ddc0f830acf8c69cab84c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36947bd6e444bc20682ddc0f830acf8c69cab84c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36947bd6e444bc20682ddc0f830acf8c69cab84c"}], "stats": {"total": 356, "additions": 83, "deletions": 273}, "files": [{"sha": "fff511fcb152d4e739c7f7cdc58aec2d349085b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880ab4be197623b3f39eefde091611ef4ad77549/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880ab4be197623b3f39eefde091611ef4ad77549/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=880ab4be197623b3f39eefde091611ef4ad77549", "patch": "@@ -1,3 +1,22 @@\n+2012-11-06  Andrey Turetskiy  <andrey.turetskiy@gmail.com>\n+\n+\t* config/i386/i386.c (bdesc_args): Rename CODE_FOR_avx2_umulhrswv16hi3 to\n+\tCODE_FOR_avx2_pmulhrswv16hi3.\n+\t* config/i386/predicates.md (const1_operand): Extend for vectors.\n+\t* config/i386/sse.md (ssse3_avx2): Extend.\n+\t(ssedoublemode): Ditto.\n+\t(<sse2_avx2>_uavg<mode>3): Merge avx2_uavgv32qi3, sse2_uavgv16qi3,\n+\tavx2_uavgv16hi3 and sse2_uavgv8hi3 into one.\n+\t(*<sse2_avx2>_uavg<mode>3): Merge *avx2_uavgv32qi3, *sse2_uavgv16qi3,\n+\t*avx2_uavgv16hi3 and *sse2_uavgv8hi3 into one.\n+\t(PMULHRSW): New.\n+\t(<ssse3_avx2>_pmulhrsw<mode>3): Merge avx2_umulhrswv16hi3,\n+\tssse3_pmulhrswv8hi3 and ssse3_pmulhrswv4hi3 into one.\n+\t(*avx2_pmulhrswv16hi3): Replace const_vector with const1_operand\n+\tpredicate.\n+\t(*ssse3_pmulhrswv8hi3): Ditto.\n+\t(*ssse3_pmulhrswv4hi3): Ditto.\n+\n 2012-11-06  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/epiphany/epiphany.c (epiphany_address_cost):"}, {"sha": "a8b0962cf6461932251d4a5c508133fe67ea1376", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880ab4be197623b3f39eefde091611ef4ad77549/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880ab4be197623b3f39eefde091611ef4ad77549/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=880ab4be197623b3f39eefde091611ef4ad77549", "patch": "@@ -27658,7 +27658,7 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_zero_extendv4hiv4di2  , \"__builtin_ia32_pmovzxwq256\", IX86_BUILTIN_PMOVZXWQ256, UNKNOWN, (int) V4DI_FTYPE_V8HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_zero_extendv4siv4di2  , \"__builtin_ia32_pmovzxdq256\", IX86_BUILTIN_PMOVZXDQ256, UNKNOWN, (int) V4DI_FTYPE_V4SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_vec_widen_smult_even_v8si, \"__builtin_ia32_pmuldq256\", IX86_BUILTIN_PMULDQ256, UNKNOWN, (int) V4DI_FTYPE_V8SI_V8SI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_umulhrswv16hi3 , \"__builtin_ia32_pmulhrsw256\", IX86_BUILTIN_PMULHRSW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_pmulhrswv16hi3 , \"__builtin_ia32_pmulhrsw256\", IX86_BUILTIN_PMULHRSW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_umulv16hi3_highpart, \"__builtin_ia32_pmulhuw256\" , IX86_BUILTIN_PMULHUW256 , UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_smulv16hi3_highpart, \"__builtin_ia32_pmulhw256\"  , IX86_BUILTIN_PMULHW256  , UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_mulv16hi3, \"__builtin_ia32_pmullw256\"  , IX86_BUILTIN_PMULLW256  , UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },"}, {"sha": "830c740f237dbf20259956563a6955000bd5ebd0", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880ab4be197623b3f39eefde091611ef4ad77549/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880ab4be197623b3f39eefde091611ef4ad77549/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=880ab4be197623b3f39eefde091611ef4ad77549", "patch": "@@ -568,10 +568,14 @@\n   return op == CONST0_RTX (mode);\n })\n \n-;; Match exactly one.\n+;; Match one or vector filled with ones.\n (define_predicate \"const1_operand\"\n-  (and (match_code \"const_int\")\n-       (match_test \"op == const1_rtx\")))\n+  (match_code \"const_int,const_double,const_vector\")\n+{\n+  if (mode == VOIDmode)\n+    mode = GET_MODE (op);\n+  return op == CONST1_RTX (mode);\n+})\n \n ;; Match exactly eight.\n (define_predicate \"const8_operand\""}, {"sha": "d6cf7f3042765a80997e38fd603a7cabc82f0e2a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 56, "deletions": 269, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880ab4be197623b3f39eefde091611ef4ad77549/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880ab4be197623b3f39eefde091611ef4ad77549/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=880ab4be197623b3f39eefde091611ef4ad77549", "patch": "@@ -222,7 +222,7 @@\n \n (define_mode_attr ssse3_avx2\n    [(V16QI \"ssse3\") (V32QI \"avx2\")\n-    (V8HI \"ssse3\") (V16HI \"avx2\")\n+    (V4HI \"ssse3\") (V8HI \"ssse3\") (V16HI \"avx2\")\n     (V4SI \"ssse3\") (V8SI \"avx2\")\n     (V2DI \"ssse3\") (V4DI \"avx2\")\n     (TI \"ssse3\") (V2TI \"avx2\")])\n@@ -246,7 +246,8 @@\n    (V2DI \"vec\") (V4DI \"avx2\")])\n \n (define_mode_attr ssedoublemode\n-  [(V16HI \"V16SI\") (V8HI \"V8SI\")])\n+  [(V16HI \"V16SI\") (V8HI \"V8SI\") (V4HI \"V4SI\")\n+   (V32QI \"V32HI\") (V16QI \"V16HI\")])\n \n (define_mode_attr ssebytemode\n   [(V4DI \"V32QI\") (V2DI \"V16QI\")])\n@@ -7637,209 +7638,45 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_expand \"avx2_uavgv32qi3\"\n-  [(set (match_operand:V32QI 0 \"register_operand\")\n-\t(truncate:V32QI\n-\t  (lshiftrt:V32HI\n-\t    (plus:V32HI\n-\t      (plus:V32HI\n-\t\t(zero_extend:V32HI\n-\t\t  (match_operand:V32QI 1 \"nonimmediate_operand\"))\n-\t\t(zero_extend:V32HI\n-\t\t  (match_operand:V32QI 2 \"nonimmediate_operand\")))\n-\t      (const_vector:V32QI [(const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)]))\n-\t    (const_int 1))))]\n-  \"TARGET_AVX2\"\n-  \"ix86_fixup_binary_operands_no_copy (PLUS, V32QImode, operands);\")\n-\n-(define_expand \"sse2_uavgv16qi3\"\n-  [(set (match_operand:V16QI 0 \"register_operand\")\n-\t(truncate:V16QI\n-\t  (lshiftrt:V16HI\n-\t    (plus:V16HI\n-\t      (plus:V16HI\n-\t\t(zero_extend:V16HI\n-\t\t  (match_operand:V16QI 1 \"nonimmediate_operand\"))\n-\t\t(zero_extend:V16HI\n-\t\t  (match_operand:V16QI 2 \"nonimmediate_operand\")))\n-\t      (const_vector:V16QI [(const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)]))\n-\t    (const_int 1))))]\n-  \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands_no_copy (PLUS, V16QImode, operands);\")\n-\n-(define_insn \"*avx2_uavgv32qi3\"\n-  [(set (match_operand:V32QI 0 \"register_operand\" \"=x\")\n-\t(truncate:V32QI\n-\t  (lshiftrt:V32HI\n-\t    (plus:V32HI\n-\t      (plus:V32HI\n-\t\t(zero_extend:V32HI\n-\t\t  (match_operand:V32QI 1 \"nonimmediate_operand\" \"%x\"))\n-\t\t(zero_extend:V32HI\n-\t\t  (match_operand:V32QI 2 \"nonimmediate_operand\" \"xm\")))\n-\t      (const_vector:V32QI [(const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)]))\n-\t    (const_int 1))))]\n-  \"TARGET_AVX2 && ix86_binary_operator_ok (PLUS, V32QImode, operands)\"\n-  \"vpavgb\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"OI\")])\n-\n-(define_insn \"*sse2_uavgv16qi3\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x\")\n-\t(truncate:V16QI\n-\t  (lshiftrt:V16HI\n-\t    (plus:V16HI\n-\t      (plus:V16HI\n-\t\t(zero_extend:V16HI\n-\t\t  (match_operand:V16QI 1 \"nonimmediate_operand\" \"%0,x\"))\n-\t\t(zero_extend:V16HI\n-\t\t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,xm\")))\n-\t      (const_vector:V16QI [(const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)]))\n-\t    (const_int 1))))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V16QImode, operands)\"\n-  \"@\n-   pavgb\\t{%2, %0|%0, %2}\n-   vpavgb\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_expand \"avx2_uavgv16hi3\"\n-  [(set (match_operand:V16HI 0 \"register_operand\")\n-\t(truncate:V16HI\n-\t  (lshiftrt:V16SI\n-\t    (plus:V16SI\n-\t      (plus:V16SI\n-\t\t(zero_extend:V16SI\n-\t\t  (match_operand:V16HI 1 \"nonimmediate_operand\"))\n-\t\t(zero_extend:V16SI\n-\t\t  (match_operand:V16HI 2 \"nonimmediate_operand\")))\n-\t      (const_vector:V16HI [(const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)]))\n-\t    (const_int 1))))]\n-  \"TARGET_AVX2\"\n-  \"ix86_fixup_binary_operands_no_copy (PLUS, V16HImode, operands);\")\n-\n-(define_expand \"sse2_uavgv8hi3\"\n-  [(set (match_operand:V8HI 0 \"register_operand\")\n-\t(truncate:V8HI\n-\t  (lshiftrt:V8SI\n-\t    (plus:V8SI\n-\t      (plus:V8SI\n-\t\t(zero_extend:V8SI\n-\t\t  (match_operand:V8HI 1 \"nonimmediate_operand\"))\n-\t\t(zero_extend:V8SI\n-\t\t  (match_operand:V8HI 2 \"nonimmediate_operand\")))\n-\t      (const_vector:V8HI [(const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)]))\n+(define_expand \"<sse2_avx2>_uavg<mode>3\"\n+  [(set (match_operand:VI12_AVX2 0 \"register_operand\")\n+\t(truncate:VI12_AVX2\n+\t  (lshiftrt:<ssedoublemode>\n+\t    (plus:<ssedoublemode>\n+\t      (plus:<ssedoublemode>\n+\t\t(zero_extend:<ssedoublemode>\n+\t\t  (match_operand:VI12_AVX2 1 \"nonimmediate_operand\"))\n+\t\t(zero_extend:<ssedoublemode>\n+\t\t  (match_operand:VI12_AVX2 2 \"nonimmediate_operand\")))\n+\t      (match_dup 3))\n \t    (const_int 1))))]\n   \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands_no_copy (PLUS, V8HImode, operands);\")\n-\n-(define_insn \"*avx2_uavgv16hi3\"\n-  [(set (match_operand:V16HI 0 \"register_operand\" \"=x\")\n-\t(truncate:V16HI\n-\t  (lshiftrt:V16SI\n-\t    (plus:V16SI\n-\t      (plus:V16SI\n-\t\t(zero_extend:V16SI\n-\t\t  (match_operand:V16HI 1 \"nonimmediate_operand\" \"%x\"))\n-\t\t(zero_extend:V16SI\n-\t\t  (match_operand:V16HI 2 \"nonimmediate_operand\" \"xm\")))\n-\t      (const_vector:V16HI [(const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)]))\n-\t    (const_int 1))))]\n-  \"TARGET_AVX2 && ix86_binary_operator_ok (PLUS, V16HImode, operands)\"\n-  \"vpavgw\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"OI\")])\n+{\n+  operands[3] = CONST1_RTX(<MODE>mode);\n+  ix86_fixup_binary_operands_no_copy (PLUS, <MODE>mode, operands);\n+})\n \n-(define_insn \"*sse2_uavgv8hi3\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n-\t(truncate:V8HI\n-\t  (lshiftrt:V8SI\n-\t    (plus:V8SI\n-\t      (plus:V8SI\n-\t\t(zero_extend:V8SI\n-\t\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"%0,x\"))\n-\t\t(zero_extend:V8SI\n-\t\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\")))\n-\t      (const_vector:V8HI [(const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)]))\n+(define_insn \"*<sse2_avx2>_uavg<mode>3\"\n+  [(set (match_operand:VI12_AVX2 0 \"register_operand\" \"=x,x\")\n+\t(truncate:VI12_AVX2\n+\t  (lshiftrt:<ssedoublemode>\n+\t    (plus:<ssedoublemode>\n+\t      (plus:<ssedoublemode>\n+\t\t(zero_extend:<ssedoublemode>\n+\t\t  (match_operand:VI12_AVX2 1 \"nonimmediate_operand\" \"%0,x\"))\n+\t\t(zero_extend:<ssedoublemode>\n+\t\t  (match_operand:VI12_AVX2 2 \"nonimmediate_operand\" \"xm,xm\")))\n+\t      (match_operand:VI12_AVX2 3 \"const1_operand\"))\n \t    (const_int 1))))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V8HImode, operands)\"\n+  \"TARGET_SSE2 && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n   \"@\n-   pavgw\\t{%2, %0|%0, %2}\n-   vpavgw\\t{%2, %1, %0|%0, %1, %2}\"\n+   pavg<ssemodesuffix>\\t{%2, %0|%0, %2}\n+   vpavg<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_data16\" \"1,*\")\n    (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"TI\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n ;; The correct representation for this is absolutely enormous, and\n ;; surely not generally useful.\n@@ -8366,31 +8203,30 @@\n    (set (attr \"prefix_rex\") (symbol_ref \"x86_extended_reg_mentioned_p (insn)\"))\n    (set_attr \"mode\" \"DI\")])\n \n-(define_expand \"avx2_umulhrswv16hi3\"\n-  [(set (match_operand:V16HI 0 \"register_operand\")\n-\t(truncate:V16HI\n-\t  (lshiftrt:V16SI\n-\t    (plus:V16SI\n-\t      (lshiftrt:V16SI\n-\t\t(mult:V16SI\n-\t\t  (sign_extend:V16SI\n-\t\t    (match_operand:V16HI 1 \"nonimmediate_operand\"))\n-\t\t  (sign_extend:V16SI\n-\t\t    (match_operand:V16HI 2 \"nonimmediate_operand\")))\n+(define_mode_iterator PMULHRSW\n+  [V4HI V8HI (V16HI \"TARGET_AVX2\")])\n+\n+(define_expand \"<ssse3_avx2>_pmulhrsw<mode>3\"\n+  [(set (match_operand:PMULHRSW 0 \"register_operand\")\n+\t(truncate:PMULHRSW\n+\t  (lshiftrt:<ssedoublemode>\n+\t    (plus:<ssedoublemode>\n+\t      (lshiftrt:<ssedoublemode>\n+\t\t(mult:<ssedoublemode>\n+\t\t  (sign_extend:<ssedoublemode>\n+\t\t    (match_operand:PMULHRSW 1 \"nonimmediate_operand\"))\n+\t\t  (sign_extend:<ssedoublemode>\n+\t\t    (match_operand:PMULHRSW 2 \"nonimmediate_operand\")))\n \t\t(const_int 14))\n-\t      (const_vector:V16HI [(const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)]))\n+\t      (match_dup 3))\n \t    (const_int 1))))]\n   \"TARGET_AVX2\"\n-  \"ix86_fixup_binary_operands_no_copy (MULT, V16HImode, operands);\")\n+{\n+  operands[3] = CONST1_RTX(<MODE>mode);\n+  ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\n+})\n \n-(define_insn \"*avx2_umulhrswv16hi3\"\n+(define_insn \"*avx2_pmulhrswv16hi3\"\n   [(set (match_operand:V16HI 0 \"register_operand\" \"=x\")\n \t(truncate:V16HI\n \t  (lshiftrt:V16SI\n@@ -8402,14 +8238,7 @@\n \t\t  (sign_extend:V16SI\n \t\t    (match_operand:V16HI 2 \"nonimmediate_operand\" \"xm\")))\n \t\t(const_int 14))\n-\t      (const_vector:V16HI [(const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)\n-\t\t\t\t   (const_int 1) (const_int 1)]))\n+\t      (match_operand:V16HI 3 \"const1_operand\"))\n \t    (const_int 1))))]\n   \"TARGET_AVX2 && ix86_binary_operator_ok (MULT, V16HImode, operands)\"\n   \"vpmulhrsw\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -8418,26 +8247,6 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_expand \"ssse3_pmulhrswv8hi3\"\n-  [(set (match_operand:V8HI 0 \"register_operand\")\n-\t(truncate:V8HI\n-\t  (lshiftrt:V8SI\n-\t    (plus:V8SI\n-\t      (lshiftrt:V8SI\n-\t\t(mult:V8SI\n-\t\t  (sign_extend:V8SI\n-\t\t    (match_operand:V8HI 1 \"nonimmediate_operand\"))\n-\t\t  (sign_extend:V8SI\n-\t\t    (match_operand:V8HI 2 \"nonimmediate_operand\")))\n-\t\t(const_int 14))\n-\t      (const_vector:V8HI [(const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)]))\n-\t    (const_int 1))))]\n-  \"TARGET_SSSE3\"\n-  \"ix86_fixup_binary_operands_no_copy (MULT, V8HImode, operands);\")\n-\n (define_insn \"*ssse3_pmulhrswv8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n \t(truncate:V8HI\n@@ -8450,10 +8259,7 @@\n \t\t  (sign_extend:V8SI\n \t\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\")))\n \t\t(const_int 14))\n-\t      (const_vector:V8HI [(const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)]))\n+\t      (match_operand:V8HI 3 \"const1_operand\"))\n \t    (const_int 1))))]\n   \"TARGET_SSSE3 && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n   \"@\n@@ -8466,24 +8272,6 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"ssse3_pmulhrswv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\")\n-\t(truncate:V4HI\n-\t  (lshiftrt:V4SI\n-\t    (plus:V4SI\n-\t      (lshiftrt:V4SI\n-\t\t(mult:V4SI\n-\t\t  (sign_extend:V4SI\n-\t\t    (match_operand:V4HI 1 \"nonimmediate_operand\"))\n-\t\t  (sign_extend:V4SI\n-\t\t    (match_operand:V4HI 2 \"nonimmediate_operand\")))\n-\t\t(const_int 14))\n-\t      (const_vector:V4HI [(const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)]))\n-\t    (const_int 1))))]\n-  \"TARGET_SSSE3\"\n-  \"ix86_fixup_binary_operands_no_copy (MULT, V4HImode, operands);\")\n-\n (define_insn \"*ssse3_pmulhrswv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n \t(truncate:V4HI\n@@ -8496,8 +8284,7 @@\n \t\t  (sign_extend:V4SI\n \t\t    (match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")))\n \t\t(const_int 14))\n-\t      (const_vector:V4HI [(const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)]))\n+\t      (match_operand:V4HI 3 \"const1_operand\"))\n \t    (const_int 1))))]\n   \"TARGET_SSSE3 && ix86_binary_operator_ok (MULT, V4HImode, operands)\"\n   \"pmulhrsw\\t{%2, %0|%0, %2}\""}]}