{"sha": "e770bfd997bb5803b88ca4081bdbca3e250fc92e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc3MGJmZDk5N2JiNTgwM2I4OGNhNDA4MWJkYmNhM2UyNTBmYzkyZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-09-18T12:00:21Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-09-18T12:00:21Z"}, "message": "Fix i386 FP_TRAPPING_EXCEPTIONS.\n\nThe i386 sfp-machine.h defines FP_TRAPPING_EXCEPTIONS in a way that is\nalways wrong: it treats a set bit as indicating the exception is\ntrapping, when actually a set bit (both for 387 and SSE floating\npoint) indicates it is masked, and a clear bit indicates it is\ntrapping.  This patch fixes this bug.\n\nBootstrapped with no regressions on x86_64-unknown-linux-gnu.\n\nlibgcc:\n\t* config/i386/sfp-machine.h (FP_TRAPPING_EXCEPTIONS): Treat clear\n\tbits not set bits as indicating trapping exceptions.\n\ngcc/testsuite:\n\t* gcc.dg/torture/float128-exact-underflow.c: New test.\n\nFrom-SVN: r215347", "tree": {"sha": "f8eda81754a6c8acd78502eec0b4a7e3ff0fcef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8eda81754a6c8acd78502eec0b4a7e3ff0fcef7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e770bfd997bb5803b88ca4081bdbca3e250fc92e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e770bfd997bb5803b88ca4081bdbca3e250fc92e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e770bfd997bb5803b88ca4081bdbca3e250fc92e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e770bfd997bb5803b88ca4081bdbca3e250fc92e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5a260238027e86912c39df2147e345ca8a6ed26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5a260238027e86912c39df2147e345ca8a6ed26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5a260238027e86912c39df2147e345ca8a6ed26"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "41e5d2bfb62b5b39187753cb7f3e8efdcbdf1d2d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e770bfd997bb5803b88ca4081bdbca3e250fc92e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e770bfd997bb5803b88ca4081bdbca3e250fc92e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e770bfd997bb5803b88ca4081bdbca3e250fc92e", "patch": "@@ -1,3 +1,7 @@\n+2014-09-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/torture/float128-exact-underflow.c: New test.\n+\n 2014-09-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/61745"}, {"sha": "8d448cc511fdffceaffc80033dc55d66ad8c0908", "filename": "gcc/testsuite/gcc.dg/torture/float128-exact-underflow.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e770bfd997bb5803b88ca4081bdbca3e250fc92e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-exact-underflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e770bfd997bb5803b88ca4081bdbca3e250fc92e/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-exact-underflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffloat128-exact-underflow.c?ref=e770bfd997bb5803b88ca4081bdbca3e250fc92e", "patch": "@@ -0,0 +1,41 @@\n+/* Test that exact underflow in __float128 signals the underflow\n+   exception if trapping is enabled, but does not raise the flag\n+   otherwise.  */\n+\n+/* { dg-do run { target i?86-*-*gnu* x86_64-*-*gnu* ia64-*-*gnu* } } */\n+/* { dg-options \"-D_GNU_SOURCE\" } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+#include <setjmp.h>\n+#include <signal.h>\n+#include <stdlib.h>\n+\n+volatile sig_atomic_t caught_sigfpe;\n+sigjmp_buf buf;\n+\n+static void\n+handle_sigfpe (int sig)\n+{\n+  caught_sigfpe = 1;\n+  siglongjmp (buf, 1);\n+}\n+\n+int\n+main (void)\n+{\n+  volatile __float128 a = 0x1p-16382q, b = 0x1p-2q;\n+  volatile __float128 r;\n+  r = a * b;\n+  if (fetestexcept (FE_UNDERFLOW))\n+    abort ();\n+  if (r != 0x1p-16384q)\n+    abort ();\n+  feenableexcept (FE_UNDERFLOW);\n+  signal (SIGFPE, handle_sigfpe);\n+  if (sigsetjmp (buf, 1) == 0)\n+    r = a * b;\n+  if (!caught_sigfpe)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "fa432395c4e98bb6c4de89c488ccd7ea628ae5e6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e770bfd997bb5803b88ca4081bdbca3e250fc92e/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e770bfd997bb5803b88ca4081bdbca3e250fc92e/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e770bfd997bb5803b88ca4081bdbca3e250fc92e", "patch": "@@ -1,3 +1,8 @@\n+2014-09-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/i386/sfp-machine.h (FP_TRAPPING_EXCEPTIONS): Treat clear\n+\tbits not set bits as indicating trapping exceptions.\n+\n 2014-09-17  Nathan sidwell  <nathan@acm.org>\n \n \t* Makefile.in (LIBGCOV_INTERFACE): Add _gcov_dump from ..."}, {"sha": "8a1923b6c1a1d6f074cda8af925e79433f591bf5", "filename": "libgcc/config/i386/sfp-machine.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e770bfd997bb5803b88ca4081bdbca3e250fc92e/libgcc%2Fconfig%2Fi386%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e770bfd997bb5803b88ca4081bdbca3e250fc92e/libgcc%2Fconfig%2Fi386%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fsfp-machine.h?ref=e770bfd997bb5803b88ca4081bdbca3e250fc92e", "patch": "@@ -60,7 +60,7 @@ void __sfp_handle_exceptions (int);\n       __sfp_handle_exceptions (_fex);\t\t\\\n   } while (0);\n \n-#define FP_TRAPPING_EXCEPTIONS ((_fcw >> FP_EX_SHIFT) & FP_EX_ALL)\n+#define FP_TRAPPING_EXCEPTIONS ((~_fcw >> FP_EX_SHIFT) & FP_EX_ALL)\n \n #define FP_ROUNDMODE\t\t(_fcw & FP_RND_MASK)\n #endif"}]}