{"sha": "aafc151a206edfc9352ea637ec2f2bdb39003135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFmYzE1MWEyMDZlZGZjOTM1MmVhNjM3ZWMyZjJiZGIzOTAwMzEzNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T11:55:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T11:55:18Z"}, "message": "[multiple changes]\n\n2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb (First_Component): Update the assertion to allow\n\tfor concurrent types.\n\t(First_Component_Or_Discriminant): Update the assertion to allow for\n\tconcurrent types.\n\t* einfo.ads: Update the documentation of attributes First_Component\n\tand First_Component_Or_Discriminant along with uses in entities.\n\n2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_res.adb (Resolve_Actuals): An effectively\n\tvolatile object may act as an actual when the corresponding\n\tformal is of a non-scalar effectively volatile type, not just\n\ta non-scalar volatile type.\n\n2015-10-26  Bob Duff  <duff@adacore.com>\n\n\t* sinfo.ads, sem_util.ads: Update comments.\n\n2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Refined_Depends_Global_Post): When dealing with\n\tprotected entries or protected subprograms, use the enclosing protected\n\ttype to ensure that the protected type declaration is declared\n\tin a package spec. Remove an obsolete attempt to ensure the\n\taggregate for of pragma Refined_State as this routine is never\n\tcalled in that case.\n\n2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_Iterator_Loop_Over_Container): For\n\tan element iterator loop, the element is a constant if the\n\tcontainer object is a constant, even if the container type has\n\ta Variable_Indexing aspect.\n\nFrom-SVN: r229345", "tree": {"sha": "a0d33e85a976740060489adfbbda95e3ced09bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0d33e85a976740060489adfbbda95e3ced09bc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aafc151a206edfc9352ea637ec2f2bdb39003135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aafc151a206edfc9352ea637ec2f2bdb39003135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aafc151a206edfc9352ea637ec2f2bdb39003135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aafc151a206edfc9352ea637ec2f2bdb39003135/comments", "author": null, "committer": null, "parents": [{"sha": "477ee35f51115282b8eb56c0077e197f282b765e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477ee35f51115282b8eb56c0077e197f282b765e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477ee35f51115282b8eb56c0077e197f282b765e"}], "stats": {"total": 116, "additions": 83, "deletions": 33}, "files": [{"sha": "8951f1105e7dc86cee025262cbde143bd50fe089", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aafc151a206edfc9352ea637ec2f2bdb39003135", "patch": "@@ -1,3 +1,39 @@\n+2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb (First_Component): Update the assertion to allow\n+\tfor concurrent types.\n+\t(First_Component_Or_Discriminant): Update the assertion to allow for\n+\tconcurrent types.\n+\t* einfo.ads: Update the documentation of attributes First_Component\n+\tand First_Component_Or_Discriminant along with uses in entities.\n+\n+2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): An effectively\n+\tvolatile object may act as an actual when the corresponding\n+\tformal is of a non-scalar effectively volatile type, not just\n+\ta non-scalar volatile type.\n+\n+2015-10-26  Bob Duff  <duff@adacore.com>\n+\n+\t* sinfo.ads, sem_util.ads: Update comments.\n+\n+2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Refined_Depends_Global_Post): When dealing with\n+\tprotected entries or protected subprograms, use the enclosing protected\n+\ttype to ensure that the protected type declaration is declared\n+\tin a package spec. Remove an obsolete attempt to ensure the\n+\taggregate for of pragma Refined_State as this routine is never\n+\tcalled in that case.\n+\n+2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Iterator_Loop_Over_Container): For\n+\tan element iterator loop, the element is a constant if the\n+\tcontainer object is a constant, even if the container type has\n+\ta Variable_Indexing aspect.\n+\n 2015-10-26  Bob Duff  <duff@adacore.com>\n \n \t* s-fileio.adb (Fopen_Mode): Use \"r+\" for Out_File/Stream_IO,"}, {"sha": "c8e6fcfe71986232e433bb74109c616a78db4e9e", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=aafc151a206edfc9352ea637ec2f2bdb39003135", "patch": "@@ -6926,7 +6926,9 @@ package body Einfo is\n \n    begin\n       pragma Assert\n-        (Is_Record_Type (Id) or else Is_Incomplete_Or_Private_Type (Id));\n+        (Is_Concurrent_Type (Id)\n+          or else Is_Incomplete_Or_Private_Type (Id)\n+          or else Is_Record_Type (Id));\n \n       Comp_Id := First_Entity (Id);\n       while Present (Comp_Id) loop\n@@ -6946,8 +6948,9 @@ package body Einfo is\n \n    begin\n       pragma Assert\n-        (Is_Record_Type (Id)\n+        (Is_Concurrent_Type (Id)\n           or else Is_Incomplete_Or_Private_Type (Id)\n+          or else Is_Record_Type (Id)\n           or else Has_Discriminants (Id));\n \n       Comp_Id := First_Entity (Id);"}, {"sha": "21d700e20372763fa30ffa2acae0f27c3a42d4f1", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=aafc151a206edfc9352ea637ec2f2bdb39003135", "patch": "@@ -1286,14 +1286,15 @@ package Einfo is\n --       objects.\n \n --    First_Component (synthesized)\n---       Applies to record types. Returns the first component by following the\n---       chain of declared entities for the record until a component is found\n---       (one with an Ekind of E_Component). The discriminants are skipped. If\n---       the record is null, then Empty is returned.\n+--       Applies to incomplete, private, protected, record and task types.\n+--       Returns the first component by following the chain of declared\n+--       entities for the type a component is found (one with an Ekind of\n+--       E_Component). The discriminants are skipped. If the record is null,\n+--       then Empty is returned.\n \n --    First_Component_Or_Discriminant (synthesized)\n---      Similar to First_Component, but discriminants are not skipped, so will\n---      find the first discriminant if discriminants are present.\n+--       Similar to First_Component, but discriminants are not skipped, so will\n+--       find the first discriminant if discriminants are present.\n \n --    First_Entity (Node17)\n --       Defined in all entities which act as scopes to which a list of\n@@ -6263,6 +6264,8 @@ package Einfo is\n    --    SPARK_Pragma_Inherited              (Flag265)\n    --    Uses_Lock_Free                      (Flag188)\n    --    Uses_Sec_Stack                      (Flag95)   ???\n+   --    First_Component                     (synth)\n+   --    First_Component_Or_Discriminant     (synth)\n    --    Has_Entries                         (synth)\n    --    Has_Interrupt_Handler               (synth)\n    --    Number_Entries                      (synth)\n@@ -6410,6 +6413,8 @@ package Einfo is\n    --    SPARK_Aux_Pragma_Inherited          (Flag266)\n    --    SPARK_Pragma_Inherited              (Flag265)\n    --    Uses_Sec_Stack                      (Flag95)   ???\n+   --    First_Component                     (synth)\n+   --    First_Component_Or_Discriminant     (synth)\n    --    Has_Entries                         (synth)\n    --    Number_Entries                      (synth)\n    --    (plus type attributes)"}, {"sha": "dbefc051d4787c163c4b572b83ab1b853e6f793b", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=aafc151a206edfc9352ea637ec2f2bdb39003135", "patch": "@@ -3864,10 +3864,14 @@ package body Exp_Ch5 is\n             Set_Debug_Info_Needed (Id);\n \n             --  If the container does not have a variable indexing aspect,\n-            --  the element is a constant in the loop.\n+            --  the element is a constant in the loop. The container itself\n+            --  may be constant, in which case the element is a constant as\n+            --  well. The container has been rewritten as a call to Iterate,\n+            --  so examine original node.\n \n             if No (Find_Value_Of_Aspect\n                      (Container_Typ, Aspect_Variable_Indexing))\n+              or else not Is_Variable (Original_Node (Container))\n             then\n                Set_Ekind (Id, E_Constant);\n             end if;"}, {"sha": "3972ac35d6d5cc810a9d73216aec301de6dda21c", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=aafc151a206edfc9352ea637ec2f2bdb39003135", "patch": "@@ -3879,17 +3879,22 @@ package body Sem_Prag is\n             return;\n          end if;\n \n-         --  The pragma can only apply to the body [stub] of a subprogram\n+         --  A refined pragma can only apply to the body [stub] of a subprogram\n          --  declared in the visible part of a package. Retrieve the context of\n          --  the subprogram declaration.\n \n          Spec_Decl := Unit_Declaration_Node (Spec_Id);\n \n-         --  The proper context of a entry declaration is the declaration of\n-         --  the enclosing synchronized type.\n+         --  When dealing with protected entries or protected subprograms, use\n+         --  the enclosing protected type as the proper context.\n \n-         if Nkind (Spec_Decl) = N_Entry_Declaration then\n-            Spec_Decl := Parent (Parent (Spec_Decl));\n+         if Ekind_In (Spec_Id, E_Entry,\n+                               E_Entry_Family,\n+                               E_Function,\n+                               E_Procedure)\n+           and then Ekind (Scope (Spec_Id)) = E_Protected_Type\n+         then\n+            Spec_Decl := Declaration_Node (Scope (Spec_Id));\n          end if;\n \n          if Nkind (Parent (Spec_Decl)) /= N_Package_Specification then\n@@ -3908,10 +3913,7 @@ package body Sem_Prag is\n \n          Mark_Pragma_As_Ghost (N, Spec_Id);\n \n-         if Nam_In (Pname, Name_Refined_Depends,\n-                           Name_Refined_Global,\n-                           Name_Refined_State)\n-         then\n+         if Nam_In (Pname, Name_Refined_Depends, Name_Refined_Global) then\n             Ensure_Aggregate_Form (Get_Argument (N, Spec_Id));\n          end if;\n       end Analyze_Refined_Depends_Global_Post;"}, {"sha": "3ecc33b9dc7044c2c4b5f5cb48b7fa040809aa17", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=aafc151a206edfc9352ea637ec2f2bdb39003135", "patch": "@@ -4465,11 +4465,11 @@ package body Sem_Res is\n               and then Is_Effectively_Volatile_Object (A)\n             then\n                --  An effectively volatile object may act as an actual when the\n-               --  corresponding formal is of a non-scalar volatile type\n-               --  (SPARK RM 7.1.3(12)).\n+               --  corresponding formal is of a non-scalar effectively volatile\n+               --  type (SPARK RM 7.1.3(12)).\n \n-               if Is_Volatile (Etype (F))\n-                 and then not Is_Scalar_Type (Etype (F))\n+               if not Is_Scalar_Type (Etype (F))\n+                 and then Is_Effectively_Volatile (Etype (F))\n                then\n                   null;\n "}, {"sha": "570ecf80d3540af845734ff6c9e7fb2e4343360b", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=aafc151a206edfc9352ea637ec2f2bdb39003135", "patch": "@@ -741,16 +741,16 @@ package Sem_Util is\n    --  alternatives, and the warnings that may apply to them, are removed.\n \n    function First_Actual (Node : Node_Id) return Node_Id;\n-   --  Node is an N_Function_Call or N_Procedure_Call_Statement node. The\n-   --  result returned is the first actual parameter in declaration order\n-   --  (not the order of parameters as they appeared in the source, which\n-   --  can be quite different as a result of the use of named parameters).\n-   --  Empty is returned for a call with no parameters. The procedure for\n-   --  iterating through the actuals in declaration order is to use this\n-   --  function to find the first actual, and then use Next_Actual to obtain\n-   --  the next actual in declaration order. Note that the value returned\n-   --  is always the expression (not the N_Parameter_Association nodes,\n-   --  even if named association is used).\n+   --  Node is an N_Function_Call, N_Procedure_Call_Statement or\n+   --  N_Entry_Call_Statement node. The result returned is the first actual\n+   --  parameter in declaration order (not the order of parameters as they\n+   --  appeared in the source, which can be quite different as a result of the\n+   --  use of named parameters). Empty is returned for a call with no\n+   --  parameters. The procedure for iterating through the actuals in\n+   --  declaration order is to use this function to find the first actual, and\n+   --  then use Next_Actual to obtain the next actual in declaration order.\n+   --  Note that the value returned is always the expression (not the\n+   --  N_Parameter_Association nodes, even if named association is used).\n \n    procedure Gather_Components\n      (Typ           : Entity_Id;"}, {"sha": "ab76d2c80ab31019cd1ba59afd56ffe2f4a55464", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aafc151a206edfc9352ea637ec2f2bdb39003135/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=aafc151a206edfc9352ea637ec2f2bdb39003135", "patch": "@@ -3700,7 +3700,7 @@ package Sinfo is\n       --  node. See description of this node in the section on semantic nodes.\n \n       --  N_Selected_Component\n-      --  Sloc points to period\n+      --  Sloc points to the period\n       --  Prefix (Node3)\n       --  Selector_Name (Node2)\n       --  Associated_Node (Node4-Sem)"}]}