{"sha": "0cab70604cfda30bc64351b39493ef884ff7ba10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNhYjcwNjA0Y2ZkYTMwYmM2NDM1MWIzOTQ5M2VmODg0ZmY3YmExMA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-11-25T12:03:52Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-11-25T18:57:39Z"}, "message": "Fix templatized C++ OpenACC 'cache' directive ICEs\n\nThis has been broken forever, whoops...\n\n\tgcc/cp/\n\t* pt.c (tsubst_omp_clauses): Handle 'OMP_CLAUSE__CACHE_'.\n\t(tsubst_expr): Handle 'OACC_CACHE'.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/cache-1.c: Update.\n\t* c-c++-common/goacc/cache-2.c: Likewise.\n\t* g++.dg/goacc/cache-1.C: New.\n\t* g++.dg/goacc/cache-2.C: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c++/cache-1.C: New.\n\t* testsuite/libgomp.oacc-c-c++-common/cache-1.c: Update.", "tree": {"sha": "c80b71b219a7be10a77e93166f87271ad0a1e1d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c80b71b219a7be10a77e93166f87271ad0a1e1d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cab70604cfda30bc64351b39493ef884ff7ba10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cab70604cfda30bc64351b39493ef884ff7ba10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cab70604cfda30bc64351b39493ef884ff7ba10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cab70604cfda30bc64351b39493ef884ff7ba10/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4919ed711c1d02845f2843f6b0a70c27f9e6d434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4919ed711c1d02845f2843f6b0a70c27f9e6d434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4919ed711c1d02845f2843f6b0a70c27f9e6d434"}], "stats": {"total": 134, "additions": 121, "deletions": 13}, "files": [{"sha": "4fb0bc82c31e499f4be07a8179274d1e954a59ff", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cab70604cfda30bc64351b39493ef884ff7ba10/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cab70604cfda30bc64351b39493ef884ff7ba10/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0cab70604cfda30bc64351b39493ef884ff7ba10", "patch": "@@ -17245,6 +17245,7 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \tcase OMP_CLAUSE_FROM:\n \tcase OMP_CLAUSE_TO:\n \tcase OMP_CLAUSE_MAP:\n+\tcase OMP_CLAUSE__CACHE_:\n \tcase OMP_CLAUSE_NONTEMPORAL:\n \tcase OMP_CLAUSE_USE_DEVICE_PTR:\n \tcase OMP_CLAUSE_USE_DEVICE_ADDR:\n@@ -18761,6 +18762,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       add_stmt (t);\n       break;\n \n+    case OACC_CACHE:\n     case OACC_ENTER_DATA:\n     case OACC_EXIT_DATA:\n     case OACC_UPDATE:"}, {"sha": "242f3c612fdf5e6822c5147dfc052b4bba2b6eb2", "filename": "gcc/testsuite/c-c++-common/goacc/cache-1.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cab70604cfda30bc64351b39493ef884ff7ba10/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cab70604cfda30bc64351b39493ef884ff7ba10/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-1.c?ref=0cab70604cfda30bc64351b39493ef884ff7ba10", "patch": "@@ -1,9 +1,15 @@\n-/* OpenACC cache directive: valid usage.  */\n-/* For execution testing, this file is \"#include\"d from\n-   libgomp/testsuite/libgomp.oacc-c-c++-common/cache-1.c.  */\n+/* OpenACC 'cache' directive: valid usage.  */\n \n-int\n-main (int argc, char **argv)\n+/* See also corresponding C++ variant: '../../g++.dg/goacc/cache-1.C'.  */\n+\n+/* For execution testing, this file is '#include'd from\n+   '../../../../libgomp/testsuite/libgomp.oacc-c-c++-common/cache-1.c'.  */\n+\n+#ifdef TEMPLATIZE\n+template <int N>\n+#endif\n+static void\n+test ()\n {\n #define N   2\n     int a[N], b[N];\n@@ -61,6 +67,4 @@ main (int argc, char **argv)\n         if (a[i] != b[i])\n             __builtin_abort ();\n     }\n-\n-    return 0;\n }"}, {"sha": "80b925e5112553eba9a3f5fa08309cb54d5ebaa7", "filename": "gcc/testsuite/c-c++-common/goacc/cache-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cab70604cfda30bc64351b39493ef884ff7ba10/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cab70604cfda30bc64351b39493ef884ff7ba10/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcache-2.c?ref=0cab70604cfda30bc64351b39493ef884ff7ba10", "patch": "@@ -1,7 +1,9 @@\n-/* OpenACC cache directive: invalid usage.  */\n+/* OpenACC 'cache' directive: invalid usage.  */\n \n-int\n-main (int argc, char **argv)\n+/* See also corresponding C++ variant: '../../g++.dg/goacc/cache-2.C'.  */\n+\n+static void\n+test ()\n {\n #define N   2\n     int a[N], b[N];\n@@ -52,6 +54,4 @@ main (int argc, char **argv)\n         if (a[i] != b[i])\n             __builtin_abort ();\n     }\n-\n-    return 0;\n }"}, {"sha": "a8d5ab320166a0bfc0804435478b60465ca2cefa", "filename": "gcc/testsuite/g++.dg/goacc/cache-1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cab70604cfda30bc64351b39493ef884ff7ba10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fcache-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cab70604cfda30bc64351b39493ef884ff7ba10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fcache-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fcache-1.C?ref=0cab70604cfda30bc64351b39493ef884ff7ba10", "patch": "@@ -0,0 +1,15 @@\n+/* OpenACC 'cache' directive: valid usage.  */\n+\n+/* See also corresponding C/C++ variant '../../c-c++-common/goacc/cache-1.c'.  */\n+\n+/* For execution testing, this file is '#include'd from\n+   '../../../../libgomp/testsuite/libgomp.oacc-c++/cache-1.C'.  */\n+\n+#define TEMPLATIZE\n+#include \"../../c-c++-common/goacc/cache-1.c\"\n+\n+static void\n+instantiate ()\n+{\n+  &test<0>;\n+}"}, {"sha": "ef0b8a9e76ffe2939e3521fa0f20c06c6e673051", "filename": "gcc/testsuite/g++.dg/goacc/cache-2.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cab70604cfda30bc64351b39493ef884ff7ba10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fcache-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cab70604cfda30bc64351b39493ef884ff7ba10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fcache-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fcache-2.C?ref=0cab70604cfda30bc64351b39493ef884ff7ba10", "patch": "@@ -0,0 +1,64 @@\n+/* OpenACC 'cache' directive: invalid usage.  */\n+\n+/* See also corresponding C/C++ variant '../../c-c++-common/goacc/cache-2.c'.  */\n+\n+template <int N>\n+static void\n+test ()\n+{\n+#define N   2\n+    int a[N], b[N];\n+    int i;\n+\n+    for (i = 0; i < N; i++)\n+    {\n+        a[i] = 3;\n+        b[i] = 0;\n+    }\n+\n+#pragma acc parallel copyin (a[0:N]) copyout (b[0:N])\n+{\n+    int ii;\n+\n+    for (ii = 0; ii < N; ii++)\n+    {\n+        const int idx = ii;\n+        int n = 1;\n+        const int len = n;\n+\n+#pragma acc cache /* { dg-error \"expected '\\\\\\(' before end of line\" } */\n+#pragma acc cache a[0:N] /* { dg-error \"expected '\\\\\\(' before 'a'\" } */\n+\t/* { dg-bogus \"expected end of line before 'a'\" \"\" { xfail c++ } .-1 } */\n+#pragma acc cache (a) /* { dg-error \"expected '\\\\\\['\" } */\n+#pragma acc cache ( /* { dg-error \"expected (identifier|unqualified-id) before end of line\" } */\n+#pragma acc cache () /* { dg-error \"expected (identifier|unqualified-id) before '\\\\\\)' token\" } */\n+#pragma acc cache (,) /* { dg-error \"expected (identifier|unqualified-id) before '(,|\\\\\\))' token\" } */\n+#pragma acc cache (a[0:N] /* { dg-error \"expected '\\\\\\)' before end of line\" } */\n+#pragma acc cache (a[0:N],) /* { dg-error \"expected (identifier|unqualified-id) before '(,|\\\\\\))' token\" \"\" { xfail c } } */\n+#pragma acc cache (a[0:N]) copyin (a[0:N]) /* { dg-error \"expected end of line before 'copyin'\" } */\n+#pragma acc cache () /* { dg-error \"expected (identifier|unqualified-id) before '\\\\\\)' token\" } */\n+#pragma acc cache (a[0:N] b[0:N]) /* { dg-error \"expected '\\\\\\)' before 'b'\" } */\n+#pragma acc cache (a[0:N] b[0:N}) /* { dg-error \"expected '\\\\\\)' before 'b'\" } */\n+\t/* { dg-bogus \"expected end of line before '\\\\\\}' token\" \"\" { xfail c++ } .-1 } */\n+#pragma acc cache (a[0:N] /* { dg-error \"expected '\\\\\\)' before end of line\" } */\n+#pragma acc cache (a[0:N]) ( /* { dg-error \"expected end of line before '\\\\(' token\" } */\n+#pragma acc cache (a[0:N]) ii /* { dg-error \"expected end of line before 'ii'\" } */\n+#pragma acc cache (a[0:N] ii) /* { dg-error \"expected '\\\\)' before 'ii'\" } */\n+\n+        b[ii] = a[ii];\n+    }\n+}\n+\n+\n+    for (i = 0; i < N; i++)\n+    {\n+        if (a[i] != b[i])\n+            __builtin_abort ();\n+    }\n+}\n+\n+static void\n+instantiate ()\n+{\n+  &test<0>;\n+}"}, {"sha": "fcb1f84eef9de986240cb17d59fc37929fa42657", "filename": "libgomp/testsuite/libgomp.oacc-c++/cache-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cab70604cfda30bc64351b39493ef884ff7ba10/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fcache-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cab70604cfda30bc64351b39493ef884ff7ba10/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fcache-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fcache-1.C?ref=0cab70604cfda30bc64351b39493ef884ff7ba10", "patch": "@@ -0,0 +1,13 @@\n+/* OpenACC 'cache' directive.  */\n+\n+/* See also corresponding C/C++ variant '../libgomp.oacc-c-c++-common/cache-1.c'.  */\n+\n+#include \"../../../gcc/testsuite/g++.dg/goacc/cache-1.C\"\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  test<0> ();\n+\n+  return 0;\n+}"}, {"sha": "c0dddb3c4f35f056de22ee069e12eef63fdea506", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/cache-1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cab70604cfda30bc64351b39493ef884ff7ba10/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcache-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cab70604cfda30bc64351b39493ef884ff7ba10/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcache-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcache-1.c?ref=0cab70604cfda30bc64351b39493ef884ff7ba10", "patch": "@@ -1,3 +1,13 @@\n-/* OpenACC cache directive.  */\n+/* OpenACC 'cache' directive.  */\n+\n+/* See also corresponding C++ variant '../libgomp.oacc-c++/cache-1.C'.  */\n \n #include \"../../../gcc/testsuite/c-c++-common/goacc/cache-1.c\"\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  test ();\n+\n+  return 0;\n+}"}]}