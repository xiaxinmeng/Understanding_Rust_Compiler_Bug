{"sha": "a942dfca6a19d79a7c849f1c00a5da61e89600a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk0MmRmY2E2YTE5ZDc5YTdjODQ5ZjFjMDBhNWRhNjFlODk2MDBhOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-11-22T13:42:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-11-22T13:42:39Z"}, "message": "PR libstdc++/87520 Always pass type-punned type_info reference\n\nThe implementations of std::make_shared for -frtti and -fno-rtti are not\ncompatible, because they pass different arguments to\n_Sp_counted_ptr_inplace::_M_get_deleter and so can't interoperate.\nEither the argument doesn't match the expected value, and so the\nshared_ptr::_M_ptr member is never set, or the type-punned reference is\ntreated as a real std::type_info object and gets dereferenced.\n\nThis patch removes the differences between -frtti and -fno-rtti, so that\ntypeid is never used, and the type-punned reference is used in both\ncases. For backwards compatibility with existing code that passes\ntypeid(_Sp_make_shared_tag) that still needs to be handled, but only\nafter checking that the argument is not the type-punned reference (so\nit's safe to treat as a real std::type_info object). The reference is\nbound to an object of literal type, so that it doesn't need a guard\nvariable to make its initialization thread-safe.\n\nThis patch also fixes 87520 by ensuring that the type-punned reference\nis bound to \"a region of storage of suitable size and alignment to\ncontain an object of the reference's type\" (as per the proposed\nresolution of Core DR 453).\n\nIf all objects are built with the fixed version of GCC then -frtti and\n-fno-rtti can be mixed freely and std::make_shared will work correctly.\nIf some objects are built with unfixed GCC versions then problems can\nstill arise, depending on which template instantiations are kept by the\nlinker.\n\n\tPR libstdc++/85930\n\tPR libstdc++/87520\n\t* include/bits/shared_ptr_base.h (_Sp_make_shared_tag::_S_ti)\n\t[__cpp_rtti]: Define even when RTTI is enabled. Use array of\n\tsizeof(type_info) so that type-punned reference binds to an object\n\tof the correct size as well as correct alignment.\n\t(_Sp_counted_ptr_inplace::_M_get_deleter) [__cpp_rtti]: Check for\n\t_S_ti() reference even when RTTI is enabled.\n\t(__shared_ptr(_Sp_make_shared_tag, const _Alloc&, _Args&&...))\n\t[__cpp_rtti]: Pass _S_ti() instead of typeid(_Sp_make_shared_tag).\n\nFrom-SVN: r266376", "tree": {"sha": "53f44010fde467a88e1b5a6e6abde1770d7ca576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53f44010fde467a88e1b5a6e6abde1770d7ca576"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a942dfca6a19d79a7c849f1c00a5da61e89600a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a942dfca6a19d79a7c849f1c00a5da61e89600a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a942dfca6a19d79a7c849f1c00a5da61e89600a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a942dfca6a19d79a7c849f1c00a5da61e89600a8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8589077793df1bfc915bd4f341ae9f6f127291b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8589077793df1bfc915bd4f341ae9f6f127291b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8589077793df1bfc915bd4f341ae9f6f127291b"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "267ec3999f2b40fd4bbfa9244aa2c3acf0d900e4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a942dfca6a19d79a7c849f1c00a5da61e89600a8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a942dfca6a19d79a7c849f1c00a5da61e89600a8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a942dfca6a19d79a7c849f1c00a5da61e89600a8", "patch": "@@ -1,3 +1,16 @@\n+2018-11-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/85930\n+\tPR libstdc++/87520\n+\t* include/bits/shared_ptr_base.h (_Sp_make_shared_tag::_S_ti)\n+\t[__cpp_rtti]: Define even when RTTI is enabled. Use array of\n+\tsizeof(type_info) so that type-punned reference binds to an object\n+\tof the correct size as well as correct alignment.\n+\t(_Sp_counted_ptr_inplace::_M_get_deleter) [__cpp_rtti]: Check for\n+\t_S_ti() reference even when RTTI is enabled.\n+\t(__shared_ptr(_Sp_make_shared_tag, const _Alloc&, _Args&&...))\n+\t[__cpp_rtti]: Pass _S_ti() instead of typeid(_Sp_make_shared_tag).\n+\n 2018-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/87386"}, {"sha": "46ff4a7cf291841b1e41696e3913395396dd26ae", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a942dfca6a19d79a7c849f1c00a5da61e89600a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a942dfca6a19d79a7c849f1c00a5da61e89600a8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=a942dfca6a19d79a7c849f1c00a5da61e89600a8", "patch": "@@ -500,7 +500,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   struct _Sp_make_shared_tag\n   {\n-#if !__cpp_rtti\n   private:\n     template<typename _Tp, _Lock_policy _Lp>\n       friend class __shared_ptr;\n@@ -510,10 +509,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     static const type_info&\n     _S_ti() noexcept _GLIBCXX_VISIBILITY(default)\n     {\n-      alignas(type_info) static constexpr _Sp_make_shared_tag __tag;\n+      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };\n       return reinterpret_cast<const type_info&>(__tag);\n     }\n-#endif\n   };\n \n   template<typename _Tp, typename _Alloc, _Lock_policy _Lp>\n@@ -562,16 +560,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tthis->~_Sp_counted_ptr_inplace();\n       }\n \n-      // Sneaky trick so __shared_ptr can get the managed pointer\n+      // Sneaky trick so __shared_ptr can get the managed pointer.\n       virtual void*\n-      _M_get_deleter(const std::type_info& __ti) noexcept\n+      _M_get_deleter(const std::type_info& __ti) noexcept override\n       {\n-#if __cpp_rtti\n-\tif (__ti == typeid(_Sp_make_shared_tag))\n-#else\n+\t// Check for the fake type_info first, so we don't try to access it\n+\t// as a real type_info object.\n \tif (&__ti == &_Sp_make_shared_tag::_S_ti())\n-#endif\n \t  return const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());\n+#if __cpp_rtti\n+\t// Callers compiled with old libstdc++ headers and RTTI enabled\n+\t// might pass this instead:\n+\telse if (__ti == typeid(_Sp_make_shared_tag))\n+\t  return const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());\n+#endif\n \treturn nullptr;\n       }\n \n@@ -1323,11 +1325,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  // _M_ptr needs to point to the newly constructed object.\n \t  // This relies on _Sp_counted_ptr_inplace::_M_get_deleter.\n-#if __cpp_rtti\n-\t  void* __p = _M_refcount._M_get_deleter(typeid(__tag));\n-#else\n \t  void* __p = _M_refcount._M_get_deleter(_Sp_make_shared_tag::_S_ti());\n-#endif\n \t  _M_ptr = static_cast<_Tp*>(__p);\n \t  _M_enable_shared_from_this_with(_M_ptr);\n \t}"}]}