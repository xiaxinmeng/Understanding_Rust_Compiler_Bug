{"sha": "cf02f8a350498eed424aea4a2fff2cbfd646fd61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YwMmY4YTM1MDQ5OGVlZDQyNGFlYTRhMmZmZjJjYmZkNjQ2ZmQ2MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-02-26T10:55:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-02-26T10:55:16Z"}, "message": "opt77.adb: New test.\n\n\t* gnat.dg/opt77.adb: New test.\n\t* gnat.dg/opt77_pkg.ad[sb]: New helper.\n\nFrom-SVN: r269208", "tree": {"sha": "82781cd998e8f5d9e4ddbbaf5ac556568adb6752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82781cd998e8f5d9e4ddbbaf5ac556568adb6752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf02f8a350498eed424aea4a2fff2cbfd646fd61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf02f8a350498eed424aea4a2fff2cbfd646fd61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf02f8a350498eed424aea4a2fff2cbfd646fd61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf02f8a350498eed424aea4a2fff2cbfd646fd61/comments", "author": null, "committer": null, "parents": [{"sha": "0eaf141239b27fa96c41558eab8f5ffba70bed4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eaf141239b27fa96c41558eab8f5ffba70bed4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eaf141239b27fa96c41558eab8f5ffba70bed4e"}], "stats": {"total": 89, "additions": 83, "deletions": 6}, "files": [{"sha": "263cc7b5f112c2f55205b69961852765bf9f03ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf02f8a350498eed424aea4a2fff2cbfd646fd61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf02f8a350498eed424aea4a2fff2cbfd646fd61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf02f8a350498eed424aea4a2fff2cbfd646fd61", "patch": "@@ -1,3 +1,10 @@\n+2019-02-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-dom.c (edge_info::derive_equivalences) <BIT_IOR_EXPR>: Fix\n+\tand move around comment.\n+\t<BIT_AND_EXPR>: Likewise.\n+\t<BIT_NOT_EXPR>: Add specific handling for boolean types.\n+\n 2019-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/89474"}, {"sha": "cc582c9e6776a33805cb0b93d6e0b93689334812", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf02f8a350498eed424aea4a2fff2cbfd646fd61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf02f8a350498eed424aea4a2fff2cbfd646fd61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf02f8a350498eed424aea4a2fff2cbfd646fd61", "patch": "@@ -1,3 +1,8 @@\n+2019-02-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt77.adb: New test.\n+\t* gnat.dg/opt77_pkg.ad[sb]: New helper.\n+\n 2019-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/89474"}, {"sha": "4d0288abfafea2dec738cc545a633be1dbd65c4e", "filename": "gcc/testsuite/gnat.dg/opt77.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf02f8a350498eed424aea4a2fff2cbfd646fd61/gcc%2Ftestsuite%2Fgnat.dg%2Fopt77.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf02f8a350498eed424aea4a2fff2cbfd646fd61/gcc%2Ftestsuite%2Fgnat.dg%2Fopt77.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt77.adb?ref=cf02f8a350498eed424aea4a2fff2cbfd646fd61", "patch": "@@ -0,0 +1,14 @@\n+-- { dg-do run }\n+-- { dg-options \"-O -fno-inline\" }\n+\n+with Opt77_Pkg; use Opt77_Pkg;\n+\n+procedure Opt77 is\n+  N : Natural := 0;\n+  To_Add : Boolean;\n+begin\n+  Proc (\"One\", N, To_Add);\n+  if To_Add then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "b3c1e4b81d89dc21b5e4ca10b46b7779768e70e4", "filename": "gcc/testsuite/gnat.dg/opt77_pkg.adb", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf02f8a350498eed424aea4a2fff2cbfd646fd61/gcc%2Ftestsuite%2Fgnat.dg%2Fopt77_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf02f8a350498eed424aea4a2fff2cbfd646fd61/gcc%2Ftestsuite%2Fgnat.dg%2Fopt77_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt77_pkg.adb?ref=cf02f8a350498eed424aea4a2fff2cbfd646fd61", "patch": "@@ -0,0 +1,28 @@\n+package body Opt77_Pkg is\n+\n+  function Compare (S : String) return Boolean is\n+  begin\n+    return S = \"Two\";\n+  end;\n+\n+  procedure Proc (S : String; N : in out Natural; To_Add : out Boolean) is\n+    To_Take : Boolean := False;\n+    To_Read : Boolean := False;\n+  begin\n+    To_Add := False;\n+\n+    if S = \"One\" then\n+      To_Read := True;\n+      To_Take := Compare (S);\n+    end if;\n+\n+    if To_Read and not To_Take then\n+      N := N + 1;\n+    end if;\n+\n+    if To_Take then\n+      To_Add := True;\n+    end if;\n+  end;\n+\n+end Opt77_Pkg;"}, {"sha": "ce3985a136340309c07b1967485f1c00310ad7b7", "filename": "gcc/testsuite/gnat.dg/opt77_pkg.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf02f8a350498eed424aea4a2fff2cbfd646fd61/gcc%2Ftestsuite%2Fgnat.dg%2Fopt77_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf02f8a350498eed424aea4a2fff2cbfd646fd61/gcc%2Ftestsuite%2Fgnat.dg%2Fopt77_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt77_pkg.ads?ref=cf02f8a350498eed424aea4a2fff2cbfd646fd61", "patch": "@@ -0,0 +1,5 @@\n+package Opt77_Pkg is\n+\n+  procedure Proc (S : String; N : in out Natural; To_Add : out Boolean);\n+\n+end Opt77_Pkg;"}, {"sha": "4f4b7db21896813ff9b204c6eae16b92a567e900", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf02f8a350498eed424aea4a2fff2cbfd646fd61/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf02f8a350498eed424aea4a2fff2cbfd646fd61/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=cf02f8a350498eed424aea4a2fff2cbfd646fd61", "patch": "@@ -170,11 +170,10 @@ edge_info::derive_equivalences (tree name, tree value, int recursion_limit)\n   gimple *def_stmt = SSA_NAME_DEF_STMT (name);\n   if (is_gimple_assign (def_stmt))\n     {\n-      /* We know the result of DEF_STMT was zero.  See if that allows\n-\t us to deduce anything about the SSA_NAMEs used on the RHS.  */\n       enum tree_code code = gimple_assign_rhs_code (def_stmt);\n       switch (code)\n \t{\n+\t/* If the result of an OR is zero, then its operands are, too.  */\n \tcase BIT_IOR_EXPR:\n \t  if (integer_zerop (value))\n \t    {\n@@ -188,8 +187,7 @@ edge_info::derive_equivalences (tree name, tree value, int recursion_limit)\n \t    }\n \t  break;\n \n-      /* We know the result of DEF_STMT was one.  See if that allows\n-\t us to deduce anything about the SSA_NAMEs used on the RHS.  */\n+\t/* If the result of an AND is nonzero, then its operands are, too.  */\n \tcase BIT_AND_EXPR:\n \t  if (!integer_zerop (value))\n \t    {\n@@ -296,7 +294,6 @@ edge_info::derive_equivalences (tree name, tree value, int recursion_limit)\n \t    break;\n \t  }\n \n-\n \tcase EQ_EXPR:\n \tcase NE_EXPR:\n \t  {\n@@ -336,7 +333,28 @@ edge_info::derive_equivalences (tree name, tree value, int recursion_limit)\n \tcase NEGATE_EXPR:\n \t  {\n \t    tree rhs = gimple_assign_rhs1 (def_stmt);\n-\t    tree res = fold_build1 (code, TREE_TYPE (rhs), value);\n+\t    tree res;\n+\t    /* If this is a NOT and the operand has a boolean range, then we\n+\t       know its value must be zero or one.  We are not supposed to\n+\t       have a BIT_NOT_EXPR for boolean types with precision > 1 in\n+\t       the general case, see e.g. the handling of TRUTH_NOT_EXPR in\n+\t       the gimplifier, but it can be generated by match.pd out of\n+\t       a BIT_XOR_EXPR wrapped in a BIT_AND_EXPR.  Now the handling\n+\t       of BIT_AND_EXPR above already forces a specific semantics for\n+\t       boolean types with precision > 1 so we must do the same here,\n+\t       otherwise we could change the semantics of TRUTH_NOT_EXPR for\n+\t       boolean types with precision > 1.  */\n+\t    if (code == BIT_NOT_EXPR\n+\t\t&& TREE_CODE (rhs) == SSA_NAME\n+\t\t&& ssa_name_has_boolean_range (rhs))\n+\t      {\n+\t\tif (integer_zerop (value))\n+\t\t  res = build_one_cst (TREE_TYPE (rhs));\n+\t\telse\n+\t\t  res = build_zero_cst (TREE_TYPE (rhs));\n+\t      }\n+\t    else\n+\t      res = fold_build1 (code, TREE_TYPE (rhs), value);\n \t    derive_equivalences (rhs, res, recursion_limit - 1);\n \t    break;\n \t  }"}]}