{"sha": "ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNlNGMyZjA2MDE2MGJkM2VmOTAzMmNjMTUxZTM2Yjg0ZTRiYTNlOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-14T12:03:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-14T12:03:47Z"}, "message": "PR65122 extended alignment support in allocators\n\n\tPR libstdc++/65122\n\t* include/ext/malloc_allocator.h (malloc_allocator::allocate): Use\n\taligned_alloc for types with extended alignment if available,\n\totherwise throw bad_alloc if malloc doesn't return a suitable value.\n\t* include/ext/bitmap_allocator.h (bitmap_allocator::allocate)\n\t(bitmap_allocator::deallocate): Use aligned new/delete for types with\n\textended alignment.\n\t* include/ext/mt_allocator.h (__mt_alloc::allocate)\n\t(__mt_alloc::deallocate): Likewise.\n\t* include/ext/new_allocator.h (new_allocator::allocate)\n\t(new_allocator::deallocate): Likewise.\n\t* include/ext/pool_allocator.h (__pool_alloc::allocate)\n\t(__pool_alloc::deallocate): Likewise.\n\t* testsuite/20_util/allocator/overaligned.cc: New test.\n\t* testsuite/ext/bitmap_allocator/overaligned.cc: New test.\n\t* testsuite/ext/malloc_allocator/overaligned.cc: New test.\n\t* testsuite/ext/mt_allocator/overaligned.cc: New test.\n\t* testsuite/ext/new_allocator/overaligned.cc: New test.\n\t* testsuite/ext/pool_allocator/overaligned.cc: New test.\n\nFrom-SVN: r241158", "tree": {"sha": "b1ea7c7f07360d2914b518d2a602e9c3b524547e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1ea7c7f07360d2914b518d2a602e9c3b524547e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb3ac86754e416f716e478f309f13108f9e9ac7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3ac86754e416f716e478f309f13108f9e9ac7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3ac86754e416f716e478f309f13108f9e9ac7f"}], "stats": {"total": 430, "additions": 426, "deletions": 4}, "files": [{"sha": "a401ee0b84ae2fa777bbc19ae7136cec4f323d79", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "patch": "@@ -1,7 +1,30 @@\n+2016-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/65122\n+\t* include/ext/malloc_allocator.h (malloc_allocator::allocate): Use\n+\taligned_alloc for types with extended alignment if available,\n+\totherwise throw bad_alloc if malloc doesn't return a suitable value.\n+\t* include/ext/bitmap_allocator.h (bitmap_allocator::allocate)\n+\t(bitmap_allocator::deallocate): Use aligned new/delete for types with\n+\textended alignment.\n+\t* include/ext/mt_allocator.h (__mt_alloc::allocate)\n+\t(__mt_alloc::deallocate): Likewise.\n+\t* include/ext/new_allocator.h (new_allocator::allocate)\n+\t(new_allocator::deallocate): Likewise.\n+\t* include/ext/pool_allocator.h (__pool_alloc::allocate)\n+\t(__pool_alloc::deallocate): Likewise.\n+\t* testsuite/20_util/allocator/overaligned.cc: New test.\n+\t* testsuite/ext/bitmap_allocator/overaligned.cc: New test.\n+\t* testsuite/ext/malloc_allocator/overaligned.cc: New test.\n+\t* testsuite/ext/mt_allocator/overaligned.cc: New test.\n+\t* testsuite/ext/new_allocator/overaligned.cc: New test.\n+\t* testsuite/ext/pool_allocator/overaligned.cc: New test.\n+\n 2016-10-14  Tim Shen  <timshen@google.com>\n \n \tPR libstdc++/77944\n-\t* include/std/variant: include <bits/funcexcept.h> for __try and __catch.\n+\t* include/std/variant: Include <bits/funcexcept.h> for __try and\n+\t__catch.\n \n 2016-10-14  Jonathan Wakely  <jwakely@redhat.com>\n "}, {"sha": "836abc8c53027fc3fd8e915940ec57ac3d75d943", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "patch": "@@ -1018,6 +1018,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tif (__n > this->max_size())\n \t  std::__throw_bad_alloc();\n \n+#if __cpp_aligned_new\n+\tif (alignof(value_type) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)\n+\t  {\n+\t    const size_type __b = __n * sizeof(value_type);\n+\t    std::align_val_t __al = std::align_val_t(alignof(value_type));\n+\t    return static_cast<pointer>(::operator new(__b, __al));\n+\t  }\n+#endif\n+\n \tif (__builtin_expect(__n == 1, true))\n \t  return this->_M_allocate_single_object();\n \telse\n@@ -1036,6 +1045,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__builtin_expect(__p != 0, true))\n \t  {\n+#if __cpp_aligned_new\n+\t    // Types with extended alignment are handled by operator delete.\n+\t    if (alignof(value_type) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)\n+\t      {\n+\t\t::operator delete(__p, std::align_val_t(alignof(value_type)));\n+\t\treturn;\n+\t      }\n+#endif\n+\n \t    if (__builtin_expect(__n == 1, true))\n \t      this->_M_deallocate_single_object(__p);\n \t    else"}, {"sha": "acb60a2a3cf7bb1ed3bf9e0a825546abdea2be91", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "patch": "@@ -30,6 +30,7 @@\n #define _MALLOC_ALLOCATOR_H 1\n \n #include <cstdlib>\n+#include <cstddef>\n #include <new>\n #include <bits/functexcept.h>\n #include <bits/move.h>\n@@ -100,9 +101,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tif (__n > this->max_size())\n \t  std::__throw_bad_alloc();\n \n-\tpointer __ret = static_cast<_Tp*>(std::malloc(__n * sizeof(_Tp)));\n+\tpointer __ret;\n+#if __cpp_aligned_new\n+#if __cplusplus > 201402L && _GLIBCXX_HAVE_ALIGNED_ALLOC\n+\tif (alignof(_Tp) > alignof(std::max_align_t))\n+\t  {\n+\t    __ret = static_cast<_Tp*>(::aligned_alloc(alignof(_Tp),\n+\t\t\t\t\t\t      __n * sizeof(_Tp)));\n+\t  }\n+#else\n+# define _GLIBCXX_CHECK_MALLOC_RESULT\n+#endif\n+#endif\n+\tif (!__ret)\n+\t  __ret = static_cast<_Tp*>(std::malloc(__n * sizeof(_Tp)));\n \tif (!__ret)\n \t  std::__throw_bad_alloc();\n+#ifdef _GLIBCXX_CHECK_MALLOC_RESULT\n+#undef _GLIBCXX_CHECK_MALLOC_RESULT\n+\t  if (reinterpret_cast<std::size_t>(__ret) % alignof(_Tp))\n+\t    {\n+\t      // Memory returned by malloc is not suitably aligned for _Tp.\n+\t      deallocate(__ret, __n);\n+\t      std::__throw_bad_alloc();\n+\t    }\n+#endif\n \treturn __ret;\n       }\n "}, {"sha": "d7ea7c1a8c37cc062e331c9fc77a2c0d8d1f6834", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "patch": "@@ -691,6 +691,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (__n > this->max_size())\n \tstd::__throw_bad_alloc();\n \n+#if __cpp_aligned_new\n+      // Types with extended alignment are handled by operator new/delete.\n+      if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)\n+\t{\n+\t  std::align_val_t __al = std::align_val_t(alignof(_Tp));\n+\t  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));\n+\t}\n+#endif\n+\n       __policy_type::_S_initialize_once();\n \n       // Requests larger than _M_max_bytes are handled by operator\n@@ -737,6 +746,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       if (__builtin_expect(__p != 0, true))\n \t{\n+#if __cpp_aligned_new\n+\t  // Types with extended alignment are handled by operator new/delete.\n+\t  if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)\n+\t    {\n+\t      ::operator delete(__p, std::align_val_t(alignof(_Tp)));\n+\t      return;\n+\t    }\n+#endif\n+\n \t  // Requests larger than _M_max_bytes are handled by\n \t  // operators new/delete directly.\n \t  __pool_type& __pool = __policy_type::_S_get_pool();"}, {"sha": "2ff4780f0e0db248bff22eecc6dcf264c1fbac49", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "patch": "@@ -101,13 +101,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tif (__n > this->max_size())\n \t  std::__throw_bad_alloc();\n \n+#if __cpp_aligned_new\n+\tif (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)\n+\t  {\n+\t    std::align_val_t __al = std::align_val_t(alignof(_Tp));\n+\t    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));\n+\t  }\n+#endif\n \treturn static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));\n       }\n \n       // __p is not permitted to be a null pointer.\n       void\n       deallocate(pointer __p, size_type)\n-      { ::operator delete(__p); }\n+      {\n+#if __cpp_aligned_new\n+\tif (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)\n+\t  {\n+\t    ::operator delete(__p, std::align_val_t(alignof(_Tp)));\n+\t    return;\n+\t  }\n+#endif\n+\t::operator delete(__p);\n+      }\n \n       size_type\n       max_size() const _GLIBCXX_USE_NOEXCEPT"}, {"sha": "9e0511de19a27884d51c77fc4cab1968b6ad616f", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "patch": "@@ -219,6 +219,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (__n > this->max_size())\n \t    std::__throw_bad_alloc();\n \n+\t  const size_t __bytes = __n * sizeof(_Tp);\n+\n+#if __cpp_aligned_new\n+\t  if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)\n+\t    {\n+\t      std::align_val_t __al = std::align_val_t(alignof(_Tp));\n+\t      return static_cast<_Tp*>(::operator new(__bytes, __al));\n+\t    }\n+#endif\n+\n \t  // If there is a race through here, assume answer from getenv\n \t  // will resolve in same direction.  Inspired by techniques\n \t  // to efficiently support threading found in basic_string.h.\n@@ -230,7 +240,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t__atomic_add_dispatch(&_S_force_new, -1);\n \t    }\n \n-\t  const size_t __bytes = __n * sizeof(_Tp);\t      \n \t  if (__bytes > size_t(_S_max_bytes) || _S_force_new > 0)\n \t    __ret = static_cast<_Tp*>(::operator new(__bytes));\n \t  else\n@@ -259,6 +268,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       if (__builtin_expect(__n != 0 && __p != 0, true))\n \t{\n+#if __cpp_aligned_new\n+\t  if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)\n+\t    {\n+\t      ::operator delete(__p, std::align_val_t(alignof(_Tp)));\n+\t      return;\n+\t    }\n+#endif\n \t  const size_t __bytes = __n * sizeof(_Tp);\n \t  if (__bytes > static_cast<size_t>(_S_max_bytes) || _S_force_new > 0)\n \t    ::operator delete(__p);"}, {"sha": "384d1d213c0fc5e4fa0e64066cfeaf0b53409067", "filename": "libstdc++-v3/testsuite/20_util/allocator/overaligned.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Foveraligned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Foveraligned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Foveraligned.cc?ref=ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-faligned-new\" }\n+// { dg-do run { target c++11 } }\n+\n+#include <memory>\n+#include <cstddef>\n+#include <cstdint>\n+#include <testsuite_hooks.h>\n+\n+constexpr std::size_t align = alignof(std::max_align_t) * 4;\n+\n+struct X {\n+  alignas(align) char c;\n+};\n+\n+void\n+test01()\n+{\n+  std::allocator<X> a;\n+  X* p1 = a.allocate(1);\n+  VERIFY( (reinterpret_cast<std::uintptr_t>(p1) % align) == 0 );\n+  a.deallocate(p1, 1);\n+  X* p2 = a.allocate(20);\n+  VERIFY( (reinterpret_cast<std::uintptr_t>(p2) % align) == 0 );\n+  a.deallocate(p2, 20);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "7d365dec62941f61ba2e41608d450ef6e2c23f63", "filename": "libstdc++-v3/testsuite/ext/bitmap_allocator/overaligned.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Foveraligned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Foveraligned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Foveraligned.cc?ref=ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-faligned-new\" }\n+// { dg-do run { target c++11 } }\n+\n+#include <ext/bitmap_allocator.h>\n+#include <cstddef>\n+#include <cstdint>\n+#include <testsuite_hooks.h>\n+\n+constexpr std::size_t align = alignof(std::max_align_t) * 4;\n+\n+struct X {\n+  alignas(align) char c;\n+};\n+\n+void\n+test01()\n+{\n+  __gnu_cxx::bitmap_allocator<X> a;\n+  X* p1 = a.allocate(1);\n+  VERIFY( (reinterpret_cast<std::uintptr_t>(p1) % align) == 0 );\n+  a.deallocate(p1, 1);\n+  X* p2 = a.allocate(20);\n+  VERIFY( (reinterpret_cast<std::uintptr_t>(p2) % align) == 0 );\n+  a.deallocate(p2, 20);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "87182f157a9291e26a47673d28f5d4f67139ba08", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/overaligned.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Foveraligned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Foveraligned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Foveraligned.cc?ref=ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-faligned-new\" }\n+// { dg-do run { target c++11 } }\n+\n+#include <ext/malloc_allocator.h>\n+#include <cstddef>\n+#include <cstdint>\n+#include <testsuite_hooks.h>\n+\n+constexpr std::size_t align = alignof(std::max_align_t) * 2;\n+\n+struct X {\n+  alignas(align) char c;\n+};\n+\n+void\n+test01()\n+{\n+  __gnu_cxx::malloc_allocator<X> a;\n+#if __cplusplus > 201402L && _GLIBCXX_HAVE_ALIGNED_ALLOC\n+  X* p1 = a.allocate(1);\n+  VERIFY( (reinterpret_cast<std::uintptr_t>(p1) % align) == 0 );\n+  a.deallocate(p1, 1);\n+  X* p2 = a.allocate(20);\n+  VERIFY( (reinterpret_cast<std::uintptr_t>(p2) % align) == 0 );\n+  a.deallocate(p2, 20);\n+#else\n+  // Allocating for extended alignment is unreliable without aligned_alloc()\n+  try\n+  {\n+    X* p1 = a.allocate(1);\n+    VERIFY( (reinterpret_cast<std::uintptr_t>(p1) % align) == 0 );\n+    a.deallocate(p1, 1);\n+  }\n+  catch (const std::bad_alloc&)\n+  { }\n+  try\n+  {\n+    X* p2 = a.allocate(20);\n+    VERIFY( (reinterpret_cast<std::uintptr_t>(p2) % align) == 0 );\n+    a.deallocate(p2, 20);\n+  }\n+  catch (const std::bad_alloc&)\n+  { }\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "41b8b46243c70a5ad4e8469dd8548ef29cd84f1d", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/overaligned.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Foveraligned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Foveraligned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Foveraligned.cc?ref=ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-faligned-new\" }\n+// { dg-do run { target c++11 } }\n+\n+#include <ext/mt_allocator.h>\n+#include <cstddef>\n+#include <cstdint>\n+#include <testsuite_hooks.h>\n+\n+constexpr std::size_t align = alignof(std::max_align_t) * 4;\n+\n+struct X {\n+  alignas(align) char c;\n+};\n+\n+void\n+test01()\n+{\n+  __gnu_cxx::__mt_alloc<X> a;\n+  X* p1 = a.allocate(1);\n+  VERIFY( (reinterpret_cast<std::uintptr_t>(p1) % align) == 0 );\n+  a.deallocate(p1, 1);\n+  X* p2 = a.allocate(20);\n+  VERIFY( (reinterpret_cast<std::uintptr_t>(p2) % align) == 0 );\n+  a.deallocate(p2, 20);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "27413cfb26db3dee691fed6f4b6d5c642a25a18f", "filename": "libstdc++-v3/testsuite/ext/new_allocator/overaligned.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Foveraligned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Foveraligned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Foveraligned.cc?ref=ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-faligned-new\" }\n+// { dg-do run { target c++11 } }\n+\n+#include <ext/new_allocator.h>\n+#include <cstddef>\n+#include <cstdint>\n+#include <testsuite_hooks.h>\n+\n+constexpr std::size_t align = alignof(std::max_align_t) * 4;\n+\n+struct X {\n+  alignas(align) char c;\n+};\n+\n+void\n+test01()\n+{\n+  __gnu_cxx::new_allocator<X> a;\n+  X* p1 = a.allocate(1);\n+  VERIFY( (reinterpret_cast<std::uintptr_t>(p1) % align) == 0 );\n+  a.deallocate(p1, 1);\n+  X* p2 = a.allocate(20);\n+  VERIFY( (reinterpret_cast<std::uintptr_t>(p2) % align) == 0 );\n+  a.deallocate(p2, 20);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "b509b7958bb2b49c42a27af2b5cb2c96b5fa640b", "filename": "libstdc++-v3/testsuite/ext/pool_allocator/overaligned.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Foveraligned.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace4c2f060160bd3ef9032cc151e36b84e4ba3e8/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Foveraligned.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Foveraligned.cc?ref=ace4c2f060160bd3ef9032cc151e36b84e4ba3e8", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-faligned-new\" }\n+// { dg-do run { target c++11 } }\n+\n+#include <ext/pool_allocator.h>\n+#include <cstddef>\n+#include <cstdint>\n+#include <testsuite_hooks.h>\n+\n+constexpr std::size_t align = alignof(std::max_align_t) * 4;\n+\n+struct X {\n+  alignas(align) char c;\n+};\n+\n+void\n+test01()\n+{\n+  __gnu_cxx::__pool_alloc<X> a;\n+  X* p1 = a.allocate(1);\n+  VERIFY( (reinterpret_cast<std::uintptr_t>(p1) % align) == 0 );\n+  a.deallocate(p1, 1);\n+  X* p2 = a.allocate(20);\n+  VERIFY( (reinterpret_cast<std::uintptr_t>(p2) % align) == 0 );\n+  a.deallocate(p2, 20);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}