{"sha": "a69beca121baeb70efa57d7f381cf7376778d21a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY5YmVjYTEyMWJhZWI3MGVmYTU3ZDdmMzgxY2Y3Mzc2Nzc4ZDIxYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-03-26T17:05:34Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-03-26T17:05:34Z"}, "message": "expr.c (expand_assignment): Add code to handle variable-sized BLKmode case.\n\n\t* expr.c (expand_assignment): Add code to handle variable-sized\n\tBLKmode case.\n\nFrom-SVN: r32749", "tree": {"sha": "a4b08daab16d206b224e9368ad326ed434f256e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4b08daab16d206b224e9368ad326ed434f256e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a69beca121baeb70efa57d7f381cf7376778d21a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a69beca121baeb70efa57d7f381cf7376778d21a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a69beca121baeb70efa57d7f381cf7376778d21a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a69beca121baeb70efa57d7f381cf7376778d21a/comments", "author": null, "committer": null, "parents": [{"sha": "751312371e66c05a8d3b1cda949ec26aa9f1e548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/751312371e66c05a8d3b1cda949ec26aa9f1e548", "html_url": "https://github.com/Rust-GCC/gccrs/commit/751312371e66c05a8d3b1cda949ec26aa9f1e548"}], "stats": {"total": 64, "additions": 43, "deletions": 21}, "files": [{"sha": "3e0085d0b46f60d4140d4989aee54402f4a82e5e", "filename": "gcc/expr.c", "status": "modified", "additions": 43, "deletions": 21, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a69beca121baeb70efa57d7f381cf7376778d21a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a69beca121baeb70efa57d7f381cf7376778d21a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a69beca121baeb70efa57d7f381cf7376778d21a", "patch": "@@ -3447,27 +3447,49 @@ expand_assignment (to, from, want_value, suggest_reg)\n \t\t\t       TYPE_MODE (integer_type_node));\n \t}\n \n-      result = store_field (to_rtx, bitsize, bitpos, mode1, from,\n-\t\t\t    (want_value\n-\t\t\t     /* Spurious cast makes HPUX compiler happy.  */\n-\t\t\t     ? (enum machine_mode) TYPE_MODE (TREE_TYPE (to))\n-\t\t\t     : VOIDmode),\n-\t\t\t    unsignedp,\n-\t\t\t    /* Required alignment of containing datum.  */\n-\t\t\t    alignment,\n-\t\t\t    int_size_in_bytes (TREE_TYPE (tem)),\n-\t\t\t    get_alias_set (to));\n-      preserve_temp_slots (result);\n-      free_temp_slots ();\n-      pop_temp_slots ();\n-\n-      /* If the value is meaningful, convert RESULT to the proper mode.\n-\t Otherwise, return nothing.  */\n-      return (want_value ? convert_modes (TYPE_MODE (TREE_TYPE (to)),\n-\t\t\t\t\t  TYPE_MODE (TREE_TYPE (from)),\n-\t\t\t\t\t  result,\n-\t\t\t\t\t  TREE_UNSIGNED (TREE_TYPE (to)))\n-\t      : NULL_RTX);\n+      /* If this is a varying-length object, we must get the address of\n+\t the source and do an explicit block move.  */\n+      if (bitsize < 0)\n+\t{\n+\t  unsigned int from_align;\n+\t  rtx from_rtx = expand_expr_unaligned (from, &from_align);\n+\t  rtx inner_to_rtx\n+\t    = change_address (to_rtx, VOIDmode,\n+\t\t\t      plus_constant (XEXP (to_rtx, 0),\n+\t\t\t\t\t     bitpos / BITS_PER_UNIT));\n+\n+\t  emit_block_move (inner_to_rtx, from_rtx, expr_size (from),\n+\t\t\t   MIN (alignment, from_align) / BITS_PER_UNIT);\n+\t  free_temp_slots ();\n+\t  pop_temp_slots ();\n+\t  return to_rtx;\n+\t}\n+      else\n+\t{\n+\t  result = store_field (to_rtx, bitsize, bitpos, mode1, from,\n+\t\t\t\t(want_value\n+\t\t\t\t /* Spurious cast for HPUX compiler.  */\n+\t\t\t\t ? ((enum machine_mode)\n+\t\t\t\t    TYPE_MODE (TREE_TYPE (to)))\n+\t\t\t\t : VOIDmode),\n+\t\t\t\tunsignedp,\n+\t\t\t\t/* Required alignment of containing datum.  */\n+\t\t\t\talignment,\n+\t\t\t\tint_size_in_bytes (TREE_TYPE (tem)),\n+\t\t\t\tget_alias_set (to));\n+\n+\t  preserve_temp_slots (result);\n+\t  free_temp_slots ();\n+\t  pop_temp_slots ();\n+\n+\t  /* If the value is meaningful, convert RESULT to the proper mode.\n+\t     Otherwise, return nothing.  */\n+\t  return (want_value ? convert_modes (TYPE_MODE (TREE_TYPE (to)),\n+\t\t\t\t\t      TYPE_MODE (TREE_TYPE (from)),\n+\t\t\t\t\t      result,\n+\t\t\t\t\t      TREE_UNSIGNED (TREE_TYPE (to)))\n+\t\t  : NULL_RTX);\n+\t}\n     }\n \n   /* If the rhs is a function call and its value is not an aggregate,"}]}