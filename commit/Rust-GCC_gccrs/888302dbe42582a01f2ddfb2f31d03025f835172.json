{"sha": "888302dbe42582a01f2ddfb2f31d03025f835172", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg4MzAyZGJlNDI1ODJhMDFmMmRkZmIyZjMxZDAzMDI1ZjgzNTE3Mg==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1997-01-22T05:25:31Z"}, "committer": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1997-01-22T05:25:31Z"}, "message": "automatically generated from GPLed version\n\nFrom-SVN: r13545", "tree": {"sha": "cc7ce55525d8cd3a866d0c9543aaad33bcc820df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc7ce55525d8cd3a866d0c9543aaad33bcc820df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/888302dbe42582a01f2ddfb2f31d03025f835172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888302dbe42582a01f2ddfb2f31d03025f835172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/888302dbe42582a01f2ddfb2f31d03025f835172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888302dbe42582a01f2ddfb2f31d03025f835172/comments", "author": null, "committer": null, "parents": [{"sha": "9ec30f92231f0cf3d93291fee3e40b3024cd52e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ec30f92231f0cf3d93291fee3e40b3024cd52e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ec30f92231f0cf3d93291fee3e40b3024cd52e3"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "c4549243230faf938e75b9666ebbe3355302ba50", "filename": "gcc/getopt.h", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888302dbe42582a01f2ddfb2f31d03025f835172/gcc%2Fgetopt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888302dbe42582a01f2ddfb2f31d03025f835172/gcc%2Fgetopt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgetopt.h?ref=888302dbe42582a01f2ddfb2f31d03025f835172", "patch": "@@ -0,0 +1,135 @@\n+/* Declarations for getopt.\n+   Copyright (C) 1989,90,91,92,93,94,96,97 Free Software Foundation, Inc.\n+\n+   the C library, however.  The master source lives in /gd/gnu/lib.\n+\n+NOTE: The canonical source of this file is maintained with the GNU C Library.\n+Bugs can be reported to bug-glibc@prep.ai.mit.edu.\n+\n+This program is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+USA.  */\n+\n+#ifndef _GETOPT_H\n+#define _GETOPT_H 1\n+\n+#ifdef\t__cplusplus\n+extern \"C\" {\n+#endif\n+\n+/* For communication from `getopt' to the caller.\n+   When `getopt' finds an option that takes an argument,\n+   the argument value is returned here.\n+   Also, when `ordering' is RETURN_IN_ORDER,\n+   each non-option ARGV-element is returned here.  */\n+\n+extern char *optarg;\n+\n+/* Index in ARGV of the next element to be scanned.\n+   This is used for communication to and from the caller\n+   and for communication between successive calls to `getopt'.\n+\n+   On entry to `getopt', zero means this is the first call; initialize.\n+\n+   When `getopt' returns -1, this is the index of the first of the\n+   non-option elements that the caller should itself scan.\n+\n+   Otherwise, `optind' communicates from one call to the next\n+   how much of ARGV has been scanned so far.  */\n+\n+extern int optind;\n+\n+/* Callers store zero here to inhibit the error message `getopt' prints\n+   for unrecognized options.  */\n+\n+extern int opterr;\n+\n+/* Set to an option character which was unrecognized.  */\n+\n+extern int optopt;\n+\n+/* Describe the long-named options requested by the application.\n+   The LONG_OPTIONS argument to getopt_long or getopt_long_only is a vector\n+   of `struct option' terminated by an element containing a name which is\n+   zero.\n+\n+   The field `has_arg' is:\n+   no_argument\t\t(or 0) if the option does not take an argument,\n+   required_argument\t(or 1) if the option requires an argument,\n+   optional_argument \t(or 2) if the option takes an optional argument.\n+\n+   If the field `flag' is not NULL, it points to a variable that is set\n+   to the value given in the field `val' when the option is found, but\n+   left unchanged if the option is not found.\n+\n+   To have a long-named option do something other than set an `int' to\n+   a compiled-in constant, such as set a value from `optarg', set the\n+   option's `flag' field to zero and its `val' field to a nonzero\n+   value (the equivalent single-letter option character, if there is\n+   one).  For long options that have a zero `flag' field, `getopt'\n+   returns the contents of the `val' field.  */\n+\n+struct option\n+{\n+#if defined (__STDC__) && __STDC__\n+  const char *name;\n+#else\n+  char *name;\n+#endif\n+  /* has_arg can't be an enum because some compilers complain about\n+     type mismatches in all the code that assumes it is an int.  */\n+  int has_arg;\n+  int *flag;\n+  int val;\n+};\n+\n+/* Names for the values of the `has_arg' field of `struct option'.  */\n+\n+#define\tno_argument\t\t0\n+#define required_argument\t1\n+#define optional_argument\t2\n+\n+#if defined (__STDC__) && __STDC__\n+#ifdef __GNU_LIBRARY__\n+/* Many other libraries have conflicting prototypes for getopt, with\n+   differences in the consts, in stdlib.h.  To avoid compilation\n+   errors, only prototype getopt for the GNU C library.  */\n+extern int getopt (int argc, char *const *argv, const char *shortopts);\n+#else /* not __GNU_LIBRARY__ */\n+extern int getopt ();\n+#endif /* __GNU_LIBRARY__ */\n+extern int getopt_long (int argc, char *const *argv, const char *shortopts,\n+\t\t        const struct option *longopts, int *longind);\n+extern int getopt_long_only (int argc, char *const *argv,\n+\t\t\t     const char *shortopts,\n+\t\t             const struct option *longopts, int *longind);\n+\n+/* Internal only.  Users should not call this directly.  */\n+extern int _getopt_internal (int argc, char *const *argv,\n+\t\t\t     const char *shortopts,\n+\t\t             const struct option *longopts, int *longind,\n+\t\t\t     int long_only);\n+#else /* not __STDC__ */\n+extern int getopt ();\n+extern int getopt_long ();\n+extern int getopt_long_only ();\n+\n+extern int _getopt_internal ();\n+#endif /* __STDC__ */\n+\n+#ifdef\t__cplusplus\n+}\n+#endif\n+\n+#endif /* _GETOPT_H */"}]}