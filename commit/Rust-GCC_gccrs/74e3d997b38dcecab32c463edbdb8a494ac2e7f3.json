{"sha": "74e3d997b38dcecab32c463edbdb8a494ac2e7f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRlM2Q5OTdiMzhkY2VjYWIzMmM0NjNlZGJkYjhhNDk0YWMyZTdmMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-11-04T09:30:47Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-11-04T09:30:47Z"}, "message": "ubsan.c (instrument_object_size): Optimize [x & CST] array accesses.\n\n\t* ubsan.c (instrument_object_size): Optimize [x & CST] array accesses.\ntestsuite/\n\t* c-c++-common/ubsan/object-size-10.c: New test.\n\nFrom-SVN: r217071", "tree": {"sha": "4cb0ce930a7598c0aee3133908b9ccb02592c9f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cb0ce930a7598c0aee3133908b9ccb02592c9f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74e3d997b38dcecab32c463edbdb8a494ac2e7f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e3d997b38dcecab32c463edbdb8a494ac2e7f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e3d997b38dcecab32c463edbdb8a494ac2e7f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e3d997b38dcecab32c463edbdb8a494ac2e7f3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "107bdb31ee4fea0600ebbea67171b6a43a47011d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107bdb31ee4fea0600ebbea67171b6a43a47011d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/107bdb31ee4fea0600ebbea67171b6a43a47011d"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "d5a2370da72b444ab65f7cdd4465ff4485f47388", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e3d997b38dcecab32c463edbdb8a494ac2e7f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e3d997b38dcecab32c463edbdb8a494ac2e7f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74e3d997b38dcecab32c463edbdb8a494ac2e7f3", "patch": "@@ -1,3 +1,7 @@\n+2014-11-04  Marek Polacek  <polacek@redhat.com>\n+\n+\t* ubsan.c (instrument_object_size): Optimize [x & CST] array accesses.\n+\n 2014-11-03  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* config/rx/rx.c (rx_handle_func_attribute): Mark unused argument."}, {"sha": "fc531042a6f886accca2d3dd5fdc599f6e0d995a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e3d997b38dcecab32c463edbdb8a494ac2e7f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e3d997b38dcecab32c463edbdb8a494ac2e7f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74e3d997b38dcecab32c463edbdb8a494ac2e7f3", "patch": "@@ -1,3 +1,7 @@\n+2014-11-04  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-c++-common/ubsan/object-size-10.c: New test.\n+\n 2014-11-03  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* build-go/gcc/testsuite/gcc/godump-1.out: Update godump tests."}, {"sha": "ebc8582ec3cf7717834e8cbe7941273868db3c89", "filename": "gcc/testsuite/c-c++-common/ubsan/object-size-10.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e3d997b38dcecab32c463edbdb8a494ac2e7f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fobject-size-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e3d997b38dcecab32c463edbdb8a494ac2e7f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fobject-size-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fobject-size-10.c?ref=74e3d997b38dcecab32c463edbdb8a494ac2e7f3", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O2\" } } */\n+/* { dg-options \"-fsanitize=undefined\" } */\n+\n+static char a[128];\n+static int b[128];\n+\n+__attribute__ ((noinline, noclone)) int\n+fn1 (int i)\n+{\n+  asm (\"\");\n+  return a[i & 127];\n+}\n+\n+__attribute__ ((noinline, noclone)) int\n+fn2 (int i)\n+{\n+  asm (\"\");\n+  return a[i & 128];\n+}\n+\n+/* { dg-output \"index 128 out of bounds for type 'char \\\\\\[128\\\\\\]'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*load of address \\[^\\n\\r]* with insufficient space for an object of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*note: pointer points here\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\\\^\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+\n+__attribute__ ((noinline, noclone)) int\n+fn3 (int i)\n+{\n+  asm (\"\");\n+  return b[i & 127];\n+}\n+\n+__attribute__ ((noinline, noclone)) int\n+fn4 (int i)\n+{\n+  asm (\"\");\n+  return b[i & 128];\n+}\n+\n+/* { dg-output \"\\[^\\n\\r]*index 128 out of bounds for type 'int \\\\\\[128\\\\\\]'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*load of address \\[^\\n\\r]* with insufficient space for an object of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*note: pointer points here\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\\\^\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+\n+__attribute__ ((noinline, noclone)) int\n+fn5 (int i, int j)\n+{\n+  asm (\"\");\n+  return b[i & j];\n+}\n+\n+/* { dg-output \"\\[^\\n\\r]*index 128 out of bounds for type 'int \\\\\\[128\\\\\\]'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*load of address \\[^\\n\\r]* with insufficient space for an object of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*note: pointer points here\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\\\^\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+\n+__attribute__ ((noinline, noclone)) int\n+fn6 (int i)\n+{\n+  asm (\"\");\n+  return b[i & 0];\n+}\n+\n+int\n+main (void)\n+{\n+  fn1 (128);\n+  fn2 (128);\n+  fn3 (128);\n+  fn4 (128);\n+  fn5 (128, 127);\n+  fn5 (128, 128);\n+  fn6 (128);\n+  return 0;\n+}"}, {"sha": "41cf546cde3e00ea566b0dda48097a3bf0a909ae", "filename": "gcc/ubsan.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e3d997b38dcecab32c463edbdb8a494ac2e7f3/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e3d997b38dcecab32c463edbdb8a494ac2e7f3/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=74e3d997b38dcecab32c463edbdb8a494ac2e7f3", "patch": "@@ -1438,6 +1438,7 @@ instrument_object_size (gimple_stmt_iterator *gsi, bool is_lhs)\n   location_t loc = gimple_location (stmt);\n   tree t = is_lhs ? gimple_get_lhs (stmt) : gimple_assign_rhs1 (stmt);\n   tree type;\n+  tree index = NULL_TREE;\n   HOST_WIDE_INT size_in_bytes;\n \n   type = TREE_TYPE (t);\n@@ -1456,6 +1457,8 @@ instrument_object_size (gimple_stmt_iterator *gsi, bool is_lhs)\n \t}\n       break;\n     case ARRAY_REF:\n+      index = TREE_OPERAND (t, 1);\n+      break;\n     case INDIRECT_REF:\n     case MEM_REF:\n     case VAR_DECL:\n@@ -1537,6 +1540,24 @@ instrument_object_size (gimple_stmt_iterator *gsi, bool is_lhs)\n       && tree_int_cst_le (t, sizet))\n     return;\n \n+  if (index != NULL_TREE\n+      && TREE_CODE (index) == SSA_NAME\n+      && TREE_CODE (sizet) == INTEGER_CST)\n+    {\n+      gimple def = SSA_NAME_DEF_STMT (index);\n+      if (is_gimple_assign (def)\n+\t  && gimple_assign_rhs_code (def) == BIT_AND_EXPR\n+\t  && TREE_CODE (gimple_assign_rhs2 (def)) == INTEGER_CST)\n+\t{\n+\t  tree cst = gimple_assign_rhs2 (def);\n+\t  tree sz = fold_build2 (EXACT_DIV_EXPR, sizetype, sizet,\n+\t\t\t\t TYPE_SIZE_UNIT (type));\n+\t  if (tree_int_cst_sgn (cst) >= 0\n+\t      && tree_int_cst_lt (cst, sz))\n+\t    return;\n+\t}\n+    }\n+\n   /* Nope.  Emit the check.  */\n   t = force_gimple_operand_gsi (gsi, t, true, NULL_TREE, true,\n \t\t\t\tGSI_SAME_STMT);"}]}