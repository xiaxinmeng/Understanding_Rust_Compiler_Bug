{"sha": "e9fb72e85fc8c0c85e9b98a744d3b908901509ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlmYjcyZTg1ZmM4YzBjODVlOWI5OGE3NDRkM2I5MDg5MDE1MDljYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-11-17T09:04:14Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-11-17T09:04:14Z"}, "message": "istream.tcc (getline(basic_istream<>&, basic_string<>&, _CharT)): Remove temporary kludge for libstdc++/15002.\n\n2004-11-17  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/istream.tcc (getline(basic_istream<>&, basic_string<>&,\n\t_CharT)): Remove temporary kludge for libstdc++/15002.\n\t* include/std/std_streambuf.h (class basic_streambuf): Declare\n\tgetline(basic_istream<>&, basic_string<>&, _CharT) as friend.\n\t* include/bits/basic_string.h (getline(basic_istream<>&,\n\tbasic_string<>&, _CharT)): Declare optimized specializations for\n\tchar and wchar_t, using protected members of basic_streambuf.\n\t* src/istream.cc: Define the latter.\n\nFrom-SVN: r90801", "tree": {"sha": "ea625306475111f10944bfe90cf2e54e6c2aaf6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea625306475111f10944bfe90cf2e54e6c2aaf6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9fb72e85fc8c0c85e9b98a744d3b908901509ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9fb72e85fc8c0c85e9b98a744d3b908901509ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9fb72e85fc8c0c85e9b98a744d3b908901509ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9fb72e85fc8c0c85e9b98a744d3b908901509ca/comments", "author": null, "committer": null, "parents": [{"sha": "f6bf324df085c50695b365b342212a5593101991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6bf324df085c50695b365b342212a5593101991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6bf324df085c50695b365b342212a5593101991"}], "stats": {"total": 207, "additions": 193, "deletions": 14}, "files": [{"sha": "ab9349737de4cf05f0f72174299dc89686b5772c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fb72e85fc8c0c85e9b98a744d3b908901509ca/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fb72e85fc8c0c85e9b98a744d3b908901509ca/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e9fb72e85fc8c0c85e9b98a744d3b908901509ca", "patch": "@@ -1,3 +1,14 @@\n+2004-11-17  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/istream.tcc (getline(basic_istream<>&, basic_string<>&,\n+\t_CharT)): Remove temporary kludge for libstdc++/15002.\n+\t* include/std/std_streambuf.h (class basic_streambuf): Declare\n+\tgetline(basic_istream<>&, basic_string<>&, _CharT) as friend.\n+\t* include/bits/basic_string.h (getline(basic_istream<>&,\n+\tbasic_string<>&, _CharT)): Declare optimized specializations for\n+\tchar and wchar_t, using protected members of basic_streambuf.\n+\t* src/istream.cc: Define the latter.\n+\n 2004-11-16  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* docs/html/19_diagnostics/howto.html: Document change from"}, {"sha": "ecca1f523781472bcabe59150bfbac01abb30e33", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fb72e85fc8c0c85e9b98a744d3b908901509ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fb72e85fc8c0c85e9b98a744d3b908901509ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=e9fb72e85fc8c0c85e9b98a744d3b908901509ca", "patch": "@@ -2286,7 +2286,7 @@ namespace std\n     inline bool\n     operator<=(const _CharT* __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n-  { return __rhs.compare(__lhs) >= 0; }\n+    { return __rhs.compare(__lhs) >= 0; }\n \n   // operator >=\n   /**\n@@ -2382,7 +2382,7 @@ namespace std\n    *  delim was encountered, it is extracted but not stored into @a str.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_istream<_CharT,_Traits>&\n+    basic_istream<_CharT, _Traits>&\n     getline(basic_istream<_CharT, _Traits>& __is,\n \t    basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);\n \n@@ -2399,9 +2399,21 @@ namespace std\n    *  encountered, it is extracted but not stored into @a str.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    inline basic_istream<_CharT,_Traits>&\n+    inline basic_istream<_CharT, _Traits>&\n     getline(basic_istream<_CharT, _Traits>& __is,\n \t    basic_string<_CharT, _Traits, _Alloc>& __str);\n+    \n+  template<>\n+    basic_istream<char>&\n+    getline(basic_istream<char>& __in, basic_string<char>& __str,\n+\t    char __delim);\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    basic_istream<wchar_t>&\n+    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,\n+\t    wchar_t __delim);\n+#endif  \n } // namespace std\n \n #endif /* _BASIC_STRING_H */"}, {"sha": "1ed3e8d86982718e9ec5ce1cf44c94f59332ac1c", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fb72e85fc8c0c85e9b98a744d3b908901509ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fb72e85fc8c0c85e9b98a744d3b908901509ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=e9fb72e85fc8c0c85e9b98a744d3b908901509ca", "patch": "@@ -1160,10 +1160,7 @@ namespace std\n \t{\n \t  try\n \t    {\n-\t      // Avoid reallocation for common case.\n \t      __str.erase();\n-\t      _CharT __buf[128];\n-\t      __size_type __len = 0;\n \t      const __int_type __idelim = _Traits::to_int_type(__delim);\n \t      const __int_type __eof = _Traits::eof();\n \t      __streambuf_type* __sb = __in.rdbuf();\n@@ -1173,16 +1170,10 @@ namespace std\n \t\t     && !_Traits::eq_int_type(__c, __eof)\n \t\t     && !_Traits::eq_int_type(__c, __idelim))\n \t\t{\n-\t\t  if (__len == sizeof(__buf) / sizeof(_CharT))\n-\t\t    {\n-\t\t      __str.append(__buf, sizeof(__buf) / sizeof(_CharT));\n-\t\t      __len = 0;\n-\t\t    }\n-\t\t  __buf[__len++] = _Traits::to_char_type(__c);\n+\t\t  __str += _Traits::to_char_type(__c);\n \t\t  ++__extracted;\n \t\t  __c = __sb->snextc();\n \t\t}\n-\t      __str.append(__buf, __len);\n \n \t      if (_Traits::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;"}, {"sha": "eed17767cc0afc61164a94ac91379476f4015210", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fb72e85fc8c0c85e9b98a744d3b908901509ca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fb72e85fc8c0c85e9b98a744d3b908901509ca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=e9fb72e85fc8c0c85e9b98a744d3b908901509ca", "patch": "@@ -154,7 +154,12 @@ namespace std\n       friend streamsize\n       __copy_streambufs<>(__streambuf_type* __sbin,\n \t\t\t  __streambuf_type* __sbout);\n-      \n+\n+      template<typename _CharT2, typename _Traits2, typename _Alloc>\n+        friend basic_istream<_CharT2, _Traits2>&\n+        getline(basic_istream<_CharT2, _Traits2>&,\n+\t\tbasic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);\n+\n     protected:\n       //@{\n       /**"}, {"sha": "462824dada91d136dcd3364664c357218d8bb9b0", "filename": "libstdc++-v3/src/istream.cc", "status": "modified", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fb72e85fc8c0c85e9b98a744d3b908901509ca/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fb72e85fc8c0c85e9b98a744d3b908901509ca/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=e9fb72e85fc8c0c85e9b98a744d3b908901509ca", "patch": "@@ -218,6 +218,86 @@ namespace std\n       return *this;\n     }\n \n+  template<>\n+    basic_istream<char>&\n+    getline(basic_istream<char>& __in, basic_string<char>& __str,\n+\t    char __delim)\n+    {\n+      typedef basic_istream<char>       \t__istream_type;\n+      typedef __istream_type::int_type\t\t__int_type;\n+      typedef __istream_type::char_type\t\t__char_type;\n+      typedef __istream_type::traits_type\t__traits_type;\n+      typedef __istream_type::__streambuf_type  __streambuf_type;\n+      typedef __istream_type::__ctype_type\t__ctype_type;\n+      typedef basic_string<char>        \t__string_type;\n+      typedef __string_type::size_type\t\t__size_type;\n+\n+      __size_type __extracted = 0;\n+      const __size_type __n = __str.max_size();\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      __istream_type::sentry __cerb(__in, true);\n+      if (__cerb)\n+\t{\n+\t  try\n+\t    {\n+\t      __str.erase();\n+\t      const __int_type __idelim = __traits_type::to_int_type(__delim);\n+\t      const __int_type __eof = __traits_type::eof();\n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      __int_type __c = __sb->sgetc();\n+\n+\t      while (__extracted < __n\n+\t\t     && !__traits_type::eq_int_type(__c, __eof)\n+\t\t     && !__traits_type::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n+\t\t\t\t\t\t\t  - __sb->gptr()),\n+\t\t\t\t\t       streamsize(__n - __extracted));\n+\t\t  if (__size > 1)\n+\t\t    {\n+\t\t      const __char_type* __p = __traits_type::find(__sb->gptr(),\n+\t\t\t\t\t\t\t\t   __size,\n+\t\t\t\t\t\t\t\t   __delim);\n+\t\t      if (__p)\n+\t\t\t__size = __p - __sb->gptr();\n+\t\t      __str.append(__sb->gptr(), __size);\n+\t\t      __sb->gbump(__size);\n+\t\t      __extracted += __size;\n+\t\t      __c = __sb->sgetc();\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      __str += __traits_type::to_char_type(__c);\n+\t\t      ++__extracted;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\t\t  \n+\t\t}\n+\n+\t      if (__traits_type::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t      else if (__traits_type::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  ++__extracted;\n+\t\t  __sb->sbumpc();\n+\t\t}\n+\t      else\n+\t\t__err |= ios_base::failbit;\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 91. Description of operator>> and getline() for string<>\n+\t      // might cause endless loop\n+\t      __in._M_setstate(ios_base::badbit);\n+\t    }\n+\t}\n+      if (!__extracted)\n+\t__err |= ios_base::failbit;\n+      if (__err)\n+\t__in.setstate(__err);\n+      return __in;\n+    }\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<>\n     basic_istream<wchar_t>&\n@@ -401,5 +481,85 @@ namespace std\n \t}\n       return *this;\n     }\n+\n+  template<>\n+    basic_istream<wchar_t>&\n+    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,\n+\t    wchar_t __delim)\n+    {\n+      typedef basic_istream<wchar_t>       \t__istream_type;\n+      typedef __istream_type::int_type\t\t__int_type;\n+      typedef __istream_type::char_type\t\t__char_type;\n+      typedef __istream_type::traits_type\t__traits_type;\n+      typedef __istream_type::__streambuf_type  __streambuf_type;\n+      typedef __istream_type::__ctype_type\t__ctype_type;\n+      typedef basic_string<wchar_t>        \t__string_type;\n+      typedef __string_type::size_type\t\t__size_type;\n+\n+      __size_type __extracted = 0;\n+      const __size_type __n = __str.max_size();\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      __istream_type::sentry __cerb(__in, true);\n+      if (__cerb)\n+\t{\n+\t  try\n+\t    {\n+\t      __str.erase();\n+\t      const __int_type __idelim = __traits_type::to_int_type(__delim);\n+\t      const __int_type __eof = __traits_type::eof();\n+\t      __streambuf_type* __sb = __in.rdbuf();\n+\t      __int_type __c = __sb->sgetc();\n+\n+\t      while (__extracted < __n\n+\t\t     && !__traits_type::eq_int_type(__c, __eof)\n+\t\t     && !__traits_type::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  streamsize __size = std::min(streamsize(__sb->egptr()\n+\t\t\t\t\t\t\t  - __sb->gptr()),\n+\t\t\t\t\t       streamsize(__n - __extracted));\n+\t\t  if (__size > 1)\n+\t\t    {\n+\t\t      const __char_type* __p = __traits_type::find(__sb->gptr(),\n+\t\t\t\t\t\t\t\t   __size,\n+\t\t\t\t\t\t\t\t   __delim);\n+\t\t      if (__p)\n+\t\t\t__size = __p - __sb->gptr();\n+\t\t      __str.append(__sb->gptr(), __size);\n+\t\t      __sb->gbump(__size);\n+\t\t      __extracted += __size;\n+\t\t      __c = __sb->sgetc();\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      __str += __traits_type::to_char_type(__c);\n+\t\t      ++__extracted;\n+\t\t      __c = __sb->snextc();\n+\t\t    }\t\t  \n+\t\t}\n+\n+\t      if (__traits_type::eq_int_type(__c, __eof))\n+\t\t__err |= ios_base::eofbit;\n+\t      else if (__traits_type::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  ++__extracted;\n+\t\t  __sb->sbumpc();\n+\t\t}\n+\t      else\n+\t\t__err |= ios_base::failbit;\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 91. Description of operator>> and getline() for string<>\n+\t      // might cause endless loop\n+\t      __in._M_setstate(ios_base::badbit);\n+\t    }\n+\t}\n+      if (!__extracted)\n+\t__err |= ios_base::failbit;\n+      if (__err)\n+\t__in.setstate(__err);\n+      return __in;\n+    }\n #endif\n } // namespace std"}]}