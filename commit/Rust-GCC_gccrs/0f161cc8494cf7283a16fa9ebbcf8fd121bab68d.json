{"sha": "0f161cc8494cf7283a16fa9ebbcf8fd121bab68d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYxNjFjYzg0OTRjZjcyODNhMTZmYTllYmJjZjhmZDEyMWJhYjY4ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-26T09:44:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-26T09:47:07Z"}, "message": "c++: Implement P1102R2 - Down with ()!\n\nThe following patch implements P1102R2.\nFor attributes, we have already attribute parsing before the parameter\ndeclarations and so when that is omitted, if the attributes are first we\nalready accept it.\n\n2021-02-26  Jakub Jelinek  <jakub@redhat.com>\n\n\t* parser.c (cp_parser_lambda_declarator_opt): Implement\n\tP1102R2 - Down with ()! Make ()s optional before lambda specifiers\n\tfor -std={c,gnu}++2b or with pedwarn in earlier versions.\n\n\t* g++.dg/cpp23/lambda-specifiers1.C: New test.", "tree": {"sha": "4962d03899c296616a087ba3740a2df3a5f6beca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4962d03899c296616a087ba3740a2df3a5f6beca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f161cc8494cf7283a16fa9ebbcf8fd121bab68d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f161cc8494cf7283a16fa9ebbcf8fd121bab68d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f161cc8494cf7283a16fa9ebbcf8fd121bab68d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f161cc8494cf7283a16fa9ebbcf8fd121bab68d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27f9a87886d48448f83e0e559dcf028b1a4a4ec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f9a87886d48448f83e0e559dcf028b1a4a4ec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f9a87886d48448f83e0e559dcf028b1a4a4ec6"}], "stats": {"total": 128, "additions": 93, "deletions": 35}, "files": [{"sha": "c52f90c2715a38b1f688b4840b216e6fb184c243", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 75, "deletions": 35, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f161cc8494cf7283a16fa9ebbcf8fd121bab68d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f161cc8494cf7283a16fa9ebbcf8fd121bab68d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0f161cc8494cf7283a16fa9ebbcf8fd121bab68d", "patch": "@@ -11223,12 +11223,12 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n /* Parse the (optional) middle of a lambda expression.\n \n    lambda-declarator:\n-     ( parameter-declaration-clause )\n-       decl-specifier-seq [opt]\n-       noexcept-specifier [opt]\n-       attribute-specifier-seq [opt]\n-       trailing-return-type [opt]\n-       requires-clause [opt]\n+     ( parameter-declaration-clause ) lambda-specifiers requires-clause [opt]\n+     lambda-specifiers (C++23)\n+\n+   lambda-specifiers:\n+     decl-specifier-seq [opt] noexcept-specifier [opt]\n+       attribute-specifier-seq [opt] trailing-return-type [opt]\n \n    LAMBDA_EXPR is the current representation of the lambda expression.  */\n \n@@ -11248,6 +11248,8 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n   tree tx_qual = NULL_TREE;\n   tree return_type = NULL_TREE;\n   tree trailing_requires_clause = NULL_TREE;\n+  bool has_param_list = false;\n+  location_t omitted_parms_loc = UNKNOWN_LOCATION;\n   cp_decl_specifier_seq lambda_specs;\n   clear_decl_specs (&lambda_specs);\n   /* A lambda op() is const unless explicitly 'mutable'.  */\n@@ -11334,42 +11336,80 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \t\t     \"default argument specified for lambda parameter\");\n \n       parens.require_close (parser);\n+      has_param_list = true;\n+    }\n+  else if (cxx_dialect < cxx23)\n+    omitted_parms_loc = cp_lexer_peek_token (parser->lexer)->location;\n \n-      /* In the decl-specifier-seq of the lambda-declarator, each\n-\t decl-specifier shall either be mutable or constexpr.  */\n-      int declares_class_or_enum;\n-      if (cp_lexer_next_token_is_decl_specifier_keyword (parser->lexer)\n-\t  && !cp_next_tokens_can_be_gnu_attribute_p (parser))\n-\tcp_parser_decl_specifier_seq (parser,\n-\t\t\t\t      CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR,\n-\t\t\t\t      &lambda_specs, &declares_class_or_enum);\n-      if (lambda_specs.storage_class == sc_mutable)\n-\t{\n-\t  LAMBDA_EXPR_MUTABLE_P (lambda_expr) = 1;\n-\t  quals = TYPE_UNQUALIFIED;\n-\t  if (lambda_specs.conflicting_specifiers_p)\n-\t    error_at (lambda_specs.locations[ds_storage_class],\n-\t\t      \"duplicate %<mutable%>\");\n-\t}\n+  /* In the decl-specifier-seq of the lambda-declarator, each\n+     decl-specifier shall either be mutable or constexpr.  */\n+  int declares_class_or_enum;\n+  if (cp_lexer_next_token_is_decl_specifier_keyword (parser->lexer)\n+      && !cp_next_tokens_can_be_gnu_attribute_p (parser))\n+    cp_parser_decl_specifier_seq (parser,\n+\t\t\t\t  CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR,\n+\t\t\t\t  &lambda_specs, &declares_class_or_enum);\n \n-      tx_qual = cp_parser_tx_qualifier_opt (parser);\n+  if (omitted_parms_loc && lambda_specs.any_specifiers_p)\n+    {\n+      pedwarn (omitted_parms_loc, 0,\n+\t       \"parameter declaration before lambda declaration \"\n+\t       \"specifiers only optional with %<-std=c++2b%> or \"\n+\t       \"%<-std=gnu++2b%>\");\n+      omitted_parms_loc = UNKNOWN_LOCATION;\n+    }\n \n-      /* Parse optional exception specification.  */\n-      exception_spec\n-\t= cp_parser_exception_specification_opt (parser, CP_PARSER_FLAGS_NONE);\n+  if (lambda_specs.storage_class == sc_mutable)\n+    {\n+      LAMBDA_EXPR_MUTABLE_P (lambda_expr) = 1;\n+      quals = TYPE_UNQUALIFIED;\n+      if (lambda_specs.conflicting_specifiers_p)\n+\terror_at (lambda_specs.locations[ds_storage_class],\n+\t\t  \"duplicate %<mutable%>\");\n+    }\n \n-      std_attrs = cp_parser_std_attribute_spec_seq (parser);\n+  tx_qual = cp_parser_tx_qualifier_opt (parser);\n+  if (omitted_parms_loc && tx_qual)\n+    {\n+      pedwarn (omitted_parms_loc, 0,\n+\t       \"parameter declaration before lambda transaction \"\n+\t       \"qualifier only optional with %<-std=c++2b%> or \"\n+\t       \"%<-std=gnu++2b%>\");\n+      omitted_parms_loc = UNKNOWN_LOCATION;\n+    }\n \n-      /* Parse optional trailing return type.  */\n-      if (cp_lexer_next_token_is (parser->lexer, CPP_DEREF))\n-        {\n-          cp_lexer_consume_token (parser->lexer);\n-          return_type = cp_parser_trailing_type_id (parser);\n-        }\n+  /* Parse optional exception specification.  */\n+  exception_spec\n+    = cp_parser_exception_specification_opt (parser, CP_PARSER_FLAGS_NONE);\n \n-      if (cp_next_tokens_can_be_gnu_attribute_p (parser))\n-\tgnu_attrs = cp_parser_gnu_attributes_opt (parser);\n+  if (omitted_parms_loc && exception_spec)\n+    {\n+      pedwarn (omitted_parms_loc, 0,\n+\t       \"parameter declaration before lambda exception \"\n+\t       \"specification only optional with %<-std=c++2b%> or \"\n+\t       \"%<-std=gnu++2b%>\");\n+      omitted_parms_loc = UNKNOWN_LOCATION;\n+    }\n \n+  std_attrs = cp_parser_std_attribute_spec_seq (parser);\n+\n+  /* Parse optional trailing return type.  */\n+  if (cp_lexer_next_token_is (parser->lexer, CPP_DEREF))\n+    {\n+      if (omitted_parms_loc)\n+\tpedwarn (omitted_parms_loc, 0,\n+\t\t \"parameter declaration before lambda trailing \"\n+\t\t \"return type only optional with %<-std=c++2b%> or \"\n+\t\t \"%<-std=gnu++2b%>\");\n+      cp_lexer_consume_token (parser->lexer);\n+      return_type = cp_parser_trailing_type_id (parser);\n+    }\n+\n+  if (cp_next_tokens_can_be_gnu_attribute_p (parser))\n+    gnu_attrs = cp_parser_gnu_attributes_opt (parser);\n+\n+  if (has_param_list)\n+    {\n       /* Parse optional trailing requires clause.  */\n       trailing_requires_clause = cp_parser_requires_clause_opt (parser, false);\n "}, {"sha": "6729a4555ddd6c5a98771a71ee3b5bc9850c2bd7", "filename": "gcc/testsuite/g++.dg/cpp23/lambda-specifiers1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f161cc8494cf7283a16fa9ebbcf8fd121bab68d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Flambda-specifiers1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f161cc8494cf7283a16fa9ebbcf8fd121bab68d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Flambda-specifiers1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Flambda-specifiers1.C?ref=0f161cc8494cf7283a16fa9ebbcf8fd121bab68d", "patch": "@@ -0,0 +1,18 @@\n+// P1102R2 - Down with ()!\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+void\n+foo ()\n+{\n+  auto a = [] mutable {};\t// { dg-warning \"parameter declaration before lambda declaration specifiers only optional with\" \"\" { target c++20_down } }\n+#if __cpp_constexpr >= 201603L\n+  auto b = [] constexpr {};\t// { dg-warning \"parameter declaration before lambda declaration specifiers only optional with\" \"\" { target { c++17 && c++20_down } } }\n+#endif\n+#if __cpp_consteval >= 201811L\n+  auto c = [] consteval {};\t// { dg-warning \"parameter declaration before lambda declaration specifiers only optional with\" \"\" { target c++20_only } }\n+#endif\n+  auto d = [] throw() {};\t// { dg-warning \"parameter declaration before lambda exception specification only optional with\" \"\" { target c++20_down } }\n+  auto e = [] noexcept {};\t// { dg-warning \"parameter declaration before lambda exception specification only optional with\" \"\" { target c++20_down } }\n+  auto f = [] -> int { return 0; };\t// { dg-warning \"parameter declaration before lambda trailing return type only optional with\" \"\" { target c++20_down } }\n+}"}]}