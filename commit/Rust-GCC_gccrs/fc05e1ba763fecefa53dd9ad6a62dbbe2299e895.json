{"sha": "fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMwNWUxYmE3NjNmZWNlZmE1M2RkOWFkNmE2MmRiYmUyMjk5ZTg5NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-16T16:14:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-16T16:14:00Z"}, "message": "random.h (operator==(const uniform_int_distribution<>&, const uniform_int_distribution<>&), [...]): Add, likewise for operator!=.\n\n2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/random.h (operator==(const uniform_int_distribution<>&,\n\tconst uniform_int_distribution<>&), operator==(const\n\tuniform_real_distribution<>&, const uniform_real_distribution<>&),\n\toperator==(const lognormal_distribution<>&,\n\tconst lognormal_distribution<>&), operator==(const\n\tchi_squared_distribution<>&, const chi_squared_distribution<>&),\n\toperator==(const cauchy_distribution<>&, const cauchy_distribution<>&),\n\toperator==(const fisher_distribution<>&, const fisher_distribution<>&),\n\toperator==(const student_t_distribution<>&,\n\tconst student_t_distribution<>&), operator==(const\n\tbernoulli_distribution<>&, const bernoulli_distribution<>&),\n\toperator==(const binomial_distribution<>&, const\n\tbinomial_distribution<>&), operator==(const geometric_distribution<>&,\n\tconst geometric_distribution<>&), operator==(const\n\tnegative_binomial_distribution<>&, const\n\tnegative_binomial_distribution<>&), operator==(const\n\tpoisson_distribution<>&, const poisson_distribution<>&),\n\toperator==(const exponential_distribution<>&,\n\tconst exponential_distribution<>&), operator==(const\n\tgamma_distribution<>&, const gamma_distribution<>&), operator==(const\n\tweibull_distribution<>&, const weibull_distribution<>&),\n\toperator==(const extreme_value_distribution<>&,\n\tconst extreme_value_distribution<>&), operator==(const\n\tdiscrete_distribution<>&, const discrete_distribution<>&),\n\toperator==(const piecewise_constant_distribution<>&,\n\tconst piecewise_constant_distribution<>&), operator==(const\n\tpiecewise_linear_distribution<>&, const\n\tpiecewise_linear_distribution<>&)): Add, likewise for operator!=.\n\t(operator!=(const independent_bits_engine<>&, const\n\tindependent_bits_engine<>&), operator!=(const\n\tsubtract_with_carry_engine<>&, const subtract_with_carry_engine<>&),\n\toperator!=(const discard_block_engine<>&, const\n\tdiscard_block_engine<>&), operator!=(const mersenne_twister_engine<>&,\n\tconst mersenne_twister_engine<>&), operator!=(const\n\tlinear_congruential_engine<>&, const linear_congruential_engine<>&),\n\toperator!=(const shuffle_order_engine<>&, const\n\tshuffle_order_engine<>&): Add.\n\t* include/bits/random.tcc (operator==(const normal_distribution<>&,\n\tconst normal_distribution<>&)): Add.\n\t* testsuite/26_numerics/random/uniform_real_distribution/operators/\n\tinequal.cc: New.\n\t* testsuite/26_numerics/random/uniform_real_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n\toperators/inequal.cc: Likewise.\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n\toperators/equal.cc: Likewise.\n\t* testsuite/26_numerics/random/chi_squared_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/chi_squared_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/normal_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/normal_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/uniform_int_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/uniform_int_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/poisson_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/poisson_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/bernoulli_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/bernoulli_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/discrete_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/discrete_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/weibull_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/weibull_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/independent_bits_engine/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/subtract_with_carry_engine/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/discard_block_engine/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/cauchy_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/cauchy_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/negative_binomial_distribution/\n\toperators/inequal.cc: Likewise.\n\t* testsuite/26_numerics/random/negative_binomial_distribution/\n\toperators/equal.cc: Likewise.\n\t* testsuite/26_numerics/random/gamma_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/gamma_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/mersenne_twister_engine/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/fisher_f_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/fisher_f_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/exponential_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/exponential_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/binomial_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/binomial_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/lognormal_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/lognormal_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/extreme_value_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/extreme_value_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n\toperators/inequal.cc: Likewise.\n\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n\toperators/equal.cc: Likewise.\n\t* testsuite/26_numerics/random/student_t_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/student_t_distribution/operators/\n\tequal.cc: Likewise.\n\t* testsuite/26_numerics/random/linear_congruential_engine/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/shuffle_order_engine/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/geometric_distribution/operators/\n\tinequal.cc: Likewise.\n\t* testsuite/26_numerics/random/geometric_distribution/operators/\n\tequal.cc: Likewise.\n\nFrom-SVN: r157489", "tree": {"sha": "3c0aac20dce945d032bfca94ca30445832a37e84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c0aac20dce945d032bfca94ca30445832a37e84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/comments", "author": null, "committer": null, "parents": [{"sha": "db5c4b8b9106fac09ae2d547d763c18484d8d305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5c4b8b9106fac09ae2d547d763c18484d8d305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5c4b8b9106fac09ae2d547d763c18484d8d305"}], "stats": {"total": 2837, "additions": 2827, "deletions": 10}, "files": [{"sha": "9c37f37ae30425bf5332ca77e2593e245a53ba3e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -1,3 +1,137 @@\n+2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/random.h (operator==(const uniform_int_distribution<>&,\n+\tconst uniform_int_distribution<>&), operator==(const\n+\tuniform_real_distribution<>&, const uniform_real_distribution<>&),\n+\toperator==(const lognormal_distribution<>&,\n+\tconst lognormal_distribution<>&), operator==(const\n+\tchi_squared_distribution<>&, const chi_squared_distribution<>&),\n+\toperator==(const cauchy_distribution<>&, const cauchy_distribution<>&),\n+\toperator==(const fisher_distribution<>&, const fisher_distribution<>&),\n+\toperator==(const student_t_distribution<>&,\n+\tconst student_t_distribution<>&), operator==(const\n+\tbernoulli_distribution<>&, const bernoulli_distribution<>&),\n+\toperator==(const binomial_distribution<>&, const\n+\tbinomial_distribution<>&), operator==(const geometric_distribution<>&,\n+\tconst geometric_distribution<>&), operator==(const\n+\tnegative_binomial_distribution<>&, const\n+\tnegative_binomial_distribution<>&), operator==(const\n+\tpoisson_distribution<>&, const poisson_distribution<>&),\n+\toperator==(const exponential_distribution<>&,\n+\tconst exponential_distribution<>&), operator==(const\n+\tgamma_distribution<>&, const gamma_distribution<>&), operator==(const\n+\tweibull_distribution<>&, const weibull_distribution<>&),\n+\toperator==(const extreme_value_distribution<>&,\n+\tconst extreme_value_distribution<>&), operator==(const\n+\tdiscrete_distribution<>&, const discrete_distribution<>&),\n+\toperator==(const piecewise_constant_distribution<>&,\n+\tconst piecewise_constant_distribution<>&), operator==(const\n+\tpiecewise_linear_distribution<>&, const\n+\tpiecewise_linear_distribution<>&)): Add, likewise for operator!=.\n+\t(operator!=(const independent_bits_engine<>&, const\n+\tindependent_bits_engine<>&), operator!=(const\n+\tsubtract_with_carry_engine<>&, const subtract_with_carry_engine<>&),\n+\toperator!=(const discard_block_engine<>&, const\n+\tdiscard_block_engine<>&), operator!=(const mersenne_twister_engine<>&,\n+\tconst mersenne_twister_engine<>&), operator!=(const\n+\tlinear_congruential_engine<>&, const linear_congruential_engine<>&),\n+\toperator!=(const shuffle_order_engine<>&, const\n+\tshuffle_order_engine<>&): Add.\n+\t* include/bits/random.tcc (operator==(const normal_distribution<>&,\n+\tconst normal_distribution<>&)): Add.\n+\t* testsuite/26_numerics/random/uniform_real_distribution/operators/\n+\tinequal.cc: New.\n+\t* testsuite/26_numerics/random/uniform_real_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n+\toperators/inequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n+\toperators/equal.cc: Likewise.\n+\t* testsuite/26_numerics/random/chi_squared_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/chi_squared_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/normal_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/normal_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/poisson_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/poisson_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/bernoulli_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/bernoulli_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/discrete_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/discrete_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/weibull_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/weibull_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/independent_bits_engine/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/subtract_with_carry_engine/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/discard_block_engine/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/cauchy_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/cauchy_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/negative_binomial_distribution/\n+\toperators/inequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/negative_binomial_distribution/\n+\toperators/equal.cc: Likewise.\n+\t* testsuite/26_numerics/random/gamma_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/gamma_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/mersenne_twister_engine/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/fisher_f_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/fisher_f_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/exponential_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/exponential_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/binomial_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/binomial_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/lognormal_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/lognormal_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/extreme_value_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/extreme_value_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n+\toperators/inequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n+\toperators/equal.cc: Likewise.\n+\t* testsuite/26_numerics/random/student_t_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/student_t_distribution/operators/\n+\tequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/shuffle_order_engine/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/geometric_distribution/operators/\n+\tinequal.cc: Likewise.\n+\t* testsuite/26_numerics/random/geometric_distribution/operators/\n+\tequal.cc: Likewise.\n+\n 2010-03-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/forward_list.tcc (_Fwd_list_node_base::"}, {"sha": "3f1a61535af49611649ac125e0ab149e97655baf", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 637, "deletions": 10, "changes": 647, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -268,7 +268,8 @@ namespace std\n        * @param __rhs Another linear congruential random number generator\n        *              object.\n        *\n-       * @returns true if the two objects are equal, false otherwise.\n+       * @returns true if the infinite sequences of generated values\n+       *          would be equal, false otherwise.\n        */\n       friend bool\n       operator==(const linear_congruential_engine& __lhs,\n@@ -314,6 +315,25 @@ namespace std\n       _UIntType _M_x;\n     };\n \n+  /**\n+   * @brief Compares two linear congruential random number generator\n+   * objects of the same type for inequality.\n+   *\n+   * @param __lhs A linear congruential random number generator object.\n+   * @param __rhs Another linear congruential random number generator\n+   *              object.\n+   *\n+   * @returns true if the infinite sequences of generated values\n+   *          would be different, false otherwise.\n+   */\n+  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    inline bool\n+    operator!=(const std::linear_congruential_engine<_UIntType, __a,\n+\t       __c, __m>& __lhs,\n+\t       const std::linear_congruential_engine<_UIntType, __a,\n+\t       __c, __m>& __rhs)\n+    { return !(__lhs == __rhs); }\n+\n \n   /**\n    * A generalized feedback shift register discrete random number generator.\n@@ -461,7 +481,8 @@ namespace std\n        * @param __rhs Another % mersenne_twister_engine random number\n        *              generator object.\n        *\n-       * @returns true if the two objects are equal, false otherwise.\n+       * @returns true if the infinite sequences of generated values\n+       *          would be equal, false otherwise.\n        */\n       friend bool\n       operator==(const mersenne_twister_engine& __lhs,\n@@ -525,6 +546,31 @@ namespace std\n       size_t    _M_p;\n     };\n \n+  /**\n+   * @brief Compares two % mersenne_twister_engine random number generator\n+   *        objects of the same type for inequality.\n+   *\n+   * @param __lhs A % mersenne_twister_engine random number generator\n+   *              object.\n+   * @param __rhs Another % mersenne_twister_engine random number\n+   *              generator object.\n+   *\n+   * @returns true if the infinite sequences of generated values\n+   *          would be different, false otherwise.\n+   */\n+  template<typename _UIntType, size_t __w,\n+\t   size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t,\n+\t   _UIntType __c, size_t __l, _UIntType __f>\n+    inline bool\n+    operator!=(const std::mersenne_twister_engine<_UIntType, __w, __n, __m,\n+\t       __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __lhs,\n+\t       const std::mersenne_twister_engine<_UIntType, __w, __n, __m,\n+\t       __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __rhs)\n+    { return !(__lhs == __rhs); }\n+\n+\n   /**\n    * @brief The Marsaglia-Zaman generator.\n    *\n@@ -655,8 +701,9 @@ namespace std\n        * @param __rhs Another % subtract_with_carry_engine random number\n        *              generator object.\n        *\n-       * @returns true if the two objects are equal, false otherwise.\n-       */\n+       * @returns true if the infinite sequences of generated values\n+       *          would be equal, false otherwise.\n+      */\n       friend bool\n       operator==(const subtract_with_carry_engine& __lhs,\n \t\t const subtract_with_carry_engine& __rhs)\n@@ -706,6 +753,27 @@ namespace std\n       size_t     _M_p;\n     };\n \n+  /**\n+   * @brief Compares two % subtract_with_carry_engine random number\n+   *        generator objects of the same type for inequality.\n+   *\n+   * @param __lhs A % subtract_with_carry_engine random number generator\n+   *              object.\n+   * @param __rhs Another % subtract_with_carry_engine random number\n+   *              generator object.\n+   *\n+   * @returns true if the infinite sequences of generated values\n+   *          would be different, false otherwise.\n+   */\n+  template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n+    inline bool\n+    operator!=(const std::subtract_with_carry_engine<_UIntType, __w,\n+\t       __s, __r>& __lhs,\n+\t       const std::subtract_with_carry_engine<_UIntType, __w,\n+\t       __s, __r>& __rhs)\n+    { return !(__lhs == __rhs); }\n+\n+\n   /**\n    * Produces random numbers from some base engine by discarding blocks of\n    * data.\n@@ -865,12 +933,13 @@ namespace std\n        * @param __rhs Another %discard_block_engine random number generator\n        *              object.\n        *\n-       * @returns true if the two objects are equal, false otherwise.\n+       * @returns true if the infinite sequences of generated values\n+       *          would be equal, false otherwise.\n        */\n       friend bool\n       operator==(const discard_block_engine& __lhs,\n \t\t const discard_block_engine& __rhs)\n-      { return (__lhs._M_b == __rhs._M_b) && (__lhs._M_n == __rhs._M_n); }\n+      { return __lhs._M_b == __rhs._M_b && __lhs._M_n == __rhs._M_n; }\n \n       /**\n        * @brief Inserts the current state of a %discard_block_engine random\n@@ -913,6 +982,26 @@ namespace std\n       size_t _M_n;\n     };\n \n+  /**\n+   * @brief Compares two %discard_block_engine random number generator\n+   *        objects of the same type for inequality.\n+   *\n+   * @param __lhs A %discard_block_engine random number generator object.\n+   * @param __rhs Another %discard_block_engine random number generator\n+   *              object.\n+   *\n+   * @returns true if the infinite sequences of generated values\n+   *          would be different, false otherwise.\n+   */\n+  template<typename _RandomNumberEngine, size_t __p, size_t __r>\n+    inline bool\n+    operator!=(const std::discard_block_engine<_RandomNumberEngine, __p,\n+\t       __r>& __lhs,\n+\t       const std::discard_block_engine<_RandomNumberEngine, __p,\n+\t       __r>& __rhs)\n+    { return !(__lhs == __rhs); }\n+\n+\n   /**\n    * Produces random numbers by combining random numbers from some base\n    * engine to produce random numbers with a specifies number of bits @p __w.\n@@ -1060,7 +1149,8 @@ namespace std\n        * @param __rhs Another %independent_bits_engine random number generator\n        *              object.\n        *\n-       * @returns true if the two objects are equal, false otherwise.\n+       * @returns true if the infinite sequences of generated values\n+       *          would be equal, false otherwise.\n        */\n       friend bool\n       operator==(const independent_bits_engine& __lhs,\n@@ -1093,6 +1183,26 @@ namespace std\n       _RandomNumberEngine _M_b;\n     };\n \n+  /**\n+   * @brief Compares two %independent_bits_engine random number generator\n+   * objects of the same type for inequality.\n+   *\n+   * @param __lhs A %independent_bits_engine random number generator\n+   *              object.\n+   * @param __rhs Another %independent_bits_engine random number generator\n+   *              object.\n+   *\n+   * @returns true if the infinite sequences of generated values\n+   *          would be different, false otherwise.\n+   */\n+  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>\n+    inline bool\n+    operator!=(const std::independent_bits_engine<_RandomNumberEngine, __w,\n+\t       _UIntType>& __lhs,\n+\t       const std::independent_bits_engine<_RandomNumberEngine, __w,\n+\t       _UIntType>& __rhs)\n+    { return !(__lhs == __rhs); }\n+\n   /**\n    * @brief Inserts the current state of a %independent_bits_engine random\n    *        number generator engine @p __x into the output stream @p __os.\n@@ -1114,6 +1224,7 @@ namespace std\n       return __os;\n     }\n \n+\n   /**\n    * @brief Produces random numbers by combining random numbers from some\n    * base engine to produce random numbers with a specifies number of bits\n@@ -1273,8 +1384,9 @@ namespace std\n        * @param __rhs Another %shuffle_order_engine random number generator\n        *              object.\n        *\n-       * @returns true if the two objects are equal, false otherwise.\n-       */\n+       * @returns true if the infinite sequences of generated values\n+       *          would be equal, false otherwise.\n+      */\n       friend bool\n       operator==(const shuffle_order_engine& __lhs,\n \t\t const shuffle_order_engine& __rhs)\n@@ -1328,6 +1440,26 @@ namespace std\n       result_type _M_y;\n     };\n \n+  /**\n+   * Compares two %shuffle_order_engine random number generator objects\n+   * of the same type for inequality.\n+   *\n+   * @param __lhs A %shuffle_order_engine random number generator object.\n+   * @param __rhs Another %shuffle_order_engine random number generator\n+   *              object.\n+   *\n+   * @returns true if the infinite sequences of generated values\n+   *          would be different, false otherwise.\n+   */\n+  template<typename _RandomNumberEngine, size_t __k>\n+    inline bool\n+    operator!=(const std::shuffle_order_engine<_RandomNumberEngine,\n+\t       __k>& __lhs,\n+\t       const std::shuffle_order_engine<_RandomNumberEngine,\n+\t       __k>& __rhs)\n+    { return !(__lhs == __rhs); }\n+\n+\n   /**\n    * The classic Minimum Standard rand0 of Lewis, Goodman, and Miller.\n    */\n@@ -1522,6 +1654,10 @@ namespace std\n \tb() const\n \t{ return _M_b; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n+\n       private:\n \t_IntType _M_a;\n \t_IntType _M_b;\n@@ -1609,6 +1745,26 @@ namespace std\n       param_type _M_param;\n     };\n \n+  /**\n+   * @brief Return true if two uniform integer distributions have\n+   *        the same parameters.\n+   */\n+  template<typename _IntType>\n+    inline bool\n+    operator==(const std::uniform_int_distribution<_IntType>& __d1,\n+\t       const std::uniform_int_distribution<_IntType>& __d2)\n+    { return __d1.param() == __d2.param(); }\n+\n+  /**\n+   * @brief Return true if two uniform integer distributions have\n+   *        different parameters.\n+   */\n+  template<typename _IntType>\n+    inline bool\n+    operator!=(const std::uniform_int_distribution<_IntType>& __d1,\n+\t       const std::uniform_int_distribution<_IntType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n   /**\n    * @brief Inserts a %uniform_int_distribution random number\n    *        distribution @p __x into the output stream @p os.\n@@ -1676,6 +1832,10 @@ namespace std\n \tb() const\n \t{ return _M_b; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n+\n       private:\n \t_RealType _M_a;\n \t_RealType _M_b;\n@@ -1763,6 +1923,26 @@ namespace std\n       param_type _M_param;\n     };\n \n+  /**\n+   * @brief Return true if two uniform real distributions have\n+   *        the same parameters.\n+   */\n+  template<typename _IntType>\n+    inline bool\n+    operator==(const std::uniform_real_distribution<_IntType>& __d1,\n+\t       const std::uniform_real_distribution<_IntType>& __d2)\n+    { return __d1.param() == __d2.param(); }\n+\n+  /**\n+   * @brief Return true if two uniform real distributions have\n+   *        different parameters.\n+   */\n+  template<typename _IntType>\n+    inline bool\n+    operator!=(const std::uniform_real_distribution<_IntType>& __d1,\n+\t       const std::uniform_real_distribution<_IntType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n   /**\n    * @brief Inserts a %uniform_real_distribution random number\n    *        distribution @p __x into the output stream @p __os.\n@@ -1839,6 +2019,11 @@ namespace std\n \tstddev() const\n \t{ return _M_stddev; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return (__p1._M_mean == __p2._M_mean\n+\t\t  && __p1._M_stddev == __p2._M_stddev); }\n+\n       private:\n \t_RealType _M_mean;\n \t_RealType _M_stddev;\n@@ -1920,6 +2105,16 @@ namespace std\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      /**\n+       * @brief Return true if two normal distributions have\n+       *        the same parameters and the sequences that would\n+       *        be generated are equal.\n+       */\n+      template<typename _RealType1>\n+\tfriend bool\n+        operator==(const std::normal_distribution<_RealType1>& __d1,\n+\t\t   const std::normal_distribution<_RealType1>& __d2);\n+\n       /**\n        * @brief Inserts a %normal_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -1956,6 +2151,15 @@ namespace std\n       bool        _M_saved_available;\n     };\n \n+  /**\n+   * @brief Return true if two normal distributions are different.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const std::normal_distribution<_RealType>& __d1,\n+\t       const std::normal_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n \n   /**\n    * @brief A lognormal_distribution random number distribution.\n@@ -1994,6 +2198,10 @@ namespace std\n \ts() const\n \t{ return _M_s; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_m == __p2._M_m && __p1._M_s == __p2._M_s; }\n+\n       private:\n \t_RealType _M_m;\n \t_RealType _M_s;\n@@ -2068,6 +2276,18 @@ namespace std\n \t\t   const param_type& __p)\n         { return std::exp(__p.s() * _M_nd(__urng) + __p.m()); }\n \n+      /**\n+       * @brief Return true if two lognormal distributions have\n+       *        the same parameters and the sequences that would\n+       *        be generated are equal.\n+       */\n+      template<typename _RealType1>\n+        friend bool\n+        operator==(const std::lognormal_distribution<_RealType1>& __d1,\n+\t\t   const std::lognormal_distribution<_RealType1>& __d2)\n+        { return (__d1.param() == __d2.param()\n+\t\t  && __d1._M_nd == __d2._M_nd); }\n+\n       /**\n        * @brief Inserts a %lognormal_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -2104,7 +2324,16 @@ namespace std\n       std::normal_distribution<result_type> _M_nd;\n     };\n \n-  \n+  /**\n+   * @brief Return true if two lognormal distributions are different.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const std::lognormal_distribution<_RealType>& __d1,\n+\t       const std::lognormal_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n+\n   /**\n    * @brief A gamma continuous distribution for random numbers.\n    *\n@@ -2146,6 +2375,11 @@ namespace std\n \tbeta() const\n \t{ return _M_beta; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return (__p1._M_alpha == __p2._M_alpha\n+\t\t  && __p1._M_beta == __p2._M_beta); }\n+\n       private:\n \tvoid\n \t_M_initialize();\n@@ -2232,6 +2466,18 @@ namespace std\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      /**\n+       * @brief Return true if two gamma distributions have the same\n+       *        parameters and the sequences that would be generated\n+       *        are equal.\n+       */\n+      template<typename _RealType1>\n+        friend bool\n+        operator==(const std::gamma_distribution<_RealType1>& __d1,\n+\t\t   const std::gamma_distribution<_RealType1>& __d2)\n+        { return (__d1.param() == __d2.param()\n+\t\t  && __d1._M_nd == __d2._M_nd); }\n+\n       /**\n        * @brief Inserts a %gamma_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -2267,6 +2513,15 @@ namespace std\n       std::normal_distribution<result_type> _M_nd;\n     };\n \n+  /**\n+   * @brief Return true if two gamma distributions are different.\n+   */\n+   template<typename _RealType>\n+    inline bool\n+     operator!=(const std::gamma_distribution<_RealType>& __d1,\n+\t\tconst std::gamma_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n \n   /**\n    * @brief A chi_squared_distribution random number distribution.\n@@ -2297,6 +2552,10 @@ namespace std\n \tn() const\n \t{ return _M_n; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_n == __p2._M_n; }\n+\n       private:\n \t_RealType _M_n;\n       };\n@@ -2369,6 +2628,17 @@ namespace std\n \t  return 2 * _M_gd(__urng, param_type(__p.n() / 2));\n \t}\n \n+      /**\n+       * @brief Return true if two Chi-squared distributions have\n+       *        the same parameters and the sequences that would be\n+       *        generated are equal.\n+       */\n+      template<typename _RealType1>\n+        friend bool\n+        operator==(const std::chi_squared_distribution<_RealType1>& __d1,\n+\t\t   const std::chi_squared_distribution<_RealType1>& __d2)\n+        { return __d1.param() == __d2.param() && __d1._M_gd == __d2._M_gd; }\n+\n       /**\n        * @brief Inserts a %chi_squared_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -2405,6 +2675,15 @@ namespace std\n       std::gamma_distribution<result_type> _M_gd;\n     };\n \n+  /**\n+   * @brief Return true if two Chi-squared distributions are different.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const std::chi_squared_distribution<_RealType>& __d1,\n+\t       const std::chi_squared_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n \n   /**\n    * @brief A cauchy_distribution random number distribution.\n@@ -2440,6 +2719,10 @@ namespace std\n \tb() const\n \t{ return _M_b; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n+\n       private:\n \t_RealType _M_a;\n \t_RealType _M_b;\n@@ -2517,6 +2800,26 @@ namespace std\n       param_type _M_param;\n     };\n \n+  /**\n+   * @brief Return true if two Cauchy distributions have\n+   *        the same parameters.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator==(const std::cauchy_distribution<_RealType>& __d1,\n+\t       const std::cauchy_distribution<_RealType>& __d2)\n+    { return __d1.param() == __d2.param(); }\n+\n+  /**\n+   * @brief Return true if two Cauchy distributions have\n+   *        different parameters.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const std::cauchy_distribution<_RealType>& __d1,\n+\t       const std::cauchy_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n   /**\n    * @brief Inserts a %cauchy_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -2586,6 +2889,10 @@ namespace std\n \tn() const\n \t{ return _M_n; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_m == __p2._M_m && __p1._M_n == __p2._M_n; }\n+\n       private:\n \t_RealType _M_m;\n \t_RealType _M_n;\n@@ -2668,6 +2975,19 @@ namespace std\n \t\t  / (_M_gd_y(__urng, param_type(__p.n() / 2)) * m()));\n \t}\n \n+      /**\n+       * @brief Return true if two Fisher f distributions have\n+       *        the same parameters and the sequences that would\n+       *        be generated are equal.\n+       */\n+      template<typename _RealType1>\n+        friend bool\n+        operator==(const std::fisher_f_distribution<_RealType1>& __d1,\n+\t\t   const std::fisher_f_distribution<_RealType1>& __d2)\n+        { return (__d1.param() == __d2.param()\n+\t\t  && __d1._M_gd_x == __d2._M_gd_x\n+\t\t  && __d1._M_gd_y == __d2._M_gd_y); }\n+\n       /**\n        * @brief Inserts a %fisher_f_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -2704,6 +3024,14 @@ namespace std\n       std::gamma_distribution<result_type> _M_gd_x, _M_gd_y;\n     };\n \n+  /**\n+   * @brief Return true if two Fisher f distributions are diferent.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const std::fisher_f_distribution<_RealType>& __d1,\n+\t       const std::fisher_f_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n \n   /**\n    * @brief A student_t_distribution random number distribution.\n@@ -2737,6 +3065,10 @@ namespace std\n \tn() const\n \t{ return _M_n; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_n == __p2._M_n; }\n+\n       private:\n \t_RealType _M_n;\n       };\n@@ -2814,6 +3146,18 @@ namespace std\n \t  return _M_nd(__urng) * std::sqrt(__p.n() / __g);\n         }\n \n+      /**\n+       * @brief Return true if two Student t distributions have\n+       *        the same parameters and the sequences that would\n+       *        be generated are equal.\n+       */\n+      template<typename _RealType1>\n+        friend bool\n+        operator==(const std::student_t_distribution<_RealType1>& __d1,\n+\t\t   const std::student_t_distribution<_RealType1>& __d2)\n+        { return (__d1.param() == __d2.param()\n+\t\t  && __d1._M_nd == __d2._M_nd && __d1._M_gd == __d2._M_gd); }\n+\n       /**\n        * @brief Inserts a %student_t_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -2851,6 +3195,16 @@ namespace std\n       std::gamma_distribution<result_type> _M_gd;\n     };\n \n+  /**\n+   * @brief Return true if two Student t distributions are different.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const std::student_t_distribution<_RealType>& __d1,\n+\t       const std::student_t_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n+\n   /* @} */ // group random_distributions_normal\n \n   /**\n@@ -2886,6 +3240,10 @@ namespace std\n       p() const\n       { return _M_p; }\n \n+      friend bool\n+      operator==(const param_type& __p1, const param_type& __p2)\n+      { return __p1._M_p == __p2._M_p; }\n+\n     private:\n       double _M_p;\n     };\n@@ -2976,6 +3334,24 @@ namespace std\n     param_type _M_param;\n   };\n \n+  /**\n+   * @brief Return true if two Bernoulli distributions have\n+   *        the same parameters.\n+   */\n+  inline bool\n+  operator==(const std::bernoulli_distribution& __d1,\n+\t     const std::bernoulli_distribution& __d2)\n+  { return __d1.param() == __d2.param(); }\n+\n+  /**\n+   * @brief Return true if two Bernoulli distributions have\n+   *        different parameters.\n+   */\n+  inline bool\n+  operator!=(const std::bernoulli_distribution& __d1,\n+\t     const std::bernoulli_distribution& __d2)\n+  { return !(__d1 == __d2); }\n+\n   /**\n    * @brief Inserts a %bernoulli_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -3052,6 +3428,10 @@ namespace std\n \tp() const\n \t{ return _M_p; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_t == __p2._M_t && __p1._M_p == __p2._M_p; }\n+\n       private:\n \tvoid\n \t_M_initialize();\n@@ -3129,6 +3509,21 @@ namespace std\n       max() const\n       { return _M_param.t(); }\n \n+      /**\n+       * @brief Return true if two binomial distributions have\n+       *        the same parameters and the sequences that would\n+       *        be generated are equal.\n+       */\n+      template<typename _IntType1>\n+\tfriend bool\n+        operator==(const std::binomial_distribution<_IntType1>& __d1,\n+\t\t   const std::binomial_distribution<_IntType1>& __d2)\n+#ifdef _GLIBCXX_USE_C99_MATH_TR1\n+\t{ return __d1.param() == __d2.param() && __d1._M_nd == __d2._M_nd; }\n+#else\n+        { return __d1.param() == __d2.param(); }\n+#endif\n+\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n@@ -3182,6 +3577,15 @@ namespace std\n       std::normal_distribution<double> _M_nd;\n     };\n \n+  /**\n+   * @brief Return true if two binomial distributions are different.\n+   */\n+  template<typename _IntType>\n+    inline bool\n+    operator!=(const std::binomial_distribution<_IntType>& __d1,\n+\t       const std::binomial_distribution<_IntType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n \n   /**\n    * @brief A discrete geometric random number distribution.\n@@ -3218,6 +3622,10 @@ namespace std\n \tp() const\n \t{ return _M_p; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_p == __p2._M_p; }\n+\n       private:\n \tvoid\n \t_M_initialize()\n@@ -3297,6 +3705,26 @@ namespace std\n       param_type _M_param;\n     };\n \n+  /**\n+   * @brief Return true if two geometric distributions have\n+   *        the same parameters.\n+   */\n+  template<typename _IntType>\n+    inline bool\n+    operator==(const std::geometric_distribution<_IntType>& __d1,\n+\t       const std::geometric_distribution<_IntType>& __d2)\n+    { return __d1.param() == __d2.param(); }\n+\n+  /**\n+   * @brief Return true if two geometric distributions have\n+   *        different parameters.\n+   */\n+  template<typename _IntType>\n+    inline bool\n+    operator!=(const std::geometric_distribution<_IntType>& __d1,\n+\t       const std::geometric_distribution<_IntType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n   /**\n    * @brief Inserts a %geometric_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -3363,6 +3791,10 @@ namespace std\n \tp() const\n \t{ return _M_p; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_k == __p2._M_k && __p1._M_p == __p2._M_p; }\n+\n       private:\n \t_IntType _M_k;\n \tdouble _M_p;\n@@ -3437,6 +3869,17 @@ namespace std\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      /**\n+       * @brief Return true if two negative binomial distributions have\n+       *        the same parameters and the sequences that would be\n+       *        generated are equal.\n+       */\n+      template<typename _IntType1>\n+        friend bool\n+        operator==(const std::negative_binomial_distribution<_IntType1>& __d1,\n+\t\t   const std::negative_binomial_distribution<_IntType1>& __d2)\n+        { return __d1.param() == __d2.param() && __d1._M_gd == __d2._M_gd; }\n+\n       /**\n        * @brief Inserts a %negative_binomial_distribution random\n        *        number distribution @p __x into the output stream @p __os.\n@@ -3474,6 +3917,16 @@ namespace std\n       std::gamma_distribution<double> _M_gd;\n     };\n \n+  /**\n+   * @brief Return true if two negative binomial distributions are different.\n+   */\n+  template<typename _IntType>\n+    inline bool\n+    operator!=(const std::negative_binomial_distribution<_IntType>& __d1,\n+\t       const std::negative_binomial_distribution<_IntType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n+\n   /* @} */ // group random_distributions_bernoulli\n \n   /**\n@@ -3516,6 +3969,10 @@ namespace std\n \tmean() const\n \t{ return _M_mean; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_mean == __p2._M_mean; }\n+\n       private:\n \t// Hosts either log(mean) or the threshold of the simple method.\n \tvoid\n@@ -3593,6 +4050,21 @@ namespace std\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+       /**\n+\t* @brief Return true if two Poisson distributions have the same\n+\t*        parameters and the sequences that would be generated\n+\t*        are equal.\n+\t*/\n+      template<typename _IntType1>\n+        friend bool\n+        operator==(const std::poisson_distribution<_IntType1>& __d1,\n+\t\t   const std::poisson_distribution<_IntType1>& __d2)\n+#ifdef _GLIBCXX_USE_C99_MATH_TR1\n+        { return __d1.param() == __d2.param() && __d1._M_nd == __d2._M_nd; }\n+#else\n+        { return __d1.param() == __d2.param(); }\n+#endif\n+\n       /**\n        * @brief Inserts a %poisson_distribution random number distribution\n        * @p __x into the output stream @p __os.\n@@ -3630,6 +4102,16 @@ namespace std\n       std::normal_distribution<double> _M_nd;\n     };\n \n+  /**\n+   * @brief Return true if two Poisson distributions are different.\n+   */\n+  template<typename _IntType>\n+    inline bool\n+    operator!=(const std::poisson_distribution<_IntType>& __d1,\n+\t       const std::poisson_distribution<_IntType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n+\n   /**\n    * @brief An exponential continuous distribution for random numbers.\n    *\n@@ -3670,6 +4152,10 @@ namespace std\n \tlambda() const\n \t{ return _M_lambda; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_lambda == __p2._M_lambda; }\n+\n       private:\n \t_RealType _M_lambda;\n       };\n@@ -3752,6 +4238,26 @@ namespace std\n       param_type _M_param;\n     };\n \n+  /**\n+   * @brief Return true if two exponential distributions have the same\n+   *        parameters.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator==(const std::exponential_distribution<_RealType>& __d1,\n+\t       const std::exponential_distribution<_RealType>& __d2)\n+    { return __d1.param() == __d2.param(); }\n+\n+  /**\n+   * @brief Return true if two exponential distributions have different\n+   *        parameters.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const std::exponential_distribution<_RealType>& __d1,\n+\t       const std::exponential_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n   /**\n    * @brief Inserts a %exponential_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -3820,6 +4326,10 @@ namespace std\n \tb() const\n \t{ return _M_b; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n+\n       private:\n \t_RealType _M_a;\n \t_RealType _M_b;\n@@ -3900,6 +4410,26 @@ namespace std\n       param_type _M_param;\n     };\n \n+   /**\n+    * @brief Return true if two Weibull distributions have the same\n+    *        parameters.\n+    */\n+  template<typename _RealType>\n+    inline bool\n+    operator==(const std::weibull_distribution<_RealType>& __d1,\n+\t       const std::weibull_distribution<_RealType>& __d2)\n+    { return __d1.param() == __d2.param(); }\n+\n+   /**\n+    * @brief Return true if two Weibull distributions have different\n+    *        parameters.\n+    */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const std::weibull_distribution<_RealType>& __d1,\n+\t       const std::weibull_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n   /**\n    * @brief Inserts a %weibull_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -3968,6 +4498,10 @@ namespace std\n \tb() const\n \t{ return _M_b; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n+\n       private:\n \t_RealType _M_a;\n \t_RealType _M_b;\n@@ -4048,6 +4582,26 @@ namespace std\n       param_type _M_param;\n     };\n \n+  /**\n+    * @brief Return true if two extreme value distributions have the same\n+    *        parameters.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator==(const std::extreme_value_distribution<_RealType>& __d1,\n+\t       const std::extreme_value_distribution<_RealType>& __d2)\n+    { return __d1.param() == __d2.param(); }\n+\n+  /**\n+    * @brief Return true if two extreme value distributions have different\n+    *        parameters.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const std::extreme_value_distribution<_RealType>& __d1,\n+\t       const std::extreme_value_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n   /**\n    * @brief Inserts a %extreme_value_distribution random number distribution\n    * @p __x into the output stream @p __os.\n@@ -4122,6 +4676,10 @@ namespace std\n \tprobabilities() const\n \t{ return _M_prob; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_prob == __p2._M_prob; }\n+\n       private:\n \tvoid\n \t_M_initialize();\n@@ -4243,6 +4801,26 @@ namespace std\n       param_type _M_param;\n     };\n \n+  /**\n+    * @brief Return true if two discrete distributions have the same\n+    *        parameters.\n+    */\n+  template<typename _IntType>\n+    inline bool\n+    operator==(const std::discrete_distribution<_IntType>& __d1,\n+\t       const std::discrete_distribution<_IntType>& __d2)\n+    { return __d1.param() == __d2.param(); }\n+\n+  /**\n+    * @brief Return true if two discrete distributions have different\n+    *        parameters.\n+    */\n+  template<typename _IntType>\n+    inline bool\n+    operator!=(const std::discrete_distribution<_IntType>& __d1,\n+\t       const std::discrete_distribution<_IntType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n \n   /**\n    * @brief A piecewise_constant_distribution random number distribution.\n@@ -4289,6 +4867,10 @@ namespace std\n \tdensities() const\n \t{ return _M_den; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_int == __p2._M_int && __p1._M_den == __p2._M_den; }\n+\n       private:\n \tvoid\n \t_M_initialize();\n@@ -4424,6 +5006,26 @@ namespace std\n       param_type _M_param;\n     };\n \n+  /**\n+    * @brief Return true if two piecewise constant distributions have the\n+    *        same parameters.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator==(const std::piecewise_constant_distribution<_RealType>& __d1,\n+\t       const std::piecewise_constant_distribution<_RealType>& __d2)\n+    { return __d1.param() == __d2.param(); }\n+\n+  /**\n+    * @brief Return true if two piecewise constant distributions have \n+    *        different parameters.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const std::piecewise_constant_distribution<_RealType>& __d1,\n+\t       const std::piecewise_constant_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n \n   /**\n    * @brief A piecewise_linear_distribution random number distribution.\n@@ -4470,6 +5072,11 @@ namespace std\n \tdensities() const\n \t{ return _M_den; }\n \n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return (__p1._M_int == __p2._M_int\n+\t\t  && __p1._M_den == __p2._M_den); }\n+\n       private:\n \tvoid\n \t_M_initialize();\n@@ -4607,6 +5214,26 @@ namespace std\n       param_type _M_param;\n     };\n \n+  /**\n+    * @brief Return true if two piecewise linear distributions have the\n+    *        same parameters.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator==(const std::piecewise_linear_distribution<_RealType>& __d1,\n+\t       const std::piecewise_linear_distribution<_RealType>& __d2)\n+    { return __d1.param() == __d2.param(); }\n+\n+  /**\n+    * @brief Return true if two piecewise linear distributions have\n+    *        different parameters.\n+   */\n+  template<typename _RealType>\n+    inline bool\n+    operator!=(const std::piecewise_linear_distribution<_RealType>& __d1,\n+\t       const std::piecewise_linear_distribution<_RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n \n   /* @} */ // group random_distributions_poisson\n "}, {"sha": "fb2879ccf355722ced8338e2e1da80ada8653d74", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -1627,6 +1627,26 @@ namespace std\n \treturn __ret;\n       }\n \n+  template<typename _RealType>\n+    bool\n+    operator==(const std::normal_distribution<_RealType>& __d1,\n+\t       const std::normal_distribution<_RealType>& __d2)\n+    {\n+      if (__d1._M_param == __d2._M_param\n+\t  && __d1._M_saved_available == __d2._M_saved_available)\n+\t{\n+\t  if (__d1._M_saved_available\n+\t      && __d1._M_saved == __d2._M_saved)\n+\t    return true;\n+\t  else if(!__d1._M_saved_available)\n+\t    return true;\n+\t  else\n+\t    return false;\n+\t}\n+      else\n+\treturn false;\n+    }\n+\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,"}, {"sha": "b3e8b9702f674e62419b2ee64865e5b410310f10", "filename": "libstdc++-v3/testsuite/26_numerics/random/bernoulli_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.2.1 Class template bernoulli_distribution [rand.dist.bern.bernoulli]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  std::bernoulli_distribution u(0.75), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6ed72faa1a935f486c2eccc4843f8ee117324d5c", "filename": "libstdc++-v3/testsuite/26_numerics/random/bernoulli_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.2.1 Class template bernoulli_distribution [rand.dist.bern.bernoulli]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  std::bernoulli_distribution u(0.75), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9002614d418df5201a2ea8429063f5c4dd31681c", "filename": "libstdc++-v3/testsuite/26_numerics/random/binomial_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.2.2 Class template binomial_distribution [rand.dist.bern.bin]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::binomial_distribution<int> u(3, 0.75), v, w;\n+  \n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fb05a0daa1dd7e98351c0bc742af40aa558b7304", "filename": "libstdc++-v3/testsuite/26_numerics/random/binomial_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.2.2 Class template binomial_distribution [rand.dist.bern.bin]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::binomial_distribution<int> u(3, 0.75), v, w;\n+  \n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "068c8ca049d84881eea77621eedc3542c4394230", "filename": "libstdc++-v3/testsuite/26_numerics/random/cauchy_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.4 class template cauchy_distribution [rand.dist.norm.cauchy]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::cauchy_distribution<double> u(5.0, 2.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "de1e6f63c1db1d81f084cae94c6a63f2499678cc", "filename": "libstdc++-v3/testsuite/26_numerics/random/cauchy_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.4 class template cauchy_distribution [rand.dist.norm.cauchy]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::cauchy_distribution<double> u(5.0, 2.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e84e1046f596582b5a4fb096f5a25dd56cd4d4bb", "filename": "libstdc++-v3/testsuite/26_numerics/random/chi_squared_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.3 Class template chi_squared_distribution [rand.dist.norm.chisq]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::chi_squared_distribution<double> u(1.5), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "eb95739ef931d6079885beab7649fac0969f957b", "filename": "libstdc++-v3/testsuite/26_numerics/random/chi_squared_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.3 Class template chi_squared_distribution [rand.dist.norm.chisq]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::chi_squared_distribution<double> u(1.5), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fff369b1b32aadefca3ccaae49f36e23c1937b6c", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/operators/inequal.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.4.1 class template discard_block_engine [rand.adapt.disc]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::discard_block_engine\n+    <\n+    std::subtract_with_carry_engine<unsigned long, 24, 10, 24>,\n+    389, 24\n+    > u, v;\n+\n+  VERIFY( !(u != v) );\n+\n+  u.discard(100);\n+  v.discard(100);\n+\n+  VERIFY( !(u != v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6ef26c9c643d9d68aa3db563776cda66042e6177", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/operators/equal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.5.1 Class template discrete_distribution [rand.dist.samp.discrete]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<double> wt = { 0.5, 1.0, 2.5, 1.5, 0.5 };\n+  std::discrete_distribution<int> u(wt.begin(), wt.end()), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2215a7008f97a6969cb4db5d591fd9ee5a3cefc1", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/operators/inequal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.5.1 Class template discrete_distribution [rand.dist.samp.discrete]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<double> wt = { 0.5, 1.0, 2.5, 1.5, 0.5 };\n+  std::discrete_distribution<int> u(wt.begin(), wt.end()), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e4a30bba69cf2543cd99874515a762b962aa9d8d", "filename": "libstdc++-v3/testsuite/26_numerics/random/exponential_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.3.2 Class template exponential_distribution [rand.dist.pois.exp]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::exponential_distribution<double> u(0.5), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a3fbc2fbcaef8582b225acd0265fdc093184a130", "filename": "libstdc++-v3/testsuite/26_numerics/random/exponential_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.3.2 Class template exponential_distribution [rand.dist.pois.exp]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::exponential_distribution<double> u(0.5), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "85e78a60c45a0328d8a3517298429f894663f51c", "filename": "libstdc++-v3/testsuite/26_numerics/random/extreme_value_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.3.5 Class template extreme_value_distribution [rand.dist.pois.extreme]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::extreme_value_distribution<double> u(5.0, 2.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "dbc65f837f78d341e74a1f8ce3e40ca8de9d0696", "filename": "libstdc++-v3/testsuite/26_numerics/random/extreme_value_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.3.5 Class template extreme_value_distribution [rand.dist.pois.extreme]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::extreme_value_distribution<double> u(5.0, 2.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bedb79e71d3d9b477046668143d8ce3bca7c4b24", "filename": "libstdc++-v3/testsuite/26_numerics/random/fisher_f_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template fisher_f_distribution [rand.dist.norm.f]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::fisher_f_distribution<double> u(2.0, 3.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ae19853a0fa3157b2f54eed3dcf7dbb9fd11f504", "filename": "libstdc++-v3/testsuite/26_numerics/random/fisher_f_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.5 Class template fisher_f_distribution [rand.dist.norm.f]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::fisher_f_distribution<double> u(2.0, 3.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "131132f0416989fdea375cffe9d10b484b136c4f", "filename": "libstdc++-v3/testsuite/26_numerics/random/gamma_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.3.3 Class template gamma_distribution [rand.dist.pois.gamma]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::gamma_distribution<double> u(1.5, 3.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1fe8057dadabd46460c95e629e8a7fcc0c906413", "filename": "libstdc++-v3/testsuite/26_numerics/random/gamma_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.3.3 Class template gamma_distribution [rand.dist.pois.gamma]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::gamma_distribution<double> u(1.5, 3.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bd20f9262d8c98716acf93cfc17c418a9ea650f4", "filename": "libstdc++-v3/testsuite/26_numerics/random/geometric_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.2.3 Class template geometric_distribution [rand.dist.bern.geom]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::geometric_distribution<int> u(0.75), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "19031ccf33fdf4c54e08e5986bb016f4de033bde", "filename": "libstdc++-v3/testsuite/26_numerics/random/geometric_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.2.3 Class template geometric_distribution [rand.dist.bern.geom]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::geometric_distribution<int> u(0.75), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a1e05a715fcc829042efe07f6f65ca32d8cbfa60", "filename": "libstdc++-v3/testsuite/26_numerics/random/independent_bits_engine/operators/inequal.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.4.2 class template independent_bits_engine [rand.adapt.bits]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::independent_bits_engine\n+    <std::subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>,\n+     48, uint_fast64_t> u, v;\n+\n+  VERIFY( !(u != v) );\n+\n+  u.discard(100);\n+  v.discard(100);\n+\n+  VERIFY( !(u != v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "768837a30865c14dac82931a0d199d2e3b02d8c4", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/operators/inequal.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.3.1 class template linear_congruential_engine [rand.eng.lcong]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::minstd_rand0 a;\n+  std::minstd_rand0 b;\n+  std::minstd_rand0 c(120);\n+\n+  VERIFY( a != c );\n+  VERIFY( !(a != b) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "684c0ca93bf0decc9a5b86daa53c1984d84d3f33", "filename": "libstdc++-v3/testsuite/26_numerics/random/lognormal_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.2 Class template lognormal_distribution [rand.dist.norm.lognormal]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::lognormal_distribution<double> u(5.0, 2.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ce427e573ad25e4022509066776c4de4964aa70f", "filename": "libstdc++-v3/testsuite/26_numerics/random/lognormal_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.2 Class template lognormal_distribution [rand.dist.norm.lognormal]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::lognormal_distribution<double> u(5.0, 2.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "94ccb76f7c1014a07249edbc9602fc5d9ee50f2c", "filename": "libstdc++-v3/testsuite/26_numerics/random/mersenne_twister_engine/operators/inequal.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.3.2 Class template mersenne_twister_engine [rand.eng.mers]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::mersenne_twister_engine<\n+    unsigned long, 32, 624, 397, 31,\n+    0x9908b0dful, 11,\n+    0xfffffffful, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18, 1812433253ul> u, v;\n+\n+  VERIFY( !(u != v) );\n+\n+  u.discard(100);\n+  v.discard(100);\n+\n+  VERIFY( !(u != v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "08ec8938f9e6ee5e93dc7ce8c31355a79f243113", "filename": "libstdc++-v3/testsuite/26_numerics/random/negative_binomial_distribution/operators/equal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.2.4 Class template negative_binomial_distribution\n+// [rand.dist.bern.negbin]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::negative_binomial_distribution<int> u(3, 0.75), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "86d23e7709567875293676452c7ece0753b19a52", "filename": "libstdc++-v3/testsuite/26_numerics/random/negative_binomial_distribution/operators/inequal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.2.4 Class template negative_binomial_distribution\n+// [rand.dist.bern.negbin]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::negative_binomial_distribution<int> u(3, 0.75), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6dac4b38631f2a7a8948fa93ac9b0263963e7c69", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.1 Class template normal_distribution [rand.dist.norm.normal]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::normal_distribution<double> u(5.0, 2.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e3a31f68e18b115bab39ba11829b4cdd21352c62", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.1 Class template normal_distribution [rand.dist.norm.normal]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::normal_distribution<double> u(5.0, 2.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fc74cf11a6989360d8d0331899d84f75b6e6e33e", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/operators/equal.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.5.2 Class template piecewise_constant_distribution\n+// [rand.dist.samp.pconst]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<double> x = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0 };\n+  std::vector<double> wt = { 0.5, 1.0, 2.5, 1.5, 0.5 };\n+  std::piecewise_constant_distribution<double>\n+    u(x.begin(), x.end(), wt.begin()), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "dec264d1c32e222484ab14b087be6c30c970ebca", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/operators/inequal.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.5.2 Class template piecewise_constant_distribution\n+// [rand.dist.samp.pconst]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<double> x = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0 };\n+  std::vector<double> wt = { 0.5, 1.0, 2.5, 1.5, 0.5 };\n+  std::piecewise_constant_distribution<double>\n+    u(x.begin(), x.end(), wt.begin()), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c3510b9cc13524a2bfb2a7914538ec0482d23741", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_linear_distribution/operators/equal.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.5.3 Class template piecewise_linear_distribution\n+// [rand.dist.samp.plinear]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<double> x = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0 };\n+  std::vector<double> wt = { 0.0, 1.0, 2.5, 1.5, 0.5, 0.0 };\n+  std::piecewise_linear_distribution<double>\n+    u(x.begin(), x.end(), wt.begin()), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bbb96dc0ed3e90c03529a59958a6ccd89418cdf7", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_linear_distribution/operators/inequal.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.5.3 Class template piecewise_linear_distribution\n+// [rand.dist.samp.plinear]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<double> x = { 0.0, 1.0, 2.0, 3.0, 4.0, 5.0 };\n+  std::vector<double> wt = { 0.0, 1.0, 2.5, 1.5, 0.5, 0.0 };\n+  std::piecewise_linear_distribution<double>\n+    u(x.begin(), x.end(), wt.begin()), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3ded153fe2767c5e0ce4197d23864217c9a6346d", "filename": "libstdc++-v3/testsuite/26_numerics/random/poisson_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.3.1 Class template poisson_distribution [rand.dist.pois.poisson]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::poisson_distribution<int> u(5.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a996dc154339a314ac27a6abf5f725e9940fe6ef", "filename": "libstdc++-v3/testsuite/26_numerics/random/poisson_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.3.1 Class template poisson_distribution [rand.dist.pois.poisson]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::poisson_distribution<int> u(5.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "43fc99fbbad55a1f6b5222311b05fc495a15ea0a", "filename": "libstdc++-v3/testsuite/26_numerics/random/shuffle_order_engine/operators/inequal.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.4.1 class template discard_block_engine [rand.adapt.disc]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::shuffle_order_engine\n+    <\n+      std::linear_congruential_engine<uint_fast32_t,16807UL, 0UL, 2147483647UL>,\n+      256\n+    > u, v;\n+\n+  VERIFY( !(u != v) );\n+\n+  u.discard(100);\n+  v.discard(100);\n+\n+  VERIFY( !(u != v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5117729b1c30a598fae29a5dbb426524fecd7373", "filename": "libstdc++-v3/testsuite/26_numerics/random/student_t_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.6 Class template student_t_distribution [rand.dist.norm.t]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::student_t_distribution<double> u(1.5), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "edead19d6b7f1f5039d0dc04ea5b5c0f1d86f35f", "filename": "libstdc++-v3/testsuite/26_numerics/random/student_t_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.6 Class template student_t_distribution [rand.dist.norm.t]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::student_t_distribution<double> u(1.5), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "aa7ec24208ae99e1763afd735eae518935c21888", "filename": "libstdc++-v3/testsuite/26_numerics/random/subtract_with_carry_engine/operators/inequal.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.3.3 Class template subtract_with_carry_engine [rand.eng.sub]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::subtract_with_carry_engine<unsigned long, 24, 10, 24> u;\n+  std::subtract_with_carry_engine<unsigned long, 24, 10, 24> v;\n+\n+  VERIFY( !(u != v) );\n+\n+  u.discard(100);\n+  v.discard(100);\n+\n+  VERIFY( !(u != v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "288cc0d66652607eafffe934351b0ef85bdcbee4", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.1.1 Class template uniform_int_distribution [rand.dist_uni]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::uniform_int_distribution<int> u(1, 20), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "48875c36aa6276771dd1f447661f9d9b3ddd74ec", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.1.1 Class template uniform_int_distribution [rand.dist_uni]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::uniform_int_distribution<int> u(1, 20), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "df27f6cf48cc2f3911cf99d949c97d50270c4e66", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_real_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.1.2 Class template uniform_real_distribution [rand.dist.uni.real]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::uniform_real_distribution<double> u(-5.0, 5.0), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a93a4fde511729778e34aa796b08f1686aaae2cc", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_real_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.1.2 Class template uniform_real_distribution [rand.dist.uni.real]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::uniform_real_distribution<double> u(-5.0, 5.0), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "be4201a4f120a6dbc928c125610a183ac95c1643", "filename": "libstdc++-v3/testsuite/26_numerics/random/weibull_distribution/operators/equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Fequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.3.4 Class template weibull_distribution [rand.dist.pois.weibull]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::weibull_distribution<double> u(2.0, 3.5), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "44dc1d3d13ccfa01d0e72577211e3e09dc66f27b", "filename": "libstdc++-v3/testsuite/26_numerics/random/weibull_distribution/operators/inequal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc05e1ba763fecefa53dd9ad6a62dbbe2299e895/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Finequal.cc?ref=fc05e1ba763fecefa53dd9ad6a62dbbe2299e895", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.3.4 Class template weibull_distribution [rand.dist.pois.weibull]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::weibull_distribution<double> u(2.0, 3.5), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}