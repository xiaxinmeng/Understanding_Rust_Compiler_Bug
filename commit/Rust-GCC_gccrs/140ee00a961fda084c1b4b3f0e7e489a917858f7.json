{"sha": "140ee00a961fda084c1b4b3f0e7e489a917858f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQwZWUwMGE5NjFmZGEwODRjMWI0YjNmMGU3ZTQ4OWE5MTc4NThmNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-20T11:12:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-20T11:12:48Z"}, "message": "tree-vect-slp.c (vect_analyze_slp_instance): Dump constructors we are actually analyzing.\n\n2019-11-20  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_analyze_slp_instance): Dump\n\tconstructors we are actually analyzing.\n\t(vect_slp_check_for_constructors): Do not vectorize uniform\n\tconstuctors, do not dump here.\n\n\t* gcc.dg/vect/bb-slp-42.c: Adjust.\n\t* gcc.dg/vect/bb-slp-40.c: Likewise.\n\nFrom-SVN: r278495", "tree": {"sha": "73cd2fd6139aabf3e03d6fd904fdfbccabfd77cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73cd2fd6139aabf3e03d6fd904fdfbccabfd77cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/140ee00a961fda084c1b4b3f0e7e489a917858f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/140ee00a961fda084c1b4b3f0e7e489a917858f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/140ee00a961fda084c1b4b3f0e7e489a917858f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/140ee00a961fda084c1b4b3f0e7e489a917858f7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2439d584d5def75d705f33218bb3b97fca4c11a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2439d584d5def75d705f33218bb3b97fca4c11a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2439d584d5def75d705f33218bb3b97fca4c11a1"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "eacaee3638c95be3c3a9a479de24f6f9da4f44fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140ee00a961fda084c1b4b3f0e7e489a917858f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140ee00a961fda084c1b4b3f0e7e489a917858f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=140ee00a961fda084c1b4b3f0e7e489a917858f7", "patch": "@@ -1,3 +1,10 @@\n+2019-11-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): Dump\n+\tconstructors we are actually analyzing.\n+\t(vect_slp_check_for_constructors): Do not vectorize uniform\n+\tconstuctors, do not dump here.\n+\n 2019-11-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92537"}, {"sha": "057b5d609acd2805cfa1bd6031fd1d19fae399d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140ee00a961fda084c1b4b3f0e7e489a917858f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140ee00a961fda084c1b4b3f0e7e489a917858f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=140ee00a961fda084c1b4b3f0e7e489a917858f7", "patch": "@@ -1,3 +1,8 @@\n+2019-11-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-42.c: Adjust.\n+\t* gcc.dg/vect/bb-slp-40.c: Likewise.\n+\n 2019-11-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92537"}, {"sha": "ce5a75c979caf75913ba5cb0e994040d6d30f948", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-40.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140ee00a961fda084c1b4b3f0e7e489a917858f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140ee00a961fda084c1b4b3f0e7e489a917858f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-40.c?ref=140ee00a961fda084c1b4b3f0e7e489a917858f7", "patch": "@@ -30,5 +30,5 @@ void foo(void)\n }\n \n /* See that we vectorize an SLP instance.  */\n-/* { dg-final { scan-tree-dump \"Found vectorizable constructor\" \"slp1\" } } */\n+/* { dg-final { scan-tree-dump \"Analyzing vectorizable constructor\" \"slp1\" } } */\n /* { dg-final { scan-tree-dump \"vectorizing stmts using SLP\" \"slp1\" } } */"}, {"sha": "1dfa301184aad4c8edf00af80fb861562c941049", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-42.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140ee00a961fda084c1b4b3f0e7e489a917858f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140ee00a961fda084c1b4b3f0e7e489a917858f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-42.c?ref=140ee00a961fda084c1b4b3f0e7e489a917858f7", "patch": "@@ -44,6 +44,5 @@ main ()\n \n }\n \n-/* See that we vectorize an SLP instance.  */\n-/* { dg-final { scan-tree-dump \"Found vectorizable constructor\" \"slp1\" { target { ! vect_fully_masked } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"slp1\" { target { ! vect_fully_masked } } } } */\n+/* See that we do not try to vectorize the uniform CTORs.  */\n+/* { dg-final { scan-tree-dump-not \"Analyzing vectorizable constructor\" \"slp1\" } } */"}, {"sha": "36ea0b1dffb70b905ef1e9f80cdc6d6344d4c53b", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140ee00a961fda084c1b4b3f0e7e489a917858f7/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140ee00a961fda084c1b4b3f0e7e489a917858f7/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=140ee00a961fda084c1b4b3f0e7e489a917858f7", "patch": "@@ -2183,6 +2183,10 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t  else\n \t    return false;\n \t}\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t \"Analyzing vectorizable constructor: %G\\n\",\n+\t\t\t stmt_info->stmt);\n     }\n   else\n     {\n@@ -3116,31 +3120,22 @@ vect_slp_check_for_constructors (bb_vec_info bb_vinfo)\n   gimple_stmt_iterator gsi;\n \n   for (gsi = bb_vinfo->region_begin;\n-      gsi_stmt (gsi) != gsi_stmt (bb_vinfo->region_end); gsi_next (&gsi))\n+       gsi_stmt (gsi) != gsi_stmt (bb_vinfo->region_end); gsi_next (&gsi))\n     {\n-      gimple *stmt = gsi_stmt (gsi);\n-\n-      if (is_gimple_assign (stmt)\n-\t  && gimple_assign_rhs_code (stmt) == CONSTRUCTOR\n-\t  && TREE_CODE (gimple_assign_lhs (stmt)) == SSA_NAME\n-\t  && TREE_CODE (TREE_TYPE (gimple_assign_lhs (stmt))) == VECTOR_TYPE)\n-\t{\n-\t  tree rhs = gimple_assign_rhs1 (stmt);\n-\n-\t  if (CONSTRUCTOR_NELTS (rhs) == 0)\n-\t    continue;\n-\n-\t  poly_uint64 subparts = TYPE_VECTOR_SUBPARTS (TREE_TYPE (rhs));\n+      gassign *stmt = dyn_cast <gassign *> (gsi_stmt (gsi));\n+      if (!stmt || gimple_assign_rhs_code (stmt) != CONSTRUCTOR)\n+\tcontinue;\n \n-\t  if (maybe_ne (subparts, CONSTRUCTOR_NELTS (rhs)))\n-\t    continue;\n+      tree rhs = gimple_assign_rhs1 (stmt);\n+      if (!VECTOR_TYPE_P (TREE_TYPE (rhs))\n+\t  || maybe_ne (TYPE_VECTOR_SUBPARTS (TREE_TYPE (rhs)),\n+\t\t       CONSTRUCTOR_NELTS (rhs))\n+\t  || VECTOR_TYPE_P (TREE_TYPE (CONSTRUCTOR_ELT (rhs, 0)->value))\n+\t  || uniform_vector_p (rhs))\n+\tcontinue;\n \n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t     \"Found vectorizable constructor: %G\\n\", stmt);\n-\t  stmt_vec_info stmt_info = bb_vinfo->lookup_stmt (stmt);\n-\t  BB_VINFO_GROUPED_STORES (bb_vinfo).safe_push (stmt_info);\n-\t}\n+      stmt_vec_info stmt_info = bb_vinfo->lookup_stmt (stmt);\n+      BB_VINFO_GROUPED_STORES (bb_vinfo).safe_push (stmt_info);\n     }\n }\n "}]}