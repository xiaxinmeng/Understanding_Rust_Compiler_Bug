{"sha": "94e2418780f1d13235f3e2e6e5c09dbe821c1ce3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRlMjQxODc4MGYxZDEzMjM1ZjNlMmU2ZTVjMDlkYmU4MjFjMWNlMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-19T15:06:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-20T01:47:28Z"}, "message": "c++: Avoid unnecessary empty class copy [94175].\n\nA simple empty class copy is still simple when wrapped in a TARGET_EXPR, so\nwe need to strip that as well.  This change also exposed some unnecessary\ncopies in return statements, which when returning by invisible reference led\nto <RETURN_EXPR <MEM_REF <RESULT_DECL>>>, which gimplify_return_expr didn't\nlike.  So we also need to strip the _REF when we eliminate the INIT_EXPR.\n\ngcc/cp/ChangeLog\n2020-03-19  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/94175\n\t* cp-gimplify.c (simple_empty_class_p): Look through\n\tSIMPLE_TARGET_EXPR_P.\n\t(cp_gimplify_expr) [MODIFY_EXPR]: Likewise.\n\t[RETURN_EXPR]: Avoid producing 'return *retval;'.\n\t* call.c (build_call_a): Strip TARGET_EXPR from empty class arg.\n\t* cp-tree.h (SIMPLE_TARGET_EXPR_P): Check that TARGET_EXPR_INITIAL\n\tis non-null.", "tree": {"sha": "ea07f1fcf672378cce0331e64ffdb78894a228e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea07f1fcf672378cce0331e64ffdb78894a228e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3373d3e38eaf807573cd04150a12ab1e43035f4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3373d3e38eaf807573cd04150a12ab1e43035f4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3373d3e38eaf807573cd04150a12ab1e43035f4d"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "929e709fadfad573269ddf2a4ceed8beee497fcd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=94e2418780f1d13235f3e2e6e5c09dbe821c1ce3", "patch": "@@ -1,3 +1,14 @@\n+2020-03-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94175\n+\t* cp-gimplify.c (simple_empty_class_p): Look through\n+\tSIMPLE_TARGET_EXPR_P.\n+\t(cp_gimplify_expr) [MODIFY_EXPR]: Likewise.\n+\t[RETURN_EXPR]: Avoid producing 'return *retval;'.\n+\t* call.c (build_call_a): Strip TARGET_EXPR from empty class arg.\n+\t* cp-tree.h (SIMPLE_TARGET_EXPR_P): Check that TARGET_EXPR_INITIAL\n+\tis non-null.\n+\n 2020-03-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/93931"}, {"sha": "65a3ea35deef6f3dae357d3f81802535eb5b4a2f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=94e2418780f1d13235f3e2e6e5c09dbe821c1ce3", "patch": "@@ -392,6 +392,10 @@ build_call_a (tree function, int n, tree *argarray)\n \tif (is_empty_class (TREE_TYPE (arg))\n \t    && simple_empty_class_p (TREE_TYPE (arg), arg, INIT_EXPR))\n \t  {\n+\t    while (TREE_CODE (arg) == TARGET_EXPR)\n+\t      /* We're disconnecting the initializer from its target,\n+\t\t don't create a temporary.  */\n+\t      arg = TARGET_EXPR_INITIAL (arg);\n \t    tree t = build0 (EMPTY_CLASS_EXPR, TREE_TYPE (arg));\n \t    arg = build2 (COMPOUND_EXPR, TREE_TYPE (t), arg, t);\n \t    CALL_EXPR_ARG (function, i) = arg;"}, {"sha": "aa80384e1a4885e204b91a9074c39eca24748f6e", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=94e2418780f1d13235f3e2e6e5c09dbe821c1ce3", "patch": "@@ -603,6 +603,10 @@ simple_empty_class_p (tree type, tree op, tree_code code)\n {\n   if (TREE_CODE (op) == COMPOUND_EXPR)\n     return simple_empty_class_p (type, TREE_OPERAND (op, 1), code);\n+  if (SIMPLE_TARGET_EXPR_P (op)\n+      && TYPE_HAS_TRIVIAL_DESTRUCTOR (type))\n+    /* The TARGET_EXPR is itself a simple copy, look through it.  */\n+    return simple_empty_class_p (type, TARGET_EXPR_INITIAL (op), code);\n   return\n     (TREE_CODE (op) == EMPTY_CLASS_EXPR\n      || code == MODIFY_EXPR\n@@ -740,6 +744,11 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \n \telse if (simple_empty_class_p (TREE_TYPE (op0), op1, code))\n \t  {\n+\t    while (TREE_CODE (op1) == TARGET_EXPR)\n+\t      /* We're disconnecting the initializer from its target,\n+\t\t don't create a temporary.  */\n+\t      op1 = TARGET_EXPR_INITIAL (op1);\n+\n \t    /* Remove any copies of empty classes.  Also drop volatile\n \t       variables on the RHS to avoid infinite recursion from\n \t       gimplify_expr trying to load the value.  */\n@@ -754,6 +763,9 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t    gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n \t\t\t   is_gimple_lvalue, fb_lvalue);\n \t    *expr_p = TREE_OPERAND (*expr_p, 0);\n+\t    if (code == RETURN_EXPR && REFERENCE_CLASS_P (*expr_p))\n+\t      /* Avoid 'return *<retval>;'  */\n+\t      *expr_p = TREE_OPERAND (*expr_p, 0);\n \t  }\n \t/* P0145 says that the RHS is sequenced before the LHS.\n \t   gimplify_modify_expr gimplifies the RHS before the LHS, but that\n@@ -924,7 +936,6 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t      || TREE_CODE (TREE_OPERAND (*expr_p, 0)) == MODIFY_EXPR))\n \t{\n \t  expr_p = &TREE_OPERAND (*expr_p, 0);\n-\t  code = TREE_CODE (*expr_p);\n \t  /* Avoid going through the INIT_EXPR case, which can\n \t     degrade INIT_EXPRs into AGGR_INIT_EXPRs.  */\n \t  goto modify_expr_case;"}, {"sha": "0783b3114f29b26e132bb1a084d7683899dd1ec1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=94e2418780f1d13235f3e2e6e5c09dbe821c1ce3", "patch": "@@ -5145,6 +5145,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    the initializer has void type, it's doing something more complicated.  */\n #define SIMPLE_TARGET_EXPR_P(NODE)\t\t\t\t\\\n   (TREE_CODE (NODE) == TARGET_EXPR\t\t\t\t\\\n+   && TARGET_EXPR_INITIAL (NODE)\t\t\t\t\\\n    && !VOID_TYPE_P (TREE_TYPE (TARGET_EXPR_INITIAL (NODE))))\n \n /* True if EXPR expresses direct-initialization of a TYPE.  */"}, {"sha": "f10d2034e3683bedea4bc6a811bf0e25c08f09dc", "filename": "gcc/testsuite/g++.dg/abi/empty30.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94e2418780f1d13235f3e2e6e5c09dbe821c1ce3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty30.C?ref=94e2418780f1d13235f3e2e6e5c09dbe821c1ce3", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/94175\n+// { dg-do link }\n+\n+struct A {};\n+extern A a;\n+\n+int i;\n+__attribute ((noinline, noclone))\n+void f(A) { ++i; }\n+\n+int main()\n+{\n+  f(a);\n+}"}]}