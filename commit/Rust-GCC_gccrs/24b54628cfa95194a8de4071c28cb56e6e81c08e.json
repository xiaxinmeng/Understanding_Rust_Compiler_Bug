{"sha": "24b54628cfa95194a8de4071c28cb56e6e81c08e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRiNTQ2MjhjZmE5NTE5NGE4ZGU0MDcxYzI4Y2I1NmU2ZTgxYzA4ZQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2020-06-28T21:36:38Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2020-06-28T21:36:38Z"}, "message": "PR libstdc++/95915\n\n\tPR libstdc++/95915\n\t* include/std/type_traits (is_literal_type, is_literal_type_v):\n\tDeprecate in C++17.\n\t* include/std/variant (_Uninitialized):\n\tAdjust the condition and the comment.\n\t* testsuite/20_util/is_literal_type/deprecated-1z.cc: New.\n\t* testsuite/20_util/is_literal_type/requirements/explicit_instantiation.cc:\n\tAdjust.\n\t* testsuite/20_util/is_literal_type/requirements/typedefs.cc: Likewise.\n\t* testsuite/20_util/is_literal_type/value.cc: Likewise.\n\t* testsuite/20_util/optional/constexpr/nullopt.cc:\n\tUse __is_literal_type directly.\n\t* testsuite/20_util/optional/nullopt.cc: Likewise.\n\t* testsuite/20_util/variable_templates_for_traits.cc: Adjust.\n\t* testsuite/20_util/variant/95915.cc: New.\n\t* testsuite/20_util/variant/compile.cc: Add new test.\n\t* testsuite/experimental/optional/constexpr/nullopt.cc:\n\tUse __is_literal_type directly.\n\t* testsuite/experimental/optional/nullopt.cc: Likewise.\n\t* testsuite/experimental/type_traits/value.cc: Adjust.\n\t* testsuite/util/testsuite_common_types.h:\n\tUse __is_literal_type directly.", "tree": {"sha": "dd028749f6d9fd43bbc7171330d4e415963387fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd028749f6d9fd43bbc7171330d4e415963387fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24b54628cfa95194a8de4071c28cb56e6e81c08e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24b54628cfa95194a8de4071c28cb56e6e81c08e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24b54628cfa95194a8de4071c28cb56e6e81c08e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24b54628cfa95194a8de4071c28cb56e6e81c08e/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75ff24e1920ea6b198350a2961e23175e6108e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ff24e1920ea6b198350a2961e23175e6108e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ff24e1920ea6b198350a2961e23175e6108e75"}], "stats": {"total": 110, "additions": 92, "deletions": 18}, "files": [{"sha": "9cd3a2df41a83b935828a728733b019a5f8139aa", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -703,7 +703,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// is_literal_type\n   template<typename _Tp>\n-    struct is_literal_type\n+    struct\n+    _GLIBCXX17_DEPRECATED\n+    is_literal_type\n     : public integral_constant<bool, __is_literal_type(_Tp)>\n     {\n       static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),\n@@ -3085,10 +3087,11 @@ template <typename _Tp>\n template <typename _Tp>\n   _GLIBCXX20_DEPRECATED(\"use is_standard_layout_v && is_trivial_v instead\")\n   inline constexpr bool is_pod_v = is_pod<_Tp>::value;\n-#pragma GCC diagnostic pop\n template <typename _Tp>\n+  _GLIBCXX17_DEPRECATED\n   inline constexpr bool is_literal_type_v = is_literal_type<_Tp>::value;\n-template <typename _Tp>\n+#pragma GCC diagnostic pop\n+ template <typename _Tp>\n   inline constexpr bool is_empty_v = is_empty<_Tp>::value;\n template <typename _Tp>\n   inline constexpr bool is_polymorphic_v = is_polymorphic<_Tp>::value;"}, {"sha": "c9504914365caa41efb3aa96e809897b63123cd5", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -202,15 +202,9 @@ namespace __variant\n \t  std::forward<_Variants>(__variants)...);\n     }\n \n-  // _Uninitialized<T> is guaranteed to be a literal type, even if T is not.\n-  // We have to do this, because [basic.types]p10.5.3 (n4606) is not implemented\n-  // yet. When it's implemented, _Uninitialized<T> can be changed to the alias\n-  // to T, therefore equivalent to being removed entirely.\n-  //\n-  // Another reason we may not want to remove _Uninitialzied<T> may be that, we\n-  // want _Uninitialized<T> to be trivially destructible, no matter whether T\n-  // is; but we will see.\n-  template<typename _Type, bool = std::is_literal_type_v<_Type>>\n+  // _Uninitialized<T> is guaranteed to be a trivially destructible type,\n+  // even if T is not.\n+  template<typename _Type, bool = std::is_trivially_destructible_v<_Type>>\n     struct _Uninitialized;\n \n   template<typename _Type>"}, {"sha": "a91ff56dcf6c2e6cf96c457967786f02a42401fb", "filename": "libstdc++-v3/testsuite/20_util/is_literal_type/deprecated-1z.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Fdeprecated-1z.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Fdeprecated-1z.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Fdeprecated-1z.cc?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -0,0 +1,26 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <type_traits>\n+\n+static_assert(std::is_literal_type<int>::value); // { dg-warning \"is deprecated\" }\n+static_assert(std::is_literal_type_v<int>); // { dg-warning \"is deprecated\" }\n+\n+// { dg-prune-output \"declared here\" }"}, {"sha": "aa2a80e84e47dd24425a64690c171c9a16bc5e19", "filename": "libstdc++-v3/testsuite/20_util/is_literal_type/requirements/explicit_instantiation.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Frequirements%2Fexplicit_instantiation.cc?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -1,3 +1,4 @@\n+// { dg-additional-options \"-Wno-deprecated\" { target c++17 } }\n // { dg-do compile { target c++11 } }\n // 2010-02-21  Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "2bb7554428082f06a9d47023333bb25564b56e7c", "filename": "libstdc++-v3/testsuite/20_util/is_literal_type/requirements/typedefs.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Frequirements%2Ftypedefs.cc?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -1,3 +1,4 @@\n+// { dg-additional-options \"-Wno-deprecated\" { target c++17 } }\n // { dg-do compile { target c++11 } }\n \n // 2010-02-21  Paolo Carlini  <paolo.carlini@oracle.com>"}, {"sha": "56c5b8d268f27e54ecbe1499dcdb728d0c879b58", "filename": "libstdc++-v3/testsuite/20_util/is_literal_type/value.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_literal_type%2Fvalue.cc?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -1,3 +1,4 @@\n+// { dg-additional-options \"-Wno-deprecated\" { target c++17 } }\n // { dg-do compile { target c++11 } }\n \n // 2010-03-23  Paolo Carlini  <paolo.carlini@oracle.com>"}, {"sha": "d66728e370023c3cda8099f4ee492e72dde1fb5a", "filename": "libstdc++-v3/testsuite/20_util/optional/constexpr/nullopt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fnullopt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fnullopt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fconstexpr%2Fnullopt.cc?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -26,7 +26,7 @@ int main()\n   // [20.5.6] Disengaged state indicator\n   static_assert( std::is_same<decltype(std::nullopt), const std::nullopt_t>(), \"\" );\n   static_assert( std::is_empty<std::nullopt_t>(), \"\" );\n-  static_assert( std::is_literal_type<std::nullopt_t>(), \"\" );\n+  static_assert( __is_literal_type(std::nullopt_t), \"\" );\n   static_assert( !std::is_default_constructible<std::nullopt_t>(), \"\" );\n \n   {"}, {"sha": "325e52802b9e406c47b3be8db1e6097a5ac3f73f", "filename": "libstdc++-v3/testsuite/20_util/optional/nullopt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fnullopt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fnullopt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fnullopt.cc?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -26,7 +26,7 @@ int main()\n   // [20.5.6] Disengaged state indicator\n   static_assert( std::is_same<decltype(std::nullopt), const std::nullopt_t>(), \"\" );\n   static_assert( std::is_empty<std::nullopt_t>(), \"\" );\n-  static_assert( std::is_literal_type<std::nullopt_t>(), \"\" );\n+  static_assert( __is_literal_type(std::nullopt_t), \"\" );\n   static_assert( !std::is_default_constructible<std::nullopt_t>(), \"\" );\n \n   {"}, {"sha": "0f1625a8cb640bbc7632cc0e577690cbc2504993", "filename": "libstdc++-v3/testsuite/20_util/variable_templates_for_traits.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariable_templates_for_traits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariable_templates_for_traits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariable_templates_for_traits.cc?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -147,10 +147,13 @@ static_assert(is_pod_v<int>\n static_assert(!is_pod_v<NType>\n \t      && !is_pod<NType>::value, \"\");\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n static_assert(is_literal_type_v<int>\n \t      && is_literal_type<int>::value, \"\");\n static_assert(!is_literal_type_v<NType>\n \t      && !is_literal_type<NType>::value, \"\");\n+#pragma GCC diagnostic pop\n \n static_assert(is_empty_v<EmptyFinal>\n \t      && is_empty<EmptyFinal>::value, \"\");"}, {"sha": "411ff2d36ae88b67eeb25deed8b798e2e2139b9c", "filename": "libstdc++-v3/testsuite/20_util/variant/95915.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F95915.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F95915.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F95915.cc?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -0,0 +1,35 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <variant>\n+\n+using namespace std;\n+\n+struct virtual_default_dtor {\n+   virtual ~virtual_default_dtor() = default;\n+};\n+\n+void default_ctor()\n+{\n+  {\n+    variant<virtual_default_dtor> a;\n+  }\n+}\n+"}, {"sha": "5f681754b5f2eb6aeda345cbaaaad271156433d8", "filename": "libstdc++-v3/testsuite/20_util/variant/compile.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -84,6 +84,10 @@ struct nonliteral\n   bool operator>(const nonliteral&) const;\n };\n \n+struct virtual_default_dtor {\n+   virtual ~virtual_default_dtor() = default;\n+};\n+\n void default_ctor()\n {\n   static_assert(is_default_constructible_v<variant<int, string>>);\n@@ -95,6 +99,9 @@ void default_ctor()\n   static_assert(noexcept(variant<int>()));\n   static_assert(!noexcept(variant<Empty>()));\n   static_assert(noexcept(variant<DefaultNoexcept>()));\n+  {\n+    variant<virtual_default_dtor> a;\n+  }\n }\n \n void copy_ctor()"}, {"sha": "6fe9a2a051def96bb075a2a0a82d1296ea4c7866", "filename": "libstdc++-v3/testsuite/experimental/optional/constexpr/nullopt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fconstexpr%2Fnullopt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fconstexpr%2Fnullopt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fconstexpr%2Fnullopt.cc?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -25,7 +25,7 @@ int main()\n   // [20.5.6] Disengaged state indicator\n   static_assert( std::is_same<decltype(std::experimental::nullopt), const std::experimental::nullopt_t>(), \"\" );\n   static_assert( std::is_empty<std::experimental::nullopt_t>(), \"\" );\n-  static_assert( std::is_literal_type<std::experimental::nullopt_t>(), \"\" );\n+  static_assert( __is_literal_type(std::experimental::nullopt_t), \"\" );\n   static_assert( !std::is_default_constructible<std::experimental::nullopt_t>(), \"\" );\n \n   {"}, {"sha": "73f6b534b8778a7dcbd2bbc6e6a2ef933613acef", "filename": "libstdc++-v3/testsuite/experimental/optional/nullopt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fnullopt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fnullopt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Foptional%2Fnullopt.cc?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -25,7 +25,7 @@ int main()\n   // [20.5.6] Disengaged state indicator\n   static_assert( std::is_same<decltype(std::experimental::nullopt), const std::experimental::nullopt_t>(), \"\" );\n   static_assert( std::is_empty<std::experimental::nullopt_t>(), \"\" );\n-  static_assert( std::is_literal_type<std::experimental::nullopt_t>(), \"\" );\n+  static_assert( __is_literal_type(std::experimental::nullopt_t), \"\" );\n   static_assert( !std::is_default_constructible<std::experimental::nullopt_t>(), \"\" );\n \n   {"}, {"sha": "52a6e69cc556747a381bbbf9bcf06fbc44e6847d", "filename": "libstdc++-v3/testsuite/experimental/type_traits/value.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ftype_traits%2Fvalue.cc?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -214,10 +214,13 @@ static_assert(is_pod_v<int>\n static_assert(!is_pod_v<NType>\n \t      && !is_pod<NType>::value, \"\");\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n static_assert(is_literal_type_v<int>\n \t      && is_literal_type<int>::value, \"\");\n static_assert(!is_literal_type_v<NType>\n \t      && !is_literal_type<NType>::value, \"\");\n+#pragma GCC diagnostic pop\n \n static_assert(is_empty_v<EmptyFinal>\n \t      && is_empty<EmptyFinal>::value, \"\");"}, {"sha": "92af3af7773ea547d4d9c59a756ebf29d565ab41", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54628cfa95194a8de4071c28cb56e6e81c08e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=24b54628cfa95194a8de4071c28cb56e6e81c08e", "patch": "@@ -749,7 +749,7 @@ namespace __gnu_test\n   // Generator to test default constructor.\n   struct constexpr_default_constructible\n   {\n-    template<typename _Tp, bool _IsLitp = std::is_literal_type<_Tp>::value>\n+    template<typename _Tp, bool _IsLitp = __is_literal_type(_Tp)>\n       struct _Concept;\n \n     // NB: _Tp must be a literal type.\n@@ -801,7 +801,7 @@ namespace __gnu_test\n   struct constexpr_single_value_constructible\n   {\n     template<typename _Ttesttype, typename _Tvaluetype,\n-\t     bool _IsLitp = std::is_literal_type<_Ttesttype>::value>\n+\t     bool _IsLitp = __is_literal_type(_Ttesttype)>\n       struct _Concept;\n \n     // NB: _Tvaluetype and _Ttesttype must be literal types."}]}