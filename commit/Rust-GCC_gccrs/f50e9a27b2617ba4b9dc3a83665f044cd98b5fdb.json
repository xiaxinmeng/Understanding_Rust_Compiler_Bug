{"sha": "f50e9a27b2617ba4b9dc3a83665f044cd98b5fdb", "node_id": "C_kwDOANBUbNoAKGY1MGU5YTI3YjI2MTdiYTRiOWRjM2E4MzY2NWYwNDRjZDk4YjVmZGI", "commit": {"author": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-04-06T23:58:32Z"}, "committer": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-04-13T00:34:54Z"}, "message": "rust-session-manager: set and validate crate name properly ...\n\n... should fix #789\n\nSigned-off-by: Zixing Liu <liushuyu011@gmail.com>", "tree": {"sha": "8a68c767e5a5e1d4a7f2e768e272629860e47798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a68c767e5a5e1d4a7f2e768e272629860e47798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f50e9a27b2617ba4b9dc3a83665f044cd98b5fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50e9a27b2617ba4b9dc3a83665f044cd98b5fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f50e9a27b2617ba4b9dc3a83665f044cd98b5fdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50e9a27b2617ba4b9dc3a83665f044cd98b5fdb/comments", "author": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9ab95c088060ab27d3665879cd1ae0b6cbdc912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ab95c088060ab27d3665879cd1ae0b6cbdc912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ab95c088060ab27d3665879cd1ae0b6cbdc912"}], "stats": {"total": 86, "additions": 80, "deletions": 6}, "files": [{"sha": "1a6afd7ae83617d31958afc11a22b3da45ad70f8", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50e9a27b2617ba4b9dc3a83665f044cd98b5fdb/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50e9a27b2617ba4b9dc3a83665f044cd98b5fdb/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=f50e9a27b2617ba4b9dc3a83665f044cd98b5fdb", "patch": "@@ -54,7 +54,28 @@ const char *kHIRDumpFile = \"gccrs.hir.dump\";\n const char *kHIRTypeResolutionDumpFile = \"gccrs.type-resolution.dump\";\n const char *kTargetOptionsDumpFile = \"gccrs.target-options.dump\";\n \n-const std::string kDefaultCrateName = \"example\";\n+const std::string kDefaultCrateName = \"rust_out\";\n+\n+static std::string\n+infer_crate_name (const std::string filename)\n+{\n+  if (filename == \"-\")\n+    return kDefaultCrateName;\n+\n+  std::string crate = std::string (filename);\n+  size_t path_sep = crate.find_last_of (file_separator);\n+\n+  // find the base filename\n+  if (path_sep != std::string::npos)\n+    crate.erase (0, path_sep + 1);\n+\n+  // find the file stem name (remove file extension)\n+  size_t ext_position = crate.find_last_of ('.');\n+  if (ext_position != std::string::npos)\n+    crate.erase (ext_position);\n+\n+  return crate;\n+}\n \n // Implicitly enable a target_feature (and recursively enable dependencies).\n void\n@@ -311,10 +332,6 @@ Session::init ()\n \n   // setup backend to GCC GIMPLE\n   backend = rust_get_backend ();\n-\n-  // set the default crate name if crate name was unset\n-  if (options.crate_name.empty ())\n-    options.set_crate_name (kDefaultCrateName);\n }\n \n /* Initialise default options. Actually called before handle_option, unlike init\n@@ -479,6 +496,25 @@ Session::enable_dump (std::string arg)\n void\n Session::parse_files (int num_files, const char **files)\n {\n+  rust_assert (num_files > 0);\n+\n+  if (options.crate_name.empty ())\n+    {\n+      /* HACK: We use the first file to infer the crate name, which might be\n+       * incorrect: since rustc only allows one file to be supplied in the\n+       * command-line */\n+      auto crate_name = infer_crate_name (files[0]);\n+      rust_debug_loc (Location (), \"inferred crate name: %s\",\n+\t\t      crate_name.c_str ());\n+      if (!options.set_crate_name (crate_name))\n+\t{\n+\t  rust_inform (Location (),\n+\t\t       \"crate name inferred from the input file %<%s%>\",\n+\t\t       files[0]);\n+\t  return;\n+\t}\n+    }\n+\n   auto mappings = Analysis::Mappings::get ();\n   CrateNum crate_num = mappings->setup_crate_mappings (options.crate_name);\n   mappings->set_current_crate (crate_num);"}, {"sha": "d4fae27c5de3e9d0cdecdb5cf1a89ed6f63a6123", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50e9a27b2617ba4b9dc3a83665f044cd98b5fdb/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50e9a27b2617ba4b9dc3a83665f044cd98b5fdb/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=f50e9a27b2617ba4b9dc3a83665f044cd98b5fdb", "patch": "@@ -41,6 +41,8 @@ namespace HIR {\n struct Crate;\n }\n \n+const size_t kMaxNameLength = 64;\n+\n /* Data related to target, most useful for conditional compilation and\n  * whatever. */\n struct TargetOptions\n@@ -212,9 +214,45 @@ struct CompileOptions\n     enable_dump_option (DumpOption::TYPE_RESOLUTION_DUMP);\n   }\n \n+  /* Validate the crate name using the ASCII rules\n+   TODO: Support Unicode version of the rules */\n+  bool validate_crate_name (const std::string &crate_name)\n+  {\n+    if (crate_name.empty ())\n+      {\n+\trust_error_at (Location (), \"crate name cannot be empty\");\n+\treturn false;\n+      }\n+    if (crate_name.length () > kMaxNameLength)\n+      {\n+\trust_error_at (Location (), \"crate name cannot exceed %ld characters\",\n+\t\t       kMaxNameLength);\n+\treturn false;\n+      }\n+    for (auto &c : crate_name)\n+      {\n+\tif (!(ISALNUM (c) || c == '_' || c == '-'))\n+\t  {\n+\t    rust_error_at (Location (),\n+\t\t\t   \"invalid character %<%c%> in crate name: %<%s%>\", c,\n+\t\t\t   crate_name.c_str ());\n+\t    return false;\n+\t  }\n+      }\n+    return true;\n+  }\n+\n   bool set_crate_name (std::string name)\n   {\n-    // TODO: validate the crate name?\n+    if (!validate_crate_name (name))\n+      return false;\n+\n+    /* Replace all the '-' symbols with '_' per Rust rules */\n+    for (auto &c : name)\n+      {\n+\tif (c == '-')\n+\t  c = '_';\n+      }\n     crate_name = std::move (name);\n     return true;\n   }"}]}