{"sha": "7b65155f1ccbfd741191f03a01fbc40d3ae39cf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I2NTE1NWYxY2NiZmQ3NDExOTFmMDNhMDFmYmM0MGQzYWUzOWNmMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-10-02T16:34:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-10-02T16:34:34Z"}, "message": "PR libstdc++/67747 use readdir instead of readdir_r\n\n\tPR libstdc++/67747\n\t* src/filesystem/dir.cc (native_readdir): Remove.\n\t(_Dir::advance): Use readdir instead of native_readdir.\n\t(recursive_directory_iterator(const path&, directory_options,\n\terror_code*)): Use swap instead of reset.\n\nFrom-SVN: r228404", "tree": {"sha": "5e56fc637df93f9331eb52d4ee89ef587b81bd45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e56fc637df93f9331eb52d4ee89ef587b81bd45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b65155f1ccbfd741191f03a01fbc40d3ae39cf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b65155f1ccbfd741191f03a01fbc40d3ae39cf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b65155f1ccbfd741191f03a01fbc40d3ae39cf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b65155f1ccbfd741191f03a01fbc40d3ae39cf0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000051e1c5c5d81f3fc8dbd7f9800f2d13a188b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000051e1c5c5d81f3fc8dbd7f9800f2d13a188b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000051e1c5c5d81f3fc8dbd7f9800f2d13a188b5"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "239cd4467de82c04b7111693f60a1fd59e6d8d73", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b65155f1ccbfd741191f03a01fbc40d3ae39cf0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b65155f1ccbfd741191f03a01fbc40d3ae39cf0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7b65155f1ccbfd741191f03a01fbc40d3ae39cf0", "patch": "@@ -1,3 +1,11 @@\n+2015-10-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/67747\n+\t* src/filesystem/dir.cc (native_readdir): Remove.\n+\t(_Dir::advance): Use readdir instead of native_readdir.\n+\t(recursive_directory_iterator(const path&, directory_options,\n+\terror_code*)): Use swap instead of reset.\n+\n 2015-10-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/html/manual/errno.html: Add new file."}, {"sha": "33280ecdb07165e9c7ac295eb6e74fb704524657", "filename": "libstdc++-v3/src/filesystem/dir.cc", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b65155f1ccbfd741191f03a01fbc40d3ae39cf0/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b65155f1ccbfd741191f03a01fbc40d3ae39cf0/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc?ref=7b65155f1ccbfd741191f03a01fbc40d3ae39cf0", "patch": "@@ -69,15 +69,17 @@ struct fs::_Dir\n namespace\n {\n   template<typename Bitmask>\n-    inline bool is_set(Bitmask obj, Bitmask bits)\n+    inline bool\n+    is_set(Bitmask obj, Bitmask bits)\n     {\n       return (obj & bits) != Bitmask::none;\n     }\n \n   // Returns {dirp, p} on success, {nullptr, p} on error.\n   // If an ignored EACCES error occurs returns {}.\n-  fs::_Dir\n-  open_dir(const fs::path& p, fs::directory_options options, std::error_code* ec)\n+  inline fs::_Dir\n+  open_dir(const fs::path& p, fs::directory_options options,\n+\t   std::error_code* ec)\n   {\n     if (ec)\n       ec->clear();\n@@ -100,7 +102,7 @@ namespace\n   }\n \n   inline fs::file_type\n-  get_file_type(const dirent& d __attribute__((__unused__)))\n+  get_file_type(const ::dirent& d __attribute__((__unused__)))\n   {\n #ifdef _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE\n     switch (d.d_type)\n@@ -126,22 +128,11 @@ namespace\n     }\n #else\n     return fs::file_type::none;\n-#endif\n-  }\n-\n-  int\n-  native_readdir(DIR* dirp, ::dirent*& entryp)\n-  {\n-#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-    if ((entryp = ::readdir(dirp)))\n-      return 0;\n-    return errno;\n-#else\n-    return ::readdir_r(dirp, entryp, &entryp);\n #endif\n   }\n }\n \n+\n // Returns false when the end of the directory entries is reached.\n // Reports errors by setting ec or throwing.\n bool\n@@ -150,9 +141,20 @@ fs::_Dir::advance(error_code* ec, directory_options options)\n   if (ec)\n     ec->clear();\n \n-  ::dirent ent;\n-  ::dirent* result = &ent;\n-  if (int err = native_readdir(dirp, result))\n+  int err = std::exchange(errno, 0);\n+  const auto entp = readdir(dirp);\n+  std::swap(errno, err);\n+\n+  if (entp)\n+    {\n+      // skip past dot and dot-dot\n+      if (!strcmp(entp->d_name, \".\") || !strcmp(entp->d_name, \"..\"))\n+\treturn advance(ec, options);\n+      entry = fs::directory_entry{path / entp->d_name};\n+      type = get_file_type(*entp);\n+      return true;\n+    }\n+  else if (err)\n     {\n       if (err == EACCES\n         && is_set(options, directory_options::skip_permission_denied))\n@@ -165,15 +167,6 @@ fs::_Dir::advance(error_code* ec, directory_options options)\n       ec->assign(err, std::generic_category());\n       return true;\n     }\n-  else if (result != nullptr)\n-    {\n-      // skip past dot and dot-dot\n-      if (!strcmp(ent.d_name, \".\") || !strcmp(ent.d_name, \"..\"))\n-\treturn advance(ec, options);\n-      entry = fs::directory_entry{path / ent.d_name};\n-      type = get_file_type(ent);\n-      return true;\n-    }\n   else\n     {\n       // reached the end\n@@ -251,10 +244,10 @@ recursive_directory_iterator(const path& p, directory_options options,\n {\n   if (DIR* dirp = ::opendir(p.c_str()))\n     {\n-      _M_dirs = std::make_shared<_Dir_stack>();\n-      _M_dirs->push(_Dir{ dirp, p });\n-      if (!_M_dirs->top().advance(ec))\n-\t_M_dirs.reset();\n+      auto sp = std::make_shared<_Dir_stack>();\n+      sp->push(_Dir{ dirp, p });\n+      if (sp->top().advance(ec))\n+\t_M_dirs.swap(sp);\n     }\n   else\n     {"}]}