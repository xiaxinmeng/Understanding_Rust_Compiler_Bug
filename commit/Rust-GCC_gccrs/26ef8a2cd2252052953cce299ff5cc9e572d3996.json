{"sha": "26ef8a2cd2252052953cce299ff5cc9e572d3996", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlZjhhMmNkMjI1MjA1Mjk1M2NjZTI5OWZmNWNjOWU1NzJkMzk5Ng==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2007-08-04T16:48:50Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2007-08-04T16:48:50Z"}, "message": "re PR fortran/32968 (selected_(int|real)_kind fail with -fdefault-integer-8)\n\n2008-08-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/32968\n\t* gfortran.dg/selected_kind_1.f90: New test.\n\n2008-08-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/32969\n\t* iresolve.c (gfc_resolve_rrspacing): Convert argument(s) to\n\texpected KIND.\n\t(gfc_resolve_scale): Ditto.\n\t(gfc_resolve_set_exponent): Ditto.\n\t(gfc_resolve_spacing): Ditto.\n \n\tPR fortran/32968\n\t* trans-intrinsic.c (gfc_conv_intrinsic_si_kind,\n\tgfc_conv_intrinsic_sr_kind): Convert the argument(s) to the\n\texpected KIND, and fold the result to the expected KIND.\n\nFrom-SVN: r127205", "tree": {"sha": "0111d3542f00aaafab8c5cb4301633729cea4bb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0111d3542f00aaafab8c5cb4301633729cea4bb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26ef8a2cd2252052953cce299ff5cc9e572d3996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ef8a2cd2252052953cce299ff5cc9e572d3996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ef8a2cd2252052953cce299ff5cc9e572d3996", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ef8a2cd2252052953cce299ff5cc9e572d3996/comments", "author": null, "committer": null, "parents": [{"sha": "f06a83c0b2f7761510836194a6c9a8a72000937c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06a83c0b2f7761510836194a6c9a8a72000937c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f06a83c0b2f7761510836194a6c9a8a72000937c"}], "stats": {"total": 101, "additions": 92, "deletions": 9}, "files": [{"sha": "2e29300e7be399dd3c511c69cef7bf946c7fa3cc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ef8a2cd2252052953cce299ff5cc9e572d3996/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ef8a2cd2252052953cce299ff5cc9e572d3996/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=26ef8a2cd2252052953cce299ff5cc9e572d3996", "patch": "@@ -1,3 +1,17 @@\n+2008-08-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/32969\n+\t* iresolve.c (gfc_resolve_rrspacing): Convert argument(s) to\n+\texpected KIND.\n+\t(gfc_resolve_scale): Ditto.\n+\t(gfc_resolve_set_exponent): Ditto.\n+\t(gfc_resolve_spacing): Ditto.\n+ \n+\tPR fortran/32968\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_si_kind,\n+\tgfc_conv_intrinsic_sr_kind): Convert the argument(s) to the\n+\texpected KIND, and fold the result to the expected KIND.\n+\n 2007-08-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31202"}, {"sha": "5c491355908eb7a45b0a815d2df454c6d94a2f95", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ef8a2cd2252052953cce299ff5cc9e572d3996/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ef8a2cd2252052953cce299ff5cc9e572d3996/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=26ef8a2cd2252052953cce299ff5cc9e572d3996", "patch": "@@ -1742,6 +1742,14 @@ gfc_resolve_rrspacing (gfc_expr *f, gfc_expr *x)\n   prec = gfc_get_actual_arglist ();\n   prec->name = \"p\";\n   prec->expr = gfc_int_expr (gfc_real_kinds[k].digits);\n+  /* The library routine expects INTEGER(4).  */\n+  if (prec->expr->ts.kind != gfc_c_int_kind)\n+    {\n+      gfc_typespec ts;\n+      ts.type = BT_INTEGER;\n+      ts.kind = gfc_c_int_kind;\n+      gfc_convert_type (prec->expr, &ts, 2);\n+    }\n   f->value.function.actual->next = prec;\n }\n \n@@ -1757,7 +1765,7 @@ gfc_resolve_scale (gfc_expr *f, gfc_expr *x, gfc_expr *i)\n     {\n       gfc_typespec ts;\n       ts.type = BT_INTEGER;\n-      ts.kind = gfc_default_integer_kind;\n+      ts.kind = gfc_c_int_kind;\n       gfc_convert_type_warn (i, &ts, 2, 0);\n     }\n \n@@ -1792,11 +1800,11 @@ gfc_resolve_set_exponent (gfc_expr *f, gfc_expr *x, gfc_expr *i)\n   /* The library implementation uses GFC_INTEGER_4 unconditionally,\n      convert type so we don't have to implement all possible\n      permutations.  */\n-  if (i->ts.kind != 4)\n+  if (i->ts.kind != gfc_c_int_kind)\n     {\n       gfc_typespec ts;\n       ts.type = BT_INTEGER;\n-      ts.kind = gfc_default_integer_kind;\n+      ts.kind = gfc_c_int_kind;\n       gfc_convert_type_warn (i, &ts, 2, 0);\n     }\n \n@@ -1892,11 +1900,29 @@ gfc_resolve_spacing (gfc_expr *f, gfc_expr *x)\n   emin_1 = gfc_get_actual_arglist ();\n   emin_1->name = \"emin\";\n   emin_1->expr = gfc_int_expr (gfc_real_kinds[k].min_exponent - 1);\n+\n+  /* The library routine expects INTEGER(4).  */\n+  if (emin_1->expr->ts.kind != gfc_c_int_kind)\n+    {\n+      gfc_typespec ts;\n+      ts.type = BT_INTEGER;\n+      ts.kind = gfc_c_int_kind;\n+      gfc_convert_type (emin_1->expr, &ts, 2);\n+    }\n   emin_1->next = tiny;\n \n   prec = gfc_get_actual_arglist ();\n   prec->name = \"prec\";\n   prec->expr = gfc_int_expr (gfc_real_kinds[k].digits);\n+\n+  /* The library routine expects INTEGER(4).  */\n+  if (prec->expr->ts.kind != gfc_c_int_kind)\n+    {\n+      gfc_typespec ts;\n+      ts.type = BT_INTEGER;\n+      ts.kind = gfc_c_int_kind;\n+      gfc_convert_type (prec->expr, &ts, 2);\n+    }\n   prec->next = emin_1;\n \n   f->value.function.actual->next = prec;"}, {"sha": "2dbbacce2215f740cd455a4e91343c9b459cf3f3", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ef8a2cd2252052953cce299ff5cc9e572d3996/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ef8a2cd2252052953cce299ff5cc9e572d3996/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=26ef8a2cd2252052953cce299ff5cc9e572d3996", "patch": "@@ -3493,22 +3493,30 @@ gfc_conv_intrinsic_verify (gfc_se * se, gfc_expr * expr)\n /* Generate code for SELECTED_INT_KIND (R) intrinsic function.  */\n \n static void\n-gfc_conv_intrinsic_si_kind (gfc_se * se, gfc_expr * expr)\n+gfc_conv_intrinsic_si_kind (gfc_se *se, gfc_expr *expr)\n {\n-  tree arg;\n+  tree arg, type;\n \n   gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n-  arg = build_fold_addr_expr (arg);\n+\n+  /* The argument to SELECTED_INT_KIND is INTEGER(4).  */\n+  type = gfc_get_int_type (4); \n+  arg = build_fold_addr_expr (fold_convert (type, arg));\n+\n+  /* Convert it to the required type.  */\n+  type = gfc_typenode_for_spec (&expr->ts);\n   se->expr = build_call_expr (gfor_fndecl_si_kind, 1, arg);\n+  se->expr = fold_convert (type, se->expr);\n }\n \n+\n /* Generate code for SELECTED_REAL_KIND (P, R) intrinsic function.  */\n \n static void\n-gfc_conv_intrinsic_sr_kind (gfc_se * se, gfc_expr * expr)\n+gfc_conv_intrinsic_sr_kind (gfc_se *se, gfc_expr *expr)\n {\n   gfc_actual_arglist *actual;\n-  tree args;\n+  tree args, type;\n   gfc_se argse;\n \n   args = NULL_TREE;\n@@ -3520,13 +3528,27 @@ gfc_conv_intrinsic_sr_kind (gfc_se * se, gfc_expr * expr)\n       if (actual->expr == NULL)\n         argse.expr = null_pointer_node;\n       else\n-        gfc_conv_expr_reference (&argse, actual->expr);\n+\t{\n+\t  gfc_typespec ts;\n+\t  if (actual->expr->ts.kind != gfc_c_int_kind)\n+\t    {\n+  \t      /* The arguments to SELECTED_REAL_KIND are INTEGER(4).  */\n+\t      ts.type = BT_INTEGER;\n+\t      ts.kind = gfc_c_int_kind;\n+\t      gfc_convert_type (actual->expr, &ts, 2);\n+\t    }\n+\t  gfc_conv_expr_reference (&argse, actual->expr);\n+\t} \n \n       gfc_add_block_to_block (&se->pre, &argse.pre);\n       gfc_add_block_to_block (&se->post, &argse.post);\n       args = gfc_chainon_list (args, argse.expr);\n     }\n+\n+  /* Convert it to the required type.  */\n+  type = gfc_typenode_for_spec (&expr->ts);\n   se->expr = build_function_call_expr (gfor_fndecl_sr_kind, args);\n+  se->expr = fold_convert (type, se->expr);\n }\n \n "}, {"sha": "aa747033b649aa96571b8784ffd5757d7bd619be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ef8a2cd2252052953cce299ff5cc9e572d3996/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ef8a2cd2252052953cce299ff5cc9e572d3996/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26ef8a2cd2252052953cce299ff5cc9e572d3996", "patch": "@@ -1,3 +1,8 @@\n+2008-08-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/32968\n+\t* gfortran.dg/selected_kind_1.f90: New test.\n+\n 2007-08-04  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR middle-end/32780"}, {"sha": "0c710546d4efe7a211d8322466c3b79eae003b2e", "filename": "gcc/testsuite/gfortran.dg/selected_kind_1.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ef8a2cd2252052953cce299ff5cc9e572d3996/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_kind_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ef8a2cd2252052953cce299ff5cc9e572d3996/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_kind_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_kind_1.f90?ref=26ef8a2cd2252052953cce299ff5cc9e572d3996", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+! { dg-options \"-fdefault-integer-8\" }\n+! PR fortran/32968\n+program selected\n+\n+  if (selected_int_kind (1)  /= 1) call abort\n+  if (selected_int_kind (3)  /= 2) call abort\n+  if (selected_int_kind (5)  /= 4) call abort\n+  if (selected_int_kind (10) /= 8) call abort\n+  if (selected_real_kind (1)  /= 4) call abort\n+  if (selected_real_kind (2)  /= 4) call abort\n+  if (selected_real_kind (9)  /= 8) call abort\n+  if (selected_real_kind (10) /= 8) call abort\n+\n+end program selected\n+"}]}