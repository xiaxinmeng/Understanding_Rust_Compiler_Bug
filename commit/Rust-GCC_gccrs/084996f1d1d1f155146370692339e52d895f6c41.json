{"sha": "084996f1d1d1f155146370692339e52d895f6c41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg0OTk2ZjFkMWQxZjE1NTE0NjM3MDY5MjMzOWU1MmQ4OTVmNmM0MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-04T00:49:47Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-04T00:49:47Z"}, "message": "Implement __sync_fetch_and_add_4 if necessary.\n\nFrom-SVN: r169820", "tree": {"sha": "76e7890cb0df366dd7820b88386401a0f81c6dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76e7890cb0df366dd7820b88386401a0f81c6dc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/084996f1d1d1f155146370692339e52d895f6c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084996f1d1d1f155146370692339e52d895f6c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084996f1d1d1f155146370692339e52d895f6c41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084996f1d1d1f155146370692339e52d895f6c41/comments", "author": null, "committer": null, "parents": [{"sha": "6dc546182134d436567f8fbb11a390cd0c9ecb72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc546182134d436567f8fbb11a390cd0c9ecb72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc546182134d436567f8fbb11a390cd0c9ecb72"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "18a51cc8f02ef566cdccbb024e066d154159570f", "filename": "libgo/config.h.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084996f1d1d1f155146370692339e52d895f6c41/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084996f1d1d1f155146370692339e52d895f6c41/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=084996f1d1d1f155146370692339e52d895f6c41", "patch": "@@ -43,6 +43,10 @@\n    function for uint32 */\n #undef HAVE_SYNC_BOOL_COMPARE_AND_SWAP_4\n \n+/* Define to 1 if the compiler provides the __sync_fetch_and_add function for\n+   uint32 */\n+#undef HAVE_SYNC_FETCH_AND_ADD_4\n+\n /* Define to 1 if you have the <syscall.h> header file. */\n #undef HAVE_SYSCALL_H\n "}, {"sha": "fbaac8e3d617ea9bd8a196cb2e6bdc5987460dd2", "filename": "libgo/configure", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084996f1d1d1f155146370692339e52d895f6c41/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084996f1d1d1f155146370692339e52d895f6c41/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=084996f1d1d1f155146370692339e52d895f6c41", "patch": "@@ -14206,6 +14206,35 @@ $as_echo \"#define HAVE_SYNC_BOOL_COMPARE_AND_SWAP_4 1\" >>confdefs.h\n \n fi\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __sync_fetch_and_add_4\" >&5\n+$as_echo_n \"checking for __sync_fetch_and_add_4... \" >&6; }\n+if test \"${libgo_cv_func___sync_fetch_and_add_4+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+typedef unsigned int uint32  __attribute__ ((mode (SI)));\n+uint32 i;\n+int main() { return __sync_fetch_and_add (&i, 1); }\n+\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  libgo_cv_func___sync_fetch_and_add_4=yes\n+else\n+  libgo_cv_func___sync_fetch_and_add_4=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_func___sync_fetch_and_add_4\" >&5\n+$as_echo \"$libgo_cv_func___sync_fetch_and_add_4\" >&6; }\n+if test \"$libgo_cv_func___sync_fetch_and_add_4\" = \"yes\"; then\n+\n+$as_echo \"#define HAVE_SYNC_FETCH_AND_ADD_4 1\" >>confdefs.h\n+\n+fi\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether compiler supports -minline-all-stringops\" >&5\n $as_echo_n \"checking whether compiler supports -minline-all-stringops... \" >&6; }\n if test \"${libgo_cv_c_stringops+set}\" = set; then :"}, {"sha": "da56610b5790d4863f746cdac9aa3ff60883e7db", "filename": "libgo/configure.ac", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084996f1d1d1f155146370692339e52d895f6c41/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084996f1d1d1f155146370692339e52d895f6c41/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=084996f1d1d1f155146370692339e52d895f6c41", "patch": "@@ -396,6 +396,20 @@ if test \"$libgo_cv_func___sync_bool_compare_and_swap_4\" = \"yes\"; then\n     [Define to 1 if the compiler provides the __sync_bool_compare_and_swap function for uint32])\n fi\n \n+AC_CACHE_CHECK([for __sync_fetch_and_add_4],\n+[libgo_cv_func___sync_fetch_and_add_4],\n+[AC_LINK_IFELSE([\n+typedef unsigned int uint32  __attribute__ ((mode (SI)));\n+uint32 i;\n+int main() { return __sync_fetch_and_add (&i, 1); }\n+],\n+[libgo_cv_func___sync_fetch_and_add_4=yes],\n+[libgo_cv_func___sync_fetch_and_add_4=no])])\n+if test \"$libgo_cv_func___sync_fetch_and_add_4\" = \"yes\"; then\n+  AC_DEFINE(HAVE_SYNC_FETCH_AND_ADD_4, 1,\n+    [Define to 1 if the compiler provides the __sync_fetch_and_add function for uint32])\n+fi\n+\n dnl For x86 we want to use the -minline-all-stringops option to avoid\n dnl forcing a stack split when calling memcpy and friends.\n AC_CACHE_CHECK([whether compiler supports -minline-all-stringops],"}, {"sha": "24c6a7388f6a2ed792e74773242299dd99e57003", "filename": "libgo/runtime/go-semacquire.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084996f1d1d1f155146370692339e52d895f6c41/libgo%2Fruntime%2Fgo-semacquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084996f1d1d1f155146370692339e52d895f6c41/libgo%2Fruntime%2Fgo-semacquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-semacquire.c?ref=084996f1d1d1f155146370692339e52d895f6c41", "patch": "@@ -117,3 +117,35 @@ semrelease (uint32 *addr)\n       __go_assert (i == 0);\n     }\n }\n+\n+\n+#ifndef HAVE_SYNC_FETCH_AND_ADD_4\n+\n+/* For targets which don't have the required sync support.  Really\n+   this should be provided by gcc itself.  FIXME.  */\n+\n+static pthread_mutex_t sync_lock = PTHREAD_MUTEX_INITIALIZER;\n+\n+uint32\n+__sync_fetch_and_add_4(uint32*, uint32)\n+  __attribute__((visibility(\"hidden\")));\n+\n+uint32\n+__sync_fetch_and_add_4(uint32* ptr, uint32 add)\n+{\n+  int i;\n+  uint32 ret;\n+\n+  i = pthread_mutex_lock(&sync_lock);\n+  __go_assert(i == 0);\n+\n+  ret = *ptr;\n+  *ptr += add;\n+\n+  i = pthread_mutex_unlock(&sync_lock);\n+  __go_assert(i == 0);\n+\n+  return ret;\n+}\n+\n+#endif"}]}