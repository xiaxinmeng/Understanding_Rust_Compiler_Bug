{"sha": "adddf5bf279549cbbb52ad7096f9853a79f73136", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRkZGY1YmYyNzk1NDljYmJiNTJhZDcwOTZmOTg1M2E3OWY3MzEzNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-01-02T17:07:40Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-01-02T17:07:40Z"}, "message": "cplus-dem.c (mystrstr): Delete.\n\n\t* cplus-dem.c (mystrstr): Delete.  All callers changed to use\n\tstrstr instead.\n\nFrom-SVN: r48476", "tree": {"sha": "d859414e3d5f5f45a4a5f215e465f3aadc77fc3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d859414e3d5f5f45a4a5f215e465f3aadc77fc3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adddf5bf279549cbbb52ad7096f9853a79f73136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adddf5bf279549cbbb52ad7096f9853a79f73136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adddf5bf279549cbbb52ad7096f9853a79f73136", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adddf5bf279549cbbb52ad7096f9853a79f73136/comments", "author": null, "committer": null, "parents": [{"sha": "95574a4c7641455a2bc727f6f82e6aff6456f020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95574a4c7641455a2bc727f6f82e6aff6456f020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95574a4c7641455a2bc727f6f82e6aff6456f020"}], "stats": {"total": 40, "additions": 13, "deletions": 27}, "files": [{"sha": "92929719275057e05c29db3186b3251d50567d98", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adddf5bf279549cbbb52ad7096f9853a79f73136/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adddf5bf279549cbbb52ad7096f9853a79f73136/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=adddf5bf279549cbbb52ad7096f9853a79f73136", "patch": "@@ -1,3 +1,8 @@\n+2002-01-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cplus-dem.c (mystrstr): Delete.  All callers changed to use\n+\tstrstr instead.\n+\n 2001-12-31  Ira Ruben\t<ira@apple.com>\n \n \t* aclocal.m4 (libiberty_AC_FUNC_STRNCMP): Use anon mmap as 2nd try."}, {"sha": "691eb7135d4c73158e0d7e29290ab36b02a64e7a", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adddf5bf279549cbbb52ad7096f9853a79f73136/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adddf5bf279549cbbb52ad7096f9853a79f73136/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=adddf5bf279549cbbb52ad7096f9853a79f73136", "patch": "@@ -63,25 +63,6 @@ static char *ada_demangle  PARAMS ((const char *, int));\n \n extern void fancy_abort PARAMS ((void)) ATTRIBUTE_NORETURN;\n \n-static const char *mystrstr PARAMS ((const char *, const char *));\n-\n-static const char *\n-mystrstr (s1, s2)\n-     const char *s1, *s2;\n-{\n-  register const char *p = s1;\n-  register int len = strlen (s2);\n-\n-  for (; (p = strchr (p, *s2)) != 0; p++)\n-    {\n-      if (strncmp (p, s2, len) == 0)\n-\t{\n-\t  return (p);\n-\t}\n-    }\n-  return (0);\n-}\n-\n /* In order to allow a single demangler executable to demangle strings\n    using various common values of CPLUS_MARKER, as well as any specific\n    one set at compile time, we maintain a string containing all the\n@@ -2253,7 +2234,7 @@ arm_pt (work, mangled, n, anchor, args)\n {\n   /* Check if ARM template with \"__pt__\" in it (\"parameterized type\") */\n   /* Allow HP also here, because HP's cfront compiler follows ARM to some extent */\n-  if ((ARM_DEMANGLING || HP_DEMANGLING) && (*anchor = mystrstr (mangled, \"__pt__\")))\n+  if ((ARM_DEMANGLING || HP_DEMANGLING) && (*anchor = strstr (mangled, \"__pt__\")))\n     {\n       int len;\n       *args = *anchor + 6;\n@@ -2268,9 +2249,9 @@ arm_pt (work, mangled, n, anchor, args)\n     }\n   if (AUTO_DEMANGLING || EDG_DEMANGLING)\n     {\n-      if ((*anchor = mystrstr (mangled, \"__tm__\"))\n-          || (*anchor = mystrstr (mangled, \"__ps__\"))\n-          || (*anchor = mystrstr (mangled, \"__pt__\")))\n+      if ((*anchor = strstr (mangled, \"__tm__\"))\n+          || (*anchor = strstr (mangled, \"__ps__\"))\n+          || (*anchor = strstr (mangled, \"__pt__\")))\n         {\n           int len;\n           *args = *anchor + 6;\n@@ -2283,7 +2264,7 @@ arm_pt (work, mangled, n, anchor, args)\n               return 1;\n             }\n         }\n-      else if ((*anchor = mystrstr (mangled, \"__S\")))\n+      else if ((*anchor = strstr (mangled, \"__S\")))\n         {\n  \t  int len;\n  \t  *args = *anchor + 3;\n@@ -2584,7 +2565,7 @@ iterate_demangle_function (work, mangled, declp, scan)\n   /* Do not iterate for some demangling modes, or if there's only one\n      \"__\"-sequence.  This is the normal case.  */\n   if (ARM_DEMANGLING || LUCID_DEMANGLING || HP_DEMANGLING || EDG_DEMANGLING\n-      || mystrstr (scan + 2, \"__\") == NULL)\n+      || strstr (scan + 2, \"__\") == NULL)\n     {\n       demangle_function_name (work, mangled, declp, scan);\n       return 1;\n@@ -2727,7 +2708,7 @@ demangle_prefix (work, mangled, declp)\n \n   /*  This block of code is a reduction in strength time optimization\n       of:\n-      scan = mystrstr (*mangled, \"__\"); */\n+      scan = strstr (*mangled, \"__\"); */\n \n   {\n     scan = *mangled;\n@@ -2819,7 +2800,7 @@ demangle_prefix (work, mangled, declp)\n \t    {\n \t      scan++;\n \t    }\n-\t  if ((scan = mystrstr (scan, \"__\")) == NULL || (*(scan + 2) == '\\0'))\n+\t  if ((scan = strstr (scan, \"__\")) == NULL || (*(scan + 2) == '\\0'))\n \t    {\n \t      /* No separator (I.E. \"__not_mangled\"), or empty signature\n \t\t (I.E. \"__not_mangled_either__\") */"}]}