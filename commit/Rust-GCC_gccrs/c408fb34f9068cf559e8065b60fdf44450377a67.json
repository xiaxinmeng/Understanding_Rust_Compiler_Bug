{"sha": "c408fb34f9068cf559e8065b60fdf44450377a67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQwOGZiMzRmOTA2OGNmNTU5ZTgwNjViNjBmZGY0NDQ1MDM3N2E2Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T10:37:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T10:37:34Z"}, "message": "Minor reformatting.\n\nFrom-SVN: r235747", "tree": {"sha": "f73f00345b6819ac16ada24f11ced83e1f65690d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f73f00345b6819ac16ada24f11ced83e1f65690d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c408fb34f9068cf559e8065b60fdf44450377a67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c408fb34f9068cf559e8065b60fdf44450377a67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c408fb34f9068cf559e8065b60fdf44450377a67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c408fb34f9068cf559e8065b60fdf44450377a67/comments", "author": null, "committer": null, "parents": [{"sha": "a56886e9df65ee26c605446e80470f2a6c2e2e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56886e9df65ee26c605446e80470f2a6c2e2e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a56886e9df65ee26c605446e80470f2a6c2e2e82"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "dbdd33dc8fc382b2b18403e0649da2ec1a4538cd", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c408fb34f9068cf559e8065b60fdf44450377a67/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c408fb34f9068cf559e8065b60fdf44450377a67/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c408fb34f9068cf559e8065b60fdf44450377a67", "patch": "@@ -3977,7 +3977,7 @@ package body Exp_Ch6 is\n                begin\n                   Inst := Scope (Subp);\n \n-                  --  Find enclosing instance.\n+                  --  Find enclosing instance\n \n                   while Present (Inst) and then Inst /= Standard_Standard loop\n                      exit when Is_Generic_Instance (Inst);\n@@ -4002,11 +4002,11 @@ package body Exp_Ch6 is\n                         null;\n \n                      else\n-                        --  The instantiation node follows the package\n-                        --  declaration for the instance. If the generic\n-                        --  unit had aspect specifications, they have\n-                        --  been transformed into pragmas in the instance,\n-                        --  and the instance node appears after them.\n+                        --  The instantiation node usually follows the package\n+                        --  declaration for the instance. If the generic unit\n+                        --  has aspect specifications, they are transformed\n+                        --  into pragmas in the instance, and the instance node\n+                        --  appears after them.\n \n                         Inst_Node := Next (Decl);\n "}, {"sha": "48e3a3def16f5d2be927d8f0704ffffa71ac62c7", "filename": "gcc/ada/s-memory.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c408fb34f9068cf559e8065b60fdf44450377a67/gcc%2Fada%2Fs-memory.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c408fb34f9068cf559e8065b60fdf44450377a67/gcc%2Fada%2Fs-memory.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-memory.adb?ref=c408fb34f9068cf559e8065b60fdf44450377a67", "patch": "@@ -67,6 +67,7 @@ package body System.Memory is\n \n    function Alloc (Size : size_t) return System.Address is\n       Result : System.Address;\n+\n    begin\n       if Parameters.No_Abort then\n          Result := c_malloc (System.CRTL.size_t (Size));\n@@ -77,6 +78,7 @@ package body System.Memory is\n       end if;\n \n       if Result = System.Null_Address then\n+\n          --  If Size = 0, we can't allocate 0 bytes, because then two different\n          --  allocators, one of which has Size = 0, could return pointers that\n          --  compare equal, which is wrong. (Nonnull pointers compare equal if"}]}