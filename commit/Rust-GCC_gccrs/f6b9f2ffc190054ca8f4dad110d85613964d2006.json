{"sha": "f6b9f2ffc190054ca8f4dad110d85613964d2006", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiOWYyZmZjMTkwMDU0Y2E4ZjRkYWQxMTBkODU2MTM5NjRkMjAwNg==", "commit": {"author": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-01-23T12:06:13Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-01-23T12:06:13Z"}, "message": "use-after-scope: handle writes to a poisoned variable\n\n2017-01-23  Martin Liska  <mliska@suse.cz>\n\n\t* gcc.dg/asan/use-after-scope-10.c: New test.\n\t* gcc.dg/asan/use-after-scope-11.c: New test.\n\t* g++.dg/asan/use-after-scope-5.C: New test.\n2017-01-23  Jakub Jelinek  <jakub@redhat.com>\n\t    Martin Liska  <mliska@suse.cz>\n\n\t* asan.h: Define ASAN_USE_AFTER_SCOPE_ATTRIBUTE.\n\t* asan.c (asan_expand_poison_ifn): Support stores and use\n\tappropriate ASAN report function.\n\t* internal-fn.c (expand_ASAN_POISON_USE): New function.\n\t* internal-fn.def (ASAN_POISON_USE): Declare.\n\t* tree-into-ssa.c (maybe_add_asan_poison_write): New function.\n\t(maybe_register_def): Create ASAN_POISON_USE when sanitizing.\n\t* tree-ssa-dce.c (eliminate_unnecessary_stmts): Remove\n\tASAN_POISON calls w/o LHS.\n\t* tree-ssa.c (execute_update_addresses_taken): Create clobber\n\tfor ASAN_MARK (UNPOISON, &x, ...) in order to prevent usage of a LHS\n\tfrom ASAN_MARK (POISON, &x, ...) coming to a PHI node.\n\t* gimplify.c (asan_poison_variables): Add attribute\n\tuse_after_scope_memory to variables that really needs to live\n\tin memory.\n\t* tree-ssa.c (is_asan_mark_p): Do not rewrite into SSA when\n\thaving the attribute.\n\nFrom-SVN: r244793", "tree": {"sha": "36be2ac0b98ff565f4e87f29d7da27515ced8305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36be2ac0b98ff565f4e87f29d7da27515ced8305"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6b9f2ffc190054ca8f4dad110d85613964d2006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b9f2ffc190054ca8f4dad110d85613964d2006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b9f2ffc190054ca8f4dad110d85613964d2006", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b9f2ffc190054ca8f4dad110d85613964d2006/comments", "author": null, "committer": null, "parents": [{"sha": "a51368fad9985f84e3215cf9897f389698fbbba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51368fad9985f84e3215cf9897f389698fbbba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51368fad9985f84e3215cf9897f389698fbbba5"}], "stats": {"total": 207, "additions": 192, "deletions": 15}, "files": [{"sha": "5ab065fbcc76ea98eec6c6c72705849f0dfec154", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6b9f2ffc190054ca8f4dad110d85613964d2006", "patch": "@@ -1,3 +1,24 @@\n+2017-01-23  Jakub Jelinek  <jakub@redhat.com>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\t* asan.h: Define ASAN_USE_AFTER_SCOPE_ATTRIBUTE.\n+\t* asan.c (asan_expand_poison_ifn): Support stores and use\n+\tappropriate ASAN report function.\n+\t* internal-fn.c (expand_ASAN_POISON_USE): New function.\n+\t* internal-fn.def (ASAN_POISON_USE): Declare.\n+\t* tree-into-ssa.c (maybe_add_asan_poison_write): New function.\n+\t(maybe_register_def): Create ASAN_POISON_USE when sanitizing.\n+\t* tree-ssa-dce.c (eliminate_unnecessary_stmts): Remove\n+\tASAN_POISON calls w/o LHS.\n+\t* tree-ssa.c (execute_update_addresses_taken): Create clobber\n+\tfor ASAN_MARK (UNPOISON, &x, ...) in order to prevent usage of a LHS\n+\tfrom ASAN_MARK (POISON, &x, ...) coming to a PHI node.\n+\t* gimplify.c (asan_poison_variables): Add attribute\n+\tuse_after_scope_memory to variables that really needs to live\n+\tin memory.\n+\t* tree-ssa.c (is_asan_mark_p): Do not rewrite into SSA when\n+\thaving the attribute.\n+\n 2017-01-23  Martin Liska  <mliska@suse.cz>\n \n \t* asan.c (create_asan_shadow_var): New function."}, {"sha": "486ebfdb6af1603aee1f5ec2670d9781eb47b1d1", "filename": "gcc/asan.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=f6b9f2ffc190054ca8f4dad110d85613964d2006", "patch": "@@ -3094,6 +3094,8 @@ create_asan_shadow_var (tree var_decl,\n     return *slot;\n }\n \n+/* Expand ASAN_POISON ifn.  */\n+\n bool\n asan_expand_poison_ifn (gimple_stmt_iterator *iter,\n \t\t\tbool *need_commit_edge_insert,\n@@ -3107,8 +3109,8 @@ asan_expand_poison_ifn (gimple_stmt_iterator *iter,\n       return true;\n     }\n \n-  tree shadow_var  = create_asan_shadow_var (SSA_NAME_VAR (poisoned_var),\n-\t\t\t\t\t     shadow_vars_mapping);\n+  tree shadow_var = create_asan_shadow_var (SSA_NAME_VAR (poisoned_var),\n+\t\t\t\t\t    shadow_vars_mapping);\n \n   bool recover_p;\n   if (flag_sanitize & SANITIZE_USER_ADDRESS)\n@@ -3122,16 +3124,16 @@ asan_expand_poison_ifn (gimple_stmt_iterator *iter,\n \t\t\t\t\t\t ASAN_MARK_POISON),\n \t\t\t\t  build_fold_addr_expr (shadow_var), size);\n \n-  use_operand_p use_p;\n+  gimple *use;\n   imm_use_iterator imm_iter;\n-  FOR_EACH_IMM_USE_FAST (use_p, imm_iter, poisoned_var)\n+  FOR_EACH_IMM_USE_STMT (use, imm_iter, poisoned_var)\n     {\n-      gimple *use = USE_STMT (use_p);\n       if (is_gimple_debug (use))\n \tcontinue;\n \n       int nargs;\n-      tree fun = report_error_func (false, recover_p, tree_to_uhwi (size),\n+      bool store_p = gimple_call_internal_p (use, IFN_ASAN_POISON_USE);\n+      tree fun = report_error_func (store_p, recover_p, tree_to_uhwi (size),\n \t\t\t\t    &nargs);\n \n       gcall *call = gimple_build_call (fun, 1,\n@@ -3160,7 +3162,10 @@ asan_expand_poison_ifn (gimple_stmt_iterator *iter,\n       else\n \t{\n \t  gimple_stmt_iterator gsi = gsi_for_stmt (use);\n-\t  gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n+\t  if (store_p)\n+\t    gsi_replace (&gsi, call, true);\n+\t  else\n+\t    gsi_insert_before (&gsi, call, GSI_NEW_STMT);\n \t}\n     }\n "}, {"sha": "57663977603b7c9ff8dc4e4ff962e871b5a234e9", "filename": "gcc/asan.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=f6b9f2ffc190054ca8f4dad110d85613964d2006", "patch": "@@ -67,6 +67,8 @@ extern hash_set <tree> *asan_used_labels;\n #define ASAN_STACK_FRAME_MAGIC\t\t0x41b58ab3\n #define ASAN_STACK_RETIRED_MAGIC\t0x45e0360e\n \n+#define ASAN_USE_AFTER_SCOPE_ATTRIBUTE\t\"use after scope memory\"\n+\n /* Various flags for Asan builtins.  */\n enum asan_check_flags\n {"}, {"sha": "61a1ba5c7f9eaaa3acf8396796d11089b9488bc1", "filename": "gcc/gimplify.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=f6b9f2ffc190054ca8f4dad110d85613964d2006", "patch": "@@ -1206,8 +1206,21 @@ asan_poison_variables (hash_set<tree> *variables, bool poison, gimple_seq *seq_p\n \n   sorted_variables.qsort (sort_by_decl_uid);\n \n-  for (unsigned i = 0; i < sorted_variables.length (); i++)\n-    asan_poison_variable (sorted_variables[i], poison, seq_p);\n+  unsigned i;\n+  tree var;\n+  FOR_EACH_VEC_ELT (sorted_variables, i, var)\n+    {\n+      asan_poison_variable (var, poison, seq_p);\n+\n+      /* Add use_after_scope_memory attribute for the variable in order\n+\t to prevent re-written into SSA.  */\n+      if (!lookup_attribute (ASAN_USE_AFTER_SCOPE_ATTRIBUTE,\n+\t\t\t     DECL_ATTRIBUTES (var)))\n+\tDECL_ATTRIBUTES (var)\n+\t  = tree_cons (get_identifier (ASAN_USE_AFTER_SCOPE_ATTRIBUTE),\n+\t\t       integer_one_node,\n+\t\t       DECL_ATTRIBUTES (var));\n+    }\n }\n \n /* Gimplify a BIND_EXPR.  Just voidify and recurse.  */"}, {"sha": "0d61375462d030dd33abccd78cdc3d1b73a72b5e", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=f6b9f2ffc190054ca8f4dad110d85613964d2006", "patch": "@@ -388,6 +388,14 @@ expand_ASAN_POISON (internal_fn, gcall *)\n   gcc_unreachable ();\n }\n \n+/* This should get expanded in the sanopt pass.  */\n+\n+static void\n+expand_ASAN_POISON_USE (internal_fn, gcall *)\n+{\n+  gcc_unreachable ();\n+}\n+\n /* This should get expanded in the tsan pass.  */\n \n static void"}, {"sha": "fd25a9522994b16957a9928b8a8569db252d17ca", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=f6b9f2ffc190054ca8f4dad110d85613964d2006", "patch": "@@ -168,6 +168,7 @@ DEF_INTERNAL_FN (BUILTIN_EXPECT, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (ASAN_CHECK, ECF_TM_PURE | ECF_LEAF | ECF_NOTHROW, \".R...\")\n DEF_INTERNAL_FN (ASAN_MARK, ECF_LEAF | ECF_NOTHROW, \".R..\")\n DEF_INTERNAL_FN (ASAN_POISON, ECF_LEAF | ECF_NOTHROW | ECF_NOVOPS, NULL)\n+DEF_INTERNAL_FN (ASAN_POISON_USE, ECF_LEAF | ECF_NOTHROW | ECF_NOVOPS, NULL)\n DEF_INTERNAL_FN (ADD_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (SUB_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n DEF_INTERNAL_FN (MUL_OVERFLOW, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)"}, {"sha": "0ebaae5035c59b6c76c0d16d64fb0a9625c3de4c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6b9f2ffc190054ca8f4dad110d85613964d2006", "patch": "@@ -1,3 +1,9 @@\n+2017-01-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/asan/use-after-scope-10.c: New test.\n+\t* gcc.dg/asan/use-after-scope-11.c: New test.\n+\t* g++.dg/asan/use-after-scope-5.C: New test.\n+\n 2017-01-23  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/asan/use-after-scope-3.c: Add additional flags."}, {"sha": "7e28fc35e6d85a932c1ea44dabc55bae48ff50ab", "filename": "gcc/testsuite/g++.dg/asan/use-after-scope-5.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fuse-after-scope-5.C?ref=f6b9f2ffc190054ca8f4dad110d85613964d2006", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do run }\n+\n+int *\n+__attribute__((optimize((\"-O0\"))))\n+fn1 (int *a)\n+{\n+  return a;\n+}\n+\n+void\n+fn2 ()\n+{\n+  for (int i = 0; i < 10; i++)\n+    {\n+      int *a;\n+      (a) = fn1 (a);\n+    }\n+}\n+\n+int main()\n+{\n+  fn2();\n+}"}, {"sha": "24de8cec1ff68dfb8a8f20a59619995c2977355e", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-10.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-10.c?ref=f6b9f2ffc190054ca8f4dad110d85613964d2006", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do run }\n+// { dg-shouldfail \"asan\" }\n+// { dg-additional-options \"-O2 -fdump-tree-asan1\" }\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int *ptr = 0;\n+\n+  {\n+    int a;\n+    ptr = &a;\n+    *ptr = 12345;\n+  }\n+\n+  *ptr = 12345;\n+  return *ptr;\n+}\n+\n+// { dg-output \"ERROR: AddressSanitizer: stack-use-after-scope on address.*(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"WRITE of size .*\" }\n+// { dg-output \".*'a' <== Memory access at offset \\[0-9\\]* is inside this variable.*\" }"}, {"sha": "b3c4c9ec75835b450f2df483787853c35e664ded", "filename": "gcc/testsuite/gcc.dg/asan/use-after-scope-11.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fuse-after-scope-11.c?ref=f6b9f2ffc190054ca8f4dad110d85613964d2006", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do run }\n+\n+#include <string.h>\n+\n+char cc;\n+char ptr[] = \"sparta2\";\n+\n+void get(char **x)\n+{\n+  *x = ptr;\n+}\n+  \n+int main()\n+{\n+  char *here = &cc;\n+\n+  for (;;)\n+    {\n+    next_line:\n+\tif (here == NULL)\n+\t  __builtin_abort();\n+\tget (&here);\n+\tif (strcmp (here, \"sparta\") == 0)\n+\t    goto next_line;\n+\telse if (strcmp (here, \"sparta2\") == 0)\n+\t  break;\n+    }\n+\n+  return 0;\n+}"}, {"sha": "22261c15dc2af7d30bc977964d9aee34d11365f6", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=f6b9f2ffc190054ca8f4dad110d85613964d2006", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"domwalk.h\"\n #include \"statistics.h\"\n+#include \"asan.h\"\n \n #define PERCENT(x,y) ((float)(x) * 100.0 / (float)(y))\n \n@@ -1807,6 +1808,26 @@ maybe_replace_use_in_debug_stmt (use_operand_p use_p)\n }\n \n \n+/* If DEF has x_5 = ASAN_POISON () as its current def, add\n+   ASAN_POISON_USE (x_5) stmt before GSI to denote the stmt writes into\n+   a poisoned (out of scope) variable.  */\n+\n+static void\n+maybe_add_asan_poison_write (tree def, gimple_stmt_iterator *gsi)\n+{\n+  tree cdef = get_current_def (def);\n+  if (cdef != NULL\n+      && TREE_CODE (cdef) == SSA_NAME\n+      && gimple_call_internal_p (SSA_NAME_DEF_STMT (cdef), IFN_ASAN_POISON))\n+    {\n+      gcall *call\n+\t= gimple_build_call_internal (IFN_ASAN_POISON_USE, 1, cdef);\n+      gimple_set_location (call, gimple_location (gsi_stmt (*gsi)));\n+      gsi_insert_before (gsi, call, GSI_SAME_STMT);\n+    }\n+}\n+\n+\n /* If the operand pointed to by DEF_P is an SSA name in NEW_SSA_NAMES\n    or OLD_SSA_NAMES, or if it is a symbol marked for renaming,\n    register it as the current definition for the names replaced by\n@@ -1837,7 +1858,11 @@ maybe_register_def (def_operand_p def_p, gimple *stmt,\n \t      def = get_or_create_ssa_default_def (cfun, sym);\n \t    }\n \t  else\n-\t    def = make_ssa_name (def, stmt);\n+\t    {\n+\t      if (asan_sanitize_use_after_scope ())\n+\t\tmaybe_add_asan_poison_write (def, &gsi);\n+\t      def = make_ssa_name (def, stmt);\n+\t    }\n \t  SET_DEF (def_p, def);\n \n \t  tree tracked_var = target_for_debug_bind (sym);"}, {"sha": "5ebe57b0983678d22e81a8a45c4104e89d4cbb2f", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=f6b9f2ffc190054ca8f4dad110d85613964d2006", "patch": "@@ -1367,10 +1367,18 @@ eliminate_unnecessary_stmts (void)\n \t\t  update_stmt (stmt);\n \t\t  release_ssa_name (name);\n \n-\t\t  /* GOMP_SIMD_LANE without lhs is not needed.  */\n-\t\t  if (gimple_call_internal_p (stmt)\n-\t\t      && gimple_call_internal_fn (stmt) == IFN_GOMP_SIMD_LANE)\n-\t\t    remove_dead_stmt (&gsi, bb);\n+\t\t  /* GOMP_SIMD_LANE or ASAN_POISON without lhs is not\n+\t\t     needed.  */\n+\t\t  if (gimple_call_internal_p (stmt))\n+\t\t    switch (gimple_call_internal_fn (stmt))\n+\t\t      {\n+\t\t      case IFN_GOMP_SIMD_LANE:\n+\t\t      case IFN_ASAN_POISON:\n+\t\t\tremove_dead_stmt (&gsi, bb);\n+\t\t\tbreak;\n+\t\t      default:\n+\t\t\tbreak;\n+\t\t      }\n \t\t}\n \t      else if (gimple_call_internal_p (stmt))\n \t\tswitch (gimple_call_internal_fn (stmt))"}, {"sha": "28020b003f83375ba91f3542c67d9eec9ffc5902", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b9f2ffc190054ca8f4dad110d85613964d2006/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=f6b9f2ffc190054ca8f4dad110d85613964d2006", "patch": "@@ -1590,6 +1590,10 @@ is_asan_mark_p (gimple *stmt)\n       && VAR_P (TREE_OPERAND (addr, 0)))\n     {\n       tree var = TREE_OPERAND (addr, 0);\n+      if (lookup_attribute (ASAN_USE_AFTER_SCOPE_ATTRIBUTE,\n+\t\t\t    DECL_ATTRIBUTES (var)))\n+\treturn false;\n+\n       unsigned addressable = TREE_ADDRESSABLE (var);\n       TREE_ADDRESSABLE (var) = 0;\n       bool r = is_gimple_reg (var);\n@@ -1911,7 +1915,16 @@ execute_update_addresses_taken (void)\n \t\t\t    gsi_replace (&gsi, call, GSI_SAME_STMT);\n \t\t\t  }\n \t\t\telse\n-\t\t\t  gsi_remove (&gsi, true);\n+\t\t\t  {\n+\t\t\t    /* In ASAN_MARK (UNPOISON, &b, ...) the variable\n+\t\t\t       is uninitialized.  Avoid dependencies on\n+\t\t\t       previous out of scope value.  */\n+\t\t\t    tree clobber\n+\t\t\t      = build_constructor (TREE_TYPE (var), NULL);\n+\t\t\t    TREE_THIS_VOLATILE (clobber) = 1;\n+\t\t\t    gimple *g = gimple_build_assign (var, clobber);\n+\t\t\t    gsi_replace (&gsi, g, GSI_SAME_STMT);\n+\t\t\t  }\n \t\t\tcontinue;\n \t\t      }\n \t\t  }"}]}