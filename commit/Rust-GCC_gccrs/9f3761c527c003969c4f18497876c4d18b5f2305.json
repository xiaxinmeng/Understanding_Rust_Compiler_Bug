{"sha": "9f3761c527c003969c4f18497876c4d18b5f2305", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzNzYxYzUyN2MwMDM5NjljNGYxODQ5Nzg3NmM0ZDE4YjVmMjMwNQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-05-31T18:25:51Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-05-31T18:25:51Z"}, "message": "re PR fortran/18918 (Eventually support Fortran 2008's coarrays [co-arrays])\n\n2011-05-31  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * resolve.c (resolve_fl_variable): Handle static coarrays\n        with non-constant cobounds.\n        (resolve_symbol): Handle SAVE statement without arguments\n        for coarrays.\n        * trans-array.c (gfc_trans_array_cobounds): New function.\n        (gfc_trans_array_bounds): Place code by call to it.\n        * trans-array.h (gfc_trans_array_cobounds): New prototype.\n        * trans-decl.c (gfc_get_symbol_decl, gfc_trans_deferred_vars):\n        Handle static coarrays with nonconstant cobounds.\n\n2011-05-31  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/18918\n        * gfortran.dg/coarray/save_1.f90: New.\n        * gfortran.dg/coarray_4.f90: Update dg-error.\n\nFrom-SVN: r174503", "tree": {"sha": "59427254682f41e38c3837a5da77e001222c18ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59427254682f41e38c3837a5da77e001222c18ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f3761c527c003969c4f18497876c4d18b5f2305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3761c527c003969c4f18497876c4d18b5f2305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f3761c527c003969c4f18497876c4d18b5f2305", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3761c527c003969c4f18497876c4d18b5f2305/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ed2ca85c2b04527c59ec3e4bc7d88770c60dee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed2ca85c2b04527c59ec3e4bc7d88770c60dee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed2ca85c2b04527c59ec3e4bc7d88770c60dee2"}], "stats": {"total": 104, "additions": 78, "deletions": 26}, "files": [{"sha": "ba7d7be0b0e8abb2cdf62fd73bb6a7b0c9e9cacc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9f3761c527c003969c4f18497876c4d18b5f2305", "patch": "@@ -1,3 +1,9 @@\n+2011-05-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* resolve.c (resolve_fl_variable): Handle static coarrays\n+\twith non-constant cobounds.\n+\n 2011-05-29  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/47601"}, {"sha": "6ca98f2e721e6803224ebcfdfa7b9dbd67e3fe00", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9f3761c527c003969c4f18497876c4d18b5f2305", "patch": "@@ -10118,7 +10118,14 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n \n       /* Also, they must not have the SAVE attribute.\n \t SAVE_IMPLICIT is checked below.  */\n-      if (sym->attr.save == SAVE_EXPLICIT)\n+      if (sym->as && sym->attr.codimension)\n+\t{\n+\t  int corank = sym->as->corank;\n+\t  sym->as->corank = 0;\n+\t  no_init_flag = automatic_flag = is_non_constant_shape_array (sym);\n+\t  sym->as->corank = corank;\n+\t}\n+      if (automatic_flag && sym->attr.save == SAVE_EXPLICIT)\n \t{\n \t  gfc_error (auto_save_msg, sym->name, &sym->declared_at);\n \t  return FAILURE;\n@@ -12337,6 +12344,7 @@ resolve_symbol (gfc_symbol *sym)\n   if (((sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.coarray_comp)\n        || sym->attr.codimension)\n       && !(sym->attr.allocatable || sym->attr.dummy || sym->attr.save\n+\t   || sym->ns->save_all\n \t   || sym->ns->proc_name->attr.flavor == FL_MODULE\n \t   || sym->ns->proc_name->attr.is_main_program\n \t   || sym->attr.function || sym->attr.result || sym->attr.use_assoc))"}, {"sha": "0c6c63896eae0660cae77f84db7f06b57745a45f", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 39, "deletions": 20, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=9f3761c527c003969c4f18497876c4d18b5f2305", "patch": "@@ -4648,6 +4648,43 @@ gfc_conv_array_initializer (tree type, gfc_expr * expr)\n }\n \n \n+/* Generate code to evaluate non-constant coarray cobounds.  */\n+\n+void\n+gfc_trans_array_cobounds (tree type, stmtblock_t * pblock,\n+\t\t\t  const gfc_symbol *sym)\n+{\n+  int dim;\n+  tree ubound;\n+  tree lbound;\n+  gfc_se se;\n+  gfc_array_spec *as;\n+\n+  as = sym->as;\n+\n+  for (dim = as->rank; dim < as->rank + as->corank; dim++)\n+    {\n+      /* Evaluate non-constant array bound expressions.  */\n+      lbound = GFC_TYPE_ARRAY_LBOUND (type, dim);\n+      if (as->lower[dim] && !INTEGER_CST_P (lbound))\n+        {\n+          gfc_init_se (&se, NULL);\n+          gfc_conv_expr_type (&se, as->lower[dim], gfc_array_index_type);\n+          gfc_add_block_to_block (pblock, &se.pre);\n+          gfc_add_modify (pblock, lbound, se.expr);\n+        }\n+      ubound = GFC_TYPE_ARRAY_UBOUND (type, dim);\n+      if (as->upper[dim] && !INTEGER_CST_P (ubound))\n+        {\n+          gfc_init_se (&se, NULL);\n+          gfc_conv_expr_type (&se, as->upper[dim], gfc_array_index_type);\n+          gfc_add_block_to_block (pblock, &se.pre);\n+          gfc_add_modify (pblock, ubound, se.expr);\n+        }\n+    }\n+}\n+\n+\n /* Generate code to evaluate non-constant array bounds.  Sets *poffset and\n    returns the size (in elements) of the array.  */\n \n@@ -4728,26 +4765,8 @@ gfc_trans_array_bounds (tree type, gfc_symbol * sym, tree * poffset,\n \n       size = stride;\n     }\n-  for (dim = as->rank; dim < as->rank + as->corank; dim++)\n-    {\n-      /* Evaluate non-constant array bound expressions.  */\n-      lbound = GFC_TYPE_ARRAY_LBOUND (type, dim);\n-      if (as->lower[dim] && !INTEGER_CST_P (lbound))\n-        {\n-          gfc_init_se (&se, NULL);\n-          gfc_conv_expr_type (&se, as->lower[dim], gfc_array_index_type);\n-          gfc_add_block_to_block (pblock, &se.pre);\n-          gfc_add_modify (pblock, lbound, se.expr);\n-        }\n-      ubound = GFC_TYPE_ARRAY_UBOUND (type, dim);\n-      if (as->upper[dim] && !INTEGER_CST_P (ubound))\n-        {\n-          gfc_init_se (&se, NULL);\n-          gfc_conv_expr_type (&se, as->upper[dim], gfc_array_index_type);\n-          gfc_add_block_to_block (pblock, &se.pre);\n-          gfc_add_modify (pblock, ubound, se.expr);\n-        }\n-    }\n+\n+  gfc_trans_array_cobounds (type, pblock, sym);\n   gfc_trans_vla_type_sizes (sym, pblock);\n \n   *poffset = offset;"}, {"sha": "f29162e5b02e9c6ca586c596448dcfd1f8a9989b", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=9f3761c527c003969c4f18497876c4d18b5f2305", "patch": "@@ -132,6 +132,9 @@ tree gfc_conv_array_stride (tree, int);\n tree gfc_conv_array_lbound (tree, int);\n tree gfc_conv_array_ubound (tree, int);\n \n+/* Set cobounds of an array.  */\n+void gfc_trans_array_cobounds (tree, stmtblock_t *, const gfc_symbol *);\n+\n /* Build expressions for accessing components of an array descriptor.  */\n tree gfc_conv_descriptor_data_get (tree);\n tree gfc_conv_descriptor_data_addr (tree);"}, {"sha": "27eca79c80459447c9f1e9cbe934c39739187430", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=9f3761c527c003969c4f18497876c4d18b5f2305", "patch": "@@ -1349,7 +1349,7 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n     }\n \n   /* Remember this variable for allocation/cleanup.  */\n-  if (sym->attr.dimension || sym->attr.allocatable\n+  if (sym->attr.dimension || sym->attr.allocatable || sym->attr.codimension\n       || (sym->ts.type == BT_CLASS &&\n \t  (CLASS_DATA (sym)->attr.dimension\n \t   || CLASS_DATA (sym)->attr.allocatable))\n@@ -3485,6 +3485,15 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t      gfc_trans_deferred_array (sym, block);\n \t\t    }\n \t\t}\n+\t      else if (sym->attr.codimension && TREE_STATIC (sym->backend_decl))\n+\t\t{\n+\t\t  gfc_init_block (&tmpblock);\n+\t\t  gfc_trans_array_cobounds (TREE_TYPE (sym->backend_decl),\n+\t\t\t\t\t    &tmpblock, sym);\n+\t\t  gfc_add_init_cleanup (block, gfc_finish_block (&tmpblock),\n+\t\t\t\t\tNULL_TREE);\n+\t\t  continue;\n+\t\t}\n \t      else if (gfc_option.coarray != GFC_FCOARRAY_LIB)\n \t\t{\n \t\t  gfc_save_backend_locus (&loc);"}, {"sha": "6765c11dd1e23379a6a16ef2c6be176c75e9acf8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f3761c527c003969c4f18497876c4d18b5f2305", "patch": "@@ -1,3 +1,9 @@\n+2011-05-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/18918\n+\t* gfortran.dg/coarray/save_1.f90: New.\n+\t* gfortran.dg/coarray_4.f90: Update dg-error.\n+\n 2011-05-31  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/rv-template1.C: New."}, {"sha": "be2bc4edb5cd755149704bc58be338fbbc057495", "filename": "gcc/testsuite/gfortran.dg/coarray_4.f90", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3761c527c003969c4f18497876c4d18b5f2305/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_4.f90?ref=9f3761c527c003969c4f18497876c4d18b5f2305", "patch": "@@ -18,7 +18,8 @@ subroutine valid(n, c, f)\n   save :: k\n   integer :: ii = 7\n   block\n-    integer, save :: kk[ii, *] ! { dg-error \"cannot have the SAVE attribute\" }\n+    integer :: j = 5\n+    integer, save :: kk[j, *] ! { dg-error \"Variable .j. cannot appear in the expression\" }\n   end block\n end subroutine valid\n \n@@ -43,10 +44,10 @@ subroutine invalid(n)\n   complex, save :: hh(n)[*] ! { dg-error \"cannot have the SAVE attribute\" }\n   integer :: j = 6\n \n-  integer, save :: hf1[j,*] ! { dg-error \"cannot appear in the expression|cannot have the SAVE attribute\" }\n-  integer, save :: hf2[n,*] ! { dg-error \"cannot have the SAVE attribute\" }\n+  integer, save :: hf1[j,*] ! { dg-error \"cannot appear in the expression\" }\n+  integer, save :: hf2[n,*] ! OK\n   integer, save :: hf3(4)[j,*] ! { dg-error \"cannot appear in the expression|cannot have the SAVE attribute\" }\n-  integer, save :: hf4(5)[n,*] ! { dg-error \"cannot have the SAVE attribute\" }\n+  integer, save :: hf4(5)[n,*] ! OK\n \n   integer, allocatable :: a2[*] ! { dg-error \"must have deferred shape\" }\n   integer, allocatable :: a3(:)[*] ! { dg-error \"must have deferred shape\" }"}]}