{"sha": "df4cfec5540bfb982bfec374346493bed6608fa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY0Y2ZlYzU1NDBiZmI5ODJiZmVjMzc0MzQ2NDkzYmVkNjYwOGZhNA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-03-12T17:37:39Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-03-12T17:37:39Z"}, "message": "rs6000: sysv: Don't pass SFmode in varargs in FPRs\n\nThis makes the float32-basic.c testcase work on sysv (32-bit Linux).\n\n\"float\" is promoted to \"double\" for varargs.  The ABI also only defines\nthe use of double precision in varargs.  But _Float32 is not promoted.\nSince there is no way of passing single-precision float in FPRs we\nshould pass SFmode in GPRs (or memory) instead.  This is similar to\nthe 64-bit ABI.\n\nFrom-SVN: r258454", "tree": {"sha": "08da92b79cac1ae80062cf5a906b0c8ee8daf456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08da92b79cac1ae80062cf5a906b0c8ee8daf456"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df4cfec5540bfb982bfec374346493bed6608fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4cfec5540bfb982bfec374346493bed6608fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df4cfec5540bfb982bfec374346493bed6608fa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4cfec5540bfb982bfec374346493bed6608fa4/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37f71cead0f506b45a46d817d38c51d7e7690aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37f71cead0f506b45a46d817d38c51d7e7690aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37f71cead0f506b45a46d817d38c51d7e7690aac"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "f9f986bfab58be341ee3e2f33bc8b615793b58dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4cfec5540bfb982bfec374346493bed6608fa4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4cfec5540bfb982bfec374346493bed6608fa4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df4cfec5540bfb982bfec374346493bed6608fa4", "patch": "@@ -1,3 +1,11 @@\n+2018-03-12  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.c (abi_v4_pass_in_fpr): Add bool \"named\"\n+\tparameter.  Use it for SFmode.\n+\t(rs6000_function_arg_advance_1): Adjust.\n+\t(rs6000_function_arg): Adjust.\n+\t(rs6000_gimplify_va_arg): Pass false for that new parameter.\n+\n 2018-03-12  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/84169"}, {"sha": "1db88d0a1d2d2be5fb348e68782626aa2f96b65b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4cfec5540bfb982bfec374346493bed6608fa4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4cfec5540bfb982bfec374346493bed6608fa4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=df4cfec5540bfb982bfec374346493bed6608fa4", "patch": "@@ -11449,13 +11449,13 @@ is_complex_IBM_long_double (machine_mode mode)\n    registers.  */\n \n static bool\n-abi_v4_pass_in_fpr (machine_mode mode)\n+abi_v4_pass_in_fpr (machine_mode mode, bool named)\n {\n   if (!TARGET_HARD_FLOAT)\n     return false;\n-  if (TARGET_SINGLE_FLOAT && mode == SFmode)\n+  if (mode == DFmode)\n     return true;\n-  if (TARGET_DOUBLE_FLOAT && mode == DFmode)\n+  if (mode == SFmode && named)\n     return true;\n   /* ABI_V4 passes complex IBM long double in 8 gprs.\n      Stupid, but we can't change the ABI now.  */\n@@ -11926,7 +11926,7 @@ rs6000_function_arg_advance_1 (CUMULATIVE_ARGS *cum, machine_mode mode,\n     }\n   else if (DEFAULT_ABI == ABI_V4)\n     {\n-      if (abi_v4_pass_in_fpr (mode))\n+      if (abi_v4_pass_in_fpr (mode, named))\n \t{\n \t  /* _Decimal128 must use an even/odd register pair.  This assumes\n \t     that the register number is odd when fregno is odd.  */\n@@ -12478,7 +12478,7 @@ rs6000_function_arg (cumulative_args_t cum_v, machine_mode mode,\n \n   else if (abi == ABI_V4)\n     {\n-      if (abi_v4_pass_in_fpr (mode))\n+      if (abi_v4_pass_in_fpr (mode, named))\n \t{\n \t  /* _Decimal128 must use an even/odd register pair.  This assumes\n \t     that the register number is odd when fregno is odd.  */\n@@ -13402,7 +13402,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   align = 1;\n \n   machine_mode mode = TYPE_MODE (type);\n-  if (abi_v4_pass_in_fpr (mode))\n+  if (abi_v4_pass_in_fpr (mode, false))\n     {\n       /* FP args go in FP registers, if present.  */\n       reg = fpr;"}]}