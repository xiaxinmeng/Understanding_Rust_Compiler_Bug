{"sha": "bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM3ZDBlOTAwNjI2NmNmM2UwOTYzZTczMTFjZjNiYTlkYjU2ZTNkNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-11-29T20:12:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-11-29T20:12:58Z"}, "message": "re PR c++/53137 (g++ segfault)\n\n\tPR c++/53137\n\t* pt.c (tsubst_expr) [DECL_EXPR]: Set LAMBDA_EXPR_THIS_CAPTURE here.\n\t(tsubst_copy_and_build) [LAMBDA_EXPR]: And clear it here.\n\t(instantiate_class_template_1): Not here.\n\nFrom-SVN: r193954", "tree": {"sha": "05084cfe0755772b905267bbc58f2fb915f992d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05084cfe0755772b905267bbc58f2fb915f992d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4b5e1f715b8e60cc6bd05742e92fb6c85409b84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4b5e1f715b8e60cc6bd05742e92fb6c85409b84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4b5e1f715b8e60cc6bd05742e92fb6c85409b84"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "60211d8add09aa65d89ef2b66f94166a89718246", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5", "patch": "@@ -1,3 +1,10 @@\n+2012-11-29  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53137\n+\t* pt.c (tsubst_expr) [DECL_EXPR]: Set LAMBDA_EXPR_THIS_CAPTURE here.\n+\t(tsubst_copy_and_build) [LAMBDA_EXPR]: And clear it here.\n+\t(instantiate_class_template_1): Not here.\n+\n 2012-11-29  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/53094"}, {"sha": "ceac093385da1f336e68e9965a3f396403253460", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5", "patch": "@@ -659,8 +659,9 @@ enum cp_lambda_default_capture_mode_type {\n #define LAMBDA_EXPR_CAPTURE_LIST(NODE) \\\n   (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->capture_list)\n \n-/* During parsing of the lambda, the node in the capture-list that holds\n-   the 'this' capture.  */\n+/* During parsing of the lambda-introducer, the node in the capture-list\n+   that holds the 'this' capture.  During parsing of the body, the\n+   capture proxy for that node.  */\n #define LAMBDA_EXPR_THIS_CAPTURE(NODE) \\\n   (((struct tree_lambda_expr *)LAMBDA_EXPR_CHECK (NODE))->this_capture)\n "}, {"sha": "3bc0d64d6ba8abc9aea18986ea2fc7abfc5181af", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5", "patch": "@@ -8956,14 +8956,8 @@ instantiate_class_template_1 (tree type)\n       tree decl = lambda_function (type);\n       if (decl)\n \t{\n-\t  tree lam = CLASSTYPE_LAMBDA_EXPR (type);\n-\t  LAMBDA_EXPR_THIS_CAPTURE (lam)\n-\t    = lookup_field_1 (type, get_identifier (\"__this\"), false);\n-\n \t  instantiate_decl (decl, false, false);\n \t  maybe_add_lambda_conv_op (type);\n-\n-\t  LAMBDA_EXPR_THIS_CAPTURE (lam) = NULL_TREE;\n \t}\n       else\n \tgcc_assert (errorcount);\n@@ -12728,6 +12722,12 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\telse if (is_capture_proxy (DECL_EXPR_DECL (t)))\n \t\t  {\n \t\t    DECL_CONTEXT (decl) = current_function_decl;\n+\t\t    if (DECL_NAME (decl) == this_identifier)\n+\t\t      {\n+\t\t\ttree lam = DECL_CONTEXT (current_function_decl);\n+\t\t\tlam = CLASSTYPE_LAMBDA_EXPR (lam);\n+\t\t\tLAMBDA_EXPR_THIS_CAPTURE (lam) = decl;\n+\t\t      }\n \t\t    insert_capture_proxy (decl);\n \t\t  }\n \t\telse if (DECL_IMPLICIT_TYPEDEF_P (t))\n@@ -14313,6 +14313,7 @@ tsubst_copy_and_build (tree t,\n \t   wait until after we finish instantiating the type.  */\n \tLAMBDA_EXPR_CAPTURE_LIST (r)\n \t  = RECUR (LAMBDA_EXPR_CAPTURE_LIST (t));\n+\tLAMBDA_EXPR_THIS_CAPTURE (r) = NULL_TREE;\n \n \tRETURN (build_lambda_object (r));\n       }"}, {"sha": "acf4eaa7fcb965c11f8091e30cbc86cee78efa77", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-this6.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this6.C?ref=bc7d0e9006266cf3e0963e7311cf3ba9db56e3d5", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/53137\n+// { dg-options -std=c++11 }\n+\n+template <typename STORE>\n+void getParent(STORE& tStore)\n+{\n+}\n+\n+struct  Store\n+{\n+    template <typename CheckParentFunc>\n+    void updateChildCommon(CheckParentFunc c)\n+    {\n+        c();\n+    }\n+\n+    template <typename T>\n+    int& getStore();\n+\n+    template <typename T>\n+    void updateChild(const T& obj)\n+    {\n+        updateChildCommon([this] () { getParent(getStore<T>()); });\n+    }\n+\n+    void update(int obj);\n+};\n+\n+void Store::update(int obj)\n+{\n+    updateChild(obj);\n+}"}]}