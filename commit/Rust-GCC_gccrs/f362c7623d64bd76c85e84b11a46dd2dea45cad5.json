{"sha": "f362c7623d64bd76c85e84b11a46dd2dea45cad5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM2MmM3NjIzZDY0YmQ3NmM4NWU4NGIxMWE0NmRkMmRlYTQ1Y2FkNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mitchell@doubledemon.codesourcery.com", "date": "2002-05-20T07:22:30Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-05-20T07:22:30Z"}, "message": "Makefile.in (distclean): Remove QMTest stuff.\n\n\t* Makefile.in (distclean): Remove QMTest stuff.\n\t(QMTEST_PATH): New variable.\n\t(QMTESTFLAGS): Likewise.\n\t(QMTESTRUNFLAGS): Likewise.\n\t(QMTEST): Likewise.\n\t(QMTEST_GPP_TESTS): Likewise.\n\t(QMTEST_DIR): Likewise.\n\t(QMTEST_DIR/context): New target.\n\t(qmtest-g++): Likeise.\n\t(qmtest-gui): Likewise.\n\t(QMTEST_DIR/gpp-expected.qmr): Likewise.\n\n\t* README.QMTEST: New file.\n\nFrom-SVN: r53654", "tree": {"sha": "edfaf5857414ff1b84facf9984d8a5405bb36641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edfaf5857414ff1b84facf9984d8a5405bb36641"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f362c7623d64bd76c85e84b11a46dd2dea45cad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f362c7623d64bd76c85e84b11a46dd2dea45cad5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f362c7623d64bd76c85e84b11a46dd2dea45cad5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f362c7623d64bd76c85e84b11a46dd2dea45cad5/comments", "author": null, "committer": null, "parents": [{"sha": "8b46e4a5d455b8a754865b602c7771a335b25c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b46e4a5d455b8a754865b602c7771a335b25c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b46e4a5d455b8a754865b602c7771a335b25c61"}], "stats": {"total": 271, "additions": 271, "deletions": 0}, "files": [{"sha": "96fe9c3ba906ee688e26d4f2a6165e386c8854ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f362c7623d64bd76c85e84b11a46dd2dea45cad5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f362c7623d64bd76c85e84b11a46dd2dea45cad5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f362c7623d64bd76c85e84b11a46dd2dea45cad5", "patch": "@@ -1,3 +1,17 @@\n+2002-05-19  Mark Mitchell  <mitchell@doubledemon.codesourcery.com>\n+\n+\t* Makefile.in (distclean): Remove QMTest stuff.\n+\t(QMTEST_PATH): New variable.\n+\t(QMTESTFLAGS): Likewise.\n+\t(QMTESTRUNFLAGS): Likewise.\n+\t(QMTEST): Likewise.\n+\t(QMTEST_GPP_TESTS): Likewise.\n+\t(QMTEST_DIR): Likewise.\n+\t(QMTEST_DIR/context): New target.\n+\t(qmtest-g++): Likeise.\n+\t(qmtest-gui): Likewise.\n+\t(QMTEST_DIR/gpp-expected.qmr): Likewise.\n+\n 2002-05-19  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/rs6000.h (FUNCTION_VALUE): Only return vectors in"}, {"sha": "bdcf3f6a6a25c59571aa225226e62e0a3a2b3ff8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f362c7623d64bd76c85e84b11a46dd2dea45cad5/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f362c7623d64bd76c85e84b11a46dd2dea45cad5/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f362c7623d64bd76c85e84b11a46dd2dea45cad5", "patch": "@@ -2505,6 +2505,7 @@ distclean: clean $(INTL_DISTCLEAN) lang.distclean\n \t-rm -f float.h\n \t-rm -f site.exp site.bak testsuite/site.exp testsuite/site.bak\n \t-rm -f testsuite/{gcc,g++}.{log,sum}\n+\t-rm -rf ${QMTEST_DIR} stamp-qmtest\n \t-rm -f intl/libintl.h libintl.h\n \t-rm -f cxxmain.c\n \t-rm -f mklibgcc gccbug .gdbinit configargs.h\n@@ -2987,6 +2988,74 @@ check-consistency: testsuite/site.exp\n \t   export TCL_LIBRARY ; fi ; \\\n \t$(RUNTEST) --tool consistency $(RUNTESTFLAGS)\n \n+# QMTest targets\n+\n+# The path to qmtest.\n+QMTEST_PATH=qmtest\n+\n+# The flags to pass to qmtest.\n+QMTESTFLAGS=\n+\n+# The flags to pass to \"qmtest run\".\n+QMTESTRUNFLAGS=\n+\n+# The command to use to invoke qmtest.\n+QMTEST=${QMTEST_PATH} ${QMTESTFLAGS}\n+\n+# The tests (or suites) to run.\n+QMTEST_GPP_TESTS=gpp\n+\n+# The subdirectory of the OBJDIR that will be used to store the QMTest\n+# test database configuration and that will be used for temporary\n+# scratch space during QMTest's execution.\n+QMTEST_DIR=${objdir}/qmtestsuite\n+\n+# Create the QMTest database configuration.\n+${QMTEST_DIR} stamp-qmtest:\n+\tdebug_options=\"\"; \\\n+\t    ${STAMP} empty.C; \\\n+\t    for option in \\\n+\t        -gdwarf-2 -gstabs -gstabs+ -gxcoff -gxcoff+ -gcoff; do \\\n+\t\t(./cc1plus -q $${option} empty.C 2>&1 | \\\n+\t\t     grep \"unknown or unsupported -g option\" > /dev/null) || \\\n+\t\tdebug_options=\"$${debug_options}$${option} \"; done; \\\n+\t    ${QMTEST} -D ${QMTEST_DIR} create-tdb \\\n+\t        -c gcc_database.GCCDatabase \\\n+\t        -a GCCDatabase.testsuite_root=`cd ${srcdir}/testsuite && pwd` \\\n+\t        -a GCCDatabase.debug_options=\"$${debug_options}\"\n+\trm -f empty.C empty.s\n+\t$(STAMP) stamp-qmtest\n+\n+# Create the QMTest context file.\n+${QMTEST_DIR}/context: stamp-qmtest\n+\techo \"GCCTest.flags=-B${objdir}\" >> $@\n+\techo \"GCCTest.objdir=${objdir}/..\" >> $@\n+\techo \"GCCTest.host=${host_canonical}\" >> $@\n+\techo \"GCCTest.target=${target}\" >> $@\n+\techo \"GCCTest.gcov=${objdir}/gcov\" >> $@\n+\techo \"GPPTest.gpp=${objdir}/g++\" >> $@\n+\techo \"DGTest.demangler=${objdir}/c++filt\" >> $@\n+\n+# Run the G++ testsuite using QMTest.\n+qmtest-g++: ${QMTEST_DIR}/context ${QMTEST_DIR}/gpp-expected.qmr\n+\tcd ${QMTEST_DIR} && ${QMTEST} run ${QMTESTRUNFLAGS} -C context \\\n+\t   -o gpp.qmr -O ${QMTEST_DIR}/gpp-expected.qmr \\\n+\t   ${QMTEST_GPP_TESTS}\n+\n+# Use the QMTest GUI.\n+qmtest-gui: ${QMTEST_DIR}/context\n+\tcd ${QMTEST_DIR} && ${QMTEST} gui -C context\n+\n+# Build the set of expected G++ failures.\n+${QMTEST_DIR}/gpp-expected.qmr: ${QMTEST_DIR}/context\n+\techo \"Determining expected results...\"\n+\tcd ${QMTEST_DIR} && ${QMTEST} run ${QMTESTRUNFLAGS} -C context \\\n+           -c \"GCCTest.generate_xfails=1\" -o gpp-expected.qmr \\\n+\t   ${QMTEST_GPP_TESTS} \\\n+\t   > /dev/null\n+\n+.PHONY: qmtest-g++\n+\n # These exist for maintenance purposes.\n \n # Update the tags table."}, {"sha": "811e1c41c892ded195590bf6d65da90a0c5b8243", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f362c7623d64bd76c85e84b11a46dd2dea45cad5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f362c7623d64bd76c85e84b11a46dd2dea45cad5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f362c7623d64bd76c85e84b11a46dd2dea45cad5", "patch": "@@ -1,5 +1,7 @@\n 2002-05-19  Mark Mitchell  <mitchell@doubledemon.codesourcery.com>\n \n+\t* README.QMTEST: New file.\n+\n \t* g++.dg/warn/Wshadow-1.C: Remove unncessary dg-error line.\n \n 2002-05-19  Andreas Jaeger  <aj@suse.de>"}, {"sha": "00fcc4f7359f5728f75c8f7ae63e46b515e1da36", "filename": "gcc/testsuite/README.QMTEST", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f362c7623d64bd76c85e84b11a46dd2dea45cad5/gcc%2Ftestsuite%2FREADME.QMTEST", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f362c7623d64bd76c85e84b11a46dd2dea45cad5/gcc%2Ftestsuite%2FREADME.QMTEST", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FREADME.QMTEST?ref=f362c7623d64bd76c85e84b11a46dd2dea45cad5", "patch": "@@ -0,0 +1,186 @@\n+Testing with QMTest\n+===================\n+\n+You can use QMTest to test G++.  (In the future, it may be possible to\n+test other parts of GCC with QMTest as well, but it is not possible\n+yet.)\n+\n+The use of QMTest to run the G++ tests has not been approved as an\n+officially supported testing procedure.  Therefore, you must run the\n+tests using DejaGNU (with \"make check-g++\") before committing changes\n+that affect G++.\n+\n+Differences from DejaGNU\n+========================\n+\n+Although QMTest can be used to run the G++ test suite, it works\n+somewhat differently from DejaGNU.  In particular:\n+\n+- In DejaGNU, a single source file contains many tests.  Each \n+  line where a diagnostic is expected is considered a separate\n+  test.  Testing for successful compilation and testing for \n+  successful execution of the generated program are considered\n+  separate tests.  Thus, a test \"test.C\" could contain, say, \n+  seven tests; some of which might pass and some of which might\n+  fail.\n+\n+  With QMTest, each source file is considered a single test.  If any\n+  of the seven sub-tests fail, the entire test is considered to fail.\n+  However, QMTest does present information about *why* the test\n+  failed, so the same information is effectively available.\n+\n+  It is true that, therefore, causing an already failing test to \"fail\n+  more\" is not immediately detectable through an additional unexpected\n+  failure messages when using QMTest.  On the other hand, most people\n+  seem to think of each source file as \"a test\", not \"twelve tests\",\n+  so the model QMTest uses may be more natural.\n+\n+- In DejaGNU, tests themselves keep track of expected and unexpected\n+  failures.  The QMTest philosophy is that expected failures should be\n+  stored separately from the tests themselves; in particular, that\n+  tonights results can be tomorrow's expectations.  In order to\n+  preserve compatibility with DejaGNU, the first time you use QMTest\n+  to test G++, QMTest computes the set of expected failures indicated\n+  by the tests, and then compares the actual results with these\n+  results.  Therefore, if you change the expected failure notations in\n+  the DejaGNU tests, you must rebuild the set of expected failures.\n+\n+  To do this, remove the file \"qmtestsuite/gpp-expected.qmr\".  Then,\n+  when you rerun the tests, the expected failures will be\n+  automatically recalculated.\n+\n+Setting Up\n+==========\n+\n+You must download and install the following software:\n+\n+- Python 2.1 (or greater)\n+\n+  See http://www.python.org.\n+\n+  You may already have Python on your system; in particular, many\n+  GNU/Linux systems ship with Python installed.\n+\n+  Installation instructions are available on the web-site.\n+\n+- QMTest 1.1.4 (or greater)\n+\n+  See http://www.qmtest.com.\n+\n+  QMTest is available at:\n+\n+    http://www.codesourcery.com/qm/qmtest_download\n+    \n+  or:\n+\n+    ftp://ftp.codesourcery.com/pub/qmtest\n+\n+  Installation instructions are available on the web-site.\n+\n+- QMTC 1.1\n+\n+  This package is available from:\n+\n+  ftp://ftp.codesourcery.com/pub/qmtest/qmtest/qmtc/qmtc-<version>.tar.gz\n+\n+  See the file called INSTALL in the distribution.\n+\n+Running the Tests\n+=================\n+\n+To run the tests, run \"make qmtest-g++\" in the gcc directory of your\n+build tree.  The first time that you do this, QMTest will calculate\n+the set of tests that are expected to fail on your platform, so it\n+will take several minutes before you see any test results.  After the\n+first time, QMTest will start running the tests much more quickly.\n+\n+If the test summary printed at the test run indicates no unexpected\n+failures, then G++ is behaving as expected on your target.  (Some\n+unexpected passes are normal.)\n+\n+You can obtain detailed information about why tests failed in one \n+of two ways: \n+\n+1. By invoking QMTest with the \"-f full\" option.  For example:\n+\n+     make QMTESTRUNFLAGS=\"-f full\" qmtest-g++\n+\n+2. Examining the log file qmtestsuite/gpp.qmr after the tests have\n+   run.\n+\n+Here are some more advanced usage instructions:\n+\n+1. To run a particular set of tests (rather than all of the tests),\n+   use the make variable \"QMTEST_GPP_TESTS\".  For example, \n+\n+     make QMTEST_GPP_TESTS=\"gpp.dg\" qmtest-g++\n+\n+   will run only the tests in the g++.dg subdirectory, and:\n+\n+     make QMTEST_GPP_TESTS=\"gpp.dg.special.conpr1 gpp.old-deja.other.access2\"\n+          qmtest-g++\n+\n+   will run only the two tests indicated.\n+     \n+2. To run qmtest with particular flags, use the make variables\n+   \"QMTESTFLAGS\" and \"QMTESTRUNFLAGS\".  For example:\n+\n+      make QMTESTFLAGS=\"-v\" QMTESTRUNFLAGS=\"-f full\" qmtest-g++\n+\n+   will run qmtest like this:\n+\n+      qmtest -v run -f full ... \n+\n+3. To run the compiler with particular flags, use QMTESTRUNFLAGS to\n+   set the QMTest context variable \"GPPTest.flags\", like this:\n+\n+      make QMTESTRUNFLAGS='-c GPPTest.flags=\"-funroll-loops\"' qmtest-g++\n+\n+   The compiler will then use the \"-funroll-loops\" switch when\n+   compiling.\n+\n+4. If qmtest is not in your path, you can indicate the full path to\n+   QMTest by using the make variable \"QMTEST_PATH\", like this:\n+\n+      make QMTEST_PATH=/path/to/qmtest qmtest-g++\n+\n+5. To start the QMTest GUI, use:\n+\n+      make qmtest-gui\n+\n+   (Note that this will run the program called \"netscape\" in your path.\n+   If you want to use another browser, you must configure qmtest as\n+   described in its manual.)\n+\n+   Bear in mind that the QMTest GUI is insecure; malicious users with\n+   access to your machine may be able to run commands as if they were\n+   you.  The QMTest GUI only binds to the loopback IP addresss, which\n+   provides a measure of security, but not enough for use in untrusted\n+   environments.\n+\n+6. If you have a multiprocessor, you can run the tests in parallel by\n+   passing the \"-j\" option to qmtest:\n+\n+      make QMTESTRUNFLAGS=\"-j 4\" qmtest-g++\n+\n+   will run tests in four threads.  (It is also possible to run tests\n+   across multiple machines; for more information see the QMTest\n+   manual.)\n+\n+7. If you are testing a cross compiler, you must specify an interpreter\n+   that is capable of running the generated program.  It must be a \n+   program \"p\" such that:\n+\n+      p program arg1 arg2 arg3 ...\n+\n+   behaves exactly like running:\n+\n+      program arg1 arg2 arg3 ...\n+\n+   would on the target machine.  You specify this program via the \n+   \"CompilerTest.interpreter\" context variable:\n+\n+      make QMTESTRUNFLAGS='-c CompilerTest.interpreter=/path/to/interpreter'\n+           qmtest-g++\n+\n+"}]}