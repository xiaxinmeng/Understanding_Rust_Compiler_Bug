{"sha": "6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJlMTRjMGViYzRiYTBjNDNhNzhhNTQyNTRjODllMDdjYjJjZmM0OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-09-16T09:38:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-09-16T09:38:13Z"}, "message": "tree.c (tree_node_structure_for_code): TRANSLATION_UNIT_DECL is TS_TRANSLATION_UNIT_DECL.\n\n2010-09-16  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.c (tree_node_structure_for_code): TRANSLATION_UNIT_DECL\n\tis TS_TRANSLATION_UNIT_DECL.\n\t(initialize_tree_contains_struct): Adjust.\n\t(all_translation_units): New global vector.\n\t(build_translation_unit_decl): New function.\n\t* tree.h (TRANSLATION_UNIT_LANGUAGE): New macro.\n\t(struct tree_translation_unit_decl): New.\n\t(all_translation_units): Declare.\n\t(union tree_node): Add translation_unit_decl member.\n\t(build_translation_unit_decl): Declare.\n\t* treestruct.def (TS_TRANSLATION_UNIT_DECL): New.\n\t* lto-streamer-out.c (pack_ts_translation_unit_decl_value_fields):\n\tNew function.\n\t(pack_value_fields): Call it.\n\t(lto_output_tree_ref): Handle references to TRANSLATION_UNIT_DECL.\n\t(lto_output_ts_translation_unit_decl_tree_pointers): New function.\n\t(lto_output_tree_pointers): Call it.\n\t* lto-streamer-in.c (lto_input_tree_ref): Handle references\n\tto TRANSLATION_UNIT_DECL.\n\t(unpack_ts_translation_unit_decl_value_fields): New function.\n\t(unpack_value_fields): Call it.\n\t(lto_input_ts_translation_unit_decl_tree_pointers): New function.\n\t(lto_input_tree_pointers): Call it.\n\t* lto-streamer.c (check_handled_ts_structures): Adjust.\n\t* lto-streamer.h (enum LTO_tags): Add LTO_translation_unit_decl_ref.\n\t* c-decl.c (all_translation_units): Remove.\n\t(pop_scope): Use build_translation_unit_decl.\n\t(collect_all_refs): Adjust.\n\t(for_each_global_decl): Likewise.\n\t(c_write_global_declarations): Likewise.\n\n\tjava/\n\t* jcf-parse.c (current_file_list): Remove.\n\t(java_parse_file): Use build_translation_unit_decl.  Adjust.\n\nFrom-SVN: r164331", "tree": {"sha": "db74c86f639c1dd58991243eee16d61445974c50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db74c86f639c1dd58991243eee16d61445974c50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c3dbcf05753a1e3d817b77db96e87eab72c91f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3dbcf05753a1e3d817b77db96e87eab72c91f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3dbcf05753a1e3d817b77db96e87eab72c91f6"}], "stats": {"total": 175, "additions": 149, "deletions": 26}, "files": [{"sha": "77010f506e18ca5902a22539c0ab7998266ac0ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "patch": "@@ -1,3 +1,36 @@\n+2010-09-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.c (tree_node_structure_for_code): TRANSLATION_UNIT_DECL\n+\tis TS_TRANSLATION_UNIT_DECL.\n+\t(initialize_tree_contains_struct): Adjust.\n+\t(all_translation_units): New global vector.\n+\t(build_translation_unit_decl): New function.\n+\t* tree.h (TRANSLATION_UNIT_LANGUAGE): New macro.\n+\t(struct tree_translation_unit_decl): New.\n+\t(all_translation_units): Declare.\n+\t(union tree_node): Add translation_unit_decl member.\n+\t(build_translation_unit_decl): Declare.\n+\t* treestruct.def (TS_TRANSLATION_UNIT_DECL): New.\n+\t* lto-streamer-out.c (pack_ts_translation_unit_decl_value_fields):\n+\tNew function.\n+\t(pack_value_fields): Call it.\n+\t(lto_output_tree_ref): Handle references to TRANSLATION_UNIT_DECL.\n+\t(lto_output_ts_translation_unit_decl_tree_pointers): New function.\n+\t(lto_output_tree_pointers): Call it.\n+\t* lto-streamer-in.c (lto_input_tree_ref): Handle references\n+\tto TRANSLATION_UNIT_DECL.\n+\t(unpack_ts_translation_unit_decl_value_fields): New function.\n+\t(unpack_value_fields): Call it.\n+\t(lto_input_ts_translation_unit_decl_tree_pointers): New function.\n+\t(lto_input_tree_pointers): Call it.\n+\t* lto-streamer.c (check_handled_ts_structures): Adjust.\n+\t* lto-streamer.h (enum LTO_tags): Add LTO_translation_unit_decl_ref.\n+\t* c-decl.c (all_translation_units): Remove.\n+\t(pop_scope): Use build_translation_unit_decl.\n+\t(collect_all_refs): Adjust.\n+\t(for_each_global_decl): Likewise.\n+\t(c_write_global_declarations): Likewise.\n+\n 2010-09-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/45686"}, {"sha": "6c65b27e0043b23ed21a961282ebf33d7cfea8c7", "filename": "gcc/c-decl.c", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "patch": "@@ -118,12 +118,6 @@ static GTY(()) struct stmt_tree_s c_stmt_tree;\n tree c_break_label;\n tree c_cont_label;\n \n-/* Linked list of TRANSLATION_UNIT_DECLS for the translation units\n-   included in this invocation.  Note that the current translation\n-   unit is not included in this list.  */\n-\n-static GTY(()) tree all_translation_units;\n-\n /* A list of decls to be made automatically visible in each file scope.  */\n static GTY(()) tree visible_builtins;\n \n@@ -1072,10 +1066,7 @@ pop_scope (void)\n     context = current_function_decl;\n   else if (scope == file_scope)\n     {\n-      tree file_decl = build_decl (UNKNOWN_LOCATION,\n-\t  \t\t\t   TRANSLATION_UNIT_DECL, 0, 0);\n-      DECL_CHAIN (file_decl) = all_translation_units;\n-      all_translation_units = file_decl;\n+      tree file_decl = build_translation_unit_decl (NULL_TREE);\n       context = file_decl;\n     }\n   else\n@@ -9664,8 +9655,9 @@ static void\n collect_all_refs (const char *source_file)\n {\n   tree t;\n+  unsigned i;\n \n-  for (t = all_translation_units; t; t = TREE_CHAIN (t))\n+  FOR_EACH_VEC_ELT (tree, all_translation_units, i, t)\n     collect_ada_nodes (BLOCK_VARS (DECL_INITIAL (t)), source_file);\n }\n \n@@ -9677,8 +9669,9 @@ for_each_global_decl (void (*callback) (tree decl))\n   tree t;\n   tree decls;\n   tree decl;\n+  unsigned i;\n \n-  for (t = all_translation_units; t; t = TREE_CHAIN (t))\n+  FOR_EACH_VEC_ELT (tree, all_translation_units, i, t)\n     { \n       decls = DECL_INITIAL (t);\n       for (decl = BLOCK_VARS (decls); decl; decl = TREE_CHAIN (decl))\n@@ -9693,6 +9686,7 @@ void\n c_write_global_declarations (void)\n {\n   tree t;\n+  unsigned i;\n \n   /* We don't want to do this if generating a PCH.  */\n   if (pch_file)\n@@ -9729,7 +9723,7 @@ c_write_global_declarations (void)\n \n   /* Process all file scopes in this compilation, and the external_scope,\n      through wrapup_global_declarations and check_global_declarations.  */\n-  for (t = all_translation_units; t; t = DECL_CHAIN (t))\n+  FOR_EACH_VEC_ELT (tree, all_translation_units, i, t)\n     c_write_global_declarations_1 (BLOCK_VARS (DECL_INITIAL (t)));\n   c_write_global_declarations_1 (BLOCK_VARS (ext_block));\n \n@@ -9742,7 +9736,7 @@ c_write_global_declarations (void)\n   if (!seen_error ())\n     {\n       timevar_push (TV_SYMOUT);\n-      for (t = all_translation_units; t; t = DECL_CHAIN (t))\n+      FOR_EACH_VEC_ELT (tree, all_translation_units, i, t)\n \tc_write_global_declarations_2 (BLOCK_VARS (DECL_INITIAL (t)));\n       c_write_global_declarations_2 (BLOCK_VARS (ext_block));\n       timevar_pop (TV_SYMOUT);"}, {"sha": "4685dd4b4f29deb3d7b0dda01b041f23520ed03a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "patch": "@@ -1,3 +1,8 @@\n+2010-09-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* jcf-parse.c (current_file_list): Remove.\n+\t(java_parse_file): Use build_translation_unit_decl.  Adjust.\n+\n 2010-09-03  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lang.opt (d): New."}, {"sha": "908ed63e2052c2da1e5ffe2b351279372d34dc2d", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "patch": "@@ -80,9 +80,6 @@ static GTY(()) tree parse_roots[2];\n /* The METHOD_DECL for the current method.  */\n #define current_method parse_roots[1]\n \n-/* A list of TRANSLATION_UNIT_DECLs for the files to be compiled.  */\n-static GTY(()) VEC(tree,gc) *current_file_list;\n-\n /* Line 0 in current file, if compiling from bytecode. */\n static location_t file_start_location;\n \n@@ -1840,9 +1837,7 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \t    duplicate_class_warning (IDENTIFIER_POINTER (node));\n \t  else\n \t    {\n-\t      tree file_decl = build_decl (input_location,\n-\t\t\t\t\t   TRANSLATION_UNIT_DECL, node, NULL);\n-\t      VEC_safe_push (tree, gc, current_file_list, file_decl);\n+\t      build_translation_unit_decl (node);\n \t      IS_A_COMMAND_LINE_FILENAME_P (node) = 1;\n \t    }\n \t}\n@@ -1860,16 +1855,18 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n       const char *resource_filename;\n       \n       /* Only one resource file may be compiled at a time.  */\n-      assert (VEC_length (tree, current_file_list) == 1);\n+      assert (VEC_length (tree, all_translation_units) == 1);\n \n-      resource_filename = IDENTIFIER_POINTER (DECL_NAME (VEC_index (tree, current_file_list, 0)));\n+      resource_filename\n+\t= IDENTIFIER_POINTER\n+\t    (DECL_NAME (VEC_index (tree, all_translation_units, 0)));\n       compile_resource_file (resource_name, resource_filename);\n \n       goto finish;\n     }\n \n   current_jcf = main_jcf;\n-  FOR_EACH_VEC_ELT (tree, current_file_list, ix, node)\n+  FOR_EACH_VEC_ELT (tree, all_translation_units, ix, node)\n     {\n       unsigned char magic_string[4];\n       char *real_path;\n@@ -1956,7 +1953,7 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \t}\n     }\n \n-  FOR_EACH_VEC_ELT (tree, current_file_list, ix, node)\n+  FOR_EACH_VEC_ELT (tree, all_translation_units, ix, node)\n     {\n       input_location = DECL_SOURCE_LOCATION (node);\n       if (CLASS_FILE_P (node))"}, {"sha": "83315e86d1bdbd6aa3ddedcfd012f6332635558b", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "patch": "@@ -355,6 +355,7 @@ lto_input_tree_ref (struct lto_input_block *ib, struct data_in *data_in,\n     case LTO_const_decl_ref:\n     case LTO_imported_decl_ref:\n     case LTO_label_decl_ref:\n+    case LTO_translation_unit_decl_ref:\n       ix_u = lto_input_uleb128 (ib);\n       result = lto_file_decl_data_get_var_decl (data_in->file_data, ix_u);\n       break;\n@@ -1683,6 +1684,13 @@ unpack_ts_block_value_fields (struct bitpack_d *bp, tree expr)\n   BLOCK_NUMBER (expr) = (unsigned) bp_unpack_value (bp, 31);\n }\n \n+/* Unpack all the non-pointer fields of the TS_TRANSLATION_UNIT_DECL\n+   structure of expression EXPR from bitpack BP.  */\n+\n+static void\n+unpack_ts_translation_unit_decl_value_fields (struct bitpack_d *bp ATTRIBUTE_UNUSED, tree expr ATTRIBUTE_UNUSED)\n+{\n+}\n \n /* Unpack all the non-pointer fields in EXPR into a bit pack.  */\n \n@@ -1738,6 +1746,9 @@ unpack_value_fields (struct bitpack_d *bp, tree expr)\n       /* This is only used by High GIMPLE.  */\n       gcc_unreachable ();\n     }\n+\n+  if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n+    unpack_ts_translation_unit_decl_value_fields (bp, expr);\n }\n \n \n@@ -2223,6 +2234,17 @@ lto_input_ts_target_option (struct lto_input_block *ib, tree expr)\n     fatal_error (\"cl_target_option size mismatch in LTO reader and writer\");\n }\n \n+/* Input a TS_TRANSLATION_UNIT_DECL tree from IB and DATA_IN into EXPR.  */\n+\n+static void\n+lto_input_ts_translation_unit_decl_tree_pointers (struct lto_input_block *ib,\n+\t\t\t\t\t\t  struct data_in *data_in,\n+\t\t\t\t\t\t  tree expr)\n+{\n+  TRANSLATION_UNIT_LANGUAGE (expr) = input_string (data_in, ib);\n+  VEC_safe_push (tree, gc, all_translation_units, expr);\n+}\n+\n /* Helper for lto_input_tree.  Read all pointer fields in EXPR from\n    input block IB.  DATA_IN contains tables and descriptors for the\n    file being read.  */\n@@ -2308,6 +2330,9 @@ lto_input_tree_pointers (struct lto_input_block *ib, struct data_in *data_in,\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n     lto_input_ts_target_option (ib, expr);\n+\n+  if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n+    lto_input_ts_translation_unit_decl_tree_pointers (ib, data_in, expr);\n }\n \n "}, {"sha": "addf2c05ad88ef303efee02be967badbb3fc73cd", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "patch": "@@ -533,6 +533,13 @@ pack_ts_block_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, BLOCK_NUMBER (expr), 31);\n }\n \n+/* Pack all the non-pointer fields of the TS_TRANSLATION_UNIT_DECL structure\n+   of expression EXPR into bitpack BP.  */\n+\n+static void\n+pack_ts_translation_unit_decl_value_fields (struct bitpack_d *bp ATTRIBUTE_UNUSED, tree expr ATTRIBUTE_UNUSED)\n+{\n+}\n \n /* Pack all the non-pointer fields in EXPR into a bit pack.  */\n \n@@ -588,6 +595,9 @@ pack_value_fields (struct bitpack_d *bp, tree expr)\n       /* This is only used by High GIMPLE.  */\n       gcc_unreachable ();\n     }\n+\n+  if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n+    pack_ts_translation_unit_decl_value_fields (bp, expr);\n }\n \n \n@@ -721,6 +731,11 @@ lto_output_tree_ref (struct output_block *ob, tree expr)\n       lto_output_var_decl_index (ob->decl_state, ob->main_stream, expr);\n       break;\n \n+    case TRANSLATION_UNIT_DECL:\n+      output_record_start (ob, LTO_translation_unit_decl_ref);\n+      lto_output_var_decl_index (ob->decl_state, ob->main_stream, expr);\n+      break;\n+\n     default:\n       /* No other node is indexable, so it should have been handled\n \t by lto_output_tree.  */\n@@ -1127,6 +1142,15 @@ lto_output_ts_target_option (struct output_block *ob, tree expr)\n   lto_output_bitpack (&bp);\n }\n \n+/* Write a TS_TRANSLATION_UNIT_DECL tree in EXPR to OB.  */\n+\n+static void\n+lto_output_ts_translation_unit_decl_tree_pointers (struct output_block *ob,\n+\t\t\t\t\t\t   tree expr)\n+{\n+  output_string (ob, ob->main_stream, TRANSLATION_UNIT_LANGUAGE (expr));\n+}\n+\n /* Helper for lto_output_tree.  Write all pointer fields in EXPR to output\n    block OB.  If REF_P is true, the leaves of EXPR are emitted as\n    references.  */\n@@ -1209,6 +1233,9 @@ lto_output_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n     lto_output_ts_target_option (ob, expr);\n+\n+  if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n+    lto_output_ts_translation_unit_decl_tree_pointers (ob, expr);\n }\n \n "}, {"sha": "dba9d2d5dd7cbd3cc9789d157c1a36f403f738c2", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "patch": "@@ -303,6 +303,7 @@ check_handled_ts_structures (void)\n   handled_p[TS_OMP_CLAUSE] = true;\n   handled_p[TS_OPTIMIZATION] = true;\n   handled_p[TS_TARGET_OPTION] = true;\n+  handled_p[TS_TRANSLATION_UNIT_DECL] = true;\n \n   /* Anything not marked above will trigger the following assertion.\n      If this assertion triggers, it means that there is a new TS_*"}, {"sha": "e082ffe1a0b3eddb655726252a9d5f9840bd017e", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "patch": "@@ -235,6 +235,7 @@ enum LTO_tags\n   LTO_type_ref,\n   LTO_const_decl_ref,\n   LTO_imported_decl_ref,\n+  LTO_translation_unit_decl_ref,\n   LTO_global_decl_ref,\t\t\t/* Do not change.  */\n \n   /* This tag must always be last.  */"}, {"sha": "7746628375dc18c77a48efdf1366ab022148f4a3", "filename": "gcc/tree.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "patch": "@@ -294,6 +294,8 @@ tree_node_structure_for_code (enum tree_code code)\n \t    return TS_TYPE_DECL;\n \t  case FUNCTION_DECL:\n \t    return TS_FUNCTION_DECL;\n+\t  case TRANSLATION_UNIT_DECL:\n+\t    return TS_TRANSLATION_UNIT_DECL;\n \t  default:\n \t    return TS_DECL_NON_COMMON;\n \t  }\n@@ -464,14 +466,17 @@ initialize_tree_contains_struct (void)\n \t  MARK_TS_DECL_NON_COMMON (code);\n \t  break;\n \n+\tcase TS_TRANSLATION_UNIT_DECL:\n+\t  MARK_TS_DECL_COMMON (code);\n+\t  break;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n     }\n \n   /* Basic consistency checks for attributes used in fold.  */\n   gcc_assert (tree_contains_struct[FUNCTION_DECL][TS_DECL_NON_COMMON]);\n-  gcc_assert (tree_contains_struct[TRANSLATION_UNIT_DECL][TS_DECL_NON_COMMON]);\n   gcc_assert (tree_contains_struct[TYPE_DECL][TS_DECL_NON_COMMON]);\n   gcc_assert (tree_contains_struct[CONST_DECL][TS_DECL_COMMON]);\n   gcc_assert (tree_contains_struct[VAR_DECL][TS_DECL_COMMON]);\n@@ -500,7 +505,6 @@ initialize_tree_contains_struct (void)\n   gcc_assert (tree_contains_struct[VAR_DECL][TS_DECL_WITH_VIS]);\n   gcc_assert (tree_contains_struct[FUNCTION_DECL][TS_DECL_WITH_VIS]);\n   gcc_assert (tree_contains_struct[TYPE_DECL][TS_DECL_WITH_VIS]);\n-  gcc_assert (tree_contains_struct[TRANSLATION_UNIT_DECL][TS_DECL_WITH_VIS]);\n   gcc_assert (tree_contains_struct[VAR_DECL][TS_VAR_DECL]);\n   gcc_assert (tree_contains_struct[FIELD_DECL][TS_FIELD_DECL]);\n   gcc_assert (tree_contains_struct[PARM_DECL][TS_PARM_DECL]);\n@@ -4034,6 +4038,21 @@ build_fn_decl (const char *name, tree type)\n   return decl;\n }\n \n+VEC(tree,gc) *all_translation_units;\n+\n+/* Builds a new translation-unit decl with name NAME, queues it in the\n+   global list of translation-unit decls and returns it.   */\n+\n+tree\n+build_translation_unit_decl (tree name)\n+{\n+  tree tu = build_decl (UNKNOWN_LOCATION, TRANSLATION_UNIT_DECL,\n+\t\t\tname, NULL_TREE);\n+  TRANSLATION_UNIT_LANGUAGE (tu) = lang_hooks.name;\n+  VEC_safe_push (tree, gc, all_translation_units, tu);\n+  return tu;\n+}\n+\n \f\n /* BLOCK nodes are used to represent the structure of binding contours\n    and declarations, once those contours have been exited and their contents"}, {"sha": "1ff9d35effa2f4bed95581a1fc3bb46191e7b88e", "filename": "gcc/tree.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "patch": "@@ -3385,6 +3385,23 @@ struct GTY(()) tree_function_decl {\n   /* 3 bits left */\n };\n \n+/* The source language of the translation-unit.  */\n+#define TRANSLATION_UNIT_LANGUAGE(NODE) \\\n+  (TRANSLATION_UNIT_DECL_CHECK (NODE)->translation_unit_decl.language)\n+\n+/* TRANSLATION_UNIT_DECL inherits from DECL_MINIMAL.  */\n+\n+struct GTY(()) tree_translation_unit_decl {\n+  struct tree_decl_common common;\n+  /* Source language of this translation unit.  Used for DWARF output.  */\n+  const char * GTY((skip(\"\"))) language;\n+  /* TODO: Non-optimization used to build this translation unit.  */\n+  /* TODO: Root of a partial DWARF tree for global types and decls.  */\n+};\n+\n+/* A vector of all translation-units.  */\n+extern GTY (()) VEC(tree,gc) *all_translation_units;\n+\n /* For a TYPE_DECL, holds the \"original\" type.  (TREE_TYPE has the copy.) */\n #define DECL_ORIGINAL_TYPE(NODE) \\\n   (TYPE_DECL_CHECK (NODE)->decl_non_common.result)\n@@ -3490,6 +3507,8 @@ union GTY ((ptr_alias (union lang_tree_node),\n   struct tree_const_decl GTY ((tag (\"TS_CONST_DECL\"))) const_decl;\n   struct tree_type_decl GTY ((tag (\"TS_TYPE_DECL\"))) type_decl;\n   struct tree_function_decl GTY ((tag (\"TS_FUNCTION_DECL\"))) function_decl;\n+  struct tree_translation_unit_decl GTY ((tag (\"TS_TRANSLATION_UNIT_DECL\")))\n+    translation_unit_decl;\n   struct tree_type GTY ((tag (\"TS_TYPE\"))) type;\n   struct tree_list GTY ((tag (\"TS_LIST\"))) list;\n   struct tree_vec GTY ((tag (\"TS_VEC\"))) vec;\n@@ -4048,6 +4067,7 @@ extern tree build_decl_stat (location_t, enum tree_code,\n \t\t\t     tree, tree MEM_STAT_DECL);\n extern tree build_fn_decl (const char *, tree);\n #define build_decl(l,c,t,q) build_decl_stat (l,c,t,q MEM_STAT_INFO)\n+extern tree build_translation_unit_decl (tree);\n extern tree build_block (tree, tree, tree, tree);\n extern tree build_empty_stmt (location_t);\n extern tree build_omp_clause (location_t, enum omp_clause_code);"}, {"sha": "89f36f2ab13dbc02cd2f774f2b5486b7d5cebcd3", "filename": "gcc/treestruct.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Ftreestruct.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48/gcc%2Ftreestruct.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreestruct.def?ref=6be14c0ebc4ba0c43a78a54254c89e07cb2cfc48", "patch": "@@ -52,6 +52,7 @@ DEFTREESTRUCT(TS_RESULT_DECL, \"result decl\")\n DEFTREESTRUCT(TS_CONST_DECL, \"const decl\")\n DEFTREESTRUCT(TS_TYPE_DECL, \"label decl\")\n DEFTREESTRUCT(TS_FUNCTION_DECL, \"function decl\")\n+DEFTREESTRUCT(TS_TRANSLATION_UNIT_DECL, \"translation-unit decl\")\n DEFTREESTRUCT(TS_TYPE, \"type\")\n DEFTREESTRUCT(TS_LIST, \"list\")\n DEFTREESTRUCT(TS_VEC, \"vec\")"}]}