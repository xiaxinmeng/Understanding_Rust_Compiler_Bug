{"sha": "828573a573553e9c38f0431f0998de8c905f8460", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI4NTczYTU3MzU1M2U5YzM4ZjA0MzFmMDk5OGRlOGM5MDVmODQ2MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-01-31T15:44:36Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-01-31T15:44:36Z"}, "message": "Fix TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL handling.\n\nThe reason for TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL on AMD target is\nonly insn size, as advised in e.g. Software Optimization Guide for the\nAMD Family 15h Processors [1], section 7.1.2, where it is said:\n\n--quote--\n7.1.2 Reduce Instruction SizeOptimization\n\nReduce the size of instructions when possible.\n\nRationale\n\nUsing smaller instruction sizes improves instruction fetch throughput.\nSpecific examples include the following:\n\n*In SIMD code, use the single-precision (PS) form of instructions\ninstead of the double-precision (PD) form. For example, for register\nto register moves, MOVAPS achieves the same result as MOVAPD, but uses\none less byte to encode the instruction and has no prefix byte. Other\nexamples in which single-precision forms can be substituted for\ndouble-precision forms include MOVUPS, MOVNTPS, XORPS, ORPS, ANDPS,\nand SHUFPS.\n...\n--/quote--\n\nPlease note that this optimization applies only to non-AVX forms, as\ndemonstrated by:\n\n   0:   0f 28 c8                movaps %xmm0,%xmm1\n   3:   66 0f 28 c8             movapd %xmm0,%xmm1\n   7:   c5 f8 28 d1             vmovaps %xmm1,%xmm2\n   b:   c5 f9 28 d1             vmovapd %xmm1,%xmm2\n\nAlso note that MOVDQA is missing in the above optimization. It is\nharmful to substitute MOVDQA with MOVAPS, as it can (and does)\nintroduce +1 cycle forwarding penalty between FLT (FPA/FPM) and INT\n(VALU) FP clusters.\n\n[1] https://www.amd.com/system/files/TechDocs/47414_15h_sw_opt_guide.pdf", "tree": {"sha": "64b4d20457a326946aa3b582e5c6ba96fc85683c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64b4d20457a326946aa3b582e5c6ba96fc85683c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/828573a573553e9c38f0431f0998de8c905f8460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828573a573553e9c38f0431f0998de8c905f8460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828573a573553e9c38f0431f0998de8c905f8460", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828573a573553e9c38f0431f0998de8c905f8460/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a28e2727f718f14a2afccf16c4dda814af5b6f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a28e2727f718f14a2afccf16c4dda814af5b6f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a28e2727f718f14a2afccf16c4dda814af5b6f8"}], "stats": {"total": 196, "additions": 98, "deletions": 98}, "files": [{"sha": "0e99b72043762dfdfcce25a711c8344d7b521c04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828573a573553e9c38f0431f0998de8c905f8460/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828573a573553e9c38f0431f0998de8c905f8460/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=828573a573553e9c38f0431f0998de8c905f8460", "patch": "@@ -1,3 +1,32 @@\n+2020-01-31  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movoi_internal_avx): Do not check for\n+\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL.  Remove MODE_V8SF handling.\n+\t(*movti_internal): Do not check for\n+\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL.\n+\t(*movtf_internal): Move check for TARGET_SSE2 and size optimization\n+\tjust after check for TARGET_AVX.\n+\t(*movdf_internal): Ditto.\n+\t* config/i386/mmx.md (*mov<mode>_internal): Do not check for\n+\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL.\n+\t* config/i386/sse.md (mov<mode>_internal): Only check\n+\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL with V2DFmode.  Move check\n+\tfor TARGET_SSE2 and size optimization just after check for TARGET_AVX.\n+\t(<sse>_andnot<mode>3<mask_name>): Move check for\n+\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL after check for TARGET_AVX.\n+\t(<code><mode>3<mask_name>): Ditto.\n+\t(*andnot<mode>3): Ditto.\n+\t(*andnottf3): Ditto.\n+\t(*<code><mode>3): Ditto.\n+\t(*<code>tf3): Ditto.\n+\t(*andnot<VI:mode>3): Remove\n+\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL handling.\n+\t(<mask_codefor><code><VI48_AVX_AVX512F:mode>3<mask_name>): Ditto.\n+\t(*<code><VI12_AVX_AVX512F:mode>3): Ditto.\n+\t(sse4_1_blendv<ssemodesuffix>): Ditto.\n+\t* config/i386/x86-tune.def (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL):\n+\tExplain that tune applies to 128bit instructions only.\n+\n 2020-01-31  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* config/gcn/mkoffload.c (process_asm): Add sgpr_count and vgpr_count"}, {"sha": "46b442dae51c66bc956ce5125c0e8143a48a524d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 26, "deletions": 39, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828573a573553e9c38f0431f0998de8c905f8460/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828573a573553e9c38f0431f0998de8c905f8460/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=828573a573553e9c38f0431f0998de8c905f8460", "patch": "@@ -1949,18 +1949,14 @@\n       if (misaligned_operand (operands[0], OImode)\n \t  || misaligned_operand (operands[1], OImode))\n \t{\n-\t  if (get_attr_mode (insn) == MODE_V8SF)\n-\t    return \"vmovups\\t{%1, %0|%0, %1}\";\n-\t  else if (get_attr_mode (insn) == MODE_XI)\n+\t  if (get_attr_mode (insn) == MODE_XI)\n \t    return \"vmovdqu32\\t{%1, %0|%0, %1}\";\n \t  else\n \t    return \"vmovdqu\\t{%1, %0|%0, %1}\";\n \t}\n       else\n \t{\n-\t  if (get_attr_mode (insn) == MODE_V8SF)\n-\t    return \"vmovaps\\t{%1, %0|%0, %1}\";\n-\t  else if (get_attr_mode (insn) == MODE_XI)\n+\t  if (get_attr_mode (insn) == MODE_XI)\n \t    return \"vmovdqa32\\t{%1, %0|%0, %1}\";\n \t  else\n \t    return \"vmovdqa\\t{%1, %0|%0, %1}\";\n@@ -1980,8 +1976,6 @@\n \t       (and (eq_attr \"alternative\" \"1\")\n \t\t    (match_test \"TARGET_AVX512VL\"))\n \t\t (const_string \"XI\")\n-\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t (const_string \"V8SF\")\n \t      ]\n \t      (const_string \"OI\")))])\n \n@@ -2060,11 +2054,10 @@\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"TI\")\n \t       (ior (not (match_test \"TARGET_SSE2\"))\n-\t\t    (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t\t (and (eq_attr \"alternative\" \"5\")\n-\t\t\t      (match_test \"TARGET_SSE_TYPELESS_STORES\"))))\n+\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t (const_string \"V4SF\")\n-\t       (match_test \"optimize_function_for_size_p (cfun)\")\n+\t       (and (eq_attr \"alternative\" \"5\")\n+\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n \t\t (const_string \"V4SF\")\n \t       ]\n \t       (const_string \"TI\")))\n@@ -2243,12 +2236,10 @@\n \t      (cond [(ior (match_operand 0 \"ext_sse_reg_operand\")\n \t\t\t  (match_operand 1 \"ext_sse_reg_operand\"))\n \t\t       (const_string \"TI\")\n-\t\t     (ior (not (match_test \"TARGET_SSE2\"))\n-\t\t\t  (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n-\t\t       (const_string \"V4SF\")\n \t\t     (match_test \"TARGET_AVX\")\n \t\t       (const_string \"TI\")\n-\t\t     (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t     (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t\t  (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t       (const_string \"V4SF\")\n \t\t    ]\n \t\t    (const_string \"TI\"))\n@@ -2453,12 +2444,10 @@\n \t      (cond [(ior (match_operand 0 \"ext_sse_reg_operand\")\n \t\t\t  (match_operand 1 \"ext_sse_reg_operand\"))\n \t\t       (const_string \"XI\")\n-\t\t     (ior (not (match_test \"TARGET_SSE2\"))\n-\t\t\t  (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n-\t\t       (const_string \"V4SF\")\n \t\t     (match_test \"TARGET_AVX\")\n \t\t       (const_string \"TI\")\n-\t\t     (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t     (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t\t  (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t       (const_string \"V4SF\")\n \t\t    ]\n \t\t    (const_string \"TI\"))\n@@ -3324,14 +3313,14 @@\n \t\t (const_string \"DI\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"TI\")\n+\t       (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t (const_string \"V4SF\")\n \t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t (const_string \"V4SF\")\n \t       (and (eq_attr \"alternative\" \"2\")\n \t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n \t\t (const_string \"V4SF\")\n-\t       (ior (not (match_test \"TARGET_SSE2\"))\n-\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n-\t\t (const_string \"V4SF\")\n \t       ]\n \t       (const_string \"TI\")))])\n \n@@ -3541,14 +3530,13 @@\n \n \t       /* xorps is one byte shorter for non-AVX targets.  */\n \t       (eq_attr \"alternative\" \"12,16\")\n-\t\t (cond [(not (match_test \"TARGET_SSE2\"))\n-\t\t \t  (const_string \"V4SF\")\n-\t\t\t(and (match_test \"TARGET_AVX512F\")\n-\t\t\t  (not (match_test \"TARGET_PREFER_AVX256\")))\n+\t\t (cond [(and (match_test \"TARGET_AVX512F\")\n+\t\t\t     (not (match_test \"TARGET_PREFER_AVX256\")))\n \t\t\t  (const_string \"XI\")\n \t\t\t(match_test \"TARGET_AVX\")\n \t\t\t  (const_string \"V2DF\")\n-\t\t\t(match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t\t(ior (not (match_test \"TARGET_SSE2\"))\n+\t\t\t     (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t\t  (const_string \"V4SF\")\n \t\t\t(match_test \"TARGET_SSE_LOAD0_BY_PXOR\")\n \t\t\t  (const_string \"TI\")\n@@ -3566,15 +3554,15 @@\n \t\t\t     (ior (match_operand 0 \"ext_sse_reg_operand\")\n \t\t\t\t  (match_operand 1 \"ext_sse_reg_operand\")))\n \t\t\t  (const_string \"V8DF\")\n+\t\t\t(match_test \"TARGET_AVX\")\n+\t\t\t  (const_string \"DF\")\n \t\t\t(ior (not (match_test \"TARGET_SSE2\"))\n-\t\t\t     (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n+\t\t\t     (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t\t  (const_string \"V4SF\")\n+\t\t\t(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t\t  (const_string \"V4SF\")\n \t\t\t(match_test \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n \t\t\t  (const_string \"V2DF\")\n-\t\t\t(match_test \"TARGET_AVX\")\n-\t\t\t  (const_string \"DF\")\n-\t\t\t(match_test \"optimize_function_for_size_p (cfun)\")\n-\t\t\t  (const_string \"V4SF\")\n \t\t       ]\n \t\t       (const_string \"DF\"))\n \n@@ -3723,16 +3711,15 @@\n \t       (eq_attr \"alternative\" \"11\")\n \t\t (const_string \"DI\")\n \t       (eq_attr \"alternative\" \"5\")\n-\t\t (cond [(not (match_test \"TARGET_SSE2\"))\n- \t\t \t  (const_string \"V4SF\")\n-\t\t\t(and (match_test \"TARGET_AVX512F\")\n-\t\t\t  (not (match_test \"TARGET_PREFER_AVX256\")))\n+\t\t (cond [(and (match_test \"TARGET_AVX512F\")\n+\t\t\t     (not (match_test \"TARGET_PREFER_AVX256\")))\n \t\t\t  (const_string \"V16SF\")\n \t\t\t(match_test \"TARGET_AVX\")\n \t\t\t  (const_string \"V4SF\")\n- \t\t\t(match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t\t(ior (not (match_test \"TARGET_SSE2\"))\n+\t\t\t     (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t\t  (const_string \"V4SF\")\n- \t\t\t(match_test \"TARGET_SSE_LOAD0_BY_PXOR\")\n+\t\t\t(match_test \"TARGET_SSE_LOAD0_BY_PXOR\")\n \t\t\t  (const_string \"TI\")\n \t\t       ]\n \t\t       (const_string \"V4SF\"))"}, {"sha": "f695831b5b90d012ad6efa922a80cf00c2c4ab05", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828573a573553e9c38f0431f0998de8c905f8460/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828573a573553e9c38f0431f0998de8c905f8460/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=828573a573553e9c38f0431f0998de8c905f8460", "patch": "@@ -195,11 +195,7 @@\n \t\t     (match_test \"<MODE>mode == V2SFmode\")\n \t\t       (const_string \"V4SF\")\n \t\t     (ior (not (match_test \"TARGET_SSE2\"))\n-\t\t\t  (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n-\t\t       (const_string \"V4SF\")\n-\t\t     (match_test \"TARGET_AVX\")\n-\t\t       (const_string \"TI\")\n-\t\t     (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t\t  (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t       (const_string \"V4SF\")\n \t\t    ]\n \t\t    (const_string \"TI\"))"}, {"sha": "46f00e3d007996373ae3783ef8a5d6b865da87bc", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 38, "deletions": 50, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828573a573553e9c38f0431f0998de8c905f8460/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828573a573553e9c38f0431f0998de8c905f8460/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=828573a573553e9c38f0431f0998de8c905f8460", "patch": "@@ -1118,13 +1118,15 @@\n \t\t (const_string \"<sseinsnmode>\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"<sseinsnmode>\")\n-\t       (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t    (and (eq_attr \"alternative\" \"3\")\n-\t\t\t (match_test \"TARGET_SSE_TYPELESS_STORES\")))\n-\t\t (const_string \"<ssePSmode>\")\n \t       (ior (not (match_test \"TARGET_SSE2\"))\n \t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t (const_string \"V4SF\")\n+\t       (and (match_test \"<MODE>mode == V2DFmode\")\n+\t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n+\t\t (const_string \"V4SF\")\n+\t       (and (eq_attr \"alternative\" \"3\")\n+\t\t    (match_test \"TARGET_SSE_TYPELESS_STORES\"))\n+\t\t (const_string \"V4SF\")\n \t       (and (eq_attr \"alternative\" \"0\")\n \t\t    (match_test \"TARGET_SSE_LOAD0_BY_PXOR\"))\n \t\t (const_string \"TI\")\n@@ -3555,16 +3557,14 @@\n \t\t (const_string \"<sseintvecmode2>\")\n \t       (eq_attr \"alternative\" \"3\")\n \t\t (const_string \"<sseintvecmode2>\")\n-\t       (and (match_test \"<MODE_SIZE> == 16\")\n-\t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n-\t\t (const_string \"<ssePSmode>\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"<MODE>\")\n \t       (match_test \"optimize_function_for_size_p (cfun)\")\n \t\t (const_string \"V4SF\")\n-\t       ]\n-\t       (const_string \"<MODE>\")))])\n-\n+\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"V4SF\")\n+\t      ]\n+\t      (const_string \"<MODE>\")))])\n \n (define_insn \"<sse>_andnot<mode>3<mask_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n@@ -3673,15 +3673,14 @@\n \t\t (const_string \"<sseintvecmode2>\")\n \t       (eq_attr \"alternative\" \"3\")\n \t\t (const_string \"<sseintvecmode2>\")\n-\t       (and (match_test \"<MODE_SIZE> == 16\")\n-\t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n-\t\t (const_string \"<ssePSmode>\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"<MODE>\")\n \t       (match_test \"optimize_function_for_size_p (cfun)\")\n \t\t (const_string \"V4SF\")\n-\t       ]\n-\t       (const_string \"<MODE>\")))])\n+\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"V4SF\")\n+\t      ]\n+\t      (const_string \"<MODE>\")))])\n \n (define_insn \"*<code><mode>3<mask_name>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n@@ -3822,15 +3821,14 @@\n \t\t (if_then_else (match_test \"TARGET_AVX512DQ\")\n \t\t\t       (const_string \"<avx512fvecmode>\")\n \t\t\t       (const_string \"XI\"))\n-\t       (and (match_test \"<MODE_SIZE> == 16\")\n-\t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n-\t\t (const_string \"V4SF\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"<ssevecmode>\")\n \t       (match_test \"optimize_function_for_size_p (cfun)\")\n \t\t (const_string \"V4SF\")\n-\t       ]\n-\t       (const_string \"<ssevecmode>\")))])\n+\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"V4SF\")\n+\t      ]\n+\t      (const_string \"<ssevecmode>\")))])\n \n (define_insn \"*andnottf3\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=x,x,v,v\")\n@@ -3879,15 +3877,15 @@\n \t\t (const_string \"TI\")\n \t       (eq_attr \"alternative\" \"3\")\n \t\t (const_string \"XI\")\n-\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t (const_string \"V4SF\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"TI\")\n \t       (ior (not (match_test \"TARGET_SSE2\"))\n \t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t (const_string \"V4SF\")\n-\t       ]\n-\t       (const_string \"TI\")))])\n+\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"V4SF\")\n+\t      ]\n+\t      (const_string \"TI\")))])\n \n (define_insn \"*<code><mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x,v,v\")\n@@ -3946,15 +3944,14 @@\n \t\t (if_then_else (match_test \"TARGET_AVX512DQ\")\n \t\t\t       (const_string \"<avx512fvecmode>\")\n \t\t\t       (const_string \"XI\"))\n-\t       (and (match_test \"<MODE_SIZE> == 16\")\n-\t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n-\t\t (const_string \"V4SF\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"<ssevecmode>\")\n \t       (match_test \"optimize_function_for_size_p (cfun)\")\n \t\t (const_string \"V4SF\")\n-\t       ]\n-\t       (const_string \"<ssevecmode>\")))])\n+\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"V4SF\")\n+\t      ]\n+\t      (const_string \"<ssevecmode>\")))])\n \n (define_expand \"<code>tf3\"\n   [(set (match_operand:TF 0 \"register_operand\")\n@@ -4011,15 +4008,15 @@\n \t\t (const_string \"TI\")\n \t       (eq_attr \"alternative\" \"3\")\n \t\t (const_string \"QI\")\n-\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t (const_string \"V4SF\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (const_string \"TI\")\n \t       (ior (not (match_test \"TARGET_SSE2\"))\n \t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n \t\t (const_string \"V4SF\")\n-\t       ]\n-\t       (const_string \"TI\")))])\n+\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"V4SF\")\n+\t      ]\n+\t      (const_string \"TI\")))])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n@@ -13007,10 +13004,7 @@\n        (const_string \"*\")))\n    (set_attr \"prefix\" \"orig,vex,evex\")\n    (set (attr \"mode\")\n-\t(cond [(and (match_test \"<MODE_SIZE> == 16\")\n-\t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n-\t\t (const_string \"<ssePSmode>\")\n-\t       (match_test \"TARGET_AVX2\")\n+\t(cond [(match_test \"TARGET_AVX2\")\n \t\t (const_string \"<sseinsnmode>\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (if_then_else\n@@ -13148,10 +13142,7 @@\n        (const_string \"*\")))\n    (set_attr \"prefix\" \"<mask_prefix3>,evex\")\n    (set (attr \"mode\")\n-\t(cond [(and (match_test \"<MODE_SIZE> == 16\")\n-\t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n-\t\t (const_string \"<ssePSmode>\")\n-\t       (match_test \"TARGET_AVX2\")\n+\t(cond [(match_test \"TARGET_AVX2\")\n \t\t (const_string \"<sseinsnmode>\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (if_then_else\n@@ -13244,10 +13235,7 @@\n        (const_string \"*\")))\n    (set_attr \"prefix\" \"orig,vex,evex\")\n    (set (attr \"mode\")\n-\t(cond [(and (match_test \"<MODE_SIZE> == 16\")\n-\t\t    (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n-\t\t (const_string \"<ssePSmode>\")\n-\t       (match_test \"TARGET_AVX2\")\n+\t(cond [(match_test \"TARGET_AVX2\")\n \t\t (const_string \"<sseinsnmode>\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (if_then_else\n@@ -17190,14 +17178,14 @@\n    (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"btver2_decode\" \"vector,vector,vector\") \n    (set (attr \"mode\")\n-\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n-\t\t (const_string \"V4SF\")\n-\t       (match_test \"TARGET_AVX\")\n+\t(cond [(match_test \"TARGET_AVX\")\n \t\t (const_string \"<ssevecmode>\")\n \t       (match_test \"optimize_function_for_size_p (cfun)\")\n \t\t (const_string \"V4SF\")\n-\t       ]\n-\t       (const_string \"<ssevecmode>\")))])\n+\t       (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"V4SF\")\n+\t      ]\n+\t      (const_string \"<ssevecmode>\")))])\n \n (define_insn_and_split \"*<sse4_1>_blendv<ssemodesuffix><avxsizesuffix>_lt\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x,x\")"}, {"sha": "41b3d52653d91c42d4593e063624b34eb3c230c7", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828573a573553e9c38f0431f0998de8c905f8460/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828573a573553e9c38f0431f0998de8c905f8460/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=828573a573553e9c38f0431f0998de8c905f8460", "patch": "@@ -366,15 +366,15 @@ DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\",\n \t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS\n \t  | m_TREMONT | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER | m_GENERIC)\n \n-/* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL: Use movups for misaligned stores instead\n-   of a sequence loading registers by parts.  */\n+/* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL: Use movups for misaligned stores\n+   instead of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_SILVERMONT | m_KNL | m_KNM\n \t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS\n \t  | m_TREMONT | m_BDVER | m_ZNVER | m_GENERIC)\n \n-/* Use packed single precision instructions where posisble.  I.e. movups instead\n-   of movupd.  */\n+/* X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL: Use packed single\n+   precision 128bit instructions instead of double where possible.   */\n DEF_TUNE (X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL, \"sse_packed_single_insn_optimal\",\n \t  m_BDVER | m_ZNVER)\n "}]}