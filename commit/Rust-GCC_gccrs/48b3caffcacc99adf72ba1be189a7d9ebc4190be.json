{"sha": "48b3caffcacc99adf72ba1be189a7d9ebc4190be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhiM2NhZmZjYWNjOTlhZGY3MmJhMWJlMTg5YTdkOWViYzQxOTBiZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-09-15T06:18:21Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-17T08:18:15Z"}, "message": "x86: Add TARGET_SSE_PARTIAL_REG_[FP_]CONVERTS_DEPENDENCY\n\n1. Replace TARGET_SSE_PARTIAL_REG_DEPENDENCY with\nTARGET_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY in SSE FP to FP splitters.\n2. Replace TARGET_SSE_PARTIAL_REG_DEPENDENCY with\nTARGET_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY in SSE INT to FP splitters.\n3.  Also check TARGET_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY and\nTARGET_SSE_PARTIAL_REG_DEPENDENCY when handling avx_partial_xmm_update\nattribute.  Don't convert AVX partial XMM register update if there is no\npartial SSE register dependency for SSE conversion.\n\ngcc/\n\n\t* config/i386/i386-features.c (remove_partial_avx_dependency):\n\tAlso check TARGET_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY and\n\tand TARGET_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY before generating\n\tvxorps.\n\t* config/i386/i386.h (TARGET_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY):\n\tNew.\n\t(TARGET_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY): Likewise.\n\t* config/i386/i386.md (SSE FP to FP splitters): Replace\n\tTARGET_SSE_PARTIAL_REG_DEPENDENCY with\n\tTARGET_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY.\n\t(SSE INT to FP splitter): Replace TARGET_SSE_PARTIAL_REG_DEPENDENCY\n\twith TARGET_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY.\n\t* config/i386/x86-tune.def\n\t(X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY): New.\n\t(X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY): Likewise.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/avx-covert-1.c: New file.\n\t* gcc.target/i386/avx-fp-covert-1.c: Likewise.\n\t* gcc.target/i386/avx-int-covert-1.c: Likewise.\n\t* gcc.target/i386/sse-covert-1.c: Likewise.\n\t* gcc.target/i386/sse-fp-covert-1.c: Likewise.\n\t* gcc.target/i386/sse-int-covert-1.c: Likewise.", "tree": {"sha": "64f775ff75fcda8138e3b3d4f10486fa2a4e17d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64f775ff75fcda8138e3b3d4f10486fa2a4e17d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48b3caffcacc99adf72ba1be189a7d9ebc4190be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b3caffcacc99adf72ba1be189a7d9ebc4190be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48b3caffcacc99adf72ba1be189a7d9ebc4190be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48b3caffcacc99adf72ba1be189a7d9ebc4190be/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16cca1806d2ac6f03cdc8942edd8762dab1851c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16cca1806d2ac6f03cdc8942edd8762dab1851c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16cca1806d2ac6f03cdc8942edd8762dab1851c4"}], "stats": {"total": 130, "additions": 125, "deletions": 5}, "files": [{"sha": "a525a83afd3ad4fb6dded9bb3ee035e146dce205", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=48b3caffcacc99adf72ba1be189a7d9ebc4190be", "patch": "@@ -2222,12 +2222,14 @@ remove_partial_avx_dependency (void)\n \t    {\n \t    case E_SFmode:\n \t    case E_DFmode:\n-\t      if (TARGET_USE_VECTOR_FP_CONVERTS)\n+\t      if (TARGET_USE_VECTOR_FP_CONVERTS\n+\t\t  || !TARGET_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY)\n \t\tcontinue;\n \t      break;\n \t    case E_SImode:\n \t    case E_DImode:\n-\t      if (TARGET_USE_VECTOR_CONVERTS)\n+\t      if (TARGET_USE_VECTOR_CONVERTS\n+\t\t  || !TARGET_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY)\n \t\tcontinue;\n \t      break;\n \t    default:"}, {"sha": "ec60b89753e6c8505a57c5f10fd55a3505ffb467", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=48b3caffcacc99adf72ba1be189a7d9ebc4190be", "patch": "@@ -334,6 +334,10 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \tix86_tune_features[X86_TUNE_PARTIAL_REG_DEPENDENCY]\n #define TARGET_SSE_PARTIAL_REG_DEPENDENCY \\\n \tix86_tune_features[X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY]\n+#define TARGET_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY \\\n+\tix86_tune_features[X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY]\n+#define TARGET_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY \\\n+\tix86_tune_features[X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY]\n #define TARGET_SSE_UNALIGNED_LOAD_OPTIMAL \\\n \tix86_tune_features[X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL]\n #define TARGET_SSE_UNALIGNED_STORE_OPTIMAL \\"}, {"sha": "c82a9dc1f670255211824c53802631402a4f46b6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=48b3caffcacc99adf72ba1be189a7d9ebc4190be", "patch": "@@ -4535,7 +4535,8 @@\n         (float_extend:DF\n           (match_operand:SF 1 \"nonimmediate_operand\")))]\n   \"!TARGET_AVX\n-   && TARGET_SSE_PARTIAL_REG_DEPENDENCY && epilogue_completed\n+   && TARGET_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY\n+   && epilogue_completed\n    && optimize_function_for_speed_p (cfun)\n    && (!REG_P (operands[1])\n        || (!TARGET_AVX && REGNO (operands[0]) != REGNO (operands[1])))\n@@ -4708,7 +4709,8 @@\n         (float_truncate:SF\n \t  (match_operand:DF 1 \"nonimmediate_operand\")))]\n   \"!TARGET_AVX\n-   && TARGET_SSE_PARTIAL_REG_DEPENDENCY && epilogue_completed\n+   && TARGET_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY\n+   && epilogue_completed\n    && optimize_function_for_speed_p (cfun)\n    && (!REG_P (operands[1])\n        || (!TARGET_AVX && REGNO (operands[0]) != REGNO (operands[1])))\n@@ -5243,7 +5245,8 @@\n   [(set (match_operand:MODEF 0 \"sse_reg_operand\")\n \t(float:MODEF (match_operand:SWI48 1 \"nonimmediate_operand\")))]\n   \"!TARGET_AVX\n-   && TARGET_SSE_PARTIAL_REG_DEPENDENCY && epilogue_completed\n+   && TARGET_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY\n+   && epilogue_completed\n    && optimize_function_for_speed_p (cfun)\n    && (!EXT_REX_SSE_REG_P (operands[0])\n        || TARGET_AVX512VL)\""}, {"sha": "58e8ead56b4b8ee489a9a40bfd2cfc2c8788a8f0", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=48b3caffcacc99adf72ba1be189a7d9ebc4190be", "patch": "@@ -64,6 +64,21 @@ DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY, \"sse_partial_reg_dependency\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n \t  | m_BDVER | m_ZNVER | m_TREMONT | m_GENERIC)\n \n+/* X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY: This knob avoids\n+   partial write to the destination in scalar SSE conversion from FP\n+   to FP.  */\n+DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_FP_CONVERTS_DEPENDENCY,\n+\t  \"sse_partial_reg_fp_converts_dependency\",\n+\t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n+\t  | m_BDVER | m_ZNVER | m_GENERIC)\n+\n+/* X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY: This knob avoids partial\n+   write to the destination in scalar SSE conversion from integer to FP.  */\n+DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_CONVERTS_DEPENDENCY,\n+\t  \"sse_partial_reg_converts_dependency\",\n+\t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n+\t  | m_BDVER | m_ZNVER | m_GENERIC)\n+\n /* X86_TUNE_SSE_SPLIT_REGS: Set for machines where the type and dependencies\n    are resolved on SSE register parts instead of whole registers, so we may\n    maintain just lower part of scalar values in proper format leaving the"}, {"sha": "b6c794ecbb8d8ab3ab05d836017f80ddd803ce4a", "filename": "gcc/testsuite/gcc.target/i386/avx-covert-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-covert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-covert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-covert-1.c?ref=48b3caffcacc99adf72ba1be189a7d9ebc4190be", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake -mfpmath=sse -mtune-ctrl=^sse_partial_reg_fp_converts_dependency,^sse_partial_reg_converts_dependency\" } */\n+\n+extern float f;\n+extern double d;\n+extern int i;\n+\n+void\n+foo (void)\n+{\n+  d = f;\n+  f = i;\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtss2sd\" } } */\n+/* { dg-final { scan-assembler \"vcvtsi2ssl\" } } */\n+/* { dg-final { scan-assembler-not \"vcvtps2pd\" } } */\n+/* { dg-final { scan-assembler-not \"vcvtdq2ps\" } } */\n+/* { dg-final { scan-assembler-not \"vxorps\" } } */"}, {"sha": "c40c48b1b2d28f82f36e7a1907fd1d870d5a9c9a", "filename": "gcc/testsuite/gcc.target/i386/avx-fp-covert-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-fp-covert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-fp-covert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-fp-covert-1.c?ref=48b3caffcacc99adf72ba1be189a7d9ebc4190be", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake -mfpmath=sse -mtune-ctrl=^sse_partial_reg_fp_converts_dependency\" } */\n+\n+extern float f;\n+extern double d;\n+\n+void\n+foo (void)\n+{\n+  d = f;\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtss2sd\" } } */\n+/* { dg-final { scan-assembler-not \"vcvtps2pd\" } } */\n+/* { dg-final { scan-assembler-not \"vxorps\" } } */"}, {"sha": "01bb64e66ccbf56e84f4951088e8c1e6ea88e7a0", "filename": "gcc/testsuite/gcc.target/i386/avx-int-covert-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-int-covert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-int-covert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-int-covert-1.c?ref=48b3caffcacc99adf72ba1be189a7d9ebc4190be", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake -mfpmath=sse -mtune-ctrl=^sse_partial_reg_converts_dependency\" } */\n+\n+extern float f;\n+extern int i;\n+\n+void\n+foo (void)\n+{\n+  f = i;\n+}\n+\n+/* { dg-final { scan-assembler \"vcvtsi2ssl\" } } */\n+/* { dg-final { scan-assembler-not \"vxorps\" } } */"}, {"sha": "c30af6945058c023fd351672c5fa6f25517d7a3f", "filename": "gcc/testsuite/gcc.target/i386/sse-covert-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-covert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-covert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-covert-1.c?ref=48b3caffcacc99adf72ba1be189a7d9ebc4190be", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64 -mfpmath=sse -mtune-ctrl=^sse_partial_reg_fp_converts_dependency,^sse_partial_reg_converts_dependency\" } */\n+\n+extern float f;\n+extern double d;\n+extern int i;\n+\n+void\n+foo (void)\n+{\n+  d = f;\n+  f = i;\n+}\n+\n+/* { dg-final { scan-assembler \"cvtss2sd\" } } */\n+/* { dg-final { scan-assembler \"cvtsi2ssl\" } } */\n+/* { dg-final { scan-assembler-not \"cvtps2pd\" } } */\n+/* { dg-final { scan-assembler-not \"cvtdq2ps\" } } */\n+/* { dg-final { scan-assembler-not \"pxor\" } } */"}, {"sha": "b6567e60e3e43d5f43e6640ea1cf66861f8b9f1e", "filename": "gcc/testsuite/gcc.target/i386/sse-fp-covert-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-fp-covert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-fp-covert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-fp-covert-1.c?ref=48b3caffcacc99adf72ba1be189a7d9ebc4190be", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64 -mfpmath=sse -mtune-ctrl=^sse_partial_reg_fp_converts_dependency\" } */\n+\n+extern float f;\n+extern double d;\n+\n+void\n+foo (void)\n+{\n+  d = f;\n+}\n+\n+/* { dg-final { scan-assembler \"cvtss2sd\" } } */\n+/* { dg-final { scan-assembler-not \"cvtps2pd\" } } */\n+/* { dg-final { scan-assembler-not \"pxor\" } } */"}, {"sha": "107f7241def0f17610b5905b6d3cc4311a5c7fe5", "filename": "gcc/testsuite/gcc.target/i386/sse-int-covert-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-int-covert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48b3caffcacc99adf72ba1be189a7d9ebc4190be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-int-covert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-int-covert-1.c?ref=48b3caffcacc99adf72ba1be189a7d9ebc4190be", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64 -mfpmath=sse -mtune-ctrl=^sse_partial_reg_converts_dependency\" } */\n+\n+extern float f;\n+extern int i;\n+\n+void\n+foo (void)\n+{\n+  f = i;\n+}\n+\n+/* { dg-final { scan-assembler \"cvtsi2ssl\" } } */\n+/* { dg-final { scan-assembler-not \"pxor\" } } */"}]}