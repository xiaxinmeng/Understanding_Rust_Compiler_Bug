{"sha": "907f67ccf3ff01b7fcbc5d139616858a4a8fafd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA3ZjY3Y2NmM2ZmMDFiN2ZjYmM1ZDEzOTYxNjg1OGE0YThmYWZkNQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-09-24T19:33:59Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-09-24T19:33:59Z"}, "message": "(ldo/ldil SImode and HImode recognizers): Use \"const_int_operand\" for operand 1 and simplify final condition.\n\n(ldo/ldil SImode and HImode recognizers): Use \"const_int_operand\"\nfor operand 1 and simplify final condition.  Remove `n' constraint.\n(depi SImode and HImode recognizers): Remove `n' constraint.\n(plus:SI ... high ... splitter): Don't overwrite input, go via\nclobber operand instead.\n(many patterns): Replace `in' constraint with just `i'.\n(movstrsi): Don't do (clobber (match_scratch)), use explicit\npseudos instead, generated in preparation C code.  Don't call\nforce_not_mem for operand 2.\n(movstrsi recognizer): Add `&' to operand 3\n(andsi3): Fix typo.\n(iorsi3): Fix typo.\n(load-shift-16): New optimizer.\n(load-shift optimizers): Set \"type\" attr.\n\nFrom-SVN: r2232", "tree": {"sha": "ee64a6610386d2d3f129a1ee3accd03268935fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee64a6610386d2d3f129a1ee3accd03268935fb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/907f67ccf3ff01b7fcbc5d139616858a4a8fafd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907f67ccf3ff01b7fcbc5d139616858a4a8fafd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907f67ccf3ff01b7fcbc5d139616858a4a8fafd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907f67ccf3ff01b7fcbc5d139616858a4a8fafd5/comments", "author": null, "committer": null, "parents": [{"sha": "fad04099d7a5ede3aa36bddd66f7da4e91b11fa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad04099d7a5ede3aa36bddd66f7da4e91b11fa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fad04099d7a5ede3aa36bddd66f7da4e91b11fa8"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "f2651c5b9daf4e53107ae1e40c66888da39d068d", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907f67ccf3ff01b7fcbc5d139616858a4a8fafd5/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907f67ccf3ff01b7fcbc5d139616858a4a8fafd5/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=907f67ccf3ff01b7fcbc5d139616858a4a8fafd5", "patch": "@@ -720,9 +720,8 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(match_operand:SI 1 \"immediate_operand\" \"n\"))]\n-  \"(GET_CODE (operands[1]) == CONST_INT) &&\n-   (INT_14_BITS (operands[1]) || !(INTVAL (operands[1]) & 0x7ff))\"\n+\t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n+  \"INT_14_BITS (operands[1]) || (INTVAL (operands[1]) & 0x7ff) == 0\"\n   \"*\n {\n   if (INT_14_BITS (operands[1]))\n@@ -735,7 +734,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(match_operand:SI 1 \"depi_cint_operand\" \"n\"))]\n+\t(match_operand:SI 1 \"depi_cint_operand\" \"\"))]\n   \"\"\n   \"*\n {\n@@ -762,10 +761,11 @@\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t (high:SI (match_operand 2 \"\" \"\"))))]\n+\t\t (high:SI (match_operand 2 \"\" \"\"))))\n+   (clobber (match_scratch:SI 3 \"\"))]\n   \"reload_completed && REGNO (operands[0]) != 1\"\n-  [(set (match_dup 0) (high:SI (match_dup 2)))\n-   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 1)))]\n+  [(set (match_dup 3) (high:SI (match_dup 2)))\n+   (set (match_dup 0) (plus:SI (match_dup 3) (match_dup 1)))]\n   \"\")\n \n (define_insn \"\"\n@@ -787,7 +787,7 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t   (match_operand:SI 2 \"immediate_operand\" \"in\")))]\n+\t\t   (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"ldo R'%G2(%1),%0\"\n   ;; Need to set length for this arith insn because operand2\n@@ -835,9 +835,8 @@\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(match_operand:HI 1 \"immediate_operand\" \"n\"))]\n-  \"(GET_CODE (operands[1]) == CONST_INT) &&\n-   (INT_14_BITS (operands[1]) || !(INTVAL (operands[1]) & 0x7ff))\"\n+\t(match_operand:HI 1 \"const_int_operand\" \"\"))]\n+  \"INT_14_BITS (operands[1]) || (INTVAL (operands[1]) & 0x7ff) == 0\"\n   \"*\n {\n   if (INT_14_BITS (operands[1]))\n@@ -850,7 +849,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(match_operand:HI 1 \"depi_cint_operand\" \"n\"))]\n+\t(match_operand:HI 1 \"depi_cint_operand\" \"\"))]\n   \"\"\n   \"*\n {\n@@ -866,7 +865,7 @@\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(lo_sum:HI (match_operand:HI 1 \"register_operand\" \"r\")\n-\t\t   (match_operand 2 \"immediate_operand\" \"in\")))]\n+\t\t   (match_operand 2 \"immediate_operand\" \"i\")))]\n   \"\"\n   \"ldo R'%G2(%1),%0\"\n   [(set_attr \"length\" \"1\")])\n@@ -903,7 +902,7 @@\n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n \t(subreg:QI (lo_sum:SI (match_operand:QI 1 \"register_operand\" \"r\")\n-\t\t\t      (match_operand 2 \"immediate_operand\" \"in\")) 0))]\n+\t\t\t      (match_operand 2 \"immediate_operand\" \"i\")) 0))]\n   \"\"\n   \"ldo R'%G2(%1),%0\"\n   [(set_attr \"length\" \"1\")])\n@@ -917,8 +916,8 @@\n \t\t   (mem:BLK (match_operand:BLK 1 \"general_operand\" \"\")))\n \t      (clobber (match_dup 0))\n \t      (clobber (match_dup 1))\n-\t      (clobber (match_scratch:SI 4 \"\"))\n-\t      (clobber (match_scratch:SI 5 \"\"))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_dup 5))\n \t      (use (match_operand:SI 2 \"arith_operand\" \"\"))\n \t      (use (match_operand:SI 3 \"const_int_operand\" \"\"))])]\n   \"\"\n@@ -935,7 +934,8 @@\n \n   operands[0] = copy_to_mode_reg (SImode, XEXP (operands[0], 0));\n   operands[1] = copy_to_mode_reg (SImode, XEXP (operands[1], 0));\n-  operands[2] = force_not_mem (operands[2]);\n+  operands[4] = gen_reg_rtx (SImode);\n+  operands[5] = gen_reg_rtx (SImode);\n }\")\n \n ;; The operand constraints are written like this to support both compile-time\n@@ -948,8 +948,8 @@\n \t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+r,r\")))\n    (clobber (match_dup 0))\n    (clobber (match_dup 1))\n-   (clobber (match_scratch:SI 2 \"=r,r\"))\t\t ;loop cnt/item tmp\n-   (clobber (match_scratch:SI 3 \"=r,r\"))\t\t ;item tmp\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=r,r\"))\t;loop cnt/tmp\n+   (clobber (match_operand:SI 3 \"register_operand\" \"=&r,&r\"))\t;item tmp\n    (use (match_operand:SI 4 \"arith_operand\" \"J,2\"))\t ;byte count\n    (use (match_operand:SI 5 \"const_int_operand\" \"n,n\"))] ;alignment\n   \"\"\n@@ -1071,7 +1071,7 @@\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"0,r\")\n-\t\t   (match_operand:DI 2 \"immediate_operand\" \"in,in\")))]\n+\t\t   (match_operand:DI 2 \"immediate_operand\" \"i,i\")))]\n   \"\"\n   \"*\n {\n@@ -1596,7 +1596,7 @@\n \t(and:SI (match_operand:SI 1 \"register_operand\" \"%r,0\")\n \t\t(match_operand:SI 2 \"and_operand\" \"rO,P\")))]\n   \"\"\n-  \"* output_and (operands); \")\n+  \"* return output_and (operands); \")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -1639,7 +1639,7 @@\n \t(ior:SI (match_operand:SI 1 \"register_operand\" \"%r,0\")\n \t\t(match_operand:SI 2 \"ior_operand\" \"r,n\")))]\n   \"\"\n-  \"* output_ior (operands); \")\n+  \"* return output_ior (operands); \")\n \n (define_expand \"xordi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -1826,7 +1826,18 @@\n \t(lshiftrt:SI (match_operand:SI 1 \"memory_operand\" \"m\")\n \t\t     (const_int 24)))]\n   \"\"\n-  \"ldb%M1 %1,%0\")\n+  \"ldb%M1 %1,%0\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"1\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"memory_operand\" \"m\")\n+\t\t     (const_int 16)))]\n+  \"\"\n+  \"ldh%M1 %1,%0\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"1\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")"}]}