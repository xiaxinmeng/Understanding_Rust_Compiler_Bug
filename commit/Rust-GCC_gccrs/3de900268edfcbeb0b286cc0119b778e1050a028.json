{"sha": "3de900268edfcbeb0b286cc0119b778e1050a028", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RlOTAwMjY4ZWRmY2JlYjBiMjg2Y2MwMTE5Yjc3OGUxMDUwYTAyOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-03T23:22:50Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-03T23:22:50Z"}, "message": "dbxout.c (dbxout_init): Use xcalloc instead of xmalloc+bzero.\n\n\t* dbxout.c (dbxout_init): Use xcalloc instead of xmalloc+bzero.\n\t* dwarf2out.c (dwarf2out_frame_init): Likewise.\n\t* final.c (shorten_branches): Likewise.\n\t* global.c (global_alloc): Likewise.\n\t* haifa-sched.c (build_control_flow): Likewise.\n\t* stmt.c (check_for_full_enumeration_handling): Likewise.\n\t(estimate_case_costs): Likewise.\n\nFrom-SVN: r29091", "tree": {"sha": "3eb337eba34d2d4c91a5e74dbcce64f57595bd4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eb337eba34d2d4c91a5e74dbcce64f57595bd4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3de900268edfcbeb0b286cc0119b778e1050a028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de900268edfcbeb0b286cc0119b778e1050a028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de900268edfcbeb0b286cc0119b778e1050a028", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de900268edfcbeb0b286cc0119b778e1050a028/comments", "author": null, "committer": null, "parents": [{"sha": "818a3b1591f335fe4d781637297246d7e9cda583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818a3b1591f335fe4d781637297246d7e9cda583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818a3b1591f335fe4d781637297246d7e9cda583"}], "stats": {"total": 83, "additions": 33, "deletions": 50}, "files": [{"sha": "f391242962ab69acddf470ec15576c509328c71b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3de900268edfcbeb0b286cc0119b778e1050a028", "patch": "@@ -1,3 +1,13 @@\n+Fri Sep  3 16:22:17 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* dbxout.c (dbxout_init): Use xcalloc instead of xmalloc+bzero.\n+\t* dwarf2out.c (dwarf2out_frame_init): Likewise.\n+\t* final.c (shorten_branches): Likewise.\n+\t* global.c (global_alloc): Likewise.\n+\t* haifa-sched.c (build_control_flow): Likewise.\n+\t* stmt.c (check_for_full_enumeration_handling): Likewise.\n+\t(estimate_case_costs): Likewise.\n+\n Fri Sep  3 15:49:56 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \t* rtl.h (RTL_CHECKC2): Fix typo in last change."}, {"sha": "6dd2f30d6dab3a5b1cea6129130f14d64a643e5b", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=3de900268edfcbeb0b286cc0119b778e1050a028", "patch": "@@ -381,8 +381,7 @@ dbxout_init (asm_file, input_file_name, syms)\n   asmfile = asm_file;\n \n   typevec_len = 100;\n-  typevec = (struct typeinfo *) xmalloc (typevec_len * sizeof typevec[0]);\n-  bzero ((char *) typevec, typevec_len * sizeof typevec[0]);\n+  typevec = (struct typeinfo *) xcalloc (typevec_len, sizeof typevec[0]);\n \n   /* Convert Ltext into the appropriate format for local labels in case\n      the system doesn't insert underscores in front of user generated"}, {"sha": "c2168442f488a94e760ff3697459b01f86e53f4e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3de900268edfcbeb0b286cc0119b778e1050a028", "patch": "@@ -1985,9 +1985,7 @@ void\n dwarf2out_frame_init ()\n {\n   /* Allocate the initial hunk of the fde_table.  */\n-  fde_table\n-    = (dw_fde_ref) xmalloc (FDE_TABLE_INCREMENT * sizeof (dw_fde_node));\n-  bzero ((char *) fde_table, FDE_TABLE_INCREMENT * sizeof (dw_fde_node));\n+  fde_table = (dw_fde_ref) xcalloc (FDE_TABLE_INCREMENT, sizeof (dw_fde_node));\n   fde_table_allocated = FDE_TABLE_INCREMENT;\n   fde_table_in_use = 0;\n \n@@ -10016,46 +10014,37 @@ dwarf2out_init (asm_out_file, main_input_filename)\n   primary_filename = main_input_filename;\n \n   /* Allocate the initial hunk of the file_table.  */\n-  file_table = (char **) xmalloc (FILE_TABLE_INCREMENT * sizeof (char *));\n-  bzero ((char *) file_table, FILE_TABLE_INCREMENT * sizeof (char *));\n+  file_table = (char **) xcalloc (FILE_TABLE_INCREMENT, sizeof (char *));\n   file_table_allocated = FILE_TABLE_INCREMENT;\n \n   /* Skip the first entry - file numbers begin at 1.  */\n   file_table_in_use = 1;\n \n   /* Allocate the initial hunk of the decl_die_table.  */\n   decl_die_table\n-    = (dw_die_ref *) xmalloc (DECL_DIE_TABLE_INCREMENT * sizeof (dw_die_ref));\n-  bzero ((char *) decl_die_table,\n-\t DECL_DIE_TABLE_INCREMENT * sizeof (dw_die_ref));\n+    = (dw_die_ref *) xcalloc (DECL_DIE_TABLE_INCREMENT, sizeof (dw_die_ref));\n   decl_die_table_allocated = DECL_DIE_TABLE_INCREMENT;\n   decl_die_table_in_use = 0;\n \n   /* Allocate the initial hunk of the decl_scope_table.  */\n   decl_scope_table\n-    = (decl_scope_node *) xmalloc (DECL_SCOPE_TABLE_INCREMENT\n-\t\t\t\t   * sizeof (decl_scope_node));\n-  bzero ((char *) decl_scope_table,\n-\t DECL_SCOPE_TABLE_INCREMENT * sizeof (decl_scope_node));\n+    = (decl_scope_node *) xcalloc (DECL_SCOPE_TABLE_INCREMENT,\n+\t\t\t\t   sizeof (decl_scope_node));\n   decl_scope_table_allocated = DECL_SCOPE_TABLE_INCREMENT;\n   decl_scope_depth = 0;\n \n   /* Allocate the initial hunk of the abbrev_die_table.  */\n   abbrev_die_table\n-    = (dw_die_ref *) xmalloc (ABBREV_DIE_TABLE_INCREMENT\n-\t\t\t      * sizeof (dw_die_ref));\n-  bzero ((char *) abbrev_die_table,\n-\t ABBREV_DIE_TABLE_INCREMENT * sizeof (dw_die_ref));\n+    = (dw_die_ref *) xcalloc (ABBREV_DIE_TABLE_INCREMENT,\n+\t\t\t      sizeof (dw_die_ref));\n   abbrev_die_table_allocated = ABBREV_DIE_TABLE_INCREMENT;\n   /* Zero-th entry is allocated, but unused */\n   abbrev_die_table_in_use = 1;\n \n   /* Allocate the initial hunk of the line_info_table.  */\n   line_info_table\n-    = (dw_line_info_ref) xmalloc (LINE_INFO_TABLE_INCREMENT\n-\t\t\t\t  * sizeof (dw_line_info_entry));\n-  bzero ((char *) line_info_table,\n-\t LINE_INFO_TABLE_INCREMENT * sizeof (dw_line_info_entry));\n+    = (dw_line_info_ref) xcalloc (LINE_INFO_TABLE_INCREMENT,\n+\t\t\t\t  sizeof (dw_line_info_entry));\n   line_info_table_allocated = LINE_INFO_TABLE_INCREMENT;\n   /* Zero-th entry is allocated, but unused */\n   line_info_table_in_use = 1;"}, {"sha": "1c7ee3c0fed0f85e0835b99d7fe52190ac656103", "filename": "gcc/final.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=3de900268edfcbeb0b286cc0119b778e1050a028", "patch": "@@ -1025,10 +1025,8 @@ shorten_branches (first)\n \n   max_labelno = max_label_num ();\n   min_labelno = get_first_label_num ();\n-  label_align = (struct label_alignment *) xmalloc (\n-    (max_labelno - min_labelno + 1) * sizeof (struct label_alignment));\n-  bzero ((char *) label_align,\n-    (max_labelno - min_labelno + 1) * sizeof (struct label_alignment));\n+  label_align = (struct label_alignment **)\n+    xcalloc ((max_labelno - min_labelno + 1), sizeof (struct label_alignment));\n \n   uid_shuid = (int *) xmalloc (max_uid * sizeof *uid_shuid);\n \n@@ -1148,24 +1146,19 @@ shorten_branches (first)\n \n   /* Allocate the rest of the arrays.  */\n   insn_lengths = (short *) xmalloc (max_uid * sizeof (short));\n-  insn_addresses = (int *) xmalloc (max_uid * sizeof (int));\n   insn_lengths_max_uid = max_uid;\n   /* Syntax errors can lead to labels being outside of the main insn stream.\n      Initialize insn_addresses, so that we get reproducible results.  */\n-  bzero ((char *)insn_addresses, max_uid * sizeof *insn_addresses);\n-  uid_align = (rtx *) xmalloc (max_uid * sizeof *uid_align);\n+  insn_addresses = (int *) xcalloc (max_uid, sizeof (int));\n \n-  varying_length = (char *) xmalloc (max_uid * sizeof (char));\n-\n-  bzero (varying_length, max_uid);\n+  varying_length = (char *) xcalloc (max_uid, sizeof (char));\n \n   /* Initialize uid_align.  We scan instructions\n      from end to start, and keep in align_tab[n] the last seen insn\n      that does an alignment of at least n+1, i.e. the successor\n      in the alignment chain for an insn that does / has a known\n      alignment of n.  */\n-\n-  bzero ((char *) uid_align, max_uid * sizeof *uid_align);\n+  uid_align = (rtx *) xcalloc (max_uid, sizeof *uid_align);\n \n   for (i = MAX_CODE_ALIGN; --i >= 0; )\n     align_tab[i] = NULL_RTX;"}, {"sha": "4ec3150348ea256571a7671534da74ca1abbb4ef", "filename": "gcc/global.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=3de900268edfcbeb0b286cc0119b778e1050a028", "patch": "@@ -486,10 +486,8 @@ global_alloc (file)\n   /* We used to use alloca here, but the size of what it would try to\n      allocate would occasionally cause it to exceed the stack limit and\n      cause unpredictable core dumps.  Some examples were > 2Mb in size.  */\n-  conflicts = (INT_TYPE *) xmalloc (max_allocno * allocno_row_words\n-\t\t\t\t    * sizeof (INT_TYPE));\n-  bzero ((char *) conflicts,\n-\t max_allocno * allocno_row_words * sizeof (INT_TYPE));\n+  conflicts = (INT_TYPE *) xcalloc (max_allocno * allocno_row_words,\n+\t\t\t\t    sizeof (INT_TYPE));\n \n   allocnos_live = (INT_TYPE *) alloca (allocno_row_words * sizeof (INT_TYPE));\n "}, {"sha": "87df8581ad84cdac6740cb99f2dfa0ffb83adaa1", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=3de900268edfcbeb0b286cc0119b778e1050a028", "patch": "@@ -1085,13 +1085,9 @@ build_control_flow (s_preds, s_succs, num_preds, num_succs)\n   /* Account for entry/exit edges.  */\n   nr_edges += 2;\n \n-  in_edges = (int *) xmalloc (n_basic_blocks * sizeof (int));\n-  out_edges = (int *) xmalloc (n_basic_blocks * sizeof (int));\n-  bzero ((char *) in_edges, n_basic_blocks * sizeof (int));\n-  bzero ((char *) out_edges, n_basic_blocks * sizeof (int));\n-\n-  edge_table = (haifa_edge *) xmalloc ((nr_edges) * sizeof (haifa_edge));\n-  bzero ((char *) edge_table, ((nr_edges) * sizeof (haifa_edge)));\n+  in_edges = (int *) xcalloc (n_basic_blocks, sizeof (int));\n+  out_edges = (int *) xcalloc (n_basic_blocks, sizeof (int));\n+  edge_table = (haifa_edge *) xcalloc (nr_edges, sizeof (haifa_edge));\n \n   nr_edges = 0;\n   for (i = 0; i < n_basic_blocks; i++)"}, {"sha": "255d635fbbbd38ff10d471c29885ad484b063a7f", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de900268edfcbeb0b286cc0119b778e1050a028/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=3de900268edfcbeb0b286cc0119b778e1050a028", "patch": "@@ -4900,12 +4900,11 @@ check_for_full_enumeration_handling (type)\n   bytes_needed = (size + HOST_BITS_PER_CHAR) / HOST_BITS_PER_CHAR;\n \n   if (size > 0 && size < 600000\n-      /* We deliberately use malloc here - not xmalloc.  */\n-      && (cases_seen = (unsigned char *) malloc (bytes_needed)) != NULL)\n+      /* We deliberately use calloc here - not xcalloc.  */\n+      && (cases_seen = (unsigned char *) calloc (bytes_needed, 1)) != NULL)\n     {\n       long i;\n       tree v = TYPE_VALUES (type);\n-      bzero (cases_seen, bytes_needed);\n \n       /* The time complexity of this code is normally O(N), where\n \t N being the number of members in the enumerated type.\n@@ -5469,8 +5468,7 @@ estimate_case_costs (node)\n \n   if (cost_table == NULL)\n     {\n-      cost_table = ((short *) xmalloc (129 * sizeof (short))) + 1;\n-      bzero ((char *) (cost_table - 1), 129 * sizeof (short));\n+      cost_table = ((short *) xcalloc (129, sizeof (short))) + 1;\n \n       for (i = 0; i < 128; i++)\n \t{"}]}