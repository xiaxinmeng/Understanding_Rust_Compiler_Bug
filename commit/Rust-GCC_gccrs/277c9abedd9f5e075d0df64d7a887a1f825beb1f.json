{"sha": "277c9abedd9f5e075d0df64d7a887a1f825beb1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc3YzlhYmVkZDlmNWUwNzVkMGRmNjRkN2E4ODdhMWY4MjViZWIxZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T09:23:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T09:23:40Z"}, "message": "sem_ch3.adb (Analyze_Full_Type_Declaration): move test that a type has a discriminant specification so that it does not...\n\n        * sem_ch3.adb (Analyze_Full_Type_Declaration): move test that a type\n        has a discriminant specification so that it does not include the case\n        of derived types\n        (Derived_Type_Declaration): move here the test that a derived type has a\n        discriminant specification\n\nFrom-SVN: r177104", "tree": {"sha": "7541702ed36f3db50f965ce30f9a2c31d4f7062c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7541702ed36f3db50f965ce30f9a2c31d4f7062c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/277c9abedd9f5e075d0df64d7a887a1f825beb1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/277c9abedd9f5e075d0df64d7a887a1f825beb1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/277c9abedd9f5e075d0df64d7a887a1f825beb1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/277c9abedd9f5e075d0df64d7a887a1f825beb1f/comments", "author": null, "committer": null, "parents": [{"sha": "a5fe697b1ef0b00f41d7a1d5a8101dc4f8fece26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5fe697b1ef0b00f41d7a1d5a8101dc4f8fece26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5fe697b1ef0b00f41d7a1d5a8101dc4f8fece26"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "4e4ae9f01e5a84597c1b0bac9ff2e02241c55041", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277c9abedd9f5e075d0df64d7a887a1f825beb1f/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277c9abedd9f5e075d0df64d7a887a1f825beb1f/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=277c9abedd9f5e075d0df64d7a887a1f825beb1f", "patch": "@@ -2268,15 +2268,15 @@ package body Sem_Ch3 is\n                Check_Formal_Restriction\n                  (\"discriminant type is not allowed\",\n                   Defining_Identifier\n-                  (First (Discriminant_Specifications (N))));\n+                    (First (Discriminant_Specifications (N))));\n             end if;\n \n          when others =>\n             if Present (Discriminant_Specifications (N)) then\n                Error_Msg_N\n                  (\"elementary or array type cannot have discriminants\",\n                   Defining_Identifier\n-                  (First (Discriminant_Specifications (N))));\n+                    (First (Discriminant_Specifications (N))));\n             end if;\n       end case;\n \n@@ -3026,20 +3026,19 @@ package body Sem_Ch3 is\n       --  mark and shall not be unconstrained. (The only exception to this\n       --  is the admission of declarations of constants of type String.)\n \n-      if not Nkind_In (Object_Definition (N),\n-                       N_Identifier,\n-                       N_Expanded_Name)\n+      if not Nkind_In (Object_Definition (N), N_Identifier,\n+                                              N_Expanded_Name)\n       then\n          Check_Formal_Restriction\n            (\"subtype mark expected\", Object_Definition (N));\n+\n       elsif Is_Array_Type (T)\n         and then not Is_Constrained (T)\n         and then T /= Standard_String\n       then\n-         Check_Formal_Restriction (\"subtype mark of constrained type expected\",\n-                                   Object_Definition (N));\n-      else\n-         null;\n+         Check_Formal_Restriction\n+           (\"subtype mark of constrained type expected\",\n+            Object_Definition (N));\n       end if;\n \n       --  There are no aliased objects in SPARK or ALFA\n@@ -3062,8 +3061,8 @@ package body Sem_Ch3 is\n              (Is_CPP_Class (Root_Type (Etype (Act_T)))\n                or else\n                  (Present (Full_View (Root_Type (Etype (Act_T))))\n-                    and then\n-                      Is_CPP_Class (Full_View (Root_Type (Etype (Act_T))))))\n+                   and then\n+                     Is_CPP_Class (Full_View (Root_Type (Etype (Act_T))))))\n          then\n             Error_Msg_N\n               (\"predefined assignment not available for 'C'P'P tagged types\",\n@@ -3991,8 +3990,7 @@ package body Sem_Ch3 is\n          Set_Has_Delayed_Freeze (Id);\n       end if;\n \n-      --  Subtype of Boolean is not allowed to have a constraint in SPARK or\n-      --  ALFA.\n+      --  Subtype of Boolean cannot have a constraint in SPARK or ALFA\n \n       if Is_Boolean_Type (T)\n         and then Nkind (Subtype_Indication (N)) = N_Subtype_Indication\n@@ -14069,7 +14067,7 @@ package body Sem_Ch3 is\n       end if;\n \n       --  Only composite types other than array types are allowed to have\n-      --  discriminants. In SPARK in ALFA, no types are allowed to have\n+      --  discriminants. In SPARK and in ALFA, no types are allowed to have\n       --  discriminants.\n \n       if Present (Discriminant_Specifications (N)) then\n@@ -14111,10 +14109,10 @@ package body Sem_Ch3 is\n         or else Has_Private_Component (Parent_Type)\n       then\n          --  The ancestor type of a formal type can be incomplete, in which\n-         --  case only the operations of the partial view are available in\n-         --  the generic. Subsequent checks may be required when the full\n-         --  view is analyzed, to verify that derivation from a tagged type\n-         --  has an extension.\n+         --  case only the operations of the partial view are available in the\n+         --  generic. Subsequent checks may be required when the full view is\n+         --  analyzed to verify that a derivation from a tagged type has an\n+         --  extension.\n \n          if Nkind (Original_Node (N)) = N_Formal_Type_Declaration then\n             null;"}]}