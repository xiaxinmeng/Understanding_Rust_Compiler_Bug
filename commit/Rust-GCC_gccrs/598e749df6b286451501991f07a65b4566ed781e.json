{"sha": "598e749df6b286451501991f07a65b4566ed781e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4ZTc0OWRmNmIyODY0NTE1MDE5OTFmMDdhNjViNDU2NmVkNzgxZQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-02T15:03:21Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-02T15:03:21Z"}, "message": "2003-12-02  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/DatagramChannelImpl.java\n\t(blocking): Initialize with true by default.\n\t* gnu/java/nio/ServerSocketChannelImpl.java\n\t(serverSocket): Made private.\n\t(blocking): Likewise.\n\t(connected): Likewise.\n\t* gnu/java/nio/SocketChannelImpl.java\n\t(connectionPending): Made private.\n\t* gnu/java/nio/FileLockImpl.java\n\t(static): Load native library (needed for classpath).\n\t* gnu/java/nio/SelectorImpl.java\n\t(static): Load native library (needed for classpath).\n\nFrom-SVN: r74181", "tree": {"sha": "223ed6feafd3875e3bc532618c10d2c30312d3a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/223ed6feafd3875e3bc532618c10d2c30312d3a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/598e749df6b286451501991f07a65b4566ed781e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598e749df6b286451501991f07a65b4566ed781e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598e749df6b286451501991f07a65b4566ed781e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598e749df6b286451501991f07a65b4566ed781e/comments", "author": null, "committer": null, "parents": [{"sha": "a74e3b77079e534b3c394235503e626b30c6e5d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a74e3b77079e534b3c394235503e626b30c6e5d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a74e3b77079e534b3c394235503e626b30c6e5d4"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "690a4f7b046718de16fcb5b7e401c201a826b441", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598e749df6b286451501991f07a65b4566ed781e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598e749df6b286451501991f07a65b4566ed781e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=598e749df6b286451501991f07a65b4566ed781e", "patch": "@@ -1,3 +1,18 @@\n+2003-12-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/DatagramChannelImpl.java\n+\t(blocking): Initialize with true by default.\n+\t* gnu/java/nio/ServerSocketChannelImpl.java\n+\t(serverSocket): Made private.\n+\t(blocking): Likewise.\n+\t(connected): Likewise.\n+\t* gnu/java/nio/SocketChannelImpl.java\n+\t(connectionPending): Made private.\n+\t* gnu/java/nio/FileLockImpl.java\n+\t(static): Load native library (needed for classpath).\n+\t* gnu/java/nio/SelectorImpl.java\n+\t(static): Load native library (needed for classpath).\n+\n 2003-12-02  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/net/protocol/file/Connection.java"}, {"sha": "af43256cc28a1672a2ca1775a2b90182f9583cff", "filename": "libjava/gnu/java/nio/DatagramChannelImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598e749df6b286451501991f07a65b4566ed781e/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598e749df6b286451501991f07a65b4566ed781e/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java?ref=598e749df6b286451501991f07a65b4566ed781e", "patch": "@@ -56,7 +56,7 @@\n public final class DatagramChannelImpl extends DatagramChannel\n {\n   private NIODatagramSocket socket;\n-  private boolean blocking = false;\n+  private boolean blocking = true;\n   \n   protected DatagramChannelImpl (SelectorProvider provider)\n     throws IOException"}, {"sha": "f85d60ad67f02226ff326537f2ffe07f49cc6283", "filename": "libjava/gnu/java/nio/FileLockImpl.java", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598e749df6b286451501991f07a65b4566ed781e/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598e749df6b286451501991f07a65b4566ed781e/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java?ref=598e749df6b286451501991f07a65b4566ed781e", "patch": "@@ -42,13 +42,23 @@\n import java.io.IOException;\n import java.nio.channels.FileChannel;\n import java.nio.channels.FileLock;\n+import gnu.classpath.Configuration;\n \n /**\n  * @author Michael Koch\n  * @since 1.4\n  */\n public class FileLockImpl extends FileLock\n {\n+  static\n+  {\n+    // load the shared library needed for native methods.\n+    if (Configuration.INIT_LOAD_LIBRARY)\n+      {\n+        System.loadLibrary (\"javanio\");\n+      }\n+  }\n+  \n   private FileDescriptor fd;\n   private boolean released;\n   "}, {"sha": "05a537afb5e3fd4dd4bd59d8f06c3ec09e9aefd1", "filename": "libjava/gnu/java/nio/SelectorImpl.java", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598e749df6b286451501991f07a65b4566ed781e/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598e749df6b286451501991f07a65b4566ed781e/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSelectorImpl.java?ref=598e749df6b286451501991f07a65b4566ed781e", "patch": "@@ -49,9 +49,19 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Set;\n+import gnu.classpath.Configuration;\n \n public class SelectorImpl extends AbstractSelector\n {\n+  static\n+  {\n+    // load the shared library needed for native methods.\n+    if (Configuration.INIT_LOAD_LIBRARY)\n+      {\n+        System.loadLibrary (\"javanio\");\n+      }\n+  }\n+  \n   private Set keys;\n   private Set selected;\n "}, {"sha": "97943c0ff8e044e227ff50e8265ab42b67e9b706", "filename": "libjava/gnu/java/nio/ServerSocketChannelImpl.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598e749df6b286451501991f07a65b4566ed781e/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598e749df6b286451501991f07a65b4566ed781e/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java?ref=598e749df6b286451501991f07a65b4566ed781e", "patch": "@@ -54,9 +54,9 @@\n \n public final class ServerSocketChannelImpl extends ServerSocketChannel\n {\n-  NIOServerSocket serverSocket;\n-  boolean blocking = true;\n-  boolean connected = false;\n+  private NIOServerSocket serverSocket;\n+  private boolean blocking = true;\n+  private boolean connected;\n \n   protected ServerSocketChannelImpl (SelectorProvider provider)\n     throws IOException"}, {"sha": "46c0d8c0fae48d5270d47b2b0415713f050390b6", "filename": "libjava/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598e749df6b286451501991f07a65b4566ed781e/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598e749df6b286451501991f07a65b4566ed781e/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=598e749df6b286451501991f07a65b4566ed781e", "patch": "@@ -66,7 +66,7 @@ public final class SocketChannelImpl extends SocketChannel\n   private PlainSocketImpl impl;\n   private NIOSocket socket;\n   private boolean blocking = true;\n-  private boolean connectionPending = false;\n+  private boolean connectionPending;\n \n   SocketChannelImpl (SelectorProvider provider)\n     throws IOException"}]}