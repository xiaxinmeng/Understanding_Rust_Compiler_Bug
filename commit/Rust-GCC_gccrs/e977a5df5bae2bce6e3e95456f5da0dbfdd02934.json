{"sha": "e977a5df5bae2bce6e3e95456f5da0dbfdd02934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3N2E1ZGY1YmFlMmJjZTZlM2U5NTQ1NmY1ZGEwZGJmZGQwMjkzNA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-05-17T16:49:19Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-05-17T16:49:19Z"}, "message": "libphobos: Merge upstream druntime 5cc061a8, phobos 64ed4684f\n\n- core.cpuid has been fixed to not use i7 detection on AMD processors.\n- std.net.curl has been fixed to correctly handle HTTP/2 status lines.\n- std.zip has had a test fixed to not rely on unzip being installed.\n\nFixes: PR d/95166\n       PR d/95167\n       PR d/95168\n\nReviewed-on: https://github.com/dlang/druntime/pull/3107\n\t     https://github.com/dlang/phobos/pull/7486", "tree": {"sha": "7987b9c20f00ff87cf7e86b9493014b39462cdd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7987b9c20f00ff87cf7e86b9493014b39462cdd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e977a5df5bae2bce6e3e95456f5da0dbfdd02934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e977a5df5bae2bce6e3e95456f5da0dbfdd02934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e977a5df5bae2bce6e3e95456f5da0dbfdd02934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e977a5df5bae2bce6e3e95456f5da0dbfdd02934/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc558e28014f0d85247398c89e7cf75d92df1bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc558e28014f0d85247398c89e7cf75d92df1bd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc558e28014f0d85247398c89e7cf75d92df1bd3"}], "stats": {"total": 72, "additions": 56, "deletions": 16}, "files": [{"sha": "5e3bf3b795a99b92c38e9576e402fd83c2676d71", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e977a5df5bae2bce6e3e95456f5da0dbfdd02934/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e977a5df5bae2bce6e3e95456f5da0dbfdd02934/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=e977a5df5bae2bce6e3e95456f5da0dbfdd02934", "patch": "@@ -1,4 +1,4 @@\n-7bdd83d7b4bd9fd4cb9ffca0d50babc90b31bfd6\n+5cc061a8733731d5b40334c0eb7a927b6d6241ce\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "2ba13b55bf1bb828058f709f3bea99aaa5f93d7e", "filename": "libphobos/libdruntime/core/cpuid.d", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e977a5df5bae2bce6e3e95456f5da0dbfdd02934/libphobos%2Flibdruntime%2Fcore%2Fcpuid.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e977a5df5bae2bce6e3e95456f5da0dbfdd02934/libphobos%2Flibdruntime%2Fcore%2Fcpuid.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fcpuid.d?ref=e977a5df5bae2bce6e3e95456f5da0dbfdd02934", "patch": "@@ -941,13 +941,27 @@ void cpuidX86()\n             datacache[0].lineSize = 32;\n         }\n     }\n-    if (max_cpuid >= 0x0B) {\n+    if (cf.probablyIntel && max_cpuid >= 0x0B) {\n         // For Intel i7 and later, use function 0x0B to determine\n         // cores and hyperthreads.\n         getCpuInfo0B();\n     } else {\n         if (hyperThreadingBit) cf.maxThreads = (apic>>>16) & 0xFF;\n         else cf.maxThreads = cf.maxCores;\n+\n+        if (cf.probablyAMD && max_extended_cpuid >= 0x8000_001E) {\n+            version (GNU) asm pure nothrow @nogc {\n+                \"cpuid\" : \"=a\" (a), \"=b\" (b) : \"a\" (0x8000_001E) : \"ecx\", \"edx\";\n+            } else {\n+                asm pure nothrow @nogc {\n+                    mov EAX, 0x8000_001e;\n+                    cpuid;\n+                    mov b, EBX;\n+                }\n+            }\n+            ubyte coresPerComputeUnit = ((b >> 8) & 3) + 1;\n+            cf.maxCores = cf.maxThreads / coresPerComputeUnit;\n+        }\n     }\n }\n \n@@ -975,7 +989,7 @@ bool hasCPUID()\n                 xor {(%%esp), %%eax|eax, [esp]}\n                                            # eax = whichever bits were changed\n                 popf{l|d}                  # Restore original EFLAGS\n-                \" : \"=a\" flags;\n+                \" : \"=a\" (flags);\n             }\n         }\n         else version (D_InlineAsm_X86)"}, {"sha": "5900ca7c6a4394ab33832d5b9b5e3476c1463f9c", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e977a5df5bae2bce6e3e95456f5da0dbfdd02934/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e977a5df5bae2bce6e3e95456f5da0dbfdd02934/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=e977a5df5bae2bce6e3e95456f5da0dbfdd02934", "patch": "@@ -1,4 +1,4 @@\n-bf0d0a37c4c2d8762ceff7d8677e7584b770800f\n+64ed4684fa2a0f2401f5b6df34f6dcb4c3973945\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "445f996ea08c1c3a7a096025862a8b2a7d32c4aa", "filename": "libphobos/src/std/net/curl.d", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e977a5df5bae2bce6e3e95456f5da0dbfdd02934/libphobos%2Fsrc%2Fstd%2Fnet%2Fcurl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e977a5df5bae2bce6e3e95456f5da0dbfdd02934/libphobos%2Fsrc%2Fstd%2Fnet%2Fcurl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fnet%2Fcurl.d?ref=e977a5df5bae2bce6e3e95456f5da0dbfdd02934", "patch": "@@ -2451,7 +2451,6 @@ struct HTTP\n                                                      in char[] value) callback)\n         {\n             import std.algorithm.searching : startsWith;\n-            import std.conv : to;\n             import std.regex : regex, match;\n             import std.uni : toLower;\n \n@@ -2471,18 +2470,8 @@ struct HTTP\n                     if (header.startsWith(\"HTTP/\"))\n                     {\n                         headersIn.clear();\n-\n-                        const m = match(header, regex(r\"^HTTP/(\\d+)\\.(\\d+) (\\d+) (.*)$\"));\n-                        if (m.empty)\n+                        if (parseStatusLine(header, status))\n                         {\n-                            // Invalid status line\n-                        }\n-                        else\n-                        {\n-                            status.majorVersion = to!ushort(m.captures[1]);\n-                            status.minorVersion = to!ushort(m.captures[2]);\n-                            status.code = to!ushort(m.captures[3]);\n-                            status.reason = m.captures[4].idup;\n                             if (onReceiveStatusLine != null)\n                                 onReceiveStatusLine(status);\n                         }\n@@ -2517,6 +2506,37 @@ struct HTTP\n \n     private RefCounted!Impl p;\n \n+    /// Parse status line, as received from / generated by cURL.\n+    private static bool parseStatusLine(in char[] header, out StatusLine status) @safe\n+    {\n+        import std.conv : to;\n+        import std.regex : regex, match;\n+\n+        const m = match(header, regex(r\"^HTTP/(\\d+)(?:\\.(\\d+))? (\\d+)(?: (.*))?$\"));\n+        if (m.empty)\n+            return false; // Invalid status line\n+        else\n+        {\n+            status.majorVersion = to!ushort(m.captures[1]);\n+            status.minorVersion = m.captures[2].length ? to!ushort(m.captures[2]) : 0;\n+            status.code = to!ushort(m.captures[3]);\n+            status.reason = m.captures[4].idup;\n+            return true;\n+        }\n+    }\n+\n+    @safe unittest\n+    {\n+        StatusLine status;\n+        assert(parseStatusLine(\"HTTP/1.1 200 OK\", status)\n+            && status == StatusLine(1, 1, 200, \"OK\"));\n+        assert(parseStatusLine(\"HTTP/1.0 304 Not Modified\", status)\n+            && status == StatusLine(1, 0, 304, \"Not Modified\"));\n+        // The HTTP2 protocol is binary; cURL generates this fake text header.\n+        assert(parseStatusLine(\"HTTP/2 200\", status)\n+            && status == StatusLine(2, 0, 200, null));\n+    }\n+\n     /** Time condition enumeration as an alias of $(REF CurlTimeCond, etc,c,curl)\n \n         $(HTTP www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.25, _RFC2616 Section 14.25)"}, {"sha": "8b130ea2dd9ce123063ed7ef1da12b11caf161d5", "filename": "libphobos/src/std/zip.d", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e977a5df5bae2bce6e3e95456f5da0dbfdd02934/libphobos%2Fsrc%2Fstd%2Fzip.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e977a5df5bae2bce6e3e95456f5da0dbfdd02934/libphobos%2Fsrc%2Fstd%2Fzip.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fzip.d?ref=e977a5df5bae2bce6e3e95456f5da0dbfdd02934", "patch": "@@ -970,6 +970,12 @@ version (Posix) @system unittest\n {\n     import std.datetime, std.file, std.format, std.path, std.process, std.stdio;\n \n+    if (executeShell(\"unzip\").status != 0)\n+    {\n+        writeln(\"Can't run unzip, skipping unzip test\");\n+        return;\n+    }\n+\n     auto zr = new ZipArchive();\n     auto am = new ArchiveMember();\n     am.compressionMethod = CompressionMethod.deflate;"}]}