{"sha": "f094665d465cdf8903797cc58bea13007e588616", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA5NDY2NWQ0NjVjZGY4OTAzNzk3Y2M1OGJlYTEzMDA3ZTU4ODYxNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-21T06:32:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-21T06:32:15Z"}, "message": "libstdc++: Avoid constraint recursion with iterator_traits (PR 93983)\n\nChecking whether a filesystem::path constructor argument is an iterator\nrequires instantiating std::iterator_traits. In C++20 that checks for\nsatisfaction of std::iterator_traits constraints, which checks if the\ntype is copyable, which can end up recursing back to the path\nconstructor. The fix in LWG 3420 is to reorder the cpp17-iterator\nconcept's constraints to check if the type looks vaguely like an\niterator before checking copyable. That avoids the recursion for types\nwhich definitely aren't iterators, but isn't foolproof.\n\n\tPR libstdc++/93983\n\t* include/bits/iterator_concepts.h (__detail::__cpp17_iterator):\n\tReorder constraints to avoid recursion when constructors use\n\titerator_traits (LWG 3420).\n\t* testsuite/24_iterators/customization_points/lwg3420.cc: New test.", "tree": {"sha": "aaba8503c176f01d259b33b59e3a84001a0939ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaba8503c176f01d259b33b59e3a84001a0939ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f094665d465cdf8903797cc58bea13007e588616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f094665d465cdf8903797cc58bea13007e588616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f094665d465cdf8903797cc58bea13007e588616", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f094665d465cdf8903797cc58bea13007e588616/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48c28b17a9de54a402b92e0564f64afe4d3f83e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c28b17a9de54a402b92e0564f64afe4d3f83e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c28b17a9de54a402b92e0564f64afe4d3f83e5"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "95c15977796ce6053e8251dd036e5c88c0936685", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f094665d465cdf8903797cc58bea13007e588616/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f094665d465cdf8903797cc58bea13007e588616/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f094665d465cdf8903797cc58bea13007e588616", "patch": "@@ -1,5 +1,11 @@\n 2020-05-21  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/93983\n+\t* include/bits/iterator_concepts.h (__detail::__cpp17_iterator):\n+\tReorder constraints to avoid recursion when constructors use\n+\titerator_traits (LWG 3420).\n+\t* testsuite/24_iterators/customization_points/lwg3420.cc: New test.\n+\n \t* include/experimental/socket (basic_socket::is_open()\n \t(basic_socket_acceptor::is_open()): Use _GLIBCXX_NODISCARD macro.\n "}, {"sha": "31b58408fe984f1ba7bd6af0400669f9343e3f60", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f094665d465cdf8903797cc58bea13007e588616/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f094665d465cdf8903797cc58bea13007e588616/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=f094665d465cdf8903797cc58bea13007e588616", "patch": "@@ -249,14 +249,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   namespace __detail\n   {\n+    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+    // 3420. cpp17-iterator should check [type] looks like an iterator first\n     template<typename _Iter>\n-      concept __cpp17_iterator = copyable<_Iter>\n-\t&& requires(_Iter __it)\n+      concept __cpp17_iterator = requires(_Iter __it)\n \t{\n \t  { *__it } -> __can_reference;\n \t  { ++__it } -> same_as<_Iter&>;\n \t  { *__it++ } -> __can_reference;\n-\t};\n+\t} && copyable<_Iter>;\n \n     template<typename _Iter>\n       concept __cpp17_input_iterator = __cpp17_iterator<_Iter>\n@@ -269,7 +270,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   typename indirectly_readable_traits<_Iter>::value_type&>;\n \t  typename common_reference_t<decltype(*__it++)&&,\n \t\t   typename indirectly_readable_traits<_Iter>::value_type&>;\n-\t  requires signed_integral<typename incrementable_traits<_Iter>::difference_type>;\n+\t  requires signed_integral<\n+\t    typename incrementable_traits<_Iter>::difference_type>;\n \t};\n \n     template<typename _Iter>"}, {"sha": "72289a995fca5c96f8157ba0c9a9703f6eafe201", "filename": "libstdc++-v3/testsuite/24_iterators/customization_points/lwg3420.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f094665d465cdf8903797cc58bea13007e588616/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2Flwg3420.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f094665d465cdf8903797cc58bea13007e588616/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2Flwg3420.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcustomization_points%2Flwg3420.cc?ref=f094665d465cdf8903797cc58bea13007e588616", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// PR libstdc++/93983\n+\n+// LWG 3420.\n+// cpp17-iterator should check that the type looks like an iterator first\n+\n+#include <filesystem>\n+#include <iterator>\n+#include <concepts>\n+\n+struct Foo\n+{\n+  Foo(const std::filesystem::path& p);\n+};\n+\n+static_assert(std::copyable<Foo>);\n+\n+struct X\n+{\n+  template<typename T, typename = std::iterator_traits<T>::iterator_category>\n+    X(const T&);\n+};\n+\n+static_assert(std::copyable<X>);"}]}