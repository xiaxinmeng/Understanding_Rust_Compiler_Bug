{"sha": "f454bd6436a824b4be34e5e1ba5515c5bd339980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ1NGJkNjQzNmE4MjRiNGJlMzRlNWUxYmE1NTE1YzViZDMzOTk4MA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-03-02T00:16:52Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-03-02T00:16:52Z"}, "message": "PR c++/84294 - attributes on a function template redeclaration silently discarded\n\ngcc/cp/ChangeLog:\n\n\tPR c++/84294\n\t* decl.c (check_redeclaration_no_default_args): Merge attributes\n\tspecified on redeclarations of the same function template.\n\tRemove dead code.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/84294\n\t* g++.dg/ext/attr-const.C: Remove xfail.\n\t* g++.dg/ext/attr-malloc-3.C: New test.\n\t* g++.dg/ext/attr-noinline-3.C: New test.\n\t* g++.dg/ext/attr-noreturn-3.C: New test.\n\t* g++.dg/ext/attr-nothrow-3.C: New test.\n\t* g++.dg/ext/attr-pure.C: Remove xfail.\n\nFrom-SVN: r258121", "tree": {"sha": "cee828d0eac6e44f1cc71a1ff52714d4f331aaa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cee828d0eac6e44f1cc71a1ff52714d4f331aaa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f454bd6436a824b4be34e5e1ba5515c5bd339980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f454bd6436a824b4be34e5e1ba5515c5bd339980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f454bd6436a824b4be34e5e1ba5515c5bd339980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f454bd6436a824b4be34e5e1ba5515c5bd339980/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3a0e110e06ad9383ba9a09be2ac61d3957596c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a0e110e06ad9383ba9a09be2ac61d3957596c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3a0e110e06ad9383ba9a09be2ac61d3957596c5"}], "stats": {"total": 249, "additions": 208, "deletions": 41}, "files": [{"sha": "2d5363c4ddc69f2148c88d7b0b9f300eada9730e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f454bd6436a824b4be34e5e1ba5515c5bd339980", "patch": "@@ -1,3 +1,10 @@\n+2018-03-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/84294\n+\t* decl.c (check_redeclaration_no_default_args): Merge attributes\n+\tspecified on redeclarations of the same function template.\n+\tRemove dead code.\n+\n 2018-03-01  Marek Polacek  <polacek@redhat.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "735ed5d63d25cf6df89627d7f7b890c501b91bec", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 29, "deletions": 35, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f454bd6436a824b4be34e5e1ba5515c5bd339980", "patch": "@@ -1355,6 +1355,26 @@ check_redeclaration_no_default_args (tree decl)\n       }\n }\n \n+/* Merge tree bits that correspond to attributes noreturn, nothrow,\n+   const,  malloc, and pure from NEWDECL with those of OLDDECL.  */\n+\n+static void\n+merge_attribute_bits (tree newdecl, tree olddecl)\n+{\n+  TREE_THIS_VOLATILE (newdecl) |= TREE_THIS_VOLATILE (olddecl);\n+  TREE_THIS_VOLATILE (olddecl) |= TREE_THIS_VOLATILE (newdecl);\n+  TREE_NOTHROW (newdecl) |= TREE_NOTHROW (olddecl);\n+  TREE_NOTHROW (olddecl) |= TREE_NOTHROW (newdecl);\n+  TREE_READONLY (newdecl) |= TREE_READONLY (olddecl);\n+  TREE_READONLY (olddecl) |= TREE_READONLY (newdecl);\n+  DECL_IS_MALLOC (newdecl) |= DECL_IS_MALLOC (olddecl);\n+  DECL_IS_MALLOC (olddecl) |= DECL_IS_MALLOC (newdecl);\n+  DECL_PURE_P (newdecl) |= DECL_PURE_P (olddecl);\n+  DECL_PURE_P (olddecl) |= DECL_PURE_P (newdecl);\n+  DECL_UNINLINABLE (newdecl) |= DECL_UNINLINABLE (olddecl);\n+  DECL_UNINLINABLE (olddecl) |= DECL_UNINLINABLE (newdecl);\n+}\n+\n #define GNU_INLINE_P(fn) (DECL_DECLARED_INLINE_P (fn)\t\t\t\\\n \t\t\t  && lookup_attribute (\"gnu_inline\",\t\t\\\n \t\t\t\t\t       DECL_ATTRIBUTES (fn)))\n@@ -2048,6 +2068,8 @@ next_arg:;\n \t      DECL_DISREGARD_INLINE_LIMITS (old_result)\n \t        |= DECL_DISREGARD_INLINE_LIMITS (new_result);\n \t      check_redeclaration_exception_specification (newdecl, olddecl);\n+\n+\t      merge_attribute_bits (new_result, old_result);\n \t    }\n \t}\n \n@@ -2228,18 +2250,7 @@ next_arg:;\n \t    |= DECL_LOOPING_CONST_OR_PURE_P (olddecl);\n \n \t  if (merge_attr)\n-\t    {\n-\t      TREE_THIS_VOLATILE (newdecl) |= TREE_THIS_VOLATILE (olddecl);\n-\t      TREE_THIS_VOLATILE (olddecl) |= TREE_THIS_VOLATILE (newdecl);\n-\t      TREE_NOTHROW (newdecl) |= TREE_NOTHROW (olddecl);\n-\t      TREE_NOTHROW (olddecl) |= TREE_NOTHROW (newdecl);\n-\t      TREE_READONLY (newdecl) |= TREE_READONLY (olddecl);\n-\t      TREE_READONLY (olddecl) |= TREE_READONLY (newdecl);\n-\t      DECL_IS_MALLOC (newdecl) |= DECL_IS_MALLOC (olddecl);\n-\t      DECL_IS_MALLOC (olddecl) |= DECL_IS_MALLOC (newdecl);\n-\t      DECL_PURE_P (newdecl) |= DECL_PURE_P (olddecl);\n-\t      DECL_PURE_P (olddecl) |= DECL_PURE_P (newdecl);\n-\t    }\n+\t    merge_attribute_bits (newdecl, olddecl);\n \t  else\n \t    {\n \t      /* Merge the noreturn bit.  */\n@@ -2412,32 +2423,15 @@ next_arg:;\n \n \t  /* [temp.expl.spec/14] We don't inline explicit specialization\n \t     just because the primary template says so.  */\n+\t  gcc_assert (!merge_attr);\n \n-\t  if (merge_attr)\n-\t    {\n-\t      /* But still keep DECL_DISREGARD_INLINE_LIMITS in sync with\n-\t\t the always_inline attribute.  */\n-\t      if (DECL_DISREGARD_INLINE_LIMITS (olddecl)\n-\t\t  && !DECL_DISREGARD_INLINE_LIMITS (newdecl))\n-\t\t{\n-\t\t  if (DECL_DECLARED_INLINE_P (newdecl))\n-\t\t    DECL_DISREGARD_INLINE_LIMITS (newdecl) = true;\n-\t\t  else\n-\t\t    DECL_ATTRIBUTES (newdecl)\n-\t\t      = remove_attribute (\"always_inline\",\n-\t\t\t\t\t  DECL_ATTRIBUTES (newdecl));\n-\t\t}\n-\t    }\n-\t  else\n-\t    {\n-\t      DECL_DECLARED_INLINE_P (olddecl)\n-\t\t= DECL_DECLARED_INLINE_P (newdecl);\n+\t  DECL_DECLARED_INLINE_P (olddecl)\n+\t    = DECL_DECLARED_INLINE_P (newdecl);\n \n-\t      DECL_DISREGARD_INLINE_LIMITS (olddecl)\n-\t\t= DECL_DISREGARD_INLINE_LIMITS (newdecl);\n+\t  DECL_DISREGARD_INLINE_LIMITS (olddecl)\n+\t    = DECL_DISREGARD_INLINE_LIMITS (newdecl);\n \n-\t      DECL_UNINLINABLE (olddecl) = DECL_UNINLINABLE (newdecl);\n-\t    }\n+\t  DECL_UNINLINABLE (olddecl) = DECL_UNINLINABLE (newdecl);\n \t}\n       else if (new_defines_function && DECL_INITIAL (olddecl))\n \t{"}, {"sha": "62fde2d5bbd2d3d8bbc2717e7fcde6ae107d6f4b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f454bd6436a824b4be34e5e1ba5515c5bd339980", "patch": "@@ -1,3 +1,13 @@\n+2018-03-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/84294\n+\t* g++.dg/ext/attr-const.C: Remove xfail.\n+\t* g++.dg/ext/attr-malloc-3.C: New test.\n+\t* g++.dg/ext/attr-noinline-3.C: New test.\n+\t* g++.dg/ext/attr-noreturn-3.C: New test.\n+\t* g++.dg/ext/attr-nothrow-3.C: New test.\n+\t* g++.dg/ext/attr-pure.C: Remove xfail.\n+\n 2018-03-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/70875"}, {"sha": "17cdae6bfbc0726223c3babbbf3e3bb2ef297348", "filename": "gcc/testsuite/g++.dg/ext/attr-const.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-const.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-const.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-const.C?ref=f454bd6436a824b4be34e5e1ba5515c5bd339980", "patch": "@@ -68,6 +68,5 @@ void test_fnone_const ()\n   if (i0 != i1)\n     templ_none_const_failed ();\n \n-  // The following fails (most likely) due to bug 84294.\n-  // { dg-final { scan-tree-dump-not \"templ_none_const_failed\" \"optimized\" { xfail *-*-* } } }\n+  // { dg-final { scan-tree-dump-not \"templ_none_const_failed\" \"optimized\" } }\n }"}, {"sha": "5f91ee1093437476d74e762151b4be2135240296", "filename": "gcc/testsuite/g++.dg/ext/attr-malloc-3.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-malloc-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-malloc-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-malloc-3.C?ref=f454bd6436a824b4be34e5e1ba5515c5bd339980", "patch": "@@ -91,7 +91,6 @@ void test_templ_none_malloc (void)\n   if (p == a)                       // must be false\n     templ_none_malloc_failed ();    // should be eliminated\n \n-  // The following fails (most likely) due to bug 84294.\n   // Verify that the call to templ_none_malloc_failed() is eliminated.\n-  // { dg-final { scan-tree-dump-not \"templ_none_malloc_failed\" \"optimized\" { xfail *-*-* } } }\n+  // { dg-final { scan-tree-dump-not \"templ_none_malloc_failed\" \"optimized\" } }\n }"}, {"sha": "f3f98560846c50cf1f42d375625ddf3dca49f167", "filename": "gcc/testsuite/g++.dg/ext/attr-noinline-3.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-noinline-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-noinline-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-noinline-3.C?ref=f454bd6436a824b4be34e5e1ba5515c5bd339980", "patch": "@@ -0,0 +1,45 @@\n+/*  PR c++/84294 - attributes on a function template redeclaration silently\n+    discarded\n+    { dg-do compile }\n+    { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+template <void test ()>\n+void test_func ()\n+{\n+  test ();\n+}\n+\n+int x;\n+\n+void __attribute__ ((noinline)) func_noinline_none ();\n+void func_noinline_none () { x = __LINE__; }\n+\n+template void test_func<func_noinline_none>();\n+// { dg-final { scan-tree-dump-times \"func_noinline_none *\\\\(\\\\);\" 1 \"optimized\" } }\n+\n+\n+void func_none_noinline ();\n+void  __attribute__ ((noinline)) func_none_noinline () { x = __LINE__; }\n+\n+template void test_func<func_none_noinline>();\n+// { dg-final { scan-tree-dump-times \"func_none_noinline *\\\\(\\\\);\" 1 \"optimized\" } }\n+\n+\n+template <class>\n+void __attribute__ ((noinline)) templ_noinline_none () { x = __LINE__; }\n+\n+template <class>\n+void templa_noinline_none ();\n+\n+template void test_func<templ_noinline_none<int> >();\n+// { dg-final { scan-tree-dump-times \"templ_noinline_none<int> *\\\\(\\\\);\" 1 \"optimized\" } }\n+\n+\n+template <class>\n+void templ_none_noinline ();\n+\n+template <class>\n+void  __attribute__ ((noinline)) templ_none_noinline () { x = __LINE__; }\n+\n+template void test_func<templ_none_noinline<int> >();\n+// { dg-final { scan-tree-dump-times \"templ_none_noinline<int> *\\\\(\\\\);\" 1 \"optimized\" } }"}, {"sha": "819ed3276102a77f64d718cc10f4ab2a7c3734ab", "filename": "gcc/testsuite/g++.dg/ext/attr-noreturn-3.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-noreturn-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-noreturn-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-noreturn-3.C?ref=f454bd6436a824b4be34e5e1ba5515c5bd339980", "patch": "@@ -0,0 +1,54 @@\n+/*  PR c++/84294 - attributes on a function template redeclaration silently\n+    discarded\n+    { dg-do compile }\n+    { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+typedef void Func ();\n+\n+template <Func>\n+void fail_func ();\n+\n+template <Func test>\n+int test_func ()\n+{\n+  test ();\n+\n+  // Should be eliminated.\n+  fail_func<test> ();\n+\n+  // Expect no -Wreturn type here despite the absence of a return\n+  // statement in a non-void function.\n+}   // { dg-bogus \"\\\\\\[-Wreturn-type]\" \"bug 84621\" { xfail *-*-* } }\n+\n+void __attribute__ ((noreturn)) func_noreturn_none ();\n+void func_noreturn_none ();\n+\n+template int test_func<func_noreturn_none>();\n+\n+\n+void func_none_noreturn ();\n+void  __attribute__ ((noreturn)) func_none_noreturn ();\n+\n+template int test_func<func_none_noreturn>();\n+\n+\n+template <class>\n+void __attribute__ ((noreturn)) templ_noreturn_none ();\n+\n+template <class>\n+void templa_noreturn_none ();\n+\n+template int test_func<templ_noreturn_none<int> >();\n+\n+\n+template <class>\n+void templ_none_noreturn ();\n+\n+template <class>\n+void  __attribute__ ((noreturn)) templ_none_noreturn ();\n+\n+template int test_func<templ_none_noreturn<int> >();\n+\n+\n+// Verify that calls to fail_func() specializations have been eliminated.\n+// { dg-final { scan-tree-dump-not \"fail_func\" \"optimized\" } }"}, {"sha": "ed88826103f22b99a5623d4a8c31f82d0c5ee163", "filename": "gcc/testsuite/g++.dg/ext/attr-nothrow-3.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-nothrow-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-nothrow-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-nothrow-3.C?ref=f454bd6436a824b4be34e5e1ba5515c5bd339980", "patch": "@@ -0,0 +1,60 @@\n+/*  PR c++/84294 - attributes on a function template redeclaration silently\n+    discarded\n+    { dg-do compile }\n+    { dg-options \"-O -fdump-tree-eh -fdump-tree-optimized\" } */\n+\n+typedef void Func ();\n+\n+template <Func>\n+void fail_func () throw ();\n+\n+template <Func test>\n+void test_func () throw ()\n+{\n+  try\n+    {\n+      test ();\n+    }\n+  catch (...)\n+    {\n+      // Should be eliminated.\n+      fail_func<test> ();\n+    }\n+}\n+\n+void __attribute__ ((nothrow)) func_nothrow_none ();\n+void func_nothrow_none ();\n+\n+template void test_func<func_nothrow_none>();\n+\n+\n+void func_none_nothrow ();\n+void  __attribute__ ((nothrow)) func_none_nothrow ();\n+\n+template void test_func<func_none_nothrow>();\n+\n+\n+template <class>\n+void __attribute__ ((nothrow)) templ_nothrow_none ();\n+\n+template <class>\n+void templa_nothrow_none ();\n+\n+template void test_func<templ_nothrow_none<int> >();\n+\n+\n+template <class>\n+void templ_none_nothrow ();\n+\n+template <class>\n+void  __attribute__ ((nothrow)) templ_none_nothrow ();\n+\n+template void test_func<templ_none_nothrow<int> >();\n+\n+\n+// Verify that no exception handling code was emitted.\n+// { dg-final { scan-tree-dump-not \"eh_dispatch\" \"eh\" } }\n+// { dg-final { scan-tree-dump-not \"resx\" \"eh\" } }\n+\n+// Verify that calls to fail_func() specializations have been eliminated.\n+// { dg-final { scan-tree-dump-not \"fail_func\" \"optimized\" } }"}, {"sha": "0f259868be18199705e674456a1907f241297892", "filename": "gcc/testsuite/g++.dg/ext/attr-pure.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-pure.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f454bd6436a824b4be34e5e1ba5515c5bd339980/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-pure.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-pure.C?ref=f454bd6436a824b4be34e5e1ba5515c5bd339980", "patch": "@@ -69,6 +69,5 @@ void test_fnone_const ()\n   if (i0 != i1)\n     templ_none_const_failed ();\n \n-  // The following fails (most likely) due to bug 84294.\n-  // { dg-final { scan-tree-dump-not \"templ_none_const_failed\" \"optimized\" { xfail *-*-* } } }\n+  // { dg-final { scan-tree-dump-not \"templ_none_const_failed\" \"optimized\" } }\n }"}]}