{"sha": "ab4c578f0ce61491c694bea751323973fabf0f95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI0YzU3OGYwY2U2MTQ5MWM2OTRiZWE3NTEzMjM5NzNmYWJmMGY5NQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-03-16T15:51:47Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-03-16T15:51:47Z"}, "message": "re PR c/70093 (Instancing function with VM return type cases internal compiler error in 'assign_stack_temp_for_type'.)\n\n\tPR c/70093\n\t* c-typeck.c (build_function_call_vec): Create a TARGET_EXPR for\n\tnested functions returning VM types.\n\n\t* cgraphunit.c (cgraph_node::expand_thunk): Also build call to the\n\tfunction being thunked if the result type doesn't have fixed size.\n\t* gimplify.c (gimplify_modify_expr): Also set LHS if the result type\n\tdoesn't have fixed size.\n\n\t* gcc.dg/nested-func-10.c: New test.\n\t* gcc.dg/nested-func-9.c: New test.\n\nFrom-SVN: r234259", "tree": {"sha": "ae34ca036a37457ea8c7f084769e76de4294edff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae34ca036a37457ea8c7f084769e76de4294edff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab4c578f0ce61491c694bea751323973fabf0f95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab4c578f0ce61491c694bea751323973fabf0f95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab4c578f0ce61491c694bea751323973fabf0f95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab4c578f0ce61491c694bea751323973fabf0f95/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5387e76b79440e3cb4d7392d7aea66037d375b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5387e76b79440e3cb4d7392d7aea66037d375b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5387e76b79440e3cb4d7392d7aea66037d375b8"}], "stats": {"total": 140, "additions": 138, "deletions": 2}, "files": [{"sha": "0af222ed70f61577bd31fea0f23d29a0e92ef77d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab4c578f0ce61491c694bea751323973fabf0f95", "patch": "@@ -1,3 +1,11 @@\n+2016-03-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/70093\n+\t* cgraphunit.c (cgraph_node::expand_thunk): Also build call to the\n+\tfunction being thunked if the result type doesn't have fixed size.\n+\t* gimplify.c (gimplify_modify_expr): Also set LHS if the result type\n+\tdoesn't have fixed size.\n+\n 2016-03-16  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-vect-loop.c (vect_analyze_loop_2): Fix wrong dump info by"}, {"sha": "fa657e588c082cad2fcde7a1b5898aa9f6f25e64", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=ab4c578f0ce61491c694bea751323973fabf0f95", "patch": "@@ -1,3 +1,9 @@\n+2016-03-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/70093\n+\t* c-typeck.c (build_function_call_vec): Create a TARGET_EXPR for\n+\tnested functions returning VM types.\n+\n 2016-03-09  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* c-parser.c (c_parser_oacc_loop): Update cclauses and clauses"}, {"sha": "de9d4657799906a0b28ad8c48e106107584d4af5", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=ab4c578f0ce61491c694bea751323973fabf0f95", "patch": "@@ -3068,6 +3068,16 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n     result = build_call_array_loc (loc, TREE_TYPE (fntype),\n \t\t\t\t   function, nargs, argarray);\n \n+  /* In this improbable scenario, a nested function returns a VM type.\n+     Create a TARGET_EXPR so that the call always has a LHS, much as\n+     what the C++ FE does for functions returning non-PODs.  */\n+  if (variably_modified_type_p (TREE_TYPE (fntype), NULL_TREE))\n+    {\n+      tree tmp = create_tmp_var_raw (TREE_TYPE (fntype));\n+      result = build4 (TARGET_EXPR, TREE_TYPE (fntype), tmp, result,\n+\t\t       NULL_TREE, NULL_TREE);\n+    }\n+\n   if (VOID_TYPE_P (TREE_TYPE (result)))\n     {\n       if (TYPE_QUALS (TREE_TYPE (result)) != TYPE_UNQUALIFIED)"}, {"sha": "4351ae49952207292f9a1b3b687b7302dabbf127", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=ab4c578f0ce61491c694bea751323973fabf0f95", "patch": "@@ -1708,7 +1708,9 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n \n       /* Build call to the function being thunked.  */\n       if (!VOID_TYPE_P (restype)\n-\t  && (!alias_is_noreturn || TREE_ADDRESSABLE (restype)))\n+\t  && (!alias_is_noreturn\n+\t      || TREE_ADDRESSABLE (restype)\n+\t      || TREE_CODE (TYPE_SIZE_UNIT (restype)) != INTEGER_CST))\n \t{\n \t  if (DECL_BY_REFERENCE (resdecl))\n \t    {"}, {"sha": "692d168c3b4e1f0c6c390010938097eb5dc839da", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ab4c578f0ce61491c694bea751323973fabf0f95", "patch": "@@ -4838,7 +4838,8 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t}\n       notice_special_calls (call_stmt);\n       if (!gimple_call_noreturn_p (call_stmt)\n-\t  || TREE_ADDRESSABLE (TREE_TYPE (*to_p)))\n+\t  || TREE_ADDRESSABLE (TREE_TYPE (*to_p))\n+\t  || TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (*to_p))) != INTEGER_CST)\n \tgimple_call_set_lhs (call_stmt, *to_p);\n       assign = call_stmt;\n     }"}, {"sha": "5b469568e0e96dca89e6e4f1706fed8dbc15be0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab4c578f0ce61491c694bea751323973fabf0f95", "patch": "@@ -1,3 +1,9 @@\n+2016-03-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/70093\n+\t* gcc.dg/nested-func-10.c: New test.\n+\t* gcc.dg/nested-func-9.c: New test.\n+\n 2016-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/68714"}, {"sha": "ac6f76fbbe7c66a08ad00f04c3b3da7a9249b8a8", "filename": "gcc/testsuite/gcc.dg/nested-func-10.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-10.c?ref=ab4c578f0ce61491c694bea751323973fabf0f95", "patch": "@@ -0,0 +1,56 @@\n+/* PR c/70093 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+void __attribute__((noinline, noclone))\n+foo (int n)\n+{\n+  struct S { int a[n]; };\n+\n+  struct S __attribute__((noreturn))\n+  fn (void)\n+  {\n+    __builtin_abort ();\n+  }\n+\n+  auto struct S __attribute__((noreturn))\n+  fn2 (void)\n+  {\n+    __builtin_abort ();\n+  }\n+\n+  struct S x;\n+  __typeof__ (fn ()) *p = &x;\n+  switch (n)\n+    {\n+    case 1:\n+      fn ();\n+      break;\n+    case 2:\n+      fn2 ();\n+      break;\n+    case 3:\n+      x = fn ();\n+      if (x.a[0] != 42)\n+\t__builtin_abort ();\n+      break;\n+    case 4:\n+      if (fn ().a[0] != 42)\n+\t__builtin_abort ();\n+      break;\n+    case 5:\n+      if (p->a[0] != 42)\n+\t__builtin_abort ();\n+      break;\n+    case 6:\n+      if (fn2 ().a[0] != 42)\n+\t__builtin_abort ();\n+      break;\n+    }\n+}\n+\n+int\n+main (void)\n+{\n+  foo (1);\n+}"}, {"sha": "902c258539354b107a6e3dfb44636ef3e988fa4e", "filename": "gcc/testsuite/gcc.dg/nested-func-9.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4c578f0ce61491c694bea751323973fabf0f95/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnested-func-9.c?ref=ab4c578f0ce61491c694bea751323973fabf0f95", "patch": "@@ -0,0 +1,47 @@\n+/* PR c/70093 */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+\n+void\n+foo (int n)\n+{\n+  struct S { int a[n]; };\n+\n+  struct S\n+  fn (void)\n+  {\n+    struct S s;\n+    s.a[0] = 42;\n+    return s;\n+  }\n+\n+  auto struct S\n+  fn2 (void)\n+  {\n+    return fn ();\n+  }\n+\n+  struct S x;\n+  fn ();\n+  fn2 ();\n+  x = fn ();\n+\n+  if (x.a[0] != 42)\n+    __builtin_abort ();\n+\n+  if (fn ().a[0] != 42)\n+    __builtin_abort ();\n+\n+  __typeof__ (fn ()) *p = &x;\n+  if (p->a[0] != 42)\n+    __builtin_abort ();\n+\n+  if (fn2 ().a[0] != 42)\n+    __builtin_abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  foo (1);\n+}"}]}