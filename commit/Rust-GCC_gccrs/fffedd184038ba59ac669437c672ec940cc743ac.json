{"sha": "fffedd184038ba59ac669437c672ec940cc743ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZmZWRkMTg0MDM4YmE1OWFjNjY5NDM3YzY3MmVjOTQwY2M3NDNhYw==", "commit": {"author": {"name": "Philip Herron", "email": "phil@nebuloninc.com", "date": "2020-05-16T19:30:04Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T19:12:14Z"}, "message": "Add a basic lookup for builtin types", "tree": {"sha": "325025b0b4eda2cb1b5fa1d6f5aa5eb7f9ef1f9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/325025b0b4eda2cb1b5fa1d6f5aa5eb7f9ef1f9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fffedd184038ba59ac669437c672ec940cc743ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fffedd184038ba59ac669437c672ec940cc743ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fffedd184038ba59ac669437c672ec940cc743ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fffedd184038ba59ac669437c672ec940cc743ac/comments", "author": null, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9289b5969123d8c4edc94f3de62deb7921f572d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9289b5969123d8c4edc94f3de62deb7921f572d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9289b5969123d8c4edc94f3de62deb7921f572d"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "fe4dd6dc2864684744f9c87b29dd0aefcc58e9c0", "filename": "gcc/rust/analysis/rust-resolution.cc", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fffedd184038ba59ac669437c672ec940cc743ac/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fffedd184038ba59ac669437c672ec940cc743ac/gcc%2Frust%2Fanalysis%2Frust-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-resolution.cc?ref=fffedd184038ba59ac669437c672ec940cc743ac", "patch": "@@ -1,6 +1,21 @@\n #include \"rust-resolution.h\"\n #include \"rust-diagnostics.h\"\n \n+#define ADD_BUILTIN_TYPE(_X, _S)                                               \\\n+  do                                                                           \\\n+    {                                                                          \\\n+      AST::PathIdentSegment seg (_X);                                          \\\n+      auto typePath = ::std::unique_ptr<AST::TypePathSegment> (                \\\n+\tnew AST::TypePathSegment (::std::move (seg), false,                    \\\n+\t\t\t\t  Linemap::unknown_location ()));              \\\n+      ::std::vector< ::std::unique_ptr<AST::TypePathSegment> > segs;           \\\n+      segs.push_back (::std::move (typePath));                                 \\\n+      auto bType = new AST::TypePath (::std::move (segs),                      \\\n+\t\t\t\t      Linemap::unknown_location (), false);    \\\n+      _S.Insert (_X, bType);                                                   \\\n+    }                                                                          \\\n+  while (0)\n+\n namespace Rust {\n namespace Analysis {\n \n@@ -9,12 +24,22 @@ TypeResolution::TypeResolution (AST::Crate &crate) : crate (crate)\n   typeScope.Push ();\n   scope.Push ();\n \n-  // push all builtin types\n-  // base is parse_path_ident_segment based up on segments\n-  /*  scope.Insert (\"u8\",\n-\t      new AST::MaybeNamedParam (Identifier (\"u8\"),\n-\t\t\t\t\tAST::MaybeNamedParam::IDENTIFIER,\n-\t\t\t\t\tNULL, Location ()));*/\n+  // push all builtin types - this is probably too basic for future needs\n+  ADD_BUILTIN_TYPE (\"u8\", typeScope);\n+  ADD_BUILTIN_TYPE (\"u16\", typeScope);\n+  ADD_BUILTIN_TYPE (\"u32\", typeScope);\n+  ADD_BUILTIN_TYPE (\"u64\", typeScope);\n+\n+  ADD_BUILTIN_TYPE (\"i8\", typeScope);\n+  ADD_BUILTIN_TYPE (\"i16\", typeScope);\n+  ADD_BUILTIN_TYPE (\"i32\", typeScope);\n+  ADD_BUILTIN_TYPE (\"i64\", typeScope);\n+\n+  ADD_BUILTIN_TYPE (\"f32\", typeScope);\n+  ADD_BUILTIN_TYPE (\"f64\", typeScope);\n+\n+  ADD_BUILTIN_TYPE (\"char\", typeScope);\n+  ADD_BUILTIN_TYPE (\"str\", typeScope);\n }\n \n TypeResolution::~TypeResolution ()"}]}