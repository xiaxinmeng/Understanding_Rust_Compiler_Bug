{"sha": "a85b4c91b30eda2893ecf5efeeda4f9dbb518763", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg1YjRjOTFiMzBlZGEyODkzZWNmNWVmZWVkYTRmOWRiYjUxODc2Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:16:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:16:10Z"}, "message": "spu.c (TARGET_TRAMPOLINE_INIT): New.\n\n        * config/spu/spu.c (TARGET_TRAMPOLINE_INIT): New.\n        (array_to_constant): Make ARR parameter const.\n        (spu_trampoline_init): Rename from spu_initialize_trampoline;\n        make static; update for hook parameters.\n        * config/spu/spu-protos.h: Update decls.\n        * config/spu/spu.h (INITIALIZE_TRAMPOLINE): Remove.\n\nFrom-SVN: r152013", "tree": {"sha": "948b3badef5ddaf8773b6791f1b07e4c706fcd76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/948b3badef5ddaf8773b6791f1b07e4c706fcd76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a85b4c91b30eda2893ecf5efeeda4f9dbb518763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a85b4c91b30eda2893ecf5efeeda4f9dbb518763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a85b4c91b30eda2893ecf5efeeda4f9dbb518763", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a85b4c91b30eda2893ecf5efeeda4f9dbb518763/comments", "author": null, "committer": null, "parents": [{"sha": "809e78cc9049087eff6602114512b3f746834c8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809e78cc9049087eff6602114512b3f746834c8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/809e78cc9049087eff6602114512b3f746834c8d"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "9d8bd7898f7ff90ddf515e372dd8672a1d3cd6bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85b4c91b30eda2893ecf5efeeda4f9dbb518763/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85b4c91b30eda2893ecf5efeeda4f9dbb518763/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a85b4c91b30eda2893ecf5efeeda4f9dbb518763", "patch": "@@ -263,6 +263,13 @@\n \t* config/sparc/sparc.h (INITIALIZE_TRAMPOLINE): Remove.\n \t* config/sparc/sparc.md (nonlocal_goto): Don't use static_chain_rtx.\n \n+\t* config/spu/spu.c (TARGET_TRAMPOLINE_INIT): New.\n+\t(array_to_constant): Make ARR parameter const.\n+\t(spu_trampoline_init): Rename from spu_initialize_trampoline;\n+\tmake static; update for hook parameters.\n+\t* config/spu/spu-protos.h: Update decls.\n+\t* config/spu/spu.h (INITIALIZE_TRAMPOLINE): Remove.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "a1f5d13f17c67e504dd955e4c367962ad80a9de6", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85b4c91b30eda2893ecf5efeeda4f9dbb518763/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85b4c91b30eda2893ecf5efeeda4f9dbb518763/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=a85b4c91b30eda2893ecf5efeeda4f9dbb518763", "patch": "@@ -70,7 +70,7 @@ extern int cpat_const_p (rtx x, enum machine_mode mode);\n extern rtx gen_cpat_const (rtx * ops);\n extern void constant_to_array (enum machine_mode mode, rtx x,\n \t\t\t       unsigned char *arr);\n-extern rtx array_to_constant (enum machine_mode mode, unsigned char *arr);\n+extern rtx array_to_constant (enum machine_mode mode, const unsigned char *arr);\n extern rtx spu_gen_exp2 (enum machine_mode mode, rtx x);\n extern void spu_allocate_stack (rtx op0, rtx op1);\n extern void spu_restore_stack_nonlocal (rtx op0, rtx op1);\n@@ -81,7 +81,6 @@ extern void spu_builtin_splats (rtx ops[]);\n extern void spu_builtin_extract (rtx ops[]);\n extern void spu_builtin_insert (rtx ops[]);\n extern void spu_builtin_promote (rtx ops[]);\n-extern void spu_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt);\n extern void spu_expand_sign_extend (rtx ops[]);\n extern void spu_expand_vector_init (rtx target, rtx vals);\n extern void spu_init_expanders (void);"}, {"sha": "b0b2fd27500db90e381238cde0fe7684831b9f27", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85b4c91b30eda2893ecf5efeeda4f9dbb518763/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85b4c91b30eda2893ecf5efeeda4f9dbb518763/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=a85b4c91b30eda2893ecf5efeeda4f9dbb518763", "patch": "@@ -212,6 +212,7 @@ static int spu_sms_res_mii (struct ddg *g);\n static void asm_file_start (void);\n static unsigned int spu_section_type_flags (tree, const char *, int);\n static rtx spu_expand_load (rtx, rtx, rtx, int);\n+static void spu_trampoline_init (rtx, tree, rtx);\n \n extern const char *reg_names[];\n \n@@ -411,6 +412,9 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P spu_legitimate_address_p\n \n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT spu_trampoline_init\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n void\n@@ -4876,7 +4880,7 @@ constant_to_array (enum machine_mode mode, rtx x, unsigned char arr[16])\n    smaller than 16 bytes, use the bytes that would represent that value\n    in a register, e.g., for QImode return the value of arr[3].  */\n rtx\n-array_to_constant (enum machine_mode mode, unsigned char arr[16])\n+array_to_constant (enum machine_mode mode, const unsigned char arr[16])\n {\n   enum machine_mode inner_mode;\n   rtvec v;\n@@ -5580,9 +5584,10 @@ spu_builtin_promote (rtx ops[])\n   emit_insn (gen_rotqby_ti (rot, from, offset));\n }\n \n-void\n-spu_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n+static void\n+spu_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n {\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n   rtx shuf = gen_reg_rtx (V4SImode);\n   rtx insn = gen_reg_rtx (V4SImode);\n   rtx shufc;\n@@ -5597,11 +5602,11 @@ spu_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n       rtx rotl = gen_reg_rtx (V4SImode);\n       rtx mask = gen_reg_rtx (V4SImode);\n       rtx bi = gen_reg_rtx (SImode);\n-      unsigned char shufa[16] = {\n+      static unsigned char const shufa[16] = {\n \t2, 3, 0, 1, 18, 19, 16, 17,\n \t0, 1, 2, 3, 16, 17, 18, 19\n       };\n-      unsigned char insna[16] = {\n+      static unsigned char const insna[16] = {\n \t0x41, 0, 0, 79,\n \t0x41, 0, 0, STATIC_CHAIN_REGNUM,\n \t0x60, 0x80, 0, 79,\n@@ -5616,18 +5621,18 @@ spu_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n       emit_insn (gen_movv4si (mask, spu_const (V4SImode, 0xffff << 7)));\n       emit_insn (gen_selb (insn, insnc, rotl, mask));\n \n-      mem = memory_address (Pmode, tramp);\n-      emit_move_insn (gen_rtx_MEM (V4SImode, mem), insn);\n+      mem = adjust_address (m_tramp, V4SImode, 0);\n+      emit_move_insn (mem, insn);\n \n       emit_move_insn (bi, GEN_INT (0x35000000 + (79 << 7)));\n-      mem = memory_address (Pmode, plus_constant (tramp, 16));\n-      emit_move_insn (gen_rtx_MEM (Pmode, mem), bi);\n+      mem = adjust_address (m_tramp, Pmode, 16);\n+      emit_move_insn (mem, bi);\n     }\n   else\n     {\n       rtx scxt = gen_reg_rtx (SImode);\n       rtx sfnaddr = gen_reg_rtx (SImode);\n-      unsigned char insna[16] = {\n+      static unsigned char const insna[16] = {\n \t0x42, 0, 0, STATIC_CHAIN_REGNUM,\n \t0x30, 0, 0, 0,\n \t0, 0, 0, 0,\n@@ -5649,9 +5654,8 @@ spu_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n       emit_insn (gen_shufb (shuf, sfnaddr, scxt, shufc));\n       emit_insn (gen_iorv4si3 (insn, insnc, shuf));\n \n-      mem = memory_address (Pmode, tramp);\n-      emit_move_insn (gen_rtx_MEM (V4SImode, mem), insn);\n-\n+      mem = adjust_address (m_tramp, V4SImode, 0);\n+      emit_move_insn (mem, insn);\n     }\n   emit_insn (gen_sync ());\n }"}, {"sha": "67011a6212675c15b09cba47c5cbc676c005e646", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a85b4c91b30eda2893ecf5efeeda4f9dbb518763/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a85b4c91b30eda2893ecf5efeeda4f9dbb518763/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=a85b4c91b30eda2893ecf5efeeda4f9dbb518763", "patch": "@@ -403,10 +403,6 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n #define TRAMPOLINE_SIZE (TARGET_LARGE_MEM ? 20 : 16)\n \n #define TRAMPOLINE_ALIGNMENT 128\n-\n-#define INITIALIZE_TRAMPOLINE(TRAMP,FNADDR,CXT) \\\n-\t  spu_initialize_trampoline(TRAMP,FNADDR,CXT)\n-\n \f\n /* Addressing Modes */\n "}]}