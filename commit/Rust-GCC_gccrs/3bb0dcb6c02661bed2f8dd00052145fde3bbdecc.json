{"sha": "3bb0dcb6c02661bed2f8dd00052145fde3bbdecc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JiMGRjYjZjMDI2NjFiZWQyZjhkZDAwMDUyMTQ1ZmRlM2JiZGVjYw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-06-10T07:42:22Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-06-10T07:42:22Z"}, "message": "Add alloc_size for libiberty memory allocation functions.\n\n2019-06-10  Martin Liska  <mliska@suse.cz>\n\n\t* ansidecl.h:\n\t(ATTRIBUTE_RESULT_SIZE_1): Define new macro.\n\t(ATTRIBUTE_RESULT_SIZE_2): Likewise.\n\t(ATTRIBUTE_RESULT_SIZE_1_2): Likewise.\n\t* libiberty.h (xmalloc): Add RESULT_SIZE attribute.\n\t(xrealloc): Likewise.\n\t(xcalloc): Likewise.\n\nFrom-SVN: r272109", "tree": {"sha": "3bc1bb2c9b037c135bc71c7e925f270cf1325ad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bc1bb2c9b037c135bc71c7e925f270cf1325ad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bb0dcb6c02661bed2f8dd00052145fde3bbdecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb0dcb6c02661bed2f8dd00052145fde3bbdecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bb0dcb6c02661bed2f8dd00052145fde3bbdecc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb0dcb6c02661bed2f8dd00052145fde3bbdecc/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74ac8f1fe98b5126b291b2693e25d99b52f68c58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ac8f1fe98b5126b291b2693e25d99b52f68c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74ac8f1fe98b5126b291b2693e25d99b52f68c58"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "ad383426efe9db70db079ef6dc4cc36e22fd34b9", "filename": "include/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb0dcb6c02661bed2f8dd00052145fde3bbdecc/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb0dcb6c02661bed2f8dd00052145fde3bbdecc/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=3bb0dcb6c02661bed2f8dd00052145fde3bbdecc", "patch": "@@ -1,3 +1,13 @@\n+2019-06-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* ansidecl.h:\n+\t(ATTRIBUTE_RESULT_SIZE_1): Define new macro.\n+\t(ATTRIBUTE_RESULT_SIZE_2): Likewise.\n+\t(ATTRIBUTE_RESULT_SIZE_1_2): Likewise.\n+\t* libiberty.h (xmalloc): Add RESULT_SIZE attribute.\n+\t(xrealloc): Likewise.\n+\t(xcalloc): Likewise.\n+\n 2019-04-26  Michael Forney  <mforney@mforney.org>\n \n \t* libiberty.h (vasprintf): Don't declare if HAVE_DECL_VASPRINTF"}, {"sha": "3035c33b8aa906406aee9b5e8cdd0fc36b1c3d57", "filename": "include/ansidecl.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb0dcb6c02661bed2f8dd00052145fde3bbdecc/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb0dcb6c02661bed2f8dd00052145fde3bbdecc/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=3bb0dcb6c02661bed2f8dd00052145fde3bbdecc", "patch": "@@ -292,6 +292,31 @@ So instead we use the macro below and test it against specific values.  */\n # endif\n #endif\n \n+/* Attribute `alloc_size' was valid as of gcc 4.3.  */\n+#ifndef ATTRIBUTE_RESULT_SIZE_1\n+# if (GCC_VERSION >= 4003)\n+#  define ATTRIBUTE_RESULT_SIZE_1 __attribute__ ((alloc_size (1)))\n+# else\n+#  define ATTRIBUTE_RESULT_SIZE_1\n+#endif\n+#endif\n+\n+#ifndef ATTRIBUTE_RESULT_SIZE_2\n+# if (GCC_VERSION >= 4003)\n+#  define ATTRIBUTE_RESULT_SIZE_2 __attribute__ ((alloc_size (2)))\n+# else\n+#  define ATTRIBUTE_RESULT_SIZE_2\n+#endif\n+#endif\n+\n+#ifndef ATTRIBUTE_RESULT_SIZE_1_2\n+# if (GCC_VERSION >= 4003)\n+#  define ATTRIBUTE_RESULT_SIZE_1_2 __attribute__ ((alloc_size (1, 2)))\n+# else\n+#  define ATTRIBUTE_RESULT_SIZE_1_2\n+#endif\n+#endif\n+\n /* We use __extension__ in some places to suppress -pedantic warnings\n    about GCC extensions.  This feature didn't work properly before\n    gcc 2.8.  */"}, {"sha": "0870163d945e46f099d86ffa448a14fffd9ff158", "filename": "include/libiberty.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb0dcb6c02661bed2f8dd00052145fde3bbdecc/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb0dcb6c02661bed2f8dd00052145fde3bbdecc/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=3bb0dcb6c02661bed2f8dd00052145fde3bbdecc", "patch": "@@ -310,18 +310,18 @@ extern void xmalloc_failed (size_t) ATTRIBUTE_NORETURN;\n    message to stderr (using the name set by xmalloc_set_program_name,\n    if any) and then call xexit.  */\n \n-extern void *xmalloc (size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;\n+extern void *xmalloc (size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_RESULT_SIZE_1;\n \n /* Reallocate memory without fail.  This works like xmalloc.  Note,\n    realloc type functions are not suitable for attribute malloc since\n    they may return the same address across multiple calls. */\n \n-extern void *xrealloc (void *, size_t) ATTRIBUTE_RETURNS_NONNULL;\n+extern void *xrealloc (void *, size_t) ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_RESULT_SIZE_2;\n \n /* Allocate memory without fail and set it to zero.  This works like\n    xmalloc.  */\n \n-extern void *xcalloc (size_t, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL;\n+extern void *xcalloc (size_t, size_t) ATTRIBUTE_MALLOC ATTRIBUTE_RETURNS_NONNULL ATTRIBUTE_RESULT_SIZE_1_2;\n \n /* Copy a string into a memory buffer without fail.  */\n "}]}