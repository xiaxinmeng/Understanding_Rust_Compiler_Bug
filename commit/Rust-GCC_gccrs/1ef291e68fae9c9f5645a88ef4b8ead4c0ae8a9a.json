{"sha": "1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVmMjkxZTY4ZmFlOWM5ZjU2NDVhODhlZjRiOGVhZDRjMGFlOGE5YQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T09:25:19Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-17T08:04:29Z"}, "message": "AVX512FP16: Add testcase for vcvtsh2sd/vcvtsh2ss/vcvtsd2sh/vcvtss2sh.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-vcvtsd2sh-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vcvtsd2sh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsh2sd-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsh2sd-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsh2ss-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtsh2ss-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtss2sh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vcvtss2sh-1b.c: Ditto.", "tree": {"sha": "ee7f3fa7fa1946ec47f4c8585d9451c956b062d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee7f3fa7fa1946ec47f4c8585d9451c956b062d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90429b962e25574217f1a706ee16c238b30e22be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90429b962e25574217f1a706ee16c238b30e22be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90429b962e25574217f1a706ee16c238b30e22be"}], "stats": {"total": 336, "additions": 336, "deletions": 0}, "files": [{"sha": "b663ca507fe91f1d419d554e97716fe2671d987a", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsd2sh-1a.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsd2sh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsd2sh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsd2sh-1a.c?ref=1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2sh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2sh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsd2sh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res, x1;\n+volatile __m128d x2;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_cvtsd_sh (x1, x2);\n+  res = _mm_mask_cvtsd_sh (res, m8, x1, x2);\n+  res = _mm_maskz_cvtsd_sh (m8, x1, x2);\n+  res = _mm_cvt_roundsd_sh (x1, x2, 8);\n+  res = _mm_mask_cvt_roundsd_sh (res, m8, x1, x2, 8);\n+  res = _mm_maskz_cvt_roundsd_sh (m8, x1, x2, 11);\n+}"}, {"sha": "552362058c5e8905a6e42839042c0446d318de01", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsd2sh-1b.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsd2sh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsd2sh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsd2sh-1b.c?ref=1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_vcvtsd2sh(V512 * dest, V512 op1, V512 op2,\n+                __mmask8 k, int zero_mask)\n+{\n+    V512 v1, v2, v5, v6, v7, v8;\n+    int i;\n+    \n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = (float)op2.f64[0];\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+\n+    for (i = 1; i < 8; i++)\n+      v5.f32[i] = v1.f32[i];\n+\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+  emulate_vcvtsd2sh(&exp, src1, src2, 0x1, 0);\n+  res.xmmh[0] = _mm_cvt_roundsd_sh(src1.xmmh[0], src2.xmmd[0],\n+                                 _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvt_roundsd_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_vcvtsd2sh(&exp, src1, src2, 0x1, 0);\n+  res.xmmh[0] = _mm_mask_cvt_roundsd_sh(res.xmmh[0], 0x1, src1.xmmh[0],\n+                                      src2.xmmd[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"mm_mask_cvt_roundsd_sh\");\n+\n+  emulate_vcvtsd2sh(&exp, src1, src2, 0x2, 1);\n+  res.xmmh[0] = _mm_maskz_cvt_roundsd_sh(0x2, src1.xmmh[0],\n+                                       src2.xmmd[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"mm_maskz_cvt_roundsd_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "59719ed18e62b3ff18fd40a23c6d3407f7b6120a", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2sd-1a.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2sd-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2sd-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2sd-1a.c?ref=1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2sd\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2sd\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2sd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128d res;\n+volatile __m128d x1;\n+volatile __m128h x2;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_cvtsh_sd (x1, x2);\n+  res = _mm_mask_cvtsh_sd (res, m8, x1, x2);\n+  res = _mm_maskz_cvtsh_sd (m8, x1, x2);\n+  res = _mm_cvt_roundsh_sd (x1, x2, 8);\n+  res = _mm_mask_cvt_roundsh_sd (res, m8, x1, x2, 8);\n+  res = _mm_maskz_cvt_roundsh_sd (m8, x1, x2, 4);\n+}"}, {"sha": "e6bdc9580bb92d4dc97455317fafe1f05883d0ec", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2sd-1b.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2sd-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2sd-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2sd-1b.c?ref=1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_vcvtsh2sd(V512 * dest, V512 op1, V512 op2,\n+                __mmask8 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+\n+    unpack_ph_2twops(op2, &v3, &v4);\n+\n+    if ((k&1) || !k)\n+      v5.f64[0] = v3.f32[0];\n+    else if (zero_mask)\n+      v5.f64[0] = 0;\n+    else\n+      v5.f64[0] = dest->f64[0];\n+\n+    v5.f64[1] = op1.f64[1];\n+\n+    *dest = v5;\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+  emulate_vcvtsh2sd(&exp, src1, src2, 0x1, 0);\n+  res.xmmd[0] = _mm_cvt_roundsh_sd(src1.xmmd[0], src2.xmmh[0],\n+                                 _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvt_roundsh_sd\");\n+\n+  init_dest(&res, &exp);\n+  emulate_vcvtsh2sd(&exp, src1, src2, 0x1, 0);\n+  res.xmmd[0] = _mm_mask_cvt_roundsh_sd(res.xmmd[0], 0x1, src1.xmmd[0],\n+                                      src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"mm_mask_cvt_roundsh_sd\");\n+\n+  emulate_vcvtsh2sd(&exp, src1, src2, 0x2, 1);\n+  res.xmmd[0] = _mm_maskz_cvt_roundsh_sd(0x2, src1.xmmd[0],\n+                                       src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"mm_maskz_cvt_roundsh_sd\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "e6c369c067fa7fa50b3343645af104dcab81bfc6", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2ss-1a.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2ss-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2ss-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2ss-1a.c?ref=1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2ss\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2ss\\[ \\\\t\\]+\\{sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtsh2ss\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128 res;\n+volatile __m128 x1;\n+volatile __m128h x2;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_cvtsh_ss (x1, x2);\n+  res = _mm_mask_cvtsh_ss (res, m8, x1, x2);\n+  res = _mm_maskz_cvtsh_ss (m8, x1, x2);\n+  res = _mm_cvt_roundsh_ss (x1, x2, 8);\n+  res = _mm_mask_cvt_roundsh_ss (res, m8, x1, x2, 8);\n+  res = _mm_maskz_cvt_roundsh_ss (m8, x1, x2, 4);\n+}"}, {"sha": "319598341cdf3d3ce6b6b8f59c94b17885d97a3f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtsh2ss-1b.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2ss-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2ss-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtsh2ss-1b.c?ref=1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+ void NOINLINE\n+emulate_vcvtsh2ss(V512 * dest, V512 op1, V512 op2,\n+                __mmask8 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    if ((k&1) || !k)\n+      v5.f32[0] = v3.f32[0];\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = dest->f32[0];\n+\n+    for (i = 1; i < 4; i++)\n+      v5.f32[i] = op1.f32[i];\n+\n+    *dest = v5;\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+  emulate_vcvtsh2ss(&exp, src1, src2, 0x1, 0);\n+  res.xmm[0] = _mm_cvt_roundsh_ss(src1.xmm[0], src2.xmmh[0],\n+                                 _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvt_roundsh_ss\");\n+\n+  init_dest(&res, &exp);\n+  emulate_vcvtsh2ss(&exp, src1, src2, 0x1, 0);\n+  res.xmm[0] = _mm_mask_cvt_roundsh_ss(res.xmm[0], 0x1, src1.xmm[0],\n+                                      src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"mm_mask_cvt_roundsh_ss\");\n+\n+  emulate_vcvtsh2ss(&exp, src1, src2, 0x2, 1);\n+  res.xmm[0] = _mm_maskz_cvt_roundsh_ss(0x2, src1.xmm[0],\n+                                       src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"mm_maskz_cvt_roundsh_ss\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+\n+"}, {"sha": "63ad09065550a59718a9c628892e53669cac6982", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtss2sh-1a.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtss2sh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtss2sh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtss2sh-1a.c?ref=1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vcvtss2sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtss2sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtss2sh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtss2sh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtss2sh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtss2sh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res, x1;\n+volatile __m128 x2;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_cvtss_sh (x1, x2);\n+  res = _mm_mask_cvtss_sh (res, m8, x1, x2);\n+  res = _mm_maskz_cvtss_sh (m8, x1, x2);\n+  res = _mm_cvt_roundss_sh (x1, x2, 8);\n+  res = _mm_mask_cvt_roundss_sh (res, m8, x1, x2, 8);\n+  res = _mm_maskz_cvt_roundss_sh (m8, x1, x2, 11);\n+}"}, {"sha": "94981bbb79f1debdc79e6574623caa4cec329274", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vcvtss2sh-1b.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtss2sh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtss2sh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vcvtss2sh-1b.c?ref=1ef291e68fae9c9f5645a88ef4b8ead4c0ae8a9a", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_vcvtss2sh(V512 * dest, V512 op1, V512 op2,\n+                __mmask8 k, int zero_mask)\n+{\n+    V512 v1, v2, v5, v6, v7, v8;\n+    int i;\n+    \n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = op2.f32[0];\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+\n+    for (i = 1; i < 8; i++)\n+      v5.f32[i] = v1.f32[i];\n+\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+  emulate_vcvtss2sh(&exp, src1, src2, 0x1, 0);\n+  res.xmmh[0] = _mm_cvt_roundss_sh(src1.xmmh[0], src2.xmm[0],\n+                                 _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_cvt_roundss_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_vcvtss2sh(&exp, src1, src2, 0x1, 0);\n+  res.xmmh[0] = _mm_mask_cvt_roundss_sh(res.xmmh[0], 0x1, src1.xmmh[0],\n+                                      src2.xmm[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"mm_mask_cvt_roundss_sh\");\n+\n+  emulate_vcvtss2sh(&exp, src1, src2, 0x2, 1);\n+  res.xmmh[0] = _mm_maskz_cvt_roundss_sh(0x2, src1.xmmh[0],\n+                                       src2.xmm[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"mm_maskz_cvt_roundss_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}]}