{"sha": "5b86d5dbe47c477daf739b82c3793a70f8cbd96c", "node_id": "C_kwDOANBUbNoAKDViODZkNWRiZTQ3YzQ3N2RhZjczOWI4MmMzNzkzYTcwZjhjYmQ5NmM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-27T06:20:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-27T06:21:41Z"}, "message": "c++: Improve diagnostics about conflicting specifiers\n\nOn Sat, Sep 17, 2022 at 01:23:59AM +0200, Jason Merrill wrote:\n> I wonder why we don't give an error when setting the\n> conflicting_specifiers_p flag in cp_parser_set_storage_class?  We should be\n> able to give a better diagnostic at that point.\n\nI didn't have time to update the whole patch last night, but this part\nseems to be independent and I've managed to test it.\n\nThe diagnostics then looks like:\na.C:1:9: error: \u2018static\u2019 specifier conflicts with \u2018typedef\u2019\n    1 | typedef static int a;\n      | ~~~~~~~ ^~~~~~\na.C:2:8: error: \u2018typedef\u2019 specifier conflicts with \u2018static\u2019\n    2 | static typedef int b;\n      | ~~~~~~ ^~~~~~~\na.C:3:8: error: duplicate \u2018static\u2019 specifier\n    3 | static static int c;\n      | ~~~~~~ ^~~~~~\na.C:4:8: error: \u2018extern\u2019 specifier conflicts with \u2018static\u2019\n    4 | static extern int d;\n      | ~~~~~~ ^~~~~~\n\n2022-09-27  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/cp/\n\t* parser.cc (cp_parser_lambda_declarator_opt): Don't diagnose\n\tconflicting specifiers here.\n\t(cp_storage_class_name): New variable.\n\t(cp_parser_decl_specifier_seq): When setting conflicting_specifiers_p\n\tfor the first time, diagnose which exact specifiers conflict.\n\t(cp_parser_set_storage_class): Likewise.  Move storage_class\n\tcomputation earlier.\n\t* decl.cc (grokdeclarator): Don't diagnose conflicting specifiers\n\there, just return error_mark_node.\ngcc/testsuite/\n\t* g++.dg/diagnostic/conflicting-specifiers-1.C: Adjust expected\n\tdiagnostics.\n\t* g++.dg/parse/typedef8.C: Likewise.\n\t* g++.dg/parse/crash39.C: Likewise.\n\t* g++.dg/other/mult-stor1.C: Likewise.\n\t* g++.dg/cpp2a/constinit3.C: Likewise.", "tree": {"sha": "2dfad360ac2e4adc7ab68118e8119ae0cf049216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dfad360ac2e4adc7ab68118e8119ae0cf049216"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b86d5dbe47c477daf739b82c3793a70f8cbd96c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b86d5dbe47c477daf739b82c3793a70f8cbd96c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b86d5dbe47c477daf739b82c3793a70f8cbd96c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5da546d7e0561def07c783e6ec897aaa9e7837c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da546d7e0561def07c783e6ec897aaa9e7837c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5da546d7e0561def07c783e6ec897aaa9e7837c6"}], "stats": {"total": 113, "additions": 71, "deletions": 42}, "files": [{"sha": "f4460c911b30b34618bfe64c95013315dd7db07d", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=5b86d5dbe47c477daf739b82c3793a70f8cbd96c", "patch": "@@ -12095,12 +12095,7 @@ grokdeclarator (const cp_declarator *declarator,\n     }\n \n   if (declspecs->conflicting_specifiers_p)\n-    {\n-      error_at (min_location (declspecs->locations[ds_typedef],\n-\t\t\t      declspecs->locations[ds_storage_class]),\n-\t\t\"conflicting specifiers in declaration of %qs\", name);\n-      return error_mark_node;\n-    }\n+    return error_mark_node;\n \n   /* Extract the basic type from the decl-specifier-seq.  */\n   type = declspecs->type;"}, {"sha": "d876a8623b4539f1fe597b992f231e78fc737fac", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 61, "deletions": 27, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=5b86d5dbe47c477daf739b82c3793a70f8cbd96c", "patch": "@@ -11729,9 +11729,6 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n     {\n       LAMBDA_EXPR_MUTABLE_P (lambda_expr) = 1;\n       quals = TYPE_UNQUALIFIED;\n-      if (lambda_specs.conflicting_specifiers_p)\n-\terror_at (lambda_specs.locations[ds_storage_class],\n-\t\t  \"duplicate %<mutable%>\");\n     }\n \n   tx_qual = cp_parser_tx_qualifier_opt (parser);\n@@ -15731,6 +15728,13 @@ cp_parser_decomposition_declaration (cp_parser *parser,\n   return decl;\n }\n \n+/* Names of storage classes.  */\n+\n+static const char *const\n+cp_storage_class_name[] = {\n+  \"\", \"auto\", \"register\", \"static\", \"extern\", \"mutable\"\n+};\n+\n /* Parse a decl-specifier-seq.\n \n    decl-specifier-seq:\n@@ -15952,8 +15956,18 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n \t     may as well commit at this point.  */\n \t  cp_parser_commit_to_tentative_parse (parser);\n \n-          if (decl_specs->storage_class != sc_none)\n-            decl_specs->conflicting_specifiers_p = true;\n+\t  if (decl_specs->storage_class != sc_none)\n+\t    {\n+\t      if (decl_specs->conflicting_specifiers_p)\n+\t\tbreak;\n+\t      gcc_rich_location richloc (token->location);\n+\t      location_t oloc = decl_specs->locations[ds_storage_class];\n+\t      richloc.add_location_if_nearby (oloc);\n+\t      error_at (&richloc,\n+\t\t\t\"%<typedef%> specifier conflicts with %qs\",\n+\t\t\tcp_storage_class_name[decl_specs->storage_class]);\n+\t      decl_specs->conflicting_specifiers_p = true;\n+\t    }\n \t  break;\n \n \t  /* storage-class-specifier:\n@@ -32845,26 +32859,6 @@ cp_parser_set_storage_class (cp_parser *parser,\n {\n   cp_storage_class storage_class;\n \n-  if (parser->in_unbraced_linkage_specification_p)\n-    {\n-      error_at (token->location, \"invalid use of %qD in linkage specification\",\n-\t\tridpointers[keyword]);\n-      return;\n-    }\n-  else if (decl_specs->storage_class != sc_none)\n-    {\n-      decl_specs->conflicting_specifiers_p = true;\n-      return;\n-    }\n-\n-  if ((keyword == RID_EXTERN || keyword == RID_STATIC)\n-      && decl_spec_seq_has_spec_p (decl_specs, ds_thread)\n-      && decl_specs->gnu_thread_keyword_p)\n-    {\n-      pedwarn (decl_specs->locations[ds_thread], 0,\n-\t\t\"%<__thread%> before %qD\", ridpointers[keyword]);\n-    }\n-\n   switch (keyword)\n     {\n     case RID_AUTO:\n@@ -32885,15 +32879,55 @@ cp_parser_set_storage_class (cp_parser *parser,\n     default:\n       gcc_unreachable ();\n     }\n+\n+  if (parser->in_unbraced_linkage_specification_p)\n+    {\n+      error_at (token->location, \"invalid use of %qD in linkage specification\",\n+\t\tridpointers[keyword]);\n+      return;\n+    }\n+  else if (decl_specs->storage_class != sc_none)\n+    {\n+      if (decl_specs->conflicting_specifiers_p)\n+\treturn;\n+      gcc_rich_location richloc (token->location);\n+      richloc.add_location_if_nearby (decl_specs->locations[ds_storage_class]);\n+      if (decl_specs->storage_class == storage_class)\n+\terror_at (&richloc, \"duplicate %qD specifier\", ridpointers[keyword]);\n+      else\n+\terror_at (&richloc,\n+\t\t  \"%qD specifier conflicts with %qs\",\n+\t\t  ridpointers[keyword],\n+\t\t  cp_storage_class_name[decl_specs->storage_class]);\n+      decl_specs->conflicting_specifiers_p = true;\n+      return;\n+    }\n+\n+  if ((keyword == RID_EXTERN || keyword == RID_STATIC)\n+      && decl_spec_seq_has_spec_p (decl_specs, ds_thread)\n+      && decl_specs->gnu_thread_keyword_p)\n+    {\n+      pedwarn (decl_specs->locations[ds_thread], 0,\n+\t\t\"%<__thread%> before %qD\", ridpointers[keyword]);\n+    }\n+\n   decl_specs->storage_class = storage_class;\n   set_and_check_decl_spec_loc (decl_specs, ds_storage_class, token);\n \n   /* A storage class specifier cannot be applied alongside a typedef\n      specifier. If there is a typedef specifier present then set\n      conflicting_specifiers_p which will trigger an error later\n      on in grokdeclarator. */\n-  if (decl_spec_seq_has_spec_p (decl_specs, ds_typedef))\n-    decl_specs->conflicting_specifiers_p = true;\n+  if (decl_spec_seq_has_spec_p (decl_specs, ds_typedef)\n+      && !decl_specs->conflicting_specifiers_p)\n+    {\n+      gcc_rich_location richloc (token->location);\n+      richloc.add_location_if_nearby (decl_specs->locations[ds_typedef]);\n+      error_at (&richloc,\n+\t\t\"%qD specifier conflicts with %<typedef%>\",\n+\t\tridpointers[keyword]);\n+      decl_specs->conflicting_specifiers_p = true;\n+    }\n }\n \n /* Update the DECL_SPECS to reflect the TYPE_SPEC.  If TYPE_DEFINITION_P"}, {"sha": "ffa6184782438ef46644a012cc8d14a02b6b47a8", "filename": "gcc/testsuite/g++.dg/cpp2a/constinit3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstinit3.C?ref=5b86d5dbe47c477daf739b82c3793a70f8cbd96c", "patch": "@@ -5,7 +5,7 @@ constinit constinit int v1; // { dg-error \"duplicate .constinit.\" }\n constexpr constinit int v2 = 1; // { dg-error \"can use at most one of the .constinit. and .constexpr. specifiers\" }\n constinit constexpr int v3 = 1; // { dg-error \"an use at most one of the .constinit. and .constexpr. specifiers\" }\n \n-extern static constinit int v4; // { dg-error \"conflicting specifiers\" }\n+extern static constinit int v4; // { dg-error \"'static' specifier conflicts with 'extern'\" }\n extern thread_local constinit int v5;\n extern constinit int v6;\n "}, {"sha": "89e2ebdebf6b427409d96b1602566f8b987a013e", "filename": "gcc/testsuite/g++.dg/diagnostic/conflicting-specifiers-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fconflicting-specifiers-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fconflicting-specifiers-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fconflicting-specifiers-1.C?ref=5b86d5dbe47c477daf739b82c3793a70f8cbd96c", "patch": "@@ -1 +1 @@\n-static typedef int i __attribute__((unused));  // { dg-error \"1:conflicting specifiers\" }\n+static typedef int i __attribute__((unused));  // { dg-error \"8:'typedef' specifier conflicts with 'static'\" }"}, {"sha": "e582b03ee60dc3542b8e02d3b76e98e082565c7d", "filename": "gcc/testsuite/g++.dg/other/mult-stor1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fmult-stor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fmult-stor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fmult-stor1.C?ref=5b86d5dbe47c477daf739b82c3793a70f8cbd96c", "patch": "@@ -4,5 +4,5 @@\n \n struct A\n {\n-  extern static int i;  // { dg-error \"conflicting specifiers\" }\n+  extern static int i;  // { dg-error \"'static' specifier conflicts with 'extern'\" }\n };"}, {"sha": "5d4e02d79ca0e457eb0249fe4121c496ba52bf11", "filename": "gcc/testsuite/g++.dg/parse/crash39.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash39.C?ref=5b86d5dbe47c477daf739b82c3793a70f8cbd96c", "patch": "@@ -1,3 +1,3 @@\n // PR c++/31747\n \n-static extern int i; // { dg-error \"conflicting specifiers\" }\n+static extern int i; // { dg-error \"'extern' specifier conflicts with 'static'\" }"}, {"sha": "e21bdb911d9a0b4258064e5e933534502de0e49c", "filename": "gcc/testsuite/g++.dg/parse/typedef8.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b86d5dbe47c477daf739b82c3793a70f8cbd96c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef8.C?ref=5b86d5dbe47c477daf739b82c3793a70f8cbd96c", "patch": "@@ -1,11 +1,11 @@\n //PR c++ 29024\n \n-typedef static int a;   // { dg-error \"conflicting\" }\n-typedef register int b; // { dg-error \"conflicting\" }\n-typedef extern int c;   // { dg-error \"conflicting\" }\n-static typedef int a;   // { dg-error \"conflicting\" }\n+typedef static int a;   // { dg-error \"'static' specifier conflicts with 'typedef'\" }\n+typedef register int b; // { dg-error \"'register' specifier conflicts with 'typedef'\" }\n+typedef extern int c;   // { dg-error \"'extern' specifier conflicts with 'typedef'\" }\n+static typedef int a;   // { dg-error \"'typedef' specifier conflicts with 'static'\" }\n \n void foo()\n {\n-  typedef auto int bar; // { dg-error \"conflicting|two or more data types\" }\n+  typedef auto int bar; // { dg-error \"'auto' specifier conflicts with 'typedef'|two or more data types\" }\n }"}]}