{"sha": "b776892b916b79b4ae5db0b09a2cde2fd89baea7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc3Njg5MmI5MTZiNzliNGFlNWRiMGIwOWEyY2RlMmZkODliYWVhNw==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-06-24T11:34:01Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-06-24T11:34:01Z"}, "message": "sparc.md: Use define_insn_and_split.\n\n2002-06-24  David S. Miller  <davem@redhat.com>\n\n\t* config/sparc/sparc.md: Use define_insn_and_split.\n\nFrom-SVN: r54951", "tree": {"sha": "2961f8adb407ad249211b0905101232f8dc65c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2961f8adb407ad249211b0905101232f8dc65c5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b776892b916b79b4ae5db0b09a2cde2fd89baea7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b776892b916b79b4ae5db0b09a2cde2fd89baea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b776892b916b79b4ae5db0b09a2cde2fd89baea7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b776892b916b79b4ae5db0b09a2cde2fd89baea7/comments", "author": null, "committer": null, "parents": [{"sha": "556a56acec1f32fe977c0d48da84bbff4373fd93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556a56acec1f32fe977c0d48da84bbff4373fd93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556a56acec1f32fe977c0d48da84bbff4373fd93"}], "stats": {"total": 579, "additions": 181, "deletions": 398}, "files": [{"sha": "5cef4142515c6a2235811eff3c3430ead27dc839", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b776892b916b79b4ae5db0b09a2cde2fd89baea7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b776892b916b79b4ae5db0b09a2cde2fd89baea7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b776892b916b79b4ae5db0b09a2cde2fd89baea7", "patch": "@@ -3,6 +3,8 @@\n \t* config/sparc/sparc.c (INIT_TARGET_OPTABS): If ARCH64, set the\n \t32-bit ABI libfuncs to NULL.\n \n+\t* config/sparc/sparc.md: Use define_insn_and_split.\n+\n \t* expmed.c (expand_divmod): Do not set optab1/optab2 to the shift\n \toptabs if op1 is const0_rtx.\n "}, {"sha": "6b8e029d599c20e8ed21cac0062deb338adf3471", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 179, "deletions": 398, "changes": 577, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b776892b916b79b4ae5db0b09a2cde2fd89baea7/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b776892b916b79b4ae5db0b09a2cde2fd89baea7/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=b776892b916b79b4ae5db0b09a2cde2fd89baea7", "patch": "@@ -826,353 +826,255 @@\n ;; them to always use the splitz below so the results can be\n ;; scheduled.\n \n-(define_insn \"*snesi_zero\"\n+(define_insn_and_split \"*snesi_zero\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n    (clobber (reg:CC 100))]\n   \"\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ne:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t       (const_int 0)))\n-   (clobber (reg:CC 100))]\n   \"\"\n   [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (ltu:SI (reg:CC 100) (const_int 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*neg_snesi_zero\"\n+(define_insn_and_split \"*neg_snesi_zero\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t       (const_int 0))))\n    (clobber (reg:CC 100))]\n   \"\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(neg:SI (ne:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t       (const_int 0))))\n-   (clobber (reg:CC 100))]\n   \"\"\n   [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (neg:SI (ltu:SI (reg:CC 100) (const_int 0))))]\n-  \"\")\n-\n-(define_insn \"*snesi_zero_extend\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(ne:DI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t       (const_int 0)))\n-   (clobber (reg:CC 100))]\n-  \"TARGET_ARCH64\"\n-  \"#\"\n+  \"\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (ne:DI (match_operand:SI 1 \"register_operand\" \"\")\n+(define_insn_and_split \"*snesi_zero_extend\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (ne:DI (match_operand:SI 1 \"register_operand\" \"r\")\n                (const_int 0)))\n    (clobber (reg:CC 100))]\n   \"TARGET_ARCH64\"\n-  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (minus:SI (const_int 0) (match_dup 1))\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (minus:SI (const_int 0)\n+                                                     (match_dup 1))\n                                            (const_int 0)))\n    (set (match_dup 0) (zero_extend:DI (plus:SI (plus:SI (const_int 0)\n                                                         (const_int 0))\n                                                (ltu:SI (reg:CC_NOOV 100)\n                                                        (const_int 0)))))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*snedi_zero\"\n+(define_insn_and_split \"*snedi_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n-\t(ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t       (const_int 0)))]\n+        (ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+               (const_int 0)))]\n   \"TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (ne:DI (match_operand:DI 1 \"register_operand\" \"\")\n-               (const_int 0)))]\n-  \"TARGET_ARCH64\n-   && ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n+  \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n    (set (match_dup 0) (if_then_else:DI (ne:DI (match_dup 1)\n                                               (const_int 0))\n                                        (const_int 1)\n                                        (match_dup 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*neg_snedi_zero\"\n+(define_insn_and_split \"*neg_snedi_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n-\t(neg:DI (ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t       (const_int 0))))]\n+        (neg:DI (ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+                       (const_int 0))))]\n   \"TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (neg:DI (ne:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                       (const_int 0))))]\n-  \"TARGET_ARCH64\n-   && ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n+  \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n    (set (match_dup 0) (if_then_else:DI (ne:DI (match_dup 1)\n                                               (const_int 0))\n                                        (const_int -1)\n                                        (match_dup 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*snedi_zero_trunc\"\n+(define_insn_and_split \"*snedi_zero_trunc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-\t(ne:SI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t       (const_int 0)))]\n+        (ne:SI (match_operand:DI 1 \"register_operand\" \"r\")\n+               (const_int 0)))]\n   \"TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (ne:SI (match_operand:DI 1 \"register_operand\" \"\")\n-               (const_int 0)))]\n-  \"TARGET_ARCH64\n-   && ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n+  \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n    (set (match_dup 0) (if_then_else:SI (ne:DI (match_dup 1)\n                                               (const_int 0))\n                                        (const_int 1)\n                                        (match_dup 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*seqsi_zero\"\n+(define_insn_and_split \"*seqsi_zero\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n    (clobber (reg:CC 100))]\n   \"\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(eq:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t       (const_int 0)))\n-   (clobber (reg:CC 100))]\n   \"\"\n   [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (geu:SI (reg:CC 100) (const_int 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*neg_seqsi_zero\"\n+(define_insn_and_split \"*neg_seqsi_zero\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t       (const_int 0))))\n    (clobber (reg:CC 100))]\n   \"\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(neg:SI (eq:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t       (const_int 0))))\n-   (clobber (reg:CC 100))]\n   \"\"\n   [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (neg:SI (geu:SI (reg:CC 100) (const_int 0))))]\n-  \"\")\n-\n-(define_insn \"*seqsi_zero_extend\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(eq:DI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t       (const_int 0)))\n-   (clobber (reg:CC 100))]\n-  \"TARGET_ARCH64\"\n-  \"#\"\n+  \"\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (eq:DI (match_operand:SI 1 \"register_operand\" \"\")\n+(define_insn_and_split \"*seqsi_zero_extend\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (eq:DI (match_operand:SI 1 \"register_operand\" \"r\")\n                (const_int 0)))\n    (clobber (reg:CC 100))]\n   \"TARGET_ARCH64\"\n-  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (minus:SI (const_int 0) (match_dup 1))\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CC_NOOV 100) (compare:CC_NOOV (minus:SI (const_int 0)\n+                                                     (match_dup 1))\n                                            (const_int 0)))\n    (set (match_dup 0) (zero_extend:DI (minus:SI (minus:SI (const_int 0)\n                                                           (const_int -1))\n                                                 (ltu:SI (reg:CC_NOOV 100)\n                                                         (const_int 0)))))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*seqdi_zero\"\n+(define_insn_and_split \"*seqdi_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n-\t(eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t       (const_int 0)))]\n+        (eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+               (const_int 0)))]\n   \"TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (eq:DI (match_operand:DI 1 \"register_operand\" \"\")\n-               (const_int 0)))]\n-  \"TARGET_ARCH64\n-   && ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n+  \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n    (set (match_dup 0) (if_then_else:DI (eq:DI (match_dup 1)\n                                               (const_int 0))\n                                        (const_int 1)\n                                        (match_dup 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*neg_seqdi_zero\"\n+(define_insn_and_split \"*neg_seqdi_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n-\t(neg:DI (eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t       (const_int 0))))]\n+        (neg:DI (eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+                       (const_int 0))))]\n   \"TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")]) \n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (neg:DI (eq:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                       (const_int 0))))]\n-  \"TARGET_ARCH64\n-   && ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n+  \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n    (set (match_dup 0) (if_then_else:DI (eq:DI (match_dup 1)\n                                               (const_int 0))\n                                        (const_int -1)\n                                        (match_dup 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")]) \n \n-(define_insn \"*seqdi_zero_trunc\"\n+(define_insn_and_split \"*seqdi_zero_trunc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-\t(eq:SI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t       (const_int 0)))]\n+        (eq:SI (match_operand:DI 1 \"register_operand\" \"r\")\n+               (const_int 0)))]\n   \"TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (eq:SI (match_operand:DI 1 \"register_operand\" \"\")\n-               (const_int 0)))]\n-  \"TARGET_ARCH64\n-   && ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n+  \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n    (set (match_dup 0) (if_then_else:SI (eq:DI (match_dup 1)\n                                               (const_int 0))\n                                        (const_int 1)\n                                        (match_dup 0)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n \n ;; We can also do (x + (i == 0)) and related, so put them in.\n ;; ??? The addx/subx insns use the 32 bit carry flag so there are no DImode\n ;; versions for v9.\n \n-(define_insn \"*x_plus_i_ne_0\"\n+(define_insn_and_split \"*x_plus_i_ne_0\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t(const_int 0))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))\n    (clobber (reg:CC 100))]\n   \"\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(plus:SI (ne:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t\t(const_int 0))\n-\t\t (match_operand:SI 2 \"register_operand\" \"\")))\n-   (clobber (reg:CC 100))]\n   \"\"\n   [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (plus:SI (ltu:SI (reg:CC 100) (const_int 0))\n \t\t\t       (match_dup 2)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*x_minus_i_ne_0\"\n+(define_insn_and_split \"*x_minus_i_ne_0\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t  (ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (const_int 0))))\n    (clobber (reg:CC 100))]\n   \"\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(minus:SI (match_operand:SI 2 \"register_operand\" \"\")\n-\t\t  (ne:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t\t (const_int 0))))\n-   (clobber (reg:CC 100))]\n   \"\"\n   [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (minus:SI (match_dup 2)\n \t\t\t\t(ltu:SI (reg:CC 100) (const_int 0))))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*x_plus_i_eq_0\"\n+(define_insn_and_split \"*x_plus_i_eq_0\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t(const_int 0))\n \t\t (match_operand:SI 2 \"register_operand\" \"r\")))\n    (clobber (reg:CC 100))]\n   \"\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(plus:SI (eq:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t\t(const_int 0))\n-\t\t (match_operand:SI 2 \"register_operand\" \"\")))\n-   (clobber (reg:CC 100))]\n   \"\"\n   [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (plus:SI (geu:SI (reg:CC 100) (const_int 0))\n \t\t\t       (match_dup 2)))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n \n-(define_insn \"*x_minus_i_eq_0\"\n+(define_insn_and_split \"*x_minus_i_eq_0\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t  (eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t (const_int 0))))\n    (clobber (reg:CC 100))]\n   \"\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(minus:SI (match_operand:SI 2 \"register_operand\" \"\")\n-\t\t  (eq:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t\t (const_int 0))))\n-   (clobber (reg:CC 100))]\n   \"\"\n   [(set (reg:CC_NOOV 100) (compare:CC_NOOV (neg:SI (match_dup 1))\n \t\t\t\t\t   (const_int 0)))\n    (set (match_dup 0) (minus:SI (match_dup 2)\n \t\t\t\t(geu:SI (reg:CC 100) (const_int 0))))]\n-  \"\")\n+  \"\"\n+  [(set_attr \"length\" \"2\")])\n \n ;; We can also do GEU and LTU directly, but these operate after a compare.\n ;; ??? The addx/subx insns use the 32 bit carry flag so there are no DImode\n@@ -3952,25 +3854,16 @@\n    fmovq%c1\\\\t%x2, %4, %0\"\n   [(set_attr \"type\" \"fpcmove\")])\n \n-(define_insn \"*movtf_cc_sp64\"\n+(define_insn_and_split \"*movtf_cc_sp64\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e,e\")\n \t(if_then_else:TF (match_operator 1 \"comparison_operator\"\n-\t\t\t\t[(match_operand 2 \"icc_or_fcc_reg_operand\" \"X,X\")\n-\t\t\t\t (const_int 0)])\n+\t\t\t    [(match_operand 2 \"icc_or_fcc_reg_operand\" \"X,X\")\n+\t\t\t     (const_int 0)])\n                          (match_operand:TF 3 \"register_operand\" \"e,0\")\n                          (match_operand:TF 4 \"register_operand\" \"0,e\")))]\n   \"TARGET_V9 && TARGET_FPU && !TARGET_HARD_QUAD\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(if_then_else:TF (match_operator 1 \"comparison_operator\"\n-\t\t\t\t[(match_operand 2 \"icc_or_fcc_reg_operand\" \"\")\n-\t\t\t\t (const_int 0)])\n-                         (match_operand:TF 3 \"register_operand\" \"\")\n-                         (match_operand:TF 4 \"register_operand\" \"\")))]\n-  \"reload_completed && TARGET_V9 && TARGET_FPU && !TARGET_HARD_QUAD\"\n+  \"&& reload_completed\"\n   [(clobber (const_int 0))]\n   \"\n {\n@@ -4002,7 +3895,8 @@\n       emit_insn (gen_movdf_cc_sp64 (dest2, operands[1], operands[2], srca2, srcb2));\n     }\n   DONE;\n-}\")\n+}\"\n+  [(set_attr \"length\" \"2\")])\n \n (define_insn \"*movqi_cc_reg_sp64\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n@@ -4110,7 +4004,7 @@\n    fmovrq%d1\\\\t%2, %4, %0\"\n   [(set_attr \"type\" \"fpcrmove\")])\n \n-(define_insn \"*movtf_cc_reg_sp64\"\n+(define_insn_and_split \"*movtf_cc_reg_sp64\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e,e\")\n \t(if_then_else:TF (match_operator 1 \"v9_regcmp_op\"\n \t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r,r\")\n@@ -4119,16 +4013,7 @@\n                          (match_operand:TF 4 \"register_operand\" \"0,e\")))]\n   \"TARGET_ARCH64 && TARGET_FPU && ! TARGET_HARD_QUAD\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(if_then_else:TF (match_operator 1 \"v9_regcmp_op\"\n-\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"\")\n-\t\t\t\t (const_int 0)])\n-                         (match_operand:TF 3 \"register_operand\" \"\")\n-                         (match_operand:TF 4 \"register_operand\" \"\")))]\n-  \"reload_completed && TARGET_ARCH64 && TARGET_FPU && ! TARGET_HARD_QUAD\"\n+  \"&& reload_completed\"\n   [(clobber (const_int 0))]\n   \"\n {\n@@ -4160,7 +4045,8 @@\n       emit_insn (gen_movdf_cc_reg_sp64 (dest2, operands[1], operands[2], srca2, srcb2));\n     }\n   DONE;\n-}\")\n+}\"\n+  [(set_attr \"length\" \"2\")])\n \n \f\n ;;- zero extension instructions\n@@ -4299,17 +4185,12 @@\n    lduw\\\\t%1, %0\"\n   [(set_attr \"type\" \"shift,load\")])\n \n-(define_insn \"*zero_extendsidi2_insn_sp32\"\n+(define_insn_and_split \"*zero_extendsidi2_insn_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))]\n-  \"! TARGET_ARCH64 && reload_completed\"\n+  \"&& reload_completed\"\n   [(set (match_dup 2) (match_dup 3))\n    (set (match_dup 4) (match_dup 5))]\n   \"\n@@ -4334,7 +4215,8 @@\n       operands[4] = dest2;\n       operands[5] = operands[1];\n     }\n-}\")\n+}\"\n+  [(set_attr \"length\" \"2\")])\n \n ;; Simplify comparisons of extended values.\n \n@@ -4978,21 +4860,14 @@\n     }\n }\")\n \n-(define_insn \"adddi3_insn_sp32\"\n+(define_insn_and_split \"adddi3_insn_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n    (clobber (reg:CC 100))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"arith_double_operand\" \"\")\n-\t\t (match_operand:DI 2 \"arith_double_operand\" \"\")))\n-   (clobber (reg:CC 100))]\n-  \"! TARGET_ARCH64 && reload_completed\"\n+  \"&& reload_completed\"\n   [(parallel [(set (reg:CC_NOOV 100)\n \t\t   (compare:CC_NOOV (plus:SI (match_dup 4)\n \t\t\t\t\t     (match_dup 5))\n@@ -5021,7 +4896,8 @@\n   else\n #endif\n     operands[8] = gen_highpart_mode (SImode, DImode, operands[2]);\n-}\")\n+}\"\n+  [(set_attr \"length\" \"2\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -5069,26 +4945,21 @@\n   \"addx\\\\t%1, %2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n-(define_insn \"*addx_extend_sp32\"\n+(define_insn_and_split \"*addx_extend_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (plus:SI (plus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ\")\n-                                          (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t(zero_extend:DI (plus:SI (plus:SI\n+                                  (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ\")\n+                                  (match_operand:SI 2 \"arith_operand\" \"rI\"))\n                                  (ltu:SI (reg:CC_NOOV 100) (const_int 0)))))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extend:DI (plus:SI (plus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"\")\n-                                          (match_operand:SI 2 \"arith_operand\" \"\"))\n-                                 (ltu:SI (reg:CC_NOOV 100) (const_int 0)))))]\n-  \"! TARGET_ARCH64 && reload_completed\"\n+  \"&& reload_completed\"\n   [(set (match_dup 3) (plus:SI (plus:SI (match_dup 1) (match_dup 2))\n                                (ltu:SI (reg:CC_NOOV 100) (const_int 0))))\n    (set (match_dup 4) (const_int 0))]\n   \"operands[3] = gen_lowpart (SImode, operands[0]);\n-   operands[4] = gen_highpart_mode (SImode, DImode, operands[1]);\")\n+   operands[4] = gen_highpart_mode (SImode, DImode, operands[1]);\"\n+  [(set_attr \"length\" \"2\")])\n \n (define_insn \"*addx_extend_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5117,42 +4988,29 @@\n   \"subx\\\\t%r1, %2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n-(define_insn \"*subx_extend\"\n+(define_insn_and_split \"*subx_extend\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (minus:SI (minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n                                             (match_operand:SI 2 \"arith_operand\" \"rI\"))\n                                   (ltu:SI (reg:CC_NOOV 100) (const_int 0)))))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extend:DI (minus:SI (minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"\")\n-                                            (match_operand:SI 2 \"arith_operand\" \"\"))\n-                                  (ltu:SI (reg:CC_NOOV 100) (const_int 0)))))]\n-  \"! TARGET_ARCH64 && reload_completed\"\n+  \"&& reload_completed\"\n   [(set (match_dup 3) (minus:SI (minus:SI (match_dup 1) (match_dup 2))\n                                 (ltu:SI (reg:CC_NOOV 100) (const_int 0))))\n    (set (match_dup 4) (const_int 0))]\n   \"operands[3] = gen_lowpart (SImode, operands[0]);\n-   operands[4] = gen_highpart (SImode, operands[0]);\")\n+   operands[4] = gen_highpart (SImode, operands[0]);\"\n+  [(set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (plus:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n                  (match_operand:DI 2 \"register_operand\" \"r\")))\n    (clobber (reg:CC 100))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (plus:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n-                 (match_operand:DI 2 \"register_operand\" \"\")))\n-   (clobber (reg:CC 100))]\n-  \"! TARGET_ARCH64 && reload_completed\"\n+  \"&& reload_completed\"\n   [(parallel [(set (reg:CC_NOOV 100)\n                    (compare:CC_NOOV (plus:SI (match_dup 3) (match_dup 1))\n                                     (const_int 0)))\n@@ -5163,7 +5021,8 @@\n   \"operands[3] = gen_lowpart (SImode, operands[2]);\n    operands[4] = gen_highpart (SImode, operands[2]);\n    operands[5] = gen_lowpart (SImode, operands[0]);\n-   operands[6] = gen_highpart (SImode, operands[0]);\")\n+   operands[6] = gen_highpart (SImode, operands[0]);\"\n+  [(set_attr \"length\" \"2\")])\n \n (define_insn \"*adddi3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5268,22 +5127,14 @@\n     }\n }\")\n \n-(define_insn \"*subdi3_sp32\"\n+(define_insn_and_split \"*subdi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t  (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n+        (minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+                  (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n    (clobber (reg:CC 100))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                  (match_operand:DI 2 \"arith_double_operand\" \"\")))\n-   (clobber (reg:CC 100))]\n-  \"! TARGET_ARCH64\n-   && reload_completed\n+  \"&& reload_completed\n    && (GET_CODE (operands[2]) == CONST_INT\n        || GET_CODE (operands[2]) == CONST_DOUBLE)\"\n   [(clobber (const_int 0))]\n@@ -5313,7 +5164,8 @@\n                            highp));\n     }\n   DONE;\n-}\")\n+}\"\n+  [(set_attr \"length\" \"2\")])\n \n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -5334,21 +5186,14 @@\n   DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn_and_split \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n       (minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                 (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))\n    (clobber (reg:CC 100))]\n   \"! TARGET_ARCH64\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                  (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"\"))))\n-   (clobber (reg:CC 100))]\n-  \"! TARGET_ARCH64 && reload_completed\"\n+  \"&& reload_completed\"\n   [(parallel [(set (reg:CC_NOOV 100)\n                    (compare:CC_NOOV (minus:SI (match_dup 3) (match_dup 2))\n                                     (const_int 0)))\n@@ -5359,7 +5204,8 @@\n   \"operands[3] = gen_lowpart (SImode, operands[1]);\n    operands[4] = gen_highpart (SImode, operands[1]);\n    operands[5] = gen_lowpart (SImode, operands[0]);\n-   operands[6] = gen_highpart (SImode, operands[0]);\")\n+   operands[6] = gen_highpart (SImode, operands[0]);\"\n+  [(set_attr \"length\" \"2\")])\n \n (define_insn \"*subdi3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -6192,24 +6038,15 @@\n   operands[9] = gen_lowpart (SImode, operands[3]);\n }\")\n \n-(define_insn \"*and_not_di_sp32\"\n+(define_insn_and_split \"*and_not_di_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,b\")\n \t(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r,b\"))\n \t\t(match_operand:DI 2 \"register_operand\" \"r,b\")))]\n   \"! TARGET_ARCH64\"\n   \"@\n    #\n    fandnot1\\\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n-   (set_attr \"length\" \"2,*\")\n-   (set_attr \"fptype\" \"double\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"\"))\n-                (match_operand:DI 2 \"register_operand\" \"\")))]\n-  \"! TARGET_ARCH64\n-   && reload_completed\n+  \"&& reload_completed\n    && ((GET_CODE (operands[0]) == REG\n         && REGNO (operands[0]) < 32)\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -6222,7 +6059,10 @@\n    operands[5] = gen_highpart (SImode, operands[2]);\n    operands[6] = gen_lowpart (SImode, operands[0]);\n    operands[7] = gen_lowpart (SImode, operands[1]);\n-   operands[8] = gen_lowpart (SImode, operands[2]);\")\n+   operands[8] = gen_lowpart (SImode, operands[2]);\"\n+  [(set_attr \"type\" \"*,fp\")\n+   (set_attr \"length\" \"2,*\")\n+   (set_attr \"fptype\" \"double\")])\n \n (define_insn \"*and_not_di_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,b\")\n@@ -6300,24 +6140,15 @@\n   operands[4] = GEN_INT (~INTVAL (operands[2]));\n }\")\n \n-(define_insn \"*or_not_di_sp32\"\n+(define_insn_and_split \"*or_not_di_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,b\")\n \t(ior:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r,b\"))\n \t\t(match_operand:DI 2 \"register_operand\" \"r,b\")))]\n   \"! TARGET_ARCH64\"\n   \"@\n    #\n    fornot1\\\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n-   (set_attr \"length\" \"2,*\")\n-   (set_attr \"fptype\" \"double\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (ior:DI (not:DI (match_operand:DI 1 \"register_operand\" \"\"))\n-                (match_operand:DI 2 \"register_operand\" \"\")))]\n-  \"! TARGET_ARCH64\n-   && reload_completed\n+  \"&& reload_completed\n    && ((GET_CODE (operands[0]) == REG\n         && REGNO (operands[0]) < 32)\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -6330,7 +6161,10 @@\n    operands[5] = gen_highpart (SImode, operands[2]);\n    operands[6] = gen_lowpart (SImode, operands[0]);\n    operands[7] = gen_lowpart (SImode, operands[1]);\n-   operands[8] = gen_lowpart (SImode, operands[2]);\")\n+   operands[8] = gen_lowpart (SImode, operands[2]);\"\n+  [(set_attr \"type\" \"*,fp\")\n+   (set_attr \"length\" \"2,*\")\n+   (set_attr \"fptype\" \"double\")])\n \n (define_insn \"*or_not_di_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,b\")\n@@ -6433,24 +6267,15 @@\n \n ;; xnor patterns.  Note that (a ^ ~b) == (~a ^ b) == ~(a ^ b).\n ;; Combine now canonicalizes to the rightmost expression.\n-(define_insn \"*xor_not_di_sp32\"\n+(define_insn_and_split \"*xor_not_di_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,b\")\n \t(not:DI (xor:DI (match_operand:DI 1 \"register_operand\" \"r,b\")\n \t\t\t(match_operand:DI 2 \"register_operand\" \"r,b\"))))]\n   \"! TARGET_ARCH64\"\n   \"@\n    #\n    fxnor\\\\t%1, %2, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n-   (set_attr \"length\" \"2,*\")\n-   (set_attr \"fptype\" \"double\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (not:DI (xor:DI (match_operand:DI 1 \"register_operand\" \"\")\n-                        (match_operand:DI 2 \"register_operand\" \"\"))))]\n-  \"! TARGET_ARCH64\n-   && reload_completed\n+  \"&& reload_completed\n    && ((GET_CODE (operands[0]) == REG\n         && REGNO (operands[0]) < 32)\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -6463,7 +6288,10 @@\n    operands[5] = gen_highpart (SImode, operands[2]);\n    operands[6] = gen_lowpart (SImode, operands[0]);\n    operands[7] = gen_lowpart (SImode, operands[1]);\n-   operands[8] = gen_lowpart (SImode, operands[2]);\")\n+   operands[8] = gen_lowpart (SImode, operands[2]);\"\n+  [(set_attr \"type\" \"*,fp\")\n+   (set_attr \"length\" \"2,*\")\n+   (set_attr \"fptype\" \"double\")])\n \n (define_insn \"*xor_not_di_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,b\")\n@@ -6654,20 +6482,13 @@\n     }\n }\")\n \n-(define_insn \"*negdi2_sp32\"\n+(define_insn_and_split \"*negdi2_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n    (clobber (reg:CC 100))]\n   \"TARGET_ARCH32\"\n   \"#\"\n-  [(set_attr \"length\" \"2\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (neg:DI (match_operand:DI 1 \"register_operand\" \"\")))\n-   (clobber (reg:CC 100))]\n-  \"TARGET_ARCH32\n-   && reload_completed\"\n+  \"&& reload_completed\"\n   [(parallel [(set (reg:CC_NOOV 100)\n                    (compare:CC_NOOV (minus:SI (const_int 0) (match_dup 5))\n                                     (const_int 0)))\n@@ -6677,7 +6498,8 @@\n   \"operands[2] = gen_highpart (SImode, operands[0]);\n    operands[3] = gen_highpart (SImode, operands[1]);\n    operands[4] = gen_lowpart (SImode, operands[0]);\n-   operands[5] = gen_lowpart (SImode, operands[1]);\")\n+   operands[5] = gen_lowpart (SImode, operands[1]);\"\n+  [(set_attr \"length\" \"2\")])\n \n (define_insn \"*negdi2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -6735,22 +6557,14 @@\n   \"\"\n   \"\")\n \n-(define_insn \"*one_cmpldi2_sp32\"\n+(define_insn_and_split \"*one_cmpldi2_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,b\")\n \t(not:DI (match_operand:DI 1 \"register_operand\" \"r,b\")))]\n   \"! TARGET_ARCH64\"\n   \"@\n    #\n    fnot1\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,fp\")\n-   (set_attr \"length\" \"2,*\")\n-   (set_attr \"fptype\" \"double\")])\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (not:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n-  \"! TARGET_ARCH64\n-   && reload_completed\n+  \"&& reload_completed\n    && ((GET_CODE (operands[0]) == REG\n         && REGNO (operands[0]) < 32)\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -6761,7 +6575,10 @@\n   \"operands[2] = gen_highpart (SImode, operands[0]);\n    operands[3] = gen_highpart (SImode, operands[1]);\n    operands[4] = gen_lowpart (SImode, operands[0]);\n-   operands[5] = gen_lowpart (SImode, operands[1]);\")\n+   operands[5] = gen_lowpart (SImode, operands[1]);\"\n+  [(set_attr \"type\" \"*,fp\")\n+   (set_attr \"length\" \"2,*\")\n+   (set_attr \"fptype\" \"double\")])\n \n (define_insn \"*one_cmpldi2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,b\")\n@@ -6992,7 +6809,7 @@\n   \"TARGET_FPU\"\n   \"\")\n \n-(define_insn \"*negtf2_notv9\"\n+(define_insn_and_split \"*negtf2_notv9\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e,e\")\n \t(neg:TF (match_operand:TF 1 \"register_operand\" \"0,e\")))]\n   ; We don't use quad float insns here so we don't need TARGET_HARD_QUAD.\n@@ -7001,15 +6818,7 @@\n   \"@\n   fnegs\\\\t%0, %0\n   #\"\n-  [(set_attr \"type\" \"fpmove,*\")\n-   (set_attr \"length\" \"*,2\")])\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(neg:TF (match_operand:TF 1 \"register_operand\" \"\")))]\n-  \"TARGET_FPU\n-   && ! TARGET_V9\n-   && reload_completed\n+  \"&& reload_completed\n    && sparc_absnegfloat_split_legitimate (operands[0], operands[1])\"\n   [(set (match_dup 2) (neg:SF (match_dup 3)))\n    (set (match_dup 4) (match_dup 5))\n@@ -7019,63 +6828,53 @@\n    operands[4] = gen_rtx_raw_REG (SFmode, REGNO (operands[0]) + 1);\n    operands[5] = gen_rtx_raw_REG (SFmode, REGNO (operands[1]) + 1);\n    operands[6] = gen_rtx_raw_REG (DFmode, REGNO (operands[0]) + 2);\n-   operands[7] = gen_rtx_raw_REG (DFmode, REGNO (operands[1]) + 2);\")\n+   operands[7] = gen_rtx_raw_REG (DFmode, REGNO (operands[1]) + 2);\"\n+  [(set_attr \"type\" \"fpmove,*\")\n+   (set_attr \"length\" \"*,2\")])\n \n-(define_insn \"*negtf2_v9\"\n+(define_insn_and_split \"*negtf2_v9\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e,e\")\n \t(neg:TF (match_operand:TF 1 \"register_operand\" \"0,e\")))]\n   ; We don't use quad float insns here so we don't need TARGET_HARD_QUAD.\n   \"TARGET_FPU && TARGET_V9\"\n   \"@\n   fnegd\\\\t%0, %0\n   #\"\n-  [(set_attr \"type\" \"fpmove,*\")\n-   (set_attr \"length\" \"*,2\")\n-   (set_attr \"fptype\" \"double\")])\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(neg:TF (match_operand:TF 1 \"register_operand\" \"\")))]\n-  \"TARGET_FPU\n-   && TARGET_V9\n-   && reload_completed\n+  \"&& reload_completed\n    && sparc_absnegfloat_split_legitimate (operands[0], operands[1])\"\n   [(set (match_dup 2) (neg:DF (match_dup 3)))\n    (set (match_dup 4) (match_dup 5))]\n   \"operands[2] = gen_rtx_raw_REG (DFmode, REGNO (operands[0]));\n    operands[3] = gen_rtx_raw_REG (DFmode, REGNO (operands[1]));\n    operands[4] = gen_rtx_raw_REG (DFmode, REGNO (operands[0]) + 2);\n-   operands[5] = gen_rtx_raw_REG (DFmode, REGNO (operands[1]) + 2);\")\n+   operands[5] = gen_rtx_raw_REG (DFmode, REGNO (operands[1]) + 2);\"\n+  [(set_attr \"type\" \"fpmove,*\")\n+   (set_attr \"length\" \"*,2\")\n+   (set_attr \"fptype\" \"double\")])\n \n (define_expand \"negdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(neg:DF (match_operand:DF 1 \"register_operand\" \"\")))]\n   \"TARGET_FPU\"\n   \"\")\n \n-(define_insn \"*negdf2_notv9\"\n+(define_insn_and_split \"*negdf2_notv9\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e,e\")\n \t(neg:DF (match_operand:DF 1 \"register_operand\" \"0,e\")))]\n   \"TARGET_FPU && ! TARGET_V9\"\n   \"@\n   fnegs\\\\t%0, %0\n   #\"\n-  [(set_attr \"type\" \"fpmove,*\")\n-   (set_attr \"length\" \"*,2\")])\n-\n-(define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-        (neg:DF (match_operand:DF 1 \"register_operand\" \"\")))]\n-  \"TARGET_FPU\n-   && ! TARGET_V9\n-   && reload_completed\n+  \"&& reload_completed\n    && sparc_absnegfloat_split_legitimate (operands[0], operands[1])\"\n   [(set (match_dup 2) (neg:SF (match_dup 3)))\n    (set (match_dup 4) (match_dup 5))]\n   \"operands[2] = gen_rtx_raw_REG (SFmode, REGNO (operands[0]));\n    operands[3] = gen_rtx_raw_REG (SFmode, REGNO (operands[1]));\n    operands[4] = gen_rtx_raw_REG (SFmode, REGNO (operands[0]) + 1);\n-   operands[5] = gen_rtx_raw_REG (SFmode, REGNO (operands[1]) + 1);\")\n+   operands[5] = gen_rtx_raw_REG (SFmode, REGNO (operands[1]) + 1);\"\n+  [(set_attr \"type\" \"fpmove,*\")\n+   (set_attr \"length\" \"*,2\")])\n \n (define_insn \"*negdf2_v9\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n@@ -7098,23 +6897,15 @@\n   \"TARGET_FPU\"\n   \"\")\n \n-(define_insn \"*abstf2_notv9\"\n+(define_insn_and_split \"*abstf2_notv9\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e,e\")\n \t(abs:TF (match_operand:TF 1 \"register_operand\" \"0,e\")))]\n   ; We don't use quad float insns here so we don't need TARGET_HARD_QUAD.\n   \"TARGET_FPU && ! TARGET_V9\"\n   \"@\n   fabss\\\\t%0, %0\n   #\"\n-  [(set_attr \"type\" \"fpmove,*\")\n-   (set_attr \"length\" \"*,2\")])\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(abs:TF (match_operand:TF 1 \"register_operand\" \"\")))]\n-  \"TARGET_FPU\n-   && ! TARGET_V9\n-   && reload_completed\n+  \"&& reload_completed\n    && sparc_absnegfloat_split_legitimate (operands[0], operands[1])\"\n   [(set (match_dup 2) (abs:SF (match_dup 3)))\n    (set (match_dup 4) (match_dup 5))\n@@ -7124,7 +6915,9 @@\n    operands[4] = gen_rtx_raw_REG (SFmode, REGNO (operands[0]) + 1);\n    operands[5] = gen_rtx_raw_REG (SFmode, REGNO (operands[1]) + 1);\n    operands[6] = gen_rtx_raw_REG (DFmode, REGNO (operands[0]) + 2);\n-   operands[7] = gen_rtx_raw_REG (DFmode, REGNO (operands[1]) + 2);\")\n+   operands[7] = gen_rtx_raw_REG (DFmode, REGNO (operands[1]) + 2);\"\n+  [(set_attr \"type\" \"fpmove,*\")\n+   (set_attr \"length\" \"*,2\")])\n \n (define_insn \"*abstf2_hq_v9\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e,e\")\n@@ -7136,60 +6929,48 @@\n   [(set_attr \"type\" \"fpmove\")\n    (set_attr \"fptype\" \"double,*\")])\n \n-(define_insn \"*abstf2_v9\"\n+(define_insn_and_split \"*abstf2_v9\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e,e\")\n \t(abs:TF (match_operand:TF 1 \"register_operand\" \"0,e\")))]\n   \"TARGET_FPU && TARGET_V9 && !TARGET_HARD_QUAD\"\n   \"@\n   fabsd\\\\t%0, %0\n   #\"\n-  [(set_attr \"type\" \"fpmove,*\")\n-   (set_attr \"length\" \"*,2\")\n-   (set_attr \"fptype\" \"double,*\")])\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(abs:TF (match_operand:TF 1 \"register_operand\" \"\")))]\n-  \"TARGET_FPU\n-   && TARGET_V9\n-   && reload_completed\n+  \"&& reload_completed\n    && sparc_absnegfloat_split_legitimate (operands[0], operands[1])\"\n   [(set (match_dup 2) (abs:DF (match_dup 3)))\n    (set (match_dup 4) (match_dup 5))]\n   \"operands[2] = gen_rtx_raw_REG (DFmode, REGNO (operands[0]));\n    operands[3] = gen_rtx_raw_REG (DFmode, REGNO (operands[1]));\n    operands[4] = gen_rtx_raw_REG (DFmode, REGNO (operands[0]) + 2);\n-   operands[5] = gen_rtx_raw_REG (DFmode, REGNO (operands[1]) + 2);\")\n+   operands[5] = gen_rtx_raw_REG (DFmode, REGNO (operands[1]) + 2);\"\n+  [(set_attr \"type\" \"fpmove,*\")\n+   (set_attr \"length\" \"*,2\")\n+   (set_attr \"fptype\" \"double,*\")])\n \n (define_expand \"absdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(abs:DF (match_operand:DF 1 \"register_operand\" \"\")))]\n   \"TARGET_FPU\"\n   \"\")\n \n-(define_insn \"*absdf2_notv9\"\n+(define_insn_and_split \"*absdf2_notv9\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e,e\")\n \t(abs:DF (match_operand:DF 1 \"register_operand\" \"0,e\")))]\n   \"TARGET_FPU && ! TARGET_V9\"\n   \"@\n   fabss\\\\t%0, %0\n   #\"\n-  [(set_attr \"type\" \"fpmove,*\")\n-   (set_attr \"length\" \"*,2\")])\n-\n-(define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(abs:DF (match_operand:DF 1 \"register_operand\" \"\")))]\n-  \"TARGET_FPU\n-   && ! TARGET_V9\n-   && reload_completed\n+  \"&& reload_completed\n    && sparc_absnegfloat_split_legitimate (operands[0], operands[1])\"\n   [(set (match_dup 2) (abs:SF (match_dup 3)))\n    (set (match_dup 4) (match_dup 5))]\n   \"operands[2] = gen_rtx_raw_REG (SFmode, REGNO (operands[0]));\n    operands[3] = gen_rtx_raw_REG (SFmode, REGNO (operands[1]));\n    operands[4] = gen_rtx_raw_REG (SFmode, REGNO (operands[0]) + 1);\n-   operands[5] = gen_rtx_raw_REG (SFmode, REGNO (operands[1]) + 1);\")\n+   operands[5] = gen_rtx_raw_REG (SFmode, REGNO (operands[1]) + 1);\"\n+  [(set_attr \"type\" \"fpmove,*\")\n+   (set_attr \"length\" \"*,2\")])\n \n (define_insn \"*absdf2_v9\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")"}]}