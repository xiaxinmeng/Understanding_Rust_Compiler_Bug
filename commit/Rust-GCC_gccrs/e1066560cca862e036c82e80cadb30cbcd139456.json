{"sha": "e1066560cca862e036c82e80cadb30cbcd139456", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEwNjY1NjBjY2E4NjJlMDM2YzgyZTgwY2FkYjMwY2JjZDEzOTQ1Ng==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2012-11-04T18:44:25Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2012-11-04T18:44:25Z"}, "message": "re PR debug/54693 (VTA guality issues with loops)\n\nPR debug/54693\n* tree-ssa-loop-ivopts.c (remove_unused_ivs): Emit debug temps\nfor dropped IV sets.\n\nFrom-SVN: r193139", "tree": {"sha": "5941872d42cf42c445aad249385318ff59ff2ea2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5941872d42cf42c445aad249385318ff59ff2ea2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1066560cca862e036c82e80cadb30cbcd139456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1066560cca862e036c82e80cadb30cbcd139456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1066560cca862e036c82e80cadb30cbcd139456", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1066560cca862e036c82e80cadb30cbcd139456/comments", "author": null, "committer": null, "parents": [{"sha": "447a704564e850ccba796bb688b5bc83fd3ee892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/447a704564e850ccba796bb688b5bc83fd3ee892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/447a704564e850ccba796bb688b5bc83fd3ee892"}], "stats": {"total": 112, "additions": 111, "deletions": 1}, "files": [{"sha": "2538bfb8adc4a83681813da75819d2aefd05d333", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1066560cca862e036c82e80cadb30cbcd139456/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1066560cca862e036c82e80cadb30cbcd139456/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1066560cca862e036c82e80cadb30cbcd139456", "patch": "@@ -1,3 +1,9 @@\n+2012-11-04  Alexandre Oliva <aoliva@redhat.com>, Jakub Jelinek <jakub@redhat.com>\n+\n+\tPR debug/54693\n+\t* tree-ssa-loop-ivopts.c (remove_unused_ivs): Emit debug temps\n+\tfor dropped IV sets.\n+\n 2012-11-04  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR debug/54693"}, {"sha": "4837fc6681290cebc15d1f71046c6b21d01f5c86", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 105, "deletions": 1, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1066560cca862e036c82e80cadb30cbcd139456/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1066560cca862e036c82e80cadb30cbcd139456/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=e1066560cca862e036c82e80cadb30cbcd139456", "patch": "@@ -6422,7 +6422,111 @@ remove_unused_ivs (struct ivopts_data *data)\n \t  && !info->inv_id\n \t  && !info->iv->have_use_for\n \t  && !info->preserve_biv)\n-\tbitmap_set_bit (toremove, SSA_NAME_VERSION (info->iv->ssa_name));\n+\t{\n+\t  bitmap_set_bit (toremove, SSA_NAME_VERSION (info->iv->ssa_name));\n+\t  \n+\t  tree def = info->iv->ssa_name;\n+\n+\t  if (MAY_HAVE_DEBUG_STMTS && SSA_NAME_DEF_STMT (def))\n+\t    {\n+\t      imm_use_iterator imm_iter;\n+\t      use_operand_p use_p;\n+\t      gimple stmt;\n+\t      int count = 0;\n+\n+\t      FOR_EACH_IMM_USE_STMT (stmt, imm_iter, def)\n+\t\t{\n+\t\t  if (!gimple_debug_bind_p (stmt))\n+\t\t    continue;\n+\n+\t\t  /* We just want to determine whether to do nothing\n+\t\t     (count == 0), to substitute the computed\n+\t\t     expression into a single use of the SSA DEF by\n+\t\t     itself (count == 1), or to use a debug temp\n+\t\t     because the SSA DEF is used multiple times or as\n+\t\t     part of a larger expression (count > 1). */\n+\t\t  count++;\n+\t\t  if (gimple_debug_bind_get_value (stmt) != def)\n+\t\t    count++;\n+\n+\t\t  if (count > 1)\n+\t\t    BREAK_FROM_IMM_USE_STMT (imm_iter);\n+\t\t}\n+\n+\t      if (!count)\n+\t\tcontinue;\n+\n+\t      struct iv_use dummy_use;\n+\t      struct iv_cand *best_cand = NULL, *cand;\n+\t      unsigned i, best_pref = 0, cand_pref;\n+\n+\t      memset (&dummy_use, 0, sizeof (dummy_use));\n+\t      dummy_use.iv = info->iv;\n+\t      for (i = 0; i < n_iv_uses (data) && i < 64; i++)\n+\t\t{\n+\t\t  cand = iv_use (data, i)->selected;\n+\t\t  if (cand == best_cand)\n+\t\t    continue;\n+\t\t  cand_pref = operand_equal_p (cand->iv->step,\n+\t\t\t\t\t       info->iv->step, 0)\n+\t\t    ? 4 : 0;\n+\t\t  cand_pref\n+\t\t    += TYPE_MODE (TREE_TYPE (cand->iv->base))\n+\t\t    == TYPE_MODE (TREE_TYPE (info->iv->base))\n+\t\t    ? 2 : 0;\n+\t\t  cand_pref\n+\t\t    += TREE_CODE (cand->iv->base) == INTEGER_CST\n+\t\t    ? 1 : 0;\n+\t\t  if (best_cand == NULL || best_pref < cand_pref)\n+\t\t    {\n+\t\t      best_cand = cand;\n+\t\t      best_pref = cand_pref;\n+\t\t    }\n+\t\t}\n+\n+\t      if (!best_cand)\n+\t\tcontinue;\n+\n+\t      tree comp = get_computation_at (data->current_loop,\n+\t\t\t\t\t      &dummy_use, best_cand,\n+\t\t\t\t\t      SSA_NAME_DEF_STMT (def));\n+\t      if (!comp)\n+\t\tcontinue;\n+\n+\t      if (count > 1)\n+\t\t{\n+\t\t  tree vexpr = make_node (DEBUG_EXPR_DECL);\n+\t\t  DECL_ARTIFICIAL (vexpr) = 1;\n+\t\t  TREE_TYPE (vexpr) = TREE_TYPE (comp);\n+\t\t  if (SSA_NAME_VAR (def))\n+\t\t    DECL_MODE (vexpr) = DECL_MODE (SSA_NAME_VAR (def));\n+\t\t  else\n+\t\t    DECL_MODE (vexpr) = TYPE_MODE (TREE_TYPE (vexpr));\n+\t\t  gimple def_temp = gimple_build_debug_bind (vexpr, comp, NULL);\n+\t\t  gimple_stmt_iterator gsi;\n+\n+\t\t  if (gimple_code (SSA_NAME_DEF_STMT (def)) == GIMPLE_PHI)\n+\t\t    gsi = gsi_after_labels (gimple_bb\n+\t\t\t\t\t    (SSA_NAME_DEF_STMT (def)));\n+\t\t  else\n+\t\t    gsi = gsi_for_stmt (SSA_NAME_DEF_STMT (def));\n+\n+\t\t  gsi_insert_before (&gsi, def_temp, GSI_SAME_STMT);\n+\t\t  comp = vexpr;\n+\t\t}\n+\n+\t      FOR_EACH_IMM_USE_STMT (stmt, imm_iter, def)\n+\t\t{\n+\t\t  if (!gimple_debug_bind_p (stmt))\n+\t\t    continue;\n+\n+\t\t  FOR_EACH_IMM_USE_ON_STMT (use_p, imm_iter)\n+\t\t    SET_USE (use_p, comp);\n+\n+\t\t  update_stmt (stmt);\n+\t\t}\n+\t    }\n+\t}\n     }\n \n   release_defs_bitset (toremove);"}]}