{"sha": "e3bf220a4651c57a992496ece0e6b96cf2d1bc82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiZjIyMGE0NjUxYzU3YTk5MjQ5NmVjZTBlNmI5NmNmMmQxYmM4Mg==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2003-08-12T01:25:07Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2003-08-12T01:25:07Z"}, "message": "lib1funcs.asm (__udivdi3): Add .type and .size information in SHmedia case too.\n\n\t* config/sh/lib1funcs.asm (__udivdi3): Add .type and .size\n\tinformation in SHmedia case too.\n\t(__divdi3, __umoddi3, __moddi3, __init_trampoline, __ic_invalidate):\n\tLikewise.\n\t(__set_fpscr): Use an access via GOT for PIC case.\n\nFrom-SVN: r70347", "tree": {"sha": "0f736ec75ed4bd4a640ff7ec2691220df058c73a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f736ec75ed4bd4a640ff7ec2691220df058c73a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3bf220a4651c57a992496ece0e6b96cf2d1bc82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3bf220a4651c57a992496ece0e6b96cf2d1bc82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3bf220a4651c57a992496ece0e6b96cf2d1bc82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3bf220a4651c57a992496ece0e6b96cf2d1bc82/comments", "author": null, "committer": null, "parents": [{"sha": "0c46c5c7cfd17e908257aaa2c484a6e2af332662", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c46c5c7cfd17e908257aaa2c484a6e2af332662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c46c5c7cfd17e908257aaa2c484a6e2af332662"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "959f77debdda34f0c193494bb1743a229aabcb91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3bf220a4651c57a992496ece0e6b96cf2d1bc82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3bf220a4651c57a992496ece0e6b96cf2d1bc82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3bf220a4651c57a992496ece0e6b96cf2d1bc82", "patch": "@@ -1,3 +1,11 @@\n+2003-08-11  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/lib1funcs.asm (__udivdi3): Add .type and .size\n+\tinformation in SHmedia case too.\n+\t(__divdi3, __umoddi3, __moddi3, __init_trampoline, __ic_invalidate):\n+\tLikewise.\n+\t(__set_fpscr): Use an access via GOT for PIC case.\n+\n 2003-08-11  Kelley Cook  <kelleycook@wideopenwest.com>\n \n \t* configure.in (intermodule): Make switch test more portable."}, {"sha": "eebce2ecf966688c472d813c9ecf3cb06bb0aa87", "filename": "gcc/config/sh/lib1funcs.asm", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3bf220a4651c57a992496ece0e6b96cf2d1bc82/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3bf220a4651c57a992496ece0e6b96cf2d1bc82/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.asm?ref=e3bf220a4651c57a992496ece0e6b96cf2d1bc82", "patch": "@@ -1638,6 +1638,7 @@ LOCAL(large_divisor):\n \t.section\t.text..SHmedia32,\"ax\"\n \t.align\t2\n \t.global\tGLOBAL(udivdi3)\n+\tFUNC(GLOBAL(udivdi3))\n GLOBAL(udivdi3):\n \tshlri r3,1,r4\n \tnsb r4,r22\n@@ -1745,6 +1746,7 @@ LOCAL(no_lo_adj):\n \tcmpgtu r5,r2,r5\n \tsub r8,r5,r2\n \tblink tr0,r63\n+\tENDFUNC(GLOBAL(udivdi3))\n /* Note 1: To shift the result of the second divide stage so that the result\n    always fits into 32 bits, yet we still reduce the rest sufficiently\n    would require a lot of instructions to do the shifts just right.  Using\n@@ -1763,6 +1765,7 @@ LOCAL(no_lo_adj):\n \t.section\t.text..SHmedia32,\"ax\"\n \t.align\t2\n \t.global\tGLOBAL(divdi3)\n+\tFUNC(GLOBAL(divdi3))\n GLOBAL(divdi3):\n \tpta GLOBAL(udivdi3),tr0\n \tshari r2,63,r22\n@@ -1776,6 +1779,7 @@ GLOBAL(divdi3):\n \tblink tr0,r18\n \tsub r63,r2,r2\n \tblink tr1,r63\n+\tENDFUNC(GLOBAL(divdi3))\n #endif /* __SHMEDIA__ */\n #endif /* L_divdi3 */\n \n@@ -1785,6 +1789,7 @@ GLOBAL(divdi3):\n \t.section\t.text..SHmedia32,\"ax\"\n \t.align\t2\n \t.global\tGLOBAL(umoddi3)\n+\tFUNC(GLOBAL(umoddi3))\n GLOBAL(umoddi3):\n \tshlri r3,1,r4\n \tnsb r4,r22\n@@ -1893,6 +1898,7 @@ LOCAL(no_lo_adj):\n \tsub r2,r5,r2\n \tshlrd r2,r22,r2\n \tblink tr0,r63\n+\tENDFUNC(GLOBAL(umoddi3))\n /* Note 1: To shift the result of the second divide stage so that the result\n    always fits into 32 bits, yet we still reduce the rest sufficiently\n    would require a lot of instructions to do the shifts just right.  Using\n@@ -1911,6 +1917,7 @@ LOCAL(no_lo_adj):\n \t.section\t.text..SHmedia32,\"ax\"\n \t.align\t2\n \t.global\tGLOBAL(moddi3)\n+\tFUNC(GLOBAL(moddi3))\n GLOBAL(moddi3):\n \tpta GLOBAL(umoddi3),tr0\n \tshari r2,63,r22\n@@ -1924,6 +1931,7 @@ GLOBAL(moddi3):\n \tblink tr0,r18\n \tsub r63,r2,r2\n \tblink tr1,r63\n+\tENDFUNC(GLOBAL(moddi3))\n #endif /* __SHMEDIA__ */\n #endif /* L_moddi3 */\n \n@@ -1936,7 +1944,17 @@ GLOBAL(moddi3):\n \tFUNC(GLOBAL(set_fpscr))\n GLOBAL(set_fpscr):\n \tlds r4,fpscr\n+#ifdef __PIC__\n+\tmov.l\tr12,@-r15\n+\tmova\tLOCAL(set_fpscr_L0),r0\n+\tmov.l\tLOCAL(set_fpscr_L0),r12\n+\tadd\tr0,r12\n+\tmov.l\tLOCAL(set_fpscr_L1),r0\n+\tmov.l\t@(r0,r12),r1\n+\tmov.l\t@r15+,r12\n+#else\n \tmov.l LOCAL(set_fpscr_L1),r1\n+#endif\n \tswap.w r4,r0\n \tor #24,r0\n #ifndef FMOVD_WORKS\n@@ -1964,8 +1982,15 @@ GLOBAL(set_fpscr):\n \tmov.l r3,@(4,r1)\n #endif\n \t.align 2\n+#ifdef __PIC__\n+LOCAL(set_fpscr_L0):\n+\t.long _GLOBAL_OFFSET_TABLE_\n+LOCAL(set_fpscr_L1):\n+\t.long GLOBAL(fpscr_values@GOT)\n+#else\n LOCAL(set_fpscr_L1):\n \t.long GLOBAL(fpscr_values)\n+#endif\n \n \tENDFUNC(GLOBAL(set_fpscr))\n #ifndef NO_FPSCR_VALUES\n@@ -1983,6 +2008,7 @@ LOCAL(set_fpscr_L1):\n \t.section\t.text..SHmedia32,\"ax\"\n \t.align\t2\n \t.global\tGLOBAL(init_trampoline)\n+\tFUNC(GLOBAL(init_trampoline))\n GLOBAL(init_trampoline):\n \tst.l\tr0,8,r2\n #ifdef __LITTLE_ENDIAN__\n@@ -1999,13 +2025,17 @@ GLOBAL(init_trampoline):\n \tst.q\tr0,0,r20\n \tst.l\tr0,12,r3\n \t.global\tGLOBAL(ic_invalidate)\n+\tFUNC(GLOBAL(ic_invalidate))\n GLOBAL(ic_invalidate):\n \tocbwb\tr0,0\n \tsynco\n \ticbi\tr0, 0\n \tptabs\tr18, tr0\n \tsynci\n \tblink\ttr0, r63\n+\n+\tENDFUNC(GLOBAL(ic_invalidate))\n+\tENDFUNC(GLOBAL(init_trampoline))\n #elif defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__)\n \t.global GLOBAL(ic_invalidate)\n \tFUNC(GLOBAL(ic_invalidate))"}]}