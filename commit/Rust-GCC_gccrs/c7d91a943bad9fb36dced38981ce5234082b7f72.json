{"sha": "c7d91a943bad9fb36dced38981ce5234082b7f72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdkOTFhOTQzYmFkOWZiMzZkY2VkMzg5ODFjZTUyMzQwODJiN2Y3Mg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-10-23T21:37:52Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-10-23T21:37:52Z"}, "message": "re PR middle-end/12705 (: complex powers)\n\n\n\tPR middle-end/12705\n\t* optabs.c (expand_binop): When expanding complex operations\n\tinline, always calculate result into a new temporary register.\n\tMinor code clean-ups.\n\nFrom-SVN: r72871", "tree": {"sha": "12397fd1edfe289ae3f5ac482f42562897224513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12397fd1edfe289ae3f5ac482f42562897224513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7d91a943bad9fb36dced38981ce5234082b7f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d91a943bad9fb36dced38981ce5234082b7f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d91a943bad9fb36dced38981ce5234082b7f72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d91a943bad9fb36dced38981ce5234082b7f72/comments", "author": null, "committer": null, "parents": [{"sha": "7989e4dc2471b3073e73f5a95095caf2dab7aac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7989e4dc2471b3073e73f5a95095caf2dab7aac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7989e4dc2471b3073e73f5a95095caf2dab7aac1"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "e29d3bca7d782a7a61a1962399fb8774ef933fe3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d91a943bad9fb36dced38981ce5234082b7f72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d91a943bad9fb36dced38981ce5234082b7f72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7d91a943bad9fb36dced38981ce5234082b7f72", "patch": "@@ -1,3 +1,10 @@\n+2003-10-23  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/12705\n+\t* optabs.c (expand_binop): When expanding complex operations\n+\tinline, always calculate result into a new temporary register.\n+\tMinor code clean-ups.\n+\n 2003-10-24  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* objc/lang-specs.h: Handle -print-objc-runtime-info."}, {"sha": "1410ed2d209766393e52cba611e141419a767411", "filename": "gcc/optabs.c", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d91a943bad9fb36dced38981ce5234082b7f72/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d91a943bad9fb36dced38981ce5234082b7f72/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c7d91a943bad9fb36dced38981ce5234082b7f72", "patch": "@@ -1521,24 +1521,17 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n       rtx real0 = 0, imag0 = 0;\n       rtx real1 = 0, imag1 = 0;\n       rtx realr, imagr, res;\n-      rtx seq;\n-      rtx equiv_value;\n+      rtx seq, result;\n       int ok = 0;\n \n       /* Find the correct mode for the real and imaginary parts.  */\n-      enum machine_mode submode = GET_MODE_INNER(mode);\n+      enum machine_mode submode = GET_MODE_INNER (mode);\n \n       if (submode == BLKmode)\n \tabort ();\n \n-      if (! target)\n-\ttarget = gen_reg_rtx (mode);\n-\n       start_sequence ();\n \n-      realr = gen_realpart (submode, target);\n-      imagr = gen_imagpart (submode, target);\n-\n       if (GET_MODE (op0) == mode)\n \t{\n \t  real0 = gen_realpart (submode, op0);\n@@ -1558,6 +1551,10 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n       if (real0 == 0 || real1 == 0 || ! (imag0 != 0 || imag1 != 0))\n \tabort ();\n \n+      result = gen_reg_rtx (mode);\n+      realr = gen_realpart (submode, result);\n+      imagr = gen_imagpart (submode, result);\n+\n       switch (binoptab->code)\n \t{\n \tcase PLUS:\n@@ -1749,16 +1746,10 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n \n       if (ok)\n \t{\n-\t  if (binoptab->code != UNKNOWN)\n-\t    equiv_value\n-\t      = gen_rtx_fmt_ee (binoptab->code, mode,\n-\t\t\t\tcopy_rtx (op0), copy_rtx (op1));\n-\t  else\n-\t    equiv_value = 0;\n-\n-\t  emit_no_conflict_block (seq, target, op0, op1, equiv_value);\n-\n-\t  return target;\n+\t  rtx equiv = gen_rtx_fmt_ee (binoptab->code, mode,\n+\t\t\t\t      copy_rtx (op0), copy_rtx (op1));\n+\t  emit_no_conflict_block (seq, result, op0, op1, equiv);\n+\t  return result;\n \t}\n     }\n "}]}