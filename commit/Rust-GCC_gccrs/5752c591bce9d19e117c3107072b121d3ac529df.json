{"sha": "5752c591bce9d19e117c3107072b121d3ac529df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc1MmM1OTFiY2U5ZDE5ZTExN2MzMTA3MDcyYjEyMWQzYWM1MjlkZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-01-23T14:57:44Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-01-23T14:57:44Z"}, "message": "re PR libitm/51830 (FAIL: libitm.c/mem(cpy|set)-1.c execution test)\n\n\tPR libitm/51830\n\t* builtin-types.def (BT_FN_UINT_UINT_VAR): New.\n\t* gtm-builtins.def (BUILT_IN_TM_START): Declare as BT_FN_UINT_UINT_VAR.\n\nlibitm/ChangeLog:\n\n\tPR libitm/51830\n\t* config/x86/sjlj.S (_ITM_beginTransaction) [!__x86_64__]: Load\n\tthe first function argument to %eax.\n\nFrom-SVN: r183435", "tree": {"sha": "aea413a283800e7980e1cb2190d09e87b8614f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aea413a283800e7980e1cb2190d09e87b8614f13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5752c591bce9d19e117c3107072b121d3ac529df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5752c591bce9d19e117c3107072b121d3ac529df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5752c591bce9d19e117c3107072b121d3ac529df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5752c591bce9d19e117c3107072b121d3ac529df/comments", "author": null, "committer": null, "parents": [{"sha": "9dcc9b3b01f3bb19bf88f88ff3428c187c75ceb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dcc9b3b01f3bb19bf88f88ff3428c187c75ceb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dcc9b3b01f3bb19bf88f88ff3428c187c75ceb7"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "c697580d06026f5129cffd17369b10e5a76104e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5752c591bce9d19e117c3107072b121d3ac529df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5752c591bce9d19e117c3107072b121d3ac529df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5752c591bce9d19e117c3107072b121d3ac529df", "patch": "@@ -1,3 +1,9 @@\n+2012-01-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR libitm/51830\n+\t* builtin-types.def (BT_FN_UINT_UINT_VAR): New.\n+\t* gtm-builtins.def (BUILT_IN_TM_START): Declare as BT_FN_UINT_UINT_VAR.\n+\n 2012-01-23  Aldy Hernandez  <aldyh@redhat.com>\n \t    Patrick Marlier  <patrick.marlier@gmail.com>\n \t    Iain Sandoe  <developer@sandoe-acoustics.co.uk>\n@@ -22,8 +28,7 @@\n 2012-01-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/51949\n-\t* ipa-split.c (execute_split_functions): Do not split malloc\n-\tfunctions.\n+\t* ipa-split.c (execute_split_functions): Do not split malloc functions.\n \n 2012-01-23  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -34,18 +39,15 @@\n \t(make_defs_and_copies_lists): Remove defs_list and copies_list\n \targuments, add state argument, just truncate state->work_list\n \tinstead of always allocating and freeing the vector.  Assert that\n-\tget_defs succeeds instead of returning 2.  Changed return type to\n-\tbool.\n+\tget_defs succeeds instead of returning 2.  Changed return type to bool.\n \t(merge_def_and_ext): Add state argument.  If SET_DEST doesn't\n \thave ext_src_mode, see if it has been modified already with the\n \tright kind of extension and has been extended before from the\n \text_src_mode.  If SET_DEST is already wider or equal to cand->mode,\n-\tjust return true.  Remember the original mode in state->modified\n-\tarray.\n+\tjust return true.  Remember the original mode in state->modified array.\n \t(combine_reaching_defs): Add state argument.  Don't allocate and\n \tfree here def_list, copied_list and vec vectors, instead just\n-\tVEC_truncate the vectors in *state.  Don't handle outcome == 2\n-\there.\n+\tVEC_truncate the vectors in *state.  Don't handle outcome == 2 here.\n \t(find_and_remove_re): Set DF_DEFER_INSN_RESCAN df flag.\n \tAdd state variable, clear vectors in it, initialize state.modified\n \tif needed.  Free all the vectors at the end and state.modified too.\n@@ -133,8 +135,8 @@\n \t* config/arm/arm.c (arm_count_output_move_double_insns): Call\n \toutput_move_double on a copy of operands array.\n \n-2012-01-20   Cary Coutant  <ccoutant@google.com>\n-\t     Dodji Seketeli  <dodji@redhat.com>\n+2012-01-20  Cary Coutant  <ccoutant@google.com>\n+\t    Dodji Seketeli  <dodji@redhat.com>\n \n \tPR debug/45682\n \t* dwarf2out.c (copy_declaration_context): Return ref to parent\n@@ -200,13 +202,12 @@\n 2012-01-19  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/40761\n-\t* ira-int.h (struct ira_loop_tree_node): Add comment for member\n-\tloop.  Add new member loop_num.\n+\t* ira-int.h (struct ira_loop_tree_node): Add comment for member loop.\n+\tAdd new member loop_num.\n \t(IRA_LOOP_NODE_BY_INDEX): Modify the check.\n \t(ira_build): Remove the parameter.\n \n-\t* ira.c (ira_print_disposition): Use loop_num instead of\n-\tloop->num.\n+\t* ira.c (ira_print_disposition): Use loop_num instead of loop->num.\n \t(ira.c): Do not build CFG loops for one region allocation.  Remove\n \targument from ira_build call.\n \n@@ -223,16 +224,15 @@\n \tan assertion.\n \t(ira_print_expanded_allocno, loop_compare_func): Use loop_num\n \tinstead of loop->num.\n-\t(mark_loops_for_removal): Ditto.  Use loop_num instead of\n-\tloop->num.\n+\t(mark_loops_for_removal): Ditto.  Use loop_num instead of loop->num.\n \t(mark_all_loops_for_removal): Ditto.\n \t(remove_unnecessary_regions): Separate the case when CFG loops\n \tare not built.\n \t(ira_build): Remove the parameter.  Use explicit number of regions\n \twhen CFG loops are not built.\n \n-\t* ira-color.c (print_loop_title): Separate the case for the root\n-\tnode.  Use loop_num instead of loop->num.\n+\t* ira-color.c (print_loop_title): Separate the case for the root node.\n+\tUse loop_num instead of loop->num.\n \t(move_spill_restore): Use loop_num instead of loop->num.\n \n \t* ira-emit.c (setup_entered_from_non_parent_p): Add an assertion.\n@@ -241,8 +241,7 @@\n \n \t* ira-lives.c (process_bb_node_lives): Ditto.\n \n-\t* ira-costs.c (print_allocno_costs, find_costs_and_classes):\n-\tDitto.\n+\t* ira-costs.c (print_allocno_costs, find_costs_and_classes): Ditto.\n \n \t* ira-conflicts.c (print_allocno_conflicts): Ditto.\n \n@@ -278,8 +277,7 @@\n \twith #ifdef HAVE_INITFINI_ARRAY.\n \t* configure.ac: Move gcc_AC_INITFINI_ARRAY much later into the file.\n \tAdd initfini-array.h to tm_file here.\n-\t* acinclude.m4 (gcc_AC_INITFINI_ARRAY): For non-ia64 do a linker\n-\ttest.\n+\t* acinclude.m4 (gcc_AC_INITFINI_ARRAY): For non-ia64 do a linker test.\n \t* config.gcc: Don't add initfini-array.h to tm_file here.\n \t* configure: Regenerated.\n \n@@ -288,7 +286,7 @@\n \tPR rtl-optimization/51505\n \t* df-problems.c (df_kill_notes): New parameter live. Update comment.\n \tRemove REG_EQUAL/REG_EQUIV notes referring to dead registers.\n-\t(df_note_bb_compute): Update the call to df_kill_notes. \n+\t(df_note_bb_compute): Update the call to df_kill_notes.\n \n 2012-01-18  Aldy Hernandez  <aldyh@redhat.com>\n \n@@ -408,9 +406,8 @@\n \t(mips_classify_symbol): Remove SYMBOL_FORCE_TO_MEM handling.\n \t(mips_symbolic_constant_p): Likewise.  Remove SYMBOL_32_HIGH too.\n \t(mips_symbol_insns_1): Likewise.  Check mips_use_pcrel_pool_p.\n-\t(mips_cannot_force_const_mem): Use mips_use_pcrel_pool_p instead\n-\tof SYMBOL_FORCE_TO_MEM.  Only check mips_tls_symbol_ref_1\n-\tif it's false.\n+\t(mips_cannot_force_const_mem): Use mips_use_pcrel_pool_p instead of\n+\tSYMBOL_FORCE_TO_MEM.  Only check mips_tls_symbol_ref_1 if it's false.\n \t(mips_get_tp): Add MIPS16 support.\n \t(mips_legitimize_tls_address): Remove MIPS16 sorry().\n \tGeneralize DTPREL and TPREL handling.\n@@ -423,8 +420,7 @@\n \t(force_to_mem_operand): Use mips_use_pcrel_pool_p.\n \t* config/mips/mips.md (UNSPEC_UNSHIFTED_HIGH): New unspec.\n \t(PIC_FUNCTION_ADDR_REGNUM): Moved from mips.h.\n-\t(*unshifted_high): New instruction.  Use it for MIPS16\n-\thigh splitter.\n+\t(*unshifted_high): New instruction.  Use it for MIPS16 high splitter.\n \t(consttable_tls_reloc, tls_get_tp_mips16_<mode>): New patterns.\n \t(*tls_get_tp_mips16_call_<mode>): Likewise.\n "}, {"sha": "3a05b3ba73f95c1553739bb8b4f58e8322964f5b", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5752c591bce9d19e117c3107072b121d3ac529df/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5752c591bce9d19e117c3107072b121d3ac529df/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=5752c591bce9d19e117c3107072b121d3ac529df", "patch": "@@ -498,6 +498,8 @@ DEF_FUNCTION_TYPE_VAR_1 (BT_FN_VOID_CONST_PTR_VAR,\n \t\t\t BT_VOID, BT_CONST_PTR)\n DEF_FUNCTION_TYPE_VAR_1 (BT_FN_INT_CONST_STRING_VAR,\n \t\t\t BT_INT, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_VAR_1 (BT_FN_UINT_UINT_VAR,\n+\t\t\t BT_UINT, BT_UINT)\n \n DEF_FUNCTION_TYPE_VAR_2 (BT_FN_INT_FILEPTR_CONST_STRING_VAR,\n \t\t\t BT_INT, BT_FILEPTR, BT_CONST_STRING)"}, {"sha": "77b320c99e44b2529d16b2ac72ed8b7de5f6eaf7", "filename": "gcc/gtm-builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5752c591bce9d19e117c3107072b121d3ac529df/gcc%2Fgtm-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5752c591bce9d19e117c3107072b121d3ac529df/gcc%2Fgtm-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgtm-builtins.def?ref=5752c591bce9d19e117c3107072b121d3ac529df", "patch": "@@ -1,5 +1,5 @@\n DEF_TM_BUILTIN (BUILT_IN_TM_START, \"_ITM_beginTransaction\",\n-\t\tBT_FN_UINT_UINT, ATTR_TM_NOTHROW_RT_LIST)\n+\t\tBT_FN_UINT_UINT_VAR, ATTR_TM_NOTHROW_RT_LIST)\n \n DEF_TM_BUILTIN (BUILT_IN_TM_COMMIT, \"_ITM_commitTransaction\",\n \t\tBT_FN_VOID, ATTR_TM_NOTHROW_LIST)"}, {"sha": "bf29f4efc3f445ab27206e15471aa64b100972bf", "filename": "libitm/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5752c591bce9d19e117c3107072b121d3ac529df/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5752c591bce9d19e117c3107072b121d3ac529df/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=5752c591bce9d19e117c3107072b121d3ac529df", "patch": "@@ -1,3 +1,9 @@\n+2012-01-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR libitm/51830\n+\t* config/x86/sjlj.S (_ITM_beginTransaction) [!__x86_64__]: Load\n+\tthe first function argument to %eax.\n+\n 2012-01-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* libitm.h (_ITM_getThreadnum): Remove."}, {"sha": "c30c216f229d823c5415ac451696e3759bc51337", "filename": "libitm/config/x86/sjlj.S", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5752c591bce9d19e117c3107072b121d3ac529df/libitm%2Fconfig%2Fx86%2Fsjlj.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5752c591bce9d19e117c3107072b121d3ac529df/libitm%2Fconfig%2Fx86%2Fsjlj.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Fx86%2Fsjlj.S?ref=5752c591bce9d19e117c3107072b121d3ac529df", "patch": "@@ -79,6 +79,7 @@ SYM(_ITM_beginTransaction):\n \tret\n #else\n \tleal\t4(%esp), %ecx\n+\tmovl\t4(%esp), %eax\n \tsubl\t$28, %esp\n \tcfi_def_cfa_offset(32)\n \tmovl\t%ecx, 8(%esp)"}]}