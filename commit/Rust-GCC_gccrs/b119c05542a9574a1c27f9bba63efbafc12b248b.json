{"sha": "b119c05542a9574a1c27f9bba63efbafc12b248b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjExOWMwNTU0MmE5NTc0YTFjMjdmOWJiYTYzZWZiYWZjMTJiMjQ4Yg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-05-03T12:37:22Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-05-03T12:37:22Z"}, "message": "Come up with is_empty for hash_{table,map,set}.\n\n2019-05-03  Martin Liska  <mliska@suse.cz>\n\n\t* hash-map.h: Add is_empty function.\n\t* hash-set.h: Likewise.\n\t* hash-table.h: Likewise.\n\t* dwarf2out.c (dwarf2out_finish): Use is_empty instead of\n\telements () == 0 (and similar usages).\n\t* gimple-ssa-store-merging.c (pass_store_merging::terminate_and_process_all_chains): Likewise.\n\t* gimplify.c (gimplify_bind_expr): Likewise.\n\t(gimplify_switch_expr): Likewise.\n\t* hash-map-tests.c (test_map_of_strings_to_int): Likewise.\n\t* ipa-icf.c (sem_item_optimizer::remove_symtab_node): Likewise.\n\t* postreload-gcse.c (dump_hash_table): Likewise.\n\t(gcse_after_reload_main): Likewise.\n\t* predict.c (combine_predictions_for_bb): Likewise.\n\t* tree-parloops.c (reduction_phi): Likewise.\n\t(separate_decls_in_region): Likewise.\n\t(transform_to_exit_first_loop): Likewise.\n\t(gen_parallel_loop): Likewise.\n\t(gather_scalar_reductions): Likewise.\n\t(try_create_reduction_list): Likewise.\n\t* var-tracking.c (dump_vars): Likewise.\n\t(emit_notes_for_changes): Likewise.\n\t(vt_emit_notes): Likewise.\n2019-05-03  Martin Liska  <mliska@suse.cz>\n\n\t* call.c (build_aggr_conv): Use is_empty instead of\n\telements () == 0 (and similar usages).\n\t* parser.c (cp_parser_lambda_introducer): Likewise.\n\nFrom-SVN: r270851", "tree": {"sha": "c74567ce247b0b3ab51c2b111256694ba980a0b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c74567ce247b0b3ab51c2b111256694ba980a0b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b119c05542a9574a1c27f9bba63efbafc12b248b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b119c05542a9574a1c27f9bba63efbafc12b248b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b119c05542a9574a1c27f9bba63efbafc12b248b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b119c05542a9574a1c27f9bba63efbafc12b248b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3353ebf0d9a20f07597b90943664f10557488ea8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3353ebf0d9a20f07597b90943664f10557488ea8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3353ebf0d9a20f07597b90943664f10557488ea8"}], "stats": {"total": 86, "additions": 63, "deletions": 23}, "files": [{"sha": "ac134c60419c13bc927b84a8367d13eb0e3f7703", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -1,3 +1,28 @@\n+2019-05-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* hash-map.h: Add is_empty function.\n+\t* hash-set.h: Likewise.\n+\t* hash-table.h: Likewise.\n+\t* dwarf2out.c (dwarf2out_finish): Use is_empty instead of\n+\telements () == 0 (and similar usages).\n+\t* gimple-ssa-store-merging.c (pass_store_merging::terminate_and_process_all_chains): Likewise.\n+\t* gimplify.c (gimplify_bind_expr): Likewise.\n+\t(gimplify_switch_expr): Likewise.\n+\t* hash-map-tests.c (test_map_of_strings_to_int): Likewise.\n+\t* ipa-icf.c (sem_item_optimizer::remove_symtab_node): Likewise.\n+\t* postreload-gcse.c (dump_hash_table): Likewise.\n+\t(gcse_after_reload_main): Likewise.\n+\t* predict.c (combine_predictions_for_bb): Likewise.\n+\t* tree-parloops.c (reduction_phi): Likewise.\n+\t(separate_decls_in_region): Likewise.\n+\t(transform_to_exit_first_loop): Likewise.\n+\t(gen_parallel_loop): Likewise.\n+\t(gather_scalar_reductions): Likewise.\n+\t(try_create_reduction_list): Likewise.\n+\t* var-tracking.c (dump_vars): Likewise.\n+\t(emit_notes_for_changes): Likewise.\n+\t(vt_emit_notes): Likewise.\n+\n 2019-05-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90316"}, {"sha": "d9b7d2bb36ddfbf9d87bbcdc98ef8b912bbf3c57", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -1,3 +1,9 @@\n+2019-05-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* call.c (build_aggr_conv): Use is_empty instead of\n+\telements () == 0 (and similar usages).\n+\t* parser.c (cp_parser_lambda_introducer): Likewise.\n+\n 2019-05-02  Nathan Sidwell  <nathan@acm.org>\n \n \t* semantics.c (finish_id_expression_1): Remove unreachable code."}, {"sha": "1a79017eff460f36d9c5884d79e0ca7c2e844f45", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -986,7 +986,7 @@ build_aggr_conv (tree type, tree ctor, int flags, tsubst_flags_t complain)\n       tree val;\n       bool ok;\n \n-      if (pset.elements () && field_in_pset (pset, field))\n+      if (!pset.is_empty () && field_in_pset (pset, field))\n \tcontinue;\n       if (i < CONSTRUCTOR_NELTS (ctor))\n \t{"}, {"sha": "332f4bfcebd79e37a87a508cef728271324c799b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -10769,7 +10769,7 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t Optimize for the zero or one explicit captures cases and only create\n \t the hash_set after adding second capture.  */\n       bool found = false;\n-      if (ids.elements ())\n+      if (!ids.is_empty ())\n \tfound = ids.add (capture_id);\n       else if (first_capture_id == NULL_TREE)\n \tfirst_capture_id = capture_id;"}, {"sha": "366c904491adebc78e40674af75e93565b39b487", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -31321,7 +31321,7 @@ dwarf2out_finish (const char *filename)\n   flush_limbo_die_list ();\n \n   if (inline_entry_data_table)\n-    gcc_assert (inline_entry_data_table->elements () == 0);\n+    gcc_assert (inline_entry_data_table->is_empty ());\n \n   if (flag_checking)\n     {"}, {"sha": "81e6269cc8a386419e3c18aeac82d947371fc0f0", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -2150,7 +2150,7 @@ pass_store_merging::terminate_and_process_all_chains ()\n   bool ret = false;\n   while (m_stores_head)\n     ret |= terminate_and_release_chain (m_stores_head);\n-  gcc_assert (m_stores.elements () == 0);\n+  gcc_assert (m_stores.is_empty ());\n   gcc_assert (m_stores_head == NULL);\n \n   return ret;"}, {"sha": "b6c60855351cf3c0f21311d0d4765238c0a4bb79", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -1423,7 +1423,7 @@ gimplify_bind_expr (tree *expr_p, gimple_seq *pre_p)\n \n \t\t  oacc_declare_returns->remove (t);\n \n-\t\t  if (oacc_declare_returns->elements () == 0)\n+\t\t  if (oacc_declare_returns->is_empty ())\n \t\t    {\n \t\t      delete oacc_declare_returns;\n \t\t      oacc_declare_returns = NULL;\n@@ -2418,7 +2418,7 @@ gimplify_switch_expr (tree *expr_p, gimple_seq *pre_p)\n \n       if (gimplify_ctxp->live_switch_vars)\n \t{\n-\t  gcc_assert (gimplify_ctxp->live_switch_vars->elements () == 0);\n+\t  gcc_assert (gimplify_ctxp->live_switch_vars->is_empty ());\n \t  delete gimplify_ctxp->live_switch_vars;\n \t}\n       gimplify_ctxp->live_switch_vars = saved_live_switch_vars;"}, {"sha": "b79c7821684497994836fc793a8e310b5bcc47e4", "filename": "gcc/hash-map-tests.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fhash-map-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fhash-map-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map-tests.c?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -53,7 +53,7 @@ test_map_of_strings_to_int ()\n   const char *eric = \"half a bee\";\n \n   /* A fresh hash_map should be empty.  */\n-  ASSERT_EQ (0, m.elements ());\n+  ASSERT_TRUE (m.is_empty ());\n   ASSERT_EQ (NULL, m.get (ostrich));\n \n   /* Populate the hash_map.  */"}, {"sha": "a3ef283a1f9b37f13b28e06a3dc6dd45240e0180", "filename": "gcc/hash-map.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fhash-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fhash-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-map.h?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -211,6 +211,9 @@ class GTY((user)) hash_map\n \n   void empty () { m_table.empty(); }\n \n+  /* Return true when there are no elements in this hash map.  */\n+  bool is_empty () const { return m_table.is_empty (); }\n+\n   class iterator\n   {\n   public:"}, {"sha": "de3532f5f6806cf4fab1a11564724c42d789a056", "filename": "gcc/hash-set.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fhash-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fhash-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-set.h?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -88,6 +88,9 @@ class hash_set\n \n   void empty () { m_table.empty (); }\n \n+  /* Return true when there are no elements in this hash set.  */\n+  bool is_empty () const { return m_table.is_empty (); }\n+\n   class iterator\n   {\n   public:"}, {"sha": "4178616478e2055da39367b45ba42c62fed316f9", "filename": "gcc/hash-table.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -402,6 +402,9 @@ class hash_table\n   /* This function clears all entries in this hash table.  */\n   void empty () { if (elements ()) empty_slow (); }\n \n+  /* Return true when there are no elements in this hash table.  */\n+  bool is_empty () const { return elements () == 0; }\n+\n   /* This function clears a specified SLOT in a hash table.  It is\n      useful when you've already done the lookup and don't want to do it\n      again. */"}, {"sha": "074181491da92ec2783143189a1a6c5f7fb5c0bd", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -2475,7 +2475,7 @@ sem_item_optimizer::varpool_removal_hook (varpool_node *node, void *data)\n void\n sem_item_optimizer::remove_symtab_node (symtab_node *node)\n {\n-  gcc_assert (!m_classes.elements ());\n+  gcc_assert (m_classes.is_empty ());\n \n   m_removed_items_set.add (node);\n }"}, {"sha": "e47376708837b9d83f20723030381c5cede2ba4f", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -504,7 +504,7 @@ dump_hash_table (FILE *file)\n            (long) expr_table->size (),\n            (long) expr_table->elements (),\n            expr_table->collisions ());\n-  if (expr_table->elements () > 0)\n+  if (!expr_table->is_empty ())\n     {\n       fprintf (file, \"\\n\\ntable entries:\\n\");\n       expr_table->traverse <FILE *, dump_expr_hash_table_entry> (file);\n@@ -1386,7 +1386,7 @@ gcse_after_reload_main (rtx f ATTRIBUTE_UNUSED)\n   if (dump_file)\n     dump_hash_table (dump_file);\n \n-  if (expr_table->elements () > 0)\n+  if (!expr_table->is_empty ())\n     {\n       /* Knowing which MEMs are transparent through a block can signifiantly\n \t increase the number of redundant loads found.  So compute transparency"}, {"sha": "b010c20ff7d362cde0ca6a0036384a55d404bbf1", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -1252,7 +1252,7 @@ combine_predictions_for_bb (basic_block bb, bool dry_run)\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"Predictions for bb %i\\n\", bb->index);\n-\t  if (unlikely_edges.elements () == 0)\n+\t  if (unlikely_edges.is_empty ())\n \t    fprintf (dump_file,\n \t\t     \"%i edges in bb %i predicted to even probabilities\\n\",\n \t\t     nedges, bb->index);"}, {"sha": "968368f7f441bb5f39197c425545acf3c40dca01", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -238,7 +238,7 @@ reduction_phi (reduction_info_table_type *reduction_list, gimple *phi)\n {\n   struct reduction_info tmpred, *red;\n \n-  if (reduction_list->elements () == 0 || phi == NULL)\n+  if (reduction_list->is_empty () || phi == NULL)\n     return NULL;\n \n   if (gimple_uid (phi) == (unsigned int)-1\n@@ -1390,7 +1390,7 @@ separate_decls_in_region (edge entry, edge exit,\n \t    }\n \t}\n \n-  if (name_copies.elements () == 0 && reduction_list->elements () == 0)\n+  if (name_copies.is_empty () && reduction_list->is_empty ())\n     {\n       /* It may happen that there is nothing to copy (if there are only\n          loop carried and external variables in the loop).  */\n@@ -1407,7 +1407,7 @@ separate_decls_in_region (edge entry, edge exit,\n       TYPE_NAME (type) = type_name;\n \n       name_copies.traverse <tree, add_field_for_name> (type);\n-      if (reduction_list && reduction_list->elements () > 0)\n+      if (reduction_list && !reduction_list->is_empty ())\n \t{\n \t  /* Create the fields for reductions.  */\n \t  reduction_list->traverse <tree, add_field_for_reduction> (type);\n@@ -1430,7 +1430,7 @@ separate_decls_in_region (edge entry, edge exit,\n \n       /* Load the calculation from memory (after the join of the threads).  */\n \n-      if (reduction_list && reduction_list->elements () > 0)\n+      if (reduction_list && !reduction_list->is_empty ())\n \t{\n \t  reduction_list\n \t    ->traverse <struct clsn_data *, create_stores_for_reduction>\n@@ -1991,7 +1991,7 @@ transform_to_exit_first_loop (struct loop *loop,\n          PHI_RESULT of this phi is the resulting value of the reduction\n          variable when exiting the loop.  */\n \n-      if (reduction_list->elements () > 0)\n+      if (!reduction_list->is_empty ())\n \t{\n \t  struct reduction_info *red;\n \n@@ -2440,7 +2440,7 @@ gen_parallel_loop (struct loop *loop,\n     }\n \n   /* Generate initializations for reductions.  */\n-  if (reduction_list->elements () > 0)\n+  if (!reduction_list->is_empty ())\n     reduction_list->traverse <struct loop *, initialize_reductions> (loop);\n \n   /* Eliminate the references to local variables from the loop.  */\n@@ -2476,7 +2476,7 @@ gen_parallel_loop (struct loop *loop,\n     loc = gimple_location (cond_stmt);\n   create_parallel_loop (loop, create_loop_fn (loc), arg_struct, new_arg_struct,\n \t\t\tn_threads, loc, oacc_kernels_p);\n-  if (reduction_list->elements () > 0)\n+  if (!reduction_list->is_empty ())\n     create_call_for_reduction (loop, reduction_list, &clsn_data);\n \n   scev_reset ();\n@@ -2679,7 +2679,7 @@ gather_scalar_reductions (loop_p loop, reduction_info_table_type *reduction_list\n     }\n \n  gather_done:\n-  if (reduction_list->elements () == 0)\n+  if (reduction_list->is_empty ())\n     return;\n \n   /* As gimple_uid is used by the vectorizer in between vect_analyze_loop_form\n@@ -2806,7 +2806,7 @@ try_create_reduction_list (loop_p loop,\n \t      fprintf (dump_file,\n \t\t       \"  checking if it is part of reduction pattern:\\n\");\n \t    }\n-\t  if (reduction_list->elements () == 0)\n+\t  if (reduction_list->is_empty ())\n \t    {\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\tfprintf (dump_file,"}, {"sha": "c9de93473d16ebd0ac081e01a575f02def51fd37", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b119c05542a9574a1c27f9bba63efbafc12b248b/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=b119c05542a9574a1c27f9bba63efbafc12b248b", "patch": "@@ -7332,7 +7332,7 @@ dump_var (variable *var)\n static void\n dump_vars (variable_table_type *vars)\n {\n-  if (vars->elements () > 0)\n+  if (!vars->is_empty ())\n     {\n       fprintf (dump_file, \"Variables:\\n\");\n       vars->traverse <void *, dump_var_tracking_slot> (NULL);\n@@ -9060,7 +9060,7 @@ emit_notes_for_changes (rtx_insn *insn, enum emit_note_where where,\n   emit_note_data data;\n   variable_table_type *htab = shared_hash_htab (vars);\n \n-  if (!changed_variables->elements ())\n+  if (changed_variables->is_empty ())\n     return;\n \n   if (MAY_HAVE_DEBUG_BIND_INSNS)\n@@ -9538,7 +9538,7 @@ vt_emit_notes (void)\n   basic_block bb;\n   dataflow_set cur;\n \n-  gcc_assert (!changed_variables->elements ());\n+  gcc_assert (changed_variables->is_empty ());\n \n   /* Free memory occupied by the out hash tables, as they aren't used\n      anymore.  */"}]}