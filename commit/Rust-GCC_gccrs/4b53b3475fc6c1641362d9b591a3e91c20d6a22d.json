{"sha": "4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI1M2IzNDc1ZmM2YzE2NDEzNjJkOWI1OTFhM2U5MWMyMGQ2YTIyZA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-11-01T20:12:57Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-11-01T20:12:57Z"}, "message": "re PR fortran/54613 ([F08] Add FINDLOC plus support MAXLOC/MINLOC with KIND=/BACK=)\n\n2017-11-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n    PR fortran/54613\n    * gfortran.dg/findloc_1.f90: Actually commit.\n    * gfortran.dg/findloc_2.f90: Actually commit.\n    * gfortran.dg/findloc_3.f90: Actually commit.\n    * gfortran.dg/findloc_4.f90: Actually commit.\n    * gfortran.dg/findloc_5.f90: Actually commit.\n    * gfortran.dg/findloc_6.f90: Actually commit.\n\nFrom-SVN: r265732", "tree": {"sha": "0999f2927f17508b7957b5b5b32c61e62c10c962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0999f2927f17508b7957b5b5b32c61e62c10c962"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/comments", "author": null, "committer": null, "parents": [{"sha": "437725af7af4c28bbc7f595d6c2c26482fa2bcf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437725af7af4c28bbc7f595d6c2c26482fa2bcf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437725af7af4c28bbc7f595d6c2c26482fa2bcf6"}], "stats": {"total": 265, "additions": 265, "deletions": 0}, "files": [{"sha": "f206f8b3878475b68320c21aaaab718189defbf6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "patch": "@@ -1,3 +1,13 @@\n+2017-11-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/54613\n+\t* gfortran.dg/findloc_1.f90: Actually commit.\n+\t* gfortran.dg/findloc_2.f90: Actually commit.\n+\t* gfortran.dg/findloc_3.f90: Actually commit.\n+\t* gfortran.dg/findloc_4.f90: Actually commit.\n+\t* gfortran.dg/findloc_5.f90: Actually commit.\n+\t* gfortran.dg/findloc_6.f90: Actually commit.\n+\n 2018-11-01  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/40196"}, {"sha": "220b8ad71bf39fc2457724befd2d80a5cd3657d6", "filename": "gcc/testsuite/gfortran.dg/findloc_1.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_1.f90?ref=4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! Test errors in findloc.\n+program main\n+  integer, dimension(4) :: a\n+  logical, dimension(3) :: msk\n+  a = [2,4,6,8]\n+  print *,findloc(a) ! { dg-error \"Missing actual argument\" }\n+  print *,findloc(a,value=.true.) ! { dg-error \"must be in type conformance to argument\" }\n+  print *,findloc(a,23,dim=6) ! { dg-error \"is not a valid dimension index\" }\n+  print *,findloc(a,-42,dim=2.0) ! { dg-error \"must be INTEGER\" }\n+  print *,findloc(a,6,msk) ! { dg-error \"Different shape for arguments 'array' and 'mask'\" }\n+  print *,findloc(a,6,kind=98) ! { dg-error \"Invalid kind for INTEGER\" }\n+end program main"}, {"sha": "7ebc63abb868ce246154d6b7a7e91d16cb2e1a7a", "filename": "gcc/testsuite/gfortran.dg/findloc_2.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_2.f90?ref=4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+! Various tests with findloc.\n+program main\n+  implicit none\n+  real, dimension(2,2) :: a, b\n+  integer, dimension(2,3) :: c\n+  logical, dimension(2,2) :: lo\n+  integer, dimension(:), allocatable :: e\n+  a = reshape([1.,2.,3.,4.], shape(a))\n+  b = reshape([1.,2.,1.,2.], shape(b))\n+\n+  lo = .true.\n+\n+  if (any(findloc(a, 5.) /= [0,0])) stop 1\n+  if (any(findloc(a, 5., back=.true.) /= [0,0])) stop 2\n+  if (any(findloc(a, 2.) /= [2,1])) stop 2\n+  if (any(findloc(a, 2. ,back=.true.) /= [2,1])) stop 3\n+\n+  if (any(findloc(a,3.,mask=lo) /= [1,2])) stop 4\n+  if (any(findloc(a,3,mask=.true.) /= [1,2])) stop 5\n+  lo(1,2) = .false.\n+  if (any(findloc(a,3.,mask=lo) /= [0,0])) stop 6\n+  if (any(findloc(b,2.) /= [2,1])) stop 7\n+  if (any(findloc(b,2.,back=.true.) /= [2,2])) stop 8\n+  if (any(findloc(b,1.,mask=lo,back=.true.) /= [1,1])) stop 9\n+  if (any(findloc(b,1.,mask=.false.) /= [0,0])) stop 10\n+\n+  c = reshape([1,2,2,2,-9,6], shape(c))\n+  if (any(findloc(c,value=2,dim=1) /= [2,1,0])) stop 11\n+  if (any(findloc(c,value=2,dim=2) /= [2,1])) stop 12\n+end program main"}, {"sha": "f83c122946eb134001ab6094a6b9c1f155f8f5ee", "filename": "gcc/testsuite/gfortran.dg/findloc_3.f90", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_3.f90?ref=4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "patch": "@@ -0,0 +1,77 @@\n+! { dg-do run }\n+! Various tests with findloc with character variables.\n+program main\n+  character(len=2) :: a(3,3), c(3,3), d(3,4)\n+  character(len=3) :: b(3,3)\n+  integer :: ret(2)\n+  integer :: i,j\n+  character(len=3) :: s\n+  logical :: lo\n+  logical, dimension(3,4) :: msk\n+  data a /\"11\", \"21\", \"31\", \"12\", \"22\", \"32\", \"13\", \"23\", \"33\" /\n+  data b /\"11 \", \"21 \", \"31 \", \"12 \", \"22 \", \"32 \", \"13 \", \"23 \", \"33 \" /\n+  if (any(findloc(a,\"11 \") /= [1,1])) stop 1\n+  ret = findloc(b,\"31\")\n+  do j=1,3\n+     do i=1,3\n+        write(unit=s,fmt='(2I1,\" \")') i,j\n+        ret = findloc(b,s)\n+        if (b(ret(1),ret(2)) /= s) stop 2\n+     end do\n+  end do\n+\n+  if (any(findloc(b(::2,::2),\"13\") /= [1,2])) stop 3\n+\n+  do j=1,3\n+    do i=1,3\n+      write(unit=c(i,j),fmt='(I2)') 2+i-j\n+    end do\n+  end do\n+\n+  if (any(findloc(c,\" 1\") /= [1,2])) stop 4\n+  if (any(findloc(c,\" 1\", back=.true.) /= [2,3])) stop 5\n+  if (any(findloc(c,\" 1\", back=.true., mask=.false.) /= [0,0])) stop 6\n+\n+  lo = .true.\n+  if (any(findloc(c,\" 2\", dim=1) /= [1,2,3])) stop 7\n+  if (any(findloc(c,\" 2\",dim=1,mask=lo) /= [1,2,3])) stop 8\n+\n+  if (any(findloc(c,\" 2\", dim=1,back=.true.) /= [1,2,3])) stop 9\n+  if (any(findloc(c,\" 2\",dim=1,mask=lo,back=.true.) /= [1,2,3])) stop 10\n+  do j=1,4\n+     do i=1,3\n+        if (j<= i) then\n+           d(i,j) = \"AA\"\n+        else\n+           d(i,j) = \"BB\"\n+        end if\n+     end do\n+  end do\n+  print '(4A3)', transpose(d)\n+  if (any(findloc(d,\"AA\") /= [1,1])) stop 11\n+  if (any(findloc(d,\"BB\") /= [1,2])) stop 12\n+  msk = .true.\n+  if (any(findloc(d,\"AA\", mask=msk) /= [1,1])) stop 11\n+  if (any(findloc(d,\"BB\", mask=msk) /= [1,2])) stop 12\n+  if (any(findloc(d,\"AA\", dim=1) /= [1,2,3,0])) stop 13\n+  if (any(findloc(d,\"BB\", dim=1) /= [0,1,1,1])) stop 14\n+  if (any(findloc(d,\"AA\", dim=2) /= [1,1,1])) stop 15\n+  if (any(findloc(d,\"BB\", dim=2) /= [2,3,4])) stop 16\n+  if (any(findloc(d,\"AA\", dim=1,mask=msk) /= [1,2,3,0])) stop 17\n+  if (any(findloc(d,\"BB\", dim=1,mask=msk) /= [0,1,1,1])) stop 18\n+  if (any(findloc(d,\"AA\", dim=2,mask=msk) /= [1,1,1])) stop 19\n+  if (any(findloc(d,\"BB\", dim=2,mask=msk) /= [2,3,4])) stop 20\n+\n+  if (any(findloc(d,\"AA\", dim=1, back=.true.) /= [3,3,3,0])) stop 21\n+  if (any(findloc(d,\"AA\", dim=1, back=.true., mask=msk) /= [3,3,3,0])) stop 22\n+  if (any(findloc(d,\"BB\", dim=2, back=.true.) /= [4,4,4])) stop 23\n+  if (any(findloc(d,\"BB\", dim=2, back=.true.,mask=msk) /= [4,4,4])) stop 24\n+\n+  msk(1,:) = .false.\n+  print '(4L3)', transpose(msk)\n+  if (any(findloc(d,\"AA\", dim=1,mask=msk) /= [2,2,3,0])) stop 21\n+  if (any(findloc(d,\"BB\", dim=2,mask=msk) /= [0,3,4])) stop 22\n+  if (any(findloc(d,\"AA\", dim=2, mask=msk, back=.true.) /= [0,2,3])) stop 23\n+  if (any(findloc(d,\"AA\", dim=1, mask=msk, back=.true.) /= [3,3,3,0])) stop 24\n+\n+end program main"}, {"sha": "f31977b753c665d8cfb3b54b4bd1ba822b231217", "filename": "gcc/testsuite/gfortran.dg/findloc_4.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_4.f90?ref=4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! Test findloc with dim argument.\n+\n+program main\n+  implicit none\n+  real, dimension(2,2) :: a, b\n+  logical, dimension(2,2) :: lo\n+  a = reshape([1.,2.,3.,4.], shape(a))\n+  b = reshape([1.,1.,1.,1.], shape(b))\n+\n+  lo = .true.\n+\n+  if (any(findloc(b,value=1.,dim=1) /= [1,1])) stop 1\n+  if (any(findloc(b,value=1.,dim=2) /= [1,1])) stop 2\n+  if (any(findloc(b,value=1.,dim=1,back=.true.) /= [2,2])) stop 3\n+  if (any(findloc(b,value=1.,dim=2,back=.true.) /= [2,2])) stop 4\n+  if (any(findloc(b,value=1.,dim=1,mask=lo) /= [1,1])) stop 5\n+  \n+  if (any(findloc(b,value=1.,dim=1,mask=lo,back=.true.) /= [2,2])) stop 6\n+  if (any(findloc(b,value=1.,dim=1,mask=.not. lo) /= [0,0])) stop 7\n+  lo(1,1) = .false.\n+  if (any(findloc(b,value=1.,dim=1,mask=lo) /= [2,1])) stop 8\n+  if (any(findloc(a,value=1.5,dim=2,back=.true.) /= [0,0])) stop 9\n+  if (any(findloc(a,value=1,dim=1,mask=lo) /= [0,0])) stop 10\n+end program main"}, {"sha": "cf4bd3e21257e78b6ec6f5175530c60dafe6d842", "filename": "gcc/testsuite/gfortran.dg/findloc_5.f90", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_5.f90?ref=4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "patch": "@@ -0,0 +1,47 @@\n+! { dg-do  run }\n+! Check compile-time simplification of FINDLOC\n+program main\n+  integer,  dimension(4),  parameter :: a1 = [1,  2,  3,  1]\n+  integer,  parameter :: i1 = findloc(a1, 1, dim=1)\n+  integer,  parameter :: i2 = findloc(a1, 2, dim=1)\n+  integer,  parameter :: i3 = findloc(a1, 3, dim=1)\n+  integer,  parameter :: i4 = findloc(a1, 1, dim=1, back=.true.)\n+  integer,  parameter :: i0 = findloc(a1, -1, dim=1)\n+  logical,  dimension(4),  parameter :: msk = [.false., .true., .true., .true.]\n+  integer,  parameter :: i4a = findloc(a1, 1, dim=1, mask=msk)\n+  integer,  parameter :: i4b = findloc(a1, 1, dim=1, mask=msk, back=.true.)\n+  real, dimension(2,2), parameter :: a = reshape([1.,2.,3.,4.], [2,2]), &\n+       b =  reshape([1.,2.,1.,2.], [2,2])\n+  integer, parameter, dimension(2) :: t8 = findloc(a, 5.), t9 = findloc(a, 5., back=.true.)\n+  integer, parameter, dimension(2) :: t10= findloc(a, 2.), t11= findloc(a, 2., back=.true.)\n+  logical, dimension(2,2), parameter :: lo = reshape([.true., .false., .true., .true. ], [2,2])\n+  integer, parameter, dimension(2) :: t12 = findloc(b,2., mask=lo)\n+\n+  integer, dimension(2,3), parameter :: c = reshape([1,2,2,2,-9,6], [2,3])\n+  integer, parameter, dimension(3) :: t13 = findloc(c, value=2, dim=1)\n+  integer, parameter, dimension(2) :: t14 = findloc(c, value=2, dim=2)\n+\n+  character(len=2), dimension(3,3), parameter :: ac = reshape ( &\n+       [\"11\", \"21\", \"31\", \"12\", \"22\", \"32\", \"13\", \"23\", \"33\"], [3,3]);\n+  character(len=3), dimension(3,3), parameter :: bc = reshape (&\n+       [\"11 \", \"21 \", \"31 \", \"12 \", \"22 \", \"32 \", \"13 \", \"23 \", \"33 \"], [3,3]);\n+  integer, parameter, dimension(2) :: t15 = findloc(ac, \"11\")\n+  integer, parameter, dimension(2) :: t16 = findloc(bc, \"31\")\n+\n+  if (i1 /= 1) stop 1\n+  if (i2 /= 2) stop 2\n+  if (i3 /= 3) stop 3\n+  if (i4 /= 4) stop 4\n+  if (i0 /= 0) stop 5\n+  if (i4a /= 4) stop 6\n+  if (i4b /= 4) stop 7\n+  if (any(t8 /= [0,0])) stop 8\n+  if (any(t9 /= [0,0])) stop 9\n+  if (any(t10 /= [2,1])) stop 10\n+  if (any(t11 /= [2,1])) stop 11\n+  if (any(t12 /= [2,2])) stop 12\n+  if (any(t13 /= [2,1,0])) stop 13\n+  if (any(t14 /= [2,1])) stop 14\n+  if (any(t15 /= [1,1])) stop 15\n+  if (any(t16 /= [3,1])) stop 16\n+end program main"}, {"sha": "6fa72d84c65f59ac69188abb0810f35a69326fae", "filename": "gcc/testsuite/gfortran.dg/findloc_6.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_6.f90?ref=4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do run }\n+! Test different code paths for findloc with scalar result.\n+\n+program main\n+  integer, dimension(0:5) :: a = [1,2,3,1,2,3]\n+  logical, dimension(6) :: mask = [.false.,.false.,.false.,.true.,.true.,.true.]\n+  logical, dimension(6) :: mask2\n+  logical :: true, false\n+  character(len=2), dimension(6) :: ch = [\"AA\", \"BB\", \"CC\", \"AA\", \"BB\", \"CC\"]\n+\n+  true = .true.\n+  false = .false.\n+  mask2 = .not. mask\n+\n+! Tests without mask\n+\n+  if (findloc(a,2,dim=1,back=false) /= 2) stop 1\n+  if (findloc(a,2,dim=1,back=.false.) /= 2) stop 2\n+  if (findloc(a,2,dim=1) /= 2) stop 3\n+  if (findloc(a,2,dim=1,back=.true.) /= 5) stop 4\n+  if (findloc(a,2,dim=1,back=true) /= 5) stop 5\n+\n+! Test with array mask\n+  if (findloc(a,2,dim=1,mask=mask) /= 5) stop 6\n+  if (findloc(a,2,dim=1,mask=mask,back=.true.) /= 5) stop 7\n+  if (findloc(a,2,dim=1,mask=mask,back=.false.) /= 5) stop 8\n+  if (findloc(a,2,dim=1,mask=mask2) /= 2) stop 9\n+  if (findloc(a,2,dim=1,mask=mask2,back=.true.) /= 2) stop 10\n+  if (findloc(a,2,dim=1,mask=mask2,back=true) /= 2) stop 11\n+\n+! Test with scalar mask\n+\n+  if (findloc(a,2,dim=1,mask=.true.) /= 2) stop 12\n+  if (findloc(a,2,dim=1,mask=.false.) /= 0) stop 13\n+  if (findloc(a,2,dim=1,mask=true) /= 2) stop 14\n+  if (findloc(a,2,dim=1,mask=false) /= 0) stop 15\n+\n+! Some character tests\n+\n+  if (findloc(ch,\"AA\",dim=1) /= 1) stop 16\n+  if (findloc(ch,\"AA\",dim=1,mask=mask) /= 4) stop 17\n+  if (findloc(ch,\"AA\",dim=1,back=.true.) /= 4) stop 18\n+  if (findloc(ch,\"AA\",dim=1,mask=mask2,back=.true.) /= 1) stop 19\n+\n+! Nothing to be found here...\n+  if (findloc(ch,\"DD\",dim=1) /= 0) stop 20\n+  if (findloc(a,4,dim=1) /= 0) stop 21\n+\n+! Finally, character tests with a scalar mask.\n+\n+  if (findloc(ch,\"CC \",dim=1,mask=true) /= 3) stop 22\n+  if (findloc(ch,\"CC \",dim=1,mask=false) /= 0) stop 23\n+end program main"}, {"sha": "9dd9aa3e8a3ad65b508f9de0757d92c04e4598b5", "filename": "gcc/testsuite/gfortran.dg/findloc_7.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b53b3475fc6c1641362d9b591a3e91c20d6a22d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffindloc_7.f90?ref=4b53b3475fc6c1641362d9b591a3e91c20d6a22d", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! This used to ICE with an infinite recursion during development.\n+! Test case by Dominique d'Humieres.\n+\n+program logtest3 \n+   implicit none \n+   logical :: x = .true. \n+   integer, parameter :: I_FINDLOC_BACK(1) = findloc([1,1],1, back=x) ! { dg-error \"does not reduce to a constant expression\" }\n+end program logtest3"}]}