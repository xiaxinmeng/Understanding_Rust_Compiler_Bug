{"sha": "c019f34e1f55cb2ce32cb79369251413c4ab7f86", "node_id": "C_kwDOANBUbNoAKGMwMTlmMzRlMWY1NWNiMmNlMzJjYjc5MzY5MjUxNDEzYzRhYjdmODY", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-29T23:32:09Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-30T16:46:25Z"}, "message": "RISC-V: Add vluxei32 C++ intrinsic API testcase\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vluxei32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei32_tumu-3.C: New test.", "tree": {"sha": "05be450379c6d5867bd18d8a28432e526e05cf89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05be450379c6d5867bd18d8a28432e526e05cf89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c019f34e1f55cb2ce32cb79369251413c4ab7f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c019f34e1f55cb2ce32cb79369251413c4ab7f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c019f34e1f55cb2ce32cb79369251413c4ab7f86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c019f34e1f55cb2ce32cb79369251413c4ab7f86/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed83c931db151f426d633adc6e61da9ed015d3db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed83c931db151f426d633adc6e61da9ed015d3db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed83c931db151f426d633adc6e61da9ed015d3db"}], "stats": {"total": 5508, "additions": 5508, "deletions": 0}, "files": [{"sha": "8003397befd573053b58e2f95865f9677825fb39", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32-1.C", "status": "added", "additions": 608, "deletions": 0, "changes": 608, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32-1.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,608 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32(const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32(const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32(const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32(const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32(const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32(const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32(const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32(const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32(const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32(const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32(const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32(const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32(const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32(const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32(const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32(const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32(const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32(const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32(const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32(const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32(const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32(const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32(const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32(const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32(const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32(const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32(const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32(const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32(const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32(const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32(const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32(const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32(const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32(const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32(const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32(const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32(const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32(const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32(const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32(const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32(const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32(const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32(const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32(const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32(const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32(const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32(const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vluxei32(vbool64_t mask,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32(vbool32_t mask,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32(vbool16_t mask,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32(vbool8_t mask,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32(vbool4_t mask,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32(vbool64_t mask,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32(vbool32_t mask,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32(vbool16_t mask,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32(vbool8_t mask,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32(vbool4_t mask,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32(vbool64_t mask,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32(vbool32_t mask,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32(vbool16_t mask,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32(vbool8_t mask,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32(vbool4_t mask,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32(vbool64_t mask,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32(vbool32_t mask,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32(vbool16_t mask,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32(vbool8_t mask,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32(vbool64_t mask,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32(vbool32_t mask,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32(vbool16_t mask,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32(vbool8_t mask,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32(vbool4_t mask,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32(vbool64_t mask,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32(vbool32_t mask,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32(vbool16_t mask,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32(vbool8_t mask,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32(vbool4_t mask,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32(vbool64_t mask,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32(vbool32_t mask,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32(vbool16_t mask,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32(vbool8_t mask,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32(vbool4_t mask,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32(vbool64_t mask,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32(vbool32_t mask,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32(vbool16_t mask,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32(vbool8_t mask,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32(vbool64_t mask,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32(vbool32_t mask,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32(vbool16_t mask,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32(vbool8_t mask,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32(vbool4_t mask,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32(vbool64_t mask,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32(vbool32_t mask,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32(vbool16_t mask,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32(vbool8_t mask,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "57380cd0f2d10bbc4d51f6fc230d193cd344d68c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32-2.C", "status": "added", "additions": 608, "deletions": 0, "changes": 608, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32-2.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,608 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32(const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32(const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32(const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32(const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32(const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32(const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32(const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32(const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32(const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32(const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32(const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32(const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32(const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32(const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32(const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32(const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32(const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32(const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32(const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32(const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32(const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32(const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32(const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32(const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32(const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32(const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32(const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32(const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32(const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32(const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32(const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32(const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32(const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32(const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32(const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32(const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32(const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32(const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32(const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32(const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32(const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32(const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32(const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32(const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32(const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32(const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32(const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vluxei32(vbool64_t mask,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32(vbool32_t mask,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32(vbool16_t mask,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32(vbool8_t mask,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32(vbool4_t mask,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32(vbool64_t mask,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32(vbool32_t mask,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32(vbool16_t mask,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32(vbool8_t mask,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32(vbool4_t mask,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32(vbool64_t mask,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32(vbool32_t mask,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32(vbool16_t mask,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32(vbool8_t mask,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32(vbool4_t mask,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32(vbool64_t mask,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32(vbool32_t mask,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32(vbool16_t mask,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32(vbool8_t mask,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32(vbool64_t mask,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32(vbool32_t mask,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32(vbool16_t mask,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32(vbool8_t mask,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32(vbool4_t mask,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32(vbool64_t mask,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32(vbool32_t mask,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32(vbool16_t mask,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32(vbool8_t mask,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32(vbool4_t mask,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32(vbool64_t mask,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32(vbool32_t mask,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32(vbool16_t mask,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32(vbool8_t mask,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32(vbool4_t mask,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32(vbool64_t mask,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32(vbool32_t mask,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32(vbool16_t mask,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32(vbool8_t mask,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32(vbool64_t mask,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32(vbool32_t mask,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32(vbool16_t mask,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32(vbool8_t mask,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32(vbool4_t mask,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32(vbool64_t mask,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32(vbool32_t mask,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32(vbool16_t mask,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32(vbool8_t mask,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "be9a27ee5c1ac6cd888344e6488e875877a733af", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32-3.C", "status": "added", "additions": 608, "deletions": 0, "changes": 608, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32-3.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,608 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32(const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32(const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32(const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32(const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32(const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32(const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32(const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32(const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32(const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32(const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32(const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32(const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32(const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32(const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32(const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32(const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32(const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32(const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32(const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32(const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32(const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32(const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32(const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32(const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32(const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32(const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32(const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32(const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32(const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32(const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32(const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32(const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32(const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32(const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32(const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32(const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32(const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32(const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32(const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32(const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32(const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32(const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32(const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32(const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32(const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32(const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32(const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(base,bindex,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vluxei32(vbool64_t mask,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32(vbool32_t mask,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32(vbool16_t mask,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32(vbool8_t mask,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32(vbool4_t mask,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32(vbool64_t mask,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32(vbool32_t mask,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32(vbool16_t mask,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32(vbool8_t mask,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32(vbool4_t mask,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32(vbool64_t mask,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32(vbool32_t mask,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32(vbool16_t mask,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32(vbool8_t mask,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32(vbool4_t mask,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32(vbool64_t mask,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32(vbool32_t mask,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32(vbool16_t mask,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32(vbool8_t mask,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32(vbool64_t mask,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32(vbool32_t mask,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32(vbool16_t mask,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32(vbool8_t mask,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32(vbool4_t mask,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32(vbool64_t mask,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32(vbool32_t mask,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32(vbool16_t mask,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32(vbool8_t mask,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32(vbool4_t mask,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32(vbool64_t mask,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32(vbool32_t mask,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32(vbool16_t mask,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32(vbool8_t mask,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32(vbool4_t mask,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32(vbool64_t mask,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32(vbool32_t mask,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32(vbool16_t mask,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32(vbool8_t mask,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32(vbool64_t mask,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32(vbool32_t mask,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32(vbool16_t mask,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32(vbool8_t mask,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32(vbool4_t mask,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32(vbool64_t mask,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32(vbool32_t mask,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32(vbool16_t mask,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32(vbool8_t mask,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32(mask,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "b6e3b5d210f6a033ca9456c97bc55835623fe9e4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32_mu-1.C", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_mu-1.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32_mu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32_mu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32_mu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32_mu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32_mu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32_mu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32_mu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "4538c8c4c16e4dc6cb1d366c791a00f480170952", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32_mu-2.C", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_mu-2.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32_mu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32_mu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32_mu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32_mu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32_mu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32_mu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32_mu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "540cf193b2fe584bd8f8f7a5ceb7cf76e7213b82", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32_mu-3.C", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_mu-3.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32_mu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32_mu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32_mu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32_mu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32_mu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32_mu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32_mu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "4d68e87f62c2a28f1e7a9e7dade648a932dfd334", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32_tu-1.C", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tu-1.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32_tu(vint8mf8_t merge,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32_tu(vint8mf4_t merge,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32_tu(vint8mf2_t merge,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32_tu(vint8m1_t merge,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32_tu(vint8m2_t merge,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32_tu(vint16mf4_t merge,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32_tu(vint16mf2_t merge,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32_tu(vint16m1_t merge,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32_tu(vint16m2_t merge,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32_tu(vint16m4_t merge,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32_tu(vint32mf2_t merge,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32_tu(vint32m1_t merge,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32_tu(vint32m2_t merge,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32_tu(vint32m4_t merge,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32_tu(vint32m8_t merge,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32_tu(vint64m1_t merge,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32_tu(vint64m2_t merge,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32_tu(vint64m4_t merge,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32_tu(vint64m8_t merge,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32_tu(vuint8mf8_t merge,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32_tu(vuint8mf4_t merge,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32_tu(vuint8mf2_t merge,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32_tu(vuint8m1_t merge,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32_tu(vuint8m2_t merge,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32_tu(vuint16mf4_t merge,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32_tu(vuint16mf2_t merge,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32_tu(vuint16m1_t merge,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32_tu(vuint16m2_t merge,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32_tu(vuint16m4_t merge,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32_tu(vuint32mf2_t merge,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32_tu(vuint32m1_t merge,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32_tu(vuint32m2_t merge,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32_tu(vuint32m4_t merge,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32_tu(vuint32m8_t merge,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32_tu(vuint64m1_t merge,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32_tu(vuint64m2_t merge,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32_tu(vuint64m4_t merge,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32_tu(vuint64m8_t merge,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32_tu(vfloat32mf2_t merge,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32_tu(vfloat32m1_t merge,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32_tu(vfloat32m2_t merge,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32_tu(vfloat32m4_t merge,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32_tu(vfloat32m8_t merge,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32_tu(vfloat64m1_t merge,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32_tu(vfloat64m2_t merge,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32_tu(vfloat64m4_t merge,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32_tu(vfloat64m8_t merge,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "20e27d419e5ce97518c00a0a407df2e13a2585b0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32_tu-2.C", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tu-2.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32_tu(vint8mf8_t merge,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32_tu(vint8mf4_t merge,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32_tu(vint8mf2_t merge,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32_tu(vint8m1_t merge,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32_tu(vint8m2_t merge,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32_tu(vint16mf4_t merge,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32_tu(vint16mf2_t merge,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32_tu(vint16m1_t merge,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32_tu(vint16m2_t merge,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32_tu(vint16m4_t merge,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32_tu(vint32mf2_t merge,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32_tu(vint32m1_t merge,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32_tu(vint32m2_t merge,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32_tu(vint32m4_t merge,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32_tu(vint32m8_t merge,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32_tu(vint64m1_t merge,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32_tu(vint64m2_t merge,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32_tu(vint64m4_t merge,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32_tu(vint64m8_t merge,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32_tu(vuint8mf8_t merge,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32_tu(vuint8mf4_t merge,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32_tu(vuint8mf2_t merge,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32_tu(vuint8m1_t merge,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32_tu(vuint8m2_t merge,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32_tu(vuint16mf4_t merge,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32_tu(vuint16mf2_t merge,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32_tu(vuint16m1_t merge,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32_tu(vuint16m2_t merge,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32_tu(vuint16m4_t merge,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32_tu(vuint32mf2_t merge,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32_tu(vuint32m1_t merge,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32_tu(vuint32m2_t merge,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32_tu(vuint32m4_t merge,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32_tu(vuint32m8_t merge,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32_tu(vuint64m1_t merge,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32_tu(vuint64m2_t merge,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32_tu(vuint64m4_t merge,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32_tu(vuint64m8_t merge,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32_tu(vfloat32mf2_t merge,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32_tu(vfloat32m1_t merge,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32_tu(vfloat32m2_t merge,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32_tu(vfloat32m4_t merge,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32_tu(vfloat32m8_t merge,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32_tu(vfloat64m1_t merge,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32_tu(vfloat64m2_t merge,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32_tu(vfloat64m4_t merge,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32_tu(vfloat64m8_t merge,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "fda3a0b0f6b78f938e6e3b2c9bdbecdc194b4691", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32_tu-3.C", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tu-3.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32_tu(vint8mf8_t merge,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32_tu(vint8mf4_t merge,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32_tu(vint8mf2_t merge,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32_tu(vint8m1_t merge,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32_tu(vint8m2_t merge,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32_tu(vint16mf4_t merge,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32_tu(vint16mf2_t merge,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32_tu(vint16m1_t merge,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32_tu(vint16m2_t merge,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32_tu(vint16m4_t merge,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32_tu(vint32mf2_t merge,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32_tu(vint32m1_t merge,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32_tu(vint32m2_t merge,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32_tu(vint32m4_t merge,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32_tu(vint32m8_t merge,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32_tu(vint64m1_t merge,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32_tu(vint64m2_t merge,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32_tu(vint64m4_t merge,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32_tu(vint64m8_t merge,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32_tu(vuint8mf8_t merge,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32_tu(vuint8mf4_t merge,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32_tu(vuint8mf2_t merge,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32_tu(vuint8m1_t merge,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32_tu(vuint8m2_t merge,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32_tu(vuint16mf4_t merge,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32_tu(vuint16mf2_t merge,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32_tu(vuint16m1_t merge,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32_tu(vuint16m2_t merge,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32_tu(vuint16m4_t merge,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32_tu(vuint32mf2_t merge,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32_tu(vuint32m1_t merge,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32_tu(vuint32m2_t merge,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32_tu(vuint32m4_t merge,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32_tu(vuint32m8_t merge,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32_tu(vuint64m1_t merge,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32_tu(vuint64m2_t merge,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32_tu(vuint64m4_t merge,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32_tu(vuint64m8_t merge,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32_tu(vfloat32mf2_t merge,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32_tu(vfloat32m1_t merge,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32_tu(vfloat32m2_t merge,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32_tu(vfloat32m4_t merge,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32_tu(vfloat32m8_t merge,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32_tu(vfloat64m1_t merge,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32_tu(vfloat64m2_t merge,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32_tu(vfloat64m4_t merge,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32_tu(vfloat64m8_t merge,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tu(merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "a5966df712c5356152b9f8eb8882ef357605c82d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32_tum-1.C", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tum-1.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32_tum(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32_tum(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32_tum(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32_tum(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32_tum(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32_tum(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32_tum(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "c1b8c294334d69eedeb82535f13120567c934b8f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32_tum-2.C", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tum-2.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32_tum(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32_tum(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32_tum(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32_tum(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32_tum(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32_tum(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32_tum(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "7acee6645e29d026074f14793f03ee04a0f7cacc", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32_tum-3.C", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tum-3.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32_tum(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32_tum(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32_tum(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32_tum(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32_tum(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32_tum(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32_tum(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "e7562f406e42d64145d70a8192f0bd6f64c0c2eb", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32_tumu-1.C", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tumu-1.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32_tumu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32_tumu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32_tumu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32_tumu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32_tumu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32_tumu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32_tumu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "b8c8443c518695eaef0b71ed4016938cc07e820e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32_tumu-2.C", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tumu-2.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32_tumu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32_tumu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32_tumu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32_tumu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32_tumu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32_tumu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32_tumu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "05b706879930e586d95a3568f9badc5d3d91cc09", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei32_tumu-3.C", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c019f34e1f55cb2ce32cb79369251413c4ab7f86/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei32_tumu-3.C?ref=c019f34e1f55cb2ce32cb79369251413c4ab7f86", "patch": "@@ -0,0 +1,307 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei32_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei32_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei32_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei32_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei32_tumu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei32_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei32_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei32_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei32_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei32_tumu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei32_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei32_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei32_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei32_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei32_tumu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei32_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei32_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei32_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei32_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei32_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei32_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei32_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei32_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei32_tumu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei32_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei32_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei32_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei32_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei32_tumu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei32_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei32_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei32_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei32_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei32_tumu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei32_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei32_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei32_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei32_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei32_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei32_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei32_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei32_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei32_tumu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint32m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei32_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint32mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei32_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint32m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei32_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint32m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei32_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint32m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei32_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vluxei32\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}]}