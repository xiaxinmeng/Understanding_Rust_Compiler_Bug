{"sha": "a8dcc458896307fb03bb3b8c56c33a1b860837c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThkY2M0NTg4OTYzMDdmYjAzYmIzYjhjNTZjMzNhMWI4NjA4MzdjNA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-10-23T12:51:22Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-10-23T12:51:22Z"}, "message": "tree-ssa-forwprop.c (forward_propagate_into_cond): Handle vectors.\n\n2012-10-23  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* tree-ssa-forwprop.c (forward_propagate_into_cond): Handle vectors.\n\t* fold-const.c (fold_relational_const): Handle VECTOR_CST.\n\t* doc/generic.texi (VEC_COND_EXPR): Document current policy.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/foldconst-6.c: New testcase.\n\nFrom-SVN: r192711", "tree": {"sha": "9d49e15eb24b4681bee36a4cb27693dddf91dcd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d49e15eb24b4681bee36a4cb27693dddf91dcd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8dcc458896307fb03bb3b8c56c33a1b860837c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8dcc458896307fb03bb3b8c56c33a1b860837c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8dcc458896307fb03bb3b8c56c33a1b860837c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8dcc458896307fb03bb3b8c56c33a1b860837c4/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "053223551fd7253097117744fcafccd28c8941c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053223551fd7253097117744fcafccd28c8941c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053223551fd7253097117744fcafccd28c8941c0"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "24839c42fabdd40b0f320db1879a9a8e72a0c759", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dcc458896307fb03bb3b8c56c33a1b860837c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dcc458896307fb03bb3b8c56c33a1b860837c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8dcc458896307fb03bb3b8c56c33a1b860837c4", "patch": "@@ -1,3 +1,9 @@\n+2012-10-23  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* tree-ssa-forwprop.c (forward_propagate_into_cond): Handle vectors.\n+\t* fold-const.c (fold_relational_const): Handle VECTOR_CST.\n+\t* doc/generic.texi (VEC_COND_EXPR): Document current policy.\n+\n 2012-10-23  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/54937"}, {"sha": "c739731de67603b653e2f0f0d4f96adacb5bad75", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dcc458896307fb03bb3b8c56c33a1b860837c4/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dcc458896307fb03bb3b8c56c33a1b860837c4/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=a8dcc458896307fb03bb3b8c56c33a1b860837c4", "patch": "@@ -1780,8 +1780,9 @@ operand is of signed integral vector type.  If an element of the first\n operand evaluates to a zero value, the corresponding element of the\n result is taken from the third operand. If it evaluates to a minus one\n value, it is taken from the second operand. It should never evaluate to\n-any other value. In contrast with a @code{COND_EXPR}, all operands are\n-always evaluated.\n+any other value currently, but optimizations should not rely on that\n+property. In contrast with a @code{COND_EXPR}, all operands are always\n+evaluated.\n @end table\n \n "}, {"sha": "e3e4151ae60a42ae1210500ad603d8606d71884d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dcc458896307fb03bb3b8c56c33a1b860837c4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dcc458896307fb03bb3b8c56c33a1b860837c4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a8dcc458896307fb03bb3b8c56c33a1b860837c4", "patch": "@@ -16130,6 +16130,31 @@ fold_relational_const (enum tree_code code, tree type, tree op0, tree op1)\n \treturn NULL_TREE;\n     }\n \n+  if (TREE_CODE (op0) == VECTOR_CST && TREE_CODE (op1) == VECTOR_CST)\n+    {\n+      unsigned count = VECTOR_CST_NELTS (op0);\n+      tree *elts =  XALLOCAVEC (tree, count);\n+      gcc_assert (VECTOR_CST_NELTS (op1) == count\n+\t\t  && TYPE_VECTOR_SUBPARTS (type) == count);\n+\n+      for (unsigned i = 0; i < count; i++)\n+\t{\n+\t  tree elem_type = TREE_TYPE (type);\n+\t  tree elem0 = VECTOR_CST_ELT (op0, i);\n+\t  tree elem1 = VECTOR_CST_ELT (op1, i);\n+\n+\t  tree tem = fold_relational_const (code, elem_type,\n+\t\t\t\t\t    elem0, elem1);\n+\n+\t  if (tem == NULL_TREE)\n+\t    return NULL_TREE;\n+\n+\t  elts[i] = build_int_cst (elem_type, integer_zerop (tem) ? 0 : -1);\n+\t}\n+\n+      return build_vector (type, elts);\n+    }\n+\n   /* From here on we only handle LT, LE, GT, GE, EQ and NE.\n \n      To compute GT, swap the arguments and do LT."}, {"sha": "7c7ce7c0c4ae2247dd2f68265e6457e5e5156c7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dcc458896307fb03bb3b8c56c33a1b860837c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dcc458896307fb03bb3b8c56c33a1b860837c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8dcc458896307fb03bb3b8c56c33a1b860837c4", "patch": "@@ -1,3 +1,7 @@\n+2012-10-23  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/tree-ssa/foldconst-6.c: New testcase.\n+\n 2012-10-23  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/54937"}, {"sha": "0c08f8f258b3d66bda58cce5596f896bb39bd5cf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/foldconst-6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dcc458896307fb03bb3b8c56c33a1b860837c4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dcc458896307fb03bb3b8c56c33a1b860837c4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-6.c?ref=a8dcc458896307fb03bb3b8c56c33a1b860837c4", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+\n+typedef long vec __attribute__ ((vector_size (2 * sizeof(long))));\n+\n+void f (vec *r)\n+{\n+  vec a = { -2, 666 };\n+  vec b = { 3, 2 };\n+  *r = a < b;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"666\" \"ccp1\"} } */\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "f193fa90208fed51c3ff4b25cc8892351814ff24", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8dcc458896307fb03bb3b8c56c33a1b860837c4/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8dcc458896307fb03bb3b8c56c33a1b860837c4/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=a8dcc458896307fb03bb3b8c56c33a1b860837c4", "patch": "@@ -551,6 +551,7 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n   gimple stmt = gsi_stmt (*gsi_p);\n   tree tmp = NULL_TREE;\n   tree cond = gimple_assign_rhs1 (stmt);\n+  enum tree_code code = gimple_assign_rhs_code (stmt);\n   bool swap = false;\n \n   /* We can do tree combining on SSA_NAME and comparison expressions.  */\n@@ -561,23 +562,24 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n \t\t\t\t\t       TREE_OPERAND (cond, 1));\n   else if (TREE_CODE (cond) == SSA_NAME)\n     {\n-      enum tree_code code;\n+      enum tree_code def_code;\n       tree name = cond;\n       gimple def_stmt = get_prop_source_stmt (name, true, NULL);\n       if (!def_stmt || !can_propagate_from (def_stmt))\n \treturn 0;\n \n-      code = gimple_assign_rhs_code (def_stmt);\n-      if (TREE_CODE_CLASS (code) == tcc_comparison)\n+      def_code = gimple_assign_rhs_code (def_stmt);\n+      if (TREE_CODE_CLASS (def_code) == tcc_comparison)\n \ttmp = fold_build2_loc (gimple_location (def_stmt),\n-\t\t\t       code,\n+\t\t\t       def_code,\n \t\t\t       TREE_TYPE (cond),\n \t\t\t       gimple_assign_rhs1 (def_stmt),\n \t\t\t       gimple_assign_rhs2 (def_stmt));\n-      else if ((code == BIT_NOT_EXPR\n-\t\t&& TYPE_PRECISION (TREE_TYPE (cond)) == 1)\n-\t       || (code == BIT_XOR_EXPR\n-\t\t   && integer_onep (gimple_assign_rhs2 (def_stmt))))\n+      else if (code == COND_EXPR\n+\t       && ((def_code == BIT_NOT_EXPR\n+\t\t    && TYPE_PRECISION (TREE_TYPE (cond)) == 1)\n+\t\t   || (def_code == BIT_XOR_EXPR\n+\t\t       && integer_onep (gimple_assign_rhs2 (def_stmt)))))\n \t{\n \t  tmp = gimple_assign_rhs1 (def_stmt);\n \t  swap = true;\n@@ -596,7 +598,8 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n \t  fprintf (dump_file, \"'\\n\");\n \t}\n \n-      if (integer_onep (tmp))\n+      if ((code == VEC_COND_EXPR) ? integer_all_onesp (tmp)\n+\t\t\t\t  : integer_onep (tmp))\n \tgimple_assign_set_rhs_from_tree (gsi_p, gimple_assign_rhs2 (stmt));\n       else if (integer_zerop (tmp))\n \tgimple_assign_set_rhs_from_tree (gsi_p, gimple_assign_rhs3 (stmt));"}]}