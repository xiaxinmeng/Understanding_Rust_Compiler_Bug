{"sha": "2d71b918d494015f467023d3ee4596b3c887d4b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3MWI5MThkNDk0MDE1ZjQ2NzAyM2QzZWU0NTk2YjNjODg3ZDRiOA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-11-26T19:01:02Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-11-26T19:01:02Z"}, "message": "re PR fortran/42048 ([F03] Erroneous syntax error message on TBP call)\n\n2009-11-26  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42048\n\tPR fortran/42167\n\t* gfortran.h (gfc_is_function_return_value): New prototype.\n\t* match.c (gfc_match_call): Use new function\n\t'gfc_is_function_return_value'.\n\t* primary.c (gfc_is_function_return_value): New function to check if a\n\tsymbol is the return value of an encompassing function.\n\t(match_actual_arg,gfc_match_rvalue,match_variable): Use new function\n\t'gfc_is_function_return_value'.\n\t* resolve.c (resolve_common_blocks,resolve_actual_arglist): Ditto.\n\n2009-11-26  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42048\n\tPR fortran/42167\n\t* gfortran.dg/select_type_10.f03: New test case.\n\t* gfortran.dg/typebound_call_11.f03: Extended test case.\n\nFrom-SVN: r154679", "tree": {"sha": "514b39dc8ae626e9d48ee49c59406a249bd6050c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/514b39dc8ae626e9d48ee49c59406a249bd6050c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d71b918d494015f467023d3ee4596b3c887d4b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d71b918d494015f467023d3ee4596b3c887d4b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d71b918d494015f467023d3ee4596b3c887d4b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d71b918d494015f467023d3ee4596b3c887d4b8/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90dcfecb47a75e10277dcdd44aeb39267d251f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90dcfecb47a75e10277dcdd44aeb39267d251f36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90dcfecb47a75e10277dcdd44aeb39267d251f36"}], "stats": {"total": 105, "additions": 89, "deletions": 16}, "files": [{"sha": "0572b05868b74253319a13300b38f9478f71299f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2d71b918d494015f467023d3ee4596b3c887d4b8", "patch": "@@ -1,3 +1,16 @@\n+2009-11-26  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42048\n+\tPR fortran/42167\n+\t* gfortran.h (gfc_is_function_return_value): New prototype.\n+\t* match.c (gfc_match_call): Use new function\n+\t'gfc_is_function_return_value'.\n+\t* primary.c (gfc_is_function_return_value): New function to check if a\n+\tsymbol is the return value of an encompassing function.\n+\t(match_actual_arg,gfc_match_rvalue,match_variable): Use new function\n+\t'gfc_is_function_return_value'.\n+\t* resolve.c (resolve_common_blocks,resolve_actual_arglist): Ditto.\n+\n 2009-11-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/42162"}, {"sha": "cc3ccf5527cef5937eb5c2991fceea8851f99318", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2d71b918d494015f467023d3ee4596b3c887d4b8", "patch": "@@ -2751,6 +2751,7 @@ symbol_attribute gfc_expr_attr (gfc_expr *);\n match gfc_match_rvalue (gfc_expr **);\n match gfc_match_varspec (gfc_expr*, int, bool, bool);\n int gfc_check_digit (char, int);\n+bool gfc_is_function_return_value (gfc_symbol *, gfc_namespace *);\n \n /* trans.c */\n void gfc_generate_code (gfc_namespace *);"}, {"sha": "f6650e78b525cf613cb252fda562850a977a4fc9", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=2d71b918d494015f467023d3ee4596b3c887d4b8", "patch": "@@ -2975,7 +2975,8 @@ gfc_match_call (void)\n \n   /* If this is a variable of derived-type, it probably starts a type-bound\n      procedure call.  */\n-  if ((sym->attr.flavor != FL_PROCEDURE || sym == gfc_current_ns->proc_name)\n+  if ((sym->attr.flavor != FL_PROCEDURE\n+       || gfc_is_function_return_value (sym, gfc_current_ns))\n       && (sym->ts.type == BT_DERIVED || sym->ts.type == BT_CLASS))\n     return match_typebound_call (st);\n "}, {"sha": "113729fb0599759d30684038ff2b378d257f17ad", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=2d71b918d494015f467023d3ee4596b3c887d4b8", "patch": "@@ -1347,6 +1347,25 @@ gfc_match_literal_constant (gfc_expr **result, int signflag)\n }\n \n \n+/* This checks if a symbol is the return value of an encompassing function.\n+   Function nesting can be maximally two levels deep, but we may have\n+   additional local namespaces like BLOCK etc.  */\n+\n+bool\n+gfc_is_function_return_value (gfc_symbol *sym, gfc_namespace *ns)\n+{\n+  if (!sym->attr.function || (sym->result != sym))\n+    return false;\n+  while (ns)\n+    {\n+      if (ns->proc_name == sym)\n+\treturn true;\n+      ns = ns->parent;\n+    }\n+  return false;\n+}\n+\n+\n /* Match a single actual argument value.  An actual argument is\n    usually an expression, but can also be a procedure name.  If the\n    argument is a single name, it is not always possible to tell\n@@ -1415,9 +1434,7 @@ match_actual_arg (gfc_expr **result)\n \t     is being defined, then we have a variable.  */\n \t  if (sym->attr.function && sym->result == sym)\n \t    {\n-\t      if (gfc_current_ns->proc_name == sym\n-\t\t  || (gfc_current_ns->parent != NULL\n-\t\t      && gfc_current_ns->parent->proc_name == sym))\n+\t      if (gfc_is_function_return_value (sym, gfc_current_ns))\n \t\tbreak;\n \n \t      if (sym->attr.entry\n@@ -2521,9 +2538,7 @@ gfc_match_rvalue (gfc_expr **result)\n \t  return MATCH_ERROR;\n \t}\n \n-      if (gfc_current_ns->proc_name == sym\n-\t  || (gfc_current_ns->parent != NULL\n-\t      && gfc_current_ns->parent->proc_name == sym))\n+      if (gfc_is_function_return_value (sym, gfc_current_ns))\n \tgoto variable;\n \n       if (sym->attr.entry\n@@ -2998,10 +3013,7 @@ match_variable (gfc_expr **result, int equiv_flag, int host_flag)\n       if (sym->attr.function\n           && !sym->attr.external\n           && sym->result == sym\n-          && ((sym == gfc_current_ns->proc_name\n-               && sym == gfc_current_ns->proc_name->result)\n-              || (gfc_current_ns->parent\n-                  && sym == gfc_current_ns->parent->proc_name->result)\n+          && (gfc_is_function_return_value (sym, gfc_current_ns)\n               || (sym->attr.entry\n                   && sym->ns == gfc_current_ns)\n               || (sym->attr.entry"}, {"sha": "5048f251528534babc242ac2b3243d0f7008b3ca", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2d71b918d494015f467023d3ee4596b3c887d4b8", "patch": "@@ -776,7 +776,7 @@ resolve_common_blocks (gfc_symtree *common_root)\n     gfc_error (\"COMMON block '%s' at %L is also an intrinsic procedure\",\n \t       sym->name, &common_root->n.common->where);\n   else if (sym->attr.result\n-\t   ||(sym->attr.function && gfc_current_ns->proc_name == sym))\n+\t   || gfc_is_function_return_value (sym, gfc_current_ns))\n     gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: COMMON block '%s' at %L \"\n \t\t    \"that is also a function result\", sym->name,\n \t\t    &common_root->n.common->where);\n@@ -1400,10 +1400,7 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype,\n \t  /* If the symbol is the function that names the current (or\n \t     parent) scope, then we really have a variable reference.  */\n \n-\t  if (sym->attr.function && sym->result == sym\n-\t      && (sym->ns->proc_name == sym\n-\t\t  || (sym->ns->parent != NULL\n-\t\t      && sym->ns->parent->proc_name == sym)))\n+\t  if (gfc_is_function_return_value (sym, sym->ns))\n \t    goto got_variable;\n \n \t  /* If all else fails, see if we have a specific intrinsic.  */"}, {"sha": "b9893dad10fea92883e8f495b0e00edb24d03f49", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d71b918d494015f467023d3ee4596b3c887d4b8", "patch": "@@ -1,3 +1,10 @@\n+2009-11-26  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42048\n+\tPR fortran/42167\n+\t* gfortran.dg/select_type_10.f03: New test case.\n+\t* gfortran.dg/typebound_call_11.f03: Extended test case.\n+\n 2009-11-26  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/41905"}, {"sha": "217d72a8371e365fc55992243c4762509ee50937", "filename": "gcc/testsuite/gfortran.dg/select_type_10.f03", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_10.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_10.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_10.f03?ref=2d71b918d494015f467023d3ee4596b3c887d4b8", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do compile }\n+!\n+! PR 42167: [OOP] SELECT TYPE with function return value\n+!\n+! Contributed by Damian Rouson <damian@rouson.net>\n+\n+module bar_module\n+\n+  implicit none\n+  type :: bar\n+    real ,dimension(:) ,allocatable :: f\n+  contains\n+    procedure :: total\n+  end type\n+\n+contains\n+\n+  function total(lhs,rhs)\n+    class(bar) ,intent(in) :: lhs\n+    class(bar) ,intent(in) :: rhs\n+    class(bar) ,pointer :: total\n+    select type(rhs)\n+      type is (bar)\n+        allocate(bar :: total)\n+        select type(total)\n+          type is (bar)\n+            total%f = lhs%f + rhs%f\n+        end select\n+    end select\n+  end function\n+\n+end module \n+\n+! { dg-final { cleanup-modules \"bar_module\" } }"}, {"sha": "8d7b8f06178f48e38855f059e5062710748389bf", "filename": "gcc/testsuite/gfortran.dg/typebound_call_11.f03", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_11.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71b918d494015f467023d3ee4596b3c887d4b8/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_11.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_call_11.f03?ref=2d71b918d494015f467023d3ee4596b3c887d4b8", "patch": "@@ -35,6 +35,14 @@ function new_field2() result(new)\n   call new%mesh%new_grid()\n  end function\n \n+ type(field) function new_field3()\n+  call g()\n+ contains\n+  subroutine g()\n+    call new_field3%mesh%new_grid()\n+  end subroutine g\n+ end function new_field3\n+\n end module\n \n ! { dg-final { cleanup-modules \"grid_module field_module\" } }"}]}