{"sha": "13756074430d7ace49756f247d185c0de92f6481", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM3NTYwNzQ0MzBkN2FjZTQ5NzU2ZjI0N2QxODVjMGRlOTJmNjQ4MQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-18T18:41:46Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-18T18:41:46Z"}, "message": "(make_signed_type): Consistently use HOST_BITS_PER_WIDE_INT.\n\n(make_signed_type): Consistently use\nHOST_BITS_PER_WIDE_INT.  Correct minor formatting problems.\n(fixup_signed_type): Use HOST_BITS_PER_WIDE_INT and HOST_WIDE_INT\nlike make_signed_type does.\n(fixup_unsigned_type): Correct minor formatting problem.\n\nFrom-SVN: r3263", "tree": {"sha": "f3702b7b8d0be4b586d5d432239ed468b4c190b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3702b7b8d0be4b586d5d432239ed468b4c190b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13756074430d7ace49756f247d185c0de92f6481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13756074430d7ace49756f247d185c0de92f6481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13756074430d7ace49756f247d185c0de92f6481", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13756074430d7ace49756f247d185c0de92f6481/comments", "author": null, "committer": null, "parents": [{"sha": "1f050b9b262115d78c865bad87644a056bb8539a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f050b9b262115d78c865bad87644a056bb8539a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f050b9b262115d78c865bad87644a056bb8539a"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "c86fc004e28f0b187c40020beb9f0aa2eac0cd54", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13756074430d7ace49756f247d185c0de92f6481/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13756074430d7ace49756f247d185c0de92f6481/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=13756074430d7ace49756f247d185c0de92f6481", "patch": "@@ -924,14 +924,14 @@ make_signed_type (precision)\n \t\t    ? 0 : (HOST_WIDE_INT) (-1) << (precision - 1)),\n \t\t   (((HOST_WIDE_INT) (-1)\n \t\t     << (precision - HOST_BITS_PER_WIDE_INT - 1 > 0\n-\t\t\t ? precision-HOST_BITS_PER_WIDE_INT - 1\n+\t\t\t ? precision - HOST_BITS_PER_WIDE_INT - 1\n \t\t\t : 0))));\n   TYPE_MAX_VALUE (type)\n-    = build_int_2 ((precision - HOST_BITS_PER_WIDE_INT > 0 \n+    = build_int_2 ((precision - HOST_BITS_PER_WIDE_INT > 0\n \t\t    ? -1 : ((HOST_WIDE_INT) 1 << (precision - 1)) - 1),\n \t\t   (precision - HOST_BITS_PER_WIDE_INT - 1 > 0\n \t\t    ? (((HOST_WIDE_INT) 1\n-\t\t\t<< (precision - HOST_BITS_PER_INT - 1)))-1\n+\t\t\t<< (precision - HOST_BITS_PER_WIDE_INT - 1))) - 1\n \t\t    : 0));\n \n   /* Give this type's extreme values this type as their type.  */\n@@ -977,7 +977,7 @@ make_unsigned_type (precision)\n }\n \n /* Set the extreme values of TYPE based on its precision in bits,\n-   the lay it out.  Used when make_signed_type won't do\n+   then lay it out.  Used when make_signed_type won't do\n    because the tree code is not INTEGER_TYPE.\n    E.g. for Pascal, when the -fsigned-char option is given.  */\n \n@@ -988,14 +988,18 @@ fixup_signed_type (type)\n   register int precision = TYPE_PRECISION (type);\n \n   TYPE_MIN_VALUE (type)\n-    = build_int_2 ((precision-BITS_PER_WORD > 0 ? 0 : (-1)<<(precision-1)),\n-\t\t   (-1)<<(precision-BITS_PER_WORD-1 > 0\n-\t\t\t  ? precision-BITS_PER_WORD-1\n-\t\t\t  : 0));\n+    = build_int_2 ((precision - HOST_BITS_PER_WIDE_INT > 0\n+\t\t    ? 0 : (HOST_WIDE_INT) (-1) << (precision - 1)),\n+\t\t   (((HOST_WIDE_INT) (-1)\n+\t\t     << (precision - HOST_BITS_PER_WIDE_INT - 1 > 0\n+\t\t\t ? precision - HOST_BITS_PER_WIDE_INT - 1\n+\t\t\t : 0))));\n   TYPE_MAX_VALUE (type)\n-    = build_int_2 ((precision-BITS_PER_WORD > 0 ? -1 : (1<<(precision-1))-1),\n-\t\t   (precision-BITS_PER_WORD-1 > 0\n-\t\t    ? (1<<(precision-BITS_PER_WORD-1))-1\n+    = build_int_2 ((precision - HOST_BITS_PER_WIDE_INT > 0\n+\t\t    ? -1 : ((HOST_WIDE_INT) 1 << (precision - 1)) - 1),\n+\t\t   (precision - HOST_BITS_PER_WIDE_INT - 1 > 0\n+\t\t    ? (((HOST_WIDE_INT) 1\n+\t\t\t<< (precision - HOST_BITS_PER_WIDE_INT - 1))) - 1\n \t\t    : 0));\n \n   TREE_TYPE (TYPE_MIN_VALUE (type)) = type;\n@@ -1007,7 +1011,7 @@ fixup_signed_type (type)\n }\n \n /* Set the extreme values of TYPE based on its precision in bits,\n-   the lay it out.  This is used both in `make_unsigned_type'\n+   then lay it out.  This is used both in `make_unsigned_type'\n    and for enumeral types.  */\n \n void\n@@ -1019,7 +1023,7 @@ fixup_unsigned_type (type)\n   TYPE_MIN_VALUE (type) = build_int_2 (0, 0);\n   TYPE_MAX_VALUE (type)\n     = build_int_2 (precision - HOST_BITS_PER_WIDE_INT >= 0\n-\t\t   ? -1 : ((HOST_WIDE_INT) 1<< precision) - 1,\n+\t\t   ? -1 : ((HOST_WIDE_INT) 1 << precision) - 1,\n \t\t   precision - HOST_BITS_PER_WIDE_INT > 0\n \t\t   ? ((unsigned HOST_WIDE_INT) ~0\n \t\t      >> (HOST_BITS_PER_WIDE_INT"}]}