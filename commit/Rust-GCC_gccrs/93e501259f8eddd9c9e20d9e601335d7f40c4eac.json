{"sha": "93e501259f8eddd9c9e20d9e601335d7f40c4eac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNlNTAxMjU5ZjhlZGRkOWM5ZTIwZDllNjAxMzM1ZDdmNDBjNGVhYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-02-25T11:39:15Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-02-25T11:39:15Z"}, "message": "re PR middle-end/19984 (nan should be C99 built-in)\n\n\tPR middle-end/19984\n\t* builtins.def (BUILT_IN_NAN): Define as c99 builtin\n\tusing DEF_C99_BUILTIN.\n\t(BUILT_IN_NANF): Ditto.\n\t(BUILT_IN_NANL): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR middle-end/19984\n\t* gcc.dg/pr19984.c: New test.\n\t* gcc.dg/dfp/compare-special.h: Use _nan instead of nan as the\n\tname of the variable.\n\nFrom-SVN: r132617", "tree": {"sha": "c8c909fe82d9873ca626a8f6c90bcc8b5449be0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8c909fe82d9873ca626a8f6c90bcc8b5449be0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93e501259f8eddd9c9e20d9e601335d7f40c4eac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e501259f8eddd9c9e20d9e601335d7f40c4eac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93e501259f8eddd9c9e20d9e601335d7f40c4eac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e501259f8eddd9c9e20d9e601335d7f40c4eac/comments", "author": null, "committer": null, "parents": [{"sha": "433331d4033f0dd4db8ba9913db0992aefb7ffce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/433331d4033f0dd4db8ba9913db0992aefb7ffce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/433331d4033f0dd4db8ba9913db0992aefb7ffce"}], "stats": {"total": 72, "additions": 52, "deletions": 20}, "files": [{"sha": "4660bf9537f39215b8d0fef3f6ed372df74e9027", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e501259f8eddd9c9e20d9e601335d7f40c4eac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e501259f8eddd9c9e20d9e601335d7f40c4eac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93e501259f8eddd9c9e20d9e601335d7f40c4eac", "patch": "@@ -1,3 +1,11 @@\n+2008-02-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR middle-end/19984\n+\t* builtins.def (BUILT_IN_NAN): Define as c99 builtin\n+\tusing DEF_C99_BUILTIN.\n+\t(BUILT_IN_NANF): Ditto.\n+\t(BUILT_IN_NANL): Ditto.\n+\n 2008-02-25  Ayal Zaks  <zaks@il.ibm.com>\n \t    Revital Eres  <eres@il.ibm.com>\n \n@@ -59,8 +67,8 @@\n \t* config/rs6000/darwin.h (SUBTARGET_INIT_BUILTINS): New macro.\n \t* config/rs6000/rs6000.c (rs6000_init_builtins): Call\n \tSUBTARGET_INIT_BUILTINS if defined.\n-\t* config/darwin.c (darwin_patch_builtin,\n-\tdarwin_patch_builtins): New functions.\n+\t* config/darwin.c (darwin_patch_builtin, darwin_patch_builtins):\n+\tNew functions.\n \n 2008-02-23  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n "}, {"sha": "836e241a9311d2c8d1d50dbdaaed4fac59f9c945", "filename": "gcc/builtins.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e501259f8eddd9c9e20d9e601335d7f40c4eac/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e501259f8eddd9c9e20d9e601335d7f40c4eac/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=93e501259f8eddd9c9e20d9e601335d7f40c4eac", "patch": "@@ -336,9 +336,9 @@ DEF_C99_BUILTIN        (BUILT_IN_LROUNDL, \"lroundl\", BT_FN_LONG_LONGDOUBLE, ATTR\n DEF_LIB_BUILTIN        (BUILT_IN_MODF, \"modf\", BT_FN_DOUBLE_DOUBLE_DOUBLEPTR, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_MODFF, \"modff\", BT_FN_FLOAT_FLOAT_FLOATPTR, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_MODFL, \"modfl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLEPTR, ATTR_MATHFN_FPROUNDING_STORE)\n-DEF_GCC_BUILTIN        (BUILT_IN_NAN, \"nan\", BT_FN_DOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n-DEF_GCC_BUILTIN        (BUILT_IN_NANF, \"nanf\", BT_FN_FLOAT_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n-DEF_GCC_BUILTIN        (BUILT_IN_NANL, \"nanl\", BT_FN_LONGDOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n+DEF_C99_BUILTIN        (BUILT_IN_NAN, \"nan\", BT_FN_DOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n+DEF_C99_BUILTIN        (BUILT_IN_NANF, \"nanf\", BT_FN_FLOAT_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n+DEF_C99_BUILTIN        (BUILT_IN_NANL, \"nanl\", BT_FN_LONGDOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NAND32, \"nand32\", BT_FN_DFLOAT32_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NAND64, \"nand64\", BT_FN_DFLOAT64_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)\n DEF_GCC_BUILTIN        (BUILT_IN_NAND128, \"nand128\", BT_FN_DFLOAT128_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL)"}, {"sha": "b30d35d567f4d388afb901b58069df7787c46571", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e501259f8eddd9c9e20d9e601335d7f40c4eac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e501259f8eddd9c9e20d9e601335d7f40c4eac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93e501259f8eddd9c9e20d9e601335d7f40c4eac", "patch": "@@ -1,3 +1,10 @@\n+2008-02-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR middle-end/19984\n+\t* gcc.dg/pr19984.c: New test.\n+\t* gcc.dg/dfp/compare-special.h: Use _nan instead of nan as the\n+\tname of the variable.\n+\n 2008-02-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/vect/vect-99.c: Include stdlib.h and tree-vect.h."}, {"sha": "c5bef234424fe5f375818dc357ccba84ec5a1b12", "filename": "gcc/testsuite/gcc.dg/dfp/compare-special.h", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e501259f8eddd9c9e20d9e601335d7f40c4eac/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e501259f8eddd9c9e20d9e601335d7f40c4eac/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special.h?ref=93e501259f8eddd9c9e20d9e601335d7f40c4eac", "patch": "@@ -47,13 +47,13 @@ DTYPE zero  = PASTE(0.0, SUFFIX);\n DTYPE one   = PASTE(1.0, SUFFIX);\n DTYPE two   = PASTE(2.0, SUFFIX);\n \n-volatile DTYPE x, y, z, nan, inf, m_inf;\n+volatile DTYPE x, y, z, _nan, inf, m_inf;\n \n void\n test_compares (void)\n {\n-  nan = PASTE(__builtin_nan, SUFFIX2) (\"\");\n-  inf = PASTE(__builtin_inf, SUFFIX2) ();\n+  _nan = PASTE(__builtin_nan, SUFFIX2) (\"\");\n+  inf =  PASTE(__builtin_inf, SUFFIX2) ();\n   m_inf = - PASTE(__builtin_inf, SUFFIX2) ();\n \n   x = PASTE(__builtin_nan, SUFFIX2) (\"\");\n@@ -65,14 +65,14 @@ test_compares (void)\n   if (x <= two)   FAILURE (\"<=\", \"NaN\")\n   if (x <= zero)  FAILURE (\"<=\", \"NaN\")\n   if (x <= m_one) FAILURE (\"<=\", \"NaN\")\n-  if (x <= nan)   FAILURE (\"<=\", \"NaN\")\n+  if (x <= _nan)  FAILURE (\"<=\", \"NaN\")\n   if (x <= inf)   FAILURE (\"<=\", \"NaN\")\n   if (x <= m_inf) FAILURE (\"<=\", \"NaN\")\n \n   if (two <= x)   FAILURE (\"<=\", \"NaN\")\n   if (zero <= x)  FAILURE (\"<=\", \"NaN\")\n   if (m_one <= x) FAILURE (\"<=\", \"NaN\")\n-  if (nan <= x)   FAILURE (\"<=\", \"NaN\")\n+  if (_nan <= x)  FAILURE (\"<=\", \"NaN\")\n   if (inf <= x)   FAILURE (\"<=\", \"NaN\")\n   if (m_inf <= x) FAILURE (\"<=\", \"NaN\")\n \n@@ -102,14 +102,14 @@ test_compares (void)\n   if (x < two)       FAILURE (\"<\", \"NaN\")\n   if (x < zero)      FAILURE (\"<\", \"NaN\")\n   if (x < m_one)     FAILURE (\"<\", \"NaN\")\n-  if (x < nan)       FAILURE (\"<\", \"NaN\")\n+  if (x < _nan)      FAILURE (\"<\", \"NaN\")\n   if (x < inf)       FAILURE (\"<\", \"NaN\")\n   if (x < m_inf)     FAILURE (\"<\", \"NaN\")\n \n   if (two < x)       FAILURE (\"<\", \"NaN\")\n   if (zero < x)      FAILURE (\"<\", \"NaN\")\n   if (m_one < x)     FAILURE (\"<\", \"NaN\")\n-  if (nan < x)       FAILURE (\"<\", \"NaN\")\n+  if (_nan < x)      FAILURE (\"<\", \"NaN\")\n   if (inf < x)       FAILURE (\"<\", \"NaN\")\n   if (m_inf < x)     FAILURE (\"<\", \"NaN\")\n \n@@ -139,14 +139,14 @@ test_compares (void)\n   if (x >= two)      FAILURE (\">=\", \"NaN\")\n   if (x >= zero)     FAILURE (\">=\", \"NaN\")\n   if (x >= m_one)    FAILURE (\">=\", \"NaN\")\n-  if (x >= nan)      FAILURE (\">=\", \"NaN\")\n+  if (x >= _nan)     FAILURE (\">=\", \"NaN\")\n   if (x >= inf)      FAILURE (\">=\", \"NaN\")\n   if (x >= m_inf)    FAILURE (\">=\", \"NaN\")\n \n   if (two >= x)      FAILURE (\">=\", \"NaN\")\n   if (zero >= x)     FAILURE (\">=\", \"NaN\")\n   if (m_one >= x)    FAILURE (\">=\", \"NaN\")\n-  if (nan >= x)      FAILURE (\">=\", \"NaN\")\n+  if (_nan >= x)     FAILURE (\">=\", \"NaN\")\n   if (inf >= x)      FAILURE (\">=\", \"NaN\")\n   if (m_inf >= x)    FAILURE (\">=\", \"NaN\")\n \n@@ -176,14 +176,14 @@ test_compares (void)\n   if (x > two)       FAILURE (\">\", \"NaN\")\n   if (x > zero)      FAILURE (\">\", \"NaN\")\n   if (x > m_one)     FAILURE (\">\", \"NaN\")\n-  if (x > nan)       FAILURE (\">\", \"NaN\")\n+  if (x > _nan)      FAILURE (\">\", \"NaN\")\n   if (x > inf)       FAILURE (\">\", \"NaN\")\n   if (x > m_inf)     FAILURE (\">\", \"NaN\")\n \n   if (two > x)       FAILURE (\">\", \"NaN\")\n   if (zero > x)      FAILURE (\">\", \"NaN\")\n   if (m_one > x)     FAILURE (\">\", \"NaN\")\n-  if (nan > x)       FAILURE (\">\", \"NaN\")\n+  if (_nan > x)      FAILURE (\">\", \"NaN\")\n   if (inf > x)       FAILURE (\">\", \"NaN\")\n   if (m_inf > x)     FAILURE (\">\", \"NaN\")\n \n@@ -213,14 +213,14 @@ test_compares (void)\n   if (x == two)      FAILURE (\"==\", \"NaN\")\n   if (x == zero)     FAILURE (\"==\", \"NaN\")\n   if (x == m_one)    FAILURE (\"==\", \"NaN\")\n-  if (x == nan)      FAILURE (\"==\", \"NaN\")\n+  if (x == _nan)     FAILURE (\"==\", \"NaN\")\n   if (x == inf)      FAILURE (\"==\", \"NaN\")\n   if (x == m_inf)    FAILURE (\"==\", \"NaN\")\n \n   if (two == x)      FAILURE (\"==\", \"NaN\")\n   if (zero == x)     FAILURE (\"==\", \"NaN\")\n   if (m_one == x)    FAILURE (\"==\", \"NaN\")\n-  if (nan == x)      FAILURE (\"==\", \"NaN\")\n+  if (_nan == x)     FAILURE (\"==\", \"NaN\")\n   if (inf == x)      FAILURE (\"==\", \"NaN\")\n   if (m_inf == x)    FAILURE (\"==\", \"NaN\")\n \n@@ -250,14 +250,14 @@ test_compares (void)\n   if (!(x != two))   FAILURE (\"!=\", \"NaN\")\n   if (!(x != zero))  FAILURE (\"!=\", \"NaN\")\n   if (!(x != m_one)) FAILURE (\"!=\", \"NaN\")\n-  if (!(x != nan))   FAILURE (\"!=\", \"NaN\")\n+  if (!(x != _nan))  FAILURE (\"!=\", \"NaN\")\n   if (!(x != inf))   FAILURE (\"!=\", \"NaN\")\n   if (!(x != m_inf)) FAILURE (\"!=\", \"NaN\")\n \n   if (!(two != x))   FAILURE (\"!=\", \"NaN\")\n   if (!(zero != x))  FAILURE (\"!=\", \"NaN\")\n   if (!(m_one != x)) FAILURE (\"!=\", \"NaN\")\n-  if (!(nan != x))   FAILURE (\"!=\", \"NaN\")\n+  if (!(_nan != x))  FAILURE (\"!=\", \"NaN\")\n   if (!(inf != x))   FAILURE (\"!=\", \"NaN\")\n   if (!(m_inf != x)) FAILURE (\"!=\", \"NaN\")\n "}, {"sha": "1b61d7f76b8f87bd3c8171d7b666192777b437f8", "filename": "gcc/testsuite/gcc.dg/pr19984.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e501259f8eddd9c9e20d9e601335d7f40c4eac/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19984.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e501259f8eddd9c9e20d9e601335d7f40c4eac/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19984.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19984.c?ref=93e501259f8eddd9c9e20d9e601335d7f40c4eac", "patch": "@@ -0,0 +1,17 @@\n+/* PR c/19984 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c99\" } */\n+\n+\n+double nan (const char *);\n+\n+const double nok = nan (\"\");\t/* { dg-warning \"(not constant)|(near initialization)\" } */\n+\n+const double ok = __builtin_nan (\"\");\n+\n+double\n+foo ()\n+{\n+  double ok2 = nan (\"\");\n+  return ok2;\n+}"}]}