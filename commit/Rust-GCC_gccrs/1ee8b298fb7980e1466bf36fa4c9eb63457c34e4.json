{"sha": "1ee8b298fb7980e1466bf36fa4c9eb63457c34e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVlOGIyOThmYjc5ODBlMTQ2NmJmMzZmYTRjOWViNjM0NTdjMzRlNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-04-13T10:16:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-13T10:16:51Z"}, "message": "sse.md (pinsrbits): Remove.\n\n\t* config/i386/sse.md (pinsrbits): Remove.\n\t(sse2_packsswb): Merge with *avx_packsswb.\n\t(sse2_packssdw): Merge with *avx_packssdw.\n\t(sse2_packuswb): Merge with *avx_packuswb.\n\t(vec_interleave_highv16qi): Merge with *avx_interleave_highv16qi.\n\t(vec_interleave_lowv16qi): Merge with *avx_interleave_lowv16qi.\n\t(vec_interleave_highv8hi): Merge with *avx_interleave_highv8hi.\n\t(vec_interleave_lowv8hi): Merge with *avx_interleave_lowv8hi.\n\t(vec_interleave_highv4si): Merge with *avx_interleave_highv4si.\n\t(vec_interleave_lowv4si): Merge with *avx_interleave_lowv4si.\n\t(*sse4_1_pinsrb): Merge with *avx_pinsr<ssevecsize>.\n\t(*sse2_pinsrw): Merge with *avx_pinsr<ssevecsize>.\n\t(*sse4_1_pinsrd): Merge with *avx_pinsr<ssevecsize>.\n\t(*sse4_1_pinsrq): Merge with *avx_pinsrq.\n\t(sse2_loadld): Merge with *avx_loadld.\n\t(*vec_extractv2di_1_rex64): Merge with *vec_extractv2di_1_rex64_avx.\n\t(*vec_extractv2di_1_sse2): Merge with *vec_extractv2di_1_avx.\n\t(*vec_concatv2si_sse4_1): Merge with *vec_concatv2si_avx.\n\t(*vec_concatv2di_rex64_sse4_1): Merge with *vec_concatv2di_rex64_avx.\n\t(vec_concatv2di): Merge with *vec_concatv2di_avx.\n\nFrom-SVN: r172365", "tree": {"sha": "6cc6e0a68c3748c800ce54b45bbff44568ed8802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cc6e0a68c3748c800ce54b45bbff44568ed8802"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ee8b298fb7980e1466bf36fa4c9eb63457c34e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ee8b298fb7980e1466bf36fa4c9eb63457c34e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ee8b298fb7980e1466bf36fa4c9eb63457c34e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ee8b298fb7980e1466bf36fa4c9eb63457c34e4/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b48678464d5368cecb93770d0aeb86c3f98f32b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48678464d5368cecb93770d0aeb86c3f98f32b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b48678464d5368cecb93770d0aeb86c3f98f32b7"}], "stats": {"total": 770, "additions": 299, "deletions": 471}, "files": [{"sha": "a37cd7105c962bcd11a47d0ae10bd777e63b1a57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ee8b298fb7980e1466bf36fa4c9eb63457c34e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ee8b298fb7980e1466bf36fa4c9eb63457c34e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ee8b298fb7980e1466bf36fa4c9eb63457c34e4", "patch": "@@ -1,3 +1,26 @@\n+2011-04-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (pinsrbits): Remove.\n+\t(sse2_packsswb): Merge with *avx_packsswb.\n+\t(sse2_packssdw): Merge with *avx_packssdw.\n+\t(sse2_packuswb): Merge with *avx_packuswb.\n+\t(vec_interleave_highv16qi): Merge with *avx_interleave_highv16qi.\n+\t(vec_interleave_lowv16qi): Merge with *avx_interleave_lowv16qi.\n+\t(vec_interleave_highv8hi): Merge with *avx_interleave_highv8hi.\n+\t(vec_interleave_lowv8hi): Merge with *avx_interleave_lowv8hi.\n+\t(vec_interleave_highv4si): Merge with *avx_interleave_highv4si.\n+\t(vec_interleave_lowv4si): Merge with *avx_interleave_lowv4si.\n+\t(*sse4_1_pinsrb): Merge with *avx_pinsr<ssevecsize>.\n+\t(*sse2_pinsrw): Merge with *avx_pinsr<ssevecsize>.\n+\t(*sse4_1_pinsrd): Merge with *avx_pinsr<ssevecsize>.\n+\t(*sse4_1_pinsrq): Merge with *avx_pinsrq.\n+\t(sse2_loadld): Merge with *avx_loadld.\n+\t(*vec_extractv2di_1_rex64): Merge with *vec_extractv2di_1_rex64_avx.\n+\t(*vec_extractv2di_1_sse2): Merge with *vec_extractv2di_1_avx.\n+\t(*vec_concatv2si_sse4_1): Merge with *vec_concatv2si_avx.\n+\t(*vec_concatv2di_rex64_sse4_1): Merge with *vec_concatv2di_rex64_avx.\n+\t(vec_concatv2di): Merge with *vec_concatv2di_avx.\n+\n 2011-04-12  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* c-decl.c (union lang_tree_node): Check for TS_COMMON before"}, {"sha": "17738113c05f1b85b83537f3f4c15ef205779ce8", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 276, "deletions": 471, "changes": 747, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ee8b298fb7980e1466bf36fa4c9eb63457c34e4/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ee8b298fb7980e1466bf36fa4c9eb63457c34e4/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1ee8b298fb7980e1466bf36fa4c9eb63457c34e4", "patch": "@@ -180,9 +180,6 @@\n (define_mode_attr blendbits\n   [(V8SF \"255\") (V4SF \"15\") (V4DF \"15\") (V2DF \"3\")])\n \n-;; Mapping of immediate bits for pinsr instructions\n-(define_mode_attr pinsrbits [(V16QI \"32768\") (V8HI \"128\") (V4SI \"8\")])\n-\n ;; Patterns whose name begins with \"sse{,2,3}_\" are invoked by intrinsics.\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -5971,110 +5968,63 @@\n   DONE;\n })\n \n-(define_insn \"*avx_packsswb\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n-\t(vec_concat:V16QI\n-\t  (ss_truncate:V8QI\n-\t    (match_operand:V8HI 1 \"register_operand\" \"x\"))\n-\t  (ss_truncate:V8QI\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\"))))]\n-  \"TARGET_AVX\"\n-  \"vpacksswb\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"sse2_packsswb\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x\")\n \t(vec_concat:V16QI\n \t  (ss_truncate:V8QI\n-\t    (match_operand:V8HI 1 \"register_operand\" \"0\"))\n+\t    (match_operand:V8HI 1 \"register_operand\" \"0,x\"))\n \t  (ss_truncate:V8QI\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\"))))]\n+\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\"))))]\n   \"TARGET_SSE2\"\n-  \"packsswb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_packssdw\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(vec_concat:V8HI\n-\t  (ss_truncate:V4HI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"x\"))\n-\t  (ss_truncate:V4HI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\"))))]\n-  \"TARGET_AVX\"\n-  \"vpackssdw\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+  \"@\n+   packsswb\\t{%2, %0|%0, %2}\n+   vpacksswb\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_packssdw\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n \t(vec_concat:V8HI\n \t  (ss_truncate:V4HI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"0\"))\n+\t    (match_operand:V4SI 1 \"register_operand\" \"0,x\"))\n \t  (ss_truncate:V4HI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\"))))]\n+\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,xm\"))))]\n   \"TARGET_SSE2\"\n-  \"packssdw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_packuswb\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n-\t(vec_concat:V16QI\n-\t  (us_truncate:V8QI\n-\t    (match_operand:V8HI 1 \"register_operand\" \"x\"))\n-\t  (us_truncate:V8QI\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\"))))]\n-  \"TARGET_AVX\"\n-  \"vpackuswb\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+  \"@\n+   packssdw\\t{%2, %0|%0, %2}\n+   vpackssdw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_packuswb\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x\")\n \t(vec_concat:V16QI\n \t  (us_truncate:V8QI\n-\t    (match_operand:V8HI 1 \"register_operand\" \"0\"))\n+\t    (match_operand:V8HI 1 \"register_operand\" \"0,x\"))\n \t  (us_truncate:V8QI\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\"))))]\n+\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\"))))]\n   \"TARGET_SSE2\"\n-  \"packuswb\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_interleave_highv16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n-\t(vec_select:V16QI\n-\t  (vec_concat:V32QI\n-\t    (match_operand:V16QI 1 \"register_operand\" \"x\")\n-\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\"))\n-\t  (parallel [(const_int 8)  (const_int 24)\n-\t\t     (const_int 9)  (const_int 25)\n-\t\t     (const_int 10) (const_int 26)\n-\t\t     (const_int 11) (const_int 27)\n-\t\t     (const_int 12) (const_int 28)\n-\t\t     (const_int 13) (const_int 29)\n-\t\t     (const_int 14) (const_int 30)\n-\t\t     (const_int 15) (const_int 31)])))]\n-  \"TARGET_AVX\"\n-  \"vpunpckhbw\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+  \"@\n+   packuswb\\t{%2, %0|%0, %2}\n+   vpackuswb\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"vec_interleave_highv16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x\")\n \t(vec_select:V16QI\n \t  (vec_concat:V32QI\n-\t    (match_operand:V16QI 1 \"register_operand\" \"0\")\n-\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V16QI 1 \"register_operand\" \"0,x\")\n+\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (parallel [(const_int 8)  (const_int 24)\n \t\t     (const_int 9)  (const_int 25)\n \t\t     (const_int 10) (const_int 26)\n@@ -6084,37 +6034,21 @@\n \t\t     (const_int 14) (const_int 30)\n \t\t     (const_int 15) (const_int 31)])))]\n   \"TARGET_SSE2\"\n-  \"punpckhbw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_interleave_lowv16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n-\t(vec_select:V16QI\n-\t  (vec_concat:V32QI\n-\t    (match_operand:V16QI 1 \"register_operand\" \"x\")\n-\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\"))\n-\t  (parallel [(const_int 0) (const_int 16)\n-\t\t     (const_int 1) (const_int 17)\n-\t\t     (const_int 2) (const_int 18)\n-\t\t     (const_int 3) (const_int 19)\n-\t\t     (const_int 4) (const_int 20)\n-\t\t     (const_int 5) (const_int 21)\n-\t\t     (const_int 6) (const_int 22)\n-\t\t     (const_int 7) (const_int 23)])))]\n-  \"TARGET_AVX\"\n-  \"vpunpcklbw\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+  \"@\n+   punpckhbw\\t{%2, %0|%0, %2}\n+   vpunpckhbw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"vec_interleave_lowv16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x\")\n \t(vec_select:V16QI\n \t  (vec_concat:V32QI\n-\t    (match_operand:V16QI 1 \"register_operand\" \"0\")\n-\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V16QI 1 \"register_operand\" \"0,x\")\n+\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (parallel [(const_int 0) (const_int 16)\n \t\t     (const_int 1) (const_int 17)\n \t\t     (const_int 2) (const_int 18)\n@@ -6124,247 +6058,212 @@\n \t\t     (const_int 6) (const_int 22)\n \t\t     (const_int 7) (const_int 23)])))]\n   \"TARGET_SSE2\"\n-  \"punpcklbw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_interleave_highv8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(vec_select:V8HI\n-\t  (vec_concat:V16HI\n-\t    (match_operand:V8HI 1 \"register_operand\" \"x\")\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\"))\n-\t  (parallel [(const_int 4) (const_int 12)\n-\t\t     (const_int 5) (const_int 13)\n-\t\t     (const_int 6) (const_int 14)\n-\t\t     (const_int 7) (const_int 15)])))]\n-  \"TARGET_AVX\"\n-  \"vpunpckhwd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+  \"@\n+   punpcklbw\\t{%2, %0|%0, %2}\n+   vpunpcklbw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"vec_interleave_highv8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n \t(vec_select:V8HI\n \t  (vec_concat:V16HI\n-\t    (match_operand:V8HI 1 \"register_operand\" \"0\")\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V8HI 1 \"register_operand\" \"0,x\")\n+\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (parallel [(const_int 4) (const_int 12)\n \t\t     (const_int 5) (const_int 13)\n \t\t     (const_int 6) (const_int 14)\n \t\t     (const_int 7) (const_int 15)])))]\n   \"TARGET_SSE2\"\n-  \"punpckhwd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_interleave_lowv8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(vec_select:V8HI\n-\t  (vec_concat:V16HI\n-\t    (match_operand:V8HI 1 \"register_operand\" \"x\")\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\"))\n-\t  (parallel [(const_int 0) (const_int 8)\n-\t\t     (const_int 1) (const_int 9)\n-\t\t     (const_int 2) (const_int 10)\n-\t\t     (const_int 3) (const_int 11)])))]\n-  \"TARGET_AVX\"\n-  \"vpunpcklwd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+  \"@\n+   punpckhwd\\t{%2, %0|%0, %2}\n+   vpunpckhwd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"vec_interleave_lowv8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n \t(vec_select:V8HI\n \t  (vec_concat:V16HI\n-\t    (match_operand:V8HI 1 \"register_operand\" \"0\")\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V8HI 1 \"register_operand\" \"0,x\")\n+\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (parallel [(const_int 0) (const_int 8)\n \t\t     (const_int 1) (const_int 9)\n \t\t     (const_int 2) (const_int 10)\n \t\t     (const_int 3) (const_int 11)])))]\n   \"TARGET_SSE2\"\n-  \"punpcklwd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_interleave_highv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(vec_select:V4SI\n-\t  (vec_concat:V8SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"x\")\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\"))\n-\t  (parallel [(const_int 2) (const_int 6)\n-\t\t     (const_int 3) (const_int 7)])))]\n-  \"TARGET_AVX\"\n-  \"vpunpckhdq\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+  \"@\n+   punpcklwd\\t{%2, %0|%0, %2}\n+   vpunpcklwd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"vec_interleave_highv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n \t(vec_select:V4SI\n \t  (vec_concat:V8SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V4SI 1 \"register_operand\" \"0,x\")\n+\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (parallel [(const_int 2) (const_int 6)\n \t\t     (const_int 3) (const_int 7)])))]\n   \"TARGET_SSE2\"\n-  \"punpckhdq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_interleave_lowv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(vec_select:V4SI\n-\t  (vec_concat:V8SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"x\")\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\"))\n-\t  (parallel [(const_int 0) (const_int 4)\n-\t\t     (const_int 1) (const_int 5)])))]\n-  \"TARGET_AVX\"\n-  \"vpunpckldq\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+  \"@\n+   punpckhdq\\t{%2, %0|%0, %2}\n+   vpunpckhdq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"vec_interleave_lowv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n \t(vec_select:V4SI\n \t  (vec_concat:V8SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V4SI 1 \"register_operand\" \"0,x\")\n+\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,xm\"))\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 1) (const_int 5)])))]\n   \"TARGET_SSE2\"\n-  \"punpckldq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_pinsr<ssevecsize>\"\n-  [(set (match_operand:SSEMODE124 0 \"register_operand\" \"=x\")\n-\t(vec_merge:SSEMODE124\n-\t  (vec_duplicate:SSEMODE124\n-\t    (match_operand:<avxscalarmode> 2 \"nonimmediate_operand\" \"rm\"))\n-\t  (match_operand:SSEMODE124 1 \"register_operand\" \"x\")\n-\t  (match_operand:SI 3 \"const_pow2_1_to_<pinsrbits>_operand\" \"n\")))]\n-  \"TARGET_AVX\"\n-{\n-  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n-  if (MEM_P (operands[2]))\n-    return \"vpinsr<ssevecsize>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n-  else\n-    return \"vpinsr<ssevecsize>\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n-}\n-  [(set_attr \"type\" \"sselog\")\n-   (set (attr \"prefix_extra\")\n-     (if_then_else (match_operand:V8HI 0 \"\" \"\")\n-       (const_string \"0\")\n-       (const_string \"1\")))\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n+  \"@\n+   punpckldq\\t{%2, %0|%0, %2}\n+   vpunpckldq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*sse4_1_pinsrb\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x,x,x\")\n \t(vec_merge:V16QI\n \t  (vec_duplicate:V16QI\n-\t    (match_operand:QI 2 \"nonimmediate_operand\" \"rm\"))\n-\t  (match_operand:V16QI 1 \"register_operand\" \"0\")\n-\t  (match_operand:SI 3 \"const_pow2_1_to_32768_operand\" \"n\")))]\n+\t    (match_operand:QI 2 \"nonimmediate_operand\" \"r,m,r,m\"))\n+\t  (match_operand:V16QI 1 \"register_operand\" \"0,0,x,x\")\n+\t  (match_operand:SI 3 \"const_pow2_1_to_32768_operand\" \"n,n,n,n\")))]\n   \"TARGET_SSE4_1\"\n {\n   operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n-  if (MEM_P (operands[2]))\n-    return \"pinsrb\\t{%3, %2, %0|%0, %2, %3}\";\n-  else\n-    return \"pinsrb\\t{%3, %k2, %0|%0, %k2, %3}\";\n+\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"pinsrb\\t{%3, %k2, %0|%0, %k2, %3}\";\n+    case 1:\n+      return \"pinsrb\\t{%3, %2, %0|%0, %2, %3}\";\n+    case 2:\n+      return \"vpinsrb\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n+    case 3:\n+      return \"vpinsrb\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n-  [(set_attr \"type\" \"sselog\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx,avx\")\n+   (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,vex,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*sse2_pinsrw\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x,x,x\")\n \t(vec_merge:V8HI\n \t  (vec_duplicate:V8HI\n-\t    (match_operand:HI 2 \"nonimmediate_operand\" \"rm\"))\n-\t  (match_operand:V8HI 1 \"register_operand\" \"0\")\n-\t  (match_operand:SI 3 \"const_pow2_1_to_128_operand\" \"n\")))]\n+\t    (match_operand:HI 2 \"nonimmediate_operand\" \"r,m,r,m\"))\n+\t  (match_operand:V8HI 1 \"register_operand\" \"0,0,x,x\")\n+\t  (match_operand:SI 3 \"const_pow2_1_to_128_operand\" \"n,n,n,n\")))]\n   \"TARGET_SSE2\"\n {\n   operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n-  if (MEM_P (operands[2]))\n-    return \"pinsrw\\t{%3, %2, %0|%0, %2, %3}\";\n-  else\n-    return \"pinsrw\\t{%3, %k2, %0|%0, %k2, %3}\";\n+\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"pinsrw\\t{%3, %k2, %0|%0, %k2, %3}\";\n+    case 1:\n+      return \"pinsrw\\t{%3, %2, %0|%0, %2, %3}\";\n+    case 2:\n+      return \"vpinsrw\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n+    case 3:\n+      return \"vpinsrw\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_data16\" \"1,1,*,*\")\n+   (set_attr \"prefix_extra\" \"*,*,1,1\")\n    (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,vex,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; It must come before sse2_loadld since it is preferred.\n (define_insn \"*sse4_1_pinsrd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V4SI\n \t  (vec_duplicate:V4SI\n-\t    (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))\n-\t  (match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t  (match_operand:SI 3 \"const_pow2_1_to_8_operand\" \"n\")))]\n+\t    (match_operand:SI 2 \"nonimmediate_operand\" \"rm,rm\"))\n+\t  (match_operand:V4SI 1 \"register_operand\" \"0,x\")\n+\t  (match_operand:SI 3 \"const_pow2_1_to_8_operand\" \"n,n\")))]\n   \"TARGET_SSE4_1\"\n {\n   operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n-  return \"pinsrd\\t{%3, %2, %0|%0, %2, %3}\";\n-}\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*avx_pinsrq\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(vec_merge:V2DI\n-\t  (vec_duplicate:V2DI\n-\t    (match_operand:DI 2 \"nonimmediate_operand\" \"rm\"))\n-\t  (match_operand:V2DI 1 \"register_operand\" \"x\")\n-\t  (match_operand:SI 3 \"const_pow2_1_to_2_operand\" \"n\")))]\n-  \"TARGET_AVX && TARGET_64BIT\"\n-{\n-  operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n-  return \"vpinsrq\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"pinsrd\\t{%3, %2, %0|%0, %2, %3}\";\n+    case 1:\n+      return \"vpinsrd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n-  [(set_attr \"type\" \"sselog\")\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*sse4_1_pinsrq\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V2DI\n \t  (vec_duplicate:V2DI\n-\t    (match_operand:DI 2 \"nonimmediate_operand\" \"rm\"))\n-\t  (match_operand:V2DI 1 \"register_operand\" \"0\")\n-\t  (match_operand:SI 3 \"const_pow2_1_to_2_operand\" \"n\")))]\n+\t    (match_operand:DI 2 \"nonimmediate_operand\" \"rm,rm\"))\n+\t  (match_operand:V2DI 1 \"register_operand\" \"0,x\")\n+\t  (match_operand:SI 3 \"const_pow2_1_to_2_operand\" \"n,n\")))]\n   \"TARGET_SSE4_1 && TARGET_64BIT\"\n {\n   operands[3] = GEN_INT (exact_log2 (INTVAL (operands[3])));\n-  return \"pinsrq\\t{%3, %2, %0|%0, %2, %3}\";\n+\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"pinsrq\\t{%3, %2, %0|%0, %2, %3}\";\n+    case 1:\n+      return \"vpinsrq\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_rex\" \"1\")\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_rex\" \"1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*sse4_1_pextrb_<mode>\"\n@@ -6603,40 +6502,27 @@\n   \"TARGET_SSE\"\n   \"operands[2] = CONST0_RTX (V4SImode);\")\n \n-(define_insn \"*avx_loadld\"\n-  [(set (match_operand:V4SI 0 \"register_operand\"       \"=x,Yi,x\")\n-\t(vec_merge:V4SI\n-\t  (vec_duplicate:V4SI\n-\t    (match_operand:SI 2 \"nonimmediate_operand\" \"m ,r ,x\"))\n-\t  (match_operand:V4SI 1 \"reg_or_0_operand\"     \"C ,C ,x\")\n-\t  (const_int 1)))]\n-  \"TARGET_AVX\"\n-  \"@\n-   vmovd\\t{%2, %0|%0, %2}\n-   vmovd\\t{%2, %0|%0, %2}\n-   vmovss\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI,TI,V4SF\")])\n-\n (define_insn \"sse2_loadld\"\n-  [(set (match_operand:V4SI 0 \"register_operand\"       \"=Y2,Yi,x,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\"       \"=Y2,Yi,x,x,x\")\n \t(vec_merge:V4SI\n \t  (vec_duplicate:V4SI\n-\t    (match_operand:SI 2 \"nonimmediate_operand\" \"m  ,r ,m,x\"))\n-\t  (match_operand:V4SI 1 \"reg_or_0_operand\"     \"C  ,C ,C,0\")\n+\t    (match_operand:SI 2 \"nonimmediate_operand\" \"m  ,r ,m,x,x\"))\n+\t  (match_operand:V4SI 1 \"reg_or_0_operand\"     \"C  ,C ,C,0,x\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n-   movd\\t{%2, %0|%0, %2}\n-   movd\\t{%2, %0|%0, %2}\n+   %vmovd\\t{%2, %0|%0, %2}\n+   %vmovd\\t{%2, %0|%0, %2}\n    movss\\t{%2, %0|%0, %2}\n-   movss\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"mode\" \"TI,TI,V4SF,SF\")])\n+   movss\\t{%2, %0|%0, %2}\n+   vmovss\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"base,base,noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"maybe_vex,maybe_vex,orig,orig,vex\")\n+   (set_attr \"mode\" \"TI,TI,V4SF,SF,SF\")])\n \n (define_insn_and_split \"sse2_stored\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=mx,r\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=xm,r\")\n \t(vec_select:SI\n \t  (match_operand:V4SI 1 \"register_operand\" \"x,Yi\")\n \t  (parallel [(const_int 0)])))]\n@@ -6673,7 +6559,7 @@\n   \"TARGET_SSE\")\n \n (define_insn \"*sse2_storeq_rex64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=mx,*r,r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=xm,*r,r\")\n \t(vec_select:DI\n \t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"x,Yi,o\")\n \t  (parallel [(const_int 0)])))]\n@@ -6687,7 +6573,7 @@\n    (set_attr \"mode\" \"*,*,DI\")])\n \n (define_insn \"*sse2_storeq\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=mx\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=xm\")\n \t(vec_select:DI\n \t  (match_operand:V2DI 1 \"register_operand\" \"x\")\n \t  (parallel [(const_int 0)])))]\n@@ -6707,80 +6593,49 @@\n   [(set (match_dup 0) (match_dup 1))]\n   \"operands[1] = gen_rtx_REG (DImode, REGNO (operands[1]));\")\n \n-(define_insn \"*vec_extractv2di_1_rex64_avx\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,x,x,r\")\n-\t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"x,x,o,o\")\n-\t  (parallel [(const_int 1)])))]\n-  \"TARGET_64BIT\n-   && TARGET_AVX\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"@\n-   vmovhps\\t{%1, %0|%0, %1}\n-   vpsrldq\\t{$8, %1, %0|%0, %1, 8}\n-   vmovq\\t{%H1, %0|%0, %H1}\n-   vmov{q}\\t{%H1, %0|%0, %H1}\"\n-  [(set_attr \"type\" \"ssemov,sseishft1,ssemov,imov\")\n-   (set_attr \"length_immediate\" \"*,1,*,*\")\n-   (set_attr \"memory\" \"*,none,*,*\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V2SF,TI,TI,DI\")])\n-\n (define_insn \"*vec_extractv2di_1_rex64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,x,x,r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=m,x,x,x,r\")\n \t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"x,0,o,o\")\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \" x,0,x,o,o\")\n \t  (parallel [(const_int 1)])))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n-   movhps\\t{%1, %0|%0, %1}\n+   %vmovhps\\t{%1, %0|%0, %1}\n    psrldq\\t{$8, %0|%0, 8}\n-   movq\\t{%H1, %0|%0, %H1}\n-   mov{q}\\t{%H1, %0|%0, %H1}\"\n-  [(set_attr \"type\" \"ssemov,sseishft1,ssemov,imov\")\n-   (set_attr \"length_immediate\" \"*,1,*,*\")\n-   (set_attr \"memory\" \"*,none,*,*\")\n-   (set_attr \"mode\" \"V2SF,TI,TI,DI\")])\n-\n-(define_insn \"*vec_extractv2di_1_avx\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,x,x\")\n-\t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"x,x,o\")\n-\t  (parallel [(const_int 1)])))]\n-  \"!TARGET_64BIT\n-   && TARGET_AVX\n-   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"@\n-   vmovhps\\t{%1, %0|%0, %1}\n    vpsrldq\\t{$8, %1, %0|%0, %1, 8}\n-   vmovq\\t{%H1, %0|%0, %H1}\"\n-  [(set_attr \"type\" \"ssemov,sseishft1,ssemov\")\n-   (set_attr \"length_immediate\" \"*,1,*\")\n-   (set_attr \"memory\" \"*,none,*\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"V2SF,TI,TI\")])\n+   %vmovq\\t{%H1, %0|%0, %H1}\n+   %vmov{q}\\t{%H1, %0|%0, %H1}\"\n+  [(set_attr \"isa\" \"base,noavx,avx,base,base\")\n+   (set_attr \"type\" \"ssemov,sseishft1,sseishft1,ssemov,imov\")\n+   (set_attr \"length_immediate\" \"*,1,1,*,*\")\n+   (set_attr \"memory\" \"*,none,none,*,*\")\n+   (set_attr \"prefix\" \"maybe_vex,orig,vex,maybe_vex,maybe_vex\")\n+   (set_attr \"mode\" \"V2SF,TI,TI,TI,DI\")])\n \n (define_insn \"*vec_extractv2di_1_sse2\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,x,x\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=m,x,x,x\")\n \t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"x,0,o\")\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \" x,0,x,o\")\n \t  (parallel [(const_int 1)])))]\n   \"!TARGET_64BIT\n    && TARGET_SSE2 && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n-   movhps\\t{%1, %0|%0, %1}\n+   %vmovhps\\t{%1, %0|%0, %1}\n    psrldq\\t{$8, %0|%0, 8}\n-   movq\\t{%H1, %0|%0, %H1}\"\n-  [(set_attr \"type\" \"ssemov,sseishft1,ssemov\")\n-   (set_attr \"length_immediate\" \"*,1,*\")\n-   (set_attr \"memory\" \"*,none,*\")\n-   (set_attr \"mode\" \"V2SF,TI,TI\")])\n+   vpsrldq\\t{$8, %1, %0|%0, %1, 8}\n+   %vmovq\\t{%H1, %0|%0, %H1}\"\n+  [(set_attr \"isa\" \"base,noavx,avx,base\")\n+   (set_attr \"type\" \"ssemov,sseishft1,sseishft1,ssemov\")\n+   (set_attr \"length_immediate\" \"*,1,1,*\")\n+   (set_attr \"memory\" \"*,none,none,*\")\n+   (set_attr \"prefix\" \"maybe_vex,orig,vex,maybe_vex\")\n+   (set_attr \"mode\" \"V2SF,TI,TI,TI\")])\n \n ;; Not sure this is ever used, but it doesn't hurt to have it. -aoliva\n (define_insn \"*vec_extractv2di_1_sse\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,x,x\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=m,x,x\")\n \t(vec_select:DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"x,x,o\")\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \" x,x,o\")\n \t  (parallel [(const_int 1)])))]\n   \"!TARGET_SSE2 && TARGET_SSE\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n@@ -6792,9 +6647,9 @@\n    (set_attr \"mode\" \"V2SF,V4SF,V2SF\")])\n \n (define_insn \"*vec_dupv4si_avx\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\"     \"=x,x\")\n \t(vec_duplicate:V4SI\n-\t  (match_operand:SI 1 \"register_operand\" \"x,m\")))]\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \" x,m\")))]\n   \"TARGET_AVX\"\n   \"@\n    vpshufd\\t{$0, %1, %0|%0, %1, 0}\n@@ -6811,34 +6666,25 @@\n \t  (match_operand:SI 1 \"register_operand\" \" Y2,0\")))]\n   \"TARGET_SSE\"\n   \"@\n-   %vpshufd\\t{$0, %1, %0|%0, %1, 0}\n+   pshufd\\t{$0, %1, %0|%0, %1, 0}\n    shufps\\t{$0, %0, %0|%0, %0, 0}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI,V4SF\")])\n \n-(define_insn \"*vec_dupv2di_avx\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=x,x\")\n-\t(vec_duplicate:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \" x,m\")))]\n-  \"TARGET_AVX\"\n-  \"@\n-   vpunpcklqdq\\t{%1, %1, %0|%0, %1, %1}\n-   vmovddup\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sselog1\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI,DF\")])\n-\n (define_insn \"*vec_dupv2di_sse3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\"     \"=x,x,x\")\n \t(vec_duplicate:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \" 0,m\")))]\n+\t  (match_operand:DI 1 \"nonimmediate_operand\" \" 0,x,m\")))]\n   \"TARGET_SSE3\"\n   \"@\n    punpcklqdq\\t%0, %0\n-   movddup\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sselog1\")\n-   (set_attr \"mode\" \"TI,DF\")])\n+   vpunpcklqdq\\t{%d1, %0|%0, %d1}\n+   %vmovddup\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"isa\" \"noavx,avx,base\")\n+   (set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix\" \"orig,vex,maybe_vex\")\n+   (set_attr \"mode\" \"TI,TI,DF\")])\n \n (define_insn \"*vec_dupv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=Y2,x\")\n@@ -6851,43 +6697,26 @@\n   [(set_attr \"type\" \"sselog1,ssemov\")\n    (set_attr \"mode\" \"TI,V4SF\")])\n \n-(define_insn \"*vec_concatv2si_avx\"\n-  [(set (match_operand:V2SI 0 \"register_operand\"     \"=x,x,x ,*y ,*y\")\n-\t(vec_concat:V2SI\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \"x ,x,rm, 0 ,rm\")\n-\t  (match_operand:SI 2 \"vector_move_operand\"  \"rm,x,C ,*ym,C\")))]\n-  \"TARGET_AVX\"\n-  \"@\n-   vpinsrd\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\n-   vpunpckldq\\t{%2, %1, %0|%0, %1, %2}\n-   vmovd\\t{%1, %0|%0, %1}\n-   punpckldq\\t{%2, %0|%0, %2}\n-   movd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sselog,sselog,ssemov,mmxcvt,mmxmov\")\n-   (set_attr \"prefix_extra\" \"1,*,*,*,*\")\n-   (set_attr \"length_immediate\" \"1,*,*,*,*\")\n-   (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"3,4\")\n-       (const_string \"orig\")\n-       (const_string \"vex\")))\n-   (set_attr \"mode\" \"TI,TI,TI,DI,DI\")])\n-\n (define_insn \"*vec_concatv2si_sse4_1\"\n-  [(set (match_operand:V2SI 0 \"register_operand\"     \"=x,x,x ,*y ,*y\")\n+  [(set (match_operand:V2SI 0 \"register_operand\"     \"=x, x,x,x, x, *y,*y\")\n \t(vec_concat:V2SI\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \"0 ,0,rm, 0 ,rm\")\n-\t  (match_operand:SI 2 \"vector_move_operand\"  \"rm,x,C ,*ym,C\")))]\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \" 0, x,0,x,rm,  0,rm\")\n+\t  (match_operand:SI 2 \"vector_move_operand\"  \"rm,rm,x,x, C,*ym, C\")))]\n   \"TARGET_SSE4_1\"\n   \"@\n    pinsrd\\t{$0x1, %2, %0|%0, %2, 0x1}\n+   vpinsrd\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\n    punpckldq\\t{%2, %0|%0, %2}\n-   movd\\t{%1, %0|%0, %1}\n+   vpunpckldq\\t{%2, %1, %0|%0, %1, %2}\n+   %vmovd\\t{%1, %0|%0, %1}\n    punpckldq\\t{%2, %0|%0, %2}\n    movd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sselog,sselog,ssemov,mmxcvt,mmxmov\")\n-   (set_attr \"prefix_extra\" \"1,*,*,*,*\")\n-   (set_attr \"length_immediate\" \"1,*,*,*,*\")\n-   (set_attr \"mode\" \"TI,TI,TI,DI,DI\")])\n+  [(set_attr \"isa\" \"noavx,avx,noavx,avx,base,base,base\")\n+   (set_attr \"type\" \"sselog,sselog,sselog,sselog,ssemov,mmxcvt,mmxmov\")\n+   (set_attr \"prefix_extra\" \"1,1,*,*,*,*,*\")\n+   (set_attr \"length_immediate\" \"1,1,*,*,*,*,*\")\n+   (set_attr \"prefix\" \"orig,vex,orig,vex,maybe_vex,orig,orig\")\n+   (set_attr \"mode\" \"TI,TI,TI,TI,TI,DI,DI\")])\n \n ;; ??? In theory we can match memory for the MMX alternative, but allowing\n ;; nonimmediate_operand for operand 2 and *not* allowing memory for the SSE\n@@ -6946,90 +6775,47 @@\n   [(set_attr \"type\" \"sselog,ssemov,ssemov\")\n    (set_attr \"mode\" \"TI,V4SF,V2SF\")])\n \n-(define_insn \"*vec_concatv2di_avx\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=x,?x,x,x\")\n-\t(vec_concat:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \" m,*y,x,x\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"  \" C, C,x,m\")))]\n-  \"!TARGET_64BIT && TARGET_AVX\"\n-  \"@\n-   vmovq\\t{%1, %0|%0, %1}\n-   movq2dq\\t{%1, %0|%0, %1}\n-   vpunpcklqdq\\t{%2, %1, %0|%0, %1, %2}\n-   vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"ssemov,ssemov,sselog,ssemov\")\n-   (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"1\")\n-       (const_string \"orig\")\n-       (const_string \"vex\")))\n-   (set_attr \"mode\" \"TI,TI,TI,V2SF\")])\n-\n-(define_insn \"vec_concatv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2 ,?Y2,Y2,x,x\")\n-\t(vec_concat:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \" mY2,*y ,0 ,0,0\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"  \" C  ,  C,Y2,x,m\")))]\n-  \"!TARGET_64BIT && TARGET_SSE\"\n-  \"@\n-   movq\\t{%1, %0|%0, %1}\n-   movq2dq\\t{%1, %0|%0, %1}\n-   punpcklqdq\\t{%2, %0|%0, %2}\n-   movlhps\\t{%2, %0|%0, %2}\n-   movhps\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssemov,ssemov,sselog,ssemov,ssemov\")\n-   (set_attr \"mode\" \"TI,TI,TI,V4SF,V2SF\")])\n-\n-(define_insn \"*vec_concatv2di_rex64_avx\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=x,x,Yi,!x,x,x\")\n-\t(vec_concat:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \" x,m,r ,*y,x,x\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"  \"rm,C,C ,C ,x,m\")))]\n-  \"TARGET_64BIT && TARGET_AVX\"\n-  \"@\n-   vpinsrq\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\n-   vmovq\\t{%1, %0|%0, %1}\n-   vmovq\\t{%1, %0|%0, %1}\n-   movq2dq\\t{%1, %0|%0, %1}\n-   vpunpcklqdq\\t{%2, %1, %0|%0, %1, %2}\n-   vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sselog,ssemov,ssemov,ssemov,sselog,ssemov\")\n-   (set_attr \"prefix_extra\" \"1,*,*,*,*,*\")\n-   (set_attr \"length_immediate\" \"1,*,*,*,*,*\")\n-   (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"3\")\n-       (const_string \"orig\")\n-       (const_string \"vex\")))\n-   (set_attr \"mode\" \"TI,TI,TI,TI,TI,V2SF\")])\n-\n (define_insn \"*vec_concatv2di_rex64_sse4_1\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=x ,x ,Yi,!x,x,x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\"\n+\t  \"=x, x, x,Yi,!x,x,x,x,x\")\n \t(vec_concat:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \" 0 ,mx,r ,*y,0,0,0\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"  \" rm,C ,C ,C ,x,x,m\")))]\n+\t  (match_operand:DI 1 \"nonimmediate_operand\"\n+\t  \" 0, x,xm,r ,*y,0,x,0,x\")\n+\t  (match_operand:DI 2 \"vector_move_operand\"\n+\t  \"rm,rm, C,C ,C ,x,x,m,m\")))]\n   \"TARGET_64BIT && TARGET_SSE4_1\"\n   \"@\n    pinsrq\\t{$0x1, %2, %0|%0, %2, 0x1}\n-   movq\\t{%1, %0|%0, %1}\n-   movd\\t{%1, %0|%0, %1}\n+   vpinsrq\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\n+   %vmovq\\t{%1, %0|%0, %1}\n+   %vmovq\\t{%1, %0|%0, %1}\n    movq2dq\\t{%1, %0|%0, %1}\n    punpcklqdq\\t{%2, %0|%0, %2}\n-   movlhps\\t{%2, %0|%0, %2}\n-   movhps\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sselog,ssemov,ssemov,ssemov,sselog,ssemov,ssemov\")\n-   (set_attr \"prefix_rex\" \"1,*,1,*,*,*,*\")\n-   (set_attr \"prefix_extra\" \"1,*,*,*,*,*,*\")\n-   (set_attr \"length_immediate\" \"1,*,*,*,*,*,*\")\n-   (set_attr \"mode\" \"TI,TI,TI,TI,TI,V4SF,V2SF\")])\n+   vpunpcklqdq\\t{%2, %1, %0|%0, %1, %2}\n+   movhps\\t{%2, %0|%0, %2}\n+   vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx,base,base,base,noavx,avx,noavx,avx\")\n+   (set_attr \"type\" \"sselog,sselog,ssemov,ssemov,ssemov,sselog,sselog,ssemov,ssemov\")\n+   (set (attr \"prefix_rex\")\n+     (if_then_else\n+       (and (eq_attr \"alternative\" \"0,3\")\n+\t    (eq (symbol_ref \"TARGET_AVX\") (const_int 0)))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n+   (set_attr \"prefix_extra\" \"1,1,*,*,*,*,*,*,*\")\n+   (set_attr \"length_immediate\" \"1,1,*,*,*,*,*,*,*\")\n+   (set_attr \"prefix\" \"orig,vex,maybe_vex,maybe_vex,orig,orig,vex,orig,vex\")\n+   (set_attr \"mode\" \"TI,TI,TI,TI,TI,TI,TI,V2SF,V2SF\")])\n \n (define_insn \"*vec_concatv2di_rex64_sse\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2 ,Yi,!Y2,Y2,x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2,Yi,!Y2,Y2,x,x\")\n \t(vec_concat:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \" mY2,r ,*y ,0 ,0,0\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"  \" C  ,C ,C  ,Y2,x,m\")))]\n+\t  (match_operand:DI 1 \"nonimmediate_operand\" \"Y2m,r ,*y ,0 ,0,0\")\n+\t  (match_operand:DI 2 \"vector_move_operand\"  \" C ,C ,C  ,Y2,x,m\")))]\n   \"TARGET_64BIT && TARGET_SSE\"\n   \"@\n    movq\\t{%1, %0|%0, %1}\n-   movd\\t{%1, %0|%0, %1}\n+   movq\\t{%1, %0|%0, %1}\n    movq2dq\\t{%1, %0|%0, %1}\n    punpcklqdq\\t{%2, %0|%0, %2}\n    movlhps\\t{%2, %0|%0, %2}\n@@ -7038,6 +6824,25 @@\n    (set_attr \"prefix_rex\" \"*,1,*,*,*,*\")\n    (set_attr \"mode\" \"TI,TI,TI,TI,V4SF,V2SF\")])\n \n+(define_insn \"vec_concatv2di\"\n+  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2,?Y2,Y2,x,x,x,x\")\n+\t(vec_concat:V2DI\n+\t  (match_operand:DI 1 \"nonimmediate_operand\" \"Y2m,*y , 0,x,0,0,x\")\n+\t  (match_operand:DI 2 \"vector_move_operand\"  \" C , C ,Y2,x,x,m,m\")))]\n+  \"!TARGET_64BIT && TARGET_SSE\"\n+  \"@\n+   %vmovq\\t{%1, %0|%0, %1}\n+   movq2dq\\t{%1, %0|%0, %1}\n+   punpcklqdq\\t{%2, %0|%0, %2}\n+   vpunpcklqdq\\t{%2, %1, %0|%0, %1, %2}\n+   movlhps\\t{%2, %0|%0, %2}\n+   movhps\\t{%2, %0|%0, %2}\n+   vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"base,base,noavx,avx,noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov,ssemov,sselog,sselog,ssemov,ssemov,ssemov\")\n+   (set_attr \"prefix\" \"maybe_vex,orig,orig,vex,orig,orig,vex\")\n+   (set_attr \"mode\" \"TI,TI,TI,TI,V4SF,V2SF,V2SF\")])\n+\n (define_expand \"vec_unpacku_hi_v16qi\"\n   [(match_operand:V8HI 0 \"register_operand\" \"\")\n    (match_operand:V16QI 1 \"register_operand\" \"\")]"}]}