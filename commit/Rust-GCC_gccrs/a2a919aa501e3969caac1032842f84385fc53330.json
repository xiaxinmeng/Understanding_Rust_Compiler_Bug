{"sha": "a2a919aa501e3969caac1032842f84385fc53330", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJhOTE5YWE1MDFlMzk2OWNhYWMxMDMyODQyZjg0Mzg1ZmM1MzMzMA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-08-28T22:00:45Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-08-28T22:00:45Z"}, "message": "builtin-types.def (BT_INT_PTR, [...]): New.\n\n\t* builtin-types.def (BT_INT_PTR, BT_FLOAT_PTR, BT_DOUBLE_PTR,\n\tBT_LONGDOUBLE_PTR, BT_FN_FLOAT_FLOAT_FLOATPTR,\n\tBT_FN_DOUBLE_DOUBLE_DOUBLEPTR,\n\tBT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLEPTR,\n\tBT_FN_FLOAT_FLOAT_INTPTR, BT_FN_DOUBLE_DOUBLE_INTPTR,\n\tBT_FN_LONGDOUBLE_LONGDOUBLE_INTPTR,\n\tBT_FN_FLOAT_FLOAT_FLOAT_INTPTR, BT_FN_DOUBLE_DOUBLE_DOUBLE_INTPTR,\n\tBT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_INTPTR,\n\tBT_FN_VOID_FLOAT_FLOATPTR_FLOATPTR,\n\tBT_FN_VOID_DOUBLE_DOUBLEPTR_DOUBLEPTR,\n\tBT_FN_VOID_LONGDOUBLE_LONGDOUBLEPTR_LONGDOUBLEPTR): New.\n\t* builtins.def (BUILT_IN_FREXP, BUILT_IN_FREXPF, BUILT_IN_FREXPL,\n\tBUILT_IN_MODF, BUILT_IN_MODFF, BUILT_IN_MODFL, BUILT_IN_REMQUO,\n\tBUILT_IN_REMQUOF, BUILT_IN_REMQUOL, BUILT_IN_SINCOS,\n\tBUILT_IN_SINCOSF, BUILT_IN_SINCOSL): New.\n\t* tree.c: Assign new type_nodes.\n\t* tree.h (tree_index): Add TI_FLOAT_PTR_TYPE, TI_DOUBLE_PTR_TYPE,\n\tTI_LONG_DOUBLE_PTR_TYPE, TI_INTEGER_PTR_TYPE.\n\t(float_ptr_type_node, double_ptr_type_node,\n\tlong_double_ptr_type_node, integer_ptr_type_node): New type_nodes.\n\n\t* doc/extend.texi: Document new builtins.\n\ntestsuite:\n\t* gcc.dg/builtins-1.c: Add new builtin cases.\n\nFrom-SVN: r70890", "tree": {"sha": "451e1dd81a01cb687f9656fc6cb9a2a00cd3f030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/451e1dd81a01cb687f9656fc6cb9a2a00cd3f030"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2a919aa501e3969caac1032842f84385fc53330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a919aa501e3969caac1032842f84385fc53330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2a919aa501e3969caac1032842f84385fc53330", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a919aa501e3969caac1032842f84385fc53330/comments", "author": null, "committer": null, "parents": [{"sha": "488f17e1fcdadb336f33f89e3c242898e070d1e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/488f17e1fcdadb336f33f89e3c242898e070d1e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/488f17e1fcdadb336f33f89e3c242898e070d1e3"}], "stats": {"total": 169, "additions": 146, "deletions": 23}, "files": [{"sha": "2d5ec00dc13cb6581a08e51faf9639de796af948", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a919aa501e3969caac1032842f84385fc53330/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a919aa501e3969caac1032842f84385fc53330/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2a919aa501e3969caac1032842f84385fc53330", "patch": "@@ -1,3 +1,28 @@\n+2003-08-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtin-types.def (BT_INT_PTR, BT_FLOAT_PTR, BT_DOUBLE_PTR,\n+\tBT_LONGDOUBLE_PTR, BT_FN_FLOAT_FLOAT_FLOATPTR,\n+\tBT_FN_DOUBLE_DOUBLE_DOUBLEPTR,\n+\tBT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLEPTR,\n+\tBT_FN_FLOAT_FLOAT_INTPTR, BT_FN_DOUBLE_DOUBLE_INTPTR,\n+\tBT_FN_LONGDOUBLE_LONGDOUBLE_INTPTR,\n+\tBT_FN_FLOAT_FLOAT_FLOAT_INTPTR, BT_FN_DOUBLE_DOUBLE_DOUBLE_INTPTR,\n+\tBT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_INTPTR,\n+\tBT_FN_VOID_FLOAT_FLOATPTR_FLOATPTR,\n+\tBT_FN_VOID_DOUBLE_DOUBLEPTR_DOUBLEPTR,\n+\tBT_FN_VOID_LONGDOUBLE_LONGDOUBLEPTR_LONGDOUBLEPTR): New.\n+\t* builtins.def (BUILT_IN_FREXP, BUILT_IN_FREXPF, BUILT_IN_FREXPL,\n+\tBUILT_IN_MODF, BUILT_IN_MODFF, BUILT_IN_MODFL, BUILT_IN_REMQUO,\n+\tBUILT_IN_REMQUOF, BUILT_IN_REMQUOL, BUILT_IN_SINCOS,\n+\tBUILT_IN_SINCOSF, BUILT_IN_SINCOSL): New.\n+\t* tree.c: Assign new type_nodes.\n+\t* tree.h (tree_index): Add TI_FLOAT_PTR_TYPE, TI_DOUBLE_PTR_TYPE,\n+\tTI_LONG_DOUBLE_PTR_TYPE, TI_INTEGER_PTR_TYPE.\n+\t(float_ptr_type_node, double_ptr_type_node,\n+\tlong_double_ptr_type_node, integer_ptr_type_node): New type_nodes. \n+\t\n+\t* doc/extend.texi: Document new builtins.\n+\n 2003-08-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtin-types.def (BT_FN_FLOAT_INT_FLOAT,"}, {"sha": "0329dfd97a9f4689ba6f6bcb02faf9d4be0dd812", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=a2a919aa501e3969caac1032842f84385fc53330", "patch": "@@ -75,6 +75,10 @@ DEF_PRIMITIVE_TYPE (BT_COMPLEX_LONGDOUBLE, complex_long_double_type_node)\n DEF_PRIMITIVE_TYPE (BT_PTR, ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_CONST_PTR, const_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_PTRMODE, (*lang_hooks.types.type_for_mode)(ptr_mode, 0))\n+DEF_PRIMITIVE_TYPE (BT_INT_PTR, integer_ptr_type_node)\n+DEF_PRIMITIVE_TYPE (BT_FLOAT_PTR, float_ptr_type_node)\n+DEF_PRIMITIVE_TYPE (BT_DOUBLE_PTR, double_ptr_type_node)\n+DEF_PRIMITIVE_TYPE (BT_LONGDOUBLE_PTR, long_double_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_SIZE, size_type_node)\n DEF_PRIMITIVE_TYPE (BT_SSIZE, signed_size_type_node)\n DEF_PRIMITIVE_TYPE (BT_STRING, string_type_node)\n@@ -170,6 +174,12 @@ DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_DOUBLE,\n \t\t     BT_DOUBLE, BT_DOUBLE, BT_DOUBLE)\n DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE,\n \t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_FLOAT_FLOATPTR,\n+\t\t     BT_FLOAT, BT_FLOAT, BT_FLOAT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_DOUBLEPTR,\n+\t\t     BT_DOUBLE, BT_DOUBLE, BT_DOUBLE_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLEPTR,\n+\t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONGDOUBLE_PTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_FLOAT_LONGDOUBLE,\n \t\t     BT_FLOAT, BT_FLOAT, BT_LONGDOUBLE)\n DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_LONGDOUBLE,\n@@ -180,6 +190,12 @@ DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_INT,\n \t\t     BT_DOUBLE, BT_DOUBLE, BT_INT)\n DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_LONGDOUBLE_INT,\n \t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_FLOAT_INTPTR,\n+\t\t     BT_FLOAT, BT_FLOAT, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_INTPTR,\n+\t\t     BT_DOUBLE, BT_DOUBLE, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_LONGDOUBLE_INTPTR,\n+\t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_INT_PTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_INT_FLOAT,\n \t\t     BT_FLOAT, BT_INT, BT_FLOAT)\n DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_INT_DOUBLE,\n@@ -225,6 +241,18 @@ DEF_FUNCTION_TYPE_3 (BT_FN_DOUBLE_DOUBLE_DOUBLE_DOUBLE,\n \t\t     BT_DOUBLE, BT_DOUBLE, BT_DOUBLE, BT_DOUBLE)\n DEF_FUNCTION_TYPE_3 (BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE,\n \t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT_FLOAT_FLOAT_INTPTR,\n+\t\t     BT_FLOAT, BT_FLOAT, BT_FLOAT, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_DOUBLE_DOUBLE_DOUBLE_INTPTR,\n+\t\t     BT_DOUBLE, BT_DOUBLE, BT_DOUBLE, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_INTPTR,\n+\t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONGDOUBLE, BT_INT_PTR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_VOID_FLOAT_FLOATPTR_FLOATPTR,\n+\t\t     BT_VOID, BT_FLOAT, BT_FLOAT_PTR, BT_FLOAT_PTR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_VOID_DOUBLE_DOUBLEPTR_DOUBLEPTR,\n+\t\t     BT_VOID, BT_DOUBLE, BT_DOUBLE_PTR, BT_DOUBLE_PTR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_VOID_LONGDOUBLE_LONGDOUBLEPTR_LONGDOUBLEPTR,\n+\t\t     BT_VOID, BT_LONGDOUBLE, BT_LONGDOUBLE_PTR, BT_LONGDOUBLE_PTR)\n \n DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR,\n \t\t     BT_SIZE, BT_CONST_PTR, BT_SIZE, BT_SIZE, BT_PTR)"}, {"sha": "7de6992a17b723e76d671aef9f4378097aa7afa3", "filename": "gcc/builtins.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=a2a919aa501e3969caac1032842f84385fc53330", "patch": "@@ -221,6 +221,9 @@ DEF_C99_BUILTIN        (BUILT_IN_FMINL, \"fminl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LON\n DEF_LIB_BUILTIN        (BUILT_IN_FMOD, \"fmod\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FMODF, \"fmodf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FMODL, \"fmodl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_LIB_BUILTIN        (BUILT_IN_FREXP, \"frexp\", BT_FN_DOUBLE_DOUBLE_INTPTR, ATTR_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_FREXPF, \"frexpf\", BT_FN_FLOAT_FLOAT_INTPTR, ATTR_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_FREXPL, \"frexpl\", BT_FN_LONGDOUBLE_LONGDOUBLE_INTPTR, ATTR_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMA, \"gamma\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMAF, \"gammaf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMAL, \"gammal\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n@@ -278,6 +281,9 @@ DEF_C99_BUILTIN        (BUILT_IN_LRINTL, \"lrintl\", BT_FN_LONG_LONGDOUBLE, ATTR_M\n DEF_C99_BUILTIN        (BUILT_IN_LROUND, \"lround\", BT_FN_LONG_DOUBLE, ATTR_MATHFN_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LROUNDF, \"lroundf\", BT_FN_LONG_FLOAT, ATTR_MATHFN_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_LROUNDL, \"lroundl\", BT_FN_LONG_LONGDOUBLE, ATTR_MATHFN_ERRNO)\n+DEF_LIB_BUILTIN        (BUILT_IN_MODF, \"modf\", BT_FN_DOUBLE_DOUBLE_DOUBLEPTR, ATTR_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_MODFF, \"modff\", BT_FN_FLOAT_FLOAT_FLOATPTR, ATTR_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_MODFL, \"modfl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLEPTR, ATTR_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_NAN, \"nan\", BT_FN_DOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL_1)\n DEF_LIB_BUILTIN        (BUILT_IN_NANF, \"nanf\", BT_FN_FLOAT_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL_1)\n DEF_LIB_BUILTIN        (BUILT_IN_NANL, \"nanl\", BT_FN_LONGDOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL_1)\n@@ -302,6 +308,9 @@ DEF_C99_C90RES_BUILTIN (BUILT_IN_POWL, \"powl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGD\n DEF_C99_BUILTIN        (BUILT_IN_REMAINDER, \"remainder\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_REMAINDERF, \"remainderf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_REMAINDERL, \"remainderl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_REMQUO, \"remquo\", BT_FN_DOUBLE_DOUBLE_DOUBLE_INTPTR, ATTR_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_REMQUOF, \"remquof\", BT_FN_FLOAT_FLOAT_FLOAT_INTPTR, ATTR_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_REMQUOL, \"remquol\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_INTPTR, ATTR_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_RINT, \"rint\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_RINTF, \"rintf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_RINTL, \"rintl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n@@ -321,6 +330,9 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNIFICAND, \"significand\", BT_FN_DOUBLE_DOUBLE\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNIFICANDF, \"significandf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNIFICANDL, \"significandl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_SIN, \"sin\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SINCOS, \"sincos\", BT_FN_VOID_DOUBLE_DOUBLEPTR_DOUBLEPTR, ATTR_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SINCOSF, \"sincosf\", BT_FN_VOID_FLOAT_FLOATPTR_FLOATPTR, ATTR_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SINCOSL, \"sincosl\", BT_FN_VOID_LONGDOUBLE_LONGDOUBLEPTR_LONGDOUBLEPTR, ATTR_NOTHROW_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SINF, \"sinf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_LIB_BUILTIN        (BUILT_IN_SINH, \"sinh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SINHF, \"sinhf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)"}, {"sha": "0edf2cf45ac2530c094a2308cf657de409ac03d6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a2a919aa501e3969caac1032842f84385fc53330", "patch": "@@ -4831,6 +4831,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex fprintf_unlocked\n @findex fputs\n @findex fputs_unlocked\n+@findex frexp\n+@findex frexpf\n+@findex frexpl\n @findex fscanf\n @findex gamma\n @findex gammaf\n@@ -4893,6 +4896,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex memcpy\n @findex mempcpy\n @findex memset\n+@findex modf\n+@findex modff\n+@findex modfl\n @findex nearbyint\n @findex nearbyintf\n @findex nearbyintl\n@@ -4915,6 +4921,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex remainder\n @findex remainderf\n @findex remainderl\n+@findex remquo\n+@findex remquof\n+@findex remquol\n @findex rindex\n @findex rint\n @findex rintf\n@@ -4935,6 +4944,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex significandf\n @findex significandl\n @findex sin\n+@findex sincos\n+@findex sincosf\n+@findex sincosl\n @findex sinf\n @findex sinh\n @findex sinhf\n@@ -5023,9 +5035,9 @@ Outside strict ISO C mode (@option{-ansi}, @option{-std=c89} or\n @code{pow10f}, @code{pow10l}, @code{pow10}, @code{printf_unlocked},\n @code{rindex}, @code{scalbf}, @code{scalbl}, @code{scalb},\n @code{significandf}, @code{significandl}, @code{significand},\n-@code{stpcpy}, @code{strdup}, @code{strfmon}, @code{y0f}, @code{y0l},\n-@code{y0}, @code{y1f}, @code{y1l}, @code{y1}, @code{ynf}, @code{ynl} and\n-@code{yn}\n+@code{sincosf}, @code{sincosl}, @code{sincos}, @code{stpcpy},\n+@code{strdup}, @code{strfmon}, @code{y0f}, @code{y0l}, @code{y0},\n+@code{y1f}, @code{y1l}, @code{y1}, @code{ynf}, @code{ynl} and @code{yn}\n may be handled as built-in functions.\n All these functions have corresponding versions\n prefixed with @code{__builtin_}, which may be used even in strict C89\n@@ -5053,13 +5065,13 @@ The ISO C99 functions\n @code{nearbyintf}, @code{nearbyintl}, @code{nearbyint},\n @code{nextafterf}, @code{nextafterl}, @code{nextafter},\n @code{nexttowardf}, @code{nexttowardl}, @code{nexttoward},\n-@code{remainderf}, @code{remainderl}, @code{remainder}, @code{rintf},\n-@code{rintl}, @code{rint}, @code{roundf}, @code{roundl}, @code{round},\n-@code{scalblnf}, @code{scalblnl}, @code{scalbln}, @code{scalbnf},\n-@code{scalbnl}, @code{scalbn}, @code{snprintf}, @code{tgammaf},\n-@code{tgammal}, @code{tgamma}, @code{truncf}, @code{truncl},\n-@code{trunc}, @code{vfscanf}, @code{vscanf}, @code{vsnprintf} and\n-@code{vsscanf},\n+@code{remainderf}, @code{remainderl}, @code{remainder}, @code{remquof},\n+@code{remquol}, @code{remquo}, @code{rintf}, @code{rintl}, @code{rint},\n+@code{roundf}, @code{roundl}, @code{round}, @code{scalblnf},\n+@code{scalblnl}, @code{scalbln}, @code{scalbnf}, @code{scalbnl},\n+@code{scalbn}, @code{snprintf}, @code{tgammaf}, @code{tgammal},\n+@code{tgamma}, @code{truncf}, @code{truncl}, @code{trunc},\n+@code{vfscanf}, @code{vscanf}, @code{vsnprintf} and @code{vsscanf},\n are handled as built-in functions\n except in strict ISO C90 mode (@option{-ansi} or @option{-std=c89}).\n \n@@ -5068,10 +5080,11 @@ There are also built-in versions of the ISO C99 functions\n @code{atan2l}, @code{atanf}, @code{atanl}, @code{ceilf}, @code{ceill},\n @code{cosf}, @code{coshf}, @code{coshl}, @code{cosl}, @code{expf},\n @code{expl}, @code{fabsf}, @code{fabsl}, @code{floorf}, @code{floorl},\n-@code{fmodf}, @code{fmodl}, @code{ldexpf}, @code{ldexpl}, @code{log10f},\n-@code{log10l}, @code{logf}, @code{logl}, @code{powf}, @code{powl},\n-@code{sinf}, @code{sinhf}, @code{sinhl}, @code{sinl}, @code{sqrtf},\n-@code{sqrtl}, @code{tanf}, @code{tanhf}, @code{tanhl} and @code{tanl}\n+@code{fmodf}, @code{fmodl}, @code{frexpf}, @code{frexpl}, @code{ldexpf},\n+@code{ldexpl}, @code{log10f}, @code{log10l}, @code{logf}, @code{logl},\n+@code{modfl}, @code{modf}, @code{powf}, @code{powl}, @code{sinf},\n+@code{sinhf}, @code{sinhl}, @code{sinl}, @code{sqrtf}, @code{sqrtl},\n+@code{tanf}, @code{tanhf}, @code{tanhl} and @code{tanl}\n that are recognized in any mode since ISO C90 reserves these names for\n the purpose to which ISO C99 puts them.  All these functions have\n corresponding versions prefixed with @code{__builtin_}.\n@@ -5080,15 +5093,16 @@ The ISO C90 functions\n @code{abort}, @code{abs}, @code{acos}, @code{asin}, @code{atan2},\n @code{atan}, @code{calloc}, @code{ceil}, @code{cosh}, @code{cos},\n @code{exit}, @code{exp}, @code{fabs}, @code{floor}, @code{fmod},\n-@code{fprintf}, @code{fputs}, @code{fscanf}, @code{labs}, @code{ldexp},\n-@code{log10}, @code{log}, @code{malloc}, @code{memcmp}, @code{memcpy},\n-@code{memset}, @code{pow}, @code{printf}, @code{putchar}, @code{puts},\n-@code{scanf}, @code{sinh}, @code{sin}, @code{snprintf}, @code{sprintf},\n-@code{sqrt}, @code{sscanf}, @code{strcat}, @code{strchr}, @code{strcmp},\n-@code{strcpy}, @code{strcspn}, @code{strlen}, @code{strncat},\n-@code{strncmp}, @code{strncpy}, @code{strpbrk}, @code{strrchr},\n-@code{strspn}, @code{strstr}, @code{tanh}, @code{tan}, @code{vfprintf},\n-@code{vprintf} and @code{vsprintf},\n+@code{fprintf}, @code{fputs}, @code{frexp}, @code{fscanf}, @code{labs},\n+@code{ldexp}, @code{log10}, @code{log}, @code{malloc}, @code{memcmp},\n+@code{memcpy}, @code{memset}, @code{modf}, @code{pow}, @code{printf},\n+@code{putchar}, @code{puts}, @code{scanf}, @code{sinh}, @code{sin},\n+@code{snprintf}, @code{sprintf}, @code{sqrt}, @code{sscanf},\n+@code{strcat}, @code{strchr}, @code{strcmp}, @code{strcpy},\n+@code{strcspn}, @code{strlen}, @code{strncat}, @code{strncmp},\n+@code{strncpy}, @code{strpbrk}, @code{strrchr}, @code{strspn},\n+@code{strstr}, @code{tanh}, @code{tan}, @code{vfprintf}, @code{vprintf}\n+and @code{vsprintf}\n are all recognized as built-in functions unless\n @option{-fno-builtin} is specified (or @option{-fno-builtin-@var{function}}\n is specified for an individual function).  All of these functions have"}, {"sha": "3c76266f983f48dd4a9ef1916048053356840a99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2a919aa501e3969caac1032842f84385fc53330", "patch": "@@ -1,3 +1,7 @@\n+2003-08-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/builtins-1.c: Add new builtin cases.\n+\n 2003-08-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/builtins-1.c: Add new cases."}, {"sha": "85636fa9e87a08fe495d903f171f5781ea85cc2b", "filename": "gcc/testsuite/gcc.dg/builtins-1.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c?ref=a2a919aa501e3969caac1032842f84385fc53330", "patch": "@@ -44,6 +44,13 @@ double test_##FN(double x, TYPE y) { return __builtin_##FN(x, y); } \\\n float test_##FN##f(float x, TYPE y) { return __builtin_##FN##f(x, y); } \\\n long double test_##FN##l(long double x, TYPE y) { return __builtin_##FN##l(x, y); } \n \n+/* Test FP functions taking two arguments, the second argument is a\n+   FP pointer.  */\n+#define FPTEST2FPP2(FN) \\\n+double test_##FN(double x, double *y) { return __builtin_##FN(x, y); } \\\n+float test_##FN##f(float x, float *y) { return __builtin_##FN##f(x, y); } \\\n+long double test_##FN##l(long double x, long double *y) { return __builtin_##FN##l(x, y); } \n+\n /* Test FP functions taking one FP argument and a supplied return\n    type.  */\n #define FPTEST1RET(FN, TYPE) \\\n@@ -63,6 +70,20 @@ double test_##FN(double x, double y, double z) { return __builtin_##FN(x, y, z);\n float test_##FN##f(float x, float y, float z) { return __builtin_##FN##f(x, y, z); } \\\n long double test_##FN##l(long double x, long double y, long double z) { return __builtin_##FN##l(x, y, z); } \n \n+/* Test FP functions taking three arguments, two FP and the third is\n+   of a supplied type.  */\n+#define FPTEST3ARG3(FN, TYPE) \\\n+double test_##FN(double x, double y, TYPE z) { return __builtin_##FN(x, y, z); } \\\n+float test_##FN##f(float x, float y, TYPE z) { return __builtin_##FN##f(x, y, z); } \\\n+long double test_##FN##l(long double x, long double y, TYPE z) { return __builtin_##FN##l(x, y, z); } \n+\n+/* Test FP functions taking three FP arguments.  The second and third\n+   are FP pointers.  The return type is void.  */\n+#define FPTEST3FPP23VOID(FN) \\\n+double test_##FN(double x, double *y, double *z) { __builtin_##FN(x, y, z); return *y * *z; } \\\n+float test_##FN##f(float x, float *y, float *z) { __builtin_##FN##f(x, y, z); return *y * *z; } \\\n+long double test_##FN##l(long double x, long double *y, long double *z) { __builtin_##FN##l(x, y, z); return *y * *z; } \n+\n /* Keep this list sorted alphabetically by function name.  */\n FPTEST1     (acos)\n FPTEST1     (acosh)\n@@ -90,6 +111,7 @@ FPTEST3     (fma)\n FPTEST2     (fmax)\n FPTEST2     (fmin)\n FPTEST2     (fmod)\n+FPTEST2ARG2 (frexp, int *)\n FPTEST1     (gamma)\n FPTEST0     (huge_val)\n FPTEST2     (hypot)\n@@ -109,6 +131,7 @@ FPTEST1     (log2)\n FPTEST1     (logb)\n FPTEST1RET  (lrint, long)\n FPTEST1RET  (lround, long)\n+FPTEST2FPP2 (modf)\n FPTEST1ARG  (nan, char *)\n FPTEST1ARG  (nans, char *)\n FPTEST1     (nearbyint)\n@@ -117,13 +140,15 @@ FPTEST2     (nexttoward)\n FPTEST2     (pow)\n FPTEST1     (pow10)\n FPTEST2     (remainder)\n+FPTEST3ARG3 (remquo, int *)\n FPTEST1     (rint)\n FPTEST1     (round)\n FPTEST2     (scalb)\n FPTEST2ARG2 (scalbln, int)\n FPTEST2ARG2 (scalbn, int)\n FPTEST1     (significand)\n FPTEST1     (sin)\n+FPTEST3FPP23VOID (sincos)\n FPTEST1     (sinh)\n FPTEST1     (sqrt)\n FPTEST1     (tan)"}, {"sha": "b82a6bf6965fc60392d768a8532c458d49e92747", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a2a919aa501e3969caac1032842f84385fc53330", "patch": "@@ -4858,6 +4858,11 @@ build_common_tree_nodes_2 (int short_double)\n   TYPE_PRECISION (long_double_type_node) = LONG_DOUBLE_TYPE_SIZE;\n   layout_type (long_double_type_node);\n \n+  float_ptr_type_node = build_pointer_type (float_type_node);\n+  double_ptr_type_node = build_pointer_type (double_type_node);\n+  long_double_ptr_type_node = build_pointer_type (long_double_type_node);\n+  integer_ptr_type_node = build_pointer_type (integer_type_node);\n+\n   complex_integer_type_node = make_node (COMPLEX_TYPE);\n   TREE_TYPE (complex_integer_type_node) = integer_type_node;\n   layout_type (complex_integer_type_node);"}, {"sha": "c55375087f2948025f92c5b647de93c1cc80f2e9", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a919aa501e3969caac1032842f84385fc53330/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a2a919aa501e3969caac1032842f84385fc53330", "patch": "@@ -1809,6 +1809,11 @@ enum tree_index\n   TI_DOUBLE_TYPE,\n   TI_LONG_DOUBLE_TYPE,\n \n+  TI_FLOAT_PTR_TYPE,\n+  TI_DOUBLE_PTR_TYPE,\n+  TI_LONG_DOUBLE_PTR_TYPE,\n+  TI_INTEGER_PTR_TYPE,\n+\n   TI_VOID_TYPE,\n   TI_PTR_TYPE,\n   TI_CONST_PTR_TYPE,\n@@ -1887,6 +1892,11 @@ extern GTY(()) tree global_trees[TI_MAX];\n #define double_type_node\t\tglobal_trees[TI_DOUBLE_TYPE]\n #define long_double_type_node\t\tglobal_trees[TI_LONG_DOUBLE_TYPE]\n \n+#define float_ptr_type_node\t\tglobal_trees[TI_FLOAT_PTR_TYPE]\n+#define double_ptr_type_node\t\tglobal_trees[TI_DOUBLE_PTR_TYPE]\n+#define long_double_ptr_type_node\tglobal_trees[TI_LONG_DOUBLE_PTR_TYPE]\n+#define integer_ptr_type_node\t\tglobal_trees[TI_INTEGER_PTR_TYPE]\n+\n #define complex_integer_type_node\tglobal_trees[TI_COMPLEX_INTEGER_TYPE]\n #define complex_float_type_node\t\tglobal_trees[TI_COMPLEX_FLOAT_TYPE]\n #define complex_double_type_node\tglobal_trees[TI_COMPLEX_DOUBLE_TYPE]"}]}