{"sha": "b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBjN2RkZjgxNmEzOGYxOGE1OGEzZTFiODZiNzhiNWJiYmJhMDNjMQ==", "commit": {"author": {"name": "Cupertino Miranda", "email": "cmiranda@synopsys.com", "date": "2017-11-03T10:51:18Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-11-03T10:51:18Z"}, "message": "[ARC] Fix to unwinding.\n\ngcc/ChangeLog:\n2017-11-03  Cupertino Miranda  <cmiranda@synopsys.com>\n\n        * config/arc/arc.c (arc_save_restore): Corrected CFA note.\n        (arc_expand_prologue): Restore blink for millicode.\n        * config/arc/linux.h (LINK_EH_SPEC): Defined.\n\nlibgcc/ChangeLog:\n2017-11-03  Cupertino Miranda  <cmiranda@synopsys.com>\n            Vineet Gupta <vgupta@synopsys.com>\n\n        * config.host (arc*-*-linux*): Set md_unwind_header variable.\n        * config/arc/linux-unwind-reg.def: New file.\n        * config/arc/linux-unwind.h: Likewise.\n\nCo-Authored-By: Vineet Gupta <vgupta@synopsys.com>\n\nFrom-SVN: r254367", "tree": {"sha": "e89940f97d6b56c284a71248c1c32d647e08cc1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e89940f97d6b56c284a71248c1c32d647e08cc1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/comments", "author": null, "committer": null, "parents": [{"sha": "a34a16abe50b14dfb23929a0e596275ab7fd11e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34a16abe50b14dfb23929a0e596275ab7fd11e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a34a16abe50b14dfb23929a0e596275ab7fd11e2"}], "stats": {"total": 253, "additions": 247, "deletions": 6}, "files": [{"sha": "3926d414b3a949f5ae80c24d02d5639961636cb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1", "patch": "@@ -1,3 +1,9 @@\n+2017-11-03  Cupertino Miranda  <cmiranda@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_save_restore): Corrected CFA note.\n+\t(arc_expand_prologue): Restore blink for millicode.\n+\t* config/arc/linux.h (LINK_EH_SPEC): Defined.\n+\n 2017-11-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR target/82809"}, {"sha": "7be9f7c12b9d1fae8177a829f2905081706e7855", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1", "patch": "@@ -2823,12 +2823,23 @@ arc_save_restore (rtx base_reg,\n \t  else\n \t    {\n \t      insn = frame_insn (insn);\n-\t      if (epilogue_p)\n-\t\tfor (r = start_call; r <= end_call; r++)\n-\t\t  {\n-\t\t    rtx reg = gen_rtx_REG (SImode, r);\n-\t\t    add_reg_note (insn, REG_CFA_RESTORE, reg);\n-\t\t  }\n+\t      for (r = start_call, off = 0;\n+\t\t   r <= end_call;\n+\t\t   r++, off += UNITS_PER_WORD)\n+\t\t{\n+\t\t  rtx reg = gen_rtx_REG (SImode, r);\n+\t\t  if (epilogue_p)\n+\t\t      add_reg_note (insn, REG_CFA_RESTORE, reg);\n+\t\t  else\n+\t\t    {\n+\t\t      rtx mem = gen_rtx_MEM (SImode, plus_constant (Pmode,\n+\t\t\t\t\t\t\t\t    base_reg,\n+\t\t\t\t\t\t\t\t    off));\n+\n+\t\t      add_reg_note (insn, REG_CFA_OFFSET,\n+\t\t\t\t    gen_rtx_SET (mem, reg));\n+\t\t    }\n+\t\t}\n \t    }\n \t  offset += off;\n \t}\n@@ -3070,6 +3081,19 @@ arc_expand_prologue (void)\n       frame_size_to_allocate -= cfun->machine->frame_info.reg_size;\n     }\n \n+  /* In the case of millicode thunk, we need to restore the clobbered\n+     blink register.  */\n+  if (cfun->machine->frame_info.millicode_end_reg > 0\n+      && arc_must_save_return_addr (cfun))\n+    {\n+      HOST_WIDE_INT tmp = cfun->machine->frame_info.reg_size;\n+      emit_insn (gen_rtx_SET (gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM),\n+\t\t\t      gen_rtx_MEM (Pmode,\n+\t\t\t\t\t   plus_constant (Pmode,\n+\t\t\t\t\t\t\t  stack_pointer_rtx,\n+\t\t\t\t\t\t\t  tmp))));\n+    }\n+\n   /* Save frame pointer if needed.  First save the FP on stack, if not\n      autosaved.  */\n   if (arc_frame_pointer_needed ()"}, {"sha": "707347183ca52c304e4afccc66e4f5a2c55b6653", "filename": "gcc/config/arc/linux.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/gcc%2Fconfig%2Farc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/gcc%2Fconfig%2Farc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Flinux.h?ref=b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1", "patch": "@@ -91,3 +91,11 @@ along with GCC; see the file COPYING3.  If not see\n /* Pre/post modify with register displacement are default off.  */\n #undef TARGET_AUTO_MODIFY_REG_DEFAULT\n #define TARGET_AUTO_MODIFY_REG_DEFAULT 0\n+\n+#if DEFAULT_LIBC == LIBC_GLIBC\n+/* Override linux.h LINK_EH_SPEC definition.\n+   Signalize that because we have fde-glibc, we don't need all C shared libs\n+   linked against -lgcc_s.  */\n+#undef LINK_EH_SPEC\n+#define LINK_EH_SPEC \"--eh-frame-hdr\"\n+#endif"}, {"sha": "a99d6186ca54182e294531cc916245bd7bfa259e", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1", "patch": "@@ -1,3 +1,10 @@\n+2017-11-03  Cupertino Miranda  <cmiranda@synopsys.com>\n+\t    Vineet Gupta <vgupta@synopsys.com>\n+\n+\t* config.host (arc*-*-linux*): Set md_unwind_header variable.\n+\t* config/arc/linux-unwind-reg.def: New file.\n+\t* config/arc/linux-unwind-reg.h: Likewise.\n+\n 2017-10-23  Sebastian Perta  <sebastian.perta@renesas.com>\n \n \t* config/rl78/subdi3.S: New assembly file."}, {"sha": "ad5a9ff621f1930b9ac2d10d61abc40c9df42bff", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1", "patch": "@@ -390,6 +390,7 @@ arc*-*-linux*)\n \ttmake_file=\"${tmake_file} t-slibgcc-libgcc t-slibgcc-nolc-override arc/t-arc-uClibc arc/t-arc\"\n \textra_parts=\"$extra_parts crti.o crtn.o\"\n \textra_parts=\"$extra_parts crttls.o\"\n+\tmd_unwind_header=arc/linux-unwind.h\n \t;;\n arm-wrs-vxworks|arm-wrs-vxworks7)\n \ttmake_file=\"$tmake_file arm/t-arm arm/t-elf t-softfp-sfdf t-softfp-excl arm/t-softfp t-softfp\""}, {"sha": "8c680376c89665c299fd3b0282fe53c708e493d5", "filename": "libgcc/config/arc/linux-unwind-reg.def", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/libgcc%2Fconfig%2Farc%2Flinux-unwind-reg.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/libgcc%2Fconfig%2Farc%2Flinux-unwind-reg.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Flinux-unwind-reg.def?ref=b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1", "patch": "@@ -0,0 +1,42 @@\n+/* Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.\n+*/\n+\n+REGISTER_IN_STACK(bta, -1)\n+REGISTER_IN_STACK(lp_start, -1)\n+REGISTER_IN_STACK(lp_end, -1)\n+REGISTER_IN_STACK(lp_count, -1)\n+REGISTER_IN_STACK(status32, -1)\n+REGISTER_IN_STACK(ret, -1)\n+REGISTER_IN_STACK(blink, 31)\n+REGISTER_IN_STACK(fp, 27)\n+REGISTER_IN_STACK(gp, 26)\n+REGISTER_IN_STACK(r12, 12)\n+REGISTER_IN_STACK(r11, 11)\n+REGISTER_IN_STACK(r10, 10)\n+REGISTER_IN_STACK(r9, 9)\n+REGISTER_IN_STACK(r8, 8)\n+REGISTER_IN_STACK(r7, 7)\n+REGISTER_IN_STACK(r6, 6)\n+REGISTER_IN_STACK(r5, 5)\n+REGISTER_IN_STACK(r4, 4)\n+REGISTER_IN_STACK(r3, 3)\n+REGISTER_IN_STACK(r2, 2)\n+REGISTER_IN_STACK(r1, 1)\n+REGISTER_IN_STACK(r0, 0)\n+REGISTER_IN_STACK(sp, 28)"}, {"sha": "136c9b7ed03dc4555ec51c700baaffc997d7e97d", "filename": "libgcc/config/arc/linux-unwind.h", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/libgcc%2Fconfig%2Farc%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1/libgcc%2Fconfig%2Farc%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farc%2Flinux-unwind.h?ref=b0c7ddf816a38f18a58a3e1b86b78b5bbbba03c1", "patch": "@@ -0,0 +1,153 @@\n+/* DWARF2 EH unwinding support for ARC Linux.\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License\n+   and a copy of the GCC Runtime Library Exception along with this\n+   program; see the files COPYING3 and COPYING.RUNTIME respectively.\n+   If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This order is defined by a structure in the kernel, in file\n+   arch/arc/kernel/signal.c.  */\n+\n+#define REGISTER_IN_STACK(REG_NAME, ID) \\\n+  REG_NAME,\n+enum registers_stack_order {\n+  REGISTER_STACK_ORDER_START = -1,\n+  #include \"config/arc/linux-unwind-reg.def\"\n+  REGISTER_STACK_ORDER_SIZE,\n+};\n+\n+struct register_position {\n+  int reg_id;\n+  int offset_in_stack;\n+};\n+#undef REGISTER_IN_STACK\n+\n+#define REGISTER_SIZE_IN_WORDS 4\n+#define REGISTER_IN_STACK(REG_NAME, ID) (int) ID,\n+int\n+register_id_for_index[REGISTER_STACK_ORDER_SIZE] = {\n+  #include \"config/arc/linux-unwind-reg.def\"\n+};\n+#undef REGISTER_IN_STACK\n+\n+#ifndef inhibit_libc\n+/* Do code reading to identify a signal frame, and set the frame\n+   state data appropriately.  See unwind-dw2.c for the structs.  */\n+\n+#include <signal.h>\n+#include <asm/unistd.h>\n+\n+/*\n+00010edc <__default_rt_sa_restorer>:\n+   10edc:\t208a 12c2\t\tmov     r8,139\n+   10ee0:\t781e\t\t\ttrap_s  0\n+   10ee2:\t7ee0\t\t\tj_s     [blink]\n+*/\n+\n+#if __BIG_ENDIAN__\n+#define MOV_R8_139\t  0x8a20c212\n+#define TRAP_S_J_S_BLINK  0x1e78e07e\n+#define SWI\t\t  0x6f223f00\n+#elif __LITTLE_ENDIAN__\n+#define MOV_R8_139\t  0x12c2208a\n+#define TRAP_S_J_S_BLINK  0x7ee0781e\n+#define SWI\t\t  0x003f226f\n+#endif\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR arc_fallback_frame_state\n+\n+static __attribute__((noinline)) _Unwind_Reason_Code\n+arc_fallback_frame_state (struct _Unwind_Context *context,\n+\t\t\t   _Unwind_FrameState *fs)\n+{\n+  struct rt_sigframe {\n+    siginfo_t info;\n+    ucontext_t uc;\n+    unsigned int sigret_magic;\n+  };\n+\n+  struct rt_sigframe *rt_;\n+  u_int32_t *pc = (u_int32_t *) context->ra;\n+  struct sigcontext *sc;\n+  _Unwind_Ptr new_cfa;\n+  int i;\n+\n+#ifdef __ARC700__\n+  if (pc[1] != SWI)\n+    return _URC_END_OF_STACK;\n+#else\n+  if (pc[1] != TRAP_S_J_S_BLINK)\n+    return _URC_END_OF_STACK;\n+#endif\n+\n+  if (pc[0] == MOV_R8_139)\n+    {\n+      rt_ = context->cfa;\n+      sc = &rt_->uc.uc_mcontext;\n+    }\n+  else\n+    return _URC_END_OF_STACK;\n+\n+  new_cfa = (_Unwind_Ptr) sc;\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = __LIBGCC_STACK_POINTER_REGNUM__;\n+  fs->regs.cfa_offset = new_cfa - (_Unwind_Ptr) context->cfa;\n+\n+  unsigned long *regs = &sc->regs.scratch.bta;\n+  for (i = 0; i < REGISTER_STACK_ORDER_SIZE; i++)\n+    {\n+      if (register_id_for_index[i] == -1)\n+\tcontinue;\n+      fs->regs.reg[register_id_for_index[i]].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[register_id_for_index[i]].loc.offset\n+\t= ((_Unwind_Ptr) &(regs[i])) - new_cfa;\n+    }\n+\n+  fs->regs.reg[31].how = REG_SAVED_VAL_OFFSET;\n+  fs->regs.reg[31].loc.offset = ((_Unwind_Ptr) (regs[ret])) - new_cfa;\n+\n+  fs->retaddr_column = 31;\n+\n+  return _URC_NO_REASON;\n+}\n+#endif\n+\n+#define MD_FROB_UPDATE_CONTEXT arc_frob_update_context\n+/* Save fp register for unwinding to work.  */\n+\n+static void\n+arc_frob_update_context (struct _Unwind_Context *context,\n+\t\t\t _Unwind_FrameState *fs)\n+{\n+  _Unwind_Word fp_val;\n+  asm (\"mov %0,fp\" : \"=r\" (fp_val));\n+\n+  switch (fs->regs.reg[27].how)\n+    {\n+    case REG_UNSAVED:\n+    case REG_UNDEFINED:\n+      if (context->reg[27] == NULL)\n+\t_Unwind_SetGRValue (context, 27, fp_val);\n+      break;\n+\n+    default:\n+      break;\n+    }\n+}"}]}