{"sha": "c397f267f1d0e8ea286904bc5543829b558e154f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM5N2YyNjdmMWQwZThlYTI4NjkwNGJjNTU0MzgyOWI1NThlMTU0Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-10-30T14:49:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-10-30T14:49:32Z"}, "message": "PR libstdc++/87784 fix dynamic_bitset::push_back\n\nPreviously the _M_Nb member was incremented before calling\n_M_unchecked_set which meant that the bit being set was out of bounds.\nIt either set the wrong bit in an allocated word, or accessed beyond the\nend of the allocated memory in the _M_w vector. The fix for the bug is\nto update the _M_Nb member after using it as an index.\n\nAs an optimisation, when a new block needs to be appended the call to\n_M_unchecked_set can be avoided by appending a block with the least\nsignificant bit already set to the desired value.\n\n\tPR libstdc++/87784\n\t* include/tr2/dynamic_bitset (dynamic_bitset::push_back): When there\n\tare no unused bits in the last block, append a new block with the\n\tright value so the bit doesn't need to be set. Only increment size\n\tafter setting the new bit, not before.\n\t* testsuite/tr2/dynamic_bitset/pr87784.cc: New test.\n\nFrom-SVN: r265625", "tree": {"sha": "39eea78abae2ee13849342bec8b4a18828ac862b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39eea78abae2ee13849342bec8b4a18828ac862b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c397f267f1d0e8ea286904bc5543829b558e154f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c397f267f1d0e8ea286904bc5543829b558e154f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c397f267f1d0e8ea286904bc5543829b558e154f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c397f267f1d0e8ea286904bc5543829b558e154f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47abbc3196ebf5829e8552d8824665af4c8a5c6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47abbc3196ebf5829e8552d8824665af4c8a5c6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47abbc3196ebf5829e8552d8824665af4c8a5c6f"}], "stats": {"total": 92, "additions": 89, "deletions": 3}, "files": [{"sha": "145eaa81edbfce6a4f3f67e1f3669d2a7433484c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c397f267f1d0e8ea286904bc5543829b558e154f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c397f267f1d0e8ea286904bc5543829b558e154f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c397f267f1d0e8ea286904bc5543829b558e154f", "patch": "@@ -1,3 +1,12 @@\n+2018-10-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/87784\n+\t* include/tr2/dynamic_bitset (dynamic_bitset::push_back): When there\n+\tare no unused bits in the last block, append a new block with the\n+\tright value so the bit doesn't need to be set. Only increment size\n+\tafter setting the new bit, not before.\n+\t* testsuite/tr2/dynamic_bitset/pr87784.cc: New test.\n+\n 2018-10-29  David Malcolm  <dmalcolm@redhat.com>\n \n \t* testsuite/17_intro/using_namespace_std_exp_neg.cc: Remove"}, {"sha": "9e5c8170c815170fe911a84a768afe18047b30b1", "filename": "libstdc++-v3/include/tr2/dynamic_bitset", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c397f267f1d0e8ea286904bc5543829b558e154f/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c397f267f1d0e8ea286904bc5543829b558e154f/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset?ref=c397f267f1d0e8ea286904bc5543829b558e154f", "patch": "@@ -727,10 +727,11 @@ namespace tr2\n       void\n       push_back(bool __bit)\n       {\n-\tif (size_t __offset = this->size() % bits_per_block == 0)\n-\t  this->_M_do_append_block(block_type(0), this->_M_Nb);\n+\tif (this->size() % bits_per_block == 0)\n+\t  this->_M_do_append_block(block_type(__bit), this->_M_Nb);\n+\telse\n+\t  this->_M_unchecked_set(this->_M_Nb, __bit);\n \t++this->_M_Nb;\n-\tthis->_M_unchecked_set(this->_M_Nb, __bit);\n       }\n \n       /**"}, {"sha": "52dc3893a310133424cd3d2382c236a433635746", "filename": "libstdc++-v3/testsuite/tr2/dynamic_bitset/pr87784.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c397f267f1d0e8ea286904bc5543829b558e154f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdynamic_bitset%2Fpr87784.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c397f267f1d0e8ea286904bc5543829b558e154f/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdynamic_bitset%2Fpr87784.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdynamic_bitset%2Fpr87784.cc?ref=c397f267f1d0e8ea286904bc5543829b558e154f", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <tr2/dynamic_bitset>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::tr2::dynamic_bitset<unsigned> b;\n+  VERIFY( b.size() == 0 );\n+  VERIFY( b.find_first() == b.size() );\n+  b.push_back(0);\n+  VERIFY( b.size() == 1 );\n+  VERIFY( b.find_first() == b.size() );\n+  b.push_back(0);\n+  VERIFY( b.size() == 2 );\n+  VERIFY( b.find_first() == b.size() );\n+\n+  b.push_back(1);\n+  VERIFY( b.size() == 3 );\n+  VERIFY( b.find_first() == b.size() - 1 );\n+  b.push_back(1);\n+  VERIFY( b.size() == 4 );\n+  VERIFY( b.find_first() == b.size() - 2 );\n+  b.push_back(0);\n+  VERIFY( b.size() == 5 );\n+  VERIFY( b.find_first() == b.size() - 3 );\n+\n+  b.clear();\n+  VERIFY( b.size() == 0 );\n+  VERIFY( b.find_first() == b.size() );\n+  b.push_back(1);\n+  VERIFY( b.size() == 1 );\n+  VERIFY( b.find_first() == 0 );\n+  b.push_back(1);\n+  VERIFY( b.size() == 2 );\n+  VERIFY( b.find_first() == 0 );\n+  b.push_back(1);\n+  VERIFY( b.size() == 3 );\n+  VERIFY( b.find_first() == 0 );\n+\n+  b.clear();\n+  b.append(2u);\n+  VERIFY( b.size() == b.bits_per_block );\n+  VERIFY( b.find_first() == 1 );\n+  b <<= 1;\n+  VERIFY( b.find_first() == 2 );\n+  b <<= 3;\n+  VERIFY( b.find_first() == 5 );\n+  b <<= 6;\n+  VERIFY( b.find_first() == 11 );\n+  VERIFY( b.size() == b.bits_per_block );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}