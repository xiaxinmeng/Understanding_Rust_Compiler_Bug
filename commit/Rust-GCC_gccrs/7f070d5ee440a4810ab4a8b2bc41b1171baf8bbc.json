{"sha": "7f070d5ee440a4810ab4a8b2bc41b1171baf8bbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YwNzBkNWVlNDQwYTQ4MTBhYjRhOGIyYmM0MWIxMTcxYmFmOGJiYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-29T22:33:31Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-29T22:33:31Z"}, "message": "(expand_asm_operands): Fix errors in previous patches.\n\nFrom-SVN: r12860", "tree": {"sha": "bcd4aea0d84b7c832c772097ac266e84c46eca45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcd4aea0d84b7c832c772097ac266e84c46eca45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f070d5ee440a4810ab4a8b2bc41b1171baf8bbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f070d5ee440a4810ab4a8b2bc41b1171baf8bbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f070d5ee440a4810ab4a8b2bc41b1171baf8bbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f070d5ee440a4810ab4a8b2bc41b1171baf8bbc/comments", "author": null, "committer": null, "parents": [{"sha": "8f6b2c91f0e35efd376481a58b93ff20adfd3d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6b2c91f0e35efd376481a58b93ff20adfd3d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f6b2c91f0e35efd376481a58b93ff20adfd3d75"}], "stats": {"total": 36, "additions": 10, "deletions": 26}, "files": [{"sha": "21e493260f317a1e8112985b343170b09de60c16", "filename": "gcc/stmt.c", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f070d5ee440a4810ab4a8b2bc41b1171baf8bbc/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f070d5ee440a4810ab4a8b2bc41b1171baf8bbc/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=7f070d5ee440a4810ab4a8b2bc41b1171baf8bbc", "patch": "@@ -1422,12 +1422,12 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t the worst that happens if we get it wrong is we issue an error\n \t message.  */\n \n-      for (j = 0; j < TREE_STRING_LENGTH (TREE_PURPOSE (tail)); j++)\n+      for (j = 0; j < TREE_STRING_LENGTH (TREE_PURPOSE (tail)) - 1; j++)\n \tswitch (TREE_STRING_POINTER (TREE_PURPOSE (tail))[j])\n \t  {\n \t  case '+':\n \t    /* Make sure we can specify the matching operand.  */\n-\t    if (i >= '0' && i <= '9')\n+\t    if (i > 9)\n \t      {\n \t\terror (\"output operand constraint %d contains `+'\", i);\n \t\treturn;\n@@ -1545,7 +1545,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \n       /* Make sure constraint has neither `=' nor `+'.  */\n \n-      for (j = 0; j < TREE_STRING_LENGTH (TREE_PURPOSE (tail)); j++)\n+      for (j = 0; j < TREE_STRING_LENGTH (TREE_PURPOSE (tail)) - 1; j++)\n \tswitch (TREE_STRING_POINTER (TREE_PURPOSE (tail))[j])\n \t  {\n \t  case '+':   case '=':\n@@ -3448,29 +3448,13 @@ expand_decl (decl)\n       enum machine_mode reg_mode\n \t= promote_mode (type, DECL_MODE (decl), &unsignedp, 0);\n \n-      if (TREE_CODE (type) == COMPLEX_TYPE)\n-\t{\n-\t  rtx realpart, imagpart;\n-\t  enum machine_mode partmode = TYPE_MODE (TREE_TYPE (type));\n-\n-\t  /* For a complex type variable, make a CONCAT of two pseudos\n-\t     so that the real and imaginary parts\n-\t     can be allocated separately.  */\n-\t  realpart = gen_reg_rtx (partmode);\n-\t  REG_USERVAR_P (realpart) = 1;\n-\t  imagpart = gen_reg_rtx (partmode);\n-\t  REG_USERVAR_P (imagpart) = 1;\n-\t  DECL_RTL (decl) = gen_rtx (CONCAT, reg_mode, realpart, imagpart);\n-\t}\n-      else\n-\t{\n-\t  DECL_RTL (decl) = gen_reg_rtx (reg_mode);\n-\t  if (TREE_CODE (type) == POINTER_TYPE)\n-\t    mark_reg_pointer (DECL_RTL (decl),\n-\t\t\t      (TYPE_ALIGN (TREE_TYPE (TREE_TYPE (decl)))\n-\t\t\t       / BITS_PER_UNIT));\n-\t  REG_USERVAR_P (DECL_RTL (decl)) = 1;\n-\t}\n+      DECL_RTL (decl) = gen_reg_rtx (reg_mode);\n+      mark_user_reg (DECL_RTL (decl));\n+\n+      if (TREE_CODE (type) == POINTER_TYPE)\n+\tmark_reg_pointer (DECL_RTL (decl),\n+\t\t\t  (TYPE_ALIGN (TREE_TYPE (TREE_TYPE (decl)))\n+\t\t\t   / BITS_PER_UNIT));\n     }\n   else if (TREE_CODE (DECL_SIZE (decl)) == INTEGER_CST)\n     {"}]}