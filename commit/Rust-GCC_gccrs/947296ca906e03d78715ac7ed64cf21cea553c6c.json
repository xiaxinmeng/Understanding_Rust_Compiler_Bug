{"sha": "947296ca906e03d78715ac7ed64cf21cea553c6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ3Mjk2Y2E5MDZlMDNkNzg3MTVhYzdlZDY0Y2YyMWNlYTU1M2M2Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-17T18:09:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-17T18:09:10Z"}, "message": "decl.c (xref_basetypes): Complain about incomplete template base.\n\n\t* decl.c (xref_basetypes): Complain about incomplete template base.\n\t* class.c (finish_struct): Adjust variants in templates, too.\n\nFrom-SVN: r189583", "tree": {"sha": "ea5e9a29a4648072055624e6c1d7e0a183a13051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea5e9a29a4648072055624e6c1d7e0a183a13051"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/947296ca906e03d78715ac7ed64cf21cea553c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/947296ca906e03d78715ac7ed64cf21cea553c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/947296ca906e03d78715ac7ed64cf21cea553c6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/947296ca906e03d78715ac7ed64cf21cea553c6c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec44e46396e6bc7f393ceb10d84df22b9b45f820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec44e46396e6bc7f393ceb10d84df22b9b45f820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec44e46396e6bc7f393ceb10d84df22b9b45f820"}], "stats": {"total": 123, "additions": 83, "deletions": 40}, "files": [{"sha": "3325f1a12e1df5c88f27478f87d70bd38807e2b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=947296ca906e03d78715ac7ed64cf21cea553c6c", "patch": "@@ -1,5 +1,8 @@\n 2012-07-17  Jason Merrill  <jason@redhat.com>\n \n+\t* decl.c (xref_basetypes): Complain about incomplete template base.\n+\t* class.c (finish_struct): Adjust variants in templates, too.\n+\n \tPR c++/53549\n \t* parser.c (cp_parser_class_head): Call xref_basetypes here.\n \t(cp_parser_class_specifier_1): Not here."}, {"sha": "82c28fac614bd9df9883e32c6c9aa0f9df6bc486", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=947296ca906e03d78715ac7ed64cf21cea553c6c", "patch": "@@ -6325,6 +6325,15 @@ finish_struct (tree t, tree attributes)\n \n       /* Remember current #pragma pack value.  */\n       TYPE_PRECISION (t) = maximum_field_alignment;\n+\n+      /* Fix up any variants we've already built.  */\n+      for (x = TYPE_NEXT_VARIANT (t); x; x = TYPE_NEXT_VARIANT (x))\n+\t{\n+\t  TYPE_SIZE (x) = TYPE_SIZE (t);\n+\t  TYPE_SIZE_UNIT (x) = TYPE_SIZE_UNIT (t);\n+\t  TYPE_FIELDS (x) = TYPE_FIELDS (t);\n+\t  TYPE_METHODS (x) = TYPE_METHODS (t);\n+\t}\n     }\n   else\n     finish_struct_1 (t);"}, {"sha": "84b78f6f1da8d0df1584eeca4490acbef78e734e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=947296ca906e03d78715ac7ed64cf21cea553c6c", "patch": "@@ -11843,7 +11843,14 @@ xref_basetypes (tree ref, tree base_list)\n     {\n       tree basetype = TREE_VALUE (*basep);\n \n-      if (!(processing_template_decl && uses_template_parms (basetype))\n+      /* The dependent_type_p call below should really be dependent_scope_p\n+\t so that we give a hard error about using an incomplete type as a\n+\t base, but we allow it with a pedwarn for backward\n+\t compatibility.  */\n+      if (processing_template_decl\n+\t  && CLASS_TYPE_P (basetype) && TYPE_BEING_DEFINED (basetype))\n+\tcxx_incomplete_type_diagnostic (NULL_TREE, basetype, DK_PEDWARN);\n+      if (!dependent_type_p (basetype)\n \t  && !complete_type_or_else (basetype, NULL))\n \t/* An incomplete type.  Remove it from the list.  */\n \t*basep = TREE_CHAIN (*basep);"}, {"sha": "d3bfd48b7212d157b64257693c3ccebe12364a7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=947296ca906e03d78715ac7ed64cf21cea553c6c", "patch": "@@ -1,5 +1,9 @@\n 2012-07-17  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/template/inherit8.C: Adjust.\n+\t* g++.dg/template/using21.C: Adjust.\n+\t* g++.dg/template/using22.C: Adjust.\n+\n \tPR c++/53549\n \t* g++.dg/template/current-inst1.C: New.\n \t* g++.dg/parse/crash35.C: Adjust."}, {"sha": "3176dc06d0b6485e610a3b7d5129f4e5f7d1c522", "filename": "gcc/testsuite/g++.dg/template/inherit8.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finherit8.C?ref=947296ca906e03d78715ac7ed64cf21cea553c6c", "patch": "@@ -4,9 +4,9 @@ template <typename T>\n struct A\n {\n   template <typename U>\n-  struct B : public A <B<U> >\n+  struct B : public A <B<U> >\t// { dg-error \"declaration\" }\n   {\n-    struct C : public B<U>\n+    struct C : public B<U>\t// { dg-error \"incomplete\" }\n     {\n     };\n   };"}, {"sha": "65313aaf69205c5a924102150aa77b025c291285", "filename": "gcc/testsuite/g++.dg/template/using21.C", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing21.C?ref=947296ca906e03d78715ac7ed64cf21cea553c6c", "patch": "@@ -4,25 +4,34 @@\n template<typename T>\n struct A\n {\n-    int foo;\n+  int foo;\n \n-    struct B : A<T>\n-    {\n-        using A::foo;\n-    };\n+  struct B;\n+  struct C;\n+  struct D;\n+  struct E;\n+};\n \n-    struct C : A\n-    {\n-        using A::foo;\n-    };\n+template <class T>\n+struct A<T>::B : A<T>\n+{\n+  using A::foo;\n+};\n \n-    struct D : A<T>\n-    {\n-\tusing A<T>::foo;\n-    };\n+template <class T>\n+struct A<T>::C : A\n+{\n+  using A::foo;\n+};\n \n-    struct E : A\n-    {\n-\tusing A<T>::foo;\n-    };\n+template <class T>\n+struct A<T>::D : A<T>\n+{\n+  using A<T>::foo;\n+};\n+\n+template <class T>\n+struct A<T>::E : A\n+{\n+  using A<T>::foo;\n };"}, {"sha": "9ea3d8a1e49283ee82d4e820ab6eb0538df91978", "filename": "gcc/testsuite/g++.dg/template/using22.C", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947296ca906e03d78715ac7ed64cf21cea553c6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing22.C?ref=947296ca906e03d78715ac7ed64cf21cea553c6c", "patch": "@@ -6,28 +6,39 @@ template <class T> struct Z {};\n template<typename T>\n struct A\n {\n-    struct B : A<T>\n-    {\n-        using A::nonexist; // { dg-error \"no members matching\" }\n-    };\n+  struct B;\n+  struct C;\n+  struct D;\n+  struct E;\n+  struct F;\n+};\n \n-    struct C : A\n-    {\n-        using A::nonexist; // { dg-error \"no members matching\" }\n-    };\n+template <class T>\n+struct A<T>::B : A<T>\n+{\n+  using A::nonexist; // { dg-error \"no members matching\" }\n+};\n \n-    struct D : A<T>\n-    {\n-    \tusing A<T>::nonexist; // { dg-error \"no members matching\" }\n-    };\n+template <class T>\n+struct A<T>::C : A\n+{\n+  using A::nonexist; // { dg-error \"no members matching\" }\n+};\n \n-    struct E : A\n-    {\n-    \tusing A<T>::nonexist; // { dg-error \"no members matching\" }\n-    };\n+template <class T>\n+struct A<T>::D : A<T>\n+{\n+  using A<T>::nonexist; // { dg-error \"no members matching\" }\n+};\n \n-    struct F : Z<T>\n-    {\n-\tusing Z<T>::nonexist;\n-    };\n+template <class T>\n+struct A<T>::E : A\n+{\n+  using A<T>::nonexist; // { dg-error \"no members matching\" }\n+};\n+\n+template <class T>\n+struct A<T>::F : Z<T>\n+{\n+  using Z<T>::nonexist;\n };"}]}