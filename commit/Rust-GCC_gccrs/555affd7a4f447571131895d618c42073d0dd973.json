{"sha": "555affd7a4f447571131895d618c42073d0dd973", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU1YWZmZDdhNGY0NDc1NzExMzE4OTVkNjE4YzQyMDczZDBkZDk3Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-05T11:36:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-05T11:36:08Z"}, "message": "Remove remaining uses of CONST_DOUBLE_FROM_REAL_VALUE\n\nThis patch replaces all uses of CONST_DOUBLE_FROM_REAL_VALUE\nwith the already-existing const_double_from_real_value.\n\nBootstrapped & regression-tested on x86_64-linux-gnu.  Also tested by\nbuilding one target per CPU directory and checking that there were\nno new warnings and no changes in testsuite output at -O2.\n\ngcc/\n\t* real.h (CONST_DOUBLE_ATOF): Use const_double_from_real_value\n\tinstead of CONST_DOUBLE_FROM_REAL_VALUE.\n\t(CONST_DOUBLE_FROM_REAL_VALUE): Delete.\n\t* config/c6x/c6x.md (divsf3, divdf3): Use const_double_from_real_value\n\tinstead of CONST_DOUBLE_FROM_REAL_VALUE.\n\t* config/epiphany/epiphany.md (fixuns_truncsfsi2): Likewise.\n\t* config/i386/i386.c (standard_80387_constant_rtx): Likewise.\n\t(ix86_expand_builtin, ix86_emit_i387_log1p, ix86_emit_i387_round)\n\t(ix86_emit_swsqrtsf): Likewise.\n\t* config/ia64/ia64.c (ia64_expand_builtin): Likewise.\n\t* config/mips/mips.md (fixuns_truncdfsi2, fixuns_truncdfdi2)\n\t(fixuns_truncsfsi2, fixuns_truncsfdi2): Likewise.\n\t* config/pa/pa.c (pa_expand_builtin): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_load_constant_and_splat): Likewise.\n\t(rs6000_scale_v2df): Likewise.\n\t* config/rs6000/rs6000.md (*cmptf_internal2): Likewise.\n\t* config/s390/s390.md (fixuns_truncdddi2, fixuns_trunctddi2)\n\t(fixuns_trunc<BFP:mode><GPR:mode>2): Likewise.\n\t* config/s390/vx-builtins.md (vec_ctd_s64, vec_ctd_u64, vec_ctsl)\n\t(vec_ctul): Likewise.\n\t* config/sparc/sparc.c (sparc_emit_fixunsdi): Likewise.\n\t* config/spu/spu.c (hwint_to_const_double, spu_float_const): Likewise.\n\t* config/spu/spu.md (floatunsdisf2, floatunstisf2): Likewise.\n\t* cse.c (fold_rtx): Likewise.\n\t* emit-rtl.c (immed_double_const): Likewise (in comments).\n\t(init_emit_once): Likewise.\n\t* expr.c (compress_float_constant, expand_expr_real_1)\n\t(const_vector_from_tree): Likewise.\n\t* optabs.c (expand_float, expand_fix): Likewise.\n\t* reg-stack.c (reg_to_stack): Likewise.\n\t* simplify-rtx.c (avoid_constant_pool_reference): Likewise.\n\t(simplify_const_unary_operation, simplify_binary_operation_1)\n\t(simplify_const_binary_operation, simplify_relational_operation)\n\t(simplify_immed_subreg): Likewise.\n\nFrom-SVN: r228477", "tree": {"sha": "e93ab148957ced467bca4ab4ed06a7465ea71e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e93ab148957ced467bca4ab4ed06a7465ea71e19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/555affd7a4f447571131895d618c42073d0dd973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555affd7a4f447571131895d618c42073d0dd973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/555affd7a4f447571131895d618c42073d0dd973", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555affd7a4f447571131895d618c42073d0dd973/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c88ea9456b266f202ee0a690b41f9a4e9558457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c88ea9456b266f202ee0a690b41f9a4e9558457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c88ea9456b266f202ee0a690b41f9a4e9558457"}], "stats": {"total": 151, "additions": 93, "deletions": 58}, "files": [{"sha": "853c728657cc6b67feaf7dce0d832bfe982373b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -1,3 +1,40 @@\n+2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* real.h (CONST_DOUBLE_ATOF): Use const_double_from_real_value\n+\tinstead of CONST_DOUBLE_FROM_REAL_VALUE.\n+\t(CONST_DOUBLE_FROM_REAL_VALUE): Delete.\n+\t* config/c6x/c6x.md (divsf3, divdf3): Use const_double_from_real_value\n+\tinstead of CONST_DOUBLE_FROM_REAL_VALUE.\n+\t* config/epiphany/epiphany.md (fixuns_truncsfsi2): Likewise.\n+\t* config/i386/i386.c (standard_80387_constant_rtx): Likewise.\n+\t(ix86_expand_builtin, ix86_emit_i387_log1p, ix86_emit_i387_round)\n+\t(ix86_emit_swsqrtsf): Likewise.\n+\t* config/ia64/ia64.c (ia64_expand_builtin): Likewise.\n+\t* config/mips/mips.md (fixuns_truncdfsi2, fixuns_truncdfdi2)\n+\t(fixuns_truncsfsi2, fixuns_truncsfdi2): Likewise.\n+\t* config/pa/pa.c (pa_expand_builtin): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_load_constant_and_splat): Likewise.\n+\t(rs6000_scale_v2df): Likewise.\n+\t* config/rs6000/rs6000.md (*cmptf_internal2): Likewise.\n+\t* config/s390/s390.md (fixuns_truncdddi2, fixuns_trunctddi2)\n+\t(fixuns_trunc<BFP:mode><GPR:mode>2): Likewise.\n+\t* config/s390/vx-builtins.md (vec_ctd_s64, vec_ctd_u64, vec_ctsl)\n+\t(vec_ctul): Likewise.\n+\t* config/sparc/sparc.c (sparc_emit_fixunsdi): Likewise.\n+\t* config/spu/spu.c (hwint_to_const_double, spu_float_const): Likewise.\n+\t* config/spu/spu.md (floatunsdisf2, floatunstisf2): Likewise.\n+\t* cse.c (fold_rtx): Likewise.\n+\t* emit-rtl.c (immed_double_const): Likewise (in comments).\n+\t(init_emit_once): Likewise.\n+\t* expr.c (compress_float_constant, expand_expr_real_1)\n+\t(const_vector_from_tree): Likewise.\n+\t* optabs.c (expand_float, expand_fix): Likewise.\n+\t* reg-stack.c (reg_to_stack): Likewise.\n+\t* simplify-rtx.c (avoid_constant_pool_reference): Likewise.\n+\t(simplify_const_unary_operation, simplify_binary_operation_1)\n+\t(simplify_const_binary_operation, simplify_relational_operation)\n+\t(simplify_immed_subreg): Likewise.\n+\n 2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* doc/tm.texi.in (REAL_ARITHMETIC): Delete."}, {"sha": "692d83fceba44ec9b8e8b134187f372715df02ec", "filename": "gcc/config/c6x/c6x.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fc6x%2Fc6x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fc6x%2Fc6x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.md?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -2811,7 +2811,7 @@\n   \"TARGET_FP && flag_reciprocal_math\"\n {\n   operands[3] = force_reg (SFmode,\n-\t\t\t   CONST_DOUBLE_FROM_REAL_VALUE (dconst2, SFmode));\n+\t\t\t   const_double_from_real_value (dconst2, SFmode));\n   operands[4] = gen_reg_rtx (SFmode);\n   operands[5] = gen_reg_rtx (SFmode);\n   operands[6] = gen_reg_rtx (SFmode);\n@@ -2836,7 +2836,7 @@\n   \"TARGET_FP && flag_reciprocal_math\"\n {\n   operands[3] = force_reg (DFmode,\n-\t\t\t   CONST_DOUBLE_FROM_REAL_VALUE (dconst2, DFmode));\n+\t\t\t   const_double_from_real_value (dconst2, DFmode));\n   operands[4] = gen_reg_rtx (DFmode);\n   operands[5] = gen_reg_rtx (DFmode);\n   operands[6] = gen_reg_rtx (DFmode);"}, {"sha": "4c8b5d6af8365181ae8224512507bf2cb64ba948", "filename": "gcc/config/epiphany/epiphany.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.md?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -982,7 +982,7 @@\n       rtx cmp = gen_rtx_LT (VOIDmode, cc1, CONST0_RTX (SFmode));\n \n       real_2expN (&offset, 31, SFmode);\n-      limit = CONST_DOUBLE_FROM_REAL_VALUE (offset, SFmode);\n+      limit = const_double_from_real_value (offset, SFmode);\n       limit = force_reg (SFmode, limit);\n       emit_insn (gen_fix_truncsfsi2 (operands[0], operands[1]));\n       emit_insn (gen_subsf3_f (tmp, operands[1], limit));"}, {"sha": "ff5277996b9598e1007db7bd6ffac8b4741d8b6f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -10573,7 +10573,7 @@ standard_80387_constant_rtx (int idx)\n       gcc_unreachable ();\n     }\n \n-  return CONST_DOUBLE_FROM_REAL_VALUE (ext_80387_constants_table[i],\n+  return const_double_from_real_value (ext_80387_constants_table[i],\n \t\t\t\t       XFmode);\n }\n \n@@ -40143,7 +40143,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \trtx tmp;\n \n \treal_inf (&inf);\n-\ttmp = CONST_DOUBLE_FROM_REAL_VALUE (inf, mode);\n+\ttmp = const_double_from_real_value (inf, mode);\n \n \ttmp = validize_mem (force_const_mem (mode, tmp));\n \n@@ -47021,7 +47021,7 @@ void ix86_emit_i387_log1p (rtx op0, rtx op1)\n \n   emit_insn (gen_absxf2 (tmp, op1));\n   test = gen_rtx_GE (VOIDmode, tmp,\n-    CONST_DOUBLE_FROM_REAL_VALUE (\n+    const_double_from_real_value (\n        REAL_VALUE_ATOF (\"0.29289321881345247561810596348408353\", XFmode),\n        XFmode));\n   emit_jump_insn (gen_cbranchxf4 (test, XEXP (test, 0), XEXP (test, 1), label1));\n@@ -47095,7 +47095,7 @@ void ix86_emit_i387_round (rtx op0, rtx op1)\n   e2 = gen_reg_rtx (inmode);\n   res = gen_reg_rtx (outmode);\n \n-  half = CONST_DOUBLE_FROM_REAL_VALUE (dconsthalf, inmode);\n+  half = const_double_from_real_value (dconsthalf, inmode);\n \n   /* round(a) = sgn(a) * floor(fabs(a) + 0.5) */\n \n@@ -47227,10 +47227,10 @@ void ix86_emit_swsqrtsf (rtx res, rtx a, machine_mode mode,\n   e3 = gen_reg_rtx (mode);\n \n   real_from_integer (&r, VOIDmode, -3, SIGNED);\n-  mthree = CONST_DOUBLE_FROM_REAL_VALUE (r, SFmode);\n+  mthree = const_double_from_real_value (r, SFmode);\n \n   real_arithmetic (&r, NEGATE_EXPR, &dconsthalf, NULL);\n-  mhalf = CONST_DOUBLE_FROM_REAL_VALUE (r, SFmode);\n+  mhalf = const_double_from_real_value (r, SFmode);\n   unspec = UNSPEC_RSQRT;\n \n   if (VECTOR_MODE_P (mode))"}, {"sha": "99c965ab7c004fc0379fecfa27a6d9586cf52c2a", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -10473,7 +10473,7 @@ ia64_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \trtx tmp;\n \n \treal_inf (&inf);\n-\ttmp = CONST_DOUBLE_FROM_REAL_VALUE (inf, target_mode);\n+\ttmp = const_double_from_real_value (inf, target_mode);\n \n \ttmp = validize_mem (force_const_mem (target_mode, tmp));\n "}, {"sha": "3ad41c6dd8ad71aae3ccaa3b24f93c324dd15e5f", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -3976,7 +3976,7 @@\n \n   if (reg1)\t\t\t/* Turn off complaints about unreached code.  */\n     {\n-      mips_emit_move (reg1, CONST_DOUBLE_FROM_REAL_VALUE (offset, DFmode));\n+      mips_emit_move (reg1, const_double_from_real_value (offset, DFmode));\n       do_pending_stack_adjust ();\n \n       test = gen_rtx_GE (VOIDmode, operands[1], reg1);\n@@ -4020,7 +4020,7 @@\n \n   real_2expN (&offset, 63, DFmode);\n \n-  mips_emit_move (reg1, CONST_DOUBLE_FROM_REAL_VALUE (offset, DFmode));\n+  mips_emit_move (reg1, const_double_from_real_value (offset, DFmode));\n   do_pending_stack_adjust ();\n \n   test = gen_rtx_GE (VOIDmode, operands[1], reg1);\n@@ -4062,7 +4062,7 @@\n \n   real_2expN (&offset, 31, SFmode);\n \n-  mips_emit_move (reg1, CONST_DOUBLE_FROM_REAL_VALUE (offset, SFmode));\n+  mips_emit_move (reg1, const_double_from_real_value (offset, SFmode));\n   do_pending_stack_adjust ();\n \n   test = gen_rtx_GE (VOIDmode, operands[1], reg1);\n@@ -4104,7 +4104,7 @@\n \n   real_2expN (&offset, 63, SFmode);\n \n-  mips_emit_move (reg1, CONST_DOUBLE_FROM_REAL_VALUE (offset, SFmode));\n+  mips_emit_move (reg1, const_double_from_real_value (offset, SFmode));\n   do_pending_stack_adjust ();\n \n   test = gen_rtx_GE (VOIDmode, operands[1], reg1);"}, {"sha": "0dc09318d47e50bfca8e4f4a59e9c5e3de891d4a", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -652,7 +652,7 @@ pa_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \trtx tmp;\n \n \treal_inf (&inf);\n-\ttmp = CONST_DOUBLE_FROM_REAL_VALUE (inf, target_mode);\n+\ttmp = const_double_from_real_value (inf, target_mode);\n \n \ttmp = validize_mem (force_const_mem (target_mode, tmp));\n "}, {"sha": "3b4820bd82b85f3c19dd3c7c354af55b4c890d42", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -31849,19 +31849,19 @@ rs6000_load_constant_and_splat (machine_mode mode, REAL_VALUE_TYPE dconst)\n \n   if (mode == SFmode || mode == DFmode)\n     {\n-      rtx d = CONST_DOUBLE_FROM_REAL_VALUE (dconst, mode);\n+      rtx d = const_double_from_real_value (dconst, mode);\n       reg = force_reg (mode, d);\n     }\n   else if (mode == V4SFmode)\n     {\n-      rtx d = CONST_DOUBLE_FROM_REAL_VALUE (dconst, SFmode);\n+      rtx d = const_double_from_real_value (dconst, SFmode);\n       rtvec v = gen_rtvec (4, d, d, d, d);\n       reg = gen_reg_rtx (mode);\n       rs6000_expand_vector_init (reg, gen_rtx_PARALLEL (mode, v));\n     }\n   else if (mode == V2DFmode)\n     {\n-      rtx d = CONST_DOUBLE_FROM_REAL_VALUE (dconst, DFmode);\n+      rtx d = const_double_from_real_value (dconst, DFmode);\n       rtvec v = gen_rtvec (2, d, d);\n       reg = gen_reg_rtx (mode);\n       rs6000_expand_vector_init (reg, gen_rtx_PARALLEL (mode, v));\n@@ -32699,7 +32699,7 @@ rs6000_scale_v2df (rtx tgt, rtx src, int scale)\n   rtx elt;\n   rtx scale_vec = gen_reg_rtx (V2DFmode);\n   (void)real_powi (&r_pow, DFmode, &dconst2, hwi_scale);\n-  elt = CONST_DOUBLE_FROM_REAL_VALUE (r_pow, DFmode);\n+  elt = const_double_from_real_value (r_pow, DFmode);\n   RTVEC_ELT (v, 0) = elt;\n   RTVEC_ELT (v, 1) = elt;\n   rs6000_expand_vector_init (scale_vec, gen_rtx_PARALLEL (V2DFmode, v));"}, {"sha": "df9d48e7ef5b7bfd5d648d703abb7e7518b0ce3e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -10582,9 +10582,9 @@\n   operands[13] = gen_label_rtx ();\n   real_inf (&rv);\n   operands[14] = force_const_mem (DFmode,\n-\t\t\t\t  CONST_DOUBLE_FROM_REAL_VALUE (rv, DFmode));\n+\t\t\t\t  const_double_from_real_value (rv, DFmode));\n   operands[15] = force_const_mem (DFmode,\n-\t\t\t\t  CONST_DOUBLE_FROM_REAL_VALUE (dconst0,\n+\t\t\t\t  const_double_from_real_value (dconst0,\n \t\t\t\t\t\t\t\tDFmode));\n   if (TARGET_TOC)\n     {"}, {"sha": "182245928811b102e92ac356f3c96cfdc7bd772f", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -4437,10 +4437,10 @@\n       emit_insn (gen_extendddtd2 (temp, operands[1]));\n       temp = force_reg (TDmode, temp);\n       emit_cmp_and_jump_insns (temp,\n-\t    CONST_DOUBLE_FROM_REAL_VALUE (cmp, TDmode),\n+\t    const_double_from_real_value (cmp, TDmode),\n \t    LT, NULL_RTX, VOIDmode, 0, label1);\n       emit_insn (gen_subtd3 (temp, temp,\n-\t    CONST_DOUBLE_FROM_REAL_VALUE (sub, TDmode)));\n+\t    const_double_from_real_value (sub, TDmode)));\n       emit_insn (gen_fix_trunctddi2_dfp (operands[0], temp, GEN_INT (11)));\n       emit_jump (label2);\n \n@@ -4472,10 +4472,10 @@\n       decimal_real_from_string (&sub, \"18446744073709551616.0\"); /* 2^64 */\n \n       emit_cmp_and_jump_insns (operands[1],\n-\t    CONST_DOUBLE_FROM_REAL_VALUE (cmp, TDmode),\n+\t    const_double_from_real_value (cmp, TDmode),\n \t    LT, NULL_RTX, VOIDmode, 0, label1);\n       emit_insn (gen_subtd3 (temp, operands[1],\n-\t    CONST_DOUBLE_FROM_REAL_VALUE (sub, TDmode)));\n+\t    const_double_from_real_value (sub, TDmode)));\n       emit_insn (gen_fix_trunctddi2_dfp (operands[0], temp, GEN_INT (11)));\n       emit_jump (label2);\n \n@@ -4511,10 +4511,10 @@\n       real_2expN (&sub, <GPR:bitsize>, <BFP:MODE>mode);\n \n       emit_cmp_and_jump_insns (operands[1],\n-\t    CONST_DOUBLE_FROM_REAL_VALUE (cmp, <BFP:MODE>mode),\n+\t    const_double_from_real_value (cmp, <BFP:MODE>mode),\n \t    LT, NULL_RTX, VOIDmode, 0, label1);\n       emit_insn (gen_sub<BFP:mode>3 (temp, operands[1],\n-\t    CONST_DOUBLE_FROM_REAL_VALUE (sub, <BFP:MODE>mode)));\n+\t    const_double_from_real_value (sub, <BFP:MODE>mode)));\n       emit_insn (gen_fix_trunc<BFP:mode><GPR:mode>2_bfp (operands[0], temp,\n \t    GEN_INT (7)));\n       emit_jump (label2);"}, {"sha": "ff7408a919f4b3ccf5b2c1692c9f151c1da174c1", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -1669,7 +1669,7 @@\n   rtx c;\n \n   real_2expN (&f, -INTVAL (operands[2]), DFmode);\n-  c = CONST_DOUBLE_FROM_REAL_VALUE (f, DFmode);\n+  c = const_double_from_real_value (f, DFmode);\n \n   operands[3] = gen_rtx_CONST_VECTOR (V2DFmode, gen_rtvec (2, c, c));\n   operands[3] = force_reg (V2DFmode, operands[3]);\n@@ -1699,7 +1699,7 @@\n   rtx c;\n \n   real_2expN (&f, -INTVAL (operands[2]), DFmode);\n-  c = CONST_DOUBLE_FROM_REAL_VALUE (f, DFmode);\n+  c = const_double_from_real_value (f, DFmode);\n \n   operands[3] = gen_rtx_CONST_VECTOR (V2DFmode, gen_rtvec (2, c, c));\n   operands[3] = force_reg (V2DFmode, operands[3]);\n@@ -1730,7 +1730,7 @@\n   rtx c;\n \n   real_2expN (&f, INTVAL (operands[2]), DFmode);\n-  c = CONST_DOUBLE_FROM_REAL_VALUE (f, DFmode);\n+  c = const_double_from_real_value (f, DFmode);\n \n   operands[3] = gen_rtx_CONST_VECTOR (V2DFmode, gen_rtvec (2, c, c));\n   operands[3] = force_reg (V2DFmode, operands[3]);\n@@ -1761,7 +1761,7 @@\n   rtx c;\n \n   real_2expN (&f, INTVAL (operands[2]), DFmode);\n-  c = CONST_DOUBLE_FROM_REAL_VALUE (f, DFmode);\n+  c = const_double_from_real_value (f, DFmode);\n \n   operands[3] = gen_rtx_CONST_VECTOR (V2DFmode, gen_rtvec (2, c, c));\n   operands[3] = force_reg (V2DFmode, operands[3]);"}, {"sha": "a7fe54662b9b065167406fb68e78d887c5960149", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -8067,7 +8067,7 @@ sparc_emit_fixunsdi (rtx *operands, machine_mode mode)\n   f0 = gen_reg_rtx (mode);\n \n   emit_move_insn (limit,\n-\t\t  CONST_DOUBLE_FROM_REAL_VALUE (\n+\t\t  const_double_from_real_value (\n \t\t    REAL_VALUE_ATOF (\"9223372036854775808.0\", mode), mode));\n   emit_cmp_and_jump_insns (in, limit, GE, NULL_RTX, mode, 0, neglab);\n "}, {"sha": "62faff625b7f54956598ca69633aa80e4753b3f3", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -1031,7 +1031,7 @@ hwint_to_const_double (machine_mode mode, HOST_WIDE_INT v)\n       tv[0] = v >> 32;\n     }\n   real_from_target (&rv, tv, mode);\n-  return CONST_DOUBLE_FROM_REAL_VALUE (rv, mode);\n+  return const_double_from_real_value (rv, mode);\n }\n \n void\n@@ -3075,7 +3075,7 @@ spu_float_const (const char *string, machine_mode mode)\n {\n   REAL_VALUE_TYPE value;\n   value = REAL_VALUE_ATOF (string, mode);\n-  return CONST_DOUBLE_FROM_REAL_VALUE (value, mode);\n+  return const_double_from_real_value (value, mode);\n }\n \n int"}, {"sha": "761dbc86c8c6ebe2a0243bf676ca471eb8979571", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -751,7 +751,7 @@\n     emit_insn (gen_shlqby_ti (op3_ti, op2_ti, GEN_INT (4)));\n \n     emit_move_insn (operands[4],\n-\t\t    CONST_DOUBLE_FROM_REAL_VALUE (scale, SFmode));\n+\t\t    const_double_from_real_value (scale, SFmode));\n     emit_insn (gen_fmasf4 (operands[0],\n \t\t\t   operands[2], operands[4], operands[3]));\n     DONE;\n@@ -810,7 +810,7 @@\n     emit_insn (gen_shlqby_ti (op3_ti, op2_ti, GEN_INT (4)));\n \n     emit_move_insn (operands[4],\n-\t\t    CONST_DOUBLE_FROM_REAL_VALUE (scale, SFmode));\n+\t\t    const_double_from_real_value (scale, SFmode));\n     emit_insn (gen_fmasf4 (operands[2],\n \t\t\t   operands[2], operands[4], operands[3]));\n "}, {"sha": "a9cc26a3124365960cfab4991c311ddf29986c55", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -3342,7 +3342,7 @@ fold_rtx (rtx x, rtx_insn *insn)\n \t  if (SCALAR_FLOAT_MODE_P (mode))\n \t    {\n #ifdef FLOAT_STORE_FLAG_VALUE\n-\t      true_rtx = (CONST_DOUBLE_FROM_REAL_VALUE\n+\t      true_rtx = (const_double_from_real_value\n \t\t\t  (FLOAT_STORE_FLAG_VALUE (mode), mode));\n #else\n \t      true_rtx = NULL_RTX;"}, {"sha": "c418c2401844b3423fcf11204af91cea01b7e5ba", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -648,7 +648,7 @@ immed_wide_int_const (const wide_int_ref &v, machine_mode mode)\n    implied upper bits are copies of the high bit of i1.  The value\n    itself is neither signed nor unsigned.  Do not use this routine for\n    non-integer modes; convert to REAL_VALUE_TYPE and use\n-   CONST_DOUBLE_FROM_REAL_VALUE.  */\n+   const_double_from_real_value.  */\n \n rtx\n immed_double_const (HOST_WIDE_INT i0, HOST_WIDE_INT i1, machine_mode mode)\n@@ -5936,13 +5936,13 @@ init_emit_once (void)\n \t   mode != VOIDmode;\n \t   mode = GET_MODE_WIDER_MODE (mode))\n \tconst_tiny_rtx[i][(int) mode] =\n-\t  CONST_DOUBLE_FROM_REAL_VALUE (*r, mode);\n+\t  const_double_from_real_value (*r, mode);\n \n       for (mode = GET_CLASS_NARROWEST_MODE (MODE_DECIMAL_FLOAT);\n \t   mode != VOIDmode;\n \t   mode = GET_MODE_WIDER_MODE (mode))\n \tconst_tiny_rtx[i][(int) mode] =\n-\t  CONST_DOUBLE_FROM_REAL_VALUE (*r, mode);\n+\t  const_double_from_real_value (*r, mode);\n \n       const_tiny_rtx[i][(int) VOIDmode] = GEN_INT (i);\n "}, {"sha": "6bb24c02934d8cd682f3d099739d9e6fbcc749ca", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -3654,7 +3654,7 @@ compress_float_constant (rtx x, rtx y)\n       if (! exact_real_truncate (srcmode, &r))\n \tcontinue;\n \n-      trunc_y = CONST_DOUBLE_FROM_REAL_VALUE (r, srcmode);\n+      trunc_y = const_double_from_real_value (r, srcmode);\n \n       if (targetm.legitimate_constant_p (srcmode, trunc_y))\n \t{\n@@ -9708,7 +9708,7 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t many insns, so we'd end up copying it to a register in any case.\n \n \t Now, we do the copying in expand_binop, if appropriate.  */\n-      return CONST_DOUBLE_FROM_REAL_VALUE (TREE_REAL_CST (exp),\n+      return const_double_from_real_value (TREE_REAL_CST (exp),\n \t\t\t\t\t   TYPE_MODE (TREE_TYPE (exp)));\n \n     case FIXED_CST:\n@@ -11339,7 +11339,7 @@ const_vector_from_tree (tree exp)\n       elt = VECTOR_CST_ELT (exp, i);\n \n       if (TREE_CODE (elt) == REAL_CST)\n-\tRTVEC_ELT (v, i) = CONST_DOUBLE_FROM_REAL_VALUE (TREE_REAL_CST (elt),\n+\tRTVEC_ELT (v, i) = const_double_from_real_value (TREE_REAL_CST (elt),\n \t\t\t\t\t\t\t inner);\n       else if (TREE_CODE (elt) == FIXED_CST)\n \tRTVEC_ELT (v, i) = CONST_FIXED_FROM_FIXED_VALUE (TREE_FIXED_CST (elt),"}, {"sha": "223daf744eed9ea69b0cbd428738cfb19ca73f8a", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -4605,7 +4605,7 @@ expand_float (rtx to, rtx from, int unsignedp)\n \n       real_2expN (&offset, GET_MODE_PRECISION (GET_MODE (from)), fmode);\n       temp = expand_binop (fmode, add_optab, target,\n-\t\t\t   CONST_DOUBLE_FROM_REAL_VALUE (offset, fmode),\n+\t\t\t   const_double_from_real_value (offset, fmode),\n \t\t\t   target, 0, OPTAB_LIB_WIDEN);\n       if (temp != target)\n \temit_move_insn (target, temp);\n@@ -4748,7 +4748,7 @@ expand_fix (rtx to, rtx from, int unsignedp)\n \n \t  bitsize = GET_MODE_PRECISION (GET_MODE (to));\n \t  real_2expN (&offset, bitsize - 1, fmode);\n-\t  limit = CONST_DOUBLE_FROM_REAL_VALUE (offset, fmode);\n+\t  limit = const_double_from_real_value (offset, fmode);\n \t  lab1 = gen_label_rtx ();\n \t  lab2 = gen_label_rtx ();\n "}, {"sha": "2e23b89690077edefa87f286b5e0f74eaf1ff447", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -382,7 +382,7 @@ extern REAL_VALUE_TYPE real_from_string2 (const char *, machine_mode);\n   real_from_string2 (s, m)\n \n #define CONST_DOUBLE_ATOF(s, m) \\\n-  CONST_DOUBLE_FROM_REAL_VALUE (real_from_string2 (s, m), m)\n+  const_double_from_real_value (real_from_string2 (s, m), m)\n \n #define REAL_VALUE_FIX(r) \\\n   real_to_integer (&(r))\n@@ -431,8 +431,6 @@ REAL_VALUE_TYPE real_value_from_int_cst (const_tree, const_tree);\n   ((to) = *CONST_DOUBLE_REAL_VALUE (from))\n \n /* Return a CONST_DOUBLE with value R and mode M.  */\n-#define CONST_DOUBLE_FROM_REAL_VALUE(r, m) \\\n-  const_double_from_real_value (r, m)\n extern rtx const_double_from_real_value (REAL_VALUE_TYPE, machine_mode);\n \n /* Replace R by 1/R in the given machine mode, if the result is exact.  */"}, {"sha": "3ff817389546596c3d107739e82ef19e1695fd80", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -3241,7 +3241,7 @@ reg_to_stack (void)\n       REAL_VALUE_TYPE r;\n \n       real_nan (&r, \"\", 1, SFmode);\n-      not_a_num = CONST_DOUBLE_FROM_REAL_VALUE (r, SFmode);\n+      not_a_num = const_double_from_real_value (r, SFmode);\n       not_a_num = force_const_mem (SFmode, not_a_num);\n     }\n "}, {"sha": "84a4bad68d5d578e491e475eba3be1f9e0782254", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555affd7a4f447571131895d618c42073d0dd973/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=555affd7a4f447571131895d618c42073d0dd973", "patch": "@@ -228,7 +228,7 @@ avoid_constant_pool_reference (rtx x)\n \t  REAL_VALUE_TYPE d;\n \n \t  REAL_VALUE_FROM_CONST_DOUBLE (d, c);\n-\t  return CONST_DOUBLE_FROM_REAL_VALUE (d, GET_MODE (x));\n+\t  return const_double_from_real_value (d, GET_MODE (x));\n \t}\n       return x;\n \n@@ -1684,7 +1684,7 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n \n       real_from_integer (&d, mode, std::make_pair (op, op_mode), SIGNED);\n       d = real_value_truncate (mode, d);\n-      return CONST_DOUBLE_FROM_REAL_VALUE (d, mode);\n+      return const_double_from_real_value (d, mode);\n     }\n   else if (code == UNSIGNED_FLOAT && CONST_SCALAR_INT_P (op))\n     {\n@@ -1702,7 +1702,7 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n \n       real_from_integer (&d, mode, std::make_pair (op, op_mode), UNSIGNED);\n       d = real_value_truncate (mode, d);\n-      return CONST_DOUBLE_FROM_REAL_VALUE (d, mode);\n+      return const_double_from_real_value (d, mode);\n     }\n \n   if (CONST_SCALAR_INT_P (op) && width > 0)\n@@ -1832,7 +1832,7 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-      return CONST_DOUBLE_FROM_REAL_VALUE (d, mode);\n+      return const_double_from_real_value (d, mode);\n     }\n   else if (CONST_DOUBLE_AS_FLOAT_P (op)\n \t   && SCALAR_FLOAT_MODE_P (GET_MODE (op))\n@@ -3112,7 +3112,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t\t  && !real_equal (&d, &dconst0))\n \t\t{\n \t\t  real_arithmetic (&d, RDIV_EXPR, &dconst1, &d);\n-\t\t  tem = CONST_DOUBLE_FROM_REAL_VALUE (d, mode);\n+\t\t  tem = const_double_from_real_value (d, mode);\n \t\t  return simplify_gen_binary (MULT, mode, op0, tem);\n \t\t}\n \t    }\n@@ -3855,7 +3855,7 @@ simplify_const_binary_operation (enum rtx_code code, machine_mode mode,\n \t      }\n \t    }\n \t   real_from_target (&r, tmp0, mode);\n-\t   return CONST_DOUBLE_FROM_REAL_VALUE (r, mode);\n+\t   return const_double_from_real_value (r, mode);\n \t}\n       else\n \t{\n@@ -3936,7 +3936,7 @@ simplify_const_binary_operation (enum rtx_code code, machine_mode mode,\n \t      && (inexact || !real_identical (&result, &value)))\n \t    return NULL_RTX;\n \n-\t  return CONST_DOUBLE_FROM_REAL_VALUE (result, mode);\n+\t  return const_double_from_real_value (result, mode);\n \t}\n     }\n \n@@ -4462,7 +4462,7 @@ simplify_relational_operation (enum rtx_code code, machine_mode mode,\n \t  {\n \t    REAL_VALUE_TYPE val;\n \t    val = FLOAT_STORE_FLAG_VALUE (mode);\n-\t    return CONST_DOUBLE_FROM_REAL_VALUE (val, mode);\n+\t    return const_double_from_real_value (val, mode);\n \t  }\n #else\n \t  return NULL_RTX;\n@@ -5760,7 +5760,7 @@ simplify_immed_subreg (machine_mode outermode, rtx op,\n \t      }\n \n \t    real_from_target (&r, tmp, outer_submode);\n-\t    elems[elem] = CONST_DOUBLE_FROM_REAL_VALUE (r, outer_submode);\n+\t    elems[elem] = const_double_from_real_value (r, outer_submode);\n \t  }\n \t  break;\n "}]}