{"sha": "b7f7dab274fb75af9c070d1aaf8630180343db50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdmN2RhYjI3NGZiNzVhZjljMDcwZDFhYWY4NjMwMTgwMzQzZGI1MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T10:50:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-09T10:50:32Z"}, "message": "[multiple changes]\n\n2012-07-09  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb, prj-util.adb, prj-util.ads, sem_ch13.adb: Minor\n\treformatting.\n\n2012-07-09  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_cat.adb (Check_Categorization_Dependencies):\n\tAllow dependence of both Remote_Types and Remote_Call_Interface\n\tdeclarations (not just Remote_Types units) on preelaborated\n\tunits, but require that the dependence be made via a private\n\twith_clause. Issue a specialized error message.\n\nFrom-SVN: r189371", "tree": {"sha": "8050d0260ecd2fab9b992c1040b1f8c709065f48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8050d0260ecd2fab9b992c1040b1f8c709065f48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7f7dab274fb75af9c070d1aaf8630180343db50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7f7dab274fb75af9c070d1aaf8630180343db50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7f7dab274fb75af9c070d1aaf8630180343db50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7f7dab274fb75af9c070d1aaf8630180343db50/comments", "author": null, "committer": null, "parents": [{"sha": "c1a9b6df9c71f5c3cd580de8bb426890f4093414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a9b6df9c71f5c3cd580de8bb426890f4093414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1a9b6df9c71f5c3cd580de8bb426890f4093414"}], "stats": {"total": 85, "additions": 59, "deletions": 26}, "files": [{"sha": "037566cc879787339f77a6b15ec0107557ec6888", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f7dab274fb75af9c070d1aaf8630180343db50/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f7dab274fb75af9c070d1aaf8630180343db50/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b7f7dab274fb75af9c070d1aaf8630180343db50", "patch": "@@ -1,3 +1,16 @@\n+2012-07-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb, prj-util.adb, prj-util.ads, sem_ch13.adb: Minor\n+\treformatting.\n+\n+2012-07-09  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_cat.adb (Check_Categorization_Dependencies):\n+\tAllow dependence of both Remote_Types and Remote_Call_Interface\n+\tdeclarations (not just Remote_Types units) on preelaborated\n+\tunits, but require that the dependence be made via a private\n+\twith_clause. Issue a specialized error message.\n+\n 2012-07-09  Pascal Obry  <obry@adacore.com>\n \n \t* prj-util.adb, prj-util.ads (For_Interface_Sources): New routine."}, {"sha": "4637e05f2fbb7e54ae276340ff712ab8f2b5dec0", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f7dab274fb75af9c070d1aaf8630180343db50/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f7dab274fb75af9c070d1aaf8630180343db50/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=b7f7dab274fb75af9c070d1aaf8630180343db50", "patch": "@@ -42,7 +42,7 @@ with Nmake;    use Nmake;\n with Opt;      use Opt;\n with Restrict; use Restrict;\n with Rident;   use Rident;\n-with Rtsfind; use Rtsfind;\n+with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Cat;  use Sem_Cat;\n@@ -1906,6 +1906,7 @@ package body Freeze is\n          Comp := First_Entity (Rec);\n          Prev := Empty;\n          while Present (Comp) loop\n+\n             --  Deal with delayed aspect specifications for components. The\n             --  analysis of the aspect is required to be delayed to the freeze\n             --  point, thus we analyze the pragma or attribute definition\n@@ -1914,7 +1915,7 @@ package body Freeze is\n             --  correspond to pragma/attribute definition clause.\n \n             if Ekind (Comp) = E_Component\n-               and then Has_Delayed_Aspects (Comp)\n+              and then Has_Delayed_Aspects (Comp)\n             then\n                Push_Scope (Rec);\n "}, {"sha": "1ad1aff58a72a9e4e4fc521b4c82dd0a2170c1e6", "filename": "gcc/ada/prj-util.adb", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f7dab274fb75af9c070d1aaf8630180343db50/gcc%2Fada%2Fprj-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f7dab274fb75af9c070d1aaf8630180343db50/gcc%2Fada%2Fprj-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-util.adb?ref=b7f7dab274fb75af9c070d1aaf8630180343db50", "patch": "@@ -398,15 +398,16 @@ package body Prj.Util is\n    ---------------------------\n \n    procedure For_Interface_Sources\n-     (Tree : Project_Tree_Ref; Project : Project_Id)\n+     (Tree    : Project_Tree_Ref;\n+      Project : Project_Id)\n    is\n       use Ada;\n       use type Ada.Containers.Count_Type;\n \n       package Dep_Names is new Containers.Indefinite_Ordered_Sets (String);\n \n       function Load_ALI (Filename : String) return ALI_Id;\n-      --  Load an ALI file and returns its id\n+      --  Load an ALI file and return its id\n \n       --------------\n       -- Load_ALI --\n@@ -416,6 +417,7 @@ package body Prj.Util is\n          Result   : ALI_Id := No_ALI_Id;\n          Text     : Text_Buffer_Ptr;\n          Lib_File : File_Name_Type;\n+\n       begin\n          if Directories.Exists (Filename) then\n             Name_Len := 0;\n@@ -435,6 +437,8 @@ package body Prj.Util is\n          return Result;\n       end Load_ALI;\n \n+      --  Local declarations\n+\n       Iter : Source_Iterator := For_Each_Source (Tree, Project);\n       Sid  : Source_Id;\n       ALI  : ALI_Id;\n@@ -444,8 +448,10 @@ package body Prj.Util is\n       Body_Needed : Boolean;\n       Deps        : Dep_Names.Set;\n \n+   --  Start of processing for For_Interface_Sources\n+\n    begin\n-      --  First look at all the spec, check if the body is needed\n+      --  First look at each spec, check if the body is needed\n \n       loop\n          Sid := Element (Iter);\n@@ -457,23 +463,23 @@ package body Prj.Util is\n          if Sid.Kind = Spec\n            and then not Sid.Locally_Removed\n            and then (Project.Standalone_Library = No\n-                     or else Sid.Declared_In_Interfaces)\n+                      or else Sid.Declared_In_Interfaces)\n          then\n             Action (Sid);\n \n             --  Check ALI for dependencies on body and sep\n \n-            ALI := Load_ALI\n-              (Get_Name_String (Get_Object_Directory (Sid.Project, True))\n-               & Get_Name_String (Sid.Dep_Name));\n+            ALI :=\n+              Load_ALI\n+                (Get_Name_String (Get_Object_Directory (Sid.Project, True))\n+                 & Get_Name_String (Sid.Dep_Name));\n \n             if ALI /= No_ALI_Id then\n                First_Unit := ALIs.Table (ALI).First_Unit;\n                Second_Unit := No_Unit_Id;\n                Body_Needed := True;\n \n-               --  If there is both a spec and a body, check if they are both\n-               --  needed.\n+               --  If there is both a spec and a body, check if both needed\n \n                if Units.Table (First_Unit).Utype = Is_Body then\n                   Second_Unit := ALIs.Table (ALI).Last_Unit;"}, {"sha": "661ab2d4ccf2feb4a686370d8d02617c0ee0011a", "filename": "gcc/ada/prj-util.ads", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f7dab274fb75af9c070d1aaf8630180343db50/gcc%2Fada%2Fprj-util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f7dab274fb75af9c070d1aaf8630180343db50/gcc%2Fada%2Fprj-util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-util.ads?ref=b7f7dab274fb75af9c070d1aaf8630180343db50", "patch": "@@ -236,13 +236,14 @@ package Prj.Util is\n    generic\n       with procedure Action (Source : Source_Id);\n    procedure For_Interface_Sources\n-     (Tree : Project_Tree_Ref; Project : Project_Id);\n-   --  Call Action for every sources that are needed to use Project. This\n-   --  is either the sources corresponding to the unit in the Interfaces\n-   --  attributes or all sources of the project. Note that only the body\n-   --  needed (because the unit if generic or contains some inline pragmas)\n-   --  are handled. This routine must be called only when the project as\n-   --  sucessfully been built.\n+     (Tree    : Project_Tree_Ref;\n+      Project : Project_Id);\n+   --  Call Action for every sources that are needed to use Project. This is\n+   --  either the sources corresponding to the units in attribute Interfaces or\n+   --  all sources of the project. Note that only the bodies that are needed\n+   --  (because the unit is generic or contains some inline pragmas) are\n+   --  handled. This routine must be called only when the project has been\n+   --  built successfully.\n \n private\n    type Text_File_Data is record"}, {"sha": "e5d4dfbadda6c428347e1b7c1705b22044f3ea56", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f7dab274fb75af9c070d1aaf8630180343db50/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f7dab274fb75af9c070d1aaf8630180343db50/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=b7f7dab274fb75af9c070d1aaf8630180343db50", "patch": "@@ -219,10 +219,14 @@ package body Sem_Cat is\n          then\n             null;\n \n-         --  Special case: Remote_Types can depend on Preelaborated per\n-         --  Ada 2005 AI 0206.\n-\n-         elsif Unit_Category = Remote_Types\n+         --  Special case: Remote_Types and Remote_Call_Interface declarations\n+         --  can depend on a preelaborated unit via a private with_clause, per\n+         --  AI05-0206.\n+\n+         elsif (Unit_Category = Remote_Types\n+                 or else Unit_Category = Remote_Call_Interface)\n+           and then (Nkind (N) = N_With_Clause\n+                      and then Private_Present (N))\n            and then Is_Preelaborated (Depended_Entity)\n          then\n             null;\n@@ -263,6 +267,17 @@ package body Sem_Cat is\n          then\n             return;\n \n+         --  Dependence of Remote_Types or Remote_Call_Interface declaration\n+         --  on a preelaborated unit with a normal with_clause.\n+\n+         elsif (Unit_Category = Remote_Types\n+                 or else Unit_Category = Remote_Call_Interface)\n+           and then Is_Preelaborated (Depended_Entity)\n+         then\n+            Error_Msg_NE\n+              (\"<must use private with clause for preelaborated unit& \",\n+               N, Depended_Entity);\n+\n          --  Subunit case\n \n          elsif Is_Subunit then"}, {"sha": "80b1ab17dae5ef0cb3b92401ca65ff2c2d542a8a", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7f7dab274fb75af9c070d1aaf8630180343db50/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7f7dab274fb75af9c070d1aaf8630180343db50/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=b7f7dab274fb75af9c070d1aaf8630180343db50", "patch": "@@ -6423,11 +6423,8 @@ package body Sem_Ch13 is\n          --  If the end of declarations comes before any other freeze\n          --  point, the Freeze_Expr is not analyzed: no check needed.\n \n-         if Analyzed (Freeze_Expr)\n-           and then not In_Instance\n-         then\n+         if Analyzed (Freeze_Expr) and then not In_Instance then\n             Check_Overloaded_Name;\n-\n          else\n             Err := False;\n          end if;"}]}