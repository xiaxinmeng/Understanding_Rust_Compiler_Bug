{"sha": "d6613781a50e6627d1f685e244d9b505f03b8423", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2MTM3ODFhNTBlNjYyN2QxZjY4NWUyNDRkOWI1MDVmMDNiODQyMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-11-16T23:19:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-11-16T23:19:44Z"}, "message": "rs6000: -mfused-madd cleanup\n\n\t* config.gcc [powerpc*, rs6000*] (extra_options): Add fused-madd.opt.\n\t* config/rs6000/rs6000.opt (mfused-madd): Remove.\n\t* config/rs6000/altivec.md (altivec_vmaddfp): Remove.\n\t(*altivec_vmaddfp_1): Remove.\n\t(*altivec_fmav4sf4): Rename from altivec_vmaddfp_2; use FMA.\n\t(altivec_mulv4sf3): Expand to FMA directly.\n\t(*altivec_vnmsubfp): Rename from altivec_vnmsubfp.\n\t(*altivec_vnmsubfp_1, *altivec_vnmsubfp_2): Remove.\n\t* config/rs6000/paired.md (paired_madds0): Use FMA.\n\t(paired_madds1): Likewise.\n\t(*paired_madd): Rename from paired_madd; use FMA.\n\t(*paired_msub, *paired_nmadd, *paired_nmsub): Similarly.\n\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Do not\n\tconsider TARGET_FUSED_MADD wrt rs6000_recip_control.\n\t(bdesc_3arg): Update CODE_FOR_* for pattern renames.\n\t(rs6000_emit_madd): Use fma_optab.\n\t(rs6000_emit_msub): Use fms_optab.\n\t(rs6000_emit_nmsub): Expand the FMA pattern directly.\n\t* config/rs6000/rs6000.md (FMA_F): New mode iterator.\n\t(*fmasf4_fpr): Rename from fmasf4_fpr.\n\t(*nfmasf4_fpr): Rename from *fnmasf4_fpr.\n\t(*nfmssf4_fpr): Rename from *fnmssf4_fpr.\n\t(*fmaddsf4_powerpc, *fmaddsf4_power, *fmsubsf4_powerpc): Remove.\n\t(*fmsubsf4_power, *fnmaddsf4_powerpc_1, *fnmaddsf4_powerpc_2): Remove.\n\t(*fnmaddsf4_power_1, *fnmaddsf4_power_2, *fnmsubsf4_powerpc_1): Remove.\n\t(*fnmsubsf4_powerpc_2, *fnmsubsf4_power_1, *fnmsubsf4_power_2): Remove.\n\t(*fmadf4_fpr): Rename from fmadf4_fpr.\n\t(*nfmadf4_fpr): Rename from *fnmadf4_fpr.\n\t(*nfmsdf4_fpr): Rename from *fnmsdf4_fpr.\n\t(*fmadddf4_fpr, *fmsubdf4_fpr, *fnmadddf4_fpr_1): Remove.\n\t(*fnmadddf4_fpr_2, *fnmsubdf4_fpr_1, *fnmsubdf4_fpr_2): Remove.\n\t(fmasf4, fmadf4): Macroize into...\n\t(fma<FMA_F>4): ... here.\n\t(fms<FMA_F>4, fnma<FMA_F>4, fnms<FMA_F>4): New.\n\t(nfma<FMA_F>4, nfms<FMA_F>4): New.\n\t* config/rs6000/vector.md (mul<VEC_F>3): Do not depend on\n\tTARGET_FUSED_MADD.\n\t* config/rs6000/vsx.md (vsx_fmadd<VSX_B>4): Remove.\n\t(*vsx_fmadd<mode>4_1): Remove.\n\t(vsx_fmsub<mode>4, *vsx_fmsub<mode>4_1): Remove.\n\t(vsx_fnmadd<mode>4_1, vsx_fnmadd<mode>4_2): Remove.\n\t(vsx_fnmsub<mode>4_1, vsx_fnmsub<mode>4_2): Remove.\n\t(*vsx_fma<mode>4): Rename from vsx_fmadd<mode>4_2.\n\t(*vsx_fms<mode>4): Rename from vsx_fmsub<mode>4_2.\n\t(*vsx_nfma<mode>4): Rename from vsx_fnmadd<mode>4.\n\t(*vsx_nfms<mode>4): Rename from vsx_fnmsub<mode>4.\n\ntestsuite/\n\t* gcc.target/powerpc/ppc-fma-2.c: Use -ffp-contract=off.\n\t* gcc.target/powerpc/ppc-fma-4.c: Likewise.\n\nFrom-SVN: r166837", "tree": {"sha": "ee2b3e9a02cd6a604c6679c969222b2f48ef52ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee2b3e9a02cd6a604c6679c969222b2f48ef52ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6613781a50e6627d1f685e244d9b505f03b8423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6613781a50e6627d1f685e244d9b505f03b8423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6613781a50e6627d1f685e244d9b505f03b8423", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6613781a50e6627d1f685e244d9b505f03b8423/comments", "author": null, "committer": null, "parents": [{"sha": "f9669294e1f92d9687bf023c23f44f0e816c507e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9669294e1f92d9687bf023c23f44f0e816c507e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9669294e1f92d9687bf023c23f44f0e816c507e"}], "stats": {"total": 909, "additions": 292, "deletions": 617}, "files": [{"sha": "6f6da0790385ae1db26f84599f54c1daecae1a47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6613781a50e6627d1f685e244d9b505f03b8423", "patch": "@@ -1,3 +1,52 @@\n+2010-11-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* config.gcc [powerpc*, rs6000*] (extra_options): Add fused-madd.opt.\n+\t* config/rs6000/rs6000.opt (mfused-madd): Remove.\n+\t* config/rs6000/altivec.md (altivec_vmaddfp): Remove.\n+\t(*altivec_vmaddfp_1): Remove.\n+\t(*altivec_fmav4sf4): Rename from altivec_vmaddfp_2; use FMA.\n+\t(altivec_mulv4sf3): Expand to FMA directly.\n+\t(*altivec_vnmsubfp): Rename from altivec_vnmsubfp.\n+\t(*altivec_vnmsubfp_1, *altivec_vnmsubfp_2): Remove.\n+\t* config/rs6000/paired.md (paired_madds0): Use FMA.\n+\t(paired_madds1): Likewise.\n+\t(*paired_madd): Rename from paired_madd; use FMA.\n+\t(*paired_msub, *paired_nmadd, *paired_nmsub): Similarly.\n+\t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok): Do not\n+\tconsider TARGET_FUSED_MADD wrt rs6000_recip_control.\n+\t(bdesc_3arg): Update CODE_FOR_* for pattern renames.\n+\t(rs6000_emit_madd): Use fma_optab.\n+\t(rs6000_emit_msub): Use fms_optab.\n+\t(rs6000_emit_nmsub): Expand the FMA pattern directly.\n+\t* config/rs6000/rs6000.md (FMA_F): New mode iterator.\n+\t(*fmasf4_fpr): Rename from fmasf4_fpr.\n+\t(*nfmasf4_fpr): Rename from *fnmasf4_fpr.\n+\t(*nfmssf4_fpr): Rename from *fnmssf4_fpr.\n+\t(*fmaddsf4_powerpc, *fmaddsf4_power, *fmsubsf4_powerpc): Remove.\n+\t(*fmsubsf4_power, *fnmaddsf4_powerpc_1, *fnmaddsf4_powerpc_2): Remove.\n+\t(*fnmaddsf4_power_1, *fnmaddsf4_power_2, *fnmsubsf4_powerpc_1): Remove.\n+\t(*fnmsubsf4_powerpc_2, *fnmsubsf4_power_1, *fnmsubsf4_power_2): Remove.\n+\t(*fmadf4_fpr): Rename from fmadf4_fpr.\n+\t(*nfmadf4_fpr): Rename from *fnmadf4_fpr.\n+\t(*nfmsdf4_fpr): Rename from *fnmsdf4_fpr.\n+\t(*fmadddf4_fpr, *fmsubdf4_fpr, *fnmadddf4_fpr_1): Remove.\n+\t(*fnmadddf4_fpr_2, *fnmsubdf4_fpr_1, *fnmsubdf4_fpr_2): Remove.\n+\t(fmasf4, fmadf4): Macroize into...\n+\t(fma<FMA_F>4): ... here.\n+\t(fms<FMA_F>4, fnma<FMA_F>4, fnms<FMA_F>4): New.\n+\t(nfma<FMA_F>4, nfms<FMA_F>4): New.\n+\t* config/rs6000/vector.md (mul<VEC_F>3): Do not depend on\n+\tTARGET_FUSED_MADD.\n+\t* config/rs6000/vsx.md (vsx_fmadd<VSX_B>4): Remove.\n+\t(*vsx_fmadd<mode>4_1): Remove.\n+\t(vsx_fmsub<mode>4, *vsx_fmsub<mode>4_1): Remove.\n+\t(vsx_fnmadd<mode>4_1, vsx_fnmadd<mode>4_2): Remove.\n+\t(vsx_fnmsub<mode>4_1, vsx_fnmsub<mode>4_2): Remove.\n+\t(*vsx_fma<mode>4): Rename from vsx_fmadd<mode>4_2.\n+\t(*vsx_fms<mode>4): Rename from vsx_fmsub<mode>4_2.\n+\t(*vsx_nfma<mode>4): Rename from vsx_fnmadd<mode>4.\n+\t(*vsx_nfms<mode>4): Rename from vsx_fnmsub<mode>4.\n+\n 2010-11-16  Richard Henderson  <rth@redhat.com>\n \n \t* config/pa/pa.md (fmadf4): Rename from unnamed; use FMA."}, {"sha": "0202a2293747718c084c785a5505050d4c25373f", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d6613781a50e6627d1f685e244d9b505f03b8423", "patch": "@@ -372,11 +372,11 @@ powerpc*-*-*)\n \t\tcpu_is_64bit=yes\n \t\t;;\n \tesac\n-\textra_options=\"${extra_options} g.opt\"\n+\textra_options=\"${extra_options} g.opt fused-madd.opt\"\n \t;;\n rs6000*-*-*)\n \tneed_64bit_hwint=yes\n-\textra_options=\"${extra_options} g.opt\"\n+\textra_options=\"${extra_options} g.opt fused-madd.opt\"\n \t;;\n score*-*-*)\n \tcpu_type=score"}, {"sha": "a173ede93e6bda5dbe7ad2d0ca417eb1c504f268", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 9, "deletions": 63, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=d6613781a50e6627d1f685e244d9b505f03b8423", "patch": "@@ -512,35 +512,9 @@\n   \"vsel %0,%3,%2,%1\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-;; Fused multiply add.  By default expand the FMA into (plus (mult)) to help\n-;; loop unrolling.  Don't do negate multiply ops, because of complications with\n-;; honoring signed zero and fused-madd.\n+;; Fused multiply add.\n \n-(define_expand \"altivec_vmaddfp\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n-\t(plus:V4SF (mult:V4SF (match_operand:V4SF 1 \"register_operand\" \"\")\n-\t\t\t      (match_operand:V4SF 2 \"register_operand\" \"\"))\n-\t  \t   (match_operand:V4SF 3 \"register_operand\" \"\")))]\n-  \"VECTOR_UNIT_ALTIVEC_P (V4SFmode)\"\n-{\n-  if (!TARGET_FUSED_MADD)\n-    {\n-      emit_insn (gen_altivec_vmaddfp_2 (operands[0], operands[1], operands[2],\n-\t\t\t\t\toperands[3]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*altivec_vmaddfp_1\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n-\t(plus:V4SF (mult:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")\n-\t\t\t      (match_operand:V4SF 2 \"register_operand\" \"v\"))\n-\t  \t   (match_operand:V4SF 3 \"register_operand\" \"v\")))]\n-  \"VECTOR_UNIT_ALTIVEC_P (V4SFmode) && TARGET_FUSED_MADD\"\n-  \"vmaddfp %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"vecfloat\")])\n-\n-(define_insn \"altivec_vmaddfp_2\"\n+(define_insn \"*altivec_fmav4sf4\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(fma:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")\n \t\t  (match_operand:V4SF 2 \"register_operand\" \"v\")\n@@ -552,11 +526,11 @@\n ;; We do multiply as a fused multiply-add with an add of a -0.0 vector.\n \n (define_expand \"altivec_mulv4sf3\"\n-  [(use (match_operand:V4SF 0 \"register_operand\" \"\"))\n-   (use (match_operand:V4SF 1 \"register_operand\" \"\"))\n-   (use (match_operand:V4SF 2 \"register_operand\" \"\"))]\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"\")\n+\t(fma:V4SF (match_operand:V4SF 1 \"register_operand\" \"\")\n+\t\t  (match_operand:V4SF 2 \"register_operand\" \"\")\n+\t\t  (match_dup 3)))]\n   \"VECTOR_UNIT_ALTIVEC_P (V4SFmode)\"\n-  \"\n {\n   rtx neg0;\n \n@@ -565,11 +539,8 @@\n   emit_insn (gen_altivec_vspltisw (neg0, constm1_rtx));\n   emit_insn (gen_vashlv4si3 (neg0, neg0, neg0));\n \n-  /* Use the multiply-add.  */\n-  emit_insn (gen_altivec_vmaddfp (operands[0], operands[1], operands[2],\n-\t\t\t\t  gen_lowpart (V4SFmode, neg0)));\n-  DONE;\n-}\")\n+  operands[3] = gen_lowpart (V4SFmode, neg0);\n+})\n \n ;; 32-bit integer multiplication\n ;; A_high = Operand_0 & 0xFFFF0000 >> 16\n@@ -653,7 +624,7 @@\n }\")\n \n ;; Fused multiply subtract \n-(define_insn \"altivec_vnmsubfp\"\n+(define_insn \"*altivec_vnmsubfp\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(neg:V4SF\n \t (fma:V4SF (match_operand:V4SF 1 \"register_operand\" \"v\")\n@@ -664,31 +635,6 @@\n   \"vnmsubfp %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecfloat\")])\n \n-(define_insn \"*altivec_vnmsubfp_1\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n-\t(neg:V4SF\n-\t (minus:V4SF\n-\t  (mult:V4SF\n-\t   (match_operand:V4SF 1 \"register_operand\" \"v\")\n-\t   (match_operand:V4SF 2 \"register_operand\" \"v\"))\n-\t  (match_operand:V4SF 3 \"register_operand\" \"v\"))))]\n-  \"VECTOR_UNIT_ALTIVEC_P (V4SFmode) && TARGET_FUSED_MADD\n-   && HONOR_SIGNED_ZEROS (SFmode)\"\n-  \"vnmsubfp %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"vecfloat\")])\n-\n-(define_insn \"*altivec_vnmsubfp_2\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n-\t(minus:V4SF\n-\t (match_operand:V4SF 3 \"register_operand\" \"v\")\n-\t (mult:V4SF\n-\t  (match_operand:V4SF 1 \"register_operand\" \"v\")\n-\t  (match_operand:V4SF 2 \"register_operand\" \"v\"))))]\n-  \"VECTOR_UNIT_ALTIVEC_P (V4SFmode) && TARGET_FUSED_MADD\n-   && !HONOR_SIGNED_ZEROS (SFmode)\"\n-  \"vnmsubfp %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"vecfloat\")])\n-\n (define_insn \"altivec_vmsumu<VI_char>m\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n         (unspec:V4SI [(match_operand:VIshort 1 \"register_operand\" \"v\")"}, {"sha": "f077d5b6f795d718dcf59cdf194092ce24cb81ad", "filename": "gcc/config/rs6000/paired.md", "status": "modified", "additions": 58, "deletions": 50, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Fpaired.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Fpaired.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpaired.md?ref=d6613781a50e6627d1f685e244d9b505f03b8423", "patch": "@@ -96,77 +96,85 @@\n \n (define_insn \"paired_madds0\"\n  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-                 (vec_concat:V2SF\n-                 (plus:SF (mult:SF (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n-\t\t\t\t\t\t  (parallel [(const_int 0)]))\n-\t\t\t\t   (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n-                                         (parallel [(const_int 0)])))\n-\t\t\t  (vec_select:SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n-                                         (parallel [(const_int 0)])))\n-\t\t (plus:SF (mult:SF (vec_select:SF (match_dup 1)\n-                                         (parallel [(const_int 1)]))\n-\t\t\t\t     (vec_select:SF (match_dup 2)\n-                                         (parallel [(const_int 0)])))\n-\t\t\t  (vec_select:SF (match_dup 3)\n-                                         (parallel [(const_int 1)])))))]\n-  \"TARGET_PAIRED_FLOAT && TARGET_FUSED_MADD\"\n+       (vec_concat:V2SF\n+\t (fma:SF\n+           (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t  (parallel [(const_int 0)]))\n+\t   (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+                          (parallel [(const_int 0)]))\n+\t   (vec_select:SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n+                          (parallel [(const_int 0)])))\n+\t (fma:SF\n+\t   (vec_select:SF (match_dup 1)\n+                          (parallel [(const_int 1)]))\n+\t   (vec_select:SF (match_dup 2)\n+                          (parallel [(const_int 0)]))\n+\t   (vec_select:SF (match_dup 3)\n+                          (parallel [(const_int 1)])))))]\n+  \"TARGET_PAIRED_FLOAT\"\n   \"ps_madds0 %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"paired_madds1\"\n  [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-                 (vec_concat:V2SF\n-                 (plus:SF (mult:SF (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n-                                                  (parallel [(const_int 0)]))\n-                                   (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n-                                         (parallel [(const_int 1)])))\n-                          (vec_select:SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n-                                         (parallel [(const_int 0)])))\n-                 (plus:SF (mult:SF (vec_select:SF (match_dup 1)\n-                                         (parallel [(const_int 1)]))\n-                                     (vec_select:SF (match_dup 2)\n-                                         (parallel [(const_int 1)])))\n-                          (vec_select:SF (match_dup 3)\n-                                         (parallel [(const_int 1)])))))]\n-  \"TARGET_PAIRED_FLOAT && TARGET_FUSED_MADD\"\n+       (vec_concat:V2SF\n+         (fma:SF\n+\t   (vec_select:SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+                          (parallel [(const_int 0)]))\n+           (vec_select:SF (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+                          (parallel [(const_int 1)]))\n+           (vec_select:SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")\n+                          (parallel [(const_int 0)])))\n+\t (fma:SF\n+\t   (vec_select:SF (match_dup 1)\n+                          (parallel [(const_int 1)]))\n+           (vec_select:SF (match_dup 2)\n+                          (parallel [(const_int 1)]))\n+           (vec_select:SF (match_dup 3)\n+                          (parallel [(const_int 1)])))))]\n+  \"TARGET_PAIRED_FLOAT\"\n   \"ps_madds1 %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"paired_madd\"\n+(define_insn \"*paired_madd\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(plus:V2SF (mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t      (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t   (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PAIRED_FLOAT && TARGET_FUSED_MADD\"\n+\t(fma:V2SF\n+\t  (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t  (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t  (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PAIRED_FLOAT\"\n   \"ps_madd %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")]) \n \n-(define_insn \"paired_msub\"\n+(define_insn \"*paired_msub\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(minus:V2SF (mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t       (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t    (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PAIRED_FLOAT && TARGET_FUSED_MADD\"\n+\t(fma:V2SF\n+\t  (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t  (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t  (neg:V2SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\"))))]\n+  \"TARGET_PAIRED_FLOAT\"\n   \"ps_msub %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"paired_nmadd\"\n+(define_insn \"*paired_nmadd\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(neg:V2SF (plus:V2SF (mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t\t\t(match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t\t     (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_PAIRED_FLOAT && TARGET_FUSED_MADD\n-   && HONOR_SIGNED_ZEROS (SFmode)\"\n+\t(neg:V2SF\n+\t  (fma:V2SF\n+\t    (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\"))))]\n+  \"TARGET_PAIRED_FLOAT\"\n   \"ps_nmadd %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"paired_nmsub\"\n+(define_insn \"*paired_nmsub\"\n   [(set (match_operand:V2SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(neg:V2SF (minus:V2SF (mult:V2SF (match_operand:V2SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t\t\t (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t\t      (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_PAIRED_FLOAT && TARGET_FUSED_MADD\n-   && HONOR_SIGNED_ZEROS (DFmode)\"\n+\t(neg:V2SF\n+\t  (fma:V2SF\n+\t    (match_operand:V2SF 1 \"gpc_reg_operand\" \"f\")\n+\t    (match_operand:V2SF 2 \"gpc_reg_operand\" \"f\")\n+\t    (neg:V2SF (match_operand:V2SF 3 \"gpc_reg_operand\" \"f\")))))]\n+  \"TARGET_PAIRED_FLOAT\"\n   \"ps_nmsub %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n "}, {"sha": "fe3d0db904ad8efa64107199e686ab4b0b58e38a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 50, "deletions": 100, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d6613781a50e6627d1f685e244d9b505f03b8423", "patch": "@@ -2288,16 +2288,13 @@ rs6000_init_hard_regno_mode_ok (void)\n \n   if (rs6000_recip_control)\n     {\n-      if (!TARGET_FUSED_MADD)\n-\twarning (0, \"-mrecip requires -mfused-madd\");\n       if (!flag_finite_math_only)\n \twarning (0, \"-mrecip requires -ffinite-math or -ffast-math\");\n       if (flag_trapping_math)\n \twarning (0, \"-mrecip requires -fno-trapping-math or -ffast-math\");\n       if (!flag_reciprocal_math)\n \twarning (0, \"-mrecip requires -freciprocal-math or -ffast-math\");\n-      if (TARGET_FUSED_MADD && flag_finite_math_only && !flag_trapping_math\n-\t  && flag_reciprocal_math)\n+      if (flag_finite_math_only && !flag_trapping_math && flag_reciprocal_math)\n \t{\n \t  if (RS6000_RECIP_HAVE_RE_P (SFmode)\n \t      && (rs6000_recip_control & RECIP_SF_DIV) != 0)\n@@ -9688,7 +9685,7 @@ def_builtin (int mask, const char *name, tree type, int code)\n \n static const struct builtin_description bdesc_3arg[] =\n {\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vmaddfp, \"__builtin_altivec_vmaddfp\", ALTIVEC_BUILTIN_VMADDFP },\n+  { MASK_ALTIVEC, CODE_FOR_fmav4sf4, \"__builtin_altivec_vmaddfp\", ALTIVEC_BUILTIN_VMADDFP },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vmhaddshs, \"__builtin_altivec_vmhaddshs\", ALTIVEC_BUILTIN_VMHADDSHS },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vmhraddshs, \"__builtin_altivec_vmhraddshs\", ALTIVEC_BUILTIN_VMHRADDSHS },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vmladduhm, \"__builtin_altivec_vmladduhm\", ALTIVEC_BUILTIN_VMLADDUHM},\n@@ -9698,7 +9695,7 @@ static const struct builtin_description bdesc_3arg[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_vmsumshm, \"__builtin_altivec_vmsumshm\", ALTIVEC_BUILTIN_VMSUMSHM },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vmsumuhs, \"__builtin_altivec_vmsumuhs\", ALTIVEC_BUILTIN_VMSUMUHS },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vmsumshs, \"__builtin_altivec_vmsumshs\", ALTIVEC_BUILTIN_VMSUMSHS },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vnmsubfp, \"__builtin_altivec_vnmsubfp\", ALTIVEC_BUILTIN_VNMSUBFP },\n+  { MASK_ALTIVEC, CODE_FOR_nfmsv4sf4, \"__builtin_altivec_vnmsubfp\", ALTIVEC_BUILTIN_VNMSUBFP },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vperm_v2df, \"__builtin_altivec_vperm_2df\", ALTIVEC_BUILTIN_VPERM_2DF },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vperm_v2di, \"__builtin_altivec_vperm_2di\", ALTIVEC_BUILTIN_VPERM_2DI },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vperm_v4sf, \"__builtin_altivec_vperm_4sf\", ALTIVEC_BUILTIN_VPERM_4SF },\n@@ -9740,15 +9737,15 @@ static const struct builtin_description bdesc_3arg[] =\n   { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_perm\", ALTIVEC_BUILTIN_VEC_PERM },\n   { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_sel\", ALTIVEC_BUILTIN_VEC_SEL },\n \n-  { MASK_VSX, CODE_FOR_vsx_fmaddv2df4, \"__builtin_vsx_xvmadddp\", VSX_BUILTIN_XVMADDDP },\n-  { MASK_VSX, CODE_FOR_vsx_fmsubv2df4, \"__builtin_vsx_xvmsubdp\", VSX_BUILTIN_XVMSUBDP },\n-  { MASK_VSX, CODE_FOR_vsx_fnmaddv2df4, \"__builtin_vsx_xvnmadddp\", VSX_BUILTIN_XVNMADDDP },\n-  { MASK_VSX, CODE_FOR_vsx_fnmsubv2df4, \"__builtin_vsx_xvnmsubdp\", VSX_BUILTIN_XVNMSUBDP },\n+  { MASK_VSX, CODE_FOR_fmav2df4, \"__builtin_vsx_xvmadddp\", VSX_BUILTIN_XVMADDDP },\n+  { MASK_VSX, CODE_FOR_fmsv2df4, \"__builtin_vsx_xvmsubdp\", VSX_BUILTIN_XVMSUBDP },\n+  { MASK_VSX, CODE_FOR_nfmav2df4, \"__builtin_vsx_xvnmadddp\", VSX_BUILTIN_XVNMADDDP },\n+  { MASK_VSX, CODE_FOR_nfmsv2df4, \"__builtin_vsx_xvnmsubdp\", VSX_BUILTIN_XVNMSUBDP },\n \n-  { MASK_VSX, CODE_FOR_vsx_fmaddv4sf4, \"__builtin_vsx_xvmaddsp\", VSX_BUILTIN_XVMADDSP },\n-  { MASK_VSX, CODE_FOR_vsx_fmsubv4sf4, \"__builtin_vsx_xvmsubsp\", VSX_BUILTIN_XVMSUBSP },\n-  { MASK_VSX, CODE_FOR_vsx_fnmaddv4sf4, \"__builtin_vsx_xvnmaddsp\", VSX_BUILTIN_XVNMADDSP },\n-  { MASK_VSX, CODE_FOR_vsx_fnmsubv4sf4, \"__builtin_vsx_xvnmsubsp\", VSX_BUILTIN_XVNMSUBSP },\n+  { MASK_VSX, CODE_FOR_fmav4sf4, \"__builtin_vsx_xvmaddsp\", VSX_BUILTIN_XVMADDSP },\n+  { MASK_VSX, CODE_FOR_fmsv4sf4, \"__builtin_vsx_xvmsubsp\", VSX_BUILTIN_XVMSUBSP },\n+  { MASK_VSX, CODE_FOR_nfmav4sf4, \"__builtin_vsx_xvnmaddsp\", VSX_BUILTIN_XVNMADDSP },\n+  { MASK_VSX, CODE_FOR_nfmsv4sf4, \"__builtin_vsx_xvnmsubsp\", VSX_BUILTIN_XVNMSUBSP },\n \n   { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_msub\", VSX_BUILTIN_VEC_MSUB },\n   { MASK_ALTIVEC, CODE_FOR_nothing, \"__builtin_vec_nmadd\", VSX_BUILTIN_VEC_NMADD },\n@@ -9793,12 +9790,12 @@ static const struct builtin_description bdesc_3arg[] =\n   { MASK_VSX, CODE_FOR_vsx_xxsldwi_v16qi, \"__builtin_vsx_xxsldwi_16qi\", VSX_BUILTIN_XXSLDWI_16QI },\n   { MASK_VSX, CODE_FOR_nothing, \"__builtin_vsx_xxsldwi\", VSX_BUILTIN_VEC_XXSLDWI },\n \n-  { 0, CODE_FOR_paired_msub, \"__builtin_paired_msub\", PAIRED_BUILTIN_MSUB },\n-  { 0, CODE_FOR_paired_madd, \"__builtin_paired_madd\", PAIRED_BUILTIN_MADD },\n+  { 0, CODE_FOR_fmsv2sf4, \"__builtin_paired_msub\", PAIRED_BUILTIN_MSUB },\n+  { 0, CODE_FOR_fmav2sf4, \"__builtin_paired_madd\", PAIRED_BUILTIN_MADD },\n   { 0, CODE_FOR_paired_madds0, \"__builtin_paired_madds0\", PAIRED_BUILTIN_MADDS0 },\n   { 0, CODE_FOR_paired_madds1, \"__builtin_paired_madds1\", PAIRED_BUILTIN_MADDS1 },\n-  { 0, CODE_FOR_paired_nmsub, \"__builtin_paired_nmsub\", PAIRED_BUILTIN_NMSUB },\n-  { 0, CODE_FOR_paired_nmadd, \"__builtin_paired_nmadd\", PAIRED_BUILTIN_NMADD },\n+  { 0, CODE_FOR_nfmsv2sf4, \"__builtin_paired_nmsub\", PAIRED_BUILTIN_NMSUB },\n+  { 0, CODE_FOR_nfmav2sf4, \"__builtin_paired_nmadd\", PAIRED_BUILTIN_NMADD },\n   { 0, CODE_FOR_paired_sum0, \"__builtin_paired_sum0\", PAIRED_BUILTIN_SUM0 },\n   { 0, CODE_FOR_paired_sum1, \"__builtin_paired_sum1\", PAIRED_BUILTIN_SUM1 },\n   { 0, CODE_FOR_selv2sf4, \"__builtin_paired_selv2sf4\", PAIRED_BUILTIN_SELV2SF4 },\n@@ -26394,112 +26391,65 @@ rs6000_load_constant_and_splat (enum machine_mode mode, REAL_VALUE_TYPE dconst)\n   return reg;\n }\n \n-/* Generate a FMADD instruction:\n-\tdst = (m1 * m2) + a\n-\n-   generating different RTL based on the fused multiply/add switch.  */\n+/* Generate an FMA instruction.  */\n \n static void\n-rs6000_emit_madd (rtx dst, rtx m1, rtx m2, rtx a)\n+rs6000_emit_madd (rtx target, rtx m1, rtx m2, rtx a)\n {\n-  enum machine_mode mode = GET_MODE (dst);\n-\n-  if (!TARGET_FUSED_MADD)\n-    {\n-      /* For the simple ops, use the generator function, rather than assuming\n-\t that the RTL is standard.  */\n-      enum insn_code mcode = optab_handler (smul_optab, mode);\n-      enum insn_code acode = optab_handler (add_optab, mode);\n-      gen_2arg_fn_t gen_mul = (gen_2arg_fn_t) GEN_FCN (mcode);\n-      gen_2arg_fn_t gen_add = (gen_2arg_fn_t) GEN_FCN (acode);\n-      rtx mreg = gen_reg_rtx (mode);\n+  enum machine_mode mode = GET_MODE (target);\n+  rtx dst;\n \n-      gcc_assert (mcode != CODE_FOR_nothing && acode != CODE_FOR_nothing);\n-      emit_insn (gen_mul (mreg, m1, m2));\n-      emit_insn (gen_add (dst, mreg, a));\n-    }\n+  dst = expand_ternary_op (mode, fma_optab, m1, m2, a, target, 0);\n+  gcc_assert (dst != NULL);\n \n-  else\n-    emit_insn (gen_rtx_SET (VOIDmode, dst,\n-\t\t\t    gen_rtx_PLUS (mode,\n-\t\t\t\t\t  gen_rtx_MULT (mode, m1, m2),\n-\t\t\t\t\t  a)));\n+  if (dst != target)\n+    emit_move_insn (target, dst);\n }\n \n-/* Generate a FMSUB instruction:\n-\tdst = (m1 * m2) - a\n-\n-   generating different RTL based on the fused multiply/add switch.  */\n+/* Generate a FMSUB instruction: dst = fma(m1, m2, -a).  */\n \n static void\n-rs6000_emit_msub (rtx dst, rtx m1, rtx m2, rtx a)\n+rs6000_emit_msub (rtx target, rtx m1, rtx m2, rtx a)\n {\n-  enum machine_mode mode = GET_MODE (dst);\n+  enum machine_mode mode = GET_MODE (target);\n+  rtx dst;\n \n-  if (!TARGET_FUSED_MADD\n-      || (mode == V4SFmode && VECTOR_UNIT_ALTIVEC_P (V4SFmode)))\n+  /* Altivec does not support fms directly;\n+     generate in terms of fma in that case.  */\n+  if (optab_handler (fms_optab, mode) != CODE_FOR_nothing)\n+    dst = expand_ternary_op (mode, fms_optab, m1, m2, a, target, 0);\n+  else\n     {\n-      /* For the simple ops, use the generator function, rather than assuming\n-\t that the RTL is standard.  */\n-      enum insn_code mcode = optab_handler (smul_optab, mode);\n-      enum insn_code scode = optab_handler (add_optab, mode);\n-      gen_2arg_fn_t gen_mul = (gen_2arg_fn_t) GEN_FCN (mcode);\n-      gen_2arg_fn_t gen_sub = (gen_2arg_fn_t) GEN_FCN (scode);\n-      rtx mreg = gen_reg_rtx (mode);\n-\n-      gcc_assert (mcode != CODE_FOR_nothing && scode != CODE_FOR_nothing);\n-      emit_insn (gen_mul (mreg, m1, m2));\n-      emit_insn (gen_sub (dst, mreg, a));\n+      a = expand_unop (mode, neg_optab, a, NULL_RTX, 0);\n+      dst = expand_ternary_op (mode, fma_optab, m1, m2, a, target, 0);\n     }\n+  gcc_assert (dst != NULL);\n \n-  else\n-    emit_insn (gen_rtx_SET (VOIDmode, dst,\n-\t\t\t    gen_rtx_MINUS (mode,\n-\t\t\t\t\t   gen_rtx_MULT (mode, m1, m2),\n-\t\t\t\t\t   a)));\n+  if (dst != target)\n+    emit_move_insn (target, dst);\n }\n-\n-/* Generate a FNMSUB instruction:\n-\tdst = - ((m1 * m2) - a)\n-\n-   Which is equivalent to (except in the prescence of -0.0):\n-\tdst = a - (m1 * m2)\n-\n-   generating different RTL based on the fast-math and fused multiply/add\n-   switches.  */\n+    \n+/* Generate a FNMSUB instruction: dst = -fma(m1, m2, -a).  */\n \n static void\n rs6000_emit_nmsub (rtx dst, rtx m1, rtx m2, rtx a)\n {\n   enum machine_mode mode = GET_MODE (dst);\n+  rtx r;\n \n-  if (!TARGET_FUSED_MADD)\n-    {\n-      /* For the simple ops, use the generator function, rather than assuming\n-\t that the RTL is standard.  */\n-      enum insn_code mcode = optab_handler (smul_optab, mode);\n-      enum insn_code scode = optab_handler (sub_optab, mode);\n-      gen_2arg_fn_t gen_mul = (gen_2arg_fn_t) GEN_FCN (mcode);\n-      gen_2arg_fn_t gen_sub = (gen_2arg_fn_t) GEN_FCN (scode);\n-      rtx mreg = gen_reg_rtx (mode);\n-\n-      gcc_assert (mcode != CODE_FOR_nothing && scode != CODE_FOR_nothing);\n-      emit_insn (gen_mul (mreg, m1, m2));\n-      emit_insn (gen_sub (dst, a, mreg));\n-    }\n+  /* This is a tad more complicated, since the fnma_optab is for\n+     a different expression: fma(-m1, m2, a), which is the same\n+     thing except in the case of signed zeros.\n \n-  else\n-    {\n-      rtx m = gen_rtx_MULT (mode, m1, m2);\n+     Fortunately we know that if FMA is supported that FNMSUB is\n+     also supported in the ISA.  Just expand it directly.  */\n \n-      if (!HONOR_SIGNED_ZEROS (mode))\n-\temit_insn (gen_rtx_SET (VOIDmode, dst, gen_rtx_MINUS (mode, a, m)));\n+  gcc_assert (optab_handler (fma_optab, mode) != CODE_FOR_nothing);\n \n-      else\n-\temit_insn (gen_rtx_SET (VOIDmode, dst,\n-\t\t\t\tgen_rtx_NEG (mode,\n-\t\t\t\t\t     gen_rtx_MINUS (mode, m, a))));\n-    }\n+  r = gen_rtx_NEG (mode, a);\n+  r = gen_rtx_FMA (mode, m1, m2, r);\n+  r = gen_rtx_NEG (mode, r);\n+  emit_insn (gen_rtx_SET (VOIDmode, dst, r));\n }\n \n /* Newton-Raphson approximation of floating point divide with just 2 passes"}, {"sha": "2d73bd83aed70bd607707617e9eb87554e501cb2", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 99, "deletions": 236, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d6613781a50e6627d1f685e244d9b505f03b8423", "patch": "@@ -226,6 +226,16 @@\n   (DD \"TARGET_DFP\")\n   (TD \"TARGET_DFP\")])\n \n+; Any fma capable floating-point mode.\n+(define_mode_iterator FMA_F [\n+  (SF \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\")\n+  (DF \"(TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT)\n+       || VECTOR_UNIT_VSX_P (DFmode)\")\n+  (V2SF \"TARGET_PAIRED_FLOAT\")\n+  (V4SF \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\")\n+  (V2DF \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (V2DFmode)\")\n+  ])\n+\n ; These modes do not fit in integer registers in 32-bit mode.\n ; but on e500v2, the gpr are 64 bit registers\n (define_mode_iterator DIFD [DI (DF \"!TARGET_E500_DOUBLE\") DD])\n@@ -5845,28 +5855,17 @@\n   [(set_attr \"type\" \"fp\")])\n \n ; builtin fmaf support\n-; If the user explicitly uses the fma builtin, don't convert this to\n-; (plus (mult op1 op2) op3)\n-(define_expand \"fmasf4\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n-\t(fma:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:SF 2 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:SF 3 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n-  \"\")\n-\n-(define_insn \"fmasf4_fpr\"\n+(define_insn \"*fmasf4_fpr\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(fma:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n-  \"*\n {\n-  return ((TARGET_POWERPC)\n-\t  ? \\\"fmadds %0,%1,%2,%3\\\"\n-\t  : \\\"{fma|fmadd} %0,%1,%2,%3\\\");\n-}\"\n+  return (TARGET_POWERPC\n+\t  ? \"fmadds %0,%1,%2,%3\"\n+\t  : \"{fma|fmadd} %0,%1,%2,%3\");\n+}\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n@@ -5876,168 +5875,42 @@\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t(neg:SF (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n-  \"*\n {\n-  return ((TARGET_POWERPC)\n-\t  ? \\\"fmsubs %0,%1,%2,%3\\\"\n-\t  : \\\"{fms|fmsub} %0,%1,%2,%3\\\");\n-}\"\n+  return (TARGET_POWERPC\n+\t  ? \"fmsubs %0,%1,%2,%3\"\n+\t  : \"{fms|fmsub} %0,%1,%2,%3\");\n+}\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n-(define_insn \"*fnmasf4_fpr\"\n+(define_insn \"*nfmasf4_fpr\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:SF (fma:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t(match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n-  \"*\n {\n-  return ((TARGET_POWERPC)\n-\t  ? \\\"fnmadds %0,%1,%2,%3\\\"\n-\t  : \\\"{fnma|fnmadd} %0,%1,%2,%3\\\");\n-}\"\n+  return (TARGET_POWERPC\n+\t  ? \"fnmadds %0,%1,%2,%3\"\n+\t  : \"{fnma|fnmadd} %0,%1,%2,%3\");\n+}\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n-(define_insn \"*fnmssf4_fpr\"\n+(define_insn \"*nfmssf4_fpr\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:SF (fma:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t(neg:SF (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n-  \"*\n {\n-  return ((TARGET_POWERPC)\n-\t  ? \\\"fnmsubs %0,%1,%2,%3\\\"\n-\t  : \\\"{fnms|fnmsub} %0,%1,%2,%3\\\");\n-}\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n-\n-; Fused multiply/add ops created by the combiner\n-(define_insn \"*fmaddsf4_powerpc\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\n-   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n-  \"fmadds %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n- \n-(define_insn \"*fmaddsf4_power\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n-  \"{fma|fmadd} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n-\n-(define_insn \"*fmsubsf4_powerpc\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\n-   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n-  \"fmsubs %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n-\n-(define_insn \"*fmsubsf4_power\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n-  \"{fms|fmsub} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n-\n-(define_insn \"*fnmaddsf4_powerpc_1\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(neg:SF (plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && TARGET_SINGLE_FLOAT\"\n-  \"fnmadds %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n-\n-(define_insn \"*fnmaddsf4_powerpc_2\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(minus:SF (mult:SF (neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\"))\n-\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_SINGLE_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && ! HONOR_SIGNED_ZEROS (SFmode)\"\n-  \"fnmadds %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n-\n-(define_insn \"*fnmaddsf4_power_1\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(neg:SF (plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n-  \"{fnma|fnmadd} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n-\n-(define_insn \"*fnmaddsf4_power_2\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(minus:SF (mult:SF (neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\"))\n-\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && ! HONOR_SIGNED_ZEROS (SFmode)\"\n-  \"{fnma|fnmadd} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n-\n-(define_insn \"*fnmsubsf4_powerpc_1\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(neg:SF (minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && TARGET_SINGLE_FLOAT\"\n-  \"fnmsubs %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"fp\")\n-   (set_attr \"fp_type\" \"fp_maddsub_s\")])\n-\n-(define_insn \"*fnmsubsf4_powerpc_2\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(minus:SF (match_operand:SF 3 \"gpc_reg_operand\" \"f\")\n-\t\t  (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && TARGET_SINGLE_FLOAT && ! HONOR_SIGNED_ZEROS (SFmode)\"\n-  \"fnmsubs %0,%1,%2,%3\"\n+  return (TARGET_POWERPC\n+\t  ? \"fnmsubs %0,%1,%2,%3\"\n+\t  : \"{fnms|fnmsub} %0,%1,%2,%3\");\n+}\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n-(define_insn \"*fnmsubsf4_power_1\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(neg:SF (minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n-\t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n-  \"{fnms|fnmsub} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n-\n-(define_insn \"*fnmsubsf4_power_2\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(minus:SF (match_operand:SF 3 \"gpc_reg_operand\" \"f\")\n-\t\t  (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n-\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && ! HONOR_SIGNED_ZEROS (SFmode)\"\n-  \"{fnms|fnmsub} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")])\n-\n (define_expand \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n@@ -6385,17 +6258,7 @@\n   [(set_attr \"type\" \"fp\")])\n \n ; builtin fma support\n-; If the user explicitly uses the fma builtin, don't convert this to\n-; (plus (mult op1 op2) op3)\n-(define_expand \"fmadf4\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n-\t(fma:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:DF 2 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:DF 3 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n-  \"\")\n-\n-(define_insn \"fmadf4_fpr\"\n+(define_insn \"*fmadf4_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(fma:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:DF 2 \"gpc_reg_operand\" \"f\")\n@@ -6417,7 +6280,7 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n-(define_insn \"*fnmadf4_fpr\"\n+(define_insn \"*nfmadf4_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:DF (fma:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t\t(match_operand:DF 2 \"gpc_reg_operand\" \"f\")\n@@ -6428,7 +6291,7 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n-(define_insn \"*fnmsdf4_fpr\"\n+(define_insn \"*nfmsdf4_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:DF (fma:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t\t(match_operand:DF 2 \"gpc_reg_operand\" \"f\")\n@@ -6439,73 +6302,6 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_s\")])\n \n-; Fused multiply/add ops created by the combiner\n-(define_insn \"*fmadddf4_fpr\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d\")\n-\t(plus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%d\")\n-\t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"d\"))\n-\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"d\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n-   && VECTOR_UNIT_NONE_P (DFmode)\"\n-  \"{fma|fmadd} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")\n-   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n-\n-(define_insn \"*fmsubdf4_fpr\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d\")\n-\t(minus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%d\")\n-\t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"d\"))\n-\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"d\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n-   && VECTOR_UNIT_NONE_P (DFmode)\"\n-  \"{fms|fmsub} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")\n-   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n-\n-(define_insn \"*fnmadddf4_fpr_1\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d\")\n-\t(neg:DF (plus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%d\")\n-\t\t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"d\"))\n-\t\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"d\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n-   && VECTOR_UNIT_NONE_P (DFmode)\"\n-  \"{fnma|fnmadd} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")\n-   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n-\n-(define_insn \"*fnmadddf4_fpr_2\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d\")\n-\t(minus:DF (mult:DF (neg:DF (match_operand:DF 1 \"gpc_reg_operand\" \"d\"))\n-\t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"d\"))\n-\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"d\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n-   && ! HONOR_SIGNED_ZEROS (DFmode) && VECTOR_UNIT_NONE_P (DFmode)\"\n-  \"{fnma|fnmadd} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")\n-   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n-\n-(define_insn \"*fnmsubdf4_fpr_1\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d\")\n-\t(neg:DF (minus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%d\")\n-\t\t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"d\"))\n-\t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"d\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n-   && VECTOR_UNIT_NONE_P (DFmode)\"\n-  \"{fnms|fnmsub} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")\n-   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n-\n-(define_insn \"*fnmsubdf4_fpr_2\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d\")\n-\t(minus:DF (match_operand:DF 3 \"gpc_reg_operand\" \"d\")\n-\t          (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%d\")\n-\t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"d\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n-   && ! HONOR_SIGNED_ZEROS (DFmode) && VECTOR_UNIT_NONE_P (DFmode)\"\n-  \"{fnms|fnmsub} %0,%1,%2,%3\"\n-  [(set_attr \"type\" \"dmul\")\n-   (set_attr \"fp_type\" \"fp_maddsub_d\")])\n-\n (define_expand \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(sqrt:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n@@ -16309,6 +16105,73 @@\n   \"bpermd %0,%1,%2\"\n   [(set_attr \"type\" \"integer\")])\n \n+\f\n+;; Builtin fma support.  Handle \n+;; Note that the conditions for expansion are in the FMA_F iterator.\n+\n+(define_expand \"fma<mode>4\"\n+  [(set (match_operand:FMA_F 0 \"register_operand\" \"\")\n+\t(fma:FMA_F\n+\t  (match_operand:FMA_F 1 \"register_operand\" \"\")\n+\t  (match_operand:FMA_F 2 \"register_operand\" \"\")\n+\t  (match_operand:FMA_F 3 \"register_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+; Altivec only has fma and nfms.\n+(define_expand \"fms<mode>4\"\n+  [(set (match_operand:FMA_F 0 \"register_operand\" \"\")\n+\t(fma:FMA_F\n+\t  (match_operand:FMA_F 1 \"register_operand\" \"\")\n+\t  (match_operand:FMA_F 2 \"register_operand\" \"\")\n+\t  (neg:FMA_F (match_operand:FMA_F 3 \"register_operand\" \"\"))))]\n+  \"!VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n+  \"\")\n+\n+;; If signed zeros are ignored, -(a * b - c) = -a * b + c.\n+(define_expand \"fnma<mode>4\"\n+  [(set (match_operand:FMA_F 0 \"register_operand\" \"\")\n+\t(neg:FMA_F\n+\t  (fma:FMA_F\n+\t    (match_operand:FMA_F 1 \"register_operand\" \"\")\n+\t    (match_operand:FMA_F 2 \"register_operand\" \"\")\n+\t    (neg:FMA_F (match_operand:FMA_F 3 \"register_operand\" \"\")))))]\n+  \"!HONOR_SIGNED_ZEROS (<MODE>mode)\"\n+  \"\")\n+\n+;; If signed zeros are ignored, -(a * b + c) = -a * b - c.\n+(define_expand \"fnms<mode>4\"\n+  [(set (match_operand:FMA_F 0 \"register_operand\" \"\")\n+\t(neg:FMA_F\n+\t  (fma:FMA_F\n+\t    (match_operand:FMA_F 1 \"register_operand\" \"\")\n+\t    (match_operand:FMA_F 2 \"register_operand\" \"\")\n+\t    (match_operand:FMA_F 3 \"register_operand\" \"\"))))]\n+  \"!HONOR_SIGNED_ZEROS (<MODE>mode) && !VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n+  \"\")\n+\n+; Not an official optab name, but used from builtins.\n+(define_expand \"nfma<mode>4\"\n+  [(set (match_operand:FMA_F 0 \"register_operand\" \"\")\n+\t(neg:FMA_F\n+\t  (fma:FMA_F\n+\t    (match_operand:FMA_F 1 \"register_operand\" \"\")\n+\t    (match_operand:FMA_F 2 \"register_operand\" \"\")\n+\t    (match_operand:FMA_F 3 \"register_operand\" \"\"))))]\n+  \"!VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n+  \"\")\n+\n+; Not an official optab name, but used from builtins.\n+(define_expand \"nfms<mode>4\"\n+  [(set (match_operand:FMA_F 0 \"register_operand\" \"\")\n+\t(neg:FMA_F\n+\t  (fma:FMA_F\n+\t    (match_operand:FMA_F 1 \"register_operand\" \"\")\n+\t    (match_operand:FMA_F 2 \"register_operand\" \"\")\n+\t    (neg:FMA_F (match_operand:FMA_F 3 \"register_operand\" \"\")))))]\n+  \"\"\n+  \"\")\n+\n \f\n \n (include \"sync.md\")"}, {"sha": "063036ac85c662a9732059355730818738ce9dda", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=d6613781a50e6627d1f685e244d9b505f03b8423", "patch": "@@ -176,10 +176,6 @@ mavoid-indexed-addresses\n Target Report Var(TARGET_AVOID_XFORM) Init(-1)\n Avoid generation of indexed load/store instructions when possible\n \n-mfused-madd\n-Target Report Var(TARGET_FUSED_MADD) Init(1)\n-Generate fused multiply/add instructions\n-\n mtls-markers\n Target Report Var(tls_markers) Init(1)\n Mark __tls_get_addr calls with argument info"}, {"sha": "71961fbc57c42d9973fcdc19180d025c173a103a", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=d6613781a50e6627d1f685e244d9b505f03b8423", "patch": "@@ -202,16 +202,14 @@\n   [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n \t(mult:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n \t\t    (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n-  \"(VECTOR_UNIT_VSX_P (<MODE>mode)\n-    || (VECTOR_UNIT_ALTIVEC_P (<MODE>mode) && TARGET_FUSED_MADD))\"\n-  \"\n+  \"VECTOR_UNIT_VSX_P (<MODE>mode) || VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n {\n   if (<MODE>mode == V4SFmode && VECTOR_UNIT_ALTIVEC_P (<MODE>mode))\n     {\n       emit_insn (gen_altivec_mulv4sf3 (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n-}\")\n+})\n \n (define_expand \"div<mode>3\"\n   [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")"}, {"sha": "e241e26db8960995196a2dcfeb60f1b6a3128538", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 16, "deletions": 156, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=d6613781a50e6627d1f685e244d9b505f03b8423", "patch": "@@ -513,51 +513,12 @@\n \n ;; Fused vector multiply/add instructions\n \n-;; Note we have a pattern for the multiply/add operations that uses unspec and\n-;; does not check -mfused-madd to allow users to use these ops when they know\n-;; they want the fused multiply/add.\n-\n-;; Fused multiply add.  By default expand the FMA into (plus (mult)) to help\n-;; loop unrolling.  Don't do negate multiply ops, because of complications with\n-;; honoring signed zero and fused-madd.\n-\n-(define_expand \"vsx_fmadd<mode>4\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"\")\n-\t(plus:VSX_B\n-\t (mult:VSX_B (match_operand:VSX_B 1 \"vsx_register_operand\" \"\")\n-\t\t     (match_operand:VSX_B 2 \"vsx_register_operand\" \"\"))\n-\t (match_operand:VSX_B 3 \"vsx_register_operand\" \"\")))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-{\n-  if (!TARGET_FUSED_MADD)\n-    {\n-      emit_insn (gen_vsx_fmadd<mode>4_2 (operands[0], operands[1],\n-\t\t\t\t\t operands[2], operands[3]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*vsx_fmadd<mode>4_1\"\n+(define_insn \"*vsx_fma<mode>4\"\n   [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n-\t(plus:VSX_B\n-\t (mult:VSX_B\n+\t(fma:VSX_B\n \t  (match_operand:VSX_B 1 \"vsx_register_operand\" \"%<VSr>,<VSr>,wa,wa\")\n-\t  (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\"))\n-\t (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\")))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode) && TARGET_FUSED_MADD\"\n-  \"@\n-   x<VSv>madda<VSs> %x0,%x1,%x2\n-   x<VSv>maddm<VSs> %x0,%x1,%x3\n-   x<VSv>madda<VSs> %x0,%x1,%x2\n-   x<VSv>maddm<VSs> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"<VStype_mul>\")\n-   (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n-\n-(define_insn \"vsx_fmadd<mode>4_2\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n-\t(fma:VSX_B (match_operand:VSX_B 1 \"vsx_register_operand\" \"%<VSr>,<VSr>,wa,wa\")\n-\t\t   (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\")\n-\t\t   (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\")))]\n+\t  (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\")\n+\t  (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\")))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"@\n    x<VSv>madda<VSs> %x0,%x1,%x2\n@@ -567,44 +528,13 @@\n   [(set_attr \"type\" \"<VStype_mul>\")\n    (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n \n-(define_expand \"vsx_fmsub<mode>4\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"\")\n-\t(minus:VSX_B\n-\t (mult:VSX_B (match_operand:VSX_B 1 \"vsx_register_operand\" \"\")\n-\t\t     (match_operand:VSX_B 2 \"vsx_register_operand\" \"\"))\n-\t (match_operand:VSX_B 3 \"vsx_register_operand\" \"\")))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-{\n-  if (!TARGET_FUSED_MADD)\n-    {\n-      emit_insn (gen_vsx_fmsub<mode>4_2 (operands[0], operands[1],\n-\t\t\t\t\t operands[2], operands[3]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*vsx_fmsub<mode>4_1\"\n+(define_insn \"*vsx_fms<mode>4\"\n   [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n-\t(minus:VSX_B\n-\t (mult:VSX_B\n+\t(fma:VSX_B\n \t  (match_operand:VSX_B 1 \"vsx_register_operand\" \"%<VSr>,<VSr>,wa,wa\")\n-\t  (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\"))\n-\t (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\")))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode) && TARGET_FUSED_MADD\"\n-  \"@\n-   x<VSv>msuba<VSs> %x0,%x1,%x2\n-   x<VSv>msubm<VSs> %x0,%x1,%x3\n-   x<VSv>msuba<VSs> %x0,%x1,%x2\n-   x<VSv>msubm<VSs> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"<VStype_mul>\")\n-   (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n-\n-(define_insn \"vsx_fmsub<mode>4_2\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n-\t(fma:VSX_B (match_operand:VSX_B 1 \"vsx_register_operand\" \"%<VSr>,<VSr>,wa,wa\")\n-\t\t   (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\")\n-\t\t   (neg:VSX_B\n-\t\t    (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\"))))]\n+\t  (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\")\n+\t  (neg:VSX_B\n+\t    (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\"))))]\n   \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"@\n    x<VSv>msuba<VSs> %x0,%x1,%x2\n@@ -614,7 +544,7 @@\n   [(set_attr \"type\" \"<VStype_mul>\")\n    (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n \n-(define_insn \"vsx_fnmadd<mode>4\"\n+(define_insn \"*vsx_nfma<mode>4\"\n   [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n \t(neg:VSX_B\n \t (fma:VSX_B\n@@ -630,85 +560,15 @@\n   [(set_attr \"type\" \"<VStype_mul>\")\n    (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n \n-(define_insn \"vsx_fnmadd<mode>4_1\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n-\t(neg:VSX_B\n-\t (plus:VSX_B\n-\t  (mult:VSX_B\n-\t   (match_operand:VSX_B 1 \"vsx_register_operand\" \"<VSr>,<VSr>,wa,wa\")\n-\t   (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\"))\n-\t  (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\"))))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode) && TARGET_FUSED_MADD\n-   && HONOR_SIGNED_ZEROS (DFmode)\"\n-  \"@\n-   x<VSv>nmadda<VSs> %x0,%x1,%x2\n-   x<VSv>nmaddm<VSs> %x0,%x1,%x3\n-   x<VSv>nmadda<VSs> %x0,%x1,%x2\n-   x<VSv>nmaddm<VSs> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"<VStype_mul>\")\n-   (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n-\n-(define_insn \"vsx_fnmadd<mode>4_2\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n-\t(minus:VSX_B\n-\t (mult:VSX_B\n-\t  (neg:VSX_B\n-\t   (match_operand:VSX_B 1 \"gpc_reg_operand\" \"<VSr>,<VSr>,wa,wa\"))\n-\t  (match_operand:VSX_B 2 \"gpc_reg_operand\" \"<VSr>,0,wa,0\"))\n-\t (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\")))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode) && TARGET_FUSED_MADD\n-   && !HONOR_SIGNED_ZEROS (DFmode)\"\n-  \"@\n-   x<VSv>nmadda<VSs> %x0,%x1,%x2\n-   x<VSv>nmaddm<VSs> %x0,%x1,%x3\n-   x<VSv>nmadda<VSs> %x0,%x1,%x2\n-   x<VSv>nmaddm<VSs> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"<VStype_mul>\")\n-   (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n-\n-(define_insn \"vsx_fnmsub<mode>4\"\n+(define_insn \"*vsx_nfms<mode>4\"\n   [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n \t(neg:VSX_B\n-\t (fma:VSX_B (match_operand:VSX_B 1 \"vsx_register_operand\" \"%<VSr>,<VSr>,wa,wa\")\n-\t\t    (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\")\n-\t\t    (neg:VSX_B\n-\t\t     (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\")))))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n-  \"@\n-   x<VSv>nmsuba<VSs> %x0,%x1,%x2\n-   x<VSv>nmsubm<VSs> %x0,%x1,%x3\n-   x<VSv>nmsuba<VSs> %x0,%x1,%x2\n-   x<VSv>nmsubm<VSs> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"<VStype_mul>\")\n-   (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n-\n-(define_insn \"vsx_fnmsub<mode>4_1\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n-\t(neg:VSX_B\n-\t (minus:VSX_B\n-\t  (mult:VSX_B\n+\t (fma:VSX_B\n \t   (match_operand:VSX_B 1 \"vsx_register_operand\" \"%<VSr>,<VSr>,wa,wa\")\n-\t   (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\"))\n-\t  (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\"))))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode) && TARGET_FUSED_MADD\n-   && HONOR_SIGNED_ZEROS (DFmode)\"\n-  \"@\n-   x<VSv>nmsuba<VSs> %x0,%x1,%x2\n-   x<VSv>nmsubm<VSs> %x0,%x1,%x3\n-   x<VSv>nmsuba<VSs> %x0,%x1,%x2\n-   x<VSv>nmsubm<VSs> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"<VStype_mul>\")\n-   (set_attr \"fp_type\" \"<VSfptype_mul>\")])\n-\n-(define_insn \"vsx_fnmsub<mode>4_2\"\n-  [(set (match_operand:VSX_B 0 \"vsx_register_operand\" \"=<VSr>,<VSr>,?wa,?wa\")\n-\t(minus:VSX_B\n-\t (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\")\n-\t (mult:VSX_B\n-\t  (match_operand:VSX_B 1 \"vsx_register_operand\" \"%<VSr>,<VSr>,wa,wa\")\n-\t  (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\"))))]\n-  \"VECTOR_UNIT_VSX_P (<MODE>mode) && TARGET_FUSED_MADD\n-   && !HONOR_SIGNED_ZEROS (DFmode)\"\n+\t   (match_operand:VSX_B 2 \"vsx_register_operand\" \"<VSr>,0,wa,0\")\n+\t   (neg:VSX_B\n+\t     (match_operand:VSX_B 3 \"vsx_register_operand\" \"0,<VSr>,0,wa\")))))]\n+  \"VECTOR_UNIT_VSX_P (<MODE>mode)\"\n   \"@\n    x<VSv>nmsuba<VSs> %x0,%x1,%x2\n    x<VSv>nmsubm<VSs> %x0,%x1,%x3"}, {"sha": "599a5f2f16ab573dd822aa85d8afd9884f70735a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6613781a50e6627d1f685e244d9b505f03b8423", "patch": "@@ -1,3 +1,8 @@\n+2010-11-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.target/powerpc/ppc-fma-2.c: Use -ffp-contract=off.\n+\t* gcc.target/powerpc/ppc-fma-4.c: Likewise.\n+\n 2010-11-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/opt12.adb: New test."}, {"sha": "111b9cb098ed613b9fe41e48fda721138937648c", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fma-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-2.c?ref=d6613781a50e6627d1f685e244d9b505f03b8423", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n-/* { dg-options \"-O3 -ftree-vectorize -mcpu=power7 -ffast-math -mno-fused-madd\" } */\n+/* { dg-options \"-O3 -ftree-vectorize -mcpu=power7 -ffast-math -ffp-contract=off\" } */\n /* { dg-final { scan-assembler-times \"xvmadd\" 2 } } */\n /* { dg-final { scan-assembler-times \"xsmadd\" 1 } } */\n /* { dg-final { scan-assembler-times \"fmadds\" 1 } } */"}, {"sha": "44da6e76bc4657ed9c62f900d51c4f179aa6a88d", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fma-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6613781a50e6627d1f685e244d9b505f03b8423/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fma-4.c?ref=d6613781a50e6627d1f685e244d9b505f03b8423", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n /* { dg-require-effective-target powerpc_altivec_ok } */\n-/* { dg-options \"-O3 -ftree-vectorize -mcpu=power6 -maltivec -ffast-math -mno-fused-madd\" } */\n+/* { dg-options \"-O3 -ftree-vectorize -mcpu=power6 -maltivec -ffast-math -ffp-contract=off\" } */\n /* { dg-final { scan-assembler-times \"vmaddfp\" 1 } } */\n /* { dg-final { scan-assembler-times \"fmadd \" 1 } } */\n /* { dg-final { scan-assembler-times \"fmadds\" 1 } } */"}]}