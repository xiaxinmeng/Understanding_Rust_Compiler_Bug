{"sha": "a52206ae28ed3e55d601118bedd52739456401ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUyMjA2YWUyOGVkM2U1NWQ2MDExMThiZWRkNTI3Mzk0NTY0MDFhYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-11-30T07:53:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-11-30T07:53:31Z"}, "message": "re PR tree-optimization/83202 (Try joining operations on consecutive array elements during tree vectorization)\n\n2017-11-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/83202\n\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Add\n\tallow_peel argument and guard peeling.\n\t(canonicalize_loop_induction_variables): Likewise.\n\t(canonicalize_induction_variables): Pass false.\n\t(tree_unroll_loops_completely_1): Pass unroll_outer to disallow\n\tpeeling from cunrolli.\n\n\t* gcc.dg/vect/pr83202-1.c: New testcase.\n\t* gcc.dg/tree-ssa/pr61743-1.c: Adjust.\n\nFrom-SVN: r255267", "tree": {"sha": "5ff55ff4e22b73b4349ddd2dae89d9da6e9ded2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ff55ff4e22b73b4349ddd2dae89d9da6e9ded2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a52206ae28ed3e55d601118bedd52739456401ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52206ae28ed3e55d601118bedd52739456401ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a52206ae28ed3e55d601118bedd52739456401ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a52206ae28ed3e55d601118bedd52739456401ab/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "222353edef6528ab5ff0f3c029425e76e7048fd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222353edef6528ab5ff0f3c029425e76e7048fd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/222353edef6528ab5ff0f3c029425e76e7048fd8"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "6630c47869ec3fafc31bcb9ade8b91bba292593c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52206ae28ed3e55d601118bedd52739456401ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52206ae28ed3e55d601118bedd52739456401ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a52206ae28ed3e55d601118bedd52739456401ab", "patch": "@@ -1,3 +1,13 @@\n+2017-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83202\n+\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Add\n+\tallow_peel argument and guard peeling.\n+\t(canonicalize_loop_induction_variables): Likewise.\n+\t(canonicalize_induction_variables): Pass false.\n+\t(tree_unroll_loops_completely_1): Pass unroll_outer to disallow\n+\tpeeling from cunrolli.\n+\n 2017-11-29  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* combine.c (try_combine): Print a message to dump file whenever"}, {"sha": "1b8cb2cddd909538cca92fb402bd1eee35db11af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52206ae28ed3e55d601118bedd52739456401ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52206ae28ed3e55d601118bedd52739456401ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a52206ae28ed3e55d601118bedd52739456401ab", "patch": "@@ -1,3 +1,9 @@\n+2017-11-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/83202\n+\t* gcc.dg/vect/pr83202-1.c: New testcase.\n+\t* gcc.dg/tree-ssa/pr61743-1.c: Adjust.\n+\n 2017-11-29  Jim Wilson  <jimw@sifive.com>\n \n \t* gcc.target/riscv/riscv.exp: New."}, {"sha": "669d357045cb3277b6ad7c831fdd112bc8b50ec2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61743-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52206ae28ed3e55d601118bedd52739456401ab/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61743-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52206ae28ed3e55d601118bedd52739456401ab/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61743-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61743-1.c?ref=a52206ae28ed3e55d601118bedd52739456401ab", "patch": "@@ -48,5 +48,6 @@ int foo1 (e_u8 a[4][N], int b1, int b2, e_u8 b[M+1][4][N])\n   return 0;\r\n }\r\n \r\n-/* { dg-final { scan-tree-dump-times \"loop with 3 iterations completely unrolled\" 8 \"cunroll\" } } */\r\n-/* { dg-final { scan-tree-dump-times \"loop with 8 iterations completely unrolled\" 2 \"cunrolli\" } } */\r\n+/* { dg-final { scan-tree-dump-times \"loop with 3 iterations completely unrolled\" 2 \"cunroll\" } } */\r\n+/* { dg-final { scan-tree-dump-times \"loop with 7 iterations completely unrolled\" 2 \"cunroll\" } } */\r\n+/* { dg-final { scan-tree-dump-not \"completely unrolled\" \"cunrolli\" } } */\r"}, {"sha": "33c83de29b8749cc9b3070a2bf0948a8a3d5705f", "filename": "gcc/testsuite/gcc.dg/vect/pr83202-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52206ae28ed3e55d601118bedd52739456401ab/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr83202-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52206ae28ed3e55d601118bedd52739456401ab/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr83202-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr83202-1.c?ref=a52206ae28ed3e55d601118bedd52739456401ab", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+\n+void test(double data[8][8])\n+{\n+  for (int i = 0; i < 8; i++)\n+    {\n+      for (int j = 0; j < i; j+=4)\n+\t{\n+\t  data[i][j] *= data[i][j];\n+\t  data[i][j+1] *= data[i][j+1];\n+\t  data[i][j+2] *= data[i][j+2];\n+\t  data[i][j+3] *= data[i][j+3];\n+\t}\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump \"Loop contains only SLP stmts\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"ectorized 1 loops\" \"vect\" } } */"}, {"sha": "25193b48151104f2022b227ae229ceb6e3126e07", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a52206ae28ed3e55d601118bedd52739456401ab/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a52206ae28ed3e55d601118bedd52739456401ab/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=a52206ae28ed3e55d601118bedd52739456401ab", "patch": "@@ -679,7 +679,7 @@ try_unroll_loop_completely (struct loop *loop,\n \t\t\t    edge exit, tree niter,\n \t\t\t    enum unroll_level ul,\n \t\t\t    HOST_WIDE_INT maxiter,\n-\t\t\t    location_t locus)\n+\t\t\t    location_t locus, bool allow_peel)\n {\n   unsigned HOST_WIDE_INT n_unroll = 0;\n   bool n_unroll_found = false;\n@@ -711,7 +711,8 @@ try_unroll_loop_completely (struct loop *loop,\n     exit = NULL;\n \n   /* See if we can improve our estimate by using recorded loop bounds.  */\n-  if (maxiter >= 0\n+  if ((allow_peel || maxiter == 0 || ul == UL_NO_GROWTH)\n+      && maxiter >= 0\n       && (!n_unroll_found || (unsigned HOST_WIDE_INT)maxiter < n_unroll))\n     {\n       n_unroll = maxiter;\n@@ -1139,7 +1140,7 @@ try_peel_loop (struct loop *loop,\n static bool\n canonicalize_loop_induction_variables (struct loop *loop,\n \t\t\t\t       bool create_iv, enum unroll_level ul,\n-\t\t\t\t       bool try_eval)\n+\t\t\t\t       bool try_eval, bool allow_peel)\n {\n   edge exit = NULL;\n   tree niter;\n@@ -1207,7 +1208,8 @@ canonicalize_loop_induction_variables (struct loop *loop,\n      populates the loop bounds.  */\n   modified |= remove_redundant_iv_tests (loop);\n \n-  if (try_unroll_loop_completely (loop, exit, niter, ul, maxiter, locus))\n+  if (try_unroll_loop_completely (loop, exit, niter, ul, maxiter, locus,\n+\t\t\t\t  allow_peel))\n     return true;\n \n   if (create_iv\n@@ -1238,7 +1240,7 @@ canonicalize_induction_variables (void)\n     {\n       changed |= canonicalize_loop_induction_variables (loop,\n \t\t\t\t\t\t\ttrue, UL_SINGLE_ITER,\n-\t\t\t\t\t\t\ttrue);\n+\t\t\t\t\t\t\ttrue, false);\n     }\n   gcc_assert (!need_ssa_update_p (cfun));\n \n@@ -1353,7 +1355,7 @@ tree_unroll_loops_completely_1 (bool may_increase_size, bool unroll_outer,\n     ul = UL_NO_GROWTH;\n \n   if (canonicalize_loop_induction_variables\n-        (loop, false, ul, !flag_tree_loop_ivcanon))\n+        (loop, false, ul, !flag_tree_loop_ivcanon, unroll_outer))\n     {\n       /* If we'll continue unrolling, we need to propagate constants\n \t within the new basic blocks to fold away induction variable"}]}