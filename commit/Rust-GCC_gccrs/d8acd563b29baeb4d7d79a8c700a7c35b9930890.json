{"sha": "d8acd563b29baeb4d7d79a8c700a7c35b9930890", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhhY2Q1NjNiMjliYWViNGQ3ZDc5YThjNzAwYTdjMzViOTkzMDg5MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-05-03T16:19:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-05-03T16:19:17Z"}, "message": "dwarf2out.c (die_struct): Add comdat_type_p flag.\n\n\t* dwarf2out.c (die_struct): Add comdat_type_p flag.  Use it instead of\n\tuse_debug_types to discriminate the die_id union.\n\t(print_die, assign_symbol_names, copy_decls_walk): Likewise.\n\t(build_abbrev_table, output_die): Likewise.\n\t(prune_unused_types_walk_attribs): Likewise.\n\t(generate_type_signature, copy_declaration_context): Set it.\n\t(remove_child_or_replace_with_skeleton): Set it.\n\t(dwarf2out_start_source_file, dwarf2out_end_source_file): Don't\n\tcheck use_debug_types.\n\t(dwarf2out_finish): Do break_out_includes after .debug_types.\n\nFrom-SVN: r187107", "tree": {"sha": "234b03461aee924cb9393e47431d1c48ed5644d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/234b03461aee924cb9393e47431d1c48ed5644d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8acd563b29baeb4d7d79a8c700a7c35b9930890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8acd563b29baeb4d7d79a8c700a7c35b9930890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8acd563b29baeb4d7d79a8c700a7c35b9930890", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8acd563b29baeb4d7d79a8c700a7c35b9930890/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fd0752e83525409addcdb904c67dc535bd5c1d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd0752e83525409addcdb904c67dc535bd5c1d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd0752e83525409addcdb904c67dc535bd5c1d1"}], "stats": {"total": 92, "additions": 68, "deletions": 24}, "files": [{"sha": "0f02af99e74ea5016ccb9537f17571ffc59536c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8acd563b29baeb4d7d79a8c700a7c35b9930890/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8acd563b29baeb4d7d79a8c700a7c35b9930890/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8acd563b29baeb4d7d79a8c700a7c35b9930890", "patch": "@@ -1,3 +1,16 @@\n+2012-05-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* dwarf2out.c (die_struct): Add comdat_type_p flag.  Use it instead of\n+\tuse_debug_types to discriminate the die_id union.\n+\t(print_die, assign_symbol_names, copy_decls_walk): Likewise.\n+\t(build_abbrev_table, output_die): Likewise.\n+\t(prune_unused_types_walk_attribs): Likewise.\n+\t(generate_type_signature, copy_declaration_context): Set it.\n+\t(remove_child_or_replace_with_skeleton): Set it.\n+\t(dwarf2out_start_source_file, dwarf2out_end_source_file): Don't\n+\tcheck use_debug_types.\n+\t(dwarf2out_finish): Do break_out_includes after .debug_types.\n+\n 2012-05-03  Jason Merrill  <jason@redhat.com>\n \n \t* dwarf2out.c (modified_type_die): Use scope_die_for."}, {"sha": "49e4a79f616b88627037af5a2149a959a2d4d766", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8acd563b29baeb4d7d79a8c700a7c35b9930890/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8acd563b29baeb4d7d79a8c700a7c35b9930890/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d8acd563b29baeb4d7d79a8c700a7c35b9930890", "patch": "@@ -2473,7 +2473,7 @@ typedef struct GTY((chain_circular (\"%h.die_sib\"))) die_struct {\n       const char * GTY ((tag (\"0\"))) die_symbol;\n       comdat_type_node_ref GTY ((tag (\"1\"))) die_type_node;\n     }\n-  GTY ((desc (\"use_debug_types\"))) die_id;\n+  GTY ((desc (\"%0.comdat_type_p\"))) die_id;\n   VEC(dw_attr_node,gc) * die_attr;\n   dw_die_ref die_parent;\n   dw_die_ref die_child;\n@@ -2482,10 +2482,12 @@ typedef struct GTY((chain_circular (\"%h.die_sib\"))) die_struct {\n   dw_offset die_offset;\n   unsigned long die_abbrev;\n   int die_mark;\n-  /* Die is used and must not be pruned as unused.  */\n-  int die_perennial_p;\n   unsigned int decl_id;\n   enum dwarf_tag die_tag;\n+  /* Die is used and must not be pruned as unused.  */\n+  BOOL_BITFIELD die_perennial_p : 1;\n+  BOOL_BITFIELD comdat_type_p : 1; /* DIE has a type signature */\n+  /* Lots of spare bits.  */\n }\n die_node;\n \n@@ -4767,7 +4769,7 @@ print_die (dw_die_ref die, FILE *outfile)\n   fprintf (outfile, \" offset: %ld\", die->die_offset);\n   fprintf (outfile, \" mark: %d\\n\", die->die_mark);\n \n-  if (use_debug_types && die->die_id.die_type_node)\n+  if (die->comdat_type_p)\n     {\n       print_spaces (outfile);\n       fprintf (outfile, \"  signature: \");\n@@ -4819,13 +4821,13 @@ print_die (dw_die_ref die, FILE *outfile)\n \tcase dw_val_class_die_ref:\n \t  if (AT_ref (a) != NULL)\n \t    {\n-\t      if (use_debug_types && AT_ref (a)->die_id.die_type_node)\n+\t      if (AT_ref (a)->comdat_type_p)\n \t        {\n \t\t  fprintf (outfile, \"die -> signature: \");\n \t\t  print_signature (outfile,\n \t\t  \t\t   AT_ref (a)->die_id.die_type_node->signature);\n                 }\n-\t      else if (! use_debug_types && AT_ref (a)->die_id.die_symbol)\n+\t      else if (AT_ref (a)->die_id.die_symbol)\n \t\tfprintf (outfile, \"die -> label: %s\",\n \t\t         AT_ref (a)->die_id.die_symbol);\n \t      else\n@@ -5653,13 +5655,17 @@ generate_type_signature (dw_die_ref die, comdat_type_node *type_node)\n      type node together.  */\n   memcpy (type_node->signature, &checksum[16 - DWARF_TYPE_SIGNATURE_SIZE],\n           DWARF_TYPE_SIGNATURE_SIZE);\n+  die->comdat_type_p = true;\n   die->die_id.die_type_node = type_node;\n   type_node->type_die = die;\n \n   /* If the DIE is a specification, link its declaration to the type node\n      as well.  */\n   if (decl != NULL)\n-    decl->die_id.die_type_node = type_node;\n+    {\n+      decl->comdat_type_p = true;\n+      decl->die_id.die_type_node = type_node;\n+    }\n }\n \n /* Do the location expressions look same?  */\n@@ -5966,7 +5972,7 @@ assign_symbol_names (dw_die_ref die)\n {\n   dw_die_ref c;\n \n-  if (is_symbol_die (die))\n+  if (is_symbol_die (die) && !die->comdat_type_p)\n     {\n       if (comdat_symbol_id)\n \t{\n@@ -6300,7 +6306,7 @@ clone_as_declaration (dw_die_ref die)\n         }\n     }\n \n-  if (die->die_id.die_type_node)\n+  if (die->comdat_type_p)\n     add_AT_die_ref (clone, DW_AT_signature, die);\n \n   add_AT_flag (clone, DW_AT_declaration, 1);\n@@ -6335,6 +6341,7 @@ copy_declaration_context (dw_die_ref unit, dw_die_ref die)\n \n       /* Copy the type node pointer from the new DIE to the original\n          declaration DIE so we can forward references later.  */\n+      decl->comdat_type_p = true;\n       decl->die_id.die_type_node = die->die_id.die_type_node;\n \n       remove_AT (die, DW_AT_specification);\n@@ -6469,6 +6476,7 @@ remove_child_or_replace_with_skeleton (dw_die_ref unit, dw_die_ref child,\n     remove_child_with_prev (child, prev);\n   else\n     {\n+      skeleton->comdat_type_p = true;\n       skeleton->die_id.die_type_node = child->die_id.die_type_node;\n \n       /* If the original DIE was a specification, we need to put\n@@ -6684,11 +6692,10 @@ copy_decls_walk (dw_die_ref unit, dw_die_ref die, htab_t decl_table)\n       if (AT_class (a) == dw_val_class_die_ref)\n         {\n           dw_die_ref targ = AT_ref (a);\n-          comdat_type_node_ref type_node = targ->die_id.die_type_node;\n           void **slot;\n           struct decl_table_entry *entry;\n \n-          if (targ->die_mark != 0 || type_node != NULL)\n+          if (targ->die_mark != 0 || targ->comdat_type_p)\n             continue;\n \n           slot = htab_find_slot_with_hash (decl_table, targ,\n@@ -6829,7 +6836,7 @@ build_abbrev_table (dw_die_ref die)\n     if (AT_class (a) == dw_val_class_die_ref\n \t&& AT_ref (a)->die_mark == 0)\n       {\n-\tgcc_assert (use_debug_types || AT_ref (a)->die_id.die_symbol);\n+\tgcc_assert (AT_ref (a)->comdat_type_p || AT_ref (a)->die_id.die_symbol);\n \tset_AT_ref_external (a, 1);\n       }\n \n@@ -7398,6 +7405,8 @@ output_die_symbol (dw_die_ref die)\n {\n   const char *sym = die->die_id.die_symbol;\n \n+  gcc_assert (!die->comdat_type_p);\n+\n   if (sym == 0)\n     return;\n \n@@ -7522,7 +7531,7 @@ output_die (dw_die_ref die)\n \n   /* If someone in another CU might refer to us, set up a symbol for\n      them to point to.  */\n-  if (! use_debug_types && die->die_id.die_symbol)\n+  if (! die->comdat_type_p && die->die_id.die_symbol)\n     output_die_symbol (die);\n \n   dw2_asm_output_data_uleb128 (die->die_abbrev, \"(DIE (%#lx) %s)\",\n@@ -7668,7 +7677,7 @@ output_die (dw_die_ref die)\n \tcase dw_val_class_die_ref:\n \t  if (AT_ref_external (a))\n \t    {\n-\t      if (use_debug_types)\n+\t      if (AT_ref (a)->comdat_type_p)\n \t        {\n \t          comdat_type_node_ref type_node =\n \t            AT_ref (a)->die_id.die_type_node;\n@@ -19865,7 +19874,7 @@ dwarf2out_source_line (unsigned int line, const char *filename,\n static void\n dwarf2out_start_source_file (unsigned int lineno, const char *filename)\n {\n-  if (flag_eliminate_dwarf2_dups && ! use_debug_types)\n+  if (flag_eliminate_dwarf2_dups)\n     {\n       /* Record the beginning of the file for break_out_includes.  */\n       dw_die_ref bincl_die;\n@@ -19889,7 +19898,7 @@ dwarf2out_start_source_file (unsigned int lineno, const char *filename)\n static void\n dwarf2out_end_source_file (unsigned int lineno ATTRIBUTE_UNUSED)\n {\n-  if (flag_eliminate_dwarf2_dups && ! use_debug_types)\n+  if (flag_eliminate_dwarf2_dups)\n     /* Record the end of the file for break_out_includes.  */\n     new_die (DW_TAG_GNU_EINCL, comp_unit_die (), NULL);\n \n@@ -20481,9 +20490,8 @@ prune_unused_types_walk_attribs (dw_die_ref die)\n \t  /* A reference to another DIE.\n \t     Make sure that it will get emitted.\n \t     If it was broken out into a comdat group, don't follow it.  */\n-          if (! use_debug_types\n-              || a->dw_attr == DW_AT_specification\n-              || a->dw_attr_val.v.val_die_ref.die->die_id.die_type_node == NULL)\n+          if (! AT_ref (a)->comdat_type_p\n+              || a->dw_attr == DW_AT_specification)\n \t    prune_unused_types_mark (a->dw_attr_val.v.val_die_ref.die, 1);\n \t}\n       /* Set the string's refcount to 0 so that prune_unused_types_mark\n@@ -21852,11 +21860,6 @@ dwarf2out_finish (const char *filename)\n   if (flag_eliminate_unused_debug_types)\n     prune_unused_types ();\n \n-  /* Generate separate CUs for each of the include files we've seen.\n-     They will go into limbo_die_list.  */\n-  if (flag_eliminate_dwarf2_dups && ! use_debug_types)\n-    break_out_includes (comp_unit_die ());\n-\n   /* Generate separate COMDAT sections for type DIEs. */\n   if (use_debug_types)\n     {\n@@ -21880,6 +21883,11 @@ dwarf2out_finish (const char *filename)\n       prune_unused_types ();\n     }\n \n+  /* Generate separate CUs for each of the include files we've seen.\n+     They will go into limbo_die_list.  */\n+  if (flag_eliminate_dwarf2_dups)\n+    break_out_includes (comp_unit_die ());\n+\n   /* Traverse the DIE's and add add sibling attributes to those DIE's\n      that have children.  */\n   add_sibling_attributes (comp_unit_die ());"}, {"sha": "1b6994a16d4bbe4607c9585b2db0ce6bd029c1f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8acd563b29baeb4d7d79a8c700a7c35b9930890/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8acd563b29baeb4d7d79a8c700a7c35b9930890/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8acd563b29baeb4d7d79a8c700a7c35b9930890", "patch": "@@ -1,3 +1,8 @@\n+2012-05-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* gcc.dg/debug/dwarf2/dups-types.c: New.\n+\t* gcc.dg/debug/dwarf2/dups-types.h: New.\n+\n 2012-05-03  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/debug/dwarf2/namespace-2.C: New."}, {"sha": "d9c01d07da78a73e28ee3227ab63743236c44ffc", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/dups-types.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8acd563b29baeb4d7d79a8c700a7c35b9930890/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdups-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8acd563b29baeb4d7d79a8c700a7c35b9930890/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdups-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdups-types.c?ref=d8acd563b29baeb4d7d79a8c700a7c35b9930890", "patch": "@@ -0,0 +1,8 @@\n+/* Test that these two options can work together.  */\n+/* { dg-options \"-gdwarf-4 -dA -feliminate-dwarf2-dups -fdebug-types-section\" } */\n+/* { dg-final { scan-assembler \"DW.dups_types\\.h\\[^)\\]*. DW_TAG_typedef\" } } */\n+/* { dg-final { scan-assembler \"DW_TAG_type_unit\" } } */\n+\n+#include \"dups-types.h\"\n+\n+A2 a;"}, {"sha": "99b7d907c0f4be24de84e43fd70ae4996cca9360", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/dups-types.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8acd563b29baeb4d7d79a8c700a7c35b9930890/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdups-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8acd563b29baeb4d7d79a8c700a7c35b9930890/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdups-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fdups-types.h?ref=d8acd563b29baeb4d7d79a8c700a7c35b9930890", "patch": "@@ -0,0 +1,10 @@\n+struct A\n+{\n+  int i;\n+  int j;\n+};\n+\n+typedef struct A A2;\n+extern A2 a;\n+\n+A2 f(A2);"}]}