{"sha": "8a89dbd24275d78205f408da9acdee092850dc5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE4OWRiZDI0Mjc1ZDc4MjA1ZjQwOGRhOWFjZGVlMDkyODUwZGM1YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-12-04T09:11:19Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-12-04T09:11:19Z"}, "message": "re PR target/13186 ([PPC] Internal compiler error in reload.c)\n\n\tPR target/13186\n\n\tRevert all of the following patch, except the addition of\n\thook_bool_machine_mode_true:\n\n\t2003-11-02  Richard Sandiford  <rsandifo@redhat.com>\n\n\t* Makefile.in (targhooks.o, reload.o): Update dependencies.\n\t(GTFILES): Add targhooks.c.\n\t(gt-targhooks.h): New rule; depend on s-gtype.\n\t* target.h (direct_pool_load_p): New hook.\n\t* target-def.h (TARGET_DIRECT_POOL_LOAD_P): New macro.\n\t(TARGET_INITIALIZER): Include it.\n\t* targhooks.h (default_direct_pool_load_p): Declare.\n\t(hook_bool_machine_mode_true): Declare.\n\t* targhooks.c: Include insn-config.h, recog.h, ggc.h and\n\tgt-targhooks.h.\n\t(pool_symbol): New variable.\n\t(default_direct_pool_load_p): New function.\n\t(hook_bool_machine_mode_true): New function.\n\t* reload.c: Include target.h.\n\t(find_reloads): If an alternative will force a constant into memory,\n\tcount an extra reload if constant pool symbols are not valid\n\taddresses.  If an alternative uses memory to move values between\n\tregisters, count the move as two reloads rather than one.\n\t* config/s390/s390.c (TARGET_DIRECT_POOL_LOAD_P): Define.\n\t* doc/tm.texi (TARGET_DIRECT_POOL_LOAD_P): Document.\n\nFrom-SVN: r74275", "tree": {"sha": "54f81a2dcb6de1daefdbe36bae91815aee6946ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54f81a2dcb6de1daefdbe36bae91815aee6946ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a89dbd24275d78205f408da9acdee092850dc5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a89dbd24275d78205f408da9acdee092850dc5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a89dbd24275d78205f408da9acdee092850dc5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a89dbd24275d78205f408da9acdee092850dc5a/comments", "author": null, "committer": null, "parents": [{"sha": "afb0918a9b127a64098a1267f328908acc7e4d1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb0918a9b127a64098a1267f328908acc7e4d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afb0918a9b127a64098a1267f328908acc7e4d1d"}], "stats": {"total": 112, "additions": 34, "deletions": 78}, "files": [{"sha": "965d2c788b25d989d80452a301296fe6ef539d7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a89dbd24275d78205f408da9acdee092850dc5a", "patch": "@@ -1,3 +1,33 @@\n+2003-12-04  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\tPR target/13186\n+\n+\tRevert all of the following patch, except the addition of\n+\thook_bool_machine_mode_true:\n+\n+\t2003-11-02  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* Makefile.in (targhooks.o, reload.o): Update dependencies.\n+\t(GTFILES): Add targhooks.c.\n+\t(gt-targhooks.h): New rule; depend on s-gtype.\n+\t* target.h (direct_pool_load_p): New hook.\n+\t* target-def.h (TARGET_DIRECT_POOL_LOAD_P): New macro.\n+\t(TARGET_INITIALIZER): Include it.\n+\t* targhooks.h (default_direct_pool_load_p): Declare.\n+\t(hook_bool_machine_mode_true): Declare.\n+\t* targhooks.c: Include insn-config.h, recog.h, ggc.h and\n+\tgt-targhooks.h.\n+\t(pool_symbol): New variable.\n+\t(default_direct_pool_load_p): New function.\n+\t(hook_bool_machine_mode_true): New function.\n+\t* reload.c: Include target.h.\n+\t(find_reloads): If an alternative will force a constant into memory,\n+\tcount an extra reload if constant pool symbols are not valid\n+\taddresses.  If an alternative uses memory to move values between\n+\tregisters, count the move as two reloads rather than one.\n+\t* config/s390/s390.c (TARGET_DIRECT_POOL_LOAD_P): Define.\n+\t* doc/tm.texi (TARGET_DIRECT_POOL_LOAD_P): Document.\n+\n 2003-12-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* config/ia64/hpux.h (TARGET_HAVE_TLS): Define it to false."}, {"sha": "2a9134357cb6afbf1f1457cb3f241cc81f78cd92", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=8a89dbd24275d78205f408da9acdee092850dc5a", "patch": "@@ -1525,7 +1525,7 @@ opts.o : opts.c opts.h options.h toplev.h $(CONFIG_H) $(SYSTEM_H) \\\n \toutput.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h\n targhooks.o : targhooks.c targhooks.h $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TREE_H) $(TM_H) $(RTL_H) $(TM_P_H) function.h \\\n-\toutput.h toplev.h insn-config.h $(RECOG_H) $(GGC_H) gt-targhooks.h\n+\toutput.h toplev.h\n \n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_H) \\\n    function.h flags.h xcoffout.h input.h $(INSN_ATTR_H) output.h $(DIAGNOSTIC_H) \\\n@@ -1761,7 +1761,7 @@ ra-rewrite.o : ra-rewrite.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H)\n    output.h except.h ra.h reload.h insn-config.h\n reload.o : reload.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h output.h \\\n    $(EXPR_H) $(OPTABS_H) reload.h $(RECOG_H) hard-reg-set.h insn-config.h \\\n-   $(REGS_H) function.h real.h toplev.h $(TM_P_H) $(TARGET_H)\n+   $(REGS_H) function.h real.h toplev.h $(TM_P_H)\n reload1.o : reload1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) real.h flags.h \\\n    $(EXPR_H) $(OPTABS_H) reload.h $(REGS_H) hard-reg-set.h insn-config.h \\\n    $(BASIC_BLOCK_H) $(RECOG_H) output.h function.h toplev.h $(TM_P_H) \\\n@@ -2070,8 +2070,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h $(srcdir)/cpplib.h \\\n   $(srcdir)/profile.c $(srcdir)/ra-build.c $(srcdir)/regclass.c \\\n   $(srcdir)/reg-stack.c $(srcdir)/cfglayout.c $(srcdir)/langhooks.c \\\n   $(srcdir)/sdbout.c $(srcdir)/stmt.c $(srcdir)/stor-layout.c \\\n-  $(srcdir)/stringpool.c $(srcdir)/targhooks.c $(srcdir)/tree.c \\\n-  $(srcdir)/varasm.c \\\n+  $(srcdir)/stringpool.c $(srcdir)/tree.c $(srcdir)/varasm.c \\\n   $(out_file) \\\n   @all_gtfiles@\n \n@@ -2088,7 +2087,7 @@ gt-expr.h gt-sdbout.h gt-optabs.h gt-bitmap.h \\\n gt-dwarf2out.h gt-ra-build.h gt-reg-stack.h gt-dwarf2asm.h \\\n gt-dbxout.h gt-c-common.h gt-c-decl.h gt-c-parse.h \\\n gt-c-pragma.h gtype-c.h gt-input.h gt-cfglayout.h \\\n-gt-stringpool.h gt-targhooks.h gt-langhooks.h : s-gtype ; @true\n+gt-stringpool.h gt-langhooks.h : s-gtype ; @true\n \n gtyp-gen.h: Makefile\n \techo \"/* This file is machine generated.  Do not edit.  */\" > tmp-gtyp.h"}, {"sha": "b79a26759097631208a28e1c45b9714453d30028", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=8a89dbd24275d78205f408da9acdee092850dc5a", "patch": "@@ -138,8 +138,6 @@ static tree s390_build_builtin_va_list (void);\n #define TARGET_RTX_COSTS s390_rtx_costs\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST s390_address_cost\n-#undef TARGET_DIRECT_POOL_LOAD_P\n-#define TARGET_DIRECT_POOL_LOAD_P hook_bool_machine_mode_true\n \n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG s390_reorg"}, {"sha": "09328aef6a2806cd099f0aa292c2846da4aad628", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8a89dbd24275d78205f408da9acdee092850dc5a", "patch": "@@ -5414,19 +5414,6 @@ should probably only be given to addresses with different numbers of\n registers on machines with lots of registers.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_DIRECT_POOL_LOAD_P (enum machine_mode @var{m})\n-This hook should return true if values of mode @var{m} can usually be loaded\n-directly from the constant pool, without using an intermediate register\n-to hold the address.\n-\n-The hook is only a heuristic, it has no bearing on correctness.\n-If it returns false, reload will be less likely to force constants\n-into memory.\n-\n-The default definition returns true if an ordinary local symbol is\n-a valid address.\n-@end deftypefn\n-\n @node Scheduling\n @section Adjusting the Instruction Scheduler\n "}, {"sha": "fe0f04746893c65367bbbaf96861895cde221991", "filename": "gcc/reload.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=8a89dbd24275d78205f408da9acdee092850dc5a", "patch": "@@ -104,7 +104,6 @@ a register with any other reload.  */\n #include \"output.h\"\n #include \"function.h\"\n #include \"toplev.h\"\n-#include \"target.h\"\n \n #ifndef REGNO_MODE_OK_FOR_BASE_P\n #define REGNO_MODE_OK_FOR_BASE_P(REGNO, MODE) REGNO_OK_FOR_BASE_P (REGNO)\n@@ -3370,11 +3369,6 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t\t  const_to_mem = 1;\n \t\t  if (this_alternative[i] != (int) NO_REGS)\n \t\t    losers++;\n-\n-\t\t  /* If constant pool symbols are not valid addresses,\n-\t\t     count an extra reload for the address.  */\n-\t\t  if (!targetm.direct_pool_load_p (operand_mode[i]))\n-\t\t    losers++;\n \t\t}\n \n \t      /* If we can't reload this value at all, reject this\n@@ -3400,21 +3394,6 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t\t       && ! const_to_mem)\n \t\tbad = 1;\n \n-#ifdef SECONDARY_MEMORY_NEEDED\n-\t      /* If this alternative would use memory to move a value\n-\t\t between registers, it would need two reloads, one for\n-\t\t the load and one for the store.  Account for the extra\n-\t\t reload here.  */\n-\t      if (GET_CODE (operand) == REG\n-\t\t  && REGNO (operand) < FIRST_PSEUDO_REGISTER\n-\t\t  && (enum reg_class) this_alternative[i] != NO_REGS\n-\t\t  && (SECONDARY_MEMORY_NEEDED\n-\t\t      ((enum reg_class) this_alternative[i],\n-\t\t       REGNO_REG_CLASS (REGNO (operand)),\n-\t\t       GET_MODE (operand))))\n-\t\tlosers++;\n-#endif\n-\n \t      /* We prefer to reload pseudos over reloading other things,\n \t\t since such reloads may be able to be eliminated later.\n \t\t If we are reloading a SCRATCH, we won't be generating any"}, {"sha": "9ff668d3f140fea722c7a4c70373ed70a9f426de", "filename": "gcc/target-def.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=8a89dbd24275d78205f408da9acdee092850dc5a", "patch": "@@ -262,8 +262,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n /* In cse.c.  */\n #define TARGET_ADDRESS_COST default_address_cost\n \n-#define TARGET_DIRECT_POOL_LOAD_P default_direct_pool_load_p\n-\n /* In builtins.c.  */\n #define TARGET_INIT_BUILTINS hook_void_void\n #define TARGET_EXPAND_BUILTIN default_expand_builtin\n@@ -381,7 +379,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_VECTOR_OPAQUE_P,\t\t\t\\\n   TARGET_RTX_COSTS,\t\t\t\t\\\n   TARGET_ADDRESS_COST,\t\t\t\t\\\n-  TARGET_DIRECT_POOL_LOAD_P,\t\t\t\\\n   TARGET_DWARF_REGISTER_SPAN,                   \\\n   TARGET_MACHINE_DEPENDENT_REORG,\t\t\\\n   TARGET_BUILD_BUILTIN_VA_LIST,\t\t\t\\"}, {"sha": "93935374c15a43f28e487893490fbcd2ca61f350", "filename": "gcc/target.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=8a89dbd24275d78205f408da9acdee092850dc5a", "patch": "@@ -369,8 +369,6 @@ struct gcc_target\n      invalid addresses.  */\n   int (* address_cost) (rtx x);\n \n-  bool (* direct_pool_load_p) (enum machine_mode);\n-\n   /* Given a register, this hook should return a parallel of registers\n      to represent where to find the register pieces.  Define this hook\n      if the register and its mode are represented in Dwarf in"}, {"sha": "62ed94324684c46cca4793c298aaf996426f845a", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=8a89dbd24275d78205f408da9acdee092850dc5a", "patch": "@@ -61,9 +61,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"target.h\"\n #include \"tm_p.h\"\n #include \"target-def.h\"\n-#include \"insn-config.h\"\n-#include \"recog.h\"\n-#include \"ggc.h\"\n \n void\n default_external_libcall (rtx fun ATTRIBUTE_UNUSED)\n@@ -199,31 +196,6 @@ default_pretend_outgoing_varargs_named(CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n #endif\n }\n \n-/* A SYMBOL_REF for a local symbol.  Used by default_direct_pool_load_p.  */\n-\n-static GTY(()) rtx pool_symbol;\n-\n-/* See whether a local symbol is a valid address for MODE.  If so, assume\n-   that constant pool symbols are also valid addresses, otherwise assume\n-   that they aren't.\n-\n-   ??? This is only an approximation.  We can't test constant pool\n-   symbols directly without forcing something into the constant pool.  */\n-\n-bool\n-default_direct_pool_load_p (enum machine_mode mode)\n-{\n-  if (pool_symbol == 0)\n-    {\n-      char label[256];\n-\n-      ASM_GENERATE_INTERNAL_LABEL (label, \"LC\", 0);\n-      pool_symbol = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (label));\n-      SYMBOL_REF_FLAGS (pool_symbol) = SYMBOL_FLAG_LOCAL;\n-    }\n-  return memory_address_p (mode, pool_symbol);\n-}\n-\n /* Generic hook that takes a CUMULATIVE_ARGS pointer and returns true.  */\n \n bool\n@@ -239,5 +211,3 @@ hook_bool_machine_mode_true (enum machine_mode a ATTRIBUTE_UNUSED)\n {\n   return true;\n }\n-\n-#include \"gt-targhooks.h\""}, {"sha": "e5c5a2a55967d09407041b366bc051a08f38c7e3", "filename": "gcc/targhooks.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a89dbd24275d78205f408da9acdee092850dc5a/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=8a89dbd24275d78205f408da9acdee092850dc5a", "patch": "@@ -32,7 +32,5 @@ extern void default_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode\n extern bool default_strict_argument_naming (CUMULATIVE_ARGS *);\n extern bool default_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *);\n \n-extern bool default_direct_pool_load_p (enum machine_mode);\n-\n extern bool hook_bool_CUMULATIVE_ARGS_true (CUMULATIVE_ARGS *);\n extern bool hook_bool_machine_mode_true (enum machine_mode);"}]}