{"sha": "a45a7ecdf34311587daa2e90cc732adcefac447b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ1YTdlY2RmMzQzMTE1ODdkYWEyZTkwY2M3MzJhZGNlZmFjNDQ3Yg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-07-07T18:53:45Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-09-03T18:42:31Z"}, "message": "coroutines: Add a helper for creating local vars.\n\nThis is primarily code factoring, but we take this opportunity\nto rename some of the implementation variables (which we intend\nto expose to debugging) so that they are in the implementation\nnamespace.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (coro_build_artificial_var): New.\n\t(build_actor_fn): Use var builder, rename vars to use\n\timplementation namespace.\n\t(coro_rewrite_function_body): Likewise.\n\t(morph_fn_to_coro): Likewise.", "tree": {"sha": "f8675367a2a5f0cd9bbd6750275aa5cea3526683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8675367a2a5f0cd9bbd6750275aa5cea3526683"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a45a7ecdf34311587daa2e90cc732adcefac447b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45a7ecdf34311587daa2e90cc732adcefac447b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45a7ecdf34311587daa2e90cc732adcefac447b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45a7ecdf34311587daa2e90cc732adcefac447b/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88974974d8188cf12e87e4ad3d23a8cbdd557f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88974974d8188cf12e87e4ad3d23a8cbdd557f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88974974d8188cf12e87e4ad3d23a8cbdd557f0e"}], "stats": {"total": 71, "additions": 45, "deletions": 26}, "files": [{"sha": "a3c780eb9f67a65b1f454313729cc1ce97376f17", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 45, "deletions": 26, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45a7ecdf34311587daa2e90cc732adcefac447b/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45a7ecdf34311587daa2e90cc732adcefac447b/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=a45a7ecdf34311587daa2e90cc732adcefac447b", "patch": "@@ -1474,6 +1474,29 @@ coro_build_cvt_void_expr_stmt (tree expr, location_t loc)\n   return coro_build_expr_stmt (t, loc);\n }\n \n+/* Helpers to build an artificial var, with location LOC, NAME and TYPE, in\n+   CTX, and with initializer INIT.  */\n+\n+static tree\n+coro_build_artificial_var (location_t loc, tree name, tree type, tree ctx,\n+\t\t\t   tree init)\n+{\n+  tree res = build_lang_decl (VAR_DECL, name, type);\n+  DECL_SOURCE_LOCATION (res) = loc;\n+  DECL_CONTEXT (res) = ctx;\n+  DECL_ARTIFICIAL (res) = true;\n+  DECL_INITIAL (res) = init;\n+  return res;\n+}\n+\n+static tree\n+coro_build_artificial_var (location_t loc, const char *name, tree type,\n+\t\t\t   tree ctx, tree init)\n+{\n+  return coro_build_artificial_var (loc, get_identifier (name),\n+\t\t\t\t    type, ctx, init);\n+}\n+\n /* Helpers for label creation:\n    1. Create a named label in the specified context.  */\n \n@@ -2113,12 +2136,10 @@ build_actor_fn (location_t loc, tree coro_frame_type, tree actor, tree fnbody,\n   tree top_block = make_node (BLOCK);\n   BIND_EXPR_BLOCK (actor_bind) = top_block;\n \n-  tree continuation = build_lang_decl (VAR_DECL,\n-\t\t\t\t       get_identifier (\"actor.continue\"),\n-\t\t\t\t       void_coro_handle_type);\n-  DECL_ARTIFICIAL (continuation) = 1;\n-  DECL_IGNORED_P (continuation) = 1;\n-  DECL_CONTEXT (continuation) = actor;\n+  tree continuation = coro_build_artificial_var (loc, \"_Coro_actor_continue\",\n+\t\t\t\t\t\t void_coro_handle_type, actor,\n+\t\t\t\t\t\t NULL_TREE);\n+\n   BIND_EXPR_VARS (actor_bind) = continuation;\n \n   /* Link in the block associated with the outer scope of the re-written\n@@ -4069,12 +4090,13 @@ coro_rewrite_function_body (location_t fn_start, tree fnbody, tree orig,\n \t\t\t\t\t fn_start, NULL, /*musthave=*/true);\n       /* Create and initialize the initial-await-resume-called variable per\n \t [dcl.fct.def.coroutine] / 5.3.  */\n-      tree i_a_r_c = build_lang_decl (VAR_DECL, get_identifier (\"i_a_r_c\"),\n-\t\t\t\t      boolean_type_node);\n-      DECL_ARTIFICIAL (i_a_r_c) = true;\n+      tree i_a_r_c\n+\t= coro_build_artificial_var (fn_start,\n+\t\t\t\t     \"_Coro_initial_await_resume_called\",\n+\t\t\t\t     boolean_type_node, orig,\n+\t\t\t\t     boolean_false_node);\n       DECL_CHAIN (i_a_r_c) = var_list;\n       var_list = i_a_r_c;\n-      DECL_INITIAL (i_a_r_c) = boolean_false_node;\n       add_decl_expr (i_a_r_c);\n       /* Start the try-catch.  */\n       tree tcb = build_stmt (fn_start, TRY_BLOCK, NULL_TREE, NULL_TREE);\n@@ -4459,8 +4481,10 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n   add_stmt (ramp_bind);\n   tree ramp_body = push_stmt_list ();\n \n-  tree coro_fp = build_lang_decl (VAR_DECL, get_identifier (\"coro.frameptr\"),\n-\t\t\t\t  coro_frame_ptr);\n+  tree zeroinit = build1_loc (fn_start, CONVERT_EXPR,\n+\t\t\t      coro_frame_ptr, integer_zero_node);\n+  tree coro_fp = coro_build_artificial_var (fn_start, \"_Coro_frameptr\",\n+\t\t\t\t\t    coro_frame_ptr, orig, zeroinit);\n   tree varlist = coro_fp;\n \n   /* To signal that we need to cleanup copied function args.  */\n@@ -4478,21 +4502,19 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \n   /* Signal that we need to clean up the promise object on exception.  */\n   tree coro_promise_live\n-   = build_lang_decl (VAR_DECL, get_identifier (\"coro.promise.live\"),\n-\t\t      boolean_type_node);\n-  DECL_ARTIFICIAL (coro_promise_live) = true;\n+    = coro_build_artificial_var (fn_start, \"_Coro_promise_live\",\n+\t\t\t\t boolean_type_node, orig, boolean_false_node);\n   DECL_CHAIN (coro_promise_live) = varlist;\n   varlist = coro_promise_live;\n-  DECL_INITIAL (coro_promise_live) = boolean_false_node;\n+\n   /* When the get-return-object is in the RETURN slot, we need to arrange for\n      cleanup on exception.  */\n   tree coro_gro_live\n-   = build_lang_decl (VAR_DECL, get_identifier (\"coro.gro.live\"),\n-\t\t      boolean_type_node);\n-  DECL_ARTIFICIAL (coro_gro_live) = true;\n+    = coro_build_artificial_var (fn_start, \"_Coro_gro_live\",\n+\t\t\t\t boolean_type_node, orig, boolean_false_node);\n+\n   DECL_CHAIN (coro_gro_live) = varlist;\n   varlist = coro_gro_live;\n-  DECL_INITIAL (coro_gro_live) = boolean_false_node;\n \n   /* Collected the scope vars we need ... only one for now. */\n   BIND_EXPR_VARS (ramp_bind) = nreverse (varlist);\n@@ -4508,8 +4530,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n   /* The decl_expr for the coro frame pointer, initialize to zero so that we\n      can pass it to the IFN_CO_FRAME (since there's no way to pass a type,\n      directly apparently).  This avoids a \"used uninitialized\" warning.  */\n-  tree zeroinit = build1 (CONVERT_EXPR, coro_frame_ptr, integer_zero_node);\n-  DECL_INITIAL (coro_fp) = zeroinit;\n+\n   add_decl_expr (coro_fp);\n   if (flag_exceptions && DECL_ARGUMENTS (orig))\n     for (tree arg = DECL_ARGUMENTS (orig); arg != NULL;\n@@ -4969,10 +4990,8 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n     {\n       /* ... or ... Construct an object that will be used as the single\n \tparam to the CTOR for the return object.  */\n-      gro = build_lang_decl (VAR_DECL, get_identifier (\"coro.gro\"), gro_type);\n-      DECL_CONTEXT (gro) = current_scope ();\n-      DECL_ARTIFICIAL (gro) = true;\n-      DECL_IGNORED_P (gro) = true;\n+      gro = coro_build_artificial_var (fn_start, \"_Coro_gro\", gro_type, orig,\n+\t\t\t\t       NULL_TREE);\n       add_decl_expr (gro);\n       gro_bind_vars = gro;\n       r = cp_build_modify_expr (input_location, gro, INIT_EXPR, get_ro,"}]}