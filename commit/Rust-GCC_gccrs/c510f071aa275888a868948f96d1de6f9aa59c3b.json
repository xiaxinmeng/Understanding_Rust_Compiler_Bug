{"sha": "c510f071aa275888a868948f96d1de6f9aa59c3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUxMGYwNzFhYTI3NTg4OGE4Njg5NDhmOTZkMWRlNmY5YWE1OWMzYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-07-08T11:05:51Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-07-08T11:05:51Z"}, "message": "re PR c++/21799 (Spurious ambiguity with pointers to members)\n\ncp:\n\tPR c++/21799\n\t* pt.c (type_unification_real): Add is_method argument.  Use it\n\tfor this pointer unification.\n\t(fn_type_unification): Adjust type_unification_real call.\n\t(unify): Likewise.\ntestsuite:\n\tPR c++/21799\n\t* g++.dg/template/unify8.C: New.\n\t* g++.dg/template/unify9.C: New.\n\nFrom-SVN: r101760", "tree": {"sha": "6dc8dcb1d6f6561680fe1e1bb402168e2088e03c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dc8dcb1d6f6561680fe1e1bb402168e2088e03c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c510f071aa275888a868948f96d1de6f9aa59c3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c510f071aa275888a868948f96d1de6f9aa59c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c510f071aa275888a868948f96d1de6f9aa59c3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c510f071aa275888a868948f96d1de6f9aa59c3b/comments", "author": null, "committer": null, "parents": [{"sha": "6a7b00ad6d2640c0660ee8f4a1fa9edc5812eb9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7b00ad6d2640c0660ee8f4a1fa9edc5812eb9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a7b00ad6d2640c0660ee8f4a1fa9edc5812eb9f"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "9019b67f8c05089f52dd4710d500e6df77551009", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c510f071aa275888a868948f96d1de6f9aa59c3b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c510f071aa275888a868948f96d1de6f9aa59c3b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c510f071aa275888a868948f96d1de6f9aa59c3b", "patch": "@@ -1,3 +1,11 @@\n+2005-07-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/21799\n+\t* pt.c (type_unification_real): Add is_method argument.  Use it\n+\tfor this pointer unification.\n+\t(fn_type_unification): Adjust type_unification_real call.\n+\t(unify): Likewise.\n+\n 2005-07-07  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (type_unification_real): Remove allow_incomplete argument."}, {"sha": "7424e9dfc83791c78198680d933164582417b16d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c510f071aa275888a868948f96d1de6f9aa59c3b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c510f071aa275888a868948f96d1de6f9aa59c3b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c510f071aa275888a868948f96d1de6f9aa59c3b", "patch": "@@ -109,7 +109,7 @@ static tree add_outermost_template_args (tree, tree);\n static bool check_instantiated_args (tree, tree, tsubst_flags_t);\n static int maybe_adjust_types_for_deduction (unification_kind_t, tree*, tree*);\n static int  type_unification_real (tree, tree, tree, tree,\n-\t\t\t\t   int, unification_kind_t);\n+\t\t\t\t   int, unification_kind_t, int);\n static void note_template_header (int);\n static tree convert_nontype_argument_function (tree, tree);\n static tree convert_nontype_argument (tree, tree);\n@@ -9177,7 +9177,7 @@ fn_type_unification (tree fn,\n      event.  */\n   result = type_unification_real (DECL_INNERMOST_TEMPLATE_PARMS (fn),\n \t\t\t\t  targs, parms, args, /*subr=*/0,\n-\t\t\t\t  strict);\n+\t\t\t\t  strict, 0);\n \n   if (result == 0)\n     /* All is well so far.  Now, check:\n@@ -9285,15 +9285,18 @@ maybe_adjust_types_for_deduction (unification_kind_t strict,\n \n    If SUBR is 1, we're being called recursively (to unify the\n    arguments of a function or method parameter of a function\n-   template).  */\n+   template).  If IS_METHOD is true, XPARMS are the parms of a\n+   member function, and special rules apply to cv qualification\n+   deduction on the this parameter.  */\n \n static int\n type_unification_real (tree tparms,\n \t\t       tree targs,\n \t\t       tree xparms,\n \t\t       tree xargs,\n \t\t       int subr,\n-\t\t       unification_kind_t strict)\n+\t\t       unification_kind_t strict,\n+\t\t       int is_method)\n {\n   tree parm, arg;\n   int i;\n@@ -9345,6 +9348,26 @@ type_unification_real (tree tparms,\n \t   template args from other function args.  */\n \tcontinue;\n \n+      if (is_method)\n+\t{\n+\t  /* The cv qualifiers on the this pointer argument must match\n+ \t     exactly.  We cannot deduce a T as const X against a const\n+ \t     member function for instance.  */\n+\t  gcc_assert (TREE_CODE (parm) == POINTER_TYPE);\n+\t  gcc_assert (TREE_CODE (arg) == POINTER_TYPE);\n+\t  /* The restrict qualifier will be on the pointer.  */\n+\t  if (cp_type_quals (parm) != cp_type_quals (arg))\n+\t    return 1;\n+\t  parm = TREE_TYPE (parm);\n+\t  arg = TREE_TYPE (arg);\n+\t  if (cp_type_quals (parm) != cp_type_quals (arg))\n+\t    return 1;\n+\t  \n+\t  parm = TYPE_MAIN_VARIANT (parm);\n+\t  arg = TYPE_MAIN_VARIANT (arg);\n+\t  is_method = 0;\n+\t}\n+      \n       /* Conversions will be performed on a function argument that\n \t corresponds with a function parameter that contains only\n \t non-deducible template parameters and explicitly specified\n@@ -10249,7 +10272,8 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t\t TREE_TYPE (arg), UNIFY_ALLOW_NONE))\n \treturn 1;\n       return type_unification_real (tparms, targs, TYPE_ARG_TYPES (parm),\n-\t\t\t\t    TYPE_ARG_TYPES (arg), 1, DEDUCE_EXACT);\n+\t\t\t\t    TYPE_ARG_TYPES (arg), 1, DEDUCE_EXACT,\n+\t\t\t\t    TREE_CODE (parm) == METHOD_TYPE);\n \n     case OFFSET_TYPE:\n       /* Unify a pointer to member with a pointer to member function, which"}, {"sha": "8bfd32bbf0af7059f8e157c4b6dafae6f8177ad0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c510f071aa275888a868948f96d1de6f9aa59c3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c510f071aa275888a868948f96d1de6f9aa59c3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c510f071aa275888a868948f96d1de6f9aa59c3b", "patch": "@@ -1,3 +1,9 @@\n+2005-07-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/21799\n+\t* g++.dg/template/unify8.C: New.\n+\t* g++.dg/template/unify9.C: New.\n+\n 2005-07-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gfortran.fortran-torture/execute/entry_10.f90: New test."}, {"sha": "9caf085f6b5e0ccdb996fdbdc62b73bc18ee8ff5", "filename": "gcc/testsuite/g++.dg/template/unify8.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c510f071aa275888a868948f96d1de6f9aa59c3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c510f071aa275888a868948f96d1de6f9aa59c3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify8.C?ref=c510f071aa275888a868948f96d1de6f9aa59c3b", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do link }\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 7 Jul 2005 <nathan@codesourcery.com>\n+\n+// Origin:Wolfgang Bangerth <bangerth@dealii.org>\n+// PR 21799: deduction of cvqualifiers on member functions was wrong\n+\n+template <class T> void f (T &,       void (T::*)()      ); \n+template <class T> void f (const T &, void (T::*)() const) {} \n+ \n+struct X { \n+    void g() const {}\n+}; \n+ \n+const X *x; \n+ \n+int main () { \n+  f (*x, &X::g); \n+}"}, {"sha": "2439efb761c65212160b3c65634e1d45ab68743f", "filename": "gcc/testsuite/g++.dg/template/unify9.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c510f071aa275888a868948f96d1de6f9aa59c3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c510f071aa275888a868948f96d1de6f9aa59c3b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify9.C?ref=c510f071aa275888a868948f96d1de6f9aa59c3b", "patch": "@@ -0,0 +1,17 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 7 Jul 2005 <nathan@codesourcery.com>\n+\n+// Origin:Wolfgang Bangerth <bangerth@dealii.org>\n+// PR 21799: deduction of cvqualifiers on member functions was wrong\n+\n+template <class T> void f (T &,       void (T::*)()      ); \n+ \n+struct X { \n+    void g() const {}\n+}; \n+ \n+const X *x; \n+ \n+int main () { \n+  f (*x, &X::g);  // {  dg-error \"no matching function\" }\n+} "}]}