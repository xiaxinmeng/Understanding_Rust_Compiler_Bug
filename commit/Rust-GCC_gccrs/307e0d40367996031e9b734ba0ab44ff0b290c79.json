{"sha": "307e0d40367996031e9b734ba0ab44ff0b290c79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3ZTBkNDAzNjc5OTYwMzFlOWI3MzRiYTBhYjQ0ZmYwYjI5MGM3OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-08-06T19:01:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-08-07T20:37:58Z"}, "message": "compiler: support export/import of unsafe.Add/Slice\n\nFor golang/go#19367\nFor golang/go#40481\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/340549", "tree": {"sha": "a355af48de54c3db0a571e9d6ba07ab4a0614ef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a355af48de54c3db0a571e9d6ba07ab4a0614ef7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/307e0d40367996031e9b734ba0ab44ff0b290c79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307e0d40367996031e9b734ba0ab44ff0b290c79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/307e0d40367996031e9b734ba0ab44ff0b290c79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307e0d40367996031e9b734ba0ab44ff0b290c79/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd754efa9a5349c693919046b8be074395ea114e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd754efa9a5349c693919046b8be074395ea114e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd754efa9a5349c693919046b8be074395ea114e"}], "stats": {"total": 159, "additions": 130, "deletions": 29}, "files": [{"sha": "b983fdab35c0793621a98430b8e67a0c20b5acdf", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=307e0d40367996031e9b734ba0ab44ff0b290c79", "patch": "@@ -1,4 +1,4 @@\n-747f3a2d78c073e9b03dd81914d0edb7ddc5be14\n+d5d51242efc432fa62d4e9b141b01c280af32d19\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "3d11334884da54b2341a52545edec567b570e0c8", "filename": "gcc/go/gofrontend/export.cc", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Fexport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.cc?ref=307e0d40367996031e9b734ba0ab44ff0b290c79", "patch": "@@ -106,11 +106,12 @@ class Collect_export_references : public Traverse\n {\n  public:\n   Collect_export_references(Export* exp,\n+\t\t\t    const std::map<std::string, Package*>& packages,\n                             Unordered_set(Named_object*)* exports,\n                             Unordered_set(const Package*)* imports)\n     : Traverse(traverse_expressions\n                | traverse_types),\n-      exp_(exp), exports_(exports), imports_(imports),\n+      exp_(exp), packages_(packages), exports_(exports), imports_(imports),\n       inline_fcn_worklist_(NULL), exports_finalized_(false)\n   { }\n \n@@ -150,6 +151,8 @@ class Collect_export_references : public Traverse\n \n   // The exporter.\n   Export* exp_;\n+  // The list of packages known to this compilation.\n+  const std::map<std::string, Package*>& packages_;\n   // The set of named objects to export.\n   Unordered_set(Named_object*)* exports_;\n   // Set containing all directly and indirectly imported packages.\n@@ -257,6 +260,24 @@ Collect_export_references::expression(Expression** pexpr)\n       return TRAVERSE_CONTINUE;\n     }\n \n+  const Call_expression* call = expr->call_expression();\n+  if (call != NULL)\n+    {\n+      const Builtin_call_expression* bce = call->builtin_call_expression();\n+      if (bce != NULL\n+\t  && (bce->code() == Builtin_call_expression::BUILTIN_ADD\n+\t      || bce->code() == Builtin_call_expression::BUILTIN_SLICE))\n+\t{\n+\t  // This is a reference to unsafe.Add or unsafe.Slice.  Make\n+\t  // sure we list the \"unsafe\" package in the imports and give\n+\t  // it a package index.\n+\t  const std::map<std::string, Package*>::const_iterator p =\n+\t    this->packages_.find(\"unsafe\");\n+\t  go_assert(p != this->packages_.end());\n+\t  this->imports_->insert(p->second);\n+\t}\n+    }\n+\n   return TRAVERSE_CONTINUE;\n }\n \n@@ -589,7 +610,7 @@ Export::export_globals(const std::string& package_name,\n   // Track all imported packages mentioned in export data.\n   Unordered_set(const Package*) all_imports;\n \n-  Collect_export_references collect(this, &exports, &all_imports);\n+  Collect_export_references collect(this, packages, &exports, &all_imports);\n \n   // Walk the set of inlinable routine bodies collected above. This\n   // can potentially expand the exports set.\n@@ -1274,6 +1295,25 @@ Export::package_index(const Package* pkg) const\n   return index;\n }\n \n+// Return the index of the \"unsafe\" package.\n+\n+int\n+Export::unsafe_package_index() const\n+{\n+  for (Unordered_map(const Package*, int)::const_iterator p =\n+\t this->packages_.begin();\n+       p != this->packages_.end();\n+       ++p)\n+    {\n+      if (p->first->pkgpath() == \"unsafe\")\n+\t{\n+\t  go_assert(p->second != 0);\n+\t  return p->second;\n+\t}\n+    }\n+  go_unreachable();\n+}\n+\n // Return the index of a type.\n \n int"}, {"sha": "1f613434cabc1943ea7e2ddbb6deb58c7a3a82ce", "filename": "gcc/go/gofrontend/export.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Fexport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Fexport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexport.h?ref=307e0d40367996031e9b734ba0ab44ff0b290c79", "patch": "@@ -216,6 +216,11 @@ class Export : public String_dump\n   int\n   package_index(const Package* p) const;\n \n+  // Return the index of the \"unsafe\" package, which must be one of\n+  // the exported packages.\n+  int\n+  unsafe_package_index() const;\n+\n  private:\n   Export(const Export&);\n   Export& operator=(const Export&);\n@@ -377,6 +382,11 @@ class Export_function_body : public String_dump\n   package_index(const Package* p) const\n   { return this->exp_->package_index(p); }\n \n+  // Return the index of the \"unsafe\" package.\n+  int\n+  unsafe_package_index() const\n+  { return this->exp_->unsafe_package_index(); }\n+\n   // Record a temporary statement and return its index.\n   unsigned int\n   record_temporary(const Temporary_statement*);"}, {"sha": "f462b0e2a34f86f57ad28ab5d3889b1475e17726", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=307e0d40367996031e9b734ba0ab44ff0b290c79", "patch": "@@ -11039,6 +11039,14 @@ Builtin_call_expression::do_export(Export_function_body* efb) const\n       // A trailing space lets us reliably identify the end of the number.\n       efb->write_c_string(\" \");\n     }\n+  else if (this->code_ == BUILTIN_ADD || this->code_ == BUILTIN_SLICE)\n+    {\n+      char buf[50];\n+      snprintf(buf, sizeof buf, \"<p%d>%s\", efb->unsafe_package_index(),\n+\t       (this->code_ == BUILTIN_ADD ? \"Add\" : \"Slice\"));\n+      efb->write_c_string(buf);\n+      this->export_arguments(efb);\n+    }\n   else\n     {\n       const char *s = NULL;"}, {"sha": "9f8f4e9255b65369d6f761cdf9b3ad69987d88e2", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=307e0d40367996031e9b734ba0ab44ff0b290c79", "patch": "@@ -732,6 +732,10 @@ class Expression\n   call_expression()\n   { return this->convert<Call_expression, EXPRESSION_CALL>(); }\n \n+  const Call_expression*\n+  call_expression() const\n+  { return this->convert<const Call_expression, EXPRESSION_CALL>(); }\n+\n   // If this is a call_result expression, return the Call_result_expression\n   // structure.  Otherwise, return NULL.  This is a controlled dynamic\n   // cast.\n@@ -2460,13 +2464,16 @@ class Call_expression : public Expression\n \n   // Whether this is a call to builtin function.\n   virtual bool\n-  is_builtin()\n+  is_builtin() const\n   { return false; }\n \n   // Convert to a Builtin_call_expression, or return NULL.\n   inline Builtin_call_expression*\n   builtin_call_expression();\n \n+  inline const Builtin_call_expression*\n+  builtin_call_expression() const;\n+\n  protected:\n   int\n   do_traverse(Traverse*);\n@@ -2625,12 +2632,12 @@ class Builtin_call_expression : public Call_expression\n     };\n \n   Builtin_function_code\n-  code()\n+  code() const\n   { return this->code_; }\n \n   // This overrides Call_expression::is_builtin.\n   bool\n-  is_builtin()\n+  is_builtin() const\n   { return true; }\n \n   // Return whether EXPR, of array type, is a constant if passed to\n@@ -2726,6 +2733,14 @@ Call_expression::builtin_call_expression()\n           : NULL);\n }\n \n+inline const Builtin_call_expression*\n+Call_expression::builtin_call_expression() const\n+{\n+  return (this->is_builtin()\n+          ? static_cast<const Builtin_call_expression*>(this)\n+          : NULL);\n+}\n+\n // A single result from a call which returns multiple results.\n \n class Call_result_expression : public Expression"}, {"sha": "9ffd120290d90f1585369737c387e9ee26b2caa8", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=307e0d40367996031e9b734ba0ab44ff0b290c79", "patch": "@@ -533,6 +533,10 @@ class Gogo\n   register_package(const std::string& pkgpath,\n \t\t   const std::string& pkgpath_symbol, Location);\n \n+  // Add the unsafe bindings to the unsafe package.\n+  void\n+  add_unsafe_bindings(Package*);\n+\n   // Look up a package by pkgpath, and return its pkgpath_symbol.\n   std::string\n   pkgpath_symbol_for_package(const std::string&);"}, {"sha": "6a5491be949e7106b53740a7e3c844678f5875d7", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=307e0d40367996031e9b734ba0ab44ff0b290c79", "patch": "@@ -497,6 +497,9 @@ Import::read_one_import()\n   p->set_package_name(package_name, this->location());\n \n   this->packages_.push_back(p);\n+\n+  if (pkgpath == \"unsafe\")\n+    this->gogo_->add_unsafe_bindings(p);\n }\n \n // Read an indirectimport line.\n@@ -515,6 +518,9 @@ Import::read_one_indirect_import()\n   p->set_package_name(package_name, this->location());\n \n   this->packages_.push_back(p);\n+\n+  if (pkgpath == \"unsafe\")\n+    this->gogo_->add_unsafe_bindings(p);\n }\n \n // Read the list of import control functions and/or init graph."}, {"sha": "c4a9346ca3e331c22a657c156f2246bfbd416b9c", "filename": "gcc/go/gofrontend/unsafe.cc", "status": "modified", "additions": 41, "deletions": 23, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307e0d40367996031e9b734ba0ab44ff0b290c79/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Funsafe.cc?ref=307e0d40367996031e9b734ba0ab44ff0b290c79", "patch": "@@ -10,15 +10,12 @@\n #include \"types.h\"\n #include \"gogo.h\"\n \n-// Set up the builtin unsafe package.  This should probably be driven\n-// by a table.\n+// Set up the builtin unsafe package.\n \n void\n Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n \t\t    Location location)\n {\n-  Location bloc = Linemap::predeclared_location();\n-\n   bool add_to_globals;\n   Package* package = this->add_imported_package(\"unsafe\", local_name,\n \t\t\t\t\t\tis_local_name_exported,\n@@ -34,10 +31,40 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n   package->set_location(location);\n   this->imports_.insert(std::make_pair(\"unsafe\", package));\n \n+  this->add_unsafe_bindings(package);\n+\n+  Named_object* pointer_no = package->bindings()->lookup_local(\"Pointer\");\n+  pointer_no->type_value()->set_is_visible();\n+\n+  if (add_to_globals)\n+    {\n+      Bindings* bindings = package->bindings();\n+      for (Bindings::const_declarations_iterator p =\n+\t     bindings->begin_declarations();\n+\t   p != bindings->end_declarations();\n+\t   ++p)\n+\tthis->add_dot_import_object(p->second);\n+    }\n+}\n+\n+// Add the unsafe bindings to the Package object.  This should\n+// probably be driven by a table.\n+\n+void\n+Gogo::add_unsafe_bindings(Package* package)\n+{\n   Bindings* bindings = package->bindings();\n \n+  if (bindings->lookup_local(\"Sizeof\") != NULL)\n+    {\n+      // Already done by an earlier import.\n+      return;\n+    }\n+\n+  Location bloc = Linemap::predeclared_location();\n+\n   // The type may have already been created by an import.\n-  Named_object* no = package->bindings()->lookup(\"Pointer\");\n+  Named_object* no = bindings->lookup(\"Pointer\");\n   if (no == NULL)\n     {\n       Type* type = Type::make_pointer_type(Type::make_void_type());\n@@ -49,11 +76,12 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n       go_assert(no->package() == package);\n       go_assert(no->is_type());\n       go_assert(no->type_value()->is_unsafe_pointer_type());\n-      no->type_value()->set_is_visible();\n     }\n   Named_type* pointer_type = no->type_value();\n-  if (add_to_globals)\n-    this->add_named_type(pointer_type);\n+\n+  // This may be called during an import, so the type may not be\n+  // visible yet.\n+  pointer_type->clear_is_visible();\n \n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n \n@@ -62,45 +90,35 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n   results->push_back(Typed_identifier(\"\", uintptr_type, bloc));\n   Function_type* fntype = Type::make_function_type(NULL, NULL, results, bloc);\n   fntype->set_is_builtin();\n-  no = bindings->add_function_declaration(\"Sizeof\", package, fntype, bloc);\n-  if (add_to_globals)\n-    this->add_dot_import_object(no);\n+  bindings->add_function_declaration(\"Sizeof\", package, fntype, bloc);\n \n   // Offsetof.\n   results = new Typed_identifier_list;\n   results->push_back(Typed_identifier(\"\", uintptr_type, bloc));\n   fntype = Type::make_function_type(NULL, NULL, results, bloc);\n   fntype->set_is_varargs();\n   fntype->set_is_builtin();\n-  no = bindings->add_function_declaration(\"Offsetof\", package, fntype, bloc);\n-  if (add_to_globals)\n-    this->add_dot_import_object(no);\n+  bindings->add_function_declaration(\"Offsetof\", package, fntype, bloc);\n \n   // Alignof.\n   results = new Typed_identifier_list;\n   results->push_back(Typed_identifier(\"\", uintptr_type, bloc));\n   fntype = Type::make_function_type(NULL, NULL, results, bloc);\n   fntype->set_is_varargs();\n   fntype->set_is_builtin();\n-  no = bindings->add_function_declaration(\"Alignof\", package, fntype, bloc);\n-  if (add_to_globals)\n-    this->add_dot_import_object(no);\n+  bindings->add_function_declaration(\"Alignof\", package, fntype, bloc);\n \n   // Add.\n   results = new Typed_identifier_list;\n   results->push_back(Typed_identifier(\"\", pointer_type, bloc));\n   fntype = Type::make_function_type(NULL, NULL, results, bloc);\n   fntype->set_is_builtin();\n-  no = bindings->add_function_declaration(\"Add\", package, fntype, bloc);\n-  if (add_to_globals)\n-    this->add_dot_import_object(no);\n+  bindings->add_function_declaration(\"Add\", package, fntype, bloc);\n \n   // Slice.\n   fntype = Type::make_function_type(NULL, NULL, NULL, bloc);\n   fntype->set_is_builtin();\n-  no = bindings->add_function_declaration(\"Slice\", package, fntype, bloc);\n-  if (add_to_globals)\n-    this->add_dot_import_object(no);\n+  bindings->add_function_declaration(\"Slice\", package, fntype, bloc);\n \n   if (!this->imported_unsafe_)\n     {"}]}