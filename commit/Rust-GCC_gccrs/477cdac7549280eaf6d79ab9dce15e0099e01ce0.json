{"sha": "477cdac7549280eaf6d79ab9dce15e0099e01ce0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3Y2RhYzc1NDkyODBlYWY2ZDc5YWI5ZGNlMTVlMDA5OWUwMWNlMA==", "commit": {"author": {"name": "Jason Thorpe", "email": "thorpej@wasabisystems.com", "date": "2002-04-07T03:12:23Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-04-07T03:12:23Z"}, "message": "cppinit.c (cpp_create_reader): Initialize discard_comments_in_macro_exp.\n\n* cppinit.c (cpp_create_reader): Initialize\ndiscard_comments_in_macro_exp.\n(COMMAND_LINE_OPTIONS): Add \"-CC\" option.\n(cpp_handle_option): Handle \"-CC\" option.\n* cpplex.c (save_comment): If saving a C++ comment in\na directive, convert it to a C comment.\n(_cpp_lex_direct): Pass second comment start character to\nsave_comment to indicate comment type.\n* cpplib.c (_cpp_handle_directive): If processing\na \"#define\" directive and discard_comments_in_macro_exp\nis false,  re-enable saving of comments.\n(lex_macro_node): If discard_comments_in_macro_exp is false,\ndiscard any comments before the macro identifier.\n* cpplib.h (struct cpp_options): Add discard_comments_in_macro_exp\nmember.\n* cppmacro.c (cpp_get_token): If expanding a macro while\nprocessing a directive, discard any comments we might encounter.\n(parse_params): If discard_comments_in_macro_exp is false,\nignore comments in the macro parameter list.\n* gcc.c (cpp_unique_options): Add \"-CC\" option.\n(option_map): Map \"--comments-in-macros\" to \"-CC\".\n* doc/cppopts.texi: Document \"-CC\" option.\n* f/lang-specs.h: Add \"-CC\" option.\n* testsuite/gcc.dg/cpp/maccom1.c: New test.\n* testsuite/gcc.dg/cpp/maccom2.c: New test.\n* testsuite/gcc.dg/cpp/maccom3.c: New test.\n* testsuite/gcc.dg/cpp/maccom4.c: New test.\n* testsuite/gcc.dg/cpp/maccom5.c: New test.\n* testsuite/gcc.dg/cpp/maccom6.c: New test.\n\nFrom-SVN: r51975", "tree": {"sha": "a89c2d17b9489b6bd19288f037013b3eaa28a891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a89c2d17b9489b6bd19288f037013b3eaa28a891"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/477cdac7549280eaf6d79ab9dce15e0099e01ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477cdac7549280eaf6d79ab9dce15e0099e01ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477cdac7549280eaf6d79ab9dce15e0099e01ce0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477cdac7549280eaf6d79ab9dce15e0099e01ce0/comments", "author": null, "committer": null, "parents": [{"sha": "03da52864c9025823694a9b5fabc472c6e534658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03da52864c9025823694a9b5fabc472c6e534658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03da52864c9025823694a9b5fabc472c6e534658"}], "stats": {"total": 236, "additions": 227, "deletions": 9}, "files": [{"sha": "62631007bb7144ee4fb3031a62e6a8c7861d45a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -1,3 +1,35 @@\n+2002-04-06  Jason Thorpe  <thorpej@wasabisystems.com>\n+\n+\t* cppinit.c (cpp_create_reader): Initialize\n+\tdiscard_comments_in_macro_exp.\n+\t(COMMAND_LINE_OPTIONS): Add \"-CC\" option.\n+\t(cpp_handle_option): Handle \"-CC\" option.\n+\t* cpplex.c (save_comment): If saving a C++ comment in\n+\ta directive, convert it to a C comment.\n+\t(_cpp_lex_direct): Pass second comment start character to\n+\tsave_comment to indicate comment type.\n+\t* cpplib.c (_cpp_handle_directive): If processing\n+\ta \"#define\" directive and discard_comments_in_macro_exp\n+\tis false,  re-enable saving of comments.\n+\t(lex_macro_node): If discard_comments_in_macro_exp is false,\n+\tdiscard any comments before the macro identifier.\n+\t* cpplib.h (struct cpp_options): Add discard_comments_in_macro_exp\n+\tmember.\n+\t* cppmacro.c (cpp_get_token): If expanding a macro while\n+\tprocessing a directive, discard any comments we might encounter.\n+\t(parse_params): If discard_comments_in_macro_exp is false,\n+\tignore comments in the macro parameter list.\n+\t* gcc.c (cpp_unique_options): Add \"-CC\" option.\n+\t(option_map): Map \"--comments-in-macros\" to \"-CC\".\n+\t* doc/cppopts.texi: Document \"-CC\" option.\n+\t* f/lang-specs.h: Add \"-CC\" option.\n+\t* testsuite/gcc.dg/cpp/maccom1.c: New test.\n+\t* testsuite/gcc.dg/cpp/maccom2.c: New test.\n+\t* testsuite/gcc.dg/cpp/maccom3.c: New test.\n+\t* testsuite/gcc.dg/cpp/maccom4.c: New test.\n+\t* testsuite/gcc.dg/cpp/maccom5.c: New test.\n+\t* testsuite/gcc.dg/cpp/maccom6.c: New test.\n+\n 2002-04-06  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \tPR middle-end/6180"}, {"sha": "ce950c0eaf5c81bd7b80c38e1bc262cc53d0d34a", "filename": "gcc/cppinit.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -488,6 +488,7 @@ cpp_create_reader (lang)\n   set_lang (pfile, lang);\n   CPP_OPTION (pfile, warn_import) = 1;\n   CPP_OPTION (pfile, discard_comments) = 1;\n+  CPP_OPTION (pfile, discard_comments_in_macro_exp) = 1;\n   CPP_OPTION (pfile, show_column) = 1;\n   CPP_OPTION (pfile, tabstop) = 8;\n   CPP_OPTION (pfile, operator_names) = 1;\n@@ -1172,6 +1173,7 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"-version\",                 0,      OPT__version)                   \\\n   DEF_OPT(\"A\",                        no_ass, OPT_A)                          \\\n   DEF_OPT(\"C\",                        0,      OPT_C)                          \\\n+  DEF_OPT(\"CC\",                       0,      OPT_CC)                         \\\n   DEF_OPT(\"D\",                        no_mac, OPT_D)                          \\\n   DEF_OPT(\"H\",                        0,      OPT_H)                          \\\n   DEF_OPT(\"I\",                        no_dir, OPT_I)                          \\\n@@ -1453,6 +1455,10 @@ cpp_handle_option (pfile, argc, argv, ignore)\n \tcase OPT_C:\n \t  CPP_OPTION (pfile, discard_comments) = 0;\n \t  break;\n+\tcase OPT_CC:\n+\t  CPP_OPTION (pfile, discard_comments) = 0;\n+\t  CPP_OPTION (pfile, discard_comments_in_macro_exp) = 0;\n+\t  break;\n \tcase OPT_P:\n \t  CPP_OPTION (pfile, no_line_commands) = 1;\n \t  break;"}, {"sha": "a6180314511d5fc7327751eaadef680e1e07c84b", "filename": "gcc/cpplex.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -83,7 +83,8 @@ static void parse_number PARAMS ((cpp_reader *, cpp_string *, int));\n static int unescaped_terminator_p PARAMS ((cpp_reader *, const U_CHAR *));\n static void parse_string PARAMS ((cpp_reader *, cpp_token *, cppchar_t));\n static bool trigraph_p PARAMS ((cpp_reader *));\n-static void save_comment PARAMS ((cpp_reader *, cpp_token *, const U_CHAR *));\n+static void save_comment PARAMS ((cpp_reader *, cpp_token *, const U_CHAR *,\n+\t\t\t\t  cppchar_t));\n static int name_p PARAMS ((cpp_reader *, const cpp_string *));\n static int maybe_read_ucs PARAMS ((cpp_reader *, const unsigned char **,\n \t\t\t\t   const unsigned char *, unsigned int *));\n@@ -673,28 +674,46 @@ parse_string (pfile, token, terminator)\n \n /* The stored comment includes the comment start and any terminator.  */\n static void\n-save_comment (pfile, token, from)\n+save_comment (pfile, token, from, type)\n      cpp_reader *pfile;\n      cpp_token *token;\n      const unsigned char *from;\n+     cppchar_t type;\n {\n   unsigned char *buffer;\n-  unsigned int len;\n+  unsigned int len, clen;\n   \n   len = pfile->buffer->cur - from + 1; /* + 1 for the initial '/'.  */\n \n   /* C++ comments probably (not definitely) have moved past a new\n      line, which we don't want to save in the comment.  */\n   if (is_vspace (pfile->buffer->cur[-1]))\n     len--;\n-  buffer = _cpp_unaligned_alloc (pfile, len);\n+\n+  /* If we are currently in a directive, then we need to store all\n+     C++ comments as C comments internally, and so we need to\n+     allocate a little extra space in that case.\n+\n+     Note that the only time we encounter a directive here is\n+     when we are saving comments in a \"#define\".  */\n+  clen = (pfile->state.in_directive && type == '/') ? len + 2 : len;\n+\n+  buffer = _cpp_unaligned_alloc (pfile, clen);\n   \n   token->type = CPP_COMMENT;\n-  token->val.str.len = len;\n+  token->val.str.len = clen;\n   token->val.str.text = buffer;\n \n   buffer[0] = '/';\n   memcpy (buffer + 1, from, len - 1);\n+\n+  /* Finish conversion to a C comment, if necessary. */\n+  if (pfile->state.in_directive && type == '/')\n+    {\n+      buffer[1] = '*';\n+      buffer[clen - 2] = '*';\n+      buffer[clen - 1] = '/';\n+    }\n }\n \n /* Allocate COUNT tokens for RUN.  */\n@@ -1021,7 +1040,7 @@ _cpp_lex_direct (pfile)\n \t}\n \n       /* Save the comment as a token in its own right.  */\n-      save_comment (pfile, result, comment_start);\n+      save_comment (pfile, result, comment_start, c);\n       break;\n \n     case '<':"}, {"sha": "47dd977f3051c32a20b09c02cf2086eff207274e", "filename": "gcc/cpplib.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -394,6 +394,13 @@ _cpp_handle_directive (pfile, indented)\n \n   if (dir)\n     {\n+      /* If we are processing a `#define' directive and we have been\n+\t requested to expand comments into macros, then re-enable\n+\t saving of comments.  */\n+      if (dir == &dtable[T_DEFINE])\n+        pfile->state.save_comments =\n+          ! CPP_OPTION (pfile, discard_comments_in_macro_exp);\n+\n       pfile->directive = dir;\n       (*pfile->directive->handler) (pfile);\n     }\n@@ -445,7 +452,16 @@ lex_macro_node (pfile)\n      In C++, it may not be any of the \"named operators\" either,\n      per C++98 [lex.digraph], [lex.key].\n      Finally, the identifier may not have been poisoned.  (In that case\n-     the lexer has issued the error message for us.)  */\n+     the lexer has issued the error message for us.)\n+\n+     Note that if we're copying comments into macro expansions, we\n+     could encounter comment tokens here, so eat them all up first.  */\n+\n+  if (! CPP_OPTION (pfile, discard_comments_in_macro_exp))\n+    {\n+      while (token->type == CPP_COMMENT)\n+\ttoken = _cpp_lex_token (pfile);\n+    }\n \n   if (token->type != CPP_NAME)\n     {"}, {"sha": "8b87b1b41a02780022ecc58dbaaec5bfddcfd316", "filename": "gcc/cpplib.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -255,6 +255,10 @@ struct cpp_options\n   /* Nonzero means don't copy comments into the output file.  */\n   unsigned char discard_comments;\n \n+  /* Nonzero means don't copy comments into the output file during\n+     macro expansion.  */\n+  unsigned char discard_comments_in_macro_exp;\n+\n   /* Nonzero means process the ISO trigraph sequences.  */\n   unsigned char trigraphs;\n "}, {"sha": "6ba7ec4780e624bfe22b0bdbd36ccfc63fb340df", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -1015,6 +1015,9 @@ cpp_get_token (pfile)\n \t  return &pfile->avoid_paste;\n \t}\n \n+      if (pfile->state.in_directive && result->type == CPP_COMMENT)\n+\tcontinue;\n+\n       if (result->type != CPP_NAME)\n \tbreak;\n \n@@ -1194,6 +1197,12 @@ parse_params (pfile, macro)\n       switch (token->type)\n \t{\n \tdefault:\n+\t  /* Allow/ignore comments in parameter lists if we are\n+\t     preserving comments in macro expansions.  */\n+\t  if (token->type == CPP_COMMENT\n+\t      && ! CPP_OPTION (pfile, discard_comments_in_macro_exp))\n+\t    continue;\n+\n \t  cpp_error (pfile, \"\\\"%s\\\" may not appear in macro parameter list\",\n \t\t     cpp_token_as_text (pfile, token));\n \t  return 0;"}, {"sha": "68bd43902ad30307948303b0b11b812db45e62d1", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -527,6 +527,19 @@ For example, comments appearing at the start of what would be a\n directive line have the effect of turning that line into an ordinary\n source line, since the first token on the line is no longer a @samp{#}.\n \n+@item -CC\n+Do not discard comments, including during macro expansion.  This is\n+like @option{-C}, except that comments contained within macros are\n+also passed through to the output file where the macro is expanded.\n+\n+In addition to the side-effects of the @option{-C} option, the\n+@option{-CC} option causes all C++-style comments inside a macro\n+to be converted to C-style comments.  This is to prevent later use\n+of that macro from inadvertently commenting out the remainer of\n+the source line.\n+\n+The @option{-CC} option is generally used to support lint comments.\n+\n @item -gcc\n @opindex gcc\n Define the macros @sc{__gnuc__}, @sc{__gnuc_minor__} and"}, {"sha": "e39a3e9b5b224b520bece751b1ad553cc43ebaf8", "filename": "gcc/f/lang-specs.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ff%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ff%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flang-specs.h?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -33,7 +33,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n   {\".r\", \"@ratfor\", 0},\n   {\"@ratfor\",\n    \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n-    ratfor %{C} %{v} %i %{E:%W{o*}} %{!E: %{!pipe:-o %g.f} |\\n\\\n+    %{CC:%{!E:%eGNU C does not support -CC without using -E}}\\\n+    ratfor %{C} %{CC} %{v} %i %{E:%W{o*}} %{!E: %{!pipe:-o %g.f} |\\n\\\n     f771 %{!pipe:%g.f} %(cc1_options) %{I*} %{!fsyntax-only:%(invoke_as)}}\", 0},\n   {\".f\",   \"@f77\", 0},\n   {\".for\", \"@f77\", 0},"}, {"sha": "c160006f88dedd157811807d54f140edc39c6c7a", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -671,7 +671,8 @@ static const char *trad_capable_cpp =\n \n static const char *cpp_unique_options =\n \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n- %{!Q:-quiet} %{nostdinc*} %{C} %{v} %{I*} %{P} %{$} %I\\\n+ %{CC:%{!E:%eGNU C does not support -CC without using -E}}\\\n+ %{!Q:-quiet} %{nostdinc*} %{C} %{CC} %{v} %{I*} %{P} %{$} %I\\\n  %{MD:-MD %W{!o: %b.d}%W{o*:%.d%*}}\\\n  %{MMD:-MMD %W{!o: %b.d}%W{o*:%.d%*}}\\\n  %{M} %{MM} %W{MF*} %{MG} %{MP} %{MQ*} %{MT*}\\\n@@ -917,6 +918,7 @@ static const struct option_map option_map[] =\n    {\"--bootclasspath\", \"-fbootclasspath=\", \"aj\"},\n    {\"--CLASSPATH\", \"-fclasspath=\", \"aj\"},\n    {\"--comments\", \"-C\", 0},\n+   {\"--comments-in-macros\", \"-CC\", 0},\n    {\"--compile\", \"-c\", 0},\n    {\"--debug\", \"-g\", \"oj\"},\n    {\"--define-macro\", \"-D\", \"aj\"},"}, {"sha": "7660dff2acb58e050515caccf57d34e82a4dc064", "filename": "gcc/testsuite/gcc.dg/cpp/maccom1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom1.c?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-CC\" } */\n+\n+/* This tests to make sure that comments are ignored between # and the\n+   directive name when the -CC option is used.\n+\n+   Jason R. Thorpe, 6 Apr 2002  */\n+\n+#/**/define def passed\n+\n+def\n+\n+/*\n+   { dg-final { if ![file exists maccom1.i] { return }                    } }\n+   { dg-final { if { [grep maccom1.i \"^passed\"] != \"\" } { return }        } }\n+   { dg-final { fail \"maccom1.c: comment between # and directive name with -CC\" } }\n+*/"}, {"sha": "dcaf37aaf8e57c79bdc67e431058fdc7ed1f4846", "filename": "gcc/testsuite/gcc.dg/cpp/maccom2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom2.c?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-CC\" } */\n+\n+/* This tests to make sure that comments between the #define directive\n+   and the macro identifier are ignored (i.e. treated like whitespace)\n+   when the -CC option is used.\n+\n+   Jason R. Thorpe, 6 Apr 2002  */\n+\n+#define/**/def passed\n+\n+def\n+\n+/*\n+   { dg-final { if ![file exists maccom2.i] { return }                    } }\n+   { dg-final { if { [grep maccom2.i \"^passed\"] != \"\" } { return }        } }\n+   { dg-final { fail \"maccom2.c: comment between #define and identifier with -CC\" } }\n+*/"}, {"sha": "198453575b3240bfbc8eb0cafdb8bf72fe69672a", "filename": "gcc/testsuite/gcc.dg/cpp/maccom3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom3.c?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-CC\" } */\n+\n+/* This tests to make sure that comments in the definition of a macro\n+   parameter list are ignored when the -CC option is used.\n+\n+   Jason R. Thorpe, 6 Apr 2002  */\n+\n+#define def(x /**/, y) passed\n+\n+def(x,y)\n+\n+/*\n+   { dg-final { if ![file exists maccom3.i] { return }                     } }\n+   { dg-final { if { [grep maccom3.i \"^passed\"] != \"\" } { return }         } }\n+   { dg-final { fail \"maccom3.c: comment in macro parameter list with -CC\" } }\n+*/"}, {"sha": "b8a136ff02e7883a9af351e7d737a5cceb192959", "filename": "gcc/testsuite/gcc.dg/cpp/maccom4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom4.c?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-CC\" } */\n+\n+/* This tests to make sure the comment is saved in the macro and copied\n+   to the output file when the macro is expanded when the -CC option is\n+   used.\n+\n+   Jason R. Thorpe, 6 Apr 2002  */\n+\n+#define def /* passed */\n+\n+def\n+\n+/*\n+   /* The + in the regexp prevents it from matching itself.  */\n+   { dg-final { if ![file exists maccom4.i] { return }                    } }\n+   { dg-final { if { [grep maccom4.i \"p+assed\"] != \"\" } { return }        } }\n+   { dg-final { fail \"maccom4.c: comment in macro expansion with -CC\"     } }\n+*/"}, {"sha": "f92f8bfe0f83d1677dc488f760e14b81de92e3cf", "filename": "gcc/testsuite/gcc.dg/cpp/maccom5.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom5.c?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-CC\" } */\n+\n+/* This tests to make sure that C++ comments are converted to C comments\n+   when saved in the macro and copied to the output file when the macro\n+   is expanded when the -CC option is used.\n+\n+   Jason R. Thorpe, 6 Apr 2002  */\n+\n+#define def // passed\n+\n+def:\n+\n+/*\n+   /* The + in the regexp prevents it from matching itself.  */\n+   { dg-final { if ![file exists maccom5.i] { return }                    } }\n+   { dg-final { if \\{ [grep maccom5.i \"p+assed\"] != \"\" \\} \\{              } }\n+   { dg-final { if \\{ [grep maccom5.i \"p+assed:\"] == \"\" \\} \\{             } }\n+   { dg-final { return \\} \\}                                              } }\n+   { dg-final { fail \"maccom5.c: C++ comment in macro expansion with -CC\" } }\n+*/"}, {"sha": "0b86c05c6d69635f05bf6a7ede302678cf8ca8fe", "filename": "gcc/testsuite/gcc.dg/cpp/maccom6.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477cdac7549280eaf6d79ab9dce15e0099e01ce0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmaccom6.c?ref=477cdac7549280eaf6d79ab9dce15e0099e01ce0", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-CC\" } */\n+\n+/* This tests to make sure that expressions function properly\n+   when used with macros containing comments and the -CC option\n+   is being used.\n+\n+   Jason R. Thorpe, 6 Apr 2002  */\n+\n+#define ONE   1 /* one */\n+#define TWO   2 /* two */\n+#define THREE 3 /* three */\n+\n+#if (ONE + TWO) != THREE\n+failed\n+#else\n+passed\n+#endif\n+\n+/*\n+   { dg-final { if ![file exists maccom6.i] { return }                    } }\n+   { dg-final { if { [grep maccom6.i \"^passed\"] != \"\" } { return }        } }\n+   { dg-final { fail \"maccom6.c: comments in macro expressions with -CC\"  } }\n+*/"}]}