{"sha": "af530bb412465cf6fc55fd9a31ab69b2b2c0a64a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY1MzBiYjQxMjQ2NWNmNmZjNTVmZDlhMzFhYjY5YjJiMmMwYTY0YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-01-17T17:40:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-01-17T17:40:59Z"}, "message": "rx: Remove rx_compare_redundant.\n\nTo be replaced by the generic compare_elim pass, but we need to disable\nthis before fiddling with the arrangement of the arithmetic instructions,\nas required by the generic pass.\n\nFrom-SVN: r168916", "tree": {"sha": "fcd3c77131d638e1a7dbc025f405bed1ec993985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcd3c77131d638e1a7dbc025f405bed1ec993985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af530bb412465cf6fc55fd9a31ab69b2b2c0a64a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af530bb412465cf6fc55fd9a31ab69b2b2c0a64a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af530bb412465cf6fc55fd9a31ab69b2b2c0a64a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af530bb412465cf6fc55fd9a31ab69b2b2c0a64a/comments", "author": null, "committer": null, "parents": [{"sha": "27bf36f3e5540426d1d83b95c66d383f70aa314f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27bf36f3e5540426d1d83b95c66d383f70aa314f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27bf36f3e5540426d1d83b95c66d383f70aa314f"}], "stats": {"total": 161, "additions": 5, "deletions": 156}, "files": [{"sha": "0d539f6ff8713e1636a97b55a4440a1a280cd024", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af530bb412465cf6fc55fd9a31ab69b2b2c0a64a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af530bb412465cf6fc55fd9a31ab69b2b2c0a64a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af530bb412465cf6fc55fd9a31ab69b2b2c0a64a", "patch": "@@ -1,5 +1,9 @@\n 2011-01-17  Richard Henderson  <rth@redhat.com>\n \n+\t* config/rx/rx.c (rx_compare_redundant): Remove.\n+\t* config/rx/rx.md (cmpsi): Don't use it.\n+\t* config/rx/rx-protos.h: Update.\n+\n \t* config/rx/rx-modes.def (CC_F): New mode.\n \t* config/rx/rx.c (rx_select_cc_mode): New.\n \t* config/rx/rx.h (SELECT_CC_MODE): Use it."}, {"sha": "02e12ed486734ea8181902398bdf530fc4d0a4e6", "filename": "gcc/config/rx/rx-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af530bb412465cf6fc55fd9a31ab69b2b2c0a64a/gcc%2Fconfig%2Frx%2Frx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af530bb412465cf6fc55fd9a31ab69b2b2c0a64a/gcc%2Fconfig%2Frx%2Frx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-protos.h?ref=af530bb412465cf6fc55fd9a31ab69b2b2c0a64a", "patch": "@@ -30,7 +30,6 @@ extern void\t\trx_expand_prologue (void);\n extern int\t\trx_initial_elimination_offset (int, int);\n \n #ifdef RTX_CODE\n-extern bool\t\trx_compare_redundant (rtx);\n extern void             rx_emit_stack_popm (rtx *, bool);\n extern void             rx_emit_stack_pushm (rtx *);\n extern void\t\trx_expand_epilogue (bool);"}, {"sha": "9a163fe49f62ed0f1df189656872434821831f64", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af530bb412465cf6fc55fd9a31ab69b2b2c0a64a/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af530bb412465cf6fc55fd9a31ab69b2b2c0a64a/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=af530bb412465cf6fc55fd9a31ab69b2b2c0a64a", "patch": "@@ -2602,155 +2602,6 @@ flags_from_mode (enum machine_mode mode)\n     }\n }\n \n-/* Returns true if a compare insn is redundant because it\n-   would only set flags that are already set correctly.  */\n-\n-bool\n-rx_compare_redundant (rtx cmp)\n-{\n-  unsigned int flags_needed;\n-  unsigned int flags_set;\n-  rtx next;\n-  rtx prev;\n-  rtx source;\n-  rtx dest;\n-  static rtx cc_reg = NULL_RTX;\n-\n-  if (cc_reg == NULL_RTX)\n-    cc_reg = gen_rtx_REG (CCmode, CC_REGNUM);\n-\n-  /* We can only eliminate compares against 0.  */\n-  if (GET_CODE (XEXP (SET_SRC (PATTERN (cmp)), 1)) != CONST_INT\n-      || INTVAL (XEXP (SET_SRC (PATTERN (cmp)), 1)) != 0)\n-    return false;\n-\n-  /* Locate the branch insn that follows the\n-     compare and which tests the bits in the PSW.  */\n-  next = cmp;\n-  do\n-    {\n-      /* If we have found an insn that sets or clobbers the CC\n-\t register and it was not the IF_THEN_ELSE insn that we\n-\t are looking for, then the comparison is redundant.  */\n-      if (next != cmp && reg_mentioned_p (cc_reg, PATTERN (next)))\n-\treturn true;\n-\n-      next = next_nonnote_insn (next);\n-\n-      /* If we run out of insns without finding the\n-\t user then the comparison is unnecessary.  */\n-      if (next == NULL_RTX)\n-\treturn true;\n-\n-      /* If we have found another comparison\n-\t insn then the first one is redundant.  */\n-      if (INSN_P (next)\n-\t  && GET_CODE (PATTERN (next)) == SET\n-\t  && REG_P (SET_DEST (PATTERN (next)))\n-\t  && REGNO (SET_DEST (PATTERN (next))) == CC_REGNUM)\n-\treturn true;\n-\n-      /* If we have found another arithmetic/logic insn that\n-\t sets the PSW flags then the comparison is redundant.  */\n-      if (INSN_P (next)\n-\t  && GET_CODE (PATTERN (next)) == PARALLEL\n-\t  && GET_CODE (XVECEXP (PATTERN (next), 0, 1)) == SET\n-\t  && REG_P (SET_DEST (XVECEXP (PATTERN (next), 0, 1)))\n-\t  && REGNO (SET_DEST (XVECEXP (PATTERN (next), 0, 1))) == CC_REGNUM)\n-\treturn true;\n-\n-      /* If we have found an unconditional branch then the\n-\t PSW flags might be carried along with the jump, so\n-\t the comparison is necessary.  */\n-      if (INSN_P (next) && JUMP_P (next))\n-\t{\n-\t  if (GET_CODE (PATTERN (next)) != SET)\n-\t    /* If the jump does not involve setting the PC\n-\t       then it is a return of some kind, and we know\n-\t       that the comparison is not used.  */\n-\t    return true;\n-\n-\t  if (GET_CODE (SET_SRC (PATTERN (next))) != IF_THEN_ELSE)\n-\t    return false;\n-\t}\n-    }\n-  while (! INSN_P (next)\n-\t || DEBUG_INSN_P (next)\n-\t || GET_CODE (PATTERN (next)) != SET\n-\t || GET_CODE (SET_SRC (PATTERN (next))) != IF_THEN_ELSE);\n-\n-  flags_needed = flags_needed_for_conditional (XEXP (SET_SRC (PATTERN (next)), 0));\n-\n-  /* Now look to see if there was a previous\n-     instruction which set the PSW bits.  */\n-  source = XEXP (SET_SRC (PATTERN (cmp)), 0);\n-  prev = cmp;\n-  do\n-    {\n-      /* If this insn uses/sets/clobbers the CC register\n-\t and it is not the insn that we are looking for\n-\t below, then we must need the comparison.  */\n-      if (prev != cmp && reg_mentioned_p (cc_reg, PATTERN (prev)))\n-\treturn false;\n-\n-      prev = prev_nonnote_insn (prev);\n-\n-      if (prev == NULL_RTX)\n-\treturn false;\n-\n-      /* If we encounter an insn which changes the contents of\n-\t the register which is the source of the comparison then\n-\t we will definitely need the comparison.  */\n-      if (INSN_P (prev)\n-\t  && GET_CODE (PATTERN (prev)) == SET\n-\t  && rtx_equal_p (SET_DEST (PATTERN (prev)), source))\n-\t{\n-\t  /* Unless this instruction is a simple register move\n-\t     instruction.  In which case we can continue our\n-\t     scan backwards, but now using the *source* of this\n-\t     set instruction.  */\n-\t  if (REG_P (SET_SRC (PATTERN (prev))))\n-\t    source = SET_SRC (PATTERN (prev));\n-\t  /* We can also survive a sign-extension if the test is\n-\t     for EQ/NE.  Note the same does not apply to zero-\n-\t     extension as this can turn a non-zero bit-pattern\n-\t     into zero.  */\n-\t  else if (flags_needed == CC_FLAG_Z\n-\t\t   && GET_CODE (SET_SRC (PATTERN (prev))) == SIGN_EXTEND)\n-\t    source = XEXP (SET_SRC (PATTERN (prev)), 0);\n-\t  else\n-\t    return false;\n-\t}\n-\n-      /* A label means a possible branch into the\n-\t code here, so we have to stop scanning.  */\n-      if (LABEL_P (prev))\n-\treturn false;\n-    }\n-  while (! INSN_P (prev)\n-\t || DEBUG_INSN_P (prev)\n-\t || GET_CODE (PATTERN (prev)) != PARALLEL\n-\t || GET_CODE (XVECEXP (PATTERN (prev), 0, 1)) != SET\n-\t || ! REG_P (SET_DEST (XVECEXP (PATTERN (prev), 0, 1)))\n-\t || REGNO (SET_DEST (XVECEXP (PATTERN (prev), 0, 1))) != CC_REGNUM);\n-\n-  flags_set = flags_from_mode (GET_MODE (SET_DEST (XVECEXP (PATTERN (prev), 0, 1))));\n-\n-  dest = SET_DEST (XVECEXP (PATTERN (prev), 0, 0));\n-  /* The destination of the previous arithmetic/logic instruction\n-     must match the source in the comparison operation.  For registers\n-     we ignore the mode as there may have been a sign-extension involved.  */\n-  if (! rtx_equal_p (source, dest))\n-    {\n-      if (REG_P (source) && REG_P (dest) && REGNO (dest) == REGNO (source))\n-\t;\n-      else\n-\treturn false;\n-    }\n-\n-  return ((flags_set & flags_needed) == flags_needed);\n-}\n-\n static int\n rx_memory_move_cost (enum machine_mode mode, reg_class_t regclass, bool in)\n {"}, {"sha": "545c2fb21e88218bcf2e4531f3a9988b05fe350f", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af530bb412465cf6fc55fd9a31ab69b2b2c0a64a/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af530bb412465cf6fc55fd9a31ab69b2b2c0a64a/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=af530bb412465cf6fc55fd9a31ab69b2b2c0a64a", "patch": "@@ -340,12 +340,7 @@\n \t(compare:CC (match_operand:SI 0 \"register_operand\"  \"r,r,r,r,r,r,r\")\n \t\t    (match_operand:SI 1 \"rx_source_operand\" \"r,Uint04,Int08,Sint16,Sint24,i,Q\")))]\n   \"\"\n-  {\n-    rx_float_compare_mode = false;\n-    if (rx_compare_redundant (insn))\n-      return \"; Compare Eliminated: cmp %Q1, %0\";\n-    return \"cmp\\t%Q1, %0\";\n-  }\n+  \"cmp\\t%Q1, %0\"\n   [(set_attr \"timings\" \"11,11,11,11,11,11,33\")\n    (set_attr \"length\"  \"2,2,3,4,5,6,5\")]\n )"}]}