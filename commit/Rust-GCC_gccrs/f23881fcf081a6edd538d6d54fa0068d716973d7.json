{"sha": "f23881fcf081a6edd538d6d54fa0068d716973d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIzODgxZmNmMDgxYTZlZGQ1MzhkNmQ1NGZhMDA2OGQ3MTY5NzNkNw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-03-09T13:56:54Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-04-21T14:13:44Z"}, "message": "Remove TARGET_foo (ix86_tune == PROCESSOR_foo) macros.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-expand.c (decide_alignment): Use newly named\n\tmacro TARGET_CPU_P.\n\t* config/i386/i386.c (ix86_decompose_address): Likewise.\n\t(ix86_address_cost): Likewise.\n\t(ix86_lea_outperforms): Likewise.\n\t(ix86_avoid_lea_for_addr): Likewise.\n\t(ix86_add_stmt_cost): Likewise.\n\t* config/i386/i386.h (TARGET_*): Remove.\n\t(TARGET_CPU_P): New macro.\n\t* config/i386/i386.md: Use newly named macro TARGET_CPU_P.\n\t* config/i386/x86-tune-sched-atom.c (do_reorder_for_imul): Likewise.\n\t(swap_top_of_ready_list): Likewise.\n\t(ix86_atom_sched_reorder): Likewise.\n\t* config/i386/x86-tune-sched-bd.c (ix86_bd_has_dispatch): Likewise.\n\t* config/i386/x86-tune-sched.c (ix86_adjust_cost): Likewise.", "tree": {"sha": "632aa0df6600bdc936ec8785743ca3e86a2fb54e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/632aa0df6600bdc936ec8785743ca3e86a2fb54e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f23881fcf081a6edd538d6d54fa0068d716973d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f23881fcf081a6edd538d6d54fa0068d716973d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f23881fcf081a6edd538d6d54fa0068d716973d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f23881fcf081a6edd538d6d54fa0068d716973d7/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1751bec027f030515889fcf4baa9c91501aafc85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1751bec027f030515889fcf4baa9c91501aafc85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1751bec027f030515889fcf4baa9c91501aafc85"}], "stats": {"total": 86, "additions": 23, "deletions": 63}, "files": [{"sha": "166c23ddb4db0935e15b33056ead43730b2bc515", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=f23881fcf081a6edd538d6d54fa0068d716973d7", "patch": "@@ -7055,7 +7055,7 @@ decide_alignment (int align,\n   desired_align = GET_MODE_SIZE (move_mode);\n   /* PentiumPro has special logic triggering for 8 byte aligned blocks.\n      copying whole cacheline at once.  */\n-  if (TARGET_PENTIUMPRO\n+  if (TARGET_CPU_P (PENTIUMPRO)\n       && (alg == rep_prefix_4_byte || alg == rep_prefix_1_byte))\n     desired_align = 8;\n "}, {"sha": "c302bc2359a2846779df2c3ef94724d481429337", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f23881fcf081a6edd538d6d54fa0068d716973d7", "patch": "@@ -10179,7 +10179,7 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n      Avoid this by transforming to [%esi+0].\n      Reload calls address legitimization without cfun defined, so we need\n      to test cfun for being non-NULL. */\n-  if (TARGET_K6 && cfun && optimize_function_for_speed_p (cfun)\n+  if (TARGET_CPU_P (K6) && cfun && optimize_function_for_speed_p (cfun)\n       && base_reg && !index_reg && !disp\n       && REGNO (base_reg) == SI_REG)\n     disp = const0_rtx;\n@@ -10257,7 +10257,7 @@ ix86_address_cost (rtx x, machine_mode, addr_space_t, bool)\n      memory address, but I don't have AMD-K6 machine handy to check this\n      theory.  */\n \n-  if (TARGET_K6\n+  if (TARGET_CPU_P (K6)\n       && ((!parts.disp && parts.base && parts.index && parts.scale != 1)\n \t  || (parts.disp && !parts.base && parts.index && parts.scale != 1)\n \t  || (!parts.disp && parts.base && parts.index && parts.scale == 1)))\n@@ -14940,7 +14940,7 @@ ix86_lea_outperforms (rtx_insn *insn, unsigned int regno0, unsigned int regno1,\n   /* For Atom processors newer than Bonnell, if using a 2-source or\n      3-source LEA for non-destructive destination purposes, or due to\n      wanting ability to use SCALE, the use of LEA is justified.  */\n-  if (!TARGET_BONNELL)\n+  if (!TARGET_CPU_P (BONNELL))\n     {\n       if (has_scale)\n \treturn true;\n@@ -15082,7 +15082,7 @@ ix86_avoid_lea_for_addr (rtx_insn *insn, rtx operands[])\n      than lea for most processors.  For the processors like BONNELL, if\n      the destination register of LEA holds an actual address which will\n      be used soon, LEA is better and otherwise ADD is better.  */\n-  if (!TARGET_BONNELL\n+  if (!TARGET_CPU_P (BONNELL)\n       && parts.scale == 1\n       && (!parts.disp || parts.disp == const0_rtx)\n       && (regno0 == regno1 || regno0 == regno2))\n@@ -22387,7 +22387,7 @@ ix86_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n     stmt_cost = ix86_builtin_vectorization_cost (kind, vectype, misalign);\n \n   /* Penalize DFmode vector operations for Bonnell.  */\n-  if (TARGET_BONNELL && kind == vector_stmt\n+  if (TARGET_CPU_P (BONNELL) && kind == vector_stmt\n       && vectype && GET_MODE_INNER (TYPE_MODE (vectype)) == DFmode)\n     stmt_cost *= 5;  /* FIXME: The value here is arbitrary.  */\n \n@@ -22403,8 +22403,10 @@ ix86_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n   /* We need to multiply all vector stmt cost by 1.7 (estimated cost)\n      for Silvermont as it has out of order integer pipeline and can execute\n      2 scalar instruction per tick, but has in order SIMD pipeline.  */\n-  if ((TARGET_SILVERMONT || TARGET_GOLDMONT || TARGET_GOLDMONT_PLUS\n-       || TARGET_TREMONT || TARGET_INTEL) && stmt_info && stmt_info->stmt)\n+  if ((TARGET_CPU_P (SILVERMONT) || TARGET_CPU_P (GOLDMONT)\n+       || TARGET_CPU_P (GOLDMONT_PLUS) || TARGET_CPU_P (TREMONT)\n+       || TARGET_CPU_P (INTEL))\n+      && stmt_info && stmt_info->stmt)\n     {\n       tree lhs_op = gimple_get_lhs (stmt_info->stmt);\n       if (lhs_op && TREE_CODE (TREE_TYPE (lhs_op)) == INTEGER_TYPE)"}, {"sha": "96b46bac23858fed50a3a7e369d0cd9fd821d1c6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f23881fcf081a6edd538d6d54fa0068d716973d7", "patch": "@@ -263,51 +263,7 @@ extern const struct processor_costs ix86_size_cost;\n #define HAS_LONG_COND_BRANCH 1\n #define HAS_LONG_UNCOND_BRANCH 1\n \n-#define TARGET_386 (ix86_tune == PROCESSOR_I386)\n-#define TARGET_486 (ix86_tune == PROCESSOR_I486)\n-#define TARGET_PENTIUM (ix86_tune == PROCESSOR_PENTIUM)\n-#define TARGET_PENTIUMPRO (ix86_tune == PROCESSOR_PENTIUMPRO)\n-#define TARGET_GEODE (ix86_tune == PROCESSOR_GEODE)\n-#define TARGET_K6 (ix86_tune == PROCESSOR_K6)\n-#define TARGET_ATHLON (ix86_tune == PROCESSOR_ATHLON)\n-#define TARGET_PENTIUM4 (ix86_tune == PROCESSOR_PENTIUM4)\n-#define TARGET_K8 (ix86_tune == PROCESSOR_K8)\n-#define TARGET_ATHLON_K8 (TARGET_K8 || TARGET_ATHLON)\n-#define TARGET_NOCONA (ix86_tune == PROCESSOR_NOCONA)\n-#define TARGET_CORE2 (ix86_tune == PROCESSOR_CORE2)\n-#define TARGET_NEHALEM (ix86_tune == PROCESSOR_NEHALEM)\n-#define TARGET_SANDYBRIDGE (ix86_tune == PROCESSOR_SANDYBRIDGE)\n-#define TARGET_HASWELL (ix86_tune == PROCESSOR_HASWELL)\n-#define TARGET_BONNELL (ix86_tune == PROCESSOR_BONNELL)\n-#define TARGET_SILVERMONT (ix86_tune == PROCESSOR_SILVERMONT)\n-#define TARGET_GOLDMONT (ix86_tune == PROCESSOR_GOLDMONT)\n-#define TARGET_GOLDMONT_PLUS (ix86_tune == PROCESSOR_GOLDMONT_PLUS)\n-#define TARGET_TREMONT (ix86_tune == PROCESSOR_TREMONT)\n-#define TARGET_KNL (ix86_tune == PROCESSOR_KNL)\n-#define TARGET_KNM (ix86_tune == PROCESSOR_KNM)\n-#define TARGET_SKYLAKE (ix86_tune == PROCESSOR_SKYLAKE)\n-#define TARGET_SKYLAKE_AVX512 (ix86_tune == PROCESSOR_SKYLAKE_AVX512)\n-#define TARGET_CANNONLAKE (ix86_tune == PROCESSOR_CANNONLAKE)\n-#define TARGET_ICELAKE_CLIENT (ix86_tune == PROCESSOR_ICELAKE_CLIENT)\n-#define TARGET_ICELAKE_SERVER (ix86_tune == PROCESSOR_ICELAKE_SERVER)\n-#define TARGET_CASCADELAKE (ix86_tune == PROCESSOR_CASCADELAKE)\n-#define TARGET_TIGERLAKE (ix86_tune == PROCESSOR_TIGERLAKE)\n-#define TARGET_COOPERLAKE (ix86_tune == PROCESSOR_COOPERLAKE)\n-#define TARGET_SAPPHIRERAPIDS (ix86_tune == PROCESSOR_SAPPHIRERAPIDS)\n-#define TARGET_ALDERLAKE (ix86_tune == PROCESSOR_ALDERLAKE)\n-#define TARGET_ROCKETLAKE (ix86_tune == PROCESSOR_ROCKETLAKE)\n-#define TARGET_INTEL (ix86_tune == PROCESSOR_INTEL)\n-#define TARGET_GENERIC (ix86_tune == PROCESSOR_GENERIC)\n-#define TARGET_AMDFAM10 (ix86_tune == PROCESSOR_AMDFAM10)\n-#define TARGET_BDVER1 (ix86_tune == PROCESSOR_BDVER1)\n-#define TARGET_BDVER2 (ix86_tune == PROCESSOR_BDVER2)\n-#define TARGET_BDVER3 (ix86_tune == PROCESSOR_BDVER3)\n-#define TARGET_BDVER4 (ix86_tune == PROCESSOR_BDVER4)\n-#define TARGET_BTVER1 (ix86_tune == PROCESSOR_BTVER1)\n-#define TARGET_BTVER2 (ix86_tune == PROCESSOR_BTVER2)\n-#define TARGET_ZNVER1 (ix86_tune == PROCESSOR_ZNVER1)\n-#define TARGET_ZNVER2 (ix86_tune == PROCESSOR_ZNVER2)\n-#define TARGET_ZNVER3 (ix86_tune == PROCESSOR_ZNVER3)\n+#define TARGET_CPU_P(CPU) (ix86_tune == PROCESSOR_ ## CPU)\n \n /* Feature tests against the various tunings.  */\n enum ix86_tune_indices {"}, {"sha": "7eb717609a1271b73e0d2e55d53bf913fe3704c4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f23881fcf081a6edd538d6d54fa0068d716973d7", "patch": "@@ -14302,13 +14302,13 @@\n     return \"tzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n   else if (optimize_function_for_size_p (cfun))\n     ;\n-  else if (TARGET_GENERIC)\n+  else if (TARGET_CPU_P (GENERIC))\n     /* tzcnt expands to 'rep bsf' and we can use it even if !TARGET_BMI.  */\n     return \"rep%; bsf{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n \n   return \"bsf{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n }\n-  \"(TARGET_BMI || TARGET_GENERIC)\n+  \"(TARGET_BMI || TARGET_CPU_P (GENERIC))\n    && TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n    && optimize_function_for_speed_p (cfun)\n    && !reg_mentioned_p (operands[0], operands[1])\"\n@@ -14324,7 +14324,7 @@\n      (if_then_else\n        (ior (match_test \"TARGET_BMI\")\n \t    (and (not (match_test \"optimize_function_for_size_p (cfun)\"))\n-\t\t (match_test \"TARGET_GENERIC\")))\n+\t\t (match_test \"TARGET_CPU_P (GENERIC)\")))\n        (const_string \"1\")\n        (const_string \"0\")))\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -14343,7 +14343,7 @@\n {\n   if (TARGET_BMI)\n     return \"tzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n-  else if (TARGET_GENERIC)\n+  else if (TARGET_CPU_P (GENERIC))\n     /* tzcnt expands to 'rep bsf' and we can use it even if !TARGET_BMI.  */\n     return \"rep%; bsf{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n   else"}, {"sha": "1611436a05b4a80374a7cec354aa035d789e3fee", "filename": "gcc/config/i386/x86-tune-sched-atom.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fx86-tune-sched-atom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fx86-tune-sched-atom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-sched-atom.c?ref=f23881fcf081a6edd538d6d54fa0068d716973d7", "patch": "@@ -51,7 +51,7 @@ do_reorder_for_imul (rtx_insn **ready, int n_ready)\n   int index = -1;\n   int i;\n \n-  if (!TARGET_BONNELL)\n+  if (!TARGET_CPU_P (BONNELL))\n     return index;\n \n   /* Check that IMUL instruction is on the top of ready list.  */\n@@ -131,7 +131,7 @@ swap_top_of_ready_list (rtx_insn **ready, int n_ready)\n   int clock2 = -1;\n   #define INSN_TICK(INSN) (HID (INSN)->tick)\n \n-  if (!TARGET_SILVERMONT && !TARGET_INTEL)\n+  if (!TARGET_CPU_P (SILVERMONT) && !TARGET_CPU_P (INTEL))\n     return false;\n \n   if (!NONDEBUG_INSN_P (top))\n@@ -204,7 +204,8 @@ ix86_atom_sched_reorder (FILE *dump, int sched_verbose, rtx_insn **ready,\n   issue_rate = ix86_issue_rate ();\n \n   /* Do reodering for BONNELL/SILVERMONT only.  */\n-  if (!TARGET_BONNELL && !TARGET_SILVERMONT && !TARGET_INTEL)\n+  if (!TARGET_CPU_P (BONNELL) && !TARGET_CPU_P (SILVERMONT)\n+      && !TARGET_CPU_P (INTEL))\n     return issue_rate;\n \n   /* Nothing to do if ready list contains only 1 instruction.  */"}, {"sha": "ad0edf713f57f2940b6425003ae43a339e382e71", "filename": "gcc/config/i386/x86-tune-sched-bd.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fx86-tune-sched-bd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fx86-tune-sched-bd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-sched-bd.c?ref=f23881fcf081a6edd538d6d54fa0068d716973d7", "patch": "@@ -800,8 +800,9 @@ bool\n ix86_bd_has_dispatch (rtx_insn *insn, int action)\n {\n   /* Current implementation of dispatch scheduler models buldozer only.  */\n-  if ((TARGET_BDVER1 || TARGET_BDVER2 || TARGET_BDVER3\n-      || TARGET_BDVER4) && flag_dispatch_scheduler)\n+  if ((TARGET_CPU_P (BDVER1) || TARGET_CPU_P (BDVER2)\n+       || TARGET_CPU_P (BDVER3) || TARGET_CPU_P (BDVER4))\n+      && flag_dispatch_scheduler)\n     switch (action)\n       {\n       default:"}, {"sha": "6d8bca9ce85ab41708f360513fdbb43e535821cf", "filename": "gcc/config/i386/x86-tune-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f23881fcf081a6edd538d6d54fa0068d716973d7/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c?ref=f23881fcf081a6edd538d6d54fa0068d716973d7", "patch": "@@ -386,7 +386,7 @@ ix86_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n \t  if (unit == UNIT_INTEGER || unit == UNIT_UNKNOWN)\n \t    loadcost = 3;\n \t  else\n-\t    loadcost = TARGET_ATHLON ? 2 : 0;\n+\t    loadcost = TARGET_CPU_P (ATHLON) ? 2 : 0;\n \n \t  if (cost >= loadcost)\n \t    cost -= loadcost;"}]}