{"sha": "9e58988061f4175896de11af0caf9bdd48c9b046", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1ODk4ODA2MWY0MTc1ODk2ZGUxMWFmMGNhZjliZGQ0OGM5YjA0Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-21T12:02:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-21T17:12:39Z"}, "message": "libstdc++: Define <=> for tuple, optional and variant\n\nAnother piece of P1614R2.\n\n\t* include/std/optional (operator<=>(optional<T>, optional<U>))\n\t(operator<=>(optional<T>, nullopt), operator<=>(optional<T>, U)):\n\tDefine for C++20.\n\t* include/std/tuple (__tuple_cmp): New helper function for <=>.\n\t(operator<=>(tuple<T...>, tuple<U>...)): Define for C++20.\n\t* include/std/variant (operator<=>(variant<T...>, variant<T...>))\n\t(operator<=>(monostate, monostate)): Define for C++20.\n\t* testsuite/20_util/optional/relops/three_way.cc: New test.\n\t* testsuite/20_util/tuple/comparison_operators/three_way.cc: New test.\n\t* testsuite/20_util/variant/89851.cc: Move to ...\n\t* testsuite/20_util/variant/relops/89851.cc: ... here.\n\t* testsuite/20_util/variant/90008.cc: Move to ...\n\t* testsuite/20_util/variant/relops/90008.cc: ... here.\n\t* testsuite/20_util/variant/relops/three_way.cc: New test.", "tree": {"sha": "324fbbc0975fb49b2901280792048f5d95aa90b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/324fbbc0975fb49b2901280792048f5d95aa90b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e58988061f4175896de11af0caf9bdd48c9b046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e58988061f4175896de11af0caf9bdd48c9b046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e58988061f4175896de11af0caf9bdd48c9b046", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e58988061f4175896de11af0caf9bdd48c9b046/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "131fbdd7b750faecd7c874dc97adb01b53d073ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131fbdd7b750faecd7c874dc97adb01b53d073ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/131fbdd7b750faecd7c874dc97adb01b53d073ea"}], "stats": {"total": 355, "additions": 351, "deletions": 4}, "files": [{"sha": "7e065ef3e1dfb46c4088d657a0ed78b846902b0e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9e58988061f4175896de11af0caf9bdd48c9b046", "patch": "@@ -1,3 +1,20 @@\n+2020-02-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/optional (operator<=>(optional<T>, optional<U>))\n+\t(operator<=>(optional<T>, nullopt), operator<=>(optional<T>, U)):\n+\tDefine for C++20.\n+\t* include/std/tuple (__tuple_cmp): New helper function for <=>.\n+\t(operator<=>(tuple<T...>, tuple<U>...)): Define for C++20.\n+\t* include/std/variant (operator<=>(variant<T...>, variant<T...>))\n+\t(operator<=>(monostate, monostate)): Define for C++20.\n+\t* testsuite/20_util/optional/relops/three_way.cc: New test.\n+\t* testsuite/20_util/tuple/comparison_operators/three_way.cc: New test.\n+\t* testsuite/20_util/variant/89851.cc: Move to ...\n+\t* testsuite/20_util/variant/relops/89851.cc: ... here.\n+\t* testsuite/20_util/variant/90008.cc: Move to ...\n+\t* testsuite/20_util/variant/relops/90008.cc: ... here.\n+\t* testsuite/20_util/variant/relops/three_way.cc: New test.\n+\n 2020-02-20  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/std/ranges (views::__adaptor::__maybe_refwrap): New utility"}, {"sha": "37c2ba7a02517b0d4db04c0dd653b3c79b11be92", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=9e58988061f4175896de11af0caf9bdd48c9b046", "patch": "@@ -41,6 +41,9 @@\n #include <bits/exception_defines.h>\n #include <bits/functional_hash.h>\n #include <bits/enable_special_members.h>\n+#if __cplusplus > 201703L\n+# include <compare>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -1027,12 +1030,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return !__rhs || (static_cast<bool>(__lhs) && *__lhs >= *__rhs);\n     }\n \n+#ifdef __cpp_lib_three_way_comparison\n+  template<typename _Tp, three_way_comparable_with<_Tp> _Up>\n+    constexpr compare_three_way_result_t<_Tp, _Up>\n+    operator<=>(const optional<_Tp>& __x, const optional<_Up>& __y)\n+    {\n+      return __x && __y ? *__x <=> *__y : bool(__x) <=> bool(__y);\n+    }\n+#endif\n+\n   // Comparisons with nullopt.\n   template<typename _Tp>\n     constexpr bool\n     operator==(const optional<_Tp>& __lhs, nullopt_t) noexcept\n     { return !__lhs; }\n \n+#ifdef __cpp_lib_three_way_comparison\n+  template<typename _Tp>\n+    constexpr strong_ordering\n+    operator<=>(const optional<_Tp>& __x, nullopt_t) noexcept\n+    { return bool(__x) <=> false; }\n+#else\n   template<typename _Tp>\n     constexpr bool\n     operator==(nullopt_t, const optional<_Tp>& __rhs) noexcept\n@@ -1087,6 +1105,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr bool\n     operator>=(nullopt_t, const optional<_Tp>& __rhs) noexcept\n     { return !__rhs; }\n+#endif // three-way-comparison\n \n   // Comparisons with value type.\n   template<typename _Tp, typename _Up>\n@@ -1161,6 +1180,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     -> __optional_relop_t<decltype(declval<_Up>() >= declval<_Tp>())>\n     { return !__rhs || __lhs >= *__rhs; }\n \n+#ifdef __cpp_lib_three_way_comparison\n+  template<typename _Tp, typename _Up>\n+    constexpr compare_three_way_result_t<_Tp, _Up>\n+    operator<=>(const optional<_Tp>& __x, const _Up& __v)\n+    { return bool(__x) ? *__x <=> __v : strong_ordering::less; }\n+#endif\n+\n   // Swap and creation functions.\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS"}, {"sha": "808947781aed4f56090127fb7fb0e99a086664a6", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=9e58988061f4175896de11af0caf9bdd48c9b046", "patch": "@@ -39,6 +39,9 @@\n #include <array>\n #include <bits/uses_allocator.h>\n #include <bits/invoke.h>\n+#if __cplusplus > 201703L\n+# include <compare>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -1397,6 +1400,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __compare::__eq(__t, __u);\n     }\n \n+#if __cpp_lib_three_way_comparison\n+  template<typename _Cat, typename _Tp, typename _Up>\n+    constexpr _Cat\n+    __tuple_cmp(const _Tp&, const _Up&, index_sequence<>)\n+    { return _Cat::equivalent; }\n+\n+  template<typename _Cat, typename _Tp, typename _Up,\n+\t   size_t _Idx0, size_t... _Idxs>\n+    constexpr _Cat\n+    __tuple_cmp(const _Tp& __t, const _Up& __u,\n+\t\tindex_sequence<_Idx0, _Idxs...>)\n+    {\n+      auto __c\n+\t= __detail::__synth3way(std::get<_Idx0>(__t), std::get<_Idx0>(__u));\n+      if (__c != 0)\n+\treturn __c;\n+      return std::__tuple_cmp<_Cat>(__t, __u, index_sequence<_Idxs...>());\n+    }\n+\n+  template<typename... _Tps, typename... _Ups>\n+    constexpr\n+    common_comparison_category_t<__detail::__synth3way_t<_Tps, _Ups>...>\n+    operator<=>(const tuple<_Tps...>& __t, const tuple<_Ups...>& __u)\n+    {\n+      using _Cat\n+\t= common_comparison_category_t<__detail::__synth3way_t<_Tps, _Ups>...>;\n+      return std::__tuple_cmp<_Cat>(__t, __u, index_sequence_for<_Tps...>());\n+    }\n+#else\n   template<typename... _TElements, typename... _UElements>\n     constexpr bool\n     operator<(const tuple<_TElements...>& __t,\n@@ -1433,6 +1465,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator>=(const tuple<_TElements...>& __t,\n \t       const tuple<_UElements...>& __u)\n     { return !(__t < __u); }\n+#endif // three_way_comparison\n \n   // NB: DR 705.\n   template<typename... _Elements>"}, {"sha": "258a5fb18bdc3ca3e4d2f7bc3f89f121bee3d709", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=9e58988061f4175896de11af0caf9bdd48c9b046", "patch": "@@ -45,6 +45,9 @@\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_construct.h>\n+#if __cplusplus > 201703L\n+# include <compare>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -1181,10 +1184,7 @@ namespace __variant\n             __ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \\\n \t}, __rhs); \\\n       return __ret; \\\n-    } \\\n-\\\n-  constexpr bool operator __OP(monostate, monostate) noexcept \\\n-  { return 0 __OP 0; }\n+    }\n \n   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)\n   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)\n@@ -1195,6 +1195,45 @@ namespace __variant\n \n #undef _VARIANT_RELATION_FUNCTION_TEMPLATE\n \n+  constexpr bool operator==(monostate, monostate) noexcept { return true; }\n+\n+#ifdef __cpp_lib_three_way_comparison\n+  template<typename... _Types>\n+    requires (three_way_comparable<_Types> && ...)\n+    constexpr\n+    common_comparison_category_t<compare_three_way_result_t<_Types>...>\n+    operator<=>(const variant<_Types...>& __v, const variant<_Types...>& __w)\n+    {\n+      common_comparison_category_t<compare_three_way_result_t<_Types>...> __ret\n+\t= strong_ordering::equal;\n+\n+      __detail::__variant::__raw_idx_visit(\n+\t[&__ret, &__v] (auto&& __w_mem, auto __w_index) mutable\n+\t{\n+\t  if constexpr (__w_index != variant_npos)\n+\t    {\n+\t      if (__v.index() == __w_index)\n+\t\t{\n+\t\t  auto& __this_mem = std::get<__w_index>(__v);\n+\t\t  __ret = __this_mem <=> __w_mem;\n+\t\t  return;\n+\t\t}\n+\t    }\n+\t  __ret = (__v.index() + 1) <=> (__w_index + 1);\n+\t}, __w);\n+      return __ret;\n+    }\n+\n+  constexpr strong_ordering\n+  operator<=>(monostate, monostate) noexcept { return strong_ordering::equal; }\n+#else\n+  constexpr bool operator!=(monostate, monostate) noexcept { return false; }\n+  constexpr bool operator<(monostate, monostate) noexcept { return false; }\n+  constexpr bool operator>(monostate, monostate) noexcept { return false; }\n+  constexpr bool operator<=(monostate, monostate) noexcept { return true; }\n+  constexpr bool operator>=(monostate, monostate) noexcept { return true; }\n+#endif\n+\n   template<typename _Visitor, typename... _Variants>\n     constexpr decltype(auto) visit(_Visitor&&, _Variants&&...);\n "}, {"sha": "d7bd16bf32a0aec2427ce747a57a3fed303cf009", "filename": "libstdc++-v3/testsuite/20_util/optional/relops/three_way.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frelops%2Fthree_way.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frelops%2Fthree_way.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Frelops%2Fthree_way.cc?ref=9e58988061f4175896de11af0caf9bdd48c9b046", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <optional>\n+\n+void\n+test01()\n+{\n+  using O = std::optional<int>;\n+\n+  static_assert( std::is_eq(O{} <=> O{}) );\n+  static_assert( std::is_lt(O{} <=> O{1}) );\n+  static_assert( std::is_gt(O{1} <=> O{}) );\n+  static_assert( std::is_eq(O{1} <=> O{1}) );\n+  static_assert( std::is_lt(O{1} <=> O{2}) );\n+\n+  static_assert( O{} == O{} );\n+  static_assert( O{} < O{1} );\n+  static_assert( O{1} > O{} );\n+  static_assert( O{1} == O{1} );\n+  static_assert( O{1} != O{2} );\n+  static_assert( O{1} < O{2} );\n+\n+  using Os = std::optional<short>;\n+  static_assert( std::is_eq(O{} <=> Os{}) );\n+  static_assert( std::is_lt(O{} <=> Os{1}) );\n+  static_assert( std::is_gt(O{1} <=> Os{}) );\n+  static_assert( std::is_eq(O{1} <=> Os{1}) );\n+  static_assert( std::is_lt(O{1} <=> Os{2}) );\n+\n+  static_assert( O{} == Os{} );\n+  static_assert( O{} < Os{1} );\n+  static_assert( O{1} > Os{} );\n+  static_assert( O{1} == Os{1} );\n+  static_assert( O{1} != Os{2} );\n+  static_assert( O{1} < Os{2} );\n+\n+  // Would requires narrowing conversion to make operands the same type:\n+  static_assert( !std::three_way_comparable_with<O, std::optional<unsigned>> );\n+}\n+\n+void\n+test02()\n+{\n+  using O = std::optional<int>;\n+  using std::nullopt;\n+\n+  static_assert( std::is_eq(O{} <=> nullopt) );\n+  static_assert( std::is_gt(O{1} <=> nullopt) );\n+  static_assert( std::is_lt(nullopt <=> O{1}) );\n+\n+  static_assert( O{} == nullopt );\n+  static_assert( O{1} != nullopt );\n+  static_assert( nullopt != O{1} );\n+  static_assert( O{1} > nullopt );\n+  static_assert( nullopt < O{1} );\n+  static_assert( nullopt <= O{} );\n+  static_assert( nullopt <= O{1} );\n+}"}, {"sha": "f8752d71c0611f87e5c315cf3ce94bda2fdcace8", "filename": "libstdc++-v3/testsuite/20_util/tuple/comparison_operators/three_way.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2Fthree_way.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2Fthree_way.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcomparison_operators%2Fthree_way.cc?ref=9e58988061f4175896de11af0caf9bdd48c9b046", "patch": "@@ -0,0 +1,102 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Tuple\n+\n+#include <tuple>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+template<typename T>\n+bool self_consistent(const T& x)\n+{\n+  return std::is_eq(x <=> x) && x == x && !(x != x) && x <= x && !(x < x);\n+}\n+\n+void\n+test01()\n+{\n+  int i=0;\n+  int j=0;\n+  int k=2;\n+  tuple<int, int, int> a(0, 0, 0);\n+  tuple<int, int, int> b(0, 0, 1);\n+  tuple<int& , int& , int&> c(i,j,k);\n+  tuple<const int&, const int&, const int&> d(c);\n+  VERIFY( self_consistent(a) );\n+  VERIFY( self_consistent(b) );\n+  VERIFY( self_consistent(c) );\n+  VERIFY( self_consistent(d) );\n+  VERIFY( !(a > a) && !(b > b) );\n+  VERIFY( a >= a && b >= b );\n+  VERIFY( a < b && !(b < a) && a <= b && !(b <= a) );\n+  VERIFY( b > a && !(a > b) && b >= a && !(a >= b) );\n+\n+  VERIFY( std::is_lt(a <=> b) );\n+  VERIFY( std::is_gt(b <=> a) );\n+  VERIFY( std::is_gt(c <=> a) );\n+  VERIFY( std::is_eq(c <=> d) );\n+\n+  static_assert( std::is_same_v<decltype(a <=> d), std::strong_ordering> );\n+}\n+\n+template<typename T, typename U, typename C>\n+constexpr bool\n+check_compare(T&& t, U&& u, C c)\n+{\n+  using R = std::compare_three_way_result_t<T, U>;\n+  static_assert( std::same_as<C, R> );\n+  return (t <=> u) == c;\n+}\n+\n+void\n+test02()\n+{\n+  using std::strong_ordering;\n+  using std::weak_ordering;\n+  using std::partial_ordering;\n+\n+  using T0 = std::tuple<>;\n+  static_assert( check_compare(T0(), T0(), strong_ordering::equal) );\n+\n+  using Ti = std::tuple<int>;\n+  using Tu = std::tuple<unsigned>;\n+  static_assert( check_compare(Ti(1), Tu(1u), weak_ordering::equivalent) );\n+  static_assert( check_compare(Ti(1), Tu(2u), weak_ordering::less) );\n+  static_assert( check_compare(Ti(-1), Tu(1u), weak_ordering::greater) );\n+\n+  using Tii = std::tuple<int, int>;\n+  using Tlu = std::tuple<long, unsigned>;\n+  static_assert( check_compare(Tii(1, 2), Tlu(2l, 1u), weak_ordering::less) );\n+\n+  using Tid = std::tuple<int, double>;\n+  static_assert( check_compare(Tii(3, 4), Tid(2, 0.9), partial_ordering::greater) );\n+\n+  static_assert( !std::three_way_comparable_with<T0, Ti> );\n+  static_assert( !std::three_way_comparable_with<Ti, Tii> );\n+  static_assert( !std::three_way_comparable_with<Ti, Tid> );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "264f58cbd29c3f23bb89f01689229402a498747a", "filename": "libstdc++-v3/testsuite/20_util/variant/relops/89851.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frelops%2F89851.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frelops%2F89851.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frelops%2F89851.cc?ref=9e58988061f4175896de11af0caf9bdd48c9b046", "previous_filename": "libstdc++-v3/testsuite/20_util/variant/89851.cc"}, {"sha": "4f4e9696d541a9ce0ce91d563f610eb2baca8771", "filename": "libstdc++-v3/testsuite/20_util/variant/relops/90008.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frelops%2F90008.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frelops%2F90008.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frelops%2F90008.cc?ref=9e58988061f4175896de11af0caf9bdd48c9b046", "previous_filename": "libstdc++-v3/testsuite/20_util/variant/90008.cc"}, {"sha": "b4f78e87d23d5a303f3695654365ba95cbb205cb", "filename": "libstdc++-v3/testsuite/20_util/variant/relops/three_way.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frelops%2Fthree_way.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e58988061f4175896de11af0caf9bdd48c9b046/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frelops%2Fthree_way.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Frelops%2Fthree_way.cc?ref=9e58988061f4175896de11af0caf9bdd48c9b046", "patch": "@@ -0,0 +1,54 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <variant>\n+\n+void\n+test01()\n+{\n+  using V = std::variant<int, int>;\n+  constexpr auto I0 = std::in_place_index<0>;\n+  constexpr auto I1 = std::in_place_index<1>;\n+\n+  static_assert( std::is_eq(V{I0, 0} <=> V{I0, 0})  );\n+  static_assert( std::is_eq(V{I0, 1} <=> V{I0, 1})  );\n+\n+  static_assert( std::is_lt(V{I0, 0} <=> V{I1, 0})  );\n+  static_assert( std::is_lt(V{I0, 1} <=> V{I1, 0})  );\n+\n+  static_assert( std::is_gt(V{I0, 1} <=> V{I0, 0})  );\n+  static_assert( std::is_gt(V{I1, 0} <=> V{I0, 1})  );\n+\n+  static_assert( V{I0, 0} == V{I0, 0}  );\n+  static_assert( V{I0, 0} != V{I1, 0}  );\n+  static_assert( V{I1, 0} != V{I1, 1}  );\n+}\n+\n+void\n+test02()\n+{\n+  static_assert( std::is_eq(std::monostate{} <=> std::monostate{}) );\n+  static_assert( std::monostate{} == std::monostate{} );\n+  static_assert( std::monostate{} <= std::monostate{} );\n+  static_assert( std::monostate{} >= std::monostate{} );\n+  static_assert( !(std::monostate{} != std::monostate{}) );\n+  static_assert( !(std::monostate{} < std::monostate{}) );\n+  static_assert( !(std::monostate{} > std::monostate{}) );\n+}"}]}