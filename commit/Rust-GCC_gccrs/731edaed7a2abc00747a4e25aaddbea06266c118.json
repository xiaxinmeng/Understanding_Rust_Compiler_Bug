{"sha": "731edaed7a2abc00747a4e25aaddbea06266c118", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMxZWRhZWQ3YTJhYmMwMDc0N2E0ZTI1YWFkZGJlYTA2MjY2YzExOA==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2004-11-18T14:33:08Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2004-11-18T14:33:08Z"}, "message": "* config/i386/i386.md (define_peephole2): Revert last change.\n\nFrom-SVN: r90863", "tree": {"sha": "db966582f2d5ffe44fffe12d56e834de31537fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db966582f2d5ffe44fffe12d56e834de31537fc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/731edaed7a2abc00747a4e25aaddbea06266c118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/731edaed7a2abc00747a4e25aaddbea06266c118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/731edaed7a2abc00747a4e25aaddbea06266c118", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/731edaed7a2abc00747a4e25aaddbea06266c118/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9975bd3203dbe5ca012b876cd94fece85d59896d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9975bd3203dbe5ca012b876cd94fece85d59896d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9975bd3203dbe5ca012b876cd94fece85d59896d"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "8f460dcd0610f4c3f161eea9635a20441f7bd989", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/731edaed7a2abc00747a4e25aaddbea06266c118/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/731edaed7a2abc00747a4e25aaddbea06266c118/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=731edaed7a2abc00747a4e25aaddbea06266c118", "patch": "@@ -1,3 +1,7 @@\n+2004-11-18  Andreas Schwab  <schwab@suse.de>\n+\n+\t* config/i386/i386.md (define_peephole2): Revert last change.\n+\n 2004-11-18  Kazuhiro Inaoka <inaoka.kazuhiro@renesas.comn>\n \n \t* config/m32r/linux.h (TARGET_ASM_FILE_END): Set"}, {"sha": "abc1cb8917fb3b7a3c4f844f571dec458862562f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/731edaed7a2abc00747a4e25aaddbea06266c118/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/731edaed7a2abc00747a4e25aaddbea06266c118/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=731edaed7a2abc00747a4e25aaddbea06266c118", "patch": "@@ -1866,11 +1866,12 @@\n \n ;; We need to define this as both peepholer and splitter for case\n ;; peephole2 pass is not run.\n+;; \"&& 1\" is needed to keep it from matching the previous pattern.\n (define_peephole2\n   [(set (match_operand:DI 0 \"push_operand\" \"\")\n         (match_operand:DI 1 \"immediate_operand\" \"\"))]\n   \"TARGET_64BIT && !symbolic_operand (operands[1], DImode)\n-   && !x86_64_immediate_operand (operands[1], DImode)\"\n+   && !x86_64_immediate_operand (operands[1], DImode) && 1\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2) (match_dup 3))]\n   \"split_di (operands + 1, 1, operands + 2, operands + 3);\n@@ -2132,11 +2133,12 @@\n \n ;; We need to define this as both peepholer and splitter for case\n ;; peephole2 pass is not run.\n+;; \"&& 1\" is needed to keep it from matching the previous pattern.\n (define_peephole2\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n         (match_operand:DI 1 \"immediate_operand\" \"\"))]\n   \"TARGET_64BIT && !symbolic_operand (operands[1], DImode)\n-   && !x86_64_immediate_operand (operands[1], DImode)\"\n+   && !x86_64_immediate_operand (operands[1], DImode) && 1\"\n   [(set (match_dup 2) (match_dup 3))\n    (set (match_dup 4) (match_dup 5))]\n   \"split_di (operands, 2, operands + 2, operands + 4);\")"}]}