{"sha": "310055e7b481eb86318dc75dcf67f4091e395757", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEwMDU1ZTdiNDgxZWI4NjMxOGRjNzVkY2Y2N2Y0MDkxZTM5NTc1Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-09-17T15:46:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-09-17T15:46:04Z"}, "message": "Handle alignment in __atomic_is_lock_free\n\ngcc:\n\n2015-09-17  Richard Henderson  <rth@redhat.com>\n\n\tPR libstdc++/65913\n\t* builtins.c (fold_builtin_atomic_always_lock_free): Handle fake\n\tpointers that encode the alignment of the object.\n\nlibstdc++-v3:\n\n2015-09-17  Jonathan Wakely  <jwakely@redhat.com>\n\n\tPR libstdc++/65913\n\t* include/bits/atomic_base.h (__atomic_base<_TTp>::is_lock_free(),\n\t__atomic_base<_PTp*>::is_lock_free()): Call the built-in with the\n\timmediate pointer value, not a variable.\n\t* include/std/atomic (atomic<T>::is_lock_free()): Likewise.\n\t* testsuite/29_atomics/atomic/65913.cc: New.\n\nFrom-SVN: r227878", "tree": {"sha": "1f0c51ea5f77e0d267433e5aeeec1b8ac770b3b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f0c51ea5f77e0d267433e5aeeec1b8ac770b3b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/310055e7b481eb86318dc75dcf67f4091e395757", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/310055e7b481eb86318dc75dcf67f4091e395757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/310055e7b481eb86318dc75dcf67f4091e395757", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/310055e7b481eb86318dc75dcf67f4091e395757/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "308fbc42903ba2f97c29eea52928802686a917f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308fbc42903ba2f97c29eea52928802686a917f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/308fbc42903ba2f97c29eea52928802686a917f1"}], "stats": {"total": 96, "additions": 80, "deletions": 16}, "files": [{"sha": "1e9cf70182f3e06c86f656f8a83860f12f808955", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310055e7b481eb86318dc75dcf67f4091e395757/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310055e7b481eb86318dc75dcf67f4091e395757/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=310055e7b481eb86318dc75dcf67f4091e395757", "patch": "@@ -1,3 +1,9 @@\n+2015-09-17  Richard Henderson  <rth@redhat.com>\n+\n+\tPR libstdc++/65913\n+\t* builtins.c (fold_builtin_atomic_always_lock_free): Handle fake\n+\tpointers that encode the alignment of the object.\n+\n 2015-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/66790"}, {"sha": "aeec1708759c4737542ba3c0d1d409a8881f9988", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310055e7b481eb86318dc75dcf67f4091e395757/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310055e7b481eb86318dc75dcf67f4091e395757/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=310055e7b481eb86318dc75dcf67f4091e395757", "patch": "@@ -5635,8 +5635,20 @@ fold_builtin_atomic_always_lock_free (tree arg0, tree arg1)\n   mode = mode_for_size (size, MODE_INT, 0);\n   mode_align = GET_MODE_ALIGNMENT (mode);\n \n-  if (TREE_CODE (arg1) == INTEGER_CST && INTVAL (expand_normal (arg1)) == 0)\n-    type_align = mode_align;\n+  if (TREE_CODE (arg1) == INTEGER_CST)\n+    {\n+      unsigned HOST_WIDE_INT val = UINTVAL (expand_normal (arg1));\n+\n+      /* Either this argument is null, or it's a fake pointer encoding\n+         the alignment of the object.  */\n+      val = val & -val;\n+      val *= BITS_PER_UNIT;\n+\n+      if (val == 0 || mode_align < val)\n+        type_align = mode_align;\n+      else\n+        type_align = val;\n+    }\n   else\n     {\n       tree ttype = TREE_TYPE (arg1);"}, {"sha": "a1b0c3545f8ab31a54a8952ce6e4a10d11716445", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310055e7b481eb86318dc75dcf67f4091e395757/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310055e7b481eb86318dc75dcf67f4091e395757/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=310055e7b481eb86318dc75dcf67f4091e395757", "patch": "@@ -1,5 +1,12 @@\n 2015-09-17  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/65913\n+\t* include/bits/atomic_base.h (__atomic_base<_TTp>::is_lock_free(),\n+\t__atomic_base<_PTp*>::is_lock_free()): Call the built-in with the\n+\timmediate pointer value, not a variable.\n+\t* include/std/atomic (atomic<T>::is_lock_free()): Likewise.\n+\t* testsuite/29_atomics/atomic/65913.cc: New.\n+\n \t* testsuite/experimental/filesystem/operations/canonical.cc: Remove\n \tnon-deterministic part of the test.\n "}, {"sha": "75a7ca7731aeba078725dd3ca190294824d63efb", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310055e7b481eb86318dc75dcf67f4091e395757/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310055e7b481eb86318dc75dcf67f4091e395757/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=310055e7b481eb86318dc75dcf67f4091e395757", "patch": "@@ -350,17 +350,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool\n       is_lock_free() const noexcept\n       {\n-\t// Produce a fake, minimally aligned pointer.\n-\tvoid *__a = reinterpret_cast<void *>(-__alignof(_M_i));\n-\treturn __atomic_is_lock_free(sizeof(_M_i), __a);\n+\t// Use a fake, minimally aligned pointer.\n+\treturn __atomic_is_lock_free(sizeof(_M_i),\n+\t    reinterpret_cast<void *>(-__alignof(_M_i)));\n       }\n \n       bool\n       is_lock_free() const volatile noexcept\n       {\n-\t// Produce a fake, minimally aligned pointer.\n-\tvoid *__a = reinterpret_cast<void *>(-__alignof(_M_i));\n-\treturn __atomic_is_lock_free(sizeof(_M_i), __a);\n+\t// Use a fake, minimally aligned pointer.\n+\treturn __atomic_is_lock_free(sizeof(_M_i),\n+\t    reinterpret_cast<void *>(-__alignof(_M_i)));\n       }\n \n       _GLIBCXX_ALWAYS_INLINE void\n@@ -666,16 +666,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       is_lock_free() const noexcept\n       {\n \t// Produce a fake, minimally aligned pointer.\n-\tvoid *__a = reinterpret_cast<void *>(-__alignof(_M_p));\n-\treturn __atomic_is_lock_free(sizeof(_M_p), __a);\n+\treturn __atomic_is_lock_free(sizeof(_M_p),\n+\t    reinterpret_cast<void *>(-__alignof(_M_p)));\n       }\n \n       bool\n       is_lock_free() const volatile noexcept\n       {\n \t// Produce a fake, minimally aligned pointer.\n-\tvoid *__a = reinterpret_cast<void *>(-__alignof(_M_p));\n-\treturn __atomic_is_lock_free(sizeof(_M_p), __a);\n+\treturn __atomic_is_lock_free(sizeof(_M_p),\n+\t    reinterpret_cast<void *>(-__alignof(_M_p)));\n       }\n \n       _GLIBCXX_ALWAYS_INLINE void"}, {"sha": "cdd1f0b992d436efcb09386ebf6689852802e6ba", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310055e7b481eb86318dc75dcf67f4091e395757/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310055e7b481eb86318dc75dcf67f4091e395757/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=310055e7b481eb86318dc75dcf67f4091e395757", "patch": "@@ -208,16 +208,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       is_lock_free() const noexcept\n       {\n \t// Produce a fake, minimally aligned pointer.\n-\tvoid *__a = reinterpret_cast<void *>(-__alignof(_M_i));\n-\treturn __atomic_is_lock_free(sizeof(_M_i), __a);\n+\treturn __atomic_is_lock_free(sizeof(_M_i),\n+\t    reinterpret_cast<void *>(-__alignof(_M_i)));\n       }\n \n       bool\n       is_lock_free() const volatile noexcept\n       {\n \t// Produce a fake, minimally aligned pointer.\n-\tvoid *__a = reinterpret_cast<void *>(-__alignof(_M_i));\n-\treturn __atomic_is_lock_free(sizeof(_M_i), __a);\n+\treturn __atomic_is_lock_free(sizeof(_M_i),\n+\t    reinterpret_cast<void *>(-__alignof(_M_i)));\n       }\n \n       void"}, {"sha": "dbdd9cf7db601c416b757956dedf5b279665b58e", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/65913.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/310055e7b481eb86318dc75dcf67f4091e395757/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F65913.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/310055e7b481eb86318dc75dcf67f4091e395757/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F65913.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F65913.cc?ref=310055e7b481eb86318dc75dcf67f4091e395757", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target x86_64-*-linux* powerpc*-*-linux* } }\n+// { dg-options \"-std=gnu++11 -O0\" }\n+\n+#include <atomic>\n+#include <testsuite_hooks.h>\n+\n+// PR libstdc++/65913\n+\n+void\n+test01()\n+{\n+  struct Int { int i; };\n+  VERIFY( std::atomic<Int>{}.is_lock_free() );\n+  VERIFY( std::atomic<int>{}.is_lock_free() );\n+  VERIFY( std::atomic<int*>{}.is_lock_free() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}