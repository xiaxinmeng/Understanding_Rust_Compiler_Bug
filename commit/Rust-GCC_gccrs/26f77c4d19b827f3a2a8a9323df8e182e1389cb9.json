{"sha": "26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "node_id": "C_kwDOANBUbNoAKDI2Zjc3YzRkMTliODI3ZjNhMmE4YTkzMjNkZjhlMTgyZTEzODljYjk", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-06-27T21:00:34Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-06-27T21:00:34Z"}, "message": "Add 'final' and 'override' in various places\n\ngcc/cp/ChangeLog:\n\t* cxx-pretty-print.h: Add \"final\" and \"override\" to various vfunc\n\timplementations, removing redundant \"virtual\" as appropriate.\n\t* module.cc: Likewise.\n\ngcc/ChangeLog:\n\t* genmatch.cc: Add \"final\" and \"override\" to various vfunc\n\timplementations, removing redundant \"virtual\" as appropriate.\n\t* gensupport.cc: Likewise.\n\t* gimple-range-cache.h: Likewise.\n\t* ipa-icf-gimple.h: Likewise.\n\t* ipa-icf.h: Likewise.\n\t* read-md.h: Likewise.\n\t* read-rtl-function.cc: Likewise.\n\t* tree-ssa-loop-ch.cc: Likewise.\n\t* tree-ssa-sccvn.cc: Likewise.\n\ngcc/lto/ChangeLog:\n\t* lto-dump.cc: Add \"final\" and \"override\" to various vfunc\n\timplementations, removing redundant \"virtual\" as appropriate.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "34c4715289d2b7bd46c08eca7265916bfc9304e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34c4715289d2b7bd46c08eca7265916bfc9304e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a8333ade9a03fc203055e69c05008d9733e9e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a8333ade9a03fc203055e69c05008d9733e9e9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a8333ade9a03fc203055e69c05008d9733e9e9d"}], "stats": {"total": 136, "additions": 71, "deletions": 65}, "files": [{"sha": "593bd91d4f7f6dd0cdc12d4c31bf51b6c3060b02", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "patch": "@@ -36,25 +36,25 @@ class cxx_pretty_printer : public c_pretty_printer\n \n   pretty_printer *clone () const override;\n \n-  void constant (tree);\n-  void id_expression (tree);\n-  void primary_expression (tree);\n-  void postfix_expression (tree);\n-  void unary_expression (tree);\n-  void multiplicative_expression (tree);\n-  void conditional_expression (tree);\n-  void assignment_expression (tree);\n-  void expression (tree);\n-  void type_id (tree);\n-  void statement (tree);\n-  void declaration (tree);\n-  void declaration_specifiers (tree);\n-  void simple_type_specifier (tree);\n-  void function_specifier (tree);\n-  void declarator (tree);\n-  void direct_declarator (tree);\n-  void abstract_declarator (tree);\n-  void direct_abstract_declarator (tree);\n+  void constant (tree) final override;\n+  void id_expression (tree) final override;\n+  void primary_expression (tree) final override;\n+  void postfix_expression (tree) final override;\n+  void unary_expression (tree) final override;\n+  void multiplicative_expression (tree) final override;\n+  void conditional_expression (tree) final override;\n+  void assignment_expression (tree) final override;\n+  void expression (tree) final override;\n+  void type_id (tree) final override;\n+  void statement (tree) final override;\n+  void declaration (tree) final override;\n+  void declaration_specifiers (tree) final override;\n+  void simple_type_specifier (tree) final override;\n+  void function_specifier (tree) final override;\n+  void declarator (tree) final override;\n+  void direct_declarator (tree) final override;\n+  void abstract_declarator (tree) final override;\n+  void direct_abstract_declarator (tree) final override;\n \n   /* This is the enclosing scope of the entity being pretty-printed.  */\n   tree enclosing_scope;"}, {"sha": "753963a4b246515389652f2658c5a543f3f50122", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "patch": "@@ -1483,10 +1483,10 @@ class elf_out : public elf, public data::allocator {\n \n protected:\n   using allocator::grow;\n-  virtual char *grow (char *, unsigned needed);\n+  char *grow (char *, unsigned needed) final override;\n #if MAPPED_WRITING\n   using allocator::shrink;\n-  virtual void shrink (char *);\n+  void shrink (char *) final override;\n #endif\n \n public:"}, {"sha": "a0b22c50ae3fd9d941c86192e887f0b527361793", "filename": "gcc/genmatch.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fgenmatch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fgenmatch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.cc?ref=26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "patch": "@@ -723,9 +723,9 @@ class expr : public operand\n   bool force_leaf;\n   /* If non-zero, the group for optional handling.  */\n   unsigned char opt_grp;\n-  virtual void gen_transform (FILE *f, int, const char *, bool, int,\n-\t\t\t      const char *, capture_info *,\n-\t\t\t      dt_operand ** = 0, int = 0);\n+  void gen_transform (FILE *f, int, const char *, bool, int,\n+\t\t      const char *, capture_info *,\n+\t\t      dt_operand ** = 0, int = 0) override;\n };\n \n /* An operator that is represented by native C code.  This is always\n@@ -757,9 +757,9 @@ class c_expr : public operand\n   unsigned nr_stmts;\n   /* The identifier replacement vector.  */\n   vec<id_tab> ids;\n-  virtual void gen_transform (FILE *f, int, const char *, bool, int,\n-\t\t\t      const char *, capture_info *,\n-\t\t\t      dt_operand ** = 0, int = 0);\n+  void gen_transform (FILE *f, int, const char *, bool, int,\n+\t\t      const char *, capture_info *,\n+\t\t      dt_operand ** = 0, int = 0) final override;\n };\n \n /* A wrapper around another operand that captures its value.  */\n@@ -778,9 +778,9 @@ class capture : public operand\n   bool value_match;\n   /* The captured value.  */\n   operand *what;\n-  virtual void gen_transform (FILE *f, int, const char *, bool, int,\n-\t\t\t      const char *, capture_info *,\n-\t\t\t      dt_operand ** = 0, int = 0);\n+  void gen_transform (FILE *f, int, const char *, bool, int,\n+\t\t      const char *, capture_info *,\n+\t\t      dt_operand ** = 0, int = 0) final override;\n };\n \n /* if expression.  */\n@@ -1655,7 +1655,7 @@ class dt_operand : public dt_node\n       : dt_node (type, parent_), op (op_), match_dop (match_dop_),\n       pos (pos_), value_match (false), for_id (current_id) {}\n \n-  void gen (FILE *, int, bool, int);\n+  void gen (FILE *, int, bool, int) final override;\n   unsigned gen_predicate (FILE *, int, const char *, bool);\n   unsigned gen_match_op (FILE *, int, const char *, bool);\n \n@@ -1681,7 +1681,7 @@ class dt_simplify : public dt_node\n \t  indexes (indexes_), info (NULL)  {}\n \n   void gen_1 (FILE *, int, bool, operand *);\n-  void gen (FILE *f, int, bool, int);\n+  void gen (FILE *f, int, bool, int) final override;\n };\n \n template<>"}, {"sha": "8fcacf8f9d279dc900f8505f7800f6b96c86f07c", "filename": "gcc/gensupport.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fgensupport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fgensupport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.cc?ref=26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "patch": "@@ -2310,7 +2310,7 @@ class gen_reader : public rtx_reader\n {\n  public:\n   gen_reader () : rtx_reader (false) {}\n-  void handle_unknown_directive (file_location, const char *);\n+  void handle_unknown_directive (file_location, const char *) final override;\n };\n \n void"}, {"sha": "a784eba83451b0b88b2c9a6b7ba2faa5b4970aad", "filename": "gcc/gimple-range-cache.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fgimple-range-cache.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fgimple-range-cache.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.h?ref=26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "patch": "@@ -77,8 +77,8 @@ class ranger_cache : public range_query\n   ranger_cache (int not_executable_flag, bool use_imm_uses);\n   ~ranger_cache ();\n \n-  virtual bool range_of_expr (vrange &r, tree name, gimple *stmt);\n-  virtual bool range_on_edge (vrange &r, edge e, tree expr);\n+  bool range_of_expr (vrange &r, tree name, gimple *stmt) final override;\n+  bool range_on_edge (vrange &r, edge e, tree expr) final override;\n   bool block_range (vrange &r, basic_block bb, tree name, bool calc = true);\n \n   bool get_global_range (vrange &r, tree name) const;"}, {"sha": "8f498b31eefd50455591e1ff126f7dcdd36acb92", "filename": "gcc/ipa-icf-gimple.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fipa-icf-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fipa-icf-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf-gimple.h?ref=26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "patch": "@@ -282,11 +282,13 @@ class func_checker : ao_compare\n public:\n   /* Return true if two operands are equal.  The flags fields can be used\n      to specify OEP flags described above.  */\n-  virtual bool operand_equal_p (const_tree, const_tree, unsigned int flags);\n+  bool operand_equal_p (const_tree, const_tree, unsigned int flags)\n+    final override;\n \n   /* Generate a hash value for an expression.  This can be used iteratively\n      by passing a previous result as the HSTATE argument.  */\n-  virtual void hash_operand (const_tree, inchash::hash &, unsigned flags);\n+  void hash_operand (const_tree, inchash::hash &, unsigned flags)\n+    final override;\n   void hash_operand (const_tree, inchash::hash &, unsigned flags,\n \t\t     operand_access_type access);\n };"}, {"sha": "bb550923ad4091dbec626b0a9500d1aa2ccbd53b", "filename": "gcc/ipa-icf.h", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fipa-icf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fipa-icf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.h?ref=26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "patch": "@@ -317,16 +317,18 @@ class sem_function: public sem_item\n \n   ~sem_function ();\n \n-  virtual void init (ipa_icf_gimple::func_checker *);\n-  virtual bool equals_wpa (sem_item *item,\n-\t\t\t   hash_map <symtab_node *, sem_item *> &ignored_nodes);\n-  virtual hashval_t get_hash (void);\n-  virtual bool equals (sem_item *item,\n-\t\t       hash_map <symtab_node *, sem_item *> &ignored_nodes);\n-  virtual bool merge (sem_item *alias_item);\n+  void init (ipa_icf_gimple::func_checker *) final override;\n+  bool equals_wpa (sem_item *item,\n+\t\t   hash_map <symtab_node *, sem_item *> &ignored_nodes)\n+    final override;\n+  hashval_t get_hash (void) final override;\n+  bool equals (sem_item *item,\n+\t       hash_map <symtab_node *, sem_item *> &ignored_nodes)\n+    final override;\n+  bool merge (sem_item *alias_item) final override;\n \n   /* Dump symbol to FILE.  */\n-  virtual void dump_to_file (FILE *file)\n+  void dump_to_file (FILE *file) final override\n   {\n     gcc_assert (file);\n     dump_function_to_file (decl, file, TDF_DETAILS);\n@@ -426,17 +428,19 @@ class sem_variable: public sem_item\n   sem_variable (varpool_node *_node, bitmap_obstack *stack);\n \n   /* Semantic variable initialization function.  */\n-  virtual void init (ipa_icf_gimple::func_checker *);\n+  void init (ipa_icf_gimple::func_checker *) final override;\n \n-  virtual hashval_t get_hash (void);\n-  virtual bool merge (sem_item *alias_item);\n-  virtual void dump_to_file (FILE *file);\n-  virtual bool equals (sem_item *item,\n-\t\t       hash_map <symtab_node *, sem_item *> &ignored_nodes);\n+  hashval_t get_hash (void) final override;\n+  bool merge (sem_item *alias_item) final override;\n+  void dump_to_file (FILE *file) final override;\n+  bool equals (sem_item *item,\n+\t       hash_map <symtab_node *, sem_item *> &ignored_nodes)\n+    final override;\n \n   /* Fast equality variable based on knowledge known in WPA.  */\n-  virtual bool equals_wpa (sem_item *item,\n-\t\t\t   hash_map <symtab_node *, sem_item *> &ignored_nodes);\n+  bool equals_wpa (sem_item *item,\n+\t\t   hash_map <symtab_node *, sem_item *> &ignored_nodes)\n+     final override;\n \n   /* Returns varpool_node.  */\n   inline varpool_node *get_node (void)"}, {"sha": "f88486b51435c551d7859ab692f84c62f875450f", "filename": "gcc/lto/lto-dump.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Flto%2Flto-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Flto%2Flto-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-dump.cc?ref=26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "patch": "@@ -80,15 +80,15 @@ class variable_entry: public symbol_entry\n   virtual ~variable_entry ()\n   {}\n \n-  virtual size_t get_size () const\n+  size_t get_size () const final override\n   {\n     varpool_node *vnode = dyn_cast<varpool_node *> (node);\n     if (DECL_SIZE (vnode->decl) && tree_fits_shwi_p (DECL_SIZE (vnode->decl)))\n       return tree_to_shwi (DECL_SIZE (vnode->decl));\n     return 0;\n   }\n \n-  virtual void dump ()\n+  void dump () final override\n   {\n     symbol_entry :: dump ();\n     varpool_node *vnode = dyn_cast<varpool_node *> (node);\n@@ -111,13 +111,13 @@ class function_entry: public symbol_entry\n   virtual ~function_entry ()\n   {}\n \n-  virtual void dump ()\n+  void dump () final override\n   {\n     symbol_entry :: dump ();\n     printf (\"\\n\");\n   }\n \n-  virtual size_t get_size () const\n+  size_t get_size () const final override\n   {\n     cgraph_node *cnode = dyn_cast<cgraph_node *> (node);\n     gcc_assert (cnode);"}, {"sha": "7d8cd4a8336b75c5c9d9a44282aa495b28f34298", "filename": "gcc/read-md.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fread-md.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fread-md.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.h?ref=26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "patch": "@@ -330,7 +330,7 @@ class noop_reader : public md_reader\n   noop_reader () : md_reader (false) {}\n \n   /* A dummy implementation which skips unknown directives.  */\n-  void handle_unknown_directive (file_location, const char *);\n+  void handle_unknown_directive (file_location, const char *) override;\n };\n \n /* An md_reader subclass that actually handles full hierarchical"}, {"sha": "3bcff1540e7f1befc129a945c24c8633d1fe3a03", "filename": "gcc/read-rtl-function.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fread-rtl-function.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Fread-rtl-function.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl-function.cc?ref=26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "patch": "@@ -188,7 +188,7 @@ class fixup_insn_uid : public operand_fixup\n       m_insn_uid (insn_uid)\n   {}\n \n-  void apply (function_reader *reader) const;\n+  void apply (function_reader *reader) const final override;\n \n  private:\n   int m_insn_uid;\n@@ -206,7 +206,7 @@ class fixup_note_insn_basic_block : public operand_fixup\n       m_bb_idx (bb_idx)\n   {}\n \n-  void apply (function_reader *reader) const;\n+  void apply (function_reader *reader) const final override;\n \n  private:\n   int m_bb_idx;\n@@ -225,7 +225,7 @@ class fixup_expr : public fixup\n \n   ~fixup_expr () { free (m_desc); }\n \n-  void apply (function_reader *reader) const;\n+  void apply (function_reader *reader) const final override;\n \n  private:\n   char *m_desc;"}, {"sha": "c17a3e4b00433f21b9767d1479727ab297abcbe3", "filename": "gcc/tree-ssa-loop-ch.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Ftree-ssa-loop-ch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Ftree-ssa-loop-ch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.cc?ref=26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "patch": "@@ -320,7 +320,7 @@ class pass_ch : public ch_base\n \n protected:\n   /* ch_base method: */\n-  virtual bool process_loop_p (class loop *loop);\n+  bool process_loop_p (class loop *loop) final override;\n }; // class pass_ch\n \n const pass_data pass_data_ch_vect =\n@@ -358,7 +358,7 @@ class pass_ch_vect : public ch_base\n \n protected:\n   /* ch_base method: */\n-  virtual bool process_loop_p (class loop *loop);\n+  bool process_loop_p (class loop *loop) final override;\n }; // class pass_ch_vect\n \n /* For all loops, copy the condition at the end of the loop body in front"}, {"sha": "5214f142f5234da27adace7e37199c4c8e210196", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f77c4d19b827f3a2a8a9323df8e182e1389cb9/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=26f77c4d19b827f3a2a8a9323df8e182e1389cb9", "patch": "@@ -2534,9 +2534,9 @@ class rpo_elim : public eliminate_dom_walker\n     : eliminate_dom_walker (CDI_DOMINATORS, NULL), entry (entry_),\n       m_avail_freelist (NULL) {}\n \n-  virtual tree eliminate_avail (basic_block, tree op);\n+  tree eliminate_avail (basic_block, tree op) final override;\n \n-  virtual void eliminate_push_avail (basic_block, tree);\n+  void eliminate_push_avail (basic_block, tree) final override;\n \n   basic_block entry;\n   /* Freelist of avail entries which are allocated from the vn_ssa_aux"}]}