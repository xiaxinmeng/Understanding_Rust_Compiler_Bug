{"sha": "0a22eb91b3147ab189a316da35c2d264c4a1e47d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEyMmViOTFiMzE0N2FiMTg5YTMxNmRhMzVjMmQyNjRjNGExZTQ3ZA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-10-08T22:38:25Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-10-08T22:38:25Z"}, "message": "rs6000: Cleanup of various jump patterns\n\nThis cleans up formatting of many jump patterns.  Mostly it is writing\noutput statements as brace blocks, and deleting default arguments.  It\nalso makes indentation a little bit more consistent, and uses b%T0\n(instead of bctr/blr alternatives) in two more places.\n\n\n\t* config/rs6000/rs6000.md (conditional branch): Clean up formatting.\n\tRemove empty default arguments.  Use a brace block as output\n\tstatement.\n\t(conditional return): Ditto.\n\t(jump): Ditto.\n\t(indirect_jump): Ditto.  Use b%T0 instead of bctr/blr.\n\t(tablejump, tablejumpsi, tablejumpdi, *tablejump<mode>_internal1):\n\tDitto.\n\t(group_ending_nop): Ditto.\n\t(doloop_end): Ditto.\n\t(ctr<mode>, ctr<mode>_internal1, ctr<mode>_internal2): Ditto.\n\t(splitters for those): Ditto.\n\nFrom-SVN: r253532", "tree": {"sha": "e828ff9e6becafe47adecdfe6c4d0af0c86ddb1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e828ff9e6becafe47adecdfe6c4d0af0c86ddb1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a22eb91b3147ab189a316da35c2d264c4a1e47d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a22eb91b3147ab189a316da35c2d264c4a1e47d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a22eb91b3147ab189a316da35c2d264c4a1e47d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a22eb91b3147ab189a316da35c2d264c4a1e47d/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c791c59386785c32eb3cff33466ab4576ca75b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c791c59386785c32eb3cff33466ab4576ca75b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c791c59386785c32eb3cff33466ab4576ca75b5"}], "stats": {"total": 189, "additions": 100, "deletions": 89}, "files": [{"sha": "1ad32a574b91bd62b1d9a7d9b71f5b1072dc079e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a22eb91b3147ab189a316da35c2d264c4a1e47d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a22eb91b3147ab189a316da35c2d264c4a1e47d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a22eb91b3147ab189a316da35c2d264c4a1e47d", "patch": "@@ -1,3 +1,18 @@\n+2017-10-08  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (conditional branch): Clean up formatting.\n+\tRemove empty default arguments.  Use a brace block as output\n+\tstatement.\n+\t(conditional return): Ditto.\n+\t(jump): Ditto.\n+\t(indirect_jump): Ditto.  Use b%T0 instead of bctr/blr.\n+\t(tablejump, tablejumpsi, tablejumpdi, *tablejump<mode>_internal1):\n+\tDitto.\n+\t(group_ending_nop): Ditto.\n+\t(doloop_end): Ditto.\n+\t(ctr<mode>, ctr<mode>_internal1, ctr<mode>_internal2): Ditto.\n+\t(splitters for those): Ditto.\n+\n 2017-10-08  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000-string.c (expand_strncmp_align_check): Invert"}, {"sha": "97a75a2291ce2ef00ae78f06de3248411b3293f2", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 85, "deletions": 89, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a22eb91b3147ab189a316da35c2d264c4a1e47d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a22eb91b3147ab189a316da35c2d264c4a1e47d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=0a22eb91b3147ab189a316da35c2d264c4a1e47d", "patch": "@@ -12598,31 +12598,27 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"branch_comparison_operator\"\n-\t\t\t\t      [(match_operand 2\n-\t\t\t\t\t\t      \"cc_reg_operand\" \"y\")\n+\t\t\t\t      [(match_operand 2 \"cc_reg_operand\" \"y\")\n \t\t\t\t       (const_int 0)])\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0))\n \t\t      (pc)))]\n   \"\"\n-  \"*\n {\n-  return output_cbranch (operands[1], \\\"%l0\\\", 0, insn);\n-}\"\n+  return output_cbranch (operands[1], \"%l0\", 0, insn);\n+}\n   [(set_attr \"type\" \"branch\")])\n \n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"branch_comparison_operator\"\n-\t\t\t\t      [(match_operand 1\n-\t\t\t\t\t\t      \"cc_reg_operand\" \"y\")\n+\t\t\t\t      [(match_operand 1 \"cc_reg_operand\" \"y\")\n \t\t\t\t       (const_int 0)])\n \t\t      (any_return)\n \t\t      (pc)))]\n   \"<return_pred>\"\n-  \"*\n {\n   return output_cbranch (operands[0], NULL, 0, insn);\n-}\"\n+}\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"4\")])\n \n@@ -12743,7 +12739,7 @@\n \n (define_insn \"jump\"\n   [(set (pc)\n-\t(label_ref (match_operand 0 \"\" \"\")))]\n+\t(label_ref (match_operand 0)))]\n   \"\"\n   \"b %l0\"\n   [(set_attr \"type\" \"branch\")])\n@@ -12755,66 +12751,64 @@\n   [(set_attr \"type\" \"jmpreg\")])\n \n (define_expand \"indirect_jump\"\n-  [(set (pc) (match_operand 0 \"register_operand\" \"\"))])\n+  [(set (pc) (match_operand 0 \"register_operand\"))])\n \n (define_insn \"*indirect_jump<mode>\"\n-  [(set (pc) (match_operand:P 0 \"register_operand\" \"c,*l\"))]\n+  [(set (pc)\n+\t(match_operand:P 0 \"register_operand\" \"c,*l\"))]\n   \"\"\n-  \"@\n-   bctr\n-   blr\"\n+  \"b%T0\"\n   [(set_attr \"type\" \"jmpreg\")])\n \n ;; Table jump for switch statements:\n (define_expand \"tablejump\"\n-  [(use (match_operand 0 \"\" \"\"))\n-   (use (label_ref (match_operand 1 \"\" \"\")))]\n+  [(use (match_operand 0))\n+   (use (label_ref (match_operand 1)))]\n   \"\"\n-  \"\n {\n   if (TARGET_32BIT)\n     emit_jump_insn (gen_tablejumpsi (operands[0], operands[1]));\n   else\n     emit_jump_insn (gen_tablejumpdi (operands[0], operands[1]));\n   DONE;\n-}\")\n+})\n \n (define_expand \"tablejumpsi\"\n   [(set (match_dup 3)\n-\t(plus:SI (match_operand:SI 0 \"\" \"\")\n+\t(plus:SI (match_operand:SI 0)\n \t\t (match_dup 2)))\n-   (parallel [(set (pc) (match_dup 3))\n-\t      (use (label_ref (match_operand 1 \"\" \"\")))])]\n+   (parallel [(set (pc)\n+\t\t   (match_dup 3))\n+\t      (use (label_ref (match_operand 1)))])]\n   \"TARGET_32BIT\"\n-  \"\n-{ operands[0] = force_reg (SImode, operands[0]);\n+{\n+  operands[0] = force_reg (SImode, operands[0]);\n   operands[2] = force_reg (SImode, gen_rtx_LABEL_REF (SImode, operands[1]));\n   operands[3] = gen_reg_rtx (SImode);\n-}\")\n+})\n \n (define_expand \"tablejumpdi\"\n   [(set (match_dup 4)\n-        (sign_extend:DI (match_operand:SI 0 \"lwa_operand\" \"\")))\n+        (sign_extend:DI (match_operand:SI 0 \"lwa_operand\")))\n    (set (match_dup 3)\n \t(plus:DI (match_dup 4)\n \t\t (match_dup 2)))\n-   (parallel [(set (pc) (match_dup 3))\n-\t      (use (label_ref (match_operand 1 \"\" \"\")))])]\n+   (parallel [(set (pc)\n+\t\t   (match_dup 3))\n+\t      (use (label_ref (match_operand 1)))])]\n   \"TARGET_64BIT\"\n-  \"\n-{ operands[2] = force_reg (DImode, gen_rtx_LABEL_REF (DImode, operands[1]));\n+{\n+  operands[2] = force_reg (DImode, gen_rtx_LABEL_REF (DImode, operands[1]));\n   operands[3] = gen_reg_rtx (DImode);\n   operands[4] = gen_reg_rtx (DImode);\n-}\")\n+})\n \n (define_insn \"*tablejump<mode>_internal1\"\n   [(set (pc)\n \t(match_operand:P 0 \"register_operand\" \"c,*l\"))\n-   (use (label_ref (match_operand 1 \"\" \"\")))]\n+   (use (label_ref (match_operand 1)))]\n   \"\"\n-  \"@\n-   bctr\n-   blr\"\n+  \"b%T0\"\n   [(set_attr \"type\" \"jmpreg\")])\n \n (define_insn \"nop\"\n@@ -12825,21 +12819,19 @@\n (define_insn \"group_ending_nop\"\n   [(unspec [(const_int 0)] UNSPEC_GRP_END_NOP)]\n   \"\"\n-  \"*\n {\n   if (rs6000_cpu_attr == CPU_POWER6)\n-    return \\\"ori 1,1,0\\\";\n-  return \\\"ori 2,2,0\\\";\n-}\")\n+    return \"ori 1,1,0\";\n+  return \"ori 2,2,0\";\n+})\n \f\n ;; Define the subtract-one-and-jump insns, starting with the template\n ;; so loop.c knows what to generate.\n \n (define_expand \"doloop_end\"\n-  [(use (match_operand 0 \"\" \"\"))\t; loop pseudo\n-   (use (match_operand 1 \"\" \"\"))]\t; label\n+  [(use (match_operand 0))\t; loop pseudo\n+   (use (match_operand 1))]\t; label\n   \"\"\n-  \"\n {\n   if (TARGET_64BIT)\n     {\n@@ -12854,19 +12846,19 @@\n       emit_jump_insn (gen_ctrsi (operands[0], operands[1]));\n     }\n   DONE;\n-}\")\n+})\n \n (define_expand \"ctr<mode>\"\n   [(parallel [(set (pc)\n-\t\t   (if_then_else (ne (match_operand:P 0 \"register_operand\" \"\")\n+\t\t   (if_then_else (ne (match_operand:P 0 \"register_operand\")\n \t\t\t\t     (const_int 1))\n-\t\t\t\t (label_ref (match_operand 1 \"\" \"\"))\n+\t\t\t\t (label_ref (match_operand 1))\n \t\t\t\t (pc)))\n \t      (set (match_dup 0)\n \t\t   (plus:P (match_dup 0)\n \t\t\t    (const_int -1)))\n-\t      (clobber (match_scratch:CC 2 \"\"))\n-\t      (clobber (match_scratch:P 3 \"\"))])]\n+\t      (clobber (match_scratch:CC 2))\n+\t      (clobber (match_scratch:P 3))])]\n   \"\"\n   \"\")\n \n@@ -12882,23 +12874,22 @@\n   [(set (pc)\n \t(if_then_else (ne (match_operand:P 1 \"register_operand\" \"c,*b,*b,*b\")\n \t\t\t  (const_int 1))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0))\n \t\t      (pc)))\n    (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n \t(plus:P (match_dup 1)\n-\t\t (const_int -1)))\n+\t\t(const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:P 4 \"=X,X,&r,r\"))]\n   \"\"\n-  \"*\n {\n   if (which_alternative != 0)\n-    return \\\"#\\\";\n+    return \"#\";\n   else if (get_attr_length (insn) == 4)\n-    return \\\"bdnz %l0\\\";\n+    return \"bdnz %l0\";\n   else\n-    return \\\"bdz $+8\\;b %l0\\\";\n-}\"\n+    return \"bdz $+8\\;b %l0\";\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,16,20,20\")])\n \n@@ -12908,23 +12899,22 @@\n   [(set (pc)\n \t(if_then_else (eq (match_operand:P 1 \"register_operand\" \"c,*b,*b,*b\")\n \t\t\t  (const_int 1))\n-\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (label_ref (match_operand 0))\n \t\t      (pc)))\n    (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*wi*c*l\")\n \t(plus:P (match_dup 1)\n-\t\t (const_int -1)))\n+\t\t(const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:P 4 \"=X,X,&r,r\"))]\n   \"\"\n-  \"*\n {\n   if (which_alternative != 0)\n-    return \\\"#\\\";\n+    return \"#\";\n   else if (get_attr_length (insn) == 4)\n-    return \\\"bdz %l0\\\";\n+    return \"bdz %l0\";\n   else\n-    return \\\"bdnz $+8\\;b %l0\\\";\n-}\"\n+    return \"bdnz $+8\\;b %l0\";\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,16,20,20\")])\n \n@@ -12933,40 +12923,44 @@\n (define_split\n   [(set (pc)\n \t(if_then_else (match_operator 2 \"comparison_operator\"\n-\t\t\t\t      [(match_operand:P 1 \"gpc_reg_operand\" \"\")\n+\t\t\t\t      [(match_operand:P 1 \"gpc_reg_operand\")\n \t\t\t\t       (const_int 1)])\n-\t\t      (match_operand 5 \"\" \"\")\n-\t\t      (match_operand 6 \"\" \"\")))\n-   (set (match_operand:P 0 \"int_reg_operand\" \"\")\n-\t(plus:P (match_dup 1) (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"\"))\n-   (clobber (match_scratch:P 4 \"\"))]\n+\t\t      (match_operand 5)\n+\t\t      (match_operand 6)))\n+   (set (match_operand:P 0 \"int_reg_operand\")\n+\t(plus:P (match_dup 1)\n+\t\t(const_int -1)))\n+   (clobber (match_scratch:CC 3))\n+   (clobber (match_scratch:P 4))]\n   \"reload_completed\"\n   [(set (match_dup 3)\n \t(compare:CC (match_dup 1)\n \t\t    (const_int 1)))\n    (set (match_dup 0)\n \t(plus:P (match_dup 1)\n \t\t(const_int -1)))\n-   (set (pc) (if_then_else (match_dup 7)\n-\t\t\t   (match_dup 5)\n-\t\t\t   (match_dup 6)))]\n-  \"\n-{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode,\n-\t\t\t\toperands[3], const0_rtx); }\")\n+   (set (pc)\n+\t(if_then_else (match_dup 7)\n+\t\t      (match_dup 5)\n+\t\t      (match_dup 6)))]\n+{\n+  operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode, operands[3],\n+\t\t\t\tconst0_rtx);\n+})\n \n (define_split\n   [(set (pc)\n \t(if_then_else (match_operator 2 \"comparison_operator\"\n-\t\t\t\t      [(match_operand:P 1 \"gpc_reg_operand\" \"\")\n+\t\t\t\t      [(match_operand:P 1 \"gpc_reg_operand\")\n \t\t\t\t       (const_int 1)])\n-\t\t      (match_operand 5 \"\" \"\")\n-\t\t      (match_operand 6 \"\" \"\")))\n-   (set (match_operand:P 0 \"nonimmediate_operand\" \"\")\n-\t(plus:P (match_dup 1) (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"\"))\n-   (clobber (match_scratch:P 4 \"\"))]\n-  \"reload_completed && ! gpc_reg_operand (operands[0], SImode)\"\n+\t\t      (match_operand 5)\n+\t\t      (match_operand 6)))\n+   (set (match_operand:P 0 \"nonimmediate_operand\")\n+\t(plus:P (match_dup 1)\n+\t\t(const_int -1)))\n+   (clobber (match_scratch:CC 3))\n+   (clobber (match_scratch:P 4))]\n+  \"reload_completed && !gpc_reg_operand (operands[0], SImode)\"\n   [(set (match_dup 3)\n \t(compare:CC (match_dup 1)\n \t\t    (const_int 1)))\n@@ -12975,12 +12969,14 @@\n \t\t(const_int -1)))\n    (set (match_dup 0)\n \t(match_dup 4))\n-   (set (pc) (if_then_else (match_dup 7)\n-\t\t\t   (match_dup 5)\n-\t\t\t   (match_dup 6)))]\n-  \"\n-{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode,\n-\t\t\t\toperands[3], const0_rtx); }\")\n+   (set (pc)\n+\t(if_then_else (match_dup 7)\n+\t\t      (match_dup 5)\n+\t\t      (match_dup 6)))]\n+{\n+  operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode, operands[3],\n+\t\t\t\tconst0_rtx);\n+})\n \f\n (define_insn \"trap\"\n   [(trap_if (const_int 1) (const_int 0))]"}]}