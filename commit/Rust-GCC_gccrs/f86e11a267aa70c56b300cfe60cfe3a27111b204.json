{"sha": "f86e11a267aa70c56b300cfe60cfe3a27111b204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg2ZTExYTI2N2FhNzBjNTZiMzAwY2ZlNjBjZmUzYTI3MTExYjIwNA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-22T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-22T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "cf5282a7a46c9f7b758d759c73c35798f1ae5f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf5282a7a46c9f7b758d759c73c35798f1ae5f67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f86e11a267aa70c56b300cfe60cfe3a27111b204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f86e11a267aa70c56b300cfe60cfe3a27111b204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f86e11a267aa70c56b300cfe60cfe3a27111b204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f86e11a267aa70c56b300cfe60cfe3a27111b204/comments", "author": null, "committer": null, "parents": [{"sha": "47ddb895df311e546a6f54345e18b8749ac50324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ddb895df311e546a6f54345e18b8749ac50324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ddb895df311e546a6f54345e18b8749ac50324"}], "stats": {"total": 244, "additions": 243, "deletions": 1}, "files": [{"sha": "da1102b9483f70bd03a42b87a63e9c592163a092", "filename": "gcc/ChangeLog", "status": "modified", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86e11a267aa70c56b300cfe60cfe3a27111b204/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86e11a267aa70c56b300cfe60cfe3a27111b204/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f86e11a267aa70c56b300cfe60cfe3a27111b204", "patch": "@@ -1,3 +1,192 @@\n+2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config.gcc: Use t-aix64, biarch64 and default64 for cpu_is_64bit.\n+\t* config/rs6000/aix72.h (ASM_SPEC): Remove aix64 option.\n+\t(ASM_SPEC32): New.\n+\t(ASM_SPEC64): New.\n+\t(ASM_CPU_SPEC): Remove vsx and altivec options.\n+\t(CPP_SPEC_COMMON): Rename from CPP_SPEC.\n+\t(CPP_SPEC32): New.\n+\t(CPP_SPEC64): New.\n+\t(CPLUSPLUS_CPP_SPEC): Rename to CPLUSPLUS_CPP_SPEC_COMMON..\n+\t(TARGET_DEFAULT): Only define if not BIARCH.\n+\t(LIB_SPEC_COMMON): Rename from LIB_SPEC.\n+\t(LIB_SPEC32): New.\n+\t(LIB_SPEC64): New.\n+\t(LINK_SPEC_COMMON): Rename from LINK_SPEC.\n+\t(LINK_SPEC32): New.\n+\t(LINK_SPEC64): New.\n+\t(STARTFILE_SPEC): Add 64 bit version of crtcxa and crtdbase.\n+\t(ASM_SPEC): Define 32 and 64 bit alternatives using DEFAULT_ARCH64_P.\n+\t(CPP_SPEC): Same.\n+\t(CPLUSPLUS_CPP_SPEC): Same.\n+\t(LIB_SPEC): Same.\n+\t(LINK_SPEC): Same.\n+\t(SUBTARGET_EXTRA_SPECS): Add new 32/64 specs.\n+\t* config/rs6000/defaultaix64.h: New file.\n+\t* config/rs6000/t-aix64: New file.\n+\n+2020-06-21  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* config/rs6000/predicates.md (mma_assemble_input_operand): New.\n+\t* config/rs6000/rs6000-builtin.def (BU_MMA_1, BU_MMA_V2, BU_MMA_3,\n+\tBU_MMA_5, BU_MMA_6, BU_VSX_1): Add support macros for defining MMA\n+\tbuilt-in functions.\n+\t(ASSEMBLE_ACC, ASSEMBLE_PAIR, DISASSEMBLE_ACC, DISASSEMBLE_PAIR,\n+\tPMXVBF16GER2, PMXVBF16GER2NN, PMXVBF16GER2NP, PMXVBF16GER2PN,\n+\tPMXVBF16GER2PP, PMXVF16GER2, PMXVF16GER2NN, PMXVF16GER2NP,\n+\tPMXVF16GER2PN, PMXVF16GER2PP, PMXVF32GER, PMXVF32GERNN,\n+\tPMXVF32GERNP, PMXVF32GERPN, PMXVF32GERPP, PMXVF64GER, PMXVF64GERNN,\n+\tPMXVF64GERNP, PMXVF64GERPN, PMXVF64GERPP, PMXVI16GER2, PMXVI16GER2PP,\n+\tPMXVI16GER2S, PMXVI16GER2SPP, PMXVI4GER8, PMXVI4GER8PP, PMXVI8GER4,\n+\tPMXVI8GER4PP, PMXVI8GER4SPP, XVBF16GER2, XVBF16GER2NN, XVBF16GER2NP,\n+\tXVBF16GER2PN, XVBF16GER2PP, XVCVBF16SP, XVCVSPBF16, XVF16GER2,\n+\tXVF16GER2NN, XVF16GER2NP, XVF16GER2PN, XVF16GER2PP, XVF32GER,\n+\tXVF32GERNN, XVF32GERNP, XVF32GERPN, XVF32GERPP, XVF64GER, XVF64GERNN,\n+\tXVF64GERNP, XVF64GERPN, XVF64GERPP, XVI16GER2, XVI16GER2PP, XVI16GER2S,\n+\tXVI16GER2SPP, XVI4GER8, XVI4GER8PP, XVI8GER4, XVI8GER4PP, XVI8GER4SPP,\n+\tXXMFACC, XXMTACC, XXSETACCZ): Add MMA built-ins.\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Use CONST_INT_P.\n+\tAllow zero constants.\n+\t(print_operand) <case 'A'>: New output modifier.\n+\t(rs6000_split_multireg_move): Add support for inserting accumulator\n+\tpriming and depriming instructions.  Add support for splitting an\n+\tassemble accumulator pattern.\n+\t* config/rs6000/rs6000-call.c (mma_init_builtins, mma_expand_builtin,\n+\trs6000_gimple_fold_mma_builtin): New functions.\n+\t(RS6000_BUILTIN_M): New macro.\n+\t(def_builtin): Handle RS6000_BTC_QUAD and RS6000_BTC_PAIR attributes.\n+\t(bdesc_mma): Add new MMA built-in support.\n+\t(htm_expand_builtin): Use RS6000_BTC_OPND_MASK.\n+\t(rs6000_invalid_builtin): Add handling of RS6000_BTM_FUTURE and\n+\tRS6000_BTM_MMA.\n+\t(rs6000_builtin_valid_without_lhs): Handle RS6000_BTC_VOID attribute.\n+\t(rs6000_gimple_fold_builtin): Call rs6000_builtin_is_supported_p\n+\tand rs6000_gimple_fold_mma_builtin.\n+\t(rs6000_expand_builtin): Call mma_expand_builtin.\n+\tUse RS6000_BTC_OPND_MASK.\n+\t(rs6000_init_builtins): Adjust comment.  Call mma_init_builtins.\n+\t(htm_init_builtins): Use RS6000_BTC_OPND_MASK.\n+\t(builtin_function_type): Handle VSX_BUILTIN_XVCVSPBF16 and\n+\tVSX_BUILTIN_XVCVBF16SP.\n+\t* config/rs6000/rs6000.h (RS6000_BTC_QUINARY, RS6000_BTC_SENARY,\n+\tRS6000_BTC_OPND_MASK, RS6000_BTC_QUAD, RS6000_BTC_PAIR,\n+\tRS6000_BTC_QUADPAIR, RS6000_BTC_GIMPLE): New defines.\n+\t(RS6000_BTC_PREDICATE, RS6000_BTC_ABS, RS6000_BTC_DST,\n+\tRS6000_BTC_TYPE_MASK, RS6000_BTC_ATTR_MASK): Adjust values.\n+\t* config/rs6000/mma.md (MAX_MMA_OPERANDS): New define_constant.\n+\t(UNSPEC_MMA_ASSEMBLE_ACC, UNSPEC_MMA_PMXVBF16GER2,\n+\tUNSPEC_MMA_PMXVBF16GER2NN, UNSPEC_MMA_PMXVBF16GER2NP,\n+\tUNSPEC_MMA_PMXVBF16GER2PN, UNSPEC_MMA_PMXVBF16GER2PP,\n+\tUNSPEC_MMA_PMXVF16GER2, UNSPEC_MMA_PMXVF16GER2NN,\n+\tUNSPEC_MMA_PMXVF16GER2NP, UNSPEC_MMA_PMXVF16GER2PN,\n+\tUNSPEC_MMA_PMXVF16GER2PP, UNSPEC_MMA_PMXVF32GER,\n+\tUNSPEC_MMA_PMXVF32GERNN, UNSPEC_MMA_PMXVF32GERNP,\n+\tUNSPEC_MMA_PMXVF32GERPN, UNSPEC_MMA_PMXVF32GERPP,\n+\tUNSPEC_MMA_PMXVF64GER, UNSPEC_MMA_PMXVF64GERNN,\n+\tUNSPEC_MMA_PMXVF64GERNP, UNSPEC_MMA_PMXVF64GERPN,\n+\tUNSPEC_MMA_PMXVF64GERPP, UNSPEC_MMA_PMXVI16GER2,\n+\tUNSPEC_MMA_PMXVI16GER2PP, UNSPEC_MMA_PMXVI16GER2S,\n+\tUNSPEC_MMA_PMXVI16GER2SPP, UNSPEC_MMA_PMXVI4GER8,\n+\tUNSPEC_MMA_PMXVI4GER8PP, UNSPEC_MMA_PMXVI8GER4,\n+\tUNSPEC_MMA_PMXVI8GER4PP, UNSPEC_MMA_PMXVI8GER4SPP,\n+\tUNSPEC_MMA_XVBF16GER2, UNSPEC_MMA_XVBF16GER2NN,\n+\tUNSPEC_MMA_XVBF16GER2NP, UNSPEC_MMA_XVBF16GER2PN,\n+\tUNSPEC_MMA_XVBF16GER2PP, UNSPEC_MMA_XVF16GER2, UNSPEC_MMA_XVF16GER2NN,\n+\tUNSPEC_MMA_XVF16GER2NP, UNSPEC_MMA_XVF16GER2PN, UNSPEC_MMA_XVF16GER2PP,\n+\tUNSPEC_MMA_XVF32GER, UNSPEC_MMA_XVF32GERNN, UNSPEC_MMA_XVF32GERNP,\n+\tUNSPEC_MMA_XVF32GERPN, UNSPEC_MMA_XVF32GERPP, UNSPEC_MMA_XVF64GER,\n+\tUNSPEC_MMA_XVF64GERNN, UNSPEC_MMA_XVF64GERNP, UNSPEC_MMA_XVF64GERPN,\n+\tUNSPEC_MMA_XVF64GERPP, UNSPEC_MMA_XVI16GER2, UNSPEC_MMA_XVI16GER2PP,\n+\tUNSPEC_MMA_XVI16GER2S, UNSPEC_MMA_XVI16GER2SPP, UNSPEC_MMA_XVI4GER8,\n+\tUNSPEC_MMA_XVI4GER8PP, UNSPEC_MMA_XVI8GER4, UNSPEC_MMA_XVI8GER4PP,\n+\tUNSPEC_MMA_XVI8GER4SPP, UNSPEC_MMA_XXMFACC, UNSPEC_MMA_XXMTACC): New.\n+\t(MMA_ACC, MMA_VV, MMA_AVV, MMA_PV, MMA_APV, MMA_VVI4I4I8,\n+\tMMA_AVVI4I4I8, MMA_VVI4I4I2, MMA_AVVI4I4I2, MMA_VVI4I4,\n+\tMMA_AVVI4I4, MMA_PVI4I2, MMA_APVI4I2, MMA_VVI4I4I4,\n+\tMMA_AVVI4I4I4): New define_int_iterator.\n+\t(acc, vv, avv, pv, apv, vvi4i4i8, avvi4i4i8, vvi4i4i2,\n+\tavvi4i4i2, vvi4i4, avvi4i4, pvi4i2, apvi4i2, vvi4i4i4,\n+\tavvi4i4i4): New define_int_attr.\n+\t(*movpxi): Add zero constant alternative.\n+\t(mma_assemble_pair, mma_assemble_acc): New define_expand.\n+\t(*mma_assemble_acc): New define_insn_and_split.\n+\t(mma_<acc>, mma_xxsetaccz, mma_<vv>, mma_<avv>, mma_<pv>, mma_<apv>,\n+\tmma_<vvi4i4i8>, mma_<avvi4i4i8>, mma_<vvi4i4i2>, mma_<avvi4i4i2>,\n+\tmma_<vvi4i4>, mma_<avvi4i4>, mma_<pvi4i2>, mma_<apvi4i2>,\n+\tmma_<vvi4i4i4>, mma_<avvi4i4i4>): New define_insn.\n+\t* config/rs6000/rs6000.md (define_attr \"type\"): New type mma.\n+\t* config/rs6000/vsx.md (UNSPEC_VSX_XVCVBF16SP): New.\n+\t(UNSPEC_VSX_XVCVSPBF16): Likewise.\n+\t(XVCVBF16): New define_int_iterator.\n+\t(xvcvbf16): New define_int_attr.\n+\t(vsx_<xvcvbf16>): New define_insn.\n+\t* doc/extend.texi: Document the mma built-ins.\n+\n+2020-06-21  Peter Bergner  <bergner@linux.ibm.com>\n+\t    Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/mma.md: New file.\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Define\n+\t__MMA__ for mma.\n+\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Add support\n+\tfor __vector_pair and __vector_quad types.\n+\t* config/rs6000/rs6000-cpus.def (OTHER_FUTURE_MASKS): Add\n+\tOPTION_MASK_MMA.\n+\t(POWERPC_MASKS): Likewise.\n+\t* config/rs6000/rs6000-modes.def (OI, XI): New integer modes.\n+\t(POI, PXI): New partial integer modes.\n+\t* config/rs6000/rs6000.c (TARGET_INVALID_CONVERSION): Define.\n+\t(rs6000_hard_regno_nregs_internal): Use VECTOR_ALIGNMENT_P.\n+\t(rs6000_hard_regno_mode_ok_uncached): Likewise.\n+\tAdd support for POImode being allowed in VSX registers and PXImode\n+\tbeing allowed in FP registers.\n+\t(rs6000_modes_tieable_p): Adjust comment.\n+\tAdd support for POImode and PXImode.\n+\t(rs6000_debug_reg_global) <print_tieable_modes>: Add OImode, POImode\n+\tXImode, PXImode, V2SImode, V2SFmode and CCFPmode..\n+\t(rs6000_setup_reg_addr_masks): Use VECTOR_ALIGNMENT_P.\n+\tSet up appropriate addr_masks for vector pair and vector quad addresses.\n+\t(rs6000_init_hard_regno_mode_ok): Add support for vector pair and\n+\tvector quad registers.  Setup reload handlers for POImode and PXImode.\n+\t(rs6000_builtin_mask_calculate): Add support for RS6000_BTM_MMA.\n+\t(rs6000_option_override_internal): Error if -mmma is specified\n+\twithout -mcpu=future.\n+\t(rs6000_slow_unaligned_access): Use VECTOR_ALIGNMENT_P.\n+\t(quad_address_p): Change size test to less than 16 bytes.\n+\t(reg_offset_addressing_ok_p): Add support for ISA 3.1 vector pair\n+\tand vector quad instructions.\n+\t(avoiding_indexed_address_p): Likewise.\n+\t(rs6000_emit_move): Disallow POImode and PXImode moves involving\n+\tconstants.\n+\t(rs6000_preferred_reload_class): Prefer VSX registers for POImode\n+\tand FP registers for PXImode.\n+\t(rs6000_split_multireg_move): Support splitting POImode and PXImode\n+\tmove instructions.\n+\t(rs6000_mangle_type): Adjust comment.  Add support for mangling\n+\t__vector_pair and __vector_quad types.\n+\t(rs6000_opt_masks): Add entry for mma.\n+\t(rs6000_builtin_mask_names): Add RS6000_BTM_MMA and RS6000_BTM_FUTURE.\n+\t(rs6000_function_value): Use VECTOR_ALIGNMENT_P.\n+\t(address_to_insn_form): Likewise.\n+\t(reg_to_non_prefixed): Likewise.\n+\t(rs6000_invalid_conversion): New function.\n+\t* config/rs6000/rs6000.h (MASK_MMA): Define.\n+\t(BIGGEST_ALIGNMENT): Set to 512 if MMA support is enabled.\n+\t(VECTOR_ALIGNMENT_P): New helper macro.\n+\t(ALTIVEC_VECTOR_MODE): Use VECTOR_ALIGNMENT_P.\n+\t(RS6000_BTM_MMA): Define.\n+\t(RS6000_BTM_COMMON): Add RS6000_BTM_MMA and RS6000_BTM_FUTURE.\n+\t(rs6000_builtin_type_index): Add RS6000_BTI_vector_pair and\n+\tRS6000_BTI_vector_quad.\n+\t(vector_pair_type_node): New.\n+\t(vector_quad_type_node): New.\n+\t* config/rs6000/rs6000.md: Include mma.md.\n+\t(define_mode_iterator RELOAD): Add POI and PXI.\n+\t* config/rs6000/t-rs6000 (MD_INCLUDES): Add mma.md.\n+\t* config/rs6000/rs6000.opt (-mmma): New.\n+\t* doc/invoke.texi: Document -mmma.\n+\n 2020-06-20  Bin Cheng  <bin.cheng@linux.alibaba.com>\n \n \tPR tree-optimization/95638"}, {"sha": "5316c6c6e8542327f5016610ac30564eb50053da", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86e11a267aa70c56b300cfe60cfe3a27111b204/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86e11a267aa70c56b300cfe60cfe3a27111b204/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f86e11a267aa70c56b300cfe60cfe3a27111b204", "patch": "@@ -1 +1 @@\n-20200621\n+20200622"}, {"sha": "d3ddb34ce80697a183b357ddabf6623a757e65ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86e11a267aa70c56b300cfe60cfe3a27111b204/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86e11a267aa70c56b300cfe60cfe3a27111b204/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f86e11a267aa70c56b300cfe60cfe3a27111b204", "patch": "@@ -1,3 +1,12 @@\n+2020-06-21  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/mma-builtin-1.c: New file.\n+\t* gcc.target/powerpc/mma-builtin-2.c: New file.\n+\t* gcc.target/powerpc/mma-builtin-3.c: New file.\n+\t* gcc.target/powerpc/mma-builtin-4.c: New file.\n+\t* gcc.target/powerpc/mma-builtin-5.c: New file.\n+\t* gcc.target/powerpc/mma-builtin-6.c: New file.\n+\n 2020-06-20  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/95505"}, {"sha": "bed9ef143d0bf294e40495ea73a3ef79bfad5950", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86e11a267aa70c56b300cfe60cfe3a27111b204/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86e11a267aa70c56b300cfe60cfe3a27111b204/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=f86e11a267aa70c56b300cfe60cfe3a27111b204", "patch": "@@ -1,3 +1,12 @@\n+2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* Makefile.am (tmake_file): Build and install AIX-style FAT libraries.\n+\t* Makefile.in: Regenerate.\n+\t* configure.ac (tmake_file): Substitute.\n+\t* configure: Regenerate.\n+\t* configure.tgt (powerpc-ibm-aix*): Define tmake_file.\n+\t* config/t-aix: New file.\n+\n 2020-06-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/x86/fenv.c (struct fenv): Add __attribute__ ((gcc_struct))."}, {"sha": "8d36724bd44f8cfa19d369e031023296fa2c8e4b", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86e11a267aa70c56b300cfe60cfe3a27111b204/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86e11a267aa70c56b300cfe60cfe3a27111b204/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=f86e11a267aa70c56b300cfe60cfe3a27111b204", "patch": "@@ -1,3 +1,11 @@\n+2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config.host (extra_parts): Add crtcxa_64 and crtdbase_64.\n+\t* config/rs6000/t-aix-cxa: Explicitly compile 32 bit with -maix32\n+\tand 64 bit with -maix64.\n+\t* config/rs6000/t-slibgcc-aix: Remove extra @multilib_dir@ level.\n+\tBuild and install AIX-style FAT libraries.\n+\n 2020-06-17  Samuel Thibault  <samuel.thibault@gnu.org>\n \n \t* config.host (md_unwind_header) <i[34567]86-*-gnu*>: Set to"}, {"sha": "21a451d35c4b2150235933ba9d0f09b1cb1f344c", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86e11a267aa70c56b300cfe60cfe3a27111b204/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86e11a267aa70c56b300cfe60cfe3a27111b204/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=f86e11a267aa70c56b300cfe60cfe3a27111b204", "patch": "@@ -1,3 +1,12 @@\n+2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* Makefile.am (tmake_file): Build and install AIX-style FAT libraries.\n+\t* Makefile.in: Regenerate.\n+\t* configure.ac (tmake_file): Substitute.\n+\t* configure: Regenerate.\n+\t* configure.host: Add system configury stanza. Define tmake_file.\n+\t* config/t-aix: New file.\n+\n 2020-06-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/95313"}, {"sha": "885921c6985602a1209c00e7fbf187340c387243", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86e11a267aa70c56b300cfe60cfe3a27111b204/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86e11a267aa70c56b300cfe60cfe3a27111b204/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=f86e11a267aa70c56b300cfe60cfe3a27111b204", "patch": "@@ -1,3 +1,12 @@\n+2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* Makefile.am (tmake_file): Build and install AIX-style FAT libraries.\n+\t* Makefile.in: Regenerate\n+\t* configure.ac (tmake_file): Substitute.\n+\t* configure: Regenerate.\n+\t* configure.tgt (powerpc-ibm-aix*): Define tmake_file.\n+\t* config/t-aix: New file.\n+\n 2020-06-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR lto/94848"}, {"sha": "5c20e9e2a1a993eaaeee68698d00a50f34634b17", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f86e11a267aa70c56b300cfe60cfe3a27111b204/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f86e11a267aa70c56b300cfe60cfe3a27111b204/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f86e11a267aa70c56b300cfe60cfe3a27111b204", "patch": "@@ -1,3 +1,12 @@\n+2020-06-21  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* Makefile.am (tmake_file): Build and install AIX-style FAT libraries.\n+\t* Makefile.in: Regenerate.\n+\t* configure.ac (tmake_file): Substitute.\n+\t* configure: Regenerate.\n+\t* configure.host (aix*): Define tmake_file.\n+\t* config/os/aix/t-aix: New file.\n+\n 2020-06-20  Jason Merrill  <jason@redhat.com>\n \n \t* testsuite/24_iterators/move_iterator/rel_ops_c++20.cc:"}]}