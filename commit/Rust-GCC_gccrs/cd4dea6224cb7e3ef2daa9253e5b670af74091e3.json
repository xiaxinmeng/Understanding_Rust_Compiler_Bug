{"sha": "cd4dea6224cb7e3ef2daa9253e5b670af74091e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q0ZGVhNjIyNGNiN2UzZWYyZGFhOTI1M2U1YjY3MGFmNzQwOTFlMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-09-09T20:27:52Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-09-09T20:27:52Z"}, "message": "cgraphunit.c (cgraph_finalize_function): Fix handling of extern inline functions.\n\n\n\t* cgraphunit.c (cgraph_finalize_function): Fix handling of extern\n\tinline functions.\n\t(cgraph_finalize_compilation_unit): Fix crash when dealing with lost\n\tDECL_SAVED_TREE.\n\nFrom-SVN: r71245", "tree": {"sha": "2240007b0242ee14c6f75de7f63f07ad346bc5a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2240007b0242ee14c6f75de7f63f07ad346bc5a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd4dea6224cb7e3ef2daa9253e5b670af74091e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd4dea6224cb7e3ef2daa9253e5b670af74091e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd4dea6224cb7e3ef2daa9253e5b670af74091e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd4dea6224cb7e3ef2daa9253e5b670af74091e3/comments", "author": null, "committer": null, "parents": [{"sha": "892955bff08d660ba36d42e32f3b7a0c7d3acd61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892955bff08d660ba36d42e32f3b7a0c7d3acd61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892955bff08d660ba36d42e32f3b7a0c7d3acd61"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "49a3826553ecbf55e0553fe6d0ffe41be052f77b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4dea6224cb7e3ef2daa9253e5b670af74091e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4dea6224cb7e3ef2daa9253e5b670af74091e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd4dea6224cb7e3ef2daa9253e5b670af74091e3", "patch": "@@ -1,3 +1,10 @@\n+Tue Sep  9 22:18:48 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraphunit.c (cgraph_finalize_function): Fix handling of extern\n+\tinline functions.\n+\t(cgraph_finalize_compilation_unit): Fix crash when dealing with lost\n+\tDECL_SAVED_TREE.\n+\n 2003-09-09  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (fold_builtin_cabs): Protect the complex argument"}, {"sha": "10bf8377ede3a129d253aa586a49dea65642ccee", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4dea6224cb7e3ef2daa9253e5b670af74091e3/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4dea6224cb7e3ef2daa9253e5b670af74091e3/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=cd4dea6224cb7e3ef2daa9253e5b670af74091e3", "patch": "@@ -160,26 +160,28 @@ cgraph_finalize_function (tree decl, tree body ATTRIBUTE_UNUSED)\n \t \n \t ??? It may make more sense to use one body for inlining and other body\n \t for expanding the function but this is dificult to do.  */\n-      if (!node->needed)\n+      /* Reset our datastructures so we can analyze the function body\n+\t again.  */\n+      memset (&node->local, 0, sizeof (node->local));\n+      memset (&node->global, 0, sizeof (node->global));\n+      memset (&node->rtl, 0, sizeof (node->rtl));\n+      node->lowered = false;\n+      if (node->output)\n+\tabort ();\n+      while (node->callees)\n+\tcgraph_remove_call (node->decl, node->callees->callee->decl);\n+      /* We may need to re-queue the node for assembling in case\n+         we already proceeded it and ignored as not needed.  */\n+      if (node->reachable && !flag_unit_at_a_time)\n \t{\n-\t  /* Reset our datastructures so we can analyze the function body\n-\t     again.  */\n-\t  memset (&node->local, 0, sizeof (node->local));\n-\t  memset (&node->global, 0, sizeof (node->global));\n-\t  memset (&node->rtl, 0, sizeof (node->rtl));\n-\t  node->lowered = false;\n-\t  if (node->output)\n-\t    abort ();\n-\t  while (node->callees)\n-\t    cgraph_remove_call (node->decl, node->callees->callee->decl);\n+\t  struct cgraph_node *n;\n+\n+\t  for (n = cgraph_nodes_queue; n; n = n->next_needed)\n+\t    if (n == node)\n+\t      break;\n+\t  if (!n)\n+\t    node->reachable = 0;\n \t}\n-      else\n-      /* Frontend may call finalize_function twice when it is incorrectly\n-         redefined.  */\n-      if (errorcount || sorrycount)\n-\treturn;\n-      else\n-        abort ();\n     }\n   notice_global_symbol (decl);\n   node->decl = decl;\n@@ -333,6 +335,12 @@ cgraph_finalize_compilation_unit (void)\n       node = cgraph_nodes_queue;\n       cgraph_nodes_queue = cgraph_nodes_queue->next_needed;\n \n+      /* ??? It is possible to create extern inline function and later using\n+\t weak alas attribute to kill it's body. See\n+\t gcc.c-torture/compile/20011119-1.c  */\n+      if (!DECL_SAVED_TREE (decl))\n+\tcontinue;\n+\n       if (node->lowered || !node->reachable || !DECL_SAVED_TREE (decl))\n \tabort ();\n "}]}