{"sha": "c8061de73f1ec2db31588f1c20693d570d576a20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgwNjFkZTczZjFlYzJkYjMxNTg4ZjFjMjA2OTNkNTcwZDU3NmEyMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-06-08T01:46:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-08T01:46:10Z"}, "message": "re PR libstdc++/44417 (make check-target-libstdc++-v3 fails due to undefined ptrdiff_t)\n\n2010-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/44417\n\t* include/c_std/cwctype: Provide a workaround for bug glibc\n\tBZ 9694 affecting glibc 2.9 and older.\n\t* include/c_global/cwctype: Likewise.\n\t* testsuite/util/testsuite_abi.h: Remove temporary workaround.\n\t* testsuite/util/testsuite_allocator.h: Use everywhere std::size_t\n\tand std::ptrdiff_t, don't include <cstddef>.\n\n\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n\terror_code.cc: Minor tweak, prefer <cwchar> to <wchar.h>.\n\nFrom-SVN: r160417", "tree": {"sha": "ef9373142d6e954982f2fd1f84a6ac933ffe2d79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef9373142d6e954982f2fd1f84a6ac933ffe2d79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8061de73f1ec2db31588f1c20693d570d576a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8061de73f1ec2db31588f1c20693d570d576a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8061de73f1ec2db31588f1c20693d570d576a20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8061de73f1ec2db31588f1c20693d570d576a20/comments", "author": null, "committer": null, "parents": [{"sha": "567d4027a3ca0dc36fd0d828925a34a237ad62db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567d4027a3ca0dc36fd0d828925a34a237ad62db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/567d4027a3ca0dc36fd0d828925a34a237ad62db"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "0f24ab4f6e7cd7f87d6c2e4ce2d2428acfbe3e2f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8061de73f1ec2db31588f1c20693d570d576a20/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8061de73f1ec2db31588f1c20693d570d576a20/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c8061de73f1ec2db31588f1c20693d570d576a20", "patch": "@@ -1,3 +1,16 @@\n+2010-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/44417\n+\t* include/c_std/cwctype: Provide a workaround for bug glibc\n+\tBZ 9694 affecting glibc 2.9 and older.\n+\t* include/c_global/cwctype: Likewise.\n+\t* testsuite/util/testsuite_abi.h: Remove temporary workaround.\n+\t* testsuite/util/testsuite_allocator.h: Use everywhere std::size_t\n+\tand std::ptrdiff_t, don't include <cstddef>.\n+\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n+\terror_code.cc: Minor tweak, prefer <cwchar> to <wchar.h>.\n+\n 2010-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/ext/pb_ds/detail/trie_policy/order_statistics_imp.hpp:"}, {"sha": "2ac1155aa9b31299558b86bfdf21ae6ab40ccc83", "filename": "libstdc++-v3/include/c_global/cwctype", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8061de73f1ec2db31588f1c20693d570d576a20/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8061de73f1ec2db31588f1c20693d570d576a20/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype?ref=c8061de73f1ec2db31588f1c20693d570d576a20", "patch": "@@ -43,9 +43,15 @@\n #include <bits/c++config.h>\n \n #if _GLIBCXX_HAVE_WCTYPE_H\n-#include <wctype.h>\n+\n+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 10\n+// Work around glibc BZ 9694\n+#include <stddef.h>\n #endif\n \n+#include <wctype.h>\n+#endif // _GLIBCXX_HAVE_WCTYPE_H\n+\n #ifndef _GLIBCXX_CWCTYPE\n #define _GLIBCXX_CWCTYPE 1\n "}, {"sha": "d6750390a0a276b4eb7266fc7037e8d63a909fe4", "filename": "libstdc++-v3/include/c_std/cwctype", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8061de73f1ec2db31588f1c20693d570d576a20/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8061de73f1ec2db31588f1c20693d570d576a20/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwctype?ref=c8061de73f1ec2db31588f1c20693d570d576a20", "patch": "@@ -45,9 +45,15 @@\n #include <bits/c++config.h>\n \n #if _GLIBCXX_HAVE_WCTYPE_H\n-#include <wctype.h>\n+\n+#if __GLIBC__ == 2 && __GLIBC_MINOR__ < 10\n+// Work around glibc BZ 9694\n+#include <stddef.h>\n #endif\n \n+#include <wctype.h>\n+#endif // _GLIBCXX_HAVE_WCTYPE_H\n+\n // Get rid of those macros defined in <wctype.h> in lieu of real functions.\n #undef iswalnum\n #undef iswalpha"}, {"sha": "16f9108a33250112bd5bd1259b43e8f6e9182e48", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/error_code.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8061de73f1ec2db31588f1c20693d570d576a20/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8061de73f1ec2db31588f1c20693d570d576a20/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Ferror_code.cc?ref=c8061de73f1ec2db31588f1c20693d570d576a20", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-swprintf \"\" }\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,7 +22,7 @@\n #include <sstream>\n #include <system_error>\n #include <algorithm>\n-#include <wchar.h>\n+#include <cwchar>\n #include <testsuite_hooks.h>\n \n //   Effects: os << ec.category().name() << ':' << ec.value();"}, {"sha": "c9fe0a4d11c7126f0a314f43334846a24439ee0f", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8061de73f1ec2db31588f1c20693d570d576a20/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8061de73f1ec2db31588f1c20693d570d576a20/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.h?ref=c8061de73f1ec2db31588f1c20693d570d576a20", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Free Software Foundation, Inc.\n \n // This library is free software; you can redistribute it and/or\n // modify it under the terms of the GNU General Public License as\n@@ -16,11 +17,8 @@\n // along with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n // Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Include stddef now to work around glibc BZ 9694\n-#include <stddef.h>\n #include <string>\n #include <stdexcept>\n #include <vector>"}, {"sha": "cb481b2a7f93c1d02891b6c9747b25a27d310f69", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8061de73f1ec2db31588f1c20693d570d576a20/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8061de73f1ec2db31588f1c20693d570d576a20/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=c8061de73f1ec2db31588f1c20693d570d576a20", "patch": "@@ -27,7 +27,6 @@\n #ifndef _GLIBCXX_TESTSUITE_ALLOCATOR_H\n #define _GLIBCXX_TESTSUITE_ALLOCATOR_H\n \n-#include <cstddef>\n #include <tr1/unordered_map>\n #include <cassert>\n #include <bits/move.h>\n@@ -241,8 +240,8 @@ namespace __gnu_test\n     : private uneq_allocator_base\n     {\n     public:\n-      typedef size_t                              size_type;\n-      typedef ptrdiff_t                           difference_type;\n+      typedef std::size_t                         size_type;\n+      typedef std::ptrdiff_t                      difference_type;\n       typedef Tp*                                 pointer;\n       typedef const Tp*                           const_pointer;\n       typedef Tp&                                 reference;"}]}