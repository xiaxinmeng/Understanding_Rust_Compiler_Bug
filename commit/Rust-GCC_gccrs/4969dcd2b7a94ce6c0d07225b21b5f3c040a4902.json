{"sha": "4969dcd2b7a94ce6c0d07225b21b5f3c040a4902", "node_id": "C_kwDOANBUbNoAKDQ5NjlkY2QyYjdhOTRjZTZjMGQwNzIyNWIyMWI1ZjNjMDQwYTQ5MDI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-31T12:44:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-31T22:45:13Z"}, "message": "libstdc++: Teach optimizer that empty COW strings are empty [PR107087]\n\nThe compiler doesn't know about the invariant that the _S_empty_rep()\nobject is immutable and so _M_length and _M_refcount are always zero.\nThis means that we get warnings about writing possibly-non-zero length\nstrings into buffers that can't hold them. If we teach the compiler that\nthe empty rep is always zero length, it knows it can be copied into any\nbuffer.\n\nFor Stage 1 we might want to also consider adding this to capacity():\n\n\tif (_S_empty_rep()._M_capacity != 0)\n\t  __builtin_unreachable();\n\nAnd this to _Rep::_M_is_leaked() and _Rep::_M_is_shared():\n\n\t  if (_S_empty_rep()._M_refcount != 0)\n\t    __builtin_unreachable();\n\nlibstdc++-v3/ChangeLog:\n\n\tPR tree-optimization/107087\n\t* include/bits/cow_string.h (basic_string::size()): Add\n\toptimizer hint that _S_empty_rep()._M_length is always zero.\n\t(basic_string::length()): Call size().", "tree": {"sha": "04096d2c57bcfa03fff5a0c7e8b116aa2f1620f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04096d2c57bcfa03fff5a0c7e8b116aa2f1620f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4969dcd2b7a94ce6c0d07225b21b5f3c040a4902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4969dcd2b7a94ce6c0d07225b21b5f3c040a4902", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4969dcd2b7a94ce6c0d07225b21b5f3c040a4902", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4969dcd2b7a94ce6c0d07225b21b5f3c040a4902/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92f02e754ca2fbcd56dbd7b3949147d50bab99a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f02e754ca2fbcd56dbd7b3949147d50bab99a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92f02e754ca2fbcd56dbd7b3949147d50bab99a0"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "b6024365d4f11b865634fc00a2ed70dffab01e72", "filename": "libstdc++-v3/include/bits/cow_string.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4969dcd2b7a94ce6c0d07225b21b5f3c040a4902/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4969dcd2b7a94ce6c0d07225b21b5f3c040a4902/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h?ref=4969dcd2b7a94ce6c0d07225b21b5f3c040a4902", "patch": "@@ -907,17 +907,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     public:\n       // Capacity:\n+\n       ///  Returns the number of characters in the string, not including any\n       ///  null-termination.\n       size_type\n       size() const _GLIBCXX_NOEXCEPT\n-      { return _M_rep()->_M_length; }\n+      {\n+#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0 && __OPTIMIZE__\n+\tif (_S_empty_rep()._M_length != 0)\n+\t  __builtin_unreachable();\n+#endif\n+\treturn _M_rep()->_M_length;\n+      }\n \n       ///  Returns the number of characters in the string, not including any\n       ///  null-termination.\n       size_type\n       length() const _GLIBCXX_NOEXCEPT\n-      { return _M_rep()->_M_length; }\n+      { return size(); }\n \n       ///  Returns the size() of the largest possible %string.\n       size_type"}]}