{"sha": "c56e3582c20263c442e00da7ea484edf9c912165", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU2ZTM1ODJjMjAyNjNjNDQyZTAwZGE3ZWE0ODRlZGY5YzkxMjE2NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-12-05T11:33:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-12-05T11:33:28Z"}, "message": "emit-rtl.c (component_ref_for_mem_expr): Try harder to find decl underneath COMPONENT_REFs.\n\n\t* emit-rtl.c (component_ref_for_mem_expr): Try harder to find decl\n\tunderneath COMPONENT_REFs.\n\t(set_mem_attributes): Also strip VIEW_CONVERT_EXPR.\n\nFrom-SVN: r47662", "tree": {"sha": "d4fa9aba7ca51b7c5c0ede030d6b72fd3dbd3d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4fa9aba7ca51b7c5c0ede030d6b72fd3dbd3d73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c56e3582c20263c442e00da7ea484edf9c912165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56e3582c20263c442e00da7ea484edf9c912165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c56e3582c20263c442e00da7ea484edf9c912165", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56e3582c20263c442e00da7ea484edf9c912165/comments", "author": null, "committer": null, "parents": [{"sha": "ef31d0c25e53f56381e5de2a9788196c4fad1609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef31d0c25e53f56381e5de2a9788196c4fad1609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef31d0c25e53f56381e5de2a9788196c4fad1609"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "dad21bf5b999248d51ab596e7334ef3551881ab6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56e3582c20263c442e00da7ea484edf9c912165/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56e3582c20263c442e00da7ea484edf9c912165/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c56e3582c20263c442e00da7ea484edf9c912165", "patch": "@@ -1,3 +1,9 @@\n+Wed Dec  5 06:26:27 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* emit-rtl.c (component_ref_for_mem_expr): Try harder to find decl\n+\tunderneath COMPONENT_REFs.\n+\t(set_mem_attributes): Also strip VIEW_CONVERT_EXPR.\n+\n 2001-12-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* toplev.c (display_target_options): Don't print twice."}, {"sha": "4238b8c7762ca7c7647577d4d39ad0ad69d9cad3", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56e3582c20263c442e00da7ea484edf9c912165/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56e3582c20263c442e00da7ea484edf9c912165/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=c56e3582c20263c442e00da7ea484edf9c912165", "patch": "@@ -1649,13 +1649,31 @@ component_ref_for_mem_expr (ref)\n \n   if (TREE_CODE (inner) == COMPONENT_REF)\n     inner = component_ref_for_mem_expr (inner);\n-  else if (! DECL_P (inner))\n-    inner = NULL_TREE;\n+  else\n+    {\n+      tree placeholder_ptr = 0;\n+\n+      /* Now remove any conversions: they don't change what the underlying\n+\t object is.  Likewise for SAVE_EXPR.  Also handle PLACEHOLDER_EXPR.  */\n+      while (TREE_CODE (inner) == NOP_EXPR || TREE_CODE (inner) == CONVERT_EXPR\n+\t     || TREE_CODE (inner) == NON_LVALUE_EXPR\n+\t     || TREE_CODE (inner) == VIEW_CONVERT_EXPR\n+\t     || TREE_CODE (inner) == SAVE_EXPR\n+\t     || TREE_CODE (inner) == PLACEHOLDER_EXPR)\n+\t  if (TREE_CODE (inner) == PLACEHOLDER_EXPR)\n+\t    inner = find_placeholder (inner, &placeholder_ptr);\n+\t  else\n+\t    inner = TREE_OPERAND (inner, 0);\n+\n+      if (! DECL_P (inner))\n+\tinner = NULL_TREE;\n+    }\n \n   if (inner == TREE_OPERAND (ref, 0))\n     return ref;\n   else\n-    return build (COMPONENT_REF, TREE_TYPE (ref), inner, TREE_OPERAND (ref, 1));\n+    return build (COMPONENT_REF, TREE_TYPE (ref), inner,\n+\t\t  TREE_OPERAND (ref, 1));\n }\n \n /* Given REF, a MEM, and T, either the type of X or the expression\n@@ -1723,10 +1741,12 @@ set_mem_attributes (ref, t, objectp)\n       if (TREE_THIS_VOLATILE (t))\n \tMEM_VOLATILE_P (ref) = 1;\n \n-      /* Now remove any NOPs: they don't change what the underlying object is.\n-\t Likewise for SAVE_EXPR.  */\n+      /* Now remove any conversions: they don't change what the underlying\n+\t object is.  Likewise for SAVE_EXPR.  */\n       while (TREE_CODE (t) == NOP_EXPR || TREE_CODE (t) == CONVERT_EXPR\n-\t     || TREE_CODE (t) == NON_LVALUE_EXPR || TREE_CODE (t) == SAVE_EXPR)\n+\t     || TREE_CODE (t) == NON_LVALUE_EXPR\n+\t     || TREE_CODE (t) == VIEW_CONVERT_EXPR\n+\t     || TREE_CODE (t) == SAVE_EXPR)\n \tt = TREE_OPERAND (t, 0);\n \n       /* If this expression can't be addressed (e.g., it contains a reference"}]}