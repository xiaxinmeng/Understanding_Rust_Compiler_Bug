{"sha": "5a8af0b4ef5b662dca364091fc4d662eca12bb29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE4YWYwYjRlZjViNjYyZGNhMzY0MDkxZmM0ZDY2MmVjYTEyYmIyOQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-08-13T20:58:00Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-08-13T20:58:00Z"}, "message": "re PR fortran/32827 (IMPORT fails for TYPE when also used in INTERFACE)\n\n2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32827\n\t* decl.c (variable_decl): Check for an imported symbol\n\tby looking for its symtree and testing for the imported\n\tattribute.\n\t(gfc_match_import): Remove change of symbol's namespace\n\tand set the attribute imported instead.\n\t* symbol.c (gfc_get_sym_tree): It is not an error if a\n\tsymbol is imported.\n\t* gfortran.h : Add the 'imported' to symbol_attribute.\n\n2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32827\n\t* gfortran.dg/import6.f90: New test.\n\nFrom-SVN: r127397", "tree": {"sha": "e3eb7a00a8212cb938f95778ba895342840f6e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3eb7a00a8212cb938f95778ba895342840f6e09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a8af0b4ef5b662dca364091fc4d662eca12bb29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a8af0b4ef5b662dca364091fc4d662eca12bb29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a8af0b4ef5b662dca364091fc4d662eca12bb29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a8af0b4ef5b662dca364091fc4d662eca12bb29/comments", "author": null, "committer": null, "parents": [{"sha": "462643f011112b0be9615d536f2fb1521a86a458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/462643f011112b0be9615d536f2fb1521a86a458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/462643f011112b0be9615d536f2fb1521a86a458"}], "stats": {"total": 94, "additions": 84, "deletions": 10}, "files": [{"sha": "26a0cd2b7f26f4351fca0066e085d1fa09141a8e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8af0b4ef5b662dca364091fc4d662eca12bb29/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8af0b4ef5b662dca364091fc4d662eca12bb29/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5a8af0b4ef5b662dca364091fc4d662eca12bb29", "patch": "@@ -1,3 +1,15 @@\n+2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32827\n+\t* decl.c (variable_decl): Check for an imported symbol\n+\tby looking for its symtree and testing for the imported\n+\tattribute.\n+\t(gfc_match_import): Remove change of symbol's namespace\n+\tand set the attribute imported instead.\n+\t* symbol.c (gfc_get_sym_tree): It is not an error if a\n+\tsymbol is imported.\n+\t* gfortran.h : Add the 'imported' to symbol_attribute.\n+\n 2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/32962"}, {"sha": "1bb82bc7ad275d9578cb7bf9acc82ea3283a8236", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8af0b4ef5b662dca364091fc4d662eca12bb29/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8af0b4ef5b662dca364091fc4d662eca12bb29/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=5a8af0b4ef5b662dca364091fc4d662eca12bb29", "patch": "@@ -1553,13 +1553,20 @@ variable_decl (int elem)\n   if (current_ts.type == BT_DERIVED\n       && gfc_current_ns->proc_name\n       && gfc_current_ns->proc_name->attr.if_source == IFSRC_IFBODY\n-      && current_ts.derived->ns != gfc_current_ns\n-      && !gfc_current_ns->has_import_set)\n-    {\n-      gfc_error (\"the type of '%s' at %C has not been declared within the \"\n-\t\t \"interface\", name);\n-      m = MATCH_ERROR;\n-      goto cleanup;\n+      && current_ts.derived->ns != gfc_current_ns)\n+    {\n+      gfc_symtree *st;\n+      st = gfc_find_symtree (gfc_current_ns->sym_root, current_ts.derived->name);\n+      if (!(current_ts.derived->attr.imported\n+\t\t&& st != NULL\n+\t\t&& st->n.sym == current_ts.derived)\n+\t    && !gfc_current_ns->has_import_set)\n+\t{\n+\t    gfc_error (\"the type of '%s' at %C has not been declared within the \"\n+\t\t       \"interface\", name);\n+\t    m = MATCH_ERROR;\n+\t    goto cleanup;\n+\t}\n     }\n \n   /* In functions that have a RESULT variable defined, the function\n@@ -2433,7 +2440,7 @@ gfc_match_import (void)\n \t  st = gfc_new_symtree (&gfc_current_ns->sym_root, name);\n \t  st->n.sym = sym;\n \t  sym->refs++;\n-\t  sym->ns = gfc_current_ns;\n+\t  sym->attr.imported = 1;\n \n \t  goto next_item;\n "}, {"sha": "085459412edd6cb2add6fd6f79e420489997ca66", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8af0b4ef5b662dca364091fc4d662eca12bb29/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8af0b4ef5b662dca364091fc4d662eca12bb29/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=5a8af0b4ef5b662dca364091fc4d662eca12bb29", "patch": "@@ -640,7 +640,8 @@ typedef struct\n   unsigned data:1,\t\t/* Symbol is named in a DATA statement.  */\n     protected:1,\t\t/* Symbol has been marked as protected.  */\n     use_assoc:1,\t\t/* Symbol has been use-associated.  */\n-    use_only:1;\t\t\t/* Symbol has been use-associated, with ONLY.  */\n+    use_only:1,\t\t\t/* Symbol has been use-associated, with ONLY.  */\n+    imported:1;\t\t\t/* Symbol has been associated by IMPORT.  */\n \n   unsigned in_namelist:1, in_common:1, in_equivalence:1;\n   unsigned function:1, subroutine:1, generic:1, generic_copy:1;"}, {"sha": "a1cd815c47d1f04248e1b1694ab8d379c06b92c2", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8af0b4ef5b662dca364091fc4d662eca12bb29/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8af0b4ef5b662dca364091fc4d662eca12bb29/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=5a8af0b4ef5b662dca364091fc4d662eca12bb29", "patch": "@@ -2393,7 +2393,10 @@ gfc_get_sym_tree (const char *name, gfc_namespace *ns, gfc_symtree **result)\n \n       p = st->n.sym;\n \n-      if (p->ns != ns && (!p->attr.function || ns->proc_name != p))\n+      if (p->ns != ns && (!p->attr.function || ns->proc_name != p)\n+\t    && !(ns->proc_name\n+\t\t   && ns->proc_name->attr.if_source == IFSRC_IFBODY\n+\t\t   && (ns->has_import_set || p->attr.imported)))\n \t{\n \t  /* Symbol is from another namespace.  */\n \t  gfc_error (\"Symbol '%s' at %C has already been host associated\","}, {"sha": "2235cff60fe2a491787c51772908b3313e775777", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8af0b4ef5b662dca364091fc4d662eca12bb29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8af0b4ef5b662dca364091fc4d662eca12bb29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a8af0b4ef5b662dca364091fc4d662eca12bb29", "patch": "@@ -1,3 +1,8 @@\n+2007-08-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32827\n+\t* gfortran.dg/import6.f90: New test.\n+\n 2007-08-13  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR C/30427"}, {"sha": "1bf9669c5b6080d606dcfa8757ce02c4b4b8fcaf", "filename": "gcc/testsuite/gfortran.dg/import6.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a8af0b4ef5b662dca364091fc4d662eca12bb29/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a8af0b4ef5b662dca364091fc4d662eca12bb29/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport6.f90?ref=5a8af0b4ef5b662dca364091fc4d662eca12bb29", "patch": "@@ -0,0 +1,46 @@\n+! { dg-do compile }\r\n+! Tests the fix for PR32827, in which IMPORT :: my_type put the\r\n+! symbol into the interface namespace, thereby generating an error\r\n+! when the declaration of 'x' is compiled.\r\n+!\r\n+! Contributed by Douglas Wells <sysmaint@contek.com>\r\n+!\r\n+subroutine func1(param)\r\n+  type :: my_type\r\n+    integer :: data\r\n+  end type my_type\r\n+  type(my_type) :: param\r\n+  param%data = 99\r\n+end subroutine func1\r\n+\r\n+subroutine func2(param)\r\n+  type :: my_type\r\n+    integer :: data\r\n+  end type my_type\r\n+  type(my_type) :: param\r\n+  param%data = 21\r\n+end subroutine func2\r\n+\r\n+  type :: my_type\r\n+    integer :: data\r\n+  end type my_type\r\n+\r\n+  interface\r\n+    subroutine func1(param)\r\n+      import :: my_type\r\n+      type(my_type) :: param\r\n+    end subroutine func1\r\n+  end interface\r\n+  interface\r\n+    subroutine func2(param)\r\n+      import\r\n+      type(my_type) :: param\r\n+    end subroutine func2\r\n+  end interface\r\n+\r\n+  type(my_type) :: x\r\n+  call func1(x)\r\n+  print *, x%data\r\n+  call func2(x)\r\n+  print *, x%data\r\n+end\r"}]}