{"sha": "b565a3163d3682380536a2e6b0ebac6f59fa9a5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU2NWEzMTYzZDM2ODIzODA1MzZhMmU2YjBlYmFjNmY1OWZhOWE1ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-18T19:50:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-18T19:50:09Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1213", "tree": {"sha": "e8baf2e87bc967cacab1ed9fdb07f2ad0a3bbd72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8baf2e87bc967cacab1ed9fdb07f2ad0a3bbd72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b565a3163d3682380536a2e6b0ebac6f59fa9a5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b565a3163d3682380536a2e6b0ebac6f59fa9a5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b565a3163d3682380536a2e6b0ebac6f59fa9a5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/comments", "author": null, "committer": null, "parents": [{"sha": "7c0891a18faee70439f8fbe903f499f198af43c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c0891a18faee70439f8fbe903f499f198af43c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c0891a18faee70439f8fbe903f499f198af43c3"}], "stats": {"total": 56, "additions": 33, "deletions": 23}, "files": [{"sha": "847cf3e3c950f0026edd33019c591c4011a5db82", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b565a3163d3682380536a2e6b0ebac6f59fa9a5e", "patch": "@@ -1170,7 +1170,7 @@ while (0)\n    For floating-point equality comparisons, CCFPEQmode should be used.\n    VOIDmode should be used in all other cases.  */\n \n-#define SELECT_CC_MODE(OP,X) \\\n+#define SELECT_CC_MODE(OP,X,Y) \\\n   (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\t\t\\\n    && ((OP) == EQ || (OP) == NE) ? CCFPEQmode : CCmode)\n "}, {"sha": "1d0a3c5838d44d7e315d23b9fabef25e63aeb2e9", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=b565a3163d3682380536a2e6b0ebac6f59fa9a5e", "patch": "@@ -1631,7 +1631,7 @@ gen_compare_reg (code, x, y)\n      enum rtx_code code;\n      rtx x, y;\n {\n-  enum machine_mode mode = SELECT_CC_MODE (code, x);\n+  enum machine_mode mode = SELECT_CC_MODE (code, x, y);\n   rtx cc_reg = gen_rtx (REG, mode, 0);\n \n   emit_insn (gen_rtx (SET, VOIDmode, cc_reg,"}, {"sha": "ee28c2d9fd5e1607e8aaa00273c215fe50755872", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=b565a3163d3682380536a2e6b0ebac6f59fa9a5e", "patch": "@@ -1288,7 +1288,7 @@ while (0)\n    should be used.  CC_NOOVmode should be used when the first operand is a\n    PLUS, MINUS, or NEG.  CCmode should be used when no special processing is\n    needed.  */\n-#define SELECT_CC_MODE(OP,X) \\\n+#define SELECT_CC_MODE(OP,X,Y) \\\n   (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT ? CCFPmode : CCmode)    \\\n \n /* A function address in a call instruction"}, {"sha": "8b44a9a4603a1686b7672fd0cab73a1a6183401b", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=b565a3163d3682380536a2e6b0ebac6f59fa9a5e", "patch": "@@ -1268,7 +1268,7 @@ struct rs6000_args {int words, fregno, nargs_prototype; };\n    CCEQmode should be used when we are doing an inequality comparison on\n    the result of a comparison. CCmode should be used in all other cases.  */\n \n-#define SELECT_CC_MODE(OP,X) \\\n+#define SELECT_CC_MODE(OP,X,Y) \\\n   (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT ? CCFPmode\t\\\n    : (OP) == GTU || (OP) == LTU || (OP) == GEU || (OP) == LEU ? CCUNSmode \\\n    : (((OP) == EQ || (OP) == NE) && GET_RTX_CLASS (GET_CODE (X)) == '<'   \\"}, {"sha": "367d76f631041bff4e657d453fd81a42576eb4a6", "filename": "gcc/integrate.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=b565a3163d3682380536a2e6b0ebac6f59fa9a5e", "patch": "@@ -2376,6 +2376,11 @@ subst_constants (loc, insn, map)\n \t  op_mode = GET_MODE (XEXP (x, 1));\n \tnew = simplify_relational_operation (code, op_mode,\n \t\t\t\t\t     XEXP (x, 0), XEXP (x, 1));\n+#ifdef FLOAT_STORE_FLAG_VALUE\n+\tif (new != 0 && GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n+\t  new = ((new == const0_rtx) ? CONST0_RTX (GET_MODE (x))\n+\t\t : immed_real_const_1 (FLOAT_STORE_FLAG_VALUE, GET_MODE (x)));\n+#endif\n \tbreak;\n       }\n "}, {"sha": "c3007c89fd422c9e94cfff8f695c2c672c15c243", "filename": "gcc/loop.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=b565a3163d3682380536a2e6b0ebac6f59fa9a5e", "patch": "@@ -6254,18 +6254,32 @@ get_condition (jump, earliest)\n \t  enum machine_mode inner_mode = GET_MODE (SET_SRC (set));\n \n \t  if ((GET_CODE (SET_SRC (set)) == COMPARE\n-\t       || ((code == NE\n-\t\t   || (code == LT\n-\t\t       && GET_MODE_BITSIZE (inner_mode) <= HOST_BITS_PER_INT\n-\t\t       && (STORE_FLAG_VALUE\n-\t\t\t   & (1 << (GET_MODE_BITSIZE (inner_mode) - 1)))))\n+\t       || (((code == NE\n+\t\t     || (code == LT\n+\t\t\t && GET_MODE_CLASS (inner_mode) == MODE_INT\n+\t\t\t && GET_MODE_BITSIZE (inner_mode) <= HOST_BITS_PER_INT\n+\t\t\t && (STORE_FLAG_VALUE\n+\t\t\t     & (1 << (GET_MODE_BITSIZE (inner_mode) - 1))))\n+#ifdef FLOAT_STORE_FLAG_VALUE\n+\t\t     || (code == LT\n+\t\t\t && GET_MODE_CLASS (inner_mode) == MODE_FLOAT\n+\t\t\t && FLOAT_STORE_FLAG_VALUE < 0)\n+#endif\n+\t\t     ))\n \t\t   && GET_RTX_CLASS (GET_CODE (SET_SRC (set))) == '<')))\n \t    x = SET_SRC (set);\n-\t  else if ((code == EQ\n-\t\t    || (code == GE\n-\t\t\t&& GET_MODE_BITSIZE (inner_mode) <= HOST_BITS_PER_INT\n-\t\t\t&& (STORE_FLAG_VALUE\n-\t\t\t    & (1 << (GET_MODE_BITSIZE (inner_mode) - 1)))))\n+\t  else if (((code == EQ\n+\t\t     || (code == GE\n+\t\t\t && GET_MODE_BITSIZE (inner_mode) <= HOST_BITS_PER_INT\n+\t\t\t && GET_MODE_CLASS (inner_mode) == MODE_INT\n+\t\t\t && (STORE_FLAG_VALUE\n+\t\t\t     & (1 << (GET_MODE_BITSIZE (inner_mode) - 1))))\n+#ifdef FLOAT_STORE_FLAG_VALUE\n+\t\t     || (code == GE\n+\t\t\t && GET_MODE_CLASS (inner_mode) == MODE_FLOAT\n+\t\t\t && FLOAT_STORE_FLAG_VALUE < 0)\n+#eneif\n+\t\t     ))\n \t\t   && GET_RTX_CLASS (GET_CODE (SET_SRC (set))) == '<')\n \t    {\n \t      /* We might have reversed a LT to get a GE here.  But this wasn't"}, {"sha": "53ae866ac84a0cc806b9145bfea1941ccdc200b9", "filename": "gcc/protoize.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b565a3163d3682380536a2e6b0ebac6f59fa9a5e/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=b565a3163d3682380536a2e6b0ebac6f59fa9a5e", "patch": "@@ -194,15 +194,6 @@ extern char *   strrchr ();\n #define STRINGIFY(STRING) \"STRING\"\n #endif\n \n-/* POSIX systems will not have definitions for WIFEXITED or WEXITSTATUS.\n-   Define them correctly and so that they work for all environments.  */\n-\n-#undef WIFEXITED\n-#define WIFEXITED(status_word) ((*((int *)&status_word) & 0xff) == 0x00)\n-\n-#undef WEXITSTATUS\n-#define WEXITSTATUS(status_word) ((*((int *)&status_word) & 0xff00) >> 8)\n-\n /* Define a default place to find the SYSCALLS.X file.  */\n \n #ifndef STD_PROTO_DIR"}]}