{"sha": "e7b67047c79d2ea6867ed15b6441960219d77f29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdiNjcwNDdjNzlkMmVhNjg2N2VkMTViNjQ0MTk2MDIxOWQ3N2YyOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-02-21T21:50:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-02-21T21:50:52Z"}, "message": "re PR c++/60252 ([c++11] ICE with invalid variable-length array in lambda parameter)\n\n\tPR c++/60252\n\t* lambda.c (maybe_resolve_dummy): Check lambda_function rather\n\tthan current_binding_level.\n\nFrom-SVN: r208028", "tree": {"sha": "49ac271d04d42323757e001460f205ae82277821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49ac271d04d42323757e001460f205ae82277821"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7b67047c79d2ea6867ed15b6441960219d77f29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7b67047c79d2ea6867ed15b6441960219d77f29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7b67047c79d2ea6867ed15b6441960219d77f29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7b67047c79d2ea6867ed15b6441960219d77f29/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b98fb3633ea72bc48ce36975aa0ac2252f279a32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b98fb3633ea72bc48ce36975aa0ac2252f279a32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b98fb3633ea72bc48ce36975aa0ac2252f279a32"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "dd926daa4202519c9638330a19ef2b28d4bc78c4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b67047c79d2ea6867ed15b6441960219d77f29/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b67047c79d2ea6867ed15b6441960219d77f29/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e7b67047c79d2ea6867ed15b6441960219d77f29", "patch": "@@ -1,5 +1,9 @@\n 2014-02-21  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/60252\n+\t* lambda.c (maybe_resolve_dummy): Check lambda_function rather\n+\tthan current_binding_level.\n+\n \tPR c++/60186\n \t* typeck2.c (massage_init_elt): Call fold_non_dependent_expr_sfinae.\n "}, {"sha": "277dec6d2b9d53c6514c7a300cde756955f0124a", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b67047c79d2ea6867ed15b6441960219d77f29/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b67047c79d2ea6867ed15b6441960219d77f29/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=e7b67047c79d2ea6867ed15b6441960219d77f29", "patch": "@@ -749,10 +749,8 @@ maybe_resolve_dummy (tree object)\n   if (type != current_class_type\n       && current_class_type\n       && LAMBDA_TYPE_P (current_class_type)\n-      && DERIVED_FROM_P (type, current_nonlambda_class_type ())\n-      /* If we get here while parsing the parameter list of a lambda, it\n-\t will fail, so don't even try (c++/60252).  */\n-      && current_binding_level->kind != sk_function_parms)\n+      && lambda_function (current_class_type)\n+      && DERIVED_FROM_P (type, current_nonlambda_class_type ()))\n     {\n       /* In a lambda, need to go through 'this' capture.  */\n       tree lam = CLASSTYPE_LAMBDA_EXPR (current_class_type);"}]}