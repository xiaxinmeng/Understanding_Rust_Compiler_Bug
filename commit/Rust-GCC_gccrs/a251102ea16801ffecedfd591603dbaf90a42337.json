{"sha": "a251102ea16801ffecedfd591603dbaf90a42337", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI1MTEwMmVhMTY4MDFmZmVjZWRmZDU5MTYwM2RiYWY5MGE0MjMzNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2004-03-10T22:36:22Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-03-10T22:36:22Z"}, "message": "optabs.h (enum optab_index): Add new OTI_exp10 and OTI_exp2.\n\n2004-03-10  Uros Bizjak  <uros@kss-loka.si>\n\n\t* optabs.h (enum optab_index): Add new OTI_exp10 and OTI_exp2.\n\t(exp10_optab, exp2_optab): Define corresponding macros.\n\t* optabs.c (init_optabs): Initialize exp10_optab and exp2_optab.\n\t* genopinit.c (optabs): Implement exp10_optab and exp2_optab\n\tusing exp10?f2 and exp2?f2 patterns.\n\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_EXP10{,F,L}\n\tusing exp10_optab, and BUILT_IN_EXP2{,F,L} using exp2_optab.\n\t(expand_builtin): Expand BUILT_IN_EXP10{,F,L} and BUILT_IN_EXP2{,F,L}\n\tusing expand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n\n\t* config/i386/i386.md (exp10sf2, exp10df2, exp10xf2, exp2sf2,\n\texp2df2, exp2xf2): New patterns to implement exp10, exp10f, exp10l,\n\texp2, exp2f and exp2l built-ins as inline x87 intrinsics.\n\n\t* gcc.dg/builtins-34.c: New test.\n\nFrom-SVN: r79279", "tree": {"sha": "48496cf34ecae86ed12d904899347666a9abbfb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48496cf34ecae86ed12d904899347666a9abbfb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a251102ea16801ffecedfd591603dbaf90a42337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a251102ea16801ffecedfd591603dbaf90a42337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a251102ea16801ffecedfd591603dbaf90a42337", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a251102ea16801ffecedfd591603dbaf90a42337/comments", "author": null, "committer": null, "parents": [{"sha": "5199e2c6f14c3707ebc484f23bbc845af973f243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5199e2c6f14c3707ebc484f23bbc845af973f243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5199e2c6f14c3707ebc484f23bbc845af973f243"}], "stats": {"total": 223, "additions": 223, "deletions": 0}, "files": [{"sha": "0f3c63e46e5329a1014b96c7e0802f618bc6e780", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a251102ea16801ffecedfd591603dbaf90a42337", "patch": "@@ -1,3 +1,19 @@\n+2004-03-10  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* optabs.h (enum optab_index): Add new OTI_exp10 and OTI_exp2.\n+\t(exp10_optab, exp2_optab): Define corresponding macros.\n+\t* optabs.c (init_optabs): Initialize exp10_optab and exp2_optab.\n+\t* genopinit.c (optabs): Implement exp10_optab and exp2_optab\n+\tusing exp10?f2 and exp2?f2 patterns.\n+\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_EXP10{,F,L}\n+\tusing exp10_optab, and BUILT_IN_EXP2{,F,L} using exp2_optab.\n+\t(expand_builtin): Expand BUILT_IN_EXP10{,F,L} and BUILT_IN_EXP2{,F,L}\n+\tusing expand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n+\n+\t* config/i386/i386.md (exp10sf2, exp10df2, exp10xf2, exp2sf2,\n+\texp2df2, exp2xf2): New patterns to implement exp10, exp10f, exp10l,\n+\texp2, exp2f and exp2l built-ins as inline x87 intrinsics.\n+\n 2004-03-10  Anthony Green  <green@redhat.com>\n \n \t* doc/invoke.texi (ARM Options): Fix -mpfu typo."}, {"sha": "daf06e8fc3ed1e6687b2424efe8648af8b9c06fa", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a251102ea16801ffecedfd591603dbaf90a42337", "patch": "@@ -1629,6 +1629,14 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n     case BUILT_IN_EXPF:\n     case BUILT_IN_EXPL:\n       errno_set = true; builtin_optab = exp_optab; break;\n+    case BUILT_IN_EXP10:\n+    case BUILT_IN_EXP10F:\n+    case BUILT_IN_EXP10L:\n+      errno_set = true; builtin_optab = exp10_optab; break;\n+    case BUILT_IN_EXP2:\n+    case BUILT_IN_EXP2F:\n+    case BUILT_IN_EXP2L:\n+      errno_set = true; builtin_optab = exp2_optab; break;\n     case BUILT_IN_LOG:\n     case BUILT_IN_LOGF:\n     case BUILT_IN_LOGL:\n@@ -5107,6 +5115,12 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_EXP:\n     case BUILT_IN_EXPF:\n     case BUILT_IN_EXPL:\n+    case BUILT_IN_EXP10:\n+    case BUILT_IN_EXP10F:\n+    case BUILT_IN_EXP10L:\n+    case BUILT_IN_EXP2:\n+    case BUILT_IN_EXP2F:\n+    case BUILT_IN_EXP2L:\n     case BUILT_IN_LOG:\n     case BUILT_IN_LOGF:\n     case BUILT_IN_LOGL:"}, {"sha": "c9e7c8caa52af1be25abfd4549dea5510e543be4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a251102ea16801ffecedfd591603dbaf90a42337", "patch": "@@ -15268,6 +15268,7 @@\n    (set (match_dup 4) (mult:XF (match_dup 2) (match_dup 3)))\n    (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_FRNDINT))\n    (set (match_dup 6) (minus:XF (match_dup 4) (match_dup 5)))\n+\n    (set (match_dup 7) (unspec:XF [(match_dup 6)] UNSPEC_F2XM1))\n    (set (match_dup 9) (plus:XF (match_dup 7) (match_dup 8)))\n    (parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n@@ -15309,6 +15310,136 @@\n   emit_move_insn (operands[7], CONST1_RTX (XFmode));  /* fld1 */\n })\n \n+(define_expand \"exp10sf2\"\n+  [(set (match_dup 2)\n+\t(float_extend:XF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (set (match_dup 4) (mult:XF (match_dup 2) (match_dup 3)))\n+   (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_FRNDINT))\n+   (set (match_dup 6) (minus:XF (match_dup 4) (match_dup 5)))\n+   (set (match_dup 7) (unspec:XF [(match_dup 6)] UNSPEC_F2XM1))\n+   (set (match_dup 9) (plus:XF (match_dup 7) (match_dup 8)))\n+   (parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t   (unspec:SF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n+\t      (clobber (match_scratch:SF 5 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+  int i;\n+\n+  for (i=2; i<10; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (6); /* fldl2t */\n+  emit_move_insn (operands[3], temp);\n+  emit_move_insn (operands[8], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"exp10df2\"\n+  [(set (match_dup 2)\n+\t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (set (match_dup 4) (mult:XF (match_dup 2) (match_dup 3)))\n+   (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_FRNDINT))\n+   (set (match_dup 6) (minus:XF (match_dup 4) (match_dup 5)))\n+   (set (match_dup 7) (unspec:XF [(match_dup 6)] UNSPEC_F2XM1))\n+   (set (match_dup 9) (plus:XF (match_dup 7) (match_dup 8)))\n+   (parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t   (unspec:DF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n+\t      (clobber (match_scratch:DF 5 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+  int i;\n+\n+  for (i=2; i<10; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (6); /* fldl2t */\n+  emit_move_insn (operands[3], temp);\n+  emit_move_insn (operands[8], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"exp10xf2\"\n+  [(set (match_dup 3) (mult:XF (match_operand:XF 1 \"register_operand\" \"\")\n+\t\t\t       (match_dup 2)))\n+   (set (match_dup 4) (unspec:XF [(match_dup 3)] UNSPEC_FRNDINT))\n+   (set (match_dup 5) (minus:XF (match_dup 3) (match_dup 4)))\n+   (set (match_dup 6) (unspec:XF [(match_dup 5)] UNSPEC_F2XM1))\n+   (set (match_dup 8) (plus:XF (match_dup 6) (match_dup 7)))\n+   (parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t\t   (unspec:XF [(match_dup 8) (match_dup 4)] UNSPEC_FSCALE))\n+\t      (clobber (match_scratch:XF 5 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+  int i;\n+\n+  for (i=2; i<9; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (6); /* fldl2t */\n+  emit_move_insn (operands[2], temp);\n+  emit_move_insn (operands[7], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"exp2sf2\"\n+  [(set (match_dup 2)\n+\t(float_extend:XF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (set (match_dup 3) (unspec:XF [(match_dup 2)] UNSPEC_FRNDINT))\n+   (set (match_dup 4) (minus:XF (match_dup 2) (match_dup 3)))\n+   (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_F2XM1))\n+   (set (match_dup 7) (plus:XF (match_dup 5) (match_dup 6)))\n+   (parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t   (unspec:SF [(match_dup 7) (match_dup 3)] UNSPEC_FSCALE))\n+\t      (clobber (match_scratch:SF 3 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  int i;\n+\n+  for (i=2; i<8; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+  emit_move_insn (operands[6], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"exp2df2\"\n+  [(set (match_dup 2)\n+\t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (set (match_dup 3) (unspec:XF [(match_dup 2)] UNSPEC_FRNDINT))\n+   (set (match_dup 4) (minus:XF (match_dup 2) (match_dup 3)))\n+   (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_F2XM1))\n+   (set (match_dup 7) (plus:XF (match_dup 5) (match_dup 6)))\n+   (parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t   (unspec:DF [(match_dup 7) (match_dup 3)] UNSPEC_FSCALE))\n+\t      (clobber (match_scratch:DF 3 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  int i;\n+\n+  for (i=2; i<8; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+  emit_move_insn (operands[6], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"exp2xf2\"\n+  [(set (match_dup 2) (match_operand:XF 1 \"register_operand\" \"\"))\n+   (set (match_dup 3) (unspec:XF [(match_dup 2)] UNSPEC_FRNDINT))\n+   (set (match_dup 4) (minus:XF (match_dup 2) (match_dup 3)))\n+   (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_F2XM1))\n+   (set (match_dup 7) (plus:XF (match_dup 5) (match_dup 6)))\n+   (parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t\t   (unspec:XF [(match_dup 7) (match_dup 3)] UNSPEC_FSCALE))\n+\t      (clobber (match_scratch:XF 3 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  int i;\n+\n+  for (i=2; i<8; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+  emit_move_insn (operands[6], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n (define_expand \"atansf2\"\n   [(parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t\t   (unspec:SF [(match_dup 2)"}, {"sha": "b3b651821c0b96dcd520cf3661f0ddd2bba08d19", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=a251102ea16801ffecedfd591603dbaf90a42337", "patch": "@@ -125,6 +125,8 @@ static const char * const optabs[] =\n   \"sin_optab->handlers[$A].insn_code = CODE_FOR_$(sin$a2$)\",\n   \"cos_optab->handlers[$A].insn_code = CODE_FOR_$(cos$a2$)\",\n   \"exp_optab->handlers[$A].insn_code = CODE_FOR_$(exp$a2$)\",\n+  \"exp10_optab->handlers[$A].insn_code = CODE_FOR_$(exp10$a2$)\",\n+  \"exp2_optab->handlers[$A].insn_code = CODE_FOR_$(exp2$a2$)\",\n   \"log_optab->handlers[$A].insn_code = CODE_FOR_$(log$a2$)\",\n   \"log10_optab->handlers[$A].insn_code = CODE_FOR_$(log10$a2$)\",  \n   \"log2_optab->handlers[$A].insn_code = CODE_FOR_$(log2$a2$)\",  "}, {"sha": "b9439a7dcd631a30b55797d99864e866bb16074e", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=a251102ea16801ffecedfd591603dbaf90a42337", "patch": "@@ -5274,6 +5274,8 @@ init_optabs (void)\n   sin_optab = init_optab (UNKNOWN);\n   cos_optab = init_optab (UNKNOWN);\n   exp_optab = init_optab (UNKNOWN);\n+  exp10_optab = init_optab (UNKNOWN);\n+  exp2_optab = init_optab (UNKNOWN);\n   log_optab = init_optab (UNKNOWN);\n   log10_optab = init_optab (UNKNOWN);\n   log2_optab = init_optab (UNKNOWN);"}, {"sha": "765e169cb4650b3b11c2afbddb7252b2db33a94f", "filename": "gcc/optabs.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=a251102ea16801ffecedfd591603dbaf90a42337", "patch": "@@ -154,6 +154,10 @@ enum optab_index\n   OTI_cos,\n   /* Exponential */\n   OTI_exp,\n+  /* Base-10 Exponential */\n+  OTI_exp10,\n+  /* Base-2 Exponential */\n+  OTI_exp2,\n   /* Natural Logarithm */\n   OTI_log,\n   /* Base-10 Logarithm */\n@@ -263,6 +267,8 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define sin_optab (optab_table[OTI_sin])\n #define cos_optab (optab_table[OTI_cos])\n #define exp_optab (optab_table[OTI_exp])\n+#define exp10_optab (optab_table[OTI_exp10])\n+#define exp2_optab (optab_table[OTI_exp2])\n #define log_optab (optab_table[OTI_log])\n #define log10_optab (optab_table[OTI_log10])\n #define log2_optab (optab_table[OTI_log2])"}, {"sha": "21b2f0583dda9d14b74aa25e42675835603d91fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a251102ea16801ffecedfd591603dbaf90a42337", "patch": "@@ -1,3 +1,7 @@\n+2004-03-10  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* gcc.dg/builtins-34.c: New test.\n+\n 2004-03-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-nonneg-1.c: New test."}, {"sha": "fb6062be14c3693f85c12af356a750bfdb5d2dbf", "filename": "gcc/testsuite/gcc.dg/builtins-34.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a251102ea16801ffecedfd591603dbaf90a42337/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c?ref=a251102ea16801ffecedfd591603dbaf90a42337", "patch": "@@ -0,0 +1,48 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   Check that exp10, exp10f, exp10l, exp2, exp2f and exp2l\n+   built-in functions compile.\n+\n+   Written by Uros Bizjak, 13th February 2004.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern double exp10(double);\n+extern double exp2(double);\n+extern float exp10f(float);\n+extern float exp2f(float);\n+extern long double exp10l(long double);\n+extern long double exp2l(long double);\n+\n+\n+double test1(double x)\n+{\n+  return exp10(x);\n+}\n+\n+double test2(double x)\n+{\n+  return exp2(x);\n+}\n+\n+float test1f(float x)\n+{\n+  return exp10f(x);\n+}\n+\n+float test2f(float x)\n+{\n+  return exp2f(x);\n+}\n+\n+long double test1l(long double x)\n+{\n+  return exp10l(x);\n+}\n+\n+long double test2l(long double x)\n+{\n+  return exp2l(x);\n+}\n+"}]}