{"sha": "5cacda56cbeea80e5c5257b6716c5761d3dbd0d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNhY2RhNTZjYmVlYTgwZTVjNTI1N2I2NzE2YzU3NjFkM2RiZDBkOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-08-12T12:12:51Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-08-12T12:12:51Z"}, "message": "Add test coverage for PR gcov-profile/35590\n\n\tPR gcov-profile/35590\n\t* gcc.dg/tree-prof/val-prof-7.c: Improve test coverage.\n\nFrom-SVN: r239412", "tree": {"sha": "dd788a3e08e89f257dfecc64c7e5059108376368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd788a3e08e89f257dfecc64c7e5059108376368"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cacda56cbeea80e5c5257b6716c5761d3dbd0d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cacda56cbeea80e5c5257b6716c5761d3dbd0d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cacda56cbeea80e5c5257b6716c5761d3dbd0d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cacda56cbeea80e5c5257b6716c5761d3dbd0d9/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "191816a36b90e5230ae285940f7ad1e225b66487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191816a36b90e5230ae285940f7ad1e225b66487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191816a36b90e5230ae285940f7ad1e225b66487"}], "stats": {"total": 91, "additions": 76, "deletions": 15}, "files": [{"sha": "b06e8fa67f68e87cc925b69b8c4eb40e3a0dfdfa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cacda56cbeea80e5c5257b6716c5761d3dbd0d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cacda56cbeea80e5c5257b6716c5761d3dbd0d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5cacda56cbeea80e5c5257b6716c5761d3dbd0d9", "patch": "@@ -1,3 +1,8 @@\n+2016-08-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/35590\n+\t* gcc.dg/tree-prof/val-prof-7.c: Improve test coverage.\n+\n 2016-08-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/72851"}, {"sha": "3e636aab8c7fa62f1bccd653991829bae384f866", "filename": "gcc/testsuite/gcc.dg/tree-prof/val-prof-7.c", "status": "modified", "additions": 71, "deletions": 15, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cacda56cbeea80e5c5257b6716c5761d3dbd0d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cacda56cbeea80e5c5257b6716c5761d3dbd0d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fval-prof-7.c?ref=5cacda56cbeea80e5c5257b6716c5761d3dbd0d9", "patch": "@@ -1,25 +1,81 @@\n /* { dg-options \"-O2 -fdump-ipa-profile -mtune=core2\" } */\n /* { dg-skip-if \"\" { ! { i?86-*-* x86_64-*-* } } { \"*\" } { \"\" } } */\n \n-extern void bzero (void *, __SIZE_TYPE__);\n+char *buffer1;\n+char *buffer2;\n \n-int foo(int len)\n-{\n-  char array[1000];\n-  bzero(array, len);\n-  return 0;\n+#define DEFINE_TEST(N) \\\n+__attribute__((noinline)) \\\n+void bzero_test_ ## N (int len) \\\n+{ \\\n+  __builtin_bzero (buffer1, len); \\\n+} \\\n+ \\\n+__attribute__((noinline)) \\\n+void memcpy_test_ ## N (int len) \\\n+{ \\\n+  __builtin_memcpy (buffer1, buffer2, len); \\\n+} \\\n+ \\\n+__attribute__((noinline)) \\\n+void mempcpy_test_ ## N (int len) \\\n+{ \\\n+  __builtin_mempcpy (buffer1, buffer2, len); \\\n+} \\\n+ \\\n+__attribute__((noinline)) \\\n+void memset_test_ ## N (int len) \\\n+{ \\\n+  __builtin_memset (buffer1, 'c', len); \\\n+} \\\n+ \\\n+void test_stringops_ ## N(int len) \\\n+{ \\\n+  bzero_test_ ## N (len); \\\n+  memcpy_test_## N (len); \\\n+  mempcpy_test_ ## N (len); \\\n+  memset_test_ ## N (len); \\\n+} \\\n+ \\\n+void test_stringops_with_values_ ## N (int common, int not_common) \\\n+{ \\\n+  int i; \\\n+  for (i = 0; i < 1000; i++) \\\n+    { \\\n+      if (i > 990) \\\n+\ttest_stringops_ ## N (not_common); \\\n+      else \\\n+\ttest_stringops_ ## N (common); \\\n+    } \\\n }\n \n+DEFINE_TEST(0);\n+DEFINE_TEST(1);\n+DEFINE_TEST(2);\n+\n int main() {\n-  int i;\n-  for (i = 0; i < 1000; i++)\n-    {\n-      if (i > 990)\n-\tfoo(16);\n-      else\n-\tfoo(8);\n-    }\n+  buffer1 = __builtin_malloc (1000);\n+  buffer2 = __builtin_malloc (1000);\n+\n+  test_stringops_with_values_0 (8, 111);\n+  test_stringops_with_values_1 (111, 111);\n+  test_stringops_with_values_2 (257, 111);\n+\n   return 0;\n }\n \n-/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 8 stringop transformation on bzero\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 8 stringop transformation on __builtin_bzero\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 111 stringop transformation on __builtin_bzero\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Single value 257 stringop transformation on __builtin_bzero\" 0 \"profile\" } } */\n+\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 8 stringop transformation on __builtin_memcpy\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 111 stringop transformation on __builtin_memcpy\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Single value 257 stringop transformation on __builtin_memcpy\" 0 \"profile\" } } */\n+\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 8 stringop transformation on __builtin_mempcpy\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 111 stringop transformation on __builtin_mempcpy\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Single value 257 stringop transformation on __builtin_mempcpy\" 0 \"profile\" } } */\n+\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 8 stringop transformation on __builtin_memset\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump \"Single value 111 stringop transformation on __builtin_memset\" \"profile\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times \"Single value 257 stringop transformation on __builtin_memset\" 0 \"profile\" } } */"}]}