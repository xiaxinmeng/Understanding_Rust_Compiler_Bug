{"sha": "b8898790358d9b98e4bf63ea2607c8dbd68bd382", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg4OTg3OTAzNThkOWI5OGU0YmY2M2VhMjYwN2M4ZGJkNjhiZDM4Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-07-08T17:36:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-07-08T17:36:01Z"}, "message": "elf64.h (TARGET_ASM_UNIQUE_SECTION): Delete.\n\n\t* config/mips/elf64.h (TARGET_ASM_UNIQUE_SECTION): Delete.\n\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n\t(SECTION_FUNCTION_TEMPLATE): Delete.\n\t* config/mips/elf.h: As for elf64.h.\n\t(ASM_OUTPUT_ALIGNED_BSS): Use named_section rather than sbss_section.\n\t* config/mips/linux.h: As for elf.h\n\t* config/mips/iris6gld.h (TARGET_ASM_UNIQUE_SECTION): Delete.\n\t* config/mips/iris6.h (EXTRA_SECTIONS): Delete.\n\t(EXTRA_SECTION_FUNCTIONS): Remove sdata_section.  Remove the handling\n\tof in_sdata from current_section_name and current_section_flags.\n\t* config/mips/iris6gld.h (TARGET_ASM_UNIQUE_SECTION): Delete.\n\t* config/mips/mips.h (sdata_section, sbss_section): Remove prototypes.\n\t(MASK_GP_OPT, TARGET_GP_OPT): Delete.\n\t(MASK_NO_FUSED_MADD): Use MASK_GP_OPT's old value.\n\t(TARGET_SWITCHES): Neuter gpOPT, gpopt, no-gpOPT and no-gpopt.\n\t(SMALL_DATA_SECTION, EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Remove.\n\t* config/mips/mips.c (TARGET_IN_SMALL_DATA_P): Override.\n\t(TARGET_SECTION_TYPE_FLAGS): Override if TARGET_IRIX6.\n\t(mips_classify_symbol): Use SYMBOL_REF_SMALL_P.\n\t(override_options): Remove setting of MASK_GPOPT.\n\t(mips_output_external): Use mips_in_small_data_p to check whether a\n\tsymbol needs an .extern directive.  Don't emit such directives for\n\tTARGET_EXPLICIT_RELOCS.\n\t(mips_declare_object): Update accordingly.\n\t(mips_select_rtx_section): Call named_section rather than\n\tSMALL_DATA_SECTION.\n\t(mips_select_section): Use default_elf_section_section for everything\n\texcept .text string constants.\n\t(mips_in_small_data_p): New function.\n\t(mips_encode_section_info): Remove small data handling.\n\t(mips_unique_section): Delete.\n\t(iris6_section_type_flags): New function.\n\t* doc/tm.texi: Remove documentation of -mgpopt and -mhalf-pic.\n\nFrom-SVN: r69090", "tree": {"sha": "ac42d688ed30658893053985fd99044428b926de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac42d688ed30658893053985fd99044428b926de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8898790358d9b98e4bf63ea2607c8dbd68bd382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8898790358d9b98e4bf63ea2607c8dbd68bd382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8898790358d9b98e4bf63ea2607c8dbd68bd382", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8898790358d9b98e4bf63ea2607c8dbd68bd382/comments", "author": null, "committer": null, "parents": [{"sha": "c5ffd36c48799273b69c8e79843881d12d2896b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ffd36c48799273b69c8e79843881d12d2896b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ffd36c48799273b69c8e79843881d12d2896b3"}], "stats": {"total": 592, "additions": 227, "deletions": 365}, "files": [{"sha": "92dfa84ff4494bc9eae82a06c96fd7c49296913c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -1,3 +1,39 @@\n+2003-07-08  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/elf64.h (TARGET_ASM_UNIQUE_SECTION): Delete.\n+\t(EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Delete.\n+\t(SECTION_FUNCTION_TEMPLATE): Delete.\n+\t* config/mips/elf.h: As for elf64.h.\n+\t(ASM_OUTPUT_ALIGNED_BSS): Use named_section rather than sbss_section.\n+\t* config/mips/linux.h: As for elf.h\n+\t* config/mips/iris6gld.h (TARGET_ASM_UNIQUE_SECTION): Delete.\n+\t* config/mips/iris6.h (EXTRA_SECTIONS): Delete.\n+\t(EXTRA_SECTION_FUNCTIONS): Remove sdata_section.  Remove the handling\n+\tof in_sdata from current_section_name and current_section_flags.\n+\t* config/mips/iris6gld.h (TARGET_ASM_UNIQUE_SECTION): Delete.\n+\t* config/mips/mips.h (sdata_section, sbss_section): Remove prototypes.\n+\t(MASK_GP_OPT, TARGET_GP_OPT): Delete.\n+\t(MASK_NO_FUSED_MADD): Use MASK_GP_OPT's old value.\n+\t(TARGET_SWITCHES): Neuter gpOPT, gpopt, no-gpOPT and no-gpopt.\n+\t(SMALL_DATA_SECTION, EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Remove.\n+\t* config/mips/mips.c (TARGET_IN_SMALL_DATA_P): Override.\n+\t(TARGET_SECTION_TYPE_FLAGS): Override if TARGET_IRIX6.\n+\t(mips_classify_symbol): Use SYMBOL_REF_SMALL_P.\n+\t(override_options): Remove setting of MASK_GPOPT.\n+\t(mips_output_external): Use mips_in_small_data_p to check whether a\n+\tsymbol needs an .extern directive.  Don't emit such directives for\n+\tTARGET_EXPLICIT_RELOCS.\n+\t(mips_declare_object): Update accordingly.\n+\t(mips_select_rtx_section): Call named_section rather than\n+\tSMALL_DATA_SECTION.\n+\t(mips_select_section): Use default_elf_section_section for everything\n+\texcept .text string constants.\n+\t(mips_in_small_data_p): New function.\n+\t(mips_encode_section_info): Remove small data handling.\n+\t(mips_unique_section): Delete.\n+\t(iris6_section_type_flags): New function.\n+\t* doc/tm.texi: Remove documentation of -mgpopt and -mhalf-pic.\n+\n 2003-07-08  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR Target/11453"}, {"sha": "c325410d6040c452515f872103afb7c84c5d3842", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -94,7 +94,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (SIZE > 0 && SIZE <= (unsigned HOST_WIDE_INT)mips_section_threshold)\\\n-    sbss_section ();\t\t\t\t\t\t\t\\\n+    named_section (0, \".sbss\", 0);\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     bss_section ();\t\t\t\t\t\t\t\\\n   ASM_OUTPUT_ALIGN (FILE, floor_log2 (ALIGN / BITS_PER_UNIT));\t\t\\\n@@ -183,28 +183,6 @@ do {\t\t\t\t\t\t\t\t\t \\\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n \n-#define TARGET_ASM_UNIQUE_SECTION  mips_unique_section\n-\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-#undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_sbss\n-\n-#undef  EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS                                         \\\n-  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\n-\n-#define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)                               \\\n-void FN ()                                                            \\\n-{                                                                     \\\n-  if (in_section != ENUM)                                             \\\n-    {                                                                 \\\n-      fprintf (asm_out_file, \"%s\\n\", OP);                             \\\n-      in_section = ENUM;                                              \\\n-    }                                                                 \\\n-}\n-\n /* On elf, we *do* have support for the .init and .fini sections, and we\n    can put stuff in there to be executed before and after `main'.  We let\n    crtstuff.c and other files know this by defining the following symbols."}, {"sha": "4d672774c4f330c1dd6159841a806a730ca7f4e3", "filename": "gcc/config/mips/elf64.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Felf64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Felf64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf64.h?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -142,27 +142,6 @@ do {\t\t\t\t\t\t\t\t\t \\\n \n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n \n-#define TARGET_ASM_UNIQUE_SECTION mips_unique_section\n-\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS                                         \\\n-  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP)\n-\n-#define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)                               \\\n-void FN ()                                                            \\\n-{                                                                     \\\n-  if (in_section != ENUM)                                             \\\n-    {                                                                 \\\n-      fprintf (asm_out_file, \"%s\\n\", OP);                             \\\n-      in_section = ENUM;                                              \\\n-    }                                                                 \\\n-}\n-\n /* On elf, we *do* have support for the .init and .fini sections, and we\n    can put stuff in there to be executed before and after `main'.  We let\n    crtstuff.c and other files know this by defining the following symbols."}, {"sha": "0bfc44bd1b54f3dba2a1ddf18f305dfe153d4b8e", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -281,30 +281,11 @@ Boston, MA 02111-1307, USA.  */\n    ? READONLY_DATA_SECTION_ASM_OP_64\t\t\\\n    : READONLY_DATA_SECTION_ASM_OP_32)\n \n-/* A default list of other sections which we might be \"in\" at any given\n-   time.  For targets that use additional sections (e.g. .tdesc) you\n-   should override this definition in the target-specific file which\n-   includes this file.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata\n-\n-/* A default list of extra section function definitions.  For targets\n-   that use additional sections (e.g. .tdesc) you should override this\n-   definition in the target-specific file which includes this file.  */\n+/* Define functions to read the name and flags of the current section.\n+   They are used by iris6_asm_output_align.  */\n \n #undef EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-sdata_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_sdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", SDATA_SECTION_ASM_OP);\t\t\\\n-      in_section = in_sdata;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n const char *\t\t\t\t\t\t\t\t\\\n current_section_name ()\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n@@ -313,7 +294,6 @@ current_section_name ()\t\t\t\t\t\t\t\\\n     case no_section:\treturn NULL;\t\t\t\t\t\\\n     case in_text:\treturn \".text\";\t\t\t\t\t\\\n     case in_data:\treturn \".data\";\t\t\t\t\t\\\n-    case in_sdata:\treturn \".sdata\";\t\t\t\t\\\n     case in_bss:\treturn \".bss\";\t\t\t\t\t\\\n     case in_readonly_data:\t\t\t\t\t\t\\\n       if (mips_abi != ABI_32 && mips_abi != ABI_O64)\t\t\t\\\n@@ -334,7 +314,6 @@ current_section_flags ()\t\t\t\t\t\t\\\n     case no_section:\treturn 0;\t\t\t\t\t\\\n     case in_text:\treturn SECTION_CODE;\t\t\t\t\\\n     case in_data:\treturn SECTION_WRITE;\t\t\t\t\\\n-    case in_sdata:\treturn SECTION_WRITE | SECTION_SMALL;\t\t\\\n     case in_bss:\treturn SECTION_WRITE | SECTION_BSS;\t\t\\\n     case in_readonly_data: return 0;\t\t\t\t\t\\\n     case in_named:\treturn get_named_section_flags (in_named_name);\t\\"}, {"sha": "d08293ef3c7d2dfe7d68ddffd426cded5900d610", "filename": "gcc/config/mips/iris6gld.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Firis6gld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Firis6gld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6gld.h?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -49,4 +49,3 @@ Boston, MA 02111-1307, USA.  */\n \n /* The GNU linker supports one-only sections.  */\n #define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-#define TARGET_ASM_UNIQUE_SECTION  mips_unique_section"}, {"sha": "054f5f1a298bde0372591e4a81e6c1569a58a0bc", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -47,7 +47,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n do {\t\t\t\t\t\t\t\t\\\n   if (SIZE > 0 && (long)(SIZE) <= mips_section_threshold)\t\\\n-    sbss_section ();\t\t\t\t\t\t\\\n+    named_section (0, \".sbss\", 0);\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\\\n     bss_section ();\t\t\t\t\t\t\\\n   ASM_OUTPUT_ALIGN (FILE, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\\n@@ -78,28 +78,6 @@ do {\t\t\t\t\t\t\t\t\\\n     mips_declare_object (FILE, NAME, \"\", \":\\n\", 0);\t\t\t\\\n   } while (0)\n \n-#define TARGET_ASM_UNIQUE_SECTION  mips_unique_section\n-\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_sbss\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS                                         \\\n-  SECTION_FUNCTION_TEMPLATE(sdata_section, in_sdata, SDATA_SECTION_ASM_OP) \\\n-  SECTION_FUNCTION_TEMPLATE(sbss_section, in_sbss, SBSS_SECTION_ASM_OP)\n-\n-#define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)\t\t\t\\\n-void FN ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != ENUM)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", OP);\t\t\t\\\n-      in_section = ENUM;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n #undef TARGET_VERSION\n #if TARGET_ENDIAN_DEFAULT == 0\n #define TARGET_VERSION fprintf (stderr, \" (MIPSel GNU/Linux with ELF)\");"}, {"sha": "eeef802ab3c5a176744676e9a2a74ce1d38ffcd7", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 112, "deletions": 206, "changes": 318, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -282,20 +282,21 @@ static hashval_t iris_section_align_entry_hash\tPARAMS ((const void *));\n static int iris6_section_align_1\t\tPARAMS ((void **, void *));\n static void iris6_file_start\t\t\tPARAMS ((void));\n static void iris6_file_end\t\t\tPARAMS ((void));\n+static unsigned int iris6_section_type_flags\tPARAMS ((tree, const char *,\n+\t\t\t\t\t\t\t int));\n #endif\n static int mips_adjust_cost\t\t\tPARAMS ((rtx, rtx, rtx, int));\n static int mips_issue_rate\t\t\tPARAMS ((void));\n \n static struct machine_function * mips_init_machine_status PARAMS ((void));\n static void mips_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT))\n \tATTRIBUTE_UNUSED;\n-static void mips_unique_section\t\t\tPARAMS ((tree, int))\n-\tATTRIBUTE_UNUSED;\n static void mips_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n static int mips_use_dfa_pipeline_interface      PARAMS ((void));\n static bool mips_rtx_costs\t\t\tPARAMS ((rtx, int, int, int *));\n static int mips_address_cost                    PARAMS ((rtx));\n+static bool mips_in_small_data_p\t\tPARAMS ((tree));\n static void mips_encode_section_info            PARAMS ((tree, rtx, int));\n static void mips_file_start\t\t\tPARAMS ((void));\n static void mips_file_end\t\t\tPARAMS ((void));\n@@ -888,6 +889,8 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n \n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO mips_encode_section_info\n+#undef TARGET_IN_SMALL_DATA_P\n+#define TARGET_IN_SMALL_DATA_P mips_in_small_data_p\n \n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG mips_reorg\n@@ -904,6 +907,11 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n+#ifdef TARGET_IRIX6\n+#undef TARGET_SECTION_TYPE_FLAGS\n+#define TARGET_SECTION_TYPE_FLAGS iris6_section_type_flags\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* If X is one of the constants described by mips_constant_type,\n@@ -995,10 +1003,13 @@ mips_classify_symbol (x)\n \treturn SYMBOL_GOT_LOCAL;\n     }\n \n+  if (SYMBOL_REF_SMALL_P (x))\n+    return SYMBOL_SMALL_DATA;\n+\n   if (TARGET_ABICALLS)\n     return (SYMBOL_REF_FLAG (x) ? SYMBOL_GOT_LOCAL : SYMBOL_GOT_GLOBAL);\n \n-  return (SYMBOL_REF_FLAG (x) ? SYMBOL_SMALL_DATA : SYMBOL_GENERAL);\n+  return SYMBOL_GENERAL;\n }\n \n \n@@ -4852,11 +4863,6 @@ override_options ()\n \n   mips_section_threshold = g_switch_set ? g_switch_value : MIPS_DEFAULT_GVALUE;\n \n-  if (mips_section_threshold <= 0)\n-    target_flags &= ~MASK_GPOPT;\n-  else if (optimize)\n-    target_flags |= MASK_GPOPT;\n-\n   /* Interpret -mabi.  */\n   mips_abi = MIPS_ABI_DEFAULT;\n   if (mips_abi_string != 0)\n@@ -5057,10 +5063,7 @@ override_options ()\n      do this, it was very invasive and fragile.  It no longer seems\n      worth the effort.  */\n   if (!TARGET_EXPLICIT_RELOCS && !TARGET_GAS)\n-    {\n-      mips_section_threshold = 0;\n-      target_flags &= ~MASK_GPOPT;\n-    }\n+    mips_section_threshold = 0;\n \n   /* -membedded-pic is a form of PIC code suitable for embedded\n      systems.  All calls are made using PC relative addressing, and\n@@ -5906,16 +5909,13 @@ mips_assemble_integer (x, size, aligned_p)\n   return default_assemble_integer (x, size, aligned_p);\n }\n \f\n-/* If optimizing for the global pointer, keep track of all of the externs, so\n-   that at the end of the file, we can emit the appropriate .extern\n-   declaration for them, before writing out the text section.  We assume all\n-   names passed to us are in the permanent obstack, so they will be valid at\n-   the end of the compilation.\n+/* When using assembler macros, keep track of all of small-data externs\n+   so that mips_file_end can emit the appropriate declarations for them.\n \n-   If we have -G 0, or the extern size is unknown, or the object is in a user\n-   specified section that is not .sbss/.sdata, don't bother emitting the\n-   .externs.  In the case of user specified sections this behavior is\n-   required as otherwise GAS will think the object lives in .sbss/.sdata.  */\n+   In most cases it would be safe (though pointless) to emit .externs\n+   for other symbols too.  One exception is when an object is within\n+   the -G limit but declared by the user to be in a section other\n+   than .sbss or .sdata.  */\n \n int\n mips_output_external (file, decl, name)\n@@ -5924,21 +5924,13 @@ mips_output_external (file, decl, name)\n      const char *name;\n {\n   register struct extern_list *p;\n-  int len;\n-  tree section_name;\n \n-  if (TARGET_GP_OPT\n-      && TREE_CODE (decl) != FUNCTION_DECL\n-      && !DECL_COMDAT (decl)\n-      && (len = int_size_in_bytes (TREE_TYPE (decl))) > 0\n-      && ((section_name = DECL_SECTION_NAME (decl)) == NULL\n-\t  || strcmp (TREE_STRING_POINTER (section_name), \".sbss\") == 0\n-\t  || strcmp (TREE_STRING_POINTER (section_name), \".sdata\") == 0))\n+  if (!TARGET_EXPLICIT_RELOCS && mips_in_small_data_p (decl))\n     {\n       p = (struct extern_list *) ggc_alloc (sizeof (struct extern_list));\n       p->next = extern_head;\n       p->name = name;\n-      p->size = len;\n+      p->size = int_size_in_bytes (TREE_TYPE (decl));\n       extern_head = p;\n     }\n \n@@ -6250,8 +6242,9 @@ mips_file_end ()\n     }\n }\n \n-/* Emit either a label, .comm, or .lcomm directive, and mark that the symbol\n-   is used, so that we don't emit an .extern for it in mips_file_end.  */\n+/* Emit either a label, .comm, or .lcomm directive.  When using assembler\n+   macros, mark the symbol as written so that mips_file_end won't emit an\n+   .extern for it.  */\n \n void\n mips_declare_object (stream, name, init_string, final_string, size)\n@@ -6265,7 +6258,7 @@ mips_declare_object (stream, name, init_string, final_string, size)\n   assemble_name (stream, name);\n   fprintf (stream, final_string, size);\t/* \":\\n\", \",%u\\n\", \",%u\\n\" */\n \n-  if (TARGET_GP_OPT)\n+  if (!TARGET_EXPLICIT_RELOCS)\n     {\n       tree name_tree = get_identifier (name);\n       TREE_ASM_WRITTEN (name_tree) = 1;\n@@ -7812,11 +7805,11 @@ mips_select_rtx_section (mode, x, align)\n \n       if (GET_MODE_SIZE (mode) <= (unsigned) mips_section_threshold\n \t  && mips_section_threshold > 0)\n-\tSMALL_DATA_SECTION ();\n+\tnamed_section (0, \".sdata\", 0);\n       else if (flag_pic && symbolic_expression_p (x))\n \t{\n \t  if (targetm.have_named_sections)\n-\t    named_section (NULL_TREE, \".data.rel.ro\", 3);\n+\t    named_section (0, \".data.rel.ro\", 3);\n \t  else\n \t    data_section ();\n \t}\n@@ -7826,18 +7819,14 @@ mips_select_rtx_section (mode, x, align)\n }\n \n /* Choose the section to use for DECL.  RELOC is true if its value contains\n-   any relocatable expression.\n-\n-   ??? This would be fixed by implementing targetm.is_small_data_p.  */\n+   any relocatable expression.  */\n \n static void\n mips_select_section (decl, reloc, align)\n      tree decl;\n      int reloc;\n      unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n {\n-  int size = int_size_in_bytes (TREE_TYPE (decl));\n-\n   if ((TARGET_EMBEDDED_PIC || TARGET_MIPS16)\n       && TREE_CODE (decl) == STRING_CST\n       && !flag_writable_strings)\n@@ -7846,54 +7835,66 @@ mips_select_section (decl, reloc, align)\n        For mips16 code, put strings in the text section so that a PC\n        relative load instruction can be used to get their address.  */\n     text_section ();\n-  else if (TARGET_EMBEDDED_DATA)\n+  else\n+    default_elf_select_section (decl, reloc, align);\n+}\n+\n+\n+/* Implement TARGET_IN_SMALL_DATA_P.  Return true if it would be safe to\n+   access DECL using %gp_rel(...)($gp).  */\n+\n+static bool\n+mips_in_small_data_p (decl)\n+     tree decl;\n+{\n+  HOST_WIDE_INT size;\n+\n+  if (TREE_CODE (decl) == STRING_CST || TREE_CODE (decl) == FUNCTION_DECL)\n+    return false;\n+\n+  if (TREE_CODE (decl) == VAR_DECL && DECL_SECTION_NAME (decl) != 0)\n     {\n-      /* For embedded applications, always put an object in read-only data\n-\t if possible, in order to reduce RAM usage.  */\n-\n-      if (((TREE_CODE (decl) == VAR_DECL\n-\t    && TREE_READONLY (decl) && !TREE_SIDE_EFFECTS (decl)\n-\t    && DECL_INITIAL (decl)\n-\t    && (DECL_INITIAL (decl) == error_mark_node\n-\t\t|| TREE_CONSTANT (DECL_INITIAL (decl))))\n-\t   /* Deal with calls from output_constant_def_contents.  */\n-\t   || (TREE_CODE (decl) != VAR_DECL\n-\t       && (TREE_CODE (decl) != STRING_CST\n-\t\t   || !flag_writable_strings)))\n-\t  && ! (flag_pic && reloc))\n-\treadonly_data_section ();\n-      else if (size > 0 && size <= mips_section_threshold)\n-\tSMALL_DATA_SECTION ();\n-      else\n-\tdata_section ();\n+      const char *name;\n+\n+      /* Reject anything that isn't in a known small-data section.  */\n+      name = TREE_STRING_POINTER (DECL_SECTION_NAME (decl));\n+      if (strcmp (name, \".sdata\") != 0 && strcmp (name, \".sbss\") != 0)\n+\treturn false;\n+\n+      /* If a symbol is defined externally, the assembler will use the\n+\t usual -G rules when deciding how to implement macros.  */\n+      if (TARGET_EXPLICIT_RELOCS || !DECL_EXTERNAL (decl))\n+\treturn true;\n     }\n-  else\n+  else if (TARGET_EMBEDDED_DATA)\n     {\n-      /* For hosted applications, always put an object in small data if\n-\t possible, as this gives the best performance.  */\n+      /* Don't put constants into the small data section: we want them\n+\t to be in ROM rather than RAM.  */\n+      if (TREE_CODE (decl) != VAR_DECL)\n+\treturn false;\n \n-      if (size > 0 && size <= mips_section_threshold)\n-\tSMALL_DATA_SECTION ();\n-      else if (((TREE_CODE (decl) == VAR_DECL\n-\t\t && TREE_READONLY (decl) && !TREE_SIDE_EFFECTS (decl)\n-\t\t && DECL_INITIAL (decl)\n-\t\t && (DECL_INITIAL (decl) == error_mark_node\n-\t\t     || TREE_CONSTANT (DECL_INITIAL (decl))))\n-\t\t/* Deal with calls from output_constant_def_contents.  */\n-\t\t|| (TREE_CODE (decl) != VAR_DECL\n-\t\t    && (TREE_CODE (decl) != STRING_CST\n-\t\t\t|| !flag_writable_strings)))\n-\t       && ! (flag_pic && reloc))\n-\treadonly_data_section ();\n-      else\n-\tdata_section ();\n+      if (TREE_READONLY (decl)\n+\t  && !TREE_SIDE_EFFECTS (decl)\n+\t  && (!DECL_INITIAL (decl) || TREE_CONSTANT (DECL_INITIAL (decl))))\n+\treturn false;\n     }\n+  else if (TARGET_MIPS16)\n+    {\n+      /* Alhough it seems strange to have separate rules for -mips16,\n+\t this behaviour is long-standing.  */\n+      if (TREE_PUBLIC (decl)\n+\t  && (DECL_COMMON (decl)\n+\t      || DECL_ONE_ONLY (decl)\n+\t      || DECL_WEAK (decl)))\n+\treturn false;\n+    }\n+\n+  size = int_size_in_bytes (TREE_TYPE (decl));\n+  return (size > 0 && size <= mips_section_threshold);\n }\n \n-/* When optimizing for the $gp pointer, SYMBOL_REF_FLAG is set for all\n-   small objects.\n \n-   When generating embedded PIC code, SYMBOL_REF_FLAG is set for\n+/* When generating embedded PIC code, SYMBOL_REF_FLAG is set for\n    symbols which are not in the .text section.\n \n    When generating mips16 code, SYMBOL_REF_FLAG is set for string\n@@ -7902,20 +7903,8 @@ mips_select_section (decl, reloc, align)\n    whether we need to split the constant table, and need not be\n    precisely correct.\n \n-   When not mips16 code nor embedded PIC, if a symbol is in a\n-   gp addressable section, SYMBOL_REF_FLAG is set prevent gcc from\n-   splitting the reference so that gas can generate a gp relative\n-   reference.\n-\n-   When TARGET_EMBEDDED_DATA is set, we assume that all const\n-   variables will be stored in ROM, which is too far from %gp to use\n-   %gprel addressing.  Note that (1) we include \"extern const\"\n-   variables in this, which mips_select_section doesn't, and (2) we\n-   can't always tell if they're really const (they might be const C++\n-   objects with non-const constructors), so we err on the side of\n-   caution and won't use %gprel anyway (otherwise we'd have to defer\n-   this decision to the linker/loader).  The handling of extern consts\n-   is why the DECL_INITIAL macros differ from mips_select_section.  */\n+   When generating -mabicalls code, SYMBOL_REF_FLAG is set if we\n+   should treat the symbol as SYMBOL_GOT_LOCAL.  */\n \n static void\n mips_encode_section_info (decl, rtl, first)\n@@ -7957,16 +7946,7 @@ mips_encode_section_info (decl, rtl, first)\n         }\n     }\n \n-  if (TARGET_EMBEDDED_DATA\n-      && (TREE_CODE (decl) == VAR_DECL\n-          && TREE_READONLY (decl) && !TREE_SIDE_EFFECTS (decl))\n-      && (!DECL_INITIAL (decl)\n-          || TREE_CONSTANT (DECL_INITIAL (decl))))\n-    {\n-      SYMBOL_REF_FLAG (symbol) = 0;\n-    }\n-\n-  else if (TARGET_EMBEDDED_PIC)\n+  if (TARGET_EMBEDDED_PIC)\n     {\n       if (TREE_CODE (decl) == VAR_DECL)\n         SYMBOL_REF_FLAG (symbol) = 1;\n@@ -8008,32 +7988,7 @@ mips_encode_section_info (decl, rtl, first)\n         SYMBOL_REF_FLAG (symbol) = 1;\n     }\n \n-  else if (TREE_CODE (decl) == VAR_DECL\n-           && DECL_SECTION_NAME (decl) != NULL_TREE\n-           && (0 == strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n-                            \".sdata\")\n-               || 0 == strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n-                               \".sbss\")))\n-    {\n-      SYMBOL_REF_FLAG (symbol) = 1;\n-    }\n-\n-  /* We can not perform GP optimizations on variables which are in\n-       specific sections, except for .sdata and .sbss which are\n-       handled above.  */\n-  else if (TARGET_GP_OPT && TREE_CODE (decl) == VAR_DECL\n-           && DECL_SECTION_NAME (decl) == NULL_TREE\n-           && ! (TARGET_MIPS16 && TREE_PUBLIC (decl)\n-                 && (DECL_COMMON (decl)\n-                     || DECL_ONE_ONLY (decl)\n-                     || DECL_WEAK (decl))))\n-    {\n-      int size = int_size_in_bytes (TREE_TYPE (decl));\n-\n-      if (size > 0 && size <= mips_section_threshold)\n-        SYMBOL_REF_FLAG (symbol) = 1;\n-    }\n-\n+  default_encode_section_info (decl, rtl, first);\n }\n \n \n@@ -10243,81 +10198,6 @@ mips_adjust_cost (insn, link, dep, cost)\n   return cost;\n }\n \n-/* ??? This could be replaced with the default elf version if\n-   TARGET_IS_SMALL_DATA_P is set properly.  */\n-\n-static void\n-mips_unique_section (decl, reloc)\n-     tree decl;\n-     int reloc;\n-{\n-  int len, size, sec;\n-  const char *name, *prefix;\n-  char *string;\n-  static const char *const prefixes[4][2] = {\n-    { \".text.\", \".gnu.linkonce.t.\" },\n-    { \".rodata.\", \".gnu.linkonce.r.\" },\n-    { \".data.\", \".gnu.linkonce.d.\" },\n-    { \".sdata.\", \".gnu.linkonce.s.\" }\n-  };\n-\n-  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-  name = (* targetm.strip_name_encoding) (name);\n-  size = int_size_in_bytes (TREE_TYPE (decl));\n-\n-  /* Determine the base section we are interested in:\n-     0=text, 1=rodata, 2=data, 3=sdata, [4=bss].  */\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n-    sec = 0;\n-  else if (DECL_INITIAL (decl) == 0\n-           || DECL_INITIAL (decl) == error_mark_node)\n-    sec = 2;\n-  else if ((TARGET_EMBEDDED_PIC || TARGET_MIPS16)\n-      && TREE_CODE (decl) == STRING_CST\n-      && !flag_writable_strings)\n-    {\n-      /* For embedded position independent code, put constant\n-\t strings in the text section, because the data section\n-\t is limited to 64K in size.  For mips16 code, put\n-\t strings in the text section so that a PC relative load\n-\t instruction can be used to get their address.  */\n-      sec = 0;\n-    }\n-  else if (TARGET_EMBEDDED_DATA)\n-    {\n-      /* For embedded applications, always put an object in\n-\t read-only data if possible, in order to reduce RAM\n-\t usage.  */\n-\n-      if (decl_readonly_section (decl, reloc))\n-\tsec = 1;\n-      else if (size > 0 && size <= mips_section_threshold)\n-\tsec = 3;\n-      else\n-\tsec = 2;\n-    }\n-  else\n-    {\n-      /* For hosted applications, always put an object in\n-\t small data if possible, as this gives the best\n-\t performance.  */\n-\n-      if (size > 0 && size <= mips_section_threshold)\n-\tsec = 3;\n-      else if (decl_readonly_section (decl, reloc))\n-\tsec = 1;\n-      else\n-\tsec = 2;\n-    }\n-\n-  prefix = prefixes[sec][DECL_ONE_ONLY (decl)];\n-  len = strlen (name) + strlen (prefix);\n-  string = alloca (len + 1);\n-  sprintf (string, \"%s%s\", prefix, name);\n-\n-  DECL_SECTION_NAME (decl) = build_string (len, string);\n-}\n-\n unsigned int\n mips_hard_regno_nregs (regno, mode)\n     int regno;\n@@ -10585,6 +10465,32 @@ iris6_file_end ()\n \n   mips_file_end ();\n }\n+\n+\n+/* Implement TARGET_SECTION_TYPE_FLAGS.  Make sure that .sdata and\n+   .sbss sections get the SECTION_SMALL flag: this isn't set by the\n+   default code.  */\n+\n+static unsigned int\n+iris6_section_type_flags (decl, section, relocs_p)\n+     tree decl;\n+     const char *section;\n+     int relocs_p;\n+{\n+  unsigned int flags;\n+\n+  flags = default_section_type_flags (decl, section, relocs_p);\n+\n+  if (strcmp (section, \".sdata\") == 0\n+      || strcmp (section, \".sbss\") == 0\n+      || strncmp (section, \".gnu.linkonce.s.\", 16) == 0\n+      || strncmp (section, \".gnu.linkonce.sb.\", 17) == 0)\n+    flags |= SECTION_SMALL;\n+\n+  return flags;\n+}\n+\n+\n #endif /* TARGET_IRIX6 */\n \n #include \"gt-mips.h\""}, {"sha": "2193f98e04b7c1c55f68f74493a1d75ab60d7018", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 10, "deletions": 47, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -148,10 +148,6 @@ extern const struct mips_cpu_info mips_cpu_info_table[];\n extern const struct mips_cpu_info *mips_arch_info;\n extern const struct mips_cpu_info *mips_tune_info;\n \n-/* Functions to change what output section we are using.  */\n-extern void\t\tsdata_section PARAMS ((void));\n-extern void\t\tsbss_section PARAMS ((void));\n-\n /* Macros to silence warnings about numbers being signed in traditional\n    C and unsigned in ISO C when compiled on 32-bit hosts.  */\n \n@@ -168,7 +164,8 @@ extern void\t\tsbss_section PARAMS ((void));\n #define MASK_INT64\t   0x00000001\t/* ints are 64 bits */\n #define MASK_LONG64\t   0x00000002\t/* longs are 64 bits */\n #define MASK_SPLIT_ADDR\t   0x00000004\t/* Address splitting is enabled.  */\n-#define MASK_GPOPT\t   0x00000008\t/* Optimize for global pointer */\n+#define MASK_NO_FUSED_MADD 0x00000008   /* Don't generate floating point\n+\t\t\t\t\t   multiply-add operations.  */\n #define MASK_GAS\t   0x00000010\t/* Gas used instead of MIPS as */\n #define MASK_NAME_REGS\t   0x00000020\t/* Use MIPS s/w reg name convention */\n #define MASK_EXPLICIT_RELOCS 0x00000040 /* Use relocation operators.  */\n@@ -193,8 +190,6 @@ extern void\t\tsbss_section PARAMS ((void));\n #define MASK_UNINIT_CONST_IN_RODATA \\\n \t\t\t   0x00800000\t/* Store uninitialized\n \t\t\t\t\t   consts in rodata */\n-#define MASK_NO_FUSED_MADD 0x01000000   /* Don't generate floating point\n-\t\t\t\t\t   multiply-add operations.  */\n \n \t\t\t\t\t/* Debug switches, not documented */\n #define MASK_DEBUG\t0\t\t/* unused */\n@@ -237,9 +232,6 @@ extern void\t\tsbss_section PARAMS ((void));\n \t\t\t\t\t/* Reg. Naming in .s ($21 vs. $a0) */\n #define TARGET_NAME_REGS\t(target_flags & MASK_NAME_REGS)\n \n-\t\t\t\t\t/* Optimize for Sdata/Sbss */\n-#define TARGET_GP_OPT\t\t(target_flags & MASK_GPOPT)\n-\n \t\t\t\t\t/* call memcpy instead of inline code */\n #define TARGET_MEMCPY\t\t(target_flags & MASK_MEMCPY)\n \n@@ -532,14 +524,14 @@ extern void\t\tsbss_section PARAMS ((void));\n      N_(\"Use symbolic register names\")},\t\t\t\t\\\n   {\"no-rnames\",\t\t -MASK_NAME_REGS,\t\t\t\t\\\n      N_(\"Don't use symbolic register names\")},\t\t\t\t\\\n-  {\"gpOPT\",\t\t  MASK_GPOPT,\t\t\t\t\t\\\n-     N_(\"Use GP relative sdata/sbss sections\")},\t\t\t\\\n-  {\"gpopt\",\t\t  MASK_GPOPT,\t\t\t\t\t\\\n-     N_(\"Use GP relative sdata/sbss sections\")},\t\t\t\\\n-  {\"no-gpOPT\",\t\t -MASK_GPOPT,\t\t\t\t\t\\\n-     N_(\"Don't use GP relative sdata/sbss sections\")},\t\t\t\\\n-  {\"no-gpopt\",\t\t -MASK_GPOPT,\t\t\t\t\t\\\n-     N_(\"Don't use GP relative sdata/sbss sections\")},\t\t\t\\\n+  {\"gpOPT\",\t\t  0,\t\t\t\t\t\t\\\n+     N_(\"Use GP relative sdata/sbss sections (now ignored)\")},\t\t\\\n+  {\"gpopt\",\t\t  0,\t\t\t\t\t\t\\\n+     N_(\"Use GP relative sdata/sbss sections (now ignored)\")},\t\t\\\n+  {\"no-gpOPT\",\t\t  0,\t\t\t\t\t\\\n+     N_(\"Don't use GP relative sdata/sbss sections (now ignored)\")},\t\\\n+  {\"no-gpopt\",\t\t  0,\t\t\t\t\t\\\n+     N_(\"Don't use GP relative sdata/sbss sections (now ignored)\")},\t\\\n   {\"stats\",\t\t  0,\t\t\t\t\t\t\\\n      N_(\"Output compiler statistics (now ignored)\")},\t\t\t\\\n   {\"no-stats\",\t\t  0,\t\t\t\t\t\t\\\n@@ -3863,35 +3855,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef READONLY_DATA_SECTION_ASM_OP\n #define READONLY_DATA_SECTION_ASM_OP\t\"\\t.rdata\"\t/* read-only data */\n \n-#define SMALL_DATA_SECTION\tsdata_section\n-\n-/* What other sections we support other than the normal .data/.text.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata\n-\n-/* Define the additional functions to select our additional sections.  */\n-\n-/* on the MIPS it is not a good idea to put constants in the text\n-   section, since this defeats the sdata/data mechanism. This is\n-   especially true when -O is used. In this case an effort is made to\n-   address with faster (gp) register relative addressing, which can\n-   only get at sdata and sbss items (there is no stext !!)  However,\n-   if the constant is too large for sdata, and it's readonly, it\n-   will go into the .rdata section.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-sdata_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_sdata)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", SDATA_SECTION_ASM_OP);\t\t\\\n-      in_section = in_sdata;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n /* Given a decl node or constant node, choose the section to output it in\n    and select that section.  */\n "}, {"sha": "2f612282451cf53d4654f11ff20ac95ed30b8220", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -465,14 +465,13 @@ in the following sections.\n @gccoptlist{-mabicalls  -march=@var{cpu-type}  -mtune=@var{cpu=type} @gol\n -mcpu=@var{cpu-type}  -membedded-data  -muninit-const-in-rodata @gol\n -membedded-pic  -mfp32  -mfp64  -mfused-madd  -mno-fused-madd @gol\n--mgas  -mgp32  -mgp64 @gol\n--mgpopt  -mhalf-pic  -mhard-float  -mint64  -mips1 @gol\n+-mgas  -mgp32  -mgp64  -mhard-float  -mint64  -mips1 @gol\n -mips2  -mips3  -mips4  -mips32  -mips32r2  -mips64 @gol\n -mlong64  -mlong32  -mlong-calls  -mmemcpy @gol\n -mmips-as  -mmips-tfile  -mno-abicalls @gol\n -mno-embedded-data  -mno-uninit-const-in-rodata @gol\n--mno-embedded-pic  -mno-gpopt  -mno-long-calls @gol\n--mno-memcpy  -mno-mips-tfile  -mno-rnames  -mno-stats @gol\n+-mno-embedded-pic  -mno-long-calls @gol\n+-mno-memcpy  -mno-mips-tfile  -mno-rnames @gol\n -mrnames  -msoft-float @gol\n -m4650  -msingle-float  -mmad @gol\n -EL  -EB  -G @var{num}  -nocpp @gol\n@@ -7962,16 +7961,6 @@ names for the registers, instead of the hardware names (ie, @var{a0}\n instead of @var{$4}).  The only known assembler that supports this option\n is the Algorithmics assembler.\n \n-@item -mgpopt\n-@itemx -mno-gpopt\n-@opindex mgpopt\n-@opindex mno-gpopt\n-The @option{-mgpopt} switch says to write all of the data declarations\n-before the instructions in the text section, this allows the MIPS\n-assembler to generate one word memory references instead of using two\n-words for short global or static data items.  This is on by default if\n-optimization is selected.\n-\n @item -mmemcpy\n @itemx -mno-memcpy\n @opindex mmemcpy\n@@ -8026,13 +8015,6 @@ loading up a function's address into a register before the call.\n You need to use this switch, if you call outside of the current\n 512 megabyte segment to functions that are not through pointers.\n \n-@item -mhalf-pic\n-@itemx -mno-half-pic\n-@opindex mhalf-pic\n-@opindex mno-half-pic\n-Put pointers to extern references into the data section and load them\n-up, rather than put the references in the text section.\n-\n @item -membedded-pic\n @itemx -mno-embedded-pic\n @opindex membedded-pic"}, {"sha": "8f678d4a7cfbddab67dbe16e498ab2ca2ff5187d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -1,3 +1,9 @@\n+2003-07-08  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.dg/compat/sdata-section.h: New file.\n+\t* gcc.dg/compat/sdata-1_{x,y,main}.c: New test.\n+\t* gcc.dg/torture/mips-sdata-1.c: New test.\n+\n 2003-07-08  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/11030"}, {"sha": "68e9f8f09ad3a9c82d0d0fae86f574b516a9d2cf", "filename": "gcc/testsuite/gcc.dg/compat/sdata-1_main.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fsdata-1_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fsdata-1_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fsdata-1_main.c?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -0,0 +1,12 @@\n+/* Check that sdata qualification doesn't produce out-of-range relocations\n+   and that compilers agree on the way these declarations are handled.  */\n+\n+extern void sdata_1_x (void);\n+extern void exit (int);\n+\n+int\n+main ()\n+{\n+  sdata_1_x ();\n+  exit (0);\n+}"}, {"sha": "fc7b8cef333b50df859dc40109e6e1a01a77cca9", "filename": "gcc/testsuite/gcc.dg/compat/sdata-1_x.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fsdata-1_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fsdata-1_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fsdata-1_x.c?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -0,0 +1,25 @@\n+#include \"sdata-section.h\"\n+\n+struct s { int x; int y[4]; };\n+extern struct s small_struct SDATA_SECTION;\n+\n+/* Test \"load address\" operations.  */\n+int *xaddr (void) { return &small_struct.x; }\n+int *yaddr (int i) { return &small_struct.y[i]; }\n+\n+void sdata_1_x (void)\n+{\n+  int i;\n+\n+  /* Test direct accesses.  */\n+  small_struct.x = 5;\n+  for (i = 0; i < 4; i++)\n+    small_struct.y[i] = i + 42;\n+\n+  if (*xaddr () != 5)\n+    abort ();\n+\n+  for (i = 0; i < 4; i++)\n+    if (*yaddr (i) != i + 42)\n+      abort ();\n+}"}, {"sha": "8bc878a85d264b98e6e455d6cd47de9a6e1a23b2", "filename": "gcc/testsuite/gcc.dg/compat/sdata-1_y.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fsdata-1_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fsdata-1_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fsdata-1_y.c?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -0,0 +1,4 @@\n+#include \"sdata-section.h\"\n+\n+struct s { int x; int y[4]; };\n+struct s small_struct SDATA_SECTION;"}, {"sha": "d2bde8066efa7aed1bce6cf5e67193302c822d0c", "filename": "gcc/testsuite/gcc.dg/compat/sdata-section.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fsdata-section.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fsdata-section.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fsdata-section.h?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -0,0 +1,5 @@\n+#ifdef __mips\n+#define SDATA_SECTION __attribute__((__section__(\".sdata\")))\n+#else\n+#define SDATA_SECTION\n+#endif"}, {"sha": "ad8836bb66f0040a70acad303385258eee7e4263", "filename": "gcc/testsuite/gcc.dg/torture/mips-sdata-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fmips-sdata-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8898790358d9b98e4bf63ea2607c8dbd68bd382/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fmips-sdata-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fmips-sdata-1.c?ref=b8898790358d9b98e4bf63ea2607c8dbd68bd382", "patch": "@@ -0,0 +1,10 @@\n+/* Check that sdata-accesses are applied regardless of size or ABI.  */\n+/* { dg-options -mexplicit-relocs } */\n+/* { dg-do compile { target mips*-*-* } } */\n+\n+struct s { int x[4]; };\n+struct s my_struct __attribute__((__section__(\".sdata\")));\n+\n+int f() { return my_struct.x[3]; }\n+\n+/* { dg-final { scan-assembler {gp_?rel\\(my_struct} } } */"}]}