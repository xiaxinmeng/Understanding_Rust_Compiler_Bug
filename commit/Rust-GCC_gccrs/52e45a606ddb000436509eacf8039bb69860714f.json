{"sha": "52e45a606ddb000436509eacf8039bb69860714f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJlNDVhNjA2ZGRiMDAwNDM2NTA5ZWFjZjgwMzliYjY5ODYwNzE0Zg==", "commit": {"author": {"name": "Mark Elbrecht", "email": "snowball3@bigfoot.com", "date": "2000-05-01T16:50:49Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-05-01T16:50:49Z"}, "message": "djgpp.h (INT_ASM_OP): Define.\n\n        * config/i386/djgpp.h (INT_ASM_OP): Define.\n        (CPP_PREDEFINES): Rename MSDOS to __MSDOS__.\n        (ASM_WEAKEN_LABEL): Define.\n        (MASK_BNU210): Define.\n        (SUBTARGET_SWITCHES): Define.\n        (SUPPORTS_WEAK, SUPPORTS_ONE_ONLY): Define.\n        (MAKE_DECL_ONE_ONLY): Define.\n        (UNIQUE_SECTION_P, UNIQUE_SECTION): Define.\n\nFrom-SVN: r33570", "tree": {"sha": "b3f651a4cc30167aa9859d8cd00032a7496f5a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3f651a4cc30167aa9859d8cd00032a7496f5a5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52e45a606ddb000436509eacf8039bb69860714f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e45a606ddb000436509eacf8039bb69860714f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52e45a606ddb000436509eacf8039bb69860714f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52e45a606ddb000436509eacf8039bb69860714f/comments", "author": null, "committer": null, "parents": [{"sha": "eb70f6289cd4b80e9b67c88a36a2d025c11a7b9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb70f6289cd4b80e9b67c88a36a2d025c11a7b9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb70f6289cd4b80e9b67c88a36a2d025c11a7b9e"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "76f8ade10fa7bc854a1345772326e2743a7c3329", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e45a606ddb000436509eacf8039bb69860714f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e45a606ddb000436509eacf8039bb69860714f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52e45a606ddb000436509eacf8039bb69860714f", "patch": "@@ -1,3 +1,14 @@\n+2000-05-01 Mark Elbrecht <snowball3@bigfoot.com>\n+\n+\t* config/i386/djgpp.h (INT_ASM_OP): Define.\n+\t(CPP_PREDEFINES): Rename MSDOS to __MSDOS__.\n+\t(ASM_WEAKEN_LABEL): Define.\n+\t(MASK_BNU210): Define.\n+\t(SUBTARGET_SWITCHES): Define.\n+\t(SUPPORTS_WEAK, SUPPORTS_ONE_ONLY): Define.\n+\t(MAKE_DECL_ONE_ONLY): Define.\n+\t(UNIQUE_SECTION_P, UNIQUE_SECTION): Define.\n+\n 2000-05-01  Mumit Khan  <khan@xraylith.wisc.edu>\n \n \t* i386/cygwin.h (INT_ASM_OP): Define."}, {"sha": "86ebfbf4b30d1f9ef770bae1179b31f14141882f", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52e45a606ddb000436509eacf8039bb69860714f/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52e45a606ddb000436509eacf8039bb69860714f/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=52e45a606ddb000436509eacf8039bb69860714f", "patch": "@@ -63,6 +63,10 @@ Boston, MA 02111-1307, USA.  */\n #undef IDENT_ASM_OP\n #define IDENT_ASM_OP \"\\t.ident\"\n \n+/* Define the name of the .int op.  */\n+#undef INT_ASM_OP\n+#define INT_ASM_OP \"\\t.long\"\n+\n /* Enable alias attribute support.  */\n #ifndef SET_ASM_OP\n #define SET_ASM_OP \"\\t.set\"\n@@ -81,7 +85,7 @@ Boston, MA 02111-1307, USA.  */\n         (((NAME)[0] >= 'A') && ((NAME)[0] <= 'z') && ((NAME)[1] == ':')))\n \n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-DGO32 -DDJGPP=2 -DMSDOS -Asystem(msdos)\"\n+#define CPP_PREDEFINES \"-DGO32 -DDJGPP=2 -D__MSDOS__ -Asystem(msdos)\"\n \n /* Include <sys/version.h> so __DJGPP__ and __DJGPP_MINOR__ are defined.  */\n #undef CPP_SPEC\n@@ -193,6 +197,12 @@ dtor_section ()\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n   asm_output_aligned_bss ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n \n+/* This is how to tell assembler that a symbol is weak  */ \n+#undef ASM_WEAKEN_LABEL\n+#define ASM_WEAKEN_LABEL(FILE,NAME) \\\n+  do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n+       fputc ('\\n', FILE); } while (0)\n+\n /* djgpp automatically calls its own version of __main, so don't define one\n    in libgcc, nor call one in main().  */\n #define HAS_INIT_SECTION\n@@ -205,3 +215,60 @@ dtor_section ()\t\t\t\t\t\t\t\\\n \n /* Used to be defined in xm-djgpp.h, but moved here for cross-compilers.  */\n #define LIBSTDCXX \"-lstdcxx\"\n+\n+/* Add command line option -mbnu210 to indicate we can use binutil 2.10's features.  */\n+#undef MASK_BNU210\n+#define MASK_BNU210 (0x40000000)\n+\n+#undef SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES \t\t\\\n+  { \"bnu210\", MASK_BNU210, \"Enable weak symbol and enhanced C++ template support. Binutils 2.9.5.1 or higher required.\" }, \\\n+  { \"no-bnu210\", -MASK_BNU210, \"Disable weak symbol and enhanced C++ template support.\" },\n+\n+/* Weak symbols and .gnu.linkonce are only in the binutils snapshots\n+   and binutils-2.10.  So do it only when -mbnu210 is specified.  */\n+#undef SUPPORTS_WEAK\n+#define SUPPORTS_WEAK (target_flags & MASK_BNU210)\n+\n+#undef SUPPORTS_ONE_ONLY\n+#define SUPPORTS_ONE_ONLY (target_flags & MASK_BNU210)\n+\n+/* Support for C++ templates.  */\n+#undef MAKE_DECL_ONE_ONLY\n+#define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n+\n+/* Additional support for C++ templates and support for\n+   garbage collection.  */\n+#undef UNIQUE_SECTION_P\n+#define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL))\n+\n+#undef UNIQUE_SECTION\n+#define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  int len;\t\t\t\t\t\t\t\\\n+  char *name, *string, *prefix;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\\\n+\t\t\t\t\t\t\t\t\\\n+  if (! DECL_ONE_ONLY (DECL))\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n+\tprefix = \".text.\";\t\t\t\t\t\\\n+      else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n+\tprefix = \".rodata.\";\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\tprefix = \".data.\";\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  else if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n+    prefix = \".gnu.linkonce.t.\";\t\t\t\t\\\n+  else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\\\n+    prefix = \".gnu.linkonce.r.\";\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    prefix = \".gnu.linkonce.d.\";\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  len = strlen (name) + strlen (prefix);\t\t\t\\\n+  string = alloca (len + 1);\t\t\t\t\t\\\n+  sprintf (string, \"%s%s\", prefix, name);\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n+} while (0)"}]}