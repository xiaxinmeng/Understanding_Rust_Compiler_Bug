{"sha": "7978192f77a85871bef9c4de7ab501c07f8b69cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk3ODE5MmY3N2E4NTg3MWJlZjljNGRlN2FiNTAxYzA3ZjhiNjljZg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-10-20T05:45:09Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-10-20T05:45:09Z"}, "message": "pa.md (call, call_value): Do not emit a blockage after restoring the PIC register.\n\n        * pa.md (call, call_value): Do not emit a blockage after restoring\n        the PIC register.\n\nFrom-SVN: r30096", "tree": {"sha": "d0d232fc18a95eba053b26f0fa2694d148ce507b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0d232fc18a95eba053b26f0fa2694d148ce507b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7978192f77a85871bef9c4de7ab501c07f8b69cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7978192f77a85871bef9c4de7ab501c07f8b69cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7978192f77a85871bef9c4de7ab501c07f8b69cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7978192f77a85871bef9c4de7ab501c07f8b69cf/comments", "author": null, "committer": null, "parents": [{"sha": "1bef1e7c43edecfb334d7ee72ab077f1240c8a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bef1e7c43edecfb334d7ee72ab077f1240c8a50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bef1e7c43edecfb334d7ee72ab077f1240c8a50"}], "stats": {"total": 31, "additions": 9, "deletions": 22}, "files": [{"sha": "f650a8c78ece06c0809d960d6e1fd6119b264fcc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7978192f77a85871bef9c4de7ab501c07f8b69cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7978192f77a85871bef9c4de7ab501c07f8b69cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7978192f77a85871bef9c4de7ab501c07f8b69cf", "patch": "@@ -1,3 +1,8 @@\n+Tue Oct 19 23:43:50 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.md (call, call_value): Do not emit a blockage after restoring\n+\tthe PIC register.\n+\n Tue Oct 19 17:22:39 1999  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-typeck.c (c_expand_asm_operands): Fix typo."}, {"sha": "72d34e5c3f35c4e332929dbeb22c1657c7e65cf6", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7978192f77a85871bef9c4de7ab501c07f8b69cf/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7978192f77a85871bef9c4de7ab501c07f8b69cf/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=7978192f77a85871bef9c4de7ab501c07f8b69cf", "patch": "@@ -4731,6 +4731,8 @@\n   if (flag_pic)\n     {\n       use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n+      use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn),\n+\t       gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n \n       /* After each call we must restore the PIC register, even if it\n \t doesn't appear to be used.\n@@ -4739,17 +4741,6 @@\n \t stored the PIC register in.  */\n       emit_move_insn (pic_offset_table_rtx,\n \t\t      gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n-      emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n-\n-      /* Gross.  We have to keep the scheduler from moving the restore\n-\t of the PIC register away from the call.  SCHED_GROUP_P is\n-\t supposed to do this, but for some reason the compiler will\n-\t go into an infinite loop when we use that.\n-\n-\t This method (blockage insn) may make worse code (then again\n-\t it may not since calls are nearly blockages anyway), but at\n-\t least it should work.  */\n-      emit_insn (gen_blockage ());\n     }\n   DONE;\n }\")\n@@ -4888,6 +4879,8 @@\n   if (flag_pic)\n     {\n       use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n+      use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn),\n+\t       gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n \n       /* After each call we must restore the PIC register, even if it\n \t doesn't appear to be used.\n@@ -4896,17 +4889,6 @@\n \t stored the PIC register in.  */\n       emit_move_insn (pic_offset_table_rtx,\n \t\t      gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n-      emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n-\n-      /* Gross.  We have to keep the scheduler from moving the restore\n-\t of the PIC register away from the call.  SCHED_GROUP_P is\n-\t supposed to do this, but for some reason the compiler will\n-\t go into an infinite loop when we use that.\n-\n-\t This method (blockage insn) may make worse code (then again\n-\t it may not since calls are nearly blockages anyway), but at\n-\t least it should work.  */\n-      emit_insn (gen_blockage ());\n     }\n   DONE;\n }\")"}]}