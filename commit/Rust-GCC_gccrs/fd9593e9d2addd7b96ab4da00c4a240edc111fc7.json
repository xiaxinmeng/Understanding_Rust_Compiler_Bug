{"sha": "fd9593e9d2addd7b96ab4da00c4a240edc111fc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5NTkzZTlkMmFkZGQ3Yjk2YWI0ZGEwMGM0YTI0MGVkYzExMWZjNw==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2016-10-17T17:46:59Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2016-10-17T17:46:59Z"}, "message": "re PR target/77308 (surprisingly large stack usage for sha512 on arm)\n\n2016-10-17  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR target/77308\n        * config/arm/arm.c (arm_emit_coreregs_64bit_shift): Clear the result\n        register explicitly.\n        * config/arm/arm.md (ashldi3, ashrdi3, lshrdi3): Don't FAIL if\n        optimizing for size.\n\ntestsuite:\n2016-10-17  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR target/77308\n        * gcc.target/arm/pr77308.c: New test.\n\nFrom-SVN: r241273", "tree": {"sha": "0db6d5545cefe7f382e2a1309d9240101c8af3e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0db6d5545cefe7f382e2a1309d9240101c8af3e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd9593e9d2addd7b96ab4da00c4a240edc111fc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9593e9d2addd7b96ab4da00c4a240edc111fc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9593e9d2addd7b96ab4da00c4a240edc111fc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9593e9d2addd7b96ab4da00c4a240edc111fc7/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "558c7db0615b6127566a7b0c3b4c75e97249892d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558c7db0615b6127566a7b0c3b4c75e97249892d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/558c7db0615b6127566a7b0c3b4c75e97249892d"}], "stats": {"total": 196, "additions": 182, "deletions": 14}, "files": [{"sha": "3cad7bb512c7c0c3a6deacb6840c67d157f1355a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9593e9d2addd7b96ab4da00c4a240edc111fc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9593e9d2addd7b96ab4da00c4a240edc111fc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd9593e9d2addd7b96ab4da00c4a240edc111fc7", "patch": "@@ -1,3 +1,11 @@\n+2016-10-17  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR target/77308\n+\t* config/arm/arm.c (arm_emit_coreregs_64bit_shift): Clear the result\n+\tregister explicitly.\n+\t* config/arm/arm.md (ashldi3, ashrdi3, lshrdi3): Don't FAIL if\n+\toptimizing for size.\n+\n 2016-10-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c: Delete inclusion of"}, {"sha": "a7588393a0181063380daf8589c3a6fe95c1270f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9593e9d2addd7b96ab4da00c4a240edc111fc7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9593e9d2addd7b96ab4da00c4a240edc111fc7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=fd9593e9d2addd7b96ab4da00c4a240edc111fc7", "patch": "@@ -29216,6 +29216,10 @@ arm_emit_coreregs_64bit_shift (enum rtx_code code, rtx out, rtx in,\n \t  /* Shifts by a constant less than 32.  */\n \t  rtx reverse_amount = GEN_INT (32 - INTVAL (amount));\n \n+\t  /* Clearing the out register in DImode first avoids lots\n+\t     of spilling and results in less stack usage.\n+\t     Later this redundant insn is completely removed.  */\n+\t  emit_insn (SET (out, const0_rtx));\n \t  emit_insn (SET (out_down, LSHIFT (code, in_down, amount)));\n \t  emit_insn (SET (out_down,\n \t\t\t  ORR (REV_LSHIFT (code, in_up, reverse_amount),\n@@ -29227,12 +29231,11 @@ arm_emit_coreregs_64bit_shift (enum rtx_code code, rtx out, rtx in,\n \t  /* Shifts by a constant greater than 31.  */\n \t  rtx adj_amount = GEN_INT (INTVAL (amount) - 32);\n \n+\t  emit_insn (SET (out, const0_rtx));\n \t  emit_insn (SET (out_down, SHIFT (code, in_up, adj_amount)));\n \t  if (code == ASHIFTRT)\n \t    emit_insn (gen_ashrsi3 (out_up, in_up,\n \t\t\t\t    GEN_INT (31)));\n-\t  else\n-\t    emit_insn (SET (out_up, const0_rtx));\n \t}\n     }\n   else"}, {"sha": "8393f65bcf4c9c3e61b91e5adcd5f59ff7c6ec3f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9593e9d2addd7b96ab4da00c4a240edc111fc7/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9593e9d2addd7b96ab4da00c4a240edc111fc7/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=fd9593e9d2addd7b96ab4da00c4a240edc111fc7", "patch": "@@ -4016,10 +4016,6 @@\n          cheaper to have the alternate code being generated than moving\n          values to iwmmxt regs and back.  */\n \n-      /* If we're optimizing for size, we prefer the libgcc calls.  */\n-      if (optimize_function_for_size_p (cfun))\n-\tFAIL;\n-\n       /* Expand operation using core-registers.\n \t 'FAIL' would achieve the same thing, but this is a bit smarter.  */\n       scratch1 = gen_reg_rtx (SImode);\n@@ -4089,10 +4085,6 @@\n          cheaper to have the alternate code being generated than moving\n          values to iwmmxt regs and back.  */\n \n-      /* If we're optimizing for size, we prefer the libgcc calls.  */\n-      if (optimize_function_for_size_p (cfun))\n-\tFAIL;\n-\n       /* Expand operation using core-registers.\n \t 'FAIL' would achieve the same thing, but this is a bit smarter.  */\n       scratch1 = gen_reg_rtx (SImode);\n@@ -4159,10 +4151,6 @@\n          cheaper to have the alternate code being generated than moving\n          values to iwmmxt regs and back.  */\n \n-      /* If we're optimizing for size, we prefer the libgcc calls.  */\n-      if (optimize_function_for_size_p (cfun))\n-\tFAIL;\n-\n       /* Expand operation using core-registers.\n \t 'FAIL' would achieve the same thing, but this is a bit smarter.  */\n       scratch1 = gen_reg_rtx (SImode);"}, {"sha": "595bd4c8c8293041be05e2d765e2faee92a16668", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9593e9d2addd7b96ab4da00c4a240edc111fc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9593e9d2addd7b96ab4da00c4a240edc111fc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd9593e9d2addd7b96ab4da00c4a240edc111fc7", "patch": "@@ -1,3 +1,8 @@\n+2016-09-29  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR target/77308\n+\t* gcc.target/arm/pr77308.c: New test.\n+\n 2016-10-17  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* lib/target-supports.exp"}, {"sha": "01da80c812348ee627ade7c2ffeeb4a2ea5ecc76", "filename": "gcc/testsuite/gcc.target/arm/pr77308.c", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9593e9d2addd7b96ab4da00c4a240edc111fc7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr77308.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9593e9d2addd7b96ab4da00c4a240edc111fc7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr77308.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr77308.c?ref=fd9593e9d2addd7b96ab4da00c4a240edc111fc7", "patch": "@@ -0,0 +1,164 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -Wstack-usage=2500\" } */\n+\n+#define SHA_LONG64 unsigned long long\n+#define U64(C)     C##ULL\n+\n+#define SHA_LBLOCK      16\n+#define SHA512_CBLOCK   (SHA_LBLOCK*8)\n+\n+typedef struct SHA512state_st {\n+    SHA_LONG64 h[8];\n+    SHA_LONG64 Nl, Nh;\n+    union {\n+        SHA_LONG64 d[SHA_LBLOCK];\n+        unsigned char p[SHA512_CBLOCK];\n+    } u;\n+    unsigned int num, md_len;\n+} SHA512_CTX;\n+\n+static const SHA_LONG64 K512[80] = {\n+    U64(0x428a2f98d728ae22), U64(0x7137449123ef65cd),\n+    U64(0xb5c0fbcfec4d3b2f), U64(0xe9b5dba58189dbbc),\n+    U64(0x3956c25bf348b538), U64(0x59f111f1b605d019),\n+    U64(0x923f82a4af194f9b), U64(0xab1c5ed5da6d8118),\n+    U64(0xd807aa98a3030242), U64(0x12835b0145706fbe),\n+    U64(0x243185be4ee4b28c), U64(0x550c7dc3d5ffb4e2),\n+    U64(0x72be5d74f27b896f), U64(0x80deb1fe3b1696b1),\n+    U64(0x9bdc06a725c71235), U64(0xc19bf174cf692694),\n+    U64(0xe49b69c19ef14ad2), U64(0xefbe4786384f25e3),\n+    U64(0x0fc19dc68b8cd5b5), U64(0x240ca1cc77ac9c65),\n+    U64(0x2de92c6f592b0275), U64(0x4a7484aa6ea6e483),\n+    U64(0x5cb0a9dcbd41fbd4), U64(0x76f988da831153b5),\n+    U64(0x983e5152ee66dfab), U64(0xa831c66d2db43210),\n+    U64(0xb00327c898fb213f), U64(0xbf597fc7beef0ee4),\n+    U64(0xc6e00bf33da88fc2), U64(0xd5a79147930aa725),\n+    U64(0x06ca6351e003826f), U64(0x142929670a0e6e70),\n+    U64(0x27b70a8546d22ffc), U64(0x2e1b21385c26c926),\n+    U64(0x4d2c6dfc5ac42aed), U64(0x53380d139d95b3df),\n+    U64(0x650a73548baf63de), U64(0x766a0abb3c77b2a8),\n+    U64(0x81c2c92e47edaee6), U64(0x92722c851482353b),\n+    U64(0xa2bfe8a14cf10364), U64(0xa81a664bbc423001),\n+    U64(0xc24b8b70d0f89791), U64(0xc76c51a30654be30),\n+    U64(0xd192e819d6ef5218), U64(0xd69906245565a910),\n+    U64(0xf40e35855771202a), U64(0x106aa07032bbd1b8),\n+    U64(0x19a4c116b8d2d0c8), U64(0x1e376c085141ab53),\n+    U64(0x2748774cdf8eeb99), U64(0x34b0bcb5e19b48a8),\n+    U64(0x391c0cb3c5c95a63), U64(0x4ed8aa4ae3418acb),\n+    U64(0x5b9cca4f7763e373), U64(0x682e6ff3d6b2b8a3),\n+    U64(0x748f82ee5defb2fc), U64(0x78a5636f43172f60),\n+    U64(0x84c87814a1f0ab72), U64(0x8cc702081a6439ec),\n+    U64(0x90befffa23631e28), U64(0xa4506cebde82bde9),\n+    U64(0xbef9a3f7b2c67915), U64(0xc67178f2e372532b),\n+    U64(0xca273eceea26619c), U64(0xd186b8c721c0c207),\n+    U64(0xeada7dd6cde0eb1e), U64(0xf57d4f7fee6ed178),\n+    U64(0x06f067aa72176fba), U64(0x0a637dc5a2c898a6),\n+    U64(0x113f9804bef90dae), U64(0x1b710b35131c471b),\n+    U64(0x28db77f523047d84), U64(0x32caab7b40c72493),\n+    U64(0x3c9ebe0a15c9bebc), U64(0x431d67c49c100d4c),\n+    U64(0x4cc5d4becb3e42b6), U64(0x597f299cfc657e2a),\n+    U64(0x5fcb6fab3ad6faec), U64(0x6c44198c4a475817)\n+};\n+\n+#define B(x,j)    (((SHA_LONG64)(*(((const unsigned char *)(&x))+j)))<<((7-j)*8))\n+#define PULL64(x) (B(x,0)|B(x,1)|B(x,2)|B(x,3)|B(x,4)|B(x,5)|B(x,6)|B(x,7))\n+#define ROTR(x,s)       (((x)>>s) | (x)<<(64-s))\n+#define Sigma0(x)       (ROTR((x),28) ^ ROTR((x),34) ^ ROTR((x),39))\n+#define Sigma1(x)       (ROTR((x),14) ^ ROTR((x),18) ^ ROTR((x),41))\n+#define sigma0(x)       (ROTR((x),1)  ^ ROTR((x),8)  ^ ((x)>>7))\n+#define sigma1(x)       (ROTR((x),19) ^ ROTR((x),61) ^ ((x)>>6))\n+#define Ch(x,y,z)       (((x) & (y)) ^ ((~(x)) & (z)))\n+#define Maj(x,y,z)      (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))\n+\n+#define ROUND_00_15(i,a,b,c,d,e,f,g,h)          do {    \\\n+        T1 += h + Sigma1(e) + Ch(e,f,g) + K512[i];      \\\n+        h = Sigma0(a) + Maj(a,b,c);                     \\\n+        d += T1;        h += T1;                } while (0)\n+#define ROUND_16_80(i,j,a,b,c,d,e,f,g,h,X)      do {    \\\n+        s0 = X[(j+1)&0x0f];     s0 = sigma0(s0);        \\\n+        s1 = X[(j+14)&0x0f];    s1 = sigma1(s1);        \\\n+        T1 = X[(j)&0x0f] += s0 + s1 + X[(j+9)&0x0f];    \\\n+        ROUND_00_15(i+j,a,b,c,d,e,f,g,h);               } while (0)\n+void sha512_block_data_order(SHA512_CTX *ctx, const void *in,\n+                                    unsigned int num)\n+{\n+    const SHA_LONG64 *W = in;\n+    SHA_LONG64 a, b, c, d, e, f, g, h, s0, s1, T1;\n+    SHA_LONG64 X[16];\n+    int i;\n+\n+    while (num--) {\n+\n+        a = ctx->h[0];\n+        b = ctx->h[1];\n+        c = ctx->h[2];\n+        d = ctx->h[3];\n+        e = ctx->h[4];\n+        f = ctx->h[5];\n+        g = ctx->h[6];\n+        h = ctx->h[7];\n+\n+        T1 = X[0] = PULL64(W[0]);\n+        ROUND_00_15(0, a, b, c, d, e, f, g, h);\n+        T1 = X[1] = PULL64(W[1]);\n+        ROUND_00_15(1, h, a, b, c, d, e, f, g);\n+        T1 = X[2] = PULL64(W[2]);\n+        ROUND_00_15(2, g, h, a, b, c, d, e, f);\n+        T1 = X[3] = PULL64(W[3]);\n+        ROUND_00_15(3, f, g, h, a, b, c, d, e);\n+        T1 = X[4] = PULL64(W[4]);\n+        ROUND_00_15(4, e, f, g, h, a, b, c, d);\n+        T1 = X[5] = PULL64(W[5]);\n+        ROUND_00_15(5, d, e, f, g, h, a, b, c);\n+        T1 = X[6] = PULL64(W[6]);\n+        ROUND_00_15(6, c, d, e, f, g, h, a, b);\n+        T1 = X[7] = PULL64(W[7]);\n+        ROUND_00_15(7, b, c, d, e, f, g, h, a);\n+        T1 = X[8] = PULL64(W[8]);\n+        ROUND_00_15(8, a, b, c, d, e, f, g, h);\n+        T1 = X[9] = PULL64(W[9]);\n+        ROUND_00_15(9, h, a, b, c, d, e, f, g);\n+        T1 = X[10] = PULL64(W[10]);\n+        ROUND_00_15(10, g, h, a, b, c, d, e, f);\n+        T1 = X[11] = PULL64(W[11]);\n+        ROUND_00_15(11, f, g, h, a, b, c, d, e);\n+        T1 = X[12] = PULL64(W[12]);\n+        ROUND_00_15(12, e, f, g, h, a, b, c, d);\n+        T1 = X[13] = PULL64(W[13]);\n+        ROUND_00_15(13, d, e, f, g, h, a, b, c);\n+        T1 = X[14] = PULL64(W[14]);\n+        ROUND_00_15(14, c, d, e, f, g, h, a, b);\n+        T1 = X[15] = PULL64(W[15]);\n+        ROUND_00_15(15, b, c, d, e, f, g, h, a);\n+\n+        for (i = 16; i < 80; i += 16) {\n+            ROUND_16_80(i, 0, a, b, c, d, e, f, g, h, X);\n+            ROUND_16_80(i, 1, h, a, b, c, d, e, f, g, X);\n+            ROUND_16_80(i, 2, g, h, a, b, c, d, e, f, X);\n+            ROUND_16_80(i, 3, f, g, h, a, b, c, d, e, X);\n+            ROUND_16_80(i, 4, e, f, g, h, a, b, c, d, X);\n+            ROUND_16_80(i, 5, d, e, f, g, h, a, b, c, X);\n+            ROUND_16_80(i, 6, c, d, e, f, g, h, a, b, X);\n+            ROUND_16_80(i, 7, b, c, d, e, f, g, h, a, X);\n+            ROUND_16_80(i, 8, a, b, c, d, e, f, g, h, X);\n+            ROUND_16_80(i, 9, h, a, b, c, d, e, f, g, X);\n+            ROUND_16_80(i, 10, g, h, a, b, c, d, e, f, X);\n+            ROUND_16_80(i, 11, f, g, h, a, b, c, d, e, X);\n+            ROUND_16_80(i, 12, e, f, g, h, a, b, c, d, X);\n+            ROUND_16_80(i, 13, d, e, f, g, h, a, b, c, X);\n+            ROUND_16_80(i, 14, c, d, e, f, g, h, a, b, X);\n+            ROUND_16_80(i, 15, b, c, d, e, f, g, h, a, X);\n+        }\n+\n+        ctx->h[0] += a;\n+        ctx->h[1] += b;\n+        ctx->h[2] += c;\n+        ctx->h[3] += d;\n+        ctx->h[4] += e;\n+        ctx->h[5] += f;\n+        ctx->h[6] += g;\n+        ctx->h[7] += h;\n+\n+        W += SHA_LBLOCK;\n+    }\n+}"}]}