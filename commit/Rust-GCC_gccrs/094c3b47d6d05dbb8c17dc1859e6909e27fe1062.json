{"sha": "094c3b47d6d05dbb8c17dc1859e6909e27fe1062", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk0YzNiNDdkNmQwNWRiYjhjMTdkYzE4NTllNjkwOWUyN2ZlMTA2Mg==", "commit": {"author": {"name": "Jose Ruiz", "email": "ruiz@adacore.com", "date": "2007-06-06T10:17:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:17:12Z"}, "message": "s-intman-vxworks.ads, [...] (Abort_Task_Signal): Rename to Abort_Task_Interrupt to be able to keep the same interface as the...\n\n2007-04-20  Jose Ruiz  <ruiz@adacore.com>\n\n\t* s-intman-vxworks.ads, s-intman-vxworks.adb (Abort_Task_Signal):\n\tRename to Abort_Task_Interrupt to be able to keep the same interface\n\tas the rest of the targets.\n\n\t* s-osinte-vxworks.ads s-osinte-vxworks.adb\n\t(To_VxWorks_Priority): Remove explicit \"in\" mode indicator\n\n\t* s-osinte-vxworks6.ads, s-vxwork-arm.ads, system-vxworks-arm.ads:\n\tNew files.\n\nFrom-SVN: r125372", "tree": {"sha": "1c676d33315b7c63a188f16d2f3788213baba421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c676d33315b7c63a188f16d2f3788213baba421"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/094c3b47d6d05dbb8c17dc1859e6909e27fe1062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094c3b47d6d05dbb8c17dc1859e6909e27fe1062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/094c3b47d6d05dbb8c17dc1859e6909e27fe1062", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/comments", "author": {"login": "JoseRuizAdaCore", "id": 22770339, "node_id": "MDQ6VXNlcjIyNzcwMzM5", "avatar_url": "https://avatars.githubusercontent.com/u/22770339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoseRuizAdaCore", "html_url": "https://github.com/JoseRuizAdaCore", "followers_url": "https://api.github.com/users/JoseRuizAdaCore/followers", "following_url": "https://api.github.com/users/JoseRuizAdaCore/following{/other_user}", "gists_url": "https://api.github.com/users/JoseRuizAdaCore/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoseRuizAdaCore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoseRuizAdaCore/subscriptions", "organizations_url": "https://api.github.com/users/JoseRuizAdaCore/orgs", "repos_url": "https://api.github.com/users/JoseRuizAdaCore/repos", "events_url": "https://api.github.com/users/JoseRuizAdaCore/events{/privacy}", "received_events_url": "https://api.github.com/users/JoseRuizAdaCore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09ef48fe18e9314a3b9a42692864644c01e5b50d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ef48fe18e9314a3b9a42692864644c01e5b50d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09ef48fe18e9314a3b9a42692864644c01e5b50d"}], "stats": {"total": 648, "additions": 641, "deletions": 7}, "files": [{"sha": "faf71e7e2a32f3b234e6dc4cf1e121edffd8ef08", "filename": "gcc/ada/s-intman-vxworks.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fs-intman-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fs-intman-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-vxworks.adb?ref=094c3b47d6d05dbb8c17dc1859e6909e27fe1062", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2006 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -135,7 +135,7 @@ package body System.Interrupt_Management is\n       --  Change this if you want to use another signal for task abort.\n       --  SIGTERM might be a good one.\n \n-      Abort_Task_Signal := SIGABRT;\n+      Abort_Task_Interrupt := SIGABRT;\n \n       Exception_Action.sa_handler := Notify_Exception'Address;\n       Exception_Action.sa_flags := SA_ONSTACK;\n@@ -169,7 +169,7 @@ package body System.Interrupt_Management is\n \n       --  The abort signal must also be unmasked\n \n-      Keep_Unmasked (Abort_Task_Signal) := True;\n+      Keep_Unmasked (Abort_Task_Interrupt) := True;\n    end Initialize;\n \n end System.Interrupt_Management;"}, {"sha": "3bddb5d0ee67573bf1a22e81e81cbfd1c40c357c", "filename": "gcc/ada/s-intman-vxworks.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fs-intman-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fs-intman-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-vxworks.ads?ref=094c3b47d6d05dbb8c17dc1859e6909e27fe1062", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -83,7 +83,7 @@ package System.Interrupt_Management is\n \n    --  and the initialization code will be portable.\n \n-   Abort_Task_Signal : Signal_ID;\n+   Abort_Task_Interrupt : Signal_ID;\n    --  The signal that is used to implement task abort if an interrupt is used\n    --  for that purpose. This is one of the reserved signals.\n "}, {"sha": "5687d68cfbce69d89714037e27d99f36225aaa06", "filename": "gcc/ada/s-osinte-vxworks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fs-osinte-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fs-osinte-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.adb?ref=094c3b47d6d05dbb8c17dc1859e6909e27fe1062", "patch": "@@ -143,7 +143,7 @@ package body System.OS_Interface is\n    -- To_VxWorks_Priority --\n    -------------------------\n \n-   function To_VxWorks_Priority (Priority : in int) return int is\n+   function To_VxWorks_Priority (Priority : int) return int is\n    begin\n       return Low_Priority - Priority;\n    end To_VxWorks_Priority;"}, {"sha": "ac698397e3a54eb3550a09d8884003c192744f06", "filename": "gcc/ada/s-osinte-vxworks.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fs-osinte-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fs-osinte-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.ads?ref=094c3b47d6d05dbb8c17dc1859e6909e27fe1062", "patch": "@@ -198,7 +198,7 @@ package System.OS_Interface is\n    -- Utility Routines --\n    ----------------------\n \n-   function To_VxWorks_Priority (Priority : in int) return int;\n+   function To_VxWorks_Priority (Priority : int) return int;\n    pragma Inline (To_VxWorks_Priority);\n    --  Convenience routine to convert between VxWorks priority and Ada priority\n "}, {"sha": "f8a39def3c4a13bdfa86515154f84b49264309c0", "filename": "gcc/ada/s-osinte-vxworks6.ads", "status": "added", "additions": 423, "deletions": 0, "changes": 423, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fs-osinte-vxworks6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fs-osinte-vxworks6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks6.ads?ref=094c3b47d6d05dbb8c17dc1859e6909e27fe1062", "patch": "@@ -0,0 +1,423 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                    S Y S T E M . O S _ I N T E R F A C E                 --\n+--                                                                          --\n+--                                   S p e c                                --\n+--                                                                          --\n+--             Copyright (C) 1991-1994, Florida State University            --\n+--             Copyright (C) 1995-2007, Free Software Foundation, Inc.      --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the VxWorks 6.x version of this package\n+\n+--  This package encapsulates all direct interfaces to OS services\n+--  that are needed by children of System.\n+\n+--  PLEASE DO NOT add any with-clauses to this package or remove the pragma\n+--  Preelaborate. This package is designed to be a bottom-level (leaf) package.\n+\n+with Interfaces.C;\n+with System.VxWorks;\n+\n+package System.OS_Interface is\n+   pragma Preelaborate;\n+\n+   subtype int             is Interfaces.C.int;\n+   subtype short           is Short_Integer;\n+   type unsigned_int       is mod 2 ** int'Size;\n+   type long               is new Long_Integer;\n+   type unsigned_long      is mod 2 ** long'Size;\n+   type long_long          is new Long_Long_Integer;\n+   type unsigned_long_long is mod 2 ** long_long'Size;\n+   type size_t             is mod 2 ** Standard'Address_Size;\n+\n+   -----------\n+   -- Errno --\n+   -----------\n+\n+   function errno return int;\n+   pragma Import (C, errno, \"errnoGet\");\n+\n+   EINTR     : constant := 4;\n+   EAGAIN    : constant := 35;\n+   ENOMEM    : constant := 12;\n+   EINVAL    : constant := 22;\n+   ETIMEDOUT : constant := 60;\n+\n+   FUNC_ERR  : constant := -1;\n+\n+   ----------------------------\n+   -- Signals and Interrupts --\n+   ----------------------------\n+\n+   NSIG : constant := 64;\n+   --  Number of signals on the target OS\n+   type Signal is new int range 0 .. Interfaces.C.\"-\" (NSIG, 1);\n+\n+   Max_HW_Interrupt : constant := System.VxWorks.Num_HW_Interrupts - 1;\n+   type HW_Interrupt is new int range 0 .. Max_HW_Interrupt;\n+\n+   Max_Interrupt : constant := Max_HW_Interrupt;\n+\n+   SIGHUP    : constant :=  1; --  hangup\n+   SIGINT    : constant :=  2; --  interrupt\n+   SIGQUIT   : constant :=  3; --  quit\n+   SIGILL    : constant :=  4; --  illegal instruction (not reset when caught)\n+   SIGTRAP   : constant :=  5; --  trace trap (not reset when caught)\n+   SIGABRT   : constant :=  6; --  used by abort, replace SIGIOT in the future\n+   SIGEMT    : constant :=  7; --  EMT instruction\n+   SIGFPE    : constant :=  8; --  floating point exception\n+   SIGKILL   : constant :=  9; --  kill\n+   SIGBUS    : constant := 10; --  bus error\n+   SIGSEGV   : constant := 11; --  segmentation violation\n+   SIGFMT    : constant := 12; --  STACK FORMAT ERROR (not posix)\n+   SIGPIPE   : constant := 13; --  write on a pipe with no one to read it\n+   SIGALRM   : constant := 14; --  alarm clock\n+   SIGTERM   : constant := 15; --  software termination signal from kill\n+   SIGCNCL   : constant := 16; --  pthreads cancellation signal\n+   SIGSTOP   : constant := 17; --  sendable stop signal not from tty\n+   SIGTSTP   : constant := 18; --  stop signal from tty\n+   SIGCONT   : constant := 19; --  continue a stopped process\n+   SIGCHLD   : constant := 20; --  to parent on child stop or exit\n+   SIGTTIN   : constant := 21; --  to readers pgrp upon background tty read\n+   SIGTTOU   : constant := 22; --  like TTIN for output\n+\n+   SIGRES1   : constant := 23; --  reserved signal number (Not POSIX)\n+   SIGRES2   : constant := 24; --  reserved signal number (Not POSIX)\n+   SIGRES3   : constant := 25; --  reserved signal number (Not POSIX)\n+   SIGRES4   : constant := 26; --  reserved signal number (Not POSIX)\n+   SIGRES5   : constant := 27; --  reserved signal number (Not POSIX)\n+   SIGRES6   : constant := 28; --  reserved signal number (Not POSIX)\n+   SIGRES7   : constant := 29; --  reserved signal number (Not POSIX)\n+\n+   SIGUSR1   : constant := 30; --  user defined signal 1\n+   SIGUSR2   : constant := 31; --  user defined signal 2\n+\n+   SIGPOLL   : constant := 32; --  pollable event\n+   SIGPROF   : constant := 33; --  profiling timer expired\n+   SIGSYS    : constant := 34; --  bad system call\n+   SIGURG    : constant := 35; --  high bandwidth data is available at socket\n+   SIGVTALRM : constant := 36; --  virtual timer expired\n+   SIGXCPU   : constant := 37; --  CPU time limit exceeded\n+   SIGXFSZ   : constant := 38; --  file size time limit exceeded\n+\n+   SIGEVTS   : constant := 39; --  signal event thread send\n+   SIGEVTD   : constant := 40; --  signal event thread delete\n+\n+   SIGRTMIN  : constant := 48; --  Realtime signal min\n+   SIGRTMAX  : constant := 63; --  Realtime signal max\n+\n+   -----------------------------------\n+   -- Signal processing definitions --\n+   -----------------------------------\n+\n+   --  The how in sigprocmask().\n+   SIG_BLOCK   : constant := 1;\n+   SIG_UNBLOCK : constant := 2;\n+   SIG_SETMASK : constant := 3;\n+\n+   --  The sa_flags in struct sigaction.\n+   SA_SIGINFO   : constant := 16#0002#;\n+   SA_ONSTACK   : constant := 16#0004#;\n+\n+   SIG_DFL : constant := 0;\n+   SIG_IGN : constant := 1;\n+\n+   type sigset_t is private;\n+\n+   type struct_sigaction is record\n+      sa_handler : System.Address;\n+      sa_mask    : sigset_t;\n+      sa_flags   : int;\n+   end record;\n+   pragma Convention (C, struct_sigaction);\n+   type struct_sigaction_ptr is access all struct_sigaction;\n+\n+   function sigaddset (set : access sigset_t; sig : Signal) return int;\n+   pragma Import (C, sigaddset, \"sigaddset\");\n+\n+   function sigdelset (set : access sigset_t; sig : Signal) return int;\n+   pragma Import (C, sigdelset, \"sigdelset\");\n+\n+   function sigfillset (set : access sigset_t) return int;\n+   pragma Import (C, sigfillset, \"sigfillset\");\n+\n+   function sigismember (set : access sigset_t; sig : Signal) return int;\n+   pragma Import (C, sigismember, \"sigismember\");\n+\n+   function sigemptyset (set : access sigset_t) return int;\n+   pragma Import (C, sigemptyset, \"sigemptyset\");\n+\n+   function sigaction\n+     (sig  : Signal;\n+      act  : struct_sigaction_ptr;\n+      oact : struct_sigaction_ptr) return int;\n+   pragma Import (C, sigaction, \"sigaction\");\n+\n+   type isr_address is access procedure (sig : int);\n+\n+   function c_signal (sig : Signal; handler : isr_address) return isr_address;\n+   pragma Import (C, c_signal, \"signal\");\n+\n+   function sigwait (set : access sigset_t; sig : access Signal) return int;\n+   pragma Inline (sigwait);\n+\n+   function pthread_sigmask\n+     (how  : int;\n+      set  : access sigset_t;\n+      oset : access sigset_t) return int;\n+   pragma Import (C, pthread_sigmask, \"sigprocmask\");\n+\n+   type t_id is new long;\n+   subtype Thread_Id is t_id;\n+\n+   function kill (pid : t_id; sig : Signal) return int;\n+   pragma Inline (kill);\n+\n+   function getpid return t_id;\n+   pragma Inline (getpid);\n+\n+   ----------\n+   -- Time --\n+   ----------\n+\n+   type time_t is new unsigned_long;\n+\n+   type timespec is record\n+      ts_sec  : time_t;\n+      ts_nsec : long;\n+   end record;\n+   pragma Convention (C, timespec);\n+\n+   type clockid_t is private;\n+\n+   CLOCK_REALTIME : constant clockid_t;   --  System wide realtime clock\n+\n+   function To_Duration (TS : timespec) return Duration;\n+   pragma Inline (To_Duration);\n+\n+   function To_Timespec (D : Duration) return timespec;\n+   pragma Inline (To_Timespec);\n+\n+   function To_Clock_Ticks (D : Duration) return int;\n+   --  Convert a duration value (in seconds) into clock ticks\n+\n+   function clock_gettime\n+     (clock_id : clockid_t; tp : access timespec) return int;\n+   pragma Import (C, clock_gettime, \"clock_gettime\");\n+\n+   type ULONG is new unsigned_long;\n+\n+   procedure tickSet (ticks : ULONG);\n+   pragma Import (C, tickSet, \"tickSet\");\n+\n+   function tickGet return ULONG;\n+   pragma Import (C, tickGet, \"tickGet\");\n+\n+   ----------------------\n+   -- Utility Routines --\n+   ----------------------\n+\n+   function To_VxWorks_Priority (Priority : int) return int;\n+   pragma Inline (To_VxWorks_Priority);\n+   --  Convenience routine to convert between VxWorks priority and Ada priority\n+\n+   --------------------------\n+   -- VxWorks specific API --\n+   --------------------------\n+\n+   subtype STATUS is int;\n+   --  Equivalent of the C type STATUS\n+\n+   OK    : constant STATUS := 0;\n+   ERROR : constant STATUS := Interfaces.C.int (-1);\n+\n+   function taskIdVerify (tid : t_id)  return STATUS;\n+   pragma Import (C, taskIdVerify, \"taskIdVerify\");\n+\n+   function taskIdSelf return t_id;\n+   pragma Import (C, taskIdSelf, \"taskIdSelf\");\n+\n+   function taskOptionsGet (tid : t_id; pOptions : access int) return int;\n+   pragma Import (C, taskOptionsGet, \"taskOptionsGet\");\n+\n+   function taskSuspend (tid : t_id) return int;\n+   pragma Import (C, taskSuspend, \"taskSuspend\");\n+\n+   function taskResume (tid : t_id) return int;\n+   pragma Import (C, taskResume, \"taskResume\");\n+\n+   function taskIsSuspended (tid : t_id) return int;\n+   pragma Import (C, taskIsSuspended, \"taskIsSuspended\");\n+\n+   function taskDelay (ticks : int) return int;\n+   procedure taskDelay (ticks : int);\n+   pragma Import (C, taskDelay, \"taskDelay\");\n+\n+   function sysClkRateGet return int;\n+   pragma Import (C, sysClkRateGet, \"sysClkRateGet\");\n+\n+   --  VxWorks 5.x specific functions\n+\n+   function taskVarAdd\n+     (tid : t_id; pVar : access System.Address) return int;\n+   pragma Import (C, taskVarAdd, \"taskVarAdd\");\n+\n+   function taskVarDelete\n+     (tid : t_id; pVar : access System.Address) return int;\n+   pragma Import (C, taskVarDelete, \"taskVarDelete\");\n+\n+   function taskVarSet\n+     (tid   : t_id;\n+      pVar  : access System.Address;\n+      value : System.Address) return int;\n+   pragma Import (C, taskVarSet, \"taskVarSet\");\n+\n+   function taskVarGet\n+     (tid  : t_id;\n+      pVar : access System.Address) return int;\n+   pragma Import (C, taskVarGet, \"taskVarGet\");\n+\n+   --  VxWorks 6.x specific functions\n+\n+   function tlsKeyCreate return int;\n+   pragma Import (C, tlsKeyCreate, \"tlsKeyCreate\");\n+\n+   function tlsValueGet (key : int) return System.Address;\n+   pragma Import (C, tlsValueGet, \"tlsValueGet\");\n+\n+   function tlsValueSet (key : int; value : System.Address) return STATUS;\n+   pragma Import (C, tlsValueSet, \"tlsValueSet\");\n+\n+   --  Option flags for taskSpawn\n+\n+   VX_UNBREAKABLE    : constant := 16#0002#;\n+   VX_FP_PRIVATE_ENV : constant := 16#0080#;\n+   VX_NO_STACK_FILL  : constant := 16#0100#;\n+\n+   function taskSpawn\n+     (name          : System.Address;  --  Pointer to task name\n+      priority      : int;\n+      options       : int;\n+      stacksize     : size_t;\n+      start_routine : System.Address;\n+      arg1          : System.Address;\n+      arg2          : int := 0;\n+      arg3          : int := 0;\n+      arg4          : int := 0;\n+      arg5          : int := 0;\n+      arg6          : int := 0;\n+      arg7          : int := 0;\n+      arg8          : int := 0;\n+      arg9          : int := 0;\n+      arg10         : int := 0) return t_id;\n+   pragma Import (C, taskSpawn, \"taskSpawn\");\n+\n+   procedure taskDelete (tid : t_id);\n+   pragma Import (C, taskDelete, \"taskDelete\");\n+\n+   function Set_Time_Slice (ticks : int) return int;\n+   pragma Inline (Set_Time_Slice);\n+   --  Calls kernelTimeSlice under VxWorks 5.x\n+   --  Do nothing under VxWorks 6.x\n+\n+   function taskPriorityGet (tid : t_id; pPriority : access int) return int;\n+   pragma Import (C, taskPriorityGet, \"taskPriorityGet\");\n+\n+   function taskPrioritySet (tid : t_id; newPriority : int) return int;\n+   pragma Import (C, taskPrioritySet, \"taskPrioritySet\");\n+\n+   --  Semaphore creation flags\n+\n+   SEM_Q_FIFO         : constant := 0;\n+   SEM_Q_PRIORITY     : constant := 1;\n+   SEM_DELETE_SAFE    : constant := 4;  -- only valid for binary semaphore\n+   SEM_INVERSION_SAFE : constant := 8;  -- only valid for binary semaphore\n+\n+   --  Semaphore initial state flags\n+\n+   SEM_EMPTY : constant := 0;\n+   SEM_FULL  : constant := 1;\n+\n+   --  Semaphore take (semTake) time constants\n+\n+   WAIT_FOREVER : constant := -1;\n+   NO_WAIT      : constant := 0;\n+\n+   --  Error codes (errno). The lower level 16 bits are the error code, with\n+   --  the upper 16 bits representing the module number in which the error\n+   --  occurred. By convention, the module number is 0 for UNIX errors. VxWorks\n+   --  reserves module numbers 1-500, with the remaining module numbers being\n+   --  available for user applications.\n+\n+   M_objLib                 : constant := 61 * 2**16;\n+   --  semTake() failure with ticks = NO_WAIT\n+   S_objLib_OBJ_UNAVAILABLE : constant := M_objLib + 2;\n+   --  semTake() timeout with ticks > NO_WAIT\n+   S_objLib_OBJ_TIMEOUT     : constant := M_objLib + 4;\n+\n+   type SEM_ID is new System.Address;\n+   --  typedef struct semaphore *SEM_ID;\n+\n+   --  We use two different kinds of VxWorks semaphores: mutex and binary\n+   --  semaphores. A null ID is returned when a semaphore cannot be created.\n+\n+   function semBCreate (options : int; initial_state : int) return SEM_ID;\n+   pragma Import (C, semBCreate, \"semBCreate\");\n+   --  Create a binary semaphore. Return ID, or 0 if memory could not\n+   --  be allocated.\n+\n+   function semMCreate (options : int) return SEM_ID;\n+   pragma Import (C, semMCreate, \"semMCreate\");\n+\n+   function semDelete (Sem : SEM_ID) return int;\n+   pragma Import (C, semDelete, \"semDelete\");\n+   --  Delete a semaphore\n+\n+   function semGive (Sem : SEM_ID) return int;\n+   pragma Import (C, semGive, \"semGive\");\n+\n+   function semTake (Sem : SEM_ID; timeout : int) return int;\n+   pragma Import (C, semTake, \"semTake\");\n+   --  Attempt to take binary semaphore.  Error is returned if operation\n+   --  times out\n+\n+   function semFlush (SemID : SEM_ID) return STATUS;\n+   pragma Import (C, semFlush, \"semFlush\");\n+   --  Release all threads blocked on the semaphore\n+\n+private\n+   type sigset_t is new unsigned_long_long;\n+\n+   type pid_t is new int;\n+\n+   ERROR_PID : constant pid_t := -1;\n+\n+   type clockid_t is new int;\n+   CLOCK_REALTIME : constant clockid_t := 0;\n+\n+end System.OS_Interface;"}, {"sha": "008e04cf9b132cfa07125b8eb5834b0ebe436489", "filename": "gcc/ada/s-vxwork-arm.ads", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fs-vxwork-arm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fs-vxwork-arm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vxwork-arm.ads?ref=094c3b47d6d05dbb8c17dc1859e6909e27fe1062", "patch": "@@ -0,0 +1,53 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                        S Y S T E M . V X W O R K S                       --\n+--                                                                          --\n+--                                   S p e c                                --\n+--                                                                          --\n+--            Copyright (C) 1998-2005 Free Software Foundation, Inc.        --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University.       --\n+-- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the ARM VxWorks version of this package.\n+\n+package System.VxWorks is\n+   pragma Preelaborate (System.VxWorks);\n+\n+   --  Floating point context record. ARM version\n+\n+   --  The record definition below matches what arch/arm/fppArmLib.h says.\n+\n+   type FP_CONTEXT is record\n+      Dummy : Integer;\n+   end record;\n+\n+   for FP_CONTEXT'Alignment use 4;\n+   pragma Convention (C, FP_CONTEXT);\n+\n+   Num_HW_Interrupts : constant := 256;\n+   --  Number of entries in hardware interrupt vector table.\n+\n+end System.VxWorks;"}, {"sha": "2da5a18bb3dfd41d07b285df8a5c0370b39e427c", "filename": "gcc/ada/system-vxworks-arm.ads", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fsystem-vxworks-arm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094c3b47d6d05dbb8c17dc1859e6909e27fe1062/gcc%2Fada%2Fsystem-vxworks-arm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-arm.ads?ref=094c3b47d6d05dbb8c17dc1859e6909e27fe1062", "patch": "@@ -0,0 +1,158 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                          (VxWorks Version ARM)                           --\n+--                                                                          --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System is\n+pragma Pure (System);\n+--  Note that we take advantage of the implementation permission to make this\n+--  unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada 2005, this is\n+--  Pure in any case (AI-362).\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 1.0 / 60.0;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   pragma Preelaborable_Initialization (Address);\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 32;\n+   Memory_Size  : constant := 2 ** 32;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   --  Ada priorities are mapped to VxWorks priorities using the following\n+   --  transformation: 255 - Ada Priority\n+\n+   --  Ada priorities are used as follows:\n+\n+   --  256        is reserved for the VxWorks kernel\n+   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n+   --  247        is a catchall default \"interrupt\" priority for signals,\n+   --             allowing higher priority than normal tasks, but lower than\n+   --             hardware priority levels.  Protected Object ceilings can\n+   --             override these values.\n+   --  246        is used by the Interrupt_Manager task\n+\n+   Max_Priority           : constant Positive := 245;\n+   Max_Interrupt_Priority : constant Positive := 255;\n+\n+   subtype Any_Priority       is Integer      range   0 .. 255;\n+   subtype Priority           is Any_Priority range   0 .. 245;\n+   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n+\n+   Default_Priority : constant Priority := 122;\n+\n+private\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := False;\n+   Command_Line_Args         : constant Boolean := False;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   Preallocated_Stacks       : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := False;\n+   Support_64_Bit_Divides    : constant Boolean := True;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := True;\n+   ZCX_By_Default            : constant Boolean := False;\n+   GCC_ZCX_Support           : constant Boolean := False;\n+\n+end System;"}]}