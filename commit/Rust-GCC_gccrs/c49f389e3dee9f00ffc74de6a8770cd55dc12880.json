{"sha": "c49f389e3dee9f00ffc74de6a8770cd55dc12880", "node_id": "C_kwDOANBUbNoAKGM0OWYzODllM2RlZTlmMDBmZmM3NGRlNmE4NzcwY2Q1NWRjMTI4ODA", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-10-25T15:16:11Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-10-25T15:18:18Z"}, "message": "Constant fold/simplify SS_ASHIFT and US_ASHIFT in simplify-rtx.c\n\nThis patch adds compile-time evaluation of signed saturating left shift\n(SS_ASHIFT) and unsigned saturating left shift (US_ASHIFT) to simplify-rtx's\nsimplify_const_binary_operation.  US_ASHIFT saturates to the maximum\nunsigned value on overflow (which occurs when the shift is greater than\nthe leading zero count), while SS_ASHIFT saturates on overflow to the\nmaximum signed value for positive arguments, and the minimum signed value\nfor negative arguments (which occurs when the shift count is greater than\nthe number of leading redundant sign bits, clrsb).  This suggests\nsome additional simplifications that this patch implements in\nsimplify_binary_operation_1; us_ashift:HI of 0xffff remains 0xffff\n(much like any ashift of 0x0000 remains 0x0000), and ss_ashift:HI of\n0x7fff remains 0x7ffff, and of 0x8000 remains 0x8000.\n\nConveniently the bfin backend provides instructions/built-ins that allow\nthis functionality to be tested.  The two functions below\n\nshort stest_sat_max() { return __builtin_bfin_shl_fr1x16(10000,8); }\nshort stest_sat_min() { return __builtin_bfin_shl_fr1x16(-10000,8); }\n\npreviously on bfin-elf with -O2 generated:\n\n_stest_sat_max:\n        nop;\n        nop;\n        R0 = 10000 (X);\n        R0 = R0 << 8 (V,S);\n        rts;\n\n_stest_sat_min:\n        nop;\n        nop;\n        R0 = -10000 (X);\n        R0 = R0 << 8 (V,S);\n        rts;\n\nWith this patch, bfin-elf now generates:\n\n_stest_sat_max:\n        nop;\n        nop;\n        nop;\n        R0 = 32767 (X);\n        rts;\n\n_stest_sat_min:\n        nop;\n        nop;\n        nop;\n        R0 = -32768 (X);\n        rts;\n\n2021-10-25  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* simplify-rtx.c (simplify_binary_operation_1) [SS_ASHIFT]: Simplify\n\tshifts of the mode's smin_value and smax_value when the bit count\n\toperand doesn't have side-effects.\n\t[US_ASHIFT]: Likewise, simplify shifts of the mode's umax_value\n\twhen the bit count operand doesn't have side-effects.\n\t(simplify_const_binary_operation) [SS_ASHIFT, US_ASHIFT]: Perform\n\tcompile-time evaluation of saturating left shifts with constant\n\targuments.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/bfin/ssashift-1.c: New test case.", "tree": {"sha": "bf56eb06b9c5bb8875ad23af33a92892b3622a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf56eb06b9c5bb8875ad23af33a92892b3622a29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c49f389e3dee9f00ffc74de6a8770cd55dc12880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c49f389e3dee9f00ffc74de6a8770cd55dc12880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c49f389e3dee9f00ffc74de6a8770cd55dc12880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c49f389e3dee9f00ffc74de6a8770cd55dc12880/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0e01588300d829a78f23e075da22fb27523ecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0e01588300d829a78f23e075da22fb27523ecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b0e01588300d829a78f23e075da22fb27523ecc"}], "stats": {"total": 90, "additions": 89, "deletions": 1}, "files": [{"sha": "bbbd6b74942491e9861ce2928f01b9aa7eeab031", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49f389e3dee9f00ffc74de6a8770cd55dc12880/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49f389e3dee9f00ffc74de6a8770cd55dc12880/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=c49f389e3dee9f00ffc74de6a8770cd55dc12880", "patch": "@@ -4064,9 +4064,25 @@ simplify_context::simplify_binary_operation_1 (rtx_code code,\n \t}\n       break;\n \n-    case ASHIFT:\n     case SS_ASHIFT:\n+      if (CONST_INT_P (trueop0)\n+\t  && HWI_COMPUTABLE_MODE_P (mode)\n+\t  && (UINTVAL (trueop0) == (GET_MODE_MASK (mode) >> 1)\n+\t      || mode_signbit_p (mode, trueop0))\n+\t  && ! side_effects_p (op1))\n+\treturn op0;\n+      goto simplify_ashift;\n+\n     case US_ASHIFT:\n+      if (CONST_INT_P (trueop0)\n+\t  && HWI_COMPUTABLE_MODE_P (mode)\n+\t  && UINTVAL (trueop0) == GET_MODE_MASK (mode)\n+\t  && ! side_effects_p (op1))\n+\treturn op0;\n+      /* FALLTHRU */\n+\n+    case ASHIFT:\n+simplify_ashift:\n       if (trueop1 == CONST0_RTX (mode))\n \treturn op0;\n       if (trueop0 == CONST0_RTX (mode) && ! side_effects_p (op1))\n@@ -5004,6 +5020,8 @@ simplify_const_binary_operation (enum rtx_code code, machine_mode mode,\n \tcase LSHIFTRT:\n \tcase ASHIFTRT:\n \tcase ASHIFT:\n+\tcase SS_ASHIFT:\n+\tcase US_ASHIFT:\n \t  {\n \t    wide_int wop1 = pop1;\n \t    if (SHIFT_COUNT_TRUNCATED)\n@@ -5025,6 +5043,24 @@ simplify_const_binary_operation (enum rtx_code code, machine_mode mode,\n \t\tresult = wi::lshift (pop0, wop1);\n \t\tbreak;\n \n+\t      case SS_ASHIFT:\n+\t\tif (wi::leu_p (wop1, wi::clrsb (pop0)))\n+\t\t  result = wi::lshift (pop0, wop1);\n+\t\telse if (wi::neg_p (pop0))\n+\t\t  result = wi::min_value (int_mode, SIGNED);\n+\t\telse\n+\t\t  result = wi::max_value (int_mode, SIGNED);\n+\t\tbreak;\n+\n+\t      case US_ASHIFT:\n+\t\tif (wi::eq_p (pop0, 0))\n+\t\t  result = pop0;\n+\t\telse if (wi::leu_p (wop1, wi::clz (pop0)))\n+\t\t  result = wi::lshift (pop0, wop1);\n+\t\telse\n+\t\t  result = wi::max_value (int_mode, UNSIGNED);\n+\t\tbreak;\n+\n \t      default:\n \t\tgcc_unreachable ();\n \t      }"}, {"sha": "aba90a68f0bf2803e6f1e1595e84efb4fef6c312", "filename": "gcc/testsuite/gcc.target/bfin/ssashift-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49f389e3dee9f00ffc74de6a8770cd55dc12880/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fssashift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49f389e3dee9f00ffc74de6a8770cd55dc12880/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fssashift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2Fssashift-1.c?ref=c49f389e3dee9f00ffc74de6a8770cd55dc12880", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int test_ok_pos()\n+{\n+  int x = 100;\n+  return __builtin_bfin_shl_fr1x32(x,24);\n+}\n+\n+int test_ok_neg()\n+{\n+  int x = -100;\n+  return __builtin_bfin_shl_fr1x32(x,24);\n+}\n+\n+int test_sat_max()\n+{\n+  int x = 10000;\n+  return __builtin_bfin_shl_fr1x32(x,24);\n+}\n+\n+int test_sat_min()\n+{\n+  int x = -10000;\n+  return __builtin_bfin_shl_fr1x32(x,24);\n+}\n+\n+short stest_ok_pos()\n+{\n+  short x = 100;\n+  return __builtin_bfin_shl_fr1x16(x,8);\n+}\n+\n+short stest_ok_neg()\n+{\n+  short x = -100;\n+  return __builtin_bfin_shl_fr1x16(x,8);\n+}\n+\n+short stest_sat_max()\n+{\n+  short x = 10000;\n+  return __builtin_bfin_shl_fr1x16(x,8);\n+}\n+\n+short stest_sat_min()\n+{\n+  short x = -10000;\n+  return __builtin_bfin_shl_fr1x16(x,8);\n+}\n+/* { dg-final { scan-assembler-not \"\\\\(S\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\(V,S\\\\)\" } } */"}]}