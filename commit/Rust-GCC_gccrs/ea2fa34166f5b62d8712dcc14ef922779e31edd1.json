{"sha": "ea2fa34166f5b62d8712dcc14ef922779e31edd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEyZmEzNDE2NmY1YjYyZDg3MTJkY2MxNGVmOTIyNzc5ZTMxZWRkMQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-10-31T01:48:15Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-31T01:48:15Z"}, "message": "Handle many consecutive location notes more efficiently in dwarf2.\n\n\t* dwarf2out.c (dwarf2out_var_location): When processing several\n\tconsecutive location notes, cache the result of next_real_insn().\n\nFrom-SVN: r180695", "tree": {"sha": "b2c28325717289ceaa8e5cdb8f39f2e13704f39e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2c28325717289ceaa8e5cdb8f39f2e13704f39e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea2fa34166f5b62d8712dcc14ef922779e31edd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2fa34166f5b62d8712dcc14ef922779e31edd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2fa34166f5b62d8712dcc14ef922779e31edd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2fa34166f5b62d8712dcc14ef922779e31edd1/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ceb54d13277b22cff31d9b0c53ba28fda483892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ceb54d13277b22cff31d9b0c53ba28fda483892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ceb54d13277b22cff31d9b0c53ba28fda483892"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "037138ad02e004350b68195a7b4846efc68f64c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2fa34166f5b62d8712dcc14ef922779e31edd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2fa34166f5b62d8712dcc14ef922779e31edd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea2fa34166f5b62d8712dcc14ef922779e31edd1", "patch": "@@ -1,3 +1,8 @@\n+2011-10-30  David S. Miller  <davem@davemloft.net>\n+\n+\t* dwarf2out.c (dwarf2out_var_location): When processing several\n+\tconsecutive location notes, cache the result of next_real_insn().\n+\n 2011-10-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (avx2_vec_dup<mode>): Macroize insn from"}, {"sha": "478952f7211305a65e4d32921c33d1f2f53b73b9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2fa34166f5b62d8712dcc14ef922779e31edd1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2fa34166f5b62d8712dcc14ef922779e31edd1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ea2fa34166f5b62d8712dcc14ef922779e31edd1", "patch": "@@ -20127,10 +20127,12 @@ dwarf2out_var_location (rtx loc_note)\n {\n   char loclabel[MAX_ARTIFICIAL_LABEL_BYTES + 2];\n   struct var_loc_node *newloc;\n-  rtx next_real;\n+  rtx next_real, next_note;\n   static const char *last_label;\n   static const char *last_postcall_label;\n   static bool last_in_cold_section_p;\n+  static rtx expected_next_loc_note;\n+  static rtx cached_next_real_insn;\n   tree decl;\n   bool var_loc_p;\n \n@@ -20149,7 +20151,35 @@ dwarf2out_var_location (rtx loc_note)\n   if (var_loc_p && !DECL_P (NOTE_VAR_LOCATION_DECL (loc_note)))\n     return;\n \n-  next_real = next_real_insn (loc_note);\n+  /* Optimize processing a large consecutive sequence of location\n+     notes so we don't spend too much time in next_real_insn.  If the\n+     next insn is another location note, remember the next_real_insn\n+     calculation for next time.  */\n+  next_real = cached_next_real_insn;\n+  if (next_real)\n+    {\n+      if (expected_next_loc_note != loc_note)\n+\tnext_real = NULL_RTX;\n+    }\n+\n+  next_note = NEXT_INSN (loc_note);\n+  if (! next_note\n+      || INSN_DELETED_P (next_note)\n+      || GET_CODE (next_note) != NOTE\n+      || (NOTE_KIND (next_note) != NOTE_INSN_VAR_LOCATION\n+\t  && NOTE_KIND (next_note) != NOTE_INSN_CALL_ARG_LOCATION))\n+    next_note = NULL_RTX;\n+\n+  if (! next_real)\n+    next_real = next_real_insn (loc_note);\n+\n+  if (next_note)\n+    {\n+      expected_next_loc_note = next_note;\n+      cached_next_real_insn = next_real;\n+    }\n+  else\n+    cached_next_real_insn = NULL_RTX;\n \n   /* If there are no instructions which would be affected by this note,\n      don't do anything.  */"}]}