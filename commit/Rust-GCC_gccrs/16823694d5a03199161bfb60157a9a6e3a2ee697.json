{"sha": "16823694d5a03199161bfb60157a9a6e3a2ee697", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY4MjM2OTRkNWEwMzE5OTE2MWJmYjYwMTU3YTlhNmUzYTJlZTY5Nw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2002-12-05T01:05:13Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2002-12-05T01:05:13Z"}, "message": "Index: gcc/ChangeLog\n2002-12-02  Geoffrey Keating  <geoffk@apple.com>\n\n\t* combine.c (combine_simplify_rtx): Add new canonicalizations.\n\t* doc/md.texi (Insn Canonicalizations): Document new\n\tcanonicalizations for multiply/add combinations.\n\t* config/rs6000/rs6000.md: Add and modify floating add/multiply\n\tpatterns to ensure they're used whenever they can be.\n\nIndex: gcc/testsuite/ChangeLog\n2002-12-02  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gcc.dg/ppc-fmadd-1.c: New file.\n\t* gcc.dg/ppc-fmadd-2.c: New file.\n\t* gcc.dg/ppc-fmadd-3.c: New file.\n\nFrom-SVN: r59841", "tree": {"sha": "a75fcb2170c99b7b343e9abad85d48152fdd43c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a75fcb2170c99b7b343e9abad85d48152fdd43c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16823694d5a03199161bfb60157a9a6e3a2ee697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16823694d5a03199161bfb60157a9a6e3a2ee697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16823694d5a03199161bfb60157a9a6e3a2ee697", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16823694d5a03199161bfb60157a9a6e3a2ee697/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76508852a0241db33b2512c0b460cdf06f7e0ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76508852a0241db33b2512c0b460cdf06f7e0ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76508852a0241db33b2512c0b460cdf06f7e0ce5"}], "stats": {"total": 257, "additions": 253, "deletions": 4}, "files": [{"sha": "cb473f5ecce110b563c33d46953fe719dce94373", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16823694d5a03199161bfb60157a9a6e3a2ee697", "patch": "@@ -1,3 +1,11 @@\n+2002-12-04  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* combine.c (combine_simplify_rtx): Add new canonicalizations.\n+\t* doc/md.texi (Insn Canonicalizations): Document new\n+\tcanonicalizations for multiply/add combinations.\n+\t* config/rs6000/rs6000.md: Add and modify floating add/multiply\n+\tpatterns to ensure they're used whenever they can be.\n+\n 2002-12-04  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.c: Update the comments related to shifts."}, {"sha": "4d24807e486ba5bfb31e0cc75f94959dd264c855", "filename": "gcc/combine.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=16823694d5a03199161bfb60157a9a6e3a2ee697", "patch": "@@ -4029,6 +4029,24 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n \treturn gen_binary (MINUS, mode, XEXP (XEXP (x, 0), 1),\n \t\t\t   XEXP (XEXP (x, 0), 0));\n \n+      /* (neg (plus A B)) is canonicalized to (minus (neg A) B).  */\n+      if (GET_CODE (XEXP (x, 0)) == PLUS\n+\t  && !HONOR_SIGNED_ZEROS (mode)\n+\t  && !HONOR_SIGN_DEPENDENT_ROUNDING (mode))\n+\t{\n+\t  temp = simplify_gen_unary (NEG, mode, XEXP (XEXP (x, 0), 0), mode);\n+\t  temp = combine_simplify_rtx (temp, mode, last, in_dest);\n+\t  return gen_binary (MINUS, mode, temp, XEXP (XEXP (x, 0), 1));\n+\t}\n+\n+      /* (neg (mult A B)) becomes (mult (neg A) B).  \n+         This works even for floating-point values.  */\n+      if (GET_CODE (XEXP (x, 0)) == MULT)\n+\t{\n+\t  temp = simplify_gen_unary (NEG, mode, XEXP (XEXP (x, 0), 0), mode);\n+\t  return gen_binary (MULT, mode, temp, XEXP (XEXP (x, 0), 1));\n+\t}\n+\n       /* (neg (xor A 1)) is (plus A -1) if A is known to be either 0 or 1.  */\n       if (GET_CODE (XEXP (x, 0)) == XOR && XEXP (XEXP (x, 0), 1) == const1_rtx\n \t  && nonzero_bits (XEXP (XEXP (x, 0), 0), mode) == 1)\n@@ -4217,6 +4235,19 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n #endif\n \n     case PLUS:\n+      /* Canonicalize (plus (mult (neg B) C) A) to (minus A (mult B C)).\n+       */\n+      if (GET_CODE (XEXP (x, 0)) == MULT \n+\t  && GET_CODE (XEXP (XEXP (x, 0), 0)) == NEG)\n+\t{\n+\t  rtx in1, in2;\n+\t \n+\t  in1 = XEXP (XEXP (XEXP (x, 0), 0), 0);\n+\t  in2 = XEXP (XEXP (x, 0), 1);\n+\t  return gen_binary (MINUS, mode, XEXP (x, 1),\n+\t\t\t     gen_binary (MULT, mode, in1, in2));\n+\t}\n+\n       /* If we have (plus (plus (A const) B)), associate it so that CONST is\n \t outermost.  That's because that's the way indexed addresses are\n \t supposed to appear.  This code used to check many more cases, but\n@@ -4323,6 +4354,32 @@ combine_simplify_rtx (x, op0_mode, last, in_dest)\n \treturn simplify_and_const_int (NULL_RTX, mode, XEXP (x, 0),\n \t\t\t\t       -INTVAL (XEXP (XEXP (x, 1), 1)) - 1);\n \n+      /* Canonicalize (minus A (mult (neg B) C)) to (plus (mult B C) A).\n+       */\n+      if (GET_CODE (XEXP (x, 1)) == MULT \n+\t  && GET_CODE (XEXP (XEXP (x, 1), 0)) == NEG)\n+\t{\n+\t  rtx in1, in2;\n+\t \n+\t  in1 = XEXP (XEXP (XEXP (x, 1), 0), 0);\n+\t  in2 = XEXP (XEXP (x, 1), 1);\n+\t  return gen_binary (PLUS, mode, gen_binary (MULT, mode, in1, in2),\n+\t\t\t     XEXP (x, 0));\n+\t}\n+\n+       /* Canonicalize (minus (neg A) (mult B C)) to \n+\t  (minus (mult (neg B) C) A). */\n+      if (GET_CODE (XEXP (x, 1)) == MULT \n+\t  && GET_CODE (XEXP (x, 0)) == NEG)\n+\t{\n+\t  rtx in1, in2;\n+\t \n+\t  in1 = simplify_gen_unary (NEG, mode, XEXP (XEXP (x, 1), 0), mode);\n+\t  in2 = XEXP (XEXP (x, 1), 1);\n+\t  return gen_binary (MINUS, mode, gen_binary (MULT, mode, in1, in2),\n+\t\t\t     XEXP (XEXP (x, 0), 0));\n+\t}\n+\n       /* Canonicalize (minus A (plus B C)) to (minus (minus A B) C) for\n \t integers.  */\n       if (GET_CODE (XEXP (x, 1)) == PLUS && INTEGRAL_MODE_P (mode))"}, {"sha": "16f083b1c70a35092f08ae6f31062c068f997541", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 68, "deletions": 4, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=16823694d5a03199161bfb60157a9a6e3a2ee697", "patch": "@@ -5280,7 +5280,18 @@\n \t(neg:SF (plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+   && HONOR_SIGNED_ZEROS (SFmode)\"\n+  \"fnmadds %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(minus:SF (mult:SF (neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\"))\n+\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n+\t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+   && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmadds %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5293,12 +5304,33 @@\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(minus:SF (mult:SF (neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\"))\n+\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n+\t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+   && ! HONOR_SIGNED_ZEROS (SFmode)\"\n+  \"{fnma|fnmadd} %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"dmul\")])\n+\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:SF (minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+   && HONOR_SIGNED_ZEROS (SFmode)\"\n+  \"fnmsubs %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(minus:SF (match_operand:SF 3 \"gpc_reg_operand\" \"f\")\n+\t\t  (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n+\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))))]\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+   && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmsubs %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5311,6 +5343,16 @@\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(minus:SF (match_operand:SF 3 \"gpc_reg_operand\" \"f\")\n+\t\t  (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n+\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))))]\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+   && ! HONOR_SIGNED_ZEROS (SFmode)\"\n+  \"{fnms|fnmsub} %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+\n (define_expand \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n@@ -5524,7 +5566,18 @@\n \t(neg:DF (plus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+   && HONOR_SIGNED_ZEROS (DFmode)\"\n+  \"{fnma|fnmadd} %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"dmul\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(minus:DF (mult:DF (neg:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))\n+\t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n+\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+   && ! HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5533,7 +5586,18 @@\n \t(neg:DF (minus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+   && HONOR_SIGNED_ZEROS (DFmode)\"\n+  \"{fnms|fnmsub} %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"dmul\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(minus:DF (match_operand:DF 3 \"gpc_reg_operand\" \"f\")\n+\t          (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n+\t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD \n+   && ! HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n "}, {"sha": "bc187c511b4ab7b2d52abc4b2ef5e557f4e52c38", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=16823694d5a03199161bfb60157a9a6e3a2ee697", "patch": "@@ -3670,6 +3670,14 @@ For these operators, if only one operand is a @code{neg}, @code{not},\n @code{mult}, @code{plus}, or @code{minus} expression, it will be the\n first operand.\n \n+@item\n+In combinations of @code{neg}, @code{mult}, @code{plus}, and\n+@code{minus}, the @code{neg} operations (if any) will be moved inside\n+the operations as far as possible.  For instance, \n+@code{(neg (mult A B))} is canonicalized as @code{(mult (neg A) B)}, but\n+@code{(plus (mult (neg A) B) C)} is canonicalized as\n+@code{(minus A (mult B C))}.\n+\n @cindex @code{compare}, canonicalization of\n @item\n For the @code{compare} operator, a constant is always the second operand"}, {"sha": "c8181d4123327c8da13d024847a976e270a1e240", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16823694d5a03199161bfb60157a9a6e3a2ee697", "patch": "@@ -1,3 +1,9 @@\n+2002-12-04  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/ppc-fmadd-1.c: New file.\n+\t* gcc.dg/ppc-fmadd-2.c: New file.\n+\t* gcc.dg/ppc-fmadd-3.c: New file.\n+\n 2002-12-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.c-torture/compile/20021204-1.c: New test."}, {"sha": "ff959f2d1317c9718593c41b61931ec0299fe4ce", "filename": "gcc/testsuite/gcc.dg/ppc-fmadd-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fmadd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fmadd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fmadd-1.c?ref=16823694d5a03199161bfb60157a9a6e3a2ee697", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-ffast-math -O2\" } */\n+/* { dg-final { scan-assembler-not \"f(add|sub|mul|neg)\" } } */\n+\n+void foo(double *a, double *b, double *c, double *d)\n+{\n+  a[0] =  b[0] + c[0] * d[0];\t\t// fmadd\n+  a[1] =  b[1] - c[1] * d[1];\t\t// fnmsub with fast-math\n+  a[2] = -b[2] + c[2] * d[2];   \t// fmsub\n+  a[3] = -b[3] - c[3] * d[3];\t\t// fnmadd with fast-math\n+  a[4] = -( b[4] + c[4] * d[4]);\t// fnmadd\n+  a[5] = -( b[5] - c[5] * d[5]);\t// fmsub with fast-math\n+  a[6] = -(-b[6] + c[6] * d[6]);\t// fnmsub\n+  a[7] = -(-b[7] - c[7] * d[7]);\t// fmadd with fast-math\n+  a[10] =  b[10] - c[10] * -d[10];\t// fmadd\n+  a[11] =  b[11] + c[11] * -d[11];\t// fnmsub with fast-math\n+  a[12] = -b[12] - c[12] * -d[12];   \t// fmsub\n+  a[13] = -b[13] + c[13] * -d[13];\t// fnmadd with fast-math\n+  a[14] = -( b[14] - c[14] * -d[14]);\t// fnmadd\n+  a[15] = -( b[15] + c[15] * -d[15]);\t// fmsub with fast-math\n+  a[16] = -(-b[16] - c[16] * -d[16]);\t// fnmsub\n+  a[17] = -(-b[17] + c[17] * -d[17]);\t// fmadd with fast-math\n+}\n+\n+void foos(float *a, float *b, float *c, float *d)\n+{\n+  a[0] =  b[0] + c[0] * d[0];\t\t// fmadd\n+  a[1] =  b[1] - c[1] * d[1];\t\t// fnmsub with fast-math\n+  a[2] = -b[2] + c[2] * d[2];   \t// fmsub\n+  a[3] = -b[3] - c[3] * d[3];\t\t// fnmadd with fast-math\n+  a[4] = -( b[4] + c[4] * d[4]);\t// fnmadd\n+  a[5] = -( b[5] - c[5] * d[5]);\t// fmsub with fast-math\n+  a[6] = -(-b[6] + c[6] * d[6]);\t// fnmsub\n+  a[7] = -(-b[7] - c[7] * d[7]);\t// fmadd with fast-math\n+  a[10] =  b[10] - c[10] * -d[10];\t// fmadd\n+  a[11] =  b[11] + c[11] * -d[11];\t// fnmsub with fast-math\n+  a[12] = -b[12] - c[12] * -d[12];   \t// fmsub\n+  a[13] = -b[13] + c[13] * -d[13];\t// fnmadd with fast-math\n+  a[14] = -( b[14] - c[14] * -d[14]);\t// fnmadd\n+  a[15] = -( b[15] + c[15] * -d[15]);\t// fmsub with fast-math\n+  a[16] = -(-b[16] - c[16] * -d[16]);\t// fnmsub\n+  a[17] = -(-b[17] + c[17] * -d[17]);\t// fmadd with fast-math\n+}"}, {"sha": "02ed811dace2a48609a663dc90b9c65410f3836d", "filename": "gcc/testsuite/gcc.dg/ppc-fmadd-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fmadd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fmadd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fmadd-2.c?ref=16823694d5a03199161bfb60157a9a6e3a2ee697", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"f(add|sub|mul|neg)\" } } */\n+\n+void foo(double *a, double *b, double *c, double *d)\n+{\n+  a[0] =  b[0] + c[0] * d[0];\t\t// fmadd\n+  a[2] = -b[2] + c[2] * d[2];   \t// fmsub\n+  a[4] = -( b[4] + c[4] * d[4]);\t// fnmadd\n+  a[6] = -(-b[6] + c[6] * d[6]);\t// fnmsub\n+  a[10] =  b[10] - c[10] * -d[10];\t// fmadd\n+  a[12] = -b[12] - c[12] * -d[12];   \t// fmsub\n+  a[14] = -( b[14] - c[14] * -d[14]);\t// fnmadd\n+  a[16] = -(-b[16] - c[16] * -d[16]);\t// fnmsub\n+}\n+\n+void foos(float *a, float *b, float *c, float *d)\n+{\n+  a[0] =  b[0] + c[0] * d[0];\t\t// fmadd\n+  a[2] = -b[2] + c[2] * d[2];   \t// fmsub\n+  a[4] = -( b[4] + c[4] * d[4]);\t// fnmadd\n+  a[6] = -(-b[6] + c[6] * d[6]);\t// fnmsub\n+  a[10] =  b[10] - c[10] * -d[10];\t// fmadd\n+  a[12] = -b[12] - c[12] * -d[12];   \t// fmsub\n+  a[14] = -( b[14] - c[14] * -d[14]);\t// fnmadd\n+  a[16] = -(-b[16] - c[16] * -d[16]);\t// fnmsub\n+}"}, {"sha": "d4205225caf02d5944980b9d1c86e80ed5eba56d", "filename": "gcc/testsuite/gcc.dg/ppc-fmadd-3.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fmadd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16823694d5a03199161bfb60157a9a6e3a2ee697/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fmadd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fppc-fmadd-3.c?ref=16823694d5a03199161bfb60157a9a6e3a2ee697", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"f(add|sub|mul)\" } } */\n+\n+void foo(double *a, double *b, double *c, double *d)\n+{\n+#if 0\n+  a[1] =  b[1] - c[1] * d[1];\t\t// fneg, fmadd without fast-math\n+#endif\n+  a[3] = -b[3] - c[3] * d[3];\t\t// fneg, fmsub without fast-math\n+#if 0\n+  a[5] = -( b[5] - c[5] * d[5]);\t// fneg, fnmadd without fast-math\n+#endif\n+  a[7] = -(-b[7] - c[7] * d[7]);\t// fneg, fnmsub without fast-math\n+  a[11] =  b[11] + c[11] * -d[11];\t// fneg, fmadd without fast-math\n+  a[13] = -b[13] + c[13] * -d[13];\t// fneg, fmsub without fast-math\n+  a[15] = -( b[15] + c[15] * -d[15]);\t// fneg, fnmadd without fast-math\n+  a[17] = -(-b[17] + c[17] * -d[17]);\t// fneg, fnmsub without fast-math\n+}\n+\n+void foos(float *a, float *b, float *c, float *d)\n+{\n+#if 0\n+  a[1] =  b[1] - c[1] * d[1];\t\t// fneg, fmadd without fast-math\n+#endif\n+  a[3] = -b[3] - c[3] * d[3];\t\t// fneg, fmsub without fast-math\n+#if 0\n+  a[5] = -( b[5] - c[5] * d[5]);\t// fneg, fnmadd without fast-math\n+#endif\n+  a[7] = -(-b[7] - c[7] * d[7]);\t// fneg, fnmsub without fast-math\n+  a[11] =  b[11] + c[11] * -d[11];\t// fneg, fmadd without fast-math\n+  a[13] = -b[13] + c[13] * -d[13];\t// fneg, fmsub without fast-math\n+  a[15] = -( b[15] + c[15] * -d[15]);\t// fneg, fnmadd without fast-math\n+  a[17] = -(-b[17] + c[17] * -d[17]);\t// fneg, fnmsub without fast-math\n+}\n+"}]}