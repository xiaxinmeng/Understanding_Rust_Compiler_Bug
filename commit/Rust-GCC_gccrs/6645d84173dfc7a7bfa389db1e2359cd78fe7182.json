{"sha": "6645d84173dfc7a7bfa389db1e2359cd78fe7182", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0NWQ4NDE3M2RmYzdhN2JmYTM4OWRiMWUyMzU5Y2Q3OGZlNzE4Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-01T13:33:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-01T13:33:18Z"}, "message": "More is_a <scalar_int_mode>\n\nalias.c:find_base_term and find_base_value checked:\n\n      if (GET_MODE_SIZE (GET_MODE (src)) < GET_MODE_SIZE (Pmode))\n\nbut (a) comparing the precision seems more correct, since it's possible\nfor modes to have the same memory size as Pmode but fewer bits and\n(b) the functions are called on arbitrary rtl, so there's no guarantee\nthat we're handling an integer truncation.\n\nSince there's no point processing truncations of anything other than an\ninteger, this patch checks that first.\n\n2017-11-01  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* alias.c (find_base_value, find_base_term): Only process integer\n\ttruncations.  Check the precision rather than the size.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r254306", "tree": {"sha": "da0bcaa1c94b726da065df4b322e2369ee72ddfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da0bcaa1c94b726da065df4b322e2369ee72ddfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6645d84173dfc7a7bfa389db1e2359cd78fe7182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6645d84173dfc7a7bfa389db1e2359cd78fe7182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6645d84173dfc7a7bfa389db1e2359cd78fe7182", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6645d84173dfc7a7bfa389db1e2359cd78fe7182/comments", "author": null, "committer": null, "parents": [{"sha": "7aaba298fe122dfd40bb612623df89db08499f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aaba298fe122dfd40bb612623df89db08499f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aaba298fe122dfd40bb612623df89db08499f8b"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "209219cc8f65656bfab5168cefba4afe6a480e16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6645d84173dfc7a7bfa389db1e2359cd78fe7182/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6645d84173dfc7a7bfa389db1e2359cd78fe7182/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6645d84173dfc7a7bfa389db1e2359cd78fe7182", "patch": "@@ -1,3 +1,10 @@\n+2017-11-01  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* alias.c (find_base_value, find_base_term): Only process integer\n+\ttruncations.  Check the precision rather than the size.\n+\n 2017-11-01  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "a02eadcaea81dcd2706ca91e56aca5aaa55b6116", "filename": "gcc/alias.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6645d84173dfc7a7bfa389db1e2359cd78fe7182/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6645d84173dfc7a7bfa389db1e2359cd78fe7182/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=6645d84173dfc7a7bfa389db1e2359cd78fe7182", "patch": "@@ -1349,6 +1349,7 @@ static rtx\n find_base_value (rtx src)\n {\n   unsigned int regno;\n+  scalar_int_mode int_mode;\n \n #if defined (FIND_BASE_TERM)\n   /* Try machine-dependent ways to find the base term.  */\n@@ -1475,7 +1476,8 @@ find_base_value (rtx src)\n \t address modes depending on the address space.  */\n       if (!target_default_pointer_address_modes_p ())\n \tbreak;\n-      if (GET_MODE_SIZE (GET_MODE (src)) < GET_MODE_SIZE (Pmode))\n+      if (!is_a <scalar_int_mode> (GET_MODE (src), &int_mode)\n+\t  || GET_MODE_PRECISION (int_mode) < GET_MODE_PRECISION (Pmode))\n \tbreak;\n       /* Fall through.  */\n     case HIGH:\n@@ -1876,6 +1878,7 @@ find_base_term (rtx x)\n   cselib_val *val;\n   struct elt_loc_list *l, *f;\n   rtx ret;\n+  scalar_int_mode int_mode;\n \n #if defined (FIND_BASE_TERM)\n   /* Try machine-dependent ways to find the base term.  */\n@@ -1893,7 +1896,8 @@ find_base_term (rtx x)\n \t address modes depending on the address space.  */\n       if (!target_default_pointer_address_modes_p ())\n \treturn 0;\n-      if (GET_MODE_SIZE (GET_MODE (x)) < GET_MODE_SIZE (Pmode))\n+      if (!is_a <scalar_int_mode> (GET_MODE (x), &int_mode)\n+\t  || GET_MODE_PRECISION (int_mode) < GET_MODE_PRECISION (Pmode))\n \treturn 0;\n       /* Fall through.  */\n     case HIGH:"}]}