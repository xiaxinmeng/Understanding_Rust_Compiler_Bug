{"sha": "5b4dd0158308d1a3effffd6316f1b39fdd1ad120", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI0ZGQwMTU4MzA4ZDFhM2VmZmZmZDYzMTZmMWIzOWZkZDFhZDEyMA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-21T17:33:29Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-21T17:33:29Z"}, "message": "re PR fortran/77325 (ICE in gimplify_var_or_parm_decl, at gimplify.c:1933)\n\n2018-09-21  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/77325\n\t* trans-array.c (gfc_alloc_allocatable_for_assignment): If the\n\trhs has a charlen expression, convert that and use it.\n\t* trans-expr.c (gfc_trans_assignment_1): The rse.pre for the\n\tassignment of deferred character array vars to a realocatable\n\tlhs should not be added to the exterior block since vector\n\tindices, for example, generate temporaries indexed within the\n\tloop.\n\n2018-09-21  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/77325\n\t* gfortran.dg/deferred_character_22.f90 : New test.\n\nFrom-SVN: r264486", "tree": {"sha": "724835af8e907b547caed382d219d76051a50c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/724835af8e907b547caed382d219d76051a50c9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b4dd0158308d1a3effffd6316f1b39fdd1ad120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b4dd0158308d1a3effffd6316f1b39fdd1ad120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b4dd0158308d1a3effffd6316f1b39fdd1ad120", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b4dd0158308d1a3effffd6316f1b39fdd1ad120/comments", "author": null, "committer": null, "parents": [{"sha": "fd876246ee8a5aabb710673f7a8bc49b7c15fe84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd876246ee8a5aabb710673f7a8bc49b7c15fe84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd876246ee8a5aabb710673f7a8bc49b7c15fe84"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "e6bf429494810861b8b9bbc30efe938bef1e7a30", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4dd0158308d1a3effffd6316f1b39fdd1ad120/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4dd0158308d1a3effffd6316f1b39fdd1ad120/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5b4dd0158308d1a3effffd6316f1b39fdd1ad120", "patch": "@@ -1,3 +1,14 @@\n+2018-09-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/77325\n+\t* trans-array.c (gfc_alloc_allocatable_for_assignment): If the\n+\trhs has a charlen expression, convert that and use it.\n+\t* trans-expr.c (gfc_trans_assignment_1): The rse.pre for the\n+\tassignment of deferred character array vars to a realocatable\n+\tlhs should not be added to the exterior block since vector\n+\tindices, for example, generate temporaries indexed within the\n+\tloop.\n+\n 2018-09-21  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/87359"}, {"sha": "9e00eb0474faf4838d64b9d671df262aa3c12539", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4dd0158308d1a3effffd6316f1b39fdd1ad120/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4dd0158308d1a3effffd6316f1b39fdd1ad120/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=5b4dd0158308d1a3effffd6316f1b39fdd1ad120", "patch": "@@ -9964,6 +9964,15 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n \t      tmp = concat_str_length (expr2);\n \t      expr2->ts.u.cl->backend_decl = gfc_evaluate_now (tmp, &fblock);\n \t    }\n+\t  else if (!tmp && expr2->ts.u.cl->length)\n+\t    {\n+\t      gfc_se tmpse;\n+\t      gfc_init_se (&tmpse, NULL);\n+\t      gfc_conv_expr_type (&tmpse, expr2->ts.u.cl->length,\n+\t\t\t\t  gfc_charlen_type_node);\n+\t      tmp = tmpse.expr;\n+\t      expr2->ts.u.cl->backend_decl = gfc_evaluate_now (tmp, &fblock);\n+\t    }\n \t  tmp = fold_convert (TREE_TYPE (expr1->ts.u.cl->backend_decl), tmp);\n \t}\n "}, {"sha": "1453828684bfb5885d3fda51c5cbd5935fdd3d23", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4dd0158308d1a3effffd6316f1b39fdd1ad120/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4dd0158308d1a3effffd6316f1b39fdd1ad120/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=5b4dd0158308d1a3effffd6316f1b39fdd1ad120", "patch": "@@ -10275,17 +10275,21 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n   /* When assigning a character function result to a deferred-length variable,\n      the function call must happen before the (re)allocation of the lhs -\n      otherwise the character length of the result is not known.\n-     NOTE: This relies on having the exact dependence of the length type\n+     NOTE 1: This relies on having the exact dependence of the length type\n      parameter available to the caller; gfortran saves it in the .mod files.\n-     NOTE ALSO: The concatenation operation generates a temporary pointer,\n+     NOTE 2: Vector array references generate an index temporary that must\n+     not go outside the loop. Otherwise, variables should not generate\n+     a pre block.\n+     NOTE 3: The concatenation operation generates a temporary pointer,\n      whose allocation must go to the innermost loop.\n-     NOTE ALSO (2): Elemental functions may generate a temporary, too.  */\n+     NOTE 4: Elemental functions may generate a temporary, too.  */\n   if (flag_realloc_lhs\n       && expr2->ts.type == BT_CHARACTER && expr1->ts.deferred\n       && !(lss != gfc_ss_terminator\n \t   && rss != gfc_ss_terminator\n-\t   && ((expr2->expr_type == EXPR_FUNCTION\n-\t\t&& expr2->value.function.esym != NULL\n+\t   && ((expr2->expr_type == EXPR_VARIABLE && expr2->rank)\n+\t       || (expr2->expr_type == EXPR_FUNCTION\n+\t\t   && expr2->value.function.esym != NULL\n \t\t   && expr2->value.function.esym->attr.elemental)\n \t       || (expr2->expr_type == EXPR_FUNCTION\n \t\t   && expr2->value.function.isym != NULL"}, {"sha": "ea6cefb5f35cb2185cc6a4571db104aa38a19cd5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4dd0158308d1a3effffd6316f1b39fdd1ad120/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4dd0158308d1a3effffd6316f1b39fdd1ad120/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b4dd0158308d1a3effffd6316f1b39fdd1ad120", "patch": "@@ -1,3 +1,8 @@\n+2018-09-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/77325\n+\t* gfortran.dg/deferred_character_22.f90 : New test.\n+\n 2018-09-21  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/87359"}, {"sha": "50378865a641ade7822f83d77aa5ad4714de0e9c", "filename": "gcc/testsuite/gfortran.dg/deferred_character_22.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b4dd0158308d1a3effffd6316f1b39fdd1ad120/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_character_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b4dd0158308d1a3effffd6316f1b39fdd1ad120/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_character_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_character_22.f90?ref=5b4dd0158308d1a3effffd6316f1b39fdd1ad120", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR77325, which casued an ICE in the gimplifier. The\n+! segafults in 'contains_struct_check' were found while diagnosing the PR.\n+!\n+! Contributed by Gerhard Steinmetz  <gerhard.steinmetz.fortran@t-online.de>\n+!\n+program p\n+   character(3), parameter :: a(3) = ['abc', 'def', 'ghi']\n+   character(1), parameter :: c(3) = ['a', 'b', 'c']\n+   character(:), allocatable :: z(:)\n+   z = c([3,2])          ! Vector subscripts caused an iCE in the gimplifier.\n+   if (any (z .ne. ['c', 'b'])) stop 1\n+   z = c\n+   if (any (z .ne. ['a', 'b', 'c'])) stop 2\n+   z = c(2:1:-1)\n+   if (any (z .ne. ['b', 'a'])) stop 3\n+   z = c(3)\n+   if (any (z .ne. ['c', 'c'])) stop 4\n+   z = a([3,1,2])\n+   if (any (z .ne. ['ghi', 'abc', 'def'])) stop 5\n+   z = a(1:2)(2:3)       ! Substrings caused a segfault in 'contains_struct_check'.\n+   if (any (z .ne. ['bc', 'ef'])) stop 6\n+   z = a([2,3,1])(2:3)   ! ditto\n+   if (any (z .ne. ['ef', 'hi', 'bc'])) stop 7\n+   deallocate (z)\n+end"}]}