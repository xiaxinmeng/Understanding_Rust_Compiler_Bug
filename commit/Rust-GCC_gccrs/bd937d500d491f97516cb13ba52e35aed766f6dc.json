{"sha": "bd937d500d491f97516cb13ba52e35aed766f6dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5MzdkNTAwZDQ5MWY5NzUxNmNiMTNiYTUyZTM1YWVkNzY2ZjZkYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-25T21:53:51Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-25T21:53:51Z"}, "message": "[multiple changes]\n\n\n2001-05-25  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tother/2931\n\t* acinclude.m4 (GLIBCPP_ENABLE_C99): Use AC_TRY_COMPILE.\n\t* aclocal.m4: Regenerate.\n\t* configure: Same.\n\n2001-05-24  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n            Phil Edwards  <pme@sources.redhat.com>\n\t    Alexandre Oliva  <aoliva@redhat.com>\n\n        * acinclude.m4 (GLIBCPP_EXPORT_INSTALL_INFO): Set glibcpp_srcdir\n        in an amd-safe manner. Revert glibcpp_prefixdir.\n\nFrom-SVN: r42596", "tree": {"sha": "88f7b604c24f3abee9f154f39f24fad871dce556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88f7b604c24f3abee9f154f39f24fad871dce556"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd937d500d491f97516cb13ba52e35aed766f6dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd937d500d491f97516cb13ba52e35aed766f6dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd937d500d491f97516cb13ba52e35aed766f6dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd937d500d491f97516cb13ba52e35aed766f6dc/comments", "author": null, "committer": null, "parents": [{"sha": "4e588ec90ee84124a647f85455f0c7858c5f52c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e588ec90ee84124a647f85455f0c7858c5f52c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e588ec90ee84124a647f85455f0c7858c5f52c9"}], "stats": {"total": 2170, "additions": 974, "deletions": 1196}, "files": [{"sha": "fbdd08111ddec7cb26c3eb21846d3b0bcbe283ef", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd937d500d491f97516cb13ba52e35aed766f6dc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd937d500d491f97516cb13ba52e35aed766f6dc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bd937d500d491f97516cb13ba52e35aed766f6dc", "patch": "@@ -1,3 +1,17 @@\n+2001-05-25  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tother/2931\n+\t* acinclude.m4 (GLIBCPP_ENABLE_C99): Use AC_TRY_COMPILE.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Same.\n+\t\n+2001-05-24  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+            Phil Edwards  <pme@sources.redhat.com>\n+\t    Alexandre Oliva  <aoliva@redhat.com>\n+\n+        * acinclude.m4 (GLIBCPP_EXPORT_INSTALL_INFO): Set glibcpp_srcdir\n+        in an amd-safe manner. Revert glibcpp_prefixdir.\n+\n 2001-05-25  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* include/c_std/bits/std_cmath.h: Tweak.  #define away abs, cos,"}, {"sha": "b6d3d3a88d9835c59313263d0f8d6ecb86600f4a", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd937d500d491f97516cb13ba52e35aed766f6dc/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd937d500d491f97516cb13ba52e35aed766f6dc/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=bd937d500d491f97516cb13ba52e35aed766f6dc", "patch": "@@ -1315,6 +1315,7 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   AC_LANG_CPLUSPLUS\n \n   # Check for the existence of <math.h> functions used if C99 is enabled.\n+  ac_c99_math=yes;\n   AC_TRY_COMPILE([#include <math.h>],[fpclassify(0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[isfinite(0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[isinf(0.0);],, [ac_c99_math=no])\n@@ -1323,20 +1324,25 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   AC_TRY_COMPILE([#include <math.h>],[signbit(0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[isgreater(0.0,0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],\n-                 [isgreaterequal(0.0,0.0);], , [ac_c99_math=no])\n+                 [isgreaterequal(0.0,0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[isless(0.0,0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[islessequal(0.0,0.0);],,[ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],\n-\t         [islessgreater(0.0,0.0);], , [ac_c99_math=no])\n+\t         [islessgreater(0.0,0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],\n-\t         [isunordered(0.0,0.0);], , [ac_c99_math=no])\n+\t         [isunordered(0.0,0.0);],, [ac_c99_math=no])\n+  AC_MSG_CHECKING([for ISO C99 support in <math.h>])\n+  AC_MSG_RESULT($ac_c99_math)\n \n   # Check for the existence in <stdlib.h> of lldiv_t, et. al.\n-  AC_CHECK_FUNC(strtoll,,ac_c99_stdlib=no)\n-  AC_CHECK_FUNC(strtoull,,ac_c99_stdlib=no)\n-  AC_CHECK_FUNC(llabs,,ac_c99_stdlib=no)\n-  AC_CHECK_FUNC(lldiv,,ac_c99_stdlib=no)\n-  AC_CHECK_FUNC(atoll,,ac_c99_stdlib=no)\n+  ac_c99_stdlib=yes;\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+\t         [char* tmp; strtoll(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+\t         [char* tmp; strtoull(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [llabs(10);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [lldiv(10,1);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [atoll(\"10\");],, [ac_c99_stdlib=no])\n \t\n   AC_MSG_CHECKING([for lldiv_t declaration])\n   AC_CACHE_VAL(ac_c99_lldiv_t, [\n@@ -1348,11 +1354,19 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   if test x\"$ac_c99_lldiv_t\" = x\"no\"; then\n     ac_c99_stdlib=no; \n   fi; \n+  AC_MSG_CHECKING([for ISO C99 support in <stdlib.h>])\n+  AC_MSG_RESULT($ac_c99_stdlib)\n \n   # Check for the existence of <wchar.h> functions used if C99 is enabled.\n-  AC_CHECK_FUNC(wcstold,,ac_c99_wchar=no)\n-  AC_CHECK_FUNC(wcstoll,,ac_c99_wchar=no)\n-  AC_CHECK_FUNC(wcstoull,,ac_c99_wchar=no)\n+  ac_c99_wchar=yes;\n+  AC_TRY_COMPILE([#include <wchar.h>], \n+\t         [wcstold(L\"10.0\", NULL);],, [ac_c99_wchar=no])\n+  AC_TRY_COMPILE([#include <wchar.h>], \n+\t         [wcstoll(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n+  AC_TRY_COMPILE([#include <wchar.h>], \n+\t         [wcstoull(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n+  AC_MSG_CHECKING([for ISO C99 support in <wchar.h>])\n+  AC_MSG_RESULT($ac_c99_wchar)\n \n   AC_MSG_CHECKING([for enabled ISO C99 support])\n   if test x\"$ac_c99_math\" = x\"no\" || test x\"$ac_c99_wchar\" = x\"no\" \\\n@@ -1580,10 +1594,15 @@ glibcpp_toolexecdir=no\n glibcpp_toolexeclibdir=no\n \n # Export build and source directories.\n-# These need to be absolute paths, thus the use of pwd.\n+# These need to be absolute paths, yet at the same time need to\n+# canonicalize only relative paths, because then amd will not unmount\n+# drives. Thus the use of PWDCMD: set it to 'pawd' or 'amq -w' if using amd.\n glibcpp_builddir=`pwd`\n-glibcpp_srcdir=`cd ${srcdir} && pwd`\n-glibcpp_prefixdir=`cd ${prefix} && pwd`\n+case $srcdir in\n+[\\\\/$]* | ?:[\\\\/]*) glibcpp_srcdir=${srcdir} ;;\n+*) glibcpp_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n+esac\n+glibcpp_prefixdir=${prefix}\n \n AC_MSG_CHECKING([for interface version number])\n libstdcxx_interface=$INTERFACE"}, {"sha": "3053281262df10f305c21be20c1ca89c3d77739d", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd937d500d491f97516cb13ba52e35aed766f6dc/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd937d500d491f97516cb13ba52e35aed766f6dc/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=bd937d500d491f97516cb13ba52e35aed766f6dc", "patch": "@@ -1327,6 +1327,7 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   AC_LANG_CPLUSPLUS\n \n   # Check for the existence of <math.h> functions used if C99 is enabled.\n+  ac_c99_math=yes;\n   AC_TRY_COMPILE([#include <math.h>],[fpclassify(0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[isfinite(0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[isinf(0.0);],, [ac_c99_math=no])\n@@ -1335,20 +1336,25 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   AC_TRY_COMPILE([#include <math.h>],[signbit(0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[isgreater(0.0,0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],\n-                 [isgreaterequal(0.0,0.0);], , [ac_c99_math=no])\n+                 [isgreaterequal(0.0,0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[isless(0.0,0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],[islessequal(0.0,0.0);],,[ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],\n-\t         [islessgreater(0.0,0.0);], , [ac_c99_math=no])\n+\t         [islessgreater(0.0,0.0);],, [ac_c99_math=no])\n   AC_TRY_COMPILE([#include <math.h>],\n-\t         [isunordered(0.0,0.0);], , [ac_c99_math=no])\n+\t         [isunordered(0.0,0.0);],, [ac_c99_math=no])\n+  AC_MSG_CHECKING([for ISO C99 support in <math.h>])\n+  AC_MSG_RESULT($ac_c99_math)\n \n   # Check for the existence in <stdlib.h> of lldiv_t, et. al.\n-  AC_CHECK_FUNC(strtoll,,ac_c99_stdlib=no)\n-  AC_CHECK_FUNC(strtoull,,ac_c99_stdlib=no)\n-  AC_CHECK_FUNC(llabs,,ac_c99_stdlib=no)\n-  AC_CHECK_FUNC(lldiv,,ac_c99_stdlib=no)\n-  AC_CHECK_FUNC(atoll,,ac_c99_stdlib=no)\n+  ac_c99_stdlib=yes;\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+\t         [char* tmp; strtoll(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>],\n+\t         [char* tmp; strtoull(\"gnu\", &tmp, 10);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [llabs(10);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [lldiv(10,1);],, [ac_c99_stdlib=no])\n+  AC_TRY_COMPILE([#include <stdlib.h>], [atoll(\"10\");],, [ac_c99_stdlib=no])\n \t\n   AC_MSG_CHECKING([for lldiv_t declaration])\n   AC_CACHE_VAL(ac_c99_lldiv_t, [\n@@ -1360,11 +1366,19 @@ AC_DEFUN(GLIBCPP_ENABLE_C99, [dnl\n   if test x\"$ac_c99_lldiv_t\" = x\"no\"; then\n     ac_c99_stdlib=no; \n   fi; \n+  AC_MSG_CHECKING([for ISO C99 support in <stdlib.h>])\n+  AC_MSG_RESULT($ac_c99_stdlib)\n \n   # Check for the existence of <wchar.h> functions used if C99 is enabled.\n-  AC_CHECK_FUNC(wcstold,,ac_c99_wchar=no)\n-  AC_CHECK_FUNC(wcstoll,,ac_c99_wchar=no)\n-  AC_CHECK_FUNC(wcstoull,,ac_c99_wchar=no)\n+  ac_c99_wchar=yes;\n+  AC_TRY_COMPILE([#include <wchar.h>], \n+\t         [wcstold(L\"10.0\", NULL);],, [ac_c99_wchar=no])\n+  AC_TRY_COMPILE([#include <wchar.h>], \n+\t         [wcstoll(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n+  AC_TRY_COMPILE([#include <wchar.h>], \n+\t         [wcstoull(L\"10\", NULL, 10);],, [ac_c99_wchar=no])\n+  AC_MSG_CHECKING([for ISO C99 support in <wchar.h>])\n+  AC_MSG_RESULT($ac_c99_wchar)\n \n   AC_MSG_CHECKING([for enabled ISO C99 support])\n   if test x\"$ac_c99_math\" = x\"no\" || test x\"$ac_c99_wchar\" = x\"no\" \\\n@@ -1592,10 +1606,15 @@ glibcpp_toolexecdir=no\n glibcpp_toolexeclibdir=no\n \n # Export build and source directories.\n-# These need to be absolute paths, thus the use of pwd.\n+# These need to be absolute paths, yet at the same time need to\n+# canonicalize only relative paths, because then amd will not unmount\n+# drives. Thus the use of PWDCMD: set it to 'pawd' or 'amq -w' if using amd.\n glibcpp_builddir=`pwd`\n-glibcpp_srcdir=`cd ${srcdir} && pwd`\n-glibcpp_prefixdir=`cd ${prefix} && pwd`\n+case $srcdir in\n+[\\\\/$]* | ?:[\\\\/]*) glibcpp_srcdir=${srcdir} ;;\n+*) glibcpp_srcdir=`cd \"$srcdir\" && ${PWDCMD-pwd} || echo \"$srcdir\"` ;;\n+esac\n+glibcpp_prefixdir=${prefix}\n \n AC_MSG_CHECKING([for interface version number])\n libstdcxx_interface=$INTERFACE"}, {"sha": "7e1d3ba7a1dff05f1efaeb89219aa1bedd02fc5a", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 894, "deletions": 1168, "changes": 2062, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd937d500d491f97516cb13ba52e35aed766f6dc/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd937d500d491f97516cb13ba52e35aed766f6dc/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=bd937d500d491f97516cb13ba52e35aed766f6dc"}]}