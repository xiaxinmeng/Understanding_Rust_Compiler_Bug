{"sha": "e0e1b357435272f8906e8fd70d92c7862e1bc07b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBlMWIzNTc0MzUyNzJmODkwNmU4ZmQ3MGQ5MmM3ODYyZTFiYzA3Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-03T05:03:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-03T05:03:34Z"}, "message": "re PR c++/53619 ([C++11] wrong capture of \"this\" in lambda in case of multiple inheritance)\n\n\tPR c++/53619\n\t* pt.c (in_template_function): New.\n\t* cp-tree.h: Declare it.\n\t* class.c (build_base_path, resolves_to_fixed_type_p): Use it.\n\nFrom-SVN: r189191", "tree": {"sha": "b32f464c8a8a5c7cfc0c717a1c38fee7740263bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b32f464c8a8a5c7cfc0c717a1c38fee7740263bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0e1b357435272f8906e8fd70d92c7862e1bc07b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e1b357435272f8906e8fd70d92c7862e1bc07b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0e1b357435272f8906e8fd70d92c7862e1bc07b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e1b357435272f8906e8fd70d92c7862e1bc07b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39fa0adb69ef147f872fefe2ef44aed9c6155b9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39fa0adb69ef147f872fefe2ef44aed9c6155b9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39fa0adb69ef147f872fefe2ef44aed9c6155b9c"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "2c524230fe43260f6f8a6a7602628ce65601c97a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e1b357435272f8906e8fd70d92c7862e1bc07b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e1b357435272f8906e8fd70d92c7862e1bc07b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e0e1b357435272f8906e8fd70d92c7862e1bc07b", "patch": "@@ -1,5 +1,10 @@\n 2012-07-02  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53619\n+\t* pt.c (in_template_function): New.\n+\t* cp-tree.h: Declare it.\n+\t* class.c (build_base_path, resolves_to_fixed_type_p): Use it.\n+\n \tPR c++/53783\n \t* pt.c (tsubst_copy_and_build) [LAMBDA_EXPR]: Use tsubst\n \tfor LAMBDA_EXPR_EXTRA_SCOPE."}, {"sha": "0d4a40d4dbecd2e3167e6dcd155a341c7ab9ab75", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e1b357435272f8906e8fd70d92c7862e1bc07b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e1b357435272f8906e8fd70d92c7862e1bc07b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e0e1b357435272f8906e8fd70d92c7862e1bc07b", "patch": "@@ -325,8 +325,7 @@ build_base_path (enum tree_code code,\n      up properly yet, and the value doesn't matter there either; we're just\n      interested in the result of overload resolution.  */\n   if (cp_unevaluated_operand != 0\n-      || (current_function_decl\n-\t  && uses_template_parms (current_function_decl)))\n+      || in_template_function ())\n     {\n       expr = build_nop (ptr_target_type, expr);\n       if (!want_pointer)\n@@ -6523,8 +6522,7 @@ resolves_to_fixed_type_p (tree instance, int* nonnull)\n \n   /* processing_template_decl can be false in a template if we're in\n      fold_non_dependent_expr, but we still want to suppress this check.  */\n-  if (current_function_decl\n-      && uses_template_parms (current_function_decl))\n+  if (in_template_function ())\n     {\n       /* In a template we only care about the type of the result.  */\n       if (nonnull)"}, {"sha": "41ca83ca8c9bee4e4d20717dca3dbc2e0d70c592", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e1b357435272f8906e8fd70d92c7862e1bc07b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e1b357435272f8906e8fd70d92c7862e1bc07b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e0e1b357435272f8906e8fd70d92c7862e1bc07b", "patch": "@@ -5330,6 +5330,7 @@ extern tree lookup_template_class\t\t(tree, tree, tree, tree,\n extern tree lookup_template_function\t\t(tree, tree);\n extern int uses_template_parms\t\t\t(tree);\n extern int uses_template_parms_level\t\t(tree, int);\n+extern bool in_template_function\t\t(void);\n extern tree instantiate_class_template\t\t(tree);\n extern tree instantiate_template\t\t(tree, tree, tsubst_flags_t);\n extern int fn_type_unification\t\t\t(tree, tree, tree,"}, {"sha": "f618fa557d10212a24a55d96946a67f0288b73a7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e1b357435272f8906e8fd70d92c7862e1bc07b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e1b357435272f8906e8fd70d92c7862e1bc07b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e0e1b357435272f8906e8fd70d92c7862e1bc07b", "patch": "@@ -8027,6 +8027,23 @@ uses_template_parms (tree t)\n   return dependent_p;\n }\n \n+/* Returns true iff current_function_decl is an incompletely instantiated\n+   template.  Useful instead of processing_template_decl because the latter\n+   is set to 0 during fold_non_dependent_expr.  */\n+\n+bool\n+in_template_function (void)\n+{\n+  tree fn = current_function_decl;\n+  bool ret;\n+  ++processing_template_decl;\n+  ret = (fn && DECL_LANG_SPECIFIC (fn)\n+\t && DECL_TEMPLATE_INFO (fn)\n+\t && any_dependent_template_arguments_p (DECL_TI_ARGS (fn)));\n+  --processing_template_decl;\n+  return ret;\n+}\n+\n /* Returns true if T depends on any template parameter with level LEVEL.  */\n \n int"}, {"sha": "7ce574a64f5552be7585a5c150de7e443a56452c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e1b357435272f8906e8fd70d92c7862e1bc07b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e1b357435272f8906e8fd70d92c7862e1bc07b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0e1b357435272f8906e8fd70d92c7862e1bc07b", "patch": "@@ -1,5 +1,8 @@\n 2012-07-02  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53619\n+\t* g++.dg/cpp0x/lambda/lambda-this5.C: New.\n+\n \tPR c++/53783\n \t* g++.dg/cpp0x/lambda/lambda-template7.C: New.\n "}, {"sha": "8974641643cb1a644b0fe4be66a233d2e19ffb72", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-this5.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e1b357435272f8906e8fd70d92c7862e1bc07b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e1b357435272f8906e8fd70d92c7862e1bc07b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this5.C?ref=e0e1b357435272f8906e8fd70d92c7862e1bc07b", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/53619\n+// { dg-do run { target c++11 } }\n+\n+struct C {\n+  int x;\n+};\n+struct B {\n+  int q;\n+};\n+struct A : public B , C  {\n+  void foo();\n+};\n+\n+void A::foo() {\n+  auto k = [this]() {return (void *)(&x);};\n+  if (k() != (void*)&x)\n+    __builtin_abort();\n+}\n+\n+int main(int l, char **) {\n+  A a; a.foo();\n+}"}]}