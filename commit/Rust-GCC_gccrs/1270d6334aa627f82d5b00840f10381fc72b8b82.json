{"sha": "1270d6334aa627f82d5b00840f10381fc72b8b82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI3MGQ2MzM0YWE2MjdmODJkNWIwMDg0MGYxMDM4MWZjNzJiOGI4Mg==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2004-12-02T01:34:26Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-12-02T01:34:26Z"}, "message": "intrinsic.c: Fix and add comments, fix function declarations\n\n2004-12-02  Steven G. Kargl  <kargls@comcast.net>\n\n\t* intrinsic.c: Fix and add comments, fix function declarations\n\t(OPTIONAL,REQUIRED): New symbols\n\t(add_functions,add_subroutines): Use symbols\n\t(gmp.h): Remove unused include\n\nFrom-SVN: r91604", "tree": {"sha": "abba6b7de116066cc0abe268efa319f5bf6824f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abba6b7de116066cc0abe268efa319f5bf6824f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1270d6334aa627f82d5b00840f10381fc72b8b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1270d6334aa627f82d5b00840f10381fc72b8b82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1270d6334aa627f82d5b00840f10381fc72b8b82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1270d6334aa627f82d5b00840f10381fc72b8b82/comments", "author": null, "committer": null, "parents": [{"sha": "f49b3d362834228d3d7120cfca638b3e587adbd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f49b3d362834228d3d7120cfca638b3e587adbd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f49b3d362834228d3d7120cfca638b3e587adbd8"}], "stats": {"total": 729, "additions": 402, "deletions": 327}, "files": [{"sha": "a2de2ba0bc9d7a04331f787d480b3a30629deaa6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1270d6334aa627f82d5b00840f10381fc72b8b82/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1270d6334aa627f82d5b00840f10381fc72b8b82/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1270d6334aa627f82d5b00840f10381fc72b8b82", "patch": "@@ -1,3 +1,10 @@\n+2004-12-02  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* intrinsic.c: Fix and add comments, fix function declarations\n+\t(OPTIONAL,REQUIRED): New symbols\n+\t(add_functions,add_subroutines): Use symbols\n+\t(gmp.h): Remove unused include\n+\n 2004-11-25  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* f95-lang.c, gfortranspec.c, trans-decl.c: Avoid ` as left quote"}, {"sha": "801072a07ddaad07a8d5ab66d4044e269cd8764f", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 395, "deletions": 327, "changes": 722, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1270d6334aa627f82d5b00840f10381fc72b8b82/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1270d6334aa627f82d5b00840f10381fc72b8b82/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=1270d6334aa627f82d5b00840f10381fc72b8b82", "patch": "@@ -29,7 +29,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include <stdio.h>\n #include <stdarg.h>\n #include <string.h>\n-#include <gmp.h>\n \n #include \"gfortran.h\"\n #include \"intrinsic.h\"\n@@ -40,7 +39,7 @@ static gfc_namespace *gfc_intrinsic_namespace;\n \n int gfc_init_expr = 0;\n \n-/* Pointers to a intrinsic function and its argument names being\n+/* Pointers to an intrinsic function and its argument names that are being\n    checked.  */\n \n char *gfc_current_intrinsic, *gfc_current_intrinsic_arg[MAX_INTRINSIC_ARGS];\n@@ -55,6 +54,8 @@ static enum\n { SZ_NOTHING = 0, SZ_SUBS, SZ_FUNCS, SZ_CONVS }\n sizing;\n \n+#define REQUIRED\t0\n+#define OPTIONAL\t1\n \n /* Return a letter based on the passed type.  Used to construct the\n    name of a type-dependent subroutine.  */\n@@ -297,12 +298,16 @@ add_sym (const char *name, int elemental, int actual_ok ATTRIBUTE_UNUSED,\n }\n \n \n-static void add_sym_0 (const char *name, int elemental, int actual_ok, bt type,\n+/* Add a symbol to the function list where the function takes\n+   0 arguments.  */\n+\n+static void\n+add_sym_0 (const char *name, int elemental, int actual_ok, bt type,\n \t\t       int kind, int standard,\n \t\t       try (*check)(void),\n \t\t       gfc_expr *(*simplify)(void),\n-\t\t       void (*resolve)(gfc_expr *)\n-\t\t       ) {\n+\t   void (*resolve)(gfc_expr *))\n+{\n   gfc_simplify_f sf;\n   gfc_check_f cf;\n   gfc_resolve_f rf;\n@@ -316,51 +321,62 @@ static void add_sym_0 (const char *name, int elemental, int actual_ok, bt type,\n }\n \n \n-static void add_sym_1 (const char *name, int elemental, int actual_ok, bt type,\n-\t\t       int kind, int standard,\n-\t\t       try (*check)(gfc_expr *),\n-\t\t       gfc_expr *(*simplify)(gfc_expr *),\n-\t\t       void (*resolve)(gfc_expr *,gfc_expr *),\n-\t\t       const char* a1, bt type1, int kind1, int optional1\n-\t\t       ) {\n+/* Add a symbol to the subroutine list where the subroutine takes\n+   0 arguments.  */\n+\n+static void\n+add_sym_0s (const char * name, int actual_ok, int standard,\n+\t    void (*resolve)(gfc_code *))\n+{\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n   gfc_resolve_f rf;\n \n-  cf.f1 = check;\n-  sf.f1 = simplify;\n-  rf.f1 = resolve;\n+  cf.f1 = NULL;\n+  sf.f1 = NULL;\n+  rf.s1 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n-\t   a1, type1, kind1, optional1,\n+  add_sym (name, 1, actual_ok, BT_UNKNOWN, 0, standard, cf, sf, rf,\n \t   (void*)0);\n }\n \n \n+/* Add a symbol to the function list where the function takes\n+   1 arguments.  */\n+\n static void\n-add_sym_0s (const char * name, int actual_ok, int standard,\n-\t    void (*resolve)(gfc_code *))\n+add_sym_1 (const char *name, int elemental, int actual_ok, bt type,\n+\t   int kind, int standard,\n+\t   try (*check)(gfc_expr *),\n+\t   gfc_expr *(*simplify)(gfc_expr *),\n+\t   void (*resolve)(gfc_expr *,gfc_expr *),\n+\t   const char* a1, bt type1, int kind1, int optional1)\n {\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n   gfc_resolve_f rf;\n \n-  cf.f1 = NULL;\n-  sf.f1 = NULL;\n-  rf.s1 = resolve;\n+  cf.f1 = check;\n+  sf.f1 = simplify;\n+  rf.f1 = resolve;\n \n-  add_sym (name, 1, actual_ok, BT_UNKNOWN, 0, standard, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n+\t   a1, type1, kind1, optional1,\n \t   (void*)0);\n }\n \n \n-static void add_sym_1s (const char *name, int elemental, int actual_ok, bt type,\n+/* Add a symbol to the subroutine list where the subroutine takes\n+   1 arguments.  */\n+\n+static void\n+add_sym_1s (const char *name, int elemental, int actual_ok, bt type,\n \t\t\tint kind, int standard,\n \t\t\ttry (*check)(gfc_expr *),\n \t\t\tgfc_expr *(*simplify)(gfc_expr *),\n \t\t\tvoid (*resolve)(gfc_code *),\n-\t\t\tconst char* a1, bt type1, int kind1, int optional1\n-\t\t\t) {\n+\t    const char* a1, bt type1, int kind1, int optional1)\n+{\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n   gfc_resolve_f rf;\n@@ -375,14 +391,18 @@ static void add_sym_1s (const char *name, int elemental, int actual_ok, bt type,\n }\n \n \n-static void add_sym_1m (const char *name, int elemental, int actual_ok, bt type,\n+/* Add a symbol from the MAX/MIN family of intrinsic functions to the\n+   function.  MAX et al take 2 or more arguments.  */\n+\n+static void\n+add_sym_1m (const char *name, int elemental, int actual_ok, bt type,\n \t\t\tint kind, int standard,\n \t\t\ttry (*check)(gfc_actual_arglist *),\n \t\t\tgfc_expr *(*simplify)(gfc_expr *),\n \t\t\tvoid (*resolve)(gfc_expr *,gfc_actual_arglist *),\n \t\t\tconst char* a1, bt type1, int kind1, int optional1,\n-\t\t\tconst char* a2, bt type2, int kind2, int optional2\n-\t\t\t) {\n+\t    const char* a2, bt type2, int kind2, int optional2)\n+{\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n   gfc_resolve_f rf;\n@@ -398,14 +418,18 @@ static void add_sym_1m (const char *name, int elemental, int actual_ok, bt type,\n }\n \n \n-static void add_sym_2 (const char *name, int elemental, int actual_ok, bt type,\n+/* Add a symbol to the function list where the function takes\n+   2 arguments.  */\n+\n+static void\n+add_sym_2 (const char *name, int elemental, int actual_ok, bt type,\n \t\t       int kind, int standard,\n \t\t       try (*check)(gfc_expr *,gfc_expr *),\n \t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *),\n \t\t       void (*resolve)(gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       const char* a1, bt type1, int kind1, int optional1,\n-\t\t       const char* a2, bt type2, int kind2, int optional2\n-\t\t       ) {\n+\t   const char* a2, bt type2, int kind2, int optional2)\n+{\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n   gfc_resolve_f rf;\n@@ -421,17 +445,18 @@ static void add_sym_2 (const char *name, int elemental, int actual_ok, bt type,\n }\n \n \n-/* Add the name of an intrinsic subroutine with two arguments to the list\n-   of intrinsic names.  */\n+/* Add a symbol to the subroutine list where the subroutine takes\n+   2 arguments.  */\n \n-static void add_sym_2s (const char *name, int elemental, int actual_ok, bt type,\n+static void\n+add_sym_2s (const char *name, int elemental, int actual_ok, bt type,\n \t\t\tint kind, int standard,\n \t\t       try (*check)(gfc_expr *,gfc_expr *),\n \t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *),\n \t\t       void (*resolve)(gfc_code *),\n \t\t       const char* a1, bt type1, int kind1, int optional1,\n-\t\t       const char* a2, bt type2, int kind2, int optional2\n-\t\t       ) {\n+\t    const char* a2, bt type2, int kind2, int optional2)\n+{\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n   gfc_resolve_f rf;\n@@ -447,15 +472,19 @@ static void add_sym_2s (const char *name, int elemental, int actual_ok, bt type,\n }\n \n \n-static void add_sym_3 (const char *name, int elemental, int actual_ok, bt type,\n+/* Add a symbol to the function list where the function takes\n+   3 arguments.  */\n+\n+static void\n+add_sym_3 (const char *name, int elemental, int actual_ok, bt type,\n \t\t       int kind, int standard,\n \t\t       try (*check)(gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       void (*resolve)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       const char* a1, bt type1, int kind1, int optional1,\n \t\t       const char* a2, bt type2, int kind2, int optional2,\n-\t\t       const char* a3, bt type3, int kind3, int optional3\n-\t\t       ) {\n+\t   const char* a3, bt type3, int kind3, int optional3)\n+{\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n   gfc_resolve_f rf;\n@@ -471,18 +500,20 @@ static void add_sym_3 (const char *name, int elemental, int actual_ok, bt type,\n \t   (void*)0);\n }\n \n+\n /* MINLOC and MAXLOC get special treatment because their argument\n    might have to be reordered.  */\n \n-static void add_sym_3ml (const char *name, int elemental, \n+static void\n+add_sym_3ml (const char *name, int elemental, \n \t\t\t int actual_ok, bt type, int kind, int standard,\n \t\t\t try (*check)(gfc_actual_arglist *),\n \t\t\t gfc_expr*(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t\t void (*resolve)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t\t const char* a1, bt type1, int kind1, int optional1,\n \t\t\t const char* a2, bt type2, int kind2, int optional2,\n-\t\t\t const char* a3, bt type3, int kind3, int optional3\n-\t\t\t ) {\n+\t     const char* a3, bt type3, int kind3, int optional3)\n+{\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n   gfc_resolve_f rf;\n@@ -498,18 +529,20 @@ static void add_sym_3ml (const char *name, int elemental,\n \t   (void*)0);\n }\n \n+\n /* MINVAL, MAXVAL, PRODUCT, and SUM also get special treatment because\n    their argument also might have to be reordered.  */\n \n-static void add_sym_3red (const char *name, int elemental, \n+static void\n+add_sym_3red (const char *name, int elemental, \n                           int actual_ok, bt type, int kind, int standard,\n                           try (*check)(gfc_actual_arglist *),\n                           gfc_expr*(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *),\n                           void (*resolve)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n                           const char* a1, bt type1, int kind1, int optional1,\n                           const char* a2, bt type2, int kind2, int optional2,\n-                          const char* a3, bt type3, int kind3, int optional3\n-                          ) {\n+\t      const char* a3, bt type3, int kind3, int optional3)\n+{\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n   gfc_resolve_f rf;\n@@ -525,18 +558,20 @@ static void add_sym_3red (const char *name, int elemental,\n \t   (void*)0);\n }\n \n-/* Add the name of an intrinsic subroutine with three arguments to the list\n-   of intrinsic names.  */\n \n-static void add_sym_3s (const char *name, int elemental, int actual_ok, bt type,\n+/* Add a symbol to the subroutine list where the subroutine takes\n+   3 arguments.  */\n+\n+static void\n+add_sym_3s (const char *name, int elemental, int actual_ok, bt type,\n \t\t\tint kind, int standard,\n \t\t       try (*check)(gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       void (*resolve)(gfc_code *),\n \t\t       const char* a1, bt type1, int kind1, int optional1,\n \t\t       const char* a2, bt type2, int kind2, int optional2,\n-\t\t       const char* a3, bt type3, int kind3, int optional3\n-\t\t       ) {\n+\t    const char* a3, bt type3, int kind3, int optional3)\n+{\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n   gfc_resolve_f rf;\n@@ -553,16 +588,20 @@ static void add_sym_3s (const char *name, int elemental, int actual_ok, bt type,\n }\n \n \n-static void add_sym_4 (const char *name, int elemental, int actual_ok, bt type,\n+/* Add a symbol to the function list where the function takes\n+   4 arguments.  */\n+\n+static void\n+add_sym_4 (const char *name, int elemental, int actual_ok, bt type,\n \t\t       int kind, int standard,\n \t\t       try (*check)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       void (*resolve)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       const char* a1, bt type1, int kind1, int optional1,\n \t\t       const char* a2, bt type2, int kind2, int optional2,\n \t\t       const char* a3, bt type3, int kind3, int optional3,\n-\t\t       const char* a4, bt type4, int kind4, int optional4\n-\t\t       ) {\n+\t   const char* a4, bt type4, int kind4, int optional4 )\n+{\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n   gfc_resolve_f rf;\n@@ -580,7 +619,11 @@ static void add_sym_4 (const char *name, int elemental, int actual_ok, bt type,\n }\n \n \n-static void add_sym_4s (const char *name, int elemental, int actual_ok,\n+/* Add a symbol to the subroutine list where the subroutine takes\n+   4 arguments.  */\n+\n+static void\n+add_sym_4s (const char *name, int elemental, int actual_ok,\n \t\t\tbt type, int kind, int standard,\n     try (*check)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n     gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n@@ -607,9 +650,11 @@ static void add_sym_4s (const char *name, int elemental, int actual_ok,\n }\n \n \n-static void add_sym_5s  \n-(\n- const char *name, int elemental, int actual_ok, \n+/* Add a symbol to the subroutine list where the subroutine takes\n+   5 arguments.  */\n+\n+static void\n+add_sym_5s (const char *name, int elemental, int actual_ok, \n  bt type, int kind, int standard,\n  try (*check)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n  gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n@@ -826,225 +871,229 @@ add_functions (void)\n \n   add_sym_1 (\"abs\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_abs, gfc_simplify_abs, gfc_resolve_abs,\n-\t     a, BT_REAL, dr, 0);\n+\t     a, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"iabs\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_abs, gfc_resolve_abs,\n-\t     a, BT_INTEGER, di, 0);\n+\t     a, BT_INTEGER, di, REQUIRED);\n \n   add_sym_1 (\"dabs\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_abs, gfc_resolve_abs, a, BT_REAL, dd, 0);\n+\t     NULL, gfc_simplify_abs, gfc_resolve_abs,\n+\t     a, BT_REAL, dd, REQUIRED);\n \n   add_sym_1 (\"cabs\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_abs, gfc_resolve_abs,\n-\t     a, BT_COMPLEX, dz, 0);\n+\t     a, BT_COMPLEX, dz, REQUIRED);\n \n   add_sym_1 (\"zabs\", 1, 1, BT_REAL, dd, GFC_STD_GNU, \n \t     NULL, gfc_simplify_abs, gfc_resolve_abs, \n-\t     a, BT_COMPLEX, dd, 0);\n+\t     a, BT_COMPLEX, dd, REQUIRED);\n \n   make_alias (\"cdabs\");\n \n   make_generic (\"abs\", GFC_ISYM_ABS, GFC_STD_F77);\n \n   add_sym_1 (\"achar\", 1, 1, BT_CHARACTER, dc, GFC_STD_F95,\n-\t     NULL, gfc_simplify_achar, NULL, i, BT_INTEGER, di, 0);\n+\t     NULL, gfc_simplify_achar, NULL,\n+\t     i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"achar\", GFC_ISYM_ACHAR, GFC_STD_F95);\n \n   add_sym_1 (\"acos\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_acos, gfc_resolve_acos,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dacos\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_acos, gfc_resolve_acos,\n-\t     x, BT_REAL, dd, 0);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"acos\", GFC_ISYM_ACOS, GFC_STD_F77);\n \n   add_sym_1 (\"adjustl\", 1, 1, BT_CHARACTER, dc, GFC_STD_F95,\n-\t     NULL, gfc_simplify_adjustl, NULL, stg, BT_CHARACTER, dc, 0);\n+\t     NULL, gfc_simplify_adjustl, NULL,\n+\t     stg, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"adjustl\", GFC_ISYM_ADJUSTL, GFC_STD_F95);\n \n   add_sym_1 (\"adjustr\", 1, 1, BT_CHARACTER, dc, GFC_STD_F95,\n-\t     NULL, gfc_simplify_adjustr, NULL, stg, BT_CHARACTER, dc, 0);\n+\t     NULL, gfc_simplify_adjustr, NULL,\n+\t     stg, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"adjustr\", GFC_ISYM_ADJUSTR, GFC_STD_F95);\n \n   add_sym_1 (\"aimag\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_aimag, gfc_resolve_aimag,\n-\t     z, BT_COMPLEX, dz, 0);\n+\t     z, BT_COMPLEX, dz, REQUIRED);\n \n   add_sym_1 (\"dimag\", 1, 1, BT_REAL, dd, GFC_STD_GNU, \n \t     NULL, gfc_simplify_aimag, gfc_resolve_aimag, \n-\t     z, BT_COMPLEX, dd, 0);\n+\t     z, BT_COMPLEX, dd, REQUIRED);\n \n   make_generic (\"aimag\", GFC_ISYM_AIMAG, GFC_STD_F77);\n \n   add_sym_2 (\"aint\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_a_xkind, gfc_simplify_aint, gfc_resolve_aint,\n-\t     a, BT_REAL, dr, 0, kind, BT_INTEGER, di, 1);\n+\t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_1 (\"dint\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_dint, gfc_resolve_dint,\n-\t     a, BT_REAL, dd, 0);\n+\t     a, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"aint\", GFC_ISYM_AINT, GFC_STD_F77);\n \n   add_sym_2 (\"all\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_all_any, NULL, gfc_resolve_all,\n-\t     msk, BT_LOGICAL, dl, 0, dm, BT_INTEGER, ii, 1);\n+\t     msk, BT_LOGICAL, dl, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"all\", GFC_ISYM_ALL, GFC_STD_F95);\n \n   add_sym_1 (\"allocated\", 0, 1, BT_LOGICAL, dl, GFC_STD_F95,\n-\t     gfc_check_allocated, NULL, NULL, ar, BT_UNKNOWN, 0, 0);\n+\t     gfc_check_allocated, NULL, NULL,\n+\t     ar, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"allocated\", GFC_ISYM_ALLOCATED, GFC_STD_F95);\n \n   add_sym_2 (\"anint\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_a_xkind, gfc_simplify_anint, gfc_resolve_anint,\n-\t     a, BT_REAL, dr, 0, kind, BT_INTEGER, di, 1);\n+\t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_1 (\"dnint\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_dnint, gfc_resolve_dnint,\n-\t     a, BT_REAL, dd, 0);\n+\t     a, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"anint\", GFC_ISYM_ANINT, GFC_STD_F77);\n \n   add_sym_2 (\"any\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_all_any, NULL, gfc_resolve_any,\n-\t     msk, BT_LOGICAL, dl, 0, dm, BT_INTEGER, ii, 1);\n+\t     msk, BT_LOGICAL, dl, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"any\", GFC_ISYM_ANY, GFC_STD_F95);\n \n   add_sym_1 (\"asin\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_asin, gfc_resolve_asin,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dasin\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_asin, gfc_resolve_asin,\n-\t     x, BT_REAL, dd, 0);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"asin\", GFC_ISYM_ASIN, GFC_STD_F77);\n \n   add_sym_2 (\"associated\", 0, 1, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_associated, NULL, NULL,\n-\t     pt, BT_UNKNOWN, 0, 0, tg, BT_UNKNOWN, 0, 1);\n+\t     pt, BT_UNKNOWN, 0, REQUIRED, tg, BT_UNKNOWN, 0, OPTIONAL);\n \n   make_generic (\"associated\", GFC_ISYM_ASSOCIATED, GFC_STD_F95);\n \n   add_sym_1 (\"atan\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_atan, gfc_resolve_atan,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"datan\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_atan, gfc_resolve_atan,\n-\t     x, BT_REAL, dd, 0);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"atan\", GFC_ISYM_ATAN, GFC_STD_F77);\n \n   add_sym_2 (\"atan2\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_atan2, gfc_simplify_atan2, gfc_resolve_atan2,\n-\t     y, BT_REAL, dr, 0, x, BT_REAL, dr, 0);\n+\t     y, BT_REAL, dr, REQUIRED, x, BT_REAL, dr, REQUIRED);\n \n   add_sym_2 (\"datan2\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_atan2, gfc_resolve_atan2,\n-\t     y, BT_REAL, dd, 0, x, BT_REAL, dd, 0);\n+\t     y, BT_REAL, dd, REQUIRED, x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"atan2\", GFC_ISYM_ATAN2, GFC_STD_F77);\n \n   /* Bessel and Neumann functions for G77 compatibility.  */\n-\n   add_sym_1 (\"besj0\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dbesj0\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n-\t     x, BT_REAL, dd, 0);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besj0\", GFC_ISYM_J0, GFC_STD_GNU);\n \n   add_sym_1 (\"besj1\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n-\t     x, BT_REAL, dr, 1);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dbesj1\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n-\t     x, BT_REAL, dd, 1);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besj1\", GFC_ISYM_J1, GFC_STD_GNU);\n \n   add_sym_2 (\"besjn\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n-\t     gfc_check_besn, NULL, gfc_resolve_besn, n, BT_INTEGER, di, 1,\n-         x, BT_REAL, dr, 1);\n+\t     gfc_check_besn, NULL, gfc_resolve_besn,\n+\t     n, BT_INTEGER, di, REQUIRED, x, BT_REAL, dr, REQUIRED);\n \n   add_sym_2 (\"dbesjn\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n-\t     gfc_check_besn, NULL, gfc_resolve_besn, n, BT_INTEGER, di, 1,\n-         x, BT_REAL, dd, 1);\n+\t     gfc_check_besn, NULL, gfc_resolve_besn,\n+\t     n, BT_INTEGER, di, REQUIRED, x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besjn\", GFC_ISYM_JN, GFC_STD_GNU);\n \n   add_sym_1 (\"besy0\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dbesy0\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n-\t     x, BT_REAL, dd, 0);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besy0\", GFC_ISYM_Y0, GFC_STD_GNU);\n \n   add_sym_1 (\"besy1\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n-\t     x, BT_REAL, dr, 1);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dbesy1\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n-\t     x, BT_REAL, dd, 1);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besy1\", GFC_ISYM_Y1, GFC_STD_GNU);\n \n   add_sym_2 (\"besyn\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n-\t     gfc_check_besn, NULL, gfc_resolve_besn, n, BT_INTEGER, di, 1,\n-         x, BT_REAL, dr, 1);\n+\t     gfc_check_besn, NULL, gfc_resolve_besn,\n+\t     n, BT_INTEGER, di, REQUIRED, x, BT_REAL, dr, REQUIRED);\n \n   add_sym_2 (\"dbesyn\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n-\t     gfc_check_besn, NULL, gfc_resolve_besn, n, BT_INTEGER, di, 1,\n-         x, BT_REAL, dd, 1);\n+\t     gfc_check_besn, NULL, gfc_resolve_besn,\n+\t     n, BT_INTEGER, di, REQUIRED, x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"besyn\", GFC_ISYM_YN, GFC_STD_GNU);\n \n   add_sym_1 (\"bit_size\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_i, gfc_simplify_bit_size, NULL,\n-\t     i, BT_INTEGER, di, 0);\n+\t     i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"bit_size\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   add_sym_2 (\"btest\", 1, 1, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_btest, gfc_simplify_btest, gfc_resolve_btest,\n-\t     i, BT_INTEGER, di, 0, pos, BT_INTEGER, di, 0);\n+\t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"btest\", GFC_ISYM_BTEST, GFC_STD_F95);\n \n   add_sym_2 (\"ceiling\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_a_ikind, gfc_simplify_ceiling, gfc_resolve_ceiling,\n-\t     a, BT_REAL, dr, 0, kind, BT_INTEGER, di, 1);\n+\t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"ceiling\", GFC_ISYM_CEILING, GFC_STD_F95);\n \n   add_sym_2 (\"char\", 1, 0, BT_CHARACTER, dc, GFC_STD_F77,\n \t     gfc_check_char, gfc_simplify_char, gfc_resolve_char,\n-\t     i, BT_INTEGER, di, 0, kind, BT_INTEGER, di, 1);\n+\t     i, BT_INTEGER, di, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"char\", GFC_ISYM_CHAR, GFC_STD_F77);\n \n   add_sym_3 (\"cmplx\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     gfc_check_cmplx, gfc_simplify_cmplx, gfc_resolve_cmplx,\n-\t     x, BT_UNKNOWN, dr, 0, y, BT_UNKNOWN, dr, 1,\n-\t     kind, BT_INTEGER, di, 1);\n+\t     x, BT_UNKNOWN, dr, REQUIRED, y, BT_UNKNOWN, dr, OPTIONAL,\n+\t     kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"cmplx\", GFC_ISYM_CMPLX, GFC_STD_F77);\n \n@@ -1053,393 +1102,414 @@ add_functions (void)\n \n   add_sym_2 (\"dcmplx\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n \t     gfc_check_dcmplx, gfc_simplify_dcmplx, gfc_resolve_dcmplx,\n-\t     x, BT_REAL, dd, 0, y, BT_REAL, dd, 1);\n+\t     x, BT_REAL, dd, REQUIRED, y, BT_REAL, dd, OPTIONAL);\n \n   make_generic (\"dcmplx\", GFC_ISYM_CMPLX, GFC_STD_GNU);\n \n   add_sym_1 (\"conjg\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_conjg, gfc_resolve_conjg,\n-\t     z, BT_COMPLEX, dz, 0);\n+\t     z, BT_COMPLEX, dz, REQUIRED);\n \n   add_sym_1 (\"dconjg\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n \t     NULL, gfc_simplify_conjg, gfc_resolve_conjg, \n-\t     z, BT_COMPLEX, dd, 0);\n+\t     z, BT_COMPLEX, dd, REQUIRED);\n \n   make_generic (\"conjg\", GFC_ISYM_CONJG, GFC_STD_F77);\n \n   add_sym_1 (\"cos\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_cos, gfc_resolve_cos, x, BT_REAL, dr, 0);\n+\t     NULL, gfc_simplify_cos, gfc_resolve_cos,\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dcos\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_cos, gfc_resolve_cos, x, BT_REAL, dd, 0);\n+\t     NULL, gfc_simplify_cos, gfc_resolve_cos,\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   add_sym_1 (\"ccos\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_cos, gfc_resolve_cos,\n-\t     x, BT_COMPLEX, dz, 0);\n+\t     x, BT_COMPLEX, dz, REQUIRED);\n \n   add_sym_1 (\"zcos\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n \t     NULL, gfc_simplify_cos, gfc_resolve_cos, \n-\t     x, BT_COMPLEX, dd, 0);\n+\t     x, BT_COMPLEX, dd, REQUIRED);\n \n   make_alias (\"cdcos\");\n \n   make_generic (\"cos\", GFC_ISYM_COS, GFC_STD_F77);\n \n   add_sym_1 (\"cosh\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_cosh, gfc_resolve_cosh,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dcosh\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_cosh, gfc_resolve_cosh,\n-\t     x, BT_REAL, dd, 0);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"cosh\", GFC_ISYM_COSH, GFC_STD_F77);\n \n   add_sym_2 (\"count\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_count, NULL, gfc_resolve_count,\n-\t     msk, BT_LOGICAL, dl, 0, dm, BT_INTEGER, ii, 1);\n+\t     msk, BT_LOGICAL, dl, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"count\", GFC_ISYM_COUNT, GFC_STD_F95);\n \n   add_sym_3 (\"cshift\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_cshift, NULL, gfc_resolve_cshift,\n-\t     ar, BT_REAL, dr, 0, sh, BT_INTEGER, di, 0,\n-\t     dm, BT_INTEGER, ii, 1);\n+\t     ar, BT_REAL, dr, REQUIRED, sh, BT_INTEGER, di, REQUIRED,\n+\t     dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"cshift\", GFC_ISYM_CSHIFT, GFC_STD_F95);\n \n   add_sym_1 (\"dble\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     gfc_check_dble, gfc_simplify_dble, gfc_resolve_dble,\n-\t     a, BT_REAL, dr, 0);\n+\t     a, BT_REAL, dr, REQUIRED);\n \n   make_alias (\"dfloat\");\n \n   make_generic (\"dble\", GFC_ISYM_DBLE, GFC_STD_F77);\n \n   add_sym_1 (\"digits\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_digits, gfc_simplify_digits, NULL,\n-\t     x, BT_UNKNOWN, dr, 0);\n+\t     x, BT_UNKNOWN, dr, REQUIRED);\n \n   make_generic (\"digits\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   add_sym_2 (\"dim\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_a_p, gfc_simplify_dim, gfc_resolve_dim,\n-\t     x, BT_UNKNOWN, dr, 0, y, BT_UNKNOWN, dr, 0);\n+\t     x, BT_UNKNOWN, dr, REQUIRED, y, BT_UNKNOWN, dr, REQUIRED);\n \n   add_sym_2 (\"idim\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_dim, gfc_resolve_dim,\n-\t     x, BT_INTEGER, di, 0, y, BT_INTEGER, di, 0);\n+\t     x, BT_INTEGER, di, REQUIRED, y, BT_INTEGER, di, REQUIRED);\n \n   add_sym_2 (\"ddim\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_dim, gfc_resolve_dim,\n-\t     x, BT_REAL, dd, 0, y, BT_REAL, dd, 0);\n+\t     x, BT_REAL, dd, REQUIRED, y, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"dim\", GFC_ISYM_DIM, GFC_STD_F77);\n \n   add_sym_2 (\"dot_product\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_dot_product, NULL, gfc_resolve_dot_product,\n-\t     va, BT_REAL, dr, 0, vb, BT_REAL, dr, 0);\n+\t     va, BT_REAL, dr, REQUIRED, vb, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"dot_product\", GFC_ISYM_DOT_PRODUCT, GFC_STD_F95);\n \n   add_sym_2 (\"dprod\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_dprod, gfc_resolve_dprod,\n-\t     x, BT_REAL, dr, 0, y, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED, y, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"dprod\", GFC_ISYM_DPROD, GFC_STD_F77);\n \n   add_sym_1 (\"dreal\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n-\t     NULL, NULL, NULL, a, BT_COMPLEX, dd, 0);\n+\t     NULL, NULL, NULL,\n+\t     a, BT_COMPLEX, dd, REQUIRED);\n \n   make_generic (\"dreal\", GFC_ISYM_REAL, GFC_STD_GNU);\n \n   add_sym_4 (\"eoshift\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_eoshift, NULL, gfc_resolve_eoshift,\n-\t     ar, BT_REAL, dr, 0, sh, BT_INTEGER, ii, 0,\n-\t     bd, BT_REAL, dr, 1, dm, BT_INTEGER, ii, 1);\n+\t     ar, BT_REAL, dr, 0, sh, BT_INTEGER, ii, REQUIRED,\n+\t     bd, BT_REAL, dr, 1, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"eoshift\", GFC_ISYM_EOSHIFT, GFC_STD_F95);\n \n   add_sym_1 (\"epsilon\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_epsilon, NULL,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"epsilon\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   /* G77 compatibility for the ERF() and ERFC() functions.  */\n   add_sym_1 (\"erf\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"derf\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n-\t     x, BT_REAL, dd, 0);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"erf\", GFC_ISYM_ERF, GFC_STD_GNU);\n \n   add_sym_1 (\"erfc\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"derfc\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n-\t     x, BT_REAL, dd, 0);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"erfc\", GFC_ISYM_ERFC, GFC_STD_GNU);\n \n   /* G77 compatibility */\n   add_sym_1 (\"etime\", 0, 1, BT_REAL, 4,  GFC_STD_GNU,\n \t     gfc_check_etime, NULL, NULL,\n-\t     x, BT_REAL, 4, 0);\n+\t     x, BT_REAL, 4, REQUIRED);\n \n   make_alias (\"dtime\");\n \n   make_generic (\"etime\", GFC_ISYM_ETIME, GFC_STD_GNU);\n \n-\n   add_sym_1 (\"exp\", 1, 1, BT_REAL, dr,  GFC_STD_F77,\n-\t     NULL, gfc_simplify_exp, gfc_resolve_exp, x, BT_REAL, dr, 0);\n+\t     NULL, gfc_simplify_exp, gfc_resolve_exp,\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dexp\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_exp, gfc_resolve_exp, x, BT_REAL, dd, 0);\n+\t     NULL, gfc_simplify_exp, gfc_resolve_exp,\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   add_sym_1 (\"cexp\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_exp, gfc_resolve_exp,\n-\t     x, BT_COMPLEX, dz, 0);\n+\t     x, BT_COMPLEX, dz, REQUIRED);\n \n   add_sym_1 (\"zexp\", 1, 1, BT_COMPLEX, dd,  GFC_STD_GNU,\n \t     NULL, gfc_simplify_exp, gfc_resolve_exp, \n-\t     x, BT_COMPLEX, dd, 0);\n+\t     x, BT_COMPLEX, dd, REQUIRED);\n \n   make_alias (\"cdexp\");\n \n   make_generic (\"exp\", GFC_ISYM_EXP, GFC_STD_F77);\n \n   add_sym_1 (\"exponent\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_exponent, gfc_resolve_exponent,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"exponent\", GFC_ISYM_EXPONENT, GFC_STD_F95);\n \n   add_sym_2 (\"floor\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_a_ikind, gfc_simplify_floor, gfc_resolve_floor,\n-\t     a, BT_REAL, dr, 0, kind, BT_INTEGER, di, 1);\n+\t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"floor\", GFC_ISYM_FLOOR, GFC_STD_F95);\n \n   add_sym_1 (\"fraction\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_fraction, gfc_resolve_fraction,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"fraction\", GFC_ISYM_FRACTION, GFC_STD_F95);\n \n   /* Unix IDs (g77 compatibility)  */\n   add_sym_1 (\"getcwd\", 0, 1, BT_INTEGER, di,  GFC_STD_GNU,\n \t     NULL, NULL, gfc_resolve_getcwd,\n-\t     c, BT_CHARACTER, dc, 0);\n+\t     c, BT_CHARACTER, dc, REQUIRED);\n+\n   make_generic (\"getcwd\", GFC_ISYM_GETCWD, GFC_STD_GNU);\n \n   add_sym_0 (\"getgid\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n \t     NULL, NULL, gfc_resolve_getgid);\n+\n   make_generic (\"getgid\", GFC_ISYM_GETGID, GFC_STD_GNU);\n \n   add_sym_0 (\"getpid\", 1, 0, BT_INTEGER, di, GFC_STD_GNU, \n \t     NULL, NULL, gfc_resolve_getpid);\n+\n   make_generic (\"getpid\", GFC_ISYM_GETPID, GFC_STD_GNU);\n \n   add_sym_0 (\"getuid\", 1, 0, BT_INTEGER, di, GFC_STD_GNU, \n \t     NULL, NULL, gfc_resolve_getuid);\n+\n   make_generic (\"getuid\", GFC_ISYM_GETUID, GFC_STD_GNU);\n \n   add_sym_1 (\"huge\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_huge, gfc_simplify_huge, NULL,\n-\t     x, BT_UNKNOWN, dr, 0);\n+\t     x, BT_UNKNOWN, dr, REQUIRED);\n \n   make_generic (\"huge\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   add_sym_1 (\"iachar\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n-\t     NULL, gfc_simplify_iachar, NULL, c, BT_CHARACTER, dc, 0);\n+\t     NULL, gfc_simplify_iachar, NULL,\n+\t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"iachar\", GFC_ISYM_IACHAR, GFC_STD_F95);\n \n   add_sym_2 (\"iand\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_iand, gfc_simplify_iand, gfc_resolve_iand,\n-\t     i, BT_INTEGER, di, 0, j, BT_INTEGER, di, 0);\n+\t     i, BT_INTEGER, di, REQUIRED, j, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"iand\", GFC_ISYM_IAND, GFC_STD_F95);\n \n-  add_sym_0 (\"iargc\", 1, 1, BT_INTEGER, di,  GFC_STD_GNU,NULL, NULL, NULL);\n+  add_sym_0 (\"iargc\", 1, 1, BT_INTEGER, di, GFC_STD_GNU,\n+\t     NULL, NULL, NULL);\n+\n   make_generic (\"iargc\", GFC_ISYM_IARGC, GFC_STD_GNU);\n \n-  add_sym_0 (\"command_argument_count\", 1, 1, BT_INTEGER, di, GFC_STD_F2003, NULL, NULL, NULL);\n-  make_generic (\"command_argument_count\", GFC_ISYM_COMMAND_ARGUMENT_COUNT, GFC_STD_F2003);\n+  add_sym_0 (\"command_argument_count\", 1, 1, BT_INTEGER, di, GFC_STD_F2003,\n+\t     NULL, NULL, NULL);\n+\n+  make_generic (\"command_argument_count\", GFC_ISYM_COMMAND_ARGUMENT_COUNT,\n+\t        GFC_STD_F2003);\n \n   add_sym_2 (\"ibclr\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ibclr, gfc_simplify_ibclr, gfc_resolve_ibclr,\n-\t     i, BT_INTEGER, di, 0, pos, BT_INTEGER, di, 0);\n+\t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ibclr\", GFC_ISYM_IBCLR, GFC_STD_F95);\n \n   add_sym_3 (\"ibits\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ibits, gfc_simplify_ibits, gfc_resolve_ibits,\n-\t     i, BT_INTEGER, di, 0, pos, BT_INTEGER, di, 0,\n-\t     ln, BT_INTEGER, di, 0);\n+\t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED,\n+\t     ln, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ibits\", GFC_ISYM_IBITS, GFC_STD_F95);\n \n   add_sym_2 (\"ibset\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ibset, gfc_simplify_ibset, gfc_resolve_ibset,\n-\t     i, BT_INTEGER, di, 0, pos, BT_INTEGER, di, 0);\n+\t     i, BT_INTEGER, di, REQUIRED, pos, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ibset\", GFC_ISYM_IBSET, GFC_STD_F95);\n \n   add_sym_1 (\"ichar\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_ichar, gfc_resolve_ichar,\n-\t     c, BT_CHARACTER, dc, 0);\n+\t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"ichar\", GFC_ISYM_ICHAR, GFC_STD_F77);\n \n   add_sym_2 (\"ieor\", 1, 1, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_ieor, gfc_simplify_ieor, gfc_resolve_ieor,\n-\t     i, BT_INTEGER, di, 0, j, BT_INTEGER, di, 0);\n+\t     i, BT_INTEGER, di, REQUIRED, j, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ieor\", GFC_ISYM_IEOR, GFC_STD_GNU);\n \n   add_sym_3 (\"index\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_index, gfc_simplify_index, NULL,\n-\t     stg, BT_CHARACTER, dc, 0, ssg, BT_CHARACTER, dc, 0,\n-\t     bck, BT_LOGICAL, dl, 1);\n+\t     stg, BT_CHARACTER, dc, REQUIRED, ssg, BT_CHARACTER, dc, REQUIRED,\n+\t     bck, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"index\", GFC_ISYM_INDEX, GFC_STD_F77);\n \n   add_sym_2 (\"int\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_int, gfc_simplify_int, gfc_resolve_int,\n-\t     a, BT_REAL, dr, 0, kind, BT_INTEGER, di, 1);\n+\t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_1 (\"ifix\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n-\t     NULL, gfc_simplify_ifix, NULL, a, BT_REAL, dr, 0);\n+\t     NULL, gfc_simplify_ifix, NULL,\n+\t     a, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"idint\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n-\t     NULL, gfc_simplify_idint, NULL, a, BT_REAL, dd, 0);\n+\t     NULL, gfc_simplify_idint, NULL,\n+\t     a, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"int\", GFC_ISYM_INT, GFC_STD_F77);\n \n   add_sym_2 (\"ior\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ior, gfc_simplify_ior, gfc_resolve_ior,\n-\t     i, BT_INTEGER, di, 0, j, BT_INTEGER, di, 0);\n+\t     i, BT_INTEGER, di, REQUIRED, j, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ior\", GFC_ISYM_IOR, GFC_STD_F95);\n \n   /* The following function is for G77 compatibility.  */\n   add_sym_1 (\"irand\", 0, 1, BT_INTEGER, 4, GFC_STD_GNU,\n              gfc_check_irand, NULL, NULL,\n-             i, BT_INTEGER, 4, 1);\n+\t     i, BT_INTEGER, 4, OPTIONAL);\n \n   make_generic (\"irand\", GFC_ISYM_IRAND, GFC_STD_GNU);\n \n   add_sym_2 (\"ishft\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ishft, gfc_simplify_ishft, gfc_resolve_ishft,\n-\t     i, BT_INTEGER, di, 0, sh, BT_INTEGER, di, 0);\n+\t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ishft\", GFC_ISYM_ISHFT, GFC_STD_F95);\n \n   add_sym_3 (\"ishftc\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ishftc, gfc_simplify_ishftc, gfc_resolve_ishftc,\n-\t     i, BT_INTEGER, di, 0, sh, BT_INTEGER, di, 0,\n-\t     sz, BT_INTEGER, di, 1);\n+\t     i, BT_INTEGER, di, REQUIRED, sh, BT_INTEGER, di, REQUIRED,\n+\t     sz, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"ishftc\", GFC_ISYM_ISHFTC, GFC_STD_F95);\n \n   add_sym_1 (\"kind\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n-\t     gfc_check_kind, gfc_simplify_kind, NULL, x, BT_REAL, dr, 0);\n+\t     gfc_check_kind, gfc_simplify_kind, NULL,\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"kind\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   add_sym_2 (\"lbound\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_lbound, gfc_simplify_lbound, gfc_resolve_lbound,\n-\t     ar, BT_REAL, dr, 0, dm, BT_INTEGER, di, 1);\n+\t     ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"lbound\", GFC_ISYM_LBOUND, GFC_STD_F95);\n \n   add_sym_1 (\"len\", 0, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_len, gfc_resolve_len,\n-\t     stg, BT_CHARACTER, dc, 0);\n+\t     stg, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"len\", GFC_ISYM_LEN, GFC_STD_F77);\n \n   add_sym_1 (\"len_trim\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     NULL, gfc_simplify_len_trim, gfc_resolve_len_trim,\n-\t     stg, BT_CHARACTER, dc, 0);\n+\t     stg, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"len_trim\", GFC_ISYM_LEN_TRIM, GFC_STD_F95);\n \n   add_sym_2 (\"lge\", 1, 0, BT_LOGICAL, dl, GFC_STD_F77,\n \t     NULL, gfc_simplify_lge, NULL,\n-\t     sta, BT_CHARACTER, dc, 0, stb, BT_CHARACTER, dc, 0);\n+\t     sta, BT_CHARACTER, dc, REQUIRED, stb, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"lge\", GFC_ISYM_LGE, GFC_STD_F77);\n \n   add_sym_2 (\"lgt\", 1, 0, BT_LOGICAL, dl, GFC_STD_F77,\n \t     NULL, gfc_simplify_lgt, NULL,\n-\t     sta, BT_CHARACTER, dc, 0, stb, BT_CHARACTER, dc, 0);\n+\t     sta, BT_CHARACTER, dc, REQUIRED, stb, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"lgt\", GFC_ISYM_LGT, GFC_STD_F77);\n \n   add_sym_2 (\"lle\", 1, 0, BT_LOGICAL, dl, GFC_STD_F77,\n \t     NULL, gfc_simplify_lle, NULL,\n-\t     sta, BT_CHARACTER, dc, 0, stb, BT_CHARACTER, dc, 0);\n+\t     sta, BT_CHARACTER, dc, REQUIRED, stb, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"lle\", GFC_ISYM_LLE, GFC_STD_F77);\n \n   add_sym_2 (\"llt\", 1, 0, BT_LOGICAL, dl, GFC_STD_F77,\n \t     NULL, gfc_simplify_llt, NULL,\n-\t     sta, BT_CHARACTER, dc, 0, stb, BT_CHARACTER, dc, 0);\n+\t     sta, BT_CHARACTER, dc, REQUIRED, stb, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"llt\", GFC_ISYM_LLT, GFC_STD_F77);\n \n   add_sym_1 (\"log\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_log, gfc_resolve_log, x, BT_REAL, dr, 0);\n+\t     NULL, gfc_simplify_log, gfc_resolve_log,\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"alog\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_log, gfc_resolve_log, x, BT_REAL, dr, 0);\n+\t     NULL, gfc_simplify_log, gfc_resolve_log,\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dlog\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_log, gfc_resolve_log, x, BT_REAL, dd, 0);\n+\t     NULL, gfc_simplify_log, gfc_resolve_log,\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   add_sym_1 (\"clog\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_log, gfc_resolve_log,\n-\t     x, BT_COMPLEX, dz, 0);\n+\t     x, BT_COMPLEX, dz, REQUIRED);\n \n   add_sym_1 (\"zlog\", 1, 1, BT_COMPLEX, dd,  GFC_STD_GNU,\n-\t     NULL, gfc_simplify_log, gfc_resolve_log, x, BT_COMPLEX, dd, 0);\n+\t     NULL, gfc_simplify_log, gfc_resolve_log,\n+\t     x, BT_COMPLEX, dd, REQUIRED);\n \n   make_alias (\"cdlog\");\n \n   make_generic (\"log\", GFC_ISYM_LOG, GFC_STD_F77);\n \n   add_sym_1 (\"log10\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_log10, gfc_resolve_log10,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"alog10\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_log10, gfc_resolve_log10,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dlog10\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_log10, gfc_resolve_log10,\n-\t     x, BT_REAL, dd, 0);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"log10\", GFC_ISYM_LOG10, GFC_STD_F77);\n \n   add_sym_2 (\"logical\", 0, 1, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_logical, gfc_simplify_logical, gfc_resolve_logical,\n-\t     l, BT_LOGICAL, dl, 0, kind, BT_INTEGER, di, 1);\n+\t     l, BT_LOGICAL, dl, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"logical\", GFC_ISYM_LOGICAL, GFC_STD_F95);\n \n   add_sym_2 (\"matmul\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_matmul, NULL, gfc_resolve_matmul,\n-\t     ma, BT_REAL, dr, 0, mb, BT_REAL, dr, 0);\n+\t     ma, BT_REAL, dr, REQUIRED, mb, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"matmul\", GFC_ISYM_MATMUL, GFC_STD_F95);\n \n@@ -1448,447 +1518,458 @@ add_functions (void)\n \n   add_sym_1m (\"max\", 1, 0, BT_UNKNOWN, 0, GFC_STD_F77,\n \t     gfc_check_min_max, gfc_simplify_max, gfc_resolve_max,\n-\t     a1, BT_UNKNOWN, dr, 0, a2, BT_UNKNOWN, dr, 0);\n+\t     a1, BT_UNKNOWN, dr, REQUIRED, a2, BT_UNKNOWN, dr, REQUIRED);\n \n   add_sym_1m (\"max0\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_min_max_integer, gfc_simplify_max, NULL,\n-\t     a1, BT_INTEGER, di, 0, a2, BT_INTEGER, di, 0);\n+\t     a1, BT_INTEGER, di, REQUIRED, a2, BT_INTEGER, di, REQUIRED);\n \n   add_sym_1m (\"amax0\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_min_max_integer, gfc_simplify_max, NULL,\n-\t     a1, BT_INTEGER, di, 0, a2, BT_INTEGER, di, 0);\n+\t     a1, BT_INTEGER, di, REQUIRED, a2, BT_INTEGER, di, REQUIRED);\n \n   add_sym_1m (\"amax1\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_min_max_real, gfc_simplify_max, NULL,\n-\t     a1, BT_REAL, dr, 0, a2, BT_REAL, dr, 0);\n+\t     a1, BT_REAL, dr, REQUIRED, a2, BT_REAL, dr, REQUIRED);\n \n   add_sym_1m (\"max1\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_min_max_real, gfc_simplify_max, NULL,\n-\t     a1, BT_REAL, dr, 0, a2, BT_REAL, dr, 0);\n+\t     a1, BT_REAL, dr, REQUIRED, a2, BT_REAL, dr, REQUIRED);\n \n   add_sym_1m (\"dmax1\", 1, 0, BT_REAL, dd, GFC_STD_F77,\n \t     gfc_check_min_max_double, gfc_simplify_max, NULL,\n-\t     a1, BT_REAL, dd, 0, a2, BT_REAL, dd, 0);\n+\t     a1, BT_REAL, dd, REQUIRED, a2, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"max\", GFC_ISYM_MAX, GFC_STD_F77);\n \n   add_sym_1 (\"maxexponent\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_maxexponent, NULL,\n-\t     x, BT_UNKNOWN, dr, 0);\n+\t     x, BT_UNKNOWN, dr, REQUIRED);\n \n   make_generic (\"maxexponent\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   add_sym_3ml (\"maxloc\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t       gfc_check_minloc_maxloc, NULL, gfc_resolve_maxloc,\n-\t       ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n-\t       msk, BT_LOGICAL, dl, 1);\n+\t       ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n+\t       msk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"maxloc\", GFC_ISYM_MAXLOC, GFC_STD_F95);\n \n   add_sym_3red (\"maxval\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n                 gfc_check_minval_maxval, NULL, gfc_resolve_maxval,\n-                ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n-                msk, BT_LOGICAL, dl, 1);\n+\t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n+\t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"maxval\", GFC_ISYM_MAXVAL, GFC_STD_F95);\n \n   add_sym_3 (\"merge\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_merge, NULL, gfc_resolve_merge,\n-\t     ts, BT_REAL, dr, 0, fs, BT_REAL, dr, 0,\n-\t     msk, BT_LOGICAL, dl, 0);\n+\t     ts, BT_REAL, dr, REQUIRED, fs, BT_REAL, dr, REQUIRED,\n+\t     msk, BT_LOGICAL, dl, REQUIRED);\n \n   make_generic (\"merge\", GFC_ISYM_MERGE, GFC_STD_F95);\n \n-  /* Note: amin0 is equivalent to real(min), min1 is equivalent to int(min).  */\n+  /* Note: amin0 is equivalent to real(min), min1 is equivalent to\n+     int(min).  */\n \n   add_sym_1m (\"min\", 1, 0, BT_UNKNOWN, 0, GFC_STD_F77,\n \t      gfc_check_min_max, gfc_simplify_min, gfc_resolve_min,\n-\t      a1, BT_REAL, dr, 0, a2, BT_REAL, dr, 0);\n+\t     a1, BT_REAL, dr, REQUIRED, a2, BT_REAL, dr, REQUIRED);\n \n   add_sym_1m (\"min0\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n \t      gfc_check_min_max_integer, gfc_simplify_min, NULL,\n-\t      a1, BT_INTEGER, di, 0, a2, BT_INTEGER, di, 0);\n+\t     a1, BT_INTEGER, di, REQUIRED, a2, BT_INTEGER, di, REQUIRED);\n \n   add_sym_1m (\"amin0\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t      gfc_check_min_max_integer, gfc_simplify_min, NULL,\n-\t      a1, BT_INTEGER, di, 0, a2, BT_INTEGER, di, 0);\n+\t     a1, BT_INTEGER, di, REQUIRED, a2, BT_INTEGER, di, REQUIRED);\n \n   add_sym_1m (\"amin1\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t      gfc_check_min_max_real, gfc_simplify_min, NULL,\n-\t      a1, BT_REAL, dr, 0, a2, BT_REAL, dr, 0);\n+\t     a1, BT_REAL, dr, REQUIRED, a2, BT_REAL, dr, REQUIRED);\n \n   add_sym_1m (\"min1\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n \t      gfc_check_min_max_real, gfc_simplify_min, NULL,\n-\t      a1, BT_REAL, dr, 0, a2, BT_REAL, dr, 0);\n+\t     a1, BT_REAL, dr, REQUIRED, a2, BT_REAL, dr, REQUIRED);\n \n   add_sym_1m (\"dmin1\", 1, 0, BT_REAL, dd, GFC_STD_F77,\n \t      gfc_check_min_max_double, gfc_simplify_min, NULL,\n-\t      a1, BT_REAL, dd, 0, a2, BT_REAL, dd, 0);\n+\t     a1, BT_REAL, dd, REQUIRED, a2, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"min\", GFC_ISYM_MIN, GFC_STD_F77);\n \n   add_sym_1 (\"minexponent\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_minexponent, NULL,\n-\t     x, BT_UNKNOWN, dr, 0);\n+\t     x, BT_UNKNOWN, dr, REQUIRED);\n \n   make_generic (\"minexponent\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   add_sym_3ml (\"minloc\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t       gfc_check_minloc_maxloc, NULL, gfc_resolve_minloc,\n-\t       ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n-\t       msk, BT_LOGICAL, dl, 1);\n+\t       ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n+\t       msk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"minloc\", GFC_ISYM_MINLOC, GFC_STD_F95);\n \n   add_sym_3red (\"minval\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n                 gfc_check_minval_maxval, NULL, gfc_resolve_minval,\n-                ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n-                msk, BT_LOGICAL, dl, 1);\n+\t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n+\t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"minval\", GFC_ISYM_MINVAL, GFC_STD_F95);\n \n   add_sym_2 (\"mod\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_a_p, gfc_simplify_mod, gfc_resolve_mod,\n-\t     a, BT_INTEGER, di, 0, p, BT_INTEGER, di, 0);\n+\t     a, BT_INTEGER, di, REQUIRED, p, BT_INTEGER, di, REQUIRED);\n \n   add_sym_2 (\"amod\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_mod, gfc_resolve_mod,\n-\t     a, BT_REAL, dr, 0, p, BT_REAL, dr, 0);\n+\t     a, BT_REAL, dr, REQUIRED, p, BT_REAL, dr, REQUIRED);\n \n   add_sym_2 (\"dmod\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_mod, gfc_resolve_mod,\n-\t     a, BT_REAL, dd, 0, p, BT_REAL, dd, 0);\n+\t     a, BT_REAL, dd, REQUIRED, p, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"mod\", GFC_ISYM_MOD, GFC_STD_F77);\n \n   add_sym_2 (\"modulo\", 1, 1, BT_REAL, di, GFC_STD_F95,\n \t     gfc_check_a_p, gfc_simplify_modulo, gfc_resolve_modulo,\n-\t     a, BT_REAL, di, 0, p, BT_REAL, di, 0);\n+\t     a, BT_REAL, di, REQUIRED, p, BT_REAL, di, REQUIRED);\n \n   make_generic (\"modulo\", GFC_ISYM_MODULO, GFC_STD_F95);\n \n   add_sym_2 (\"nearest\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_nearest, gfc_simplify_nearest, gfc_resolve_nearest,\n-\t     x, BT_REAL, dr, 0, s, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED, s, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"nearest\", GFC_ISYM_NEAREST, GFC_STD_F95);\n \n   add_sym_2 (\"nint\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_a_ikind, gfc_simplify_nint, gfc_resolve_nint,\n-\t     a, BT_REAL, dr, 0, kind, BT_INTEGER, di, 1);\n+\t     a, BT_REAL, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_1 (\"idnint\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_idnint, gfc_simplify_idnint, gfc_resolve_idnint,\n-\t     a, BT_REAL, dd, 0);\n+\t     a, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"nint\", GFC_ISYM_NINT, GFC_STD_F77);\n \n   add_sym_1 (\"not\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_i, gfc_simplify_not, gfc_resolve_not,\n-\t     i, BT_INTEGER, di, 0);\n+\t     i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"not\", GFC_ISYM_NOT, GFC_STD_F95);\n \n   add_sym_1 (\"null\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_null, gfc_simplify_null, NULL,\n-\t     mo, BT_INTEGER, di, 1);\n+\t     mo, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"null\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   add_sym_3 (\"pack\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_pack, NULL, gfc_resolve_pack,\n-\t     ar, BT_REAL, dr, 0, msk, BT_LOGICAL, dl, 0,\n-\t     v, BT_REAL, dr, 1);\n+\t     ar, BT_REAL, dr, REQUIRED, msk, BT_LOGICAL, dl, REQUIRED,\n+\t     v, BT_REAL, dr, OPTIONAL);\n \n   make_generic (\"pack\", GFC_ISYM_PACK, GFC_STD_F95);\n \n   add_sym_1 (\"precision\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_precision, gfc_simplify_precision, NULL,\n-\t     x, BT_UNKNOWN, 0, 0);\n+\t     x, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"precision\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   add_sym_1 (\"present\", 0, 1, BT_LOGICAL, dl, GFC_STD_F95,\n-\t     gfc_check_present, NULL, NULL, a, BT_REAL, dr, 0);\n+\t     gfc_check_present, NULL, NULL,\n+\t     a, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"present\", GFC_ISYM_PRESENT, GFC_STD_F95);\n \n   add_sym_3red (\"product\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n                 gfc_check_product_sum, NULL, gfc_resolve_product,\n-                ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n-                msk, BT_LOGICAL, dl, 1);\n+\t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n+\t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"product\", GFC_ISYM_PRODUCT, GFC_STD_F95);\n \n   add_sym_1 (\"radix\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_radix, gfc_simplify_radix, NULL,\n-\t     x, BT_UNKNOWN, 0, 0);\n+\t     x, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"radix\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   /* The following function is for G77 compatibility.  */\n   add_sym_1 (\"rand\", 0, 1, BT_REAL, 4, GFC_STD_GNU,\n              gfc_check_rand, NULL, NULL,\n-             i, BT_INTEGER, 4, 1);\n+             i, BT_INTEGER, 4, OPTIONAL);\n \n-  /* Compatibility with HP FORTRAN 77/iX Reference.  Note, rand() and \n-     ran() use slightly different shoddy multiplicative congruential \n-     PRNG.  */\n+  /* Compatibility with HP FORTRAN 77/iX Reference.  Note, rand() and ran()\n+     use slightly different shoddy multiplicative congruential PRNG.  */\n   make_alias (\"ran\");\n \n   make_generic (\"rand\", GFC_ISYM_RAND, GFC_STD_GNU);\n \n   add_sym_1 (\"range\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_range, gfc_simplify_range, NULL,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"range\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   add_sym_2 (\"real\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_real, gfc_simplify_real, gfc_resolve_real,\n-\t     a, BT_UNKNOWN, dr, 0, kind, BT_INTEGER, di, 1);\n+\t     a, BT_UNKNOWN, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_1 (\"float\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_float, NULL, a, BT_INTEGER, di, 0);\n+\t     NULL, gfc_simplify_float, NULL,\n+\t     a, BT_INTEGER, di, REQUIRED);\n \n   add_sym_1 (\"sngl\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_sngl, NULL, a, BT_REAL, dd, 0);\n+\t     NULL, gfc_simplify_sngl, NULL,\n+\t     a, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"real\", GFC_ISYM_REAL, GFC_STD_F77);\n \n   add_sym_2 (\"repeat\", 0, 1, BT_CHARACTER, dc, GFC_STD_F95,\n \t     gfc_check_repeat, gfc_simplify_repeat, gfc_resolve_repeat,\n-\t     stg, BT_CHARACTER, dc, 0, n, BT_INTEGER, di, 0);\n+\t     stg, BT_CHARACTER, dc, REQUIRED, n, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"repeat\", GFC_ISYM_REPEAT, GFC_STD_F95);\n \n   add_sym_4 (\"reshape\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_reshape, gfc_simplify_reshape, gfc_resolve_reshape,\n-\t     src, BT_REAL, dr, 0, shp, BT_INTEGER, ii, 0,\n-\t     pad, BT_REAL, dr, 1, ord, BT_INTEGER, ii, 1);\n+\t     src, BT_REAL, dr, REQUIRED, shp, BT_INTEGER, ii, REQUIRED,\n+\t     pad, BT_REAL, dr, OPTIONAL, ord, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"reshape\", GFC_ISYM_RESHAPE, GFC_STD_F95);\n \n   add_sym_1 (\"rrspacing\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_rrspacing, gfc_resolve_rrspacing,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"rrspacing\", GFC_ISYM_RRSPACING, GFC_STD_F95);\n \n   add_sym_2 (\"scale\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_scale, gfc_simplify_scale, gfc_resolve_scale,\n-\t     x, BT_REAL, dr, 0, i, BT_INTEGER, di, 0);\n+\t     x, BT_REAL, dr, REQUIRED, i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"scale\", GFC_ISYM_SCALE, GFC_STD_F95);\n \n   add_sym_3 (\"scan\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_scan, gfc_simplify_scan, gfc_resolve_scan,\n-\t     stg, BT_CHARACTER, dc, 0, set, BT_CHARACTER, dc, 0,\n-\t     bck, BT_LOGICAL, dl, 1);\n+\t     stg, BT_CHARACTER, dc, REQUIRED, set, BT_CHARACTER, dc, REQUIRED,\n+\t     bck, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"scan\", GFC_ISYM_SCAN, GFC_STD_F95);\n \n   /* Added for G77 compatibility garbage.  */\n-  add_sym_0 (\"second\", 0, 1, BT_REAL, 4,  GFC_STD_GNU,NULL, NULL, NULL);\n+  add_sym_0 (\"second\", 0, 1, BT_REAL, 4, GFC_STD_GNU,\n+\t     NULL, NULL, NULL);\n \n   make_generic (\"second\", GFC_ISYM_SECOND, GFC_STD_GNU);\n \n   add_sym_1 (\"selected_int_kind\", 0, 1, BT_INTEGER, di,  GFC_STD_F95,\n \t     NULL, gfc_simplify_selected_int_kind, NULL,\n-\t     r, BT_INTEGER, di, 0);\n+\t     r, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"selected_int_kind\", GFC_ISYM_SI_KIND, GFC_STD_F95);\n \n   add_sym_2 (\"selected_real_kind\", 0, 1, BT_INTEGER, di,  GFC_STD_F95,\n \t     gfc_check_selected_real_kind, gfc_simplify_selected_real_kind,\n-\t     NULL, p, BT_INTEGER, di, 1, r, BT_INTEGER, di, 1);\n+\t     NULL,\n+\t     p, BT_INTEGER, di, OPTIONAL, r, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"selected_real_kind\", GFC_ISYM_SR_KIND, GFC_STD_F95);\n \n   add_sym_2 (\"set_exponent\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_set_exponent, gfc_simplify_set_exponent,\n \t     gfc_resolve_set_exponent,\n-\t     x, BT_REAL, dr, 0, i, BT_INTEGER, di, 0);\n+\t     x, BT_REAL, dr, REQUIRED, i, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"set_exponent\", GFC_ISYM_SET_EXPONENT, GFC_STD_F95);\n \n   add_sym_1 (\"shape\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_shape, gfc_simplify_shape, gfc_resolve_shape,\n-\t     src, BT_REAL, dr, 0);\n+\t     src, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"shape\", GFC_ISYM_SHAPE, GFC_STD_F95);\n \n   add_sym_2 (\"sign\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_sign, gfc_simplify_sign, gfc_resolve_sign,\n-\t     a, BT_REAL, dr, 0, b, BT_REAL, dr, 0);\n+\t     a, BT_REAL, dr, REQUIRED, b, BT_REAL, dr, REQUIRED);\n \n   add_sym_2 (\"isign\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_sign, gfc_resolve_sign,\n-\t     a, BT_INTEGER, di, 0, b, BT_INTEGER, di, 0);\n+\t     a, BT_INTEGER, di, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n \n   add_sym_2 (\"dsign\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_sign, gfc_resolve_sign,\n-\t     a, BT_REAL, dd, 0, b, BT_REAL, dd, 0);\n+\t     a, BT_REAL, dd, REQUIRED, b, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"sign\", GFC_ISYM_SIGN, GFC_STD_F77);\n \n   add_sym_1 (\"sin\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_sin, gfc_resolve_sin, x, BT_REAL, dr, 0);\n+\t     NULL, gfc_simplify_sin, gfc_resolve_sin,\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dsin\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_sin, gfc_resolve_sin, x, BT_REAL, dd, 0);\n+\t     NULL, gfc_simplify_sin, gfc_resolve_sin,\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   add_sym_1 (\"csin\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_sin, gfc_resolve_sin,\n-\t   x, BT_COMPLEX, dz, 0);\n+\t     x, BT_COMPLEX, dz, REQUIRED);\n \n   add_sym_1 (\"zsin\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n-\t     NULL, gfc_simplify_sin, gfc_resolve_sin, x, BT_COMPLEX, dd, 0);\n+\t     NULL, gfc_simplify_sin, gfc_resolve_sin,\n+\t     x, BT_COMPLEX, dd, REQUIRED);\n \n   make_alias (\"cdsin\");\n \n   make_generic (\"sin\", GFC_ISYM_SIN, GFC_STD_F77);\n \n   add_sym_1 (\"sinh\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_sinh, gfc_resolve_sinh,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dsinh\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_sinh, gfc_resolve_sinh,\n-\t     x, BT_REAL, dd, 0);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"sinh\", GFC_ISYM_SINH, GFC_STD_F77);\n \n   add_sym_2 (\"size\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_size, gfc_simplify_size, NULL,\n-\t     ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1);\n+\t     ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"size\", GFC_ISYM_SIZE, GFC_STD_F95);\n \n   add_sym_1 (\"spacing\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_spacing, gfc_resolve_spacing,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"spacing\", GFC_ISYM_SPACING, GFC_STD_F95);\n \n   add_sym_3 (\"spread\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_spread, NULL, gfc_resolve_spread,\n-\t     src, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 0,\n-\t     n, BT_INTEGER, di, 0);\n+\t     src, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, REQUIRED,\n+\t     n, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"spread\", GFC_ISYM_SPREAD, GFC_STD_F95);\n \n   add_sym_1 (\"sqrt\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dsqrt\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt,\n-\t     x, BT_REAL, dd, 0);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   add_sym_1 (\"csqrt\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt,\n-\t     x, BT_COMPLEX, dz, 0);\n+\t     x, BT_COMPLEX, dz, REQUIRED);\n \n   add_sym_1 (\"zsqrt\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n-\t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt, x, BT_COMPLEX, dd, 0);\n+\t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt,\n+\t     x, BT_COMPLEX, dd, REQUIRED);\n \n   make_alias (\"cdsqrt\");\n \n   make_generic (\"sqrt\", GFC_ISYM_SQRT, GFC_STD_F77);\n \n   add_sym_3red (\"sum\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n                 gfc_check_product_sum, NULL, gfc_resolve_sum,\n-                ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n-                msk, BT_LOGICAL, dl, 1);\n+\t\tar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n+\t\tmsk, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"sum\", GFC_ISYM_SUM, GFC_STD_F95);\n \n-  add_sym_1 (\"system\", 1, 1, BT_INTEGER, di, GFC_STD_GNU, NULL, NULL, NULL,\n-\t     c, BT_CHARACTER, dc, 0);\n+  add_sym_1 (\"system\", 1, 1, BT_INTEGER, di, GFC_STD_GNU,\n+\t     NULL, NULL, NULL,\n+\t     c, BT_CHARACTER, dc, REQUIRED);\n+\n   make_generic (\"system\", GFC_ISYM_SYSTEM, GFC_STD_GNU);\n \n   add_sym_1 (\"tan\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n-\t     NULL, gfc_simplify_tan, gfc_resolve_tan, x, BT_REAL, dr, 0);\n+\t     NULL, gfc_simplify_tan, gfc_resolve_tan,\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dtan\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n-\t     NULL, gfc_simplify_tan, gfc_resolve_tan, x, BT_REAL, dd, 0);\n+\t     NULL, gfc_simplify_tan, gfc_resolve_tan,\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"tan\", GFC_ISYM_TAN, GFC_STD_F77);\n \n   add_sym_1 (\"tanh\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_tanh, gfc_resolve_tanh,\n-\t     x, BT_REAL, dr, 0);\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   add_sym_1 (\"dtanh\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_tanh, gfc_resolve_tanh,\n-\t     x, BT_REAL, dd, 0);\n+\t     x, BT_REAL, dd, REQUIRED);\n \n   make_generic (\"tanh\", GFC_ISYM_TANH, GFC_STD_F77);\n \n   add_sym_1 (\"tiny\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n-\t     gfc_check_x, gfc_simplify_tiny, NULL, x, BT_REAL, dr, 0);\n+\t     gfc_check_x, gfc_simplify_tiny, NULL,\n+\t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"tiny\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   add_sym_3 (\"transfer\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_transfer, NULL, gfc_resolve_transfer,\n-\t     src, BT_REAL, dr, 0, mo, BT_REAL, dr, 0,\n-\t     sz, BT_INTEGER, di, 1);\n+\t     src, BT_REAL, dr, REQUIRED, mo, BT_REAL, dr, REQUIRED,\n+\t     sz, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"transfer\", GFC_ISYM_TRANSFER, GFC_STD_F95);\n \n   add_sym_1 (\"transpose\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_transpose, NULL, gfc_resolve_transpose,\n-\t     m, BT_REAL, dr, 0);\n+\t     m, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"transpose\", GFC_ISYM_TRANSPOSE, GFC_STD_F95);\n \n   add_sym_1 (\"trim\", 0, 1, BT_CHARACTER, dc, GFC_STD_F95,\n \t     gfc_check_trim, gfc_simplify_trim, gfc_resolve_trim,\n-\t     stg, BT_CHARACTER, dc, 0);\n+\t     stg, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"trim\", GFC_ISYM_TRIM, GFC_STD_F95);\n \n   add_sym_2 (\"ubound\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ubound, gfc_simplify_ubound, gfc_resolve_ubound,\n-\t     ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1);\n+\t     ar, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL);\n \n   make_generic (\"ubound\", GFC_ISYM_UBOUND, GFC_STD_F95);\n \n   /* g77 compatibility for UMASK.  */\n   add_sym_1 (\"umask\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_umask, NULL, gfc_resolve_umask,\n-\t     a, BT_INTEGER, di, 0);\n+\t     a, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"umask\", GFC_ISYM_UMASK, GFC_STD_GNU);\n \n   /* g77 compatibility for UNLINK.  */\n   add_sym_1 (\"unlink\", 0, 1, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_unlink, NULL, gfc_resolve_unlink,\n-\t     a, BT_CHARACTER, dc, 0);\n+\t     a, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"unlink\", GFC_ISYM_UNLINK, GFC_STD_GNU);\n \n   add_sym_3 (\"unpack\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_unpack, NULL, gfc_resolve_unpack,\n-\t     v, BT_REAL, dr, 0, msk, BT_LOGICAL, dl, 0,\n-\t     f, BT_REAL, dr, 0);\n+\t     v, BT_REAL, dr, REQUIRED, msk, BT_LOGICAL, dl, REQUIRED,\n+\t     f, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"unpack\", GFC_ISYM_UNPACK, GFC_STD_F95);\n \n   add_sym_3 (\"verify\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_verify, gfc_simplify_verify, gfc_resolve_verify,\n-\t     stg, BT_CHARACTER, dc, 0, set, BT_CHARACTER, dc, 0,\n-\t     bck, BT_LOGICAL, dl, 1);\n+\t     stg, BT_CHARACTER, dc, REQUIRED, set, BT_CHARACTER, dc, REQUIRED,\n+\t     bck, BT_LOGICAL, dl, OPTIONAL);\n \n   make_generic (\"verify\", GFC_ISYM_VERIFY, GFC_STD_F95);\n-\n-\n }\n \n \n-\n /* Add intrinsic subroutines.  */\n \n static void\n@@ -1915,112 +1996,99 @@ add_subroutines (void)\n \n   add_sym_1s (\"cpu_time\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_cpu_time, NULL, gfc_resolve_cpu_time,\n-\t      tm, BT_REAL, dr, 0);\n+\t      tm, BT_REAL, dr, REQUIRED);\n \n   /* More G77 compatibility garbage.  */\n   add_sym_1s (\"second\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_second_sub, NULL, gfc_resolve_second_sub,\n-\t      tm, BT_REAL, dr, 0);\n+\t      tm, BT_REAL, dr, REQUIRED);\n \n   add_sym_4s (\"date_and_time\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_date_and_time, NULL, NULL,\n-\t      dt, BT_CHARACTER, dc, 1, tm, BT_CHARACTER, dc, 1,\n-\t      zn, BT_CHARACTER, dc, 1, vl, BT_INTEGER, di, 1);\n+\t      dt, BT_CHARACTER, dc, OPTIONAL, tm, BT_CHARACTER, dc, OPTIONAL,\n+\t      zn, BT_CHARACTER, dc, OPTIONAL, vl, BT_INTEGER, di, OPTIONAL);\n \n   /* More G77 compatibility garbage.  */\n   add_sym_2s (\"etime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t     gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n-\t     vl, BT_REAL, 4, 0, tm, BT_REAL, 4, 0);\n+\t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n \n   add_sym_2s (\"dtime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t     gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n-\t     vl, BT_REAL, 4, 0, tm, BT_REAL, 4, 0);\n+\t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n \n   add_sym_2s (\"getcwd\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n           gfc_check_getcwd_sub, NULL, gfc_resolve_getcwd_sub,\n-\t      c, BT_CHARACTER, dc, 0,\n-\t      st, BT_INTEGER, di, 1);\n+\t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_2s (\"getenv\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      NULL, NULL, NULL,\n-\t      name, BT_CHARACTER, dc, 0,\n-\t      val, BT_CHARACTER, dc, 0);\n+\t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER, dc, REQUIRED);\n \n   add_sym_2s (\"getarg\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      NULL, NULL, gfc_resolve_getarg,\n-\t      c, BT_INTEGER, di, 0, vl, BT_CHARACTER, dc, 0);\n-\n+\t      c, BT_INTEGER, di, REQUIRED, vl, BT_CHARACTER, dc, REQUIRED);\n \n   /* F2003 commandline routines.  */\n \n   add_sym_3s (\"get_command\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F2003,\n \t      NULL, NULL, gfc_resolve_get_command,\n-\t      com, BT_CHARACTER, dc, 1,\n-\t      length, BT_INTEGER, di, 1,\n-\t      st, BT_INTEGER, di, 1);\n+\t      com, BT_CHARACTER, dc, OPTIONAL, length, BT_INTEGER, di, OPTIONAL,\n+\t      st, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_4s (\"get_command_argument\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F2003,\n \t      NULL, NULL, gfc_resolve_get_command_argument,\n-\t      num, BT_INTEGER, di, 0,\n-\t      val, BT_CHARACTER, dc, 1,\n-\t      length, BT_INTEGER, di, 1,\n-\t      st, BT_INTEGER, di, 1);\n-\n+\t      num, BT_INTEGER, di, REQUIRED, val, BT_CHARACTER, dc, OPTIONAL,\n+\t      length, BT_INTEGER, di, OPTIONAL, st, BT_INTEGER, di, OPTIONAL);\n \n   /* F2003 subroutine to get environment variables.  */\n \n   add_sym_5s (\"get_environment_variable\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F2003,\n \t     NULL, NULL, gfc_resolve_get_environment_variable,\n-\t     name, BT_CHARACTER, dc, 0,\n-\t     val, BT_CHARACTER, dc, 1,\n-\t     length, BT_INTEGER, di, 1,\n-\t     st, BT_INTEGER, di, 1,\n-\t     trim_name, BT_LOGICAL, dl, 1);\n-\n+\t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER, dc, OPTIONAL,\n+\t      length, BT_INTEGER, di, OPTIONAL, st, BT_INTEGER, di, OPTIONAL,\n+\t      trim_name, BT_LOGICAL, dl, OPTIONAL);\n \n   add_sym_5s (\"mvbits\", 1, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_mvbits, gfc_simplify_mvbits, gfc_resolve_mvbits,\n-\t      f, BT_INTEGER, di, 0, fp, BT_INTEGER, di, 0,\n-\t      ln, BT_INTEGER, di, 0, t, BT_INTEGER, di, 0,\n-\t      tp, BT_INTEGER, di, 0);\n+\t      f, BT_INTEGER, di, REQUIRED, fp, BT_INTEGER, di, REQUIRED,\n+\t      ln, BT_INTEGER, di, REQUIRED, t, BT_INTEGER, di, REQUIRED,\n+\t      tp, BT_INTEGER, di, REQUIRED);\n \n   add_sym_1s (\"random_number\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_random_number, NULL, gfc_resolve_random_number,\n-\t      h, BT_REAL, dr, 0);\n+\t      h, BT_REAL, dr, REQUIRED);\n \n   add_sym_3s (\"random_seed\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_random_seed, NULL, NULL,\n-\t     sz, BT_INTEGER, di, 1, pt, BT_INTEGER, di, 1,\n-\t     gt, BT_INTEGER, di, 1);\n+\t      sz, BT_INTEGER, di, OPTIONAL, pt, BT_INTEGER, di, OPTIONAL,\n+\t      gt, BT_INTEGER, di, OPTIONAL);\n \n   /* More G77 compatibility garbage.  */\n   add_sym_1s (\"srand\", 0, 1, BT_UNKNOWN, di, GFC_STD_GNU,\n              gfc_check_srand, NULL, gfc_resolve_srand,\n-             c, BT_INTEGER, 4, 0);\n+\t      c, BT_INTEGER, 4, REQUIRED);\n \n   add_sym_1s (\"exit\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n              gfc_check_exit, NULL, gfc_resolve_exit,\n-             c, BT_INTEGER, di, 1);\n+\t      c, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_2s (\"system\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      NULL, NULL, gfc_resolve_system_sub,\n-\t      c, BT_CHARACTER, dc, 0,\n-\t      st, BT_INTEGER, di, 1);\n+\t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_3s (\"system_clock\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_system_clock, NULL, gfc_resolve_system_clock,\n-\t     c, BT_INTEGER, di, 1, cr, BT_INTEGER, di, 1,\n-\t     cm, BT_INTEGER, di, 1);\n+\t      c, BT_INTEGER, di, OPTIONAL, cr, BT_INTEGER, di, OPTIONAL,\n+\t      cm, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_2s (\"umask\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n           gfc_check_umask_sub, NULL, gfc_resolve_umask_sub,\n-\t      val, BT_INTEGER, di, 0,\n-\t      num, BT_INTEGER, di, 1);\n+\t      val, BT_INTEGER, di, REQUIRED, num, BT_INTEGER, di, OPTIONAL);\n \n   add_sym_2s (\"unlink\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n           gfc_check_unlink_sub, NULL, gfc_resolve_unlink_sub,\n-\t      c, BT_CHARACTER, dc, 0,\n-\t      st, BT_INTEGER, di, 1);\n+\t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n }\n "}]}