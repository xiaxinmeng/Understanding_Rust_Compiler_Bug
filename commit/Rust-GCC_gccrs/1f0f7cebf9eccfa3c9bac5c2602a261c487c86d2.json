{"sha": "1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwZjdjZWJmOWVjY2ZhM2M5YmFjNWMyNjAyYTI2MWM0ODdjODZkMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2006-01-19T07:35:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-01-19T07:35:47Z"}, "message": "re PR c/25805 (Incorrect handling of zero-initialized flexible arrays)\n\n\tPR c/25805\n\t* c-decl.c (add_flexible_array_elts_to_size): New function.\n\t(finish_decl): Use it.\n\ntestsuite/\n\tPR c/25805\n\t* gcc.dg/pr25805.c: New file.\n\nFrom-SVN: r109946", "tree": {"sha": "887b3e85fac5c0dbaab29803fab659be8bc0ce7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/887b3e85fac5c0dbaab29803fab659be8bc0ce7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2/comments", "author": null, "committer": null, "parents": [{"sha": "c888c93b290aeb3f7eb556bd5b7ed4f7564c822a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c888c93b290aeb3f7eb556bd5b7ed4f7564c822a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c888c93b290aeb3f7eb556bd5b7ed4f7564c822a"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "6fd7bfd6c18763492186ad8038cc7e3d8c056a3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2", "patch": "@@ -1,3 +1,9 @@\n+2006-01-19  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR c/25805\n+\t* c-decl.c (add_flexible_array_elts_to_size): New function.\n+\t(finish_decl): Use it.\n+\n 2006-01-18  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* diagnostic.h: Include options.h."}, {"sha": "8320acaf6514668d51a547477ef967493d5c40e6", "filename": "gcc/c-decl.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2", "patch": "@@ -3068,6 +3068,35 @@ set_array_declarator_inner (struct c_declarator *decl,\n     error (\"static or type qualifiers in abstract declarator\");\n   return decl;\n }\n+\n+/* INIT is a constructor that forms DECL's initializer.  If the final\n+   element initializes a flexible array field, add the size of that\n+   initializer to DECL's size.  */\n+\n+static void\n+add_flexible_array_elts_to_size (tree decl, tree init)\n+{\n+  unsigned int size;\n+  tree elt, type;\n+\n+  size = VEC_length (constructor_elt, CONSTRUCTOR_ELTS (init));\n+  if (size == 0)\n+    return;\n+\n+  elt = VEC_index (constructor_elt, CONSTRUCTOR_ELTS (init), size - 1)->value;\n+  type = TREE_TYPE (elt);\n+  if (TREE_CODE (type) == ARRAY_TYPE\n+      && TYPE_SIZE (type) == NULL_TREE\n+      && TYPE_DOMAIN (type) != NULL_TREE\n+      && TYPE_MAX_VALUE (TYPE_DOMAIN (type)) == NULL_TREE)\n+    {\n+      complete_array_type (&type, elt, false);\n+      DECL_SIZE (decl)\n+\t= size_binop (PLUS_EXPR, DECL_SIZE (decl), TYPE_SIZE (type));\n+      DECL_SIZE_UNIT (decl)\n+\t= size_binop (PLUS_EXPR, DECL_SIZE_UNIT (decl), TYPE_SIZE_UNIT (type));\n+    }\n+}\n \f\n /* Decode a \"typename\", such as \"int **\", returning a ..._TYPE node.  */\n \n@@ -3367,6 +3396,9 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n \n   if (TREE_CODE (decl) == VAR_DECL)\n     {\n+      if (init && TREE_CODE (init) == CONSTRUCTOR)\n+\tadd_flexible_array_elts_to_size (decl, init);\n+\n       if (DECL_SIZE (decl) == 0 && TREE_TYPE (decl) != error_mark_node\n \t  && COMPLETE_TYPE_P (TREE_TYPE (decl)))\n \tlayout_decl (decl, 0);"}, {"sha": "ca243bcbd860dc4501018196864802b190515c96", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2", "patch": "@@ -1,3 +1,8 @@\n+2006-01-19  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR c/25805\n+\t* gcc.dg/pr25805.c: New file.\n+\n 2006-01-18  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/25836"}, {"sha": "1060a96cfe24b40acf746c341e249bfba496b80d", "filename": "gcc/testsuite/gcc.dg/pr25805.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25805.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25805.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25805.c?ref=1f0f7cebf9eccfa3c9bac5c2602a261c487c86d2", "patch": "@@ -0,0 +1,40 @@\n+/* When -fzero-initialized-in-bss was in effect, we used to only allocate\n+   storage for d1.a.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+struct { int a; int x[]; } d1 = { 0, 0 };\n+int d2 = 0;\n+\n+int\n+main ()\n+{\n+  d2 = 1;\n+  if (sizeof (d1) != sizeof (int))\n+    abort ();\n+  if (d1.x[0] != 0)\n+    abort ();\n+  exit (0);\n+}\n+/* When -fzero-initialized-in-bss was in effect, we used to only allocate\n+   storage for d1.a.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+extern void abort (void);\n+extern void exit (int);\n+\n+struct { int a; int x[]; } d1 = { 0, 0 };\n+int d2 = 0;\n+\n+int\n+main ()\n+{\n+  d2 = 1;\n+  if (sizeof (d1) != sizeof (int))\n+    abort ();\n+  if (d1.x[0] != 0)\n+    abort ();\n+  exit (0);\n+}"}]}