{"sha": "f0cc08566e5366f3150527c0e9710c007a26890c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBjYzA4NTY2ZTUzNjZmMzE1MDUyN2MwZTk3MTBjMDA3YTI2ODkwYw==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-03-09T21:35:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-17T14:32:12Z"}, "message": "[Ada] Cleanup redundant conditions in checks for overlapping actuals\n\ngcc/ada/\n\n\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Remove repeated\n\tcode.", "tree": {"sha": "b57fba1b0ba304a6b1d76b0c305b17f46d1745b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b57fba1b0ba304a6b1d76b0c305b17f46d1745b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0cc08566e5366f3150527c0e9710c007a26890c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0cc08566e5366f3150527c0e9710c007a26890c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0cc08566e5366f3150527c0e9710c007a26890c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0cc08566e5366f3150527c0e9710c007a26890c/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f59ca9eee842a3a1b213da220331e7d4be454486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f59ca9eee842a3a1b213da220331e7d4be454486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f59ca9eee842a3a1b213da220331e7d4be454486"}], "stats": {"total": 233, "additions": 106, "deletions": 127}, "files": [{"sha": "cbe69568bcde4f10b1d9ff0612d8f15c1fe23d23", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 106, "deletions": 127, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0cc08566e5366f3150527c0e9710c007a26890c/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0cc08566e5366f3150527c0e9710c007a26890c/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=f0cc08566e5366f3150527c0e9710c007a26890c", "patch": "@@ -3745,171 +3745,150 @@ package body Sem_Warn is\n             return;\n          end if;\n \n-         --  One of the formals must be either (in)-out or composite.\n-         --  The other must be (in)-out.\n+         Form2 := Next_Formal (Form1);\n+         Act2  := Next_Actual (Act1);\n+         while Present (Form2) and then Present (Act2) loop\n+            if Refer_Same_Object (Act1, Act2) then\n+               if Is_Generic_Type (Etype (Act2)) then\n+                  return;\n+               end if;\n \n-         if Is_Elementary_Type (Etype (Act1))\n-           and then Ekind (Form1) = E_In_Parameter\n-         then\n-            null;\n+               --  Case 1: two writable elementary parameters that overlap\n \n-         else\n-            Form2 := Next_Formal (Form1);\n-            Act2  := Next_Actual (Act1);\n-            while Present (Form2) and then Present (Act2) loop\n-               if Refer_Same_Object (Act1, Act2) then\n-                  if Is_Generic_Type (Etype (Act2)) then\n-                     return;\n-                  end if;\n+               if (Is_Elementary_Type (Etype (Form1))\n+                 and then Is_Elementary_Type (Etype (Form2))\n+                 and then Ekind (Form1) /= E_In_Parameter\n+                 and then Ekind (Form2) /= E_In_Parameter)\n \n-                  --  First case : two writable elementary parameters\n-                  --  that overlap.\n+               --  Case 2: two composite parameters that overlap, one of\n+               --  which is writable.\n \n-                  if (Is_Elementary_Type (Etype (Form1))\n-                    and then Is_Elementary_Type (Etype (Form2))\n-                    and then Ekind (Form1) /= E_In_Parameter\n-                    and then Ekind (Form2) /= E_In_Parameter)\n+                 or else (Is_Composite_Type (Etype (Form1))\n+                  and then Is_Composite_Type (Etype (Form2))\n+                  and then (Ekind (Form1) /= E_In_Parameter\n+                    or else Ekind (Form2) /= E_In_Parameter))\n \n-                  --  Second case : two composite parameters that overlap,\n-                  --  one of which is writable.\n+               --  Case 3: an elementary writable parameter that overlaps\n+               --  a composite one.\n \n-                    or else (Is_Composite_Type (Etype (Form1))\n-                     and then Is_Composite_Type (Etype (Form2))\n-                     and then (Ekind (Form1) /= E_In_Parameter\n-                       or else Ekind (Form2) /= E_In_Parameter))\n+                 or else (Is_Elementary_Type (Etype (Form1))\n+                  and then Ekind (Form1) /= E_In_Parameter\n+                  and then Is_Composite_Type (Etype (Form2)))\n \n-                  --  Third case : an elementary writable parameter that\n-                  --  overlaps a composite one.\n+                or else (Is_Elementary_Type (Etype (Form2))\n+                  and then Ekind (Form2) /= E_In_Parameter\n+                  and then Is_Composite_Type (Etype (Form1)))\n+               then\n \n-                    or else (Is_Elementary_Type (Etype (Form1))\n-                     and then Ekind (Form1) /= E_In_Parameter\n-                     and then Is_Composite_Type (Etype (Form2)))\n+               --  Guard against previous errors\n \n-                   or else (Is_Elementary_Type (Etype (Form2))\n-                     and then Ekind (Form2) /= E_In_Parameter\n-                     and then Is_Composite_Type (Etype (Form1)))\n+                  if Error_Posted (N)\n+                    or else No (Etype (Act1))\n+                    or else No (Etype (Act2))\n                   then\n+                     null;\n \n-                  --  Guard against previous errors\n-\n-                     if Error_Posted (N)\n-                       or else No (Etype (Act1))\n-                       or else No (Etype (Act2))\n-                     then\n-                        null;\n-\n-                     --  If the actual is a function call in prefix notation,\n-                     --  there is no real overlap.\n-\n-                     elsif Nkind (Act2) = N_Function_Call then\n-                        null;\n-\n-                     --  If type is explicitly not by-copy, assume that\n-                     --  aliasing is intended.\n-\n-                     elsif\n-                       Present (Underlying_Type (Etype (Form1)))\n-                         and then\n-                           (Is_By_Reference_Type\n-                             (Underlying_Type (Etype (Form1)))\n-                             or else\n-                               Convention (Underlying_Type (Etype (Form1))) =\n-                                            Convention_Ada_Pass_By_Reference)\n-                     then\n-                        null;\n-\n-                     --  Under Ada 2012 we only report warnings on overlapping\n-                     --  arrays and record types if switch is set.\n+                  --  If the actual is a function call in prefix notation,\n+                  --  there is no real overlap.\n \n-                     elsif Ada_Version >= Ada_2012\n-                       and then not Is_Elementary_Type (Etype (Form1))\n-                       and then not Warn_On_Overlap\n-                     then\n-                        null;\n+                  elsif Nkind (Act2) = N_Function_Call then\n+                     null;\n \n-                     --  Here we may need to issue overlap message\n+                  --  If type is explicitly not by-copy, assume that\n+                  --  aliasing is intended.\n \n-                     else\n-                        Error_Msg_Warn :=\n+                  elsif\n+                    Present (Underlying_Type (Etype (Form1)))\n+                      and then\n+                        (Is_By_Reference_Type\n+                          (Underlying_Type (Etype (Form1)))\n+                          or else\n+                            Convention (Underlying_Type (Etype (Form1))) =\n+                                         Convention_Ada_Pass_By_Reference)\n+                  then\n+                     null;\n \n-                          --  Overlap checking is an error only in Ada 2012.\n-                          --  For earlier versions of Ada, this is a warning.\n+                  --  Under Ada 2012 we only report warnings on overlapping\n+                  --  arrays and record types if switch is set.\n \n-                          Ada_Version < Ada_2012\n+                  elsif Ada_Version >= Ada_2012\n+                    and then not Is_Elementary_Type (Etype (Form1))\n+                    and then not Warn_On_Overlap\n+                  then\n+                     null;\n \n-                          --  Overlap is only illegal in Ada 2012 in the case\n-                          --  of elementary types (passed by copy). For other\n-                          --  types we always have a warning in all versions.\n-                          --  This is clarified by AI12-0216.\n+                  --  Here we may need to issue overlap message\n \n-                          or else not\n-                           (Is_Elementary_Type (Etype (Form1))\n-                            and then Is_Elementary_Type (Etype (Form2)))\n+                  else\n+                     Error_Msg_Warn :=\n \n-                          --  debug flag -gnatd.E changes the error to a\n-                          --  warning even in Ada 2012 mode.\n+                       --  Overlap checking is an error only in Ada 2012. For\n+                       --  earlier versions of Ada, this is a warning.\n \n-                          or else Error_To_Warning;\n+                       Ada_Version < Ada_2012\n \n-                        if Is_Elementary_Type (Etype (Act1))\n-                          and then Ekind (Form2) = E_In_Parameter\n-                        then\n-                           null;  --  No real aliasing\n+                       --  Overlap is only illegal in Ada 2012 in the case of\n+                       --  elementary types (passed by copy). For other types\n+                       --  we always have a warning in all versions. This is\n+                       --  clarified by AI12-0216.\n \n-                        elsif Is_Elementary_Type (Etype (Act2))\n-                          and then Ekind (Form2) = E_In_Parameter\n-                        then\n-                           null;  --  Ditto\n+                       or else not\n+                        (Is_Elementary_Type (Etype (Form1))\n+                         and then Is_Elementary_Type (Etype (Form2)))\n \n-                        --  If the call was written in prefix notation, and\n-                        --  thus its prefix before rewriting was a selected\n-                        --  component, count only visible actuals in call.\n+                       --  debug flag -gnatd.E changes the error to a warning\n+                       --  even in Ada 2012 mode.\n \n-                        elsif Is_Entity_Name (First_Actual (N))\n-                          and then Nkind (Original_Node (N)) = Nkind (N)\n-                          and then Nkind (Name (Original_Node (N))) =\n-                                                        N_Selected_Component\n-                          and then\n-                            Is_Entity_Name (Prefix (Name (Original_Node (N))))\n-                          and then\n-                            Entity (Prefix (Name (Original_Node (N)))) =\n-                              Entity (First_Actual (N))\n-                        then\n-                           if Act1 = First_Actual (N) then\n-                              Error_Msg_FE\n-                                (\"<I<`IN OUT` prefix overlaps with \"\n-                                 & \"actual for&\", Act1, Form2);\n+                       or else Error_To_Warning;\n \n-                           else\n-                              --  For greater clarity, give name of formal\n+                     --  If the call was written in prefix notation, and thus\n+                     --  its prefix before rewriting was a selected component,\n+                     --  count only visible actuals in call.\n \n-                              Error_Msg_Node_2 := Form2;\n-                              Error_Msg_FE\n-                                (\"<I<writable actual for & overlaps with \"\n-                                 & \"actual for&\", Act1, Form2);\n-                           end if;\n+                     if Is_Entity_Name (First_Actual (N))\n+                       and then Nkind (Original_Node (N)) = Nkind (N)\n+                       and then Nkind (Name (Original_Node (N))) =\n+                                                     N_Selected_Component\n+                       and then\n+                         Is_Entity_Name (Prefix (Name (Original_Node (N))))\n+                       and then\n+                         Entity (Prefix (Name (Original_Node (N)))) =\n+                           Entity (First_Actual (N))\n+                     then\n+                        if Act1 = First_Actual (N) then\n+                           Error_Msg_FE\n+                             (\"<I<`IN OUT` prefix overlaps with \"\n+                              & \"actual for&\", Act1, Form2);\n \n                         else\n                            --  For greater clarity, give name of formal\n \n                            Error_Msg_Node_2 := Form2;\n-\n-                           --  This is one of the messages\n-\n                            Error_Msg_FE\n                              (\"<I<writable actual for & overlaps with \"\n-                              & \"actual for&\", Act1, Form1);\n+                              & \"actual for&\", Act1, Form2);\n                         end if;\n+\n+                     else\n+                        --  For greater clarity, give name of formal\n+\n+                        Error_Msg_Node_2 := Form2;\n+\n+                        --  This is one of the messages\n+\n+                        Error_Msg_FE\n+                          (\"<I<writable actual for & overlaps with \"\n+                           & \"actual for&\", Act1, Form1);\n                      end if;\n                   end if;\n-\n-                  return;\n                end if;\n \n-               Next_Formal (Form2);\n-               Next_Actual (Act2);\n-            end loop;\n-         end if;\n+               return;\n+            end if;\n+\n+            Next_Formal (Form2);\n+            Next_Actual (Act2);\n+         end loop;\n \n          Next_Formal (Form1);\n          Next_Actual (Act1);"}]}