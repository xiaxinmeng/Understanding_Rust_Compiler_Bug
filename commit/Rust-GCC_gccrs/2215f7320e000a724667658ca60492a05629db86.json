{"sha": "2215f7320e000a724667658ca60492a05629db86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIxNWY3MzIwZTAwMGE3MjQ2Njc2NThjYTYwNDkyYTA1NjI5ZGI4Ng==", "commit": {"author": {"name": "Carlo Wood", "email": "carlo@alinoe.com", "date": "2003-11-07T03:49:43Z"}, "committer": {"name": "Carlo Wood", "email": "carlo@gcc.gnu.org", "date": "2003-11-07T03:49:43Z"}, "message": "demangle.h (qualifier_list<Allocator>::decode_qualifiers(string_type&, string_type&, bool) const): Made const.\n\n* include/bits/demangle.h\n(qualifier_list<Allocator>::decode_qualifiers(string_type&,\nstring_type&, bool) const): Made const.\n(qualifier_list<Allocator>::M_printing_suppressed): Added mutable.\n(_GLIBCXX_DEMANGLER_DOUT_ENTERING3, _GLIBCXX_DEMANGLER_RETURN3,\nstd::ostream& operator<<(std::ostream&, qualifier const&),\nstd::ostream& operator<<(std::ostream&, qualifier_list const&),\nqualifier_list<Allocator>::decode_qualifiers(string_type&,\nstring_type&, bool) const,\nsession<Allocator>::decode_type_with_postfix(string_type&,\nstring_type&, qualifier_list<Allocator>*))\nAdded and/or changed debug-only hooks and code.\n\nFrom-SVN: r73327", "tree": {"sha": "13b52bfca598ec66bc4bb307fc7d109f7486639d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13b52bfca598ec66bc4bb307fc7d109f7486639d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2215f7320e000a724667658ca60492a05629db86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2215f7320e000a724667658ca60492a05629db86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2215f7320e000a724667658ca60492a05629db86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2215f7320e000a724667658ca60492a05629db86/comments", "author": {"login": "CarloWood", "id": 590303, "node_id": "MDQ6VXNlcjU5MDMwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/590303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CarloWood", "html_url": "https://github.com/CarloWood", "followers_url": "https://api.github.com/users/CarloWood/followers", "following_url": "https://api.github.com/users/CarloWood/following{/other_user}", "gists_url": "https://api.github.com/users/CarloWood/gists{/gist_id}", "starred_url": "https://api.github.com/users/CarloWood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CarloWood/subscriptions", "organizations_url": "https://api.github.com/users/CarloWood/orgs", "repos_url": "https://api.github.com/users/CarloWood/repos", "events_url": "https://api.github.com/users/CarloWood/events{/privacy}", "received_events_url": "https://api.github.com/users/CarloWood/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cafa50327c89ec582f3f045f52a8c8b212fc8f38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cafa50327c89ec582f3f045f52a8c8b212fc8f38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cafa50327c89ec582f3f045f52a8c8b212fc8f38"}], "stats": {"total": 75, "additions": 65, "deletions": 10}, "files": [{"sha": "68c8571e440fcf5090e35cf5fd7d1684536a56bd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2215f7320e000a724667658ca60492a05629db86/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2215f7320e000a724667658ca60492a05629db86/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2215f7320e000a724667658ca60492a05629db86", "patch": "@@ -1,3 +1,18 @@\n+2003-11-07  Carlo Wood  <carlo@alinoe.com>\n+\n+        * include/bits/demangle.h\n+\t(qualifier_list<Allocator>::decode_qualifiers(string_type&,\n+\tstring_type&, bool) const): Made const.\n+\t(qualifier_list<Allocator>::M_printing_suppressed): Added mutable.\n+\t(_GLIBCXX_DEMANGLER_DOUT_ENTERING3, _GLIBCXX_DEMANGLER_RETURN3,\n+\tstd::ostream& operator<<(std::ostream&, qualifier const&),\n+\tstd::ostream& operator<<(std::ostream&, qualifier_list const&),\n+\tqualifier_list<Allocator>::decode_qualifiers(string_type&,\n+\tstring_type&, bool) const,\n+\tsession<Allocator>::decode_type_with_postfix(string_type&,\n+\tstring_type&, qualifier_list<Allocator>*))\n+\tAdded and/or changed debug-only hooks and code.\n+\n 2003-11-04  Jeffrey D. Oldham  <oldham@codesourcery.com>\n \n \t* libsupc++/vec.cc (__cxa_vec_delete2): If given a NULL pointer,"}, {"sha": "901eaa7e1b8a424d7040e789e1ef704213478484", "filename": "libstdc++-v3/include/bits/demangle.h", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2215f7320e000a724667658ca60492a05629db86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2215f7320e000a724667658ca60492a05629db86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdemangle.h?ref=2215f7320e000a724667658ca60492a05629db86", "patch": "@@ -40,10 +40,10 @@\n #define _GLIBCXX_DEMANGLER_DOUT(cntrl, data)\n #define _GLIBCXX_DEMANGLER_DOUT_ENTERING(x)\n #define _GLIBCXX_DEMANGLER_DOUT_ENTERING2(x)\n-#define _GLIBCXX_DEMANGLER_RETURN \\\n-    return M_result\n-#define _GLIBCXX_DEMANGLER_RETURN2 \\\n-    return M_result\n+#define _GLIBCXX_DEMANGLER_DOUT_ENTERING3(x)\n+#define _GLIBCXX_DEMANGLER_RETURN return M_result\n+#define _GLIBCXX_DEMANGLER_RETURN2 return M_result\n+#define _GLIBCXX_DEMANGLER_RETURN3\n #define _GLIBCXX_DEMANGLER_FAILURE \\\n     do { M_result = false; return false; } while(0)\n #else\n@@ -192,6 +192,28 @@ namespace __gnu_cxx\n \tpart_of_substitution(void) const\n \t{ return M_part_of_substitution; }\n \n+#if _GLIBCXX_DEMANGLER_CWDEBUG\n+\tfriend std::ostream& operator<<(std::ostream& os, qualifier const& qual)\n+\t{\n+\t  os << (char)qual.M_qualifier1;\n+\t  if (qual.M_qualifier1 == vendor_extension ||\n+\t      qual.M_qualifier1 == array ||\n+\t      qual.M_qualifier1 == pointer_to_member)\n+\t    os << \" [\" << qual.M_optional_type << ']';\n+\t  else if (qual.M_qualifier1 == 'K' ||\n+\t\t   qual.M_qualifier1 == 'V' ||\n+\t\t   qual.M_qualifier1 == 'r')\n+\t  {\n+\t    if (qual.M_qualifier2)\n+\t    {\n+\t      os << (char)qual.M_qualifier2;\n+\t      if (qual.M_qualifier3)\n+\t\tos << (char)qual.M_qualifier3;\n+\t    }\n+\t  }\n+\t  return os;\n+\t}\n+#endif\n       };\n \n     template<typename Allocator>\n@@ -201,7 +223,7 @@ namespace __gnu_cxx\n \t  string_type;\n \n       private:\n-\tbool M_printing_suppressed;\n+\tmutable bool M_printing_suppressed;\n \tstd::vector<qualifier<Allocator>, Allocator> M_qualifier_starts;\n \tsession<Allocator>& M_demangler;\n \n@@ -240,7 +262,7 @@ namespace __gnu_cxx\n \tvoid\n \tdecode_qualifiers(string_type& prefix,\n \t    \t\t  string_type& postfix,\n-\t\t\t  bool member_function_pointer_qualifiers);\n+\t\t\t  bool member_function_pointer_qualifiers) const;\n \n \tbool\n \tsuppressed(void) const\n@@ -254,6 +276,23 @@ namespace __gnu_cxx\n \tsize(void) const\n \t{ return M_qualifier_starts.size(); }\n \n+#if _GLIBCXX_DEMANGLER_CWDEBUG\n+\tfriend std::ostream& operator<<(std::ostream& os, qualifier_list const& list)\n+\t{\n+\t  typename std::vector<qualifier<Allocator>, Allocator>::const_iterator\n+\t      iter = list.M_qualifier_starts.begin();\n+\t  if (iter != list.M_qualifier_starts.end())\n+\t  {\n+\t    os << \"{ \" << *iter;\n+\t    while (++iter != list.M_qualifier_starts.end())\n+\t      os << \", \" << *iter;\n+\t    os << \" }\";\n+\t  }\n+\t  else\n+\t    os << \"{ }\";\n+\t  return os;\n+\t}\n+#endif\n       };\n \n     template<typename Allocator>\n@@ -1377,10 +1416,11 @@ namespace __gnu_cxx\n       qualifier_list<Allocator>::decode_qualifiers(\n \t  string_type& prefix,\n \t  string_type& postfix,\n-\t  bool member_function_pointer_qualifiers = false)\n+\t  bool member_function_pointer_qualifiers = false) const\n       {\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING3(\"decode_qualifiers\");\n \tfor(typename std::vector<qualifier<Allocator>, Allocator>::\n-\t    reverse_iterator iter = M_qualifier_starts.rbegin();\n+\t    const_reverse_iterator iter = M_qualifier_starts.rbegin();\n \t    iter != M_qualifier_starts.rend();)\n \t{\n \t  if (!member_function_pointer_qualifiers\n@@ -1442,6 +1482,7 @@ namespace __gnu_cxx\n \t    ++iter;\n \t}\n \tM_printing_suppressed = false;\n+\t_GLIBCXX_DEMANGLER_RETURN3;\n       }\n \n     //\n@@ -1451,8 +1492,7 @@ namespace __gnu_cxx\n \t  string_type& prefix, string_type& postfix,\n \t  qualifier_list<Allocator>* qualifiers)\n       {\n-\t_GLIBCXX_DEMANGLER_DOUT_ENTERING2\n-\t    (qualifiers ? \"decode_type\" : \"decode_type[with qualifiers]\");\n+\t_GLIBCXX_DEMANGLER_DOUT_ENTERING2(\"decode_type\");\n \t++M_inside_type;\n \tbool recursive_template_param_or_substitution_call;\n \tif (!(recursive_template_param_or_substitution_call = qualifiers))"}]}