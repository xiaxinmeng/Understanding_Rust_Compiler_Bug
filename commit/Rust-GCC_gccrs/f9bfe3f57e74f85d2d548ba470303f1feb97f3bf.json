{"sha": "f9bfe3f57e74f85d2d548ba470303f1feb97f3bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjliZmUzZjU3ZTc0Zjg1ZDJkNTQ4YmE0NzAzMDNmMWZlYjk3ZjNiZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-07-18T07:35:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-07-18T07:35:40Z"}, "message": "re PR tree-optimization/80620 (gcc produces wrong code with -O3)\n\n2017-07-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/80620\n\tPR tree-optimization/81403\n\t* tree-ssa-pre.c (phi_translate_1): Clear range and points-to\n\tinfo when re-using a VN table entry.\n\n\t* gcc.dg/torture/pr80620.c: New testcase.\n\t* gcc.dg/torture/pr81403.c: Likewise.\n\nFrom-SVN: r250297", "tree": {"sha": "9ec1e7a1891bb4a5f04d44bddc9d387b26111adb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ec1e7a1891bb4a5f04d44bddc9d387b26111adb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2e78d766294a5e548c2eaf92f07a8f768120e1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e78d766294a5e548c2eaf92f07a8f768120e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2e78d766294a5e548c2eaf92f07a8f768120e1c"}], "stats": {"total": 122, "additions": 120, "deletions": 2}, "files": [{"sha": "c6e118f1b95daebee4ee7d7aee657cbfc4edad33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9bfe3f57e74f85d2d548ba470303f1feb97f3bf", "patch": "@@ -1,4 +1,11 @@\n-2017-06-18  Richard Biener  <rguenther@suse.de>\n+2017-07-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80620\n+\tPR tree-optimization/81403\n+\t* tree-ssa-pre.c (phi_translate_1): Clear range and points-to\n+\tinfo when re-using a VN table entry.\n+\n+2017-07-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81418\n \t* tree-vect-loop.c (vectorizable_reduction): Properly compute"}, {"sha": "e80871890076a34e00502f44d4bdf5c228d385dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9bfe3f57e74f85d2d548ba470303f1feb97f3bf", "patch": "@@ -1,4 +1,11 @@\n-2017-06-18  Richard Biener  <rguenther@suse.de>\n+2017-07-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80620\n+\tPR tree-optimization/81403\n+\t* gcc.dg/torture/pr80620.c: New testcase.\n+\t* gcc.dg/torture/pr81403.c: Likewise.\n+\n+2017-07-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81418\n \t* gcc.dg/torture/pr81418.c: New testcase."}, {"sha": "ef56eedba5a3b667fbcfacc2c111473726cca365", "filename": "gcc/testsuite/gcc.dg/torture/pr80620.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80620.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80620.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr80620.c?ref=f9bfe3f57e74f85d2d548ba470303f1feb97f3bf", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int32plus } */\n+\n+long long int a = -465274079317386463LL;\n+int b = 856872806;\n+int c = -1940894202;\n+int d = 1718449211;\n+int e = -392681565;\n+unsigned long long int f = 13521452247506316486ULL;\n+int g = -13194608;\n+\n+__attribute__((noinline, noclone))\n+void foo ()\n+{\n+  if (!a - a)\n+    c = b = 0;\n+  else\n+    d = 3UL * a == 0;\n+  if (g / a)\n+    e = 0 < -a + 500849970701012771LL + (unsigned long) -a;\n+  else\n+    f = 4081116982543369LL & a;\n+}\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  foo ();\n+  if (f != 2818598057803777LL)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "5fca4d4d6b02dc5465ee630b075f03d5928d0fe8", "filename": "gcc/testsuite/gcc.dg/torture/pr81403.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81403.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81403.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81403.c?ref=f9bfe3f57e74f85d2d548ba470303f1feb97f3bf", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int32plus } */\n+\n+short var_9 = 19581;\n+unsigned char var_33 = 21;\n+long long int var_55 = 286697804684061197LL;\n+long long int var_59 = -1962393262513510540LL;\n+long long int var_71 = 4731868609112929952LL;\n+long long int var_773 = -4784633456247777769LL;\n+short var_776 = 5894;\n+long long int var_1321 = 7573221950916697355LL;\n+unsigned char uc = 217;\n+\n+void foo()\n+{\n+  if (var_55)\n+    var_71 = 0;\n+  if (var_9 != ~(0 < uc))\n+    var_773 = 0;\n+  else\n+    var_776 = 1 / ~var_9 * -1;\n+  if (var_33)\n+    var_59 = ~var_9 & 10393;\n+  var_1321 = ~var_9;\n+}\n+int main()\n+{\n+  foo();\n+  if (var_59 != 8320)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "0ec3d3c7f7e0b80c3bd706134f2e09df2fe73844", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bfe3f57e74f85d2d548ba470303f1feb97f3bf/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=f9bfe3f57e74f85d2d548ba470303f1feb97f3bf", "patch": "@@ -1489,6 +1489,45 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t\tPRE_EXPR_NARY (expr) = nary;\n \t\tnew_val_id = nary->value_id;\n \t\tget_or_alloc_expression_id (expr);\n+\t\t/* When we end up re-using a value number make sure that\n+\t\t   doesn't have unrelated (which we can't check here)\n+\t\t   range or points-to info on it.  */\n+\t\tif (result\n+\t\t    && INTEGRAL_TYPE_P (TREE_TYPE (result))\n+\t\t    && SSA_NAME_RANGE_INFO (result)\n+\t\t    && ! SSA_NAME_IS_DEFAULT_DEF (result))\n+\t\t  {\n+\t\t    if (! VN_INFO (result)->info.range_info)\n+\t\t      {\n+\t\t\tVN_INFO (result)->info.range_info\n+\t\t\t  = SSA_NAME_RANGE_INFO (result);\n+\t\t\tVN_INFO (result)->range_info_anti_range_p\n+\t\t\t  = SSA_NAME_ANTI_RANGE_P (result);\n+\t\t      }\n+\t\t    if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t      {\n+\t\t\tfprintf (dump_file, \"clearing range info of \");\n+\t\t\tprint_generic_expr (dump_file, result);\n+\t\t\tfprintf (dump_file, \"\\n\");\n+\t\t      }\n+\t\t    SSA_NAME_RANGE_INFO (result) = NULL;\n+\t\t  }\n+\t\telse if (result\n+\t\t\t && POINTER_TYPE_P (TREE_TYPE (result))\n+\t\t\t && SSA_NAME_PTR_INFO (result)\n+\t\t\t && ! SSA_NAME_IS_DEFAULT_DEF (result))\n+\t\t  {\n+\t\t    if (! VN_INFO (result)->info.ptr_info)\n+\t\t      VN_INFO (result)->info.ptr_info\n+\t\t\t= SSA_NAME_PTR_INFO (result);\n+\t\t    if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t      {\n+\t\t\tfprintf (dump_file, \"clearing points-to info of \");\n+\t\t\tprint_generic_expr (dump_file, result);\n+\t\t\tfprintf (dump_file, \"\\n\");\n+\t\t      }\n+\t\t    SSA_NAME_PTR_INFO (result) = NULL;\n+\t\t  }\n \t      }\n \t    else\n \t      {"}]}