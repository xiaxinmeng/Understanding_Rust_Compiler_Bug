{"sha": "526aba2811f2a0f3f4fd91d026995d2d46b62d43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI2YWJhMjgxMWYyYTBmM2Y0ZmQ5MWQwMjY5OTVkMmQ0NmI2MmQ0Mw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-10-29T19:34:53Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-10-29T19:34:53Z"}, "message": "toplev.c, [...]: Change comments mentioning C9X to refer to C99 instead.\n\n\t* toplev.c, flags.h, fold-const.c, real.c, rtl.c,\n\tfixinc/inclhack.def: Change comments mentioning C9X to refer to\n\tC99 instead.\n\nFrom-SVN: r37127", "tree": {"sha": "01fc77620adcd4567052621a22d5a7442b123fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01fc77620adcd4567052621a22d5a7442b123fec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/526aba2811f2a0f3f4fd91d026995d2d46b62d43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/526aba2811f2a0f3f4fd91d026995d2d46b62d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/526aba2811f2a0f3f4fd91d026995d2d46b62d43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/526aba2811f2a0f3f4fd91d026995d2d46b62d43/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6ef6bcaf5716524e0b97c9ae07cdb885858cf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6ef6bcaf5716524e0b97c9ae07cdb885858cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f6ef6bcaf5716524e0b97c9ae07cdb885858cf3"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "8bcfe30b010b250505602f54e3bbaf75217bc4a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=526aba2811f2a0f3f4fd91d026995d2d46b62d43", "patch": "@@ -1,5 +1,9 @@\n 2000-10-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n+\t* toplev.c, flags.h, fold-const.c, real.c, rtl.c,\n+\tfixinc/inclhack.def: Change comments mentioning C9X to refer to\n+\tC99 instead.\n+\n \t* invoke.texi: Document that -V will only work for very similar\n \tversions of driver and compiler.\n "}, {"sha": "5688c6e8a6d0880edc68540ba71cc06a6faaabb6", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=526aba2811f2a0f3f4fd91d026995d2d46b62d43", "patch": "@@ -876,7 +876,7 @@ fix = {\n \n /*\n  *  Remove `extern double cabs' declarations from math.h.\n- *  This conflicts with C9x.  Discovered on AIX.\n+ *  This conflicts with C99.  Discovered on AIX.\n  *  SunOS4 has its cabs() declaration followed by a comment which\n  *  terminates on the following line.\n  */"}, {"sha": "bc686e46e1a02d45efcfbbcbc035027a402dca9b", "filename": "gcc/flags.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=526aba2811f2a0f3f4fd91d026995d2d46b62d43", "patch": "@@ -337,7 +337,7 @@ extern int flag_errno_math;\n \n /* 0 means straightforward implementation of complex divide acceptable.\n    1 means wide ranges of inputs must work for complex divide.\n-   2 means C9X-like requirements for complex divide (not yet implemented).  */\n+   2 means C99-like requirements for complex divide (not yet implemented).  */\n \n extern int flag_complex_divide_method;\n "}, {"sha": "c5b29a47242e407e7e14b7276064ababf620a15a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=526aba2811f2a0f3f4fd91d026995d2d46b62d43", "patch": "@@ -1042,7 +1042,7 @@ exact_real_inverse (mode, r)\n   return 1;\n }\n \n-/* Convert C9X hexadecimal floating point string constant S.  Return\n+/* Convert C99 hexadecimal floating point string constant S.  Return\n    real value type in mode MODE.  This function uses the host computer's\n    floating point arithmetic when there is no REAL_ARITHMETIC.  */\n "}, {"sha": "9df904021562c509488bea8627802a2842e66da6", "filename": "gcc/real.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=526aba2811f2a0f3f4fd91d026995d2d46b62d43", "patch": "@@ -5122,7 +5122,7 @@ asctoe (s, y)\n }\n \n /* Convert ASCII string SS to e type Y, with a specified rounding precision\n-   of OPREC bits.  BASE is 16 for C9X hexadecimal floating constants.  */\n+   of OPREC bits.  BASE is 16 for C99 hexadecimal floating constants.  */\n \n static void\n asctoeg (ss, y, oprec)"}, {"sha": "bb986e998b9cf8917d4398d4538f104692c12fd7", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=526aba2811f2a0f3f4fd91d026995d2d46b62d43", "patch": "@@ -1093,7 +1093,7 @@ read_rtx (infile)\n #if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n \ttmp_wide = atol (tmp_char);\n #else\n-\t/* Prefer atoll over atoq, since the former is in the ISO C9X draft.\n+\t/* Prefer atoll over atoq, since the former is in the ISO C99 standard.\n \t   But prefer not to use our hand-rolled function above either.  */\n #if defined(HAVE_ATOLL) || !defined(HAVE_ATOQ)\n \ttmp_wide = atoll (tmp_char);"}, {"sha": "4194b592afb6dfeae9c4e530f5a95fb03a9d0e50", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/526aba2811f2a0f3f4fd91d026995d2d46b62d43/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=526aba2811f2a0f3f4fd91d026995d2d46b62d43", "patch": "@@ -632,7 +632,7 @@ int flag_errno_math = 1;\n \n /* 0 means straightforward implementation of complex divide acceptable.\n    1 means wide ranges of inputs must work for complex divide.\n-   2 means C9X-like requirements for complex divide (not yet implemented).  */\n+   2 means C99-like requirements for complex divide (not yet implemented).  */\n \n int flag_complex_divide_method = 0;\n "}]}