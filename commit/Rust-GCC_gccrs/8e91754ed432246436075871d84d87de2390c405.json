{"sha": "8e91754ed432246436075871d84d87de2390c405", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5MTc1NGVkNDMyMjQ2NDM2MDc1ODcxZDg0ZDg3ZGUyMzkwYzQwNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-17T22:01:23Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-17T22:01:23Z"}, "message": "stmt.c (expand_start_bindings): Allow callers to pass a flag indicating that no NOTE_INSN_BLOCK_BEG note is...\n\n\t* stmt.c (expand_start_bindings): Allow callers to pass a flag\n\tindicating that no NOTE_INSN_BLOCK_BEG note is required.\n\t(expand_start_target_temps): Use it.\n\t* except.c (expand_eh_region_start_for_decl): Likewise.\n\t* expr.c (expand_expr): Likewise.\n\nFrom-SVN: r29484", "tree": {"sha": "9b627a788d95d6fe1744e179f42c17925b07a34f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b627a788d95d6fe1744e179f42c17925b07a34f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e91754ed432246436075871d84d87de2390c405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e91754ed432246436075871d84d87de2390c405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e91754ed432246436075871d84d87de2390c405", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e91754ed432246436075871d84d87de2390c405/comments", "author": null, "committer": null, "parents": [{"sha": "05ca5990713469bc7ca0b473c10d9698d688cf6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ca5990713469bc7ca0b473c10d9698d688cf6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05ca5990713469bc7ca0b473c10d9698d688cf6b"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "f3d7e9fc6e56801877dceb8a4a7ee2ee7c9a6196", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e91754ed432246436075871d84d87de2390c405/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e91754ed432246436075871d84d87de2390c405/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e91754ed432246436075871d84d87de2390c405", "patch": "@@ -1,3 +1,11 @@\n+Fri Sep 17 15:03:16 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* stmt.c (expand_start_bindings): Allow callers to pass a flag\n+\tindicating that no NOTE_INSN_BLOCK_BEG note is required.\n+\t(expand_start_target_temps): Use it.\n+\t* except.c (expand_eh_region_start_for_decl): Likewise.\n+\t* expr.c (expand_expr): Likewise.\n+\n Fri Sep 17 15:05:27 1999  Gavin Romig-Koch  <gavin@cygnus.com>\n \n \t* fold-const.c (operand_equal_p): Pay attention to side effects."}, {"sha": "3ecf7fc712167bee46a11fd21c9d9296b1dea494", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e91754ed432246436075871d84d87de2390c405/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e91754ed432246436075871d84d87de2390c405/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=8e91754ed432246436075871d84d87de2390c405", "patch": "@@ -1418,7 +1418,7 @@ expand_eh_region_start_for_decl (decl)\n   /* We need a new block to record the start and end of the\n      dynamic handler chain.  We also want to prevent jumping into\n      a try block.  */\n-  expand_start_bindings (0);\n+  expand_start_bindings (2);\n \n   /* But we don't need or want a new temporary level.  */\n   pop_temp_slots ();"}, {"sha": "880e347a68e46d31dd6fdb53be1cdb280b51bfe6", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e91754ed432246436075871d84d87de2390c405/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e91754ed432246436075871d84d87de2390c405/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8e91754ed432246436075871d84d87de2390c405", "patch": "@@ -6104,7 +6104,7 @@ expand_expr (exp, target, tmode, modifier)\n \n \t/* Need to open a binding contour here because\n \t   if there are any cleanups they must be contained here.  */\n-\texpand_start_bindings (0);\n+\texpand_start_bindings (2);\n \n \t/* Mark the corresponding BLOCK for output in its proper place.  */\n \tif (TREE_OPERAND (exp, 2) != 0\n@@ -6793,7 +6793,7 @@ expand_expr (exp, target, tmode, modifier)\n       {\n \t/* Start a new binding layer that will keep track of all cleanup\n \t   actions to be performed.  */\n-\texpand_start_bindings (0);\n+\texpand_start_bindings (2);\n \n \ttarget_temp_slot_level = temp_slot_level;\n \n@@ -8185,7 +8185,7 @@ expand_expr (exp, target, tmode, modifier)\n \n \t/* Start a new binding layer that will keep track of all cleanup\n \t   actions to be performed.  */\n-\texpand_start_bindings (0);\n+\texpand_start_bindings (2);\n \n \ttarget_temp_slot_level = temp_slot_level;\n "}, {"sha": "1a16adc46fc810003d233a7f28c1a01a7cc5869e", "filename": "gcc/stmt.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e91754ed432246436075871d84d87de2390c405/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e91754ed432246436075871d84d87de2390c405/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=8e91754ed432246436075871d84d87de2390c405", "patch": "@@ -3168,15 +3168,30 @@ tail_recursion_args (actuals, formals)\n /* Generate the RTL code for entering a binding contour.\n    The variables are declared one by one, by calls to `expand_decl'.\n \n-   EXIT_FLAG is nonzero if this construct should be visible to\n-   `exit_something'.  */\n+   FLAGS is a bitwise or of the following flags:\n+\n+     1 - Nonzero if this construct should be visible to\n+         `exit_something'.\n+\n+     2 - Nonzero if this contour does not require a\n+\t NOTE_INSN_BLOCK_BEG note.  Virtually all calls from\n+\t language-independent code should set this flag because they\n+\t will not create corresponding BLOCK nodes.  (There should be\n+\t a one-to-one correspondence between NOTE_INSN_BLOCK_BEG notes\n+\t and BLOCKs.)  If this flag is set, MARK_ENDS should be zero\n+\t when expand_end_bindings is called.  */\n \n void\n-expand_start_bindings (exit_flag)\n-     int exit_flag;\n+expand_start_bindings (flags)\n+     int flags;\n {\n   struct nesting *thisblock = ALLOC_NESTING ();\n-  rtx note = emit_note (NULL_PTR, NOTE_INSN_BLOCK_BEG);\n+  rtx note;\n+  int exit_flag = ((flags & 1) != 0);\n+  int block_flag = ((flags & 2) == 0);\n+\n+  note = emit_note (NULL_PTR, \n+\t\t    block_flag ? NOTE_INSN_BLOCK_BEG : NOTE_INSN_DELETED);\n \n   /* Make an entry on block_stack for the block we are entering.  */\n \n@@ -3228,7 +3243,7 @@ expand_start_target_temps ()\n \n   /* Start a new binding layer that will keep track of all cleanup\n      actions to be performed.  */\n-  expand_start_bindings (0);\n+  expand_start_bindings (2);\n \n   target_temp_slot_level = temp_slot_level;\n }"}]}