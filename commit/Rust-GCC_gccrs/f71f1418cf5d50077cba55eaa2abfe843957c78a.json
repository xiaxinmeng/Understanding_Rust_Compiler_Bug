{"sha": "f71f1418cf5d50077cba55eaa2abfe843957c78a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcxZjE0MThjZjVkNTAwNzdjYmE1NWVhYTJhYmZlODQzOTU3Yzc4YQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-02-23T15:35:27Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-02-23T15:35:27Z"}, "message": "avr.md (code_stdname): Add ior, xor.\n\n\t* config/avr/avr.md (code_stdname): Add ior, xor.\n\t(xior): New code iterator.\n\t(*<code_stdname><mode>qi.byte0): Use xior instead of ior.\n\t(*<code_stdname><mode>qi.byte1-3): Ditto.\n\nFrom-SVN: r184509", "tree": {"sha": "2974c5dda57380338cdc65c273f09926e34a8859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2974c5dda57380338cdc65c273f09926e34a8859"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f71f1418cf5d50077cba55eaa2abfe843957c78a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71f1418cf5d50077cba55eaa2abfe843957c78a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f71f1418cf5d50077cba55eaa2abfe843957c78a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71f1418cf5d50077cba55eaa2abfe843957c78a/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a348dc7ff9f28f7ac5ba4688b0c532b6710acb9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a348dc7ff9f28f7ac5ba4688b0c532b6710acb9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a348dc7ff9f28f7ac5ba4688b0c532b6710acb9b"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "a144fcd3ad7b3cf8f95e5c67fa96ad707d9f1f39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71f1418cf5d50077cba55eaa2abfe843957c78a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71f1418cf5d50077cba55eaa2abfe843957c78a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f71f1418cf5d50077cba55eaa2abfe843957c78a", "patch": "@@ -1,3 +1,10 @@\n+2012-02-23  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.md (code_stdname): Add ior, xor.\n+\t(xior): New code iterator.\n+\t(*<code_stdname><mode>qi.byte0): Use xior instead of ior.\n+\t(*<code_stdname><mode>qi.byte1-3): Ditto.\n+\n 2012-02-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/52019"}, {"sha": "c42f67ac7d3ca5a34291883c4b1f4355e8237421", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71f1418cf5d50077cba55eaa2abfe843957c78a/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71f1418cf5d50077cba55eaa2abfe843957c78a/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=f71f1418cf5d50077cba55eaa2abfe843957c78a", "patch": "@@ -231,6 +231,8 @@\n (define_code_iterator any_extend  [sign_extend zero_extend])\n (define_code_iterator any_extend2 [sign_extend zero_extend])\n \n+(define_code_iterator xior [xor ior])\n+\n ;; Define code attributes\n (define_code_attr extend_su\n   [(sign_extend \"s\")\n@@ -254,6 +256,8 @@\n   [(ashift   \"ashl\")\n    (ashiftrt \"ashr\")\n    (lshiftrt \"lshr\")\n+   (ior      \"ior\")\n+   (xor      \"xor\")\n    (rotate   \"rotl\")])\n \n ;;========================================================================\n@@ -5960,33 +5964,37 @@\n ;; in particular when subreg lowering (-fsplit-wide-types) is turned on.\n ;; That switch obfuscates things here and in many other places.\n \n-(define_insn_and_split \"*ior<mode>qi.byte0\"\n+;; \"*iorhiqi.byte0\"   \"*iorpsiqi.byte0\"   \"*iorsiqi.byte0\"\n+;; \"*xorhiqi.byte0\"   \"*xorpsiqi.byte0\"   \"*xorsiqi.byte0\"\n+(define_insn_and_split \"*<code_stdname><mode>qi.byte0\"\n   [(set (match_operand:HISI 0 \"register_operand\"                 \"=r\")\n-        (ior:HISI\n+        (xior:HISI\n          (zero_extend:HISI (match_operand:QI 1 \"register_operand\" \"r\"))\n          (match_operand:HISI 2 \"register_operand\"                 \"0\")))]\n   \"\"\n   \"#\"\n   \"reload_completed\"\n   [(set (match_dup 3)\n-        (ior:QI (match_dup 3)\n-                (match_dup 1)))]\n+        (xior:QI (match_dup 3)\n+                 (match_dup 1)))]\n   {\n     operands[3] = simplify_gen_subreg (QImode, operands[0], <MODE>mode, 0);\n   })\n \n-(define_insn_and_split \"*ior<mode>qi.byte1-3\"\n+;; \"*iorhiqi.byte1-3\"  \"*iorpsiqi.byte1-3\"  \"*iorsiqi.byte1-3\"\n+;; \"*xorhiqi.byte1-3\"  \"*xorpsiqi.byte1-3\"  \"*xorsiqi.byte1-3\"\n+(define_insn_and_split \"*<code_stdname><mode>qi.byte1-3\"\n   [(set (match_operand:HISI 0 \"register_operand\"                              \"=r\")\n-        (ior:HISI\n+        (xior:HISI\n          (ashift:HISI (zero_extend:HISI (match_operand:QI 1 \"register_operand\" \"r\"))\n                       (match_operand:QI 2 \"const_8_16_24_operand\"              \"n\"))\n          (match_operand:HISI 3 \"register_operand\"                              \"0\")))]\n   \"INTVAL(operands[2]) < GET_MODE_BITSIZE (<MODE>mode)\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 4)\n-        (ior:QI (match_dup 4)\n-                (match_dup 1)))]\n+        (xior:QI (match_dup 4)\n+                 (match_dup 1)))]\n   {\n     int byteno = INTVAL(operands[2]) / BITS_PER_UNIT;\n     operands[4] = simplify_gen_subreg (QImode, operands[0], <MODE>mode, byteno);"}]}