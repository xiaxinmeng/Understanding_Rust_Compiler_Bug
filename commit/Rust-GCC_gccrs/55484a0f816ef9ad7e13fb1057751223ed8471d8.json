{"sha": "55484a0f816ef9ad7e13fb1057751223ed8471d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU0ODRhMGY4MTZlZjlhZDdlMTNmYjEwNTc3NTEyMjNlZDg0NzFkOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-13T15:33:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-13T15:33:28Z"}, "message": "libstdc++: Deprecate the --enable-cheaders=c_std configuration\n\nThese headers do not offer any tangible benefit compared to the default\nc_global version. They are not actively maintained meaning that they\nhave bugs which have already been fixed for the c_global headers.\n\nThis change adds a warning if they are used, and requires a new\n--enable-cheaders-obsolete option to allow their use. Unless we receive\nreports from users who rely on the c_std headers they should be removed\nat some point in future.\n\nlibstdc++-v3/ChangeLog:\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_CHEADERS): Warn if the c_std\n\toption is used and fail unless --enable-cheaders-obsolete is\n\talso used.\n\t* configure: Regenerate.", "tree": {"sha": "d76f7a657472cb08359ac7a0a2251744c255241e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d76f7a657472cb08359ac7a0a2251744c255241e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55484a0f816ef9ad7e13fb1057751223ed8471d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55484a0f816ef9ad7e13fb1057751223ed8471d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55484a0f816ef9ad7e13fb1057751223ed8471d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55484a0f816ef9ad7e13fb1057751223ed8471d8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e00464a5cb4214f5a5de4535de4f684a86aa10d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00464a5cb4214f5a5de4535de4f684a86aa10d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00464a5cb4214f5a5de4535de4f684a86aa10d5"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "133125ec4faa400bd1fab44315ee593be9c52628", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55484a0f816ef9ad7e13fb1057751223ed8471d8/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55484a0f816ef9ad7e13fb1057751223ed8471d8/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=55484a0f816ef9ad7e13fb1057751223ed8471d8", "patch": "@@ -2377,12 +2377,24 @@ dnl\n dnl --enable-cheaders= [does stuff].\n dnl --disable-cheaders [does not do anything, really].\n dnl  +  Usage:  GLIBCXX_ENABLE_CHEADERS[(DEFAULT)]\n-dnl       Where DEFAULT is either 'c' or 'c_std' or 'c_global'.\n+dnl       Where DEFAULT is either 'c' or 'c_global' or 'c_std'.\n+dnl\n+dnl To use the obsolete 'c_std' headers use --enable-cheaders-obsolete as\n+dnl well as --enable-cheaders=c_std, otherwise configure will fail.\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_CHEADERS], [\n+  GLIBCXX_ENABLE(cheaders-obsolete,no,,\n+    [allow use of obsolete \"C\" headers for g++])\n   GLIBCXX_ENABLE(cheaders,$1,[[[=KIND]]],\n-    [construct \"C\" headers for g++], [permit c|c_std|c_global])\n+    [construct \"C\" headers for g++], [permit c|c_global|c_std])\n   AC_MSG_NOTICE(\"C\" header strategy set to $enable_cheaders)\n+  if test $enable_cheaders = c_std ; then\n+    AC_MSG_WARN([the --enable-cheaders=c_std configuration is obsolete, c_global should be used instead])\n+    AC_MSG_WARN([if you are unable to use c_global please report a bug or inform libstdc++@gcc.gnu.org])\n+    if test $enable_cheaders_obsolete != yes ; then\n+      AC_MSG_ERROR(use --enable-cheaders-obsolete to use c_std \"C\" headers)\n+    fi\n+  fi\n \n   C_INCLUDE_DIR='${glibcxx_srcdir}/include/'$enable_cheaders\n "}, {"sha": "7abf1b1ccc1d8f5e32dae939866eab7560c16280", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55484a0f816ef9ad7e13fb1057751223ed8471d8/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55484a0f816ef9ad7e13fb1057751223ed8471d8/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=55484a0f816ef9ad7e13fb1057751223ed8471d8", "patch": "@@ -915,6 +915,7 @@ enable_cstdio\n enable_clocale\n enable_nls\n enable_libstdcxx_allocator\n+enable_cheaders_obsolete\n enable_cheaders\n enable_long_long\n enable_wchar_t\n@@ -1606,6 +1607,9 @@ Optional Features:\n   --enable-libstdcxx-allocator[=KIND]\n                           use KIND for target std::allocator base\n                           [default=auto]\n+  --enable-cheaders-obsolete\n+                          allow use of obsolete \"C\" headers for g++\n+                          [default=no]\n   --enable-cheaders[=KIND]\n                           construct \"C\" headers for g++ [default=$c_model]\n   --enable-long-long      enable template specializations for 'long long'\n@@ -12060,7 +12064,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12063 \"configure\"\n+#line 12067 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12166,7 +12170,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12169 \"configure\"\n+#line 12173 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15858,7 +15862,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15861 \"configure\"\n+#line 15865 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15893,7 +15897,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15896 \"configure\"\n+#line 15900 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15928,7 +15932,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15931 \"configure\"\n+#line 15935 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15964,7 +15968,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15967 \"configure\"\n+#line 15971 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -16117,7 +16121,7 @@ $as_echo \"mutex\" >&6; }\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16120 \"configure\"\n+#line 16124 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -16159,7 +16163,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16162 \"configure\"\n+#line 16166 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -16193,7 +16197,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16196 \"configure\"\n+#line 16200 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -16822,11 +16826,24 @@ $as_echo \"$enable_libstdcxx_allocator_flag\" >&6; }\n \n \n \n+   # Check whether --enable-cheaders-obsolete was given.\n+if test \"${enable_cheaders_obsolete+set}\" = set; then :\n+  enableval=$enable_cheaders_obsolete;\n+      case \"$enableval\" in\n+       yes|no) ;;\n+       *) as_fn_error $? \"Argument to enable/disable cheaders-obsolete must be yes or no\" \"$LINENO\" 5 ;;\n+      esac\n+\n+else\n+  enable_cheaders_obsolete=no\n+fi\n+\n+\n    # Check whether --enable-cheaders was given.\n if test \"${enable_cheaders+set}\" = set; then :\n   enableval=$enable_cheaders;\n       case \"$enableval\" in\n-       c|c_std|c_global) ;;\n+       c|c_global|c_std) ;;\n        *) as_fn_error $? \"Unknown argument to enable/disable cheaders\" \"$LINENO\" 5 ;;\n \t  \t        esac\n \n@@ -16837,6 +16854,15 @@ fi\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: \\\"C\\\" header strategy set to $enable_cheaders\" >&5\n $as_echo \"$as_me: \\\"C\\\" header strategy set to $enable_cheaders\" >&6;}\n+  if test $enable_cheaders = c_std ; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: the --enable-cheaders=c_std configuration is obsolete, c_global should be used instead\" >&5\n+$as_echo \"$as_me: WARNING: the --enable-cheaders=c_std configuration is obsolete, c_global should be used instead\" >&2;}\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: if you are unable to use c_global please report a bug or inform libstdc++@gcc.gnu.org\" >&5\n+$as_echo \"$as_me: WARNING: if you are unable to use c_global please report a bug or inform libstdc++@gcc.gnu.org\" >&2;}\n+    if test $enable_cheaders_obsolete != yes ; then\n+      as_fn_error $? \"use --enable-cheaders-obsolete to use c_std \\\"C\\\" headers\" \"$LINENO\" 5\n+    fi\n+  fi\n \n   C_INCLUDE_DIR='${glibcxx_srcdir}/include/'$enable_cheaders\n "}]}