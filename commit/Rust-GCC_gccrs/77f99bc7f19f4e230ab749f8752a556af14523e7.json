{"sha": "77f99bc7f19f4e230ab749f8752a556af14523e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdmOTliYzdmMTlmNGUyMzBhYjc0OWY4NzUyYTU1NmFmMTQ1MjNlNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-21T20:48:54Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-21T20:48:54Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1225", "tree": {"sha": "b6b6995ec5e189021b85166cc20fa6d4ddf32f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6b6995ec5e189021b85166cc20fa6d4ddf32f79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77f99bc7f19f4e230ab749f8752a556af14523e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f99bc7f19f4e230ab749f8752a556af14523e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f99bc7f19f4e230ab749f8752a556af14523e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f99bc7f19f4e230ab749f8752a556af14523e7/comments", "author": null, "committer": null, "parents": [{"sha": "9ac73056d88ae4d548a0e6879833a907a4862f59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac73056d88ae4d548a0e6879833a907a4862f59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac73056d88ae4d548a0e6879833a907a4862f59"}], "stats": {"total": 84, "additions": 53, "deletions": 31}, "files": [{"sha": "796040d4039dca7b83aba562c7a93bd9ae5b9d58", "filename": "gcc/protoize.c", "status": "modified", "additions": 53, "deletions": 31, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77f99bc7f19f4e230ab749f8752a556af14523e7/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77f99bc7f19f4e230ab749f8752a556af14523e7/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=77f99bc7f19f4e230ab749f8752a556af14523e7", "patch": "@@ -2083,6 +2083,7 @@ process_aux_info_file (base_source_filename, keep_it, is_syscalls)\n   const char *aux_info_second_line;\n   time_t aux_info_mtime;\n   size_t aux_info_size;\n+  int must_create;\n \n   /* Construct the aux_info filename from the base source filename.  */\n \n@@ -2094,38 +2095,59 @@ process_aux_info_file (base_source_filename, keep_it, is_syscalls)\n \n start_over: ;\n \n-  {\n-    int retries = 0;\n+  /* If file doesn't exist, set must_create.\n+     Likewise if it exists and we can read it but it is obsolete.\n+     Otherwise, report an error.  */\n+  must_create = 0;\n+  if (my_access (aux_info_filename, R_OK) == -1)\n+    {\n+      if (errno == ENOENT)\n+\t{\n+\t  if (is_syscalls)\n+\t    {\n+\t      fprintf (stderr, \"%s: warning: missing SYSCALLS file `%s'\\n\",\n+\t\t       pname, aux_info_filename);\n+\t      return;\n+\t    }\n+\t  must_create = 1;\n+\t}\n+      else\n+\t{\n+\t  fprintf (stderr, \"%s: error: can't read aux info file `%s': %s\\n\",\n+\t\t   pname, shortpath (NULL, aux_info_filename),\n+\t\t   sys_errlist[errno]);\n+\t  errors++;\n+\t  return;\n+\t}\n+    }\n+#if 0 /* There is code farther down to take care of this.  */\n+  else\n+    {\n+      struct stat s1, s2;\n+      stat (aux_info_file_name, &s1);\n+      stat (base_source_file_name, &s2);\n+      if (s2.st_mtime > s1.st_mtime)\n+\tmust_create = 1;\n+    }\n+#endif /* 0 */\n \n-retry:\n-    if (my_access (aux_info_filename, R_OK) == -1)\n-      {\n-        if (errno == ENOENT && retries == 0)\n-          {\n-            if (is_syscalls)\n-              {\n-                fprintf (stderr, \"%s: warning: missing SYSCALLS file `%s'\\n\",\n-\t\t\t pname, aux_info_filename);\n-                return;\n-              }\n-            if (!gen_aux_info_file (base_source_filename))\n-\t      {\n-\t\terrors++;\n-\t\treturn;\n-\t      }\n-            retries++;\n-            goto retry;\n-          }\n-        else\n-          {\n-            fprintf (stderr, \"%s: error: can't read aux info file `%s': %s\\n\",\n-\t\t     pname, shortpath (NULL, aux_info_filename),\n-\t\t     sys_errlist[errno]);\n-            errors++;\n-            return;\n-          }\n-      }\n-  }\n+  /* If we need a .X file, create it, and verify we can read it.  */\n+  if (must_create)\n+    {\n+      if (!gen_aux_info_file (base_source_filename))\n+\t{\n+\t  errors++;\n+\t  return;\n+\t}\n+      if (my_access (aux_info_filename, R_OK) == -1)\n+\t{\n+\t  fprintf (stderr, \"%s: error: can't read aux info file `%s': %s\\n\",\n+\t\t   pname, shortpath (NULL, aux_info_filename),\n+\t\t   sys_errlist[errno]);\n+\t  errors++;\n+\t  return;\n+\t}\n+    }\n \n   {\n     struct stat stat_buf;"}]}