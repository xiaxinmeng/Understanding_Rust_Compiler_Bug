{"sha": "88e5899c42f407b4a004f07547b66faedb337e5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhlNTg5OWM0MmY0MDdiNGEwMDRmMDc1NDdiNjZmYWVkYjMzN2U1ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-06-26T17:03:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-06-26T17:03:44Z"}, "message": "cp-tree.h (xref_tag): Change prototype.\n\n\t* cp-tree.h (xref_tag): Change prototype.\n\t(handle_class_head): Likewise.\n\t(build_x_component_ref): Likewise.\n\t* decl.c (cxx_init_decl_processing): Adjust call to xref_tag.\n\t(xref_tag): Take attributes as a separate parameter.\n\t(xref_tag_from_type): Adjust call to xref_tag.\n\t* decl2.c (build_expr_from_tree): Adjust call to\n\tbuild_x_component_ref.\n\t(handle_class_head): Take attributes as a separate parameter.\n\t* parse.y (parse_xref_tag): New function.\n\t(parse_handle_class_head): Likewise.\n\t(primary): Use parse_xref_tag.\n\t(class_head_decl): Use parse_handle_class_head.\n\t(class_head_defn): Likewise.\n\t* rtti.c (init_rtti_processing): Adjust call to xref_tag.\n\t(build_dynamic_cast_1): Likewise.\n\t(create_pseudo_type_info): Likewise.\n\t(emit_support_tinfos): Likewise.\n\t* typeck.c (build_object_ref): Adjust call to\n\tbuild_x_component_ref.\n\t(build_x_component_ref): Remove protect parameter.\n\nFrom-SVN: r55013", "tree": {"sha": "6c2da327814262da8d36bf59a30e8df049d74c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c2da327814262da8d36bf59a30e8df049d74c85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88e5899c42f407b4a004f07547b66faedb337e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e5899c42f407b4a004f07547b66faedb337e5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e5899c42f407b4a004f07547b66faedb337e5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e5899c42f407b4a004f07547b66faedb337e5d/comments", "author": null, "committer": null, "parents": [{"sha": "dd6773cd70d74d69706f5ac96df5c76151789925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd6773cd70d74d69706f5ac96df5c76151789925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd6773cd70d74d69706f5ac96df5c76151789925"}], "stats": {"total": 195, "additions": 130, "deletions": 65}, "files": [{"sha": "5f2a0b35c753fd297dac779e48fdb0d6c0b33662", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=88e5899c42f407b4a004f07547b66faedb337e5d", "patch": "@@ -1,3 +1,27 @@\n+2002-06-26  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (xref_tag): Change prototype.\n+\t(handle_class_head): Likewise.\n+\t(build_x_component_ref): Likewise.\n+\t* decl.c (cxx_init_decl_processing): Adjust call to xref_tag.\n+\t(xref_tag): Take attributes as a separate parameter.\n+\t(xref_tag_from_type): Adjust call to xref_tag.\n+\t* decl2.c (build_expr_from_tree): Adjust call to\n+\tbuild_x_component_ref.\n+\t(handle_class_head): Take attributes as a separate parameter.\n+\t* parse.y (parse_xref_tag): New function.\n+\t(parse_handle_class_head): Likewise.\n+\t(primary): Use parse_xref_tag.\n+\t(class_head_decl): Use parse_handle_class_head.\n+\t(class_head_defn): Likewise.\n+\t* rtti.c (init_rtti_processing): Adjust call to xref_tag.\n+\t(build_dynamic_cast_1): Likewise.\n+\t(create_pseudo_type_info): Likewise.\n+\t(emit_support_tinfos): Likewise.\n+\t* typeck.c (build_object_ref): Adjust call to\n+\tbuild_x_component_ref.\n+\t(build_x_component_ref): Remove protect parameter.\n+\t\n 2002-06-25  Mark Mitchell  <mark@codesourcery.com>\n \n \t* call.c (build_op_delete_call): Use BASELINK_FUNCTIONS."}, {"sha": "2c19c09a8859b83b914d5f77c569ee7ea1425936", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=88e5899c42f407b4a004f07547b66faedb337e5d", "patch": "@@ -3856,7 +3856,7 @@ extern int copy_fn_p\t\t\t\tPARAMS ((tree));\n extern void grok_special_member_properties\tPARAMS ((tree));\n extern int grok_ctor_properties\t\t\tPARAMS ((tree, tree));\n extern void grok_op_properties\t\t\tPARAMS ((tree, int));\n-extern tree xref_tag\t\t\t\tPARAMS ((tree, tree, int));\n+extern tree xref_tag\t\t\t\t(enum tag_types, tree, tree, bool);\n extern tree xref_tag_from_type\t\t\tPARAMS ((tree, tree, int));\n extern void xref_basetypes\t\t\tPARAMS ((tree, tree));\n extern tree start_enum\t\t\t\tPARAMS ((tree));\n@@ -3955,7 +3955,7 @@ extern tree do_class_using_decl\t\t\tPARAMS ((tree));\n extern void do_using_directive\t\t\tPARAMS ((tree));\n extern void check_default_args\t\t\tPARAMS ((tree));\n extern void mark_used\t\t\t\tPARAMS ((tree));\n-extern tree handle_class_head\t\t\tPARAMS ((tree, tree, tree, int, int *));\n+extern tree handle_class_head\t\t\t(enum tag_types, tree, tree, tree, int, int *);\n extern tree lookup_arg_dependent                PARAMS ((tree, tree, tree));\n extern void finish_static_data_member_decl      PARAMS ((tree, tree, tree, int));\n extern tree build_artificial_parm               PARAMS ((tree, tree));\n@@ -4437,7 +4437,7 @@ extern tree decay_conversion\t\t\tPARAMS ((tree));\n extern tree build_object_ref\t\t\tPARAMS ((tree, tree, tree));\n extern tree build_component_ref_1\t\tPARAMS ((tree, tree, int));\n extern tree build_component_ref\t\t\tPARAMS ((tree, tree, tree, int));\n-extern tree build_x_component_ref\t\tPARAMS ((tree, tree, tree, int));\n+extern tree build_x_component_ref\t\tPARAMS ((tree, tree, tree));\n extern tree build_x_indirect_ref\t\tPARAMS ((tree, const char *));\n extern tree build_indirect_ref\t\t\tPARAMS ((tree, const char *));\n extern tree build_array_ref\t\t\tPARAMS ((tree, tree));"}, {"sha": "e2263fc67073075e5d9ff83b907b4d4351a96929", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=88e5899c42f407b4a004f07547b66faedb337e5d", "patch": "@@ -6587,8 +6587,9 @@ cxx_init_decl_processing ()\n     tree ptr_ftype_sizetype;\n \n     push_namespace (std_identifier);\n-    bad_alloc_type_node = xref_tag\n-      (class_type_node, get_identifier (\"bad_alloc\"), 1);\n+    bad_alloc_type_node \n+      = xref_tag (class_type, get_identifier (\"bad_alloc\"), \n+\t\t  /*attributes=*/NULL_TREE, 1);\n     pop_namespace ();\n     ptr_ftype_sizetype \n       = build_function_type (ptr_type_node,\n@@ -12729,29 +12730,14 @@ tag_name (code)\n    scope.)  */\n \n tree\n-xref_tag (code_type_node, name, globalize)\n-     tree code_type_node;\n-     tree name;\n-     int globalize;\n+xref_tag (enum tag_types tag_code, tree name, tree attributes, \n+\t  bool globalize)\n {\n-  enum tag_types tag_code;\n   enum tree_code code;\n   register tree ref, t;\n   struct cp_binding_level *b = current_binding_level;\n-  tree attributes = NULL_TREE;\n   tree context = NULL_TREE;\n \n-  /* If we are called from the parser, code_type_node will sometimes be a\n-     TREE_LIST.  This indicates that the user wrote\n-     \"class __attribute__ ((foo)) bar\".  Extract the attributes so we can\n-     use them later.  */\n-  if (TREE_CODE (code_type_node) == TREE_LIST)\n-    {\n-      attributes = TREE_PURPOSE (code_type_node);\n-      code_type_node = TREE_VALUE (code_type_node);\n-    }\n-\n-  tag_code = (enum tag_types) tree_low_cst (code_type_node, 1);\n   switch (tag_code)\n     {\n     case record_type:\n@@ -12962,18 +12948,17 @@ xref_tag_from_type (old, id, globalize)\n      tree old, id;\n      int globalize;\n {\n-  tree code_type_node;\n+  enum tag_types tag_kind;\n \n   if (TREE_CODE (old) == RECORD_TYPE)\n-    code_type_node = (CLASSTYPE_DECLARED_CLASS (old)\n-\t\t      ? class_type_node : record_type_node);\n+    tag_kind = (CLASSTYPE_DECLARED_CLASS (old) ? class_type : record_type);\n   else\n-    code_type_node = union_type_node;\n+    tag_kind  = union_type;\n \n   if (id == NULL_TREE)\n     id = TYPE_IDENTIFIER (old);\n \n-  return xref_tag (code_type_node, id, globalize);\n+  return xref_tag (tag_kind, id, /*attributes=*/NULL_TREE, globalize);\n }\n \n /* REF is a type (named NAME), for which we have just seen some"}, {"sha": "eb1dd00a004834b7628fe0546472339a92ea519b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=88e5899c42f407b4a004f07547b66faedb337e5d", "patch": "@@ -3919,8 +3919,7 @@ build_expr_from_tree (t)\n \t\t\t\t   TREE_OPERAND (field, 0),\n \t\t\t\t   TREE_OPERAND (field, 1));\n \telse\n-\t  return build_x_component_ref (object, field,\n-\t\t\t\t\tNULL_TREE, 1);\n+\t  return build_x_component_ref (object, field, NULL_TREE);\n       }\n \n     case THROW_EXPR:\n@@ -5194,8 +5193,9 @@ mark_used (decl)\n    Return a TYPE_DECL for the type declared by ID in SCOPE.  */\n \n tree\n-handle_class_head (aggr, scope, id, defn_p, new_type_p)\n-     tree aggr, scope, id;\n+handle_class_head (tag_kind, scope, id, attributes, defn_p, new_type_p)\n+     enum tag_types tag_kind;\n+     tree scope, id, attributes;\n      int defn_p;\n      int *new_type_p;\n {\n@@ -5244,7 +5244,7 @@ handle_class_head (aggr, scope, id, defn_p, new_type_p)\n   \n   if (!decl)\n     {\n-      decl = TYPE_MAIN_DECL (xref_tag (aggr, id, !defn_p));\n+      decl = TYPE_MAIN_DECL (xref_tag (tag_kind, id, attributes, !defn_p));\n       xrefd_p = true;\n     }\n \n@@ -5271,7 +5271,7 @@ handle_class_head (aggr, scope, id, defn_p, new_type_p)\n \t/* It is legal to define a class with a different class key,\n \t   and this changes the default member access.  */\n \tCLASSTYPE_DECLARED_CLASS (TREE_TYPE (decl))\n-\t  = aggr == class_type_node;\n+\t  = (tag_kind == class_type);\n \t\n       if (!xrefd_p && PROCESSING_REAL_TEMPLATE_DECL_P ())\n \tdecl = push_template_decl (decl);"}, {"sha": "eb76810eb0028659f8bc0419f3541fa305d4a934", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 73, "deletions": 22, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=88e5899c42f407b4a004f07547b66faedb337e5d", "patch": "@@ -90,7 +90,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   malloced_yyss = newss;\t\t\t\t\t\t\\\n   malloced_yyvs = (void *) newvs;\t\t\t\t\t\\\n } while (0)\n-\n #define OP0(NODE) (TREE_OPERAND (NODE, 0))\n #define OP1(NODE) (TREE_OPERAND (NODE, 1))\n \n@@ -131,6 +130,8 @@ static tree parse_method PARAMS ((tree, tree, tree));\n static void frob_specs PARAMS ((tree, tree));\n static void check_class_key PARAMS ((tree, tree));\n static tree parse_scoped_id PARAMS ((tree));\n+static tree parse_xref_tag (tree, tree, int);\n+static tree parse_handle_class_head (tree, tree, tree, int, int *);\n \n /* Cons up an empty parameter list.  */\n static inline tree\n@@ -1718,14 +1719,14 @@ primary:\n \t\t{ $$ = finish_qualified_call_expr ($1, NULL_TREE); }\n         | object object_template_id %prec UNARY\n                 {\n-\t\t  $$ = build_x_component_ref ($$, $2, NULL_TREE, 1);\n+\t\t  $$ = build_x_component_ref ($$, $2, NULL_TREE);\n \t\t}\n         | object object_template_id '(' nonnull_exprlist ')'\n                 { $$ = finish_object_call_expr ($2, $1, $4); }\n \t| object object_template_id LEFT_RIGHT\n                 { $$ = finish_object_call_expr ($2, $1, NULL_TREE); }\n \t| object unqualified_id  %prec UNARY\n-\t\t{ $$ = build_x_component_ref ($$, $2, NULL_TREE, 1); }\n+\t\t{ $$ = build_x_component_ref ($$, $2, NULL_TREE); }\n \t| object overqualified_id  %prec UNARY\n \t\t{ if (processing_template_decl)\n \t\t    $$ = build_min_nt (COMPONENT_REF, $1, $2);\n@@ -2308,10 +2309,10 @@ structsp:\n \t\t  current_enum_type = $<ttype>3;\n \t\t  check_for_missing_semicolon ($$.t); }\n \t| ENUM identifier\n-\t\t{ $$.t = xref_tag (enum_type_node, $2, 1);\n+\t\t{ $$.t = parse_xref_tag (enum_type_node, $2, 1);\n \t\t  $$.new_type_flag = 0; }\n \t| ENUM complex_type_name\n-\t\t{ $$.t = xref_tag (enum_type_node, $2, 1);\n+\t\t{ $$.t = parse_xref_tag (enum_type_node, $2, 1);\n \t\t  $$.new_type_flag = 0; }\n \t| TYPENAME_KEYWORD typename_sub\n \t\t{ $$.t = $2;\n@@ -2442,14 +2443,15 @@ class_head_apparent_template:\n class_head_decl:\n \t  class_head %prec EMPTY\n \t\t{\n-\t\t  $$.t = handle_class_head (current_aggr,\n-\t\t\t\t\t    TREE_PURPOSE ($1), TREE_VALUE ($1),\n-\t\t\t\t\t    0, &$$.new_type_flag);\n+\t\t  $$.t = parse_handle_class_head (current_aggr,\n+\t\t\t\t\t\t  TREE_PURPOSE ($1), \n+\t\t\t\t\t\t  TREE_VALUE ($1),\n+\t\t\t\t\t\t  0, &$$.new_type_flag);\n \t\t}\n \t| aggr identifier_defn %prec EMPTY\n \t\t{\n \t\t  current_aggr = $1;\n-\t\t  $$.t = TYPE_MAIN_DECL (xref_tag (current_aggr, $2, 0));\n+\t\t  $$.t = TYPE_MAIN_DECL (parse_xref_tag (current_aggr, $2, 0));\n \t\t  $$.new_type_flag = 1;\n \t\t}\n \t| class_head_apparent_template %prec EMPTY\n@@ -2463,16 +2465,19 @@ class_head_defn:\n \t  class_head '{'\n \t\t{\n \t\t  yyungetc ('{', 1);\n-\t\t  $$.t = handle_class_head (current_aggr,\n-\t\t\t\t\t    TREE_PURPOSE ($1), TREE_VALUE ($1),\n-\t\t\t\t\t    1, &$$.new_type_flag);\n+\t\t  $$.t = parse_handle_class_head (current_aggr,\n+\t\t\t\t\t\t  TREE_PURPOSE ($1), \n+\t\t\t\t\t\t  TREE_VALUE ($1),\n+\t\t\t\t\t\t  1, \n+\t\t\t\t\t\t  &$$.new_type_flag);\n \t\t}\n \t| class_head ':'\n \t\t{\n \t\t  yyungetc (':', 1);\n-\t\t  $$.t = handle_class_head (current_aggr,\n-\t\t\t\t\t    TREE_PURPOSE ($1), TREE_VALUE ($1),\n-\t\t\t\t\t    1, &$$.new_type_flag);\n+\t\t  $$.t = parse_handle_class_head (current_aggr,\n+\t\t\t\t\t\t  TREE_PURPOSE ($1), \n+\t\t\t\t\t\t  TREE_VALUE ($1),\n+\t\t\t\t\t\t  1, &$$.new_type_flag);\n \t\t}\n \t| class_head_apparent_template '{'\n \t\t{\n@@ -2500,22 +2505,24 @@ class_head_defn:\n \t\t{\n \t\t  yyungetc ('{', 1);\n \t\t  current_aggr = $1;\n-\t\t  $$.t = handle_class_head (current_aggr,\n-\t\t\t\t\t    NULL_TREE, $2,\n-\t\t\t\t\t    1, &$$.new_type_flag);\n+\t\t  $$.t = parse_handle_class_head (current_aggr,\n+\t\t\t\t\t\t  NULL_TREE, $2,\n+\t\t\t\t\t\t  1, &$$.new_type_flag);\n \t\t}\n \t| aggr identifier_defn ':'\n \t\t{\n \t\t  yyungetc (':', 1);\n \t\t  current_aggr = $1;\n-\t\t  $$.t = handle_class_head (current_aggr,\n-\t\t\t\t\t    NULL_TREE, $2,\n-\t\t\t\t\t    1, &$$.new_type_flag);\n+\t\t  $$.t = parse_handle_class_head (current_aggr,\n+\t\t\t\t\t\t  NULL_TREE, $2,\n+\t\t\t\t\t\t  1, &$$.new_type_flag);\n \t\t}\n         | aggr '{'\n \t\t{\n \t\t  current_aggr = $1;\n-\t\t  $$.t = TYPE_MAIN_DECL (xref_tag ($1, make_anon_name (), 0));\n+\t\t  $$.t = TYPE_MAIN_DECL (parse_xref_tag ($1, \n+\t\t\t\t\t\t\t make_anon_name (), \n+\t\t\t\t\t\t\t 0));\n \t\t  $$.new_type_flag = 0;\n \t\t  yyungetc ('{', 1);\n \t\t}\n@@ -4034,4 +4041,48 @@ parse_scoped_id (token)\n   return do_scoped_id (token, id);\n }\n \n+/* AGGR may be either a type node (like class_type_node) or a\n+   TREE_LIST whose TREE_PURPOSE is a list of attributes and whose\n+   TREE_VALUE is a type node.  Set *TAG_KIND and *ATTRIBUTES to\n+   represent the information encoded.  */\n+\n+static void\n+parse_split_aggr (tree aggr, enum tag_types *tag_kind, tree *attributes)\n+{\n+  if (TREE_CODE (aggr) == TREE_LIST) \n+    {\n+      *attributes = TREE_PURPOSE (aggr);\n+      aggr = TREE_VALUE (aggr);\n+    }\n+  else\n+    *attributes = NULL_TREE;\n+  *tag_kind = (enum tag_types) tree_low_cst (aggr, 1);\n+}\n+\n+/* Like xref_tag, except that the AGGR may be either a type node (like\n+   class_type_node) or a TREE_LIST whose TREE_PURPOSE is a list of\n+   attributes and whose TREE_VALUE is a type node.  */\n+\n+static tree\n+parse_xref_tag (tree aggr, tree name, int globalize)\n+{\n+  tree attributes;\n+  enum tag_types tag_kind;\n+  parse_split_aggr (aggr, &tag_kind, &attributes);\n+  return xref_tag (tag_kind, name, attributes, globalize);\n+}\n+\n+/* Like handle_class_head, but AGGR may be as for parse_xref_tag. */\n+\n+static tree\n+parse_handle_class_head (tree aggr, tree scope, tree id, \n+\t\t\t int defn_p, int *new_type_p)\n+{\n+  tree attributes;\n+  enum tag_types tag_kind;\n+  parse_split_aggr (aggr, &tag_kind, &attributes);\n+  return handle_class_head (tag_kind, scope, id, attributes, \n+\t\t\t    defn_p, new_type_p);\n+}\n+\n #include \"gt-cp-parse.h\""}, {"sha": "317a44d53ddda06409e25537d532f3169aa56d79", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=88e5899c42f407b4a004f07547b66faedb337e5d", "patch": "@@ -72,8 +72,9 @@ void\n init_rtti_processing ()\n {\n   push_namespace (std_identifier);\n-  type_info_type_node = xref_tag\n-    (class_type_node, get_identifier (\"type_info\"), 1);\n+  type_info_type_node \n+    = xref_tag (class_type, get_identifier (\"type_info\"),\n+\t\t/*attributes=*/NULL_TREE, 1);\n   pop_namespace ();\n   tinfo_decl_type = \n     build_qualified_type (type_info_type_node, TYPE_QUAL_CONST);\n@@ -573,8 +574,9 @@ build_dynamic_cast_1 (type, expr)\n \t      const char *name;\n \t      \n \t      push_nested_namespace (ns);\n-\t      tinfo_ptr = xref_tag (class_type_node,\n+\t      tinfo_ptr = xref_tag (class_type,\n \t\t\t\t    get_identifier (\"__class_type_info\"),\n+\t\t\t\t    /*attributes=*/NULL_TREE,\n \t\t\t\t    1);\n \t      \n \t      tinfo_ptr = build_pointer_type\n@@ -1166,7 +1168,8 @@ create_pseudo_type_info VPARAMS((const char *real_name, int ident, ...))\n     sprintf (pseudo_name + strlen (pseudo_name), \"%d\", ident);\n   \n   /* Get the vtable decl. */\n-  real_type = xref_tag (class_type_node, get_identifier (real_name), 1);\n+  real_type = xref_tag (class_type, get_identifier (real_name), \n+\t\t\t/*attributes=*/NULL_TREE, 1);\n   if (! TYPE_SIZE (real_type))\n     {\n       /* We never saw a definition of this type, so we need to tell the\n@@ -1370,8 +1373,10 @@ emit_support_tinfos ()\n   tree bltn_type, dtor;\n   \n   push_nested_namespace (abi_node);\n-  bltn_type = xref_tag (class_type_node,\n-                        get_identifier (\"__fundamental_type_info\"), 1);\n+  bltn_type = xref_tag (class_type,\n+\t\t\tget_identifier (\"__fundamental_type_info\"), \n+\t\t\t/*attributes=*/NULL_TREE,\n+\t\t\t1);\n   pop_nested_namespace (abi_node);\n   if (!COMPLETE_TYPE_P (bltn_type))\n     return;"}, {"sha": "30d8cac9a79ddac7dcd230422e69aa139f88f65d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e5899c42f407b4a004f07547b66faedb337e5d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=88e5899c42f407b4a004f07547b66faedb337e5d", "patch": "@@ -1844,7 +1844,7 @@ build_object_ref (datum, basetype, field)\n     {\n       tree binfo = NULL_TREE;\n       datum = build_scoped_ref (datum, basetype, &binfo);\n-      return build_x_component_ref (datum, field, binfo, 1);\n+      return build_x_component_ref (datum, field, binfo);\n     }\n   return error_mark_node;\n }\n@@ -2256,11 +2256,11 @@ invalid offsetof from non-POD type `%#T'; use pointer to member instead\",\n    never have REFERENCE_TYPE.  */\n \n tree\n-build_x_component_ref (datum, component, basetype_path, protect)\n+build_x_component_ref (datum, component, basetype_path)\n      tree datum, component, basetype_path;\n-     int protect;\n {\n-  tree t = build_component_ref (datum, component, basetype_path, protect);\n+  tree t = build_component_ref (datum, component, basetype_path, \n+\t\t\t\t/*protect=*/1);\n \n   if (! processing_template_decl)\n     t = convert_from_reference (t);"}]}