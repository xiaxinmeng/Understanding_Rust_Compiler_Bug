{"sha": "afd2c302c6f4377ed46d809744115e67d363d997", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZkMmMzMDJjNmY0Mzc3ZWQ0NmQ4MDk3NDQxMTVlNjdkMzYzZDk5Nw==", "commit": {"author": {"name": "Stefan D\u00f6singer", "email": "stefan@codeweavers.com", "date": "2009-10-12T16:36:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-10-12T16:36:37Z"}, "message": "i386.md (vswapmov): New.\n\n2009-10-12  Stefan D\u00f6singer  <stefan@codeweavers.com>\n\n\t* config/i386/i386.md (vswapmov): New.\n\t* config/i386/i386.c (ix86_handle_fndecl_attribute): New.\n\t(ix86_function_ms_hook_prologue): New.\n\t(ix86_expand_prologue): Handle ms_hook_prologue attribute.\n\t* configure.ac: Test for swap suffix support in as.\n\t* configure: Rebuild.\n\nFrom-SVN: r152670", "tree": {"sha": "458ae7e284b9bdd2f115c05aee9e40fdb0d47167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/458ae7e284b9bdd2f115c05aee9e40fdb0d47167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afd2c302c6f4377ed46d809744115e67d363d997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd2c302c6f4377ed46d809744115e67d363d997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd2c302c6f4377ed46d809744115e67d363d997", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd2c302c6f4377ed46d809744115e67d363d997/comments", "author": {"login": "stefand", "id": 521262, "node_id": "MDQ6VXNlcjUyMTI2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/521262?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefand", "html_url": "https://github.com/stefand", "followers_url": "https://api.github.com/users/stefand/followers", "following_url": "https://api.github.com/users/stefand/following{/other_user}", "gists_url": "https://api.github.com/users/stefand/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefand/subscriptions", "organizations_url": "https://api.github.com/users/stefand/orgs", "repos_url": "https://api.github.com/users/stefand/repos", "events_url": "https://api.github.com/users/stefand/events{/privacy}", "received_events_url": "https://api.github.com/users/stefand/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea1b2f550d560f911ee70052713b7e5a17d44f33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea1b2f550d560f911ee70052713b7e5a17d44f33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea1b2f550d560f911ee70052713b7e5a17d44f33"}], "stats": {"total": 159, "additions": 158, "deletions": 1}, "files": [{"sha": "0714158ea99edbb79c55c3472561e19ba1475b78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=afd2c302c6f4377ed46d809744115e67d363d997", "patch": "@@ -1,3 +1,12 @@\n+2009-10-12  Stefan D\u00f6singer  <stefan@codeweavers.com>\n+        \n+\t* config/i386/i386.md (vswapmov): New.\n+\t* config/i386/i386.c (ix86_handle_fndecl_attribute): New.\n+\t(ix86_function_ms_hook_prologue): New.\n+\t(ix86_expand_prologue): Handle ms_hook_prologue attribute.\n+\t* configure.ac: Test for swap suffix support in as.\n+\t* configure: Rebuild.\n+\n 2009-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/41680"}, {"sha": "73913b8376de8b4c8887d9900906e87e14dd2896", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=afd2c302c6f4377ed46d809744115e67d363d997", "patch": "@@ -4774,6 +4774,25 @@ ix86_function_type_abi (const_tree fntype)\n   return ix86_abi;\n }\n \n+static bool\n+ix86_function_ms_hook_prologue (const_tree fntype)\n+{\n+  if (!TARGET_64BIT)\n+    {\n+      if (lookup_attribute (\"ms_hook_prologue\", DECL_ATTRIBUTES (fntype)))\n+        {\n+          if (decl_function_context (fntype) != NULL_TREE)\n+          {\n+            error_at (DECL_SOURCE_LOCATION (fntype),\n+                \"ms_hook_prologue is not compatible with nested function\");\n+          }\n+\n+          return true;\n+        }\n+    }\n+  return false;\n+}\n+\n static enum calling_abi\n ix86_function_abi (const_tree fndecl)\n {\n@@ -8295,6 +8314,7 @@ ix86_expand_prologue (void)\n   bool pic_reg_used;\n   struct ix86_frame frame;\n   HOST_WIDE_INT allocate;\n+  int gen_frame_pointer = frame_pointer_needed;\n \n   ix86_finalize_stack_realign_flags ();\n \n@@ -8307,6 +8327,46 @@ ix86_expand_prologue (void)\n \n   ix86_compute_frame_layout (&frame);\n \n+  if (ix86_function_ms_hook_prologue (current_function_decl))\n+    {\n+      rtx push, mov;\n+\n+      /* Make sure the function starts with\n+         8b ff     movl.s %edi,%edi\n+         55        push   %ebp\n+         8b ec     movl.s %esp,%ebp\n+\n+         This matches the hookable function prologue in Win32 API functions in Microsoft Windows\n+         XP Service Pack 2 and newer. Wine uses this to enable Windows apps to hook the Win32 API\n+         functions provided by Wine */\n+      insn = emit_insn (gen_vswapmov (gen_rtx_REG (SImode, DI_REG), gen_rtx_REG (SImode, DI_REG)));\n+      push = emit_insn (gen_push (hard_frame_pointer_rtx));\n+      mov = emit_insn (gen_vswapmov (hard_frame_pointer_rtx, stack_pointer_rtx));\n+\n+      if (frame_pointer_needed && !(crtl->drap_reg && crtl->stack_realign_needed))\n+        {\n+          /* The push %ebp and movl.s %esp, %ebp already set up the frame pointer. No need to do\n+             this again. */\n+          gen_frame_pointer = 0;\n+          RTX_FRAME_RELATED_P (push) = 1;\n+          RTX_FRAME_RELATED_P (mov) = 1;\n+          if (ix86_cfa_state->reg == stack_pointer_rtx)\n+            {\n+              ix86_cfa_state->reg = hard_frame_pointer_rtx;\n+            }\n+        }\n+      else\n+        {\n+          /* If the frame pointer is not needed, pop %ebp again. This could be optimized for cases where\n+             ebp needs to be backed up for some other reason.\n+\n+             If stack realignment is needed, pop the base pointer again, align the stack, and later\n+             regenerate the frame pointer setup. The frame pointer generated by the hook prologue\n+             is not aligned, so it can't be used */\n+          insn = emit_insn ((*ix86_gen_pop1) (hard_frame_pointer_rtx));\n+        }\n+    }\n+\n   /* The first insn of a function that accepts its static chain on the\n      stack is to push the register that would be filled in by a direct\n      call.  This insn will be skipped by the trampoline.  */\n@@ -8378,7 +8438,7 @@ ix86_expand_prologue (void)\n   /* Note: AT&T enter does NOT have reversed args.  Enter is probably\n      slower on all targets.  Also sdb doesn't like it.  */\n \n-  if (frame_pointer_needed)\n+  if (gen_frame_pointer)\n     {\n       insn = emit_insn (gen_push (hard_frame_pointer_rtx));\n       RTX_FRAME_RELATED_P (insn) = 1;\n@@ -26470,6 +26530,35 @@ ix86_handle_struct_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n+#include <signal.h>\n+\n+static tree\n+ix86_handle_fndecl_attribute (tree *node, tree name,\n+                              tree args ATTRIBUTE_UNUSED,\n+                              int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+               name);\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+\n+  if (TARGET_64BIT)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only available for 32-bit\",\n+               name);\n+      return NULL_TREE;\n+    }\n+\n+#ifndef HAVE_AS_IX86_SWAP\n+  sorry (\"ms_hook_prologue attribute needs assembler swap suffix support\");\n+#endif\n+\n+    return NULL_TREE;\n+}\n+\n static bool\n ix86_ms_bitfield_layout_p (const_tree record_type)\n {\n@@ -29512,6 +29601,7 @@ static const struct attribute_spec ix86_attribute_table[] =\n   /* ms_abi and sysv_abi calling convention function attributes.  */\n   { \"ms_abi\", 0, 0, false, true, true, ix86_handle_abi_attribute },\n   { \"sysv_abi\", 0, 0, false, true, true, ix86_handle_abi_attribute },\n+  { \"ms_hook_prologue\", 0, 0, true, false, false, ix86_handle_fndecl_attribute },\n   /* End element.  */\n   { NULL,        0, 0, false, false, false, NULL }\n };"}, {"sha": "3fa938ea3bbd1442db806c9b62963f459cc7418f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=afd2c302c6f4377ed46d809744115e67d363d997", "patch": "@@ -241,6 +241,7 @@\n    (UNSPECV_RDTSC\t\t18)\n    (UNSPECV_RDTSCP\t\t19)\n    (UNSPECV_RDPMC\t\t20)\n+   (UNSPECV_VSWAPMOV\t21)\n   ])\n \n ;; Constants to represent pcomtrue/pcomfalse variants\n@@ -14893,6 +14894,16 @@\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"modrm\" \"0\")])\n \n+(define_insn \"vswapmov\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (match_operand:SI 1 \"register_operand\" \"r\"))\n+   (unspec_volatile [(const_int 0)] UNSPECV_VSWAPMOV)]\n+  \"\"\n+  \"movl.s\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"modrm\" \"0\")])\n+\n ;; Pad to 16-byte boundary, max skip in op0.  Used to avoid\n ;; branch prediction penalty for the third jump in a 16-byte\n ;; block on K8."}, {"sha": "dd3b7e890d282b6d79b330db0593e09b9fc9db73", "filename": "gcc/configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=afd2c302c6f4377ed46d809744115e67d363d997", "patch": "@@ -3047,6 +3047,12 @@ foo:\tnop\n       [AC_DEFINE(HAVE_AS_IX86_SAHF, 1,\n         [Define if your assembler supports the sahf mnemonic.])])\n \n+    gcc_GAS_CHECK_FEATURE([swap suffix],\n+      gcc_cv_as_ix86_swap,,,\n+      [movl.s %esp, %ebp],,\n+      [AC_DEFINE(HAVE_AS_IX86_SWAP, 1,\n+        [Define if your assembler supports the swap suffix.])])\n+\n     gcc_GAS_CHECK_FEATURE([different section symbol subtraction],\n       gcc_cv_as_ix86_diff_sect_delta,,,\n       [.section .rodata"}, {"sha": "da886a30f11c04d234e970856f07fbf412662cc7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=afd2c302c6f4377ed46d809744115e67d363d997", "patch": "@@ -2679,6 +2679,14 @@ when targeting Windows.  On all other systems, the default is the AMD ABI.\n \n Note, This feature is currently sorried out for Windows targets trying to\n \n+@item ms_hook_prologue\n+@cindex @code{ms_hook_prologue} attribute\n+\n+On 32 bit i[34567]86-*-* targets, you can use this function attribute to make\n+gcc generate the \"hot-patching\" function prologue used in Win32 API\n+functions in Microsoft Windows XP Service Pack 2 and newer. This requires\n+support for the swap suffix in the assembler. (GNU Binutils 2.19.51 or later)\n+\n @item naked\n @cindex function without a prologue/epilogue code\n Use this attribute on the ARM, AVR, IP2K and SPU ports to indicate that"}, {"sha": "07c5ef5c442de5436980df6ce416915e41979779", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=afd2c302c6f4377ed46d809744115e67d363d997", "patch": "@@ -1,3 +1,7 @@\n+2009-10-12  Stefan D\u00f6singer  <stefan@codeweavers.com>\n+\n+\t* gcc.target/i386/ms_hook_prologue.c: New testcase.\n+\n 2009-10-12  Michael Matz  <matz@suse.de>\n \n \t* gcc.dg/plugin/one_time_plugin.c: Update test to use the cfg"}, {"sha": "19438e7583fa41dd5f2d5009cbeb82053f672088", "filename": "gcc/testsuite/gcc.target/i386/ms_hook_prologue.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fms_hook_prologue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd2c302c6f4377ed46d809744115e67d363d997/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fms_hook_prologue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fms_hook_prologue.c?ref=afd2c302c6f4377ed46d809744115e67d363d997", "patch": "@@ -0,0 +1,29 @@\n+/* Test that the ms_hook_prologue attribute generates the correct code.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+int __attribute__ ((__ms_hook_prologue__)) foo ()\n+{\n+  unsigned char *ptr = (unsigned char *) foo;\n+\n+  /* The NOP mov must not be optimized away by optimizations.\n+     The push %ebp, mov %esp, %ebp must not be removed by\n+     -fomit-frame-pointer */\n+\n+  /* movl.s %edi, %edi */\n+  if(*ptr++ != 0x8b) return 1;\n+  if(*ptr++ != 0xff) return 1;\n+  /* push %ebp */\n+  if(*ptr++ != 0x55) return 1;\n+  /* movl.s %esp, %ebp */\n+  if(*ptr++ != 0x8b) return 1;\n+  if(*ptr++ != 0xec) return 1;\n+  return 0;\n+}\n+\n+int main ()\n+{\n+  return foo();\n+}"}]}