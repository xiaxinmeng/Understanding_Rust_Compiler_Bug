{"sha": "7f8053225de072fed9c4822e589c853a6f5e47c4", "node_id": "C_kwDOANBUbNoAKDdmODA1MzIyNWRlMDcyZmVkOWM0ODIyZTU4OWM4NTNhNmY1ZTQ3YzQ", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-01-13T23:05:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-10T08:19:23Z"}, "message": "[Ada] Fix hiding of user-defined operator that is not a homograph\n\nThis adds a missing test for the presence of a homograph when applying\nthe RM 8.4(10) clause about the visibility of operators, and removes\nresolution code made obsolete by the change.  There is also a fixlet\nfor a previously undetected ambiguity in the runtime.\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Eqyality_Op): Remove obsolete code.\n\t(Resolve_Op_Not): Likewise.\n\t* sem_type.adb (Disambiguate): Add missing test for RM 8.4(10).\n\t* libgnat/s-dwalin.adb (Enable_Cache): Fix ambiguity.\n\t(Symbolic_Address): Likewise.\n\ngcc/testsuite/\n\n\t* gnat.dg/equal7.adb: Add expected error messages (code is now\n\tillegal).", "tree": {"sha": "3cca2df6a508114bb16be38e971920fb4d707482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cca2df6a508114bb16be38e971920fb4d707482"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f8053225de072fed9c4822e589c853a6f5e47c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8053225de072fed9c4822e589c853a6f5e47c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8053225de072fed9c4822e589c853a6f5e47c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8053225de072fed9c4822e589c853a6f5e47c4/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6798cad793d9581936f2de76c85a22a5449d7358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6798cad793d9581936f2de76c85a22a5449d7358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6798cad793d9581936f2de76c85a22a5449d7358"}], "stats": {"total": 110, "additions": 19, "deletions": 91}, "files": [{"sha": "aff552cf57bf7890a4bc8910f6d4b5acf6cc44e9", "filename": "gcc/ada/libgnat/s-dwalin.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8053225de072fed9c4822e589c853a6f5e47c4/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8053225de072fed9c4822e589c853a6f5e47c4/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb?ref=7f8053225de072fed9c4822e589c853a6f5e47c4", "patch": "@@ -1544,7 +1544,7 @@ package body System.Dwarf_Lines is\n                exit when Ar_Start = Null_Address and Ar_Len = 0;\n \n                Len   := uint32 (Ar_Len);\n-               Start := uint32 (Ar_Start - C.Low);\n+               Start := uint32 (Address'(Ar_Start - C.Low));\n \n                --  Search START in the array\n \n@@ -1764,7 +1764,8 @@ package body System.Dwarf_Lines is\n \n       if C.Cache /= null then\n          declare\n-            Addr_Off         : constant uint32 := uint32 (Addr - C.Low);\n+            Addr_Off : constant uint32 := uint32 (Address'(Addr - C.Low));\n+\n             First, Last, Mid : Natural;\n          begin\n             First := C.Cache'First;"}, {"sha": "26da4ffc5c76c71bdd953acacd85f7bd80b48d3a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 84, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8053225de072fed9c4822e589c853a6f5e47c4/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8053225de072fed9c4822e589c853a6f5e47c4/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=7f8053225de072fed9c4822e589c853a6f5e47c4", "patch": "@@ -8962,55 +8962,6 @@ package body Sem_Res is\n             Error_Msg_N (\"?q?equality should be parenthesized here!\", N);\n          end if;\n \n-         --  If the equality is overloaded and the operands have resolved\n-         --  properly, set the proper equality operator on the node. The\n-         --  current setting is the first one found during analysis, which\n-         --  is not necessarily the one to which the node has resolved.\n-\n-         if Is_Overloaded (N) then\n-            declare\n-               I  : Interp_Index;\n-               It : Interp;\n-\n-            begin\n-               Get_First_Interp (N, I, It);\n-\n-               --  If the equality is user-defined, the type of the operands\n-               --  matches that of the formals. For a predefined operator,\n-               --  it is the scope that matters, given that the predefined\n-               --  equality has Any_Type formals. In either case the result\n-               --  type (most often Boolean) must match the context. The scope\n-               --  is either that of the type, if there is a generated equality\n-               --  (when there is an equality for the component type), or else\n-               --  Standard otherwise.\n-\n-               while Present (It.Typ) loop\n-                  if Etype (It.Nam) = Typ\n-                    and then\n-                     (Etype (First_Entity (It.Nam)) = Etype (L)\n-                       or else Scope (It.Nam) = Standard_Standard\n-                       or else Scope (It.Nam) = Scope (T))\n-                  then\n-                     Set_Entity (N, It.Nam);\n-\n-                     Set_Is_Overloaded (N, False);\n-                     exit;\n-                  end if;\n-\n-                  Get_Next_Interp (I, It);\n-               end loop;\n-\n-               --  If expansion is active and this is an inherited operation,\n-               --  replace it with its ancestor. This must not be done during\n-               --  preanalysis because the type may not be frozen yet, as when\n-               --  the context is a precondition or postcondition.\n-\n-               if Present (Alias (Entity (N))) and then Expander_Active then\n-                  Set_Entity (N, Alias (Entity (N)));\n-               end if;\n-            end;\n-         end if;\n-\n          Check_Unset_Reference (L);\n          Check_Unset_Reference (R);\n          Generate_Operator_Reference (N, T);\n@@ -10594,42 +10545,9 @@ package body Sem_Res is\n          end if;\n \n          --  Complete resolution and evaluation of NOT\n-         --  If argument is an equality and expected type is boolean, that\n-         --  expected type has no effect on resolution, and there are\n-         --  special rules for resolution of Eq, Neq in the presence of\n-         --  overloaded operands, so we directly call its resolution routines.\n-\n-         declare\n-            Opnd : constant Node_Id := Right_Opnd (N);\n-            Op_Id : Entity_Id;\n-\n-         begin\n-            if B_Typ = Standard_Boolean\n-              and then Nkind (Opnd) in N_Op_Eq | N_Op_Ne\n-              and then Is_Overloaded (Opnd)\n-            then\n-               Resolve_Equality_Op (Opnd, B_Typ);\n-               Op_Id := Entity (Opnd);\n-\n-               if Ekind (Op_Id) = E_Function\n-                 and then not Is_Intrinsic_Subprogram (Op_Id)\n-               then\n-                  Rewrite_Operator_As_Call (Opnd, Op_Id);\n-               end if;\n-\n-               if not Inside_A_Generic or else Is_Entity_Name (Opnd) then\n-                  Freeze_Expression (Opnd);\n-               end if;\n-\n-               Expand (Opnd);\n-\n-            else\n-               Resolve (Opnd, B_Typ);\n-            end if;\n-\n-            Check_Unset_Reference (Opnd);\n-         end;\n \n+         Resolve (Right_Opnd (N), B_Typ);\n+         Check_Unset_Reference (Right_Opnd (N));\n          Set_Etype (N, B_Typ);\n          Generate_Operator_Reference (N, B_Typ);\n          Eval_Op_Not (N);"}, {"sha": "d5ee20b0c749ef3062645ced3f72e5153202e9ca", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8053225de072fed9c4822e589c853a6f5e47c4/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8053225de072fed9c4822e589c853a6f5e47c4/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=7f8053225de072fed9c4822e589c853a6f5e47c4", "patch": "@@ -2215,13 +2215,14 @@ package body Sem_Type is\n                   return It2;\n                end if;\n \n-            --  An immediately visible operator hides a use-visible user-\n-            --  defined operation. This disambiguation cannot take place\n-            --  earlier because the visibility of the predefined operator\n-            --  can only be established when operand types are known.\n+            --  RM 8.4(10): an immediately visible operator hides a use-visible\n+            --  user-defined operation that is a homograph. This disambiguation\n+            --  cannot take place earlier because visibility of the predefined\n+            --  operator can only be established when operand types are known.\n \n             elsif Ekind (User_Subp) = E_Function\n               and then Ekind (Predef_Subp) = E_Operator\n+              and then Operator_Matches_Spec (Predef_Subp, User_Subp)\n               and then Nkind (N) in N_Op\n               and then not Is_Overloaded (Right_Opnd (N))\n               and then"}, {"sha": "5e252a7f08cd95e21ec204ed0c3b7994e3858260", "filename": "gcc/testsuite/gnat.dg/equal7.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8053225de072fed9c4822e589c853a6f5e47c4/gcc%2Ftestsuite%2Fgnat.dg%2Fequal7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8053225de072fed9c4822e589c853a6f5e47c4/gcc%2Ftestsuite%2Fgnat.dg%2Fequal7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal7.adb?ref=7f8053225de072fed9c4822e589c853a6f5e47c4", "patch": "@@ -1,4 +1,4 @@\n---  { dg-do run }\n+--  { dg-do compile }\n \n with Equal7_Pkg; use Equal7_Pkg;\n with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;\n@@ -13,3 +13,11 @@ begin\n        null;\n    end if;\n end;\n+\n+-- { dg-error \"ambiguous expression \\\\(cannot resolve \\\"/=\\\"\\\\)\" \"\" { target *-*-* } 9 }\n+-- { dg-error \"possible interpretation at a-strunb.ads:\\\\d+\" \"\" { target *-*-* } 9 }\n+-- { dg-error \"possible interpretation in package Standard\" \"\" { target *-*-* } 9 }\n+\n+-- { dg-error \"ambiguous expression \\\\(cannot resolve \\\"=\\\"\\\\)\" \"\" { target *-*-* } 12 }\n+-- { dg-error \"possible interpretation at a-strunb.ads:\\\\d+\" \"\" { target *-*-* } 12 }\n+-- { dg-error \"possible interpretation in package Standard\" \"\" { target *-*-* } 12 }"}]}