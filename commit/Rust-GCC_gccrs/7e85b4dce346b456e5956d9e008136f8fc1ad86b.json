{"sha": "7e85b4dce346b456e5956d9e008136f8fc1ad86b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U4NWI0ZGNlMzQ2YjQ1NmU1OTU2ZDllMDA4MTM2ZjhmYzFhZDg2Yg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2019-05-20T18:17:33Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2019-05-20T18:17:33Z"}, "message": "Wtype-limits-Wextra.c: Adjust expected output after recent diagnostic cleanups.\n\n\t* gcc.dg/Wtype-limits-Wextra.c: Adjust expected output after\n\trecent diagnostic cleanups.\n\nFrom-SVN: r271429", "tree": {"sha": "4052df193557399d72a96088961ccc2a22bddd40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4052df193557399d72a96088961ccc2a22bddd40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e85b4dce346b456e5956d9e008136f8fc1ad86b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e85b4dce346b456e5956d9e008136f8fc1ad86b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e85b4dce346b456e5956d9e008136f8fc1ad86b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e85b4dce346b456e5956d9e008136f8fc1ad86b/comments", "author": null, "committer": null, "parents": [{"sha": "c9afb226051b44e05138ccad825099f8259ec3f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9afb226051b44e05138ccad825099f8259ec3f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9afb226051b44e05138ccad825099f8259ec3f6"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "0643cc35e69915ed935c3a7129910b4eca7c84ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e85b4dce346b456e5956d9e008136f8fc1ad86b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e85b4dce346b456e5956d9e008136f8fc1ad86b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e85b4dce346b456e5956d9e008136f8fc1ad86b", "patch": "@@ -1,3 +1,8 @@\n+2019-05-20  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/Wtype-limits-Wextra.c: Adjust expected output after\n+\trecent diagnostic cleanups.\n+\n 2019-05-20  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \tPR tree-optimization/90106"}, {"sha": "72a395164ff2792282da3aff159955ffb9a28be2", "filename": "gcc/testsuite/gcc.dg/Wtype-limits-Wextra.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e85b4dce346b456e5956d9e008136f8fc1ad86b/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e85b4dce346b456e5956d9e008136f8fc1ad86b/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtype-limits-Wextra.c?ref=7e85b4dce346b456e5956d9e008136f8fc1ad86b", "patch": "@@ -21,13 +21,13 @@ void a (unsigned char x)\n }\n \n void b (unsigned short x)\n-{                    /* { dg-warning \"comparison of unsigned expression '< 0' is always false\" \"\" { target { ! int32plus } } .+1 } */\n+{                    /* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" \"\" { target { ! int32plus } } .+1 } */\n   if (x < 0)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n-                     /* { dg-warning \"comparison of unsigned expression '>= 0' is always true\" \"\" { target { ! int32plus } } .+1 } */\n+                     /* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" \"\" { target { ! int32plus } } .+1 } */\n   if (x >= 0) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */\n-                     /* { dg-warning \"comparison of unsigned expression '< 0' is always false\" \"\" { target { ! int32plus } } .+1 } */\n+                     /* { dg-warning \"comparison of unsigned expression in '< 0' is always false\" \"\" { target { ! int32plus } } .+1 } */\n   if (0 > x)  return;/* { dg-warning \"comparison is always false due to limited range of data type\" \"\" { target { int32plus } } } */\n-                     /* { dg-warning \"comparison of unsigned expression '>= 0' is always true\" \"\" { target { ! int32plus } } .+1 } */\n+                     /* { dg-warning \"comparison of unsigned expression in '>= 0' is always true\" \"\" { target { ! int32plus } } .+1 } */\n   if (0 <= x) return;/* { dg-warning \"comparison is always true due to limited range of data type\" \"\" { target { int32plus } } } */\n }\n "}]}