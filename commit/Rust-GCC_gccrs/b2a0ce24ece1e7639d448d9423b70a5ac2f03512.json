{"sha": "b2a0ce24ece1e7639d448d9423b70a5ac2f03512", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJhMGNlMjRlY2UxZTc2MzlkNDQ4ZDk0MjNiNzBhNWFjMmYwMzUxMg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-07-28T14:47:11Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-07-28T14:47:11Z"}, "message": "part 3 of darwin64 PPC ABI changes\n\n\t* config/rs6000/rs6000.c (rs6000_override_options): \n\tUse TARGET_MACHO inline, move darwin_one_byte_bool from here...\n\t... to darwin_rs6000_override_options.\n\t(rs6000_return_in_memory): Update preceding comment for darwin\n\t64 bit ABI.  Use TARGET_MACHO inline.\n\t(rs6000_darwin64_struct_check_p): New.\n\t(function_arg_advance): Use rs6000_darwin64_struct_check_p.\n\t(function_arg): Likewise.\n\t(rs6000_arg_partial_bytes): Likewise.\n\t(rs6000_function_value): Likewise.\n\nFrom-SVN: r162635", "tree": {"sha": "09ce20ca72f400f521a173e71f1055bd83e8370c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09ce20ca72f400f521a173e71f1055bd83e8370c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2a0ce24ece1e7639d448d9423b70a5ac2f03512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a0ce24ece1e7639d448d9423b70a5ac2f03512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a0ce24ece1e7639d448d9423b70a5ac2f03512", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a0ce24ece1e7639d448d9423b70a5ac2f03512/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c71eb2b76cd37ddf9bd819a587a62f14b0c589d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71eb2b76cd37ddf9bd819a587a62f14b0c589d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c71eb2b76cd37ddf9bd819a587a62f14b0c589d2"}], "stats": {"total": 85, "additions": 58, "deletions": 27}, "files": [{"sha": "3c4db47758512e54d5e083155ec9a3b4a69124cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a0ce24ece1e7639d448d9423b70a5ac2f03512/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a0ce24ece1e7639d448d9423b70a5ac2f03512/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2a0ce24ece1e7639d448d9423b70a5ac2f03512", "patch": "@@ -1,3 +1,16 @@\n+2010-07-28  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_override_options): \n+\tUse TARGET_MACHO inline, move darwin_one_byte_bool from here...\n+\t... to darwin_rs6000_override_options.\n+\t(rs6000_return_in_memory): Update preceding comment for darwin\n+\t64 bit ABI.  Use TARGET_MACHO inline.\n+\t(rs6000_darwin64_struct_check_p): New.\n+\t(function_arg_advance): Use rs6000_darwin64_struct_check_p.\n+\t(function_arg): Likewise.\n+\t(rs6000_arg_partial_bytes): Likewise.\n+\t(rs6000_function_value): Likewise.\n+\n 2010-07-28  Andi Kleen <ak@linux.intel.com>\n \n \t* lto-opts.c (lto_file_read_options): Add loop over all inputs."}, {"sha": "b5981d50d9ab8a86dd3f123f3451dfc278faffa2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 45, "deletions": 27, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a0ce24ece1e7639d448d9423b70a5ac2f03512/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a0ce24ece1e7639d448d9423b70a5ac2f03512/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b2a0ce24ece1e7639d448d9423b70a5ac2f03512", "patch": "@@ -2335,6 +2335,8 @@ darwin_rs6000_override_options (void)\n       {\n         flag_pic = 2;\n       }\n+    if (TARGET_64BIT)\n+      darwin_one_byte_bool = 1;\n   }\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\n     {\n@@ -2795,13 +2797,13 @@ rs6000_override_options (const char *default_cpu)\n \tTARGET_ALTIVEC_VRSAVE = rs6000_altivec_abi;\n     }\n \n-  /* Set the Darwin64 ABI as default for 64-bit Darwin.  */\n-  if (DEFAULT_ABI == ABI_DARWIN && TARGET_64BIT)\n+  /* Set the Darwin64 ABI as default for 64-bit Darwin.  \n+     So far, the only darwin64 targets are also MACH-O.  */\n+  if (TARGET_MACHO\n+      && DEFAULT_ABI == ABI_DARWIN \n+      && TARGET_64BIT)\n     {\n       rs6000_darwin64_abi = 1;\n-#if TARGET_MACHO\n-      darwin_one_byte_bool = 1;\n-#endif\n       /* Default to natural alignment, for better performance.  */\n       rs6000_alignment_flags = MASK_ALIGN_NATURAL;\n     }\n@@ -7263,9 +7265,17 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n    function doing the returning, or @code{NULL} for libcalls.\n \n    The AIX ABI for the RS/6000 specifies that all structures are\n-   returned in memory.  The Darwin ABI does the same.  The SVR4 ABI\n-   specifies that structures <= 8 bytes are returned in r3/r4, but a\n-   draft put them in memory, and GCC used to implement the draft\n+   returned in memory.  The Darwin ABI does the same.\n+   \n+   For the Darwin 64 Bit ABI, a function result can be returned in\n+   registers or in memory, depending on the size of the return data\n+   type.  If it is returned in registers, the value occupies the same\n+   registers as it would if it were the first and only function\n+   argument.  Otherwise, the function places its result in memory at\n+   the location pointed to by GPR3.\n+   \n+   The SVR4 ABI specifies that structures <= 8 bytes are returned in r3/r4, \n+   but a draft put them in memory, and GCC used to implement the draft\n    instead of the final standard.  Therefore, aix_struct_return\n    controls this instead of DEFAULT_ABI; V.4 targets needing backward\n    compatibility can change DRAFT_V4_STRUCT_RET to override the\n@@ -7281,9 +7291,9 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n static bool\n rs6000_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n-  /* In the darwin64 abi, try to use registers for larger structs\n-     if possible.  */\n-  if (rs6000_darwin64_abi\n+  /* For the Darwin64 ABI, test if we can fit the return value in regs.  */\n+  if (TARGET_MACHO\n+      && rs6000_darwin64_abi\n       && TREE_CODE (type) == RECORD_TYPE\n       && int_size_in_bytes (type) > 0)\n     {\n@@ -7499,7 +7509,9 @@ function_arg_boundary (enum machine_mode mode, tree type)\n \t   || (type && TREE_CODE (type) == VECTOR_TYPE\n \t       && int_size_in_bytes (type) >= 16))\n     return 128;\n-  else if (rs6000_darwin64_abi && mode == BLKmode\n+  else if (TARGET_MACHO\n+ \t   && rs6000_darwin64_abi\n+ \t   && mode == BLKmode\n \t   && type && TYPE_ALIGN (type) > 64)\n     return 128;\n   else\n@@ -7675,6 +7687,20 @@ rs6000_darwin64_record_arg_advance_recurse (CUMULATIVE_ARGS *cum,\n       }\n }\n \n+/* Check for an item that needs to be considered specially under the darwin 64\n+   bit ABI.  These are record types where the mode is BLK or the structure is\n+   8 bytes in size.  */\n+static int\n+rs6000_darwin64_struct_check_p (enum machine_mode mode, const_tree type)\n+{\n+  return rs6000_darwin64_abi\n+\t && ((mode == BLKmode \n+\t      && TREE_CODE (type) == RECORD_TYPE \n+\t      && int_size_in_bytes (type) > 0)\n+\t  || (type && TREE_CODE (type) == RECORD_TYPE \n+\t      && int_size_in_bytes (type) == 8)) ? 1 : 0;\n+}\n+\n /* Update the data in CUM to advance over an argument\n    of mode MODE and data type TYPE.\n    (TYPE is null for libcalls where that information may not be available.)\n@@ -7687,7 +7713,6 @@ void\n function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t      tree type, int named, int depth)\n {\n-  int size;\n \n   /* Only tick off an argument if we're not recursing.  */\n   if (depth == 0)\n@@ -7751,11 +7776,9 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t   && cum->sysv_gregno <= GP_ARG_MAX_REG)\n     cum->sysv_gregno++;\n \n-  else if (rs6000_darwin64_abi\n-\t   && mode == BLKmode\n-    \t   && TREE_CODE (type) == RECORD_TYPE\n-\t   && (size = int_size_in_bytes (type)) > 0)\n+  else if (TARGET_MACHO && rs6000_darwin64_struct_check_p (mode, type))\n     {\n+      int size = int_size_in_bytes (type);\n       /* Variable sized types have size == -1 and are\n \t treated as if consisting entirely of ints.\n \t Pad to 16 byte boundary if needed.  */\n@@ -7782,7 +7805,7 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t      fprintf (stderr, \"function_adv: words = %2d, align=%d, size=%d\",\n \t\t       cum->words, TYPE_ALIGN (type), size);\n \t      fprintf (stderr, \n-\t           \"nargs = %4d, proto = %d, mode = %4s (darwin64 abi BLK)\\n\",\n+\t           \"nargs = %4d, proto = %d, mode = %4s (darwin64 abi)\\n\",\n \t\t       cum->nargs_prototype, cum->prototype,\n \t\t       GET_MODE_NAME (mode));\n \t    }\n@@ -8262,8 +8285,7 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n       return GEN_INT (cum->call_cookie);\n     }\n \n-  if (rs6000_darwin64_abi && mode == BLKmode\n-      && TREE_CODE (type) == RECORD_TYPE)\n+  if (TARGET_MACHO && rs6000_darwin64_struct_check_p (mode, type))\n     {\n       rtx rslt = rs6000_darwin64_record_arg (cum, type, named, false);\n       if (rslt != NULL_RTX)\n@@ -8520,9 +8542,7 @@ rs6000_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     return 0;\n \n   /* In this complicated case we just disable the partial_nregs code.  */\n-  if (rs6000_darwin64_abi && mode == BLKmode\n-      && TREE_CODE (type) == RECORD_TYPE\n-      && int_size_in_bytes (type) > 0)\n+  if (TARGET_MACHO && rs6000_darwin64_struct_check_p (mode, type))\n     return 0;\n \n   align_words = rs6000_parm_start (mode, type, cum->words);\n@@ -26240,10 +26260,8 @@ rs6000_function_value (const_tree valtype,\n   unsigned int regno;\n \n   /* Special handling for structs in darwin64.  */\n-  if (rs6000_darwin64_abi\n-      && TYPE_MODE (valtype) == BLKmode\n-      && TREE_CODE (valtype) == RECORD_TYPE\n-      && int_size_in_bytes (valtype) > 0)\n+  if (TARGET_MACHO \n+      && rs6000_darwin64_struct_check_p (TYPE_MODE (valtype), valtype))\n     {\n       CUMULATIVE_ARGS valcum;\n       rtx valret;"}]}