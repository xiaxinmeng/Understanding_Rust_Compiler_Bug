{"sha": "eebc710d2e45b220f462f0f439db7336ec6b4b9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWViYzcxMGQyZTQ1YjIyMGY0NjJmMGY0MzlkYjczMzZlYzZiNGI5ZA==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-05-22T07:04:09Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-05-22T07:04:09Z"}, "message": "re PR fortran/40195 (Cannot unlink existing module file)\n\n\tPR fortran/40195\n\t* module.c (read_md5_from_module_file): Close file before returning.\n\nFrom-SVN: r147793", "tree": {"sha": "07c6969e6a73cf6ab6f5d8446c0dce4a68d456ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07c6969e6a73cf6ab6f5d8446c0dce4a68d456ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eebc710d2e45b220f462f0f439db7336ec6b4b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebc710d2e45b220f462f0f439db7336ec6b4b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eebc710d2e45b220f462f0f439db7336ec6b4b9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebc710d2e45b220f462f0f439db7336ec6b4b9d/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "134ef63846ab66e47efb86eedae8c506d7baf93e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134ef63846ab66e47efb86eedae8c506d7baf93e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/134ef63846ab66e47efb86eedae8c506d7baf93e"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "41db00eb8f8b0b6dbe494f3478278310fcdce423", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc710d2e45b220f462f0f439db7336ec6b4b9d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc710d2e45b220f462f0f439db7336ec6b4b9d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=eebc710d2e45b220f462f0f439db7336ec6b4b9d", "patch": "@@ -1,3 +1,8 @@\n+2009-05-22  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/40195\n+\t* module.c (read_md5_from_module_file): Close file before returning.\n+\n 2009-05-18  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/40164\n@@ -189,7 +194,7 @@\n \t* gfortran.h (gfc_code): Rename struct member label to label1.\n \t* dump-parse-tree.c (show_code_node): Update symbol.\n \t* trans-stmt.c (gfc_trans_label_assign, gfc_trans_goto,\n-\tgfc_trans_arithmetic_if)\": Ditto.\n+\tgfc_trans_arithmetic_if): Ditto.\n \t* resolve.c (gfc_resolve_blocks, resolve_code): Ditto.\n \t* match.c (match_arithmetic_if, gfc_match_if, gfc_reference_st_label,\n \tgfc_match_assign, gfc_match_goto): Ditto.\n@@ -447,13 +452,13 @@\n 2009-04-24  Daniel Kraft  <d@domob.eu>\n \n \t* gfortran.h (gfc_get_typebound_proc): Removed as macro, now a function.\n-\t(struct gfc_symtree): Moved `typebound' member inside union.\n-\t(struct gfc_namespace): Add `tb_sym_root' as new symtree to sort out\n+\t(struct gfc_symtree): Moved \"typebound\" member inside union.\n+\t(struct gfc_namespace): Add \"tb_sym_root\" as new symtree to sort out\n \ttype-bound procedures there.\n \t(gfc_get_tbp_symtree): New procedure.\n \t* symbol.c (tentative_tbp_list): New global.\n-\t(gfc_get_namespace): NULL new `tb_sym_root' member.\n-\t(gfc_new_symtree): Removed initialization of `typebound' member.\n+\t(gfc_get_namespace): NULL new \"tb_sym_root\" member.\n+\t(gfc_new_symtree): Removed initialization of \"typebound\" member.\n \t(gfc_undo_symbols): Process list of tentative tbp's.\n \t(gfc_commit_symbols): Ditto.\n \t(free_tb_tree): New method.\n@@ -466,8 +471,8 @@\n \t* primary.c (gfc_match_varspec): Ditto.  Don't reference tbp-symbol\n \tas it isn't a symbol any longer.\n \t* module.c (mio_typebound_symtree): Adapt to changes.\n-\t(mio_typebound_proc): Ditto, create symtrees using `gfc_get_tbp_symtree'\n-\trather than `gfc_get_sym_tree'.\n+\t(mio_typebound_proc): Ditto, create symtrees using \"gfc_get_tbp_symtree\"\n+\trather than \"gfc_get_sym_tree\".\n \t(mio_f2k_derived): Ditto.\n \t* decl.c (match_procedure_in_type): Ditto.\n \t(gfc_match_generic): Ditto.  Don't reference tbp-symbol.\n@@ -576,7 +581,7 @@\n 2009-04-11  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/37746\n-\t* gfortran.h (struct gfc_charlen): New field `passed_length' to store\n+\t* gfortran.h (struct gfc_charlen): New field \"passed_length\" to store\n \tthe actual passed string length for dummy arguments.\n \t* trans-decl.c (gfc_create_string_length): Formatting fixes and added\n \tassertion, moved a local variable into the innermost block it is needed.\n@@ -684,15 +689,15 @@\n \n 2009-04-06  Janus Weil  <janus@gcc.gnu.org>\n \n-       PR fortran/39414\n-       * decl.c (match_procedure_decl): Fix double declaration problems with\n-       PROCEDURE statements.\n-       * symbol.c (gfc_add_type): Ditto.\n+\tPR fortran/39414\n+\t* decl.c (match_procedure_decl): Fix double declaration problems with\n+\tPROCEDURE statements.\n+\t* symbol.c (gfc_add_type): Ditto.\n \n 2009-04-06  Paul Thomas  <pault@gcc.gnu.org>\n \n-        PR fortran/36091\n-        * trans-array.c (gfc_conv_array_ref): If the symbol has the\n+\tPR fortran/36091\n+\t* trans-array.c (gfc_conv_array_ref): If the symbol has the\n \ttemporary attribute use the array_spec for the bounds.\n \t* gfortran.h : Add the temporary field to the structure\n \t'symbol_attribute'.\n@@ -821,7 +826,7 @@\n 2009-03-29  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/37423\n-\t* gfortran.h (struct gfc_typebound_proc): Added new flag `deferred' and\n+\t* gfortran.h (struct gfc_typebound_proc): Added new flag \"deferred\" and\n \tadded a comment explaining DEFERRED binding handling.\n \t* decl.c (match_binding_attributes): Really match DEFERRED attribute.\n \t(match_procedure_in_type): Really match PROCEDURE(interface) syntax\n@@ -833,7 +838,7 @@\n \t(resolve_typebound_procedure): Allow abstract interfaces as targets\n \tfor DEFERRED bindings.\n \t(ensure_not_abstract_walker), (ensure_not_abstract): New methods.\n-\t(resolve_fl_derived): Use new `ensure_not_abstract' method for\n+\t(resolve_fl_derived): Use new \"ensure_not_abstract\" method for\n \tnon-ABSTRACT types extending ABSTRACT ones to ensure each DEFERRED\n \tbinding is overridden.\n \t(check_typebound_baseobject): New method.\n@@ -842,7 +847,7 @@\n \t* gfc-internals.texi (Type-bound procedures): Document a little bit\n \tabout internal handling of DEFERRED bindings.\n \n-2009-03-29  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+2009-03-29  Tobias Schlueter  <tobi@gcc.gnu.org>\n \n \tPR fortran/38507\n \t* gfortran.h (gfc_st_label): Fix comment."}, {"sha": "82a41996ca454d4ef07f2f896c1f4ce3945a3c73", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eebc710d2e45b220f462f0f439db7336ec6b4b9d/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eebc710d2e45b220f462f0f439db7336ec6b4b9d/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=eebc710d2e45b220f462f0f439db7336ec6b4b9d", "patch": "@@ -4759,7 +4759,7 @@ read_md5_from_module_file (const char * filename, unsigned char md5[16])\n   if ((file = fopen (filename, \"r\")) == NULL)\n     return -1;\n \n-  /* Read two lines.  */\n+  /* Read the first line.  */\n   if (fgets (buf, sizeof (buf) - 1, file) == NULL)\n     {\n       fclose (file);\n@@ -4769,8 +4769,12 @@ read_md5_from_module_file (const char * filename, unsigned char md5[16])\n   /* The file also needs to be overwritten if the version number changed.  */\n   n = strlen (\"GFORTRAN module version '\" MOD_VERSION \"' created\");\n   if (strncmp (buf, \"GFORTRAN module version '\" MOD_VERSION \"' created\", n) != 0)\n-    return -1;\n+    {\n+      fclose (file);\n+      return -1;\n+    }\n  \n+  /* Read a second line.  */\n   if (fgets (buf, sizeof (buf) - 1, file) == NULL)\n     {\n       fclose (file);"}]}