{"sha": "d0b8780d9f4b5b5b98063995671e44d01712fcf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiODc4MGQ5ZjRiNWI1Yjk4MDYzOTk1NjcxZTQ0ZDAxNzEyZmNmOQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-04-09T15:45:52Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-04-09T15:45:52Z"}, "message": "re PR other/42965 (no \"warnings being treated as errors\" for individual -Werror=x options)\n\n2010-04-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR 42965\n\t* diagnostic.c (diagnostic_initialize): Initialize\n\tsome_warnings_are_errors.\n\t(diagnostic_finish): New.\n\t(diagnostic_action_after_output): Call it before exiting.\n\t(diagnostic_report_diagnostic): Do not print message here. Set\n\tsome_warnings_are_errors.\n\t* diagnostic.h (diagnostic_context): Delete\n\tissue_warnings_are_errors_message. Add some_warnings_are_errors.\n\t(diagnostic_finish): Declare.\n\t* toplev.c (toplev_main): Call it before exit.\ntestsuite/\n\t* gcc.dg/Werror-6.c: Adjust.\n\t* gcc.dg/Werror-implicit-function-declaration.c: Likewise.\n\t* gcc.dg/Werror-4.c: Likewise.\n\t* gcc.dg/Wdeclaration-after-statement-3.c: Likewise.\n\t* gcc.dg/Wswitch-enum-error.c: Likewise.\n\t* gcc.dg/Wpointer-arith.c: Likewise.\n\t* gcc.dg/Wfatal.c: Likewise.\n\t* gcc.dg/Wswitch-error.c: Likewise.\n\t* g++.dg/warn/unused-result1-Werror.c: Likewise.\n\t* gcc.dg/Werror-9.c: Delete. Duplicate of Werror-4.c.\n\t* gcc.dg/cpp/warn-undef-2.c: Likewise.\n\t* gcc.dg/cpp/warn-traditional-2.c: Likewise.\n\t* gcc.dg/cpp/warn-comments-2.c: Likewise.\n\t* gcc.dg/cpp/warn-variadic-2.c: Likewise.\n\t* gcc.dg/cpp/warning-directive-2.c: Likewise.\n\t* gcc.dg/cpp/warn-long-long-2.c: Likewise.\n\t* gcc.dg/cpp/warn-deprecated-2.c: Likewise.\n\t* gcc.dg/cpp/warn-multichar-2.c: Likewise.\n\t* gcc.dg/cpp/warn-normalized-3.c: Likewise.\n\t* gcc.dg/cpp/warn-cxx-compat-2.c: Likewise.\n\t* gcc.dg/cpp/warn-trigraphs-3.c: Likewise.\n\t* gcc.dg/cpp/warn-unused-macros-2.c: Likewise.\n\t* gcc.dg/cpp/warn-trigraphs-4.c: Likewise.\n\t* gcc.dg/cpp/warn-redefined-2.c: Likewise.\n\t* g++.dg/cpp/warning-directive-2.C: Likewise.\n\t* gfortran.dg/warning-directive-2.F90: Likewise.\n\nFrom-SVN: r158168", "tree": {"sha": "33d66ffcfaeb98cc4bfe250d9a22829ba7fb153c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33d66ffcfaeb98cc4bfe250d9a22829ba7fb153c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0b8780d9f4b5b5b98063995671e44d01712fcf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b8780d9f4b5b5b98063995671e44d01712fcf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b8780d9f4b5b5b98063995671e44d01712fcf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b8780d9f4b5b5b98063995671e44d01712fcf9/comments", "author": null, "committer": null, "parents": [{"sha": "cb6addf4a64fca93edee920a0014b73afd80adb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6addf4a64fca93edee920a0014b73afd80adb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb6addf4a64fca93edee920a0014b73afd80adb1"}], "stats": {"total": 166, "additions": 109, "deletions": 57}, "files": [{"sha": "e596c93c76955c4068f9eb55d94d67e9b14e7314", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,3 +1,17 @@\n+2010-04-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 42965\n+\t* diagnostic.c (diagnostic_initialize): Initialize\n+\tsome_warnings_are_errors.\n+\t(diagnostic_finish): New.\n+\t(diagnostic_action_after_output): Call it before exiting.\n+\t(diagnostic_report_diagnostic): Do not print message here. Set\n+\tsome_warnings_are_errors.\n+\t* diagnostic.h (diagnostic_context): Delete\n+\tissue_warnings_are_errors_message. Add some_warnings_are_errors.\n+\t(diagnostic_finish): Declare.\n+\t* toplev.c (toplev_main): Call it before exit.\n+\n 2010-04-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/42623"}, {"sha": "5df458b465e9ba00c45e45f8126826bf24c1d6fc", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -97,7 +97,7 @@ diagnostic_initialize (diagnostic_context *context)\n   context->printer->wrapping.rule = DIAGNOSTICS_SHOW_PREFIX_ONCE;\n \n   memset (context->diagnostic_count, 0, sizeof context->diagnostic_count);\n-  context->issue_warnings_are_errors_message = true;\n+  context->some_warnings_are_errors = false;\n   context->warning_as_error_requested = false;\n   memset (context->classify_diagnostic, DK_UNSPECIFIED,\n \t  sizeof context->classify_diagnostic);\n@@ -112,6 +112,28 @@ diagnostic_initialize (diagnostic_context *context)\n   context->inhibit_notes_p = false;\n }\n \n+/* Do any cleaning up required after the last diagnostic is emitted.  */\n+\n+void\n+diagnostic_finish (diagnostic_context *context)\n+{\n+  /* Some of the errors may actually have been warnings.  */\n+  if (context->some_warnings_are_errors)\n+    {\n+      /* -Werror was given.  */\n+      if (context->warning_as_error_requested)\n+\tpp_verbatim (context->printer,\n+\t\t     _(\"%s: all warnings being treated as errors\\n\"),\n+\t\t     progname);\n+      /* At least one -Werror= was given.  */\n+      else\n+\tpp_verbatim (context->printer,\n+\t\t     _(\"%s: some warnings being treated as errors\\n\"),\n+\t\t     progname);\n+      pp_flush (context->printer);\n+    }\n+}\n+\n /* Initialize DIAGNOSTIC, where the message MSG has already been\n    translated.  */\n void\n@@ -184,6 +206,7 @@ diagnostic_action_after_output (diagnostic_context *context,\n       if (flag_fatal_errors)\n \t{\n \t  fnotice (stderr, \"compilation terminated due to -Wfatal-errors.\\n\");\n+\t  diagnostic_finish (context);\n \t  exit (FATAL_EXIT_CODE);\n \t}\n       break;\n@@ -200,7 +223,7 @@ diagnostic_action_after_output (diagnostic_context *context,\n     case DK_FATAL:\n       if (context->abort_on_error)\n \treal_abort ();\n-\n+      diagnostic_finish (context);\n       fnotice (stderr, \"compilation terminated.\\n\");\n       exit (FATAL_EXIT_CODE);\n \n@@ -309,7 +332,7 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \t\t\t      diagnostic_info *diagnostic)\n {\n   location_t location = diagnostic->location;\n-  bool maybe_print_warnings_as_errors_message = false;\n+  diagnostic_t orig_diag_kind = diagnostic->kind;\n   const char *saved_format_spec;\n \n   /* Give preference to being able to inhibit warnings, before they\n@@ -319,7 +342,11 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n     return false;\n \n   if (diagnostic->kind == DK_PEDWARN)\n-    diagnostic->kind = pedantic_warning_kind ();\n+    {\n+      diagnostic->kind = pedantic_warning_kind ();\n+      /* We do this to avoid giving the message for -pedantic-errors.  */\n+      orig_diag_kind = diagnostic->kind;\n+    }\n  \n   if (diagnostic->kind == DK_NOTE && context->inhibit_notes_p)\n     return false;\n@@ -343,7 +370,6 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n       && diagnostic->kind == DK_WARNING)\n     {\n       diagnostic->kind = DK_ERROR;\n-      maybe_print_warnings_as_errors_message = true;\n     }\n \n   if (diagnostic->option_index)\n@@ -357,23 +383,15 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n       if (context->classify_diagnostic[diagnostic->option_index] != DK_UNSPECIFIED)\n \t{\n \t  diagnostic->kind = context->classify_diagnostic[diagnostic->option_index];\n-\t  maybe_print_warnings_as_errors_message = false;\n \t}\n       /* This allows for future extensions, like temporarily disabling\n \t warnings for ranges of source code.  */\n       if (diagnostic->kind == DK_IGNORED)\n \treturn false;\n     }\n \n-  /* If we changed the kind due to -Werror, and didn't override it, we\n-     need to print this message.  */\n-  if (context->issue_warnings_are_errors_message\n-      && maybe_print_warnings_as_errors_message)\n-    {\n-      pp_verbatim (context->printer,\n-\t\t   \"%s: warnings being treated as errors\\n\", progname);\n-      context->issue_warnings_are_errors_message = false;\n-    }\n+  if (orig_diag_kind == DK_WARNING && diagnostic->kind == DK_ERROR)\n+    context->some_warnings_are_errors = true;\n \n   context->lock++;\n "}, {"sha": "65e8c7f0886996e2f1c679d89e6d72ca2c5a57bf", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -69,7 +69,7 @@ struct diagnostic_context\n \n   /* True if we should display the \"warnings are being tread as error\"\n      message, usually displayed once per compiler run.  */\n-  bool issue_warnings_are_errors_message;\n+  bool some_warnings_are_errors;\n \n   /* True if it has been requested that warnings be treated as errors.  */\n   bool warning_as_error_requested;\n@@ -206,6 +206,7 @@ extern diagnostic_context *global_dc;\n \n /* Diagnostic related functions.  */\n extern void diagnostic_initialize (diagnostic_context *);\n+extern void diagnostic_finish (diagnostic_context *);\n extern void diagnostic_report_current_module (diagnostic_context *);\n extern void diagnostic_report_current_function (diagnostic_context *,\n \t\t\t\t\t\tdiagnostic_info *);"}, {"sha": "b41206a5eec1f383bd6bb16c96c0b73d0856c94f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,3 +1,33 @@\n+2010-04-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 42965\n+\t* gcc.dg/Werror-6.c: Adjust.\n+\t* gcc.dg/Werror-implicit-function-declaration.c: Likewise.\n+\t* gcc.dg/Werror-4.c: Likewise.\n+\t* gcc.dg/Wdeclaration-after-statement-3.c: Likewise.\n+\t* gcc.dg/Wswitch-enum-error.c: Likewise.\n+\t* gcc.dg/Wpointer-arith.c: Likewise.\n+\t* gcc.dg/Wfatal.c: Likewise.\n+\t* gcc.dg/Wswitch-error.c: Likewise.\n+\t* g++.dg/warn/unused-result1-Werror.c: Likewise.\n+\t* gcc.dg/Werror-9.c: Delete. Duplicate of Werror-4.c.\n+\t* gcc.dg/cpp/warn-undef-2.c: Likewise.\n+\t* gcc.dg/cpp/warn-traditional-2.c: Likewise.\n+\t* gcc.dg/cpp/warn-comments-2.c: Likewise.\n+\t* gcc.dg/cpp/warn-variadic-2.c: Likewise.\n+\t* gcc.dg/cpp/warning-directive-2.c: Likewise.\n+\t* gcc.dg/cpp/warn-long-long-2.c: Likewise.\n+\t* gcc.dg/cpp/warn-deprecated-2.c: Likewise.\n+\t* gcc.dg/cpp/warn-multichar-2.c: Likewise.\n+\t* gcc.dg/cpp/warn-normalized-3.c: Likewise.\n+\t* gcc.dg/cpp/warn-cxx-compat-2.c: Likewise.\n+\t* gcc.dg/cpp/warn-trigraphs-3.c: Likewise.\n+\t* gcc.dg/cpp/warn-unused-macros-2.c: Likewise.\n+\t* gcc.dg/cpp/warn-trigraphs-4.c: Likewise.\n+\t* gcc.dg/cpp/warn-redefined-2.c: Likewise.\n+\t* g++.dg/cpp/warning-directive-2.C: Likewise.\n+\t* gfortran.dg/warning-directive-2.F90: Likewise.\n+\n 2010-04-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/42623"}, {"sha": "c2efc172abe0c8cad605f9bc0b33738933490b52", "filename": "gcc/testsuite/g++.dg/cpp/warning-directive-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-2.C?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,4 +1,4 @@\n // { dg-do preprocess }\n // { dg-options \"-fdiagnostics-show-option -Werror=cpp\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n #warning \"Printed\"  // { dg-error \"\\\"Printed\\\" .-Wcpp.\" }"}, {"sha": "fc14469c319d6166d6661f6e7d08d235c21f5d5e", "filename": "gcc/testsuite/g++.dg/warn/unused-result1-Werror.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funused-result1-Werror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funused-result1-Werror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funused-result1-Werror.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,5 +1,6 @@\n // PR 40614\n // { dg-options \"-Werror=unused-result\" }\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n class QByteArray {\n public:\n   QByteArray(const QByteArray &);"}, {"sha": "f001edf203efd6d179cec5b09906ee93af518797", "filename": "gcc/testsuite/gcc.dg/Wdeclaration-after-statement-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWdeclaration-after-statement-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWdeclaration-after-statement-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWdeclaration-after-statement-3.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,7 +1,7 @@\n /* PR 35058: -Werror= works only with some warnings. */\n /* { dg-do compile } */\n /* { dg-options \"-std=c99 -pedantic -Werror=declaration-after-statement\" } */\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n extern void abort (void);\n extern void exit (int);\n "}, {"sha": "73687bef13900f2961365c1e9c36dbf50b2b1b72", "filename": "gcc/testsuite/gcc.dg/Werror-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-4.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,17 +1,17 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wattributes\" } */\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n /* Make sure the pragma enables the error.  */\n \n #pragma GCC diagnostic error \"-Waddress\"\n \n-void __attribute__((dj)) bar() { }\t/* { dg-warning \".* attribute directive ignored\" } */\n+void __attribute__((dj)) bar() { }\t/* { dg-warning \"attribute directive ignored\" } */\n \n int i;\n \n void\n foo ()\n {\n-  if (&i)\t/* { dg-error \".* will always evaluate as 'true'\" } */\n+  if (&i)\t/* { dg-error \"will always evaluate as 'true'\" } */\n     grill ();\n }"}, {"sha": "a99c13b08e008a0052e34ebef7f182d422077900", "filename": "gcc/testsuite/gcc.dg/Werror-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-6.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wattributes -Werror=address\" } */\n-\n-/* Make sure -Werror-foo emits an error and not a warning */\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n+/* Make sure -Werror=foo emits an error and not a warning */\n \n void __attribute__((dj)) bar() { }\t/* { dg-warning \".* attribute directive ignored\" } */\n "}, {"sha": "87051146a5b48fa0e1e582976b3936a547496dd8", "filename": "gcc/testsuite/gcc.dg/Werror-9.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6addf4a64fca93edee920a0014b73afd80adb1/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6addf4a64fca93edee920a0014b73afd80adb1/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-9.c?ref=cb6addf4a64fca93edee920a0014b73afd80adb1", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-Wattributes\" } */\n-\n-/* Make sure #pragma can enable a warning as an error.  */\n-\n-#pragma GCC diagnostic error \"-Waddress\"\n-\n-void __attribute__((dj)) bar() { }\t/* { dg-warning \".* attribute directive ignored\" } */\n-\n-int i;\n-\n-void\n-foo ()\n-{\n-  if (&i)\t/* { dg-error \".* will always evaluate as 'true'\" } */\n-    grill ();\n-}"}, {"sha": "3261fc0d942daee629f543fb10d69331004a0996", "filename": "gcc/testsuite/gcc.dg/Werror-implicit-function-declaration.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-implicit-function-declaration.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-implicit-function-declaration.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWerror-implicit-function-declaration.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,6 +1,7 @@\n+/* Test the legacy option -Werror-implicit-function-declaration */\n /* { dg-do compile } */\n /* { dg-options \"-std=c89 -Werror-implicit-function-declaration\" } */\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n void f(void) \n { \n   puts(\"Hello\"); /* { dg-error \"implicit declaration of function\" } */"}, {"sha": "7ac260bfa6ae9ff2fb4991907ab04bccc4c2b109", "filename": "gcc/testsuite/gcc.dg/Wfatal.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -5,6 +5,7 @@\n int i = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n int k = 1 / 0; /* { dg-error \"division by zero\" } */\n int j = INT_MIN - 1;\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n /* { dg-message \"terminated due to -Wfatal-errors\" \"\" { target *-*-* } 0 } */\n \n "}, {"sha": "2d5b0cee3cd8b13af01ebd7c9abd4edd2743d245", "filename": "gcc/testsuite/gcc.dg/Wpointer-arith.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-arith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-arith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWpointer-arith.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -8,3 +8,4 @@ void *test(){\n   if(a) a++; /* { dg-error \"wrong type argument to increment\" } */\n   return a+x; /* { dg-error \"pointer of type\" } */\n }\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */"}, {"sha": "992684007507badac02d3518fc0f7a81a3fdf9ea", "filename": "gcc/testsuite/gcc.dg/Wswitch-enum-error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum-error.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,7 +1,7 @@\n \n /* { dg-do compile } */\n /* { dg-options \"-Werror=switch-enum -Wswitch\" } */\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n enum e { e1, e2 };\n \n int"}, {"sha": "2fcd1ddd5bd2dc0148ad5c0bd4d2e5b0376e6e81", "filename": "gcc/testsuite/gcc.dg/Wswitch-error.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-error.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -61,3 +61,4 @@ foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n     }\n   return 0;\n }\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */"}, {"sha": "107e6bf1fa230901b9dedd9a17d7330058843b73", "filename": "gcc/testsuite/gcc.dg/cpp/warn-comments-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments-2.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,6 +1,6 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=comments\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n /* /* */  // { dg-error \"\\\"\\.\\*\\\" within comment .-Wcomments.\" }\n \n // \\"}, {"sha": "91cad7cfbebfeddd267745fcc474499c32f595ba", "filename": "gcc/testsuite/gcc.dg/cpp/warn-cxx-compat-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-cxx-compat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-cxx-compat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-cxx-compat-2.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,4 +1,4 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=c++-compat\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n #define not !  // { dg-error \"identifier \\\"not\\\" is a special operator name in C\\\\+\\\\+ .-Wc\\\\+\\\\+-compat.\" }"}, {"sha": "600e2f6a903e406827b4e19dc9a7d1f8cfc35f08", "filename": "gcc/testsuite/gcc.dg/cpp/warn-deprecated-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-deprecated-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-deprecated-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-deprecated-2.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,6 +1,6 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=deprecated\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n #assert x(x)  // { dg-error \"#assert is a deprecated GCC extension .-Wdeprecated.\" }\n \n #if #x(x)     // { dg-error \"assertions are a deprecated extension .-Wdeprecated.\" }"}, {"sha": "08fef13cdb409a211179ea757f318d4630430657", "filename": "gcc/testsuite/gcc.dg/cpp/warn-long-long-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-long-long-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-long-long-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-long-long-2.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,6 +1,6 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wtraditional -Werror=long-long\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n #if 0LL  // { dg-error \"traditional C rejects the \\\"LL\\\" suffix .-Wlong-long.\" }\n          // { dg-error \"use of C99 long long integer constant .-Wlong-long.\" \"use long long\" { target *-*-* } 4 }\n #endif"}, {"sha": "38d3a983dbadba3df8cb88b1179a6b559cc98cee", "filename": "gcc/testsuite/gcc.dg/cpp/warn-multichar-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-multichar-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-multichar-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-multichar-2.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,5 +1,5 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=multichar\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n #if 'abc'  // { dg-error \"multi-character character constant .-Wmultichar.\" }\n #endif"}, {"sha": "2040394a4eff540a4557d6fa685dbd32c2bfb9e4", "filename": "gcc/testsuite/gcc.dg/cpp/warn-normalized-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,5 +1,5 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -fextended-identifiers -Werror=normalized=\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n         // { dg-prune-output \".*-Werror=normalized=: Set -Wnormalized=nfc.*\" }\n \\u0F43  // { dg-error \"`.U00000f43' is not in NFC .-Wnormalized=.\" }"}, {"sha": "b943355c7ba492a86492e2d46afc8990d7fe2fef", "filename": "gcc/testsuite/gcc.dg/cpp/warn-redefined-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-redefined-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-redefined-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-redefined-2.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,6 +1,6 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=builtin-macro-redefined\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n #ifndef __TIME__\n #error \"__TIME__ builtin is not defined\"\n // { dg-bogus \"__TIME__ builtin is not defined\" \"no-time\" { target *-*-* } 5 }"}, {"sha": "5203c28d1e392f95c06761eac9c7c0d4e4ecf185", "filename": "gcc/testsuite/gcc.dg/cpp/warn-traditional-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-traditional-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-traditional-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-traditional-2.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=traditional -Wno-deprecated -Wno-long-long\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n #assert x(x)         // { dg-error \"suggest hiding #assert from traditional C with an indented # .-Wtraditional.\" }\n \n  #define X X         // { dg-error \"traditional C ignores #define with the # indented .-Wtraditional.\" }"}, {"sha": "586c363c6e920bbec1573cd97e5418aa00b4d1eb", "filename": "gcc/testsuite/gcc.dg/cpp/warn-trigraphs-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-3.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,4 +1,4 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -trigraphs -Werror=trigraphs\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n ??=  // { dg-error \"trigraph \\\\?\\\\?= converted to # .-Wtrigraphs.\" }"}, {"sha": "ba0dd516492162c0bb4c0227d7e5dd820ebfea4c", "filename": "gcc/testsuite/gcc.dg/cpp/warn-trigraphs-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-4.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,4 +1,4 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=trigraphs\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n ??=  // { dg-error \"trigraph \\\\?\\\\?= ignored, use -trigraphs to enable .-Wtrigraphs.\" }"}, {"sha": "c9f873174ff3c0fe839fb91337d705b50528fb2d", "filename": "gcc/testsuite/gcc.dg/cpp/warn-undef-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-undef-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-undef-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-undef-2.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,5 +1,5 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=undef\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n #if x  // { dg-error \"\\\"x\\\" is not defined .-Wundef.\" }\n #endif"}, {"sha": "4bd679c81a149b12b0689fdaf0b30c5b3360aa6a", "filename": "gcc/testsuite/gcc.dg/cpp/warn-unused-macros-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-unused-macros-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-unused-macros-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-unused-macros-2.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,4 +1,4 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=unused-macros\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n #define X X  // { dg-error \"macro \\\"X\\\" is not used .-Wunused-macros.\" }"}, {"sha": "8b6d165786bdb5b3a1bb5346f3a94a287e436bda", "filename": "gcc/testsuite/gcc.dg/cpp/warn-variadic-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-variadic-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-variadic-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-variadic-2.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do preprocess } */\n /* { dg-options \"-ansi -fdiagnostics-show-option -pedantic -Werror=variadic-macros\" } */\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n #define F(...) X   /* { dg-error \"anonymous variadic macros were introduced in C99 .-Wvariadic-macros.\" } */\n \n #define G(X...) X  /* { dg-error \"ISO C does not permit named variadic macros .-Wvariadic-macros.\" } */"}, {"sha": "753b84a692ee1d3eda889235235051130e1eef8f", "filename": "gcc/testsuite/gcc.dg/cpp/warning-directive-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-2.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,4 +1,4 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=cpp\" }\n-\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n #warning \"Printed\"  // { dg-error \"\\\"Printed\\\" .-Wcpp.\" }"}, {"sha": "5b40d69f0f17f73395989d415b6d38c2f6901c64", "filename": "gcc/testsuite/gfortran.dg/warning-directive-2.F90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-2.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-2.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-2.F90?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do preprocess }\n ! { dg-options \"-std=f95 -fdiagnostics-show-option -Werror=cpp\" }\n-\n+! { dg-warning \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } \n #warning \"Printed\"\n ! { dg-error \"\\\"Printed\\\" .-Wcpp.\" \"\" { target *-*-* } 4 }"}, {"sha": "996bd900e65a6b9b3d55e83bebba08dafeb2d325", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b8780d9f4b5b5b98063995671e44d01712fcf9/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d0b8780d9f4b5b5b98063995671e44d01712fcf9", "patch": "@@ -2466,6 +2466,7 @@ toplev_main (int argc, char **argv)\n \n   if (warningcount || errorcount)\n     print_ignored_options ();\n+  diagnostic_finish (global_dc);\n \n   /* Invoke registered plugin callbacks if any.  */\n   invoke_plugin_callbacks (PLUGIN_FINISH, NULL);"}]}