{"sha": "85a94e8790198cdafc6f2af8224b273075bab84d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVhOTRlODc5MDE5OGNkYWZjNmYyYWY4MjI0YjI3MzA3NWJhYjg0ZA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-20T11:50:21Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-20T11:50:21Z"}, "message": "[ARM][GCC][7x]: MVE vreinterpretq and vuninitializedq intrinsics.\n\nThis patch supports following MVE ACLE intrinsics.\n\nvreinterpretq_s16_s32, vreinterpretq_s16_s64, vreinterpretq_s16_s8, vreinterpretq_s16_u16,\nvreinterpretq_s16_u32, vreinterpretq_s16_u64, vreinterpretq_s16_u8, vreinterpretq_s32_s16,\nvreinterpretq_s32_s64, vreinterpretq_s32_s8, vreinterpretq_s32_u16, vreinterpretq_s32_u32,\nvreinterpretq_s32_u64, vreinterpretq_s32_u8, vreinterpretq_s64_s16, vreinterpretq_s64_s32,\nvreinterpretq_s64_s8, vreinterpretq_s64_u16, vreinterpretq_s64_u32, vreinterpretq_s64_u64,\nvreinterpretq_s64_u8, vreinterpretq_s8_s16, vreinterpretq_s8_s32, vreinterpretq_s8_s64,\nvreinterpretq_s8_u16, vreinterpretq_s8_u32, vreinterpretq_s8_u64, vreinterpretq_s8_u8,\nvreinterpretq_u16_s16, vreinterpretq_u16_s32, vreinterpretq_u16_s64, vreinterpretq_u16_s8,\nvreinterpretq_u16_u32, vreinterpretq_u16_u64, vreinterpretq_u16_u8, vreinterpretq_u32_s16,\nvreinterpretq_u32_s32, vreinterpretq_u32_s64, vreinterpretq_u32_s8, vreinterpretq_u32_u16,\nvreinterpretq_u32_u64, vreinterpretq_u32_u8, vreinterpretq_u64_s16, vreinterpretq_u64_s32,\nvreinterpretq_u64_s64, vreinterpretq_u64_s8, vreinterpretq_u64_u16, vreinterpretq_u64_u32,\nvreinterpretq_u64_u8, vreinterpretq_u8_s16, vreinterpretq_u8_s32, vreinterpretq_u8_s64,\nvreinterpretq_u8_s8, vreinterpretq_u8_u16, vreinterpretq_u8_u32, vreinterpretq_u8_u64,\nvreinterpretq_s32_f16, vreinterpretq_s32_f32, vreinterpretq_u16_f16, vreinterpretq_u16_f32,\nvreinterpretq_u32_f16, vreinterpretq_u32_f32, vreinterpretq_u64_f16, vreinterpretq_u64_f32,\nvreinterpretq_u8_f16, vreinterpretq_u8_f32, vreinterpretq_f16_f32, vreinterpretq_f16_s16,\nvreinterpretq_f16_s32, vreinterpretq_f16_s64, vreinterpretq_f16_s8, vreinterpretq_f16_u16,\nvreinterpretq_f16_u32, vreinterpretq_f16_u64, vreinterpretq_f16_u8, vreinterpretq_f32_f16,\nvreinterpretq_f32_s16, vreinterpretq_f32_s32, vreinterpretq_f32_s64, vreinterpretq_f32_s8,\nvreinterpretq_f32_u16, vreinterpretq_f32_u32, vreinterpretq_f32_u64, vreinterpretq_f32_u8,\nvreinterpretq_s16_f16, vreinterpretq_s16_f32, vreinterpretq_s64_f16, vreinterpretq_s64_f32,\nvreinterpretq_s8_f16, vreinterpretq_s8_f32, vuninitializedq_u8, vuninitializedq_u16,\nvuninitializedq_u32, vuninitializedq_u64, vuninitializedq_s8, vuninitializedq_s16,\nvuninitializedq_s32, vuninitializedq_s64, vuninitializedq_f16, vuninitializedq_f32 and\nvuninitializedq.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vreinterpretq_s16_s32): Define macro.\n\t(vreinterpretq_s16_s64): Likewise.\n\t(vreinterpretq_s16_s8): Likewise.\n\t(vreinterpretq_s16_u16): Likewise.\n\t(vreinterpretq_s16_u32): Likewise.\n\t(vreinterpretq_s16_u64): Likewise.\n\t(vreinterpretq_s16_u8): Likewise.\n\t(vreinterpretq_s32_s16): Likewise.\n\t(vreinterpretq_s32_s64): Likewise.\n\t(vreinterpretq_s32_s8): Likewise.\n\t(vreinterpretq_s32_u16): Likewise.\n\t(vreinterpretq_s32_u32): Likewise.\n\t(vreinterpretq_s32_u64): Likewise.\n\t(vreinterpretq_s32_u8): Likewise.\n\t(vreinterpretq_s64_s16): Likewise.\n\t(vreinterpretq_s64_s32): Likewise.\n\t(vreinterpretq_s64_s8): Likewise.\n\t(vreinterpretq_s64_u16): Likewise.\n\t(vreinterpretq_s64_u32): Likewise.\n\t(vreinterpretq_s64_u64): Likewise.\n\t(vreinterpretq_s64_u8): Likewise.\n\t(vreinterpretq_s8_s16): Likewise.\n\t(vreinterpretq_s8_s32): Likewise.\n\t(vreinterpretq_s8_s64): Likewise.\n\t(vreinterpretq_s8_u16): Likewise.\n\t(vreinterpretq_s8_u32): Likewise.\n\t(vreinterpretq_s8_u64): Likewise.\n\t(vreinterpretq_s8_u8): Likewise.\n\t(vreinterpretq_u16_s16): Likewise.\n\t(vreinterpretq_u16_s32): Likewise.\n\t(vreinterpretq_u16_s64): Likewise.\n\t(vreinterpretq_u16_s8): Likewise.\n\t(vreinterpretq_u16_u32): Likewise.\n\t(vreinterpretq_u16_u64): Likewise.\n\t(vreinterpretq_u16_u8): Likewise.\n\t(vreinterpretq_u32_s16): Likewise.\n\t(vreinterpretq_u32_s32): Likewise.\n\t(vreinterpretq_u32_s64): Likewise.\n\t(vreinterpretq_u32_s8): Likewise.\n\t(vreinterpretq_u32_u16): Likewise.\n\t(vreinterpretq_u32_u64): Likewise.\n\t(vreinterpretq_u32_u8): Likewise.\n\t(vreinterpretq_u64_s16): Likewise.\n\t(vreinterpretq_u64_s32): Likewise.\n\t(vreinterpretq_u64_s64): Likewise.\n\t(vreinterpretq_u64_s8): Likewise.\n\t(vreinterpretq_u64_u16): Likewise.\n\t(vreinterpretq_u64_u32): Likewise.\n\t(vreinterpretq_u64_u8): Likewise.\n\t(vreinterpretq_u8_s16): Likewise.\n\t(vreinterpretq_u8_s32): Likewise.\n\t(vreinterpretq_u8_s64): Likewise.\n\t(vreinterpretq_u8_s8): Likewise.\n\t(vreinterpretq_u8_u16): Likewise.\n\t(vreinterpretq_u8_u32): Likewise.\n\t(vreinterpretq_u8_u64): Likewise.\n\t(vreinterpretq_s32_f16): Likewise.\n\t(vreinterpretq_s32_f32): Likewise.\n\t(vreinterpretq_u16_f16): Likewise.\n\t(vreinterpretq_u16_f32): Likewise.\n\t(vreinterpretq_u32_f16): Likewise.\n\t(vreinterpretq_u32_f32): Likewise.\n\t(vreinterpretq_u64_f16): Likewise.\n\t(vreinterpretq_u64_f32): Likewise.\n\t(vreinterpretq_u8_f16): Likewise.\n\t(vreinterpretq_u8_f32): Likewise.\n\t(vreinterpretq_f16_f32): Likewise.\n\t(vreinterpretq_f16_s16): Likewise.\n\t(vreinterpretq_f16_s32): Likewise.\n\t(vreinterpretq_f16_s64): Likewise.\n\t(vreinterpretq_f16_s8): Likewise.\n\t(vreinterpretq_f16_u16): Likewise.\n\t(vreinterpretq_f16_u32): Likewise.\n\t(vreinterpretq_f16_u64): Likewise.\n\t(vreinterpretq_f16_u8): Likewise.\n\t(vreinterpretq_f32_f16): Likewise.\n\t(vreinterpretq_f32_s16): Likewise.\n\t(vreinterpretq_f32_s32): Likewise.\n\t(vreinterpretq_f32_s64): Likewise.\n\t(vreinterpretq_f32_s8): Likewise.\n\t(vreinterpretq_f32_u16): Likewise.\n\t(vreinterpretq_f32_u32): Likewise.\n\t(vreinterpretq_f32_u64): Likewise.\n\t(vreinterpretq_f32_u8): Likewise.\n\t(vreinterpretq_s16_f16): Likewise.\n\t(vreinterpretq_s16_f32): Likewise.\n\t(vreinterpretq_s64_f16): Likewise.\n\t(vreinterpretq_s64_f32): Likewise.\n\t(vreinterpretq_s8_f16): Likewise.\n\t(vreinterpretq_s8_f32): Likewise.\n\t(vuninitializedq_u8): Likewise.\n\t(vuninitializedq_u16): Likewise.\n\t(vuninitializedq_u32): Likewise.\n\t(vuninitializedq_u64): Likewise.\n\t(vuninitializedq_s8): Likewise.\n\t(vuninitializedq_s16): Likewise.\n\t(vuninitializedq_s32): Likewise.\n\t(vuninitializedq_s64): Likewise.\n\t(vuninitializedq_f16): Likewise.\n\t(vuninitializedq_f32): Likewise.\n\t(__arm_vuninitializedq_u8): Define intrinsic.\n\t(__arm_vuninitializedq_u16): Likewise.\n\t(__arm_vuninitializedq_u32): Likewise.\n\t(__arm_vuninitializedq_u64): Likewise.\n\t(__arm_vuninitializedq_s8): Likewise.\n\t(__arm_vuninitializedq_s16): Likewise.\n\t(__arm_vuninitializedq_s32): Likewise.\n\t(__arm_vuninitializedq_s64): Likewise.\n\t(__arm_vreinterpretq_s16_s32): Likewise.\n\t(__arm_vreinterpretq_s16_s64): Likewise.\n\t(__arm_vreinterpretq_s16_s8): Likewise.\n\t(__arm_vreinterpretq_s16_u16): Likewise.\n\t(__arm_vreinterpretq_s16_u32): Likewise.\n\t(__arm_vreinterpretq_s16_u64): Likewise.\n\t(__arm_vreinterpretq_s16_u8): Likewise.\n\t(__arm_vreinterpretq_s32_s16): Likewise.\n\t(__arm_vreinterpretq_s32_s64): Likewise.\n\t(__arm_vreinterpretq_s32_s8): Likewise.\n\t(__arm_vreinterpretq_s32_u16): Likewise.\n\t(__arm_vreinterpretq_s32_u32): Likewise.\n\t(__arm_vreinterpretq_s32_u64): Likewise.\n\t(__arm_vreinterpretq_s32_u8): Likewise.\n\t(__arm_vreinterpretq_s64_s16): Likewise.\n\t(__arm_vreinterpretq_s64_s32): Likewise.\n\t(__arm_vreinterpretq_s64_s8): Likewise.\n\t(__arm_vreinterpretq_s64_u16): Likewise.\n\t(__arm_vreinterpretq_s64_u32): Likewise.\n\t(__arm_vreinterpretq_s64_u64): Likewise.\n\t(__arm_vreinterpretq_s64_u8): Likewise.\n\t(__arm_vreinterpretq_s8_s16): Likewise.\n\t(__arm_vreinterpretq_s8_s32): Likewise.\n\t(__arm_vreinterpretq_s8_s64): Likewise.\n\t(__arm_vreinterpretq_s8_u16): Likewise.\n\t(__arm_vreinterpretq_s8_u32): Likewise.\n\t(__arm_vreinterpretq_s8_u64): Likewise.\n\t(__arm_vreinterpretq_s8_u8): Likewise.\n\t(__arm_vreinterpretq_u16_s16): Likewise.\n\t(__arm_vreinterpretq_u16_s32): Likewise.\n\t(__arm_vreinterpretq_u16_s64): Likewise.\n\t(__arm_vreinterpretq_u16_s8): Likewise.\n\t(__arm_vreinterpretq_u16_u32): Likewise.\n\t(__arm_vreinterpretq_u16_u64): Likewise.\n\t(__arm_vreinterpretq_u16_u8): Likewise.\n\t(__arm_vreinterpretq_u32_s16): Likewise.\n\t(__arm_vreinterpretq_u32_s32): Likewise.\n\t(__arm_vreinterpretq_u32_s64): Likewise.\n\t(__arm_vreinterpretq_u32_s8): Likewise.\n\t(__arm_vreinterpretq_u32_u16): Likewise.\n\t(__arm_vreinterpretq_u32_u64): Likewise.\n\t(__arm_vreinterpretq_u32_u8): Likewise.\n\t(__arm_vreinterpretq_u64_s16): Likewise.\n\t(__arm_vreinterpretq_u64_s32): Likewise.\n\t(__arm_vreinterpretq_u64_s64): Likewise.\n\t(__arm_vreinterpretq_u64_s8): Likewise.\n\t(__arm_vreinterpretq_u64_u16): Likewise.\n\t(__arm_vreinterpretq_u64_u32): Likewise.\n\t(__arm_vreinterpretq_u64_u8): Likewise.\n\t(__arm_vreinterpretq_u8_s16): Likewise.\n\t(__arm_vreinterpretq_u8_s32): Likewise.\n\t(__arm_vreinterpretq_u8_s64): Likewise.\n\t(__arm_vreinterpretq_u8_s8): Likewise.\n\t(__arm_vreinterpretq_u8_u16): Likewise.\n\t(__arm_vreinterpretq_u8_u32): Likewise.\n\t(__arm_vreinterpretq_u8_u64): Likewise.\n\t(__arm_vuninitializedq_f16): Likewise.\n\t(__arm_vuninitializedq_f32): Likewise.\n\t(__arm_vreinterpretq_s32_f16): Likewise.\n\t(__arm_vreinterpretq_s32_f32): Likewise.\n\t(__arm_vreinterpretq_s16_f16): Likewise.\n\t(__arm_vreinterpretq_s16_f32): Likewise.\n\t(__arm_vreinterpretq_s64_f16): Likewise.\n\t(__arm_vreinterpretq_s64_f32): Likewise.\n\t(__arm_vreinterpretq_s8_f16): Likewise.\n\t(__arm_vreinterpretq_s8_f32): Likewise.\n\t(__arm_vreinterpretq_u16_f16): Likewise.\n\t(__arm_vreinterpretq_u16_f32): Likewise.\n\t(__arm_vreinterpretq_u32_f16): Likewise.\n\t(__arm_vreinterpretq_u32_f32): Likewise.\n\t(__arm_vreinterpretq_u64_f16): Likewise.\n\t(__arm_vreinterpretq_u64_f32): Likewise.\n\t(__arm_vreinterpretq_u8_f16): Likewise.\n\t(__arm_vreinterpretq_u8_f32): Likewise.\n\t(__arm_vreinterpretq_f16_f32): Likewise.\n\t(__arm_vreinterpretq_f16_s16): Likewise.\n\t(__arm_vreinterpretq_f16_s32): Likewise.\n\t(__arm_vreinterpretq_f16_s64): Likewise.\n\t(__arm_vreinterpretq_f16_s8): Likewise.\n\t(__arm_vreinterpretq_f16_u16): Likewise.\n\t(__arm_vreinterpretq_f16_u32): Likewise.\n\t(__arm_vreinterpretq_f16_u64): Likewise.\n\t(__arm_vreinterpretq_f16_u8): Likewise.\n\t(__arm_vreinterpretq_f32_f16): Likewise.\n\t(__arm_vreinterpretq_f32_s16): Likewise.\n\t(__arm_vreinterpretq_f32_s32): Likewise.\n\t(__arm_vreinterpretq_f32_s64): Likewise.\n\t(__arm_vreinterpretq_f32_s8): Likewise.\n\t(__arm_vreinterpretq_f32_u16): Likewise.\n\t(__arm_vreinterpretq_f32_u32): Likewise.\n\t(__arm_vreinterpretq_f32_u64): Likewise.\n\t(__arm_vreinterpretq_f32_u8): Likewise.\n\t(vuninitializedq): Define polymorphic variant.\n\t(vreinterpretq_f16): Likewise.\n\t(vreinterpretq_f32): Likewise.\n\t(vreinterpretq_s16): Likewise.\n\t(vreinterpretq_s32): Likewise.\n\t(vreinterpretq_s64): Likewise.\n\t(vreinterpretq_s8): Likewise.\n\t(vreinterpretq_u16): Likewise.\n\t(vreinterpretq_u32): Likewise.\n\t(vreinterpretq_u64): Likewise.\n\t(vreinterpretq_u8): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_float.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_float1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_int.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_int1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vreinterpretq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vreinterpretq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vreinterpretq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vreinterpretq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vreinterpretq_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vreinterpretq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vreinterpretq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vreinterpretq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vreinterpretq_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vreinterpretq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_float.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_float1.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_int.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vuninitializedq_int1.c: Likewise.", "tree": {"sha": "51f6c6980e9d55b62821fddf6c23a0499aa86f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51f6c6980e9d55b62821fddf6c23a0499aa86f0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85a94e8790198cdafc6f2af8224b273075bab84d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a94e8790198cdafc6f2af8224b273075bab84d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a94e8790198cdafc6f2af8224b273075bab84d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a94e8790198cdafc6f2af8224b273075bab84d/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4"}], "stats": {"total": 1844, "additions": 1844, "deletions": 0}, "files": [{"sha": "55b5b0860ad68ad5a05ee78bf154835ffad8f74b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -1,3 +1,217 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (vreinterpretq_s16_s32): Define macro.\n+\t(vreinterpretq_s16_s64): Likewise.\n+\t(vreinterpretq_s16_s8): Likewise.\n+\t(vreinterpretq_s16_u16): Likewise.\n+\t(vreinterpretq_s16_u32): Likewise.\n+\t(vreinterpretq_s16_u64): Likewise.\n+\t(vreinterpretq_s16_u8): Likewise.\n+\t(vreinterpretq_s32_s16): Likewise.\n+\t(vreinterpretq_s32_s64): Likewise.\n+\t(vreinterpretq_s32_s8): Likewise.\n+\t(vreinterpretq_s32_u16): Likewise.\n+\t(vreinterpretq_s32_u32): Likewise.\n+\t(vreinterpretq_s32_u64): Likewise.\n+\t(vreinterpretq_s32_u8): Likewise.\n+\t(vreinterpretq_s64_s16): Likewise.\n+\t(vreinterpretq_s64_s32): Likewise.\n+\t(vreinterpretq_s64_s8): Likewise.\n+\t(vreinterpretq_s64_u16): Likewise.\n+\t(vreinterpretq_s64_u32): Likewise.\n+\t(vreinterpretq_s64_u64): Likewise.\n+\t(vreinterpretq_s64_u8): Likewise.\n+\t(vreinterpretq_s8_s16): Likewise.\n+\t(vreinterpretq_s8_s32): Likewise.\n+\t(vreinterpretq_s8_s64): Likewise.\n+\t(vreinterpretq_s8_u16): Likewise.\n+\t(vreinterpretq_s8_u32): Likewise.\n+\t(vreinterpretq_s8_u64): Likewise.\n+\t(vreinterpretq_s8_u8): Likewise.\n+\t(vreinterpretq_u16_s16): Likewise.\n+\t(vreinterpretq_u16_s32): Likewise.\n+\t(vreinterpretq_u16_s64): Likewise.\n+\t(vreinterpretq_u16_s8): Likewise.\n+\t(vreinterpretq_u16_u32): Likewise.\n+\t(vreinterpretq_u16_u64): Likewise.\n+\t(vreinterpretq_u16_u8): Likewise.\n+\t(vreinterpretq_u32_s16): Likewise.\n+\t(vreinterpretq_u32_s32): Likewise.\n+\t(vreinterpretq_u32_s64): Likewise.\n+\t(vreinterpretq_u32_s8): Likewise.\n+\t(vreinterpretq_u32_u16): Likewise.\n+\t(vreinterpretq_u32_u64): Likewise.\n+\t(vreinterpretq_u32_u8): Likewise.\n+\t(vreinterpretq_u64_s16): Likewise.\n+\t(vreinterpretq_u64_s32): Likewise.\n+\t(vreinterpretq_u64_s64): Likewise.\n+\t(vreinterpretq_u64_s8): Likewise.\n+\t(vreinterpretq_u64_u16): Likewise.\n+\t(vreinterpretq_u64_u32): Likewise.\n+\t(vreinterpretq_u64_u8): Likewise.\n+\t(vreinterpretq_u8_s16): Likewise.\n+\t(vreinterpretq_u8_s32): Likewise.\n+\t(vreinterpretq_u8_s64): Likewise.\n+\t(vreinterpretq_u8_s8): Likewise.\n+\t(vreinterpretq_u8_u16): Likewise.\n+\t(vreinterpretq_u8_u32): Likewise.\n+\t(vreinterpretq_u8_u64): Likewise.\n+\t(vreinterpretq_s32_f16): Likewise.\n+\t(vreinterpretq_s32_f32): Likewise.\n+\t(vreinterpretq_u16_f16): Likewise.\n+\t(vreinterpretq_u16_f32): Likewise.\n+\t(vreinterpretq_u32_f16): Likewise.\n+\t(vreinterpretq_u32_f32): Likewise.\n+\t(vreinterpretq_u64_f16): Likewise.\n+\t(vreinterpretq_u64_f32): Likewise.\n+\t(vreinterpretq_u8_f16): Likewise.\n+\t(vreinterpretq_u8_f32): Likewise.\n+\t(vreinterpretq_f16_f32): Likewise.\n+\t(vreinterpretq_f16_s16): Likewise.\n+\t(vreinterpretq_f16_s32): Likewise.\n+\t(vreinterpretq_f16_s64): Likewise.\n+\t(vreinterpretq_f16_s8): Likewise.\n+\t(vreinterpretq_f16_u16): Likewise.\n+\t(vreinterpretq_f16_u32): Likewise.\n+\t(vreinterpretq_f16_u64): Likewise.\n+\t(vreinterpretq_f16_u8): Likewise.\n+\t(vreinterpretq_f32_f16): Likewise.\n+\t(vreinterpretq_f32_s16): Likewise.\n+\t(vreinterpretq_f32_s32): Likewise.\n+\t(vreinterpretq_f32_s64): Likewise.\n+\t(vreinterpretq_f32_s8): Likewise.\n+\t(vreinterpretq_f32_u16): Likewise.\n+\t(vreinterpretq_f32_u32): Likewise.\n+\t(vreinterpretq_f32_u64): Likewise.\n+\t(vreinterpretq_f32_u8): Likewise.\n+\t(vreinterpretq_s16_f16): Likewise.\n+\t(vreinterpretq_s16_f32): Likewise.\n+\t(vreinterpretq_s64_f16): Likewise.\n+\t(vreinterpretq_s64_f32): Likewise.\n+\t(vreinterpretq_s8_f16): Likewise.\n+\t(vreinterpretq_s8_f32): Likewise.\n+\t(vuninitializedq_u8): Likewise.\n+\t(vuninitializedq_u16): Likewise.\n+\t(vuninitializedq_u32): Likewise.\n+\t(vuninitializedq_u64): Likewise.\n+\t(vuninitializedq_s8): Likewise.\n+\t(vuninitializedq_s16): Likewise.\n+\t(vuninitializedq_s32): Likewise.\n+\t(vuninitializedq_s64): Likewise.\n+\t(vuninitializedq_f16): Likewise.\n+\t(vuninitializedq_f32): Likewise.\n+\t(__arm_vuninitializedq_u8): Define intrinsic.\n+\t(__arm_vuninitializedq_u16): Likewise.\n+\t(__arm_vuninitializedq_u32): Likewise.\n+\t(__arm_vuninitializedq_u64): Likewise.\n+\t(__arm_vuninitializedq_s8): Likewise.\n+\t(__arm_vuninitializedq_s16): Likewise.\n+\t(__arm_vuninitializedq_s32): Likewise.\n+\t(__arm_vuninitializedq_s64): Likewise.\n+\t(__arm_vreinterpretq_s16_s32): Likewise.\n+\t(__arm_vreinterpretq_s16_s64): Likewise.\n+\t(__arm_vreinterpretq_s16_s8): Likewise.\n+\t(__arm_vreinterpretq_s16_u16): Likewise.\n+\t(__arm_vreinterpretq_s16_u32): Likewise.\n+\t(__arm_vreinterpretq_s16_u64): Likewise.\n+\t(__arm_vreinterpretq_s16_u8): Likewise.\n+\t(__arm_vreinterpretq_s32_s16): Likewise.\n+\t(__arm_vreinterpretq_s32_s64): Likewise.\n+\t(__arm_vreinterpretq_s32_s8): Likewise.\n+\t(__arm_vreinterpretq_s32_u16): Likewise.\n+\t(__arm_vreinterpretq_s32_u32): Likewise.\n+\t(__arm_vreinterpretq_s32_u64): Likewise.\n+\t(__arm_vreinterpretq_s32_u8): Likewise.\n+\t(__arm_vreinterpretq_s64_s16): Likewise.\n+\t(__arm_vreinterpretq_s64_s32): Likewise.\n+\t(__arm_vreinterpretq_s64_s8): Likewise.\n+\t(__arm_vreinterpretq_s64_u16): Likewise.\n+\t(__arm_vreinterpretq_s64_u32): Likewise.\n+\t(__arm_vreinterpretq_s64_u64): Likewise.\n+\t(__arm_vreinterpretq_s64_u8): Likewise.\n+\t(__arm_vreinterpretq_s8_s16): Likewise.\n+\t(__arm_vreinterpretq_s8_s32): Likewise.\n+\t(__arm_vreinterpretq_s8_s64): Likewise.\n+\t(__arm_vreinterpretq_s8_u16): Likewise.\n+\t(__arm_vreinterpretq_s8_u32): Likewise.\n+\t(__arm_vreinterpretq_s8_u64): Likewise.\n+\t(__arm_vreinterpretq_s8_u8): Likewise.\n+\t(__arm_vreinterpretq_u16_s16): Likewise.\n+\t(__arm_vreinterpretq_u16_s32): Likewise.\n+\t(__arm_vreinterpretq_u16_s64): Likewise.\n+\t(__arm_vreinterpretq_u16_s8): Likewise.\n+\t(__arm_vreinterpretq_u16_u32): Likewise.\n+\t(__arm_vreinterpretq_u16_u64): Likewise.\n+\t(__arm_vreinterpretq_u16_u8): Likewise.\n+\t(__arm_vreinterpretq_u32_s16): Likewise.\n+\t(__arm_vreinterpretq_u32_s32): Likewise.\n+\t(__arm_vreinterpretq_u32_s64): Likewise.\n+\t(__arm_vreinterpretq_u32_s8): Likewise.\n+\t(__arm_vreinterpretq_u32_u16): Likewise.\n+\t(__arm_vreinterpretq_u32_u64): Likewise.\n+\t(__arm_vreinterpretq_u32_u8): Likewise.\n+\t(__arm_vreinterpretq_u64_s16): Likewise.\n+\t(__arm_vreinterpretq_u64_s32): Likewise.\n+\t(__arm_vreinterpretq_u64_s64): Likewise.\n+\t(__arm_vreinterpretq_u64_s8): Likewise.\n+\t(__arm_vreinterpretq_u64_u16): Likewise.\n+\t(__arm_vreinterpretq_u64_u32): Likewise.\n+\t(__arm_vreinterpretq_u64_u8): Likewise.\n+\t(__arm_vreinterpretq_u8_s16): Likewise.\n+\t(__arm_vreinterpretq_u8_s32): Likewise.\n+\t(__arm_vreinterpretq_u8_s64): Likewise.\n+\t(__arm_vreinterpretq_u8_s8): Likewise.\n+\t(__arm_vreinterpretq_u8_u16): Likewise.\n+\t(__arm_vreinterpretq_u8_u32): Likewise.\n+\t(__arm_vreinterpretq_u8_u64): Likewise.\n+\t(__arm_vuninitializedq_f16): Likewise.\n+\t(__arm_vuninitializedq_f32): Likewise.\n+\t(__arm_vreinterpretq_s32_f16): Likewise.\n+\t(__arm_vreinterpretq_s32_f32): Likewise.\n+\t(__arm_vreinterpretq_s16_f16): Likewise.\n+\t(__arm_vreinterpretq_s16_f32): Likewise.\n+\t(__arm_vreinterpretq_s64_f16): Likewise.\n+\t(__arm_vreinterpretq_s64_f32): Likewise.\n+\t(__arm_vreinterpretq_s8_f16): Likewise.\n+\t(__arm_vreinterpretq_s8_f32): Likewise.\n+\t(__arm_vreinterpretq_u16_f16): Likewise.\n+\t(__arm_vreinterpretq_u16_f32): Likewise.\n+\t(__arm_vreinterpretq_u32_f16): Likewise.\n+\t(__arm_vreinterpretq_u32_f32): Likewise.\n+\t(__arm_vreinterpretq_u64_f16): Likewise.\n+\t(__arm_vreinterpretq_u64_f32): Likewise.\n+\t(__arm_vreinterpretq_u8_f16): Likewise.\n+\t(__arm_vreinterpretq_u8_f32): Likewise.\n+\t(__arm_vreinterpretq_f16_f32): Likewise.\n+\t(__arm_vreinterpretq_f16_s16): Likewise.\n+\t(__arm_vreinterpretq_f16_s32): Likewise.\n+\t(__arm_vreinterpretq_f16_s64): Likewise.\n+\t(__arm_vreinterpretq_f16_s8): Likewise.\n+\t(__arm_vreinterpretq_f16_u16): Likewise.\n+\t(__arm_vreinterpretq_f16_u32): Likewise.\n+\t(__arm_vreinterpretq_f16_u64): Likewise.\n+\t(__arm_vreinterpretq_f16_u8): Likewise.\n+\t(__arm_vreinterpretq_f32_f16): Likewise.\n+\t(__arm_vreinterpretq_f32_s16): Likewise.\n+\t(__arm_vreinterpretq_f32_s32): Likewise.\n+\t(__arm_vreinterpretq_f32_s64): Likewise.\n+\t(__arm_vreinterpretq_f32_s8): Likewise.\n+\t(__arm_vreinterpretq_f32_u16): Likewise.\n+\t(__arm_vreinterpretq_f32_u32): Likewise.\n+\t(__arm_vreinterpretq_f32_u64): Likewise.\n+\t(__arm_vreinterpretq_f32_u8): Likewise.\n+\t(vuninitializedq): Define polymorphic variant.\n+\t(vreinterpretq_f16): Likewise.\n+\t(vreinterpretq_f32): Likewise.\n+\t(vreinterpretq_s16): Likewise.\n+\t(vreinterpretq_s32): Likewise.\n+\t(vreinterpretq_s64): Likewise.\n+\t(vreinterpretq_s8): Likewise.\n+\t(vreinterpretq_u16): Likewise.\n+\t(vreinterpretq_u32): Likewise.\n+\t(vreinterpretq_u64): Likewise.\n+\t(vreinterpretq_u8): Likewise.\n+\n 2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n             Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>"}, {"sha": "916565c9b55bae77869669fd1e8f8b7f4a37b52e", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 1065, "deletions": 0, "changes": 1065, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -1906,6 +1906,106 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vaddq_u32(__a, __b) __arm_vaddq_u32(__a, __b)\n #define vaddq_f16(__a, __b) __arm_vaddq_f16(__a, __b)\n #define vaddq_f32(__a, __b) __arm_vaddq_f32(__a, __b)\n+#define vreinterpretq_s16_s32(__a) __arm_vreinterpretq_s16_s32(__a)\n+#define vreinterpretq_s16_s64(__a) __arm_vreinterpretq_s16_s64(__a)\n+#define vreinterpretq_s16_s8(__a) __arm_vreinterpretq_s16_s8(__a)\n+#define vreinterpretq_s16_u16(__a) __arm_vreinterpretq_s16_u16(__a)\n+#define vreinterpretq_s16_u32(__a) __arm_vreinterpretq_s16_u32(__a)\n+#define vreinterpretq_s16_u64(__a) __arm_vreinterpretq_s16_u64(__a)\n+#define vreinterpretq_s16_u8(__a) __arm_vreinterpretq_s16_u8(__a)\n+#define vreinterpretq_s32_s16(__a) __arm_vreinterpretq_s32_s16(__a)\n+#define vreinterpretq_s32_s64(__a) __arm_vreinterpretq_s32_s64(__a)\n+#define vreinterpretq_s32_s8(__a) __arm_vreinterpretq_s32_s8(__a)\n+#define vreinterpretq_s32_u16(__a) __arm_vreinterpretq_s32_u16(__a)\n+#define vreinterpretq_s32_u32(__a) __arm_vreinterpretq_s32_u32(__a)\n+#define vreinterpretq_s32_u64(__a) __arm_vreinterpretq_s32_u64(__a)\n+#define vreinterpretq_s32_u8(__a) __arm_vreinterpretq_s32_u8(__a)\n+#define vreinterpretq_s64_s16(__a) __arm_vreinterpretq_s64_s16(__a)\n+#define vreinterpretq_s64_s32(__a) __arm_vreinterpretq_s64_s32(__a)\n+#define vreinterpretq_s64_s8(__a) __arm_vreinterpretq_s64_s8(__a)\n+#define vreinterpretq_s64_u16(__a) __arm_vreinterpretq_s64_u16(__a)\n+#define vreinterpretq_s64_u32(__a) __arm_vreinterpretq_s64_u32(__a)\n+#define vreinterpretq_s64_u64(__a) __arm_vreinterpretq_s64_u64(__a)\n+#define vreinterpretq_s64_u8(__a) __arm_vreinterpretq_s64_u8(__a)\n+#define vreinterpretq_s8_s16(__a) __arm_vreinterpretq_s8_s16(__a)\n+#define vreinterpretq_s8_s32(__a) __arm_vreinterpretq_s8_s32(__a)\n+#define vreinterpretq_s8_s64(__a) __arm_vreinterpretq_s8_s64(__a)\n+#define vreinterpretq_s8_u16(__a) __arm_vreinterpretq_s8_u16(__a)\n+#define vreinterpretq_s8_u32(__a) __arm_vreinterpretq_s8_u32(__a)\n+#define vreinterpretq_s8_u64(__a) __arm_vreinterpretq_s8_u64(__a)\n+#define vreinterpretq_s8_u8(__a) __arm_vreinterpretq_s8_u8(__a)\n+#define vreinterpretq_u16_s16(__a) __arm_vreinterpretq_u16_s16(__a)\n+#define vreinterpretq_u16_s32(__a) __arm_vreinterpretq_u16_s32(__a)\n+#define vreinterpretq_u16_s64(__a) __arm_vreinterpretq_u16_s64(__a)\n+#define vreinterpretq_u16_s8(__a) __arm_vreinterpretq_u16_s8(__a)\n+#define vreinterpretq_u16_u32(__a) __arm_vreinterpretq_u16_u32(__a)\n+#define vreinterpretq_u16_u64(__a) __arm_vreinterpretq_u16_u64(__a)\n+#define vreinterpretq_u16_u8(__a) __arm_vreinterpretq_u16_u8(__a)\n+#define vreinterpretq_u32_s16(__a) __arm_vreinterpretq_u32_s16(__a)\n+#define vreinterpretq_u32_s32(__a) __arm_vreinterpretq_u32_s32(__a)\n+#define vreinterpretq_u32_s64(__a) __arm_vreinterpretq_u32_s64(__a)\n+#define vreinterpretq_u32_s8(__a) __arm_vreinterpretq_u32_s8(__a)\n+#define vreinterpretq_u32_u16(__a) __arm_vreinterpretq_u32_u16(__a)\n+#define vreinterpretq_u32_u64(__a) __arm_vreinterpretq_u32_u64(__a)\n+#define vreinterpretq_u32_u8(__a) __arm_vreinterpretq_u32_u8(__a)\n+#define vreinterpretq_u64_s16(__a) __arm_vreinterpretq_u64_s16(__a)\n+#define vreinterpretq_u64_s32(__a) __arm_vreinterpretq_u64_s32(__a)\n+#define vreinterpretq_u64_s64(__a) __arm_vreinterpretq_u64_s64(__a)\n+#define vreinterpretq_u64_s8(__a) __arm_vreinterpretq_u64_s8(__a)\n+#define vreinterpretq_u64_u16(__a) __arm_vreinterpretq_u64_u16(__a)\n+#define vreinterpretq_u64_u32(__a) __arm_vreinterpretq_u64_u32(__a)\n+#define vreinterpretq_u64_u8(__a) __arm_vreinterpretq_u64_u8(__a)\n+#define vreinterpretq_u8_s16(__a) __arm_vreinterpretq_u8_s16(__a)\n+#define vreinterpretq_u8_s32(__a) __arm_vreinterpretq_u8_s32(__a)\n+#define vreinterpretq_u8_s64(__a) __arm_vreinterpretq_u8_s64(__a)\n+#define vreinterpretq_u8_s8(__a) __arm_vreinterpretq_u8_s8(__a)\n+#define vreinterpretq_u8_u16(__a) __arm_vreinterpretq_u8_u16(__a)\n+#define vreinterpretq_u8_u32(__a) __arm_vreinterpretq_u8_u32(__a)\n+#define vreinterpretq_u8_u64(__a) __arm_vreinterpretq_u8_u64(__a)\n+#define vreinterpretq_s32_f16(__a) __arm_vreinterpretq_s32_f16(__a)\n+#define vreinterpretq_s32_f32(__a) __arm_vreinterpretq_s32_f32(__a)\n+#define vreinterpretq_u16_f16(__a) __arm_vreinterpretq_u16_f16(__a)\n+#define vreinterpretq_u16_f32(__a) __arm_vreinterpretq_u16_f32(__a)\n+#define vreinterpretq_u32_f16(__a) __arm_vreinterpretq_u32_f16(__a)\n+#define vreinterpretq_u32_f32(__a) __arm_vreinterpretq_u32_f32(__a)\n+#define vreinterpretq_u64_f16(__a) __arm_vreinterpretq_u64_f16(__a)\n+#define vreinterpretq_u64_f32(__a) __arm_vreinterpretq_u64_f32(__a)\n+#define vreinterpretq_u8_f16(__a) __arm_vreinterpretq_u8_f16(__a)\n+#define vreinterpretq_u8_f32(__a) __arm_vreinterpretq_u8_f32(__a)\n+#define vreinterpretq_f16_f32(__a) __arm_vreinterpretq_f16_f32(__a)\n+#define vreinterpretq_f16_s16(__a) __arm_vreinterpretq_f16_s16(__a)\n+#define vreinterpretq_f16_s32(__a) __arm_vreinterpretq_f16_s32(__a)\n+#define vreinterpretq_f16_s64(__a) __arm_vreinterpretq_f16_s64(__a)\n+#define vreinterpretq_f16_s8(__a) __arm_vreinterpretq_f16_s8(__a)\n+#define vreinterpretq_f16_u16(__a) __arm_vreinterpretq_f16_u16(__a)\n+#define vreinterpretq_f16_u32(__a) __arm_vreinterpretq_f16_u32(__a)\n+#define vreinterpretq_f16_u64(__a) __arm_vreinterpretq_f16_u64(__a)\n+#define vreinterpretq_f16_u8(__a) __arm_vreinterpretq_f16_u8(__a)\n+#define vreinterpretq_f32_f16(__a) __arm_vreinterpretq_f32_f16(__a)\n+#define vreinterpretq_f32_s16(__a) __arm_vreinterpretq_f32_s16(__a)\n+#define vreinterpretq_f32_s32(__a) __arm_vreinterpretq_f32_s32(__a)\n+#define vreinterpretq_f32_s64(__a) __arm_vreinterpretq_f32_s64(__a)\n+#define vreinterpretq_f32_s8(__a) __arm_vreinterpretq_f32_s8(__a)\n+#define vreinterpretq_f32_u16(__a) __arm_vreinterpretq_f32_u16(__a)\n+#define vreinterpretq_f32_u32(__a) __arm_vreinterpretq_f32_u32(__a)\n+#define vreinterpretq_f32_u64(__a) __arm_vreinterpretq_f32_u64(__a)\n+#define vreinterpretq_f32_u8(__a) __arm_vreinterpretq_f32_u8(__a)\n+#define vreinterpretq_s16_f16(__a) __arm_vreinterpretq_s16_f16(__a)\n+#define vreinterpretq_s16_f32(__a) __arm_vreinterpretq_s16_f32(__a)\n+#define vreinterpretq_s64_f16(__a) __arm_vreinterpretq_s64_f16(__a)\n+#define vreinterpretq_s64_f32(__a) __arm_vreinterpretq_s64_f32(__a)\n+#define vreinterpretq_s8_f16(__a) __arm_vreinterpretq_s8_f16(__a)\n+#define vreinterpretq_s8_f32(__a) __arm_vreinterpretq_s8_f32(__a)\n+#define vuninitializedq_u8(void) __arm_vuninitializedq_u8(void)\n+#define vuninitializedq_u16(void) __arm_vuninitializedq_u16(void)\n+#define vuninitializedq_u32(void) __arm_vuninitializedq_u32(void)\n+#define vuninitializedq_u64(void) __arm_vuninitializedq_u64(void)\n+#define vuninitializedq_s8(void) __arm_vuninitializedq_s8(void)\n+#define vuninitializedq_s16(void) __arm_vuninitializedq_s16(void)\n+#define vuninitializedq_s32(void) __arm_vuninitializedq_s32(void)\n+#define vuninitializedq_s64(void) __arm_vuninitializedq_s64(void)\n+#define vuninitializedq_f16(void) __arm_vuninitializedq_f16(void)\n+#define vuninitializedq_f32(void) __arm_vuninitializedq_f32(void)\n #endif\n \n __extension__ extern __inline void\n@@ -12391,6 +12491,471 @@ __arm_vaddq_u32 (uint32x4_t __a, uint32x4_t __b)\n   return __a + __b;\n }\n \n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_u8 (void)\n+{\n+  uint8x16_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_u16 (void)\n+{\n+  uint16x8_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_u32 (void)\n+{\n+  uint32x4_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_u64 (void)\n+{\n+  uint64x2_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_s8 (void)\n+{\n+  int8x16_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_s16 (void)\n+{\n+  int16x8_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_s32 (void)\n+{\n+  int32x4_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_s64 (void)\n+{\n+  int64x2_t __uninit;\n+  __asm__ (\"\": \"=w\"(__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_s32 (int32x4_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_s64 (int64x2_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_s8 (int8x16_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_u16 (uint16x8_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_u32 (uint32x4_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_u64 (uint64x2_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_u8 (uint8x16_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_s16 (int16x8_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_s64 (int64x2_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_s8 (int8x16_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_u16 (uint16x8_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_u32 (uint32x4_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_u64 (uint64x2_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_u8 (uint8x16_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_s16 (int16x8_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_s32 (int32x4_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_s8 (int8x16_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_u16 (uint16x8_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_u32 (uint32x4_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_u64 (uint64x2_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_u8 (uint8x16_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_s16 (int16x8_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_s32 (int32x4_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_s64 (int64x2_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_u16 (uint16x8_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_u32 (uint32x4_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_u64 (uint64x2_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_u8 (uint8x16_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_s16 (int16x8_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_s32 (int32x4_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_s64 (int64x2_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_s8 (int8x16_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_u32 (uint32x4_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_u64 (uint64x2_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_u8 (uint8x16_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_s16 (int16x8_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_s32 (int32x4_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_s64 (int64x2_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_s8 (int8x16_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_u16 (uint16x8_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_u64 (uint64x2_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_u8 (uint8x16_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_s16 (int16x8_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_s32 (int32x4_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_s64 (int64x2_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_s8 (int8x16_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_u16 (uint16x8_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_u32 (uint32x4_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_u8 (uint8x16_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_s16 (int16x8_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_s32 (int32x4_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_s64 (int64x2_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_s8 (int8x16_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_u16 (uint16x8_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_u32 (uint32x4_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_u64 (uint64x2_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -14771,6 +15336,262 @@ __arm_vaddq_f32 (float32x4_t __a, float32x4_t __b)\n   return __a + __b;\n }\n \n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_f16 (void)\n+{\n+  float16x8_t __uninit;\n+  __asm__ (\"\": \"=w\" (__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vuninitializedq_f32 (void)\n+{\n+  float32x4_t __uninit;\n+  __asm__ (\"\": \"=w\" (__uninit));\n+  return __uninit;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_f16 (float16x8_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s32_f32 (float32x4_t __a)\n+{\n+  return (int32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_f16 (float16x8_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s16_f32 (float32x4_t __a)\n+{\n+  return (int16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_f16 (float16x8_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s64_f32 (float32x4_t __a)\n+{\n+  return (int64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_f16 (float16x8_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_s8_f32 (float32x4_t __a)\n+{\n+  return (int8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_f16 (float16x8_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u16_f32 (float32x4_t __a)\n+{\n+  return (uint16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_f16 (float16x8_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u32_f32 (float32x4_t __a)\n+{\n+  return (uint32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_f16 (float16x8_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u64_f32 (float32x4_t __a)\n+{\n+  return (uint64x2_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_f16 (float16x8_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_u8_f32 (float32x4_t __a)\n+{\n+  return (uint8x16_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_f32 (float32x4_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_s16 (int16x8_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_s32 (int32x4_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_s64 (int64x2_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_s8 (int8x16_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_u16 (uint16x8_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_u32 (uint32x4_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_u64 (uint64x2_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f16_u8 (uint8x16_t __a)\n+{\n+  return (float16x8_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_f16 (float16x8_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_s16 (int16x8_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_s32 (int32x4_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_s64 (int64x2_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_s8 (int8x16_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_u16 (uint16x8_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_u32 (uint32x4_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_u64 (uint64x2_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vreinterpretq_f32_u8 (uint8x16_t __a)\n+{\n+  return (float32x4_t)  __a;\n+}\n+\n #endif\n \n enum {\n@@ -17543,6 +18364,150 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_shifted_offset_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t)), \\\n   int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4_t]: __arm_vstrwq_scatter_shifted_offset_f32 (__ARM_mve_coerce(__p0, float32_t *), __p1, __ARM_mve_coerce(__p2, float32x4_t)));})\n \n+#define vuninitializedq(p0) __arm_vuninitializedq(p0)\n+#define __arm_vuninitializedq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vuninitializedq_s8 (), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vuninitializedq_s16 (), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vuninitializedq_s32 (), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vuninitializedq_s64 (), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vuninitializedq_u8 (), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vuninitializedq_u16 (), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vuninitializedq_u32 (), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vuninitializedq_u64 (), \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vuninitializedq_f16 (), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vuninitializedq_f32 ());})\n+\n+#define vreinterpretq_f16(p0) __arm_vreinterpretq_f16(p0)\n+#define __arm_vreinterpretq_f16(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_f16_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_f16_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_f16_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_f16_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_f16_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_f16_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_f16_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_f16_u64 (__ARM_mve_coerce(__p0, uint64x2_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vreinterpretq_f16_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vreinterpretq_f32(p0) __arm_vreinterpretq_f32(p0)\n+#define __arm_vreinterpretq_f32(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_f32_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_f32_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_f32_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_f32_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_f32_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_f32_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_f32_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_f32_u64 (__ARM_mve_coerce(__p0, uint64x2_t)), \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vreinterpretq_f32_f16 (__ARM_mve_coerce(__p0, float16x8_t)));})\n+\n+#define vreinterpretq_s16(p0) __arm_vreinterpretq_s16(p0)\n+#define __arm_vreinterpretq_s16(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vreinterpretq_s16_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_s16_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_s16_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_s16_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_s16_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_s16_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_s16_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_s16_u64 (__ARM_mve_coerce(__p0, uint64x2_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vreinterpretq_s16_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vreinterpretq_s32(p0) __arm_vreinterpretq_s32(p0)\n+#define __arm_vreinterpretq_s32(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vreinterpretq_s32_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_s32_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_s32_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_s32_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_s32_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_s32_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_s32_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_s32_u64 (__ARM_mve_coerce(__p0, uint64x2_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vreinterpretq_s32_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vreinterpretq_s64(p0) __arm_vreinterpretq_s64(p0)\n+#define __arm_vreinterpretq_s64(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vreinterpretq_s64_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_s64_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_s64_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_s64_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_s64_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_s64_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_s64_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_s64_u64 (__ARM_mve_coerce(__p0, uint64x2_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vreinterpretq_s64_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vreinterpretq_s8(p0) __arm_vreinterpretq_s8(p0)\n+#define __arm_vreinterpretq_s8(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vreinterpretq_s8_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_s8_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_s8_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_s8_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_s8_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_s8_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_s8_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_s8_u64 (__ARM_mve_coerce(__p0, uint64x2_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vreinterpretq_s8_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vreinterpretq_u16(p0) __arm_vreinterpretq_u16(p0)\n+#define __arm_vreinterpretq_u16(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vreinterpretq_u16_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_u16_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_u16_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_u16_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_u16_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_u16_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_u16_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_u16_u64 (__ARM_mve_coerce(__p0, uint64x2_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vreinterpretq_u16_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vreinterpretq_u32(p0) __arm_vreinterpretq_u32(p0)\n+#define __arm_vreinterpretq_u32(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vreinterpretq_u32_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_u32_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_u32_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_u32_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_u32_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_u32_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_u32_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_u32_u64 (__ARM_mve_coerce(__p0, uint64x2_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vreinterpretq_u32_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vreinterpretq_u64(p0) __arm_vreinterpretq_u64(p0)\n+#define __arm_vreinterpretq_u64(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vreinterpretq_u64_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_u64_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_u64_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_u64_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_u64_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_u64_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_u64_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_u64_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vreinterpretq_u64_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n+#define vreinterpretq_u8(p0) __arm_vreinterpretq_u8(p0)\n+#define __arm_vreinterpretq_u8(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vreinterpretq_u8_f16 (__ARM_mve_coerce(__p0, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_u8_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_u8_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_u8_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_u8_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_u8_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_u8_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_u8_u64 (__ARM_mve_coerce(__p0, uint64x2_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vreinterpretq_u8_f32 (__ARM_mve_coerce(__p0, float32x4_t)));})\n+\n #else /* MVE Integer.  */\n \n #define vst4q(p0,p1) __arm_vst4q(p0,p1)\n@@ -19925,6 +20890,106 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4_t]: __arm_vstrwq_scatter_shifted_offset_p_s32 (__ARM_mve_coerce(__p0, int32_t *), __p1, __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4_t]: __arm_vstrwq_scatter_shifted_offset_p_u32 (__ARM_mve_coerce(__p0, uint32_t *), __p1, __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n \n+#define vuninitializedq(p0) __arm_vuninitializedq(p0)\n+#define __arm_vuninitializedq(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vuninitializedq_s8 (), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vuninitializedq_s16 (), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vuninitializedq_s32 (), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vuninitializedq_s64 (), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vuninitializedq_u8 (), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vuninitializedq_u16 (), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vuninitializedq_u32 (), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vuninitializedq_u64 ());})\n+\n+#define vreinterpretq_s16(p0) __arm_vreinterpretq_s16(p0)\n+#define __arm_vreinterpretq_s16(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_s16_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_s16_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_s16_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_s16_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_s16_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_s16_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_s16_u64 (__ARM_mve_coerce(__p0, uint64x2_t)));})\n+\n+#define vreinterpretq_s32(p0) __arm_vreinterpretq_s32(p0)\n+#define __arm_vreinterpretq_s32(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_s32_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_s32_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_s32_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_s32_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_s32_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_s32_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_s32_u64 (__ARM_mve_coerce(__p0, uint64x2_t)));})\n+\n+#define vreinterpretq_s64(p0) __arm_vreinterpretq_s64(p0)\n+#define __arm_vreinterpretq_s64(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_s64_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_s64_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_s64_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_s64_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_s64_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_s64_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_s64_u64 (__ARM_mve_coerce(__p0, uint64x2_t)));})\n+\n+#define vreinterpretq_s8(p0) __arm_vreinterpretq_s8(p0)\n+#define __arm_vreinterpretq_s8(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_s8_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_s8_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_s8_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_s8_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_s8_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_s8_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_s8_u64 (__ARM_mve_coerce(__p0, uint64x2_t)));})\n+\n+#define vreinterpretq_u16(p0) __arm_vreinterpretq_u16(p0)\n+#define __arm_vreinterpretq_u16(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_u16_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_u16_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_u16_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_u16_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_u16_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_u16_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_u16_u64 (__ARM_mve_coerce(__p0, uint64x2_t)));})\n+\n+#define vreinterpretq_u32(p0) __arm_vreinterpretq_u32(p0)\n+#define __arm_vreinterpretq_u32(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_u32_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_u32_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_u32_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_u32_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_u32_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_u32_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_u32_u64 (__ARM_mve_coerce(__p0, uint64x2_t)));})\n+\n+#define vreinterpretq_u64(p0) __arm_vreinterpretq_u64(p0)\n+#define __arm_vreinterpretq_u64(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_u64_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_u64_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_u64_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vreinterpretq_u64_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_u64_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_u64_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_u64_s64 (__ARM_mve_coerce(__p0, int64x2_t)));})\n+\n+#define vreinterpretq_u8(p0) __arm_vreinterpretq_u8(p0)\n+#define __arm_vreinterpretq_u8(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vreinterpretq_u8_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vreinterpretq_u8_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vreinterpretq_u8_s64 (__ARM_mve_coerce(__p0, int64x2_t)), \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vreinterpretq_u8_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vreinterpretq_u8_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vreinterpretq_u8_u32 (__ARM_mve_coerce(__p0, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vreinterpretq_u8_u64 (__ARM_mve_coerce(__p0, uint64x2_t)));})\n+\n #endif /* MVE Integer.  */\n \n #define vldrdq_gather_offset(p0,p1) __arm_vldrdq_gather_offset(p0,p1)"}, {"sha": "52008db50bb0cb82926588fffe35239c458308ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -1,3 +1,24 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vuninitializedq_float.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vuninitializedq_float1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vuninitializedq_int.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vuninitializedq_int1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vreinterpretq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vuninitializedq_float.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vuninitializedq_float1.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vuninitializedq_int.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vuninitializedq_int1.c: Likewise.\n+\n 2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n             Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>"}, {"sha": "bc40440296522a96a7c6fb0a7732c735ea37b266", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vreinterpretq_f16.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_f16.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int8x16_t value1;\n+int64x2_t value2;\n+int32x4_t value3;\n+uint8x16_t value4;\n+uint16x8_t value5;\n+uint64x2_t value6;\n+uint32x4_t value7;\n+int16x8_t value8;\n+float32x4_t value9;\n+\n+float16x8_t\n+foo ()\n+{\n+  float16x8_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_f16 (vreinterpretq_f16_s8 (value1), vreinterpretq_f16_s64 (value2));\n+  r2 = vaddq_f16 (r1, vreinterpretq_f16_s32 (value3));\n+  r3 = vaddq_f16 (r2, vreinterpretq_f16_u8 (value4));\n+  r4 = vaddq_f16 (r3, vreinterpretq_f16_u16 (value5));\n+  r5 = vaddq_f16 (r4, vreinterpretq_f16_u64 (value6));\n+  r6 = vaddq_f16 (r5, vreinterpretq_f16_u32 (value7));\n+  r7 = vaddq_f16 (r6, vreinterpretq_f16_s16 (value8));\n+  return vaddq_f16 (r7, vreinterpretq_f16_f32 (value9));\n+}\n+\n+float16x8_t\n+foo1 ()\n+{\n+  float16x8_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_f16 (vreinterpretq_f16 (value1), vreinterpretq_f16 (value2));\n+  r2 = vaddq_f16 (r1, vreinterpretq_f16 (value3));\n+  r3 = vaddq_f16 (r2, vreinterpretq_f16 (value4));\n+  r4 = vaddq_f16 (r3, vreinterpretq_f16 (value5));\n+  r5 = vaddq_f16 (r4, vreinterpretq_f16 (value6));\n+  r6 = vaddq_f16 (r5, vreinterpretq_f16 (value7));\n+  r7 = vaddq_f16 (r6, vreinterpretq_f16 (value8));\n+  return vaddq_f16 (r7, vreinterpretq_f16 (value9));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vadd.f16\" 8 } } */"}, {"sha": "d30818b0f3d896f7e9f30227b8578f90d2731209", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vreinterpretq_f32.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_f32.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int16x8_t value1;\n+int64x2_t value2;\n+int8x16_t value3;\n+uint8x16_t value4;\n+uint16x8_t value5;\n+uint64x2_t value6;\n+uint32x4_t value7;\n+float16x8_t value8;\n+int32x4_t value9;\n+\n+float32x4_t\n+foo ()\n+{\n+  float32x4_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_f32 (vreinterpretq_f32_s16 (value1), vreinterpretq_f32_s64 (value2));\n+  r2 = vaddq_f32 (r1, vreinterpretq_f32_s8 (value3));\n+  r3 = vaddq_f32 (r2, vreinterpretq_f32_u8 (value4));\n+  r4 = vaddq_f32 (r3, vreinterpretq_f32_u16 (value5));\n+  r5 = vaddq_f32 (r4, vreinterpretq_f32_u64 (value6));\n+  r6 = vaddq_f32 (r5, vreinterpretq_f32_u32 (value7));\n+  r7 = vaddq_f32 (r6, vreinterpretq_f32_f16 (value8));\n+  return vaddq_f32 (r7, vreinterpretq_f32_s32 (value9));\n+}\n+\n+float32x4_t\n+foo1 ()\n+{\n+  float32x4_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_f32 (vreinterpretq_f32 (value1), vreinterpretq_f32 (value2));\n+  r2 = vaddq_f32 (r1, vreinterpretq_f32 (value3));\n+  r3 = vaddq_f32 (r2, vreinterpretq_f32 (value4));\n+  r4 = vaddq_f32 (r3, vreinterpretq_f32 (value5));\n+  r5 = vaddq_f32 (r4, vreinterpretq_f32 (value6));\n+  r6 = vaddq_f32 (r5, vreinterpretq_f32 (value7));\n+  r7 = vaddq_f32 (r6, vreinterpretq_f32 (value8));\n+  return vaddq_f32 (r7, vreinterpretq_f32 (value9));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vadd.f32\" 8 } } */"}, {"sha": "627a9d8de7c7ac850c3b9f1049057264d908b34d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vreinterpretq_s16.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_s16.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int8x16_t value1;\n+int64x2_t value2;\n+int32x4_t value3;\n+uint8x16_t value4;\n+uint16x8_t value5;\n+uint64x2_t value6;\n+uint32x4_t value7;\n+float16x8_t value8;\n+float32x4_t value9;\n+\n+int16x8_t\n+foo ()\n+{\n+  int16x8_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_s16 (vreinterpretq_s16_s8 (value1), vreinterpretq_s16_s64 (value2));\n+  r2 = vaddq_s16 (r1, vreinterpretq_s16_s32 (value3));\n+  r3 = vaddq_s16 (r2, vreinterpretq_s16_u8 (value4));\n+  r4 = vaddq_s16 (r3, vreinterpretq_s16_u16 (value5));\n+  r5 = vaddq_s16 (r4, vreinterpretq_s16_u64 (value6));\n+  r6 = vaddq_s16 (r5, vreinterpretq_s16_u32 (value7));\n+  r7 = vaddq_s16 (r6, vreinterpretq_s16_f16 (value8));\n+  return vaddq_s16 (r7, vreinterpretq_s16_f32 (value9));\n+}\n+\n+int16x8_t\n+foo1 ()\n+{\n+  int16x8_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_s16 (vreinterpretq_s16 (value1), vreinterpretq_s16 (value2));\n+  r2 = vaddq_s16 (r1, vreinterpretq_s16 (value3));\n+  r3 = vaddq_s16 (r2, vreinterpretq_s16 (value4));\n+  r4 = vaddq_s16 (r3, vreinterpretq_s16 (value5));\n+  r5 = vaddq_s16 (r4, vreinterpretq_s16 (value6));\n+  r6 = vaddq_s16 (r5, vreinterpretq_s16 (value7));\n+  r7 = vaddq_s16 (r6, vreinterpretq_s16 (value8));\n+  return vaddq_s16 (r7, vreinterpretq_s16 (value9));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vadd.i16\" 8 } } */"}, {"sha": "1b905e1095348e1e4376e0ef695f4b607a29f8b0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vreinterpretq_s32.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_s32.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int16x8_t value1;\n+int64x2_t value2;\n+int8x16_t value3;\n+uint8x16_t value4;\n+uint16x8_t value5;\n+uint64x2_t value6;\n+uint32x4_t value7;\n+float16x8_t value8;\n+float32x4_t value9;\n+\n+int32x4_t\n+foo ()\n+{\n+  int32x4_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_s32 (vreinterpretq_s32_s16 (value1), vreinterpretq_s32_s64 (value2));\n+  r2 = vaddq_s32 (r1, vreinterpretq_s32_s8 (value3));\n+  r3 = vaddq_s32 (r2, vreinterpretq_s32_u8 (value4));\n+  r4 = vaddq_s32 (r3, vreinterpretq_s32_u16 (value5));\n+  r5 = vaddq_s32 (r4, vreinterpretq_s32_u64 (value6));\n+  r6 = vaddq_s32 (r5, vreinterpretq_s32_u32 (value7));\n+  r7 = vaddq_s32 (r6, vreinterpretq_s32_f16 (value8));\n+  return vaddq_s32 (r7, vreinterpretq_s32_f32 (value9));\n+}\n+\n+int32x4_t\n+foo1 ()\n+{\n+  int32x4_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_s32 (vreinterpretq_s32 (value1), vreinterpretq_s32 (value2));\n+  r2 = vaddq_s32 (r1, vreinterpretq_s32 (value3));\n+  r3 = vaddq_s32 (r2, vreinterpretq_s32 (value4));\n+  r4 = vaddq_s32 (r3, vreinterpretq_s32 (value5));\n+  r5 = vaddq_s32 (r4, vreinterpretq_s32 (value6));\n+  r6 = vaddq_s32 (r5, vreinterpretq_s32 (value7));\n+  r7 = vaddq_s32 (r6, vreinterpretq_s32 (value8));\n+  return vaddq_s32 (r7, vreinterpretq_s32 (value9));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vadd.i32\" 8 } } */"}, {"sha": "3a9fa0b414c202c77890e0cf061102b19fb7e623", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vreinterpretq_s64.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_s64.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int16x8_t value1;\n+int8x16_t value2;\n+int32x4_t value3;\n+uint8x16_t value4;\n+uint16x8_t value5;\n+uint64x2_t value6;\n+uint32x4_t value7;\n+float16x8_t value8;\n+float32x4_t value9;\n+\n+int64x2_t\n+foo (mve_pred16_t __p)\n+{\n+  int64x2_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vpselq_s64 (vreinterpretq_s64_s16 (value1), vreinterpretq_s64_s8 (value2),\n+\t\t   __p);\n+  r2 = vpselq_s64 (r1, vreinterpretq_s64_s32 (value3), __p);\n+  r3 = vpselq_s64 (r2, vreinterpretq_s64_u8 (value4), __p);\n+  r4 = vpselq_s64 (r3, vreinterpretq_s64_u16 (value5), __p);\n+  r5 = vpselq_s64 (r4, vreinterpretq_s64_u64 (value6), __p);\n+  r6 = vpselq_s64 (r5, vreinterpretq_s64_u32 (value7), __p);\n+  r7 = vpselq_s64 (r6, vreinterpretq_s64_f16 (value8), __p);\n+  return vpselq_s64 (r7, vreinterpretq_s64_f32 (value9), __p);\n+}\n+\n+int64x2_t\n+foo1 (mve_pred16_t __p)\n+{\n+  int64x2_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vpselq_s64 (vreinterpretq_s64 (value1), vreinterpretq_s64 (value2), __p);\n+  r2 = vpselq_s64 (r1, vreinterpretq_s64 (value3), __p);\n+  r3 = vpselq_s64 (r2, vreinterpretq_s64 (value4), __p);\n+  r4 = vpselq_s64 (r3, vreinterpretq_s64 (value5), __p);\n+  r5 = vpselq_s64 (r4, vreinterpretq_s64 (value6), __p);\n+  r6 = vpselq_s64 (r5, vreinterpretq_s64 (value7), __p);\n+  r7 = vpselq_s64 (r6, vreinterpretq_s64 (value8), __p);\n+  return vpselq_s64 (r7, vreinterpretq_s64 (value9), __p);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpsel\" 8 } } */"}, {"sha": "522a935c72f81bad63bdf2f56db135fc4261c766", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vreinterpretq_s8.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_s8.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int16x8_t value1;\n+int64x2_t value2;\n+int32x4_t value3;\n+uint8x16_t value4;\n+uint16x8_t value5;\n+uint64x2_t value6;\n+uint32x4_t value7;\n+float16x8_t value8;\n+float32x4_t value9;\n+\n+int8x16_t\n+foo ()\n+{\n+  int8x16_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_s8 (vreinterpretq_s8_s16 (value1), vreinterpretq_s8_s64 (value2));\n+  r2 = vaddq_s8 (r1, vreinterpretq_s8_s32 (value3));\n+  r3 = vaddq_s8 (r2, vreinterpretq_s8_u8 (value4));\n+  r4 = vaddq_s8 (r3, vreinterpretq_s8_u16 (value5));\n+  r5 = vaddq_s8 (r4, vreinterpretq_s8_u64 (value6));\n+  r6 = vaddq_s8 (r5, vreinterpretq_s8_u32 (value7));\n+  r7 = vaddq_s8 (r6, vreinterpretq_s8_f16 (value8));\n+  return vaddq_s8 (r7, vreinterpretq_s8_f32 (value9));\n+}\n+\n+int8x16_t\n+foo1 ()\n+{\n+  int8x16_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_s8 (vreinterpretq_s8 (value1), vreinterpretq_s8 (value2));\n+  r2 = vaddq_s8 (r1, vreinterpretq_s8 (value3));\n+  r3 = vaddq_s8 (r2, vreinterpretq_s8 (value4));\n+  r4 = vaddq_s8 (r3, vreinterpretq_s8 (value5));\n+  r5 = vaddq_s8 (r4, vreinterpretq_s8 (value6));\n+  r6 = vaddq_s8 (r5, vreinterpretq_s8 (value7));\n+  r7 = vaddq_s8 (r6, vreinterpretq_s8 (value8));\n+  return vaddq_s8 (r7, vreinterpretq_s8 (value9));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vadd.i8\" 8 } } */"}, {"sha": "402c0ef61df85be4115f14fdf195548ecd15b25f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vreinterpretq_u16.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_u16.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int8x16_t value1;\n+int64x2_t value2;\n+int32x4_t value3;\n+uint8x16_t value4;\n+int16x8_t value5;\n+uint64x2_t value6;\n+uint32x4_t value7;\n+float16x8_t value8;\n+float32x4_t value9;\n+\n+uint16x8_t\n+foo ()\n+{\n+  uint16x8_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_u16 (vreinterpretq_u16_s8 (value1), vreinterpretq_u16_s64 (value2));\n+  r2 = vaddq_u16 (r1, vreinterpretq_u16_s32 (value3));\n+  r3 = vaddq_u16 (r2, vreinterpretq_u16_u8 (value4));\n+  r4 = vaddq_u16 (r3, vreinterpretq_u16_s16 (value5));\n+  r5 = vaddq_u16 (r4, vreinterpretq_u16_u64 (value6));\n+  r6 = vaddq_u16 (r5, vreinterpretq_u16_u32 (value7));\n+  r7 = vaddq_u16 (r6, vreinterpretq_u16_f16 (value8));\n+  return vaddq_u16 (r7, vreinterpretq_u16_f32 (value9));\n+}\n+\n+uint16x8_t\n+foo1 ()\n+{\n+  uint16x8_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_u16 (vreinterpretq_u16 (value1), vreinterpretq_u16 (value2));\n+  r2 = vaddq_u16 (r1, vreinterpretq_u16 (value3));\n+  r3 = vaddq_u16 (r2, vreinterpretq_u16 (value4));\n+  r4 = vaddq_u16 (r3, vreinterpretq_u16 (value5));\n+  r5 = vaddq_u16 (r4, vreinterpretq_u16 (value6));\n+  r6 = vaddq_u16 (r5, vreinterpretq_u16 (value7));\n+  r7 = vaddq_u16 (r6, vreinterpretq_u16 (value8));\n+  return vaddq_u16 (r7, vreinterpretq_u16 (value9));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vadd.i16\" 8 } } */"}, {"sha": "985d776831e7235002a62e88ba9bdf128e31bfd9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vreinterpretq_u32.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_u32.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int16x8_t value1;\n+int64x2_t value2;\n+int8x16_t value3;\n+uint8x16_t value4;\n+uint16x8_t value5;\n+uint64x2_t value6;\n+int32x4_t value7;\n+float16x8_t value8;\n+float32x4_t value9;\n+\n+uint32x4_t\n+foo ()\n+{\n+  uint32x4_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_u32 (vreinterpretq_u32_s16 (value1), vreinterpretq_u32_s64 (value2));\n+  r2 = vaddq_u32 (r1, vreinterpretq_u32_s8 (value3));\n+  r3 = vaddq_u32 (r2, vreinterpretq_u32_u8 (value4));\n+  r4 = vaddq_u32 (r3, vreinterpretq_u32_u16 (value5));\n+  r5 = vaddq_u32 (r4, vreinterpretq_u32_u64 (value6));\n+  r6 = vaddq_u32 (r5, vreinterpretq_u32_s32 (value7));\n+  r7 = vaddq_u32 (r6, vreinterpretq_u32_f16 (value8));\n+  return vaddq_u32 (r7, vreinterpretq_u32_f32 (value9));\n+}\n+\n+uint32x4_t\n+foo1 ()\n+{\n+  uint32x4_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_u32 (vreinterpretq_u32 (value1), vreinterpretq_u32 (value2));\n+  r2 = vaddq_u32 (r1, vreinterpretq_u32 (value3));\n+  r3 = vaddq_u32 (r2, vreinterpretq_u32 (value4));\n+  r4 = vaddq_u32 (r3, vreinterpretq_u32 (value5));\n+  r5 = vaddq_u32 (r4, vreinterpretq_u32 (value6));\n+  r6 = vaddq_u32 (r5, vreinterpretq_u32 (value7));\n+  r7 = vaddq_u32 (r6, vreinterpretq_u32 (value8));\n+  return vaddq_u32 (r7, vreinterpretq_u32 (value9));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vadd.i32\" 8 } } */"}, {"sha": "e77d253a993d13bd17b107fd68f0149c7714742a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vreinterpretq_u64.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_u64.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int16x8_t value1;\n+int8x16_t value2;\n+int32x4_t value3;\n+uint8x16_t value4;\n+uint16x8_t value5;\n+int64x2_t value6;\n+uint32x4_t value7;\n+float16x8_t value8;\n+float32x4_t value9;\n+\n+uint64x2_t\n+foo (mve_pred16_t __p)\n+{\n+  uint64x2_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vpselq_u64 (vreinterpretq_u64_s16 (value1), vreinterpretq_u64_s8 (value2),\n+\t\t   __p);\n+  r2 = vpselq_u64 (r1, vreinterpretq_u64_s32 (value3), __p);\n+  r3 = vpselq_u64 (r2, vreinterpretq_u64_u8 (value4), __p);\n+  r4 = vpselq_u64 (r3, vreinterpretq_u64_u16 (value5), __p);\n+  r5 = vpselq_u64 (r4, vreinterpretq_u64_s64 (value6), __p);\n+  r6 = vpselq_u64 (r5, vreinterpretq_u64_u32 (value7), __p);\n+  r7 = vpselq_u64 (r6, vreinterpretq_u64_f16 (value8), __p);\n+  return vpselq_u64 (r7, vreinterpretq_u64_f32 (value9), __p);\n+}\n+\n+uint64x2_t\n+foo1 (mve_pred16_t __p)\n+{\n+  uint64x2_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vpselq_u64 (vreinterpretq_u64 (value1), vreinterpretq_u64 (value2), __p);\n+  r2 = vpselq_u64 (r1, vreinterpretq_u64 (value3), __p);\n+  r3 = vpselq_u64 (r2, vreinterpretq_u64 (value4), __p);\n+  r4 = vpselq_u64 (r3, vreinterpretq_u64 (value5), __p);\n+  r5 = vpselq_u64 (r4, vreinterpretq_u64 (value6), __p);\n+  r6 = vpselq_u64 (r5, vreinterpretq_u64 (value7), __p);\n+  r7 = vpselq_u64 (r6, vreinterpretq_u64 (value8), __p);\n+  return vpselq_u64 (r7, vreinterpretq_u64 (value9), __p);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpsel\" 8 } } */"}, {"sha": "9075dea900899dd599df565aa4f5a7c0c9be2a2d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vreinterpretq_u8.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvreinterpretq_u8.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+int16x8_t value1;\n+int64x2_t value2;\n+int32x4_t value3;\n+int8x16_t value4;\n+uint16x8_t value5;\n+uint64x2_t value6;\n+uint32x4_t value7;\n+float16x8_t value8;\n+float32x4_t value9;\n+\n+uint8x16_t\n+foo ()\n+{\n+  uint8x16_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_u8 (vreinterpretq_u8_s16 (value1), vreinterpretq_u8_s64 (value2));\n+  r2 = vaddq_u8 (r1, vreinterpretq_u8_s32 (value3));\n+  r3 = vaddq_u8 (r2, vreinterpretq_u8_s8 (value4));\n+  r4 = vaddq_u8 (r3, vreinterpretq_u8_u16 (value5));\n+  r5 = vaddq_u8 (r4, vreinterpretq_u8_u64 (value6));\n+  r6 = vaddq_u8 (r5, vreinterpretq_u8_u32 (value7));\n+  r7 = vaddq_u8 (r6, vreinterpretq_u8_f16 (value8));\n+  return vaddq_u8 (r7, vreinterpretq_u8_f32 (value9));\n+}\n+\n+uint8x16_t\n+foo1 ()\n+{\n+  uint8x16_t r1,r2,r3,r4,r5,r6,r7;\n+  r1 = vaddq_u8 (vreinterpretq_u8 (value1), vreinterpretq_u8 (value2));\n+  r2 = vaddq_u8 (r1, vreinterpretq_u8 (value3));\n+  r3 = vaddq_u8 (r2, vreinterpretq_u8 (value4));\n+  r4 = vaddq_u8 (r3, vreinterpretq_u8 (value5));\n+  r5 = vaddq_u8 (r4, vreinterpretq_u8 (value6));\n+  r6 = vaddq_u8 (r5, vreinterpretq_u8 (value7));\n+  r7 = vaddq_u8 (r6, vreinterpretq_u8 (value8));\n+  return vaddq_u8 (r7, vreinterpretq_u8 (value9));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vadd.i8\" 8 } } */"}, {"sha": "761d569c2c0cd2363f80b2abc257b53c37b68697", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vuninitializedq_float.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_float.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O0\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo ()\n+{\n+  float16x8_t fa;\n+  float32x4_t fb;\n+  fa = vuninitializedq_f16 ();\n+  fb = vuninitializedq_f32 ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstrb.8\" 4 } } */"}, {"sha": "173b978488a540e5502cc05efb97a5ea008ccf3b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vuninitializedq_float1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_float1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_float1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_float1.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O0\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo ()\n+{\n+  float16x8_t fa, faa;\n+  float32x4_t fb, fbb;\n+  fa = vuninitializedq (faa);\n+  fb = vuninitializedq (fbb);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstrb.8\" 4444} */"}, {"sha": "2969f331d80a0fa5f56a6f76077900db2af9a8e2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vuninitializedq_int.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O0\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo ()\n+{\n+  int8x16_t a;\n+  int16x8_t b;\n+  int32x4_t c;\n+  int64x2_t d;\n+  uint8x16_t ua;\n+  uint16x8_t ub;\n+  uint32x4_t uc;\n+  uint64x2_t ud;\n+  a = vuninitializedq_s8 ();\n+  b = vuninitializedq_s16 ();\n+  c = vuninitializedq_s32 ();\n+  d = vuninitializedq_s64 ();\n+  ua = vuninitializedq_u8 ();\n+  ub = vuninitializedq_u16 ();\n+  uc = vuninitializedq_u32 ();\n+  ud = vuninitializedq_u64 ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstrb.8\" 16 } } */"}, {"sha": "555019011a38842911177aa645516cee80c4abb0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vuninitializedq_int1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a94e8790198cdafc6f2af8224b273075bab84d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvuninitializedq_int1.c?ref=85a94e8790198cdafc6f2af8224b273075bab84d", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O0\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo ()\n+{\n+  int8x16_t a, aa;\n+  int16x8_t b, bb;\n+  int32x4_t c, cc;\n+  int64x2_t d, dd;\n+  uint8x16_t ua, uaa;\n+  uint16x8_t ub, ubb;\n+  uint32x4_t uc, ucc;\n+  uint64x2_t ud, udd;\n+  a = vuninitializedq (aa);\n+  b = vuninitializedq (bb);\n+  c = vuninitializedq (cc);\n+  d = vuninitializedq (dd);\n+  ua = vuninitializedq (uaa);\n+  ub = vuninitializedq (ubb);\n+  uc = vuninitializedq (ucc);\n+  ud = vuninitializedq (udd);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vstrb.8\" 24 } } */"}]}