{"sha": "241f845ab3717714234437e28bbaf2b1cc5f4426", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQxZjg0NWFiMzcxNzcxNDIzNDQzN2UyOGJiYWYyYjFjYzVmNDQyNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-01-15T08:03:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-15T08:03:53Z"}, "message": "re PR c/58943 (wrong calculation of indirect structure member arithmetic via function call)\n\n\tPR c/58943\n\t* c-typeck.c (build_modify_expr): For lhs op= rhs, if rhs has side\n\teffects, preevaluate rhs using SAVE_EXPR first.\n\n\t* c-omp.c (c_finish_omp_atomic): Set in_late_binary_op around\n\tbuild_modify_expr with non-NOP_EXPR opcode.  Handle return from it\n\tbeing COMPOUND_EXPR.\n\t(c_finish_omp_for): Handle incr being COMPOUND_EXPR with first\n\toperand a SAVE_EXPR and second MODIFY_EXPR.\n\n\t* gcc.c-torture/execute/pr58943.c: New test.\n\t* gcc.dg/tree-ssa/ssa-fre-33.c (main): Avoid using += in the test.\n\nFrom-SVN: r206620", "tree": {"sha": "cc04f22cb2a16aa9af9055fefe1388107a5c0f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc04f22cb2a16aa9af9055fefe1388107a5c0f7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/241f845ab3717714234437e28bbaf2b1cc5f4426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241f845ab3717714234437e28bbaf2b1cc5f4426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/241f845ab3717714234437e28bbaf2b1cc5f4426", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/241f845ab3717714234437e28bbaf2b1cc5f4426/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb6eb8623701589015d966a71970c1893a92884c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6eb8623701589015d966a71970c1893a92884c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb6eb8623701589015d966a71970c1893a92884c"}], "stats": {"total": 85, "additions": 78, "deletions": 7}, "files": [{"sha": "80dd632a632407aab8f81252b5e2626fb55f303b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=241f845ab3717714234437e28bbaf2b1cc5f4426", "patch": "@@ -1,3 +1,12 @@\n+2014-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/58943\n+\t* c-omp.c (c_finish_omp_atomic): Set in_late_binary_op around\n+\tbuild_modify_expr with non-NOP_EXPR opcode.  Handle return from it\n+\tbeing COMPOUND_EXPR.\n+\t(c_finish_omp_for): Handle incr being COMPOUND_EXPR with first\n+\toperand a SAVE_EXPR and second MODIFY_EXPR.\n+\n 2014-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/58115"}, {"sha": "4ce51e4a9d2fe425873f66ab00d089498e2b50b6", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=241f845ab3717714234437e28bbaf2b1cc5f4426", "patch": "@@ -136,7 +136,7 @@ c_finish_omp_atomic (location_t loc, enum tree_code code,\n \t\t     enum tree_code opcode, tree lhs, tree rhs,\n \t\t     tree v, tree lhs1, tree rhs1, bool swapped, bool seq_cst)\n {\n-  tree x, type, addr;\n+  tree x, type, addr, pre = NULL_TREE;\n \n   if (lhs == error_mark_node || rhs == error_mark_node\n       || v == error_mark_node || lhs1 == error_mark_node\n@@ -194,9 +194,18 @@ c_finish_omp_atomic (location_t loc, enum tree_code code,\n       rhs = build2_loc (loc, opcode, TREE_TYPE (lhs), rhs, lhs);\n       opcode = NOP_EXPR;\n     }\n+  bool save = in_late_binary_op;\n+  in_late_binary_op = true;\n   x = build_modify_expr (loc, lhs, NULL_TREE, opcode, loc, rhs, NULL_TREE);\n+  in_late_binary_op = save;\n   if (x == error_mark_node)\n     return error_mark_node;\n+  if (TREE_CODE (x) == COMPOUND_EXPR)\n+    {\n+      pre = TREE_OPERAND (x, 0);\n+      gcc_assert (TREE_CODE (pre) == SAVE_EXPR);\n+      x = TREE_OPERAND (x, 1);\n+    }\n   gcc_assert (TREE_CODE (x) == MODIFY_EXPR);\n   rhs = TREE_OPERAND (x, 1);\n \n@@ -264,6 +273,8 @@ c_finish_omp_atomic (location_t loc, enum tree_code code,\n       x = omit_one_operand_loc (loc, type, x, rhs1addr);\n     }\n \n+  if (pre)\n+    x = omit_one_operand_loc (loc, type, x, pre);\n   return x;\n }\n \n@@ -555,6 +566,12 @@ c_finish_omp_for (location_t locus, enum tree_code code, tree declv,\n \t      incr = c_omp_for_incr_canonicalize_ptr (elocus, decl, incr);\n \t      break;\n \n+\t    case COMPOUND_EXPR:\n+\t      if (TREE_CODE (TREE_OPERAND (incr, 0)) != SAVE_EXPR\n+\t\t  || TREE_CODE (TREE_OPERAND (incr, 1)) != MODIFY_EXPR)\n+\t\tbreak;\n+\t      incr = TREE_OPERAND (incr, 1);\n+\t      /* FALLTHRU */\n \t    case MODIFY_EXPR:\n \t      if (TREE_OPERAND (incr, 0) != decl)\n \t\tbreak;"}, {"sha": "4754bdf2b99cc8f9dcffb0a06833d5aaacfdbd3d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=241f845ab3717714234437e28bbaf2b1cc5f4426", "patch": "@@ -1,3 +1,9 @@\n+2014-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/58943\n+\t* c-typeck.c (build_modify_expr): For lhs op= rhs, if rhs has side\n+\teffects, preevaluate rhs using SAVE_EXPR first.\n+\n 2014-01-09  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \tPR c++/59631"}, {"sha": "09049e2a3ca960bc4972942df1f7987785af8530", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=241f845ab3717714234437e28bbaf2b1cc5f4426", "patch": "@@ -5193,6 +5193,7 @@ build_modify_expr (location_t location, tree lhs, tree lhs_origtype,\n {\n   tree result;\n   tree newrhs;\n+  tree rhseval = NULL_TREE;\n   tree rhs_semantic_type = NULL_TREE;\n   tree lhstype = TREE_TYPE (lhs);\n   tree olhstype = lhstype;\n@@ -5254,8 +5255,17 @@ build_modify_expr (location_t location, tree lhs, tree lhs_origtype,\n       /* Construct the RHS for any non-atomic compound assignemnt. */\n       if (!is_atomic_op)\n         {\n+\t  /* If in LHS op= RHS the RHS has side-effects, ensure they\n+\t     are preevaluated before the rest of the assignment expression's\n+\t     side-effects, because RHS could contain e.g. function calls\n+\t     that modify LHS.  */\n+\t  if (TREE_SIDE_EFFECTS (rhs))\n+\t    {\n+\t      newrhs = in_late_binary_op ? save_expr (rhs) : c_save_expr (rhs);\n+\t      rhseval = newrhs;\n+\t    }\n \t  newrhs = build_binary_op (location,\n-\t\t\t\t    modifycode, lhs, rhs, 1);\n+\t\t\t\t    modifycode, lhs, newrhs, 1);\n \n \t  /* The original type of the right hand side is no longer\n \t     meaningful.  */\n@@ -5269,7 +5279,7 @@ build_modify_expr (location_t location, tree lhs, tree lhs_origtype,\n \t if so, we need to generate setter calls.  */\n       result = objc_maybe_build_modify_expr (lhs, newrhs);\n       if (result)\n-\treturn result;\n+\tgoto return_result;\n \n       /* Else, do the check that we postponed for Objective-C.  */\n       if (!lvalue_or_else (location, lhs, lv_assign))\n@@ -5363,7 +5373,7 @@ build_modify_expr (location_t location, tree lhs, tree lhs_origtype,\n       if (result)\n \t{\n \t  protected_set_expr_location (result, location);\n-\t  return result;\n+\t  goto return_result;\n \t}\n     }\n \n@@ -5384,11 +5394,15 @@ build_modify_expr (location_t location, tree lhs, tree lhs_origtype,\n      as the LHS argument.  */\n \n   if (olhstype == TREE_TYPE (result))\n-    return result;\n+    goto return_result;\n \n   result = convert_for_assignment (location, olhstype, result, rhs_origtype,\n \t\t\t\t   ic_assign, false, NULL_TREE, NULL_TREE, 0);\n   protected_set_expr_location (result, location);\n+\n+return_result:\n+  if (rhseval)\n+    result = build2 (COMPOUND_EXPR, TREE_TYPE (result), rhseval, result);\n   return result;\n }\n \f"}, {"sha": "c9eba44783946e257f45907f2482a96db83065f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=241f845ab3717714234437e28bbaf2b1cc5f4426", "patch": "@@ -1,3 +1,9 @@\n+2014-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/58943\n+\t* gcc.c-torture/execute/pr58943.c: New test.\n+\t* gcc.dg/tree-ssa/ssa-fre-33.c (main): Avoid using += in the test.\n+\n 2014-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/59794"}, {"sha": "75e87ae0950ca25a79a1e01d171e513bc3edd70f", "filename": "gcc/testsuite/gcc.c-torture/execute/pr58943.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr58943.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr58943.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr58943.c?ref=241f845ab3717714234437e28bbaf2b1cc5f4426", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/58943 */\n+\n+unsigned int x[1] = { 2 };\n+\n+unsigned int\n+foo (void)\n+{\n+  x[0] |= 128;\n+  return 1;\n+}\n+\n+int\n+main ()\n+{\n+  x[0] |= foo ();\n+  if (x[0] != 131)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "ead6a183d0288bf65ae3c803371e8eb5540b1fd3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-33.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/241f845ab3717714234437e28bbaf2b1cc5f4426/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-33.c?ref=241f845ab3717714234437e28bbaf2b1cc5f4426", "patch": "@@ -11,8 +11,8 @@ struct {\n float x;\n int main(int argc)\n {\n-  vector float res = (vector float){0.0f,0.0f,0.0f,1.0f};\n-  res += (vector float){1.0f,2.0f,3.0f,4.0f};\n+  vector float res;\n+  res = (vector float){1.0f,2.0f,3.0f,5.0f};\n   s.global_res = res;\n   x = *((float*)&s.global_res + 1);\n   return 0;"}]}