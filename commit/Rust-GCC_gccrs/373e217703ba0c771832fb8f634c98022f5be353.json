{"sha": "373e217703ba0c771832fb8f634c98022f5be353", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczZTIxNzcwM2JhMGM3NzE4MzJmYjhmNjM0Yzk4MDIyZjViZTM1Mw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-02-21T07:29:56Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-02-21T07:29:56Z"}, "message": "cppfiles.c: Update comments.\n\n        * cppfiles.c: Update comments.\n        (_cpp_read_file): Don't check for NULL filenames any more.\n        * cppinit.c (cpp_start_read): Don't do canonicalization of\n        in_fname and out_fname.  Use the passed file name exclusively.\n        (_cpp_handle_options): Don't treat \"-\" as a command line option,\n        but as a normal filename.\n        (_cpp_post_options): Canonicalize in_fname and out_fname.\n        * cppmain.c (printer_init): Don't check out_fname for NULL.\n        * c-lex.c (orig_filename): Rename cpp_filename for clarity.\n        (init_c_lex): Update, and use \"\" to represent stdin to CPP.\n        (yyparse): Update.\n\nFrom-SVN: r39938", "tree": {"sha": "63deedc494f43a8e08b2973548c30e790dcbbe8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63deedc494f43a8e08b2973548c30e790dcbbe8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/373e217703ba0c771832fb8f634c98022f5be353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373e217703ba0c771832fb8f634c98022f5be353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373e217703ba0c771832fb8f634c98022f5be353", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373e217703ba0c771832fb8f634c98022f5be353/comments", "author": null, "committer": null, "parents": [{"sha": "75beacf8857ecce10fcfdaf4e00dbe21cb56e224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75beacf8857ecce10fcfdaf4e00dbe21cb56e224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75beacf8857ecce10fcfdaf4e00dbe21cb56e224"}], "stats": {"total": 97, "additions": 48, "deletions": 49}, "files": [{"sha": "6ef2430464ec5f0cd220a46931a259de428f1605", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373e217703ba0c771832fb8f634c98022f5be353/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373e217703ba0c771832fb8f634c98022f5be353/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=373e217703ba0c771832fb8f634c98022f5be353", "patch": "@@ -1,3 +1,17 @@\n+2001-02-21  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cppfiles.c: Update comments.\n+        (_cpp_read_file): Don't check for NULL filenames any more.\n+        * cppinit.c (cpp_start_read): Don't do canonicalization of\n+        in_fname and out_fname.  Use the passed file name exclusively.\n+        (_cpp_handle_options): Don't treat \"-\" as a command line option,\n+        but as a normal filename.\n+        (_cpp_post_options): Canonicalize in_fname and out_fname.\n+        * cppmain.c (printer_init): Don't check out_fname for NULL.\n+        * c-lex.c (orig_filename): Rename cpp_filename for clarity.\n+        (init_c_lex): Update, and use \"\" to represent stdin to CPP.\n+        (yyparse): Update.\n+\n 2001-02-20  Will Cohen  <wcohen@redhat.com>\n  \n \t* config/pa/quadlib.c (_U_Qfcnvfxt_quad_to_usgl): New function."}, {"sha": "9078361ad153f4b4946222eff43c65e644f9c416", "filename": "gcc/c-lex.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373e217703ba0c771832fb8f634c98022f5be353/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373e217703ba0c771832fb8f634c98022f5be353/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=373e217703ba0c771832fb8f634c98022f5be353", "patch": "@@ -53,8 +53,8 @@ Boston, MA 02111-1307, USA.  */\n #define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME) ((ENV_VALUE) = getenv (ENV_NAME))\n #endif\n \n-/* The original file name, before changing \"-\" to \"stdin\".  */\n-static const char *orig_filename;\n+/* The input filename as understood by CPP, where \"\" represents stdin.  */\n+static const char *cpp_filename;\n \n /* We may keep statistics about how long which files took to compile.  */\n static int header_time, body_time;\n@@ -102,8 +102,6 @@ init_c_lex (filename)\n   struct cpp_callbacks *cb;\n   struct c_fileinfo *toplevel;\n \n-  orig_filename = filename;\n-\n   /* Set up filename timing.  Must happen before cpp_start_read.  */\n   file_info_tree = splay_tree_new ((splay_tree_compare_fn)strcmp,\n \t\t\t\t   0,\n@@ -136,8 +134,11 @@ init_c_lex (filename)\n       cb->undef = cb_undef;\n     }\n \n+\n   if (filename == 0 || !strcmp (filename, \"-\"))\n-    filename = \"stdin\";\n+    filename = \"stdin\", cpp_filename = \"\";\n+  else\n+    cpp_filename = filename;\n \n   /* Start it at 0.  */\n   lineno = 0;\n@@ -151,7 +152,7 @@ init_c_lex (filename)\n int\n yyparse()\n {\n-  if (! cpp_start_read (parse_in, orig_filename))\n+  if (! cpp_start_read (parse_in, cpp_filename))\n     return 1;\t\t\t/* cpplib has emitted an error.  */\n \n   return yyparse_1();"}, {"sha": "25bc37df1a8f426d3b78515ada305e326e62a63e", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373e217703ba0c771832fb8f634c98022f5be353/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373e217703ba0c771832fb8f634c98022f5be353/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=373e217703ba0c771832fb8f634c98022f5be353", "patch": "@@ -174,7 +174,8 @@ _cpp_fake_include (pfile, fname)\n    create one with a non-NULL value (regardless of success in opening\n    the file).  If the file doesn't exist or is inaccessible, this\n    entry is flagged so we don't attempt to open it again in the\n-   future.  If the file isn't open, open it.\n+   future.  If the file isn't open, open it.  The empty string is\n+   interpreted as stdin.\n \n    Returns an include_file structure with an open file descriptor on\n    success, or NULL on failure.  */\n@@ -755,18 +756,13 @@ _cpp_compare_file_date (pfile, f)\n \n \n /* Push an input buffer and load it up with the contents of FNAME.\n-   If FNAME is \"\" or NULL, read standard input.  */\n+   If FNAME is \"\", read standard input.  */\n int\n _cpp_read_file (pfile, fname)\n      cpp_reader *pfile;\n      const char *fname;\n {\n-  struct include_file *f;\n-\n-  if (fname == NULL)\n-    fname = \"\";\n-\n-  f = open_file (pfile, fname);\n+  struct include_file *f = open_file (pfile, fname);\n \n   if (f == NULL)\n     {"}, {"sha": "22ce18df1e39ff368738ea08e04d3782eeb08e8b", "filename": "gcc/cppinit.c", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373e217703ba0c771832fb8f634c98022f5be353/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373e217703ba0c771832fb8f634c98022f5be353/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=373e217703ba0c771832fb8f634c98022f5be353", "patch": "@@ -882,9 +882,8 @@ do_includes (pfile, p, scan)\n }\n \n /* This is called after options have been processed.  Setup for\n-   processing input from the file named FNAME.  (Use standard input if\n-   FNAME == NULL.)  Return 1 on success, 0 on failure.  */\n-\n+   processing input from the file named FNAME, or stdin if it is the\n+   empty string.  Return 1 on success, 0 on failure.  */\n int\n cpp_start_read (pfile, fname)\n      cpp_reader *pfile;\n@@ -912,19 +911,9 @@ cpp_start_read (pfile, fname)\n       fprintf (stderr, _(\"End of search list.\\n\"));\n     }\n \n-  if (CPP_OPTION (pfile, in_fname) == NULL\n-      || *CPP_OPTION (pfile, in_fname) == 0)\n-    {\n-      CPP_OPTION (pfile, in_fname) = fname;\n-      if (CPP_OPTION (pfile, in_fname) == NULL)\n-\tCPP_OPTION (pfile, in_fname) = \"\";\n-    }\n-  if (CPP_OPTION (pfile, out_fname) == NULL)\n-    CPP_OPTION (pfile, out_fname) = \"\";\n-\n   if (CPP_OPTION (pfile, print_deps))\n     /* Set the default target (if there is none already).  */\n-    deps_add_default_target (pfile->deps, CPP_OPTION (pfile, in_fname));\n+    deps_add_default_target (pfile->deps, fname);\n \n   /* Open the main input file.  This must be done early, so we have a\n      buffer to stand on.  */\n@@ -1051,7 +1040,6 @@ new_pending_directive (pend, text, handler)\n /* This is the list of all command line options, with the leading\n    \"-\" removed.  It must be sorted in ASCII collating order.  */\n #define COMMAND_LINE_OPTIONS                                                  \\\n-  DEF_OPT(\"\",                         0,      OPT_stdin_stdout)               \\\n   DEF_OPT(\"$\",                        0,      OPT_dollar)                     \\\n   DEF_OPT(\"+\",                        0,      OPT_plus)                       \\\n   DEF_OPT(\"-help\",                    0,      OPT__help)                      \\\n@@ -1224,15 +1212,16 @@ cpp_handle_option (pfile, argc, argv)\n   int i = 0;\n   struct cpp_pending *pend = CPP_OPTION (pfile, pending);\n \n-  if (argv[i][0] != '-')\n+  /* Interpret \"-\" or a non-option as a file name.  */\n+  if (argv[i][0] != '-' || argv[i][1] == '\\0')\n     {\n-      if (CPP_OPTION (pfile, out_fname) != NULL)\n-\tcpp_fatal (pfile, \"Too many arguments. Type %s --help for usage info\",\n-\t\t   progname);\n-      else if (CPP_OPTION (pfile, in_fname) != NULL)\n+      if (CPP_OPTION (pfile, in_fname) == NULL)\n+\tCPP_OPTION (pfile, in_fname) = argv[i];\n+      else if (CPP_OPTION (pfile, out_fname) == NULL)\n \tCPP_OPTION (pfile, out_fname) = argv[i];\n       else\n-\tCPP_OPTION (pfile, in_fname) = argv[i];\n+\tcpp_fatal (pfile, \"Too many filenames. Type %s --help for usage info\",\n+\t\t   progname);\n     }\n   else\n     {\n@@ -1415,21 +1404,13 @@ cpp_handle_option (pfile, argc, argv)\n \t  CPP_OPTION (pfile, no_standard_cplusplus_includes) = 1;\n \t  break;\n \tcase OPT_o:\n-\t  if (CPP_OPTION (pfile, out_fname) != NULL)\n+\t  if (CPP_OPTION (pfile, out_fname) == NULL)\n+\t    CPP_OPTION (pfile, out_fname) = arg;\n+\t  else\n \t    {\n \t      cpp_fatal (pfile, \"Output filename specified twice\");\n \t      return argc;\n \t    }\n-\t  CPP_OPTION (pfile, out_fname) = arg;\n-\t  if (!strcmp (CPP_OPTION (pfile, out_fname), \"-\"))\n-\t    CPP_OPTION (pfile, out_fname) = \"\";\n-\t  break;\n-\tcase OPT_stdin_stdout:\n-\t  /* JF handle '-' as file name meaning stdin or stdout.  */\n-\t  if (CPP_OPTION (pfile, in_fname) == NULL)\n-\t    CPP_OPTION (pfile, in_fname) = \"\";\n-\t  else if (CPP_OPTION (pfile, out_fname) == NULL)\n-\t    CPP_OPTION (pfile, out_fname) = \"\";\n \t  break;\n \tcase OPT_d:\n \t  /* Args to -d specify what parts of macros to dump.\n@@ -1693,6 +1674,16 @@ void\n cpp_post_options (pfile)\n      cpp_reader *pfile;\n {\n+  /* Canonicalize in_fname and out_fname.  We guarantee they are not\n+     NULL, and that the empty string represents stdin / stdout.  */\n+  if (CPP_OPTION (pfile, in_fname) == NULL\n+      || !strcmp (CPP_OPTION (pfile, in_fname), \"-\"))\n+    CPP_OPTION (pfile, in_fname) = \"\";\n+\n+  if (CPP_OPTION (pfile, out_fname) == NULL\n+      || !strcmp (CPP_OPTION (pfile, out_fname), \"-\"))\n+    CPP_OPTION (pfile, out_fname) = \"\";\n+\n   /* -Wtraditional is not useful in C++ mode.  */\n   if (CPP_OPTION (pfile, cplusplus))\n     CPP_OPTION (pfile, warn_traditional) = 0;"}, {"sha": "6d3afe0147b758c499428d0f43760b842aabd049", "filename": "gcc/cppmain.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373e217703ba0c771832fb8f634c98022f5be353/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373e217703ba0c771832fb8f634c98022f5be353/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=373e217703ba0c771832fb8f634c98022f5be353", "patch": "@@ -271,9 +271,6 @@ printer_init (pfile)\n   print.lineno = 0;\n   print.printed = 0;\n \n-  if (options->out_fname == NULL)\n-    options->out_fname = \"\";\n-  \n   if (options->out_fname[0] == '\\0')\n     print.outf = stdout;\n   else"}]}