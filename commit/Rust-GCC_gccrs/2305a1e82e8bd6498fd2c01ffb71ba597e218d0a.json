{"sha": "2305a1e82e8bd6498fd2c01ffb71ba597e218d0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMwNWExZTgyZThiZDY0OThmZDJjMDFmZmI3MWJhNTk3ZTIxOGQwYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-22T12:18:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-22T12:18:46Z"}, "message": "base.h (_Less): Use std::less.\n\n2010-03-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/parallel/base.h (_Less): Use std::less.\n\t(_Plus): Likewise use std::plus.\n\t(_Multiplies): Likewise use std::multiplies.\n\t* include/parallel/numeric: Adjust.\n\nFrom-SVN: r157622", "tree": {"sha": "f0e4822f6f1f41d71ebb9b4543cd32fa04743624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0e4822f6f1f41d71ebb9b4543cd32fa04743624"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2305a1e82e8bd6498fd2c01ffb71ba597e218d0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2305a1e82e8bd6498fd2c01ffb71ba597e218d0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2305a1e82e8bd6498fd2c01ffb71ba597e218d0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2305a1e82e8bd6498fd2c01ffb71ba597e218d0a/comments", "author": null, "committer": null, "parents": [{"sha": "be36dd859d8f539adea5968c6423b6d062700038", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be36dd859d8f539adea5968c6423b6d062700038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be36dd859d8f539adea5968c6423b6d062700038"}], "stats": {"total": 66, "additions": 25, "deletions": 41}, "files": [{"sha": "59c5a8e17e0017958103d15923cf6c58cf3537cc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2305a1e82e8bd6498fd2c01ffb71ba597e218d0a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2305a1e82e8bd6498fd2c01ffb71ba597e218d0a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2305a1e82e8bd6498fd2c01ffb71ba597e218d0a", "patch": "@@ -1,3 +1,10 @@\n+2010-03-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/parallel/base.h (_Less): Use std::less.\n+\t(_Plus): Likewise use std::plus.\n+\t(_Multiplies): Likewise use std::multiplies.\n+\t* include/parallel/numeric: Adjust.\n+\n 2010-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/17_intro/freestanding.cc: Avoid -Wall warnings."}, {"sha": "6656b2caabb17a935920a64f4b92270aa854965a", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 16, "deletions": 39, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2305a1e82e8bd6498fd2c01ffb71ba597e218d0a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2305a1e82e8bd6498fd2c01ffb71ba597e218d0a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=2305a1e82e8bd6498fd2c01ffb71ba597e218d0a", "patch": "@@ -262,63 +262,40 @@ namespace __gnu_parallel\n \n   // Partial specialization for one type. Same as std::less.\n   template<typename _Tp>\n-    struct _Less<_Tp, _Tp> : public std::binary_function<_Tp, _Tp, bool>\n-    {\n-      bool\n-      operator()(const _Tp& __x, const _Tp& __y) const\n-      { return __x < __y; }\n-    };\n-\n+    struct _Less<_Tp, _Tp>\n+    : public std::less<_Tp> { };\n \n   /** @brief Similar to std::plus, but allows two different types. */\n-  template<typename _Tp1, typename _Tp2>\n-    struct _Plus : public std::binary_function<_Tp1, _Tp2, _Tp1>\n+  template<typename _Tp1, typename _Tp2, typename _Result\n+\t   = __typeof__(*static_cast<_Tp1*>(NULL)\n+\t\t\t+ *static_cast<_Tp2*>(NULL))>\n+    struct _Plus : public std::binary_function<_Tp1, _Tp2, _Result>\n     {\n-      typedef __typeof__(*static_cast<_Tp1*>(NULL)\n-\t\t\t + *static_cast<_Tp2*>(NULL)) __result;\n-\n-      __result\n+      _Result\n       operator()(const _Tp1& __x, const _Tp2& __y) const\n       { return __x + __y; }\n     };\n \n   // Partial specialization for one type. Same as std::plus.\n   template<typename _Tp>\n-    struct _Plus<_Tp, _Tp> : public std::binary_function<_Tp, _Tp, _Tp>\n-    {\n-      typedef __typeof__(*static_cast<_Tp*>(NULL)\n-\t\t\t + *static_cast<_Tp*>(NULL)) __result;\n-\n-      __result\n-      operator()(const _Tp& __x, const _Tp& __y) const\n-      { return __x + __y; }\n-    };\n-\n+    struct _Plus<_Tp, _Tp, _Tp>\n+    : public std::plus<_Tp> { };\n \n   /** @brief Similar to std::multiplies, but allows two different types. */\n-  template<typename _Tp1, typename _Tp2>\n-    struct _Multiplies : public std::binary_function<_Tp1, _Tp2, _Tp1>\n+  template<typename _Tp1, typename _Tp2, typename _Result\n+\t   = __typeof__(*static_cast<_Tp1*>(NULL)\n+\t\t\t* *static_cast<_Tp2*>(NULL))>\n+    struct _Multiplies : public std::binary_function<_Tp1, _Tp2, _Result>\n     {\n-      typedef __typeof__(*static_cast<_Tp1*>(NULL)\n-\t\t\t * *static_cast<_Tp2*>(NULL)) __result;\n-\n-      __result\n+      _Result\n       operator()(const _Tp1& __x, const _Tp2& __y) const\n       { return __x * __y; }\n     };\n \n   // Partial specialization for one type. Same as std::multiplies.\n   template<typename _Tp>\n-    struct _Multiplies<_Tp, _Tp> : public std::binary_function<_Tp, _Tp, _Tp>\n-    {\n-      typedef __typeof__(*static_cast<_Tp*>(NULL)\n-\t\t\t * *static_cast<_Tp*>(NULL)) __result;\n-\n-      __result\n-      operator()(const _Tp& __x, const _Tp& __y) const\n-      { return __x * __y; }\n-    };\n-\n+    struct _Multiplies<_Tp, _Tp, _Tp>\n+    : public std::multiplies<_Tp> { };\n \n   template<typename _Tp, typename _DifferenceTp>\n     class _PseudoSequence;"}, {"sha": "76916ff3ecb9a92177cf6c7b8bffacb31271de70", "filename": "libstdc++-v3/include/parallel/numeric", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2305a1e82e8bd6498fd2c01ffb71ba597e218d0a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2305a1e82e8bd6498fd2c01ffb71ba597e218d0a/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric?ref=2305a1e82e8bd6498fd2c01ffb71ba597e218d0a", "patch": "@@ -281,7 +281,7 @@ namespace __parallel\n       typedef typename _TraitsType2::value_type _ValueType2;\n \n       typedef typename\n-        __gnu_parallel::_Multiplies<_ValueType1, _ValueType2>::__result\n+        __gnu_parallel::_Multiplies<_ValueType1, _ValueType2>::result_type\n         _MultipliesResultType;\n       return inner_product(__first1, __last1, __first2, __init,\n                            __gnu_parallel::_Plus<_Tp, _MultipliesResultType>(),\n@@ -301,7 +301,7 @@ namespace __parallel\n       typedef typename _TraitsType2::value_type _ValueType2;\n \n       typedef typename\n-        __gnu_parallel::_Multiplies<_ValueType1, _ValueType2>::__result\n+        __gnu_parallel::_Multiplies<_ValueType1, _ValueType2>::result_type\n         _MultipliesResultType;\n       return inner_product(__first1, __last1, __first2, __init,\n                            __gnu_parallel::_Plus<_Tp, _MultipliesResultType>(),"}]}