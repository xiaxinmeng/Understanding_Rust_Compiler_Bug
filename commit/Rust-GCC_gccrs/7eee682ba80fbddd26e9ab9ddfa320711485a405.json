{"sha": "7eee682ba80fbddd26e9ab9ddfa320711485a405", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VlZTY4MmJhODBmYmRkZDI2ZTlhYjlkZGZhMzIwNzExNDg1YTQwNQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-09-02T06:18:49Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-09-02T06:18:49Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (core_java_source_files): Added\n\tUnsupportedClassVersionError.\n\t* java/lang/UnsupportedClassVersionError.java: New file from\n\tClasspath.\n\n\t* java/io/CharConversionException.java, java/io/EOFException.java,\n\tjava/io/FileNotFoundException.java, java/io/IOException.java,\n\tjava/io/InterruptedIOException.java,\n\tjava/io/ObjectStreamException.java,\n\tjava/io/OptionalDataException.java,\n\tjava/io/StreamCorruptedException.java,\n\tjava/io/SyncFailedException.java,\n\tjava/io/UTFDataFormatException.java,\n\tjava/io/UnsupportedEncodingException.java,\n\tjava/lang/AbstractMethodError.java,\n\tjava/lang/ArithmeticException.java,\n\tjava/lang/ArrayIndexOutOfBoundsException.java,\n\tjava/lang/ArrayStoreException.java,\n\tjava/lang/ClassCastException.java,\n\tjava/lang/ClassCircularityError.java,\n\tjava/lang/ClassFormatError.java,\n\tjava/lang/CloneNotSupportedException.java, java/lang/Error.java,\n\tjava/lang/Exception.java,\n\tjava/lang/ExceptionInInitializerError.java,\n\tjava/lang/IllegalAccessError.java,\n\tjava/lang/IllegalAccessException.java,\n\tjava/lang/IllegalArgumentException.java,\n\tjava/lang/IllegalMonitorStateException.java,\n\tjava/lang/IllegalStateException.java,\n\tjava/lang/IllegalThreadStateException.java,\n\tjava/lang/IncompatibleClassChangeError.java,\n\tjava/lang/IndexOutOfBoundsException.java,\n\tjava/lang/InstantiationError.java,\n\tjava/lang/InstantiationException.java,\n\tjava/lang/InternalError.java, java/lang/InterruptedException.java,\n\tjava/lang/LinkageError.java,\n\tjava/lang/NegativeArraySizeException.java,\n\tjava/lang/NoClassDefFoundError.java,\n\tjava/lang/NoSuchFieldError.java,\n\tjava/lang/NoSuchFieldException.java,\n\tjava/lang/NoSuchMethodError.java,\n\tjava/lang/NoSuchMethodException.java,\n\tjava/lang/NullPointerException.java,\n\tjava/lang/NumberFormatException.java,\n\tjava/lang/OutOfMemoryError.java, java/lang/RuntimeException.java,\n\tjava/lang/SecurityException.java,\n\tjava/lang/StackOverflowError.java,\n\tjava/lang/StringIndexOutOfBoundsException.java,\n\tjava/lang/ThreadDeath.java, java/lang/UnknownError.java,\n\tjava/lang/UnsatisfiedLinkError.java,\n\tjava/lang/UnsupportedOperationException.java,\n\tjava/lang/VerifyError.java, java/lang/VirtualMachineError.java,\n\tjava/lang/reflect/InvocationTargetException.java,\n\tjava/net/BindException.java, java/net/ConnectException.java,\n\tjava/net/MalformedURLException.java,\n\tjava/net/NoRouteToHostException.java,\n\tjava/net/ProtocolException.java, java/net/SocketException.java,\n\tjava/net/UnknownHostException.java,\n\tjava/net/UnknownServiceException.java,\n\tjava/text/ParseException.java: Copied from Classpath, thanks to\n\tMark Wielaard who did the merge.\n\n\t* java/lang/System.java (getProperty): Use single argument form of\n\tSecurityManager.checkPropertyAccess.\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (core_java_source_files): Added VMSecurityManager.\n\t* java/lang/VMSecurityManager.java: New file.\n\t* java/lang/SecurityManager.java: Merged with Classpath.\n\nFrom-SVN: r45353", "tree": {"sha": "13ae69b3ad4acd54e8b54bf7e5e33cea82d78121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ae69b3ad4acd54e8b54bf7e5e33cea82d78121"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7eee682ba80fbddd26e9ab9ddfa320711485a405", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eee682ba80fbddd26e9ab9ddfa320711485a405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eee682ba80fbddd26e9ab9ddfa320711485a405", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eee682ba80fbddd26e9ab9ddfa320711485a405/comments", "author": null, "committer": null, "parents": [{"sha": "9e0e11bfe4af10bef0a326b926f36a1546ee4882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0e11bfe4af10bef0a326b926f36a1546ee4882", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e0e11bfe4af10bef0a326b926f36a1546ee4882"}], "stats": {"total": 6293, "additions": 4700, "deletions": 1593}, "files": [{"sha": "d2249949cf6d8be427b254b3f0b439721d7a9570", "filename": "libjava/ChangeLog", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,3 +1,75 @@\n+2001-09-01  Tom Tromey  <tromey@redhat.com>\n+\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (core_java_source_files): Added\n+\tUnsupportedClassVersionError.\n+\t* java/lang/UnsupportedClassVersionError.java: New file from\n+\tClasspath.\n+\n+\t* java/io/CharConversionException.java, java/io/EOFException.java,\n+\tjava/io/FileNotFoundException.java, java/io/IOException.java,\n+\tjava/io/InterruptedIOException.java,\n+\tjava/io/ObjectStreamException.java,\n+\tjava/io/OptionalDataException.java,\n+\tjava/io/StreamCorruptedException.java,\n+\tjava/io/SyncFailedException.java,\n+\tjava/io/UTFDataFormatException.java,\n+\tjava/io/UnsupportedEncodingException.java,\n+\tjava/lang/AbstractMethodError.java,\n+\tjava/lang/ArithmeticException.java,\n+\tjava/lang/ArrayIndexOutOfBoundsException.java,\n+\tjava/lang/ArrayStoreException.java,\n+\tjava/lang/ClassCastException.java,\n+\tjava/lang/ClassCircularityError.java,\n+\tjava/lang/ClassFormatError.java,\n+\tjava/lang/CloneNotSupportedException.java, java/lang/Error.java,\n+\tjava/lang/Exception.java,\n+\tjava/lang/ExceptionInInitializerError.java,\n+\tjava/lang/IllegalAccessError.java,\n+\tjava/lang/IllegalAccessException.java,\n+\tjava/lang/IllegalArgumentException.java,\n+\tjava/lang/IllegalMonitorStateException.java,\n+\tjava/lang/IllegalStateException.java,\n+\tjava/lang/IllegalThreadStateException.java,\n+\tjava/lang/IncompatibleClassChangeError.java,\n+\tjava/lang/IndexOutOfBoundsException.java,\n+\tjava/lang/InstantiationError.java,\n+\tjava/lang/InstantiationException.java,\n+\tjava/lang/InternalError.java, java/lang/InterruptedException.java,\n+\tjava/lang/LinkageError.java,\n+\tjava/lang/NegativeArraySizeException.java,\n+\tjava/lang/NoClassDefFoundError.java,\n+\tjava/lang/NoSuchFieldError.java,\n+\tjava/lang/NoSuchFieldException.java,\n+\tjava/lang/NoSuchMethodError.java,\n+\tjava/lang/NoSuchMethodException.java,\n+\tjava/lang/NullPointerException.java,\n+\tjava/lang/NumberFormatException.java,\n+\tjava/lang/OutOfMemoryError.java, java/lang/RuntimeException.java,\n+\tjava/lang/SecurityException.java,\n+\tjava/lang/StackOverflowError.java,\n+\tjava/lang/StringIndexOutOfBoundsException.java,\n+\tjava/lang/ThreadDeath.java, java/lang/UnknownError.java,\n+\tjava/lang/UnsatisfiedLinkError.java,\n+\tjava/lang/UnsupportedOperationException.java,\n+\tjava/lang/VerifyError.java, java/lang/VirtualMachineError.java,\n+\tjava/lang/reflect/InvocationTargetException.java,\n+\tjava/net/BindException.java, java/net/ConnectException.java,\n+\tjava/net/MalformedURLException.java,\n+\tjava/net/NoRouteToHostException.java,\n+\tjava/net/ProtocolException.java, java/net/SocketException.java,\n+\tjava/net/UnknownHostException.java,\n+\tjava/net/UnknownServiceException.java,\n+\tjava/text/ParseException.java: Copied from Classpath, thanks to\n+\tMark Wielaard who did the merge.\n+\n+\t* java/lang/System.java (getProperty): Use single argument form of\n+\tSecurityManager.checkPropertyAccess.\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (core_java_source_files): Added VMSecurityManager.\n+\t* java/lang/VMSecurityManager.java: New file.\n+\t* java/lang/SecurityManager.java: Merged with Classpath.\n+\n 2001-08-31  Per Bothner  <per@bothner.com>\n \n \t* gcj/javaprims.h (_Jv_RegisterClassHook):  New extern declaration."}, {"sha": "963f631cf8e1155243ffa173cf08eed42b64dc05", "filename": "libjava/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -965,10 +965,12 @@ java/lang/ThreadLocal.java \\\n java/lang/Throwable.java \\\n java/lang/UnknownError.java \\\n java/lang/UnsatisfiedLinkError.java \\\n+java/lang/UnsupportedClassVersionError.java \\\n java/lang/UnsupportedOperationException.java \\\n java/lang/VerifyError.java \\\n java/lang/VirtualMachineError.java \\\n java/lang/VMClassLoader.java \\\n+java/lang/VMSecurityManager.java \\\n java/lang/Void.java \\\n java/io/BufferedInputStream.java \\\n java/io/BufferedOutputStream.java \\"}, {"sha": "334ea77848d44a35f022491c17868dd29eee9cd7", "filename": "libjava/Makefile.in", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -720,10 +720,12 @@ java/lang/ThreadLocal.java \\\n java/lang/Throwable.java \\\n java/lang/UnknownError.java \\\n java/lang/UnsatisfiedLinkError.java \\\n+java/lang/UnsupportedClassVersionError.java \\\n java/lang/UnsupportedOperationException.java \\\n java/lang/VerifyError.java \\\n java/lang/VirtualMachineError.java \\\n java/lang/VMClassLoader.java \\\n+java/lang/VMSecurityManager.java \\\n java/lang/Void.java \\\n java/io/BufferedInputStream.java \\\n java/io/BufferedOutputStream.java \\\n@@ -1798,10 +1800,11 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/lang/ThreadDeath.P .deps/java/lang/ThreadGroup.P \\\n .deps/java/lang/ThreadLocal.P .deps/java/lang/Throwable.P \\\n .deps/java/lang/UnknownError.P .deps/java/lang/UnsatisfiedLinkError.P \\\n+.deps/java/lang/UnsupportedClassVersionError.P \\\n .deps/java/lang/UnsupportedOperationException.P \\\n-.deps/java/lang/VMClassLoader.P .deps/java/lang/VerifyError.P \\\n-.deps/java/lang/VirtualMachineError.P .deps/java/lang/Void.P \\\n-.deps/java/lang/dtoa.P .deps/java/lang/e_acos.P \\\n+.deps/java/lang/VMClassLoader.P .deps/java/lang/VMSecurityManager.P \\\n+.deps/java/lang/VerifyError.P .deps/java/lang/VirtualMachineError.P \\\n+.deps/java/lang/Void.P .deps/java/lang/dtoa.P .deps/java/lang/e_acos.P \\\n .deps/java/lang/e_asin.P .deps/java/lang/e_atan2.P \\\n .deps/java/lang/e_exp.P .deps/java/lang/e_fmod.P \\\n .deps/java/lang/e_log.P .deps/java/lang/e_pow.P \\"}, {"sha": "e090dfc60ba08b6846eb610c9d517bd762700461", "filename": "libjava/java/io/CharConversionException.java", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FCharConversionException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FCharConversionException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FCharConversionException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,75 @@\n-// CharConversionException.java - Problem converting char to byte encoding.\n+/* CharConversionException.java -- Character conversion exceptions\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.io;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 25, 1998 \n- */\n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to 1.1.\n  */\n \n+/**\n+  * This exception is thrown to indicate that a problem occured with\n+  * an attempted character conversion.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  * @date September 25, 1998\n+  */\n public class CharConversionException extends IOException\n {\n-  public CharConversionException ()\n-  {\n-    super ();\n-  }\n-\n-  public CharConversionException (String s)\n-  {\n-    super (s);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Create a new CharConversionException without a descriptive error message\n+  */\n+public\n+CharConversionException()\n+{\n+  super();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Create a new CharConversionException with a descriptive error message String\n+  *\n+  * @param message The descriptive error message\n+  */\n+public\n+CharConversionException(String message)\n+{\n+  super(message);\n+}\n+\n+} // class CharConversionException\n+"}, {"sha": "9a57f5fe345b97bec58ceed9dae3336f70bf4d88", "filename": "libjava/java/io/EOFException.java", "status": "modified", "additions": 65, "deletions": 20, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FEOFException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FEOFException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FEOFException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,79 @@\n-// EOFException.java - End of file exception\n+/* EOFException.java -- Unexpected end of file exception\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.io;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 24, 1998 \n- */\n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to 1.1.\n  */\n \n+/**\n+  * This exception is thrown when the end of the file or stream was \n+  * encountered unexpectedly.  This is not the normal way that a normal\n+  * EOF condition is reported.  Normally a special value such as -1 is\n+  * returned.  However, certain types of streams expecting certain data\n+  * in a certain format might reach EOF before reading their expected\n+  * data pattern and thus throw this exception.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  * @date September 24, 1998\n+  */\n public class EOFException extends IOException\n {\n-  public EOFException ()\n-  {\n-    super ();\n-  }\n-\n-  public EOFException (String s)\n-  {\n-    super (s);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Create a new EOFException without a descriptive error message\n+  */\n+public\n+EOFException()\n+{\n+  super();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Create a new EOFException with a descriptive error message String\n+  *\n+  * @param message The descriptive error message\n+  */\n+public\n+EOFException(String message)\n+{\n+  super(message);\n+}\n+\n+} // class EOFException\n+"}, {"sha": "16150b4d44ab25120f852ce69ea09b5e30eb6a8f", "filename": "libjava/java/io/FileNotFoundException.java", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FFileNotFoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FFileNotFoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileNotFoundException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,75 @@\n-// FileNotFoundException.java\n+/* FileNotFoundException.java -- The requested file could not be found\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.io;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 24, 1998 \n- */\n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to 1.1.\n  */\n \n+/**\n+  * This exception is thrown when an attempt is made to access a file that\n+  * does not exist.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  * @date September 24, 1998\n+  */\n public class FileNotFoundException extends IOException\n {\n-  public FileNotFoundException ()\n-  {\n-    super ();\n-  }\n-\n-  public FileNotFoundException (String s)\n-  {\n-    super (s);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Create a new FileNotFoundException without a descriptive error message\n+  */\n+public\n+FileNotFoundException()\n+{\n+  super();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Create a new FileNotFoundException with a descriptive error message String\n+  *\n+  * @param message The descriptive error message\n+  */\n+public\n+FileNotFoundException(String message)\n+{\n+  super(message);\n+}\n+\n+} // class FileNotFoundException\n+"}, {"sha": "815d92698a904e96a2f97584f8e03000aafac582", "filename": "libjava/java/io/IOException.java", "status": "modified", "additions": 63, "deletions": 20, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FIOException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FIOException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FIOException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,77 @@\n-// IOException.java - Base class for I/O Exceptions\n+/* IOException.java -- Generic input/output exception\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.io;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 24, 1998 \n- */\n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to 1.1.\n  */\n \n+/**\n+  * This exception is thrown to indicate an I/O problem of some sort\n+  * occurred.  Since this is a fairly generic exception, often a subclass\n+  * of IOException will actually be thrown in order to provide a more\n+  * detailed indication of what happened.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  * @date September 24, 1998\n+  */\n public class IOException extends Exception\n {\n-  public IOException ()\n-  {\n-    super ();\n-  }\n-\n-  public IOException (String s)\n-  {\n-    super (s);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Create a new IOException without a descriptive error message\n+  */\n+public\n+IOException()\n+{\n+  super();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Create a new IOException with a descriptive error message String\n+  *\n+  * @param message The descriptive error message\n+  */\n+public\n+IOException(String message)\n+{\n+  super(message);\n+}\n+\n+} // class IOException\n+"}, {"sha": "372286307ad0e7113a4a0b6e6e3a1811507d48f0", "filename": "libjava/java/io/InterruptedIOException.java", "status": "modified", "additions": 88, "deletions": 20, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FInterruptedIOException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FInterruptedIOException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FInterruptedIOException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,36 +1,104 @@\n-// InterruptedIOException.java\n+/* InterruptedIOException.java -- An I/O operation was interrupted.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.io;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 24, 1998 \n- */\n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to 1.1.\n  */\n \n+/**\n+  * This exception is thrown when a in process I/O operation is \n+  * interrupted for some reason.  The field bytesTransferred will contain\n+  * the number of bytes that were read/written prior to the interruption.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  * @date September 24, 1998\n+  */\n public class InterruptedIOException extends IOException\n {\n-  public InterruptedIOException ()\n-  {\n-    super ();\n-  }\n \n-  public InterruptedIOException (String s)\n-  {\n-    super (s);\n-  }\n+private static final long serialVersionUID = 4020568460727500567L;\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * The number of bytes read/written prior to the interruption\n+  */\n+public int bytesTransferred;\n+\n+/*************************************************************************/\n \n-  public int bytesTransferred = 0;\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Create a new InterruptedIOException without a descriptive error message\n+  */\n+public\n+InterruptedIOException()\n+{\n+  super();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Create a new InterruptedIOException with a descriptive error message String\n+  *\n+  * @param message The descriptive error message\n+  */\n+public\n+InterruptedIOException(String message)\n+{\n+  super(message);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Create a new InterruptedIOException with a descriptive error message \n+  * String.  Also sets the value of the bytesTransferred field.\n+  * \n+  * @param message The descriptive error message\n+  * @param bytesTransferred The number of bytes tranferred before the interruption\n+  */\n+InterruptedIOException(String message, int bytesTransferred)\n+{\n+  super(message);\n+  this.bytesTransferred = bytesTransferred;\n+}\n+\n+} // class InterruptedIOException\n+"}, {"sha": "f006321b130649e89cf4e88f031d0efd864cfbac", "filename": "libjava/java/io/ObjectStreamException.java", "status": "modified", "additions": 64, "deletions": 20, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FObjectStreamException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FObjectStreamException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,31 +1,75 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* ObjectStreamException.java -- Superclass of all serialisation exceptions\n+   Copyright (C) 1998, 2000, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-package java.io;\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 7, 2000.\n- */\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.io;\n \n /* Written using on-line Java Platform 1.2 API Specification.\n  * Status:  Believed complete and correct.\n  */\n \n-public abstract class ObjectStreamException extends IOException\n+/**\n+  * This exception is thrown when a problem occurs during serialization.\n+  * There are more specific subclasses than give more fine grained \n+  * indications of the precise failure.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  * @date February 7, 2000. \n+  */\n+public abstract class ObjectStreamException extends IOException \n {\n-  protected ObjectStreamException()\n-  {\n-    super();\n-  }\n-\n-  protected ObjectStreamException(String msg)\n-  {\n-    super(msg);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Create a new ObjectStreamException without a descriptive error message\n+  */\n+protected\n+ObjectStreamException()\n+{\n+  super();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Create a new ObjectStreamException with a descriptive error message String\n+  *\n+  * @param message The descriptive error message\n+  */\n+protected\n+ObjectStreamException(String message)\n+{\n+  super(message);\n+}\n+\n+} // class ObjectStreamException\n+"}, {"sha": "7f807ca2f2dbb9ee8030e79d3d340aa48223cb81", "filename": "libjava/java/io/StreamCorruptedException.java", "status": "modified", "additions": 63, "deletions": 20, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FStreamCorruptedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FStreamCorruptedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FStreamCorruptedException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,31 +1,74 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* StreamCorruptedException.java -- Error in stream during serialization\n+   Copyright (C) 1998, 2000, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.io;\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 7, 2000.\n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Status:  Believed complete and correct. \n  */\n+  \n+/**\n+  * This exception is thrown when there is an error in the data that is\n+  * read from a stream during de-serialization.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  * @date February 7, 2000.\n+  */\n+public class StreamCorruptedException extends ObjectStreamException\n+{\n \n-/* Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Believed complete and correct.\n+/*\n+ * Constructors\n  */\n \n-public class StreamCorruptedException extends ObjectStreamException\n+/**\n+  * Create a new StreamCorruptedException without a descriptive error message\n+  */\n+public\n+StreamCorruptedException()\n {\n-  public StreamCorruptedException()\n-  {\n-    super();\n-  }\n-\n-  public StreamCorruptedException(String msg)\n-  {\n-    super(msg);\n-  }\n+  super();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Create a new StreamCorruptedException with a descriptive error message String\n+  *\n+  * @param message The descriptive error message\n+  */\n+public\n+StreamCorruptedException(String message)\n+{\n+  super(message);\n+}\n+\n+} // class StreamCorruptedException\n+"}, {"sha": "0ec75d657ef39281335ee521f4184664a8b2335b", "filename": "libjava/java/io/SyncFailedException.java", "status": "modified", "additions": 61, "deletions": 15, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FSyncFailedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FSyncFailedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FSyncFailedException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,29 +1,75 @@\n-// SyncFailedException.java\n+/* SyncFailedException.java -- The sync failed (?)\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.io;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 24, 1998 \n- */\n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to 1.1.\n  */\n \n+/**\n+  * I really wish I knew what caused this exception to be thrown.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  * @date September 24, 1998\n+  */\n public class SyncFailedException extends IOException\n {\n-  public SyncFailedException (String s)\n-  {\n-    super (s);\n-  }\n+\n+private static final long serialVersionUID = -2353342684412443330L;\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Create a new SyncFailedException without a descriptive error message\n+  */\n+SyncFailedException()\n+{\n+  super();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Create a new SyncFailedException with a descriptive error message String\n+  *\n+  * @param message The descriptive error message\n+  */\n+public\n+SyncFailedException(String message)\n+{\n+  super(message);\n+}\n+\n+} // class SyncFailedException\n+"}, {"sha": "378e992c4094a52beeff096503b94ad72dd3c770", "filename": "libjava/java/io/UTFDataFormatException.java", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FUTFDataFormatException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FUTFDataFormatException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FUTFDataFormatException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,75 @@\n-// UTFDataFormatException.java\n+/* UTFDataFormatException.java -- Bad format in UTF data\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.io;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 24, 1998 \n- */\n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to 1.1.\n  */\n \n+/**\n+  * When reading a UTF string from an input stream, this exception is thrown\n+  * to indicate that the data read is invalid.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  * @date September 24, 1998\n+  */\n public class UTFDataFormatException extends IOException\n {\n-  public UTFDataFormatException ()\n-  {\n-    super ();\n-  }\n-\n-  public UTFDataFormatException (String s)\n-  {\n-    super (s);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Create a new UTFDataFormatException without a descriptive error message\n+  */\n+public\n+UTFDataFormatException()\n+{\n+  super();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Create a new UTFDataFormatException with a descriptive error message String\n+  *\n+  * @param message The descriptive error message\n+  */\n+public\n+UTFDataFormatException(String message)\n+{\n+  super(message);\n+}\n+\n+} // class UTFDataFormatException\n+"}, {"sha": "8ea7f03225b2df8c1a9e7bd05b19896b6f5a7374", "filename": "libjava/java/io/UnsupportedEncodingException.java", "status": "modified", "additions": 63, "deletions": 20, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FUnsupportedEncodingException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fio%2FUnsupportedEncodingException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FUnsupportedEncodingException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,75 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* UnsupportedEncodingException.java -- The requested encoding isn't supported\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n-package java.io;\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-/**\n- * @author Per Bothner <bothner@cygnus.com>\n- * @date April 17, 1998.  \n- */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, plus online\n  * API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n-\n+ \n+/**\n+  * This exception is thrown when the requested character encoding is \n+  * not supported.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Per Bothner <bothner@cygnus.com>\n+  * @date April 17, 1998.\n+  */\n public class UnsupportedEncodingException extends IOException\n {\n-  public UnsupportedEncodingException ()\n-  {\n-    super();\n-  }\n-\n-  public UnsupportedEncodingException (String msg)\n-  {\n-    super(msg);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Create a new UnsupportedEncodingException without a descriptive error message\n+  */\n+public\n+UnsupportedEncodingException()\n+{\n+  super();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Create a new UnsupportedEncodingException with a descriptive error message String\n+  *\n+  * @param message The descriptive error message\n+  */\n+public\n+UnsupportedEncodingException(String message)\n+{\n+  super(message);\n+}\n+\n+} // class UnsupportedEncodingException\n+"}, {"sha": "b1e48fea0830c106fe9934c9df2a46eb6a1ea1bf", "filename": "libjava/java/lang/AbstractMethodError.java", "status": "modified", "additions": 54, "deletions": 21, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FAbstractMethodError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FAbstractMethodError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FAbstractMethodError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,67 @@\n-// AbstractMethodError.java\n+/* AbstractMethodError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998\n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+ * An <code>AbstractMethodError</code> is thrown when an application\n+ * attempts to access an abstract method.  Compilers typically detect\n+ * this error, but it can be thrown at run time if the definition of a \n+ * class has changed since the application was last compiled.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class AbstractMethodError extends IncompatibleClassChangeError\n {\n-  public AbstractMethodError ()\n-  {\n-    super ();\n-  }\n-\n-  public AbstractMethodError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = -1654391082989018462L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public AbstractMethodError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public AbstractMethodError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "542a9093c9ba6d53cde0c52d2fac701e98dec574", "filename": "libjava/java/lang/ArithmeticException.java", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FArithmeticException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FArithmeticException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FArithmeticException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,68 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* ArithmeticException.java -- exception thrown to indicate conditions\n+   like divide by zero.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional circumstances.\n+ * In this case an ArithmeticException is thrown when things like trying\n+ * to divide a number by zero.\n+ *\n+ * @since JDK 1.0\n+ *\n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class ArithmeticException extends RuntimeException\n {\n+  static final long serialVersionUID = 2256477558314496007L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public ArithmeticException()\n-  {\n-    super();\n-  }\n-\n-  public ArithmeticException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public ArithmeticException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "e30af6107c5994fc95e0e983aa1018724a95d30c", "filename": "libjava/java/lang/ArrayIndexOutOfBoundsException.java", "status": "modified", "additions": 58, "deletions": 19, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FArrayIndexOutOfBoundsException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FArrayIndexOutOfBoundsException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FArrayIndexOutOfBoundsException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,37 +1,76 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* ArrayIndexOutOfBoundsException.java -- exception thrown when accessing\n+   an illegal index.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions, in this case\n+ * when trying to access an illegal index.  This exception is thrown when\n+ * accessing an index which is either negative or greater than the size of\n+ * the array minus one.\n+ *\n+ * @since JDK 1.0\n+ *\n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class ArrayIndexOutOfBoundsException extends IndexOutOfBoundsException\n {\n-  public ArrayIndexOutOfBoundsException()\n-  {\n+  static final long serialVersionUID = -5116101128118950844L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n+  public ArrayIndexOutOfBoundsException() {\n     super();\n   }\n \n-  public ArrayIndexOutOfBoundsException(int index)\n-  {\n-    this(\"Array index out of range: \" + index);\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public ArrayIndexOutOfBoundsException(String s) {\n+    super(s);\n   }\n \n-  public ArrayIndexOutOfBoundsException(String msg)\n-  {\n-    super(msg);\n+  /**\n+   * Create an exception indicating the illegal index.\n+   */\n+  public ArrayIndexOutOfBoundsException(int index) {\n+    super(\"Array index out of range: \" + index);\n   }\n+\n }"}, {"sha": "c2446c6f54495c40ec5955e28197b9bf0891cdba", "filename": "libjava/java/lang/ArrayStoreException.java", "status": "modified", "additions": 54, "deletions": 19, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FArrayStoreException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FArrayStoreException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FArrayStoreException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,67 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* ArrayStoreException.java -- exception thrown to when trying to store an\n+   object into an array of a different type.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions, in this case\n+ * when trying to store an object into an array of a different type.\n+ *\n+ * @since JDK 1.0\n+ *\n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class ArrayStoreException extends RuntimeException\n {\n+  static final long serialVersionUID = -4522193890499838241L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public ArrayStoreException()\n-  {\n-    super();\n-  }\n-\n-  public ArrayStoreException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public ArrayStoreException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "1e0512e8b9ad67e05da35dfcb9a9ffc3f20d3918", "filename": "libjava/java/lang/ClassCastException.java", "status": "modified", "additions": 59, "deletions": 19, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FClassCastException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FClassCastException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassCastException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,72 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* ClassCastException.java -- exception thrown when incorrectly trying to \n+   cast an object to a subclass it does not belong to.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  In this case\n+ * when incorrectly trying to cast an object to a subclass it does not \n+ * belong to.  The following code generates a <code>ClassCastException</code>.\n+ * <pre>\n+ * Object o = new Vector();\n+ * String s = (String)o;\n+ * </pre>\n+ *\n+ * @since JDK 1.0\n+ *\n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class ClassCastException extends RuntimeException\n {\n+  static final long serialVersionUID = -9223365651070458532L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public ClassCastException()\n-  {\n-    super();\n-  }\n-\n-  public ClassCastException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public ClassCastException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "c41856ed545524acca656d120a0b2444ab676442", "filename": "libjava/java/lang/ClassCircularityError.java", "status": "modified", "additions": 52, "deletions": 21, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FClassCircularityError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FClassCircularityError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassCircularityError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,65 @@\n-// ClassCircularityError.java\n+/* ClassCircularityError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+ * A <code>ClassCircularityError</code> is thrown when a circular dependency\n+ * has been detected while initializing a class.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class ClassCircularityError extends LinkageError\n {\n-  public ClassCircularityError ()\n-  {\n-    super ();\n-  }\n-\n-  public ClassCircularityError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = 1054362542914539689L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public ClassCircularityError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public ClassCircularityError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "51866ba5ca445b21096d0c83c18f7daf4bfd9f8c", "filename": "libjava/java/lang/ClassFormatError.java", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FClassFormatError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FClassFormatError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassFormatError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,64 @@\n-// ClassFormatError.java\n+/* ClassFormatError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+ * A <code>ClassFormatError</code> is thrown when a Java Virtual Machine \n+ * unable to read a class file because the file is corrupted or cannot be\n+ * interpreted as a class file.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ */\n public class ClassFormatError extends LinkageError\n {\n-  public ClassFormatError ()\n-  {\n-    super ();\n-  }\n-\n-  public ClassFormatError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = -8420114879011949195L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public ClassFormatError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public ClassFormatError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "23e199a27f093f40c9f372ceab41a8052b44cec8", "filename": "libjava/java/lang/CloneNotSupportedException.java", "status": "modified", "additions": 58, "deletions": 19, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FCloneNotSupportedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FCloneNotSupportedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FCloneNotSupportedException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,71 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* CloneNotSupportedException.java -- exception thrown to indicate that \n+   the object calling the clone method of Object does not implement the \n+   Cloneable interface.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * Thrown to indicate an object should not or could not be cloned.  \n+ * For example <code>CloneNotSupportedException</code> is thrown by\n+ * the <code>clone</code> method of <code>Object</code> to indicate \n+ * that object does not implement the <code>Cloneable</code> interface.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class CloneNotSupportedException extends Exception\n {\n+  static final long serialVersionUID = 5195511250079656443L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public CloneNotSupportedException()\n-  {\n-    super();\n-  }\n-\n-  public CloneNotSupportedException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public CloneNotSupportedException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "5a0c3cc840d12a1bb7fac18f0b05fdba97d1623e", "filename": "libjava/java/lang/Error.java", "status": "modified", "additions": 58, "deletions": 21, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,71 @@\n-// Error.java\n+/* Error.java - Indication of fatal abnormal conditions\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+ * Applications should not try to catch errors since they indicate \n+ * abnormal conditions.  An abnormal condition is something which should not\n+ * occur.  A few errors, like <code>ThreadDeath</code> error do normally\n+ * occur, but most applications should not catch it.  \n+ * <p>\n+ * A method is not required to declare any subclass of <code>Error</code> in \n+ * its <code>throws</code> clause which might be thrown but not caught while\n+ * executing the method..\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class Error extends Throwable\n {\n-  public Error ()\n-  {\n-    super ();\n-  }\n-\n-  public Error (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = 4980196508277280342L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public Error()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public Error(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "90fc888686e9b22db0950fd52b97769c9d1d91e2", "filename": "libjava/java/lang/Exception.java", "status": "modified", "additions": 54, "deletions": 19, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,67 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Exception.java -- generic exception thrown to indicate an exceptional\n+   condition has occurred.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with the cause of the exception, such as\n+ * mouse movements, keyboard clicking, etc.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class Exception extends Throwable\n {\n+  static final long serialVersionUID = -3387516993124229948L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public Exception()\n-  {\n-    super();\n-  }\n-\n-  public Exception(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public Exception(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "3ecc5f5e256cdb19570f1e45df0c927d11b2d2f4", "filename": "libjava/java/lang/ExceptionInInitializerError.java", "status": "modified", "additions": 127, "deletions": 68, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FExceptionInInitializerError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FExceptionInInitializerError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FExceptionInInitializerError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,85 +1,144 @@\n-// ExceptionInInitializerError.java\n+/* ExceptionInInitializerError.java \n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.lang;\n+\n import java.io.PrintStream;\n import java.io.PrintWriter;\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+ * An <code>ExceptionInInitializerError</code> is thrown when an \n+ * unexpected exception has occurred in a static initializer or the\n+ * initializer for a static variable.\n+ *\n+ * @since JDK 1.1\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998 \n+ */\n public class ExceptionInInitializerError extends LinkageError\n {\n-  public ExceptionInInitializerError ()\n-  {\n-    super ();\n-    exception = null;\n-  }\n-\n-  public ExceptionInInitializerError (String msg)\n-  {\n-    super (msg);\n-    exception = null;\n-  }\n-\n-  public ExceptionInInitializerError (Throwable e)\n-  {\n-    super (e.toString());\n-    exception = e;\n-  }\n-\n-  public Throwable getException ()\n-  {\n-    return exception;\n-  }\n-\n-  public void printStackTrace ()\n-  {\n-    if (exception != null)\n-      {\n-\tSystem.err.print (this.getClass().getName() + \": \");\n-\texception.printStackTrace ();\n-      }\n-    else\n-      super.printStackTrace ();\n-  }\n-\n-  public void printStackTrace (PrintStream ps)\n-  {\n-    if (exception != null)\n-      {\n-\tps.print (this.getClass().getName() + \": \");\n-\texception.printStackTrace (ps);\n-      }\n-    else\n-      super.printStackTrace (ps);\n-  }\n-\n-  public void printStackTrace (PrintWriter pw)\n-  {\n-    if (exception != null)\n-      {\n-\tpw.print (this.getClass().getName() + \": \");\n-\texception.printStackTrace (pw);\n-      }\n-    else\n-      super.printStackTrace (pw);\n-  }\n-\n-  // The exception that caused this error.\n-  private Throwable exception;\n+  static final long serialVersionUID = 1521711792217232256L;\n+\n+  private Throwable exception = null;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public ExceptionInInitializerError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public ExceptionInInitializerError(String s)\n+    {\n+      super(s);\n+    }\n+\n+  /**\n+   * Creates an error an saves a reference to the <code>Throwable</code>\n+   * object.\n+   *\n+   * @param t the exception thrown\n+   */\n+  public ExceptionInInitializerError(Throwable t)\n+    {\n+      super(t.toString());\n+      exception = t;\n+    }\n+\n+  /** \n+   * Return the exception that caused this error to be created.\n+   * @return the stored <code>Throwable</code> object or <code>null</code>\n+   * if this <code>ExceptionInInitializerError</code> has no stored\n+   * <code>Throwable</code> object.\n+   */\n+  public Throwable getException()\n+    {\n+      return exception;\n+    }\n+\n+  /**\n+   * Print a stack trace of the exception that occurred.\n+   */\n+  public void printStackTrace()\n+    {\n+      if (exception == null)\n+\t{\n+\t  super.printStackTrace();\n+\t}\n+      else\n+\t{\n+\t  System.err.print(this.getClass() + \": \");\n+\t  exception.printStackTrace();\n+\t}\n+    }\n+\n+  /**\n+   * Print a stack trace of the exception that occurred to \n+   * the specified <code>PrintStream</code>.\n+   */\n+  public void printStackTrace(PrintStream ps)\n+    {\n+      if (exception == null)\n+\t{\n+\t  super.printStackTrace(ps);\n+\t}\n+      else\n+\t{\n+\t  ps.print(this.getClass() + \": \");\n+\t  exception.printStackTrace(ps);\n+\t}\n+    }\n+\n+  /**\n+   * Print a stack trace of the exception that occurred to \n+   * the specified <code>PrintWriter</code>.\n+   */\n+  public void printStackTrace(PrintWriter pw)\n+    {\n+      if (exception == null)\n+\t{\n+\t  super.printStackTrace(pw);\n+\t}\n+      else\n+\t{\n+\t  pw.print(this.getClass() + \": \");\n+\t  exception.printStackTrace(pw);\n+\t}\n+    }\n }"}, {"sha": "3fbde947036ff8390657d539bd651dab1f15acf9", "filename": "libjava/java/lang/IllegalAccessError.java", "status": "modified", "additions": 57, "deletions": 22, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIllegalAccessError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIllegalAccessError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIllegalAccessError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,69 @@\n-// IllegalAccessError.java\n+/* IllegalAccessError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n+ * Status:  Believed complete and correct. \n  */\n \n+/**\n+ * An <code>IllegalAccessError</code> is thrown when an attempt is made to \n+ * call a method, or access or modify a field that the application does not\n+ * have access to.  Because this error is usually caught by a compiler, \n+ * the error only occurs at runtime when the definition of a class has\n+ * changed in a way that is incompatible with the previously compiled \n+ * application.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class IllegalAccessError extends IncompatibleClassChangeError\n {\n-  public IllegalAccessError ()\n-  {\n-    super ();\n-  }\n-\n-  public IllegalAccessError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = -8988904074992417891L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public IllegalAccessError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public IllegalAccessError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "af15fd2d7c725e904cee8adb3ed014044513e185", "filename": "libjava/java/lang/IllegalAccessException.java", "status": "modified", "additions": 59, "deletions": 19, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIllegalAccessException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIllegalAccessException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIllegalAccessException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,72 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* IllegalAccessException.java -- exception thrown when trying to load a \n+   class that is not public and in another package.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * Thrown in two cases.  The first is when try to load a class that is\n+ * not public and in another package using specific methods from \n+ * <code>ClassLoader</code> and <code>Class</code>.  The second case is\n+ * when trying to create a new instance of a class to which you do not have\n+ * access to the zero argument constructor as in using the \n+ * <code>newsInstance</code> method of class <code>Class</code>.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class IllegalAccessException extends Exception\n {\n+  static final long serialVersionUID = 6616958222490762034L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public IllegalAccessException()\n-  {\n-    super();\n-  }\n-\n-  public IllegalAccessException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public IllegalAccessException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "7d2d547015a7d7dacdd399d35b5a9f7bcfaf66e3", "filename": "libjava/java/lang/IllegalArgumentException.java", "status": "modified", "additions": 54, "deletions": 19, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIllegalArgumentException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIllegalArgumentException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIllegalArgumentException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,67 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* IllegalArgumentException.java -- exception may be thrown when a method\n+   is passed an illegal or inappropriate argument.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * When a method is passed an illegal or inappropriate argument \n+ * this exception may be thrown.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class IllegalArgumentException extends RuntimeException\n {\n+  static final long serialVersionUID = -5365630128856068164L;\n+  \n+  /**\n+   * Create an exception without a message.\n+   */\n   public IllegalArgumentException()\n-  {\n-    super();\n-  }\n-\n-  public IllegalArgumentException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public IllegalArgumentException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "dcaa76570a8082a04052a863257ce732c341b453", "filename": "libjava/java/lang/IllegalMonitorStateException.java", "status": "modified", "additions": 57, "deletions": 19, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIllegalMonitorStateException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIllegalMonitorStateException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIllegalMonitorStateException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,70 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* IllegalMonitorStateException.java -- exception thrown when a thread \n+   attempts to wait on an object's monitor.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * If a thread attempts to wait on an object's monitor then\n+ * <code>IllegalMonitorStateException</code> can be thrown.  This\n+ * exception is also thrown to give a message to other threads also waiting\n+ * on an object's monitor without owning the monitor.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class IllegalMonitorStateException extends RuntimeException\n {\n+  static final long serialVersionUID = 3713306369498869069L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public IllegalMonitorStateException()\n-  {\n-    super();\n-  }\n-\n-  public IllegalMonitorStateException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public IllegalMonitorStateException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "1f154c0a41ddbbfddfe27c1473f5d2d7f82e4631", "filename": "libjava/java/lang/IllegalStateException.java", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIllegalStateException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIllegalStateException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIllegalStateException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,68 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* IllegalStateException.java -- exception thrown when invoking a method at\n+   an illegal or inappropriate time.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * Invoking a method at an illegal or inappropriate time can result\n+ * in an <code>IllegalStateException</code>.\n+ *\n+ * @since JDK 1.1\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class IllegalStateException extends RuntimeException\n {\n+  static final long serialVersionUID = -1848914673093119416L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public IllegalStateException()\n-  {\n-    super();\n-  }\n-\n-  public IllegalStateException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public IllegalStateException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "7b4693ea49f95edd2afe9e46aa2598ac26dd1dee", "filename": "libjava/java/lang/IllegalThreadStateException.java", "status": "modified", "additions": 56, "deletions": 19, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIllegalThreadStateException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIllegalThreadStateException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIllegalThreadStateException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,69 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* IllegalThreadStateException.java -- exception thrown when trying to \n+   suspend or resume an object of class Thread when it is not in an \n+   appropriate state for the operation.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * When trying to <code>suspend</code> or <code>resume</code> an object\n+ * of class <code>Thread</code> when it is not in an appropriate state\n+ * for the operation.\n+ *\n+ * @since JDK 1.0\n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class IllegalThreadStateException extends IllegalArgumentException\n {\n+  static final long serialVersionUID = -7626246362397460174L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public IllegalThreadStateException()\n-  {\n-    super();\n-  }\n-\n-  public IllegalThreadStateException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public IllegalThreadStateException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "5a06b9a14aba90cf7d7c2dc59bd3e89749d8dca9", "filename": "libjava/java/lang/IncompatibleClassChangeError.java", "status": "modified", "additions": 54, "deletions": 22, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIncompatibleClassChangeError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIncompatibleClassChangeError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIncompatibleClassChangeError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,66 @@\n-// IncompatibleClassChangeError.java\n+/* IncompatibleClassChangeError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n+ * Status:  Believed complete and correct. \n  */\n \n+/**\n+ * An <code>IncompatibleClassChangeError</code> is thrown when the \n+ * definition of a class used by the currently executing method has\n+ * changed in an incompatible way.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class IncompatibleClassChangeError extends LinkageError\n {\n-  public IncompatibleClassChangeError ()\n-  {\n-    super ();\n-  }\n-\n-  public IncompatibleClassChangeError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = -4914975503642802119L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public IncompatibleClassChangeError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public IncompatibleClassChangeError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "8ad884403a013a73bf86f78617c5549a8515755a", "filename": "libjava/java/lang/IndexOutOfBoundsException.java", "status": "modified", "additions": 59, "deletions": 19, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIndexOutOfBoundsException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FIndexOutOfBoundsException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FIndexOutOfBoundsException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,72 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* IndexOutOfBoundsException.java -- exception thrown when attempting to \n+   access an index which is out of bounds on objects like String, Array,\n+   or Vector.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * This exception can be thrown to indicate an attempt to access an\n+ * index which is out of bounds on objects like String, Array, or Vector.\n+ * Usually any negative integer less than or equal to -1 and positive \n+ * integer greater than or equal to the size of the object is an index\n+ * which would be out of bounds.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class IndexOutOfBoundsException extends RuntimeException\n {\n+  static final long serialVersionUID = 234122996006267687L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public IndexOutOfBoundsException()\n-  {\n-    super();\n-  }\n-\n-  public IndexOutOfBoundsException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public IndexOutOfBoundsException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "788fac51ff139c3159d903b86be18f22a36ed143", "filename": "libjava/java/lang/InstantiationError.java", "status": "modified", "additions": 57, "deletions": 22, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FInstantiationError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FInstantiationError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInstantiationError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,69 @@\n-// InstantiationError.java\n+/* InstantiationError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n+ * Status:  Believed complete and correct. \n  */\n \n+/**\n+ * An <code>InstantiationError</code> is thrown when an attempt is made to \n+ * create an instance of an abstract class or an interface.  Because this \n+ * error is usually caught by a compiler, \n+ * the error only occurs at runtime when the definition of a class has\n+ * changed in a way that is incompatible with the previously compiled \n+ * application.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class InstantiationError extends IncompatibleClassChangeError\n {\n-  public InstantiationError ()\n-  {\n-    super ();\n-  }\n-\n-  public InstantiationError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = -4885810657349421204L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public InstantiationError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public InstantiationError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "19237d74d2f4cb3d45646f07878bbe3a5f0deed9", "filename": "libjava/java/lang/InstantiationException.java", "status": "modified", "additions": 56, "deletions": 19, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FInstantiationException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FInstantiationException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInstantiationException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,69 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* InstantiationException.java -- exception thrown when trying to instantiate\n+   interfaces and abstract classes using the newInstance method of class Class.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.\n+ * Interfaces and abstract classes cannot be instantiated using the \n+ * <code>newInstance</code> method of class <code>Class</code>.  Trying\n+ * to do so results in this exception being thrown.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class InstantiationException extends Exception\n {\n+  static final long serialVersionUID = -8441929162975509110L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public InstantiationException()\n-  {\n-    super();\n-  }\n-\n-  public InstantiationException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public InstantiationException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "379d465642f508996bfb250b838acee37961106b", "filename": "libjava/java/lang/InternalError.java", "status": "modified", "additions": 53, "deletions": 22, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FInternalError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FInternalError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInternalError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,65 @@\n-// InternalError.java\n+/* InternalError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n+ * Status:  Believed complete and correct. \n  */\n \n+/**\n+ * An <code>InternalError</code> is thrown when a mystical error has\n+ * occurred in the Java Virtual Machine.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class InternalError extends VirtualMachineError\n {\n-  public InternalError ()\n-  {\n-    super ();\n-  }\n-\n-  public InternalError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = -9062593416125562365L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public InternalError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public InternalError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "ca55fa662cce63cf458f4a3898c329f4074a956c", "filename": "libjava/java/lang/InterruptedException.java", "status": "modified", "additions": 57, "deletions": 19, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FInterruptedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FInterruptedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInterruptedException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,70 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* InterruptedException.java -- exception thrown when a thread interrupts \n+   another thread which was previously sleeping, waiting, or paused in some \n+   other way.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.\n+ * Thrown when a thread interrupts another thread which was previously \n+ * sleeping, waiting, or paused in some other way.  See the \n+ * <code>interrupt</code> method of class <code>Thread</code>.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class InterruptedException extends Exception\n {\n+  static final long serialVersionUID = 6700697376100628473L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public InterruptedException()\n-  {\n-    super();\n-  }\n-\n-  public InterruptedException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public InterruptedException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "8de9dd2c7492c8fd6bc08d996acf5b0e43b7c1ce", "filename": "libjava/java/lang/LinkageError.java", "status": "modified", "additions": 54, "deletions": 22, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FLinkageError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FLinkageError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FLinkageError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,66 @@\n-// LinkageError.java\n+/* LinkageError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n+ * Status:  Believed complete and correct. \n  */\n \n+/**\n+ * Subclasses of <code>LinkageError</code> are thrown to indicate \n+ * a class which is depended upon by another class has incompatibly \n+ * changed after the compilation of the latter class.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class LinkageError extends Error\n {\n-  public LinkageError ()\n-  {\n-    super ();\n-  }\n-\n-  public LinkageError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = 3579600108157160122L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public LinkageError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public LinkageError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "8af136e6242308cff6b56ab0ef922958bbddcf76", "filename": "libjava/java/lang/NegativeArraySizeException.java", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNegativeArraySizeException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNegativeArraySizeException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNegativeArraySizeException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,68 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* NegativeArraySizeException.java -- exception thrown when an attempt is \n+   made to create an array with a negative size.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * Thrown when an attempt is made to create an array with a negative\n+ * size.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class NegativeArraySizeException extends RuntimeException\n {\n+  static final long serialVersionUID = -8960118058596991861L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public NegativeArraySizeException()\n-  {\n-    super();\n-  }\n-\n-  public NegativeArraySizeException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public NegativeArraySizeException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "9c123c0498ecfec075e505752f679827ea0e7306", "filename": "libjava/java/lang/NoClassDefFoundError.java", "status": "modified", "additions": 57, "deletions": 22, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNoClassDefFoundError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNoClassDefFoundError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNoClassDefFoundError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,69 @@\n-// NoClassDefFoundError.java\n+/* NoClassDefFoundError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n+ * Status:  Believed complete and correct. \n  */\n \n+/**\n+ * A <code>NoClassDefFoundError</code> is thrown when a classloader or the\n+ * Java Virtual Machine tries to load a class and no definition of the class\n+ * can be found.  This could happen when using the <code>new</code> expression\n+ * or during a normal method call.  The reason this would occur at runtime is \n+ * because the missing class definition existed when the currently executing \n+ * class was compiled, but now that definition cannot be found.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class NoClassDefFoundError extends LinkageError\n {\n-  public NoClassDefFoundError ()\n-  {\n-    super ();\n-  }\n-\n-  public NoClassDefFoundError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = 9095859863287012458L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public NoClassDefFoundError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public NoClassDefFoundError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "22cac1f2e3cb383095617a276cf125b93017578d", "filename": "libjava/java/lang/NoSuchFieldError.java", "status": "modified", "additions": 54, "deletions": 22, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNoSuchFieldError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNoSuchFieldError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNoSuchFieldError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,66 @@\n-// NoSuchFieldError.java\n+/* NoSuchFieldError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n+ * Status:  Believed complete and correct. \n  */\n \n+/**\n+ * A <code>NoSuchFieldError</code> is thrown if an application attempts\n+ * to access the field of an object and that object no longer has that \n+ * field.  \n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class NoSuchFieldError extends IncompatibleClassChangeError\n {\n-  public NoSuchFieldError ()\n-  {\n-    super ();\n-  }\n-\n-  public NoSuchFieldError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = -3456430195886129035L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public NoSuchFieldError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public NoSuchFieldError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "e01eff7b1894b9e84772c470772b2041a5b78bf4", "filename": "libjava/java/lang/NoSuchFieldException.java", "status": "modified", "additions": 54, "deletions": 19, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNoSuchFieldException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNoSuchFieldException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNoSuchFieldException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,67 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* NoSuchFieldException.java -- exception thrown to indicate the class does\n+   not have the specified field.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * Thrown to indicate the class does not have the specified field.\n+ *\n+ * @since JDK 1.1\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class NoSuchFieldException extends Exception\n {\n+  static final long serialVersionUID = -6143714805279938260L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public NoSuchFieldException()\n-  {\n-    super();\n-  }\n-\n-  public NoSuchFieldException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public NoSuchFieldException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "d169b51cb19a8a205c65cf82986dcd86aff67fae", "filename": "libjava/java/lang/NoSuchMethodError.java", "status": "modified", "additions": 54, "deletions": 22, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNoSuchMethodError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNoSuchMethodError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNoSuchMethodError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,66 @@\n-// NoSuchMethodError.java\n+/* NoSuchMethodError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n+ * Status:  Believed complete and correct. \n  */\n \n+/**\n+ * A <code>NoSuchMethodError</code> is thrown if an application attempts\n+ * to access a method of a class, and that class no longer has that \n+ * method.  \n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class NoSuchMethodError extends IncompatibleClassChangeError\n {\n-  public NoSuchMethodError ()\n-  {\n-    super ();\n-  }\n-\n-  public NoSuchMethodError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = -3765521442372831335L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public NoSuchMethodError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public NoSuchMethodError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "b4b19fa5489592534a9e53c35d509c13349046b1", "filename": "libjava/java/lang/NoSuchMethodException.java", "status": "modified", "additions": 54, "deletions": 19, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNoSuchMethodException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNoSuchMethodException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNoSuchMethodException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,67 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* NoSuchMethodException.java -- exception thrown to indicate the class\n+   does not have the specified method.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * Thrown to indicate the class does not have the specified method.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class NoSuchMethodException extends Exception\n {\n+  static final long serialVersionUID = 5034388446362600923L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public NoSuchMethodException()\n-  {\n-    super();\n-  }\n-\n-  public NoSuchMethodException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public NoSuchMethodException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "6ba13f5918cab72fc05894640c968308f11b3515", "filename": "libjava/java/lang/NullPointerException.java", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNullPointerException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNullPointerException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNullPointerException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,68 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* NullPointerException.java -- exception thrown when attempting to use null\n+   where an object is required.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * Thrown when attempting to use <code>null</code> where an object\n+ * is required, such as when accessing an instance method of a null object.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class NullPointerException extends RuntimeException\n {\n+  static final long serialVersionUID = 5162710183389028792L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public NullPointerException()\n-  {\n-    super();\n-  }\n-\n-  public NullPointerException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public NullPointerException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "5978f7e94e869eba8b6a78c7573022d765bfa8be", "filename": "libjava/java/lang/NumberFormatException.java", "status": "modified", "additions": 56, "deletions": 19, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNumberFormatException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FNumberFormatException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FNumberFormatException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,69 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* NumberFormatException.java -- exception may be thrown when attempting to\n+   convert a String to one of the numeric types, but the operation fails.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * Can be thrown when attempting to convert a <code>String</code> to \n+ * one of the numeric types, but the operation fails because the string\n+ * has the wrong format.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class NumberFormatException extends IllegalArgumentException\n {\n+  static final long serialVersionUID = -2848938806368998894L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public NumberFormatException()\n-  {\n-    super();\n-  }\n-\n-  public NumberFormatException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public NumberFormatException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "69693e9d0da2d81cd2a4e1a6b9f391e53b6987b1", "filename": "libjava/java/lang/OutOfMemoryError.java", "status": "modified", "additions": 53, "deletions": 21, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FOutOfMemoryError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FOutOfMemoryError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FOutOfMemoryError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,66 @@\n-// OutOfMemoryError.java\n+/* OutOfMemoryError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n+ * Status:  Believed complete and correct. \n  */\n \n+/**\n+ * When the Java Virtual Machine is unable to allocate an object because it \n+ * is out of memory and no more memory could be made available by the \n+ * garbage collector an <code>OutOfMemoryError</code> is thrown.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class OutOfMemoryError extends VirtualMachineError\n {\n-  public OutOfMemoryError ()\n-  {\n-    super ();\n-  }\n-\n-  public OutOfMemoryError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = 8228564086184010517L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public OutOfMemoryError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public OutOfMemoryError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "c3960dc7acd3a034c67ae1a8973312422b3c3a2a", "filename": "libjava/java/lang/RuntimeException.java", "status": "modified", "additions": 57, "deletions": 19, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FRuntimeException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FRuntimeException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FRuntimeException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,70 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* RuntimeException.java -- all exceptions which are subclasses of this class\n+   can be thrown at any time during the execution of a Java virtual machine.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * All exceptions which are subclasses of <code>RuntimeException</code>\n+ * can be thrown at any time during the execution of a Java virtual machine.\n+ * Methods which throw these exceptions are not required to declare them\n+ * in their throws clause.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class RuntimeException extends Exception\n {\n+  static final long serialVersionUID = -7034897190745766939L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public RuntimeException()\n-  {\n-    super();\n-  }\n-\n-  public RuntimeException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public RuntimeException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "25db424876231ba571bdd6040d574eccb5f42907", "filename": "libjava/java/lang/SecurityException.java", "status": "modified", "additions": 55, "deletions": 18, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FSecurityException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FSecurityException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSecurityException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,31 +1,68 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* SecurityException.java -- exception thrown to indicate a security \n+   violation.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * The security manager will throw this exception to indicate a security\n+ * violation.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class SecurityException extends RuntimeException\n {\n+  static final long serialVersionUID = 6878364983674394167L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public SecurityException()\n-  {\n-    super();\n-  }\n-\n-  public SecurityException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public SecurityException(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "345bb22628d51ed9311aeffd1f60dc9e40db21a8", "filename": "libjava/java/lang/SecurityManager.java", "status": "modified", "additions": 754, "deletions": 257, "changes": 1011, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FSecurityManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FSecurityManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSecurityManager.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,268 +1,765 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* java.lang.SecurityManager\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-// SecurityManager\n \n package java.lang;\n \n+import java.net.*;\n+import java.util.*;\n+import java.io.*;\n+\n /**\n- * @author Anthony Green <green@cygnus.com>\n- * @date October 5, 1998.  \n- */\n+ ** SecurityManager is a class you can extend to create\n+ ** your own Java security policy.  By default, there is\n+ ** no SecurityManager installed in 1.1, which means that\n+ ** all things are permitted to all people.<P>\n+ **\n+ ** The default methods in this class deny all\n+ ** things to all people.\n+ **\n+ ** @author  John Keiser\n+ ** @version 1.1.0, 31 May 1998\n+ ** @since JDK1.0\n+ **/\n+public class SecurityManager {\n+\t/** Tells whether or not the SecurityManager is currently\n+\t ** performing a security check.\n+\t **/\n+\tprotected boolean inCheck;\n+\n+\t/** Tells whether or not the SecurityManager is currently\n+\t ** performing a security check.\n+\t **\n+\t ** @return whether or not the SecurityManager is\n+\t **         currently performing a security check.\n+\t **/\n+\tpublic boolean getInCheck() {\n+\t\treturn inCheck;\n+\t}\n \n-/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n- */\n+\t/** Get a list of all the classes currently executing\n+\t ** methods on the Java stack.  getClassContext()[0] is\n+\t ** the currently executing method\n+\t ** <STRONG>Spec Note:</STRONG> does not say whether\n+\t ** the stack will include the getClassContext() call or\n+\t ** the one just before it.\n+\t **\n+\t ** @return an array containing all the methods on classes\n+\t **         on the Java execution stack.\n+\t **/\n+\tprotected Class[] getClassContext() {\n+\t\treturn VMSecurityManager.getClassContext();\n+\t}\n \n-import java.io.*;\n-import java.net.*;\n+\t/** Find the ClassLoader for the most recent class on the\n+\t ** stack that was loaded by an explicit ClassLoader.  If\n+\t ** everything on the stack was loaded by the system\n+\t ** classloader, null is returned.\n+\t **\n+\t ** @return the most recent ClassLoader on the execution\n+\t **         stack.\n+\t **/\n+\tprotected ClassLoader currentClassLoader() {\n+\t\treturn VMSecurityManager.currentClassLoader();\n+\t}\n+\n+\t/** Find the most recent class on the stack that was\n+\t ** loaded by an explicit ClassLoader.  If everything on\n+\t ** the stack was loaded by the system classloader, null\n+\t ** is returned.\n+\t **\n+\t ** @return the most recent loaded Class on the execution\n+\t **         stack.\n+\t **/\n+\tprotected Class currentLoadedClass() {\n+\t\tClass[] c = getClassContext();\n+\t\tfor(int i=0;i<c.length;i++) {\n+\t\t\tif(c[i].getClassLoader() != null) {\n+\t\t\t\treturn c[i];\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\t/** Get the depth on the execution stack of the most\n+\t ** recent class that was loaded by an explicit\n+\t ** ClassLoader.  This can be used as an index into\n+\t ** getClassContext().\n+\t **\n+\t ** @return the index of the most recent loaded Class on\n+\t **         the execution stack.\n+\t **/\n+\tprotected int classLoaderDepth() {\n+\t\tClass[] c = getClassContext();\n+\t\tfor(int i=0;i<c.length;i++) {\n+\t\t\tif(c[i].getClassLoader() != null) {\n+\t\t\t\treturn i;\n+\t\t\t}\n+\t\t}\n+\t\treturn -1;\n+\t}\n+\n+\t/** Tell whether there is a class loaded with an explicit\n+\t ** ClassLoader on the stack.\n+\t **\n+\t ** @return whether there is a class loaded with an\n+\t **         explicit ClassLoader on the stack.\n+\t **/\n+\tprotected boolean inClassLoader() {\n+\t\treturn classLoaderDepth() != -1;\n+\t}\n+\n+\n+\t/** Get the depth of a particular class on the execution\n+\t ** stack.\n+\t **\n+\t ** @param className the fully-qualified name of the class\n+\t **        to search for on the stack.\n+\t ** @return the index of the class on the stack, or -1 if\n+\t **         the class is not on the stack.\n+\t **/\n+\tprotected int classDepth(String className) {\n+\t\tClass[] c = getClassContext();\n+\t\tfor(int i=0;i<c.length;i++) {\n+\t\t\tif(className.equals(c[i].getName())) {\n+\t\t\t\treturn i;\n+\t\t\t}\n+\t\t}\n+\t\treturn -1;\n+\t}\n+\n+\t/** Tell whether the specified class is on the execution\n+\t ** stack.\n+\t **\n+\t ** @param className the fully-qualified name of the class\n+\t **        to search for on the stack.\n+\t ** @return whether the specified class is on the\n+\t **         execution stack.\n+\t **/\n+\tprotected boolean inClass(String className) {\n+\t\treturn classDepth(className) != -1;\n+\t}\n+\n+\t/** Get an implementation-dependent Object that contains\n+\t ** enough information about the current environment to be\n+\t ** able to perform standard security checks later.  This\n+\t ** is used by trusted methods that need to verify that\n+\t ** their callers have sufficient access to perform\n+\t ** certain operations.<P>\n+\t **\n+\t ** Currently the only methods that use this are checkRead()\n+\t ** and checkConnect().\n+\t **\n+\t ** @see checkConnect(java.lang.String,int,java.lang.Object)\n+\t ** @see checkRead(java.lang.String,java.lang.Object)\n+\t **/\n+\tpublic Object getSecurityContext() {\n+\t\treturn new SecurityContext(getClassContext());\n+\t}\n \n-public abstract class SecurityManager\n-{\n-  protected boolean inCheck = false;\n-\n-  public void checkAccept (String host, int port)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkAccess (Thread thrd)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkAccess (ThreadGroup thrdGroup)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkAwtEventQueueAccess ()\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkConnect (String host, int prt)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkConnect (String host, int prt, Object ctx)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkCreateClassLoader ()\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkDelete (String fileName)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkExec (String prog)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkExit (int stat)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkLink (String lib)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkListen (int lport)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkMemberAccess (Class cl, int mtype)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkMulticast (InetAddress maddr)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkMulticast (InetAddress maddr, byte ttl)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkPackageAccess (String pkg)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkPackageDefinition (String pkg)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkPermission (java.security.Permission perm)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkPrintJobAccess ()\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkPropertiesAccess ()\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkPropertyAccess (String prop)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkPropertyAccess (String prop, String defval)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkRead (FileDescriptor fd)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkRead (String fileName)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkRead (String fileName, Object ctx)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkSecurityAccess (String action)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkSetFactory ()\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkSystemClipboardAccess ()\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public boolean checkTopLevelWindow (Object window)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkWrite (FileDescriptor fd)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  public void checkWrite (String fileName)\n-    {\n-      throw new SecurityException();\n-    }\n-\n-  // Note: this method is deprecated in JDK 1.2\n-  protected /* native */ int classDepth (String className)\n-    {\n-      Class[] classStack = getClassContext ();\n-      for (int i = 0; i < classStack.length; i++)\n-\tif (classStack[i].getName().compareTo(className) == 0)\n-\t  return i;\n-\n-      return -1;\n-    }\n-\n-  // Note: this method is deprecated in JDK 1.2\n-  protected /* native */ int classLoaderDepth ()\n-    {\n-      Class[] classStack = getClassContext ();\n-      for (int i = 0; i < classStack.length; i++)\n-\tif (classStack[i].getClassLoader() != null)\n-\t  return i;\n-\n-      return -1;\n-    }\n-\n-  protected /* native */ ClassLoader currentClassLoader ()\n-    {\n-      Class[] classStack = getClassContext ();\n-      for (int i = 0; i < classStack.length; i++)\n-\t{\n-\t  ClassLoader loader = classStack[i].getClassLoader();\n-\t  if (loader != null)\n-\t    return loader;\n-\t}\n-\n-      return null;\n-    }\n-\n-  protected /* native */ Class currentLoadedClass ()\n-    {\n-      Class[] classStack = getClassContext ();\n-      for (int i = 0; i < classStack.length; i++)\n-\t{\n-\t  ClassLoader loader = classStack[i].getClassLoader();\n-\t  if (loader != null)\n-\t    return classStack[i];\n-\t}\n-      \n-      return null;\n-    }\n-\n-  protected /* native */ Class[] getClassContext ()\n-    {\n-      return new Class[0];\n-    }\n-\n-  // Note: this method is deprecated in JDK 1.2\n-  public boolean getInCheck ()\n-    {\n-      return inCheck;\n-    }\n-\n-  public Object getSecurityContext ()\n-    {\n-      // FIXME: This has yet to be implemented.\n-      return new String(\"\");\n-    }\n-\n-  public ThreadGroup getThreadGroup ()\n-    {\n-      return Thread.currentThread().getThreadGroup();\n-    }\n-\n-  protected boolean inClass (String className)\n-    {\n-      return (classDepth (className) != -1);\n-    }\n-\n-  protected boolean inClassLoader ()\n-    {\n-      return (classLoaderDepth () != -1);\n-    }\n-\n-  protected SecurityManager ()\n-    {\n-      if (System.getSecurityManager () != null)\n-\tthrow new SecurityException ();\n-    }\n+\t/** Check if the current thread is allowed to create a\n+\t ** ClassLoader.<P>\n+\t **\n+\t ** This method is called from ClassLoader.ClassLoader(),\n+\t ** in other words, whenever a ClassLoader is created.<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.lang.ClassLoader#ClassLoader()\n+\t **/\n+\tpublic void checkCreateClassLoader() {\n+\t\tthrow new SecurityException(\"Cannot create new ClassLoaders.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to modify this\n+\t ** other Thread.<P>\n+\t **\n+\t ** Called by Thread.stop(), suspend(), resume(), and\n+\t ** interrupt(), destroy(), setPriority(), setName() and\n+\t ** setDaemon().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param g the Thread to check against\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.lang.Thread#stop()\n+\t ** @see java.lang.Thread#suspend()\n+\t ** @see java.lang.Thread#resume()\n+\t ** @see java.lang.Thread#interrupt()\n+\t ** @see java.lang.Thread#destroy()\n+\t ** @see java.lang.Thread#setPriority(int)\n+\t ** @see java.lang.Thread#setName(java.lang.String)\n+\t ** @see java.lang.Thread#setDaemon(boolean)\n+\t **/\n+\tpublic void checkAccess(Thread t) {\n+\t\tthrow new SecurityException(\"Cannot modify Threads.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to modify this\n+\t ** ThreadGroup.<P>\n+\t **\n+\t ** Called by Thread.Thread() (to add a thread to the\n+\t ** ThreadGroup), ThreadGroup.ThreadGroup() (to add this\n+\t ** ThreadGroup to a parent), ThreadGroup.stop(),\n+\t ** suspend(), resume(), interrupt(), destroy(),\n+\t ** setDaemon(), and setMaxPriority().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param g the ThreadGroup to check against\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.lang.Thread#Thread()\n+\t ** @see java.lang.ThreadGroup#ThreadGroup()\n+\t ** @see java.lang.ThreadGroup#stop()\n+\t ** @see java.lang.ThreadGroup#suspend()\n+\t ** @see java.lang.ThreadGroup#resume()\n+\t ** @see java.lang.ThreadGroup#interrupt()\n+\t ** @see java.lang.ThreadGroup#setDaemon(boolean)\n+\t ** @see java.lang.ThreadGroup#setMaxPriority(int)\n+\t **/\n+\tpublic void checkAccess(ThreadGroup g) {\n+\t\tthrow new SecurityException(\"Cannot modify ThreadGroups.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to exit the\n+\t ** JVM with the given status.<P>\n+\t **\n+\t ** This method is called from Runtime.exit().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param status the status to exit with\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.lang.Runtime#exit()\n+\t ** @see java.lang.Runtime#exit(int)\n+\t **/\n+\tpublic void checkExit(int status) {\n+\t\tthrow new SecurityException(\"Cannot exit JVM.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to execute the\n+\t ** given program.<P>\n+\t **\n+\t ** This method is called from Runtime.exec().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param program the name of the program to exec\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.lang.Runtime#exec(java.lang.String[],java.lang.String[])\n+\t **/\n+\tpublic void checkExec(String program) {\n+\t\tthrow new SecurityException(\"Cannot execute programs.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to link in the\n+\t ** given native library.<P>\n+\t **\n+\t ** This method is called from Runtime.load() (and hence,\n+\t ** by loadLibrary() as well).<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param filename the full name of the library to load\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.lang.Runtime#load(java.lang.String)\n+\t **/\n+\tpublic void checkLink(String filename) {\n+\t\tthrow new SecurityException(\"Cannot link native libraries.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to read the\n+\t ** given file using the FileDescriptor.<P>\n+\t **\n+\t ** This method is called from\n+\t ** FileInputStream.FileInputStream().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param desc the FileDescriptor representing the file\n+\t **        to access\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.io.FileInputStream#FileInputStream(java.io.FileDescriptor)\n+\t **/\n+\tpublic void checkRead(FileDescriptor desc) {\n+\t\tthrow new SecurityException(\"Cannot read files via file descriptors.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to read the\n+\t ** given file.<P>\n+\t **\n+\t ** This method is called from\n+\t ** FileInputStream.FileInputStream(),\n+\t ** RandomAccessFile.RandomAccessFile(), File.exists(),\n+\t ** canRead(), isFile(), isDirectory(), lastModified(),\n+\t ** length() and list().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param filename the full name of the file to access\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.io.File\n+\t ** @see java.io.FileInputStream#FileInputStream(java.lang.String)\n+\t ** @see java.io.RandomAccessFile#RandomAccessFile(java.lang.String)\n+\t **/\n+\tpublic void checkRead(String filename) {\n+\t\tthrow new SecurityException(\"Cannot read files via file names.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to read the\n+\t ** given file. using the given SecurityContext.<P>\n+\t **\n+\t ** I know of no core class that calls this method.<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param filename the full name of the file to access\n+\t ** @param securityContext the Security Context to\n+\t **        determine access for.\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t **/\n+\tpublic void checkRead(String filename, Object securityContext) {\n+\t\tthrow new SecurityException(\"Cannot read files via file names.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to write to the\n+\t ** given file using the FileDescriptor.<P>\n+\t **\n+\t ** This method is called from\n+\t ** FileOutputStream.FileOutputStream().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param desc the FileDescriptor representing the file\n+\t **        to access\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.io.FileOutputStream#FileOutputStream(java.io.FileDescriptor)\n+\t **/\n+\tpublic void checkWrite(FileDescriptor desc) {\n+\t\tthrow new SecurityException(\"Cannot write files via file descriptors.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to write to the\n+\t ** given file.<P>\n+\t **\n+\t ** This method is called from\n+\t ** FileOutputStream.FileOutputStream(),\n+\t ** RandomAccessFile.RandomAccessFile(),\n+\t ** File.canWrite(), mkdir(), and renameTo().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param filename the full name of the file to access\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.io.File#canWrite()\n+\t ** @see java.io.File#mkdir()\n+\t ** @see java.io.File#renameTo()\n+\t ** @see java.io.FileOutputStream#FileOutputStream(java.lang.String)\n+\t ** @see java.io.RandomAccessFile#RandomAccessFile(java.lang.String)\n+\t **/\n+\tpublic void checkWrite(String filename) {\n+\t\tthrow new SecurityException(\"Cannot write files via file names.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to delete the\n+\t ** given file.<P>\n+\t **\n+\t ** This method is called from File.delete().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param filename the full name of the file to delete\n+\t ** @exception SecurityException if th operation is not\n+\t **            permitted.\n+\t ** @see java.io.File#delete()\n+\t **/\n+\tpublic void checkDelete(String filename) {\n+\t\tthrow new SecurityException(\"Cannot delete files.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to connect to a\n+\t ** given host on a given port.<P>\n+\t **\n+\t ** This method is called from Socket.Socket().\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param host the host to connect to\n+\t ** @param port the port to connect on\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted\n+\t ** @see java.net.Socket#Socket()\n+\t **/\n+\tpublic void checkConnect(String host, int port) {\n+\t\tthrow new SecurityException(\"Cannot make network connections.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to connect to a\n+\t ** given host on a given port using a specific security\n+\t ** context to determine access.<P>\n+\t **\n+\t ** This method is not called in the 1.1 core classes.<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param host the host to connect to\n+\t ** @param port the port to connect on\n+\t ** @param securityContext the security context to\n+\t **        determine access with\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted\n+\t **/\n+\tpublic void checkConnect(String host, int port, Object securityContext) {\n+\t\tthrow new SecurityException(\"Cannot make network connections.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to listen to a\n+\t ** specific port for data.<P>\n+\t **\n+\t ** This method is called by ServerSocket.ServerSocket().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param port the port to listen on\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted\n+\t ** @see java.net.ServerSocket#ServerSocket(int)\n+\t **/\n+\tpublic void checkListen(int port) {\n+\t\tthrow new SecurityException(\"Cannot listen for connections.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to accept a\n+\t ** connection from a particular host on a particular\n+\t ** port.<P>\n+\t **\n+\t ** This method is called by ServerSocket.implAccept().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param host the host which wishes to connect\n+\t ** @param port the port the connection will be on\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted\n+\t ** @see java.net.ServerSocket#accept()\n+\t **/\n+\tpublic void checkAccept(String host, int port) {\n+\t\tthrow new SecurityException(\"Cannot accept connections.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to read and\n+\t ** write multicast to a particular address.<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @XXX where is it called?\n+\t **\n+\t ** @param addr the address to multicast to.\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t **/\n+\tpublic void checkMulticast(InetAddress addr) {\n+\t\tthrow new SecurityException(\"Cannot read or write multicast.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to read and\n+\t ** write multicast to a particular address with a\n+\t ** particular ttl value.<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.<P>\n+\t **\n+\t ** @XXX where is it called?\n+\t **\n+\t ** @XXX what the hell is ttl?  Expand abbreviation.\n+\t **\n+\t ** @param addr the address to multicast to.\n+\t ** @param ttl the ttl value to use\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t **/\n+\tpublic void checkMulticast(InetAddress addr, byte ttl) {\n+\t\tthrow new SecurityException(\"Cannot read or write multicast.\");\n+\t}\n+\n+        /**\n+         ** Check if the current thread is allowed to perform an\n+         ** operation that requires the specified <code>Permission</code>.\n+         **\n+         ** @param perm The <code>Permission</code> required.\n+         ** @exception SecurityException If the operation is not allowed.\n+         **/\n+         public void checkPermission(java.security.Permission perm) {\n+\t\tthrow new SecurityException(\"Operation not allowed\");\n+\t}\n+\n+        /**\n+         ** Check if the current thread is allowed to perform an\n+         ** operation that requires the specified <code>Permission</code>.\n+         **\n+         ** @param perm The <code>Permission</code> required.\n+\t ** @param context A security context\n+         ** @exception SecurityException If the operation is not allowed.\n+\t ** @since 1.2\n+         **/\n+         public void checkPermission(java.security.Permission perm,\n+\t\t\t\t     Object context) {\n+\t\tthrow new SecurityException(\"Operation not allowed\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to read or\n+\t ** write all the system properties at once.<P>\n+\t **\n+\t ** This method is called by System.getProperties()\n+\t ** and setProperties().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.lang.System#getProperties()\n+\t ** @see java.lang.System#setProperties(java.util.Properties)\n+\t **/\n+\tpublic void checkPropertiesAccess() {\n+\t\tthrow new SecurityException(\"Cannot access all system properties at once.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to read or\n+\t ** write a particular system property.<P>\n+\t **\n+\t ** This method is called by System.getProperty() and\n+\t ** setProperty().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @exception SecurityException is the operation is not\n+\t **            permitted.\n+\t ** @see java.lang.System#getProperty(java.lang.String)\n+\t ** @see java.lang.System#setProperty(java.lang.String,java.lang.String)\n+\t **/\n+\tpublic void checkPropertyAccess(String name) {\n+\t\tthrow new SecurityException(\"Cannot access individual system properties.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to create a\n+\t ** top-level window.  If it is not, the operation should\n+\t ** still go through, but some sort of nonremovable\n+\t ** warning should be placed on the window to show that it\n+\t ** is untrusted.<P>\n+\t **\n+\t ** This method is called by Window.Window().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param window the window to create\n+\t ** @see java.awt.Window#Window(java.awt.Frame)\n+\t **/\n+\tpublic boolean checkTopLevelWindow(Object window) {\n+\t  return false;\n+\t}\n+\n+\t/** Check if the current thread is allowed to create a\n+\t ** print job.<P>\n+\t **\n+\t ** This method is called by Toolkit.getPrintJob().  (I\n+\t ** assume so, at least, it just don't say nothing about\n+\t ** it in the spec.)<P>\n+\t ** \n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.awt.Toolkit.getPrintJob(java.awt.Frame,java.lang.String,java.util.Properties)\n+\t **/\n+\tpublic void checkPrintJobAccess() {\n+\t\tthrow new SecurityException(\"Cannot create print jobs.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to use the\n+\t ** system clipboard.<P>\n+\t **\n+\t ** This method is called by Toolkit.getSystemClipboard().\n+\t ** (I assume.)<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.awt.Toolkit#getSystemClipboard()\n+\t **/\n+\tpublic void checkSystemClipboardAccess() {\n+\t\tthrow new SecurityException(\"Cannot access the system clipboard.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to use the AWT\n+\t ** event queue.<P>\n+\t **\n+\t ** This method is called by Toolkit.getSystemEventQueue().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.awt.Toolkit#getSystemEventQueue()\n+\t **/\n+\tpublic void checkAwtEventQueueAccess() {\n+\t\tthrow new SecurityException(\"Cannot access the AWT event queue.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to access the\n+\t ** specified package at all.<P>\n+\t **\n+\t ** This method is called by ClassLoader.loadClass() in\n+\t ** user-created ClassLoaders.<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param packageName the package name to check access to\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.lang.ClassLoader#loadClass(java.lang.String,boolean)\n+\t **/\n+\tpublic void checkPackageAccess(String packageName) {\n+\t\tthrow new SecurityException(\"Cannot access packages via the ClassLoader.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to define\n+\t ** classes the specified package.  If the class already\n+\t ** created, though, ClassLoader.loadClass() can still\n+\t ** return the Class if checkPackageAccess() checks out.<P>\n+\t **\n+\t ** This method is called by ClassLoader.loadClass() in\n+\t ** user-created ClassLoaders.<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param packageName the package name to check access to\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.lang.ClassLoader#loadClass(java.lang.String,boolean)\n+\t **/\n+\tpublic void checkPackageDefinition(String packageName) {\n+\t\tthrow new SecurityException(\"Cannot load classes into any packages via the ClassLoader.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to set the\n+\t ** current socket factory.<P>\n+\t **\n+\t ** This method is called by Socket.setSocketImplFactory(),\n+\t ** ServerSocket.setSocketFactory(), and\n+\t ** URL.setURLStreamHandlerFactory().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\n+\t ** @see java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory)\n+\t ** @see java.net.URL#setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)\n+\t **/\n+\tpublic void checkSetFactory() {\n+\t\tthrow new SecurityException(\"Cannot set the socket factory.\");\n+\t}\n+\n+\t/** Check if the current thread is allowed to get certain\n+\t ** types of Methods, Fields and Constructors from a Class\n+\t ** object.<P>\n+\t **\n+\t ** This method is called by Class.getMethod[s](),\n+\t ** Class.getField[s](), Class.getConstructor[s],\n+\t ** Class.getDeclaredMethod[s](),\n+\t ** Class.getDeclaredField[s](), and\n+\t ** Class.getDeclaredConstructor[s]().<P>\n+\t **\n+\t ** SecurityManager's implementation always denies access.\n+\t **\n+\t ** @param c the Class to check\n+\t ** @param memberType the type of members to check\n+\t **        against, either Member.DECLARED or\n+\t **        Member.PUBLIC.\n+\t ** @exception SecurityException if the operation is not\n+\t **            permitted.\n+\t ** @see java.lang.Class\n+\t ** @see java.lang.reflect.Member#DECLARED\n+\t ** @see java.lang.reflect.Member#PUBLIC\n+\t **/\n+\tpublic void checkMemberAccess(Class c, int memberType) {\n+\t\tthrow new SecurityException(\"Cannot access members of classes.\");\n+\t}\n+\n+\t/** Test whether a particular security action may be\n+\t ** taken.\n+\t ** @param action the desired action to take\n+\t ** @exception SecurityException if the action is denied.\n+\t ** @XXX I have no idea what actions must be tested\n+\t **      or where.\n+\t **/\n+\tpublic void checkSecurityAccess(String action) {\n+\t\tcheckPermission (new java.security.SecurityPermission (action));\n+\t}\n+\n+\t/** Get the ThreadGroup that a new Thread should belong\n+\t ** to by default.<P>\n+\t **\n+\t ** Called by Thread.Thread().<P>\n+\t **\n+\t ** SecurityManager's implementation just uses the\n+\t ** ThreadGroup of the current Thread.<P>\n+\t **\n+\t ** <STRONG>Spec Note:</STRONG> it is not clear whether\n+\t ** the new Thread is guaranteed to pass the\n+\t ** checkAccessThreadGroup() test when using this\n+\t ** ThreadGroup.  I presume so.\n+\t **\n+\t ** @return the ThreadGroup to put the new Thread into.\n+\t **/\n+\tpublic ThreadGroup getThreadGroup() {\n+\t\treturn Thread.currentThread().getThreadGroup();\n+\t}\n+\n+\tprotected SecurityManager () {\n+\t\tif (System.getSecurityManager () != null)\n+\t\t\tthrow new SecurityException ();\n+\t}\n+}\n+\n+class SecurityContext {\n+\tClass[] classes;\n+\tSecurityContext(Class[] classes) {\n+\t\tthis.classes = classes;\n+\t}\n }"}, {"sha": "9c155e8a7ff38cb08bd5b62d1fe93cb5f3c3a962", "filename": "libjava/java/lang/StackOverflowError.java", "status": "modified", "additions": 53, "deletions": 22, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FStackOverflowError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FStackOverflowError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FStackOverflowError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,65 @@\n-// StackOverflowError.java\n+/* StackOverflowError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n+ * Status:  Believed complete and correct. \n  */\n \n+/**\n+ * A <code>StackOverflowError</code> is thrown when a stack overflow occurs.\n+ * This can occur because an application recurses too deeply.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class StackOverflowError extends VirtualMachineError\n {\n-  public StackOverflowError ()\n-  {\n-    super ();\n-  }\n-\n-  public StackOverflowError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = 8609175038441759607L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public StackOverflowError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public StackOverflowError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "ebfc03c37c405e29c3523a31106d08105d7d78fc", "filename": "libjava/java/lang/StringIndexOutOfBoundsException.java", "status": "modified", "additions": 64, "deletions": 22, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FStringIndexOutOfBoundsException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FStringIndexOutOfBoundsException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FStringIndexOutOfBoundsException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,37 +1,79 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* StringIndexOutOfBoundsException.java -- exception thrown to indicate \n+   an attempt to access an index which is out of bounds.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * Exceptions may be thrown by one part of a Java program and caught\n+ * by another in order to deal with exceptional conditions.  \n+ * This exception can be thrown to indicate an attempt to access an\n+ * index which is out of bounds.\n+ * Any negative integer less than or equal to -1 and positive \n+ * integer greater than or equal to the size of the string is an index\n+ * which would be out of bounds.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class StringIndexOutOfBoundsException extends IndexOutOfBoundsException\n {\n+  static final long serialVersionUID = -6762910422159637258L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n   public StringIndexOutOfBoundsException()\n-  {\n-    super();\n-  }\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public StringIndexOutOfBoundsException(String s)\n+    {\n+      super(s);\n+    }\n \n+  /**\n+   * Create an exception noting the illegal index.\n+   */\n   public StringIndexOutOfBoundsException(int index)\n-  {\n-    this(\"String index out of range: \" + index);\n-  }\n-\n-  public StringIndexOutOfBoundsException(String msg)\n-  {\n-    super(msg);\n-  }\n+    {\n+      super(\"String index out of range: \" + index);\n+    }\n }"}, {"sha": "9ac160a56f3acde6ac901a8ce7b8371ce02c1aca", "filename": "libjava/java/lang/System.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FSystem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FSystem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSystem.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -158,7 +158,7 @@ public static String getProperty (String property)\n   public static String getProperty (String property, String defval)\n   {\n     if (secman != null)\n-      secman.checkPropertyAccess(property, defval);\n+      secman.checkPropertyAccess(property);\n     if (properties == null)\n       init_properties ();\n     return properties.getProperty(property, defval);"}, {"sha": "fe4f9ba831c295b7b304ceded6575af1182023b1", "filename": "libjava/java/lang/ThreadDeath.java", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FThreadDeath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FThreadDeath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThreadDeath.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,30 +1,49 @@\n-// ThreadDeath.java - Special exception registering Thread death.\n+/* java.lang.ThreadDeath - Special exception registering Thread death.\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.lang;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date August 26, 1998 \n- */\n+\n+package java.lang;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Complete to version 1.1\n  */\n \n-public class ThreadDeath extends Error\n-{\n-  public ThreadDeath ()\n-  {\n-    super ();\n-  }\n+/**\n+ ** ThreadDeath is thrown in a thread when someone calls <CODE>stop()</CODE> on that thread.\n+ **\n+ ** <B>Important:</B> Make sure you rethrow this exception if you catch it.  If you don't, the thread will not die.\n+ **\n+ ** @author John Keiser\n+ ** @author Tom Tromey <tromey@cygnus.com>\n+ ** @version 1.1.0, 5 Feb 1998, August 26 1998\n+ ** @since JDK1.0\n+ ** @see java.lang.Thread#stop()\n+ **/\n+\n+public class ThreadDeath extends Error {\n }"}, {"sha": "58214ff1af6d170f233bf9500a9f1b8cc167a039", "filename": "libjava/java/lang/UnknownError.java", "status": "modified", "additions": 51, "deletions": 22, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FUnknownError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FUnknownError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FUnknownError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,63 @@\n-// UnknownError.java\n+/* UnknownError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n+ * Status:  Believed complete and correct. \n  */\n \n+/**\n+ * An <code>UnknownError</code> is thrown when a serious but unknown \n+ * problem has occurred in the Java Virtual Machine.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ */\n public class UnknownError extends VirtualMachineError\n {\n-  public UnknownError ()\n-  {\n-    super ();\n-  }\n-\n-  public UnknownError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = 2524784860676771849L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public UnknownError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public UnknownError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "63c3a1e5dd6a1900d64399fc2cefb70d9f35e5d8", "filename": "libjava/java/lang/UnsatisfiedLinkError.java", "status": "modified", "additions": 54, "deletions": 22, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FUnsatisfiedLinkError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FUnsatisfiedLinkError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FUnsatisfiedLinkError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,66 @@\n-// UnsatisfiedLinkError.java\n+/* UnsatisfiedLinkError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n+ * Status:  Believed complete and correct. \n  */\n \n+/**\n+ * A <code>UnsatisfiedLinkError</code> is thrown if an appropriate\n+ * native language definition of a method declared <code>native</code>\n+ * cannot be found by the Java Virtual Machine.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class UnsatisfiedLinkError extends LinkageError\n {\n-  public UnsatisfiedLinkError ()\n-  {\n-    super ();\n-  }\n-\n-  public UnsatisfiedLinkError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = -4019343241616879428L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public UnsatisfiedLinkError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public UnsatisfiedLinkError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "c0ce259f6cdb73210e0d80847975b4dbbc1b9024", "filename": "libjava/java/lang/UnsupportedClassVersionError.java", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FUnsupportedClassVersionError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FUnsupportedClassVersionError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FUnsupportedClassVersionError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -0,0 +1,58 @@\n+/* UnsupportedClassVersionError.java \n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.lang;\n+\n+/**\n+ * An <code>UnsupportedClassVersionError</code> is thrown when the\n+ * Java Virtual Machine determines it does not support the major and minor\n+ * version numbers in the class file it is attempting to read.\n+ *\n+ * @since JDK 1.2\n+ * \n+ * @author Brian Jones\n+ */\n+public class UnsupportedClassVersionError extends ClassFormatError\n+{\n+  static final long serialVersionUID = -7123279212883497373L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public UnsupportedClassVersionError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public UnsupportedClassVersionError(String s)\n+    {\n+      super(s);\n+    }\n+}"}, {"sha": "8cf1b1f35e5271f54142f4e48a1168444435dc69", "filename": "libjava/java/lang/UnsupportedOperationException.java", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FUnsupportedOperationException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FUnsupportedOperationException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FUnsupportedOperationException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,32 +1,65 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* UnsupportedOperationException.java -- Exception thrown when an\n+   unsupported operation is attempted on an object\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 18, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/** \n+ * This exception is thrown by an object when an operation is\n+ * requested of it that it does not support.\n+ *\n+ * @since JDK 1.2\n+ *\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @date September 18, 1998.\n+ */\n public class UnsupportedOperationException extends RuntimeException\n {\n-  public UnsupportedOperationException()\n+  static final long serialVersionUID = -1242599979055084673L;\n+\n+  /**\n+   * Create an exception without a message.\n+   */\n+  public UnsupportedOperationException() \n   {\n     super();\n   }\n \n-  public UnsupportedOperationException(String msg)\n+  /**\n+   * Create an exception with a message.\n+   */\n+  public UnsupportedOperationException( String s )\n   {\n-    super(msg);\n+    super(s);\n   }\n }"}, {"sha": "fd16804b8f2f8b9efbaf66cbe46a14e522d5894f", "filename": "libjava/java/lang/VMSecurityManager.java", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FVMSecurityManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FVMSecurityManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMSecurityManager.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -0,0 +1,71 @@\n+/*\n+ * java.lang.SecurityManager: part of the Java Class Libraries project.\n+ * Copyright (C) 1998, 2001 Free Software Foundation\n+ *\n+ * This library is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Library General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 2 of the License, or (at your option) any later version.\n+ *\n+ * This library is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Library General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Library General Public\n+ * License along with this library; if not, write to the\n+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+ * Boston, MA  02111-1307, USA.\n+ */\n+\n+package java.lang;\n+\n+import java.net.*;\n+import java.util.*;\n+import java.io.*;\n+\n+/**\n+ ** VMSecurityManager is a helper class for SecurityManager the VM must\n+ ** implement.\n+ **\n+ ** @author  John Keiser\n+ ** @version 1.1.0, 31 May 1998\n+ **/\n+class VMSecurityManager\n+{\n+  /** Get a list of all the classes currently executing\n+   ** methods on the Java stack.  getClassContext()[0] is\n+   ** the currently executing method\n+   ** <STRONG>Spec Note:</STRONG> does not say whether\n+   ** the stack will include the getClassContext() call or\n+   ** the one just before it.\n+   **\n+   ** @return an array containing all the methods on classes\n+   **         on the Java execution stack.\n+   **/\n+  static Class[] getClassContext()\n+  {\n+    // FIXME: can't yet implement this for libgcj.\n+    return new Class[0];\n+  }\n+\n+  /** Get the current ClassLoader--the one nearest to the\n+   ** top of the stack.\n+   ** @return the current ClassLoader.\n+   **/\n+  static ClassLoader currentClassLoader()\n+  {\n+    // The docs above are wrong.  See the online docs.\n+    // FIXME this implementation is a bit wrong too -- the docs say we\n+    // must also consider ancestors of the system class loader.\n+    Class[] classStack = getClassContext ();\n+    for (int i = 0; i < classStack.length; i++)\n+      {\n+\tClassLoader loader = classStack[i].getClassLoader();\n+\tif (loader != null)\n+\t  return loader;\n+      }\n+\n+    return null;\n+  }\n+}"}, {"sha": "801428da5d37b12b13e18720208bc40e970178e5", "filename": "libjava/java/lang/VerifyError.java", "status": "modified", "additions": 52, "deletions": 21, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FVerifyError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FVerifyError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVerifyError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,65 @@\n-// VerifyError.java\n+/* VerifyError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+ * A <code>VerifyError</code> is thrown if there is a security problem or\n+ * internal inconsistency in a class file as deteced by the \"verifier.\"\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public class VerifyError extends LinkageError\n {\n-  public VerifyError ()\n-  {\n-    super ();\n-  }\n-\n-  public VerifyError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = 7001962396098498785L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public VerifyError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public VerifyError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "a64ca43d10c76499520651b54bfef1d76b16cf90", "filename": "libjava/java/lang/VirtualMachineError.java", "status": "modified", "additions": 53, "deletions": 26, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FVirtualMachineError.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2FVirtualMachineError.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVirtualMachineError.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,39 +1,66 @@\n-// VirtualMachineError.java\n+/* VirtualMachineError.java \n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date October 1, 1998 \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n \n-/* FIXME: We should consider adding some special error message when this\n- * exception is thrown, or maybe if it being caught at top-level.  Such\n- * a message would direct the user to send a bug report to\n- * gcj-bugs@cygnus.com, or something like that. --KKT */\n-\n+/**\n+ * A <code>VirtualMachineError</code> or its subclasses are thrown to \n+ * indicate there is something wrong with the Java Virtual Machine or that\n+ * it does not have the resources needed for it to continue execution.\n+ *\n+ * @since JDK 1.0\n+ * \n+ * @author Brian Jones\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date October 1, 1998\n+ */\n public abstract class VirtualMachineError extends Error\n {\n-  public VirtualMachineError ()\n-  {\n-    super ();\n-  }\n-\n-  public VirtualMachineError (String msg)\n-  {\n-    super (msg);\n-  }\n+  static final long serialVersionUID = 4161983926571568670L;\n+\n+  /**\n+   * Create an error without a message.\n+   */\n+  public VirtualMachineError()\n+    {\n+      super();\n+    }\n+\n+  /**\n+   * Create an error with a message.\n+   */\n+  public VirtualMachineError(String s)\n+    {\n+      super(s);\n+    }\n }"}, {"sha": "4e04b42803eea1be1bbedba32df04971bea50857", "filename": "libjava/java/lang/reflect/InvocationTargetException.java", "status": "modified", "additions": 96, "deletions": 43, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2Freflect%2FInvocationTargetException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Flang%2Freflect%2FInvocationTargetException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FInvocationTargetException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,75 +1,128 @@\n-// InvocationTargetException.java - Wrapper exception for reflection.\n+/* InvocationTargetException.java - Wrapper exception for reflection\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang.reflect;\n+\n import java.io.PrintStream;\n import java.io.PrintWriter;\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date December 12, 1998\n- */\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Believed complete and correct.\n  */\n \n-public class InvocationTargetException extends Exception\n+/**\n+ * InvocationTargetException is sort of a way to \"wrap\" whatever exception \n+ * comes up when a method or constructor is called via Reflection.\n+ *\n+ * @author John Keiser\n+ * @version 1.1.0, 31 May 1998\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ * @date December 12, 1998\n+ *\n+ * @see Method#invoke(Object,Object[])\n+ * @see Constructor#newInstance(Object[])\n+ */\n+\n+public class InvocationTargetException extends Exception \n {\n-  public Throwable getTargetException ()\n+  static final long serialVersionUID = 4085088731926701167L;\n+\n+  private Throwable target = null;\n+  \n+  protected InvocationTargetException() \n     {\n-      return target;\n+      super();\n     }\n-\n-  protected InvocationTargetException ()\n+  \n+  /**\n+   * Create an <code>InvocationTargetException</code> using another \n+   * exception.\n+   * @param targetException the exception to wrap\n+   */\n+  public InvocationTargetException(Throwable targetException) \n     {\n-      super ();\n-      target = null;\n+      super(targetException.toString());\n+      target = targetException;\n     }\n-\n-  public InvocationTargetException (Throwable exception)\n+  \n+  /** \n+   * Create an <code>InvocationTargetException</code> using another \n+   * exception and an error message.\n+   *\n+   * @param targetException the exception to wrap\n+   * @param err an extra reason for the exception-throwing\n+   */\n+  public InvocationTargetException(Throwable targetException, String err) \n     {\n-      super ();\n-      target = exception;\n+      super(err);\n+      target = targetException;\n     }\n-\n-  public InvocationTargetException (Throwable exception, String msg)\n+  \n+  /**\n+   * Get the wrapped (targeted) exception.\n+   * \n+   * @return the targeted exception.\n+   */\n+  public Throwable getTargetException() \n     {\n-      super (msg);\n-      target = exception;\n+      return target;\n     }\n \n-  // This is from JDK 1.2.\n-  public void printStackTrace ()\n+  public void printStackTrace()\n     {\n-      if (target != null)\n+      if (target == null)\n+\tsuper.printStackTrace();\n+      else\n+      {\n+\tSystem.err.print(this.getClass() + \": \");\n \ttarget.printStackTrace();\n+      }\n     }\n \n-  // This is from JDK 1.2.\n-  public void printStackTrace (PrintStream s)\n+  public void printStackTrace(PrintStream ps)\n     {\n-      if (target != null)\n-\ttarget.printStackTrace(s);\n+      if (target == null)\n+\tsuper.printStackTrace(ps);\n+      else\n+      {\n+\tps.print(this.getClass() + \": \");\n+\ttarget.printStackTrace(ps);\n+      }\n     }\n \n-  // This is from JDK 1.2.\n-  public void printStackTrace (PrintWriter wr)\n+  public void printStackTrace(PrintWriter pw)\n     {\n-      if (target != null)\n-\ttarget.printStackTrace(wr);\n+      if (target == null)\n+\tsuper.printStackTrace(pw);\n+      else\n+      {\n+\tpw.print(this.getClass() + \": \");\n+\ttarget.printStackTrace(pw);\n+      }\n     }\n-\n-  // The wrapped exception.  The name is specified by the\n-  // serialization spec.\n-  private Throwable target;\n-\n-  private static final long serialVersionUID = 4085088731926701167L;\n }"}, {"sha": "3aeedd3e6fbd062c8270272ed031cc28e2071b30", "filename": "libjava/java/net/BindException.java", "status": "modified", "additions": 60, "deletions": 20, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FBindException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FBindException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FBindException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,35 +1,75 @@\n-// BindException.java\n+/* BindException.java -- An exception occured while binding to a socket\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.net;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 5, 1999.\n- */\n+package java.net;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+  * This exception indicates that an error occured while attempting to bind\n+  * socket to a particular port.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  * @date March 5, 1999.\n+  */\n public class BindException extends SocketException\n {\n-  public BindException()\n-  {\n-    super();\n-  }\n-\n-  public BindException(String msg)\n-  {\n-    super(msg);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>BindException</code> without\n+  * a descriptive error message.\n+  */\n+public\n+BindException()\n+{\n+  super();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>BindException</code> with\n+  * a descriptive error message, such as the text from strerror(3).\n+  *\n+  * @param message A message describing the error that occurred.\n+  */\n+public\n+BindException(String message)\n+{\n+  super(message);\n }\n+\n+} // class BindException\n+"}, {"sha": "0ac64c8888c9cf1908a3ac996683ec7aefb75747", "filename": "libjava/java/net/ConnectException.java", "status": "modified", "additions": 62, "deletions": 20, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FConnectException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FConnectException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FConnectException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,35 +1,77 @@\n-// ConnectException.java\n+/* ConnectException.java -- An exception occured while connecting to a host\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.net;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 5, 1999.\n- */\n+\n+package java.net;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+  * This exception indicates that an error occured while attempting to\n+  * connect to a remote host.  Often this indicates that the remote host\n+  * refused the connection (ie, is not listening on the target socket).\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  * @date March 5, 1999.\n+  */\n public class ConnectException extends SocketException\n {\n-  public ConnectException()\n-  {\n-    super();\n-  }\n-\n-  public ConnectException(String msg)\n-  {\n-    super(msg);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>ConnectException</code> without\n+  * a descriptive error message.\n+  */\n+public\n+ConnectException()\n+{\n+  super();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>ConnectException</code> with\n+  * a descriptive error message, such as the text from strerror(3).\n+  *\n+  * @param message A message describing the error that occurred.\n+  */\n+public\n+ConnectException(String message)\n+{\n+  super(message);\n+}\n+\n+} // class ConnectException\n+"}, {"sha": "660f253dec3852a53738578b4a3a2932fa4eac9b", "filename": "libjava/java/net/MalformedURLException.java", "status": "modified", "additions": 60, "deletions": 20, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FMalformedURLException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FMalformedURLException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMalformedURLException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,35 +1,75 @@\n-// MalformedURLException.java\n+/* MalformedURLException.java -- A URL was not in a valid format\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.net;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 5, 1999.\n- */\n+package java.net;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+  * This exception indicates that a URL passed to an object was not in a\n+  * valid format.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  * @date March 5, 1999.\n+  */\n public class MalformedURLException extends java.io.IOException\n {\n-  public MalformedURLException()\n-  {\n-    super();\n-  }\n-\n-  public MalformedURLException(String msg)\n-  {\n-    super(msg);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>MalformedURLException</code> without\n+  * a descriptive error message.\n+  */\n+public\n+MalformedURLException()\n+{\n+  super();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>MalformedURLException</code> without\n+  * a descriptive error message.\n+  *\n+  * @param message A message describing the error that occurred.\n+  */\n+public\n+MalformedURLException(String message)\n+{\n+  super(message);\n }\n+\n+} // class MalformedURLException\n+"}, {"sha": "bae9fa9f077b057af0a6802e256ad65ec3c36767", "filename": "libjava/java/net/NoRouteToHostException.java", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FNoRouteToHostException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FNoRouteToHostException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FNoRouteToHostException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,35 +1,76 @@\n-// NoRouteToHostException.java\n+/* NoRouteToHostException.java -- Cannot connect to a host\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.net;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 5, 1999.\n- */\n+\n+package java.net;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+  * This exception indicates that there is no TCP/IP route to the requested\n+  * host.  This is often due to a misconfigured routing table.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  * @date March 5, 1999.\n+  */\n public class NoRouteToHostException extends SocketException\n {\n-  public NoRouteToHostException()\n-  {\n-    super();\n-  }\n-\n-  public NoRouteToHostException(String msg)\n-  {\n-    super(msg);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes an instance of <code>NoRouteToHostException</code>\n+  * without a descriptive error message.\n+  */\n+public\n+NoRouteToHostException()\n+{\n+  super();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes an instance of <code>NoRouteToHostException</code>\n+  * witha descriptive error message, such as the text from strerror(3).\n+  *\n+  * @param message A message describing the error that occurred.\n+  */\n+public\n+NoRouteToHostException(String message)\n+{\n+  super(message);\n+}\n+\n+} // class NoRouteToHostException\n+"}, {"sha": "5556f28abab2377bfd19bd59515d9ce92dd0b162", "filename": "libjava/java/net/ProtocolException.java", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FProtocolException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FProtocolException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FProtocolException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,35 +1,76 @@\n-// ProtocolException.java\n+/* ProtocolException.java -- A low level protocol error occured\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.net;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 5, 1999.\n- */\n+package java.net;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+  * This exception indicates that some sort of low level protocol\n+  * exception occured.  Look in the descriptive message (if any) for\n+  * details on what went wrong\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  * @date March 5, 1999.\n+  */\n public class ProtocolException extends java.io.IOException\n {\n-  public ProtocolException()\n-  {\n-    super();\n-  }\n-\n-  public ProtocolException(String msg)\n-  {\n-    super(msg);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>ProtocolException</code>\n+  * without a descriptive error message.\n+  */\n+public\n+ProtocolException()\n+{\n+  super();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>ProtocolException</code>\n+  * with a descriptive error message.\n+  *\n+  * @param message A message describing the error that occurred.\n+  */\n+public\n+ProtocolException(String message)\n+{\n+  super(message);\n }\n+\n+} // class ProtocolException\n+"}, {"sha": "37135f3a5d7b84a42750a1296ebd29aee7c09e5c", "filename": "libjava/java/net/SocketException.java", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FSocketException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FSocketException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,33 +1,74 @@\n-// SocketException.java - Base class for networking exceptions\n+/* SocketException.java -- An exception occured while performing a socket op\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.net;\n \n+/* Written using on-line Java Platform 1.2 API Specification.\n+ * Believed complete and correct.\n+ */\n+\n /**\n- * @author Per Bothner\n- * @date January 6, 1999.\n+  * This exception indicates that a generic error occured related to an\n+  * operation on a socket.  Check the descriptive message (if any) for\n+  * details on the nature of this error\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Per Bothner \n+  * @date January 6, 1999.\n+  */\n+public class SocketException extends java.io.IOException\n+{\n+\n+/*\n+ * Constructors\n  */\n \n-/** Written using on-line Java Platform 1.2 API Specification.\n-  * Believed complete and correct.\n+/**\n+  * Initializes a new instance of <code>SocketException</code> without\n+  * a descriptive error message.\n   */\n+public\n+SocketException()\n+{\n+  super();\n+}\n \n-public class SocketException extends java.io.IOException\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>SocketException</code> without\n+  * a descriptive error message.\n+  *\n+  * @param message A message describing the error that occurred.\n+  */\n+public\n+SocketException(String message)\n {\n-  public SocketException ()\n-  {\n-    super();\n-  }\n-\n-  public SocketException (String s)\n-  {\n-    super(s);\n-  }\n+  super(message);\n }\n+\n+} // class SocketException\n+"}, {"sha": "ad7b25a94bcaf28192d40213a30c98f7dbd567ce", "filename": "libjava/java/net/UnknownHostException.java", "status": "modified", "additions": 63, "deletions": 20, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FUnknownHostException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FUnknownHostException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FUnknownHostException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,77 @@\n-// UnknownHostException.java\n+/* UnknownHostException.java -- The hostname is not unknown\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.net;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Per Bothner\n- * @date January 6, 1999.\n- */\n+package java.net;\n \n /*\n  * Written using on-line Java Platform 1.2 API Specification.\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+  * This exception indicates that an attempt was made to reference a hostname\n+  * or IP address that is not valid.  This could possibly indicate that a\n+  * DNS problem has occurred, but most often means that the host was not\n+  * correctly specified.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Per Bothner \n+  * @date January 6, 1999.\n+  */\n public class UnknownHostException extends java.io.IOException\n {\n-  public UnknownHostException ()\n-  {\n-    super();\n-  }\n-\n-  public UnknownHostException (String host)\n-  {\n-    super(host);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>UnknownHostException</code>\n+  * without a descriptive error message.\n+  */\n+public\n+UnknownHostException()\n+{\n+  super();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>UnknownHostException</code>\n+  * with a descriptive error message, such as the name of the host\n+  * that could not be resolved.\n+  *\n+  * @param message A message describing the error that occurrred.\n+  */\n+public\n+UnknownHostException(String message)\n+{\n+  super(message);\n+}\n+\n+} // class UnknownHostException\n+"}, {"sha": "f82607a502b6f381eb65f96d56e3e4bd9de26c8c", "filename": "libjava/java/net/UnknownServiceException.java", "status": "modified", "additions": 62, "deletions": 20, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FUnknownServiceException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Fnet%2FUnknownServiceException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FUnknownServiceException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,35 +1,77 @@\n-// UnknownServiceException.java\n+/* UnknownServiceException.java -- A service error occured\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.net;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 5, 1999.\n- */\n+package java.net;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+  * Contrary to what you might think, this does not indicate that the\n+  * TCP/IP service name specified was invalid.  Instead it indicates that\n+  * the MIME type returned from a URL could not be determined or that an\n+  * attempt was made to write to a read-only URL.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  * @date March 5, 1999.\n+  */\n public class UnknownServiceException extends java.io.IOException\n {\n-  public UnknownServiceException()\n-  {\n-    super();\n-  }\n-\n-  public UnknownServiceException(String msg)\n-  {\n-    super(msg);\n-  }\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>UnknownServiceException</code>\n+  * without a descriptive error message.\n+  */\n+public\n+UnknownServiceException()\n+{\n+  super();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>UnknownServiceException</code>\n+  * without a descriptive error message.\n+  *\n+  * @param message A message describing the error that occurred.\n+  */\n+public\n+UnknownServiceException(String message)\n+{\n+  super(message);\n }\n+\n+} // class UnknownServiceException\n+"}, {"sha": "fd7971a7c238b62645b8102937711dc17bfdfa55", "filename": "libjava/java/text/ParseException.java", "status": "modified", "additions": 78, "deletions": 21, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Ftext%2FParseException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7eee682ba80fbddd26e9ab9ddfa320711485a405/libjava%2Fjava%2Ftext%2FParseException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FParseException.java?ref=7eee682ba80fbddd26e9ab9ddfa320711485a405", "patch": "@@ -1,34 +1,91 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* ParseException.java -- An error occurred while parsing.\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.text;\n \n-/**\n- * @author Per Bothner <bothner@cygnus.com>\n- * @date October 25, 1998.\n- */\n /* Written using \"Java Class Libraries\", 2nd edition, plus online\n  * API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n \n+/**\n+  * This exception is thrown when an unexpected error occurs during parsing.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Per Bothner <bothner@cygnus.com>\n+  * @date October 25, 1998.\n+  */\n public class ParseException extends Exception\n {\n-  private int errorOffset;\n-\n-  public ParseException (String msg, int errorOffset)\n-  {\n-    super(msg);\n-    this.errorOffset = errorOffset;\n-  }\n-\n-  public int getErrorOffset ()\n-  {\n-    return errorOffset;\n-  }\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * This is the position where the error was encountered.\n+  */\n+private int errorOffset;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * This method initializes a new instance of <code>ParseException</code>\n+  * with a detailed error message and a error position.\n+  *\n+  * @param msg The descriptive message describing the error.\n+  * @param offset The position where the error was encountered.\n+  */\n+public\n+ParseException(String s, int offset)\n+{\n+  super(s);\n+  \n+  errorOffset = offset;\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns the position where the error occurred.\n+  * \n+  * @return The position where the error occurred.\n+  */\n+public int\n+getErrorOffset()\n+{\n+  return(errorOffset);\n+}\n+\n+} // class ParseException\n+"}]}