{"sha": "bdda9b179dab8cce7cb1308d327fc6eb9ba53694", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRkYTliMTc5ZGFiOGNjZTdjYjEzMDhkMzI3ZmM2ZWI5YmE1MzY5NA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-28T20:47:49Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-28T20:47:49Z"}, "message": "Delete find_last_value\n\ngcc/\n2014-08-28  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtl.h (find_last_value): Delete.\n\t* rtlanal.c (find_last_value): Delete.\n\nFrom-SVN: r214694", "tree": {"sha": "8a87291d775985e6bc4884ae73efc5bc6a95a768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a87291d775985e6bc4884ae73efc5bc6a95a768"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdda9b179dab8cce7cb1308d327fc6eb9ba53694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdda9b179dab8cce7cb1308d327fc6eb9ba53694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdda9b179dab8cce7cb1308d327fc6eb9ba53694", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdda9b179dab8cce7cb1308d327fc6eb9ba53694/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc01c3d194afdf0ef85c46a97459badf1b149225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc01c3d194afdf0ef85c46a97459badf1b149225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc01c3d194afdf0ef85c46a97459badf1b149225"}], "stats": {"total": 52, "additions": 5, "deletions": 47}, "files": [{"sha": "bd0c89943fb0ca4ea8a46bec76e7c2d6f083a264", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdda9b179dab8cce7cb1308d327fc6eb9ba53694/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdda9b179dab8cce7cb1308d327fc6eb9ba53694/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdda9b179dab8cce7cb1308d327fc6eb9ba53694", "patch": "@@ -1,3 +1,8 @@\n+2014-08-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtl.h (find_last_value): Delete.\n+\t* rtlanal.c (find_last_value): Delete.\n+\n 2014-08-28  David Malcolm  <dmalcolm@redhat.com>\n \n \t* cfgexpand.c (pass_expand::execute): Strengthen local \"after\""}, {"sha": "e32c5a71cd59d8bf492d1cdbc5586bb9b55526b3", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdda9b179dab8cce7cb1308d327fc6eb9ba53694/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdda9b179dab8cce7cb1308d327fc6eb9ba53694/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=bdda9b179dab8cce7cb1308d327fc6eb9ba53694", "patch": "@@ -2751,7 +2751,6 @@ extern rtx single_set_2 (const_rtx, const_rtx);\n extern int multiple_sets (const_rtx);\n extern int set_noop_p (const_rtx);\n extern int noop_move_p (const_rtx);\n-extern rtx find_last_value (rtx, rtx *, rtx, int);\n extern int refers_to_regno_p (unsigned int, unsigned int, const_rtx, rtx *);\n extern int reg_overlap_mentioned_p (const_rtx, const_rtx);\n extern const_rtx set_of (const_rtx, const_rtx);"}, {"sha": "e95be62bc8118923b76c4a3f2cdf473e5ed4b8c2", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdda9b179dab8cce7cb1308d327fc6eb9ba53694/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdda9b179dab8cce7cb1308d327fc6eb9ba53694/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=bdda9b179dab8cce7cb1308d327fc6eb9ba53694", "patch": "@@ -1361,52 +1361,6 @@ noop_move_p (const_rtx insn)\n }\n \f\n \n-/* Return the last thing that X was assigned from before *PINSN.  If VALID_TO\n-   is not NULL_RTX then verify that the object is not modified up to VALID_TO.\n-   If the object was modified, if we hit a partial assignment to X, or hit a\n-   CODE_LABEL first, return X.  If we found an assignment, update *PINSN to\n-   point to it.  ALLOW_HWREG is set to 1 if hardware registers are allowed to\n-   be the src.  */\n-\n-rtx\n-find_last_value (rtx x, rtx *pinsn, rtx valid_to, int allow_hwreg)\n-{\n-  rtx p;\n-\n-  for (p = PREV_INSN (*pinsn); p && !LABEL_P (p);\n-       p = PREV_INSN (p))\n-    if (INSN_P (p))\n-      {\n-\trtx set = single_set (p);\n-\trtx note = find_reg_note (p, REG_EQUAL, NULL_RTX);\n-\n-\tif (set && rtx_equal_p (x, SET_DEST (set)))\n-\t  {\n-\t    rtx src = SET_SRC (set);\n-\n-\t    if (note && GET_CODE (XEXP (note, 0)) != EXPR_LIST)\n-\t      src = XEXP (note, 0);\n-\n-\t    if ((valid_to == NULL_RTX\n-\t\t || ! modified_between_p (src, PREV_INSN (p), valid_to))\n-\t\t/* Reject hard registers because we don't usually want\n-\t\t   to use them; we'd rather use a pseudo.  */\n-\t\t&& (! (REG_P (src)\n-\t\t      && REGNO (src) < FIRST_PSEUDO_REGISTER) || allow_hwreg))\n-\t      {\n-\t\t*pinsn = p;\n-\t\treturn src;\n-\t      }\n-\t  }\n-\n-\t/* If set in non-simple way, we don't have a value.  */\n-\tif (reg_set_p (x, p))\n-\t  break;\n-      }\n-\n-  return x;\n-}\n-\f\n /* Return nonzero if register in range [REGNO, ENDREGNO)\n    appears either explicitly or implicitly in X\n    other than being stored into."}]}