{"sha": "0c9ce4e61873debeede4b37b437ece5432c23ac7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM5Y2U0ZTYxODczZGViZWVkZTRiMzdiNDM3ZWNlNTQzMmMyM2FjNw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-09-26T10:35:27Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-09-26T10:35:27Z"}, "message": "S/390: Fix vector fp unordered compares\n\nV2DF mode was still hard-coded here.\n\ngcc/ChangeLog:\n\n2017-09-26  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.c (s390_expand_vec_compare): Use the new mode\n\tindependent expanders.\n\t* config/s390/vector.md (\"vec_cmpuneq\", \"vec_cmpltgt\")\n\t(\"vec_ordered\", \"vec_unordered\"): New expanders.\n\nFrom-SVN: r253197", "tree": {"sha": "fac7a03c8e10c80e1fcac373ffcc4ea08e713b45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fac7a03c8e10c80e1fcac373ffcc4ea08e713b45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c9ce4e61873debeede4b37b437ece5432c23ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c9ce4e61873debeede4b37b437ece5432c23ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c9ce4e61873debeede4b37b437ece5432c23ac7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c9ce4e61873debeede4b37b437ece5432c23ac7/comments", "author": null, "committer": null, "parents": [{"sha": "41067f07b9eb7bff5c26fe67ff9baefec2556a6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41067f07b9eb7bff5c26fe67ff9baefec2556a6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41067f07b9eb7bff5c26fe67ff9baefec2556a6b"}], "stats": {"total": 79, "additions": 75, "deletions": 4}, "files": [{"sha": "430b08b6e10431306eef89a8e585048679bc49e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9ce4e61873debeede4b37b437ece5432c23ac7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9ce4e61873debeede4b37b437ece5432c23ac7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c9ce4e61873debeede4b37b437ece5432c23ac7", "patch": "@@ -1,3 +1,10 @@\n+2017-09-26  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_expand_vec_compare): Use the new mode\n+\tindependent expanders.\n+\t* config/s390/vector.md (\"vec_cmpuneq\", \"vec_cmpltgt\")\n+\t(\"vec_ordered\", \"vec_unordered\"): New expanders.\n+\n 2017-09-26  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_preferred_simd_mode): Return V4SFmode"}, {"sha": "d2671bae7bbaf9618b799c612894f97cae66785a", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9ce4e61873debeede4b37b437ece5432c23ac7/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9ce4e61873debeede4b37b437ece5432c23ac7/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=0c9ce4e61873debeede4b37b437ece5432c23ac7", "patch": "@@ -6396,16 +6396,16 @@ s390_expand_vec_compare (rtx target, enum rtx_code cond,\n \t  /* UNLT: a u< b -> !(a >= b) */\n \tcase UNLT: cond = GE; neg_p = true;                break;\n \tcase UNEQ:\n-\t  emit_insn (gen_vec_cmpuneqv2df (target, cmp_op1, cmp_op2));\n+\t  emit_insn (gen_vec_cmpuneq (target, cmp_op1, cmp_op2));\n \t  return;\n \tcase LTGT:\n-\t  emit_insn (gen_vec_cmpltgtv2df (target, cmp_op1, cmp_op2));\n+\t  emit_insn (gen_vec_cmpltgt (target, cmp_op1, cmp_op2));\n \t  return;\n \tcase ORDERED:\n-\t  emit_insn (gen_vec_orderedv2df (target, cmp_op1, cmp_op2));\n+\t  emit_insn (gen_vec_ordered (target, cmp_op1, cmp_op2));\n \t  return;\n \tcase UNORDERED:\n-\t  emit_insn (gen_vec_unorderedv2df (target, cmp_op1, cmp_op2));\n+\t  emit_insn (gen_vec_unordered (target, cmp_op1, cmp_op2));\n \t  return;\n \tdefault: break;\n \t}"}, {"sha": "d40bf1ed1f54639caa3dc272a59a84265efd98d0", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9ce4e61873debeede4b37b437ece5432c23ac7/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9ce4e61873debeede4b37b437ece5432c23ac7/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=0c9ce4e61873debeede4b37b437ece5432c23ac7", "patch": "@@ -1406,6 +1406,22 @@\n   operands[3] = gen_reg_rtx (<tointvec>mode);\n })\n \n+(define_expand \"vec_cmpuneq\"\n+  [(match_operand 0 \"register_operand\" \"\")\n+   (match_operand 1 \"register_operand\" \"\")\n+   (match_operand 2 \"register_operand\" \"\")]\n+  \"TARGET_VX\"\n+{\n+  if (GET_MODE (operands[1]) == V4SFmode)\n+    emit_insn (gen_vec_cmpuneqv4sf (operands[0], operands[1], operands[2]));\n+  else if (GET_MODE (operands[1]) == V2DFmode)\n+    emit_insn (gen_vec_cmpuneqv2df (operands[0], operands[1], operands[2]));\n+  else\n+    gcc_unreachable ();\n+\n+  DONE;\n+})\n+\n ; LTGT a <> b -> a > b | b > a\n (define_expand \"vec_cmpltgt<mode>\"\n   [(set (match_operand:<tointvec>         0 \"register_operand\" \"=v\")\n@@ -1418,6 +1434,22 @@\n   operands[3] = gen_reg_rtx (<tointvec>mode);\n })\n \n+(define_expand \"vec_cmpltgt\"\n+  [(match_operand 0 \"register_operand\" \"\")\n+   (match_operand 1 \"register_operand\" \"\")\n+   (match_operand 2 \"register_operand\" \"\")]\n+  \"TARGET_VX\"\n+{\n+  if (GET_MODE (operands[1]) == V4SFmode)\n+    emit_insn (gen_vec_cmpltgtv4sf (operands[0], operands[1], operands[2]));\n+  else if (GET_MODE (operands[1]) == V2DFmode)\n+    emit_insn (gen_vec_cmpltgtv2df (operands[0], operands[1], operands[2]));\n+  else\n+    gcc_unreachable ();\n+\n+  DONE;\n+})\n+\n ; ORDERED (a, b): a >= b | b > a\n (define_expand \"vec_ordered<mode>\"\n   [(set (match_operand:<tointvec>          0 \"register_operand\" \"=v\")\n@@ -1430,6 +1462,22 @@\n   operands[3] = gen_reg_rtx (<tointvec>mode);\n })\n \n+(define_expand \"vec_ordered\"\n+  [(match_operand 0 \"register_operand\" \"\")\n+   (match_operand 1 \"register_operand\" \"\")\n+   (match_operand 2 \"register_operand\" \"\")]\n+  \"TARGET_VX\"\n+{\n+  if (GET_MODE (operands[1]) == V4SFmode)\n+    emit_insn (gen_vec_orderedv4sf (operands[0], operands[1], operands[2]));\n+  else if (GET_MODE (operands[1]) == V2DFmode)\n+    emit_insn (gen_vec_orderedv2df (operands[0], operands[1], operands[2]));\n+  else\n+    gcc_unreachable ();\n+\n+  DONE;\n+})\n+\n ; UNORDERED (a, b): !ORDERED (a, b)\n (define_expand \"vec_unordered<mode>\"\n   [(set (match_operand:<tointvec>          0 \"register_operand\" \"=v\")\n@@ -1443,6 +1491,22 @@\n   operands[3] = gen_reg_rtx (<tointvec>mode);\n })\n \n+(define_expand \"vec_unordered\"\n+  [(match_operand 0 \"register_operand\" \"\")\n+   (match_operand 1 \"register_operand\" \"\")\n+   (match_operand 2 \"register_operand\" \"\")]\n+  \"TARGET_VX\"\n+{\n+  if (GET_MODE (operands[1]) == V4SFmode)\n+    emit_insn (gen_vec_unorderedv4sf (operands[0], operands[1], operands[2]));\n+  else if (GET_MODE (operands[1]) == V2DFmode)\n+    emit_insn (gen_vec_unorderedv2df (operands[0], operands[1], operands[2]));\n+  else\n+    gcc_unreachable ();\n+\n+  DONE;\n+})\n+\n (define_insn \"*vec_load_pair<mode>\"\n   [(set (match_operand:V_HW_64                       0 \"register_operand\" \"=v,v\")\n \t(vec_concat:V_HW_64 (match_operand:<non_vec> 1 \"register_operand\"  \"d,v\")"}]}