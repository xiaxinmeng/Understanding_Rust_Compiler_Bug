{"sha": "852b11da11a181df517c0348df044354ff0656d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyYjExZGExMWExODFkZjUxN2MwMzQ4ZGYwNDQzNTRmZjA2NTZkNg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-07-08T01:55:38Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-07-08T01:55:38Z"}, "message": "Generate 128-bit int divide/modulus on power10.\n\nThis patch adds support for the VDIVSQ, VDIVUQ, VMODSQ, and VMODUQ\ninstructions to do 128-bit arithmetic.\n\n2021-07-07  Michael Meissner  <meissner@linux.ibm.com>\n\ngcc/\n\tPR target/100809\n\t* config/rs6000/rs6000.md (udivti3): New insn.\n\t(divti3): New insn.\n\t(umodti3): New insn.\n\t(modti3): New insn.\n\ngcc/testsuite/\n\tPR target/100809\n\t* gcc.target/powerpc/p10-vdivq-vmodq.c: New test.", "tree": {"sha": "3e9017445cdb5c294e189f9825ffd5c605fc0a51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e9017445cdb5c294e189f9825ffd5c605fc0a51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/852b11da11a181df517c0348df044354ff0656d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852b11da11a181df517c0348df044354ff0656d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852b11da11a181df517c0348df044354ff0656d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852b11da11a181df517c0348df044354ff0656d6/comments", "author": null, "committer": null, "parents": [{"sha": "c24a97078221fad98d1f48ed9bd1af2094e1a01d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24a97078221fad98d1f48ed9bd1af2094e1a01d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c24a97078221fad98d1f48ed9bd1af2094e1a01d"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "2368153269ca5f009c798dcc2a3dd9c8a8304899", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b11da11a181df517c0348df044354ff0656d6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b11da11a181df517c0348df044354ff0656d6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=852b11da11a181df517c0348df044354ff0656d6", "patch": "@@ -3234,6 +3234,14 @@\n   [(set_attr \"type\" \"div\")\n    (set_attr \"size\" \"<bits>\")])\n \n+(define_insn \"udivti3\"\n+  [(set (match_operand:TI 0 \"altivec_register_operand\" \"=v\")\n+\t(udiv:TI (match_operand:TI 1 \"altivec_register_operand\" \"v\")\n+\t\t (match_operand:TI 2 \"altivec_register_operand\" \"v\")))]\n+  \"TARGET_POWER10 && TARGET_POWERPC64\"\n+  \"vdivuq %0,%1,%2\"\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"128\")])\n \n ;; For powers of two we can do sra[wd]i/addze for divide and then adjust for\n ;; modulus.  If it isn't a power of two, force operands into register and do\n@@ -3324,6 +3332,15 @@\n    (set_attr \"length\" \"8,12\")\n    (set_attr \"cell_micro\" \"not\")])\n \n+(define_insn \"divti3\"\n+  [(set (match_operand:TI 0 \"altivec_register_operand\" \"=v\")\n+\t(div:TI (match_operand:TI 1 \"altivec_register_operand\" \"v\")\n+\t\t(match_operand:TI 2 \"altivec_register_operand\" \"v\")))]\n+  \"TARGET_POWER10 && TARGET_POWERPC64\"\n+  \"vdivsq %0,%1,%2\"\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"128\")])\n+\n (define_expand \"mod<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\")\n \t(mod:GPR (match_operand:GPR 1 \"gpc_reg_operand\")\n@@ -3424,6 +3441,23 @@\n \t(minus:GPR (match_dup 1)\n \t\t   (match_dup 3)))])\n \n+(define_insn \"umodti3\"\n+  [(set (match_operand:TI 0 \"altivec_register_operand\" \"=v\")\n+\t(umod:TI (match_operand:TI 1 \"altivec_register_operand\" \"v\")\n+\t\t (match_operand:TI 2 \"altivec_register_operand\" \"v\")))]\n+  \"TARGET_POWER10 && TARGET_POWERPC64\"\n+  \"vmoduq %0,%1,%2\"\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"128\")])\n+\n+(define_insn \"modti3\"\n+  [(set (match_operand:TI 0 \"altivec_register_operand\" \"=v\")\n+\t(mod:TI (match_operand:TI 1 \"altivec_register_operand\" \"v\")\n+\t\t(match_operand:TI 2 \"altivec_register_operand\" \"v\")))]\n+  \"TARGET_POWER10 && TARGET_POWERPC64\"\n+  \"vmodsq %0,%1,%2\"\n+  [(set_attr \"type\" \"vecdiv\")\n+   (set_attr \"size\" \"128\")])\n \f\n ;; Logical instructions\n ;; The logical instructions are mostly combined by using match_operator,"}, {"sha": "84685e5ff430d22d9c498f245b639d117bdfbbe7", "filename": "gcc/testsuite/gcc.target/powerpc/p10-vdivq-vmodq.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852b11da11a181df517c0348df044354ff0656d6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10-vdivq-vmodq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852b11da11a181df517c0348df044354ff0656d6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10-vdivq-vmodq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp10-vdivq-vmodq.c?ref=852b11da11a181df517c0348df044354ff0656d6", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-require-effective-target int128 } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2\" } */\n+\n+unsigned __int128 u_div(unsigned __int128 a, unsigned __int128 b)\n+{\n+   return a/b;\n+}\n+\n+unsigned __int128 u_mod(unsigned __int128 a, unsigned __int128 b)\n+{\n+   return a%b;\n+}\n+__int128 s_div(__int128 a, __int128 b)\n+{\n+   return a/b;\n+}\n+\n+__int128 s_mod(__int128 a, __int128 b)\n+{\n+   return a%b;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvdivsq\\M} } } */\n+/* { dg-final { scan-assembler {\\mvdivuq\\M} } } */\n+/* { dg-final { scan-assembler {\\mvmodsq\\M} } } */\n+/* { dg-final { scan-assembler {\\mvmoduq\\M} } } */"}]}