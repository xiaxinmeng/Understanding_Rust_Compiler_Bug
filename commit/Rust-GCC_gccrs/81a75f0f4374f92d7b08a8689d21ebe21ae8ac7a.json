{"sha": "81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFhNzVmMGY0Mzc0ZjkyZDdiMDhhODY4OWQyMWViZTIxYWU4YWM3YQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-25T22:01:55Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-25T22:01:55Z"}, "message": "Makefile.in (C_COMMON_H): Fix.\n\n\t* Makefile.in (C_COMMON_H): Fix.\n\tUpdate other targets.\n\t* c-common.c: Don't include c-lex.h.\n\t(builtin_define_with_value): Make static and prototype.\n\t(builtin_define_std): Move from c-lex.h.\n\t* c-common.h (init_c_lex): Move from c-lex.h.\n\t* c-decl.c: Don't include c-lex.h.\n\t(make_pointer_declarator): Move from c-parse.in.\n\t* c-lex.c: Don't include c-lex.h.\n\t* c-lex.h: Remove.\n\t* c-parse.in: Don't include c-lex.h; include c-pragma.h.\n\t(make_pointer_declarator): Move to c-decl.c.\n\t* c-pragma.c: Don't include c-lex.h.\n\t* c-pragma.h (yydebug, YYDEBUG, parse_in, c_lex): Move from c-lex.h.\n\t* c-tree.h (make_pointer_declarator): New.\ncp:\n\t* lex.c: Don't include c-lex.h.\n\t* parse.y, spew.c: Don't include c-lex.h; include c-pragma.h.\ndoc:\n\t* passes.texi, tm.texi: Update.\nobjc:\n\t* Make-lang.in: Update and correct.\n\t* objc-act.c: Don't include c-lex.h or cpplib.h.\ntreelang:\n\t* treetree.c: Don't include c-lex.h.\nconfig:\n\t* darwin-c.c: Don't include c-lex.h.\n\t* c4x/c4x-c.c: Don't include c-lex.h.\n\t* c4x/t-c4x: Update.\n\t* i370/i370-c.c: Don't include c-lex.h.\n\t* i370/t-i370: Update.\n\t* i960/i960-c.c: Don't include c-lex.h.\n\t* i960/i960.c: Don't include cpplib.h, c-lex.h or c-pragma.h.\n\t* i960/t-960bare: Update.\n\t* i960/t-vxworks: Update.\n\t* rs6000/rs6000-c.c: Don't include c-lex.h; include c-pragma.h.\n\t* rs6000/t-darwin: Update.\n\t* rs6000/t-rs6000-c-rule: Update.\n\t* v850/v850-c.c: Don't include c-lex.h.\n\t* v850/v850.c: Don't include c-lex.h or cpplib.h.\n\nFrom-SVN: r53876", "tree": {"sha": "c375aca387e79081a05e56f6cd9afddf5585f625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c375aca387e79081a05e56f6cd9afddf5585f625"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/comments", "author": null, "committer": null, "parents": [{"sha": "04d2be8e6d43fcfa885caf4a70a38a479c0faaba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d2be8e6d43fcfa885caf4a70a38a479c0faaba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d2be8e6d43fcfa885caf4a70a38a479c0faaba"}], "stats": {"total": 228, "additions": 107, "deletions": 121}, "files": [{"sha": "9849c73315aa9c5bcc23b870fcfdaa22f04af4c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -1,3 +1,44 @@\n+2002-05-25  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (C_COMMON_H): Fix.\n+\tUpdate other targets.\n+\t* c-common.c: Don't include c-lex.h.\n+\t(builtin_define_with_value): Make static and prototype.\n+\t(builtin_define_std): Move from c-lex.h.\n+\t* c-common.h (init_c_lex): Move from c-lex.h.\n+\t* c-decl.c: Don't include c-lex.h.\n+\t(make_pointer_declarator): Move from c-parse.in.\n+\t* c-lex.c: Don't include c-lex.h.\n+\t* c-lex.h: Remove.\n+\t* c-parse.in: Don't include c-lex.h; include c-pragma.h.\n+\t(make_pointer_declarator): Move to c-decl.c.\n+\t* c-pragma.c: Don't include c-lex.h.\n+\t* c-pragma.h (yydebug, YYDEBUG, parse_in, c_lex): Move from c-lex.h.\n+\t* c-tree.h (make_pointer_declarator): New.\n+doc:\n+\t* passes.texi, tm.texi: Update.\n+objc:\n+\t* Make-lang.in: Update and correct.\n+\t* objc-act.c: Don't include c-lex.h or cpplib.h.\n+treelang:\n+\t* treetree.c: Don't include c-lex.h.\n+config:\n+\t* darwin-c.c: Don't include c-lex.h.\n+\t* c4x/c4x-c.c: Don't include c-lex.h.\n+\t* c4x/t-c4x: Update.\n+\t* i370/i370-c.c: Don't include c-lex.h.\n+\t* i370/t-i370: Update.\n+\t* i960/i960-c.c: Don't include c-lex.h.\n+\t* i960/i960.c: Don't include cpplib.h, c-lex.h or c-pragma.h.\n+\t* i960/t-960bare: Update.\n+\t* i960/t-vxworks: Update.\n+\t* rs6000/rs6000-c.c: Don't include c-lex.h; include c-pragma.h.\n+\t* rs6000/t-darwin: Update.\n+\t* rs6000/t-rs6000-c-rule: Update.\n+\t* v850/v850-c.c: Don't include c-lex.h.\n+\t* v850/v850.c: Don't include c-lex.h or cpplib.h.\n+\n+\n 2002-05-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree.def: Fix typos."}, {"sha": "10dcfa855e4162bdffa94e09f6c4f14662e56aaa", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -569,7 +569,7 @@ GCC_H = gcc.h version.h\n GGC_H = ggc.h varray.h\n TIMEVAR_H = timevar.h timevar.def\n INSN_ATTR_H = insn-attr.h $(srcdir)/insn-addr.h $(srcdir)/varray.h\n-C_COMMON_H = c-common.h $(SPLAY_TREE_H)\n+C_COMMON_H = c-common.h $(SPLAY_TREE_H) $(CPPLIB_H)\n C_TREE_H = c-tree.h $(C_COMMON_H)\n SYSTEM_H = system.h hwint.h $(srcdir)/../include/libiberty.h\n PREDICT_H = predict.h predict.def\n@@ -1141,7 +1141,7 @@ s-crt0:\t$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)\n \n c-errors.o: c-errors.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) flags.h \\\n     diagnostic.h $(TM_P_H)\n-c-parse.o : $(srcdir)/c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h $(GGC_H) intl.h \\\n+c-parse.o : $(srcdir)/c-parse.c $(CONFIG_H) $(TREE_H) $(GGC_H) intl.h \\\n     $(C_TREE_H) input.h flags.h $(SYSTEM_H) toplev.h output.h $(CPPLIB_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t       -c $(srcdir)/c-parse.c $(OUTPUT_OPTION)\n@@ -1164,13 +1164,13 @@ $(srcdir)/c-parse.y: c-parse.in\n \t$(SHELL) $(srcdir)/move-if-change tmp-c-parse.y $(srcdir)/c-parse.y\n \n c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) $(C_TREE_H) \\\n-    $(GGC_H) $(TARGET_H) c-lex.h flags.h function.h output.h $(EXPR_H) \\\n+    $(GGC_H) $(TARGET_H) flags.h function.h output.h $(EXPR_H) \\\n     debug.h toplev.h intl.h $(TM_P_H) tree-inline.h $(TIMEVAR_H) c-pragma.h\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     $(TARGET_H) flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h $(TM_P_H)\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     langhooks.h $(LANGHOOKS_DEF_H) c-common.h\n-c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) c-lex.h \\\n+c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) \\\n     debug.h $(C_TREE_H) c-common.h \\\n     c-pragma.h input.h intl.h flags.h toplev.h output.h \\\n     mbchar.h $(CPPLIB_H) $(EXPR_H) $(TM_P_H)\n@@ -1240,7 +1240,7 @@ c-format.o : c-format.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) langhooks.h \\\n \t$(C_COMMON_H) flags.h toplev.h intl.h diagnostic.h\n \n c-semantics.o : c-semantics.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n-\tc-lex.h flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n+\tflags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n \t$(EXPR_H) $(PREDICT_H)\n \n # Language-independent files."}, {"sha": "15b95475d9a3e2e1f71e157a0f430d2b8d809bc3", "filename": "gcc/c-common.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -34,12 +34,12 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"diagnostic.h\"\n #include \"tm_p.h\"\n #include \"obstack.h\"\n-#include \"c-lex.h\"\n #include \"cpplib.h\"\n #include \"target.h\"\n #include \"langhooks.h\"\n #include \"except.h\"\t\t/* For USING_SJLJ_EXCEPTIONS.  */\n-cpp_reader *parse_in;\t\t/* Declared in c-lex.h.  */\n+\n+cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \n /* We let tm.h override the types used here, to handle trivial differences\n    such as the choice of unsigned int or long unsigned int for size_t.\n@@ -359,6 +359,9 @@ static void check_nonnull_arg\t\tPARAMS ((void *, tree,\n static bool nonnull_check_p\t\tPARAMS ((tree, unsigned HOST_WIDE_INT));\n static bool get_nonnull_operand\t\tPARAMS ((tree,\n \t\t\t\t\t\t unsigned HOST_WIDE_INT *));\n+void builtin_define_std PARAMS ((const char *));\n+static void builtin_define_with_value PARAMS ((const char *, const char *,\n+\t\t\t\t\t       int));\n \n /* Table of machine-independent attributes common to all C-like languages.  */\n const struct attribute_spec c_common_attribute_table[] =\n@@ -4401,6 +4404,8 @@ cb_register_builtins (pfile)\n   /* A straightforward target hook doesn't work, because of problems\n      linking that hook's body when part of non-C front ends.  */\n # define preprocessing_asm_p() (cpp_get_options (pfile)->lang == CLK_ASM)\n+# define builtin_define(TXT) cpp_define (pfile, TXT)\n+# define builtin_assert(TXT) cpp_assert (pfile, TXT)\n   TARGET_CPU_CPP_BUILTINS ();\n   TARGET_OS_CPP_BUILTINS ();\n }\n@@ -4451,7 +4456,7 @@ builtin_define_std (macro)\n /* Pass an object-like macro and a value to define it to.  The third\n    parameter says whether or not to turn the value into a string\n    constant.  */\n-void\n+static void\n builtin_define_with_value (macro, expansion, is_str)\n      const char *macro;\n      const char *expansion;"}, {"sha": "aab0e33253eabea7684f77ee6a65d2c753e34861", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -896,6 +896,8 @@ extern int c_staticp                            PARAMS ((tree));\n \n extern int c_common_unsafe_for_reeval\t\tPARAMS ((tree));\n \n+extern const char *init_c_lex\t\t\tPARAMS ((const char *));\n+\n /* Information recorded about each file examined during compilation.  */\n \n struct c_fileinfo"}, {"sha": "223f905c3f605559f06b071aa120a73671988bc3", "filename": "gcc/c-decl.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -37,7 +37,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"output.h\"\n #include \"expr.h\"\n #include \"c-tree.h\"\n-#include \"c-lex.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\"\n@@ -7289,3 +7288,24 @@ build_void_list_node ()\n   tree t = build_tree_list (NULL_TREE, void_type_node);\n   return t;\n }\n+\n+/* Return something to represent absolute declarators containing a *.\n+   TARGET is the absolute declarator that the * contains.\n+   TYPE_QUALS_ATTRS is a list of modifiers such as const or volatile\n+   to apply to the pointer type, represented as identifiers, possible mixed\n+   with attributes.\n+\n+   We return an INDIRECT_REF whose \"contents\" are TARGET (inside a TREE_LIST,\n+   if attributes are present) and whose type is the modifier list.  */\n+\n+tree\n+make_pointer_declarator (type_quals_attrs, target)\n+     tree type_quals_attrs, target;\n+{\n+  tree quals, attrs;\n+  tree itarget = target;\n+  split_specs_attrs (type_quals_attrs, &quals, &attrs);\n+  if (attrs != NULL_TREE)\n+    itarget = tree_cons (attrs, target, NULL_TREE);\n+  return build1 (INDIRECT_REF, quals, itarget);\n+}"}, {"sha": "292c267b312f27e31cacca2a431122f5addd6731", "filename": "gcc/c-lex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -27,7 +27,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"expr.h\"\n #include \"input.h\"\n #include \"output.h\"\n-#include \"c-lex.h\"\n #include \"c-tree.h\"\n #include \"c-common.h\"\n #include \"flags.h\""}, {"sha": "51538ab5ebf5cb07ae5cc455a07647ef7b3e4768", "filename": "gcc/c-lex.h", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d2be8e6d43fcfa885caf4a70a38a479c0faaba/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d2be8e6d43fcfa885caf4a70a38a479c0faaba/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=04d2be8e6d43fcfa885caf4a70a38a479c0faaba", "patch": "@@ -1,56 +0,0 @@\n-/* Define constants for communication with c-parse.y.\n-   Copyright (C) 1987, 1992, 1998, 1999, 2000 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 2, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to the Free\n-Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n-02111-1307, USA.  */\n-\n-#ifndef GCC_C_LEX_H\n-#define GCC_C_LEX_H\n-\n-/* Cause the `yydebug' variable to be defined.  */\n-#define YYDEBUG 1\n-extern int yydebug;\n-\n-extern tree make_pointer_declarator PARAMS ((tree, tree));\n-\n-extern int c_lex PARAMS ((tree *));\n-extern const char *init_c_lex PARAMS ((const char *));\n-\n-struct cpp_reader;\n-extern struct cpp_reader* parse_in;\n-\n-#define builtin_define(TXT) cpp_define (pfile, TXT)\n-#define builtin_assert(TXT) cpp_assert (pfile, TXT)\n-\n-/* Pass an object-like macro.  If it doesn't lie in the user's\n-   namespace, defines it unconditionally.  Otherwise define a version\n-   with two leading underscores, and another version with two leading\n-   and trailing underscores, and define the original only if an ISO\n-   standard was not nominated.\n-\n-   e.g. passing \"unix\" defines \"__unix\", \"__unix__\" and possibly\n-   \"unix\".  Passing \"_mips\" defines \"__mips\", \"__mips__\" and possibly\n-   \"_mips\".  */\n-extern void builtin_define_std PARAMS ((const char *));\n-\n-/* Pass an object-like macro and a value to define it to.  The third\n-   parameter says whether or not to turn the value into a string\n-   constant.  */\n-extern void builtin_define_with_value PARAMS ((const char *, const char *,\n-\t\t\t\t\t       int));\n-\n-#endif /* ! GCC_C_LEX_H */"}, {"sha": "78a53869dd76aba35f88041aabafc2e596b81a9b", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -43,9 +43,8 @@ end ifc\n #include \"cpplib.h\"\n #include \"intl.h\"\n #include \"timevar.h\"\n-#include \"c-lex.h\"\t\t/* Gets YYDEBUG macro.  */\n+#include \"c-pragma.h\"\t\t/* For YYDEBUG definition, and parse_in.  */\n #include \"c-tree.h\"\n-#include \"c-pragma.h\"\n #include \"flags.h\"\n #include \"output.h\"\n #include \"toplev.h\"\n@@ -3933,27 +3932,6 @@ yyprint (file, yychar, yyl)\n /* This is not the ideal place to put these, but we have to get them out\n    of c-lex.c because cp/lex.c has its own versions.  */\n \n-/* Return something to represent absolute declarators containing a *.\n-   TARGET is the absolute declarator that the * contains.\n-   TYPE_QUALS_ATTRS is a list of modifiers such as const or volatile\n-   to apply to the pointer type, represented as identifiers, possible mixed\n-   with attributes.\n-\n-   We return an INDIRECT_REF whose \"contents\" are TARGET (inside a TREE_LIST,\n-   if attributes are present) and whose type is the modifier list.  */\n-\n-tree\n-make_pointer_declarator (type_quals_attrs, target)\n-     tree type_quals_attrs, target;\n-{\n-  tree quals, attrs;\n-  tree itarget = target;\n-  split_specs_attrs (type_quals_attrs, &quals, &attrs);\n-  if (attrs != NULL_TREE)\n-    itarget = tree_cons (attrs, target, NULL_TREE);\n-  return build1 (INDIRECT_REF, quals, itarget);\n-}\n-\n /* Free malloced parser stacks if necessary.  */\n \n void"}, {"sha": "8801c697a8cdaf7f734c16593c31e2c060210096", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -29,7 +29,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"flags.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n-#include \"c-lex.h\"\n #include \"c-common.h\"\n #include \"output.h\"\n #include \"tm_p.h\""}, {"sha": "8e7589f1fdd7df88ce5172310c238f60a65c5313", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -22,6 +22,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_C_PRAGMA_H\n #define GCC_C_PRAGMA_H\n \n+/* Cause the `yydebug' variable to be defined.  */\n+#define YYDEBUG 1\n+extern int yydebug;\n+\n+struct cpp_reader;\n+extern struct cpp_reader* parse_in;\n+\n #ifdef HANDLE_SYSV_PRAGMA\n #if ((defined (ASM_WEAKEN_LABEL) && defined (ASM_OUTPUT_WEAK_ALIAS)) \\\n      || defined (ASM_WEAKEN_DECL))\n@@ -56,4 +63,6 @@ extern void cpp_register_pragma PARAMS ((cpp_reader *,\n extern void maybe_apply_pragma_weak PARAMS ((tree));\n extern tree maybe_apply_renaming_pragma PARAMS ((tree, tree));\n \n+extern int c_lex PARAMS ((tree *));\n+\n #endif /* GCC_C_PRAGMA_H */"}, {"sha": "77eeb3e4c54c93f87e0463e7ad75f6400966c982", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -227,7 +227,7 @@ extern tree xref_tag                            PARAMS ((enum tree_code, tree));\n extern tree c_begin_compound_stmt               PARAMS ((void));\n extern void c_expand_deferred_function          PARAMS ((tree));\n extern void c_expand_decl_stmt                  PARAMS ((tree));\n-\n+extern tree make_pointer_declarator\t\tPARAMS ((tree, tree));\n \n /* in c-objc-common.c */\n extern int c_disregard_inline_limits\t\tPARAMS ((tree));"}, {"sha": "5a680f554d90617ee02cbc0678a0d2db65f80137", "filename": "gcc/config/c4x/c4x-c.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-c.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -28,7 +28,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"cpplib.h\"\n #include \"c-pragma.h\"\n-#include \"c-lex.h\"\n #include \"c4x-protos.h\"\n \n static int c4x_parse_pragma PARAMS ((const char *, tree *, tree *));"}, {"sha": "aee0a7bb3395e39be6684e27e1940b6cb23a0365", "filename": "gcc/config/c4x/t-c4x", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fc4x%2Ft-c4x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fc4x%2Ft-c4x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Ft-c4x?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -8,7 +8,7 @@ LIB1ASMFUNCS = _divsf3 _divsi3 _udivsi3 _umodsi3 _modsi3 _mulsi3 \\\n TARGET_LIBGCC2_CFLAGS = -Dexit=unused_exit\n \n c4x-c.o: $(srcdir)/config/c4x/c4x-c.c $(srcdir)/config/c4x/c4x-protos.h \\\n-    $(CONFIG_H) $(SYSTEM_H) cpplib.h $(TREE_H) c-pragma.h c-lex.h toplev.h\n+    $(CONFIG_H) $(SYSTEM_H) cpplib.h $(TREE_H) c-pragma.h toplev.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n MULTILIB_OPTIONS = m30 msmall mmemparm"}, {"sha": "8081f0fe2a73602243b54184f2126ff02531049f", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -25,7 +25,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"cpplib.h\"\n #include \"tree.h\"\n #include \"c-pragma.h\"\n-#include \"c-lex.h\"\n #include \"c-tree.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\""}, {"sha": "d2344bc0108d7e5e3a91d5f1cad609b5088c5bf0", "filename": "gcc/config/i370/i370-c.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fi370%2Fi370-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fi370%2Fi370-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370-c.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -28,7 +28,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"cpplib.h\"\n #include \"c-pragma.h\"\n-#include \"c-lex.h\"\n #include \"i370-protos.h\"\n \n #ifdef TARGET_HLASM"}, {"sha": "049d84f6db913e9978c926a721b17ef5c63dcaad", "filename": "gcc/config/i370/t-i370", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fi370%2Ft-i370", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fi370%2Ft-i370", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Ft-i370?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -1,3 +1,3 @@\n i370-c.o: $(srcdir)/config/i370/i370-c.c $(srcdir)/config/i370/i370-protos.h \\\n-    $(CONFIG_H) $(SYSTEM_H) cpplib.h $(TREE_H) c-pragma.h c-lex.h toplev.h\n+    $(CONFIG_H) $(SYSTEM_H) cpplib.h $(TREE_H) c-pragma.h toplev.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "b6a9b749d0c9bb1f373945820fe187b87ba5baf9", "filename": "gcc/config/i960/i960-c.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fi960%2Fi960-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fi960%2Fi960-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-c.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -27,7 +27,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"cpplib.h\"\n #include \"tree.h\"\n #include \"c-pragma.h\"\n-#include \"c-lex.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\""}, {"sha": "85893de63ff85e0981ff5c39abbd98eb90e1126a", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -40,9 +40,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"recog.h\"\n #include \"toplev.h\"\n-#include \"cpplib.h\"\n-#include \"c-pragma.h\"\n-#include \"c-lex.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\""}, {"sha": "7c243643cb0159fac4d18406295230d99b6314c8", "filename": "gcc/config/i960/t-960bare", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fi960%2Ft-960bare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fi960%2Ft-960bare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Ft-960bare?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -19,7 +19,7 @@ xp-bit.c: $(srcdir)/config/fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> xp-bit.c\n \n i960-c.o: $(srcdir)/config/i960/i960-c.c $(CONFIG_H) $(SYSTEM_H) cpplib.h \\\n-    $(TREE_H) c-pragma.h c-lex.h toplev.h $(GGC_H) $(TM_P_H)\n+    $(TREE_H) c-pragma.h toplev.h $(GGC_H) $(TM_P_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n MULTILIB_OPTIONS=mnumerics/msoft-float mlong-double-64"}, {"sha": "0c5f40fdbf5bdb9ce6b1f242d2117c489f1f89a8", "filename": "gcc/config/i960/t-vxworks960", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fi960%2Ft-vxworks960", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fi960%2Ft-vxworks960", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Ft-vxworks960?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -22,7 +22,7 @@ xp-bit.c: $(srcdir)/config/fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> xp-bit.c\n \n i960-c.o: $(srcdir)/config/i960/i960-c.c $(CONFIG_H) $(SYSTEM_H) cpplib.h \\\n-    $(TREE_H) c-pragma.h c-lex.h toplev.h $(GGC_H) $(TM_P_H)\n+    $(TREE_H) c-pragma.h toplev.h $(GGC_H) $(TM_P_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n MULTILIB_OPTIONS=mnumerics/msoft-float mlong-double-64"}, {"sha": "15cd5a6c33808249a567ec02defdab9283f4414d", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -25,7 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"cpplib.h\"\n #include \"tree.h\"\n-#include \"c-lex.h\"\n+#include \"c-pragma.h\"\n #include \"errors.h\"\n #include \"tm_p.h\"\n "}, {"sha": "5839efa0cd2638b08b993a757e854df4aabaf8dc", "filename": "gcc/config/rs6000/t-darwin", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-darwin?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -20,8 +20,7 @@ darwin.o: $(srcdir)/config/darwin.c $(CONFIG_H) $(SYSTEM_H) $(RTL_BASE_H) \\\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n darwin-c.o: $(srcdir)/config/darwin-c.c $(CONFIG_H) $(SYSTEM_H) \\\n-\t    $(TREE_H) $(C_TREE_H) c-lex.h c-pragma.h toplev.h cpplib.h \\\n-\t    $(TM_P_H)\n+\t    $(TREE_H) $(C_TREE_H) c-pragma.h toplev.h cpplib.h $(TM_P_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n \n # Build the libraries for both hard and soft floating point"}, {"sha": "a768fb5b0eaaa4e420d01c61a8a244b38592a63a", "filename": "gcc/config/rs6000/t-rs6000-c-rule", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Frs6000%2Ft-rs6000-c-rule", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Frs6000%2Ft-rs6000-c-rule", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000-c-rule?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -1,4 +1,4 @@\n rs6000-c.o: $(srcdir)/config/rs6000/rs6000-c.c \\\n     $(srcdir)/config/rs6000/rs6000-protos.h \\\n-    $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(CPPLIB_H) $(TM_P_H) c-lex.h errors.h\n+    $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(CPPLIB_H) $(TM_P_H) c-pragma.h errors.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)"}, {"sha": "8f43930fc5a966d52763cda03f298dbc102563f2", "filename": "gcc/config/v850/v850-c.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fv850%2Fv850-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fv850%2Fv850-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-c.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -24,7 +24,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"cpplib.h\"\n #include \"tree.h\"\n #include \"c-pragma.h\"\n-#include \"c-lex.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\""}, {"sha": "c5e3d9803585f41149cd6e11e069685eccda0331", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -36,8 +36,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"expr.h\"\n #include \"function.h\"\n #include \"toplev.h\"\n-#include \"cpplib.h\"\n-#include \"c-lex.h\"\n #include \"ggc.h\"\n #include \"integrate.h\"\n #include \"tm_p.h\""}, {"sha": "0d56ed8f1a94736fa2452be4edb6749f8e03fe6d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -1,3 +1,8 @@\n+2002-05-25  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* lex.c: Don't include c-lex.h.\n+\t* parse.y, spew.c: Don't include c-lex.h; include c-pragma.h.\n+\n 2002-05-23  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* spew.c (yyungetc, snarf_block): Remove indent_level handling."}, {"sha": "7be5acbd3728a5474f2c17074eab393291f1a254", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -29,7 +29,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"cp-tree.h\"\n #include \"cpplib.h\"\n-#include \"c-lex.h\"\n #include \"lex.h\"\n #include \"parse.h\"\n #include \"flags.h\""}, {"sha": "b6abd0bfe7ae74b27291335aca637f356821bcf1", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -37,7 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"cp-tree.h\"\n #include \"lex.h\"\n-#include \"c-lex.h\"\t\t/* For YYDEBUG definition.  */\n+#include \"c-pragma.h\"\t\t/* For YYDEBUG definition.  */\n #include \"output.h\"\n #include \"except.h\"\n #include \"toplev.h\""}, {"sha": "c1aa95438996057a14bba41b26f38e2eb8ce5240", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -29,7 +29,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"cp-tree.h\"\n #include \"cpplib.h\"\n-#include \"c-lex.h\"\n+#include \"c-pragma.h\"\n #include \"lex.h\"\n #include \"parse.h\"\n #include \"flags.h\""}, {"sha": "a8eb303e390a530e10e52a36655956721ed13983", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -116,7 +116,6 @@ and\n along with header files\n @file{c-common.h},\n @file{c-dump.h},\n-@file{c-lex.h},\n and\n @file{c-pragma.h},\n are also used for all of the above languages."}, {"sha": "f82fd6099084f36084ab6204bbed90d2345171a1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -588,7 +588,7 @@ Here are run-time target specifications.\n This function-like macro expands to a block of code that defines\n built-in preprocessor macros and assertions for the target cpu, using\n the functions @code{builtin_define}, @code{builtin_define_std} and\n-@code{builtin_assert} declared in @file{c-lex.h}.  When the front end\n+@code{builtin_assert} defined in @file{c-common.c}.  When the front end\n calls this macro it provides a trailing semicolon, and since it has\n finished command line option processing your code can use those\n results freely."}, {"sha": "da26dba52b3f46be2a591ad5dcd33840873ceb8c", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -63,10 +63,10 @@ objc-lang.o : $(srcdir)/objc/objc-lang.c \\\n \t-c $(srcdir)/objc/objc-lang.c $(OUTPUT_OPTION)\n \n objc-parse.o : $(srcdir)/objc/objc-parse.c \\\n-   $(CONFIG_H) $(TREE_H) $(srcdir)/toplev.h $(srcdir)/ggc.h \\\n-   $(srcdir)/c-lex.h $(srcdir)/c-tree.h $(srcdir)/c-common.h \\\n+   $(CONFIG_H) $(TREE_H) $(C_COMMON_H) $(srcdir)/toplev.h $(srcdir)/ggc.h \\\n+   $(srcdir)/c-pragma.h $(srcdir)/c-tree.h \\\n    $(srcdir)/input.h $(srcdir)/flags.h $(srcdir)/output.h \\\n-   $(srcdir)/objc/objc-act.h $(SYSTEM_H) $(CPPLIB_H)\n+   $(srcdir)/objc/objc-act.h $(SYSTEM_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \\\n \t-c $(srcdir)/objc/objc-parse.c $(OUTPUT_OPTION)\n \n@@ -90,7 +90,7 @@ $(srcdir)/objc/objc-parse.y: $(srcdir)/c-parse.in\n \n objc-act.o : $(srcdir)/objc/objc-act.c \\\n    $(CONFIG_H) $(TREE_H) $(RTL_H) $(SYSTEM_H) $(EXPR_H) $(TARGET_H) \\\n-   $(srcdir)/c-tree.h $(srcdir)/c-common.h $(srcdir)/c-lex.h \\\n+   $(C_COMMON_H) $(srcdir)/c-tree.h \\\n    $(srcdir)/toplev.h $(srcdir)/flags.h $(srcdir)/objc/objc-act.h \\\n    $(srcdir)/input.h $(srcdir)/function.h $(srcdir)/output.h $(srcdir)/debug.h \\\n    $(srcdir)/langhooks.h $(LANGHOOKS_DEF_H)"}, {"sha": "132c28e8e07cc79dfc9c2e91ce5777b6b8b467e7", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -45,7 +45,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"expr.h\"\n #include \"c-tree.h\"\n-#include \"c-lex.h\"\n #include \"c-common.h\"\n #include \"flags.h\"\n #include \"objc-act.h\"\n@@ -55,7 +54,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n-#include \"cpplib.h\"\n #include \"debug.h\"\n #include \"target.h\"\n "}, {"sha": "2cb57ff32376b3990edca57a3ff2c6cee504b1e0", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=81a75f0f4374f92d7b08a8689d21ebe21ae8ac7a", "patch": "@@ -76,7 +76,6 @@\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"output.h\"\n-#include \"c-lex.h\"\n #include \"c-tree.h\"\n #include \"rtl.h\"\n #include \"tm_p.h\""}]}