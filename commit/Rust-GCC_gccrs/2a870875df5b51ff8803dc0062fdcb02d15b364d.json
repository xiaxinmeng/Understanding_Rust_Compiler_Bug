{"sha": "2a870875df5b51ff8803dc0062fdcb02d15b364d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE4NzA4NzVkZjViNTFmZjg4MDNkYzAwNjJmZGNiMDJkMTViMzY0ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-07-28T19:59:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-28T19:59:40Z"}, "message": "target-insns.def (can_extend, ptr_extend): New targetm instruction patterns.\n\ngcc/\n\t* target-insns.def (can_extend, ptr_extend): New targetm instruction\n\tpatterns.\n\t* optabs.c (can_extend_p): Use them instead of HAVE_*/gen_* interface.\n\t* simplify-rtx.c (simplify_unary_operation_1): Likewise.\n\t* emit-rtl.c (set_reg_attrs_from_value): Likewise.\n\t* rtlanal.c (nonzero_bits1): Likewise.\n\t(num_sign_bit_copies1): Likewise.\n\nFrom-SVN: r226324", "tree": {"sha": "89bfddfae877a517ba1a218ff9c9be07f1e81d11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89bfddfae877a517ba1a218ff9c9be07f1e81d11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a870875df5b51ff8803dc0062fdcb02d15b364d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a870875df5b51ff8803dc0062fdcb02d15b364d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a870875df5b51ff8803dc0062fdcb02d15b364d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a870875df5b51ff8803dc0062fdcb02d15b364d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b0b0013f6dbe34d2e1ddeacd7e7c26752575680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0b0013f6dbe34d2e1ddeacd7e7c26752575680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b0b0013f6dbe34d2e1ddeacd7e7c26752575680"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "f7740ba4cc0e962b4d25a850e673d9a5fa8988ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a870875df5b51ff8803dc0062fdcb02d15b364d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a870875df5b51ff8803dc0062fdcb02d15b364d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a870875df5b51ff8803dc0062fdcb02d15b364d", "patch": "@@ -1,3 +1,13 @@\n+2015-07-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target-insns.def (can_extend, ptr_extend): New targetm instruction\n+\tpatterns.\n+\t* optabs.c (can_extend_p): Use them instead of HAVE_*/gen_* interface.\n+\t* simplify-rtx.c (simplify_unary_operation_1): Likewise.\n+\t* emit-rtl.c (set_reg_attrs_from_value): Likewise.\n+\t* rtlanal.c (nonzero_bits1): Likewise.\n+\t(num_sign_bit_copies1): Likewise.\n+\n 2015-07-28  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target-insns.def (eh_return): New targetm instruction pattern."}, {"sha": "caa33b81f625b5e349f822dd2afeba8c14a4bf12", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a870875df5b51ff8803dc0062fdcb02d15b364d/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a870875df5b51ff8803dc0062fdcb02d15b364d/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=2a870875df5b51ff8803dc0062fdcb02d15b364d", "patch": "@@ -1159,9 +1159,10 @@ set_reg_attrs_from_value (rtx reg, rtx x)\n \t || GET_CODE (x) == TRUNCATE\n \t || (GET_CODE (x) == SUBREG && subreg_lowpart_p (x)))\n     {\n-#if defined(POINTERS_EXTEND_UNSIGNED) && !defined(HAVE_ptr_extend)\n-      if ((GET_CODE (x) == SIGN_EXTEND && POINTERS_EXTEND_UNSIGNED)\n-\t  || (GET_CODE (x) != SIGN_EXTEND && ! POINTERS_EXTEND_UNSIGNED))\n+#if defined(POINTERS_EXTEND_UNSIGNED)\n+      if (((GET_CODE (x) == SIGN_EXTEND && POINTERS_EXTEND_UNSIGNED)\n+\t   || (GET_CODE (x) != SIGN_EXTEND && ! POINTERS_EXTEND_UNSIGNED))\n+\t  && !targetm.have_ptr_extend ())\n \tcan_be_reg_pointer = false;\n #endif\n       x = XEXP (x, 0);"}, {"sha": "c527d8c049b1750282f0dec5c0733fabd7baf388", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a870875df5b51ff8803dc0062fdcb02d15b364d/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a870875df5b51ff8803dc0062fdcb02d15b364d/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=2a870875df5b51ff8803dc0062fdcb02d15b364d", "patch": "@@ -4851,10 +4851,8 @@ can_extend_p (machine_mode to_mode, machine_mode from_mode,\n \t      int unsignedp)\n {\n   convert_optab tab;\n-#ifdef HAVE_ptr_extend\n-  if (unsignedp < 0)\n-    return CODE_FOR_ptr_extend;\n-#endif\n+  if (unsignedp < 0 && targetm.have_ptr_extend ())\n+    return targetm.code_for_ptr_extend;\n \n   tab = unsignedp ? zext_optab : sext_optab;\n   return convert_optab_handler (tab, to_mode, from_mode);"}, {"sha": "a9246fa477bdd6c7e6e579aca299a8f34e2ea1de", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a870875df5b51ff8803dc0062fdcb02d15b364d/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a870875df5b51ff8803dc0062fdcb02d15b364d/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=2a870875df5b51ff8803dc0062fdcb02d15b364d", "patch": "@@ -4278,15 +4278,16 @@ nonzero_bits1 (const_rtx x, machine_mode mode, const_rtx known_x,\n   switch (code)\n     {\n     case REG:\n-#if defined(POINTERS_EXTEND_UNSIGNED) && !defined(HAVE_ptr_extend)\n+#if defined(POINTERS_EXTEND_UNSIGNED)\n       /* If pointers extend unsigned and this is a pointer in Pmode, say that\n \t all the bits above ptr_mode are known to be zero.  */\n       /* As we do not know which address space the pointer is referring to,\n \t we can do this only if the target does not support different pointer\n \t or address modes depending on the address space.  */\n       if (target_default_pointer_address_modes_p ()\n \t  && POINTERS_EXTEND_UNSIGNED && GET_MODE (x) == Pmode\n-\t  && REG_POINTER (x))\n+\t  && REG_POINTER (x)\n+\t  && !targetm.have_ptr_extend ())\n \tnonzero &= GET_MODE_MASK (ptr_mode);\n #endif\n \n@@ -4785,15 +4786,16 @@ num_sign_bit_copies1 (const_rtx x, machine_mode mode, const_rtx known_x,\n     {\n     case REG:\n \n-#if defined(POINTERS_EXTEND_UNSIGNED) && !defined(HAVE_ptr_extend)\n+#if defined(POINTERS_EXTEND_UNSIGNED)\n       /* If pointers extend signed and this is a pointer in Pmode, say that\n \t all the bits above ptr_mode are known to be sign bit copies.  */\n       /* As we do not know which address space the pointer is referring to,\n \t we can do this only if the target does not support different pointer\n \t or address modes depending on the address space.  */\n       if (target_default_pointer_address_modes_p ()\n \t  && ! POINTERS_EXTEND_UNSIGNED && GET_MODE (x) == Pmode\n-\t  && mode == Pmode && REG_POINTER (x))\n+\t  && mode == Pmode && REG_POINTER (x)\n+\t  && !targetm.have_ptr_extend ())\n \treturn GET_MODE_PRECISION (Pmode) - GET_MODE_PRECISION (ptr_mode) + 1;\n #endif\n "}, {"sha": "e2f34c4c0d2afd1eb1df306508c17022af60cadf", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a870875df5b51ff8803dc0062fdcb02d15b364d/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a870875df5b51ff8803dc0062fdcb02d15b364d/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=2a870875df5b51ff8803dc0062fdcb02d15b364d", "patch": "@@ -1431,7 +1431,7 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n \t    }\n \t}\n \n-#if defined(POINTERS_EXTEND_UNSIGNED) && !defined(HAVE_ptr_extend)\n+#if defined(POINTERS_EXTEND_UNSIGNED)\n       /* As we do not know which address space the pointer is referring to,\n \t we can do this only if the target does not support different pointer\n \t or address modes depending on the address space.  */\n@@ -1442,7 +1442,8 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n \t      || (GET_CODE (op) == SUBREG\n \t\t  && REG_P (SUBREG_REG (op))\n \t\t  && REG_POINTER (SUBREG_REG (op))\n-\t\t  && GET_MODE (SUBREG_REG (op)) == Pmode)))\n+\t\t  && GET_MODE (SUBREG_REG (op)) == Pmode))\n+\t  && !targetm.have_ptr_extend ())\n \treturn convert_memory_address (Pmode, op);\n #endif\n       break;\n@@ -1552,7 +1553,7 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n \t\t\t\t     GET_MODE (SUBREG_REG (op)));\n \t}\n \n-#if defined(POINTERS_EXTEND_UNSIGNED) && !defined(HAVE_ptr_extend)\n+#if defined(POINTERS_EXTEND_UNSIGNED)\n       /* As we do not know which address space the pointer is referring to,\n \t we can do this only if the target does not support different pointer\n \t or address modes depending on the address space.  */\n@@ -1563,7 +1564,8 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n \t      || (GET_CODE (op) == SUBREG\n \t\t  && REG_P (SUBREG_REG (op))\n \t\t  && REG_POINTER (SUBREG_REG (op))\n-\t\t  && GET_MODE (SUBREG_REG (op)) == Pmode)))\n+\t\t  && GET_MODE (SUBREG_REG (op)) == Pmode))\n+\t  && !targetm.have_ptr_extend ())\n \treturn convert_memory_address (Pmode, op);\n #endif\n       break;"}, {"sha": "3f4fe8e32d3b5e78c54a779d35fb6d502cd48c21", "filename": "gcc/target-insns.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a870875df5b51ff8803dc0062fdcb02d15b364d/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a870875df5b51ff8803dc0062fdcb02d15b364d/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=2a870875df5b51ff8803dc0062fdcb02d15b364d", "patch": "@@ -34,6 +34,7 @@ DEF_TARGET_INSN (allocate_stack, (rtx x0, rtx x1))\n DEF_TARGET_INSN (builtin_longjmp, (rtx x0))\n DEF_TARGET_INSN (builtin_setjmp_receiver, (rtx x0))\n DEF_TARGET_INSN (builtin_setjmp_setup, (rtx x0))\n+DEF_TARGET_INSN (can_extend, (rtx x0, rtx x1))\n DEF_TARGET_INSN (canonicalize_funcptr_for_compare, (rtx x0, rtx x1))\n DEF_TARGET_INSN (casesi, (rtx x0, rtx x1, rtx x2, rtx x3, rtx x4))\n DEF_TARGET_INSN (check_stack, (rtx x0))\n@@ -58,6 +59,7 @@ DEF_TARGET_INSN (prefetch, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (probe_stack, (rtx x0))\n DEF_TARGET_INSN (probe_stack_address, (rtx x0))\n DEF_TARGET_INSN (prologue, (void))\n+DEF_TARGET_INSN (ptr_extend, (rtx x0, rtx x1))\n DEF_TARGET_INSN (restore_stack_block, (rtx x0, rtx x1))\n DEF_TARGET_INSN (restore_stack_function, (rtx x0, rtx x1))\n DEF_TARGET_INSN (restore_stack_nonlocal, (rtx x0, rtx x1))"}]}