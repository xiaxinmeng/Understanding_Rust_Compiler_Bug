{"sha": "c875d46fefac13675853f58ec7dea8f402779af0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg3NWQ0NmZlZmFjMTM2NzU4NTNmNThlYzdkZWE4ZjQwMjc3OWFmMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-01-22T09:11:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-01-22T09:11:35Z"}, "message": "re PR target/88905 (ICE: in decompose, at rtl.h:2253 with -mabm and __builtin_popcountll)\n\n\tPR target/88905\n\t* optabs.c (add_equal_note): Add op0_mode argument, use it instead of\n\tGET_MODE (op0).\n\t(expand_binop_directly, expand_doubleword_clz,\n\texpand_doubleword_popcount, expand_ctz, expand_ffs,\n\texpand_unop_direct, maybe_emit_unop_insn): Adjust callers.\n\n\t* gcc.dg/pr88905.c: New test.\n\nFrom-SVN: r268139", "tree": {"sha": "8aac90b4f47bb36cf9a5d3310139b38f34e1a05e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aac90b4f47bb36cf9a5d3310139b38f34e1a05e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c875d46fefac13675853f58ec7dea8f402779af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c875d46fefac13675853f58ec7dea8f402779af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c875d46fefac13675853f58ec7dea8f402779af0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c875d46fefac13675853f58ec7dea8f402779af0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c4814f99ed1340f009a804a19e81f787f7b31ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4814f99ed1340f009a804a19e81f787f7b31ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4814f99ed1340f009a804a19e81f787f7b31ea6"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "0b0402aa7ef2c9afadd11c901da7b94cc405b5ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875d46fefac13675853f58ec7dea8f402779af0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875d46fefac13675853f58ec7dea8f402779af0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c875d46fefac13675853f58ec7dea8f402779af0", "patch": "@@ -1,5 +1,12 @@\n 2019-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/88905\n+\t* optabs.c (add_equal_note): Add op0_mode argument, use it instead of\n+\tGET_MODE (op0).\n+\t(expand_binop_directly, expand_doubleword_clz,\n+\texpand_doubleword_popcount, expand_ctz, expand_ffs,\n+\texpand_unop_direct, maybe_emit_unop_insn): Adjust callers.\n+\n \tPR rtl-optimization/49429\n \tPR target/49454\n \tPR rtl-optimization/86334"}, {"sha": "ecda620c16118313f2889fea58b4b3785a94e860", "filename": "gcc/optabs.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875d46fefac13675853f58ec7dea8f402779af0/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875d46fefac13675853f58ec7dea8f402779af0/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c875d46fefac13675853f58ec7dea8f402779af0", "patch": "@@ -55,7 +55,7 @@ void debug_optab_libfuncs (void);\n \f\n /* Add a REG_EQUAL note to the last insn in INSNS.  TARGET is being set to\n    the result of operation CODE applied to OP0 (and OP1 if it is a binary\n-   operation).\n+   operation).  OP0_MODE is OP0's mode.\n \n    If the last insn does not set TARGET, don't do anything, but return 1.\n \n@@ -64,7 +64,8 @@ void debug_optab_libfuncs (void);\n    try again, ensuring that TARGET is not one of the operands.  */\n \n static int\n-add_equal_note (rtx_insn *insns, rtx target, enum rtx_code code, rtx op0, rtx op1)\n+add_equal_note (rtx_insn *insns, rtx target, enum rtx_code code, rtx op0,\n+\t\trtx op1, machine_mode op0_mode)\n {\n   rtx_insn *last_insn;\n   rtx set;\n@@ -136,16 +137,16 @@ add_equal_note (rtx_insn *insns, rtx target, enum rtx_code code, rtx op0, rtx op\n       case POPCOUNT:\n       case PARITY:\n       case BSWAP:\n-\tif (GET_MODE (op0) != VOIDmode && GET_MODE (target) != GET_MODE (op0))\n+\tif (op0_mode != VOIDmode && GET_MODE (target) != op0_mode)\n \t  {\n-\t    note = gen_rtx_fmt_e (code, GET_MODE (op0), copy_rtx (op0));\n-\t    if (GET_MODE_UNIT_SIZE (GET_MODE (op0))\n+\t    note = gen_rtx_fmt_e (code, op0_mode, copy_rtx (op0));\n+\t    if (GET_MODE_UNIT_SIZE (op0_mode)\n \t\t> GET_MODE_UNIT_SIZE (GET_MODE (target)))\n \t      note = simplify_gen_unary (TRUNCATE, GET_MODE (target),\n-\t\t\t\t\t note, GET_MODE (op0));\n+\t\t\t\t\t note, op0_mode);\n \t    else\n \t      note = simplify_gen_unary (ZERO_EXTEND, GET_MODE (target),\n-\t\t\t\t\t note, GET_MODE (op0));\n+\t\t\t\t\t note, op0_mode);\n \t    break;\n \t  }\n \t/* FALLTHRU */\n@@ -1127,7 +1128,7 @@ expand_binop_directly (enum insn_code icode, machine_mode mode, optab binoptab,\n       if (INSN_P (pat) && NEXT_INSN (pat) != NULL_RTX\n \t  && ! add_equal_note (pat, ops[0].value,\n \t\t\t       optab_to_code (binoptab),\n-\t\t\t       ops[1].value, ops[2].value))\n+\t\t\t       ops[1].value, ops[2].value, mode0))\n \t{\n \t  delete_insns_since (last);\n \t  return expand_binop (mode, binoptab, op0, op1, NULL_RTX,\n@@ -2298,7 +2299,7 @@ expand_doubleword_clz (scalar_int_mode mode, rtx op0, rtx target)\n   seq = get_insns ();\n   end_sequence ();\n \n-  add_equal_note (seq, target, CLZ, xop0, 0);\n+  add_equal_note (seq, target, CLZ, xop0, NULL_RTX, mode);\n   emit_insn (seq);\n   return target;\n \n@@ -2340,7 +2341,7 @@ expand_doubleword_popcount (scalar_int_mode mode, rtx op0, rtx target)\n   seq = get_insns ();\n   end_sequence ();\n \n-  add_equal_note (seq, t, POPCOUNT, op0, 0);\n+  add_equal_note (seq, t, POPCOUNT, op0, NULL_RTX, mode);\n   emit_insn (seq);\n   return t;\n }\n@@ -2511,7 +2512,7 @@ expand_ctz (scalar_int_mode mode, rtx op0, rtx target)\n   seq = get_insns ();\n   end_sequence ();\n \n-  add_equal_note (seq, temp, CTZ, op0, 0);\n+  add_equal_note (seq, temp, CTZ, op0, NULL_RTX, mode);\n   emit_insn (seq);\n   return temp;\n }\n@@ -2589,7 +2590,7 @@ expand_ffs (scalar_int_mode mode, rtx op0, rtx target)\n   seq = get_insns ();\n   end_sequence ();\n \n-  add_equal_note (seq, temp, FFS, op0, 0);\n+  add_equal_note (seq, temp, FFS, op0, NULL_RTX, mode);\n   emit_insn (seq);\n   return temp;\n \n@@ -2736,7 +2737,7 @@ expand_unop_direct (machine_mode mode, optab unoptab, rtx op0, rtx target,\n \t  if (INSN_P (pat) && NEXT_INSN (pat) != NULL_RTX\n \t      && ! add_equal_note (pat, ops[0].value,\n \t\t\t\t   optab_to_code (unoptab),\n-\t\t\t\t   ops[1].value, NULL_RTX))\n+\t\t\t\t   ops[1].value, NULL_RTX, mode))\n \t    {\n \t      delete_insns_since (last);\n \t      return expand_unop (mode, unoptab, op0, NULL_RTX, unsignedp);\n@@ -3588,7 +3589,8 @@ maybe_emit_unop_insn (enum insn_code icode, rtx target, rtx op0,\n \n   if (INSN_P (pat) && NEXT_INSN (pat) != NULL_RTX\n       && code != UNKNOWN)\n-    add_equal_note (pat, ops[0].value, code, ops[1].value, NULL_RTX);\n+    add_equal_note (pat, ops[0].value, code, ops[1].value, NULL_RTX,\n+\t\t    GET_MODE (op0));\n \n   emit_insn (pat);\n "}, {"sha": "807c7188ff2016acaf86d6718befcdc457449490", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875d46fefac13675853f58ec7dea8f402779af0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875d46fefac13675853f58ec7dea8f402779af0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c875d46fefac13675853f58ec7dea8f402779af0", "patch": "@@ -1,5 +1,8 @@\n 2019-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/88905\n+\t* gcc.dg/pr88905.c: New test.\n+\n \tPR rtl-optimization/49429\n \tPR target/49454\n \tPR rtl-optimization/86334"}, {"sha": "89792f4abdb2ed1a27ececc612de11d378890d8b", "filename": "gcc/testsuite/gcc.dg/pr88905.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c875d46fefac13675853f58ec7dea8f402779af0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88905.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c875d46fefac13675853f58ec7dea8f402779af0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88905.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr88905.c?ref=c875d46fefac13675853f58ec7dea8f402779af0", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/88905 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Og -fno-tree-ccp\" } */\n+/* { dg-additional-options \"-mabm\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+int a, b, c;\n+extern void baz (int);\n+\n+static inline int\n+bar (unsigned u)\n+{\n+  int i = __builtin_popcountll (-(unsigned long long) u);\n+  baz (i & c);\n+  return a + b + c;\n+}\n+\n+void\n+foo (void)\n+{\n+  bar (2376498292ULL);\n+}"}]}