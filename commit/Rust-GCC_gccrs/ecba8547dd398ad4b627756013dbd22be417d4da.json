{"sha": "ecba8547dd398ad4b627756013dbd22be417d4da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNiYTg1NDdkZDM5OGFkNGI2Mjc3NTYwMTNkYmQyMmJlNDE3ZDRkYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-11T00:19:40Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-11T00:19:40Z"}, "message": "libstdc++: Implement std::emit_on_flush etc.\n\nThis adds the manipulators for use with basic_osyncstream. In order to\ndetect when an arbitrary basic_ostream<C,T> is the base class of a\nbasic_syncbuf<C,T,A> object, introduce a new intermediate base class\nthat stores the data members. The new base class stores a pointer and\ntwo bools, which wastes (sizeof(void*) - 2) bytes of padding. It would\nbe possible to use the two least significant bits of the pointer for the\ntwo bools, at least for targets where alignof(basic_streambuf) > 2, but\nthat's left as a possible change for a future date.\n\nAlso define basic_syncbuf::overflow to override the virtual function in\nthe base class, so that single characters can be inserted into the\nstream buffer. Previously the default basic_streambuf::overflow\nimplementation was used, which drops the character on the floor.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ostream (__syncbuf_base): New class template.\n\t(emit_on_flush, noemit_on_flush, flush_emit): New manipulators.\n\t* include/std/syncstream (basic_syncbuf): Derive from\n\t__syncbuf_base instead of basic_streambuf.\n\t(basic_syncbuf::operator=): Remove self-assignment check.\n\t(basic_syncbuf::swap): Remove self-swap check.\n\t(basic_syncbuf::emit): Do not skip pubsync() call if sequence\n\tis empty.\n\t(basic_syncbuf::sync): Remove no-op pubsync on stringbuf.\n\t(basic_syncbuf::overflow): Define override.\n\t* testsuite/27_io/basic_syncstream/basic_ops/1.cc: Test\n\tbasic_osyncstream::put(char_type).\n\t* testsuite/27_io/basic_ostream/emit/1.cc: New test.", "tree": {"sha": "65a7f03392ebd8f552b663b03889f30f6b491a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65a7f03392ebd8f552b663b03889f30f6b491a60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecba8547dd398ad4b627756013dbd22be417d4da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecba8547dd398ad4b627756013dbd22be417d4da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecba8547dd398ad4b627756013dbd22be417d4da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecba8547dd398ad4b627756013dbd22be417d4da/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6226419f566bb9f68d9f2dc7d3aca501efaa98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6226419f566bb9f68d9f2dc7d3aca501efaa98"}], "stats": {"total": 291, "additions": 210, "deletions": 81}, "files": [{"sha": "c203e31d7c9da948f331cf2834252b3f87efb3ee", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecba8547dd398ad4b627756013dbd22be417d4da/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecba8547dd398ad4b627756013dbd22be417d4da/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=ecba8547dd398ad4b627756013dbd22be417d4da", "patch": "@@ -776,6 +776,73 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __ret_os << __x;\n       return __ret_os;\n     }\n+\n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+  template<typename _CharT, typename _Traits>\n+    class __syncbuf_base : public basic_streambuf<_CharT, _Traits>\n+    {\n+    public:\n+      static bool*\n+      _S_get(basic_streambuf<_CharT, _Traits>* __buf) noexcept\n+      {\n+\tif (auto __p = dynamic_cast<__syncbuf_base*>(__buf))\n+\t  return &__p->_M_emit_on_sync;\n+\treturn nullptr;\n+      }\n+\n+    protected:\n+      __syncbuf_base(basic_streambuf<_CharT, _Traits>* __w = nullptr)\n+      : _M_wrapped(__w)\n+      { }\n+\n+      basic_streambuf<_CharT, _Traits>* _M_wrapped = nullptr;\n+      bool _M_emit_on_sync = false;\n+      bool _M_needs_sync = false;\n+    };\n+\n+  template<typename _CharT, typename _Traits>\n+    inline basic_ostream<_CharT, _Traits>&\n+    emit_on_flush(basic_ostream<_CharT, _Traits>& __os)\n+    {\n+      if (bool* __flag = __syncbuf_base<_CharT, _Traits>::_S_get(__os.rdbuf()))\n+\t*__flag = true;\n+      return __os;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline basic_ostream<_CharT, _Traits>&\n+    noemit_on_flush(basic_ostream<_CharT, _Traits>& __os)\n+    {\n+      if (bool* __flag = __syncbuf_base<_CharT, _Traits>::_S_get(__os.rdbuf()))\n+\t*__flag = false;\n+      return __os;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline basic_ostream<_CharT, _Traits>&\n+    flush_emit(basic_ostream<_CharT, _Traits>& __os)\n+    {\n+      struct _Restore\n+      {\n+\t~_Restore() { *_M_flag = _M_prev; }\n+\n+\tbool _M_prev = false;\n+\tbool* _M_flag = &_M_prev;\n+      } __restore;\n+\n+      if (bool* __flag = __syncbuf_base<_CharT, _Traits>::_S_get(__os.rdbuf()))\n+\t{\n+\t  __restore._M_prev = *__flag;\n+\t  __restore._M_flag = __flag;\n+\t  *__flag = true;\n+\t}\n+\n+      __os.flush();\n+      return __os;\n+    }\n+\n+#endif // C++20\n+\n #endif // C++11\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "07aab65223ece97bd1b9c4b9745fd1497695eb2e", "filename": "libstdc++-v3/include/std/syncstream", "status": "modified", "additions": 69, "deletions": 80, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecba8547dd398ad4b627756013dbd22be417d4da/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsyncstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecba8547dd398ad4b627756013dbd22be417d4da/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsyncstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsyncstream?ref=ecba8547dd398ad4b627756013dbd22be417d4da", "patch": "@@ -52,7 +52,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits = char_traits<_CharT>,\n \t    typename _Alloc = allocator<_CharT>>\n-    class basic_syncbuf : public basic_streambuf<_CharT, _Traits>\n+    class basic_syncbuf : public __syncbuf_base<_CharT, _Traits>\n     {\n     public:\n       using char_type = _CharT;\n@@ -69,22 +69,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       explicit\n       basic_syncbuf(streambuf_type* __obuf)\n-\t: basic_syncbuf(__obuf, allocator_type{})\n+      : basic_syncbuf(__obuf, allocator_type{})\n       { }\n \n       basic_syncbuf(streambuf_type* __obuf, const allocator_type& __alloc)\n-\t: _M_wrapped(__obuf)\n-\t, _M_impl(__alloc)\n-\t, _M_mtx(__obuf)\n+      : __syncbuf_base<_CharT, _Traits>(__obuf)\n+      , _M_impl(__alloc)\n+      , _M_mtx(__obuf)\n       { }\n \n       basic_syncbuf(basic_syncbuf&& __other)\n-\t: _M_wrapped(__other._M_wrapped)\n-\t, _M_impl(std::move(__other._M_impl))\n-\t, _M_mtx(std::move(__other._M_mtx))\n-\t, _M_emit_on_sync(__other._M_emit_on_sync)\n-\t, _M_needs_sync(__other._M_needs_sync)\n+      : __syncbuf_base<_CharT, _Traits>(__other._M_wrapped)\n+      , _M_impl(std::move(__other._M_impl))\n+      , _M_mtx(std::move(__other._M_mtx))\n       {\n+\tthis->_M_emit_on_sync = __other._M_emit_on_sync;\n+\tthis->_M_needs_sync = __other._M_needs_sync;\n \t__other._M_wrapped = nullptr;\n       }\n \n@@ -98,94 +98,101 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  { }\n       }\n \n-      basic_syncbuf& operator=(basic_syncbuf&& __other)\n+      basic_syncbuf&\n+      operator=(basic_syncbuf&& __other)\n       {\n-\tif (std::__addressof(__other) != this)\n-\t  {\n-\t    emit();\n+\temit();\n+\n+\t_M_impl = std::move(__other._M_impl);\n+\tthis->_M_emit_on_sync = __other._M_emit_on_sync;\n+\tthis->_M_needs_sync = __other._M_needs_sync;\n+\tthis->_M_wrapped = __other._M_wrapped;\n+\t__other._M_wrapped = nullptr;\n+\t_M_mtx = std::move(__other._M_mtx);\n \n-\t    _M_impl = std::move(__other._M_impl);\n-\t    _M_wrapped = __other._M_wrapped; __other._M_wrapped = nullptr;\n-\t    _M_mtx = std::move(__other._M_mtx);\n-\t    _M_emit_on_sync = __other._M_emit_on_sync;\n-\t    _M_needs_sync = __other._M_needs_sync;\n-\t  }\n \treturn *this;\n       }\n \n       void\n-      swap(basic_syncbuf& __other)\n+      swap(basic_syncbuf& __other) noexcept\n       {\n-\tif (std::__addressof(__other) != this)\n-\t  {\n-\t    std::swap(_M_impl, __other._M_impl);\n-\t    std::swap(_M_wrapped, __other._M_wrapped);\n-\t    std::swap(_M_mtx, __other._M_mtx);\n-\t    std::swap(_M_emit_on_sync, __other._M_emit_on_sync);\n-\t    std::swap(_M_needs_sync, __other._M_needs_sync);\n-\t  }\n+\tusing _ATr = allocator_traits<_Alloc>;\n+\tif constexpr (!_ATr::propagate_on_container_swap::value)\n+\t  __glibcxx_assert(get_allocator() == __other.get_allocator());\n+\n+\tstd::swap(_M_impl, __other._M_impl);\n+\tstd::swap(this->_M_emit_on_sync, __other._M_emit_on_sync);\n+\tstd::swap(this->_M_needs_sync, __other._M_needs_sync);\n+\tstd::swap(this->_M_wrapped, __other._M_wrapped);\n+\tstd::swap(_M_mtx, __other._M_mtx);\n       }\n \n       bool\n       emit()\n       {\n-\tif (!_M_wrapped)\n+\tif (!this->_M_wrapped)\n \t  return false;\n \n-\tauto __s = _M_impl.view();\n-\tif (__s.empty())\n-\t  return true;\n+\tauto __s = std::move(_M_impl).str();\n \n \tconst lock_guard<__mutex> __l(_M_mtx);\n-\tif (_M_wrapped->sputn(__s.data(), __s.size()) != __s.size())\n-\t  return false;\n+\tif (auto __size = __s.size())\n+\t  {\n+\t    auto __n = this->_M_wrapped->sputn(__s.data(), __size);\n+\t    if (__n != __size)\n+\t      {\n+\t\t__s.erase(0, __n);\n+\t\t_M_impl.str(std::move(__s));\n+\t\treturn false;\n+\t      }\n+\t  }\n \n-\tif (_M_needs_sync)\n+\tif (this->_M_needs_sync)\n \t  {\n-\t    _M_needs_sync = false;\n-\t    if (_M_wrapped->pubsync() != 0)\n+\t    this->_M_needs_sync = false;\n+\t    if (this->_M_wrapped->pubsync() != 0)\n \t      return false;\n \t  }\n-\n-\t_M_impl.str(\"\");\n \treturn true;\n       }\n \n       streambuf_type*\n       get_wrapped() const noexcept\n-      { return _M_wrapped; }\n+      { return this->_M_wrapped; }\n \n-      allocator_type get_allocator() const noexcept\n+      allocator_type\n+      get_allocator() const noexcept\n       { return _M_impl.get_allocator(); }\n \n       void\n       set_emit_on_sync(bool __b) noexcept\n-      { _M_emit_on_sync = __b; }\n+      { this->_M_emit_on_sync = __b; }\n \n     protected:\n       int\n       sync() override\n       {\n-\tauto __res = _M_impl.pubsync();\n-\tif (__res == 0)\n-\t  {\n-\t    _M_needs_sync = true;\n-\t    if (_M_emit_on_sync)\n-\t      return emit() ? 0 : -1;\n-\t  }\n-\treturn __res;\n+\tthis->_M_needs_sync = true;\n+\tif (this->_M_emit_on_sync && !emit())\n+\t  return -1;\n+\treturn 0;\n+      }\n+\n+      int_type\n+      overflow(int_type __c) override\n+      {\n+\tint_type __eof = traits_type::eof();\n+\tif (__builtin_expect(!traits_type::eq_int_type(__c, __eof), true))\n+\t  return _M_impl.sputc(__c);\n+\treturn __eof;\n       }\n \n       streamsize\n       xsputn(const char_type* __s, streamsize __n) override\n       { return _M_impl.sputn(__s, __n); }\n \n     private:\n-      streambuf_type* _M_wrapped;\n-\n-      using __impl_type = basic_stringbuf<char_type, traits_type,\n-\t\t\t\t\t  allocator_type>;\n-      __impl_type _M_impl;\n+      basic_stringbuf<char_type, traits_type, allocator_type> _M_impl;\n \n       struct __mutex\n       {\n@@ -203,15 +210,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \tlock()\n \t{\n-\t  if (_M_mtx)\n-\t    _M_mtx->lock();\n+\t  _M_mtx->lock();\n \t}\n \n \tvoid\n \tunlock()\n \t{\n-\t  if (_M_mtx)\n-\t    _M_mtx->unlock();\n+\t  _M_mtx->unlock();\n \t}\n \n \t// FIXME: This should be put in the .so\n@@ -225,31 +230,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return __m[__key];\n \t}\n #else\n-\t__mutex(void*)\n-\t{ }\n-\n-\tvoid\n-\tswap(__mutex&&) noexcept\n-\t{ }\n-\n-\tvoid\n-\tlock()\n-\t{ }\n-\n-\tvoid\n-\tunlock()\n-\t{ }\n+\t__mutex(void*) { }\n+\tvoid swap(__mutex&&) noexcept { }\n+\tvoid lock() { }\n+\tvoid unlock() { }\n #endif\n-\t__mutex(const __mutex&) = delete;\n-\t__mutex& operator=(const __mutex&) = delete;\n-\n \t__mutex(__mutex&&) = default;\n \t__mutex& operator=(__mutex&&) = default;\n       };\n       __mutex _M_mtx;\n-\n-      bool _M_emit_on_sync = false;\n-      bool _M_needs_sync = false;\n     };\n \n   template <typename _CharT, typename _Traits = char_traits<_CharT>,"}, {"sha": "c50648adf632be12a8326202bb8ae16b03aac4c6", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/emit/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecba8547dd398ad4b627756013dbd22be417d4da/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Femit%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecba8547dd398ad4b627756013dbd22be417d4da/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Femit%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Femit%2F1.cc?ref=ecba8547dd398ad4b627756013dbd22be417d4da", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <syncstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::stringbuf sb;\n+  std::osyncstream s(&sb);\n+  s << \"abc\" << std::emit_on_flush << \"def\" << std::flush << \"ghi\"\n+    << std::emit_on_flush << std::noemit_on_flush << std::endl;\n+  VERIFY( sb.view() == \"abcdef\" );\n+  s << \"jkl\" << std::flush_emit << \"mno\" << std::flush;\n+  VERIFY( sb.view() == \"abcdefghi\\njkl\" );\n+  s.emit();\n+  VERIFY( sb.view() == \"abcdefghi\\njklmno\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "3ca97aa0c5bc8d6d62372bdf83b84c2bd390e38d", "filename": "libstdc++-v3/testsuite/27_io/basic_syncstream/basic_ops/1.cc", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecba8547dd398ad4b627756013dbd22be417d4da/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2Fbasic_ops%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecba8547dd398ad4b627756013dbd22be417d4da/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2Fbasic_ops%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_syncstream%2Fbasic_ops%2F1.cc?ref=ecba8547dd398ad4b627756013dbd22be417d4da", "patch": "@@ -123,12 +123,41 @@ test04() // emitting\n     s.emit();\n     VERIFY( b.str() == txt );\n   }\n+\n+  {\n+    std::stringbuf b;\n+    std::osyncstream s(&b);\n+\n+    s.put('a');\n+    s.put('b');\n+    s.put('c');\n+\n+    s.emit();\n+    VERIFY( b.str() == \"abc\" );\n+  }\n+\n+  {\n+    std::stringbuf b;\n+    std::osyncstream s(&b);\n+\n+    s << \"abc\";\n+    s.put(' ');\n+    s << \"def\";\n+    s.emit();\n+    VERIFY( b.str() == \"abc def\" );\n+\n+    s << \"ghi\";\n+    s.put(' ');\n+    s << \"jkl\";\n+    s.emit();\n+    VERIFY( b.str() == \"abc defghi jkl\" );\n+  }\n }\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n-  return 0;\n }"}]}