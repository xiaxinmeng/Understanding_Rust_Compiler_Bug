{"sha": "7a145e929d4f1df9043baf5a26e991629ce077dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExNDVlOTI5ZDRmMWRmOTA0M2JhZjVhMjZlOTkxNjI5Y2UwNzdkYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-03T02:06:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-03T02:06:26Z"}, "message": "local-alloc.c (contains_replace_regs): LO_SUM may contain replace regs.\n\n        * local-alloc.c (contains_replace_regs): LO_SUM may contain\n        replace regs.\n\n\t* gcc.c-torture/execute/20020402-2.c: New.\n\nFrom-SVN: r51773", "tree": {"sha": "2a9cb539ca5848bf255cc5ba278466b283058f23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a9cb539ca5848bf255cc5ba278466b283058f23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a145e929d4f1df9043baf5a26e991629ce077dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a145e929d4f1df9043baf5a26e991629ce077dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a145e929d4f1df9043baf5a26e991629ce077dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a145e929d4f1df9043baf5a26e991629ce077dc/comments", "author": null, "committer": null, "parents": [{"sha": "d32c91705de3d841922e57f920c7cbe86c71b122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32c91705de3d841922e57f920c7cbe86c71b122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d32c91705de3d841922e57f920c7cbe86c71b122"}], "stats": {"total": 237, "additions": 236, "deletions": 1}, "files": [{"sha": "f26b3c8924847d064688a657e765bd5f5aafe1c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a145e929d4f1df9043baf5a26e991629ce077dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a145e929d4f1df9043baf5a26e991629ce077dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a145e929d4f1df9043baf5a26e991629ce077dc", "patch": "@@ -1,3 +1,9 @@\n+2002-04-02  Richard Henderson  <rth@redhat.com>\n+\n+\tPR opt/3967\n+\t* local-alloc.c (contains_replace_regs): LO_SUM may contain\n+\treplace regs.\n+\n 2002-04-02  Richard Henderson  <rth@redhat.com>\n \n \t* doc/standards.texi: Document required freestanding libc entry points."}, {"sha": "cd216f96d0f6c28f2a97bbc571d828c2a7c105d5", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a145e929d4f1df9043baf5a26e991629ce077dc/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a145e929d4f1df9043baf5a26e991629ce077dc/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=7a145e929d4f1df9043baf5a26e991629ce077dc", "patch": "@@ -664,7 +664,6 @@ contains_replace_regs (x)\n     case PC:\n     case CC0:\n     case HIGH:\n-    case LO_SUM:\n       return 0;\n \n     case REG:"}, {"sha": "e14233f3e3ae8fef8596532836d29087a2cd2f27", "filename": "gcc/testsuite/gcc.c-torture/execute/20020402-2.c", "status": "added", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a145e929d4f1df9043baf5a26e991629ce077dc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020402-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a145e929d4f1df9043baf5a26e991629ce077dc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020402-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020402-2.c?ref=7a145e929d4f1df9043baf5a26e991629ce077dc", "patch": "@@ -0,0 +1,230 @@\n+/* PR 3967\n+\n+   local-alloc screwed up consideration of high+lo_sum and created\n+   reg_equivs that it shouldn't have, resulting in lo_sum with\n+   uninitialized data, resulting in segv.  The test has to remain\n+   relatively large, since register spilling is required to twig\n+   the bug.  */\n+\n+unsigned long *Local1;\n+unsigned long *Local2;\n+unsigned long *Local3;\n+unsigned long *RDbf1;\n+unsigned long *RDbf2;\n+unsigned long *RDbf3;\n+unsigned long *IntVc1;\n+unsigned long *IntVc2;\n+unsigned long *IntCode3;\n+unsigned long *IntCode4;\n+unsigned long *IntCode5;\n+unsigned long *IntCode6;\n+unsigned long *Lom1;\n+unsigned long *Lom2;\n+unsigned long *Lom3;\n+unsigned long *Lom4;\n+unsigned long *Lom5;\n+unsigned long *Lom6;\n+unsigned long *Lom7;\n+unsigned long *Lom8;\n+unsigned long *Lom9;\n+unsigned long *Lom10;\n+unsigned long *RDbf11;\n+unsigned long *RDbf12;\n+\n+typedef struct\n+  {\n+    long a1;\n+    unsigned long n1;\n+    unsigned long local1;\n+    unsigned long local2;\n+    unsigned long local3;\n+    unsigned long rdbf1;\n+    unsigned long rdbf2;\n+    unsigned long milli;\n+    unsigned long frames1;\n+    unsigned long frames2;\n+    unsigned long nonShared;\n+    long newPrivate;\n+    long freeLimit;\n+    unsigned long cache1;\n+    unsigned long cache2;\n+    unsigned long cache3;\n+    unsigned long cache4;\n+    unsigned long cache5;\n+    unsigned long time6;\n+    unsigned long frames7;\n+    unsigned long page8;\n+    unsigned long ot9;\n+    unsigned long data10;\n+    unsigned long bm11;\n+    unsigned long misc12;\n+  }\n+ShrPcCommonStatSType;\n+\n+\n+typedef struct\n+  {\n+    unsigned long sharedAttached;\n+    unsigned long totalAttached;\n+    long avgPercentShared;\n+    unsigned long numberOfFreeFrames;\n+    unsigned long localDirtyPageCount;\n+    unsigned long globalDirtyPageCount;\n+    long wakeupInterval;\n+    unsigned long numActiveProcesses;\n+    unsigned long numRecentActiveProcesses;\n+    unsigned long gemDirtyPageKinds[10];\n+    unsigned long stoneDirtyPageKinds[10];\n+    unsigned long gemsInCacheCount;\n+    long targetFreeFrameCount;\n+  }\n+ShrPcMonStatSType;\n+\n+typedef struct\n+  {\n+    unsigned long c1;\n+    unsigned long c2;\n+    unsigned long c3;\n+    unsigned long c4;\n+    unsigned long c5;\n+    unsigned long c6;\n+    unsigned long c7;\n+    unsigned long c8;\n+    unsigned long c9;\n+    unsigned long c10;\n+    unsigned long c11;\n+    unsigned long c12;\n+    unsigned long a1;\n+    unsigned long a2;\n+    unsigned long a3;\n+    unsigned long a4;\n+    unsigned long a5;\n+    unsigned long a6;\n+    unsigned long a7;\n+    unsigned long a8;\n+    unsigned long a9;\n+    unsigned long a10;\n+    unsigned long a11;\n+    unsigned long a12;\n+    unsigned long a13;\n+    unsigned long a14;\n+    unsigned long a15;\n+    unsigned long a16;\n+    unsigned long a17;\n+    unsigned long a18;\n+    unsigned long a19;\n+    unsigned long sessionStats[40];\n+  }\n+ShrPcGemStatSType;\n+\n+union ShrPcStatUnion\n+  {\n+    ShrPcMonStatSType monitor;\n+    ShrPcGemStatSType gem;\n+  };\n+\n+typedef struct\n+  {\n+    int processId;\n+    int sessionId;\n+    ShrPcCommonStatSType cmn;\n+    union ShrPcStatUnion u;\n+  } ShrPcStatsSType;\n+\n+typedef struct\n+  {\n+    unsigned long *p1;\n+    unsigned long *p2;\n+    unsigned long *p3;\n+    unsigned long *p4;\n+    unsigned long *p5;\n+    unsigned long *p6;\n+    unsigned long *p7;\n+    unsigned long *p8;\n+    unsigned long *p9;\n+    unsigned long *p10;\n+    unsigned long *p11;\n+  }\n+WorkEntrySType;\n+\n+WorkEntrySType Workspace;\n+\n+static void \n+setStatPointers (ShrPcStatsSType * statsPtr, long sessionId)\n+{\n+  statsPtr->sessionId = sessionId;\n+  statsPtr->cmn.a1 = 0;\n+  statsPtr->cmn.n1 = 5;\n+\n+  Local1 = &statsPtr->cmn.local1;\n+  Local2 = &statsPtr->cmn.local2;\n+  Local3 = &statsPtr->cmn.local3;\n+  RDbf1 = &statsPtr->cmn.rdbf1;\n+  RDbf2 = &statsPtr->cmn.rdbf2;\n+  RDbf3 = &statsPtr->cmn.milli;\n+  *RDbf3 = 1;\n+\n+  IntVc1 = &statsPtr->u.gem.a1;\n+  IntVc2 = &statsPtr->u.gem.a2;\n+  IntCode3 = &statsPtr->u.gem.a3;\n+  IntCode4 = &statsPtr->u.gem.a4;\n+  IntCode5 = &statsPtr->u.gem.a5;\n+  IntCode6 = &statsPtr->u.gem.a6;\n+\n+  {\n+    WorkEntrySType *workSpPtr;\n+    workSpPtr = &Workspace;\n+    workSpPtr->p1 = &statsPtr->u.gem.a7;\n+    workSpPtr->p2 = &statsPtr->u.gem.a8;\n+    workSpPtr->p3 = &statsPtr->u.gem.a9;\n+    workSpPtr->p4 = &statsPtr->u.gem.a10;\n+    workSpPtr->p5 = &statsPtr->u.gem.a11;\n+    workSpPtr->p6 = &statsPtr->u.gem.a12;\n+    workSpPtr->p7 = &statsPtr->u.gem.a13;\n+    workSpPtr->p8 = &statsPtr->u.gem.a14;\n+    workSpPtr->p9 = &statsPtr->u.gem.a15;\n+    workSpPtr->p10 = &statsPtr->u.gem.a16;\n+    workSpPtr->p11 = &statsPtr->u.gem.a17;\n+  }\n+  Lom1 = &statsPtr->u.gem.c1;\n+  Lom2 = &statsPtr->u.gem.c2;\n+  Lom3 = &statsPtr->u.gem.c3;\n+  Lom4 = &statsPtr->u.gem.c4;\n+  Lom5 = &statsPtr->u.gem.c5;\n+  Lom6 = &statsPtr->u.gem.c6;\n+  Lom7 = &statsPtr->u.gem.c7;\n+  Lom8 = &statsPtr->u.gem.c8;\n+  Lom9 = &statsPtr->u.gem.c9;\n+  Lom10 = &statsPtr->u.gem.c10;\n+  RDbf11 = &statsPtr->u.gem.c11;\n+  RDbf12 = &statsPtr->u.gem.c12;\n+}\n+\n+typedef struct\n+{\n+  ShrPcStatsSType stats;\n+} ShrPcPteSType;\n+\n+ShrPcPteSType MyPte;\n+\n+static void \n+initPte (void *shrpcPtr, long sessionId)\n+{\n+  ShrPcPteSType *ptePtr;\n+\n+  ptePtr = &MyPte;\n+  setStatPointers (&ptePtr->stats, sessionId);\n+}\n+\n+void \n+InitCache (int sessionId)\n+{\n+  initPte (0, sessionId);\n+}\n+\n+int \n+main (int argc, char *argv[])\n+{\n+  InitCache (5);\n+  return 0;\n+}"}]}