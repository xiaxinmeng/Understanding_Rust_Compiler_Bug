{"sha": "db739d3ca381fc1c149611677f7fbabbcca3318d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI3MzlkM2NhMzgxZmMxYzE0OTYxMTY3N2Y3ZmJhYmJjY2EzMzE4ZA==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2019-02-25T19:36:05Z"}, "committer": {"name": "Paul Clarke", "email": "pc@gcc.gnu.org", "date": "2019-02-25T19:36:05Z"}, "message": "[rs6000] PR89338, PR89339: Fix compat vector intrinsics for BE and 32-bit\n\nTest FAILS: sse2-cvtpd2dq-1, sse2-cvtpd2ps, sse2-cvttpd2dq on powerpc64\n(big-endian).\n\n_mm_cvtpd_epi32, _mm_cvtpd_ps, _mm_cvttpd_epi32: Type conversion from\nvector doubleword type to vector word type leaves the results in even\nlanes in big endian mode.\n\nTest FAILS: sse-cvtss2si-1, sse-cvtss2si-2, sse-movmskb-1 on powerpc\n(32-bit big-endian).\n\nIncorrect type for interpreting the result from mfvsrd instruction leads\nto incorrect results.  Also, mfvsrd instruction only works as expected in\n64-bit mode or for 32-bit quantities in 32-bit mode.  A more general,\nif slower, solution is needed for 32-bit mode.\n\n2019-02-25  Paul A. Clarke  <pc@us.ibm.com>\n\n[gcc]\n\n\t* config/rs6000/emmintrin.h (_mm_cvtpd_epi32): Fix big endian.\n\t(_mm_cvtpd_ps): Likewise.\n\t(_mm_cvttpd_epi32): Likewise.\n\n\tPR target/89338\n\t* config/rs6000/xmmintrin.h (_mm_cvtss_f32):  Fix type mismatch.\n\t(_mm_cvt_ss2si): Fix type mismatch and 32-bit.\n\n\tPR target/89339\n\t* config/rs6000/xmmintrin.h (_mm_movemask_pi8): Fix 32-bit.\n\nFrom-SVN: r269195", "tree": {"sha": "394b22eec4cf167bcc6ad14b9b82ad287dadf4c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/394b22eec4cf167bcc6ad14b9b82ad287dadf4c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db739d3ca381fc1c149611677f7fbabbcca3318d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db739d3ca381fc1c149611677f7fbabbcca3318d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db739d3ca381fc1c149611677f7fbabbcca3318d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db739d3ca381fc1c149611677f7fbabbcca3318d/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5c44c57781011cf2b7977a96646ef9b87907a63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c44c57781011cf2b7977a96646ef9b87907a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c44c57781011cf2b7977a96646ef9b87907a63"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "6ed68906dacf4c02c715076f712f23e4a1c51a2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db739d3ca381fc1c149611677f7fbabbcca3318d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db739d3ca381fc1c149611677f7fbabbcca3318d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db739d3ca381fc1c149611677f7fbabbcca3318d", "patch": "@@ -1,3 +1,19 @@\n+2019-02-25  Paul A. Clarke  <pc@us.ibm.com>\n+\n+[gcc]\n+\n+\t* config/rs6000/emmintrin.h (_mm_cvtpd_epi32): Fix big endian.\n+\t(_mm_cvtpd_ps): Likewise.\n+\t(_mm_cvttpd_epi32): Likewise.\n+\n+\tPR target/89338\n+\t* config/rs6000/xmmintrin.h (_mm_cvtss_f32):  Fix type mismatch.\n+\t(_mm_cvt_ss2si): Fix type mismatch and 32-bit.\n+\n+\tPR target/89339\n+\t* config/rs6000/xmmintrin.h (_mm_movemask_pi8): Fix 32-bit.\n+\n+\n 2019-02-25  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/88530"}, {"sha": "30975090a2ddae38f2cf950c02eaab6b5d4f1349", "filename": "gcc/config/rs6000/emmintrin.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db739d3ca381fc1c149611677f7fbabbcca3318d/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db739d3ca381fc1c149611677f7fbabbcca3318d/gcc%2Fconfig%2Frs6000%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Femmintrin.h?ref=db739d3ca381fc1c149611677f7fbabbcca3318d", "patch": "@@ -887,7 +887,11 @@ _mm_cvtpd_epi32 (__m128d __A)\n       : );\n \n #ifdef _ARCH_PWR8\n+#ifdef __LITTLE_ENDIAN__\n   temp = vec_mergeo (temp, temp);\n+#else\n+  temp = vec_mergee (temp, temp);\n+#endif\n   result = (__v4si) vec_vpkudum ((__vector long long) temp,\n \t\t\t\t (__vector long long) vzero);\n #else\n@@ -922,7 +926,11 @@ _mm_cvtpd_ps (__m128d __A)\n       : );\n \n #ifdef _ARCH_PWR8\n+#ifdef __LITTLE_ENDIAN__\n   temp = vec_mergeo (temp, temp);\n+#else\n+  temp = vec_mergee (temp, temp);\n+#endif\n   result = (__v4sf) vec_vpkudum ((__vector long long) temp,\n \t\t\t\t (__vector long long) vzero);\n #else\n@@ -951,7 +959,11 @@ _mm_cvttpd_epi32 (__m128d __A)\n       : );\n \n #ifdef _ARCH_PWR8\n+#ifdef __LITTLE_ENDIAN__\n   temp = vec_mergeo (temp, temp);\n+#else\n+  temp = vec_mergee (temp, temp);\n+#endif\n   result = (__v4si) vec_vpkudum ((__vector long long) temp,\n \t\t\t\t (__vector long long) vzero);\n #else"}, {"sha": "71e4bd4e8cf2947402880baa3908bd931038fa6d", "filename": "gcc/config/rs6000/xmmintrin.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db739d3ca381fc1c149611677f7fbabbcca3318d/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db739d3ca381fc1c149611677f7fbabbcca3318d/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxmmintrin.h?ref=db739d3ca381fc1c149611677f7fbabbcca3318d", "patch": "@@ -905,7 +905,7 @@ _mm_cvtss_f32 (__m128 __A)\n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cvtss_si32 (__m128 __A)\n {\n-  __m64 res = 0;\n+  int res;\n #ifdef _ARCH_PWR8\n   double dtmp;\n   __asm__(\n@@ -938,8 +938,8 @@ _mm_cvt_ss2si (__m128 __A)\n extern __inline long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cvtss_si64 (__m128 __A)\n {\n-  __m64 res = 0;\n-#ifdef _ARCH_PWR8\n+  long long res;\n+#if defined (_ARCH_PWR8) && defined (__powerpc64__)\n   double dtmp;\n   __asm__(\n #ifdef __LITTLE_ENDIAN__\n@@ -1577,13 +1577,20 @@ _m_pminub (__m64 __A, __m64 __B)\n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_movemask_pi8 (__m64 __A)\n {\n+#ifdef __powerpc64__\n   unsigned long long p =\n #ifdef __LITTLE_ENDIAN__\n                          0x0008101820283038UL; // permute control for sign bits\n #else\n                          0x3830282018100800UL; // permute control for sign bits\n #endif\n   return __builtin_bpermd (p, __A);\n+#else\n+  unsigned int mask = 0x20283038UL;\n+  unsigned int r1 = __builtin_bpermd (mask, __A) & 0xf;\n+  unsigned int r2 = __builtin_bpermd (mask, __A >> 32) & 0xf;\n+  return (r2 << 4) | r1;\n+#endif\n }\n \n extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}]}