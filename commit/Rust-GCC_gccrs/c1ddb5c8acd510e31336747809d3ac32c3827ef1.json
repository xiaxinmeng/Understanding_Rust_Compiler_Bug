{"sha": "c1ddb5c8acd510e31336747809d3ac32c3827ef1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFkZGI1YzhhY2Q1MTBlMzEzMzY3NDc4MDlkM2FjMzJjMzgyN2VmMQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2002-10-21T18:26:34Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2002-10-21T18:26:34Z"}, "message": "parse.y (patch_invoke): Call force_evaluation_order on a static arg list.\n\n2002-10-15  Andrew Haley  <aph@redhat.com>\n\n\t* parse.y (patch_invoke): Call force_evaluation_order on a static\n\targ list.\n\t(resolve_qualified_expression_name): Call force_evaluation_order\n\ton a arg list that is part of a Qualified Expression Name.\n\n\t* lang.c (dump_compound_expr): New.\n\t(java_dump_tree): New.\n\nFrom-SVN: r58369", "tree": {"sha": "0f4b1ecaaca983ab44a922c2c9a6dba080d34f94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f4b1ecaaca983ab44a922c2c9a6dba080d34f94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1ddb5c8acd510e31336747809d3ac32c3827ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ddb5c8acd510e31336747809d3ac32c3827ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1ddb5c8acd510e31336747809d3ac32c3827ef1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ddb5c8acd510e31336747809d3ac32c3827ef1/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "434fb8b763945776aff0f14e94d9020cc64fd858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/434fb8b763945776aff0f14e94d9020cc64fd858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/434fb8b763945776aff0f14e94d9020cc64fd858"}], "stats": {"total": 132, "additions": 131, "deletions": 1}, "files": [{"sha": "cdfbd2c86ccc0958ea7a5b837684a1ccc9db85a8", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ddb5c8acd510e31336747809d3ac32c3827ef1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ddb5c8acd510e31336747809d3ac32c3827ef1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c1ddb5c8acd510e31336747809d3ac32c3827ef1", "patch": "@@ -1,3 +1,13 @@\n+2002-10-15  Andrew Haley  <aph@redhat.com>\n+\n+\t* parse.y (patch_invoke): Call force_evaluation_order on a static\n+\targ list.\n+\t(resolve_qualified_expression_name): Call force_evaluation_order\n+\ton a arg list that is part of a Qualified Expression Name.\n+\n+\t* lang.c (dump_compound_expr): New.\n+\t(java_dump_tree): New.\n+\n 2002-10-20  Ranjit Mathew <rmathew@hotmail.com>\n \n \t* gcj.texi: Added item describing the GCJ runtime property"}, {"sha": "ca97f02f1d57c002965c39d0e7e19f685f51a7d9", "filename": "gcc/java/lang.c", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ddb5c8acd510e31336747809d3ac32c3827ef1/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ddb5c8acd510e31336747809d3ac32c3827ef1/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=c1ddb5c8acd510e31336747809d3ac32c3827ef1", "patch": "@@ -42,6 +42,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"diagnostic.h\"\n #include \"tree-inline.h\"\n #include \"splay-tree.h\"\n+#include \"tree-dump.h\"\n \n struct string_option\n {\n@@ -74,6 +75,7 @@ static int merge_init_test_initialization PARAMS ((void * *,\n static int inline_init_test_initialization PARAMS ((void * *, \n \t\t\t\t\t\t    void *));\n static bool java_can_use_bit_fields_p PARAMS ((void));\n+static int java_dump_tree PARAMS ((void *, tree));\n \n #ifndef TARGET_OBJECT_SUFFIX\n # define TARGET_OBJECT_SUFFIX \".o\"\n@@ -286,6 +288,9 @@ struct language_function GTY(())\n #undef LANG_HOOKS_TREE_INLINING_WALK_SUBTREES\n #define LANG_HOOKS_TREE_INLINING_WALK_SUBTREES java_tree_inlining_walk_subtrees\n \n+#undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN\n+#define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN java_dump_tree\n+\n /* Each front end provides its own.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n@@ -1041,4 +1046,113 @@ java_inlining_map_static_initializers (fn, decl_map)\n      inline_init_test_initialization, decl_map);\n }\n \n+/* Avoid voluminous output for deep recursion of compound exprs.  */\n+\n+static void\n+dump_compound_expr (di, t)\n+     dump_info_p di;\n+     tree t;\n+{\n+  int i;\n+\n+  for (i=0; i<2; i++)\n+    {\n+      switch (TREE_CODE (TREE_OPERAND (t, i)))\n+\t{\n+\tcase COMPOUND_EXPR:\n+\t  dump_compound_expr (di, TREE_OPERAND (t, i));\n+\t  break;\n+\n+\tcase EXPR_WITH_FILE_LOCATION:\n+\t    {\n+\t      tree wfl_node = EXPR_WFL_NODE (TREE_OPERAND (t, i));\n+\t      dump_child (\"expr\", wfl_node);\n+\t      break;\n+\t    }\n+\n+\tdefault:\n+\t  dump_child (\"expr\", TREE_OPERAND (t, i));\n+\t}\n+    }\n+}\n+  \n+static int\n+java_dump_tree (dump_info, t)\n+     void *dump_info;\n+     tree t;\n+{\n+  enum tree_code code;\n+  dump_info_p di = (dump_info_p) dump_info;\n+\n+  /* Figure out what kind of node this is.  */\n+  code = TREE_CODE (t);\n+\n+  switch (code)\n+    {\n+    case FUNCTION_DECL:\n+      dump_child (\"args\", DECL_ARGUMENTS (t));\n+      if (DECL_EXTERNAL (t))\n+\tdump_string (di, \"undefined\");\n+      if (TREE_PUBLIC (t))\n+\tdump_string (di, \"extern\");\n+      else\n+\tdump_string (di, \"static\");\n+      if (DECL_LANG_SPECIFIC (t))\n+\tdump_child (\"body\", DECL_FUNCTION_BODY (t));\n+      if (DECL_LANG_SPECIFIC (t) && !dump_flag (di, TDF_SLIM, t))\n+\tdump_child (\"inline body\", DECL_SAVED_TREE (t));\n+      return 1;\n+\n+    case RETURN_EXPR:\n+      dump_child (\"expr\", TREE_OPERAND (t, 0));\n+      return 1;\n+\n+    case GOTO_EXPR:\n+      dump_child (\"goto\", TREE_OPERAND (t, 0));\n+      return 1;\n+\n+    case LABEL_EXPR:\n+      dump_child (\"label\", TREE_OPERAND (t, 0));\n+      return 1;\n+\n+    case LABELED_BLOCK_EXPR:\n+      dump_child (\"label\", TREE_OPERAND (t, 0));\n+      dump_child (\"block\", TREE_OPERAND (t, 1));\n+      return 1;\n+\n+    case EXIT_BLOCK_EXPR:\n+      dump_child (\"block\", TREE_OPERAND (t, 0));\n+      dump_child (\"val\", TREE_OPERAND (t, 1));\n+      return 1;\n+\n+    case BLOCK:\n+      if (BLOCK_EXPR_BODY (t))\n+\t{\n+\t  tree local = BLOCK_VARS (t);\n+\t  while (local)\n+\t    {\n+\t      tree next = TREE_CHAIN (local);\n+\t      dump_child (\"var\", local);\n+\t      local = next;\n+\t    }\n+\t  \n+\t  {\n+\t    tree block = BLOCK_EXPR_BODY (t);\n+\t    dump_child (\"body\", block);\n+\t    block = TREE_CHAIN (block);\n+\t  }\n+\t}\n+      return 1;\n+      \n+    case COMPOUND_EXPR:\n+      if (!dump_flag (di, TDF_SLIM, t))\n+\treturn 0;\n+      dump_compound_expr (di, t);\n+      return 1;\n+\n+    default:\n+      break;\n+    }\n+  return 0;\n+}\n #include \"gt-java-lang.h\""}, {"sha": "61595b87786823b187eae91df27693ec0a396e2b", "filename": "gcc/java/parse.y", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ddb5c8acd510e31336747809d3ac32c3827ef1/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ddb5c8acd510e31336747809d3ac32c3827ef1/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=c1ddb5c8acd510e31336747809d3ac32c3827ef1", "patch": "@@ -7439,6 +7439,7 @@ dump_java_tree (phase, t)\n   int flags;\n \n   stream = dump_begin (phase, &flags);\n+  flags |= TDF_SLIM;\n   if (stream)\n     {\n       dump_node (t, flags, stream);\n@@ -9504,6 +9505,8 @@ resolve_qualified_expression_name (wfl, found_decl, where_found, type_found)\n \t    }\n \t  *type_found = type = QUAL_DECL_TYPE (*where_found);\n \n+\t  *where_found = force_evaluation_order (*where_found);\n+\n \t  /* If we're creating an inner class instance, check for that\n \t     an enclosing instance is in scope */\n \t  if (TREE_CODE (qual_wfl) == NEW_CLASS_EXPR\n@@ -10785,7 +10788,10 @@ patch_invoke (patch, method, args)\n     {\n       tree list;\n       tree fndecl = current_function_decl;\n-      tree save = save_expr (patch);\n+      /* We have to call force_evaluation_order now because creating a\n+\t COMPOUND_EXPR wraps the arg list in a way that makes it\n+\t unrecognizable by force_evaluation_order later.  Yuk.  */\n+      tree save = save_expr (force_evaluation_order (patch));\n       tree type = TREE_TYPE (patch);\n \n       patch = build (COMPOUND_EXPR, type, save, empty_stmt_node);"}]}