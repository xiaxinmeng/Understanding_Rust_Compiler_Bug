{"sha": "0a1766b2897291b91fd62972bb54765177840200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGExNzY2YjI4OTcyOTFiOTFmZDYyOTcyYmI1NDc2NTE3Nzg0MDIwMA==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2007-11-09T17:23:42Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2007-11-09T17:23:42Z"}, "message": "Maxim Kuvyrkov  <maxim@codesourcery.com>\n\n\t* gcc/sched-deps.c (sched_analyze_insn): Use MOVE_BARRIER\n\tinstead of TRUE_BARRIER for jumps.  Add register dependencies\n\teven when reg_pending_barrier is set.\n\n\nCo-Authored-By: Maxim Kuvyrkov <maxim@codesourcery.com>\n\nFrom-SVN: r130052", "tree": {"sha": "e4b83c30d527a5f70c11d5a192ec6088a40b243a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4b83c30d527a5f70c11d5a192ec6088a40b243a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a1766b2897291b91fd62972bb54765177840200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1766b2897291b91fd62972bb54765177840200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a1766b2897291b91fd62972bb54765177840200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1766b2897291b91fd62972bb54765177840200/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cbc6c888f94488419c4d342793a1f32fe1364284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc6c888f94488419c4d342793a1f32fe1364284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbc6c888f94488419c4d342793a1f32fe1364284"}], "stats": {"total": 186, "additions": 96, "deletions": 90}, "files": [{"sha": "34b70aedebff9c7291fe631a4fe24a4d2e680ef2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1766b2897291b91fd62972bb54765177840200/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1766b2897291b91fd62972bb54765177840200/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a1766b2897291b91fd62972bb54765177840200", "patch": "@@ -1,3 +1,10 @@\n+2007-11-09  Alexander Monakov  <amonakov@ispras.ru>\n+\t    Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* gcc/sched-deps.c (sched_analyze_insn): Use MOVE_BARRIER\n+\tinstead of TRUE_BARRIER for jumps.  Add register dependencies\n+\teven when reg_pending_barrier is set.\n+\n 2007-11-09  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* gcc/haifa-sched.c (haifa_classify_insn): Rename to ..."}, {"sha": "1f85781ebcedd4d9018d79b3a1495ee9ac5fda2f", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 89, "deletions": 90, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a1766b2897291b91fd62972bb54765177840200/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a1766b2897291b91fd62972bb54765177840200/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=0a1766b2897291b91fd62972bb54765177840200", "patch": "@@ -1920,7 +1920,7 @@ sched_analyze_insn (struct deps *deps, rtx x, rtx insn)\n       rtx next;\n       next = next_nonnote_insn (insn);\n       if (next && BARRIER_P (next))\n-\treg_pending_barrier = TRUE_BARRIER;\n+\treg_pending_barrier = MOVE_BARRIER;\n       else\n \t{\n \t  rtx pending, pending_mem;\n@@ -1984,6 +1984,94 @@ sched_analyze_insn (struct deps *deps, rtx x, rtx insn)\n       || (NONJUMP_INSN_P (insn) && control_flow_insn_p (insn)))\n     reg_pending_barrier = MOVE_BARRIER;\n \n+  /* Add register dependencies for insn.\n+     If the current insn is conditional, we can't free any of the lists.  */\n+  if (sched_get_condition (insn))\n+    {\n+      EXECUTE_IF_SET_IN_REG_SET (reg_pending_uses, 0, i, rsi)\n+\t{\n+\t  struct deps_reg *reg_last = &deps->reg_last[i];\n+\t  add_dependence_list (insn, reg_last->sets, 0, REG_DEP_TRUE);\n+\t  add_dependence_list (insn, reg_last->clobbers, 0, REG_DEP_TRUE);\n+\t  reg_last->uses = alloc_INSN_LIST (insn, reg_last->uses);\n+\t  reg_last->uses_length++;\n+\t}\n+      EXECUTE_IF_SET_IN_REG_SET (reg_pending_clobbers, 0, i, rsi)\n+\t{\n+\t  struct deps_reg *reg_last = &deps->reg_last[i];\n+\t  add_dependence_list (insn, reg_last->sets, 0, REG_DEP_OUTPUT);\n+\t  add_dependence_list (insn, reg_last->uses, 0, REG_DEP_ANTI);\n+\t  reg_last->clobbers = alloc_INSN_LIST (insn, reg_last->clobbers);\n+\t  reg_last->clobbers_length++;\n+\t}\n+      EXECUTE_IF_SET_IN_REG_SET (reg_pending_sets, 0, i, rsi)\n+\t{\n+\t  struct deps_reg *reg_last = &deps->reg_last[i];\n+\t  add_dependence_list (insn, reg_last->sets, 0, REG_DEP_OUTPUT);\n+\t  add_dependence_list (insn, reg_last->clobbers, 0, REG_DEP_OUTPUT);\n+\t  add_dependence_list (insn, reg_last->uses, 0, REG_DEP_ANTI);\n+\t  reg_last->sets = alloc_INSN_LIST (insn, reg_last->sets);\n+\t  SET_REGNO_REG_SET (&deps->reg_conditional_sets, i);\n+\t}\n+    }\n+  else\n+    {\n+      EXECUTE_IF_SET_IN_REG_SET (reg_pending_uses, 0, i, rsi)\n+\t{\n+\t  struct deps_reg *reg_last = &deps->reg_last[i];\n+\t  add_dependence_list (insn, reg_last->sets, 0, REG_DEP_TRUE);\n+\t  add_dependence_list (insn, reg_last->clobbers, 0, REG_DEP_TRUE);\n+\t  reg_last->uses_length++;\n+\t  reg_last->uses = alloc_INSN_LIST (insn, reg_last->uses);\n+\t}\n+      EXECUTE_IF_SET_IN_REG_SET (reg_pending_clobbers, 0, i, rsi)\n+\t{\n+\t  struct deps_reg *reg_last = &deps->reg_last[i];\n+\t  if (reg_last->uses_length > MAX_PENDING_LIST_LENGTH\n+\t      || reg_last->clobbers_length > MAX_PENDING_LIST_LENGTH)\n+\t    {\n+\t      add_dependence_list_and_free (insn, &reg_last->sets, 0,\n+\t\t\t\t\t    REG_DEP_OUTPUT);\n+\t      add_dependence_list_and_free (insn, &reg_last->uses, 0,\n+\t\t\t\t\t    REG_DEP_ANTI);\n+\t      add_dependence_list_and_free (insn, &reg_last->clobbers, 0,\n+\t\t\t\t\t    REG_DEP_OUTPUT);\n+\t      reg_last->sets = alloc_INSN_LIST (insn, reg_last->sets);\n+\t      reg_last->clobbers_length = 0;\n+\t      reg_last->uses_length = 0;\n+\t    }\n+\t  else\n+\t    {\n+\t      add_dependence_list (insn, reg_last->sets, 0, REG_DEP_OUTPUT);\n+\t      add_dependence_list (insn, reg_last->uses, 0, REG_DEP_ANTI);\n+\t    }\n+\t  reg_last->clobbers_length++;\n+\t  reg_last->clobbers = alloc_INSN_LIST (insn, reg_last->clobbers);\n+\t}\n+      EXECUTE_IF_SET_IN_REG_SET (reg_pending_sets, 0, i, rsi)\n+\t{\n+\t  struct deps_reg *reg_last = &deps->reg_last[i];\n+\t  add_dependence_list_and_free (insn, &reg_last->sets, 0,\n+\t\t\t\t\tREG_DEP_OUTPUT);\n+\t  add_dependence_list_and_free (insn, &reg_last->clobbers, 0,\n+\t\t\t\t\tREG_DEP_OUTPUT);\n+\t  add_dependence_list_and_free (insn, &reg_last->uses, 0,\n+\t\t\t\t\tREG_DEP_ANTI);\n+\t  reg_last->sets = alloc_INSN_LIST (insn, reg_last->sets);\n+\t  reg_last->uses_length = 0;\n+\t  reg_last->clobbers_length = 0;\n+\t  CLEAR_REGNO_REG_SET (&deps->reg_conditional_sets, i);\n+\t}\n+    }\n+\n+  IOR_REG_SET (&deps->reg_last_in_use, reg_pending_uses);\n+  IOR_REG_SET (&deps->reg_last_in_use, reg_pending_clobbers);\n+  IOR_REG_SET (&deps->reg_last_in_use, reg_pending_sets);\n+\n+  CLEAR_REG_SET (reg_pending_uses);\n+  CLEAR_REG_SET (reg_pending_clobbers);\n+  CLEAR_REG_SET (reg_pending_sets);\n+\n   /* Add dependencies if a scheduling barrier was found.  */\n   if (reg_pending_barrier)\n     {\n@@ -2032,95 +2120,6 @@ sched_analyze_insn (struct deps *deps, rtx x, rtx insn)\n       CLEAR_REG_SET (&deps->reg_conditional_sets);\n       reg_pending_barrier = NOT_A_BARRIER;\n     }\n-  else\n-    {\n-      /* If the current insn is conditional, we can't free any\n-\t of the lists.  */\n-      if (sched_get_condition (insn))\n-\t{\n-\t  EXECUTE_IF_SET_IN_REG_SET (reg_pending_uses, 0, i, rsi)\n-\t    {\n-\t      struct deps_reg *reg_last = &deps->reg_last[i];\n-\t      add_dependence_list (insn, reg_last->sets, 0, REG_DEP_TRUE);\n-\t      add_dependence_list (insn, reg_last->clobbers, 0, REG_DEP_TRUE);\n-\t      reg_last->uses = alloc_INSN_LIST (insn, reg_last->uses);\n-\t      reg_last->uses_length++;\n-\t    }\n-\t  EXECUTE_IF_SET_IN_REG_SET (reg_pending_clobbers, 0, i, rsi)\n-\t    {\n-\t      struct deps_reg *reg_last = &deps->reg_last[i];\n-\t      add_dependence_list (insn, reg_last->sets, 0, REG_DEP_OUTPUT);\n-\t      add_dependence_list (insn, reg_last->uses, 0, REG_DEP_ANTI);\n-\t      reg_last->clobbers = alloc_INSN_LIST (insn, reg_last->clobbers);\n-\t      reg_last->clobbers_length++;\n-\t    }\n-\t  EXECUTE_IF_SET_IN_REG_SET (reg_pending_sets, 0, i, rsi)\n-\t    {\n-\t      struct deps_reg *reg_last = &deps->reg_last[i];\n-\t      add_dependence_list (insn, reg_last->sets, 0, REG_DEP_OUTPUT);\n-\t      add_dependence_list (insn, reg_last->clobbers, 0, REG_DEP_OUTPUT);\n-\t      add_dependence_list (insn, reg_last->uses, 0, REG_DEP_ANTI);\n-\t      reg_last->sets = alloc_INSN_LIST (insn, reg_last->sets);\n-\t      SET_REGNO_REG_SET (&deps->reg_conditional_sets, i);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  EXECUTE_IF_SET_IN_REG_SET (reg_pending_uses, 0, i, rsi)\n-\t    {\n-\t      struct deps_reg *reg_last = &deps->reg_last[i];\n-\t      add_dependence_list (insn, reg_last->sets, 0, REG_DEP_TRUE);\n-\t      add_dependence_list (insn, reg_last->clobbers, 0, REG_DEP_TRUE);\n-\t      reg_last->uses_length++;\n-\t      reg_last->uses = alloc_INSN_LIST (insn, reg_last->uses);\n-\t    }\n-\t  EXECUTE_IF_SET_IN_REG_SET (reg_pending_clobbers, 0, i, rsi)\n-\t    {\n-\t      struct deps_reg *reg_last = &deps->reg_last[i];\n-\t      if (reg_last->uses_length > MAX_PENDING_LIST_LENGTH\n-\t\t  || reg_last->clobbers_length > MAX_PENDING_LIST_LENGTH)\n-\t\t{\n-\t\t  add_dependence_list_and_free (insn, &reg_last->sets, 0,\n-\t\t\t\t\t        REG_DEP_OUTPUT);\n-\t\t  add_dependence_list_and_free (insn, &reg_last->uses, 0,\n-\t\t\t\t\t\tREG_DEP_ANTI);\n-\t\t  add_dependence_list_and_free (insn, &reg_last->clobbers, 0,\n-\t\t\t\t\t\tREG_DEP_OUTPUT);\n-\t\t  reg_last->sets = alloc_INSN_LIST (insn, reg_last->sets);\n-\t\t  reg_last->clobbers_length = 0;\n-\t\t  reg_last->uses_length = 0;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  add_dependence_list (insn, reg_last->sets, 0, REG_DEP_OUTPUT);\n-\t\t  add_dependence_list (insn, reg_last->uses, 0, REG_DEP_ANTI);\n-\t\t}\n-\t      reg_last->clobbers_length++;\n-\t      reg_last->clobbers = alloc_INSN_LIST (insn, reg_last->clobbers);\n-\t    }\n-\t  EXECUTE_IF_SET_IN_REG_SET (reg_pending_sets, 0, i, rsi)\n-\t    {\n-\t      struct deps_reg *reg_last = &deps->reg_last[i];\n-\t      add_dependence_list_and_free (insn, &reg_last->sets, 0,\n-\t\t\t\t\t    REG_DEP_OUTPUT);\n-\t      add_dependence_list_and_free (insn, &reg_last->clobbers, 0,\n-\t\t\t\t\t    REG_DEP_OUTPUT);\n-\t      add_dependence_list_and_free (insn, &reg_last->uses, 0,\n-\t\t\t\t\t    REG_DEP_ANTI);\n-\t      reg_last->sets = alloc_INSN_LIST (insn, reg_last->sets);\n-\t      reg_last->uses_length = 0;\n-\t      reg_last->clobbers_length = 0;\n-\t      CLEAR_REGNO_REG_SET (&deps->reg_conditional_sets, i);\n-\t    }\n-\t}\n-\n-      IOR_REG_SET (&deps->reg_last_in_use, reg_pending_uses);\n-      IOR_REG_SET (&deps->reg_last_in_use, reg_pending_clobbers);\n-      IOR_REG_SET (&deps->reg_last_in_use, reg_pending_sets);\n-    }\n-  CLEAR_REG_SET (reg_pending_uses);\n-  CLEAR_REG_SET (reg_pending_clobbers);\n-  CLEAR_REG_SET (reg_pending_sets);\n \n   /* If we are currently in a libcall scheduling group, then mark the\n      current insn as being in a scheduling group and that it can not"}]}