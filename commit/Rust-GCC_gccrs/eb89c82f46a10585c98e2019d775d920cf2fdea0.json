{"sha": "eb89c82f46a10585c98e2019d775d920cf2fdea0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI4OWM4MmY0NmExMDU4NWM5OGUyMDE5ZDc3NWQ5MjBjZjJmZGVhMA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@codesourcery.com", "date": "2016-11-27T14:29:36Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2016-11-27T14:29:36Z"}, "message": "[Darwin, config] Arrange for ld64 to be detected as Darwin's linker.\n\n This is an initial patch in a series that converts Darwin's configury\n to detect ld64 features, rather than the current process of hard-coding\n them on target system version.\n\n A ld64-compatible linker is currently required and assumed by Darwin.\n If a DEFAULT_LINKER is set via --with-ld= then this will be tested to\n see if it is ld64.\n\n The ld64 version is determined for the chosen ld and this is exported for\n use in setting a default value for -mtarget-linker (needed for run-time\n code-gen changes to section choices).\n The support for -rdynamic is converted to be detected at config time, or\n by the ld64 version if that is found.\n\ngcc/\n\n2016-11-27  Iain Sandoe  <iain@codesourcery.com>\n\n\tPR target/71767\n\t* configure.ac (with-ld64): New var, set for Darwin, set on\n\tdetection of ld64, gcc_cv_ld64_export_dynamic: New, New test.\n\t* config/darwin.h: Use LD64_HAS_DYNAMIC export. DEF_LD64: New,\n\tdefine.\n\t* config/darwin10.h(DEF_LD64): Update for this target version.\n\t* config/darwin12.h(LINK_GCC_C_SEQUENCE_SPEC): Remove rdynamic\n\ttest.  (DEF_LD64): Update for this target version.\n\t* configure: Regenerated.\n\t* config.in: Regenerated.\n\nFrom-SVN: r242894", "tree": {"sha": "3025ca76070f4fc7fb893b3a09ca0f62f3d28227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3025ca76070f4fc7fb893b3a09ca0f62f3d28227"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb89c82f46a10585c98e2019d775d920cf2fdea0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb89c82f46a10585c98e2019d775d920cf2fdea0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb89c82f46a10585c98e2019d775d920cf2fdea0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb89c82f46a10585c98e2019d775d920cf2fdea0/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7881b63fef5c682fb6c4e5b4009f5afc7971595b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7881b63fef5c682fb6c4e5b4009f5afc7971595b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7881b63fef5c682fb6c4e5b4009f5afc7971595b"}], "stats": {"total": 189, "additions": 185, "deletions": 4}, "files": [{"sha": "27e0615c15d208e9a82ebf86c814870427e9ae42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb89c82f46a10585c98e2019d775d920cf2fdea0", "patch": "@@ -1,3 +1,16 @@\n+2016-11-27  Iain Sandoe  <iain@codesourcery.com>\n+\n+\tPR target/71767\n+\t* configure.ac (with-ld64): New var, set for Darwin, set on\n+\tdetection of ld64, gcc_cv_ld64_export_dynamic: New, New test.\n+\t* config/darwin.h: Use LD64_HAS_DYNAMIC export. DEF_LD64: New,\n+\tdefine.\n+\t* config/darwin10.h(DEF_LD64): Update for this target version.\n+\t* config/darwin12.h(LINK_GCC_C_SEQUENCE_SPEC): Remove rdynamic\n+\ttest.  (DEF_LD64): Update for this target version.\n+\t* configure: Regenerated.\n+\t* config.in: Regenerated.\n+\n 2016-11-27  Iain Sandoe  <iain@codesourcery.com>\n \n \tPR target/71767"}, {"sha": "c192638fc94c46e498f53b74cc6e33a9c4c2568d", "filename": "gcc/config.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=eb89c82f46a10585c98e2019d775d920cf2fdea0", "patch": "@@ -1946,6 +1946,18 @@\n #endif\n \n \n+/* Define to 1 if ld64 supports '-export_dynamic'. */\n+#ifndef USED_FOR_TARGET\n+#undef LD64_HAS_EXPORT_DYNAMIC\n+#endif\n+\n+\n+/* Define to ld64 version. */\n+#ifndef USED_FOR_TARGET\n+#undef LD64_VERSION\n+#endif\n+\n+\n /* Define to the linker option to ignore unused dependencies. */\n #ifndef USED_FOR_TARGET\n #undef LD_AS_NEEDED_OPTION"}, {"sha": "541bcb3c8e5c3c72ab07be84bf3f57f16302d5ae", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=eb89c82f46a10585c98e2019d775d920cf2fdea0", "patch": "@@ -165,6 +165,12 @@ extern GTY(()) int darwin_ms_struct;\n    specifying the handling of options understood by generic Unix\n    linkers, and for positional arguments like libraries.  */\n \n+#if LD64_HAS_EXPORT_DYNAMIC\n+#define DARWIN_EXPORT_DYNAMIC \" %{rdynamic:-export_dynamic}\"\n+#else\n+#define DARWIN_EXPORT_DYNAMIC \" %{rdynamic: %nrdynamic is not supported}\"\n+#endif\n+\n #define LINK_COMMAND_SPEC_A \\\n    \"%{!fdump=*:%{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\\\n     %(linker)\" \\\n@@ -185,7 +191,9 @@ extern GTY(()) int darwin_ms_struct;\n     %{!nostdlib:%{!nodefaultlibs:\\\n       %{%:sanitize(address): -lasan } \\\n       %{%:sanitize(undefined): -lubsan } \\\n-      %(link_ssp) %(link_gcc_c_sequence)\\\n+      %(link_ssp) \\\n+      \" DARWIN_EXPORT_DYNAMIC \" %<rdynamic \\\n+      %(link_gcc_c_sequence) \\\n     }}\\\n     %{!nostdlib:%{!nostartfiles:%E}} %{T*} %{F*} }}}}}}}\"\n \n@@ -932,4 +940,10 @@ extern void darwin_driver_init (unsigned int *,struct cl_decoded_option **);\n    fall-back default.  */\n #define DEF_MIN_OSX_VERSION \"10.5\"\n \n+#ifndef LD64_VERSION\n+#define LD64_VERSION \"85.2\"\n+#else\n+#define DEF_LD64 LD64_VERSION\n+#endif\n+\n #endif /* CONFIG_DARWIN_H */"}, {"sha": "a81fbdccdc87215f5b4da1ede253d398e7e84d30", "filename": "gcc/config/darwin10.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2Fconfig%2Fdarwin10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2Fconfig%2Fdarwin10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin10.h?ref=eb89c82f46a10585c98e2019d775d920cf2fdea0", "patch": "@@ -32,3 +32,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef DEF_MIN_OSX_VERSION\n #define DEF_MIN_OSX_VERSION \"10.6\"\n+\n+#ifndef LD64_VERSION\n+#undef DEF_LD64\n+#define DEF_LD64 \"97.7\"\n+#endif"}, {"sha": "f88e2a4690119a61aea104e6f595dd677edd788b", "filename": "gcc/config/darwin12.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2Fconfig%2Fdarwin12.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2Fconfig%2Fdarwin12.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin12.h?ref=eb89c82f46a10585c98e2019d775d920cf2fdea0", "patch": "@@ -21,10 +21,15 @@ along with GCC; see the file COPYING3.  If not see\n #undef  LINK_GCC_C_SEQUENCE_SPEC\n #define LINK_GCC_C_SEQUENCE_SPEC \\\n \"%:version-compare(>= 10.6 mmacosx-version-min= -no_compact_unwind) \\\n-   %{rdynamic:-export_dynamic} %{!static:%{!static-libgcc: \\\n+   %{!static:%{!static-libgcc: \\\n       %:version-compare(>= 10.6 mmacosx-version-min= -lSystem) } } \\\n    %{fno-pic|fno-PIC|fno-pie|fno-PIE|fapple-kext|mkernel|static|mdynamic-no-pic: \\\n       %:version-compare(>= 10.7 mmacosx-version-min= -no_pie) } %G %L\"\n \n #undef DEF_MIN_OSX_VERSION\n #define DEF_MIN_OSX_VERSION \"10.8\"\n+\n+#ifndef LD64_VERSION\n+#undef DEF_LD64\n+#define DEF_LD64 \"236.4\"\n+#endif"}, {"sha": "aa961b77acd5ed9a7dcd49f8d1435dd07bf3af00", "filename": "gcc/configure", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=eb89c82f46a10585c98e2019d775d920cf2fdea0", "patch": "@@ -3639,6 +3639,11 @@ else\n fi\n \n \n+case $target in\n+    *darwin*) ld64_flag=yes;; # Darwin can only use a ld64-compatible linker.\n+    *) ld64_flag=no;;\n+esac\n+\n # With pre-defined ld\n \n # Check whether --with-ld was given.\n@@ -3651,6 +3656,8 @@ if test x\"${DEFAULT_LINKER+set}\" = x\"set\"; then\n     as_fn_error \"cannot execute: $DEFAULT_LINKER: check --with-ld or env. var. DEFAULT_LINKER\" \"$LINENO\" 5\n   elif $DEFAULT_LINKER -v < /dev/null 2>&1 | grep GNU > /dev/null; then\n     gnu_ld_flag=yes\n+  elif $DEFAULT_LINKER -v < /dev/null 2>&1 | grep ld64- > /dev/null; then\n+    ld64_flag=yes\n   fi\n \n cat >>confdefs.h <<_ACEOF\n@@ -18423,7 +18430,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18426 \"configure\"\n+#line 18433 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18529,7 +18536,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18532 \"configure\"\n+#line 18539 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -28287,6 +28294,71 @@ _ACEOF\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld_compress_debug\" >&5\n $as_echo \"$gcc_cv_ld_compress_debug\" >&6; }\n \n+if test x\"$ld64_flag\" = x\"yes\"; then\n+\n+  # Set defaults for possibly untestable items.\n+  gcc_cv_ld64_export_dynamic=0\n+\n+  if test \"$build\" = \"$host\"; then\n+    darwin_try_test=1\n+  else\n+    darwin_try_test=0\n+  fi\n+\n+  # On Darwin, because of FAT library support, it is often possible to execute\n+  # exes from compatible archs even when the host differs from the build system.\n+  case \"$build\",\"$host\" in\n+    x86_64-*-darwin*,i?86-*-darwin* | powerpc64*-*-darwin*,powerpc*-*-darwin*)\n+\tdarwin_try_test=1;;\n+    *) ;;\n+  esac\n+\n+  # If the configurer specified a minimum ld64 version to be supported, then use\n+  # that to determine feature support.\n+  if test x\"${gcc_cv_ld64_version}\" != x; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking ld64 major version\" >&5\n+$as_echo_n \"checking ld64 major version... \" >&6; }\n+    IFS=. read gcc_cv_ld64_major gcc_cv_ld64_minor <<< \"${gcc_cv_ld64_version}\"\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld64_major\" >&5\n+$as_echo \"$gcc_cv_ld64_major\" >&6; }\n+   if test \"$gcc_cv_ld64_major\" -ge 236; then\n+      gcc_cv_ld64_export_dynamic=1\n+    fi\n+  elif test -x \"$gcc_cv_ld\" -a \"$darwin_try_test\" -eq 1; then\n+    # If the version was not specified, try to find it.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker version\" >&5\n+$as_echo_n \"checking linker version... \" >&6; }\n+    if test x\"${gcc_cv_ld64_version}\" = x; then\n+      gcc_cv_ld64_version=`$gcc_cv_ld -v 2>&1 | grep ld64 | sed s/.*ld64-// | awk '{print $1}'`\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld64_version\" >&5\n+$as_echo \"$gcc_cv_ld64_version\" >&6; }\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker for -export_dynamic support\" >&5\n+$as_echo_n \"checking linker for -export_dynamic support... \" >&6; }\n+    gcc_cv_ld64_export_dynamic=1\n+    if $gcc_cv_ld -export_dynamic < /dev/null 2>&1 | grep 'unknown option' > /dev/null; then\n+      gcc_cv_ld64_export_dynamic=0\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld64_export_dynamic\" >&5\n+$as_echo \"$gcc_cv_ld64_export_dynamic\" >&6; }\n+  fi\n+\n+  if test x\"${gcc_cv_ld64_version}\" != x; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define LD64_VERSION \"${gcc_cv_ld64_version}\"\n+_ACEOF\n+\n+  fi\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define LD64_HAS_EXPORT_DYNAMIC $gcc_cv_ld64_export_dynamic\n+_ACEOF\n+\n+fi\n+\n # --------\n # UNSORTED\n # --------"}, {"sha": "998499ed82d77a3d838d92123e0b5a3a9db68838", "filename": "gcc/configure.ac", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb89c82f46a10585c98e2019d775d920cf2fdea0/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=eb89c82f46a10585c98e2019d775d920cf2fdea0", "patch": "@@ -274,6 +274,11 @@ AC_ARG_WITH(gnu-ld,\n gnu_ld_flag=\"$with_gnu_ld\",\n gnu_ld_flag=no)\n \n+case $target in\n+    *darwin*) ld64_flag=yes;; # Darwin can only use a ld64-compatible linker.\n+    *) ld64_flag=no;;\n+esac\n+\n # With pre-defined ld\n AC_ARG_WITH(ld,\n [AS_HELP_STRING([--with-ld], [arrange to use the specified ld (full pathname)])],\n@@ -283,6 +288,8 @@ if test x\"${DEFAULT_LINKER+set}\" = x\"set\"; then\n     AC_MSG_ERROR([cannot execute: $DEFAULT_LINKER: check --with-ld or env. var. DEFAULT_LINKER])\n   elif $DEFAULT_LINKER -v < /dev/null 2>&1 | grep GNU > /dev/null; then\n     gnu_ld_flag=yes\n+  elif $DEFAULT_LINKER -v < /dev/null 2>&1 | grep ld64- > /dev/null; then\n+    ld64_flag=yes\n   fi\n   AC_DEFINE_UNQUOTED(DEFAULT_LINKER,\"$DEFAULT_LINKER\",\n \t[Define to enable the use of a default linker.])\n@@ -5266,6 +5273,59 @@ AC_DEFINE_UNQUOTED(LD_COMPRESS_DEBUG_OPTION, \"$gcc_cv_ld_compress_debug_option\",\n [Define to the linker option to enable compressed debug sections.])\n AC_MSG_RESULT($gcc_cv_ld_compress_debug)\n \n+if test x\"$ld64_flag\" = x\"yes\"; then\n+\n+  # Set defaults for possibly untestable items.\n+  gcc_cv_ld64_export_dynamic=0\n+\n+  if test \"$build\" = \"$host\"; then\n+    darwin_try_test=1\n+  else\n+    darwin_try_test=0\n+  fi\n+\n+  # On Darwin, because of FAT library support, it is often possible to execute\n+  # exes from compatible archs even when the host differs from the build system.\n+  case \"$build\",\"$host\" in\n+    x86_64-*-darwin*,i?86-*-darwin* | powerpc64*-*-darwin*,powerpc*-*-darwin*)\n+\tdarwin_try_test=1;;\n+    *) ;;\n+  esac\n+\n+  # If the configurer specified a minimum ld64 version to be supported, then use\n+  # that to determine feature support.\n+  if test x\"${gcc_cv_ld64_version}\" != x; then\n+    AC_MSG_CHECKING(ld64 major version)\n+    IFS=. read gcc_cv_ld64_major gcc_cv_ld64_minor <<< \"${gcc_cv_ld64_version}\"\n+    AC_MSG_RESULT($gcc_cv_ld64_major)\n+   if test \"$gcc_cv_ld64_major\" -ge 236; then\n+      gcc_cv_ld64_export_dynamic=1\n+    fi\n+  elif test -x \"$gcc_cv_ld\" -a \"$darwin_try_test\" -eq 1; then\n+    # If the version was not specified, try to find it.\n+    AC_MSG_CHECKING(linker version)\n+    if test x\"${gcc_cv_ld64_version}\" = x; then\n+      gcc_cv_ld64_version=`$gcc_cv_ld -v 2>&1 | grep ld64 | sed s/.*ld64-// | awk '{print $1}'`\n+    fi\n+    AC_MSG_RESULT($gcc_cv_ld64_version)\n+\n+    AC_MSG_CHECKING(linker for -export_dynamic support)\n+    gcc_cv_ld64_export_dynamic=1\n+    if $gcc_cv_ld -export_dynamic < /dev/null 2>&1 | grep 'unknown option' > /dev/null; then\n+      gcc_cv_ld64_export_dynamic=0\n+    fi\n+    AC_MSG_RESULT($gcc_cv_ld64_export_dynamic)\n+  fi\n+\n+  if test x\"${gcc_cv_ld64_version}\" != x; then\n+    AC_DEFINE_UNQUOTED(LD64_VERSION, \"${gcc_cv_ld64_version}\",\n+      [Define to ld64 version.])\n+  fi\n+\n+  AC_DEFINE_UNQUOTED(LD64_HAS_EXPORT_DYNAMIC, $gcc_cv_ld64_export_dynamic,\n+  [Define to 1 if ld64 supports '-export_dynamic'.])\n+fi\n+\n # --------\n # UNSORTED\n # --------"}]}