{"sha": "df9ee5c8290238799b2e808b67c21aa8164b51f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY5ZWU1YzgyOTAyMzg3OTliMmU4MDhiNjdjMjFhYTgxNjRiNTFmNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-10-25T13:48:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-10-25T13:48:10Z"}, "message": "re PR c++/50858 (segfault at ../../gcc/libiberty/hashtab.c:981)\n\n/cp\n2011-10-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50858\n\t* typeck.c (composite_pointer_type_r): Check return value of\n\tcomposite_pointer_type_r for error_mark_node.\n\n/testsuite\n2011-10-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50858\n\t* g++.dg/overload/operator5.C: New.\n\n/cp\n2011-10-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50861\n\t* pt.c (tsubst_copy_and_build): Check return value of\n\ttsubst_copy_and_build for error_mark_node.\n\n/testsuite\n2011-10-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50861\n\t* g++.dg/template/crash108.C: New.\n\nFrom-SVN: r180430", "tree": {"sha": "2959658d0e342d3e47df32f4bf5915d78a8cd004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2959658d0e342d3e47df32f4bf5915d78a8cd004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df9ee5c8290238799b2e808b67c21aa8164b51f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df9ee5c8290238799b2e808b67c21aa8164b51f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df9ee5c8290238799b2e808b67c21aa8164b51f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df9ee5c8290238799b2e808b67c21aa8164b51f5/comments", "author": null, "committer": null, "parents": [{"sha": "4bc514327182abb75dc040608bdabce201f2990c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc514327182abb75dc040608bdabce201f2990c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc514327182abb75dc040608bdabce201f2990c"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "58c00de43d410325eab272542dd21e5306358449", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9ee5c8290238799b2e808b67c21aa8164b51f5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9ee5c8290238799b2e808b67c21aa8164b51f5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=df9ee5c8290238799b2e808b67c21aa8164b51f5", "patch": "@@ -1,3 +1,15 @@\n+2011-10-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50858\n+\t* typeck.c (composite_pointer_type_r): Check return value of\n+\tcomposite_pointer_type_r for error_mark_node.\n+\n+2011-10-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50861\n+\t* pt.c (tsubst_copy_and_build): Check return value of\n+\ttsubst_copy_and_build for error_mark_node.\n+\n 2011-10-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50841"}, {"sha": "79da3730502c0bf5791e65844c2d87c35506675c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9ee5c8290238799b2e808b67c21aa8164b51f5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9ee5c8290238799b2e808b67c21aa8164b51f5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=df9ee5c8290238799b2e808b67c21aa8164b51f5", "patch": "@@ -13511,6 +13511,9 @@ tsubst_copy_and_build (tree t,\n \t\ttree unq = (tsubst_copy_and_build\n \t\t\t    (function, args, complain, in_decl, true,\n \t\t\t     integral_constant_expression_p));\n+\t\tif (unq == error_mark_node)\n+\t\t  return error_mark_node;\n+\n \t\tif (unq != function)\n \t\t  {\n \t\t    tree fn = unq;"}, {"sha": "e583faaca7da1d9824bb98882f0ce3143fea88de", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9ee5c8290238799b2e808b67c21aa8164b51f5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9ee5c8290238799b2e808b67c21aa8164b51f5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=df9ee5c8290238799b2e808b67c21aa8164b51f5", "patch": "@@ -510,8 +510,12 @@ composite_pointer_type_r (tree t1, tree t2,\n \t    && TREE_CODE (pointee2) == POINTER_TYPE)\n \t   || (TYPE_PTR_TO_MEMBER_P (pointee1)\n \t       && TYPE_PTR_TO_MEMBER_P (pointee2)))\n-    result_type = composite_pointer_type_r (pointee1, pointee2, operation,\n-\t\t\t\t\t    complain);\n+    {\n+      result_type = composite_pointer_type_r (pointee1, pointee2, operation,\n+\t\t\t\t\t      complain);\n+      if (result_type == error_mark_node)\n+\treturn error_mark_node;\n+    }\n   else\n     {\n       if (complain & tf_error)"}, {"sha": "40e1de1b6722ade06356b9e82d720f15f9f70da5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9ee5c8290238799b2e808b67c21aa8164b51f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9ee5c8290238799b2e808b67c21aa8164b51f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df9ee5c8290238799b2e808b67c21aa8164b51f5", "patch": "@@ -1,3 +1,13 @@\n+2011-10-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50858\n+\t* g++.dg/overload/operator5.C: New.\n+\n+2011-10-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50861\n+\t* g++.dg/template/crash108.C: New.\n+\n 2011-10-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/50596"}, {"sha": "574defb891b294f71e745f6f5080497475947c9e", "filename": "gcc/testsuite/g++.dg/overload/operator5.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9ee5c8290238799b2e808b67c21aa8164b51f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9ee5c8290238799b2e808b67c21aa8164b51f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Foperator5.C?ref=df9ee5c8290238799b2e808b67c21aa8164b51f5", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/50858\n+\n+class String {\n+   typedef struct ImplicitConversionFromWTFStringToBoolDisallowedA* \n+   (String::*UnspecifiedBoolTypeA);\n+   typedef struct ImplicitConversionFromWTFStringToBoolDisallowedB* \n+   (String::*UnspecifiedBoolTypeB);\n+   operator UnspecifiedBoolTypeA() const;\n+   operator UnspecifiedBoolTypeB() const;\n+};\n+inline bool equalIgnoringCase(const String& a, const String& b) { }\n+inline bool equalPossiblyIgnoringCase(const String& a, \n+                                      const String& b,\n+                                      bool ignoreCase) {\n+  return ignoreCase ? equalIgnoringCase(a, b) : (a == b); } // { dg-error \"ambiguous\" }\n+// { dg-message \"note\" { target *-*-* } 15 }"}, {"sha": "0b25fde6e380d6019917dd745d6e10f229522a3a", "filename": "gcc/testsuite/g++.dg/template/crash108.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9ee5c8290238799b2e808b67c21aa8164b51f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash108.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9ee5c8290238799b2e808b67c21aa8164b51f5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash108.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash108.C?ref=df9ee5c8290238799b2e808b67c21aa8164b51f5", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/50861\n+\n+template<class T> struct A {A(int b=k(0));}; // { dg-error \"arguments\" }\n+void f(int k){A<int> a;} // // { dg-error \"parameter|declared\" }\n+// { dg-message \"note\" { target *-*-* } 3 }"}]}