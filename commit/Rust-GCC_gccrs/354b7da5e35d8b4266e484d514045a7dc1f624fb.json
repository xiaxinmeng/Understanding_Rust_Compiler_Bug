{"sha": "354b7da5e35d8b4266e484d514045a7dc1f624fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU0YjdkYTVlMzVkOGI0MjY2ZTQ4NGQ1MTQwNDVhN2RjMWY2MjRmYg==", "commit": {"author": {"name": "Dara Hazeghi", "email": "dhazeghi@yahoo.com", "date": "2004-01-31T04:18:15Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-01-31T04:18:15Z"}, "message": "re PR bootstrap/9249 (bootstrap fails with --enable-__cxa-atexit on Solaris)\n\n2004-01-30  Dara Hazeghi  <dhazeghi@yahoo.com>\n\n        PR bootstrap/9249\n        * doc/install.texi: document --enable-__cxa_atexit option.\n        * configure.ac: Disable __cxa_atexit if not supported.\n        * configure: Regenerate.\n\nFrom-SVN: r77023", "tree": {"sha": "2a53ef1565cb74aa4f599b89db3379d971e05705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a53ef1565cb74aa4f599b89db3379d971e05705"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/354b7da5e35d8b4266e484d514045a7dc1f624fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354b7da5e35d8b4266e484d514045a7dc1f624fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/354b7da5e35d8b4266e484d514045a7dc1f624fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354b7da5e35d8b4266e484d514045a7dc1f624fb/comments", "author": null, "committer": null, "parents": [{"sha": "9781b6dabd95da9b390eaffe878fb883d10d9e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9781b6dabd95da9b390eaffe878fb883d10d9e74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9781b6dabd95da9b390eaffe878fb883d10d9e74"}], "stats": {"total": 104, "additions": 99, "deletions": 5}, "files": [{"sha": "6fcea98ff806a41212e821b6f04d2cef8776ebc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354b7da5e35d8b4266e484d514045a7dc1f624fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354b7da5e35d8b4266e484d514045a7dc1f624fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=354b7da5e35d8b4266e484d514045a7dc1f624fb", "patch": "@@ -1,3 +1,10 @@\n+2004-01-30  Dara Hazeghi  <dhazeghi@yahoo.com>\n+\n+\tPR bootstrap/9249\n+\t* doc/install.texi: document --enable-__cxa_atexit option.\n+\t* configure.ac: Disable __cxa_atexit if not supported.\n+\t* configure: Regenerate.\n+\n 2003-01-30  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* ggc-zone.c (ggc_free): New function."}, {"sha": "a1001bdaa3a51bd711fd7800e1c806a405e8e788", "filename": "gcc/configure", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354b7da5e35d8b4266e484d514045a7dc1f624fb/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354b7da5e35d8b4266e484d514045a7dc1f624fb/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=354b7da5e35d8b4266e484d514045a7dc1f624fb", "patch": "@@ -8764,11 +8764,88 @@ fi\n \n if test x$enable___cxa_atexit = xyes || \\\n    test x$enable___cxa_atexit = x -a x$default_use_cxa_atexit = xyes; then\n+   echo \"$as_me:$LINENO: checking for __cxa_atexit\" >&5\n+echo $ECHO_N \"checking for __cxa_atexit... $ECHO_C\" >&6\n+if test \"${ac_cv_func___cxa_atexit+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+#line $LINENO \"configure\"\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char __cxa_atexit (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char __cxa_atexit ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub___cxa_atexit) || defined (__stub_____cxa_atexit)\n+choke me\n+#else\n+char (*f) () = __cxa_atexit;\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+return f != __cxa_atexit;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+         { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_func___cxa_atexit=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_func___cxa_atexit=no\n+fi\n+rm -f conftest.$ac_objext conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_func___cxa_atexit\" >&5\n+echo \"${ECHO_T}$ac_cv_func___cxa_atexit\" >&6\n+if test $ac_cv_func___cxa_atexit = yes; then\n \n cat >>confdefs.h <<\\_ACEOF\n #define DEFAULT_USE_CXA_ATEXIT 1\n _ACEOF\n \n+else\n+  echo \"__cxa_atexit can't be enabled on this target\"\n+fi\n+\n fi\n \n # Look for a file containing extra machine modes."}, {"sha": "33549b0b462b7eb90cd7372f9df34307d6ef2e82", "filename": "gcc/configure.ac", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354b7da5e35d8b4266e484d514045a7dc1f624fb/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354b7da5e35d8b4266e484d514045a7dc1f624fb/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=354b7da5e35d8b4266e484d514045a7dc1f624fb", "patch": "@@ -1136,11 +1136,13 @@ fi\n \n if test x$enable___cxa_atexit = xyes || \\\n    test x$enable___cxa_atexit = x -a x$default_use_cxa_atexit = xyes; then\n-  AC_DEFINE(DEFAULT_USE_CXA_ATEXIT, 1,\n-  [Define if you want to use __cxa_atexit, rather than atexit, to\n-   register C++ destructors for local statics and global objects.\n-   This is essential for fully standards-compliant handling of\n-   destructors, but requires __cxa_atexit in libc.])\n+   AC_CHECK_FUNC(__cxa_atexit,\n+\t[AC_DEFINE(DEFAULT_USE_CXA_ATEXIT, 1,\n+   \t[Define if you want to use __cxa_atexit, rather than atexit, to\n+   \tregister C++ destructors for local statics and global objects.\n+   \tThis is essential for fully standards-compliant handling of\n+   \tdestructors, but requires __cxa_atexit in libc.])],\n+\techo \"__cxa_atexit can't be enabled on this target\")\n fi\n \n # Look for a file containing extra machine modes."}, {"sha": "1f53a99c715a97c9389efff64c640d5bef5dd616", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354b7da5e35d8b4266e484d514045a7dc1f624fb/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354b7da5e35d8b4266e484d514045a7dc1f624fb/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=354b7da5e35d8b4266e484d514045a7dc1f624fb", "patch": "@@ -939,6 +939,14 @@ option will adjust the ABI for AltiVec enhancements, as well as generate\n AltiVec code when appropriate.  This option is only available for\n PowerPC systems.\n \n+@item --enable-__cxa_atexit\n+Define if you want to use __cxa_atexit, rather than atexit, to\n+register C++ destructors for local statics and global objects.\n+This is essential for fully standards-compliant handling of\n+destructors, but requires __cxa_atexit in libc. This option is currently\n+only available on sytems with GNU libc. When enabled, this will cause\n+@option{-fuse-cxa-exit} to be passed by default.\n+\n @item --enable-target-optspace\n Specify that target\n libraries should be optimized for code space instead of code speed."}]}