{"sha": "7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E4ZTA3YzdkMWJjODUyNmUwZDY3Y2I3YWUwZGM1MWJhNWI5MGY2OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2004-05-03T05:31:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2004-05-03T05:31:45Z"}, "message": "optabs.h (enum optab_index): Add new OTI_expm1.\n\n2004-05-03  Uros Bizjak  <uros@kss-loka.si>\n\n\t* optabs.h (enum optab_index): Add new OTI_expm1.\n\t(expm1_optab): Define corresponding macro.\n\t* optabs.c (init_optabs): Initialize expm1_optab.\n\t* genopinit.c (optabs): Implement expm1_optab using expm1?f2\n\tpatterns.\n\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_EXPM1{,F,L}\n\tusing expm1_optab.\n\t(expand_builtin): Expand BUILT_IN_EXPM1{,F,L} using\n\texpand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n\n\t* config/i386/i386.md (expm1df2, expm1sf2, expm1xf2): New expanders\n\tto implement expm1, expm1f and expm1l built-ins as inline x87\n\tintrinsics.\n\ntestsuite:\n\n        * gcc.dg/builtins-34.c: Also check expm1*.\n\nFrom-SVN: r81425", "tree": {"sha": "c1a89b48d29d70f789473f5c7def695357e909f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1a89b48d29d70f789473f5c7def695357e909f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/comments", "author": null, "committer": null, "parents": [{"sha": "5f2b959917e0d13044851e6165e9c17d4f4b3a0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f2b959917e0d13044851e6165e9c17d4f4b3a0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f2b959917e0d13044851e6165e9c17d4f4b3a0f"}], "stats": {"total": 160, "additions": 158, "deletions": 2}, "files": [{"sha": "e907ac3a52d29676c6112dec21a2f79b4edfd21c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "patch": "@@ -1,3 +1,19 @@\n+2004-05-03  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* optabs.h (enum optab_index): Add new OTI_expm1.\n+\t(expm1_optab): Define corresponding macro.\n+\t* optabs.c (init_optabs): Initialize expm1_optab.\n+\t* genopinit.c (optabs): Implement expm1_optab using expm1?f2\n+\tpatterns.\n+\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_EXPM1{,F,L}\n+\tusing expm1_optab.\n+\t(expand_builtin): Expand BUILT_IN_EXPM1{,F,L} using\n+\texpand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n+\n+\t* config/i386/i386.md (expm1df2, expm1sf2, expm1xf2): New expanders\n+\tto implement expm1, expm1f and expm1l built-ins as inline x87\n+\tintrinsics.\n+\n 2004-05-02  Alexandre Oliva  <aoliva@redhat.com>\n \n \t2003-11-19  Richard Sandiford  <rsandifo@redhat.com>"}, {"sha": "c42a42392df495deb92e3b5ca6d018ee4216c8cf", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "patch": "@@ -1600,6 +1600,10 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n     case BUILT_IN_EXP2F:\n     case BUILT_IN_EXP2L:\n       errno_set = true; builtin_optab = exp2_optab; break;\n+    case BUILT_IN_EXPM1:\n+    case BUILT_IN_EXPM1F:\n+    case BUILT_IN_EXPM1L:\n+      errno_set = true; builtin_optab = expm1_optab; break;\n     case BUILT_IN_LOGB:\n     case BUILT_IN_LOGBF:\n     case BUILT_IN_LOGBL:\n@@ -5292,6 +5296,9 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_EXP2:\n     case BUILT_IN_EXP2F:\n     case BUILT_IN_EXP2L:\n+    case BUILT_IN_EXPM1:\n+    case BUILT_IN_EXPM1F:\n+    case BUILT_IN_EXPM1L:\n     case BUILT_IN_LOGB:\n     case BUILT_IN_LOGBF:\n     case BUILT_IN_LOGBL:"}, {"sha": "75d153d6c5995089396e1b0bddc43496cad4d430", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "patch": "@@ -15982,6 +15982,112 @@\n     operands[i] = gen_reg_rtx (XFmode);\n   emit_move_insn (operands[6], CONST1_RTX (XFmode));  /* fld1 */\n })\n+\n+(define_expand \"expm1df2\"\n+  [(set (match_dup 2)\n+\t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (set (match_dup 4) (mult:XF (match_dup 2) (match_dup 3)))\n+   (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_FRNDINT))\n+   (set (match_dup 6) (minus:XF (match_dup 4) (match_dup 5)))\n+   (set (match_dup 7) (unspec:XF [(match_dup 6)] UNSPEC_F2XM1))\n+   (parallel [(set (match_dup 8)\n+\t\t   (unspec:XF [(match_dup 7) (match_dup 5)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t\t   (set (match_dup 9)\n+\t\t   (unspec:XF [(match_dup 7) (match_dup 5)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (parallel [(set (match_dup 11)\n+\t\t   (unspec:XF [(match_dup 10) (match_dup 9)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 12)\n+\t\t   (unspec:XF [(match_dup 10) (match_dup 9)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (set (match_dup 13) (minus:XF (match_dup 11) (match_dup 10)))\n+   (set (match_dup 14) (plus:XF (match_dup 13) (match_dup 8)))\n+   (set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float_truncate:DF (match_dup 14)))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+  int i;\n+\n+  for (i=2; i<15; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (5); /* fldl2e */\n+  emit_move_insn (operands[3], temp);\n+  emit_move_insn (operands[10], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"expm1sf2\"\n+  [(set (match_dup 2)\n+\t(float_extend:XF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (set (match_dup 4) (mult:XF (match_dup 2) (match_dup 3)))\n+   (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_FRNDINT))\n+   (set (match_dup 6) (minus:XF (match_dup 4) (match_dup 5)))\n+   (set (match_dup 7) (unspec:XF [(match_dup 6)] UNSPEC_F2XM1))\n+   (parallel [(set (match_dup 8)\n+\t\t   (unspec:XF [(match_dup 7) (match_dup 5)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t\t   (set (match_dup 9)\n+\t\t   (unspec:XF [(match_dup 7) (match_dup 5)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (parallel [(set (match_dup 11)\n+\t\t   (unspec:XF [(match_dup 10) (match_dup 9)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 12)\n+\t\t   (unspec:XF [(match_dup 10) (match_dup 9)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (set (match_dup 13) (minus:XF (match_dup 11) (match_dup 10)))\n+   (set (match_dup 14) (plus:XF (match_dup 13) (match_dup 8)))\n+   (set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float_truncate:SF (match_dup 14)))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+  int i;\n+\n+  for (i=2; i<15; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (5); /* fldl2e */\n+  emit_move_insn (operands[3], temp);\n+  emit_move_insn (operands[10], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"expm1xf2\"\n+  [(set (match_dup 3) (mult:XF (match_operand:XF 1 \"register_operand\" \"\")\n+\t\t\t       (match_dup 2)))\n+   (set (match_dup 4) (unspec:XF [(match_dup 3)] UNSPEC_FRNDINT))\n+   (set (match_dup 5) (minus:XF (match_dup 3) (match_dup 4)))\n+   (set (match_dup 6) (unspec:XF [(match_dup 5)] UNSPEC_F2XM1))\n+   (parallel [(set (match_dup 7)\n+\t\t   (unspec:XF [(match_dup 6) (match_dup 4)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t\t   (set (match_dup 8)\n+\t\t   (unspec:XF [(match_dup 6) (match_dup 4)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (parallel [(set (match_dup 10)\n+\t\t   (unspec:XF [(match_dup 9) (match_dup 8)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 11)\n+\t\t   (unspec:XF [(match_dup 9) (match_dup 8)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (set (match_dup 12) (minus:XF (match_dup 10) (match_dup 9)))\n+   (set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(plus:XF (match_dup 12) (match_dup 7)))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+  int i;\n+\n+  for (i=2; i<13; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (5); /* fldl2e */\n+  emit_move_insn (operands[2], temp);\n+  emit_move_insn (operands[9], CONST1_RTX (XFmode));  /* fld1 */\n+})\n \f\n ;; Block operation instructions\n "}, {"sha": "87934496b766bfbcdf88cfbfb50201460b0b9b50", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "patch": "@@ -130,6 +130,7 @@ static const char * const optabs[] =\n   \"exp_optab->handlers[$A].insn_code = CODE_FOR_$(exp$a2$)\",\n   \"exp10_optab->handlers[$A].insn_code = CODE_FOR_$(exp10$a2$)\",\n   \"exp2_optab->handlers[$A].insn_code = CODE_FOR_$(exp2$a2$)\",\n+  \"expm1_optab->handlers[$A].insn_code = CODE_FOR_$(expm1$a2$)\",\n   \"logb_optab->handlers[$A].insn_code = CODE_FOR_$(logb$a2$)\",\n   \"ilogb_optab->handlers[$A].insn_code = CODE_FOR_$(ilogb$a2$)\",\n   \"log_optab->handlers[$A].insn_code = CODE_FOR_$(log$a2$)\","}, {"sha": "1632ecfe8c9100148c3e7ea530520be9424dcb7c", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "patch": "@@ -5386,6 +5386,7 @@ init_optabs (void)\n   exp_optab = init_optab (UNKNOWN);\n   exp10_optab = init_optab (UNKNOWN);\n   exp2_optab = init_optab (UNKNOWN);\n+  expm1_optab = init_optab (UNKNOWN);\n   logb_optab = init_optab (UNKNOWN);\n   ilogb_optab = init_optab (UNKNOWN);\n   log_optab = init_optab (UNKNOWN);"}, {"sha": "a7aac1934f3e2dcd54406bb61971aae3f4ff57fe", "filename": "gcc/optabs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "patch": "@@ -164,6 +164,8 @@ enum optab_index\n   OTI_exp10,\n   /* Base-2 Exponential */\n   OTI_exp2,\n+  /* Exponential - 1*/\n+  OTI_expm1,\n   /* Radix-independent exponent */\n   OTI_logb,\n   OTI_ilogb,\n@@ -281,6 +283,7 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define exp_optab (optab_table[OTI_exp])\n #define exp10_optab (optab_table[OTI_exp10])\n #define exp2_optab (optab_table[OTI_exp2])\n+#define expm1_optab (optab_table[OTI_expm1])\n #define logb_optab (optab_table[OTI_logb])\n #define ilogb_optab (optab_table[OTI_ilogb])\n #define log_optab (optab_table[OTI_log])"}, {"sha": "5735a6c55483a2b52ec894ad977a70c4ecc7fc22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "patch": "@@ -1,3 +1,7 @@\n+2004-05-03  Uros Bizjak  <uros@kss-loka.si>\n+\n+        * gcc.dg/builtins-34.c: Also check expm1*.\n+\n 2004-05-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-integral-1.c: Reorg and add more cases."}, {"sha": "0055f329dd532c7fa9c6ce57f04d4063f11b36bd", "filename": "gcc/testsuite/gcc.dg/builtins-34.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c?ref=7a8e07c7d1bc8526e0d67cb7ae0dc51ba5b90f68", "patch": "@@ -1,7 +1,7 @@\n /* Copyright (C) 2004 Free Software Foundation.\n \n-   Check that exp10, exp10f, exp10l, exp2, exp2f, exp2l, pow10, pow10f\n-   and pow10l built-in functions compile.\n+   Check that exp10, exp10f, exp10l, exp2, exp2f, exp2l, pow10, pow10f,\n+   pow10l, expm1, expm1f and expm1l built-in functions compile.\n \n    Written by Uros Bizjak, 13th February 2004.  */\n \n@@ -11,12 +11,15 @@\n extern double exp10(double);\n extern double exp2(double);\n extern double pow10(double);\n+extern double expm1(double);\n extern float exp10f(float);\n extern float exp2f(float);\n extern float pow10f(float);\n+extern float expm1f(float);\n extern long double exp10l(long double);\n extern long double exp2l(long double);\n extern long double pow10l(long double);\n+extern long double expm1l(long double);\n \n \n double test1(double x)\n@@ -34,6 +37,11 @@ double test3(double x)\n   return pow10(x);\n }\n \n+double test4(double x)\n+{\n+  return expm1(x);\n+}\n+\n float test1f(float x)\n {\n   return exp10f(x);\n@@ -49,6 +57,11 @@ float test3f(float x)\n   return pow10f(x);\n }\n \n+float test4f(float x)\n+{\n+  return expm1f(x);\n+}\n+\n long double test1l(long double x)\n {\n   return exp10l(x);\n@@ -64,3 +77,8 @@ long double test3l(long double x)\n   return pow10l(x);\n }\n \n+long double test4l(long double x)\n+{\n+  return expm1l(x);\n+}\n+"}]}