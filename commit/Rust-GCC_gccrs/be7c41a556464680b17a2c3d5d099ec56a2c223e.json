{"sha": "be7c41a556464680b17a2c3d5d099ec56a2c223e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU3YzQxYTU1NjQ2NDY4MGIxN2EyYzNkNWQwOTllYzU2YTJjMjIzZQ==", "commit": {"author": {"name": "Omar Tahir", "email": "omar.tahir@arm.com", "date": "2020-07-01T20:56:16Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-07-01T20:56:16Z"}, "message": "aarch64: Fix missing BTI instruction in trampolines\n\nIf two functions require trampolines, and the first has BTI enabled\nwhile the second doesn't, the generated template will be lacking\na BTI instruction.  This patch fixes this by always adding a BTI\ninstruction, which is safe as BTI instructions are ignored on\nunsupported architecture versions.\n\n2020-07-01  Omar Tahir  <omar.tahir@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_asm_trampoline_template): Always\n\tgenerate a BTI instruction.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/bti-4.c: New test.", "tree": {"sha": "401276a98cfa498e34f82f17028af3f3102e6efe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/401276a98cfa498e34f82f17028af3f3102e6efe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be7c41a556464680b17a2c3d5d099ec56a2c223e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7c41a556464680b17a2c3d5d099ec56a2c223e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7c41a556464680b17a2c3d5d099ec56a2c223e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7c41a556464680b17a2c3d5d099ec56a2c223e/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "553c6572061f6f9ef92514e8f13de95d509ad614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553c6572061f6f9ef92514e8f13de95d509ad614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/553c6572061f6f9ef92514e8f13de95d509ad614"}], "stats": {"total": 90, "additions": 68, "deletions": 22}, "files": [{"sha": "24c31c2d02cdb779be16d2b5427bb1ecc5d9719f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7c41a556464680b17a2c3d5d099ec56a2c223e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7c41a556464680b17a2c3d5d099ec56a2c223e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=be7c41a556464680b17a2c3d5d099ec56a2c223e", "patch": "@@ -10833,40 +10833,26 @@ aarch64_return_addr (int count, rtx frame ATTRIBUTE_UNUSED)\n   return get_hard_reg_initial_val (Pmode, LR_REGNUM);\n }\n \n-\n static void\n aarch64_asm_trampoline_template (FILE *f)\n {\n-  int offset1 = 16;\n-  int offset2 = 20;\n-\n-  if (aarch64_bti_enabled ())\n-    {\n-      asm_fprintf (f, \"\\thint\\t34 // bti c\\n\");\n-      offset1 -= 4;\n-      offset2 -= 4;\n-    }\n+  /* Even if the current function doesn't have branch protection, some\n+     later function might, so since this template is only generated once\n+     we have to add a BTI just in case. */\n+  asm_fprintf (f, \"\\thint\\t34 // bti c\\n\");\n \n   if (TARGET_ILP32)\n     {\n-      asm_fprintf (f, \"\\tldr\\tw%d, .+%d\\n\", IP1_REGNUM - R0_REGNUM, offset1);\n-      asm_fprintf (f, \"\\tldr\\tw%d, .+%d\\n\", STATIC_CHAIN_REGNUM - R0_REGNUM,\n-\t\t   offset1);\n+      asm_fprintf (f, \"\\tldr\\tw%d, .+12\\n\", IP1_REGNUM - R0_REGNUM);\n+      asm_fprintf (f, \"\\tldr\\tw%d, .+12\\n\", STATIC_CHAIN_REGNUM - R0_REGNUM);\n     }\n   else\n     {\n-      asm_fprintf (f, \"\\tldr\\t%s, .+%d\\n\", reg_names [IP1_REGNUM], offset1);\n-      asm_fprintf (f, \"\\tldr\\t%s, .+%d\\n\", reg_names [STATIC_CHAIN_REGNUM],\n-\t\t   offset2);\n+      asm_fprintf (f, \"\\tldr\\t%s, .+12\\n\", reg_names [IP1_REGNUM]);\n+      asm_fprintf (f, \"\\tldr\\t%s, .+16\\n\", reg_names [STATIC_CHAIN_REGNUM]);\n     }\n   asm_fprintf (f, \"\\tbr\\t%s\\n\", reg_names [IP1_REGNUM]);\n \n-  /* The trampoline needs an extra padding instruction.  In case if BTI is\n-     enabled the padding instruction is replaced by the BTI instruction at\n-     the beginning.  */\n-  if (!aarch64_bti_enabled ())\n-    assemble_aligned_integer (4, const0_rtx);\n-\n   assemble_aligned_integer (POINTER_BYTES, const0_rtx);\n   assemble_aligned_integer (POINTER_BYTES, const0_rtx);\n }"}, {"sha": "28495a5c199b736c1424e59098c154b05d4924f4", "filename": "gcc/testsuite/gcc.target/aarch64/bti-4.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7c41a556464680b17a2c3d5d099ec56a2c223e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbti-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7c41a556464680b17a2c3d5d099ec56a2c223e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbti-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fbti-4.c?ref=be7c41a556464680b17a2c3d5d099ec56a2c223e", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do compile } */\n+/* If configured with --enable-standard-branch-protection, disable it. */\n+/* { dg-additional-options \"-mbranch-protection=none\" { target { default_branch_protection } } } */\n+\n+void f1 (void *);\n+void f2 (void *);\n+void f3 (void *, void (*)(void *));\n+\n+int\n+retbr_trampolines (void *a, int b)\n+{\n+  if (!b)\n+    {\n+      f1 (a);\n+      return 1;\n+    }\n+  if (b)\n+    {\n+      /* Suppress \"ISO C forbids nested functions\" warning. */\n+      _Pragma(\"GCC diagnostic push\")\n+      _Pragma(\"GCC diagnostic ignored \\\"-Wpedantic\\\"\")\n+      void retbr_tramp_internal (void *c)\n+      {\n+      _Pragma(\"GCC diagnostic pop\")\n+        if (c == a)\n+          f2 (c);\n+      }\n+      f3 (a, retbr_tramp_internal);\n+    }\n+  return 0;\n+}\n+\n+__attribute__((target(\"branch-protection=bti,arch=armv8.3-a\")))\n+int\n+retbr_trampolines2 (void *a, int b)\n+{\n+  if (!b)\n+    {\n+      f1 (a);\n+      return 1;\n+    }\n+  if (b)\n+    {\n+      /* Suppress \"ISO C forbids nested functions\" warning. */\n+      _Pragma(\"GCC diagnostic push\")\n+      _Pragma(\"GCC diagnostic ignored \\\"-Wpedantic\\\"\")\n+      __attribute__((target(\"branch-protection=bti,arch=armv8.3-a\")))\n+      void retbr_tramp_internal2 (void *c)\n+      {\n+      _Pragma(\"GCC diagnostic pop\")\n+        if (c == a)\n+          f2 (c);\n+      }\n+      f3 (a, retbr_tramp_internal2);\n+    }\n+  return 0;\n+}\n+\n+/* Trampoline should have BTI C. */\n+/* { dg-final { scan-assembler \"\\.LTRAMP0:\\n\\thint\\t34\" } } */"}]}