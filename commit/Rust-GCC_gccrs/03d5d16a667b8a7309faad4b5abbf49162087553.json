{"sha": "03d5d16a667b8a7309faad4b5abbf49162087553", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNkNWQxNmE2NjdiOGE3MzA5ZmFhZDRiNWFiYmY0OTE2MjA4NzU1Mw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-01-12T11:23:14Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-01-12T11:23:14Z"}, "message": "[ARM][cleanup] Use R0_REGNUM and R1_REGNUM instead of 0 and 1 where appropriate\n\n\t* config/arm/arm.c (arm_load_tp): Use R0_REGNUM instead of constant 0\n\tin gen_rtx_REG.\n\t(arm_tls_descseq_addr): Likewise.\n\t(arm_gen_movmemqi): Likewise.\n\t(arm_expand_epilogue_apcs_frame): Likewise.\n\t(arm_expand_epilogue): Likewise.\n\t(arm_expand_prologue): Likewise.  Use R1_REGNUM instead of constant 1\n\tin gen_rtx_REG.\n\nFrom-SVN: r219459", "tree": {"sha": "26d42b926d44d22dfb3cd4c2e987bd091d17f34f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26d42b926d44d22dfb3cd4c2e987bd091d17f34f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03d5d16a667b8a7309faad4b5abbf49162087553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d5d16a667b8a7309faad4b5abbf49162087553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03d5d16a667b8a7309faad4b5abbf49162087553", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d5d16a667b8a7309faad4b5abbf49162087553/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3aeec0aaa0969087172adb5d30db47597063c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3aeec0aaa0969087172adb5d30db47597063c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3aeec0aaa0969087172adb5d30db47597063c21"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "9679ca5bd5a34e927d9c17b2ec66f3b799187f7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d5d16a667b8a7309faad4b5abbf49162087553/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d5d16a667b8a7309faad4b5abbf49162087553/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03d5d16a667b8a7309faad4b5abbf49162087553", "patch": "@@ -1,3 +1,14 @@\n+2014-01-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.c (arm_load_tp): Use R0_REGNUM instead of constant 0\n+\tin gen_rtx_REG.\n+\t(arm_tls_descseq_addr): Likewise.\n+\t(arm_gen_movmemqi): Likewise.\n+\t(arm_expand_epilogue_apcs_frame): Likewise.\n+\t(arm_expand_epilogue): Likewise.\n+\t(arm_expand_prologue): Likewise.  Use R1_REGNUM instead of constant 1\n+\tin gen_rtx_REG.\n+\n 2015-01-12  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/64550"}, {"sha": "b9d7613ba3204145cf492c93ee4839db0ba9425d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03d5d16a667b8a7309faad4b5abbf49162087553/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03d5d16a667b8a7309faad4b5abbf49162087553/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=03d5d16a667b8a7309faad4b5abbf49162087553", "patch": "@@ -7445,7 +7445,7 @@ arm_load_tp (rtx target)\n \n       emit_insn (gen_load_tp_soft ());\n \n-      tmp = gen_rtx_REG (SImode, 0);\n+      tmp = gen_rtx_REG (SImode, R0_REGNUM);\n       emit_move_insn (target, tmp);\n     }\n   return target;\n@@ -7509,13 +7509,13 @@ arm_tls_descseq_addr (rtx x, rtx reg)\n \t\t\t\t       gen_rtx_CONST (VOIDmode, label),\n \t\t\t\t       GEN_INT (!TARGET_ARM)),\n \t\t\t    UNSPEC_TLS);\n-  rtx reg0 = load_tls_operand (sum, gen_rtx_REG (SImode, 0));\n+  rtx reg0 = load_tls_operand (sum, gen_rtx_REG (SImode, R0_REGNUM));\n \n   emit_insn (gen_tlscall (x, labelno));\n   if (!reg)\n     reg = gen_reg_rtx (SImode);\n   else\n-    gcc_assert (REGNO (reg) != 0);\n+    gcc_assert (REGNO (reg) != R0_REGNUM);\n \n   emit_move_insn (reg, reg0);\n \n@@ -14673,7 +14673,7 @@ arm_gen_movmemqi (rtx *operands)\n \t  else\n \t    {\n \t      mem = adjust_automodify_address (dstbase, SImode, dst, dstoffset);\n-\t      emit_move_insn (mem, gen_rtx_REG (SImode, 0));\n+\t      emit_move_insn (mem, gen_rtx_REG (SImode, R0_REGNUM));\n \t      if (last_bytes != 0)\n \t\t{\n \t\t  emit_insn (gen_addsi3 (dst, dst, GEN_INT (4)));\n@@ -21106,8 +21106,8 @@ arm_expand_prologue (void)\n \t Just tell it we saved SP in r0.  */\n       gcc_assert (TARGET_THUMB2 && !arm_arch_notm && args_to_push == 0);\n \n-      r0 = gen_rtx_REG (SImode, 0);\n-      r1 = gen_rtx_REG (SImode, 1);\n+      r0 = gen_rtx_REG (SImode, R0_REGNUM);\n+      r1 = gen_rtx_REG (SImode, R1_REGNUM);\n \n       insn = emit_insn (gen_movsi (r0, stack_pointer_rtx));\n       RTX_FRAME_RELATED_P (insn) = 1;\n@@ -24880,7 +24880,7 @@ arm_expand_epilogue_apcs_frame (bool really_return)\n     /* Restore the original stack pointer.  Before prologue, the stack was\n        realigned and the original stack pointer saved in r0.  For details,\n        see comment in arm_expand_prologue.  */\n-    emit_insn (gen_movsi (stack_pointer_rtx, gen_rtx_REG (SImode, 0)));\n+    emit_insn (gen_movsi (stack_pointer_rtx, gen_rtx_REG (SImode, R0_REGNUM)));\n \n   emit_jump_insn (simple_return_rtx);\n }\n@@ -25162,7 +25162,7 @@ arm_expand_epilogue (bool really_return)\n     /* Restore the original stack pointer.  Before prologue, the stack was\n        realigned and the original stack pointer saved in r0.  For details,\n        see comment in arm_expand_prologue.  */\n-    emit_insn (gen_movsi (stack_pointer_rtx, gen_rtx_REG (SImode, 0)));\n+    emit_insn (gen_movsi (stack_pointer_rtx, gen_rtx_REG (SImode, R0_REGNUM)));\n \n   emit_jump_insn (simple_return_rtx);\n }"}]}