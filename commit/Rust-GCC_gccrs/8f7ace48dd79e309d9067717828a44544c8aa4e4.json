{"sha": "8f7ace48dd79e309d9067717828a44544c8aa4e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY3YWNlNDhkZDc5ZTMwOWQ5MDY3NzE3ODI4YTQ0NTQ0YzhhYTRlNA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-08-03T20:02:56Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-08-03T20:02:56Z"}, "message": "pretty-print.h: Adjust macro definitions.\n\n\t* pretty-print.h:   Adjust macro definitions.\n\t* pretty-print.c (pp_newline): Rename to pp_base_newline.\n\t(pp_character): Rename to pp_base_character.\n\t(pp_string): Rename to pp_base_string.\n\t* c-pretty-print.c (pp_buffer): Move to pretty-print.h\n\t(pp_newline):  Likewise.  Adjust.\n\t(pp_c_char): Adjust.\n\nFrom-SVN: r70128", "tree": {"sha": "1f285eab2b338e8cc3e087026d539a4361650434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f285eab2b338e8cc3e087026d539a4361650434"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f7ace48dd79e309d9067717828a44544c8aa4e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7ace48dd79e309d9067717828a44544c8aa4e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7ace48dd79e309d9067717828a44544c8aa4e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7ace48dd79e309d9067717828a44544c8aa4e4/comments", "author": null, "committer": null, "parents": [{"sha": "3f2fa4846ecf67496029dbcff97767397c97df8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2fa4846ecf67496029dbcff97767397c97df8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f2fa4846ecf67496029dbcff97767397c97df8a"}], "stats": {"total": 102, "additions": 52, "deletions": 50}, "files": [{"sha": "295f60eefdd86020d46d6b4dd2e41d3ad329b4c4", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7ace48dd79e309d9067717828a44544c8aa4e4/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7ace48dd79e309d9067717828a44544c8aa4e4/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=8f7ace48dd79e309d9067717828a44544c8aa4e4", "patch": "@@ -74,8 +74,6 @@ static void pp_c_type_id (c_pretty_printer, tree);\n static void pp_c_storage_class_specifier (c_pretty_printer, tree);\n static void pp_c_function_specifier (c_pretty_printer, tree);\n \n-#define pp_buffer(PP) pp_base (PP)->buffer\n-#define pp_newline(PP) (pp_newline) (pp_base (PP))\n \n \f\n /* Declarations.  */\n@@ -339,7 +337,7 @@ pp_c_char (c_pretty_printer ppi, int c)\n       break;\n     default:\n       if (ISPRINT (c))\n-\tpp_character (&ppi->base, c);\n+\tpp_character (ppi, c);\n       else\n \tpp_scalar (ppi, \"\\\\%03o\", (unsigned) c);\n       break;"}, {"sha": "9489d795b26eaf8e4edfe52e463a2293500064de", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7ace48dd79e309d9067717828a44544c8aa4e4/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7ace48dd79e309d9067717828a44544c8aa4e4/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=8f7ace48dd79e309d9067717828a44544c8aa4e4", "patch": "@@ -515,15 +515,15 @@ pp_verbatim (pretty_printer *pp, const char *msg, ...)\n \n /* Have PRETTY-PRINTER start a new line.  */\n void\n-pp_newline (pretty_printer *pp)\n+pp_base_newline (pretty_printer *pp)\n {\n   obstack_1grow (&pp->buffer->obstack, '\\n');\n   pp->buffer->line_length = 0;\n }\n \n /* Have PRETTY-PRINTER add a CHARACTER.  */\n void\n-pp_character (pretty_printer *pp, int c)\n+pp_base_character (pretty_printer *pp, int c)\n {\n   if (pp_is_wrapping_line (pp)\n       && pp_remaining_character_count_for_line (pp) <= 0)\n@@ -539,7 +539,7 @@ pp_character (pretty_printer *pp, int c)\n /* Append a STRING to the output area of PRETTY-PRINTER; the STRING may\n    be line-wrapped if in appropriate mode.  */\n void\n-pp_string (pretty_printer *pp, const char *str)\n+pp_base_string (pretty_printer *pp, const char *str)\n {\n   pp_maybe_wrap_text (pp, str, str + (str ? strlen (str) : 0));\n }"}, {"sha": "d55f94198b0bb991e6bb349b15178a4aa429a730", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 48, "deletions": 44, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7ace48dd79e309d9067717828a44544c8aa4e4/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7ace48dd79e309d9067717828a44544c8aa4e4/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=8f7ace48dd79e309d9067717828a44544c8aa4e4", "patch": "@@ -145,68 +145,72 @@ struct pretty_print_info\n   bool need_newline;\n };\n \n-#define pp_space(PP)            pp_character (pp_base (PP), ' ')\n-#define pp_left_paren(PP)       pp_character (pp_base (PP), '(')\n-#define pp_right_paren(PP)      pp_character (pp_base (PP), ')')\n-#define pp_left_bracket(PP)     pp_character (pp_base (PP), '[')\n-#define pp_right_bracket(PP)    pp_character (pp_base (PP), ']')\n-#define pp_left_brace(PP)       pp_character (pp_base (PP), '{')\n-#define pp_right_brace(PP)      pp_character (pp_base (PP), '}')\n-#define pp_semicolon(PP)        pp_character (pp_base (PP), ';')\n-#define pp_comma(PP)            pp_string (pp_base (PP), \", \")\n-#define pp_dot(PP)              pp_character (pp_base (PP), '.')\n-#define pp_colon(PP)            pp_character (pp_base (PP), ':')\n-#define pp_colon_colon(PP)      pp_string (pp_base (PP), \"::\")\n-#define pp_arrow(PP)            pp_string (pp_base (PP), \"->\")\n-#define pp_equal(PP)            pp_character (pp_base (PP), '=')\n-#define pp_question(PP)         pp_character (pp_base (PP), '?')\n-#define pp_bar(PP)              pp_character (pp_base (PP), '|')\n-#define pp_carret(PP)           pp_character (pp_base (PP), '^')\n-#define pp_ampersand(PP)        pp_character (pp_base (PP), '&')\n-#define pp_less(PP)             pp_character (pp_base (PP), '<')\n-#define pp_greater(PP)          pp_character (pp_base (PP), '>')\n-#define pp_plus(PP)             pp_character (pp_base (PP), '+')\n-#define pp_minus(PP)            pp_character (pp_base (PP), '-')\n-#define pp_star(PP)             pp_character (pp_base (PP), '*')\n-#define pp_slash(PP)            pp_character (pp_base (PP), '/')\n-#define pp_modulo(PP)           pp_character (pp_base (PP), '%')\n-#define pp_exclamation(PP)      pp_character (pp_base (PP), '!')\n-#define pp_complement(PP)       pp_character (pp_base (PP), '~')\n-#define pp_quote(PP)            pp_character (pp_base (PP), '\\'')\n-#define pp_backquote(PP)        pp_character (pp_base (PP), '`')\n-#define pp_doublequote(PP)      pp_character (pp_base (PP), '\"')\n+#define pp_character(PP, C)     pp_base_character (pp_base (PP), C)\n+#define pp_string(PP, S)        pp_base_string (pp_base (PP), S)\n+#define pp_newline(PP)          pp_base_newline (pp_base (PP))\n+#define pp_space(PP)            pp_character (PP, ' ')\n+#define pp_left_paren(PP)       pp_character (PP, '(')\n+#define pp_right_paren(PP)      pp_character (PP, ')')\n+#define pp_left_bracket(PP)     pp_character (PP, '[')\n+#define pp_right_bracket(PP)    pp_character (PP, ']')\n+#define pp_left_brace(PP)       pp_character (PP, '{')\n+#define pp_right_brace(PP)      pp_character (PP, '}')\n+#define pp_semicolon(PP)        pp_character (PP, ';')\n+#define pp_comma(PP)            pp_string (PP, \", \")\n+#define pp_dot(PP)              pp_character (PP, '.')\n+#define pp_colon(PP)            pp_character (PP, ':')\n+#define pp_colon_colon(PP)      pp_string (PP, \"::\")\n+#define pp_arrow(PP)            pp_string (PP, \"->\")\n+#define pp_equal(PP)            pp_character (PP, '=')\n+#define pp_question(PP)         pp_character (PP, '?')\n+#define pp_bar(PP)              pp_character (PP, '|')\n+#define pp_carret(PP)           pp_character (PP, '^')\n+#define pp_ampersand(PP)        pp_character (PP, '&')\n+#define pp_less(PP)             pp_character (PP, '<')\n+#define pp_greater(PP)          pp_character (PP, '>')\n+#define pp_plus(PP)             pp_character (PP, '+')\n+#define pp_minus(PP)            pp_character (PP, '-')\n+#define pp_star(PP)             pp_character (PP, '*')\n+#define pp_slash(PP)            pp_character (PP, '/')\n+#define pp_modulo(PP)           pp_character (PP, '%')\n+#define pp_exclamation(PP)      pp_character (PP, '!')\n+#define pp_complement(PP)       pp_character (PP, '~')\n+#define pp_quote(PP)            pp_character (PP, '\\'')\n+#define pp_backquote(PP)        pp_character (PP, '`')\n+#define pp_doublequote(PP)      pp_character (PP, '\"')\n #define pp_newline_and_indent(PP, N) \\\n   do {                               \\\n     pp_indentation (PP) += N;        \\\n     pp_newline (PP);                 \\\n   } while (0)\n #define pp_separate_with(PP, C)     \\\n    do {                             \\\n-     pp_character (pp_base (PP), C);\\\n+     pp_character (PP, C);          \\\n      pp_space (PP);                 \\\n    } while (0)\n-#define pp_scalar(PP, FORMAT, SCALAR)\t                            \\\n-  do\t\t\t\t\t\t\t\t    \\\n-    {\t\t\t\t\t\t\t\t    \\\n-      sprintf (pp_base (PP)->buffer->digit_buffer, FORMAT, SCALAR); \\\n-      pp_string (pp_base (PP), pp_base (PP)->buffer->digit_buffer); \\\n-    }\t\t\t\t\t\t\t\t    \\\n+#define pp_scalar(PP, FORMAT, SCALAR)\t                      \\\n+  do\t\t\t\t\t        \t      \\\n+    {\t\t\t         \t\t\t      \\\n+      sprintf (pp_buffer (PP)->digit_buffer, FORMAT, SCALAR); \\\n+      pp_string (PP, pp_buffer (PP)->digit_buffer);           \\\n+    }\t\t\t\t\t\t              \\\n   while (0)\n #define pp_decimal_int(PP, I)  pp_scalar (PP, \"%d\", I)\n #define pp_wide_integer(PP, I) \\\n    pp_scalar (PP, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) I)\n #define pp_pointer(PP, P)      pp_scalar (PP, \"%p\", P)\n \n-#define pp_identifier(PP, ID)  pp_string (pp_base (PP), ID)\n+#define pp_identifier(PP, ID)  pp_string (PP, ID)\n #define pp_tree_identifier(PP, T)                      \\\n   pp_append_text(pp_base (PP), IDENTIFIER_POINTER (T), \\\n                  IDENTIFIER_POINTER (T) + IDENTIFIER_LENGTH (T))\n \n-#define pp_unsupported_tree(PP, T) \\\n-  pp_verbatim (pp_base (PP), \"#`%s' not supported by %s#\",\\\n-                   tree_code_name[(int) TREE_CODE (T)], __FUNCTION__)\n+#define pp_unsupported_tree(PP, T)                         \\\n+  pp_verbatim (pp_base (PP), \"#`%s' not supported by %s#\", \\\n+               tree_code_name[(int) TREE_CODE (T)], __FUNCTION__)\n \n \n+#define pp_buffer(PP) pp_base (PP)->buffer\n /* Clients that directly derive from pretty_printer need to override\n    this macro to return a pointer to the base pretty_printer structrure.  */\n #define pp_base(PP) (PP)\n@@ -227,8 +231,8 @@ extern void pp_flush (pretty_printer *);\n extern void pp_format_text (pretty_printer *, text_info *);\n extern void pp_format_verbatim (pretty_printer *, text_info *);\n \n-extern void pp_newline (pretty_printer *);\n-extern void pp_character (pretty_printer *, int);\n-extern void pp_string (pretty_printer *, const char *);\n+extern void pp_base_newline (pretty_printer *);\n+extern void pp_base_character (pretty_printer *, int);\n+extern void pp_base_string (pretty_printer *, const char *);\n \n #endif /* GCC_PRETTY_PRINT_H */"}]}