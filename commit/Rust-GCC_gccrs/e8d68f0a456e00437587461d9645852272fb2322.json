{"sha": "e8d68f0a456e00437587461d9645852272fb2322", "node_id": "C_kwDOANBUbNoAKGU4ZDY4ZjBhNDU2ZTAwNDM3NTg3NDYxZDk2NDU4NTIyNzJmYjIzMjI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-12T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-12T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "67553147274688f662abf5da88fed89dbd536b2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67553147274688f662abf5da88fed89dbd536b2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8d68f0a456e00437587461d9645852272fb2322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d68f0a456e00437587461d9645852272fb2322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8d68f0a456e00437587461d9645852272fb2322", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d68f0a456e00437587461d9645852272fb2322/comments", "author": null, "committer": null, "parents": [{"sha": "4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c3792d448964f7bd99e7eac2c29c9eb7c2bfb84"}], "stats": {"total": 225, "additions": 224, "deletions": 1}, "files": [{"sha": "30cf2feec321b81cd6d57dec7fb057ec9d8a822a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d68f0a456e00437587461d9645852272fb2322/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d68f0a456e00437587461d9645852272fb2322/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8d68f0a456e00437587461d9645852272fb2322", "patch": "@@ -1,3 +1,69 @@\n+2022-02-11  Iain Sandoe  <iain@sandoe.co.uk>\n+\t    Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/104117\n+\t* config/rs6000/rs6000.cc (darwin_rs6000_legitimate_lo_sum_const_p):\n+\tCheck for UNSPEC_MACHOPIC_OFFSET wrappers on symbolic addresses when\n+\temitting PIC code.\n+\t(legitimate_lo_sum_address_p): Likewise.\n+\t* lra-constraints.cc (process_address_1): Do not attempt to emit a reg\n+\tload from an invalid lo_sum address.\n+\n+2022-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/104499\n+\t* match.pd ((X & Y) CMP 0 -> X CMP2 ~Y): Use view_convert instead\n+\tof convert.\n+\n+2022-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.cc (build_common_builtin_nodes): Fix up formatting in\n+\t__builtin_clear_padding decl creation.\n+\t* gimplify.cc (gimple_add_padding_init_for_auto_var): Encode\n+\tfor_auto_init in the value of 2nd BUILT_IN_CLEAR_PADDING\n+\targument rather than in 3rd argument.\n+\t(gimplify_call_expr): Likewise.  Fix up comment formatting.\n+\t* gimple-fold.cc (gimple_fold_builtin_clear_padding): Expect\n+\t2 arguments instead of 3, take for_auto_init from the value\n+\tof 2nd argument.\n+\n+2022-02-11  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/104400\n+\t* lra-constraints.cc (process_alt_operands): Don't make union of\n+\tthis_alternative_exclude_start_hard_regs when reg class in insn\n+\talternative covers other reg classes in the same alternative.\n+\n+2022-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/104446\n+\t* combine.cc (subst): Don't substitute CONST_INTs into RTX_AUTOINC\n+\toperands.\n+\n+2022-02-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/104496\n+\t* internal-fn.cc (vectorized_internal_fn_supported_p):\n+\tBail out for integer mode vector types.\n+\n+2022-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/104459\n+\t* df-scan.cc (df_insn_change_bb): Don't call df_set_bb_dirty when\n+\tmoving DEBUG_INSNs between bbs.\n+\n+2022-02-11  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/104479\n+\t* match.pd (uncond_op + vec_cond -> cond_op): Add single_use\n+\tfor the dest of uncond_op.\n+\n+2022-02-11  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/104456\n+\t* config/nvptx/nvptx.cc (prevent_branch_around_nothing): Handle asm\n+\tinsn.\n+\n 2022-02-10  Qing Zhao  <qing.zhao@oracle.com>\n \n \tPR middle-end/100775"}, {"sha": "b975470831bbfdac88c70557bd9c720c9d65ef25", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d68f0a456e00437587461d9645852272fb2322/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d68f0a456e00437587461d9645852272fb2322/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e8d68f0a456e00437587461d9645852272fb2322", "patch": "@@ -1 +1 @@\n-20220211\n+20220212"}, {"sha": "f5d12435628c1b61b4d2de3601e48d08955ee514", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d68f0a456e00437587461d9645852272fb2322/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d68f0a456e00437587461d9645852272fb2322/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=e8d68f0a456e00437587461d9645852272fb2322", "patch": "@@ -1,3 +1,9 @@\n+2022-02-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104274\n+\t* region-model.cc (region_model::check_for_poison): Ignore\n+\tuninitialized uses of empty types.\n+\n 2022-02-10  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/98797"}, {"sha": "78f6f6f00f4a192aea77519b3a3031e29056737d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d68f0a456e00437587461d9645852272fb2322/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d68f0a456e00437587461d9645852272fb2322/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e8d68f0a456e00437587461d9645852272fb2322", "patch": "@@ -1,3 +1,9 @@\n+2022-02-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* c-attribs.cc (c_common_attribute_table): Add entry for\n+\tvector_mask.\n+\t(handle_vector_mask_attribute): New.\n+\n 2022-02-10  Marcel Vollweiler  <marcel@codesourcery.com>\n \n \t* c-omp.cc (c_omp_split_clauses): Added OMP_CLAUSE_HAS_DEVICE_ADDR case."}, {"sha": "6e420e04f6e07222bda1a2542121180be395a4bb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d68f0a456e00437587461d9645852272fb2322/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d68f0a456e00437587461d9645852272fb2322/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e8d68f0a456e00437587461d9645852272fb2322", "patch": "@@ -1,3 +1,8 @@\n+2022-02-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-parser.cc (c_parser_gimple_statement): Properly parse\n+\tVEC_COND_EXPRs.\n+\n 2022-02-10  Marcel Vollweiler  <marcel@codesourcery.com>\n \n \t* c-parser.cc (c_parser_omp_clause_name): Parse 'has_device_addr'"}, {"sha": "1db66a72060aedf6a31660ffe9ae0287745a72ae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d68f0a456e00437587461d9645852272fb2322/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d68f0a456e00437587461d9645852272fb2322/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e8d68f0a456e00437587461d9645852272fb2322", "patch": "@@ -1,3 +1,11 @@\n+2022-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/104472\n+\t* constexpr.cc (cxx_eval_internal_function) <case IFN_VEC_CONVERT>:\n+\tOnly return fold_const_call result if it is non-NULL.  Otherwise\n+\tfall through into the default: case to return t, set *non_constant_p\n+\tand emit diagnostics if needed.\n+\n 2022-02-10  Jason Merrill  <jason@redhat.com>\n \n \t* module.cc (depset::hash::add_specializations): Use"}, {"sha": "242ec034f6ab30a645588f1f0b0e7a0501edadda", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d68f0a456e00437587461d9645852272fb2322/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d68f0a456e00437587461d9645852272fb2322/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=e8d68f0a456e00437587461d9645852272fb2322", "patch": "@@ -1,3 +1,11 @@\n+2022-02-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.pot: Regenerate.\n+\n+2022-02-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* exgettext: Also process C++ sources with --language=GCC-source.\n+\n 2022-01-17  Martin Liska  <mliska@suse.cz>\n \n \t* EXCLUDES: Rename .c names to .cc."}, {"sha": "03290ce251937a59045b28f42f73449a327562aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d68f0a456e00437587461d9645852272fb2322/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d68f0a456e00437587461d9645852272fb2322/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8d68f0a456e00437587461d9645852272fb2322", "patch": "@@ -1,3 +1,98 @@\n+2022-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/104499\n+\t* gcc.c-torture/compile/pr104499.c: New test.\n+\n+2022-02-11  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/104400\n+\t* gcc.target/v850/pr104400.c: New.\n+\t* gcc.target/v850/v850.exp: New.\n+\n+2022-02-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104274\n+\t* gcc.dg/analyzer/torture/empty-struct-1.c: New test.\n+\n+2022-02-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/gimplefe-48.c: New testcase.\n+\n+2022-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/104472\n+\t* g++.dg/cpp0x/constexpr-104472.C: New test.\n+\n+2022-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/104446\n+\t* gcc.target/i386/pr104446.c: New test.\n+\n+2022-02-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/104496\n+\t* gcc.target/i386/pr104496.c: New testcase.\n+\n+2022-02-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/104459\n+\t* gcc.dg/pr104459.c: New test.\n+\n+2022-02-11  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr104479.c: New test.\n+\t* gcc.target/i386/cond_op_shift_w-1.c: Adjust testcase.\n+\n+2022-02-11  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.c-torture/compile/pr100576.c: Require effective target\n+\tnon_strict_prototype.\n+\t* gcc.c-torture/compile/pr97576.c: Same.\n+\n+2022-02-11  Tom de Vries  <tdevries@suse.de>\n+\n+\t* c-c++-common/Walloca-larger-than.c: Require effective target alloca.\n+\t* c-c++-common/Warray-bounds-9.c: Same.\n+\t* c-c++-common/Wdangling-pointer-2.c: Same.\n+\t* c-c++-common/Wdangling-pointer-4.c: Same.\n+\t* c-c++-common/Wdangling-pointer-5.c: Same.\n+\t* c-c++-common/Wdangling-pointer.c: Same.\n+\t* c-c++-common/auto-init-11.c: Same.\n+\t* c-c++-common/auto-init-12.c: Same.\n+\t* c-c++-common/auto-init-15.c: Same.\n+\t* c-c++-common/auto-init-16.c: Same.\n+\t* c-c++-common/torture/builtin-clear-padding-4.c: Same.\n+\t* gcc.c-torture/compile/pr99787-1.c: Same.\n+\t* gcc.dg/Walloca-larger-than-4.c: Same.\n+\t* gcc.dg/Wdangling-pointer.c: Same.\n+\t* gcc.dg/Wfree-nonheap-object-2.c: Same.\n+\t* gcc.dg/Wfree-nonheap-object.c: Same.\n+\t* gcc.dg/Wstringop-overflow-56.c: Same.\n+\t* gcc.dg/Wstringop-overflow-57.c: Same.\n+\t* gcc.dg/Wstringop-overflow-67.c: Same.\n+\t* gcc.dg/Wstringop-overflow-71.c: Same.\n+\t* gcc.dg/Wvla-larger-than-5.c: Same.\n+\t* gcc.dg/analyzer/taint-alloc-1.c: Same.\n+\t* gcc.dg/analyzer/torture/ubsan-1.c: Same.\n+\t* gcc.dg/graphite/pr99085.c: Same.\n+\t* gcc.dg/pr100225.c: Same.\n+\t* gcc.dg/pr98721-1.c: Same.\n+\t* gcc.dg/pr99122-2.c: Same.\n+\t* gcc.dg/sso-14.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-25.c: Same.\n+\t* gcc.dg/uninit-38.c: Same.\n+\t* gcc.dg/uninit-39.c: Same.\n+\t* gcc.dg/uninit-41.c: Same.\n+\t* gcc.dg/uninit-pr100250.c: Same.\n+\t* gcc.dg/uninit-pr101300.c: Same.\n+\t* gcc.dg/uninit-pr101494.c: Same.\n+\t* gcc.dg/uninit-pr98578.c: Same.\n+\t* gcc.dg/uninit-pr98583.c: Same.\n+\t* gcc.dg/vla-stexp-1.c: Same.\n+\t* gcc.dg/vla-stexp-2.c: Same.\n+\t* gcc.dg/vla-stexp-4.c: Same.\n+\t* gcc.dg/vla-stexp-5.c: Same.\n+\n 2022-02-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/104373"}, {"sha": "13ed04c8d5d6f76b2b6011443c770d4136e72351", "filename": "gotools/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d68f0a456e00437587461d9645852272fb2322/gotools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d68f0a456e00437587461d9645852272fb2322/gotools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FChangeLog?ref=e8d68f0a456e00437587461d9645852272fb2322", "patch": "@@ -1,3 +1,9 @@\n+2022-02-11  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* Makefile.am (go_cmd_cgo_files): Add ast_go118.go\n+\t(check-go-tool): Copy golang.org/x/tools directories.\n+\t* Makefile.in: Regenerate.\n+\n 2022-02-09  Ian Lance Taylor  <iant@golang.org>\n \n \t* configure.ac (RT_LIBS): Define."}, {"sha": "a02428951880a97bda78cd17424a2c0b35c3deb0", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d68f0a456e00437587461d9645852272fb2322/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d68f0a456e00437587461d9645852272fb2322/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e8d68f0a456e00437587461d9645852272fb2322", "patch": "@@ -1,3 +1,8 @@\n+2022-02-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Makefile.in (po/$(PACKAGE).pot): Also handle cpp_warning_at,\n+\tcpp_pedwarning_at and cpp_error_at.\n+\n 2022-02-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/104147"}, {"sha": "69d7d034730302e1f46cc4d76c48e70446a0b0a7", "filename": "libcpp/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d68f0a456e00437587461d9645852272fb2322/libcpp%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d68f0a456e00437587461d9645852272fb2322/libcpp%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpo%2FChangeLog?ref=e8d68f0a456e00437587461d9645852272fb2322", "patch": "@@ -1,3 +1,7 @@\n+2022-02-11  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* cpplib.pot: Regenerate.\n+\n 2021-12-20  Joseph Myers  <joseph@codesourcery.com>\n \n \t* es.po: Update."}, {"sha": "5ed0e0f5f2866a0cd19020face953e1baa0fd7ad", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d68f0a456e00437587461d9645852272fb2322/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d68f0a456e00437587461d9645852272fb2322/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e8d68f0a456e00437587461d9645852272fb2322", "patch": "@@ -1,3 +1,17 @@\n+2022-02-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/temporary_buffer.cc: Fix dg-warning target\n+\tselector.\n+\n+2022-02-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/monotonic_buffer_resource/allocate.cc:\n+\tIgnore -Walloc-larger-than warning.\n+\t* testsuite/20_util/unsynchronized_pool_resource/allocate.cc:\n+\tLikewise.\n+\t* testsuite/29_atomics/atomic/cons/user_pod.cc: Compile with -O1\n+\tto avoid linker error for __atomic_is_lock_free.\n+\n 2022-02-10  Thomas Rodgers  <rodgert@appliantology.com>\n \n \t* include/bits/atomic_wait.h (__waiter_base::_S_do_spin,"}]}