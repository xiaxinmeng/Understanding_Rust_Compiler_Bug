{"sha": "1006c9d4395a939820df76f37c7b085a4a1a003f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAwNmM5ZDQzOTVhOTM5ODIwZGY3NmYzN2M3YjA4NWE0YTFhMDAzZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-10-02T22:32:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-10-02T22:32:56Z"}, "message": "constexpr.c (cxx_eval_constant_expression): If not skipping upon entry to body...\n\n\t* constexpr.c (cxx_eval_constant_expression) <case CLEANUP_STMT>: If\n\tnot skipping upon entry to body, run cleanup with the same *jump_target\n\tas it started to run the cleanup even if the body returns, breaks or\n\tcontinues.\n\t(potential_constant_expression_1): Allow CLEANUP_STMT.\n\n\t* g++.dg/ext/constexpr-attr-cleanup1.C: New test.\n\nFrom-SVN: r276494", "tree": {"sha": "973f74c8b74c3df61c1379ee1c6ebc66d0fa048a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/973f74c8b74c3df61c1379ee1c6ebc66d0fa048a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1006c9d4395a939820df76f37c7b085a4a1a003f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1006c9d4395a939820df76f37c7b085a4a1a003f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1006c9d4395a939820df76f37c7b085a4a1a003f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1006c9d4395a939820df76f37c7b085a4a1a003f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "276a52d5566487fa53bcf34f24290362a10ac316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/276a52d5566487fa53bcf34f24290362a10ac316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/276a52d5566487fa53bcf34f24290362a10ac316"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "72790626500a5ef03194142e22e1ea3c2a82cc00", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1006c9d4395a939820df76f37c7b085a4a1a003f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1006c9d4395a939820df76f37c7b085a4a1a003f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1006c9d4395a939820df76f37c7b085a4a1a003f", "patch": "@@ -1,5 +1,11 @@\n 2019-10-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* constexpr.c (cxx_eval_constant_expression) <case CLEANUP_STMT>: If\n+\tnot skipping upon entry to body, run cleanup with the same *jump_target\n+\tas it started to run the cleanup even if the body returns, breaks or\n+\tcontinues.\n+\t(potential_constant_expression_1): Allow CLEANUP_STMT.\n+\n \t* constexpr.c (cxx_eval_store_expression): Formatting fix.  Handle\n \tconst_object_being_modified with array type.\n "}, {"sha": "200879378c532af47a51edb60c5d9b394ce8f22c", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1006c9d4395a939820df76f37c7b085a4a1a003f/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1006c9d4395a939820df76f37c7b085a4a1a003f/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=1006c9d4395a939820df76f37c7b085a4a1a003f", "patch": "@@ -4899,14 +4899,21 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       break;\n \n     case CLEANUP_STMT:\n-      r = cxx_eval_constant_expression (ctx, CLEANUP_BODY (t), lval,\n+      {\n+\ttree initial_jump_target = jump_target ? *jump_target : NULL_TREE;\n+\tr = cxx_eval_constant_expression (ctx, CLEANUP_BODY (t), lval,\n+\t\t\t\t\t  non_constant_p, overflow_p,\n+\t\t\t\t\t  jump_target);\n+\tif (!CLEANUP_EH_ONLY (t) && !*non_constant_p)\n+\t  /* Also evaluate the cleanup.  If we weren't skipping at the\n+\t     start of the CLEANUP_BODY, change jump_target temporarily\n+\t     to &initial_jump_target, so that even a return or break or\n+\t     continue in the body doesn't skip the cleanup.  */\n+\t  cxx_eval_constant_expression (ctx, CLEANUP_EXPR (t), true,\n \t\t\t\t\tnon_constant_p, overflow_p,\n-\t\t\t\t\tjump_target);\n-      if (!CLEANUP_EH_ONLY (t) && !*non_constant_p)\n-\t/* Also evaluate the cleanup.  */\n-\tcxx_eval_constant_expression (ctx, CLEANUP_EXPR (t), true,\n-\t\t\t\t      non_constant_p, overflow_p,\n-\t\t\t\t      jump_target);\n+\t\t\t\t\tjump_target ? &initial_jump_target\n+\t\t\t\t\t: NULL);\n+      }\n       break;\n \n       /* These differ from cxx_eval_unary_expression in that this doesn't\n@@ -6975,6 +6982,12 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n       return true;\n \n     case CLEANUP_STMT:\n+      if (!RECUR (CLEANUP_BODY (t), any))\n+\treturn false;\n+      if (!CLEANUP_EH_ONLY (t) && !RECUR (CLEANUP_EXPR (t), any))\n+\treturn false;\n+      return true;\n+\n     case EMPTY_CLASS_EXPR:\n     case PREDICT_EXPR:\n       return false;"}, {"sha": "b9fcbb08332861c397b76a08867ec40468d3a3a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1006c9d4395a939820df76f37c7b085a4a1a003f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1006c9d4395a939820df76f37c7b085a4a1a003f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1006c9d4395a939820df76f37c7b085a4a1a003f", "patch": "@@ -1,3 +1,7 @@\n+2019-10-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/ext/constexpr-attr-cleanup1.C: New test.\n+\n 2019-10-02  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/80936"}, {"sha": "2c4f61ac44bb89044eb399798cdedd9ba9b32c97", "filename": "gcc/testsuite/g++.dg/ext/constexpr-attr-cleanup1.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1006c9d4395a939820df76f37c7b085a4a1a003f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-attr-cleanup1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1006c9d4395a939820df76f37c7b085a4a1a003f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-attr-cleanup1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-attr-cleanup1.C?ref=1006c9d4395a939820df76f37c7b085a4a1a003f", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile { target c++2a } }\n+\n+constexpr void\n+cleanup (int *x)\n+{\n+  if (x)\n+    asm (\"\");\t\t// { dg-error \"inline assembly is not a constant expression\" }\n+}\t\t\t// { dg-message \"only unevaluated inline assembly is allowed in a 'constexpr' function\" \"\" { target *-*-* } .-1 }\n+\n+constexpr void\n+cleanup2 (int *x)\n+{\n+}\n+\n+constexpr bool\n+foo ()\n+{\n+  int a __attribute__((cleanup (cleanup))) = 1;\n+  return true;\n+}\n+\n+constexpr bool\n+bar ()\n+{\n+  int a __attribute__((cleanup (cleanup2))) = 1;\n+  return true;\n+}\n+\n+constexpr auto x = foo ();\t// { dg-message \"in 'constexpr' expansion of\" }\n+constexpr auto y = bar ();"}]}