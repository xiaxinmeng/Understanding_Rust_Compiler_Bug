{"sha": "a4b930608f389022fdcb256796c187719307b410", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRiOTMwNjA4ZjM4OTAyMmZkY2IyNTY3OTZjMTg3NzE5MzA3YjQxMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-08-29T08:36:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-08-29T08:36:10Z"}, "message": "re PR tree-optimization/37207 (ice at tree-ssa-ifcombine.c:222 for -Os)\n\n2008-08-29  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/37207\n\t* tree-vrp.c (extract_range_from_binary_expr): Also try\n\tto constant fold if only one of the operands is a constant.\n\n\t* gcc.dg/tree-ssa/vrp46.c: New testcase.\n\nFrom-SVN: r139754", "tree": {"sha": "81dde4fb09ba070d53dbbe9adb6f6574611ea46a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81dde4fb09ba070d53dbbe9adb6f6574611ea46a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4b930608f389022fdcb256796c187719307b410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b930608f389022fdcb256796c187719307b410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4b930608f389022fdcb256796c187719307b410", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b930608f389022fdcb256796c187719307b410/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0491ba7b4d126b941e43a73d61427828a459b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0491ba7b4d126b941e43a73d61427828a459b1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0491ba7b4d126b941e43a73d61427828a459b1e"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "24ce3a6c5323c24b5ac899114526ae134bb46547", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b930608f389022fdcb256796c187719307b410/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b930608f389022fdcb256796c187719307b410/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4b930608f389022fdcb256796c187719307b410", "patch": "@@ -1,3 +1,9 @@\n+2008-08-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37207\n+\t* tree-vrp.c (extract_range_from_binary_expr): Also try\n+\tto constant fold if only one of the operands is a constant.\n+\n 2008-08-29  Nick Clifton  <nickc@redhat.com>\n \n \t* config/m32r/m32r.h (LEGITIMATE_CONSTANT_P): Treat LABEL_REFs in"}, {"sha": "14b4299da7f85349faa8c5b646d26db07d61fce9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b930608f389022fdcb256796c187719307b410/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b930608f389022fdcb256796c187719307b410/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a4b930608f389022fdcb256796c187719307b410", "patch": "@@ -1,3 +1,8 @@\n+2008-08-29  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37207\n+\t* gcc.dg/tree-ssa/vrp46.c: New testcase.\n+\n 2008-08-28  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* gcc.target/mips/octeon-bbit-1.c: New test."}, {"sha": "a67e839ded5386e76a0f229c3738dc572b8ee6d4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp46.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b930608f389022fdcb256796c187719307b410/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b930608f389022fdcb256796c187719307b410/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp46.c?ref=a4b930608f389022fdcb256796c187719307b410", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+void\n+func_18 ( int t )\n+{\n+  unsigned l_889;\n+  int l_895 = 1;\n+  for (0; 1; ++l_889)\n+    {\n+      int t1 = 0;\n+      if (func_81 (1))\n+\t{\n+\t  int rhs = l_895;\n+\t  if (rhs == 0)\n+\t    rhs = 1;\n+\t  if (1 & (t % rhs))\n+\t    t1 = 1;\n+\t}\n+      func_98 (t1);\n+      l_895 = 0;\n+    }\n+}\n+\n+/* There should be a single if left.  */\n+\n+/* { dg-final { scan-tree-dump-times \"if\" 1 \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "7579ee1330b4f06fef2eb260b264d9fbd6bfb9f7", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b930608f389022fdcb256796c187719307b410/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b930608f389022fdcb256796c187719307b410/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=a4b930608f389022fdcb256796c187719307b410", "patch": "@@ -2058,10 +2058,13 @@ extract_range_from_binary_expr (value_range_t *vr,\n       && code != TRUTH_OR_EXPR)\n     {\n       /* We can still do constant propagation here.  */\n-      if ((op0 = op_with_constant_singleton_value_range (op0)) != NULL_TREE\n-\t  && (op1 = op_with_constant_singleton_value_range (op1)) != NULL_TREE)\n+      tree const_op0 = op_with_constant_singleton_value_range (op0);\n+      tree const_op1 = op_with_constant_singleton_value_range (op1);\n+      if (const_op0 || const_op1)\n \t{\n-\t  tree tem = fold_binary (code, expr_type, op0, op1);\n+\t  tree tem = fold_binary (code, expr_type,\n+\t\t\t\t  const_op0 ? const_op0 : op0,\n+\t\t\t\t  const_op1 ? const_op1 : op1);\n \t  if (tem\n \t      && is_gimple_min_invariant (tem)\n \t      && !is_overflow_infinity (tem))"}]}