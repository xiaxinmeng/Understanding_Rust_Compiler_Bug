{"sha": "bb19d4af73a6e29dde443976f3119d01a5491f8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIxOWQ0YWY3M2E2ZTI5ZGRlNDQzOTc2ZjMxMTlkMDFhNTQ5MWY4ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-08T21:32:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-08T21:32:12Z"}, "message": "Rename lvalue_p to obvalue_p.\n\n\t* tree.c (obvalue_p): Rename from lvalue_p.\n\t(lvalue_p): Define for c-common.\n\t* call.c, cp-tree.h, cvt.c, init.c: Adjust.\n\t* typeck.c: Adjust.\n\t(cp_build_addr_expr_1): Remove obsolete code.\n\nFrom-SVN: r238182", "tree": {"sha": "d5508f42446209aae1176835282fb10a983960e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5508f42446209aae1176835282fb10a983960e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb19d4af73a6e29dde443976f3119d01a5491f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb19d4af73a6e29dde443976f3119d01a5491f8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb19d4af73a6e29dde443976f3119d01a5491f8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb19d4af73a6e29dde443976f3119d01a5491f8d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3edc63382ef1856d8ba86fed77342b50007ddd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3edc63382ef1856d8ba86fed77342b50007ddd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3edc63382ef1856d8ba86fed77342b50007ddd3"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "8d8535d792107dff2c9af23d7cb03f0b7917b086", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bb19d4af73a6e29dde443976f3119d01a5491f8d", "patch": "@@ -1,5 +1,11 @@\n 2016-07-08  Jason Merrill  <jason@redhat.com>\n \n+\t* tree.c (obvalue_p): Rename from lvalue_p.\n+\t(lvalue_p): Define for c-common.\n+\t* call.c, cp-tree.h, cvt.c, init.c: Adjust.\n+\t* typeck.c: Adjust.\n+\t(cp_build_addr_expr_1): Remove obsolete code.\n+\n \t* tree.c (glvalue_p): Rename from lvalue_or_rvalue_with_address_p.\n \t* call.c, cp-tree.h, typeck.c: Adjust.\n "}, {"sha": "c90b8af115f6a4f80c4994d0cae131663dd5e20e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=bb19d4af73a6e29dde443976f3119d01a5491f8d", "patch": "@@ -1126,7 +1126,10 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n       fcode = TREE_CODE (from);\n       conv = build_conv (ck_lvalue, from, conv);\n     }\n-  else if (fromref || (expr && lvalue_p (expr)))\n+  /* Wrapping a ck_rvalue around a class prvalue (as a result of using\n+     obvalue_p) seems odd, since it's already a prvalue, but that's how we\n+     express the copy constructor call required by copy-initialization.  */\n+  else if (fromref || (expr && obvalue_p (expr)))\n     {\n       if (expr)\n \t{"}, {"sha": "a3e53a9c109795f5ad64262b4dfbd852375288d6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bb19d4af73a6e29dde443976f3119d01a5491f8d", "patch": "@@ -6516,6 +6516,11 @@ extern int member_p\t\t\t\t(const_tree);\n extern cp_lvalue_kind real_lvalue_p\t\t(const_tree);\n extern cp_lvalue_kind lvalue_kind\t\t(const_tree);\n extern bool glvalue_p\t\t\t\t(const_tree);\n+/* obvalue_p used to be named lvalue_p, but that didn't match the C++\n+   definition of lvalue.  For now, let's not use the name lvalue_p in the front\n+   end; later we can rename real_lvalue_p to lvalue_p.  */\n+#define lvalue_p(T) syntax error, use real_lvalue_p\n+extern bool obvalue_p\t\t\t\t(const_tree);\n extern bool xvalue_p\t                        (const_tree);\n extern tree cp_stabilize_reference\t\t(tree);\n extern bool builtin_valid_in_constant_expr_p    (const_tree);"}, {"sha": "9dd383e068142b16411a3a99599d656f4319e856", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=bb19d4af73a6e29dde443976f3119d01a5491f8d", "patch": "@@ -330,7 +330,7 @@ build_up_reference (tree type, tree arg, int flags, tree decl,\n       cp_finish_decl (arg, targ, /*init_const_expr_p=*/false, NULL_TREE,\n \t\t      LOOKUP_ONLYCONVERTING|DIRECT_BIND);\n     }\n-  else if (!(flags & DIRECT_BIND) && ! lvalue_p (arg))\n+  else if (!(flags & DIRECT_BIND) && ! obvalue_p (arg))\n     return get_target_expr_sfinae (arg, complain);\n \n   /* If we had a way to wrap this up, and say, if we ever needed its\n@@ -473,7 +473,7 @@ convert_to_reference (tree reftype, tree expr, int convtype,\n \n       return build_up_reference (reftype, expr, flags, decl, complain);\n     }\n-  else if ((convtype & CONV_REINTERPRET) && lvalue_p (expr))\n+  else if ((convtype & CONV_REINTERPRET) && obvalue_p (expr))\n     {\n       /* When casting an lvalue to a reference type, just convert into\n \t a pointer to the new type and deference it.  This is allowed"}, {"sha": "69ff61d72adb4b6ae91b365eea30079cfb8d9a67", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=bb19d4af73a6e29dde443976f3119d01a5491f8d", "patch": "@@ -3332,7 +3332,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n     rval = build2 (COMPOUND_EXPR, TREE_TYPE (rval), init_preeval_expr, rval);\n \n   /* A new-expression is never an lvalue.  */\n-  gcc_assert (!lvalue_p (rval));\n+  gcc_assert (!obvalue_p (rval));\n \n   return convert (pointer_type, rval);\n }"}, {"sha": "9fda74db2dacbb688365d4cd3184bd032039d531", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=bb19d4af73a6e29dde443976f3119d01a5491f8d", "patch": "@@ -266,6 +266,14 @@ real_lvalue_p (const_tree ref)\n     return kind;\n }\n \n+/* Defined for c-common; the front end should use real_lvalue_p.  */\n+\n+bool\n+(lvalue_p) (const_tree t)\n+{\n+  return real_lvalue_p (t);\n+}\n+\n /* This differs from real_lvalue_p in that xvalues are included.  */\n \n bool\n@@ -281,7 +289,7 @@ glvalue_p (const_tree ref)\n /* This differs from glvalue_p in that class prvalues are included.  */\n \n bool\n-lvalue_p (const_tree ref)\n+obvalue_p (const_tree ref)\n {\n   return (lvalue_kind (ref) != clk_none);\n }"}, {"sha": "a0e6c519a961a588286e9ece80210fa37b44fb8d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb19d4af73a6e29dde443976f3119d01a5491f8d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=bb19d4af73a6e29dde443976f3119d01a5491f8d", "patch": "@@ -1987,7 +1987,7 @@ decay_conversion (tree exp,\n \t\t\t TREE_OPERAND (exp, 0), op1);\n \t}\n \n-      if (!lvalue_p (exp)\n+      if (!obvalue_p (exp)\n \t  && ! (TREE_CODE (exp) == CONSTRUCTOR && TREE_STATIC (exp)))\n \t{\n \t  if (complain & tf_error)\n@@ -5678,16 +5678,8 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n     CASE_CONVERT:\n     case FLOAT_EXPR:\n     case FIX_TRUNC_EXPR:\n-      /* Even if we're not being pedantic, we cannot allow this\n-\t extension when we're instantiating in a SFINAE\n-\t context.  */\n-      if (! lvalue_p (arg) && complain == tf_none)\n-\t{\n-\t  if (complain & tf_error)\n-\t    permerror (input_location, \"ISO C++ forbids taking the address of a cast to a non-lvalue expression\");\n-\t  else\n-\t    return error_mark_node;\n-\t}\n+      /* We should have handled this above in the lvalue_kind check.  */\n+      gcc_unreachable ();\n       break;\n \n     case BASELINK:\n@@ -7240,9 +7232,7 @@ build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n       reference_type = dst_type;\n       if (!TYPE_REF_IS_RVALUE (dst_type)\n \t  ? real_lvalue_p (expr)\n-\t  : (CLASS_TYPE_P (TREE_TYPE (dst_type))\n-\t     ? lvalue_p (expr)\n-\t     : glvalue_p (expr)))\n+\t  : obvalue_p (expr))\n \t/* OK.  */;\n       else\n \t{"}]}