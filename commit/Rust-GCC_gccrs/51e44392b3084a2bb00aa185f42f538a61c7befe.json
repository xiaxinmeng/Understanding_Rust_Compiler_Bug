{"sha": "51e44392b3084a2bb00aa185f42f538a61c7befe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFlNDQzOTJiMzA4NGEyYmIwMGFhMTg1ZjQyZjUzOGE2MWM3YmVmZQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2013-01-28T20:03:26Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2013-01-28T20:03:26Z"}, "message": "re PR other/54814 (ICE: unable to find a register to spill in class 'R0_REG')\n\n\tPR other/54814\n\t* reload.c (find_valid_class_1): Use in_hard_reg_set_p instead of\n\tTEST_HARD_REG_BIT.\n\nFrom-SVN: r195515", "tree": {"sha": "51f69a79495e01d0369cd4bf6546fc69c24e0d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51f69a79495e01d0369cd4bf6546fc69c24e0d77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51e44392b3084a2bb00aa185f42f538a61c7befe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e44392b3084a2bb00aa185f42f538a61c7befe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e44392b3084a2bb00aa185f42f538a61c7befe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e44392b3084a2bb00aa185f42f538a61c7befe/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db1fb332e127cef6bcbfd861e597ddb84505210f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1fb332e127cef6bcbfd861e597ddb84505210f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db1fb332e127cef6bcbfd861e597ddb84505210f"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "917986be8ad37c1b4002e1ae01e7e6711d3ef952", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e44392b3084a2bb00aa185f42f538a61c7befe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e44392b3084a2bb00aa185f42f538a61c7befe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51e44392b3084a2bb00aa185f42f538a61c7befe", "patch": "@@ -1,3 +1,9 @@\n+2013-01-28  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR other/54814\n+\t* reload.c (find_valid_class_1): Use in_hard_reg_set_p instead of\n+\tTEST_HARD_REG_BIT.\n+\n 2013-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/56117"}, {"sha": "889a6ccb3e1536701b97be137be44a85ed6ce443", "filename": "gcc/reload.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e44392b3084a2bb00aa185f42f538a61c7befe/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e44392b3084a2bb00aa185f42f538a61c7befe/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=51e44392b3084a2bb00aa185f42f538a61c7befe", "patch": "@@ -707,7 +707,7 @@ find_valid_class (enum machine_mode outer ATTRIBUTE_UNUSED,\n }\n \n /* We are trying to reload a subreg of something that is not a register.\n-   Find the largest class which has at least one register valid in\n+   Find the largest class which contains only registers valid in\n    mode MODE.  OUTER is the mode of the subreg, DEST_CLASS the class in\n    which we would eventually like to obtain the object.  */\n \n@@ -727,10 +727,12 @@ find_valid_class_1 (enum machine_mode outer ATTRIBUTE_UNUSED,\n     {\n       int bad = 0;\n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER && !bad; regno++)\n-\tif (TEST_HARD_REG_BIT (reg_class_contents[rclass], regno)\n-\t    && !HARD_REGNO_MODE_OK (regno, mode))\n-\t  bad = 1;\n-\n+\t{\n+\t  if (in_hard_reg_set_p (reg_class_contents[rclass], mode, regno)\n+\t      && !HARD_REGNO_MODE_OK (regno, mode))\n+\t    bad = 1;\n+\t}\n+      \n       if (bad)\n \tcontinue;\n "}]}