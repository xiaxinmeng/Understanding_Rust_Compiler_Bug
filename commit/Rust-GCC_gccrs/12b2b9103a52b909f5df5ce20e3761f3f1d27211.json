{"sha": "12b2b9103a52b909f5df5ce20e3761f3f1d27211", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJiMmI5MTAzYTUyYjkwOWY1ZGY1Y2UyMGUzNzYxZjNmMWQyNzIxMQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-06-05T09:50:16Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-06-05T09:50:16Z"}, "message": "[arm] PR target/81497: Fix arm_acle.h for C++\n\nWhen trying to compile something with arm_acle.h using G++ we get a number of nasty errors:\narm_acle.h:48:49: error: invalid conversion from \u2018const void*\u2019 to \u2018const int*\u2019 [-fpermissive]\n    return __builtin_arm_ldc (__coproc, __CRd, __p);\n\nThis is because the intrinsics that are supposed to be void return the \"result\" of their builtin,\nwhich is void. C lets that slide but C++ complains.\n\nAfter fixing that we run into further errors:\narm_acle.h:48:46: error: invalid conversion from 'const void*' to 'const int*' [-fpermissive]\n    return __builtin_arm_ldc (__coproc, __CRd, __p);\n                                               ^~~\nBecause the pointer arguments in these intrinsics are void pointers but the builtin\nexpects int pointers. So this patch introduces new qualifiers for void pointers and their\nconst-qualified versions and uses that in the specification of these intrinsics.\n\nThis gives us the opportunity of creating an arm subdirectory in g++.dg and inaugurates it\nwith the first arm-specific C++ tests (in that directory).\n\n\n\tPR target/81497\n\t* config/arm/arm-builtins.c (arm_type_qualifiers): Add\n\tqualifier_void_pointer and qualifier_const_void_pointer.\n\t(arm_ldc_qualifiers, arm_stc_qualifiers): Use the above.\n\t(arm_init_builtins): Handle the above.\n\t* config/arm/arm_acle.h (__arm_cdp, __arm_ldc, __arm_ldcl, __arm_stc,\n\t__arm_stcl, __arm_mcr, __arm_cdp2, __arm_ldc2, __arm_ldcl2, __arm_stc2,\n\t__arm_stcl2,__arm_mcr2, __arm_mcrr, __arm_mcrr2): Remove return for\n\tvoid intrinsics.\n\n\t* g++.target/arm/arm.exp: New file.\n\t* g++.target/arm/pr81497.C: Likewise.\n\nFrom-SVN: r261191", "tree": {"sha": "dee8dcc539595af6124b37bb55f95e418589c30a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dee8dcc539595af6124b37bb55f95e418589c30a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12b2b9103a52b909f5df5ce20e3761f3f1d27211", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b2b9103a52b909f5df5ce20e3761f3f1d27211", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b2b9103a52b909f5df5ce20e3761f3f1d27211", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b2b9103a52b909f5df5ce20e3761f3f1d27211/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f3577f5285957c1aa48823ce6c691f8c212b219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f3577f5285957c1aa48823ce6c691f8c212b219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f3577f5285957c1aa48823ce6c691f8c212b219"}], "stats": {"total": 147, "additions": 117, "deletions": 30}, "files": [{"sha": "1681b231e9bd435093477561f896bfe6775154c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b2b9103a52b909f5df5ce20e3761f3f1d27211/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b2b9103a52b909f5df5ce20e3761f3f1d27211/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12b2b9103a52b909f5df5ce20e3761f3f1d27211", "patch": "@@ -1,3 +1,15 @@\n+2018-06-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/81497\n+\t* config/arm/arm-builtins.c (arm_type_qualifiers): Add\n+\tqualifier_void_pointer and qualifier_const_void_pointer.\n+\t(arm_ldc_qualifiers, arm_stc_qualifiers): Use the above.\n+\t(arm_init_builtins): Handle the above.\n+\t* config/arm/arm_acle.h (__arm_cdp, __arm_ldc, __arm_ldcl, __arm_stc,\n+\t__arm_stcl, __arm_mcr, __arm_cdp2, __arm_ldc2, __arm_ldcl2, __arm_stc2,\n+\t__arm_stcl2,__arm_mcr2, __arm_mcrr, __arm_mcrr2): Remove return for\n+\tvoid intrinsics.\n+\n 2018-06-05  Martin Liska  <mliska@suse.cz>\n \n \t* auto-profile.c (read_autofdo_file): Do not use"}, {"sha": "183a7b907f6cd960b9c72972da57c9e1537e7abc", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b2b9103a52b909f5df5ce20e3761f3f1d27211/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b2b9103a52b909f5df5ce20e3761f3f1d27211/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=12b2b9103a52b909f5df5ce20e3761f3f1d27211", "patch": "@@ -78,7 +78,11 @@ enum arm_type_qualifiers\n   /* Lane indices - must be within range of previous argument = a vector.  */\n   qualifier_lane_index = 0x200,\n   /* Lane indices for single lane structure loads and stores.  */\n-  qualifier_struct_load_store_lane_index = 0x400\n+  qualifier_struct_load_store_lane_index = 0x400,\n+  /* A void pointer.  */\n+  qualifier_void_pointer = 0x800,\n+  /* A const void pointer.  */\n+  qualifier_const_void_pointer = 0x802\n };\n \n /*  The qualifier_internal allows generation of a unary builtin from\n@@ -202,15 +206,15 @@ arm_cdp_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n static enum arm_type_qualifiers\n arm_ldc_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_void, qualifier_unsigned_immediate,\n-      qualifier_unsigned_immediate, qualifier_const_pointer };\n+      qualifier_unsigned_immediate, qualifier_const_void_pointer };\n #define LDC_QUALIFIERS \\\n   (arm_ldc_qualifiers)\n \n /* void (unsigned immediate, unsigned immediate,  void *).  */\n static enum arm_type_qualifiers\n arm_stc_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_void, qualifier_unsigned_immediate,\n-      qualifier_unsigned_immediate, qualifier_pointer };\n+      qualifier_unsigned_immediate, qualifier_void_pointer };\n #define STC_QUALIFIERS \\\n   (arm_stc_qualifiers)\n \n@@ -1095,19 +1099,25 @@ arm_init_builtin (unsigned int fcode, arm_builtin_datum *d,\n       if (qualifiers & qualifier_pointer && VECTOR_MODE_P (op_mode))\n \top_mode = GET_MODE_INNER (op_mode);\n \n-      eltype = arm_simd_builtin_type\n-\t(op_mode,\n-\t (qualifiers & qualifier_unsigned) != 0,\n-\t (qualifiers & qualifier_poly) != 0);\n-      gcc_assert (eltype != NULL);\n-\n-      /* Add qualifiers.  */\n-      if (qualifiers & qualifier_const)\n-\teltype = build_qualified_type (eltype, TYPE_QUAL_CONST);\n-\n-      if (qualifiers & qualifier_pointer)\n-\teltype = build_pointer_type (eltype);\n-\n+      /* For void pointers we already have nodes constructed by the midend.  */\n+      if (qualifiers & qualifier_void_pointer)\n+\teltype = qualifiers & qualifier_const\n+\t\t ? const_ptr_type_node : ptr_type_node;\n+      else\n+\t{\n+\t  eltype\n+\t    = arm_simd_builtin_type (op_mode,\n+\t\t\t\t     (qualifiers & qualifier_unsigned) != 0,\n+\t\t\t\t     (qualifiers & qualifier_poly) != 0);\n+\t  gcc_assert (eltype != NULL);\n+\n+\t  /* Add qualifiers.  */\n+\t  if (qualifiers & qualifier_const)\n+\t    eltype = build_qualified_type (eltype, TYPE_QUAL_CONST);\n+\n+\t  if (qualifiers & qualifier_pointer)\n+\t    eltype = build_pointer_type (eltype);\n+\t}\n       /* If we have reached arg_num == 0, we are at a non-void\n \t return type.  Otherwise, we are still processing\n \t arguments.  */"}, {"sha": "c0f6ea2d1567bbbe25045c02191a11427f250ec3", "filename": "gcc/config/arm/arm_acle.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b2b9103a52b909f5df5ce20e3761f3f1d27211/gcc%2Fconfig%2Farm%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b2b9103a52b909f5df5ce20e3761f3f1d27211/gcc%2Fconfig%2Farm%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle.h?ref=12b2b9103a52b909f5df5ce20e3761f3f1d27211", "patch": "@@ -38,43 +38,43 @@ __arm_cdp (const unsigned int __coproc, const unsigned int __opc1,\n \t   const unsigned int __CRd, const unsigned int __CRn,\n \t   const unsigned int __CRm, const unsigned int __opc2)\n {\n-  return __builtin_arm_cdp (__coproc, __opc1, __CRd, __CRn, __CRm, __opc2);\n+  __builtin_arm_cdp (__coproc, __opc1, __CRd, __CRn, __CRm, __opc2);\n }\n \n __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_ldc (const unsigned int __coproc, const unsigned int __CRd,\n \t   const void * __p)\n {\n-  return __builtin_arm_ldc (__coproc, __CRd, __p);\n+  __builtin_arm_ldc (__coproc, __CRd, __p);\n }\n \n __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_ldcl (const unsigned int __coproc, const unsigned int __CRd,\n \t    const void * __p)\n {\n-  return __builtin_arm_ldcl (__coproc, __CRd, __p);\n+  __builtin_arm_ldcl (__coproc, __CRd, __p);\n }\n \n __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_stc (const unsigned int __coproc, const unsigned int __CRd,\n \t   void * __p)\n {\n-  return __builtin_arm_stc (__coproc, __CRd, __p);\n+  __builtin_arm_stc (__coproc, __CRd, __p);\n }\n \n __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_stcl (const unsigned int __coproc, const unsigned int __CRd,\n \t    void * __p)\n {\n-  return __builtin_arm_stcl (__coproc, __CRd, __p);\n+  __builtin_arm_stcl (__coproc, __CRd, __p);\n }\n \n __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_mcr (const unsigned int __coproc, const unsigned int __opc1,\n \t   uint32_t __value, const unsigned int __CRn, const unsigned int __CRm,\n \t   const unsigned int __opc2)\n {\n-  return __builtin_arm_mcr (__coproc, __opc1, __value, __CRn, __CRm, __opc2);\n+  __builtin_arm_mcr (__coproc, __opc1, __value, __CRn, __CRm, __opc2);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n@@ -90,43 +90,43 @@ __arm_cdp2 (const unsigned int __coproc, const unsigned int __opc1,\n \t    const unsigned int __CRd, const unsigned int __CRn,\n \t    const unsigned int __CRm, const unsigned int __opc2)\n {\n-  return __builtin_arm_cdp2 (__coproc, __opc1, __CRd, __CRn, __CRm, __opc2);\n+  __builtin_arm_cdp2 (__coproc, __opc1, __CRd, __CRn, __CRm, __opc2);\n }\n \n __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_ldc2 (const unsigned int __coproc, const unsigned int __CRd,\n \t    const void * __p)\n {\n-  return __builtin_arm_ldc2 (__coproc, __CRd, __p);\n+  __builtin_arm_ldc2 (__coproc, __CRd, __p);\n }\n \n __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_ldc2l (const unsigned int __coproc, const unsigned int __CRd,\n \t     const void * __p)\n {\n-  return __builtin_arm_ldc2l (__coproc, __CRd, __p);\n+  __builtin_arm_ldc2l (__coproc, __CRd, __p);\n }\n \n __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_stc2 (const unsigned int __coproc, const unsigned int __CRd,\n \t    void * __p)\n {\n-  return __builtin_arm_stc2 (__coproc, __CRd, __p);\n+  __builtin_arm_stc2 (__coproc, __CRd, __p);\n }\n \n __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_stc2l (const unsigned int __coproc, const unsigned int __CRd,\n \t     void * __p)\n {\n-  return __builtin_arm_stc2l (__coproc, __CRd, __p);\n+  __builtin_arm_stc2l (__coproc, __CRd, __p);\n }\n \n __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_mcr2 (const unsigned int __coproc, const unsigned int __opc1,\n \t    uint32_t __value, const unsigned int __CRn,\n \t    const unsigned int __CRm, const unsigned int __opc2)\n {\n-  return __builtin_arm_mcr2 (__coproc, __opc1, __value, __CRn, __CRm, __opc2);\n+  __builtin_arm_mcr2 (__coproc, __opc1, __value, __CRn, __CRm, __opc2);\n }\n \n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n@@ -143,7 +143,7 @@ __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_mcrr (const unsigned int __coproc, const unsigned int __opc1,\n \t    uint64_t __value, const unsigned int __CRm)\n {\n-  return __builtin_arm_mcrr (__coproc, __opc1, __value, __CRm);\n+  __builtin_arm_mcrr (__coproc, __opc1, __value, __CRm);\n }\n \n __extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n@@ -159,7 +159,7 @@ __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_mcrr2 (const unsigned int __coproc, const unsigned int __opc1,\n \t    uint64_t __value, const unsigned int __CRm)\n {\n-  return __builtin_arm_mcrr2 (__coproc, __opc1, __value, __CRm);\n+  __builtin_arm_mcrr2 (__coproc, __opc1, __value, __CRm);\n }\n \n __extension__ static __inline uint64_t __attribute__ ((__always_inline__))"}, {"sha": "52282f6c8a96f26a3c8960014c520cd1c062db38", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b2b9103a52b909f5df5ce20e3761f3f1d27211/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b2b9103a52b909f5df5ce20e3761f3f1d27211/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12b2b9103a52b909f5df5ce20e3761f3f1d27211", "patch": "@@ -1,3 +1,9 @@\n+2018-06-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/81497\n+\t* g++.target/arm/arm.exp: New file.\n+\t* g++.target/arm/pr81497.C: Likewise.\n+\n 2018-06-05  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* gcc.target/s390/htm-builtins-compile-4.c: New test."}, {"sha": "1a169d2f22021126d0f0057395b2474c4085cb5a", "filename": "gcc/testsuite/g++.target/arm/arm.exp", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b2b9103a52b909f5df5ce20e3761f3f1d27211/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Farm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b2b9103a52b909f5df5ce20e3761f3f1d27211/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Farm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Farm.exp?ref=12b2b9103a52b909f5df5ce20e3761f3f1d27211", "patch": "@@ -0,0 +1,50 @@\n+#  Specific regression driver for arm.\n+#  Copyright (C) 2009-2018 Free Software Foundation, Inc.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an arm target.\n+if {![istarget arm*-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+global DEFAULT_CXXFLAGS\n+if ![info exists DEFAULT_CXXFLAGS] then {\n+    set DEFAULT_CXXFLAGS \" -pedantic-errors\"\n+}\n+\n+\n+global dg_runtest_extra_prunes\n+set dg_runtest_extra_prunes \"\"\n+lappend dg_runtest_extra_prunes \"warning: switch -m(cpu|arch)=.* conflicts with -m(cpu|arch)=.* switch\"\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \\\n+        \"\" $DEFAULT_CXXFLAGS\n+\n+# All done.\n+set dg_runtest_extra_prunes \"\"\n+dg-finish\n+"}, {"sha": "0519a3a30452b87f38e1687783b09ea810bf0b85", "filename": "gcc/testsuite/g++.target/arm/pr81497.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b2b9103a52b909f5df5ce20e3761f3f1d27211/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Fpr81497.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b2b9103a52b909f5df5ce20e3761f3f1d27211/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Fpr81497.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Farm%2Fpr81497.C?ref=12b2b9103a52b909f5df5ce20e3761f3f1d27211", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+\n+#include <arm_acle.h>\n+\n+int main ()\n+{\n+  return 0;\n+}"}]}