{"sha": "634790f4bda50db3cde193beeb9141b7a079ac21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM0NzkwZjRiZGE1MGRiM2NkZTE5M2JlZWI5MTQxYjdhMDc5YWMyMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-10-16T18:41:49Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-10-16T18:41:49Z"}, "message": "typeck.c (qualify_type): Remove.\n\n\t* typeck.c (qualify_type): Remove.\n\t(composite_pointer_type): Fix handling of conversions to `cv void*'.\n\nFrom-SVN: r36889", "tree": {"sha": "bec41353bb57585688f9c8d2f039941dbe3eb3e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bec41353bb57585688f9c8d2f039941dbe3eb3e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/634790f4bda50db3cde193beeb9141b7a079ac21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634790f4bda50db3cde193beeb9141b7a079ac21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/634790f4bda50db3cde193beeb9141b7a079ac21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634790f4bda50db3cde193beeb9141b7a079ac21/comments", "author": null, "committer": null, "parents": [{"sha": "ebd5daee50cb7f127bf034da15ae9eb47fe0b2f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebd5daee50cb7f127bf034da15ae9eb47fe0b2f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebd5daee50cb7f127bf034da15ae9eb47fe0b2f4"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "262405c1c4a4a5ac500cba11ef655041221c2093", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634790f4bda50db3cde193beeb9141b7a079ac21/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634790f4bda50db3cde193beeb9141b7a079ac21/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=634790f4bda50db3cde193beeb9141b7a079ac21", "patch": "@@ -1,3 +1,8 @@\n+2000-10-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* typeck.c (qualify_type): Remove.\n+\t(composite_pointer_type): Fix handling of conversions to `cv void*'.\n+\n 2000-10-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (parse.c, parse.h): Fix think-o in last patch."}, {"sha": "c26580836c8064c8586be15c4ce0aaa9c5aa370f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634790f4bda50db3cde193beeb9141b7a079ac21/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634790f4bda50db3cde193beeb9141b7a079ac21/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=634790f4bda50db3cde193beeb9141b7a079ac21", "patch": "@@ -57,7 +57,6 @@ static tree common_base_type PARAMS ((tree, tree));\n static tree lookup_anon_field PARAMS ((tree, tree));\n static tree pointer_diff PARAMS ((tree, tree, tree));\n static tree build_component_addr PARAMS ((tree, tree));\n-static tree qualify_type PARAMS ((tree, tree));\n static tree qualify_type_recursive PARAMS ((tree, tree));\n static tree get_delta_difference PARAMS ((tree, tree, int));\n static int comp_cv_target_types PARAMS ((tree, tree, int));\n@@ -196,18 +195,6 @@ type_unknown_p (exp)\n \t      && TREE_TYPE (TREE_TYPE (exp)) == unknown_type_node));\n }\n \n-/* Return a variant of TYPE which has all the type qualifiers of LIKE\n-   as well as those of TYPE.  */\n-\n-static tree\n-qualify_type (type, like)\n-     tree type, like;\n-{\n-  /* @@ Must do member pointers here.  */\n-  return cp_build_qualified_type (type, (CP_TYPE_QUALS (type) \n-\t\t\t\t\t | CP_TYPE_QUALS (like)));\n-}\n-\n /* Return a pointer or pointer to member type similar to T1, with a\n    cv-qualification signature that is the union of the cv-qualification\n    signatures of T1 and T2: [expr.rel], [expr.eq].  */\n@@ -473,17 +460,34 @@ composite_pointer_type (t1, t2, arg1, arg2, location)\n   if (TYPE_PTRMEMFUNC_P (t2))\n     t2 = TYPE_PTRMEMFUNC_FN_TYPE (t2);\n   \n-  if (VOID_TYPE_P (TREE_TYPE (t1)))\n+  /* We have:\n+\n+       [expr.rel]\n+\n+       If one of the operands has type \"pointer to cv1 void*\", then\n+       the other has type \"pointer to cv2T\", and the composite pointer\n+       type is \"pointer to cv12 void\", where cv12 is the union of cv1\n+       and cv2.\n+\n+    If either type is a pointer to void, make sure it is T1.  */\n+  if (VOID_TYPE_P (TREE_TYPE (t2)))\n     {\n-      if (pedantic && TYPE_PTRFN_P (t2))\n-\tpedwarn (\"ISO C++ forbids %s between pointer of type `void *' and pointer-to-function\", location);\n-      result_type = qualify_type (t1, t2);\n+      tree t;\n+      t = t1;\n+      t1 = t2;\n+      t2 = t;\n     }\n-  else if (VOID_TYPE_P (TREE_TYPE (t2)))\n+  /* Now, if T1 is a pointer to void, merge the qualifiers.  */\n+  if (VOID_TYPE_P (TREE_TYPE (t1)))\n     {\n-      if (pedantic && TYPE_PTRFN_P (t1))\n+      if (pedantic && TYPE_PTRFN_P (t2))\n \tpedwarn (\"ISO C++ forbids %s between pointer of type `void *' and pointer-to-function\", location);\n-      result_type = qualify_type (t2, t1);\n+      t1 = TREE_TYPE (t1);\n+      t2 = TREE_TYPE (t2);\n+      result_type = cp_build_qualified_type (void_type_node,\n+\t\t\t\t\t     (CP_TYPE_QUALS (t1)\n+\t\t\t\t\t      | CP_TYPE_QUALS (t2)));\n+      result_type = build_pointer_type (result_type);\n     }\n   else\n     {"}, {"sha": "14a180c9d676cf12f654f3c46c64cc294359a413", "filename": "gcc/testsuite/g++.old-deja/g++.other/cvqual1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634790f4bda50db3cde193beeb9141b7a079ac21/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcvqual1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634790f4bda50db3cde193beeb9141b7a079ac21/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcvqual1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcvqual1.C?ref=634790f4bda50db3cde193beeb9141b7a079ac21", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+int i = 3;\n+void *pv=&i;\n+const void* pcv=&i;\n+int main() \n+{ \n+    pcv = 0 ? pv : pcv;\n+}"}]}