{"sha": "b0a93386835974128995f49fe29a766f923bed18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBhOTMzODY4MzU5NzQxMjg5OTVmNDlmZTI5YTc2NmY5MjNiZWQxOA==", "commit": {"author": {"name": "Kevin Buettner", "email": "kevinb@redhat.com", "date": "2002-05-23T06:50:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-23T06:50:32Z"}, "message": "dbxout.c (dbxout_class_name_qualifiers): New function.\n\n        * dbxout.c (dbxout_class_name_qualifiers): New function.\n        (dbxout_symbol): Output class/struct qualifiers for a .stabs entry.\n\nFrom-SVN: r53766", "tree": {"sha": "bd63189555bb9e9827501ea388ecf086e375012c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd63189555bb9e9827501ea388ecf086e375012c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0a93386835974128995f49fe29a766f923bed18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a93386835974128995f49fe29a766f923bed18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0a93386835974128995f49fe29a766f923bed18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a93386835974128995f49fe29a766f923bed18/comments", "author": {"login": "KevinBuettner", "id": 65747518, "node_id": "MDQ6VXNlcjY1NzQ3NTE4", "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KevinBuettner", "html_url": "https://github.com/KevinBuettner", "followers_url": "https://api.github.com/users/KevinBuettner/followers", "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}", "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}", "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions", "organizations_url": "https://api.github.com/users/KevinBuettner/orgs", "repos_url": "https://api.github.com/users/KevinBuettner/repos", "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}", "received_events_url": "https://api.github.com/users/KevinBuettner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bdee42b16c0af056a289dbcb61ba70917ba7f83b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdee42b16c0af056a289dbcb61ba70917ba7f83b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdee42b16c0af056a289dbcb61ba70917ba7f83b"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "565e25b8915d18de97f09d6f03468bf0425b3dee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a93386835974128995f49fe29a766f923bed18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a93386835974128995f49fe29a766f923bed18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0a93386835974128995f49fe29a766f923bed18", "patch": "@@ -1,3 +1,8 @@\n+2002-05-22  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* dbxout.c (dbxout_class_name_qualifiers): New function.\n+\t(dbxout_symbol): Output class/struct qualifiers for a .stabs entry.\n+\n 2002-05-23  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cpperror.c (_cpp_begin_message): No special casing"}, {"sha": "ddebf51355d6f75c87d0d7571ae04df1fc17788d", "filename": "gcc/dbxout.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a93386835974128995f49fe29a766f923bed18/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a93386835974128995f49fe29a766f923bed18/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=b0a93386835974128995f49fe29a766f923bed18", "patch": "@@ -308,6 +308,7 @@ static void print_int_cst_octal\t\tPARAMS ((tree));\n static void print_octal\t\t\tPARAMS ((unsigned HOST_WIDE_INT, int));\n static void print_wide_int\t\tPARAMS ((HOST_WIDE_INT));\n static void dbxout_type_name\t\tPARAMS ((tree));\n+static void dbxout_class_name_qualifiers PARAMS ((tree));\n static int dbxout_symbol_location\tPARAMS ((tree, tree, const char *, rtx));\n static void dbxout_symbol_name\t\tPARAMS ((tree, const char *, int));\n static void dbxout_prepare_symbol\tPARAMS ((tree));\n@@ -1827,6 +1828,33 @@ dbxout_type_name (type)\n   fprintf (asmfile, \"%s\", IDENTIFIER_POINTER (t));\n   CHARS (IDENTIFIER_LENGTH (t));\n }\n+\n+/* Output leading leading struct or class names needed for qualifying\n+   type whose scope is limited to a struct or class.  */\n+\n+static void\n+dbxout_class_name_qualifiers (decl)\n+     tree decl;\n+{\n+  tree context = decl_type_context (decl);\n+\n+  if (context != NULL_TREE \n+      && TREE_CODE(context) == RECORD_TYPE\n+      && TYPE_NAME (context) != 0 \n+      && (TREE_CODE (TYPE_NAME (context)) == IDENTIFIER_NODE\n+          || (DECL_NAME (TYPE_NAME (context)) != 0)))\n+    {\n+      tree name = TYPE_NAME (context);\n+\n+      if (TREE_CODE (name) == TYPE_DECL)\n+\t{\n+\t  dbxout_class_name_qualifiers (name);\n+\t  name = DECL_NAME (name);\n+\t}\n+      fprintf (asmfile, \"%s::\", IDENTIFIER_POINTER (name));\n+      CHARS (IDENTIFIER_LENGTH (name) + 2);\n+    }\n+}\n \f\n /* Output a .stabs for the symbol defined by DECL,\n    which must be a ..._DECL node in the normal namespace.\n@@ -1968,9 +1996,17 @@ dbxout_symbol (decl, local)\n \t\tdbxout_finish_symbol (NULL_TREE);\n \t      }\n \n+\t    /* Output .stabs (or whatever) and leading double quote.  */\n+\t    fprintf (asmfile, \"%s\\\"\", ASM_STABS_OP);\n+\n+\t    if (use_gnu_debug_info_extensions)\n+\t      {\n+\t\t/* Output leading class/struct qualifiers.  */\n+\t\tdbxout_class_name_qualifiers (decl);\n+\t      }\n+\n \t    /* Output typedef name.  */\n-\t    fprintf (asmfile, \"%s\\\"%s:\", ASM_STABS_OP,\n-\t\t     IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\t    fprintf (asmfile, \"%s:\", IDENTIFIER_POINTER (DECL_NAME (decl)));\n \n \t    /* Short cut way to output a tag also.  */\n \t    if ((TREE_CODE (type) == RECORD_TYPE"}]}