{"sha": "d8e1f1d24179690fd9c0f63c27b12e030010d9ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlMWYxZDI0MTc5NjkwZmQ5YzBmNjNjMjdiMTJlMDMwMDEwZDllYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-07T10:09:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-27T13:17:34Z"}, "message": "tree-optimization/99912 - schedule DSE before SRA\n\nFor the testcase in the PR the main SRA pass is unable to do some\nimportant scalarizations because dead stores of addresses make\nthe candiate variables disqualified.  The following patch adds\nanother DSE pass before SRA forming a DCE/DSE pair and moves the\nDSE pass that is currently closely after SRA up to after the\nnext DCE pass, forming another DCE/DSE pair now residing after PRE.\n\n2021-04-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/99912\n\t* passes.def (pass_all_optimizations): Add pass_dse before\n\tthe first pass_dce, move the first pass_dse before the\n\tpass_dce following pass_pre.\n\n\t* gcc.dg/tree-ssa/ldist-33.c: Disable PRE and LIM.\n\t* gcc.dg/tree-ssa/pr96789.c: Adjust dump file scanned.\n\t* gcc.dg/tree-ssa/ssa-dse-28.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dse-29.c: Likewise.", "tree": {"sha": "1345f61b38815741d1756b78f1eb403646e2269f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1345f61b38815741d1756b78f1eb403646e2269f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8e1f1d24179690fd9c0f63c27b12e030010d9ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e1f1d24179690fd9c0f63c27b12e030010d9ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e1f1d24179690fd9c0f63c27b12e030010d9ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e1f1d24179690fd9c0f63c27b12e030010d9ea/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39073938b4e85fdbdc897c32e56fb5fc59ded9b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39073938b4e85fdbdc897c32e56fb5fc59ded9b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39073938b4e85fdbdc897c32e56fb5fc59ded9b5"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "61fe9fdc42c48e3a39aecbd2635a9863509a2f8b", "filename": "gcc/passes.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e1f1d24179690fd9c0f63c27b12e030010d9ea/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e1f1d24179690fd9c0f63c27b12e030010d9ea/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=d8e1f1d24179690fd9c0f63c27b12e030010d9ea", "patch": "@@ -210,6 +210,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_merge_phi);\n       NEXT_PASS (pass_thread_jumps);\n       NEXT_PASS (pass_vrp, true /* warn_array_bounds_p */);\n+      NEXT_PASS (pass_dse);\n       NEXT_PASS (pass_dce);\n       NEXT_PASS (pass_stdarg);\n       NEXT_PASS (pass_call_cdce);\n@@ -236,7 +237,6 @@ along with GCC; see the file COPYING3.  If not see\n       /* Identify paths that should never be executed in a conforming\n \t program and isolate those paths.  */\n       NEXT_PASS (pass_isolate_erroneous_paths);\n-      NEXT_PASS (pass_dse);\n       NEXT_PASS (pass_reassoc, true /* insert_powi_p */);\n       NEXT_PASS (pass_dce);\n       NEXT_PASS (pass_forwprop);\n@@ -254,6 +254,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_sancov);\n       NEXT_PASS (pass_asan);\n       NEXT_PASS (pass_tsan);\n+      NEXT_PASS (pass_dse);\n       NEXT_PASS (pass_dce);\n       /* Pass group that runs when 1) enabled, 2) there are loops\n \t in the function.  Make sure to run pass_fix_loops before"}, {"sha": "67846a5b183f1b7508b62741e07278b9b9f265ae", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-33.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e1f1d24179690fd9c0f63c27b12e030010d9ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e1f1d24179690fd9c0f63c27b12e030010d9ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-33.c?ref=d8e1f1d24179690fd9c0f63c27b12e030010d9ea", "patch": "@@ -1,5 +1,8 @@\n /* { dg-do compile { target size32plus } } */\n-/* { dg-options \"-O2 -ftree-loop-distribution -ftree-loop-distribute-patterns -fdump-tree-ldist-details\" } */\n+/* The desire is to show we can generate a memset from the outer loop\n+   store.  Both store motion and PRE expose a DSE opportunity for this\n+   zeroing - while desirable this defeats the purpose of this testcase.  */\n+/* { dg-options \"-O2 -fno-tree-loop-im -fno-tree-pre -ftree-loop-distribution -ftree-loop-distribute-patterns -fdump-tree-ldist-details\" } */\n \n #define N (1024)\n double a[N][N], b[N][N], c[N][N];"}, {"sha": "4d4d4c8ac6f8178c7a5fe6e473d5e3afa905202a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96789.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e1f1d24179690fd9c0f63c27b12e030010d9ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96789.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e1f1d24179690fd9c0f63c27b12e030010d9ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96789.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96789.c?ref=d8e1f1d24179690fd9c0f63c27b12e030010d9ea", "patch": "@@ -58,4 +58,4 @@ bar (int16_t res[16], uint8_t *val1, uint8_t *val2)\n     }\n }\n \n-/* { dg-final { scan-tree-dump {Deleted dead store:.*tmp} \"dse3\" } } */\n+/* { dg-final { scan-tree-dump {Deleted dead store:.*tmp} \"dse4\" } } */"}, {"sha": "3bf4e76c9653c264d9c00964c7bc655f29a42151", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-28.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e1f1d24179690fd9c0f63c27b12e030010d9ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e1f1d24179690fd9c0f63c27b12e030010d9ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-28.c?ref=d8e1f1d24179690fd9c0f63c27b12e030010d9ea", "patch": "@@ -17,5 +17,6 @@ int foo (int *p, int b)\n \n /* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse1\"} } */\n /* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse2\"} } */\n-/* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse4\"} } */\n+/* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse3\"} } */\n+/* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse5\"} } */\n "}, {"sha": "4990ae0d18c8943089688711f649ed9fae5ae37f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-29.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e1f1d24179690fd9c0f63c27b12e030010d9ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e1f1d24179690fd9c0f63c27b12e030010d9ea/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-29.c?ref=d8e1f1d24179690fd9c0f63c27b12e030010d9ea", "patch": "@@ -22,5 +22,6 @@ foo(int cond, struct z *s)\n \n /* { dg-final { scan-tree-dump-times \"Deleted dead store\" 3 \"dse1\"} } */\n /* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse2\"} } */\n-/* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse4\"} } */\n+/* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse3\"} } */\n+/* { dg-final { scan-tree-dump-not \"Deleted dead store\" \"dse5\"} } */\n "}]}