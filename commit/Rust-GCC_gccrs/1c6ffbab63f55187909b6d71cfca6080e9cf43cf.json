{"sha": "1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM2ZmZiYWI2M2Y1NTE4NzkwOWI2ZDcxY2ZjYTYwODBlOWNmNDNjZg==", "commit": {"author": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2019-07-02T20:23:30Z"}, "committer": {"name": "Qing Zhao", "email": "qinzhao@gcc.gnu.org", "date": "2019-07-02T20:23:30Z"}, "message": "re PR preprocessor/90581 (provide an option to adjust the maximum depth of nested #include)\n\nPR preprocessor/90581\nAdd a cpp option -fmax-include-depth to set the maximum depth of the nested #include.\n\nFrom-SVN: r272948", "tree": {"sha": "679d86bed67edce3cb9d5cbc6390c7cbaa52e899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/679d86bed67edce3cb9d5cbc6390c7cbaa52e899"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/comments", "author": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "709877bf765cbef2d758ecb48c6e34b94e8a7151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/709877bf765cbef2d758ecb48c6e34b94e8a7151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/709877bf765cbef2d758ecb48c6e34b94e8a7151"}], "stats": {"total": 65, "additions": 59, "deletions": 6}, "files": [{"sha": "62b126fb5b80ff6be84546f86818e0df930f1c4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -1,3 +1,9 @@\n+2019-07-02  qing zhao  <qing.zhao@oracle.com>\n+\n+\tPR preprocessor/90581\n+\t* doc/cppopts.texi: Add document for -fmax-include-depth.\n+\t* doc/invoke.texi (Preprocessor Options): List -fmax-include-depth.\n+\n 2019-07-02  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/mmx.md (mmx_pack<s_trunsuffix>swb):"}, {"sha": "e56bd7a8e35e9788a3134f792551dca1130a3cb8", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -1,3 +1,9 @@\n+2019-07-02  qing zhao  <qing.zhao@oracle.com>\n+\n+\tPR preprocessor/90581\n+\t* c-opts.c (c_common_handle_option): Handle -fmax-include-depth.\n+\t* c.opt: Add new option -fmax-include-depth.\n+\n 2019-06-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/55442 - memory-hog with highly recursive constexpr."}, {"sha": "188da437507f3d607c8f509790a546c865a3adbb", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -460,6 +460,10 @@ c_common_handle_option (size_t scode, const char *arg, HOST_WIDE_INT value,\n       cpp_opts->extended_identifiers = value;\n       break;\n \n+    case OPT_fmax_include_depth_:\n+\tcpp_opts->max_include_depth = value;\n+      break;\n+\n     case OPT_foperator_names:\n       cpp_opts->operator_names = value;\n       break;"}, {"sha": "4c8b00260008d26873b3fbb174b437a2ffb03875", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -1575,6 +1575,10 @@ flax-vector-conversions\n C ObjC C++ ObjC++ Var(flag_lax_vector_conversions)\n Allow implicit conversions between vectors with differing numbers of subparts and/or differing element types.\n \n+fmax-include-depth=\n+C ObjC C++ ObjC++ Joined RejectNegative UInteger\n+fmax-include-depth=<number> Set the maximum depth of the nested #include.\n+\n fms-extensions\n C ObjC C++ ObjC++ Var(flag_ms_extensions)\n Don't warn about uses of Microsoft extensions."}, {"sha": "61e22cd93aef3184ced1b9c00a204d64a53834b8", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -261,6 +261,10 @@ enabled by default for C99 (and later C standard versions) and C++.\n @opindex fno-canonical-system-headers\n When preprocessing, do not shorten system header paths with canonicalization.\n \n+@item -fmax-include-depth=@var{depth}\n+@opindex fmax-include-depth\n+Set the maximum depth of the nested #include. The default is 200. \n+\n @item -ftabstop=@var{width}\n @opindex ftabstop\n Set the distance between tab stops.  This helps the preprocessor report"}, {"sha": "ae1a7d252779f70c6308c75aa12141ef1a3d8242", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -518,6 +518,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdebug-cpp  -fdirectives-only  -fdollars-in-identifiers  @gol\n -fexec-charset=@var{charset}  -fextended-identifiers  @gol\n -finput-charset=@var{charset}  -fmacro-prefix-map=@var{old}=@var{new}  @gol\n+-fmax-include-depth=@var{depth} @gol\n -fno-canonical-system-headers  -fpch-deps  -fpch-preprocess  @gol\n -fpreprocessed  -ftabstop=@var{width}  -ftrack-macro-expansion  @gol\n -fwide-exec-charset=@var{charset}  -fworking-directory @gol"}, {"sha": "55deef7255dc20a505c5de63de8ad006339e200a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -1,3 +1,10 @@\n+2019-07-02  qing zhao  <qing.zhao@oracle.com>\n+\n+\tPR preprocessor/90581\n+\t* c-c++-common/cpp/fmax-include-depth-1a.h: New test.\n+\t* c-c++-common/cpp/fmax-include-depth-1b.h: New test.\n+\t* c-c++-common/cpp/fmax-include-depth.c: New test.\n+\n 2019-07-02  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/tree-ssa/alias-access-path-7.c: New testcase."}, {"sha": "4e610c04d58371663d95ca8237eea260b08f090c", "filename": "gcc/testsuite/c-c++-common/cpp/fmax-include-depth-1a.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffmax-include-depth-1a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffmax-include-depth-1a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffmax-include-depth-1a.h?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -0,0 +1 @@\n+int a;"}, {"sha": "c167587ebbe3a5037b83bb2e6dce01eb89832374", "filename": "gcc/testsuite/c-c++-common/cpp/fmax-include-depth-1b.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffmax-include-depth-1b.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffmax-include-depth-1b.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffmax-include-depth-1b.h?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -0,0 +1 @@\n+#include \"fmax-include-depth-1a.h\""}, {"sha": "bd8cc3adcdd704f7271417e95281dd7f410da3c0", "filename": "gcc/testsuite/c-c++-common/cpp/fmax-include-depth.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffmax-include-depth.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffmax-include-depth.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffmax-include-depth.c?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do preprocess} */\n+/* { dg-options \"-fmax-include-depth=1\" } */\n+\n+#include \"fmax-include-depth-1b.h\" /* { dg-error \".include nested depth 1 exceeds maximum of 1 .use -fmax-include-depth=DEPTH to increase the maximum.\" } */"}, {"sha": "a3185e3109c459a1be2b38ab9f8b5e8e98f4e8dc", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -1,3 +1,13 @@\n+2019-07-02  qing zhao  <qing.zhao@oracle.com>\n+\n+\tPR preprocessor/90581\n+\t* directives.c (do_include_common): Replace CPP_STACK_MAX with\n+\tCPP_OPTION (pfile, max_include_depth).\n+\t* include/cpplib.h (struct cpp_options): Add new field\n+\tmax_include_depth.\n+\t* init.c (cpp_create_reader): Initiate new field max_include_depth.\n+\t* internal.h: Delete CPP_STACK_MAX.\n+\n 2019-06-26  Nathan Sidwell  <nathan@acm.org>\n \n \tPR preprocessor/90927"}, {"sha": "2fdfaf0242c8b8a1b78b87edb2c2d289efbda777", "filename": "libcpp/directives.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -831,8 +831,13 @@ do_include_common (cpp_reader *pfile, enum include_type type)\n     }\n \n   /* Prevent #include recursion.  */\n-  if (pfile->line_table->depth >= CPP_STACK_MAX)\n-    cpp_error (pfile, CPP_DL_ERROR, \"#include nested too deeply\");\n+  if (pfile->line_table->depth >= CPP_OPTION (pfile, max_include_depth))\n+    cpp_error (pfile, \n+\t       CPP_DL_ERROR, \n+\t       \"#include nested depth %u exceeds maximum of %u\"\n+\t       \" (use -fmax-include-depth=DEPTH to increase the maximum)\",\n+\t       pfile->line_table->depth,\n+\t       CPP_OPTION (pfile, max_include_depth));\n   else\n     {\n       /* Get out of macro context, if we are.  */"}, {"sha": "91d97f9f097f9da542187785cfc259489bcd1428", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -550,6 +550,9 @@ struct cpp_options\n \n   /* True enables canonicalization of system header file paths. */\n   bool canonical_system_headers;\n+\n+  /* The maximum depth of the nested #include.  */\n+  unsigned int max_include_depth;\n };\n \n /* Diagnostic levels.  To get a diagnostic without associating a"}, {"sha": "d06f95e68b0acd936c56ee303c26b30fcaceda2b", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -185,6 +185,7 @@ cpp_create_reader (enum c_lang lang, cpp_hash_table *table,\n   CPP_OPTION (pfile, warn_multichar) = 1;\n   CPP_OPTION (pfile, discard_comments) = 1;\n   CPP_OPTION (pfile, discard_comments_in_macro_exp) = 1;\n+  CPP_OPTION (pfile, max_include_depth) = 200;\n   CPP_OPTION (pfile, tabstop) = 8;\n   CPP_OPTION (pfile, operator_names) = 1;\n   CPP_OPTION (pfile, warn_trigraphs) = 2;"}, {"sha": "0ab44706864063155e3c13da67f7c437cb2ee850", "filename": "libcpp/internal.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6ffbab63f55187909b6d71cfca6080e9cf43cf/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=1c6ffbab63f55187909b6d71cfca6080e9cf43cf", "patch": "@@ -74,10 +74,6 @@ struct cset_converter\n     linemap_line_start (PFILE->line_table, line + 1, COLS_HINT); \\\n   } while (0)\n \n-/* Maximum nesting of cpp_buffers.  We use a static limit, partly for\n-   efficiency, and partly to limit runaway recursion.  */\n-#define CPP_STACK_MAX 200\n-\n /* Host alignment handling.  */\n struct dummy\n {"}]}