{"sha": "271be653c4dcd3c62aad517b1438e9bcbcae5b11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcxYmU2NTNjNGRjZDNjNjJhYWQ1MTdiMTQzOGU5YmNiY2FlNWIxMQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-06-08T20:51:42Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-06-08T20:51:42Z"}, "message": "rs6000.c (rs6000_gimple_fold_builtin): Add handling for early expansion of vec_eqv.\n\n[gcc]\n\n2017-06-08  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling\n\tfor early expansion of vec_eqv.\n\n[gcc/testsuite]\n\n2017-06-08  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-char.c: New.\n\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-float.c: New.\n\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-floatdouble.c: New.\n\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-int.c: New.\n\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-longlong.c: New.\n\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-short.c: New.\n\nFrom-SVN: r249040", "tree": {"sha": "2c7144db1ee3c7522b684db6835425505a032153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c7144db1ee3c7522b684db6835425505a032153"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/271be653c4dcd3c62aad517b1438e9bcbcae5b11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271be653c4dcd3c62aad517b1438e9bcbcae5b11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/271be653c4dcd3c62aad517b1438e9bcbcae5b11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271be653c4dcd3c62aad517b1438e9bcbcae5b11/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ab7005b1420687c0e31a28a4e6e9fd05bb7f22e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab7005b1420687c0e31a28a4e6e9fd05bb7f22e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab7005b1420687c0e31a28a4e6e9fd05bb7f22e"}], "stats": {"total": 184, "additions": 184, "deletions": 0}, "files": [{"sha": "64f6e15a8b9b60de0f7c81e0d4bfd699a07f0702", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=271be653c4dcd3c62aad517b1438e9bcbcae5b11", "patch": "@@ -1,3 +1,8 @@\n+2017-06-08  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling\n+\tfor early expansion of vec_eqv.\n+\n 2017-06-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/81005"}, {"sha": "941c0c224b884ef9198127a2bd99c097c1810263", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=271be653c4dcd3c62aad517b1438e9bcbcae5b11", "patch": "@@ -16568,6 +16568,26 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \tgsi_replace (gsi, g, true);\n \treturn true;\n       }\n+    /* Flavors of vec_eqv.  */\n+    case P8V_BUILTIN_EQV_V16QI:\n+    case P8V_BUILTIN_EQV_V8HI:\n+    case P8V_BUILTIN_EQV_V4SI:\n+    case P8V_BUILTIN_EQV_V4SF:\n+    case P8V_BUILTIN_EQV_V2DF:\n+    case P8V_BUILTIN_EQV_V2DI:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\targ1 = gimple_call_arg (stmt, 1);\n+\tlhs = gimple_call_lhs (stmt);\n+\ttree temp = create_tmp_reg_or_ssa_name (TREE_TYPE (arg1));\n+\tgimple *g = gimple_build_assign (temp, BIT_XOR_EXPR, arg0, arg1);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\tg = gimple_build_assign (lhs, BIT_NOT_EXPR, temp);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n+      }\n     default:\n       break;\n     }"}, {"sha": "7b0e74ab6929f922546b692612804b439f682f58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=271be653c4dcd3c62aad517b1438e9bcbcae5b11", "patch": "@@ -1,3 +1,12 @@\n+2017-06-08  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-char.c: New.\n+\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-float.c: New.\n+\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-floatdouble.c: New.\n+\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-int.c: New.\n+\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-longlong.c: New.\n+\t* testsuite/gcc.target/powerpc/fold-vec-logical-eqv-short.c: New.\n+\n 2017-06-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/81006"}, {"sha": "6810848dee1c071132e6786ea17955bd93d46f5c", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-logical-eqv-char.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-char.c?ref=271be653c4dcd3c62aad517b1438e9bcbcae5b11", "patch": "@@ -0,0 +1,28 @@\n+/* Verify that overloaded built-ins for vec_eqv with char\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool char\n+test1 (vector bool char x, vector bool char y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+vector signed char\n+test3 (vector signed char x, vector signed char y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+vector unsigned char\n+test6 (vector unsigned char x, vector unsigned char y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xxleqv\" 3 } } */"}, {"sha": "d206cfe7d663e0e1bf78b909e8ca2c3895ac0f91", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-logical-eqv-float.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-float.c?ref=271be653c4dcd3c62aad517b1438e9bcbcae5b11", "patch": "@@ -0,0 +1,16 @@\n+/* Verify that overloaded built-ins for vec_eqv with float\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+test1 (vector float x, vector float y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xxleqv\" 1 } } */"}, {"sha": "56b7cac503dd33364c7118216eaa77e33c6e6da3", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-logical-eqv-floatdouble.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-floatdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-floatdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-floatdouble.c?ref=271be653c4dcd3c62aad517b1438e9bcbcae5b11", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that overloaded built-ins for vec_eqv with float and\n+   double inputs for VSX produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+test1 (vector float x, vector float y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+vector double\n+test2 (vector double x, vector double y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xxleqv\" 2 } } */"}, {"sha": "f5d292e8550de62801cad1490156f4bbd3d9bdf2", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-logical-eqv-int.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-int.c?ref=271be653c4dcd3c62aad517b1438e9bcbcae5b11", "patch": "@@ -0,0 +1,28 @@\n+/* Verify that overloaded built-ins for vec_eqv with int\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+test1 (vector bool int x, vector bool int y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+vector signed int\n+test3 (vector signed int x, vector signed int y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+vector unsigned int\n+test6 (vector unsigned int x, vector unsigned int y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xxleqv\" 3 } } */"}, {"sha": "342b2bd8ec74294d066e5c0a481f0365e3fc8394", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-logical-eqv-longlong.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-longlong.c?ref=271be653c4dcd3c62aad517b1438e9bcbcae5b11", "patch": "@@ -0,0 +1,28 @@\n+/* Verify that overloaded built-ins for vec_eqv with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool long long\n+test1 (vector bool long long x, vector bool long long y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+vector signed long long\n+test3 (vector signed long long x, vector signed long long y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+vector unsigned long long\n+test6 (vector unsigned long long x, vector unsigned long long y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xxleqv\" 3 } } */"}, {"sha": "79ca8aa9029689ec1054774c7af563774d6a6a81", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-logical-eqv-short.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271be653c4dcd3c62aad517b1438e9bcbcae5b11/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-logical-eqv-short.c?ref=271be653c4dcd3c62aad517b1438e9bcbcae5b11", "patch": "@@ -0,0 +1,28 @@\n+/* Verify that overloaded built-ins for vec_eqv with short\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool short\n+test1 (vector bool short x, vector bool short y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+vector signed short\n+test3 (vector signed short x, vector signed short y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+vector unsigned short\n+test6 (vector unsigned short x, vector unsigned short y)\n+{\n+  return vec_eqv (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xxleqv\" 3 } } */"}]}