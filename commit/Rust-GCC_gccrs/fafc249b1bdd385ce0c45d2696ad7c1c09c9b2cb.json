{"sha": "fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFmYzI0OWIxYmRkMzg1Y2UwYzQ1ZDI2OTZhZDdjMWMwOWM5YjJjYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-01-12T23:08:23Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-01-12T23:08:23Z"}, "message": "natGtkComponentPeer.cc (getLocationOnScreen): Wrote.\n\n\t* gnu/awt/gtk/natGtkComponentPeer.cc (getLocationOnScreen):\n\tWrote.\n\t(setCursor): Wrote.\n\tInclude Cursor.h.\n\t* gnu/awt/gtk/natGtkLabelPeer.cc: New file.\n\t* gnu/awt/gtk/natGtkButtonPeer.cc: New file.\n\t* gnu/awt/gtk/gtkcommon.h (class _Jv_GdkThreadLock): New class.\n\t* gnu/awt/gtk/GtkLabelPeer.java: New file.\n\t* gnu/awt/gtk/GtkButtonPeer.java: New file.\n\nFrom-SVN: r38967", "tree": {"sha": "93c6214e284eb3dd7dd0813a7627e79b23ff0df6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93c6214e284eb3dd7dd0813a7627e79b23ff0df6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/comments", "author": null, "committer": null, "parents": [{"sha": "ec7c0481a032ed51f976aee0bb88180ff8a34acf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec7c0481a032ed51f976aee0bb88180ff8a34acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec7c0481a032ed51f976aee0bb88180ff8a34acf"}], "stats": {"total": 320, "additions": 309, "deletions": 11}, "files": [{"sha": "a5b1503263172a4cf49cbf9af45cc1efc4696fbc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb", "patch": "@@ -1,5 +1,20 @@\n 2001-01-12  Tom Tromey  <tromey@redhat.com>\n \n+\t* gnu/awt/gtk/natGtkComponentPeer.cc (getLocationOnScreen):\n+\tWrote.\n+\t(setCursor): Wrote.\n+\tInclude Cursor.h.\n+\t* gnu/awt/gtk/natGtkLabelPeer.cc: New file.\n+\t* gnu/awt/gtk/natGtkButtonPeer.cc: New file.\n+\t* gnu/awt/gtk/gtkcommon.h (class _Jv_GdkThreadLock): New class.\n+\t* gnu/awt/gtk/GtkLabelPeer.java: New file.\n+\t* gnu/awt/gtk/GtkButtonPeer.java: New file.\n+\n+\t* java/awt/dnd/DropTargetListener.java: New file.\n+\t* java/awt/dnd/DragSourceListener.java: New file.\n+\t* java/awt/dnd/DragGestureListener.java: New file.\n+\t* java/awt/dnd/AutoScroll.java: New file.\n+\n \t* java/lang/natSystem.cc: Include locale.h if it exists.\n \t* configure: Rebuilt.\n \t* configure.in: Check for locale.h."}, {"sha": "c369ba5e9fb6e493cbd827a77dbbe980a372fb66", "filename": "libjava/gnu/awt/gtk/GtkButtonPeer.java", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkButtonPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkButtonPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkButtonPeer.java?ref=fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb", "patch": "@@ -0,0 +1,61 @@\n+/* GtkButtonPeer.java -- Implements ButtonPeer with GTK\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of the peer AWT libraries of GNU Classpath.\n+\n+This library is free software; you can redistribute it and/or modify\n+it under the terms of the GNU Library General Public License as published \n+by the Free Software Foundation, either version 2 of the License, or\n+(at your option) any later verion.\n+\n+This library is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public License\n+along with this library; if not, write to the Free Software Foundation\n+Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307 USA. */\n+\n+\n+package gnu.awt.gtk;\n+\n+import java.awt.*;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.peer.*;\n+\n+public class GtkButtonPeer extends GtkComponentPeer\n+    implements ButtonPeer\n+{\n+  protected native void create ();\n+  public native void setLabel (String label);\n+\n+  public GtkButtonPeer (Button b)\n+  {\n+    super (b);\n+  }\n+\n+  public void handleEvent (AWTEvent e)\n+  {\n+//      if (e.getID () == MouseEvent.MOUSE_CLICKED && isEnabled () \n+//  \t&& !modalHasGrab ())\n+//        {\n+//  \tMouseEvent me = (MouseEvent) e;\n+//  \tif (!me.isConsumed ()\n+//  \t    && (me.getModifiers () & MouseEvent.BUTTON1_MASK) != 0)\n+//  \t  postActionEvent (((Button)awtComponent).getActionCommand (), \n+//  \t\t\t   me.getModifiers ());\n+//        }\n+\n+//      if (e.getID () == KeyEvent.KEY_PRESSED)\n+//        {\n+//  \tKeyEvent ke = (KeyEvent) e;\n+//  \tif (!ke.isConsumed () && ke.getKeyCode () == KeyEvent.VK_SPACE)\n+//  \t  postActionEvent (((Button)awtComponent).getActionCommand (),\n+//  \t\t\t   ke.getModifiers ());\n+//        }\n+\n+    super.handleEvent (e);\n+  }\n+}"}, {"sha": "23876f9f0c314b8cd552bf3a42494008438d3908", "filename": "libjava/gnu/awt/gtk/GtkLabelPeer.java", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkLabelPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkLabelPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FGtkLabelPeer.java?ref=fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb", "patch": "@@ -0,0 +1,37 @@\n+/* GtkLabelPeer.java -- Implements LabelPeer with GTK\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of the peer AWT libraries of GNU Classpath.\n+\n+This library is free software; you can redistribute it and/or modify\n+it under the terms of the GNU Library General Public License as published \n+by the Free Software Foundation, either version 2 of the License, or\n+(at your option) any later verion.\n+\n+This library is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public License\n+along with this library; if not, write to the Free Software Foundation\n+Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307 USA. */\n+\n+\n+package gnu.awt.gtk;\n+\n+import java.awt.*;\n+import java.awt.peer.*;\n+\n+public class GtkLabelPeer extends GtkComponentPeer\n+    implements LabelPeer\n+{\n+  public GtkLabelPeer (Label l)\n+  {\n+    super (l);\n+  }\n+    \n+  public native void setText (String text);\n+  public native void setAlignment (int alignment);\n+  protected native void create ();\n+}"}, {"sha": "207d2cf1f0edd19d461cc4193da2f7c86f59cda7", "filename": "libjava/gnu/awt/gtk/gtkcommon.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2Fgnu%2Fawt%2Fgtk%2Fgtkcommon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2Fgnu%2Fawt%2Fgtk%2Fgtkcommon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2Fgtkcommon.h?ref=fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb", "patch": "@@ -17,6 +17,20 @@ details.  */\n \n #include <java/awt/Color.h>\n \n+class _Jv_GdkThreadLock\n+{\n+public:\n+  _Jv_GdkThreadLock ()\n+  {\n+    GDK_THREADS_ENTER ();\n+  }\n+\n+  ~_Jv_GdkThreadLock ()\n+  {\n+    GDK_THREADS_LEAVE ();\n+  }\n+};\n+\n // Convert AWT Color to gdk color value.\n static inline void \n _Jv_ConvertAwtColor(java::awt::Color* awtcolor, GdkColor* gdkcolor)"}, {"sha": "1608616f25e87a9ff72cbaa949c677f9c1930739", "filename": "libjava/gnu/awt/gtk/natGtkButtonPeer.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkButtonPeer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkButtonPeer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkButtonPeer.cc?ref=fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb", "patch": "@@ -0,0 +1,52 @@\n+// Native Gtk AWT button code\n+\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+\n+#include \"gtkcommon.h\"\n+#include <gnu/awt/gtk/GtkButtonPeer.h>\n+#include <java/awt/Button.h>\n+\n+void\n+gnu::awt::gtk::GtkButtonPeer::setLabel (java::lang::String *label)\n+{\n+  _Jv_GdkThreadLock sync;\n+  jsize len = 0;\n+  if (label)\n+    len = JvGetStringUTFLength (label);\n+  char buf[len + 1];\n+  // FIXME: this can allocate an unbounded amount.  Should use heap\n+  // even though it is slower.\n+  if (label)\n+    JvGetStringUTFRegion (label, 0, len, buf);\n+  buf[len] = '\\0';\n+  // The button child is a label.\n+  GtkBin *bin = GTK_BIN (ptr);\n+  gtk_label_set_text (GTK_LABEL (bin->child), buf);\n+}\n+\n+void\n+gnu::awt::gtk::GtkButtonPeer::create ()\n+{\n+  if (! ptr)\n+    {\n+      _Jv_GdkThreadLock sync;\n+      // This is a little inefficient.\n+      ptr = (gnu::gcj::RawData *) gtk_button_new_with_label (\"\");\n+\n+      using namespace ::java::awt;\n+      Button *button = reinterpret_cast<Button *> (awtComponent);\n+      setLabel (button->getLabel ());\n+    }\n+\n+  gnu::awt::gtk::GtkComponentPeer::create ();\n+}\n+\n+//  void\n+//  gnu::awt::gtk::GtkButtonPeer::clicked (::gnu::gcj::RawData *button_wrap,\n+//  \t\t\t\t       ::gnu::gcj::RawData *peer_wrap)\n+//  {\n+//    GtkButtonPeer *button = reinterpret_cast<GtkButtonPeer *> (peer_wrap);\n+  \n+//  }"}, {"sha": "d7b6c66e6f6f45e87e7757bbd20710b3f121cd28", "filename": "libjava/gnu/awt/gtk/natGtkComponentPeer.cc", "status": "modified", "additions": 71, "deletions": 11, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkComponentPeer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkComponentPeer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkComponentPeer.cc?ref=fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb", "patch": "@@ -5,14 +5,18 @@\n // Be aware: running `gcjh -stubs ' once more for this class may\n // overwrite any edits you have made to this file.\n \n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+\n #include <java/awt/Point.h>\n #include <java/awt/Dimension.h>\n+#include <java/awt/Cursor.h>\n+\n+#include \"gtkcommon.h\"\n \n #include <gnu/awt/gtk/GtkComponentPeer.h>\n-#include <gcj/cni.h>\n-#include <gtk/gtk.h>\n \n-#include \"gtkcommon.h\"\n \n void\n gnu::awt::gtk::GtkComponentPeer::dispose ()\n@@ -26,12 +30,10 @@ gnu::awt::gtk::GtkComponentPeer::dispose ()\n ::java::awt::Point *\n gnu::awt::gtk::GtkComponentPeer::getLocationOnScreen ()\n {\n-  GDK_THREADS_ENTER ();\n-  GDK_THREADS_LEAVE ();\n-  \n-  // FIXME\n-  \n-  return NULL;  \n+  gint x, y;\n+  _Jv_GdkThreadLock sync;\n+  gdk_window_get_root_origin (GTK_WIDGET (ptr)->window, &x, &y);\n+  return new ::java::awt::Point (x, y);\n }\n \n \n@@ -86,9 +88,67 @@ gnu::awt::gtk::GtkComponentPeer::setBounds (jint x, jint y,\n \n \n void\n-gnu::awt::gtk::GtkComponentPeer::setCursor (::java::awt::Cursor *)\n+gnu::awt::gtk::GtkComponentPeer::setCursor (::java::awt::Cursor *cursor)\n {\n-//  JvFail (\"gnu::awt::gtk::GtkComponentPeer::setCursor (::java::awt::Cursor *) not implemented\");\n+  GdkCursorType type;\n+\n+  switch (cursor->type)\n+    {\n+    case ::java::awt::Cursor::CROSSHAIR_CURSOR:\n+      type = GDK_CROSSHAIR;\n+      break;\n+    case ::java::awt::Cursor::TEXT_CURSOR:\n+      type = GDK_XTERM;\n+      break;\n+    case ::java::awt::Cursor::WAIT_CURSOR:\n+      type = GDK_WATCH;\n+      break;\n+    case ::java::awt::Cursor::SW_RESIZE_CURSOR:\n+      type = GDK_BOTTOM_LEFT_CORNER;\n+      break;\n+    case ::java::awt::Cursor::SE_RESIZE_CURSOR:\n+      type = GDK_BOTTOM_RIGHT_CORNER;\n+      break;\n+    case ::java::awt::Cursor::NW_RESIZE_CURSOR:\n+      type = GDK_TOP_LEFT_CORNER;\n+      break;\n+    case ::java::awt::Cursor::NE_RESIZE_CURSOR:\n+      type = GDK_TOP_RIGHT_CORNER;\n+      break;\n+    case ::java::awt::Cursor::N_RESIZE_CURSOR:\n+      type = GDK_TOP_SIDE;\n+      break;\n+    case ::java::awt::Cursor::S_RESIZE_CURSOR:\n+      type = GDK_RIGHT_SIDE;\n+      break;\n+    case ::java::awt::Cursor::W_RESIZE_CURSOR:\n+      type = GDK_LEFT_SIDE;\n+      break;\n+    case ::java::awt::Cursor::E_RESIZE_CURSOR:\n+      type = GDK_BOTTOM_SIDE;\n+      break;\n+    case ::java::awt::Cursor::HAND_CURSOR:\n+      type = GDK_HAND1;\n+      break;\n+    case ::java::awt::Cursor::MOVE_CURSOR:\n+      type = GDK_FLEUR;\n+      break;\n+    case ::java::awt::Cursor::CUSTOM_CURSOR:\n+      // FIXME: not implemented yet.  We want a gtk-specific subclass\n+      // of Cursor which holds a new gdk cursor.  For now, fall\n+      // through.\n+\n+    case ::java::awt::Cursor::DEFAULT_CURSOR:\n+    default:\n+      type = GDK_LEFT_PTR;\n+      break;\n+    }\n+\n+  _Jv_GdkThreadLock sync;\n+  GtkWidget *widget = GTK_WIDGET (ptr);\n+  GdkCursor *cursor = gdk_cursor_new (type);\n+  gdk_window_set_cursor (widget->window, cursor);\n+  gdk_cursor_destroy (cursor);\n }\n \n "}, {"sha": "95fc7f63d17477f6e373576f3e0c53749efc6965", "filename": "libjava/gnu/awt/gtk/natGtkLabelPeer.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkLabelPeer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkLabelPeer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fgtk%2FnatGtkLabelPeer.cc?ref=fafc249b1bdd385ce0c45d2696ad7c1c09c9b2cb", "patch": "@@ -0,0 +1,59 @@\n+// Native Gtk AWT label code.\n+\n+#include <config.h>\n+\n+#include <gcj/cni.h>\n+\n+#include \"gtkcommon.h\"\n+\n+#include <gnu/awt/gtk/GtkLabelPeer.h>\n+#include <java/awt/Label.h>\n+\n+void\n+gnu::awt::gtk::GtkLabelPeer::setText (java::lang::String *text)\n+{\n+  _Jv_GdkThreadLock sync;\n+  jsize len = 0;\n+  if (text)\n+    len = JvGetStringUTFLength (text);\n+  // FIXME: this can allocate an unbounded amount.  Should use heap\n+  // even though it is slower.\n+  char buf[len + 1];\n+  if (text)\n+    JvGetStringUTFRegion (text, 0, len, buf);\n+  buf[len] = '\\0';\n+  gtk_label_set_text (GTK_LABEL (ptr), buf);\n+}\n+\n+void\n+gnu::awt::gtk::GtkLabelPeer::setAlignment (jint alignment)\n+{\n+  using namespace java::awt;\n+\n+  gfloat value = 0.5;\n+  if (alignment == Label::LEFT)\n+    value = 0.0;\n+  else if (alignment == Label::RIGHT)\n+    value = 1.0;\n+\n+  _Jv_GdkThreadLock sync;\n+  gtk_misc_set_alignment (GTK_MISC (ptr), 0.5f, value);\n+}\n+\n+void\n+gnu::awt::gtk::GtkLabelPeer::create ()\n+{\n+  if (! ptr)\n+    {\n+      _Jv_GdkThreadLock sync;\n+      // This is a little inefficient.\n+      ptr = (gnu::gcj::RawData *) gtk_label_new (\"\");\n+\n+      using namespace ::java::awt;\n+      Label *label = reinterpret_cast<Label *> (awtComponent);\n+      setText (label->getText ());\n+      setAlignment (label->getAlignment ());\n+    }\n+\n+  gnu::awt::gtk::GtkComponentPeer::create ();\n+}"}]}