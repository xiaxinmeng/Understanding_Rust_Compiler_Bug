{"sha": "148864cb8c972b4c87e2e6a3183a83047666edcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ4ODY0Y2I4Yzk3MmI0Yzg3ZTJlNmEzMTgzYTgzMDQ3NjY2ZWRjYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-02-22T01:16:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-22T01:16:15Z"}, "message": "Add tests for C++2a content of <atomic> header\n\n\t* testsuite/29_atomics/headers/atomic/types_std_c++20.cc: New test.\n\t* testsuite/29_atomics/headers/atomic/types_std_c++20_neg.cc: New\n\ttest.\n\nFrom-SVN: r269091", "tree": {"sha": "4374de8e8b4d2c2961010cc25c1076f54d89fb3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4374de8e8b4d2c2961010cc25c1076f54d89fb3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/148864cb8c972b4c87e2e6a3183a83047666edcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148864cb8c972b4c87e2e6a3183a83047666edcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/148864cb8c972b4c87e2e6a3183a83047666edcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148864cb8c972b4c87e2e6a3183a83047666edcb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5940bb028b3758c160374e1fd72987128c254ad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5940bb028b3758c160374e1fd72987128c254ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5940bb028b3758c160374e1fd72987128c254ad7"}], "stats": {"total": 185, "additions": 185, "deletions": 0}, "files": [{"sha": "eb68aba953be70e7fccda2d4fe7ae274f89749a9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148864cb8c972b4c87e2e6a3183a83047666edcb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148864cb8c972b4c87e2e6a3183a83047666edcb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=148864cb8c972b4c87e2e6a3183a83047666edcb", "patch": "@@ -1,3 +1,9 @@\n+2019-02-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/29_atomics/headers/atomic/types_std_c++20.cc: New test.\n+\t* testsuite/29_atomics/headers/atomic/types_std_c++20_neg.cc: New\n+\ttest.\n+\n 2019-02-22  Tom Honermann  <tom@honermann.net>\n \n \t* python/libstdcxx/v6/printers.py (register_type_printers): Add type"}, {"sha": "e8a76204f553eeac2a0ba418ac054a75a9a80b50", "filename": "libstdc++-v3/testsuite/29_atomics/headers/atomic/types_std_c++20.cc", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148864cb8c972b4c87e2e6a3183a83047666edcb/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148864cb8c972b4c87e2e6a3183a83047666edcb/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B20.cc?ref=148864cb8c972b4c87e2e6a3183a83047666edcb", "patch": "@@ -0,0 +1,96 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2008-2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <atomic>\n+\n+void test01()\n+{\n+  using std::memory_order;\n+  // TODO add checks for new enumerators memory_order::relaxed etc.\n+  // using std::memory_order::relaxed;\n+  // using std::memory_order::consume;\n+  // using std::memory_order::acquire;\n+  // using std::memory_order::release;\n+  // using std::memory_order::acq_rel;\n+  // using std::memory_order::seq_cst;\n+  using std::memory_order_relaxed;\n+  using std::memory_order_consume;\n+  using std::memory_order_acquire;\n+  using std::memory_order_release;\n+  using std::memory_order_acq_rel;\n+  using std::memory_order_seq_cst;\n+\n+  using std::atomic_flag;\n+\n+  // atomics for builtins types\n+  using std::atomic_bool;\n+  using std::atomic_char;\n+  using std::atomic_schar;\n+  using std::atomic_uchar;\n+  using std::atomic_short;\n+  using std::atomic_ushort;\n+  using std::atomic_int;\n+  using std::atomic_uint;\n+  using std::atomic_long;\n+  using std::atomic_ulong;\n+  using std::atomic_llong;\n+  using std::atomic_ullong;\n+  using std::atomic_wchar_t;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  using std::atomic_char8_t;\n+#endif\n+  using std::atomic_char16_t;\n+  using std::atomic_char32_t;\n+\n+  // atomics for standard typedefs\n+  using std::atomic_int_least8_t;\n+  using std::atomic_uint_least8_t;\n+  using std::atomic_int_least16_t;\n+  using std::atomic_uint_least16_t;\n+  using std::atomic_int_least32_t;\n+  using std::atomic_uint_least32_t;\n+  using std::atomic_int_least64_t;\n+  using std::atomic_uint_least64_t;\n+  using std::atomic_int_fast8_t;\n+  using std::atomic_uint_fast8_t;\n+  using std::atomic_int_fast16_t;\n+  using std::atomic_uint_fast16_t;\n+  using std::atomic_int_fast32_t;\n+  using std::atomic_uint_fast32_t;\n+  using std::atomic_int_fast64_t;\n+  using std::atomic_uint_fast64_t;\n+  using std::atomic_intptr_t;\n+  using std::atomic_uintptr_t;\n+  using std::atomic_size_t;\n+  using std::atomic_ptrdiff_t;\n+  using std::atomic_intmax_t;\n+  using std::atomic_uintmax_t;\n+\n+  // DR 2441\n+  using std::atomic_int8_t;\n+  using std::atomic_uint8_t;\n+  using std::atomic_int16_t;\n+  using std::atomic_uint16_t;\n+  using std::atomic_int32_t;\n+  using std::atomic_uint32_t;\n+  using std::atomic_int64_t;\n+  using std::atomic_uint64_t;\n+}"}, {"sha": "7f57e16461c5dffe0bdf7ba53339ebb5f14a1c8c", "filename": "libstdc++-v3/testsuite/29_atomics/headers/atomic/types_std_c++20_neg.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148864cb8c972b4c87e2e6a3183a83047666edcb/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B20_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148864cb8c972b4c87e2e6a3183a83047666edcb/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B20_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B20_neg.cc?ref=148864cb8c972b4c87e2e6a3183a83047666edcb", "patch": "@@ -0,0 +1,83 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+// { dg-require-cstdint \"\" }\n+\n+// Copyright (C) 2009-2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <atomic>\n+\n+void test01()\n+{\n+  // Not global scoped, only namespace std.\n+  using memory_order;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  // TODO add checks for new enumerators memory_order::relaxed etc.\n+  using memory_order_relaxed;\t// { dg-error \"expected nested-name-specifier\" }\n+  using memory_order_consume;\t// { dg-error \"expected nested-name-specifier\" }\n+  using memory_order_acquire;\t// { dg-error \"expected nested-name-specifier\" }\n+  using memory_order_release;\t// { dg-error \"expected nested-name-specifier\" }\n+  using memory_order_acq_rel;\t// { dg-error \"expected nested-name-specifier\" }\n+  using memory_order_seq_cst;\t// { dg-error \"expected nested-name-specifier\" }\n+\n+  using atomic_flag;\t\t// { dg-error \"expected nested-name-specifier\" }\n+\n+  using atomic_bool;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_char;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_schar;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_uchar;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_short;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_ushort;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_int;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_uint;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_long;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_ulong;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_llong;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_ullong;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_wchar_t;\t\t// { dg-error \"expected nested-name-specifier\" }\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  using atomic_char8_t;\t\t// { dg-error \"expected nested-name-specifier\" }\n+#endif\n+  using atomic_char16_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_char32_t;\t// { dg-error \"expected nested-name-specifier\" }\n+\n+  using atomic_int_least8_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_uint_least8_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_int_least16_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_uint_least16_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_int_least32_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_uint_least32_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_int_least64_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_uint_least64_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_int_fast8_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_uint_fast8_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_int_fast16_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_uint_fast16_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_int_fast32_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_uint_fast32_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_int_fast64_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_uint_fast64_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_intptr_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_uintptr_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_size_t;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_ptrdiff_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_intmax_t;\t// { dg-error \"expected nested-name-specifier\" }\n+  using atomic_uintmax_t;\t// { dg-error \"expected nested-name-specifier\" }\n+\n+  using atomic_address;\t\t// { dg-error \"expected nested-name-specifier\" }\n+  // Present in C++0x drafts but not final C++11 standard:\n+  using std::atomic_address;\t// { dg-error \"has not been declared\" }\n+}"}]}