{"sha": "5ba864c5d11a1c20891a1e054cb7814ec23de5c9", "node_id": "C_kwDOANBUbNoAKDViYTg2NGM1ZDExYTFjMjA4OTFhMWUwNTRjYjc4MTRlYzIzZGU1Yzk", "commit": {"author": {"name": "Andrew Carlotti", "email": "andrew.carlotti@arm.com", "date": "2022-07-15T14:25:53Z"}, "committer": {"name": "Andrew Carlotti", "email": "andrew.carlotti@arm.com", "date": "2022-07-15T14:30:29Z"}, "message": "aarch64: Add V1DI mode\n\nWe already have a V1DF mode, so this makes the vector modes more consistent.\n\nAdditionally, this allows us to recognise uint64x1_t and int64x1_t types given\nonly the mode and type qualifiers (e.g. in aarch64_lookup_simd_builtin_type).\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.cc\n\t(v1di_UP): Add V1DI mode to _UP macros.\n\t* config/aarch64/aarch64-modes.def (VECTOR_MODE): Add V1DI mode.\n\t* config/aarch64/aarch64-simd-builtin-types.def: Use V1DI mode.\n\t* config/aarch64/aarch64-simd.md\n\t(vec_extractv2dfv1df): Replace with...\n\t(vec_extract<mode><V1half>): ...this.\n\t* config/aarch64/aarch64.cc\n\t(aarch64_classify_vector_mode): Add V1DI mode.\n\t* config/aarch64/iterators.md\n\t(VQ_2E, V1HALF, V1half): New.\n\t(nunits): Add V1DI mode.", "tree": {"sha": "e893e62dd87a50b92f28a8794ff6da631bc0e58f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e893e62dd87a50b92f28a8794ff6da631bc0e58f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ba864c5d11a1c20891a1e054cb7814ec23de5c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba864c5d11a1c20891a1e054cb7814ec23de5c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba864c5d11a1c20891a1e054cb7814ec23de5c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba864c5d11a1c20891a1e054cb7814ec23de5c9/comments", "author": {"login": "andrewcarlotti", "id": 11681428, "node_id": "MDQ6VXNlcjExNjgxNDI4", "avatar_url": "https://avatars.githubusercontent.com/u/11681428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewcarlotti", "html_url": "https://github.com/andrewcarlotti", "followers_url": "https://api.github.com/users/andrewcarlotti/followers", "following_url": "https://api.github.com/users/andrewcarlotti/following{/other_user}", "gists_url": "https://api.github.com/users/andrewcarlotti/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewcarlotti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewcarlotti/subscriptions", "organizations_url": "https://api.github.com/users/andrewcarlotti/orgs", "repos_url": "https://api.github.com/users/andrewcarlotti/repos", "events_url": "https://api.github.com/users/andrewcarlotti/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewcarlotti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andrewcarlotti", "id": 11681428, "node_id": "MDQ6VXNlcjExNjgxNDI4", "avatar_url": "https://avatars.githubusercontent.com/u/11681428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewcarlotti", "html_url": "https://github.com/andrewcarlotti", "followers_url": "https://api.github.com/users/andrewcarlotti/followers", "following_url": "https://api.github.com/users/andrewcarlotti/following{/other_user}", "gists_url": "https://api.github.com/users/andrewcarlotti/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewcarlotti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewcarlotti/subscriptions", "organizations_url": "https://api.github.com/users/andrewcarlotti/orgs", "repos_url": "https://api.github.com/users/andrewcarlotti/repos", "events_url": "https://api.github.com/users/andrewcarlotti/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewcarlotti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23dd41c480fa9f06c33c1e6090bbae53869f85af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23dd41c480fa9f06c33c1e6090bbae53869f85af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23dd41c480fa9f06c33c1e6090bbae53869f85af"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "7371460deacc000ad65ba3d960ff5ad3cd7e84fb", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba864c5d11a1c20891a1e054cb7814ec23de5c9/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba864c5d11a1c20891a1e054cb7814ec23de5c9/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=5ba864c5d11a1c20891a1e054cb7814ec23de5c9", "patch": "@@ -55,6 +55,7 @@\n #define v2si_UP  E_V2SImode\n #define v2sf_UP  E_V2SFmode\n #define v1df_UP  E_V1DFmode\n+#define v1di_UP  E_V1DImode\n #define di_UP    E_DImode\n #define df_UP    E_DFmode\n #define v16qi_UP E_V16QImode"}, {"sha": "d3c9b74434cd2c0d0cb1a2fd26af8c0bf38a4cfa", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba864c5d11a1c20891a1e054cb7814ec23de5c9/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba864c5d11a1c20891a1e054cb7814ec23de5c9/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=5ba864c5d11a1c20891a1e054cb7814ec23de5c9", "patch": "@@ -70,6 +70,7 @@ VECTOR_MODES (INT, 8);        /*       V8QI V4HI V2SI.  */\n VECTOR_MODES (INT, 16);       /* V16QI V8HI V4SI V2DI.  */\n VECTOR_MODES (FLOAT, 8);      /*                 V2SF.  */\n VECTOR_MODES (FLOAT, 16);     /*            V4SF V2DF.  */\n+VECTOR_MODE (INT, DI, 1);     /*                 V1DI.  */\n VECTOR_MODE (FLOAT, DF, 1);   /*                 V1DF.  */\n VECTOR_MODE (FLOAT, HF, 2);   /*                 V2HF.  */\n "}, {"sha": "40545581408e2ee2be84f08abb5801058c4ea42e", "filename": "gcc/config/aarch64/aarch64-simd-builtin-types.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba864c5d11a1c20891a1e054cb7814ec23de5c9/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba864c5d11a1c20891a1e054cb7814ec23de5c9/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtin-types.def?ref=5ba864c5d11a1c20891a1e054cb7814ec23de5c9", "patch": "@@ -24,15 +24,15 @@\n   ENTRY (Int16x8_t, V8HI, none, 11)\n   ENTRY (Int32x2_t, V2SI, none, 11)\n   ENTRY (Int32x4_t, V4SI, none, 11)\n-  ENTRY (Int64x1_t, DI, none, 11)\n+  ENTRY (Int64x1_t, V1DI, none, 11)\n   ENTRY (Int64x2_t, V2DI, none, 11)\n   ENTRY (Uint8x8_t, V8QI, unsigned, 11)\n   ENTRY (Uint8x16_t, V16QI, unsigned, 12)\n   ENTRY (Uint16x4_t, V4HI, unsigned, 12)\n   ENTRY (Uint16x8_t, V8HI, unsigned, 12)\n   ENTRY (Uint32x2_t, V2SI, unsigned, 12)\n   ENTRY (Uint32x4_t, V4SI, unsigned, 12)\n-  ENTRY (Uint64x1_t, DI, unsigned, 12)\n+  ENTRY (Uint64x1_t, V1DI, unsigned, 12)\n   ENTRY (Uint64x2_t, V2DI, unsigned, 12)\n   ENTRY (Poly8_t, QI, poly, 9)\n   ENTRY (Poly16_t, HI, poly, 10)\n@@ -42,7 +42,7 @@\n   ENTRY (Poly8x16_t, V16QI, poly, 12)\n   ENTRY (Poly16x4_t, V4HI, poly, 12)\n   ENTRY (Poly16x8_t, V8HI, poly, 12)\n-  ENTRY (Poly64x1_t, DI, poly, 12)\n+  ENTRY (Poly64x1_t, V1DI, poly, 12)\n   ENTRY (Poly64x2_t, V2DI, poly, 12)\n   ENTRY (Float16x4_t, V4HF, none, 13)\n   ENTRY (Float16x8_t, V8HF, none, 13)"}, {"sha": "587a45d77721e1b39accbad7dbeca4d741eccb10", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba864c5d11a1c20891a1e054cb7814ec23de5c9/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba864c5d11a1c20891a1e054cb7814ec23de5c9/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=5ba864c5d11a1c20891a1e054cb7814ec23de5c9", "patch": "@@ -8026,16 +8026,16 @@\n })\n \n ;; Extract a single-element 64-bit vector from one half of a 128-bit vector.\n-(define_expand \"vec_extractv2dfv1df\"\n-  [(match_operand:V1DF 0 \"register_operand\")\n-   (match_operand:V2DF 1 \"register_operand\")\n+(define_expand \"vec_extract<mode><V1half>\"\n+  [(match_operand:<V1HALF> 0 \"register_operand\")\n+   (match_operand:VQ_2E 1 \"register_operand\")\n    (match_operand 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n-  /* V1DF is rarely used by other patterns, so it should be better to hide\n-     it in a subreg destination of a normal DF op.  */\n-  rtx scalar0 = gen_lowpart (DFmode, operands[0]);\n-  emit_insn (gen_vec_extractv2dfdf (scalar0, operands[1], operands[2]));\n+  /* V1DI and V1DF are rarely used by other patterns, so it should be better\n+     to hide it in a subreg destination of a normal DI or DF op.  */\n+  rtx scalar0 = gen_lowpart (<VHALF>mode, operands[0]);\n+  emit_insn (gen_vec_extract<mode><Vhalf> (scalar0, operands[1], operands[2]));\n   DONE;\n })\n "}, {"sha": "1a514c1b11531dab3741c4e1082b89027211c21d", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba864c5d11a1c20891a1e054cb7814ec23de5c9/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba864c5d11a1c20891a1e054cb7814ec23de5c9/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=5ba864c5d11a1c20891a1e054cb7814ec23de5c9", "patch": "@@ -3552,7 +3552,7 @@ aarch64_classify_vector_mode (machine_mode mode)\n     case E_V8QImode:\n     case E_V4HImode:\n     case E_V2SImode:\n-    /* ...E_V1DImode doesn't exist.  */\n+    case E_V1DImode:\n     case E_V4HFmode:\n     case E_V4BFmode:\n     case E_V2SFmode:"}, {"sha": "0dd9dc66f7ccd78acacb759662d0cd561cd5b4ef", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba864c5d11a1c20891a1e054cb7814ec23de5c9/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba864c5d11a1c20891a1e054cb7814ec23de5c9/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=5ba864c5d11a1c20891a1e054cb7814ec23de5c9", "patch": "@@ -135,6 +135,9 @@\n ;; VQ without 2 element modes.\n (define_mode_iterator VQ_NO2E [V16QI V8HI V4SI V8HF V4SF V8BF])\n \n+;; 2 element quad vector modes.\n+(define_mode_iterator VQ_2E [V2DI V2DF])\n+\n ;; BFmode vector modes.\n (define_mode_iterator VBF [V4BF V8BF])\n \n@@ -1067,12 +1070,13 @@\n (define_mode_attr nunits [(V8QI \"8\") (V16QI \"16\")\n \t\t\t  (V4HI \"4\") (V8HI \"8\")\n \t\t\t  (V2SI \"2\") (V4SI \"4\")\n-\t\t\t  (V2DI \"2\") (V8DI \"8\")\n+\t\t\t  (V1DI \"1\") (V2DI \"2\")\n \t\t\t  (V4HF \"4\") (V8HF \"8\")\n \t\t\t  (V4BF \"4\") (V8BF \"8\")\n \t\t\t  (V2SF \"2\") (V4SF \"4\")\n \t\t\t  (V1DF \"1\") (V2DF \"2\")\n-\t\t\t  (DI \"1\") (DF \"1\")])\n+\t\t\t  (DI \"1\") (DF \"1\")\n+\t\t\t  (V8DI \"8\")])\n \n ;; Map a mode to the number of bits in it, if the size of the mode\n ;; is constant.\n@@ -1442,6 +1446,12 @@\n \t\t\t (V2DI \"di\")    (V2SF  \"sf\")\n \t\t\t (V4SF \"v2sf\")  (V2DF  \"df\")])\n \n+;; Single-element half modes of quad vector modes.\n+(define_mode_attr V1HALF [(V2DI \"V1DI\")  (V2DF  \"V1DF\")])\n+\n+;; Single-element half modes of quad vector modes, in lower-case\n+(define_mode_attr V1half [(V2DI \"v1di\")  (V2DF  \"v1df\")])\n+\n ;; Double modes of vector modes.\n (define_mode_attr VDBL [(V8QI \"V16QI\") (V4HI \"V8HI\")\n \t\t\t(V4HF \"V8HF\")  (V4BF \"V8BF\")"}]}