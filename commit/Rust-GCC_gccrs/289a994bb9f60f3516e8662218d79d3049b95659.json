{"sha": "289a994bb9f60f3516e8662218d79d3049b95659", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg5YTk5NGJiOWY2MGYzNTE2ZTg2NjIyMThkNzlkMzA0OWI5NTY1OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T13:21:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T13:21:21Z"}, "message": "[multiple changes]\n\n2013-04-11  Robert Dewar  <dewar@adacore.com>\n\n\t* back_end.adb (Register_Back_End_Types): Moved to Get_Targ\n\t* back_end.ads (C_String): Moved to Get_Targ\n\t(Register_Type_Proc): Moved to Get_Targ (Register_Back_End_Types):\n\tMoved to Get_Targ.\n\t* cstand.adb (Register_Float_Type): New interface\n\t(Create_Back_End_Float_Types): Use entries in FPT_Mode_Table.\n\t* get_targ.adb (Register_Back_End_Types): Moved here from\n\tBack_End.\n\t* get_targ.ads (C_String): Moved here from Back_End\n\t(Register_Type_Proc): Moved here from Back_End\n\t(Register_Back_End_Types): here from Back_End.\n\t* gnat1drv.adb (GGnat11drv): Add call to\n\tWrite_Target_Dependent_Values;\n\t* lib-writ.ads, lib-writ.adb (Write_ALI): Remove section writing\n\tobsolete target dependent info.\n\t* opt.ads (Generate_Target_Dependent_Info):\n\tRemoved (Target_Dependent_Info_Read): New flag\n\t(Target_Dependent_Info_Write): New flag\n\t* output.adb: Minor comment change\n\t* s-os_lib.ads: Minor reformatting\n\t* set_targ.ads, set_targ.adb: Minor reformatting.\n\t* switch-c.adb (Scan_Switches.First_Ptr): New variable\n\t(Scan_Front_End_Switches): Check -gnatd.b, -gnateT come first\n\t(Scan_Front_End_Switches): Handle -gnatet, -gnateT\n\t* ttypes.ads: Remove documentation section on target dependent\n\tinfo in ali file Remove four letter codes, no longer used Instead\n\tof using Get_Targ.Get_xxx, we use Set_Targ.xxx\n\t* usage.adb: Add usage lines for -gnatet/-gnateT\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\n2013-04-11  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch4.adb: Update documentation.\n\t* sinfo.ads (N_Expression_With_Actions): Ditto.\n\n2013-04-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications):\n\tAdd a guard to prevent the double insertion of the same aspect\n\tinto a rep item list. This previously led to a circularity.\n\n2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Eval_Attribute, case 'Access): Reject attribute\n\treference if the prefix is the dereference of an anonymous access\n\tto subprogram type.\n\t* exp_attr.adb (Expand_N_Attribute_Reference, Access_Cases): Handle\n\tproperly a reference to the current instance of a protected type\n\tfrom within a protected subprogram.\n\t* sem_res.adb (Find_Unique_Access_Type): Treat\n\tAttribute_Access_Type like Allocator_Type when resolving an\n\tequality operator.\n\nFrom-SVN: r197791", "tree": {"sha": "c26ec77aa0dc495db79fc307769ea6b8a6b21a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c26ec77aa0dc495db79fc307769ea6b8a6b21a59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/289a994bb9f60f3516e8662218d79d3049b95659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289a994bb9f60f3516e8662218d79d3049b95659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/289a994bb9f60f3516e8662218d79d3049b95659", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289a994bb9f60f3516e8662218d79d3049b95659/comments", "author": null, "committer": null, "parents": [{"sha": "a26780a30a985778bcd772a6bf7bc217f7cc4b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26780a30a985778bcd772a6bf7bc217f7cc4b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a26780a30a985778bcd772a6bf7bc217f7cc4b00"}], "stats": {"total": 2364, "additions": 1289, "deletions": 1075}, "files": [{"sha": "848a94540df1895073dfc8dfdee2a608bded89ed", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -1,3 +1,58 @@\n+2013-04-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* back_end.adb (Register_Back_End_Types): Moved to Get_Targ\n+\t* back_end.ads (C_String): Moved to Get_Targ\n+\t(Register_Type_Proc): Moved to Get_Targ (Register_Back_End_Types):\n+\tMoved to Get_Targ.\n+\t* cstand.adb (Register_Float_Type): New interface\n+\t(Create_Back_End_Float_Types): Use entries in FPT_Mode_Table.\n+\t* get_targ.adb (Register_Back_End_Types): Moved here from\n+\tBack_End.\n+\t* get_targ.ads (C_String): Moved here from Back_End\n+\t(Register_Type_Proc): Moved here from Back_End\n+\t(Register_Back_End_Types): here from Back_End.\n+\t* gnat1drv.adb (GGnat11drv): Add call to\n+\tWrite_Target_Dependent_Values;\n+\t* lib-writ.ads, lib-writ.adb (Write_ALI): Remove section writing\n+\tobsolete target dependent info.\n+\t* opt.ads (Generate_Target_Dependent_Info):\n+\tRemoved (Target_Dependent_Info_Read): New flag\n+\t(Target_Dependent_Info_Write): New flag\n+\t* output.adb: Minor comment change\n+\t* s-os_lib.ads: Minor reformatting\n+\t* set_targ.ads, set_targ.adb: Minor reformatting.\n+\t* switch-c.adb (Scan_Switches.First_Ptr): New variable\n+\t(Scan_Front_End_Switches): Check -gnatd.b, -gnateT come first\n+\t(Scan_Front_End_Switches): Handle -gnatet, -gnateT\n+\t* ttypes.ads: Remove documentation section on target dependent\n+\tinfo in ali file Remove four letter codes, no longer used Instead\n+\tof using Get_Targ.Get_xxx, we use Set_Targ.xxx\n+\t* usage.adb: Add usage lines for -gnatet/-gnateT\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n+2013-04-11  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch4.adb: Update documentation.\n+\t* sinfo.ads (N_Expression_With_Actions): Ditto.\n+\n+2013-04-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications):\n+\tAdd a guard to prevent the double insertion of the same aspect\n+\tinto a rep item list. This previously led to a circularity.\n+\n+2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute, case 'Access): Reject attribute\n+\treference if the prefix is the dereference of an anonymous access\n+\tto subprogram type.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference, Access_Cases): Handle\n+\tproperly a reference to the current instance of a protected type\n+\tfrom within a protected subprogram.\n+\t* sem_res.adb (Find_Unique_Access_Type): Treat\n+\tAttribute_Access_Type like Allocator_Type when resolving an\n+\tequality operator.\n+\n 2013-04-11  Arnaud Charlet  <charlet@adacore.com>\n \n \t* xgnatugn.adb: Remove obsolete comments."}, {"sha": "577d004c719028b6b14dca25ee72efb3d3a1777d", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -340,17 +340,6 @@ package body Back_End is\n       end loop;\n    end Scan_Compiler_Arguments;\n \n-   -----------------------------\n-   -- Register_Back_End_Types --\n-   -----------------------------\n-\n-   procedure Register_Back_End_Types (Call_Back : Register_Type_Proc) is\n-      procedure Enumerate_Modes (Call_Back : Register_Type_Proc);\n-      pragma Import (C, Enumerate_Modes, \"enumerate_modes\");\n-   begin\n-      Enumerate_Modes (Call_Back);\n-   end Register_Back_End_Types;\n-\n    -------------------------------\n    -- Gen_Or_Update_Object_File --\n    -------------------------------"}, {"sha": "ba25a83fb7e765b09e0b0f267dc75fb7c56efddf", "filename": "gcc/ada/back_end.ads", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fback_end.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fback_end.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.ads?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -23,11 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Call the back end with all the information needed. Also contains other\n---  back-end specific interfaces required by the front end. See also Get_Targ,\n---  which defines additional interfaces to the back end.\n-\n-with Einfo; use Einfo;\n+--  Call the back end with all the information needed\n \n package Back_End is\n \n@@ -47,25 +43,6 @@ package Back_End is\n    pragma Convention (C, Back_End_Mode_Type);\n    for Back_End_Mode_Type use (0, 1, 2);\n \n-   type C_String is array (0 .. 255) of aliased Character;\n-   pragma Convention (C, C_String);\n-\n-   type Register_Type_Proc is access procedure\n-     (C_Name    : C_String; -- Nul-terminated string with name of type\n-      Digs      : Natural;  -- Nr or digits for floating point, 0 otherwise\n-      Complex   : Boolean;  -- True iff type has real and imaginary parts\n-      Count     : Natural;  -- Number of elements in vector, 0 otherwise\n-      Float_Rep : Float_Rep_Kind; -- Representation used for fpt type\n-      Size      : Positive; -- Size of representation in bits\n-      Alignment : Natural); -- Required alignment in bits\n-   pragma Convention (C, Register_Type_Proc);\n-   --  Call back procedure for Register_Back_End_Types. This is to be used by\n-   --  Create_Standard to create predefined types for all types supported by\n-   --  the back end.\n-\n-   procedure Register_Back_End_Types (Call_Back : Register_Type_Proc);\n-   --  Calls the Call_Back function with information for each supported type\n-\n    procedure Call_Back_End (Mode : Back_End_Mode_Type);\n    --  Call back end, i.e. make call to driver traversing the tree and\n    --  outputting code. This call is made with all tables locked. The back"}, {"sha": "09c125dfdce8b9d2b166bf4e2621f518fff09857", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 47, "deletions": 117, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -24,7 +24,6 @@\n ------------------------------------------------------------------------------\n \n with Atree;    use Atree;\n-with Back_End; use Back_End;\n with Csets;    use Csets;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n@@ -35,6 +34,7 @@ with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n with Output;   use Output;\n+with Set_Targ; use Set_Targ;\n with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Ttypes;   use Ttypes;\n@@ -146,18 +146,19 @@ package body CStand is\n    --  Print representation of package Standard if switch set\n \n    procedure Register_Float_Type\n-     (Name      : C_String; -- Nul-terminated string with name of type\n-      Digs      : Natural;  -- Nr or digits for floating point, 0 otherwise\n-      Complex   : Boolean;  -- True iff type has real and imaginary parts\n-      Count     : Natural;  -- Number of elements in vector, 0 otherwise\n-      Float_Rep : Float_Rep_Kind; -- Representation used for fpt type\n-      Size      : Positive; -- Size of representation in bits\n-      Alignment : Natural); -- Required alignment in bits\n-   pragma Convention (C, Register_Float_Type);\n-   --  Call back to allow the back end to register available types.\n-   --  This call back currently creates predefined floating point base types\n-   --  for any floating point types reported by the back end, and adds them\n-   --  to the list of predefined float types.\n+     (Name      : String;\n+      Digs      : Positive;\n+      Float_Rep : Float_Rep_Kind;\n+      Size      : Positive;\n+      Alignment : Natural);\n+   --  Registers a single back end floating-point type (from FPT_Mode_Table in\n+   --  Set_Targ). This will create a predefined floating-point base type for\n+   --  one of the floating point types reported by the back end, and add it\n+   --  to the list of predefined float types. Name is the name of the type\n+   --  as a normal format (non-null-terminated) string. Digs is the number of\n+   --  digits, which is always non-zero, since non-floating-point types were\n+   --  filtered out earlier. Float_Rep indicates the kind of floating-point\n+   --  type, and Size and Alignment are the size and alignment in bits.\n \n    procedure Set_Integer_Bounds\n      (Id  : Entity_Id;\n@@ -424,14 +425,20 @@ package body CStand is\n          Append (Decl, Decl_S);\n       end Build_Exception;\n \n-      ---------------------------\n+      ---------------------------------\n       -- Create_Back_End_Float_Types --\n-      ---------------------------\n+      ---------------------------------\n \n       procedure Create_Back_End_Float_Types is\n       begin\n-         Back_End_Float_Types := No_Elist;\n-         Register_Back_End_Types (Register_Float_Type'Access);\n+         for J in 1 .. Num_FPT_Modes loop\n+            declare\n+               E : FPT_Mode_Entry renames FPT_Mode_Table (J);\n+            begin\n+               Register_Float_Type\n+                 (E.NAME.all, E.DIGS, E.FLOAT_REP, E.SIZE, E.ALIGNMENT);\n+            end;\n+         end loop;\n       end Create_Back_End_Float_Types;\n \n       ------------------------\n@@ -2009,107 +2016,29 @@ package body CStand is\n    -------------------------\n \n    procedure Register_Float_Type\n-     (Name      : C_String;\n-      Digs      : Natural;\n-      Complex   : Boolean;\n-      Count     : Natural;\n+     (Name      : String;\n+      Digs      : Positive;\n       Float_Rep : Float_Rep_Kind;\n       Size      : Positive;\n       Alignment : Natural)\n    is\n-      T    : String (1 .. Name'Length);\n-      Last : Natural := 0;\n-\n-      procedure Dump;\n-      --  Dump information given by the back end for the type to register\n-\n-      procedure Dump is\n-      begin\n-         Write_Str (\"type \" & T (1 .. Last) & \" is \");\n-\n-         if Count > 0 then\n-            Write_Str (\"array (1 .. \");\n-            Write_Int (Int (Count));\n-\n-            if Complex then\n-               Write_Str (\", 1 .. 2\");\n-            end if;\n-\n-            Write_Str (\") of \");\n-\n-         elsif Complex then\n-            Write_Str (\"array (1 .. 2) of \");\n-         end if;\n-\n-         if Digs > 0 then\n-            Write_Str (\"digits \");\n-            Write_Int (Int (Digs));\n-            Write_Line (\";\");\n-\n-            Write_Str (\"pragma Float_Representation (\");\n-\n-            case Float_Rep is\n-               when IEEE_Binary =>  Write_Str (\"IEEE\");\n-               when VAX_Native =>\n-                  case Digs is\n-                     when  6 =>     Write_Str (\"VAXF\");\n-                     when  9 =>     Write_Str (\"VAXD\");\n-                     when 15 =>     Write_Str (\"VAXG\");\n-                     when others => Write_Str (\"VAX_\"); Write_Int (Int (Digs));\n-                  end case;\n-               when AAMP =>         Write_Str (\"AAMP\");\n-            end case;\n-            Write_Line (\", \" & T & \");\");\n-\n-         else\n-            Write_Str (\"mod 2**\");\n-            Write_Int (Int (Size / Positive'Max (1, Count)));\n-            Write_Line (\";\");\n-         end if;\n-\n-         Write_Str (\"for \" & T & \"'Size use \");\n-         Write_Int (Int (Size));\n-         Write_Line (\";\");\n-\n-         Write_Str (\"for \" & T & \"'Alignment use \");\n-         Write_Int (Int (Alignment / 8));\n-         Write_Line (\";\");\n-      end Dump;\n+      Ent   : constant Entity_Id := New_Standard_Entity;\n+      Esize : constant Pos :=\n+                Pos ((Size + Alignment - 1) / Alignment * Alignment);\n \n    begin\n-      for J in T'Range loop\n-         T (J) := Name (Name'First + J - 1);\n-         if T (J) = ASCII.NUL then\n-            Last := J - 1;\n-            exit;\n-         end if;\n-      end loop;\n-\n-      if Debug_Flag_Dot_B then\n-         Dump;\n+      Set_Defining_Identifier (New_Node (N_Full_Type_Declaration, Stloc), Ent);\n+      Make_Name (Ent, Name);\n+      Set_Scope (Ent, Standard_Standard);\n+      Build_Float_Type (Ent, Esize, Float_Rep, Pos (Digs));\n+      Set_RM_Size (Ent, UI_From_Int (Int (Size)));\n+      Set_Alignment (Ent, UI_From_Int (Int (Alignment / 8)));\n+\n+      if No (Back_End_Float_Types) then\n+         Back_End_Float_Types := New_Elmt_List;\n       end if;\n \n-      if Digs > 0 and then not Complex and then Count = 0 then\n-         declare\n-            Ent   : constant Entity_Id := New_Standard_Entity;\n-            Esize : constant Pos := Pos ((Size + Alignment - 1)\n-                                           / Alignment * Alignment);\n-         begin\n-            Set_Defining_Identifier\n-              (New_Node (N_Full_Type_Declaration, Stloc), Ent);\n-            Make_Name (Ent, T (1 .. Last));\n-            Set_Scope (Ent, Standard_Standard);\n-            Build_Float_Type (Ent, Esize, Float_Rep, Pos (Digs));\n-            Set_RM_Size (Ent, UI_From_Int (Int (Size)));\n-            Set_Alignment (Ent, UI_From_Int (Int (Alignment / 8)));\n-\n-            if No (Back_End_Float_Types) then\n-               Back_End_Float_Types := New_Elmt_List;\n-            end if;\n-\n-            Append_Elmt (Ent, Back_End_Float_Types);\n-         end;\n-      end if;\n+      Append_Elmt (Ent, Back_End_Float_Types);\n    end Register_Float_Type;\n \n    ----------------------\n@@ -2118,10 +2047,8 @@ package body CStand is\n \n    procedure Set_Float_Bounds (Id  : Entity_Id) is\n       L : Node_Id;\n-      --  Low bound of literal value\n-\n       H : Node_Id;\n-      --  High bound of literal value\n+      --  Low and high bounds of literal value\n \n       R : Node_Id;\n       --  Range specification\n@@ -2166,9 +2093,12 @@ package body CStand is\n       Lb  : Uint;\n       Hb  : Uint)\n    is\n-      L : Node_Id;     -- Low bound of literal value\n-      H : Node_Id;     -- High bound of literal value\n-      R : Node_Id;     -- Range specification\n+      L : Node_Id;\n+      H : Node_Id;\n+      --  Low and high bounds of literal value\n+\n+      R : Node_Id;\n+      --  Range specification\n \n    begin\n       L := Make_Integer (Lb);"}, {"sha": "55d45b706f1a3d1742bef2684c7b31e5fd55087c", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -1060,14 +1060,46 @@ package body Exp_Attr is\n                      --  match in cases of expander-generated calls (e.g. init\n                      --  procs).\n \n+                     --  The code may be nested in a block, so find enclosing\n+                     --  scope that is a protected operation.\n+\n                      else\n-                        Formal :=\n-                          First_Entity\n-                            (Protected_Body_Subprogram (Current_Scope));\n-                        Rewrite (N,\n-                          Unchecked_Convert_To (Typ,\n-                            New_Occurrence_Of (Formal, Loc)));\n-                        Set_Etype (N, Typ);\n+                        declare\n+                           Subp : Entity_Id;\n+\n+                        begin\n+                           Subp := Current_Scope;\n+                           while Ekind (Subp) = E_Loop\n+                             or else Ekind (Subp) = E_Block\n+                           loop\n+                              Subp := Scope (Subp);\n+                           end loop;\n+\n+                           Formal :=\n+                             First_Entity\n+                               (Protected_Body_Subprogram (Subp));\n+\n+                           --  For a protected subprogram the _Object parameter\n+                           --  is the protected record, so we create an access\n+                           --  to it. The _Object parameter of an entry is an\n+                           --  address.\n+\n+                           if Ekind (Subp) = E_Entry then\n+                              Rewrite (N,\n+                                Unchecked_Convert_To (Typ,\n+                                  New_Occurrence_Of (Formal, Loc)));\n+                              Set_Etype (N, Typ);\n+\n+                           else\n+                              Rewrite (N,\n+                                Unchecked_Convert_To (Typ,\n+                                  Make_Attribute_Reference (Loc,\n+                                    Attribute_Name => Name_Unrestricted_Access,\n+                                    Prefix =>\n+                                       New_Occurrence_Of (Formal, Loc))));\n+                              Analyze_And_Resolve (N);\n+                           end if;\n+                        end;\n                      end if;\n \n                   --  The expression must appear in a default expression,"}, {"sha": "5baf44e43bc52d216e9d355dbc613cf75e4ff953", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 626, "deletions": 588, "changes": 1214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=289a994bb9f60f3516e8662218d79d3049b95659"}, {"sha": "a2f7370f8e58a4c26c16e17566edf7f8bddd50e6", "filename": "gcc/ada/get_targ.adb", "status": "modified", "additions": 267, "deletions": 1, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fget_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fget_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_targ.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -25,6 +25,261 @@\n \n package body Get_Targ is\n \n+   --  Functions returning individual runtime. For the standard (GCC) back\n+   --  end these come from C interface functions (one for each value).\n+\n+   -----------------------\n+   -- Get_Bits_Per_Unit --\n+   -----------------------\n+\n+   function Get_Bits_Per_Unit return Pos is\n+      function C_Get_Bits_Per_Unit return Pos;\n+      pragma Import (C, C_Get_Bits_Per_Unit,\n+                        \"get_target_bits_per_unit\");\n+   begin\n+      return C_Get_Bits_Per_Unit;\n+   end Get_Bits_Per_Unit;\n+\n+   -----------------------\n+   -- Get_Bits_Per_Word --\n+   -----------------------\n+\n+   function Get_Bits_Per_Word return Pos is\n+      function C_Get_Bits_Per_Word return Pos;\n+      pragma Import (C, C_Get_Bits_Per_Word,\n+                        \"get_target_bits_per_word\");\n+   begin\n+      return C_Get_Bits_Per_Word;\n+   end Get_Bits_Per_Word;\n+\n+   -------------------\n+   -- Get_Char_Size --\n+   -------------------\n+\n+   function Get_Char_Size return Pos is\n+      function C_Get_Char_Size return Pos;\n+      pragma Import (C, C_Get_Char_Size,\n+                        \"get_target_char_size\");\n+   begin\n+      return C_Get_Char_Size;\n+   end Get_Char_Size;\n+\n+   ----------------------\n+   -- Get_Wchar_T_Size --\n+   ----------------------\n+\n+   function Get_Wchar_T_Size return Pos is\n+      function C_Get_Wchar_T_Size return Pos;\n+      pragma Import (C, C_Get_Wchar_T_Size,\n+                        \"get_target_wchar_t_size\");\n+   begin\n+      return C_Get_Wchar_T_Size;\n+   end Get_Wchar_T_Size;\n+\n+   --------------------\n+   -- Get_Short_Size --\n+   --------------------\n+\n+   function Get_Short_Size return Pos is\n+      function C_Get_Short_Size return Pos;\n+      pragma Import (C, C_Get_Short_Size,\n+                        \"get_target_short_size\");\n+   begin\n+      return C_Get_Short_Size;\n+   end Get_Short_Size;\n+\n+   ------------------\n+   -- Get_Int_Size --\n+   ------------------\n+\n+   function Get_Int_Size return Pos is\n+      function C_Get_Int_Size return Pos;\n+      pragma Import (C, C_Get_Int_Size,\n+                        \"get_target_int_size\");\n+   begin\n+      return C_Get_Int_Size;\n+   end Get_Int_Size;\n+\n+   -------------------\n+   -- Get_Long_Size --\n+   -------------------\n+\n+   function Get_Long_Size return Pos is\n+      function C_Get_Long_Size return Pos;\n+      pragma Import (C, C_Get_Long_Size,\n+                        \"get_target_long_size\");\n+   begin\n+      return C_Get_Long_Size;\n+   end Get_Long_Size;\n+\n+   ------------------------\n+   -- Get_Long_Long_Size --\n+   ------------------------\n+\n+   function Get_Long_Long_Size return Pos is\n+      function C_Get_Long_Long_Size return Pos;\n+      pragma Import (C, C_Get_Long_Long_Size,\n+                        \"get_target_long_long_size\");\n+   begin\n+      return C_Get_Long_Long_Size;\n+   end Get_Long_Long_Size;\n+\n+   --------------------\n+   -- Get_Float_Size --\n+   --------------------\n+\n+   function Get_Float_Size return Pos is\n+      function C_Get_Float_Size return Pos;\n+      pragma Import (C, C_Get_Float_Size,\n+                        \"get_target_float_size\");\n+   begin\n+      return C_Get_Float_Size;\n+   end Get_Float_Size;\n+\n+   ---------------------\n+   -- Get_Double_Size --\n+   ---------------------\n+\n+   function Get_Double_Size return Pos is\n+      function C_Get_Double_Size return Pos;\n+      pragma Import (C, C_Get_Double_Size,\n+                        \"get_target_double_size\");\n+   begin\n+      return C_Get_Double_Size;\n+   end Get_Double_Size;\n+\n+   --------------------------\n+   -- Get_Long_Double_Size --\n+   --------------------------\n+\n+   function Get_Long_Double_Size return Pos is\n+      function C_Get_Long_Double_Size return Pos;\n+      pragma Import (C, C_Get_Long_Double_Size,\n+                        \"get_target_long_double_size\");\n+   begin\n+      return C_Get_Long_Double_Size;\n+   end Get_Long_Double_Size;\n+\n+   ----------------------\n+   -- Get_Pointer_Size --\n+   ----------------------\n+\n+   function Get_Pointer_Size return Pos is\n+      function C_Get_Pointer_Size return Pos;\n+      pragma Import (C, C_Get_Pointer_Size,\n+                        \"get_target_pointer_size\");\n+   begin\n+      return C_Get_Pointer_Size;\n+   end Get_Pointer_Size;\n+\n+   ---------------------------\n+   -- Get_Maximum_Alignment --\n+   ---------------------------\n+\n+   function Get_Maximum_Alignment return Pos is\n+      function C_Get_Maximum_Alignment return Pos;\n+      pragma Import (C, C_Get_Maximum_Alignment,\n+                        \"get_target_maximum_alignment\");\n+   begin\n+      return C_Get_Maximum_Alignment;\n+   end Get_Maximum_Alignment;\n+\n+   ------------------------\n+   -- Get_Float_Words_BE --\n+   ------------------------\n+\n+   function Get_Float_Words_BE return Nat is\n+      function C_Get_Float_Words_BE return Nat;\n+      pragma Import (C, C_Get_Float_Words_BE,\n+                        \"get_float_words_be\");\n+   begin\n+      return C_Get_Float_Words_BE;\n+   end Get_Float_Words_BE;\n+\n+   ------------------\n+   -- Get_Words_BE --\n+   ------------------\n+\n+   function Get_Words_BE return Nat is\n+      function C_Get_Words_BE return Nat;\n+      pragma Import (C, C_Get_Words_BE,\n+                        \"get_words_be\");\n+   begin\n+      return C_Get_Words_BE;\n+   end Get_Words_BE;\n+\n+   ------------------\n+   -- Get_Bytes_BE --\n+   ------------------\n+\n+   function Get_Bytes_BE return Nat is\n+      function C_Get_Bytes_BE return Nat;\n+      pragma Import (C, C_Get_Bytes_BE,\n+                        \"get_bytes_be\");\n+   begin\n+      return C_Get_Bytes_BE;\n+   end Get_Bytes_BE;\n+\n+   -----------------\n+   -- Get_Bits_BE --\n+   -----------------\n+\n+   function Get_Bits_BE return Nat is\n+      function C_Get_Bits_BE return Nat;\n+      pragma Import (C, C_Get_Bits_BE,\n+                        \"get_bits_be\");\n+   begin\n+      return C_Get_Bits_BE;\n+   end Get_Bits_BE;\n+\n+   --------------------------\n+   -- Get_Strict_Alignment --\n+   --------------------------\n+\n+   function Get_Strict_Alignment return Nat is\n+      function C_Get_Strict_Alignment return Nat;\n+      pragma Import (C, C_Get_Strict_Alignment,\n+                        \"get_target_strict_alignment\");\n+   begin\n+      return C_Get_Strict_Alignment;\n+   end Get_Strict_Alignment;\n+\n+   ------------------------------------\n+   -- Get_System_Allocator_Alignment --\n+   ------------------------------------\n+\n+   function Get_System_Allocator_Alignment return Nat is\n+      function C_Get_System_Allocator_Alignment return Nat;\n+      pragma Import (C, C_Get_System_Allocator_Alignment,\n+                        \"get_target_system_allocator_alignment\");\n+   begin\n+      return C_Get_System_Allocator_Alignment;\n+   end Get_System_Allocator_Alignment;\n+\n+   --------------------------------\n+   -- Get_Double_Float_Alignment --\n+   --------------------------------\n+\n+   function Get_Double_Float_Alignment return Nat is\n+      function C_Get_Double_Float_Alignment return Nat;\n+      pragma Import (C, C_Get_Double_Float_Alignment,\n+                        \"get_target_double_float_alignment\");\n+   begin\n+      return C_Get_Double_Float_Alignment;\n+   end Get_Double_Float_Alignment;\n+\n+   ---------------------------------\n+   -- Get_Double_Scalar_Alignment --\n+   ---------------------------------\n+\n+   function Get_Double_Scalar_Alignment return Nat is\n+      function C_Get_Double_Scalar_Alignment return Nat;\n+      pragma Import (C, C_Get_Double_Scalar_Alignment,\n+                        \"get_target_double_scalar_alignment\");\n+   begin\n+      return C_Get_Double_Scalar_Alignment;\n+   end Get_Double_Scalar_Alignment;\n+\n    ----------------------\n    -- Digits_From_Size --\n    ----------------------\n@@ -55,6 +310,17 @@ package body Get_Targ is\n       return 64;  -- Can be different on some targets (e.g., AAMP)\n    end Get_Max_Unaligned_Field;\n \n+   -----------------------------\n+   -- Register_Back_End_Types --\n+   -----------------------------\n+\n+   procedure Register_Back_End_Types (Call_Back : Register_Type_Proc) is\n+      procedure Enumerate_Modes (Call_Back : Register_Type_Proc);\n+      pragma Import (C, Enumerate_Modes, \"enumerate_modes\");\n+   begin\n+      Enumerate_Modes (Call_Back);\n+   end Register_Back_End_Types;\n+\n    ---------------------\n    -- Width_From_Size --\n    ---------------------"}, {"sha": "93043e08e933d3886a273005bbe87d69fd65c2de", "filename": "gcc/ada/get_targ.ads", "status": "modified", "additions": 71, "deletions": 50, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fget_targ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fget_targ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_targ.ads?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -25,87 +25,89 @@\n \n --  This package provides an Import to the C functions which provide\n --  values related to types on the target system. It is only needed for\n---  exp_dbug and the elaboration of ttypes.\n+--  exp_dbug and the elaboration of ttypes, via the Set_Targs package.\n+--  It also contains the routine for registering floating-point types.\n \n --  NOTE:  Any changes in this package must be reflected in jgettarg.ads\n---  and aa_getta.ads!\n+--  and aa_getta.ads and any other versions of this package.\n \n --  Note that all these values return sizes of C types with corresponding\n --  names. This allows GNAT to define the corresponding Ada types to have\n---  the same representation. There is one exception to this: the\n---  Wide_Character_Type uses twice the size of a C char, instead of the\n+--  the same representation. There is one exception to this general rule:\n+--  the Wide_Character_Type uses twice the size of a C char, instead of the\n --  size of wchar_t.\n \n+with Einfo; use Einfo;\n with Types; use Types;\n \n package Get_Targ is\n-   pragma Preelaborate;\n \n-   function Get_Bits_Per_Unit return Pos;\n-   pragma Import (C, Get_Bits_Per_Unit, \"get_target_bits_per_unit\");\n+   --  Functions returning individual runtime values\n \n-   function Get_Bits_Per_Word return Pos;\n-   pragma Import (C, Get_Bits_Per_Word, \"get_target_bits_per_word\");\n+   function Get_Bits_Per_Unit              return Pos;\n+   --  System.Storage_Unit\n \n-   function Get_Char_Size return Pos; -- Standard.Character'Size\n-   pragma Import (C, Get_Char_Size, \"get_target_char_size\");\n+   function Get_Bits_Per_Word              return Pos;\n+   --  System.Word_Size\n \n-   function Get_Wchar_T_Size return Pos; -- Interfaces.C.wchar_t'Size\n-   pragma Import (C, Get_Wchar_T_Size, \"get_target_wchar_t_size\");\n+   function Get_Char_Size                  return Pos;\n+   --  Size of Standard.Character\n \n-   function Get_Short_Size return Pos; -- Standard.Short_Integer'Size\n-   pragma Import (C, Get_Short_Size, \"get_target_short_size\");\n+   function Get_Wchar_T_Size               return Pos;\n+   --  Size of Interfaces.C.wchar_t\n \n-   function Get_Int_Size return Pos; -- Standard.Integer'Size\n-   pragma Import (C, Get_Int_Size, \"get_target_int_size\");\n+   function Get_Short_Size                 return Pos;\n+   --  Size of Standard.Short_Integer\n \n-   function Get_Long_Size return Pos; -- Standard.Long_Integer'Size\n-   pragma Import (C, Get_Long_Size, \"get_target_long_size\");\n+   function Get_Int_Size                   return Pos;\n+   --  Size of Standard.Integer\n \n-   function Get_Long_Long_Size return Pos; -- Standard.Long_Long_Integer'Size\n-   pragma Import (C, Get_Long_Long_Size, \"get_target_long_long_size\");\n+   function Get_Long_Size                  return Pos;\n+   --  Size of Standard.Long_Integer\n \n-   function Get_Float_Size return Pos; -- Standard.Float'Size\n-   pragma Import (C, Get_Float_Size, \"get_target_float_size\");\n+   function Get_Long_Long_Size             return Pos;\n+   --  Size of Standard.Long_Long_Integer\n \n-   function Get_Double_Size return Pos; -- Standard.Long_Float'Size\n-   pragma Import (C, Get_Double_Size, \"get_target_double_size\");\n+   function Get_Float_Size                 return Pos;\n+   --  Size of Standard.Float\n \n-   function Get_Long_Double_Size return Pos; -- Standard.Long_Long_Float'Size\n-   pragma Import (C, Get_Long_Double_Size, \"get_target_long_double_size\");\n+   function Get_Double_Size                return Pos;\n+   --  Size of Standard.Long_Float\n \n-   function Get_Pointer_Size return Pos; -- System.Address'Size\n-   pragma Import (C, Get_Pointer_Size, \"get_target_pointer_size\");\n+   function Get_Long_Double_Size           return Pos;\n+   --  Size of Standard.Long_Long_Float\n \n-   function Get_Maximum_Alignment return Pos;\n-   pragma Import (C, Get_Maximum_Alignment, \"get_target_maximum_alignment\");\n+   function Get_Pointer_Size               return Pos;\n+   --  Size of System.Address\n \n-   function Get_Float_Words_BE return Nat;\n-   pragma Import (C, Get_Float_Words_BE, \"get_float_words_be\");\n+   function Get_Maximum_Alignment          return Pos;\n+   --  Maximum supported alignment\n \n-   function Get_Words_BE return Nat;\n-   pragma Import (C, Get_Words_BE, \"get_words_be\");\n+   function Get_Float_Words_BE             return Nat;\n+   --  Non-zero iff float words big endian\n \n-   function Get_Bytes_BE return Nat;\n-   pragma Import (C, Get_Bytes_BE, \"get_bytes_be\");\n+   function Get_Words_BE                   return Nat;\n+   --  Non-zero iff integer words big endian\n \n-   function Get_Bits_BE return Nat;\n-   pragma Import (C, Get_Bits_BE, \"get_bits_be\");\n+   function Get_Bytes_BE                   return Nat;\n+   --  Non-zero iff bytes big-endian\n \n-   function Get_Strict_Alignment return Nat;\n-   pragma Import (C, Get_Strict_Alignment, \"get_target_strict_alignment\");\n+   function Get_Bits_BE                    return Nat;\n+   --  Non-zero iff bit order big endian\n+\n+   function Get_Strict_Alignment           return Nat;\n+   --  Non-zero if target requires strict alignent\n \n    function Get_System_Allocator_Alignment return Nat;\n-   pragma Import (C, Get_System_Allocator_Alignment,\n-                  \"get_target_system_allocator_alignment\");\n+   --  Alignment guaranteed by malloc falls\n+\n+   function Get_Double_Float_Alignment     return Nat;\n+   --  Alignment required for Long_Float\n \n-   function Get_Double_Float_Alignment return Nat;\n-   pragma Import (C, Get_Double_Float_Alignment,\n-                  \"get_target_double_float_alignment\");\n+   function Get_Double_Scalar_Alignment    return Nat;\n+   --  Alignment required for Long_Long_Integer\n \n-   function Get_Double_Scalar_Alignment return Nat;\n-   pragma Import (C, Get_Double_Scalar_Alignment,\n-                  \"get_target_double_scalar_alignment\");\n+   --  Other subprograms\n \n    function Get_Max_Unaligned_Field return Pos;\n    --  Returns the maximum supported size in bits for a field that is\n@@ -115,4 +117,23 @@ package Get_Targ is\n    function Digits_From_Size (Size : Pos) return Pos;\n    --  Calculate values for 'Width or 'Digits from 'Size\n \n+   type C_String is array (0 .. 255) of aliased Character;\n+   pragma Convention (C, C_String);\n+\n+   type Register_Type_Proc is access procedure\n+     (C_Name    : C_String;       -- Nul-terminated string with name of type\n+      Digs      : Natural;        -- Digits for floating point, 0 otherwise\n+      Complex   : Boolean;        -- True iff type has real and imaginary parts\n+      Count     : Natural;        -- Number of elements in vector, 0 otherwise\n+      Float_Rep : Float_Rep_Kind; -- Representation used for fpt type\n+      Size      : Positive;       -- Size of representation in bits\n+      Alignment : Natural);       -- Required alignment in bits\n+   pragma Convention (C, Register_Type_Proc);\n+   --  Call back procedure for Register_Back_End_Types. This is to be used by\n+   --  Create_Standard to create predefined types for all types supported by\n+   --  the back end.\n+\n+   procedure Register_Back_End_Types (Call_Back : Register_Type_Proc);\n+   --  Calls the Call_Back function with information for each supported type\n+\n end Get_Targ;"}, {"sha": "4bfe7a63d253433cdb76ae5f309bd307f8da9f02", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -61,6 +61,7 @@ with Sem_Ch13;\n with Sem_Elim;\n with Sem_Eval;\n with Sem_Type;\n+with Set_Targ;\n with Sinfo;    use Sinfo;\n with Sinput.L; use Sinput.L;\n with Snames;\n@@ -878,6 +879,14 @@ begin\n          Usage;\n       end if;\n \n+      --  Generate target dependent output file if requested\n+\n+      if Target_Dependent_Info_Write then\n+         Set_Targ.Write_Target_Dependent_Values;\n+      end if;\n+\n+      --  Call the front end\n+\n       Original_Operating_Mode := Operating_Mode;\n       Frontend;\n "}, {"sha": "12664ee376f850159dafb069c64207c4c00c13e7", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 1, "deletions": 89, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,7 +49,6 @@ with Sinput;   use Sinput;\n with Snames;   use Snames;\n with Stringt;  use Stringt;\n with Tbuild;   use Tbuild;\n-with Ttypes;   use Ttypes;\n with Uname;    use Uname;\n \n with System.Case_Util; use System.Case_Util;\n@@ -1441,93 +1440,6 @@ package body Lib.Writ is\n          Output_Alfa;\n       end if;\n \n-      --  Output target dependent information if needed\n-\n-      if Generate_Target_Dependent_Info then\n-         Gen_TDI : declare\n-            subtype Str4 is String (1 .. 4);\n-\n-            procedure Gen_TDI_Bool (Code : Str4; Val : Boolean);\n-            --  Generate T line for Bool value\n-\n-            procedure Gen_TDI_Nat (Code : Str4; Val : Int);\n-            --  Generate T line for Pos or Nat value\n-\n-            ------------------\n-            -- Gen_TDI_Bool --\n-            ------------------\n-\n-            procedure Gen_TDI_Bool (Code : Str4; Val : Boolean) is\n-            begin\n-               Write_Info_Initiate ('T');\n-               Write_Info_Char (' ');\n-               Write_Info_Str (Code);\n-\n-               if Val then\n-                  Write_Info_Str (\" TRUE\");\n-               else\n-                  Write_Info_Str (\" FALSE\");\n-               end if;\n-\n-               Write_Info_EOL;\n-            end Gen_TDI_Bool;\n-\n-            -----------------\n-            -- Gen_TDI_Nat --\n-            -----------------\n-\n-            procedure Gen_TDI_Nat (Code : Str4; Val : Int) is\n-            begin\n-               Write_Info_Initiate ('T');\n-               Write_Info_Char (' ');\n-               Write_Info_Str (Code);\n-               Write_Info_Char (' ');\n-               Write_Info_Nat (Val);\n-\n-               Write_Info_EOL;\n-            end Gen_TDI_Nat;\n-\n-         --  Start of processing for Gen_TDI\n-\n-         begin\n-            Gen_TDI_Nat  (\"SINS\", Standard_Short_Short_Integer_Size);\n-            Gen_TDI_Nat  (\"SINW\", Standard_Short_Short_Integer_Width);\n-            Gen_TDI_Nat  (\"SHIS\", Standard_Short_Integer_Size);\n-            Gen_TDI_Nat  (\"SHIW\", Standard_Short_Integer_Width);\n-            Gen_TDI_Nat  (\"INTS\", Standard_Integer_Size);\n-            Gen_TDI_Nat  (\"INTW\", Standard_Integer_Width);\n-            Gen_TDI_Nat  (\"LINS\", Standard_Long_Integer_Size);\n-            Gen_TDI_Nat  (\"LINW\", Standard_Long_Integer_Width);\n-            Gen_TDI_Nat  (\"LLIS\", Standard_Long_Long_Integer_Size);\n-            Gen_TDI_Nat  (\"LLIW\", Standard_Long_Long_Integer_Width);\n-            Gen_TDI_Nat  (\"SFLS\", Standard_Short_Float_Size);\n-            Gen_TDI_Nat  (\"SFLD\", Standard_Short_Float_Digits);\n-            Gen_TDI_Nat  (\"FLTS\", Standard_Float_Size);\n-            Gen_TDI_Nat  (\"FLTD\", Standard_Float_Digits);\n-            Gen_TDI_Nat  (\"LFLS\", Standard_Long_Float_Size);\n-            Gen_TDI_Nat  (\"LFLD\", Standard_Long_Float_Digits);\n-            Gen_TDI_Nat  (\"LLFS\", Standard_Long_Long_Float_Size);\n-            Gen_TDI_Nat  (\"LLFD\", Standard_Long_Long_Float_Digits);\n-            Gen_TDI_Nat  (\"CHAS\", Standard_Character_Size);\n-            Gen_TDI_Nat  (\"WCHS\", Standard_Wide_Character_Size);\n-            Gen_TDI_Nat  (\"WWCS\", Standard_Wide_Wide_Character_Size);\n-            Gen_TDI_Nat  (\"ADRS\", System_Address_Size);\n-            Gen_TDI_Nat  (\"MBMP\", System_Max_Binary_Modulus_Power);\n-            Gen_TDI_Nat  (\"MNMP\", System_Max_Nonbinary_Modulus_Power);\n-            Gen_TDI_Nat  (\"SUNI\", System_Storage_Unit);\n-            Gen_TDI_Nat  (\"WRDS\", System_Word_Size);\n-            Gen_TDI_Nat  (\"TICK\", System_Tick_Nanoseconds);\n-            Gen_TDI_Nat  (\"WCTS\", Interfaces_Wchar_T_Size);\n-            Gen_TDI_Nat  (\"MAXA\", Maximum_Alignment);\n-            Gen_TDI_Nat  (\"ALLA\", System_Allocator_Alignment);\n-            Gen_TDI_Nat  (\"MUNF\", Max_Unaligned_Field);\n-            Gen_TDI_Bool (\"BEND\", Bytes_Big_Endian);\n-            Gen_TDI_Bool (\"STRA\", Target_Strict_Alignment);\n-            Gen_TDI_Nat  (\"DFLA\", Target_Double_Float_Alignment);\n-            Gen_TDI_Nat  (\"DSCA\", Target_Double_Scalar_Alignment);\n-         end Gen_TDI;\n-      end if;\n-\n       --  Output final blank line and we are done. This final blank line is\n       --  probably junk, but we don't feel like making an incompatible change!\n "}, {"sha": "f6553571c22c5ee68326eb2dd99eec16e5c104f3", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -818,24 +818,6 @@ package Lib.Writ is\n    --  The Alfa information follows the SCO information. See the spec of Alfa\n    --  in file alfa.ads for full details of the format.\n \n-   -------------------------------------\n-   -- T  Target Dependent Information --\n-   -------------------------------------\n-\n-   --  This section is present if the option to generate target dependent\n-   --  information is present (this flag is set by the -gnatT switch). The\n-   --  format of T lines is:\n-\n-   --    T key val\n-\n-   --  There is one line for each constant declared in the Ttypes package\n-\n-   --    key   is the four letter code (which can be found as a comment on each\n-   --          of the constant declarations in Ttypes).\n-\n-   --    val   is the value of the constant, which is either a non-negative\n-   --          decimal constant, or TRUE or FALSE for a Boolean value.\n-\n    ----------------------\n    -- Global Variables --\n    ----------------------"}, {"sha": "4bda344365014a898faf8280906c6aace5499d9d", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -664,11 +664,6 @@ package Opt is\n    --  True when switch -fdebug-instances is used. When True, a table of\n    --  instances is included in SCOs.\n \n-   Generate_Target_Dependent_Info : Boolean := False;\n-   --  GNAT\n-   --  When true (-gnatet switch used). True if target dependent info is to be\n-   --  generated in the ali file.\n-\n    Generating_Code : Boolean := False;\n    --  GNAT\n    --  True if the frontend finished its work and has called the backend to\n@@ -1336,6 +1331,25 @@ package Opt is\n    --  types and dispatching calls, assuming the underlying target supports\n    --  it (e.g. in the JVM case).\n \n+   Target_Dependent_Info_Read : Boolean := False;\n+   --  GNAT\n+   --  Set True to override the normal processing in Get_Targ and set the\n+   --  necessary information by reading the target dependent information\n+   --  file (see package Get_Targ in get_targ.ads for full details). Set\n+   --  True by use of the -gnateT switch.\n+\n+   Target_Dependent_Info_Write : Boolean := False;\n+   --  GNAT\n+   --  Set True to enable a call to Get_Targ.Write_Target_Dependent_Info which\n+   --  writes a target independent information file (see package Get_Targ in\n+   --  get_targ.ads for full details). Set True by use of the -gnatet switch.\n+   --\n+   --  Note: although we do indeed set this switch to True as documented above\n+   --  if -gnatet is encountered, we actually do not use this flag to enable\n+   --  writing of the file. That's because the read in Get_Targ has to be done\n+   --  long before the normal circuit for setting switches (see Get_Targ for\n+   --  full details of how we handle this requirement).\n+\n    Task_Dispatching_Policy : Character := ' ';\n    --  GNAT, GNATBIND\n    --  Set to ' ' for the default case (no task dispatching policy specified).\n@@ -1982,7 +1996,8 @@ package Opt is\n    Alfa_Mode : Boolean := False;\n    --  Specific compiling mode targeting formal verification through the\n    --  generation of Why code for those parts of the input code that belong to\n-   --  the Alfa subset of Ada. Set by the gnat2why executable.\n+   --  the Alfa subset of Ada. Set True by the gnat2why executable or by use\n+   --  of the -gnatd.F debug switch.\n \n    Frame_Condition_Mode : Boolean := False;\n    --  Specific mode to be used in combination with Alfa_Mode. If set to"}, {"sha": "da3c25deb5fdecba304aa17ec2e6fecee4f139ff", "filename": "gcc/ada/output.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Foutput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Foutput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -344,7 +344,7 @@ package body Output is\n \n    procedure Write_Eol is\n    begin\n-      --  Remove any trailing space\n+      --  Remove any trailing spaces\n \n       while Next_Col > 1 and then Buffer (Next_Col - 1) = ' ' loop\n          Next_Col := Next_Col - 1;"}, {"sha": "4e11fb1c2115ef280c438a1930d55c73ef6b0472", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1995-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -924,7 +924,6 @@ package System.OS_Lib is\n \n    procedure OS_Exit (Status : Integer);\n    pragma No_Return (OS_Exit);\n-\n    --  Exit to OS with given status code (program is terminated). Note that\n    --  this is abrupt termination. All tasks are immediately terminated. There\n    --  are no finalization or other Ada-specific cleanup actions performed. On"}, {"sha": "50e55f9812dc5459db6362e526d2c3eb5b62b08e", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -9297,6 +9297,17 @@ package body Sem_Attr is\n                Resolve (Prefix (P));\n                Generate_Reference (Entity (Selector_Name (P)), P);\n \n+            --  Implement check implied by 3.10.2 (18.1/2) : F.all'access is\n+            --  statically illegal if F is an anonymous access to subprogram.\n+\n+            elsif Nkind (P) = N_Explicit_Dereference\n+              and then Is_Entity_Name (Prefix (P))\n+              and then Ekind (Etype (Entity (Prefix  (P)))) =\n+                 E_Anonymous_Access_Subprogram_Type\n+            then\n+               Error_Msg_N (\"anonymous access to subprogram \"\n+                 &  \"has deeper accessibility than any master\", P);\n+\n             elsif Is_Overloaded (P) then\n \n                --  Use the designated type of the context to disambiguate"}, {"sha": "e8254a1452d54b067b26e1c21a596db497750cc1", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -2053,12 +2053,17 @@ package body Sem_Ch13 is\n \n                Set_Is_Delayed_Aspect (Aspect);\n \n-               --  In the case of Default_Value, link aspect to base type\n-               --  as well, even though it appears on a first subtype. This\n-               --  is mandated by the semantics of the aspect. Verify that\n-               --  this a scalar type, to prevent cascaded errors.\n-\n-               if A_Id = Aspect_Default_Value and then Is_Scalar_Type (E) then\n+               --  In the case of Default_Value, link the aspect to base type\n+               --  as well, even though it appears on a first subtype. This is\n+               --  mandated by the semantics of the aspect. Do not establish\n+               --  the link when processing the base type itself as this leads\n+               --  to a rep item circularity. Verify that we are dealing with\n+               --  a scalar type to prevent cascaded errors.\n+\n+               if A_Id = Aspect_Default_Value\n+                 and then Is_Scalar_Type (E)\n+                 and then Base_Type (E) /= E\n+               then\n                   Set_Has_Delayed_Aspects (Base_Type (E));\n                   Record_Rep_Item (Base_Type (E), Aspect);\n                end if;"}, {"sha": "b7a7d93ef7ef710b69e8ca68ba3c5f0291f30234", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -1941,7 +1941,10 @@ package body Sem_Ch4 is\n          Next (A);\n       end loop;\n \n-      --  This test needs a comment ???\n+      --  We currently hijack Expression_With_Actions with a VOID type and\n+      --  a NULL statement in the Expression. This will ultimately be replaced\n+      --  by a proper separate N_Compound_Statement node, at which point the\n+      --  test below can go away???\n \n       if Nkind (Expression (N)) = N_Null_Statement then\n          Set_Etype (N, Standard_Void_Type);"}, {"sha": "a612fa84d8fb328d21eba7e71db2a8f3e123d763", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -6821,10 +6821,12 @@ package body Sem_Res is\n       --  the expression must be rejected.\n \n       function Find_Unique_Access_Type return Entity_Id;\n-      --  In the case of allocators, make a last-ditch attempt to find a single\n-      --  access type with the right designated type. This is semantically\n-      --  dubious, and of no interest to any real code, but c48008a makes it\n-      --  all worthwhile.\n+      --  In the case of allocators and access attributes, the context must\n+      --  provide an indication of the specific access type to be used. If\n+      --  one operand is of such a \"generic\" access type, check whether there\n+      --  is a specific visible access type that has the same designated type.\n+      --  This is semantically dubious, and of no interest to any real code,\n+      --  but c48008a makes it all worthwhile.\n \n       -------------------------\n       -- Check_If_Expression --\n@@ -6857,9 +6859,14 @@ package body Sem_Res is\n          S   : Entity_Id;\n \n       begin\n-         if Ekind (Etype (R)) =  E_Allocator_Type then\n+         if Ekind (Etype (R)) =  E_Allocator_Type\n+           or else Ekind (Etype (R)) = E_Access_Attribute_Type\n+         then\n             Acc := Designated_Type (Etype (R));\n-         elsif Ekind (Etype (L)) =  E_Allocator_Type then\n+\n+         elsif Ekind (Etype (L)) =  E_Allocator_Type\n+           or else Ekind (Etype (L)) = E_Access_Attribute_Type\n+         then\n             Acc := Designated_Type (Etype (L));\n          else\n             return Empty;"}, {"sha": "90e83a68e86f94a079ce625fdf21fd0b3b65348a", "filename": "gcc/ada/set_targ.adb", "status": "modified", "additions": 3, "deletions": 66, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fset_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fset_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -134,10 +134,6 @@ package body Set_Targ is\n    pragma No_Return (Fail);\n    --  Terminate program with fatal error message passed as parameter\n \n-   type C_String is array (0 .. 255) of aliased Character;\n-   pragma Convention (C, C_String);\n-   --  String long enough to hold any mode name for the following call\n-\n    procedure Register_Float_Type\n      (Name      : C_String;\n       Digs      : Natural;\n@@ -327,7 +323,7 @@ package body Set_Targ is\n \n       procedure Write_Line;\n       --  Output contents of Buffer (1 .. Buflen) followed by a New_Line,\n-      --  and set Buflen back to zero.\n+      --  and set Buflen back to zero, ready to write next line.\n \n       ----------\n       -- AddC --\n@@ -536,68 +532,9 @@ begin\n       Wchar_T_Size               := Get_Wchar_T_Size;\n       Words_BE                   := Get_Words_BE;\n \n-      --  Register floating-point types from the back end (depending on the\n-      --  back end in use, we have to do different things to get this info).\n-\n-      case Get_Back_End is\n-\n-         --  GCC back end, get information using Enumerate_Modes\n-\n-         when GCC =>\n-            declare\n-               type Register_Type_Proc is access procedure\n-                 (C_Name    : C_String;\n-                  Digs      : Natural;\n-                  Complex   : Boolean;\n-                  Count     : Natural;\n-                  Float_Rep : Float_Rep_Kind;\n-                  Size      : Positive;\n-                  Alignment : Natural);\n-               pragma Convention (C, Register_Type_Proc);\n-               --  Call back procedure for Register_Back_End_Types\n-\n-               procedure Enumerate_Modes (Call_Back : Register_Type_Proc);\n-               pragma Import (C, Enumerate_Modes, \"enumerate_modes\");\n-               --  Back end procedure that does the call backs (see misc.c)\n-\n-            begin\n-               Num_FPT_Modes := 0;\n-               Enumerate_Modes (Register_Float_Type'Access);\n-            end;\n-\n-         --  AAMP back end, supply the two needed types directly\n-\n-         when AAMP =>\n-            declare\n-               Str : C_String;\n-\n-            begin\n-               Str (1 .. 6) := \"float\" & ASCII.NUL;\n-               Register_Float_Type\n-                 (Name      => Str,\n-                  Digs      => 6,\n-                  Complex   => False,\n-                  Count     => 0,\n-                  Float_Rep => AAMP,\n-                  Size      => 32,\n-                  Alignment => 16);\n-\n-               Str (1 .. 7) := \"double\" & ASCII.NUL;\n-               Register_Float_Type\n-                 (Name      => Str,\n-                  Digs      => 9,\n-                  Complex   => False,\n-                  Count     => 0,\n-                  Float_Rep => AAMP,\n-                  Size      => 48,\n-                  Alignment => 16);\n-            end;\n-\n-            --  DotNet TBD\n+      --  Register floating-point types from the back end\n \n-         when DOTNET =>\n-            null;\n-      end case;\n+      Register_Back_End_Types (Register_Float_Type'Access);\n \n       --  Case of reading the target dependent values from target.atp\n "}, {"sha": "86828817f57a1c3e2875614abb2904be1abc8ec8", "filename": "gcc/ada/set_targ.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fset_targ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fset_targ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.ads?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -137,8 +137,5 @@ package Set_Targ is\n    --     for a Mode_Entry (where float_rep is I/V/A for IEEE-754-Binary,\n    --     Vax_Native, AAMP), fields are separated by at least one blank, and\n    --     a LF character immediately follows the alignment field.\n-   --\n-   --    It is a fatal error to call this procedure if the target.atp file is\n-   --    not found in the current directory.\n \n end Set_Targ;"}, {"sha": "3c8d26a0035094cd3909d2cbf72630e44e68ec37", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -7074,7 +7074,11 @@ package Sinfo is\n       --  N_Expression_With_Actions has type Standard_Void_Type. However some\n       --  backends do not support such expression-with-actions occurring\n       --  outside of a proper (non-void) expression, so this should just be\n-      --  used as an intermediate representation within the front-end.\n+      --  used as an intermediate representation within the front-end. Also\n+      --  note that this is really an irregularity (expressions and statements\n+      --  are not interchangeable, and in particular an N_Null_Statement is\n+      --  not a proper expression), and in the long term all cases of this\n+      --  idiom should instead use a new node kind N_Compound_Statement.\n \n       --------------------\n       -- Free Statement --"}, {"sha": "4ebecc9430ff86d2830772b199ea966297c54827", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -147,6 +147,10 @@ package body Switch.C is\n       First_Char : Positive;\n       --  Marks start of switch to be stored\n \n+      First_Ptr : Positive;\n+      --  Save position of first character after -gnatd (for checking that\n+      --  debug flags that must come first are first, in particular -gnatd.b),\n+\n    begin\n       Ptr := Switch_Chars'First;\n \n@@ -333,6 +337,7 @@ package body Switch.C is\n             when 'd' =>\n                Store_Switch := False;\n                Dot := False;\n+               First_Ptr := Ptr + 1;\n \n                --  Note: for the debug switch, the remaining characters in this\n                --  switch field must all be debug flags, since all valid switch\n@@ -349,9 +354,25 @@ package body Switch.C is\n                      C in 'a' .. 'z' or else\n                      C in 'A' .. 'Z'\n                   then\n+                     --  Case of dotted flag\n+\n                      if Dot then\n                         Set_Dotted_Debug_Flag (C);\n                         Store_Compilation_Switch (\"-gnatd.\" & C);\n+\n+                        --  Special check, -gnatd.b must come first\n+\n+                        if C = 'b'\n+                          and then (Ptr /= First_Ptr + 1\n+                                      or else not First_Switch)\n+                        then\n+                           Osint.Fail\n+                             (\"-gnatd.b must be first if combined \"\n+                              & \"with other switches\");\n+                        end if;\n+\n+                     --  Not a dotted flag\n+\n                      else\n                         Set_Debug_Flag (C);\n                         Store_Compilation_Switch (\"-gnatd\" & C);\n@@ -627,10 +648,22 @@ package body Switch.C is\n                      Generate_SCO_Instance_Table := True;\n                      Ptr := Ptr + 1;\n \n-                  --  -gnatet (generate target dependent information)\n+                  --  -gnatet (write target dependent information)\n \n                   when 't' =>\n-                     Generate_Target_Dependent_Info := True;\n+                     Target_Dependent_Info_Write := True;\n+                     Ptr := Ptr + 1;\n+\n+                  --  -gnateT (read target dependent information)\n+\n+                  when 'T' =>\n+                     if not First_Switch then\n+                        Osint.Fail\n+                          (\"-gnateT must be first if combined with \"\n+                           & \"other switches\");\n+                     end if;\n+\n+                     Target_Dependent_Info_Read := True;\n                      Ptr := Ptr + 1;\n \n                   --  -gnateV (validity checks on parameters)"}, {"sha": "924fb0e90517200a150b02fb011d737fc85e489d", "filename": "gcc/ada/ttypes.ads", "status": "modified", "additions": 60, "deletions": 73, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fttypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fttypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fttypes.ads?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -26,7 +26,8 @@\n --  This package contains constants describing target properties\n \n with Types;    use Types;\n-with Get_Targ; use Get_Targ;\n+with Get_Targ;\n+with Set_Targ;\n \n package Ttypes is\n \n@@ -92,18 +93,6 @@ package Ttypes is\n    --  than referencing System.Storage_Unit, or Standard'Storage_Unit, both of\n    --  which would yield the host value.\n \n-   ----------------------------------------------\n-   -- Target-Dependent Information in ALI File --\n-   ----------------------------------------------\n-\n-   --  If the flag Generate_Target_Dependent_Info is set (e.g. by use of the\n-   --  -gnatT switch), then the ALI file contains T lines representing each of\n-   --  the constants defined in this package (see Lib-Writ spec for details).\n-\n-   --  These T lines use a code consisting of four upper case letters to\n-   --  identify the constant whose value is output. These four letter codes\n-   --  may be found as a comment in the declaration of each constant.\n-\n    ---------------------------------------------------\n    -- Target-Dependent Values for Types in Standard --\n    ---------------------------------------------------\n@@ -113,65 +102,64 @@ package Ttypes is\n    --  example, on some machines, Short_Float may be the same as Float, and\n    --  Long_Long_Float may be the same as Long_Float.\n \n-   Standard_Short_Short_Integer_Size  : constant Pos :=               -- SINS\n-                                          Get_Char_Size;\n-   Standard_Short_Short_Integer_Width : constant Pos :=               -- SINW\n-                                          Width_From_Size\n+   Standard_Short_Short_Integer_Size  : constant Pos :=\n+                                          Set_Targ.Char_Size;\n+   Standard_Short_Short_Integer_Width : constant Pos :=\n+                                          Get_Targ.Width_From_Size\n                                            (Standard_Short_Short_Integer_Size);\n \n-   Standard_Short_Integer_Size        : constant Pos :=               -- SHIS\n-                                          Get_Short_Size;\n-   Standard_Short_Integer_Width       : constant Pos :=               -- SHIW\n-                                          Width_From_Size\n+   Standard_Short_Integer_Size        : constant Pos :=\n+                                          Set_Targ.Short_Size;\n+   Standard_Short_Integer_Width       : constant Pos :=\n+                                          Get_Targ.Width_From_Size\n                                             (Standard_Short_Integer_Size);\n \n-   Standard_Integer_Size              : constant Pos :=               -- INTS\n-                                          Get_Int_Size;\n-   Standard_Integer_Width             : constant Pos :=               -- INTW\n-                                          Width_From_Size\n+   Standard_Integer_Size              : constant Pos :=\n+                                          Set_Targ.Int_Size;\n+   Standard_Integer_Width             : constant Pos :=\n+                                          Get_Targ.Width_From_Size\n                                             (Standard_Integer_Size);\n \n-   Standard_Long_Integer_Size         : constant Pos :=               -- LINS\n-                                          Get_Long_Size;\n-   Standard_Long_Integer_Width        : constant Pos :=               -- LINW\n-                                          Width_From_Size\n+   Standard_Long_Integer_Size         : constant Pos :=\n+                                          Set_Targ.Long_Size;\n+   Standard_Long_Integer_Width        : constant Pos :=\n+                                          Get_Targ.Width_From_Size\n                                             (Standard_Long_Integer_Size);\n \n-   Standard_Long_Long_Integer_Size    : constant Pos :=               -- LLIS\n-                                          Get_Long_Long_Size;\n-   Standard_Long_Long_Integer_Width   : constant Pos :=               -- LLIW\n-                                          Width_From_Size\n+   Standard_Long_Long_Integer_Size    : constant Pos :=\n+                                          Set_Targ.Long_Long_Size;\n+   Standard_Long_Long_Integer_Width   : constant Pos :=\n+                                          Get_Targ.Width_From_Size\n                                             (Standard_Long_Long_Integer_Size);\n \n-   Standard_Short_Float_Size          : constant Pos :=               -- SFLS\n-                                          Get_Float_Size;\n-   Standard_Short_Float_Digits        : constant Pos :=               -- SFLD\n-                                          Digits_From_Size\n+   Standard_Short_Float_Size          : constant Pos :=\n+                                          Set_Targ.Float_Size;\n+   Standard_Short_Float_Digits        : constant Pos :=\n+                                          Get_Targ.Digits_From_Size\n                                             (Standard_Short_Float_Size);\n \n-   Standard_Float_Size                : constant Pos :=               -- FLTS\n-                                          Get_Float_Size;\n-   Standard_Float_Digits              : constant Pos :=               -- FLTD\n-                                          Digits_From_Size\n+   Standard_Float_Size                : constant Pos :=\n+                                          Set_Targ.Float_Size;\n+   Standard_Float_Digits              : constant Pos :=\n+                                          Get_Targ.Digits_From_Size\n                                             (Standard_Float_Size);\n \n-   Standard_Long_Float_Size           : constant Pos :=               -- LFLS\n-                                          Get_Double_Size;\n-   Standard_Long_Float_Digits         : constant Pos :=               -- LFLD\n-                                          Digits_From_Size\n+   Standard_Long_Float_Size           : constant Pos :=\n+                                          Set_Targ.Double_Size;\n+   Standard_Long_Float_Digits         : constant Pos :=\n+                                          Get_Targ.Digits_From_Size\n                                             (Standard_Long_Float_Size);\n \n-   Standard_Long_Long_Float_Size      : constant Pos :=               -- LLFS\n-                                          Get_Long_Double_Size;\n-   Standard_Long_Long_Float_Digits    : constant Pos :=               -- LLFD\n-                                          Digits_From_Size\n+   Standard_Long_Long_Float_Size      : constant Pos :=\n+                                          Set_Targ.Long_Double_Size;\n+   Standard_Long_Long_Float_Digits    : constant Pos :=\n+                                          Get_Targ.Digits_From_Size\n                                             (Standard_Long_Long_Float_Size);\n \n-   Standard_Character_Size            : constant Pos :=               -- CHAS\n-                                          Get_Char_Size;\n+   Standard_Character_Size            : constant Pos := Set_Targ.Char_Size;\n \n-   Standard_Wide_Character_Size       : constant Pos := 16;           -- WCHS\n-   Standard_Wide_Wide_Character_Size  : constant Pos := 32;           -- WWCS\n+   Standard_Wide_Character_Size       : constant Pos := 16;\n+   Standard_Wide_Wide_Character_Size  : constant Pos := 32;\n    --  Standard wide character sizes\n \n    --  Note: there is no specific control over the representation of\n@@ -187,19 +175,18 @@ package Ttypes is\n    -- Target-Dependent Values for Types in System --\n    -------------------------------------------------\n \n-   System_Address_Size : constant Pos := Get_Pointer_Size;            -- ADRS\n+   System_Address_Size : constant Pos := Set_Targ.Pointer_Size;\n    --  System.Address'Size (also size of all thin pointers)\n \n-   System_Max_Binary_Modulus_Power : constant Pos :=                  -- MBMP\n+   System_Max_Binary_Modulus_Power : constant Pos :=\n                                        Standard_Long_Long_Integer_Size;\n \n-   System_Max_Nonbinary_Modulus_Power : constant Pos :=               -- MNMP\n-                                          Standard_Integer_Size;\n+   System_Max_Nonbinary_Modulus_Power : constant Pos := Standard_Integer_Size;\n \n-   System_Storage_Unit : constant Pos := Get_Bits_Per_Unit;           -- SUNI\n-   System_Word_Size    : constant Pos := Get_Bits_Per_Word;           -- WRDS\n+   System_Storage_Unit : constant Pos := Set_Targ.Bits_Per_Unit;\n+   System_Word_Size    : constant Pos := Set_Targ.Bits_Per_Word;\n \n-   System_Tick_Nanoseconds : constant Pos := 1_000_000_000;           -- TICK\n+   System_Tick_Nanoseconds : constant Pos := 1_000_000_000;\n    --  Value of System.Tick in nanoseconds. At the moment, this is a fixed\n    --  constant (with value of 1.0 seconds), but later we should add this\n    --  value to the GCC configuration file so that its value can be made\n@@ -209,25 +196,25 @@ package Ttypes is\n    -- Target-Dependent Values for Types in Interfaces --\n    -----------------------------------------------------\n \n-   Interfaces_Wchar_T_Size : constant Pos := Get_Wchar_T_Size;        -- WCTS\n+   Interfaces_Wchar_T_Size : constant Pos := Set_Targ.Wchar_T_Size;\n \n    ----------------------------------------\n    -- Other Target-Dependent Definitions --\n    ----------------------------------------\n \n-   Maximum_Alignment : constant Pos := Get_Maximum_Alignment;        -- MAXA\n+   Maximum_Alignment : constant Pos := Set_Targ.Maximum_Alignment;\n    --  The maximum alignment, in storage units, that an object or type may\n    --  require on the target machine.\n \n-   System_Allocator_Alignment : constant Pos :=                      -- ALLA\n-                                  Get_System_Allocator_Alignment;\n+   System_Allocator_Alignment : constant Pos :=\n+                                  Set_Targ.System_Allocator_Alignment;\n    --  The alignment in storage units of addresses returned by malloc\n \n-   Max_Unaligned_Field : constant Pos := Get_Max_Unaligned_Field;    -- MUNF\n+   Max_Unaligned_Field : constant Pos := Set_Targ.Max_Unaligned_Field;\n    --  The maximum supported size in bits for a field that is not aligned\n    --  on a storage unit boundary.\n \n-   Bytes_Big_Endian : Boolean := Get_Bytes_BE /= 0;                  -- BEND\n+   Bytes_Big_Endian : Boolean := Set_Targ.Bytes_BE /= 0;\n    --  Important note: for Ada purposes, the important setting is the bytes\n    --  endianness (Bytes_Big_Endian), not the bits value (Bits_Big_Endian).\n    --  This is because Ada bit addressing must be compatible with the byte\n@@ -237,20 +224,20 @@ package Ttypes is\n    --  and thus relevant only to the back end. Note that this is a variable\n    --  rather than a constant, since it can be modified (flipped) by -gnatd8.\n \n-   Target_Strict_Alignment : Boolean :=                               -- STRA\n-                               Get_Strict_Alignment /= 0;\n+   Target_Strict_Alignment : Boolean :=\n+                               Set_Targ.Strict_Alignment /= 0;\n    --  True if instructions will fail if data is misaligned. Note that this\n    --  is a variable rather than a constant since it can be modified (set to\n    --  True) if the debug flag -gnatd.A is used.\n \n-   Target_Double_Float_Alignment : constant Nat :=                    -- DFLA\n-                                     Get_Double_Float_Alignment;\n+   Target_Double_Float_Alignment : constant Nat :=\n+                                     Set_Targ.Double_Float_Alignment;\n    --  The default alignment of \"double\" floating-point types, i.e. floating\n    --  point types whose size is equal to 64 bits, or 0 if this alignment is\n    --  not specifically capped.\n \n-   Target_Double_Scalar_Alignment : constant Nat :=                   -- DSCA\n-                                      Get_Double_Scalar_Alignment;\n+   Target_Double_Scalar_Alignment : constant Nat :=\n+                                      Set_Targ.Double_Scalar_Alignment;\n    --  The default alignment of \"double\" or larger scalar types, i.e. scalar\n    --  types whose size is greater or equal to 64 bits, or 0 if this alignment\n    --  is not specifically capped."}, {"sha": "7df00c9b3893e0acd327916695c01e5d5c15118f", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/289a994bb9f60f3516e8662218d79d3049b95659/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=289a994bb9f60f3516e8662218d79d3049b95659", "patch": "@@ -244,7 +244,12 @@ begin\n    --  Line for -gnatet switch\n \n    Write_Switch_Char (\"et\");\n-   Write_Line (\"Generate target dependent information in ALI file\");\n+   Write_Line (\"Write target dependent information file\");\n+\n+   --  Line for -gnateT switch\n+\n+   Write_Switch_Char (\"eT\");\n+   Write_Line (\"Read target dependent information file\");\n \n    --  Line for -gnateV switch\n "}]}