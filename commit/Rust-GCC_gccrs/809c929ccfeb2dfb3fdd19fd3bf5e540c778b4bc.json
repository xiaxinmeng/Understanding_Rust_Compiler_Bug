{"sha": "809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA5YzkyOWNjZmViMmRmYjNmZGQxOWZkM2JmNWU1NDBjNzc4YjRiYw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2012-04-27T12:20:01Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2012-04-27T12:20:01Z"}, "message": "tree-ssa-phiopt.c (conditional_replacement): Replace PHIs whose arguments are -1 and 0...\n\n2012-04-27  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* tree-ssa-phiopt.c (conditional_replacement): Replace PHIs\n\twhose arguments are -1 and 0, by negating the result of the\n\tconditional.\n\ntestsuite:\n2012-04-27  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* gcc.c-torture/execute/20120427-2.c: New testcase.\n\t* gcc.dg/tree-ssa/phi-opt-10.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-pre-28.c: Bypass new optimization.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-7.c: Look into ifcombine dump.\n\nFrom-SVN: r186905", "tree": {"sha": "50dc39dd31ef6d29a1116c582f05d381a88fc900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50dc39dd31ef6d29a1116c582f05d381a88fc900"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5548709911e5961c5cfbd4c32002815d98bc694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5548709911e5961c5cfbd4c32002815d98bc694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5548709911e5961c5cfbd4c32002815d98bc694"}], "stats": {"total": 98, "additions": 86, "deletions": 12}, "files": [{"sha": "22411c2f0c3eeb578e8e458bd0976aa7dc9ed274", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc", "patch": "@@ -1,3 +1,9 @@\n+2012-04-27  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* tree-ssa-phiopt.c (conditional_replacement): Replace PHIs\n+\twhose arguments are -1 and 0, by negating the result of the\n+\tconditional.\n+\n 2012-04-27  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR target/53138"}, {"sha": "72f1f468456f433809902fa6ea24c3906ecf2c7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc", "patch": "@@ -1,3 +1,10 @@\n+2012-04-27  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* gcc.c-torture/execute/20120427-2.c: New testcase.\n+\t* gcc.dg/tree-ssa/phi-opt-10.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-pre-28.c: Bypass new optimization.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-7.c: Look into ifcombine dump.\n+\n 2012-04-27  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR target/53138"}, {"sha": "e473a4772a9ee1316fb6ae36c1d76bf9ea78f584", "filename": "gcc/testsuite/gcc.c-torture/execute/20120427-2.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20120427-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20120427-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20120427-2.c?ref=809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc", "patch": "@@ -0,0 +1,38 @@\n+typedef struct sreal\n+{\n+  unsigned sig;\t\t/* Significant.  */\n+  int exp;\t\t/* Exponent.  */\n+} sreal;\n+\n+sreal_compare (sreal *a, sreal *b)\n+{\n+  if (a->exp > b->exp)\n+    return 1;\n+  if (a->exp < b->exp)\n+    return -1;\n+  if (a->sig > b->sig)\n+    return 1;\n+  if (a->sig < b->sig)\n+    return -1;\n+  return 0;\n+}\n+\n+sreal a[] = {\n+   { 0, 0 },\n+   { 1, 0 },\n+   { 0, 1 },\n+   { 1, 1 }\n+};\n+\n+int main()\n+{\n+  int i, j;\n+  for (i = 0; i <= 3; i++) {\n+    for (j = 0; j < 3; j++) {\n+      if (i < j && sreal_compare(&a[i], &a[j]) != -1) abort();\n+      if (i == j && sreal_compare(&a[i], &a[j]) != 0) abort();\n+      if (i > j && sreal_compare(&a[i], &a[j]) != 1) abort();\n+    }\n+  }\n+  return 0;\n+}"}, {"sha": "52b5942eb3a8e822e47c0e46ae8444a9da873a89", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-10.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-10.c?ref=809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int nem1_phi (unsigned long a) { return a ? -1 : 0; }\n+int eqm1_phi (unsigned long a) { return a ? 0 : -1; }\n+\n+int spaceship1 (long a) { return a > 0 ? 1 : a < 0 ? -1 : 0; }\n+int spaceship2 (long a) { return a > 0 ? 1 : a == 0 ? 0 : -1; }\n+\n+/* { dg-final { scan-tree-dump-times \" = -D\" 4 \"optimized\"} } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "617cb585a94869d758d278b82e3c5edb3e25146a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-7.c?ref=809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-optimized\" } */\n+/* { dg-options \"-O -fdump-tree-ifcombine\" } */\n \n int test1 (int i, int j)\n {\n@@ -11,5 +11,5 @@ int test1 (int i, int j)\n \n /* The above should be optimized to a i > j test by ifcombine.  */\n \n-/* { dg-final { scan-tree-dump \" > \" \"optimized\" } } */\n-/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \" > \" \"ifcombine\" } } */\n+/* { dg-final { cleanup-tree-dump \"ifcombine\" } } */"}, {"sha": "55887a694dc12f7dd216fc2950f999550c4defc0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-28.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-28.c?ref=809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc", "patch": "@@ -6,7 +6,7 @@ int foo (int i, int b, int result)\n {\n   int mask;\n   if (b)\n-    mask = -1;\n+    mask = -2;\n   else\n     mask = 0;\n   result = i + 1;\n@@ -15,7 +15,7 @@ int foo (int i, int b, int result)\n }\n \n /* We should insert i + 1 into the if (b) path as well as the simplified\n-   i + 1 & -1 expression.  And do replacement with two PHI temps.  */\n+   i + 1 & -2 expression.  And do replacement with two PHI temps.  */\n \n /* { dg-final { scan-tree-dump-times \"with prephitmp\" 2 \"pre\" } } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "88c16e683733968faf519ef0a36e5f436bd20035", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=809c929ccfeb2dfb3fdd19fd3bf5e540c778b4bc", "patch": "@@ -536,17 +536,21 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n   gimple_stmt_iterator gsi;\n   edge true_edge, false_edge;\n   tree new_var, new_var2;\n+  bool neg;\n \n   /* FIXME: Gimplification of complex type is too hard for now.  */\n   if (TREE_CODE (TREE_TYPE (arg0)) == COMPLEX_TYPE\n       || TREE_CODE (TREE_TYPE (arg1)) == COMPLEX_TYPE)\n     return false;\n \n-  /* The PHI arguments have the constants 0 and 1, then convert\n-     it to the conditional.  */\n+  /* The PHI arguments have the constants 0 and 1, or 0 and -1, then\n+     convert it to the conditional.  */\n   if ((integer_zerop (arg0) && integer_onep (arg1))\n       || (integer_zerop (arg1) && integer_onep (arg0)))\n-    ;\n+    neg = false;\n+  else if ((integer_zerop (arg0) && integer_all_onesp (arg1))\n+\t   || (integer_zerop (arg1) && integer_all_onesp (arg0)))\n+    neg = true;\n   else\n     return false;\n \n@@ -558,7 +562,7 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n      falls through into BB.\n \n      There is a single PHI node at the join point (BB) and its arguments\n-     are constants (0, 1).\n+     are constants (0, 1) or (0, -1).\n \n      So, given the condition COND, and the two PHI arguments, we can\n      rewrite this PHI into non-branching code:\n@@ -585,11 +589,19 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n      edge so that we know when to invert the condition below.  */\n   extract_true_false_edges_from_block (cond_bb, &true_edge, &false_edge);\n   if ((e0 == true_edge && integer_zerop (arg0))\n-      || (e0 == false_edge && integer_onep (arg0))\n+      || (e0 == false_edge && !integer_zerop (arg0))\n       || (e1 == true_edge && integer_zerop (arg1))\n-      || (e1 == false_edge && integer_onep (arg1)))\n+      || (e1 == false_edge && !integer_zerop (arg1)))\n     cond = fold_build1_loc (gimple_location (stmt),\n-\t\t\t    TRUTH_NOT_EXPR, TREE_TYPE (cond), cond);\n+                            TRUTH_NOT_EXPR, TREE_TYPE (cond), cond);\n+\n+  if (neg)\n+    {\n+      cond = fold_convert_loc (gimple_location (stmt),\n+                               TREE_TYPE (result), cond);\n+      cond = fold_build1_loc (gimple_location (stmt),\n+                              NEGATE_EXPR, TREE_TYPE (cond), cond);\n+    }\n \n   /* Insert our new statements at the end of conditional block before the\n      COND_STMT.  */"}]}