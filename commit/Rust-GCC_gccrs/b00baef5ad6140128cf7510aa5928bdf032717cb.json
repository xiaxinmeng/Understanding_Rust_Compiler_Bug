{"sha": "b00baef5ad6140128cf7510aa5928bdf032717cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAwYmFlZjVhZDYxNDAxMjhjZjc1MTBhYTU5MjhiZGYwMzI3MTdjYg==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2018-05-22T13:26:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-22T13:26:23Z"}, "message": "[Ada] Disable name generation for External_Tag and Expanded_Name\n\nIn order to avoid exposing internal names of tagged types in the\nbinary code generated by the compiler this enhancement facilitates\ninitializes the External_Tag of a tagged type with an empty string\nwhen pragma No_Tagged_Streams is applicable to the tagged type, and\nfacilitates initializes its Expanded_Name with an empty string when\npragma Discard_Names is applicable to the tagged type.\n\nThis enhancement can be verified by means of the following small\ntest:\n\npackage Library_Level_Test is\n   type Typ_01 is tagged null record;    --  Case 1: No pragmas\n\n   type Typ_02 is tagged null record;    --  Case 2: Discard_Names\n   pragma Discard_Names (Typ_02);\n\n   pragma No_Tagged_Streams;\n   type Typ_03 is tagged null record;    --  Case 3: No_Tagged_Streams\n\n   type Typ_04 is tagged null record;    --  Case 4: Both pragmas\n   pragma Discard_Names (Typ_04);\nend;\n\nCommands:\n  gcc -c -gnatD library_level_test.ads\n  grep \"\\.TYP_\" library_level_test.ads.dg\n\nOutput:\n     \"LIBRARY_LEVEL_TEST.TYP_01[\"00\"]\";\n     \"LIBRARY_LEVEL_TEST.TYP_02[\"00\"]\";\n     \"LIBRARY_LEVEL_TEST.TYP_03[\"00\"]\";\n\n2018-05-22  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* exp_disp.adb (Make_DT): Initialize the External_Tag with an empty\n\tstring when pragma No_Tagged_Streams is applicable to the tagged type,\n\tand initialize the Expanded_Name with an empty string when pragma\n\tDiscard_Names is applicable to the tagged type.\n\nFrom-SVN: r260528", "tree": {"sha": "2e104d23ed454dc694d2515be26d9c56d539a6b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e104d23ed454dc694d2515be26d9c56d539a6b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b00baef5ad6140128cf7510aa5928bdf032717cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00baef5ad6140128cf7510aa5928bdf032717cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b00baef5ad6140128cf7510aa5928bdf032717cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b00baef5ad6140128cf7510aa5928bdf032717cb/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90fa86136a27e147c0bb53434696c2baaba62b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90fa86136a27e147c0bb53434696c2baaba62b41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90fa86136a27e147c0bb53434696c2baaba62b41"}], "stats": {"total": 156, "additions": 133, "deletions": 23}, "files": [{"sha": "ebfe6d4417c43834c42df92723ec0439afabdeac", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00baef5ad6140128cf7510aa5928bdf032717cb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00baef5ad6140128cf7510aa5928bdf032717cb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b00baef5ad6140128cf7510aa5928bdf032717cb", "patch": "@@ -1,3 +1,10 @@\n+2018-05-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Make_DT): Initialize the External_Tag with an empty\n+\tstring when pragma No_Tagged_Streams is applicable to the tagged type,\n+\tand initialize the Expanded_Name with an empty string when pragma\n+\tDiscard_Names is applicable to the tagged type.\n+\n 2018-05-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (Check_Conformance): Add RM reference for rule that a"}, {"sha": "2840c8ef91fdfd1d0480ff0eeaf98c976593079f", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 126, "deletions": 23, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b00baef5ad6140128cf7510aa5928bdf032717cb/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b00baef5ad6140128cf7510aa5928bdf032717cb/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=b00baef5ad6140128cf7510aa5928bdf032717cb", "patch": "@@ -4511,7 +4511,8 @@ package body Exp_Disp is\n       DT_Aggr_List       : List_Id;\n       DT_Constr_List     : List_Id;\n       DT_Ptr             : Entity_Id;\n-      Exname             : Entity_Id;\n+      Expanded_Name      : Entity_Id;\n+      External_Tag_Name  : Entity_Id;\n       HT_Link            : Entity_Id;\n       ITable             : Node_Id;\n       I_Depth            : Nat := 0;\n@@ -4590,12 +4591,44 @@ package body Exp_Disp is\n          end if;\n       end if;\n \n-      DT           := Make_Defining_Identifier (Loc, Name_DT);\n-      Exname       := Make_Defining_Identifier (Loc, Name_Exname);\n-      HT_Link      := Make_Defining_Identifier (Loc, Name_HT_Link);\n-      Predef_Prims := Make_Defining_Identifier (Loc, Name_Predef_Prims);\n-      SSD          := Make_Defining_Identifier (Loc, Name_SSD);\n-      TSD          := Make_Defining_Identifier (Loc, Name_TSD);\n+      DT            := Make_Defining_Identifier (Loc, Name_DT);\n+      Expanded_Name := Make_Defining_Identifier (Loc, Name_Exname);\n+      HT_Link       := Make_Defining_Identifier (Loc, Name_HT_Link);\n+      Predef_Prims  := Make_Defining_Identifier (Loc, Name_Predef_Prims);\n+      SSD           := Make_Defining_Identifier (Loc, Name_SSD);\n+      TSD           := Make_Defining_Identifier (Loc, Name_TSD);\n+\n+      --  Expanded_Name\n+      --  -------------\n+\n+      --  We generally initialize the Expanded_Name and the External_Tag of\n+      --  tagged types with the same name, unless pragmas Discard_Names or\n+      --  No_Tagged_Streams apply: Discard_Names allows us to initialize its\n+      --  Expanded_Name with an empty string because in such a case it's\n+      --  value is implementation defined (Ada RM Section C.5(7/2)); pragma\n+      --  No_Tagged_Streams inhibits the generation of stream routines and\n+      --  we initialize its External_Tag with an empty string since Ada.Tags\n+      --  services Internal_Tag and External_Tag are mainly used with streams.\n+\n+      --  Small optimization: when both pragmas apply then there is no need to\n+      --  declare two objects initialized with empty strings (since the two\n+      --  aggregate components can be initialized with the same object).\n+\n+      if (Global_Discard_Names or else Discard_Names (Typ))\n+        and then Present (No_Tagged_Streams_Pragma (Typ))\n+      then\n+         External_Tag_Name := Expanded_Name;\n+\n+      elsif Global_Discard_Names\n+        or else Discard_Names (Typ)\n+        or else Present (No_Tagged_Streams_Pragma (Typ))\n+      then\n+         External_Tag_Name :=\n+           Make_Defining_Identifier (Loc,\n+             New_External_Name (Tname, 'N', Suffix_Index => -1));\n+      else\n+         External_Tag_Name := Expanded_Name;\n+      end if;\n \n       --  Initialize Parent_Typ handling private types\n \n@@ -5000,20 +5033,72 @@ package body Exp_Disp is\n          end if;\n       end if;\n \n-      --  Generate: Exname : constant String := full_qualified_name (typ);\n+      --  Generate: Expanded_Name : constant String := \"\";\n+\n+      if Global_Discard_Names or else Discard_Names (Typ) then\n+         Append_To (Result,\n+           Make_Object_Declaration (Loc,\n+             Defining_Identifier => Expanded_Name,\n+             Constant_Present    => True,\n+             Object_Definition   => New_Occurrence_Of (Standard_String, Loc),\n+             Expression =>\n+               Make_String_Literal (Loc, \"\")));\n+\n+      --  Generate:\n+      --    Expanded_Name : constant String := full_qualified_name (typ);\n       --  The type itself may be an anonymous parent type, so use the first\n       --  subtype to have a user-recognizable name.\n \n-      Append_To (Result,\n-        Make_Object_Declaration (Loc,\n-          Defining_Identifier => Exname,\n-          Constant_Present    => True,\n-          Object_Definition   => New_Occurrence_Of (Standard_String, Loc),\n-          Expression =>\n-            Make_String_Literal (Loc,\n-              Strval => Fully_Qualified_Name_String (First_Subtype (Typ)))));\n-      Set_Is_Statically_Allocated (Exname);\n-      Set_Is_True_Constant (Exname);\n+      else\n+         Append_To (Result,\n+           Make_Object_Declaration (Loc,\n+             Defining_Identifier => Expanded_Name,\n+             Constant_Present    => True,\n+             Object_Definition   => New_Occurrence_Of (Standard_String, Loc),\n+             Expression =>\n+               Make_String_Literal (Loc,\n+                 Fully_Qualified_Name_String (First_Subtype (Typ)))));\n+      end if;\n+\n+      Set_Is_Statically_Allocated (Expanded_Name);\n+      Set_Is_True_Constant (Expanded_Name);\n+\n+      --  Generate the External_Tag name only when it is required (since in\n+      --  most cases we can initialize Expanded_Name and External_Tag using\n+      --  the same object).\n+\n+      if Expanded_Name /= External_Tag_Name then\n+\n+         --  Generate: External_Tag_Name : constant String := \"\";\n+\n+         if Present (No_Tagged_Streams_Pragma (Typ)) then\n+            Append_To (Result,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => External_Tag_Name,\n+                Constant_Present    => True,\n+                Object_Definition   => New_Occurrence_Of\n+                                         (Standard_String, Loc),\n+                Expression =>\n+                  Make_String_Literal (Loc, \"\")));\n+\n+         --  Generate:\n+         --   External_Tag_Name : constant String := full_qualified_name (typ);\n+\n+         else\n+            Append_To (Result,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => External_Tag_Name,\n+                Constant_Present    => True,\n+                Object_Definition   => New_Occurrence_Of\n+                                         (Standard_String, Loc),\n+                Expression =>\n+                  Make_String_Literal (Loc,\n+                    Fully_Qualified_Name_String (First_Subtype (Typ)))));\n+         end if;\n+\n+         Set_Is_Statically_Allocated (External_Tag_Name);\n+         Set_Is_True_Constant (External_Tag_Name);\n+      end if;\n \n       --  Declare the object used by Ada.Tags.Register_Tag\n \n@@ -5033,8 +5118,8 @@ package body Exp_Disp is\n       --           (Idepth             => I_Depth,\n       --            Access_Level       => Type_Access_Level (Typ),\n       --            Alignment          => Typ'Alignment,\n-      --            Expanded_Name      => Cstring_Ptr!(Exname'Address))\n-      --            External_Tag       => Cstring_Ptr!(Exname'Address))\n+      --            Expanded_Name      => Cstring_Ptr!(ExpandedName'Address))\n+      --            External_Tag       => Cstring_Ptr!(ExternalName'Address))\n       --            HT_Link            => HT_Link'Address,\n       --            Transportable      => <<boolean-value>>,\n       --            Is_Abstract        => <<boolean-value>>,\n@@ -5104,9 +5189,19 @@ package body Exp_Disp is\n       Append_To (TSD_Aggr_List,\n         Unchecked_Convert_To (RTE (RE_Cstring_Ptr),\n           Make_Attribute_Reference (Loc,\n-            Prefix         => New_Occurrence_Of (Exname, Loc),\n+            Prefix         => New_Occurrence_Of (Expanded_Name, Loc),\n             Attribute_Name => Name_Address)));\n \n+      --  External_Tag when pragma No_Tagged_Streams applies\n+\n+      if Present (No_Tagged_Streams_Pragma (Typ)) then\n+         New_Node :=\n+           Unchecked_Convert_To (RTE (RE_Cstring_Ptr),\n+             Make_Attribute_Reference (Loc,\n+               Prefix         => New_Occurrence_Of\n+                                   (External_Tag_Name, Loc),\n+               Attribute_Name => Name_Address));\n+\n       --  External_Tag of a local tagged type\n \n       --     <typ>A : constant String :=\n@@ -5134,7 +5229,7 @@ package body Exp_Disp is\n       --  specified. That's an odd case for which we have already issued a\n       --  warning, where we will not be able to compute the internal tag.\n \n-      if not Is_Library_Level_Entity (Typ)\n+      elsif not Is_Library_Level_Entity (Typ)\n         and then not Has_External_Tag_Rep_Clause (Typ)\n       then\n          declare\n@@ -5189,6 +5284,9 @@ package body Exp_Disp is\n                            Right_Opnd =>\n                              Make_String_Literal (Loc, Str2_Id)))));\n \n+            --  Generate:\n+            --    Exname : constant String := Str1 & Str2;\n+\n             else\n                Append_To (Result,\n                  Make_Object_Declaration (Loc,\n@@ -5234,7 +5332,8 @@ package body Exp_Disp is\n                New_Node :=\n                  Unchecked_Convert_To (RTE (RE_Cstring_Ptr),\n                    Make_Attribute_Reference (Loc,\n-                     Prefix         => New_Occurrence_Of (Exname, Loc),\n+                     Prefix         => New_Occurrence_Of\n+                                         (External_Tag_Name, Loc),\n                      Attribute_Name => Name_Address));\n             else\n                Old_Val := Strval (Expr_Value_S (Expression (Def)));\n@@ -6406,10 +6505,14 @@ package body Exp_Disp is\n       --  We check for No_Run_Time_Mode here, because we do not want to pick\n       --  up the RE_Check_TSD entity and call it in No_Run_Time mode.\n \n+      --  We cannot perform this check if the generation of its expanded name\n+      --  was discarded.\n+\n       if not No_Run_Time_Mode\n         and then Ada_Version >= Ada_2005\n         and then RTE_Available (RE_Check_TSD)\n         and then not Duplicated_Tag_Checks_Suppressed (Typ)\n+        and then not (Global_Discard_Names or else Discard_Names (Typ))\n       then\n          Append_To (Elab_Code,\n            Make_Procedure_Call_Statement (Loc,"}]}