{"sha": "4223ff5f252b650b7e799d7e919bbc1796901aed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIyM2ZmNWYyNTJiNjUwYjdlNzk5ZDdlOTE5YmJjMTc5NjkwMWFlZA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-04-01T05:57:14Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-04-01T05:57:14Z"}, "message": "avr.h (avr_case_values_threshold): Remove declaration.\n\n\t* config/avr/avr.h (avr_case_values_threshold): Remove declaration.\n\t(CASE_VALUES_THRESHOLD): Redefine.\n\t* config/avr/avr.c (avr_override_options): Remove initialization of\n\tavr_case_values_threshold variable.\n\t(avr_case_values_threshold): Remove variable. Add new function.\n\t* config/avr/avr-protos.h (avr_case_values_threshold): Declare.\n\t* config/avr/avr.opt (mno-tablejump): Remove option.\n\t* doc/invoke.texi (AVR Options): Remove -mno-tablejump.\n\nFrom-SVN: r145389", "tree": {"sha": "f57d95733a476c50b316d4dbb450381246ed8073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f57d95733a476c50b316d4dbb450381246ed8073"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4223ff5f252b650b7e799d7e919bbc1796901aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4223ff5f252b650b7e799d7e919bbc1796901aed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4223ff5f252b650b7e799d7e919bbc1796901aed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4223ff5f252b650b7e799d7e919bbc1796901aed/comments", "author": null, "committer": null, "parents": [{"sha": "e893f6f38e3842a0d4e74be5835b4506ba6bb3de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e893f6f38e3842a0d4e74be5835b4506ba6bb3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e893f6f38e3842a0d4e74be5835b4506ba6bb3de"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "b767290676b8fe1b142b709bdeac35c806810dd7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223ff5f252b650b7e799d7e919bbc1796901aed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223ff5f252b650b7e799d7e919bbc1796901aed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4223ff5f252b650b7e799d7e919bbc1796901aed", "patch": "@@ -1,3 +1,14 @@\n+2009-04-01  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/avr/avr.h (avr_case_values_threshold): Remove declaration.\n+\t(CASE_VALUES_THRESHOLD): Redefine.\n+\t* config/avr/avr.c (avr_override_options): Remove initialization of\n+\tavr_case_values_threshold variable.\n+\t(avr_case_values_threshold): Remove variable. Add new function.\n+\t* config/avr/avr-protos.h (avr_case_values_threshold): Declare.\n+\t* config/avr/avr.opt (mno-tablejump): Remove option.\n+\t* doc/invoke.texi (AVR Options): Remove -mno-tablejump.\n+\n 2009-04-01  DJ Delorie  <dj@redhat.com>\n \n \t* varasm.c (default_function_rodata_section): Don't assume"}, {"sha": "cb936efb6fdf2aa2b56d958cb1d48b48925b166b", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223ff5f252b650b7e799d7e919bbc1796901aed/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223ff5f252b650b7e799d7e919bbc1796901aed/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=4223ff5f252b650b7e799d7e919bbc1796901aed", "patch": "@@ -39,6 +39,7 @@ extern int avr_simple_epilogue (void);\n extern void gas_output_limited_string (FILE *file, const char *str);\n extern void gas_output_ascii (FILE *file, const char *str, size_t length);\n extern int avr_hard_regno_rename_ok (unsigned int, unsigned int);\n+extern unsigned int avr_case_values_threshold (void);\n \n #ifdef TREE_CODE\n extern void asm_output_external (FILE *file, tree decl, char *name);"}, {"sha": "e868a97bed44ad4164302f3a8781911647603867", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223ff5f252b650b7e799d7e919bbc1796901aed/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223ff5f252b650b7e799d7e919bbc1796901aed/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=4223ff5f252b650b7e799d7e919bbc1796901aed", "patch": "@@ -308,7 +308,6 @@ static const struct mcu_type_s avr_mcu_types[] = {\n   { NULL,           ARCH_UNKNOWN, NULL }\n };\n \n-int avr_case_values_threshold = 30000;\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -388,10 +387,6 @@ avr_override_options (void)\n   avr_current_arch = &avr_arch_types[t->arch];\n   avr_extra_arch_macro = t->macro;\n \n-  if (optimize && !TARGET_NO_TABLEJUMP)\n-    avr_case_values_threshold = \n-      (!AVR_HAVE_JMP_CALL || TARGET_CALL_PROLOGUES) ? 8 : 17;\n-\n   tmp_reg_rtx  = gen_rtx_REG (QImode, TMP_REGNO);\n   zero_reg_rtx = gen_rtx_REG (QImode, ZERO_REGNO);\n \n@@ -6114,4 +6109,11 @@ avr_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n     return false;\n }\n \n+/* Worker function for CASE_VALUES_THRESHOLD.  */\n+\n+unsigned int avr_case_values_threshold (void)\n+{\n+  return (!AVR_HAVE_JMP_CALL || TARGET_CALL_PROLOGUES) ? 8 : 17;\n+}\n+\n #include \"gt-avr.h\""}, {"sha": "f09e8ecaa5904c243b10d99ea55448537ccca174", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223ff5f252b650b7e799d7e919bbc1796901aed/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223ff5f252b650b7e799d7e919bbc1796901aed/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=4223ff5f252b650b7e799d7e919bbc1796901aed", "patch": "@@ -734,9 +734,7 @@ fprintf (STREAM, \"\\t.skip %lu,0\\n\", (unsigned long)(N))\n \n #define CASE_VECTOR_MODE HImode\n \n-extern int avr_case_values_threshold;\n-\n-#define CASE_VALUES_THRESHOLD avr_case_values_threshold\n+#define CASE_VALUES_THRESHOLD avr_case_values_threshold ()\n \n #undef WORD_REGISTER_OPERATIONS\n "}, {"sha": "f94d6a3c2ac837a3f207c8465c67cebd9745b1d8", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223ff5f252b650b7e799d7e919bbc1796901aed/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223ff5f252b650b7e799d7e919bbc1796901aed/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=4223ff5f252b650b7e799d7e919bbc1796901aed", "patch": "@@ -37,10 +37,6 @@ mno-interrupts\n Target Report RejectNegative Mask(NO_INTERRUPTS)\n Change the stack pointer without disabling interrupts\n \n-mno-tablejump\n-Target Report RejectNegative Mask(NO_TABLEJUMP)\n-Do not generate tablejump insns\n-\n morder1\n Target Report Undocumented Mask(ORDER_1)\n "}, {"sha": "52fd70d1ad9683a6eaa8112b446626aff8907c27", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223ff5f252b650b7e799d7e919bbc1796901aed/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223ff5f252b650b7e799d7e919bbc1796901aed/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4223ff5f252b650b7e799d7e919bbc1796901aed", "patch": "@@ -457,7 +457,7 @@ Objective-C and Objective-C++ Dialects}.\n \n @emph{AVR Options}\n @gccoptlist{-mmcu=@var{mcu}  -msize  -minit-stack=@var{n}  -mno-interrupts @gol\n--mcall-prologues  -mno-tablejump  -mtiny-stack  -mint8}\n+-mcall-prologues  -mtiny-stack  -mint8}\n \n @emph{Blackfin Options}\n @gccoptlist{-mcpu=@var{cpu}@r{[}-@var{sirevision}@r{]} @gol\n@@ -9313,10 +9313,6 @@ Code size will be smaller.\n Functions prologues/epilogues expanded as call to appropriate\n subroutines.  Code size will be smaller.\n \n-@item -mno-tablejump\n-@opindex mno-tablejump\n-Do not generate tablejump insns which sometimes increase code size.\n-\n @item -mtiny-stack\n @opindex mtiny-stack\n Change only the low 8 bits of the stack pointer."}]}