{"sha": "9f7ccf694409ec79ed2ab4cbdf43f024c70960be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY3Y2NmNjk0NDA5ZWM3OWVkMmFiNGNiZGY0M2YwMjRjNzA5NjBiZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-10-11T19:48:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-10-11T19:48:47Z"}, "message": "tree.h (contains_packed_reference): Mention ARRAY_RANGE_REF in head comment.\n\n\t* tree.h (contains_packed_reference): Mention ARRAY_RANGE_REF in\n\thead comment.\n\t(array_ref_element_size): Likewise.\n\t(array_ref_low_bound): Likewise.\n\t(array_ref_up_bound): Likewise.\n\t* expr.c (contains_packed_reference): Likewise.\n\t(array_ref_element_size): Likewise.\n\t(array_ref_low_bound): Likewise.\n\t(array_ref_up_bound): Likewise.\n\t* tree-ssa-loop-ivopts.c (idx_contains_abnormal_ssa_name_p): Deal\n\twith ARRAY_RANGE_REF.\n\t(idx_find_step): Likewise.\n\t(idx_record_use): Likewise.\n\t(strip_offset_1): Likewise.\n\t(idx_remove_ssa_names): Likewise.\n\nFrom-SVN: r141065", "tree": {"sha": "40f5d3aac1fccc02915a3d77bf03532479d573bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40f5d3aac1fccc02915a3d77bf03532479d573bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f7ccf694409ec79ed2ab4cbdf43f024c70960be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f7ccf694409ec79ed2ab4cbdf43f024c70960be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f7ccf694409ec79ed2ab4cbdf43f024c70960be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/comments", "author": null, "committer": null, "parents": [{"sha": "cb0dee885cb30b4e9beeef070cf000baa7d09abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb0dee885cb30b4e9beeef070cf000baa7d09abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb0dee885cb30b4e9beeef070cf000baa7d09abe"}], "stats": {"total": 91, "additions": 74, "deletions": 17}, "files": [{"sha": "741c5564579cc681fa3403b8bd91b7cfc131174b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f7ccf694409ec79ed2ab4cbdf43f024c70960be", "patch": "@@ -1,3 +1,21 @@\n+2008-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h (contains_packed_reference): Mention ARRAY_RANGE_REF in\n+\thead comment.\n+\t(array_ref_element_size): Likewise.\n+\t(array_ref_low_bound): Likewise.\n+\t(array_ref_up_bound): Likewise.\n+\t* expr.c (contains_packed_reference): Likewise.\n+\t(array_ref_element_size): Likewise.\n+\t(array_ref_low_bound): Likewise.\n+\t(array_ref_up_bound): Likewise.\n+\t* tree-ssa-loop-ivopts.c (idx_contains_abnormal_ssa_name_p): Deal\n+\twith ARRAY_RANGE_REF.\n+\t(idx_find_step): Likewise.\n+\t(idx_record_use): Likewise.\n+\t(strip_offset_1): Likewise.\n+\t(idx_remove_ssa_names): Likewise.\n+\n 2008-10-11  Uros Bizjak  <ubizjak@gmail.com>\n \t    Andi Kleen  <ak@linux.intel.com>\n "}, {"sha": "11902b832b2823fbdc243dd5a19119f1456292e2", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9f7ccf694409ec79ed2ab4cbdf43f024c70960be", "patch": "@@ -6079,9 +6079,9 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n   return exp;\n }\n \n-/* Given an expression EXP that may be a COMPONENT_REF or an ARRAY_REF,\n-   look for whether EXP or any nested component-refs within EXP is marked\n-   as PACKED.  */\n+/* Given an expression EXP that may be a COMPONENT_REF, an ARRAY_REF or an\n+   ARRAY_RANGE_REF, look for whether EXP or any nested component-refs within\n+   EXP is marked as PACKED.  */\n \n bool\n contains_packed_reference (const_tree exp)\n@@ -6121,7 +6121,7 @@ contains_packed_reference (const_tree exp)\n }\n \n /* Return a tree of sizetype representing the size, in bytes, of the element\n-   of EXP, an ARRAY_REF.  */\n+   of EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n \n tree\n array_ref_element_size (tree exp)\n@@ -6148,7 +6148,7 @@ array_ref_element_size (tree exp)\n }\n \n /* Return a tree representing the lower bound of the array mentioned in\n-   EXP, an ARRAY_REF.  */\n+   EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n \n tree\n array_ref_low_bound (tree exp)\n@@ -6169,7 +6169,7 @@ array_ref_low_bound (tree exp)\n }\n \n /* Return a tree representing the upper bound of the array mentioned in\n-   EXP, an ARRAY_REF.  */\n+   EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n \n tree\n array_ref_up_bound (tree exp)"}, {"sha": "33940f7fe0db327501f01f8adaeb4316d09c3698", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f7ccf694409ec79ed2ab4cbdf43f024c70960be", "patch": "@@ -1,3 +1,8 @@\n+2008-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/loop_optimization5.adb: New test.\n+\t* gnat.dg/loop_optimization5_pkg.adb: New helper.\n+\n 2008-10-11  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/37794"}, {"sha": "09bf3e216d7592f84b055096f154ec314fc4283c", "filename": "gcc/testsuite/gnat.dg/loop_optimization5.adb", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization5.adb?ref=9f7ccf694409ec79ed2ab4cbdf43f024c70960be", "patch": "@@ -0,0 +1,21 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatp\" }\n+\n+with Loop_Optimization5_Pkg; use Loop_Optimization5_Pkg;\n+\n+procedure Loop_Optimization5 is\n+   Str : constant String := \"12345678\";\n+   Cmd : constant String := Init;\n+   StartP : Positive := Cmd'First;\n+   StartS : Positive := Cmd'Last + 1;\n+   EndP   : Natural := StartP - 1;\n+   Full_Cmd : String_Access;\n+begin\n+   for J in StartP .. Cmd'Last - Str'Length + 1 loop\n+      if Cmd (J .. J + Str'Length - 1) = Str then\n+         EndP := J - 1;\n+         exit;\n+      end if;\n+   end loop;\n+   Full_Cmd := Locate (Cmd (StartP .. EndP));\n+end;"}, {"sha": "4af6c1ce693b57813ec4966dd06b793e497c474e", "filename": "gcc/testsuite/gnat.dg/loop_optimization5_pkg.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization5_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization5_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization5_pkg.ads?ref=9f7ccf694409ec79ed2ab4cbdf43f024c70960be", "patch": "@@ -0,0 +1,7 @@\n+package Loop_Optimization5_Pkg is\n+\n+  type String_Access is access all String;\n+  function Init return String;\n+  function Locate (S : String) return String_Access;\n+\n+end Loop_Optimization5_Pkg;"}, {"sha": "628d426935c529d9ee5651b965c295d50e86756a", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=9f7ccf694409ec79ed2ab4cbdf43f024c70960be", "patch": "@@ -632,7 +632,7 @@ static bool\n idx_contains_abnormal_ssa_name_p (tree base, tree *index,\n \t\t\t\t  void *data ATTRIBUTE_UNUSED)\n {\n-  if (TREE_CODE (base) == ARRAY_REF)\n+  if (TREE_CODE (base) == ARRAY_REF || TREE_CODE (base) == ARRAY_RANGE_REF)\n     {\n       if (abnormal_ssa_name_p (TREE_OPERAND (base, 2)))\n \treturn false;\n@@ -1356,8 +1356,13 @@ idx_find_step (tree base, tree *idx, void *data)\n      reference out of the loop (in order to take its address in strength\n      reduction).  In order for this to work we need both lower bound\n      and step to be loop invariants.  */\n-  if (TREE_CODE (base) == ARRAY_REF)\n+  if (TREE_CODE (base) == ARRAY_REF || TREE_CODE (base) == ARRAY_RANGE_REF)\n     {\n+      /* Moreover, for a range, the size needs to be invariant as well.  */\n+      if (TREE_CODE (base) == ARRAY_RANGE_REF\n+\t  && !expr_invariant_in_loop_p (loop, TYPE_SIZE (TREE_TYPE (base))))\n+\treturn false;\n+\n       step = array_ref_element_size (base);\n       lbound = array_ref_low_bound (base);\n \n@@ -1381,7 +1386,7 @@ idx_find_step (tree base, tree *idx, void *data)\n   if (integer_zerop (iv->step))\n     return true;\n \n-  if (TREE_CODE (base) == ARRAY_REF)\n+  if (TREE_CODE (base) == ARRAY_REF || TREE_CODE (base) == ARRAY_RANGE_REF)\n     {\n       step = array_ref_element_size (base);\n \n@@ -1418,7 +1423,7 @@ idx_record_use (tree base, tree *idx,\n {\n   struct ivopts_data *data = (struct ivopts_data *) vdata;\n   find_interesting_uses_op (data, *idx);\n-  if (TREE_CODE (base) == ARRAY_REF)\n+  if (TREE_CODE (base) == ARRAY_REF || TREE_CODE (base) == ARRAY_RANGE_REF)\n     {\n       find_interesting_uses_op (data, array_ref_element_size (base));\n       find_interesting_uses_op (data, array_ref_low_bound (base));\n@@ -1918,6 +1923,7 @@ strip_offset_1 (tree expr, bool inside_addr, bool top_compref,\n       return fold_convert (orig_type, expr);\n \n     case ARRAY_REF:\n+    case ARRAY_RANGE_REF:\n       if (!inside_addr)\n \treturn orig_expr;\n \n@@ -5180,7 +5186,7 @@ idx_remove_ssa_names (tree base, tree *idx,\n   if (TREE_CODE (*idx) == SSA_NAME)\n     *idx = SSA_NAME_VAR (*idx);\n \n-  if (TREE_CODE (base) == ARRAY_REF)\n+  if (TREE_CODE (base) == ARRAY_REF || TREE_CODE (base) == ARRAY_RANGE_REF)\n     {\n       op = &TREE_OPERAND (base, 2);\n       if (*op"}, {"sha": "a8edda7fb56e658b1e2b959f948936df53fe74ee", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7ccf694409ec79ed2ab4cbdf43f024c70960be/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9f7ccf694409ec79ed2ab4cbdf43f024c70960be", "patch": "@@ -4552,24 +4552,24 @@ extern tree get_inner_reference (tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n \t\t\t\t tree *, enum machine_mode *, int *, int *,\n \t\t\t\t bool);\n \n-/* Given an expression EXP that may be a COMPONENT_REF or an ARRAY_REF,\n-   look for whether EXP or any nested component-refs within EXP is marked\n-   as PACKED.  */\n+/* Given an expression EXP that may be a COMPONENT_REF, an ARRAY_REF or an\n+   ARRAY_RANGE_REF, look for whether EXP or any nested component-refs within\n+   EXP is marked as PACKED.  */\n \n extern bool contains_packed_reference (const_tree exp);\n \n /* Return a tree of sizetype representing the size, in bytes, of the element\n-   of EXP, an ARRAY_REF.  */\n+   of EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n \n extern tree array_ref_element_size (tree);\n \n /* Return a tree representing the lower bound of the array mentioned in\n-   EXP, an ARRAY_REF.  */\n+   EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n \n extern tree array_ref_low_bound (tree);\n \n /* Return a tree representing the upper bound of the array mentioned in\n-   EXP, an ARRAY_REF.  */\n+   EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n \n extern tree array_ref_up_bound (tree);\n "}]}