{"sha": "907dd6ae395ec223ca3a410d199cac3a346ef8db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA3ZGQ2YWUzOTVlYzIyM2NhM2E0MTBkMTk5Y2FjM2EzNDZlZjhkYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-08-03T10:30:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-08-03T10:30:46Z"}, "message": "tree.c (make_vector_type): Build a main variant first, get the canonical one and then build the variant.\n\n2009-08-03  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.c (make_vector_type): Build a main variant first,\n\tget the canonical one and then build the variant.\n\t* tree-ssa.c (useless_type_conversion_p_1): Handle\n\tfixed-point types.\n\t(useless_type_conversion_p): Conversions to pointers to\n\tincomplete record types are useless.\n\nFrom-SVN: r150370", "tree": {"sha": "9149c79a96270471123654308ed9bc5256fbf44b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9149c79a96270471123654308ed9bc5256fbf44b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/907dd6ae395ec223ca3a410d199cac3a346ef8db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907dd6ae395ec223ca3a410d199cac3a346ef8db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907dd6ae395ec223ca3a410d199cac3a346ef8db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907dd6ae395ec223ca3a410d199cac3a346ef8db/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2329c6f56d3724a337ed9dfcf5f0e7412a1406d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2329c6f56d3724a337ed9dfcf5f0e7412a1406d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2329c6f56d3724a337ed9dfcf5f0e7412a1406d8"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "ee8af4f9f2f898286fefb7abaea28f26c85f539b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd6ae395ec223ca3a410d199cac3a346ef8db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd6ae395ec223ca3a410d199cac3a346ef8db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=907dd6ae395ec223ca3a410d199cac3a346ef8db", "patch": "@@ -1,3 +1,12 @@\n+2009-08-03  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.c (make_vector_type): Build a main variant first,\n+\tget the canonical one and then build the variant.\n+\t* tree-ssa.c (useless_type_conversion_p_1): Handle\n+\tfixed-point types.\n+\t(useless_type_conversion_p): Conversions to pointers to\n+\tincomplete record types are useless.\n+\n 2009-08-03  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-cfg.c (pass_warn_unused_result): Mark name that no dump"}, {"sha": "504491040b4bb1c5134038b79ed398addd8e7e9c", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd6ae395ec223ca3a410d199cac3a346ef8db/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd6ae395ec223ca3a410d199cac3a346ef8db/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=907dd6ae395ec223ca3a410d199cac3a346ef8db", "patch": "@@ -897,6 +897,11 @@ useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n \t   && SCALAR_FLOAT_TYPE_P (outer_type))\n     return true;\n \n+  /* Fixed point types with the same mode are compatible.  */\n+  else if (FIXED_POINT_TYPE_P (inner_type)\n+\t   && FIXED_POINT_TYPE_P (outer_type))\n+    return true;\n+\n   /* We need to take special care recursing to pointed-to types.  */\n   else if (POINTER_TYPE_P (inner_type)\n \t   && POINTER_TYPE_P (outer_type))\n@@ -1000,12 +1005,17 @@ useless_type_conversion_p_1 (tree outer_type, tree inner_type)\n bool\n useless_type_conversion_p (tree outer_type, tree inner_type)\n {\n-  /* If the outer type is (void *), then the conversion is not\n-     necessary.  We have to make sure to not apply this while\n-     recursing though.  */\n+  /* If the outer type is (void *) or a pointer to an incomplete record type,\n+     then the conversion is not necessary.\n+     We have to make sure to not apply this while recursing though.  */\n   if (POINTER_TYPE_P (inner_type)\n       && POINTER_TYPE_P (outer_type)\n-      && TREE_CODE (TREE_TYPE (outer_type)) == VOID_TYPE)\n+      && (VOID_TYPE_P (TREE_TYPE (outer_type))\n+\t  || (AGGREGATE_TYPE_P (TREE_TYPE (outer_type))\n+\t      && TREE_CODE (TREE_TYPE (outer_type)) != ARRAY_TYPE\n+\t      && (TREE_CODE (TREE_TYPE (outer_type))\n+\t\t  == TREE_CODE (TREE_TYPE (inner_type)))\n+\t      && !COMPLETE_TYPE_P (TREE_TYPE (outer_type)))))\n     return true;\n \n   return useless_type_conversion_p_1 (outer_type, inner_type);"}, {"sha": "58994b12898ee1878f6337327250bcabcb697b73", "filename": "gcc/tree.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd6ae395ec223ca3a410d199cac3a346ef8db/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd6ae395ec223ca3a410d199cac3a346ef8db/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=907dd6ae395ec223ca3a410d199cac3a346ef8db", "patch": "@@ -7686,21 +7686,10 @@ make_vector_type (tree innertype, int nunits, enum machine_mode mode)\n   tree t;\n   hashval_t hashcode = 0;\n \n-  /* Build a main variant, based on the main variant of the inner type, then\n-     use it to build the variant we return.  */\n-  if ((TYPE_ATTRIBUTES (innertype) || TYPE_QUALS (innertype))\n-      && TYPE_MAIN_VARIANT (innertype) != innertype)\n-    return build_type_attribute_qual_variant (\n-\t    make_vector_type (TYPE_MAIN_VARIANT (innertype), nunits, mode),\n-\t    TYPE_ATTRIBUTES (innertype),\n-\t    TYPE_QUALS (innertype));\n-\n   t = make_node (VECTOR_TYPE);\n   TREE_TYPE (t) = TYPE_MAIN_VARIANT (innertype);\n   SET_TYPE_VECTOR_SUBPARTS (t, nunits);\n   SET_TYPE_MODE (t, mode);\n-  TYPE_READONLY (t) = TYPE_READONLY (innertype);\n-  TYPE_VOLATILE (t) = TYPE_VOLATILE (innertype);\n \n   if (TYPE_STRUCTURAL_EQUALITY_P (innertype))\n     SET_TYPE_STRUCTURAL_EQUALITY (t);\n@@ -7730,9 +7719,20 @@ make_vector_type (tree innertype, int nunits, enum machine_mode mode)\n   }\n \n   hashcode = iterative_hash_host_wide_int (VECTOR_TYPE, hashcode);\n+  hashcode = iterative_hash_host_wide_int (nunits, hashcode);\n   hashcode = iterative_hash_host_wide_int (mode, hashcode);\n-  hashcode = iterative_hash_object (TYPE_HASH (innertype), hashcode);\n-  return type_hash_canon (hashcode, t);\n+  hashcode = iterative_hash_object (TYPE_HASH (TREE_TYPE (t)), hashcode);\n+  t = type_hash_canon (hashcode, t);\n+\n+  /* We have built a main variant, based on the main variant of the\n+     inner type. Use it to build the variant we return.  */\n+  if ((TYPE_ATTRIBUTES (innertype) || TYPE_QUALS (innertype))\n+      && TREE_TYPE (t) != innertype)\n+    return build_type_attribute_qual_variant (t,\n+\t\t\t\t\t      TYPE_ATTRIBUTES (innertype),\n+\t\t\t\t\t      TYPE_QUALS (innertype));\n+\n+  return t;\n }\n \n static tree"}]}