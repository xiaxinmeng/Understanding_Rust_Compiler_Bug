{"sha": "9c97c8588321a106512affb2935b8ec1f836804f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM5N2M4NTg4MzIxYTEwNjUxMmFmZmIyOTM1YjhlYzFmODM2ODA0Zg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-09T20:32:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-09T20:32:21Z"}, "message": "Merge #357\n\n357: Create liveness analysis for dead code detection r=philberty a=thomasyonug\n\nThis is the very beginning work for dead code detection. #330 \r\n1. create a new test for this feature.\r\n2. handle an extremely simple case.\r\n\r\nAfter compiling the rust1, and feed \"testsuite/rust.test/xfail_compile/unused.rs\" to it.\r\n``` rust\r\n\r\nfn bar() { // {dg-warning \"function is never used: `bar`\"}\r\n    foo();\r\n}\r\n\r\nfn foo() { // {dg-warning \"function is never used: `foo`\"}\r\n    bar();\r\n}\r\n\r\nfn f() {\r\n\r\n}\r\n\r\nfn main() {\r\n    f();\r\n}\r\n\r\n```\r\nwe will get some warnings.\r\n``` bash\r\n../gccrs/gcc/testsuite/rust.test/xfail_compile/unused.rs:2:1: warning: function is never used: `[bar]`\r\n    2 | fn bar() { // {dg-warning \"function is never used: `bar`\"}\r\n      | ^\r\n../gccrs/gcc/testsuite/rust.test/xfail_compile/unused.rs:6:1: warning: function is never used: `[foo]`\r\n    6 | fn foo() { // {dg-warning \"function is never used: `foo`\"}\r\n      | ^\r\n\r\n```\n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>", "tree": {"sha": "cb6779373f416112b0e771d4edb0fbab1aa12b4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb6779373f416112b0e771d4edb0fbab1aa12b4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c97c8588321a106512affb2935b8ec1f836804f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgcLnVCRBK7hj4Ov3rIwAAdHIIAGnMnObT7mQHrJtWhDXxrqqp\nUDL4HCpbF1v8juY0gISQayZ2GeIK1ZPaPmDPPCaaNXHZJUcCT8CDUvboo+YRMaI6\nb+SttUS8ZhEfQsyXHqbaF7Q1uB8BvcGGp+9XO4XkyCoYOdHRdHAg1fm9j/LPo8yI\nYTGjlBevNlimJAIVO8g7K8BM9P7UzZuEWLc0zNBK3ZOwDjBPuXE3y0W/401pKEsw\nJ0XDmfb4Q2dGoyibamiofSzwiqi4R+pbcYOrtpUVx2WerMR+0IvFqcxY0x7uPLNP\nBTa7H6U77tGq/fL2w/7zUqzFd3t52OV3ck3kViGjHOu58VqA+96qLhsUH7ZOQLA=\n=JPsi\n-----END PGP SIGNATURE-----\n", "payload": "tree cb6779373f416112b0e771d4edb0fbab1aa12b4b\nparent 85bd4cef64e1be492d1c62eb05d77a6cea1a8d21\nparent acb0062081056340722e01447d1e266d357e6a17\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618000341 +0000\ncommitter GitHub <noreply@github.com> 1618000341 +0000\n\nMerge #357\n\n357: Create liveness analysis for dead code detection r=philberty a=thomasyonug\n\nThis is the very beginning work for dead code detection. #330 \r\n1. create a new test for this feature.\r\n2. handle an extremely simple case.\r\n\r\nAfter compiling the rust1, and feed \"testsuite/rust.test/xfail_compile/unused.rs\" to it.\r\n``` rust\r\n\r\nfn bar() { // {dg-warning \"function is never used: `bar`\"}\r\n    foo();\r\n}\r\n\r\nfn foo() { // {dg-warning \"function is never used: `foo`\"}\r\n    bar();\r\n}\r\n\r\nfn f() {\r\n\r\n}\r\n\r\nfn main() {\r\n    f();\r\n}\r\n\r\n```\r\nwe will get some warnings.\r\n``` bash\r\n../gccrs/gcc/testsuite/rust.test/xfail_compile/unused.rs:2:1: warning: function is never used: `[bar]`\r\n    2 | fn bar() { // {dg-warning \"function is never used: `bar`\"}\r\n      | ^\r\n../gccrs/gcc/testsuite/rust.test/xfail_compile/unused.rs:6:1: warning: function is never used: `[foo]`\r\n    6 | fn foo() { // {dg-warning \"function is never used: `foo`\"}\r\n      | ^\r\n\r\n```\n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c97c8588321a106512affb2935b8ec1f836804f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c97c8588321a106512affb2935b8ec1f836804f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c97c8588321a106512affb2935b8ec1f836804f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85bd4cef64e1be492d1c62eb05d77a6cea1a8d21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85bd4cef64e1be492d1c62eb05d77a6cea1a8d21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85bd4cef64e1be492d1c62eb05d77a6cea1a8d21"}, {"sha": "acb0062081056340722e01447d1e266d357e6a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb0062081056340722e01447d1e266d357e6a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb0062081056340722e01447d1e266d357e6a17"}], "stats": {"total": 532, "additions": 531, "deletions": 1}, "files": [{"sha": "428e85265471a3ad9a56f0181157c1a23ac5de82", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=9c97c8588321a106512affb2935b8ec1f836804f", "patch": "@@ -79,6 +79,7 @@ GRS_OBJS = \\\n     rust/rust-hir-type-check.o \\\n     rust/rust-tyty.o \\\n     rust/rust-tyctx.o \\\n+\trust/rust-hir-liveness.o \\\n     $(END)\n # removed object files from here\n \n@@ -233,7 +234,8 @@ RUST_INCLUDES = -I $(srcdir)/rust \\\n \t-I $(srcdir)/rust/hir \\\n \t-I $(srcdir)/rust/resolve \\\n \t-I $(srcdir)/rust/util \\\n-\t-I $(srcdir)/rust/typecheck\n+\t-I $(srcdir)/rust/typecheck \\\n+\t-I $(srcdir)/rust/analysis\n \n # add files that require cross-folder includes - currently rust-lang.o, rust-lex.o\n CFLAGS-rust/rust-lang.o += $(RUST_INCLUDES)\n@@ -294,3 +296,8 @@ rust/%.o: rust/typecheck/%.cc\n \t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n \t$(POSTCOMPILE)\n \n+# build rust/analysis files in rust folder\n+rust/%.o: rust/analysis/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+"}, {"sha": "483b9c9234d5efd1e2936e9f0a8e4f08ed0dedaf", "filename": "gcc/rust/analysis/rust-hir-liveness-base.h", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Frust%2Fanalysis%2Frust-hir-liveness-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Frust%2Fanalysis%2Frust-hir-liveness-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-hir-liveness-base.h?ref=9c97c8588321a106512affb2935b8ec1f836804f", "patch": "@@ -0,0 +1,225 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_HIR_LIVENESS_BASE\n+#define RUST_HIR_LIVENESS_BASE\n+\n+#include \"rust-diagnostics.h\"\n+#include \"rust-hir-liveness.h\"\n+#include \"rust-hir-liveness-base.h\"\n+#include \"rust-hir-visitor.h\"\n+#include \"rust-hir-map.h\"\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+class LivenessBase : public HIR::HIRVisitor\n+{\n+public:\n+  virtual ~LivenessBase () {}\n+  virtual void visit (HIR::Token &) override {}\n+  virtual void visit (HIR::DelimTokenTree &) override {}\n+  virtual void visit (HIR::AttrInputMetaItemContainer &) override {}\n+  virtual void visit (HIR::IdentifierExpr &) override {}\n+  virtual void visit (HIR::Lifetime &) override {}\n+  virtual void visit (HIR::LifetimeParam &) override {}\n+  virtual void visit (HIR::PathInExpression &) override {}\n+  virtual void visit (HIR::TypePathSegment &) override {}\n+  virtual void visit (HIR::TypePathSegmentGeneric &) override {}\n+  virtual void visit (HIR::TypePathSegmentFunction &) override {}\n+  virtual void visit (HIR::TypePath &) override {}\n+  virtual void visit (HIR::QualifiedPathInExpression &) override {}\n+  virtual void visit (HIR::QualifiedPathInType &) override {}\n+\n+  virtual void visit (HIR::LiteralExpr &) override {}\n+  virtual void visit (HIR::AttrInputLiteral &) override {}\n+  virtual void visit (HIR::MetaItemLitExpr &) override {}\n+  virtual void visit (HIR::MetaItemPathLit &) override {}\n+  virtual void visit (HIR::BorrowExpr &) override {}\n+  virtual void visit (HIR::DereferenceExpr &) override {}\n+  virtual void visit (HIR::ErrorPropagationExpr &) override {}\n+  virtual void visit (HIR::NegationExpr &) override {}\n+  virtual void visit (HIR::ArithmeticOrLogicalExpr &) override {}\n+  virtual void visit (HIR::ComparisonExpr &) override {}\n+  virtual void visit (HIR::LazyBooleanExpr &) override {}\n+  virtual void visit (HIR::TypeCastExpr &) override {}\n+  virtual void visit (HIR::AssignmentExpr &) override {}\n+\n+  virtual void visit (HIR::GroupedExpr &) override {}\n+\n+  virtual void visit (HIR::ArrayElemsValues &) override {}\n+  virtual void visit (HIR::ArrayElemsCopied &) override {}\n+  virtual void visit (HIR::ArrayExpr &) override {}\n+  virtual void visit (HIR::ArrayIndexExpr &) override {}\n+  virtual void visit (HIR::TupleExpr &) override {}\n+  virtual void visit (HIR::TupleIndexExpr &) override {}\n+  virtual void visit (HIR::StructExprStruct &) override {}\n+\n+  virtual void visit (HIR::StructExprFieldIdentifier &) override {}\n+  virtual void visit (HIR::StructExprFieldIdentifierValue &) override {}\n+\n+  virtual void visit (HIR::StructExprFieldIndexValue &) override {}\n+  virtual void visit (HIR::StructExprStructFields &) override {}\n+  virtual void visit (HIR::StructExprStructBase &) override {}\n+  virtual void visit (HIR::StructExprTuple &) override {}\n+  virtual void visit (HIR::StructExprUnit &) override {}\n+\n+  virtual void visit (HIR::EnumExprFieldIdentifier &) override {}\n+  virtual void visit (HIR::EnumExprFieldIdentifierValue &) override {}\n+\n+  virtual void visit (HIR::EnumExprFieldIndexValue &) override {}\n+  virtual void visit (HIR::EnumExprStruct &) override {}\n+  virtual void visit (HIR::EnumExprTuple &) override {}\n+  virtual void visit (HIR::EnumExprFieldless &) override {}\n+  virtual void visit (HIR::CallExpr &) override {}\n+  virtual void visit (HIR::MethodCallExpr &) override {}\n+  virtual void visit (HIR::FieldAccessExpr &) override {}\n+  virtual void visit (HIR::ClosureExprInner &) override {}\n+  virtual void visit (HIR::BlockExpr &) override {}\n+  virtual void visit (HIR::ClosureExprInnerTyped &) override {}\n+  virtual void visit (HIR::ContinueExpr &) override {}\n+  virtual void visit (HIR::BreakExpr &) override {}\n+  virtual void visit (HIR::RangeFromToExpr &) override {}\n+  virtual void visit (HIR::RangeFromExpr &) override {}\n+  virtual void visit (HIR::RangeToExpr &) override {}\n+  virtual void visit (HIR::RangeFullExpr &) override {}\n+  virtual void visit (HIR::RangeFromToInclExpr &) override {}\n+  virtual void visit (HIR::RangeToInclExpr &) override {}\n+  virtual void visit (HIR::ReturnExpr &) override {}\n+  virtual void visit (HIR::UnsafeBlockExpr &) override {}\n+  virtual void visit (HIR::LoopExpr &) override {}\n+  virtual void visit (HIR::WhileLoopExpr &) override {}\n+  virtual void visit (HIR::WhileLetLoopExpr &) override {}\n+  virtual void visit (HIR::ForLoopExpr &) override {}\n+  virtual void visit (HIR::IfExpr &) override {}\n+  virtual void visit (HIR::IfExprConseqElse &) override {}\n+  virtual void visit (HIR::IfExprConseqIf &) override {}\n+  virtual void visit (HIR::IfExprConseqIfLet &) override {}\n+  virtual void visit (HIR::IfLetExpr &) override {}\n+  virtual void visit (HIR::IfLetExprConseqElse &) override {}\n+  virtual void visit (HIR::IfLetExprConseqIf &) override {}\n+  virtual void visit (HIR::IfLetExprConseqIfLet &) override {}\n+\n+  virtual void visit (HIR::MatchExpr &) override {}\n+  virtual void visit (HIR::AwaitExpr &) override {}\n+  virtual void visit (HIR::AsyncBlockExpr &) override {}\n+\n+  virtual void visit (HIR::TypeParam &) override {}\n+\n+  virtual void visit (HIR::LifetimeWhereClauseItem &) override {}\n+  virtual void visit (HIR::TypeBoundWhereClauseItem &) override {}\n+  virtual void visit (HIR::Method &) override {}\n+  virtual void visit (HIR::ModuleBodied &) override {}\n+  virtual void visit (HIR::ModuleNoBody &) override {}\n+  virtual void visit (HIR::ExternCrate &) override {}\n+\n+  virtual void visit (HIR::UseTreeGlob &) override {}\n+  virtual void visit (HIR::UseTreeList &) override {}\n+  virtual void visit (HIR::UseTreeRebind &) override {}\n+  virtual void visit (HIR::UseDeclaration &) override {}\n+  virtual void visit (HIR::Function &) override {}\n+  virtual void visit (HIR::TypeAlias &) override {}\n+  virtual void visit (HIR::StructStruct &) override {}\n+  virtual void visit (HIR::TupleStruct &) override {}\n+  virtual void visit (HIR::EnumItem &) override {}\n+  virtual void visit (HIR::EnumItemTuple &) override {}\n+  virtual void visit (HIR::EnumItemStruct &) override {}\n+  virtual void visit (HIR::EnumItemDiscriminant &) override {}\n+  virtual void visit (HIR::Enum &) override {}\n+  virtual void visit (HIR::Union &) override {}\n+  virtual void visit (HIR::ConstantItem &) override {}\n+  virtual void visit (HIR::StaticItem &) override {}\n+  virtual void visit (HIR::TraitItemFunc &) override {}\n+  virtual void visit (HIR::TraitItemMethod &) override {}\n+  virtual void visit (HIR::TraitItemConst &) override {}\n+  virtual void visit (HIR::TraitItemType &) override {}\n+  virtual void visit (HIR::Trait &) override {}\n+  virtual void visit (HIR::InherentImpl &) override {}\n+  virtual void visit (HIR::TraitImpl &) override {}\n+\n+  virtual void visit (HIR::ExternalStaticItem &) override {}\n+  virtual void visit (HIR::ExternalFunctionItem &) override {}\n+  virtual void visit (HIR::ExternBlock &) override {}\n+\n+  virtual void visit (HIR::MacroMatchFragment &) override {}\n+  virtual void visit (HIR::MacroMatchRepetition &) override {}\n+  virtual void visit (HIR::MacroMatcher &) override {}\n+  virtual void visit (HIR::MacroRulesDefinition &) override {}\n+  virtual void visit (HIR::MacroInvocation &) override {}\n+  virtual void visit (HIR::MetaItemPath &) override {}\n+  virtual void visit (HIR::MetaItemSeq &) override {}\n+  virtual void visit (HIR::MetaWord &) override {}\n+  virtual void visit (HIR::MetaNameValueStr &) override {}\n+  virtual void visit (HIR::MetaListPaths &) override {}\n+  virtual void visit (HIR::MetaListNameValueStr &) override {}\n+\n+  virtual void visit (HIR::LiteralPattern &) override {}\n+  virtual void visit (HIR::IdentifierPattern &) override {}\n+  virtual void visit (HIR::WildcardPattern &) override {}\n+\n+  virtual void visit (HIR::RangePatternBoundLiteral &) override {}\n+  virtual void visit (HIR::RangePatternBoundPath &) override {}\n+  virtual void visit (HIR::RangePatternBoundQualPath &) override {}\n+  virtual void visit (HIR::RangePattern &) override {}\n+  virtual void visit (HIR::ReferencePattern &) override {}\n+\n+  virtual void visit (HIR::StructPatternFieldTuplePat &) override {}\n+  virtual void visit (HIR::StructPatternFieldIdentPat &) override {}\n+  virtual void visit (HIR::StructPatternFieldIdent &) override {}\n+  virtual void visit (HIR::StructPattern &) override {}\n+\n+  virtual void visit (HIR::TupleStructItemsNoRange &) override {}\n+  virtual void visit (HIR::TupleStructItemsRange &) override {}\n+  virtual void visit (HIR::TupleStructPattern &) override {}\n+\n+  virtual void visit (HIR::TuplePatternItemsMultiple &) override {}\n+  virtual void visit (HIR::TuplePatternItemsRanged &) override {}\n+  virtual void visit (HIR::TuplePattern &) override {}\n+  virtual void visit (HIR::GroupedPattern &) override {}\n+  virtual void visit (HIR::SlicePattern &) override {}\n+\n+  virtual void visit (HIR::EmptyStmt &) override {}\n+  virtual void visit (HIR::LetStmt &) override {}\n+  virtual void visit (HIR::ExprStmtWithoutBlock &) override {}\n+  virtual void visit (HIR::ExprStmtWithBlock &) override {}\n+\n+  virtual void visit (HIR::TraitBound &) override {}\n+  virtual void visit (HIR::ImplTraitType &) override {}\n+  virtual void visit (HIR::TraitObjectType &) override {}\n+  virtual void visit (HIR::ParenthesisedType &) override {}\n+  virtual void visit (HIR::ImplTraitTypeOneBound &) override {}\n+  virtual void visit (HIR::TraitObjectTypeOneBound &) override {}\n+  virtual void visit (HIR::TupleType &) override {}\n+  virtual void visit (HIR::NeverType &) override {}\n+  virtual void visit (HIR::RawPointerType &) override {}\n+  virtual void visit (HIR::ReferenceType &) override {}\n+  virtual void visit (HIR::ArrayType &) override {}\n+  virtual void visit (HIR::SliceType &) override {}\n+  virtual void visit (HIR::InferredType &) override {}\n+  virtual void visit (HIR::BareFunctionType &) override {}\n+\n+protected:\n+  LivenessBase () : mappings (Analysis::Mappings::get ()) {}\n+\n+  Analysis::Mappings *mappings;\n+};\n+\n+} // namespace Analysis\n+} // namespace Rust\n+\n+#endif"}, {"sha": "d99d8e3db437831e8b6ab80d7054ea4d0d189d7e", "filename": "gcc/rust/analysis/rust-hir-liveness.cc", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Frust%2Fanalysis%2Frust-hir-liveness.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Frust%2Fanalysis%2Frust-hir-liveness.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-hir-liveness.cc?ref=9c97c8588321a106512affb2935b8ec1f836804f", "patch": "@@ -0,0 +1,141 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-hir-liveness.h\"\n+#include \"rust-hir-full.h\"\n+#include \"rust-name-resolver.h\"\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+class FindEntryPoint : public LivenessBase\n+{\n+  using Rust::Analysis::LivenessBase::visit;\n+\n+public:\n+  static std::vector<HirId> find (HIR::Crate &crate)\n+  {\n+    FindEntryPoint findEntryPoint;\n+    for (auto it = crate.items.begin (); it != crate.items.end (); it++)\n+      {\n+\tit->get ()->accept_vis (findEntryPoint);\n+      }\n+    return findEntryPoint.getEntryPoint ();\n+  }\n+\n+  // TODO not only fn main can be a entry point.\n+  void visit (HIR::Function &function) override\n+  {\n+    if (function.get_function_name () == \"main\")\n+      {\n+\tentryPoints.push_back (function.get_mappings ().get_hirid ());\n+      }\n+  }\n+\n+private:\n+  FindEntryPoint () : LivenessBase () {}\n+  std::vector<HirId> entryPoints;\n+  std::vector<HirId> getEntryPoint () { return entryPoints; }\n+};\n+\n+std::set<HirId>\n+Liveness::Analysis (HIR::Crate &crate)\n+{\n+  Liveness liveness (FindEntryPoint::find (crate));\n+  liveness.go (crate);\n+\n+  return liveness.liveSymbols;\n+}\n+\n+void\n+Liveness::go (HIR::Crate &crate)\n+{\n+  while (!worklist.empty ())\n+    {\n+      HirId hirId = worklist.back ();\n+      worklist.pop_back ();\n+      scannedSymbols.emplace (hirId);\n+      HIR::Item *item\n+\t= mappings->lookup_hir_item (crate.get_mappings ().get_crate_num (),\n+\t\t\t\t     hirId);\n+      if (item == nullptr)\n+\tcontinue;\n+      liveSymbols.emplace (hirId);\n+      item->accept_vis (*this);\n+    }\n+}\n+\n+void\n+Liveness::visit (HIR::ExprStmtWithoutBlock &stmt)\n+{\n+  stmt.get_expr ()->accept_vis (*this);\n+}\n+\n+void\n+Liveness::visit (HIR::CallExpr &expr)\n+{\n+  expr.get_fnexpr ()->accept_vis (*this);\n+}\n+\n+void\n+Liveness::visit (HIR::PathInExpression &expr)\n+{\n+  NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n+  NodeId ref_node_id = UNKNOWN_NODEID;\n+  if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n+    {\n+      Resolver::Definition def;\n+      if (!resolver->lookup_definition (ref_node_id, &def))\n+\t{\n+\t  rust_error_at (expr.get_locus (),\n+\t\t\t \"unknown reference for resolved name\");\n+\t  return;\n+\t}\n+      ref_node_id = def.parent;\n+      HirId ref;\n+      if (!mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n+\t\t\t\t\t ref_node_id, &ref))\n+\t{\n+\t  rust_error_at (expr.get_locus (), \"reverse lookup failure\");\n+\t  return;\n+\t}\n+      if (scannedSymbols.find (ref) != scannedSymbols.end ())\n+\t{\n+\t  worklist.push_back (ref);\n+\t}\n+      liveSymbols.emplace (ref);\n+    }\n+}\n+\n+void\n+Liveness::visit (HIR::Function &function)\n+{\n+  function.get_definition ().get ()->accept_vis (*this);\n+}\n+\n+void\n+Liveness::visit (HIR::BlockExpr &expr)\n+{\n+  expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n+    s->accept_vis (*this);\n+    return true;\n+  });\n+}\n+\n+} // namespace Analysis\n+} // namespace Rust"}, {"sha": "ae80859637ac68610e4993614d0a14a48727d576", "filename": "gcc/rust/analysis/rust-hir-liveness.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Frust%2Fanalysis%2Frust-hir-liveness.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Frust%2Fanalysis%2Frust-hir-liveness.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-hir-liveness.h?ref=9c97c8588321a106512affb2935b8ec1f836804f", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_HIR_LIVENESS\n+#define RUST_HIR_LIVENESS\n+\n+#include \"rust-hir-full-decls.h\"\n+#include \"rust-hir-map.h\"\n+#include \"rust-hir-liveness-base.h\"\n+#include \"rust-name-resolver.h\"\n+#include <set>\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+class Liveness : public LivenessBase\n+{\n+  using Rust::Analysis::LivenessBase::visit;\n+\n+public:\n+  static std::set<HirId> Analysis (HIR::Crate &crate);\n+  void go (HIR::Crate &crate);\n+\n+  void visit (HIR::ExprStmtWithoutBlock &stmt) override;\n+  void visit (HIR::CallExpr &expr) override;\n+  void visit (HIR::Function &function) override;\n+  void visit (HIR::BlockExpr &expr) override;\n+  void visit (HIR::PathInExpression &expr) override;\n+\n+private:\n+  std::vector<HirId> worklist;\n+  std::set<HirId> liveSymbols;\n+  std::set<HirId> scannedSymbols;\n+  Analysis::Mappings *mappings;\n+  Resolver::Resolver *resolver;\n+  Liveness (std::vector<HirId> worklist)\n+    : worklist (worklist), mappings (Analysis::Mappings::get ()),\n+      resolver (Resolver::Resolver::get ()){};\n+};\n+\n+} // namespace Analysis\n+} // namespace Rust\n+\n+#endif\n\\ No newline at end of file"}, {"sha": "3f488e8801a60d7c53f228546b50c3cc86e4d2b2", "filename": "gcc/rust/analysis/rust-hir-scan-deadcode.h", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Frust%2Fanalysis%2Frust-hir-scan-deadcode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Frust%2Fanalysis%2Frust-hir-scan-deadcode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-hir-scan-deadcode.h?ref=9c97c8588321a106512affb2935b8ec1f836804f", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_HIR_SCAN_DEADCODE\n+#define RUST_HIR_SCAN_DEADCODE\n+\n+#include \"rust-hir-full-decls.h\"\n+#include \"rust-hir-map.h\"\n+#include \"rust-hir-liveness-base.h\"\n+#include \"rust-name-resolver.h\"\n+#include \"rust-diagnostics.h\"\n+#include <set>\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+class ScanDeadcode : public LivenessBase\n+{\n+  using Rust::Analysis::LivenessBase::visit;\n+\n+public:\n+  static void Scan (HIR::Crate &crate, std::set<HirId> live_symbols)\n+  {\n+    ScanDeadcode sdc (live_symbols);\n+    for (auto it = crate.items.begin (); it != crate.items.end (); it++)\n+      {\n+\tit->get ()->accept_vis (sdc);\n+      }\n+  };\n+\n+  void visit (HIR::Function &function) override\n+  {\n+    HirId hirId = function.get_mappings ().get_hirid ();\n+    if (live_symbols.find (hirId) == live_symbols.end ())\n+      {\n+\trust_warning_at (function.get_locus (), 0,\n+\t\t\t \"function is never used: `[%s]`\",\n+\t\t\t function.get_function_name ().c_str ());\n+\treturn;\n+      }\n+  }\n+\n+private:\n+  std::set<HirId> live_symbols;\n+  // std::set<HirId> dead_codes;\n+\n+  ScanDeadcode (std::set<HirId> &live_symbols) : live_symbols (live_symbols){};\n+};\n+\n+} // namespace Analysis\n+} // namespace Rust\n+\n+#endif\n\\ No newline at end of file"}, {"sha": "74e6852d393a58c7db5607fc1fb4230b708b4ad3", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=9c97c8588321a106512affb2935b8ec1f836804f", "patch": "@@ -48,6 +48,8 @@\n #include \"rust-ast-resolve.h\"\n #include \"rust-ast-lower.h\"\n #include \"rust-hir-type-check.h\"\n+#include \"rust-hir-liveness.h\"\n+#include \"rust-hir-scan-deadcode.h\"\n #include \"rust-tycheck-dump.h\"\n #include \"rust-ast-resolve-unused.h\"\n #include \"rust-compile.h\"\n@@ -558,6 +560,18 @@ Session::parse_file (const char *filename)\n       dump_type_resolution (hir);\n     }\n \n+  // liveness analysis\n+  std::set<HirId> live_symbols = Analysis::Liveness::Analysis (hir);\n+\n+  if (saw_errors ())\n+    return;\n+\n+  // scan dead code\n+  Analysis::ScanDeadcode::Scan (hir, live_symbols);\n+\n+  if (saw_errors ())\n+    return;\n+\n   // scan unused has to be done after type resolution since methods are resolved\n   // at that point\n   Resolver::ScanUnused::Scan ();"}, {"sha": "1197033a30eaad6526ac3df2f0cb8555e659e5b8", "filename": "gcc/testsuite/rust.test/compile/unused.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Funused.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c97c8588321a106512affb2935b8ec1f836804f/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Funused.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Funused.rs?ref=9c97c8588321a106512affb2935b8ec1f836804f", "patch": "@@ -0,0 +1,16 @@\n+\n+fn bar() { // {dg-warning \"function is never used: `bar`\"}\n+    foo();\n+}\n+\n+fn foo() { // {dg-warning \"function is never used: `foo`\"}\n+    bar();\n+}\n+\n+fn f() {\n+\n+}\n+\n+fn main() {\n+    f();\n+}\n\\ No newline at end of file"}]}