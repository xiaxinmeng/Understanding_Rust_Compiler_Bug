{"sha": "04ce2400b35225302e0d6883bb0817378180f5d7", "node_id": "C_kwDOANBUbNoAKDA0Y2UyNDAwYjM1MjI1MzAyZTBkNjg4M2JiMDgxNzM3ODE4MGY1ZDc", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-07-26T17:55:58Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-08-11T14:25:23Z"}, "message": "c-family: Honor -Wno-init-self for cv-qual vars [PR102633]\n\nSince r11-5188-g32934a4f45a721, we drop qualifiers during l-to-r\nconversion by creating a NOP_EXPR.  For e.g.\n\n  const int i = i;\n\nthat means that the DECL_INITIAL is '(int) i' and not 'i' anymore.\nConsequently, we don't suppress_warning here:\n\n711     case DECL_EXPR:\n715       if (VAR_P (DECL_EXPR_DECL (*expr_p))\n716           && !DECL_EXTERNAL (DECL_EXPR_DECL (*expr_p))\n717           && !TREE_STATIC (DECL_EXPR_DECL (*expr_p))\n718           && (DECL_INITIAL (DECL_EXPR_DECL (*expr_p)) == DECL_EXPR_DECL (*expr_p))\n719           && !warn_init_self)\n720         suppress_warning (DECL_EXPR_DECL (*expr_p), OPT_Winit_self);\n\nbecause of the check on line 718 -- (int) i is not i.  So -Wno-init-self\ndoesn't disable the warning as it's supposed to.\n\nThe following patch fixes it by moving the suppress_warning call from\nc_gimplify_expr to the front ends, at points where we haven't created\nthe NOP_EXPR yet.\n\n\tPR middle-end/102633\n\ngcc/c-family/ChangeLog:\n\n\t* c-gimplify.cc (c_gimplify_expr) <case DECL_EXPR>: Don't call\n\tsuppress_warning here.\n\ngcc/c/ChangeLog:\n\n\t* c-parser.cc (c_parser_initializer): Add new tree parameter.  Use it.\n\tCall suppress_warning.\n\t(c_parser_declaration_or_fndef): Pass d down to c_parser_initializer.\n\t(c_parser_omp_declare_reduction): Pass omp_priv down to\n\tc_parser_initializer.\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (cp_finish_decl): Call suppress_warning.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/Winit-self1.c: New test.\n\t* c-c++-common/Winit-self2.c: New test.", "tree": {"sha": "92c9d595509d9aad2317d1bd95a787b267317815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92c9d595509d9aad2317d1bd95a787b267317815"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04ce2400b35225302e0d6883bb0817378180f5d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ce2400b35225302e0d6883bb0817378180f5d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ce2400b35225302e0d6883bb0817378180f5d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ce2400b35225302e0d6883bb0817378180f5d7/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4fbcfc0b130f872b8dd9d5089fb71ee5ed9459a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fbcfc0b130f872b8dd9d5089fb71ee5ed9459a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4fbcfc0b130f872b8dd9d5089fb71ee5ed9459a"}], "stats": {"total": 101, "additions": 85, "deletions": 16}, "files": [{"sha": "039a4b932300da5baf680f828f56ba19d5a45ba4", "filename": "gcc/c-family/c-gimplify.cc", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ce2400b35225302e0d6883bb0817378180f5d7/gcc%2Fc-family%2Fc-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ce2400b35225302e0d6883bb0817378180f5d7/gcc%2Fc-family%2Fc-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.cc?ref=04ce2400b35225302e0d6883bb0817378180f5d7", "patch": "@@ -708,18 +708,6 @@ c_gimplify_expr (tree *expr_p, gimple_seq *pre_p ATTRIBUTE_UNUSED,\n \tbreak;\n       }\n \n-    case DECL_EXPR:\n-      /* This is handled mostly by gimplify.cc, but we have to deal with\n-\t not warning about int x = x; as it is a GCC extension to turn off\n-\t this warning but only if warn_init_self is zero.  */\n-      if (VAR_P (DECL_EXPR_DECL (*expr_p))\n-\t  && !DECL_EXTERNAL (DECL_EXPR_DECL (*expr_p))\n-\t  && !TREE_STATIC (DECL_EXPR_DECL (*expr_p))\n-\t  && (DECL_INITIAL (DECL_EXPR_DECL (*expr_p)) == DECL_EXPR_DECL (*expr_p))\n-\t  && !warn_init_self)\n-\tsuppress_warning (DECL_EXPR_DECL (*expr_p), OPT_Winit_self);\n-      break;\n-\n     case PREINCREMENT_EXPR:\n     case PREDECREMENT_EXPR:\n     case POSTINCREMENT_EXPR:"}, {"sha": "759f200a7eb1e82e587238d30ffc5970749035ef", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ce2400b35225302e0d6883bb0817378180f5d7/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ce2400b35225302e0d6883bb0817378180f5d7/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=04ce2400b35225302e0d6883bb0817378180f5d7", "patch": "@@ -1521,7 +1521,7 @@ static struct c_arg_info *c_parser_parms_list_declarator (c_parser *, tree,\n static struct c_parm *c_parser_parameter_declaration (c_parser *, tree, bool);\n static tree c_parser_simple_asm_expr (c_parser *);\n static tree c_parser_gnu_attributes (c_parser *);\n-static struct c_expr c_parser_initializer (c_parser *);\n+static struct c_expr c_parser_initializer (c_parser *, tree);\n static struct c_expr c_parser_braced_init (c_parser *, tree, bool,\n \t\t\t\t\t   struct obstack *);\n static void c_parser_initelt (c_parser *, struct obstack *);\n@@ -2286,7 +2286,7 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n \t\t  int flag_sanitize_save = flag_sanitize;\n \t\t  if (TREE_CODE (d) == PARM_DECL)\n \t\t    flag_sanitize = 0;\n-\t\t  init = c_parser_initializer (parser);\n+\t\t  init = c_parser_initializer (parser, d);\n \t\t  flag_sanitize = flag_sanitize_save;\n \t\t  finish_init ();\n \t\t}\n@@ -5211,11 +5211,13 @@ c_parser_type_name (c_parser *parser, bool alignas_ok)\n    Any expression without commas is accepted in the syntax for the\n    constant-expressions, with non-constant expressions rejected later.\n \n+   DECL is the declaration we're parsing this initializer for.\n+\n    This function is only used for top-level initializers; for nested\n    ones, see c_parser_initval.  */\n \n static struct c_expr\n-c_parser_initializer (c_parser *parser)\n+c_parser_initializer (c_parser *parser, tree decl)\n {\n   if (c_parser_next_token_is (parser, CPP_OPEN_BRACE))\n     return c_parser_braced_init (parser, NULL_TREE, false, NULL);\n@@ -5224,6 +5226,15 @@ c_parser_initializer (c_parser *parser)\n       struct c_expr ret;\n       location_t loc = c_parser_peek_token (parser)->location;\n       ret = c_parser_expr_no_commas (parser, NULL);\n+      /* This is handled mostly by gimplify.cc, but we have to deal with\n+\t not warning about int x = x; as it is a GCC extension to turn off\n+\t this warning but only if warn_init_self is zero.  */\n+      if (VAR_P (decl)\n+\t  && !DECL_EXTERNAL (decl)\n+\t  && !TREE_STATIC (decl)\n+\t  && ret.value == decl\n+\t  && !warn_init_self)\n+\tsuppress_warning (decl, OPT_Winit_self);\n       if (TREE_CODE (ret.value) != STRING_CST\n \t  && TREE_CODE (ret.value) != COMPOUND_LITERAL_EXPR)\n \tret = convert_lvalue_to_rvalue (loc, ret, true, true);\n@@ -22588,7 +22599,7 @@ c_parser_omp_declare_reduction (c_parser *parser, enum pragma_context context)\n \t\t  location_t loc = c_parser_peek_token (parser)->location;\n \t\t  rich_location richloc (line_table, loc);\n \t\t  start_init (omp_priv, NULL_TREE, 0, &richloc);\n-\t\t  struct c_expr init = c_parser_initializer (parser);\n+\t\t  struct c_expr init = c_parser_initializer (parser, omp_priv);\n \t\t  finish_init ();\n \t\t  finish_decl (omp_priv, loc, init.value,\n \t\t      \t       init.original_type, NULL_TREE);"}, {"sha": "ff56fddba545cdd8c0d7fd3ba9bb94867cf615fa", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ce2400b35225302e0d6883bb0817378180f5d7/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ce2400b35225302e0d6883bb0817378180f5d7/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=04ce2400b35225302e0d6883bb0817378180f5d7", "patch": "@@ -8253,6 +8253,14 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t      && !TYPE_REF_P (type))\n \t    TREE_CONSTANT (decl) = 1;\n \t}\n+      /* This is handled mostly by gimplify.cc, but we have to deal with\n+\t not warning about int x = x; as it is a GCC extension to turn off\n+\t this warning but only if warn_init_self is zero.  */\n+      if (!DECL_EXTERNAL (decl)\n+\t  && !TREE_STATIC (decl)\n+\t  && decl == tree_strip_any_location_wrapper (init)\n+\t  && !warn_init_self)\n+\tsuppress_warning (decl, OPT_Winit_self);\n     }\n \n   if (flag_openmp"}, {"sha": "740b83b5e9f3d1d5b5c6663eed6c198e9dd80c1c", "filename": "gcc/testsuite/c-c++-common/Winit-self1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ce2400b35225302e0d6883bb0817378180f5d7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ce2400b35225302e0d6883bb0817378180f5d7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self1.c?ref=04ce2400b35225302e0d6883bb0817378180f5d7", "patch": "@@ -0,0 +1,31 @@\n+/* PR middle-end/102633 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized -Wno-init-self\" } */\n+\n+int\n+fn1 (void)\n+{\n+  int i = i;\n+  return i;\n+}\n+\n+int\n+fn2 ()\n+{\n+  const int j = j;\n+  return j;\n+}\n+\n+int\n+fn3 ()\n+{\n+  volatile int k = k;\n+  return k;\n+}\n+\n+int\n+fn4 ()\n+{\n+  const volatile int l = l;\n+  return l;\n+}"}, {"sha": "13aa9efdf26153f20bc5b609c3ab93768793843a", "filename": "gcc/testsuite/c-c++-common/Winit-self2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ce2400b35225302e0d6883bb0817378180f5d7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ce2400b35225302e0d6883bb0817378180f5d7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWinit-self2.c?ref=04ce2400b35225302e0d6883bb0817378180f5d7", "patch": "@@ -0,0 +1,31 @@\n+/* PR middle-end/102633 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wuninitialized -Winit-self\" } */\n+\n+int\n+fn1 (void)\n+{\n+  int i = i; /* { dg-warning \"used uninitialized\" } */\n+  return i;\n+}\n+\n+int\n+fn2 ()\n+{\n+  const int j = j; /* { dg-warning \"used uninitialized\" } */\n+  return j;\n+}\n+\n+int\n+fn3 ()\n+{\n+  volatile int k = k; /* { dg-warning \"used uninitialized\" } */\n+  return k;\n+}\n+\n+int\n+fn4 ()\n+{\n+  const volatile int l = l; /* { dg-warning \"used uninitialized\" } */\n+  return l;\n+}"}]}