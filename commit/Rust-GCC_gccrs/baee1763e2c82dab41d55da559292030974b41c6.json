{"sha": "baee1763e2c82dab41d55da559292030974b41c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlZTE3NjNlMmM4MmRhYjQxZDU1ZGE1NTkyOTIwMzA5NzRiNDFjNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-04-29T07:43:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-04-29T07:43:20Z"}, "message": "predicates.md (general_vector_operand): New predicate.\n\n\t* config/i386/predicates.md (general_vector_operand): New predicate.\n\t* config/i386/i386.c (const_vector_equal_evenodd_p): New function.\n\t(ix86_expand_mul_widen_evenodd): Force op1 resp. op2 into register\n\tif they aren't nonimmediate operands.  If their original values\n\tsatisfy const_vector_equal_evenodd_p, don't shift them.\n\t* config/i386/sse.md (mul<mode>3): Use general_vector_operand\n\tpredicates.  For the SSE4.1 case force operands[{1,2}] into registers\n\tif not nonimmediate_operand.\n\t(vec_widen_smult_even_v4si): Use nonimmediate_operand predicates\n\tinstead of register_operand.\n\t(vec_widen_<s>mult_odd_<mode>): Use general_vector_operand predicates.\n\nFrom-SVN: r198387", "tree": {"sha": "0e4b8e9c518b7c25c2e179d7eba8512edf482d22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e4b8e9c518b7c25c2e179d7eba8512edf482d22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baee1763e2c82dab41d55da559292030974b41c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baee1763e2c82dab41d55da559292030974b41c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baee1763e2c82dab41d55da559292030974b41c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baee1763e2c82dab41d55da559292030974b41c6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f36b23705408ae34094fe24b3a6d155a98b5cb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f36b23705408ae34094fe24b3a6d155a98b5cb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f36b23705408ae34094fe24b3a6d155a98b5cb7"}], "stats": {"total": 71, "additions": 59, "deletions": 12}, "files": [{"sha": "85dfc35728daaf0238cfe2c2a2c720f40782f54a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baee1763e2c82dab41d55da559292030974b41c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baee1763e2c82dab41d55da559292030974b41c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=baee1763e2c82dab41d55da559292030974b41c6", "patch": "@@ -1,3 +1,17 @@\n+2013-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/predicates.md (general_vector_operand): New predicate.\n+\t* config/i386/i386.c (const_vector_equal_evenodd_p): New function.\n+\t(ix86_expand_mul_widen_evenodd): Force op1 resp. op2 into register\n+\tif they aren't nonimmediate operands.  If their original values\n+\tsatisfy const_vector_equal_evenodd_p, don't shift them.\n+\t* config/i386/sse.md (mul<mode>3): Use general_vector_operand\n+\tpredicates.  For the SSE4.1 case force operands[{1,2}] into registers\n+\tif not nonimmediate_operand.\n+\t(vec_widen_smult_even_v4si): Use nonimmediate_operand predicates\n+\tinstead of register_operand.\n+\t(vec_widen_<s>mult_odd_<mode>): Use general_vector_operand predicates.\n+\n 2013-04-28  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n \n \t* stor-layout.c (finalize_size_functions): Allocate a structure and"}, {"sha": "06aeecfaa7ce4383fb3ea28285f1df0a4e22a445", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baee1763e2c82dab41d55da559292030974b41c6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baee1763e2c82dab41d55da559292030974b41c6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=baee1763e2c82dab41d55da559292030974b41c6", "patch": "@@ -40827,13 +40827,37 @@ ix86_expand_vecop_qihi (enum rtx_code code, rtx dest, rtx op1, rtx op2)\n \t\t       gen_rtx_fmt_ee (code, qimode, op1, op2));\n }\n \n+/* Helper function of ix86_expand_mul_widen_evenodd.  Return true\n+   if op is CONST_VECTOR with all odd elements equal to their\n+   preceeding element.  */\n+\n+static bool\n+const_vector_equal_evenodd_p (rtx op)\n+{\n+  enum machine_mode mode = GET_MODE (op);\n+  int i, nunits = GET_MODE_NUNITS (mode);\n+  if (GET_CODE (op) != CONST_VECTOR\n+      || nunits != CONST_VECTOR_NUNITS (op))\n+    return false;\n+  for (i = 0; i < nunits; i += 2)\n+    if (CONST_VECTOR_ELT (op, i) != CONST_VECTOR_ELT (op, i + 1))\n+      return false;\n+  return true;\n+}\n+\n void\n ix86_expand_mul_widen_evenodd (rtx dest, rtx op1, rtx op2,\n \t\t\t       bool uns_p, bool odd_p)\n {\n   enum machine_mode mode = GET_MODE (op1);\n   enum machine_mode wmode = GET_MODE (dest);\n   rtx x;\n+  rtx orig_op1 = op1, orig_op2 = op2;\n+\n+  if (!nonimmediate_operand (op1, mode))\n+    op1 = force_reg (mode, op1);\n+  if (!nonimmediate_operand (op2, mode))\n+    op2 = force_reg (mode, op2);\n \n   /* We only play even/odd games with vectors of SImode.  */\n   gcc_assert (mode == V4SImode || mode == V8SImode);\n@@ -40852,10 +40876,12 @@ ix86_expand_mul_widen_evenodd (rtx dest, rtx op1, rtx op2,\n \t}\n \n       x = GEN_INT (GET_MODE_UNIT_BITSIZE (mode));\n-      op1 = expand_binop (wmode, lshr_optab, gen_lowpart (wmode, op1),\n-\t\t\t  x, NULL, 1, OPTAB_DIRECT);\n-      op2 = expand_binop (wmode, lshr_optab, gen_lowpart (wmode, op2),\n-\t\t\t  x, NULL, 1, OPTAB_DIRECT);\n+      if (!const_vector_equal_evenodd_p (orig_op1))\n+\top1 = expand_binop (wmode, lshr_optab, gen_lowpart (wmode, op1),\n+\t\t\t    x, NULL, 1, OPTAB_DIRECT);\n+      if (!const_vector_equal_evenodd_p (orig_op2))\n+\top2 = expand_binop (wmode, lshr_optab, gen_lowpart (wmode, op2),\n+\t\t\t    x, NULL, 1, OPTAB_DIRECT);\n       op1 = gen_lowpart (mode, op1);\n       op2 = gen_lowpart (mode, op2);\n     }"}, {"sha": "90ab8da1ccba56a87f47c8b0096ef460dfff563c", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baee1763e2c82dab41d55da559292030974b41c6/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baee1763e2c82dab41d55da559292030974b41c6/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=baee1763e2c82dab41d55da559292030974b41c6", "patch": "@@ -1303,3 +1303,8 @@\n   HOST_WIDE_INT low = val & 0xff;\n   return val == ((low << 8) | low);\n })\n+\n+;; Return true if OP is nonimmediate_operand or CONST_VECTOR.\n+(define_predicate \"general_vector_operand\"\n+  (ior (match_operand 0 \"nonimmediate_operand\")\n+       (match_code \"const_vector\")))"}, {"sha": "f630303ecab28da88fdcd016a144acef315b22b5", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baee1763e2c82dab41d55da559292030974b41c6/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baee1763e2c82dab41d55da559292030974b41c6/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=baee1763e2c82dab41d55da559292030974b41c6", "patch": "@@ -5631,14 +5631,16 @@\n (define_expand \"mul<mode>3\"\n   [(set (match_operand:VI4_AVX2 0 \"register_operand\")\n \t(mult:VI4_AVX2\n-\t  (match_operand:VI4_AVX2 1 \"nonimmediate_operand\")\n-\t  (match_operand:VI4_AVX2 2 \"nonimmediate_operand\")))]\n+\t  (match_operand:VI4_AVX2 1 \"general_vector_operand\")\n+\t  (match_operand:VI4_AVX2 2 \"general_vector_operand\")))]\n   \"TARGET_SSE2\"\n {\n   if (TARGET_SSE4_1)\n     {\n-      if (CONSTANT_P (operands[2]))\n-\toperands[2] = force_const_mem (<MODE>mode, operands[2]);\n+      if (!nonimmediate_operand (operands[1], <MODE>mode))\n+\toperands[1] = force_reg (<MODE>mode, operands[1]);\n+      if (!nonimmediate_operand (operands[2], <MODE>mode))\n+\toperands[2] = force_reg (<MODE>mode, operands[2]);\n       ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\n     }\n   else\n@@ -5702,8 +5704,8 @@\n ;; named patterns, but signed V4SI needs special help for plain SSE2.\n (define_expand \"vec_widen_smult_even_v4si\"\n   [(match_operand:V2DI 0 \"register_operand\")\n-   (match_operand:V4SI 1 \"register_operand\")\n-   (match_operand:V4SI 2 \"register_operand\")]\n+   (match_operand:V4SI 1 \"nonimmediate_operand\")\n+   (match_operand:V4SI 2 \"nonimmediate_operand\")]\n   \"TARGET_SSE2\"\n {\n   ix86_expand_mul_widen_evenodd (operands[0], operands[1], operands[2],\n@@ -5714,8 +5716,8 @@\n (define_expand \"vec_widen_<s>mult_odd_<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")\n    (any_extend:<sseunpackmode>\n-     (match_operand:VI4_AVX2 1 \"register_operand\"))\n-   (match_operand:VI4_AVX2 2 \"register_operand\")]\n+     (match_operand:VI4_AVX2 1 \"general_vector_operand\"))\n+   (match_operand:VI4_AVX2 2 \"general_vector_operand\")]\n   \"TARGET_SSE2\"\n {\n   ix86_expand_mul_widen_evenodd (operands[0], operands[1], operands[2],"}]}