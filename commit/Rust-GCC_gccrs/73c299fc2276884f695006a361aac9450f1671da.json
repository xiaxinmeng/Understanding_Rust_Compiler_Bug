{"sha": "73c299fc2276884f695006a361aac9450f1671da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNjMjk5ZmMyMjc2ODg0ZjY5NTAwNmEzNjFhYWM5NDUwZjE2NzFkYQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-04-05T22:59:12Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-04-05T22:59:12Z"}, "message": "re PR java/1315 (Inner class initializer crash)\n\n2001-04-04  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* java-tree.h (struct lang_decl): New macro\n\t`DECL_FIXED_CONSTRUCTOR_P.' New field `fixed_ctor.'\n\t* parse.y (build_instance_initializer): New function.\n\t(add_instance_initializer): Use it.\n\t(java_fix_constructors): Set `current_class' before fix pass.\n\t(fix_constructors): Just return if already fixed. Move `super()'\n\tinvokation ahead. Use `build_instance_initializer.'\n\tFixes PR java/1315.\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-04/msg00343.html)\n\nFrom-SVN: r41129", "tree": {"sha": "9d4743d71e75362eb9798fa906a94ca8f810cf3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d4743d71e75362eb9798fa906a94ca8f810cf3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73c299fc2276884f695006a361aac9450f1671da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c299fc2276884f695006a361aac9450f1671da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c299fc2276884f695006a361aac9450f1671da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c299fc2276884f695006a361aac9450f1671da/comments", "author": null, "committer": null, "parents": [{"sha": "864e133c3cb393bf06302f3f580c9c91ffe95f89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864e133c3cb393bf06302f3f580c9c91ffe95f89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/864e133c3cb393bf06302f3f580c9c91ffe95f89"}], "stats": {"total": 67, "additions": 53, "deletions": 14}, "files": [{"sha": "12b2cd7373f28da1003c292beafcb4d2123785ab", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c299fc2276884f695006a361aac9450f1671da/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c299fc2276884f695006a361aac9450f1671da/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=73c299fc2276884f695006a361aac9450f1671da", "patch": "@@ -1,3 +1,14 @@\n+2001-04-04  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* java-tree.h (struct lang_decl): New macro\n+\t`DECL_FIXED_CONSTRUCTOR_P.' New field `fixed_ctor.'\n+\t* parse.y (build_instance_initializer): New function.\n+\t(add_instance_initializer): Use it.\n+\t(java_fix_constructors): Set `current_class' before fix pass.\n+\t(fix_constructors): Just return if already fixed. Move `super()'\n+\tinvokation ahead. Use `build_instance_initializer.'\n+\tFixes PR java/1315.\n+\n 2001-04-04  Alexandre Petit-Bianco  <apbianco@redhat.com>\n  \n \t* parse.y (resolve_qualified_expression_name): Pass field's"}, {"sha": "0163b49d09d96821975cf3153bae95b8637ad86e", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c299fc2276884f695006a361aac9450f1671da/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c299fc2276884f695006a361aac9450f1671da/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=73c299fc2276884f695006a361aac9450f1671da", "patch": "@@ -715,6 +715,7 @@ struct lang_identifier\n /* True if DECL initializes all its finals */\n #define DECL_FUNCTION_ALL_FINAL_INITIALIZED(DECL) \\\n   (DECL_LANG_SPECIFIC(DECL)->init_final)\n+#define DECL_FIXED_CONSTRUCTOR_P(DECL) (DECL_LANG_SPECIFIC(DECL)->fixed_ctor)\n \n /* True when DECL aliases an outer context local variable.  */\n #define FIELD_LOCAL_ALIAS(DECL) DECL_LANG_FLAG_6 (DECL)\n@@ -864,6 +865,7 @@ struct lang_decl\n   int native : 1;\t\t/* Nonzero if this is a native method  */\n   int synthetic_ctor : 1;\t/* Nonzero if this is a synthetic ctor */\n   int init_final : 1;\t\t/* Nonzero all finals are initialized */\n+  int fixed_ctor : 1;\n };\n \n /* init_test_table hash table entry structure.  */"}, {"sha": "40324098d655d4b38515aa6600f83b684f42d22a", "filename": "gcc/java/parse.y", "status": "modified", "additions": 40, "deletions": 14, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c299fc2276884f695006a361aac9450f1671da/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c299fc2276884f695006a361aac9450f1671da/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=73c299fc2276884f695006a361aac9450f1671da", "patch": "@@ -238,6 +238,7 @@ static const char *get_printable_method_name PARAMS ((tree));\n static tree patch_conditional_expr PARAMS ((tree, tree, tree));\n static tree generate_finit PARAMS ((tree));\n static void add_instance_initializer PARAMS ((tree));\n+static tree build_instance_initializer PARAMS ((tree));\n static void fix_constructors PARAMS ((tree));\n static tree build_alias_initializer_parameter_list PARAMS ((int, tree,\n \t\t\t\t\t\t\t    tree, int *));\n@@ -4302,22 +4303,29 @@ generate_finit (class_type)\n   return mdecl;\n }\n \n-static void\n-add_instance_initializer (mdecl)\n+static tree\n+build_instance_initializer (mdecl)\n      tree mdecl;\n {\n-  tree current;\n-  tree stmt_list = TYPE_II_STMT_LIST (DECL_CONTEXT (mdecl));\n   tree compound = NULL_TREE;\n+  tree stmt_list = TYPE_II_STMT_LIST (DECL_CONTEXT (mdecl));\n+  tree current;\n \n-  if (stmt_list)\n-    {\n-      for (current = stmt_list; current; current = TREE_CHAIN (current))\n-\tcompound = add_stmt_to_compound (compound, NULL_TREE, current);\n+  for (current = stmt_list; current; current = TREE_CHAIN (current))\n+    compound = add_stmt_to_compound (compound, NULL_TREE, current);\n \n-      java_method_add_stmt (mdecl, build1 (INSTANCE_INITIALIZERS_EXPR,\n-\t\t\t\t\t   NULL_TREE, compound));\n-    }\n+  return compound;\n+}\n+\n+static void\n+add_instance_initializer (mdecl)\n+     tree mdecl;\n+{\n+  tree compound = build_instance_initializer (mdecl);\n+\n+  if (compound)\n+    java_method_add_stmt (mdecl, build1 (INSTANCE_INITIALIZERS_EXPR,\n+\t\t\t\t\t NULL_TREE, compound));\n }\n \n /* Shared accros method_declarator and method_header to remember the\n@@ -5233,6 +5241,7 @@ java_fix_constructors ()\n       if (CLASS_INTERFACE (TYPE_NAME (class_type)))\n \tcontinue;\n \n+      current_class = class_type;\n       for (decl = TYPE_METHODS (class_type); decl; decl = TREE_CHAIN (decl))\n \t{\n \t  if (DECL_CONSTRUCTOR_P (decl))\n@@ -8456,6 +8465,10 @@ fix_constructors (mdecl)\n   tree thisn_assign, compound = NULL_TREE;\n   tree class_type = DECL_CONTEXT (mdecl);\n \n+  if (DECL_FIXED_CONSTRUCTOR_P (mdecl))\n+    return;\n+  DECL_FIXED_CONSTRUCTOR_P (mdecl) = 1;\n+\n   if (!body)\n     {\n       /* It is an error for the compiler to generate a default\n@@ -8499,7 +8512,9 @@ fix_constructors (mdecl)\n   else \n     {\n       int found = 0;\n+      tree found_call = NULL_TREE;\n       tree main_block = BLOCK_EXPR_BODY (body);\n+      tree ii;\t\t\t/* Instance Initializer */\n       \n       while (body)\n \tswitch (TREE_CODE (body))\n@@ -8510,9 +8525,11 @@ fix_constructors (mdecl)\n \t    break;\n \t  case COMPOUND_EXPR:\n \t  case EXPR_WITH_FILE_LOCATION:\n+\t    found_call = body;\n \t    body = TREE_OPERAND (body, 0);\n \t    break;\n \t  case BLOCK:\n+\t    found_call = body;\n \t    body = BLOCK_EXPR_BODY (body);\n \t    break;\n \t  default:\n@@ -8523,14 +8540,23 @@ fix_constructors (mdecl)\n       if (!found)\n \tcompound = add_stmt_to_compound (compound, NULL_TREE,\n                                          build_super_invocation (mdecl));\n+\n+      /* Explicit super() invokation should be kept as the first\n+         statement, we move it. */\n+      else\n+\t{\n+\t  compound = add_stmt_to_compound (compound, NULL_TREE,\n+\t\t\t\t\t   TREE_OPERAND (found_call, 0));\n+\t  TREE_OPERAND (found_call, 0) = empty_stmt_node;\n+\t}\n       \n       /* Generate the assignment to this$<n>, if necessary */\n       if ((thisn_assign = build_thisn_assign ()))\n         compound = add_stmt_to_compound (compound, NULL_TREE, thisn_assign);\n \n-      /* Insert the instance initializer block right here, after the\n-         super invocation. */\n-      add_instance_initializer (mdecl);\n+      /* Insert the instance initializer block right after. */\n+      if ((ii = build_instance_initializer (mdecl)))\n+\tcompound = add_stmt_to_compound (compound, NULL_TREE, ii);\n \n       /* Fix the constructor main block if we're adding extra stmts */\n       if (compound)"}]}