{"sha": "222abf8be5a33b0a3da1d34c91ed3492b5efe129", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyYWJmOGJlNWEzM2IwYTNkYTFkMzRjOTFlZDM0OTJiNWVmZTEyOQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2021-02-23T00:43:50Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2021-02-23T00:47:09Z"}, "message": "g++.dg/warn/Wplacement-new-size-1.C, -2, -6: Fix for default_packed targets\n\nLooking at commit de05c19d5fd6, that adjustment to these\ntests apparently assumed that the testsuite is run (only) on\ntargets where structure memory layout has padding as per\n\"natural alignment\".  For cris-elf, a target with no padding\nin structure memory layout, these tests have been failing\nsince that commit.\n\nTested cris-elf and x86_64-linux, committed as obvious.\n\ngcc/testsuite:\n\t* g++.dg/warn/Wplacement-new-size-1.C,\n\tg++.dg/warn/Wplacement-new-size-2.C,\n\tg++.dg/warn/Wplacement-new-size-6.C: Adjust for\n\tdefault_packed targets.", "tree": {"sha": "3dedca7671c432c39bb6e0968afbc5c0914473dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dedca7671c432c39bb6e0968afbc5c0914473dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/222abf8be5a33b0a3da1d34c91ed3492b5efe129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222abf8be5a33b0a3da1d34c91ed3492b5efe129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/222abf8be5a33b0a3da1d34c91ed3492b5efe129", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222abf8be5a33b0a3da1d34c91ed3492b5efe129/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f5765cf25115fc8306806a913d90bed6edb420b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5765cf25115fc8306806a913d90bed6edb420b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f5765cf25115fc8306806a913d90bed6edb420b"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "1ad5c2da75af8996e5175a24a40cfd401f83d5ec", "filename": "gcc/testsuite/g++.dg/warn/Wplacement-new-size-1.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222abf8be5a33b0a3da1d34c91ed3492b5efe129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222abf8be5a33b0a3da1d34c91ed3492b5efe129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-1.C?ref=222abf8be5a33b0a3da1d34c91ed3492b5efe129", "patch": "@@ -67,8 +67,8 @@ void fBx (BAx *pbx, BAx &rbx)\n {\n   BAx bax;\n   // The uninitialized flexible array takes up the bytes of padding.\n-  new (bax.ax.a) char;\n-  new (bax.ax.a) Int16;\n+  new (bax.ax.a) char;     // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax.ax.a) Int16;    // { dg-warning \"placement\" \"\" { target default_packed } }\n   new (bax.ax.a) Int32;    // { dg-warning \"placement\" }\n \n   new (pbx->ax.a) char;\n@@ -86,10 +86,10 @@ void fBx1 ()\n   static BAx bax1 = { 1, /* Ax = */ { 2, /* a[] = */ {} } };\n \n   // The empty flexible array takes up the bytes of padding.\n-  new (bax1.ax.a) char;\n-  new (bax1.ax.a) char[2];\n-  new (bax1.ax.a) Int16;\n-  new (bax1.ax.a) char[3];\n+  new (bax1.ax.a) char;     // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax1.ax.a) char[2];  // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax1.ax.a) Int16;    // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax1.ax.a) char[3];  // { dg-warning \"placement\" \"\" { target default_packed } }\n   new (bax1.ax.a) char[4];  // { dg-warning \"placement\" }\n   new (bax1.ax.a) Int32;    // { dg-warning \"placement\" }\n }"}, {"sha": "a4de2b04629c16a570b711894ed7584f29e53b77", "filename": "gcc/testsuite/g++.dg/warn/Wplacement-new-size-2.C", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222abf8be5a33b0a3da1d34c91ed3492b5efe129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222abf8be5a33b0a3da1d34c91ed3492b5efe129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-2.C?ref=222abf8be5a33b0a3da1d34c91ed3492b5efe129", "patch": "@@ -125,9 +125,9 @@ void fBx (BAx *pbx, BAx &rbx)\n {\n   BAx bax;\n   // The uninitialized flexible array takes up the bytes of padding.\n-  new (bax.ax.a) char;\n-  new (bax.ax.a) Int16;\n-  new (bax.ax.a) char[3];\n+  new (bax.ax.a) char;        // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax.ax.a) Int16;       // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax.ax.a) char[3];     // { dg-warning \"placement\" \"\" { target default_packed } }\n   new (bax.ax.a) Int32;       // { dg-warning \"placement\" }\n   new (bax.ax.a) char[4];     // { dg-warning \"placement\" }\n   new (bax.ax.a) char[5];     // { dg-warning \"placement\" }\n@@ -147,10 +147,10 @@ void fBx1 ()\n   static BAx bax1 = { 1, /* Ax = */ { 2, /* a[] = */ {} } };\n \n   // The empty flexible array takes up the bytes of padding.\n-  new (bax1.ax.a) char;\n-  new (bax1.ax.a) char[2];\n-  new (bax1.ax.a) Int16;\n-  new (bax1.ax.a) char[3];\n+  new (bax1.ax.a) char;       // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax1.ax.a) char[2];    // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax1.ax.a) Int16;      // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax1.ax.a) char[3];    // { dg-warning \"placement\" \"\" { target default_packed } }\n   new (bax1.ax.a) Int32;      // { dg-warning \"placement\" }\n   new (bax1.ax.a) char[4];    // { dg-warning \"placement\" }\n   new (bax1.ax.a) char[5];    // { dg-warning \"placement\" }"}, {"sha": "86a18fa08e63ac5d1bca5d5e6e80f67f09378b34", "filename": "gcc/testsuite/g++.dg/warn/Wplacement-new-size-6.C", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222abf8be5a33b0a3da1d34c91ed3492b5efe129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222abf8be5a33b0a3da1d34c91ed3492b5efe129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWplacement-new-size-6.C?ref=222abf8be5a33b0a3da1d34c91ed3492b5efe129", "patch": "@@ -18,9 +18,9 @@ void fBx1 ()\n   static BAx bax1 = { 1, /* Ax = */ { 2, /* a[] = */ { 3 } } }; // { dg-error \"initialization of flexible array member in a nested context\" }\n \n   // The first three bytes of the flexible array member live in the padding.\n-  new (bax1.ax.a) char;\n-  new (bax1.ax.a) char[2];\n-  new (bax1.ax.a) Int16;\n+  new (bax1.ax.a) char;     // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax1.ax.a) char[2];  // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax1.ax.a) Int16;    // { dg-warning \"placement\" \"\" { target default_packed } }\n   new (bax1.ax.a) Int32;    // { dg-warning \"placement\" }\n }\n \n@@ -29,10 +29,10 @@ void fBx2 ()\n   static BAx bax2 = { 1, /* Ax = */ { 2, /* a[] = */ { 3, 4 } } }; // { dg-error \"initialization of flexible array member in a nested context\" }\n \n   // The first three bytes of the flexible array member live in the padding.\n-  new (bax2.ax.a) char;\n-  new (bax2.ax.a) char[2];\n-  new (bax2.ax.a) char[3];\n-  new (bax2.ax.a) Int16;\n+  new (bax2.ax.a) char;       // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax2.ax.a) char[2];    // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax2.ax.a) char[3];    // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax2.ax.a) Int16;      // { dg-warning \"placement\" \"\" { target default_packed } }\n   new (bax2.ax.a) char[4];    // { dg-warning \"placement\" }\n   new (bax2.ax.a) Int32;      // { dg-warning \"placement\" }\n }\n@@ -42,10 +42,10 @@ void fBx3 ()\n   static BAx bax2 = { 1, /* Ax = */ { 3, /* a[] = */ { 4, 5, 6 } } }; // { dg-error \"initialization of flexible array member in a nested context\" }\n \n   // The first three bytes of the flexible array member live in the padding.\n-  new (bax2.ax.a) char;\n-  new (bax2.ax.a) char[2];\n-  new (bax2.ax.a) Int16;\n-  new (bax2.ax.a) char[3];\n+  new (bax2.ax.a) char;       // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax2.ax.a) char[2];    // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax2.ax.a) Int16;      // { dg-warning \"placement\" \"\" { target default_packed } }\n+  new (bax2.ax.a) char[3];    // { dg-warning \"placement\" \"\" { target default_packed } }\n   new (bax2.ax.a) char[4];    // { dg-warning \"placement\" }\n   new (bax2.ax.a) Int32;      // { dg-warning \"placement\" }\n }"}]}