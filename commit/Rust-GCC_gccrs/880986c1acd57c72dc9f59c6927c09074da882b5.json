{"sha": "880986c1acd57c72dc9f59c6927c09074da882b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgwOTg2YzFhY2Q1N2M3MmRjOWY1OWM2OTI3YzA5MDc0ZGE4ODJiNQ==", "commit": {"author": {"name": "David Ung", "email": "davidu@mips.com", "date": "2005-05-09T11:43:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-05-09T11:43:50Z"}, "message": "mips.h (processor_type): Add names for the 24K.\n\n\t* config/mips/mips.h (processor_type): Add names for the 24K.\n\t* config/mips/mips.c (mips_cpu_info_table): Add names for the 24K\n\tprocessor family.\n\t* config/mips/mips.md (cnv_mode): New attribute for recording the\n\tconversion types of float convert insns.\n\t(cpu): Add 24k and 24kx.\n\t(include): Include 24k.md file.\n\t(truncdfsf2, extendsfdf2, fix_truncdfsi2_insn, fix_truncdfsi2_macro)\n\t(fix_truncdfdi2, fix_truncsfdi2, floatsidf2, floatdidf2, floatsisf2)\n\t(floatdisf2): Setup cnv_mode.\n\t(fix_truncsfsi2_insn, fix_truncsfsi2_macro): Changed mode to SF and\n\tsetup cnv_mode.\n\t* config/mips/24k.md: New file, contains 24k DFA pipeline\n\tdescription.\n\nFrom-SVN: r99429", "tree": {"sha": "d67cc008403374cb0f202b2cc68c9da805aa874e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d67cc008403374cb0f202b2cc68c9da805aa874e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/880986c1acd57c72dc9f59c6927c09074da882b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880986c1acd57c72dc9f59c6927c09074da882b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880986c1acd57c72dc9f59c6927c09074da882b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880986c1acd57c72dc9f59c6927c09074da882b5/comments", "author": null, "committer": null, "parents": [{"sha": "f5b9e7c92c7deea00449d6ef581275f842b299fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5b9e7c92c7deea00449d6ef581275f842b299fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5b9e7c92c7deea00449d6ef581275f842b299fc"}], "stats": {"total": 510, "additions": 507, "deletions": 3}, "files": [{"sha": "caf0d00d5960ad45e89cab2a1779e9a73051ea91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880986c1acd57c72dc9f59c6927c09074da882b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880986c1acd57c72dc9f59c6927c09074da882b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=880986c1acd57c72dc9f59c6927c09074da882b5", "patch": "@@ -1,3 +1,20 @@\n+2005-05-09  David Ung  <davidu@mips.com>\n+\n+\t* config/mips/mips.h (processor_type): Add names for the 24K. \n+\t* config/mips/mips.c (mips_cpu_info_table): Add names for the 24K\n+\tprocessor family.\n+\t* config/mips/mips.md (cnv_mode): New attribute for recording the\n+\tconversion types of float convert insns.\n+\t(cpu): Add 24k and 24kx.\n+\t(include): Include 24k.md file.\n+\t(truncdfsf2, extendsfdf2, fix_truncdfsi2_insn, fix_truncdfsi2_macro)\n+\t(fix_truncdfdi2, fix_truncsfdi2, floatsidf2, floatdidf2, floatsisf2)\n+\t(floatdisf2): Setup cnv_mode.\n+\t(fix_truncsfsi2_insn, fix_truncsfsi2_macro): Changed mode to SF and\n+\tsetup cnv_mode.\n+\t* config/mips/24k.md: New file, contains 24k DFA pipeline\n+\tdescription. \n+\n 2005-05-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/sh/sh.c (print_operand_address): Use gcc_assert and"}, {"sha": "3e47195f3cd52d1cb88f6ef2770f8b561ced4bd8", "filename": "gcc/config/mips/24k.md", "status": "added", "additions": 457, "deletions": 0, "changes": 457, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880986c1acd57c72dc9f59c6927c09074da882b5/gcc%2Fconfig%2Fmips%2F24k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880986c1acd57c72dc9f59c6927c09074da882b5/gcc%2Fconfig%2Fmips%2F24k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F24k.md?ref=880986c1acd57c72dc9f59c6927c09074da882b5", "patch": "@@ -0,0 +1,457 @@\n+;; DFA-based pipeline descriptions for MIPS Technologies 24K core.\n+;; Contributed by Chao-ying Fu (fu@mips.com), Nigel Stephens (nigel@mips.com) \n+;;   and David Ung (davidu@mips.com)\n+;;\n+;; The 24K is a single-issue processor with a half-clocked fpu.\n+;; The 24Kx is 24k with 1:1 clocked fpu.\n+;;\n+;; References:\n+;;   \"MIPS32 24K Processor Core Family Software User's Manual, Rev 3.04.\"\n+;;\n+;; Copyright (C) 2005 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 2, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to the\n+;; Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+;; MA 02111-1307, USA.\n+\n+(define_automaton \"r24k_cpu, r24k_mdu, r24k_fpu\")\n+\n+;; Integer execution unit.\n+(define_cpu_unit \"r24k_iss\"\t\t\"r24k_cpu\")\n+(define_cpu_unit \"r24k_ixu_arith\"\t\"r24k_cpu\")\n+(define_cpu_unit \"r24k_mul3a\"\t        \"r24k_mdu\")\n+(define_cpu_unit \"r24k_mul3b\"\t        \"r24k_mdu\")\n+(define_cpu_unit \"r24k_mul3c\"\t        \"r24k_mdu\")\n+\n+;; --------------------------------------------------------------\n+;; Producers\n+;; --------------------------------------------------------------\n+\n+;; 1. Loads: lb, lbu, lh, lhu, ll, lw, lwl, lwr, lwpc, lwxs\n+(define_insn_reservation \"r24k_int_load\" 2 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (eq_attr \"type\" \"load\"))\n+  \"r24k_iss+r24k_ixu_arith\")\n+\n+\n+;; 2. Arithmetic: add, addi, addiu, addiupc, addu, and, andi, clo, clz,\n+;;    ext, ins, lui, movn, movz, nor, or, ori, rotr, rotrv, seb, seh, sll, \n+;;    sllv, slt, slti, sltiu, sltu, sra, srav, srl, srlv, sub, subu, wsbh, \n+;;    xor, xori\n+;; (movn/movz is not matched, we'll need to split condmov to \n+;;  differentiate between integer/float moves)\n+(define_insn_reservation \"r24k_int_arith\" 1 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (eq_attr \"type\" \"arith,const,nop,shift,slt\")) \n+  \"r24k_iss+r24k_ixu_arith\")\n+\n+\n+;; 3. Links: bgezal, bgezall, bltzal, bltzall, jal, jalr, jalx\n+;; 3a. jr/jalr consumer\n+(define_insn_reservation \"r24k_int_jump\" 1 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (eq_attr \"type\" \"call,jump\"))\n+  \"r24k_iss+r24k_ixu_arith\")\n+\n+;; 3b. branch consumer\n+(define_insn_reservation \"r24k_int_branch\" 1 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (eq_attr \"type\" \"branch\"))\n+  \"r24k_iss+r24k_ixu_arith\")\n+\n+\n+;; 4. MDU: fully pipelined multiplier\n+;; mult - delivers result to hi/lo in 1 cycle (pipelined)\n+(define_insn_reservation \"r24k_int_mult\" 1 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (eq_attr \"type\" \"imul\")) \n+  \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n+\n+;; madd, msub - delivers result to hi/lo in 1 cycle (pipelined)\n+(define_insn_reservation \"r24k_int_madd\" 1 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (eq_attr \"type\" \"imadd\")) \n+  \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n+\n+;; mul - delivers result to gpr in 5 cycles \n+;; (disabled for now until we introduce the 3 operand mul into the general \n+;;  patterns).\n+;;(define_insn_reservation \"r24k_int_mul3\" 5 \n+;; (and (eq_attr \"cpu\" \"24k,24kx\")\n+;;   (eq_attr \"type\" \"imul3\")) \n+;; \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)*5\")\n+\n+;; mfhi, mflo, mflhxu - deliver result to gpr in 5 cycles\n+(define_insn_reservation \"r24k_int_mfhilo\" 5 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (eq_attr \"type\" \"mfhilo\")) \n+  \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n+\n+;; mthi, mtlo, mtlhx - deliver result to hi/lo, thence madd, handled as bypass\n+(define_insn_reservation \"r24k_int_mthilo\" 1 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (eq_attr \"type\" \"mthilo\")) \n+  \"r24k_iss+(r24k_mul3a|r24k_mul3b|r24k_mul3c)\")\n+\n+;; div - default to 36 cycles for 32bit operands.  Faster for 24bit, 16bit and \n+;; 8bit, but is tricky to identify.\n+(define_insn_reservation \"r24k_int_div\" 36 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (eq_attr \"type\" \"idiv\")) \n+  \"r24k_iss+(r24k_mul3a+r24k_mul3b+r24k_mul3c)*36\")\n+\n+\n+;; 5. Cop: cfc1, di, ei, mfc0, mtc0\n+;; (Disabled until we add proper cop0 support)\n+;;(define_insn_reservation \"r24k_int_cop\" 3 \n+;;  (and (eq_attr \"cpu\" \"24k,24kx\")\n+;;       (eq_attr \"type\" \"cop0\"))\n+;;  \"r24k_iss+r24k_ixu_arith\")\n+\n+\n+;; 6. Store\n+(define_insn_reservation \"r24k_int_store\" 1 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (and (eq_attr \"type\" \"store\")\n+\t    (eq_attr \"mode\" \"!unknown\")))\n+  \"r24k_iss+r24k_ixu_arith\")\n+\n+;; 6.1 Special case - matches the cprestore pattern which don't set the mode\n+;;     attrib. This avoids being set as r24k_int_store and have it checked \n+;;     against store_data_bypass_p, which would then fail because cprestore\n+;;     does not have a normal SET pattern.\n+(define_insn_reservation \"r24k_unknown_store\" 1 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (and (eq_attr \"type\" \"store\")\n+\t    (eq_attr \"mode\" \"unknown\")))\n+  \"r24k_iss+r24k_ixu_arith\")\n+\n+\n+;; 7. Multiple instructions\n+(define_insn_reservation \"r24k_int_multi\" 1 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (eq_attr \"type\" \"multi\")) \n+  \"r24k_iss+r24k_ixu_arith+r24k_fpu_arith+(r24k_mul3a+r24k_mul3b+r24k_mul3c)\")\n+\n+\n+;; 8. Unknowns - Currently these include blockage, consttable and alignment \n+;;    rtls. They do not really affect scheduling latency, (blockage affects \n+;;    scheduling via log links, but not used here).\n+(define_insn_reservation \"r24k_int_unknown\" 0 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (eq_attr \"type\" \"unknown\"))\n+  \"r24k_iss\")\n+\n+\n+;; 9. Prefetch\n+(define_insn_reservation \"r24k_int_prefetch\" 1 \n+  (and (eq_attr \"cpu\" \"24k,24kx\")\n+       (eq_attr \"type\" \"prefetch,prefetchx\")) \n+  \"r24k_iss+r24k_ixu_arith\")\n+\n+\n+;; --------------------------------------------------------------\n+;; Bypass to Consumer\n+;; --------------------------------------------------------------\n+\n+;; load->next use :  2 cycles (Default)\n+;; load->load base:  3 cycles\n+;; load->store base: 3 cycles\n+;; load->prefetch:   3 cycles\n+(define_bypass 3 \"r24k_int_load\" \"r24k_int_load\")\n+(define_bypass 3 \"r24k_int_load\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+(define_bypass 3 \"r24k_int_load\" \"r24k_int_prefetch\")\n+\n+;; arith->next use :  1 cycles (Default)\n+;; arith->load base:  2 cycles\n+;; arith->store base: 2 cycles\n+;; arith->prefetch:   2 cycles\n+(define_bypass 2 \"r24k_int_arith\" \"r24k_int_load\")\n+(define_bypass 2 \"r24k_int_arith\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+(define_bypass 2 \"r24k_int_arith\" \"r24k_int_prefetch\")\n+\n+;; mul3->next use : 5 cycles (default)\n+;; mul3->l/s base : 6 cycles\n+;; mul3->prefetch : 6 cycles\n+;;(define_bypass 6 \"r24k_int_mul3\" \"r24k_int_load\")\n+;;(define_bypass 6 \"r24k_int_mul3\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+;;(define_bypass 6 \"r24k_int_mul3\" \"r24k_int_prefetch\")\n+\n+;; mfhilo->next use  : 5 cycles (default)\n+;; mfhilo->l/s base  : 6 cycles \n+;; mfhilo->prefetch  : 6 cycles \n+;; mthilo->madd/msub : 2 cycle (only for mthi/lo not mfhi/lo)\n+(define_bypass 6 \"r24k_int_mfhilo\" \"r24k_int_load\")\n+(define_bypass 6 \"r24k_int_mfhilo\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+(define_bypass 6 \"r24k_int_mfhilo\" \"r24k_int_prefetch\")\n+(define_bypass 2 \"r24k_int_mthilo\" \"r24k_int_madd\")\n+\n+;; cop->next use : 3 cycles (Default)\n+;; cop->l/s base : 4 cycles\n+;; (define_bypass 4 \"r24k_int_cop\" \"r24k_int_load\")\n+;; (define_bypass 4 \"r24k_int_cop\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+\n+;; multi->next use : 1 cycles (Default)\n+;; multi->l/s base : 2 cycles\n+;; multi->prefetch : 2 cycles\n+(define_bypass 2 \"r24k_int_multi\" \"r24k_int_load\")\n+(define_bypass 2 \"r24k_int_multi\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+(define_bypass 2 \"r24k_int_multi\" \"r24k_int_prefetch\")\n+\n+\n+;; --------------------------------------------------------------\n+;; Floating Point Instructions\n+;; --------------------------------------------------------------\n+\n+(define_cpu_unit \"r24k_fpu_arith\" \"r24k_fpu\")\n+\n+;; The 24k is a single issue cpu, and the fpu runs at half clock speed,\n+;; so each fpu instruction ties up the shared instruction scheduler for\n+;; 1 cycle, and the fpu scheduler for 2 cycles.\n+;; \n+;; These timings are therefore twice the values in the 24K manual,\n+;; which are quoted in fpu clocks.\n+;;\n+;; The 24kx is a 24k configuered with 1:1 cpu and fpu, so use\n+;; the unscaled timings\n+\n+(define_reservation \"r24k_fpu_iss\"\t\"r24k_iss+(r24k_fpu_arith*2)\")\n+\n+;; fadd, fabs, fneg\n+(define_insn_reservation \"r24k_fadd\" 8 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (eq_attr \"type\" \"fadd,fabs,fneg\"))\n+  \"r24k_fpu_iss\")\n+\n+;; fmove, fcmove\n+(define_insn_reservation \"r24k_fmove\" 8 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (eq_attr \"type\" \"fmove,condmove\"))\n+  \"r24k_fpu_iss\")\n+\n+;; fload\n+(define_insn_reservation \"r24k_fload\" 6 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (eq_attr \"type\" \"fpload,fpidxload\"))\n+  \"r24k_fpu_iss\")\n+\n+;; fstore\n+(define_insn_reservation \"r24k_fstore\" 2 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (eq_attr \"type\" \"fpstore\"))\n+  \"r24k_fpu_iss\")\n+\n+;; fmul, fmadd\n+(define_insn_reservation \"r24k_fmul_sf\" 8 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (and (eq_attr \"type\" \"fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"r24k_fpu_iss\")\n+\n+(define_insn_reservation \"r24k_fmul_df\" 10 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (and (eq_attr \"type\" \"fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r24k_fpu_iss,(r24k_fpu_arith*2)\")\n+\n+\n+;; fdiv, fsqrt, frsqrt\n+(define_insn_reservation \"r24k_fdiv_sf\" 34 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt,frsqrt\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"r24k_fpu_iss,(r24k_fpu_arith*26)\")\n+\n+(define_insn_reservation \"r24k_fdiv_df\" 64 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r24k_fpu_iss,(r24k_fpu_arith*56)\")\n+\n+;; frsqrt\n+(define_insn_reservation \"r24k_frsqrt_df\" 70 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r24k_fpu_iss,(r24k_fpu_arith*60)\")\n+\n+;; fcmp\n+(define_insn_reservation \"r24k_fcmp\" 4 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (eq_attr \"type\" \"fcmp\"))\n+  \"r24k_fpu_iss\")\n+\n+;; fcmp -> movf.fmt & movt.fmt bypass (dependency must be on the condition)\n+(define_bypass 2 \"r24k_fcmp\" \"r24k_fmove\")\n+\n+;; fcvt (cvt.d.s, cvt.[sd].[wl])\n+(define_insn_reservation \"r24k_fcvt_i2f_s2d\" 8 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (and (eq_attr \"type\" \"fcvt\")\n+\t    (eq_attr \"cnv_mode\" \"I2S,I2D,S2D\")))\n+  \"r24k_fpu_iss\")\n+\n+;; fcvt (cvt.s.d)\n+(define_insn_reservation \"r24k_fcvt_s2d\" 12 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (and (eq_attr \"type\" \"fcvt\")\n+\t    (eq_attr \"cnv_mode\" \"D2S\")))\n+  \"r24k_fpu_iss\")\n+\n+;; fcvt (cvt.[wl].[sd], etc)\n+(define_insn_reservation \"r24k_fcvt_f2i\" 10 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (and (eq_attr \"type\" \"fcvt\")\n+\t    (eq_attr \"cnv_mode\" \"S2I,D2I\")))\n+  \"r24k_fpu_iss\")\n+\n+;; fxfer (mfc1, mfhc1, mtc1, mthc1)\n+(define_insn_reservation \"r24k_fxfer\" 4 \n+  (and (eq_attr \"cpu\" \"24k\")\n+       (eq_attr \"type\" \"xfer\"))\n+  \"r24k_fpu_iss\")\n+\n+;; --------------------------------------------------------------\n+;; Bypass to Consumer\n+;; --------------------------------------------------------------\n+;; r24k_fcvt_f2i->l/s base : 11 cycles\n+;; r24k_fcvt_f2i->prefetch : 11 cycles\n+(define_bypass 11 \"r24k_fcvt_f2i\" \"r24k_int_load\")\n+(define_bypass 11 \"r24k_fcvt_f2i\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+(define_bypass 11 \"r24k_fcvt_f2i\" \"r24k_int_prefetch\")\n+\n+;; r24k_fxfer->l/s base : 5 cycles\n+;; r24k_fxfer->prefetch : 5 cycles\n+(define_bypass 5 \"r24k_fxfer\" \"r24k_int_load\")\n+(define_bypass 5 \"r24k_fxfer\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+(define_bypass 5 \"r24k_fxfer\" \"r24k_int_prefetch\")\n+\n+;; --------------------------------------------------------------\n+;; The 24kx is a 24k configured with 1:1 cpu and fpu, so use\n+;; the unscaled timings\n+;; --------------------------------------------------------------\n+\n+(define_reservation \"r24kx_fpu_iss\"\t\"r24k_iss+r24k_fpu_arith\")\n+\n+;; fadd, fabs, fneg\n+(define_insn_reservation \"r24kx_fadd\" 4 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (eq_attr \"type\" \"fadd,fabs,fneg\"))\n+  \"r24kx_fpu_iss\")\n+\n+;; fmove, fcmove\n+(define_insn_reservation \"r24kx_fmove\" 4 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (eq_attr \"type\" \"fmove,condmove\"))\n+  \"r24kx_fpu_iss\")\n+\n+;; fload\n+(define_insn_reservation \"r24kx_fload\" 3 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (eq_attr \"type\" \"fpload,fpidxload\"))\n+  \"r24kx_fpu_iss\")\n+\n+;; fstore\n+(define_insn_reservation \"r24kx_fstore\" 1 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (eq_attr \"type\" \"fpstore\"))\n+  \"r24kx_fpu_iss\")\n+\n+;; fmul, fmadd\n+(define_insn_reservation \"r24kx_fmul_sf\" 4 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (and (eq_attr \"type\" \"fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"r24kx_fpu_iss\")\n+\n+(define_insn_reservation \"r24kx_fmul_df\" 5 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (and (eq_attr \"type\" \"fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r24kx_fpu_iss,r24k_fpu_arith\")\n+\n+\n+;; fdiv, fsqrt, frsqrt\n+(define_insn_reservation \"r24kx_fdiv_sf\" 17 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt,frsqrt\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"r24kx_fpu_iss,(r24k_fpu_arith*13)\")\n+\n+(define_insn_reservation \"r24kx_fdiv_df\" 32 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r24kx_fpu_iss,(r24k_fpu_arith*28)\")\n+\n+;; frsqrt\n+(define_insn_reservation \"r24kx_frsqrt_df\" 35 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r24kx_fpu_iss,(r24k_fpu_arith*30)\")\n+\n+;; fcmp\n+(define_insn_reservation \"r24kx_fcmp\" 2 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (eq_attr \"type\" \"fcmp\"))\n+  \"r24kx_fpu_iss\")\n+\n+;; fcmp -> movf.fmt & movt.fmt bypass (dependency must be on the condition)\n+(define_bypass 1 \"r24kx_fcmp\" \"r24kx_fmove\")\n+\n+;; fcvt (cvt.d.s, cvt.[sd].[wl])\n+(define_insn_reservation \"r24kx_fcvt_i2f_s2d\" 4 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (and (eq_attr \"type\" \"fcvt\")\n+\t    (eq_attr \"cnv_mode\" \"I2S,I2D,S2D\")))\n+  \"r24kx_fpu_iss\")\n+\n+;; fcvt (cvt.s.d)\n+(define_insn_reservation \"r24kx_fcvt_s2d\" 6 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (and (eq_attr \"type\" \"fcvt\")\n+\t    (eq_attr \"cnv_mode\" \"D2S\")))\n+  \"r24kx_fpu_iss\")\n+\n+;; fcvt (cvt.[wl].[sd], etc)\n+(define_insn_reservation \"r24kx_fcvt_f2i\" 5 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (and (eq_attr \"type\" \"fcvt\")\n+\t    (eq_attr \"cnv_mode\" \"S2I,D2I\")))\n+  \"r24kx_fpu_iss\")\n+\n+;; fxfer (mfc1, mfhc1, mtc1, mthc1)\n+(define_insn_reservation \"r24kx_fxfer\" 2 \n+  (and (eq_attr \"cpu\" \"24kx\")\n+       (eq_attr \"type\" \"xfer\"))\n+  \"r24kx_fpu_iss\")\n+\n+;; --------------------------------------------------------------\n+;; Bypass to Consumer\n+;; --------------------------------------------------------------\n+;; r24kx_fcvt_f2i->l/s base : 6 cycles\n+;; r24kx_fcvt_f2i->prefetch : 6 cycles\n+(define_bypass 6 \"r24kx_fcvt_f2i\" \"r24k_int_load\")\n+(define_bypass 6 \"r24kx_fcvt_f2i\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+(define_bypass 6 \"r24kx_fcvt_f2i\" \"r24k_int_prefetch\")\n+\n+;; r24kx_fxfer->l/s base : 3 cycles\n+;; r24kx_fxfer->prefetch : 3 cycles\n+(define_bypass 3 \"r24kx_fxfer\" \"r24k_int_load\")\n+(define_bypass 3 \"r24kx_fxfer\" \"r24k_int_store\" \"!store_data_bypass_p\")\n+(define_bypass 3 \"r24kx_fxfer\" \"r24k_int_prefetch\")\n+"}, {"sha": "622f7045dc6146e7574502d7bb2463a4574e1f0b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880986c1acd57c72dc9f59c6927c09074da882b5/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880986c1acd57c72dc9f59c6927c09074da882b5/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=880986c1acd57c72dc9f59c6927c09074da882b5", "patch": "@@ -699,6 +699,10 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n \n   /* MIPS32 Release 2 */\n   { \"m4k\", PROCESSOR_M4K, 33 },\n+  { \"24k\", PROCESSOR_24K, 33 },\n+  { \"24kc\", PROCESSOR_24K, 33 },  /* 24K  no FPU */\n+  { \"24kf\", PROCESSOR_24K, 33 },  /* 24K 1:2 FPU */\n+  { \"24kx\", PROCESSOR_24KX, 33 }, /* 24K 1:1 FPU */\n \n   /* MIPS64 */\n   { \"5kc\", PROCESSOR_5KC, 64 },"}, {"sha": "91a3b0bd3831136ee3590a2cdced613e7a8134a4", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880986c1acd57c72dc9f59c6927c09074da882b5/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880986c1acd57c72dc9f59c6927c09074da882b5/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=880986c1acd57c72dc9f59c6927c09074da882b5", "patch": "@@ -36,6 +36,8 @@ enum processor_type {\n   PROCESSOR_4KC,\n   PROCESSOR_5KC,\n   PROCESSOR_20KC,\n+  PROCESSOR_24K,\n+  PROCESSOR_24KX,\n   PROCESSOR_M4K,\n   PROCESSOR_R3000,\n   PROCESSOR_R3900,"}, {"sha": "90a73054998fb48c20d58308fc0cc5e439d28c6e", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880986c1acd57c72dc9f59c6927c09074da882b5/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880986c1acd57c72dc9f59c6927c09074da882b5/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=880986c1acd57c72dc9f59c6927c09074da882b5", "patch": "@@ -157,6 +157,17 @@\n (define_attr \"mode\" \"unknown,none,QI,HI,SI,DI,SF,DF,FPSW\"\n   (const_string \"unknown\"))\n \n+;; Mode for conversion types (fcvt)\n+;; I2S          integer to float single (SI/DI to SF)\n+;; I2D          integer to float double (SI/DI to DF)\n+;; S2I          float to integer (SF to SI/DI)\n+;; D2I          float to integer (DF to SI/DI)\n+;; D2S          double to float single\n+;; S2D          float single to double\n+\n+(define_attr \"cnv_mode\" \"unknown,I2S,I2D,S2I,D2I,D2S,S2D\" \n+  (const_string \"unknown\"))\n+\n ;; Is this an extended instruction in mips16 mode?\n (define_attr \"extended_mips16\" \"no,yes\"\n   (const_string \"no\"))\n@@ -254,7 +265,7 @@\n ;; Attribute describing the processor.  This attribute must match exactly\n ;; with the processor_type enumeration in mips.h.\n (define_attr \"cpu\"\n-  \"default,4kc,5kc,20kc,m4k,r3000,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sr71000\"\n+  \"default,4kc,5kc,20kc,24k,24kx,m4k,r3000,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sr71000\"\n   (const (symbol_ref \"mips_tune\")))\n \n ;; The type of hardware hazard associated with this instruction.\n@@ -488,6 +499,7 @@\n (define_cpu_unit \"alu\" \"alu\")\n (define_cpu_unit \"imuldiv\" \"imuldiv\")\n \n+(include \"24k.md\")\n (include \"3000.md\")\n (include \"4000.md\")\n (include \"4100.md\")\n@@ -2140,6 +2152,7 @@ beq\\t%2,%.,1b\\;\\\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n   \"cvt.s.d\\t%0,%1\"\n   [(set_attr \"type\"\t\"fcvt\")\n+   (set_attr \"cnv_mode\"\t\"D2S\")   \n    (set_attr \"mode\"\t\"SF\")])\n \n ;; Integer truncation patterns.  Truncating SImode values to smaller\n@@ -2454,6 +2467,7 @@ beq\\t%2,%.,1b\\;\\\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n   \"cvt.d.s\\t%0,%1\"\n   [(set_attr \"type\"\t\"fcvt\")\n+   (set_attr \"cnv_mode\"\t\"S2D\")   \n    (set_attr \"mode\"\t\"DF\")])\n \f\n ;;\n@@ -2482,6 +2496,7 @@ beq\\t%2,%.,1b\\;\\\n   \"trunc.w.d %0,%1\"\n   [(set_attr \"type\"\t\"fcvt\")\n    (set_attr \"mode\"\t\"DF\")\n+   (set_attr \"cnv_mode\"\t\"D2I\")\n    (set_attr \"length\"\t\"4\")])\n \n (define_insn \"fix_truncdfsi2_macro\"\n@@ -2497,6 +2512,7 @@ beq\\t%2,%.,1b\\;\\\n }\n   [(set_attr \"type\"\t\"fcvt\")\n    (set_attr \"mode\"\t\"DF\")\n+   (set_attr \"cnv_mode\"\t\"D2I\")\n    (set_attr \"length\"\t\"36\")])\n \n (define_expand \"fix_truncsfsi2\"\n@@ -2517,7 +2533,8 @@ beq\\t%2,%.,1b\\;\\\n   \"TARGET_HARD_FLOAT && ISA_HAS_TRUNC_W\"\n   \"trunc.w.s %0,%1\"\n   [(set_attr \"type\"\t\"fcvt\")\n-   (set_attr \"mode\"\t\"DF\")\n+   (set_attr \"mode\"\t\"SF\")\n+   (set_attr \"cnv_mode\"\t\"S2I\")\n    (set_attr \"length\"\t\"4\")])\n \n (define_insn \"fix_truncsfsi2_macro\"\n@@ -2532,7 +2549,8 @@ beq\\t%2,%.,1b\\;\\\n     return \"trunc.w.s %0,%1,%2\";\n }\n   [(set_attr \"type\"\t\"fcvt\")\n-   (set_attr \"mode\"\t\"DF\")\n+   (set_attr \"mode\"\t\"SF\")\n+   (set_attr \"cnv_mode\"\t\"S2I\")\n    (set_attr \"length\"\t\"36\")])\n \n \n@@ -2543,6 +2561,7 @@ beq\\t%2,%.,1b\\;\\\n   \"trunc.l.d %0,%1\"\n   [(set_attr \"type\"\t\"fcvt\")\n    (set_attr \"mode\"\t\"DF\")\n+   (set_attr \"cnv_mode\"\t\"D2I\")\n    (set_attr \"length\"\t\"4\")])\n \n \n@@ -2553,6 +2572,7 @@ beq\\t%2,%.,1b\\;\\\n   \"trunc.l.s %0,%1\"\n   [(set_attr \"type\"\t\"fcvt\")\n    (set_attr \"mode\"\t\"SF\")\n+   (set_attr \"cnv_mode\"\t\"S2I\")\n    (set_attr \"length\"\t\"4\")])\n \n \n@@ -2563,6 +2583,7 @@ beq\\t%2,%.,1b\\;\\\n   \"cvt.d.w\\t%0,%1\"\n   [(set_attr \"type\"\t\"fcvt\")\n    (set_attr \"mode\"\t\"DF\")\n+   (set_attr \"cnv_mode\"\t\"I2D\")   \n    (set_attr \"length\"\t\"4\")])\n \n \n@@ -2573,6 +2594,7 @@ beq\\t%2,%.,1b\\;\\\n   \"cvt.d.l\\t%0,%1\"\n   [(set_attr \"type\"\t\"fcvt\")\n    (set_attr \"mode\"\t\"DF\")\n+   (set_attr \"cnv_mode\"\t\"I2D\")   \n    (set_attr \"length\"\t\"4\")])\n \n \n@@ -2583,6 +2605,7 @@ beq\\t%2,%.,1b\\;\\\n   \"cvt.s.w\\t%0,%1\"\n   [(set_attr \"type\"\t\"fcvt\")\n    (set_attr \"mode\"\t\"SF\")\n+   (set_attr \"cnv_mode\"\t\"I2S\")   \n    (set_attr \"length\"\t\"4\")])\n \n \n@@ -2593,6 +2616,7 @@ beq\\t%2,%.,1b\\;\\\n   \"cvt.s.l\\t%0,%1\"\n   [(set_attr \"type\"\t\"fcvt\")\n    (set_attr \"mode\"\t\"SF\")\n+   (set_attr \"cnv_mode\"\t\"I2S\")   \n    (set_attr \"length\"\t\"4\")])\n \n "}]}