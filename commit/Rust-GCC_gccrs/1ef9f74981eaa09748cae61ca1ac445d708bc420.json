{"sha": "1ef9f74981eaa09748cae61ca1ac445d708bc420", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVmOWY3NDk4MWVhYTA5NzQ4Y2FlNjFjYTFhYzQ0NWQ3MDhiYzQyMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-03-11T09:00:13Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-11T09:00:13Z"}, "message": "exception.cc (__check_null_eh_spec): New fn.\n\n        * exception.cc (__check_null_eh_spec): New fn.\n        * except.c (expand_end_eh_spec): Call it if the spec is throw().\n\nFrom-SVN: r32480", "tree": {"sha": "29e5fc3f2a154b2cf3626e127d81c7e810b54cd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29e5fc3f2a154b2cf3626e127d81c7e810b54cd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ef9f74981eaa09748cae61ca1ac445d708bc420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef9f74981eaa09748cae61ca1ac445d708bc420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef9f74981eaa09748cae61ca1ac445d708bc420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef9f74981eaa09748cae61ca1ac445d708bc420/comments", "author": null, "committer": null, "parents": [{"sha": "8d2daaa79cad720c8ab5a9f5dee5d008aee46dbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2daaa79cad720c8ab5a9f5dee5d008aee46dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d2daaa79cad720c8ab5a9f5dee5d008aee46dbf"}], "stats": {"total": 88, "additions": 60, "deletions": 28}, "files": [{"sha": "f495735965a054953ac8a52852eaf0787ea280ef", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef9f74981eaa09748cae61ca1ac445d708bc420/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef9f74981eaa09748cae61ca1ac445d708bc420/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1ef9f74981eaa09748cae61ca1ac445d708bc420", "patch": "@@ -1,3 +1,8 @@\n+2000-03-11  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* exception.cc (__check_null_eh_spec): New fn.\n+\t* except.c (expand_end_eh_spec): Call it if the spec is throw().\n+\n 2000-03-10  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* decl.c (push_throw_library_fn): Take the FUNCTION_TYPE."}, {"sha": "d069b2cd16119639fa91d0bcaa97c3f051727d39", "filename": "gcc/cp/except.c", "status": "modified", "additions": 46, "deletions": 27, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef9f74981eaa09748cae61ca1ac445d708bc420/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef9f74981eaa09748cae61ca1ac445d708bc420/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=1ef9f74981eaa09748cae61ca1ac445d708bc420", "patch": "@@ -690,42 +690,61 @@ expand_end_eh_spec (raises, try_block)\n   handler = begin_handler ();\n   blocks = finish_handler_parms (NULL_TREE, handler);\n \n-  /* Build up an array of type_infos.  */\n-  for (; raises && TREE_VALUE (raises); raises = TREE_CHAIN (raises))\n+  if (TREE_VALUE (raises) == NULL_TREE)\n     {\n-      types = tree_cons\n-\t(NULL_TREE, build_eh_type_type (TREE_VALUE (raises)), types);\n-      ++count;\n+      fn = get_identifier (\"__check_null_eh_spec\");\n+      if (IDENTIFIER_GLOBAL_VALUE (fn))\n+\tfn = IDENTIFIER_GLOBAL_VALUE (fn);\n+      else\n+\t{\n+\t  tmp = build_function_type (void_type_node, void_list_node);\n+\t  fn = push_throw_library_fn (fn, tmp);\n+\t  /* Since the spec doesn't allow any exceptions, this call\n+\t     will never throw.  */\n+\t  TREE_NOTHROW (fn) = 1;\n+\t}\n+      tmp = NULL_TREE;\n     }\n+  else\n+    {\n+      /* Build up an array of type_infos.  */\n+      for (; raises && TREE_VALUE (raises); raises = TREE_CHAIN (raises))\n+\t{\n+\t  types = tree_cons\n+\t    (NULL_TREE, build_eh_type_type (TREE_VALUE (raises)), types);\n+\t  ++count;\n+\t}\n \n-  types = build_nt (CONSTRUCTOR, NULL_TREE, types);\n-  TREE_HAS_CONSTRUCTOR (types) = 1;\n+      types = build_nt (CONSTRUCTOR, NULL_TREE, types);\n+      TREE_HAS_CONSTRUCTOR (types) = 1;\n \n-  /* We can't pass the CONSTRUCTOR directly, so stick it in a variable.  */\n-  tmp = build_cplus_array_type (const_ptr_type_node, NULL_TREE);\n-  decl = build_decl (VAR_DECL, NULL_TREE, tmp);\n-  DECL_ARTIFICIAL (decl) = 1;\n-  DECL_INITIAL (decl) = types;\n-  DECL_CONTEXT (decl) = current_function_decl;\n-  cp_finish_decl (decl, types, NULL_TREE, 0);\n+      /* We can't pass the CONSTRUCTOR directly, so stick it in a variable.  */\n+      tmp = build_cplus_array_type (const_ptr_type_node, NULL_TREE);\n+      decl = build_decl (VAR_DECL, NULL_TREE, tmp);\n+      DECL_ARTIFICIAL (decl) = 1;\n+      DECL_INITIAL (decl) = types;\n+      DECL_CONTEXT (decl) = current_function_decl;\n+      cp_finish_decl (decl, types, NULL_TREE, 0);\n \n-  decl = decay_conversion (decl);\n+      decl = decay_conversion (decl);\n \n-  fn = get_identifier (\"__check_eh_spec\");\n-  if (IDENTIFIER_GLOBAL_VALUE (fn))\n-    fn = IDENTIFIER_GLOBAL_VALUE (fn);\n-  else\n-    {\n-      tmp = tree_cons\n-\t(NULL_TREE, integer_type_node, tree_cons\n-\t (NULL_TREE, TREE_TYPE (decl), void_list_node));\n-      tmp = build_function_type (void_type_node, tmp);\n+      fn = get_identifier (\"__check_eh_spec\");\n+      if (IDENTIFIER_GLOBAL_VALUE (fn))\n+\tfn = IDENTIFIER_GLOBAL_VALUE (fn);\n+      else\n+\t{\n+\t  tmp = tree_cons\n+\t    (NULL_TREE, integer_type_node, tree_cons\n+\t     (NULL_TREE, TREE_TYPE (decl), void_list_node));\n+\t  tmp = build_function_type (void_type_node, tmp);\n+\n+\t  fn = push_throw_library_fn (fn, tmp);\n+\t}\n \n-      fn = push_throw_library_fn (fn, tmp);\n+      tmp = tree_cons (NULL_TREE, build_int_2 (count, 0), \n+\t\t       tree_cons (NULL_TREE, decl, NULL_TREE));\n     }\n \n-  tmp = tree_cons (NULL_TREE, build_int_2 (count, 0), \n-\t\t   tree_cons (NULL_TREE, decl, NULL_TREE));\n   tmp = build_call (fn, tmp);\n   finish_expr_stmt (tmp);\n "}, {"sha": "b7d6a64b2aed67cf0d68e449407e5b0e49a4cc5e", "filename": "gcc/cp/exception.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef9f74981eaa09748cae61ca1ac445d708bc420/gcc%2Fcp%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef9f74981eaa09748cae61ca1ac445d708bc420/gcc%2Fcp%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexception.cc?ref=1ef9f74981eaa09748cae61ca1ac445d708bc420", "patch": "@@ -1,5 +1,5 @@\n // Functions for Exception Support for -*- C++ -*-\n-// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999 Free Software Foundation\n+// Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000 Free Software Foundation\n \n // This file is part of GNU CC.\n \n@@ -321,6 +321,14 @@ __check_eh_spec (int n, const void **spec)\n     }\n }\n \n+/* Special case of the above for throw() specs.  */\n+\n+extern \"C\" void\n+__check_null_eh_spec (void)\n+{\n+  __check_eh_spec (0, 0);\n+}\n+\n // Helpers for rtti. Although these don't return, we give them return types so\n // that the type system is not broken.\n "}]}