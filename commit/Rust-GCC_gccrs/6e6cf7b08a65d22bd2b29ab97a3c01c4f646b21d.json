{"sha": "6e6cf7b08a65d22bd2b29ab97a3c01c4f646b21d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU2Y2Y3YjA4YTY1ZDIyYmQyYjI5YWI5N2EzYzAxYzRmNjQ2YjIxZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-01-26T11:05:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-01-26T11:05:03Z"}, "message": "re PR middle-end/79236 (Many libgomp tests fail if configured with --enable-offload-targets=nvptx-none but NVidia HW or libcuda.so.1 unavailable)\n\n\tPR middle-end/79236\n\t* omp-low.c (struct omp_context): Add simt_stmt field.\n\t(scan_omp_for): Return omp_context *.\n\t(scan_omp_simd): Set simt_stmt on the non-_simt_ SIMD\n\tcontext to the _simt_ SIMD stmt.\n\t(lower_omp_for): For combined SIMD with sibling _simt_\n\tSIMD, make sure to use the same decls in _looptemp_\n\tclauses as in the sibling.\n\nFrom-SVN: r244924", "tree": {"sha": "10998d776c93f5205116cccd29a4e86b287cae88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10998d776c93f5205116cccd29a4e86b287cae88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e6cf7b08a65d22bd2b29ab97a3c01c4f646b21d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e6cf7b08a65d22bd2b29ab97a3c01c4f646b21d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e6cf7b08a65d22bd2b29ab97a3c01c4f646b21d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e6cf7b08a65d22bd2b29ab97a3c01c4f646b21d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebff5c3f80a14e07a0507166fe8a42014fe72f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebff5c3f80a14e07a0507166fe8a42014fe72f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebff5c3f80a14e07a0507166fe8a42014fe72f6e"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "f485bb37255d482e10ca3f6c29932399cd782f2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6cf7b08a65d22bd2b29ab97a3c01c4f646b21d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6cf7b08a65d22bd2b29ab97a3c01c4f646b21d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e6cf7b08a65d22bd2b29ab97a3c01c4f646b21d", "patch": "@@ -1,3 +1,14 @@\n+2017-01-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/79236\n+\t* omp-low.c (struct omp_context): Add simt_stmt field.\n+\t(scan_omp_for): Return omp_context *.\n+\t(scan_omp_simd): Set simt_stmt on the non-_simt_ SIMD\n+\tcontext to the _simt_ SIMD stmt.\n+\t(lower_omp_for): For combined SIMD with sibling _simt_\n+\tSIMD, make sure to use the same decls in _looptemp_\n+\tclauses as in the sibling.\n+\n 2017-01-26  David Sherwood  <david.sherwood@arm.com>\n \n \tPR middle-end/79212"}, {"sha": "ff0f4477cd774f0e9c2eb6df14ffb16e942d770c", "filename": "gcc/omp-low.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6cf7b08a65d22bd2b29ab97a3c01c4f646b21d/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6cf7b08a65d22bd2b29ab97a3c01c4f646b21d/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=6e6cf7b08a65d22bd2b29ab97a3c01c4f646b21d", "patch": "@@ -108,6 +108,10 @@ struct omp_context\n      barriers should jump to during omplower pass.  */\n   tree cancel_label;\n \n+  /* The sibling GIMPLE_OMP_FOR simd with _simt_ clause or NULL\n+     otherwise.  */\n+  gimple *simt_stmt;\n+\n   /* What to do with variables with implicitly determined sharing\n      attributes.  */\n   enum omp_clause_default_kind default_kind;\n@@ -2127,7 +2131,7 @@ check_oacc_kernel_gwv (gomp_for *stmt, omp_context *ctx)\n \n /* Scan a GIMPLE_OMP_FOR.  */\n \n-static void\n+static omp_context *\n scan_omp_for (gomp_for *stmt, omp_context *outer_ctx)\n {\n   omp_context *ctx;\n@@ -2200,6 +2204,7 @@ scan_omp_for (gomp_for *stmt, omp_context *outer_ctx)\n       scan_omp_op (gimple_omp_for_incr_ptr (stmt, i), ctx);\n     }\n   scan_omp (gimple_omp_body_ptr (stmt), ctx);\n+  return ctx;\n }\n \n /* Duplicate #pragma omp simd, one for SIMT, another one for SIMD.  */\n@@ -2241,7 +2246,7 @@ scan_omp_simd (gimple_stmt_iterator *gsi, gomp_for *stmt,\n   gimple_bind_set_body (bind, seq);\n   update_stmt (bind);\n   scan_omp_for (new_stmt, outer_ctx);\n-  scan_omp_for (stmt, outer_ctx);\n+  scan_omp_for (stmt, outer_ctx)->simt_stmt = new_stmt;\n }\n \n /* Scan an OpenMP sections directive.  */\n@@ -6750,11 +6755,15 @@ lower_omp_for (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t= (gimple_omp_for_kind (stmt) == GF_OMP_FOR_KIND_FOR\n \t   || gimple_omp_for_kind (stmt) == GF_OMP_FOR_KIND_TASKLOOP);\n       tree outerc = NULL, *pc = gimple_omp_for_clauses_ptr (stmt);\n+      tree simtc = NULL;\n       tree clauses = *pc;\n       if (taskreg_for)\n \touterc\n \t  = omp_find_clause (gimple_omp_taskreg_clauses (ctx->outer->stmt),\n \t\t\t     OMP_CLAUSE__LOOPTEMP_);\n+      if (ctx->simt_stmt)\n+\tsimtc = omp_find_clause (gimple_omp_for_clauses (ctx->simt_stmt),\n+\t\t\t\t OMP_CLAUSE__LOOPTEMP_);\n       for (i = 0; i < count; i++)\n \t{\n \t  tree temp;\n@@ -6767,12 +6776,22 @@ lower_omp_for (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t    }\n \t  else\n \t    {\n-\t      temp = create_tmp_var (type);\n+\t      /* If there are 2 adjacent SIMD stmts, one with _simt_\n+\t\t clause, another without, make sure they have the same\n+\t\t decls in _looptemp_ clauses, because the outer stmt\n+\t\t they are combined into will look up just one inner_stmt.  */\n+\t      if (ctx->simt_stmt)\n+\t\ttemp = OMP_CLAUSE_DECL (simtc);\n+\t      else\n+\t\ttemp = create_tmp_var (type);\n \t      insert_decl_map (&ctx->outer->cb, temp, temp);\n \t    }\n \t  *pc = build_omp_clause (UNKNOWN_LOCATION, OMP_CLAUSE__LOOPTEMP_);\n \t  OMP_CLAUSE_DECL (*pc) = temp;\n \t  pc = &OMP_CLAUSE_CHAIN (*pc);\n+\t  if (ctx->simt_stmt)\n+\t    simtc = omp_find_clause (OMP_CLAUSE_CHAIN (simtc),\n+\t\t\t\t     OMP_CLAUSE__LOOPTEMP_);\n \t}\n       *pc = clauses;\n     }"}]}