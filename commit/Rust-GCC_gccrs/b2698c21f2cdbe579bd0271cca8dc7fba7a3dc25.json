{"sha": "b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI2OThjMjFmMmNkYmU1NzliZDAyNzFjY2E4ZGM3ZmJhN2EzZGMyNQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-15T00:16:34Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-15T00:16:34Z"}, "message": "Daily bump.", "tree": {"sha": "16a377bca84070965c6a2acf63e66daaa77ff96c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16a377bca84070965c6a2acf63e66daaa77ff96c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/comments", "author": null, "committer": null, "parents": [{"sha": "28774a6015261a100c426d206154a98c0ca215ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28774a6015261a100c426d206154a98c0ca215ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28774a6015261a100c426d206154a98c0ca215ce"}], "stats": {"total": 568, "additions": 567, "deletions": 1}, "files": [{"sha": "0671f2b91da98499c29ffa63a7b3e1f238b4fdae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 234, "deletions": 0, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "patch": "@@ -1,3 +1,237 @@\n+2020-10-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97391\n+\t* builtins.c (gimple_parm_array_size): Peel off one less layer\n+\tof array types.\n+\n+2020-10-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/97413\n+\t* attribs.c (init_attr_rdwr_indices): Unwrap extra list layer.\n+\n+2020-10-14  Sunil K Pandey  <skpgkp2@gmail.com>\n+\n+\tPR target/95483\n+\t* config/i386/avx2intrin.h (_mm_broadcastsi128_si256): New intrinsics.\n+\t(_mm_broadcastsd_pd): Ditto.\n+\t* config/i386/avx512bwintrin.h (_mm512_loadu_epi16): New intrinsics.\n+\t(_mm512_storeu_epi16): Ditto.\n+\t(_mm512_loadu_epi8): Ditto.\n+\t(_mm512_storeu_epi8): Ditto.\n+\t* config/i386/avx512dqintrin.h (_mm_reduce_round_sd): New intrinsics.\n+\t(_mm_mask_reduce_round_sd): Ditto.\n+\t(_mm_maskz_reduce_round_sd): Ditto.\n+\t(_mm_reduce_round_ss): Ditto.\n+\t(_mm_mask_reduce_round_ss): Ditto.\n+\t(_mm_maskz_reduce_round_ss): Ditto.\n+\t(_mm512_reduce_round_pd): Ditto.\n+\t(_mm512_mask_reduce_round_pd): Ditto.\n+\t(_mm512_maskz_reduce_round_pd): Ditto.\n+\t(_mm512_reduce_round_ps): Ditto.\n+\t(_mm512_mask_reduce_round_ps): Ditto.\n+\t(_mm512_maskz_reduce_round_ps): Ditto.\n+\t* config/i386/avx512erintrin.h\n+\t(_mm_mask_rcp28_round_sd): New intrinsics.\n+\t(_mm_maskz_rcp28_round_sd): Ditto.\n+\t(_mm_mask_rcp28_round_ss): Ditto.\n+\t(_mm_maskz_rcp28_round_ss): Ditto.\n+\t(_mm_mask_rsqrt28_round_sd): Ditto.\n+\t(_mm_maskz_rsqrt28_round_sd): Ditto.\n+\t(_mm_mask_rsqrt28_round_ss): Ditto.\n+\t(_mm_maskz_rsqrt28_round_ss): Ditto.\n+\t(_mm_mask_rcp28_sd): Ditto.\n+\t(_mm_maskz_rcp28_sd): Ditto.\n+\t(_mm_mask_rcp28_ss): Ditto.\n+\t(_mm_maskz_rcp28_ss): Ditto.\n+\t(_mm_mask_rsqrt28_sd): Ditto.\n+\t(_mm_maskz_rsqrt28_sd): Ditto.\n+\t(_mm_mask_rsqrt28_ss): Ditto.\n+\t(_mm_maskz_rsqrt28_ss): Ditto.\n+\t* config/i386/avx512fintrin.h (_mm_mask_sqrt_sd): New intrinsics.\n+\t(_mm_maskz_sqrt_sd): Ditto.\n+\t(_mm_mask_sqrt_ss): Ditto.\n+\t(_mm_maskz_sqrt_ss): Ditto.\n+\t(_mm_mask_scalef_sd): Ditto.\n+\t(_mm_maskz_scalef_sd): Ditto.\n+\t(_mm_mask_scalef_ss): Ditto.\n+\t(_mm_maskz_scalef_ss): Ditto.\n+\t(_mm_mask_cvt_roundsd_ss): Ditto.\n+\t(_mm_maskz_cvt_roundsd_ss): Ditto.\n+\t(_mm_mask_cvt_roundss_sd): Ditto.\n+\t(_mm_maskz_cvt_roundss_sd): Ditto.\n+\t(_mm_mask_cvtss_sd): Ditto.\n+\t(_mm_maskz_cvtss_sd): Ditto.\n+\t(_mm_mask_cvtsd_ss): Ditto.\n+\t(_mm_maskz_cvtsd_ss): Ditto.\n+\t(_mm512_cvtsi512_si32): Ditto.\n+\t(_mm_cvtsd_i32): Ditto.\n+\t(_mm_cvtss_i32): Ditto.\n+\t(_mm_cvti32_sd): Ditto.\n+\t(_mm_cvti32_ss): Ditto.\n+\t(_mm_cvtsd_i64): Ditto.\n+\t(_mm_cvtss_i64): Ditto.\n+\t(_mm_cvti64_sd): Ditto.\n+\t(_mm_cvti64_ss): Ditto.\n+\t* config/i386/avx512vlbwintrin.h (_mm256_storeu_epi8): New intrinsics.\n+\t(_mm_storeu_epi8): Ditto.\n+\t(_mm256_loadu_epi16): Ditto.\n+\t(_mm_loadu_epi16): Ditto.\n+\t(_mm256_loadu_epi8): Ditto.\n+\t(_mm_loadu_epi8): Ditto.\n+\t(_mm256_storeu_epi16): Ditto.\n+\t(_mm_storeu_epi16): Ditto.\n+\t* config/i386/avx512vlintrin.h (_mm256_load_epi64): New intrinsics.\n+\t(_mm_load_epi64): Ditto.\n+\t(_mm256_load_epi32): Ditto.\n+\t(_mm_load_epi32): Ditto.\n+\t(_mm256_store_epi32): Ditto.\n+\t(_mm_store_epi32): Ditto.\n+\t(_mm256_loadu_epi64): Ditto.\n+\t(_mm_loadu_epi64): Ditto.\n+\t(_mm256_loadu_epi32): Ditto.\n+\t(_mm_loadu_epi32): Ditto.\n+\t(_mm256_mask_cvt_roundps_ph): Ditto.\n+\t(_mm256_maskz_cvt_roundps_ph): Ditto.\n+\t(_mm_mask_cvt_roundps_ph): Ditto.\n+\t(_mm_maskz_cvt_roundps_ph): Ditto.\n+\t* config/i386/avxintrin.h (_mm256_cvtsi256_si32): New intrinsics.\n+\t* config/i386/emmintrin.h (_mm_loadu_si32): New intrinsics.\n+\t(_mm_loadu_si16): Ditto.\n+\t(_mm_storeu_si32): Ditto.\n+\t(_mm_storeu_si16): Ditto.\n+\t* config/i386/i386-builtin-types.def\n+\t(V8DF_FTYPE_V8DF_INT_V8DF_UQI_INT): Add new type.\n+\t(V16SF_FTYPE_V16SF_INT_V16SF_UHI_INT): Ditto.\n+\t(V4SF_FTYPE_V4SF_V2DF_V4SF_UQI_INT): Ditto.\n+\t(V2DF_FTYPE_V2DF_V4SF_V2DF_UQI_INT): Ditto.\n+\t* config/i386/i386-builtin.def\n+\t(__builtin_ia32_cvtsd2ss_mask_round): New builtin.\n+\t(__builtin_ia32_cvtss2sd_mask_round): Ditto.\n+\t(__builtin_ia32_rcp28sd_mask_round): Ditto.\n+\t(__builtin_ia32_rcp28ss_mask_round): Ditto.\n+\t(__builtin_ia32_rsqrt28sd_mask_round): Ditto.\n+\t(__builtin_ia32_rsqrt28ss_mask_round): Ditto.\n+\t(__builtin_ia32_reducepd512_mask_round): Ditto.\n+\t(__builtin_ia32_reduceps512_mask_round): Ditto.\n+\t(__builtin_ia32_reducesd_mask_round): Ditto.\n+\t(__builtin_ia32_reducess_mask_round): Ditto.\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_round_builtin): Expand round builtin for new type.\n+\t(V8DF_FTYPE_V8DF_INT_V8DF_UQI_INT)\n+\t(V16SF_FTYPE_V16SF_INT_V16SF_UHI_INT)\n+\t(V4SF_FTYPE_V4SF_V2DF_V4SF_UQI_INT)\n+\t(V2DF_FTYPE_V2DF_V4SF_V2DF_UQI_INT)\n+\t* config/i386/mmintrin.h ()\n+\tDefine datatype __m32 and __m16.\n+\tDefine datatype __m32_u and __m16_u.\n+\t* config/i386/sse.md: Adjust pattern.\n+\t(<mask_codefor>reducep<mode><mask_name><round_saeonly_name>): Adjust.\n+\t(reduces<mode><mask_scalar_name><round_saeonly_scalar_name>): Ditto.\n+\t(sse2_cvtsd2ss<mask_name><round_name>): Ditto.\n+\t(sse2_cvtss2sd<mask_name><round_saeonly_name>): Ditto.\n+\t(avx512er_vmrcp28<mode><mask_name><round_saeonly_name>): Ditto.\n+\t(avx512er_vmrsqrt28<mode><mask_name><round_saeonly_name>): Ditto.\n+\n+2020-10-14  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/arm/vxworks.h (TARGET_OS_CPP_BUILTINS): Fix\n+\tthe VX_CPU selection for -mcpu=xscale on arm-vxworks.\n+\n+2020-10-14  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/rs6000/vxworks.h (TARGET_OS_CPP_BUILTINS): Accommodate\n+\texpectations from different versions of VxWorks, for 32 or 64bit\n+\tconfigurations.\n+\n+2020-10-14  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks.h: #undef CPLUSPLUS_CPP_SPEC.\n+\n+2020-10-14  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/t-vxworks: Adjust the VxWorks alternative LIMITS_H guard\n+\tfor glimits.h, make it both closer to the previous one and easier to\n+\tsearch for.\n+\n+2020-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/97387\n+\t* config/i386/i386.md (CC_CCC): New mode iterator.\n+\t(*setcc_qi_addqi3_cconly_overflow_1_<mode>): New\n+\tdefine_insn_and_split.\n+\t* config/i386/i386.c (ix86_cc_mode): Return CCCmode\n+\tfor *setcc_qi_addqi3_cconly_overflow_1_<mode> pattern operands.\n+\t(ix86_rtx_costs): Return true and *total = 0;\n+\tfor *setcc_qi_addqi3_cconly_overflow_1_<mode> pattern.  Use op0 and\n+\top1 temporaries to simplify COMPARE checks.\n+\n+2020-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97396\n+\t* gimple-range.cc (gimple_ranger::range_of_phi): Do not call\n+\trange_of_ssa_name_with_loop_info with the loop tree root.\n+\n+2020-10-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Split out\n+\ttest for compatible operand types.\n+\n+2020-10-14  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxworks.c (vxworks_override_options): Guard pic checks with\n+\tflag_pic > 0 instead of just flag_pic.\n+\n+2020-10-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-fnsummary.c (remap_edge_summaries): Make offset_map HOST_WIDE_INT.\n+\t(remap_freqcounting_predicate): Likewise.\n+\t(ipa_merge_fn_summary_after_inlining): Likewise.\n+\t* ipa-predicate.c (predicate::remap_after_inlining): Likewise\n+\t* ipa-predicate.h (remap_after_inlining): Update.\n+\n+2020-10-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.c (compute_parm_map): Handle POINTER_PLUS_EXPR in\n+\tPASSTHROUGH.\n+\n+2020-10-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_get_and_check_slp_defs): Move\n+\tcheck for duplicate/interleave of variable size constants\n+\tto a place done once and early.\n+\t(vect_build_slp_tree_2): Adjust heuristics when to build\n+\ta BB SLP node from scalars.\n+\n+2020-10-14  Tom de Vries  <tdevries@suse.de>\n+\n+\t* tracer.c (cached_can_duplicate_bb_p, analyze_bb): Use\n+\tcan_duplicate_block_p.\n+\t(can_duplicate_insn_p, can_duplicate_bb_no_insn_iter_p)\n+\t(can_duplicate_bb_p): Move and merge ...\n+\t* tree-cfg.c (gimple_can_duplicate_bb_p): ... here.\n+\n+2020-10-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* doc/invoke.texi: (ipa-jump-function-lookups): Document param.\n+\t* ipa-modref.c (merge_call_side_effects): Use\n+\tunadjusted_ptr_and_unit_offset.\n+\t* ipa-prop.c (unadjusted_ptr_and_unit_offset): New function.\n+\t* ipa-prop.h (unadjusted_ptr_and_unit_offset): Declare.\n+\t* params.opt: (-param-ipa-jump-function-lookups): New.\n+\n+2020-10-14  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR bootstrap/97350\n+\t* ipa-modref.c (ignore_edge): Do not ignore inlined edes.\n+\t(ipa_merge_modref_summary_after_inlining): Improve debug output and\n+\tfix parameter of ignore_stores_p.\n+\n+2020-10-14  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/96759\n+\t* expr.c (expand_assignment): Handle misaligned stores with PARALLEL\n+\tvalue.\n+\n 2020-10-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/97386"}, {"sha": "630766919dac075cc3122e584622a657614c8a7f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "patch": "@@ -1 +1 @@\n-20201014\n+20201015"}, {"sha": "b6855e8d7550d5b3c6e3025bb85233384d8b60a0", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "patch": "@@ -1,3 +1,19 @@\n+2020-10-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93388\n+\t* region-model.cc (region_model::get_initial_value_for_global):\n+\tFall back to returning an initial_svalue if\n+\tdecl_region::get_svalue_for_initializer fails.\n+\t* region.cc (decl_region::get_svalue_for_initializer): Don't\n+\tattempt to create a compound_svalue if the region has an unknown\n+\tsize.\n+\n+2020-10-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93723\n+\t* store.cc (binding_map::apply_ctor_to_region): Remove redundant\n+\tassertion.\n+\n 2020-10-12  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/97258"}, {"sha": "f711a2908dff937d7b5d3a6944a2667f2990b274", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "patch": "@@ -1,3 +1,9 @@\n+2020-10-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/97413\n+\t* c-attribs.c (build_attr_access_from_parms): Wrap chain of VLA\n+\tbounds in an extra list.\n+\n 2020-10-05  Richard Biener  <rguenther@suse.de>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "986097a1813d110345e90d18df51e2f1d9934f13", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "patch": "@@ -1,3 +1,43 @@\n+2020-10-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97358\n+\t* pt.c (check_for_bare_parameter_packs): Diagnose use of\n+\tcapture pack.\n+\n+2020-10-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (struct lang_decl_fn): Adjust context comment.\n+\t(DECL_FRIEND_P): Replace with ...\n+\t(DECL_UNIQUE_FRIEND_P): ... this.  Only for FUNCTION_DECLs.\n+\t(DECL_FRIEND_CONTEXT): Adjust.\n+\t* class.c (add_implicitly_declared_members): Detect friendly\n+\tspaceship from context.\n+\t* constraint.cc (remove_constraints): Use a checking assert.\n+\t(maybe_substitute_reqs_for): Use DECL_UNIQUE_FRIEND_P.\n+\t* decl.c (check_no_redeclaration_friend_default_args):\n+\tDECL_UNIQUE_FRIEND_P is signficant, not hiddenness.\n+\t(duplicate_decls): Adjust DECL_UNIQUE_FRIEND_P clearing.\n+\t(redeclaration_error_message): Use DECL_UNIQUE_FRIEND_P.\n+\t(start_preparsed_function): Correct in-class friend processing.\n+\tRefactor some initializers.\n+\t(grokmethod): Directly check friend decl-spec.\n+\t* decl2.c (grokfield): Check DECL_UNIQUE_FRIEND_P.\n+\t* friend.c (do_friend): Set DECL_UNIQUE_FRIEND_P first, remove\n+\textraneous conditions.  Don't re set it afterwards.\n+\t* name-lookup.c (lookup_elaborated_type_1): Simplify revealing\n+\tcode.\n+\t(do_pushtag): Likewise.\n+\t* pt.c (optimize_specialization_lookup_p): Check\n+\tDECL_UNIQUE_FRIEND_P.\n+\t(push_template_decl): Likewise.  Drop unneeded friend setting.\n+\t(type_dependent_expression_p): Check DECL_UNIQUE_FRIEND_P.\n+\n+2020-10-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c (push_local_extern_decl_alias): Push into alias's\n+\tnamespace and use pushdecl.\n+\t(do_pushdecl_with_scope): Clarify behaviour.\n+\n 2020-10-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/97201"}, {"sha": "9f12252fa3d715a36ad5ff9a503e1c9fb40aabd6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "patch": "@@ -1,3 +1,25 @@\n+2020-10-14  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/97390\n+\t* scanner.c (load_line): Fix line-truncation warning for !$acc\n+\tand !gcc$ in free-form source code.\n+\n+2020-10-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/95614\n+\t* decl.c (gfc_get_common): Use gfc_match_common_name instead\n+\tof match_common_name.\n+\t* decl.c (gfc_bind_idents): Use gfc_match_common_name instead\n+\tof match_common_name.\n+\t* match.c : Rename match_common_name to gfc_match_common_name.\n+\t* match.c (gfc_match_common): Use gfc_match_common_name instead\n+\tof match_common_name.\n+\t* match.h : Rename match_common_name to gfc_match_common_name.\n+\t* resolve.c (resolve_common_vars): Check each symbol in a\n+\tcommon block has a global symbol.  If there is a global symbol\n+\tissue an error if the symbol type is a module or a program.\n+\n 2020-10-12  Mark Eggleston  <markeggleston@gcc.gnu.org>\n \n \tPR fortran/96099"}, {"sha": "e99aded219326fd4e3ab4abede8bb6f9d8843590", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "patch": "@@ -1,3 +1,132 @@\n+2020-10-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97391\n+\t* gcc.dg/Warray-bounds-68.c: New test.\n+\n+2020-10-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/97413\n+\t* gcc.dg/Wvla-parameter-8.c: New test.\n+\n+2020-10-14  Tom de Vries  <tdevries@suse.de>\n+\n+\t* lib/target-supports.exp (check_compile): Save and restore\n+\t$compiler_flags when calling ${tool}_target_compile.\n+\n+2020-10-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93388\n+\t* gcc.dg/analyzer/data-model-21.c: New test.\n+\n+2020-10-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97394\n+\t* gcc.dg/analyzer/setjmp-pr93378.c: Use test-setjmp.h rather than\n+\t<setjmp.h>.\n+\t* gcc.dg/analyzer/sigsetjmp-5.c: Likewise.\n+\t* gcc.dg/analyzer/sigsetjmp-6.c: Likewise.\n+\t* gcc.dg/analyzer/test-setjmp.h: Don't include <setjmp.h>.\n+\tProvide decls of jmp_buf, sigjmp_buf, setjmp, sigsetjmp,\n+\tlongjmp, and siglongjmp.\n+\n+2020-10-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/97358\n+\t* g++.dg/cpp0x/lambda/lambda-variadic11.C: New test.\n+\n+2020-10-14  Sunil K Pandey  <skpgkp2@gmail.com>\n+\n+\tPR target/95483\n+\t* gcc.target/i386/avx-1.c: Add test.\n+\t* gcc.target/i386/avx2-vbroadcastsi128-1.c: Ditto.\n+\t* gcc.target/i386/avx2-vbroadcastsi128-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vmovdqu16-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vmovdqu8-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vreducesd-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vreducesd-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vreducess-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vreducess-2.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrcp28sd-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrcp28sd-2.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrcp28ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrcp28ss-2.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28sd-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28sd-2.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512er-vrsqrt28ss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsd2si-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsd2si64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsd2ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsi2sd64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsi2ss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtsi2ss64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtss2sd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtss2si-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vcvtss2si64-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vscalefss-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtsd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtsd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtss-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vsqrtss-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqa32-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vmovdqa64-1.c: Ditto.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/avx512dq-vreducepd-3.c: New test.\n+\t* gcc.target/i386/avx512dq-vreducepd-4.c: New test.\n+\t* gcc.target/i386/avx512dq-vreduceps-3.c: New test.\n+\t* gcc.target/i386/avx512dq-vreduceps-4.c: New test.\n+\t* gcc.target/i386/avx512f-vcvtsi2sd-1.c: New test.\n+\t* gcc.target/i386/pr95483-1.c: New test.\n+\t* gcc.target/i386/pr95483-2.c: New test.\n+\t* gcc.target/i386/pr95483-3.c: New test.\n+\t* gcc.target/i386/pr95483-4.c: New test.\n+\t* gcc.target/i386/pr95483-5.c: New test.\n+\t* gcc.target/i386/pr95483-6.c: New test.\n+\t* gcc.target/i386/pr95483-7.c: New test.\n+\n+2020-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/97387\n+\t* gcc.target/i386/pr97387-1.c: New test.\n+\t* gcc.target/i386/pr97387-2.c: New test.\n+\n+2020-10-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr97396.c: New test.\n+\n+2020-10-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/ipa/modref-1.c: New test.\n+\t* gcc.dg/tree-ssa/modref-4.c: New test.\n+\n+2020-10-14  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/97390\n+\t* gfortran.dg/goacc/warn_truncated.f90: New test.\n+\n+2020-10-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/lookup/extern-redecl2.C: New.\n+\n+2020-10-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/95614\n+\t* gfortran.dg/pr95614_1.f90: New test.\n+\t* gfortran.dg/pr95614_2.f90: New test.\n+\t* gfortran.dg/pr95614_3.f90: New test.\n+\t* gfortran.dg/pr95614_4.f90: New test.\n+\n+2020-10-14  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/96759\n+\t* g++.target/riscv/pr96759.C: New.\n+\t* gcc.target/riscv/pr96759.c: New.\n+\n 2020-10-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/97386"}, {"sha": "804941e883be324db6f70a2b98eab1eb43f0d770", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "patch": "@@ -1,3 +1,7 @@\n+2020-10-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (plugin_add_friend): Set DECL_UNIQUE_FRIEND_P.\n+\n 2020-10-07  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (supplement_binding): Rename"}, {"sha": "d96a68e5bfa33143e4e0e13e841b2a1bb5bd21d9", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "patch": "@@ -1,3 +1,28 @@\n+2020-10-14  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* config/gthr-vxworks-thread.c: Include stdlib.h.\n+\t(tls_delete_hook): Prototype it.\n+\t(__gthread_cond_signal): Return early if no waiters.  Consume\n+\tsignal in case the semaphore got full.  Use semInfoGet instead\n+\tof kernel-mode-only semInfo.\n+\t(__gthread_cond_timedwait): Use semExchange.  Always take the\n+\tmutex again before returning.\n+\t* config/gthr-vxworks-cond.c (__ghtread_cond_wait): Likewise.\n+\n+2020-10-14  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/t-vxworks (LIBGCC2_INCLUDES): Append\n+\t$(MULTISUBDIR) to the -I path for fixed headers, as we\n+\tarrange to have different sets of such headers for different\n+\tmultilibs when they are activated.\n+\t* config/t-vxworks7: Likewise.\n+\n+2020-10-14  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/t-vxworks: Add include-fixed to include search\n+\tpaths for libgcc on VxWorks.\n+\t* config/t-vxworks7: Likewise.\n+\n 2020-10-09  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/97148"}, {"sha": "8a6752559e9292cc0f12e8513c5a5f05d99d6d2c", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "patch": "@@ -1,3 +1,7 @@\n+2020-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.texi (omp_get_supported_active_levels): Fix a typo.\n+\n 2020-10-13  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* env.c (gomp_max_active_levels_var): Initialize to"}, {"sha": "9eff4471429eb0702e4a90b32046e03f81369767", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b2698c21f2cdbe579bd0271cca8dc7fba7a3dc25", "patch": "@@ -1,3 +1,89 @@\n+2020-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97415\n+\t* include/std/sstream (basic_stringbuf::str()): Check for\n+\tnull egptr() before comparing to non-null pptr().\n+\n+2020-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string/modifiers/assign/char/move_assign_optim.cc:\n+\tDo not generate debug info.\n+\t* testsuite/21_strings/basic_string/modifiers/assign/wchar_t/move_assign_optim.cc:\n+\tLikewise.\n+\n+2020-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h (basic_string(const Alloc&))\n+\t(basic_string(const basic_string&)\n+\t(basic_string(const CharT*, size_type, const Alloc&))\n+\t(basic_string(const CharT*, const Alloc&))\n+\t(basic_string(size_type, CharT, const Alloc&))\n+\t(basic_string(initializer_list<CharT>, const Alloc&))\n+\t(basic_string(InputIterator, InputIterator, const Alloc&)):\n+\tDefine inline in class body.\n+\t* include/bits/basic_string.tcc (basic_string(const Alloc&))\n+\t(basic_string(const basic_string&)\n+\t(basic_string(const CharT*, size_type, const Alloc&))\n+\t(basic_string(const CharT*, const Alloc&))\n+\t(basic_string(size_type, CharT, const Alloc&))\n+\t(basic_string(initializer_list<CharT>, const Alloc&))\n+\t(basic_string(InputIterator, InputIterator, const Alloc&)):\n+\tMove definitions into class body.\n+\n+2020-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/lib/libstdc++.exp (check_effective_target_cxx11-abi):\n+\tAdd comments about which test flags get used by the check.\n+\n+2020-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string/allocator/char/copy.cc: Make\n+\tcomment more precise about what isn't supported by COW strings.\n+\t* testsuite/21_strings/basic_string/allocator/char/copy_assign.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/char/move.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/char/move_assign.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/char/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/char/operator_plus.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/char/swap.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/copy_assign.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/move.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/move_assign.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/noexcept.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/operator_plus.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/swap.cc:\n+\tLikewise.\n+\n+2020-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string/allocator/char/minimal.cc:\n+\tDo not require cxx11-abi effective target.\n+\t* testsuite/21_strings/basic_string/allocator/wchar_t/minimal.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_fstream/cons/base.cc: Likewise.\n+\n+2020-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h [!_GLIBCXX_USE_CXX11_ABI]\n+\t(basic_string(const _CharT*, const _Alloc&)): Constrain to\n+\trequire an allocator-like type to fix CTAD ambiguity (LWG 3706).\n+\t* testsuite/21_strings/basic_string/cons/char/deduction.cc:\n+\tRemove dg-skip-if.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc:\n+\tLikewise.\n+\n 2020-10-13  Nuno Lopes  <nuno.lopes@ist.utl.pt>\n \n \t* include/bits/stl_algo.h (any_of): Fix incorrect description"}]}