{"sha": "a78b491f29bb39a96308030e22cf035eb22b1ef4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc4YjQ5MWYyOWJiMzlhOTYzMDgwMzBlMjJjZjAzNWViMjJiMWVmNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-05-14T14:27:09Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-05-14T14:27:09Z"}, "message": "tree-eh.c (record_stmt_eh_region): Use add_stmt_to_eh_region.\n\n\n\n\t* tree-eh.c (record_stmt_eh_region): Use add_stmt_to_eh_region.\n\t(add_stmt_to_eh_region_fn): Nest into CALL_EXPR.\n\t(remove_stmt_from_eh_region_fn): Likewise.\n\nFrom-SVN: r99697", "tree": {"sha": "babaf07d3b7bc958f6adb4b6fa7dec246ec6ecfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/babaf07d3b7bc958f6adb4b6fa7dec246ec6ecfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a78b491f29bb39a96308030e22cf035eb22b1ef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a78b491f29bb39a96308030e22cf035eb22b1ef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a78b491f29bb39a96308030e22cf035eb22b1ef4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a78b491f29bb39a96308030e22cf035eb22b1ef4/comments", "author": null, "committer": null, "parents": [{"sha": "aa313ed486287947f965d39d9af0d162fcacf764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa313ed486287947f965d39d9af0d162fcacf764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa313ed486287947f965d39d9af0d162fcacf764"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "090a75461156fb2adadef9a5a25801a88a1c80c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78b491f29bb39a96308030e22cf035eb22b1ef4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78b491f29bb39a96308030e22cf035eb22b1ef4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a78b491f29bb39a96308030e22cf035eb22b1ef4", "patch": "@@ -1,5 +1,9 @@\n 2005-05-14  Jan Hubicka  <jh@suse.cz>\n \n+\t* tree-eh.c (record_stmt_eh_region): Use add_stmt_to_eh_region.\n+\t(add_stmt_to_eh_region_fn): Nest into CALL_EXPR.\n+\t(remove_stmt_from_eh_region_fn): Likewise.\n+\n \t* tree-cfg.c (execute_warn_function_return): Break out noreturn\n \twarning too..\n \t(execute_warn_function_noreturn): ... here."}, {"sha": "3315ffe85d29a4fc18cf6cdda839063d4e34d193", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a78b491f29bb39a96308030e22cf035eb22b1ef4/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a78b491f29bb39a96308030e22cf035eb22b1ef4/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=a78b491f29bb39a96308030e22cf035eb22b1ef4", "patch": "@@ -84,19 +84,10 @@ struct_ptr_hash (const void *a)\n static void\n record_stmt_eh_region (struct eh_region *region, tree t)\n {\n-  struct throw_stmt_node *n;\n-  void **slot;\n-\n   if (!region)\n     return;\n \n-  n = ggc_alloc (sizeof (*n));\n-  n->stmt = t;\n-  n->region_nr = get_eh_region_number (region);\n-\n-  slot = htab_find_slot (get_eh_throw_stmt_table (cfun), n, INSERT);\n-  gcc_assert (!*slot);\n-  *slot = n;\n+  add_stmt_to_eh_region (t, get_eh_region_number (region));\n }\n \n void\n@@ -120,6 +111,12 @@ add_stmt_to_eh_region_fn (struct function *ifun, tree t, int num)\n   slot = htab_find_slot (get_eh_throw_stmt_table (ifun), n, INSERT);\n   gcc_assert (!*slot);\n   *slot = n;\n+  /* ??? For the benefit of calls.c, converting all this to rtl,\n+     we need to record the call expression, not just the outer\n+     modify statement.  */\n+  if (TREE_CODE (t) == MODIFY_EXPR\n+      && (t = get_call_expr_in (t)))\n+    add_stmt_to_eh_region_fn (ifun, t, num);\n }\n \n void\n@@ -143,6 +140,12 @@ remove_stmt_from_eh_region_fn (struct function *ifun, tree t)\n   if (slot)\n     {\n       htab_clear_slot (get_eh_throw_stmt_table (ifun), slot);\n+      /* ??? For the benefit of calls.c, converting all this to rtl,\n+\t we need to record the call expression, not just the outer\n+\t modify statement.  */\n+      if (TREE_CODE (t) == MODIFY_EXPR\n+\t  && (t = get_call_expr_in (t)))\n+\tremove_stmt_from_eh_region_fn (ifun, t);\n       return true;\n     }\n   else\n@@ -1610,17 +1613,8 @@ lower_eh_constructs_1 (struct leh_state *state, tree *tp)\n       /* Look for things that can throw exceptions, and record them.  */\n       if (state->cur_region && tree_could_throw_p (t))\n \t{\n-\t  tree op;\n-\n \t  record_stmt_eh_region (state->cur_region, t);\n \t  note_eh_region_may_contain_throw (state->cur_region);\n-\n-\t  /* ??? For the benefit of calls.c, converting all this to rtl,\n-\t     we need to record the call expression, not just the outer\n-\t     modify statement.  */\n-\t  op = get_call_expr_in (t);\n-\t  if (op)\n-\t    record_stmt_eh_region (state->cur_region, op);\n \t}\n       break;\n \n@@ -1681,9 +1675,6 @@ lower_eh_constructs (void)\n   tree *tp = &DECL_SAVED_TREE (current_function_decl);\n \n   finally_tree = htab_create (31, struct_ptr_hash, struct_ptr_eq, free);\n-  set_eh_throw_stmt_table (cfun, htab_create_ggc (31, struct_ptr_hash,\n-\t\t\t\t\t\t  struct_ptr_eq,\n-\t\t\t\t\t\t  ggc_free));\n \n   collect_finally_tree (*tp, NULL);\n "}]}