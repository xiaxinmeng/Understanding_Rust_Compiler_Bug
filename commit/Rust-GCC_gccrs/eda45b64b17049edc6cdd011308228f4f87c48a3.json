{"sha": "eda45b64b17049edc6cdd011308228f4f87c48a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhNDViNjRiMTcwNDllZGM2Y2RkMDExMzA4MjI4ZjRmODdjNDhhMw==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "2000-03-17T05:23:50Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-03-17T05:23:50Z"}, "message": "c4x.h (ASM_SPEC, [...]): Support C33.\n\n\t* config/c4x/c4x.h (ASM_SPEC, CPP_SPEC, LINK_SPEC): Support C33.\n\t(C33_FLAG, TARGET_C3X): Add macros.\n\t(TARGET_SWITCHES): Add -m33 option.\n\t* config/c4x/c4x.c (c4x_override_options): Test for TARGET_C33.\n\nFrom-SVN: r32602", "tree": {"sha": "6f2ea98052e4175ed8d825d7e74de1b37f0df7a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f2ea98052e4175ed8d825d7e74de1b37f0df7a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eda45b64b17049edc6cdd011308228f4f87c48a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda45b64b17049edc6cdd011308228f4f87c48a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eda45b64b17049edc6cdd011308228f4f87c48a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda45b64b17049edc6cdd011308228f4f87c48a3/comments", "author": null, "committer": null, "parents": [{"sha": "01dc05dd041c9f11a58f66f470bf149f1ce80797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01dc05dd041c9f11a58f66f470bf149f1ce80797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01dc05dd041c9f11a58f66f470bf149f1ce80797"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "7f1fc13882cd4ef176da180ad7f8139924adaec4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda45b64b17049edc6cdd011308228f4f87c48a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda45b64b17049edc6cdd011308228f4f87c48a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eda45b64b17049edc6cdd011308228f4f87c48a3", "patch": "@@ -1,5 +1,12 @@\n 2000-03-17  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n+\t* config/c4x/c4x.h (ASM_SPEC, CPP_SPEC, LINK_SPEC): Support C33.\n+\t(C33_FLAG, TARGET_C3X): Add macros.\n+\t(TARGET_SWITCHES): Add -m33 option.\n+\t* config/c4x/c4x.c (c4x_override_options): Test for TARGET_C33.\n+\t\n+2000-03-17  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\t\n \t* config/c4x/c4x.h (PARALLEL_INSN_FLAG): Add.\n \t(PARALLEL_PACK_FLAG): Delete.\n \t(TARGET_SWITCHES): Update."}, {"sha": "3ee934c08b5d72149829cdf83d0d528aca044b43", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda45b64b17049edc6cdd011308228f4f87c48a3/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda45b64b17049edc6cdd011308228f4f87c48a3/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=eda45b64b17049edc6cdd011308228f4f87c48a3", "patch": "@@ -151,7 +151,7 @@ struct rtx_def *c4x_compare_op1 = NULL_RTX;\n const char *c4x_rpts_cycles_string;\n int c4x_rpts_cycles = 0;\t/* Max. cycles for RPTS.  */\n const char *c4x_cpu_version_string;\n-int c4x_cpu_version = 40;\t/* CPU version C30/31/32/40/44.  */\n+int c4x_cpu_version = 40;\t/* CPU version C30/31/32/33/40/44.  */\n \n /* Pragma definitions.  */\n \n@@ -207,6 +207,8 @@ c4x_override_options ()\n     c4x_cpu_version = 31;\n   else if (TARGET_C32)\n     c4x_cpu_version = 32;\n+  else if (TARGET_C33)\n+    c4x_cpu_version = 33;\n   else if (TARGET_C40)\n     c4x_cpu_version = 40;\n   else if (TARGET_C44)\n@@ -225,13 +227,15 @@ c4x_override_options ()\n       c4x_cpu_version = atoi (p);\n     }\n \n-  target_flags &= ~(C30_FLAG | C31_FLAG | C32_FLAG | C40_FLAG | C44_FLAG);\n+  target_flags &= ~(C30_FLAG | C31_FLAG | C32_FLAG | C33_FLAG |\n+\t\t    C40_FLAG | C44_FLAG);\n \n   switch (c4x_cpu_version)\n     {\n     case 30: target_flags |= C30_FLAG; break;\n     case 31: target_flags |= C31_FLAG; break;\n     case 32: target_flags |= C32_FLAG; break;\n+    case 33: target_flags |= C33_FLAG; break;\n     case 40: target_flags |= C40_FLAG; break;\n     case 44: target_flags |= C44_FLAG; break;\n     default:\n@@ -240,7 +244,7 @@ c4x_override_options ()\n       target_flags |= C40_FLAG;\n     }\n \n-  if (TARGET_C30 || TARGET_C31 || TARGET_C32)\n+  if (TARGET_C30 || TARGET_C31 || TARGET_C32 || TARGET_C33)\n     target_flags |= C3X_FLAG;\n   else\n     target_flags &= ~C3X_FLAG;"}, {"sha": "9fa1e0e2dfc08f3a2a3b3d3d60848508ad677dc0", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda45b64b17049edc6cdd011308228f4f87c48a3/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda45b64b17049edc6cdd011308228f4f87c48a3/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=eda45b64b17049edc6cdd011308228f4f87c48a3", "patch": "@@ -39,16 +39,18 @@\n /* Define assembler options.  */\n \n #define ASM_SPEC \"\\\n-%{!mcpu=30:%{!mcpu=31:%{!mcpu=32:%{!mcpu=40:%{!mcpu=44:\\\n-%{!m30:%{!m40:-m40}}}}}}} \\\n+%{!mcpu=30:%{!mcpu=31:%{!mcpu=32:%{!mcpu=33:%{!mcpu=40:%{!mcpu=44:\\\n+%{!m30:%{!m40:-m40}}}}}}}} \\\n %{mcpu=30:-m30} \\\n %{mcpu=31:-m31} \\\n %{mcpu=32:-m32} \\\n+%{mcpu=33:-m33} \\\n %{mcpu=40:-m40} \\\n %{mcpu=44:-m44} \\\n %{m30:-m30} \\\n %{m31:-m31} \\\n %{m32:-m32} \\\n+%{m33:-m33} \\\n %{m40:-m40} \\\n %{m44:-m44} \\\n %{mmemparm:-p} %{mregparm:-r} \\\n@@ -62,21 +64,26 @@\n %{m30:--architecture c3x} \\\n %{m31:--architecture c3x} \\\n %{m32:--architecture c3x} \\\n+%{m33:--architecture c3x} \\\n %{mcpu=30:--architecture c3x} \\\n %{mcpu=31:--architecture c3x} \\\n-%{mcpu=32:--architecture c3x}\"\n+%{mcpu=32:--architecture c3x} \\\n+%{mcpu=33:--architecture c3x}\"\n \n /* Define C preprocessor options.  */\n \n #define CPP_SPEC \"\\\n-%{!m30:%{!m31:%{!m32:%{!mcpu=30:%{!mcpu=31:%{!mcpu=32:%{!mcpu=40:%{!mcpu=44:\\\n-  %{!m40:%{!m44:-D_TMS320C4x -D_C4x -D_TMS320C40 -D_C40 }}}}}}}}}} \\\n+%{!m30:%{!m31:%{!m32:%{!m33:%{!mcpu=30:%{!mcpu=31:%{!mcpu=32:%{!mcpu=33:\\\n+%{!mcpu=40:%{!mcpu=44:%{\\\n+  !m40:%{!m44:-D_TMS320C4x -D_C4x -D_TMS320C40 -D_C40}}}}}}}}}} \\\n %{mcpu=30:-D_TMS320C3x -D_C3x -D_TMS320C30 -D_C30 } \\\n %{m30:-D_TMS320C3x -D_C3x -D_TMS320C30 -D_C30 } \\\n %{mcpu=31:-D_TMS320C3x -D_C3x -D_TMS320C31 -D_C31 } \\\n %{m31:-D_TMS320C3x -D_C3x -D_TMS320C31 -D_C31 } \\\n %{mcpu=32:-D_TMS320C3x -D_C3x -D_TMS320C32 -D_C32 } \\\n %{m32:-D_TMS320C3x -D_C3x -D_TMS320C32 -D_C32 } \\\n+%{mcpu=33:-D_TMS320C3x -D_C3x -D_TMS320C33 -D_C33 } \\\n+%{m33:-D_TMS320C3x -D_C3x -D_TMS320C33 -D_C33 } \\\n %{mcpu=40:-D_TMS320C4x -D_C4x -D_TMS320C40 -D_C40 } \\\n %{m40:-D_TMS320C4x -D_C4x -D_TMS320C40 -D_C40 } \\\n %{mcpu=44:-D_TMS320C4x -D_C4x -D_TMS320C44 -D_C44 } \\\n@@ -117,6 +124,7 @@\n #define C30_FLAG            0x0100000 /* Emit C30 code.  */\n #define C31_FLAG            0x0200000 /* Emit C31 code.  */\n #define C32_FLAG            0x0400000 /* Emit C32 code.  */\n+#define C33_FLAG            0x0400000 /* Emit C33 code.  */\n #define C40_FLAG            0x1000000 /* Emit C40 code.  */\n #define C44_FLAG            0x2000000 /* Emit C44 code.  */\n \n@@ -155,6 +163,8 @@\n     \"Generate code for C31 CPU\"}, \\\n   { \"32\", C32_FLAG, \\\n     \"Generate code for C32 CPU\"}, \\\n+  { \"33\", C33_FLAG, \\\n+    \"Generate code for C33 CPU\"}, \\\n   { \"40\", C40_FLAG, \\\n     \"Generate code for C40 CPU\"}, \\\n   { \"44\", C44_FLAG, \\\n@@ -265,6 +275,7 @@ extern int target_flags;\n #define TARGET_C30\t\t(target_flags & C30_FLAG)\n #define TARGET_C31\t\t(target_flags & C31_FLAG)\n #define TARGET_C32\t\t(target_flags & C32_FLAG)\n+#define TARGET_C33\t\t(target_flags & C33_FLAG)\n #define TARGET_C40\t\t(target_flags & C40_FLAG)\n #define TARGET_C44\t\t(target_flags & C44_FLAG)\n "}]}