{"sha": "daad02781a10022ac810312c46fda483809c3634", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFhZDAyNzgxYTEwMDIyYWM4MTAzMTJjNDZmZGE0ODM4MDljMzYzNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-08-12T15:10:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-08-12T15:10:47Z"}, "message": "alias.c (get_alias_set): Honor TYPE_STRUCTURAL_EQUALITY_P.\n\n2009-08-12  Richard Guenther  <rguenther@suse.de>\n\n\t* alias.c (get_alias_set): Honor TYPE_STRUCTURAL_EQUALITY_P.\n\t* gimplify.c (gimplify_modify_expr): Do not use\n\tlang_hooks.types_compatible_p.\n\t* tree-ssa.c (useless_type_conversion_p): For aggregates\n\tjust return false if the canonical types differ.\n\nFrom-SVN: r150695", "tree": {"sha": "637efc702dde071c504b6d68951b06bfb3f2b5c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/637efc702dde071c504b6d68951b06bfb3f2b5c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daad02781a10022ac810312c46fda483809c3634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daad02781a10022ac810312c46fda483809c3634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daad02781a10022ac810312c46fda483809c3634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daad02781a10022ac810312c46fda483809c3634/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30de16328a546dd06011235d86ef573dc2ffba6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30de16328a546dd06011235d86ef573dc2ffba6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30de16328a546dd06011235d86ef573dc2ffba6e"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "e4b074c8c4ca9ffbfcecafb23458ba0661586e69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daad02781a10022ac810312c46fda483809c3634/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daad02781a10022ac810312c46fda483809c3634/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=daad02781a10022ac810312c46fda483809c3634", "patch": "@@ -1,3 +1,11 @@\n+2009-08-12  Richard Guenther  <rguenther@suse.de>\n+\n+\t* alias.c (get_alias_set): Honor TYPE_STRUCTURAL_EQUALITY_P.\n+\t* gimplify.c (gimplify_modify_expr): Do not use\n+\tlang_hooks.types_compatible_p.\n+\t* tree-ssa.c (useless_type_conversion_p): For aggregates\n+\tjust return false if the canonical types differ.\n+\n 2009-08-12  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/40980"}, {"sha": "eaa127ec8e5f8eae1e733d24d25c790c568189ad", "filename": "gcc/alias.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daad02781a10022ac810312c46fda483809c3634/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daad02781a10022ac810312c46fda483809c3634/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=daad02781a10022ac810312c46fda483809c3634", "patch": "@@ -680,11 +680,20 @@ get_alias_set (tree t)\n     }\n \n   /* Variant qualifiers don't affect the alias set, so get the main\n-     variant.  Always use the canonical type as well.\n-     If this is a type with a known alias set, return it.  */\n+     variant.  */\n   t = TYPE_MAIN_VARIANT (t);\n-  if (TYPE_CANONICAL (t))\n-    t = TYPE_CANONICAL (t);\n+\n+  /* Always use the canonical type as well.  If this is a type that\n+     requires structural comparisons to identify compatible types\n+     use alias set zero.  */\n+  if (TYPE_STRUCTURAL_EQUALITY_P (t))\n+    return 0;\n+  t = TYPE_CANONICAL (t);\n+  /* Canonical types shouldn't form a tree nor should the canonical\n+     type require structural equality checks.  */\n+  gcc_assert (!TYPE_STRUCTURAL_EQUALITY_P (t) && TYPE_CANONICAL (t) == t);\n+\n+  /* If this is a type with a known alias set, return it.  */\n   if (TYPE_ALIAS_SET_KNOWN_P (t))\n     return TYPE_ALIAS_SET (t);\n "}, {"sha": "eaea16df19ca281d5628ef77e95aa3eb313630be", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daad02781a10022ac810312c46fda483809c3634/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daad02781a10022ac810312c46fda483809c3634/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=daad02781a10022ac810312c46fda483809c3634", "patch": "@@ -4322,8 +4322,7 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n   /* Insert pointer conversions required by the middle-end that are not\n      required by the frontend.  This fixes middle-end type checking for\n      for example gcc.dg/redecl-6.c.  */\n-  if (POINTER_TYPE_P (TREE_TYPE (*to_p))\n-      && lang_hooks.types_compatible_p (TREE_TYPE (*to_p), TREE_TYPE (*from_p)))\n+  if (POINTER_TYPE_P (TREE_TYPE (*to_p)))\n     {\n       STRIP_USELESS_TYPE_CONVERSION (*from_p);\n       if (!useless_type_conversion_p (TREE_TYPE (*to_p), TREE_TYPE (*from_p)))"}, {"sha": "a40270335df7c7c8e3062f07a46b9a4cde3711a6", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daad02781a10022ac810312c46fda483809c3634/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daad02781a10022ac810312c46fda483809c3634/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=daad02781a10022ac810312c46fda483809c3634", "patch": "@@ -1102,17 +1102,12 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n       return true;\n     }\n \n-  /* For aggregates we may need to fall back to structural equality\n-     checks.  */\n+  /* For aggregates we rely on TYPE_CANONICAL exclusively and require\n+     explicit conversions for types involving to be structurally\n+     compared types.  */\n   else if (AGGREGATE_TYPE_P (inner_type)\n \t   && TREE_CODE (inner_type) == TREE_CODE (outer_type))\n-    {\n-      if (TYPE_STRUCTURAL_EQUALITY_P (outer_type)\n-\t  || TYPE_STRUCTURAL_EQUALITY_P (inner_type))\n-\treturn lang_hooks.types_compatible_p (inner_type, outer_type);\n-\n-      return false;\n-    }\n+    return false;\n   \n   return false;\n }"}]}