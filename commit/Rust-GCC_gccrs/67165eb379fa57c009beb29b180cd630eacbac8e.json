{"sha": "67165eb379fa57c009beb29b180cd630eacbac8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcxNjVlYjM3OWZhNTdjMDA5YmViMjliMTgwY2Q2MzBlYWNiYWM4ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-06-01T16:35:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-06-01T16:35:01Z"}, "message": "attribs.c (register_attribute): Use CONST_CAST.\n\n./:\t* attribs.c (register_attribute): Use CONST_CAST.\n\t* collect2.c (main): Use CONST_CAST2.\n\t(scan_prog_file): Likewise.\n\t* gcc.c (process_command, main): Likewise.\n\t* toplev.c (toplev_main): Likewise.\n\n\t* c-typeck.c (handle_warn_cast_qual): New static function,\n\tpartially broken out of build_c_cast.\n\t(build_c_cast): Call handle_warn_cast_qual.\n\t* doc/invoke.texi (Warning Options): Document new effect of\n\t-Wcast-qual.\n./java:\t* jcf-io.c (find_class): Use CONST_CAST.\n./testsuite:\t* gcc.dg/cast-qual-3.c: New testcase.\n\t* g++.dg/warn/Wcast-qual2.C: New testcase.\n\nFrom-SVN: r148053", "tree": {"sha": "025683978bbcbc05c466d6f225a46ab0f8cd980d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/025683978bbcbc05c466d6f225a46ab0f8cd980d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67165eb379fa57c009beb29b180cd630eacbac8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67165eb379fa57c009beb29b180cd630eacbac8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67165eb379fa57c009beb29b180cd630eacbac8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67165eb379fa57c009beb29b180cd630eacbac8e/comments", "author": null, "committer": null, "parents": [{"sha": "e74fe492f19c8a2bdf1077af1583c74a5ecd7c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e74fe492f19c8a2bdf1077af1583c74a5ecd7c98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e74fe492f19c8a2bdf1077af1583c74a5ecd7c98"}], "stats": {"total": 548, "additions": 489, "deletions": 59}, "files": [{"sha": "d9f67d85dff2c5b7ddbcf13acf4bd261b2d9248c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67165eb379fa57c009beb29b180cd630eacbac8e", "patch": "@@ -1,3 +1,17 @@\n+2009-06-01  Ian Lance Taylor  <iant@google.com>\n+\n+\t* attribs.c (register_attribute): Use CONST_CAST.\n+\t* collect2.c (main): Use CONST_CAST2.\n+\t(scan_prog_file): Likewise.\n+\t* gcc.c (process_command, main): Likewise.\n+\t* toplev.c (toplev_main): Likewise.\n+\n+\t* c-typeck.c (handle_warn_cast_qual): New static function,\n+\tpartially broken out of build_c_cast.\n+\t(build_c_cast): Call handle_warn_cast_qual.\n+\t* doc/invoke.texi (Warning Options): Document new effect of\n+\t-Wcast-qual.\n+\n 2009-06-01  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* diagnostic.c (diagnostic_build_prefix): Always print columns."}, {"sha": "5ae462e7287b31929fb218d07e4926eeb27bb64f", "filename": "gcc/attribs.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=67165eb379fa57c009beb29b180cd630eacbac8e", "patch": "@@ -1,6 +1,6 @@\n /* Functions dealing with attribute handling, used by most front ends.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n+   2002, 2003, 2004, 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -195,15 +195,15 @@ void\n register_attribute (const struct attribute_spec *attr) \n {\n   struct substring str;\n-  const void **slot;\n+  void **slot;\n \n   str.str = attr->name;\n   str.length = strlen (str.str);\n-  slot = (const void **)htab_find_slot_with_hash (attribute_hash, &str,\n-                                                  substring_hash (str.str, str.length),\n-                                                  INSERT);\n+  slot = htab_find_slot_with_hash (attribute_hash, &str,\n+\t\t\t\t   substring_hash (str.str, str.length),\n+\t\t\t\t   INSERT);\n   gcc_assert (!*slot);\n-  *slot = attr;\n+  *slot = (void *) CONST_CAST (struct attribute_spec *, attr);\n }\n \n /* Return the spec for the attribute named NAME.  */"}, {"sha": "28fb8b8c049181a422eb06a454186ece44e5d6ee", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 88, "deletions": 37, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=67165eb379fa57c009beb29b180cd630eacbac8e", "patch": "@@ -4055,6 +4055,93 @@ build_compound_expr (tree expr1, tree expr2)\n   return ret;\n }\n \n+/* Issue -Wcast-qual warnings when appropriate.  TYPE is the type to\n+   which we are casting.  OTYPE is the type of the expression being\n+   cast.  Both TYPE and OTYPE are pointer types.  -Wcast-qual appeared\n+   on the command line.  */\n+\n+static void\n+handle_warn_cast_qual (tree type, tree otype)\n+{\n+  tree in_type = type;\n+  tree in_otype = otype;\n+  int added = 0;\n+  int discarded = 0;\n+  bool is_const;\n+\n+  /* Check that the qualifiers on IN_TYPE are a superset of the\n+     qualifiers of IN_OTYPE.  The outermost level of POINTER_TYPE\n+     nodes is uninteresting and we stop as soon as we hit a\n+     non-POINTER_TYPE node on either type.  */\n+  do\n+    {\n+      in_otype = TREE_TYPE (in_otype);\n+      in_type = TREE_TYPE (in_type);\n+\n+      /* GNU C allows cv-qualified function types.  'const' means the\n+\t function is very pure, 'volatile' means it can't return.  We\n+\t need to warn when such qualifiers are added, not when they're\n+\t taken away.  */\n+      if (TREE_CODE (in_otype) == FUNCTION_TYPE\n+\t  && TREE_CODE (in_type) == FUNCTION_TYPE)\n+\tadded |= (TYPE_QUALS (in_type) & ~TYPE_QUALS (in_otype));\n+      else\n+\tdiscarded |= (TYPE_QUALS (in_otype) & ~TYPE_QUALS (in_type));\n+    }\n+  while (TREE_CODE (in_type) == POINTER_TYPE\n+\t && TREE_CODE (in_otype) == POINTER_TYPE);\n+\n+  if (added)\n+    warning (OPT_Wcast_qual, \"cast adds new qualifiers to function type\");\n+\n+  if (discarded)\n+    /* There are qualifiers present in IN_OTYPE that are not present\n+       in IN_TYPE.  */\n+    warning (OPT_Wcast_qual,\n+\t     \"cast discards qualifiers from pointer target type\");\n+\n+  if (added || discarded)\n+    return;\n+\n+  /* A cast from **T to const **T is unsafe, because it can cause a\n+     const value to be changed with no additional warning.  We only\n+     issue this warning if T is the same on both sides, and we only\n+     issue the warning if there are the same number of pointers on\n+     both sides, as otherwise the cast is clearly unsafe anyhow.  A\n+     cast is unsafe when a qualifier is added at one level and const\n+     is not present at all outer levels.\n+\n+     To issue this warning, we check at each level whether the cast\n+     adds new qualifiers not already seen.  We don't need to special\n+     case function types, as they won't have the same\n+     TYPE_MAIN_VARIANT.  */\n+\n+  if (TYPE_MAIN_VARIANT (in_type) != TYPE_MAIN_VARIANT (in_otype))\n+    return;\n+  if (TREE_CODE (TREE_TYPE (type)) != POINTER_TYPE)\n+    return;\n+\n+  in_type = type;\n+  in_otype = otype;\n+  is_const = TYPE_READONLY (TREE_TYPE (in_type));\n+  do\n+    {\n+      in_type = TREE_TYPE (in_type);\n+      in_otype = TREE_TYPE (in_otype);\n+      if ((TYPE_QUALS (in_type) &~ TYPE_QUALS (in_otype)) != 0\n+\t  && !is_const)\n+\t{\n+\t  warning (OPT_Wcast_qual,\n+\t\t   (\"new qualifiers in middle of multi-level non-const cast \"\n+\t\t    \"are unsafe\"));\n+\t  break;\n+\t}\n+      if (is_const)\n+\tis_const = TYPE_READONLY (in_type);\n+    }\n+  while (TREE_CODE (in_type) == POINTER_TYPE);\n+}\n+\n /* Build an expression representing a cast to type TYPE of expression EXPR.  */\n \n tree\n@@ -4139,46 +4226,10 @@ build_c_cast (tree type, tree expr)\n       otype = TREE_TYPE (value);\n \n       /* Optionally warn about potentially worrisome casts.  */\n-\n       if (warn_cast_qual\n \t  && TREE_CODE (type) == POINTER_TYPE\n \t  && TREE_CODE (otype) == POINTER_TYPE)\n-\t{\n-\t  tree in_type = type;\n-\t  tree in_otype = otype;\n-\t  int added = 0;\n-\t  int discarded = 0;\n-\n-\t  /* Check that the qualifiers on IN_TYPE are a superset of\n-\t     the qualifiers of IN_OTYPE.  The outermost level of\n-\t     POINTER_TYPE nodes is uninteresting and we stop as soon\n-\t     as we hit a non-POINTER_TYPE node on either type.  */\n-\t  do\n-\t    {\n-\t      in_otype = TREE_TYPE (in_otype);\n-\t      in_type = TREE_TYPE (in_type);\n-\n-\t      /* GNU C allows cv-qualified function types.  'const'\n-\t\t means the function is very pure, 'volatile' means it\n-\t\t can't return.  We need to warn when such qualifiers\n-\t\t are added, not when they're taken away.  */\n-\t      if (TREE_CODE (in_otype) == FUNCTION_TYPE\n-\t\t  && TREE_CODE (in_type) == FUNCTION_TYPE)\n-\t\tadded |= (TYPE_QUALS (in_type) & ~TYPE_QUALS (in_otype));\n-\t      else\n-\t\tdiscarded |= (TYPE_QUALS (in_otype) & ~TYPE_QUALS (in_type));\n-\t    }\n-\t  while (TREE_CODE (in_type) == POINTER_TYPE\n-\t\t && TREE_CODE (in_otype) == POINTER_TYPE);\n-\n-\t  if (added)\n-\t    warning (OPT_Wcast_qual, \"cast adds new qualifiers to function type\");\n-\n-\t  if (discarded)\n-\t    /* There are qualifiers present in IN_OTYPE that are not\n-\t       present in IN_TYPE.  */\n-\t    warning (OPT_Wcast_qual, \"cast discards qualifiers from pointer target type\");\n-\t}\n+\thandle_warn_cast_qual (type, otype);\n \n       /* Warn about possible alignment problems.  */\n       if (STRICT_ALIGNMENT"}, {"sha": "d15a81af182ca7e7c672be090d9f4812f7b8d8ab", "filename": "gcc/collect2.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=67165eb379fa57c009beb29b180cd630eacbac8e", "patch": "@@ -857,9 +857,12 @@ main (int argc, char **argv)\n   /* Do not invoke xcalloc before this point, since locale needs to be\n      set first, in case a diagnostic is issued.  */\n \n-  ld1 = (const char **)(ld1_argv = XCNEWVEC (char *, argc+4));\n-  ld2 = (const char **)(ld2_argv = XCNEWVEC (char *, argc+11));\n-  object = (const char **)(object_lst = XCNEWVEC (char *, argc));\n+  ld1_argv = XCNEWVEC (char *, argc + 4);\n+  ld1 = CONST_CAST2 (const char **, char **, ld1_argv);\n+  ld2_argv = XCNEWVEC (char *, argc + 11);\n+  ld2 = CONST_CAST2 (const char **, char **, ld2_argv);\n+  object_lst = XCNEWVEC (char *, argc);\n+  object = CONST_CAST2 (const char **, char **, object_lst);\n \n #ifdef DEBUG\n   debug = 1;\n@@ -904,7 +907,8 @@ main (int argc, char **argv)\n      -fno-exceptions -w */\n   num_c_args += 5;\n \n-  c_ptr = (const char **) (c_argv = XCNEWVEC (char *, num_c_args));\n+  c_argv = XCNEWVEC (char *, num_c_args);\n+  c_ptr = CONST_CAST2 (const char **, char **, c_argv);\n \n   if (argc < 2)\n     fatal (\"no arguments\");\n@@ -1406,7 +1410,8 @@ main (int argc, char **argv)\n       if (strip_flag)\n \t{\n \t  char **real_strip_argv = XCNEWVEC (char *, 3);\n-\t  const char ** strip_argv = (const char **) real_strip_argv;\n+\t  const char ** strip_argv = CONST_CAST2 (const char **, char **,\n+\t\t\t\t\t\t  real_strip_argv);\n \n \t  strip_argv[0] = strip_file_name;\n \t  strip_argv[1] = output_file;\n@@ -2090,7 +2095,7 @@ scan_prog_file (const char *prog_name, enum pass which_pass)\n   void (*quit_handler) (int);\n #endif\n   char *real_nm_argv[4];\n-  const char **nm_argv = (const char **) real_nm_argv;\n+  const char **nm_argv = CONST_CAST2 (const char **, char**, real_nm_argv);\n   int argc = 0;\n   struct pex_obj *pex;\n   const char *errmsg;"}, {"sha": "85b3ae8dfb097a04eee817c8f21a5219411ff2c2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=67165eb379fa57c009beb29b180cd630eacbac8e", "patch": "@@ -3694,6 +3694,19 @@ Warn whenever a pointer is cast so as to remove a type qualifier from\n the target type.  For example, warn if a @code{const char *} is cast\n to an ordinary @code{char *}.\n \n+Also warn when making a cast which introduces a type qualifier in an\n+unsafe way.  For example, casting @code{char **} to @code{const char **}\n+is unsafe, as in this example:\n+\n+@smallexample\n+  /* p is char ** value.  */\n+  const char **q = (const char **) p;\n+  /* Assignment of readonly string to const char * is OK.  */\n+  *q = \"string\";\n+  /* Now char** pointer points to read-only memory.  */\n+  **p = 'b';\n+@end smallexample\n+\n @item -Wcast-align\n @opindex Wcast-align\n @opindex Wno-cast-align"}, {"sha": "538be053b7a24fd042032939f4b7092dc033feb7", "filename": "gcc/gcc.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=67165eb379fa57c009beb29b180cd630eacbac8e", "patch": "@@ -3636,10 +3636,15 @@ process_command (int argc, const char **argv)\n     }\n \n   /* Convert new-style -- options to old-style.  */\n-  translate_options (&argc, (const char *const **) &argv);\n+  translate_options (&argc,\n+\t\t     CONST_CAST2 (const char *const **, const char ***,\n+\t\t\t\t  &argv));\n \n   /* Do language-specific adjustment/addition of flags.  */\n-  lang_specific_driver (&argc, (const char *const **) &argv, &added_libraries);\n+  lang_specific_driver (&argc,\n+\t\t\tCONST_CAST2 (const char *const **, const char ***,\n+\t\t\t\t     &argv),\n+\t\t\t&added_libraries);\n \n   /* Scan argv twice.  Here, the first time, just count how many switches\n      there will be in their vector, and how many input files in theirs.\n@@ -6466,7 +6471,7 @@ main (int argc, char **argv)\n      Make a table of specified input files (infiles, n_infiles).\n      Decode switches that are handled locally.  */\n \n-  process_command (argc, (const char **) argv);\n+  process_command (argc, CONST_CAST2 (const char **, char **, argv));\n \n   /* Initialize the vector of specs to just the default.\n      This means one element containing 0s, as a terminator.  */"}, {"sha": "6754403f5adddd39555512c11bdcf298c47e2996", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=67165eb379fa57c009beb29b180cd630eacbac8e", "patch": "@@ -1,3 +1,7 @@\n+2009-06-01  Ian Lance Taylor  <iant@google.com>\n+\n+\t* jcf-io.c (find_class): Use CONST_CAST.\n+\n 2009-05-27  Ian Lance Taylor  <iant@google.com>\n \n \t* Make-lang.in ($(XGCJ)$(exeext)): Change $(COMPILER) to"}, {"sha": "28a48bb4504dc94af3627a91d13bd001d5e73e3f", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=67165eb379fa57c009beb29b180cd630eacbac8e", "patch": "@@ -1,6 +1,6 @@\n /* Utility routines for finding and reading Java(TM) .class files.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -399,9 +399,8 @@ find_class (const char *classname, int classname_length, JCF *jcf)\n \n   /* Remember that this class could not be found so that we do not\n      have to look again.  */\n-  *(const void **)htab_find_slot_with_hash (memoized_class_lookups,\n-\t\t\t\t\t    classname, hash, INSERT)\n-    = classname;\n+  *htab_find_slot_with_hash (memoized_class_lookups, classname, hash, INSERT)\n+    = (void *) CONST_CAST (char *, classname);\n \n   return NULL;\n  found:"}, {"sha": "f76815a9a78f152cef0e72b1254b6fa04b0fb5bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67165eb379fa57c009beb29b180cd630eacbac8e", "patch": "@@ -1,3 +1,8 @@\n+2009-06-01  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gcc.dg/cast-qual-3.c: New testcase.\n+\t* g++.dg/warn/Wcast-qual2.C: New testcase.\n+\n 2009-06-01  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* lib/gcc-dg.exp (dg-bogus): Override dg-bogus."}, {"sha": "88fdcfb38f5125fbcbac0ed5cd1df30408b704dd", "filename": "gcc/testsuite/g++.dg/warn/Wcast-qual2.C", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual2.C?ref=67165eb379fa57c009beb29b180cd630eacbac8e", "patch": "@@ -0,0 +1,167 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wcast-qual\" } */\n+\n+/* The files gcc.dg/cast-qual-3.c and g++.dg/warn/Wcast-qual2.c are\n+   duals.  they are intended to show that gcc -Wcast-qual and g++\n+   -Wcast-qual emit warnings in the same cases.  If you change this\n+   file, please also change the other one.  */\n+\n+void\n+f1 (void *bar)\n+{\n+  const void *p1 = (const void *) bar;\n+  const char *p2 = (const char *) bar;\n+  const void **p3 = (const void **) bar;\n+  const char **p4 = (const char **) bar;\n+  const void * const *p5 = (const void * const *) bar;\n+  const char * const *p6 = (const char * const *) bar;\n+  void * const *p7 = (void * const *) bar;\n+  char * const *p8 = (char * const *) bar;\n+  const void ***p9 = (const void ***) bar;\n+  const char ***p10 = (const char ***) bar;\n+  void * const **p11 = (void * const **) bar;\n+  char * const **p12 = (char * const **) bar;\n+  void ** const *p13 = (void ** const *) bar;\n+  char ** const *p14 = (char ** const *) bar;\n+  const void * const **p15 = (const void * const **) bar;\n+  const char * const **p16 = (const char * const **) bar;\n+  const void ** const *p17 = (const void ** const *) bar;\n+  const char ** const *p18 = (const char ** const *) bar;\n+  void * const * const * p19 = (void * const * const *) bar;\n+  char * const * const * p20 = (char * const * const *) bar;\n+  const void * const * const *p21 = (const void * const * const *) bar;\n+  const char * const * const *p22 = (const char * const * const *) bar;\n+}\n+\n+void\n+f2 (void **bar)\n+{\n+  const void *p1 = (const void *) bar;\n+  const char *p2 = (const char *) bar;\n+  const void **p3 = (const void **) bar; /* { dg-warning \"cast\" } */\n+  const char **p4 = (const char **) bar;\n+  const void * const *p5 = (const void * const *) bar;\n+  const char * const *p6 = (const char * const *) bar;\n+  void * const *p7 = (void * const *) bar;\n+  char * const *p8 = (char * const *) bar;\n+  const void ***p9 = (const void ***) bar;\n+  const char ***p10 = (const char ***) bar;\n+  void * const **p11 = (void * const **) bar;\n+  char * const **p12 = (char * const **) bar;\n+  void ** const *p13 = (void ** const *) bar;\n+  char ** const *p14 = (char ** const *) bar;\n+  const void * const **p15 = (const void * const **) bar;\n+  const char * const **p16 = (const char * const **) bar;\n+  const void ** const *p17 = (const void ** const *) bar;\n+  const char ** const *p18 = (const char ** const *) bar;\n+  void * const * const * p19 = (void * const * const *) bar;\n+  char * const * const * p20 = (char * const * const *) bar;\n+  const void * const * const *p21 = (const void * const * const *) bar;\n+  const char * const * const *p22 = (const char * const * const *) bar;\n+}\n+\n+void\n+f3 (void ***bar)\n+{\n+  const void *p1 = (const void *) bar;\n+  const char *p2 = (const char *) bar;\n+  const void **p3 = (const void **) bar;\n+  const char **p4 = (const char **) bar;\n+  const void * const *p5 = (const void * const *) bar;\n+  const char * const *p6 = (const char * const *) bar;\n+  void * const *p7 = (void * const *) bar;\n+  char * const *p8 = (char * const *) bar;\n+  const void ***p9 = (const void ***) bar; /* { dg-warning \"cast\" } */\n+  const char ***p10 = (const char ***) bar;\n+  void * const **p11 = (void * const **) bar; /* { dg-warning \"cast\" } */\n+  char * const **p12 = (char * const **) bar;\n+  void ** const *p13 = (void ** const *) bar;\n+  char ** const *p14 = (char ** const *) bar;\n+  const void * const **p15 = (const void * const **) bar; /* { dg-warning \"cast\" } */\n+  const char * const **p16 = (const char * const **) bar;\n+  const void ** const *p17 = (const void ** const *) bar; /* { dg-warning \"cast\" } */\n+  const char ** const *p18 = (const char ** const *) bar;\n+  void * const * const * p19 = (void * const * const *) bar;\n+  char * const * const * p20 = (char * const * const *) bar;\n+  const void * const * const *p21 = (const void * const * const *) bar;\n+  const char * const * const *p22 = (const char * const * const *) bar;\n+}\n+\n+void\n+f4 (void * const **bar)\n+{\n+  const void ***p9 = (const void ***) bar; /* { dg-warning \"cast\" } */\n+  void * const **p11 = (void * const **) bar;\n+  void ** const *p13 = (void ** const *) bar; /* { dg-warning \"cast\" } */\n+  const void * const **p15 = (const void * const **) bar; /* { dg-warning \"cast\" } */\n+  const void ** const *p17 = (const void ** const *) bar; /* { dg-warning \"cast\" } */\n+  void * const * const * p19 = (void * const * const *) bar;\n+  const void * const * const *p21 = (const void * const * const *) bar;\n+}\n+\n+void\n+f5 (char ***bar)\n+{\n+  volatile const char ***p9 = (volatile const char ***) bar; /* { dg-warning \"cast\" } */\n+  volatile char * const **p11 = (volatile char * const **) bar; /* { dg-warning \"cast\" } */\n+  volatile char ** const *p13 = (volatile char ** const *) bar; /* { dg-warning \"cast\" } */\n+  volatile const char * const **p15 = (volatile const char * const **) bar; /* { dg-warning \"cast\" } */\n+  volatile const char ** const *p17 = (volatile const char ** const *) bar; /* { dg-warning \"cast\" } */\n+  volatile char * const * const * p19 = (volatile char * const * const *) bar;\n+  volatile const char * const * const *p21 = (volatile const char * const * const *) bar;\n+}\n+\n+void\n+f6 (char ***bar)\n+{\n+  const char * volatile **p9 = (const char * volatile **) bar; /* { dg-warning \"cast\" } */\n+  char * volatile const **p11 = (char * volatile const **) bar; /* { dg-warning \"cast\" } */\n+  char * volatile * const *p13 = (char * volatile * const *) bar;\n+  const char * volatile const **p15 = (const char * volatile const **) bar; /* { dg-warning \"cast\" } */\n+  const char * volatile * const *p17 = (const char * volatile * const *) bar; /* { dg-warning \"cast\" } */\n+  char * volatile const * const * p19 = (char * volatile const * const *) bar;\n+  const char * volatile const * const *p21 = (const char * volatile const * const *) bar;\n+}\n+\n+void\n+f7 (char ***bar)\n+{\n+  const char ** volatile *p9 = (const char ** volatile *) bar; /* { dg-warning \"cast\" } */\n+  char * const * volatile *p11 = (char * const * volatile *) bar; /* { dg-warning \"cast\" } */\n+  char ** volatile const *p13 = (char ** volatile const *) bar;\n+  const char * const * volatile *p15 = (const char * const * volatile *) bar; /* { dg-warning \"cast\" } */\n+  const char ** volatile const *p17 = (const char ** volatile const *) bar; /* { dg-warning \"cast\" } */\n+  char * const * volatile const * p19 = (char * const * volatile const *) bar;\n+  const char * const * volatile const *p21 = (const char * const * volatile const *) bar;\n+}\n+\n+typedef int (intfn) (int);\n+typedef intfn *pintfn;\n+typedef const intfn *constfn;\n+\n+void\n+f8 (constfn ***bar)\n+{\n+  const constfn *p1 = (const constfn *) bar;\n+  const pintfn *p2 = (const pintfn *) bar;\n+  const constfn **p3 = (const constfn **) bar;\n+  const pintfn **p4 = (const pintfn **) bar;\n+  const constfn * const *p5 = (const constfn * const *) bar;\n+  const pintfn * const *p6 = (const pintfn * const *) bar;\n+  constfn * const *p7 = (constfn * const *) bar;\n+  pintfn * const *p8 = (pintfn * const *) bar;\n+  const constfn ***p9 = (const constfn ***) bar; /* { dg-warning \"cast\" } */\n+  const pintfn ***p10 = (const pintfn ***) bar; /* { dg-warning \"cast\" } */\n+  constfn * const **p11 = (constfn * const **) bar; /* { dg-warning \"cast\" } */\n+  pintfn * const **p12 = (pintfn * const **) bar; /* { dg-warning \"cast\" } */\n+  constfn ** const *p13 = (constfn ** const *) bar;\n+  pintfn ** const *p14 = (pintfn ** const *) bar;\n+  const constfn * const **p15 = (const constfn * const **) bar; /* { dg-warning \"cast\" } */\n+  const pintfn * const **p16 = (const pintfn * const **) bar; /* { dg-warning \"cast\" } */\n+  const constfn ** const *p17 = (const constfn ** const *) bar; /* { dg-warning \"cast\" } */\n+  const pintfn ** const *p18 = (const pintfn ** const *) bar; /* { dg-warning \"cast\" } */\n+  constfn * const * const * p19 = (constfn * const * const *) bar;\n+  pintfn * const * const * p20 = (pintfn * const * const *) bar;\n+  const constfn * const * const *p21 = (const constfn * const * const *) bar;\n+  const pintfn * const * const *p22 = (const pintfn * const * const *) bar;\n+}"}, {"sha": "88fdcfb38f5125fbcbac0ed5cd1df30408b704dd", "filename": "gcc/testsuite/gcc.dg/cast-qual-3.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-qual-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-qual-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcast-qual-3.c?ref=67165eb379fa57c009beb29b180cd630eacbac8e", "patch": "@@ -0,0 +1,167 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wcast-qual\" } */\n+\n+/* The files gcc.dg/cast-qual-3.c and g++.dg/warn/Wcast-qual2.c are\n+   duals.  they are intended to show that gcc -Wcast-qual and g++\n+   -Wcast-qual emit warnings in the same cases.  If you change this\n+   file, please also change the other one.  */\n+\n+void\n+f1 (void *bar)\n+{\n+  const void *p1 = (const void *) bar;\n+  const char *p2 = (const char *) bar;\n+  const void **p3 = (const void **) bar;\n+  const char **p4 = (const char **) bar;\n+  const void * const *p5 = (const void * const *) bar;\n+  const char * const *p6 = (const char * const *) bar;\n+  void * const *p7 = (void * const *) bar;\n+  char * const *p8 = (char * const *) bar;\n+  const void ***p9 = (const void ***) bar;\n+  const char ***p10 = (const char ***) bar;\n+  void * const **p11 = (void * const **) bar;\n+  char * const **p12 = (char * const **) bar;\n+  void ** const *p13 = (void ** const *) bar;\n+  char ** const *p14 = (char ** const *) bar;\n+  const void * const **p15 = (const void * const **) bar;\n+  const char * const **p16 = (const char * const **) bar;\n+  const void ** const *p17 = (const void ** const *) bar;\n+  const char ** const *p18 = (const char ** const *) bar;\n+  void * const * const * p19 = (void * const * const *) bar;\n+  char * const * const * p20 = (char * const * const *) bar;\n+  const void * const * const *p21 = (const void * const * const *) bar;\n+  const char * const * const *p22 = (const char * const * const *) bar;\n+}\n+\n+void\n+f2 (void **bar)\n+{\n+  const void *p1 = (const void *) bar;\n+  const char *p2 = (const char *) bar;\n+  const void **p3 = (const void **) bar; /* { dg-warning \"cast\" } */\n+  const char **p4 = (const char **) bar;\n+  const void * const *p5 = (const void * const *) bar;\n+  const char * const *p6 = (const char * const *) bar;\n+  void * const *p7 = (void * const *) bar;\n+  char * const *p8 = (char * const *) bar;\n+  const void ***p9 = (const void ***) bar;\n+  const char ***p10 = (const char ***) bar;\n+  void * const **p11 = (void * const **) bar;\n+  char * const **p12 = (char * const **) bar;\n+  void ** const *p13 = (void ** const *) bar;\n+  char ** const *p14 = (char ** const *) bar;\n+  const void * const **p15 = (const void * const **) bar;\n+  const char * const **p16 = (const char * const **) bar;\n+  const void ** const *p17 = (const void ** const *) bar;\n+  const char ** const *p18 = (const char ** const *) bar;\n+  void * const * const * p19 = (void * const * const *) bar;\n+  char * const * const * p20 = (char * const * const *) bar;\n+  const void * const * const *p21 = (const void * const * const *) bar;\n+  const char * const * const *p22 = (const char * const * const *) bar;\n+}\n+\n+void\n+f3 (void ***bar)\n+{\n+  const void *p1 = (const void *) bar;\n+  const char *p2 = (const char *) bar;\n+  const void **p3 = (const void **) bar;\n+  const char **p4 = (const char **) bar;\n+  const void * const *p5 = (const void * const *) bar;\n+  const char * const *p6 = (const char * const *) bar;\n+  void * const *p7 = (void * const *) bar;\n+  char * const *p8 = (char * const *) bar;\n+  const void ***p9 = (const void ***) bar; /* { dg-warning \"cast\" } */\n+  const char ***p10 = (const char ***) bar;\n+  void * const **p11 = (void * const **) bar; /* { dg-warning \"cast\" } */\n+  char * const **p12 = (char * const **) bar;\n+  void ** const *p13 = (void ** const *) bar;\n+  char ** const *p14 = (char ** const *) bar;\n+  const void * const **p15 = (const void * const **) bar; /* { dg-warning \"cast\" } */\n+  const char * const **p16 = (const char * const **) bar;\n+  const void ** const *p17 = (const void ** const *) bar; /* { dg-warning \"cast\" } */\n+  const char ** const *p18 = (const char ** const *) bar;\n+  void * const * const * p19 = (void * const * const *) bar;\n+  char * const * const * p20 = (char * const * const *) bar;\n+  const void * const * const *p21 = (const void * const * const *) bar;\n+  const char * const * const *p22 = (const char * const * const *) bar;\n+}\n+\n+void\n+f4 (void * const **bar)\n+{\n+  const void ***p9 = (const void ***) bar; /* { dg-warning \"cast\" } */\n+  void * const **p11 = (void * const **) bar;\n+  void ** const *p13 = (void ** const *) bar; /* { dg-warning \"cast\" } */\n+  const void * const **p15 = (const void * const **) bar; /* { dg-warning \"cast\" } */\n+  const void ** const *p17 = (const void ** const *) bar; /* { dg-warning \"cast\" } */\n+  void * const * const * p19 = (void * const * const *) bar;\n+  const void * const * const *p21 = (const void * const * const *) bar;\n+}\n+\n+void\n+f5 (char ***bar)\n+{\n+  volatile const char ***p9 = (volatile const char ***) bar; /* { dg-warning \"cast\" } */\n+  volatile char * const **p11 = (volatile char * const **) bar; /* { dg-warning \"cast\" } */\n+  volatile char ** const *p13 = (volatile char ** const *) bar; /* { dg-warning \"cast\" } */\n+  volatile const char * const **p15 = (volatile const char * const **) bar; /* { dg-warning \"cast\" } */\n+  volatile const char ** const *p17 = (volatile const char ** const *) bar; /* { dg-warning \"cast\" } */\n+  volatile char * const * const * p19 = (volatile char * const * const *) bar;\n+  volatile const char * const * const *p21 = (volatile const char * const * const *) bar;\n+}\n+\n+void\n+f6 (char ***bar)\n+{\n+  const char * volatile **p9 = (const char * volatile **) bar; /* { dg-warning \"cast\" } */\n+  char * volatile const **p11 = (char * volatile const **) bar; /* { dg-warning \"cast\" } */\n+  char * volatile * const *p13 = (char * volatile * const *) bar;\n+  const char * volatile const **p15 = (const char * volatile const **) bar; /* { dg-warning \"cast\" } */\n+  const char * volatile * const *p17 = (const char * volatile * const *) bar; /* { dg-warning \"cast\" } */\n+  char * volatile const * const * p19 = (char * volatile const * const *) bar;\n+  const char * volatile const * const *p21 = (const char * volatile const * const *) bar;\n+}\n+\n+void\n+f7 (char ***bar)\n+{\n+  const char ** volatile *p9 = (const char ** volatile *) bar; /* { dg-warning \"cast\" } */\n+  char * const * volatile *p11 = (char * const * volatile *) bar; /* { dg-warning \"cast\" } */\n+  char ** volatile const *p13 = (char ** volatile const *) bar;\n+  const char * const * volatile *p15 = (const char * const * volatile *) bar; /* { dg-warning \"cast\" } */\n+  const char ** volatile const *p17 = (const char ** volatile const *) bar; /* { dg-warning \"cast\" } */\n+  char * const * volatile const * p19 = (char * const * volatile const *) bar;\n+  const char * const * volatile const *p21 = (const char * const * volatile const *) bar;\n+}\n+\n+typedef int (intfn) (int);\n+typedef intfn *pintfn;\n+typedef const intfn *constfn;\n+\n+void\n+f8 (constfn ***bar)\n+{\n+  const constfn *p1 = (const constfn *) bar;\n+  const pintfn *p2 = (const pintfn *) bar;\n+  const constfn **p3 = (const constfn **) bar;\n+  const pintfn **p4 = (const pintfn **) bar;\n+  const constfn * const *p5 = (const constfn * const *) bar;\n+  const pintfn * const *p6 = (const pintfn * const *) bar;\n+  constfn * const *p7 = (constfn * const *) bar;\n+  pintfn * const *p8 = (pintfn * const *) bar;\n+  const constfn ***p9 = (const constfn ***) bar; /* { dg-warning \"cast\" } */\n+  const pintfn ***p10 = (const pintfn ***) bar; /* { dg-warning \"cast\" } */\n+  constfn * const **p11 = (constfn * const **) bar; /* { dg-warning \"cast\" } */\n+  pintfn * const **p12 = (pintfn * const **) bar; /* { dg-warning \"cast\" } */\n+  constfn ** const *p13 = (constfn ** const *) bar;\n+  pintfn ** const *p14 = (pintfn ** const *) bar;\n+  const constfn * const **p15 = (const constfn * const **) bar; /* { dg-warning \"cast\" } */\n+  const pintfn * const **p16 = (const pintfn * const **) bar; /* { dg-warning \"cast\" } */\n+  const constfn ** const *p17 = (const constfn ** const *) bar; /* { dg-warning \"cast\" } */\n+  const pintfn ** const *p18 = (const pintfn ** const *) bar; /* { dg-warning \"cast\" } */\n+  constfn * const * const * p19 = (constfn * const * const *) bar;\n+  pintfn * const * const * p20 = (pintfn * const * const *) bar;\n+  const constfn * const * const *p21 = (const constfn * const * const *) bar;\n+  const pintfn * const * const *p22 = (const pintfn * const * const *) bar;\n+}"}, {"sha": "eb47d99b8ed62171d08817c4db3c4e04567af7a8", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67165eb379fa57c009beb29b180cd630eacbac8e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=67165eb379fa57c009beb29b180cd630eacbac8e", "patch": "@@ -1,6 +1,6 @@\n /* Top level of GCC compilers (cc1, cc1plus, etc.)\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -2349,14 +2349,14 @@ toplev_main (int argc, char **argv)\n {\n   expandargv (&argc, &argv);\n \n-  save_argv = (const char **) argv;\n+  save_argv = CONST_CAST2 (const char **, char **, argv);\n \n   /* Initialization of GCC's environment, and diagnostics.  */\n   general_init (argv[0]);\n \n   /* Parse the options and do minimal processing; basically just\n      enough to default flags appropriately.  */\n-  decode_options (argc, (const char **) argv);\n+  decode_options (argc, CONST_CAST2 (const char **, char **, argv));\n \n   init_local_tick ();\n "}]}