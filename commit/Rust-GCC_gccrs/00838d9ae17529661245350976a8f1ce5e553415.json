{"sha": "00838d9ae17529661245350976a8f1ce5e553415", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA4MzhkOWFlMTc1Mjk2NjEyNDUzNTA5NzZhOGYxY2U1ZTU1MzQxNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-15T10:15:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-15T10:15:49Z"}, "message": "[multiple changes]\n\n2009-07-15  Sergey Rybin  <rybin@adacore.com>\n\n\t* tree_in.ads, output.adb, tree_io.ads: Get rid of pragmas Warnings\n\tOff/On for with clause to System.OS_Lib - not needed any more.\n\n2009-07-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_warn.adb (Warn_On_Constant_Condition): if the constant condition\n\tis a literal of a derived boolean type, it appears as an unchecked\n\tconversion. Retrieve actual value from expression of conversion.\n\n2009-07-15  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb: Minor reformatting\n\n\t* lib-xref.ads, lib-xref.adb, lib.ads, par_sco.ads, par_sco.adb,\n\tlib-writ.ads, lib-writ.adb: Minor reformatting.\n\tFix problem with SCO format in ALI files\n\nFrom-SVN: r149674", "tree": {"sha": "b323f92ac5c08a17d70389e07bf81bf543063039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b323f92ac5c08a17d70389e07bf81bf543063039"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00838d9ae17529661245350976a8f1ce5e553415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00838d9ae17529661245350976a8f1ce5e553415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00838d9ae17529661245350976a8f1ce5e553415", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00838d9ae17529661245350976a8f1ce5e553415/comments", "author": null, "committer": null, "parents": [{"sha": "fa01135d3e8a215c3e1eb4773ffeee2a15f3c181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa01135d3e8a215c3e1eb4773ffeee2a15f3c181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa01135d3e8a215c3e1eb4773ffeee2a15f3c181"}], "stats": {"total": 783, "additions": 399, "deletions": 384}, "files": [{"sha": "3b9b32266a971706679be021676adfc0827a8a93", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=00838d9ae17529661245350976a8f1ce5e553415", "patch": "@@ -1,3 +1,17 @@\n+2009-07-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Constant_Condition): if the constant condition\n+\tis a literal of a derived boolean type, it appears as an unchecked\n+\tconversion. Retrieve actual value from expression of conversion.\n+\n+2009-07-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb: Minor reformatting\n+\n+\t* lib-xref.ads, lib-xref.adb, lib.ads, par_sco.ads, par_sco.adb,\n+\tlib-writ.ads, lib-writ.adb: Minor reformatting.\n+\tFix problem with SCO format in ALI files\n+\n 2009-07-15  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch7.adb, exp_util.adb, tbuild.adb, tbuild.ads, exp_ch4.adb,\n@@ -36,11 +50,6 @@\n \n \t* gcc-interface/Make-lang.in: Add dependency on par_sco.o for gnat1\n \n-2009-07-15  Sergey Rybin  <rybin@adacore.com>\n-\n-\t* tree_in.ads, tree_io.ads: Add pragma Warnings Off/On for with clause\n-\tto System.OS_Lib to avoid warnings.\n-\n 2009-07-15  Robert Dewar  <dewar@adacore.com>\n \n \t* sinfo.ads, make.adb, par.ads, par.adb, sem_warn.adb: Minor"}, {"sha": "01f92d1e20a0a598935dca02025ffb5bd2a84608", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=00838d9ae17529661245350976a8f1ce5e553415", "patch": "@@ -632,12 +632,6 @@ package body Lib.Writ is\n                end if;\n             end;\n          end loop;\n-\n-         --  Output SCO information if present\n-\n-         if Generate_SCO then\n-            SCO_Output (Unit_Num);\n-         end if;\n       end Write_Unit_Information;\n \n       ----------------------\n@@ -1236,8 +1230,20 @@ package body Lib.Writ is\n          end loop;\n       end;\n \n-      Output_References;\n+      --  Output cross-reference information\n+\n       Write_Info_Terminate;\n+      Output_References;\n+\n+      --  Output SCO information if present\n+\n+      if Generate_SCO then\n+         Write_Info_Terminate;\n+         SCO_Output;\n+      end if;\n+\n+      --  Output of ALI file is complete\n+\n       Close_Output_Library_Info;\n    end Write_ALI;\n "}, {"sha": "5a15fd302dff920f4c3e5bf454a2fff417ac4302", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 269, "deletions": 283, "changes": 552, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=00838d9ae17529661245350976a8f1ce5e553415", "patch": "@@ -31,15 +31,15 @@ package Lib.Writ is\n    -- Format of Library Information --\n    -----------------------------------\n \n-   --  This section  describes the format of the library information that is\n+   --  This section describes the format of the library information that is\n    --  associated with object files. The exact method of this association is\n-   --  potentially implementation dependent and is described and implemented\n-   --  in package ali. From the point of view of the description here, all we\n-   --  need to know is that the information is represented as a string of\n-   --  characters that is somehow associated with an object file, and can be\n-   --  retrieved. If no library information exists for a given object file,\n-   --  then we take this as equivalent to the non-existence of the object\n-   --  file, as if source file has not been previously compiled.\n+   --  potentially implementation dependent and is described and implemented in\n+   --  package ali. From the point of view of the description here, all we need\n+   --  to know is that the information is represented as a string of characters\n+   --  that is somehow associated with an object file, and can be retrieved. If\n+   --  no library information exists for a given object file, then we take this\n+   --  as equivalent to the non-existence of the object file, as if source file\n+   --  has not been previously compiled.\n \n    --  The library information is written as a series of lines of the form:\n \n@@ -51,49 +51,48 @@ package Lib.Writ is\n    -- Making Changes to the ALI Format --\n    --------------------------------------\n \n-   --  A number of tools use ali.adb to parse ali files. This means\n-   --  that changes to this format can cause old versions of these tools\n-   --  to be incompatible with new versions of the compiler. Any changes\n-   --  to ali file formats must be carefully evaluated to understand any\n-   --  such possible conflicts, and in particular, it is very undesirable\n-   --  to create conflicts between older versions of GPS and newer versions\n-   --  of the compiler.\n+   --  A number of tools use ali.adb to parse ali files. This means that\n+   --  changes to this format can cause old versions of these tools to be\n+   --  incompatible with new versions of the compiler. Any changes to ali file\n+   --  formats must be carefully evaluated to understand any such possible\n+   --  conflicts, and in particular, it is very undesirable to create conflicts\n+   --  between older versions of GPS and newer versions of the compiler.\n \n    --  If the following guidelines are respected, downward compatibility\n    --  problems (old tools reading new ali files) should be minimized:\n \n    --    The basic key character format must be kept\n \n-   --    The V line must be the first line, this is checked by ali.adb\n-   --    even in Ignore_Errors mode, and is used to verify that the file\n-   --    at hand is indeed likely intended to be an ali file.\n+   --    The V line must be the first line, this is checked by ali.adb even in\n+   --    Ignore_Errors mode, and is used to verify that the file at hand is\n+   --    indeed likely intended to be an ali file.\n \n    --    The P line must be present, though may be modified in contents\n-   --    according to remaining guidelines. Again, ali.adb assumes the\n-   --    P line is present even in Ignore_Errors mode.\n+   --    according to remaining guidelines. Again, ali.adb assumes the P\n+   --    line is present even in Ignore_Errors mode.\n \n-   --    New modifiers can generally be added (in particular adding new\n-   --    two letter modifiers to the P or U lines is always safe)\n+   --    New modifiers can generally be added (in particular adding new two\n+   --    letter modifiers to the P or U lines is always safe)\n \n-   --    Adding entirely new lines (with a new key letter) to the ali\n-   --    file is always safe, at any point (other than before the V\n-   --    line), since such lines will be ignored.\n+   --    Adding entirely new lines (with a new key letter) to the ali file is\n+   --    always safe, at any point (other than before the V line), since such\n+   --    lines will be ignored.\n \n-   --  Following the guidelines in this section should ensure that this\n-   --  problem is minimized and that old tools will be able to deal\n-   --  successfully with new ali formats. Note that this does not apply\n-   --  to the compiler itself, which always requires consistency between\n-   --  the ali files and the binder. That is because one of the main\n-   --  functions of the binder is to ensure consistency of the partition,\n-   --  and this can be compromised if the ali files are inconsistent.\n+   --  Following the guidelines in this section should ensure that this problem\n+   --  is minimized and that old tools will be able to deal successfully with\n+   --  new ali formats. Note that this does not apply to the compiler itself,\n+   --  which always requires consistency between the ali files and the binder.\n+   --  That is because one of the main functions of the binder is to ensure\n+   --  consistency of the partition, and this can be compromised if the ali\n+   --  files are inconsistent.\n \n    ------------------\n    -- Header Lines --\n    ------------------\n \n    --  The initial header lines in the file give information about the\n-   --  compilation environment, and identify other special information\n-   --  such as main program parameters.\n+   --  compilation environment, and identify other special information such as\n+   --  main program parameters.\n \n    --  ----------------\n    --  -- V  Version --\n@@ -104,10 +103,10 @@ package Lib.Writ is\n    --      This line indicates the library output version, as defined in\n    --      Gnatvsn. It ensures that separate object modules of a program are\n    --      consistent. It has to be changed if anything changes which would\n-   --      affect successful binding of separately compiled modules.\n-   --      Examples of such changes are modifications in the format of the\n-   --      library info described in this package, or modifications to\n-   --      calling sequences, or to the way that data is represented.\n+   --      affect successful binding of separately compiled modules. Examples\n+   --      of such changes are modifications in the format of the library info\n+   --      described in this package, or modifications to calling sequences, or\n+   --      to the way that data is represented.\n \n    --    Note: the V line absolutely must be the first line, and no change\n    --    to the ALI format should change this, since even in Ignore_Errors\n@@ -119,8 +118,8 @@ package Lib.Writ is\n \n    --    M type [priority] [T=time-slice] W=?\n \n-   --      This line appears only if the main unit for this file is\n-   --      suitable for use as a main program. The parameters are:\n+   --      This line appears only if the main unit for this file is suitable\n+   --      for use as a main program. The parameters are:\n \n    --        type\n \n@@ -131,79 +130,79 @@ package Lib.Writ is\n    --        priority\n \n    --          Present only if there was a valid pragma Priority in the\n-   --          corresponding unit to set the main task priority. It is\n-   --          an unsigned decimal integer.\n+   --          corresponding unit to set the main task priority. It is an\n+   --          unsigned decimal integer.\n \n    --        T=time-slice\n \n    --          Present only if there was a valid pragma Time_Slice in the\n-   --          corresponding unit. It is an unsigned decimal integer in\n-   --          the range 0 .. 10**9 giving the time slice value in units\n-   --          of milliseconds. The actual significance of this parameter\n-   --          is target dependent.\n+   --          corresponding unit. It is an unsigned decimal integer in the\n+   --          range 0 .. 10**9 giving the time slice value in units of\n+   --          milliseconds. The actual significance of this parameter is\n+   --          target dependent.\n \n    --        W=?\n \n-   --          This parameter indicates the wide character encoding\n-   --          method used when compiling the main program file. The ?\n-   --          character is the single character used in the -gnatW?\n-   --          switch. This is used to provide the default wide-character\n-   --          encoding for Wide_Text_IO files.\n+   --          This parameter indicates the wide character encoding method used\n+   --          when compiling the main program file. The ? character is the\n+   --          single character used in the -gnatW? switch. This is used to\n+   --          provide the default wide-character encoding for Wide_Text_IO\n+   --          files.\n \n    --  -----------------\n    --  -- A  Argument --\n    --  -----------------\n \n    --    A argument\n \n-   --      One of these lines appears for each of the arguments present\n-   --      in the call to the gnat1 program. This can be used if it is\n-   --      necessary to reconstruct this call (e.g. for fix and continue)\n+   --      One of these lines appears for each of the arguments present in the\n+   --      call to the gnat1 program. This can be used if it is necessary to\n+   --      reconstruct this call (e.g. for fix and continue)\n \n    --  -------------------\n    --  -- P  Parameters --\n    --  -------------------\n \n    --    P <<parameters>>\n \n-   --      Indicates various information that applies to the compilation\n-   --      of the corresponding source file. Parameters is a sequence of\n-   --      zero or more two letter codes that indicate configuration\n-   --      pragmas and other parameters that apply:\n+   --      Indicates various information that applies to the compilation of the\n+   --      corresponding source file. Parameters is a sequence of zero or more\n+   --      two letter codes that indicate configuration pragmas and other\n+   --      parameters that apply:\n    --\n    --      The arguments are as follows:\n    --\n-   --         CE   Compilation errors. If this is present it means that the\n-   --              ali file resulted from a compilation with the -gnatQ\n-   --              switch set, and illegalities were detected. The ali\n-   --              file contents may not be completely reliable, but the\n-   --              format will be correct and complete. Note that NO is\n-   --              always present if CE is present.\n+   --         CE   Compilation errors. If this is present it means that the ali\n+   --              file resulted from a compilation with the -gnatQ switch set,\n+   --              and illegalities were detected. The ali file contents may\n+   --              not be completely reliable, but the format will be correct\n+   --              and complete. Note that NO is always present if CE is\n+   --              present.\n    --\n-   --         DB   Detect_Blocking pragma is in effect for all units in\n-   --              this file.\n+   --         DB   Detect_Blocking pragma is in effect for all units in this\n+   --              file.\n    --\n-   --         FD   Configuration pragmas apply to all the units in this\n-   --              file specifying a possibly non-standard floating point\n-   --              format (VAX float with Long_Float using D_Float)\n+   --         FD   Configuration pragmas apply to all the units in this file\n+   --              specifying a possibly non-standard floating point format\n+   --              (VAX float with Long_Float using D_Float).\n    --\n-   --         FG   Configuration pragmas apply to all the units in this\n-   --              file specifying a possibly non-standard floating point\n-   --              format (VAX float with Long_Float using G_Float)\n+   --         FG   Configuration pragmas apply to all the units in this file\n+   --              specifying a possibly non-standard floating point format\n+   --              (VAX float with Long_Float using G_Float).\n    --\n-   --         FI   Configuration pragmas apply to all the units in this\n-   --              file specifying a possibly non-standard floating point\n-   --              format (IEEE Float)\n+   --         FI   Configuration pragmas apply to all the units in this file\n+   --              specifying a possibly non-standard floating point format\n+   --              (IEEE Float).\n    --\n-   --         Lx   A valid Locking_Policy pragma applies to all the units\n-   --              in this file, where x is the first character (upper case)\n-   --              of the policy name (e.g. 'C' for Ceiling_Locking)\n+   --         Lx   A valid Locking_Policy pragma applies to all the units in\n+   --              this file, where x is the first character (upper case) of\n+   --              the policy name (e.g. 'C' for Ceiling_Locking).\n    --\n-   --         NO   No object. This flag indicates that the units in this\n-   --              file were not compiled to produce an object. This can\n-   --              occur as a result of the use of -gnatc, or if no object\n-   --              can be produced (e.g. when a package spec is compiled\n-   --              instead of the body, or a subunit on its own).\n+   --         NO   No object. This flag indicates that the units in this file\n+   --              were not compiled to produce an object. This can occur as a\n+   --              result of the use of -gnatc, or if no object can be produced\n+   --              (e.g. when a package spec is compiled instead of the body,\n+   --              or a subunit on its own).\n    --\n    --         NR   No_Run_Time. Indicates that a pragma No_Run_Time applies\n    --              to all units in the file.\n@@ -241,9 +240,9 @@ package Lib.Writ is\n    --      possible cases. These values are checked for consistency by the\n    --      binder and then copied to the generated binder output file.\n \n-   --    Note: The P line must be present. Even in Ignore_Errors mode,\n-   --    Scan_ALI insists on finding a P line. So if changes are made to\n-   --    the ALI format, they should not include removing the P line!\n+   --    Note: The P line must be present. Even in Ignore_Errors mode, Scan_ALI\n+   --    insists on finding a P line. So if changes are made to the ALI format,\n+   --    they should not include removing the P line!\n \n    --  ---------------------\n    --  -- R  Restrictions --\n@@ -257,74 +256,71 @@ package Lib.Writ is\n    --    R <<restriction-characters>> <<restriction-param-id-entries>>\n \n    --      The first parameter is a string of characters that records\n-   --      information regarding restrictions that do not take parameter\n-   --      not take parameter values. It is a string of characters, one\n-   --      character for each value (in order) in All_Boolean_Restrictions.\n-   --      There are three possible settings for each restriction:\n+   --      information regarding restrictions that do not take parameter not\n+   --      take parameter values. It is a string of characters, one character\n+   --      for each value (in order) in All_Boolean_Restrictions. There are\n+   --      three possible settings for each restriction:\n \n    --        r   Restricted. Unit was compiled under control of a pragma\n-   --            Restrictions for the corresponding restriction. In\n-   --            this case the unit certainly does not violate the\n-   --            Restriction, since this would have been detected by\n-   --            the compiler.\n+   --            Restrictions for the corresponding restriction. In this case\n+   --            the unit certainly does not violate the Restriction, since\n+   --            this would have been detected by the compiler.\n \n-   --        n   Not used. The unit was not compiled under control of a\n-   --            pragma Restrictions for the corresponding restriction,\n-   --            and does not make any use of the referenced feature.\n+   --        n   Not used. The unit was not compiled under control of a pragma\n+   --            Restrictions for the corresponding restriction, and does not\n+   --            make any use of the referenced feature.\n \n-   --        v   Violated. The unit was not compiled under control of a\n-   --            pragma Restrictions for the corresponding restriction,\n-   --            and it does indeed use the referenced feature.\n+   --        v   Violated. The unit was not compiled under control of a pragma\n+   --            Restrictions for the corresponding restriction, and it does\n+   --            indeed use the referenced feature.\n \n-   --      This information is used in the binder to check consistency,\n-   --      i.e. to detect cases where one unit has \"r\" and another unit\n-   --      has \"v\", which is not permitted, since these restrictions\n-   --      are partition-wide.\n+   --      This information is used in the binder to check consistency, i.e. to\n+   --      detect cases where one unit has \"r\" and another unit has \"v\", which\n+   --      is not permitted, since these restrictions are partition-wide.\n \n-   --  The second parameter, which immediately follows the first (with\n-   --  no separating space) gives restriction information for identifiers\n-   --  for which a parameter is given.\n+   --  The second parameter, which immediately follows the first (with no\n+   --  separating space) gives restriction information for identifiers for\n+   --  which a parameter is given.\n \n    --      The parameter is a string of entries, one for each value in\n-   --      Restrict.All_Parameter_Restrictions. Each entry has two\n-   --      components in sequence, the first indicating whether or not\n-   --      there is a restriction, and the second indicating whether\n-   --      or not the compiler detected violations. In the boolean case\n-   --      it is not necessary to separate these, since if a restriction\n-   --      is set, and violated, that is an error. But in the parameter\n-   --      case, this is not true. For example, we can have a unit with\n-   --      a pragma Restrictions (Max_Tasks => 4), where the compiler\n-   --      can detect that there are exactly three tasks declared. Both\n-   --      of these pieces of information must be passed to the binder.\n-   --      The parameter of 4 is important in case the total number of\n-   --      tasks in the partition is greater than 4. The parameter of\n-   --      3 is important in case some other unit has a restrictions\n-   --      pragma with Max_Tasks=>2.\n+   --      Restrict.All_Parameter_Restrictions. Each entry has two components\n+   --      in sequence, the first indicating whether or not there is a\n+   --      restriction, and the second indicating whether or not the compiler\n+   --      detected violations. In the boolean case it is not necessary to\n+   --      separate these, since if a restriction is set, and violated, that is\n+   --      an error. But in the parameter case, this is not true. For example,\n+   --      we can have a unit with a pragma Restrictions (Max_Tasks => 4),\n+   --      where the compiler can detect that there are exactly three tasks\n+   --      declared. Both of these pieces of information must be passed to the\n+   --      binder. The parameter of 4 is important in case the total number of\n+   --      tasks in the partition is greater than 4. The parameter of 3 is\n+   --      important in case some other unit has a restrictions pragma with\n+   --      Max_Tasks=>2.\n \n    --      The component for the presence of restriction has one of two\n    --      possible forms:\n \n-   --         n   No pragma for this restriction is present in the\n-   --             set of units for this ali file.\n+   --         n   No pragma for this restriction is present in the set of units\n+   --             for this ali file.\n \n-   --         rN  At least one pragma for this restriction is present\n-   --             in the set of units for this ali file. The value N\n-   --             is the minimum parameter value encountered in any\n-   --             such pragma. N is in the range of Integer (a value\n-   --             larger than N'Last causes the pragma to be ignored).\n+   --         rN  At least one pragma for this restriction is present in the\n+   --             set of units for this ali file. The value N is the minimum\n+   --             parameter value encountered in any such pragma. N is in the\n+   --             range of Integer (a value larger than N'Last causes the\n+   --             pragma to be ignored).\n \n    --      The component for the violation detection has one of three\n    --      possible forms:\n \n    --         n   No violations were detected by the compiler\n \n    --         vN  A violation was detected. N is either the maximum or total\n-   --             count of violations (depending on the checking type) in\n-   --             all the units represented by the ali file). Note that\n-   --             this setting is only allowed for restrictions that are\n-   --             in Checked_[Max|Sum]_Parameter_Restrictions. The value\n-   --             here is known to be exact by the compiler and is in the\n-   --             range of Natural.\n+   --             count of violations (depending on the checking type) in all\n+   --             the units represented by the ali file). Note that this\n+   --             setting is only allowed for restrictions that are in\n+   --             Checked_[Max|Sum]_Parameter_Restrictions. The value here is\n+   --             known to be exact by the compiler and is in the range of\n+   --             Natural.\n \n    --         vN+ A violation was detected. The compiler cannot determine\n    --             the exact count of violations, but it is at least N.\n@@ -354,18 +350,18 @@ package Lib.Writ is\n \n    --    I interrupt-number interrupt-state line-number\n \n-   --      This line records information from an Interrupt_State pragma.\n-   --      There is one line for each separate pragma, and if no such\n-   --      pragmas are used, then no I lines are present.\n+   --      This line records information from an Interrupt_State pragma. There\n+   --      is one line for each separate pragma, and if no such pragmas are\n+   --      used, then no I lines are present.\n \n-   --      The interrupt-number is an unsigned positive integer giving\n-   --      the value of the interrupt as defined in Ada.Interrupts.Names.\n+   --      The interrupt-number is an unsigned positive integer giving the\n+   --      value of the interrupt as defined in Ada.Interrupts.Names.\n \n    --      The interrupt-state is one of r/s/u for Runtime/System/User\n \n-   --      The line number is an unsigned decimal integer giving the\n-   --      line number of the corresponding Interrupt_State pragma.\n-   --      This is used in consistency messages.\n+   --      The line number is an unsigned decimal integer giving the line\n+   --      number of the corresponding Interrupt_State pragma. This is used\n+   --      in consistency messages.\n \n    --  -------------------------------------\n    --  -- S Priority Specific Dispatching --\n@@ -383,23 +379,22 @@ package Lib.Writ is\n    --      The first_priority and last_priority fields define the range of\n    --      priorities to which the specified dispatching policy apply.\n \n-   --      The line number is an unsigned decimal integer giving the\n-   --      line number of the corresponding Priority_Specific_Dispatching\n-   --      pragma. This is used in consistency messages.\n+   --      The line number is an unsigned decimal integer giving the line\n+   --      number of the corresponding Priority_Specific_Dispatching pragma.\n+   --      This is used in consistency messages.\n \n    ----------------------------\n    -- Compilation Unit Lines --\n    ----------------------------\n \n    --  Following these header lines, a set of information lines appears for\n-   --  each compilation unit that appears in the corresponding object file.\n-   --  In particular, when a package body or subprogram body is compiled,\n-   --  there will be two sets of information, one for the spec and one for\n-   --  the body, with the entry for the body appearing first. This is the\n-   --  only case in which a single ALI file contains more than one unit (in\n-   --  particular note that subunits do *not* count as compilation units for\n-   --  this purpose, and generate no library information, since they are\n-   --  inlined).\n+   --  each compilation unit that appears in the corresponding object file. In\n+   --  particular, when a package body or subprogram body is compiled, there\n+   --  will be two sets of information, one for the spec and one for the body,\n+   --  with the entry for the body appearing first. This is the only case in\n+   --  which a single ALI file contains more than one unit (in particular note\n+   --  that subunits do *not* count as compilation units for this purpose, and\n+   --  generate no library information, since they are inlined).\n \n    --  --------------------\n    --  -- U  Unit Header --\n@@ -409,15 +404,14 @@ package Lib.Writ is\n \n    --    U unit-name source-name version <<attributes>>\n    --\n-   --      This line identifies the unit to which this section of the\n-   --      library information file applies. The first three parameters are\n-   --      the unit name in internal format, as described in package Uname,\n-   --      and the name of the source file containing the unit.\n+   --      This line identifies the unit to which this section of the library\n+   --      information file applies. The first three parameters are the unit\n+   --      name in internal format, as described in package Uname, and the name\n+   --      of the source file containing the unit.\n    --\n-   --      Version is the version given as eight hexadecimal characters\n-   --      with upper case letters. This value is the exclusive or of the\n-   --      source checksums of the unit and all its semantically dependent\n-   --      units.\n+   --      Version is the version given as eight hexadecimal characters with\n+   --      upper case letters. This value is the exclusive or of the source\n+   --      checksums of the unit and all its semantically dependent units.\n    --\n    --      The <<attributes>> are a series of two letter codes indicating\n    --      information about the unit:\n@@ -430,47 +424,47 @@ package Lib.Writ is\n    --             not promise, to keep the elaboration of the body close to\n    --             the elaboration of the spec.\n    --\n-   --         DE  Dynamic Elaboration. This unit was compiled with the\n-   --             dynamic elaboration model, as set by either the -gnatE\n-   --             switch or pragma Elaboration_Checks (Dynamic).\n+   --         DE  Dynamic Elaboration. This unit was compiled with the dynamic\n+   --             elaboration model, as set by either the -gnatE switch or\n+   --             pragma Elaboration_Checks (Dynamic).\n    --\n-   --         EB  Unit has pragma Elaborate_Body, or is a generic instance\n-   --             that has a body. Set for instances because RM 12.3(20)\n-   --             requires that the body be immediately elaborated after the\n-   --             spec (we would normally do that anyway, because elaborate\n-   --             spec and body together whenever possible, and for an instance\n-   --             it is always possible; however setting EB ensures that this\n-   --             is done even when using the -p gnatbind switch).\n+   --         EB  Unit has pragma Elaborate_Body, or is a generic instance that\n+   --             has a body. Set for instances because RM 12.3(20) requires\n+   --             that the body be immediately elaborated after the spec (we\n+   --             would normally do that anyway, because elaborate spec and\n+   --             body together whenever possible, and for an instance it is\n+   --             always possible; however setting EB ensures that this is done\n+   --             even when using the -p gnatbind switch).\n    --\n    --         EE  Elaboration entity is present which must be set true when\n-   --             the unit is elaborated. The name of the elaboration entity\n-   --             is formed from the unit name in the usual way. If EE is\n-   --             present, then this boolean must be set True as part of the\n-   --             elaboration processing routine generated by the binder.\n-   --             Note that EE can be set even if NE is set. This happens\n-   --             when the boolean is needed solely for checking for the\n-   --             case of access before elaboration.\n+   --             the unit is elaborated. The name of the elaboration entity is\n+   --             formed from the unit name in the usual way. If EE is present,\n+   --             then this boolean must be set True as part of the elaboration\n+   --             processing routine generated by the binder. Note that EE can\n+   --             be set even if NE is set. This happens when the boolean is\n+   --             needed solely for checking for the case of access before\n+   --             elaboration.\n    --\n    --         GE  Unit is a generic declaration, or corresponding body\n    --\n-   --         IL  Unit source uses a style with identifiers in all lower\n-   --         IU  case (IL) or all upper case (IU). If the standard mixed-\n-   --             case usage is detected, or the compiler cannot determine\n-   --             the style, then no I parameter will appear.\n+   --         IL  Unit source uses a style with identifiers in all lower-case\n+   --         IU  (IL) or all upper case (IU). If the standard mixed-case usage\n+   --             is detected, or the compiler cannot determine the style, then\n+   --             no I parameter will appear.\n    --\n    --         IS  Initialize_Scalars pragma applies to this unit, or else there\n    --             is at least one use of the Invalid_Value attribute.\n    --\n-   --         KM  Unit source uses a style with keywords in mixed case\n-   --         KU  (KM) or all upper case (KU). If the standard lower-case\n-   --             usage is detected, or the compiler cannot determine the\n-   --             style, then no K parameter will appear.\n+   --         KM  Unit source uses a style with keywords in mixed case (KM)\n+   --         KU  or all upper case (KU). If the standard lower-case usage is\n+   --             is detected, or the compiler cannot determine the style, then\n+   --             no K parameter will appear.\n    --\n-   --         NE  Unit has no elaboration routine. All subprogram bodies\n-   --             and specs are in this category. Package bodies and specs\n-   --             may or may not have NE set, depending on whether or not\n-   --             elaboration code is required. Set if N_Compilation_Unit\n-   --             node has flag Has_No_Elaboration_Code set.\n+   --         NE  Unit has no elaboration routine. All subprogram bodies and\n+   --             specs are in this category. Package bodies and specs may or\n+   --             may not have NE set, depending on whether or not elaboration\n+   --             code is required. Set if N_Compilation_Unit node has flag\n+   --             Has_No_Elaboration_Code set.\n    --\n    --         OL   The units in this file are compiled with a local pragma\n    --              Optimize_Alignment, so no consistency requirement applies\n@@ -515,10 +509,10 @@ package Lib.Writ is\n \n    --    W unit-name [source-name lib-name] [E] [EA] [ED] [AD]\n    --\n-   --      One of these lines is present for each unit that is mentioned in\n-   --      an explicit with clause by the current unit. The first parameter is\n-   --      the unit name in internal format. The second parameter is the file\n-   --      name of the file that must be compiled to compile this unit. It is\n+   --      One of these lines is present for each unit that is mentioned in an\n+   --      explicit with clause by the current unit. The first parameter is the\n+   --      unit name in internal format. The second parameter is the file name\n+   --      of the file that must be compiled to compile this unit. It is\n    --      usually the file for the body, except for packages which have no\n    --      body. For units that need a body, if the source file for the body\n    --      cannot be found, the file name of the spec is used instead. The\n@@ -530,33 +524,31 @@ package Lib.Writ is\n    --\n    --        EA  pragma Elaborate_All applies to this unit\n    --\n-   --        ED  Elaborate_Desirable set for this unit, which means\n-   --            that there is no Elaborate, but the analysis suggests\n-   --            that Program_Error may be raised if the Elaborate\n-   --            conditions cannot be satisfied. The binder will attempt\n-   --            to treat ED as E if it can.\n+   --        ED  Elaborate_Desirable set for this unit, which means that there\n+   --            is no Elaborate, but the analysis suggests that Program_Error\n+   --            may be raised if the Elaborate conditions cannot be satisfied.\n+   --            The binder will attempt to treat ED as E if it can.\n    --\n-   --        AD  Elaborate_All_Desirable set for this unit, which means\n-   --            that there is no Elaborate_All, but the analysis suggests\n-   --            that Program_Error may be raised if the Elaborate_All\n-   --            conditions cannot be satisfied. The binder will attempt\n-   --            to treat AD as EA if it can.\n+   --        AD  Elaborate_All_Desirable set for this unit, which means that\n+   --            there is no Elaborate_All, but the analysis suggests that\n+   --            Program_Error may be raised if the Elaborate_All conditions\n+   --            cannot be satisfied. The binder will attempt to treat AD as\n+   --            EA if it can.\n    --\n-   --      The parameter source-name and lib-name are omitted for the case\n-   --      of a generic unit compiled with earlier versions of GNAT which\n-   --      did not generate object or ali files for generics.\n+   --      The parameter source-name and lib-name are omitted for the case of a\n+   --      generic unit compiled with earlier versions of GNAT which did not\n+   --      generate object or ali files for generics.\n \n    --  In fact W lines include implicit withs ???\n \n    --  -----------------------\n    --  -- L  Linker_Options --\n    --  -----------------------\n \n-   --  Following the W lines (if any, or the U line if not), are an\n-   --  optional series of lines that indicates the usage of the pragma\n-   --  Linker_Options in the associated unit. For each appearance of a\n-   --  pragma Linker_Options (or Link_With) in the unit, a line is\n-   --  present with the form:\n+   --  Following the W lines (if any, or the U line if not), are an optional\n+   --  series of lines that indicates the usage of the pragma Linker_Options in\n+   --  the associated unit. For each appearance of a pragma Linker_Options (or\n+   --  Link_With) in the unit, a line is present with the form:\n \n    --    L \"string\"\n \n@@ -570,50 +562,39 @@ package Lib.Writ is\n    --             to separate multiple arguments of a single\n    --             Linker_Options pragma.\n \n-   --      For further details, see Stringt.Write_String_Table_Entry. Note\n-   --      that wide characters in the form {hhhh} cannot be produced, since\n-   --      pragma Linker_Option accepts only String, not Wide_String.\n+   --      For further details, see Stringt.Write_String_Table_Entry. Note that\n+   --      wide characters in the form {hhhh} cannot be produced, since pragma\n+   --      Linker_Option accepts only String, not Wide_String.\n \n    --      The L lines are required to appear in the same order as the\n-   --      corresponding Linker_Options (or Link_With) pragmas appear in\n-   --      the source file, so that this order is preserved by the binder\n-   --      in constructing the set of linker arguments.\n-\n-   --  ------------------------------------\n-   --  -- C  Source Coverage Obligations --\n-   --  -------------------------------------\n-\n-   --  Following the L lines (if any) are the SCO (Source Coverage Obligation)\n-   --  lines if they are being generated. For the full format of these lines,\n-   --  see the spec of Par_SCO.\n+   --      corresponding Linker_Options (or Link_With) pragmas appear in the\n+   --      source file, so that this order is preserved by the binder in\n+   --      constructing the set of linker arguments.\n \n    ---------------------\n    -- Reference Lines --\n    ---------------------\n \n-   --  The reference lines contain information about references from\n-   --  any of the units in the compilation (including, body version\n-   --  and version attributes, linker options pragmas and source\n-   --  dependencies.\n+   --  The reference lines contain information about references from any of the\n+   --  units in the compilation (including, body version and version\n+   --  attributes, linker options pragmas and source dependencies.\n \n    --  ------------------------------------\n    --  -- E  External Version References --\n    --  ------------------------------------\n \n-   --  One of these lines is present for each use of 'Body_Version or\n-   --  'Version in any of the units of the compilation. These are used\n-   --  by the linker to determine which version symbols must be output.\n-   --  The format is simply:\n+   --  One of these lines is present for each use of 'Body_Version or 'Version\n+   --  in any of the units of the compilation. These are used by the linker to\n+   --  determine which version symbols must be output. The format is simply:\n \n    --    E name\n \n-   --  where name is the external name, i.e. the unit name with either\n-   --  a S or a B for spec or body version referenced (Body_Version\n-   --  always references the body, Version references the Spec, except\n-   --  in the case of a reference to a subprogram with no separate spec).\n-   --  Upper half and wide character codes are encoded using the same\n-   --  method as in Namet (Uhh for upper half, Whhhh for wide character,\n-   --  where hh are hex digits).\n+   --  where name is the external name, i.e. the unit name with either a S or a\n+   --  B for spec or body version referenced (Body_Version always references\n+   --  the body, Version references the Spec, except in the case of a reference\n+   --  to a subprogram with no separate spec). Upper half and wide character\n+   --  codes are encoded using the same method as in Namet (Uhh for upper half,\n+   --  Whhhh for wide character, where hh are hex digits).\n \n    --  ---------------------\n    --  -- D  Dependencies --\n@@ -625,55 +606,60 @@ package Lib.Writ is\n \n    --    D source-name time-stamp checksum [subunit-name] line:file-name\n \n-   --      The time-stamp field contains the time stamp of the\n-   --      corresponding source file. See types.ads for details on\n-   --      time stamp representation.\n+   --      The time-stamp field contains the time stamp of the corresponding\n+   --      source file. See types.ads for details on time stamp representation.\n \n-   --      The checksum is an 8-hex digit representation of the source\n-   --      file checksum, with letters given in lower case.\n+   --      The checksum is an 8-hex digit representation of the source file\n+   --      checksum, with letters given in lower case.\n \n-   --      The subunit name is present only if the dependency line is for\n-   --      a subunit. It contains the fully qualified name of the subunit\n-   --      in all lower case letters.\n+   --      The subunit name is present only if the dependency line is for a\n+   --      subunit. It contains the fully qualified name of the subunit in all\n+   --      lower case letters.\n \n    --      The line:file-name entry is present only if a Source_Reference\n-   --      pragma appeared in the source file identified by source-name.\n-   --      In this case, it gives the information from this pragma. Note\n-   --      that this allows cross-reference information to be related back\n-   --      to the original file. Note: the reason the line number comes\n-   --      first is that a leading digit immediately identifies this as\n-   --      a Source_Reference entry, rather than a subunit-name.\n-\n-   --      A line number of zero for line: in this entry indicates that\n-   --      there is more than one source reference pragma. In this case,\n-   --      the line numbers in the cross-reference are correct, and refer\n-   --      to the original line number, but there is no information that\n-   --      allows a reader of the ALI file to determine the exact mapping\n-   --      of physical line numbers back to the original source.\n+   --      pragma appeared in the source file identified by source-name. In\n+   --      this case, it gives the information from this pragma. Note that this\n+   --      allows cross-reference information to be related back to the\n+   --      original file. Note: the reason the line number comes first is that\n+   --      a leading digit immediately identifies this as a Source_Reference\n+   --      entry, rather than a subunit-name.\n+\n+   --      A line number of zero for line: in this entry indicates that there\n+   --      is more than one source reference pragma. In this case, the line\n+   --      numbers in the cross-reference are correct, and refer to the\n+   --      original line number, but there is no information that allows a\n+   --      reader of the ALI file to determine the exact mapping of physical\n+   --      line numbers back to the original source.\n \n    --      Files with a zero checksum and a non-zero time stamp are in general\n    --      files on which the compilation depends but which are not Ada files\n    --      with further dependencies. This includes preprocessor data files\n    --      and preprocessor definition files.\n \n-   --      Note: blank lines are ignored when the library information is\n-   --      read, and separate sections of the file are separated by blank\n-   --      lines to ease readability. Blanks between fields are also\n-   --      ignored.\n+   --      Note: blank lines are ignored when the library information is read,\n+   --      and separate sections of the file are separated by blank lines to\n+   --      ease readability. Blanks between fields are also ignored.\n \n-   --      For entries corresponding to files that were not present (and\n-   --      thus resulted in error messages), or for files that are not\n-   --      part of the dependency set, both the time stamp and checksum\n-   --      are set to all zero characters. These dummy entries are ignored\n-   --      by the binder in dependency checking, but must be present for\n-   --      proper interpretation of the cross-reference data.\n+   --      For entries corresponding to files that were not present (and thus\n+   --      resulted in error messages), or for files that are not part of the\n+   --      dependency set, both the time stamp and checksum are set to all zero\n+   --      characters. These dummy entries are ignored by the binder in\n+   --      dependency checking, but must be present for proper interpretation\n+   --      of the cross-reference data.\n \n    --------------------------\n    -- Cross-Reference Data --\n    --------------------------\n \n-   --  The cross-reference data follows the dependency lines. See\n-   --  the spec of Lib.Xref for details on the format of this data.\n+   --  The cross-reference data follows the dependency lines. See the spec of\n+   --  Lib.Xref for details on the format of this data.\n+\n+   ---------------------------------\n+   -- Source Coverage Obligations --\n+   ---------------------------------\n+\n+   --  The Source Coverage Obligation (SCO) information follows the cross-\n+   --  reference data. See the spec of Par_SCO for full details of the format.\n \n    ----------------------\n    -- Global_Variables --\n@@ -706,9 +692,9 @@ package Lib.Writ is\n \n    --  The table structure defined here stores one entry for each\n    --  Priority_Specific_Dispatching pragma encountered either in the main\n-   --  source or in an ancillary with'ed source. Since\n-   --  have to be consistent across all units in a partition, we may\n-   --  as well detect inconsistencies at compile time when we can.\n+   --  source or in an ancillary with'ed source. Since have to be consistent\n+   --  across all units in a partition, we may as well detect inconsistencies\n+   --  at compile time when we can.\n \n    type Specific_Dispatching_Entry is record\n       Dispatching_Policy : Character;\n@@ -739,9 +725,9 @@ package Lib.Writ is\n    -----------------\n \n    procedure Ensure_System_Dependency;\n-   --  This procedure ensures that a dependency is created on system.ads.\n-   --  Even if there is no semantic dependency, Targparm has read the\n-   --  file to acquire target parameters, so we need a source dependency.\n+   --  This procedure ensures that a dependency is created on system.ads. Even\n+   --  if there is no semantic dependency, Targparm has read the file to\n+   --  acquire target parameters, so we need a source dependency.\n \n    procedure Write_ALI (Object : Boolean);\n    --  This procedure writes the library information for the current main unit\n@@ -755,7 +741,7 @@ package Lib.Writ is\n    --  the A lines in this file.\n \n    procedure Add_Preprocessing_Dependency (S : Source_File_Index);\n-   --  Indicate that there is a dependency to be added on a preprocessing\n-   --  data file or on a preprocessing definition file.\n+   --  Indicate that there is a dependency to be added on a preprocessing data\n+   --  file or on a preprocessing definition file.\n \n end Lib.Writ;"}, {"sha": "516fc55261fd8302854ac532e2622939f90b58d0", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=00838d9ae17529661245350976a8f1ce5e553415", "patch": "@@ -2137,6 +2137,7 @@ package body Lib.Xref is\n \n                         begin\n                            Write_Info_Char ('[');\n+\n                            if Curru /= Gen_U then\n                               Write_Info_Nat (Dependency_Num (Gen_U));\n                               Write_Info_Char ('|');\n@@ -2230,7 +2231,7 @@ package body Lib.Xref is\n                         Output_Import_Export_Info (XE.Ent);\n                      end if;\n \n-                     Write_Info_Nat  (Int (Get_Column_Number (XE.Loc)));\n+                     Write_Info_Nat (Int (Get_Column_Number (XE.Loc)));\n \n                      Output_Instantiation_Refs (Sloc (XE.Ent));\n                   end if;"}, {"sha": "b494454e38ec8e8396253d3cbc71ce5f63480138", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=00838d9ae17529661245350976a8f1ce5e553415", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1998-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,7 +42,7 @@ package Lib.Xref is\n    --     X  dependency-number  filename\n \n    --        This header precedes xref information (entities/references from\n-   --        the unit, identified by dependency number and file name. The\n+   --        the unit), identified by dependency number and file name. The\n    --        dependency number is the index into the generated D lines and\n    --        is ones origin (i.e. 2 = reference to second generated D line).\n "}, {"sha": "9c36d91ff359d2c6a41aac6d41ce8ee7a9a99802", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=00838d9ae17529661245350976a8f1ce5e553415", "patch": "@@ -295,7 +295,7 @@ package Lib is\n    --      order. The number is ones origin, so a value of 2 refers to the\n    --      second generated D line. The Dependency_Number values are set\n    --      as the D lines are generated, and are used to generate proper\n-   --      unit references in the generated xref information.\n+   --      unit references in the generated xref information and SCO output.\n \n    --    Dynamic_Elab\n    --      A flag indicating if this unit was compiled with dynamic elaboration"}, {"sha": "141c12fb294eedd2c8f593f377f6ba730fb581c5", "filename": "gcc/ada/output.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Foutput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Foutput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.adb?ref=00838d9ae17529661245350976a8f1ce5e553415", "patch": "@@ -29,13 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Note: the pragma Warnings (Off) here is because ASIS compiles this unit\n---  without -gnatg, and System.OS_Lib is an implementation unit. This is a\n---  temporary kludge which will be better resolved later on ???\n-\n-pragma Warnings (Off);\n with System.OS_Lib; use System.OS_Lib;\n-pragma Warnings (On);\n \n package body Output is\n "}, {"sha": "e0b5db3421e20a958803eb951f4ba035c25279fa", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 63, "deletions": 58, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=00838d9ae17529661245350976a8f1ce5e553415", "patch": "@@ -536,9 +536,10 @@ package body Par_SCO is\n    -- SCO_Output --\n    ----------------\n \n-   procedure SCO_Output (U : Unit_Number_Type) is\n+   procedure SCO_Output is\n       Start : Nat;\n       Stop  : Nat;\n+      U     : Unit_Number_Type;\n \n       procedure Output_Range (From : Source_Ptr; To : Source_Ptr);\n       --  Outputs Sloc range in line:col-line:col format (for now we do not\n@@ -566,10 +567,19 @@ package body Par_SCO is\n          dsco;\n       end if;\n \n-      --  Find entry in unit table and set Start/Stop bounds in SCO table\n+      --  Loop through entries in the unit table\n \n       for J in SCO_Unit_Table.First .. SCO_Unit_Table.Last loop\n-         if U = SCO_Unit_Table.Table (J).Unit then\n+         U := SCO_Unit_Table.Table (J).Unit;\n+\n+         if In_Extended_Main_Source_Unit (Cunit_Entity (U)) then\n+            Write_Info_Initiate ('C');\n+            Write_Info_Char (' ');\n+            Write_Info_Nat (Dependency_Num (U));\n+            Write_Info_Char (' ');\n+            Write_Info_Name (Reference_Name (Source_Index (U)));\n+            Write_Info_Terminate;\n+\n             Start := SCO_Unit_Table.Table (J).Index;\n \n             if J = SCO_Unit_Table.Last then\n@@ -578,76 +588,70 @@ package body Par_SCO is\n                Stop := SCO_Unit_Table.Table (J + 1).Index - 1;\n             end if;\n \n-            exit;\n-         end if;\n-\n-         --  Seems like we should find the unit, but for now ignore ???\n-\n-         return;\n-      end loop;\n+            --  Loop through relevant entries in SCO table, outputting C lines\n \n-      --  Loop through relevant entries in SCO table, outputting C lines\n-\n-      while Start <= Stop loop\n-         declare\n-            T : SCO_Table_Entry renames SCO_Table.Table (Start);\n+            while Start <= Stop loop\n+               declare\n+                  T : SCO_Table_Entry renames SCO_Table.Table (Start);\n \n-         begin\n-            Write_Info_Initiate ('C');\n-            Write_Info_Char (T.C1);\n+               begin\n+                  Write_Info_Initiate ('C');\n+                  Write_Info_Char (T.C1);\n \n-            case T.C1 is\n+                  case T.C1 is\n \n-               --  Statements, entry, exit\n+                     --  Statements, entry, exit\n \n-               when 'S' | 'Y' | 'T' =>\n-                  Write_Info_Char (' ');\n-                  Output_Range (T.From, T.To);\n+                  when 'S' | 'Y' | 'T' =>\n+                     Write_Info_Char (' ');\n+                     Output_Range (T.From, T.To);\n \n-               --  Decision\n+                     --  Decision\n \n-               when 'I' | 'E' | 'W' | 'X' =>\n-                  if T.C2 = ' ' then\n-                     Start := Start + 1;\n-                  end if;\n+                  when 'I' | 'E' | 'W' | 'X' =>\n+                     if T.C2 = ' ' then\n+                        Start := Start + 1;\n+                     end if;\n \n-                  --  Loop through table entries for this decision\n+                     --  Loop through table entries for this decision\n \n-                  loop\n-                     declare\n-                        T : SCO_Table_Entry renames SCO_Table.Table (Start);\n+                     loop\n+                        declare\n+                           T : SCO_Table_Entry renames SCO_Table.Table (Start);\n \n-                     begin\n-                        Write_Info_Char (' ');\n+                        begin\n+                           Write_Info_Char (' ');\n \n-                        if T.C1 = '!' or else\n-                           T.C1 = '^' or else\n-                           T.C1 = '&' or else\n-                           T.C1 = '|'\n-                        then\n-                           Write_Info_Char (T.C1);\n+                           if T.C1 = '!' or else\n+                             T.C1 = '^' or else\n+                             T.C1 = '&' or else\n+                             T.C1 = '|'\n+                           then\n+                              Write_Info_Char (T.C1);\n \n-                        else\n-                           Write_Info_Char (T.C2);\n-                           Output_Range (T.From, T.To);\n-                        end if;\n+                           else\n+                              Write_Info_Char (T.C2);\n+                              Output_Range (T.From, T.To);\n+                           end if;\n \n-                        exit when T.Last;\n-                        Start := Start + 1;\n-                     end;\n-                  end loop;\n+                           exit when T.Last;\n+                           Start := Start + 1;\n+                        end;\n+                     end loop;\n \n-               when others =>\n-                  raise Program_Error;\n-            end case;\n+                  when others =>\n+                     raise Program_Error;\n+                  end case;\n \n-            Write_Info_Terminate;\n-         end;\n+                  Write_Info_Terminate;\n+               end;\n \n-         exit when Start = Stop;\n-         Start := Start + 1;\n+               exit when Start = Stop;\n+               Start := Start + 1;\n \n-         pragma Assert (Start <= Stop);\n+               pragma Assert (Start <= Stop);\n+            end loop;\n+         end if;\n       end loop;\n    end SCO_Output;\n \n@@ -673,8 +677,9 @@ package body Par_SCO is\n       elsif Nkind (Lu) = N_Package_Body then\n          Traverse_Package_Body (Lu);\n \n-      --  Ignore subprogram specifications\n-      --  Also for now, ignore generic declarations and instantiations\n+         --  Ignore subprogram specifications, since nothing to cover.\n+         --  Also ignore instantiations, since again, nothing to cover.\n+         --  Also for now, ignore generic declarations ???\n \n       else\n          null;"}, {"sha": "41c353327e2fd66fcafc6b8afa489b7e116bed81", "filename": "gcc/ada/par_sco.ads", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Fpar_sco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Fpar_sco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.ads?ref=00838d9ae17529661245350976a8f1ce5e553415", "patch": "@@ -44,7 +44,29 @@ package Par_SCO is\n    --    to indicate the first and last Sloc of some construct in the tree and\n    --    they have the form:\n \n-   --      line:col-line:col    ??? do we need generic instantiation stuff ???\n+   --      line:col-line:col\n+\n+   --    Note that SCO's are generated only for generic templates, not for\n+   --    generic instances (since only the first are part of the source). So\n+   --    we don't need generic instantiation stuff in these line:col items.\n+\n+   --  SCO File headers\n+\n+   --    The SCO information follows the cross-reference information, so it\n+   --    need not be read by tools like gnatbind, gnatmake etc. The SCO output\n+   --    is divided into sections, one section for each unit for which SCO's\n+   --    are generated. A SCO section has a header of the form:\n+\n+   --      C  dependency-number  filename\n+\n+   --        This header precedes SCO information for the unit identified by\n+   --        dependency number and file name. The dependency number is the\n+   --        index into the generated D lines and is ones origin (i.e. 2 =\n+   --        reference to second generated D line).\n+\n+   --        Note that the filename here will reflect the original name if\n+   --        a Source_Reference pragma was encountered (since all line number\n+   --        references will be with respect to the original file).\n \n    --  Statements\n \n@@ -193,8 +215,9 @@ package Par_SCO is\n    --  (Typ = 'f') by the compiler. The condition is identified by the\n    --  First_Sloc value in the original tree.\n \n-   procedure SCO_Output (U : Unit_Number_Type);\n-   --  Outputs SCO lines for unit U in the ALI file, as recorded by a previous\n-   --  call to SCO_Record, possibly modified by calls to Set_SCO_Condition.\n+   procedure SCO_Output;\n+   --  Outputs SCO lines for all units, with appropriate section headers, for\n+   --  unit U in the ALI file, as recorded by previous calls to SCO_Record,\n+   --  possibly modified by calls to Set_SCO_Condition.\n \n end Par_SCO;"}, {"sha": "992b87a340bce685aaa62681b0fda60e7c48c06a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=00838d9ae17529661245350976a8f1ce5e553415", "patch": "@@ -13295,9 +13295,9 @@ package body Sem_Ch3 is\n       Ev := Uint_0;\n \n       --  Loop through literals of enumeration type setting pos and rep values\n-      --  except that if the Ekind is already set, then it means that the\n-      --  literal was already constructed (case of a derived type declaration\n-      --  and we should not disturb the Pos and Rep values.\n+      --  except that if the Ekind is already set, then it means the literal\n+      --  was already constructed (case of a derived type declaration and we\n+      --  should not disturb the Pos and Rep values.\n \n       while Present (L) loop\n          if Ekind (L) /= E_Enumeration_Literal then"}, {"sha": "e66369831fd7d383b96a65e951d4dfda20617a44", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=00838d9ae17529661245350976a8f1ce5e553415", "patch": "@@ -3360,7 +3360,10 @@ package body Sem_Warn is\n    begin\n       --  Adjust SCO condition if from source\n \n-      if Comes_From_Source (Orig) then\n+      if Generate_SCO\n+        and then Comes_From_Source (Orig)\n+        and then Is_Entity_Name (C)\n+      then\n          declare\n             Start : Source_Ptr;\n             Dummy : Source_Ptr;\n@@ -3369,6 +3372,7 @@ package body Sem_Warn is\n \n          begin\n             Sloc_Range (Orig, Start, Dummy);\n+\n             Atrue := Entity (C) = Standard_True;\n \n             if Present (Parent (C))"}, {"sha": "66c590acae040aedc3a61e5d9727269dc7852798", "filename": "gcc/ada/tree_in.ads", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Ftree_in.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Ftree_in.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_in.ads?ref=00838d9ae17529661245350976a8f1ce5e553415", "patch": "@@ -34,13 +34,7 @@\n --  tools that need to read the tree to the tree reading routines, and is\n --  thus bound as part of such tools.\n \n---  Note: the pragma Warnings (Off) here is because ASIS compiles this unit\n---  without -gnatg, and System.OS_Lib is an implementation unit. This is a\n---  temporary kludge which will be better resolved later on ???\n-\n-pragma Warnings (Off);\n with System.OS_Lib; use System.OS_Lib;\n-pragma Warnings (On);\n \n procedure Tree_In (Desc : File_Descriptor);\n --  Desc is the file descriptor for the file containing the tree, as written"}, {"sha": "c436054176aac5559b7be076b5d7316125ee43da", "filename": "gcc/ada/tree_io.ads", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Ftree_io.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00838d9ae17529661245350976a8f1ce5e553415/gcc%2Fada%2Ftree_io.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_io.ads?ref=00838d9ae17529661245350976a8f1ce5e553415", "patch": "@@ -37,14 +37,7 @@\n with Types; use Types;\n \n with System;        use System;\n-\n---  Note: the pragma Warnings (Off) here is because ASIS compiles this unit\n---  without -gnatg, and System.OS_Lib is an implementation unit. This is a\n---  temporary kludge which will be better resolved later on ???\n-\n-pragma Warnings (Off);\n with System.OS_Lib; use System.OS_Lib;\n-pragma Warnings (On);\n \n package Tree_IO is\n "}]}