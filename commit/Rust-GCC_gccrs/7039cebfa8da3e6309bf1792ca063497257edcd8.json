{"sha": "7039cebfa8da3e6309bf1792ca063497257edcd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAzOWNlYmZhOGRhM2U2MzA5YmYxNzkyY2EwNjM0OTcyNTdlZGNkOA==", "commit": {"author": {"name": "Kwok Cheung Yeung", "email": "kcy@codesourcery.com", "date": "2019-05-22T22:14:08Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2019-05-22T22:14:08Z"}, "message": "Add support for constructors and destuctors on GCN\n\n2019-05-22  Kwok Cheung Yeung  <kcy@codesourcery.com>\n            Andrew Stubbs  <amd@codesourcery.com>\n\n\tgcc/\n\t* config.gcc (gcc_cv_initfini_array): Set for AMD GCN.\n\t* config/gcn/gcn-run.c (init_array_kernel, fini_array_kernel): New.\n\t(kernel): Rename to...\n\t(main_kernel): ... this.\n\t(load_image): Load _init_array and _fini_array kernels.\n\t(run): Add argument for kernel to run.\n\t(main): Run init_array_kernel before main_kernel, and\n\tfini_array_kernel after.\n\t* config/gcn/gcn.c (gcn_handle_amdgpu_hsa_kernel_attribute): Allow\n\tamdgpu_hsa_kernel attribute on functions.\n\t(gcn_disable_constructors): Delete.\n\t(TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR): Delete.\n\t* config/gcn/crt0.c (size_t): Define.\n\t(_init_array, _fini_array): New.\n\t(__preinit_array_start, __preinit_array_end,\n\t__init_array_start, __init_array_end,\n\t__fini_array_start, __fini_array_end): Declare weak references.\n\nCo-Authored-By: Andrew Stubbs <ams@codesourcery.com>\n\nFrom-SVN: r271526", "tree": {"sha": "5cf5bd2cb8526d45d1b2f4443db781788fdac5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cf5bd2cb8526d45d1b2f4443db781788fdac5f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7039cebfa8da3e6309bf1792ca063497257edcd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7039cebfa8da3e6309bf1792ca063497257edcd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7039cebfa8da3e6309bf1792ca063497257edcd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7039cebfa8da3e6309bf1792ca063497257edcd8/comments", "author": {"login": "k-yeung", "id": 16960193, "node_id": "MDQ6VXNlcjE2OTYwMTkz", "avatar_url": "https://avatars.githubusercontent.com/u/16960193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k-yeung", "html_url": "https://github.com/k-yeung", "followers_url": "https://api.github.com/users/k-yeung/followers", "following_url": "https://api.github.com/users/k-yeung/following{/other_user}", "gists_url": "https://api.github.com/users/k-yeung/gists{/gist_id}", "starred_url": "https://api.github.com/users/k-yeung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k-yeung/subscriptions", "organizations_url": "https://api.github.com/users/k-yeung/orgs", "repos_url": "https://api.github.com/users/k-yeung/repos", "events_url": "https://api.github.com/users/k-yeung/events{/privacy}", "received_events_url": "https://api.github.com/users/k-yeung/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7c28a47c2d57bc21daab4dd586139e87fe701f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7c28a47c2d57bc21daab4dd586139e87fe701f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7c28a47c2d57bc21daab4dd586139e87fe701f9"}], "stats": {"total": 137, "additions": 110, "deletions": 27}, "files": [{"sha": "fd69b14863236c1e7e207ec8d39fefcfd0e422c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7039cebfa8da3e6309bf1792ca063497257edcd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7039cebfa8da3e6309bf1792ca063497257edcd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7039cebfa8da3e6309bf1792ca063497257edcd8", "patch": "@@ -1,3 +1,24 @@\n+2019-05-22  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+            Andrew Stubbs  <amd@codesourcery.com>\n+\n+\t* config.gcc (gcc_cv_initfini_array): Set for AMD GCN.\n+\t* config/gcn/gcn-run.c (init_array_kernel, fini_array_kernel): New.\n+\t(kernel): Rename to...\n+\t(main_kernel): ... this.\n+\t(load_image): Load _init_array and _fini_array kernels.\n+\t(run): Add argument for kernel to run.\n+\t(main): Run init_array_kernel before main_kernel, and\n+\tfini_array_kernel after.\n+\t* config/gcn/gcn.c (gcn_handle_amdgpu_hsa_kernel_attribute): Allow\n+\tamdgpu_hsa_kernel attribute on functions.\n+\t(gcn_disable_constructors): Delete.\n+\t(TARGET_ASM_CONSTRUCTOR, TARGET_ASM_DESTRUCTOR): Delete.\n+\t* config/gcn/crt0.c (size_t): Define.\n+\t(_init_array, _fini_array): New.\n+\t(__preinit_array_start, __preinit_array_end,\n+\t__init_array_start, __init_array_end,\n+\t__fini_array_start, __fini_array_end): Declare weak references.\n+\n 2019-05-22  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn.c (gcn_trampoline_init): Call \"sorry\" on GCN5."}, {"sha": "7122c8ed1c89fdf4c79d9a2e27d8e81a882632c1", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7039cebfa8da3e6309bf1792ca063497257edcd8/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7039cebfa8da3e6309bf1792ca063497257edcd8/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7039cebfa8da3e6309bf1792ca063497257edcd8", "patch": "@@ -1424,6 +1424,8 @@ amdgcn-*-amdhsa)\n \t\textra_programs=\"${extra_programs} mkoffload\\$(exeext)\"\n \t\ttm_file=\"${tm_file} gcn/offload.h\"\n \tfi\n+\t# Force .init_array support.\n+\tgcc_cv_initfini_array=yes\n \t;;\n moxie-*-elf)\n \tgas=yes"}, {"sha": "84718f42846078e843f12685658515a0682e833b", "filename": "gcc/config/gcn/gcn-run.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7039cebfa8da3e6309bf1792ca063497257edcd8/gcc%2Fconfig%2Fgcn%2Fgcn-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7039cebfa8da3e6309bf1792ca063497257edcd8/gcc%2Fconfig%2Fgcn%2Fgcn-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-run.c?ref=7039cebfa8da3e6309bf1792ca063497257edcd8", "patch": "@@ -66,7 +66,9 @@ bool debug = false;\n \n hsa_agent_t device = { 0 };\n hsa_queue_t *queue = NULL;\n-uint64_t kernel = 0;\n+uint64_t init_array_kernel = 0;\n+uint64_t fini_array_kernel = 0;\n+uint64_t main_kernel = 0;\n hsa_executable_t executable = { 0 };\n \n hsa_region_t kernargs_region = { 0 };\n@@ -427,14 +429,30 @@ load_image (const char *filename)\n   XHSA (hsa_fns.hsa_executable_freeze_fn (executable, \"\"),\n \t\"Freeze GCN executable\");\n \n-  /* Locate the \"main\" function, and read the kernel's properties.  */\n+  /* Locate the \"_init_array\" function, and read the kernel's properties.  */\n   hsa_executable_symbol_t symbol;\n+  XHSA (hsa_fns.hsa_executable_get_symbol_fn (executable, NULL, \"_init_array\",\n+\t\t\t\t\t      device, 0, &symbol),\n+\t\"Find '_init_array' function\");\n+  XHSA (hsa_fns.hsa_executable_symbol_get_info_fn\n+\t    (symbol, HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_OBJECT, &init_array_kernel),\n+\t\"Extract '_init_array' kernel object kernel object\");\n+\n+  /* Locate the \"_fini_array\" function, and read the kernel's properties.  */\n+  XHSA (hsa_fns.hsa_executable_get_symbol_fn (executable, NULL, \"_fini_array\",\n+\t\t\t\t\t      device, 0, &symbol),\n+\t\"Find '_fini_array' function\");\n+  XHSA (hsa_fns.hsa_executable_symbol_get_info_fn\n+\t    (symbol, HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_OBJECT, &fini_array_kernel),\n+\t\"Extract '_fini_array' kernel object kernel object\");\n+\n+  /* Locate the \"main\" function, and read the kernel's properties.  */\n   XHSA (hsa_fns.hsa_executable_get_symbol_fn (executable, NULL, \"main\",\n \t\t\t\t\t      device, 0, &symbol),\n \t\"Find 'main' function\");\n   XHSA (hsa_fns.hsa_executable_symbol_get_info_fn\n-\t    (symbol, HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_OBJECT, &kernel),\n-\t\"Extract kernel object\");\n+\t    (symbol, HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_OBJECT, &main_kernel),\n+\t\"Extract 'main' kernel object\");\n   XHSA (hsa_fns.hsa_executable_symbol_get_info_fn\n \t    (symbol, HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_KERNARG_SEGMENT_SIZE,\n \t     &kernarg_segment_size),\n@@ -684,7 +702,7 @@ gomp_print_output (struct kernargs *kernargs, bool final)\n /* Execute an already-loaded kernel on the device.  */\n \n static void\n-run (void *kernargs)\n+run (uint64_t kernel, void *kernargs)\n {\n   /* A \"signal\" is used to launch and monitor the kernel.  */\n   hsa_signal_t signal;\n@@ -822,11 +840,17 @@ main (int argc, char *argv[])\n   kernargs->heap_ptr = (int64_t) &kernargs->heap;\n   kernargs->heap.size = heap_size;\n \n+  /* Run constructors on the GPU.  */\n+  run (init_array_kernel, kernargs);\n+\n   /* Run the kernel on the GPU.  */\n-  run (kernargs);\n+  run (main_kernel, kernargs);\n   unsigned int return_value =\n     (unsigned int) kernargs->output_data.return_value;\n \n+  /* Run destructors on the GPU.  */\n+  run (fini_array_kernel, kernargs);\n+\n   unsigned int upper = (return_value & ~0xffff) >> 16;\n   if (upper == 0xcafe)\n     printf (\"Kernel exit value was never set\\n\");"}, {"sha": "47630c6edb400980ade6406553ffc48b9cd50751", "filename": "gcc/config/gcn/gcn.c", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7039cebfa8da3e6309bf1792ca063497257edcd8/gcc%2Fconfig%2Fgcn%2Fgcn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7039cebfa8da3e6309bf1792ca063497257edcd8/gcc%2Fconfig%2Fgcn%2Fgcn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.c?ref=7039cebfa8da3e6309bf1792ca063497257edcd8", "patch": "@@ -305,9 +305,7 @@ static tree\n gcn_handle_amdgpu_hsa_kernel_attribute (tree *node, tree name,\n \t\t\t\t\ttree args, int, bool *no_add_attrs)\n {\n-  if (FUNC_OR_METHOD_TYPE_P (*node)\n-      && TREE_CODE (*node) != FIELD_DECL\n-      && TREE_CODE (*node) != TYPE_DECL)\n+  if (!FUNC_OR_METHOD_TYPE_P (*node))\n     {\n       warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n \t       name);\n@@ -3165,20 +3163,6 @@ gcn_valid_cvt_p (machine_mode from, machine_mode to, enum gcn_cvt_t op)\n \t  || (to == DFmode && (from == SImode || from == SFmode)));\n }\n \n-/* Implement both TARGET_ASM_CONSTRUCTOR and TARGET_ASM_DESTRUCTOR.\n-\n-   The current loader does not support running code outside \"main\".  This\n-   hook implementation can be replaced or removed when that changes.  */\n-\n-void\n-gcn_disable_constructors (rtx symbol, int priority __attribute__ ((unused)))\n-{\n-  tree d = SYMBOL_REF_DECL (symbol);\n-  location_t l = d ? DECL_SOURCE_LOCATION (d) : UNKNOWN_LOCATION;\n-\n-  sorry_at (l, \"GCN does not support static constructors or destructors\");\n-}\n-\n /* }}}  */\n /* {{{ Costs.  */\n \n@@ -5995,10 +5979,6 @@ print_operand (FILE *file, rtx x, int code)\n #define TARGET_ARG_PARTIAL_BYTES gcn_arg_partial_bytes\n #undef  TARGET_ASM_ALIGNED_DI_OP\n #define TARGET_ASM_ALIGNED_DI_OP \"\\t.8byte\\t\"\n-#undef  TARGET_ASM_CONSTRUCTOR\n-#define TARGET_ASM_CONSTRUCTOR gcn_disable_constructors\n-#undef  TARGET_ASM_DESTRUCTOR\n-#define TARGET_ASM_DESTRUCTOR gcn_disable_constructors\n #undef  TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START output_file_start\n #undef  TARGET_ASM_FUNCTION_PROLOGUE"}, {"sha": "9b58029816cd84a2e661cf0140865cf5b5e8f6f9", "filename": "libgcc/config/gcn/crt0.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7039cebfa8da3e6309bf1792ca063497257edcd8/libgcc%2Fconfig%2Fgcn%2Fcrt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7039cebfa8da3e6309bf1792ca063497257edcd8/libgcc%2Fconfig%2Fgcn%2Fcrt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fgcn%2Fcrt0.c?ref=7039cebfa8da3e6309bf1792ca063497257edcd8", "patch": "@@ -19,5 +19,61 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+typedef long long size_t;\n+\n /* Provide an entry point symbol to silence a linker warning.  */\n void _start() {}\n+\n+#ifdef USE_NEWLIB_INITFINI\n+\n+extern void __libc_init_array (void) __attribute__((weak));\n+extern void __libc_fini_array (void) __attribute__((weak));\n+\n+__attribute__((amdgpu_hsa_kernel ()))\n+void _init_array()\n+{\n+  __libc_init_array ();\n+}\n+\n+__attribute__((amdgpu_hsa_kernel ()))\n+void _fini_array()\n+{\n+  __libc_fini_array ();\n+}\n+\n+#endif\n+\n+/* These magic symbols are provided by the linker.  */\n+extern void (*__preinit_array_start []) (void) __attribute__((weak));\n+extern void (*__preinit_array_end []) (void) __attribute__((weak));\n+extern void (*__init_array_start []) (void) __attribute__((weak));\n+extern void (*__init_array_end []) (void) __attribute__((weak));\n+extern void (*__fini_array_start []) (void) __attribute__((weak));\n+extern void (*__fini_array_end []) (void) __attribute__((weak));\n+\n+__attribute__((amdgpu_hsa_kernel ()))\n+void _init_array()\n+{\n+  /* Iterate over all the init routines.  */\n+  size_t count;\n+  size_t i;\n+\n+  count = __preinit_array_end - __preinit_array_start;\n+  for (i = 0; i < count; i++)\n+    __preinit_array_start[i] ();\n+\n+  count = __init_array_end - __init_array_start;\n+  for (i = 0; i < count; i++)\n+    __init_array_start[i] ();\n+}\n+\n+__attribute__((amdgpu_hsa_kernel ()))\n+void _fini_array()\n+{\n+  size_t count;\n+  size_t i;\n+\n+  count = __fini_array_end - __fini_array_start;\n+  for (i = count; i > 0; i--)\n+    __fini_array_start[i-1] ();\n+}"}]}