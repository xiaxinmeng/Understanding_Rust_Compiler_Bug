{"sha": "1e00f18c429f2d54fae23259eb37b81caec583f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUwMGYxOGM0MjlmMmQ1NGZhZTIzMjU5ZWIzN2I4MWNhZWM1ODNmMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-01-19T13:32:53Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-01-19T13:32:53Z"}, "message": "search.c (get_vbase_1): Count only virtual bases.\n\ncp:\n\t* search.c (get_vbase_1): Count only virtual bases.\ntestsuite:\n\t* g++.old-deja/g++.other/vbase5.C: New test.\n\nFrom-SVN: r39132", "tree": {"sha": "0de72355fb4870279d858fdaf3fbe3ce57a06721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0de72355fb4870279d858fdaf3fbe3ce57a06721"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e00f18c429f2d54fae23259eb37b81caec583f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e00f18c429f2d54fae23259eb37b81caec583f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e00f18c429f2d54fae23259eb37b81caec583f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e00f18c429f2d54fae23259eb37b81caec583f2/comments", "author": null, "committer": null, "parents": [{"sha": "9f1b75fccdadafcb442b16897084ea062c14cc3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1b75fccdadafcb442b16897084ea062c14cc3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f1b75fccdadafcb442b16897084ea062c14cc3d"}], "stats": {"total": 218, "additions": 214, "deletions": 4}, "files": [{"sha": "b12874f9391b8f800ea4bc1330554d8f02f31d66", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e00f18c429f2d54fae23259eb37b81caec583f2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e00f18c429f2d54fae23259eb37b81caec583f2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e00f18c429f2d54fae23259eb37b81caec583f2", "patch": "@@ -1,3 +1,7 @@\n+2001-01-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* search.c (get_vbase_1): Count only virtual bases.\n+\n 2001-01-19  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* class.c (duplicate_tag_error): Robustify flag clearing."}, {"sha": "0bb309fa5bded80bc36d69bc428d2259282e1813", "filename": "gcc/cp/search.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e00f18c429f2d54fae23259eb37b81caec583f2/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e00f18c429f2d54fae23259eb37b81caec583f2/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=1e00f18c429f2d54fae23259eb37b81caec583f2", "patch": "@@ -193,15 +193,15 @@ get_vbase_1 (parent, binfo, depth)\n   tree binfos;\n   int i, n_baselinks;\n   tree rval = NULL_TREE;\n+  int virtualp = TREE_VIA_VIRTUAL (binfo) != 0;\n \n-  if (BINFO_TYPE (binfo) == parent && TREE_VIA_VIRTUAL (binfo))\n+  *depth -= virtualp;\n+  if (virtualp && BINFO_TYPE (binfo) == parent)\n     {\n       *depth = 0;\n       return binfo;\n     }\n \n-  *depth = *depth - 1;\n-\n   binfos = BINFO_BASETYPES (binfo);\n   n_baselinks = binfos ? TREE_VEC_LENGTH (binfos) : 0;\n \n@@ -218,7 +218,7 @@ get_vbase_1 (parent, binfo, depth)\n       if (nrval)\n \trval = nrval;\n     }\n-  *depth = *depth+1;\n+  *depth += virtualp;\n   return rval;\n }\n "}, {"sha": "b8b57aff7db6685d031b352b609585129a1fa8b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e00f18c429f2d54fae23259eb37b81caec583f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e00f18c429f2d54fae23259eb37b81caec583f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e00f18c429f2d54fae23259eb37b81caec583f2", "patch": "@@ -1,3 +1,7 @@\n+2001-01-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/vbase5.C: New test.\n+\n 2001-01-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/execute/20010118-1.c: New test."}, {"sha": "03b846ff6f5ef7668321debf4aa7c2cd06799004", "filename": "gcc/testsuite/g++.old-deja/g++.other/vbase5.C", "status": "added", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e00f18c429f2d54fae23259eb37b81caec583f2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvbase5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e00f18c429f2d54fae23259eb37b81caec583f2/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvbase5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvbase5.C?ref=1e00f18c429f2d54fae23259eb37b81caec583f2", "patch": "@@ -0,0 +1,202 @@\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 19 Jan 2001 <nathan@codesourcery.com>\n+\n+// Bug 1701. building a vbase path was not using the shortest number of\n+// vbases. Normally that's just a pessimization, unfortunately during\n+// constructoring it leads to uninitialized reads.\n+\n+extern \"C\" int printf (...);\n+\n+int fail = 0;\n+\n+/*{{{  struct Base*/\n+struct Base\n+{\n+  unsigned m;\n+  static Base *addr;\n+  \n+  Base ();\n+  virtual ~Base ();\n+};\n+/*}}}*/\n+Base *Base::addr;\n+/*{{{  Base::Base ()*/\n+Base::Base ()\n+{\n+  printf (\"Base (%u) ctor %x\\n\", sizeof (Base), this);\n+  if (fail) ;\n+  else if (addr)\n+    fail = 1;\n+  else\n+    addr = this;\n+}\n+/*}}}*/\n+/*{{{  Base::~Base ()*/\n+Base::~Base ()\n+{\n+  printf (\"Base dtor %x\\n\", this);\n+  if (fail)\n+    ;\n+  else if (this != addr)\n+    fail = 2;\n+  else\n+    addr = 0;\n+}\n+/*}}}*/\n+\n+/*{{{  struct M10 : virtual Base*/\n+struct M10 : virtual Base\n+{\n+  int m;\n+  static M10 *addr;\n+  \n+  M10 ();\n+  virtual ~M10 ();\n+};\n+/*}}}*/\n+M10 *M10::addr;\n+/*{{{  M10::M10 ()*/\n+M10::M10 ()\n+{\n+  printf (\"M10 (%u) ctor %x\\n\", sizeof (M10), this);\n+  if (fail) ;\n+  else if (addr)\n+    fail = 3;\n+  else\n+    addr = this;\n+}\n+/*}}}*/\n+/*{{{  M10::~M10 ()*/\n+M10::~M10 ()\n+{\n+  printf (\"M10 dtor %x\\n\", this);\n+  if (fail)\n+    ;\n+  else if (this != addr)\n+    fail = 4;\n+  else\n+    addr = 0;\n+}\n+/*}}}*/\n+\n+/*{{{  struct M4 : virtual Base, virtual M10*/\n+struct M4 : virtual Base, virtual M10\n+{\n+  int m;\n+  static M4 *addr;\n+  \n+  M4 ();\n+  virtual ~M4 ();\n+};\n+/*}}}*/\n+M4 *M4::addr;\n+/*{{{  M4::M4 ()*/\n+M4::M4 ()\n+{\n+  printf (\"M4 (%u) ctor %x\\n\", sizeof (M4), this);\n+  if (fail) ;\n+  else if (addr)\n+    fail = 5;\n+  else\n+    addr = this;\n+}\n+/*}}}*/\n+/*{{{  M4::~M4 ()*/\n+M4::~M4 ()\n+{\n+  printf (\"M4 dtor %x\\n\", this);\n+  if (fail)\n+    ;\n+  else if (this != addr)\n+    fail = 6;\n+  else\n+    addr = 0;\n+}\n+/*}}}*/\n+\n+/*{{{  struct M5 : M4*/\n+struct M5 : M4\n+{\n+  int m;\n+  static M5 *addr;\n+  \n+  M5 ();\n+  virtual ~M5 ();\n+};\n+/*}}}*/\n+M5 *M5::addr;\n+/*{{{  M5::M5 ()*/\n+M5::M5 ()\n+{\n+  printf (\"M5 (%u) ctor %x\\n\", sizeof (M5), this);\n+  if (fail) ;\n+  else if (addr)\n+    fail = 7;\n+  else\n+    addr = this;\n+}\n+/*}}}*/\n+/*{{{  M5::~M5 ()*/\n+M5::~M5 ()\n+{\n+  printf (\"M5 dtor %x\\n\", this);\n+  if (fail)\n+    ;\n+  else if (this != addr)\n+    fail = 8;\n+  else\n+    addr = 0;\n+}\n+/*}}}*/\n+\n+/*{{{  struct M9 : M5, virtual M10*/\n+struct M9 : M5, virtual M10\n+{\n+  int m;\n+  static M9 *addr;\n+  \n+  M9 ();\n+  virtual ~M9 ();\n+};\n+/*}}}*/\n+M9 *M9::addr;\n+/*{{{  M9::M9 ()*/\n+M9::M9 ()\n+{\n+  printf (\"M9 (%u), ctor %x\\n\", sizeof (M9), this);\n+  if (fail) ;\n+  else if (addr)\n+    fail = 9;\n+  else\n+    addr = this;\n+}\n+/*}}}*/\n+/*{{{  M9::~M9 ()*/\n+M9::~M9 ()\n+{\n+  printf (\"M9 dtor %x\\n\", this);\n+  if (fail)\n+    ;\n+  else if (this != addr)\n+    fail = 10;\n+  else\n+    addr = 0;\n+}\n+/*}}}*/\n+\n+int main ()\n+{\n+  M9 *m9;\n+  Base *r;\n+  \n+  m9 = new M9 ();\n+  r = m9;\n+  if (fail)\n+    return fail;\n+  void *top = dynamic_cast <void *> (r);\n+  if (top != m9)\n+    return 20;\n+  r->~Base ();\n+  \n+  return fail;\n+}"}]}