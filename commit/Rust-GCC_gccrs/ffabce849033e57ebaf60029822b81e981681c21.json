{"sha": "ffabce849033e57ebaf60029822b81e981681c21", "node_id": "C_kwDOANBUbNoAKGZmYWJjZTg0OTAzM2U1N2ViYWY2MDAyOTgyMmI4MWU5ODE2ODFjMjE", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-11-29T10:43:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-11-29T10:46:31Z"}, "message": "Couple of testsuite adjustments\n\ngcc/testsuite/\n\t* gcc.dg/ipa/iinline-attr.c: XFAIL on SPARC.\n\t* gcc.dg/signbit-2.c: Replace vect_int selector by vect_shift.", "tree": {"sha": "1707b82ed0819ae77c6b6870e9198959d539eba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1707b82ed0819ae77c6b6870e9198959d539eba5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffabce849033e57ebaf60029822b81e981681c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffabce849033e57ebaf60029822b81e981681c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffabce849033e57ebaf60029822b81e981681c21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffabce849033e57ebaf60029822b81e981681c21/comments", "author": null, "committer": null, "parents": [{"sha": "1ad898d82707376313d97bb81cf40c225b05bacf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad898d82707376313d97bb81cf40c225b05bacf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad898d82707376313d97bb81cf40c225b05bacf"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "4b9e8574795a10f00cc3696efac987f1be61be1b", "filename": "gcc/testsuite/gcc.dg/ipa/iinline-attr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffabce849033e57ebaf60029822b81e981681c21/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fiinline-attr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffabce849033e57ebaf60029822b81e981681c21/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fiinline-attr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fiinline-attr.c?ref=ffabce849033e57ebaf60029822b81e981681c21", "patch": "@@ -23,5 +23,5 @@ int test (void)\n   return 0;\n }\n \n-/* { dg-final { scan-ipa-dump \"hooray\\[^\\\\n\\]*inline copy in test\" \"inline\" { xfail visium-*-* } } } */\n-/* Missing back-end support for attribute __optimize__ on Visium.  */\n+/* { dg-final { scan-ipa-dump \"hooray\\[^\\\\n\\]*inline copy in test\" \"inline\" { xfail sparc*-*-* visium-*-* } } } */\n+/* Missing back-end support for attribute __optimize__ on SPARC and Visium.  */"}, {"sha": "16242258207032fe8365af381e4a7a2583c0febf", "filename": "gcc/testsuite/gcc.dg/signbit-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffabce849033e57ebaf60029822b81e981681c21/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffabce849033e57ebaf60029822b81e981681c21/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsignbit-2.c?ref=ffabce849033e57ebaf60029822b81e981681c21", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do assemble } */\n-/* { dg-options \"-O3 --save-temps -fdump-tree-optimized\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-optimized\" } */\n \n /* This test does not work when the truth type does not match vector type.  */\n /* { dg-additional-options \"-mno-avx512f\" { target { i?86-*-* x86_64-*-* } } } */\n@@ -21,6 +21,6 @@ void fun2(int32_t *x, int n)\n }\n \n /* Xfail amdgcn where vector truth type is not integer type.  */\n-/* { dg-final { scan-tree-dump {\\s+>\\s+\\{ 0(, 0)+ \\}} optimized { target vect_int xfail amdgcn-*-* } } } */\n-/* { dg-final { scan-tree-dump {\\s+>\\s+0} optimized { target { ! vect_int } } } } */\n+/* { dg-final { scan-tree-dump {\\s+>\\s+\\{ 0(, 0)+ \\}} optimized { target vect_shift xfail amdgcn-*-* } } } */\n+/* { dg-final { scan-tree-dump {\\s+>\\s+0} optimized { target { ! vect_shift } } } } */\n /* { dg-final { scan-tree-dump-not {\\s+>>\\s+31} optimized { xfail amdgcn-*-* } } } */"}]}