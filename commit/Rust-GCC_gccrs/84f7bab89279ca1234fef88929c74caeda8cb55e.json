{"sha": "84f7bab89279ca1234fef88929c74caeda8cb55e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRmN2JhYjg5Mjc5Y2ExMjM0ZmVmODg5MjljNzRjYWVkYThjYjU1ZQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-30T18:15:53Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-07-02T15:34:53Z"}, "message": "Fix build_gt and build_lt for signed 1 bit values.\n\nSigned 1 bit values have a range of [-1, 0] but neither (0 - 1) nor (-1 + 1)\ncan be represented.  For signed values, add or subtract -1 as appropriate.\n\n\tPR tree-optimization/101223\n\tgcc/\n\t* range-op.cc (build_lt): Add -1 for signed values.\n\t(built_gt): Subtract -1 for signed values.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr101223.c: New.", "tree": {"sha": "708a82e60c51b389b97afe85ae048da09d0ba3e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/708a82e60c51b389b97afe85ae048da09d0ba3e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84f7bab89279ca1234fef88929c74caeda8cb55e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f7bab89279ca1234fef88929c74caeda8cb55e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f7bab89279ca1234fef88929c74caeda8cb55e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f7bab89279ca1234fef88929c74caeda8cb55e/comments", "author": null, "committer": null, "parents": [{"sha": "18d0fad77b580d1ac64ed04d94fd3c9795687b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d0fad77b580d1ac64ed04d94fd3c9795687b91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18d0fad77b580d1ac64ed04d94fd3c9795687b91"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "f8e4c6d4e49f3c60a6592b7fb74c13ae80c6db85", "filename": "gcc/range-op.cc", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f7bab89279ca1234fef88929c74caeda8cb55e/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f7bab89279ca1234fef88929c74caeda8cb55e/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=84f7bab89279ca1234fef88929c74caeda8cb55e", "patch": "@@ -687,7 +687,14 @@ static void\n build_lt (irange &r, tree type, const wide_int &val)\n {\n   wi::overflow_type ov;\n-  wide_int lim = wi::sub (val, 1, TYPE_SIGN (type), &ov);\n+  wide_int lim;\n+  signop sgn = TYPE_SIGN (type);\n+\n+  // Signed 1 bit cannot represent 1 for subtraction.\n+  if (sgn == SIGNED)\n+    lim = wi::add (val, -1, sgn, &ov);\n+  else\n+    lim = wi::sub (val, 1, sgn, &ov);\n \n   // If val - 1 underflows, check if X < MIN, which is an empty range.\n   if (ov)\n@@ -710,7 +717,14 @@ static void\n build_gt (irange &r, tree type, const wide_int &val)\n {\n   wi::overflow_type ov;\n-  wide_int lim = wi::add (val, 1, TYPE_SIGN (type), &ov);\n+  wide_int lim;\n+  signop sgn = TYPE_SIGN (type);\n+\n+  // Signed 1 bit cannot represent 1 for addition.\n+  if (sgn == SIGNED)\n+    lim = wi::sub (val, -1, sgn, &ov);\n+  else\n+    lim = wi::add (val, 1, sgn, &ov);\n   // If val + 1 overflows, check is for X > MAX, which is an empty range.\n   if (ov)\n     r.set_undefined ();"}, {"sha": "6d5a247fa6c71bb28065db37a48602c60cbc73f1", "filename": "gcc/testsuite/gcc.dg/pr101223.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f7bab89279ca1234fef88929c74caeda8cb55e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101223.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f7bab89279ca1234fef88929c74caeda8cb55e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101223.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101223.c?ref=84f7bab89279ca1234fef88929c74caeda8cb55e", "patch": "@@ -0,0 +1,44 @@\n+/* PR tree-optimization/101223 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 \" } */\n+\n+struct {\n+  int a : 1;\n+} b;\n+int c = 1, d;\n+int foo1() {\n+  for (; d < 2; d++) {\n+    int e = ~c, f = 0, g;\n+    if (e) {\n+      f = c;\n+      g = b.a;\n+      b.a = f;\n+      if (b.a >= g)\n+        __builtin_abort();\n+    }\n+    c = f;\n+    b.a = g;\n+  }\n+  return 0;\n+}\n+\n+int foo2() {\n+  for (; d < 2; d++) {\n+    int e = ~c, f = 0, g;\n+    if (e) {\n+      f = c;\n+      g = b.a;\n+      b.a = f;\n+      if (g <= b.a)\n+        __builtin_abort();\n+    }\n+    c = f;\n+    b.a = g;\n+  }\n+  return 0;\n+}\n+int main ()\n+{\n+  return foo1() + foo2();\n+}\n+  "}]}