{"sha": "afb767b41fbd9a513af007dcf8bfe93d4122fe6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZiNzY3YjQxZmJkOWE1MTNhZjAwN2RjZjhiZmU5M2Q0MTIyZmU2Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-08-11T23:59:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-08-11T23:59:35Z"}, "message": "hashtable.h (_Hashtable<>::erase(const key_type&)): Use std::__addressof.\n\n2010-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/hashtable.h (_Hashtable<>::erase(const key_type&)):\n\tUse std::__addressof.\n\n\t* include/bits/forward_list.tcc (forward_list<>::remove): Deal\n\tcorrectly with &__tmp->_M_value == &__val.\n\t* testsuite/23_containers/forward_list/operations/remove_freed.cc:\n\tNew.\n\nFrom-SVN: r163178", "tree": {"sha": "a32f4d31130e39b531e1695206585d8fc6dd3a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a32f4d31130e39b531e1695206585d8fc6dd3a0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afb767b41fbd9a513af007dcf8bfe93d4122fe6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb767b41fbd9a513af007dcf8bfe93d4122fe6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afb767b41fbd9a513af007dcf8bfe93d4122fe6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb767b41fbd9a513af007dcf8bfe93d4122fe6b/comments", "author": null, "committer": null, "parents": [{"sha": "53d8d5c17ddc2f3eb3d813cb17e31cbc726ccede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d8d5c17ddc2f3eb3d813cb17e31cbc726ccede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53d8d5c17ddc2f3eb3d813cb17e31cbc726ccede"}], "stats": {"total": 134, "additions": 126, "deletions": 8}, "files": [{"sha": "84d35983fb8ca8ed9d1886a1eb9fb33765db22b9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb767b41fbd9a513af007dcf8bfe93d4122fe6b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb767b41fbd9a513af007dcf8bfe93d4122fe6b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=afb767b41fbd9a513af007dcf8bfe93d4122fe6b", "patch": "@@ -1,3 +1,13 @@\n+2010-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/hashtable.h (_Hashtable<>::erase(const key_type&)):\n+\tUse std::__addressof.\n+\n+\t* include/bits/forward_list.tcc (forward_list<>::remove): Deal\n+\tcorrectly with &__tmp->_M_value == &__val.\n+\t* testsuite/23_containers/forward_list/operations/remove_freed.cc:\n+\tNew.\n+\n 2010-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_algo.h (shuffle): Change signature consistently"}, {"sha": "8688f0955a6a8026b60e520f0ecd0001705c0d5f", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb767b41fbd9a513af007dcf8bfe93d4122fe6b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb767b41fbd9a513af007dcf8bfe93d4122fe6b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=afb767b41fbd9a513af007dcf8bfe93d4122fe6b", "patch": "@@ -286,13 +286,26 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     remove(const _Tp& __val)\n     {\n       _Node* __curr = static_cast<_Node*>(&this->_M_impl._M_head);\n-      while (_Node* __temp = static_cast<_Node*>(__curr->_M_next))\n+      _Node* __extra = 0;\n+\n+      while (_Node* __tmp = static_cast<_Node*>(__curr->_M_next))\n         {\n-          if (__temp->_M_value == __val)\n-            this->_M_erase_after(__curr);\n-          else\n-            __curr = static_cast<_Node*>(__curr->_M_next);\n+          if (__tmp->_M_value == __val)\n+\t    {\n+\t      if (std::__addressof(__tmp->_M_value)\n+\t\t  != std::__addressof(__val))\n+\t\t{\n+\t\t  this->_M_erase_after(__curr);\n+\t\t  continue;\n+\t\t}\n+\t      else\n+\t\t__extra = __curr;\n+\t    }\n+\t  __curr = static_cast<_Node*>(__curr->_M_next);\n         }\n+\n+      if (__extra)\n+\tthis->_M_erase_after(__extra);\n     }\n \n   template<typename _Tp, typename _Alloc>\n@@ -302,9 +315,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       remove_if(_Pred __pred)\n       {\n \t_Node* __curr = static_cast<_Node*>(&this->_M_impl._M_head);\n-        while (_Node* __temp = static_cast<_Node*>(__curr->_M_next))\n+        while (_Node* __tmp = static_cast<_Node*>(__curr->_M_next))\n           {\n-            if (__pred(__temp->_M_value))\n+            if (__pred(__tmp->_M_value))\n               this->_M_erase_after(__curr);\n             else\n               __curr = static_cast<_Node*>(__curr->_M_next);"}, {"sha": "a9876e169afdc6ff0cb764ae02e5a4fd92e78c6e", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb767b41fbd9a513af007dcf8bfe93d4122fe6b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb767b41fbd9a513af007dcf8bfe93d4122fe6b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=afb767b41fbd9a513af007dcf8bfe93d4122fe6b", "patch": "@@ -1079,7 +1079,8 @@ namespace std\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // 526. Is it undefined if a function in the standard changes\n \t  // in parameters?\n-\t  if (&this->_M_extract((*__slot)->_M_v) != &__k)\n+\t  if (std::__addressof(this->_M_extract((*__slot)->_M_v))\n+\t      != std::__addressof(__k))\n \t    {\n               _Node* __p = *__slot;\n               *__slot = __p->_M_next;"}, {"sha": "c1900c1b1252a08bc1c5b48f8c81a31bb78ccb62", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/operations/remove_freed.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb767b41fbd9a513af007dcf8bfe93d4122fe6b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2Fremove_freed.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb767b41fbd9a513af007dcf8bfe93d4122fe6b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2Fremove_freed.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2Fremove_freed.cc?ref=afb767b41fbd9a513af007dcf8bfe93d4122fe6b", "patch": "@@ -0,0 +1,94 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-08-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+\n+// 23.3.3.5 forward_list operations [forwardlist.ops]\n+\n+// Used to cause many Valgrind errors: LWG 526-type situation.\n+int test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::forward_list<int> fl1;\n+  \n+  fl1.push_front(1);\n+  fl1.push_front(2);\n+  fl1.push_front(3);\n+  fl1.push_front(4);\n+  fl1.push_front(1);\n+\n+  fl1.remove(*fl1.begin());\n+\n+  VERIFY( std::distance(fl1.begin(), fl1.end()) == 3 );\n+\n+  auto it1 = fl1.begin();\n+\n+  VERIFY( *it1 == 4 );\n+  ++it1;\n+  VERIFY( *it1 == 3 );\n+  ++it1;\n+  VERIFY( *it1 == 2 );\n+\n+  std::forward_list<int> fl2;\n+  \n+  fl2.push_front(3);\n+  fl2.push_front(3);\n+  fl2.push_front(3);\n+  fl2.push_front(3);\n+  fl2.push_front(3);\n+\n+  auto it2 = fl2.begin();\n+  ++it2;\n+  ++it2;\n+\n+  fl2.remove(*it2);\n+\n+  VERIFY( std::distance(fl2.begin(), fl2.end()) == 0 );\n+\n+  std::forward_list<int> fl3;\n+  \n+  fl3.push_front(1);\n+  fl3.push_front(2);\n+  fl3.push_front(3);\n+  fl3.push_front(3);\n+  fl3.push_front(3);\n+\n+  auto it3 = fl3.begin();\n+  ++it3;\n+  ++it3;\n+\n+  fl3.remove(*it3);\n+\n+  VERIFY( std::distance(fl3.begin(), fl3.end()) == 2 );\n+\n+  it3 = fl3.begin();\n+  VERIFY( *it3 == 2 );\n+  ++it3;\n+  VERIFY( *it3 == 1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}