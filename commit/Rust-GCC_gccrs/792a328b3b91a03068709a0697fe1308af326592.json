{"sha": "792a328b3b91a03068709a0697fe1308af326592", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkyYTMyOGIzYjkxYTAzMDY4NzA5YTA2OTdmZTEzMDhhZjMyNjU5Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-07-02T02:52:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-07-02T02:52:26Z"}, "message": "remove redundant parents\n\nFrom-SVN: r34823", "tree": {"sha": "f02c88581f30a782c006d50ab71b303599d60cb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f02c88581f30a782c006d50ab71b303599d60cb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/792a328b3b91a03068709a0697fe1308af326592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/792a328b3b91a03068709a0697fe1308af326592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/792a328b3b91a03068709a0697fe1308af326592", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/792a328b3b91a03068709a0697fe1308af326592/comments", "author": null, "committer": null, "parents": [{"sha": "20427c6b9b8288eef21c79df4f60b85cf04a39a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20427c6b9b8288eef21c79df4f60b85cf04a39a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20427c6b9b8288eef21c79df4f60b85cf04a39a7"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "49f0b3be3b2f7c8b0181eb76d32750383fe0fa53", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/792a328b3b91a03068709a0697fe1308af326592/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/792a328b3b91a03068709a0697fe1308af326592/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=792a328b3b91a03068709a0697fe1308af326592", "patch": "@@ -6920,11 +6920,11 @@ fold (expr)\n \t\t     so that we can convert this back to the \n \t\t     corresponding COND_EXPR.  */\n \t\t  return pedantic_non_lvalue\n-\t\t    (convert (type, (fold (build (MIN_EXPR, comp_type,\n-\t\t\t\t\t\t  (comp_code == LE_EXPR\n-\t\t\t\t\t\t   ? comp_op0 : comp_op1),\n-\t\t\t\t\t\t  (comp_code == LE_EXPR\n-\t\t\t\t\t\t   ? comp_op1 : comp_op0))))));\n+\t\t    (convert (type, fold (build (MIN_EXPR, comp_type,\n+\t\t\t\t\t\t (comp_code == LE_EXPR\n+\t\t\t\t\t\t  ? comp_op0 : comp_op1),\n+\t\t\t\t\t\t (comp_code == LE_EXPR\n+\t\t\t\t\t\t  ? comp_op1 : comp_op0)))));\n \t\t  break;\n \t\tcase GE_EXPR:\n \t\tcase GT_EXPR:"}]}