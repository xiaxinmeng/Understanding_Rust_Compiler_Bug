{"sha": "0d519038a0354f983534037fd9a7d460421e4fd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ1MTkwMzhhMDM1NGY5ODM1MzQwMzdmZDlhN2Q0NjA0MjFlNGZkMA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2005-10-30T12:17:48Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-10-30T12:17:48Z"}, "message": "check.c (gfc_check_malloc, [...]): New functions.\n\n\t* check.c (gfc_check_malloc, gfc_check_free): New functions.\n\t* gfortran.h (gfc_generic_isym_id): Add GFC_ISYM_MALLOC.\n\t* intrinsic.c (add_functions): Add symbols for MALLOC function.\n\t(add_subroutines): Add symbol for FREE subroutine.\n\t* intrinsic.h: Prototypes for gfc_check_malloc, gfc_check_free,\n\tgfc_resolve_malloc and gfc_resolve_free.\n\t* intrinsic.texi: Add doc for FREE and MALLOC intrinsics.\n\t* iresolve.c (gfc_resolve_malloc, gfc_resolve_free): New\n\tfunctions.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Add case for\n\tGFC_ISYM_MALLOC.\n\n\t* Makefile.am: Add intrinsics/malloc.c file.\n\t* Makefile.in: Regenerate.\n\t* intrinsics/malloc.c: New file, with implementations for free\n\tand malloc library functions.\n\n\t* gfortran.dg/malloc_free_1.f90: New test.\n\nFrom-SVN: r106016", "tree": {"sha": "74008967faaa4d2ec3fb686ef0f09df588ecbd88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74008967faaa4d2ec3fb686ef0f09df588ecbd88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d519038a0354f983534037fd9a7d460421e4fd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d519038a0354f983534037fd9a7d460421e4fd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d519038a0354f983534037fd9a7d460421e4fd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d519038a0354f983534037fd9a7d460421e4fd0/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf6ae9554d33bc2afe113135a0f34d5022bb1972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf6ae9554d33bc2afe113135a0f34d5022bb1972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf6ae9554d33bc2afe113135a0f34d5022bb1972"}], "stats": {"total": 273, "additions": 269, "deletions": 4}, "files": [{"sha": "2148c4887204b8aa72ea33e3242b0d65aae10fd6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0d519038a0354f983534037fd9a7d460421e4fd0", "patch": "@@ -1,3 +1,17 @@\n+2005-10-30  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* check.c (gfc_check_malloc, gfc_check_free): New functions.\n+\t* gfortran.h (gfc_generic_isym_id): Add GFC_ISYM_MALLOC.\n+\t* intrinsic.c (add_functions): Add symbols for MALLOC function.\n+\t(add_subroutines): Add symbol for FREE subroutine.\n+\t* intrinsic.h: Prototypes for gfc_check_malloc, gfc_check_free,\n+\tgfc_resolve_malloc and gfc_resolve_free.\n+\t* intrinsic.texi: Add doc for FREE and MALLOC intrinsics.\n+\t* iresolve.c (gfc_resolve_malloc, gfc_resolve_free): New\n+\tfunctions.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Add case for\n+\tGFC_ISYM_MALLOC.\n+\n 2005-10-30  Steven Bosscher  <stevenb@suse.de>\n \n \t* gfortran.texi: Update contributors."}, {"sha": "6d2c65b5f9633c3857eb909a57728a4f9d01c929", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=0d519038a0354f983534037fd9a7d460421e4fd0", "patch": "@@ -1362,6 +1362,18 @@ gfc_check_min_max_double (gfc_actual_arglist * arg)\n \n /* End of min/max family.  */\n \n+try\n+gfc_check_malloc (gfc_expr * size)\n+{\n+  if (type_check (size, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (size, 0) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n \n try\n gfc_check_matmul (gfc_expr * matrix_a, gfc_expr * matrix_b)\n@@ -2620,6 +2632,19 @@ gfc_check_flush (gfc_expr * unit)\n }\n \n \n+try\n+gfc_check_free (gfc_expr * i)\n+{\n+  if (type_check (i, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (i, 0) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n try\n gfc_check_hostnm (gfc_expr * name)\n {"}, {"sha": "feff5af3e81176d71be090772bb23ff5d43a1c96", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=0d519038a0354f983534037fd9a7d460421e4fd0", "patch": "@@ -363,6 +363,7 @@ enum gfc_generic_isym_id\n   GFC_ISYM_LOC,\n   GFC_ISYM_LOG10,\n   GFC_ISYM_LOGICAL,\n+  GFC_ISYM_MALLOC,\n   GFC_ISYM_MATMUL,\n   GFC_ISYM_MAX,\n   GFC_ISYM_MAXLOC,"}, {"sha": "e96ccbb406fc0abd4127c5596790eb7d59b4a5a8", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=0d519038a0354f983534037fd9a7d460421e4fd0", "patch": "@@ -1606,6 +1606,11 @@ add_functions (void)\n \n   make_generic (\"logical\", GFC_ISYM_LOGICAL, GFC_STD_F95);\n \n+  add_sym_1 (\"malloc\", 0, 1, BT_INTEGER, ii, GFC_STD_GNU, gfc_check_malloc,\n+\t     NULL, gfc_resolve_malloc, a, BT_INTEGER, di, REQUIRED);\n+\n+  make_generic (\"malloc\", GFC_ISYM_MALLOC, GFC_STD_GNU);\n+\n   add_sym_2 (\"matmul\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_matmul, NULL, gfc_resolve_matmul,\n \t     ma, BT_REAL, dr, REQUIRED, mb, BT_REAL, dr, REQUIRED);\n@@ -2131,12 +2136,13 @@ add_subroutines (void)\n     *trim_name = \"trim_name\", *ut = \"unit\", *han = \"handler\",\n     *sec = \"seconds\";\n \n-  int di, dr, dc, dl;\n+  int di, dr, dc, dl, ii;\n \n   di = gfc_default_integer_kind;\n   dr = gfc_default_real_kind;\n   dc = gfc_default_character_kind;\n   dl = gfc_default_logical_kind;\n+  ii = gfc_index_integer_kind;\n \n   add_sym_0s (\"abort\", 1, GFC_STD_GNU, NULL);\n \n@@ -2244,6 +2250,9 @@ add_subroutines (void)\n \t      gfc_check_flush, NULL, gfc_resolve_flush,\n \t      c, BT_INTEGER, di, OPTIONAL);\n \n+  add_sym_1s (\"free\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU, gfc_check_free,\n+\t      NULL, gfc_resolve_free, c, BT_INTEGER, ii, REQUIRED);\n+\n   add_sym_2s (\"hostnm\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n           gfc_check_hostnm_sub, NULL, gfc_resolve_hostnm_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);"}, {"sha": "eb2517136cc48e63abb4a19bf1a1afff785dfc6a", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=0d519038a0354f983534037fd9a7d460421e4fd0", "patch": "@@ -83,6 +83,7 @@ try gfc_check_min_max (gfc_actual_arglist *);\n try gfc_check_min_max_integer (gfc_actual_arglist *);\n try gfc_check_min_max_real (gfc_actual_arglist *);\n try gfc_check_min_max_double (gfc_actual_arglist *);\n+try gfc_check_malloc (gfc_expr *);\n try gfc_check_matmul (gfc_expr *, gfc_expr *);\n try gfc_check_merge (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_minloc_maxloc (gfc_actual_arglist *);\n@@ -134,6 +135,7 @@ try gfc_check_system_clock (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_date_and_time (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_exit (gfc_expr *);\n try gfc_check_flush (gfc_expr *);\n+try gfc_check_free (gfc_expr *);\n try gfc_check_fstat_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_gerror (gfc_expr *);\n try gfc_check_getlog (gfc_expr *);\n@@ -335,6 +337,7 @@ void gfc_resolve_loc (gfc_expr *, gfc_expr *);\n void gfc_resolve_log (gfc_expr *, gfc_expr *);\n void gfc_resolve_log10 (gfc_expr *, gfc_expr *);\n void gfc_resolve_logical (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_malloc (gfc_expr *, gfc_expr *);\n void gfc_resolve_matmul (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_max (gfc_expr *, gfc_actual_arglist *);\n void gfc_resolve_maxloc (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -394,6 +397,7 @@ void gfc_resolve_chdir_sub (gfc_code *);\n void gfc_resolve_cpu_time (gfc_code *);\n void gfc_resolve_exit (gfc_code *);\n void gfc_resolve_flush (gfc_code *);\n+void gfc_resolve_free (gfc_code *);\n void gfc_resolve_fstat_sub (gfc_code *);\n void gfc_resolve_gerror (gfc_code *);\n void gfc_resolve_getarg (gfc_code *);"}, {"sha": "025b3f1a2b0198c6853aaea47da65099b520aa57", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 100, "deletions": 1, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=0d519038a0354f983534037fd9a7d460421e4fd0", "patch": "@@ -88,9 +88,11 @@ and editing.  All contributions and corrections are strongly encouraged.\n * @code{EXPONENT}:      EXPONENT,  Exponent function\n * @code{FLOOR}:         FLOOR,     Integer floor function\n * @code{FNUM}:          FNUM,      File number function\n+* @code{FREE}:          FREE,      Memory de-allocation subroutine\n * @code{LOC}:           LOC,       Returns the address of a variable\n * @code{LOG}:           LOG,       Logarithm function\n * @code{LOG10}:         LOG10,     Base 10 logarithm function \n+* @code{MALLOC}:        MALLOC,    Dynamic memory allocation function\n * @code{REAL}:          REAL,      Convert to real type \n * @code{SIGNAL}:        SIGNAL,    Signal handling subroutine (or function)\n * @code{SIN}:           SIN,       Sine function\n@@ -1757,7 +1759,7 @@ subroutine\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .80\n-@item @var{X} @tab The type shall be @code{REAL} with intent out.\n+@item @var{X} @tab The type shall be @code{REAL} with @code{INTENT(OUT)}.\n @end multitable\n \n @item @emph{Return value}:\n@@ -2697,6 +2699,41 @@ end program test_exponent\n @end table\n \n \n+@node FREE\n+@section @code{FREE} --- Frees memory\n+@findex @code{FREE} intrinsic\n+@cindex FREE\n+\n+@table @asis\n+@item @emph{Description}:\n+Frees memory previously allocated by @code{MALLOC()}. The @code{FREE}\n+intrinsic is an extension intended to be used with Cray pointers, and is\n+provided in @command{gfortran} to allow user to compile legacy code. For\n+new code using Fortran 95 pointers, the memory de-allocation intrinsic is\n+@code{DEALLOCATE}.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+subroutine\n+\n+@item @emph{Syntax}:\n+@code{FREE(PTR)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{PTR} @tab The type shall be @code{INTEGER}. It represents the\n+location of the memory that should be de-allocated.\n+@end multitable\n+\n+@item @emph{Return value}:\n+None\n+\n+@item @emph{Example}:\n+See @code{MALLOC} for an example.\n+@end table\n+\n \n @node FLOOR\n @section @code{FLOOR} --- Integer floor function\n@@ -2918,6 +2955,68 @@ end program test_log10\n @end table\n \n \n+@node MALLOC\n+@section @code{MALLOC} --- Allocate dynamic memory\n+@findex @code{MALLOC} intrinsic\n+@cindex MALLOC\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{MALLOC(SIZE)} allocates @var{SIZE} bytes of dynamic memory and\n+returns the address of the allocated memory. The @code{MALLOC} intrinsic\n+is an extension intended to be used with Cray pointers, and is provided\n+in @command{gfortran} to allow user to compile legacy code. For new code\n+using Fortran 95 pointers, the memory allocation intrinsic is\n+@code{ALLOCATE}.\n+\n+@item @emph{Option}:\n+gnu\n+\n+@item @emph{Class}:\n+non-elemental function\n+\n+@item @emph{Syntax}:\n+@code{PTR = MALLOC(SIZE)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{SIZE} @tab The type shall be @code{INTEGER(*)}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{INTEGER(K)}, with @var{K} such that\n+variables of type @code{INTEGER(K)} have the same size as\n+C pointers (@code{sizeof(void *)}).\n+\n+@item @emph{Example}:\n+The following example demonstrates the use of @code{MALLOC} and\n+@code{FREE} with Cray pointers. This example is intended to run on\n+32-bit systems, where the default integer kind is suitable to store\n+pointers; on 64-bit systems, ptr_x would need to be declared as\n+@code{integer(kind=8)}.\n+\n+@smallexample\n+program test_malloc\n+  integer i\n+  integer ptr_x\n+  real*8 x(*), z\n+  pointer(ptr_x,x)\n+\n+  ptr_x = malloc(20*8)\n+  do i = 1, 20\n+    x(i) = sqrt(1.0d0 / i)\n+  end do\n+  z = 0\n+  do i = 1, 20\n+    z = z + x(i)\n+    print *, z\n+  end do\n+  call free(ptr_x)\n+end program test_malloc\n+@end smallexample\n+@end table\n+\n+\n @node REAL\n @section @code{REAL} --- Convert to real type \n @findex @code{REAL} intrinsic"}, {"sha": "5650c0fb9b77cdda3eddeb09943bb7d20e3df04b", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=0d519038a0354f983534037fd9a7d460421e4fd0", "patch": "@@ -911,6 +911,24 @@ gfc_resolve_logical (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n }\n \n \n+void\n+gfc_resolve_malloc (gfc_expr * f, gfc_expr * size)\n+{\n+  if (size->ts.kind < gfc_index_integer_kind)\n+    {\n+      gfc_typespec ts;\n+\n+      ts.type = BT_INTEGER;\n+      ts.kind = gfc_index_integer_kind;\n+      gfc_convert_type_warn (size, &ts, 2, 0);\n+    }\n+\n+  f->ts.type = BT_INTEGER;\n+  f->ts.kind = gfc_index_integer_kind;\n+  f->value.function.name = gfc_get_string (PREFIX(\"malloc\"));\n+}\n+\n+\n void\n gfc_resolve_matmul (gfc_expr * f, gfc_expr * a, gfc_expr * b)\n {\n@@ -2079,6 +2097,22 @@ gfc_resolve_flush (gfc_code * c)\n }\n \n \n+void\n+gfc_resolve_free (gfc_code * c)\n+{\n+  gfc_typespec ts;\n+  gfc_expr *n;\n+\n+  ts.type = BT_INTEGER;\n+  ts.kind = gfc_index_integer_kind;\n+  n = c->ext.actual->expr;\n+  if (n->ts.kind != ts.kind)\n+    gfc_convert_type (n, &ts, 2);\n+\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (PREFIX(\"free\"));\n+}\n+\n+\n void\n gfc_resolve_gerror (gfc_code * c)\n {"}, {"sha": "93e8043360a6878f85a1f1dca4a0aef3e5317548", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=0d519038a0354f983534037fd9a7d460421e4fd0", "patch": "@@ -3096,6 +3096,7 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n     case GFC_ISYM_IRAND:\n     case GFC_ISYM_ISATTY:\n     case GFC_ISYM_LINK:\n+    case GFC_ISYM_MALLOC:\n     case GFC_ISYM_MATMUL:\n     case GFC_ISYM_RAND:\n     case GFC_ISYM_RENAME:"}, {"sha": "4f03ef05fc21ad36ff7828c19ad39fa19f2e167d", "filename": "gcc/testsuite/gfortran.dg/malloc_free_1.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ftestsuite%2Fgfortran.dg%2Fmalloc_free_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d519038a0354f983534037fd9a7d460421e4fd0/gcc%2Ftestsuite%2Fgfortran.dg%2Fmalloc_free_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmalloc_free_1.f90?ref=0d519038a0354f983534037fd9a7d460421e4fd0", "patch": "@@ -0,0 +1,11 @@\n+! Test for the MALLOC and FREE intrinsics\n+! If something is wrong with them, this test might segfault\n+! { dg-do run }\n+  integer j\n+  integer*8 i8\n+\n+  do j = 1, 10000\n+    i8 = malloc (10 * j)\n+    call free (i8)\n+  end do\n+  end"}, {"sha": "85ea74080cc29396f2557f5c2155f3064238e248", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d519038a0354f983534037fd9a7d460421e4fd0/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d519038a0354f983534037fd9a7d460421e4fd0/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=0d519038a0354f983534037fd9a7d460421e4fd0", "patch": "@@ -1,3 +1,10 @@\n+2005-10-30  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* Makefile.am: Add intrinsics/malloc.c file.\n+\t* Makefile.in: Regenerate.\n+\t* intrinsics/malloc.c: New file, with implementations for free\n+\tand malloc library functions.\n+\n 2005-10-29  Mike Stump  <mrs@apple.com>\n \n \t* Makefile.am (kinds.h): Remove target, if command fails."}, {"sha": "a786a38d8b3ee1defb1a9ff5c7dd5ca2cf4adf0e", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d519038a0354f983534037fd9a7d460421e4fd0/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d519038a0354f983534037fd9a7d460421e4fd0/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=0d519038a0354f983534037fd9a7d460421e4fd0", "patch": "@@ -63,6 +63,7 @@ intrinsics/kill.c \\\n intrinsics/ierrno.c \\\n intrinsics/ishftc.c \\\n intrinsics/link.c \\\n+intrinsics/malloc.c \\\n intrinsics/mvbits.c \\\n intrinsics/pack_generic.c \\\n intrinsics/perror.c \\"}, {"sha": "b8f52d5c4ed7bca22e80aedbf8f0b73e1d96a8c0", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d519038a0354f983534037fd9a7d460421e4fd0/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d519038a0354f983534037fd9a7d460421e4fd0/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=0d519038a0354f983534037fd9a7d460421e4fd0", "patch": "@@ -169,8 +169,8 @@ am__objects_33 = associated.lo abort.lo args.lo bessel.lo \\\n \tdate_and_time.lo env.lo erf.lo eoshift0.lo eoshift2.lo \\\n \tetime.lo exit.lo flush.lo fnum.lo gerror.lo getcwd.lo \\\n \tgetlog.lo getXid.lo hyper.lo hostnm.lo kill.lo ierrno.lo \\\n-\tishftc.lo link.lo mvbits.lo pack_generic.lo perror.lo \\\n-\tsignal.lo size.lo sleep.lo spread_generic.lo \\\n+\tishftc.lo link.lo malloc.lo mvbits.lo pack_generic.lo \\\n+\tperror.lo signal.lo size.lo sleep.lo spread_generic.lo \\\n \tstring_intrinsics.lo system.lo rand.lo random.lo rename.lo \\\n \treshape_generic.lo reshape_packed.lo selected_int_kind.lo \\\n \tselected_real_kind.lo stat.lo symlnk.lo system_clock.lo \\\n@@ -404,6 +404,7 @@ intrinsics/kill.c \\\n intrinsics/ierrno.c \\\n intrinsics/ishftc.c \\\n intrinsics/link.c \\\n+intrinsics/malloc.c \\\n intrinsics/mvbits.c \\\n intrinsics/pack_generic.c \\\n intrinsics/perror.c \\\n@@ -2291,6 +2292,9 @@ ishftc.lo: intrinsics/ishftc.c\n link.lo: intrinsics/link.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o link.lo `test -f 'intrinsics/link.c' || echo '$(srcdir)/'`intrinsics/link.c\n \n+malloc.lo: intrinsics/malloc.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o malloc.lo `test -f 'intrinsics/malloc.c' || echo '$(srcdir)/'`intrinsics/malloc.c\n+\n mvbits.lo: intrinsics/mvbits.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o mvbits.lo `test -f 'intrinsics/mvbits.c' || echo '$(srcdir)/'`intrinsics/mvbits.c\n "}, {"sha": "2f53d992002a5a9a7246025b899394cb29c028b2", "filename": "libgfortran/intrinsics/malloc.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d519038a0354f983534037fd9a7d460421e4fd0/libgfortran%2Fintrinsics%2Fmalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d519038a0354f983534037fd9a7d460421e4fd0/libgfortran%2Fintrinsics%2Fmalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fmalloc.c?ref=0d519038a0354f983534037fd9a7d460421e4fd0", "patch": "@@ -0,0 +1,55 @@\n+/* Implementation of the MALLOC and FREE intrinsics\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Contributed by Fran\u00e7ois-Xavier Coudert <coudert@clipper.ens.fr>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include \"libgfortran.h\"\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+extern void PREFIX(free) (void **);\n+export_proto_np(PREFIX(free));\n+\n+void\n+PREFIX(free) (void ** ptr)\n+{\n+  free (*ptr);\n+}\n+\n+\n+extern void * PREFIX(malloc) (size_t *);\n+export_proto_np(PREFIX(malloc));\n+\n+void *\n+PREFIX(malloc) (size_t * size)\n+{\n+  return malloc (*size);\n+}"}]}