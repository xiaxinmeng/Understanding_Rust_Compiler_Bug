{"sha": "ca0b7d18c1cd76de7015e01ff1414c4314eda7b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwYjdkMThjMWNkNzZkZTcwMTVlMDFmZjE0MTRjNDMxNGVkYTdiNA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-11-03T16:15:53Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-11-03T16:15:53Z"}, "message": "re PR middle-end/23155 (Gimplification failed for union cast)\n\n2005-11-03  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/23155\n        * g++.dg/ext/c99struct1.C: New test.\n        * gcc.dg/union-cast-1.c: New test.\n        * gcc.dg/union-cast-2.c: New test.\n        * gcc.dg/union-cast-3.c: New test.\n\n2005-11-03  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/23155\n        * gimplifier.c (gimplify_expr): Create a temporary for lvalue\n        CONSTRUCTOR.\n\nFrom-SVN: r106438", "tree": {"sha": "486ee6dc152e01f26744eebbd7a4694f864135df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/486ee6dc152e01f26744eebbd7a4694f864135df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/comments", "author": null, "committer": null, "parents": [{"sha": "031905948adabb18c9a4f1fe9156cbf5aea964b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/031905948adabb18c9a4f1fe9156cbf5aea964b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/031905948adabb18c9a4f1fe9156cbf5aea964b2"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "1ab1c66f7addd68d39c7f0a98498acd7e0267d23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca0b7d18c1cd76de7015e01ff1414c4314eda7b4", "patch": "@@ -1,3 +1,9 @@\n+2005-11-03  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/23155\n+\t* gimplifier.c (gimplify_expr): Create a temporary for lvalue\n+\tCONSTRUCTOR.\n+\n 2005-11-03  Daniel Berlin  <dberlin@dberlin.org>\n \n \tFix PR tree-optimization/24351"}, {"sha": "9e25aef25c2de92915d270f3217b66bfc0ca31c3", "filename": "gcc/gimplify.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ca0b7d18c1cd76de7015e01ff1414c4314eda7b4", "patch": "@@ -4323,6 +4323,15 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t      *expr_p = temp;\n \t      ret = GS_OK;\n \t    }\n+\t  /* C99 code may assign to an array in a constructed\n+\t     structure or union, and this has undefined behavior only\n+\t     on execution, so create a temporary if an lvalue is\n+\t     required.  */\n+\t  else if (fallback == fb_lvalue)\n+\t    {\n+\t      *expr_p = get_initialized_tmp_var (*expr_p, pre_p, post_p);\n+\t      lang_hooks.mark_addressable (*expr_p);\n+\t    }\n \t  else\n \t    ret = GS_ALL_DONE;\n \t  break;"}, {"sha": "9678651670f08f4ae950f0d1dd73cd70d36295b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca0b7d18c1cd76de7015e01ff1414c4314eda7b4", "patch": "@@ -1,3 +1,11 @@\n+2005-11-03  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/23155 \n+\t* g++.dg/ext/c99struct1.C: New test.\n+\t* gcc.dg/union-cast-1.c: New test.\n+\t* gcc.dg/union-cast-2.c: New test.\n+\t* gcc.dg/union-cast-3.c: New test.\n+\n 2005-11-03  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/24589"}, {"sha": "93e84b460393171b03b449ae2b5ad8a1adaa674a", "filename": "gcc/testsuite/g++.dg/ext/c99struct1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fc99struct1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fc99struct1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fc99struct1.C?ref=ca0b7d18c1cd76de7015e01ff1414c4314eda7b4", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"\" }\n+// C99 anon struct variable with array accesses.\n+\n+struct s { int a[1]; };\n+\n+void\n+foo5 (void)\n+{\n+\t  ((struct s) { { 0 } }).a[0] = 1;\n+}\n+\n+"}, {"sha": "1d7f4d549d8e3ca843ba7e7fa117f25be9ad659d", "filename": "gcc/testsuite/gcc.dg/union-cast-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2Ftestsuite%2Fgcc.dg%2Funion-cast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2Ftestsuite%2Fgcc.dg%2Funion-cast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funion-cast-1.c?ref=ca0b7d18c1cd76de7015e01ff1414c4314eda7b4", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } */\n+/* A combine of two extensions to C89 are used here.\n+   First casts to unions is used.\n+   Second subscripting non lvalue arrays, this is in C99. */\n+\n+union vx {short f[8]; int v;};\n+int vec;\n+\n+void\n+foo5 (int vec)\n+{\n+  ((union vx) vec).f[5] = 1;\n+}"}, {"sha": "9aac5caa2911192c7582c8f1d30dcdd2c6ee9a78", "filename": "gcc/testsuite/gcc.dg/union-cast-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2Ftestsuite%2Fgcc.dg%2Funion-cast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2Ftestsuite%2Fgcc.dg%2Funion-cast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funion-cast-2.c?ref=ca0b7d18c1cd76de7015e01ff1414c4314eda7b4", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c89 -pedantic-errors\" } */\n+/* PR 23155\n+   We should get two error messages, one about union cast\n+   and the other about array access for non lvalues.  */\n+\n+\n+union vx {short f[8]; int v;};\n+int vec;\n+\n+void\n+foo5 (int vec)\n+{\n+  ((union vx) vec).f[5] = 1; /* { dg-error \"(forbids subscripting)|(forbids casts to union type)\" } */\n+}"}, {"sha": "5f9b9f868704845fa22fe24640c74488d3c8dfff", "filename": "gcc/testsuite/gcc.dg/union-cast-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2Ftestsuite%2Fgcc.dg%2Funion-cast-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca0b7d18c1cd76de7015e01ff1414c4314eda7b4/gcc%2Ftestsuite%2Fgcc.dg%2Funion-cast-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funion-cast-3.c?ref=ca0b7d18c1cd76de7015e01ff1414c4314eda7b4", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+/* PR 23155\n+   We should get one error messag, one about union cast. */\n+\n+\n+union vx {short f[8]; int v;};\n+int vec;\n+\n+void\n+foo5 (int vec)\n+{\n+  ((union vx) vec).f[5] = 1; /* { dg-error \"forbids casts to union type\" } */\n+}"}]}