{"sha": "5b8999d67ec8c7ab68dc85fabf3445102a2e4b06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI4OTk5ZDY3ZWM4YzdhYjY4ZGM4NWZhYmYzNDQ1MTAyYTJlNGIwNg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-01-05T22:32:09Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-01-05T22:32:09Z"}, "message": "PR tree-optimization/78910 - Wrong print-return-value for a negative number\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/78910\n\t* gimple-ssa-sprintf.c (tree_digits): Add an argument.\n\t(format_integer): Correct off-by-one error in the handling\n\tof precision with negative numbers in signed conversions..\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/78910\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-7.c: Adjust text of expected\n\tdiagnostics.\n\t* gcc.dg/tree-ssa/builtin-sprintf.c: Add test cases.\n\t* gcc.dg/tree-ssa/pr78910.c: New test.\n\nFrom-SVN: r244116", "tree": {"sha": "aa71123de95c075e66fe8598afb85c01002ef5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa71123de95c075e66fe8598afb85c01002ef5f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e89adf9709dba511949a65a211d9bf702fe5753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e89adf9709dba511949a65a211d9bf702fe5753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e89adf9709dba511949a65a211d9bf702fe5753"}], "stats": {"total": 125, "additions": 110, "deletions": 15}, "files": [{"sha": "ff36b164fa786c059f431bb44efefb9f2ebddcf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b8999d67ec8c7ab68dc85fabf3445102a2e4b06", "patch": "@@ -1,3 +1,10 @@\n+2017-01-05  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/78910\n+\t* gimple-ssa-sprintf.c (tree_digits): Add an argument.\n+\t(format_integer): Correct off-by-one error in the handling\n+\tof precision with negative numbers in signed conversions..\n+\n 2017-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* doc/invoke.texi (C Dialect Options): Document it."}, {"sha": "6a9f679f8131bb313e672f3a5049e468714abac4", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=5b8999d67ec8c7ab68dc85fabf3445102a2e4b06", "patch": "@@ -549,17 +549,18 @@ ilog (unsigned HOST_WIDE_INT x, int base)\n }\n \n /* Return the number of bytes resulting from converting into a string\n-   the INTEGER_CST tree node X in BASE.  PLUS indicates whether 1 for\n-   a plus sign should be added for positive numbers, and PREFIX whether\n-   the length of an octal ('O') or hexadecimal ('0x') prefix should be\n-   added for nonzero numbers.  Return -1 if X cannot be represented.  */\n-\n-static int\n-tree_digits (tree x, int base, bool plus, bool prefix)\n+   the INTEGER_CST tree node X in BASE with a minimum of PREC digits.\n+   PLUS indicates whether 1 for a plus sign should be added for positive\n+   numbers, and PREFIX whether the length of an octal ('O') or hexadecimal\n+   ('0x') prefix should be added for nonzero numbers.  Return -1 if X cannot\n+   be represented.  */\n+\n+static HOST_WIDE_INT\n+tree_digits (tree x, int base, HOST_WIDE_INT prec, bool plus, bool prefix)\n {\n   unsigned HOST_WIDE_INT absval;\n \n-  int res;\n+  HOST_WIDE_INT res;\n \n   if (TYPE_UNSIGNED (TREE_TYPE (x)))\n     {\n@@ -591,7 +592,9 @@ tree_digits (tree x, int base, bool plus, bool prefix)\n \treturn -1;\n     }\n \n-  res += ilog (absval, base);\n+  int ndigs = ilog (absval, base);\n+\n+  res += prec < ndigs ? ndigs : prec;\n \n   if (prefix && absval)\n     {\n@@ -1022,10 +1025,9 @@ format_integer (const conversion_spec &spec, tree arg)\n \t  /* True when a conversion is preceded by a prefix indicating the base\n \t     of the argument (octal or hexadecimal).  */\n \t  bool maybebase = spec.get_flag ('#');\n-\t  len = tree_digits (arg, base, maybesign, maybebase);\n-\n-\t  if (len < prec)\n-\t    len = prec;\n+\t  len = tree_digits (arg, base, prec, maybesign, maybebase);\n+\t  if (len < 1)\n+\t    len = HOST_WIDE_INT_MAX;\n \t}\n \n       if (len < width)"}, {"sha": "275040cbf590389bf959bdf2e0744ed520f6412a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b8999d67ec8c7ab68dc85fabf3445102a2e4b06", "patch": "@@ -1,3 +1,11 @@\n+2017-01-05  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/78910\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-7.c: Adjust text of expected\n+\tdiagnostics.\n+\t* gcc.dg/tree-ssa/builtin-sprintf.c: Add test cases.\n+\t* gcc.dg/tree-ssa/pr78910.c: New test.\n+\n 2017-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/sso-10.c: New test."}, {"sha": "e087a8f873c808b94db9b0ca4d1617ed3aac74d1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-7.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-7.c?ref=5b8999d67ec8c7ab68dc85fabf3445102a2e4b06", "patch": "@@ -35,11 +35,16 @@ void test_integer_var (int i)\n   T (0, \"%*d\",  INT_MAX, i);     /* { dg-warning \"writing 2147483647 bytes\" } */\n \n   T (0, \"%.*d\", INT_MIN, i);     /* { dg-warning \"writing between 1 and 11 bytes\" } */\n-  T (0, \"%.*d\", INT_MAX, i);     /* { dg-warning \"writing 2147483647 bytes\" } */\n+\n+  /* The following writes INT_MAX digits and, when i is negative, a minus\n+     sign.  */\n+  T (0, \"%.*d\", INT_MAX, i);     /* { dg-warning \"writing between 2147483647 and 2147483648 bytes\" } */\n \n   T (0, \"%*.*d\", INT_MIN, INT_MIN, i);   /* { dg-warning \"writing 2147483648 bytes\" } */\n \n-  T (0, \"%*.*d\", INT_MAX, INT_MAX, i);   /* { dg-warning \"writing 2147483647 bytes\" } */\n+  /* The following writes INT_MAX digits and, when i is negative, a minus\n+     sign.  */\n+  T (0, \"%*.*d\", INT_MAX, INT_MAX, i);   /* { dg-warning \"writing between 2147483647 and 2147483648 bytes\" } */\n }\n \n void test_floating_a_cst (void)"}, {"sha": "275cb284ff260393581118f15fdad2bb7059e7c8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf.c?ref=5b8999d67ec8c7ab68dc85fabf3445102a2e4b06", "patch": "@@ -319,17 +319,61 @@ test_d_i (int i, long li)\n   RNG ( 1,  6,  7, \"%hi\",      i);\n   RNG ( 1,  5,  6, \"%hu\",      i);\n \n+  RNG ( 1,  6,  7, \"%.1hi\",    i);\n+  RNG ( 2,  6,  7, \"%.2hi\",    i);\n+  RNG ( 3,  6,  7, \"%.3hi\",    i);\n+  RNG ( 4,  6,  7, \"%.4hi\",    i);\n+  RNG ( 5,  6,  7, \"%.5hi\",    i);\n+  RNG ( 6,  7,  8, \"%.6hi\",    i);\n+  RNG ( 7,  8,  9, \"%.7hi\",    i);\n+\n #elif __SIZEOF_SHORT__ == 4\n   RNG ( 1, 11, 12, \"%hi\",      i);\n   RNG ( 1, 10, 11, \"%hu\",      i);\n+\n+  RNG ( 1, 11, 12, \"%.1hi\",    i);\n+  RNG ( 2, 11, 12, \"%.2hi\",    i);\n+  RNG ( 3, 11, 12, \"%.3hi\",    i);\n+  RNG ( 4, 11, 12, \"%.4hi\",    i);\n+  RNG ( 5, 11, 12, \"%.5hi\",    i);\n+  RNG ( 6, 11, 12, \"%.6hi\",    i);\n+  RNG ( 7, 11, 12, \"%.7hi\",    i);\n+  RNG ( 8, 11, 12, \"%.8hi\",    i);\n+  RNG ( 9, 11, 12, \"%.9hi\",    i);\n+  RNG (10, 11, 12, \"%.10hi\",   i);\n+  RNG (11, 12, 13, \"%.11hi\",   i);\n+  RNG (12, 13, 14, \"%.12hi\",   i);\n+  RNG (13, 14, 15, \"%.13hi\",   i);\n #endif\n \n #if __SIZEOF_INT__ == 2\n   RNG ( 1,  6,  7, \"%i\",       i);\n   RNG ( 1,  5,  6, \"%u\",       i);\n+\n+  RNG ( 1,  6,  7, \"%.1i\",     i);\n+  RNG ( 2,  6,  7, \"%.2i\",     i);\n+  RNG ( 3,  6,  7, \"%.3i\",     i);\n+  RNG ( 4,  6,  7, \"%.4i\",     i);\n+  RNG ( 5,  6,  7, \"%.5i\",     i);\n+  RNG ( 6,  7,  8, \"%.6i\",     i);\n+  RNG ( 7,  8,  9, \"%.7i\",     i);\n #elif __SIZEOF_INT__ == 4\n   RNG ( 1, 11, 12, \"%i\",       i);\n   RNG ( 1, 10, 11, \"%u\",       i);\n+\n+  RNG ( 1, 11, 12, \"%.1i\",    i);\n+  RNG ( 2, 11, 12, \"%.2i\",    i);\n+  RNG ( 3, 11, 12, \"%.3i\",    i);\n+  RNG ( 4, 11, 12, \"%.4i\",    i);\n+  RNG ( 5, 11, 12, \"%.5i\",    i);\n+  RNG ( 6, 11, 12, \"%.6i\",    i);\n+  RNG ( 7, 11, 12, \"%.7i\",    i);\n+  RNG ( 8, 11, 12, \"%.8i\",    i);\n+  RNG ( 9, 11, 12, \"%.9i\",    i);\n+  RNG (10, 11, 12, \"%.10i\",   i);\n+  RNG (11, 12, 13, \"%.11i\",   i);\n+  RNG (12, 13, 14, \"%.12i\",   i);\n+  RNG (13, 14, 15, \"%.13i\",   i);\n #elif __SIZEOF_INT__ == 8\n   RNG ( 1, 20, 21, \"%i\",       i);\n   RNG ( 1, 19, 20, \"%u\",       i);\n@@ -338,6 +382,20 @@ test_d_i (int i, long li)\n #if __SIZEOF_LONG__ == 4\n   RNG ( 1, 11, 12, \"%li\",      li);\n   RNG ( 1, 10, 11, \"%lu\",      li);\n+\n+  RNG ( 1, 11, 12, \"%.1li\",    li);\n+  RNG ( 2, 11, 12, \"%.2li\",    li);\n+  RNG ( 3, 11, 12, \"%.3li\",    li);\n+  RNG ( 4, 11, 12, \"%.4li\",    li);\n+  RNG ( 5, 11, 12, \"%.5li\",    li);\n+  RNG ( 6, 11, 12, \"%.6li\",    li);\n+  RNG ( 7, 11, 12, \"%.7li\",    li);\n+  RNG ( 8, 11, 12, \"%.8li\",    li);\n+  RNG ( 9, 11, 12, \"%.9li\",    li);\n+  RNG (10, 11, 12, \"%.10li\",   li);\n+  RNG (11, 12, 13, \"%.11li\",   li);\n+  RNG (12, 13, 14, \"%.12li\",   li);\n+  RNG (13, 14, 15, \"%.13li\",   li);\n #elif __SIZEOF_LONG__ == 8\n   RNG ( 1, 20, 21, \"%li\",      li);\n   RNG ( 1, 19, 20, \"%lu\",      li);"}, {"sha": "ba5216e58a8965efef89be1ef36ee2da9b624e4b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr78910.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78910.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8999d67ec8c7ab68dc85fabf3445102a2e4b06/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78910.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr78910.c?ref=5b8999d67ec8c7ab68dc85fabf3445102a2e4b06", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/78910 - Wrong print-return-value for a negative number\n+   { dg-do compile }\n+   { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int main()\n+{\n+  char b[128];\n+  int l = __builtin_sprintf (b, \"%.2d\", -1);\n+  __builtin_printf (\"b: '%s', length: %d\\n\", b, l);\n+  if (l != 3)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"abort\" \"optimized\"} } */"}]}