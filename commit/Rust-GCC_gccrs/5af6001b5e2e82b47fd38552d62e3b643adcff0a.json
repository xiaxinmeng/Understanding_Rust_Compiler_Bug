{"sha": "5af6001b5e2e82b47fd38552d62e3b643adcff0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFmNjAwMWI1ZTJlODJiNDdmZDM4NTUyZDYyZTNiNjQzYWRjZmYwYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-25T21:43:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-25T21:43:46Z"}, "message": "(shorten_compare): Don't issue warning if both operands constants and the...\n\n(shorten_compare): Don't issue warning if both operands constants and\nthe signedness doesn't affect the comparison results.\n\nFrom-SVN: r7981", "tree": {"sha": "410c07bafde7ee82f7f27923c712276019b270da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/410c07bafde7ee82f7f27923c712276019b270da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5af6001b5e2e82b47fd38552d62e3b643adcff0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af6001b5e2e82b47fd38552d62e3b643adcff0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5af6001b5e2e82b47fd38552d62e3b643adcff0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5af6001b5e2e82b47fd38552d62e3b643adcff0a/comments", "author": null, "committer": null, "parents": [{"sha": "96a31ab889aca2a00133a92a5692e748fc7b6f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a31ab889aca2a00133a92a5692e748fc7b6f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a31ab889aca2a00133a92a5692e748fc7b6f0e"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "0d9184f4ee4f3d8908bfc676617903cd9050985d", "filename": "gcc/c-common.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5af6001b5e2e82b47fd38552d62e3b643adcff0a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5af6001b5e2e82b47fd38552d62e3b643adcff0a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5af6001b5e2e82b47fd38552d62e3b643adcff0a", "patch": "@@ -1457,9 +1457,11 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n   real2 = TREE_CODE (TREE_TYPE (primop1)) == REAL_TYPE;\n \n   /* If first arg is constant, swap the args (changing operation\n-     so value is preserved), for canonicalization.  */\n+     so value is preserved), for canonicalization.  Don't do this if\n+     the second arg is 0.  */\n \n-  if (TREE_CONSTANT (primop0))\n+  if (TREE_CONSTANT (primop0)\n+      && ! integer_zerop (primop1) && ! real_zerop (primop1))\n     {\n       register tree tem = primop0;\n       register int temi = unsignedp0;\n@@ -1698,13 +1700,23 @@ shorten_compare (op0_ptr, op1_ptr, restype_ptr, rescode_ptr)\n \t  switch (code)\n \t    {\n \t    case GE_EXPR:\n-\t      if (extra_warnings)\n+\t      /* All unsigned values are >= 0, so we warn if extra warnings\n+\t\t are requested.  However, if OP0 is a constant that is\n+\t\t >= 0, the signedness of the comparison isn't an issue,\n+\t\t so suppress the warning.  */\n+\t      if (extra_warnings\n+\t\t  && ! (TREE_CODE (primop0) == INTEGER_CST\n+\t\t\t&& ! TREE_OVERFLOW (convert (signed_type (type),\n+\t\t\t\t\t\t     primop0))))\n \t\twarning (\"unsigned value >= 0 is always 1\");\n \t      value = integer_one_node;\n \t      break;\n \n \t    case LT_EXPR:\n-\t      if (extra_warnings)\n+\t      if (extra_warnings\n+\t\t  && ! (TREE_CODE (primop0) == INTEGER_CST\n+\t\t\t&& ! TREE_OVERFLOW (convert (signed_type (type),\n+\t\t\t\t\t\t     primop0))))\n \t\twarning (\"unsigned value < 0 is always 0\");\n \t      value = integer_zero_node;\n \t    }"}]}