{"sha": "5fbd944721c275a13c19ebf83ee76eb51732d9ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZiZDk0NDcyMWMyNzVhMTNjMTllYmY4M2VlNzZlYjUxNzMyZDlhZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-03-27T22:38:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-03-27T22:38:23Z"}, "message": "memmem.c: New file, from gnulib.\n\n\t* memmem.c: New file, from gnulib.\n\t* configure.ac: Add memmem to list of functions provided if they\n\tare not available on the host.\n\t* Makefile.in: Rebuild dependencies.\n\t(CFILES): Add memmem.c.\n\t(CONFIGURED_OFILES): Add memmem.o.\n\t* configure, config.in, functions.texi: Rebuild.\n\nFrom-SVN: r145139", "tree": {"sha": "b0984c49d6350c94d36f4040e271ef98474901a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0984c49d6350c94d36f4040e271ef98474901a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fbd944721c275a13c19ebf83ee76eb51732d9ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbd944721c275a13c19ebf83ee76eb51732d9ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fbd944721c275a13c19ebf83ee76eb51732d9ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fbd944721c275a13c19ebf83ee76eb51732d9ae/comments", "author": null, "committer": null, "parents": [{"sha": "2ac26e152e6ee91698ddd752d3ec788ead9c90df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac26e152e6ee91698ddd752d3ec788ead9c90df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ac26e152e6ee91698ddd752d3ec788ead9c90df"}], "stats": {"total": 117, "additions": 109, "deletions": 8}, "files": [{"sha": "141246a1248b0abcb0970eb66fb12523855bd99b", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=5fbd944721c275a13c19ebf83ee76eb51732d9ae", "patch": "@@ -1,3 +1,13 @@\n+2008-03-27  Ian Lance Taylor  <iant@google.com>\n+\n+\t* memmem.c: New file, from gnulib.\n+\t* configure.ac: Add memmem to list of functions provided if they\n+\tare not available on the host.\n+\t* Makefile.in: Rebuild dependencies.\n+\t(CFILES): Add memmem.c.\n+\t(CONFIGURED_OFILES): Add memmem.o.\n+\t* configure, config.in, functions.texi: Rebuild.\n+\n 2009-03-23  Jason Merrill  <jason@redhat.com>\n \n \t* cp-demangle.c (d_expression): Handle pack expansion."}, {"sha": "29068ea87635cfbf9046ae47e466ea66c5514320", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=5fbd944721c275a13c19ebf83ee76eb51732d9ae", "patch": "@@ -135,8 +135,8 @@ CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n \tlbasename.c\t\t\t\t\t\t\t\\\n \tlrealpath.c\t\t\t\t\t\t\t\\\n \tmake-relative-prefix.c\t\t\t\t\t\t\\\n-\tmake-temp-file.c md5.c memchr.c memcmp.c memcpy.c memmove.c\t\\\n-\t mempcpy.c memset.c mkstemps.c\t\t\t\t\t\\\n+\tmake-temp-file.c md5.c memchr.c memcmp.c memcpy.c memmem.c\t\\\n+\t memmove.c mempcpy.c memset.c mkstemps.c\t\t\t\\\n \tobjalloc.c obstack.c\t\t\t\t\t\t\\\n \tpartition.c pexecute.c\t\t\t\t\t\t\\\n \t pex-common.c pex-djgpp.c pex-msdos.c pex-one.c\t\t\t\\\n@@ -187,8 +187,8 @@ CONFIGURED_OFILES = ./asprintf.o ./atexit.o\t\t\t\t\\\n \t./ffs.o\t\t\t\t\t\t\t\t\\\n \t./getcwd.o ./getpagesize.o ./gettimeofday.o\t\t\t\\\n \t./index.o ./insque.o\t\t\t\t\t\t\\\n-\t./memchr.o ./memcmp.o ./memcpy.o ./memmove.o ./mempcpy.o\t\\\n-\t ./memset.o ./mkstemps.o\t\t\t\t\t\\\n+\t./memchr.o ./memcmp.o ./memcpy.o ./memmem.o ./memmove.o\t\t\\\n+\t ./mempcpy.o ./memset.o ./mkstemps.o\t\t\t\t\\\n \t./pex-djgpp.o ./pex-msdos.o\t\t\t\t\t\\\n \t ./pex-unix.o ./pex-win32.o\t\t\t\t\t\\\n \t ./putenv.o\t\t\t\t\t\t\t\\\n@@ -798,6 +798,12 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/memcpy.c $(OUTPUT_OPTION)\n \n+./memmem.o: $(srcdir)/memmem.c config.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/memmem.c -o pic/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/memmem.c $(OUTPUT_OPTION)\n+\n ./memmove.o: $(srcdir)/memmove.c $(INCDIR)/ansidecl.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/memmove.c -o pic/$@; \\"}, {"sha": "d34320c717d20fece584938d725979014139707e", "filename": "libiberty/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=5fbd944721c275a13c19ebf83ee76eb51732d9ae", "patch": "@@ -139,6 +139,9 @@\n /* Define to 1 if you have the `memcpy' function. */\n #undef HAVE_MEMCPY\n \n+/* Define to 1 if you have the `memmem' function. */\n+#undef HAVE_MEMMEM\n+\n /* Define to 1 if you have the `memmove' function. */\n #undef HAVE_MEMMOVE\n "}, {"sha": "4d0aeae4e5ca1a93d206e47715fa00d4d52876bb", "filename": "libiberty/configure", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=5fbd944721c275a13c19ebf83ee76eb51732d9ae", "patch": "@@ -5420,6 +5420,7 @@ funcs=\"$funcs insque\"\n funcs=\"$funcs memchr\"\n funcs=\"$funcs memcmp\"\n funcs=\"$funcs memcpy\"\n+funcs=\"$funcs memmem\"\n funcs=\"$funcs memmove\"\n funcs=\"$funcs mempcpy\"\n funcs=\"$funcs memset\"\n@@ -5530,11 +5531,12 @@ if test \"x\" = \"y\"; then\n \n \n \n+\n \n \n for ac_func in asprintf atexit basename bcmp bcopy bsearch bzero calloc clock \\\n   getcwd getpagesize gettimeofday index insque mkstemps memchr memcmp memcpy \\\n-  memmove mempcpy memset putenv random rename rindex sigsetmask \\\n+  memmem memmove mempcpy memset putenv random rename rindex sigsetmask \\\n   strcasecmp setenv stpcpy stpncpy strchr strdup strncasecmp strndup strrchr strstr \\\n   strtod strtol strtoul strverscmp tmpnam vasprintf vfprintf vprintf \\\n   vsprintf waitpid getrusage on_exit psignal strerror strsignal \\"}, {"sha": "7d167c35a8a82b43a4524832abc284de50b1874a", "filename": "libiberty/configure.ac", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=5fbd944721c275a13c19ebf83ee76eb51732d9ae", "patch": "@@ -317,6 +317,7 @@ funcs=\"$funcs insque\"\n funcs=\"$funcs memchr\"\n funcs=\"$funcs memcmp\"\n funcs=\"$funcs memcpy\"\n+funcs=\"$funcs memmem\"\n funcs=\"$funcs memmove\"\n funcs=\"$funcs mempcpy\"\n funcs=\"$funcs memset\"\n@@ -362,7 +363,7 @@ checkfuncs=\"$checkfuncs getsysinfo table sysctl wait3 wait4 __fsetlocking\"\n if test \"x\" = \"y\"; then\n   AC_CHECK_FUNCS(asprintf atexit basename bcmp bcopy bsearch bzero calloc clock \\\n   getcwd getpagesize gettimeofday index insque mkstemps memchr memcmp memcpy \\\n-  memmove mempcpy memset putenv random rename rindex sigsetmask \\\n+  memmem memmove mempcpy memset putenv random rename rindex sigsetmask \\\n   strcasecmp setenv stpcpy stpncpy strchr strdup strncasecmp strndup strrchr strstr \\\n   strtod strtol strtoul strverscmp tmpnam vasprintf vfprintf vprintf \\\n   vsprintf waitpid getrusage on_exit psignal strerror strsignal \\"}, {"sha": "da9a3202235cda6a90921e90c6e550215f049890", "filename": "libiberty/functions.texi", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=5fbd944721c275a13c19ebf83ee76eb51732d9ae", "patch": "@@ -158,7 +158,7 @@ not recommended.\n \n @end deftypefn\n \n-@c make-temp-file.c:87\n+@c make-temp-file.c:95\n @deftypefn Replacement char* choose_tmpdir ()\n \n Returns a pointer to a directory path suitable for creating temporary\n@@ -602,7 +602,7 @@ relative prefix can be found, return @code{NULL}.\n \n @end deftypefn\n \n-@c make-temp-file.c:137\n+@c make-temp-file.c:163\n @deftypefn Replacement char* make_temp_file (const char *@var{suffix})\n \n Return a temporary file name (as a string) or @code{NULL} if unable to\n@@ -643,6 +643,15 @@ Copies @var{length} bytes from memory region @var{in} to region\n \n @end deftypefn\n \n+@c memmem.c:20\n+@deftypefn Supplemental void* memmem (const void *@var{haystack}, size_t @var{haystack_len} const void *@var{needle}, size_t @var{needle_len})\n+\n+Returns a pointer to the first occurrence of @var{needle} (length\n+@var{needle_len}) in @var{haystack} (length @var{haystack_len}).\n+Returns @code{NULL} if not found.\n+\n+@end deftypefn\n+\n @c memmove.c:6\n @deftypefn Supplemental void* memmove (void *@var{from}, const void *@var{to}, size_t @var{count})\n "}, {"sha": "5d755992b76ec5f3a5d3087845ec722ea2e65a08", "filename": "libiberty/memmem.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2Fmemmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fbd944721c275a13c19ebf83ee76eb51732d9ae/libiberty%2Fmemmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemmem.c?ref=5fbd944721c275a13c19ebf83ee76eb51732d9ae", "patch": "@@ -0,0 +1,70 @@\n+/* Copyright (C) 1991,92,93,94,96,97,98,2000,2004,2007 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License along\n+   with this program; if not, write to the Free Software Foundation,\n+   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */\n+\n+/*\n+\n+@deftypefn Supplemental void* memmem (const void *@var{haystack}, size_t @var{haystack_len} const void *@var{needle}, size_t @var{needle_len})\n+\n+Returns a pointer to the first occurrence of @var{needle} (length\n+@var{needle_len}) in @var{haystack} (length @var{haystack_len}).\n+Returns @code{NULL} if not found.\n+\n+@end deftypefn\n+\n+*/\n+\n+#ifndef _LIBC\n+# include <config.h>\n+#endif\n+\n+#include <stddef.h>\n+#include <string.h>\n+\n+#ifndef _LIBC\n+# define __builtin_expect(expr, val)   (expr)\n+#endif\n+\n+#undef memmem\n+\n+/* Return the first occurrence of NEEDLE in HAYSTACK.  */\n+void *\n+memmem (const void *haystack, size_t haystack_len, const void *needle,\n+\tsize_t needle_len)\n+{\n+  const char *begin;\n+  const char *const last_possible\n+    = (const char *) haystack + haystack_len - needle_len;\n+\n+  if (needle_len == 0)\n+    /* The first occurrence of the empty string is deemed to occur at\n+       the beginning of the string.  */\n+    return (void *) haystack;\n+\n+  /* Sanity check, otherwise the loop might search through the whole\n+     memory.  */\n+  if (__builtin_expect (haystack_len < needle_len, 0))\n+    return NULL;\n+\n+  for (begin = (const char *) haystack; begin <= last_possible; ++begin)\n+    if (begin[0] == ((const char *) needle)[0] &&\n+\t!memcmp ((const void *) &begin[1],\n+\t\t (const void *) ((const char *) needle + 1),\n+\t\t needle_len - 1))\n+      return (void *) begin;\n+\n+  return NULL;\n+}"}]}