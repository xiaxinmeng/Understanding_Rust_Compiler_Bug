{"sha": "7ab6a03bf54b50672cd941d781cfa087e305845e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FiNmEwM2JmNTRiNTA2NzJjZDk0MWQ3ODFjZmEwODdlMzA1ODQ1ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-09-07T08:38:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-09-07T08:38:42Z"}, "message": "mips.c (build_mips16_call_stub): Emit all direct float calls here, rather than leaving some to the caller.\n\ngcc/\n\t* config/mips/mips.c (build_mips16_call_stub): Emit all direct\n\tfloat calls here, rather than leaving some to the caller.\n\tUse call_internal_direct and call_value_internal_direct.\n\t* config/mips/mips.md (call_internal_direct): New pattern.\n\t(call_value_internal_direct): Likewise.\n\nFrom-SVN: r128233", "tree": {"sha": "3288753e31f1b99ccd68b6d8cac7abd91533cdd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3288753e31f1b99ccd68b6d8cac7abd91533cdd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ab6a03bf54b50672cd941d781cfa087e305845e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab6a03bf54b50672cd941d781cfa087e305845e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab6a03bf54b50672cd941d781cfa087e305845e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab6a03bf54b50672cd941d781cfa087e305845e/comments", "author": null, "committer": null, "parents": [{"sha": "8d1d0deea09d3c4ae0c3953ac4a4cb142d712e22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1d0deea09d3c4ae0c3953ac4a4cb142d712e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1d0deea09d3c4ae0c3953ac4a4cb142d712e22"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "e5a2363ec78e15c752b90fe0e2f695cf5076b1dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab6a03bf54b50672cd941d781cfa087e305845e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab6a03bf54b50672cd941d781cfa087e305845e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ab6a03bf54b50672cd941d781cfa087e305845e", "patch": "@@ -1,3 +1,11 @@\n+2007-09-07  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/mips.c (build_mips16_call_stub): Emit all direct\n+\tfloat calls here, rather than leaving some to the caller.\n+\tUse call_internal_direct and call_value_internal_direct.\n+\t* config/mips/mips.md (call_internal_direct): New pattern.\n+\t(call_value_internal_direct): Likewise.\n+\n 2007-09-07  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips.c (mips_base_move_loop_invariants): New variable."}, {"sha": "2bbfec75b35bed3f20d575f9483da1dadc128ad6", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab6a03bf54b50672cd941d781cfa087e305845e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab6a03bf54b50672cd941d781cfa087e305845e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=7ab6a03bf54b50672cd941d781cfa087e305845e", "patch": "@@ -9339,6 +9339,7 @@ build_mips16_call_stub (rtx retval, rtx fn, rtx arg_size, int fp_code)\n   tree stubid, stubdecl;\n   int need_comma;\n   unsigned int f;\n+  rtx insn;\n \n   /* We don't need to do anything if we aren't in mips16 mode, or if\n      we were invoked with the -msoft-float option.  */\n@@ -9604,34 +9605,26 @@ build_mips16_call_stub (rtx retval, rtx fn, rtx arg_size, int fp_code)\n   if (fpret && ! l->fpret)\n     error (\"cannot handle inconsistent calls to %qs\", fnname);\n \n+  if (retval == NULL_RTX)\n+    insn = gen_call_internal_direct (fn, arg_size);\n+  else\n+    insn = gen_call_value_internal_direct (retval, fn, arg_size);\n+  insn = emit_call_insn (insn);\n+\n   /* If we are calling a stub which handles a floating point return\n      value, we need to arrange to save $18 in the prologue.  We do\n      this by marking the function call as using the register.  The\n      prologue will later see that it is used, and emit code to save\n      it.  */\n-\n   if (l->fpret)\n-    {\n-      rtx insn;\n+    CALL_INSN_FUNCTION_USAGE (insn) =\n+      gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t gen_rtx_USE (VOIDmode, gen_rtx_REG (word_mode, 18)),\n+\t\t\t CALL_INSN_FUNCTION_USAGE (insn));\n \n-      if (retval == NULL_RTX)\n-\tinsn = gen_call_internal (fn, arg_size);\n-      else\n-\tinsn = gen_call_value_internal (retval, fn, arg_size);\n-      insn = emit_call_insn (insn);\n-\n-      CALL_INSN_FUNCTION_USAGE (insn) =\n-\tgen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t   gen_rtx_USE (VOIDmode, gen_rtx_REG (word_mode, 18)),\n-\t\t\t   CALL_INSN_FUNCTION_USAGE (insn));\n-\n-      /* Return 1 to tell the caller that we've generated the call\n-         insn.  */\n-      return 1;\n-    }\n-\n-  /* Return 0 to let the caller generate the call insn.  */\n-  return 0;\n+  /* Return 1 to tell the caller that we've generated the call\n+     insn.  */\n+  return 1;\n }\n \n /* An entry in the mips16 constant pool.  VALUE is the pool constant,"}, {"sha": "2006f92060062c4c7406b10857860e89aabcd7b6", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab6a03bf54b50672cd941d781cfa087e305845e/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab6a03bf54b50672cd941d781cfa087e305845e/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=7ab6a03bf54b50672cd941d781cfa087e305845e", "patch": "@@ -5666,6 +5666,18 @@\n   [(set_attr \"jal\" \"indirect,direct\")\n    (set_attr \"extended_mips16\" \"no,yes\")])\n \n+;; A pattern for calls that must be made directly.  It is used for\n+;; MIPS16 calls that the linker may need to redirect to a hard-float\n+;; stub; the linker relies on the call relocation type to detect when\n+;; such redirection is needed.\n+(define_insn \"call_internal_direct\"\n+  [(call (mem:SI (match_operand 0 \"const_call_insn_operand\"))\n+\t (match_operand 1))\n+   (const_int 1)\n+   (clobber (reg:SI 31))]\n+  \"\"\n+  { return MIPS_CALL (\"jal\", operands, 0); })\n+\n (define_insn \"call_split\"\n   [(call (mem:SI (match_operand 0 \"call_insn_operand\" \"cS\"))\n \t (match_operand 1 \"\" \"\"))\n@@ -5717,6 +5729,16 @@\n   { return MIPS_CALL (\"jal\", operands, 1); }\n   [(set_attr \"type\" \"call\")])\n \n+;; See call_internal_direct.\n+(define_insn \"call_value_internal_direct\"\n+  [(set (match_operand 0 \"register_operand\")\n+        (call (mem:SI (match_operand 1 \"const_call_insn_operand\"))\n+              (match_operand 2)))\n+   (const_int 1)\n+   (clobber (reg:SI 31))]\n+  \"\"\n+  { return MIPS_CALL (\"jal\", operands, 1); })\n+\n ;; See comment for call_internal.\n (define_insn_and_split \"call_value_multiple_internal\"\n   [(set (match_operand 0 \"register_operand\" \"\")"}]}