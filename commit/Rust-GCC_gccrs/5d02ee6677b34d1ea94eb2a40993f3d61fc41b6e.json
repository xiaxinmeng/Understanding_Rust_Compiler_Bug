{"sha": "5d02ee6677b34d1ea94eb2a40993f3d61fc41b6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQwMmVlNjY3N2IzNGQxZWE5NGViMmE0MDk5M2YzZDYxZmM0MWI2ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-04-26T23:21:55Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-04-26T23:21:55Z"}, "message": "alpha.h (CONST_COSTS): Zero is always free.\n\n* alpha.h (CONST_COSTS): Zero is always free.\n(RTX_COSTS): Add EV6 costs.  Abort if alpha_cpu is unknown.\n\nFrom-SVN: r19420", "tree": {"sha": "1252f36e519dd63fabc7b89bd070e13a57e0b6d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1252f36e519dd63fabc7b89bd070e13a57e0b6d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d02ee6677b34d1ea94eb2a40993f3d61fc41b6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d02ee6677b34d1ea94eb2a40993f3d61fc41b6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d02ee6677b34d1ea94eb2a40993f3d61fc41b6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d02ee6677b34d1ea94eb2a40993f3d61fc41b6e/comments", "author": null, "committer": null, "parents": [{"sha": "fcce69a9e93a8e1491d626e90cea99d36b2c4b26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcce69a9e93a8e1491d626e90cea99d36b2c4b26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcce69a9e93a8e1491d626e90cea99d36b2c4b26"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "66316242ce0e4c0163dccc59fcc324ba590783d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d02ee6677b34d1ea94eb2a40993f3d61fc41b6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d02ee6677b34d1ea94eb2a40993f3d61fc41b6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d02ee6677b34d1ea94eb2a40993f3d61fc41b6e", "patch": "@@ -1,3 +1,8 @@\n+Sun Apr 26 23:19:10 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.h (CONST_COSTS): Zero is always free.\n+\t(RTX_COSTS): Add EV6 costs.  Abort if alpha_cpu is unknown.\n+\n Sun Apr 26 15:38:50 1998  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n \n \t* cplus-dem.c (gnu_special): Fix off-by-one bug when checking the"}, {"sha": "6fd6acdb0fe226562efa01f9eacc18a5ddd1782f", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d02ee6677b34d1ea94eb2a40993f3d61fc41b6e/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d02ee6677b34d1ea94eb2a40993f3d61fc41b6e/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=5d02ee6677b34d1ea94eb2a40993f3d61fc41b6e", "patch": "@@ -1671,7 +1671,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n     if (INTVAL (RTX) >= 0 && INTVAL (RTX) < 256)\t\t\\\n       return 0;\t\t\t\t\t\t\t\\\n   case CONST_DOUBLE:\t\t\t\t\t\t\\\n-    if (((OUTER_CODE) == PLUS && add_operand (RTX, VOIDmode))\t\\\n+    if ((RTX) == CONST0_RTX (GET_MODE (RTX)))\t\t\t\\\n+      return 0;\t\t\t\t\t\t\t\\\n+    else if (((OUTER_CODE) == PLUS && add_operand (RTX, VOIDmode)) \\\n \t|| ((OUTER_CODE) == AND && and_operand (RTX, VOIDmode))) \\\n       return 0;\t\t\t\t\t\t\t\\\n     else if (add_operand (RTX, VOIDmode) || and_operand (RTX, VOIDmode)) \\\n@@ -1686,7 +1688,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n     case PROCESSOR_EV4:\t\t\t\t\t\t\\\n       return COSTS_N_INSNS (3);\t\t\t\t\t\\\n     case PROCESSOR_EV5:\t\t\t\t\t\t\\\n+    case PROCESSOR_EV6:\t\t\t\t\t\t\\\n       return COSTS_N_INSNS (2);\t\t\t\t\t\\\n+    default: abort();\t\t\t\t\t\t\\\n     }\n     \n /* Provide the costs of a rtl expression.  This is in the body of a\n@@ -1700,7 +1704,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n         case PROCESSOR_EV4:\t\t\t\t\\\n           return COSTS_N_INSNS (6);\t\t\t\\\n         case PROCESSOR_EV5:\t\t\t\t\\\n+        case PROCESSOR_EV6:\t\t\t\t\\\n           return COSTS_N_INSNS (4); \t\t\t\\\n+\tdefault: abort();\t\t\t\t\\\n \t}\t\t\t\t\t\t\\\n     else if (GET_CODE (XEXP (X, 0)) == MULT\t\t\\\n \t     && const48_operand (XEXP (XEXP (X, 0), 1), VOIDmode)) \\\n@@ -1721,19 +1727,37 @@ do {\t\t\t\t\t\t\t\t\t\\\n           return COSTS_N_INSNS (12);\t\t\t\\\n         else\t\t\t\t\t\t\\\n           return COSTS_N_INSNS (8);\t\t\t\\\n+      case PROCESSOR_EV6:\t\t\t\t\\\n+\tif (FLOAT_MODE_P (GET_MODE (X)))\t\t\\\n+\t  return COSTS_N_INSNS (4);\t\t\t\\\n+\telse \t\t\t\t\t\t\\\n+\t  return COSTS_N_INSNS (7);\t\t\t\\\n+      default: abort();\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\\\n   case ASHIFT:\t\t\t\t\t\t\\\n     if (GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\\\n \t&& INTVAL (XEXP (X, 1)) <= 3)\t\t\t\\\n       break;\t\t\t\t\t\t\\\n     /* ... fall through ... */\t\t\t\t\\\n-  case ASHIFTRT:  case LSHIFTRT:  case IF_THEN_ELSE:\t\\\n+  case ASHIFTRT:  case LSHIFTRT:\t\t\t\\\n     switch (alpha_cpu)\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\\\n       case PROCESSOR_EV4:\t\t\t\t\\\n         return COSTS_N_INSNS (2);\t\t\t\\\n       case PROCESSOR_EV5:\t\t\t\t\\\n+      case PROCESSOR_EV6:\t\t\t\t\\\n         return COSTS_N_INSNS (1); \t\t\t\\\n+      default: abort();\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  case IF_THEN_ELSE:\t\t\t\t\t\\\n+    switch (alpha_cpu)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+      case PROCESSOR_EV4:\t\t\t\t\\\n+      case PROCESSOR_EV6:\t\t\t\t\\\n+        return COSTS_N_INSNS (2);\t\t\t\\\n+      case PROCESSOR_EV5:\t\t\t\t\\\n+        return COSTS_N_INSNS (1); \t\t\t\\\n+      default: abort();\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\\\n   case DIV:  case UDIV:  case MOD:  case UMOD:\t\t\\\n     switch (alpha_cpu)\t\t\t\t\t\\\n@@ -1751,15 +1775,25 @@ do {\t\t\t\t\t\t\t\t\t\\\n         else if (GET_MODE (X) == DFmode)\t\t\\\n           return COSTS_N_INSNS (22);\t\t\t\\\n         else\t\t\t\t\t\t\\\n-          return COSTS_N_INSNS (70);\t/* EV5 ??? */\t\\\n+          return COSTS_N_INSNS (70);\t/* ??? */\t\\\n+      case PROCESSOR_EV6:\t\t\t\t\\\n+\tif (GET_MODE (X) == SFmode)\t\t\t\\\n+\t  return COSTS_N_INSNS (12);\t\t\t\\\n+        else if (GET_MODE (X) == DFmode)\t\t\\\n+          return COSTS_N_INSNS (15);\t\t\t\\\n+        else\t\t\t\t\t\t\\\n+          return COSTS_N_INSNS (70);\t/* ??? */\t\\\n+      default: abort();\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\\\n   case MEM:\t\t\t\t\t\t\\\n     switch (alpha_cpu)\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\\\n       case PROCESSOR_EV4:\t\t\t\t\\\n+      case PROCESSOR_EV6:\t\t\t\t\\\n         return COSTS_N_INSNS (3);\t\t\t\\\n       case PROCESSOR_EV5:\t\t\t\t\\\n         return COSTS_N_INSNS (2); \t\t\t\\\n+      default: abort();\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\\\n   case NEG:  case ABS:\t\t\t\t\t\\\n     if (! FLOAT_MODE_P (GET_MODE (X)))\t\t\t\\\n@@ -1772,7 +1806,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n       case PROCESSOR_EV4:\t\t\t\t\\\n         return COSTS_N_INSNS (6);\t\t\t\\\n       case PROCESSOR_EV5:\t\t\t\t\\\n+      case PROCESSOR_EV6:\t\t\t\t\\\n         return COSTS_N_INSNS (4); \t\t\t\\\n+      default: abort();\t\t\t\t\t\\\n       }\n \f\n /* Control the assembler format that we output.  */"}]}