{"sha": "4c71a171edb5e21a89a08643abfe933a43bb5d6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM3MWExNzFlZGI1ZTIxYTg5YTA4NjQzYWJmZTkzM2E0M2JiNWQ2ZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-08-11T08:10:42Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-08-11T08:10:42Z"}, "message": "Fix ifunc and resolver (PR ipa/81213).\n\n2017-08-11  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/81213\n\t* config/i386/i386.c (make_resolver_func): Do complete\n\trefactoring of the function.\n2017-08-11  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/81213\n\t* gcc.target/i386/pr81213.c: New test.\n\nFrom-SVN: r251047", "tree": {"sha": "dc6950b1cffedac5672fb2c607bb404862c93de8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc6950b1cffedac5672fb2c607bb404862c93de8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c71a171edb5e21a89a08643abfe933a43bb5d6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c71a171edb5e21a89a08643abfe933a43bb5d6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c71a171edb5e21a89a08643abfe933a43bb5d6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c71a171edb5e21a89a08643abfe933a43bb5d6d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5675808f5c0b9a91dfea8543828fa1c236b6467f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5675808f5c0b9a91dfea8543828fa1c236b6467f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5675808f5c0b9a91dfea8543828fa1c236b6467f"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "48e94f7754edc30d8a0b7fd0acd48f418fd14c84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c71a171edb5e21a89a08643abfe933a43bb5d6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c71a171edb5e21a89a08643abfe933a43bb5d6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c71a171edb5e21a89a08643abfe933a43bb5d6d", "patch": "@@ -1,3 +1,9 @@\n+2017-08-11  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/81213\n+\t* config/i386/i386.c (make_resolver_func): Do complete\n+\trefactoring of the function.\n+\n 2017-08-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/81708"}, {"sha": "b04321a8d407f4e16f1f840744e2e5e10dec98f4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c71a171edb5e21a89a08643abfe933a43bb5d6d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c71a171edb5e21a89a08643abfe933a43bb5d6d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4c71a171edb5e21a89a08643abfe933a43bb5d6d", "patch": "@@ -33913,30 +33913,30 @@ ix86_get_function_versions_dispatcher (void *decl)\n }\n \n /* Make the resolver function decl to dispatch the versions of\n-   a multi-versioned function,  DEFAULT_DECL.  Create an\n+   a multi-versioned function,  DEFAULT_DECL.  IFUNC_ALIAS_DECL is\n+   ifunc alias that will point to the created resolver.  Create an\n    empty basic block in the resolver and store the pointer in\n    EMPTY_BB.  Return the decl of the resolver function.  */\n \n static tree\n make_resolver_func (const tree default_decl,\n-\t\t    const tree dispatch_decl,\n+\t\t    const tree ifunc_alias_decl,\n \t\t    basic_block *empty_bb)\n {\n   char *resolver_name;\n   tree decl, type, decl_name, t;\n-  bool is_uniq = false;\n \n   /* IFUNC's have to be globally visible.  So, if the default_decl is\n      not, then the name of the IFUNC should be made unique.  */\n   if (TREE_PUBLIC (default_decl) == 0)\n-    is_uniq = true;\n+    {\n+      char *ifunc_name = make_unique_name (default_decl, \"ifunc\", true);\n+      symtab->change_decl_assembler_name (ifunc_alias_decl,\n+\t\t\t\t\t  get_identifier (ifunc_name));\n+      XDELETEVEC (ifunc_name);\n+    }\n \n-  /* Append the filename to the resolver function if the versions are\n-     not externally visible.  This is because the resolver function has\n-     to be externally visible for the loader to find it.  So, appending\n-     the filename will prevent conflicts with a resolver function from\n-     another module which is based on the same version name.  */\n-  resolver_name = make_unique_name (default_decl, \"resolver\", is_uniq);\n+  resolver_name = make_unique_name (default_decl, \"resolver\", false);\n \n   /* The resolver function should return a (void *). */\n   type = build_function_type_list (ptr_type_node, NULL_TREE);\n@@ -33949,13 +33949,12 @@ make_resolver_func (const tree default_decl,\n   TREE_USED (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n   DECL_IGNORED_P (decl) = 0;\n-  /* IFUNC resolvers have to be externally visible.  */\n-  TREE_PUBLIC (decl) = 1;\n+  TREE_PUBLIC (decl) = 0;\n   DECL_UNINLINABLE (decl) = 1;\n \n   /* Resolver is not external, body is generated.  */\n   DECL_EXTERNAL (decl) = 0;\n-  DECL_EXTERNAL (dispatch_decl) = 0;\n+  DECL_EXTERNAL (ifunc_alias_decl) = 0;\n \n   DECL_CONTEXT (decl) = NULL_TREE;\n   DECL_INITIAL (decl) = make_node (BLOCK);\n@@ -33986,14 +33985,14 @@ make_resolver_func (const tree default_decl,\n \n   pop_cfun ();\n \n-  gcc_assert (dispatch_decl != NULL);\n-  /* Mark dispatch_decl as \"ifunc\" with resolver as resolver_name.  */\n-  DECL_ATTRIBUTES (dispatch_decl) \n-    = make_attribute (\"ifunc\", resolver_name, DECL_ATTRIBUTES (dispatch_decl));\n+  gcc_assert (ifunc_alias_decl != NULL);\n+  /* Mark ifunc_alias_decl as \"ifunc\" with resolver as resolver_name.  */\n+  DECL_ATTRIBUTES (ifunc_alias_decl)\n+    = make_attribute (\"ifunc\", resolver_name,\n+\t\t      DECL_ATTRIBUTES (ifunc_alias_decl));\n \n   /* Create the alias for dispatch to resolver here.  */\n-  /*cgraph_create_function_alias (dispatch_decl, decl);*/\n-  cgraph_node::create_same_body_alias (dispatch_decl, decl);\n+  cgraph_node::create_same_body_alias (ifunc_alias_decl, decl);\n   XDELETEVEC (resolver_name);\n   return decl;\n }"}, {"sha": "76c07405a0de791e48dcb34845d1d70f90c94b5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c71a171edb5e21a89a08643abfe933a43bb5d6d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c71a171edb5e21a89a08643abfe933a43bb5d6d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c71a171edb5e21a89a08643abfe933a43bb5d6d", "patch": "@@ -1,3 +1,8 @@\n+2017-08-11  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/81213\n+\t* gcc.target/i386/pr81213.c: New test.\n+\n 2017-08-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/81708"}, {"sha": "13e15d5fef036aeafa956320019ee6a855d4e16e", "filename": "gcc/testsuite/gcc.target/i386/pr81213.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c71a171edb5e21a89a08643abfe933a43bb5d6d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81213.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c71a171edb5e21a89a08643abfe933a43bb5d6d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81213.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81213.c?ref=4c71a171edb5e21a89a08643abfe933a43bb5d6d", "patch": "@@ -0,0 +1,19 @@\n+/* PR ipa/81214.  */\n+/* { dg-do compile } */\n+/* { dg-require-ifunc \"\" } */\n+\n+__attribute__((target_clones(\"avx\",\"arch=slm\",\"arch=core-avx2\",\"default\")))\n+static int\n+foo ()\n+{\n+  return -2;\n+}\n+\n+int main()\n+{\n+  return foo();\n+}\n+\n+/* { dg-final { scan-assembler \"\\t.globl\\tfoo\\\\..*\\\\.ifunc\" } } */\n+/* { dg-final { scan-assembler \"foo.resolver:\" } } */\n+/* { dg-final { scan-assembler \"foo\\\\..*\\\\.ifunc, @gnu_indirect_function\" } } */"}]}