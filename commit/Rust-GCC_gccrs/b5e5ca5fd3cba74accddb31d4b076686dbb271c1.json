{"sha": "b5e5ca5fd3cba74accddb31d4b076686dbb271c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVlNWNhNWZkM2NiYTc0YWNjZGRiMzFkNGIwNzY2ODZkYmIyNzFjMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-03-19T16:58:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-03-19T16:58:54Z"}, "message": "tuple (get(_Tuple_impl<>&, get(const _Tuple_impl<>&): Rename as __get_helper.\n\n2007-03-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/tuple (get(_Tuple_impl<>&, get(const _Tuple_impl<>&):\n\tRename as __get_helper.\n\t(get(tuple<>&, get(const tuple<>&)): Forward to the latter.\n\nFrom-SVN: r123063", "tree": {"sha": "f1d8b028f549661907cef32d343d5c5dddd7b072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1d8b028f549661907cef32d343d5c5dddd7b072"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5e5ca5fd3cba74accddb31d4b076686dbb271c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e5ca5fd3cba74accddb31d4b076686dbb271c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5e5ca5fd3cba74accddb31d4b076686dbb271c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e5ca5fd3cba74accddb31d4b076686dbb271c1/comments", "author": null, "committer": null, "parents": [{"sha": "17f6dbbf4e300bbb7534e4250f01e2cbcc8cc66f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f6dbbf4e300bbb7534e4250f01e2cbcc8cc66f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f6dbbf4e300bbb7534e4250f01e2cbcc8cc66f"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "a01ad6762139c888c5b7e5ba171faa7b4ec29fd4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e5ca5fd3cba74accddb31d4b076686dbb271c1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e5ca5fd3cba74accddb31d4b076686dbb271c1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b5e5ca5fd3cba74accddb31d4b076686dbb271c1", "patch": "@@ -1,3 +1,9 @@\n+2007-03-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/tuple (get(_Tuple_impl<>&, get(const _Tuple_impl<>&):\n+\tRename as __get_helper.\n+\t(get(tuple<>&, get(const tuple<>&)): Forward to the latter.\n+\n 2007-03-19  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* docs/doxygen/user.cfg.in: Update for new includes, macros."}, {"sha": "7beef19481bb29fc740070fa78b3d5d5f986694a", "filename": "libstdc++-v3/include/tr1/tuple", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e5ca5fd3cba74accddb31d4b076686dbb271c1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e5ca5fd3cba74accddb31d4b076686dbb271c1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple?ref=b5e5ca5fd3cba74accddb31d4b076686dbb271c1", "patch": "@@ -269,22 +269,40 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n   template<typename... _Elements>\n     const int tuple_size<tuple<_Elements...> >::value;\n \n-  // Returns a const reference to the ith element of a tuple.\n-  // Any const or non-const ref elements are returned with their original type.\n   template<int __i, typename _Head, typename... _Tail>\n     inline typename __add_ref<_Head>::type\n-    get(_Tuple_impl<__i, _Head, _Tail...>& __t)\n+    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t)\n     {\n       return __t._M_head;\n     }\n \n   template<int __i, typename _Head, typename... _Tail>\n     inline typename __add_c_ref<_Head>::type\n-    get(const _Tuple_impl<__i, _Head, _Tail...>& __t)\n+    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t)\n     {\n       return __t._M_head;\n     }\n \n+  // Return a reference (const reference) to the ith element of a tuple.\n+  // Any const or non-const ref elements are returned with their original type.\n+  template<int __i, typename... _Elements>\n+    inline typename __add_ref<\n+                      typename tuple_element<__i, tuple<_Elements...> >::type\n+                    >::type\n+    get(tuple<_Elements...>& __t)\n+    { \n+      return __get_helper<__i>(__t); \n+    }\n+\n+  template<int __i, typename... _Elements>\n+    inline typename __add_c_ref<\n+                      typename tuple_element<__i, tuple<_Elements...> >::type\n+                    >::type\n+    get(const tuple<_Elements...>& __t)\n+    {\n+      return __get_helper<__i>(__t);\n+    }\n+\n   // This class helps construct the various comparison operations on tuples\n   template<int __check_equal_size, int __i, int __j,\n \t   typename _Tp, typename _Up>"}]}