{"sha": "7d87790a871482e9c5142a8e885b4a5f76d197c8", "node_id": "C_kwDOANBUbNoAKDdkODc3OTBhODcxNDgyZTljNTE0MmE4ZTg4NWI0YTVmNzZkMTk3Yzg", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-07T01:49:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-08T20:37:50Z"}, "message": "c++: redeclared hidden friend take 2 [PR105852]\n\nMy previous patch for 105761 avoided copying DECL_TEMPLATE_INFO from a\nfriend to a later definition, but in this testcase we have first a\nnon-friend declaration and then a definition, and we need to avoid copying\nin that case as well.  But we do still want to set new_template_info to\navoid GC trouble.\n\nWith this change, the modules dump correctly identifies ::foo as a\nnon-template function in tpl-friend-2_a.C.\n\nAlong the way I noticed that the duplicate_decls handling of\nDECL_UNIQUE_FRIEND_P was backwards for templates, where we don't clobber\nDECL_LANG_SPECIFIC (olddecl) with DECL_LANG_SPECIFIC (newdecl) like we do\nfor non-templates.\n\n\tPR c++/105852\n\tPR c++/105761\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (duplicate_decls): Avoid copying template info\n\tfrom non-templated friend even if newdecl isn't a definition.\n\tCorrect handling of DECL_UNIQUE_FRIEND_P on templates.\n\t* pt.cc (non_templated_friend_p): New.\n\t* cp-tree.h (non_templated_friend_p): Declare it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/modules/tpl-friend-2_a.C: Adjust expected dump.\n\t* g++.dg/template/friend74.C: New test.", "tree": {"sha": "325dc6c6b4fc7a1911fa124eb13a61cc3907856f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/325dc6c6b4fc7a1911fa124eb13a61cc3907856f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d87790a871482e9c5142a8e885b4a5f76d197c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d87790a871482e9c5142a8e885b4a5f76d197c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d87790a871482e9c5142a8e885b4a5f76d197c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d87790a871482e9c5142a8e885b4a5f76d197c8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6e1373bd34aebbb512a03ea9a4e3c7acd955382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e1373bd34aebbb512a03ea9a4e3c7acd955382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e1373bd34aebbb512a03ea9a4e3c7acd955382"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "3d8a08b8dd7c1d3e4eb8c130f81aed95cec55cbe", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d87790a871482e9c5142a8e885b4a5f76d197c8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d87790a871482e9c5142a8e885b4a5f76d197c8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7d87790a871482e9c5142a8e885b4a5f76d197c8", "patch": "@@ -7395,6 +7395,7 @@ extern bool push_tinst_level_loc                (tree, location_t);\n extern bool push_tinst_level_loc                (tree, tree, location_t);\n extern void pop_tinst_level                     (void);\n extern struct tinst_level *outermost_tinst_level(void);\n+extern bool non_templated_friend_p\t\t(tree);\n extern void init_template_processing\t\t(void);\n extern void print_template_statistics\t\t(void);\n bool template_template_parameter_p\t\t(const_tree);"}, {"sha": "3e869954ccbb3cce49cbfa92aeb9bb3de529fe3f", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d87790a871482e9c5142a8e885b4a5f76d197c8/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d87790a871482e9c5142a8e885b4a5f76d197c8/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=7d87790a871482e9c5142a8e885b4a5f76d197c8", "patch": "@@ -2294,8 +2294,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n \t      merge_default_template_args (new_parms, old_parms,\n \t\t\t\t\t   /*class_p=*/false);\n \t    }\n-\t  if (!DECL_UNIQUE_FRIEND_P (old_result))\n-\t    DECL_UNIQUE_FRIEND_P (new_result) = false;\n+\t  if (!DECL_UNIQUE_FRIEND_P (new_result))\n+\t    DECL_UNIQUE_FRIEND_P (old_result) = false;\n \n \t  check_default_args (newdecl);\n \n@@ -2654,22 +2654,18 @@ duplicate_decls (tree newdecl, tree olddecl, bool hiding, bool was_hidden)\n       if (LANG_DECL_HAS_MIN (newdecl))\n \t{\n \t  DECL_ACCESS (newdecl) = DECL_ACCESS (olddecl);\n-\t  if (new_defines_function\n-\t      && DECL_TEMPLATE_INFO (olddecl)\n-\t      && DECL_UNIQUE_FRIEND_P (DECL_TEMPLATE_RESULT\n-\t\t\t\t       (DECL_TI_TEMPLATE (olddecl))))\n-\t    /* Don't copy template info from a non-template friend declaration\n-\t       in a class template (PR105761).  */;\n-\t  else if (DECL_TEMPLATE_INFO (newdecl))\n+\t  if (DECL_TEMPLATE_INFO (newdecl))\n \t    {\n \t      new_template_info = DECL_TEMPLATE_INFO (newdecl);\n \t      if (DECL_TEMPLATE_INSTANTIATION (olddecl)\n \t\t  && DECL_TEMPLATE_SPECIALIZATION (newdecl))\n \t\t/* Remember the presence of explicit specialization args.  */\n \t\tTINFO_USED_TEMPLATE_ID (DECL_TEMPLATE_INFO (olddecl))\n \t\t  = TINFO_USED_TEMPLATE_ID (new_template_info);\n-\t      DECL_TEMPLATE_INFO (newdecl) = DECL_TEMPLATE_INFO (olddecl);\n \t    }\n+\n+\t  if (non_templated_friend_p (olddecl))\n+\t    /* Don't copy tinfo from a non-templated friend (PR105761).  */;\n \t  else\n \t    DECL_TEMPLATE_INFO (newdecl) = DECL_TEMPLATE_INFO (olddecl);\n \t}"}, {"sha": "9c1b026857ee7a8db31f72808456d30743ded7cc", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d87790a871482e9c5142a8e885b4a5f76d197c8/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d87790a871482e9c5142a8e885b4a5f76d197c8/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=7d87790a871482e9c5142a8e885b4a5f76d197c8", "patch": "@@ -11165,6 +11165,33 @@ outermost_tinst_level (void)\n   return level;\n }\n \n+/* True iff T is a friend function declaration that is not itself a template\n+   and is not defined in a class template.  */\n+\n+bool\n+non_templated_friend_p (tree t)\n+{\n+  if (t && TREE_CODE (t) == FUNCTION_DECL\n+      && DECL_UNIQUE_FRIEND_P (t))\n+    {\n+      tree ti = DECL_TEMPLATE_INFO (t);\n+      if (!ti)\n+\treturn true;\n+      /* DECL_FRIEND_CONTEXT is set for a friend defined in class.  */\n+      if (DECL_FRIEND_CONTEXT (t))\n+\treturn false;\n+      /* Non-templated friends in a class template are still represented with a\n+\t TEMPLATE_DECL; check that its primary template is the befriending\n+\t class.  Note that DECL_PRIMARY_TEMPLATE is null for\n+\t template <class T> friend A<T>::f(); */\n+      tree tmpl = TI_TEMPLATE (ti);\n+      tree primary = DECL_PRIMARY_TEMPLATE (tmpl);\n+      return (primary && primary != tmpl);\n+    }\n+  else\n+    return false;\n+}\n+\n /* DECL is a friend FUNCTION_DECL or TEMPLATE_DECL.  ARGS is the\n    vector of template arguments, as for tsubst.\n \n@@ -14094,7 +14121,7 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n       /* This special case arises when we have something like this:\n \n \t template <class T> struct S {\n-\t friend void f<int>(int, double);\n+\t   friend void f<int>(int, double);\n \t };\n \n \t Here, the DECL_TI_TEMPLATE for the friend declaration"}, {"sha": "c12857fbf69c052db30dd4c37600a0365634d2c8", "filename": "gcc/testsuite/g++.dg/modules/tpl-friend-2_a.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d87790a871482e9c5142a8e885b4a5f76d197c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Ftpl-friend-2_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d87790a871482e9c5142a8e885b4a5f76d197c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Ftpl-friend-2_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Ftpl-friend-2_a.C?ref=7d87790a871482e9c5142a8e885b4a5f76d197c8", "patch": "@@ -16,5 +16,5 @@ template class TPL<int>;  // instantiate\n void foo (int, void *);\n \n // { dg-final { scan-lang-dump {Cluster members:\\n  \\[0\\]=decl definition '::template TPL'\\n(  \\[.\\]=[^\\n]*'\\n)*  \\[.\\]=decl declaration '::template foo'\\n(  \\[.\\]=[^\\n]*'\\n)*  \\[.\\]=binding '::TPL'} module } }\n-// { dg-final { scan-lang-dump {Cluster members:\\n  \\[0\\]=decl declaration '::foo<int>'\\n  \\[.\\]=binding '::foo'} module } }\n+// { dg-final { scan-lang-dump {Cluster members:\\n  \\[0\\]=decl declaration '::foo'\\n  \\[.\\]=binding '::foo'} module } }\n // { dg-final { scan-lang-dump {Cluster members:\\n  \\[0\\]=specialization definition '::TPL<int>'} module } }"}, {"sha": "51708334d81e26634cfb0543501881109fb1fe79", "filename": "gcc/testsuite/g++.dg/template/friend74.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d87790a871482e9c5142a8e885b4a5f76d197c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend74.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d87790a871482e9c5142a8e885b4a5f76d197c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend74.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend74.C?ref=7d87790a871482e9c5142a8e885b4a5f76d197c8", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/105852\n+// { dg-additional-options -w }\n+\n+template <class> struct Local { friend Local False(int *); };\n+Local<int> loc;\n+Local<int> False(int *);\n+void New() { False; }\n+Local<int> False(int *) { return Local<int>(); }"}]}