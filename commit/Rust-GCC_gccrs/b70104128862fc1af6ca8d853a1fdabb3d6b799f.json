{"sha": "b70104128862fc1af6ca8d853a1fdabb3d6b799f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcwMTA0MTI4ODYyZmMxYWY2Y2E4ZDg1M2ExZmRhYmIzZDZiNzk5Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "1999-12-20T20:29:36Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1999-12-20T20:29:36Z"}, "message": "expr.c (store_constructor): New argument SIZE; pass to clear_storage.\n\n\t* expr.c (store_constructor): New argument SIZE; pass to clear_storage.\n\t(store_constructor_field, expand_expr): Pass new arg.\n\nFrom-SVN: r31037", "tree": {"sha": "082c16f1a542dfdf7aa383951f8c462c27e43765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/082c16f1a542dfdf7aa383951f8c462c27e43765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b70104128862fc1af6ca8d853a1fdabb3d6b799f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b70104128862fc1af6ca8d853a1fdabb3d6b799f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b70104128862fc1af6ca8d853a1fdabb3d6b799f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b70104128862fc1af6ca8d853a1fdabb3d6b799f/comments", "author": null, "committer": null, "parents": [{"sha": "11a6092b63419880d75a7910db03a35a4bea5e2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a6092b63419880d75a7910db03a35a4bea5e2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11a6092b63419880d75a7910db03a35a4bea5e2c"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "2f2de25c441313a4418321b743230672996923ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70104128862fc1af6ca8d853a1fdabb3d6b799f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70104128862fc1af6ca8d853a1fdabb3d6b799f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b70104128862fc1af6ca8d853a1fdabb3d6b799f", "patch": "@@ -1,3 +1,8 @@\n+Mon Dec 20 15:00:04 1999  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* expr.c (store_constructor): New argument SIZE; pass to clear_storage.\n+\t(store_constructor_field, expand_expr): Pass new arg.\n+\n 1999-12-20  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in (explow.o): Depend on function.h."}, {"sha": "b31d2b8c7ee798ca3a9a4e396e941d79a720f9a2", "filename": "gcc/expr.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70104128862fc1af6ca8d853a1fdabb3d6b799f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70104128862fc1af6ca8d853a1fdabb3d6b799f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b70104128862fc1af6ca8d853a1fdabb3d6b799f", "patch": "@@ -145,7 +145,7 @@ static int is_zeros_p\t\tPROTO((tree));\n static int mostly_zeros_p\tPROTO((tree));\n static void store_constructor_field PROTO((rtx, int, int, enum machine_mode,\n \t\t\t\t\t   tree, tree, int, int));\n-static void store_constructor\tPROTO((tree, rtx, int, int));\n+static void store_constructor\tPROTO((tree, rtx, int, int, int));\n static rtx store_field\t\tPROTO((rtx, int, int, enum machine_mode, tree,\n \t\t\t\t       enum machine_mode, int, int,\n \t\t\t\t       int, int));\n@@ -4074,7 +4074,7 @@ store_constructor_field (target, bitsize, bitpos,\n \t\t\t    ? BLKmode : VOIDmode,\n \t\t\t    plus_constant (XEXP (target, 0),\n \t\t\t\t\t   bitpos / BITS_PER_UNIT));\n-      store_constructor (exp, target, align, cleared);\n+      store_constructor (exp, target, align, cleared, bitsize / BITS_PER_UNIT);\n     }\n   else\n     store_field (target, bitsize, bitpos, mode, exp, VOIDmode, 0, \n@@ -4085,14 +4085,18 @@ store_constructor_field (target, bitsize, bitpos,\n /* Store the value of constructor EXP into the rtx TARGET.\n    TARGET is either a REG or a MEM.\n    ALIGN is the maximum known alignment for TARGET, in bits.\n-   CLEARED is true if TARGET is known to have been zero'd.  */\n+   CLEARED is true if TARGET is known to have been zero'd.\n+   SIZE is the number of bytes of TARGET we are allowed to modify: this\n+   may not be the same as the size of EXP if we are assigning to a field\n+   which has been packed to exclude padding bits.  */\n \n static void\n-store_constructor (exp, target, align, cleared)\n+store_constructor (exp, target, align, cleared, size)\n      tree exp;\n      rtx target;\n      int align;\n      int cleared;\n+     int size;\n {\n   tree type = TREE_TYPE (exp);\n #ifdef WORD_REGISTER_OPERATIONS\n@@ -4107,7 +4111,7 @@ store_constructor (exp, target, align, cleared)\n   if (GET_CODE (target) == REG && REGNO (target) < FIRST_PSEUDO_REGISTER)\n     {\n       rtx temp = gen_reg_rtx (GET_MODE (target));\n-      store_constructor (exp, temp, 0);\n+      store_constructor (exp, temp, 0, size);\n       emit_move_insn (target, temp);\n       return;\n     }\n@@ -4152,7 +4156,7 @@ store_constructor (exp, target, align, cleared)\n \t       || mostly_zeros_p (exp))\n \t{\n \t  if (! cleared)\n-\t    clear_storage (target, expr_size (exp),\n+\t    clear_storage (target, GEN_INT (size),\n \t\t\t   (align + BITS_PER_UNIT - 1) / BITS_PER_UNIT);\n \n \t  cleared = 1;\n@@ -4338,7 +4342,7 @@ store_constructor (exp, target, align, cleared)\n       if (need_to_clear)\n \t{\n \t  if (! cleared)\n-\t    clear_storage (target, expr_size (exp),\n+\t    clear_storage (target, GEN_INT (size),\n \t\t\t   (align + BITS_PER_UNIT - 1) / BITS_PER_UNIT);\n \t  cleared = 1;\n \t}\n@@ -4443,7 +4447,8 @@ store_constructor (exp, target, align, cleared)\n \t\t  addr = gen_rtx_PLUS (Pmode, XEXP (target, 0), pos_rtx);\n \t\t  xtarget = change_address (target, mode, addr);\n \t\t  if (TREE_CODE (value) == CONSTRUCTOR)\n-\t\t    store_constructor (value, xtarget, align, cleared);\n+\t\t    store_constructor (value, xtarget, align, cleared,\n+\t\t\t\t       bitsize / BITS_PER_UNIT);\n \t\t  else\n \t\t    store_expr (value, xtarget, 0);\n \n@@ -4517,7 +4522,7 @@ store_constructor (exp, target, align, cleared)\n       if (elt == NULL_TREE)\n \t{\n \t  if (!cleared)\n-\t    clear_storage (target, expr_size (exp),\n+\t    clear_storage (target, GEN_INT (size),\n \t\t\t   TYPE_ALIGN (type) / BITS_PER_UNIT);\n \t  return;\n \t}\n@@ -6363,7 +6368,8 @@ expand_expr (exp, target, tmode, modifier)\n \t      RTX_UNCHANGING_P (target) = 1;\n \t    }\n \n-\t  store_constructor (exp, target, TYPE_ALIGN (TREE_TYPE (exp)), 0);\n+\t  store_constructor (exp, target, TYPE_ALIGN (TREE_TYPE (exp)), 0,\n+\t\t\t     int_size_in_bytes (TREE_TYPE (exp)));\n \t  return target;\n \t}\n "}]}