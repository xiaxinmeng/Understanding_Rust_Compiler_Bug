{"sha": "dbe348c157796a1d01de6f6a7b432a6e70b5fb0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJlMzQ4YzE1Nzc5NmExZDAxZGU2ZjZhN2I0MzJhNmU3MGI1ZmIwZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-11-05T11:10:04Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-11-05T11:10:04Z"}, "message": "Update coding style in symbol-summary.h.\n\n2019-11-05  Martin Liska  <mliska@suse.cz>\n\n\t* symbol-summary.h: Rename allocator to m_allocator and\n\tadd comment.\n\nFrom-SVN: r277823", "tree": {"sha": "0823d492e0f781a7df0334bb037dc6fc60ee9777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0823d492e0f781a7df0334bb037dc6fc60ee9777"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbe348c157796a1d01de6f6a7b432a6e70b5fb0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe348c157796a1d01de6f6a7b432a6e70b5fb0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe348c157796a1d01de6f6a7b432a6e70b5fb0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe348c157796a1d01de6f6a7b432a6e70b5fb0d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f340142b839ca1ed576013b4dba3d34245bac7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f340142b839ca1ed576013b4dba3d34245bac7d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f340142b839ca1ed576013b4dba3d34245bac7d0"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "4ee9ec680abca852886a1aa678f643224b836ff5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe348c157796a1d01de6f6a7b432a6e70b5fb0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe348c157796a1d01de6f6a7b432a6e70b5fb0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbe348c157796a1d01de6f6a7b432a6e70b5fb0d", "patch": "@@ -1,3 +1,8 @@\n+2019-11-05  Martin Liska  <mliska@suse.cz>\n+\n+\t* symbol-summary.h: Rename allocator to m_allocator and\n+\tadd comment.\n+\n 2019-11-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92324"}, {"sha": "8aedcfe914335f82306f922a121a6f1ca9cb9339", "filename": "gcc/symbol-summary.h", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe348c157796a1d01de6f6a7b432a6e70b5fb0d/gcc%2Fsymbol-summary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe348c157796a1d01de6f6a7b432a6e70b5fb0d/gcc%2Fsymbol-summary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymbol-summary.h?ref=dbe348c157796a1d01de6f6a7b432a6e70b5fb0d", "patch": "@@ -31,7 +31,7 @@ class function_summary_base\n   function_summary_base (symbol_table *symtab CXX_MEM_STAT_INFO):\n   m_symtab (symtab),\n   m_insertion_enabled (true),\n-  allocator (\"function summary\" PASS_MEM_STAT)\n+  m_allocator (\"function summary\" PASS_MEM_STAT)\n   {}\n \n   /* Basic implementation of insert operation.  */\n@@ -62,7 +62,7 @@ class function_summary_base\n     /* Call gcc_internal_because we do not want to call finalizer for\n        a type T.  We call dtor explicitly.  */\n     return is_ggc () ? new (ggc_internal_alloc (sizeof (T))) T ()\n-\t\t     : allocator.allocate () ;\n+\t\t     : m_allocator.allocate () ;\n   }\n \n   /* Release an item that is stored within map.  */\n@@ -74,7 +74,7 @@ class function_summary_base\n \tggc_free (item);\n       }\n     else\n-      allocator.remove (item);\n+      m_allocator.remove (item);\n   }\n \n   /* Unregister all call-graph hooks.  */\n@@ -95,7 +95,9 @@ class function_summary_base\n private:\n   /* Return true when the summary uses GGC memory for allocation.  */\n   virtual bool is_ggc () = 0;\n-  object_allocator<T> allocator;\n+\n+  /* Object allocator for heap allocation.  */\n+  object_allocator<T> m_allocator;\n };\n \n template <typename T>\n@@ -537,7 +539,7 @@ class call_summary_base\n   call_summary_base (symbol_table *symtab CXX_MEM_STAT_INFO):\n   m_symtab (symtab),\n   m_initialize_when_cloning (false),\n-  allocator (\"call summary\" PASS_MEM_STAT)\n+  m_allocator (\"call summary\" PASS_MEM_STAT)\n   {}\n \n   /* Basic implementation of removal operation.  */\n@@ -553,7 +555,7 @@ class call_summary_base\n     /* Call gcc_internal_because we do not want to call finalizer for\n        a type T.  We call dtor explicitly.  */\n     return is_ggc () ? new (ggc_internal_alloc (sizeof (T))) T ()\n-\t\t     : allocator.allocate ();\n+\t\t     : m_allocator.allocate ();\n   }\n \n   /* Release an item that is stored within map.  */\n@@ -565,7 +567,7 @@ class call_summary_base\n \tggc_free (item);\n       }\n     else\n-      allocator.remove (item);\n+      m_allocator.remove (item);\n   }\n \n   /* Unregister all call-graph hooks.  */\n@@ -584,7 +586,9 @@ class call_summary_base\n private:\n   /* Return true when the summary uses GGC memory for allocation.  */\n   virtual bool is_ggc () = 0;\n-  object_allocator<T> allocator;\n+\n+  /* Object allocator for heap allocation.  */\n+  object_allocator<T> m_allocator;\n };\n \n template <typename T>"}]}