{"sha": "7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U4MGM2YmYwYWMxOTUzMGE5NzFjNGQxMDRmNWU2YTkxZGM4MWNiMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-04-15T15:39:42Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-04-15T15:39:42Z"}, "message": "tree-predcom.c (suitable_reference_p): Return false if the reference can throw.\n\n\t* tree-predcom.c (suitable_reference_p): Return false if the\n\treference can throw.\n\nFrom-SVN: r134319", "tree": {"sha": "e59230b706e8a18c25d185160e128d00a5950d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e59230b706e8a18c25d185160e128d00a5950d59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1/comments", "author": null, "committer": null, "parents": [{"sha": "b97d81535d07cfb6d1275f9c83d88af0dec96cd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97d81535d07cfb6d1275f9c83d88af0dec96cd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b97d81535d07cfb6d1275f9c83d88af0dec96cd0"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "bb298373de89e33978ec334284772199b34ff9fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1", "patch": "@@ -1,3 +1,8 @@\n+2008-04-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-predcom.c (suitable_reference_p): Return false if the\n+\treference can throw.\n+\n 2008-04-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/35751"}, {"sha": "646e5455e407d06840c08f64f940e629393fb936", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1", "patch": "@@ -1,3 +1,7 @@\n+2008-04-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/loop_optimization1.ad[sb]: New test.\n+\n 2008-04-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/35751"}, {"sha": "8875c1f8d81665f0e20d67c1380b6bc9fea4bc99", "filename": "gcc/testsuite/gnat.dg/loop_optimization1.adb", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization1.adb?ref=7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1", "patch": "@@ -0,0 +1,27 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O3\" }\n+\n+package body Loop_Optimization1 is\n+\n+   procedure Create (A : in out D; Val : Integer) is\n+\n+      M : constant Group_Chain_List := Group_Chains(Val);\n+      G : constant Group_List := Groups(Val);\n+\n+      function Is_Visible (Group : Number) return Boolean is\n+      begin\n+         for I in M'Range loop\n+            if Group = M(I).Groups(M(I).Length) then\n+               return True;\n+            end if;\n+         end loop;\n+         return False;\n+      end;\n+\n+   begin\n+      for I in A.L'Range loop\n+         A.L(I) := new R(Is_Visible(G(I)));\n+      end loop;\n+   end;\n+\n+end Loop_Optimization1;"}, {"sha": "2c3f419b50d9a04a573590b8c2549c829846556e", "filename": "gcc/testsuite/gnat.dg/loop_optimization1.ads", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floop_optimization1.ads?ref=7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1", "patch": "@@ -0,0 +1,35 @@\n+package Loop_Optimization1 is\n+\n+   type Number is range 0 .. 127;\n+\n+   type Group_List is array (Positive range <>) of Number;\n+\n+   subtype Index is Natural range 1 .. 5;\n+\n+   function Groups (T : Integer) return Group_List;\n+   pragma Import (Ada, Groups);\n+ \n+   type Group_Chain (Length : Index := 1) is record\n+      Groups : Group_List(1 .. Length);\n+   end record;\n+\n+   type Group_Chain_List is array (Positive range <>) of Group_Chain;\n+\n+   function Group_Chains (T : Integer) return Group_Chain_List;\n+   pragma Import (Ada, Group_Chains);\n+\n+   type R (I : Boolean) is null record;\n+ \n+   type R_Access is access R;\n+\n+   type R_List is array (Positive range <>) of R_Access;\n+\n+   type R_List_Access is access R_List;\n+\n+   type D is record\n+      L : R_List_Access;\n+   end record;\n+\n+   procedure Create (A : in out D; Val : Integer);\n+\n+end Loop_Optimization1;"}, {"sha": "dfb53420e8f402c5d1bddda766bb7c07c318a95a", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=7e80c6bf0ac19530a971c4d104f5e6a91dc81cb1", "patch": "@@ -590,7 +590,8 @@ suitable_reference_p (struct data_reference *a, enum ref_step_type *ref_step)\n   tree ref = DR_REF (a), step = DR_STEP (a);\n \n   if (!step\n-      || !is_gimple_reg_type (TREE_TYPE (ref)))\n+      || !is_gimple_reg_type (TREE_TYPE (ref))\n+      || tree_could_throw_p (ref))\n     return false;\n \n   if (integer_zerop (step))"}]}