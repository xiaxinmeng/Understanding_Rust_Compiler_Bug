{"sha": "b89d20aa3ceac01ced1f762a198a69f5b214a8d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg5ZDIwYWEzY2VhYzAxY2VkMWY3NjJhMTk4YTY5ZjViMjE0YThkMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.columbia.edu", "date": "1999-04-26T06:48:57Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "1999-04-26T06:48:57Z"}, "message": "rtl.texi: Document the rtl classes and their relation to formats.\n\n1999-04-26 09:47 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n\t* rtl.texi: Document the rtl classes and their relation to\n\tformats.\n\nFrom-SVN: r26641", "tree": {"sha": "889bda24400d314b0aa43bbe425b11bcb9f7bba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/889bda24400d314b0aa43bbe425b11bcb9f7bba6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b89d20aa3ceac01ced1f762a198a69f5b214a8d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89d20aa3ceac01ced1f762a198a69f5b214a8d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b89d20aa3ceac01ced1f762a198a69f5b214a8d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89d20aa3ceac01ced1f762a198a69f5b214a8d3/comments", "author": null, "committer": null, "parents": [{"sha": "3af5b6b508c286be77b30da2602753daf49e42f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af5b6b508c286be77b30da2602753daf49e42f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af5b6b508c286be77b30da2602753daf49e42f3"}], "stats": {"total": 140, "additions": 95, "deletions": 45}, "files": [{"sha": "0c7af89b33e494478590f98f782cc3f5d03c877c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89d20aa3ceac01ced1f762a198a69f5b214a8d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89d20aa3ceac01ced1f762a198a69f5b214a8d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b89d20aa3ceac01ced1f762a198a69f5b214a8d3", "patch": "@@ -1,3 +1,8 @@\n+1999-04-26 09:47 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* rtl.texi: Document the rtl classes and their relation to\n+\tformats.\n+\n Mon Apr 26 01:02:38 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.md (fix_trunc patterns): Use reg_no_subreg_operand on op0"}, {"sha": "ebb07acabb27f95340560e5a1c787efd607cdd5c", "filename": "gcc/rtl.texi", "status": "modified", "additions": 90, "deletions": 45, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89d20aa3ceac01ced1f762a198a69f5b214a8d3/gcc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89d20aa3ceac01ced1f762a198a69f5b214a8d3/gcc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.texi?ref=b89d20aa3ceac01ced1f762a198a69f5b214a8d3", "patch": "@@ -20,6 +20,7 @@ form uses nested parentheses to indicate the pointers in the internal form.\n \n @menu\n * RTL Objects::       Expressions vs vectors vs strings vs integers.\n+* RTL Classes::       Categories of RTL expresion objects, and their structure.\n * Accessors::         Macros to access expression operands or vector elts.\n * Flags::             Other flags in an RTL expression.\n * Machine Modes::     Describing the size and format of a datum.\n@@ -39,7 +40,7 @@ form uses nested parentheses to indicate the pointers in the internal form.\n * Reading RTL::       Reading textual RTL from a file.\n @end menu\n \n-@node RTL Objects, Accessors, RTL, RTL\n+@node RTL Objects, RTL Classes, RTL, RTL\n @section RTL Object Types\n @cindex RTL object types\n \n@@ -108,19 +109,76 @@ manual, they are shown as follows: @code{const_int}.\n In a few contexts a null pointer is valid where an expression is normally\n wanted.  The written form of this is @code{(nil)}.\n \n-@node Accessors, Flags, RTL Objects, RTL\n-@section Access to Operands\n-@cindex accessors\n-@cindex access to operands\n-@cindex operand access\n+@node RTL Classes, Accessors, RTL Objects, RTL\n+@section RTL Classes and Formats\n+@cindex RTL classes\n+@cindex classes of RTX codes\n+@cindex RTX codes, classes of\n+@findex GET_RTX_CLASS\n+\n+The various expression codes are divided into several @dfn{classes},\n+which are represented by single characters.  You can determine the class\n+of an RTX code with the macro @code{GET_RTX_CLASS (@var{code})}.\n+Currently, @file{rtx.def} defines these classes:\n+\n+@table @code\n+@item o\n+An RTX code that represents an actual object, such as a register\n+(@code{REG}) or a memory location (@code{MEM}, @code{SYMBOL_REF}).\n+Constants and basic transforms on objects (@code{ADDRESSOF},\n+@code{HIGH}, @code{LO_SUM}) are also included.  Note that @code{SUBREG}\n+and @code{STRICT_LOW_PART} are not in this class, but in class @code{x}.\n+\n+@item <\n+An RTX code for a comparison, such as @code{NE} or @code{LT}.\n+\n+@item 1\n+An RTX code for a unary arithmetic operation, such as @code{NEG},\n+@code{NOT}, or @code{ABS}.  This category also includes value extension\n+(sign or zero) and conversions between integer and floating point.\n+\n+@item c\n+An RTX code for a commutative binary operation, such as @code{PLUS} or\n+@code{AND}.  @code{NE} and @code{EQ} are comparisons, so they have class\n+@code{<}.\n+\n+@item 2\n+An RTX code for a non-commutative binary operation, such as @code{MINUS},\n+@code{DIV}, or @code{ASHIFTRT}.\n+\n+@item b\n+An RTX code for a bitfield operation.  Currently only\n+@code{ZERO_EXTRACT} and @code{SIGN_EXTRACT}.  These have three inputs\n+and are lvalues (so they can be used for insertion as well).  @xref{Bit\n+Fields}.\n+\n+@item 3\n+An RTX code for other three input operations.  Currently only\n+@code{IF_THEN_ELSE}.\n+\n+@item i\n+An RTX code for an entire instruction:  @code{INSN}, @code{JUMP_INSN}, and\n+@code{CALL_INSN}. @xref{Insns}.\n+\n+@item m\n+An RTX code for something that matches in insns, such as\n+@code{MATCH_DUP}.  These only occur in machine descriptions.\n+\n+@item x\n+All other RTX codes.  This category includes the remaining codes used\n+only in machine descriptions (@code{DEFINE_*}, etc.).  It also includes\n+all the codes describing side effects (@code{SET}, @code{USE},\n+@code{CLOBBER}, etc.) and the non-insns that may appear on an insn\n+chain, such as @code{NOTE}, @code{BARRIER}, and @code{CODE_LABEL}.\n+@end table\n \n @cindex RTL format\n For each expression type @file{rtl.def} specifies the number of\n contained objects and their kinds, with four possibilities: @samp{e} for\n expression (actually a pointer to an expression), @samp{i} for integer,\n @samp{w} for wide integer, @samp{s} for string, and @samp{E} for vector\n of expressions.  The sequence of letters for an expression code is\n-called its @dfn{format}.  Thus, the format of @code{subreg} is\n+called its @dfn{format}.  For example, the format of @code{subreg} is\n @samp{ei}.@refill\n \n @cindex RTL format characters\n@@ -154,8 +212,8 @@ An omitted vector is effectively the same as a vector of no elements.\n special ways by small parts of the compiler.\n @end table\n \n-There are macros to get the number of operands, the format, and the\n-class of an expression code:\n+There are macros to get the number of operands and the format\n+of an expression code:\n \n @table @code\n @findex GET_RTX_LENGTH\n@@ -165,54 +223,41 @@ Number of operands of an RTX of code @var{code}.\n @findex GET_RTX_FORMAT\n @item GET_RTX_FORMAT (@var{code})\n The format of an RTX of code @var{code}, as a C string.\n+@end table\n \n-@findex GET_RTX_CLASS\n-@cindex classes of RTX codes\n-@item GET_RTX_CLASS (@var{code})\n-A single character representing the type of RTX operation that code\n-@var{code} performs.\n-\n-The following classes are defined:\n+Some classes of RTX codes always have the same format.  For example, it\n+is safe to assume that all comparison operations have format @code{ee}.\n \n @table @code\n-@item o\n-An RTX code that represents an actual object, such as @code{reg} or\n-@code{mem}.  @code{subreg} is not in this class.\n-\n-@item <\n-An RTX code for a comparison.  The codes in this class are\n-@code{NE}, @code{EQ}, @code{LE}, @code{LT}, @code{GE}, @code{GT},\n-@code{LEU}, @code{LTU}, @code{GEU}, @code{GTU}.@refill\n-\n @item 1\n-An RTX code for a unary arithmetic operation, such as @code{neg}.\n+All codes of this class have format @code{e}.\n \n-@item c\n-An RTX code for a commutative binary operation, other than @code{NE}\n-and @code{EQ} (which have class @samp{<}).\n-\n-@item 2\n-An RTX code for a noncommutative binary operation, such as @code{MINUS}.\n+@item <\n+@itemx c\n+@itemx 2\n+All codes of these classes have format @code{ee}.\n \n @item b\n-An RTX code for a bitfield operation, either @code{ZERO_EXTRACT} or\n-@code{SIGN_EXTRACT}.\n-\n-@item 3\n-An RTX code for other three input operations, such as @code{IF_THEN_ELSE}.\n+@itemx 3\n+All codes of these classes have format @code{eee}.\n \n @item i\n-An RTX code for a machine insn (@code{INSN}, @code{JUMP_INSN}, and\n-@code{CALL_INSN}).@refill\n+All codes of this class have formats that begin with @code{iuueiee}.\n+@xref{Insns}.  Note that not all RTL objects linked onto an insn chain\n+are of class @code{i}.\n \n-@item m\n-An RTX code for something that matches in insns, such as @code{MATCH_DUP}.\n-\n-@item x\n-All other RTX codes.\n-@end table\n+@item o\n+@itemx m\n+@itemx x\n+You can make no assumptions about the format of these codes.\n @end table\n \n+@node Accessors, Flags, RTL Classes, RTL\n+@section Access to Operands\n+@cindex accessors\n+@cindex access to operands\n+@cindex operand access\n+\n @findex XEXP\n @findex XINT\n @findex XWINT"}]}