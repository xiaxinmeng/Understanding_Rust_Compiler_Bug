{"sha": "bf1e48d172ead219afc6471252f1a7c775999070", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxZTQ4ZDE3MmVhZDIxOWFmYzY0NzEyNTJmMWE3Yzc3NTk5OTA3MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-04-02T10:06:57Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-04-02T10:06:57Z"}, "message": "decl.c (gnat_to_gnu_entity): For a constant object whose type has self-referential size...\n\n\t* decl.c (gnat_to_gnu_entity) <object>: For a constant object whose\n\ttype has self-referential size, get the size from the initializing\n\texpression directly if it is also a constant whose nominal type\n\thas self-referential size.\n\nFrom-SVN: r133831", "tree": {"sha": "0324cb22ae6b92906b1821b9193e435d537bf03a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0324cb22ae6b92906b1821b9193e435d537bf03a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf1e48d172ead219afc6471252f1a7c775999070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1e48d172ead219afc6471252f1a7c775999070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1e48d172ead219afc6471252f1a7c775999070", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1e48d172ead219afc6471252f1a7c775999070/comments", "author": null, "committer": null, "parents": [{"sha": "4846b4355c6f0253228e64ade49b8bf34227d693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4846b4355c6f0253228e64ade49b8bf34227d693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4846b4355c6f0253228e64ade49b8bf34227d693"}], "stats": {"total": 62, "additions": 57, "deletions": 5}, "files": [{"sha": "f37efec39a9bc92276d806fab966967dc2f61172", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e48d172ead219afc6471252f1a7c775999070/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e48d172ead219afc6471252f1a7c775999070/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bf1e48d172ead219afc6471252f1a7c775999070", "patch": "@@ -1,3 +1,10 @@\n+2008-04-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (gnat_to_gnu_entity) <object>: For a constant object whose\n+\ttype has self-referential size, get the size from the initializing\n+\texpression directly if it is also a constant whose nominal type\n+\thas self-referential size.\n+\n 2008-04-01  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR ada/33688"}, {"sha": "ee9c1c58cdef92f46f4da648ec394d9d736ee077", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e48d172ead219afc6471252f1a7c775999070/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e48d172ead219afc6471252f1a7c775999070/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=bf1e48d172ead219afc6471252f1a7c775999070", "patch": "@@ -607,15 +607,34 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   initializing expression, in which case we can get the size from\n \t   that.  Note that the resulting size may still be a variable, so\n \t   this may end up with an indirect allocation.  */\n-\n \tif (No (Renamed_Object (gnat_entity))\n \t    && CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_type)))\n \t  {\n \t    if (gnu_expr && kind == E_Constant)\n-\t      gnu_size\n-\t\t= SUBSTITUTE_PLACEHOLDER_IN_EXPR\n-\t\t  (TYPE_SIZE (TREE_TYPE (gnu_expr)), gnu_expr);\n-\n+\t      {\n+\t\ttree size = TYPE_SIZE (TREE_TYPE (gnu_expr));\n+\t\tif (CONTAINS_PLACEHOLDER_P (size))\n+\t\t  {\n+\t\t    /* If the initializing expression is itself a constant,\n+\t\t       despite having a nominal type with self-referential\n+\t\t       size, we can get the size directly from it.  */\n+\t\t    if (TREE_CODE (gnu_expr) == COMPONENT_REF\n+\t\t\t&& TREE_CODE (TREE_TYPE (TREE_OPERAND (gnu_expr, 0)))\n+\t\t\t   == RECORD_TYPE\n+\t\t\t&& TYPE_IS_PADDING_P\n+\t\t\t   (TREE_TYPE (TREE_OPERAND (gnu_expr, 0)))\n+\t\t\t&& TREE_CODE (TREE_OPERAND (gnu_expr, 0)) == VAR_DECL\n+\t\t\t&& (TREE_READONLY (TREE_OPERAND (gnu_expr, 0))\n+\t\t\t    || DECL_READONLY_ONCE_ELAB\n+\t\t\t       (TREE_OPERAND (gnu_expr, 0))))\n+\t\t      gnu_size = DECL_SIZE (TREE_OPERAND (gnu_expr, 0));\n+\t\t    else\n+\t\t      gnu_size\n+\t\t\t= SUBSTITUTE_PLACEHOLDER_IN_EXPR (size, gnu_expr);\n+\t\t  }\n+\t\telse\n+\t\t  gnu_size = size;\n+\t      }\n \t    /* We may have no GNU_EXPR because No_Initialization is\n \t       set even though there's an Expression.  */\n \t    else if (kind == E_Constant"}, {"sha": "873e2b76705b1bea915c522b45199ad11cf6b834", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e48d172ead219afc6471252f1a7c775999070/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e48d172ead219afc6471252f1a7c775999070/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf1e48d172ead219afc6471252f1a7c775999070", "patch": "@@ -1,3 +1,7 @@\n+2008-04-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/discr_record_constant.ads: New test.\n+\n 2008-04-02  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/vrp38.c: New testcase."}, {"sha": "f43b1386909b5fe16f703f0695036bba421267a6", "filename": "gcc/testsuite/gnat.dg/specs/discr_record_constant.ads", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1e48d172ead219afc6471252f1a7c775999070/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr_record_constant.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1e48d172ead219afc6471252f1a7c775999070/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr_record_constant.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr_record_constant.ads?ref=bf1e48d172ead219afc6471252f1a7c775999070", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do compile }\n+\n+pragma Restrictions (No_Implicit_Heap_Allocations);\n+\n+package Discr_Record_Constant is\n+\n+   type T (Big : Boolean := False) is record\n+      case Big is\n+         when True =>\n+            Content : Integer;\n+         when False =>\n+            null;\n+       end case;\n+    end record;\n+\n+    D : constant T := (True, 0);\n+\n+    Var :          T := D;    --  OK, maximum size\n+    Con : constant T := D;    --  Violation of restriction\n+    Ter : constant T := Con;  --  Violation of restriction\n+\n+end Discr_Record_Constant;"}]}