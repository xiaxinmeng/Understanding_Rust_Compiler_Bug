{"sha": "521d2711409b1af89d2d802879c2bbd716200cb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIxZDI3MTE0MDliMWFmODlkMmQ4MDI4NzljMmJiZDcxNjIwMGNiNg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-23T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-23T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "7bf3806bf9111e9ddc7721410bc889ae04ca4612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bf3806bf9111e9ddc7721410bc889ae04ca4612"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/521d2711409b1af89d2d802879c2bbd716200cb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/521d2711409b1af89d2d802879c2bbd716200cb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/521d2711409b1af89d2d802879c2bbd716200cb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/521d2711409b1af89d2d802879c2bbd716200cb6/comments", "author": null, "committer": null, "parents": [{"sha": "5d2d79c8d9de06dee6c7fe5782c4d4ac66463773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2d79c8d9de06dee6c7fe5782c4d4ac66463773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d2d79c8d9de06dee6c7fe5782c4d4ac66463773"}], "stats": {"total": 360, "additions": 359, "deletions": 1}, "files": [{"sha": "c8ceb4b6b7710359357325543d03418dcdb41943", "filename": "gcc/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521d2711409b1af89d2d802879c2bbd716200cb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521d2711409b1af89d2d802879c2bbd716200cb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=521d2711409b1af89d2d802879c2bbd716200cb6", "patch": "@@ -1,3 +1,81 @@\n+2020-09-22  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.c (analyze_stmt): Ignore gimple clobber.\n+\n+2020-09-22  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref-tree.c: Add namespace selftest.\n+\t(modref_tree_c_tests): Rename to ...\n+\t(ipa_modref_tree_c_tests): ... this.\n+\t* ipa-modref.c (pass_modref): Remove destructor.\n+\t(ipa_modref_c_finalize): New function.\n+\t* ipa-modref.h (ipa_modref_c_finalize): Declare.\n+\t* selftest-run-tests.c (selftest::run_tests): Call\n+\tipa_modref_c_finalize.\n+\t* selftest.h (ipa_modref_tree_c_tests): Declare.\n+\t* toplev.c: Include ipa-modref-tree.h and ipa-modref.h\n+\t(toplev::finalize): Call ipa_modref_c_finalize.\n+\n+2020-09-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/analyzer.texi (Other Debugging Techniques): Mention\n+\t-fdump-analyzer-json.\n+\t* doc/invoke.texi (Static Analyzer Options): Add\n+\t-fdump-analyzer-json.\n+\n+2020-09-22  David Faust  <david.faust@oracle.com>\n+\n+\t* config/bpf/bpf.md: Add defines for signed div and mod operators.\n+\n+2020-09-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/96979\n+\t* doc/invoke.texi: Document new param max-switch-clustering-attempts.\n+\t* params.opt: Add new parameter.\n+\t* tree-switch-conversion.c (jump_table_cluster::find_jump_tables):\n+\tLimit number of attempts.\n+\t(bit_test_cluster::find_bit_tests): Likewise.\n+\n+2020-09-22  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* config/s390/s390.md (\"*cmp<mode>_ccs_0\", \"*cmp<mode>_ccz_0\",\n+\t\"*cmp<mode>_ccs_0_fastmath\"): Basically change \"*cmp<mode>_ccs_0\" into\n+\t\"*cmp<mode>_ccz_0\" and for fast math add \"*cmp<mode>_ccs_0_fastmath\".\n+\n+2020-09-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* config/aarch64/arm_neon.h (vcls_u8, vcls_u16, vcls_u32,\n+\tvclsq_u8, vclsq_u16, vclsq_u32): Define.\n+\n+2020-09-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* config/aarch64/arm_neon.h (vceqq_p64, vceqz_p64, vceqzq_p64): Define.\n+\n+2020-09-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* config/aarch64/arm_neon.h (vadd_p8, vadd_p16, vadd_p64, vaddq_p8,\n+\tvaddq_p16, vaddq_p64, vaddq_p128): Define.\n+\n+2020-09-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* params.opt (--param=modref-max-tests=): Fix typo in help text:\n+\tperofmed -> performed.\n+\t* common.opt: Fix typo: incrmeental -> incremental.\n+\t* ipa-modref.c: Fix typos: recroding -> recording, becaue -> because,\n+\tanalsis -> analysis.\n+\t(class modref_summaries): Fix typo: betweehn -> between.\n+\t(analyze_call): Fix typo: calle -> callee.\n+\t(read_modref_records): Fix typo: expcted -> expected.\n+\t(pass_ipa_modref::execute): Fix typo: calle -> callee.\n+\n+2020-09-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* common.opt (-fipa-modref): Add dot at the end of option help.\n+\t* params.opt (--param=modref-max-tests=): Likewise.\n+\n 2020-09-21  Marek Polacek  <polacek@redhat.com>\n \n \t* doc/invoke.texi: Document -Wctad-maybe-unsupported."}, {"sha": "1a983d8f051175c1d502db874cf50f5b355d50c1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521d2711409b1af89d2d802879c2bbd716200cb6/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521d2711409b1af89d2d802879c2bbd716200cb6/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=521d2711409b1af89d2d802879c2bbd716200cb6", "patch": "@@ -1 +1 @@\n-20200922\n+20200923"}, {"sha": "cd869c232f6389dded1da12bd4236342a7b264ec", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521d2711409b1af89d2d802879c2bbd716200cb6/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521d2711409b1af89d2d802879c2bbd716200cb6/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=521d2711409b1af89d2d802879c2bbd716200cb6", "patch": "@@ -1,3 +1,86 @@\n+2020-09-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analysis-plan.cc: Include \"json.h\".\n+\t* analyzer.opt (fdump-analyzer-json): New.\n+\t* call-string.cc: Include \"json.h\".\n+\t(call_string::to_json): New.\n+\t* call-string.h (call_string::to_json): New decl.\n+\t* checker-path.cc: Include \"json.h\".\n+\t* constraint-manager.cc: Include \"json.h\".\n+\t(equiv_class::to_json): New.\n+\t(constraint::to_json): New.\n+\t(constraint_manager::to_json): New.\n+\t* constraint-manager.h (equiv_class::to_json): New decl.\n+\t(constraint::to_json): New decl.\n+\t(constraint_manager::to_json): New decl.\n+\t* diagnostic-manager.cc: Include \"json.h\".\n+\t(saved_diagnostic::to_json): New.\n+\t(diagnostic_manager::to_json): New.\n+\t* diagnostic-manager.h (saved_diagnostic::to_json): New decl.\n+\t(diagnostic_manager::to_json): New decl.\n+\t* engine.cc: Include \"json.h\", <zlib.h>.\n+\t(exploded_node::status_to_str): New.\n+\t(exploded_node::to_json): New.\n+\t(exploded_edge::to_json): New.\n+\t(exploded_graph::to_json): New.\n+\t(dump_analyzer_json): New.\n+\t(impl_run_checkers): Call it.\n+\t* exploded-graph.h (exploded_node::status_to_str): New decl.\n+\t(exploded_node::to_json): New.\n+\t(exploded_edge::to_json): New.\n+\t(exploded_graph::to_json): New.\n+\t* pending-diagnostic.cc: Include \"json.h\".\n+\t* program-point.cc: Include \"json.h\".\n+\t(program_point::to_json): New.\n+\t* program-point.h (program_point::to_json): New decl.\n+\t* program-state.cc: Include \"json.h\".\n+\t(extrinsic_state::to_json): New.\n+\t(sm_state_map::to_json): New.\n+\t(program_state::to_json): New.\n+\t* program-state.h (extrinsic_state::to_json): New decl.\n+\t(sm_state_map::to_json): New decl.\n+\t(program_state::to_json): New decl.\n+\t* region-model-impl-calls.cc: Include \"json.h\".\n+\t* region-model-manager.cc: Include \"json.h\".\n+\t* region-model-reachability.cc: Include \"json.h\".\n+\t* region-model.cc: Include \"json.h\".\n+\t* region-model.h (svalue::to_json): New decl.\n+\t(region::to_json): New decl.\n+\t* region.cc: Include \"json.h\".\n+\t(region::to_json: New.\n+\t* sm-file.cc: Include \"json.h\".\n+\t* sm-malloc.cc: Include \"json.h\".\n+\t* sm-pattern-test.cc: Include \"json.h\".\n+\t* sm-sensitive.cc: Include \"json.h\".\n+\t* sm-signal.cc: Include \"json.h\".\n+\t(signal_delivery_edge_info_t::to_json): New.\n+\t* sm-taint.cc: Include \"json.h\".\n+\t* sm.cc: Include \"diagnostic.h\", \"tree-diagnostic.h\", and\n+\t\"json.h\".\n+\t(state_machine::state::to_json): New.\n+\t(state_machine::to_json): New.\n+\t* sm.h (state_machine::state::to_json): New.\n+\t(state_machine::to_json): New.\n+\t* state-purge.cc: Include \"json.h\".\n+\t* store.cc: Include \"json.h\".\n+\t(binding_key::get_desc): New.\n+\t(binding_map::to_json): New.\n+\t(binding_cluster::to_json): New.\n+\t(store::to_json): New.\n+\t* store.h (binding_key::get_desc): New decl.\n+\t(binding_map::to_json): New decl.\n+\t(binding_cluster::to_json): New decl.\n+\t(store::to_json): New decl.\n+\t* supergraph.cc: Include \"json.h\".\n+\t(supergraph::to_json): New.\n+\t(supernode::to_json): New.\n+\t(superedge::to_json): New.\n+\t* supergraph.h (supergraph::to_json): New decl.\n+\t(supernode::to_json): New decl.\n+\t(superedge::to_json): New decl.\n+\t* svalue.cc: Include \"json.h\".\n+\t(svalue::to_json): New.\n+\n 2020-09-21  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/97130"}, {"sha": "8ee29d8124f7441f9cf777c81d00560a678c0d06", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521d2711409b1af89d2d802879c2bbd716200cb6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521d2711409b1af89d2d802879c2bbd716200cb6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=521d2711409b1af89d2d802879c2bbd716200cb6", "patch": "@@ -1,3 +1,8 @@\n+2020-09-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c.opt (Wbuiltin-declaration-mismatch): Fix typo in variable name:\n+\twarn_builtin_declaraion_mismatch -> warn_builtin_declaration_mismatch.\n+\n 2020-09-21  Marek Polacek  <polacek@redhat.com>\n \n \t* c.opt (Wctad-maybe-unsupported): New option."}, {"sha": "dc1b0b00ea3a50d79d3256158d74fe49fa0ae5d8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521d2711409b1af89d2d802879c2bbd716200cb6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521d2711409b1af89d2d802879c2bbd716200cb6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=521d2711409b1af89d2d802879c2bbd716200cb6", "patch": "@@ -1,3 +1,29 @@\n+2020-09-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95310\n+\t* pt.c (corresponding_template_parameter): Define.\n+\t(keep_template_parm): Use it to adjust the given template\n+\tparameter to the corresponding in-scope one from ctx_parms.\n+\n+2020-09-22  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (xref_tag_from_type): Don't declare.\n+\t* decl.c (xref_tag_from_type): Delete.\n+\t* pt.c (lookup_template_class_1): Erroneously located class\n+\tdefinitions just give error_mark, don't try and inject it into the\n+\tnamespace.\n+\n+2020-09-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97145\n+\t* constexpr.c (cxx_eval_builtin_function_call): Return void_node for\n+\tcalls to __sanitize_ptr_{sub,cmp} builtins.\n+\n+2020-09-22  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* pt.c (instantiate_class_template_1): Do not repush and unhide\n+\tinjected friend.\n+\n 2020-09-21  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/90583"}, {"sha": "68cdc3153a1886acc431e974a82b2867ebe50c46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521d2711409b1af89d2d802879c2bbd716200cb6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521d2711409b1af89d2d802879c2bbd716200cb6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=521d2711409b1af89d2d802879c2bbd716200cb6", "patch": "@@ -1,3 +1,72 @@\n+2020-09-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95310\n+\t* g++.dg/concepts/diagnostic15.C: New test.\n+\n+2020-09-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96652\n+\t* g++.dg/cpp0x/decltype-96652.C: New test.\n+\n+2020-09-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97145\n+\t* g++.dg/asan/pr97145.C: New test.\n+\n+2020-09-22  David Faust  <david.faust@oracle.com>\n+\n+\t* gcc.target/bpf/diag-sdiv.c: New test.\n+\t* gcc.target/bpf/diag-smod.c: New test.\n+\t* gcc.target/bpf/xbpf-sdiv-1.c: New test.\n+\t* gcc.target/bpf/xbpf-smod-1.c: New test.\n+\n+2020-09-22  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.old-deja/g++.pt/friend34.C: Check injected friend is still\n+\tinvisible.\n+\n+2020-09-22  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/ext/timevar1.C: Also prune N%.\n+\n+2020-09-22  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/ext/timevar2.C: Also prune N%.\n+\n+2020-09-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/96979\n+\t* g++.dg/tree-ssa/pr96979.C: New test.\n+\n+2020-09-22  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* gcc.target/s390/load-and-test-fp-1.c: Change test to include all\n+\tpossible combinations of dead/live registers and comparisons (equality,\n+\trelational).\n+\t* gcc.target/s390/load-and-test-fp-2.c: Same as load-and-test-fp-1.c\n+\tbut for fast math.\n+\t* gcc.target/s390/load-and-test-fp.h: New test included by\n+\tload-and-test-fp-{1,2}.c.\n+\n+2020-09-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* gcc.target/aarch64/simd/vcls_unsigned_1.c: New test.\n+\n+2020-09-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* gcc.target/aarch64/simd/vceq_poly_1.c: New test.\n+\n+2020-09-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/71233\n+\t* gcc.target/aarch64/simd/vadd_poly_1.c: New test.\n+\n+2020-09-22  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.target/i386/m128-check.h: Add no-strict-aliasing\n+\n 2020-09-21  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/97130"}, {"sha": "842d8149610ce65771f08da25fdf749c931d5b03", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521d2711409b1af89d2d802879c2bbd716200cb6/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521d2711409b1af89d2d802879c2bbd716200cb6/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=521d2711409b1af89d2d802879c2bbd716200cb6", "patch": "@@ -1,3 +1,9 @@\n+2020-09-22  Sergei Trofimovich  <siarheit@google.com>\n+\n+\tPR gcov-profile/96913\n+\t* libgcov-driver.c (write_one_data): Avoid function pointer\n+\tcomparison in TOP streaming decision.\n+\n 2020-09-17  Torbj\u00f6rn SVENSSON  <torbjorn.svensson@st.com>\n \t    Christophe Lyon  <christophe.lyon@linaro.org>\n "}, {"sha": "bce0bef7ca9ac4ab6d4b7b720c23ed5ebf687fc9", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521d2711409b1af89d2d802879c2bbd716200cb6/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521d2711409b1af89d2d802879c2bbd716200cb6/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=521d2711409b1af89d2d802879c2bbd716200cb6", "patch": "@@ -1,3 +1,13 @@\n+2020-09-22  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/95654\n+\t* testsuite/libgomp.fortran/pr66199-5.f90: Make stop codes unique.\n+\n+2020-09-22  Tom de Vries  <tdevries@suse.de>\n+\n+\t* plugin/plugin-nvptx.c (link_ptx): Print elog if cuLinkComplete call\n+\tfails.\n+\n 2020-09-16  Nathan Sidwell  <nathan@acm.org>\n \n \t* testsuite/libgomp.c++/udr-3.C: Add missing ctor."}, {"sha": "4ef7f3feec45fd4bb938febdb5854d144429bb6f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521d2711409b1af89d2d802879c2bbd716200cb6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521d2711409b1af89d2d802879c2bbd716200cb6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=521d2711409b1af89d2d802879c2bbd716200cb6", "patch": "@@ -1,3 +1,84 @@\n+2020-09-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97167\n+\t* src/c++17/fs_path.cc (path::_Parser::root_path()): Check\n+\tfor empty string before inspecting the first character.\n+\t* testsuite/27_io/filesystem/path/append/source.cc: Append\n+\tempty string_view to path.\n+\n+2020-09-22  Glen Joseph Fernandes  <glenjofe@gmail.com>\n+\n+\t* include/bits/align.h (align): Fix overflow handling.\n+\t* testsuite/20_util/align/3.cc: New test.\n+\n+2020-09-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Add new headers and adjust for renamed\n+\theader.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/iterator_concepts.h: Adjust for renamed header.\n+\t* include/bits/range_access.h (ranges::*): Move to new\n+\t<bits/ranges_base.h> header.\n+\t* include/bits/ranges_algobase.h: Include new <bits/ranges_base.h>\n+\theader instead of <ranges>.\n+\t* include/bits/ranges_algo.h: Include new <bits/ranges_util.h>\n+\theader.\n+\t* include/bits/range_cmp.h: Moved to...\n+\t* include/bits/ranges_cmp.h: ...here.\n+\t* include/bits/ranges_base.h: New header.\n+\t* include/bits/ranges_util.h: New header.\n+\t* include/experimental/string_view: Include new\n+\t<bits/ranges_base.h> header.\n+\t* include/std/functional: Adjust for renamed header.\n+\t* include/std/ranges (ranges::view_base, ranges::enable_view)\n+\t(ranges::dangling, ranges::borrowed_iterator_t): Move to new\n+\t<bits/ranges_base.h> header.\n+\t(ranges::view_interface, ranges::subrange)\n+\t(ranges::borrowed_subrange_t): Move to new <bits/ranges_util.h>\n+\theader.\n+\t* include/std/span: Include new <bits/ranges_base.h> header.\n+\t* include/std/string_view: Likewise.\n+\t* testsuite/24_iterators/back_insert_iterator/pr93884.cc: Add\n+\tmissing <ranges> header.\n+\t* testsuite/24_iterators/front_insert_iterator/pr93884.cc:\n+\tLikewise.\n+\n+2020-09-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96803\n+\t* include/std/tuple\n+\t(_Tuple_impl(allocator_arg_t, Alloc, const _Tuple_impl<U...>&)):\n+\tUse correct value category in __use_alloc call.\n+\t* testsuite/20_util/tuple/cons/96803.cc: Check with constructors\n+\tthat require correct value category to be used.\n+\n+2020-09-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/span (span::front): Remove static_assert.\n+\t(span::back): Likewise.\n+\t(span::operator[]): Likewise.\n+\t* testsuite/23_containers/span/back_neg.cc: Rewrite to verify\n+\tthat we check the preconditions of back() only when it's called.\n+\t* testsuite/23_containers/span/front_neg.cc: Likewise for\n+\tfront().\n+\t* testsuite/23_containers/span/index_op_neg.cc: Likewise for\n+\toperator[].\n+\n+2020-09-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/stl_algo.h (__sample): Exit early when the\n+\tinput range is empty.\n+\t* testsuite/25_algorithms/sample/3.cc: New test.\n+\n+2020-09-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/stl_algo.h (for_each_n): Mark constexpr for C++20.\n+\t(search): Likewise for the overload that takes a searcher.\n+\t* testsuite/25_algorithms/for_each/constexpr.cc: Test constexpr\n+\tstd::for_each_n.\n+\t* testsuite/25_algorithms/search/constexpr.cc: Test constexpr\n+\tstd::search overload that takes a searcher.\n+\n 2020-09-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/c++config (__replacement_assert): Add noreturn"}]}