{"sha": "a11c004bd747e274becda2edaa8d1ea5bb8f18b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTExYzAwNGJkNzQ3ZTI3NGJlY2RhMmVkYWE4ZDFlYTViYjhmMThiOA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-08-23T13:07:16Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-08-23T13:07:16Z"}, "message": "sh.c (sh_builtin_saveregs): If the number of to-be-saved fp registers is even...\n\n        * sh.c (sh_builtin_saveregs): If the number of to-be-saved fp\n        registers is even, and we have a hardware double precision fp,\n        align the buffer.\n        (sh_gimplify_va_arg_expr): For floating point arguments, consider\n        size of current argument when checking if argument was passed in\n        registers.\n\n        * sh.c (sh_attr_renesas_p): Handle error_mark_node.\n\nFrom-SVN: r103398", "tree": {"sha": "f281b1b984d8047564b6344db9e21524ce532824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f281b1b984d8047564b6344db9e21524ce532824"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a11c004bd747e274becda2edaa8d1ea5bb8f18b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11c004bd747e274becda2edaa8d1ea5bb8f18b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11c004bd747e274becda2edaa8d1ea5bb8f18b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11c004bd747e274becda2edaa8d1ea5bb8f18b8/comments", "author": null, "committer": null, "parents": [{"sha": "aec5ba601b0ebaaca5362d32cebc9612aa6d2005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec5ba601b0ebaaca5362d32cebc9612aa6d2005", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec5ba601b0ebaaca5362d32cebc9612aa6d2005"}], "stats": {"total": 74, "additions": 55, "deletions": 19}, "files": [{"sha": "f7c5367408121dedb344e0b7ae4681ad3d1dc87e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11c004bd747e274becda2edaa8d1ea5bb8f18b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11c004bd747e274becda2edaa8d1ea5bb8f18b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a11c004bd747e274becda2edaa8d1ea5bb8f18b8", "patch": "@@ -1,5 +1,14 @@\n 2005-08-23  J\"orn Rennecke <joern.rennecke@st.com>\n \n+\t* sh.c (sh_builtin_saveregs): If the number of to-be-saved fp\n+\tregisters is even, and we have a hardware double precision fp,\n+\talign the buffer.\n+\t(sh_gimplify_va_arg_expr): For floating point arguments, consider\n+\tsize of current argument when checking if argument was passed in\n+\tregisters.\n+\n+\t* sh.c (sh_attr_renesas_p): Handle error_mark_node.\n+\n \tPR middle-end/23467\n \t* stor-layout.c (finalize_type_size): Dont override\n \texisting alignment with a smaller alignment from the mode."}, {"sha": "1fbdcee13acea93881f0a6ff5d23443c509178f6", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 46, "deletions": 19, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11c004bd747e274becda2edaa8d1ea5bb8f18b8/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11c004bd747e274becda2edaa8d1ea5bb8f18b8/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a11c004bd747e274becda2edaa8d1ea5bb8f18b8", "patch": "@@ -6441,8 +6441,18 @@ sh_builtin_saveregs (void)\n       emit_insn (gen_iorsi3 (addr, addr, GEN_INT (UNITS_PER_WORD)));\n       regbuf = change_address (regbuf, BLKmode, addr);\n     }\n+  else if (STACK_BOUNDARY < 64 && TARGET_FPU_DOUBLE && n_floatregs)\n+    {\n+      rtx addr, mask;\n+\n+      regbuf = assign_stack_local (BLKmode, bufsize + UNITS_PER_WORD, 0);\n+      addr = copy_to_mode_reg (Pmode, plus_constant (XEXP (regbuf, 0), 4));\n+      mask = copy_to_mode_reg (Pmode, GEN_INT (-8));\n+      emit_insn (gen_andsi3 (addr, addr, mask));\n+      regbuf = change_address (regbuf, BLKmode, addr);\n+    }\n   else\n-    regbuf = assign_stack_local (BLKmode, bufsize, 0);\n+    regbuf = assign_stack_local (BLKmode, bufsize, TARGET_FPU_DOUBLE ? 64 : 0);\n   alias_set = get_varargs_alias_set ();\n   set_mem_alias_set (regbuf, alias_set);\n \n@@ -6740,41 +6750,50 @@ sh_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n \n       if (pass_as_float)\n \t{\n-\t  int first_floatreg\n-\t    = current_function_args_info.arg_count[(int) SH_ARG_FLOAT];\n-\t  int n_floatregs = MAX (0, NPARM_REGS (SFmode) - first_floatreg);\n+\t  tree next_fp_tmp = create_tmp_var (TREE_TYPE (f_next_fp), NULL);\n+\t  tree cmp;\n+\t  bool is_double = size == 8 && TREE_CODE (type) == REAL_TYPE;\n \n-\t  tmp = build (GE_EXPR, boolean_type_node, next_fp, next_fp_limit);\n-\t  tmp = build (COND_EXPR, void_type_node, tmp,\n+\t  tmp = build1 (ADDR_EXPR, pptr_type_node, next_fp);\n+\t  tmp = build2 (MODIFY_EXPR, void_type_node, addr, tmp);\n+\t  gimplify_and_add (tmp, pre_p);\n+\n+\t  tmp = build2 (MODIFY_EXPR, ptr_type_node, next_fp_tmp, valist);\n+\t  gimplify_and_add (tmp, pre_p);\n+\t  tmp = next_fp_limit;\n+\t  if (size > 4 && !is_double)\n+\t    tmp = build2 (PLUS_EXPR, TREE_TYPE (tmp), tmp,\n+\t\t\t  fold_convert (TREE_TYPE (tmp), size_int (4 - size)));\n+\t  tmp = build (GE_EXPR, boolean_type_node, next_fp_tmp, tmp);\n+\t  cmp = build (COND_EXPR, void_type_node, tmp,\n \t\t       build (GOTO_EXPR, void_type_node, lab_false),\n \t\t       NULL);\n-\t  gimplify_and_add (tmp, pre_p);\n+\t  if (!is_double)\n+\t    gimplify_and_add (cmp, pre_p);\n \n-\t  if (TYPE_ALIGN (type) > BITS_PER_WORD\n-\t      || (((TREE_CODE (type) == REAL_TYPE && size == 8) || size == 16)\n-\t\t  && (n_floatregs & 1)))\n+\t  if (TYPE_ALIGN (type) > BITS_PER_WORD || (is_double || size == 16))\n \t    {\n \t      tmp = fold_convert (ptr_type_node, size_int (UNITS_PER_WORD));\n-\t      tmp = build (BIT_AND_EXPR, ptr_type_node, next_fp, tmp);\n-\t      tmp = build (PLUS_EXPR, ptr_type_node, next_fp, tmp);\n-\t      tmp = build (MODIFY_EXPR, ptr_type_node, next_fp, tmp);\n+\t      tmp = build (BIT_AND_EXPR, ptr_type_node, next_fp_tmp, tmp);\n+\t      tmp = build (PLUS_EXPR, ptr_type_node, next_fp_tmp, tmp);\n+\t      tmp = build (MODIFY_EXPR, ptr_type_node, next_fp_tmp, tmp);\n \t      gimplify_and_add (tmp, pre_p);\n \t    }\n-\n-\t  tmp = build1 (ADDR_EXPR, pptr_type_node, next_fp);\n-\t  tmp = build (MODIFY_EXPR, void_type_node, addr, tmp);\n-\t  gimplify_and_add (tmp, pre_p);\n+\t  if (is_double)\n+\t    gimplify_and_add (cmp, pre_p);\n \n #ifdef FUNCTION_ARG_SCmode_WART\n \t  if (TYPE_MODE (type) == SCmode && TARGET_SH4 && TARGET_LITTLE_ENDIAN)\n \t    {\n \t      tree subtype = TREE_TYPE (type);\n \t      tree real, imag;\n \n-\t      imag = std_gimplify_va_arg_expr (valist, subtype, pre_p, NULL);\n+\t      imag\n+\t\t= std_gimplify_va_arg_expr (next_fp_tmp, subtype, pre_p, NULL);\n \t      imag = get_initialized_tmp_var (imag, pre_p, NULL);\n \n-\t      real = std_gimplify_va_arg_expr (valist, subtype, pre_p, NULL);\n+\t      real\n+\t\t= std_gimplify_va_arg_expr (next_fp_tmp, subtype, pre_p, NULL);\n \t      real = get_initialized_tmp_var (real, pre_p, NULL);\n \n \t      result = build (COMPLEX_EXPR, type, real, imag);\n@@ -6791,6 +6810,12 @@ sh_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p,\n \t  tmp = build1 (ADDR_EXPR, pptr_type_node, next_stack);\n \t  tmp = build (MODIFY_EXPR, void_type_node, addr, tmp);\n \t  gimplify_and_add (tmp, pre_p);\n+\t  tmp = build2 (MODIFY_EXPR, ptr_type_node, next_fp_tmp, valist);\n+\t  gimplify_and_add (tmp, pre_p);\n+\n+\t  tmp = build2 (MODIFY_EXPR, ptr_type_node, valist, next_fp_tmp);\n+\t  gimplify_and_add (tmp, post_p);\n+\t  valist = next_fp_tmp;\n \t}\n       else\n \t{\n@@ -7541,6 +7566,8 @@ sh_attr_renesas_p (tree td)\n     return 0;\n   if (DECL_P (td))\n     td = TREE_TYPE (td);\n+  if (td == error_mark_node)\n+    return 0;\n   return (lookup_attribute (\"renesas\", TYPE_ATTRIBUTES (td))\n \t  != NULL_TREE);\n }"}]}