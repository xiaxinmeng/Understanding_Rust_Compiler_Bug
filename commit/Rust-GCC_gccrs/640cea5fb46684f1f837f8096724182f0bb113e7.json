{"sha": "640cea5fb46684f1f837f8096724182f0bb113e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwY2VhNWZiNDY2ODRmMWY4MzdmODA5NjcyNDE4MmYwYmIxMTNlNw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@redhat.com", "date": "2001-04-12T20:46:19Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2001-04-12T20:46:19Z"}, "message": "Fix for PR 2498, getf/stf require normalization after a cast.\n\n\t* config/ia64/ia64.md (extendsfdf2, extendsftf2, extenddftf2): Simplify\n\tto just emit an fnorm.\n\nFrom-SVN: r41311", "tree": {"sha": "bd0c776be0e052960864b39d0c9b0d1738de152f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd0c776be0e052960864b39d0c9b0d1738de152f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/640cea5fb46684f1f837f8096724182f0bb113e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640cea5fb46684f1f837f8096724182f0bb113e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/640cea5fb46684f1f837f8096724182f0bb113e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640cea5fb46684f1f837f8096724182f0bb113e7/comments", "author": null, "committer": null, "parents": [{"sha": "20e50c627742a85f445c2f6ad3534175f67ef046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20e50c627742a85f445c2f6ad3534175f67ef046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20e50c627742a85f445c2f6ad3534175f67ef046"}], "stats": {"total": 95, "additions": 30, "deletions": 65}, "files": [{"sha": "30c42db8e1a8a637de3380027ec9a73f2c4d5dbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640cea5fb46684f1f837f8096724182f0bb113e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640cea5fb46684f1f837f8096724182f0bb113e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=640cea5fb46684f1f837f8096724182f0bb113e7", "patch": "@@ -1,3 +1,8 @@\n+2001-04-12  Jim Wilson  <wilson@redhat.com>\n+\n+\t* config/ia64/ia64.md (extendsfdf2, extendsftf2, extenddftf2): Simplify\n+\tto just emit an fnorm.\n+\n 2001-04-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-common.h (truthvalue_conversion, type_for_mode,"}, {"sha": "6a6f91f29696e932b3c0526bbeaf60765a4602bb", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 25, "deletions": 65, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640cea5fb46684f1f837f8096724182f0bb113e7/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640cea5fb46684f1f837f8096724182f0bb113e7/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=640cea5fb46684f1f837f8096724182f0bb113e7", "patch": "@@ -821,80 +821,40 @@\n \n ;; Convert between floating point types of different sizes.\n \n+;; At first glance, it would appear that emitting fnorm for an extending\n+;; conversion is unnecessary.  However, the stf and getf instructions work\n+;; correctly only if the input is properly rounded for its type.  In\n+;; particular, we get the wrong result for getf.d/stfd if the input is a\n+;; denorm single.  Since we don't know what the next instruction will be, we\n+;; have to emit an fnorm.\n+\n ;; ??? Optimization opportunity here.  Get rid of the insn altogether\n ;; when we can.  Should probably use a scheme like has been proposed\n ;; for ia32 in dealing with operands that match unary operators.  This\n-;; would let combine merge the thing into adjacent insns.\n+;; would let combine merge the thing into adjacent insns.  See also how the\n+;; mips port handles SIGN_EXTEND as operands to integer arithmetic insns via\n+;; se_register_operand.\n \n-(define_insn_and_split \"extendsfdf2\"\n-  [(set (match_operand:DF 0 \"grfr_nonimmediate_operand\" \"=f,f,f,f,m,*r\")\n-\t(float_extend:DF\n-\t  (match_operand:SF 1 \"grfr_nonimmediate_operand\" \"0,f,m,*r,f,f\")))]\n+(define_insn \"extendsfdf2\"\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(float_extend:DF (match_operand:SF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n-  \"@\n-   mov %0 = %1\n-   mov %0 = %1\n-   ldfs %0 = %1%P1\n-   setf.s %0 = %1\n-   stfd %0 = %1%P0\n-   getf.d %0 = %1\"\n-  \"reload_completed\"\n-  [(set (match_dup 0) (float_extend:DF (match_dup 1)))]\n-  \"\n-{\n-  if (true_regnum (operands[0]) == true_regnum (operands[1]))\n-    {\n-      emit_insn (gen_movdi (pic_offset_table_rtx, pic_offset_table_rtx));\n-      DONE;\n-    }\n-}\"\n-  [(set_attr \"itanium_class\" \"unknown,fmisc,fld,tofr,stf,frfr\")])\n+  \"fnorm.d %0 = %1\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n \n-(define_insn_and_split \"extendsftf2\"\n-  [(set (match_operand:TF 0 \"fr_nonimmediate_operand\" \"=f,f,f,f,Q\")\n-\t(float_extend:TF\n-\t  (match_operand:SF 1 \"grfr_nonimmediate_operand\" \"0,f,Q,*r,f\")))]\n+(define_insn \"extendsftf2\"\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n+\t(float_extend:TF (match_operand:SF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n-  \"@\n-   mov %0 = %1\n-   mov %0 = %1\n-   ldfs %0 = %1%P1\n-   setf.s %0 = %1\n-   stfe %0 = %1%P0\"\n-  \"reload_completed\"\n-  [(set (match_dup 0) (float_extend:TF (match_dup 1)))]\n-  \"\n-{\n-  if (true_regnum (operands[0]) == true_regnum (operands[1]))\n-    {\n-      emit_insn (gen_movdi (pic_offset_table_rtx, pic_offset_table_rtx));\n-      DONE;\n-    }\n-}\"\n-  [(set_attr \"itanium_class\" \"unknown,fmisc,fld,frfr,stf\")])\n+  \"fnorm %0 = %1\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n \n-(define_insn_and_split \"extenddftf2\"\n-  [(set (match_operand:TF 0 \"fr_nonimmediate_operand\" \"=f,f,f,f,Q\")\n-\t(float_extend:TF\n-\t  (match_operand:DF 1 \"grfr_nonimmediate_operand\" \"0,f,Q,*r,f\")))]\n+(define_insn \"extenddftf2\"\n+  [(set (match_operand:TF 0 \"fr_register_operand\" \"=f\")\n+\t(float_extend:TF (match_operand:DF 1 \"fr_register_operand\" \"f\")))]\n   \"\"\n-  \"@\n-   mov %0 = %1\n-   mov %0 = %1\n-   ldfd %0 = %1%P1\n-   setf.d %0 = %1\n-   stfe %0 = %1%P0\"\n-  \"reload_completed\"\n-  [(set (match_dup 0) (float_extend:TF (match_dup 1)))]\n-  \"\n-{\n-  if (true_regnum (operands[0]) == true_regnum (operands[1]))\n-    {\n-      emit_insn (gen_movdi (pic_offset_table_rtx, pic_offset_table_rtx));\n-      DONE;\n-    }\n-}\"\n-  [(set_attr \"itanium_class\" \"unknown,fmisc,fld,frfr,stf\")])\n+  \"fnorm %0 = %1\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n \n (define_insn \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")"}]}