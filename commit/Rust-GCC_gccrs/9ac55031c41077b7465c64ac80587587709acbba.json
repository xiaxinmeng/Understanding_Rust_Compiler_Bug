{"sha": "9ac55031c41077b7465c64ac80587587709acbba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFjNTUwMzFjNDEwNzdiNzQ2NWM2NGFjODA1ODc1ODc3MDlhY2JiYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-09T23:16:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-09T23:16:13Z"}, "message": "compiler: delay escaping sliced arrays\n    \n    Arrays that are sliced are set to escape in type checking, very\n    early in compilation. The escape analysis runs later but cannot\n    undo it. This CL changes it to not escape in the early stage.\n    Later the escape analysis will make it escape when needed.\n    \n    Reviewed-on: https://go-review.googlesource.com/85635\n\nFrom-SVN: r256403", "tree": {"sha": "3e7d48df282ccdaa6a71764e645bc13df07ef05a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e7d48df282ccdaa6a71764e645bc13df07ef05a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ac55031c41077b7465c64ac80587587709acbba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac55031c41077b7465c64ac80587587709acbba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac55031c41077b7465c64ac80587587709acbba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac55031c41077b7465c64ac80587587709acbba/comments", "author": null, "committer": null, "parents": [{"sha": "8080b14f01acf7d3cd3d126ef6a09ccf8a97a6f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8080b14f01acf7d3cd3d126ef6a09ccf8a97a6f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8080b14f01acf7d3cd3d126ef6a09ccf8a97a6f1"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "23d2d3ad53147e49a5aa4941a167b4a0dd4bc335", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac55031c41077b7465c64ac80587587709acbba/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac55031c41077b7465c64ac80587587709acbba/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=9ac55031c41077b7465c64ac80587587709acbba", "patch": "@@ -1,4 +1,4 @@\n-cd422bacf0505e9656661d97a571668ad1bde0fe\n+91169ab206266361624236f0137668162ee8cb9b\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "4ba116860e1b9ce55c38e6ef80a0a110ed1f90c1", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac55031c41077b7465c64ac80587587709acbba/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac55031c41077b7465c64ac80587587709acbba/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=9ac55031c41077b7465c64ac80587587709acbba", "patch": "@@ -10679,7 +10679,7 @@ Array_index_expression::do_determine_type(const Type_context*)\n // Check types of an array index.\n \n void\n-Array_index_expression::do_check_types(Gogo* gogo)\n+Array_index_expression::do_check_types(Gogo*)\n {\n   Numeric_constant nc;\n   unsigned long v;\n@@ -10798,18 +10798,9 @@ Array_index_expression::do_check_types(Gogo* gogo)\n       if (!this->array_->is_addressable())\n \tthis->report_error(_(\"slice of unaddressable value\"));\n       else\n-\t{\n-\t  bool escapes = true;\n-\n-\t  // When compiling the runtime, a slice operation does not\n-\t  // cause local variables to escape.  When escape analysis\n-\t  // becomes the default, this should be changed to make it an\n-\t  // error if we have a slice operation that escapes.\n-\t  if (gogo->compiling_runtime() && gogo->package_name() == \"runtime\")\n-\t    escapes = false;\n-\n-\t  this->array_->address_taken(escapes);\n-\t}\n+        // Set the array address taken but not escape. The escape\n+        // analysis will make it escape to heap when needed.\n+        this->array_->address_taken(false);\n     }\n }\n "}, {"sha": "c672bf36b26cea639328a82fcf36cae85b641974", "filename": "gcc/go/gofrontend/wb.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ac55031c41077b7465c64ac80587587709acbba/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ac55031c41077b7465c64ac80587587709acbba/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fwb.cc?ref=9ac55031c41077b7465c64ac80587587709acbba", "patch": "@@ -45,6 +45,25 @@ Mark_address_taken::expression(Expression** pexpr)\n   Unary_expression* ue = expr->unary_expression();\n   if (ue != NULL)\n     ue->check_operand_address_taken(this->gogo_);\n+\n+  Array_index_expression* aie = expr->array_index_expression();\n+  if (aie != NULL\n+      && aie->end() != NULL\n+      && !aie->array()->type()->is_slice_type())\n+    {\n+      // Slice of an array. The escape analysis models this with\n+      // a child Node representing the address of the array.\n+      bool escapes = false;\n+      if (!this->gogo_->compiling_runtime()\n+          || this->gogo_->package_name() != \"runtime\")\n+        {\n+          Node* n = Node::make_node(expr);\n+          if (n->child() == NULL\n+              || (n->child()->encoding() & ESCAPE_MASK) != Node::ESCAPE_NONE)\n+            escapes = true;\n+        }\n+      aie->array()->address_taken(escapes);\n+    }\n   return TRAVERSE_CONTINUE;\n }\n "}]}