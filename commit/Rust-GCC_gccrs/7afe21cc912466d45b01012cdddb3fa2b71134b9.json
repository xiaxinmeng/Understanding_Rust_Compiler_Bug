{"sha": "7afe21cc912466d45b01012cdddb3fa2b71134b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FmZTIxY2M5MTI0NjZkNDViMDEwMTJjZGRkYjNmYTJiNzExMzRiOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-02-27T12:50:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-02-27T12:50:43Z"}, "message": "Initial revision\n\nFrom-SVN: r360", "tree": {"sha": "8c2e9e6d19217fb6c35a78772e9625439645737c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c2e9e6d19217fb6c35a78772e9625439645737c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7afe21cc912466d45b01012cdddb3fa2b71134b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afe21cc912466d45b01012cdddb3fa2b71134b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7afe21cc912466d45b01012cdddb3fa2b71134b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afe21cc912466d45b01012cdddb3fa2b71134b9/comments", "author": null, "committer": null, "parents": [{"sha": "3f07e47a8452c8308a8da8c5aa47e6a65b187a13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f07e47a8452c8308a8da8c5aa47e6a65b187a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f07e47a8452c8308a8da8c5aa47e6a65b187a13"}], "stats": {"total": 7470, "additions": 7470, "deletions": 0}, "files": [{"sha": "1240081c2d39779e252949d4c30ce5992cb6570c", "filename": "gcc/config/i386/sun386.h", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afe21cc912466d45b01012cdddb3fa2b71134b9/gcc%2Fconfig%2Fi386%2Fsun386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afe21cc912466d45b01012cdddb3fa2b71134b9/gcc%2Fconfig%2Fi386%2Fsun386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsun386.h?ref=7afe21cc912466d45b01012cdddb3fa2b71134b9", "patch": "@@ -0,0 +1,138 @@\n+/* Definitions for Sun assembler syntax for the Intel 80386.\n+   Copyright (C) 1988 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+/* Include common aspects of all 386 Unix assemblers.  */\n+#include \"unx386.h\"\n+\n+#define TARGET_VERSION fprintf (stderr, \" (80386, Sun syntax)\");\n+\n+/* Define the syntax of instructions and addresses.  */\n+\n+/* Prefix for internally generated assembler labels.  */\n+#define LPREFIX \".L\"\n+\n+/* Define the syntax of pseudo-ops, labels and comments.  */\n+\n+/* Assembler pseudos to introduce constants of various size.  */\n+\n+#define ASM_BYTE_OP \"\\t.byte\"\n+#define ASM_SHORT \"\\t.value\"\n+#define ASM_LONG \"\\t.long\"\n+#define ASM_DOUBLE \"\\t.double\"\n+\n+/* How to output an ASCII string constant.  */\n+\n+#define ASM_OUTPUT_ASCII(FILE, p, size) \\\n+{ int i = 0; \t\t\t\t\t\t\t\\\n+  while (i < (size))\t\t\t\t\t\t\\\n+    { if (i%10 == 0) { if (i!=0) fprintf ((FILE), \"\\n\");\t\t\\\n+\t\t       fprintf ((FILE), \"%s \", ASM_BYTE_OP); }\t\\\n+      else fprintf ((FILE), \",\");\t\t\t\t\t\\\n+      fprintf ((FILE), \"0x%x\", ((p)[i++] & 0377)) ;}\t\t\\\n+      fprintf ((FILE), \"\\n\"); }\n+\n+/* Output at beginning of assembler file.  */\n+/* The .file command should always begin the output.  */\n+\n+#undef ASM_FILE_START\n+#define ASM_FILE_START(FILE) \\\n+  do {\t\t\t\t\t\t\t\\\n+    extern char *version_string, *language_string;\t\\\n+    {\t\t\t\t\t\t\t\\\n+      int len = strlen (dump_base_name);\t\t\\\n+      char *na = dump_base_name + len;\t\t\t\\\n+      char shorter[15];\t\t\t\t\t\\\n+      /* NA gets DUMP_BASE_NAME sans directory names.  */\\\n+      while (na > dump_base_name)\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  if (na[-1] == '/')\t\t\t\t\\\n+\t    break;\t\t\t\t\t\\\n+\t  na--;\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\\\n+      strncpy (shorter, na, 14);\t\t\t\\\n+      shorter[14] = 0;\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t.file\\t\\\"%s\\\"\\n\", shorter);\t\\\n+    }\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t.version\\t\\\"%s %s\\\"\\n\",\t\t\\\n+\t     language_string, version_string);\t\t\\\n+    if (optimize) ASM_FILE_START_1 (FILE);\t\t\\\n+  } while (0)\n+\n+#define ASM_FILE_START_1(FILE) fprintf (FILE, \"\\t.optim\\n\")\n+\n+/* This is how to output an assembler line\n+   that says to advance the location counter\n+   to a multiple of 2**LOG bytes.  */\n+\n+#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n+    if ((LOG)!=0) fprintf ((FILE), \"\\t.align %d\\n\", 1<<(LOG))\n+\n+/* This is how to output an assembler line\n+   that says to advance the location counter by SIZE bytes.  */\n+\n+#define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n+  fprintf ((FILE), \"\\t.set\\t.,.+%u\\n\", (SIZE))\n+\n+/* Output before read-only data.  */\n+\n+#undef TEXT_SECTION_ASM_OP\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n+\n+/* Output before writable data.  */\n+\n+#undef DATA_SECTION_ASSM_OP\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n+\n+/* Define the syntax of labels and symbol definitions/declarations.  */\n+\n+/* This says how to output an assembler line\n+   to define a global common symbol.  */\n+\n+#define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n+( fputs (\".comm \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n+  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+\n+/* This says how to output an assembler line\n+   to define a local common symbol.  */\n+\n+#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n+( fputs (\".lcomm \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n+  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+\n+/* This is how to store into the string BUF\n+   the symbol_ref name of an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.\n+   This is suitable for output with `assemble_name'.  */\n+\n+#define ASM_GENERATE_INTERNAL_LABEL(BUF,PREFIX,NUMBER)\t\\\n+  sprintf ((BUF), \".%s%d\", (PREFIX), (NUMBER))\n+\n+/* This is how to output a reference to a user-level label named NAME.  */\n+\n+#define ASM_OUTPUT_LABELREF(FILE,NAME)\t\\\n+  fprintf (FILE, \"%s\", NAME)\n+\n+/* This is how to output an internal numbered label where\n+   PREFIX is the class of label and NUM is the number within the class.  */\n+\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n+  fprintf (FILE, \".%s%d:\\n\", PREFIX, NUM)"}, {"sha": "91ff217ecbe9963866fc747e02e77e9e902d5326", "filename": "gcc/cse.c", "status": "added", "additions": 7332, "deletions": 0, "changes": 7332, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afe21cc912466d45b01012cdddb3fa2b71134b9/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afe21cc912466d45b01012cdddb3fa2b71134b9/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=7afe21cc912466d45b01012cdddb3fa2b71134b9"}]}