{"sha": "1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI3ZWU4YjRjOTEyNGQ2MTFjYWY0NmY3NGY3ZDJjZTFhNWQyODNiMw==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2019-01-22T10:51:22Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2019-01-22T10:51:22Z"}, "message": "Document AMD GCN.\n\n2019-01-22  Andrew Stubbs  <ams@codesourcery.com>\n\n\t* doc/extend.tex (AMD GCN Function Attributes): New section.\n\t* doc/install.texi (amdgcn-unknown-amdhsa): New instructions.\n\t* doc/invoke.texi (AMD GCN Options): New section.\n\t* doc/md.texi (Constraints for Particular Machines): Add AMD GCN.\n\nFrom-SVN: r268146", "tree": {"sha": "ff650bb448032318c9a6434d22534a83a505af80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff650bb448032318c9a6434d22534a83a505af80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0b042c68a4d689a3dbc865b2588469b2efaabfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b042c68a4d689a3dbc865b2588469b2efaabfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b042c68a4d689a3dbc865b2588469b2efaabfa"}], "stats": {"total": 252, "additions": 252, "deletions": 0}, "files": [{"sha": "083f06f19341a8c4456a74394d79983c10f37348", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3", "patch": "@@ -1,3 +1,10 @@\n+2019-01-22  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* doc/extend.tex (AMD GCN Function Attributes): New section.\n+\t* doc/install.texi (amdgcn-unknown-amdhsa): New instructions.\n+\t* doc/invoke.texi (AMD GCN Options): New section.\n+\t* doc/md.texi (Constraints for Particular Machines): Add AMD GCN.\n+\n 2019-01-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc.c (parc_delegitimize_address): Recognize the GOT"}, {"sha": "2f3f10b911ecab10031ea628898192e442735772", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3", "patch": "@@ -2393,6 +2393,7 @@ GCC plugins may provide their own attributes.\n @menu\n * Common Function Attributes::\n * AArch64 Function Attributes::\n+* AMD GCN Function Attributes::\n * ARC Function Attributes::\n * ARM Function Attributes::\n * AVR Function Attributes::\n@@ -3954,6 +3955,96 @@ Note that CPU tuning options and attributes such as the @option{-mcpu=},\n @option{-mcpu=} option or the @code{cpu=} attribute conflicts with the\n architectural feature rules specified above.\n \n+@node AMD GCN Function Attributes\n+@subsection AMD GCN Function Attributes\n+\n+These function attributes are supported by the AMD GCN back end:\n+\n+@table @code\n+@item amdgpu_hsa_kernel\n+@cindex @code{amdgpu_hsa_kernel} function attribute, AMD GCN\n+This attribute indicates that the corresponding function should be compiled as\n+a kernel function, that is an entry point that can be invoked from the host\n+via the HSA runtime library.  By default functions are only callable only from\n+other GCN functions.\n+\n+This attribute is implicitly applied to any function named @code{main}, using\n+default parameters.\n+\n+Kernel functions may return an integer value, which will be written to a\n+conventional place within the HSA \"kernargs\" region.\n+\n+The attribute parameters configure what values are passed into the kernel\n+function by the GPU drivers, via the initial register state.  Some values are\n+used by the compiler, and therefore forced on.  Enabling other options may\n+break assumptions in the compiler and/or run-time libraries.\n+\n+@table @code\n+@item private_segment_buffer\n+Set @code{enable_sgpr_private_segment_buffer} flag.  Always on (required to\n+locate the stack).\n+\n+@item dispatch_ptr\n+Set @code{enable_sgpr_dispatch_ptr} flag.  Always on (required to locate the\n+launch dimensions).\n+\n+@item queue_ptr\n+Set @code{enable_sgpr_queue_ptr} flag.  Always on (required to convert address\n+spaces).\n+\n+@item kernarg_segment_ptr\n+Set @code{enable_sgpr_kernarg_segment_ptr} flag.  Always on (required to\n+locate the kernel arguments, \"kernargs\").\n+\n+@item dispatch_id\n+Set @code{enable_sgpr_dispatch_id} flag.\n+\n+@item flat_scratch_init\n+Set @code{enable_sgpr_flat_scratch_init} flag.\n+\n+@item private_segment_size\n+Set @code{enable_sgpr_private_segment_size} flag.\n+\n+@item grid_workgroup_count_X\n+Set @code{enable_sgpr_grid_workgroup_count_x} flag.  Always on (required to\n+use OpenACC/OpenMP).\n+\n+@item grid_workgroup_count_Y\n+Set @code{enable_sgpr_grid_workgroup_count_y} flag.\n+\n+@item grid_workgroup_count_Z\n+Set @code{enable_sgpr_grid_workgroup_count_z} flag.\n+\n+@item workgroup_id_X\n+Set @code{enable_sgpr_workgroup_id_x} flag.\n+\n+@item workgroup_id_Y\n+Set @code{enable_sgpr_workgroup_id_y} flag.\n+\n+@item workgroup_id_Z\n+Set @code{enable_sgpr_workgroup_id_z} flag.\n+\n+@item workgroup_info\n+Set @code{enable_sgpr_workgroup_info} flag.\n+\n+@item private_segment_wave_offset\n+Set @code{enable_sgpr_private_segment_wave_byte_offset} flag.  Always on\n+(required to locate the stack).\n+\n+@item work_item_id_X\n+Set @code{enable_vgpr_workitem_id} parameter.  Always on (can't be disabled).\n+\n+@item work_item_id_Y\n+Set @code{enable_vgpr_workitem_id} parameter.  Always on (required to enable\n+vectorization.)\n+\n+@item work_item_id_Z\n+Set @code{enable_vgpr_workitem_id} parameter.  Always on (required to use\n+OpenACC/OpenMP).\n+\n+@end table\n+@end table\n+\n @node ARC Function Attributes\n @subsection ARC Function Attributes\n "}, {"sha": "1d925eb9d7a7c7a9484005ddfeeffb2513619866", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3", "patch": "@@ -3453,6 +3453,27 @@ shared libraries.\n @heading amd64-*-solaris2.1[0-9]*\n This is a synonym for @samp{x86_64-*-solaris2.1[0-9]*}.\n \n+@html\n+<hr />\n+@end html\n+@anchor{amdgcn-unknown-amdhsa}\n+@heading amdgcn-unknown-amdhsa\n+AMD GCN GPU target.\n+\n+Instead of GNU Binutils, you will need to install LLVM 6, or later, and copy\n+@file{bin/llvm-mc} to @file{amdgcn-unknown-amdhsa/bin/as},\n+@file{bin/lld} to @file{amdgcn-unknown-amdhsa/bin/ld},\n+@file{bin/llvm-nm} to @file{amdgcn-unknown-amdhsa/bin/nm}, and\n+@file{bin/llvm-ar} to both @file{bin/amdgcn-unknown-amdhsa-ar} and\n+@file{bin/amdgcn-unknown-amdhsa-ranlib}.\n+\n+Use Newlib (2019-01-16, or newer).\n+\n+To run the binaries, install the HSA Runtime from the\n+@uref{https://rocm.github.io,,ROCm Platform}, and use\n+@file{libexec/gcc/amdhsa-unknown-amdhsa/@var{version}/gcn-run} to launch them\n+on the GPU.\n+\n @html\n <hr />\n @end html"}, {"sha": "728de5a7f45a2b57f555aa4ebe143cf7baa7788b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3", "patch": "@@ -645,6 +645,9 @@ Objective-C and Objective-C++ Dialects}.\n -mfp-mode=@var{mode}  -mvect-double  -max-vect-align=@var{num} @gol\n -msplit-vecmove-early  -m1reg-@var{reg}}\n \n+@emph{AMD GCN Options}\n+@gccoptlist{-march=@var{gpu} -mtune=@var{gpu} -mstack-size=@var{bytes}}\n+\n @emph{ARC Options}\n @gccoptlist{-mbarrel-shifter  -mjli-always @gol\n -mcpu=@var{cpu}  -mA6  -mARC600  -mA7  -mARC700 @gol\n@@ -15481,6 +15484,7 @@ platform.\n @menu\n * AArch64 Options::\n * Adapteva Epiphany Options::\n+* AMD GCN Options::\n * ARC Options::\n * ARM Options::\n * AVR Options::\n@@ -16121,6 +16125,41 @@ purpose.  The default is @option{-m1reg-none}.\n \n @end table\n \n+@node AMD GCN Options\n+@subsection AMD GCN Options\n+@cindex AMD GCN Options\n+\n+These options are defined specifically for the AMD GCN port.\n+\n+@table @gcctabopt\n+\n+@item -march=@var{gpu}\n+@opindex march\n+@itemx -mtune=@var{gpu}\n+@opindex mtune\n+Set architecture type or tuning for @var{gpu}. Supported values for @var{gpu}\n+are\n+\n+@table @samp\n+@opindex fiji\n+@item fiji\n+Compile for GCN3 Fiji devices (gfx803).\n+\n+@item gfx900\n+Compile for GCN5 Vega 10 devices (gfx900).\n+\n+@end table\n+\n+@item -mstack-size=@var{bytes}\n+@opindex mstack-size\n+Specify how many @var{bytes} of stack space will be requested for each GPU\n+thread (wave-front).  Beware that there may be many threads and limited memory\n+available.  The size of the stack allocation may also have an impact on\n+run-time performance.  The default is 32KB when using OpenACC or OpenMP, and\n+1MB otherwise.\n+\n+@end table\n+\n @node ARC Options\n @subsection ARC Options\n @cindex ARC options"}, {"sha": "6ffb69b2059b94da493ab55778cc24922243c7c8", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=1b7ee8b4c9124d611caf46f74f7d2ce1a5d283b3", "patch": "@@ -1800,6 +1800,100 @@ DF modes\n @end table\n \n \n+@item AMD GCN ---@file{config/gcn/constraints.md}\n+@table @code\n+@item I\n+Immediate integer in the range @minus{}16 to 64\n+\n+@item J\n+Immediate 16-bit signed integer\n+\n+@item Kf\n+Immediate constant @minus{}1\n+\n+@item L\n+Immediate 15-bit unsigned integer\n+\n+@item A\n+Immediate constant that can be inlined in an instruction encoding: integer\n+@minus{}16..64, or float 0.0, +/@minus{}0.5, +/@minus{}1.0, +/@minus{}2.0,\n++/@minus{}4.0, 1.0/(2.0*PI)\n+\n+@item B\n+Immediate 32-bit signed integer that can be attached to an instruction encoding\n+\n+@item C\n+Immediate 32-bit integer in range @minus{}16..4294967295 (i.e. 32-bit unsigned\n+integer or @samp{A} constraint)\n+\n+@item DA\n+Immediate 64-bit constant that can be split into two @samp{A} constants\n+\n+@item DB\n+Immediate 64-bit constant that can be split into two @samp{B} constants\n+\n+@item U\n+Any @code{unspec}\n+\n+@item Y\n+Any @code{symbol_ref} or @code{label_ref}\n+\n+@item v\n+VGPR register\n+\n+@item Sg\n+SGPR register\n+\n+@item SD\n+SGPR registers valid for instruction destinations, including VCC, M0 and EXEC\n+\n+@item SS\n+SGPR registers valid for instruction sources, including VCC, M0, EXEC and SCC\n+\n+@item Sm\n+SGPR registers valid as a source for scalar memory instructions (excludes M0\n+and EXEC)\n+\n+@item Sv\n+SGPR registers valid as a source or destination for vector instructions\n+(excludes EXEC)\n+\n+@item ca\n+All condition registers: SCC, VCCZ, EXECZ\n+\n+@item cs\n+Scalar condition register: SCC\n+\n+@item cV\n+Vector condition register: VCC, VCC_LO, VCC_HI\n+\n+@item e\n+EXEC register (EXEC_LO and EXEC_HI)\n+\n+@item RB\n+Memory operand with address space suitable for @code{buffer_*} instructions\n+\n+@item RF\n+Memory operand with address space suitable for @code{flat_*} instructions\n+\n+@item RS\n+Memory operand with address space suitable for @code{s_*} instructions\n+\n+@item RL\n+Memory operand with address space suitable for @code{ds_*} LDS instructions\n+\n+@item RG\n+Memory operand with address space suitable for @code{ds_*} GDS instructions\n+\n+@item RD\n+Memory operand with address space suitable for any @code{ds_*} instructions\n+\n+@item RM\n+Memory operand with address space suitable for @code{global_*} instructions\n+\n+@end table\n+\n+\n @item ARC ---@file{config/arc/constraints.md}\n @table @code\n @item q"}]}