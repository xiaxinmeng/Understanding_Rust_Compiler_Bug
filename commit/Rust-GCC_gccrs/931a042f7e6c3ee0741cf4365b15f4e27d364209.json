{"sha": "931a042f7e6c3ee0741cf4365b15f4e27d364209", "node_id": "C_kwDOANBUbNoAKDkzMWEwNDJmN2U2YzNlZTA3NDFjZjQzNjViMTVmNGUyN2QzNjQyMDk", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-19T14:12:49Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-27T12:44:40Z"}, "message": "RISC-V: Add vle.v C API intrinsics testcases\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vle-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vle-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vle-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_m-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_m-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_m-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_mu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_mu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_mu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_tum-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_tum-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_tum-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_tumu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_tumu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vle_tumu-3.c: New test.", "tree": {"sha": "de8d7703a0300290a31a74a1329b5bd42b137f03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de8d7703a0300290a31a74a1329b5bd42b137f03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/931a042f7e6c3ee0741cf4365b15f4e27d364209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931a042f7e6c3ee0741cf4365b15f4e27d364209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931a042f7e6c3ee0741cf4365b15f4e27d364209", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931a042f7e6c3ee0741cf4365b15f4e27d364209/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a"}], "stats": {"total": 6207, "additions": 6207, "deletions": 0}, "files": [{"sha": "6335e7bbe4d692d4ec18a70fd7e11e294fc4c92e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle-1.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle-1.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t \n+test___riscv_vle8_v_i8mf8(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8(base,vl);\n+}\n+\n+vint8mf4_t \n+test___riscv_vle8_v_i8mf4(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4(base,vl);\n+}\n+\n+vint8mf2_t \n+test___riscv_vle8_v_i8mf2(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2(base,vl);\n+}\n+\n+vint8m1_t \n+test___riscv_vle8_v_i8m1(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1(base,vl);\n+}\n+\n+vint8m2_t \n+test___riscv_vle8_v_i8m2(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2(base,vl);\n+}\n+\n+vint8m4_t \n+test___riscv_vle8_v_i8m4(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4(base,vl);\n+}\n+\n+vint8m8_t \n+test___riscv_vle8_v_i8m8(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8(base,vl);\n+}\n+\n+vuint8mf8_t \n+test___riscv_vle8_v_u8mf8(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8(base,vl);\n+}\n+\n+vuint8mf4_t \n+test___riscv_vle8_v_u8mf4(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4(base,vl);\n+}\n+\n+vuint8mf2_t \n+test___riscv_vle8_v_u8mf2(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2(base,vl);\n+}\n+\n+vuint8m1_t \n+test___riscv_vle8_v_u8m1(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1(base,vl);\n+}\n+\n+vuint8m2_t \n+test___riscv_vle8_v_u8m2(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2(base,vl);\n+}\n+\n+vuint8m4_t \n+test___riscv_vle8_v_u8m4(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4(base,vl);\n+}\n+\n+vuint8m8_t \n+test___riscv_vle8_v_u8m8(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8(base,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4(base,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2(base,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1(base,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2(base,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4(base,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8(base,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4(base,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2(base,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1(base,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2(base,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4(base,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8(base,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2(base,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1(base,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2(base,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4(base,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8(base,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2(base,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1(base,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2(base,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4(base,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8(base,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2(base,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1(base,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2(base,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4(base,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8(base,vl);\n+}\n+vint64m1_t\n+test___riscv_vle64_v_i64m1(int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1(base,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2(int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2(base,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4(int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4(base,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8(int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8(base,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1(uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1(base,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2(uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2(base,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4(uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4(base,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8(uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8(base,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1(double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1(base,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2(double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2(base,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4(double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4(base,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8(double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8(base,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+"}, {"sha": "f47137b38bf4932b0124226fde2b8b6226530e88", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle-2.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle-2.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t \n+test___riscv_vle8_v_i8mf8(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8(base,31);\n+}\n+\n+vint8mf4_t \n+test___riscv_vle8_v_i8mf4(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4(base,31);\n+}\n+\n+vint8mf2_t \n+test___riscv_vle8_v_i8mf2(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2(base,31);\n+}\n+\n+vint8m1_t \n+test___riscv_vle8_v_i8m1(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1(base,31);\n+}\n+\n+vint8m2_t \n+test___riscv_vle8_v_i8m2(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2(base,31);\n+}\n+\n+vint8m4_t \n+test___riscv_vle8_v_i8m4(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4(base,31);\n+}\n+\n+vint8m8_t \n+test___riscv_vle8_v_i8m8(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8(base,31);\n+}\n+\n+vuint8mf8_t \n+test___riscv_vle8_v_u8mf8(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8(base,31);\n+}\n+\n+vuint8mf4_t \n+test___riscv_vle8_v_u8mf4(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4(base,31);\n+}\n+\n+vuint8mf2_t \n+test___riscv_vle8_v_u8mf2(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2(base,31);\n+}\n+\n+vuint8m1_t \n+test___riscv_vle8_v_u8m1(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1(base,31);\n+}\n+\n+vuint8m2_t \n+test___riscv_vle8_v_u8m2(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2(base,31);\n+}\n+\n+vuint8m4_t \n+test___riscv_vle8_v_u8m4(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4(base,31);\n+}\n+\n+vuint8m8_t \n+test___riscv_vle8_v_u8m8(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8(base,31);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4(base,31);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2(base,31);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1(base,31);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2(base,31);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4(base,31);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8(base,31);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4(base,31);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2(base,31);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1(base,31);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2(base,31);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4(base,31);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8(base,31);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2(base,31);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1(base,31);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2(base,31);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4(base,31);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8(base,31);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2(base,31);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1(base,31);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2(base,31);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4(base,31);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8(base,31);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2(base,31);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1(base,31);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2(base,31);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4(base,31);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8(base,31);\n+}\n+vint64m1_t\n+test___riscv_vle64_v_i64m1(int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1(base,31);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2(int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2(base,31);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4(int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4(base,31);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8(int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8(base,31);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1(uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1(base,31);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2(uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2(base,31);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4(uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4(base,31);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8(uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8(base,31);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1(double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1(base,31);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2(double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2(base,31);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4(double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4(base,31);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8(double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8(base,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+"}, {"sha": "ffc9fd5bcbef3a8be96ca1d077bc392dd6a4b1fb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle-3.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle-3.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t \n+test___riscv_vle8_v_i8mf8(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8(base,32);\n+}\n+\n+vint8mf4_t \n+test___riscv_vle8_v_i8mf4(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4(base,32);\n+}\n+\n+vint8mf2_t \n+test___riscv_vle8_v_i8mf2(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2(base,32);\n+}\n+\n+vint8m1_t \n+test___riscv_vle8_v_i8m1(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1(base,32);\n+}\n+\n+vint8m2_t \n+test___riscv_vle8_v_i8m2(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2(base,32);\n+}\n+\n+vint8m4_t \n+test___riscv_vle8_v_i8m4(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4(base,32);\n+}\n+\n+vint8m8_t \n+test___riscv_vle8_v_i8m8(int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8(base,32);\n+}\n+\n+vuint8mf8_t \n+test___riscv_vle8_v_u8mf8(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8(base,32);\n+}\n+\n+vuint8mf4_t \n+test___riscv_vle8_v_u8mf4(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4(base,32);\n+}\n+\n+vuint8mf2_t \n+test___riscv_vle8_v_u8mf2(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2(base,32);\n+}\n+\n+vuint8m1_t \n+test___riscv_vle8_v_u8m1(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1(base,32);\n+}\n+\n+vuint8m2_t \n+test___riscv_vle8_v_u8m2(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2(base,32);\n+}\n+\n+vuint8m4_t \n+test___riscv_vle8_v_u8m4(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4(base,32);\n+}\n+\n+vuint8m8_t \n+test___riscv_vle8_v_u8m8(uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8(base,32);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4(base,32);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2(base,32);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1(base,32);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2(base,32);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4(base,32);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8(int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8(base,32);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4(base,32);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2(base,32);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1(base,32);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2(base,32);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4(base,32);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8(uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8(base,32);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2(base,32);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1(base,32);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2(base,32);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4(base,32);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8(int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8(base,32);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2(base,32);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1(base,32);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2(base,32);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4(base,32);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8(uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8(base,32);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2(base,32);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1(base,32);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2(base,32);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4(base,32);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8(float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8(base,32);\n+}\n+vint64m1_t\n+test___riscv_vle64_v_i64m1(int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1(base,32);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2(int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2(base,32);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4(int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4(base,32);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8(int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8(base,32);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1(uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1(base,32);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2(uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2(base,32);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4(uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4(base,32);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8(uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8(base,32);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1(double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1(base,32);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2(double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2(base,32);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4(double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4(base,32);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8(double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8(base,32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+"}, {"sha": "7944f5ef8f5df372e8753ee63ee995833b0e13d6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_m-1.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_m-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_m-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_m-1.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_m(vbool64_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_m(mask,base,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_m(vbool32_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_m(mask,base,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_m(vbool16_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_m(mask,base,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_m(vbool8_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_m(mask,base,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_m(vbool4_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_m(mask,base,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_m(vbool2_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_m(mask,base,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_m(vbool1_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_m(mask,base,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_m(vbool64_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_m(mask,base,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_m(vbool32_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_m(mask,base,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_m(vbool16_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_m(mask,base,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_m(vbool8_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_m(mask,base,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_m(vbool4_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_m(mask,base,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_m(vbool2_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_m(mask,base,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_m(vbool1_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_m(mask,base,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_m(vbool64_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_m(mask,base,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_m(vbool32_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_m(mask,base,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_m(vbool16_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_m(mask,base,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_m(vbool8_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_m(mask,base,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_m(vbool4_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_m(mask,base,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_m(vbool2_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_m(mask,base,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_m(vbool64_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_m(mask,base,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_m(vbool32_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_m(mask,base,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_m(vbool16_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_m(mask,base,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_m(vbool8_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_m(mask,base,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_m(vbool4_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_m(mask,base,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_m(vbool2_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_m(mask,base,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_m(vbool64_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_m(mask,base,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_m(vbool32_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_m(mask,base,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_m(vbool16_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_m(mask,base,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_m(vbool8_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_m(mask,base,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_m(vbool4_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_m(mask,base,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_m(vbool64_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_m(mask,base,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_m(vbool32_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_m(mask,base,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_m(vbool16_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_m(mask,base,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_m(vbool8_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_m(mask,base,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_m(vbool4_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_m(mask,base,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_m(vbool64_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_m(mask,base,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_m(vbool32_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_m(mask,base,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_m(vbool16_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_m(mask,base,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_m(vbool8_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_m(mask,base,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_m(vbool4_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_m(mask,base,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_m(vbool64_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_m(mask,base,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_m(vbool32_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_m(mask,base,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_m(vbool16_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_m(mask,base,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_m(vbool8_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_m(mask,base,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_m(vbool64_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_m(mask,base,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_m(vbool32_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_m(mask,base,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_m(vbool16_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_m(mask,base,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_m(vbool8_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_m(mask,base,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_m(vbool64_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_m(mask,base,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_m(vbool32_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_m(mask,base,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_m(vbool16_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_m(mask,base,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_m(vbool8_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_m(mask,base,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "7d5f6016afb1bddebffe739e104bdf93f32cdf0b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_m-2.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_m-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_m-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_m-2.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_m(vbool64_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_m(mask,base,31);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_m(vbool32_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_m(mask,base,31);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_m(vbool16_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_m(mask,base,31);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_m(vbool8_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_m(mask,base,31);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_m(vbool4_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_m(mask,base,31);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_m(vbool2_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_m(mask,base,31);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_m(vbool1_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_m(mask,base,31);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_m(vbool64_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_m(mask,base,31);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_m(vbool32_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_m(mask,base,31);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_m(vbool16_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_m(mask,base,31);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_m(vbool8_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_m(mask,base,31);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_m(vbool4_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_m(mask,base,31);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_m(vbool2_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_m(mask,base,31);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_m(vbool1_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_m(mask,base,31);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_m(vbool64_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_m(mask,base,31);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_m(vbool32_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_m(mask,base,31);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_m(vbool16_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_m(mask,base,31);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_m(vbool8_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_m(mask,base,31);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_m(vbool4_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_m(mask,base,31);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_m(vbool2_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_m(mask,base,31);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_m(vbool64_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_m(mask,base,31);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_m(vbool32_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_m(mask,base,31);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_m(vbool16_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_m(mask,base,31);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_m(vbool8_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_m(mask,base,31);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_m(vbool4_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_m(mask,base,31);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_m(vbool2_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_m(mask,base,31);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_m(vbool64_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_m(mask,base,31);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_m(vbool32_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_m(mask,base,31);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_m(vbool16_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_m(mask,base,31);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_m(vbool8_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_m(mask,base,31);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_m(vbool4_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_m(mask,base,31);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_m(vbool64_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_m(mask,base,31);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_m(vbool32_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_m(mask,base,31);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_m(vbool16_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_m(mask,base,31);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_m(vbool8_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_m(mask,base,31);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_m(vbool4_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_m(mask,base,31);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_m(vbool64_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_m(mask,base,31);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_m(vbool32_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_m(mask,base,31);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_m(vbool16_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_m(mask,base,31);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_m(vbool8_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_m(mask,base,31);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_m(vbool4_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_m(mask,base,31);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_m(vbool64_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_m(mask,base,31);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_m(vbool32_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_m(mask,base,31);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_m(vbool16_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_m(mask,base,31);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_m(vbool8_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_m(mask,base,31);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_m(vbool64_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_m(mask,base,31);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_m(vbool32_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_m(mask,base,31);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_m(vbool16_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_m(mask,base,31);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_m(vbool8_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_m(mask,base,31);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_m(vbool64_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_m(mask,base,31);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_m(vbool32_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_m(mask,base,31);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_m(vbool16_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_m(mask,base,31);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_m(vbool8_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_m(mask,base,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "a3aca9f781513e44a79b9389b47f3e9094f8451f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_m-3.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_m-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_m-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_m-3.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_m(vbool64_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_m(mask,base,32);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_m(vbool32_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_m(mask,base,32);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_m(vbool16_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_m(mask,base,32);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_m(vbool8_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_m(mask,base,32);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_m(vbool4_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_m(mask,base,32);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_m(vbool2_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_m(mask,base,32);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_m(vbool1_t mask,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_m(mask,base,32);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_m(vbool64_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_m(mask,base,32);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_m(vbool32_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_m(mask,base,32);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_m(vbool16_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_m(mask,base,32);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_m(vbool8_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_m(mask,base,32);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_m(vbool4_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_m(mask,base,32);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_m(vbool2_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_m(mask,base,32);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_m(vbool1_t mask,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_m(mask,base,32);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_m(vbool64_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_m(mask,base,32);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_m(vbool32_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_m(mask,base,32);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_m(vbool16_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_m(mask,base,32);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_m(vbool8_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_m(mask,base,32);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_m(vbool4_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_m(mask,base,32);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_m(vbool2_t mask,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_m(mask,base,32);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_m(vbool64_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_m(mask,base,32);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_m(vbool32_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_m(mask,base,32);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_m(vbool16_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_m(mask,base,32);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_m(vbool8_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_m(mask,base,32);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_m(vbool4_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_m(mask,base,32);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_m(vbool2_t mask,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_m(mask,base,32);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_m(vbool64_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_m(mask,base,32);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_m(vbool32_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_m(mask,base,32);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_m(vbool16_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_m(mask,base,32);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_m(vbool8_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_m(mask,base,32);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_m(vbool4_t mask,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_m(mask,base,32);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_m(vbool64_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_m(mask,base,32);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_m(vbool32_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_m(mask,base,32);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_m(vbool16_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_m(mask,base,32);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_m(vbool8_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_m(mask,base,32);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_m(vbool4_t mask,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_m(mask,base,32);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_m(vbool64_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_m(mask,base,32);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_m(vbool32_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_m(mask,base,32);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_m(vbool16_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_m(mask,base,32);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_m(vbool8_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_m(mask,base,32);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_m(vbool4_t mask,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_m(mask,base,32);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_m(vbool64_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_m(mask,base,32);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_m(vbool32_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_m(mask,base,32);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_m(vbool16_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_m(mask,base,32);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_m(vbool8_t mask,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_m(mask,base,32);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_m(vbool64_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_m(mask,base,32);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_m(vbool32_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_m(mask,base,32);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_m(vbool16_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_m(mask,base,32);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_m(vbool8_t mask,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_m(mask,base,32);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_m(vbool64_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_m(mask,base,32);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_m(vbool32_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_m(mask,base,32);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_m(vbool16_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_m(mask,base,32);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_m(vbool8_t mask,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_m(mask,base,32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "25449911625060afb024f5d06b05ba7c3df4f36d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_mu-1.c", "status": "added", "additions": 344, "deletions": 0, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_mu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_mu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_mu-1.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,344 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_mu(mask,merge,base,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_mu(mask,merge,base,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_mu(mask,merge,base,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_mu(vbool8_t mask,vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_mu(mask,merge,base,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_mu(vbool4_t mask,vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_mu(mask,merge,base,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_mu(vbool2_t mask,vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_mu(mask,merge,base,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_mu(vbool1_t mask,vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_mu(mask,merge,base,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_mu(mask,merge,base,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_mu(mask,merge,base,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_mu(mask,merge,base,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_mu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_mu(mask,merge,base,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_mu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_mu(mask,merge,base,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_mu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_mu(mask,merge,base,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_mu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_mu(mask,merge,base,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_mu(mask,merge,base,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_mu(mask,merge,base,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_mu(vbool16_t mask,vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_mu(mask,merge,base,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_mu(vbool8_t mask,vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_mu(mask,merge,base,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_mu(vbool4_t mask,vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_mu(mask,merge,base,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_mu(vbool2_t mask,vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_mu(mask,merge,base,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_mu(mask,merge,base,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_mu(mask,merge,base,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_mu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_mu(mask,merge,base,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_mu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_mu(mask,merge,base,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_mu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_mu(mask,merge,base,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_mu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_mu(mask,merge,base,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_mu(mask,merge,base,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_mu(vbool32_t mask,vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_mu(mask,merge,base,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_mu(vbool16_t mask,vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_mu(mask,merge,base,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_mu(vbool8_t mask,vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_mu(mask,merge,base,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_mu(vbool4_t mask,vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_mu(mask,merge,base,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_mu(mask,merge,base,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_mu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_mu(mask,merge,base,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_mu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_mu(mask,merge,base,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_mu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_mu(mask,merge,base,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_mu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_mu(mask,merge,base,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_mu(vbool64_t mask,vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_mu(mask,merge,base,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_mu(vbool32_t mask,vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_mu(mask,merge,base,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_mu(vbool16_t mask,vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_mu(mask,merge,base,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_mu(vbool8_t mask,vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_mu(mask,merge,base,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_mu(vbool4_t mask,vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_mu(mask,merge,base,vl);\n+}\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_mu(vbool64_t mask,vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_mu(mask,merge,base,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_mu(vbool32_t mask,vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_mu(mask,merge,base,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_mu(vbool16_t mask,vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_mu(mask,merge,base,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_mu(vbool8_t mask,vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_mu(mask,merge,base,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_mu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_mu(mask,merge,base,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_mu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_mu(mask,merge,base,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_mu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_mu(mask,merge,base,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_mu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_mu(mask,merge,base,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_mu(vbool64_t mask,vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_mu(mask,merge,base,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_mu(vbool32_t mask,vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_mu(mask,merge,base,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_mu(vbool16_t mask,vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_mu(mask,merge,base,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_mu(vbool8_t mask,vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_mu(mask,merge,base,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "9440cb1a40582c0ff661fa61ee8a486e12b55603", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_mu-2.c", "status": "added", "additions": 344, "deletions": 0, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_mu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_mu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_mu-2.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,344 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_mu(mask,merge,base,31);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_mu(mask,merge,base,31);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_mu(mask,merge,base,31);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_mu(vbool8_t mask,vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_mu(mask,merge,base,31);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_mu(vbool4_t mask,vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_mu(mask,merge,base,31);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_mu(vbool2_t mask,vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_mu(mask,merge,base,31);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_mu(vbool1_t mask,vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_mu(mask,merge,base,31);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_mu(mask,merge,base,31);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_mu(mask,merge,base,31);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_mu(mask,merge,base,31);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_mu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_mu(mask,merge,base,31);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_mu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_mu(mask,merge,base,31);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_mu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_mu(mask,merge,base,31);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_mu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_mu(mask,merge,base,31);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_mu(mask,merge,base,31);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_mu(mask,merge,base,31);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_mu(vbool16_t mask,vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_mu(mask,merge,base,31);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_mu(vbool8_t mask,vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_mu(mask,merge,base,31);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_mu(vbool4_t mask,vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_mu(mask,merge,base,31);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_mu(vbool2_t mask,vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_mu(mask,merge,base,31);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_mu(mask,merge,base,31);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_mu(mask,merge,base,31);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_mu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_mu(mask,merge,base,31);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_mu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_mu(mask,merge,base,31);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_mu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_mu(mask,merge,base,31);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_mu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_mu(mask,merge,base,31);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_mu(mask,merge,base,31);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_mu(vbool32_t mask,vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_mu(mask,merge,base,31);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_mu(vbool16_t mask,vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_mu(mask,merge,base,31);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_mu(vbool8_t mask,vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_mu(mask,merge,base,31);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_mu(vbool4_t mask,vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_mu(mask,merge,base,31);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_mu(mask,merge,base,31);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_mu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_mu(mask,merge,base,31);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_mu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_mu(mask,merge,base,31);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_mu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_mu(mask,merge,base,31);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_mu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_mu(mask,merge,base,31);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_mu(vbool64_t mask,vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_mu(mask,merge,base,31);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_mu(vbool32_t mask,vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_mu(mask,merge,base,31);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_mu(vbool16_t mask,vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_mu(mask,merge,base,31);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_mu(vbool8_t mask,vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_mu(mask,merge,base,31);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_mu(vbool4_t mask,vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_mu(mask,merge,base,31);\n+}\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_mu(vbool64_t mask,vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_mu(mask,merge,base,31);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_mu(vbool32_t mask,vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_mu(mask,merge,base,31);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_mu(vbool16_t mask,vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_mu(mask,merge,base,31);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_mu(vbool8_t mask,vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_mu(mask,merge,base,31);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_mu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_mu(mask,merge,base,31);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_mu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_mu(mask,merge,base,31);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_mu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_mu(mask,merge,base,31);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_mu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_mu(mask,merge,base,31);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_mu(vbool64_t mask,vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_mu(mask,merge,base,31);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_mu(vbool32_t mask,vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_mu(mask,merge,base,31);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_mu(vbool16_t mask,vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_mu(mask,merge,base,31);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_mu(vbool8_t mask,vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_mu(mask,merge,base,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "f1eea5fa578aa4dbae7a1c23ceb4ef1578c9e609", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_mu-3.c", "status": "added", "additions": 344, "deletions": 0, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_mu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_mu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_mu-3.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,344 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_mu(vbool64_t mask,vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_mu(mask,merge,base,32);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_mu(vbool32_t mask,vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_mu(mask,merge,base,32);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_mu(vbool16_t mask,vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_mu(mask,merge,base,32);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_mu(vbool8_t mask,vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_mu(mask,merge,base,32);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_mu(vbool4_t mask,vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_mu(mask,merge,base,32);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_mu(vbool2_t mask,vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_mu(mask,merge,base,32);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_mu(vbool1_t mask,vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_mu(mask,merge,base,32);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_mu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_mu(mask,merge,base,32);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_mu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_mu(mask,merge,base,32);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_mu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_mu(mask,merge,base,32);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_mu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_mu(mask,merge,base,32);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_mu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_mu(mask,merge,base,32);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_mu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_mu(mask,merge,base,32);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_mu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_mu(mask,merge,base,32);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_mu(vbool64_t mask,vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_mu(mask,merge,base,32);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_mu(vbool32_t mask,vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_mu(mask,merge,base,32);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_mu(vbool16_t mask,vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_mu(mask,merge,base,32);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_mu(vbool8_t mask,vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_mu(mask,merge,base,32);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_mu(vbool4_t mask,vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_mu(mask,merge,base,32);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_mu(vbool2_t mask,vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_mu(mask,merge,base,32);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_mu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_mu(mask,merge,base,32);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_mu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_mu(mask,merge,base,32);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_mu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_mu(mask,merge,base,32);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_mu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_mu(mask,merge,base,32);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_mu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_mu(mask,merge,base,32);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_mu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_mu(mask,merge,base,32);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_mu(vbool64_t mask,vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_mu(mask,merge,base,32);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_mu(vbool32_t mask,vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_mu(mask,merge,base,32);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_mu(vbool16_t mask,vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_mu(mask,merge,base,32);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_mu(vbool8_t mask,vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_mu(mask,merge,base,32);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_mu(vbool4_t mask,vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_mu(mask,merge,base,32);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_mu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_mu(mask,merge,base,32);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_mu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_mu(mask,merge,base,32);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_mu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_mu(mask,merge,base,32);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_mu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_mu(mask,merge,base,32);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_mu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_mu(mask,merge,base,32);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_mu(vbool64_t mask,vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_mu(mask,merge,base,32);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_mu(vbool32_t mask,vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_mu(mask,merge,base,32);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_mu(vbool16_t mask,vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_mu(mask,merge,base,32);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_mu(vbool8_t mask,vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_mu(mask,merge,base,32);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_mu(vbool4_t mask,vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_mu(mask,merge,base,32);\n+}\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_mu(vbool64_t mask,vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_mu(mask,merge,base,32);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_mu(vbool32_t mask,vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_mu(mask,merge,base,32);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_mu(vbool16_t mask,vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_mu(mask,merge,base,32);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_mu(vbool8_t mask,vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_mu(mask,merge,base,32);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_mu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_mu(mask,merge,base,32);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_mu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_mu(mask,merge,base,32);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_mu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_mu(mask,merge,base,32);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_mu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_mu(mask,merge,base,32);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_mu(vbool64_t mask,vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_mu(mask,merge,base,32);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_mu(vbool32_t mask,vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_mu(mask,merge,base,32);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_mu(vbool16_t mask,vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_mu(mask,merge,base,32);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_mu(vbool8_t mask,vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_mu(mask,merge,base,32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "2f55f6ace7187be964cf4e6cf1a7fec7bf8eeb6d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_tu-1.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tu-1.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_tu(vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_tu(merge,base,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_tu(vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_tu(merge,base,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_tu(vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_tu(merge,base,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_tu(vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_tu(merge,base,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_tu(vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_tu(merge,base,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_tu(vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_tu(merge,base,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_tu(vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_tu(merge,base,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_tu(vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_tu(merge,base,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_tu(vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_tu(merge,base,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_tu(vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_tu(merge,base,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_tu(vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_tu(merge,base,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_tu(vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_tu(merge,base,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_tu(vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_tu(merge,base,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_tu(vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_tu(merge,base,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_tu(vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_tu(merge,base,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_tu(vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_tu(merge,base,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_tu(vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_tu(merge,base,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_tu(vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_tu(merge,base,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_tu(vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_tu(merge,base,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_tu(vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_tu(merge,base,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_tu(vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_tu(merge,base,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_tu(vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_tu(merge,base,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_tu(vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_tu(merge,base,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_tu(vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_tu(merge,base,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_tu(vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_tu(merge,base,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_tu(vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_tu(merge,base,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_tu(vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_tu(merge,base,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_tu(vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_tu(merge,base,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_tu(vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_tu(merge,base,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_tu(vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_tu(merge,base,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_tu(vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_tu(merge,base,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_tu(vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_tu(merge,base,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_tu(vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_tu(merge,base,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_tu(vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_tu(merge,base,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_tu(vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_tu(merge,base,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_tu(vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_tu(merge,base,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_tu(vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_tu(merge,base,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_tu(vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_tu(merge,base,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_tu(vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_tu(merge,base,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_tu(vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_tu(merge,base,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_tu(vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_tu(merge,base,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_tu(vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_tu(merge,base,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_tu(vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_tu(merge,base,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_tu(vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_tu(merge,base,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_tu(vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_tu(merge,base,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_tu(vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_tu(merge,base,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_tu(vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_tu(merge,base,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_tu(vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_tu(merge,base,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_tu(vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_tu(merge,base,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_tu(vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_tu(merge,base,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_tu(vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_tu(merge,base,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_tu(vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_tu(merge,base,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_tu(vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_tu(merge,base,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */"}, {"sha": "67173563baa5bc9da4d03172bc44d1e5e0d1c0dc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_tu-2.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tu-2.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_tu(vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_tu(merge,base,31);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_tu(vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_tu(merge,base,31);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_tu(vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_tu(merge,base,31);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_tu(vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_tu(merge,base,31);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_tu(vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_tu(merge,base,31);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_tu(vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_tu(merge,base,31);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_tu(vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_tu(merge,base,31);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_tu(vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_tu(merge,base,31);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_tu(vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_tu(merge,base,31);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_tu(vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_tu(merge,base,31);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_tu(vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_tu(merge,base,31);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_tu(vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_tu(merge,base,31);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_tu(vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_tu(merge,base,31);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_tu(vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_tu(merge,base,31);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_tu(vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_tu(merge,base,31);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_tu(vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_tu(merge,base,31);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_tu(vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_tu(merge,base,31);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_tu(vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_tu(merge,base,31);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_tu(vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_tu(merge,base,31);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_tu(vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_tu(merge,base,31);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_tu(vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_tu(merge,base,31);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_tu(vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_tu(merge,base,31);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_tu(vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_tu(merge,base,31);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_tu(vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_tu(merge,base,31);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_tu(vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_tu(merge,base,31);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_tu(vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_tu(merge,base,31);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_tu(vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_tu(merge,base,31);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_tu(vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_tu(merge,base,31);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_tu(vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_tu(merge,base,31);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_tu(vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_tu(merge,base,31);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_tu(vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_tu(merge,base,31);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_tu(vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_tu(merge,base,31);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_tu(vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_tu(merge,base,31);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_tu(vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_tu(merge,base,31);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_tu(vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_tu(merge,base,31);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_tu(vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_tu(merge,base,31);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_tu(vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_tu(merge,base,31);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_tu(vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_tu(merge,base,31);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_tu(vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_tu(merge,base,31);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_tu(vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_tu(merge,base,31);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_tu(vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_tu(merge,base,31);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_tu(vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_tu(merge,base,31);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_tu(vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_tu(merge,base,31);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_tu(vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_tu(merge,base,31);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_tu(vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_tu(merge,base,31);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_tu(vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_tu(merge,base,31);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_tu(vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_tu(merge,base,31);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_tu(vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_tu(merge,base,31);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_tu(vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_tu(merge,base,31);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_tu(vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_tu(merge,base,31);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_tu(vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_tu(merge,base,31);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_tu(vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_tu(merge,base,31);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_tu(vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_tu(merge,base,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */"}, {"sha": "2becefecf2e7ef4796af648eb1060bac60dddc09", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_tu-3.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tu-3.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_tu(vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_tu(merge,base,32);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_tu(vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_tu(merge,base,32);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_tu(vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_tu(merge,base,32);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_tu(vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_tu(merge,base,32);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_tu(vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_tu(merge,base,32);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_tu(vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_tu(merge,base,32);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_tu(vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_tu(merge,base,32);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_tu(vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_tu(merge,base,32);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_tu(vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_tu(merge,base,32);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_tu(vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_tu(merge,base,32);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_tu(vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_tu(merge,base,32);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_tu(vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_tu(merge,base,32);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_tu(vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_tu(merge,base,32);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_tu(vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_tu(merge,base,32);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_tu(vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_tu(merge,base,32);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_tu(vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_tu(merge,base,32);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_tu(vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_tu(merge,base,32);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_tu(vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_tu(merge,base,32);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_tu(vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_tu(merge,base,32);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_tu(vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_tu(merge,base,32);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_tu(vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_tu(merge,base,32);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_tu(vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_tu(merge,base,32);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_tu(vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_tu(merge,base,32);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_tu(vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_tu(merge,base,32);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_tu(vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_tu(merge,base,32);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_tu(vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_tu(merge,base,32);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_tu(vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_tu(merge,base,32);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_tu(vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_tu(merge,base,32);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_tu(vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_tu(merge,base,32);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_tu(vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_tu(merge,base,32);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_tu(vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_tu(merge,base,32);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_tu(vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_tu(merge,base,32);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_tu(vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_tu(merge,base,32);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_tu(vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_tu(merge,base,32);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_tu(vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_tu(merge,base,32);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_tu(vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_tu(merge,base,32);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_tu(vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_tu(merge,base,32);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_tu(vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_tu(merge,base,32);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_tu(vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_tu(merge,base,32);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_tu(vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_tu(merge,base,32);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_tu(vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_tu(merge,base,32);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_tu(vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_tu(merge,base,32);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_tu(vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_tu(merge,base,32);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_tu(vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_tu(merge,base,32);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_tu(vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_tu(merge,base,32);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_tu(vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_tu(merge,base,32);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_tu(vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_tu(merge,base,32);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_tu(vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_tu(merge,base,32);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_tu(vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_tu(merge,base,32);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_tu(vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_tu(merge,base,32);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_tu(vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_tu(merge,base,32);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_tu(vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_tu(merge,base,32);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_tu(vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_tu(merge,base,32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\)} 3 } } */"}, {"sha": "ae2606d3b69a399a54384acd17beb6ce1b5f666d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_tum-1.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tum-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tum-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tum-1.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_tum(mask,merge,base,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_tum(mask,merge,base,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_tum(mask,merge,base,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_tum(vbool8_t mask,vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_tum(mask,merge,base,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_tum(vbool4_t mask,vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_tum(mask,merge,base,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_tum(vbool2_t mask,vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_tum(mask,merge,base,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_tum(vbool1_t mask,vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_tum(mask,merge,base,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_tum(mask,merge,base,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_tum(mask,merge,base,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_tum(mask,merge,base,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_tum(vbool8_t mask,vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_tum(mask,merge,base,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_tum(vbool4_t mask,vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_tum(mask,merge,base,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_tum(vbool2_t mask,vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_tum(mask,merge,base,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_tum(vbool1_t mask,vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_tum(mask,merge,base,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_tum(mask,merge,base,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_tum(mask,merge,base,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_tum(vbool16_t mask,vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_tum(mask,merge,base,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_tum(vbool8_t mask,vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_tum(mask,merge,base,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_tum(vbool4_t mask,vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_tum(mask,merge,base,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_tum(vbool2_t mask,vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_tum(mask,merge,base,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_tum(mask,merge,base,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_tum(mask,merge,base,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_tum(vbool16_t mask,vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_tum(mask,merge,base,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_tum(vbool8_t mask,vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_tum(mask,merge,base,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_tum(vbool4_t mask,vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_tum(mask,merge,base,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_tum(vbool2_t mask,vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_tum(mask,merge,base,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_tum(mask,merge,base,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_tum(vbool32_t mask,vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_tum(mask,merge,base,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_tum(vbool16_t mask,vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_tum(mask,merge,base,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_tum(vbool8_t mask,vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_tum(mask,merge,base,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_tum(vbool4_t mask,vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_tum(mask,merge,base,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_tum(mask,merge,base,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_tum(vbool32_t mask,vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_tum(mask,merge,base,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_tum(vbool16_t mask,vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_tum(mask,merge,base,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_tum(vbool8_t mask,vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_tum(mask,merge,base,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_tum(vbool4_t mask,vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_tum(mask,merge,base,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_tum(vbool64_t mask,vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_tum(mask,merge,base,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_tum(vbool32_t mask,vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_tum(mask,merge,base,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_tum(vbool16_t mask,vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_tum(mask,merge,base,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_tum(vbool8_t mask,vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_tum(mask,merge,base,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_tum(vbool4_t mask,vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_tum(mask,merge,base,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_tum(vbool64_t mask,vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_tum(mask,merge,base,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_tum(vbool32_t mask,vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_tum(mask,merge,base,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_tum(vbool16_t mask,vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_tum(mask,merge,base,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_tum(vbool8_t mask,vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_tum(mask,merge,base,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_tum(vbool64_t mask,vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_tum(mask,merge,base,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_tum(vbool32_t mask,vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_tum(mask,merge,base,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_tum(vbool16_t mask,vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_tum(mask,merge,base,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_tum(vbool8_t mask,vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_tum(mask,merge,base,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_tum(vbool64_t mask,vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_tum(mask,merge,base,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_tum(vbool32_t mask,vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_tum(mask,merge,base,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_tum(vbool16_t mask,vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_tum(mask,merge,base,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_tum(vbool8_t mask,vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_tum(mask,merge,base,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "ec697bef5cbe59d244574620bf76b8c7300b4c41", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_tum-2.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tum-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tum-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tum-2.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_tum(mask,merge,base,31);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_tum(mask,merge,base,31);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_tum(mask,merge,base,31);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_tum(vbool8_t mask,vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_tum(mask,merge,base,31);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_tum(vbool4_t mask,vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_tum(mask,merge,base,31);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_tum(vbool2_t mask,vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_tum(mask,merge,base,31);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_tum(vbool1_t mask,vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_tum(mask,merge,base,31);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_tum(mask,merge,base,31);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_tum(mask,merge,base,31);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_tum(mask,merge,base,31);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_tum(vbool8_t mask,vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_tum(mask,merge,base,31);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_tum(vbool4_t mask,vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_tum(mask,merge,base,31);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_tum(vbool2_t mask,vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_tum(mask,merge,base,31);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_tum(vbool1_t mask,vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_tum(mask,merge,base,31);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_tum(mask,merge,base,31);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_tum(mask,merge,base,31);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_tum(vbool16_t mask,vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_tum(mask,merge,base,31);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_tum(vbool8_t mask,vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_tum(mask,merge,base,31);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_tum(vbool4_t mask,vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_tum(mask,merge,base,31);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_tum(vbool2_t mask,vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_tum(mask,merge,base,31);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_tum(mask,merge,base,31);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_tum(mask,merge,base,31);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_tum(vbool16_t mask,vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_tum(mask,merge,base,31);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_tum(vbool8_t mask,vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_tum(mask,merge,base,31);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_tum(vbool4_t mask,vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_tum(mask,merge,base,31);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_tum(vbool2_t mask,vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_tum(mask,merge,base,31);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_tum(mask,merge,base,31);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_tum(vbool32_t mask,vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_tum(mask,merge,base,31);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_tum(vbool16_t mask,vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_tum(mask,merge,base,31);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_tum(vbool8_t mask,vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_tum(mask,merge,base,31);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_tum(vbool4_t mask,vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_tum(mask,merge,base,31);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_tum(mask,merge,base,31);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_tum(vbool32_t mask,vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_tum(mask,merge,base,31);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_tum(vbool16_t mask,vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_tum(mask,merge,base,31);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_tum(vbool8_t mask,vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_tum(mask,merge,base,31);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_tum(vbool4_t mask,vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_tum(mask,merge,base,31);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_tum(vbool64_t mask,vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_tum(mask,merge,base,31);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_tum(vbool32_t mask,vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_tum(mask,merge,base,31);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_tum(vbool16_t mask,vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_tum(mask,merge,base,31);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_tum(vbool8_t mask,vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_tum(mask,merge,base,31);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_tum(vbool4_t mask,vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_tum(mask,merge,base,31);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_tum(vbool64_t mask,vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_tum(mask,merge,base,31);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_tum(vbool32_t mask,vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_tum(mask,merge,base,31);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_tum(vbool16_t mask,vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_tum(mask,merge,base,31);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_tum(vbool8_t mask,vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_tum(mask,merge,base,31);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_tum(vbool64_t mask,vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_tum(mask,merge,base,31);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_tum(vbool32_t mask,vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_tum(mask,merge,base,31);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_tum(vbool16_t mask,vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_tum(mask,merge,base,31);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_tum(vbool8_t mask,vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_tum(mask,merge,base,31);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_tum(vbool64_t mask,vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_tum(mask,merge,base,31);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_tum(vbool32_t mask,vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_tum(mask,merge,base,31);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_tum(vbool16_t mask,vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_tum(mask,merge,base,31);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_tum(vbool8_t mask,vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_tum(mask,merge,base,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "0a9fc78a0026cf900612f598dd82daf7bd1c2b1d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_tum-3.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tum-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tum-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tum-3.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_tum(vbool64_t mask,vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_tum(mask,merge,base,32);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_tum(vbool32_t mask,vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_tum(mask,merge,base,32);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_tum(vbool16_t mask,vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_tum(mask,merge,base,32);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_tum(vbool8_t mask,vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_tum(mask,merge,base,32);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_tum(vbool4_t mask,vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_tum(mask,merge,base,32);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_tum(vbool2_t mask,vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_tum(mask,merge,base,32);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_tum(vbool1_t mask,vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_tum(mask,merge,base,32);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_tum(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_tum(mask,merge,base,32);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_tum(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_tum(mask,merge,base,32);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_tum(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_tum(mask,merge,base,32);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_tum(vbool8_t mask,vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_tum(mask,merge,base,32);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_tum(vbool4_t mask,vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_tum(mask,merge,base,32);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_tum(vbool2_t mask,vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_tum(mask,merge,base,32);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_tum(vbool1_t mask,vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_tum(mask,merge,base,32);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_tum(vbool64_t mask,vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_tum(mask,merge,base,32);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_tum(vbool32_t mask,vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_tum(mask,merge,base,32);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_tum(vbool16_t mask,vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_tum(mask,merge,base,32);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_tum(vbool8_t mask,vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_tum(mask,merge,base,32);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_tum(vbool4_t mask,vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_tum(mask,merge,base,32);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_tum(vbool2_t mask,vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_tum(mask,merge,base,32);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_tum(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_tum(mask,merge,base,32);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_tum(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_tum(mask,merge,base,32);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_tum(vbool16_t mask,vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_tum(mask,merge,base,32);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_tum(vbool8_t mask,vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_tum(mask,merge,base,32);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_tum(vbool4_t mask,vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_tum(mask,merge,base,32);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_tum(vbool2_t mask,vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_tum(mask,merge,base,32);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_tum(vbool64_t mask,vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_tum(mask,merge,base,32);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_tum(vbool32_t mask,vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_tum(mask,merge,base,32);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_tum(vbool16_t mask,vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_tum(mask,merge,base,32);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_tum(vbool8_t mask,vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_tum(mask,merge,base,32);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_tum(vbool4_t mask,vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_tum(mask,merge,base,32);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_tum(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_tum(mask,merge,base,32);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_tum(vbool32_t mask,vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_tum(mask,merge,base,32);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_tum(vbool16_t mask,vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_tum(mask,merge,base,32);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_tum(vbool8_t mask,vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_tum(mask,merge,base,32);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_tum(vbool4_t mask,vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_tum(mask,merge,base,32);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_tum(vbool64_t mask,vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_tum(mask,merge,base,32);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_tum(vbool32_t mask,vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_tum(mask,merge,base,32);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_tum(vbool16_t mask,vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_tum(mask,merge,base,32);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_tum(vbool8_t mask,vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_tum(mask,merge,base,32);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_tum(vbool4_t mask,vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_tum(mask,merge,base,32);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_tum(vbool64_t mask,vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_tum(mask,merge,base,32);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_tum(vbool32_t mask,vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_tum(mask,merge,base,32);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_tum(vbool16_t mask,vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_tum(mask,merge,base,32);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_tum(vbool8_t mask,vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_tum(mask,merge,base,32);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_tum(vbool64_t mask,vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_tum(mask,merge,base,32);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_tum(vbool32_t mask,vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_tum(mask,merge,base,32);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_tum(vbool16_t mask,vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_tum(mask,merge,base,32);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_tum(vbool8_t mask,vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_tum(mask,merge,base,32);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_tum(vbool64_t mask,vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_tum(mask,merge,base,32);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_tum(vbool32_t mask,vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_tum(mask,merge,base,32);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_tum(vbool16_t mask,vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_tum(mask,merge,base,32);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_tum(vbool8_t mask,vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_tum(mask,merge,base,32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "b21e18feb292eda62e0d8b1f92b118431fbdda72", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_tumu-1.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tumu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tumu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tumu-1.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_tumu(mask,merge,base,vl);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_tumu(mask,merge,base,vl);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_tumu(mask,merge,base,vl);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_tumu(vbool8_t mask,vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_tumu(mask,merge,base,vl);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_tumu(vbool4_t mask,vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_tumu(mask,merge,base,vl);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_tumu(vbool2_t mask,vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_tumu(mask,merge,base,vl);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_tumu(vbool1_t mask,vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_tumu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_tumu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_tumu(mask,merge,base,vl);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_tumu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_tumu(mask,merge,base,vl);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_tumu(mask,merge,base,vl);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_tumu(mask,merge,base,vl);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_tumu(vbool16_t mask,vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_tumu(mask,merge,base,vl);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_tumu(vbool8_t mask,vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_tumu(mask,merge,base,vl);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_tumu(vbool4_t mask,vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_tumu(mask,merge,base,vl);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_tumu(vbool2_t mask,vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_tumu(mask,merge,base,vl);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_tumu(mask,merge,base,vl);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_tumu(mask,merge,base,vl);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_tumu(mask,merge,base,vl);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_tumu(mask,merge,base,vl);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_tumu(mask,merge,base,vl);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_tumu(mask,merge,base,vl);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_tumu(mask,merge,base,vl);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_tumu(vbool32_t mask,vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_tumu(mask,merge,base,vl);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_tumu(vbool16_t mask,vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_tumu(mask,merge,base,vl);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_tumu(vbool8_t mask,vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_tumu(mask,merge,base,vl);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_tumu(vbool4_t mask,vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_tumu(mask,merge,base,vl);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_tumu(mask,merge,base,vl);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_tumu(mask,merge,base,vl);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_tumu(mask,merge,base,vl);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_tumu(mask,merge,base,vl);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_tumu(vbool64_t mask,vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_tumu(vbool32_t mask,vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_tumu(vbool16_t mask,vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_tumu(vbool8_t mask,vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_tumu(vbool4_t mask,vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_tumu(mask,merge,base,vl);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_tumu(vbool64_t mask,vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_tumu(mask,merge,base,vl);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_tumu(vbool32_t mask,vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_tumu(mask,merge,base,vl);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_tumu(vbool16_t mask,vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_tumu(mask,merge,base,vl);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_tumu(vbool8_t mask,vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_tumu(mask,merge,base,vl);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_tumu(mask,merge,base,vl);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_tumu(mask,merge,base,vl);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_tumu(mask,merge,base,vl);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_tumu(vbool64_t mask,vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_tumu(vbool32_t mask,vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_tumu(vbool16_t mask,vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_tumu(mask,merge,base,vl);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_tumu(vbool8_t mask,vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_tumu(mask,merge,base,vl);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "d2df6c47e5b84e9e6a027ef2c416fa32f9e272a2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_tumu-2.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tumu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tumu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tumu-2.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_tumu(mask,merge,base,31);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_tumu(mask,merge,base,31);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_tumu(mask,merge,base,31);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_tumu(vbool8_t mask,vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_tumu(mask,merge,base,31);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_tumu(vbool4_t mask,vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_tumu(mask,merge,base,31);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_tumu(vbool2_t mask,vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_tumu(mask,merge,base,31);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_tumu(vbool1_t mask,vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_tumu(mask,merge,base,31);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_tumu(mask,merge,base,31);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_tumu(mask,merge,base,31);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_tumu(mask,merge,base,31);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_tumu(mask,merge,base,31);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_tumu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_tumu(mask,merge,base,31);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_tumu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_tumu(mask,merge,base,31);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_tumu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_tumu(mask,merge,base,31);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_tumu(mask,merge,base,31);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_tumu(mask,merge,base,31);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_tumu(vbool16_t mask,vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_tumu(mask,merge,base,31);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_tumu(vbool8_t mask,vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_tumu(mask,merge,base,31);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_tumu(vbool4_t mask,vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_tumu(mask,merge,base,31);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_tumu(vbool2_t mask,vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_tumu(mask,merge,base,31);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_tumu(mask,merge,base,31);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_tumu(mask,merge,base,31);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_tumu(mask,merge,base,31);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_tumu(mask,merge,base,31);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_tumu(mask,merge,base,31);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_tumu(mask,merge,base,31);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_tumu(mask,merge,base,31);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_tumu(vbool32_t mask,vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_tumu(mask,merge,base,31);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_tumu(vbool16_t mask,vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_tumu(mask,merge,base,31);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_tumu(vbool8_t mask,vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_tumu(mask,merge,base,31);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_tumu(vbool4_t mask,vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_tumu(mask,merge,base,31);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_tumu(mask,merge,base,31);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_tumu(mask,merge,base,31);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_tumu(mask,merge,base,31);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_tumu(mask,merge,base,31);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_tumu(mask,merge,base,31);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_tumu(vbool64_t mask,vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_tumu(mask,merge,base,31);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_tumu(vbool32_t mask,vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_tumu(mask,merge,base,31);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_tumu(vbool16_t mask,vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_tumu(mask,merge,base,31);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_tumu(vbool8_t mask,vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_tumu(mask,merge,base,31);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_tumu(vbool4_t mask,vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_tumu(mask,merge,base,31);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_tumu(vbool64_t mask,vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_tumu(mask,merge,base,31);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_tumu(vbool32_t mask,vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_tumu(mask,merge,base,31);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_tumu(vbool16_t mask,vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_tumu(mask,merge,base,31);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_tumu(vbool8_t mask,vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_tumu(mask,merge,base,31);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_tumu(mask,merge,base,31);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_tumu(mask,merge,base,31);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_tumu(mask,merge,base,31);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_tumu(mask,merge,base,31);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_tumu(vbool64_t mask,vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_tumu(mask,merge,base,31);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_tumu(vbool32_t mask,vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_tumu(mask,merge,base,31);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_tumu(vbool16_t mask,vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_tumu(mask,merge,base,31);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_tumu(vbool8_t mask,vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_tumu(mask,merge,base,31);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}, {"sha": "828a573975950e08cc7d94526b6fa489b7ffe0de", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vle_tumu-3.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tumu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931a042f7e6c3ee0741cf4365b15f4e27d364209/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tumu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvle_tumu-3.c?ref=931a042f7e6c3ee0741cf4365b15f4e27d364209", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t\n+test___riscv_vle8_v_i8mf8_tumu(vbool64_t mask,vint8mf8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf8_tumu(mask,merge,base,32);\n+}\n+\n+vint8mf4_t\n+test___riscv_vle8_v_i8mf4_tumu(vbool32_t mask,vint8mf4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf4_tumu(mask,merge,base,32);\n+}\n+\n+vint8mf2_t\n+test___riscv_vle8_v_i8mf2_tumu(vbool16_t mask,vint8mf2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8mf2_tumu(mask,merge,base,32);\n+}\n+\n+vint8m1_t\n+test___riscv_vle8_v_i8m1_tumu(vbool8_t mask,vint8m1_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m1_tumu(mask,merge,base,32);\n+}\n+\n+vint8m2_t\n+test___riscv_vle8_v_i8m2_tumu(vbool4_t mask,vint8m2_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m2_tumu(mask,merge,base,32);\n+}\n+\n+vint8m4_t\n+test___riscv_vle8_v_i8m4_tumu(vbool2_t mask,vint8m4_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m4_tumu(mask,merge,base,32);\n+}\n+\n+vint8m8_t\n+test___riscv_vle8_v_i8m8_tumu(vbool1_t mask,vint8m8_t merge,int8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_i8m8_tumu(mask,merge,base,32);\n+}\n+\n+vuint8mf8_t\n+test___riscv_vle8_v_u8mf8_tumu(vbool64_t mask,vuint8mf8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf8_tumu(mask,merge,base,32);\n+}\n+\n+vuint8mf4_t\n+test___riscv_vle8_v_u8mf4_tumu(vbool32_t mask,vuint8mf4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf4_tumu(mask,merge,base,32);\n+}\n+\n+vuint8mf2_t\n+test___riscv_vle8_v_u8mf2_tumu(vbool16_t mask,vuint8mf2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8mf2_tumu(mask,merge,base,32);\n+}\n+\n+vuint8m1_t\n+test___riscv_vle8_v_u8m1_tumu(vbool8_t mask,vuint8m1_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m1_tumu(mask,merge,base,32);\n+}\n+\n+vuint8m2_t\n+test___riscv_vle8_v_u8m2_tumu(vbool4_t mask,vuint8m2_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m2_tumu(mask,merge,base,32);\n+}\n+\n+vuint8m4_t\n+test___riscv_vle8_v_u8m4_tumu(vbool2_t mask,vuint8m4_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m4_tumu(mask,merge,base,32);\n+}\n+\n+vuint8m8_t\n+test___riscv_vle8_v_u8m8_tumu(vbool1_t mask,vuint8m8_t merge,uint8_t* base,size_t vl)\n+{\n+  return __riscv_vle8_v_u8m8_tumu(mask,merge,base,32);\n+}\n+\n+vint16mf4_t\n+test___riscv_vle16_v_i16mf4_tumu(vbool64_t mask,vint16mf4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf4_tumu(mask,merge,base,32);\n+}\n+\n+vint16mf2_t\n+test___riscv_vle16_v_i16mf2_tumu(vbool32_t mask,vint16mf2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16mf2_tumu(mask,merge,base,32);\n+}\n+\n+vint16m1_t\n+test___riscv_vle16_v_i16m1_tumu(vbool16_t mask,vint16m1_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m1_tumu(mask,merge,base,32);\n+}\n+\n+vint16m2_t\n+test___riscv_vle16_v_i16m2_tumu(vbool8_t mask,vint16m2_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m2_tumu(mask,merge,base,32);\n+}\n+\n+vint16m4_t\n+test___riscv_vle16_v_i16m4_tumu(vbool4_t mask,vint16m4_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m4_tumu(mask,merge,base,32);\n+}\n+\n+vint16m8_t\n+test___riscv_vle16_v_i16m8_tumu(vbool2_t mask,vint16m8_t merge,int16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_i16m8_tumu(mask,merge,base,32);\n+}\n+\n+vuint16mf4_t\n+test___riscv_vle16_v_u16mf4_tumu(vbool64_t mask,vuint16mf4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf4_tumu(mask,merge,base,32);\n+}\n+\n+vuint16mf2_t\n+test___riscv_vle16_v_u16mf2_tumu(vbool32_t mask,vuint16mf2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16mf2_tumu(mask,merge,base,32);\n+}\n+\n+vuint16m1_t\n+test___riscv_vle16_v_u16m1_tumu(vbool16_t mask,vuint16m1_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m1_tumu(mask,merge,base,32);\n+}\n+\n+vuint16m2_t\n+test___riscv_vle16_v_u16m2_tumu(vbool8_t mask,vuint16m2_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m2_tumu(mask,merge,base,32);\n+}\n+\n+vuint16m4_t\n+test___riscv_vle16_v_u16m4_tumu(vbool4_t mask,vuint16m4_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m4_tumu(mask,merge,base,32);\n+}\n+\n+vuint16m8_t\n+test___riscv_vle16_v_u16m8_tumu(vbool2_t mask,vuint16m8_t merge,uint16_t* base,size_t vl)\n+{\n+  return __riscv_vle16_v_u16m8_tumu(mask,merge,base,32);\n+}\n+\n+vint32mf2_t\n+test___riscv_vle32_v_i32mf2_tumu(vbool64_t mask,vint32mf2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32mf2_tumu(mask,merge,base,32);\n+}\n+\n+vint32m1_t\n+test___riscv_vle32_v_i32m1_tumu(vbool32_t mask,vint32m1_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m1_tumu(mask,merge,base,32);\n+}\n+\n+vint32m2_t\n+test___riscv_vle32_v_i32m2_tumu(vbool16_t mask,vint32m2_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m2_tumu(mask,merge,base,32);\n+}\n+\n+vint32m4_t\n+test___riscv_vle32_v_i32m4_tumu(vbool8_t mask,vint32m4_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m4_tumu(mask,merge,base,32);\n+}\n+\n+vint32m8_t\n+test___riscv_vle32_v_i32m8_tumu(vbool4_t mask,vint32m8_t merge,int32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_i32m8_tumu(mask,merge,base,32);\n+}\n+\n+vuint32mf2_t\n+test___riscv_vle32_v_u32mf2_tumu(vbool64_t mask,vuint32mf2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32mf2_tumu(mask,merge,base,32);\n+}\n+\n+vuint32m1_t\n+test___riscv_vle32_v_u32m1_tumu(vbool32_t mask,vuint32m1_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m1_tumu(mask,merge,base,32);\n+}\n+\n+vuint32m2_t\n+test___riscv_vle32_v_u32m2_tumu(vbool16_t mask,vuint32m2_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m2_tumu(mask,merge,base,32);\n+}\n+\n+vuint32m4_t\n+test___riscv_vle32_v_u32m4_tumu(vbool8_t mask,vuint32m4_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m4_tumu(mask,merge,base,32);\n+}\n+\n+vuint32m8_t\n+test___riscv_vle32_v_u32m8_tumu(vbool4_t mask,vuint32m8_t merge,uint32_t* base,size_t vl)\n+{\n+  return __riscv_vle32_v_u32m8_tumu(mask,merge,base,32);\n+}\n+\n+vfloat32mf2_t\n+test___riscv_vle32_v_f32mf2_tumu(vbool64_t mask,vfloat32mf2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32mf2_tumu(mask,merge,base,32);\n+}\n+\n+vfloat32m1_t\n+test___riscv_vle32_v_f32m1_tumu(vbool32_t mask,vfloat32m1_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m1_tumu(mask,merge,base,32);\n+}\n+\n+vfloat32m2_t\n+test___riscv_vle32_v_f32m2_tumu(vbool16_t mask,vfloat32m2_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m2_tumu(mask,merge,base,32);\n+}\n+\n+vfloat32m4_t\n+test___riscv_vle32_v_f32m4_tumu(vbool8_t mask,vfloat32m4_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m4_tumu(mask,merge,base,32);\n+}\n+\n+vfloat32m8_t\n+test___riscv_vle32_v_f32m8_tumu(vbool4_t mask,vfloat32m8_t merge,float* base,size_t vl)\n+{\n+  return __riscv_vle32_v_f32m8_tumu(mask,merge,base,32);\n+}\n+\n+vint64m1_t\n+test___riscv_vle64_v_i64m1_tumu(vbool64_t mask,vint64m1_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m1_tumu(mask,merge,base,32);\n+}\n+\n+vint64m2_t\n+test___riscv_vle64_v_i64m2_tumu(vbool32_t mask,vint64m2_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m2_tumu(mask,merge,base,32);\n+}\n+\n+vint64m4_t\n+test___riscv_vle64_v_i64m4_tumu(vbool16_t mask,vint64m4_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m4_tumu(mask,merge,base,32);\n+}\n+\n+vint64m8_t\n+test___riscv_vle64_v_i64m8_tumu(vbool8_t mask,vint64m8_t merge,int64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_i64m8_tumu(mask,merge,base,32);\n+}\n+\n+vuint64m1_t\n+test___riscv_vle64_v_u64m1_tumu(vbool64_t mask,vuint64m1_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m1_tumu(mask,merge,base,32);\n+}\n+\n+vuint64m2_t\n+test___riscv_vle64_v_u64m2_tumu(vbool32_t mask,vuint64m2_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m2_tumu(mask,merge,base,32);\n+}\n+\n+vuint64m4_t\n+test___riscv_vle64_v_u64m4_tumu(vbool16_t mask,vuint64m4_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m4_tumu(mask,merge,base,32);\n+}\n+\n+vuint64m8_t\n+test___riscv_vle64_v_u64m8_tumu(vbool8_t mask,vuint64m8_t merge,uint64_t* base,size_t vl)\n+{\n+  return __riscv_vle64_v_u64m8_tumu(mask,merge,base,32);\n+}\n+\n+vfloat64m1_t\n+test___riscv_vle64_v_f64m1_tumu(vbool64_t mask,vfloat64m1_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m1_tumu(mask,merge,base,32);\n+}\n+\n+vfloat64m2_t\n+test___riscv_vle64_v_f64m2_tumu(vbool32_t mask,vfloat64m2_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m2_tumu(mask,merge,base,32);\n+}\n+\n+vfloat64m4_t\n+test___riscv_vle64_v_f64m4_tumu(vbool16_t mask,vfloat64m4_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m4_tumu(mask,merge,base,32);\n+}\n+\n+vfloat64m8_t\n+test___riscv_vle64_v_f64m8_tumu(vbool8_t mask,vfloat64m8_t merge,double* base,size_t vl)\n+{\n+  return __riscv_vle64_v_f64m8_tumu(mask,merge,base,32);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vle16\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vle64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*v0.t} 3 } } */"}]}