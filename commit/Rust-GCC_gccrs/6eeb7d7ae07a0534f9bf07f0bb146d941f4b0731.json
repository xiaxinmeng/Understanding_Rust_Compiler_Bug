{"sha": "6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVlYjdkN2FlMDdhMDUzNGY5YmYwN2YwYmIxNDZkOTQxZjRiMDczMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-11-11T23:18:05Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-11-11T23:18:05Z"}, "message": "re PR libstdc++/6746 (ifstream::readsome() always returns zero)\n\n\n2002-11-11  Benjamin Kosnik  <bkoz@redhat.com>\n\n        PR libstdc++/6746\n        * include/bits/fstream.tcc (filebuf::open): Set input pointers.\n\t* config/io/basic_file_stdio.cc (__basic_file::_M_open_mode): Set\n\t__p_mode as well.\n\t(__basic_file::open): Set to non-block for input.\n\t* testsuite/27_io/istream_unformatted.cc (test12): Add.\n\t(test13): Same.\n\nFrom-SVN: r59030", "tree": {"sha": "b453888a589082dd78db7efe37b82197810bdf37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b453888a589082dd78db7efe37b82197810bdf37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731/comments", "author": null, "committer": null, "parents": [{"sha": "90e76e864a228ac5cb306aa33f5716913fab061a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e76e864a228ac5cb306aa33f5716913fab061a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e76e864a228ac5cb306aa33f5716913fab061a"}], "stats": {"total": 116, "additions": 107, "deletions": 9}, "files": [{"sha": "7cf481b7353bdd15378fa69514bf47c4abb46dfa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731", "patch": "@@ -1,3 +1,13 @@\n+2002-11-11  Benjamin Kosnik  <bkoz@redhat.com>\n+ \n+        PR libstdc++/6746\n+        * include/bits/fstream.tcc (filebuf::open): Set input pointers.\n+\t* config/io/basic_file_stdio.cc (__basic_file::_M_open_mode): Set\n+\t__p_mode as well.\n+\t(__basic_file::open): Set to non-block for input.\n+\t* testsuite/27_io/istream_unformatted.cc (test12): Add.\n+\t(test13): Same.\n+\t\n 2002-11-11  Jonathan Wakely <redi@gcc.gnu.org>\n \n \t* docs/html/17_intro/howto.html: Make \"chapter 22 notes\" a link."}, {"sha": "ff23d983ae848b56e9a7977ef7aeeb2edaeb71c6", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731", "patch": "@@ -32,6 +32,7 @@\n //\n \n #include <bits/basic_file.h>\n+#include <fcntl.h>\n \n namespace std \n {\n@@ -43,27 +44,48 @@ namespace std\n   { this->close(); }\n       \n   void \n-  __basic_file<char>::_M_open_mode(ios_base::openmode __mode, int&, int&, \n-\t\t\t\t   char* __c_mode)\n+  __basic_file<char>::_M_open_mode(ios_base::openmode __mode, int& __p_mode, \n+\t\t\t\t   int&, char* __c_mode)\n   {  \n     bool __testb = __mode & ios_base::binary;\n     bool __testi = __mode & ios_base::in;\n     bool __testo = __mode & ios_base::out;\n     bool __testt = __mode & ios_base::trunc;\n     bool __testa = __mode & ios_base::app;\n       \n+    // Set __c_mode for use in fopen.\n+    // Set __p_mode for use in open.\n     if (!__testi && __testo && !__testt && !__testa)\n-      strcpy(__c_mode, \"w\");\n+      {\n+\tstrcpy(__c_mode, \"w\");\n+\t__p_mode = (O_WRONLY | O_CREAT);\n+      }\n     if (!__testi && __testo && !__testt && __testa)\n-      strcpy(__c_mode, \"a\");\n+      {\n+\tstrcpy(__c_mode, \"a\");\n+\t__p_mode |=  O_WRONLY | O_CREAT | O_APPEND;\n+      }\n     if (!__testi && __testo && __testt && !__testa)\n-      strcpy(__c_mode, \"w\");\n+      {\n+\tstrcpy(__c_mode, \"w\");\n+\t__p_mode |=  O_WRONLY | O_CREAT | O_TRUNC;\n+      }\n+\n     if (__testi && !__testo && !__testt && !__testa)\n-      strcpy(__c_mode, \"r\");\n+      {\n+\tstrcpy(__c_mode, \"r\");\n+\t__p_mode |=  O_RDONLY | O_NONBLOCK;\n+      }\n     if (__testi && __testo && !__testt && !__testa)\n-      strcpy(__c_mode, \"r+\");\n+      {\n+\tstrcpy(__c_mode, \"r+\");\n+\t__p_mode |=  O_RDWR | O_CREAT;\n+      }\n     if (__testi && __testo && __testt && !__testa)\n-      strcpy(__c_mode, \"w+\");\n+      {\n+\tstrcpy(__c_mode, \"w+\");\n+\t__p_mode |=  O_RDWR | O_CREAT | O_TRUNC;\n+      }\n     if (__testb)\n       strcat(__c_mode, \"b\");\n   }\n@@ -128,6 +150,11 @@ namespace std\n \tif ((_M_cfile = fopen(__name, __c_mode)))\n \t  {\n \t    _M_cfile_created = true;\n+\n+\t    // Set input to nonblocking for fifos.\n+\t    if (__mode & ios_base::in)\n+\t      fcntl(this->fd(), F_SETFL, O_NONBLOCK);\n+\n \t    __ret = this;\n \t  }\n       }"}, {"sha": "387f099ae983d0c7319a412a4edc7f651ac1f6fc", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731", "patch": "@@ -90,11 +90,21 @@ namespace std\n \t    {\n \t      _M_allocate_internal_buffer();\n \t      _M_mode = __mode;\n+\n+\t      // Setup initial position of buffer.\n \t      _M_set_indeterminate();\n \n+\t      // Set input buffer to something real.\n+\t      // NB: Must open in non-blocking way to do this, or must\n+\t      // set the initial position in a different manner than\n+\t      // using underflow.\n+ \t      if (__mode & ios_base::in && _M_buf_allocated)\n+ \t\tthis->underflow();\n+\t      \n \t      if ((__mode & ios_base::ate)\n \t\t  && this->seekoff(0, ios_base::end, __mode) < 0)\n \t\tthis->close();\n+\n \t      __ret = this;\n \t    }\n \t}"}, {"sha": "e7676ecb370e35df60c7ef304917ae9a238147e7", "filename": "libstdc++-v3/testsuite/27_io/istream_unformatted.cc", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc?ref=6eeb7d7ae07a0534f9bf07f0bb146d941f4b0731", "patch": "@@ -569,7 +569,54 @@ void test11()\n   VERIFY(istr.rdstate() == ios_base::goodbit);\n }\n \n-\n+// libstdc++/6746   \n+void test12()\n+{\n+  using namespace std;\n+  bool test = true;\n+  streamsize sum = 0;\n+  istringstream iss(\"shamma shamma\");\n+      \n+  // test01\n+  size_t i = iss.rdbuf()->in_avail();\n+  VERIFY( i != 0 );\n+    \n+  // test02\n+  streamsize extracted;\n+  do\n+    {\n+      char buf[1024];\n+      extracted = iss.readsome(buf, sizeof buf);\n+      sum += extracted;\n+    }\n+  while (iss.good() && extracted);\n+  VERIFY( sum != 0 );  \n+}\n+    \n+// libstdc++/6746   \n+void test13()\n+{\n+  using namespace std;\n+  bool test = true;\n+  streamsize sum = 0;\n+  ifstream ifs(\"istream_unformatted-1.tst\");\n+      \n+  // test01\n+  size_t i = ifs.rdbuf()->in_avail();\n+  VERIFY( i != 0 );\n+    \n+  // test02\n+  streamsize extracted;\n+  do\n+    {\n+      char buf[1024];\n+      extracted = ifs.readsome(buf, sizeof buf);\n+      sum += extracted;\n+    }\n+  while (ifs.good() && extracted);\n+  VERIFY( sum != 0 );  \n+}\n+ \n int \n main()\n {\n@@ -584,5 +631,9 @@ main()\n   test09();\n   test10();\n   test11();\n+\n+  test12();\n+  test13();\n+\n   return 0;\n }"}]}