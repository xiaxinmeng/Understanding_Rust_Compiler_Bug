{"sha": "f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhNThkOTI4YjE0ZTc0ZmE1NGY4YmU5YzEyZGNjOWRkODcxYjA3Mw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-05-28T22:26:43Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-05-28T22:26:43Z"}, "message": "config/sh reorganization to factor out endianness and coff:\n\n\t* config/sh/little.h: New file.\n        * config/sh/sh.h (TARGET_ENDIAN_DEFAULT): If not already\n        defined, define to 0 to select big-endian.\n\t(SUBTARGET_ASM_ENDIAN_SPEC): Define according to TARGET_ENDIAN_DEFAULT.\n        (TARGET_DEFAULT): Include TARGET_ENDIAN_DEFAULT.\n        * config/sh/sh64.h (TARGET_DEFAULT): Include TARGET_ENDIAN_DEFAULT.\n        * config/sh/t-be: New file.\n        * config/sh/t-le: New file.\n\n\t* sh.h (SDB_DEBUGGING_INFO, #include \"dbxcoff.h\"): Moved to sh/coff.h.\n\t(SDB_DELIM, MAX_OFILE_ALIGNMENT, IDENT_ASM_OP): Likewise.\n\t(TARGET_ASM_NAMED_SECTION, ASM_OUTPUT_SKIP): Likewise.\n\t(USER_LABEL_PREFIX, LOCAL_LABEL_PREFIX): Likewise.\n\t(ASM_GENERATE_INTERNAL_LABEL, ASM_OUTPUT_INTERNAL_LABEL): Likewise.\n\t(ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL): Likewise.\n\t(ASM_FILE_END, ASM_DECLARE_FUNCTION_NAME): Deleted.\n\t(CPP_SPEC, SUBTARGET_CPP_ENDIAN_SPEC): Likewise.\n\t(SUBTARGET_CPP_SPEC, CPP_DEFAULT_CPU_SPEC, CPP_PREDEFINES): Likewise.\n\t(EXTRA_SPECS): Remove SUBTARGET_CPP_ENDIAN_SPEC and\n\tCPP_DEFAULT_CPU_SPEC.  Add LINK_EMUL_PREFIX, LINK_DEFAULT_CPU_EMUL,\n\tSUBTARGET_LINK_EMUL_SUFFIX and SUBTARGET_LINK_SPEC.\n\t(LINK_SPEC): Define to SH_LINK_SPEC.\n\t(TARGET_CPU_CPP_BUILTINS, SH_LINK_SPEC): Define.\n\t(LINK_EMUL_PREFIX, LINK_DEFAULT_CPU_EMUL): Likewise.\n\t(SUBTARGET_LINK_EMUL_SUFFIX, SUBTARGET_LINK_SPEC): Likewise.\n\t(CPP_SPEC): Reduce to %(subtarget_cpp_spec).\n\t(TARGET_ENDIAN_DEFAULT): Define if not already defined.\n\t* config/sh/coff.h: New file.\n\t(TARGET_ASM_NAMED_SECTION): Now default_coff_asm_named_section\n\t(TARGET_OBJFMT_CPP_BUILTINS): Define.\n\t* config/sh/elf.h (IDENT_ASM_OP): No need to #undef at the start.\n\t(ASM_FILE_END, ASM_OUTPUT_SOURCE_LINE): Likewise.\n\t(DBX_OUTPUT_MAIN_SOURCE_FILE_END, TARGET_ASM_NAMED_SECTION): Likewise.\n\t(ASM_DECLARE_FUNCTION_NAME, MAX_OFILE_ALIGNMENT, SIZE_TYPE): Likewise.\n\t(PTRDIFF_TYPE): Likewise.\n\t(\"dbxelf.h\", \"elfos.h\", \"svr4.h\"): Don't #include.\n\t(CPP_PREDEFINES): Don't define.\n\t(TARGET_OBJFMT_CPP_BUILTINS): Define.\n\t(LINK_SPEC): Define to SH_LINK_SPEC.\n\t(LINK_EMUL_PREFIX): Redefine.\n\t* config/sh/linux.h: (SUBTARGET_CPP_SPEC): Remove -fpic / -fPIC cases.\n\t(SUBTARGET_CPP_ENDIAN_SPEC, CPP_DEFAULT_CPU_SPEC): Remove redefinition.\n\t(CPP_PREDEFINES, SUBTARGET_ASM_ENDIAN_SPEC): Likewise.\n\t(CC1_SPEC, CC1PLUS_SPEC, LINK_SPEC): Likewise.\n\t(TARGET_OS_CPP_BUILTINS): Define.\n\t(TARGET_DEFAULT): Redefine.\n\t(SUBTARGET_LINK_EMUL_SUFFIX, SUBTARGET_LINK_SPEC): Likewise.\n\t* config/sh/sh64.h (CPP_DEFAULT_CPU_SPEC): Remove.\n\t(LINK_SPEC): Don't redefine.\n\t(LINK_DEFAULT_CPU_EMUL): Redefine.\n\t(TARGET_DEFAULT): Include TARGET_ENDIAN_DEFAULT.\n\t* sh.c (sh_asm_named_section): Don't declare / define.\n\t* t-linux (MULTILIB_OPTIONS): Rely on pre-set endianness option.\n\t* config.gcc (sh-*-elf* tm_file): Add dbxelf.h elfos.h svr4.h.\n\t(sh64-*-elf* tm_file): Likewise.\n\t(sh-*-rtemself* tm_file): Likewise.\n\t(sh-*-linux* tm_file): Likewise.  Add sh/little.h.\n\t(sh-*-linux* tmake_file): Add sh/t-le.\n\t(sh-*-rtems* tm_file): Add sh/coff.h\n\t(sh-*-* tm_file): Likewise.\n\n\n\t* sh.h (LEGITIMATE_PIC_OPERAND_P): Check for SYMBOL_REF before using\n\tCONSTANT_POOL_ADDRESS_P.\n\n\t* coff.h (HAS_INIT_SECTION, INVOKE__MAIN): Define.\n\nCo-Authored-By: Jason R. Thorpe <thorpej@wasabisystems.com>\n\nFrom-SVN: r53974", "tree": {"sha": "95441ed67a475ab09040e20e78a2917ba238f8fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95441ed67a475ab09040e20e78a2917ba238f8fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/comments", "author": null, "committer": null, "parents": [{"sha": "33a3dfc4f0102fecfc42ef983d3fb3a61f05ec07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33a3dfc4f0102fecfc42ef983d3fb3a61f05ec07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33a3dfc4f0102fecfc42ef983d3fb3a61f05ec07"}], "stats": {"total": 532, "additions": 321, "deletions": 211}, "files": [{"sha": "601fef8a84d7388642c040eb47642c733d319d83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "patch": "@@ -1,3 +1,76 @@\n+Tue May 28 21:16:18 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+                          Jason R. Thorpe <thorpej@wasabisystems.com>\n+\n+\tconfig/sh reorganization to factor out endianness and coff:\n+\n+\t* config/sh/little.h: New file.\n+        * config/sh/sh.h (TARGET_ENDIAN_DEFAULT): If not already\n+        defined, define to 0 to select big-endian.\n+\t(SUBTARGET_ASM_ENDIAN_SPEC): Define according to TARGET_ENDIAN_DEFAULT.\n+        (TARGET_DEFAULT): Include TARGET_ENDIAN_DEFAULT.\n+        * config/sh/sh64.h (TARGET_DEFAULT): Include TARGET_ENDIAN_DEFAULT.\n+        * config/sh/t-be: New file.\n+        * config/sh/t-le: New file.\n+\n+\t* sh.h (SDB_DEBUGGING_INFO, #include \"dbxcoff.h\"): Moved to sh/coff.h.\n+\t(SDB_DELIM, MAX_OFILE_ALIGNMENT, IDENT_ASM_OP): Likewise.\n+\t(TARGET_ASM_NAMED_SECTION, ASM_OUTPUT_SKIP): Likewise.\n+\t(USER_LABEL_PREFIX, LOCAL_LABEL_PREFIX): Likewise.\n+\t(ASM_GENERATE_INTERNAL_LABEL, ASM_OUTPUT_INTERNAL_LABEL): Likewise.\n+\t(ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL): Likewise.\n+\t(ASM_FILE_END, ASM_DECLARE_FUNCTION_NAME): Deleted.\n+\t(CPP_SPEC, SUBTARGET_CPP_ENDIAN_SPEC): Likewise.\n+\t(SUBTARGET_CPP_SPEC, CPP_DEFAULT_CPU_SPEC, CPP_PREDEFINES): Likewise.\n+\t(EXTRA_SPECS): Remove SUBTARGET_CPP_ENDIAN_SPEC and\n+\tCPP_DEFAULT_CPU_SPEC.  Add LINK_EMUL_PREFIX, LINK_DEFAULT_CPU_EMUL,\n+\tSUBTARGET_LINK_EMUL_SUFFIX and SUBTARGET_LINK_SPEC.\n+\t(LINK_SPEC): Define to SH_LINK_SPEC.\n+\t(TARGET_CPU_CPP_BUILTINS, SH_LINK_SPEC): Define.\n+\t(LINK_EMUL_PREFIX, LINK_DEFAULT_CPU_EMUL): Likewise.\n+\t(SUBTARGET_LINK_EMUL_SUFFIX, SUBTARGET_LINK_SPEC): Likewise.\n+\t(CPP_SPEC): Reduce to %(subtarget_cpp_spec).\n+\t(TARGET_ENDIAN_DEFAULT): Define if not already defined.\n+\t* config/sh/coff.h: New file.\n+\t(TARGET_ASM_NAMED_SECTION): Now default_coff_asm_named_section\n+\t(TARGET_OBJFMT_CPP_BUILTINS): Define.\n+\t* config/sh/elf.h (IDENT_ASM_OP): No need to #undef at the start.\n+\t(ASM_FILE_END, ASM_OUTPUT_SOURCE_LINE): Likewise.\n+\t(DBX_OUTPUT_MAIN_SOURCE_FILE_END, TARGET_ASM_NAMED_SECTION): Likewise.\n+\t(ASM_DECLARE_FUNCTION_NAME, MAX_OFILE_ALIGNMENT, SIZE_TYPE): Likewise.\n+\t(PTRDIFF_TYPE): Likewise.\n+\t(\"dbxelf.h\", \"elfos.h\", \"svr4.h\"): Don't #include.\n+\t(CPP_PREDEFINES): Don't define.\n+\t(TARGET_OBJFMT_CPP_BUILTINS): Define.\n+\t(LINK_SPEC): Define to SH_LINK_SPEC.\n+\t(LINK_EMUL_PREFIX): Redefine.\n+\t* config/sh/linux.h: (SUBTARGET_CPP_SPEC): Remove -fpic / -fPIC cases.\n+\t(SUBTARGET_CPP_ENDIAN_SPEC, CPP_DEFAULT_CPU_SPEC): Remove redefinition.\n+\t(CPP_PREDEFINES, SUBTARGET_ASM_ENDIAN_SPEC): Likewise.\n+\t(CC1_SPEC, CC1PLUS_SPEC, LINK_SPEC): Likewise.\n+\t(TARGET_OS_CPP_BUILTINS): Define.\n+\t(TARGET_DEFAULT): Redefine.\n+\t(SUBTARGET_LINK_EMUL_SUFFIX, SUBTARGET_LINK_SPEC): Likewise.\n+\t* config/sh/sh64.h (CPP_DEFAULT_CPU_SPEC): Remove.\n+\t(LINK_SPEC): Don't redefine.\n+\t(LINK_DEFAULT_CPU_EMUL): Redefine.\n+\t(TARGET_DEFAULT): Include TARGET_ENDIAN_DEFAULT.\n+\t* sh.c (sh_asm_named_section): Don't declare / define.\n+\t* t-linux (MULTILIB_OPTIONS): Rely on pre-set endianness option.\n+\t* config.gcc (sh-*-elf* tm_file): Add dbxelf.h elfos.h svr4.h.\n+\t(sh64-*-elf* tm_file): Likewise.\n+\t(sh-*-rtemself* tm_file): Likewise.\n+\t(sh-*-linux* tm_file): Likewise.  Add sh/little.h.\n+\t(sh-*-linux* tmake_file): Add sh/t-le.\n+\t(sh-*-rtems* tm_file): Add sh/coff.h\n+\t(sh-*-* tm_file): Likewise.\n+\n+Tue May 28 21:16:18 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.h (LEGITIMATE_PIC_OPERAND_P): Check for SYMBOL_REF before using\n+\tCONSTANT_POOL_ADDRESS_P.\n+\n+\t* coff.h (HAS_INIT_SECTION, INVOKE__MAIN): Define.\n+\n 2002-05-22  David Edelsohn  <edelsohn@gnu.org>\n \t    Jeff Law <law@redhat.com>\n "}, {"sha": "6ba0de6bfdd00d619c9344584df7383d9dd39f95", "filename": "gcc/config.gcc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "patch": "@@ -2207,12 +2207,12 @@ s390x-*-linux*)\n \t;;\n sh-*-elf*)\n \ttmake_file=\"sh/t-sh sh/t-elf\"\n-\ttm_file=\"${tm_file} sh/embed-elf.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sh/embed-elf.h\"\n \tfloat_format=sh\n \t;;\n sh64-*-elf*)\n \ttmake_file=\"sh/t-sh sh/t-elf sh/t-sh64\"\n-\ttm_file=\"${tm_file} sh/sh.h sh/embed-elf.h sh/sh64.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sh/embed-elf.h sh/sh64.h\"\n \tfloat_format=sh\n \textra_headers=\"shmedia.h ushmedia.h sshmedia.h\"\n \t# Not strictly necessary to check this, but a good idea anyway.\n@@ -2223,7 +2223,7 @@ sh64-*-elf*)\n sh-*-rtemself*)\n \txm_defines=POSIX\n \ttmake_file=\"sh/t-sh sh/t-elf t-rtems\"\n-\ttm_file=\"${tm_file} sh/embed-elf.h sh/rtemself.h rtems.h\"\n+\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sh/embed-elf.h sh/rtemself.h rtems.h\"\n \tfloat_format=sh\n \tif test x$enable_threads = xyes; then\n \t  thread_file='rtems'\n@@ -2232,22 +2232,23 @@ sh-*-rtemself*)\n sh-*-rtems*)\n \txm_defines=POSIX\n \ttmake_file=\"sh/t-sh t-rtems\"\n-\ttm_file=\"${tm_file} sh/rtems.h rtems.h\"\n+\ttm_file=\"${tm_file} sh/coff.h sh/rtems.h rtems.h\"\n \tfloat_format=sh\n \tif test x$enable_threads = xyes; then\n \t  thread_file='rtems'\n \tfi\n \t;;\n sh-*-linux*)\n-\ttm_file=\"${tm_file} sh/elf.h sh/linux.h\"\n-\ttmake_file=\"sh/t-sh sh/t-elf sh/t-linux\"\n+\ttm_file=\"sh/little.h ${tm_file} dbxelf.h elfos.h svr4.h sh/elf.h sh/linux.h\"\n+\ttmake_file=\"sh/t-sh sh/t-elf sh/t-le sh/t-linux\"\n \tgas=yes gnu_ld=yes\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'\n \tfi\n \tfloat_format=sh\n \t;;\n sh-*-*)\n+\ttm_file=\"${tm_file} sh/coff.h\"\n \tfloat_format=sh\n \t;;\n sparc-tti-*)"}, {"sha": "67826b113501393c43981154d738b5cdd2814b9d", "filename": "gcc/config/sh/coff.h", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fcoff.h?ref=f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "patch": "@@ -0,0 +1,88 @@\n+/* Definitions of target machine for gcc for Hitachi / SuperH SH using ELF.\n+   Copyright (C) 1997, 1998, 2001, 2002 Free Software Foundation, Inc.\n+   Contributed by J\ufffdrn Rennecke <joern.rennecke@superh.com>.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Generate SDB debugging information.  */\n+\n+#define SDB_DEBUGGING_INFO\n+\n+/* Output DBX (stabs) debugging information if doing -gstabs.  */\n+\n+#include \"dbxcoff.h\"\n+\n+#define SDB_DELIM \";\"\n+\n+#ifndef MAX_OFILE_ALIGNMENT\n+#define MAX_OFILE_ALIGNMENT 128\n+#endif\n+\n+#define IDENT_ASM_OP \"\\t.ident\\t\"\n+\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION default_coff_asm_named_section\n+\n+/* The prefix to add to user-visible assembler symbols.  */\n+\n+#define USER_LABEL_PREFIX \"_\"\n+\n+/* The prefix to add to an internally generated label.  */\n+\n+#define LOCAL_LABEL_PREFIX \"\"\n+\n+/* Make an internal label into a string.  */\n+#define ASM_GENERATE_INTERNAL_LABEL(STRING, PREFIX, NUM) \\\n+  sprintf ((STRING), \"*%s%s%ld\", LOCAL_LABEL_PREFIX, (PREFIX), (long)(NUM))\n+\n+/* Output an internal label definition.  */\n+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM) \\\n+  asm_fprintf ((FILE), \"%L%s%d:\\n\", (PREFIX), (NUM))\n+\n+/* This is how to output an assembler line\n+   that says to advance the location counter by SIZE bytes.  */\n+\n+#define ASM_OUTPUT_SKIP(FILE,SIZE) \\\n+  fprintf ((FILE), \"\\t.space %d\\n\", (SIZE))\n+\n+/* This says how to output an assembler line\n+   to define a global common symbol.  */\n+\n+#define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)\t\\\n+( fputs (\"\\t.comm \", (FILE)),\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\\\n+  fprintf ((FILE), \",%d\\n\", (SIZE)))\n+\n+/* This says how to output an assembler line\n+   to define a local common symbol.  */\n+\n+#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n+( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\t\\\n+  assemble_name ((FILE), (NAME)),\t\t\t\\\n+  fprintf ((FILE), \",%d\\n\", (SIZE)))\n+\n+#define TARGET_OBJFMT_CPP_BUILTINS()\n+\n+/* ??? The so-called ASM_OUTPUT_SECTION_NAME cleanup from August 3rd 2001\n+   broke sh-coff, and was still neither reversed not fixed eight month after\n+   this has been pointed out.  */\n+/* Tell the braindead logic in defaults.h / libgcc2.c not to\n+   refer to __EH_FRAME_BEGIN__, since we don't use crtstuff.c */\n+#define HAS_INIT_SECTION\n+/* And tell function.c that we don't actually have an init section.  */\n+#define INVOKE__MAIN"}, {"sha": "0f735f536a5e3a136df1925cc882cfe2ec8049db", "filename": "gcc/config/sh/elf.h", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Felf.h?ref=f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "patch": "@@ -19,26 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* Undefine some macros defined in both sh.h and svr4.h.  */\n-#undef IDENT_ASM_OP\n-#undef ASM_FILE_END\n-#undef ASM_OUTPUT_SOURCE_LINE\n-#undef DBX_OUTPUT_MAIN_SOURCE_FILE_END\n-#undef TARGET_ASM_NAMED_SECTION\n-#undef ASM_DECLARE_FUNCTION_NAME\n-#undef MAX_OFILE_ALIGNMENT\n-#undef SIZE_TYPE\n-#undef PTRDIFF_TYPE\n-\n-/* Be ELF-like.  */\n-/* TODO: convert includes to ${tm_file} list in config.gcc.  */\n-#include \"dbxelf.h\"\n-#include \"elfos.h\"\n-#include \"svr4.h\"\n-\n-/* No SDB debugging info.  */\n-#undef SDB_DEBUGGING_INFO\n-\n /* Generate DWARF2 debugging information and make it the default */\n #undef DWARF2_DEBUGGING_INFO\n #define DWARF2_DEBUGGING_INFO 1\n@@ -82,7 +62,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n /* Let code know that this is ELF.  */\n-#define CPP_PREDEFINES \"-D__sh__ -D__ELF__ -Acpu=sh -Amachine=sh\"\n+#define TARGET_OBJFMT_CPP_BUILTINS() builtin_define (\"__ELF__\")\n \n #undef SIZE_TYPE\n #define SIZE_TYPE (TARGET_SH5 ? \"long unsigned int\" : \"unsigned int\")\n@@ -97,15 +77,13 @@ Boston, MA 02111-1307, USA.  */\n %{m5-64media:--isa=SHmedia --abi=64} %{m5-64media-nofpu:--isa=SHmedia --abi=64}\"\n \n #undef LINK_SPEC\n-#define LINK_SPEC \" \\\n-%{m5-compact:%{!ml:-m shelf32} %{ml:-m shlelf32}} \\\n-%{m5-compact-nofpu:%{!ml:-m shelf32} %{ml:-m shlelf32}} \\\n-%{m5-32media:%{!ml:-m shelf32} %{ml:-m shlelf32}} \\\n-%{m5-32media-nofpu:%{!ml:-m shelf32} %{ml:-m shlelf32}} \\\n-%{m5-64media:%{!ml:-m shelf64} %{ml:-m shlelf64}} \\\n-%{m5-64media-nofpu:%{!ml:-m shelf64} %{ml:-m shlelf64}} \\\n-%{!m5-64media:%{!m5-64media-nofpu:%{!m5-32media:%{!m5-32media-nofpu:%{!m5-compact:%{!m5-compact-nofpu:%{ml:-m shlelf}}}}}}} \\\n-%{mrelax:-relax}\"\n+#define LINK_SPEC SH_LINK_SPEC\n+#undef LINK_EMUL_PREFIX\n+#if TARGET_ENDIAN_DEFAULT == LITTLE_ENDIAN_BIT\n+#define LINK_EMUL_PREFIX \"sh%{!mb:l}elf\"\n+#else\n+#define LINK_EMUL_PREFIX \"sh%{ml:l}elf\"\n+#endif\n \n /* svr4.h undefined DBX_REGISTER_NUMBER, so we need to define it\n    again.  */"}, {"sha": "8a3cbaf85b67291ebf4938c00650a628fe676cc4", "filename": "gcc/config/sh/linux.h", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flinux.h?ref=f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "patch": "@@ -25,39 +25,27 @@ Boston, MA 02111-1307, USA.  */\n \n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"\\\n-   %{fPIC:-D__PIC__ -D__pic__} \\\n-   %{fpic:-D__PIC__ -D__pic__} \\\n    %{posix:-D_POSIX_SOURCE} \\\n    %{pthread:-D_REENTRANT -D_PTHREADS} \\\n \"\n \n-#undef SUBTARGET_CPP_ENDIAN_SPEC\n-#define SUBTARGET_CPP_ENDIAN_SPEC \\\n-  \"%{mb:-D__BIG_ENDIAN__} \\\n-   %{!mb:-D__LITTLE_ENDIAN__}\"\n-\n-#undef CPP_DEFAULT_CPU_SPEC\n-#define CPP_DEFAULT_CPU_SPEC \"-D__SH3__ -D__sh3__\"\n-\n-\n-#undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-D__ELF__ -Dunix -D__sh__ -D__gnu_linux__ -Dlinux -Asystem=posix\"\n-\n-#undef SUBTARGET_ASM_ENDIAN_SPEC\n-#define SUBTARGET_ASM_ENDIAN_SPEC \"%{!mb:-little}\"\n-\n-#undef CC1_SPEC\n-#define CC1_SPEC \\\n-  \"-musermode %{!mb:-ml} %{!m3e:%{!m4*:%{!m5*:-m3}}}\"\n-\n-#undef CC1PLUS_SPEC\n-#define CC1PLUS_SPEC \\\n-  \"-musermode %{!mb:-ml} %{!m3e:%{!m4:-m3}}\"\n-\n-#undef LINK_SPEC\n-#define LINK_SPEC \\\n-  \"%{!mb:-m shlelf_linux} %{mrelax:-relax} \\\n-   %{shared:-shared} \\\n+#define TARGET_OS_CPP_BUILTINS() \\\n+do { \\\n+  builtin_define_std (\"unix\"); \\\n+  builtin_define (\"__gnu_linux__\"); \\\n+  builtin_define_std (\"linux\"); \\\n+  builtin_assert (\"system=posix\"); \\\n+} while (0)\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT \\\n+  (SH3_BIT|SH2_BIT|SH1_BIT | USERMODE_BIT | TARGET_ENDIAN_DEFAULT)\n+\n+#undef SUBTARGET_LINK_EMUL_SUFFIX\n+#define SUBTARGET_LINK_EMUL_SUFFIX \"_linux\"\n+#undef SUBTARGET_LINK_SPEC\n+#define SUBTARGET_LINK_SPEC \\\n+  \"%{shared:-shared} \\\n    %{!static: \\\n      %{rdynamic:-export-dynamic} \\\n      %{!dynamic-linker:-dynamic-linker /lib/ld-linux.so.2} \\"}, {"sha": "ca85f8c041b70a7bd4af87d7fda743a936c6738f", "filename": "gcc/config/sh/little.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Flittle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Flittle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flittle.h?ref=f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "patch": "@@ -0,0 +1,22 @@\n+/* Definition of little endian SH machine for GNU compiler.\n+\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#define TARGET_ENDIAN_DEFAULT LITTLE_ENDIAN_BIT"}, {"sha": "e7d8268b61e6ff22f314c78e8ffd9146fdc05e31", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "patch": "@@ -193,9 +193,6 @@ static tree sh_handle_sp_switch_attribute PARAMS ((tree *, tree, tree, int, bool\n static tree sh_handle_trap_exit_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static void sh_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void sh_insert_attributes PARAMS ((tree, tree *));\n-#ifndef OBJECT_FORMAT_ELF\n-static void sh_asm_named_section PARAMS ((const char *, unsigned int));\n-#endif\n static int sh_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static int sh_use_dfa_interface PARAMS ((void));\n static int sh_issue_rate PARAMS ((void));\n@@ -6678,17 +6675,6 @@ sh_can_redirect_branch (branch1, branch2)\n   return 0;\n }\n \n-#ifndef OBJECT_FORMAT_ELF\n-static void\n-sh_asm_named_section (name, flags)\n-     const char *name;\n-     unsigned int flags ATTRIBUTE_UNUSED;\n-{\n-  /* ??? Perhaps we should be using default_coff_asm_named_section.  */\n-  fprintf (asm_out_file, \"\\t.section %s\\n\", name);\n-}\n-#endif /* ! OBJECT_FORMAT_ELF */\n-\n /* A C statement (sans semicolon) to update the integer variable COST\n    based on the relationship between INSN that is dependent on\n    DEP_INSN through the dependence LINK.  The default is to make no"}, {"sha": "5995e3770550bd6144f189eb8ca3d601aee9bb1e", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 100, "deletions": 117, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "patch": "@@ -32,63 +32,55 @@ Boston, MA 02111-1307, USA.  */\n /* ??? No longer true.  */\n extern int code_for_indirect_jump_scratch;\n \n-/* Generate SDB debugging information.  */\n-\n-#define SDB_DEBUGGING_INFO\n-\n-/* Output DBX (stabs) debugging information if doing -gstabs.  */\n-\n-#include \"dbxcoff.h\"\n-\n-#define SDB_DELIM \";\"\n-\n-#define CPP_SPEC \" \\\n-%{m5-64media|m5-64media-nofpu|m5-32media|m5-32media-nofpu:-D__SHMEDIA__=1} \\\n-%{m5-compact|m5-compact-nofpu:-D__SHMEDIA__=0} \\\n-%{m5-64media|m5-64media-nofpu:-D__SH5__=64 -D__LONG_MAX__=9223372036854775807L} \\\n-%{m5-32media|m5-32media-nofpu|m5-compact|m5-compact-nofpu:-D__SH5__=32} \\\n-%{m5-64media-nofpu|m5-32media-nofpu|m5-compact-nofpu:-D__SH4_NOFPU__} \\\n-%{m1:-D__sh1__} \\\n-%{m2:-D__sh2__} \\\n-%{m3:-D__sh3__} \\\n-%{m3e:-D__SH3E__} \\\n-%{m4-single-only:-D__SH4_SINGLE_ONLY__} \\\n-%{m4-single:-D__SH4_SINGLE__} \\\n-%{m4-nofpu:-D__sh3__ -D__SH4_NOFPU__} \\\n-%{m4:-D__SH4__} \\\n-%{!m1:%{!m2:%{!m3*:%{!m4*:%{!m5*:%(cpp_default_cpu_spec)}}}}} \\\n-%{mhitachi:-D__HITACHI__} \\\n-%(subtarget_cpp_spec) \\\n-%(subtarget_cpp_endian_spec) \"\n-\n-#ifndef SUBTARGET_CPP_ENDIAN_SPEC\n-#define SUBTARGET_CPP_ENDIAN_SPEC \"%{ml:-D__LITTLE_ENDIAN__}\"\n-#endif\n-\n-#ifndef SUBTARGET_CPP_SPEC\n-#define SUBTARGET_CPP_SPEC \"\"\n-#endif\n-\n-#ifndef CPP_DEFAULT_CPU_SPEC\n-#define CPP_DEFAULT_CPU_SPEC \"-D__sh1__\"\n-#endif\n-\n-\n-#define EXTRA_SPECS\t\t\t\t\t\t\\\n-  { \"subtarget_cpp_spec\", SUBTARGET_CPP_SPEC },\t\t\t\\\n-  { \"subtarget_cpp_endian_spec\", SUBTARGET_CPP_ENDIAN_SPEC },\t\\\n-  { \"cpp_default_cpu_spec\", CPP_DEFAULT_CPU_SPEC },\t\t\\\n-  { \"subtarget_asm_endian_spec\", SUBTARGET_ASM_ENDIAN_SPEC },\n-\n-#define CPP_PREDEFINES \"-D__sh__ -Acpu=sh -Amachine=sh\"\n-\n-#define ASM_SPEC  \"%(subtarget_asm_endian_spec) %{mrelax:-relax}\"\n-\n-#ifndef SUBTARGET_ASM_ENDIAN_SPEC\n-#define SUBTARGET_ASM_ENDIAN_SPEC \"%{ml:-little}\"\n-#endif\n-\n-#define LINK_SPEC \"%{ml:-m shl} %{mrelax:-relax}\"\n+#define TARGET_CPU_CPP_BUILTINS() \\\n+do { \\\n+  builtin_define (\"__sh__\"); \\\n+  builtin_assert (\"cpu=sh\"); \\\n+  builtin_assert (\"machine=sh\"); \\\n+  switch ((int) sh_cpu) \\\n+    { \\\n+    case PROCESSOR_SH1: \\\n+      builtin_define (\"__sh1__\"); \\\n+      break; \\\n+    case PROCESSOR_SH2: \\\n+      builtin_define (\"__sh2__\"); \\\n+      break; \\\n+    case PROCESSOR_SH3: \\\n+      builtin_define (\"__sh3__\"); \\\n+      builtin_define (\"__SH3__\"); \\\n+      if (TARGET_HARD_SH4) \\\n+\tbuiltin_define (\"__SH4_NOFPU__\"); \\\n+      break; \\\n+    case PROCESSOR_SH3E: \\\n+      builtin_define (TARGET_HARD_SH4 ? \"__SH4_SINGLE_ONLY__\" : \"__SH3E__\"); \\\n+      break; \\\n+    case PROCESSOR_SH4: \\\n+      builtin_define (TARGET_FPU_SINGLE ? \"__SH4_SINGLE__\" : \"__SH4__\"); \\\n+      break; \\\n+    case PROCESSOR_SH5: \\\n+      { \\\n+\tbuiltin_define_with_value (\"__SH5__\", \\\n+\t\t\t\t   TARGET_SHMEDIA64 ? \"64\" : \"32\", 0); \\\n+\tbuiltin_define_with_value (\"__SHMEDIA__\", \\\n+\t\t\t\t   TARGET_SHMEDIA ? \"1\" : \"0\", 0); \\\n+\tif (! TARGET_FPU_DOUBLE) \\\n+\t  builtin_define (\"__SH4_NOFPU__\"); \\\n+\tif (TARGET_SHMEDIA64) \\\n+\t  builtin_define_with_value (\"__LONG_MAX__\", \\\n+\t\t\t\t     \"9223372036854775807L\", 0); \\\n+      } \\\n+    } \\\n+  if (TARGET_HITACHI) \\\n+    builtin_define (\"__HITACHI__\"); \\\n+  builtin_define (TARGET_LITTLE_ENDIAN \\\n+\t\t  ? \"__LITTLE_ENDIAN__\" : \"__BIG_ENDIAN__\"); \\\n+  if (flag_pic) \\\n+    { \\\n+      builtin_define (\"__pic__\"); \\\n+      builtin_define (\"__PIC__\"); \\\n+    } \\\n+  TARGET_OBJFMT_CPP_BUILTINS (); \\\n+} while (0)\n \n /* We can not debug without a frame pointer.  */\n /* #define CAN_DEBUG_WITHOUT_FP */\n@@ -315,7 +307,53 @@ extern int target_flags;\n /* This are meant to be redefined in the host dependent files */\n #define SUBTARGET_SWITCHES\n \n-#define TARGET_DEFAULT  (SH1_BIT)\n+/* This defaults us to big-endian.  */\n+#ifndef TARGET_ENDIAN_DEFAULT\n+#define TARGET_ENDIAN_DEFAULT 0\n+#endif\n+\n+#define TARGET_DEFAULT  (SH1_BIT|TARGET_ENDIAN_DEFAULT)\n+\n+#define CPP_SPEC \" %(subtarget_cpp_spec) \"\n+\n+#ifndef SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC \"\"\n+#endif\n+\n+#define EXTRA_SPECS\t\t\t\t\t\t\\\n+  { \"subtarget_cpp_spec\", SUBTARGET_CPP_SPEC },\t\t\t\\\n+  { \"link_emul_prefix\", LINK_EMUL_PREFIX },\t\t\t\\\n+  { \"link_default_cpu_emul\", LINK_DEFAULT_CPU_EMUL },\t\t\\\n+  { \"subtarget_link_emul_suffix\", SUBTARGET_LINK_EMUL_SUFFIX },\t\\\n+  { \"subtarget_link_spec\", SUBTARGET_LINK_SPEC },\t\t\\\n+  { \"subtarget_asm_endian_spec\", SUBTARGET_ASM_ENDIAN_SPEC },\n+\n+#define ASM_SPEC  \"%(subtarget_asm_endian_spec) %{mrelax:-relax}\"\n+\n+#ifndef SUBTARGET_ASM_ENDIAN_SPEC\n+#if TARGET_ENDIAN_DEFAULT == LITTLE_ENDIAN_BIT\n+#define SUBTARGET_ASM_ENDIAN_SPEC \"%{mb:-big} %{!mb:-little}\"\n+#else\n+#define SUBTARGET_ASM_ENDIAN_SPEC \"%{ml:-little} %{!ml:-big}\"\n+#endif\n+#endif\n+\n+#define LINK_EMUL_PREFIX \"sh%{ml:l}\"\n+#define LINK_DEFAULT_CPU_EMUL \"\"\n+#define SUBTARGET_LINK_EMUL_SUFFIX \"\"\n+#define SUBTARGET_LINK_SPEC \"\"\n+\n+/* svr4.h redefines LINK_SPEC inappropriately, so go via SH_LINK_SPEC,\n+   so that we can undo the damage without code replication.  */\n+#define LINK_SPEC SH_LINK_SPEC\n+\n+#define SH_LINK_SPEC \"\\\n+-m %(link_emul_prefix)\\\n+%{m5-compact*|m5-32media*:32}\\\n+%{m5-64media*:64}\\\n+%{!m1:%{!m2:%{!m3*:%{!m4*:%{!m5*:%(link_default_cpu_emul)}}}}}\\\n+%(subtarget_link_emul_suffix) \\\n+%{mrelax:-relax} %(subtarget_link_spec)\"\n \n #define OPTIMIZATION_OPTIONS(LEVEL,SIZE)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n@@ -486,10 +524,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n     && (ALIGN) < FASTEST_ALIGNMENT)\t\\\n     ? FASTEST_ALIGNMENT : (ALIGN))\n \n-#ifndef MAX_OFILE_ALIGNMENT\n-#define MAX_OFILE_ALIGNMENT 128\n-#endif\n-\n /* Make arrays of chars word-aligned for the same reasons.  */\n #define DATA_ALIGNMENT(TYPE, ALIGN)\t\t\\\n   (TREE_CODE (TYPE) == ARRAY_TYPE\t\t\\\n@@ -2686,7 +2720,8 @@ while (0)\n    nor can we indirect via the constant pool.  */\n #define LEGITIMATE_PIC_OPERAND_P(X)\t\t\t\t\\\n \t(! nonpic_symbol_mentioned_p (X)\t\t\t\\\n-\t && (! CONSTANT_POOL_ADDRESS_P (X)\t\t\t\\\n+\t && (GET_CODE (X) != SYMBOL_REF\t\t\t\t\\\n+\t     || ! CONSTANT_POOL_ADDRESS_P (X)\t\t\t\\\n \t     || ! nonpic_symbol_mentioned_p (get_pool_constant (X))))\n \n #define SYMBOLIC_CONST_P(X)\t\\\n@@ -2758,12 +2793,9 @@ while (0)\n #define ASM_FILE_START(STREAM) \\\n   output_file_start (STREAM)\n \n-#define ASM_FILE_END(STREAM)\n-\n #define ASM_APP_ON  \t\t\"\"\n #define ASM_APP_OFF  \t\t\"\"\n #define FILE_ASM_OP \t\t\"\\t.file\\n\"\n-#define IDENT_ASM_OP \t\t\"\\t.ident\\t\"\n #define SET_ASM_OP\t\t\"\\t.set\\t\"\n \n /* How to change between sections.  */\n@@ -2810,9 +2842,6 @@ while (0)\n    which could be text or it could be a user defined section.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n-/* Switch into a generic section.  */\n-#define TARGET_ASM_NAMED_SECTION  sh_asm_named_section\n-\n #undef DO_GLOBAL_CTORS_BODY\n #define DO_GLOBAL_CTORS_BODY\t\t\t\\\n {\t\t\t\t\t\t\\\n@@ -2915,32 +2944,12 @@ while (0)\n   if ((LOG) != 0)\t\t\t\\\n     fprintf ((FILE), \"\\t.align %d\\n\", (LOG))\n \n-/* Output a function label definition.  */\n-#define ASM_DECLARE_FUNCTION_NAME(STREAM,NAME,DECL) \\\n-    ASM_OUTPUT_LABEL((STREAM), (NAME))\n-\n /* Output a globalising directive for a label.  */\n #define ASM_GLOBALIZE_LABEL(STREAM,NAME)\t\\\n   (fprintf ((STREAM), \"\\t.global\\t\"),\t\t\\\n    assemble_name ((STREAM), (NAME)),\t\t\\\n    fputc ('\\n', (STREAM)))\n \n-/* The prefix to add to user-visible assembler symbols.  */\n-\n-#define USER_LABEL_PREFIX \"_\"\n-\n-/* The prefix to add to an internally generated label.  */\n-\n-#define LOCAL_LABEL_PREFIX \"\"\n-\n-/* Make an internal label into a string.  */\n-#define ASM_GENERATE_INTERNAL_LABEL(STRING, PREFIX, NUM) \\\n-  sprintf ((STRING), \"*%s%s%ld\", LOCAL_LABEL_PREFIX, (PREFIX), (long)(NUM))\n-\n-/* Output an internal label definition.  */\n-#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM) \\\n-  asm_fprintf ((FILE), \"%L%s%d:\\n\", (PREFIX), (NUM))\n-\n /* #define ASM_OUTPUT_CASE_END(STREAM,NUM,TABLE)\t    */\n \n /* Construct a private name.  */\n@@ -2988,36 +2997,10 @@ while (0)\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(STREAM,VALUE)  \t\t\t\t\\\n   if (TARGET_BIGTABLE) \t\t\t\t\t\t\t\\\n-    asm_fprintf ((STREAM), \"\\t.long\\t%LL%d\\n\", (VALUE)); \t\t\t\\\n+    asm_fprintf ((STREAM), \"\\t.long\\t%LL%d\\n\", (VALUE)); \t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n-    asm_fprintf ((STREAM), \"\\t.word\\t%LL%d\\n\", (VALUE)); \t\t\t\\\n-\n-/* Output various types of constants.  */\n-\n-/* Loop alignment is now done in machine_dependent_reorg, so that\n-   branch shortening can know about it.  */\n-\n-/* This is how to output an assembler line\n-   that says to advance the location counter by SIZE bytes.  */\n-\n-#define ASM_OUTPUT_SKIP(FILE,SIZE) \\\n-  fprintf ((FILE), \"\\t.space %d\\n\", (SIZE))\n-\n-/* This says how to output an assembler line\n-   to define a global common symbol.  */\n-\n-#define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)\t\\\n-( fputs (\"\\t.comm \", (FILE)),\t\t\t\\\n-  assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%d\\n\", (SIZE)))\n-\n-/* This says how to output an assembler line\n-   to define a local common symbol.  */\n+    asm_fprintf ((STREAM), \"\\t.word\\t%LL%d\\n\", (VALUE));\n \n-#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n-( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\t\\\n-  assemble_name ((FILE), (NAME)),\t\t\t\\\n-  fprintf ((FILE), \",%d\\n\", (SIZE)))\n \f\n /* A C statement to be executed just prior to the output of\n    assembler code for INSN, to modify the extracted operands so"}, {"sha": "0c76218a0475637aa94ac91e15049550c8cf1537", "filename": "gcc/config/sh/sh64.h", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Fsh64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Fsh64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh64.h?ref=f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "patch": "@@ -23,9 +23,6 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_VERSION \\\n   fputs (\" (SuperH SH)\", stderr);\n \n-#undef CPP_DEFAULT_CPU_SPEC\n-#define CPP_DEFAULT_CPU_SPEC \"-D__SH5__=32 -D__SHMEDIA__\"\n-\n #undef ASM_SPEC\n #define ASM_SPEC  \"%(subtarget_asm_endian_spec) %{mrelax:-relax} \\\n %{m5-compact*:--isa=SHcompact} \\\n@@ -34,19 +31,11 @@ Boston, MA 02111-1307, USA.  */\n %{!m1:%{!m2:%{!m3*:%{!m4*:%{!m5*:--isa=SHmedia --abi=32}}}}} \\\n \"\n \n-#undef LINK_SPEC\n-#define LINK_SPEC \" \\\n-%{m5-compact:%{!ml:-m shelf32} %{ml:-m shlelf32}} \\\n-%{m5-compact-nofpu:%{!ml:-m shelf32} %{ml:-m shlelf32}} \\\n-%{m5-32media:%{!ml:-m shelf32} %{ml:-m shlelf32}} \\\n-%{m5-32media-nofpu:%{!ml:-m shelf32} %{ml:-m shlelf32}} \\\n-%{m5-64media:%{!ml:-m shelf64} %{ml:-m shlelf64}} \\\n-%{m5-64media-nofpu:%{!ml:-m shelf64} %{ml:-m shlelf64}} \\\n-%{!m1:%{!m2:%{!m3:%{!m3e:%{!m4:%{!m4-single:%{!m4-single-only:%{!m4-nofpu:%{!m5-64media:%{!m5-64media-nofpu:%{!m5-32media:%{!m5-32media-nofpu:%{!m5-compact:%{!m5-compact-nofpu:%{!ml:-m shelf32} %{ml:-m shlelf32}}}}}}}}}}}}}}} \\\n-%{mrelax:-relax}\"\n+#undef LINK_DEFAULT_CPU_EMUL\n+#define LINK_DEFAULT_CPU_EMUL \"32\"\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT  (SH5_BIT|SH4_BIT|SH3E_BIT)\n+#define TARGET_DEFAULT  (SH5_BIT|SH4_BIT|SH3E_BIT|TARGET_ENDIAN_DEFAULT)\n \n #undef SH_ELF_WCHAR_TYPE\n #define SH_ELF_WCHAR_TYPE \"int\""}, {"sha": "849d5854a705548e558d7dc5e15c6a88ac2bea03", "filename": "gcc/config/sh/t-be", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Ft-be", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Ft-be", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-be?ref=f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "patch": "@@ -0,0 +1 @@\n+MULTILIB_OPTIONS= ml"}, {"sha": "b4b0dfa1abe5234a4f3a69ec72301dd23a59b6a1", "filename": "gcc/config/sh/t-le", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Ft-le", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Ft-le", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-le?ref=f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "patch": "@@ -0,0 +1 @@\n+MULTILIB_OPTIONS= mb"}, {"sha": "74c52cf18e79e1e4ad981b3f1d7db130d2c0b29e", "filename": "gcc/config/sh/t-linux", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Ft-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a58d928b14e74fa54f8be9c12dcc9dd871b073/gcc%2Fconfig%2Fsh%2Ft-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-linux?ref=f1a58d928b14e74fa54f8be9c12dcc9dd871b073", "patch": "@@ -3,7 +3,7 @@ LIB1ASMFUNCS_CACHE = _ic_invalidate\n \n LIB2FUNCS_EXTRA=\n \n-MULTILIB_OPTIONS= mb m3e/m4\n+MULTILIB_OPTIONS += m3e/m4\n MULTILIB_DIRNAMES= \n MULTILIB_MATCHES = \n "}]}