{"sha": "1e211590c3288acd5ea6ff4edb94a1efd5ec25f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUyMTE1OTBjMzI4OGFjZDVlYTZmZjRlZGI5NGExZWZkNWVjMjVmNw==", "commit": {"author": {"name": "David Daney", "email": "ddaney@caviumnetworks.com", "date": "2009-07-25T20:25:18Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2009-07-25T20:25:18Z"}, "message": "re PR rtl-optimization/40445 (g++   void f() { __builtin_unreachable(); })\n\n2009-07-25  David Daney  <ddaney@caviumnetworks.com>\n\n\tPR rtl-optimization/40445\n\t* emit-rtl.c (next_nonnote_insn_bb): New function.\n\t* rtl.h (next_nonnote_insn_bb): Declare new function.\n\t* cfgcleanup.c (try_optimize_cfg): Don't remove an empty block\n\twith no successors that is the successor of the ENTRY_BLOCK.\n\tContinue from the top after removing an empty fallthrough block.\n\t* cfgrtl.c (get_last_bb_insn): Call next_nonnote_insn_bb instead\n\tof next_nonnote_insn.\n\n2009-07-25  David Daney  <ddaney@caviumnetworks.com>\n\n\tPR rtl-optimization/40445\n\t* g++.dg/other/builtin-unreachable-1.C: New testcase.\n\nFrom-SVN: r150090", "tree": {"sha": "697b3a3928c509ec1d15830956e5fd590de886f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/697b3a3928c509ec1d15830956e5fd590de886f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/comments", "author": null, "committer": null, "parents": [{"sha": "ba21aba3e53b2f9e9e365eb8bfe6f40b88cd6dca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba21aba3e53b2f9e9e365eb8bfe6f40b88cd6dca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba21aba3e53b2f9e9e365eb8bfe6f40b88cd6dca"}], "stats": {"total": 62, "additions": 58, "deletions": 4}, "files": [{"sha": "3c39fb4e9d59d1f87d73cd509660c835f10a2507", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e211590c3288acd5ea6ff4edb94a1efd5ec25f7", "patch": "@@ -1,3 +1,14 @@\n+2009-07-25  David Daney  <ddaney@caviumnetworks.com>\n+\n+\tPR rtl-optimization/40445\n+\t* emit-rtl.c (next_nonnote_insn_bb): New function.\n+\t* rtl.h (next_nonnote_insn_bb): Declare new function.\n+\t* cfgcleanup.c (try_optimize_cfg): Don't remove an empty block\n+\twith no successors that is the successor of the ENTRY_BLOCK.\n+\tContinue from the top after removing an empty fallthrough block.\n+\t* cfgrtl.c (get_last_bb_insn): Call next_nonnote_insn_bb instead\n+\tof next_nonnote_insn.\n+\n 2009-07-25  David Daney  <ddaney@caviumnetworks.com>\n \n \t* cfgcleanup.c (old_insns_match_p): Handle the case of empty"}, {"sha": "c631907799e60a3cef24bbb0e238bb70a8a24575", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=1e211590c3288acd5ea6ff4edb94a1efd5ec25f7", "patch": "@@ -1846,10 +1846,16 @@ try_optimize_cfg (int mode)\n \n \t      /* Delete trivially dead basic blocks.  This is either\n \t\t blocks with no predecessors, or empty blocks with no\n-\t\t successors.  Empty blocks may result from expanding\n+\t\t successors.  However if the empty block with no\n+\t\t successors is the successor of the ENTRY_BLOCK, it is\n+\t\t kept.  This ensures that the ENTRY_BLOCK will have a\n+\t\t successor which is a precondition for many RTL\n+\t\t passes.  Empty blocks may result from expanding\n \t\t __builtin_unreachable ().  */\n \t      if (EDGE_COUNT (b->preds) == 0\n-\t\t  || (EDGE_COUNT (b->succs) == 0 && BB_HEAD (b) == BB_END (b)))\n+\t\t  || (EDGE_COUNT (b->succs) == 0\n+\t\t      && BB_HEAD (b) == BB_END (b)\n+\t\t      && single_succ_edge (ENTRY_BLOCK_PTR)->dest != b))\n \t\t{\n \t\t  c = b->prev_bb;\n \t\t  if (dump_file)\n@@ -1921,6 +1927,7 @@ try_optimize_cfg (int mode)\n \t\t  delete_basic_block (b);\n \t\t  changed = true;\n \t\t  b = c;\n+\t\t  continue;\n \t\t}\n \n \t      if (single_succ_p (b)"}, {"sha": "3c877c2e1e35bb36682f18384800ae8a3090bd79", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=1e211590c3288acd5ea6ff4edb94a1efd5ec25f7", "patch": "@@ -1712,11 +1712,11 @@ get_last_bb_insn (basic_block bb)\n     end = tmp;\n \n   /* Include any barriers that may follow the basic block.  */\n-  tmp = next_nonnote_insn (end);\n+  tmp = next_nonnote_insn_bb (end);\n   while (tmp && BARRIER_P (tmp))\n     {\n       end = tmp;\n-      tmp = next_nonnote_insn (end);\n+      tmp = next_nonnote_insn_bb (end);\n     }\n \n   return end;"}, {"sha": "21d8434d457653dde0e0378512a5edd223dd6371", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1e211590c3288acd5ea6ff4edb94a1efd5ec25f7", "patch": "@@ -2998,6 +2998,25 @@ next_nonnote_insn (rtx insn)\n   return insn;\n }\n \n+/* Return the next insn after INSN that is not a NOTE, but stop the\n+   search before we enter another basic block.  This routine does not\n+   look inside SEQUENCEs.  */\n+\n+rtx\n+next_nonnote_insn_bb (rtx insn)\n+{\n+  while (insn)\n+    {\n+      insn = NEXT_INSN (insn);\n+      if (insn == 0 || !NOTE_P (insn))\n+\tbreak;\n+      if (NOTE_INSN_BASIC_BLOCK_P (insn))\n+\treturn NULL_RTX;\n+    }\n+\n+  return insn;\n+}\n+\n /* Return the previous insn before INSN that is not a NOTE.  This routine does\n    not look inside SEQUENCEs.  */\n "}, {"sha": "d5ae561d3afd57ee60f4efd1126398fed333d434", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=1e211590c3288acd5ea6ff4edb94a1efd5ec25f7", "patch": "@@ -1626,6 +1626,7 @@ extern rtx previous_insn (rtx);\n extern rtx next_insn (rtx);\n extern rtx prev_nonnote_insn (rtx);\n extern rtx next_nonnote_insn (rtx);\n+extern rtx next_nonnote_insn_bb (rtx);\n extern rtx prev_real_insn (rtx);\n extern rtx next_real_insn (rtx);\n extern rtx prev_active_insn (rtx);"}, {"sha": "a0e39e379ab5e97fb275240ce22944ea6ac4748f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e211590c3288acd5ea6ff4edb94a1efd5ec25f7", "patch": "@@ -1,3 +1,8 @@\n+2009-07-25  David Daney  <ddaney@caviumnetworks.com>\n+\n+\tPR rtl-optimization/40445\n+\t* g++.dg/other/builtin-unreachable-1.C: New testcase.\n+\n 2009-07-25  David Daney  <ddaney@caviumnetworks.com>\n \n \t* gcc.dg/builtin-unreachable-4.c: New test."}, {"sha": "f6a5577032eb6dbf076672b09c5b80318f7c925f", "filename": "gcc/testsuite/g++.dg/other/builtin-unreachable-1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fbuiltin-unreachable-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e211590c3288acd5ea6ff4edb94a1efd5ec25f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fbuiltin-unreachable-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fbuiltin-unreachable-1.C?ref=1e211590c3288acd5ea6ff4edb94a1efd5ec25f7", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/40445\n+// Check that a function containing only __builtin_unreachable()\n+// doesn't ICE.\n+\n+// { dg-do compile }\n+// { dg-options \"-O0\" }\n+const char *\n+f (void)\n+{\n+  __builtin_unreachable ();\n+}"}]}