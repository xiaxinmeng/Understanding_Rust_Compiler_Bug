{"sha": "422a9f77892599ecf8e498d0e5e32b1db3cab559", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIyYTlmNzc4OTI1OTllY2Y4ZTQ5OGQwZTVlMzJiMWRiM2NhYjU1OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-10-10T15:39:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-10-10T15:39:33Z"}, "message": "PR libstdc++/87544 limit max_size() to PTRDIFF_MAX / sizeof(T)\n\nThe C++17 standard requires the default implementation for\nallocator_traits::max_size to return SIZE_MAX / sizeof(value_type).\nThat causes GCC to warn because the value could be larger than can\nsensibly be passed to malloc. This patch changes the new_allocator and\nmalloc_allocator max_size() members to use PTRDIFF_MAX instead of\nSIZE_MAX (and because they define it, the allocator_traits default isn't\nused). This also changes vector::max_size to impose a sensible limit\nusing PTRDIFF_MAX for cases where the value from the allocator or\nallocator_traits is not sensible.\n\n\tPR libstdc++/87544\n\t* include/bits/stl_vector.h (vector::_S_max_size): Limit size to\n\tPTRDIFF_MAX / sizeof(value_type).\n\t* include/ext/malloc_allocator.h (malloc_allocator::max_size):\n\tLikewise.\n\t* include/ext/new_allocator.h (new_allocator::max_size): Likewise.\n\t* testsuite/23_containers/vector/allocator/minimal.cc: Adjust\n\texpected value for max_size().\n\t* testsuite/23_containers/vector/capacity/87544.cc: New test.\n\nFrom-SVN: r265021", "tree": {"sha": "793ea99effcef869eeff038bf4f2893773e0b797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/793ea99effcef869eeff038bf4f2893773e0b797"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/422a9f77892599ecf8e498d0e5e32b1db3cab559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422a9f77892599ecf8e498d0e5e32b1db3cab559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/422a9f77892599ecf8e498d0e5e32b1db3cab559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422a9f77892599ecf8e498d0e5e32b1db3cab559/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3a46ecb386b46dfc8e01a2f50c77804e484c4c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3a46ecb386b46dfc8e01a2f50c77804e484c4c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3a46ecb386b46dfc8e01a2f50c77804e484c4c5"}], "stats": {"total": 109, "additions": 105, "deletions": 4}, "files": [{"sha": "e334ff18ebb542e1271ac5de91f9cc1d2700abec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422a9f77892599ecf8e498d0e5e32b1db3cab559/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422a9f77892599ecf8e498d0e5e32b1db3cab559/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=422a9f77892599ecf8e498d0e5e32b1db3cab559", "patch": "@@ -1,3 +1,15 @@\n+2018-10-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/87544\n+\t* include/bits/stl_vector.h (vector::_S_max_size): Limit size to\n+\tPTRDIFF_MAX / sizeof(value_type).\n+\t* include/ext/malloc_allocator.h (malloc_allocator::max_size):\n+\tLikewise.\n+\t* include/ext/new_allocator.h (new_allocator::max_size): Likewise.\n+\t* testsuite/23_containers/vector/allocator/minimal.cc: Adjust\n+\texpected value for max_size().\n+\t* testsuite/23_containers/vector/capacity/87544.cc: New test.\n+\n 2018-10-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/stl_list.h"}, {"sha": "37607417d087caae3b7a70db8d2d207bba245ada", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422a9f77892599ecf8e498d0e5e32b1db3cab559/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422a9f77892599ecf8e498d0e5e32b1db3cab559/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=422a9f77892599ecf8e498d0e5e32b1db3cab559", "patch": "@@ -1726,7 +1726,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       static size_type\n       _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT\n       {\n-\tconst size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;\n+\t// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,\n+\t// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)\n+\t// (even if std::allocator_traits::max_size says we can).\n+\tconst size_t __diffmax\n+\t  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);\n \tconst size_t __allocmax = _Alloc_traits::max_size(__a);\n \treturn (std::min)(__diffmax, __allocmax);\n       }"}, {"sha": "8eaf5d44cf769d60d5dcba1ee23f2aa9af752aa7", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422a9f77892599ecf8e498d0e5e32b1db3cab559/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422a9f77892599ecf8e498d0e5e32b1db3cab559/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=422a9f77892599ecf8e498d0e5e32b1db3cab559", "patch": "@@ -139,7 +139,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       size_type\n       max_size() const _GLIBCXX_USE_NOEXCEPT \n-      { return size_t(-1) / sizeof(_Tp); }\n+      {\n+#if __PTRDIFF_MAX__ < __SIZE_MAX__\n+\treturn size_t(__PTRDIFF_MAX__) / sizeof(_Tp);\n+#else\n+\treturn size_t(-1) / sizeof(_Tp);\n+#endif\n+      }\n \n #if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>"}, {"sha": "7c50731736bbb59b8b5835e3ea47650daadb733b", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422a9f77892599ecf8e498d0e5e32b1db3cab559/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422a9f77892599ecf8e498d0e5e32b1db3cab559/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=422a9f77892599ecf8e498d0e5e32b1db3cab559", "patch": "@@ -130,7 +130,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       size_type\n       max_size() const _GLIBCXX_USE_NOEXCEPT\n-      { return size_t(-1) / sizeof(_Tp); }\n+      {\n+#if __PTRDIFF_MAX__ < __SIZE_MAX__\n+\treturn size_t(__PTRDIFF_MAX__) / sizeof(_Tp);\n+#else\n+\treturn size_t(-1) / sizeof(_Tp);\n+#endif\n+      }\n \n #if __cplusplus >= 201103L\n       template<typename _Up, typename... _Args>"}, {"sha": "5e989b0f8c7dee7cdfd61ee5b5d36b90661211e0", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/minimal.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422a9f77892599ecf8e498d0e5e32b1db3cab559/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fminimal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422a9f77892599ecf8e498d0e5e32b1db3cab559/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fminimal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fminimal.cc?ref=422a9f77892599ecf8e498d0e5e32b1db3cab559", "patch": "@@ -35,7 +35,7 @@ void test01()\n   typedef std::vector<T, alloc_type> test_type;\n   test_type v(alloc_type{});\n   v.push_back(T());\n-  VERIFY( v.max_size() == traits_type::max_size(v.get_allocator()) );\n+  VERIFY( v.max_size() <= traits_type::max_size(v.get_allocator()) );\n }\n \n int main()"}, {"sha": "f04430e1147b70fec575368a6f7afce3e534711e", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/87544.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/422a9f77892599ecf8e498d0e5e32b1db3cab559/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F87544.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/422a9f77892599ecf8e498d0e5e32b1db3cab559/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F87544.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2F87544.cc?ref=422a9f77892599ecf8e498d0e5e32b1db3cab559", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-O2\" }\n+// { dg-do compile { target c++11 } }\n+\n+#include <cstdlib>\n+#include <vector>\n+\n+template<class T>\n+struct Alloc : public std::allocator<T>\n+{\n+  template<class U>\n+    struct rebind { typedef Alloc<U> other; };\n+\n+  Alloc() : std::allocator<T>() {}\n+\n+  template<class U>\n+    Alloc(const Alloc<U>& other) : std::allocator<T>(other) {}\n+\n+  T* allocate(std::size_t num, const void* = 0)\n+  {\n+    std::size_t size = num * sizeof(T);\n+    void *result = std::malloc(size);\n+    if(size>16 && (std::size_t(result) & 15)!=0) {\n+      std::free(result);\n+      return 0;\n+    }\n+    return static_cast<T*>( result );\n+  }\n+\n+  void deallocate(T* p, std::size_t) { std::free(p); }\n+};\n+\n+unsigned f(std::vector<int, Alloc<int> >& v)\n+{\n+  v.push_back(1);\n+  return v.size();\n+}\n+\n+template<class T>\n+struct Alloc2 : public Alloc<T>\n+{\n+  template<class U>\n+    struct rebind { typedef Alloc2<U> other; };\n+\n+  Alloc2() : Alloc<T>() {}\n+\n+  template<class U>\n+    Alloc2(const Alloc2<U>& other) : Alloc<T>(other) {}\n+\n+  std::size_t max_size() const { return std::size_t(-1) / sizeof(T); }\n+};\n+\n+unsigned g(std::vector<int, Alloc2<int> >& v)\n+{\n+  v.push_back(1);\n+  return v.size();\n+}"}]}