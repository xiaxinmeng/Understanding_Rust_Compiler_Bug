{"sha": "0ae207e94796488449b40fe83263ddcefb4d9479", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFlMjA3ZTk0Nzk2NDg4NDQ5YjQwZmU4MzI2M2RkY2VmYjRkOTQ3OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-06-16T12:42:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-06-16T12:42:21Z"}, "message": "Optimize inserting value_type into std::vector\n\n\t* include/bits/stl_vector.h (vector::_S_insert_aux_assign): Define\n\tnew overloaded functions.\n\t* include/bits/vector.tcc (vector::_M_insert_aux): Use new functions\n\tto avoid creating a redundant temporary.\n\t* testsuite/23_containers/vector/modifiers/insert_vs_emplace.cc: New\n\ttest.\n\nFrom-SVN: r237526", "tree": {"sha": "c21c54c01fa1e1f2b1e9694416e725c929a22523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c21c54c01fa1e1f2b1e9694416e725c929a22523"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ae207e94796488449b40fe83263ddcefb4d9479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ae207e94796488449b40fe83263ddcefb4d9479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ae207e94796488449b40fe83263ddcefb4d9479", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ae207e94796488449b40fe83263ddcefb4d9479/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5e336b111def9f729b874fc1af3bddb73a3d612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e336b111def9f729b874fc1af3bddb73a3d612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e336b111def9f729b874fc1af3bddb73a3d612"}], "stats": {"total": 593, "additions": 592, "deletions": 1}, "files": [{"sha": "59fd8c80b3570dce67927d7419413c93e3ade44b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae207e94796488449b40fe83263ddcefb4d9479/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae207e94796488449b40fe83263ddcefb4d9479/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0ae207e94796488449b40fe83263ddcefb4d9479", "patch": "@@ -1,3 +1,12 @@\n+2016-06-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_vector.h (vector::_S_insert_aux_assign): Define\n+\tnew overloaded functions.\n+\t* include/bits/vector.tcc (vector::_M_insert_aux): Use new functions\n+\tto avoid creating a redundant temporary.\n+\t* testsuite/23_containers/vector/modifiers/insert_vs_emplace.cc: New\n+\ttest.\n+\n 2016-06-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/stl_deque.h"}, {"sha": "a9d7450c7033ca3884dc79caa30b3ec14a5f1b9d", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae207e94796488449b40fe83263ddcefb4d9479/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae207e94796488449b40fe83263ddcefb4d9479/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=0ae207e94796488449b40fe83263ddcefb4d9479", "patch": "@@ -1411,6 +1411,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       _M_insert_aux(iterator __position, const value_type& __x);\n #else\n+      template<typename... _Args>\n+\tstatic void\n+\t_S_insert_aux_assign(iterator __pos, _Args&&... __args)\n+\t{ *__pos =  _Tp(std::forward<_Args>(__args)...); }\n+\n+      static void\n+      _S_insert_aux_assign(iterator __pos, _Tp&& __arg)\n+      { *__pos = std::move(__arg); }\n+\n       template<typename... _Args>\n \tvoid\n \t_M_insert_aux(iterator __position, _Args&&... __args);"}, {"sha": "9cb546403aa97a36cf496259993e8db4fa51ba91", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae207e94796488449b40fe83263ddcefb4d9479/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae207e94796488449b40fe83263ddcefb4d9479/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=0ae207e94796488449b40fe83263ddcefb4d9479", "patch": "@@ -343,7 +343,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #if __cplusplus < 201103L\n \t  *__position = __x_copy;\n #else\n-\t  *__position = _Tp(std::forward<_Args>(__args)...);\n+\t  _S_insert_aux_assign(__position, std::forward<_Args>(__args)...);\n #endif\n \t}\n       else"}, {"sha": "39a3f031b461a705eba5020b1ed5d9b7ebe6e5de", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/insert_vs_emplace.cc", "status": "added", "additions": 573, "deletions": 0, "changes": 573, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae207e94796488449b40fe83263ddcefb4d9479/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert_vs_emplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae207e94796488449b40fe83263ddcefb4d9479/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert_vs_emplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Finsert_vs_emplace.cc?ref=0ae207e94796488449b40fe83263ddcefb4d9479", "patch": "@@ -0,0 +1,573 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// The class X and test code is by by Howard Hinnant and used under a\n+// Creative Commons Attribution 4.0 International License.\n+// http://creativecommons.org/licenses/by/4.0/\n+// https://github.com/HowardHinnant/papers/blob/master/insert_vs_emplace.html\n+//\n+// The original code was reformatted and modified to use the VERIFY macro\n+// instead of writing to standard output.\n+\n+#include <testsuite_hooks.h>\n+#include <vector>\n+#include <iostream>\n+\n+class X\n+{\n+  int i_;\n+  int* p_;\n+\n+public:\n+  struct special\n+  {\n+    unsigned c;\n+    unsigned dt;\n+    unsigned cc;\n+    unsigned ca;\n+    unsigned mc;\n+    unsigned ma;\n+  };\n+  static special sp;\n+\n+  X(int i, int* p)\n+    : i_(i)\n+      , p_(p)\n+  {\n+    //         std::cout << \"X(int i, int* p)\\n\";\n+    sp.c++;\n+  }\n+\n+  ~X()\n+  {\n+    //         std::cout << \"~X()\\n\";\n+    sp.dt++;\n+  }\n+\n+  X(const X& x)\n+    : i_(x.i_)\n+      , p_(x.p_)\n+  {\n+    //         std::cout << \"X(const X& x)\\n\";\n+    sp.cc++;\n+  }\n+\n+  X& operator=(const X& x)\n+  {\n+\n+    i_ = x.i_;\n+    p_ = x.p_;\n+    //         std::cout << \"X& operator=(const X& x)\\n\";\n+    sp.ca++;\n+    return *this;\n+  }\n+\n+  X(X&& x) noexcept\n+    : i_(x.i_)\n+    , p_(x.p_)\n+    {\n+      //         std::cout << \"X(X&& x)\\n\";\n+      sp.mc++;\n+    }\n+\n+  X& operator=(X&& x) noexcept\n+  {\n+\n+    i_ = x.i_;\n+    p_ = x.p_;\n+    //         std::cout << \"X& operator=(X&& x)\\n\";\n+    sp.ma++;\n+    return *this;\n+  }\n+\n+};\n+\n+std::ostream&\n+operator<<(std::ostream& os, X::special const& sp)\n+{\n+  os << sp.c << '\\n';\n+  os << sp.dt << '\\n';\n+  os << sp.cc << '\\n';\n+  os << sp.ca << '\\n';\n+  os << sp.mc << '\\n';\n+  os << sp.ma << '\\n';\n+  return os;\n+}\n+\n+X::special X::sp{};\n+\n+bool\n+operator==(const X::special& lhs, const X::special& rhs)\n+{\n+  return lhs.c == rhs.c && lhs.dt == rhs.dt\n+    && lhs.cc == rhs.cc && lhs.ca == rhs.ca\n+    && lhs.mc == rhs.mc && lhs.ma == rhs.ma;\n+}\n+\n+// Verify that insert and emplace are equally efficient.\n+// Also verify exact number of operations (which are specific to this\n+// implementation) in order to catch any regressions.\n+\n+// insert vs emplace lvalue no reallocation\n+void\n+test01()\n+{\n+  const X::special expected{ 0, 1, 1, 0, 1, 3 };\n+  X::special ins, emp;\n+  {\n+    std::vector<X> v;\n+    v.reserve(4);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--insert lvalue no reallocation--\\n\";\n+    X::sp = {};\n+    v.insert(v.begin(), x);\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    ins = X::sp;\n+  }\n+  {\n+    std::vector<X> v;\n+    v.reserve(4);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--emplace lvalue no reallocation--\\n\";\n+    X::sp = {};\n+    v.emplace(v.begin(), x);\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    emp = X::sp;\n+  }\n+  VERIFY( ins == emp );\n+  VERIFY( ins == expected );\n+}\n+\n+// insert vs emplace xvalue no reallocation\n+void\n+test02()\n+{\n+  const X::special expected{ 0, 0, 0, 0, 1, 3 };\n+  X::special ins, emp;\n+  {\n+    std::vector<X> v;\n+    v.reserve(4);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--insert xvalue no reallocation--\\n\";\n+    X::sp = {};\n+    v.insert(v.begin(), std::move(x));\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    ins = X::sp;\n+  }\n+  {\n+    std::vector<X> v;\n+    v.reserve(4);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--emplace xvalue no reallocation--\\n\";\n+    X::sp = {};\n+    v.emplace(v.begin(), std::move(x));\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    emp = X::sp;\n+  }\n+  VERIFY( ins == emp );\n+  VERIFY( ins == expected );\n+}\n+\n+// insert vs emplace rvalue no reallocation\n+void\n+test03()\n+{\n+  const X::special expected{ 1, 1, 0, 0, 1, 3 };\n+  X::special ins, emp;\n+  {\n+    std::vector<X> v;\n+    v.reserve(4);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    // std::cout << \"--insert rvalue no reallocation--\\n\";\n+    X::sp = {};\n+    v.insert(v.begin(), X{0,0});\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    ins = X::sp;\n+  }\n+  {\n+    std::vector<X> v;\n+    v.reserve(4);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    // std::cout << \"--emplace rvalue no reallocation--\\n\";\n+    X::sp = {};\n+    v.emplace(v.begin(), X{0,0});\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    emp = X::sp;\n+  }\n+  VERIFY( ins == emp );\n+  VERIFY( ins == expected );\n+}\n+\n+// insert vs emplace lvalue reallocation\n+void\n+test04()\n+{\n+  const X::special expected{ 0, 3, 1, 0, 3, 0 };\n+  X::special ins, emp;\n+  {\n+    std::vector<X> v;\n+    v.reserve(3);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--insert lvalue reallocation--\\n\";\n+    X::sp = {};\n+    v.insert(v.begin(), x);\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    ins = X::sp;\n+  }\n+  {\n+    std::vector<X> v;\n+    v.reserve(3);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--emplace lvalue reallocation--\\n\";\n+    X::sp = {};\n+    v.emplace(v.begin(), x);\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    emp = X::sp;\n+  }\n+  VERIFY( ins == emp );\n+  VERIFY( ins == expected );\n+}\n+\n+// insert vs emplace xvalue reallocation\n+void\n+test05()\n+{\n+  const X::special expected{ 0, 3, 0, 0, 4, 0 };\n+  X::special ins, emp;\n+  {\n+    std::vector<X> v;\n+    v.reserve(3);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--insert xvalue reallocation--\\n\";\n+    X::sp = {};\n+    v.insert(v.begin(), std::move(x));\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    ins = X::sp;\n+  }\n+  {\n+    std::vector<X> v;\n+    v.reserve(3);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--emplace xvalue reallocation--\\n\";\n+    X::sp = {};\n+    v.emplace(v.begin(), std::move(x));\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    emp = X::sp;\n+  }\n+  VERIFY( ins == emp );\n+  VERIFY( ins == expected );\n+}\n+\n+// insert vs emplace rvalue reallocation\n+void\n+test06()\n+{\n+  const X::special expected{ 1, 4, 0, 0, 4, 0 };\n+  X::special ins, emp;\n+  {\n+    std::vector<X> v;\n+    v.reserve(3);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    // std::cout << \"--insert rvalue reallocation--\\n\";\n+    X::sp = {};\n+    v.insert(v.begin(), X{0,0});\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    ins = X::sp;\n+  }\n+  {\n+    std::vector<X> v;\n+    v.reserve(3);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    // std::cout << \"--emplace rvalue reallocation--\\n\";\n+    X::sp = {};\n+    v.emplace(v.begin(), X{0,0});\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    emp = X::sp;\n+  }\n+  VERIFY( ins == emp );\n+  VERIFY( ins == expected );\n+}\n+\n+// push_back vs emplace_back lvalue no reallocation\n+void\n+test07()\n+{\n+  const X::special expected{ 0, 0, 1, 0, 0, 0 };\n+  X::special ins, emp;\n+  {\n+    std::vector<X> v;\n+    v.reserve(4);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--push_back lvalue no reallocation--\\n\";\n+    X::sp = {};\n+    v.push_back(x);\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    ins = X::sp;\n+  }\n+  {\n+    std::vector<X> v;\n+    v.reserve(4);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--emplace_back lvalue no reallocation--\\n\";\n+    X::sp = {};\n+    v.emplace_back(x);\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    emp = X::sp;\n+  }\n+  VERIFY( ins == emp );\n+  VERIFY( ins == expected );\n+}\n+\n+// push_back vs emplace_back xvalue no reallocation\n+void\n+test08()\n+{\n+  const X::special expected{ 0, 0, 0, 0, 1, 0 };\n+  X::special ins, emp;\n+  {\n+    std::vector<X> v;\n+    v.reserve(4);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--push_back xvalue no reallocation--\\n\";\n+    X::sp = {};\n+    v.push_back(std::move(x));\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    ins = X::sp;\n+  }\n+  {\n+    std::vector<X> v;\n+    v.reserve(4);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--emplace_back xvalue no reallocation--\\n\";\n+    X::sp = {};\n+    v.emplace_back(std::move(x));\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    emp = X::sp;\n+  }\n+  VERIFY( ins == emp );\n+  VERIFY( ins == expected );\n+}\n+\n+// push_back vs emplace_back rvalue no reallocation\n+void\n+test09()\n+{\n+  const X::special expected{ 1, 1, 0, 0, 1, 0 };\n+  X::special ins, emp;\n+  {\n+    std::vector<X> v;\n+    v.reserve(4);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    // std::cout << \"--push_back rvalue no reallocation--\\n\";\n+    X::sp = {};\n+    v.push_back(X{0,0});\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    ins = X::sp;\n+  }\n+  {\n+    std::vector<X> v;\n+    v.reserve(4);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    // std::cout << \"--emplace_back rvalue no reallocation--\\n\";\n+    X::sp = {};\n+    v.emplace_back(X{0,0});\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    emp = X::sp;\n+  }\n+  VERIFY( ins == emp );\n+  VERIFY( ins == expected );\n+}\n+\n+// push_back vs emplace_back lvalue reallocation\n+void\n+test10()\n+{\n+  const X::special expected{ 0, 3, 1, 0, 3, 0 };\n+  X::special ins, emp;\n+  {\n+    std::vector<X> v;\n+    v.reserve(3);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--push_back lvalue reallocation--\\n\";\n+    X::sp = {};\n+    v.push_back(x);\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    ins = X::sp;\n+  }\n+  {\n+    std::vector<X> v;\n+    v.reserve(3);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--emplace_back lvalue reallocation--\\n\";\n+    X::sp = {};\n+    v.emplace_back(x);\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    emp = X::sp;\n+  }\n+  VERIFY( ins == emp );\n+  VERIFY( ins == expected );\n+}\n+\n+// push_back vs emplace_back xvalue reallocation\n+void\n+test11()\n+{\n+  const X::special expected{ 0, 3, 0, 0, 4, 0 };\n+  X::special ins, emp;\n+  {\n+    std::vector<X> v;\n+    v.reserve(3);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--push_back xvalue reallocation--\\n\";\n+    X::sp = {};\n+    v.push_back(std::move(x));\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    ins = X::sp;\n+  }\n+  {\n+    std::vector<X> v;\n+    v.reserve(3);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    X x{0,0};\n+    // std::cout << \"--emplace_back xvalue reallocation--\\n\";\n+    X::sp = {};\n+    v.emplace_back(std::move(x));\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    emp = X::sp;\n+  }\n+  VERIFY( ins == emp );\n+  VERIFY( ins == expected );\n+}\n+\n+// push_back vs emplace_back rvalue reallocation\n+void\n+test12()\n+{\n+  const X::special expected{ 1, 4, 0, 0, 4, 0 };\n+  X::special ins, emp;\n+  {\n+    std::vector<X> v;\n+    v.reserve(3);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    // std::cout << \"--push_back rvalue reallocation--\\n\";\n+    X::sp = {};\n+    v.push_back(X{0,0});\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    ins = X::sp;\n+  }\n+  {\n+    std::vector<X> v;\n+    v.reserve(3);\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    v.push_back(X(0,0));\n+    // std::cout << \"--emplace_back rvalue reallocation--\\n\";\n+    X::sp = {};\n+    v.emplace_back(X{0,0});\n+    // std::cout << X::sp;\n+    // std::cout << \"----\\n\";\n+    emp = X::sp;\n+  }\n+  VERIFY( ins == emp );\n+  VERIFY( ins == expected );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  test06();\n+  test07();\n+  test08();\n+  test09();\n+  test10();\n+  test11();\n+  test12();\n+}"}]}