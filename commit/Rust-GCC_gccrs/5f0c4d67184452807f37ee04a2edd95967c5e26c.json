{"sha": "5f0c4d67184452807f37ee04a2edd95967c5e26c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYwYzRkNjcxODQ0NTI4MDdmMzdlZTA0YTJlZGQ5NTk2N2M1ZTI2Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-21T07:52:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-21T07:52:22Z"}, "message": "[multiple changes]\n\n2014-01-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* atree.adb, atree.ads (Num_Extension_Nodes): Switch to Node_Id, since\n\tthis is value is used in Node_Id arithmetic operations.\n\t(Copy_Node, Exchange_Entities): Use loops indexed by Num_Extension_Nodes\n\tinstead of hard-coded unrolled code.\n\n2014-01-21  Yannick Moy  <moy@adacore.com>\n\n\t* gnat1drv.adb: Minor code cleanup, removing useless code.\n\n2014-01-21  Arnaud Charlet  <charlet@adacore.com>\n\n\t* opt.ads (SPARK_Switches_File_Name): New.\n\t* switch-c.adb (Scan_Front_End_Switches): Add handling of -gnates=xxx *\n\t* usage.adb (Usage): Document -gnates, in gnatprove mode only.\n\t* gnat_ugn.texi: Document -gnates.\n\n2014-01-21  Yannick Moy  <moy@adacore.com>\n\n\t* errout.adb (Special_Msg_Delete): Update comment. Remove\n\tspecial case for GNATprove which should not ignore mismatch\n\tin sizes for representation clauses.\n\t* sem_prag.adb (Analyze_Pragma): Remove special case for GNATprove\n\twhich should not ignore pragma Pack.\n\n2014-01-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb: Code clean up.\n\n2014-01-21  Steve Baird  <baird@adacore.com>\n\n\t* gnat_rm.texi: Improve GNAT RM description of SPARK_Mode pragma.\n\nFrom-SVN: r206871", "tree": {"sha": "0e3ea3604b746a28e983ff9bd875059f674f1873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e3ea3604b746a28e983ff9bd875059f674f1873"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f0c4d67184452807f37ee04a2edd95967c5e26c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0c4d67184452807f37ee04a2edd95967c5e26c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0c4d67184452807f37ee04a2edd95967c5e26c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0c4d67184452807f37ee04a2edd95967c5e26c/comments", "author": null, "committer": null, "parents": [{"sha": "4bcf68150f3205da124e9ea303444ebbcb22c151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bcf68150f3205da124e9ea303444ebbcb22c151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bcf68150f3205da124e9ea303444ebbcb22c151"}], "stats": {"total": 298, "additions": 201, "deletions": 97}, "files": [{"sha": "745e40c02d8040d44573f6b35b56c8c72f2c2319", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5f0c4d67184452807f37ee04a2edd95967c5e26c", "patch": "@@ -1,3 +1,37 @@\n+2014-01-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* atree.adb, atree.ads (Num_Extension_Nodes): Switch to Node_Id, since\n+\tthis is value is used in Node_Id arithmetic operations.\n+\t(Copy_Node, Exchange_Entities): Use loops indexed by Num_Extension_Nodes\n+\tinstead of hard-coded unrolled code.\n+\n+2014-01-21  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat1drv.adb: Minor code cleanup, removing useless code.\n+\n+2014-01-21  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* opt.ads (SPARK_Switches_File_Name): New.\n+\t* switch-c.adb (Scan_Front_End_Switches): Add handling of -gnates=xxx *\n+\t* usage.adb (Usage): Document -gnates, in gnatprove mode only.\n+\t* gnat_ugn.texi: Document -gnates.\n+\n+2014-01-21  Yannick Moy  <moy@adacore.com>\n+\n+\t* errout.adb (Special_Msg_Delete): Update comment. Remove\n+\tspecial case for GNATprove which should not ignore mismatch\n+\tin sizes for representation clauses.\n+\t* sem_prag.adb (Analyze_Pragma): Remove special case for GNATprove\n+\twhich should not ignore pragma Pack.\n+\n+2014-01-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb: Code clean up.\n+\n+2014-01-21  Steve Baird  <baird@adacore.com>\n+\n+\t* gnat_rm.texi: Improve GNAT RM description of SPARK_Mode pragma.\n+\n 2014-01-21  Robert Dewar  <dewar@adacore.com>\n \n \t* gcc-interface/gigi.h: Get Flags array address."}, {"sha": "3eb67f60dbc62e3a668114d0be40ced4e54f27b9", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 12, "deletions": 31, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=5f0c4d67184452807f37ee04a2edd95967c5e26c", "patch": "@@ -598,8 +598,8 @@ package body Atree is\n       if With_Extension then\n          if Present (Src) and then Has_Extension (Src) then\n             for J in 1 .. Num_Extension_Nodes loop\n-               Nodes.Append (Nodes.Table (Src + Node_Id (J)));\n-               Flags.Append (Flags.Table (Src + Node_Id (J)));\n+               Nodes.Append (Nodes.Table (Src + J));\n+               Flags.Append (Flags.Table (Src + J));\n             end loop;\n          else\n             for J in 1 .. Num_Extension_Nodes loop\n@@ -739,11 +739,9 @@ package body Atree is\n \n       if Has_Extension (Source) then\n          pragma Assert (Has_Extension (Destination));\n-         Nodes.Table (Destination + 1) := Nodes.Table (Source + 1);\n-         Nodes.Table (Destination + 2) := Nodes.Table (Source + 2);\n-         Nodes.Table (Destination + 3) := Nodes.Table (Source + 3);\n-         Nodes.Table (Destination + 4) := Nodes.Table (Source + 4);\n-         Nodes.Table (Destination + 5) := Nodes.Table (Source + 5);\n+         for J in 1 .. Num_Extension_Nodes loop\n+            Nodes.Table (Destination + J) := Nodes.Table (Source + J);\n+         end loop;\n \n       else\n          pragma Assert (not Has_Extension (Source));\n@@ -1107,36 +1105,19 @@ package body Atree is\n       Temp_Flg : Flags_Byte;\n \n    begin\n-      pragma Assert (Has_Extension (E1)\n+      pragma Assert (True\n+        and then Has_Extension (E1)\n         and then Has_Extension (E2)\n         and then not Nodes.Table (E1).In_List\n         and then not Nodes.Table (E2).In_List);\n \n       --  Exchange the contents of the two entities\n \n-      Temp_Ent := Nodes.Table (E1);\n-      Nodes.Table (E1) := Nodes.Table (E2);\n-      Nodes.Table (E2) := Temp_Ent;\n-\n-      Temp_Ent := Nodes.Table (E1 + 1);\n-      Nodes.Table (E1 + 1) := Nodes.Table (E2 + 1);\n-      Nodes.Table (E2 + 1) := Temp_Ent;\n-\n-      Temp_Ent := Nodes.Table (E1 + 2);\n-      Nodes.Table (E1 + 2) := Nodes.Table (E2 + 2);\n-      Nodes.Table (E2 + 2) := Temp_Ent;\n-\n-      Temp_Ent := Nodes.Table (E1 + 3);\n-      Nodes.Table (E1 + 3) := Nodes.Table (E2 + 3);\n-      Nodes.Table (E2 + 3) := Temp_Ent;\n-\n-      Temp_Ent := Nodes.Table (E1 + 4);\n-      Nodes.Table (E1 + 4) := Nodes.Table (E2 + 4);\n-      Nodes.Table (E2 + 4) := Temp_Ent;\n-\n-      Temp_Ent := Nodes.Table (E1 + 5);\n-      Nodes.Table (E1 + 5) := Nodes.Table (E2 + 5);\n-      Nodes.Table (E2 + 5) := Temp_Ent;\n+      for J in 0 .. Num_Extension_Nodes loop\n+         Temp_Ent := Nodes.Table (E1 + J);\n+         Nodes.Table (E1 + J) := Nodes.Table (E2 + J);\n+         Nodes.Table (E2 + J) := Temp_Ent;\n+      end loop;\n \n       --  Exchange flag bytes for first component. No need to do the exchange\n       --  for the other components, since the flag bytes are always zero."}, {"sha": "39e2471e7ae36463b370f28be98259a6d705df8f", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=5f0c4d67184452807f37ee04a2edd95967c5e26c", "patch": "@@ -73,7 +73,7 @@ package Atree is\n    --  nodes, considered as a single record. The following definition gives\n    --  the number of extension nodes.\n \n-   Num_Extension_Nodes : Int := 5;\n+   Num_Extension_Nodes : Node_Id := 5;\n    --  This value is increased by one if debug flag -gnatd.N is set. This is\n    --  for testing performance impact of adding a new extension node.\n "}, {"sha": "4d4a9f8ecf9abcd045502aeff4d3a516080e222d", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=5f0c4d67184452807f37ee04a2edd95967c5e26c", "patch": "@@ -2976,13 +2976,13 @@ package body Errout is\n \n       elsif Msg = \"size for& too small, minimum allowed is ^\" then\n \n-         --  Suppress \"size too small\" errors in CodePeer mode and SPARK mode,\n-         --  since pragma Pack is also ignored in these configurations.\n+         --  Suppress \"size too small\" errors in CodePeer mode, since code may\n+         --  be analyzed in a different configuration than the one used for\n+         --  compilation. Even when the configurations match, this message\n+         --  may be issued on correct code, because pragma Pack is ignored\n+         --  in CodePeer mode.\n \n-         --  At least the comment is bogus, since you can have this message\n-         --  with no pragma Pack in sight! ???\n-\n-         if CodePeer_Mode or GNATprove_Mode then\n+         if CodePeer_Mode then\n             return True;\n \n          --  When a size is wrong for a frozen type there is no explicit size"}, {"sha": "91f846e72807d112622099106d94e709b905d20b", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=5f0c4d67184452807f37ee04a2edd95967c5e26c", "patch": "@@ -373,12 +373,6 @@ procedure Gnat1drv is\n \n          Operating_Mode := Check_Semantics;\n \n-         --  Skip call to gigi\n-\n-         --  This debug flag is not documented, AARGH! ???\n-\n-         Debug_Flag_HH := True;\n-\n          --  Enable assertions, since they give valuable extra information for\n          --  formal verification.\n "}, {"sha": "d9bee9873e381b9de27adf8bcf7dde67fd52a3f9", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 96, "deletions": 45, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=5f0c4d67184452807f37ee04a2edd95967c5e26c", "patch": "@@ -2366,7 +2366,7 @@ See @ref{Interfacing to C++} for related information.\n Syntax:\n \n @smallexample @c ada\n-pragma CPU (EXPRESSSION);\n+pragma CPU (EXPRESSION);\n @end smallexample\n \n @noindent\n@@ -5915,7 +5915,7 @@ section 7.2.2.\n Syntax:\n \n @smallexample @c ada\n-pragma Relative_Deadline (time_span_EXPRESSSION);\n+pragma Relative_Deadline (time_span_EXPRESSION);\n @end smallexample\n \n @noindent\n@@ -6273,76 +6273,125 @@ pragma SPARK_Mode [ (On | Off | Auto) ] ;\n @end smallexample\n \n @noindent\n-This pragma is used to designate whether a contract and its implementation must\n-follow the SPARK 2014 programming language syntactic and semantic rules. The\n-pragma is intended for use with formal verification tools and has no effect on\n-the generated code.\n+This pragma is used to specify whether a construct must\n+satisfy the syntactic and semantic rules of the SPARK 2014 programming\n+language. The pragma is intended for use with formal verification tools\n+and has no effect on the generated code.\n \n-When used as a configuration pragma over a whole compilation or in a particular\n-compilation unit, it sets the mode of the units involved, in particular:\n+The SPARK_Mode pragma is used to specify the value of the SPARK_Mode aspect\n+(a three-valued aspect having values of On, Off, or Auto) of an entity.\n+More precisely, it is used to specify the aspect value of a ``section''\n+of an entity (the term ``section'' is defined below).\n+If a Spark_Mode pragma's (optional) argument is omitted,\n+an implicit argument of On is assumed.\n+\n+A SPARK_Mode pragma may be used as a configuration pragma and then has the\n+semantics described below. A SPARK_Mode pragma which is not used as a\n+configuration pragma shall not have an argument of Auto.\n+\n+A SPARK_Mode pragma can be used as a local pragma only\n+in the following contexts:\n \n @itemize @bullet\n \n @item\n-@code{On}: All entities in the units must follow the SPARK 2014 language, and\n-an error will be generated if not, unless locally overridden by a local\n-SPARK_Mode pragma or aspect. @code{On} is the default mode when pragma\n-SPARK_Mode is used without an argument.\n+When the pragma is at the start of the visible declarations (preceded only\n+by other pragmas) of a package declaration, it marks the visible part\n+of the package as being in or out of SPARK 2014.\n+\n+@item\n+When the pragma appears at the start of the private declarations of a\n+package (preceded only by other pragmas), it marks the private part\n+of the package as being in or out of SPARK 2014.\n \n @item\n-@code{Off}: The units are considered to be in Ada by default and therefore not\n-part of SPARK 2014 unless overridden locally. These units may be called by\n-SPARK 2014 units.\n+When the pragma appears at the start of the declarations of a\n+package body (preceded only by other pragmas),\n+it marks the declaration list of the package body body as being\n+in or out of SPARK 2014.\n \n @item\n-@code{Auto}: The formal verification tools will automatically detect whether\n-each entity is in SPARK 2014 or in Ada.\n+When the pragma appears at the start of the elaboration statements of\n+a package body (preceded only by other pragmas),\n+it marks the handled_sequence_of_statements of the package body\n+as being in or out of SPARK 2014.\n+\n+@item\n+When the pragma appears after a subprogram declaration (with only other\n+pragmas intervening), it marks the subprogram's specification as\n+being in or out of SPARK 2014.\n+\n+@item\n+When the pragma appears at the start of the declarations of a subprogram\n+body (preceded only by other pragmas), it marks the subprogram body\n+as being in or out of SPARK 2014. For a subprogram body which is\n+not a completion of another declaration, it also applies to the\n+specification of the subprogram.\n \n @end itemize\n \n-Pragma SPARK_Mode can be used as a local pragma with the following semantics:\n+A package is defined to have 4 ``sections'': its visible part, its private\n+part, its body's declaration list, and its body's\n+handled_sequence_of_statements. Any other construct which requires a\n+completion is defined to have 2 ``sections'': its declaration and its\n+completion. Any other construct is defined to have 1 section.\n \n-@itemize @bullet\n+The SPARK_Mode aspect value of an arbitrary section of an arbitrary Ada entity\n+or construct is then defined to be the following value (except if this yields\n+a result of Auto for a non-package; see below):\n \n-@item\n-Auto cannot be used as a mode argument.\n+@itemize\n \n @item\n-When the pragma is at the start of the visible declarations (preceded only\n-by other pragmas) of a package declaration, it marks the whole package\n-(declaration and body) in or out of SPARK 2014.\n+If SPARK_Mode has been specified for the given section of the given entity or\n+construct, then the specified value;\n \n @item\n-When the pragma appears at the start of the private declarations of a\n-package (only other pragmas can appear between the @code{private} keyword\n-and the @code{SPARK_Mode} pragma), it marks the private part in or\n-out of SPARK 2014 (overriding the default mode of the visible part).\n+else if SPARK_Mode has been specified for at least one preceding section of\n+the same entity, then the SPARK_Mode of the immediately preceding section;\n \n @item\n-When the pragma appears immediately at the start of the declarations of a\n-package body (preceded only by other pragmas),\n-it marks the whole body in or out of SPARK 2014 (overriding the default\n-mode set by the declaration).\n+else for any of the visible part or body declarations of a library unit package\n+or either section of a library unit subprogram, if there is an applicable\n+SPARK_Mode configuration pragma then the value specified by the\n+pragma; if no such configuration pragma applies, then an implicit\n+specification of Auto is assumed;\n \n @item\n-When the pragma appears at the start of the elaboration statements of\n-a package body (only other pragmas can appear between the @code{begin}\n-keyword and the @code{SPARK_Mode} pragma),\n-it marks the elaboration statements in or out of SPARK 2014 (overriding\n-the default mode of the package body).\n+else for any subsequent (i.e., not the first) section of a library unit\n+package, the SPARK_Mode of the preceding section;\n \n @item\n-When the pragma appears after a subprogram declaration (with only other\n-pragmas intervening), it marks the whole\n-subprogram (spec and body) in or out of SPARK 2014.\n+else the SPARK_Mode of the enclosing section of the nearest enclosing package\n+or subprogram;\n+\n+@end itemize\n+\n+If the above computation yields a result of Auto for any construct other than\n+one of the four sections of a package, then a result of On or Off is\n+determined instead based on the legality (with respect to the rules of\n+SPARK 2014) of the construct. The construct's SPARK_Mode is On if and only\n+if the construct is in SPARK 2014. [A SPARK_Mode of\n+Auto is therefore only possible for sections of a package.]\n+\n+If an earlier section of an entity has a Spark_Mode of Off, then the\n+Spark_Mode aspect of any later section of that entity shall not be\n+specified to be On. For example,\n+if the specification of a subprogram has a Spark_Mode of Off, then the\n+body of the subprogram shall not have a Spark_Mode of On.\n+\n+The following rules apply to SPARK code (i.e., constructs which\n+have a SPARK_Mode aspect value of On):\n+\n+@itemize\n \n @item\n-When the pragma appears at the start of the declarations of a subprogram\n-body (preceded only by other pragmas), it marks the whole body in or out\n-of SPARK 2014 (overriding the default mode set by the declaration).\n+SPARK code shall only reference SPARK declarations, but a SPARK declaration\n+which requires a completion may have a non-SPARK completion.\n \n @item\n-Any other use of the pragma is illegal.\n+SPARK code shall only enclose SPARK code, except that SPARK code may enclose\n+a non-SPARK completion of an enclosed SPARK declaration.\n \n @end itemize\n \n@@ -7858,7 +7907,9 @@ This aspect is equivalent to pragma @code{Simple_Storage_Pool_Type}.\n @unnumberedsec Aspect SPARK_Mode\n @findex SPARK_Mode\n @noindent\n-This aspect is equivalent to pragma @code{SPARK_Mode}.\n+This aspect is equivalent to pragma @code{SPARK_Mode} and\n+may be specified for either or both of the specification and body\n+of a subprogram or package.\n \n @node Aspect Suppress_Debug_Info\n @unnumberedsec Aspect Suppress_Debug_Info"}, {"sha": "5e519fd58b35aa98e49213c36eff3c70dc4046ca", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=5f0c4d67184452807f37ee04a2edd95967c5e26c", "patch": "@@ -3821,6 +3821,12 @@ these errors become warnings (which can be ignored, or suppressed in the usual\n manner). This can be useful in some specialized circumstances such as the\n temporary use of special test software.\n \n+@item -gnates=@var{path}\n+@cindex @option{-gnates=file} (@command{gcc})\n+Only relevant to the SPARK toolset (gnat2why), where gnatprove passes\n+extra switches via a response file to gnat2why via this switch.\n+This switch is otherwise ignored by gcc.\n+\n @item -gnateS\n @cindex @option{-gnateS} (@command{gcc})\n Synonym of @option{-fdump-scos}, kept for backwards compatibility."}, {"sha": "11de156c75f6ef119c6b5ab259f431a75074e45b", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=5f0c4d67184452807f37ee04a2edd95967c5e26c", "patch": "@@ -1272,6 +1272,11 @@ package Opt is\n    --  GNAT\n    --  Current SPARK mode setting\n \n+   SPARK_Switches_File_Name : String_Ptr := null;\n+   --  GNAT\n+   --  Set to non-null file name by use of the -gnates switch to specify\n+   --  SPARK (gnat2why) specific switches in the given file name.\n+\n    Special_Exception_Package_Used : Boolean := False;\n    --  GNAT\n    --  Set to True if either of the unit GNAT.Most_Recent_Exception or"}, {"sha": "31efbd3d55fbe9d10254c4cca01639a611d0ace8", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=5f0c4d67184452807f37ee04a2edd95967c5e26c", "patch": "@@ -3677,13 +3677,20 @@ package body Sem_Ch4 is\n                --  The parser cannot distinguish between a loop specification\n                --  and an iterator specification. If after pre-analysis the\n                --  proper form has been recognized, rewrite the expression to\n-               --  reflect the right kind. The analysis of the loop has been\n-               --  performed on a copy that has the proper iterator form. This\n-               --  is needed in particular for ASIS navigation.\n+               --  reflect the right kind. This is needed for proper ASIS\n+               --  navigation. If expansion is enabled, the transformation is\n+               --  performed when the expression is rewritten as a loop.\n \n-               Set_Loop_Parameter_Specification (N, Empty);\n                Set_Iterator_Specification (N,\n                  New_Copy_Tree (Iterator_Specification (Parent (Loop_Par))));\n+\n+               Set_Defining_Identifier (Iterator_Specification (N),\n+                 Relocate_Node (Defining_Identifier (Loop_Par)));\n+               Set_Name (Iterator_Specification (N),\n+                 Relocate_Node (Discrete_Subtype_Definition (Loop_Par)));\n+               Set_Comes_From_Source (Iterator_Specification (N),\n+                 Comes_From_Source (Loop_Parameter_Specification (N)));\n+               Set_Loop_Parameter_Specification (N, Empty);\n             end if;\n          end;\n       end if;"}, {"sha": "b98206f9a622f703f4ba1de149d7e3435366ee53", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=5f0c4d67184452807f37ee04a2edd95967c5e26c", "patch": "@@ -16168,11 +16168,11 @@ package body Sem_Prag is\n \n                if not Rep_Item_Too_Late (Typ, N) then\n \n-                  --  In the context of static code analysis, we do not need\n-                  --  complex front-end expansions related to pragma Pack,\n-                  --  so disable handling of pragma Pack in these cases.\n+                  --  In CodePeer mode, we do not need complex front-end\n+                  --  expansions related to pragma Pack, so disable handling\n+                  --  of pragma Pack.\n \n-                  if CodePeer_Mode or GNATprove_Mode then\n+                  if CodePeer_Mode then\n                      null;\n \n                   --  Don't attempt any packing for VM targets. We possibly"}, {"sha": "9cc9e933bebe321cc6aeb5df303bfe1b61c69a31", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=5f0c4d67184452807f37ee04a2edd95967c5e26c", "patch": "@@ -666,6 +666,25 @@ package body Switch.C is\n                   --  files for the benefit of source coverage analysis tools\n                   --  (xcov).\n \n+                  when 's' =>\n+                     if not First_Switch then\n+                        Osint.Fail\n+                          (\"-gnates must not be combined with other switches\");\n+                     end if;\n+\n+                     --  Check for '='\n+\n+                     Ptr := Ptr + 1;\n+\n+                     if Ptr >= Max or else Switch_Chars (Ptr) /= '=' then\n+                        Bad_Switch (\"-gnates\");\n+                     else\n+                        SPARK_Switches_File_Name :=\n+                          new String'(Switch_Chars (Ptr + 1 .. Max));\n+                     end if;\n+\n+                     return;\n+\n                   when 'S' =>\n                      Generate_SCO := True;\n                      Generate_SCO_Instance_Table := True;"}, {"sha": "bfa31cb4aef83e30a868f1821816dddb8d2dd96e", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f0c4d67184452807f37ee04a2edd95967c5e26c/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=5f0c4d67184452807f37ee04a2edd95967c5e26c", "patch": "@@ -236,6 +236,13 @@ begin\n    Write_Switch_Char (\"eP\");\n    Write_Line (\"Pure/Prelaborate errors generate warnings rather than errors\");\n \n+   if GNATprove_Mode then\n+      --  Line for -gnates switch\n+\n+      Write_Switch_Char (\"es=?\");\n+      Write_Line (\"Specify extra switches for gnat2why\");\n+   end if;\n+\n    --  Line for -gnateS switch\n \n    Write_Switch_Char (\"eS\");"}]}