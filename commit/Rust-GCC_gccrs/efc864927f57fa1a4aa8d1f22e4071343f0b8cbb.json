{"sha": "efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjODY0OTI3ZjU3ZmExYTRhYThkMWYyMmU0MDcxMzQzZjBiOGNiYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-10T20:41:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-10T20:41:04Z"}, "message": "libgo: Solaris and x/sys/cpu compatibility fixes\n    \n    Restore Solaris compatibility fixes lost when internal/x/net/lif moved\n    to golang.org/x/net/lif.  Also fix the Makefile for x/net/lif and\n    x/net/route.\n    \n    Change x/sys/cpu to get the cache line size from goarch.sh as the\n    gofrontend version of internal/cpu does.\n    \n    Partially based on work by Rainer Orth.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/194438\n\nFrom-SVN: r275611", "tree": {"sha": "459ff147fd2603203e17c2a17dca1291399fbb51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/459ff147fd2603203e17c2a17dca1291399fbb51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/comments", "author": null, "committer": null, "parents": [{"sha": "4d7bfeec428c5bfd005bb6028221c22e5a8abcdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7bfeec428c5bfd005bb6028221c22e5a8abcdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d7bfeec428c5bfd005bb6028221c22e5a8abcdf"}], "stats": {"total": 171, "additions": 50, "deletions": 121}, "files": [{"sha": "61845bc83c20fd03773b85bb312ec3e90e3cc78d", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "patch": "@@ -1,4 +1,4 @@\n-2f6dd921a21351e94f55a5365a3176af563b5945\n+bf4832d604e7522dee78fca76de220b62a131d54\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "b46f920d8eef9ce62156318e9a71be96fe736366", "filename": "libgo/Makefile.am", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "patch": "@@ -510,6 +510,14 @@ s-cpu: Makefile\n \t$(SHELL) $(srcdir)/mvifdiff.sh cpugen.go.tmp cpugen.go\n \t$(STAMP) $@\n \n+gcpugen.go: s-gcpu; @true\n+s-gcpu: Makefile\n+\trm -f gcpugen.go.tmp\n+\techo \"package cpu\" > gcpugen.go.tmp\n+\techo \"const cacheLineSize = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) cachelinesize`\" >> gcpugen.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh gcpugen.go.tmp gcpugen.go\n+\t$(STAMP) $@\n+\n objabi.go: s-objabi; @true\n s-objabi: Makefile\n \trm -f objabi.go.tmp\n@@ -773,7 +781,7 @@ GOLINK = $(LIBTOOL) --tag GO --mode-link $(GOC) \\\n BUILDDEPS = \\\n \t$(MKDIR_P) $(@D); \\\n \tdir=`echo $@ | sed -e 's/.lo.dep$$//'`; \\\n-\tfiles=`$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/$$dir --extrafiles=\"$(extra_go_files_$(subst /,_,$(subst .lo.dep,,$@)))\" $(matchargs_$(subst /,_,$(subst .lo.dep,,$@)))`; \\\n+\tfiles=`$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/$$dir --extrafiles=\"$(extra_go_files_$(subst .,_,$(subst /,_,$(subst .lo.dep,,$@))))\" $(matchargs_$(subst /,_,$(subst .lo.dep,,$@)))`; \\\n \t$(SHELL) $(srcdir)/godeps.sh `echo $@ | sed -e 's/.dep$$//'` $$files > $@.tmp; \\\n \tif ! cmp $@.tmp $@ >/dev/null 2>/dev/null; then \\\n \t  rm -f `echo $@ | sed -e 's/\\.dep$$//'`; \\\n@@ -804,7 +812,7 @@ GOBENCH =\n CHECK = \\\n \tGC=\"$(GOC) $(GOCFLAGS) $($(subst /,_,$@)_GOCFLAGS) -L `${PWD_COMMAND}` -L `${PWD_COMMAND}`/.libs\"; \\\n \texport GC; \\\n-\tGOLIBS=\"$(extra_check_libs_$(subst /,_,$(@D))) $(MATH_LIBS) $(NET_LIBS) $(LIBS)\"; \\\n+\tGOLIBS=\"$(extra_check_libs_$(subst .,_,$(subst /,_,$(@D)))) $(MATH_LIBS) $(NET_LIBS) $(LIBS)\"; \\\n \texport GOLIBS; \\\n \tRUNTESTFLAGS=\"$(RUNTESTFLAGS)\"; \\\n \texport RUNTESTFLAGS; \\\n@@ -818,7 +826,7 @@ CHECK = \\\n \texport LD_LIBRARY_PATH; \\\n \t$(MKDIR_P) $(@D); \\\n \trm -f $@-testsum $@-testlog; \\\n-\tfiles=`$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/$(@D) --extrafiles=\"$(extra_go_files_$(subst /,_,$(@D)))\" $(matchargs_$(subst /,_,$(@D)))`; \\\n+\tfiles=`$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/$(@D) --extrafiles=\"$(extra_go_files_$(subst .,_,$(subst /,_,$(@D))))\" $(matchargs_$(subst /,_,$(@D)))`; \\\n \tif test \"$(USE_DEJAGNU)\" = \"yes\"; then \\\n \t  $(SHELL) $(srcdir)/testsuite/gotest --goarch=$(GOARCH) --goos=$(GOOS) --dejagnu=yes --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --pkgpath=\"$(@D)\" --pkgfiles=\"$$files\" --testname=\"$(@D)\" $(GOTESTFLAGS); \\\n \telif test \"$(GOBENCH)\" != \"\"; then \\\n@@ -951,6 +959,9 @@ runtime/internal/sys.lo.dep: $(extra_go_files_runtime_internal_sys)\n extra_go_files_internal_cpu = cpugen.go\n internal/cpu.lo.dep: $(extra_go_files_internal_cpu)\n \n+extra_go_files_golang_org_x_sys_cpu = gcpugen.go\n+golang.org/x/sys/cpu.lo.dep: $(extra_go_files_golang_org_x_sys_cpu)\n+\n extra_go_files_internal_goroot = zstdpkglist.go\n internal/goroot.lo.dep: $(extra_go_files_internal_goroot)\n \n@@ -1047,34 +1058,27 @@ endif\n \n if LIBGO_IS_BSD\n \n-# Build internal/x/net/route only on BSD systems.\n+# Build golang.org/x/net/route only on BSD systems.\n \n-$(eval $(call PACKAGE_template,internal/x/net/route))\n+$(eval $(call PACKAGE_template,golang.org/x/net/route))\n \n golangorg_x_net_route_lo = \\\n \tgolang.org/net/route.lo\n-golangorg_x_net_route_check = \\\n-\tgolang.org/x/net/route/check\n \n endif\n \n if LIBGO_IS_SOLARIS\n \n-# Build internal/x/net/lif only on Solaris systems.\n+# Build golang.org/x/net/lif only on Solaris systems.\n \n-$(eval $(call PACKAGE_template,internal/x/net/lif))\n+$(eval $(call PACKAGE_template,golang.org/x/net/lif))\n \n golangorg_x_net_lif_lo = \\\n \tgolang.org/x/net/lif.lo\n-golangorg_x_net_lif_check = \\\n-\tgolang.org/x/net/lif/check\n \n endif\n \n-TPACKAGES = $(shell cat $(srcdir)/check-packages.txt)\n-TEST_PACKAGES = $(addsuffix /check,$(TPACKAGES)) \\\n-\t$(golangorg_x_net_lif_check) \\\n-\t$(golangorg_x_net_route_check)\n+TEST_PACKAGES = $(addsuffix /check,$(shell cat $(srcdir)/check-packages.txt))\n \n check: check-tail\n check-recursive: check-head"}, {"sha": "eeec5fc7c983b98dca4e5e0d0f6bd02b87f16cce", "filename": "libgo/Makefile.in", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "patch": "@@ -973,7 +973,7 @@ GOLINK = $(LIBTOOL) --tag GO --mode-link $(GOC) \\\n BUILDDEPS = \\\n \t$(MKDIR_P) $(@D); \\\n \tdir=`echo $@ | sed -e 's/.lo.dep$$//'`; \\\n-\tfiles=`$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/$$dir --extrafiles=\"$(extra_go_files_$(subst /,_,$(subst .lo.dep,,$@)))\" $(matchargs_$(subst /,_,$(subst .lo.dep,,$@)))`; \\\n+\tfiles=`$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/$$dir --extrafiles=\"$(extra_go_files_$(subst .,_,$(subst /,_,$(subst .lo.dep,,$@))))\" $(matchargs_$(subst /,_,$(subst .lo.dep,,$@)))`; \\\n \t$(SHELL) $(srcdir)/godeps.sh `echo $@ | sed -e 's/.dep$$//'` $$files > $@.tmp; \\\n \tif ! cmp $@.tmp $@ >/dev/null 2>/dev/null; then \\\n \t  rm -f `echo $@ | sed -e 's/\\.dep$$//'`; \\\n@@ -1006,7 +1006,7 @@ GOBENCH =\n CHECK = \\\n \tGC=\"$(GOC) $(GOCFLAGS) $($(subst /,_,$@)_GOCFLAGS) -L `${PWD_COMMAND}` -L `${PWD_COMMAND}`/.libs\"; \\\n \texport GC; \\\n-\tGOLIBS=\"$(extra_check_libs_$(subst /,_,$(@D))) $(MATH_LIBS) $(NET_LIBS) $(LIBS)\"; \\\n+\tGOLIBS=\"$(extra_check_libs_$(subst .,_,$(subst /,_,$(@D)))) $(MATH_LIBS) $(NET_LIBS) $(LIBS)\"; \\\n \texport GOLIBS; \\\n \tRUNTESTFLAGS=\"$(RUNTESTFLAGS)\"; \\\n \texport RUNTESTFLAGS; \\\n@@ -1020,7 +1020,7 @@ CHECK = \\\n \texport LD_LIBRARY_PATH; \\\n \t$(MKDIR_P) $(@D); \\\n \trm -f $@-testsum $@-testlog; \\\n-\tfiles=`$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/$(@D) --extrafiles=\"$(extra_go_files_$(subst /,_,$(@D)))\" $(matchargs_$(subst /,_,$(@D)))`; \\\n+\tfiles=`$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/$(@D) --extrafiles=\"$(extra_go_files_$(subst .,_,$(subst /,_,$(@D))))\" $(matchargs_$(subst /,_,$(@D)))`; \\\n \tif test \"$(USE_DEJAGNU)\" = \"yes\"; then \\\n \t  $(SHELL) $(srcdir)/testsuite/gotest --goarch=$(GOARCH) --goos=$(GOOS) --dejagnu=yes --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --pkgpath=\"$(@D)\" --pkgfiles=\"$$files\" --testname=\"$(@D)\" $(GOTESTFLAGS); \\\n \telif test \"$(GOBENCH)\" != \"\"; then \\\n@@ -1091,6 +1091,7 @@ runtime_internal_sys_lo_check_GOCFLAGS = -fgo-compiling-runtime\n runtime_pprof_check_GOCFLAGS = -static-libgo -fno-inline\n extra_go_files_runtime_internal_sys = version.go\n extra_go_files_internal_cpu = cpugen.go\n+extra_go_files_golang_org_x_sys_cpu = gcpugen.go\n extra_go_files_internal_goroot = zstdpkglist.go\n extra_go_files_go_types = gccgosizes.go\n extra_go_files_cmd_internal_objabi = objabi.go\n@@ -1121,20 +1122,10 @@ extra_check_libs_cmd_vet_internal_cfg = $(abs_builddir)/libgotool.a\n @LIBGO_IS_BSD_TRUE@golangorg_x_net_route_lo = \\\n @LIBGO_IS_BSD_TRUE@\tgolang.org/net/route.lo\n \n-@LIBGO_IS_BSD_TRUE@golangorg_x_net_route_check = \\\n-@LIBGO_IS_BSD_TRUE@\tgolang.org/x/net/route/check\n-\n @LIBGO_IS_SOLARIS_TRUE@golangorg_x_net_lif_lo = \\\n @LIBGO_IS_SOLARIS_TRUE@\tgolang.org/x/net/lif.lo\n \n-@LIBGO_IS_SOLARIS_TRUE@golangorg_x_net_lif_check = \\\n-@LIBGO_IS_SOLARIS_TRUE@\tgolang.org/x/net/lif/check\n-\n-TPACKAGES = $(shell cat $(srcdir)/check-packages.txt)\n-TEST_PACKAGES = $(addsuffix /check,$(TPACKAGES)) \\\n-\t$(golangorg_x_net_lif_check) \\\n-\t$(golangorg_x_net_route_check)\n-\n+TEST_PACKAGES = $(addsuffix /check,$(shell cat $(srcdir)/check-packages.txt))\n MOSTLYCLEANFILES = \\\n \ts-runtime_sysinfo s-sigtab s-runtime-inc s-zstdpkglist \\\n \ts-libcalls s-libcalls-list s-syscall_arch s-gen-sysinfo s-sysinfo \\\n@@ -2629,6 +2620,14 @@ s-cpu: Makefile\n \t$(SHELL) $(srcdir)/mvifdiff.sh cpugen.go.tmp cpugen.go\n \t$(STAMP) $@\n \n+gcpugen.go: s-gcpu; @true\n+s-gcpu: Makefile\n+\trm -f gcpugen.go.tmp\n+\techo \"package cpu\" > gcpugen.go.tmp\n+\techo \"const cacheLineSize = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) cachelinesize`\" >> gcpugen.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh gcpugen.go.tmp gcpugen.go\n+\t$(STAMP) $@\n+\n objabi.go: s-objabi; @true\n s-objabi: Makefile\n \trm -f objabi.go.tmp\n@@ -2830,6 +2829,7 @@ runtime.lo.dep: $(extra_go_files_runtime)\n syscall.lo.dep: $(extra_go_files_syscall)\n runtime/internal/sys.lo.dep: $(extra_go_files_runtime_internal_sys)\n internal/cpu.lo.dep: $(extra_go_files_internal_cpu)\n+golang.org/x/sys/cpu.lo.dep: $(extra_go_files_golang_org_x_sys_cpu)\n internal/goroot.lo.dep: $(extra_go_files_internal_goroot)\n go/types.lo.dep: $(extra_go_files_go_types)\n cmd/internal/objabi.lo.dep: $(extra_go_files_cmd_internal_objabi)\n@@ -2886,13 +2886,13 @@ golang.org/x/sys/cpu_gccgo.lo: go/golang.org/x/sys/cpu/cpu_gccgo.c runtime.inc\n \t@$(MKDIR_P) golang.org/x/sys\n \t$(LTCOMPILE) -c -o $@ $(srcdir)/go/golang.org/x/sys/cpu/cpu_gccgo.c\n \n-# Build internal/x/net/route only on BSD systems.\n+# Build golang.org/x/net/route only on BSD systems.\n \n-@LIBGO_IS_BSD_TRUE@$(eval $(call PACKAGE_template,internal/x/net/route))\n+@LIBGO_IS_BSD_TRUE@$(eval $(call PACKAGE_template,golang.org/x/net/route))\n \n-# Build internal/x/net/lif only on Solaris systems.\n+# Build golang.org/x/net/lif only on Solaris systems.\n \n-@LIBGO_IS_SOLARIS_TRUE@$(eval $(call PACKAGE_template,internal/x/net/lif))\n+@LIBGO_IS_SOLARIS_TRUE@$(eval $(call PACKAGE_template,golang.org/x/net/lif))\n \n check: check-tail\n check-recursive: check-head"}, {"sha": "ea7541456bd7bae3947d7624cc0742e829948d45", "filename": "libgo/go/golang.org/x/net/lif/syscall.go", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fnet%2Flif%2Fsyscall.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fnet%2Flif%2Fsyscall.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fnet%2Flif%2Fsyscall.go?ref=efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "patch": "@@ -11,18 +11,12 @@ import (\n \t\"unsafe\"\n )\n \n-//go:cgo_import_dynamic libc_ioctl ioctl \"libc.so\"\n-\n-//go:linkname procIoctl libc_ioctl\n-\n-var procIoctl uintptr\n-\n-func sysvicall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr) (uintptr, uintptr, syscall.Errno)\n+//extern __go_ioctl_ptr\n+func libc_ioctl(int32, int32, unsafe.Pointer) int32\n \n func ioctl(s, ioc uintptr, arg unsafe.Pointer) error {\n-\t_, _, errno := sysvicall6(uintptr(unsafe.Pointer(&procIoctl)), 3, s, ioc, uintptr(arg), 0, 0, 0)\n-\tif errno != 0 {\n-\t\treturn error(errno)\n+\tif libc_ioctl(int32(s), int32(ioc), arg) < 0 {\n+\t\treturn syscall.GetErrno()\n \t}\n \treturn nil\n }"}, {"sha": "0d9ed2f821ae9db0c5a14744ff7bd26f84da901d", "filename": "libgo/go/golang.org/x/net/lif/zsys_solaris.go", "status": "renamed", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fnet%2Flif%2Fzsys_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fnet%2Flif%2Fzsys_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fnet%2Flif%2Fzsys_solaris.go?ref=efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "patch": "@@ -3,6 +3,8 @@\n \n package lif\n \n+import \"unsafe\"\n+\n const (\n \tsysAF_UNSPEC = 0x0\n \tsysAF_INET   = 0x2\n@@ -67,7 +69,6 @@ const (\n \n type lifnum struct {\n \tFamily    uint16\n-\tPad_cgo_0 [2]byte\n \tFlags     int32\n \tCount     int32\n }\n@@ -81,16 +82,13 @@ type lifreq struct {\n \n type lifconf struct {\n \tFamily    uint16\n-\tPad_cgo_0 [2]byte\n \tFlags     int32\n \tLen       int32\n-\tPad_cgo_1 [4]byte\n-\tLifcu     [8]byte\n+\tLifcu     [unsafe.Sizeof(unsafe.Pointer(nil))]byte\n }\n \n type lifIfinfoReq struct {\n \tMaxhops      uint8\n-\tPad_cgo_0    [3]byte\n \tReachtime    uint32\n \tReachretrans uint32\n \tMaxmtu       uint32", "previous_filename": "libgo/go/golang.org/x/net/lif/zsys_solaris_amd64.go"}, {"sha": "b0ede112d4e8056a030aa383d37e9db954b5d0d6", "filename": "libgo/go/golang.org/x/sys/cpu/cpu_aix_ppc64.go", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_aix_ppc64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_aix_ppc64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_aix_ppc64.go?ref=efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "patch": "@@ -6,8 +6,6 @@\n \n package cpu\n \n-const cacheLineSize = 128\n-\n const (\n \t// getsystemcfg constants\n \t_SC_IMPL     = 2"}, {"sha": "7f2348b7d4b623816a330eb511aed8372af596bf", "filename": "libgo/go/golang.org/x/sys/cpu/cpu_arm.go", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7bfeec428c5bfd005bb6028221c22e5a8abcdf/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_arm.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7bfeec428c5bfd005bb6028221c22e5a8abcdf/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_arm.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_arm.go?ref=4d7bfeec428c5bfd005bb6028221c22e5a8abcdf", "patch": "@@ -1,9 +0,0 @@\n-// Copyright 2018 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package cpu\n-\n-const cacheLineSize = 32\n-\n-func doinit() {}"}, {"sha": "15a9b4a7cc7a8a65b1c7b2c435a7cfafd07a7075", "filename": "libgo/go/golang.org/x/sys/cpu/cpu_linux_arm64.go", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_arm64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_arm64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_arm64.go?ref=efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "patch": "@@ -4,8 +4,6 @@\n \n package cpu\n \n-const cacheLineSize = 64\n-\n // HWCAP/HWCAP2 bits. These are exposed by Linux.\n const (\n \thwcap_FP       = 1 << 0"}, {"sha": "99f8a6399efbf1c7e96639f14c570a85cf84b6da", "filename": "libgo/go/golang.org/x/sys/cpu/cpu_linux_ppc64x.go", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_ppc64x.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_ppc64x.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_ppc64x.go?ref=efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "patch": "@@ -7,8 +7,6 @@\n \n package cpu\n \n-const cacheLineSize = 128\n-\n // HWCAP/HWCAP2 bits. These are exposed by the kernel.\n const (\n \t// ISA Level"}, {"sha": "b88d6b8f662bd8d8968c64c5af1ae2cad5832ba6", "filename": "libgo/go/golang.org/x/sys/cpu/cpu_linux_s390x.go", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_s390x.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_s390x.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_linux_s390x.go?ref=efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "patch": "@@ -4,8 +4,6 @@\n \n package cpu\n \n-const cacheLineSize = 256\n-\n const (\n \t// bit mask values from /usr/include/bits/hwcap.h\n \thwcap_ZARCH  = 2"}, {"sha": "f55e0c82c73adab162cae6ca61b6531b5e39d96b", "filename": "libgo/go/golang.org/x/sys/cpu/cpu_mips64x.go", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7bfeec428c5bfd005bb6028221c22e5a8abcdf/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_mips64x.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7bfeec428c5bfd005bb6028221c22e5a8abcdf/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_mips64x.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_mips64x.go?ref=4d7bfeec428c5bfd005bb6028221c22e5a8abcdf", "patch": "@@ -1,11 +0,0 @@\n-// Copyright 2018 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// +build mips64 mips64le\n-\n-package cpu\n-\n-const cacheLineSize = 32\n-\n-func doinit() {}"}, {"sha": "cda87b1a1b196e846aceffee2bde112978f0fefc", "filename": "libgo/go/golang.org/x/sys/cpu/cpu_mipsx.go", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7bfeec428c5bfd005bb6028221c22e5a8abcdf/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_mipsx.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7bfeec428c5bfd005bb6028221c22e5a8abcdf/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_mipsx.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_mipsx.go?ref=4d7bfeec428c5bfd005bb6028221c22e5a8abcdf", "patch": "@@ -1,11 +0,0 @@\n-// Copyright 2018 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// +build mips mipsle\n-\n-package cpu\n-\n-const cacheLineSize = 32\n-\n-func doinit() {}"}, {"sha": "dd1e76dc921ab797508f3c0f7ac6c42da97610d1", "filename": "libgo/go/golang.org/x/sys/cpu/cpu_other_arm64.go", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7bfeec428c5bfd005bb6028221c22e5a8abcdf/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_arm64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7bfeec428c5bfd005bb6028221c22e5a8abcdf/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_arm64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_other_arm64.go?ref=4d7bfeec428c5bfd005bb6028221c22e5a8abcdf", "patch": "@@ -1,11 +0,0 @@\n-// Copyright 2019 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// +build !linux,arm64\n-\n-package cpu\n-\n-const cacheLineSize = 64\n-\n-func doinit() {}"}, {"sha": "bd9bbda0c082767a2379d70fdc6bbddf91bc3f48", "filename": "libgo/go/golang.org/x/sys/cpu/cpu_wasm.go", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7bfeec428c5bfd005bb6028221c22e5a8abcdf/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_wasm.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7bfeec428c5bfd005bb6028221c22e5a8abcdf/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_wasm.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_wasm.go?ref=4d7bfeec428c5bfd005bb6028221c22e5a8abcdf", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2019 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// +build wasm\n-\n-package cpu\n-\n-// We're compiling the cpu package for an unknown (software-abstracted) CPU.\n-// Make CacheLinePad an empty struct and hope that the usual struct alignment\n-// rules are good enough.\n-\n-const cacheLineSize = 0\n-\n-func doinit() {}"}, {"sha": "6009379c7fabe1edf481d42b5cda47b842241f0a", "filename": "libgo/go/golang.org/x/sys/cpu/cpu_x86.go", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_x86.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_x86.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgolang.org%2Fx%2Fsys%2Fcpu%2Fcpu_x86.go?ref=efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "patch": "@@ -6,8 +6,6 @@\n \n package cpu\n \n-const cacheLineSize = 64\n-\n func init() {\n \tInitialized = true\n "}, {"sha": "63b5cd70c8cf0a27074ddec05867da6472e58982", "filename": "libgo/go/runtime/os_solaris.go", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fruntime%2Fos_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc864927f57fa1a4aa8d1f22e4071343f0b8cbb/libgo%2Fgo%2Fruntime%2Fos_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_solaris.go?ref=efc864927f57fa1a4aa8d1f22e4071343f0b8cbb", "patch": "@@ -31,7 +31,7 @@ func sem_reltimedwait_np(sem *semt, timeout *timespec) int32\n \n //go:nosplit\n func semacreate(mp *m) {\n-\tif mp.mos.waitsema != 0 {\n+\tif mp.waitsema != 0 {\n \t\treturn\n \t}\n \n@@ -44,7 +44,7 @@ func semacreate(mp *m) {\n \tif sem_init(sem, 0, 0) != 0 {\n \t\tthrow(\"sem_init\")\n \t}\n-\tmp.mos.waitsema = uintptr(unsafe.Pointer(sem))\n+\tmp.waitsema = uintptr(unsafe.Pointer(sem))\n }\n \n //go:nosplit\n@@ -54,7 +54,7 @@ func semasleep(ns int64) int32 {\n \t\tvar ts timespec\n \t\tts.setNsec(ns)\n \n-\t\tif sem_reltimedwait_np((*semt)(unsafe.Pointer(_m_.mos.waitsema)), &ts) != 0 {\n+\t\tif sem_reltimedwait_np((*semt)(unsafe.Pointer(_m_.waitsema)), &ts) != 0 {\n \t\t\terr := errno()\n \t\t\tif err == _ETIMEDOUT || err == _EAGAIN || err == _EINTR {\n \t\t\t\treturn -1\n@@ -64,7 +64,7 @@ func semasleep(ns int64) int32 {\n \t\treturn 0\n \t}\n \tfor {\n-\t\tr1 := sem_wait((*semt)(unsafe.Pointer(_m_.mos.waitsema)))\n+\t\tr1 := sem_wait((*semt)(unsafe.Pointer(_m_.waitsema)))\n \t\tif r1 == 0 {\n \t\t\tbreak\n \t\t}\n@@ -78,7 +78,7 @@ func semasleep(ns int64) int32 {\n \n //go:nosplit\n func semawakeup(mp *m) {\n-\tif sem_post((*semt)(unsafe.Pointer(mp.mos.waitsema))) != 0 {\n+\tif sem_post((*semt)(unsafe.Pointer(mp.waitsema))) != 0 {\n \t\tthrow(\"sem_post\")\n \t}\n }"}]}