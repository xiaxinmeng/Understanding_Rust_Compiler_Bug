{"sha": "73f277280f8f89979f1ecea9de0ef8a385f7f0f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNmMjc3MjgwZjhmODk5NzlmMWVjZWE5ZGUwZWY4YTM4NWY3ZjBmOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-09-22T22:56:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-09-22T22:56:08Z"}, "message": "(expand_divmod): Special case for signed CEIL_DIV_EXPR when divisor is\npower of 2.\n\nFrom-SVN: r8123", "tree": {"sha": "6601134e565e4a1b6059231cbac42e3df26e9154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6601134e565e4a1b6059231cbac42e3df26e9154"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73f277280f8f89979f1ecea9de0ef8a385f7f0f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f277280f8f89979f1ecea9de0ef8a385f7f0f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f277280f8f89979f1ecea9de0ef8a385f7f0f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f277280f8f89979f1ecea9de0ef8a385f7f0f8/comments", "author": null, "committer": null, "parents": [{"sha": "eeed1288b804a77aa2914567bb7bf06463076b3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeed1288b804a77aa2914567bb7bf06463076b3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeed1288b804a77aa2914567bb7bf06463076b3a"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "c5860a0f2923629d315d0b606ec0db3dbe6de97c", "filename": "gcc/expmed.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f277280f8f89979f1ecea9de0ef8a385f7f0f8/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f277280f8f89979f1ecea9de0ef8a385f7f0f8/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=73f277280f8f89979f1ecea9de0ef8a385f7f0f8", "patch": "@@ -3247,6 +3247,44 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t  }\n \telse /* signed */\n \t  {\n+\t    if (op1_is_constant && EXACT_POWER_OF_2_OR_ZERO_P (INTVAL (op1))\n+\t\t&& INTVAL (op1) >= 0)\n+\t      {\n+\t\t/* This is extremely similar to the code for the unsigned case\n+\t\t   above.  For 2.7 we should merge these variants, but for\n+\t\t   2.6.1 I don't want to touch the code for unsigned since that\n+\t\t   get used in C.  The signed case will only be used by other\n+\t\t   languages (Ada).  */\n+\n+\t\trtx t1, t2, t3;\n+\t\tunsigned HOST_WIDE_INT d = INTVAL (op1);\n+\t\tt1 = expand_shift (RSHIFT_EXPR, compute_mode, op0,\n+\t\t\t\t   build_int_2 (floor_log2 (d), 0),\n+\t\t\t\t   tquotient, 0);\n+\t\tt2 = expand_binop (compute_mode, and_optab, op0,\n+\t\t\t\t   GEN_INT (d - 1),\n+\t\t\t\t   NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+\t\tt3 = gen_reg_rtx (compute_mode);\n+\t\tt3 = emit_store_flag (t3, NE, t2, const0_rtx,\n+\t\t\t\t      compute_mode, 1, 1);\n+\t\tif (t3 == 0)\n+\t\t  {\n+\t\t    rtx lab;\n+\t\t    lab = gen_label_rtx ();\n+\t\t    emit_cmp_insn (t2, const0_rtx, EQ, NULL_RTX,\n+\t\t\t\t   compute_mode, 0, 0);\n+\t\t    emit_jump_insn (gen_beq (lab));\n+\t\t    expand_inc (t1, const1_rtx);\n+\t\t    emit_label (lab);\n+\t\t    quotient = t1;\n+\t\t  }\n+\t\telse\n+\t\t  quotient = force_operand (gen_rtx (PLUS, compute_mode,\n+\t\t\t\t\t\t     t1, t3),\n+\t\t\t\t\t    tquotient);\n+\t\tbreak;\n+\t      }\n+\n \t    /* Try using an instruction that produces both the quotient and\n \t       remainder, using truncation.  We can easily compensate the\n \t       quotient or remainder to get ceiling rounding, once we have the"}]}