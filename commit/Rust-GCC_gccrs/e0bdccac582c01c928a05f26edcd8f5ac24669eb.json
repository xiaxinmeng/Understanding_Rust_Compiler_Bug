{"sha": "e0bdccac582c01c928a05f26edcd8f5ac24669eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBiZGNjYWM1ODJjMDFjOTI4YTA1ZjI2ZWRjZDhmNWFjMjQ2NjllYg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2021-04-07T02:24:32Z"}, "committer": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2021-04-07T02:24:32Z"}, "message": "tree-optimization/98736 - use programing order preserved RPO in ldist\n\nTree loop distribution uses RPO to build reduced dependence graph,\nit's important that RPO preserves the original programing order.\nThough it usually does so, when distributing loop nest, exit BB can\nbe placed before some loop BBs while after loop header.  This patch\nfixes the issue by calling rev_post_order_and_mark_dfs_back_seme.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/98736\n\t* tree-loop-distribution.c\n\t* (loop_distribution::bb_top_order_init):\n\tCompute RPO with programing order preserved by calling function\n\trev_post_order_and_mark_dfs_back_seme.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/98736\n\t* gcc.c-torture/execute/pr98736.c: New test.", "tree": {"sha": "6e4adb9c136a595e45e5ce2caed7ff09321346ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e4adb9c136a595e45e5ce2caed7ff09321346ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0bdccac582c01c928a05f26edcd8f5ac24669eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bdccac582c01c928a05f26edcd8f5ac24669eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0bdccac582c01c928a05f26edcd8f5ac24669eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bdccac582c01c928a05f26edcd8f5ac24669eb/comments", "author": null, "committer": null, "parents": [{"sha": "a7698c0e1ecad65b1ab651acc82b34e12c7efd35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7698c0e1ecad65b1ab651acc82b34e12c7efd35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7698c0e1ecad65b1ab651acc82b34e12c7efd35"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "c066abcd86ae649cb0a803274fd8e4123fb8d387", "filename": "gcc/testsuite/gcc.c-torture/execute/pr98736.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bdccac582c01c928a05f26edcd8f5ac24669eb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr98736.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bdccac582c01c928a05f26edcd8f5ac24669eb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr98736.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr98736.c?ref=e0bdccac582c01c928a05f26edcd8f5ac24669eb", "patch": "@@ -0,0 +1,14 @@\n+/* PR tree-optimization/98736 */\n+\n+int a[6];\n+char b, c;\n+int main() {\n+  int d[4] = {0, 0, 0, 0};\n+  for (c = 0; c <= 5; c++) {\n+    for (b = 2; b != 0; b++)\n+      a[c] = 8;\n+    a[c] = d[3];\n+  }\n+  if (a[0] != 0)\n+    __builtin_abort();\n+}"}, {"sha": "583bb062b76f61eb81231ee01a7868b127b5b42c", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bdccac582c01c928a05f26edcd8f5ac24669eb/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bdccac582c01c928a05f26edcd8f5ac24669eb/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=e0bdccac582c01c928a05f26edcd8f5ac24669eb", "patch": "@@ -3152,11 +3152,19 @@ loop_distribution::distribute_loop (class loop *loop, vec<gimple *> stmts,\n void loop_distribution::bb_top_order_init (void)\n {\n   int rpo_num;\n-  int *rpo = XNEWVEC (int, last_basic_block_for_fn (cfun));\n+  int *rpo = XNEWVEC (int, n_basic_blocks_for_fn (cfun) - NUM_FIXED_BLOCKS);\n+  edge entry = single_succ_edge (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n+  bitmap exit_bbs = BITMAP_ALLOC (NULL);\n \n   bb_top_order_index = XNEWVEC (int, last_basic_block_for_fn (cfun));\n   bb_top_order_index_size = last_basic_block_for_fn (cfun);\n-  rpo_num = pre_and_rev_post_order_compute_fn (cfun, NULL, rpo, true);\n+\n+  entry->flags &= ~EDGE_DFS_BACK;\n+  bitmap_set_bit (exit_bbs, EXIT_BLOCK);\n+  rpo_num = rev_post_order_and_mark_dfs_back_seme (cfun, entry, exit_bbs, true,\n+\t\t\t\t\t\t   rpo, NULL);\n+  BITMAP_FREE (exit_bbs);\n+\n   for (int i = 0; i < rpo_num; i++)\n     bb_top_order_index[rpo[i]] = i;\n "}]}