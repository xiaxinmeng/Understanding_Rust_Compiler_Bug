{"sha": "357ac4df50fc0c22a5cee64bee133b4f2fdfba38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3YWM0ZGY1MGZjMGMyMmE1Y2VlNjRiZWUxMzNiNGYyZmRmYmEzOA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-06-16T08:45:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:45:19Z"}, "message": "scng.adb: Add call to new Check_EOF routine\n\n2005-06-14  Robert Dewar  <dewar@adacore.com>\n\n\t* scng.adb: Add call to new Check_EOF routine\n\t(Accumulate_Checksum): Properly handle wide wide char >= 2 ** 24\n\tAdd some comments regarding wide character handling\n\n\t* style.ads, styleg.ads, styleg.adb: Implement new style switch -gnatyu\n\n\t* stylesw.ads, stylesw.adb: Implement new style switch -gnatyu\n\n\t* g-utf_32.ads, g-utf_32.adb (Is_UTF_32_Non_Graphic): Other_Format\n\tcharacters are now considered graphic characters and hence yield false\n\tin this call.\n\nFrom-SVN: r101056", "tree": {"sha": "5b916e5fc59de413560d104b03f3d24bb616e5c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b916e5fc59de413560d104b03f3d24bb616e5c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/357ac4df50fc0c22a5cee64bee133b4f2fdfba38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357ac4df50fc0c22a5cee64bee133b4f2fdfba38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/357ac4df50fc0c22a5cee64bee133b4f2fdfba38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/comments", "author": null, "committer": null, "parents": [{"sha": "38d7a13afcafa6d5b53ec2caa8d2d9eda1989152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38d7a13afcafa6d5b53ec2caa8d2d9eda1989152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38d7a13afcafa6d5b53ec2caa8d2d9eda1989152"}], "stats": {"total": 157, "additions": 128, "deletions": 29}, "files": [{"sha": "56f820ff719810f1623624ad7ad8b6b03788969c", "filename": "gcc/ada/g-utf_32.ads", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fg-utf_32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fg-utf_32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-utf_32.ads?ref=357ac4df50fc0c22a5cee64bee133b4f2fdfba38", "patch": "@@ -1,6 +1,6 @@\n ------------------------------------------------------------------------------\n --                                                                          --\n---                         GNAT RUNTIME COMPONENTS                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n --                          G N A T . U T F _ 3 2                           --\n --                                                                          --\n@@ -38,15 +38,19 @@\n --  itself, and we want to be able to compile the compiler with old versions\n --  of GNAT that did not implement Wide_Wide_Character.\n \n---  This package is not available directly for use in application programs,\n---  but it serves as the basis for GNAT.Wide_Case_Utilities and\n---  GNAT.Wide_Wide_Case_Utilities, which can be used directly.\n+--  This package is available directly for use in application programs,\n+--  and also serves as the basis for Ada.Wide_Wide_Characters.Unicode and\n+--  Ada.Wide_Characters.Unicode, which can also be used directly.\n \n package GNAT.UTF_32 is\n \n    type UTF_32 is range 0 .. 16#7FFF_FFFF#;\n    --  So far, the only defined character codes are in 0 .. 16#01_FFFF#\n \n+   --  The following type defines the categories from the unicode definitions.\n+   --  The one addition we make is Fe, which represents the characters FFFE\n+   --  and FFFF in any of the planes.\n+\n    type Category is (\n      Cc,   --  Other, Control\n      Cf,   --  Other, Format\n@@ -77,16 +81,17 @@ package GNAT.UTF_32 is\n      So,   --  Symbol, Other\n      Zl,   --  Separator, Line\n      Zp,   --  Separator, Paragraph\n-     Zs);  --  Separator, Space\n+     Zs,   --  Separator, Space\n+     Fe);  --  relative position FFFE/FFFF in any plane\n \n    function Get_Category (U : UTF_32) return Category;\n    --  Given a UTF32 code, returns corresponding Category, or Cn if\n    --  the code does not have an assigned unicode category.\n \n    --  The following functions perform category tests corresponding to lexical\n    --  classes defined in the Ada standard. There are two interfaces for each\n-   --  function. The first takes a Category (e.g. returned by Get_Category).\n-   --  The second takes a UTF_32 code. The form taking the UTF_32 code is\n+   --  function. The second takes a Category (e.g. returned by Get_Category).\n+   --  The first takes a UTF_32 code. The form taking the UTF_32 code is\n    --  typically more efficient than calling Get_Category, but if several\n    --  different tests are to be performed on the same code, it is more\n    --  efficient to use Get_Category to get the category, then test the\n@@ -160,9 +165,9 @@ package GNAT.UTF_32 is\n    --    Other, Control (Cc)\n    --    Other, Private Use (Co)\n    --    Other, Surrogate (Cs)\n-   --    Other, Format (Cf)\n    --    Separator, Line (Zl)\n    --    Separator, Paragraph (Zp)\n+   --    FFFE or FFFF positions in any plane (Fe)\n    --\n    --  Note that the Ada category format effector is subsumed by the above\n    --  list of Unicode categories.\n@@ -171,6 +176,10 @@ package GNAT.UTF_32 is\n    --  in the list of categories above. This means that should any of these\n    --  code positions be defined in future with graphic characters they will\n    --  be allowed without a need to change implementations or the standard.\n+   --\n+   --  Note that Other, Format (Cf) is also quite deliberately not included\n+   --  in the list of categories above. This means that these characters can\n+   --  be included in character and string literals.\n \n    --  The following function is used to fold to upper case, as required by\n    --  the Ada 2005 standard rules for identifier case folding. Two"}, {"sha": "9d9d0aa53012b0ec62052e85a3257894df540424", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=357ac4df50fc0c22a5cee64bee133b4f2fdfba38", "patch": "@@ -97,7 +97,8 @@ package body Scng is\n    procedure Accumulate_Checksum (C : Char_Code) is\n    begin\n       if C > 16#FFFF# then\n-         Accumulate_Checksum (Character'Val (C / 2 ** 16));\n+         Accumulate_Checksum (Character'Val (C / 2 ** 24));\n+         Accumulate_Checksum (Character'Val ((C / 2 ** 16) mod 256));\n          Accumulate_Checksum (Character'Val ((C / 256) mod 256));\n       else\n          Accumulate_Checksum (Character'Val (C / 256));\n@@ -1110,6 +1111,10 @@ package body Scng is\n \n                   Accumulate_Checksum (Code);\n \n+                  --  In Ada 95 mode we allow any wide characters in a string\n+                  --  but in Ada 2005, the set of characters allowed has been\n+                  --  restricted to graphic characters.\n+\n                   if Ada_Version >= Ada_05\n                     and then Is_UTF_32_Non_Graphic (UTF_32 (Code))\n                   then\n@@ -1236,6 +1241,7 @@ package body Scng is\n          when EOF =>\n             if Scan_Ptr = Source_Last (Current_Source_File) then\n                Check_End_Of_Line;\n+               if Style_Check then Style.Check_EOF; end if;\n                Token := Tok_EOF;\n                return;\n             else\n@@ -1644,7 +1650,11 @@ package body Scng is\n \n                   if Err then\n                      Error_Illegal_Wide_Character;\n-                     Code := Character'Pos (' ');\n+                        Code := Character'Pos (' ');\n+\n+                  --  In Ada 95 mode we allow any wide character in a character\n+                  --  literal, but in Ada 2005, the set of characters allowed\n+                  --  is restricted to graphic characters.\n \n                   elsif Ada_Version >= Ada_05\n                     and then Is_UTF_32_Non_Graphic (UTF_32 (Code))\n@@ -2257,6 +2267,10 @@ package body Scng is\n                      --  stored. It seems reasonable to exclude it from the\n                      --  checksum.\n \n+                     --  Note that it is correct (see AI-395) to simply strip\n+                     --  other format characters, before testing for double\n+                     --  underlines, or for reserved words).\n+\n                      elsif Is_UTF_32_Other (Cat) then\n                         null;\n "}, {"sha": "324cd0ffda65f4aeab896ac7953ed09827c92d41", "filename": "gcc/ada/style.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fstyle.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fstyle.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyle.ads?ref=357ac4df50fc0c22a5cee64bee133b4f2fdfba38", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -111,6 +111,10 @@ package Style is\n      renames Style_Inst.Check_Dot_Dot;\n    --  Called after scanning out dot dot to check spacing\n \n+   procedure Check_EOF\n+     renames Style_Inst.Check_EOF;\n+   --  Called after scanning out end of file mark\n+\n    procedure Check_HT\n      renames Style_Inst.Check_HT;\n    --  Called with Scan_Ptr pointing to a horizontal tab character"}, {"sha": "0a38249563b23066c14755bb76697b07ef575f14", "filename": "gcc/ada/styleg.adb", "status": "modified", "additions": 77, "deletions": 18, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fstyleg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fstyleg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.adb?ref=357ac4df50fc0c22a5cee64bee133b4f2fdfba38", "patch": "@@ -40,6 +40,16 @@ package body Styleg is\n \n    use ASCII;\n \n+   Blank_Lines : Nat := 0;\n+   --  Counts number of empty lines seen. Reset to zero if a non-empty line\n+   --  is encountered. Used to check for trailing blank lines in Check_EOF,\n+   --  and for multiple blank lines.\n+\n+   Blank_Line_Location : Source_Ptr;\n+   --  Remembers location of first blank line in a series. Used to issue an\n+   --  appropriate diagnostic if subsequent blank lines or the end of file\n+   --  is encountered.\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -129,7 +139,6 @@ package body Styleg is\n \n    procedure Check_Attribute_Name (Reserved : Boolean) is\n       pragma Warnings (Off, Reserved);\n-\n    begin\n       if Style_Check_Attribute_Casing then\n          if Determine_Token_Casing /= Mixed_Case then\n@@ -399,6 +408,31 @@ package body Styleg is\n       end if;\n    end Check_Dot_Dot;\n \n+   ---------------\n+   -- Check_EOF --\n+   ---------------\n+\n+   --  In check blanks at end mode, check no blank lines precede the EOF\n+\n+   procedure Check_EOF is\n+   begin\n+      if Style_Check_Blank_Lines then\n+\n+         --  We expect one blank line, from the EOF, but no more than one\n+\n+         if Blank_Lines = 2 then\n+            Error_Msg\n+              (\"(style) blank line not allowed at end of file\",\n+               Blank_Line_Location);\n+\n+         elsif Blank_Lines >= 3 then\n+            Error_Msg\n+              (\"(style) blank lines not allowed at end of file\",\n+               Blank_Line_Location);\n+         end if;\n+      end if;\n+   end Check_EOF;\n+\n    -----------------------------------\n    -- Check_Exponentiation_Operator --\n    -----------------------------------\n@@ -497,7 +531,16 @@ package body Styleg is\n    procedure Check_Line_Terminator (Len : Int) is\n       S : Source_Ptr;\n \n+      L : Int := Len;\n+      --  Length of line (adjusted down for blanks at end of line)\n+\n    begin\n+      --  Reset count of blank lines if first line\n+\n+      if Get_Logical_Line_Number (Scan_Ptr) = 1 then\n+         Blank_Lines := 0;\n+      end if;\n+\n       --  Check FF/VT terminators\n \n       if Style_Check_Form_Feeds then\n@@ -522,30 +565,46 @@ package body Styleg is\n          end if;\n       end if;\n \n-      --  We are now possibly going to check for trailing spaces. There is no\n-      --  point in doing this if the current line is empty. It is actually\n-      --  wrong to do so, because we scan backwards for this purpose, so we\n-      --  would end up looking at different line, or even at invalid buffer\n-      --  locations if we have the first source line at hand.\n+      --  Remove trailing spaces\n \n-      if Len = 0 then\n-         return;\n+      S := Scan_Ptr;\n+      while L > 0 and then Is_White_Space (Source (S - 1)) loop\n+         S := S - 1;\n+         L := L - 1;\n+      end loop;\n+\n+      --  Issue message for blanks at end of line if option enabled\n+\n+      if Style_Check_Blanks_At_End and then L < Len then\n+         Error_Msg\n+           (\"(style) trailing spaces not permitted\", S);\n       end if;\n \n-      --  Check trailing space\n+      --  Deal with empty (blank) line\n \n-      if Style_Check_Blanks_At_End then\n-         if Scan_Ptr >= First_Non_Blank_Location then\n-            if Is_White_Space (Source (Scan_Ptr - 1)) then\n-               S := Scan_Ptr - 1;\n+      if L = 0 then\n \n-               while Is_White_Space (Source (S - 1)) loop\n-                  S := S - 1;\n-               end loop;\n+         --  Increment blank line count\n \n-               Error_Msg (\"(style) trailing spaces not permitted\", S);\n-            end if;\n+         Blank_Lines := Blank_Lines + 1;\n+\n+         --  If first blank line, record location for later error message\n+\n+         if Blank_Lines = 1 then\n+            Blank_Line_Location := Scan_Ptr;\n+         end if;\n+\n+      --  Non-blank line, check for previous multiple blank lines\n+\n+      else\n+         if Style_Check_Blank_Lines and then Blank_Lines > 1 then\n+            Error_Msg\n+              (\"(style) multiple blank lines\", Blank_Line_Location);\n          end if;\n+\n+         --  And reset blank line count\n+\n+         Blank_Lines := 0;\n       end if;\n    end Check_Line_Terminator;\n "}, {"sha": "a3ffc05f4497b10aefafc7d0f27c92fce5e418b0", "filename": "gcc/ada/styleg.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fstyleg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fstyleg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.ads?ref=357ac4df50fc0c22a5cee64bee133b4f2fdfba38", "patch": "@@ -92,6 +92,9 @@ package Styleg is\n    procedure Check_Dot_Dot;\n    --  Called after scanning out dot dot to check spacing\n \n+   procedure Check_EOF;\n+   --  Called after scanning out EOF mark\n+\n    procedure Check_HT;\n    --  Called with Scan_Ptr pointing to a horizontal tab character\n "}, {"sha": "4a60a6dbef67a0ae3d6652a6ed9213c97678dd8f", "filename": "gcc/ada/stylesw.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fstylesw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fstylesw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstylesw.adb?ref=357ac4df50fc0c22a5cee64bee133b4f2fdfba38", "patch": "@@ -37,6 +37,7 @@ package body Stylesw is\n       Style_Check_Indentation         := 0;\n       Style_Check_Attribute_Casing    := False;\n       Style_Check_Blanks_At_End       := False;\n+      Style_Check_Blank_Lines         := False;\n       Style_Check_Comments            := False;\n       Style_Check_DOS_Line_Terminator := False;\n       Style_Check_End_Labels          := False;\n@@ -121,6 +122,7 @@ package body Stylesw is\n       Add ('r', Style_Check_References);\n       Add ('s', Style_Check_Specs);\n       Add ('t', Style_Check_Tokens);\n+      Add ('u', Style_Check_Blank_Lines);\n       Add ('x', Style_Check_Xtra_Parens);\n \n       if Style_Check_Max_Line_Length then\n@@ -300,6 +302,9 @@ package body Stylesw is\n             when 't' =>\n                Style_Check_Tokens              := True;\n \n+            when 'u' =>\n+               Style_Check_Blank_Lines         := True;\n+\n             when 'x' =>\n                Style_Check_Xtra_Parens         := True;\n "}, {"sha": "ab3b3b976ae2fdd85a16d96db56306d3513147ba", "filename": "gcc/ada/stylesw.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fstylesw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357ac4df50fc0c22a5cee64bee133b4f2fdfba38/gcc%2Fada%2Fstylesw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstylesw.ads?ref=357ac4df50fc0c22a5cee64bee133b4f2fdfba38", "patch": "@@ -56,6 +56,11 @@ package Stylesw is\n    --  This can be set True by using the -gnatg or -gnatyb switches. If\n    --  it is True, then spaces at the end of lines are not permitted.\n \n+   Style_Check_Blank_Lines : Boolean := False;\n+   --  This can be set True by using the -gnatg or -gnatyu switches. If\n+   --  it is True, then multiple blank lines are not permitted, and there\n+   --  may not be a blank line at the end of the file.\n+\n    Style_Check_Comments : Boolean := False;\n    --  This can be set True by using the -gnatg or -gnatyc switches. If\n    --  it is True, then comments are style checked as follows:"}]}