{"sha": "916269abda5db96aa0d939d61ec1a2c9addd2728", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE2MjY5YWJkYTVkYjk2YWEwZDkzOWQ2MWVjMWEyYzlhZGRkMjcyOA==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2000-01-29T19:00:43Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2000-01-29T19:00:43Z"}, "message": "Adjust variable names, comments, help strings to c99.\n\nRecognize options with names *99 as well.\n\nFrom-SVN: r31690", "tree": {"sha": "0ee1d6a78dbb25d462368ea2907172a293817a56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ee1d6a78dbb25d462368ea2907172a293817a56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/916269abda5db96aa0d939d61ec1a2c9addd2728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/916269abda5db96aa0d939d61ec1a2c9addd2728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/916269abda5db96aa0d939d61ec1a2c9addd2728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/916269abda5db96aa0d939d61ec1a2c9addd2728/comments", "author": null, "committer": null, "parents": [{"sha": "3194854770602ec204dbfb8b3d469b56d5ef4d9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3194854770602ec204dbfb8b3d469b56d5ef4d9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3194854770602ec204dbfb8b3d469b56d5ef4d9c"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "864ea8bbf56d2c9ad4a2b06ef47276cf6b67df67", "filename": "gcc/c-decl.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/916269abda5db96aa0d939d61ec1a2c9addd2728/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/916269abda5db96aa0d939d61ec1a2c9addd2728/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=916269abda5db96aa0d939d61ec1a2c9addd2728", "patch": "@@ -324,9 +324,9 @@ int flag_no_nonansi_builtin;\n \n int flag_traditional;\n \n-/* Nonzero means use the ISO C9x dialect of C.  */\n+/* Nonzero means use the ISO C99 dialect of C.  */\n \n-int flag_isoc9x = 0;\n+int flag_isoc99 = 0;\n \n /* Nonzero means that we have builtin functions, and main is an int */\n \n@@ -508,11 +508,11 @@ c_decode_option (argc, argv)\n \t recognize:\n \t -std=iso9899:1990\tsame as -ansi\n \t -std=iso9899:199409\tISO C as modified in amend. 1\n-\t -std=iso9899:199x\tISO C 9x\n+\t -std=iso9899:1999\tISO C 99\n \t -std=c89\t\tsame as -std=iso9899:1990\n-\t -std=c9x\t\tsame as -std=iso9899:199x\n+\t -std=c99\t\tsame as -std=iso9899:1999\n \t -std=gnu89\t\tdefault, iso9899:1990 + gnu extensions\n-\t -std=gnu9x\t\tiso9899:199x + gnu extensions\n+\t -std=gnu99\t\tiso9899:1999 + gnu extensions\n       */\n       const char *argstart = &p[5];\n \n@@ -524,37 +524,39 @@ c_decode_option (argc, argv)\n \t  flag_writable_strings = 0;\n \t  flag_no_asm = 1;\n \t  flag_no_nonansi_builtin = 1;\n-\t  flag_isoc9x = 0;\n+\t  flag_isoc99 = 0;\n \t}\n       else if (!strcmp (argstart, \"iso9899:199409\"))\n \t{\n \t  /* ??? The changes since ISO C 1990 are not supported.  */\n \t  goto iso_1990;\n \t}\n       else if (!strcmp (argstart, \"iso9899:199x\")\n-\t       || !strcmp (argstart, \"c9x\"))\n+\t       || !strcmp (argstart, \"iso9899:1999\")\n+\t       || !strcmp (argstart, \"c9x\")\n+\t       || !strcmp (argstart, \"c99\"))\n \t{\n \t  flag_traditional = 0;\n \t  flag_writable_strings = 0;\n \t  flag_no_asm = 1;\n \t  flag_no_nonansi_builtin = 1;\n-\t  flag_isoc9x = 1;\n+\t  flag_isoc99 = 1;\n \t}\n       else if (!strcmp (argstart, \"gnu89\"))\n \t{\n \t  flag_traditional = 0;\n \t  flag_writable_strings = 0;\n \t  flag_no_asm = 0;\n \t  flag_no_nonansi_builtin = 0;\n-\t  flag_isoc9x = 0;\n+\t  flag_isoc99 = 0;\n \t}\n-      else if (!strcmp (argstart, \"gnu9x\"))\n+      else if (!strcmp (argstart, \"gnu9x\") || !strcmp (argstart, \"gnu99\"))\n \t{\n \t  flag_traditional = 0;\n \t  flag_writable_strings = 0;\n \t  flag_no_asm = 0;\n \t  flag_no_nonansi_builtin = 0;\n-\t  flag_isoc9x = 1;\n+\t  flag_isoc99 = 1;\n \t}\n       else\n \terror (\"unknown C standard `%s'\", argstart);\n@@ -3915,12 +3917,12 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t  && ! (specbits & (1 << (int) RID_TYPEDEF) && initialized)\n \t  && ! in_system_header)\n \t{\n-\t  /* Issue a warning if this is an ISO C 9x program or if -Wreturn-type\n+\t  /* Issue a warning if this is an ISO C 99 program or if -Wreturn-type\n \t     and this is a function, or if -Wimplicit; prefer the former\n \t     warning since it is more explicit.  */\n \t  if ((warn_implicit_int || warn_return_type) && funcdef_flag)\n \t    warn_about_return_type = 1;\n-\t  else if (warn_implicit_int || flag_isoc9x)\n+\t  else if (warn_implicit_int || flag_isoc99)\n \t    warning (\"type defaults to `int' in declaration of `%s'\", name);\n \t}\n "}, {"sha": "e8f4d88609d71f13df454491c0b435ecda21d027", "filename": "gcc/cppinit.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/916269abda5db96aa0d939d61ec1a2c9addd2728/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/916269abda5db96aa0d939d61ec1a2c9addd2728/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=916269abda5db96aa0d939d61ec1a2c9addd2728", "patch": "@@ -1,5 +1,5 @@\n /* CPP Library.\n-   Copyright (C) 1986, 87, 89, 92-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1986, 87, 89, 92-98, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -1310,23 +1310,23 @@ cpp_handle_option (pfile, argc, argv)\n       case 'l':\n \tif (! strcmp (argv[i], \"-lang-c\"))\n \t  opts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t    opts->c9x = 1, opts->objc = 0;\n+\t    opts->c99 = 1, opts->objc = 0;\n \tif (! strcmp (argv[i], \"-lang-c89\"))\n \t  {\n \t    opts->cplusplus = 0, opts->cplusplus_comments = 0;\n-\t    opts->c89 = 1, opts->c9x = 0, opts->objc = 0;\n+\t    opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n \t    opts->trigraphs = 1;\n \t    new_pending_define (opts, \"__STRICT_ANSI__\");\n \t  }\n \tif (! strcmp (argv[i], \"-lang-c++\"))\n \t  opts->cplusplus = 1, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t    opts->c9x = 0, opts->objc = 0;\n+\t    opts->c99 = 0, opts->objc = 0;\n \tif (! strcmp (argv[i], \"-lang-objc\"))\n \t  opts->cplusplus = 0, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t    opts->c9x = 0, opts->objc = 1;\n+\t    opts->c99 = 0, opts->objc = 1;\n \tif (! strcmp (argv[i], \"-lang-objc++\"))\n \t  opts->cplusplus = 1, opts->cplusplus_comments = 1, opts->c89 = 0,\n-\t    opts->c9x = 0, opts->objc = 1;\n+\t    opts->c99 = 0, opts->objc = 1;\n \tif (! strcmp (argv[i], \"-lang-asm\"))\n \t  opts->lang_asm = 1;\n \tif (! strcmp (argv[i], \"-lang-fortran\"))\n@@ -1346,26 +1346,27 @@ cpp_handle_option (pfile, argc, argv)\n \tif (!strcmp (argv[i], \"-std=gnu89\"))\n \t  {\n \t    opts->cplusplus = 0, opts->cplusplus_comments = 1;\n-\t    opts->c89 = 1, opts->c9x = 0, opts->objc = 0;\n+\t    opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n \t  }\n-\telse if (!strcmp (argv[i], \"-std=gnu9x\"))\n+\telse if (!strcmp (argv[i], \"-std=gnu9x\")\n+\t\t || !strcmp (argv[i], \"-std=gnu99\"))\n \t  {\n \t    opts->cplusplus = 0, opts->cplusplus_comments = 1;\n-\t    opts->c89 = 0, opts->c9x = 1, opts->objc = 0;\n+\t    opts->c89 = 0, opts->c99 = 1, opts->objc = 0;\n \t    new_pending_define (opts, \"__STDC_VERSION__=199901L\");\n \t  }\n \telse if (!strcmp (argv[i], \"-std=iso9899:1990\")\n \t\t || !strcmp (argv[i], \"-std=c89\"))\n \t  {\n \t    opts->cplusplus = 0, opts->cplusplus_comments = 0;\n-\t    opts->c89 = 1, opts->c9x = 0, opts->objc = 0;\n+\t    opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n \t    opts->trigraphs = 1;\n \t    new_pending_define (opts, \"__STRICT_ANSI__\");\n \t  }\n \telse if (!strcmp (argv[i], \"-std=iso9899:199409\"))\n \t  {\n \t    opts->cplusplus = 0, opts->cplusplus_comments = 0;\n-\t    opts->c89 = 1, opts->c9x = 0, opts->objc = 0;\n+\t    opts->c89 = 1, opts->c99 = 0, opts->objc = 0;\n \t    opts->trigraphs = 1;\n \t    new_pending_define (opts, \"__STRICT_ANSI__\");\n \t    new_pending_define (opts, \"__STDC_VERSION__=199409L\");\n@@ -1376,7 +1377,7 @@ cpp_handle_option (pfile, argc, argv)\n \t\t || !strcmp (argv[i], \"-std=c99\"))\n \t  {\n \t    opts->cplusplus = 0, opts->cplusplus_comments = 1;\n-\t    opts->c89 = 0, opts->c9x = 1, opts->objc = 0;\n+\t    opts->c89 = 0, opts->c99 = 1, opts->objc = 0;\n \t    opts->trigraphs = 1;\n \t    new_pending_define (opts, \"__STRICT_ANSI__\");\n \t    new_pending_define (opts, \"__STDC_VERSION__=199901L\");\n@@ -1717,8 +1718,8 @@ Switches:\\n\\\n   -lang-fortran\t\t    Assume that the input sources are in Fortran\\n\\\n   -lang-chill               Assume that the input sources are in Chill\\n\\\n   -std=<std name>           Specify the conformance standard; one of:\\n\\\n-                            gnu89, gnu9x, c89, c9x, iso9899:1990,\\n\\\n-                            iso9899:199409, iso9899:199x\\n\\\n+                            gnu89, gnu99, c89, c99, iso9899:1990,\\n\\\n+                            iso9899:199409, iso9899:1999\\n\\\n   -+                        Allow parsing of C++ style features\\n\\\n   -w                        Inhibit warning messages\\n\\\n   -Wtrigraphs               Warn if trigraphs are encountered\\n\\"}]}