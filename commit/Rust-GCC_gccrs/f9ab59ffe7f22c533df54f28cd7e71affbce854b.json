{"sha": "f9ab59ffe7f22c533df54f28cd7e71affbce854b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlhYjU5ZmZlN2YyMmM1MzNkZjU0ZjI4Y2Q3ZTcxYWZmYmNlODU0Yg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2018-11-04T23:34:44Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2018-11-04T23:34:44Z"}, "message": "Merge dmd upstream 6243fa6d2\n\nThis introduces a new header that pulls in system includes for use only\nin the DMD front-end part of the compiler, fixing up uses of problematic\nfunctions that are prevalent throughout the code.\n\nCommits merged from dmd.\n\n    Fix build of the D frontend on the Hurd and KFreeBSD.\n    Initial patch from Matthias Klose.\n    https://github.com/dlang/dmd/pull/8893\n\n    Don't care about D/C++ compatibility in C++ port.\n    Fixes build error in https://gcc.gnu.org/PR87788\n    https://github.com/dlang/dmd/pull/8895\n\n    Allow compiling front-end headers with strict warnings.\n    https://github.com/dlang/dmd/pull/8909\n\n    Add root/system.h header for wrapping system includes.\n    Fixes https://gcc.gnu.org/PR87865\n    https://github.com/dlang/dmd/pull/8910\n\n    Move checkedint to dmd/root.\n    https://github.com/dlang/dmd/pull/8912\n\n    Use rmem instead of libc for malloc() and strdup().\n    https://github.com/dlang/dmd/pull/8913\n\n    Use align(8) for alignment of UnionExp, fixing several BUS errors\n    due to alignment issues on SPARC.\n    https://github.com/dlang/dmd/pull/8914\n\n    Don't pass NULL pointer as format parameter to errorSupplemental.\n    https://github.com/dlang/dmd/pull/8916\n\ngcc/d/ChangeLog:\n\n2018-11-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\tPR d/87865\n\t* d-system.h: New file.\n\nFrom-SVN: r265780", "tree": {"sha": "450d012939fe9a9d4435c2cf7002a626c0431429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/450d012939fe9a9d4435c2cf7002a626c0431429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9ab59ffe7f22c533df54f28cd7e71affbce854b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ab59ffe7f22c533df54f28cd7e71affbce854b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ab59ffe7f22c533df54f28cd7e71affbce854b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ab59ffe7f22c533df54f28cd7e71affbce854b/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8bf3d5ed983791a658b86f4eae338e13b6fdc3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8bf3d5ed983791a658b86f4eae338e13b6fdc3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8bf3d5ed983791a658b86f4eae338e13b6fdc3f"}], "stats": {"total": 843, "additions": 360, "deletions": 483}, "files": [{"sha": "d534f36bb3f8568431105a4dd0bdff6c32a0b580", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -1,3 +1,8 @@\n+2018-11-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/87865\n+\t* d-system.h: New file.\n+\n 2018-11-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR d/87824"}, {"sha": "25a83b675b54e688e9f0145a8416371141b77711", "filename": "gcc/d/d-system.h", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fd-system.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fd-system.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-system.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -0,0 +1,53 @@\n+/* d-system.h -- DMD frontend inclusion of gcc header files.\n+ * Copyright (C) 2018 Free Software Foundation, Inc.\n+ *\n+ * GCC is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 3, or (at your option)\n+ * any later version.\n+ *\n+ * GCC is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with GCC; see the file COPYING3.  If not see\n+ * <http://www.gnu.org/licenses/>.\n+ */\n+\n+#ifndef GCC_D_SYSTEM_H\n+#define GCC_D_SYSTEM_H\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+\n+/* Used by the dmd front-end to determine if we have POSIX-style IO.  */\n+#define POSIX (__linux__ || __GLIBC__ || __gnu_hurd__ || __APPLE__ \\\n+\t       || __FreeBSD__ || __OpenBSD__ || __DragonFly__ || __sun)\n+\n+/* Forward assert invariants to gcc_assert.  */\n+#undef assert\n+#define assert(EXPR) gcc_assert(EXPR)\n+\n+/* Forward ctype.h macros used by the dmd front-end to safe-ctype.h.  */\n+#undef isalpha\n+#define isalpha(c) ISALPHA(c)\n+#undef isalnum\n+#define isalnum(c) ISALNUM(c)\n+#undef isdigit\n+#define isdigit(c) ISDIGIT(c)\n+#undef islower\n+#define islower(c) ISLOWER(c)\n+#undef isprint\n+#define isprint(c) ISPRINT(c)\n+#undef isspace\n+#define isspace(c) ISSPACE(c)\n+#undef isupper\n+#define isupper(c) ISUPPER(c)\n+#undef isxdigit\n+#define isxdigit(c) ISXDIGIT(c)\n+#undef tolower\n+#define tolower(c) TOLOWER(c)\n+\n+#endif  /* GCC_D_SYSTEM_H  */"}, {"sha": "7727205bed4bcfb7af22b7dfe11065ffe4eed1d5", "filename": "gcc/d/dmd/MERGE", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -0,0 +1,4 @@\n+6243fa6d2ceab4615a9fe21c5bc9484e52bb2d1e\n+\n+The first line of this file holds the git revision number of the last\n+merge done from the dlang/dmd repository."}, {"sha": "cd60cedc2a5a45b4299cc2c7315fef1cb2bb617d", "filename": "gcc/d/dmd/access.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Faccess.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Faccess.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faccess.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -7,10 +7,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/access.c\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/root.h\"\n #include \"root/rmem.h\"\n "}, {"sha": "cac0b8efd9f39577dd554c0fd644c178da7bba55", "filename": "gcc/d/dmd/aggregate.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Faggregate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Faggregate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faggregate.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -191,7 +191,7 @@ class StructDeclaration : public AggregateDeclaration\n     void semantic(Scope *sc);\n     void semanticTypeInfoMembers();\n     Dsymbol *search(const Loc &loc, Identifier *ident, int flags = SearchLocalsOnly);\n-    const char *kind();\n+    const char *kind() const;\n     void finalizeSize();\n     bool fit(Loc loc, Scope *sc, Expressions *elements, Type *stype);\n     bool isPOD();\n@@ -205,7 +205,7 @@ class UnionDeclaration : public StructDeclaration\n public:\n     UnionDeclaration(Loc loc, Identifier *id);\n     Dsymbol *syntaxCopy(Dsymbol *s);\n-    const char *kind();\n+    const char *kind() const;\n \n     UnionDeclaration *isUnionDeclaration() { return this; }\n     void accept(Visitor *v) { v->visit(this); }\n@@ -306,7 +306,7 @@ class ClassDeclaration : public AggregateDeclaration\n     virtual bool isCPPinterface() const;\n     bool isAbstract();\n     virtual int vtblOffset() const;\n-    const char *kind();\n+    const char *kind() const;\n \n     void addLocalClass(ClassDeclarations *);\n \n@@ -326,7 +326,7 @@ class InterfaceDeclaration : public ClassDeclaration\n     void semantic(Scope *sc);\n     bool isBaseOf(ClassDeclaration *cd, int *poffset);\n     bool isBaseOf(BaseClass *bc, int *poffset);\n-    const char *kind();\n+    const char *kind() const;\n     int vtblOffset() const;\n     bool isCPPinterface() const;\n     bool isCOMinterface() const;"}, {"sha": "f4d627ff42d7c039079896d409b0ad45d9ec76fd", "filename": "gcc/d/dmd/aliasthis.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Faliasthis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Faliasthis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faliasthis.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,8 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/aliasthis.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n #include \"mars.h\"\n #include \"identifier.h\"\n@@ -163,7 +162,7 @@ void AliasThis::semantic(Scope *sc)\n     semanticRun = PASSsemanticdone;\n }\n \n-const char *AliasThis::kind()\n+const char *AliasThis::kind() const\n {\n     return \"alias this\";\n }"}, {"sha": "290ccd63088ca2ea7f83220288411453934af2f7", "filename": "gcc/d/dmd/aliasthis.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Faliasthis.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Faliasthis.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faliasthis.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -24,7 +24,7 @@ class AliasThis : public Dsymbol\n \n     Dsymbol *syntaxCopy(Dsymbol *);\n     void semantic(Scope *sc);\n-    const char *kind();\n+    const char *kind() const;\n     AliasThis *isAliasThis() { return this; }\n     void accept(Visitor *v) { v->visit(this); }\n };"}, {"sha": "bec32a892e2ffccf0eed312a4601c2fa9b3c6e4f", "filename": "gcc/d/dmd/apply.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fapply.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fapply.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fapply.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,8 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/apply.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n #include \"mars.h\"\n #include \"expression.h\""}, {"sha": "c37d48a3691314ae32375e7aeba9dc473d7465ed", "filename": "gcc/d/dmd/argtypes.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fargtypes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fargtypes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fargtypes.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,10 +8,8 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/argtypes.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n-\n-#include \"checkedint.h\"\n+#include \"root/dsystem.h\"\n+#include \"root/checkedint.h\"\n \n #include \"mars.h\"\n #include \"dsymbol.h\""}, {"sha": "91c1b76e4ab4c662f7ce378ee2200d3412799b92", "filename": "gcc/d/dmd/arrayop.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Farrayop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Farrayop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Farrayop.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,10 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/arrayop.c\n  */\n \n-#include <stdio.h>\n-#include <string.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/rmem.h\"\n #include \"root/aav.h\"\n "}, {"sha": "05728518ff11d910e000de3931e7e7b8f84e4c2a", "filename": "gcc/d/dmd/attrib.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fattrib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fattrib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fattrib.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,11 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/attrib.c\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <string.h>                     // memcpy()\n-\n+#include \"root/dsystem.h\"               // memcmp()\n #include \"root/rmem.h\"\n \n #include \"mars.h\""}, {"sha": "a491605fc1303ec99e3d9bbc5b77d5a244f02984", "filename": "gcc/d/dmd/attrib.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fattrib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fattrib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fattrib.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -212,10 +212,10 @@ class StaticForeachDeclaration : public ConditionalDeclaration\n     Dsymbols *cache;\n \n     Dsymbol *syntaxCopy(Dsymbol *s);\n-    bool oneMember(Dsymbol *ps, Identifier *ident);\n+    bool oneMember(Dsymbol **ps, Identifier *ident);\n     Dsymbols *include(Scope *sc, ScopeDsymbol *sds);\n     void addMember(Scope *sc, ScopeDsymbol *sds);\n-    void addComment(const char *comment);\n+    void addComment(const utf8_t *comment);\n     void setScope(Scope *sc);\n     void importAll(Scope *sc);\n     void semantic(Scope *sc);"}, {"sha": "ec15153eb4efd28f479f0516f35a0f74ce409b53", "filename": "gcc/d/dmd/canthrow.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fcanthrow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fcanthrow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcanthrow.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,8 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/canthrow.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n #include \"mars.h\"\n #include \"init.h\""}, {"sha": "4384dc8064f9d755ac03b9897b257ca97d47fb46", "filename": "gcc/d/dmd/clone.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fclone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fclone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fclone.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,11 +8,9 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/clone.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n-#include <new>\n-\n+#include \"root/dsystem.h\"\n #include \"root/root.h\"\n+\n #include \"aggregate.h\"\n #include \"scope.h\"\n #include \"mtype.h\""}, {"sha": "6c5cf7bd47489009187666ce7cbb92efb38bb3ca", "filename": "gcc/d/dmd/compiler.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fcompiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fcompiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcompiler.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -10,6 +10,8 @@\n \n #pragma once\n \n+#include \"root/array.h\"\n+\n // This file contains a data structure that describes a back-end compiler\n // and implements compiler-specific actions.\n \n@@ -18,6 +20,11 @@ class Module;\n class Type;\n struct Scope;\n \n+// DMD-generated module `__entrypoint` where the C main resides\n+extern Module *entrypoint;\n+// Module in which the D main is\n+extern Module *rootHasMain;\n+\n struct Compiler\n {\n     // CTFE support for cross-compilation."}, {"sha": "0538929f310eca080c3cfa1874cd6007eb967088", "filename": "gcc/d/dmd/cond.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fcond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fcond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcond.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,9 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/cond.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n-#include <string.h>                     // strcmp()\n+#include \"root/dsystem.h\"               // strcmp()\n \n #include \"mars.h\"\n #include \"id.h\""}, {"sha": "4b5dceba62ee5e77ca7eba2a338f3ffad84e266e", "filename": "gcc/d/dmd/constfold.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fconstfold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fconstfold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fconstfold.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,12 +8,11 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/constfold.c\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <string.h>                     // mem{cpy|set|cmp}()\n+#include \"root/dsystem.h\"               // mem{cpy|set|cmp}()\n+\n+#ifndef IN_GCC\n #include <math.h>\n-#include <new>\n+#endif\n \n #include \"root/rmem.h\"\n #include \"root/root.h\"\n@@ -481,13 +480,21 @@ UnionExp Mod(Loc loc, Type *type, Expression *e1, Expression *e2)\n         {\n             real_t r2 = e2->toReal();\n \n+#ifdef IN_GCC\n             c = complex_t(e1->toReal() % r2, e1->toImaginary() % r2);\n+#else\n+            c = complex_t(::fmodl(e1->toReal(), r2), ::fmodl(e1->toImaginary(), r2));\n+#endif\n         }\n         else if (e2->type->isimaginary())\n         {\n             real_t i2 = e2->toImaginary();\n \n+#ifdef IN_GCC\n             c = complex_t(e1->toReal() % i2, e1->toImaginary() % i2);\n+#else\n+            c = complex_t(::fmodl(e1->toReal(), i2), ::fmodl(e1->toImaginary(), i2));\n+#endif\n         }\n         else\n             assert(0);"}, {"sha": "d2d357667cbaafe21c0d511592d068baa5059f81", "filename": "gcc/d/dmd/cppmangle.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fcppmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fcppmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcppmangle.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -21,9 +21,7 @@\n  *  enter `C++, mangling` as the keywords.\n  */\n \n-#include <stdio.h>\n-#include <string.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n #include \"mars.h\"\n #include \"dsymbol.h\"\n@@ -47,9 +45,9 @@ class CppMangleVisitor : public Visitor\n {\n     Objects components;         // array of components available for substitution\n     OutBuffer *buf;             // append the mangling to buf[]\n+  public:\n     Loc loc;                    // location for use in error messages\n \n-    public:\n     // Write <seq-id> to buf\n     void write_seq_id(size_t i)\n     {"}, {"sha": "430342dae54bee3b40904310c5104ede1bdc6559", "filename": "gcc/d/dmd/ctfeexpr.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fctfeexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fctfeexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fctfeexpr.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,12 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/ctfeexpr.c\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <string.h>                     // mem{cpy|set}()\n-#include <new>\n-\n+#include \"root/dsystem.h\"               // mem{cpy|set}()\n #include \"root/rmem.h\"\n \n #include \"mars.h\""}, {"sha": "39471665e4ab47f00aa5894e70d8298670a99ad2", "filename": "gcc/d/dmd/dcast.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdcast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdcast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdcast.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,10 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/cast.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n-#include <string.h>                     // mem{set|cpy}()\n-\n+#include \"root/dsystem.h\"               // mem{set|cpy}()\n #include \"root/rmem.h\"\n \n #include \"mars.h\""}, {"sha": "6fe17b3657670d2b49b895c10fefae500a5d63cb", "filename": "gcc/d/dmd/dclass.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdclass.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,11 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/class.c\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <string.h>                     // mem{cpy|set}()\n-\n+#include \"root/dsystem.h\"               // mem{cpy|set}()\n #include \"root/root.h\"\n #include \"root/rmem.h\"\n \n@@ -1389,7 +1385,7 @@ int ClassDeclaration::vtblOffset() const\n /****************************************\n  */\n \n-const char *ClassDeclaration::kind()\n+const char *ClassDeclaration::kind() const\n {\n     return \"class\";\n }\n@@ -1827,7 +1823,7 @@ bool InterfaceDeclaration::isCPPinterface() const\n /*******************************************\n  */\n \n-const char *InterfaceDeclaration::kind()\n+const char *InterfaceDeclaration::kind() const\n {\n     return \"interface\";\n }"}, {"sha": "9f43b88dd0f7e907fe50688778c67ab5ccc6d1bf", "filename": "gcc/d/dmd/declaration.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdeclaration.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdeclaration.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,10 +8,8 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/declaration.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n-\n-#include \"checkedint.h\"\n+#include \"root/dsystem.h\"\n+#include \"root/checkedint.h\"\n \n #include \"errors.h\"\n #include \"init.h\"\n@@ -87,7 +85,7 @@ void Declaration::semantic(Scope *)\n {\n }\n \n-const char *Declaration::kind()\n+const char *Declaration::kind() const\n {\n     return \"declaration\";\n }\n@@ -188,7 +186,7 @@ Dsymbol *TupleDeclaration::syntaxCopy(Dsymbol *)\n     return NULL;\n }\n \n-const char *TupleDeclaration::kind()\n+const char *TupleDeclaration::kind() const\n {\n     return \"tuple\";\n }\n@@ -575,7 +573,7 @@ bool AliasDeclaration::overloadInsert(Dsymbol *s)\n     return true;\n }\n \n-const char *AliasDeclaration::kind()\n+const char *AliasDeclaration::kind() const\n {\n     return \"alias\";\n }\n@@ -705,7 +703,7 @@ OverDeclaration::OverDeclaration(Identifier *ident, Dsymbol *s, bool hasOverload\n     }\n }\n \n-const char *OverDeclaration::kind()\n+const char *OverDeclaration::kind() const\n {\n     return \"overload alias\";    // todo\n }\n@@ -1770,7 +1768,7 @@ void VarDeclaration::setFieldOffset(AggregateDeclaration *ad, unsigned *poffset,\n     //printf(\" addField '%s' to '%s' at offset %d, size = %d\\n\", toChars(), ad->toChars(), offset, memsize);\n }\n \n-const char *VarDeclaration::kind()\n+const char *VarDeclaration::kind() const\n {\n     return \"variable\";\n }"}, {"sha": "6952bffb38ac903a908268308d401ff211f52ca3", "filename": "gcc/d/dmd/declaration.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdeclaration.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdeclaration.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -127,7 +127,7 @@ class Declaration : public Dsymbol\n \n     Declaration(Identifier *id);\n     void semantic(Scope *sc);\n-    const char *kind();\n+    const char *kind() const;\n     d_uns64 size(Loc loc);\n     int checkModify(Loc loc, Scope *sc, Type *t, Expression *e1, int flag);\n \n@@ -177,7 +177,7 @@ class TupleDeclaration : public Declaration\n \n     TupleDeclaration(Loc loc, Identifier *ident, Objects *objects);\n     Dsymbol *syntaxCopy(Dsymbol *);\n-    const char *kind();\n+    const char *kind() const;\n     Type *getType();\n     Dsymbol *toAlias2();\n     bool needThis();\n@@ -202,7 +202,7 @@ class AliasDeclaration : public Declaration\n     void semantic(Scope *sc);\n     void aliasSemantic(Scope *sc);\n     bool overloadInsert(Dsymbol *s);\n-    const char *kind();\n+    const char *kind() const;\n     Type *getType();\n     Dsymbol *toAlias();\n     Dsymbol *toAlias2();\n@@ -222,7 +222,7 @@ class OverDeclaration : public Declaration\n     bool hasOverloads;\n \n     OverDeclaration(Identifier *ident, Dsymbol *s, bool hasOverloads = true);\n-    const char *kind();\n+    const char *kind() const;\n     void semantic(Scope *sc);\n     bool equals(RootObject *o);\n     bool overloadInsert(Dsymbol *s);\n@@ -269,7 +269,7 @@ class VarDeclaration : public Declaration\n     void semantic(Scope *sc);\n     void setFieldOffset(AggregateDeclaration *ad, unsigned *poffset, bool isunion);\n     void semantic2(Scope *sc);\n-    const char *kind();\n+    const char *kind() const;\n     AggregateDeclaration *isThis();\n     bool needThis();\n     bool isExport() const;\n@@ -654,7 +654,7 @@ class FuncDeclaration : public Declaration\n     virtual bool isFinalFunc();\n     virtual bool addPreInvariant();\n     virtual bool addPostInvariant();\n-    const char *kind();\n+    const char *kind() const;\n     FuncDeclaration *isUnique();\n     bool checkNestedReference(Scope *sc, Loc loc);\n     bool needsClosure();\n@@ -690,7 +690,7 @@ class FuncAliasDeclaration : public FuncDeclaration\n     FuncAliasDeclaration(Identifier *ident, FuncDeclaration *funcalias, bool hasOverloads = true);\n \n     FuncAliasDeclaration *isFuncAliasDeclaration() { return this; }\n-    const char *kind();\n+    const char *kind() const;\n \n     FuncDeclaration *toAliasFunc();\n     void accept(Visitor *v) { v->visit(this); }\n@@ -717,7 +717,7 @@ class FuncLiteralDeclaration : public FuncDeclaration\n     void modifyReturns(Scope *sc, Type *tret);\n \n     FuncLiteralDeclaration *isFuncLiteralDeclaration() { return this; }\n-    const char *kind();\n+    const char *kind() const;\n     const char *toPrettyChars(bool QualifyTypes = false);\n     void accept(Visitor *v) { v->visit(this); }\n };\n@@ -728,7 +728,7 @@ class CtorDeclaration : public FuncDeclaration\n     CtorDeclaration(Loc loc, Loc endloc, StorageClass stc, Type *type);\n     Dsymbol *syntaxCopy(Dsymbol *);\n     void semantic(Scope *sc);\n-    const char *kind();\n+    const char *kind() const;\n     const char *toChars();\n     bool isVirtual();\n     bool addPreInvariant();\n@@ -760,7 +760,7 @@ class DtorDeclaration : public FuncDeclaration\n     DtorDeclaration(Loc loc, Loc endloc, StorageClass stc, Identifier *id);\n     Dsymbol *syntaxCopy(Dsymbol *);\n     void semantic(Scope *sc);\n-    const char *kind();\n+    const char *kind() const;\n     const char *toChars();\n     bool isVirtual();\n     bool addPreInvariant();\n@@ -870,7 +870,7 @@ class NewDeclaration : public FuncDeclaration\n     NewDeclaration(Loc loc, Loc endloc, StorageClass stc, Parameters *arguments, int varargs);\n     Dsymbol *syntaxCopy(Dsymbol *);\n     void semantic(Scope *sc);\n-    const char *kind();\n+    const char *kind() const;\n     bool isVirtual();\n     bool addPreInvariant();\n     bool addPostInvariant();\n@@ -888,7 +888,7 @@ class DeleteDeclaration : public FuncDeclaration\n     DeleteDeclaration(Loc loc, Loc endloc, StorageClass stc, Parameters *arguments);\n     Dsymbol *syntaxCopy(Dsymbol *);\n     void semantic(Scope *sc);\n-    const char *kind();\n+    const char *kind() const;\n     bool isDelete();\n     bool isVirtual();\n     bool addPreInvariant();"}, {"sha": "8745026252eb057aa4579fb1104dec128d337eb7", "filename": "gcc/d/dmd/delegatize.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdelegatize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdelegatize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdelegatize.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,8 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/delegatize.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n #include \"mars.h\"\n #include \"expression.h\""}, {"sha": "56652f219c9b055c270a2916bfd8ce7aa0072fc8", "filename": "gcc/d/dmd/denum.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdenum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdenum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdenum.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,10 +8,9 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/enum.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/root.h\"\n+\n #include \"errors.h\"\n #include \"enum.h\"\n #include \"mtype.h\"\n@@ -457,7 +456,7 @@ Type *EnumDeclaration::getType()\n     return type;\n }\n \n-const char *EnumDeclaration::kind()\n+const char *EnumDeclaration::kind() const\n {\n     return \"enum\";\n }\n@@ -515,7 +514,7 @@ Dsymbol *EnumMember::syntaxCopy(Dsymbol *s)\n         origType ? origType->syntaxCopy() : NULL);\n }\n \n-const char *EnumMember::kind()\n+const char *EnumMember::kind() const\n {\n     return \"enum member\";\n }"}, {"sha": "922e18a3fe9b63700c0b95330eede7abbb4ff260", "filename": "gcc/d/dmd/dimport.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdimport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdimport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdimport.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,10 +8,9 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/import.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/root.h\"\n+\n #include \"mars.h\"\n #include \"dsymbol.h\"\n #include \"import.h\"\n@@ -70,7 +69,7 @@ void Import::addAlias(Identifier *name, Identifier *alias)\n     aliases.push(alias);\n }\n \n-const char *Import::kind()\n+const char *Import::kind() const\n {\n     return isstatic ? \"static import\" : \"import\";\n }"}, {"sha": "2bb1aace2ca155d5fbed2cdb1df1cdabf7844464", "filename": "gcc/d/dmd/dinterpret.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdinterpret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdinterpret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdinterpret.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,12 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/interpret.c\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <string.h>                     // mem{cpy|set}()\n-#include <new>\n-\n+#include \"root/dsystem.h\"               // mem{cpy|set}()\n #include \"root/rmem.h\"\n \n #include \"mars.h\""}, {"sha": "c6171229fd9c55f2bde61caecf01a5aec06e60ed", "filename": "gcc/d/dmd/dmacro.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmacro.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -11,11 +11,7 @@\n /* Simple macro text processor.\n  */\n \n-#include <stdio.h>\n-#include <string.h>\n-#include <time.h>\n-#include <ctype.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n #include \"mars.h\"\n #include \"errors.h\""}, {"sha": "7686c69c9fe03634147a02c9b11ee96ee08f6383", "filename": "gcc/d/dmd/dmangle.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmangle.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,11 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/mangle.c\n  */\n \n-#include <stdio.h>\n-#include <string.h>\n-#include <ctype.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/root.h\"\n \n #include \"mangle.h\""}, {"sha": "55b54b1cee612eb13a7e4542cce49df610d68ad5", "filename": "gcc/d/dmd/dmodule.c", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmodule.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,9 +8,8 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/module.c\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n+#include \"root/rmem.h\"\n \n #include \"mars.h\"\n #include \"module.h\"\n@@ -24,14 +23,6 @@\n #include \"lexer.h\"\n #include \"attrib.h\"\n \n-// For getcwd()\n-#if _WIN32\n-#include <direct.h>\n-#endif\n-#if POSIX\n-#include <unistd.h>\n-#endif\n-\n AggregateDeclaration *Module::moduleinfo;\n \n Module *Module::rootModule;\n@@ -193,7 +184,7 @@ void Module::deleteObjFile()\n         docfile->remove();\n }\n \n-const char *Module::kind()\n+const char *Module::kind() const\n {\n     return \"module\";\n }\n@@ -310,7 +301,8 @@ bool Module::read(Loc loc)\n         {\n             ::error(loc, \"cannot find source code for runtime library file 'object.d'\");\n             errorSupplemental(loc, \"dmd might not be correctly installed. Run 'dmd -man' for installation instructions.\");\n-            errorSupplemental(loc, \"config file: %s\", FileName::canonicalName(global.inifilename));\n+            const char *dmdConfFile = FileName::canonicalName(global.inifilename);\n+            errorSupplemental(loc, \"config file: %s\", dmdConfFile ? dmdConfFile : \"not found\");\n         }\n         else\n         {\n@@ -1043,8 +1035,7 @@ void Module::runDeferredSemantic()\n         }\n         else\n         {\n-            todo = (Dsymbol **)malloc(len * sizeof(Dsymbol *));\n-            assert(todo);\n+            todo = (Dsymbol **)mem.xmalloc(len * sizeof(Dsymbol *));\n             todoalloc = todo;\n         }\n         memcpy(todo, deferred.tdata(), len * sizeof(Dsymbol *));\n@@ -1219,7 +1210,7 @@ Package::Package(Identifier *ident)\n }\n \n \n-const char *Package::kind()\n+const char *Package::kind() const\n {\n     return \"package\";\n }"}, {"sha": "d35ca7b25228f0527db36e1674e24af90be398ae", "filename": "gcc/d/dmd/doc.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdoc.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -10,12 +10,7 @@\n \n // This implements the Ddoc capability.\n \n-#include <stdio.h>\n-#include <string.h>\n-#include <time.h>\n-#include <ctype.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/rmem.h\"\n #include \"root/root.h\"\n #include \"root/port.h\""}, {"sha": "d1428fb8a692a78a2ceb3aa89c8487a802f4a798", "filename": "gcc/d/dmd/doc.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdoc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdoc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdoc.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -10,5 +10,10 @@\n \n #pragma once\n \n+#include \"root/dsystem.h\"\n+\n+class Module;\n+struct OutBuffer;\n+\n void escapeDdocString(OutBuffer *buf, size_t start);\n void gendocfile(Module *m);"}, {"sha": "27412b53d1335bd737e911e85401090f6a4f402a", "filename": "gcc/d/dmd/dscope.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdscope.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdscope.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdscope.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,10 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/scope.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n-#include <string.h>                     // strlen()\n-\n+#include \"root/dsystem.h\"               // strlen()\n #include \"root/root.h\"\n #include \"root/rmem.h\"\n #include \"root/speller.h\""}, {"sha": "f9f15ba9092e7925f61a2d4c44fc9df86c7f2fbe", "filename": "gcc/d/dmd/dstruct.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdstruct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdstruct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdstruct.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,10 +8,9 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/struct.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/root.h\"\n+\n #include \"errors.h\"\n #include \"aggregate.h\"\n #include \"scope.h\"\n@@ -1438,7 +1437,7 @@ bool StructDeclaration::isPOD()\n     return (ispod == ISPODyes);\n }\n \n-const char *StructDeclaration::kind()\n+const char *StructDeclaration::kind() const\n {\n     return \"struct\";\n }\n@@ -1457,7 +1456,7 @@ Dsymbol *UnionDeclaration::syntaxCopy(Dsymbol *s)\n     return StructDeclaration::syntaxCopy(ud);\n }\n \n-const char *UnionDeclaration::kind()\n+const char *UnionDeclaration::kind() const\n {\n     return \"union\";\n }"}, {"sha": "b511b79c7e0cd55ba07e16d1b19bf2764b157424", "filename": "gcc/d/dmd/dsymbol.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,11 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/dsymbol.c\n  */\n \n-#include <stdio.h>\n-#include <string.h>\n-#include <assert.h>\n-#include <limits.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/rmem.h\"\n #include \"root/speller.h\"\n #include \"root/aav.h\"\n@@ -241,9 +237,7 @@ const char *Dsymbol::toPrettyChars(bool QualifyTypes)\n         ++complength;\n \n     // Allocate temporary array comp[]\n-    const char **comp = (const char **)malloc(complength * sizeof(char**));\n-    if (!comp)\n-        Mem::error();\n+    const char **comp = (const char **)mem.xmalloc(complength * sizeof(char**));\n \n     // Fill in comp[] and compute length of final result\n     size_t length = 0;\n@@ -293,7 +287,7 @@ const char *Dsymbol::locToChars()\n     return getLoc().toChars();\n }\n \n-const char *Dsymbol::kind()\n+const char *Dsymbol::kind() const\n {\n     return \"symbol\";\n }\n@@ -921,7 +915,7 @@ void OverloadSet::push(Dsymbol *s)\n     a.push(s);\n }\n \n-const char *OverloadSet::kind()\n+const char *OverloadSet::kind() const\n {\n     return \"overloadset\";\n }\n@@ -1273,7 +1267,7 @@ void ScopeDsymbol::multiplyDefined(Loc loc, Dsymbol *s1, Dsymbol *s2)\n     }\n }\n \n-const char *ScopeDsymbol::kind()\n+const char *ScopeDsymbol::kind() const\n {\n     return \"ScopeDsymbol\";\n }"}, {"sha": "421a043c8a226983f73ecfc686ce06154aa10934", "filename": "gcc/d/dmd/dsymbol.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdsymbol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdsymbol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -193,7 +193,7 @@ class Dsymbol : public RootObject\n \n     virtual Identifier *getIdent();\n     virtual const char *toPrettyChars(bool QualifyTypes = false);\n-    virtual const char *kind();\n+    virtual const char *kind() const;\n     virtual Dsymbol *toAlias();                 // resolve real symbol\n     virtual Dsymbol *toAlias2();\n     virtual int apply(Dsymbol_apply_ft_t fp, void *param);\n@@ -309,7 +309,7 @@ class ScopeDsymbol : public Dsymbol\n     virtual bool isPackageAccessible(Package *p, Prot protection, int flags = 0);\n     bool isforwardRef();\n     static void multiplyDefined(Loc loc, Dsymbol *s1, Dsymbol *s2);\n-    const char *kind();\n+    const char *kind() const;\n     FuncDeclaration *findGetMembers();\n     virtual Dsymbol *symtabInsert(Dsymbol *s);\n     virtual Dsymbol *symtabLookup(Dsymbol *s, Identifier *id);\n@@ -366,7 +366,7 @@ class OverloadSet : public Dsymbol\n     OverloadSet(Identifier *ident, OverloadSet *os = NULL);\n     void push(Dsymbol *s);\n     OverloadSet *isOverloadSet() { return this; }\n-    const char *kind();\n+    const char *kind() const;\n     void accept(Visitor *v) { v->visit(this); }\n };\n \n@@ -380,7 +380,7 @@ class ForwardingScopeDsymbol : public ScopeDsymbol\n     Dsymbol *symtabLookup(Dsymbol *s, Identifier *id);\n     void importScope(Dsymbol *s, Prot protection);\n     void semantic(Scope *sc);\n-    const char *kind();\n+    const char *kind() const;\n \n     ForwardingScopeDsymbol *isForwardingScopeDsymbol() { return this; }\n };"}, {"sha": "9455e976074c5baa012e46b496b140ade6dc9be1", "filename": "gcc/d/dmd/dtemplate.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdtemplate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdtemplate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdtemplate.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -10,9 +10,7 @@\n \n // Handle template implementation\n \n-#include <stdio.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/root.h\"\n #include \"root/aav.h\"\n #include \"root/rmem.h\"\n@@ -689,7 +687,7 @@ void TemplateDeclaration::semantic(Scope *sc)\n      */\n }\n \n-const char *TemplateDeclaration::kind()\n+const char *TemplateDeclaration::kind() const\n {\n     return (onemember && onemember->isAggregateDeclaration())\n                 ? onemember->kind()\n@@ -7844,7 +7842,7 @@ Dsymbol *TemplateInstance::toAlias()\n     return inst;\n }\n \n-const char *TemplateInstance::kind()\n+const char *TemplateInstance::kind() const\n {\n     return \"template instance\";\n }\n@@ -8530,7 +8528,7 @@ void TemplateMixin::semantic3(Scope *sc)\n     }\n }\n \n-const char *TemplateMixin::kind()\n+const char *TemplateMixin::kind() const\n {\n     return \"mixin\";\n }"}, {"sha": "849afaaa6a8de7787cd1dc348f48fe0479962538", "filename": "gcc/d/dmd/dversion.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fdversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdversion.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,9 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/version.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/root.h\"\n \n #include \"identifier.h\"\n@@ -106,7 +104,7 @@ void DebugSymbol::semantic(Scope *)\n         semanticRun = PASSsemanticdone;\n }\n \n-const char *DebugSymbol::kind()\n+const char *DebugSymbol::kind() const\n {\n     return \"debug\";\n }\n@@ -196,7 +194,7 @@ void VersionSymbol::semantic(Scope *)\n         semanticRun = PASSsemanticdone;\n }\n \n-const char *VersionSymbol::kind()\n+const char *VersionSymbol::kind() const\n {\n     return \"version\";\n }"}, {"sha": "78abc8fad97f2e54867ee8e3c94a7834ddb4778d", "filename": "gcc/d/dmd/entity.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fentity.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fentity.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fentity.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,9 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/entity.c\n  */\n \n-#include <string.h>\n-#include <ctype.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/port.h\"\n \n /*********************************************"}, {"sha": "ce500579e17382ad3de8553ff92b1493ee85d4a9", "filename": "gcc/d/dmd/enum.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fenum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fenum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fenum.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -50,7 +50,7 @@ class EnumDeclaration : public ScopeDsymbol\n     void semantic(Scope *sc);\n     bool oneMember(Dsymbol **ps, Identifier *ident);\n     Type *getType();\n-    const char *kind();\n+    const char *kind() const;\n     Dsymbol *search(const Loc &loc, Identifier *ident, int flags = SearchLocalsOnly);\n     bool isDeprecated();                // is Dsymbol deprecated?\n     Prot prot();\n@@ -86,7 +86,7 @@ class EnumMember : public VarDeclaration\n \n     EnumMember(Loc loc, Identifier *id, Expression *value, Type *origType);\n     Dsymbol *syntaxCopy(Dsymbol *s);\n-    const char *kind();\n+    const char *kind() const;\n     void semantic(Scope *sc);\n     Expression *getVarExp(Loc loc, Scope *sc);\n "}, {"sha": "42cc1d70eeac03fbe814e9b48ba6b451a8d40858", "filename": "gcc/d/dmd/errors.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Ferrors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Ferrors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ferrors.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -10,6 +10,7 @@\n \n #pragma once\n \n+#include \"root/dsystem.h\"\n #include \"globals.h\"\n \n bool isConsoleColorSupported();"}, {"sha": "359e4cc91fdbbb2a88035410b3cf9a4790d73825", "filename": "gcc/d/dmd/expression.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fexpression.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fexpression.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,12 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/expression.c\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <ctype.h>\n-#include <math.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/rmem.h\"\n #include \"root/root.h\"\n "}, {"sha": "27a153eaaf1a21108fe24a195ff19b10abd7d73c", "filename": "gcc/d/dmd/expression.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fexpression.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fexpression.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -1490,6 +1490,14 @@ struct UnionExp\n     Expression *copy();\n \n private:\n+    // Ensure that the union is suitably aligned.\n+#if defined(__GNUC__) || defined(__clang__)\n+    __attribute__((aligned(8)))\n+#elif defined(_MSC_VER)\n+    __declspec(align(8))\n+#elif defined(__DMC__)\n+    #pragma pack(8)\n+#endif\n     union\n     {\n         char exp       [sizeof(Expression)];\n@@ -1507,10 +1515,10 @@ struct UnionExp\n         char addrexp   [sizeof(AddrExp)];\n         char indexexp  [sizeof(IndexExp)];\n         char sliceexp  [sizeof(SliceExp)];\n-\n-        // Ensure that the union is suitably aligned.\n-        real_t for_alignment_only;\n     } u;\n+#if defined(__DMC__)\n+    #pragma pack()\n+#endif\n };\n \n /****************************************************************/"}, {"sha": "96ae7efd7e363b678850959a5325db30c6c2154d", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -7,12 +7,7 @@\n  * http://www.boost.org/LICENSE_1_0.txt\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <ctype.h>\n-#include <math.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/rmem.h\"\n #include \"root/root.h\"\n "}, {"sha": "c8f9c5c350a85f7a1535a6c3e9bdcc3aaebab8da", "filename": "gcc/d/dmd/func.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Ffunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Ffunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,8 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/func.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n #include \"mars.h\"\n #include \"init.h\"\n@@ -4254,7 +4253,7 @@ void FuncDeclaration::checkDmain()\n         error(\"parameters must be main() or main(string[] args)\");\n }\n \n-const char *FuncDeclaration::kind()\n+const char *FuncDeclaration::kind() const\n {\n     return generated ? \"generated function\" : \"function\";\n }\n@@ -4645,7 +4644,7 @@ FuncAliasDeclaration::FuncAliasDeclaration(Identifier *ident, FuncDeclaration *f\n     userAttribDecl = funcalias->userAttribDecl;\n }\n \n-const char *FuncAliasDeclaration::kind()\n+const char *FuncAliasDeclaration::kind() const\n {\n     return \"function alias\";\n }\n@@ -4756,7 +4755,7 @@ void FuncLiteralDeclaration::modifyReturns(Scope *sc, Type *tret)\n         ((TypeFunction *)type)->next = tret;\n }\n \n-const char *FuncLiteralDeclaration::kind()\n+const char *FuncLiteralDeclaration::kind() const\n {\n     return (tok != TOKfunction) ? \"delegate\" : \"function\";\n }\n@@ -4869,7 +4868,7 @@ void CtorDeclaration::semantic(Scope *sc)\n     }\n }\n \n-const char *CtorDeclaration::kind()\n+const char *CtorDeclaration::kind() const\n {\n     return \"constructor\";\n }\n@@ -5039,7 +5038,7 @@ bool DtorDeclaration::addPostInvariant()\n     return false;\n }\n \n-const char *DtorDeclaration::kind()\n+const char *DtorDeclaration::kind() const\n {\n     return \"destructor\";\n }\n@@ -5521,7 +5520,7 @@ void NewDeclaration::semantic(Scope *sc)\n     FuncDeclaration::semantic(sc);\n }\n \n-const char *NewDeclaration::kind()\n+const char *NewDeclaration::kind() const\n {\n     return \"allocator\";\n }\n@@ -5600,7 +5599,7 @@ void DeleteDeclaration::semantic(Scope *sc)\n     FuncDeclaration::semantic(sc);\n }\n \n-const char *DeleteDeclaration::kind()\n+const char *DeleteDeclaration::kind() const\n {\n     return \"deallocator\";\n }"}, {"sha": "e5fefe911ea94a80c913f1eb0b49a60b9116eb3a", "filename": "gcc/d/dmd/globals.h", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fglobals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fglobals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fglobals.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -234,22 +234,13 @@ struct Global\n \n extern Global global;\n \n-// Because int64_t and friends may be any integral type of the\n-// correct size, we have to explicitly ask for the correct\n-// integer type to get the correct mangling with ddmd\n-#if __LP64__\n // Be careful not to care about sign when using dinteger_t\n // use this instead of integer_t to\n // avoid conflicts with system #include's\n-typedef unsigned long dinteger_t;\n+typedef uint64_t dinteger_t;\n // Signed and unsigned variants\n-typedef long sinteger_t;\n-typedef unsigned long uinteger_t;\n-#else\n-typedef unsigned long long dinteger_t;\n-typedef long long sinteger_t;\n-typedef unsigned long long uinteger_t;\n-#endif\n+typedef int64_t sinteger_t;\n+typedef uint64_t uinteger_t;\n \n typedef int8_t                  d_int8;\n typedef uint8_t                 d_uns8;"}, {"sha": "a1f3c12ba72819b1547642871e938dc860cd728c", "filename": "gcc/d/dmd/hdrgen.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fhdrgen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fhdrgen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fhdrgen.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -10,11 +10,7 @@\n \n // Routines to emit header files\n \n-#include <ctype.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/rmem.h\"\n \n #include \"mars.h\"\n@@ -2336,7 +2332,8 @@ class PrettyPrintVisitor : public Visitor\n         (ie, 8 chars more than mantissa). Plus one for trailing \\0.\n         Plus one for rounding. */\n         const size_t BUFFER_LEN = sizeof(value) * 3 + 8 + 1 + 1;\n-        char buffer[BUFFER_LEN] = {};\n+        char buffer[BUFFER_LEN];\n+        memset(buffer, 0, BUFFER_LEN);\n         CTFloat::sprint(buffer, 'g', value);\n         assert(strlen(buffer) < BUFFER_LEN);\n "}, {"sha": "f9178beda8d78a87135ead84efa38e3212cb23ac", "filename": "gcc/d/dmd/hdrgen.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fhdrgen.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fhdrgen.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fhdrgen.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -10,8 +10,7 @@\n \n #pragma once\n \n-#include <string.h>                     // memset()\n-\n+#include \"root/dsystem.h\"               // memset()\n #include \"dsymbol.h\"\n \n void genhdrfile(Module *m);"}, {"sha": "f535e5b62a1800422e9af5161ad7c57c8e3b940d", "filename": "gcc/d/dmd/identifier.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fidentifier.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fidentifier.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fidentifier.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,11 +8,9 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/identifier.c\n  */\n \n-#include <stdio.h>\n-#include <string.h>\n-#include <ctype.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/root.h\"\n+\n #include \"identifier.h\"\n #include \"mars.h\"\n #include \"id.h\""}, {"sha": "d07725b02539e4bdc831e88cff034e56a0a5f628", "filename": "gcc/d/dmd/idgen.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fidgen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fidgen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fidgen.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -14,10 +14,7 @@\n //      id.h\n //      id.c\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n struct Msgtable\n {"}, {"sha": "15239fdc283bf714c790de0be46bf8469b278142", "filename": "gcc/d/dmd/impcnvgen.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fimpcnvgen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fimpcnvgen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fimpcnvgen.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,8 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/impcnvgen.c\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n+#include \"root/dsystem.h\"\n \n #include \"mtype.h\"\n "}, {"sha": "9b29490d361addca76d020f3f1817c2159216373", "filename": "gcc/d/dmd/imphint.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fimphint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fimphint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fimphint.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -9,11 +9,7 @@\n  */\n \n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <ctype.h>\n-#include <assert.h>\n-#include <string.h>\n+#include \"root/dsystem.h\"\n \n #include \"mars.h\"\n "}, {"sha": "dcaec5c7acbdbdfb60ae5ae981f680e7e6a4444f", "filename": "gcc/d/dmd/import.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fimport.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -42,7 +42,7 @@ class Import : public Dsymbol\n     Import(Loc loc, Identifiers *packages, Identifier *id, Identifier *aliasId,\n         int isstatic);\n     void addAlias(Identifier *name, Identifier *alias);\n-    const char *kind();\n+    const char *kind() const;\n     Prot prot();\n     Dsymbol *syntaxCopy(Dsymbol *s);    // copy only syntax trees\n     void load(Scope *sc);"}, {"sha": "6603f66bfe618156dbf63ae1c11821492051a862", "filename": "gcc/d/dmd/init.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Finit.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,10 +8,9 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/init.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n+#include \"root/checkedint.h\"\n \n-#include \"checkedint.h\"\n #include \"mars.h\"\n #include \"init.h\"\n #include \"expression.h\""}, {"sha": "bcb620d820910801b5069133668ad7ab8cd7ab2a", "filename": "gcc/d/dmd/initsem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Finitsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Finitsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Finitsem.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -7,7 +7,7 @@\n  * http://www.boost.org/LICENSE_1_0.txt\n  */\n \n-#include \"checkedint.h\"\n+#include \"root/checkedint.h\"\n #include \"mars.h\"\n #include \"init.h\"\n #include \"expression.h\""}, {"sha": "966b9a2986e38fa39d0a0a69fdf5e8a20d409014", "filename": "gcc/d/dmd/intrange.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fintrange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fintrange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fintrange.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,8 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/intrange.c\n  */\n \n-#include <stddef.h>\n-#include <stdint.h>\n+#include \"root/dsystem.h\"\n \n #include \"intrange.h\"\n #include \"mars.h\""}, {"sha": "5ee957103c658c6e9dc019a4867995183ab81340", "filename": "gcc/d/dmd/json.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fjson.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fjson.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fjson.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -10,10 +10,7 @@\n \n // This implements the JSON capability.\n \n-#include <stdio.h>\n-#include <string.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/rmem.h\"\n \n #include \"mars.h\""}, {"sha": "0b1824538fd2c1e92637fd2644a9f82fd3f837bb", "filename": "gcc/d/dmd/lexer.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Flexer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Flexer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Flexer.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -10,16 +10,7 @@\n \n /* Lexical Analyzer */\n \n-#include <stdio.h>\n-#include <string.h>\n-#include <ctype.h>\n-#include <stdarg.h>\n-#include <errno.h>\n-#include <wchar.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <time.h>       // for time() and ctime()\n-\n+#include \"root/dsystem.h\" // for time() and ctime()\n #include \"root/rmem.h\"\n \n #include \"mars.h\""}, {"sha": "f44108b15175a67fd31bfed8aec95e4dfe262171", "filename": "gcc/d/dmd/macro.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fmacro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fmacro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmacro.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -10,11 +10,7 @@\n \n #pragma once\n \n-#include <stdio.h>\n-#include <string.h>\n-#include <time.h>\n-#include <ctype.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/root.h\"\n \n "}, {"sha": "5aec7e6b45845fe27ad9d1db6430c7aa35b4e8cf", "filename": "gcc/d/dmd/mars.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fmars.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fmars.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmars.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -54,9 +54,7 @@ the target object file format:\n  */\n \n \n-#include <stdio.h>\n-#include <stdint.h>\n-#include <stdarg.h>\n+#include \"root/dsystem.h\"\n \n #ifdef __DMC__\n #ifdef DEBUG"}, {"sha": "d8fb020175e9191967817ab6c5bcb781217bd037", "filename": "gcc/d/dmd/module.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fmodule.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fmodule.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmodule.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -35,7 +35,7 @@ class Package : public ScopeDsymbol\n     Module *mod;        // != NULL if isPkgMod == PKGmodule\n \n     Package(Identifier *ident);\n-    const char *kind();\n+    const char *kind() const;\n \n     static DsymbolTable *resolve(Identifiers *packages, Dsymbol **pparent, Package **ppkg);\n \n@@ -117,7 +117,7 @@ class Module : public Package\n \n     static Module *load(Loc loc, Identifiers *packages, Identifier *ident);\n \n-    const char *kind();\n+    const char *kind() const;\n     File *setOutfile(const char *name, const char *dir, const char *arg, const char *ext);\n     void setDocfile();\n     bool read(Loc loc); // read file, returns 'true' if succeed, 'false' otherwise."}, {"sha": "dedaf7dc83e313f8265461b8a92a6eb917c65559", "filename": "gcc/d/dmd/mtype.c", "status": "modified", "additions": 20, "deletions": 32, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fmtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fmtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,22 +8,8 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/mtype.c\n  */\n \n-#define __C99FEATURES__ 1       // Needed on Solaris for NaN and more\n-#define __USE_ISOC99 1          // so signbit() gets defined\n-\n-#include <math.h>\n-#include <stdio.h>\n-#include <assert.h>\n-#include <float.h>\n-\n-#if _MSC_VER\n-#include <malloc.h>\n-#include <limits>\n-#elif __MINGW32__\n-#include <malloc.h>\n-#endif\n-\n-#include \"checkedint.h\"\n+#include \"root/dsystem.h\"\n+#include \"root/checkedint.h\"\n #include \"root/rmem.h\"\n \n #include \"mars.h\"\n@@ -2336,8 +2322,7 @@ Identifier *Type::getTypeInfoIdent()\n     // Allocate buffer on stack, fail over to using malloc()\n     char namebuf[128];\n     size_t namelen = 19 + sizeof(len) * 3 + len + 1;\n-    char *name = namelen <= sizeof(namebuf) ? namebuf : (char *)malloc(namelen);\n-    assert(name);\n+    char *name = namelen <= sizeof(namebuf) ? namebuf : (char *)mem.xmalloc(namelen);\n \n     sprintf(name, \"_D%lluTypeInfo_%s6__initZ\", (unsigned long long) 9 + len, buf.data);\n     //printf(\"%p, deco = %s, name = %s\\n\", this, deco, name);\n@@ -9343,20 +9328,23 @@ bool Parameter::isCovariantScope(bool returnByRef, StorageClass from, StorageCla\n         static unsigned buildSR(bool returnByRef, StorageClass stc)\n         {\n             unsigned result;\n-            switch (stc & (STCref | STCscope | STCreturn))\n-            {\n-                case 0:                    result = SRNone;        break;\n-                case STCref:               result = SRRef;         break;\n-                case STCscope:             result = SRScope;       break;\n-                case STCreturn | STCref:   result = SRReturnRef;   break;\n-                case STCreturn | STCscope: result = SRReturnScope; break;\n-                case STCref    | STCscope: result = SRRefScope;    break;\n-                case STCreturn | STCref | STCscope:\n-                    result = returnByRef ? SRReturnRef_Scope : SRRef_ReturnScope;\n-                    break;\n-                default:\n-                    assert(0);\n-            }\n+            StorageClass stc2 = stc & (STCref | STCscope | STCreturn);\n+            if (stc2 == 0)\n+                result = SRNone;\n+            else if (stc2 == STCref)\n+                result = SRRef;\n+            else if (stc2 == STCscope)\n+                result = SRScope;\n+            else if (stc2 == (STCscope | STCreturn))\n+                result = SRReturnScope;\n+            else if (stc2 == (STCref | STCreturn))\n+                result = SRReturnRef;\n+            else if (stc2 == (STCscope | STCref))\n+                result = SRRefScope;\n+            else if (stc2 == (STCscope | STCref | STCreturn))\n+                result = returnByRef ? SRReturnRef_Scope : SRRef_ReturnScope;\n+            else\n+                assert(0);\n             return result;\n         }\n "}, {"sha": "49c41f37677edc7a775ae4402548c3b78615fd24", "filename": "gcc/d/dmd/nspace.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fnspace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fnspace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fnspace.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -6,9 +6,7 @@\n // Source: https://github.com/D-Programming-Language/dmd/blob/master/src/nspace.c\n \n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n #include \"mars.h\"\n #include \"dsymbol.h\"\n@@ -156,7 +154,7 @@ void Nspace::semantic3(Scope *sc)\n     }\n }\n \n-const char *Nspace::kind()\n+const char *Nspace::kind() const\n {\n     return \"namespace\";\n }"}, {"sha": "f6c4a3d828833d9f27431a7d438e638e622ac521", "filename": "gcc/d/dmd/nspace.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fnspace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fnspace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fnspace.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -32,7 +32,7 @@ class Nspace : public ScopeDsymbol\n     int apply(Dsymbol_apply_ft_t fp, void *param);\n     bool hasPointers();\n     void setFieldOffset(AggregateDeclaration *ad, unsigned *poffset, bool isunion);\n-    const char *kind();\n+    const char *kind() const;\n     Nspace *isNspace() { return this; }\n     void accept(Visitor *v) { v->visit(this); }\n };"}, {"sha": "0bcccb63afd0ae40f497f5b2fcb9d73d48c2a3ab", "filename": "gcc/d/dmd/opover.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fopover.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fopover.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fopover.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,12 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/opover.c\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <ctype.h>\n-#include <assert.h>\n-#include <string.h>                     // memset()\n-\n+#include \"root/dsystem.h\"               // memset()\n #include \"root/rmem.h\"\n \n #include \"mars.h\""}, {"sha": "89a584bea779d24a4a423caff39ef815f771fb3f", "filename": "gcc/d/dmd/optimize.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Foptimize.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,12 +8,9 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/optimize.c\n  */\n \n-#include <stdio.h>\n-#include <ctype.h>\n-#include <assert.h>\n-#include <math.h>\n+#include \"root/dsystem.h\"\n \n-#include \"checkedint.h\"\n+#include \"root/checkedint.h\"\n #include \"lexer.h\"\n #include \"mtype.h\"\n #include \"expression.h\""}, {"sha": "119876065b150a85191b1de833338057c2b90b3d", "filename": "gcc/d/dmd/parse.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -10,11 +10,9 @@\n \n // This is the D parser\n \n-#include <stdio.h>\n-#include <assert.h>\n-#include <string.h>                     // strlen(),memcpy()\n-\n+#include \"root/dsystem.h\"               // strlen(),memcpy()\n #include \"root/rmem.h\"\n+\n #include \"mars.h\"\n #include \"lexer.h\"\n #include \"parse.h\""}, {"sha": "92c09dec07380c4d0625e16ce2ada6bea60ee17e", "filename": "gcc/d/dmd/parse.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -52,7 +52,7 @@ enum ParseStatementFlags\n     PSscope = 2,        // start a new scope\n     PScurly = 4,        // { } statement is required\n     PScurlyscope = 8,   // { } starts a new scope\n-    PSsemi_ok = 0x10,   // empty ';' are really ok\n+    PSsemi_ok = 0x10    // empty ';' are really ok\n };\n \n \n@@ -180,7 +180,7 @@ enum PREC\n     PREC_mul,\n     PREC_pow,\n     PREC_unary,\n-    PREC_primary,\n+    PREC_primary\n };\n \n extern PREC precedence[TOKMAX];"}, {"sha": "931a395a7016f7f17be55b63952aa305186d8a50", "filename": "gcc/d/dmd/root/aav.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Faav.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Faav.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Faav.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -11,11 +11,7 @@\n  *\n  */\n \n-#include <stdio.h>\n-#include <string.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-\n+#include \"dsystem.h\"\n #include \"aav.h\"\n #include \"rmem.h\"\n "}, {"sha": "ad57cb4ce4ba76cd2a46a660aa230bb14999e48c", "filename": "gcc/d/dmd/root/aav.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Faav.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Faav.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Faav.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,6 +8,8 @@\n \n #pragma once\n \n+#include \"dsystem.h\"\n+\n typedef void* Value;\n typedef void* Key;\n "}, {"sha": "dd2899822901bf8a1ad69f0141f71abc6d40fcb5", "filename": "gcc/d/dmd/root/array.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Farray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Farray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Farray.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -7,11 +7,7 @@\n \n #pragma once\n \n-#include <assert.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-\n+#include \"dsystem.h\"\n #include \"object.h\"\n #include \"rmem.h\"\n "}, {"sha": "392904acf8a3ddc8b5aa700185e95d07dbba26d9", "filename": "gcc/d/dmd/root/checkedint.c", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fcheckedint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fcheckedint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fcheckedint.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -24,13 +24,13 @@\n  * Copyright: Copyright (C) 2014-2018 by The D Language Foundation, All Rights Reserved\n  * License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n  * Authors:   Walter Bright\n- * Source:    https://github.com/D-Programming-Language/dmd/blob/master/src/root/port.c\n+ * Source:    https://github.com/D-Programming-Language/dmd/blob/master/src/root/checkedint.c\n  */\n \n-#include <assert.h>\n-\n+#include \"dsystem.h\"\n #include \"checkedint.h\"\n \n+\n /*******************************\n  * Add two signed integers, checking for overflow.\n  *", "previous_filename": "gcc/d/dmd/checkedint.c"}, {"sha": "1362ff51be9fc057bd5d460454f0c46ca5f2612b", "filename": "gcc/d/dmd/root/checkedint.h", "status": "renamed", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fcheckedint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fcheckedint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fcheckedint.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -5,15 +5,10 @@\n  * http://www.digitalmars.com\n  * Distributed under the Boost Software License, Version 1.0.\n  * http://www.boost.org/LICENSE_1_0.txt\n- * https://github.com/D-Programming-Language/dmd/blob/master/src/checkedint.h\n+ * https://github.com/D-Programming-Language/dmd/blob/master/src/root/checkedint.h\n  */\n \n-#pragma once\n-\n-#ifndef __STDC_LIMIT_MACROS\n-#define __STDC_LIMIT_MACROS 1\n-#endif\n-#include <stdint.h>\n+#include \"dsystem.h\"\n \n \n int adds(int x, int y, bool& overflow);", "previous_filename": "gcc/d/dmd/checkedint.h"}, {"sha": "f92f0abaabb45b8505602ae1cf7665c018f9cc74", "filename": "gcc/d/dmd/root/dcompat.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fdcompat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fdcompat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fdcompat.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -9,6 +9,8 @@\n \n #pragma once\n \n+#include \"dsystem.h\"\n+\n /// Represents a D [ ] array\n template<typename T>\n struct DArray"}, {"sha": "940ff500062e92cf95db87da2ba17d0d49373f60", "filename": "gcc/d/dmd/root/dsystem.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fdsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fdsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fdsystem.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -0,0 +1,24 @@\n+/* dsystem.h -- Get common system includes from the host.\n+ * Copyright (C) 2018 Free Software Foundation, Inc.\n+ *\n+ * GCC is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 3, or (at your option)\n+ * any later version.\n+ *\n+ * GCC is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with GCC; see the file COPYING3.  If not see\n+ * <http://www.gnu.org/licenses/>.\n+ */\n+\n+/* This header is used in place of dmd upstream so that we can wrap\n+   around gcc's system.h.  */\n+\n+#pragma once\n+\n+#include \"d-system.h\""}, {"sha": "454d4cb0760dd36686e7c7b6c1f7527f11274bd4", "filename": "gcc/d/dmd/root/file.c", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Ffile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Ffile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Ffile.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -6,29 +6,14 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/root/file.c\n  */\n \n+#include \"dsystem.h\"\n #include \"file.h\"\n \n-#if defined (__sun)\n-#include <alloca.h>\n-#endif\n-\n-#if _MSC_VER ||__MINGW32__\n-#include <malloc.h>\n-#include <string>\n-#endif\n-\n #if _WIN32\n #include <windows.h>\n-#include <direct.h>\n-#include <errno.h>\n #endif\n \n #if POSIX\n-#include <sys/types.h>\n-#include <sys/stat.h>\n-#include <fcntl.h>\n-#include <errno.h>\n-#include <unistd.h>\n #include <utime.h>\n #endif\n \n@@ -104,7 +89,11 @@ bool File::read()\n         goto err2;\n     }\n     size = (size_t)buf.st_size;\n+#ifdef IN_GCC\n+    buffer = (unsigned char *) ::xmalloc(size + 2);\n+#else\n     buffer = (unsigned char *) ::malloc(size + 2);\n+#endif\n     if (!buffer)\n     {\n         printf(\"\\tmalloc error, errno = %d\\n\",errno);\n@@ -155,7 +144,11 @@ bool File::read()\n     ref = 0;\n \n     size = GetFileSize(h,NULL);\n+#ifdef IN_GCC\n+    buffer = (unsigned char *) ::xmalloc(size + 2);\n+#else\n     buffer = (unsigned char *) ::malloc(size + 2);\n+#endif\n     if (!buffer)\n         goto err2;\n "}, {"sha": "f4d2937bfd3e4c0d19e80f2a69c63fe37e1bacba", "filename": "gcc/d/dmd/root/file.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Ffile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Ffile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Ffile.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,8 +8,7 @@\n \n #pragma once\n \n-#include <stddef.h>\n-\n+#include \"dsystem.h\"\n #include \"array.h\"\n \n typedef Array<struct File *> Files;"}, {"sha": "b0bd1a5a4fdca18fc5972f5d134b092a2f9edfa7", "filename": "gcc/d/dmd/root/filename.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Ffilename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Ffilename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Ffilename.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -6,37 +6,19 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/root/filename.c\n  */\n \n+#include \"dsystem.h\"\n #include \"filename.h\"\n \n-#include <stdint.h>\n-#include <ctype.h>\n-\n #include \"outbuffer.h\"\n #include \"array.h\"\n #include \"file.h\"\n #include \"rmem.h\"\n \n-#if defined (__sun)\n-#include <alloca.h>\n-#endif\n-\n-#if _MSC_VER ||__MINGW32__\n-#include <malloc.h>\n-#include <string>\n-#endif\n-\n #if _WIN32\n #include <windows.h>\n-#include <direct.h>\n-#include <errno.h>\n #endif\n \n #if POSIX\n-#include <sys/types.h>\n-#include <sys/stat.h>\n-#include <fcntl.h>\n-#include <errno.h>\n-#include <unistd.h>\n #include <utime.h>\n #endif\n "}, {"sha": "f1bc6cc5cca02706ab174e07441c9e436b4c935f", "filename": "gcc/d/dmd/root/hash.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fhash.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -10,8 +10,7 @@\n \n #pragma once\n \n-#include <stdint.h>                     // uint{8|16|32}_t\n-#include <stdlib.h>\n+#include \"dsystem.h\"                    // uint{8|16|32}_t\n \n // MurmurHash2 was written by Austin Appleby, and is placed in the public\n // domain. The author hereby disclaims copyright to this source code."}, {"sha": "d465e36352288b674304936e9a6072dfb0dbd38e", "filename": "gcc/d/dmd/root/object.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fobject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fobject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fobject.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -6,11 +6,9 @@\n  * https://github.com/dlang/dmd/blob/master/src/root/object.h\n  */\n \n-#define POSIX (__linux__ || __APPLE__ || __FreeBSD__ || __OpenBSD__ || __sun)\n-\n #pragma once\n \n-#include <stddef.h>\n+#include \"dsystem.h\"\n \n typedef size_t hash_t;\n \n@@ -25,7 +23,7 @@ enum DYNCAST\n     DYNCAST_IDENTIFIER,\n     DYNCAST_TUPLE,\n     DYNCAST_PARAMETER,\n-    DYNCAST_STATEMENT,\n+    DYNCAST_STATEMENT\n };\n \n /*"}, {"sha": "4791bb177c9358660d103224790f8b3b32c33ca3", "filename": "gcc/d/dmd/root/outbuffer.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -6,16 +6,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/root/outbuffer.c\n  */\n \n-#include <assert.h>\n-#include <stdarg.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-\n-#if __sun\n-#include <alloca.h>\n-#endif\n-\n+#include \"dsystem.h\"\n #include \"outbuffer.h\"\n #include \"object.h\"\n "}, {"sha": "6e6b35d8d938f104f4731c355b92cc116de36ef2", "filename": "gcc/d/dmd/root/outbuffer.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,10 +8,7 @@\n \n #pragma once\n \n-#include <stdlib.h>\n-#include <stdarg.h>\n-#include <string.h>\n-#include <assert.h>\n+#include \"dsystem.h\"\n #include \"port.h\"\n #include \"rmem.h\"\n "}, {"sha": "0dbb3197ad58b684a2334e222cc1f5ddb325fd72", "filename": "gcc/d/dmd/root/port.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fport.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -11,11 +11,9 @@\n // Portable wrapper around compiler/system specific things.\n // The idea is to minimize #ifdef's in the app code.\n \n-#include <stdlib.h> // for alloca\n-#include <stdint.h>\n+#include \"dsystem.h\" // for alloca\n \n #if _MSC_VER\n-#include <alloca.h>\n typedef __int64 longlong;\n typedef unsigned __int64 ulonglong;\n #else"}, {"sha": "d24e0126b375e56f0b5195a7ce69660c3a57b6c4", "filename": "gcc/d/dmd/root/rmem.c", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Frmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Frmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Frmem.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -6,10 +6,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/root/rmem.c\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <string.h>\n-\n+#include \"dsystem.h\"\n #include \"rmem.h\"\n \n /* This implementation of the storage allocator uses the standard C allocation package.\n@@ -23,7 +20,11 @@ char *Mem::xstrdup(const char *s)\n \n     if (s)\n     {\n+#ifdef IN_GCC\n+        p = ::xstrdup(s);\n+#else\n         p = strdup(s);\n+#endif\n         if (p)\n             return p;\n         error();\n@@ -38,7 +39,11 @@ void *Mem::xmalloc(size_t size)\n         p = NULL;\n     else\n     {\n+#ifdef IN_GCC\n+        p = ::xmalloc(size);\n+#else\n         p = malloc(size);\n+#endif\n         if (!p)\n             error();\n     }\n@@ -52,7 +57,11 @@ void *Mem::xcalloc(size_t size, size_t n)\n         p = NULL;\n     else\n     {\n+#ifdef IN_GCC\n+        p = ::xcalloc(size, n);\n+#else\n         p = calloc(size, n);\n+#endif\n         if (!p)\n             error();\n     }\n@@ -70,14 +79,22 @@ void *Mem::xrealloc(void *p, size_t size)\n     }\n     else if (!p)\n     {\n+#ifdef IN_GCC\n+        p = ::xmalloc(size);\n+#else\n         p = malloc(size);\n+#endif\n         if (!p)\n             error();\n     }\n     else\n     {\n         void *psave = p;\n+#ifdef IN_GCC\n+        p = ::xrealloc(psave, size);\n+#else\n         p = realloc(psave, size);\n+#endif\n         if (!p)\n         {   xfree(psave);\n             error();\n@@ -99,7 +116,11 @@ void *Mem::xmallocdup(void *o, size_t size)\n         p = NULL;\n     else\n     {\n+#ifdef IN_GCC\n+        p = ::xmalloc(size);\n+#else\n         p = malloc(size);\n+#endif\n         if (!p)\n             error();\n         else\n@@ -143,7 +164,11 @@ extern \"C\" void *allocmemory(size_t m_size)\n \n     if (m_size > CHUNK_SIZE)\n     {\n+#ifdef IN_GCC\n+        void *p = xmalloc(m_size);\n+#else\n         void *p = malloc(m_size);\n+#endif\n         if (p)\n             return p;\n         printf(\"Error: out of memory\\n\");\n@@ -152,7 +177,11 @@ extern \"C\" void *allocmemory(size_t m_size)\n     }\n \n     heapleft = CHUNK_SIZE;\n+#ifdef IN_GCC\n+    heapp = xmalloc(CHUNK_SIZE);\n+#else\n     heapp = malloc(CHUNK_SIZE);\n+#endif\n     if (!heapp)\n     {\n         printf(\"Error: out of memory\\n\");"}, {"sha": "0123402bfaefb059c41856d08758491e95b9a5a7", "filename": "gcc/d/dmd/root/rmem.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Frmem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Frmem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Frmem.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,7 +8,7 @@\n \n #pragma once\n \n-#include <stddef.h>     // for size_t\n+#include \"dsystem.h\"    // for size_t\n \n #if __APPLE__ && __i386__\n     /* size_t is 'unsigned long', which makes it mangle differently"}, {"sha": "b45e795e14ed5f300f6bb510eb3fb196bc29ea25", "filename": "gcc/d/dmd/root/rootobject.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Frootobject.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Frootobject.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Frootobject.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -5,8 +5,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/root/object.c\n  */\n \n-#include <stdio.h>\n-\n+#include \"dsystem.h\"\n #include \"object.h\"\n #include \"outbuffer.h\"\n "}, {"sha": "a5c16bab12d195251d49a74e8d34821d8ab9a4f2", "filename": "gcc/d/dmd/root/speller.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fspeller.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fspeller.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fspeller.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -6,16 +6,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/root/speller.c\n  */\n \n-#include <stdio.h>\n-#include <string.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <limits.h>\n-\n-#if __sun || _MSC_VER\n-#include <alloca.h>\n-#endif\n-\n+#include \"dsystem.h\"\n #include \"speller.h\"\n \n const char idchars[] = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\";"}, {"sha": "473df7cbe50ed0de1f1347b50781f6b11760899b", "filename": "gcc/d/dmd/root/stringtable.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fstringtable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Froot%2Fstringtable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Fstringtable.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -6,11 +6,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/root/stringtable.c\n  */\n \n-#include <stdio.h>\n-#include <stdint.h>                     // uint{8|16|32}_t\n-#include <string.h>                     // memcpy()\n-#include <stdlib.h>\n-\n+#include \"dsystem.h\"                    // uint{8|16|32}_t, memcpy()\n #include \"root.h\"\n #include \"rmem.h\"                       // mem\n #include \"stringtable.h\""}, {"sha": "18689c1f2da4b9c24acadba42a4736c0af4bddd9", "filename": "gcc/d/dmd/sapply.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fsapply.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fsapply.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fsapply.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,8 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/sapply.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n #include \"mars.h\"\n #include \"statement.h\""}, {"sha": "56d7d078027ad00240e52213eaab855e540b4d81", "filename": "gcc/d/dmd/sideeffect.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fsideeffect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fsideeffect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fsideeffect.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,8 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/sideeffect.c\n  */\n \n-#include <stdio.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n #include \"mars.h\"\n #include \"init.h\""}, {"sha": "561791478baa3d32c87cea3c23452ae63580a5e1", "filename": "gcc/d/dmd/statement.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fstatement.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fstatement.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatement.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,9 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/statement.c\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n #include \"statement.h\"\n #include \"errors.h\""}, {"sha": "9be934fb4ef21b696bce70d1f34ae844a43a09d4", "filename": "gcc/d/dmd/statementsem.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fstatementsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fstatementsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -7,12 +7,9 @@\n  * http://www.boost.org/LICENSE_1_0.txt\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/rmem.h\"\n-#include \"checkedint.h\"\n+#include \"root/checkedint.h\"\n \n #include \"errors.h\"\n #include \"statement.h\""}, {"sha": "5da1f7d9b772061745bc2a68fea7206c105807c3", "filename": "gcc/d/dmd/staticassert.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fstaticassert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fstaticassert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstaticassert.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,9 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/staticassert.c\n  */\n \n-#include <stdio.h>\n-#include <string.h>\n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n #include \"mars.h\"\n #include \"dsymbol.h\"\n@@ -98,7 +96,7 @@ bool StaticAssert::oneMember(Dsymbol **ps, Identifier *)\n     return true;\n }\n \n-const char *StaticAssert::kind()\n+const char *StaticAssert::kind() const\n {\n     return \"static assert\";\n }"}, {"sha": "4a601ab7afac056ba00cf6be757640c55a1e1c7c", "filename": "gcc/d/dmd/staticassert.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fstaticassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fstaticassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstaticassert.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -27,6 +27,6 @@ class StaticAssert : public Dsymbol\n     void semantic(Scope *sc);\n     void semantic2(Scope *sc);\n     bool oneMember(Dsymbol **ps, Identifier *ident);\n-    const char *kind();\n+    const char *kind() const;\n     void accept(Visitor *v) { v->visit(this); }\n };"}, {"sha": "63dfcf261a49cce7faf3be5554d5d6bc3d6cef9b", "filename": "gcc/d/dmd/target.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftarget.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -19,6 +19,7 @@\n class ClassDeclaration;\n class Dsymbol;\n class Expression;\n+class Parameter;\n class Type;\n struct OutBuffer;\n "}, {"sha": "c913b2a5bfaa1209be15e09a5c38cd7dbb28300b", "filename": "gcc/d/dmd/template.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Ftemplate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Ftemplate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftemplate.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -83,7 +83,7 @@ class TemplateDeclaration : public ScopeDsymbol\n     void semantic(Scope *sc);\n     bool overloadInsert(Dsymbol *s);\n     bool hasStaticCtorOrDtor();\n-    const char *kind();\n+    const char *kind() const;\n     const char *toChars();\n \n     Prot prot();\n@@ -331,7 +331,7 @@ class TemplateInstance : public ScopeDsymbol\n     void semantic2(Scope *sc);\n     void semantic3(Scope *sc);\n     Dsymbol *toAlias();                 // resolve real symbol\n-    const char *kind();\n+    const char *kind() const;\n     bool oneMember(Dsymbol **ps, Identifier *ident);\n     const char *toChars();\n     const char* toPrettyCharsHelper();\n@@ -371,7 +371,7 @@ class TemplateMixin : public TemplateInstance\n     void semantic(Scope *sc);\n     void semantic2(Scope *sc);\n     void semantic3(Scope *sc);\n-    const char *kind();\n+    const char *kind() const;\n     bool oneMember(Dsymbol **ps, Identifier *ident);\n     int apply(Dsymbol_apply_ft_t fp, void *param);\n     bool hasPointers();"}, {"sha": "7251c261cdb025af8cefbcd21ae7dde105429e70", "filename": "gcc/d/dmd/tokens.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Ftokens.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Ftokens.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftokens.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,8 +8,7 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/lexer.c\n  */\n \n-#include <stdio.h>\n-#include <ctype.h>\n+#include \"root/dsystem.h\"\n \n #include \"tokens.h\"\n #include \"root/rmem.h\""}, {"sha": "e4ebea683890cbde921d2c8860ebaf78f57b9f22", "filename": "gcc/d/dmd/traits.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Ftraits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Ftraits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftraits.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -8,16 +8,11 @@\n  * https://github.com/D-Programming-Language/dmd/blob/master/src/traits.c\n  */\n \n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <ctype.h>\n-#include <assert.h>\n-#include <math.h>\n-\n+#include \"root/dsystem.h\"\n #include \"root/rmem.h\"\n #include \"root/aav.h\"\n+#include \"root/checkedint.h\"\n \n-#include \"checkedint.h\"\n #include \"errors.h\"\n #include \"mtype.h\"\n #include \"init.h\""}, {"sha": "482782255d743e63cd1f528d7b820f1732ba484e", "filename": "gcc/d/dmd/unittests.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8bf3d5ed983791a658b86f4eae338e13b6fdc3f/gcc%2Fd%2Fdmd%2Funittests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8bf3d5ed983791a658b86f4eae338e13b6fdc3f/gcc%2Fd%2Fdmd%2Funittests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Funittests.c?ref=e8bf3d5ed983791a658b86f4eae338e13b6fdc3f", "patch": "@@ -1,26 +0,0 @@\n-\n-/* Compiler implementation of the D programming language\n- * Copyright (C) 1999-2018 by The D Language Foundation, All Rights Reserved\n- * written by Walter Bright\n- * http://www.digitalmars.com\n- * Distributed under the Boost Software License, Version 1.0.\n- * http://www.boost.org/LICENSE_1_0.txt\n- * https://github.com/D-Programming-Language/dmd/blob/master/src/unittests.c\n- */\n-\n-#include <stdio.h>\n-\n-#include \"mars.h\"\n-\n-void unittest_speller();\n-void unittest_importHint();\n-void unittest_aa();\n-\n-void unittests()\n-{\n-#if UNITTEST\n-    unittest_speller();\n-    unittest_importHint();\n-    unittest_aa();\n-#endif\n-}"}, {"sha": "6eb46993acf47da3552ecfc6c26949c791f9ccb0", "filename": "gcc/d/dmd/utf.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Futf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Futf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Futf.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -17,8 +17,6 @@\n /// [3] http://unicode.org/faq/utf_bom.html\n /// [4] http://www.unicode.org/versions/Unicode6.1.0/ch03.pdf\n \n-#include <assert.h>\n-\n #include \"utf.h\"\n \n /* The following encodings are valid, except for the 5 and 6 byte"}, {"sha": "831128e7fa7c5cc5c61054ac9f1c33fb9261d31a", "filename": "gcc/d/dmd/utf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Futf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Futf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Futf.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -10,7 +10,7 @@\n \n #pragma once\n \n-#include <stdlib.h>\n+#include \"root/dsystem.h\"\n \n /// A UTF-8 code unit\n typedef unsigned char   utf8_t;"}, {"sha": "177f3cfa7a631cac161bf48f1ee004f6f34f8f99", "filename": "gcc/d/dmd/utils.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Futils.c?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -7,12 +7,13 @@\n  * http://www.boost.org/LICENSE_1_0.txt\n  */\n \n-#include <string.h>\n+#include \"root/dsystem.h\"\n #include \"mars.h\"\n #include \"globals.h\"\n #include \"root/file.h\"\n #include \"root/filename.h\"\n #include \"root/outbuffer.h\"\n+#include \"root/rmem.h\"\n \n /**\n  * Normalize path by turning forward slashes into backslashes\n@@ -28,7 +29,7 @@ const char * toWinPath(const char *src)\n     if (src == NULL)\n         return NULL;\n \n-    char *result = strdup(src);\n+    char *result = mem.xstrdup(src);\n     char *p = result;\n     while (*p != '\\0')\n     {"}, {"sha": "cdff1a873fcf34ab0df7fc249e77380aacc0d56c", "filename": "gcc/d/dmd/version.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fversion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fversion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fversion.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -24,7 +24,7 @@ class DebugSymbol : public Dsymbol\n     const char *toChars();\n     void addMember(Scope *sc, ScopeDsymbol *sds);\n     void semantic(Scope *sc);\n-    const char *kind();\n+    const char *kind() const;\n     void accept(Visitor *v) { v->visit(this); }\n };\n \n@@ -40,6 +40,6 @@ class VersionSymbol : public Dsymbol\n     const char *toChars();\n     void addMember(Scope *sc, ScopeDsymbol *sds);\n     void semantic(Scope *sc);\n-    const char *kind();\n+    const char *kind() const;\n     void accept(Visitor *v) { v->visit(this); }\n };"}, {"sha": "b86f4f675b230167717d99ed04d869939b2cc9bb", "filename": "gcc/d/dmd/visitor.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fvisitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ab59ffe7f22c533df54f28cd7e71affbce854b/gcc%2Fd%2Fdmd%2Fvisitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fvisitor.h?ref=f9ab59ffe7f22c533df54f28cd7e71affbce854b", "patch": "@@ -9,7 +9,7 @@\n \n #pragma once\n \n-#include <assert.h>\n+#include \"root/dsystem.h\"\n \n class Statement;\n class ErrorStatement;"}]}