{"sha": "d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4", "node_id": "C_kwDOANBUbNoAKGQ4ZjZjNDhjY2I4NWVjYzBkOTdhODRjMzJiN2ExYjhmNDNjNjRmZTQ", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-12-27T22:06:18Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-12-29T17:27:39Z"}, "message": "Fortran: avoid several NULL pointer dereferences during error recovery\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/102332\n\t* expr.c (gfc_get_variable_expr): Avoid NULL pointer dereferences\n\tduring handling of errors with invalid uses of CLASS variables.\n\t* match.c (select_type_set_tmp): Likewise.\n\t* primary.c (gfc_match_varspec): Likewise.\n\t* resolve.c (resolve_variable): Likewise.\n\t(resolve_select_type): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/102332\n\t* gfortran.dg/pr102332.f90: New test.", "tree": {"sha": "dea966826379a1cb42a526f2273eb0d30856e8e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dea966826379a1cb42a526f2273eb0d30856e8e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad964f7eaef9c03ce68a01cfdd7fde9d56524868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad964f7eaef9c03ce68a01cfdd7fde9d56524868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad964f7eaef9c03ce68a01cfdd7fde9d56524868"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "c1258e0eb063206b7c713142efca447a47a6c9c2", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4", "patch": "@@ -5166,7 +5166,8 @@ gfc_get_variable_expr (gfc_symtree *var)\n \n   if (var->n.sym->attr.flavor != FL_PROCEDURE\n       && ((var->n.sym->as != NULL && var->n.sym->ts.type != BT_CLASS)\n-\t   || (var->n.sym->ts.type == BT_CLASS && CLASS_DATA (var->n.sym)\n+\t   || (var->n.sym->ts.type == BT_CLASS && var->n.sym->ts.u.derived\n+\t       && CLASS_DATA (var->n.sym)\n \t       && CLASS_DATA (var->n.sym)->as)))\n     {\n       e->rank = var->n.sym->ts.type == BT_CLASS"}, {"sha": "41faa53b97adba35f616ea52fc91e17d6cfd5ac7", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4", "patch": "@@ -6363,7 +6363,8 @@ select_type_set_tmp (gfc_typespec *ts)\n       sym = tmp->n.sym;\n       gfc_add_type (sym, ts, NULL);\n \n-      if (selector->ts.type == BT_CLASS && selector->attr.class_ok)\n+      if (selector->ts.type == BT_CLASS && selector->attr.class_ok\n+\t  && selector->ts.u.derived && CLASS_DATA (selector))\n \t{\n \t  sym->attr.pointer\n \t\t= CLASS_DATA (selector)->attr.class_pointer;"}, {"sha": "1f63028d1798340c1594f43112118d3e04accbc2", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4", "patch": "@@ -2151,6 +2151,7 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n \t  && !(gfc_matching_procptr_assignment\n \t       && sym->attr.flavor == FL_PROCEDURE))\n       || (sym->ts.type == BT_CLASS && sym->attr.class_ok\n+\t  && sym->ts.u.derived && CLASS_DATA (sym)\n \t  && (CLASS_DATA (sym)->attr.dimension\n \t      || CLASS_DATA (sym)->attr.codimension)))\n     {"}, {"sha": "591e81860071af23bd35de4fae1aae2f1082a1e0", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4", "patch": "@@ -5736,6 +5736,8 @@ resolve_variable (gfc_expr *e)\n      can't be translated that way.  */\n   if (sym->assoc && e->rank == 0 && e->ref && sym->ts.type == BT_CLASS\n       && sym->assoc->target && sym->assoc->target->ts.type == BT_CLASS\n+      && sym->assoc->target->ts.u.derived\n+      && CLASS_DATA (sym->assoc->target)\n       && CLASS_DATA (sym->assoc->target)->as)\n     {\n       gfc_ref *ref = e->ref;\n@@ -5799,7 +5801,8 @@ resolve_variable (gfc_expr *e)\n   /* Like above, but for class types, where the checking whether an array\n      ref is present is more complicated.  Furthermore make sure not to add\n      the full array ref to _vptr or _len refs.  */\n-  if (sym->assoc && sym->ts.type == BT_CLASS\n+  if (sym->assoc && sym->ts.type == BT_CLASS && sym->ts.u.derived\n+      && CLASS_DATA (sym)\n       && CLASS_DATA (sym)->attr.dimension\n       && (e->ts.type != BT_DERIVED || !e->ts.u.derived->attr.vtype))\n     {\n@@ -9432,6 +9435,7 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \n       /* Check F03:C815.  */\n       if ((c->ts.type == BT_DERIVED || c->ts.type == BT_CLASS)\n+\t  && selector_type\n \t  && !selector_type->attr.unlimited_polymorphic\n \t  && !gfc_type_is_extensible (c->ts.u.derived))\n \t{\n@@ -9442,7 +9446,8 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t}\n \n       /* Check F03:C816.  */\n-      if (c->ts.type != BT_UNKNOWN && !selector_type->attr.unlimited_polymorphic\n+      if (c->ts.type != BT_UNKNOWN\n+\t  && selector_type && !selector_type->attr.unlimited_polymorphic\n \t  && ((c->ts.type != BT_DERIVED && c->ts.type != BT_CLASS)\n \t      || !gfc_type_is_extension_of (selector_type, c->ts.u.derived)))\n \t{"}, {"sha": "f95570940834fd787cbb2a7f2838c15452b8886f", "filename": "gcc/testsuite/gfortran.dg/pr102332.f90", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr102332.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr102332.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr102332.f90?ref=d8f6c48ccb85ecc0d97a84c32b7a1b8f43c64fe4", "patch": "@@ -0,0 +1,69 @@\n+! { dg-do compile }\n+! PR fortran/102332 - ICE in select_type_set_tmp\n+! Contributed by G.Steinmetz\n+\n+program p\n+  type t\n+     real :: a, b\n+  end type\n+  class(t), allocatable :: x ! Valid\n+  select type (y => x)\n+  type is (t)\n+     y%a = 0\n+  end select\n+end\n+\n+subroutine s0 (x)\n+  type t\n+     real :: a, b\n+  end type\n+  class(t) :: x ! Valid\n+  select type (y => x)\n+  type is (t)\n+     y%a = 0\n+  end select\n+end\n+\n+subroutine s1\n+  type t\n+     real :: a, b\n+  end type\n+  class(t) :: x         ! { dg-error \"must be dummy, allocatable or pointer\" }\n+  select type (y => x)\n+  type is (t)\n+     y%a = 0\n+  end select\n+end\n+\n+subroutine s3\n+  type t\n+     real :: a, b\n+  end type\n+  class(t) :: x         ! { dg-error \"must be dummy, allocatable or pointer\" }\n+  select type (y => x)\n+  class is (t)\n+     y%a = 0\n+  end select\n+end\n+\n+subroutine s2\n+  type t\n+     real :: a, b\n+  end type\n+  class(t) :: x         ! { dg-error \"must be dummy, allocatable or pointer\" }\n+  select type (y => x)\n+  type default          ! { dg-error \"Expected\" }\n+     y%a = 0\n+  end select\n+end\n+\n+subroutine s4\n+  type t\n+     real :: a, b\n+  end type\n+  class(t) :: x         ! { dg-error \"must be dummy, allocatable or pointer\" }\n+  select type (y => x)\n+  class default\n+     y%a = 0\n+  end select\n+end"}]}