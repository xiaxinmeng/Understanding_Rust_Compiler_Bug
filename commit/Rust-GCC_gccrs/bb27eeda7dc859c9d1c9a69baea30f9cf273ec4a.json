{"sha": "bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIyN2VlZGE3ZGM4NTljOWQxYzlhNjliYWVhMzBmOWNmMjczZWM0YQ==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2007-06-07T16:46:26Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2007-06-07T16:46:26Z"}, "message": "re PR target/31850 (gcc.c-torture/compile/limits-fnargs.c is slow at compiling for spu-elf)\n\n\tPR target/31850\n\t* rtl.h (push_to_sequence2): New.\n\t* emit-rtl.c (push_to_sequence2): New.\n\t* function.c (assign_parm_data_all): Add new fields.\n\t(assign_parm_setup_block): Call push_to_sequence2 instead of \n\tpush_to_sequence.\n\t(assign_parm_setup_reg): Ditto.\n\t(assign_parm_setup_stack): Ditto.\n\t(assign_parms_unsplit_complex): Ditto.\n\t(assign_parms): Change field name.\n\nFrom-SVN: r125532", "tree": {"sha": "1cb00a95176daf42e5091f63e76b07ed28ef06df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cb00a95176daf42e5091f63e76b07ed28ef06df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a/comments", "author": null, "committer": null, "parents": [{"sha": "1b0cfaa6a890d6cea3ce6a98a707219cac2aedd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b0cfaa6a890d6cea3ce6a98a707219cac2aedd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b0cfaa6a890d6cea3ce6a98a707219cac2aedd6"}], "stats": {"total": 73, "additions": 56, "deletions": 17}, "files": [{"sha": "349168b80346dff4d559a6a707950a5f9badf229", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a", "patch": "@@ -1,3 +1,16 @@\n+2007-06-07  Steve Ellcey  <sje@cup.hp.com>\n+\n+\tPR target/31850\n+\t* rtl.h (push_to_sequence2): New.\n+\t* emit-rtl.c (push_to_sequence2): New.\n+\t* function.c (assign_parm_data_all): Add new fields.\n+\t(assign_parm_setup_block): Call push_to_sequence2 instead of \n+\tpush_to_sequence.\n+\t(assign_parm_setup_reg): Ditto.\n+\t(assign_parm_setup_stack): Ditto.\n+\t(assign_parms_unsplit_complex): Ditto.\n+\t(assign_parms): Change field name.\n+\n 2007-06-07  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/32220"}, {"sha": "f5cea9a60314192216a0d0ffbb6e87514bc0309f", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a", "patch": "@@ -4632,6 +4632,18 @@ push_to_sequence (rtx first)\n   last_insn = last;\n }\n \n+/* Like push_to_sequence, but take the last insn as an argument to avoid\n+   looping through the list.  */\n+\n+void\n+push_to_sequence2 (rtx first, rtx last)\n+{\n+  start_sequence ();\n+\n+  first_insn = first;\n+  last_insn = last;\n+}\n+\n /* Set up the outer-level insn chain\n    as the current sequence, saving the previously current one.  */\n "}, {"sha": "a4782d6e1592fc52f3538d423a34be2e47c85763", "filename": "gcc/function.c", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a", "patch": "@@ -1895,7 +1895,8 @@ struct assign_parm_data_all\n   struct args_size stack_args_size;\n   tree function_result_decl;\n   tree orig_fnargs;\n-  rtx conversion_insns;\n+  rtx first_conversion_insn;\n+  rtx last_conversion_insn;\n   HOST_WIDE_INT pretend_args_size;\n   HOST_WIDE_INT extra_pretend_bytes;\n   int reg_parm_stack_space;\n@@ -2489,7 +2490,8 @@ assign_parm_setup_block (struct assign_parm_data_all *all,\n \t{\n \t  rtx parmreg = gen_reg_rtx (data->nominal_mode);\n \n-\t  push_to_sequence (all->conversion_insns);\n+\t  push_to_sequence2 (all->first_conversion_insn,\n+\t\t\t     all->last_conversion_insn);\n \n \t  /* For values returned in multiple registers, handle possible\n \t     incompatible calls to emit_group_store.\n@@ -2514,7 +2516,8 @@ assign_parm_setup_block (struct assign_parm_data_all *all,\n \t    emit_group_store (parmreg, entry_parm, data->nominal_type,\n \t\t\t      int_size_in_bytes (data->nominal_type));\n \n-\t  all->conversion_insns = get_insns ();\n+\t  all->first_conversion_insn = get_insns ();\n+\t  all->last_conversion_insn = get_last_insn ();\n \t  end_sequence ();\n \n \t  SET_DECL_RTL (parm, parmreg);\n@@ -2561,9 +2564,11 @@ assign_parm_setup_block (struct assign_parm_data_all *all,\n       /* Handle values in multiple non-contiguous locations.  */\n       if (GET_CODE (entry_parm) == PARALLEL)\n \t{\n-\t  push_to_sequence (all->conversion_insns);\n+\t  push_to_sequence2 (all->first_conversion_insn,\n+\t\t\t     all->last_conversion_insn);\n \t  emit_group_store (mem, entry_parm, data->passed_type, size);\n-\t  all->conversion_insns = get_insns ();\n+\t  all->first_conversion_insn = get_insns ();\n+\t  all->last_conversion_insn = get_last_insn ();\n \t  end_sequence ();\n \t}\n \n@@ -2622,10 +2627,11 @@ assign_parm_setup_block (struct assign_parm_data_all *all,\n     }\n   else if (data->stack_parm == 0)\n     {\n-      push_to_sequence (all->conversion_insns);\n+      push_to_sequence2 (all->first_conversion_insn, all->last_conversion_insn);\n       emit_block_move (stack_parm, data->entry_parm, GEN_INT (size),\n \t\t       BLOCK_OP_NORMAL);\n-      all->conversion_insns = get_insns ();\n+      all->first_conversion_insn = get_insns ();\n+      all->last_conversion_insn = get_last_insn ();\n       end_sequence ();\n     }\n \n@@ -2698,7 +2704,7 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n \n       emit_move_insn (tempreg, validize_mem (data->entry_parm));\n \n-      push_to_sequence (all->conversion_insns);\n+      push_to_sequence2 (all->first_conversion_insn, all->last_conversion_insn);\n       tempreg = convert_to_mode (data->nominal_mode, tempreg, unsignedp);\n \n       if (GET_CODE (tempreg) == SUBREG\n@@ -2719,7 +2725,8 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n       save_tree_used = TREE_USED (parm);\n       expand_assignment (parm, make_tree (data->nominal_type, tempreg));\n       TREE_USED (parm) = save_tree_used;\n-      all->conversion_insns = get_insns ();\n+      all->first_conversion_insn = get_insns ();\n+      all->last_conversion_insn = get_last_insn ();\n       end_sequence ();\n \n       did_conversion = true;\n@@ -2745,11 +2752,13 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n \t  rtx tempreg = gen_reg_rtx (GET_MODE (DECL_RTL (parm)));\n \t  int unsigned_p = TYPE_UNSIGNED (TREE_TYPE (parm));\n \n-\t  push_to_sequence (all->conversion_insns);\n+\t  push_to_sequence2 (all->first_conversion_insn,\n+\t\t\t     all->last_conversion_insn);\n \t  emit_move_insn (tempreg, DECL_RTL (parm));\n \t  tempreg = convert_to_mode (GET_MODE (parmreg), tempreg, unsigned_p);\n \t  emit_move_insn (parmreg, tempreg);\n-\t  all->conversion_insns = get_insns ();\n+\t  all->first_conversion_insn = get_insns ();\n+\t  all->last_conversion_insn = get_last_insn ();\n \t  end_sequence ();\n \n \t  did_conversion = true;\n@@ -2835,7 +2844,7 @@ assign_parm_setup_stack (struct assign_parm_data_all *all, tree parm,\n \n       emit_move_insn (tempreg, validize_mem (data->entry_parm));\n \n-      push_to_sequence (all->conversion_insns);\n+      push_to_sequence2 (all->first_conversion_insn, all->last_conversion_insn);\n       to_conversion = true;\n \n       data->entry_parm = convert_to_mode (data->nominal_mode, tempreg,\n@@ -2867,7 +2876,8 @@ assign_parm_setup_stack (struct assign_parm_data_all *all, tree parm,\n \t{\n \t  /* Use a block move to handle potentially misaligned entry_parm.  */\n \t  if (!to_conversion)\n-\t    push_to_sequence (all->conversion_insns);\n+\t    push_to_sequence2 (all->first_conversion_insn,\n+\t\t\t       all->last_conversion_insn);\n \t  to_conversion = true;\n \n \t  emit_block_move (dest, src,\n@@ -2880,7 +2890,8 @@ assign_parm_setup_stack (struct assign_parm_data_all *all, tree parm,\n \n   if (to_conversion)\n     {\n-      all->conversion_insns = get_insns ();\n+      all->first_conversion_insn = get_insns ();\n+      all->last_conversion_insn = get_last_insn ();\n       end_sequence ();\n     }\n \n@@ -2924,10 +2935,12 @@ assign_parms_unsplit_complex (struct assign_parm_data_all *all, tree fnargs)\n \t      set_mem_attributes (tmp, parm, 1);\n \t      rmem = adjust_address_nv (tmp, inner, 0);\n \t      imem = adjust_address_nv (tmp, inner, GET_MODE_SIZE (inner));\n-\t      push_to_sequence (all->conversion_insns);\n+\t      push_to_sequence2 (all->first_conversion_insn,\n+\t\t\t\t all->last_conversion_insn);\n \t      emit_move_insn (rmem, real);\n \t      emit_move_insn (imem, imag);\n-\t      all->conversion_insns = get_insns ();\n+\t      all->first_conversion_insn = get_insns ();\n+\t      all->last_conversion_insn = get_last_insn ();\n \t      end_sequence ();\n \t    }\n \t  else\n@@ -3025,7 +3038,7 @@ assign_parms (tree fndecl)\n \n   /* Output all parameter conversion instructions (possibly including calls)\n      now that all parameters have been copied out of hard registers.  */\n-  emit_insn (all.conversion_insns);\n+  emit_insn (all.first_conversion_insn);\n \n   /* If we are receiving a struct value address as the first argument, set up\n      the RTL for the function result. As this might require code to convert"}, {"sha": "b993bedc223efb1c9a09cf58013b495c16b0372f", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=bb27eeda7dc859c9d1c9a69baea30f9cf273ec4a", "patch": "@@ -1494,6 +1494,7 @@ extern rtx get_first_nonnote_insn (void);\n extern rtx get_last_nonnote_insn (void);\n extern void start_sequence (void);\n extern void push_to_sequence (rtx);\n+extern void push_to_sequence2 (rtx, rtx);\n extern void end_sequence (void);\n extern rtx immed_double_const (HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t       enum machine_mode);"}]}