{"sha": "fd2bfee51ee9b63869652ed0812df1d34aaca093", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyYmZlZTUxZWU5YjYzODY5NjUyZWQwODEyZGYxZDM0YWFjYTA5Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-25T18:32:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-25T18:32:06Z"}, "message": "PR c++/71972 - constexpr array self-modification\n\n\t* constexpr.c (cxx_eval_array_reference): Handle looking for the\n\tvalue of an element we're currently modifying.\n\nFrom-SVN: r238729", "tree": {"sha": "647173b944875bc4a7a8bba84ad1fcdd667bd9b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/647173b944875bc4a7a8bba84ad1fcdd667bd9b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd2bfee51ee9b63869652ed0812df1d34aaca093", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2bfee51ee9b63869652ed0812df1d34aaca093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2bfee51ee9b63869652ed0812df1d34aaca093", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2bfee51ee9b63869652ed0812df1d34aaca093/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d6833755c1260d4a3f388b033549c0d140e7d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6833755c1260d4a3f388b033549c0d140e7d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d6833755c1260d4a3f388b033549c0d140e7d89"}], "stats": {"total": 82, "additions": 54, "deletions": 28}, "files": [{"sha": "a540d31133ba977472dd75bbc960297f747bf32c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2bfee51ee9b63869652ed0812df1d34aaca093/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2bfee51ee9b63869652ed0812df1d34aaca093/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd2bfee51ee9b63869652ed0812df1d34aaca093", "patch": "@@ -1,3 +1,9 @@\n+2016-07-25  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/71972\n+\t* constexpr.c (cxx_eval_array_reference): Handle looking for the\n+\tvalue of an element we're currently modifying.\n+\n 2016-07-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/71515"}, {"sha": "47fb39b42430c8dfee60a93eaa33b8a52993ec03", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2bfee51ee9b63869652ed0812df1d34aaca093/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2bfee51ee9b63869652ed0812df1d34aaca093/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=fd2bfee51ee9b63869652ed0812df1d34aaca093", "patch": "@@ -2129,42 +2129,49 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n   else\n     found = (i < len);\n \n-  if (!found)\n+  if (found)\n     {\n-      if (TREE_CODE (ary) == CONSTRUCTOR\n-\t  && CONSTRUCTOR_NO_IMPLICIT_ZERO (ary))\n+      tree r;\n+      if (TREE_CODE (ary) == CONSTRUCTOR)\n+\tr = (*CONSTRUCTOR_ELTS (ary))[i].value;\n+      else if (TREE_CODE (ary) == VECTOR_CST)\n+\tr = VECTOR_CST_ELT (ary, i);\n+      else if (elem_nchars == 1)\n+\tr = build_int_cst (cv_unqualified (TREE_TYPE (TREE_TYPE (ary))),\n+\t\t\t   TREE_STRING_POINTER (ary)[i]);\n+      else\n \t{\n-\t  /* 'ary' is part of the aggregate initializer we're currently\n-\t     building; if there's no initializer for this element yet,\n-\t     that's an error.  */\n-\t  if (!ctx->quiet)\n-\t    error (\"accessing uninitialized array element\");\n-\t  *non_constant_p = true;\n-\t  return t;\n+\t  tree type = cv_unqualified (TREE_TYPE (TREE_TYPE (ary)));\n+\t  r = native_interpret_expr (type, (const unsigned char *)\n+\t\t\t\t     TREE_STRING_POINTER (ary)\n+\t\t\t\t     + i * elem_nchars, elem_nchars);\n \t}\n+      if (r)\n+\t/* Don't VERIFY_CONSTANT here.  */\n+\treturn r;\n \n-      /* If it's within the array bounds but doesn't have an explicit\n-\t initializer, it's value-initialized.  */\n-      tree val = build_value_init (elem_type, tf_warning_or_error);\n-      return cxx_eval_constant_expression (ctx, val, lval, non_constant_p,\n-\t\t\t\t\t   overflow_p);\n+      /* Otherwise the element doesn't have a value yet.  */\n     }\n \n-  if (TREE_CODE (ary) == CONSTRUCTOR)\n-    return (*CONSTRUCTOR_ELTS (ary))[i].value;\n-  else if (TREE_CODE (ary) == VECTOR_CST)\n-    return VECTOR_CST_ELT (ary, i);\n-  else if (elem_nchars == 1)\n-    return build_int_cst (cv_unqualified (TREE_TYPE (TREE_TYPE (ary))),\n-\t\t\t  TREE_STRING_POINTER (ary)[i]);\n-  else\n+  /* Not found.  */\n+\n+  if (TREE_CODE (ary) == CONSTRUCTOR\n+      && CONSTRUCTOR_NO_IMPLICIT_ZERO (ary))\n     {\n-      tree type = cv_unqualified (TREE_TYPE (TREE_TYPE (ary)));\n-      return native_interpret_expr (type, (const unsigned char *)\n-\t\t\t\t\t  TREE_STRING_POINTER (ary)\n-\t\t\t\t\t  + i * elem_nchars, elem_nchars);\n+      /* 'ary' is part of the aggregate initializer we're currently\n+\t building; if there's no initializer for this element yet,\n+\t that's an error.  */\n+      if (!ctx->quiet)\n+\terror (\"accessing uninitialized array element\");\n+      *non_constant_p = true;\n+      return t;\n     }\n-  /* Don't VERIFY_CONSTANT here.  */\n+\n+  /* If it's within the array bounds but doesn't have an explicit\n+     initializer, it's value-initialized.  */\n+  tree val = build_value_init (elem_type, tf_warning_or_error);\n+  return cxx_eval_constant_expression (ctx, val, lval, non_constant_p,\n+\t\t\t\t       overflow_p);\n }\n \n /* Subroutine of cxx_eval_constant_expression."}, {"sha": "3abdd8490d6107b83a9c46dc2c4defc6005bf045", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-array5.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2bfee51ee9b63869652ed0812df1d34aaca093/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-array5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2bfee51ee9b63869652ed0812df1d34aaca093/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-array5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-array5.C?ref=fd2bfee51ee9b63869652ed0812df1d34aaca093", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/71972\n+// { dg-do compile { target c++14 } }\n+\n+typedef int size_t;\n+template <int N> struct S {\n+  template <size_t M> constexpr S(const char (&)[M]) : data{} {\n+    data[0] = data[0];\n+  }\n+  char data[N];\n+};\n+int main() {\n+  constexpr S<1> s1(\"\");\n+}"}]}