{"sha": "8170608bfc488f0dde37b332776e59c912244366", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE3MDYwOGJmYzQ4OGYwZGRlMzdiMzMyNzc2ZTU5YzkxMjI0NDM2Ng==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-10-24T16:25:44Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-10-24T16:25:44Z"}, "message": "re PR other/33426 (Support of #pragma ivdep)\n\n2013-08-24  Tobias Burnus  <burnus@net-b.de>\n\n        PR other/33426\n        * c-pragma.c (init_pragma) Add #pragma ivdep handling.\n        * c-pragma.h (pragma_kind): Add PRAGMA_IVDEP.\n\n        PR other/33426\n        * c-parser.c (c_parser_pragma, c_parser_for_statement):\n        Handle PRAGMA_IVDEP.\n        (c_parser_statement_after_labels): Update call.\n\n        PR other/33426\n        * tree-cfg.c (replace_loop_annotate): New function.\n        (execute_build_cfg): Call it.\n        * gimplify.c (gimple_boolify, gimplify_expr): Handle\n        * ANNOTATE_EXPR.\n        * internal-fn.c (expand_ANNOTATE): New function.\n        * internal-fn.def (ANNOTATE): Define as new internal function.\n        * tree-core.h (tree_node_kind): Add annot_expr_ivdep_kind.\n        * tree-pretty-print.c (dump_generic_node): Handle ANNOTATE_EXPR.\n        * tree.def (ANNOTATE_EXPR): New DEFTREECODE.\n        * doc/extend.texi (Pragmas): Document #pragma ivdep.\n        * doc/generic.texi (Expressions): Document ANNOTATE_EXPR.\n\n        PR other/33426\n        * testsuite/gcc.dg/ivdep.c: New.\n        * testsuite/gcc.dg/vect/vect-ivdep-1.c: New.\n\nFrom-SVN: r204021", "tree": {"sha": "ddaa06506f828f6ab35f493e688951e5b042fbdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddaa06506f828f6ab35f493e688951e5b042fbdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8170608bfc488f0dde37b332776e59c912244366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8170608bfc488f0dde37b332776e59c912244366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8170608bfc488f0dde37b332776e59c912244366", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8170608bfc488f0dde37b332776e59c912244366/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a079f50a721208e94d23fee77ad77322ad1b74a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a079f50a721208e94d23fee77ad77322ad1b74a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a079f50a721208e94d23fee77ad77322ad1b74a8"}], "stats": {"total": 269, "additions": 264, "deletions": 5}, "files": [{"sha": "ca9aa76cc0a48676f2bd043ff864432db37f8450", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -1,3 +1,17 @@\n+2013-08-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR other/33426\n+\t* tree-cfg.c (replace_loop_annotate): New function.\n+\t(execute_build_cfg): Call it.\n+\t* gimplify.c (gimple_boolify, gimplify_expr): Handle ANNOTATE_EXPR.\n+\t* internal-fn.c (expand_ANNOTATE): New function.\n+\t* internal-fn.def (ANNOTATE): Define as new internal function.\n+\t* tree-core.h (tree_node_kind): Add annot_expr_ivdep_kind.\n+\t* tree-pretty-print.c (dump_generic_node): Handle ANNOTATE_EXPR.\n+\t* tree.def (ANNOTATE_EXPR): New DEFTREECODE.\n+\t* doc/extend.texi (Pragmas): Document #pragma ivdep.\n+\t* doc/generic.texi (Expressions): Document ANNOTATE_EXPR.\n+\n 2013-10-17  Ian Bolton  <ian.bolton@arm.com>\n \t    Marcus Shawcroft  <marcus.shawcroft@arm.com>\n "}, {"sha": "7b9174a9a6d21f6e0ebc0b6151c1871906daf84d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -1,3 +1,9 @@\n+2013-08-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR other/33426\n+\t* c-pragma.c (init_pragma) Add #pragma ivdep handling.\n+\t* c-pragma.h (pragma_kind): Add PRAGMA_IVDEP.\n+\n 2013-10-23  Jason Merrill  <jason@redhat.com>\n \n \t* c-format.c (gcc_cxxdiag_char_table): Add %X."}, {"sha": "1656000d9781d5721846a7c102df6c99be176f3a", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -1362,6 +1362,8 @@ init_pragma (void)\n     cpp_register_deferred_pragma (parse_in, \"GCC\", \"pch_preprocess\",\n \t\t\t\t  PRAGMA_GCC_PCH_PREPROCESS, false, false);\n \n+  cpp_register_deferred_pragma (parse_in, \"GCC\", \"ivdep\", PRAGMA_IVDEP, false,\n+\t\t\t\tfalse);\n #ifdef HANDLE_PRAGMA_PACK_WITH_EXPANSION\n   c_register_pragma_with_expansion (0, \"pack\", handle_pragma_pack);\n #else"}, {"sha": "705bcb472a90a26f05e2b2511e60ff86c33555e6", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -53,6 +53,7 @@ typedef enum pragma_kind {\n   PRAGMA_OMP_TEAMS,\n \n   PRAGMA_GCC_PCH_PREPROCESS,\n+  PRAGMA_IVDEP,\n \n   PRAGMA_FIRST_EXTERNAL\n } pragma_kind;"}, {"sha": "22cf8fff4444f6bccf99e086136959dbd37023bf", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -1,3 +1,10 @@\n+2013-08-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR other/33426\n+\t* c-parser.c (c_parser_pragma, c_parser_for_statement):\n+\tHandle PRAGMA_IVDEP.\n+\t(c_parser_statement_after_labels): Update call.\n+\n 2013-10-24  Marek Polacek  <polacek@redhat.com>\n \n \t* c-parser.c (c_parser_struct_declaration): Add a comment."}, {"sha": "4f250783945e4b9c84ac6c27f756ea1a25a51888", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -1159,7 +1159,7 @@ static void c_parser_if_statement (c_parser *);\n static void c_parser_switch_statement (c_parser *);\n static void c_parser_while_statement (c_parser *);\n static void c_parser_do_statement (c_parser *);\n-static void c_parser_for_statement (c_parser *);\n+static void c_parser_for_statement (c_parser *, bool);\n static tree c_parser_asm_statement (c_parser *);\n static tree c_parser_asm_operands (c_parser *);\n static tree c_parser_asm_goto_operands (c_parser *);\n@@ -4585,7 +4585,7 @@ c_parser_statement_after_labels (c_parser *parser)\n \t  c_parser_do_statement (parser);\n \t  break;\n \tcase RID_FOR:\n-\t  c_parser_for_statement (parser);\n+\t  c_parser_for_statement (parser, false);\n \t  break;\n \tcase RID_GOTO:\n \t  c_parser_consume_token (parser);\n@@ -5038,7 +5038,7 @@ c_parser_do_statement (c_parser *parser)\n */\n \n static void\n-c_parser_for_statement (c_parser *parser)\n+c_parser_for_statement (c_parser *parser, bool ivdep)\n {\n   tree block, cond, incr, save_break, save_cont, body;\n   /* The following are only used when parsing an ObjC foreach statement.  */\n@@ -5144,8 +5144,17 @@ c_parser_for_statement (c_parser *parser)\n \t{\n \t  if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n \t    {\n-\t      c_parser_consume_token (parser);\n-\t      cond = NULL_TREE;\n+\t      if (ivdep)\n+\t\t{\n+\t\t  c_parser_error (parser, \"missing loop condition in loop with \"\n+\t\t\t\t  \"%<GCC ivdep%> pragma\");\n+\t\t  cond = error_mark_node;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  c_parser_consume_token (parser);\n+\t\t  cond = NULL_TREE;\n+\t\t}\n \t    }\n \t  else\n \t    {\n@@ -5159,6 +5168,10 @@ c_parser_for_statement (c_parser *parser)\n \t      c_parser_skip_until_found (parser, CPP_SEMICOLON,\n \t\t\t\t\t \"expected %<;%>\");\n \t    }\n+\t  if (ivdep && cond != error_mark_node)\n+\t    cond = build2 (ANNOTATE_EXPR, TREE_TYPE (cond), cond,\n+\t\t\t   build_int_cst (integer_type_node,\n+\t\t\t   annot_expr_ivdep_kind));\n \t}\n       /* Parse the increment expression (the third expression in a\n \t for-statement).  In the case of a foreach-statement, this is\n@@ -9086,6 +9099,16 @@ c_parser_pragma (c_parser *parser, enum pragma_context context)\n     case PRAGMA_OMP_DECLARE_REDUCTION:\n       c_parser_omp_declare (parser, context);\n       return false;\n+    case PRAGMA_IVDEP:\n+      c_parser_consume_pragma (parser);\n+      c_parser_skip_to_pragma_eol (parser);\n+      if (!c_parser_next_token_is_keyword (parser, RID_FOR))\n+\t{\n+\t  c_parser_error (parser, \"for statement expected\");\n+\t  return false;\n+\t}\n+      c_parser_for_statement (parser, true);\n+      return false;\n \n     case PRAGMA_GCC_PCH_PREPROCESS:\n       c_parser_error (parser, \"%<#pragma GCC pch_preprocess%> must be first\");"}, {"sha": "7623a5e550e925db7c1c3088deb5deef3823bde9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -15473,6 +15473,7 @@ for further explanation.\n * Visibility Pragmas::\n * Push/Pop Macro Pragmas::\n * Function Specific Option Pragmas::\n+* Loop-Specific Pragmas::\n @end menu\n \n @node ARM Pragmas\n@@ -15995,6 +15996,48 @@ The @samp{#pragma GCC reset_options} pragma is not implemented in GCC\n versions earlier than 4.4.\n @end table\n \n+@node Loop-Specific Pragmas\n+@subsection Loop-Specific Pragmas\n+\n+@table @code\n+@item #pragma GCC ivdep\n+@cindex pragma GCC ivdep\n+@end table\n+\n+With this pragma, the programmer asserts that there are no loop-carried\n+dependencies which would prevent that consecutive iterations of\n+the following loop can be executed concurrently with SIMD\n+(single instruction multiple data) instructions.\n+\n+For example, the compiler can only unconditionally vectorize the following\n+loop with the pragma:\n+\n+@smallexample\n+void foo (int n, int *a, int *b, int *c)\n+@{\n+  int i, j;\n+#pragma GCC ivdep\n+  for (i = 0; i < n; ++i)\n+    a[i] = b[i] + c[i];\n+@}\n+@end smallexample\n+\n+@noindent\n+In this example, using the @code{restrict} qualifier had the same\n+effect. In the following example, that would not be possible. Assume\n+@math{k < -m} or @math{k >= m}. Only with the pragma, the compiler knows\n+that it can unconditionally vectorize the following loop:\n+\n+@smallexample\n+void ignore_vec_dep (int *a, int k, int c, int m)\n+@{\n+#pragma GCC ivdep\n+  for (int i = 0; i < m; i++)\n+    a[i] = a[i + k] * c;\n+@}\n+@end smallexample\n+\n+\n @node Unnamed Fields\n @section Unnamed struct/union fields within structs/unions\n @cindex @code{struct}"}, {"sha": "75c47456fb933dbd5af6dc2ee5647f247c2a4f79", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -1279,6 +1279,7 @@ the byte offset of the field, but should not be used directly; call\n @tindex SAVE_EXPR\n @tindex TARGET_EXPR\n @tindex VA_ARG_EXPR\n+@tindex ANNOTATE_EXPR\n \n @table @code\n @item NEGATE_EXPR\n@@ -1692,8 +1693,13 @@ mechanism.  It represents expressions like @code{va_arg (ap, type)}.\n Its @code{TREE_TYPE} yields the tree representation for @code{type} and\n its sole argument yields the representation for @code{ap}.\n \n+@item ANNOTATE_EXPR\n+This node is used to attach markers to an expression. The first operand\n+is the annotated expression, the second is an @code{INTEGER_CST} with\n+a value from @code{enum annot_expr_kind}.\n @end table\n \n+\n @node Vectors\n @subsection Vectors\n @tindex VEC_LSHIFT_EXPR"}, {"sha": "8d7844005bf037d114ec37fc099b89cc91e371f2", "filename": "gcc/gimplify.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -3076,6 +3076,17 @@ gimple_boolify (tree expr)\n \tTREE_TYPE (expr) = boolean_type_node;\n       return expr;\n \n+    case ANNOTATE_EXPR:\n+      if ((enum annot_expr_kind) TREE_INT_CST_LOW (TREE_OPERAND (expr, 1))\n+\t  == annot_expr_ivdep_kind)\n+\t{\n+\t  TREE_OPERAND (expr, 0) = gimple_boolify (TREE_OPERAND (expr, 0));\n+\t  if (TREE_CODE (type) != BOOLEAN_TYPE)\n+\t    TREE_TYPE (expr) = boolean_type_node;\n+\t  return expr;\n+\t}\n+      /* FALLTHRU */\n+\n     default:\n       if (COMPARISON_CLASS_P (expr))\n \t{\n@@ -7731,6 +7742,21 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  ret = gimplify_addr_expr (expr_p, pre_p, post_p);\n \t  break;\n \n+\tcase ANNOTATE_EXPR:\n+\t  {\n+\t    tree cond = TREE_OPERAND (*expr_p, 0);\n+\t    tree id = TREE_OPERAND (*expr_p, 1);\n+\t    tree tmp = create_tmp_var_raw (TREE_TYPE(cond), NULL);\n+\t    gimplify_arg (&cond, pre_p, EXPR_LOCATION (*expr_p));\n+\t    gimple call = gimple_build_call_internal (IFN_ANNOTATE, 2,\n+\t\t\t\t\t\t      cond, id);\n+\t    gimple_call_set_lhs (call, tmp);\n+\t    gimplify_seq_add_stmt (pre_p, call);\n+\t    *expr_p = tmp;\n+\t    ret = GS_ALL_DONE;\n+\t    break;\n+\t  }\n+\n \tcase VA_ARG_EXPR:\n \t  ret = gimplify_va_arg_expr (expr_p, pre_p, post_p);\n \t  break;"}, {"sha": "a22f222012c97246bf20cc733d62a9c9b592050b", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -109,6 +109,12 @@ expand_STORE_LANES (gimple stmt)\n   expand_insn (get_multi_vector_move (type, vec_store_lanes_optab), 2, ops);\n }\n \n+static void\n+expand_ANNOTATE (gimple stmt ATTRIBUTE_UNUSED)\n+{\n+  gcc_unreachable ();\n+}\n+\n /* This should get expanded in adjust_simduid_builtins.  */\n \n static void"}, {"sha": "0f5cc3cba42104ba43ef85d4271a210461fa0d44", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -43,3 +43,4 @@ DEF_INTERNAL_FN (STORE_LANES, ECF_CONST | ECF_LEAF)\n DEF_INTERNAL_FN (GOMP_SIMD_LANE, ECF_NOVOPS | ECF_LEAF | ECF_NOTHROW)\n DEF_INTERNAL_FN (GOMP_SIMD_VF, ECF_CONST | ECF_LEAF | ECF_NOTHROW)\n DEF_INTERNAL_FN (GOMP_SIMD_LAST_LANE, ECF_CONST | ECF_LEAF | ECF_NOTHROW)\n+DEF_INTERNAL_FN (ANNOTATE,  ECF_CONST | ECF_LEAF | ECF_NOTHROW)"}, {"sha": "7283360a99b91401f571096d8fa7048507745e0b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -1,3 +1,9 @@\n+2013-08-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR other/33426\n+\t* testsuite/gcc.dg/ivdep.c: New.\n+\t* testsuite/gcc.dg/vect/vect-ivdep-1.c: New.\n+\n 2013-10-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/c-output-mod-2.c: Fix for -fPIC."}, {"sha": "23d51de9fe3d13d0c45e556b0347793bf8a02265", "filename": "gcc/testsuite/gcc.dg/ivdep.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftestsuite%2Fgcc.dg%2Fivdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftestsuite%2Fgcc.dg%2Fivdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fivdep.c?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+\n+/* PR other/33426 */\n+\n+void foo(int n, int *a, int *b, int *c, int *d, int *e) {\n+  int i, j;\n+#pragma GCC ivdep\n+  for (i = 0; ; ++i) { /* { dg-error \"missing loop condition in loop with 'GCC ivdep' pragma before ';' token\" } */\n+    a[i] = b[i] + c[i];\n+  }\n+}"}, {"sha": "8767bb87b7ebb5156c0cc8fe102715bc55ed042c", "filename": "gcc/testsuite/gcc.dg/vect/vect-ivdep-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ivdep-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ivdep-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-ivdep-1.c?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-options \"-O3 -fopt-info-vec-optimized\" } */\n+\n+/* PR other/33426 */\n+/* Testing whether #pragma ivdep is working.  */\n+\n+void foo(int n, int *a, int *b, int *c, int *d, int *e) {\n+  int i, j;\n+#pragma GCC ivdep\n+  for (i = 0; i < n; ++i) {\n+    a[i] = b[i] + c[i];\n+  }\n+}\n+\n+/* { dg-message \"loop vectorized\" \"\" { target *-*-* } 0 } */\n+/* { dg-bogus \"version\" \"\" { target *-*-* } 0 } */\n+/* { dg-bogus \"alias\" \"\" { target *-*-* } 0 } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "cf8200a9f355b212bbafc9827c92b0c2ef30e849", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -250,6 +250,71 @@ build_gimple_cfg (gimple_seq seq)\n   discriminator_per_locus.dispose ();\n }\n \n+\n+/* Search for ANNOTATE call with annot_expr_ivdep_kind; if found, remove\n+   it and set loop->safelen to INT_MAX.  We assume that the annotation\n+   comes immediately before the condition.  */\n+\n+static void\n+replace_loop_annotate ()\n+{\n+  struct loop *loop;\n+  loop_iterator li;\n+  basic_block bb;\n+  gimple_stmt_iterator gsi;\n+  gimple stmt;\n+\n+  FOR_EACH_LOOP (li, loop, 0)\n+    {\n+      gsi = gsi_last_bb (loop->header);\n+      stmt = gsi_stmt (gsi);\n+      if (stmt && gimple_code (stmt) == GIMPLE_COND)\n+\t{\n+\t  gsi_prev_nondebug (&gsi);\n+\t  if (gsi_end_p (gsi))\n+\t    continue;\n+\t  stmt = gsi_stmt (gsi);\n+\t  if (gimple_code (stmt) != GIMPLE_CALL)\n+\t\tcontinue;\n+\t  if (!gimple_call_internal_p (stmt)\n+\t\t  || gimple_call_internal_fn (stmt) != IFN_ANNOTATE)\n+\t    continue;\n+\t  if ((annot_expr_kind) tree_low_cst (gimple_call_arg (stmt, 1), 0)\n+\t      != annot_expr_ivdep_kind)\n+\t    continue;\n+\t  stmt = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t      gimple_call_arg (stmt, 0));\n+\t  gsi_replace (&gsi, stmt, true);\n+\t  loop->safelen = INT_MAX;\n+\t}\n+    }\n+\n+  /* Remove IFN_ANNOTATE. Safeguard for the case loop->latch == NULL.  */\n+  FOR_EACH_BB (bb)\n+    {\n+      gsi = gsi_last_bb (bb);\n+      stmt = gsi_stmt (gsi);\n+      if (stmt && gimple_code (stmt) == GIMPLE_COND)\n+\tgsi_prev_nondebug (&gsi);\n+      if (gsi_end_p (gsi))\n+\tcontinue;\n+      stmt = gsi_stmt (gsi);\n+      if (gimple_code (stmt) != GIMPLE_CALL)\n+\tcontinue;\n+      if (!gimple_call_internal_p (stmt)\n+\t  || gimple_call_internal_fn (stmt) != IFN_ANNOTATE)\n+\tcontinue;\n+      if ((annot_expr_kind) tree_low_cst (gimple_call_arg (stmt, 1), 0)\n+\t  != annot_expr_ivdep_kind)\n+\tcontinue;\n+      warning (0, \"ignoring %<GCC ivdep%> annotation\");\n+      stmt = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t  gimple_call_arg (stmt, 0));\n+      gsi_replace (&gsi, stmt, true);\n+    }\n+}\n+\n+\n static unsigned int\n execute_build_cfg (void)\n {\n@@ -264,6 +329,7 @@ execute_build_cfg (void)\n     }\n   cleanup_tree_cfg ();\n   loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n+  replace_loop_annotate ();\n   return 0;\n }\n "}, {"sha": "ea110bc09e374efe1d9c53f4538eb339b6dc2ec9", "filename": "gcc/tree-core.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -647,6 +647,10 @@ enum tree_node_kind {\n   all_kinds\n };\n \n+enum annot_expr_kind {\n+  annot_expr_ivdep_kind\n+};\n+\n \n /*---------------------------------------------------------------------------\n                                 Type definitions"}, {"sha": "150333b208f117121e5496e7a35d943a94af036e", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -2095,6 +2095,18 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       pp_string (buffer, \" predictor.\");\n       break;\n \n+    case ANNOTATE_EXPR:\n+      pp_string (buffer, \"ANNOTATE_EXPR <\");\n+      switch ((enum annot_expr_kind) TREE_INT_CST_LOW (TREE_OPERAND (node, 1)))\n+\t{\n+\tcase annot_expr_ivdep_kind:\n+\t  pp_string (buffer, \"ivdep, \");\n+\t  break;\n+\t}\n+      dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n+      pp_greater (buffer);\n+      break;\n+\n     case RETURN_EXPR:\n       pp_string (buffer, \"return\");\n       op0 = TREE_OPERAND (node, 0);"}, {"sha": "9bd1b3d21c2beb4dff5494568b59983c0a22e786", "filename": "gcc/tree.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8170608bfc488f0dde37b332776e59c912244366/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=8170608bfc488f0dde37b332776e59c912244366", "patch": "@@ -1261,6 +1261,12 @@ DEFTREECODE (OPTIMIZATION_NODE, \"optimization_node\", tcc_exceptional, 0)\n /* TARGET_OPTION_NODE.  Node to store the target specific options.  */\n DEFTREECODE (TARGET_OPTION_NODE, \"target_option_node\", tcc_exceptional, 0)\n \n+/* ANNOTATE_EXPR.\n+   Operand 0 is the expression to be annotated.\n+   Operand 1 is the annotation id. */\n+DEFTREECODE (ANNOTATE_EXPR, \"annotate_expr\", tcc_expression, 2)\n+\n+\n /*\n Local variables:\n mode:c"}]}