{"sha": "144aee70b80de50f96a97ee64edd2f1c237c4906", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ0YWVlNzBiODBkZTUwZjk2YTk3ZWU2NGVkZDJmMWMyMzdjNDkwNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-05T09:36:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-05T09:36:47Z"}, "message": "match.pd: Canonicalize (x + (x << cst)) into (x * cst2) [PR94800]\n\nThe popcount* testcases show yet another creative way to write popcount,\nbut rather than adjusting the popcount matcher to deal with it, I think\nwe just should canonicalize those (X + (X << C) to X * (1 + (1 << C))\nand (X << C1) + (X << C2) to X * ((1 << C1) + (1 << C2)), because for\nmultiplication we already have simplification rules that can handle nested\nmultiplication (X * CST1 * CST2), while the the shifts and adds we have\nnothing like that.  And user could have written the multiplication anyway,\nso if we don't emit the fastest or smallest code for the multiplication by\nconstant, we should improve that.  At least on the testcases seems the\nemitted code is reasonable according to cost, except that perhaps we could\nin some cases try to improve expansion of vector multiplication by\nuniform constant.\n\n2020-05-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94800\n\t* match.pd (X + (X << C) to X * (1 + (1 << C)),\n\t(X << C1) + (X << C2) to X * ((1 << C1) + (1 << C2))): New\n\tcanonicalizations.\n\n\t* gcc.dg/tree-ssa/pr94800.c: New test.\n\t* gcc.dg/tree-ssa/popcount5.c: New test.\n\t* gcc.dg/tree-ssa/popcount5l.c: New test.\n\t* gcc.dg/tree-ssa/popcount5ll.c: New test.", "tree": {"sha": "a0b80710604088be014e425ee8ef0cb9a64cf5bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0b80710604088be014e425ee8ef0cb9a64cf5bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/144aee70b80de50f96a97ee64edd2f1c237c4906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144aee70b80de50f96a97ee64edd2f1c237c4906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144aee70b80de50f96a97ee64edd2f1c237c4906", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144aee70b80de50f96a97ee64edd2f1c237c4906/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f916201ac390a5e1c88562bb91b1b4ab2852f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f916201ac390a5e1c88562bb91b1b4ab2852f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f916201ac390a5e1c88562bb91b1b4ab2852f22"}], "stats": {"total": 202, "additions": 202, "deletions": 0}, "files": [{"sha": "cc076c8ea42cb6f75547883937dd6d60024d88ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=144aee70b80de50f96a97ee64edd2f1c237c4906", "patch": "@@ -1,5 +1,10 @@\n 2020-05-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94800\n+\t* match.pd (X + (X << C) to X * (1 + (1 << C)),\n+\t(X << C1) + (X << C2) to X * ((1 << C1) + (1 << C2))): New\n+\tcanonicalizations.\n+\n \tPR target/94942\n \t* config/i386/mmx.md (*vec_dupv4hi): Use xYw constraints instead of Yv.\n "}, {"sha": "d9575179655111a6112221951a9583b4919f762c", "filename": "gcc/match.pd", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=144aee70b80de50f96a97ee64edd2f1c237c4906", "patch": "@@ -2570,6 +2570,41 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t && single_use (@3))\n      (mult (plusminus @2 { build_one_cst (type); }) @0))))))\n \n+#if GIMPLE\n+/* Canonicalize X + (X << C) into X * (1 + (1 << C)) and\n+   (X << C1) + (X << C2) into X * ((1 << C1) + (1 << C2)).  */\n+(simplify\n+ (plus:c @0 (lshift:s @0 INTEGER_CST@1))\n+  (if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+       && tree_fits_uhwi_p (@1)\n+       && tree_to_uhwi (@1) < element_precision (type))\n+   (with { tree t = type;\n+\t   if (!TYPE_OVERFLOW_WRAPS (t)) t = unsigned_type_for (t);\n+\t   wide_int w = wi::set_bit_in_zero (tree_to_uhwi (@1),\n+\t\t\t\t\t     element_precision (type));\n+\t   w += 1;\n+\t   tree cst = wide_int_to_tree (VECTOR_TYPE_P (t) ? TREE_TYPE (t)\n+\t\t\t\t\t: t, w);\n+\t   cst = build_uniform_cst (t, cst); }\n+    (convert (mult (convert:t @0) { cst; })))))\n+(simplify\n+ (plus (lshift:s @0 INTEGER_CST@1) (lshift:s @0 INTEGER_CST@2))\n+  (if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+       && tree_fits_uhwi_p (@1)\n+       && tree_to_uhwi (@1) < element_precision (type)\n+       && tree_fits_uhwi_p (@2)\n+       && tree_to_uhwi (@2) < element_precision (type))\n+   (with { tree t = type;\n+\t   if (!TYPE_OVERFLOW_WRAPS (t)) t = unsigned_type_for (t);\n+\t   unsigned int prec = element_precision (type);\n+\t   wide_int w = wi::set_bit_in_zero (tree_to_uhwi (@1), prec);\n+\t   w += wi::set_bit_in_zero (tree_to_uhwi (@2), prec);\n+\t   tree cst = wide_int_to_tree (VECTOR_TYPE_P (t) ? TREE_TYPE (t)\n+\t\t\t\t\t: t, w);\n+\t   cst = build_uniform_cst (t, cst); }\n+    (convert (mult (convert:t @0) { cst; })))))\n+#endif\n+\n /* Simplifications of MIN_EXPR, MAX_EXPR, fmin() and fmax().  */\n \n (for minmax (min max FMIN_ALL FMAX_ALL)"}, {"sha": "2b48741584619a461e99b92b72c81cb9b051e030", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=144aee70b80de50f96a97ee64edd2f1c237c4906", "patch": "@@ -1,5 +1,11 @@\n 2020-05-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94800\n+\t* gcc.dg/tree-ssa/pr94800.c: New test.\n+\t* gcc.dg/tree-ssa/popcount5.c: New test.\n+\t* gcc.dg/tree-ssa/popcount5l.c: New test.\n+\t* gcc.dg/tree-ssa/popcount5ll.c: New test.\n+\n \tPR target/94942\n \t* gcc.target/i386/pr94942.c: New test.\n "}, {"sha": "6358d4f5600f2c853c26d3671c2f89c2efb8e13b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/popcount5.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount5.c?ref=144aee70b80de50f96a97ee64edd2f1c237c4906", "patch": "@@ -0,0 +1,22 @@\n+/* PR tree-optimization/94800 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target popcount } */\n+/* { dg-require-effective-target int32plus } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+const unsigned m1  = 0x55555555UL;\n+const unsigned m2  = 0x33333333UL;\n+const unsigned m4  = 0x0F0F0F0FUL;\n+const int shift = 24;\n+\n+int popcount64c(unsigned x)\n+{\n+    x -= (x >> 1) & m1;\n+    x = (x & m2) + ((x >> 2) & m2);\n+    x = (x + (x >> 4)) & m4;\n+    x += (x << 8);\n+    x += (x << 16);\n+    return x >> shift;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\.POPCOUNT\" 1 \"optimized\" } } */"}, {"sha": "b761667099f31c18975b0d021a9e212316d8a5bd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/popcount5l.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount5l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount5l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount5l.c?ref=144aee70b80de50f96a97ee64edd2f1c237c4906", "patch": "@@ -0,0 +1,32 @@\n+/* PR tree-optimization/94800 */\n+/* { dg-do compile { target int32plus } } */\n+/* { dg-require-effective-target popcountl } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#if __SIZEOF_LONG__ == 4\n+const unsigned long m1  = 0x55555555UL;\n+const unsigned long m2  = 0x33333333UL;\n+const unsigned long m4  = 0x0F0F0F0FUL;\n+const int shift = 24;\n+#else\n+const unsigned long m1  = 0x5555555555555555UL;\n+const unsigned long m2  = 0x3333333333333333UL;\n+const unsigned long m4  = 0x0f0f0f0f0f0f0f0fUL;\n+const int shift = 56;\n+#endif\n+\n+\n+int popcount64c(unsigned long x)\n+{\n+    x -= (x >> 1) & m1;\n+    x = (x & m2) + ((x >> 2) & m2);\n+    x = (x + (x >> 4)) & m4;\n+    x += (x << 8);\n+    x += (x << 16);\n+#if __SIZEOF_LONG__ != 4\n+    x += (x << 32);\n+#endif\n+    return x >> shift;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\.POPCOUNT\" 1 \"optimized\" } } */"}, {"sha": "831d5e1722ad8a4a21dd2c28f0322a9206a14efb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/popcount5ll.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount5ll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount5ll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpopcount5ll.c?ref=144aee70b80de50f96a97ee64edd2f1c237c4906", "patch": "@@ -0,0 +1,22 @@\n+/* PR tree-optimization/94800 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target popcountll } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+const unsigned long long m1  = 0x5555555555555555ULL;\n+const unsigned long long m2  = 0x3333333333333333ULL;\n+const unsigned long long m4  = 0x0F0F0F0F0F0F0F0FULL;\n+const int shift = 56;\n+\n+int popcount64c(unsigned long long x)\n+{\n+    x -= (x >> 1) & m1;\n+    x = (x & m2) + ((x >> 2) & m2);\n+    x = (x + (x >> 4)) & m4;\n+    x += (x << 8);\n+    x += (x << 16);\n+    x += (x << 32);\n+    return x >> shift;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\.POPCOUNT\" 1 \"optimized\" } } */"}, {"sha": "4f92df3147b82c6cc0a014fba002a0184744f144", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94800.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94800.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144aee70b80de50f96a97ee64edd2f1c237c4906/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94800.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94800.c?ref=144aee70b80de50f96a97ee64edd2f1c237c4906", "patch": "@@ -0,0 +1,80 @@\n+/* PR tree-optimization/94800 */\n+/* { dg-do compile { target { ilp32 || lp64 } } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \" \\* 72340172838076673\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\* 16843009\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\* 289360691352306692\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\* 1229782938247303441\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"<<\" \"optimized\" } } */\n+\n+unsigned long long int\n+foo (unsigned long long int x)\n+{\n+  unsigned long long int a = x + (x << 8);\n+  unsigned long long int b = a + (a << 16);\n+  unsigned long long int c = b + (b << 32);\n+  return c;\n+}\n+\n+unsigned int\n+bar (unsigned int x)\n+{\n+  unsigned int a = x + (x << 8);\n+  unsigned int b = a + (a << 16);\n+  return b;\n+}\n+\n+unsigned long long int\n+baz (unsigned long long int x)\n+{\n+  unsigned long long int a = (x << 2) + (x << 10);\n+  unsigned long long int b = a + (a << 16);\n+  unsigned long long int c = b + (b << 32);\n+  return c;\n+}\n+\n+unsigned long long int\n+qux (unsigned long long int x)\n+{\n+  unsigned long long int a = x + (x << 4);\n+  unsigned long long int b = a + (a << 8);\n+  unsigned long long int c = b + (b << 16);\n+  unsigned long long int d = c + (c << 32);\n+  return d;\n+}\n+\n+long long int\n+quux (long long int x)\n+{\n+  long long int a = x + (x << 8);\n+  long long int b = a + (a << 16);\n+  long long int c = b + (b << 32);\n+  return c;\n+}\n+\n+int\n+corge (int x)\n+{\n+  int a = x + (x << 8);\n+  int b = a + (a << 16);\n+  return b;\n+}\n+\n+long long int\n+garply (long long int x)\n+{\n+  long long int a = (x << 2) + (x << 10);\n+  long long int b = a + (a << 16);\n+  long long int c = b + (b << 32);\n+  return c;\n+}\n+\n+long long int\n+waldo (long long int x)\n+{\n+  long long int a = x + (x << 4);\n+  long long int b = a + (a << 8);\n+  long long int c = b + (b << 16);\n+  long long int d = c + (c << 32);\n+  return d;\n+}"}]}