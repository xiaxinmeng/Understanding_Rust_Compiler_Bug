{"sha": "b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI0MTdiNTlkNGJlMmU1ZTg4MmRlYzVhZTNiMzczZjY5MzMxZDZlMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-14T08:12:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-14T08:12:10Z"}, "message": "omp-general.c (omp_context_name_list_prop): New function.\n\n\t* omp-general.c (omp_context_name_list_prop): New function.\n\t(omp_context_selector_matches): Use it.  Return 0 if it returns\n\tNULL.\n\t(omp_context_selector_props_compare): Allow equivalency of an\n\tidentifier and a string literal containing no embedded zeros.\nc-family/\n\t* c-omp.c (c_omp_check_context_selector): Handle name lists\n\tcontaining string literals.  Don't diagnose atomic_default_mem_order\n\twith multiple props.\nc/\n\t* c-parser.c (c_parser_omp_context_selector): Rename\n\tCTX_PROPERTY_IDLIST to CTX_PROPERTY_NAME_LIST, add CTX_PROPERTY_ID.\n\tUse CTX_PROPERTY_ID for atomic_default_mem_order, only allow a single\n\tidentifier in that.  For CTX_PROPERTY_NAME_LIST, allow identifiers\n\tand string literals.\ncp/\n\t* parser.c (cp_parser_omp_context_selector): Rename\n\tCTX_PROPERTY_IDLIST to CTX_PROPERTY_NAME_LIST, add CTX_PROPERTY_ID.\n\tUse CTX_PROPERTY_ID for atomic_default_mem_order, only allow a single\n\tidentifier in that.  For CTX_PROPERTY_NAME_LIST, allow identifiers\n\tand string literals.\n\t* pt.c (tsubst_attribute): Fix up STRING_CST handling if allow_string.\ntestsuite/\n\t* c-c++-common/gomp/declare-variant-2.c: Adjust expected diagnostics,\n\tadd a test for atomic_default_mem_order with a string literal.\n\t* c-c++-common/gomp/declare-variant-3.c: Use string literal props\n\tin a few random places, add a few string literal prop related tests.\n\t* c-c++-common/gomp/declare-variant-8.c: Likewise.\n\t* c-c++-common/gomp/declare-variant-9.c: Use string literal props\n\tin a few random places.\n\t* c-c++-common/gomp/declare-variant-10.c: Likewise.\n\t* c-c++-common/gomp/declare-variant-11.c: Likewise.\n\t* c-c++-common/gomp/declare-variant-12.c: Likewise.\n\t* g++.dg/gomp/declare-variant-7.C: Likewise.\n\nFrom-SVN: r278202", "tree": {"sha": "b3d7af488c90ecd3476ef6b9d1f9e4cbfc00051b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3d7af488c90ecd3476ef6b9d1f9e4cbfc00051b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f14713178d25db56903458432b0e3dbf35dbe840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f14713178d25db56903458432b0e3dbf35dbe840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f14713178d25db56903458432b0e3dbf35dbe840"}], "stats": {"total": 328, "additions": 243, "deletions": 85}, "files": [{"sha": "7da3e6df487b15ca9c2eddbc4cd5f7844dca0101", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -1,3 +1,11 @@\n+2019-11-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-general.c (omp_context_name_list_prop): New function.\n+\t(omp_context_selector_matches): Use it.  Return 0 if it returns\n+\tNULL.\n+\t(omp_context_selector_props_compare): Allow equivalency of an\n+\tidentifier and a string literal containing no embedded zeros.\n+\n 2019-11-14  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* range-op.cc (RANGE3): Remove."}, {"sha": "682355d44548b0ba99757da458a4ca9eb38d5db4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -1,3 +1,9 @@\n+2019-11-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-omp.c (c_omp_check_context_selector): Handle name lists\n+\tcontaining string literals.  Don't diagnose atomic_default_mem_order\n+\twith multiple props.\n+\n 2019-11-13  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-cppbuiltin.c (builtin_define_float_constants): Also define"}, {"sha": "7d8eb322482dcf35b3534b9aa85883380d8d02fd", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -2196,8 +2196,9 @@ c_omp_check_context_selector (location_t loc, tree ctx)\n \t\t{\n \t\t  if (props[i].props[j] == NULL)\n \t\t    {\n-\t\t      if (!strcmp (IDENTIFIER_POINTER (TREE_PURPOSE (t2)),\n-\t\t\t\t   \" score\"))\n+\t\t      if (TREE_PURPOSE (t2)\n+\t\t\t  && !strcmp (IDENTIFIER_POINTER (TREE_PURPOSE (t2)),\n+\t\t\t\t      \" score\"))\n \t\t\tbreak;\n \t\t      if (props[i].props == atomic_default_mem_order)\n \t\t\t{\n@@ -2207,31 +2208,28 @@ c_omp_check_context_selector (location_t loc, tree ctx)\n \t\t\t\t    \"atomic_default_mem_order\");\n \t\t\t  return error_mark_node;\n \t\t\t}\n-\t\t      else\n+\t\t      else if (TREE_PURPOSE (t2))\n \t\t\twarning_at (loc, 0,\n \t\t\t\t    \"unknown property %qs of %qs selector\",\n \t\t\t\t    IDENTIFIER_POINTER (TREE_PURPOSE (t2)),\n \t\t\t\t    props[i].selector);\n+\t\t      else\n+\t\t\twarning_at (loc, 0,\n+\t\t\t\t    \"unknown property %qE of %qs selector\",\n+\t\t\t\t    TREE_VALUE (t2), props[i].selector);\n \t\t      break;\n \t\t    }\n-\t\t  else if (!strcmp (IDENTIFIER_POINTER (TREE_PURPOSE (t2)),\n-\t\t\t\t    props[i].props[j]))\n+\t\t  else if (TREE_PURPOSE (t2) == NULL_TREE)\n \t\t    {\n-\t\t      if (props[i].props == atomic_default_mem_order\n-\t\t\t  && t2 != TREE_VALUE (t1))\n-\t\t\t{\n-\t\t\t  tree t3 = TREE_VALUE (t1);\n-\t\t\t  if (!strcmp (IDENTIFIER_POINTER (TREE_PURPOSE (t3)),\n-\t\t\t\t       \" score\")\n-\t\t\t      && t2 == TREE_CHAIN (TREE_VALUE (t1)))\n-\t\t\t    break;\n-\t\t\t  error_at (loc,\n-\t\t\t\t    \"%qs selector must have a single property\",\n-\t\t\t\t    \"atomic_default_mem_order\");\n-\t\t\t  return error_mark_node;\n-\t\t\t}\n-\t\t      break;\n+\t\t      const char *str = TREE_STRING_POINTER (TREE_VALUE (t2));\n+\t\t      if (!strcmp (str, props[i].props[j])\n+\t\t\t  && ((size_t) TREE_STRING_LENGTH (TREE_VALUE (t2))\n+\t\t\t      == strlen (str) + 1))\n+\t\t\tbreak;\n \t\t    }\n+\t\t  else if (!strcmp (IDENTIFIER_POINTER (TREE_PURPOSE (t2)),\n+\t\t\t\t    props[i].props[j]))\n+\t\t    break;\n \t\t}\n     }\n   return ctx;"}, {"sha": "b60c6482993e56fedcdd4158194cc88576e0c318", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -1,3 +1,11 @@\n+2019-11-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_context_selector): Rename\n+\tCTX_PROPERTY_IDLIST to CTX_PROPERTY_NAME_LIST, add CTX_PROPERTY_ID.\n+\tUse CTX_PROPERTY_ID for atomic_default_mem_order, only allow a single\n+\tidentifier in that.  For CTX_PROPERTY_NAME_LIST, allow identifiers\n+\tand string literals.\n+\n 2019-11-14  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-tree.h (enum c_typespec_kind): Add ctsk_tagref_attrs and"}, {"sha": "7219fc4f982b688882be56eaecb03c413bf61e4a", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -19728,9 +19728,9 @@ c_parser_omp_context_selector (c_parser *parser, tree set, tree parms)\n       bool allow_score = true;\n       bool allow_user = false;\n       int property_limit = 0;\n-      enum { CTX_PROPERTY_NONE, CTX_PROPERTY_USER, CTX_PROPERTY_IDLIST,\n-\t     CTX_PROPERTY_EXPR, CTX_PROPERTY_SIMD } property_kind\n-\t= CTX_PROPERTY_NONE;\n+      enum { CTX_PROPERTY_NONE, CTX_PROPERTY_USER, CTX_PROPERTY_NAME_LIST,\n+\t     CTX_PROPERTY_ID, CTX_PROPERTY_EXPR,\n+\t     CTX_PROPERTY_SIMD } property_kind = CTX_PROPERTY_NONE;\n       switch (IDENTIFIER_POINTER (set)[0])\n \t{\n \tcase 'c': /* construct */\n@@ -19744,13 +19744,13 @@ c_parser_omp_context_selector (c_parser *parser, tree set, tree parms)\n \t  allow_score = false;\n \t  allow_user = true;\n \t  property_limit = 3;\n-\t  property_kind = CTX_PROPERTY_IDLIST;\n+\t  property_kind = CTX_PROPERTY_NAME_LIST;\n \t  break;\n \tcase 'i': /* implementation */\n \t  selectors = omp_implementation_selectors;\n \t  allow_user = true;\n \t  property_limit = 3;\n-\t  property_kind = CTX_PROPERTY_IDLIST;\n+\t  property_kind = CTX_PROPERTY_NAME_LIST;\n \t  break;\n \tcase 'u': /* user */\n \t  selectors = omp_user_selectors;\n@@ -19784,6 +19784,11 @@ c_parser_omp_context_selector (c_parser *parser, tree set, tree parms)\n \t  if (strcmp (selectors[i], IDENTIFIER_POINTER (selector)) == 0)\n \t    break;\n \t}\n+      if (property_kind == CTX_PROPERTY_NAME_LIST\n+\t  && IDENTIFIER_POINTER (set)[0] == 'i'\n+\t  && strcmp (IDENTIFIER_POINTER (selector),\n+\t\t     \"atomic_default_mem_order\") == 0)\n+\tproperty_kind = CTX_PROPERTY_ID;\n \n       c_parser_consume_token (parser);\n \n@@ -19859,21 +19864,41 @@ c_parser_omp_context_selector (c_parser *parser, tree set, tree parms)\n \t\t}\n \t      while (1);\n \t      break;\n-\t    case CTX_PROPERTY_IDLIST:\n+\t    case CTX_PROPERTY_ID:\n+\t      if (c_parser_next_token_is (parser, CPP_KEYWORD)\n+\t\t  || c_parser_next_token_is (parser, CPP_NAME))\n+\t\t{\n+\t\t  tree prop = c_parser_peek_token (parser)->value;\n+\t\t  c_parser_consume_token (parser);\n+\t\t  properties = tree_cons (prop, NULL_TREE, properties);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  c_parser_error (parser, \"expected identifier\");\n+\t\t  return error_mark_node;\n+\t\t}\n+\t      break;\n+\t    case CTX_PROPERTY_NAME_LIST:\n \t      do\n \t\t{\n-\t\t  tree prop;\n+\t\t  tree prop = NULL_TREE, value = NULL_TREE;\n \t\t  if (c_parser_next_token_is (parser, CPP_KEYWORD)\n \t\t      || c_parser_next_token_is (parser, CPP_NAME))\n-\t\t    prop = c_parser_peek_token (parser)->value;\n+\t\t    {\n+\t\t      prop = c_parser_peek_token (parser)->value;\n+\t\t      c_parser_consume_token (parser);\n+\t\t    }\n+\t\t  else if (c_parser_next_token_is (parser, CPP_STRING))\n+\t\t    value = c_parser_string_literal (parser, false,\n+\t\t\t\t\t\t     false).value;\n \t\t  else\n \t\t    {\n-\t\t      c_parser_error (parser, \"expected identifier\");\n+\t\t      c_parser_error (parser, \"expected identifier or \"\n+\t\t\t\t\t      \"string literal\");\n \t\t      return error_mark_node;\n \t\t    }\n-\t\t  c_parser_consume_token (parser);\n \n-\t\t  properties = tree_cons (prop, NULL_TREE, properties);\n+\t\t  properties = tree_cons (prop, value, properties);\n \n \t\t  if (c_parser_next_token_is (parser, CPP_COMMA))\n \t\t    c_parser_consume_token (parser);\n@@ -19923,7 +19948,8 @@ c_parser_omp_context_selector (c_parser *parser, tree set, tree parms)\n \t  parens.skip_until_found_close (parser);\n \t  properties = nreverse (properties);\n \t}\n-      else if (property_kind == CTX_PROPERTY_IDLIST\n+      else if (property_kind == CTX_PROPERTY_NAME_LIST\n+\t       || property_kind == CTX_PROPERTY_ID\n \t       || property_kind == CTX_PROPERTY_EXPR)\n \t{\n \t  c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\");"}, {"sha": "ec053f3933f91fce1b200261aefc6e0d1579aef9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -1,3 +1,12 @@\n+2019-11-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_context_selector): Rename\n+\tCTX_PROPERTY_IDLIST to CTX_PROPERTY_NAME_LIST, add CTX_PROPERTY_ID.\n+\tUse CTX_PROPERTY_ID for atomic_default_mem_order, only allow a single\n+\tidentifier in that.  For CTX_PROPERTY_NAME_LIST, allow identifiers\n+\tand string literals.\n+\t* pt.c (tsubst_attribute): Fix up STRING_CST handling if allow_string.\n+\n 2019-11-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/89070 - bogus [[nodiscard]] warning in SFINAE."}, {"sha": "be29a2782c12a913a0b04a90ebea51bdb4708ab9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -40464,9 +40464,9 @@ cp_parser_omp_context_selector (cp_parser *parser, tree set, bool has_parms_p)\n       bool allow_score = true;\n       bool allow_user = false;\n       int property_limit = 0;\n-      enum { CTX_PROPERTY_NONE, CTX_PROPERTY_USER, CTX_PROPERTY_IDLIST,\n-\t     CTX_PROPERTY_EXPR, CTX_PROPERTY_SIMD } property_kind\n-\t= CTX_PROPERTY_NONE;\n+      enum { CTX_PROPERTY_NONE, CTX_PROPERTY_USER, CTX_PROPERTY_NAME_LIST,\n+\t     CTX_PROPERTY_ID, CTX_PROPERTY_EXPR,\n+\t     CTX_PROPERTY_SIMD } property_kind = CTX_PROPERTY_NONE;\n       switch (IDENTIFIER_POINTER (set)[0])\n \t{\n \tcase 'c': /* construct */\n@@ -40480,13 +40480,13 @@ cp_parser_omp_context_selector (cp_parser *parser, tree set, bool has_parms_p)\n \t  allow_score = false;\n \t  allow_user = true;\n \t  property_limit = 3;\n-\t  property_kind = CTX_PROPERTY_IDLIST;\n+\t  property_kind = CTX_PROPERTY_NAME_LIST;\n \t  break;\n \tcase 'i': /* implementation */\n \t  selectors = omp_implementation_selectors;\n \t  allow_user = true;\n \t  property_limit = 3;\n-\t  property_kind = CTX_PROPERTY_IDLIST;\n+\t  property_kind = CTX_PROPERTY_NAME_LIST;\n \t  break;\n \tcase 'u': /* user */\n \t  selectors = omp_user_selectors;\n@@ -40519,6 +40519,11 @@ cp_parser_omp_context_selector (cp_parser *parser, tree set, bool has_parms_p)\n \t  if (strcmp (selectors[i], IDENTIFIER_POINTER (selector)) == 0)\n \t    break;\n \t}\n+      if (property_kind == CTX_PROPERTY_NAME_LIST\n+\t  && IDENTIFIER_POINTER (set)[0] == 'i'\n+\t  && strcmp (IDENTIFIER_POINTER (selector),\n+\t\t     \"atomic_default_mem_order\") == 0)\n+\tproperty_kind = CTX_PROPERTY_ID;\n \n       cp_lexer_consume_token (parser->lexer);\n \n@@ -40607,21 +40612,40 @@ cp_parser_omp_context_selector (cp_parser *parser, tree set, bool has_parms_p)\n \t\t}\n \t      while (1);\n \t      break;\n-\t    case CTX_PROPERTY_IDLIST:\n+\t    case CTX_PROPERTY_ID:\n+\t      if (cp_lexer_next_token_is (parser->lexer, CPP_KEYWORD)\n+\t\t  || cp_lexer_next_token_is (parser->lexer, CPP_NAME))\n+\t\t{\n+\t\t  tree prop = cp_lexer_peek_token (parser->lexer)->u.value;\n+\t\t  cp_lexer_consume_token (parser->lexer);\n+\t\t  properties = tree_cons (prop, NULL_TREE, properties);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  cp_parser_error (parser, \"expected identifier\");\n+\t\t  return error_mark_node;\n+\t\t}\n+\t      break;\n+\t    case CTX_PROPERTY_NAME_LIST:\n \t      do\n \t\t{\n-\t\t  tree prop;\n+\t\t  tree prop = NULL_TREE, value = NULL_TREE;\n \t\t  if (cp_lexer_next_token_is (parser->lexer, CPP_KEYWORD)\n \t\t      || cp_lexer_next_token_is (parser->lexer, CPP_NAME))\n-\t\t    prop = cp_lexer_peek_token (parser->lexer)->u.value;\n+\t\t    {\n+\t\t      prop = cp_lexer_peek_token (parser->lexer)->u.value;\n+\t\t      cp_lexer_consume_token (parser->lexer);\n+\t\t    }\n+\t\t  else if (cp_lexer_next_token_is (parser->lexer, CPP_STRING))\n+\t\t    value = cp_parser_string_literal (parser, false, false);\n \t\t  else\n \t\t    {\n-\t\t      cp_parser_error (parser, \"expected identifier\");\n+\t\t      cp_parser_error (parser, \"expected identifier or \"\n+\t\t\t\t\t       \"string literal\");\n \t\t      return error_mark_node;\n \t\t    }\n-\t\t  cp_lexer_consume_token (parser->lexer);\n \n-\t\t  properties = tree_cons (prop, NULL_TREE, properties);\n+\t\t  properties = tree_cons (prop, value, properties);\n \n \t\t  if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))\n \t\t    cp_lexer_consume_token (parser->lexer);\n@@ -40668,7 +40692,8 @@ cp_parser_omp_context_selector (cp_parser *parser, tree set, bool has_parms_p)\n \n \t  properties = nreverse (properties);\n \t}\n-      else if (property_kind == CTX_PROPERTY_IDLIST\n+      else if (property_kind == CTX_PROPERTY_NAME_LIST\n+\t       || property_kind == CTX_PROPERTY_ID\n \t       || property_kind == CTX_PROPERTY_EXPR)\n \t{\n \t  cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN);"}, {"sha": "307ae6ee1717154a1422194c4c88e28b2bdf9687", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -11166,9 +11166,9 @@ tsubst_attribute (tree t, tree *decl_p, tree args,\n \t\t\tbool allow_string\n \t\t\t  = ((TREE_PURPOSE (t2) != condition || set[0] != 'u')\n \t\t\t     && TREE_PURPOSE (t3) != score);\n-\t\t\tif (TREE_CODE (t3) == STRING_CST && allow_string)\n-\t\t\t  continue;\n \t\t\ttree v = TREE_VALUE (t3);\n+\t\t\tif (TREE_CODE (v) == STRING_CST && allow_string)\n+\t\t\t  continue;\n \t\t\tv = tsubst_expr (v, args, complain, in_decl, true);\n \t\t\tv = fold_non_dependent_expr (v);\n \t\t\tif (!INTEGRAL_TYPE_P (TREE_TYPE (v))"}, {"sha": "67ed345af906b9a0e2a64ffff19117115ee7d193", "filename": "gcc/omp-general.c", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -652,6 +652,23 @@ omp_maybe_offloaded (void)\n   return false;\n }\n \n+/* Return a name from PROP, a property in selectors accepting\n+   name lists.  */\n+\n+static const char *\n+omp_context_name_list_prop (tree prop)\n+{\n+  if (TREE_PURPOSE (prop))\n+    return IDENTIFIER_POINTER (TREE_PURPOSE (prop));\n+  else\n+    {\n+      const char *ret = TREE_STRING_POINTER (TREE_VALUE (prop));\n+      if ((size_t) TREE_STRING_LENGTH (TREE_VALUE (prop)) == strlen (ret) + 1)\n+\treturn ret;\n+      return NULL;\n+    }\n+}\n+\n /* Return 1 if context selector matches the current OpenMP context, 0\n    if it does not and -1 if it is unknown and need to be determined later.\n    Some properties can be checked right away during parsing (this routine),\n@@ -701,8 +718,11 @@ omp_context_selector_matches (tree ctx)\n \t      if (set == 'i' && !strcmp (sel, \"vendor\"))\n \t\tfor (tree t3 = TREE_VALUE (t2); t3; t3 = TREE_CHAIN (t3))\n \t\t  {\n-\t\t    const char *prop = IDENTIFIER_POINTER (TREE_PURPOSE (t3));\n-\t\t    if (!strcmp (prop, \" score\") || !strcmp (prop, \"gnu\"))\n+\t\t    const char *prop = omp_context_name_list_prop (t3);\n+\t\t    if (prop == NULL)\n+\t\t      return 0;\n+\t\t    if ((!strcmp (prop, \" score\") && TREE_PURPOSE (t3))\n+\t\t\t|| !strcmp (prop, \"gnu\"))\n \t\t      continue;\n \t\t    return 0;\n \t\t  }\n@@ -750,7 +770,9 @@ omp_context_selector_matches (tree ctx)\n \t      if (set == 'd' && !strcmp (sel, \"arch\"))\n \t\tfor (tree t3 = TREE_VALUE (t2); t3; t3 = TREE_CHAIN (t3))\n \t\t  {\n-\t\t    const char *arch = IDENTIFIER_POINTER (TREE_PURPOSE (t3));\n+\t\t    const char *arch = omp_context_name_list_prop (t3);\n+\t\t    if (arch == NULL)\n+\t\t      return 0;\n \t\t    int r = 0;\n \t\t    if (targetm.omp.device_kind_arch_isa != NULL)\n \t\t      r = targetm.omp.device_kind_arch_isa (omp_device_arch,\n@@ -844,7 +866,9 @@ omp_context_selector_matches (tree ctx)\n \t      if (set == 'd' && !strcmp (sel, \"kind\"))\n \t\tfor (tree t3 = TREE_VALUE (t2); t3; t3 = TREE_CHAIN (t3))\n \t\t  {\n-\t\t    const char *prop = IDENTIFIER_POINTER (TREE_PURPOSE (t3));\n+\t\t    const char *prop = omp_context_name_list_prop (t3);\n+\t\t    if (prop == NULL)\n+\t\t      return 0;\n \t\t    if (!strcmp (prop, \"any\"))\n \t\t      continue;\n \t\t    if (!strcmp (prop, \"host\"))\n@@ -903,7 +927,9 @@ omp_context_selector_matches (tree ctx)\n \t      if (set == 'd' && !strcmp (sel, \"isa\"))\n \t\tfor (tree t3 = TREE_VALUE (t2); t3; t3 = TREE_CHAIN (t3))\n \t\t  {\n-\t\t    const char *isa = IDENTIFIER_POINTER (TREE_PURPOSE (t3));\n+\t\t    const char *isa = omp_context_name_list_prop (t3);\n+\t\t    if (isa == NULL)\n+\t\t      return 0;\n \t\t    int r = 0;\n \t\t    if (targetm.omp.device_kind_arch_isa != NULL)\n \t\t      r = targetm.omp.device_kind_arch_isa (omp_device_isa,\n@@ -1109,6 +1135,28 @@ omp_context_selector_props_compare (const char *set, const char *sel,\n \t      else\n \t\tbreak;\n \t    }\n+\t  else if (TREE_PURPOSE (t1)\n+\t\t   && TREE_PURPOSE (t2) == NULL_TREE\n+\t\t   && TREE_CODE (TREE_VALUE (t2)) == STRING_CST)\n+\t    {\n+\t      const char *p1 = omp_context_name_list_prop (t1);\n+\t      const char *p2 = omp_context_name_list_prop (t2);\n+\t      if (p2\n+\t\t  && strcmp (p1, p2) == 0\n+\t\t  && strcmp (p1, \" score\"))\n+\t\tbreak;\n+\t    }\n+\t  else if (TREE_PURPOSE (t1) == NULL_TREE\n+\t\t   && TREE_PURPOSE (t2)\n+\t\t   && TREE_CODE (TREE_VALUE (t1)) == STRING_CST)\n+\t    {\n+\t      const char *p1 = omp_context_name_list_prop (t1);\n+\t      const char *p2 = omp_context_name_list_prop (t2);\n+\t      if (p1\n+\t\t  && strcmp (p1, p2) == 0\n+\t\t  && strcmp (p1, \" score\"))\n+\t\tbreak;\n+\t    }\n \tif (t2 == NULL_TREE)\n \t  {\n \t    int r = pass ? -1 : 1;"}, {"sha": "2b32bd28f38c0f6bd84a14c2958d9b778b28f737", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -1,3 +1,17 @@\n+2019-11-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/declare-variant-2.c: Adjust expected diagnostics,\n+\tadd a test for atomic_default_mem_order with a string literal.\n+\t* c-c++-common/gomp/declare-variant-3.c: Use string literal props\n+\tin a few random places, add a few string literal prop related tests.\n+\t* c-c++-common/gomp/declare-variant-8.c: Likewise.\n+\t* c-c++-common/gomp/declare-variant-9.c: Use string literal props\n+\tin a few random places.\n+\t* c-c++-common/gomp/declare-variant-10.c: Likewise.\n+\t* c-c++-common/gomp/declare-variant-11.c: Likewise.\n+\t* c-c++-common/gomp/declare-variant-12.c: Likewise.\n+\t* g++.dg/gomp/declare-variant-7.C: Likewise.\n+\n 2019-11-14  Kewen Lin  <linkw@gcc.gnu.org>\n \n \tPR target/92464"}, {"sha": "2b8a39425b13c0b0dba6599e7001435efc81015d", "filename": "gcc/testsuite/c-c++-common/gomp/declare-variant-10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-10.c?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -7,7 +7,7 @@ void f01 (void);\n #pragma omp declare variant (f01) match (device={isa(avx512f,avx512bw)})\n void f02 (void);\n void f03 (void);\n-#pragma omp declare variant (f03) match (device={kind(any),arch(x86_64),isa(avx512f,avx512bw)})\n+#pragma omp declare variant (f03) match (device={kind(\"any\"),arch(x86_64),isa(avx512f,avx512bw)})\n void f04 (void);\n void f05 (void);\n #pragma omp declare variant (f05) match (device={kind(gpu)})\n@@ -19,10 +19,10 @@ void f09 (void);\n #pragma omp declare variant (f09) match (device={isa(sm_35)})\n void f10 (void);\n void f11 (void);\n-#pragma omp declare variant (f11) match (device={arch(nvptx)})\n+#pragma omp declare variant (f11) match (device={arch(\"nvptx\")})\n void f12 (void);\n void f13 (void);\n-#pragma omp declare variant (f13) match (device={arch(i386),isa(sse4)})\n+#pragma omp declare variant (f13) match (device={arch(i386),isa(\"sse4\")})\n void f14 (void);\n void f15 (void);\n #pragma omp declare variant (f15) match (device={isa(sse4,ssse3),arch(i386)})"}, {"sha": "9589948a0f762ff0723f3462f244530db917ead7", "filename": "gcc/testsuite/c-c++-common/gomp/declare-variant-11.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-11.c?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -4,8 +4,8 @@\n \n void f01 (void);\n void f02 (void);\n-#pragma omp declare variant (f01) match (device={isa(avx512f,avx512vl)})\n-#pragma omp declare variant (f02) match (device={isa(avx512bw,avx512vl,avx512f)})\n+#pragma omp declare variant (f01) match (device={isa(avx512f,\"avx512vl\")})\n+#pragma omp declare variant (f02) match (device={isa(avx512bw,avx512vl,\"avx512f\")})\n void f03 (void);\n void f04 (void);\n void f05 (void);\n@@ -14,13 +14,13 @@ void f05 (void);\n void f06 (void);\n void f07 (void);\n void f08 (void);\n-#pragma omp declare variant (f07) match (device={isa(sse4,sse3,avx)})\n-#pragma omp declare variant (f08) match (device={isa(avx,sse3)})\n+#pragma omp declare variant (f07) match (device={isa(sse4,sse3,\"avx\")})\n+#pragma omp declare variant (f08) match (device={isa(\"avx\",sse3)})\n void f09 (void);\n void f10 (void);\n void f11 (void);\n void f12 (void);\n-#pragma omp declare variant (f10) match (device={isa(avx512f)})\n+#pragma omp declare variant (f10) match (device={isa(\"avx512f\")})\n #pragma omp declare variant (f11) match (user={condition(1)},device={isa(avx512f)},implementation={vendor(gnu)})\n #pragma omp declare variant (f12) match (user={condition(2 + 1)},device={isa(avx512f)})\n void f13 (void);"}, {"sha": "3515d9ae44e6acefe220e272d183de5001f89ea0", "filename": "gcc/testsuite/c-c++-common/gomp/declare-variant-12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-12.c?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -6,7 +6,7 @@\n void f01 (void);\n void f02 (void);\n void f03 (void);\n-#pragma omp declare variant (f01) match (device={isa(avx512f,avx512vl)}) /* 16 */\n+#pragma omp declare variant (f01) match (device={isa(\"avx512f\",\"avx512vl\")}) /* 16 */\n #pragma omp declare variant (f02) match (implementation={vendor(score(15):gnu)})\n #pragma omp declare variant (f03) match (user={condition(score(11):1)})\n void f04 (void);\n@@ -22,7 +22,7 @@ void f10 (void);\n void f11 (void);\n void f12 (void);\n #pragma omp declare variant (f09) match (device={arch(x86_64)},user={condition(score(65):1)}) /* 64+65 */\n-#pragma omp declare variant (f10) match (implementation={vendor(score(127):gnu)})\n+#pragma omp declare variant (f10) match (implementation={vendor(score(127):\"gnu\")})\n #pragma omp declare variant (f11) match (device={isa(ssse3)}) /* 128 */\n #pragma omp declare variant (f12) match (implementation={atomic_default_mem_order(score(126):seq_cst)})\n void f13 (void);"}, {"sha": "949a239aa91fd4d308eee96ba354bc364a875a6c", "filename": "gcc/testsuite/c-c++-common/gomp/declare-variant-2.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-2.c?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -69,15 +69,15 @@ void f33 (void);\n void f34 (void);\n #pragma omp declare variant (f1) match(device={kind,isa,arch})\t/* { dg-error \"expected '\\\\(' before ',' token\" } */\n void f35 (void);\n-#pragma omp declare variant (f1) match(device={kind(})\t/* { dg-error \"expected identifier before '\\\\\\}' token\" } */\n+#pragma omp declare variant (f1) match(device={kind(})\t/* { dg-error \"expected identifier or string literal before '\\\\\\}' token\" } */\n void f36 (void);\n #pragma omp declare variant (f1) match(device={kind(unknown)})\t/* { dg-warning \"unknown property 'unknown' of 'kind' selector\" } */\n void f37 (void);\n #pragma omp declare variant (f1) match(device={kind(unknown,foobar)})\t/* { dg-warning \"unknown property 'unknown' of 'kind' selector\" } */\n void f38 (void);\t\t\t\t\t\t\t/* { dg-warning \"unknown property 'foobar' of 'kind' selector\" \"\" { target *-*-* } .-1 } */\n-#pragma omp declare variant (f1) match(device={isa(1)})\t/* { dg-error \"expected identifier before numeric constant\" } */\n+#pragma omp declare variant (f1) match(device={isa(1)})\t/* { dg-error \"expected identifier or string literal before numeric constant\" } */\n void f39 (void);\n-#pragma omp declare variant (f1) match(device={arch(17)})\t/* { dg-error \"expected identifier before numeric constant\" } */\n+#pragma omp declare variant (f1) match(device={arch(17)})\t/* { dg-error \"expected identifier or string literal before numeric constant\" } */\n void f40 (void);\n #pragma omp declare variant (f1) match(device={foobar(3)})\n void f41 (void);\n@@ -89,11 +89,11 @@ void f43 (void);\n void f44 (void);\n #pragma omp declare variant (f1) match(implementation={extension})\t/* { dg-error \"expected '\\\\(' before '\\\\\\}' token\" } */\n void f45 (void);\n-#pragma omp declare variant (f1) match(implementation={vendor()})\t/* { dg-error \"expected identifier before '\\\\)' token\" } */\n+#pragma omp declare variant (f1) match(implementation={vendor()})\t/* { dg-error \"expected identifier or string literal before '\\\\)' token\" } */\n void f45 (void);\n-#pragma omp declare variant (f1) match(implementation={vendor(123-234)})\t/* { dg-error \"expected identifier before numeric constant\" } */\n+#pragma omp declare variant (f1) match(implementation={vendor(123-234)})\t/* { dg-error \"expected identifier or string literal before numeric constant\" } */\n void f46 (void);\n-#pragma omp declare variant (f1) match(implementation={vendor(\"x86_64\")})\t/* { dg-error \"expected identifier before string constant\" } */\n+#pragma omp declare variant (f1) match(implementation={vendor(\"foobar\")})\t/* { dg-warning \"unknown property '.foobar.' of 'vendor' selector\" } */\n void f47 (void);\n #pragma omp declare variant (f1) match(implementation={unified_address(yes)})\t/* { dg-error \"selector 'unified_address' does not accept any properties\" } */\n void f48 (void);\t\t\t\t\t\t\t\t/* { dg-error \"expected '\\\\\\}' before '\\\\(' token\" \"\" { target c } .-1 } */\n@@ -111,7 +111,7 @@ void f53 (void);\n void f54 (void);\n #pragma omp declare variant (f1) match(implementation={atomic_default_mem_order(foobar)})\t/* { dg-error \"incorrect property 'foobar' of 'atomic_default_mem_order' selector\" } */\n void f55 (void);\n-#pragma omp declare variant (f1) match(implementation={atomic_default_mem_order(relaxed,seq_cst)})\t/* { dg-error \"'atomic_default_mem_order' selector must have a single property\" } */\n+#pragma omp declare variant (f1) match(implementation={atomic_default_mem_order(relaxed,seq_cst)})\t/* { dg-error \"expected '\\\\)' before ',' token\" } */\n void f56 (void);\n #pragma omp declare variant (f1) match(implementation={atomic_default_mem_order(relaxed)},implementation={atomic_default_mem_order(relaxed)})\t/* { dg-error \"selector set 'implementation' specified more than once\" } */\n void f57 (void);\n@@ -151,3 +151,5 @@ void f73 (void);\n void f74 (void);\n #pragma omp declare variant (f1),match(construct={parallel})\t/* { dg-error \"expected 'match' before ','\" } */\n void f75 (void);\n+#pragma omp declare variant (f1) match(implementation={atomic_default_mem_order(\"relaxed\")})\t/* { dg-error \"expected identifier before string constant\" } */\n+void f76 (void);"}, {"sha": "e1c37a0b42260041d37899c90dfd18d696ffc375", "filename": "gcc/testsuite/c-c++-common/gomp/declare-variant-3.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-3.c?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -19,41 +19,41 @@ void f12 (void);\n void f13 (void);\n #pragma omp declare variant (f13) match (device={kind(any)})\n void f14 (void);\n-#pragma omp declare variant (f13) match (device={kind(host)})\n+#pragma omp declare variant (f13) match (device={kind(\"host\")})\n void f15 (void);\n #pragma omp declare variant (f13) match (device={kind(nohost)})\n void f16 (void);\n #pragma omp declare variant (f13) match (device={kind(cpu)})\n void f17 (void);\n-#pragma omp declare variant (f13) match (device={kind(gpu)})\n+#pragma omp declare variant (f13) match (device={kind(\"gpu\")})\n void f18 (void);\n #pragma omp declare variant (f13) match (device={kind(fpga)})\n void f19 (void);\n #pragma omp declare variant (f13) match (device={kind(any,any)})\n void f20 (void);\n #pragma omp declare variant (f13) match (device={kind(host,nohost)})\n void f21 (void);\n-#pragma omp declare variant (f13) match (device={kind(cpu,gpu,fpga)})\n+#pragma omp declare variant (f13) match (device={kind(\"cpu\",\"gpu\",\"fpga\")})\n void f22 (void);\n #pragma omp declare variant (f13) match (device={kind(any,cpu,nohost)})\n void f23 (void);\n #pragma omp declare variant (f13) match (device={isa(avx)})\n void f24 (void);\n-#pragma omp declare variant (f13) match (device={isa(sse4,avx512f,avx512vl,avx512bw)})\n+#pragma omp declare variant (f13) match (device={isa(sse4,\"avx512f\",avx512vl,avx512bw)})\n void f25 (void);\n-#pragma omp declare variant (f13) match (device={arch(x86_64)})\n+#pragma omp declare variant (f13) match (device={arch(\"x86_64\")})\n void f26 (void);\n #pragma omp declare variant (f13) match (device={arch(riscv64)})\n void f27 (void);\n #pragma omp declare variant (f13) match (device={arch(nvptx)})\n void f28 (void);\n-#pragma omp declare variant (f13) match (device={arch(x86_64),isa(avx512f,avx512vl),kind(cpu)})\n+#pragma omp declare variant (f13) match (device={arch(x86_64),isa(\"avx512f\",\"avx512vl\"),kind(cpu)})\n void f29 (void);\n #pragma omp declare variant (f13) match (implementation={vendor(amd)})\n void f30 (void);\n #pragma omp declare variant (f13) match (implementation={vendor(arm)})\n void f31 (void);\n-#pragma omp declare variant (f13) match (implementation={vendor(bsc)})\n+#pragma omp declare variant (f13) match (implementation={vendor(\"bsc\")})\n void f32 (void);\n #pragma omp declare variant (f13) match (implementation={vendor(cray)})\n void f33 (void);\n@@ -63,7 +63,7 @@ void f34 (void);\n void f35 (void);\n #pragma omp declare variant (f13) match (implementation={vendor(ibm)})\n void f36 (void);\n-#pragma omp declare variant (f13) match (implementation={vendor(intel)})\n+#pragma omp declare variant (f13) match (implementation={vendor(\"intel\")})\n void f37 (void);\n #pragma omp declare variant (f13) match (implementation={vendor(llvm)})\n void f38 (void);\n@@ -97,7 +97,7 @@ void f51 (void);\n void f52 (void);\n #pragma omp declare variant (f13) match (implementation={vendor(score(3):amd)})\n void f53 (void);\n-#pragma omp declare variant (f13) match (implementation={vendor(score(4):arm)})\n+#pragma omp declare variant (f13) match (implementation={vendor(score(4):\"arm\")})\n void f54 (void);\n #pragma omp declare variant (f13) match (implementation={vendor(score(5):bsc)})\n void f55 (void);\n@@ -115,7 +115,7 @@ void f60 (void);\n void f61 (void);\n #pragma omp declare variant (f13) match (implementation={vendor(score(12):pgi)})\n void f62 (void);\n-#pragma omp declare variant (f13) match (implementation={vendor(score(13):ti)})\n+#pragma omp declare variant (f13) match (implementation={vendor(score(13):\"ti\")})\n void f63 (void);\n #pragma omp declare variant (f13) match (implementation={vendor(score(14):unknown)})\n void f64 (void);\n@@ -139,3 +139,9 @@ void f72 (void);\n void f73 (void);\n #pragma omp declare variant (f13) match (user={condition(score(25):1)})\n void f74 (void);\n+#pragma omp declare variant (f13) match (device={kind(any,\"any\")})\n+void f75 (void);\n+#pragma omp declare variant (f13) match (device={kind(\"any\",\"any\")})\n+void f76 (void);\n+#pragma omp declare variant (f13) match (device={kind(\"any\",any)})\n+void f77 (void);"}, {"sha": "a7a3ba41b97befbb4a1930fea9f4d7b2c9192617", "filename": "gcc/testsuite/c-c++-common/gomp/declare-variant-8.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-8.c?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -12,10 +12,10 @@ void f05 (void);\n void f06 (void);\n #pragma omp requires atomic_default_mem_order(seq_cst)\n void f07 (void);\n-#pragma omp declare variant (f07) match (construct={parallel,for},device={kind(any)})\n+#pragma omp declare variant (f07) match (construct={parallel,for},device={kind(\"any\")})\n void f08 (void);\n void f09 (void);\n-#pragma omp declare variant (f09) match (construct={parallel,for},implementation={vendor(gnu)})\n+#pragma omp declare variant (f09) match (construct={parallel,for},implementation={vendor(\"gnu\")})\n void f10 (void);\n void f11 (void);\n #pragma omp declare variant (f11) match (construct={parallel,for})\n@@ -51,6 +51,12 @@ void f30 (void);\n void f31 (void);\n #pragma omp declare variant (f31) match (construct={teams,parallel,for})\n void f32 (void);\n+void f33 (void);\n+#pragma omp declare variant (f33) match (device={kind(\"any\\0any\")})\t/* { dg-warning \"unknown property '.any.000any.' of 'kind' selector\" } */\n+void f34 (void);\n+void f35 (void);\n+#pragma omp declare variant (f35) match (implementation={vendor(\"gnu\\0\")})\t/* { dg-warning \"unknown property '.gnu.000.' of 'vendor' selector\" } */\n+void f36 (void);\n \n void\n test1 (void)\n@@ -76,6 +82,8 @@ test1 (void)\n   for (i = 0; i < 1; i++)\n     f14 ();\t/* { dg-final { scan-tree-dump-times \"f14 \\\\\\(\\\\\\);\" 1 \"gimple\" } } */\n   f16 ();\t/* { dg-final { scan-tree-dump-times \"f16 \\\\\\(\\\\\\);\" 1 \"gimple\" } } */\n+  f34 ();\t/* { dg-final { scan-tree-dump-times \"f34 \\\\\\(\\\\\\);\" 1 \"gimple\" } } */\n+  f36 ();\t/* { dg-final { scan-tree-dump-times \"f36 \\\\\\(\\\\\\);\" 1 \"gimple\" } } */\n }\n \n #pragma omp declare target"}, {"sha": "5ee75892f2deb3f787b45d3b113b0265a8ef4194", "filename": "gcc/testsuite/c-c++-common/gomp/declare-variant-9.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-9.c?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -4,16 +4,16 @@\n \n #undef i386\n void f01 (void);\n-#pragma omp declare variant (f01) match (device={isa(avx512f,avx512bw)})\n+#pragma omp declare variant (f01) match (device={isa(\"avx512f\",avx512bw)})\n void f02 (void);\n void f03 (void);\n-#pragma omp declare variant (f03) match (device={kind(any),arch(x86_64),isa(avx512f,avx512bw)})\n+#pragma omp declare variant (f03) match (device={kind(any),arch(x86_64),isa(\"avx512f\",\"avx512bw\")})\n void f04 (void);\n void f05 (void);\n #pragma omp declare variant (f05) match (device={kind(gpu)})\n void f06 (void);\n void f07 (void);\n-#pragma omp declare variant (f07) match (device={kind(cpu)})\n+#pragma omp declare variant (f07) match (device={kind(\"cpu\")})\n void f08 (void);\n void f09 (void);\n #pragma omp declare variant (f09) match (device={isa(sm_35)})\n@@ -22,13 +22,13 @@ void f11 (void);\n #pragma omp declare variant (f11) match (device={arch(nvptx)})\n void f12 (void);\n void f13 (void);\n-#pragma omp declare variant (f13) match (device={arch(i386),isa(sse4)})\n+#pragma omp declare variant (f13) match (device={arch(\"i386\"),isa(sse4)})\n void f14 (void);\n void f15 (void);\n #pragma omp declare variant (f15) match (device={isa(sse4,ssse3),arch(i386)})\n void f16 (void);\n void f17 (void);\n-#pragma omp declare variant (f17) match (device={kind(any,fpga)})\n+#pragma omp declare variant (f17) match (device={kind(\"any\",\"fpga\")})\n void f18 (void);\n \n void"}, {"sha": "7dda899578ae8a9a09d62bae883a0a41c9f0662a", "filename": "gcc/testsuite/g++.dg/gomp/declare-variant-7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-variant-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2417b59d4be2e5e882dec5ae3b373f69331d6e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-variant-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-variant-7.C?ref=b2417b59d4be2e5e882dec5ae3b373f69331d6e2", "patch": "@@ -12,7 +12,7 @@ template <int N>\n void f04 ();\n template <int N>\n void f05 ();\n-#pragma omp declare variant (f05<N>) match (user={condition((T)N)},implementation={vendor(gnu)})\n+#pragma omp declare variant (f05<N>) match (user={condition((T)N)},implementation={vendor(\"gnu\")})\n template <int N, typename T>\n void f06 ();\n void f07 ();"}]}