{"sha": "df23e6bbfaa8254963aa5254a851c942f3c8b594", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYyM2U2YmJmYWE4MjU0OTYzYWE1MjU0YTg1MWM5NDJmM2M4YjU5NA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-07-11T21:56:37Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-07-11T21:56:37Z"}, "message": "fold-const.c (fold): Canonicalize X + -C as X - C for floating point additions...\n\n\n\t* fold-const.c (fold) <PLUS_EXPR>: Canonicalize X + -C as X - C for\n\tfloating point additions, to keep real immediate constant positive.\n\t<MINUS_EXPR>:  For floating point subtractions, only transform X - -C\n\tinto X + C, and leave positive real constants as X - C.\n\nFrom-SVN: r84535", "tree": {"sha": "acc595c4c6c4e009a369389090739103f3b7a6c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acc595c4c6c4e009a369389090739103f3b7a6c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df23e6bbfaa8254963aa5254a851c942f3c8b594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df23e6bbfaa8254963aa5254a851c942f3c8b594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df23e6bbfaa8254963aa5254a851c942f3c8b594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df23e6bbfaa8254963aa5254a851c942f3c8b594/comments", "author": null, "committer": null, "parents": [{"sha": "abd1b60de7c2ce3fc9a2d8b56c28df7639e3735a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd1b60de7c2ce3fc9a2d8b56c28df7639e3735a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd1b60de7c2ce3fc9a2d8b56c28df7639e3735a"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "89ff347dceb6b09e59eee2a6e069eb4403949805", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df23e6bbfaa8254963aa5254a851c942f3c8b594/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df23e6bbfaa8254963aa5254a851c942f3c8b594/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df23e6bbfaa8254963aa5254a851c942f3c8b594", "patch": "@@ -1,3 +1,10 @@\n+2004-07-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold) <PLUS_EXPR>: Canonicalize X + -C as X - C for\n+\tfloating point additions, to keep real immediate constant positive.\n+\t<MINUS_EXPR>:  For floating point subtractions, only transform X - -C\n+\tinto X + C, and leave positive real constants as X - C.\n+\n 2004-07-11  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.c (hppa_gimplify_va_arg_expr): Remove comment."}, {"sha": "bc1e8773c97d154e6de7500d792d774323436140", "filename": "gcc/fold-const.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df23e6bbfaa8254963aa5254a851c942f3c8b594/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df23e6bbfaa8254963aa5254a851c942f3c8b594/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=df23e6bbfaa8254963aa5254a851c942f3c8b594", "patch": "@@ -6589,6 +6589,17 @@ fold (tree expr)\n \t  if (fold_real_zero_addition_p (TREE_TYPE (arg1), arg0, 0))\n \t    return non_lvalue (fold_convert (type, arg1));\n \n+\t  /* Convert X + -C into X - C.  */\n+\t  if (TREE_CODE (arg1) == REAL_CST\n+\t      && REAL_VALUE_NEGATIVE (TREE_REAL_CST (arg1)))\n+\t    {\n+\t      tem = fold_negate_const (arg1, type);\n+\t      if (!TREE_OVERFLOW (arg1) || !flag_trapping_math)\n+\t\treturn fold (build2 (MINUS_EXPR, type,\n+\t\t\t\t     fold_convert (type, arg0),\n+\t\t\t\t     fold_convert (type, tem)));\n+\t    }\n+\n \t  /* Convert x+x into x*2.0.  */\n \t  if (operand_equal_p (arg0, arg1, 0)\n \t      && SCALAR_FLOAT_TYPE_P (type))\n@@ -6921,7 +6932,10 @@ fold (tree expr)\n \n       /* A - B -> A + (-B) if B is easily negatable.  */\n       if (!wins && negate_expr_p (arg1)\n-\t  && (FLOAT_TYPE_P (type)\n+\t  && ((FLOAT_TYPE_P (type)\n+               /* Avoid this transformation if B is a positive REAL_CST.  */\n+\t       && (TREE_CODE (arg1) != REAL_CST\n+\t\t   ||  REAL_VALUE_NEGATIVE (TREE_REAL_CST (arg1))))\n \t      || (INTEGRAL_TYPE_P (type) && flag_wrapv && !flag_trapv)))\n \treturn fold (build2 (PLUS_EXPR, type, arg0, negate_expr (arg1)));\n "}]}