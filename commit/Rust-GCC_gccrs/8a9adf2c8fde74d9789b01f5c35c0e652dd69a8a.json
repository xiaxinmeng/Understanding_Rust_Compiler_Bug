{"sha": "8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE5YWRmMmM4ZmRlNzRkOTc4OWIwMWY1YzM1YzBlNjUyZGQ2OWE4YQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-01-22T17:30:22Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-01-22T17:30:22Z"}, "message": "re PR fortran/38536 (ICE with C_LOC in resolve.c due to not properly going through expr->ref)\n\n2011-01-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/38536\n\t* resolve.c (gfc_iso_c_func_interface):  For C_LOC,\n\tcheck for array sections followed by component references\n\twhich are illegal.  Also check for coindexed arguments.\n\n2011-01-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/38536\n\t* gfortran.dg/c_loc_tests_16.f90:  New test.\n\nFrom-SVN: r169130", "tree": {"sha": "5edf68a225dc4d911ae38f40808a27923b4b6706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5edf68a225dc4d911ae38f40808a27923b4b6706"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a/comments", "author": null, "committer": null, "parents": [{"sha": "9a7c205049669b3d1cbf597c416541a89cfe2289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7c205049669b3d1cbf597c416541a89cfe2289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7c205049669b3d1cbf597c416541a89cfe2289"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "e918ef5b9294ee7092f839d29fdbbe21dec5c3c0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a", "patch": "@@ -1,3 +1,10 @@\n+2011-01-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/38536\n+\t* resolve.c (gfc_iso_c_func_interface):  For C_LOC,\n+\tcheck for array sections followed by component references\n+\twhich are illegal.  Also check for coindexed arguments.\n+\n 2011-01-22  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/47399"}, {"sha": "9f0d675da9b7f15188ce39e33ef503264dd830ac", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a", "patch": "@@ -2699,6 +2699,9 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n         }\n       else if (sym->intmod_sym_id == ISOCBINDING_LOC)\n         {\n+\t  gfc_ref *ref;\n+\t  bool seen_section;\n+\n           /* Make sure we have either the target or pointer attribute.  */\n \t  if (!arg_attr.target && !arg_attr.pointer)\n             {\n@@ -2709,6 +2712,45 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n               retval = FAILURE;\n             }\n \n+\t  if (gfc_is_coindexed (args->expr))\n+\t    {\n+\t      gfc_error_now (\"Coindexed argument not permitted\"\n+\t\t\t     \" in '%s' call at %L\", name,\n+\t\t\t     &(args->expr->where));\n+\t      retval = FAILURE;\n+\t    }\n+\n+\t  /* Follow references to make sure there are no array\n+\t     sections.  */\n+\t  seen_section = false;\n+\n+\t  for (ref=args->expr->ref; ref; ref = ref->next)\n+\t    {\n+\t      if (ref->type == REF_ARRAY)\n+\t\t{\n+\t\t  if (ref->u.ar.type == AR_SECTION)\n+\t\t    seen_section = true;\n+\n+\t\t  if (ref->u.ar.type != AR_ELEMENT)\n+\t\t    {\n+\t\t      gfc_ref *r;\n+\t\t      for (r = ref->next; r; r=r->next)\n+\t\t\tif (r->type == REF_COMPONENT)\n+\t\t\t  {\n+\t\t\t    gfc_error_now (\"Array section not permitted\"\n+\t\t\t\t\t   \" in '%s' call at %L\", name,\n+\t\t\t\t\t   &(args->expr->where));\n+\t\t\t    retval = FAILURE;\n+\t\t\t    break;\n+\t\t\t  }\n+\t\t    }\n+\t\t}\n+\t    }\n+\n+\t  if (seen_section && retval == SUCCESS)\n+\t    gfc_warning (\"Array section in '%s' call at %L\", name,\n+\t\t\t &(args->expr->where));\n+\t\t\t \n           /* See if we have interoperable type and type param.  */\n           if (verify_c_interop (arg_ts) == SUCCESS\n               || gfc_check_any_c_kind (arg_ts) == SUCCESS)"}, {"sha": "ce423e12d6e1a05642a80f2c1e465fef72cda940", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a", "patch": "@@ -1,3 +1,8 @@\n+2011-01-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/38536\n+\t* gfortran.dg/c_loc_tests_16.f90:  New test.\n+\n 2011-01-22  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/47399\n@@ -7,7 +12,7 @@\n \n \tPR tree-optimization/47053\n \t* g++.dg/pr47053.C: New test.\n-\t\n+\n 2011-01-21  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/47041"}, {"sha": "1c86a1f9c40253dedb6d912cac49a9d5b63b3be1", "filename": "gcc/testsuite/gfortran.dg/c_loc_tests_16.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_16.f90?ref=8a9adf2c8fde74d9789b01f5c35c0e652dd69a8a", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+! PR 38536 - array sections as arguments to c_loc are illegal.\n+  use iso_c_binding\n+  type, bind(c) :: t1\n+     integer(c_int) :: i(5)\n+  end type t1\n+  type, bind(c):: t2\n+     type(t1) :: t(5)\n+  end type t2\n+  type, bind(c) :: t3\n+     type(t1) :: t(5,5)\n+  end type t3\n+\n+  type(t2), target :: tt\n+  type(t3), target :: ttt\n+  integer(c_int), target :: n(3)\n+  integer(c_int), target :: x[*]\n+  type(C_PTR) :: p\n+\n+  p = c_loc(tt%t%i(1))  ! { dg-error \"Array section not permitted\" }\n+  p = c_loc(n(1:2))  ! { dg-warning \"Array section\" }\n+  p = c_loc(ttt%t(5,1:2)%i(1)) ! { dg-error \"Array section not permitted\" }\n+  p = c_loc(x[1]) ! { dg-error \"Coindexed argument not permitted\" }\n+  end"}]}