{"sha": "74dc179a6da33cd00f6d4a93fbb97dc84f610126", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRkYzE3OWE2ZGEzM2NkMDBmNmQ0YTkzZmJiOTdkYzg0ZjYxMDEyNg==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2020-05-08T20:51:40Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2020-05-08T20:51:40Z"}, "message": "Improve hard reg preference propapagation.\n\n2020-05-08  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* ira-color.c (update_costs_from_allocno): Remove\n\tconflict_cost_update_p argument.  Propagate costs only along\n\tthreads. Always do conflict cost update.  Add printing debugging\n\tinfo.\n\t(update_costs_from_copies): Add printing debugging info.\n\t(restore_costs_from_copies): Ditto.\n\t(assign_hard_reg): Improve debug info.\n\t(push_only_colorable): Ditto. Call update_costs_from_prefs.\n\t(color_allocnos): Remove update_costs_from_prefs.\n\n2020-05-08  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* gcc.target/i386/pr92807-1.c: Improve the regex.", "tree": {"sha": "104d982ac4ecc777e85c7ed29ae73bacd923ce70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/104d982ac4ecc777e85c7ed29ae73bacd923ce70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74dc179a6da33cd00f6d4a93fbb97dc84f610126", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74dc179a6da33cd00f6d4a93fbb97dc84f610126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74dc179a6da33cd00f6d4a93fbb97dc84f610126", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74dc179a6da33cd00f6d4a93fbb97dc84f610126/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "234681eadf2c51d7b78270188d64601b7267330d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234681eadf2c51d7b78270188d64601b7267330d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/234681eadf2c51d7b78270188d64601b7267330d"}], "stats": {"total": 81, "additions": 58, "deletions": 23}, "files": [{"sha": "75cc642b5a04372feb9616db6c4450d692cf170c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74dc179a6da33cd00f6d4a93fbb97dc84f610126/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74dc179a6da33cd00f6d4a93fbb97dc84f610126/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74dc179a6da33cd00f6d4a93fbb97dc84f610126", "patch": "@@ -1,3 +1,15 @@\n+2020-05-08  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* ira-color.c (update_costs_from_allocno): Remove\n+\tconflict_cost_update_p argument.  Propagate costs only along\n+\tthreads. Always do conflict cost update.  Add printing debugging\n+\tinfo.\n+\t(update_costs_from_copies): Add printing debugging info.\n+\t(restore_costs_from_copies): Ditto.\n+\t(assign_hard_reg): Improve debug info.\n+\t(push_only_colorable): Ditto. Call update_costs_from_prefs.\n+\t(color_allocnos): Remove update_costs_from_prefs.\n+\n 2020-05-08  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (vec_info::slp_loads): New."}, {"sha": "dbb3b7a2a519bf1d9ae7630d93c127708bf7129c", "filename": "gcc/ira-color.c", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74dc179a6da33cd00f6d4a93fbb97dc84f610126/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74dc179a6da33cd00f6d4a93fbb97dc84f610126/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=74dc179a6da33cd00f6d4a93fbb97dc84f610126", "patch": "@@ -1356,13 +1356,11 @@ allocnos_conflict_p (ira_allocno_t a1, ira_allocno_t a2)\n \n /* Update (decrease if DECR_P) HARD_REGNO cost of allocnos connected\n    by copies to ALLOCNO to increase chances to remove some copies as\n-   the result of subsequent assignment.  Update conflict costs only\n-   for true CONFLICT_COST_UPDATE_P.  Record cost updates if RECORD_P is\n-   true.  */\n+   the result of subsequent assignment.  Update conflict costs.\n+   Record cost updates if RECORD_P is true.  */\n static void\n update_costs_from_allocno (ira_allocno_t allocno, int hard_regno,\n-\t\t\t   int divisor, bool decr_p, bool record_p,\n-\t\t\t   bool conflict_cost_update_p)\n+\t\t\t   int divisor, bool decr_p, bool record_p)\n {\n   int cost, update_cost, update_conflict_cost;\n   machine_mode mode;\n@@ -1391,7 +1389,9 @@ update_costs_from_allocno (ira_allocno_t allocno, int hard_regno,\n \t    gcc_unreachable ();\n \n \t  if (another_allocno == from\n-\t      || allocnos_conflict_p (another_allocno, start))\n+\t      || (ALLOCNO_COLOR_DATA (another_allocno) != NULL\n+\t\t  && (ALLOCNO_COLOR_DATA (allocno)->first_thread_allocno\n+\t\t      != ALLOCNO_COLOR_DATA (another_allocno)->first_thread_allocno)))\n \t    continue;\n \n \t  aclass = ALLOCNO_CLASS (another_allocno);\n@@ -1417,15 +1417,13 @@ update_costs_from_allocno (ira_allocno_t allocno, int hard_regno,\n \t    cost = -cost;\n \n \t  update_cost = cp->freq * cost / divisor;\n-\t  update_conflict_cost = conflict_cost_update_p ? update_cost : 0;\n-\n-\t  if (ALLOCNO_COLOR_DATA (another_allocno) != NULL\n-\t      && (ALLOCNO_COLOR_DATA (allocno)->first_thread_allocno\n-\t\t  != ALLOCNO_COLOR_DATA (another_allocno)->first_thread_allocno))\n-\t    /* Decrease conflict cost of ANOTHER_ALLOCNO if it is not\n-\t       in the same allocation thread.  */\n-\t    update_conflict_cost /= COST_HOP_DIVISOR;\n+\t  update_conflict_cost = update_cost;\n \n+\t  if (internal_flag_ira_verbose > 5 && ira_dump_file != NULL)\n+\t    fprintf (ira_dump_file,\n+\t\t     \"          a%dr%d (hr%d): update cost by %d, conflict cost by %d\\n\",\n+\t\t     ALLOCNO_NUM (another_allocno), ALLOCNO_REGNO (another_allocno),\n+\t\t     hard_regno, update_cost, update_conflict_cost);\n \t  if (update_cost == 0)\n \t    continue;\n \n@@ -1453,8 +1451,13 @@ update_costs_from_prefs (ira_allocno_t allocno)\n \n   start_update_cost ();\n   for (pref = ALLOCNO_PREFS (allocno); pref != NULL; pref = pref->next_pref)\n-    update_costs_from_allocno (allocno, pref->hard_regno,\n-\t\t\t       COST_HOP_DIVISOR, true, true, false);\n+    {\n+      if (internal_flag_ira_verbose > 5 && ira_dump_file != NULL)\n+\tfprintf (ira_dump_file, \"        Start updating from pref of hr%d for a%dr%d:\\n\",\n+\t\t pref->hard_regno, ALLOCNO_NUM (allocno), ALLOCNO_REGNO (allocno));\n+      update_costs_from_allocno (allocno, pref->hard_regno,\n+\t\t\t\t COST_HOP_DIVISOR, true, true);\n+    }\n }\n \n /* Update (decrease if DECR_P) the cost of allocnos connected to\n@@ -1469,7 +1472,10 @@ update_costs_from_copies (ira_allocno_t allocno, bool decr_p, bool record_p)\n   hard_regno = ALLOCNO_HARD_REGNO (allocno);\n   ira_assert (hard_regno >= 0 && ALLOCNO_CLASS (allocno) != NO_REGS);\n   start_update_cost ();\n-  update_costs_from_allocno (allocno, hard_regno, 1, decr_p, record_p, true);\n+  if (internal_flag_ira_verbose > 5 && ira_dump_file != NULL)\n+    fprintf (ira_dump_file, \"        Start updating from a%dr%d by copies:\\n\",\n+\t     ALLOCNO_NUM (allocno), ALLOCNO_REGNO (allocno));\n+  update_costs_from_allocno (allocno, hard_regno, 1, decr_p, record_p);\n }\n \n /* Update conflict_allocno_hard_prefs of allocnos conflicting with\n@@ -1517,9 +1523,12 @@ restore_costs_from_copies (ira_allocno_t allocno)\n     return;\n   records = ALLOCNO_COLOR_DATA (allocno)->update_cost_records;\n   start_update_cost ();\n+  if (internal_flag_ira_verbose > 5 && ira_dump_file != NULL)\n+    fprintf (ira_dump_file, \"        Start restoring from a%dr%d:\\n\",\n+\t     ALLOCNO_NUM (allocno), ALLOCNO_REGNO (allocno));\n   for (curr = records; curr != NULL; curr = curr->next)\n     update_costs_from_allocno (allocno, curr->hard_regno,\n-\t\t\t       curr->divisor, true, false, true);\n+\t\t\t       curr->divisor, true, false);\n   free_update_cost_record_list (records);\n   ALLOCNO_COLOR_DATA (allocno)->update_cost_records = NULL;\n }\n@@ -1934,6 +1943,8 @@ assign_hard_reg (ira_allocno_t a, bool retry_p)\n       if (internal_flag_ira_verbose > 5 && ira_dump_file != NULL)\n \tfprintf (ira_dump_file, \"(%d=%d,%d) \", hard_regno, cost, full_cost);\n     }\n+  if (internal_flag_ira_verbose > 5 && ira_dump_file != NULL)\n+    fprintf (ira_dump_file, \"\\n\");\n   if (min_full_cost > mem_cost\n       /* Do not spill static chain pointer pseudo when non-local goto\n \t is used.  */\n@@ -2112,15 +2123,15 @@ form_threads_from_copies (int cp_num)\n \t      if (internal_flag_ira_verbose > 3 && ira_dump_file != NULL)\n \t\tfprintf\n \t\t  (ira_dump_file,\n-\t\t   \"      Forming thread by copy %d:a%dr%d-a%dr%d (freq=%d):\\n\",\n+\t\t   \"        Forming thread by copy %d:a%dr%d-a%dr%d (freq=%d):\\n\",\n \t\t   cp->num, ALLOCNO_NUM (cp->first), ALLOCNO_REGNO (cp->first),\n \t\t   ALLOCNO_NUM (cp->second), ALLOCNO_REGNO (cp->second),\n \t\t   cp->freq);\n \t      merge_threads (thread1, thread2);\n \t      if (internal_flag_ira_verbose > 3 && ira_dump_file != NULL)\n \t\t{\n \t\t  thread1 = ALLOCNO_COLOR_DATA (thread1)->first_thread_allocno;\n-\t\t  fprintf (ira_dump_file, \"        Result (freq=%d): a%dr%d(%d)\",\n+\t\t  fprintf (ira_dump_file, \"          Result (freq=%d): a%dr%d(%d)\",\n \t\t\t   ALLOCNO_COLOR_DATA (thread1)->thread_freq,\n \t\t\t   ALLOCNO_NUM (thread1), ALLOCNO_REGNO (thread1),\n \t\t\t   ALLOCNO_FREQ (thread1));\n@@ -2184,6 +2195,9 @@ form_threads_from_colorable_allocno (ira_allocno_t a)\n   ira_copy_t cp, next_cp;\n   int cp_num = 0;\n \n+  if (internal_flag_ira_verbose > 3 && ira_dump_file != NULL)\n+    fprintf (ira_dump_file, \"      Forming thread from allocno a%dr%d:\\n\",\n+\t     ALLOCNO_NUM (a), ALLOCNO_REGNO (a));\n   for (cp = ALLOCNO_COPIES (a); cp != NULL; cp = next_cp)\n     {\n       if (cp->first == a)\n@@ -2505,7 +2519,13 @@ remove_allocno_from_bucket_and_push (ira_allocno_t allocno, bool colorable_p)\n static void\n push_only_colorable (void)\n {\n+  if (internal_flag_ira_verbose > 3 && ira_dump_file != NULL)\n+    fprintf (ira_dump_file, \"      Forming thread from colorable bucket:\\n\");\n   form_threads_from_bucket (colorable_allocno_bucket);\n+  for (ira_allocno_t a = colorable_allocno_bucket;\n+       a != NULL;\n+       a = ALLOCNO_COLOR_DATA (a)->next_bucket_allocno)\n+    update_costs_from_prefs (a);\n   sort_bucket (&colorable_allocno_bucket, bucket_allocno_compare_func);\n   for (;colorable_allocno_bucket != NULL;)\n     remove_allocno_from_bucket_and_push (colorable_allocno_bucket, true);\n@@ -2687,7 +2707,7 @@ pop_allocnos_from_stack (void)\n       else if (assign_hard_reg (allocno, false))\n \t{\n \t  if (internal_flag_ira_verbose > 3 && ira_dump_file != NULL)\n-\t    fprintf (ira_dump_file, \"assign reg %d\\n\",\n+\t    fprintf (ira_dump_file, \"        assign reg %d\\n\",\n \t\t     ALLOCNO_HARD_REGNO (allocno));\n \t}\n       else if (ALLOCNO_ASSIGNED_P (allocno))\n@@ -3202,7 +3222,6 @@ color_allocnos (void)\n \t  if (ALLOCNO_CLASS (a) != NO_REGS && ! empty_profitable_hard_regs (a))\n \t    {\n \t      ALLOCNO_COLOR_DATA (a)->in_graph_p = true;\n-\t      update_costs_from_prefs (a);\n \t      update_conflict_allocno_hard_prefs (a);\n \t    }\n \t  else"}, {"sha": "52919b9fbc81deca3b33087701f0fd94da4ac532", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74dc179a6da33cd00f6d4a93fbb97dc84f610126/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74dc179a6da33cd00f6d4a93fbb97dc84f610126/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74dc179a6da33cd00f6d4a93fbb97dc84f610126", "patch": "@@ -1,3 +1,7 @@\n+2020-05-08  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* gcc.target/i386/pr92807-1.c: Improve the regex.\n+\n 2020-05-08  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/95003"}, {"sha": "02a0654dd5ed4f9cc7f8fd9cf90328090e7062f8", "filename": "gcc/testsuite/gcc.target/i386/pr92807-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74dc179a6da33cd00f6d4a93fbb97dc84f610126/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92807-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74dc179a6da33cd00f6d4a93fbb97dc84f610126/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92807-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92807-1.c?ref=74dc179a6da33cd00f6d4a93fbb97dc84f610126", "patch": "@@ -8,4 +8,4 @@ abs2 (unsigned int a)\n   return (a+s)^s;\n }\n \n-/* { dg-final { scan-assembler-not \"leal\" } } */\n+/* { dg-final { scan-assembler-not \"leal\\[\\t \\]*\\[^(\\]*\\\\((.*),\\\\1\\\\)\" } } */"}]}