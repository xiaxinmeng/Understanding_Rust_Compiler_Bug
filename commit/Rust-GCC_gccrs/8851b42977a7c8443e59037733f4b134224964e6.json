{"sha": "8851b42977a7c8443e59037733f4b134224964e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg1MWI0Mjk3N2E3Yzg0NDNlNTkwMzc3MzNmNGIxMzQyMjQ5NjRlNg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-11-10T17:15:33Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-11-10T17:15:33Z"}, "message": "libitm port to Tru64 UNIX\n\n\t* config/alpha/sjlj.S (_ITM_beginTransaction) [!__ELF__]: Don't use\n\t.hidden.\n\t(.note.GNU-stack): Only use if __linux__.\n\t* alloc_cpp.cc [!__osf__] (_ZnaXRKSt9nothrow_t): Dummy function.\n\t* testsuite/libitm.c/notx.c: Use dg-options \"-pthread\".\n\t* testsuite/libitm.c/reentrant.c: Likewise.\n\t* testsuite/libitm.c/simple-2.c: Likewise.\n\t* testsuite/libitm.c/txrelease.c: Likewise.\n\t* testsuite/libitm.c++/static_ctor.C: Likewise.\n\nFrom-SVN: r181262", "tree": {"sha": "6ddb9d0712828bdab643952423e5c1d07f00faa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ddb9d0712828bdab643952423e5c1d07f00faa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8851b42977a7c8443e59037733f4b134224964e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8851b42977a7c8443e59037733f4b134224964e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8851b42977a7c8443e59037733f4b134224964e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8851b42977a7c8443e59037733f4b134224964e6/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4b179020b094a0106a96c288e545be220d4a742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b179020b094a0106a96c288e545be220d4a742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b179020b094a0106a96c288e545be220d4a742"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "46c984e8c75458ba60c10b0abdf0a1c8a895f9c0", "filename": "libitm/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8851b42977a7c8443e59037733f4b134224964e6/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8851b42977a7c8443e59037733f4b134224964e6/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=8851b42977a7c8443e59037733f4b134224964e6", "patch": "@@ -1,3 +1,15 @@\n+2011-11-10  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/alpha/sjlj.S (_ITM_beginTransaction) [!__ELF__]: Don't use\n+\t.hidden.\n+\t(.note.GNU-stack): Only use if __linux__.\n+\t* alloc_cpp.cc [!__osf__] (_ZnaXRKSt9nothrow_t): Dummy function.\n+\t* testsuite/libitm.c/notx.c: Use dg-options \"-pthread\".\n+\t* testsuite/libitm.c/reentrant.c: Likewise.\n+\t* testsuite/libitm.c/simple-2.c: Likewise.\n+\t* testsuite/libitm.c/txrelease.c: Likewise.\n+\t* testsuite/libitm.c++/static_ctor.C: Likewise.\n+\n 2011-11-10  Richard Henderson  <rth@redhat.com>\n \n \t* config/x86/x86_avx.cc: Remove #undef __AVX__ hack.  Tidy comments."}, {"sha": "4e535513cd54ea2955dbefa5052e3dd97b1adfc9", "filename": "libitm/alloc_cpp.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Falloc_cpp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Falloc_cpp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Falloc_cpp.cc?ref=8851b42977a7c8443e59037733f4b134224964e6", "patch": "@@ -60,6 +60,14 @@ extern void _ZdlPvRKSt9nothrow_t (void *, c_nothrow_p) __attribute__((weak));\n extern void *_ZnaXRKSt9nothrow_t (size_t, c_nothrow_p) __attribute__((weak));\n extern void _ZdaPvRKSt9nothrow_t (void *, c_nothrow_p) __attribute__((weak));\n \n+#ifdef __osf__ /* Really: !HAVE_WEAKDEF  */\n+void *\n+_ZnaXRKSt9nothrow_t (size_t, c_nothrow_p)\n+{\n+  return NULL;\n+}\n+#endif /* __osf__ */\n+\n /* Wrap the delete nothrow symbols for usage with a single argument.\n    Perhaps should have a configure type check for this, because the\n    std::nothrow_t reference argument is unused (empty class), and most"}, {"sha": "3aa5f06e33242d221fc04e52da168b3c78fe8e90", "filename": "libitm/config/alpha/sjlj.S", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Fconfig%2Falpha%2Fsjlj.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Fconfig%2Falpha%2Fsjlj.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Falpha%2Fsjlj.S?ref=8851b42977a7c8443e59037733f4b134224964e6", "patch": "@@ -74,7 +74,9 @@ _ITM_beginTransaction:\n \n \t.align 4\n \t.globl\tGTM_longjmp\n+#ifdef __ELF__\n \t.hidden\tGTM_longjmp\n+#endif\n \t.ent\tGTM_longjmp\n \n GTM_longjmp:\n@@ -105,4 +107,6 @@ GTM_longjmp:\n \tret\n .end GTM_longjmp\n \n+#ifdef __linux__\n .section .note.GNU-stack, \"\", @progbits\n+#endif"}, {"sha": "18f95fc01e58beeaef6bdfc1b1696cac306318d8", "filename": "libitm/testsuite/libitm.c++/static_ctor.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Ftestsuite%2Flibitm.c%2B%2B%2Fstatic_ctor.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Ftestsuite%2Flibitm.c%2B%2B%2Fstatic_ctor.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Ftestsuite%2Flibitm.c%2B%2B%2Fstatic_ctor.C?ref=8851b42977a7c8443e59037733f4b134224964e6", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do run } */\n+/* { dg-options \"-pthread\" } */\n /* { dg-xfail-if \"\" { *-*-* } { \"*\" } { \"\" } } */\n /* Tests static constructors inside of transactional code.  */\n "}, {"sha": "7ca6580452bef5e9a5c110942e3a3915aec34591", "filename": "libitm/testsuite/libitm.c/notx.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Ftestsuite%2Flibitm.c%2Fnotx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Ftestsuite%2Flibitm.c%2Fnotx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Ftestsuite%2Flibitm.c%2Fnotx.c?ref=8851b42977a7c8443e59037733f4b134224964e6", "patch": "@@ -1,5 +1,8 @@\n /* These tests all check whether initialization happens properly even if no\n    transaction has been used in the current thread yet.  */\n+\n+/* { dg-options \"-pthread\" } */\n+\n #include <stdlib.h>\n #include <pthread.h>\n #include <libitm.h>"}, {"sha": "451530a55ab7ab4fbd85b4ce19007d7742375496", "filename": "libitm/testsuite/libitm.c/reentrant.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Ftestsuite%2Flibitm.c%2Freentrant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Ftestsuite%2Flibitm.c%2Freentrant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Ftestsuite%2Flibitm.c%2Freentrant.c?ref=8851b42977a7c8443e59037733f4b134224964e6", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do run { xfail *-*-* } }\n+/* { dg-options \"-pthread\" } */\n \n /* Tests that new transactions can be started from both transaction_pure and\n    transaction_unsafe code. This also requires proper handling of reentrant"}, {"sha": "c77d75dcf5160fc7964b8759bfe0060437c77f03", "filename": "libitm/testsuite/libitm.c/simple-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Ftestsuite%2Flibitm.c%2Fsimple-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Ftestsuite%2Flibitm.c%2Fsimple-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Ftestsuite%2Flibitm.c%2Fsimple-2.c?ref=8851b42977a7c8443e59037733f4b134224964e6", "patch": "@@ -1,5 +1,7 @@\n /* Simplest test involving real threads.  Verify we get the correct answer.  */\n \n+/* { dg-options \"-pthread\" } */\n+\n #include <stdlib.h>\n #include <pthread.h>\n "}, {"sha": "37d6b2c9d009fc500112d35e9c49433276739b5f", "filename": "libitm/testsuite/libitm.c/txrelease.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Ftestsuite%2Flibitm.c%2Ftxrelease.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8851b42977a7c8443e59037733f4b134224964e6/libitm%2Ftestsuite%2Flibitm.c%2Ftxrelease.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Ftestsuite%2Flibitm.c%2Ftxrelease.c?ref=8851b42977a7c8443e59037733f4b134224964e6", "patch": "@@ -2,6 +2,8 @@\n    transaction data when a thread exists, potentially repeatedly. However,\n    we currently cannot check whether the data has indeed been released.  */\n \n+/* { dg-options \"-pthread\" } */\n+\n #include <stddef.h>\n #include <stdlib.h>\n #include <pthread.h>"}]}