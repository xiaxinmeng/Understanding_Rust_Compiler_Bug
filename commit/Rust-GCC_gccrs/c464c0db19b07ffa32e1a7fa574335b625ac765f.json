{"sha": "c464c0db19b07ffa32e1a7fa574335b625ac765f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ2NGMwZGIxOWIwN2ZmYTMyZTFhN2ZhNTc0MzM1YjYyNWFjNzY1Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-02-19T19:13:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-02-19T19:13:20Z"}, "message": "Tweak comment further.\n\nFrom-SVN: r233567", "tree": {"sha": "371dba265f05b0605cae41f3cec56ee0448db581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/371dba265f05b0605cae41f3cec56ee0448db581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c464c0db19b07ffa32e1a7fa574335b625ac765f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c464c0db19b07ffa32e1a7fa574335b625ac765f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c464c0db19b07ffa32e1a7fa574335b625ac765f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c464c0db19b07ffa32e1a7fa574335b625ac765f/comments", "author": null, "committer": null, "parents": [{"sha": "4b6c824a58ae964920b37e5014793a55b32bc8ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6c824a58ae964920b37e5014793a55b32bc8ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6c824a58ae964920b37e5014793a55b32bc8ce"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "1b89a63201739392633b74b877b61f18405f4291", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c464c0db19b07ffa32e1a7fa574335b625ac765f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c464c0db19b07ffa32e1a7fa574335b625ac765f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c464c0db19b07ffa32e1a7fa574335b625ac765f", "patch": "@@ -6649,7 +6649,9 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \t     includes some extra padding.  store_expr / expand_expr will in\n \t     that case call get_inner_reference that will have the bitsize\n \t     we check here and thus the block move will not clobber the\n-\t     padding that shouldn't be clobbered.  */\n+\t     padding that shouldn't be clobbered.  In the future we could\n+\t     replace the TREE_ADDRESSABLE check with a check that\n+\t     get_base_address needs to live in memory.  */\n \t  && (!TREE_ADDRESSABLE (TREE_TYPE (exp))\n \t      || TREE_CODE (exp) != COMPONENT_REF\n \t      || TREE_CODE (DECL_SIZE (TREE_OPERAND (exp, 1))) != INTEGER_CST"}]}