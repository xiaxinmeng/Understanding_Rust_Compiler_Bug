{"sha": "abea993f795f6b843d0a9ea036a93cb5d6f90bc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJlYTk5M2Y3OTVmNmI4NDNkMGE5ZWEwMzZhOTNjYjVkNmY5MGJjMQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2007-06-07T18:42:47Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2007-06-07T18:42:47Z"}, "message": "configure.ac: Non-default multilibs can be cross compilations.\n\n\t* configure.ac: Non-default multilibs can be cross compilations.\n\t* configure: Regenerate\n\nFrom-SVN: r125536", "tree": {"sha": "5b0383097fe497483a68e33b3046cb9348660a13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b0383097fe497483a68e33b3046cb9348660a13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abea993f795f6b843d0a9ea036a93cb5d6f90bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abea993f795f6b843d0a9ea036a93cb5d6f90bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abea993f795f6b843d0a9ea036a93cb5d6f90bc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abea993f795f6b843d0a9ea036a93cb5d6f90bc1/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edc5bbcd8f2becdd035195f0a4e6e0e880b3d28d"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "233b175d5c7baede05b68294f287b54d6d69cb0e", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abea993f795f6b843d0a9ea036a93cb5d6f90bc1/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abea993f795f6b843d0a9ea036a93cb5d6f90bc1/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=abea993f795f6b843d0a9ea036a93cb5d6f90bc1", "patch": "@@ -1,3 +1,8 @@\n+2007-06-07  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* configure.ac: Non-default multilibs can be cross compilations.\n+\t* configure: Regenerate\n+\n 2007-05-07  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* argv.c (writeargv): New function."}, {"sha": "c745d8ba34eca09fd617b825455eaa999bfc85bf", "filename": "libiberty/configure", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abea993f795f6b843d0a9ea036a93cb5d6f90bc1/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abea993f795f6b843d0a9ea036a93cb5d6f90bc1/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=abea993f795f6b843d0a9ea036a93cb5d6f90bc1", "patch": "@@ -847,6 +847,7 @@ Optional Features:\n   --enable-maintainer-mode\n                           enable make rules and dependencies not useful\n                           (and sometimes confusing) to the casual installer\n+  --enable-multilib       build many library versions (default)\n   --enable-install-libiberty       Install headers for end users\n \n Optional Packages:\n@@ -1727,6 +1728,29 @@ else\n fi\n \n \n+# Add --enable-multilib to configure.\n+# Default to --enable-multilib\n+# Check whether --enable-multilib or --disable-multilib was given.\n+if test \"${enable_multilib+set}\" = set; then\n+  enableval=\"$enable_multilib\"\n+  case \"$enableval\" in\n+  yes) multilib=yes ;;\n+  no)  multilib=no ;;\n+  *)   { { echo \"$as_me:$LINENO: error: bad value $enableval for multilib option\" >&5\n+echo \"$as_me: error: bad value $enableval for multilib option\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+ esac\n+else\n+  multilib=yes\n+fi;\n+\n+# Even if the default multilib is not a cross compilation,\n+# it may be that some of the other multilibs are.\n+if test $cross_compiling = no && test $multilib = yes \\\n+   && test \"x${with_multisubdir}\" != x ; then\n+   cross_compiling=maybe\n+fi\n+\n \n ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'"}, {"sha": "cdc3cd38f62093df3c291c73d04671657623c334", "filename": "libiberty/configure.ac", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abea993f795f6b843d0a9ea036a93cb5d6f90bc1/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abea993f795f6b843d0a9ea036a93cb5d6f90bc1/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=abea993f795f6b843d0a9ea036a93cb5d6f90bc1", "patch": "@@ -109,6 +109,25 @@ dnl to call AC_CHECK_PROG.\n AC_CHECK_TOOL(AR, ar)\n AC_CHECK_TOOL(RANLIB, ranlib, :)\n \n+dnl When switching to automake, replace the following with AM_ENABLE_MULTILIB.\n+# Add --enable-multilib to configure.\n+# Default to --enable-multilib\n+AC_ARG_ENABLE(multilib,\n+[  --enable-multilib       build many library versions (default)],\n+[case \"$enableval\" in\n+  yes) multilib=yes ;;\n+  no)  multilib=no ;;\n+  *)   AC_MSG_ERROR([bad value $enableval for multilib option]) ;;\n+ esac],\n+\t      [multilib=yes])\n+\n+# Even if the default multilib is not a cross compilation,\n+# it may be that some of the other multilibs are.\n+if test $cross_compiling = no && test $multilib = yes \\\n+   && test \"x${with_multisubdir}\" != x ; then\n+   cross_compiling=maybe\n+fi\n+\n GCC_NO_EXECUTABLES\n AC_PROG_CC\n AC_PROG_CPP_WERROR"}]}