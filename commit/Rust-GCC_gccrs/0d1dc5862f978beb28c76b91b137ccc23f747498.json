{"sha": "0d1dc5862f978beb28c76b91b137ccc23f747498", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQxZGM1ODYyZjk3OGJlYjI4Yzc2YjkxYjEzN2NjYzIzZjc0NzQ5OA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-16T14:43:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-16T14:43:20Z"}, "message": "Don't defer noexcept_deferred_spec.\n\n\t* cp-tree.h (unevaluated_noexcept_spec): Don't declare.\n\t* decl.c (cxx_init_decl_processing): Initialize\n\tnoexcept_deferred_spec.\n\t* except.c (unevaluated_noexcept_spec): Delete.\n\t* class.c (deduce_noexcept_on_destructor): Use\n\tnoexcept_deferred_spec directly.\n\t* method.c (implicitly_declare_fn): Likewise.\n\nFrom-SVN: r249264", "tree": {"sha": "008d36677165ca97125bd44718c610d4e8d5a989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/008d36677165ca97125bd44718c610d4e8d5a989"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d1dc5862f978beb28c76b91b137ccc23f747498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1dc5862f978beb28c76b91b137ccc23f747498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1dc5862f978beb28c76b91b137ccc23f747498", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1dc5862f978beb28c76b91b137ccc23f747498/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a2dfd9a66a678b26c762d0fc614fea267ea706b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2dfd9a66a678b26c762d0fc614fea267ea706b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a2dfd9a66a678b26c762d0fc614fea267ea706b"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "ff832f8f44d579316ecc5f44086e14c86a2bf1a8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1dc5862f978beb28c76b91b137ccc23f747498/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1dc5862f978beb28c76b91b137ccc23f747498/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0d1dc5862f978beb28c76b91b137ccc23f747498", "patch": "@@ -1,5 +1,24 @@\n 2017-06-16  Nathan Sidwell  <nathan@acm.org>\n \n+\tDon't defer noexcept_deferred_spec.\n+\t* cp-tree.h (unevaluated_noexcept_spec): Don't declare.\n+\t* decl.c (cxx_init_decl_processing): Initialize\n+\tnoexcept_deferred_spec.\n+\t* except.c (unevaluated_noexcept_spec): Delete.\n+\t* class.c (deduce_noexcept_on_destructor): Use\n+\tnoexcept_deferred_spec directly.\n+\t* method.c (implicitly_declare_fn): Likewise.\n+\n+\tMake keyed_classes a vector.\n+\t* cp-tree.h (CPTI_KEYED_CLASSES, keyed_classes): Delete.\n+\t(keyed_classes): Declare as vector.\n+\t* decl.c (keyed_classes): Define.\n+\t(cxx_init_decl_processing): Allocate it.\n+\t(record_key_method_defined): Use vec_safe_push.\n+\t* class.c (finish_struct_1): Likewise.\n+\t* pt.c (instantiate_class_template_1): Likewise.\n+\t* decl2.c (c_parse_final_cleanups): Reverse iterate keyed_classes.\n+\n \tMake rtti lazier\n \t* rtti.c (enum tinfo_kind): Add TK_DERIVED_TYPES,\n \tTK_VMI_CLASS_TYPES, TK_MAX.  Delete TK_FIXED."}, {"sha": "054dd3e26e762be79b882e1943b6a9c249831280", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1dc5862f978beb28c76b91b137ccc23f747498/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1dc5862f978beb28c76b91b137ccc23f747498/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0d1dc5862f978beb28c76b91b137ccc23f747498", "patch": "@@ -5025,10 +5025,8 @@ void\n deduce_noexcept_on_destructor (tree dtor)\n {\n   if (!TYPE_RAISES_EXCEPTIONS (TREE_TYPE (dtor)))\n-    {\n-      tree eh_spec = unevaluated_noexcept_spec ();\n-      TREE_TYPE (dtor) = build_exception_variant (TREE_TYPE (dtor), eh_spec);\n-    }\n+    TREE_TYPE (dtor) = build_exception_variant (TREE_TYPE (dtor),\n+\t\t\t\t\t\tnoexcept_deferred_spec);\n }\n \n /* For each destructor in T, deduce noexcept:"}, {"sha": "c56e59cbd7e84b5999707e92ff3e3b7996f642c8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1dc5862f978beb28c76b91b137ccc23f747498/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1dc5862f978beb28c76b91b137ccc23f747498/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0d1dc5862f978beb28c76b91b137ccc23f747498", "patch": "@@ -6317,7 +6317,6 @@ extern tree forward_parm\t\t\t(tree);\n extern bool is_trivially_xible\t\t\t(enum tree_code, tree, tree);\n extern bool is_xible\t\t\t\t(enum tree_code, tree, tree);\n extern tree get_defaulted_eh_spec\t\t(tree);\n-extern tree unevaluated_noexcept_spec\t\t(void);\n extern void after_nsdmi_defaulted_late_checks   (tree);\n extern bool maybe_explain_implicit_delete\t(tree);\n extern void explain_implicit_non_constexpr\t(tree);"}, {"sha": "b6e854741825b671c6af79bb1f41e62c7d718f3a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1dc5862f978beb28c76b91b137ccc23f747498/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1dc5862f978beb28c76b91b137ccc23f747498/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0d1dc5862f978beb28c76b91b137ccc23f747498", "patch": "@@ -4078,6 +4078,8 @@ cxx_init_decl_processing (void)\n   empty_except_spec = build_tree_list (NULL_TREE, NULL_TREE);\n   noexcept_true_spec = build_tree_list (boolean_true_node, NULL_TREE);\n   noexcept_false_spec = build_tree_list (boolean_false_node, NULL_TREE);\n+  noexcept_deferred_spec = build_tree_list (make_node (DEFERRED_NOEXCEPT),\n+\t\t\t\t\t    NULL_TREE);\n \n #if 0\n   record_builtin_type (RID_MAX, NULL, string_type_node);"}, {"sha": "9e41ec451af636e24a173872fc43477519286ea2", "filename": "gcc/cp/except.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1dc5862f978beb28c76b91b137ccc23f747498/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1dc5862f978beb28c76b91b137ccc23f747498/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=0d1dc5862f978beb28c76b91b137ccc23f747498", "patch": "@@ -1197,18 +1197,6 @@ build_noexcept_spec (tree expr, int complain)\n     }\n }\n \n-/* Returns a noexcept-specifier to be evaluated later, for an\n-   implicitly-declared or explicitly defaulted special member function.  */\n-\n-tree\n-unevaluated_noexcept_spec (void)\n-{\n-  if (!noexcept_deferred_spec)\n-    noexcept_deferred_spec\n-      = build_noexcept_spec (make_node (DEFERRED_NOEXCEPT), tf_none);\n-  return noexcept_deferred_spec;\n-}\n-\n /* Returns a TRY_CATCH_EXPR that will put TRY_LIST and CATCH_LIST in the\n    TRY and CATCH locations.  CATCH_LIST must be a STATEMENT_LIST */\n "}, {"sha": "98d36daa02cdf0b01ecc0e56064072fea6284bc7", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1dc5862f978beb28c76b91b137ccc23f747498/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1dc5862f978beb28c76b91b137ccc23f747498/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=0d1dc5862f978beb28c76b91b137ccc23f747498", "patch": "@@ -2023,7 +2023,7 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n     }\n   else if (cxx_dialect >= cxx11)\n     {\n-      raises = unevaluated_noexcept_spec ();\n+      raises = noexcept_deferred_spec;\n       synthesized_method_walk (type, kind, const_p, NULL, &trivial_p,\n \t\t\t       &deleted_p, &constexpr_p, false,\n \t\t\t       inherited_ctor, inherited_parms);"}]}