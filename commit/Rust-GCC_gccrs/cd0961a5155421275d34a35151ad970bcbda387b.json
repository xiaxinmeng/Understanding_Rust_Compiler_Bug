{"sha": "cd0961a5155421275d34a35151ad970bcbda387b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QwOTYxYTUxNTU0MjEyNzVkMzRhMzUxNTFhZDk3MGJjYmRhMzg3Yg==", "commit": {"author": {"name": "Phil Muldoon", "email": "pmuldoon@redhat.com", "date": "2009-10-01T20:43:13Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2009-10-01T20:43:13Z"}, "message": "printers.py (StdListPrinter): Add -D_GLIBCXX_DEBUG implementation changes.\n\n2009-10-01  Phil Muldoon <pmuldoon@redhat.com>\n\n\t* python/libstdcxx/v6/printers.py (StdListPrinter):\n\tAdd -D_GLIBCXX_DEBUG implementation changes. Receive typename from\n\tprinter registration.\n\t(StdListIteratorPrinter): Likewise.\n\t(StdDebugIteratorPrinter): New printer.\n\t(build_libstdcxx_dictionary): Add -D_GLIBCXX_DEBUG registration\n\tentries.  Always pass a typename where the type can change.\n\t(StdSlistPrinter) Receive typename from printer registration.  Use\n\tin printer output.\n\t(StdBitsetPrinter): Likewise.\n\t(StdDequePrinter): Likewise.\n\nFrom-SVN: r152385", "tree": {"sha": "a77dda45e224c03bda7d476a66e79c0792f6c365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a77dda45e224c03bda7d476a66e79c0792f6c365"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd0961a5155421275d34a35151ad970bcbda387b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0961a5155421275d34a35151ad970bcbda387b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0961a5155421275d34a35151ad970bcbda387b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0961a5155421275d34a35151ad970bcbda387b/comments", "author": null, "committer": null, "parents": [{"sha": "e08312e36f2cc706b8a45568c75966240b70fdbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08312e36f2cc706b8a45568c75966240b70fdbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08312e36f2cc706b8a45568c75966240b70fdbd"}], "stats": {"total": 99, "additions": 80, "deletions": 19}, "files": [{"sha": "a5e5b0d02a2a248411088eb120304e4c0fd9517d", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 80, "deletions": 19, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0961a5155421275d34a35151ad970bcbda387b/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0961a5155421275d34a35151ad970bcbda387b/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=cd0961a5155421275d34a35151ad970bcbda387b", "patch": "@@ -64,28 +64,44 @@ def next(self):\n             self.count = self.count + 1\n             return ('[%d]' % count, elt['_M_data'])\n \n-    def __init__(self, val):\n+    def __init__(self, typename, val):\n+        self.typename = typename\n         self.val = val\n \n     def children(self):\n         itype = self.val.type.template_argument(0)\n-        nodetype = gdb.lookup_type('std::_List_node<%s>' % itype).pointer()\n+        # If the inferior program is compiled with -D_GLIBCXX_DEBUG\n+        # some of the internal implementation details change.\n+        if self.typename == \"std::list\":\n+            nodetype = gdb.lookup_type('std::_List_node<%s>' % itype).pointer()\n+        elif self.typename == \"std::__debug::list\":\n+            nodetype = gdb.lookup_type('std::__norm::_List_node<%s>' % itype).pointer()\n+        else:\n+            raise \"Cannot cast list node for list printer.\"\n         return self._iterator(nodetype, self.val['_M_impl']['_M_node'])\n \n     def to_string(self):\n         if self.val['_M_impl']['_M_node'].address == self.val['_M_impl']['_M_node']['_M_next']:\n-            return 'empty std::list'\n-        return 'std::list'\n+            return 'empty %s' % (self.typename)\n+        return '%s' % (self.typename)\n \n class StdListIteratorPrinter:\n     \"Print std::list::iterator\"\n \n-    def __init__(self, val):\n+    def __init__(self, typename, val):\n         self.val = val\n+        self.typename = typename\n \n     def to_string(self):\n         itype = self.val.type.template_argument(0)\n-        nodetype = gdb.lookup_type('std::_List_node<%s>' % itype).pointer()\n+        # If the inferior program is compiled with -D_GLIBCXX_DEBUG\n+        # some of the internal implementation details change.\n+        if self.typename == \"std::_List_iterator\" or self.typename == \"std::_List_const_iterator\":\n+            nodetype = gdb.lookup_type('std::_List_node<%s>' % itype).pointer()\n+        elif self.typename == \"std::__norm::_List_iterator\" or self.typename == \"std::__norm::_List_const_iterator\":\n+            nodetype = gdb.lookup_type('std::__norm::_List_node<%s>' % itype).pointer()\n+        else:\n+            raise \"Cannot cast list node for list iterator printer.\"\n         return self.val['_M_node'].cast(nodetype).dereference()['_M_data']\n \n class StdSlistPrinter:\n@@ -154,7 +170,8 @@ def next(self):\n             self.item = self.item + 1\n             return ('[%d]' % count, elt)\n \n-    def __init__(self, val):\n+    def __init__(self, typename, val):\n+        self.typename = typename\n         self.val = val\n \n     def children(self):\n@@ -165,8 +182,8 @@ def to_string(self):\n         start = self.val['_M_impl']['_M_start']\n         finish = self.val['_M_impl']['_M_finish']\n         end = self.val['_M_impl']['_M_end_of_storage']\n-        return ('std::vector of length %d, capacity %d'\n-                % (int (finish - start), int (end - start)))\n+        return ('%s of length %d, capacity %d'\n+                % (self.typename, int (finish - start), int (end - start)))\n \n     def display_hint(self):\n         return 'array'\n@@ -248,6 +265,17 @@ def to_string (self):\n         nodetype = nodetype.pointer()\n         return self.val.cast(nodetype).dereference()['_M_value_field']\n \n+class StdDebugIteratorPrinter:\n+    \"Print a debug enabled version of an iterator\"\n+\n+    def __init__ (self, val):\n+        self.val = val\n+\n+    # Just strip away the encapsulating __gnu_debug::_Safe_iterator\n+    # and return the wrapped iterator value.\n+    def to_string (self):\n+        itype = self.val.type.template_argument(0)\n+        return self.val['_M_current'].cast(itype)\n \n class StdMapPrinter:\n     \"Print a std::map or std::multimap\"\n@@ -330,13 +358,14 @@ def children (self):\n class StdBitsetPrinter:\n     \"Print a std::bitset\"\n \n-    def __init__(self, val):\n+    def __init__(self, typename, val):\n+        self.typename = typename\n         self.val = val\n \n     def to_string (self):\n         # If template_argument handled values, we could print the\n         # size.  Or we could use a regexp on the type.\n-        return 'std::bitset'\n+        return '%s' % (self.typename)\n \n     def children (self):\n         words = self.val['_M_w']\n@@ -399,7 +428,8 @@ def next(self):\n \n             return result\n \n-    def __init__(self, val):\n+    def __init__(self, typename, val):\n+        self.typename = typename\n         self.val = val\n         self.elttype = val.type.template_argument(0)\n         size = self.elttype.sizeof\n@@ -418,7 +448,7 @@ def to_string(self):\n \n         size = self.buffer_size * delta_n + delta_s + delta_e\n \n-        return 'std::deque with %d elements' % long (size)\n+        return '%s with %d elements' % (self.typename, long (size))\n \n     def children(self):\n         start = self.val['_M_impl']['_M_start']\n@@ -603,9 +633,9 @@ def build_libstdcxx_dictionary ():\n     pretty_printers_dict[re.compile('^std::basic_string<wchar_t(,.*)?>$')] = lambda val: StdStringPrinter(1, val)\n     pretty_printers_dict[re.compile('^std::basic_string<char16_t(,.*)?>$')] = lambda val: StdStringPrinter('UTF-16', val)\n     pretty_printers_dict[re.compile('^std::basic_string<char32_t(,.*)?>$')] = lambda val: StdStringPrinter('UTF-32', val)\n-    pretty_printers_dict[re.compile('^std::bitset<.*>$')] = StdBitsetPrinter\n-    pretty_printers_dict[re.compile('^std::deque<.*>$')] = StdDequePrinter\n-    pretty_printers_dict[re.compile('^std::list<.*>$')] = StdListPrinter\n+    pretty_printers_dict[re.compile('^std::bitset<.*>$')] = lambda val: StdBitsetPrinter(\"std::bitset\", val)\n+    pretty_printers_dict[re.compile('^std::deque<.*>$')] = lambda val: StdDequePrinter(\"std::deque\", val)\n+    pretty_printers_dict[re.compile('^std::list<.*>$')] = lambda val: StdListPrinter(\"std::list\", val)\n     pretty_printers_dict[re.compile('^std::map<.*>$')] = lambda val: StdMapPrinter(\"std::map\", val)\n     pretty_printers_dict[re.compile('^std::multimap<.*>$')] = lambda val: StdMapPrinter(\"std::multimap\", val)\n     pretty_printers_dict[re.compile('^std::multiset<.*>$')] = lambda val: StdSetPrinter(\"std::multiset\", val)\n@@ -614,9 +644,23 @@ def build_libstdcxx_dictionary ():\n     pretty_printers_dict[re.compile('^std::set<.*>$')] = lambda val: StdSetPrinter(\"std::set\", val)\n     pretty_printers_dict[re.compile('^std::stack<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::stack\", val)\n     pretty_printers_dict[re.compile('^std::unique_ptr<.*>$')] = UniquePointerPrinter\n-    pretty_printers_dict[re.compile('^std::vector<.*>$')] = StdVectorPrinter\n+    pretty_printers_dict[re.compile('^std::vector<.*>$')] = lambda val: StdVectorPrinter(\"std::vector\", val)\n     # vector<bool>\n \n+    # Printer registrations for classes compiled with -D_GLIBCXX_DEBUG.\n+    pretty_printers_dict[re.compile('^std::__debug::bitset<.*>$')] = lambda val: StdBitsetPrinter(\"std::__debug::bitset\", val)\n+    pretty_printers_dict[re.compile('^std::__debug::deque<.*>$')] = lambda val: StdDequePrinter(\"std::__debug::deque\", val)\n+    pretty_printers_dict[re.compile('^std::__debug::list<.*>$')] = lambda val: StdListPrinter(\"std::__debug::list\", val)\n+    pretty_printers_dict[re.compile('^std::__debug::map<.*>$')] = lambda val: StdMapPrinter(\"std::__debug::map\", val)\n+    pretty_printers_dict[re.compile('^std::__debug::multimap<.*>$')] = lambda val: StdMapPrinter(\"std::__debug::multimap\", val)\n+    pretty_printers_dict[re.compile('^std::__debug::multiset<.*>$')] = lambda val: StdSetPrinter(\"std::__debug::multiset\", val)\n+    pretty_printers_dict[re.compile('^std::__debug::priority_queue<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::__debug::priority_queue\", val)\n+    pretty_printers_dict[re.compile('^std::__debug::queue<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::__debug::queue\", val)\n+    pretty_printers_dict[re.compile('^std::__debug::set<.*>$')] = lambda val: StdSetPrinter(\"std::__debug::set\", val)\n+    pretty_printers_dict[re.compile('^std::__debug::stack<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::__debug::stack\", val)\n+    pretty_printers_dict[re.compile('^std::__debug::unique_ptr<.*>$')] = UniquePointerPrinter\n+    pretty_printers_dict[re.compile('^std::__debug::vector<.*>$')] = lambda val: StdVectorPrinter(\"std::__debug::vector\", val)\n+\n     # These are the TR1 and C++0x printers.\n     # For array - the default GDB pretty-printer seems reasonable.\n     pretty_printers_dict[re.compile('^std::shared_ptr<.*>$')] = lambda val: StdPointerPrinter ('std::shared_ptr', val)\n@@ -633,22 +677,39 @@ def build_libstdcxx_dictionary ():\n     pretty_printers_dict[re.compile('^std::tr1::unordered_multimap<.*>$')] = lambda val: Tr1UnorderedMapPrinter ('std::tr1::unordered_multimap', val)\n     pretty_printers_dict[re.compile('^std::tr1::unordered_multiset<.*>$')] = lambda val: Tr1UnorderedSetPrinter ('std::tr1::unordered_multiset', val)\n \n+    # These are the C++0x printer registrations for -D_GLIBCXX_DEBUG cases.\n+    # The tr1 namespace printers do not seem to have any debug\n+    # equivalents, so do no register them.\n+    pretty_printers_dict[re.compile('^std::__debug::unordered_map<.*>$')] = lambda val: Tr1UnorderedMapPrinter ('std::__debug::unordered_map', val)\n+    pretty_printers_dict[re.compile('^std::__debug::unordered_set<.*>$')] = lambda val: Tr1UnorderedSetPrinter ('std::__debug::unordered_set', val)\n+    pretty_printers_dict[re.compile('^std::__debug::unordered_multimap<.*>$')] = lambda val: Tr1UnorderedMapPrinter ('std::__debug::unordered_multimap',  val)\n+    pretty_printers_dict[re.compile('^std::__debug::unordered_multiset<.*>$')] = lambda val: Tr1UnorderedSetPrinter ('std::__debug:unordered_multiset', val)\n+\n \n     # Extensions.\n     pretty_printers_dict[re.compile('^__gnu_cxx::slist<.*>$')] = StdSlistPrinter\n \n     if True:\n         # These shouldn't be necessary, if GDB \"print *i\" worked.\n         # But it often doesn't, so here they are.\n-        pretty_printers_dict[re.compile('^std::_List_iterator<.*>$')] = lambda val: StdListIteratorPrinter(val)\n-        pretty_printers_dict[re.compile('^std::_List_const_iterator<.*>$')] = lambda val: StdListIteratorPrinter(val)\n+        pretty_printers_dict[re.compile('^std::_List_iterator<.*>$')] = lambda val: StdListIteratorPrinter(\"std::_List_iterator\",val)\n+        pretty_printers_dict[re.compile('^std::_List_const_iterator<.*>$')] = lambda val: StdListIteratorPrinter(\"std::_List_const_iterator\",val)\n         pretty_printers_dict[re.compile('^std::_Rb_tree_iterator<.*>$')] = lambda val: StdRbtreeIteratorPrinter(val)\n         pretty_printers_dict[re.compile('^std::_Rb_tree_const_iterator<.*>$')] = lambda val: StdRbtreeIteratorPrinter(val)\n         pretty_printers_dict[re.compile('^std::_Deque_iterator<.*>$')] = lambda val: StdDequeIteratorPrinter(val)\n         pretty_printers_dict[re.compile('^std::_Deque_const_iterator<.*>$')] = lambda val: StdDequeIteratorPrinter(val)\n         pretty_printers_dict[re.compile('^__gnu_cxx::__normal_iterator<.*>$')] = lambda val: StdVectorIteratorPrinter(val)\n         pretty_printers_dict[re.compile('^__gnu_cxx::_Slist_iterator<.*>$')] = lambda val: StdSlistIteratorPrinter(val)\n \n+        # Debug (compiled with -D_GLIBCXX_DEBUG) printer registrations.\n+        # The Rb_tree debug iterator when unwrapped from the encapsulating __gnu_debug::_Safe_iterator\n+        # does not have the __norm namespace. Just use the existing printer registration for that.\n+        pretty_printers_dict[re.compile('^__gnu_debug::_Safe_iterator<.*>$')] = lambda val: StdDebugIteratorPrinter(val)\n+        pretty_printers_dict[re.compile('^std::__norm::_List_iterator<.*>$')] = lambda val: StdListIteratorPrinter (\"std::__norm::_List_iterator\",val)\n+        pretty_printers_dict[re.compile('^std::__norm::_List_const_iterator<.*>$')] = lambda val: StdListIteratorPrinter (\"std::__norm::_List_const_iterator\",val)\n+        pretty_printers_dict[re.compile('^std::__norm::_Deque_const_iterator<.*>$')] = lambda val: StdDequeIteratorPrinter(val)\n+        pretty_printers_dict[re.compile('^std::__norm::_Deque_iterator<.*>$')] = lambda val: StdDequeIteratorPrinter(val)\n+\n pretty_printers_dict = {}\n \n build_libstdcxx_dictionary ()"}]}