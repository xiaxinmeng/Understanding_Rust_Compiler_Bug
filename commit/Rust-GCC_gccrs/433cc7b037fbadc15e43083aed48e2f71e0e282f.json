{"sha": "433cc7b037fbadc15e43083aed48e2f71e0e282f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMzY2M3YjAzN2ZiYWRjMTVlNDMwODNhZWQ0OGUyZjcxZTBlMjgyZg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2013-07-23T01:54:24Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2013-07-23T01:54:24Z"}, "message": "c-common.h (enum rid): New constant.\n\n2013-07-23  Tom Tromey  <tromey@redhat.com>\n\t    Joseph Myers  <joseph@codesourcery.com>\n\nc-family:\n\t* c-common.h (enum rid) <RID_GENERIC>: New constant.\n\t* c-common.c (c_common_reswords): Add _Generic.\n\nc:\n\t* c-parser.c (struct c_generic_association): New.\n\t(c_generic_association_d): New typedef.\n\t(c_parser_generic_selection): New function.\n\t(c_parser_postfix_expression): Handle RID_GENERIC.\n\ntestsuite:\n\t* gcc.dg/c11-generic-1.c: New file.\n\t* gcc.dg/c11-generic-2.c: New file.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r201153", "tree": {"sha": "8f1ed7da1d779f1cb23b3f07c33506309da58d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f1ed7da1d779f1cb23b3f07c33506309da58d45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/433cc7b037fbadc15e43083aed48e2f71e0e282f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/433cc7b037fbadc15e43083aed48e2f71e0e282f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/433cc7b037fbadc15e43083aed48e2f71e0e282f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/433cc7b037fbadc15e43083aed48e2f71e0e282f/comments", "author": null, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee07556fbdb3501008215a9b5718087dfdd360e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee07556fbdb3501008215a9b5718087dfdd360e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee07556fbdb3501008215a9b5718087dfdd360e5"}], "stats": {"total": 329, "additions": 328, "deletions": 1}, "files": [{"sha": "487f880e432b4ea6dc8feef059109fb5c766c3be", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=433cc7b037fbadc15e43083aed48e2f71e0e282f", "patch": "@@ -1,3 +1,8 @@\n+2013-07-23  Tom Tromey  <tromey@redhat.com>\n+\n+\t* c-common.h (enum rid) <RID_GENERIC>: New constant.\n+\t* c-common.c (c_common_reswords): Add _Generic.\n+\n 2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n \n \t* c-common.c: Fix typos."}, {"sha": "7bba376f36901b047d4641985aa3c3d91489d425", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=433cc7b037fbadc15e43083aed48e2f71e0e282f", "patch": "@@ -412,6 +412,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"_Sat\",             RID_SAT,       D_CONLY | D_EXT },\n   { \"_Static_assert\",   RID_STATIC_ASSERT, D_CONLY },\n   { \"_Noreturn\",        RID_NORETURN,  D_CONLY },\n+  { \"_Generic\",         RID_GENERIC,   D_CONLY },\n   { \"__FUNCTION__\",\tRID_FUNCTION_NAME, 0 },\n   { \"__PRETTY_FUNCTION__\", RID_PRETTY_FUNCTION_NAME, 0 },\n   { \"__alignof\",\tRID_ALIGNOF,\t0 },"}, {"sha": "dc430c3859c895b18a13ba0d1a9eefeed354f643", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=433cc7b037fbadc15e43083aed48e2f71e0e282f", "patch": "@@ -105,7 +105,7 @@ enum rid\n   RID_FRACT, RID_ACCUM,\n \n   /* C11 */\n-  RID_ALIGNAS,\n+  RID_ALIGNAS, RID_GENERIC,\n \n   /* This means to warn that this is a C++ keyword, and then treat it\n      as a normal identifier.  */"}, {"sha": "c7ecff8bdae9eca74501af8d1fd5032fbbdeef45", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=433cc7b037fbadc15e43083aed48e2f71e0e282f", "patch": "@@ -1,3 +1,11 @@\n+2013-07-23  Tom Tromey  <tromey@redhat.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-parser.c (struct c_generic_association): New.\n+\t(c_generic_association_d): New typedef.\n+\t(c_parser_generic_selection): New function.\n+\t(c_parser_postfix_expression): Handle RID_GENERIC.\n+\n 2013-07-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/57793"}, {"sha": "fea153a380856925b7c4f0753a6a4f753843f3f6", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=433cc7b037fbadc15e43083aed48e2f71e0e282f", "patch": "@@ -6232,6 +6232,225 @@ c_parser_get_builtin_args (c_parser *parser, const char *bname,\n   return true;\n }\n \n+/* This represents a single generic-association.  */\n+\n+struct c_generic_association\n+{\n+  /* The location of the starting token of the type.  */\n+  location_t type_location;\n+  /* The association's type, or NULL_TREE for 'default'..  */\n+  tree type;\n+  /* The association's expression.  */\n+  struct c_expr expression;\n+};\n+\n+/* Parse a generic-selection.  (C11 6.5.1.1).\n+   \n+   generic-selection:\n+     _Generic ( assignment-expression , generic-assoc-list )\n+     \n+   generic-assoc-list:\n+     generic-association\n+     generic-assoc-list , generic-association\n+   \n+   generic-association:\n+     type-name : assignment-expression\n+     default : assignment-expression\n+*/\n+\n+static struct c_expr\n+c_parser_generic_selection (c_parser *parser)\n+{\n+  vec<c_generic_association> associations = vNULL;\n+  struct c_expr selector, error_expr;\n+  tree selector_type;\n+  struct c_generic_association matched_assoc;\n+  bool match_found = false;\n+  location_t generic_loc, selector_loc;\n+\n+  error_expr.original_code = ERROR_MARK;\n+  error_expr.original_type = NULL;\n+  error_expr.value = error_mark_node;\n+  matched_assoc.type_location = UNKNOWN_LOCATION;\n+  matched_assoc.type = NULL_TREE;\n+  matched_assoc.expression = error_expr;\n+\n+  gcc_assert (c_parser_next_token_is_keyword (parser, RID_GENERIC));\n+  generic_loc = c_parser_peek_token (parser)->location;\n+  c_parser_consume_token (parser);\n+  if (!flag_isoc11)\n+    {\n+      if (flag_isoc99)\n+\tpedwarn (generic_loc, OPT_Wpedantic,\n+\t\t \"ISO C99 does not support %<_Generic%>\");\n+      else\n+\tpedwarn (generic_loc, OPT_Wpedantic,\n+\t\t \"ISO C90 does not support %<_Generic%>\");\n+    }\n+\n+  if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n+    return error_expr;\n+\n+  c_inhibit_evaluation_warnings++;\n+  selector_loc = c_parser_peek_token (parser)->location;\n+  selector = c_parser_expr_no_commas (parser, NULL);\n+  selector = default_function_array_conversion (selector_loc, selector);\n+  c_inhibit_evaluation_warnings--;\n+\n+  if (selector.value == error_mark_node)\n+    {\n+      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n+      return selector;\n+    }\n+  selector_type = TREE_TYPE (selector.value);\n+  /* In ISO C terms, rvalues (including the controlling expression of\n+     _Generic) do not have qualified types.  */\n+  if (TREE_CODE (selector_type) != ARRAY_TYPE)\n+    selector_type = TYPE_MAIN_VARIANT (selector_type);\n+  /* In ISO C terms, _Noreturn is not part of the type of expressions\n+     such as &abort, but in GCC it is represented internally as a type\n+     qualifier.  */\n+  if (FUNCTION_POINTER_TYPE_P (selector_type)\n+      && TYPE_QUALS (TREE_TYPE (selector_type)) != TYPE_UNQUALIFIED)\n+    selector_type\n+      = build_pointer_type (TYPE_MAIN_VARIANT (TREE_TYPE (selector_type)));\n+\n+  if (!c_parser_require (parser, CPP_COMMA, \"expected %<,%>\"))\n+    {\n+      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n+      return error_expr;\n+    }\n+\n+  while (1)\n+    {\n+      struct c_generic_association assoc, *iter;\n+      unsigned int ix;\n+      c_token *token = c_parser_peek_token (parser);\n+\n+      assoc.type_location = token->location;\n+      if (token->type == CPP_KEYWORD && token->keyword == RID_DEFAULT)\n+\t{\n+\t  c_parser_consume_token (parser);\n+\t  assoc.type = NULL_TREE;\n+\t}\n+      else\n+\t{\n+\t  struct c_type_name *type_name;\n+\n+\t  type_name = c_parser_type_name (parser);\n+\t  if (type_name == NULL)\n+\t    {\n+\t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n+\t      goto error_exit;\n+\t    }\n+\t  assoc.type = groktypename (type_name, NULL, NULL);\n+\t  if (assoc.type == error_mark_node)\n+\t    {\n+\t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n+\t      goto error_exit;\n+\t    }\n+\n+\t  if (TREE_CODE (assoc.type) == FUNCTION_TYPE)\n+\t    error_at (assoc.type_location,\n+\t\t      \"%<_Generic%> association has function type\");\n+\t  else if (!COMPLETE_TYPE_P (assoc.type))\n+\t    error_at (assoc.type_location,\n+\t\t      \"%<_Generic%> association has incomplete type\");\n+\n+\t  if (variably_modified_type_p (assoc.type, NULL_TREE))\n+\t    error_at (assoc.type_location,\n+\t\t      \"%<_Generic%> association has \"\n+\t\t      \"variable length type\");\n+\t}\n+\n+      if (!c_parser_require (parser, CPP_COLON, \"expected %<:%>\"))\n+\t{\n+\t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n+\t  goto error_exit;\n+\t}\n+\n+      assoc.expression = c_parser_expr_no_commas (parser, NULL);\n+      if (assoc.expression.value == error_mark_node)\n+\t{\n+\t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n+\t  goto error_exit;\n+\t}\n+\n+      for (ix = 0; associations.iterate (ix, &iter); ++ix)\n+\t{\n+\t  if (assoc.type == NULL_TREE)\n+\t    {\n+\t      if (iter->type == NULL_TREE)\n+\t\t{\n+\t\t  error_at (assoc.type_location,\n+\t\t\t    \"duplicate %<default%> case in %<_Generic%>\");\n+\t\t  inform (iter->type_location, \"original %<default%> is here\");\n+\t\t}\n+\t    }\n+\t  else if (iter->type != NULL_TREE)\n+\t    {\n+\t      if (comptypes (assoc.type, iter->type))\n+\t\t{\n+\t\t  error_at (assoc.type_location,\n+\t\t\t    \"%<_Generic%> specifies two compatible types\");\n+\t\t  inform (iter->type_location, \"compatible type is here\");\n+\t\t}\n+\t    }\n+\t}\n+\n+      if (assoc.type == NULL_TREE)\n+\t{\n+\t  if (!match_found)\n+\t    {\n+\t      matched_assoc = assoc;\n+\t      match_found = true;\n+\t    }\n+\t}\n+      else if (comptypes (assoc.type, selector_type))\n+\t{\n+\t  if (!match_found || matched_assoc.type == NULL_TREE)\n+\t    {\n+\t      matched_assoc = assoc;\n+\t      match_found = true;\n+\t    }\n+\t  else\n+\t    {\n+\t      error_at (assoc.type_location,\n+\t\t\t\"%<_Generic> selector matches multiple associations\");\n+\t      inform (matched_assoc.type_location,\n+\t\t      \"other match is here\");\n+\t    }\n+\t}\n+\n+      associations.safe_push (assoc);\n+\n+      if (c_parser_peek_token (parser)->type != CPP_COMMA)\n+\tbreak;\n+      c_parser_consume_token (parser);\n+    }\n+\n+  associations.release ();\n+\n+  if (!c_parser_require (parser, CPP_CLOSE_PAREN, \"expected %<)%>\"))\n+    {\n+      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n+      return error_expr;\n+    }\n+\n+  if (!match_found)\n+    {\n+      error_at (selector_loc, \"%<_Generic%> selector of type %qT is not \"\n+\t\t\"compatible with any association\",\n+\t\tselector_type);\n+      return error_expr;\n+    }\n+\n+  return matched_assoc.expression;\n+\n+ error_exit:\n+  associations.release ();\n+  return error_expr;\n+}\n \n /* Parse a postfix expression (C90 6.3.1-6.3.2, C99 6.5.1-6.5.2).\n \n@@ -6255,6 +6474,7 @@ c_parser_get_builtin_args (c_parser *parser, const char *bname,\n      constant\n      string-literal\n      ( expression )\n+     generic-selection\n \n    GNU extensions:\n \n@@ -6823,6 +7043,9 @@ c_parser_postfix_expression (c_parser *parser)\n \t    expr.value = objc_build_encode_expr (type);\n \t  }\n \t  break;\n+\tcase RID_GENERIC:\n+\t  expr = c_parser_generic_selection (parser);\n+\t  break;\n \tdefault:\n \t  c_parser_error (parser, \"expected expression\");\n \t  expr.value = error_mark_node;"}, {"sha": "4cd3d0f62b259ab9f3d0fdba8056334adadddff5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=433cc7b037fbadc15e43083aed48e2f71e0e282f", "patch": "@@ -1,3 +1,9 @@\n+2013-07-23  Tom Tromey  <tromey@redhat.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-generic-1.c: New file.\n+\t* gcc.dg/c11-generic-2.c: New file.\n+\n 2013-07-22  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57906"}, {"sha": "60ef1f0eb692d6e416caeb9adb8aadddc8d60035", "filename": "gcc/testsuite/gcc.dg/c11-generic-1.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-generic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-generic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-generic-1.c?ref=433cc7b037fbadc15e43083aed48e2f71e0e282f", "patch": "@@ -0,0 +1,57 @@\n+/* Test C11 _Generic.  Valid uses.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+_Noreturn extern void exit (int);\n+_Noreturn extern void abort (void);\n+\n+void\n+check (int n)\n+{\n+  if (n)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  int n = 0;\n+\n+  check (_Generic (n++, int: 0));\n+  /* _Generic should not evaluate its argument.  */\n+  check (n);\n+\n+  check (_Generic (n, double: n++, default: 0));\n+  check (n);\n+\n+  /* Qualifiers are removed for the purpose of type matching.  */\n+  const int cn = 0;\n+  check (_Generic (cn, int: 0, default: n++));\n+  check (n);\n+  check (_Generic ((const int) n, int: 0, default: n++));\n+  check (n);\n+\n+  /* Arrays decay to pointers.  */\n+  int a[1];\n+  const int ca[1];\n+  check (_Generic (a, int *: 0, const int *: n++));\n+  check (n);\n+  check (_Generic (ca, const int *: 0, int *: n++));\n+  check (n);\n+\n+  /* Functions decay to pointers.  */\n+  extern void f (void);\n+  check (_Generic (f, void (*) (void): 0, default: n++));\n+  check (n);\n+\n+  /* _Noreturn is not part of the function type.  */\n+  check (_Generic (&abort, void (*) (void): 0, default: n++));\n+  check (n);\n+\n+  /* Integer promotions do not occur.  */\n+  short s;\n+  check (_Generic (s, short: 0, int: n++));\n+  check (n);\n+\n+  exit (0);\n+}"}, {"sha": "90be650af280e8b2ef8fd112f26282f4aea55232", "filename": "gcc/testsuite/gcc.dg/c11-generic-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-generic-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/433cc7b037fbadc15e43083aed48e2f71e0e282f/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-generic-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-generic-2.c?ref=433cc7b037fbadc15e43083aed48e2f71e0e282f", "patch": "@@ -0,0 +1,27 @@\n+/* Test C11 _Generic.  Error cases.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+struct incomplete;\n+\n+void\n+f (int n)\n+{\n+  /* Multiple 'default's.  */\n+  _Generic (n, default: 1, default: 2); /* { dg-error \"duplicate .*default.* case\" } */\n+\n+  /* Variably-modified type not ok.  */\n+  _Generic (n, int[n]: 0, default: 1);\t/* { dg-error \"variable length type\" } */\n+  /* Type must be complete.  */\n+  _Generic (n, struct incomplete: 0, default: 1); /* { dg-error \"incomplete type\" } */\n+  _Generic (n, void: 0, default: 1); /* { dg-error \"incomplete type\" } */\n+\n+  /* Type must be object type.  */\n+  _Generic (n, void (void): 0, default: 1); /* { dg-error \"function type\" } */\n+\n+  /* Two compatible types in association list.  */\n+  _Generic (&n, int: 5, signed int: 7, default: 23); /* { dg-error \"two compatible types\" } */\n+\n+  /* No matching association.  */\n+  _Generic (n, void *: 5);\t/* { dg-error \"not compatible with any association\" } */\n+}"}]}