{"sha": "5124c34fcc62f0f880ae947542678e28aa2ce703", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEyNGMzNGZjYzYyZjBmODgwYWU5NDc1NDI2NzhlMjhhYTJjZTcwMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-02-04T14:17:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-02-04T14:18:25Z"}, "message": "tree-optimization/93538 - add missing comparison folding case\n\nThis adds back a folding that worked in GCC 4.5 times by amending\nthe pattern that handles other cases of address vs. SSA name\ncomparisons.\n\n2020-02-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/93538\n\t* match.pd (addr EQ/NE ptr): Amend to handle &ptr->x EQ/NE ptr.\n\n\t* gcc.dg/tree-ssa/forwprop-38.c: New testcase.", "tree": {"sha": "ed149fabf769e532c99a6fe6f1eecad4cafc740f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed149fabf769e532c99a6fe6f1eecad4cafc740f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5124c34fcc62f0f880ae947542678e28aa2ce703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5124c34fcc62f0f880ae947542678e28aa2ce703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5124c34fcc62f0f880ae947542678e28aa2ce703", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5124c34fcc62f0f880ae947542678e28aa2ce703/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bc5bea1f3f0ce3927fd86ce728641d087f3d3b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc5bea1f3f0ce3927fd86ce728641d087f3d3b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc5bea1f3f0ce3927fd86ce728641d087f3d3b5"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "d6b5ded32a46b8c87717c68839804bc2d3e50747", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5124c34fcc62f0f880ae947542678e28aa2ce703/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5124c34fcc62f0f880ae947542678e28aa2ce703/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5124c34fcc62f0f880ae947542678e28aa2ce703", "patch": "@@ -1,3 +1,8 @@\n+2020-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93538\n+\t* match.pd (addr EQ/NE ptr): Amend to handle &ptr->x EQ/NE ptr.\n+\n 2020-02-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91123"}, {"sha": "73834c255935930e2c93d7ba21a126f17d222882", "filename": "gcc/match.pd", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5124c34fcc62f0f880ae947542678e28aa2ce703/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5124c34fcc62f0f880ae947542678e28aa2ce703/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=5124c34fcc62f0f880ae947542678e28aa2ce703", "patch": "@@ -4267,19 +4267,30 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t    { constant_boolean_node (above ? false : true, type); }))))))))))))\n \n (for cmp (eq ne)\n- /* A local variable can never be pointed to by\n-    the default SSA name of an incoming parameter.\n-    SSA names are canonicalized to 2nd place.  */\n  (simplify\n+  /* SSA names are canonicalized to 2nd place.  */\n   (cmp addr@0 SSA_NAME@1)\n-  (if (SSA_NAME_IS_DEFAULT_DEF (@1)\n-       && TREE_CODE (SSA_NAME_VAR (@1)) == PARM_DECL)\n-   (with { tree base = get_base_address (TREE_OPERAND (@0, 0)); }\n-    (if (TREE_CODE (base) == VAR_DECL\n-         && auto_var_in_fn_p (base, current_function_decl))\n-     (if (cmp == NE_EXPR)\n-      { constant_boolean_node (true, type); }\n-      { constant_boolean_node (false, type); }))))))\n+  (with\n+   { poly_int64 off; tree base; }\n+   /* A local variable can never be pointed to by\n+      the default SSA name of an incoming parameter.  */\n+   (if (SSA_NAME_IS_DEFAULT_DEF (@1)\n+\t&& TREE_CODE (SSA_NAME_VAR (@1)) == PARM_DECL\n+\t&& (base = get_base_address (TREE_OPERAND (@0, 0)))\n+\t&& TREE_CODE (base) == VAR_DECL\n+\t&& auto_var_in_fn_p (base, current_function_decl))\n+    (if (cmp == NE_EXPR)\n+     { constant_boolean_node (true, type); }\n+     { constant_boolean_node (false, type); })\n+    /* If the address is based on @1 decide using the offset.  */\n+    (if ((base = get_addr_base_and_unit_offset (TREE_OPERAND (@0, 0), &off))\n+\t && TREE_CODE (base) == MEM_REF\n+\t && TREE_OPERAND (base, 0) == @1)\n+     (with { off += mem_ref_offset (base).force_shwi (); }\n+      (if (known_ne (off, 0))\n+       { constant_boolean_node (cmp == NE_EXPR, type); }\n+       (if (known_eq (off, 0))\n+        { constant_boolean_node (cmp == EQ_EXPR, type); }))))))))\n \n /* Equality compare simplifications from fold_binary  */\n (for cmp (eq ne)"}, {"sha": "7ce58af462ba82f8fae6a1471d582a93502b7eb6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5124c34fcc62f0f880ae947542678e28aa2ce703/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5124c34fcc62f0f880ae947542678e28aa2ce703/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5124c34fcc62f0f880ae947542678e28aa2ce703", "patch": "@@ -1,3 +1,8 @@\n+2020-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93538\n+\t* gcc.dg/tree-ssa/forwprop-38.c: New testcase.\n+\n 2020-02-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/cpp/has-include-1.c: New test."}, {"sha": "e016c825b3c5227dd0a0468f0478355535548aa2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-38.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5124c34fcc62f0f880ae947542678e28aa2ce703/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5124c34fcc62f0f880ae947542678e28aa2ce703/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-38.c?ref=5124c34fcc62f0f880ae947542678e28aa2ce703", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1\" } */\n+\n+struct A { int a[1]; };\n+\n+void f (struct A *p)\n+{\n+  void *q = p->a;\n+  if (p != q)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"abort\" \"forwprop1\" } } */"}]}