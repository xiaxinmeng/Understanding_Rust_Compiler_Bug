{"sha": "e5dc5fb2a55a771ebad2535e674d93cd13f81c39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVkYzVmYjJhNTVhNzcxZWJhZDI1MzVlNjc0ZDkzY2QxM2Y4MWMzOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-04-13T21:28:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-04-13T21:28:25Z"}, "message": "tree.c (cp_valid_lang_attribute): New fn.\n\n\t* tree.c (cp_valid_lang_attribute): New fn.  Handle init_priority\n\tand com_interface.\n\t* cp-tree.h: Add prototype.\n\t* decl.c (init_decl_processing): Set valid_lang_attribute.\n\nFrom-SVN: r26421", "tree": {"sha": "46ce13a121ebb7cfd5dcbfe1112ca672cc968c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46ce13a121ebb7cfd5dcbfe1112ca672cc968c38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5dc5fb2a55a771ebad2535e674d93cd13f81c39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5dc5fb2a55a771ebad2535e674d93cd13f81c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5dc5fb2a55a771ebad2535e674d93cd13f81c39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5dc5fb2a55a771ebad2535e674d93cd13f81c39/comments", "author": null, "committer": null, "parents": [{"sha": "1b8899d1a050991df240a26a928b4b21dae88504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b8899d1a050991df240a26a928b4b21dae88504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b8899d1a050991df240a26a928b4b21dae88504"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "6a75f237b42efa34a27f6e3969baa4f0977c0a0b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5dc5fb2a55a771ebad2535e674d93cd13f81c39/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5dc5fb2a55a771ebad2535e674d93cd13f81c39/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e5dc5fb2a55a771ebad2535e674d93cd13f81c39", "patch": "@@ -1,3 +1,10 @@\n+1999-04-13  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (cp_valid_lang_attribute): New fn.  Handle init_priority\n+\tand com_interface.\n+\t* cp-tree.h: Add prototype.\n+\t* decl.c (init_decl_processing): Set valid_lang_attribute.\n+\n 1999-04-13  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (finish_struct_1): Look at the const-ness of the field's"}, {"sha": "240e2b02b4d80779eb4c76cb99d104ab393c9237", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5dc5fb2a55a771ebad2535e674d93cd13f81c39/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5dc5fb2a55a771ebad2535e674d93cd13f81c39/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e5dc5fb2a55a771ebad2535e674d93cd13f81c39", "patch": "@@ -3372,6 +3372,7 @@ extern tree build_dummy_object\t\t\tPROTO((tree));\n extern tree maybe_dummy_object\t\t\tPROTO((tree, tree *));\n extern int is_dummy_object\t\t\tPROTO((tree));\n extern tree search_tree                         PROTO((tree, tree (*)(tree)));\n+extern int cp_valid_lang_attribute\t\tPROTO((tree, tree, tree, tree));\n \n #define scratchalloc expralloc\n #define scratch_tree_cons expr_tree_cons"}, {"sha": "0fcad724a1a5062d1259380e3eaa8194f9742666", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5dc5fb2a55a771ebad2535e674d93cd13f81c39/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5dc5fb2a55a771ebad2535e674d93cd13f81c39/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e5dc5fb2a55a771ebad2535e674d93cd13f81c39", "patch": "@@ -61,6 +61,7 @@ extern tree current_namespace;\n extern tree global_namespace;\n \n extern void (*print_error_function) PROTO((char *));\n+extern int (*valid_lang_attribute) PROTO ((tree, tree, tree, tree));\n \n /* Stack of places to restore the search obstack back to.  */\n    \n@@ -6723,6 +6724,7 @@ init_decl_processing ()\n \n   print_error_function = lang_print_error_function;\n   lang_get_alias_set = &c_get_alias_set;\n+  valid_lang_attribute = cp_valid_lang_attribute;\n \n   /* Maintain consistency.  Perhaps we should just complain if they\n      say -fwritable-strings?  */"}, {"sha": "7eceff1925ca06a456070ebf357d17dd914b3fba", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5dc5fb2a55a771ebad2535e674d93cd13f81c39/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5dc5fb2a55a771ebad2535e674d93cd13f81c39/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=e5dc5fb2a55a771ebad2535e674d93cd13f81c39", "patch": "@@ -2686,3 +2686,98 @@ pod_type_p (t)\n \n   return 1;\n }\n+\n+/* A list of objects which have constructors or destructors\n+   which reside in the global scope.  The decl is stored in\n+   the TREE_VALUE slot and the initializer is stored\n+   in the TREE_PURPOSE slot.  */\n+tree static_aggregates_initp;\n+\n+/* Return a 1 if ATTR_NAME and ATTR_ARGS denote a valid C++-specific\n+   attribute for either declaration DECL or type TYPE and 0 otherwise.\n+   Plugged into valid_lang_attribute.  */\n+\n+int\n+cp_valid_lang_attribute (attr_name, attr_args, decl, type)\n+  tree attr_name;\n+  tree attr_args ATTRIBUTE_UNUSED;\n+  tree decl ATTRIBUTE_UNUSED;\n+  tree type ATTRIBUTE_UNUSED;\n+{\n+  if (attr_name == get_identifier (\"com_interface\"))\n+    {\n+      if (! flag_vtable_thunks)\n+\t{\n+\t  error (\"`com_interface' only supported with -fvtable-thunks\");\n+\t  return 0;\n+\t}\n+\n+      if (attr_args != NULL_TREE\n+\t  || decl != NULL_TREE\n+\t  || ! CLASS_TYPE_P (type)\n+\t  || type != TYPE_MAIN_VARIANT (type))\n+\t{\n+\t  warning (\"`com_interface' attribute can only be applied to class definitions\");\n+\t  return 0;\n+\t}\n+\n+      CLASSTYPE_COM_INTERFACE (type) = 1;\n+      return 1;\n+    }\n+  else if (attr_name == get_identifier (\"init_priority\"))\n+    {\n+      tree initp_expr = (attr_args ? TREE_VALUE (attr_args): NULL_TREE);\n+      int pri;\n+\n+      if (initp_expr)\n+\tSTRIP_NOPS (initp_expr);\n+\t  \n+      if (!initp_expr || TREE_CODE (initp_expr) != INTEGER_CST)\n+\t{\n+\t  error (\"requested init_priority is not an integer constant\");\n+\t  return 0;\n+\t}\n+\n+      pri = TREE_INT_CST_LOW (initp_expr);\n+\t\n+      while (TREE_CODE (type) == ARRAY_TYPE)\n+\ttype = TREE_TYPE (type);\n+\n+      if (decl == NULL_TREE\n+\t  || TREE_CODE (decl) != VAR_DECL\n+\t  || ! TREE_STATIC (decl)\n+\t  || DECL_EXTERNAL (decl)\n+\t  || (TREE_CODE (type) != RECORD_TYPE\n+\t      && TREE_CODE (type) != UNION_TYPE)\n+\t  /* Static objects in functions are initialized the\n+\t     first time control passes through that\n+\t     function. This is not precise enough to pin down an\n+\t     init_priority value, so don't allow it. */\n+\t  || current_function_decl) \n+\t{\n+\t  error (\"can only use init_priority attribute on file-scope definitions of objects of class type\");\n+\t  return 0;\n+\t}\n+\n+      if (pri > MAX_INIT_PRIORITY || pri <= 0)\n+\t{\n+\t  error (\"requested init_priority is out of range\");\n+\t  return 0;\n+\t}\n+\n+      /* Check for init_priorities that are reserved for\n+\t language and runtime support implementations.*/\n+      if (pri <= MAX_RESERVED_INIT_PRIORITY)\n+\t{\n+\t  warning \n+\t    (\"requested init_priority is reserved for internal use\");\n+\t}\n+\n+      static_aggregates_initp\n+\t= perm_tree_cons (initp_expr, decl, static_aggregates_initp);\n+\n+      return 1;\n+    }\n+\n+  return 0;\n+}"}]}