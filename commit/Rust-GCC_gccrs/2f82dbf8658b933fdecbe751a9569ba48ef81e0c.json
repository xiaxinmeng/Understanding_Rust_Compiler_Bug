{"sha": "2f82dbf8658b933fdecbe751a9569ba48ef81e0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY4MmRiZjg2NThiOTMzZmRlY2JlNzUxYTk1NjliYTQ4ZWY4MWUwYw==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-04-18T23:37:15Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-04-18T23:37:15Z"}, "message": "sparc.h (BRANCH_COST): Define.\n\n2002-04-18  David S. Miller  <davem@redhat.com>\n\n\t* config/sparc/sparc.h (BRANCH_COST): Define.\n\n\t* fold-const.c (BRANCH_COST): Don't provide default here, expr.h\n\tdoes it.\n\nFrom-SVN: r52500", "tree": {"sha": "23071e279b2357667533e94c091bddb3aaeb7795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23071e279b2357667533e94c091bddb3aaeb7795"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f82dbf8658b933fdecbe751a9569ba48ef81e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f82dbf8658b933fdecbe751a9569ba48ef81e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f82dbf8658b933fdecbe751a9569ba48ef81e0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f82dbf8658b933fdecbe751a9569ba48ef81e0c/comments", "author": null, "committer": null, "parents": [{"sha": "566576e718cd3b186d65e3c61f06d502a8a18391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566576e718cd3b186d65e3c61f06d502a8a18391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/566576e718cd3b186d65e3c61f06d502a8a18391"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "e3eb77bd1c64d65a12adfddcc02049ff9a9c62b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f82dbf8658b933fdecbe751a9569ba48ef81e0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f82dbf8658b933fdecbe751a9569ba48ef81e0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f82dbf8658b933fdecbe751a9569ba48ef81e0c", "patch": "@@ -1,3 +1,10 @@\n+2002-04-18  David S. Miller  <davem@redhat.com>\n+\n+\t* config/sparc/sparc.h (BRANCH_COST): Define.\n+\n+\t* fold-const.c (BRANCH_COST): Don't provide default here, expr.h\n+\tdoes it.\n+\n 2002-04-18  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* flow.c (update_life_info): Ignore return value of cleanup_cfg."}, {"sha": "4552132743adb44cb17408e550d75b49e7eee942", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f82dbf8658b933fdecbe751a9569ba48ef81e0c/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f82dbf8658b933fdecbe751a9569ba48ef81e0c/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=2f82dbf8658b933fdecbe751a9569ba48ef81e0c", "patch": "@@ -2607,6 +2607,23 @@ do {                                                                    \\\n     || (CLASS1) == FPCC_REGS || (CLASS2) == FPCC_REGS)\t\t\\\n    ? (sparc_cpu == PROCESSOR_ULTRASPARC ? 12 : 6) : 2)\n \n+/* Provide the cost of a branch.  For pre-v9 processors we use\n+   a value of 3 to take into account the potential annulling of\n+   the delay slot (which ends up being a bubble in the pipeline slot)\n+   plus a cycle to take into consideration the instruction cache\n+   effects.\n+\n+   On v9 and later, which have branch prediction facilities, we set\n+   it to the depth of the pipeline as that is the cost of a\n+   mispredicted branch.\n+\n+   ??? Set to 9 when PROCESSOR_ULTRASPARC3 is added  */\n+\n+#define BRANCH_COST \\\n+\t((sparc_cpu == PROCESSOR_V9 \\\n+\t  || sparc_cpu == PROCESSOR_ULTRASPARC) \\\n+\t ? 7 : 3)\n+\n /* Provide the costs of a rtl expression.  This is in the body of a\n    switch on CODE.  The purpose for the cost of MULT is to encourage\n    `synth_mult' to find a synthetic multiply when reasonable."}, {"sha": "9429a4d695981541cd4cdeaf4b3f5e2916161a65", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f82dbf8658b933fdecbe751a9569ba48ef81e0c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f82dbf8658b933fdecbe751a9569ba48ef81e0c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2f82dbf8658b933fdecbe751a9569ba48ef81e0c", "patch": "@@ -106,10 +106,6 @@ static tree fold_binary_op_with_conditional_arg\n   PARAMS ((enum tree_code, tree, tree, tree, int));\n static bool fold_real_zero_addition_p\tPARAMS ((tree, tree, int));\n \t\t\t\t\t\t\t \n-#ifndef BRANCH_COST\n-#define BRANCH_COST 1\n-#endif\n-\n #if defined(HOST_EBCDIC)\n /* bit 8 is significant in EBCDIC */\n #define CHARMASK 0xff"}]}