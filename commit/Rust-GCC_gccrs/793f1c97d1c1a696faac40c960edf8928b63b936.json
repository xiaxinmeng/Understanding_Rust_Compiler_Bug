{"sha": "793f1c97d1c1a696faac40c960edf8928b63b936", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkzZjFjOTdkMWMxYTY5NmZhYWM0MGM5NjBlZGY4OTI4YjYzYjkzNg==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2011-10-07T15:00:06Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2011-10-07T15:00:06Z"}, "message": "predicates.md (shift_amount_operand): Remove constant range check.\n\n2011-10-07  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/arm/predicates.md (shift_amount_operand): Remove constant\n\trange check.\n\t(shift_operator): Check range of constants for all shift operators.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr50193-1.c: New file.\n\t* gcc.target/arm/shiftable.c: New file.\n\nFrom-SVN: r179662", "tree": {"sha": "6cf5f5a7911ed220f00b106c8df326337b9b708b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cf5f5a7911ed220f00b106c8df326337b9b708b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/793f1c97d1c1a696faac40c960edf8928b63b936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793f1c97d1c1a696faac40c960edf8928b63b936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793f1c97d1c1a696faac40c960edf8928b63b936", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793f1c97d1c1a696faac40c960edf8928b63b936/comments", "author": null, "committer": null, "parents": [{"sha": "55cdadd504277e112ab219032410781fa6356976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55cdadd504277e112ab219032410781fa6356976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55cdadd504277e112ab219032410781fa6356976"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "6abc9c4057086d0c9dfb20b9de319395aa0c5825", "filename": "gcc/testsuite/gcc.dg/pr50193-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793f1c97d1c1a696faac40c960edf8928b63b936/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50193-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793f1c97d1c1a696faac40c960edf8928b63b936/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50193-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50193-1.c?ref=793f1c97d1c1a696faac40c960edf8928b63b936", "patch": "@@ -0,0 +1,10 @@\n+/* PR 50193: ARM: ICE on a | (b << negative-constant) */\n+/* Ensure that the compiler doesn't ICE.  */\n+\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo(int a, int b)\n+{\n+  return a | (b << -3); /* { dg-warning \"left shift count is negative\" } */\n+}"}, {"sha": "f3080620a9e152d420636d2d9a1c0827c61e8ce8", "filename": "gcc/testsuite/gcc.target/arm/shiftable.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793f1c97d1c1a696faac40c960edf8928b63b936/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fshiftable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793f1c97d1c1a696faac40c960edf8928b63b936/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fshiftable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fshiftable.c?ref=793f1c97d1c1a696faac40c960edf8928b63b936", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target arm32 } */\n+\n+/* ARM has shift-and-alu insns.  Depending on the ALU op GCC represents some\n+   of these as a left shift, others as a multiply.  Check that we match the\n+    right one.  */\n+\n+int\n+plus (int a, int b)\n+{\n+  return (a * 64) + b;\n+}\n+\n+/* { dg-final { scan-assembler \"add.*\\[al]sl #6\" } } */\n+\n+int\n+minus (int a, int b)\n+{\n+  return a - (b * 64);\n+}\n+\n+/* { dg-final { scan-assembler \"sub.*\\[al]sl #6\" } } */\n+\n+int\n+ior (int a, int b)\n+{\n+  return (a * 64) | b;\n+}\n+\n+/* { dg-final { scan-assembler \"orr.*\\[al]sl #6\" } } */\n+\n+int\n+xor (int a, int b)\n+{\n+  return (a * 64) ^ b;\n+}\n+\n+/* { dg-final { scan-assembler \"eor.*\\[al]sl #6\" } } */\n+\n+int\n+and (int a, int b)\n+{\n+  return (a * 64) & b;\n+}\n+\n+/* { dg-final { scan-assembler \"and.*\\[al]sl #6\" } } */\n+\n+int\n+rsb (int a, int b)\n+{\n+  return (a * 64) - b;\n+}\n+\n+/* { dg-final { scan-assembler \"rsb.*\\[al]sl #6\" } } */\n+\n+int\n+mvn (int a, int b)\n+{\n+  return ~(a * 64);\n+}\n+\n+/* { dg-final { scan-assembler \"mvn.*\\[al]sl #6\" } } */"}]}