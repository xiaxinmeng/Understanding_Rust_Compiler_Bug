{"sha": "e1535fe0c5c04202d35b11c818205f5577870cc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE1MzVmZTBjNWMwNDIwMmQzNWIxMWM4MTgyMDVmNTU3Nzg3MGNjMQ==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2007-04-27T20:15:11Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2007-04-27T20:15:11Z"}, "message": "* intrinsic.texi (Transfer): Improve documentation.\n\nFrom-SVN: r124234", "tree": {"sha": "c5c97494a605a0fb8c9d5d6dd95793cdaa3b8929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5c97494a605a0fb8c9d5d6dd95793cdaa3b8929"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1535fe0c5c04202d35b11c818205f5577870cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1535fe0c5c04202d35b11c818205f5577870cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1535fe0c5c04202d35b11c818205f5577870cc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1535fe0c5c04202d35b11c818205f5577870cc1/comments", "author": null, "committer": null, "parents": [{"sha": "67948fd24a1f2f7bc6cb4a1f0dc00d1fa9d04dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67948fd24a1f2f7bc6cb4a1f0dc00d1fa9d04dc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67948fd24a1f2f7bc6cb4a1f0dc00d1fa9d04dc5"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "0266e54da4faec20140b6be355275e0d4c155caa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1535fe0c5c04202d35b11c818205f5577870cc1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1535fe0c5c04202d35b11c818205f5577870cc1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e1535fe0c5c04202d35b11c818205f5577870cc1", "patch": "@@ -1,3 +1,7 @@\n+2007-04-27  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\t* intrinsic.texi (Transfer): Improve documentation.\n+\n 2007-04-27  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* gfortran.texi (Option Index): Add @samp as needed."}, {"sha": "011d2b844de135d881ed191ca2d74d7ac754148a", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1535fe0c5c04202d35b11c818205f5577870cc1/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1535fe0c5c04202d35b11c818205f5577870cc1/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=e1535fe0c5c04202d35b11c818205f5577870cc1", "patch": "@@ -9527,10 +9527,12 @@ See @code{HUGE} for an example.\n \n @table @asis\n @item @emph{Description}:\n-Interprets the bit pattern of @var{SOURCE} as a variable of the \n-same type and type parameters as @var{MOLD}.\n+Interprets the bitwise representation of @var{SOURCE} in memory as if it\n+is the representation of a variable or array of the same type and type\n+parameters as @var{MOLD}.\n \n-This is also known as @emph{casting} one type to another.\n+This is approximately equivalent to the C concept of @emph{casting} one\n+type to another.\n \n @item @emph{Standard}:\n F95 and later\n@@ -9545,13 +9547,29 @@ Transformational function\n @multitable @columnfractions .15 .70\n @item @var{SOURCE} @tab Shall be a scalar or an array of any type.\n @item @var{MOLD}   @tab Shall be a scalar or an array of any type.\n-@item @var{SIZE}   @tab (Optional) shall be a scalar and of type \n+@item @var{SIZE}   @tab (Optional) shall be a scalar of type \n @code{INTEGER}.\n @end multitable\n \n @item @emph{Return value}:\n-The result has the same type as @var{MOLD} with the bit level \n-representation of @var{SOURCE}.\n+The result has the same type as @var{MOLD}, with the bit level\n+representation of @var{SOURCE}.  If @var{SIZE} is present, the result is\n+a one-dimensional array of length @var{SIZE}.  If @var{SIZE} is absent\n+but @var{MOLD} is an array (of any size or shape), the result is a one-\n+dimensional array of the minimum length needed to contain the entirety\n+of the bitwise representation of @var{SOURCE}.   If @var{SIZE} is absent\n+and @var{MOLD} is a scalar, the result is a scalar.\n+\n+If the bitwise representation of the result is longer than that of\n+@var{SOURCE}, then the leading bits of the result correspond to those of\n+@var{SOURCE} and any trailing bits are filled arbitrarily.\n+\n+When the resulting bit representation does not correspond to a valid\n+representation of a variable of the same type as @var{MOLD}, the results\n+are undefined, and subsequent operations on the result cannot be\n+guaranteed to produce sensible behavior.  For example, it is possible to\n+create @code{LOGICAL} variables for which @code{@var{VAR}} and\n+@code{.NOT.@var{VAR}} both appear to be true.\n \n @item @emph{Example}:\n @smallexample"}]}