{"sha": "b2230210f1742ddf5e863172ff86531019d1039e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIyMzAyMTBmMTc0MmRkZjVlODYzMTcyZmY4NjUzMTAxOWQxMDM5ZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-12T10:27:34Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-12T11:55:17Z"}, "message": "gcov: add more debugging facility\n\ngcc/ChangeLog:\n\n\t* gcov.c (source_info::debug): New.\n\t(print_usage): Add --debug (-D) option.\n\t(process_args): Likewise.\n\t(generate_results): Call src->debug after\n\taccumulate_line_counts.\n\t(read_graph_file): Properly assign id for EXIT_BLOCK.\n\t* profile.c (branch_prob): Dump function body before it is\n\tinstrumented.", "tree": {"sha": "bb2f984ae415d97a03105fd41e9ffa128fc95cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb2f984ae415d97a03105fd41e9ffa128fc95cbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2230210f1742ddf5e863172ff86531019d1039e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2230210f1742ddf5e863172ff86531019d1039e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2230210f1742ddf5e863172ff86531019d1039e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2230210f1742ddf5e863172ff86531019d1039e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ea113f75cfad38894dc1ad16b23c0538ef17d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24ea113f75cfad38894dc1ad16b23c0538ef17d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24ea113f75cfad38894dc1ad16b23c0538ef17d4"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "93128721ef6ca854af720fffc17b4b8c45200aa7", "filename": "gcc/gcov.c", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2230210f1742ddf5e863172ff86531019d1039e/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2230210f1742ddf5e863172ff86531019d1039e/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=b2230210f1742ddf5e863172ff86531019d1039e", "patch": "@@ -371,6 +371,9 @@ class source_info\n   /* Register a new function.  */\n   void add_function (function_info *fn);\n \n+  /* Debug the source file.  */\n+  void debug ();\n+\n   /* Index of the source_info in sources vector.  */\n   unsigned index;\n \n@@ -428,6 +431,31 @@ source_info::get_functions_at_location (unsigned line_num) const\n   return slot;\n }\n \n+void source_info::debug ()\n+{\n+  fprintf (stderr, \"source_info: %s\\n\", name);\n+  for (vector<function_info *>::iterator it = functions.begin ();\n+       it != functions.end (); it++)\n+    {\n+      function_info *fn = *it;\n+      fprintf (stderr, \"  function_info: %s\\n\", fn->get_name ());\n+      for (vector<block_info>::iterator bit = fn->blocks.begin ();\n+\t   bit != fn->blocks.end (); bit++)\n+\t{\n+\t  fprintf (stderr, \"    block_info id=%d, count=%ld\\n\",\n+\t\t   bit->id, bit->count);\n+\t}\n+    }\n+\n+  for (unsigned lineno = 1; lineno < lines.size (); ++lineno)\n+    {\n+      line_info &line = lines[lineno];\n+      fprintf (stderr, \"  line_info=%d, count=%ld\\n\", lineno, line.count);\n+    }\n+\n+  fprintf (stderr, \"\\n\");\n+}\n+\n class name_map\n {\n public:\n@@ -579,6 +607,10 @@ static int flag_human_readable_numbers = 0;\n \n static int flag_function_summary = 0;\n \n+/* Print debugging dumps.  */\n+\n+static int flag_debug = 0;\n+\n /* Object directory file prefix.  This is the directory/file where the\n    graph and data files are looked for, if nonzero.  */\n \n@@ -896,6 +928,7 @@ print_usage (int error_p)\n   fnotice (file, \"  -c, --branch-counts             Output counts of branches taken\\n\\\n                                     rather than percentages\\n\");\n   fnotice (file, \"  -d, --display-progress          Display progress information\\n\");\n+  fnotice (file, \"  -D, --debug\t\t\t    Display debugging dumps\\n\");\n   fnotice (file, \"  -f, --function-summaries        Output summaries for each function\\n\");\n   fnotice (file, \"  -h, --help                      Print this help, then exit\\n\");\n   fnotice (file, \"  -j, --json-format               Output JSON intermediate format\\n\\\n@@ -963,6 +996,7 @@ static const struct option options[] =\n   { \"hash-filenames\",\t    no_argument,       NULL, 'x' },\n   { \"use-colors\",\t    no_argument,       NULL, 'k' },\n   { \"use-hotness-colors\",   no_argument,       NULL, 'q' },\n+  { \"debug\",\t\t    no_argument,       NULL, 'D' },\n   { 0, 0, 0, 0 }\n };\n \n@@ -973,7 +1007,7 @@ process_args (int argc, char **argv)\n {\n   int opt;\n \n-  const char *opts = \"abcdfhHijklmno:pqrs:tuvwx\";\n+  const char *opts = \"abcdDfhHijklmno:pqrs:tuvwx\";\n   while ((opt = getopt_long (argc, argv, opts, options, NULL)) != -1)\n     {\n       switch (opt)\n@@ -1044,6 +1078,9 @@ process_args (int argc, char **argv)\n \tcase 't':\n \t  flag_use_stdout = 1;\n \t  break;\n+\tcase 'D':\n+\t  flag_debug = 1;\n+\t  break;\n \tcase 'v':\n \t  print_version ();\n \t  /* print_version will exit.  */\n@@ -1466,6 +1503,8 @@ generate_results (const char *file_name)\n \t}\n \n       accumulate_line_counts (src);\n+      if (flag_debug)\n+\tsrc->debug ();\n \n       if (!flag_use_stdout)\n \tfile_summary (&src->coverage);\n@@ -1804,6 +1843,8 @@ read_graph_file (void)\n \t      arc = XCNEW (arc_info);\n \n \t      arc->dst = &fn->blocks[dest];\n+\t      /* Set id in order to find EXIT_BLOCK.  */\n+\t      arc->dst->id = dest;\n \t      arc->src = src_blk;\n \n \t      arc->count = 0;"}, {"sha": "1f1d60c818014b929fc3b71a019ed11d11788838", "filename": "gcc/profile.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2230210f1742ddf5e863172ff86531019d1039e/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2230210f1742ddf5e863172ff86531019d1039e/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=b2230210f1742ddf5e863172ff86531019d1039e", "patch": "@@ -1294,6 +1294,11 @@ branch_prob (bool thunk)\n   if (dump_file)\n     fprintf (dump_file, \"%d instrumentation edges\\n\", num_instrumented);\n \n+  /* Dump function body before it's instrumented.\n+     It helps to debug gcov tool.  */\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    dump_function_to_file (cfun->decl, dump_file, dump_flags);\n+\n   /* Compute two different checksums. Note that we want to compute\n      the checksum in only once place, since it depends on the shape\n      of the control flow which can change during "}]}