{"sha": "df35498ae56e297e0de7279127cab265e71fc2d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYzNTQ5OGFlNTZlMjk3ZTBkZTcyNzkxMjdjYWIyNjVlNzFmYzJkMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-05-14T08:41:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-05-14T08:41:14Z"}, "message": "re PR middle-end/57235 (ICE verify_ssa failied)\n\n2013-05-14  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/57235\n\t* tree-eh.c (sink_clobbers): Give up for successors with\n\tmultiple predecessors and no virtual uses.\n\n\t* g++.dg/torture/pr57235.C: New testcase.\n\nFrom-SVN: r198863", "tree": {"sha": "e2758f55604b98ac19e1ac0628d449bd797c8d7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2758f55604b98ac19e1ac0628d449bd797c8d7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df35498ae56e297e0de7279127cab265e71fc2d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df35498ae56e297e0de7279127cab265e71fc2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df35498ae56e297e0de7279127cab265e71fc2d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df35498ae56e297e0de7279127cab265e71fc2d2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc6e7ecebfe763429ea4d089948c9fd26dc04c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6e7ecebfe763429ea4d089948c9fd26dc04c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc6e7ecebfe763429ea4d089948c9fd26dc04c3c"}], "stats": {"total": 183, "additions": 182, "deletions": 1}, "files": [{"sha": "f225d8057658830a585ee963a3cf56ba69cab718", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df35498ae56e297e0de7279127cab265e71fc2d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df35498ae56e297e0de7279127cab265e71fc2d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df35498ae56e297e0de7279127cab265e71fc2d2", "patch": "@@ -1,3 +1,9 @@\n+2013-05-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57235\n+\t* tree-eh.c (sink_clobbers): Give up for successors with\n+\tmultiple predecessors and no virtual uses.\n+\n 2013-05-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sp64-elf.h (CPP_SUBTARGET_SPEC): Delete."}, {"sha": "0f7e1296f4a7495e282b566d9d4e05a1c7f9256c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df35498ae56e297e0de7279127cab265e71fc2d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df35498ae56e297e0de7279127cab265e71fc2d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df35498ae56e297e0de7279127cab265e71fc2d2", "patch": "@@ -1,3 +1,8 @@\n+2013-05-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57235\n+\t* g++.dg/torture/pr57235.C: New testcase.\n+\n 2013-05-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/57251"}, {"sha": "fd5663348e91dbc5f703cdf2647957fb5ac267f9", "filename": "gcc/testsuite/g++.dg/torture/pr57235.C", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df35498ae56e297e0de7279127cab265e71fc2d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr57235.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df35498ae56e297e0de7279127cab265e71fc2d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr57235.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr57235.C?ref=df35498ae56e297e0de7279127cab265e71fc2d2", "patch": "@@ -0,0 +1,156 @@\n+// { dg-do compile }\n+\n+namespace std\n+{\n+  template < class _Elem > struct char_traits\n+  {\n+  };\n+  struct _Container_base\n+  {\n+  };\n+    template < class _Ty > struct _Allocator_base\n+  {\n+  };\n+    template < class _Ty > class allocator:public _Allocator_base < _Ty >\n+  {\n+  };\n+  class _String_base:public _Container_base\n+  {\n+  };\n+template < class _Ty, class _Alloc > class _String_val:public _String_base\n+  {\n+  };\n+template < class _Elem, class _Traits, class _Ax > class basic_string:public _String_val < _Elem,\n+    _Ax\n+    >\n+  {\n+  public:typedef basic_string < _Elem, _Traits, _Ax > _Myt;\n+    typedef _String_val < _Elem, _Ax > _Mybase;\n+    basic_string (const _Elem * _Ptr):_Mybase ()\n+    {\n+    }\n+  };\n+  typedef basic_string < char, char_traits < char >,\n+    allocator < char > >string;\n+}\n+\n+\n+namespace google\n+{\n+  namespace protobuf\n+  {\n+    namespace internal\n+    {\n+      template < class C > class scoped_ptr\n+      {\n+      public:typedef C element_type;\n+      explicit scoped_ptr (C * p = __null):ptr_ (p)\n+\t{\n+\t}\n+\t ~scoped_ptr ()\n+\t{\n+\t  delete ptr_;\n+\t}\n+\tC *get () const\n+\t{\n+\t  return ptr_;\n+\t}\n+      private:  C * ptr_;\n+      };\n+    }\n+    using internal::scoped_ptr;\n+    enum LogLevel\n+    {\n+      LOGLEVEL_INFO, LOGLEVEL_WARNING, LOGLEVEL_ERROR, LOGLEVEL_FATAL,\n+\tLOGLEVEL_DFATAL = LOGLEVEL_ERROR\n+    };\n+    namespace internal\n+    {\n+      class LogMessage\n+      {\n+      public:LogMessage (LogLevel level, const char *filename,\n+\t\t    int line);\n+\t ~LogMessage ();\n+\t  LogMessage & operator<< (const std::string & value);\n+      };\n+      class LogFinisher\n+      {\n+      public:void operator= (LogMessage & other);\n+      };\n+    }\n+    using namespace std;\n+    class Descriptor\n+    {\n+    };\n+    class FieldDescriptor\n+    {\n+    public:\n+      const Descriptor *message_type () const;\n+      string DebugString () const;\n+    };\n+    class MessageLite\n+    {\n+    };\n+    class Message:public MessageLite\n+    {\n+    public:inline Message ()\n+      {\n+      }\n+      virtual ~ Message ();\n+      virtual Message *New () const = 0;\n+    };\n+    class MessageFactory\n+    {\n+    };\n+    class UnknownFieldSet\n+    {\n+    };\n+    class DynamicMessageFactory:public MessageFactory\n+    {\n+    public:DynamicMessageFactory ();\n+      const Message *GetPrototype (const Descriptor * type);\n+    };\n+    namespace io\n+    {\n+      class ErrorCollector\n+      {\n+      public:inline ErrorCollector ()\n+\t{\n+\t}\n+\tvirtual ~ ErrorCollector ();\n+      };\n+    }\n+    class DescriptorBuilder\n+    {\n+      class OptionInterpreter\n+      {\n+\tbool SetAggregateOption (const FieldDescriptor * option_field,\n+\t\t\t\t UnknownFieldSet * unknown_fields);\n+\tDynamicMessageFactory dynamic_factory_;\n+      };\n+    };\n+    namespace\n+    {\n+      class AggregateErrorCollector:public io::ErrorCollector\n+      {\n+      };\n+    }\n+    bool DescriptorBuilder::OptionInterpreter::\n+      SetAggregateOption (const FieldDescriptor * option_field,\n+\t\t\t  UnknownFieldSet * unknown_fields)\n+    {\n+      const Descriptor *type = option_field->message_type ();\n+      scoped_ptr < Message >\n+\tdynamic (dynamic_factory_.GetPrototype (type)->New ());\n+      !(!(dynamic.get () !=\n+\t  __null)) ? (void) 0 : ::google::protobuf::internal::\n+\tLogFinisher () =::google::protobuf::internal::LogMessage (::google::\n+\t\t\t\t\t\t\t\t  protobuf::\n+\t\t\t\t\t\t\t\t  LOGLEVEL_FATAL,\n+\t\t\t\t\t\t\t\t  \"descriptor.cc\",\n+\t\t\t\t\t\t\t\t  4396) <<\n+\toption_field->DebugString ();\n+      AggregateErrorCollector collector;\n+    }\n+  }\n+}"}, {"sha": "fc350bd945f7da9ff5b6ff69fc0a7aa6c5cac8fe", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df35498ae56e297e0de7279127cab265e71fc2d2/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df35498ae56e297e0de7279127cab265e71fc2d2/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=df35498ae56e297e0de7279127cab265e71fc2d2", "patch": "@@ -3312,6 +3312,7 @@ sink_clobbers (basic_block bb)\n   gimple_stmt_iterator gsi, dgsi;\n   basic_block succbb;\n   bool any_clobbers = false;\n+  unsigned todo = 0;\n \n   /* Only optimize if BB has a single EH successor and\n      all predecessor edges are EH too.  */\n@@ -3410,9 +3411,22 @@ sink_clobbers (basic_block bb)\n \t  SET_USE (PHI_ARG_DEF_PTR_FROM_EDGE (vphi, succe), gimple_vuse (stmt));\n \t  SET_USE (gimple_vuse_op (stmt), vuse);\n \t}\n+      /* If there isn't a single predecessor but no virtual PHI node\n+         arrange for virtual operands to be renamed.  */\n+      else if (gimple_vuse_op (stmt) != NULL_USE_OPERAND_P\n+\t       && !single_pred_p (succbb))\n+\t{\n+\t  /* In this case there will be no use of the VDEF of this stmt. \n+\t     ???  Unless this is a secondary opportunity and we have not\n+\t     removed unreachable blocks yet, so we cannot assert this.  \n+\t     Which also means we will end up renaming too many times.  */\n+\t  SET_USE (gimple_vuse_op (stmt), gimple_vop (cfun));\n+\t  mark_virtual_operands_for_renaming (cfun);\n+\t  todo |= TODO_update_ssa_only_virtuals;\n+\t}\n     }\n \n-  return 0;\n+  return todo;\n }\n \n /* At the end of inlining, we can lower EH_DISPATCH.  Return true when "}]}