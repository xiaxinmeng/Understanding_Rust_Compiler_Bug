{"sha": "cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MyYmE4ZTMwZmE3Mzc4ZTVmMGU0YTc0NzMyODdjOTE4ZDdkYjY2Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-07-25T17:08:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-07-25T17:08:48Z"}, "message": "re PR libstdc++/49836 ([C++0x] vector<T>::push_back() should not require T to be (move-)assignable)\n\n2011-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\t    Nathan Ridge  <zeratul976@hotmail.com>\n\n\tPR libstdc++/49836\n\t* include/bits/stl_vector.h (vector<>::_M_emplace_back_aux):\n\tDeclare.\n\t(vector<>::push_back(const value_type&)): Use it.\n\t* include/bits/vector.tcc: Define.\n\t(vector<>::emplace_back(_Args&&...)): Use it.\n\t* testsuite/util/testsuite_tr1.h (CopyConsOnlyType, MoveConsOnlyType):\n\tAdd.\n\t* testsuite/23_containers/vector/modifiers/push_back/49836.cc: New.\n\t* testsuite/23_containers/deque/modifiers/push_back/49836.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/modifiers/push_front/49836.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line number.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nCo-Authored-By: Nathan Ridge <zeratul976@hotmail.com>\n\nFrom-SVN: r176761", "tree": {"sha": "8bf7168be80b73a3be6683e8ecbc408f74f347c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bf7168be80b73a3be6683e8ecbc408f74f347c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/comments", "author": null, "committer": null, "parents": [{"sha": "8175c19c1ba6e51ea44e00ea4bff5a3725ddbddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8175c19c1ba6e51ea44e00ea4bff5a3725ddbddb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8175c19c1ba6e51ea44e00ea4bff5a3725ddbddb"}], "stats": {"total": 255, "additions": 250, "deletions": 5}, "files": [{"sha": "79db713ff5b409351b55bca609568d7c4db6e664", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "patch": "@@ -1,3 +1,28 @@\n+2011-07-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t    Nathan Ridge  <zeratul976@hotmail.com>\n+\n+\tPR libstdc++/49836\n+\t* include/bits/stl_vector.h (vector<>::_M_emplace_back_aux):\n+\tDeclare.\n+\t(vector<>::push_back(const value_type&)): Use it.\n+\t* include/bits/vector.tcc: Define.\n+\t(vector<>::emplace_back(_Args&&...)): Use it.\n+\t* testsuite/util/testsuite_tr1.h (CopyConsOnlyType, MoveConsOnlyType):\n+\tAdd.\n+\t* testsuite/23_containers/vector/modifiers/push_back/49836.cc: New.\n+\t* testsuite/23_containers/deque/modifiers/push_back/49836.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/modifiers/push_front/49836.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line number.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2011-07-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/hashtable_policy.h (_Prime_rehash_policy::_M_next_bkt,"}, {"sha": "601459b3eafb0e935cd1fe5c8bff554ce224d0e4", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "patch": "@@ -902,7 +902,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    ++this->_M_impl._M_finish;\n \t  }\n \telse\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\t  _M_emplace_back_aux(__x);\n+#else\n \t  _M_insert_aux(end(), __x);\n+#endif\n       }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n@@ -1303,6 +1307,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename... _Args>\n         void\n         _M_insert_aux(iterator __position, _Args&&... __args);\n+\n+      template<typename... _Args>\n+        void\n+        _M_emplace_back_aux(_Args&&... __args);\n #endif\n \n       // Called by the latter."}, {"sha": "ba98c7cb07ebd1aa7c319e441b3fa0f218507b4b", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "patch": "@@ -99,7 +99,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    ++this->_M_impl._M_finish;\n \t  }\n \telse\n-\t  _M_insert_aux(end(), std::forward<_Args>(__args)...);\n+\t  _M_emplace_back_aux(std::forward<_Args>(__args)...);\n       }\n #endif\n \n@@ -387,6 +387,50 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n     }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Tp, typename _Alloc>\n+    template<typename... _Args>\n+      void\n+      vector<_Tp, _Alloc>::\n+      _M_emplace_back_aux(_Args&&... __args)\n+      {\n+\tconst size_type __len =\n+\t  _M_check_len(size_type(1), \"vector::_M_emplace_back_aux\");\n+\tpointer __new_start(this->_M_allocate(__len));\n+\tpointer __new_finish(__new_start);\n+\t__try\n+\t  {\n+\t    _Alloc_traits::construct(this->_M_impl, __new_start + size(),\n+\t\t\t\t     std::forward<_Args>(__args)...);\n+\t    __new_finish = 0;\n+\n+\t    __new_finish\n+\t      = std::__uninitialized_move_if_noexcept_a\n+\t      (this->_M_impl._M_start, this->_M_impl._M_finish,\n+\t       __new_start, _M_get_Tp_allocator());\n+\n+\t    ++__new_finish;\n+\t  }\n+\t__catch(...)\n+\t  {\n+\t    if (!__new_finish)\n+\t      _Alloc_traits::destroy(this->_M_impl, __new_start + size());\n+\t    else\n+\t      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());\n+\t    _M_deallocate(__new_start, __len);\n+\t    __throw_exception_again;\n+\t  }\n+\tstd::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n+\t\t      _M_get_Tp_allocator());\n+\t_M_deallocate(this->_M_impl._M_start,\n+\t\t      this->_M_impl._M_end_of_storage\n+\t\t      - this->_M_impl._M_start);\n+\tthis->_M_impl._M_start = __new_start;\n+\tthis->_M_impl._M_finish = __new_finish;\n+\tthis->_M_impl._M_end_of_storage = __new_start + __len;\n+      }\n+#endif\n+\n   template<typename _Tp, typename _Alloc>\n     void\n     vector<_Tp, _Alloc>::"}, {"sha": "290a191c26ea1357c8e8b3511c7a433550a1b5a3", "filename": "libstdc++-v3/testsuite/23_containers/deque/modifiers/push_back/49836.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fpush_back%2F49836.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fpush_back%2F49836.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fpush_back%2F49836.cc?ref=cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+// libstdc++/49836\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using __gnu_test::CopyConsOnlyType;\n+  using __gnu_test::MoveConsOnlyType;\n+\n+  std::deque<CopyConsOnlyType> d1;\n+  CopyConsOnlyType t1(1);\n+  d1.push_back(t1);\n+  d1.push_back(t1);\n+  d1.push_back(t1);\n+  VERIFY( d1.size() == 3 );\n+\n+  std::deque<MoveConsOnlyType> d2;\n+  MoveConsOnlyType t2(1);\n+  d2.push_back(std::move(t2));\n+  d2.push_back(std::move(t2));\n+  d2.push_back(std::move(t2));\n+  VERIFY( d2.size() == 3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b481aff3bc81fc94a93ed4f894402b9a1fd54d9f", "filename": "libstdc++-v3/testsuite/23_containers/deque/modifiers/push_front/49836.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fpush_front%2F49836.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fpush_front%2F49836.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fpush_front%2F49836.cc?ref=cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+// libstdc++/49836\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using __gnu_test::CopyConsOnlyType;\n+  using __gnu_test::MoveConsOnlyType;\n+\n+  std::deque<CopyConsOnlyType> d1;\n+  CopyConsOnlyType t1(1);\n+  d1.push_front(t1);\n+  d1.push_front(t1);\n+  d1.push_front(t1);\n+  VERIFY( d1.size() == 3 );\n+\n+  std::deque<MoveConsOnlyType> d2;\n+  MoveConsOnlyType t2(1);\n+  d2.push_front(std::move(t2));\n+  d2.push_front(std::move(t2));\n+  d2.push_front(std::move(t2));\n+  VERIFY( d2.size() == 3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0a6426ad540b243644ac4d04dbef3fc2111c4d28", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/push_back/49836.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2F49836.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2F49836.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fpush_back%2F49836.cc?ref=cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+// libstdc++/49836\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using __gnu_test::CopyConsOnlyType;\n+  using __gnu_test::MoveConsOnlyType;\n+\n+  std::vector<CopyConsOnlyType> v1;\n+  CopyConsOnlyType t1(1);\n+  v1.push_back(t1);\n+  v1.push_back(t1);\n+  v1.push_back(t1);\n+  VERIFY( v1.size() == 3 );\n+\n+  std::vector<MoveConsOnlyType> v2;\n+  MoveConsOnlyType t2(1);\n+  v2.push_back(std::move(t2));\n+  v2.push_back(std::move(t2));\n+  v2.push_back(std::move(t2));\n+  VERIFY( v2.size() == 3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "55b9096d768b58eba0d1a5ebaf07094cf548fe5a", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1218 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1222 }\n \n #include <vector>\n "}, {"sha": "6ea2c6f114512d9edd2590c4bb4d8a6e1ac5aa38", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1148 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1152 }\n \n #include <vector>\n "}, {"sha": "75b5bd6d21822c5fa1c0a829243e4efed2f77d9e", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1148 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1152 }\n \n #include <vector>\n #include <utility>"}, {"sha": "d93de19d486b6f1243d0369cd88562e9514413d1", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1259 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1263 }\n \n #include <vector>\n "}, {"sha": "94207a6e63de17299852738a2d5ff68fbab055b2", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2ba8e30fa7378e5f0e4a7473287c918d7db663/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=cc2ba8e30fa7378e5f0e4a7473287c918d7db663", "patch": "@@ -696,6 +696,24 @@ namespace __gnu_test\n       MO& operator=(MO&&) = default;\n     };\n   }\n+\n+  struct CopyConsOnlyType\n+  {\n+    CopyConsOnlyType(int) { }\n+    CopyConsOnlyType(CopyConsOnlyType&&) = delete;\n+    CopyConsOnlyType(const CopyConsOnlyType&) = default;\n+    CopyConsOnlyType& operator=(const CopyConsOnlyType&) = delete;\n+    CopyConsOnlyType& operator=(CopyConsOnlyType&&) = delete;\n+  };\n+\n+  struct MoveConsOnlyType\n+  {\n+    MoveConsOnlyType(int) { }\n+    MoveConsOnlyType(const MoveConsOnlyType&) = delete;\n+    MoveConsOnlyType(MoveConsOnlyType&&) = default;\n+    MoveConsOnlyType& operator=(const MoveConsOnlyType&) = delete;\n+    MoveConsOnlyType& operator=(MoveConsOnlyType&&) = delete;\n+  };\n #endif\n \n } // namespace __gnu_test"}]}