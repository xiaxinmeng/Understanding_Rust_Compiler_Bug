{"sha": "cb5ca3151b583084caa29fc547a2d261cf8fad2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I1Y2EzMTUxYjU4MzA4NGNhYTI5ZmM1NDdhMmQyNjFjZjhmYWQyZA==", "commit": {"author": {"name": "David Sherwood", "email": "david.sherwood@arm.com", "date": "2015-07-30T13:06:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-07-30T13:06:25Z"}, "message": "aarch64-simd.md (aarch64_ext<mode>): Replace call to GET_MODE_SIZE (GET_MODE_INNER (m)) with GET_MODE_UNIT_SIZE (m).\n\ngcc/\n2015-07-30  David Sherwood  <david.sherwood@arm.com>\n\n\t* config/aarch64/aarch64-simd.md (aarch64_ext<mode>): Replace call to\n\tGET_MODE_SIZE (GET_MODE_INNER (m)) with GET_MODE_UNIT_SIZE (m).\n\t* config/aarch64/aarch64.c (aarch64_simd_valid_immediate): Likewise.\n\t* config/arm/arm.c (neon_valid_immediate): Likewise.\n\t* config/i386/i386.c (classify_argument, ix86_expand_int_vcond)\n\t(expand_vec_perm_blend, expand_vec_perm_pshufb): Likewise.\n\t(expand_vec_perm_pshufb2, expand_vec_perm_vpshufb2_vpermq): Likewise.\n\t(expand_vec_perm_vpshufb2_vpermq): Likewise.\n\t(expand_vec_perm_vpshufb2_vpermq_even_odd): Likewise.\n\t(expand_vec_perm_vpshufb4_vpermq2): Likewise.\n\t* config/i386/sse.md\n\t(<extract_type>_vinsert<shuffletype><extract_suf>_mask): Likewise.\n\t(*ssse3_palignr<mode>_perm): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_complex_function_value): Likewise.\n\t* config/spu/spu.c (arith_immediate_p): Likewise.\n\t* simplify-rtx.c (simplify_const_unary_operation): Likewise.\n\t(simplify_binary_operation_1, simplify_ternary_operation): Likewise.\n\nFrom-SVN: r226403", "tree": {"sha": "2139b9ceffdba14e7d2c3b63de0d0198a14db3a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2139b9ceffdba14e7d2c3b63de0d0198a14db3a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb5ca3151b583084caa29fc547a2d261cf8fad2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb5ca3151b583084caa29fc547a2d261cf8fad2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb5ca3151b583084caa29fc547a2d261cf8fad2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb5ca3151b583084caa29fc547a2d261cf8fad2d/comments", "author": {"login": "david-arm", "id": 57997763, "node_id": "MDQ6VXNlcjU3OTk3NzYz", "avatar_url": "https://avatars.githubusercontent.com/u/57997763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/david-arm", "html_url": "https://github.com/david-arm", "followers_url": "https://api.github.com/users/david-arm/followers", "following_url": "https://api.github.com/users/david-arm/following{/other_user}", "gists_url": "https://api.github.com/users/david-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/david-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/david-arm/subscriptions", "organizations_url": "https://api.github.com/users/david-arm/orgs", "repos_url": "https://api.github.com/users/david-arm/repos", "events_url": "https://api.github.com/users/david-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/david-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "155bfacbbeee09bc39465141fb7f47e309c31fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/155bfacbbeee09bc39465141fb7f47e309c31fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/155bfacbbeee09bc39465141fb7f47e309c31fb6"}], "stats": {"total": 89, "additions": 53, "deletions": 36}, "files": [{"sha": "49983dc9cb940404fc5ce3cb85b18b324820bd98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb5ca3151b583084caa29fc547a2d261cf8fad2d", "patch": "@@ -1,3 +1,23 @@\n+2015-07-30  David Sherwood  <david.sherwood@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_ext<mode>): Replace call to\n+\tGET_MODE_SIZE (GET_MODE_INNER (m)) with GET_MODE_UNIT_SIZE (m).\n+\t* config/aarch64/aarch64.c (aarch64_simd_valid_immediate): Likewise.\n+\t* config/arm/arm.c (neon_valid_immediate): Likewise.\n+\t* config/i386/i386.c (classify_argument, ix86_expand_int_vcond)\n+\t(expand_vec_perm_blend, expand_vec_perm_pshufb): Likewise.\n+\t(expand_vec_perm_pshufb2, expand_vec_perm_vpshufb2_vpermq): Likewise.\n+\t(expand_vec_perm_vpshufb2_vpermq): Likewise.\n+\t(expand_vec_perm_vpshufb2_vpermq_even_odd): Likewise.\n+\t(expand_vec_perm_vpshufb4_vpermq2): Likewise.\n+\t* config/i386/sse.md\n+\t(<extract_type>_vinsert<shuffletype><extract_suf>_mask): Likewise.\n+\t(*ssse3_palignr<mode>_perm): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_complex_function_value): Likewise.\n+\t* config/spu/spu.c (arith_immediate_p): Likewise.\n+\t* simplify-rtx.c (simplify_const_unary_operation): Likewise.\n+\t(simplify_binary_operation_1, simplify_ternary_operation): Likewise.\n+\n 2015-07-30  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (decision_tree::gen_gimple): Merge with ..."}, {"sha": "97774181fab11b846d40c3981e2d1f9ea4891337", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=cb5ca3151b583084caa29fc547a2d261cf8fad2d", "patch": "@@ -4752,7 +4752,7 @@\n   \"TARGET_SIMD\"\n {\n   operands[3] = GEN_INT (INTVAL (operands[3])\n-      * GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)));\n+      * GET_MODE_UNIT_SIZE (<MODE>mode));\n   return \"ext\\\\t%0.<Vbtype>, %1.<Vbtype>, %2.<Vbtype>, #%3\";\n }\n   [(set_attr \"type\" \"neon_ext<q>\")]"}, {"sha": "2b1ae36f7f079d6b64ecd8a139a9dffce2edf727", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=cb5ca3151b583084caa29fc547a2d261cf8fad2d", "patch": "@@ -8916,7 +8916,7 @@ aarch64_simd_valid_immediate (rtx op, machine_mode mode, bool inverse,\n     }\n \n   unsigned int i, elsize = 0, idx = 0, n_elts = CONST_VECTOR_NUNITS (op);\n-  unsigned int innersize = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+  unsigned int innersize = GET_MODE_UNIT_SIZE (mode);\n   unsigned char bytes[16];\n   int immtype = -1, matches;\n   unsigned int invmask = inverse ? 0xff : 0;"}, {"sha": "ae37fc7a241f59a05f3d75aa132981bc2ea6b0ab", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=cb5ca3151b583084caa29fc547a2d261cf8fad2d", "patch": "@@ -12246,7 +12246,7 @@ neon_valid_immediate (rtx op, machine_mode mode, int inverse,\n \tmode = DImode;\n     }\n \n-  innersize = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+  innersize = GET_MODE_UNIT_SIZE (mode);\n \n   /* Vectors of float constants.  */\n   if (GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n@@ -12473,7 +12473,7 @@ neon_immediate_valid_for_shift (rtx op, machine_mode mode,\n \t\t\t\trtx *modconst, int *elementwidth,\n \t\t\t\tbool isleftshift)\n {\n-  unsigned int innersize = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+  unsigned int innersize = GET_MODE_UNIT_SIZE (mode);\n   unsigned int n_elts = CONST_VECTOR_NUNITS (op), i;\n   unsigned HOST_WIDE_INT last_elt = 0;\n   unsigned HOST_WIDE_INT maxshift;\n@@ -12580,8 +12580,7 @@ void\n neon_pairwise_reduce (rtx op0, rtx op1, machine_mode mode,\n \t\t      rtx (*reduc) (rtx, rtx, rtx))\n {\n-  machine_mode inner = GET_MODE_INNER (mode);\n-  unsigned int i, parts = GET_MODE_SIZE (mode) / GET_MODE_SIZE (inner);\n+  unsigned int i, parts = GET_MODE_SIZE (mode) / GET_MODE_UNIT_SIZE (mode);\n   rtx tmpsum = op1;\n \n   for (i = parts / 2; i >= 1; i /= 2)\n@@ -22315,7 +22314,7 @@ arm_assemble_integer (rtx x, unsigned int size, int aligned_p)\n       gcc_assert (GET_CODE (x) == CONST_VECTOR);\n \n       units = CONST_VECTOR_NUNITS (x);\n-      size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+      size = GET_MODE_UNIT_SIZE (mode);\n \n       if (GET_MODE_CLASS (mode) == MODE_VECTOR_INT)\n         for (i = 0; i < units; i++)"}, {"sha": "ede8ea06bb09855f76507218eb381f95b20844c5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cb5ca3151b583084caa29fc547a2d261cf8fad2d", "patch": "@@ -7086,7 +7086,7 @@ classify_argument (machine_mode mode, const_tree type,\n \n   /* for V1xx modes, just use the base mode */\n   if (VECTOR_MODE_P (mode) && mode != V1DImode && mode != V1TImode\n-      && GET_MODE_SIZE (GET_MODE_INNER (mode)) == bytes)\n+      && GET_MODE_UNIT_SIZE (mode) == bytes)\n     mode = GET_MODE_INNER (mode);\n \n   /* Classification of atomic types.  */\n@@ -21780,8 +21780,8 @@ ix86_expand_int_vcond (rtx operands[])\n       && data_mode == mode\n       && cop1 == CONST0_RTX (mode)\n       && operands[1 + (code == LT)] == CONST0_RTX (data_mode)\n-      && GET_MODE_SIZE (GET_MODE_INNER (data_mode)) > 1\n-      && GET_MODE_SIZE (GET_MODE_INNER (data_mode)) <= 8\n+      && GET_MODE_UNIT_SIZE (data_mode) > 1\n+      && GET_MODE_UNIT_SIZE (data_mode) <= 8\n       && (GET_MODE_SIZE (data_mode) == 16\n \t  || (TARGET_AVX2 && GET_MODE_SIZE (data_mode) == 32)))\n     {\n@@ -47194,7 +47194,7 @@ expand_vec_perm_blend (struct expand_vec_perm_d *d)\n     return false;\n   if (TARGET_AVX512F && GET_MODE_SIZE (vmode) == 64\n       && (TARGET_AVX512BW\n-\t  || GET_MODE_SIZE (GET_MODE_INNER (vmode)) >= 4))\n+\t  || GET_MODE_UNIT_SIZE (vmode) >= 4))\n     ;\n   else if (TARGET_AVX2 && GET_MODE_SIZE (vmode) == 32)\n     ;\n@@ -47641,7 +47641,7 @@ expand_vec_perm_pshufb (struct expand_vec_perm_d *d)\n       rperm[i] = GEN_INT ((d->perm[i * nelt / 16] * 16 / nelt) & 15);\n   else\n     {\n-      eltsz = GET_MODE_SIZE (GET_MODE_INNER (d->vmode));\n+      eltsz = GET_MODE_UNIT_SIZE (d->vmode);\n       if (!d->one_operand_p)\n \tmask = 2 * nelt - 1;\n       else if (vmode == V16QImode)\n@@ -48816,7 +48816,7 @@ expand_vec_perm_pshufb2 (struct expand_vec_perm_d *d)\n     return true;\n \n   nelt = d->nelt;\n-  eltsz = GET_MODE_SIZE (GET_MODE_INNER (d->vmode));\n+  eltsz = GET_MODE_UNIT_SIZE (d->vmode);\n \n   /* Generate two permutation masks.  If the required element is within\n      the given vector it is shuffled into the proper lane.  If the required\n@@ -48880,7 +48880,7 @@ expand_vec_perm_vpshufb2_vpermq (struct expand_vec_perm_d *d)\n     return true;\n \n   nelt = d->nelt;\n-  eltsz = GET_MODE_SIZE (GET_MODE_INNER (d->vmode));\n+  eltsz = GET_MODE_UNIT_SIZE (d->vmode);\n \n   /* Generate two permutation masks.  If the required element is within\n      the same lane, it is shuffled in.  If the required element from the\n@@ -48956,7 +48956,7 @@ expand_vec_perm_vpshufb2_vpermq_even_odd (struct expand_vec_perm_d *d)\n     return true;\n \n   nelt = d->nelt;\n-  eltsz = GET_MODE_SIZE (GET_MODE_INNER (d->vmode));\n+  eltsz = GET_MODE_UNIT_SIZE (d->vmode);\n \n   /* Generate two permutation masks.  In the first permutation mask\n      the first quarter will contain indexes for the first half\n@@ -49548,7 +49548,7 @@ expand_vec_perm_vpshufb4_vpermq2 (struct expand_vec_perm_d *d)\n     return true;\n \n   nelt = d->nelt;\n-  eltsz = GET_MODE_SIZE (GET_MODE_INNER (d->vmode));\n+  eltsz = GET_MODE_UNIT_SIZE (d->vmode);\n \n   /* Generate 4 permutation masks.  If the required element is within\n      the same lane, it is shuffled in.  If the required element from the"}, {"sha": "0970f0e1e6dc61ccf93db5db72d077a4c1b9344d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=cb5ca3151b583084caa29fc547a2d261cf8fad2d", "patch": "@@ -11821,7 +11821,7 @@\n {\n   int mask,selector;\n   mask = INTVAL (operands[3]);\n-  selector = GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) == 4 ?\n+  selector = GET_MODE_UNIT_SIZE (<MODE>mode) == 4 ?\n     0xFFFF ^ (0xF000 >> mask * 4)\n     : 0xFF ^ (0xC0 >> mask * 2);\n   emit_insn (gen_<extract_type>_vinsert<shuffletype><extract_suf>_1_mask\n@@ -17621,8 +17621,8 @@\n \t  [(match_operand 3 \"const_int_operand\" \"n, n\")])))]\n   \"TARGET_SSSE3\"\n {\n-  machine_mode imode = GET_MODE_INNER (GET_MODE (operands[0]));\n-  operands[2] = GEN_INT (INTVAL (operands[3]) * GET_MODE_SIZE (imode));\n+  operands[2] =\n+   GEN_INT (INTVAL (operands[3]) * GET_MODE_UNIT_SIZE (GET_MODE (operands[0])));\n \n   switch (which_alternative)\n     {"}, {"sha": "2313fad09d95755794bc53115b3fbe078ad41255", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cb5ca3151b583084caa29fc547a2d261cf8fad2d", "patch": "@@ -32288,7 +32288,7 @@ rs6000_complex_function_value (machine_mode mode)\n   unsigned int regno;\n   rtx r1, r2;\n   machine_mode inner = GET_MODE_INNER (mode);\n-  unsigned int inner_bytes = GET_MODE_SIZE (inner);\n+  unsigned int inner_bytes = GET_MODE_UNIT_SIZE (mode);\n \n   if (FLOAT_MODE_P (mode) && TARGET_HARD_FLOAT && TARGET_FPRS)\n     regno = FP_ARG_RETURN;"}, {"sha": "f51dd4364c646169f51a5f91b9f263e6711a360c", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=cb5ca3151b583084caa29fc547a2d261cf8fad2d", "patch": "@@ -3391,9 +3391,8 @@ arith_immediate_p (rtx op, machine_mode mode,\n \n   constant_to_array (mode, op, arr);\n \n-  mode = GET_MODE_INNER (mode);\n-  bytes = GET_MODE_SIZE (mode);\n-  mode = mode_for_size (GET_MODE_BITSIZE (mode), MODE_INT, 0);\n+  bytes = GET_MODE_UNIT_SIZE (mode);\n+  mode = mode_for_size (GET_MODE_BITSIZE (GET_MODE_INNER (mode)), MODE_INT, 0);\n \n   /* Check that bytes are repeated. */\n   for (i = bytes; i < 16; i += bytes)\n@@ -3433,8 +3432,7 @@ exp2_immediate_p (rtx op, machine_mode mode, int low, int high)\n \n   constant_to_array (mode, op, arr);\n \n-  if (VECTOR_MODE_P (mode))\n-    mode = GET_MODE_INNER (mode);\n+  mode = GET_MODE_INNER (mode);\n \n   bytes = GET_MODE_SIZE (mode);\n   int_mode = mode_for_size (GET_MODE_BITSIZE (mode), MODE_INT, 0);"}, {"sha": "1f603711cf79eda59554626287ca75b4789416dd", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb5ca3151b583084caa29fc547a2d261cf8fad2d/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=cb5ca3151b583084caa29fc547a2d261cf8fad2d", "patch": "@@ -1600,7 +1600,7 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n       if (CONST_SCALAR_INT_P (op) || CONST_DOUBLE_AS_FLOAT_P (op)\n \t  || GET_CODE (op) == CONST_VECTOR)\n \t{\n-          int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+\t  int elt_size = GET_MODE_UNIT_SIZE (mode);\n           unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n \t  rtvec v = rtvec_alloc (n_elts);\n \t  unsigned int i;\n@@ -1611,7 +1611,7 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n \t  else\n \t    {\n \t      machine_mode inmode = GET_MODE (op);\n-              int in_elt_size = GET_MODE_SIZE (GET_MODE_INNER (inmode));\n+\t      int in_elt_size = GET_MODE_UNIT_SIZE (inmode);\n               unsigned in_n_elts = (GET_MODE_SIZE (inmode) / in_elt_size);\n \n \t      gcc_assert (in_n_elts < n_elts);\n@@ -1625,10 +1625,10 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n \n   if (VECTOR_MODE_P (mode) && GET_CODE (op) == CONST_VECTOR)\n     {\n-      int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+      int elt_size = GET_MODE_UNIT_SIZE (mode);\n       unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n       machine_mode opmode = GET_MODE (op);\n-      int op_elt_size = GET_MODE_SIZE (GET_MODE_INNER (opmode));\n+      int op_elt_size = GET_MODE_UNIT_SIZE (opmode);\n       unsigned op_n_elts = (GET_MODE_SIZE (opmode) / op_elt_size);\n       rtvec v = rtvec_alloc (n_elts);\n       unsigned int i;\n@@ -3349,7 +3349,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t      rtx op1 = XEXP (trueop0, 1);\n \n \t      machine_mode opmode = GET_MODE (op0);\n-\t      int elt_size = GET_MODE_SIZE (GET_MODE_INNER (opmode));\n+\t      int elt_size = GET_MODE_UNIT_SIZE (opmode);\n \t      int n_elts = GET_MODE_SIZE (opmode) / elt_size;\n \n \t      int i = INTVAL (XVECEXP (trueop1, 0, 0));\n@@ -3379,15 +3379,15 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t\t  /* Find out number of elements of each operand.  */\n \t\t  if (VECTOR_MODE_P (mode00))\n \t\t    {\n-\t\t      elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode00));\n+\t\t      elt_size = GET_MODE_UNIT_SIZE (mode00);\n \t\t      n_elts00 = GET_MODE_SIZE (mode00) / elt_size;\n \t\t    }\n \t\t  else\n \t\t    n_elts00 = 1;\n \n \t\t  if (VECTOR_MODE_P (mode01))\n \t\t    {\n-\t\t      elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode01));\n+\t\t      elt_size = GET_MODE_UNIT_SIZE (mode01);\n \t\t      n_elts01 = GET_MODE_SIZE (mode01) / elt_size;\n \t\t    }\n \t\t  else\n@@ -3428,7 +3428,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \n \t  if (GET_CODE (trueop0) == CONST_VECTOR)\n \t    {\n-\t      int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+\t      int elt_size = GET_MODE_UNIT_SIZE (mode);\n \t      unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n \t      rtvec v = rtvec_alloc (n_elts);\n \t      unsigned int i;\n@@ -3509,7 +3509,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t      rtx subop1 = XEXP (trueop0, 1);\n \t      machine_mode mode0 = GET_MODE (subop0);\n \t      machine_mode mode1 = GET_MODE (subop1);\n-\t      int li = GET_MODE_SIZE (GET_MODE_INNER (mode0));\n+\t      int li = GET_MODE_UNIT_SIZE (mode0);\n \t      int l0 = GET_MODE_SIZE (mode0) / li;\n \t      int l1 = GET_MODE_SIZE (mode1) / li;\n \t      int i0 = INTVAL (XVECEXP (trueop1, 0, 0));\n@@ -3669,7 +3669,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t\t|| CONST_SCALAR_INT_P (trueop1) \n \t\t|| CONST_DOUBLE_AS_FLOAT_P (trueop1)))\n \t  {\n-\t    int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+\t    int elt_size = GET_MODE_UNIT_SIZE (mode);\n \t    unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n \t    rtvec v = rtvec_alloc (n_elts);\n \t    unsigned int i;\n@@ -5355,7 +5355,7 @@ simplify_ternary_operation (enum rtx_code code, machine_mode mode,\n       trueop2 = avoid_constant_pool_reference (op2);\n       if (CONST_INT_P (trueop2))\n \t{\n-\t  int elt_size = GET_MODE_SIZE (GET_MODE_INNER (mode));\n+\t  int elt_size = GET_MODE_UNIT_SIZE (mode);\n \t  unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n \t  unsigned HOST_WIDE_INT sel = UINTVAL (trueop2);\n \t  unsigned HOST_WIDE_INT mask;"}]}