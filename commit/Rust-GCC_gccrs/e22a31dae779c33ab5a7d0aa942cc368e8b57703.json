{"sha": "e22a31dae779c33ab5a7d0aa942cc368e8b57703", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIyYTMxZGFlNzc5YzMzYWI1YTdkMGFhOTQyY2MzNjhlOGI1NzcwMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-05T23:43:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-05T23:43:19Z"}, "message": "Initial revision\n\nFrom-SVN: r11477", "tree": {"sha": "d4f2fe2cc45f9d21f2aa86378f2dd025c7fa8c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4f2fe2cc45f9d21f2aa86378f2dd025c7fa8c08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e22a31dae779c33ab5a7d0aa942cc368e8b57703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e22a31dae779c33ab5a7d0aa942cc368e8b57703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e22a31dae779c33ab5a7d0aa942cc368e8b57703", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e22a31dae779c33ab5a7d0aa942cc368e8b57703/comments", "author": null, "committer": null, "parents": [{"sha": "4991a34375192997ef8f13fc4e050d75ed2e7fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4991a34375192997ef8f13fc4e050d75ed2e7fb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4991a34375192997ef8f13fc4e050d75ed2e7fb9"}], "stats": {"total": 659, "additions": 659, "deletions": 0}, "files": [{"sha": "27a281b71fa8e244b0f8efb6232dc7b70260efa8", "filename": "gcc/config/m68k/a-ux.h", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Fa-ux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Fa-ux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fa-ux.h?ref=e22a31dae779c33ab5a7d0aa942cc368e8b57703", "patch": "@@ -0,0 +1,207 @@\n+/* Definitions for Motorola 680x0 running A/UX\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/*===================================================================*/\n+/* Execution environment */\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT 7\t/* 68020, 68881 */\n+\n+#define CPP_PREDEFINES \"-Dunix -Dm68k -DAUX -DmacII \\\n+-Asystem(unix) -Asystem(AUX) -Acpu(m68k) -Amachine(m68k) -Amachine(macII)\"\n+\n+#define CPP_SPEC \\\n+\"%{!msoft-float:%{!ansi:-Dmc68881 }-D__HAVE_68881__ }\\\n+-Acpu(mc68000) -D__mc68000__ %{!ansi:-Dmc68000 }\\\n+%{!mc68000:%{!m68000:-Acpu(mc68020) -D__mc68020__ %{!ansi:-Dmc68020 }}}\\\n+%{m68030:-Acpu(mc68030) -D__mc68030__ %{!ansi:-Dmc68030 }}\\\n+%{m68040:-Acpu(mc68040) -D__mc68040__ %{!ansi:-Dmc68040 }}\\\n+%{!ansi:%{!traditional:-D__STDC__=2 }}\\\n+%{sbsd:-D_BSD_SOURCE -DBSD }%{ZB:-D_BSD_SOURCE -DBSD }\\\n+%{ssysv:-D_SYSV_SOURCE -DSYSV -DUSG }%{ZS:-D_SYSV_SOURCE -DSYSV -DUSG }\\\n+%{sposix:-D_POSIX_SOURCE -DPOSIX }%{ZP:-D_POSIX_SOURCE -DPOSIX }\\\n+%{sposix+:-D_POSIX_SOURCE -DPOSIX }\\\n+%{saux:-D_AUX_SOURCE }%{ZA:-D_AUX_SOURCE }\\\n+%{!sbsd:%{!ZB:%{!ssysv:%{!ZS:%{!sposix:%{!ZP:%{!snone:\\\n+-D_BSD_SOURCE -D_SYSV_SOURCE -D_AUX_SOURCE }}}}}}}\"\n+\n+#define LIB_SPEC \\\n+\"%{sbsd:-lbsd }%{ZB:-lbsd }\\\n+%{ssysv:-lsvid }%{ZS:-lsvid }\\\n+%{sposix:-lposix }%{ZP:-lposix }%{sposix+:-lposix }\\\n+%{!static:%{smac:-lmac_s -lat -lld -lmr }-lc_s }\\\n+%{static:%{smac:-lmac -lat -lld -lmr }-lc }\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+\"%{pg:mcrt0.o%s }%{!pg:%{p:mcrt1.o%s }\\\n+%{!p:%{smac:maccrt1.o%s low.o%s }%{!smac:crt1.o%s }}}\\\n+crt2.o%s \"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \"crtn.o%s \"\n+\n+\n+/*===================================================================*/\n+/* Compilation environment -- mostly */\n+\n+#define NO_SYS_SIGLIST\n+\n+/* We provide atexit(), A/UX does not have it */\n+#define HAVE_ATEXIT\n+\n+/* Generate calls to memcpy, memcmp and memset, as opposed to bcopy, bcmp,\n+   and bzero */\n+#define TARGET_MEM_FUNCTIONS\n+\n+/* Provide support for pascal strings */\n+#define SUPPORT_PASCAL_STRINGS\n+\n+/* Resize standard types */\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"unsigned int\"\n+\n+/* Every structure or union's size must be a multiple of 2 bytes.  */\n+#define STRUCTURE_SIZE_BOUNDARY 16\n+\n+/* Bits needed by collect */\n+\n+#define OBJECT_FORMAT_COFF\n+#define MY_ISCOFF(m)\t((m) == M68TVMAGIC || \\\n+\t\t\t (m) == M68MAGIC || \\\n+\t\t\t (m) == MC68TVMAGIC || \\\n+\t\t\t (m) == MC68MAGIC || \\\n+\t\t\t (m) == M68NSMAGIC)\n+\n+\n+#ifndef USE_COLLECT2\n+/* For .ctor/.dtor sections for collecting constructors */\n+/* We have special start/end files for defining [cd]tor lists */\n+#define CTOR_LISTS_DEFINED_EXTERNALLY\n+#endif\n+\n+\n+/*======================================================================*/\n+/* Calling convention and library support changes */\n+\n+/* Define how to generate (in the callee) the output value of a function\n+   and how to find (in the caller) the value returned by a function.  VALTYPE\n+   is the data type of the value (as a tree).  If the precise function being\n+   called is known, FUNC is its FUNCTION_DECL; otherwise, FUNC is 0.\n+   For A/UX generate the result in d0, a0, or fp0 as appropriate. */\n+\n+#undef FUNCTION_VALUE\n+#define FUNCTION_VALUE(VALTYPE, FUNC)                                   \\\n+  (TREE_CODE (VALTYPE) == REAL_TYPE && TARGET_68881                     \\\n+   ? gen_rtx (REG, TYPE_MODE (VALTYPE), 16)                             \\\n+   : (TREE_CODE (VALTYPE) == POINTER_TYPE                               \\\n+      ? gen_rtx (REG, TYPE_MODE (VALTYPE), 8)                           \\\n+      : gen_rtx (REG, TYPE_MODE (VALTYPE), 0)))\n+                    \n+#undef LIBCALL_VALUE\n+#define LIBCALL_VALUE(MODE)\t\t\t\t\t\t\\\n+  gen_rtx (REG, (MODE), ((TARGET_68881 &&\t\t\t\t\\\n+\t\t\t ((MODE) == SFmode || (MODE) == DFmode)) ? 16 : 0))\n+\n+/* 1 if N is a possible register number for a function value.\n+   For A/UX allow d0, a0, or fp0 as return registers, for integral,\n+   pointer, or floating types, respectively. Reject fp0 if not using a\n+   68881 coprocessor. */\n+\n+#undef FUNCTION_VALUE_REGNO_P\n+#define FUNCTION_VALUE_REGNO_P(N) \\\n+  ((N) == 0 || (N) == 8 || (TARGET_68881 && (N) == 16))\n+\n+/* Define this to be true when FUNCTION_VALUE_REGNO_P is true for\n+   more than one register.  */\n+\n+#undef NEEDS_UNTYPED_CALL\n+#define NEEDS_UNTYPED_CALL 1\n+\n+/* For compatibility with the large body of existing code which does not\n+   always properly declare external functions returning pointer types, the\n+   A/UX convention is to copy the value returned for pointer functions\n+   from a0 to d0 in the function epilogue, so that callers that have\n+   neglected to properly declare the callee can still find the correct return\n+   value. */\n+\n+#define FUNCTION_EXTRA_EPILOGUE(FILE, SIZE)\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  extern int current_function_returns_pointer;\t\t\t\t\\\n+  if ((current_function_returns_pointer) &&\t\t\t\t\\\n+      ! find_equiv_reg (0, get_last_insn (), 0, 0, 0, 8, Pmode))\t\\\n+    asm_fprintf (FILE, \"\\t%s %Ra0,%Rd0\\n\", ASM_MOV_INSN);\t\t\\\n+}\n+\n+/* How to call the function profiler */\n+\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n+  asm_fprintf (FILE, \"\\t%Olea %LLP%d,%Ra0\\n\\t%Ojbsr %s\\n\",\t\t\\\n+\t       (LABELNO), FUNCTION_PROFILER_SYMBOL)\n+\n+/* Finalize the trampoline by flushing the insn cache */\n+\n+#undef FINISH_INIT_TRAMPOLINE\n+#define FINISH_INIT_TRAMPOLINE(TRAMP)\t\t\t\t\t\\\n+  emit_library_call(gen_rtx(SYMBOL_REF, Pmode, \"__clear_cache\"),\t\\\n+\t\t    0, VOIDmode, 2, TRAMP, Pmode,\t\t\t\\\n+\t\t    plus_constant(TRAMP, TRAMPOLINE_SIZE), Pmode);\n+\n+/* Clear the instruction cache from `beg' to `end'.  This makes an \n+   inline system call to SYS_sysm68k.  The arguments are as follows:\n+\n+\tsysm68k(105, addr, scope, cache, len)\n+\n+   105\t  - the subfunction code to clear the cache\n+   addr\t  - the start address for the flush\n+   scope  - the scope of the flush (see the cpush insn)\n+   cache  - which cache to flush (see the cpush insn)\n+   len    - a factor relating to the number of flushes to perform :\n+   \t    len/16 lines, or len/4096 pages.\n+\n+   While all this is only really relevant to 040's, the system call\n+   will just return an error (which we ignore) on other systems.  */\n+\n+#define CLEAR_INSN_CACHE(beg, end)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+    unsigned _beg = (unsigned)(beg), _end = (unsigned)(end);\t\t\\\n+    unsigned _len = ((_end / 16) - (_beg / 16) + 1) * 16;\t\t\\\n+    __asm __volatile(\t\t\t\t\t\t\t\\\n+\t    ASM_MOV_INSN \" %1, %-\\n\\t\"     /* nr lines */\t\t\\\n+\t    ASM_MOV_INSN \" %#3, %-\\n\\t\"\t   /* insn+data caches */\t\\\n+\t    ASM_MOV_INSN \" %#1, %-\\n\\t\"\t   /* clear lines */\t\t\\\n+\t    ASM_MOV_INSN \" %0, %-\\n\\t\"\t   /* beginning of buffer */\t\\\n+\t    ASM_MOV_INSN \" %#105, %-\\n\\t\"  /* cache sub-function nr */\t\\\n+\t    ASM_MOV_INSN \" %#0, %-\\n\\t\"\t   /* dummy return address */\t\\\n+\t    ASM_MOV_INSN \" %#38, %/d0\\n\\t\" /* system call nr */\t\t\\\n+\t    \"trap %#0\\n\\t\"\t\t\t\t\t\t\\\n+\t    \"add%.l %#24, %/sp\"\t\t\t\t\t\t\\\n+\t    : /* no outputs */\t\t\t\t\t\t\\\n+\t    : \"g\"(_beg), \"g\"(_len)\t\t\t\t\t\\\n+\t    : \"%d0\");\t\t\t\t\t\t\t\\\n+}"}, {"sha": "9ee529b053d1a53645980111c604dca11f5ba79e", "filename": "gcc/config/m68k/aux-crt1.c", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Faux-crt1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Faux-crt1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Faux-crt1.c?ref=e22a31dae779c33ab5a7d0aa942cc368e8b57703", "patch": "@@ -0,0 +1,134 @@\n+/* Startup code for A/UX\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file with other programs, and to distribute\n+those programs without any restriction coming from the use of this\n+file.  (The General Public License restrictions do apply in other\n+respects; for example, they cover modification of the file, and\n+distribution when not linked into another program.)\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with files\n+   compiled with GCC to produce an executable, this does not cause\n+   the resulting executable to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+/* This file is compiled three times to produce crt1.o, mcrt1.o, and\n+   maccrt1.o.  The final two are created by defining MCRT1 and MACCRT1\n+   respectively.  */\n+\n+#include <stdlib.h>\n+#ifdef MCRT1\n+#include <unistd.h>\n+#include <mon.h>\n+#endif\n+\n+/* Extern function declarations */\n+\n+extern void initfpu(void);\n+extern void __istart(void);\n+extern void __compatmode(void);\n+extern void _cleanup(void);\n+extern int main(int, char **, char **);\n+extern void exit(int) __attribute__((noreturn));\n+extern void _exit(int) __attribute__((noreturn));\n+\n+#ifdef MACCRT1\n+extern void InitMac(void);\n+#endif\n+#ifdef MCRT1\n+static void monitor_start(void);\n+#endif\n+\n+/* Global variables */\n+\n+char **environ;\n+char *__splimit;\t\t\t/* address of top of stack */\n+\n+\n+/* Initialize system and run */\n+\n+void _start() __attribute__((noreturn));\n+void _start()\n+{\n+  register int *fp __asm__(\"%a6\");\n+  register char *d0 __asm__(\"%d0\");\n+  char **argv;\n+  int argc;\n+\n+  __splimit = d0;\n+  argc = fp[1];\n+  argv = (char **)&fp[2];\n+  environ = &argv[argc+1];\n+\n+  initfpu();\n+  __istart();\n+  __compatmode();\n+\n+  atexit(_cleanup);\n+#ifdef MCRT1\n+  monitor_start();\n+#endif\n+#ifdef MACCRT1\n+  InitMac();\n+#endif\n+\n+  exit(main(argc, argv, environ));\n+}\n+\n+\n+#ifdef MCRT1\n+/* Start/Stop program monitor */\n+\n+extern void monitor(void *, void *, WORD *, int, int);\n+\n+static WORD *monitor_buffer;\n+\n+static void monitor_cleanup(void)\n+{\n+  monitor(NULL, NULL, NULL, 0, 0);\n+  free(monitor_buffer);\n+}\n+\n+static void monitor_start(void)\n+{\n+  extern int etext;\n+  extern int stext __asm__(\".text\");\n+\n+  /* Choice of buffer size should be \"no more than a few times\n+     smaller than the program size\" -- I don't believe that there\n+     are any (useful) functions smaller than two insns (4 bytes)\n+     so that is the scale factor used here */\n+  int len = (&etext - &stext + 1) / 4;\n+\n+  monitor_buffer = (WORD *)calloc(len, sizeof(WORD));\n+  if (monitor_buffer == NULL)\n+    {\n+      static const char msg[] = \"mcrt1: could not allocate monitor buffer\\n\";\n+      write(2, msg, sizeof(msg)-1);\n+      _exit(-1);\n+    }\n+\n+  /* I'm not sure why the count cap at 600 -- but that is what A/UX does */\n+  monitor(&stext, &etext, monitor_buffer, len, 600);\n+\n+  atexit(monitor_cleanup);\n+}\n+#endif /* MCRT1 */"}, {"sha": "062c16ae8c2d55fceb97be3eee28f32691547e57", "filename": "gcc/config/m68k/aux-crt2.asm", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Faux-crt2.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Faux-crt2.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Faux-crt2.asm?ref=e22a31dae779c33ab5a7d0aa942cc368e8b57703", "patch": "@@ -0,0 +1,42 @@\n+/* More startup code for A/UX */\n+\n+#include \"tm.h\"\n+\n+#ifdef USE_BIN_AS\n+\tfile \"crt2.s\"\n+\n+/* The init section is used to support shared libraries */\n+\tinit\n+\tglobal\t__istart\n+\n+__istart:\n+\tlink %fp,&-4\n+#else\n+\t.file \"crt2.s\"\n+\n+/* The init section is used to support shared libraries */\n+.section .init, \"x\"\n+.even\n+.globl __istart\n+\n+__istart:\n+\tlink %fp,#-4\n+\n+#ifndef USE_COLLECT2\n+/* The ctors and dtors sections are used to support COFF collection of \n+   c++ constructors and destructors */\n+.section .ctors, \"d\"\n+.even\n+.globl __CTOR_LIST__\n+\n+__CTOR_LIST__:\n+\t.long -1\n+\n+.section .dtors, \"d\"\n+.even\n+.globl __DTOR_LIST__\n+\n+__DTOR_LIST__:\n+\t.long -1\n+#endif /* USE_COLLECT2 */\n+#endif /* USE_BIN_AS */"}, {"sha": "ce63d7fead701f9dc424017263189eb5317ba517", "filename": "gcc/config/m68k/aux-crtn.asm", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Faux-crtn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Faux-crtn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Faux-crtn.asm?ref=e22a31dae779c33ab5a7d0aa942cc368e8b57703", "patch": "@@ -0,0 +1,26 @@\n+/* More startup code for A/UX */\n+\n+#include \"tm.h\"\n+\n+#ifdef USE_BIN_AS\n+\tfile\t\"crtn.s\"\n+\n+\tinit\n+\n+\tunlk %fp\n+\trts\n+#else\n+\t.file \"crtn.s\"\n+\n+.section .init, \"x\"\n+\tunlk %fp\n+\trts\n+\n+#ifndef USE_COLLECT2\n+.section .ctors, \"d\"\n+\t.long 0\n+\n+.section .dtors, \"d\"\n+\t.long 0\n+#endif /* USE_COLLECT2 */\n+#endif /* USE_BIN_AS */"}, {"sha": "fe06c77c406e69f98b10d7ed55997ba989f600c9", "filename": "gcc/config/m68k/aux-exit.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Faux-exit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Faux-exit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Faux-exit.c?ref=e22a31dae779c33ab5a7d0aa942cc368e8b57703", "patch": "@@ -0,0 +1,99 @@\n+/* Generic atexit()\n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file with other programs, and to distribute\n+those programs without any restriction coming from the use of this\n+file.  (The General Public License restrictions do apply in other\n+respects; for example, they cover modification of the file, and\n+distribution when not linked into another program.)\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with files\n+   compiled with GCC to produce an executable, this does not cause\n+   the resulting executable to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+/* Rather than come up with some ugly hack to make mcrt1 work, it is\n+   better to just go ahead and provide atexit().  */\n+\n+\n+#include <stdlib.h>\n+\n+\n+void exit(int) __attribute__((noreturn));\n+void _exit(int) __attribute__((noreturn));\n+void _cleanup(void);\n+\n+\n+#define FNS_PER_BLOCK\t32\n+\n+struct atexit_fn_block\n+{\n+  struct atexit_fn_block *next;\n+  void (*fns[FNS_PER_BLOCK])(void);\n+  short used;\n+};\n+\n+\n+/* staticly allocate the first block */\n+static struct atexit_fn_block atexit_fns;\n+static struct atexit_fn_block *current_block = &atexit_fns;\n+\n+\n+int atexit(void (*fn)(void))\n+{\n+  if (current_block->used >= FNS_PER_BLOCK)\n+    {\n+      struct atexit_fn_block *new_block = \n+\t(struct atexit_fn_block *)malloc(sizeof(struct atexit_fn_block));\n+      if (new_block == NULL)\n+\treturn -1;\n+\n+      new_block->used = 0;\n+      new_block->next = current_block;\n+      current_block = new_block;\n+    }\n+\n+  current_block->fns[current_block->used++] = fn;\n+\n+  return 0;\n+}\n+\n+\n+void exit(int status)\n+{\n+  struct atexit_fn_block *block = current_block, *old_block;\n+  short i;\n+\n+  while (1)\n+    {\n+      for (i = block->used; --i >= 0 ;)\n+\t(*block->fns[i])();\n+      if (block == &atexit_fns)\n+\tbreak;\n+      /* I know what you are thinking -- we are about to exit, why free?\n+\t Because it is friendly to memory leak detectors, that's why. */\n+      old_block = block;\n+      block = block->next;\n+      free(old_block);\n+    }\n+\n+  _exit(status);\n+}"}, {"sha": "d1bb2a990807e6a62170f54e3903138209ccea60", "filename": "gcc/config/m68k/aux-low.gld", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Faux-low.gld", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Faux-low.gld", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Faux-low.gld?ref=e22a31dae779c33ab5a7d0aa942cc368e8b57703", "patch": "@@ -0,0 +1,38 @@\n+/* GLD link script for building mac-compatible executables */\n+\n+OUTPUT_FORMAT(\"coff-m68k\")\n+\n+SEARCH_DIR(@tooldir@/lib);\n+SEARCH_DIR(@libdir@);\n+SEARCH_DIR(/lib);\n+SEARCH_DIR(/usr/lib);\n+SEARCH_DIR(@local_prefix@/lib);\n+\n+ENTRY(_start)\n+\n+SECTIONS \n+{\n+\t.lowmem 0 (DSECT) : { \n+\t\t/usr/lib/low.o (.data)\n+\t}\n+\t.text 0x10000000 : {\n+\t\t*(.text)\n+\t\t*(.init)\n+\t\t*(.fini)\n+\t\tetext = .;\n+\t\t_etext = .;\n+\t}\n+\t.data ALIGN(0x40000) : {\n+\t\t*(.data)\n+\t\t*(.ctors)\n+\t\t*(.dtors)\n+\t\tedata = .;\n+\t\t_edata = .;\n+\t}\n+\t.bss : {\n+\t\t*(.bss)\n+\t\t*(COMMON)\n+\t\tend = .;\n+\t\t_end = .;\n+\t}\n+}"}, {"sha": "1001c84762b828e96762f72ea8e8e55690dbe1a8", "filename": "gcc/config/m68k/aux-mcount.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Faux-mcount.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Faux-mcount.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Faux-mcount.c?ref=e22a31dae779c33ab5a7d0aa942cc368e8b57703", "patch": "@@ -0,0 +1,69 @@\n+/* Profiling support code for A/UX \n+   Copyright (C) 1996 Free Software Foundation, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file with other programs, and to distribute\n+those programs without any restriction coming from the use of this\n+file.  (The General Public License restrictions do apply in other\n+respects; for example, they cover modification of the file, and\n+distribution when not linked into another program.)\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with files\n+   compiled with GCC to produce an executable, this does not cause\n+   the resulting executable to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+/* This routine is called at the beginning of functions compiled with -p\n+   or -pg.  The A/UX libraries call mcount%, but gas cannot generate \n+   symbols with embedded percent signs.  Previous ports of GCC to A/UX \n+   have done things like (1) assemble a stub routine with the native\n+   assembler, or (2) assemble a stub routine with gas and edit the object\n+   file.  This solution has the advantage that it can interoperate with\n+   the A/UX version and can be used in an eventual port of glibc to A/UX.  */\n+\n+#ifndef __GNUC__\n+#error This file uses GNU C extensions\n+#endif\n+\n+#include <mon.h>\n+\n+#ifdef IN_GCC\n+#include \"tm.h\"\n+#endif\n+\n+struct cnt *_countbase;\n+\n+#ifdef FUNCTION_PROFILER_SYMBOL\n+void __mcount() __asm__(FUNCTION_PROFILER_SYMBOL);\n+#endif\n+\n+void __mcount()\n+{\n+  register long **pfncnt __asm__(\"%a0\");\n+  register long *fncnt = *pfncnt;\n+\n+  if (!fncnt)\n+    {\n+      struct cnt *newcnt = _countbase++;\n+      newcnt->fnpc = (char *)__builtin_return_address(0);\n+      *pfncnt = fncnt = &newcnt->mcnt;\n+    }\n+  *fncnt += 1;\n+}"}, {"sha": "3d59d675ffd0cc74715fb75e98e0601f12ca20e3", "filename": "gcc/config/m68k/t-aux", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Ft-aux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e22a31dae779c33ab5a7d0aa942cc368e8b57703/gcc%2Fconfig%2Fm68k%2Ft-aux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-aux?ref=e22a31dae779c33ab5a7d0aa942cc368e8b57703", "patch": "@@ -0,0 +1,44 @@\n+# Makefile additions for A/UX\n+\n+LIB2FUNCS_EXTRA=aux-mcount.c aux-exit.c\n+\n+FIXPROTO_DEFINES=-D_POSIX_SOURCE\n+\n+# Only really needed for collect2\n+CLIB=-lld\n+\n+# Needed to support builds for multiple versions of A/UX\n+# LDFLAGS=-static\n+\n+# Make sure we get the right assembler by letting gcc choose\n+AS = $(GCC_FOR_TARGET) -xassembler-with-cpp -D__ASSEMBLY__ $(INCLUDES) -c\n+\n+aux-mcount.c: $(srcdir)/config/m68k/aux-mcount.c\n+\tcp $(srcdir)/config/m68k/aux-mcount.c aux-mcount.c\n+\n+aux-exit.c: $(srcdir)/config/m68k/aux-exit.c\n+\tcp $(srcdir)/config/m68k/aux-exit.c aux-exit.c\n+\n+crt1.o: $(srcdir)/config/m68k/aux-crt1.c $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -o crt1.o -c \\\n+\t  -fno-omit-frame-pointer $(srcdir)/config/m68k/aux-crt1.c\n+\n+mcrt1.o: $(srcdir)/config/m68k/aux-crt1.c $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -o mcrt1.o -c \\\n+\t  -fno-omit-frame-pointer -DMCRT1 $(srcdir)/config/m68k/aux-crt1.c\n+\n+maccrt1.o: $(srcdir)/config/m68k/aux-crt1.c $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -o maccrt1.o -c \\\n+\t  -fno-omit-frame-pointer -DMACCRT1 $(srcdir)/config/m68k/aux-crt1.c\n+\n+crt2.o: $(srcdir)/config/m68k/aux-crt2.asm $(GCC_PASSES)\n+\t$(AS) -o crt2.o $(srcdir)/config/m68k/aux-crt2.asm\n+\n+crtn.o: $(srcdir)/config/m68k/aux-crtn.asm $(GCC_PASSES)\n+\t$(AS) -o crtn.o $(srcdir)/config/m68k/aux-crtn.asm\n+\n+low.gld: $(srcdir)/config/m68k/aux-low.gld\n+\tsed -e 's|@libdir@|$(libdir)|' -e 's|@tooldir@|$(tooldir)|' \\\n+\t\t-e 's|@local_prefix@|$(local_prefix)|' \\\n+\t\t$(srcdir)/config/m68k/aux-low.gld > tmp-low.gld\n+\tmv tmp-low.gld low.gld"}]}