{"sha": "12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad", "node_id": "C_kwDOANBUbNoAKDEyYThkNWUyZjJlN2Q3NTM1MTE1ZTRlMTA1YzBmOWViNGQ1MGZkYWQ", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-14T12:48:36Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-09-14T12:48:36Z"}, "message": "[PR106936] Remove assert from get_value_range.\n\nThis assert was put here to make sure that the legacy\nget_value_range() wasn't being called on stuff that legacy couldn't\nhandle (floats, etc), because the result would ultimately be copied\ninto a value_range_equiv.\n\nIn this case, simplify_casted_cond() is calling it on an offset_type\nwhich is neither an integer nor a pointer.  However, range_of_expr\nhappily punted on it, and then the fallthru code set the range to\nVARYING.  As value_range_equiv can store VARYING types of anything\n(including types it can't handle), this is fine.\n\nThe easiest thing to do is remove the assert.  If someone from the non\nlegacy world tries to get a non integer/pointer range here, it's going\nto blow up anyhow because the temporary in get_value_range is\nint_range_max.\n\n\tPR tree-optimization/106936\n\ngcc/ChangeLog:\n\n\t* value-query.cc (range_query::get_value_range): Remove assert.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/tree-ssa/pr106936.C: New test.", "tree": {"sha": "627d992b72f512cda6a9ce63a2c44963d56ee101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/627d992b72f512cda6a9ce63a2c44963d56ee101"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1457be6dbd78e1fd2f84584e020f9a2b3803181a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1457be6dbd78e1fd2f84584e020f9a2b3803181a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1457be6dbd78e1fd2f84584e020f9a2b3803181a"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "c3096e0dd204db074e1a6efb903792f1b6266cfc", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr106936.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr106936.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr106936.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr106936.C?ref=12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile } */\n+// { dg-options \"-O2 -fno-tree-ccp -fno-tree-forwprop -fno-tree-fre\" }\n+\n+namespace testPointerToMemberMiscCasts2 {\n+struct B {\n+  int f;\n+};\n+struct L : public B { };\n+struct R : public B { };\n+struct D : public L, R { };\n+  int B::* pb = &B::f;\n+  int R::* pr = pb;\n+  int D::* pdr = pr;\n+}"}, {"sha": "ad80db780c22404d0c5451b2eab12f32e30e0efd", "filename": "gcc/value-query.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad/gcc%2Fvalue-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad/gcc%2Fvalue-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.cc?ref=12a8d5e2f2e7d7535115e4e105c0f9eb4d50fdad", "patch": "@@ -167,7 +167,6 @@ range_query::free_value_range_equiv (value_range_equiv *v)\n const class value_range_equiv *\n range_query::get_value_range (const_tree expr, gimple *stmt)\n {\n-  gcc_checking_assert (value_range_equiv::supports_p (TREE_TYPE (expr)));\n   int_range_max r;\n   if (range_of_expr (r, const_cast<tree> (expr), stmt))\n     return new (equiv_alloc->allocate ()) value_range_equiv (r);"}]}