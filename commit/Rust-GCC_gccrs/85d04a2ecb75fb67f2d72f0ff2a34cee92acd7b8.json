{"sha": "85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVkMDRhMmVjYjc1ZmI2N2YyZDcyZjBmZjJhMzRjZWU5MmFjZDdiOA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-29T00:16:21Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-29T00:16:21Z"}, "message": "Daily bump.", "tree": {"sha": "010b009ce0580cf5a4dbe38f7110ce22c12216c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/010b009ce0580cf5a4dbe38f7110ce22c12216c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/comments", "author": null, "committer": null, "parents": [{"sha": "e6bce7fe17bf32ce969abc6f77f07acd352f6977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6bce7fe17bf32ce969abc6f77f07acd352f6977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6bce7fe17bf32ce969abc6f77f07acd352f6977"}], "stats": {"total": 247, "additions": 246, "deletions": 1}, "files": [{"sha": "1efbbeeb8be48c2be279ea1dd02b5512ff1baedd", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "patch": "@@ -1,3 +1,8 @@\n+2021-01-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR lto/85574\n+\t* compare-lto: Deal with PE-COFF executables specifically.\n+\n 2021-01-14  Martin Liska  <mliska@suse.cz>\n \n \t* mklog.py: Fix infinite loop for unsupported files."}, {"sha": "f0c0390ebb947ec2665fb1244331921d96ce590e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "patch": "@@ -1,3 +1,109 @@\n+2021-01-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94775\n+\t* stor-layout.c (finalize_type_size): If we reset TYPE_USER_ALIGN in\n+\tthe main variant, maybe reset it in its variants too.\n+\t* tree.c (check_base_type): Return true only if TYPE_USER_ALIGN match.\n+\t(check_aligned_type): Check if TYPE_USER_ALIGN match.\n+\n+2021-01-28  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/98730\n+\t* config/arm/arm.c (arm_rtx_costs_internal): Adjust cost of vector\n+\tof constant zero for comparisons.\n+\n+2021-01-28  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_mangle_decl_assembler_name): Add\n+\tsupport for mapping built-in function names for long double\n+\tbuilt-in functions if long double is IEEE 128-bit.\n+\n+2021-01-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mlsl_n\n+\tbuiltin generator macros.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su>mlsl_n<mode>):\n+\tDefine.\n+\t* config/aarch64/arm_neon.h (vmlsl_n_s16): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vmlsl_n_s32): Likewise.\n+\t(vmlsl_n_u16): Likewise.\n+\t(vmlsl_n_u32): Likewise.\n+\n+2021-01-28  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mlal_n\n+\tbuiltin generator macros.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su>mlal_n<mode>):\n+\tDefine.\n+\t* config/aarch64/arm_neon.h (vmlal_n_s16): Use RTL builtin\n+\tinstead of inline asm.\n+\t(vmlal_n_s32): Likewise.\n+\t(vmlal_n_u16): Likewise.\n+\t(vmlal_n_u32): Likewise.\n+\n+2021-01-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (shrn2): Define\n+\tbuiltin.\n+\t* config/aarch64/aarch64-simd.md (aarch64_shrn2<mode>_insn_le):\n+\tDefine.\n+\t(aarch64_shrn2<mode>_insn_be): Likewise.\n+\t(aarch64_shrn2<mode>): Likewise.\n+\t* config/aarch64/arm_neon.h (vshrn_high_n_s16): Reimlplement\n+\tusing builtins.\n+\t(vshrn_high_n_s32): Likewise.\n+\t(vshrn_high_n_s64): Likewise.\n+\t(vshrn_high_n_u16): Likewise.\n+\t(vshrn_high_n_u32): Likewise.\n+\t(vshrn_high_n_u64): Likewise.\n+\n+2021-01-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (shrn): Define\n+\tbuiltin.\n+\t* config/aarch64/aarch64-simd.md (aarch64_shrn<mode>_insn_le):\n+\tDefine.\n+\t(aarch64_shrn<mode>_insn_be): Likewise.\n+\t(aarch64_shrn<mode>): Likewise.\n+\t* config/aarch64/arm_neon.h (vshrn_n_s16): Reimplement using\n+\tbuiltins.\n+\t(vshrn_n_s32): Likewise.\n+\t(vshrn_n_s64): Likewise.\n+\t(vshrn_n_u16): Likewise.\n+\t(vshrn_n_u32): Likewise.\n+\t(vshrn_n_u64): Likewise.\n+\t* config/aarch64/iterators.md (vn_mode): New mode attribute.\n+\n+2021-01-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/80960\n+\t* dse.c (check_mem_read_rtx): Call get_addr on the\n+\toffsetted address.\n+\n+2021-01-28  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\t    David Edelsohn  <dje.gcc@gmail.com>\n+\n+\tPR target/98799\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n+\tDon't generate VIEW_CONVERT_EXPR for fcode ALTIVEC_BUILTIN_VEC_INSERT\n+\twhen -m32.\n+\t* config/rs6000/rs6000-protos.h (rs6000_expand_vector_set_var):\n+\tDelete.\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_set): Remove the\n+\twrapper call rs6000_expand_vector_set_var for cleanup.  Call\n+\trs6000_expand_vector_set_var_p9 and rs6000_expand_vector_set_var_p8\n+\tdirectly.\n+\t(rs6000_expand_vector_set_var): Delete.\n+\t(rs6000_expand_vector_set_var_p9): Make static.\n+\t(rs6000_expand_vector_set_var_p8): Make static.\n+\n+2021-01-28  Xing GUO  <higuoxing@gmail.com>\n+\n+\t* common/config/riscv/riscv-common.c\n+\t(riscv_subset_list::parsing_subset_version): Fix -march option parsing\n+\twhen `p` extension exists.\n+\n 2021-01-27  Vladimir N. Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/97684"}, {"sha": "1cdaac431948dab81543b48c68c486d8b405d9c0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "patch": "@@ -1 +1 @@\n-20210128\n+20210129"}, {"sha": "fa67d1a783e665cd56166ece97064c06db4d8cec", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "patch": "@@ -1,3 +1,9 @@\n+2021-01-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c.opt (-std=c++2a, -std=c++20, -std=gnu++2a, -std=gnu++20): Remove\n+\tdraft from description.\n+\t(-std=c++2b): Fix a pasto, 2020 -> 2023.\n+\n 2021-01-26  Paul Fee  <paul.f.fee@gmail.com>\n \n \t* c-common.h (cxx_dialect): Add cxx23 as a dialect."}, {"sha": "144ff952d45ac4914a8278758f6839d43b7a4598", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "patch": "@@ -1,3 +1,28 @@\n+2021-01-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98841\n+\t* typeck.c (build_x_indirect_ref): For *this, return current_class_ref.\n+\n+2021-01-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/33661\n+\tPR c++/98847\n+\t* decl.c (cp_finish_decl): For register vars with asmspec in templates\n+\tcall set_user_assembler_name and set DECL_HARD_REGISTER.\n+\t* pt.c (tsubst_expr): When instantiating DECL_HARD_REGISTER vars,\n+\tpass asmspec_tree to cp_finish_decl.\n+\n+2021-01-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98770\n+\t* module.cc (trees_out::decl_value): Swap is_typedef & TYPE_NAME\n+\tcheck order.\n+\t(trees_in::decl_value): Do typedef frobbing only when installing\n+\ta new typedef, adjust is_matching_decl call.  Swap is_typedef\n+\t& TYPE_NAME check.\n+\t(trees_in::is_matching_decl): Add is_typedef parm. Adjust variable\n+\tnames and deal with typedef checking.\n+\n 2021-01-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/97874"}, {"sha": "560250369e3d9cdfc35540f3d840b48d4ae02c92", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "patch": "@@ -1,3 +1,9 @@\n+2021-01-28  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/86470\n+\t* trans.c (gfc_call_malloc): Allocate area of size 1 if passed\n+\tsize is NULL (as documented).\n+\n 2021-01-27  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/93924"}, {"sha": "85bd3435a18c84c13644b91932e815236a3c060d", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "patch": "@@ -1,3 +1,8 @@\n+2021-01-28  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* gospec.c (lang_specific_driver): Add -g if no debugging options\n+\twere passed.\n+\n 2021-01-15  Ian Lance Taylor  <iant@golang.org>\n \n \t* Make-lang.in (GO_OBJS): Add go/embed.o."}, {"sha": "37000934e92ab770b8cf241296fdb0a5ca8c210a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "patch": "@@ -1,3 +1,77 @@\n+2021-01-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98841\n+\t* g++.dg/warn/effc5.C: New test.\n+\n+2021-01-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94775\n+\t* g++.dg/cpp0x/alignas19.C: New test.\n+\t* g++.dg/warn/Warray-bounds15.C: New test.\n+\n+2021-01-28  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/98730\n+\t* gcc.target/arm/simd/vceqzq_p64.c: Update expected result.\n+\n+2021-01-28  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gfortran.dg/ISO_Fortran_binding_18.c: Include\n+\t../../../libgfortran/ISO_Fortran_binding.h rather than\n+\tISO_Fortran_binding.h.\n+\n+2021-01-28  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/float128-longdouble-math.c: New test.\n+\t* gcc.target/powerpc/float128-longdouble-stdio.c: New test.\n+\t* gcc.target/powerpc/float128-math.c: Adjust test for new name\n+\tbeing generated.  Add support for running test on power10.  Add\n+\tsupport for running if long double defaults to 64-bits.\n+\n+2021-01-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/33661\n+\tPR c++/98847\n+\t* g++.target/i386/pr98847.C: New test.\n+\n+2021-01-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/narrow_high-intrinsics.c: Fix shrn2 scan.\n+\n+2021-01-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98770\n+\t* g++.dg/modules/pr98770_a.C: New.\n+\t* g++.dg/modules/pr98770_b.C: New.\n+\n+2021-01-28  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/86470\n+\t* gfortran.dg/gomp/pr86470.f90: New test.\n+\n+2021-01-28  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/98827\n+\t* gcc.target/powerpc/fold-vec-insert-char-p8.c: Adjust ilp32.\n+\t* gcc.target/powerpc/fold-vec-insert-char-p9.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-double.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-float-p8.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-float-p9.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-int-p8.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-int-p9.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-longlong.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-short-p8.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-short-p9.c: Likewise.\n+\t* gcc.target/powerpc/pr79251.p8.c: Likewise.\n+\t* gcc.target/powerpc/pr79251.p9.c: Likewise.\n+\t* gcc.target/powerpc/vsx-builtin-7.c: Likewise.\n+\t* gcc.target/powerpc/pr79251-run.c: Build and run with vsx\n+\toption.\n+\n+2021-01-28  Xing GUO  <higuoxing@gmail.com>\n+\n+\t* gcc.target/riscv/attribute-18.c: New test.\n+\n 2021-01-27  Harris Snyder  <hsnyder@structura.bio>\n \n \t* gfortran.dg/ISO_Fortran_binding_18.c: New test."}, {"sha": "e7b7ed0c7ee46918b54580c041a1a6740da9c34c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=85d04a2ecb75fb67f2d72f0ff2a34cee92acd7b8", "patch": "@@ -1,3 +1,21 @@\n+2021-01-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/bits/numeric_traits.h: Update copyright\n+\tdates.\n+\t* include/experimental/bits/simd.h: Likewise.\n+\t* include/experimental/bits/simd_builtin.h: Likewise.\n+\t* include/experimental/bits/simd_converter.h: Likewise.\n+\t* include/experimental/bits/simd_detail.h: Likewise.\n+\t* include/experimental/bits/simd_fixed_size.h: Likewise.\n+\t* include/experimental/bits/simd_math.h: Likewise.\n+\t* include/experimental/bits/simd_neon.h: Likewise.\n+\t* include/experimental/bits/simd_ppc.h: Likewise.\n+\t* include/experimental/bits/simd_scalar.h: Likewise.\n+\t* include/experimental/bits/simd_x86.h: Likewise.\n+\t* include/experimental/bits/simd_x86_conversions.h: Likewise.\n+\t* include/experimental/simd: Likewise.\n+\t* testsuite/experimental/simd/*: Likewise.\n+\n 2021-01-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Replace invalid entity."}]}