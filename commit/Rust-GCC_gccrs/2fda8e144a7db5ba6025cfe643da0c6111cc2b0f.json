{"sha": "2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZkYThlMTQ0YTdkYjViYTYwMjVjZmU2NDNkYTBjNjExMWNjMmIwZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-09T03:33:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-09T03:33:44Z"}, "message": "cgraph.c (cgraph_add_to_same_comdat_group): New.\n\ngcc/\n\t* cgraph.c (cgraph_add_to_same_comdat_group): New.\n\t* cgraph.h: Declare it.\n\t* ipa.c (function_and_variable_visibility): Make sure thunks\n\thave the right visibility.\ngcc/cp/\n\t* method.c (use_thunk): Use cgraph_add_to_same_comdat_group.\n\t* optimize.c (maybe_clone_body): Likewise.\n\t* semantics.c (maybe_add_lambda_conv_op): Likewise.\n\nFrom-SVN: r176071", "tree": {"sha": "91cf7e9a3eeaae34dd4f07d9086f498096305f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91cf7e9a3eeaae34dd4f07d9086f498096305f0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8f8774a901e9645bfadc23d4e72be552b0e9b72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f8774a901e9645bfadc23d4e72be552b0e9b72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8f8774a901e9645bfadc23d4e72be552b0e9b72"}], "stats": {"total": 130, "additions": 68, "deletions": 62}, "files": [{"sha": "c2d866da6a2fa284fdaa6cc75f79770e5121e59a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "patch": "@@ -1,3 +1,10 @@\n+2011-07-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* cgraph.c (cgraph_add_to_same_comdat_group): New.\n+\t* cgraph.h: Declare it.\n+\t* ipa.c (function_and_variable_visibility): Make sure thunks\n+\thave the right visibility.\n+\n 2011-07-08  Richard Henderson  <rth@redhat.com>\n \n \tPR bootstrap/49680"}, {"sha": "09aad60c4d2d5fe6fc85a80ecd1975e3e2cbeaf1", "filename": "gcc/cgraph.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "patch": "@@ -1630,6 +1630,31 @@ cgraph_remove_node (struct cgraph_node *node)\n   free_nodes = node;\n }\n \n+/* Add NEW_ to the same comdat group that OLD is in.  */\n+\n+void\n+cgraph_add_to_same_comdat_group (struct cgraph_node *new_,\n+\t\t\t\t struct cgraph_node *old)\n+{\n+  gcc_assert (DECL_ONE_ONLY (old->decl));\n+  gcc_assert (!new_->same_comdat_group);\n+  gcc_assert (new_ != old);\n+\n+  DECL_COMDAT_GROUP (new_->decl) = DECL_COMDAT_GROUP (old->decl);\n+  new_->same_comdat_group = old;\n+  if (!old->same_comdat_group)\n+    old->same_comdat_group = new_;\n+  else\n+    {\n+      struct cgraph_node *n;\n+      for (n = old->same_comdat_group;\n+\t   n->same_comdat_group != old;\n+\t   n = n->same_comdat_group)\n+\t;\n+      n->same_comdat_group = new_;\n+    }\n+}\n+\n /* Remove the node from cgraph.  */\n \n void"}, {"sha": "5d6ff7caf61f5ce2bf0c37f91d66190731c80e82", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "patch": "@@ -469,6 +469,7 @@ void debug_cgraph_node (struct cgraph_node *);\n void cgraph_insert_node_to_hashtable (struct cgraph_node *node);\n void cgraph_remove_edge (struct cgraph_edge *);\n void cgraph_remove_node (struct cgraph_node *);\n+void cgraph_add_to_same_comdat_group (struct cgraph_node *, struct cgraph_node *);\n void cgraph_remove_node_and_inline_clones (struct cgraph_node *);\n void cgraph_release_function_body (struct cgraph_node *);\n void cgraph_node_remove_callees (struct cgraph_node *node);"}, {"sha": "3f776b097ad84bcfadd615693049e855f0ec8695", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "patch": "@@ -1,5 +1,9 @@\n 2011-07-08  Jason Merrill  <jason@redhat.com>\n \n+\t* method.c (use_thunk): Use cgraph_add_to_same_comdat_group.\n+\t* optimize.c (maybe_clone_body): Likewise.\n+\t* semantics.c (maybe_add_lambda_conv_op): Likewise.\n+\n \tPR c++/45603\n \t* decl.c (expand_static_init): Don't get confused by user\n \tdeclaration of __cxa_guard_acquire."}, {"sha": "3d272a33f6192b94966cb76b8389a4edfd98e3a9", "filename": "gcc/cp/method.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "patch": "@@ -283,7 +283,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n   tree virtual_offset;\n   HOST_WIDE_INT fixed_offset, virtual_value;\n   bool this_adjusting = DECL_THIS_THUNK_P (thunk_fndecl);\n-  struct cgraph_node *funcn;\n+  struct cgraph_node *funcn, *thunk_node;\n \n   /* We should have called finish_thunk to give it a name.  */\n   gcc_assert (DECL_NAME (thunk_fndecl));\n@@ -344,8 +344,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n   DECL_VISIBILITY_SPECIFIED (thunk_fndecl)\n     = DECL_VISIBILITY_SPECIFIED (function);\n   DECL_COMDAT (thunk_fndecl) = DECL_COMDAT (function);\n-  if (DECL_ONE_ONLY (function) || DECL_WEAK (function))\n-    make_decl_one_only (thunk_fndecl, cxx_comdat_group (thunk_fndecl));\n+  DECL_WEAK (thunk_fndecl) = DECL_WEAK (function);\n \n   if (flag_syntax_only)\n     {\n@@ -386,9 +385,11 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n   TREE_ASM_WRITTEN (thunk_fndecl) = 1;\n   funcn = cgraph_get_node (function);\n   gcc_checking_assert (funcn);\n-  cgraph_add_thunk (funcn, thunk_fndecl, function,\n-\t\t    this_adjusting, fixed_offset, virtual_value,\n-\t\t    virtual_offset, alias);\n+  thunk_node = cgraph_add_thunk (funcn, thunk_fndecl, function,\n+\t\t\t\t this_adjusting, fixed_offset, virtual_value,\n+\t\t\t\t virtual_offset, alias);\n+  if (DECL_ONE_ONLY (function))\n+    cgraph_add_to_same_comdat_group (thunk_node, funcn);\n \n   if (!this_adjusting\n       || !targetm.asm_out.can_output_mi_thunk (thunk_fndecl, fixed_offset,"}, {"sha": "6a06988039837a5abb1805bf406f1f25ed6bf49d", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "patch": "@@ -309,12 +309,12 @@ maybe_clone_body (tree fn)\n \t  && (!DECL_ONE_ONLY (fns[0])\n \t      || (HAVE_COMDAT_GROUP\n \t\t  && DECL_WEAK (fns[0])))\n-\t  && (flag_syntax_only\n-\t      /* Set linkage flags appropriately before\n-\t\t cgraph_create_function_alias looks at them.  */\n-\t      || (expand_or_defer_fn_1 (clone)\n-\t\t  && cgraph_same_body_alias (cgraph_get_node (fns[0]),\n-\t\t\t\t\t     clone, fns[0]))))\n+\t  && !flag_syntax_only\n+\t  /* Set linkage flags appropriately before\n+\t     cgraph_create_function_alias looks at them.  */\n+\t  && expand_or_defer_fn_1 (clone)\n+\t  && cgraph_same_body_alias (cgraph_get_node (fns[0]),\n+\t\t\t\t     clone, fns[0]))\n \t{\n \t  alias = true;\n \t  if (DECL_ONE_ONLY (fns[0]))\n@@ -324,13 +324,22 @@ maybe_clone_body (tree fn)\n \t\t *[CD][12]*.  */\n \t      comdat_group = cdtor_comdat_group (fns[1], fns[0]);\n \t      DECL_COMDAT_GROUP (fns[0]) = comdat_group;\n+\t      cgraph_add_to_same_comdat_group (cgraph_get_node (clone),\n+\t\t\t\t\t       cgraph_get_node (fns[0]));\n \t    }\n \t}\n \n       /* Build the delete destructor by calling complete destructor\n          and delete function.  */\n       if (idx == 2)\n-\tbuild_delete_destructor_body (clone, fns[1]);\n+\t{\n+\t  build_delete_destructor_body (clone, fns[1]);\n+\t  /* If *[CD][12]* dtors go into the *[CD]5* comdat group and dtor is\n+\t     virtual, it goes into the same comdat group as well.  */\n+\t  if (comdat_group)\n+\t    cgraph_add_to_same_comdat_group (cgraph_get_create_node (clone),\n+\t\t\t\t\t     cgraph_get_node (fns[0]));\n+\t}\n       else if (alias)\n \t/* No need to populate body.  */ ;\n       else\n@@ -419,24 +428,6 @@ maybe_clone_body (tree fn)\n     }\n   pop_from_top_level ();\n \n-  if (comdat_group)\n-    {\n-      DECL_COMDAT_GROUP (fns[1]) = comdat_group;\n-      if (fns[2])\n-\t{\n-\t  struct cgraph_node *base_dtor_node, *deleting_dtor_node;\n-\t  /* If *[CD][12]* dtors go into the *[CD]5* comdat group and dtor is\n-\t     virtual, it goes into the same comdat group as well.  */\n-\t  DECL_COMDAT_GROUP (fns[2]) = comdat_group;\n-\t  base_dtor_node = cgraph_get_node (fns[0]);\n-\t  deleting_dtor_node = cgraph_get_node (fns[2]);\n-\t  gcc_assert (base_dtor_node->same_comdat_group == NULL);\n-\t  gcc_assert (deleting_dtor_node->same_comdat_group == NULL);\n-\t  base_dtor_node->same_comdat_group = deleting_dtor_node;\n-\t  deleting_dtor_node->same_comdat_group = base_dtor_node;\n-\t}\n-    }\n-\n   /* We don't need to process the original function any further.  */\n   return 1;\n }"}, {"sha": "84b0dd8559fc1822072e022ff97fec6cbe692e5f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "patch": "@@ -8880,14 +8880,8 @@ maybe_add_lambda_conv_op (tree type)\n   if (DECL_ONE_ONLY (statfn))\n     {\n       /* Put the thunk in the same comdat group as the call op.  */\n-      struct cgraph_node *callop_node, *thunk_node;\n-      DECL_COMDAT_GROUP (statfn) = cxx_comdat_group (callop);\n-      callop_node = cgraph_get_create_node (callop);\n-      thunk_node = cgraph_get_create_node (statfn);\n-      gcc_assert (callop_node->same_comdat_group == NULL);\n-      gcc_assert (thunk_node->same_comdat_group == NULL);\n-      callop_node->same_comdat_group = thunk_node;\n-      thunk_node->same_comdat_group = callop_node;\n+      cgraph_add_to_same_comdat_group (cgraph_get_create_node (statfn),\n+\t\t\t\t       cgraph_get_create_node (callop));\n     }\n   body = begin_function_body ();\n   compound_stmt = begin_compound_stmt (0);"}, {"sha": "9d54811e5c9e8eef6c2b11fde45a0eca31ef82f2", "filename": "gcc/ipa.c", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fda8e144a7db5ba6025cfe643da0c6111cc2b0f/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=2fda8e144a7db5ba6025cfe643da0c6111cc2b0f", "patch": "@@ -865,31 +865,14 @@ function_and_variable_visibility (bool whole_program)\n \t  decl_node = cgraph_function_node (decl_node->callees->callee, NULL);\n \n \t  /* Thunks have the same visibility as function they are attached to.\n-\t     For some reason C++ frontend don't seem to care. I.e. in \n-\t     g++.dg/torture/pr41257-2.C the thunk is not comdat while function\n-\t     it is attached to is.\n-\n-\t     We also need to arrange the thunk into the same comdat group as\n-\t     the function it reffers to.  */\n+\t     Make sure the C++ front end set this up properly.  */\n \t  if (DECL_ONE_ONLY (decl_node->decl))\n \t    {\n-\t      DECL_COMDAT (node->decl) = DECL_COMDAT (decl_node->decl);\n-\t      DECL_COMDAT_GROUP (node->decl) = DECL_COMDAT_GROUP (decl_node->decl);\n-\t      if (DECL_ONE_ONLY (decl_node->decl) && !node->same_comdat_group)\n-\t\t{\n-\t\t  node->same_comdat_group = decl_node;\n-\t\t  if (!decl_node->same_comdat_group)\n-\t\t    decl_node->same_comdat_group = node;\n-\t\t  else\n-\t\t    {\n-\t\t      struct cgraph_node *n;\n-\t\t      for (n = decl_node->same_comdat_group;\n-\t\t\t   n->same_comdat_group != decl_node;\n-\t\t\t   n = n->same_comdat_group)\n-\t\t\t;\n-\t\t      n->same_comdat_group = node;\n-\t\t    }\n-\t\t}\n+\t      gcc_checking_assert (DECL_COMDAT (node->decl)\n+\t\t\t\t   == DECL_COMDAT (decl_node->decl));\n+\t      gcc_checking_assert (DECL_COMDAT_GROUP (node->decl)\n+\t\t\t\t   == DECL_COMDAT_GROUP (decl_node->decl));\n+\t      gcc_checking_assert (node->same_comdat_group);\n \t    }\n \t  if (DECL_EXTERNAL (decl_node->decl))\n \t    DECL_EXTERNAL (node->decl) = 1;"}]}