{"sha": "7485ace81de9ec9dd5c87edf67e359d31ce35a20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ4NWFjZTgxZGU5ZWM5ZGQ1Yzg3ZWRmNjdlMzU5ZDMxY2UzNWEyMA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@pc30.home", "date": "2020-02-28T18:30:57Z"}, "committer": {"name": "Paul Thomas", "email": "pault@pc30.home", "date": "2020-02-28T18:32:50Z"}, "message": "Commit for PR92785", "tree": {"sha": "34ca8a6f956e028704544051a20fcc3c480b178b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34ca8a6f956e028704544051a20fcc3c480b178b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7485ace81de9ec9dd5c87edf67e359d31ce35a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7485ace81de9ec9dd5c87edf67e359d31ce35a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7485ace81de9ec9dd5c87edf67e359d31ce35a20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7485ace81de9ec9dd5c87edf67e359d31ce35a20/comments", "author": null, "committer": null, "parents": [{"sha": "ab2f2e19111bfdd013697fdfd0cded5ab291a7a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab2f2e19111bfdd013697fdfd0cded5ab291a7a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab2f2e19111bfdd013697fdfd0cded5ab291a7a1"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "b9293de9da98d5e86322e19803cfa4e487dd3992", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7485ace81de9ec9dd5c87edf67e359d31ce35a20/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7485ace81de9ec9dd5c87edf67e359d31ce35a20/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7485ace81de9ec9dd5c87edf67e359d31ce35a20", "patch": "@@ -1,3 +1,9 @@\n+2020-02-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/92785\n+\t* trans-expr.c (gfc_conv_intrinsic_to_class): Renormalise non-\n+\tvariable expressions to be unity lbound based.\n+\n 2020-02-25  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* simplify.c (degrees_f): Remove unused code."}, {"sha": "9d0921eeed34a3bf2286acfdf53dff035a8f32c2", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7485ace81de9ec9dd5c87edf67e359d31ce35a20/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7485ace81de9ec9dd5c87edf67e359d31ce35a20/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7485ace81de9ec9dd5c87edf67e359d31ce35a20", "patch": "@@ -843,6 +843,7 @@ gfc_conv_intrinsic_to_class (gfc_se *parmse, gfc_expr *e,\n   tree ctree;\n   tree var;\n   tree tmp;\n+  int dim;\n \n   /* The intrinsic type needs to be converted to a temporary\n      CLASS object.  */\n@@ -892,6 +893,16 @@ gfc_conv_intrinsic_to_class (gfc_se *parmse, gfc_expr *e,\n \t  parmse->ss = ss;\n \t  parmse->use_offset = 1;\n \t  gfc_conv_expr_descriptor (parmse, e);\n+\n+\t  /* Array references with vector subscripts and non-variable expressions\n+\t     need be converted to a one-based descriptor.  */\n+\t  if (e->expr_type != EXPR_VARIABLE)\n+\t    {\n+\t      for (dim = 0; dim < e->rank; ++dim)\n+\t\tgfc_conv_shift_descriptor_lbound (&parmse->pre, parmse->expr,\n+\t\t\t\t\t\t  dim, gfc_index_one_node);\n+\t    }\n+\n \t  if (class_ts.u.derived->components->as->rank != e->rank)\n \t    {\n \t      tmp = fold_build1_loc (input_location, VIEW_CONVERT_EXPR,"}, {"sha": "c14935705fb446d324307dc29069d587845cbb12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7485ace81de9ec9dd5c87edf67e359d31ce35a20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7485ace81de9ec9dd5c87edf67e359d31ce35a20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7485ace81de9ec9dd5c87edf67e359d31ce35a20", "patch": "@@ -1,3 +1,8 @@\n+2020-02-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/92785\n+\t* gfortran.dg/unlimited_polymorphic_31.f03 : New test.\n+\n 2020-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tP1937R2 - Fixing inconsistencies between const{expr,eval} functions\n@@ -987,7 +992,7 @@\n \tPR c++/93559 - ICE with CONSTRUCTOR flags verification.\n \t* g++.dg/cpp0x/initlist119.C: New test.\n \t* g++.dg/cpp0x/initlist120.C: New test.\n-\t\n+\n 2020-02-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/93557"}, {"sha": "dd47c34989e74876ece0c2c8ccdde709642e42d8", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_31.f03", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7485ace81de9ec9dd5c87edf67e359d31ce35a20/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_31.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7485ace81de9ec9dd5c87edf67e359d31ce35a20/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_31.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_31.f03?ref=7485ace81de9ec9dd5c87edf67e359d31ce35a20", "patch": "@@ -0,0 +1,55 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR92785, where the array passed to 'write scalar' was not\n+! normalised to LBOUND = 1.\n+!\n+! Contributed by  <urbanjost@comcast.net>\n+!\n+   program tst\n+      use iso_fortran_env, only : compiler_version, compiler_options\n+      implicit none\n+      integer :: i\n+      integer :: ibad=0\n+      integer :: iarr(10) = [(i*10, i = 1,size (iarr))]\n+      character(len=:), allocatable :: line\n+      character(len=*), parameter :: expected = '10 20 30 40 50 60 70 80 90 100'\n+      character(len=*), parameter :: expected_minus = '-10 -20 -30 -40 -50 -60 -70 -80 -90 -100'\n+      print '(4a)', &\n+         'This file was compiled by ', compiler_version(), &\n+         ' using the options ',        compiler_options()\n+      call write_row ('iarr                   ', iarr)                    ! pass in the array, OK\n+      call write_row ('iarr+0                 ', iarr+0)                  ! pass in an expression, NOT OK\n+      call write_row ('-iarr                  ', -iarr)                   ! pass in an expression, NOT OK\n+      call write_row ('iarr(::1)              ', iarr(::1))               ! pass in the array, OK\n+      call write_row ('[iarr(::1)]            ', [iarr(::1)])             ! pass in compound constructor, NOT OK\n+      call write_row ('[(i*10,i=1,size(iarr))]', [(i*10,i=1,size(iarr))]) ! pass in constructor, OK\n+      call write_row ('10*[(i,i=1,size(iarr))]', 10*[(i,i=1,size(iarr))]) ! pass in constructor, OK\n+      if (ibad .gt. 0) stop 'FAILED'\n+   contains\n+      subroutine write_scalar (g1)\n+         class(*) :: g1\n+         character(len = 20) :: word\n+         select type(g1)\n+          type is (integer)\n+            write (word, '(i0)') g1\n+            line = line // trim( word) // ' '\n+         end select\n+      end subroutine write_scalar\n+      subroutine write_row (string,array)\n+         character(len = *) :: string\n+         class(*) :: array(:)\n+         integer  :: i\n+         line = ''\n+         do i = 1, size (array)\n+            call write_scalar (array(i))\n+         enddo\n+         if (expected .eq. line) then\n+            write (*, *) string, ':GOOD'\n+         else if (expected_minus .eq. line) then\n+            write (*, *) string, ':GOOD'\n+         else\n+            write (*, *) string, ':BAD. EXPECTED [', expected, '] got [', trim (line),']'\n+            ibad = ibad + 1\n+         endif\n+      end subroutine write_row\n+   end program tst"}]}