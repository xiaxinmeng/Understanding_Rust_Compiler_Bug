{"sha": "7b9361409dda228eedb13a3abe547c3cafbe957b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I5MzYxNDA5ZGRhMjI4ZWVkYjEzYTNhYmU1NDdjM2NhZmJlOTU3Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-09-15T16:15:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-09-15T16:15:46Z"}, "message": "invoke.texi: Document -std=c++17 and -std=gnu++17 and document c++1z and gnu++1z as deprecated.\n\n\t* doc/invoke.texi: Document -std=c++17 and -std=gnu++17 and document\n\tc++1z and gnu++1z as deprecated.  Change other references to\n\t-std=c++1z to -std=c++17 and -std=gnu++1z to -std=gnu++17.\n\tChange -Wc++1z-compat to -Wc++17-compat.\n\t* doc/cpp.texi: Document -std=c++17 defines __cplusplus 201703L.\n\t* dwarf2out.c (highest_c_language): Handle C++17.\n\t(gen_compile_unit_die): Likewise.\nc-family/\n\t* c.opt (Wc++1z-compat): Change from option to undocumented alias.\n\t(Wc++17-compat): Change from undocumented alias to option.\n\t(Wnoexcept-type): Enable by Wc++17-compat instead of Wc++1z-compat,\n\tchange C++1z to C++17 in description.\n\t(std=c++1z, std=gnu++1z): Change from option to undocumented\n\tdeprecated alias.\n\t(std=c++17, std=gnu++17): Change from undocumented alias to option.\n\tAdjust description.\n\t* c-common.h (enum cxx_dialect): Rename cxx1z to cxx17.\n\t* c-opts.c (set_std_cxx1z): Rename to ...\n\t(set_std_cxx17): ... this.\n\t(c_common_handle_option): Rename OPT_std_c__1z to OPT_std_c__17\n\tand OPT_std_gnu__1z to OPT_std_gnu__17.  Adjust set_std_cxx1z\n\tcaller.  \n\t(c_common_post_options): Use cxx17 instead of cxx1z.  Adjust\n\tcomments.\ncp/\n\t* decl.c (redeclaration_error_message): Use cxx17 instead of cxx1z,\n\tadjust diagnostics refering to C++1z or -std=gnu++1z or -std=c++1z\n\tto C++17 or -std=gnu++17 or -std=c++17.  Adjust comments.\n\t(cxx_init_decl_processing, next_initializable_field,\n\tis_direct_enum_init, check_initializer, cp_finish_decl,\n\tmark_inline_variable, grokdeclarator, grokparms, xref_basetypes,\n\tfinish_function): Likewise.\n\t* cp-tree.h (DECL_INLINE_VAR_P): Likewise.\n\t* pt.c (mark_template_parm, convert_nontype_argument,\n\tinstantiate_class_template_1, type_unification_real, unify,\n\tget_partial_spec_bindings, dependent_type_p_r): Likewise.\n\t* typeck.c (cp_build_unary_op): Likewise.\n\t* constexpr.c (var_in_maybe_constexpr_fn): Likewise.\n\t* call.c (build_user_type_conversion_1, build_over_call,\n\tbuild_special_member_call): Likewise.\n\t* lambda.c (begin_lambda_type): Likewise.\n\t* typeck2.c (process_init_constructor_record): Likewise.\n\t* class.c (build_base_field, finalize_literal_type_property,\n\texplain_non_literal_class): Likewise.\n\t* parser.c (cp_parser_diagnose_invalid_type_name,\n\tcp_parser_primary_expression, cp_parser_lambda_introducer,\n\tcp_parser_lambda_declarator_opt, cp_parser_selection_statement,\n\tcp_convert_range_for, cp_parser_perform_range_for_lookup,\n\tcp_parser_decomposition_declaration, cp_parser_linkage_specification,\n\tcp_parser_static_assert, cp_parser_simple_type_specifier,\n\tcp_parser_namespace_definition, cp_parser_using_declaration,\n\tcp_parser_init_declarator, cp_parser_type_parameter_key,\n\tcp_parser_exception_specification_opt, cp_parser_std_attribute_spec,\n\tcp_parser_constructor_declarator_p): Likewise.\n\t* mangle.c (struct globals): Rename need_cxx1z_warning to\n\tneed_cxx17_warning.\n\t(write_exception_spec, start_mangling, mangle_decl): Likewise.\n\t* Make-lang.in (check-c++1z): Rename to check-c++17, depend on\n\tit.\n\t(check-c++17): New goal.  Use 17 instead of 1z.\n\t(check-c++-all): Use 17 instead of 1z.\ntestsuite/\n\t* lib/g++-dg.exp (g++-dg-runtest): Use 17 instead of 1z.\n\t* lib/target-supports.exp (check_effective_target_c++14): Use\n\tcheck_effective_target_c++17 instead of check_effective_target_c++1z.\n\t(check_effective_target_c++14_down): Likewise.\n\t(check_effective_target_c++1z_only): Rename to ...\n\t(check_effective_target_c++17_only): ... this.\n\t(check_effective_target_c++1z): Rename to ...\n\t(check_effective_target_c++17): ... this.\n\t* g++.dg/debug/dwarf2/inline-var-1.C: Use -std=c++17 or -std=gnu++17\n\tinstead of -std=c++1z or -std=gnu++1z.  Use c++17 instead of c++1z\n\tand c++17_only instead of c++1z_only.  Adjust expected diagnostics\n\tand comments refering to 1z to 17.\n\t* g++.dg/debug/dwarf2/inline-var-2.C: Likewise.\n\t* g++.dg/template/partial5.C: Likewise.\n\t* g++.dg/template/nontype8.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type5.C: Likewise.\n\t* g++.dg/cpp1z/nontype3a.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda4.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type16.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction32.C: Likewise.\n\t* g++.dg/cpp1z/pr78771.C: Likewise.\n\t* g++.dg/cpp1z/elide1.C: Likewise.\n\t* g++.dg/cpp1z/fold3.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction2.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type12.C: Likewise.\n\t* g++.dg/cpp1z/inline-var2.C: Likewise.\n\t* g++.dg/cpp1z/eval-order2.C: Likewise.\n\t* g++.dg/cpp1z/decomp21.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda11.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda9.C: Likewise.\n\t* g++.dg/cpp1z/utf8-neg.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction41.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction23.C: Likewise.\n\t* g++.dg/cpp1z/nodiscard3.C: Likewise.\n\t* g++.dg/cpp1z/static_assert-nomsg.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type9.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction21.C: Likewise.\n\t* g++.dg/cpp1z/range-for1.C: Likewise.\n\t* g++.dg/cpp1z/init-statement4.C: Likewise.\n\t* g++.dg/cpp1z/udlit-utf8char.C: Likewise.\n\t* g++.dg/cpp1z/decomp30.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction39.C: Likewise.\n\t* g++.dg/cpp1z/register2.C: Likewise.\n\t* g++.dg/cpp1z/decomp9.C: Likewise.\n\t* g++.dg/cpp1z/regress1.C: Likewise.\n\t* g++.dg/cpp1z/direct-enum-init1.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction30.C: Likewise.\n\t* g++.dg/cpp1z/abbrev2.C: Likewise.\n\t* g++.dg/cpp1z/nontype-auto6.C: Likewise.\n\t* g++.dg/cpp1z/regress2.C: Likewise.\n\t* g++.dg/cpp1z/decomp16.C: Likewise.\n\t* g++.dg/cpp1z/bool-increment1.C: Likewise.\n\t* g++.dg/cpp1z/aligned-new1.C: Likewise.\n\t* g++.dg/cpp1z/decomp3.C: Likewise.\n\t* g++.dg/cpp1z/register1.C: Likewise.\n\t* g++.dg/cpp1z/namespace-attribs.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction1.C: Likewise.\n\t* g++.dg/cpp1z/decomp10.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-if11.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda10.C: Likewise.\n\t* g++.dg/cpp1z/decomp27.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type2.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda6.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction9.C: Likewise.\n\t* g++.dg/cpp1z/attributes-enum-1.C: Likewise.\n\t* g++.dg/cpp1z/decomp11.C: Likewise.\n\t* g++.dg/cpp1z/aligned-new3.C: Likewise.\n\t* g++.dg/cpp1z/utf8-2.C: Likewise.\n\t* g++.dg/cpp1z/lambda-this3.C: Likewise.\n\t* g++.dg/cpp1z/decomp-constexpr1.C: Likewise.\n\t* g++.dg/cpp1z/byte1.C: Likewise.\n\t* g++.dg/cpp1z/nontype-auto9.C: Likewise.\n\t* g++.dg/cpp1z/aggr-base4.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda1.C: Likewise.\n\t* g++.dg/cpp1z/nontype-auto3.C: Likewise.\n\t* g++.dg/cpp1z/utf8-2a.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda7.C: Likewise.\n\t* g++.dg/cpp1z/aggr-base6.C: Likewise.\n\t* g++.dg/cpp1z/cplusplus.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction20.C: Likewise.\n\t* g++.dg/cpp1z/aggr-base2.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction6.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type3.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction31.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction25.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction18.C: Likewise.\n\t* g++.dg/cpp1z/fold9.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type8.C: Likewise.\n\t* g++.dg/cpp1z/abbrev1.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-if10.C: Likewise.\n\t* g++.dg/cpp1z/utf8.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type7.C: Likewise.\n\t* g++.dg/cpp1z/aggr-base3.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda8.C: Likewise.\n\t* g++.dg/cpp1z/init-statement2.C: Likewise.\n\t* g++.dg/cpp1z/nontype-auto4.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-if12.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction40.C: Likewise.\n\t* g++.dg/cpp1z/nontype3.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction14.C: Likewise.\n\t* g++.dg/cpp1z/fold7.C: Likewise.\n\t* g++.dg/cpp1z/nontype2.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction15.C: Likewise.\n\t* g++.dg/cpp1z/nested-namespace-def1.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction13.C: Likewise.\n\t* g++.dg/cpp1z/aligned-new7.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type1.C: Likewise.\n\t* g++.dg/cpp1z/nontype1.C: Likewise.\n\t* g++.dg/cpp1z/init-statement5.C: Likewise.\n\t* g++.dg/cpp1z/nontype-auto2.C: Likewise.\n\t* g++.dg/cpp1z/decomp17.C: Likewise.\n\t* g++.dg/cpp1z/fold4.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda2.C: Likewise.\n\t* g++.dg/cpp1z/fold7a.C: Likewise.\n\t* g++.dg/cpp1z/nontype-auto5.C: Likewise.\n\t* g++.dg/cpp1z/init-statement7.C: Likewise.\n\t* g++.dg/cpp1z/aggr-base5.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda5.C: Likewise.\n\t* g++.dg/cpp1z/pr79143.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction38.C: Likewise.\n\t* g++.dg/cpp1z/nontype-auto8.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction12.C: Likewise.\n\t* g++.dg/cpp1z/decomp20.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction22.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction29.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction8.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction43.C: Likewise.\n\t* g++.dg/cpp1z/feat-cxx1z.C: Likewise.\n\t* g++.dg/cpp1z/fold8.C: Likewise.\n\t* g++.dg/cpp1z/init-statement3.C: Likewise.\n\t* g++.dg/cpp1z/nontype-auto10.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction36.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type17.C: Likewise.\n\t* g++.dg/cpp1z/fallthrough1.C: Likewise.\n\t* g++.dg/cpp1z/fold1.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction26.C: Likewise.\n\t* g++.dg/cpp1z/fold-ice1.C: Likewise.\n\t* g++.dg/cpp1z/fold5.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction34.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type6.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction7.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction16.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction10.C: Likewise.\n\t* g++.dg/cpp1z/eval-order3.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda13.C: Likewise.\n\t* g++.dg/cpp1z/aggr-base2a.C: Likewise.\n\t* g++.dg/cpp1z/nontype-auto1.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda3.C: Likewise.\n\t* g++.dg/cpp1z/nontype-auto7.C: Likewise.\n\t* g++.dg/cpp1z/decomp15.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type4.C: Likewise.\n\t* g++.dg/cpp1z/fold-mangle.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction35.C: Likewise.\n\t* g++.dg/cpp1z/decomp4.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction42.C: Likewise.\n\t* g++.dg/cpp1z/init-statement8.C: Likewise.\n\t* g++.dg/cpp1z/inline-var1a.C: Likewise.\n\t* g++.dg/cpp1z/init-statement6.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction17.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction28.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction27.C: Likewise.\n\t* g++.dg/cpp1z/decomp-bitfield1.C: Likewise.\n\t* g++.dg/cpp1z/attributes-enum-1a.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction11.C: Likewise.\n\t* g++.dg/cpp1z/constexpr-lambda12.C: Likewise.\n\t* g++.dg/cpp1z/init-statement9.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction19.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction5.C: Likewise.\n\t* g++.dg/cpp1z/fold2.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction33.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction24.C: Likewise.\n\t* g++.dg/cpp1z/aggr-base1.C: Likewise.\n\t* g++.dg/cpp1z/fold6.C: Likewise.\n\t* g++.dg/cpp1z/decomp12.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction4.C: Likewise.\n\t* g++.dg/cpp1z/inline-var1.C: Likewise.\n\t* g++.dg/cpp1z/aligned-new2.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction3.C: Likewise.\n\t* g++.dg/other/error3.C: Likewise.\n\t* g++.dg/init/new25.C: Likewise.\n\t* g++.dg/init/new13.C: Likewise.\n\t* g++.dg/tls/diag-2.C: Likewise.\n\t* g++.dg/tls/diag-4.C: Likewise.\n\t* g++.dg/opt/noreturn-1.C: Likewise.\n\t* g++.dg/eh/async-unwind2.C: Likewise.\n\t* g++.dg/eh/spec9.C: Likewise.\n\t* g++.dg/eh/spec7.C: Likewise.\n\t* g++.dg/eh/template1.C: Likewise.\n\t* g++.dg/eh/cond4.C: Likewise.\n\t* g++.dg/eh/pr41819.C: Likewise.\n\t* g++.dg/eh/delete1.C: Likewise.\n\t* g++.dg/eh/spec3.C: Likewise.\n\t* g++.dg/eh/forced4.C: Likewise.\n\t* g++.dg/eh/spec2.C: Likewise.\n\t* g++.dg/eh/shadow1.C: Likewise.\n\t* g++.dg/eh/pr38662.C: Likewise.\n\t* g++.dg/eh/ehopt1.C: Likewise.\n\t* g++.dg/eh/spec8.C: Likewise.\n\t* g++.dg/eh/init-temp2.C: Likewise.\n\t* g++.dg/rtti/crash3.C: Likewise.\n\t* g++.dg/warn/Wreturn-type-3.C: Likewise.\n\t* g++.dg/warn/register-parm-1.C: Likewise.\n\t* g++.dg/warn/register-var-2.C: Likewise.\n\t* g++.dg/gcov/gcov-7.C: Likewise.\n\t* g++.dg/tree-ssa/pr45605.C: Likewise.\n\t* g++.dg/cpp/pr23827_cxx98_neg.C: Likewise.\n\t* g++.dg/lookup/exception1.C: Likewise.\n\t* g++.dg/ubsan/pr79589.C: Likewise.\n\t* g++.dg/tm/pr47340.C: Likewise.\n\t* g++.dg/tm/pr46567.C: Likewise.\n\t* g++.dg/expr/bitfield5.C: Likewise.\n\t* g++.dg/expr/bool1.C: Likewise.\n\t* g++.dg/expr/lval3.C: Likewise.\n\t* g++.dg/expr/lval4.C: Likewise.\n\t* g++.dg/expr/bitfield4.C: Likewise.\n\t* g++.dg/expr/bitfield6.C: Likewise.\n\t* g++.dg/expr/bool3.C: Likewise.\n\t* g++.dg/ext/has_nothrow_constructor.C: Likewise.\n\t* g++.dg/ext/has_nothrow_copy-7.C: Likewise.\n\t* g++.dg/ext/has_nothrow_copy-1.C: Likewise.\n\t* g++.dg/ext/has_nothrow_copy-2.C: Likewise.\n\t* g++.dg/ext/has_nothrow_copy-4.C: Likewise.\n\t* g++.dg/ext/has_nothrow_copy-5.C: Likewise.\n\t* g++.dg/ext/has_nothrow_copy-6.C: Likewise.\n\t* g++.dg/ext/has_nothrow_assign.C: Likewise.\n\t* g++.dg/parse/register1.C: Likewise.\n\t* g++.dg/parse/error15.C: Likewise.\n\t* g++.dg/parse/linkage2.C: Likewise.\n\t* g++.dg/concepts/intro2.C: Likewise.\n\t* g++.dg/concepts/class.C: Likewise.\n\t* g++.dg/concepts/traits1.C: Likewise.\n\t* g++.dg/concepts/req5.C: Likewise.\n\t* g++.dg/concepts/var-concept5.C: Likewise.\n\t* g++.dg/concepts/fn-concept2.C: Likewise.\n\t* g++.dg/concepts/traits2.C: Likewise.\n\t* g++.dg/concepts/placeholder2.C: Likewise.\n\t* g++.dg/concepts/class6.C: Likewise.\n\t* g++.dg/concepts/memtmpl1.C: Likewise.\n\t* g++.dg/concepts/friend2.C: Likewise.\n\t* g++.dg/concepts/template-parm3.C: Likewise.\n\t* g++.dg/concepts/template-parm10.C: Likewise.\n\t* g++.dg/concepts/explicit-spec1.C: Likewise.\n\t* g++.dg/concepts/explicit-spec3.C: Likewise.\n\t* g++.dg/concepts/var-templ2.C: Likewise.\n\t* g++.dg/concepts/intro5.C: Likewise.\n\t* g++.dg/concepts/deduction-constraint1.C: Likewise.\n\t* g++.dg/concepts/iconv1.C: Likewise.\n\t* g++.dg/concepts/constrained-parm.C: Likewise.\n\t* g++.dg/concepts/template-template-parm1.C: Likewise.\n\t* g++.dg/concepts/var-concept3.C: Likewise.\n\t* g++.dg/concepts/class3.C: Likewise.\n\t* g++.dg/concepts/memfun2.C: Likewise.\n\t* g++.dg/concepts/req1.C: Likewise.\n\t* g++.dg/concepts/disjunction1.C: Likewise.\n\t* g++.dg/concepts/req17.C: Likewise.\n\t* g++.dg/concepts/pr65848.C: Likewise.\n\t* g++.dg/concepts/placeholder4.C: Likewise.\n\t* g++.dg/concepts/decl-diagnose.C: Likewise.\n\t* g++.dg/concepts/intro7.C: Likewise.\n\t* g++.dg/concepts/pr68683.C: Likewise.\n\t* g++.dg/concepts/partial-spec4.C: Likewise.\n\t* g++.dg/concepts/template-parm5.C: Likewise.\n\t* g++.dg/concepts/explicit-inst1.C: Likewise.\n\t* g++.dg/concepts/class-deduction1.C: Likewise.\n\t* g++.dg/concepts/class1.C: Likewise.\n\t* g++.dg/concepts/req15.C: Likewise.\n\t* g++.dg/concepts/memfun.C: Likewise.\n\t* g++.dg/concepts/pr68434.C: Likewise.\n\t* g++.dg/concepts/inherit-ctor4.C: Likewise.\n\t* g++.dg/concepts/partial-spec6.C: Likewise.\n\t* g++.dg/concepts/var-templ1.C: Likewise.\n\t* g++.dg/concepts/template-parm8.C: Likewise.\n\t* g++.dg/concepts/explicit-inst3.C: Likewise.\n\t* g++.dg/concepts/class4.C: Likewise.\n\t* g++.dg/concepts/req6.C: Likewise.\n\t* g++.dg/concepts/fn8.C: Likewise.\n\t* g++.dg/concepts/class5.C: Likewise.\n\t* g++.dg/concepts/placeholder5.C: Likewise.\n\t* g++.dg/concepts/req16.C: Likewise.\n\t* g++.dg/concepts/req10.C: Likewise.\n\t* g++.dg/concepts/var-concept2.C: Likewise.\n\t* g++.dg/concepts/auto3.C: Likewise.\n\t* g++.dg/concepts/generic-fn-err.C: Likewise.\n\t* g++.dg/concepts/pr65552.C: Likewise.\n\t* g++.dg/concepts/partial-concept-id2.C: Likewise.\n\t* g++.dg/concepts/fn1.C: Likewise.\n\t* g++.dg/concepts/partial-spec.C: Likewise.\n\t* g++.dg/concepts/template-parm12.C: Likewise.\n\t* g++.dg/concepts/diagnostic1.C: Likewise.\n\t* g++.dg/concepts/intro1.C: Likewise.\n\t* g++.dg/concepts/explicit-inst4.C: Likewise.\n\t* g++.dg/concepts/req18.C: Likewise.\n\t* g++.dg/concepts/explicit-spec5.C: Likewise.\n\t* g++.dg/concepts/var-concept6.C: Likewise.\n\t* g++.dg/concepts/fn9.C: Likewise.\n\t* g++.dg/concepts/req2.C: Likewise.\n\t* g++.dg/concepts/template-parm7.C: Likewise.\n\t* g++.dg/concepts/req14.C: Likewise.\n\t* g++.dg/concepts/template-parm6.C: Likewise.\n\t* g++.dg/concepts/variadic4.C: Likewise.\n\t* g++.dg/concepts/fn6.C: Likewise.\n\t* g++.dg/concepts/req-neg1.C: Likewise.\n\t* g++.dg/concepts/alias3.C: Likewise.\n\t* g++.dg/concepts/expression2.C: Likewise.\n\t* g++.dg/concepts/partial-spec3.C: Likewise.\n\t* g++.dg/concepts/expression3.C: Likewise.\n\t* g++.dg/concepts/memfun-err.C: Likewise.\n\t* g++.dg/concepts/pr66091.C: Likewise.\n\t* g++.dg/concepts/explicit-spec2.C: Likewise.\n\t* g++.dg/concepts/equiv.C: Likewise.\n\t* g++.dg/concepts/friend1.C: Likewise.\n\t* g++.dg/concepts/fn4.C: Likewise.\n\t* g++.dg/concepts/var-templ3.C: Likewise.\n\t* g++.dg/concepts/explicit-inst2.C: Likewise.\n\t* g++.dg/concepts/alias2.C: Likewise.\n\t* g++.dg/concepts/regress/alias-decl-42.C: Likewise.\n\t* g++.dg/concepts/placeholder6.C: Likewise.\n\t* g++.dg/concepts/fn10.C: Likewise.\n\t* g++.dg/concepts/req3.C: Likewise.\n\t* g++.dg/concepts/variadic2.C: Likewise.\n\t* g++.dg/concepts/pr65636.C: Likewise.\n\t* g++.dg/concepts/intro6.C: Likewise.\n\t* g++.dg/concepts/class2.C: Likewise.\n\t* g++.dg/concepts/fn2.C: Likewise.\n\t* g++.dg/concepts/req20.C: Likewise.\n\t* g++.dg/concepts/req8.C: Likewise.\n\t* g++.dg/concepts/placeholder1.C: Likewise.\n\t* g++.dg/concepts/pr65854.C: Likewise.\n\t* g++.dg/concepts/member-concept.C: Likewise.\n\t* g++.dg/concepts/template-parm2.C: Likewise.\n\t* g++.dg/concepts/variadic1.C: Likewise.\n\t* g++.dg/concepts/fn7.C: Likewise.\n\t* g++.dg/concepts/intro4.C: Likewise.\n\t* g++.dg/concepts/req13.C: Likewise.\n\t* g++.dg/concepts/inherit-ctor3.C: Likewise.\n\t* g++.dg/concepts/explicit-spec6.C: Likewise.\n\t* g++.dg/concepts/auto1.C: Likewise.\n\t* g++.dg/concepts/alias1.C: Likewise.\n\t* g++.dg/concepts/fn-concept1.C: Likewise.\n\t* g++.dg/concepts/template-parm11.C: Likewise.\n\t* g++.dg/concepts/explicit-spec4.C: Likewise.\n\t* g++.dg/concepts/partial-concept-id1.C: Likewise.\n\t* g++.dg/concepts/req9.C: Likewise.\n\t* g++.dg/concepts/req4.C: Likewise.\n\t* g++.dg/concepts/pr65681.C: Likewise.\n\t* g++.dg/concepts/req7.C: Likewise.\n\t* g++.dg/concepts/req12.C: Likewise.\n\t* g++.dg/concepts/fn5.C: Likewise.\n\t* g++.dg/concepts/alias4.C: Likewise.\n\t* g++.dg/concepts/generic-fn.C: Likewise.\n\t* g++.dg/concepts/feature-macro.C: Likewise.\n\t* g++.dg/concepts/req19.C: Likewise.\n\t* g++.dg/concepts/placeholder3.C: Likewise.\n\t* g++.dg/concepts/intro3.C: Likewise.\n\t* g++.dg/concepts/partial-spec5.C: Likewise.\n\t* g++.dg/concepts/template-parm4.C: Likewise.\n\t* g++.dg/concepts/dr1430.C: Likewise.\n\t* g++.dg/concepts/pr65634.C: Likewise.\n\t* g++.dg/concepts/var-concept4.C: Likewise.\n\t* g++.dg/concepts/pr67249.C: Likewise.\n\t* g++.dg/concepts/expression.C: Likewise.\n\t* g++.dg/concepts/pr65575.C: Likewise.\n\t* g++.dg/concepts/partial-spec2.C: Likewise.\n\t* g++.dg/concepts/template-parm9.C: Likewise.\n\t* g++.dg/concepts/inherit-ctor1.C: Likewise.\n\t* g++.dg/concepts/equiv2.C: Likewise.\n\t* g++.dg/concepts/req11.C: Likewise.\n\t* g++.dg/concepts/template-parm1.C: Likewise.\n\t* g++.dg/concepts/inherit-ctor2.C: Likewise.\n\t* g++.dg/concepts/var-concept1.C: Likewise.\n\t* g++.dg/concepts/fn3.C: Likewise.\n\t* g++.dg/torture/pr46364.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-alloca-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-fastcall-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-vararg-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-vararg-2.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-global-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-thiscall-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-inline-2.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-inline-1.C: Likewise.\n\t* g++.dg/torture/pr52918-1.C: Likewise.\n\t* g++.dg/torture/pr49394.C: Likewise.\n\t* g++.dg/torture/pr57190.C: Likewise.\n\t* g++.dg/cpp0x/static_assert8.C: Likewise.\n\t* g++.dg/cpp0x/noexcept19.C: Likewise.\n\t* g++.dg/cpp0x/variadic-throw.C: Likewise.\n\t* g++.dg/cpp0x/variadic73.C: Likewise.\n\t* g++.dg/cpp0x/noexcept02.C: Likewise.\n\t* g++.dg/cpp0x/defaulted23.C: Likewise.\n\t* g++.dg/cpp0x/noexcept08.C: Likewise.\n\t* g++.dg/cpp0x/auto9.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-eh2.C: Likewise.\n\t* g++.dg/cpp0x/error5.C: Likewise.\n\t* c-c++-common/gomp/atomic-12.c: Likewise.\n\t* c-c++-common/gomp/atomic-13.c: Likewise.\n\t* c-c++-common/gomp/atomic-14.c: Likewise.\n\t* c-c++-common/Wvarargs-2.c: Likewise.\n\t* c-c++-common/Wvarargs.c: Likewise.\n\t* c-c++-common/vector-subscript-2.c: Likewise.\n\t* g++.old-deja/g++.robertl/eb123.C: Likewise.\n\t* g++.old-deja/g++.eh/tmpl3.C: Likewise.\n\t* g++.old-deja/g++.eh/cleanup2.C: Likewise.\n\t* g++.old-deja/g++.eh/badalloc1.C: Likewise.\n\t* g++.old-deja/g++.eh/throw2.C: Likewise.\n\t* g++.old-deja/g++.eh/throw1.C: Likewise.\n\t* g++.old-deja/g++.eh/tmpl1.C: Likewise.\n\t* g++.old-deja/g++.other/new7.C: Likewise.\n\t* g++.old-deja/g++.other/crash30.C: Likewise.\n\t* g++.old-deja/g++.other/regstack.C: Likewise.\n\t* g++.old-deja/g++.other/crash28.C: Likewise.\n\t* g++.old-deja/g++.jason/bool5.C: Likewise.\n\t* g++.old-deja/g++.mike/p10416.C: Likewise.\n\t* g++.old-deja/g++.mike/eh25.C: Likewise.\n\t* g++.old-deja/g++.mike/eh55.C: Likewise.\nlibcpp/\n\t* include/cpplib.h (enum c_lang): Rename CLK_GNUCXX1Z\n\tto CLK_GNUCXX17 and CLK_CXX1Z to CLK_CXX17.\n\t* init.c (lang_defaults, cpp_init_builtins): Likewise.\n\t* expr.c (cpp_classify_number): Use C++17 instead of C++1z\n\tin diagnostics.\nlibstdc++-v3/\n\t* testsuite/libstdc++-prettyprinters/cxx17.cc: Use -std=c++17 or\n\t-std=gnu++17 instead of -std=c++1z or -std=gnu++1z.  Use c++17 instead\n\tof c++1z and c++17_only instead of c++1z_only.  Adjust expected\n\tdiagnostics and comments refering to 1z to 17.\n\t* testsuite/30_threads/lock_guard/cons/deduction.cc: Likewise.\n\t* testsuite/30_threads/scoped_lock/cons/deduction.cc: Likewise.\n\t* testsuite/30_threads/scoped_lock/cons/1.cc: Likewise.\n\t* testsuite/30_threads/scoped_lock/requirements/typedefs.cc: Likewise.\n\t* testsuite/30_threads/scoped_lock/requirements/explicit_instantiation.cc:\n\tLikewise.\n\t* testsuite/30_threads/unique_lock/cons/deduction.cc: Likewise.\n\t* testsuite/18_support/launder/1.cc (test02): Likewise.\n\t* testsuite/18_support/launder/requirements_neg.cc: Likewise.\n\t* testsuite/18_support/launder/requirements.cc: Likewise.\n\t* testsuite/18_support/byte/requirements.cc: Likewise.\n\t* testsuite/18_support/byte/ops.cc: Likewise.\n\t* testsuite/18_support/byte/global_neg.cc: Likewise.\n\t* testsuite/18_support/uncaught_exceptions/uncaught_exceptions.cc:\n\tLikewise.\n\t* testsuite/27_io/types/4.cc: Likewise.\n\t* testsuite/25_algorithms/sample/81221.cc: Likewise.\n\t* testsuite/25_algorithms/sample/1.cc: Likewise.\n\t* testsuite/25_algorithms/sample/2.cc: Likewise.\n\t* testsuite/25_algorithms/search/searcher.cc: Likewise.\n\t* testsuite/28_regex/basic_regex/ctors/deduction.cc: Likewise.\n\t* testsuite/experimental/filesystem/path/construct/string_view.cc:\n\tLikewise.\n\t* testsuite/24_iterators/range_access_cpp17.cc: Likewise.\n\t* testsuite/24_iterators/container_access.cc: Likewise.\n\t* testsuite/ext/pb_ds/regression/hash_map_rand.cc: Likewise.\n\t* testsuite/ext/pb_ds/regression/trie_set_rand.cc: Likewise.\n\t* testsuite/ext/pb_ds/regression/hash_set_rand.cc: Likewise.\n\t* testsuite/ext/pb_ds/regression/list_update_set_rand.cc: Likewise.\n\t* testsuite/ext/pb_ds/regression/list_update_map_rand.cc: Likewise.\n\t* testsuite/ext/pb_ds/regression/priority_queue_rand.cc: Likewise.\n\t* testsuite/ext/pb_ds/regression/tree_set_rand.cc: Likewise.\n\t* testsuite/ext/pb_ds/regression/tree_map_rand.cc: Likewise.\n\t* testsuite/ext/pb_ds/regression/trie_map_rand.cc: Likewise.\n\t* testsuite/20_util/shared_ptr/casts/reinterpret.cc: Likewise.\n\t* testsuite/20_util/shared_ptr/cons/deduction.cc: Likewise.\n\t* testsuite/20_util/shared_ptr/cons/array.cc: Likewise.\n\t* testsuite/20_util/shared_ptr/observers/array.cc (struct A): Likewise.\n\t* testsuite/20_util/pair/cons/deduction.cc: Likewise.\n\t* testsuite/20_util/variant/deduction.cc: Likewise.\n\t* testsuite/20_util/tuple/78939.cc: Likewise.\n\t* testsuite/20_util/tuple/cons/deduction.cc: Likewise.\n\t* testsuite/20_util/void_t/1.cc: Likewise.\n\t* testsuite/20_util/duration/arithmetic/constexpr_c++17.cc: Likewise.\n\t* testsuite/20_util/unique_ptr/cons/deduction_neg.cc: Likewise.\n\t* testsuite/20_util/addressof/requirements/constexpr.cc: Likewise.\n\t* testsuite/20_util/weak_ptr/cons/deduction.cc: Likewise.\n\t* testsuite/20_util/has_unique_object_representations/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/20_util/has_unique_object_representations/requirements/explicit_instantiation.cc:\n\tLikewise.\n\t* testsuite/20_util/has_unique_object_representations/value.cc:\n\tLikewise.\n\t* testsuite/20_util/time_point/arithmetic/constexpr.cc: Likewise.\n\t* testsuite/20_util/function_objects/invoke/59768.cc: Likewise.\n\t* testsuite/20_util/function_objects/mem_fn/80478.cc: Likewise.\n\t* testsuite/20_util/function/cons/deduction.cc: Likewise.\n\t* testsuite/20_util/specialized_algorithms/memory_management_tools/destroy_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/is_aggregate/requirements/typedefs.cc: Likewise.\n\t* testsuite/20_util/is_aggregate/requirements/explicit_instantiation.cc:\n\tLikewise.\n\t* testsuite/20_util/is_aggregate/value.cc: Likewise.\n\t* testsuite/26_numerics/lcm/1.cc: Likewise.\n\t* testsuite/26_numerics/lcm/lcm_neg.cc: Likewise.\n\t* testsuite/26_numerics/gcd/1.cc: Likewise.\n\t* testsuite/26_numerics/gcd/gcd_neg.cc: Likewise.\n\t* testsuite/26_numerics/valarray/deduction.cc: Likewise.\n\t* testsuite/26_numerics/headers/cmath/types_std_c++0x_neg.cc: Likewise.\n\t* testsuite/26_numerics/headers/cmath/hypot.cc: Likewise.\n\t* testsuite/23_containers/queue/members/emplace_cxx17_return.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/cons/deduction.cc: Likewise.\n\t* testsuite/23_containers/array/cons/deduction_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/modifiers/emplace/cxx17_return.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/cons/deduction.cc: Likewise.\n\t* testsuite/23_containers/stack/members/emplace_cxx17_return.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/modifiers/emplace/cxx17_return.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/cons/deduction.cc: Likewise.\n\t* testsuite/23_containers/forward_list/modifiers/emplace_cxx17_return.cc:\n\tLikewise.\n\t* testsuite/23_containers/forward_list/cons/deduction.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/allocator/ext_ptr.cc: Likewise.\n\t* testsuite/23_containers/vector/modifiers/emplace/cxx17_return.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/cons/deduction.cc: Likewise.\n\t* testsuite/23_containers/vector/bool/emplace_cxx17_return.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/cons/char/9.cc: Likewise.\n\t* testsuite/21_strings/basic_string/cons/char/deduction.cc: Likewise.\n\t* testsuite/21_strings/basic_string/cons/char/79162.cc: Likewise.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/9.cc: Likewise.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/79162.cc: Likewise.\n\t* testsuite/21_strings/basic_string_view/modifiers/swap/char/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/modifiers/swap/wchar_t/1.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/compare/char/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/compare/char/70483.cc:\n\tLikewise.\n\t* testsuite/21_strings/basic_string_view/operations/compare/wchar_t/2.cc:\n\tLikewise.\n\t* testsuite/21_strings/char_traits/requirements/constexpr_functions_c++17.cc:\n\tLikewise.\n\nFrom-SVN: r252826", "tree": {"sha": "ab528462949004d5d5871813f8f16e42bae6dd2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab528462949004d5d5871813f8f16e42bae6dd2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b9361409dda228eedb13a3abe547c3cafbe957b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9361409dda228eedb13a3abe547c3cafbe957b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b9361409dda228eedb13a3abe547c3cafbe957b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9361409dda228eedb13a3abe547c3cafbe957b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1189286e5dedc4ab4aacda95216b047017cd3cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1189286e5dedc4ab4aacda95216b047017cd3cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1189286e5dedc4ab4aacda95216b047017cd3cf"}], "stats": {"total": 2265, "additions": 1439, "deletions": 826}, "files": [{"sha": "71191121ce31ff8b965c0adc9e20ecf789c24718", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,3 +1,13 @@\n+2017-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* doc/invoke.texi: Document -std=c++17 and -std=gnu++17 and document\n+\tc++1z and gnu++1z as deprecated.  Change other references to\n+\t-std=c++1z to -std=c++17 and -std=gnu++1z to -std=gnu++17.\n+\tChange -Wc++1z-compat to -Wc++17-compat.\n+\t* doc/cpp.texi: Document -std=c++17 defines __cplusplus 201703L.\n+\t* dwarf2out.c (highest_c_language): Handle C++17.\n+\t(gen_compile_unit_die): Likewise.\n+\n 2017-09-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/82192"}, {"sha": "4fffa3156444524ef5a8983059147bc5aeacd039", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,3 +1,22 @@\n+2017-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c.opt (Wc++1z-compat): Change from option to undocumented alias.\n+\t(Wc++17-compat): Change from undocumented alias to option.\n+\t(Wnoexcept-type): Enable by Wc++17-compat instead of Wc++1z-compat,\n+\tchange C++1z to C++17 in description.\n+\t(std=c++1z, std=gnu++1z): Change from option to undocumented\n+\tdeprecated alias.\n+\t(std=c++17, std=gnu++17): Change from undocumented alias to option.\n+\tAdjust description.\n+\t* c-common.h (enum cxx_dialect): Rename cxx1z to cxx17.\n+\t* c-opts.c (set_std_cxx1z): Rename to ...\n+\t(set_std_cxx17): ... this.\n+\t(c_common_handle_option): Rename OPT_std_c__1z to OPT_std_c__17\n+\tand OPT_std_gnu__1z to OPT_std_gnu__17.  Adjust set_std_cxx1z\n+\tcaller.  \n+\t(c_common_post_options): Use cxx17 instead of cxx1z.  Adjust\n+\tcomments.\n+\n 2017-09-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* c-attribs.c (common_handle_aligned_attribute): Don't warn"}, {"sha": "d57829bc89a02f486bb6d597c7846de5095869fc", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -702,8 +702,8 @@ enum cxx_dialect {\n   cxx11 = cxx0x,\n   /* C++14 */\n   cxx14,\n-  /* C++1z (C++17?) */\n-  cxx1z\n+  /* C++17 */\n+  cxx17\n };\n \n /* The C++ dialect being used. C++98 is the default.  */"}, {"sha": "cdbcd6cf8740e723f1631a35c1f72f292639bffd", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -110,7 +110,7 @@ static void handle_OPT_d (const char *);\n static void set_std_cxx98 (int);\n static void set_std_cxx11 (int);\n static void set_std_cxx14 (int);\n-static void set_std_cxx1z (int);\n+static void set_std_cxx17 (int);\n static void set_std_c89 (int, int);\n static void set_std_c99 (int);\n static void set_std_c11 (int);\n@@ -631,10 +631,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \tset_std_cxx14 (code == OPT_std_c__14 /* ISO */);\n       break;\n \n-    case OPT_std_c__1z:\n-    case OPT_std_gnu__1z:\n+    case OPT_std_c__17:\n+    case OPT_std_gnu__17:\n       if (!preprocessing_asm_p)\n-\tset_std_cxx1z (code == OPT_std_c__1z /* ISO */);\n+\tset_std_cxx17 (code == OPT_std_c__17 /* ISO */);\n       break;\n \n     case OPT_std_c90:\n@@ -886,7 +886,7 @@ c_common_post_options (const char **pfilename)\n \n   /* -Wregister is enabled by default in C++17.  */\n   if (!global_options_set.x_warn_register)\n-    warn_register = cxx_dialect >= cxx1z;\n+    warn_register = cxx_dialect >= cxx17;\n \n   /* Declone C++ 'structors if -Os.  */\n   if (flag_declone_ctor_dtor == -1)\n@@ -923,9 +923,9 @@ c_common_post_options (const char **pfilename)\n   if (!global_options_set.x_flag_new_inheriting_ctors)\n     flag_new_inheriting_ctors = abi_version_at_least (11);\n \n-  /* For GCC 7, only enable DR150 resolution by default if -std=c++1z.  */\n+  /* For GCC 7, only enable DR150 resolution by default if -std=c++17.  */\n   if (!global_options_set.x_flag_new_ttp)\n-    flag_new_ttp = (cxx_dialect >= cxx1z);\n+    flag_new_ttp = (cxx_dialect >= cxx17);\n \n   if (cxx_dialect >= cxx11)\n     {\n@@ -938,7 +938,7 @@ c_common_post_options (const char **pfilename)\n \twarn_narrowing = 1;\n \n       /* Unless -f{,no-}ext-numeric-literals has been used explicitly,\n-\t for -std=c++{11,14,1z} default to -fno-ext-numeric-literals.  */\n+\t for -std=c++{11,14,17} default to -fno-ext-numeric-literals.  */\n       if (flag_iso && !global_options_set.x_flag_ext_numeric_literals)\n \tcpp_opts->ext_numeric_literals = 0;\n     }\n@@ -949,7 +949,7 @@ c_common_post_options (const char **pfilename)\n      for earlier C++ as well, so chaining works as expected.  */\n   if (c_dialect_cxx ()\n       && flag_strong_eval_order == -1)\n-    flag_strong_eval_order = (cxx_dialect >= cxx1z ? 2 : 1);\n+    flag_strong_eval_order = (cxx_dialect >= cxx17 ? 2 : 1);\n \n   /* Global sized deallocation is new in C++14.  */\n   if (flag_sized_deallocation == -1)\n@@ -1581,7 +1581,7 @@ set_std_cxx11 (int iso)\n   lang_hooks.name = \"GNU C++11\";\n }\n \n-/* Set the C++ 2014 draft standard (without GNU extensions if ISO).  */\n+/* Set the C++ 2014 standard (without GNU extensions if ISO).  */\n static void\n set_std_cxx14 (int iso)\n {\n@@ -1596,20 +1596,20 @@ set_std_cxx14 (int iso)\n   lang_hooks.name = \"GNU C++14\";\n }\n \n-/* Set the C++ 201z draft standard (without GNU extensions if ISO).  */\n+/* Set the C++ 2017 standard (without GNU extensions if ISO).  */\n static void\n-set_std_cxx1z (int iso)\n+set_std_cxx17 (int iso)\n {\n-  cpp_set_lang (parse_in, iso ? CLK_CXX1Z: CLK_GNUCXX1Z);\n+  cpp_set_lang (parse_in, iso ? CLK_CXX17: CLK_GNUCXX17);\n   flag_no_gnu_keywords = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n   /* C++11 includes the C99 standard library.  */\n   flag_isoc94 = 1;\n   flag_isoc99 = 1;\n   flag_isoc11 = 1;\n-  cxx_dialect = cxx1z;\n-  lang_hooks.name = \"GNU C++14\"; /* Pretend C++14 till standarization.  */\n+  cxx_dialect = cxx17;\n+  lang_hooks.name = \"GNU C++17\";\n }\n \n /* Args to -d specify what to dump.  Silently ignore"}, {"sha": "ed5938f0ea4a0b5db54af4cc03ffb79ba109b6d2", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -378,11 +378,11 @@ C++ ObjC++ Var(warn_cxx14_compat) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn about C++ constructs whose meaning differs between ISO C++ 2011 and ISO C++ 2014.\n \n Wc++1z-compat\n-C++ ObjC++ Var(warn_cxx1z_compat) Warning LangEnabledBy(C++ ObjC++,Wall)\n-Warn about C++ constructs whose meaning differs between ISO C++ 2014 and (forthcoming) ISO C++ 201z(7?).\n+C++ ObjC++ Warning Alias(Wc++17-compat) Undocumented\n \n Wc++17-compat\n-C++ ObjC++ Warning Alias(Wc++1z-compat) Undocumented\n+C++ ObjC++ Var(warn_cxx17_compat) Warning LangEnabledBy(C++ ObjC++,Wall)\n+Warn about C++ constructs whose meaning differs between ISO C++ 2014 and ISO C++ 2017.\n \n Wcast-qual\n C ObjC C++ ObjC++ Var(warn_cast_qual) Warning\n@@ -809,8 +809,8 @@ C++ ObjC++ Var(warn_noexcept) Warning\n Warn when a noexcept expression evaluates to false even though the expression can't actually throw.\n \n Wnoexcept-type\n-C++ ObjC++ Warning Var(warn_noexcept_type) LangEnabledBy(C++ ObjC++,Wabi || Wc++1z-compat)\n-Warn if C++1z noexcept function type will change the mangled name of a symbol.\n+C++ ObjC++ Warning Var(warn_noexcept_type) LangEnabledBy(C++ ObjC++,Wabi || Wc++17-compat)\n+Warn if C++17 noexcept function type will change the mangled name of a symbol.\n \n Wnon-template-friend\n C++ ObjC++ Var(warn_nontemplate_friend) Init(1) Warning\n@@ -1925,11 +1925,12 @@ C++ ObjC++\n Conform to the ISO 2014 C++ standard.\n \n std=c++1z\n-C++ ObjC++\n-Conform to the ISO 2017(?) C++ draft standard (experimental and incomplete support).\n+C++ ObjC++ Alias(std=c++17) Undocumented\n+Deprecated in favor of -std=c++17.\n \n std=c++17\n-C++ ObjC++ Alias(std=c++1z) Undocumented\n+C++ ObjC++\n+Conform to the ISO 2017 C++ standard.\n \n std=c11\n C ObjC\n@@ -1982,11 +1983,12 @@ C++ ObjC++\n Conform to the ISO 2014 C++ standard with GNU extensions.\n \n std=gnu++1z\n-C++ ObjC++\n-Conform to the ISO 201z(7?) C++ draft standard with GNU extensions (experimental and incomplete support).\n+C++ ObjC++ Alias(std=gnu++17) Undocumented\n+Deprecated in favor of -std=gnu++17.\n \n std=gnu++17\n-C++ ObjC++ Alias(std=gnu++1z) Undocumented\n+C++ ObjC++\n+Conform to the ISO 2017 C++ standard with GNU extensions.\n \n std=gnu11\n C ObjC"}, {"sha": "0a3b80f451805d1a035610dbc0ee0ebb6dc6ec68", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,3 +1,42 @@\n+2017-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* decl.c (redeclaration_error_message): Use cxx17 instead of cxx1z,\n+\tadjust diagnostics refering to C++1z or -std=gnu++1z or -std=c++1z\n+\tto C++17 or -std=gnu++17 or -std=c++17.  Adjust comments.\n+\t(cxx_init_decl_processing, next_initializable_field,\n+\tis_direct_enum_init, check_initializer, cp_finish_decl,\n+\tmark_inline_variable, grokdeclarator, grokparms, xref_basetypes,\n+\tfinish_function): Likewise.\n+\t* cp-tree.h (DECL_INLINE_VAR_P): Likewise.\n+\t* pt.c (mark_template_parm, convert_nontype_argument,\n+\tinstantiate_class_template_1, type_unification_real, unify,\n+\tget_partial_spec_bindings, dependent_type_p_r): Likewise.\n+\t* typeck.c (cp_build_unary_op): Likewise.\n+\t* constexpr.c (var_in_maybe_constexpr_fn): Likewise.\n+\t* call.c (build_user_type_conversion_1, build_over_call,\n+\tbuild_special_member_call): Likewise.\n+\t* lambda.c (begin_lambda_type): Likewise.\n+\t* typeck2.c (process_init_constructor_record): Likewise.\n+\t* class.c (build_base_field, finalize_literal_type_property,\n+\texplain_non_literal_class): Likewise.\n+\t* parser.c (cp_parser_diagnose_invalid_type_name,\n+\tcp_parser_primary_expression, cp_parser_lambda_introducer,\n+\tcp_parser_lambda_declarator_opt, cp_parser_selection_statement,\n+\tcp_convert_range_for, cp_parser_perform_range_for_lookup,\n+\tcp_parser_decomposition_declaration, cp_parser_linkage_specification,\n+\tcp_parser_static_assert, cp_parser_simple_type_specifier,\n+\tcp_parser_namespace_definition, cp_parser_using_declaration,\n+\tcp_parser_init_declarator, cp_parser_type_parameter_key,\n+\tcp_parser_exception_specification_opt, cp_parser_std_attribute_spec,\n+\tcp_parser_constructor_declarator_p): Likewise.\n+\t* mangle.c (struct globals): Rename need_cxx1z_warning to\n+\tneed_cxx17_warning.\n+\t(write_exception_spec, start_mangling, mangle_decl): Likewise.\n+\t* Make-lang.in (check-c++1z): Rename to check-c++17, depend on\n+\tit.\n+\t(check-c++17): New goal.  Use 17 instead of 1z.\n+\t(check-c++-all): Use 17 instead of 1z.\n+\n 2017-09-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/81314"}, {"sha": "24e9d7ced5b37df3ca596179b708049816be71ec", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -169,13 +169,14 @@ c++.srcman: doc/g++.1\n # entry point.  We feed the former to the latter here.\n check-c++ : check-g++\n \n-# Run the testsuite in C++1z mode.\n-check-c++1z:\n-\t$(MAKE) RUNTESTFLAGS=\"$(RUNTESTFLAGS)\" GXX_TESTSUITE_STDS=1z check-g++\n+# Run the testsuite in C++17 mode.\n+check-c++1z: check-c++17\n+check-c++17:\n+\t$(MAKE) RUNTESTFLAGS=\"$(RUNTESTFLAGS)\" GXX_TESTSUITE_STDS=17 check-g++\n \n # Run the testsuite in all standard conformance levels.\n check-c++-all:\n-\t$(MAKE) RUNTESTFLAGS=\"$(RUNTESTFLAGS) --stds=98,11,14,1z,concepts\" check-g++\n+\t$(MAKE) RUNTESTFLAGS=\"$(RUNTESTFLAGS) --stds=98,11,14,17,concepts\" check-g++\n \n # Run the testsuite with garbage collection at every opportunity.\n check-g++-strict-gc:"}, {"sha": "4fa0d035c804b9360d5c19832102bf7f768b1e8a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -3743,7 +3743,7 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags,\n   /* FIXME P0135 doesn't say what to do in C++17 about list-initialization from\n      a single element.  For now, let's handle constructors as before and also\n      consider conversion operators from the element.  */\n-  if (cxx_dialect >= cxx1z\n+  if (cxx_dialect >= cxx17\n       && BRACE_ENCLOSED_INITIALIZER_P (expr)\n       && CONSTRUCTOR_NELTS (expr) == 1)\n     fromtype = TREE_TYPE (CONSTRUCTOR_ELT (expr, 0)->value);\n@@ -8035,7 +8035,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \n       /* In C++17 we shouldn't be copying a TARGET_EXPR except into a base\n \t subobject.  */\n-      if (CHECKING_P && cxx_dialect >= cxx1z)\n+      if (CHECKING_P && cxx_dialect >= cxx17)\n \tgcc_assert (TREE_CODE (arg) != TARGET_EXPR\n \t\t    /* It's from binding the ref parm to a packed field. */\n \t\t    || convs[0]->need_temporary_p\n@@ -8792,7 +8792,7 @@ build_special_member_call (tree instance, tree name, vec<tree, va_gc> **args,\n      of the destination, the initializer expression is used to initialize the\n      destination object.\"  Handle that here to avoid doing overload\n      resolution.  */\n-  if (cxx_dialect >= cxx1z\n+  if (cxx_dialect >= cxx17\n       && args && vec_safe_length (*args) == 1\n       && name == complete_ctor_identifier)\n     {"}, {"sha": "97e29c0604e028c52b7c502c28475cfe06989656", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -4317,7 +4317,7 @@ build_base_field (record_layout_info rli, tree binfo,\n \t back end issues with overlapping FIELD_DECLs, but that doesn't seem to\n \t be a problem anymore.  We need them to handle initialization of C++17\n \t aggregate bases.  */\n-      if (cxx_dialect >= cxx1z && !BINFO_VIRTUAL_P (binfo))\n+      if (cxx_dialect >= cxx17 && !BINFO_VIRTUAL_P (binfo))\n \t{\n \t  tree decl = build_base_field_1 (t, basetype, next_field);\n \t  DECL_FIELD_OFFSET (decl) = BINFO_OFFSET (binfo);\n@@ -5351,7 +5351,7 @@ finalize_literal_type_property (tree t)\n       || TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t))\n     CLASSTYPE_LITERAL_P (t) = false;\n   else if (CLASSTYPE_LITERAL_P (t) && LAMBDA_TYPE_P (t))\n-    CLASSTYPE_LITERAL_P (t) = (cxx_dialect >= cxx1z);\n+    CLASSTYPE_LITERAL_P (t) = (cxx_dialect >= cxx17);\n   else if (CLASSTYPE_LITERAL_P (t) && !TYPE_HAS_TRIVIAL_DFLT (t)\n \t   && CLASSTYPE_NON_AGGREGATE (t)\n \t   && !TYPE_HAS_CONSTEXPR_CTOR (t))\n@@ -5394,9 +5394,9 @@ explain_non_literal_class (tree t)\n     return;\n \n   inform (0, \"%q+T is not literal because:\", t);\n-  if (cxx_dialect < cxx1z && LAMBDA_TYPE_P (t))\n+  if (cxx_dialect < cxx17 && LAMBDA_TYPE_P (t))\n     inform (0, \"  %qT is a closure type, which is only literal in \"\n-\t    \"C++1z and later\", t);\n+\t    \"C++17 and later\", t);\n   else if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t))\n     inform (0, \"  %q+T has a non-trivial destructor\", t);\n   else if (CLASSTYPE_NON_AGGREGATE (t)"}, {"sha": "a89ee4993940fce562a803d38e557f359a20ad84", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -3304,7 +3304,7 @@ var_in_constexpr_fn (tree t)\n bool\n var_in_maybe_constexpr_fn (tree t)\n {\n-  if (cxx_dialect >= cxx1z\n+  if (cxx_dialect >= cxx17\n       && DECL_FUNCTION_SCOPE_P (t)\n       && LAMBDA_FUNCTION_P (DECL_CONTEXT (t)))\n     return true;"}, {"sha": "e5085989e7d90b11360e93ff7d4178387ec5d819", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -3884,7 +3884,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    declared with constexpr specifier are implicitly inline variables.  */\n #define DECL_INLINE_VAR_P(NODE) \\\n   (DECL_VAR_DECLARED_INLINE_P (NODE)\t\t\t\t\\\n-   || (cxx_dialect >= cxx1z\t\t\t\t\t\\\n+   || (cxx_dialect >= cxx17\t\t\t\t\t\\\n        && DECL_DECLARED_CONSTEXPR_P (NODE)\t\t\t\\\n        && DECL_CLASS_SCOPE_P (NODE)))\n "}, {"sha": "858747eecfc35c24e8de80f9bb2a947d1032f1f6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -2909,7 +2909,7 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n \t if the variable is defined within the class with constexpr\n \t specifier is declaration rather than definition (and\n \t deprecated).  */\n-      if (cxx_dialect >= cxx1z\n+      if (cxx_dialect >= cxx17\n \t  && DECL_CLASS_SCOPE_P (olddecl)\n \t  && DECL_DECLARED_CONSTEXPR_P (olddecl)\n \t  && !DECL_INITIAL (newdecl))\n@@ -4050,7 +4050,7 @@ cxx_init_decl_processing (void)\n   std_node = current_namespace;\n   pop_namespace ();\n \n-  flag_noexcept_type = (cxx_dialect >= cxx1z);\n+  flag_noexcept_type = (cxx_dialect >= cxx17);\n \n   c_common_nodes_and_builtins ();\n \n@@ -4150,7 +4150,7 @@ cxx_init_decl_processing (void)\n       aligned_new_threshold = 1;\n     }\n   if (aligned_new_threshold == -1)\n-    aligned_new_threshold = (cxx_dialect >= cxx1z) ? 1 : 0;\n+    aligned_new_threshold = (cxx_dialect >= cxx17) ? 1 : 0;\n   if (aligned_new_threshold == 1)\n     aligned_new_threshold = malloc_alignment () / BITS_PER_UNIT;\n \n@@ -5573,7 +5573,7 @@ next_initializable_field (tree field)\n \t && (TREE_CODE (field) != FIELD_DECL\n \t     || (DECL_C_BIT_FIELD (field) && !DECL_NAME (field))\n \t     || (DECL_ARTIFICIAL (field)\n-\t\t && !(cxx_dialect >= cxx1z && DECL_FIELD_IS_BASE (field)))))\n+\t\t && !(cxx_dialect >= cxx17 && DECL_FIELD_IS_BASE (field)))))\n     field = DECL_CHAIN (field);\n \n   return field;\n@@ -5585,7 +5585,7 @@ next_initializable_field (tree field)\n bool\n is_direct_enum_init (tree type, tree init)\n {\n-  if (cxx_dialect >= cxx1z\n+  if (cxx_dialect >= cxx17\n       && TREE_CODE (type) == ENUMERAL_TYPE\n       && ENUM_FIXED_UNDERLYING_TYPE_P (type)\n       && TREE_CODE (init) == CONSTRUCTOR\n@@ -6351,7 +6351,7 @@ check_initializer (tree decl, tree init, int flags, vec<tree, va_gc> **cleanups)\n \n       if (cxx_dialect < cxx11)\n \terror (\"initializer invalid for static member with constructor\");\n-      else if (cxx_dialect < cxx1z)\n+      else if (cxx_dialect < cxx17)\n \terror (\"non-constant in-class initialization invalid for static \"\n \t       \"member %qD\", decl);\n       else\n@@ -6727,9 +6727,9 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n      or local register variable extension.  */\n   if (VAR_P (decl) && DECL_REGISTER (decl) && asmspec_tree == NULL_TREE)\n     {\n-      if (cxx_dialect >= cxx1z)\n+      if (cxx_dialect >= cxx17)\n \tpedwarn (DECL_SOURCE_LOCATION (decl), OPT_Wregister,\n-\t\t \"ISO C++1z does not allow %<register%> storage \"\n+\t\t \"ISO C++17 does not allow %<register%> storage \"\n \t\t \"class specifier\");\n       else\n \twarning_at (DECL_SOURCE_LOCATION (decl), OPT_Wregister,\n@@ -9787,10 +9787,10 @@ mark_inline_variable (tree decl)\n \t     \"%qD declared at block scope\", decl);\n       inlinep = false;\n     }\n-  else if (cxx_dialect < cxx1z)\n+  else if (cxx_dialect < cxx17)\n     pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n \t     \"inline variables are only available \"\n-\t     \"with -std=c++1z or -std=gnu++1z\");\n+\t     \"with -std=c++17 or -std=gnu++17\");\n   if (inlinep)\n     {\n       retrofit_lang_decl (decl);\n@@ -10522,7 +10522,7 @@ grokdeclarator (const cp_declarator *declarator,\n   /* We might have ignored or rejected some of the qualifiers.  */\n   type_quals = cp_type_quals (type);\n \n-  if (cxx_dialect >= cxx1z && type && is_auto (type)\n+  if (cxx_dialect >= cxx17 && type && is_auto (type)\n       && innermost_code != cdk_function\n       && id_declarator && declarator != id_declarator)\n     if (tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (type))\n@@ -11730,7 +11730,7 @@ grokdeclarator (const cp_declarator *declarator,\n \terror (\"cannot use %<::%> in parameter declaration\");\n \n       if (type_uses_auto (type)\n-\t  && !(cxx_dialect >= cxx1z && template_parm_flag))\n+\t  && !(cxx_dialect >= cxx17 && template_parm_flag))\n \t{\n \t  if (cxx_dialect >= cxx14)\n \t    error (\"%<auto%> parameter not permitted in this context\");\n@@ -12063,7 +12063,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t  mark_inline_variable (decl);\n \n \t\tif (!DECL_VAR_DECLARED_INLINE_P (decl)\n-\t\t    && !(cxx_dialect >= cxx1z && constexpr_p))\n+\t\t    && !(cxx_dialect >= cxx17 && constexpr_p))\n \t\t  /* Even if there is an in-class initialization, DECL\n \t\t     is considered undefined until an out-of-class\n \t\t     definition is provided, unless this is an inline\n@@ -12332,9 +12332,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t/* Warn about register storage specifiers on PARM_DECLs.  */\n \tif (TREE_CODE (decl) == PARM_DECL)\n \t  {\n-\t    if (cxx_dialect >= cxx1z)\n+\t    if (cxx_dialect >= cxx17)\n \t      pedwarn (DECL_SOURCE_LOCATION (decl), OPT_Wregister,\n-\t\t       \"ISO C++1z does not allow %<register%> storage \"\n+\t\t       \"ISO C++17 does not allow %<register%> storage \"\n \t\t       \"class specifier\");\n \t    else\n \t      warning_at (DECL_SOURCE_LOCATION (decl), OPT_Wregister,\n@@ -12601,8 +12601,7 @@ grokparms (tree parmlist, tree *parms)\n \t    }\n \t  else if (abstract_virtuals_error (decl, type))\n \t    any_error = 1;  /* Seems like a good idea.  */\n-\t  else if (cxx_dialect < cxx1z\n-\t\t   && POINTER_TYPE_P (type))\n+\t  else if (cxx_dialect < cxx17 && POINTER_TYPE_P (type))\n \t    {\n \t      /* Before C++17 DR 393:\n \t\t [dcl.fct]/6, parameter types cannot contain pointers\n@@ -13803,7 +13802,7 @@ xref_basetypes (tree ref, tree base_list)\n \n       /* Before C++17, an aggregate cannot have base classes.  In C++17, an\n \t aggregate can't have virtual, private, or protected base classes.  */\n-      if (cxx_dialect < cxx1z\n+      if (cxx_dialect < cxx17\n \t  || access != access_public_node\n \t  || via_virtual)\n \tCLASSTYPE_NON_AGGREGATE (ref) = true;\n@@ -15574,7 +15573,7 @@ finish_function (int flags)\n     check_function_concept (fndecl);\n \n   /* Lambda closure members are implicitly constexpr if possible.  */\n-  if (cxx_dialect >= cxx1z\n+  if (cxx_dialect >= cxx17\n       && LAMBDA_TYPE_P (CP_DECL_CONTEXT (fndecl)))\n     DECL_DECLARED_CONSTEXPR_P (fndecl)\n       = ((processing_template_decl"}, {"sha": "e4412569a611012a67d2fd5c29450955d1ee9b62", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -155,7 +155,7 @@ begin_lambda_type (tree lambda)\n \n   /* In C++17, assume the closure is literal; we'll clear the flag later if\n      necessary.  */\n-  if (cxx_dialect >= cxx1z)\n+  if (cxx_dialect >= cxx17)\n     CLASSTYPE_LITERAL_P (type) = true;\n \n   /* Clear base types.  */"}, {"sha": "33cd00e33147ee00a222854773d370bf18c2423e", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -116,7 +116,7 @@ struct GTY(()) globals {\n   bool need_abi_warning;\n \n   /* True if the mangling will be different in C++17 mode.  */\n-  bool need_cxx1z_warning;\n+  bool need_cxx17_warning;\n };\n \n static GTY (()) globals G;\n@@ -362,7 +362,7 @@ write_exception_spec (tree spec)\n \n   if (!flag_noexcept_type)\n     {\n-      G.need_cxx1z_warning = true;\n+      G.need_cxx17_warning = true;\n       return;\n     }\n \n@@ -3666,7 +3666,7 @@ start_mangling (const tree entity)\n {\n   G.entity = entity;\n   G.need_abi_warning = false;\n-  G.need_cxx1z_warning = false;\n+  G.need_cxx17_warning = false;\n   obstack_free (&name_obstack, name_base);\n   mangle_obstack = &name_obstack;\n   name_base = obstack_alloc (&name_obstack, 0);\n@@ -3853,7 +3853,7 @@ mangle_decl (const tree decl)\n     }\n   SET_DECL_ASSEMBLER_NAME (decl, id);\n \n-  if (G.need_cxx1z_warning\n+  if (G.need_cxx17_warning\n       && (TREE_PUBLIC (decl) || DECL_REALLY_EXTERN (decl)))\n     warning_at (DECL_SOURCE_LOCATION (decl), OPT_Wnoexcept_type,\n \t\t\"mangled name for %qD will change in C++17 because the \""}, {"sha": "c9cb3cbe55bb1955f356544264cb359eb8440cc9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -3163,9 +3163,9 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n       error_at (location,\n \t\t\"invalid use of template-name %qE without an argument list\",\n \t\tdecl);\n-      if (DECL_CLASS_TEMPLATE_P (decl) && cxx_dialect < cxx1z)\n+      if (DECL_CLASS_TEMPLATE_P (decl) && cxx_dialect < cxx17)\n \tinform (location, \"class template argument deduction is only available \"\n-\t\t\"with -std=c++1z or -std=gnu++1z\");\n+\t\t\"with -std=c++17 or -std=gnu++17\");\n       inform (DECL_SOURCE_LOCATION (decl), \"%qD declared here\", decl);\n     }\n   else if (TREE_CODE (id) == BIT_NOT_EXPR)\n@@ -5034,10 +5034,10 @@ cp_parser_primary_expression (cp_parser *parser,\n \t  {\n \t    expr = cp_parser_fold_expression (parser, expr);\n \t    if (expr != error_mark_node\n-\t\t&& cxx_dialect < cxx1z\n+\t\t&& cxx_dialect < cxx17\n \t\t&& !in_system_header_at (input_location))\n \t      pedwarn (input_location, 0, \"fold-expressions only available \"\n-\t\t       \"with -std=c++1z or -std=gnu++1z\");\n+\t\t       \"with -std=c++17 or -std=gnu++17\");\n \t  }\n \telse\n \t  /* Let the front end know that this expression was\n@@ -10200,9 +10200,9 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t  && cp_lexer_nth_token_is_keyword (parser->lexer, 2, RID_THIS))\n \t{\n \t  location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n-\t  if (cxx_dialect < cxx1z)\n+\t  if (cxx_dialect < cxx17)\n \t    pedwarn (loc, 0, \"%<*this%> capture only available with \"\n-\t\t\t     \"-std=c++1z or -std=gnu++1z\");\n+\t\t\t     \"-std=c++17 or -std=gnu++17\");\n \t  cp_lexer_consume_token (parser->lexer);\n \t  cp_lexer_consume_token (parser->lexer);\n \t  add_capture (lambda_expr,\n@@ -10474,12 +10474,12 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \n     if (lambda_specs.locations[ds_constexpr])\n       {\n-\tif (cxx_dialect >= cxx1z)\n+\tif (cxx_dialect >= cxx17)\n \t  return_type_specs.locations[ds_constexpr]\n \t    = lambda_specs.locations[ds_constexpr];\n \telse\n \t  error_at (lambda_specs.locations[ds_constexpr], \"%<constexpr%> \"\n-\t\t    \"lambda only available with -std=c++1z or -std=gnu++1z\");\n+\t\t    \"lambda only available with -std=c++17 or -std=gnu++17\");\n       }\n \n     p = obstack_alloc (&declarator_obstack, 0);\n@@ -11284,9 +11284,9 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t  {\n \t    cx = true;\n \t    cp_token *tok = cp_lexer_consume_token (parser->lexer);\n-\t    if (cxx_dialect < cxx1z && !in_system_header_at (tok->location))\n+\t    if (cxx_dialect < cxx17 && !in_system_header_at (tok->location))\n \t      pedwarn (tok->location, 0, \"%<if constexpr%> only available \"\n-\t\t       \"with -std=c++1z or -std=gnu++1z\");\n+\t\t       \"with -std=c++17 or -std=gnu++17\");\n \t  }\n \n \t/* Look for the `('.  */\n@@ -11310,10 +11310,10 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \tif (cp_parser_init_statement_p (parser))\n \t  {\n \t    tree decl;\n-\t    if (cxx_dialect < cxx1z)\n+\t    if (cxx_dialect < cxx17)\n \t      pedwarn (cp_lexer_peek_token (parser->lexer)->location, 0,\n \t\t       \"init-statement in selection statements only available \"\n-\t\t       \"with -std=c++1z or -std=gnu++1z\");\n+\t\t       \"with -std=c++17 or -std=gnu++17\");\n \t    cp_parser_init_statement (parser, &decl);\n \t  }\n \n@@ -11884,7 +11884,7 @@ cp_convert_range_for (tree statement, tree range_decl, tree range_expr,\n \t\t  /*is_constant_init*/false, NULL_TREE,\n \t\t  LOOKUP_ONLYCONVERTING);\n \n-  if (cxx_dialect >= cxx1z)\n+  if (cxx_dialect >= cxx17)\n     iter_type = cv_unqualified (TREE_TYPE (end_expr));\n   end = build_decl (input_location, VAR_DECL,\n \t\t    get_identifier (\"__for_end\"), iter_type);\n@@ -12024,7 +12024,7 @@ cp_parser_perform_range_for_lookup (tree range, tree *begin, tree *end)\n \t     be the same, as required by the multiple auto declaration.  */\n \t  if (!same_type_p (iter_type, cv_unqualified (TREE_TYPE (*end))))\n \t    {\n-\t      if (cxx_dialect >= cxx1z\n+\t      if (cxx_dialect >= cxx17\n \t\t  && (build_x_binary_op (input_location, NE_EXPR,\n \t\t\t\t\t *begin, ERROR_MARK,\n \t\t\t\t\t *end, ERROR_MARK,\n@@ -13178,9 +13178,9 @@ cp_parser_decomposition_declaration (cp_parser *parser,\n \t}\n     }\n \n-  if (cxx_dialect < cxx1z)\n+  if (cxx_dialect < cxx17)\n     pedwarn (loc, 0, \"structured bindings only available with \"\n-\t\t     \"-std=c++1z or -std=gnu++1z\");\n+\t\t     \"-std=c++17 or -std=gnu++17\");\n \n   tree pushed_scope;\n   cp_declarator *declarator = make_declarator (cdk_decomp);\n@@ -13771,7 +13771,7 @@ cp_parser_linkage_specification (cp_parser* parser)\n \n    static_assert-declaration:\n      static_assert ( constant-expression , string-literal ) ; \n-     static_assert ( constant-expression ) ; (C++1Z)\n+     static_assert ( constant-expression ) ; (C++17)\n \n    If MEMBER_P, this static_assert is a class member.  */\n \n@@ -13812,10 +13812,10 @@ cp_parser_static_assert(cp_parser *parser, bool member_p)\n \n   if (cp_lexer_peek_token (parser->lexer)->type == CPP_CLOSE_PAREN)\n     {\n-      if (cxx_dialect < cxx1z)\n+      if (cxx_dialect < cxx17)\n \tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"static_assert without a message \"\n-\t\t \"only available with -std=c++1z or -std=gnu++1z\");\n+\t\t \"only available with -std=c++17 or -std=gnu++17\");\n       /* Eat the ')'  */\n       cp_lexer_consume_token (parser->lexer);\n       message = build_string (1, \"\");\n@@ -17040,7 +17040,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \n       /* Don't gobble tokens or issue error messages if this is an\n \t optional type-specifier.  */\n-      if ((flags & CP_PARSER_FLAGS_OPTIONAL) || cxx_dialect >= cxx1z)\n+      if ((flags & CP_PARSER_FLAGS_OPTIONAL) || cxx_dialect >= cxx17)\n \tcp_parser_parse_tentatively (parser);\n \n       token = cp_lexer_peek_token (parser->lexer);\n@@ -17088,10 +17088,10 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \t  && identifier_p (DECL_NAME (type)))\n \tmaybe_note_name_used_in_class (DECL_NAME (type), type);\n       /* If it didn't work out, we don't have a TYPE.  */\n-      if (((flags & CP_PARSER_FLAGS_OPTIONAL) || cxx_dialect >= cxx1z)\n+      if (((flags & CP_PARSER_FLAGS_OPTIONAL) || cxx_dialect >= cxx17)\n \t  && !cp_parser_parse_definitely (parser))\n \ttype = NULL_TREE;\n-      if (!type && cxx_dialect >= cxx1z)\n+      if (!type && cxx_dialect >= cxx17)\n \t{\n \t  if (flags & CP_PARSER_FLAGS_OPTIONAL)\n \t    cp_parser_parse_tentatively (parser);\n@@ -18425,10 +18425,10 @@ cp_parser_namespace_definition (cp_parser* parser)\n       if (cp_lexer_next_token_is_not (parser->lexer, CPP_SCOPE))\n \tbreak;\n   \n-      if (!nested_definition_count && cxx_dialect < cxx1z)\n+      if (!nested_definition_count && cxx_dialect < cxx17)\n         pedwarn (input_location, OPT_Wpedantic,\n                  \"nested namespace definitions only available with \"\n-                 \"-std=c++1z or -std=gnu++1z\");\n+                 \"-std=c++17 or -std=gnu++17\");\n \n       /* Nested namespace names can create new namespaces (unlike\n \t other qualified-ids).  */\n@@ -18657,11 +18657,11 @@ cp_parser_using_declaration (cp_parser* parser,\n   else if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))\n     {\n       cp_token *ell = cp_lexer_consume_token (parser->lexer);\n-      if (cxx_dialect < cxx1z\n+      if (cxx_dialect < cxx17\n \t  && !in_system_header_at (ell->location))\n \tpedwarn (ell->location, 0,\n \t\t \"pack expansion in using-declaration only available \"\n-\t\t \"with -std=c++1z or -std=gnu++1z\");\n+\t\t \"with -std=c++17 or -std=gnu++17\");\n       qscope = make_pack_expansion (qscope);\n     }\n \n@@ -18720,10 +18720,10 @@ cp_parser_using_declaration (cp_parser* parser,\n       && cp_lexer_next_token_is (parser->lexer, CPP_COMMA))\n     {\n       cp_token *comma = cp_lexer_consume_token (parser->lexer);\n-      if (cxx_dialect < cxx1z)\n+      if (cxx_dialect < cxx17)\n \tpedwarn (comma->location, 0,\n \t\t \"comma-separated list in using-declaration only available \"\n-\t\t \"with -std=c++1z or -std=gnu++1z\");\n+\t\t \"with -std=c++17 or -std=gnu++17\");\n       goto again;\n     }\n \n@@ -19317,7 +19317,7 @@ cp_parser_init_declarator (cp_parser* parser,\n       /* Handle C++17 deduction guides.  */\n       if (!decl_specifiers->type\n \t  && ctor_dtor_or_conv_p <= 0\n-\t  && cxx_dialect >= cxx1z)\n+\t  && cxx_dialect >= cxx17)\n \t{\n \t  cp_declarator *id = get_id_declarator (declarator);\n \t  tree name = id->u.id.unqualified_name;\n@@ -23085,12 +23085,12 @@ cp_parser_type_parameter_key (cp_parser* parser)\n   if ((tag_type = cp_parser_token_is_type_parameter_key (token)) != none_type)\n     {\n       cp_lexer_consume_token (parser->lexer);\n-      if (pedantic && tag_type == typename_type && cxx_dialect < cxx1z)\n+      if (pedantic && tag_type == typename_type && cxx_dialect < cxx17)\n \t/* typename is not allowed in a template template parameter\n-\t   by the standard until C++1Z.  */\n+\t   by the standard until C++17.  */\n \tpedwarn (token->location, OPT_Wpedantic, \n \t\t \"ISO C++ forbids typename key in template template parameter;\"\n-\t\t \" use -std=c++1z or -std=gnu++1z\");\n+\t\t \" use -std=c++17 or -std=gnu++17\");\n     }\n   else\n     cp_parser_error (parser, \"expected %<class%> or %<typename%>\");\n@@ -24122,9 +24122,9 @@ cp_parser_exception_specification_opt (cp_parser* parser)\n       /* Restore the saved message.  */\n       parser->type_definition_forbidden_message = saved_message;\n \n-      if (cxx_dialect >= cxx1z)\n+      if (cxx_dialect >= cxx17)\n \t{\n-\t  error_at (loc, \"ISO C++1z does not allow dynamic exception \"\n+\t  error_at (loc, \"ISO C++17 does not allow dynamic exception \"\n \t\t\t \"specifications\");\n \t  type_id_list = NULL_TREE;\n \t}\n@@ -24136,7 +24136,7 @@ cp_parser_exception_specification_opt (cp_parser* parser)\n   /* In C++17, throw() is equivalent to noexcept (true).  throw()\n      is deprecated in C++11 and above as well, but is still widely used,\n      so don't warn about it yet.  */\n-  else if (cxx_dialect >= cxx1z)\n+  else if (cxx_dialect >= cxx17)\n     type_id_list = noexcept_true_spec;\n   else\n     type_id_list = empty_except_spec;\n@@ -25133,11 +25133,11 @@ cp_parser_std_attribute_spec (cp_parser *parser)\n \t  if (attr_ns\n \t      && cp_lexer_nth_token_is (parser->lexer, 3, CPP_COLON))\n \t    {\n-\t      if (cxx_dialect < cxx1z\n+\t      if (cxx_dialect < cxx17\n \t\t  && !in_system_header_at (input_location))\n \t\tpedwarn (input_location, 0,\n \t\t\t \"attribute using prefix only available \"\n-\t\t\t \"with -std=c++1z or -std=gnu++1z\");\n+\t\t\t \"with -std=c++17 or -std=gnu++17\");\n \n \t      cp_lexer_consume_token (parser->lexer);\n \t      cp_lexer_consume_token (parser->lexer);\n@@ -26197,7 +26197,7 @@ cp_parser_constructor_declarator_p (cp_parser *parser, bool friend_p)\n      nested-name-specifier.  Except in C++17 mode, where we\n      might be declaring a guiding declaration.  */\n   if (!nested_name_specifier && outside_class_specifier_p\n-      && cxx_dialect < cxx1z)\n+      && cxx_dialect < cxx17)\n     constructor_p = false;\n   else if (nested_name_specifier == error_mark_node)\n     constructor_p = false;\n@@ -26228,7 +26228,7 @@ cp_parser_constructor_declarator_p (cp_parser *parser, bool friend_p)\n \t   };\n \n \t we must recognize that the nested `S' names a class.  */\n-      if (cxx_dialect >= cxx1z)\n+      if (cxx_dialect >= cxx17)\n \tcp_parser_parse_tentatively (parser);\n \n       tree type_decl;\n@@ -26240,7 +26240,7 @@ cp_parser_constructor_declarator_p (cp_parser *parser, bool friend_p)\n \t\t\t\t\t/*class_head_p=*/false,\n \t\t\t\t\t/*is_declaration=*/false);\n \n-      if (cxx_dialect >= cxx1z\n+      if (cxx_dialect >= cxx17\n \t  && !cp_parser_parse_definitely (parser))\n \t{\n \t  type_decl = NULL_TREE;"}, {"sha": "f12ab2605d876fd1c30e83b38f8a437eca35a08c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -4551,7 +4551,7 @@ mark_template_parm (tree t, void* data)\n     }\n \n   /* In C++17 the type of a non-type argument is a deduced context.  */\n-  if (cxx_dialect >= cxx1z\n+  if (cxx_dialect >= cxx17\n       && TREE_CODE (t) == TEMPLATE_PARM_INDEX)\n     for_each_template_parm (TREE_TYPE (t),\n \t\t\t    &mark_template_parm,\n@@ -6475,7 +6475,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t   to leave it in that form rather than lower it to a\n \t   CONSTRUCTOR.  */;\n       else if (INTEGRAL_OR_ENUMERATION_TYPE_P (type)\n-\t       || cxx_dialect >= cxx1z)\n+\t       || cxx_dialect >= cxx17)\n \t{\n \t  /* C++17: A template-argument for a non-type template-parameter shall\n \t     be a converted constant expression (8.20) of the type of the\n@@ -6663,7 +6663,7 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t\t       orig_expr, type, decl);\n \t      return NULL_TREE;\n \t    }\n-\t  else if ((cxx_dialect >= cxx11 && cxx_dialect < cxx1z)\n+\t  else if ((cxx_dialect >= cxx11 && cxx_dialect < cxx17)\n \t\t   && decl_linkage (decl) == lk_none)\n \t    {\n \t      if (complain & tf_error)\n@@ -10817,7 +10817,7 @@ instantiate_class_template_1 (tree type)\n       tree decl = lambda_function (type);\n       if (decl)\n \t{\n-\t  if (cxx_dialect >= cxx1z)\n+\t  if (cxx_dialect >= cxx17)\n \t    CLASSTYPE_LITERAL_P (type) = true;\n \n \t  if (!DECL_TEMPLATE_INFO (decl)\n@@ -19543,7 +19543,7 @@ type_unification_real (tree tparms,\n       tsubst_flags_t complain = (explain_p\n \t\t\t\t ? tf_warning_or_error\n \t\t\t\t : tf_none);\n-      bool tried_array_deduction = (cxx_dialect < cxx1z);\n+      bool tried_array_deduction = (cxx_dialect < cxx17);\n \n       for (i = 0; i < ntparms; i++)\n \t{\n@@ -20918,7 +20918,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n       else if (uses_template_parms (tparm))\n \t{\n \t  /* We haven't deduced the type of this parameter yet.  */\n-\t  if (cxx_dialect >= cxx1z\n+\t  if (cxx_dialect >= cxx17\n \t      /* We deduce from array bounds in try_array_deduction.  */\n \t      && !(strict & UNIFY_ALLOW_INTEGER))\n \t    {\n@@ -21890,7 +21890,7 @@ get_partial_spec_bindings (tree tmpl, tree spec_tmpl, tree args)\n   else\n     deduced_args = innermost_deduced_args;\n \n-  bool tried_array_deduction = (cxx_dialect < cxx1z);\n+  bool tried_array_deduction = (cxx_dialect < cxx17);\n  again:\n   if (unify (tparms, deduced_args,\n \t     INNERMOST_TEMPLATE_ARGS (spec_args),\n@@ -23707,7 +23707,7 @@ dependent_type_p_r (tree type)\n \t   arg_type = TREE_CHAIN (arg_type))\n \tif (dependent_type_p (TREE_VALUE (arg_type)))\n \t  return true;\n-      if (cxx_dialect >= cxx1z)\n+      if (cxx_dialect >= cxx17)\n \t{\n \t  /* A value-dependent noexcept-specifier makes the type dependent.  */\n \t  tree spec = TYPE_RAISES_EXCEPTIONS (type);"}, {"sha": "aa5d1288a5a0fb3693c11948b0a307beb5cfbc14", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -6177,11 +6177,11 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \t      }\n \t    else\n \t      {\n-\t\tif (cxx_dialect >= cxx1z)\n+\t\tif (cxx_dialect >= cxx17)\n \t\t  {\n \t\t    if (complain & tf_error)\n \t\t      error (\"use of an operand of type %qT in \"\n-\t\t\t     \"%<operator++%> is forbidden in C++1z\",\n+\t\t\t     \"%<operator++%> is forbidden in C++17\",\n \t\t\t     boolean_type_node);\n \t\t    return error_mark_node;\n \t\t  }"}, {"sha": "82e18ecb17893c0137306c1a4dff2f4f2eb8d408", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1364,7 +1364,7 @@ process_init_constructor_record (tree type, tree init,\n   gcc_assert (TREE_CODE (type) == RECORD_TYPE);\n   gcc_assert (!CLASSTYPE_VBASECLASSES (type));\n   gcc_assert (!TYPE_BINFO (type)\n-\t      || cxx_dialect >= cxx1z\n+\t      || cxx_dialect >= cxx17\n \t      || !BINFO_N_BASE_BINFOS (TYPE_BINFO (type)));\n   gcc_assert (!TYPE_POLYMORPHIC_P (type));\n \n@@ -1384,7 +1384,7 @@ process_init_constructor_record (tree type, tree init,\n \n       if (TREE_CODE (field) != FIELD_DECL\n \t  || (DECL_ARTIFICIAL (field)\n-\t      && !(cxx_dialect >= cxx1z && DECL_FIELD_IS_BASE (field))))\n+\t      && !(cxx_dialect >= cxx17 && DECL_FIELD_IS_BASE (field))))\n \tcontinue;\n \n       /* If this is a bitfield, first convert to the declared type.  */"}, {"sha": "8e9cba378c3017e1b6807070fcfd4d04f5ed901d", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1877,9 +1877,7 @@ selected, the value of the macro is\n @code{199711L} for the 1998 C++ standard,\n @code{201103L} for the 2011 C++ standard,\n @code{201402L} for the 2014 C++ standard,\n-or an unspecified value strictly larger than @code{201402L} for the\n-experimental languages enabled by @option{-std=c++1z} and\n-@option{-std=gnu++1z}.\n+@code{201703L} for the 2017 C++ standard.\n \n @item __OBJC__\n This macro is defined, with value 1, when the Objective-C compiler is in"}, {"sha": "a727d952fd2d3ce97b01a6cbc088b0d035edec3a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1870,15 +1870,15 @@ GNU dialect of @option{-std=c++14}.\n This is the default for C++ code.\n The name @samp{gnu++1y} is deprecated.\n \n-@item c++1z\n-The next revision of the ISO C++ standard, tentatively planned for\n-2017.  Support is highly experimental, and will almost certainly\n-change in incompatible ways in future releases.\n-\n-@item gnu++1z\n-GNU dialect of @option{-std=c++1z}.  Support is highly experimental,\n-and will almost certainly change in incompatible ways in future\n-releases.\n+@item c++17\n+@itemx c++1z\n+The 2017 ISO C++ standard plus amendments.\n+The name @samp{c++1z} is deprecated.\n+\n+@item gnu++17\n+@itemx gnu++1z\n+GNU dialect of @option{-std=c++17}.\n+The name @samp{gnu++1z} is deprecated.\n @end table\n \n @item -fgnu89-inline\n@@ -2304,7 +2304,7 @@ specify how much alignment (in bytes) is provided by that function,\n but few users will need to override the default of\n @code{alignof(std::max_align_t)}.\n \n-This flag is enabled by default for @option{-std=c++1z}.\n+This flag is enabled by default for @option{-std=c++17}.\n \n @item -fcheck-new\n @opindex fcheck-new\n@@ -2479,7 +2479,7 @@ Enable the P0522 resolution to Core issue 150, template template\n parameters and default arguments: this allows a template with default\n template arguments as an argument for a template template parameter\n with fewer template parameters.  This flag is enabled by default for\n-@option{-std=c++1z}.\n+@option{-std=c++17}.\n \n @item -fno-nonansi-builtins\n @opindex fno-nonansi-builtins\n@@ -2573,10 +2573,10 @@ cast to convert an arbitrary integer value to the enumerated type.\n @opindex fstrong-eval-order\n Evaluate member access, array subscripting, and shift expressions in\n left-to-right order, and evaluate assignment in right-to-left order,\n-as adopted for C++17.  Enabled by default with @option{-std=c++1z}.\n+as adopted for C++17.  Enabled by default with @option{-std=c++17}.\n @option{-fstrong-eval-order=some} enables just the ordering of member\n access and shift expressions, and is the default without\n-@option{-std=c++1z}.\n+@option{-std=c++17}.\n \n @item -ftemplate-backtrace-limit=@var{n}\n @opindex ftemplate-backtrace-limit\n@@ -2913,14 +2913,14 @@ the compiler to never throw an exception.\n @item -Wnoexcept-type @r{(C++ and Objective-C++ only)}\n @opindex Wnoexcept-type\n @opindex Wno-noexcept-type\n-Warn if the C++1z feature making @code{noexcept} part of a function\n+Warn if the C++17 feature making @code{noexcept} part of a function\n type changes the mangled name of a symbol relative to C++14.  Enabled\n-by @option{-Wabi} and @option{-Wc++1z-compat}.\n+by @option{-Wabi} and @option{-Wc++17-compat}.\n \n @smallexample\n template <class T> void f(T t) @{ t(); @};\n void g() noexcept;\n-void h() @{ f(g); @} // in C++14 calls f<void(*)()>, in C++1z calls f<void(*)()noexcept>\n+void h() @{ f(g); @} // in C++14 calls f<void(*)()>, in C++17 calls f<void(*)()noexcept>\n @end smallexample\n \n @item -Wclass-memaccess @r{(C++ and Objective-C++ only)}\n@@ -2957,7 +2957,7 @@ Warn on uses of the @code{register} storage class specifier, except\n when it is part of the GNU @ref{Explicit Register Variables} extension.\n The use of the @code{register} keyword as storage class specifier has\n been deprecated in C++11 and removed in C++17.\n-Enabled by default with @option{-std=c++1z}.\n+Enabled by default with @option{-std=c++17}.\n \n @item -Wreorder @r{(C++ and Objective-C++ only)}\n @opindex Wreorder\n@@ -5391,7 +5391,7 @@ Warn about suspicious operations on expressions of a boolean type.  For\n instance, bitwise negation of a boolean is very likely a bug in the program.\n For C, this warning also warns about incrementing or decrementing a boolean,\n which rarely makes sense.  (In C++, decrementing a boolean is always invalid.\n-Incrementing a boolean is invalid in C++1z, and deprecated otherwise.)\n+Incrementing a boolean is invalid in C++17, and deprecated otherwise.)\n \n This warning is enabled by @option{-Wall}.\n \n@@ -5898,10 +5898,10 @@ enabled by @option{-Wall}.\n Warn about C++ constructs whose meaning differs between ISO C++ 2011\n and ISO C++ 2014.  This warning is enabled by @option{-Wall}.\n \n-@item -Wc++1z-compat @r{(C++ and Objective-C++ only)}\n-@opindex Wc++1z-compat\n+@item -Wc++17-compat @r{(C++ and Objective-C++ only)}\n+@opindex Wc++17-compat\n Warn about C++ constructs whose meaning differs between ISO C++ 2014\n-and the forthoming ISO C++ 2017(?).  This warning is enabled by @option{-Wall}.\n+and ISO C++ 2017.  This warning is enabled by @option{-Wall}.\n \n @item -Wcast-qual\n @opindex Wcast-qual"}, {"sha": "1a4f1a2b12be24427befa32dccb4c8fd103171b4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -23395,6 +23395,8 @@ gen_producer_string (void)\n static const char *\n highest_c_language (const char *lang1, const char *lang2)\n {\n+  if (strcmp (\"GNU C++17\", lang1) == 0 || strcmp (\"GNU C++17\", lang2) == 0)\n+    return \"GNU C++17\";\n   if (strcmp (\"GNU C++14\", lang1) == 0 || strcmp (\"GNU C++14\", lang2) == 0)\n     return \"GNU C++14\";\n   if (strcmp (\"GNU C++11\", lang1) == 0 || strcmp (\"GNU C++11\", lang2) == 0)\n@@ -23491,6 +23493,9 @@ gen_compile_unit_die (const char *filename)\n \t    language = DW_LANG_C_plus_plus_11;\n \t  else if (strcmp (language_string, \"GNU C++14\") == 0)\n \t    language = DW_LANG_C_plus_plus_14;\n+\t  else if (strcmp (language_string, \"GNU C++17\") == 0)\n+\t    /* For now.  */\n+\t    language = DW_LANG_C_plus_plus_14;\n \t}\n     }\n   else if (strcmp (language_string, \"GNU F77\") == 0)"}, {"sha": "e53e7be5d64882fab2d9b120aabd6978c43490d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 415, "deletions": 0, "changes": 415, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,420 @@\n 2017-09-15  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* lib/g++-dg.exp (g++-dg-runtest): Use 17 instead of 1z.\n+\t* lib/target-supports.exp (check_effective_target_c++14): Use\n+\tcheck_effective_target_c++17 instead of check_effective_target_c++1z.\n+\t(check_effective_target_c++14_down): Likewise.\n+\t(check_effective_target_c++1z_only): Rename to ...\n+\t(check_effective_target_c++17_only): ... this.\n+\t(check_effective_target_c++1z): Rename to ...\n+\t(check_effective_target_c++17): ... this.\n+\t* g++.dg/debug/dwarf2/inline-var-1.C: Use -std=c++17 or -std=gnu++17\n+\tinstead of -std=c++1z or -std=gnu++1z.  Use c++17 instead of c++1z\n+\tand c++17_only instead of c++1z_only.  Adjust expected diagnostics\n+\tand comments refering to 1z to 17.\n+\t* g++.dg/debug/dwarf2/inline-var-2.C: Likewise.\n+\t* g++.dg/template/partial5.C: Likewise.\n+\t* g++.dg/template/nontype8.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type5.C: Likewise.\n+\t* g++.dg/cpp1z/nontype3a.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda4.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type16.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction32.C: Likewise.\n+\t* g++.dg/cpp1z/pr78771.C: Likewise.\n+\t* g++.dg/cpp1z/elide1.C: Likewise.\n+\t* g++.dg/cpp1z/fold3.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction2.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type12.C: Likewise.\n+\t* g++.dg/cpp1z/inline-var2.C: Likewise.\n+\t* g++.dg/cpp1z/eval-order2.C: Likewise.\n+\t* g++.dg/cpp1z/decomp21.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda11.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda9.C: Likewise.\n+\t* g++.dg/cpp1z/utf8-neg.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction41.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction23.C: Likewise.\n+\t* g++.dg/cpp1z/nodiscard3.C: Likewise.\n+\t* g++.dg/cpp1z/static_assert-nomsg.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type9.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction21.C: Likewise.\n+\t* g++.dg/cpp1z/range-for1.C: Likewise.\n+\t* g++.dg/cpp1z/init-statement4.C: Likewise.\n+\t* g++.dg/cpp1z/udlit-utf8char.C: Likewise.\n+\t* g++.dg/cpp1z/decomp30.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction39.C: Likewise.\n+\t* g++.dg/cpp1z/register2.C: Likewise.\n+\t* g++.dg/cpp1z/decomp9.C: Likewise.\n+\t* g++.dg/cpp1z/regress1.C: Likewise.\n+\t* g++.dg/cpp1z/direct-enum-init1.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction30.C: Likewise.\n+\t* g++.dg/cpp1z/abbrev2.C: Likewise.\n+\t* g++.dg/cpp1z/nontype-auto6.C: Likewise.\n+\t* g++.dg/cpp1z/regress2.C: Likewise.\n+\t* g++.dg/cpp1z/decomp16.C: Likewise.\n+\t* g++.dg/cpp1z/bool-increment1.C: Likewise.\n+\t* g++.dg/cpp1z/aligned-new1.C: Likewise.\n+\t* g++.dg/cpp1z/decomp3.C: Likewise.\n+\t* g++.dg/cpp1z/register1.C: Likewise.\n+\t* g++.dg/cpp1z/namespace-attribs.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction1.C: Likewise.\n+\t* g++.dg/cpp1z/decomp10.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-if11.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda10.C: Likewise.\n+\t* g++.dg/cpp1z/decomp27.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type2.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda6.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction9.C: Likewise.\n+\t* g++.dg/cpp1z/attributes-enum-1.C: Likewise.\n+\t* g++.dg/cpp1z/decomp11.C: Likewise.\n+\t* g++.dg/cpp1z/aligned-new3.C: Likewise.\n+\t* g++.dg/cpp1z/utf8-2.C: Likewise.\n+\t* g++.dg/cpp1z/lambda-this3.C: Likewise.\n+\t* g++.dg/cpp1z/decomp-constexpr1.C: Likewise.\n+\t* g++.dg/cpp1z/byte1.C: Likewise.\n+\t* g++.dg/cpp1z/nontype-auto9.C: Likewise.\n+\t* g++.dg/cpp1z/aggr-base4.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda1.C: Likewise.\n+\t* g++.dg/cpp1z/nontype-auto3.C: Likewise.\n+\t* g++.dg/cpp1z/utf8-2a.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda7.C: Likewise.\n+\t* g++.dg/cpp1z/aggr-base6.C: Likewise.\n+\t* g++.dg/cpp1z/cplusplus.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction20.C: Likewise.\n+\t* g++.dg/cpp1z/aggr-base2.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction6.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type3.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction31.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction25.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction18.C: Likewise.\n+\t* g++.dg/cpp1z/fold9.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type8.C: Likewise.\n+\t* g++.dg/cpp1z/abbrev1.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-if10.C: Likewise.\n+\t* g++.dg/cpp1z/utf8.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type7.C: Likewise.\n+\t* g++.dg/cpp1z/aggr-base3.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda8.C: Likewise.\n+\t* g++.dg/cpp1z/init-statement2.C: Likewise.\n+\t* g++.dg/cpp1z/nontype-auto4.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-if12.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction40.C: Likewise.\n+\t* g++.dg/cpp1z/nontype3.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction14.C: Likewise.\n+\t* g++.dg/cpp1z/fold7.C: Likewise.\n+\t* g++.dg/cpp1z/nontype2.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction15.C: Likewise.\n+\t* g++.dg/cpp1z/nested-namespace-def1.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction13.C: Likewise.\n+\t* g++.dg/cpp1z/aligned-new7.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type1.C: Likewise.\n+\t* g++.dg/cpp1z/nontype1.C: Likewise.\n+\t* g++.dg/cpp1z/init-statement5.C: Likewise.\n+\t* g++.dg/cpp1z/nontype-auto2.C: Likewise.\n+\t* g++.dg/cpp1z/decomp17.C: Likewise.\n+\t* g++.dg/cpp1z/fold4.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda2.C: Likewise.\n+\t* g++.dg/cpp1z/fold7a.C: Likewise.\n+\t* g++.dg/cpp1z/nontype-auto5.C: Likewise.\n+\t* g++.dg/cpp1z/init-statement7.C: Likewise.\n+\t* g++.dg/cpp1z/aggr-base5.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda5.C: Likewise.\n+\t* g++.dg/cpp1z/pr79143.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction38.C: Likewise.\n+\t* g++.dg/cpp1z/nontype-auto8.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction12.C: Likewise.\n+\t* g++.dg/cpp1z/decomp20.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction22.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction29.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction8.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction43.C: Likewise.\n+\t* g++.dg/cpp1z/feat-cxx1z.C: Likewise.\n+\t* g++.dg/cpp1z/fold8.C: Likewise.\n+\t* g++.dg/cpp1z/init-statement3.C: Likewise.\n+\t* g++.dg/cpp1z/nontype-auto10.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction36.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type17.C: Likewise.\n+\t* g++.dg/cpp1z/fallthrough1.C: Likewise.\n+\t* g++.dg/cpp1z/fold1.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction26.C: Likewise.\n+\t* g++.dg/cpp1z/fold-ice1.C: Likewise.\n+\t* g++.dg/cpp1z/fold5.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction34.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type6.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction7.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction16.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction10.C: Likewise.\n+\t* g++.dg/cpp1z/eval-order3.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda13.C: Likewise.\n+\t* g++.dg/cpp1z/aggr-base2a.C: Likewise.\n+\t* g++.dg/cpp1z/nontype-auto1.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda3.C: Likewise.\n+\t* g++.dg/cpp1z/nontype-auto7.C: Likewise.\n+\t* g++.dg/cpp1z/decomp15.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type4.C: Likewise.\n+\t* g++.dg/cpp1z/fold-mangle.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction35.C: Likewise.\n+\t* g++.dg/cpp1z/decomp4.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction42.C: Likewise.\n+\t* g++.dg/cpp1z/init-statement8.C: Likewise.\n+\t* g++.dg/cpp1z/inline-var1a.C: Likewise.\n+\t* g++.dg/cpp1z/init-statement6.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction17.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction28.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction27.C: Likewise.\n+\t* g++.dg/cpp1z/decomp-bitfield1.C: Likewise.\n+\t* g++.dg/cpp1z/attributes-enum-1a.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction11.C: Likewise.\n+\t* g++.dg/cpp1z/constexpr-lambda12.C: Likewise.\n+\t* g++.dg/cpp1z/init-statement9.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction19.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction5.C: Likewise.\n+\t* g++.dg/cpp1z/fold2.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction33.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction24.C: Likewise.\n+\t* g++.dg/cpp1z/aggr-base1.C: Likewise.\n+\t* g++.dg/cpp1z/fold6.C: Likewise.\n+\t* g++.dg/cpp1z/decomp12.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction4.C: Likewise.\n+\t* g++.dg/cpp1z/inline-var1.C: Likewise.\n+\t* g++.dg/cpp1z/aligned-new2.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction3.C: Likewise.\n+\t* g++.dg/other/error3.C: Likewise.\n+\t* g++.dg/init/new25.C: Likewise.\n+\t* g++.dg/init/new13.C: Likewise.\n+\t* g++.dg/tls/diag-2.C: Likewise.\n+\t* g++.dg/tls/diag-4.C: Likewise.\n+\t* g++.dg/opt/noreturn-1.C: Likewise.\n+\t* g++.dg/eh/async-unwind2.C: Likewise.\n+\t* g++.dg/eh/spec9.C: Likewise.\n+\t* g++.dg/eh/spec7.C: Likewise.\n+\t* g++.dg/eh/template1.C: Likewise.\n+\t* g++.dg/eh/cond4.C: Likewise.\n+\t* g++.dg/eh/pr41819.C: Likewise.\n+\t* g++.dg/eh/delete1.C: Likewise.\n+\t* g++.dg/eh/spec3.C: Likewise.\n+\t* g++.dg/eh/forced4.C: Likewise.\n+\t* g++.dg/eh/spec2.C: Likewise.\n+\t* g++.dg/eh/shadow1.C: Likewise.\n+\t* g++.dg/eh/pr38662.C: Likewise.\n+\t* g++.dg/eh/ehopt1.C: Likewise.\n+\t* g++.dg/eh/spec8.C: Likewise.\n+\t* g++.dg/eh/init-temp2.C: Likewise.\n+\t* g++.dg/rtti/crash3.C: Likewise.\n+\t* g++.dg/warn/Wreturn-type-3.C: Likewise.\n+\t* g++.dg/warn/register-parm-1.C: Likewise.\n+\t* g++.dg/warn/register-var-2.C: Likewise.\n+\t* g++.dg/gcov/gcov-7.C: Likewise.\n+\t* g++.dg/tree-ssa/pr45605.C: Likewise.\n+\t* g++.dg/cpp/pr23827_cxx98_neg.C: Likewise.\n+\t* g++.dg/lookup/exception1.C: Likewise.\n+\t* g++.dg/ubsan/pr79589.C: Likewise.\n+\t* g++.dg/tm/pr47340.C: Likewise.\n+\t* g++.dg/tm/pr46567.C: Likewise.\n+\t* g++.dg/expr/bitfield5.C: Likewise.\n+\t* g++.dg/expr/bool1.C: Likewise.\n+\t* g++.dg/expr/lval3.C: Likewise.\n+\t* g++.dg/expr/lval4.C: Likewise.\n+\t* g++.dg/expr/bitfield4.C: Likewise.\n+\t* g++.dg/expr/bitfield6.C: Likewise.\n+\t* g++.dg/expr/bool3.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_constructor.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-7.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-1.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-2.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-4.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-5.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_copy-6.C: Likewise.\n+\t* g++.dg/ext/has_nothrow_assign.C: Likewise.\n+\t* g++.dg/parse/register1.C: Likewise.\n+\t* g++.dg/parse/error15.C: Likewise.\n+\t* g++.dg/parse/linkage2.C: Likewise.\n+\t* g++.dg/concepts/intro2.C: Likewise.\n+\t* g++.dg/concepts/class.C: Likewise.\n+\t* g++.dg/concepts/traits1.C: Likewise.\n+\t* g++.dg/concepts/req5.C: Likewise.\n+\t* g++.dg/concepts/var-concept5.C: Likewise.\n+\t* g++.dg/concepts/fn-concept2.C: Likewise.\n+\t* g++.dg/concepts/traits2.C: Likewise.\n+\t* g++.dg/concepts/placeholder2.C: Likewise.\n+\t* g++.dg/concepts/class6.C: Likewise.\n+\t* g++.dg/concepts/memtmpl1.C: Likewise.\n+\t* g++.dg/concepts/friend2.C: Likewise.\n+\t* g++.dg/concepts/template-parm3.C: Likewise.\n+\t* g++.dg/concepts/template-parm10.C: Likewise.\n+\t* g++.dg/concepts/explicit-spec1.C: Likewise.\n+\t* g++.dg/concepts/explicit-spec3.C: Likewise.\n+\t* g++.dg/concepts/var-templ2.C: Likewise.\n+\t* g++.dg/concepts/intro5.C: Likewise.\n+\t* g++.dg/concepts/deduction-constraint1.C: Likewise.\n+\t* g++.dg/concepts/iconv1.C: Likewise.\n+\t* g++.dg/concepts/constrained-parm.C: Likewise.\n+\t* g++.dg/concepts/template-template-parm1.C: Likewise.\n+\t* g++.dg/concepts/var-concept3.C: Likewise.\n+\t* g++.dg/concepts/class3.C: Likewise.\n+\t* g++.dg/concepts/memfun2.C: Likewise.\n+\t* g++.dg/concepts/req1.C: Likewise.\n+\t* g++.dg/concepts/disjunction1.C: Likewise.\n+\t* g++.dg/concepts/req17.C: Likewise.\n+\t* g++.dg/concepts/pr65848.C: Likewise.\n+\t* g++.dg/concepts/placeholder4.C: Likewise.\n+\t* g++.dg/concepts/decl-diagnose.C: Likewise.\n+\t* g++.dg/concepts/intro7.C: Likewise.\n+\t* g++.dg/concepts/pr68683.C: Likewise.\n+\t* g++.dg/concepts/partial-spec4.C: Likewise.\n+\t* g++.dg/concepts/template-parm5.C: Likewise.\n+\t* g++.dg/concepts/explicit-inst1.C: Likewise.\n+\t* g++.dg/concepts/class-deduction1.C: Likewise.\n+\t* g++.dg/concepts/class1.C: Likewise.\n+\t* g++.dg/concepts/req15.C: Likewise.\n+\t* g++.dg/concepts/memfun.C: Likewise.\n+\t* g++.dg/concepts/pr68434.C: Likewise.\n+\t* g++.dg/concepts/inherit-ctor4.C: Likewise.\n+\t* g++.dg/concepts/partial-spec6.C: Likewise.\n+\t* g++.dg/concepts/var-templ1.C: Likewise.\n+\t* g++.dg/concepts/template-parm8.C: Likewise.\n+\t* g++.dg/concepts/explicit-inst3.C: Likewise.\n+\t* g++.dg/concepts/class4.C: Likewise.\n+\t* g++.dg/concepts/req6.C: Likewise.\n+\t* g++.dg/concepts/fn8.C: Likewise.\n+\t* g++.dg/concepts/class5.C: Likewise.\n+\t* g++.dg/concepts/placeholder5.C: Likewise.\n+\t* g++.dg/concepts/req16.C: Likewise.\n+\t* g++.dg/concepts/req10.C: Likewise.\n+\t* g++.dg/concepts/var-concept2.C: Likewise.\n+\t* g++.dg/concepts/auto3.C: Likewise.\n+\t* g++.dg/concepts/generic-fn-err.C: Likewise.\n+\t* g++.dg/concepts/pr65552.C: Likewise.\n+\t* g++.dg/concepts/partial-concept-id2.C: Likewise.\n+\t* g++.dg/concepts/fn1.C: Likewise.\n+\t* g++.dg/concepts/partial-spec.C: Likewise.\n+\t* g++.dg/concepts/template-parm12.C: Likewise.\n+\t* g++.dg/concepts/diagnostic1.C: Likewise.\n+\t* g++.dg/concepts/intro1.C: Likewise.\n+\t* g++.dg/concepts/explicit-inst4.C: Likewise.\n+\t* g++.dg/concepts/req18.C: Likewise.\n+\t* g++.dg/concepts/explicit-spec5.C: Likewise.\n+\t* g++.dg/concepts/var-concept6.C: Likewise.\n+\t* g++.dg/concepts/fn9.C: Likewise.\n+\t* g++.dg/concepts/req2.C: Likewise.\n+\t* g++.dg/concepts/template-parm7.C: Likewise.\n+\t* g++.dg/concepts/req14.C: Likewise.\n+\t* g++.dg/concepts/template-parm6.C: Likewise.\n+\t* g++.dg/concepts/variadic4.C: Likewise.\n+\t* g++.dg/concepts/fn6.C: Likewise.\n+\t* g++.dg/concepts/req-neg1.C: Likewise.\n+\t* g++.dg/concepts/alias3.C: Likewise.\n+\t* g++.dg/concepts/expression2.C: Likewise.\n+\t* g++.dg/concepts/partial-spec3.C: Likewise.\n+\t* g++.dg/concepts/expression3.C: Likewise.\n+\t* g++.dg/concepts/memfun-err.C: Likewise.\n+\t* g++.dg/concepts/pr66091.C: Likewise.\n+\t* g++.dg/concepts/explicit-spec2.C: Likewise.\n+\t* g++.dg/concepts/equiv.C: Likewise.\n+\t* g++.dg/concepts/friend1.C: Likewise.\n+\t* g++.dg/concepts/fn4.C: Likewise.\n+\t* g++.dg/concepts/var-templ3.C: Likewise.\n+\t* g++.dg/concepts/explicit-inst2.C: Likewise.\n+\t* g++.dg/concepts/alias2.C: Likewise.\n+\t* g++.dg/concepts/regress/alias-decl-42.C: Likewise.\n+\t* g++.dg/concepts/placeholder6.C: Likewise.\n+\t* g++.dg/concepts/fn10.C: Likewise.\n+\t* g++.dg/concepts/req3.C: Likewise.\n+\t* g++.dg/concepts/variadic2.C: Likewise.\n+\t* g++.dg/concepts/pr65636.C: Likewise.\n+\t* g++.dg/concepts/intro6.C: Likewise.\n+\t* g++.dg/concepts/class2.C: Likewise.\n+\t* g++.dg/concepts/fn2.C: Likewise.\n+\t* g++.dg/concepts/req20.C: Likewise.\n+\t* g++.dg/concepts/req8.C: Likewise.\n+\t* g++.dg/concepts/placeholder1.C: Likewise.\n+\t* g++.dg/concepts/pr65854.C: Likewise.\n+\t* g++.dg/concepts/member-concept.C: Likewise.\n+\t* g++.dg/concepts/template-parm2.C: Likewise.\n+\t* g++.dg/concepts/variadic1.C: Likewise.\n+\t* g++.dg/concepts/fn7.C: Likewise.\n+\t* g++.dg/concepts/intro4.C: Likewise.\n+\t* g++.dg/concepts/req13.C: Likewise.\n+\t* g++.dg/concepts/inherit-ctor3.C: Likewise.\n+\t* g++.dg/concepts/explicit-spec6.C: Likewise.\n+\t* g++.dg/concepts/auto1.C: Likewise.\n+\t* g++.dg/concepts/alias1.C: Likewise.\n+\t* g++.dg/concepts/fn-concept1.C: Likewise.\n+\t* g++.dg/concepts/template-parm11.C: Likewise.\n+\t* g++.dg/concepts/explicit-spec4.C: Likewise.\n+\t* g++.dg/concepts/partial-concept-id1.C: Likewise.\n+\t* g++.dg/concepts/req9.C: Likewise.\n+\t* g++.dg/concepts/req4.C: Likewise.\n+\t* g++.dg/concepts/pr65681.C: Likewise.\n+\t* g++.dg/concepts/req7.C: Likewise.\n+\t* g++.dg/concepts/req12.C: Likewise.\n+\t* g++.dg/concepts/fn5.C: Likewise.\n+\t* g++.dg/concepts/alias4.C: Likewise.\n+\t* g++.dg/concepts/generic-fn.C: Likewise.\n+\t* g++.dg/concepts/feature-macro.C: Likewise.\n+\t* g++.dg/concepts/req19.C: Likewise.\n+\t* g++.dg/concepts/placeholder3.C: Likewise.\n+\t* g++.dg/concepts/intro3.C: Likewise.\n+\t* g++.dg/concepts/partial-spec5.C: Likewise.\n+\t* g++.dg/concepts/template-parm4.C: Likewise.\n+\t* g++.dg/concepts/dr1430.C: Likewise.\n+\t* g++.dg/concepts/pr65634.C: Likewise.\n+\t* g++.dg/concepts/var-concept4.C: Likewise.\n+\t* g++.dg/concepts/pr67249.C: Likewise.\n+\t* g++.dg/concepts/expression.C: Likewise.\n+\t* g++.dg/concepts/pr65575.C: Likewise.\n+\t* g++.dg/concepts/partial-spec2.C: Likewise.\n+\t* g++.dg/concepts/template-parm9.C: Likewise.\n+\t* g++.dg/concepts/inherit-ctor1.C: Likewise.\n+\t* g++.dg/concepts/equiv2.C: Likewise.\n+\t* g++.dg/concepts/req11.C: Likewise.\n+\t* g++.dg/concepts/template-parm1.C: Likewise.\n+\t* g++.dg/concepts/inherit-ctor2.C: Likewise.\n+\t* g++.dg/concepts/var-concept1.C: Likewise.\n+\t* g++.dg/concepts/fn3.C: Likewise.\n+\t* g++.dg/torture/pr46364.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-alloca-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-fastcall-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-vararg-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-vararg-2.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-global-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-thiscall-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-inline-2.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-inline-1.C: Likewise.\n+\t* g++.dg/torture/pr52918-1.C: Likewise.\n+\t* g++.dg/torture/pr49394.C: Likewise.\n+\t* g++.dg/torture/pr57190.C: Likewise.\n+\t* g++.dg/cpp0x/static_assert8.C: Likewise.\n+\t* g++.dg/cpp0x/noexcept19.C: Likewise.\n+\t* g++.dg/cpp0x/variadic-throw.C: Likewise.\n+\t* g++.dg/cpp0x/variadic73.C: Likewise.\n+\t* g++.dg/cpp0x/noexcept02.C: Likewise.\n+\t* g++.dg/cpp0x/defaulted23.C: Likewise.\n+\t* g++.dg/cpp0x/noexcept08.C: Likewise.\n+\t* g++.dg/cpp0x/auto9.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-eh2.C: Likewise.\n+\t* g++.dg/cpp0x/error5.C: Likewise.\n+\t* c-c++-common/gomp/atomic-12.c: Likewise.\n+\t* c-c++-common/gomp/atomic-13.c: Likewise.\n+\t* c-c++-common/gomp/atomic-14.c: Likewise.\n+\t* c-c++-common/Wvarargs-2.c: Likewise.\n+\t* c-c++-common/Wvarargs.c: Likewise.\n+\t* c-c++-common/vector-subscript-2.c: Likewise.\n+\t* g++.old-deja/g++.robertl/eb123.C: Likewise.\n+\t* g++.old-deja/g++.eh/tmpl3.C: Likewise.\n+\t* g++.old-deja/g++.eh/cleanup2.C: Likewise.\n+\t* g++.old-deja/g++.eh/badalloc1.C: Likewise.\n+\t* g++.old-deja/g++.eh/throw2.C: Likewise.\n+\t* g++.old-deja/g++.eh/throw1.C: Likewise.\n+\t* g++.old-deja/g++.eh/tmpl1.C: Likewise.\n+\t* g++.old-deja/g++.other/new7.C: Likewise.\n+\t* g++.old-deja/g++.other/crash30.C: Likewise.\n+\t* g++.old-deja/g++.other/regstack.C: Likewise.\n+\t* g++.old-deja/g++.other/crash28.C: Likewise.\n+\t* g++.old-deja/g++.jason/bool5.C: Likewise.\n+\t* g++.old-deja/g++.mike/p10416.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh25.C: Likewise.\n+\t* g++.old-deja/g++.mike/eh55.C: Likewise.\n+\n \tPR rtl-optimization/82192\n \t* gcc.c-torture/execute/pr82192.c: New test.\n "}, {"sha": "a6b51f19e603b7027196a2c77f09c4967a11c595", "filename": "gcc/testsuite/c-c++-common/Wvarargs-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs-2.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -23,7 +23,7 @@ foo0 (int a, int b, ...)\n }\n \n void\n-foo1 (int a, register int b, ...)\t// { dg-warning \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+foo1 (int a, register int b, ...)\t// { dg-warning \"ISO C\\\\+\\\\+17 does not allow 'register' storage class specifier\" \"\" { target c++17 } }\n {\n     va_list vp;\n     /* 'b' is declared with register storage, but don't warn"}, {"sha": "71d8c5dff93894f9ebfcf062b67e263c90a3dc12", "filename": "gcc/testsuite/c-c++-common/Wvarargs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWvarargs.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -23,7 +23,7 @@ foo0 (int a, int b, ...)\n }\n \n void\n-foo1 (int a, register int b, ...)\t// { dg-warning \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+foo1 (int a, register int b, ...)\t// { dg-warning \"ISO C\\\\+\\\\+17 does not allow 'register' storage class specifier\" \"\" { target c++17 } }\n {\n     va_list vp;\n     /* 'b' is declared with register storage, but don't warn\n@@ -45,7 +45,7 @@ foo2 (int a, int b, ...)\n }\n \n void\n-foo3 (int a, register int b, ...)\t// { dg-warning \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+foo3 (int a, register int b, ...)\t// { dg-warning \"ISO C\\\\+\\\\+17 does not allow 'register' storage class specifier\" \"\" { target c++17 } }\n {\n     va_list vp;\n     /* 'b' is declared with register storage, so warn.  */"}, {"sha": "a750a7f71a421ab017a11ccaf04c9f8ed9690aa7", "filename": "gcc/testsuite/c-c++-common/gomp/atomic-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-12.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -4,7 +4,7 @@\n /* atomicvar should never be referenced in between the barrier and\n    following #pragma omp atomic_load.  */\n /* { dg-final { scan-tree-dump-not \"barrier\\[^#\\]*atomicvar\" \"gimple\" } } */\n-/* { dg-skip-if \"invalid in C++1z\" { c++1z } } */\n+/* { dg-skip-if \"invalid in C++17\" { c++17 } } */\n \n #ifdef __cplusplus\n bool atomicvar, c;"}, {"sha": "5fd9c1016604a047ba122d8ba597a3141454d838", "filename": "gcc/testsuite/c-c++-common/gomp/atomic-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-13.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -4,6 +4,6 @@\n /* atomicvar should never be referenced in between the barrier and\n    following #pragma omp atomic_load.  */\n /* { dg-final { scan-tree-dump-not \"barrier\\[^#\\]*atomicvar\" \"gimple\" } } */\n-/* { dg-skip-if \"invalid in C++1z\" { c++1z } } */\n+/* { dg-skip-if \"invalid in C++17\" { c++17 } } */\n \n #include \"atomic-12.c\""}, {"sha": "06b76692ec780ad824a413715f45c71f80bacd81", "filename": "gcc/testsuite/c-c++-common/gomp/atomic-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fatomic-14.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,7 +1,7 @@\n /* PR middle-end/45423 */\n /* { dg-do compile } */\n /* { dg-options \"-fopenmp -Wno-deprecated\" } */\n-/* { dg-skip-if \"invalid in C++1z\" { c++1z } } */\n+/* { dg-skip-if \"invalid in C++17\" { c++17 } } */\n \n #ifdef __cplusplus\n bool *baz ();"}, {"sha": "b81195fdedfd1ae18af9a87e407a616b203f41c9", "filename": "gcc/testsuite/c-c++-common/vector-subscript-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fvector-subscript-2.c?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -7,6 +7,6 @@\n \n float vf(int i)\n {\n-  register vector float a;\t// { dg-warning \"ISO C\\\\+\\\\+1z does not allow 'register' storage class specifier\" \"\" { target c++1z } }\n+  register vector float a;\t// { dg-warning \"ISO C\\\\+\\\\+17 does not allow 'register' storage class specifier\" \"\" { target c++17 } }\n   return a[0];\n }"}, {"sha": "1b643cdd1c9e1fc0ac2d8cd7ca9c0b4296c98261", "filename": "gcc/testsuite/g++.dg/concepts/alias1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Falias1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Falias1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Falias1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "2de2aa4da940a5665ea96aa9cf7c41a331f9f9b2", "filename": "gcc/testsuite/g++.dg/concepts/alias2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Falias2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Falias2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Falias2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "6e1c39ce1746a3ff55deae20e5fa562d16a7561b", "filename": "gcc/testsuite/g++.dg/concepts/alias3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Falias3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Falias3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Falias3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "e7d93d5875f6b43619f3466f5c9e013afd9ad6ed", "filename": "gcc/testsuite/g++.dg/concepts/alias4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Falias4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Falias4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Falias4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "0c6fa465fa67a13aa6b05bb3f87caaa7cc5b6d61", "filename": "gcc/testsuite/g++.dg/concepts/auto1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fauto1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fauto1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fauto1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T1, class T2> class A { };\n "}, {"sha": "7b80fe314b8abaa1a13c3dbc200d40b29f6ca3da", "filename": "gcc/testsuite/g++.dg/concepts/auto3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fauto3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fauto3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fauto3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class...> class tuple {};\n "}, {"sha": "476830d9252828b6113f922084e71d82d97fb000", "filename": "gcc/testsuite/g++.dg/concepts/class-deduction1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass-deduction1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass-deduction1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass-deduction1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T>\n concept bool Isint = __is_same_as(T,int);"}, {"sha": "1c5242f8089897e8c2c73ff6ee6bc5bd891fb24c", "filename": "gcc/testsuite/g++.dg/concepts/class.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool Class() { return __is_class(T); }"}, {"sha": "94a5d23a873aa9284272781b9529d2942368306a", "filename": "gcc/testsuite/g++.dg/concepts/class1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "63891282085983feec15f03404038c6c22966601", "filename": "gcc/testsuite/g++.dg/concepts/class2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "b2757567d4f6bb3d42a711aae8ab675476209fc9", "filename": "gcc/testsuite/g++.dg/concepts/class3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "86eecbc457294e6ab2829179a92d02b6cada6705", "filename": "gcc/testsuite/g++.dg/concepts/class4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool Class() { return __is_class(T); }"}, {"sha": "76398609709c9e7da17358b64ce265119b96b4cf", "filename": "gcc/testsuite/g++.dg/concepts/class5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool One() { return sizeof(T) >= 4; }"}, {"sha": "29dcb8ff97e6f07ec39dfc8407b4e82185e42693", "filename": "gcc/testsuite/g++.dg/concepts/class6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fclass6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool One() { return sizeof(T) >= 4; }"}, {"sha": "feaf3bb64297dba9e1d0160aab6540d3ed59aaaa", "filename": "gcc/testsuite/g++.dg/concepts/constrained-parm.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fconstrained-parm.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fconstrained-parm.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fconstrained-parm.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "fcbfc8f659587887e737c2aa56cf09d5e25a407a", "filename": "gcc/testsuite/g++.dg/concepts/decl-diagnose.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdecl-diagnose.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdecl-diagnose.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdecl-diagnose.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n typedef concept int CINT; // { dg-error \"'concept' cannot appear in a typedef declaration\" }\n "}, {"sha": "5eec87b3c0bb501587052bca28dba2120aec1de0", "filename": "gcc/testsuite/g++.dg/concepts/deduction-constraint1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdeduction-constraint1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdeduction-constraint1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdeduction-constraint1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67007\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class U>\n concept bool A ="}, {"sha": "c977eaa8fcda93ae0881ce6754750528f75391e2", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67159\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T, class U>\n concept bool SameAs = __is_same_as(T, U);"}, {"sha": "9bd50974f57801df385b010072d92af9b104d55f", "filename": "gcc/testsuite/g++.dg/concepts/disjunction1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdisjunction1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdisjunction1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdisjunction1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66962\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <typename> struct remove_cv;\n template <typename> struct is_reference;"}, {"sha": "9fd4f4301fcd86d44dd1380c25bc0724a91a22d2", "filename": "gcc/testsuite/g++.dg/concepts/dr1430.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdr1430.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdr1430.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdr1430.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66092\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <type_traits>\n "}, {"sha": "d666d9a7567006c5bcd729d5092434da98b0fc3e", "filename": "gcc/testsuite/g++.dg/concepts/equiv.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fequiv.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fequiv.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fequiv.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n // Check equivalence of short- and longhand declarations.\n "}, {"sha": "694d87a2c5632d17e7aac9a6956ba7feabef6f40", "filename": "gcc/testsuite/g++.dg/concepts/equiv2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fequiv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fequiv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fequiv2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n \n // template<typename T>"}, {"sha": "58d8dec0db6ad532153e19451481a99cb1aa1693", "filename": "gcc/testsuite/g++.dg/concepts/explicit-inst1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-inst1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-inst1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-inst1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "f47b7585e62d56d3242abb0f892e6fca5b9243e6", "filename": "gcc/testsuite/g++.dg/concepts/explicit-inst2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-inst2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-inst2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-inst2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "00dee2fb2b9b87649bc3ee56f3242a89d1a2c7b0", "filename": "gcc/testsuite/g++.dg/concepts/explicit-inst3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-inst3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-inst3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-inst3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "c0f585c957a8403302a7a01c3969174edee7fb9a", "filename": "gcc/testsuite/g++.dg/concepts/explicit-inst4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-inst4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-inst4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-inst4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "38730680e14d9360718fe0c33c786c718045522f", "filename": "gcc/testsuite/g++.dg/concepts/explicit-spec1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <cassert>\n "}, {"sha": "17d48e7c220d1205b66d4bfc7922d835452ad187", "filename": "gcc/testsuite/g++.dg/concepts/explicit-spec2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "1edc83e95a88cef29889e35721e77bbf9c903faa", "filename": "gcc/testsuite/g++.dg/concepts/explicit-spec3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "963c030d464302cf5f295d2f0dfa9a7d9b877e7b", "filename": "gcc/testsuite/g++.dg/concepts/explicit-spec4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <cassert>\n "}, {"sha": "e0d89bce2d6ad86da38aa8e730f7138c8b5bfca4", "filename": "gcc/testsuite/g++.dg/concepts/explicit-spec5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <cassert>\n "}, {"sha": "0af1df46d60ac1f7289c5938962046d062da63b7", "filename": "gcc/testsuite/g++.dg/concepts/explicit-spec6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexplicit-spec6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n struct A {"}, {"sha": "6430f89e309c4c386a0697af6fa538206df99ec8", "filename": "gcc/testsuite/g++.dg/concepts/expression.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexpression.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexpression.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexpression.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <cassert>\n #include <iostream>"}, {"sha": "3583452d47efaaac781bc0e2abee69b4e669fb7a", "filename": "gcc/testsuite/g++.dg/concepts/expression2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexpression2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexpression2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexpression2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n concept bool C1()"}, {"sha": "4148aa6511e3f125f5ba3ce031c12e75c27c2066", "filename": "gcc/testsuite/g++.dg/concepts/expression3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexpression3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexpression3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fexpression3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n concept bool C()"}, {"sha": "ad2bfb080a0643bd2dd30e8d20711fb11043cd7c", "filename": "gcc/testsuite/g++.dg/concepts/feature-macro.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffeature-macro.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffeature-macro.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffeature-macro.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #ifndef __cpp_concepts\n #error __cpp_concepts not defined"}, {"sha": "b858c1ac93f38a1868c52a8c25f07539bfed5d79", "filename": "gcc/testsuite/g++.dg/concepts/fn-concept1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn-concept1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn-concept1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn-concept1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool Tuple() { // { dg-error \"multiple statements\" }"}, {"sha": "9acc24177ce58f3c5b33e0e593f94fb5e2d25d7b", "filename": "gcc/testsuite/g++.dg/concepts/fn-concept2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn-concept2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn-concept2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn-concept2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept auto C1() { return 0; } // { dg-error \"deduced return type\" }"}, {"sha": "800a0d36f0b948b3a30a25cf9c6420f7f8791ef9", "filename": "gcc/testsuite/g++.dg/concepts/fn1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "71bd82c5f6044c3c63457e556d72450cfb30bafb", "filename": "gcc/testsuite/g++.dg/concepts/fn10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn10.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n // Test that constraint satisfaction checks work even when\n // processing template declarations."}, {"sha": "67e35acc362639d7adc4dc785275477607af9cf9", "filename": "gcc/testsuite/g++.dg/concepts/fn2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "6695f2f98a6d5d5ff21a0dab3aebe9898da86de9", "filename": "gcc/testsuite/g++.dg/concepts/fn3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <cassert>\n "}, {"sha": "ecc3d7b1beebee8a12a418c93a9c866045496ea5", "filename": "gcc/testsuite/g++.dg/concepts/fn4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "d4a2e003b9c089bf8e604adfdf95da0bbf782136", "filename": "gcc/testsuite/g++.dg/concepts/fn5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n // Check shorthand notation.\n "}, {"sha": "12936076449556add0ad827aff452a9abb0b3f4b", "filename": "gcc/testsuite/g++.dg/concepts/fn6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n // Redefinition errors.\n "}, {"sha": "1df21fe9024d55de95deeaac506bffa9acf9f07c", "filename": "gcc/testsuite/g++.dg/concepts/fn7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn7.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do link }\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n // FIXME: What is this actually testing?\n "}, {"sha": "5c796c7e3b2ad4356a1bde8009d8707a4006ccb6", "filename": "gcc/testsuite/g++.dg/concepts/fn8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn8.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool Class() { return __is_class(T); }"}, {"sha": "1efde5f744a7ab529ec668d98754b305dceed2c9", "filename": "gcc/testsuite/g++.dg/concepts/fn9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffn9.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <cassert>\n "}, {"sha": "c437c79d01fbb0d75ed5c5e8805f0779e2c6ffed", "filename": "gcc/testsuite/g++.dg/concepts/friend1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffriend1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffriend1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffriend1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool Eq() { return requires(T t) { t == t; }; }"}, {"sha": "5f14905a738624bcad9bf99686755e62f32e0e87", "filename": "gcc/testsuite/g++.dg/concepts/friend2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffriend2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffriend2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ffriend2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool Eq() { return requires(T t) { t == t; }; }"}, {"sha": "c34f832816ef809747fb1222b263c4f1950eae87", "filename": "gcc/testsuite/g++.dg/concepts/generic-fn-err.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fgeneric-fn-err.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fgeneric-fn-err.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fgeneric-fn-err.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "7a48e7640d00ba49f77f6f56e8ec6a09c521dc5f", "filename": "gcc/testsuite/g++.dg/concepts/generic-fn.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fgeneric-fn.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fgeneric-fn.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fgeneric-fn.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <cassert>\n #include <type_traits>"}, {"sha": "38a0b17b1f82d76e7ff9988163bad1973a1c57e2", "filename": "gcc/testsuite/g++.dg/concepts/iconv1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ficonv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ficonv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ficonv1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67240\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n int foo(int x)\n {"}, {"sha": "952c8f61ef4941992ec28e06ddc07c5cb0dd0ae7", "filename": "gcc/testsuite/g++.dg/concepts/inherit-ctor1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "b36b993098ab198cd3cccb0feb8516bf10317bd9", "filename": "gcc/testsuite/g++.dg/concepts/inherit-ctor2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "c7ad84aa6e7b5963afb0baf691a47c4588354cd7", "filename": "gcc/testsuite/g++.dg/concepts/inherit-ctor3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "26940ba44be8278a4bb547c7d83de3476b6097b6", "filename": "gcc/testsuite/g++.dg/concepts/inherit-ctor4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Finherit-ctor4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "ac8a708b107924eaa4092684ee2bd955c7e13de7", "filename": "gcc/testsuite/g++.dg/concepts/intro1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C = __is_class(T);"}, {"sha": "928cc2e54878fdb67a337f4373c96db71201ddf8", "filename": "gcc/testsuite/g++.dg/concepts/intro2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <cassert>\n "}, {"sha": "78d091d3a883c0181ecad5cb256f2e366c55b3d5", "filename": "gcc/testsuite/g++.dg/concepts/intro3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename ... T>\n   concept bool C1 = true;"}, {"sha": "2a3e2ba17e424aa32187f373096dc7d8984645a1", "filename": "gcc/testsuite/g++.dg/concepts/intro4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename ... T>\n   concept bool C1 = true;"}, {"sha": "c5fac8000c35d3382560833e2fc053b79850902a", "filename": "gcc/testsuite/g++.dg/concepts/intro5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T, typename U = int>\n   concept bool C()"}, {"sha": "6624c8888a9ae145ac8afeded827f0fde1474fe8", "filename": "gcc/testsuite/g++.dg/concepts/intro6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67003\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n namespace X {\n   template<class>"}, {"sha": "9cb4a76740b5918f497b2876a2038b767224fc44", "filename": "gcc/testsuite/g++.dg/concepts/intro7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fintro7.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66985\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <template <class> class T>\n concept bool _Valid = requires { typename T<int>; };"}, {"sha": "4eae9f5b30134aaf61e77445e8b31443c2a82d77", "filename": "gcc/testsuite/g++.dg/concepts/member-concept.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmember-concept.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmember-concept.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmember-concept.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n struct Base {\n   template<typename T>"}, {"sha": "a42554ad31a0602f69d8703074739cdc6538edb0", "filename": "gcc/testsuite/g++.dg/concepts/memfun-err.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmemfun-err.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmemfun-err.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmemfun-err.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run}\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n \n template<typename T>"}, {"sha": "d387234312a9aedd5e93801d93defe252d3b993d", "filename": "gcc/testsuite/g++.dg/concepts/memfun.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmemfun.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmemfun.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmemfun.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run}\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <cassert>\n "}, {"sha": "a5965fc869cde77b76bf76f8b5be7428b6a48cec", "filename": "gcc/testsuite/g++.dg/concepts/memfun2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmemfun2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmemfun2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmemfun2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/72415\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<int... Indices>\n struct indices {};"}, {"sha": "fe0f1d5df690bf87fa724ebcff693ba9bca62307", "filename": "gcc/testsuite/g++.dg/concepts/memtmpl1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmemtmpl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmemtmpl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fmemtmpl1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T>\n struct A {"}, {"sha": "90a8ec72b2180110a467360b157975b928d169a1", "filename": "gcc/testsuite/g++.dg/concepts/partial-concept-id1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-concept-id1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-concept-id1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-concept-id1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool Type() { return true; }"}, {"sha": "4c1373a0edad437cca799f1cb4a82c2967ac7716", "filename": "gcc/testsuite/g++.dg/concepts/partial-concept-id2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-concept-id2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-concept-id2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-concept-id2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n // Make sure that we check partial concept ids\n // with variable concepts."}, {"sha": "c3836d445ccca438fb08030dacc863e8a0e0ee83", "filename": "gcc/testsuite/g++.dg/concepts/partial-spec.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n // Check that constraints don't break unconstrained partial\n // specializations."}, {"sha": "26d0ff42f557b1d7279d163aa89208cf8be7b25c", "filename": "gcc/testsuite/g++.dg/concepts/partial-spec2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67084\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T>\n constexpr bool p = false;"}, {"sha": "2ac5b9818e5fc4db7297aacae6c24154f12b2cb6", "filename": "gcc/testsuite/g++.dg/concepts/partial-spec3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T> struct A { };\n template <class T> requires false struct A<T*> { };"}, {"sha": "5669bd4ec857aa678eb3d42b794133a01aded8ee", "filename": "gcc/testsuite/g++.dg/concepts/partial-spec4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T> concept bool is_int = __is_same_as(T,int);\n "}, {"sha": "18ef242c27144169538aa8d820a8f07f982f160a", "filename": "gcc/testsuite/g++.dg/concepts/partial-spec5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67138\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T>\n concept bool _Auto = true;"}, {"sha": "af4411baae582792492f674555864faa502fe358", "filename": "gcc/testsuite/g++.dg/concepts/partial-spec6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpartial-spec6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67152\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T>\n concept bool HasType = requires { typename T::type; };"}, {"sha": "bf7f959e2279b18b487bf212fe82a0db791df145", "filename": "gcc/testsuite/g++.dg/concepts/placeholder1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T, typename U>\n struct is_same"}, {"sha": "c8981b617de52ef842666291fef55606a9e0be36", "filename": "gcc/testsuite/g++.dg/concepts/placeholder2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n // Check argument deduction constraints.\n // TODO: We shoul have more of these..."}, {"sha": "44dba8b98a2cd20d553313eb449787970b11e877", "filename": "gcc/testsuite/g++.dg/concepts/placeholder3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66218\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T, class U>\n concept bool Same = __is_same_as(T, U);"}, {"sha": "b35238c1ce23f1e0615bbc9d05605dbef5e8a209", "filename": "gcc/testsuite/g++.dg/concepts/placeholder4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66218\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T, class U>\n concept bool Same = __is_same_as(T, U);"}, {"sha": "c0b67b9e78cb1ae9a5ac4d41bcd5603ac3f6e70f", "filename": "gcc/testsuite/g++.dg/concepts/placeholder5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T, class U>\n concept bool Same = __is_same_as(T, U);"}, {"sha": "ab56c637d3edb4d51a91ae2c85d8db6f5e3f1cde", "filename": "gcc/testsuite/g++.dg/concepts/placeholder6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <int I> struct B { static const int i = I; };\n template <int I> concept bool Few = I < 10;"}, {"sha": "57375d748025fcc121a0109a6d865caf7366da05", "filename": "gcc/testsuite/g++.dg/concepts/pr65552.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65552.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65552.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65552.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n concept bool Concept() {"}, {"sha": "e027dccf7d83ab0d80bc5dd7589bdc18d7e0797b", "filename": "gcc/testsuite/g++.dg/concepts/pr65575.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65575.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65575.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65575.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n concept bool C = false;"}, {"sha": "db36a6be29f6c5c203c992a010a16cd4bc335449", "filename": "gcc/testsuite/g++.dg/concepts/pr65634.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65634.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65634.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65634.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n concept bool C1() {"}, {"sha": "01c72a7fac4e898ffd7c295463298fb4b6e21931", "filename": "gcc/testsuite/g++.dg/concepts/pr65636.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65636.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65636.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65636.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n using TD = int;\n "}, {"sha": "1df9a5949d88f2ee51ff0a674278b8376626ae1d", "filename": "gcc/testsuite/g++.dg/concepts/pr65681.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65681.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65681.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65681.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n concept bool C()"}, {"sha": "5af6e7dc622fc7211e8f32c7561152218390cd2e", "filename": "gcc/testsuite/g++.dg/concepts/pr65848.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65848.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65848.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65848.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n // Performance test... This should be fast.\n "}, {"sha": "395fac4f5016d7c8fb729388ef373b4a6b43925a", "filename": "gcc/testsuite/g++.dg/concepts/pr65854.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65854.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65854.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr65854.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n // Handle alias templates in type requirements.\n "}, {"sha": "e5b3c287c84c0363760cb53f29f2ccb4aa6f9491", "filename": "gcc/testsuite/g++.dg/concepts/pr66091.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr66091.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr66091.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr66091.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n concept bool C1()"}, {"sha": "87e9bb582481138ce3b41545bcb4418007956e63", "filename": "gcc/testsuite/g++.dg/concepts/pr67249.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr67249.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr67249.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr67249.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<class T> concept bool C1 = true;\n template<class A, class B> struct Pair {};"}, {"sha": "19ce383246a00a26ecae888ff48c837636385491", "filename": "gcc/testsuite/g++.dg/concepts/pr68434.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr68434.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr68434.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr68434.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class>\n concept bool C1 () {"}, {"sha": "31a98f3cf88f8fc13f30fe7c53f3713807d60af8", "filename": "gcc/testsuite/g++.dg/concepts/pr68683.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr68683.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr68683.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr68683.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <typename, typename>\n struct is_same {"}, {"sha": "6d5a4d5fdea8587f53f27ac2c4709efdc5116854", "filename": "gcc/testsuite/g++.dg/concepts/regress/alias-decl-42.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fregress%2Falias-decl-42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fregress%2Falias-decl-42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fregress%2Falias-decl-42.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/59200\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n struct A\n {"}, {"sha": "97b45cd15f071d4685f7aafb09001244ea0d4434", "filename": "gcc/testsuite/g++.dg/concepts/req-neg1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq-neg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq-neg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq-neg1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n void f1(int a) requires true;         // OK\n auto f2(int a) -> bool requires true; // OK"}, {"sha": "688cb19ad433bf1fd81de91e9e820a261c4e53aa", "filename": "gcc/testsuite/g++.dg/concepts/req1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool Class () { return __is_class(T); }"}, {"sha": "8cbd89f294b7eec45a2afac78a19a0a0e633eadf", "filename": "gcc/testsuite/g++.dg/concepts/req10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq10.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n // Test that standard conversions are checked with\n // implicit conversion constraints."}, {"sha": "2d0c5c005d91582db8cdf393a035f3e074b7b344", "filename": "gcc/testsuite/g++.dg/concepts/req11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq11.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n // Check that we can evaluate constant requires-expressions\n // as constant expressions, for the curious case when they"}, {"sha": "38c2c3e1ada83bf064c75494925095bdee2c3a82", "filename": "gcc/testsuite/g++.dg/concepts/req12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq12.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66218\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <type_traits>\n "}, {"sha": "2f58742c532e65e54bf553128abd540d52060fb6", "filename": "gcc/testsuite/g++.dg/concepts/req13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq13.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66758\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T, class...Args>\n concept bool Constructible ="}, {"sha": "de00a1eb49cab3fae9aea71fda8adab70aa93204", "filename": "gcc/testsuite/g++.dg/concepts/req14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq14.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66758\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T, class U>\n concept bool C = requires (T t, U u) { t + u; };"}, {"sha": "53d796c1a8405170e7f00eed6c04d86e830072d0", "filename": "gcc/testsuite/g++.dg/concepts/req15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq15.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66832\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T, class U, unsigned N>\n   requires requires (T& t, U &u) { t.foo(); u.foo(); }"}, {"sha": "ee80da078cd9d410a3ed1144486b05a8e3061f4a", "filename": "gcc/testsuite/g++.dg/concepts/req16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq16.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66988\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <type_traits>\n "}, {"sha": "e1e3eac416cab2c8cc6d585d195cd0deabbd1d13", "filename": "gcc/testsuite/g++.dg/concepts/req17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq17.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67018\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <typename T>\n constexpr bool Val = true;"}, {"sha": "5ddb9e7dda9f62dd979b731ad428a7865c998fe2", "filename": "gcc/testsuite/g++.dg/concepts/req18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq18.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class> struct all_same {\n   static constexpr bool value = 1;"}, {"sha": "d52ac23ddda22585f036aa23a4d1e3d54c524669", "filename": "gcc/testsuite/g++.dg/concepts/req19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq19.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n struct B\n {"}, {"sha": "3f35ee8f0f5f6f637ce11c2961fccb099228fe9e", "filename": "gcc/testsuite/g++.dg/concepts/req2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool Class () { return __is_class(T); }"}, {"sha": "38ade5607531670cd14a93ab535a015f1639150d", "filename": "gcc/testsuite/g++.dg/concepts/req20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq20.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T> concept bool C = true;\n "}, {"sha": "8322e71623bac9f23a0818dbb3cb8b48b84268df", "filename": "gcc/testsuite/g++.dg/concepts/req3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool Class () { return __is_class(T); }"}, {"sha": "b8c420939119dd3d851bdb0c0dc5146ece0d1f0b", "filename": "gcc/testsuite/g++.dg/concepts/req4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n struct fool {\n   constexpr fool operator&&(fool) const { return {}; }"}, {"sha": "a3a315c600b7bebd4314f6fb8fcc0803bfbd8853", "filename": "gcc/testsuite/g++.dg/concepts/req5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n struct fool { };\n "}, {"sha": "670fd542f6f0cc01e619e0d9d845358af5cc527a", "filename": "gcc/testsuite/g++.dg/concepts/req6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n struct X { };\n int operator==(X, X) { return 0; }"}, {"sha": "38933e4cf091c6cb437b52d74081efacc837eabb", "filename": "gcc/testsuite/g++.dg/concepts/req7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq7.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <vector>\n "}, {"sha": "5a34358bbd5528872b19b41796929c179bb92d60", "filename": "gcc/testsuite/g++.dg/concepts/req8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq8.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n // Check that type requirements are normalized correctly.\n "}, {"sha": "c4d6b57ab659437dceb4b33837c8571c314b6015", "filename": "gcc/testsuite/g++.dg/concepts/req9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Freq9.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n struct S1 {};"}, {"sha": "88731d6e24950fab005ca8540748ce7d09fdc052", "filename": "gcc/testsuite/g++.dg/concepts/template-parm1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C1 = __is_same_as(T, int);"}, {"sha": "cbce4f3be6d57f00044ab103548a6c02328c6dd7", "filename": "gcc/testsuite/g++.dg/concepts/template-parm10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm10.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<int N, class T>\n   concept bool P() { return true; }"}, {"sha": "73f38815fb7182d1971315e2780ec6934550aeff", "filename": "gcc/testsuite/g++.dg/concepts/template-parm11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm11.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n concept bool NameProvider()"}, {"sha": "aee63dc9d2cdf47dacda3cfaa3a45aa6d6fe09f5", "filename": "gcc/testsuite/g++.dg/concepts/template-parm12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm12.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Conceptized version of template/ttp23.C\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T> concept bool Foo = true;\n "}, {"sha": "6a32cfee88530fea46af45d5128cee98c454a84c", "filename": "gcc/testsuite/g++.dg/concepts/template-parm2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C1 = __is_same_as(T, int);"}, {"sha": "61fa86dc435aecebca2cd7116c892bb21eace24d", "filename": "gcc/testsuite/g++.dg/concepts/template-parm3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C1 = __is_same_as(T, int);"}, {"sha": "c38404239f5ddcdce7ab7296bd80b0165c0babb5", "filename": "gcc/testsuite/g++.dg/concepts/template-parm4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C1 = __is_same_as(T, int);"}, {"sha": "5e537b048ba243c2495dbfd176d52d466963cba6", "filename": "gcc/testsuite/g++.dg/concepts/template-parm5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C1 = __is_same_as(T, int);"}, {"sha": "eb4bb1670b153fb24d804fae14c16790a272a603", "filename": "gcc/testsuite/g++.dg/concepts/template-parm6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename... Ts> struct are_same;\n "}, {"sha": "27d19e97719a2a30017ec9be887a802d0f13128d", "filename": "gcc/testsuite/g++.dg/concepts/template-parm7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm7.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename... Ts> struct are_same;\n "}, {"sha": "63a12c47f69634fed55f23ea77f611bf28e7a6aa", "filename": "gcc/testsuite/g++.dg/concepts/template-parm8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm8.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "e34c606e3d6adcd1248ee2c41dd984f1c4df486d", "filename": "gcc/testsuite/g++.dg/concepts/template-parm9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-parm9.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C() { return __is_class(T); }"}, {"sha": "e828db96a8153836e150e3c7e29218bceeee6f20", "filename": "gcc/testsuite/g++.dg/concepts/template-template-parm1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-template-parm1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-template-parm1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftemplate-template-parm1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66937\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n #include <tuple>\n "}, {"sha": "b5a718565457e3e34e6cd3dd3206faa6c55190ee", "filename": "gcc/testsuite/g++.dg/concepts/traits1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftraits1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftraits1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftraits1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool Nothrow_assignable() { return __has_nothrow_assign(T); }"}, {"sha": "3383d26469d076a35b8c3dbf163e6b43a259bd3e", "filename": "gcc/testsuite/g++.dg/concepts/traits2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftraits2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftraits2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Ftraits2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool Nothrow_assignable() { return __has_nothrow_assign(T); }"}, {"sha": "1456c077b4a84a9a8f4ecdd5ebe02ad7432ab5b6", "filename": "gcc/testsuite/g++.dg/concepts/var-concept1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n concept bool C1 = __is_class(T);"}, {"sha": "c71e8a40a3658c66384ef1e432510c1a3b066391", "filename": "gcc/testsuite/g++.dg/concepts/var-concept2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C1 = __is_class(T);"}, {"sha": "d4f4f5732051a3b35484b88fab72e8733b462537", "filename": "gcc/testsuite/g++.dg/concepts/var-concept3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T>\n   concept bool C1 = __is_class(T);"}, {"sha": "677deda08d819336cc2a48cd3dfe4576ff61e3dc", "filename": "gcc/testsuite/g++.dg/concepts/var-concept4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T, typename U>\n concept bool Same = __is_same_as(T, U);"}, {"sha": "68c4a6f99d9e7f1006967f3a4265e04ce89abd61", "filename": "gcc/testsuite/g++.dg/concepts/var-concept5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename T1, typename T2>\n concept bool C1 = true;"}, {"sha": "645e8cac966c45f29b58efe7f5e6ac824dfccb8e", "filename": "gcc/testsuite/g++.dg/concepts/var-concept6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-concept6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T>\n concept int C = true;\t\t// { dg-error \"bool\" }"}, {"sha": "f24d76db2a922b762727e9aa9218dca132fdb639", "filename": "gcc/testsuite/g++.dg/concepts/var-templ1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-templ1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-templ1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-templ1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67117\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T>\n   requires false"}, {"sha": "2e04ed64833c265dc94f2d632e5d7934aebc47a7", "filename": "gcc/testsuite/g++.dg/concepts/var-templ2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-templ2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-templ2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-templ2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67139\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T>\n constexpr typename T::type::value_type _v = T::type::value;"}, {"sha": "07468637900942a74669a90c4221f118bbe0710b", "filename": "gcc/testsuite/g++.dg/concepts/var-templ3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-templ3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-templ3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvar-templ3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/68666\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n struct A {\n   template <class>"}, {"sha": "b1b5ba5bc4437d780000f74120dbde7b908e3fe5", "filename": "gcc/testsuite/g++.dg/concepts/variadic1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvariadic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvariadic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvariadic1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66712\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T, class...Args>\n concept bool _Constructible_ ="}, {"sha": "2b64a62edef39331979c01dffe0045aca46520c3", "filename": "gcc/testsuite/g++.dg/concepts/variadic2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvariadic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvariadic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvariadic2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template <class T> concept bool Copyable = requires (T t) { T(t); };\n template <class T> concept bool Constructable = requires { T(); };"}, {"sha": "48bdfeed5486daf3642a194f353093e9770ce99b", "filename": "gcc/testsuite/g++.dg/concepts/variadic4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvariadic4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvariadic4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fvariadic4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/73456\n-// { dg-options \"-std=c++1z -fconcepts\" }\n+// { dg-options \"-std=c++17 -fconcepts\" }\n \n template<typename...> struct list {};\n "}, {"sha": "48f5dd1e082ceb3e6a3afe6c35dfb441a71cd722", "filename": "gcc/testsuite/g++.dg/cpp/pr23827_cxx98_neg.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr23827_cxx98_neg.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr23827_cxx98_neg.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fpr23827_cxx98_neg.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n // { dg-do compile { target c++98_only } }\n /* { dg-options \"-ansi -pedantic-errors\" }  */\n \n-double x = 0x3.1415babep0; // { dg-error \"use of C..1z hexadecimal floating constant\" }\n+double x = 0x3.1415babep0; // { dg-error \"use of C..17 hexadecimal floating constant\" }"}, {"sha": "40b4ef2233e3dd0e51123b646182b62322753173", "filename": "gcc/testsuite/g++.dg/cpp0x/auto9.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto9.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -103,15 +103,15 @@ auto fnlate2 () -> auto *;\t\t\t// { dg-error \"invalid use of|expected\" \"\" { target\n \n void\n badthrow () throw (auto)\t\t\t// { dg-error \"invalid use of\" }\n-{\t\t\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n-}\t\t\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n+{\t\t\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } .-1 }\n+}\t\t\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-2 }\n \n void\n badthrow2 () throw (auto &)\t\t\t// { dg-error \"invalid use of|expected\" }\n-{\t\t\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n-}\t\t\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n+{\t\t\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } .-1 }\n+}\t\t\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-2 }\n \n-template <auto V = 4> struct G {};\t\t// { dg-error \"auto\" \"\" { target { ! c++1z } } }\n+template <auto V = 4> struct G {};\t\t// { dg-error \"auto\" \"\" { target { ! c++17 } } }\n \n template <typename T> struct H { H (); ~H (); };\n H<auto> h;\t\t\t\t\t// { dg-error \"invalid|initializer\" }"}, {"sha": "dfbdd2f2ed1bca53af5e1fabb737fa3f0a5a51f0", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted23.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted23.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -10,22 +10,22 @@ A a;\n \n struct B\n {\n-  B() throw (int) = default; // { dg-message \"exception-specification\" \"\" { target { ! c++1z } } }\n-};\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n-\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n-B b;\t\t\t\t// { dg-error \"deleted\" \"\" { target { ! c++1z } } }\n+  B() throw (int) = default; // { dg-message \"exception-specification\" \"\" { target { ! c++17 } } }\n+};\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } .-1 }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-2 }\n+B b;\t\t\t\t// { dg-error \"deleted\" \"\" { target { ! c++17 } } }\n \n struct C\n {\n-  C() throw (int) { }\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n-};\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n+  C() throw (int) { }\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } }\n+};\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-1 }\n \n C c;\n \n struct D: C\n {\n-  D() throw (int) = default;\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n-};\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n+  D() throw (int) = default;\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } }\n+};\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-1 }\n \n D d;\n "}, {"sha": "fe1d4c0e29bf84c34035edf5fd8526c221e60270", "filename": "gcc/testsuite/g++.dg/cpp0x/error5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -41,7 +41,7 @@ struct bad_alloc { };\n \n void* operator new(std::size_t)\n #if __cplusplus <= 201402L\n-throw (std::bad_alloc)\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n+throw (std::bad_alloc)\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n #endif\n ;\n "}, {"sha": "3fb50df3f01e638966128a8280e524acf3ea9b01", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-eh2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-eh2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-eh2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-eh2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,7 +1,7 @@\n // PR c++/47263\n // PR c++/49260\n // { dg-options \"-fno-asynchronous-unwind-tables -fno-dwarf2-cfi-asm\" }\n-// { dg-do run { target { c++11 && { ! c++1z } } } }\n+// { dg-do run { target { c++11 && { ! c++17 } } } }\n \n #include <exception>\n "}, {"sha": "a94fa03ad2b402a865a4a0a5b7b7d60757b92dae", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept02.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept02.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -10,10 +10,10 @@ void f();\n \n SA(!noexcept(f()));\n \n-void g() throw (int);\t\t// { dg-message \"previous declaration\" \"\" { target { ! c++1z } } }\n-\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n-\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n-void g() noexcept(false);\t// { dg-error \"different exception\" \"\" { target { ! c++1z } } }\n+void g() throw (int);\t\t// { dg-message \"previous declaration\" \"\" { target { ! c++17 } } }\n+\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } .-1 }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-2 }\n+void g() noexcept(false);\t// { dg-error \"different exception\" \"\" { target { ! c++17 } } }\n void g();\n \n void h() throw();"}, {"sha": "a9791ec1608885594cdbbee070c32789526796b5", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept08.C", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept08.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept08.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept08.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -7,8 +7,8 @@ struct A\n   virtual void g() throw();\n   virtual void h() noexcept;\n   virtual void i() noexcept(false);\n-  virtual void j() throw(int);\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n-};\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n+  virtual void j() throw(int);\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } }\n+};\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-1 }\n \n struct B: A\n {\n@@ -34,23 +34,23 @@ struct D: A\n   void g() noexcept(false);\t// { dg-error \"looser\" }\n   void h() noexcept(false);\t// { dg-error \"looser\" }\n   void i() noexcept(false);\n-  void j() noexcept(false);\t// { dg-error \"looser\" \"\" { target { ! c++1z } } }\n+  void j() noexcept(false);\t// { dg-error \"looser\" \"\" { target { ! c++17 } } }\n };\n \n struct E: A\n {\n-  void f() throw(int);\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n-\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n+  void f() throw(int);\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-1 }\n   void g() throw(int);\t\t// { dg-error \"looser\" }\n-\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n-\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n+\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } .-1 }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-2 }\n   void h() throw(int);\t\t// { dg-error \"looser\" }\n-\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n-\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n-  void i() throw(int);\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n-\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n-  void j() throw(int);\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++1z } }\n-\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-1 }\n+\t\t\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } .-1 }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-2 }\n+  void i() throw(int);\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-1 }\n+  void j() throw(int);\t\t// { dg-error \"dynamic exception specification\" \"\" { target c++17 } }\n+\t\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-1 }\n };\n \n struct F: A\n@@ -59,5 +59,5 @@ struct F: A\n   void g();\t\t\t// { dg-error \"looser\" }\n   void h();\t\t\t// { dg-error \"looser\" }\n   void i();\n-  void j();\t\t\t// { dg-error \"looser\" \"\" { target { ! c++1z } } }\n+  void j();\t\t\t// { dg-error \"looser\" \"\" { target { ! c++17 } } }\n };"}, {"sha": "94af8fcf0d035d2005f766b569f31ad1b4a85069", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept19.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -24,7 +24,7 @@ struct D\n {\n   D ()\n #if __cplusplus <= 201402L\n-  throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n+  throw (int)\t\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n #endif\n   ;\n };"}, {"sha": "239fe17e273e22c65eec5d2566d85581bedb23ee", "filename": "gcc/testsuite/g++.dg/cpp0x/static_assert8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fstatic_assert8.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -6,4 +6,4 @@ static_assert (1 == 0,); // { dg-error \"expected string-literal before '\\\\)'\" }\n \n static_assert (1 == 0, \"oops\"); // { dg-error \"static assertion failed\" }\n \n-// { dg-error \"static_assert without a message only available with \" \"\" { target { ! c++1z } } 3 }\n+// { dg-error \"static_assert without a message only available with \" \"\" { target { ! c++17 } } 3 }"}, {"sha": "27afc5a6500bd8da31abc43b383d6fec79d6cf2a", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-throw.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-throw.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-throw.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-throw.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -9,9 +9,9 @@ template<int M, int N> struct pair\n \n template<int... M> struct S\n {\n-  template<int... N> static int foo() throw (pair <M, N>...) // { dg-error \"mismatched\" \"\" { target { ! c++1z } } }\n-  {\t\t\t\t\t\t\t     // { dg-error \"dynamic exception specification\" \"\" { target c++1z } .-1 }\n-    return 1;\t\t\t\t\t\t     // { dg-warning \"deprecated\" \"\" { target { ! c++1z } } .-2 }\n+  template<int... N> static int foo() throw (pair <M, N>...) // { dg-error \"mismatched\" \"\" { target { ! c++17 } } }\n+  {\t\t\t\t\t\t\t     // { dg-error \"dynamic exception specification\" \"\" { target c++17 } .-1 }\n+    return 1;\t\t\t\t\t\t     // { dg-warning \"deprecated\" \"\" { target { ! c++17 } } .-2 }\n   }\n };\n \n@@ -22,5 +22,5 @@ int bar ()\n \n int wibble()\n {\n-  return S<0, 1, 2>::foo<0, 1> (); // { dg-error \"no matching\" \"\" { target { ! c++1z } } }\n+  return S<0, 1, 2>::foo<0, 1> (); // { dg-error \"no matching\" \"\" { target { ! c++17 } } }\n }"}, {"sha": "396df09dbe2a75ef98fb1958943f4695ab477b2c", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic73.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic73.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic73.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic73.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -5,7 +5,7 @@ struct C {};\n \n template<typename... Exceptions> void f(int idx)\n #if __cplusplus <= 201402L\n-throw(Exceptions...)\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++1z } } }\n+throw(Exceptions...)\t\t// { dg-warning \"deprecated\" \"\" { target { ! c++17 } } }\n #endif\n {\n   if (idx == 0) throw A();"}, {"sha": "3caa814c58dc675899e002ea1d7ed3878afc8a48", "filename": "gcc/testsuite/g++.dg/cpp1z/abbrev1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fabbrev1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fabbrev1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fabbrev1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/64969\n-// { dg-options \"-std=c++1z\" }\n+// { dg-options \"-std=c++17\" }\n \n auto f1(auto x) { return *x; }\n decltype(auto) f2(auto x) { return *x; }"}, {"sha": "1dc6af3a57d6de86ee5b2f899045239f4b1e513a", "filename": "gcc/testsuite/g++.dg/cpp1z/abbrev2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fabbrev2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fabbrev2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fabbrev2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,6 +1,6 @@\n // PR c++/66197\n // { dg-do run }\n-// { dg-options \"-std=c++1z\" }\n+// { dg-options \"-std=c++17\" }\n \n extern \"C\" void abort();\n "}, {"sha": "2c6bdcafb0cd392201921e9fb7b983cf61521056", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n // { dg-do run }\n \n struct base1 { int b1, b2 = 42; };"}, {"sha": "5d73bbf67392b7a00dcbb14aced222e9d1f0f73f", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n struct derived;\n struct base {\n@@ -8,5 +8,5 @@ private:\n };\n struct derived : base {};\n \n-derived d1{};\t\t\t// { dg-error \"\" \"\" { target c++1z } }\n+derived d1{};\t\t\t// { dg-error \"\" \"\" { target c++17 } }\n derived d2;\t\t\t// still OK"}, {"sha": "ceeb6d8f120cf838bc8aa545ed0065110a707b92", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base2a.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base2a.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -8,5 +8,5 @@ private:\n };\n struct derived : base {};\n \n-derived d1{};\t\t\t// { dg-error \"\" \"\" { target c++1z } }\n+derived d1{};\t\t\t// { dg-error \"\" \"\" { target c++17 } }\n derived d2;\t\t\t// still OK"}, {"sha": "f526a6e8812ea5199980ef8da16b04dd03b232a6", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n struct derived;\n struct base { };"}, {"sha": "8f9126bc23fb6d4ab15e859b50e732891006ddf5", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n // { dg-do run }\n \n struct derived;"}, {"sha": "5f6d9ad8beb1b89036b4c51db3920ee7ac12c4d7", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -w\" }\n+// { dg-options \"-std=c++17 -w\" }\n // { dg-do run }\n \n struct A { };"}, {"sha": "08578ed0b0ba6573f317c6d2e655fdd1f2b92fa8", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -w\" }\n+// { dg-options \"-std=c++17 -w\" }\n // { dg-do run }\n \n struct A { };"}, {"sha": "09f823e1cefb05ef812b9dcdbc855a4dd43c66d2", "filename": "gcc/testsuite/g++.dg/cpp1z/aligned-new1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n // { dg-do run }\n \n #ifndef __STDCPP_DEFAULT_NEW_ALIGNMENT__"}, {"sha": "7bf63091614fa7b4a6f3dee24b1ef8c2d311d844", "filename": "gcc/testsuite/g++.dg/cpp1z/aligned-new2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n // { dg-do run }\n \n #include <new>"}, {"sha": "2bfb6b8d51933480fcedefaf4fce83ac9c3e6947", "filename": "gcc/testsuite/g++.dg/cpp1z/aligned-new3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n // { dg-do run }\n \n #include <new>"}, {"sha": "52011f254ff7ece77b75d5fb62a496290df9059c", "filename": "gcc/testsuite/g++.dg/cpp1z/aligned-new7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faligned-new7.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/77742\n-// { dg-options \"-Wall -std=c++1z\" }\n+// { dg-options \"-Wall -std=c++17\" }\n \n #include <new>\n "}, {"sha": "ad7d2374897d3a6108646f9eda978f9ba01de513", "filename": "gcc/testsuite/g++.dg/cpp1z/attributes-enum-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fattributes-enum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fattributes-enum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fattributes-enum-1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z\" }\n+// { dg-options \"-std=c++17\" }\n \n #ifndef __cpp_enumerator_attributes\n #error __cpp_enumerator_attributes not defined"}, {"sha": "aacfac875b1f024379beab7eb77013d8c436eaf3", "filename": "gcc/testsuite/g++.dg/cpp1z/attributes-enum-1a.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fattributes-enum-1a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fattributes-enum-1a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fattributes-enum-1a.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// This macro should not be defined without -std=c++1z.\n+// This macro should not be defined without -std=c++17.\n \n #ifdef __cpp_enumerator_attributes\n #error __cpp_enumerator_attributes defined"}, {"sha": "236fba33fedd2fc236ecd0a622c68aa124295e3d", "filename": "gcc/testsuite/g++.dg/cpp1z/bool-increment1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fbool-increment1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fbool-increment1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fbool-increment1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n int\n fn (bool b)"}, {"sha": "d3b9b8818fcf4c9c172182f619a8b232d0d9012c", "filename": "gcc/testsuite/g++.dg/cpp1z/byte1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fbyte1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fbyte1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fbyte1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Test for std::byte aliasing properties.\n-// { dg-options \"-std=c++1z -O3\" }\n+// { dg-options \"-std=c++17 -O3\" }\n \n #include <cstddef>\n "}, {"sha": "7e1588e747574c5bf1a8eaa75836c1b6e08b1433", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T>\n struct A"}, {"sha": "a3879fcde97efeb10367341214c4284a8f763f3e", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction10.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T>\n struct A"}, {"sha": "301ba9acffafacc3f2f7114fe0aa09c639f4628b", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction11.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T>\n struct A"}, {"sha": "e858dcf8da1db0c563796dbfd75dec24086c9bb6", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction12.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T>\n struct A"}, {"sha": "0bacf9b304e4d70060ec279ac4e4d480bc719aca", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction13.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T>\n struct A"}, {"sha": "41d58db18bab41efe954cde2d046058d38eee650", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction14.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n #include <vector>\n "}, {"sha": "3f0e2290441d7a4f1c2a4f393a2d78f9082174db", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction15.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n #include <utility>\n "}, {"sha": "2a636e2f70e630020c97363dbb11cf2d0b360d54", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction16.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n #include <tuple>\n "}, {"sha": "646b5aac882236160e457b20009f364ce6671bb0", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction17.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n #include <initializer_list>\n template <class T>"}, {"sha": "42f936aa5cc337660247490b2ef21c1823564c27", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction18.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template<class T> struct S{S(T){}};\n "}, {"sha": "5c21b74ca387260df50b9f61824ee8376427b4ba", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction19.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/77912\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template<class T> struct S{S(T){}}; \n "}, {"sha": "2e1d115c58d7abd6650e894d249ef4f827a5467d", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T>\n struct A"}, {"sha": "988f11bcc62de99b359bf648a6b645fabecfad88", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction20.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/77890\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template<class F> struct S{S(F&&f){}}; \n void f()"}, {"sha": "2c2ce467efa9f98f36803529651e7a47e93965f8", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction21.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction21.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template<class T, class D = int>\n struct S { T t; };"}, {"sha": "a1f0c203750439e2721fccee4af67eb365042869", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction22.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction22.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <template <class> class T>\n void f()"}, {"sha": "a2fa40616212c8b1a830e4370260e282bc1a33d3", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction23.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction23.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T>\n struct A"}, {"sha": "c4d890c1a833fe5ece0dbfcb1fedd541b4a6681e", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction24.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction24.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/78894\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n struct A\n {"}, {"sha": "d3259d88f14dbef5ce367fd77e0893c653f5c925", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction25.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction25.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Testcase from P0512R0 for C++17 NB comment US 19\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template<typename> struct remove_ref;\n template<typename _Tp> struct remove_ref { typedef _Tp type; };"}, {"sha": "74de70ce21f2a1252306ed068f50fd548772045e", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction26.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction26.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Testcase from P0512R0 for C++17 NB comment US 20\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class,class> struct same;\n template <class T> struct same<T,T> {};"}, {"sha": "ce58058b1785bb0aa99e6263a61bc59127cd7d7e", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction27.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction27.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/79316\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n   template<typename T> struct S { S(T t) {} };\n   template<typename T> S(T, int = 7) -> S<T>;"}, {"sha": "8238e5bc25e52b92f1b25568ac83024dca62afbd", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction28.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction28.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/79350\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T>\n struct A"}, {"sha": "8c2d67ef4b489f427510f15292e9bdb2c78b1349", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction29.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction29.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/79500\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template<typename T> struct A {};\n A(...) -> A<int>;"}, {"sha": "13e001afd6b111439b0561c405bef3c895d35d00", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <int I>\n struct A { };"}, {"sha": "d0ef5f9e060f750c3eb121c9a21c7193c9d5d275", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction30.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction30.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T = void> struct A { };\n "}, {"sha": "2fd2f28fad878699f22b1684a90d970603f6850d", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction31.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction31.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T> struct A {\n   A(T); // #1"}, {"sha": "0f4c85ad35f5607e38d7bd9dcd7f082a665e0902", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction32.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction32.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n #include <initializer_list>\n "}, {"sha": "ee9d780aaeaafd59c4a982f3539d9a77a6e734de", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction33.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction33.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class,class> struct same;\n template <class T> struct same<T,T> {};"}, {"sha": "380c35fdb031bf8fddcec0d0d2b3bac520e34ff0", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction34.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction34.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T>\n struct A"}, {"sha": "63d099dc1fd7c2a4c360ab20367aa675933d2fa7", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction35.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction35.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T> struct A;\n "}, {"sha": "3670ceea03a627cfec2da2aa6bbdfc620901dac6", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction36.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction36.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T> struct A {\n   A(T&);"}, {"sha": "883961e04c7825505821aee253413af25a62283f", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction38.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction38.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T> struct A {\n   using value_type = T;"}, {"sha": "f141e9bedfb88393a18c58d37a91d437dadecff7", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction39.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction39.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T> struct A { };\n "}, {"sha": "a86589cf228868eee4e135f6763a21b0a69afb46", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <int I, int J>\n struct A { };"}, {"sha": "3888b3992e22018f56622151a8cb0f6eb7a6685d", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction40.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction40.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/81180\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template < int I > struct int_{};\n "}, {"sha": "f287ce925c948252f2da4ad3270c9b9caed10c51", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction41.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction41.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n #include <initializer_list>\n "}, {"sha": "4623e742fb8212e7a1d19788943563e712186e02", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction42.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction42.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n #include <initializer_list>\n "}, {"sha": "120145516b1fd94031594bda6e35f7730bf0f5f7", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction43.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction43.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/79790\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <int N>\n struct array"}, {"sha": "a7d56fbf93dd3e61d96e297bb536af08e43d86d4", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T>\n struct A"}, {"sha": "3f751cee3e270295c5726803cd91ac8260b82f4d", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T>\n struct A"}, {"sha": "d635a642bfb9c822148ee843dbcbcb463d8ac90f", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction7.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T>\n struct A"}, {"sha": "9836e26d8bbd952ed3521c05ca1df75869954def", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction8.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class T>\n struct A"}, {"sha": "23c58fd20268d1a00489f2f6cd35b42e01d6ea2e", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction9.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n namespace N {\n   template <class T>"}, {"sha": "f10d83008883d027455a78db7fda0c15b4c90adb", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if10.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/78948\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <int T>\n void sizeof_mismatch()"}, {"sha": "aaef952400be246666745e5e67e7c3b921bcfd66", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if11.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,6 +1,6 @@\n // Test that discarded statements differ from unevaluated operands in some\n // ways.\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n struct A { int i; };\n "}, {"sha": "4e887f3b9394f6332ed68d21256d153b43a84a93", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if12.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/80562\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n struct T {\n   constexpr auto foo() { return false; }"}, {"sha": "501e7d32cd7f8e9a9a294b4fad841ebcd68378da", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n constexpr auto Add5 = [](int i) { return i+5; };\n "}, {"sha": "2af652d0a060a5652f80194647f813d7c6b69689", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda10.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Testcase from P0170R1\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n void g() {\n   const int n = 0;"}, {"sha": "f5d58ce9429f1d6a2d4384c166132abca7803f82", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda11.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Testcase from P0170R1\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n // 'v' & 'm' are odr-used but do not occur in a constant-expression within the nested\n // lambda, so are well-formed."}, {"sha": "1ad2f6859f87e135ca27ad519bd0e290d4e65bed", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda12.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n void f(int i)\n {"}, {"sha": "35baff35dedaeaea17a0c8e49f5aa225821b17a6", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda13.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n auto l1 = []() constexpr constexpr { }; // { dg-error \"duplicate\" }\n auto l2 = []() mutable mutable { }; // { dg-error \"duplicate\" }"}, {"sha": "a6b3e532649a2dab6ef9b8a41cc48b0b98b7630b", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Testcase from P0170R1\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n constexpr int AddEleven(int n){\n   return[n]{return n+11;}();"}, {"sha": "b2772b3fd67c363616d33ab214552e13181a0e5d", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n constexpr auto add = [] (int n, int m) {\n   auto L = [=] { return n; };"}, {"sha": "106b50441e9b21dc34d5f965983b250b82f26beb", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n auto ID = [] (int n) constexpr { return n; };\n constexpr int I = ID(3);"}, {"sha": "8c9db952f24d191546ce2ee898cdcdc683cacb46", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n auto addOne = [] (int n) {\n   return n + 1;"}, {"sha": "3fe4bb949bdde8b02315ece8675eaae532246fcd", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Testcase from P0170R1\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n auto monoid = [](auto v) { return [=] { return v; }; };\n auto add = [](auto m1) constexpr {"}, {"sha": "4dc5ae2382bb139d5c8d0a16a729efd7c9e507dc", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda7.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Testcase from P0170R1\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n auto ID = [](auto a) { return a; };\n static_assert( ID (3) == 3); // OK"}, {"sha": "0bac4c1ea3515db0e3187a7cf441f730593f5b52", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda8.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Testcase from P0170R1\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n auto Fwd = [](int (*fp)(int), auto a) { return fp(a); };\n auto C = [](auto a) { return a; };"}, {"sha": "23fdc9390aaf60619f62787ed4e0b6950da2ac4c", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda9.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n // Testcase from P0170R1\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n static_assert([](int n) { return [&n] { return ++n; }(); }(3) == 4);"}, {"sha": "0d0ac141c77e2eb91bc369f21d2bdc5303491c31", "filename": "gcc/testsuite/g++.dg/cpp1z/cplusplus.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fcplusplus.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fcplusplus.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fcplusplus.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-std=c++1z\" }\n+// { dg-options \"-std=c++17\" }\n \n #if __cplusplus <= 201402L\n #error \"__cplusplus <= 201402L\""}, {"sha": "1833bc3cda83eb40f05745fb51b07480646c2df2", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp-bitfield1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp-bitfield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp-bitfield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp-bitfield1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Test of bit-fields.\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n struct A { long i: 2; } a;\n "}, {"sha": "04ca9a128a4a76f0c37710b10b65b5e61d96b977", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp-constexpr1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp-constexpr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp-constexpr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp-constexpr1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Test for reference address comparison in constant expression.\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n int i[2];\n struct A { int i, j; } a;"}, {"sha": "a841d3572ea87441bf408756badfb20788773cdb", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp10.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n namespace std {\n   template<typename T> struct tuple_size;"}, {"sha": "edb6709116c0a6e976dc499c76741d3646029b5e", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp11.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Test for decltype of direct decomposition.\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class,class> struct same_type;\n template <class T> struct same_type<T,T> {};"}, {"sha": "09ed6461d3cf81a22d42678d292551147071c00b", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp12.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,6 +1,6 @@\n // PR c++/78358\n // { dg-do run }\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n #include <tuple>\n "}, {"sha": "e5dc443598e6989dc10ba158caf0d5c4b3d4b80d", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp15.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-std=c++1z\" }\n+// { dg-options \"-std=c++17\" }\n \n struct A { bool a, b; };\n struct B { int a, b; };"}, {"sha": "7589c8015a518743288ede0d304f0e9a1b69c63a", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp16.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-std=c++1z\" }\n+// { dg-options \"-std=c++17\" }\n \n struct A { bool a, b; };\n struct B { int a, b; };"}, {"sha": "ace1f06a5a7bbf9cb9e308b3bb82cba3efde5ab6", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp17.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n #include <tuple>\n "}, {"sha": "8475e5d9707df6bf44e9864832500727b856edc5", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp20.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n struct A { int i,j; };\n "}, {"sha": "6f21c9c9ec22c051733c390780a49e862437ebce", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp21.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp21.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n int a[3];\n struct S { int b, c, d; } s;"}, {"sha": "fd5f30e05a58aaa3cfe473c160e954674e14fc82", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp27.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp27.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/80084\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n // { dg-do run }\n \n struct A"}, {"sha": "71dc938daefd9859aadf19e53a644e050e01d8b3", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp3.C", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -10,35 +10,35 @@ void\n test (A &b, B c)\n {\n   int && [ d ] = c;\t\t\t// { dg-error \"structured binding declaration cannot have type 'int'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   char & [ e, f, ff ] { b };\t\t// { dg-error \"structured binding declaration cannot have type 'char'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n-  auto&[g,h,i]=b;\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+  auto&[g,h,i]=b;\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } }\n   decltype (auto) [ j ] = c;\t\t// { dg-error \"structured binding declaration cannot have type 'decltype.auto.'\" \"\" { target c++14 } }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n \t\t\t\t\t// { dg-error \"expected primary-expression before 'decltype'\" \"\" { target c++11_down } .-2 }\n   auto & & && & [ m, n, o ] = b;\t// { dg-error \"multiple ref-qualifiers\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   constexpr auto [ p ] = c;\t\t// { dg-error \"structured binding declaration cannot be 'constexpr'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   friend auto [ q ] = c;\t\t// { dg-error \"'friend' used outside of class\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   typedef auto [ r ] = c;\t\t// { dg-error \"structured binding declaration cannot be 'typedef'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   inline auto [ s ] = c;\t\t// { dg-error \"structured binding declaration cannot be 'inline'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   __restrict auto [ t ] = c;\t\t// { dg-error \"invalid use of 'restrict'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   long long auto [ u ] = c;\t\t// { dg-error \"'long long' invalid for 'structured binding'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   virtual auto [ v ] = c;\t\t// { dg-error \"'virtual' outside class declaration\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   explicit auto [ w ] = c;\t\t// { dg-error \"'explicit' outside class declaration\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   static auto [ x ] = c;\t\t// { dg-error \"structured binding declaration cannot be 'static'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   extern auto [ y ] { c };\t\t// { dg-error \"structured binding declaration cannot be 'extern'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n }\n \n void\n@@ -52,15 +52,15 @@ void\n test3 (A &b, B c)\n {\n   auto [ d, e, f ] = arr;\t\t// { dg-error \"only 3 names provided while 'int .4.' decomposes into 4 elements\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   auto & [ g, h, i, j, k ] = arr;\t// { dg-error \"5 names provided while 'int .4.' decomposes into 4 elements\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   auto [ l, m ] = b;\t\t\t// { dg-error \"only 2 names provided while 'A' decomposes into 3 elements\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   auto & [ n, o, p, q ] = b;\t\t// { dg-error \"4 names provided while 'A' decomposes into 3 elements\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   auto [] { c };\t\t\t// { dg-error \"empty structured binding declaration\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   auto [ r, s ] = c;\t\t\t// { dg-error \"2 names provided while 'B' decomposes into 1 elements\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n }"}, {"sha": "73068712d5f55f8a244ac73cdc599cd6e93e489e", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp30.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp30.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/81258\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n int a[2];\n auto [b, c] (a);"}, {"sha": "e50b882f189f529ecc2aff4a1a180ab75886c082", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp4.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -15,18 +15,18 @@ void\n test (A &a, B &b, C &c, D &d, E &e, F &f, G &g, H &h, I &i)\n {\n   auto [ j ] = a;\t\t\t// { dg-error \"cannot decompose class type 'A' because it has an anonymous struct member\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   auto [ k ] { b };\t\t\t// { dg-error \"cannot decompose class type 'B' because it has an anonymous union member\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   auto [ l, l2 ] = c;\t\t\t// { dg-error \"cannot decompose non-public member 'C::b' of 'C'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n-  auto [ m ] = d;\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+  auto [ m ] = d;\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } }\n   auto [ n ] { e };\t\t\t// { dg-error \"cannot decompose non-public member 'E::a' of 'E'\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n-  auto [ o ] { f };\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+  auto [ o ] { f };\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } }\n   auto & [ p ] { g };\t\t\t// { dg-error \"cannot decompose class type 'G': both it and its base class 'F' have non-static data members\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n-  auto [ q ] { h };\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n+  auto [ q ] { h };\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } }\n   auto [ r ] { i };\t\t\t// { dg-error \"cannot decompose class type 'I': its base classes 'F' and 'H' have non-static data members\" }\n-\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..1z or -std=gnu..1z\" \"\" { target c++14_down } .-1 }\n+\t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n }"}, {"sha": "0a19876471d5bc832b2d69341d9634bc0f826130", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp9.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n #define assert(X) do { if (!(X)) __builtin_abort(); } while (0)\n "}, {"sha": "d8cffb4135a55928c0817d006957bbae09819003", "filename": "gcc/testsuite/g++.dg/cpp1z/direct-enum-init1.C", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdirect-enum-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdirect-enum-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdirect-enum-init1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -22,41 +22,41 @@ foo ()\n   C c1 { s };\n   D d1 { D(t) };\t// { dg-error \"invalid cast from type 'T' to type 'D'\" }\n   D d2 { t };\t\t// { dg-error \"cannot convert 'T' to 'D' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"invalid cast from type 'T' to type 'D'\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"invalid cast from type 'T' to type 'D'\" \"\" { target c++17 } .-1 }\n   D d3 { 9 };\t\t// { dg-error \"cannot convert 'int' to 'D' in initialization\" \"\" { target c++14_down } }\n   D d4 { l };\t\t// { dg-error \"cannot convert 'long int' to 'D' in initialization\" \"\" { target c++14_down } }\n   D d5 { D(l) };\n   D d6 { G };\t\t// { dg-error \"cannot convert 'A' to 'D' in initialization\" \"\" { target c++14_down } }\n   E e1 { 5 };\t\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n   E e2 { -1 };\t\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '-1' from 'int' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '-1' from 'int' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   E e3 { 5.0 };\t\t// { dg-error \"cannot convert 'double' to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   E e4 { 5.2 };\t\t// { dg-error \"cannot convert 'double' to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '5.\\[0-9]*e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '5.\\[0-9]*e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   B b2 = { 7 };\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" }\n   C c2 = { C { 8 } };\t// { dg-error \"cannot convert 'int' to 'C' in initialization\" \"\" { target c++14_down } }\n \n   D *d7 = new D { 9 };\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target c++14_down } }\n   E *e5 = new E { -4 };\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '-4' from 'int' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '-4' from 'int' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   bar ({ 10 });\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' for argument\" }\n   bar (E { 9 });\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n   V v1 = { { 11 } };\t// { dg-error \"braces around scalar initializer for type 'E'\" }\n   V v2 = { E { 12 } };\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n   V v3 = { E { 5.0 } };\t// { dg-error \"cannot convert 'double' to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   V v4 = { 13 };\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" }\n   if (B b3 { 5 })\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n     ;\n   if (B b4 { 4.0 })\t// { dg-error \"cannot convert 'double' to 'B' in initialization\" \"\" { target c++14_down } }\n-    ;\t\t\t// { dg-error \"narrowing conversion of '4.0e.0' from 'double' to 'short int' inside\" \"\" { target c++1z } .-1 }\n+    ;\t\t\t// { dg-error \"narrowing conversion of '4.0e.0' from 'double' to 'short int' inside\" \"\" { target c++17 } .-1 }\n   C c3 { 8L };\t\t// { dg-error \"cannot convert 'long int' to 'C' in initialization\" \"\" { target c++14_down } }\n   B b4 {short (c + 5)};\t// { dg-error \"invalid conversion from 'short int' to 'B'\" \"\" { target c++14_down } }\n   B b5 {c + 5};\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of \\[^\\n\\r]* from 'int' to 'short int' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of \\[^\\n\\r]* from 'int' to 'short int' inside\" \"\" { target c++17 } .-1 }\n   C c4 { ll };\t\t// { dg-error \"cannot convert 'long long int' to 'C' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of 'll' from 'long long int' to 'int' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of 'll' from 'long long int' to 'int' inside\" \"\" { target c++17 } .-1 }\n   C c5 {short (c + 5)};\t// { dg-error \"cannot convert 'short int' to 'C' in initialization\" \"\" { target c++14_down } }\n   C c6 {c + 5};\t\t// { dg-error \"cannot convert 'int' to 'C' in initialization\" \"\" { target c++14_down } }\n }\n@@ -65,7 +65,7 @@ struct U\n {\n   U () : e { 5 } {}\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' in initialization\" \"\" { target c++14_down } }\n   U (int) : e { 5.0 } {}// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   U (float) : e({ 6 }) {}// { dg-error \"list-initializer for non-class type must not be parenthesized\" }\n \t\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' in initialization\" \"\" { target *-*-* } .-1 }\n   E e;\n@@ -76,7 +76,7 @@ struct W\n   A a { 5 };\t\t// { dg-error \"invalid conversion from 'int' to 'A'\" }\n   B b { 6 };\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n   C c { 3.0f };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'C' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '3.0e.0f' from 'float' to 'int' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '3.0e.0f' from 'float' to 'int' inside\" \"\" { target c++17 } .-1 }\n   D d = { 7 };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" }\n };\n \n@@ -89,40 +89,40 @@ foo2 ()\n   C c1 { s };\n   D d1 { D(t) };\t// { dg-error \"invalid cast from type 'T' to type 'D'\" }\n   D d2 { t };\t\t// { dg-error \"cannot convert 'T' to 'D' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"invalid cast from type 'T' to type 'D'\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"invalid cast from type 'T' to type 'D'\" \"\" { target c++17 } .-1 }\n   D d3 { 9 };\t\t// { dg-error \"cannot convert 'int' to 'D' in initialization\" \"\" { target c++14_down } }\n   D d4 { l };\t\t// { dg-error \"cannot convert 'long int' to 'D' in initialization\" \"\" { target c++14_down } }\n   D d5 { D(l) };\n   D d6 { G };\t\t// { dg-error \"cannot convert 'A' to 'D' in initialization\" \"\" { target c++14_down } }\n   E e1 { 5 };\t\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n   E e2 { -1 };\t\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '-1' from 'int' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '-1' from 'int' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   E e3 { 5.0 };\t\t// { dg-error \"cannot convert 'double' to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   E e4 { 5.2 };\t\t// { dg-error \"cannot convert 'double' to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '5.\\[0-9]*e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '5.\\[0-9]*e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   B b2 = { 7 };\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" }\n   C c2 = { C { 8 } };\t// { dg-error \"cannot convert 'int' to 'C' in initialization\" \"\" { target c++14_down } }\n   D *d7 = new D { 9 };\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target c++14_down } }\n   E *e5 = new E { -4 };\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '-4' from 'int' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '-4' from 'int' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   bar ({ 10 });\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' for argument\" }\n   bar (E { 9 });\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n   V v1 = { { 11 } };\t// { dg-error \"braces around scalar initializer for type 'E'\" }\n   V v2 = { E { 12 } };\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n   V v3 = { E { 5.0 } };\t// { dg-error \"cannot convert 'double' to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   V v4 = { 13 };\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" }\n   if (B b3 { 5 })\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n     ;\n   if (B b4 { 4.0 })\t// { dg-error \"cannot convert 'double' to 'B' in initialization\" \"\" { target c++14_down } }\n-    ;\t\t\t// { dg-error \"narrowing conversion of '4.0e.0' from 'double' to 'short int' inside\" \"\" { target c++1z } .-1 }\n+    ;\t\t\t// { dg-error \"narrowing conversion of '4.0e.0' from 'double' to 'short int' inside\" \"\" { target c++17 } .-1 }\n   C c3 { 8L };\t\t// { dg-error \"cannot convert 'long int' to 'C' in initialization\" \"\" { target c++14_down } }\n   B b4 {short (c + 5)};\t// { dg-error \"invalid conversion from 'short int' to 'B'\" \"\" { target c++14_down } }\n   B b5 {c + 5};\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of \\[^\\n\\r]* from 'int' to 'short int' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of \\[^\\n\\r]* from 'int' to 'short int' inside\" \"\" { target c++17 } .-1 }\n   C c4 { ll };\t\t// { dg-error \"cannot convert 'long long int' to 'C' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of 'll' from 'long long int' to 'int' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of 'll' from 'long long int' to 'int' inside\" \"\" { target c++17 } .-1 }\n   C c5 {short (c + 5)};\t// { dg-error \"cannot convert 'short int' to 'C' in initialization\" \"\" { target c++14_down } }\n   C c6 {c + 5};\t\t// { dg-error \"cannot convert 'int' to 'C' in initialization\" \"\" { target c++14_down } }\n }\n@@ -132,7 +132,7 @@ struct U2\n {\n   U2 () : e { 5 } {}\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' in initialization\" \"\" { target c++14_down } }\n   U2 (int) : e { 5.0 } {}// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   U2 (float) : e({ 6 }) {}\n   E e;\n };\n@@ -143,7 +143,7 @@ struct W2\n   A a { 5 };\t\t// { dg-error \"invalid conversion from 'int' to 'A'\" \"\" { target *-*-* } }\n   B b { 6 };\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n   C c { 3.0f };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'C' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '3.0e.0f' from 'float' to 'int' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '3.0e.0f' from 'float' to 'int' inside\" \"\" { target c++17 } .-1 }\n   D d = { 7 };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target *-*-* } }\n };\n \n@@ -157,40 +157,40 @@ foo3 ()\n   J c1 { s };\n   K d1 { K(t) };\t// { dg-error \"invalid cast from type 'T' to type 'D'\" }\n   K d2 { t };\t\t// { dg-error \"cannot convert 'T' to 'D' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"invalid cast from type 'T' to type 'D'\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"invalid cast from type 'T' to type 'D'\" \"\" { target c++17 } .-1 }\n   K d3 { 9 };\t\t// { dg-error \"cannot convert 'int' to 'D' in initialization\" \"\" { target c++14_down } }\n   K d4 { l };\t\t// { dg-error \"cannot convert 'long int' to 'D' in initialization\" \"\" { target c++14_down } }\n   K d5 { K(l) };\n   K d6 { G };\t\t// { dg-error \"cannot convert 'A' to 'D' in initialization\" \"\" { target c++14_down } }\n   L e1 { 5 };\t\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n   L e2 { -1 };\t\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '-1' from 'int' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '-1' from 'int' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   L e3 { 5.0 };\t\t// { dg-error \"cannot convert 'double' to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   L e4 { 5.2 };\t\t// { dg-error \"cannot convert 'double' to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '5.\\[0-9]*e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '5.\\[0-9]*e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   I b2 = { 7 };\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" }\n   J c2 = { J { 8 } };\t// { dg-error \"cannot convert 'int' to 'C' in initialization\" \"\" { target c++14_down } }\n   K *d7 = new K { 9 };\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target c++14_down } }\n   L *e5 = new L { -4 };\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '-4' from 'int' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '-4' from 'int' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   bar3 ({ 10 });\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' for argument\" }\n   bar3 (E { 9 });\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n   M v1 = { { 11 } };\t// { dg-error \"braces around scalar initializer for type 'E'\" }\n   M v2 = { L { 12 } };\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n   M v3 = { L { 5.0 } };\t// { dg-error \"cannot convert 'double' to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   M v4 = { 13 };\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" }\n   if (I b3 { 5 })\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n     ;\n   if (I b4 { 4.0 })\t// { dg-error \"cannot convert 'double' to 'B' in initialization\" \"\" { target c++14_down } }\n-    ;\t\t\t// { dg-error \"narrowing conversion of '4.0e.0' from 'double' to 'short int' inside\" \"\" { target c++1z } .-1 }\n+    ;\t\t\t// { dg-error \"narrowing conversion of '4.0e.0' from 'double' to 'short int' inside\" \"\" { target c++17 } .-1 }\n   J c3 { 8L };\t\t// { dg-error \"cannot convert 'long int' to 'C' in initialization\" \"\" { target c++14_down } }\n   I b4 {short (c + 5)};\t// { dg-error \"invalid conversion from 'short int' to 'B'\" \"\" { target c++14_down } }\n   I b5 {c + 5};\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of \\[^\\n\\r]* from 'int' to 'short int' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of \\[^\\n\\r]* from 'int' to 'short int' inside\" \"\" { target c++17 } .-1 }\n   J c4 { ll };\t\t// { dg-error \"cannot convert 'long long int' to 'C' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of 'll' from 'long long int' to 'int' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of 'll' from 'long long int' to 'int' inside\" \"\" { target c++17 } .-1 }\n   J c5 {short (c + 5)};\t// { dg-error \"cannot convert 'short int' to 'C' in initialization\" \"\" { target c++14_down } }\n   J c6 {c + 5};\t\t// { dg-error \"cannot convert 'int' to 'C' in initialization\" \"\" { target c++14_down } }\n }\n@@ -200,7 +200,7 @@ struct U3\n {\n   U3 () : e { 5 } {}\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' in initialization\" \"\" { target c++14_down } }\n   U3 (int) : e { 5.0 } {}// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '5.0e.0' from 'double' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n   U3 (float) : e({ 6 }) {}\n   L e;\n };\n@@ -211,7 +211,7 @@ struct W3\n   H a { 5 };\t\t// { dg-error \"invalid conversion from 'int' to 'A'\" \"\" { target *-*-* } }\n   I b { 6 };\t\t// { dg-error \"invalid conversion from 'int' to 'B'\" \"\" { target c++14_down } }\n   J c { 3.0f };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'C' in initialization\" \"\" { target c++14_down } }\n-\t\t\t// { dg-error \"narrowing conversion of '3.0e.0f' from 'float' to 'int' inside\" \"\" { target c++1z } .-1 }\n+\t\t\t// { dg-error \"narrowing conversion of '3.0e.0f' from 'float' to 'int' inside\" \"\" { target c++17 } .-1 }\n   K d = { 7 };\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target *-*-* } }\n };\n "}, {"sha": "6875c82561b4b34107e0374b7c87a25abe2d2be6", "filename": "gcc/testsuite/g++.dg/cpp1z/elide1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Felide1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Felide1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Felide1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n struct A\n {"}, {"sha": "95dd10648f624bc31d92707a106847b69483042a", "filename": "gcc/testsuite/g++.dg/cpp1z/eval-order2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,6 +1,6 @@\n // P0145R2: Refining Expression Order for C++\n // { dg-do run }\n-// { dg-options \"-std=c++1z\" }\n+// { dg-options \"-std=c++17\" }\n \n #include <string>\n #define assert(X) if (!(X)) __builtin_abort();"}, {"sha": "966ac0a65236792ffa5dec1cbcb75e658f862696", "filename": "gcc/testsuite/g++.dg/cpp1z/eval-order3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Feval-order3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,6 +1,6 @@\n // P0145R2: Refining Expression Order for C++\n // { dg-do run }\n-// { dg-options \"-std=c++1z\" }\n+// { dg-options \"-std=c++17\" }\n \n extern \"C\" int printf (const char *, ...);\n void sink(...) { }"}, {"sha": "54a8323dfac8f34dbbe5a5ee3c31da6ed12416b8", "filename": "gcc/testsuite/g++.dg/cpp1z/fallthrough1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffallthrough1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffallthrough1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffallthrough1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,6 +1,6 @@\n // PR c/7652\n // { dg-do compile }\n-// { dg-options \"-std=c++1z -Wextra -Wall -Wpedantic\" }\n+// { dg-options \"-std=c++17 -Wextra -Wall -Wpedantic\" }\n \n // Check that we accept attribute [[fallthrough]].\n "}, {"sha": "b2f046b5c91fb8f1e35d770cf681c1ba659932a1", "filename": "gcc/testsuite/g++.dg/cpp1z/feat-cxx1z.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z -I${srcdir}/g++.dg/cpp1y -I${srcdir}/g++.dg/cpp1y/testinc\" }\n+// { dg-options \"-std=c++17 -I${srcdir}/g++.dg/cpp1y -I${srcdir}/g++.dg/cpp1y/testinc\" }\n \n //  C++98 features:\n "}, {"sha": "7e71cc9dd21d9d690d05e8764eb2f1ad0156eda3", "filename": "gcc/testsuite/g++.dg/cpp1z/fold-ice1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold-ice1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold-ice1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold-ice1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/67926\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <bool ... T> bool FUR = (T && ...);\n template <bool ... T> bool FUL = (... && T);"}, {"sha": "95df8ca494d255f8ecd37d747a332c5c7e7b277b", "filename": "gcc/testsuite/g++.dg/cpp1z/fold-mangle.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold-mangle.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold-mangle.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold-mangle.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/71711\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template < int > struct A {};\n template < int ... N > void unary_left (A < (... + N) >);"}, {"sha": "fdaa9559699824a2ad5cafb5dbaafcfd99adb45b", "filename": "gcc/testsuite/g++.dg/cpp1z/fold1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-std=c++1z\" }\n+// { dg-options \"-std=c++17\" }\n \n #include <cassert>\n "}, {"sha": "093a98bb33458657083a4bce526180366f455bf5", "filename": "gcc/testsuite/g++.dg/cpp1z/fold2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-std=c++1z\" }\n+// { dg-options \"-std=c++17\" }\n \n // Check that we can fold over all of the operators required\n // by the standard in every possible way."}, {"sha": "7caa8483b6a050f1880aed93b895690a1b1fd1ac", "filename": "gcc/testsuite/g++.dg/cpp1z/fold3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n-// { dg-options \"-std=c++1z\" }\n+// { dg-options \"-std=c++17\" }\n \n // Check that empty expansions and required failures.\n "}, {"sha": "2365d50c3c482955be6e5747ea340a060ace18b7", "filename": "gcc/testsuite/g++.dg/cpp1z/fold4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template <class...T>\n constexpr auto f(T... t)"}, {"sha": "2f8d4cafe8e955620d673658e4b9a188e477b08f", "filename": "gcc/testsuite/g++.dg/cpp1z/fold5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Test that we complain about fold-expressions in C++11 and C++14.\n-// { dg-do compile { target { c++11 && { ! c++1z } } } }\n+// { dg-do compile { target { c++11 && { ! c++17 } } } }\n \n template <class...T>\n constexpr int f(T... t)"}, {"sha": "48394366692a4bf4b4ca887b3e68452fad442845", "filename": "gcc/testsuite/g++.dg/cpp1z/fold6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,7 +1,7 @@\n // Test that we reject a fold-expression with an LHS that is not a\n // cast-expression.\n \n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n int i;\n "}, {"sha": "74ef4abfaf7d7dbc9c92061e778bb0f4293b637b", "filename": "gcc/testsuite/g++.dg/cpp1z/fold7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold7.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=c++1z\" }\n+// { dg-options \"-std=c++17\" }\n \n #ifndef __cpp_fold_expressions\n #error __cpp_fold_expressions not defined"}, {"sha": "5c782ff0969e1f623d52f9e5d62ff50a11b0f748", "filename": "gcc/testsuite/g++.dg/cpp1z/fold7a.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold7a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold7a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold7a.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// This macro should not be defined without -std=c++1z.\n+// This macro should not be defined without -std=c++17.\n \n #ifdef __cpp_fold_expressions\n #error __cpp_fold_expressions defined"}, {"sha": "68827e6f68067fdc869503385dc577f1b8cf1475", "filename": "gcc/testsuite/g++.dg/cpp1z/fold8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold8.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/68377\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n struct Sink { } s;\n template <class T> Sink& operator<<(Sink&, const T&);"}, {"sha": "142c8b2c818e5dee38b829ee1bee8b920164f045", "filename": "gcc/testsuite/g++.dg/cpp1z/fold9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffold9.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // PR c++/71285\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n template<typename... Args>\n void spurious(Args... args)"}, {"sha": "d1dc9188b1c575c9c30a4d61ecf79250b3615901", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement2.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n // Test C++17 selection statements with initializer, basic use.\n \n extern int foo (void);"}, {"sha": "b0cd14885ff39a559a267e8480cdc149cebe1b77", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement3.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n // Test C++17 selection statements with initializer, side-effects.\n \n int"}, {"sha": "32a3f2d8b665cc39726beae21d5541115cc9f38c", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement4.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n extern int foo (void);\n extern void bar (int), die (void);"}, {"sha": "cf2b16a27bb3faac3b95792338e91c8a352efdbe", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement5.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Testcase from P0305R1\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n enum class status_code { SUCCESS };\n extern int get_value ();"}, {"sha": "6f00d9de4160ff1533ced7d2a4fad993242246a2", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement6.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // Testcase from P0305R1\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n #include <string>\n #include <map>"}, {"sha": "e4a598e145d4a2e8029f899cec94e9a2ca9ffe13", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement7.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n int\n main ()"}, {"sha": "574cc213787f38fc293ef62d85b12214bfee1858", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement8.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n int\n f ()"}, {"sha": "f695a73fb3d468b692b475182a3e2d8d1057a8fd", "filename": "gcc/testsuite/g++.dg/cpp1z/init-statement9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finit-statement9.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options -std=c++1z }\n+// { dg-options -std=c++17 }\n \n void\n f ()"}, {"sha": "7c014b52c24f1d9c920c8d68c42d9847ef818e26", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9361409dda228eedb13a3abe547c3cafbe957b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var1.C?ref=7b9361409dda228eedb13a3abe547c3cafbe957b", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-std=c++1z -Wno-deprecated\" }\n+// { dg-options \"-std=c++17 -Wno-deprecated\" }\n // { dg-require-weak \"\" }\n // { dg-additional-sources \"inline-var1a.C\" }\n "}]}