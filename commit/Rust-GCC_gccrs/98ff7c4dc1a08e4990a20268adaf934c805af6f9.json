{"sha": "98ff7c4dc1a08e4990a20268adaf934c805af6f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThmZjdjNGRjMWEwOGU0OTkwYTIwMjY4YWRhZjkzNGM4MDVhZjZmOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-08-28T19:41:16Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-08-28T19:41:16Z"}, "message": "builtin-types.def (BT_FN_INT_FLOAT, [...]): New.\n\n\t* builtin-types.def (BT_FN_INT_FLOAT, BT_FN_INT_DOUBLE,\n\tBT_FN_INT_LONGDOUBLE, BT_FN_LONG_FLOAT, BT_FN_LONG_DOUBLE,\n\tBT_FN_LONG_LONGDOUBLE, BT_FN_LONGLONG_FLOAT,\n\tBT_FN_LONGLONG_DOUBLE, BT_FN_LONGLONG_LONGDOUBLE,\n\tBT_FN_FLOAT_FLOAT_LONGDOUBLE, BT_FN_DOUBLE_DOUBLE_LONGDOUBLE,\n\tBT_FN_FLOAT_FLOAT_INT, BT_FN_DOUBLE_DOUBLE_INT,\n\tBT_FN_LONGDOUBLE_LONGDOUBLE_INT, BT_FN_FLOAT_FLOAT_LONG,\n\tBT_FN_DOUBLE_DOUBLE_LONG, BT_FN_LONGDOUBLE_LONGDOUBLE_LONG,\n\tBT_FN_FLOAT_FLOAT_FLOAT_FLOAT, BT_FN_DOUBLE_DOUBLE_DOUBLE_DOUBLE,\n\tBT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE): New.\n\n\t* builtins.def (BUILT_IN_ACOS, BUILT_IN_ACOSF, BUILT_IN_ACOSH,\n\tBUILT_IN_ACOSHF, BUILT_IN_ACOSHL, BUILT_IN_ACOSL, BUILT_IN_ASIN,\n\tBUILT_IN_ASINF, BUILT_IN_ASINH, BUILT_IN_ASINHF, BUILT_IN_ASINHL,\n\tBUILT_IN_ASINL, BUILT_IN_ATANH, BUILT_IN_ATANHF, BUILT_IN_ATANHL,\n\tBUILT_IN_CBRT, BUILT_IN_CBRTF, BUILT_IN_CBRTL, BUILT_IN_COPYSIGN,\n\tBUILT_IN_COPYSIGNF, BUILT_IN_COPYSIGNL, BUILT_IN_COSH,\n\tBUILT_IN_COSHF, BUILT_IN_COSHL, BUILT_IN_DREM, BUILT_IN_DREMF,\n\tBUILT_IN_DREML, BUILT_IN_EXP10, BUILT_IN_EXP10F, BUILT_IN_EXP10L,\n\tBUILT_IN_EXP2, BUILT_IN_EXP2F, BUILT_IN_EXP2L, BUILT_IN_EXPM1,\n\tBUILT_IN_EXPM1F, BUILT_IN_EXPM1L, BUILT_IN_FDIM, BUILT_IN_FDIMF,\n\tBUILT_IN_FDIML, BUILT_IN_FMA, BUILT_IN_FMAF, BUILT_IN_FMAL,\n\tBUILT_IN_FMAX, BUILT_IN_FMAXF, BUILT_IN_FMAXL, BUILT_IN_FMIN,\n\tBUILT_IN_FMINF, BUILT_IN_FMINL, BUILT_IN_HYPOT, BUILT_IN_HYPOTF,\n\tBUILT_IN_HYPOTL, BUILT_IN_ILOGB, BUILT_IN_ILOGBF, BUILT_IN_ILOGBL,\n\tBUILT_IN_LDEXP, BUILT_IN_LDEXPF, BUILT_IN_LDEXPL, BUILT_IN_LLRINT,\n\tBUILT_IN_LLRINTF, BUILT_IN_LLRINTL, BUILT_IN_LLROUND,\n\tBUILT_IN_LLROUNDF, BUILT_IN_LLROUNDL, BUILT_IN_LOG10,\n\tBUILT_IN_LOG10F, BUILT_IN_LOG10L, BUILT_IN_LOG1P, BUILT_IN_LOG1PF,\n\tBUILT_IN_LOG1PL, BUILT_IN_LOG2, BUILT_IN_LOG2F, BUILT_IN_LOG2L,\n\tBUILT_IN_LOGB, BUILT_IN_LOGBF, BUILT_IN_LOGBL, BUILT_IN_LRINT,\n\tBUILT_IN_LRINTF, BUILT_IN_LRINTL, BUILT_IN_LROUND,\n\tBUILT_IN_LROUNDF, BUILT_IN_LROUNDL, BUILT_IN_NEXTAFTER,\n\tBUILT_IN_NEXTAFTERF, BUILT_IN_NEXTAFTERL, BUILT_IN_NEXTTOWARD,\n\tBUILT_IN_NEXTTOWARDF, BUILT_IN_NEXTTOWARDL, BUILT_IN_POW10,\n\tBUILT_IN_POW10F, BUILT_IN_POW10L, BUILT_IN_REMAINDER,\n\tBUILT_IN_REMAINDERF, BUILT_IN_REMAINDERL, BUILT_IN_RINT,\n\tBUILT_IN_RINTF, BUILT_IN_RINTL, BUILT_IN_SCALB, BUILT_IN_SCALBF,\n\tBUILT_IN_SCALBL, BUILT_IN_SCALBLN, BUILT_IN_SCALBLNF,\n\tBUILT_IN_SCALBLNL, BUILT_IN_SCALBN, BUILT_IN_SCALBNF,\n\tBUILT_IN_SCALBNL, BUILT_IN_SINH, BUILT_IN_SINHF, BUILT_IN_SINHL,\n\tBUILT_IN_TANH, BUILT_IN_TANHF, BUILT_IN_TANHL): New.\n\n\t* doc/extend.texi: Document new builtins.\n\ntestsuite:\n\t* gcc.dg/builtins-1.c: Add more math builtin tests.\n\t* gcc.dg/torture/builtin-attr-1.c: New test.\n\nFrom-SVN: r70886", "tree": {"sha": "6ed737b2b94c4bea8b505ad8d68bea8c93ce1ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ed737b2b94c4bea8b505ad8d68bea8c93ce1ecf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98ff7c4dc1a08e4990a20268adaf934c805af6f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ff7c4dc1a08e4990a20268adaf934c805af6f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ff7c4dc1a08e4990a20268adaf934c805af6f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ff7c4dc1a08e4990a20268adaf934c805af6f9/comments", "author": null, "committer": null, "parents": [{"sha": "0239631aa0ee0eaa607626fc5fe80c4c8081cad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0239631aa0ee0eaa607626fc5fe80c4c8081cad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0239631aa0ee0eaa607626fc5fe80c4c8081cad4"}], "stats": {"total": 712, "additions": 672, "deletions": 40}, "files": [{"sha": "9cf3ee42d562a6e2354fd4bb742302fdda83400c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ff7c4dc1a08e4990a20268adaf934c805af6f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ff7c4dc1a08e4990a20268adaf934c805af6f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98ff7c4dc1a08e4990a20268adaf934c805af6f9", "patch": "@@ -1,3 +1,50 @@\n+2003-08-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtin-types.def (BT_FN_INT_FLOAT, BT_FN_INT_DOUBLE,\n+\tBT_FN_INT_LONGDOUBLE, BT_FN_LONG_FLOAT, BT_FN_LONG_DOUBLE,\n+\tBT_FN_LONG_LONGDOUBLE, BT_FN_LONGLONG_FLOAT,\n+\tBT_FN_LONGLONG_DOUBLE, BT_FN_LONGLONG_LONGDOUBLE,\n+\tBT_FN_FLOAT_FLOAT_LONGDOUBLE, BT_FN_DOUBLE_DOUBLE_LONGDOUBLE,\n+\tBT_FN_FLOAT_FLOAT_INT, BT_FN_DOUBLE_DOUBLE_INT,\n+\tBT_FN_LONGDOUBLE_LONGDOUBLE_INT, BT_FN_FLOAT_FLOAT_LONG,\n+\tBT_FN_DOUBLE_DOUBLE_LONG, BT_FN_LONGDOUBLE_LONGDOUBLE_LONG,\n+\tBT_FN_FLOAT_FLOAT_FLOAT_FLOAT, BT_FN_DOUBLE_DOUBLE_DOUBLE_DOUBLE,\n+\tBT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE): New.\n+\n+\t* builtins.def (BUILT_IN_ACOS, BUILT_IN_ACOSF, BUILT_IN_ACOSH,\n+\tBUILT_IN_ACOSHF, BUILT_IN_ACOSHL, BUILT_IN_ACOSL, BUILT_IN_ASIN,\n+\tBUILT_IN_ASINF, BUILT_IN_ASINH, BUILT_IN_ASINHF, BUILT_IN_ASINHL,\n+\tBUILT_IN_ASINL, BUILT_IN_ATANH, BUILT_IN_ATANHF, BUILT_IN_ATANHL,\n+\tBUILT_IN_CBRT, BUILT_IN_CBRTF, BUILT_IN_CBRTL, BUILT_IN_COPYSIGN,\n+\tBUILT_IN_COPYSIGNF, BUILT_IN_COPYSIGNL, BUILT_IN_COSH,\n+\tBUILT_IN_COSHF, BUILT_IN_COSHL, BUILT_IN_DREM, BUILT_IN_DREMF,\n+\tBUILT_IN_DREML, BUILT_IN_EXP10, BUILT_IN_EXP10F, BUILT_IN_EXP10L,\n+\tBUILT_IN_EXP2, BUILT_IN_EXP2F, BUILT_IN_EXP2L, BUILT_IN_EXPM1,\n+\tBUILT_IN_EXPM1F, BUILT_IN_EXPM1L, BUILT_IN_FDIM, BUILT_IN_FDIMF,\n+\tBUILT_IN_FDIML, BUILT_IN_FMA, BUILT_IN_FMAF, BUILT_IN_FMAL,\n+\tBUILT_IN_FMAX, BUILT_IN_FMAXF, BUILT_IN_FMAXL, BUILT_IN_FMIN,\n+\tBUILT_IN_FMINF, BUILT_IN_FMINL, BUILT_IN_HYPOT, BUILT_IN_HYPOTF,\n+\tBUILT_IN_HYPOTL, BUILT_IN_ILOGB, BUILT_IN_ILOGBF, BUILT_IN_ILOGBL,\n+\tBUILT_IN_LDEXP, BUILT_IN_LDEXPF, BUILT_IN_LDEXPL, BUILT_IN_LLRINT,\n+\tBUILT_IN_LLRINTF, BUILT_IN_LLRINTL, BUILT_IN_LLROUND,\n+\tBUILT_IN_LLROUNDF, BUILT_IN_LLROUNDL, BUILT_IN_LOG10,\n+\tBUILT_IN_LOG10F, BUILT_IN_LOG10L, BUILT_IN_LOG1P, BUILT_IN_LOG1PF,\n+\tBUILT_IN_LOG1PL, BUILT_IN_LOG2, BUILT_IN_LOG2F, BUILT_IN_LOG2L,\n+\tBUILT_IN_LOGB, BUILT_IN_LOGBF, BUILT_IN_LOGBL, BUILT_IN_LRINT,\n+\tBUILT_IN_LRINTF, BUILT_IN_LRINTL, BUILT_IN_LROUND,\n+\tBUILT_IN_LROUNDF, BUILT_IN_LROUNDL, BUILT_IN_NEXTAFTER,\n+\tBUILT_IN_NEXTAFTERF, BUILT_IN_NEXTAFTERL, BUILT_IN_NEXTTOWARD,\n+\tBUILT_IN_NEXTTOWARDF, BUILT_IN_NEXTTOWARDL, BUILT_IN_POW10,\n+\tBUILT_IN_POW10F, BUILT_IN_POW10L, BUILT_IN_REMAINDER,\n+\tBUILT_IN_REMAINDERF, BUILT_IN_REMAINDERL, BUILT_IN_RINT,\n+\tBUILT_IN_RINTF, BUILT_IN_RINTL, BUILT_IN_SCALB, BUILT_IN_SCALBF,\n+\tBUILT_IN_SCALBL, BUILT_IN_SCALBLN, BUILT_IN_SCALBLNF,\n+\tBUILT_IN_SCALBLNL, BUILT_IN_SCALBN, BUILT_IN_SCALBNF,\n+\tBUILT_IN_SCALBNL, BUILT_IN_SINH, BUILT_IN_SINHF, BUILT_IN_SINHL,\n+\tBUILT_IN_TANH, BUILT_IN_TANHF, BUILT_IN_TANHL): New.\n+\n+\t* doc/extend.texi: Document new builtins.\n+\n 2003-08-28  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (legitmate_constant_p): Use LARL on"}, {"sha": "e945ca0f94711577ca30bcea55bdab9e3a27ebc1", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ff7c4dc1a08e4990a20268adaf934c805af6f9/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ff7c4dc1a08e4990a20268adaf934c805af6f9/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=98ff7c4dc1a08e4990a20268adaf934c805af6f9", "patch": "@@ -118,6 +118,15 @@ DEF_FUNCTION_TYPE_1 (BT_FN_INT_INT, BT_INT, BT_INT)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_LONG, BT_INT, BT_LONG)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_LONGLONG, BT_INT, BT_LONGLONG)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_PTR, BT_INT, BT_PTR)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_FLOAT, BT_INT, BT_FLOAT)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_DOUBLE, BT_INT, BT_DOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_LONGDOUBLE, BT_INT, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONG_FLOAT, BT_LONG, BT_FLOAT)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONG_DOUBLE, BT_LONG, BT_DOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONG_LONGDOUBLE, BT_LONG, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_FLOAT, BT_LONGLONG, BT_FLOAT)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_DOUBLE, BT_LONGLONG, BT_DOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_LONGDOUBLE, BT_LONGLONG, BT_LONGDOUBLE)\n DEF_FUNCTION_TYPE_1 (BT_FN_VOID_PTR, BT_VOID, BT_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_SIZE_CONST_STRING, BT_SIZE, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_CONST_STRING, BT_INT, BT_CONST_STRING)\n@@ -161,6 +170,22 @@ DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_DOUBLE,\n \t\t     BT_DOUBLE, BT_DOUBLE, BT_DOUBLE)\n DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE,\n \t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_FLOAT_LONGDOUBLE,\n+\t\t     BT_FLOAT, BT_FLOAT, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_LONGDOUBLE,\n+\t\t     BT_DOUBLE, BT_DOUBLE, BT_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_FLOAT_INT,\n+\t\t     BT_FLOAT, BT_FLOAT, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_INT,\n+\t\t     BT_DOUBLE, BT_DOUBLE, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_LONGDOUBLE_INT,\n+\t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_FLOAT_FLOAT_LONG,\n+\t\t     BT_FLOAT, BT_FLOAT, BT_LONG)\n+DEF_FUNCTION_TYPE_2 (BT_FN_DOUBLE_DOUBLE_LONG,\n+\t\t     BT_DOUBLE, BT_DOUBLE, BT_LONG)\n+DEF_FUNCTION_TYPE_2 (BT_FN_LONGDOUBLE_LONGDOUBLE_LONG,\n+\t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONG)\n DEF_FUNCTION_TYPE_2 (BT_FN_INT_CONST_STRING_VALIST_ARG,\n \t\t     BT_INT, BT_CONST_STRING, BT_VALIST_ARG)\n DEF_FUNCTION_TYPE_2 (BT_FN_PTR_SIZE_SIZE,\n@@ -188,6 +213,12 @@ DEF_FUNCTION_TYPE_3 (BT_FN_INT_PTR_CONST_STRING_VALIST_ARG,\n \t\t     BT_INT, BT_PTR, BT_CONST_STRING, BT_VALIST_ARG)\n DEF_FUNCTION_TYPE_3 (BT_FN_STRING_CONST_STRING_CONST_STRING_INT,\n \t\t     BT_STRING, BT_CONST_STRING, BT_CONST_STRING, BT_INT)\n+DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT_FLOAT_FLOAT_FLOAT,\n+\t\t     BT_FLOAT, BT_FLOAT, BT_FLOAT, BT_FLOAT)\n+DEF_FUNCTION_TYPE_3 (BT_FN_DOUBLE_DOUBLE_DOUBLE_DOUBLE,\n+\t\t     BT_DOUBLE, BT_DOUBLE, BT_DOUBLE, BT_DOUBLE)\n+DEF_FUNCTION_TYPE_3 (BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE,\n+\t\t     BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONGDOUBLE, BT_LONGDOUBLE)\n \n DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR,\n \t\t     BT_SIZE, BT_CONST_PTR, BT_SIZE, BT_SIZE, BT_PTR)"}, {"sha": "4f822b751850333c22e1acb558439867340260a3", "filename": "gcc/builtins.def", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ff7c4dc1a08e4990a20268adaf934c805af6f9/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ff7c4dc1a08e4990a20268adaf934c805af6f9/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=98ff7c4dc1a08e4990a20268adaf934c805af6f9", "patch": "@@ -131,15 +131,33 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n \n /* Category: math builtins.  */\n+DEF_LIB_BUILTIN        (BUILT_IN_ACOS, \"acos\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_ACOSF, \"acosf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_ACOSH, \"acosh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_ACOSHF, \"acoshf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_ACOSHL, \"acoshl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_ACOSL, \"acosl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_LIB_BUILTIN        (BUILT_IN_ASIN, \"asin\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_ASINF, \"asinf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_ASINH, \"asinh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_ASINHF, \"asinhf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_ASINHL, \"asinhl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_ASINL, \"asinl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_ATAN, \"atan\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_LIB_BUILTIN        (BUILT_IN_ATAN2, \"atan2\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ATAN2F, \"atan2f\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ATAN2L, \"atan2l\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ATANF, \"atanf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_ATANH, \"atanh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_ATANHF, \"atanhf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_ATANHL, \"atanhl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ATANL, \"atanl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_CABS, \"cabs\", BT_FN_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_CABSF, \"cabsf\", BT_FN_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_CABSL, \"cabsl\", BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_CBRT, \"cbrt\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_CBRTF, \"cbrtf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_CBRTL, \"cbrtl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_LIB_BUILTIN        (BUILT_IN_CEIL, \"ceil\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_CEILF, \"ceilf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_CEILL, \"ceill\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n@@ -149,33 +167,96 @@ DEF_C99_BUILTIN        (BUILT_IN_CIMAGL, \"cimagl\", BT_FN_LONGDOUBLE_COMPLEX_LONG\n DEF_C99_BUILTIN        (BUILT_IN_CONJ, \"conj\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_CONJF, \"conjf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_CONJL, \"conjl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_COPYSIGN, \"copysign\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_COPYSIGNF, \"copysignf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_COPYSIGNL, \"copysignl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_COS, \"cos\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_COSF, \"cosf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_LIB_BUILTIN        (BUILT_IN_COSH, \"cosh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_COSHF, \"coshf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_COSHL, \"coshl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_COSL, \"cosl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_CREAL, \"creal\", BT_FN_DOUBLE_COMPLEX_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_CREALF, \"crealf\", BT_FN_FLOAT_COMPLEX_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_CREALL, \"creall\", BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_DREM, \"drem\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_DREMF, \"dremf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_DREML, \"dreml\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_EXP, \"exp\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_EXP10, \"exp10\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_EXP10F, \"exp10f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_EXP10L, \"exp10l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_EXP2, \"exp2\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_EXP2F, \"exp2f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_EXP2L, \"exp2l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_EXPF, \"expf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_EXPL, \"expl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_EXPM1, \"expm1\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_EXPM1F, \"expm1f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_EXPM1L, \"expm1l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_FABS, \"fabs\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FABSF, \"fabsf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FABSL, \"fabsl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_FDIM, \"fdim\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_FDIMF, \"fdimf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_FDIML, \"fdiml\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_FLOOR, \"floor\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FLOORF, \"floorf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FLOORL, \"floorl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_FMA, \"fma\", BT_FN_DOUBLE_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_FMAF, \"fmaf\", BT_FN_FLOAT_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_FMAL, \"fmal\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_BUILTIN        (BUILT_IN_FMAX, \"fmax\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_FMAXF, \"fmaxf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_FMAXL, \"fmaxl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_FMIN, \"fmin\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_FMINF, \"fminf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_FMINL, \"fminl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_FMOD, \"fmod\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FMODF, \"fmodf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_FMODL, \"fmodl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VAL, \"huge_val\", BT_FN_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VALF, \"huge_valf\", BT_FN_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VALL, \"huge_vall\", BT_FN_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_HYPOT, \"hypot\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_HYPOTF, \"hypotf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_HYPOTL, \"hypotl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_ILOGB, \"ilogb\", BT_FN_INT_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_ILOGBF, \"ilogbf\", BT_FN_INT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_ILOGBL, \"ilogbl\", BT_FN_INT_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_GCC_BUILTIN        (BUILT_IN_INF, \"inf\", BT_FN_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_INFF, \"inff\", BT_FN_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_INFL, \"infl\", BT_FN_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_LIB_BUILTIN        (BUILT_IN_LDEXP, \"ldexp\", BT_FN_DOUBLE_DOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_LDEXPF, \"ldexpf\", BT_FN_FLOAT_FLOAT_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_LDEXPL, \"ldexpl\", BT_FN_LONGDOUBLE_LONGDOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LLRINT, \"llrint\", BT_FN_LONGLONG_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LLRINTF, \"llrintf\", BT_FN_LONGLONG_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LLRINTL, \"llrintl\", BT_FN_LONGLONG_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LLROUND, \"llround\", BT_FN_LONGLONG_DOUBLE, ATTR_MATHFN_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LLROUNDF, \"llroundf\", BT_FN_LONGLONG_FLOAT, ATTR_MATHFN_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LLROUNDL, \"llroundl\", BT_FN_LONGLONG_LONGDOUBLE, ATTR_MATHFN_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_LOG, \"log\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_LIB_BUILTIN        (BUILT_IN_LOG10, \"log10\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_LOG10F, \"log10f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_LOG10L, \"log10l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LOG1P, \"log1p\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LOG1PF, \"log1pf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LOG1PL, \"log1pl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LOG2, \"log2\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LOG2F, \"log2f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LOG2L, \"log2l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LOGB, \"logb\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LOGBF, \"logbf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LOGBL, \"logbl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LOGF, \"logf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_LOGL, \"logl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LRINT, \"lrint\", BT_FN_LONG_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LRINTF, \"lrintf\", BT_FN_LONG_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LRINTL, \"lrintl\", BT_FN_LONG_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LROUND, \"lround\", BT_FN_LONG_DOUBLE, ATTR_MATHFN_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LROUNDF, \"lroundf\", BT_FN_LONG_FLOAT, ATTR_MATHFN_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_LROUNDL, \"lroundl\", BT_FN_LONG_LONGDOUBLE, ATTR_MATHFN_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_NAN, \"nan\", BT_FN_DOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL_1)\n DEF_LIB_BUILTIN        (BUILT_IN_NANF, \"nanf\", BT_FN_FLOAT_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL_1)\n DEF_LIB_BUILTIN        (BUILT_IN_NANL, \"nanl\", BT_FN_LONGDOUBLE_CONST_STRING, ATTR_CONST_NOTHROW_NONNULL_1)\n@@ -185,20 +266,50 @@ DEF_LIB_BUILTIN        (BUILT_IN_NANSL, \"nansl\", BT_FN_LONGDOUBLE_CONST_STRING,\n DEF_C99_BUILTIN        (BUILT_IN_NEARBYINT, \"nearbyint\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_NEARBYINTF, \"nearbyintf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_NEARBYINTL, \"nearbyintl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN        (BUILT_IN_NEXTAFTER, \"nextafter\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_NEXTAFTERF, \"nextafterf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_NEXTAFTERL, \"nextafterl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_NEXTTOWARD, \"nexttoward\", BT_FN_DOUBLE_DOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_NEXTTOWARDF, \"nexttowardf\", BT_FN_FLOAT_FLOAT_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_NEXTTOWARDL, \"nexttowardl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_POW, \"pow\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_POW10, \"pow10\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_POW10F, \"pow10f\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_POW10L, \"pow10l\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_POWF, \"powf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_POWL, \"powl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_REMAINDER, \"remainder\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_REMAINDERF, \"remainderf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_REMAINDERL, \"remainderl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_RINT, \"rint\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_RINTF, \"rintf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_RINTL, \"rintl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_ROUND, \"round\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_ROUNDF, \"roundf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_ROUNDL, \"roundl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SCALB, \"scalb\", BT_FN_DOUBLE_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SCALBF, \"scalbf\", BT_FN_FLOAT_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SCALBL, \"scalbl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_SCALBLN, \"scalbln\", BT_FN_DOUBLE_DOUBLE_LONG, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_SCALBLNF, \"scalblnf\", BT_FN_FLOAT_FLOAT_LONG, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_SCALBLNL, \"scalblnl\", BT_FN_LONGDOUBLE_LONGDOUBLE_LONG, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_SCALBN, \"scalbn\", BT_FN_DOUBLE_DOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_SCALBNF, \"scalbnf\", BT_FN_FLOAT_FLOAT_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_BUILTIN        (BUILT_IN_SCALBNL, \"scalbnl\", BT_FN_LONGDOUBLE_LONGDOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_SIN, \"sin\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SINF, \"sinf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_LIB_BUILTIN        (BUILT_IN_SINH, \"sinh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_SINHF, \"sinhf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_SINHL, \"sinhl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SINL, \"sinl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_LIB_BUILTIN        (BUILT_IN_SQRT, \"sqrt\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SQRTF, \"sqrtf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_SQRTL, \"sqrtl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_LIB_BUILTIN        (BUILT_IN_TAN, \"tan\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_TANF, \"tanf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_LIB_BUILTIN        (BUILT_IN_TANH, \"tanh\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_TANHF, \"tanhf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_C99_C90RES_BUILTIN (BUILT_IN_TANHL, \"tanhl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_TANL, \"tanl\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_TRUNC, \"trunc\", BT_FN_DOUBLE_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_TRUNCF, \"truncf\", BT_FN_FLOAT_FLOAT, ATTR_CONST_NOTHROW_LIST)"}, {"sha": "d11774c8de5dede3d22f5683febc2c20ddd719e8", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 168, "deletions": 37, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ff7c4dc1a08e4990a20268adaf934c805af6f9/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ff7c4dc1a08e4990a20268adaf934c805af6f9/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=98ff7c4dc1a08e4990a20268adaf934c805af6f9", "patch": "@@ -4725,21 +4725,41 @@ v4si f (v4si a, v4si b, v4si c)\n @findex __builtin_islessequal\n @findex __builtin_islessgreater\n @findex __builtin_isunordered\n+@findex _Exit\n+@findex _exit\n @findex abort\n @findex abs\n+@findex acos\n+@findex acosf\n+@findex acosh\n+@findex acoshf\n+@findex acoshl\n+@findex acosl\n @findex alloca\n+@findex asin\n+@findex asinf\n+@findex asinh\n+@findex asinhf\n+@findex asinhl\n+@findex asinl\n @findex atan\n @findex atan2\n @findex atan2f\n @findex atan2l\n @findex atanf\n+@findex atanh\n+@findex atanhf\n+@findex atanhl\n @findex atanl\n @findex bcmp\n @findex bzero\n @findex cabs\n @findex cabsf\n @findex cabsl\n @findex calloc\n+@findex cbrt\n+@findex cbrtf\n+@findex cbrtl\n @findex ceil\n @findex ceilf\n @findex ceill\n@@ -4749,27 +4769,55 @@ v4si f (v4si a, v4si b, v4si c)\n @findex conj\n @findex conjf\n @findex conjl\n+@findex copysign\n+@findex copysignf\n+@findex copysignl\n @findex cos\n @findex cosf\n+@findex cosh\n+@findex coshf\n+@findex coshl\n @findex cosl\n @findex creal\n @findex crealf\n @findex creall\n @findex dcgettext\n @findex dgettext\n+@findex drem\n+@findex dremf\n+@findex dreml\n @findex exit\n-@findex _exit\n-@findex _Exit\n @findex exp\n+@findex exp10\n+@findex exp10f\n+@findex exp10l\n+@findex exp2\n+@findex exp2f\n+@findex exp2l\n @findex expf\n @findex expl\n+@findex expm1\n+@findex expm1f\n+@findex expm1l\n @findex fabs\n @findex fabsf\n @findex fabsl\n+@findex fdim\n+@findex fdimf\n+@findex fdiml\n @findex ffs\n @findex floor\n @findex floorf\n @findex floorl\n+@findex fma\n+@findex fmaf\n+@findex fmal\n+@findex fmax\n+@findex fmaxf\n+@findex fmaxl\n+@findex fmin\n+@findex fminf\n+@findex fminl\n @findex fmod\n @findex fmodf\n @findex fmodl\n@@ -4779,13 +4827,46 @@ v4si f (v4si a, v4si b, v4si c)\n @findex fputs_unlocked\n @findex fscanf\n @findex gettext\n+@findex hypot\n+@findex hypotf\n+@findex hypotl\n+@findex ilogb\n+@findex ilogbf\n+@findex ilogbl\n @findex imaxabs\n @findex index\n @findex labs\n+@findex ldexp\n+@findex ldexpf\n+@findex ldexpl\n @findex llabs\n+@findex llrint\n+@findex llrintf\n+@findex llrintl\n+@findex llround\n+@findex llroundf\n+@findex llroundl\n @findex log\n+@findex log10\n+@findex log10f\n+@findex log10l\n+@findex log1p\n+@findex log1pf\n+@findex log1pl\n+@findex log2\n+@findex log2f\n+@findex log2l\n+@findex logb\n+@findex logbf\n+@findex logbl\n @findex logf\n @findex logl\n+@findex lrint\n+@findex lrintf\n+@findex lrintl\n+@findex lround\n+@findex lroundf\n+@findex lroundl\n @findex malloc\n @findex memcmp\n @findex memcpy\n@@ -4794,20 +4875,46 @@ v4si f (v4si a, v4si b, v4si c)\n @findex nearbyint\n @findex nearbyintf\n @findex nearbyintl\n+@findex nextafter\n+@findex nextafterf\n+@findex nextafterl\n+@findex nexttoward\n+@findex nexttowardf\n+@findex nexttowardl\n @findex pow\n+@findex pow10\n+@findex pow10f\n+@findex pow10l\n @findex powf\n @findex powl\n @findex printf\n @findex printf_unlocked\n @findex putchar\n @findex puts\n+@findex remainder\n+@findex remainderf\n+@findex remainderl\n @findex rindex\n+@findex rint\n+@findex rintf\n+@findex rintl\n @findex round\n @findex roundf\n @findex roundl\n-@findex scanf\n+@findex scalb\n+@findex scalbf\n+@findex scalbl\n+@findex scalbln\n+@findex scalblnf\n+@findex scalblnf\n+@findex scalbn\n+@findex scalbnf\n+@findex scanfnl\n @findex sin\n @findex sinf\n+@findex sinh\n+@findex sinhf\n+@findex sinhl\n @findex sinl\n @findex snprintf\n @findex sprintf\n@@ -4834,6 +4941,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex strstr\n @findex tan\n @findex tanf\n+@findex tanh\n+@findex tanhf\n+@findex tanhl\n @findex tanl\n @findex trunc\n @findex truncf\n@@ -4866,54 +4976,75 @@ be emitted.\n @opindex ansi\n @opindex std\n Outside strict ISO C mode (@option{-ansi}, @option{-std=c89} or\n-@option{-std=c99}), the functions @code{alloca}, @code{bcmp},\n-@code{bzero}, @code{dcgettext}, @code{dgettext}, @code{_exit},\n-@code{ffs}, @code{fprintf_unlocked},\n-@code{fputs_unlocked}, @code{gettext},\n-@code{index}, @code{mempcpy}, @code{printf_unlocked},\n-@code{rindex}, @code{stpcpy}, @code{strdup} and @code{strfmon}\n+@option{-std=c99}), the functions\n+@code{_exit}, @code{alloca}, @code{bcmp}, @code{bzero},\n+@code{dcgettext}, @code{dgettext}, @code{dremf}, @code{dreml},\n+@code{drem}, @code{exp10f}, @code{exp10l}, @code{exp10}, @code{ffsll},\n+@code{ffsl}, @code{ffs}, @code{fprintf_unlocked}, @code{fputs_unlocked},\n+@code{gettext}, @code{index}, @code{mempcpy}, @code{pow10f},\n+@code{pow10l}, @code{pow10}, @code{printf_unlocked}, @code{rindex},\n+@code{scalbf}, @code{scalbl}, @code{scalb}, @code{stpcpy},\n+@code{strdup} and @code{strfmon}\n may be handled as built-in functions.\n All these functions have corresponding versions\n prefixed with @code{__builtin_}, which may be used even in strict C89\n mode.\n \n The ISO C99 functions\n-@code{cabs}, @code{cabsf}, @code{cabsl},\n-@code{conj}, @code{conjf}, @code{conjl},\n-@code{creal}, @code{crealf}, @code{creall},\n-@code{cimag}, @code{cimagf}, @code{cimagl},\n-@code{_Exit}, @code{imaxabs}, @code{llabs},\n-@code{nearbyint}, @code{nearbyintf}, @code{nearbyintl},\n-@code{round}, @code{roundf}, @code{roundl}, @code{snprintf},\n-@code{trunc}, @code{truncf}, @code{truncl}, @code{vfscanf},\n-@code{vscanf}, @code{vsnprintf} and @code{vsscanf}\n+@code{_Exit}, @code{acoshf}, @code{acoshl}, @code{acosh}, @code{asinhf},\n+@code{asinhl}, @code{asinh}, @code{atanhf}, @code{atanhl}, @code{atanh},\n+@code{cabsf}, @code{cabsl}, @code{cabs}, @code{cbrtf}, @code{cbrtl},\n+@code{cbrt}, @code{cimagf}, @code{cimagl}, @code{cimag}, @code{conjf},\n+@code{conjl}, @code{conj}, @code{copysignf}, @code{copysignl},\n+@code{copysign}, @code{crealf}, @code{creall}, @code{creal},\n+@code{exp2f}, @code{exp2l}, @code{exp2}, @code{expm1f}, @code{expm1l},\n+@code{expm1}, @code{fdimf}, @code{fdiml}, @code{fdim}, @code{fmaf},\n+@code{fmal}, @code{fmaxf}, @code{fmaxl}, @code{fmax}, @code{fma},\n+@code{fminf}, @code{fminl}, @code{fmin}, @code{hypotf}, @code{hypotl},\n+@code{hypot}, @code{ilogbf}, @code{ilogbl}, @code{ilogb},\n+@code{imaxabs}, @code{llabs}, @code{llrintf}, @code{llrintl},\n+@code{llrint}, @code{llroundf}, @code{llroundl}, @code{llround},\n+@code{log1pf}, @code{log1pl}, @code{log1p}, @code{log2f}, @code{log2l},\n+@code{log2}, @code{logbf}, @code{logbl}, @code{logb}, @code{lrintf},\n+@code{lrintl}, @code{lrint}, @code{lroundf}, @code{lroundl},\n+@code{lround}, @code{nearbyintf}, @code{nearbyintl}, @code{nearbyint},\n+@code{nextafterf}, @code{nextafterl}, @code{nextafter},\n+@code{nexttowardf}, @code{nexttowardl}, @code{nexttoward},\n+@code{remainderf}, @code{remainderl}, @code{remainder}, @code{rintf},\n+@code{rintl}, @code{rint}, @code{roundf}, @code{roundl}, @code{round},\n+@code{scalblnf}, @code{scalblnl}, @code{scalbln}, @code{scalbnf},\n+@code{scalbnl}, @code{scalbn}, @code{snprintf}, @code{truncf},\n+@code{truncl}, @code{trunc}, @code{vfscanf}, @code{vscanf},\n+@code{vsnprintf} and @code{vsscanf},\n are handled as built-in functions\n except in strict ISO C90 mode (@option{-ansi} or @option{-std=c89}).\n \n-There are also built-in versions of the ISO C99 functions @code{atan2f},\n+There are also built-in versions of the ISO C99 functions\n+@code{acosf}, @code{acosl}, @code{asinf}, @code{asinl}, @code{atan2f},\n @code{atan2l}, @code{atanf}, @code{atanl}, @code{ceilf}, @code{ceill},\n-@code{cosf}, @code{cosl},\n-@code{expf}, @code{expl}, @code{fabsf}, @code{fabsl}, @code{floorf},\n-@code{floorl}, @code{fmodf}, @code{fmodl},\n-@code{logf}, @code{logl}, @code{powf}, @code{powl},\n-@code{sinf}, @code{sinl}, @code{sqrtf}, @code{sqrtl},\n-@code{tanf} and @code{tanl}\n+@code{cosf}, @code{coshf}, @code{coshl}, @code{cosl}, @code{expf},\n+@code{expl}, @code{fabsf}, @code{fabsl}, @code{floorf}, @code{floorl},\n+@code{fmodf}, @code{fmodl}, @code{ldexpf}, @code{ldexpl}, @code{log10f},\n+@code{log10l}, @code{logf}, @code{logl}, @code{powf}, @code{powl},\n+@code{sinf}, @code{sinhf}, @code{sinhl}, @code{sinl}, @code{sqrtf},\n+@code{sqrtl}, @code{tanf}, @code{tanhf}, @code{tanhl} and @code{tanl}\n that are recognized in any mode since ISO C90 reserves these names for\n the purpose to which ISO C99 puts them.  All these functions have\n corresponding versions prefixed with @code{__builtin_}.\n \n-The ISO C90 functions @code{abort}, @code{abs}, @code{atan}, @code{atan2},\n-@code{calloc}, @code{ceil}, @code{cos}, @code{exit},\n-@code{exp}, @code{fabs}, @code{floor}, @code{fmod},\n-@code{fprintf}, @code{fputs}, @code{fscanf},\n-@code{labs}, @code{log}, @code{malloc},\n-@code{memcmp}, @code{memcpy}, @code{memset}, @code{pow}, @code{printf},\n-@code{putchar}, @code{puts}, @code{scanf}, @code{sin}, @code{snprintf},\n-@code{sprintf}, @code{sqrt}, @code{sscanf},\n-@code{strcat}, @code{strchr}, @code{strcmp},\n-@code{strcpy}, @code{strcspn}, @code{strlen}, @code{strncat}, @code{strncmp},\n-@code{strncpy}, @code{strpbrk}, @code{strrchr}, @code{strspn}, @code{strstr},\n-@code{tan}, @code{vfprintf}, @code{vprintf} and @code{vsprintf}\n+The ISO C90 functions\n+@code{abort}, @code{abs}, @code{acos}, @code{asin}, @code{atan2},\n+@code{atan}, @code{calloc}, @code{ceil}, @code{cosh}, @code{cos},\n+@code{exit}, @code{exp}, @code{fabs}, @code{floor}, @code{fmod},\n+@code{fprintf}, @code{fputs}, @code{fscanf}, @code{labs}, @code{ldexp},\n+@code{log10}, @code{log}, @code{malloc}, @code{memcmp}, @code{memcpy},\n+@code{memset}, @code{pow}, @code{printf}, @code{putchar}, @code{puts},\n+@code{scanf}, @code{sinh}, @code{sin}, @code{snprintf}, @code{sprintf},\n+@code{sqrt}, @code{sscanf}, @code{strcat}, @code{strchr}, @code{strcmp},\n+@code{strcpy}, @code{strcspn}, @code{strlen}, @code{strncat},\n+@code{strncmp}, @code{strncpy}, @code{strpbrk}, @code{strrchr},\n+@code{strspn}, @code{strstr}, @code{tanh}, @code{tan}, @code{vfprintf},\n+@code{vprintf} and @code{vsprintf},\n are all recognized as built-in functions unless\n @option{-fno-builtin} is specified (or @option{-fno-builtin-@var{function}}\n is specified for an individual function).  All of these functions have"}, {"sha": "82a066dad86ee9032e7a180628498c046a7e05ef", "filename": "gcc/testsuite/gcc.dg/builtins-1.c", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ff7c4dc1a08e4990a20268adaf934c805af6f9/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ff7c4dc1a08e4990a20268adaf934c805af6f9/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c?ref=98ff7c4dc1a08e4990a20268adaf934c805af6f9", "patch": "@@ -6,6 +6,7 @@\n    Written by Roger Sayle, 11th July 2002.  */\n \n /* { dg-do compile } */\n+/* { dg-options \"\" } */\n /* { dg-final { scan-assembler-not \"__builtin_\" } } */\n \n /* These helper macros ensure we also check the float and long double\n@@ -24,35 +25,92 @@ float test_##FN##f(float x) { return __builtin_##FN##f(x); } \\\n long double test_##FN##l(long double x) { return __builtin_##FN##l(x); } \n \n /* Test FP functions taking one argument of a supplied type.  */\n-#define FPTEST1TYPE(FN, TYPE) \\\n+#define FPTEST1ARG(FN, TYPE) \\\n double test_##FN(TYPE x) { return __builtin_##FN(x); } \\\n float test_##FN##f(TYPE x) { return __builtin_##FN##f(x); } \\\n long double test_##FN##l(TYPE x) { return __builtin_##FN##l(x); } \n \n+/* Test FP functions taking two arguments, the second argument is of a\n+   supplied type.  */\n+#define FPTEST2ARG(FN, TYPE) \\\n+double test_##FN(double x, TYPE y) { return __builtin_##FN(x, y); } \\\n+float test_##FN##f(float x, TYPE y) { return __builtin_##FN##f(x, y); } \\\n+long double test_##FN##l(long double x, TYPE y) { return __builtin_##FN##l(x, y); } \n+\n+/* Test FP functions taking one FP argument and a supplied return\n+   type.  */\n+#define FPTEST1RET(FN, TYPE) \\\n+TYPE test_##FN(double x) { return __builtin_##FN(x); } \\\n+TYPE test_##FN##f(float x) { return __builtin_##FN##f(x); } \\\n+TYPE test_##FN##l(long double x) { return __builtin_##FN##l(x); } \n+\n /* Test FP functions taking two FP arguments.  */\n #define FPTEST2(FN) \\\n double test_##FN(double x, double y) { return __builtin_##FN(x, y); } \\\n float test_##FN##f(float x, float y) { return __builtin_##FN##f(x, y); } \\\n long double test_##FN##l(long double x, long double y) { return __builtin_##FN##l(x, y); } \n \n+/* Test FP functions taking three FP arguments.  */\n+#define FPTEST3(FN) \\\n+double test_##FN(double x, double y, double z) { return __builtin_##FN(x, y, z); } \\\n+float test_##FN##f(float x, float y, float z) { return __builtin_##FN##f(x, y, z); } \\\n+long double test_##FN##l(long double x, long double y, long double z) { return __builtin_##FN##l(x, y, z); } \n+\n /* Keep this list sorted alphabetically by function name.  */\n+FPTEST1     (acos)\n+FPTEST1     (acosh)\n+FPTEST1     (asin)\n+FPTEST1     (asinh)\n FPTEST1     (atan)\n FPTEST2     (atan2)\n+FPTEST1     (atanh)\n+FPTEST1     (cbrt)\n FPTEST1     (ceil)\n+FPTEST2     (copysign)\n FPTEST1     (cos)\n+FPTEST1     (cosh)\n+FPTEST2     (drem)\n FPTEST1     (exp)\n+FPTEST1     (exp10)\n+FPTEST1     (exp2)\n+FPTEST1     (expm1)\n FPTEST1     (fabs)\n+FPTEST2     (fdim)\n FPTEST1     (floor)\n+FPTEST3     (fma)\n+FPTEST2     (fmax)\n+FPTEST2     (fmin)\n FPTEST2     (fmod)\n FPTEST0     (huge_val)\n+FPTEST2     (hypot)\n+FPTEST1     (ilogb)\n FPTEST0     (inf)\n+FPTEST2ARG  (ldexp, int)\n+FPTEST1RET  (llrint, long long)\n+FPTEST1RET  (llround, long long)\n FPTEST1     (log)\n-FPTEST1TYPE (nan, char *)\n-FPTEST1TYPE (nans, char *)\n+FPTEST1     (log10)\n+FPTEST1     (log1p)\n+FPTEST1     (log2)\n+FPTEST1     (logb)\n+FPTEST1RET  (lrint, long)\n+FPTEST1RET  (lround, long)\n+FPTEST1ARG  (nan, char *)\n+FPTEST1ARG  (nans, char *)\n FPTEST1     (nearbyint)\n+FPTEST2     (nextafter)\n+FPTEST2     (nexttoward)\n FPTEST2     (pow)\n+FPTEST1     (pow10)\n+FPTEST2     (remainder)\n+FPTEST1     (rint)\n FPTEST1     (round)\n+FPTEST2     (scalb)\n+FPTEST2ARG  (scalbln, int)\n+FPTEST2ARG  (scalbn, int)\n FPTEST1     (sin)\n+FPTEST1     (sinh)\n FPTEST1     (sqrt)\n FPTEST1     (tan)\n+FPTEST1     (tanh)\n FPTEST1     (trunc)"}, {"sha": "ff8676576e81a08ae0f138abcc44276df8e15ea8", "filename": "gcc/testsuite/gcc.dg/torture/builtin-attr-1.c", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ff7c4dc1a08e4990a20268adaf934c805af6f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ff7c4dc1a08e4990a20268adaf934c805af6f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-attr-1.c?ref=98ff7c4dc1a08e4990a20268adaf934c805af6f9", "patch": "@@ -0,0 +1,254 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+\n+   Verify that the `const' function attribute is applied to various\n+   builtins and that these functions are optimized away by the\n+   compiler under the appropriate circumstances.\n+\n+   Written by Kaveh Ghazi, 2003-08-04.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-ffast-math\" } */\n+\n+/* These are helper macros to test combinations of functions.  We test\n+   foo() != foo() with the same arguments, and expect the compiler to\n+   optimize away these tests of const functions.  */\n+\n+/* Just test the __builtin_ functions.  */\n+#define BUILTIN_TEST1(FN, TYPE) \\\n+extern void link_failure_builtin_##FN(void); \\\n+void test_builtin_##FN(TYPE x) \\\n+{ if (__builtin_##FN(x) != __builtin_##FN(x)) link_failure_builtin_##FN(); }\n+\n+/* Just test the __builtin_ functions.  */\n+#define BUILTIN_TEST2(FN, TYPE) \\\n+extern void link_failure_builtin_##FN(void); \\\n+void test_builtin_##FN(TYPE x, TYPE y) \\\n+{ if (__builtin_##FN(x,y) != __builtin_##FN(x,y)) link_failure_builtin_##FN(); }\n+\n+/* Also test the regular (non-__builtin_) function.  */\n+#define TEST1(FN, TYPE) \\\n+BUILTIN_TEST1(FN, TYPE) \\\n+extern void link_failure_##FN(void); \\\n+void test_##FN(TYPE x) { if (FN(x) != FN(x)) link_failure_##FN(); }\n+\n+/* Test the __builtin_ functions taking void arguments (with the \"f\"\n+   and \"l\" variants).  */\n+#define BUILTIN_FPTEST0(FN) \\\n+extern void link_failure_builtin_##FN(void); \\\n+extern void link_failure_builtin_##FN##f(void); \\\n+extern void link_failure_builtin_##FN##l(void); \\\n+void test_builtin_##FN(void) \\\n+{ if (__builtin_##FN() != __builtin_##FN()) link_failure_builtin_##FN(); } \\\n+void test_builtin_##FN##f(void) \\\n+{ if (__builtin_##FN##f() != __builtin_##FN##f()) link_failure_builtin_##FN##f(); } \\\n+void test_builtin_##FN##l(void) \\\n+{ if (__builtin_##FN##l() != __builtin_##FN##l()) link_failure_builtin_##FN##l(); }\n+\n+/* Test the __builtin_ functions taking one FP argument (with the \"f\"\n+   and \"l\" variants).  */\n+#define BUILTIN_FPTEST1(FN) \\\n+extern void link_failure_builtin_##FN(void); \\\n+extern void link_failure_builtin_##FN##f(void); \\\n+extern void link_failure_builtin_##FN##l(void); \\\n+void test_builtin_##FN(double d) \\\n+{ if (__builtin_##FN(d) != __builtin_##FN(d)) link_failure_builtin_##FN(); } \\\n+void test_builtin_##FN##f(float f) \\\n+{ if (__builtin_##FN##f(f) != __builtin_##FN##f(f)) link_failure_builtin_##FN##f(); } \\\n+void test_builtin_##FN##l(long double ld) \\\n+{ if (__builtin_##FN##l(ld) != __builtin_##FN##l(ld)) link_failure_builtin_##FN##l(); }\n+\n+/* Test the __builtin_ functions taking one argument of supplied type\n+   (with the \"f\" and \"l\" variants).  */\n+#define BUILTIN_FPTEST1ARG(FN, TYPE) \\\n+extern void link_failure_builtin_##FN(void); \\\n+extern void link_failure_builtin_##FN##f(void); \\\n+extern void link_failure_builtin_##FN##l(void); \\\n+void test_builtin_##FN(TYPE x) \\\n+{ if (__builtin_##FN(x) != __builtin_##FN(x)) link_failure_builtin_##FN(); } \\\n+void test_builtin_##FN##f(TYPE x) \\\n+{ if (__builtin_##FN##f(x) != __builtin_##FN##f(x)) link_failure_builtin_##FN##f(); } \\\n+void test_builtin_##FN##l(TYPE x) \\\n+{ if (__builtin_##FN##l(x) != __builtin_##FN##l(x)) link_failure_builtin_##FN##l(); }\n+\n+/* Test the __builtin_ functions taking two FP arguments (with the \"f\"\n+   and \"l\" variants).  */\n+#define BUILTIN_FPTEST2(FN) \\\n+extern void link_failure_builtin_##FN(void); \\\n+extern void link_failure_builtin_##FN##f(void); \\\n+extern void link_failure_builtin_##FN##l(void); \\\n+void test_builtin_##FN(double d1, double d2) \\\n+{ if (__builtin_##FN(d1,d2) != __builtin_##FN(d1,d2)) link_failure_builtin_##FN(); } \\\n+void test_builtin_##FN##f(float f1, float f2) \\\n+{ if (__builtin_##FN##f(f1,f2) != __builtin_##FN##f(f1,f2)) link_failure_builtin_##FN##f(); } \\\n+void test_builtin_##FN##l(long double ld1, long double ld2) \\\n+{ if (__builtin_##FN##l(ld1,ld2) != __builtin_##FN##l(ld1,ld2)) link_failure_builtin_##FN##l(); }\n+\n+/* Test the __builtin_ functions taking two arguments, one FP and one\n+   supplied type (with the \"f\" and \"l\" variants).  */\n+#define BUILTIN_FPTEST2ARG(FN, TYPE) \\\n+extern void link_failure_builtin_##FN(void); \\\n+extern void link_failure_builtin_##FN##f(void); \\\n+extern void link_failure_builtin_##FN##l(void); \\\n+void test_builtin_##FN(double d, TYPE x) \\\n+{ if (__builtin_##FN(d,x) != __builtin_##FN(d,x)) link_failure_builtin_##FN(); } \\\n+void test_builtin_##FN##f(float f, TYPE x) \\\n+{ if (__builtin_##FN##f(f,x) != __builtin_##FN##f(f,x)) link_failure_builtin_##FN##f(); } \\\n+void test_builtin_##FN##l(long double ld, TYPE x) \\\n+{ if (__builtin_##FN##l(ld,x) != __builtin_##FN##l(ld,x)) link_failure_builtin_##FN##l(); }\n+\n+/* Test the __builtin_ functions taking three FP arguments (with the\n+   \"f\" and \"l\" variants).  */\n+#define BUILTIN_FPTEST3(FN) \\\n+extern void link_failure_builtin_##FN(void); \\\n+extern void link_failure_builtin_##FN##f(void); \\\n+extern void link_failure_builtin_##FN##l(void); \\\n+void test_builtin_##FN(double d1, double d2, double d3) \\\n+{ if (__builtin_##FN(d1,d2,d3) != __builtin_##FN(d1,d2,d3)) link_failure_builtin_##FN(); } \\\n+void test_builtin_##FN##f(float f1, float f2, float f3) \\\n+{ if (__builtin_##FN##f(f1,f2,f3) != __builtin_##FN##f(f1,f2,f3)) link_failure_builtin_##FN##f(); } \\\n+void test_builtin_##FN##l(long double ld1, long double ld2, long double ld3) \\\n+{ if (__builtin_##FN##l(ld1,ld2,ld3) != __builtin_##FN##l(ld1,ld2,ld3)) link_failure_builtin_##FN##l(); }\n+\n+/* These macros additionally test the non-__builtin_ functions.  */\n+\n+/* Test the functions taking one FP argument (with the \"f\" and \"l\"\n+   variants).  */\n+#define FPTEST1(FN) \\\n+BUILTIN_FPTEST1(FN) \\\n+extern void link_failure_##FN(void); \\\n+extern void link_failure_##FN##f(void); \\\n+extern void link_failure_##FN##l(void); \\\n+void test_##FN(double d) \\\n+{ if (FN(d) != FN(d)) link_failure_##FN(); } \\\n+void test_##FN##f(float f) \\\n+{ if (FN##f(f) != FN##f(f)) link_failure_##FN##f(); } \\\n+void test_##FN##l(long double ld) \\\n+{ if (FN##l(ld) != FN##l(ld)) link_failure_##FN##l(); }\n+\n+/* Test the functions taking two FP arguments (with the \"f\" and \"l\"\n+   variants).  */\n+#define FPTEST2(FN) \\\n+BUILTIN_FPTEST2(FN) \\\n+extern void link_failure_##FN(void); \\\n+extern void link_failure_##FN##f(void); \\\n+extern void link_failure_##FN##l(void); \\\n+void test_##FN(double d1, double d2) \\\n+{ if (FN(d1,d2) != FN(d1,d2)) link_failure_##FN(); } \\\n+void test_##FN##f(float f1, float f2) \\\n+{ if (FN##f(f1,f2) != FN##f(f1,f2)) link_failure_##FN##f(); } \\\n+void test_##FN##l(long double ld1, long double ld2) \\\n+{ if (FN##l(ld1,ld2) != FN##l(ld1,ld2)) link_failure_##FN##l(); }\n+\n+/* Test the functions taking two arguments, one FP and one of supplied\n+   type (with the \"f\" and \"l\" variants).  */\n+#define FPTEST2ARG(FN, TYPE) \\\n+BUILTIN_FPTEST2ARG(FN, TYPE) \\\n+extern void link_failure_##FN(void); \\\n+extern void link_failure_##FN##f(void); \\\n+extern void link_failure_##FN##l(void); \\\n+void test_##FN(double d, TYPE x) \\\n+{ if (FN(d,x) != FN(d,x)) link_failure_##FN(); } \\\n+void test_##FN##f(float f, TYPE x) \\\n+{ if (FN##f(f,x) != FN##f(f,x)) link_failure_##FN##f(); } \\\n+void test_##FN##l(long double ld, TYPE x) \\\n+{ if (FN##l(ld,x) != FN##l(ld,x)) link_failure_##FN##l(); }\n+\n+/* Test the functions taking three FP arguments (with the \"f\" and \"l\"\n+   variants).  */\n+#define FPTEST3(FN) \\\n+BUILTIN_FPTEST3(FN) \\\n+extern void link_failure_##FN(void); \\\n+extern void link_failure_##FN##f(void); \\\n+extern void link_failure_##FN##l(void); \\\n+void test_##FN(double d1, double d2, double d3) \\\n+{ if (FN(d1,d2,d3) != FN(d1,d2,d3)) link_failure_##FN(); } \\\n+void test_##FN##f(float f1, float f2, float f3) \\\n+{ if (FN##f(f1,f2,f3) != FN##f(f1,f2,f3)) link_failure_##FN##f(); } \\\n+void test_##FN##l(long double ld1, long double ld2, long double ld3) \\\n+{ if (FN##l(ld1,ld2,ld3) != FN##l(ld1,ld2,ld3)) link_failure_##FN##l(); }\n+\n+\n+/* Test the math builtins.  */\n+FPTEST1            (acos)\n+FPTEST1            (acosh)\n+FPTEST1            (asin)\n+FPTEST1            (asinh)\n+FPTEST1            (atan)\n+FPTEST2            (atan2)\n+FPTEST1            (atanh)\n+FPTEST1            (cbrt)\n+FPTEST1            (ceil)\n+FPTEST2            (copysign)\n+FPTEST1            (cos)\n+FPTEST1            (cosh)\n+FPTEST2            (drem)\n+FPTEST1            (exp)\n+FPTEST1            (exp10)\n+FPTEST1            (exp2)\n+FPTEST1            (expm1)\n+FPTEST1            (fabs)\n+FPTEST2            (fdim)\n+FPTEST1            (floor)\n+FPTEST3            (fma)\n+FPTEST2            (fmax)\n+FPTEST2            (fmin)\n+FPTEST2            (fmod)\n+BUILTIN_FPTEST0    (huge_val)\n+FPTEST2            (hypot)\n+FPTEST1            (ilogb)\n+BUILTIN_FPTEST0    (inf)\n+FPTEST2ARG         (ldexp, int)\n+FPTEST1            (llrint)\n+FPTEST1            (llround)\n+FPTEST1            (log)\n+FPTEST1            (log10)\n+FPTEST1            (log1p)\n+FPTEST1            (log2)\n+FPTEST1            (logb)\n+FPTEST1            (lrint)\n+FPTEST1            (lround)\n+BUILTIN_FPTEST1ARG (nan, char *)\n+BUILTIN_FPTEST1ARG (nans, char *)\n+FPTEST1            (nearbyint)\n+FPTEST2            (nextafter)\n+FPTEST2            (nexttoward)\n+FPTEST2            (pow)\n+FPTEST1            (pow10)\n+FPTEST2            (remainder)\n+FPTEST1            (rint)\n+FPTEST1            (round)\n+FPTEST2            (scalb)\n+FPTEST2ARG         (scalbln, int)\n+FPTEST2ARG         (scalbn, int)\n+FPTEST1            (sin)\n+FPTEST1            (sinh)\n+FPTEST1            (sqrt)\n+FPTEST1            (tan)\n+FPTEST1            (tanh)\n+FPTEST1            (trunc)\n+\n+/* Various other const builtins.  */\n+TEST1         (abs, int)\n+BUILTIN_TEST1 (clz, int)\n+BUILTIN_TEST1 (clzl, long)\n+BUILTIN_TEST1 (clzll, long long)\n+BUILTIN_TEST1 (ctz, int)\n+BUILTIN_TEST1 (ctzl, long)\n+BUILTIN_TEST1 (ctzll, long long)\n+TEST1         (ffs, int)\n+TEST1         (ffsl, long)\n+TEST1         (ffsll, long long)\n+TEST1         (imaxabs, int)\n+TEST1         (labs, long)\n+TEST1         (llabs, long long)\n+BUILTIN_TEST1 (parity, int)\n+BUILTIN_TEST1 (parityl, long)\n+BUILTIN_TEST1 (parityll, long long)\n+BUILTIN_TEST1 (popcount, int)\n+BUILTIN_TEST1 (popcountl, long)\n+BUILTIN_TEST1 (popcountll, long long)\n+\n+int main(void)\n+{\n+  return 0;\n+}"}]}