{"sha": "43ee3d5f44979ff11db5e9fa27d101f4b3363dc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNlZTNkNWY0NDk3OWZmMTFkYjVlOWZhMjdkMTAxZjRiMzM2M2RjNg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-10-07T21:26:55Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-10-07T21:26:55Z"}, "message": "testsuite_counter_type.h (counter_type::operator<(const counter_type&)): Update less_compare_count.\n\n2014-10-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* testsuite/util/testsuite_counter_type.h\n\t(counter_type::operator<(const counter_type&)): Update\n\tless_compare_count.\n\t* testsuite/25_algorithms/make_heap/complexity.cc: New.\n\t* testsuite/25_algorithms/pop_heap/complexity.cc: New.\n\t* testsuite/25_algorithms/push_heap/complexity.cc: New.\n\t* testsuite/25_algorithms/sort_heap/complexity.cc: New.\n\nFrom-SVN: r215985", "tree": {"sha": "77a6a9d7b8abdd581910761a33b4170341c556d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77a6a9d7b8abdd581910761a33b4170341c556d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6/comments", "author": null, "committer": null, "parents": [{"sha": "07056cbafb1bae32d3bbca42efd02f48143dcc54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07056cbafb1bae32d3bbca42efd02f48143dcc54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07056cbafb1bae32d3bbca42efd02f48143dcc54"}], "stats": {"total": 225, "additions": 224, "deletions": 1}, "files": [{"sha": "c2ed337f37d0bc6ae356664b4445050cbb5647ac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=43ee3d5f44979ff11db5e9fa27d101f4b3363dc6", "patch": "@@ -1,3 +1,13 @@\n+2014-10-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* testsuite/util/testsuite_counter_type.h\n+\t(counter_type::operator<(const counter_type&)): Update\n+\tless_compare_count.\n+\t* testsuite/25_algorithms/make_heap/complexity.cc: New.\n+\t* testsuite/25_algorithms/pop_heap/complexity.cc: New.\n+\t* testsuite/25_algorithms/push_heap/complexity.cc: New.\n+\t* testsuite/25_algorithms/sort_heap/complexity.cc: New.\n+\n 2014-10-06  R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n \t    Jonathan Wakely  <jwakely@redhat.com>\n "}, {"sha": "cfe1a7a659f6b2995dbca60f5af6ce714f9ee55e", "filename": "libstdc++-v3/testsuite/25_algorithms/make_heap/complexity.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmake_heap%2Fcomplexity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmake_heap%2Fcomplexity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmake_heap%2Fcomplexity.cc?ref=43ee3d5f44979ff11db5e9fa27d101f4b3363dc6", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <random>\n+#include <vector>\n+#include <algorithm>\n+\n+#include <testsuite_counter_type.h>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using __gnu_test::counter_type;\n+  const std::size_t nb_values = 1000;\n+\n+  std::random_device dev;\n+  std::uniform_int_distribution<int> dist;\n+  std::vector<counter_type> values;\n+  values.reserve(nb_values);\n+  for (std::size_t i = 0; i != nb_values; ++i)\n+    values.push_back(dist(dev));\n+\n+  counter_type::reset();\n+\n+  std::make_heap(values.begin(), values.end());\n+\n+  VERIFY( counter_type::less_compare_count <= 3.0 * nb_values );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "75ed37e665ea446e08f883a8058f90b5be8eb1a8", "filename": "libstdc++-v3/testsuite/25_algorithms/pop_heap/complexity.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpop_heap%2Fcomplexity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpop_heap%2Fcomplexity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpop_heap%2Fcomplexity.cc?ref=43ee3d5f44979ff11db5e9fa27d101f4b3363dc6", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <cmath>\n+#include <random>\n+#include <vector>\n+#include <algorithm>\n+\n+#include <testsuite_counter_type.h>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using __gnu_test::counter_type;\n+  const std::size_t nb_values = 1000;\n+\n+  std::random_device dev;\n+  std::uniform_int_distribution<int> dist;\n+  std::vector<counter_type> values;\n+  values.reserve(nb_values);\n+  for (std::size_t i = 0; i != nb_values; ++i)\n+    values.push_back(dist(dev));\n+\n+  std::make_heap(values.begin(), values.end());\n+\n+  counter_type::reset();\n+\n+  std::pop_heap(values.begin(), values.end());\n+\n+  VERIFY( counter_type::less_compare_count <= 2.0 * std::log(nb_values) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "90c445710cce7e0d2f4daa703b8a92c6c9cfd7c8", "filename": "libstdc++-v3/testsuite/25_algorithms/push_heap/complexity.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpush_heap%2Fcomplexity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpush_heap%2Fcomplexity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpush_heap%2Fcomplexity.cc?ref=43ee3d5f44979ff11db5e9fa27d101f4b3363dc6", "patch": "@@ -0,0 +1,54 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <cmath>\n+#include <random>\n+#include <vector>\n+#include <algorithm>\n+\n+#include <testsuite_counter_type.h>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using __gnu_test::counter_type;\n+  const std::size_t nb_values = 1000;\n+\n+  std::random_device dev;\n+  std::uniform_int_distribution<int> dist;\n+  std::vector<counter_type> values;\n+  values.reserve(nb_values);\n+  for (std::size_t i = 0; i != nb_values; ++i)\n+    values.push_back(dist(dev));\n+\n+  std::make_heap(values.begin(), values.end());\n+  values.push_back(dist(dev));\n+\n+  counter_type::reset();\n+\n+  std::push_heap(values.begin(), values.end());\n+\n+  VERIFY( counter_type::less_compare_count <= std::log(values.size()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b847e279aec6a5aba5e91ec24ca24631d0959bb4", "filename": "libstdc++-v3/testsuite/25_algorithms/sort_heap/complexity.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort_heap%2Fcomplexity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort_heap%2Fcomplexity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort_heap%2Fcomplexity.cc?ref=43ee3d5f44979ff11db5e9fa27d101f4b3363dc6", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <cmath>\n+#include <random>\n+#include <vector>\n+#include <algorithm>\n+\n+#include <testsuite_counter_type.h>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using __gnu_test::counter_type;\n+  const std::size_t nb_values = 1000;\n+\n+  std::random_device dev;\n+  std::uniform_int_distribution<int> dist;\n+  std::vector<counter_type> values;\n+  values.reserve(nb_values);\n+  for (std::size_t i = 0; i != nb_values; ++i)\n+    values.push_back(dist(dev));\n+\n+  std::make_heap(values.begin(), values.end());\n+\n+  counter_type::reset();\n+\n+  std::sort_heap(values.begin(), values.end());\n+\n+  VERIFY( counter_type::less_compare_count <= 2.0 * nb_values * std::log(nb_values) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "157ab257f899f7ac2d8f1686d10f087296dc446b", "filename": "libstdc++-v3/testsuite/util/testsuite_counter_type.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_counter_type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ee3d5f44979ff11db5e9fa27d101f4b3363dc6/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_counter_type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_counter_type.h?ref=43ee3d5f44979ff11db5e9fa27d101f4b3363dc6", "patch": "@@ -95,7 +95,10 @@ namespace __gnu_test\n     { return val == rhs.val; }\n \n     bool operator<(const counter_type& rhs) const\n-    { return val < rhs.val; }\n+    {\n+      ++less_compare_count;\n+      return val < rhs.val;\n+    }\n   };\n \n   int counter_type::default_count = 0;"}]}