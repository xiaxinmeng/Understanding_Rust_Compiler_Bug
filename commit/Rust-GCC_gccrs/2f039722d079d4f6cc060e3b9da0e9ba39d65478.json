{"sha": "2f039722d079d4f6cc060e3b9da0e9ba39d65478", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYwMzk3MjJkMDc5ZDRmNmNjMDYwZTNiOWRhMGU5YmEzOWQ2NTQ3OA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-09T20:38:06Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-09T20:38:06Z"}, "message": "2018-10-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_list.h\n\t(_List_operator<>::operator==): Replace member function with inline\n\tfriend.\n\t(_List_operator<>::operator!=): Likewise.\n\t(_List_const_operator<>::operator==): Likewise.\n\t(_List_const_operator<>::operator!=): Likewise.\n\t(operator==(const _List_iterator<>&, const _List_const_iterator<>&)):\n\tRemove.\n\t(operator!=(const _List_iterator<>&, const _List_const_iterator<>&)):\n\tRemove.\n\nFrom-SVN: r264993", "tree": {"sha": "70b18b580091a2b5d3b6d57fb247304e5b330f5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70b18b580091a2b5d3b6d57fb247304e5b330f5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f039722d079d4f6cc060e3b9da0e9ba39d65478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f039722d079d4f6cc060e3b9da0e9ba39d65478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f039722d079d4f6cc060e3b9da0e9ba39d65478", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f039722d079d4f6cc060e3b9da0e9ba39d65478/comments", "author": null, "committer": null, "parents": [{"sha": "6cb877be49d68f2d626681f033e9dc7af3628f96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb877be49d68f2d626681f033e9dc7af3628f96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cb877be49d68f2d626681f033e9dc7af3628f96"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "5b0880fe62fcf068b7ba83eb51295e98c03a9c82", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f039722d079d4f6cc060e3b9da0e9ba39d65478/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f039722d079d4f6cc060e3b9da0e9ba39d65478/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2f039722d079d4f6cc060e3b9da0e9ba39d65478", "patch": "@@ -1,3 +1,16 @@\n+2018-10-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_list.h\n+\t(_List_operator<>::operator==): Replace member function with inline\n+\tfriend.\n+\t(_List_operator<>::operator!=): Likewise.\n+\t(_List_const_operator<>::operator==): Likewise.\n+\t(_List_const_operator<>::operator!=): Likewise.\n+\t(operator==(const _List_iterator<>&, const _List_const_iterator<>&)):\n+\tRemove.\n+\t(operator!=(const _List_iterator<>&, const _List_const_iterator<>&)):\n+\tRemove.\n+\n 2018-10-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/stringfwd.h (string, wstring, u16string, u32string):"}, {"sha": "3544981698cc7ca4091dab4152e06faef9301ec9", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f039722d079d4f6cc060e3b9da0e9ba39d65478/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f039722d079d4f6cc060e3b9da0e9ba39d65478/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=2f039722d079d4f6cc060e3b9da0e9ba39d65478", "patch": "@@ -243,13 +243,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn __tmp;\n       }\n \n-      bool\n-      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT\n-      { return _M_node == __x._M_node; }\n+      friend bool\n+      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      { return __x._M_node == __y._M_node; }\n \n-      bool\n-      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT\n-      { return _M_node != __x._M_node; }\n+      friend bool\n+      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      { return __x._M_node != __y._M_node; }\n \n       // The only member points to the %list element.\n       __detail::_List_node_base* _M_node;\n@@ -327,30 +327,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn __tmp;\n       }\n \n-      bool\n-      operator==(const _Self& __x) const _GLIBCXX_NOEXCEPT\n-      { return _M_node == __x._M_node; }\n+      friend bool\n+      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      { return __x._M_node == __y._M_node; }\n \n-      bool\n-      operator!=(const _Self& __x) const _GLIBCXX_NOEXCEPT\n-      { return _M_node != __x._M_node; }\n+      friend bool\n+      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      { return __x._M_node != __y._M_node; }\n \n       // The only member points to the %list element.\n       const __detail::_List_node_base* _M_node;\n     };\n \n-  template<typename _Val>\n-    inline bool\n-    operator==(const _List_iterator<_Val>& __x,\n-\t       const _List_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT\n-    { return __x._M_node == __y._M_node; }\n-\n-  template<typename _Val>\n-    inline bool\n-    operator!=(const _List_iterator<_Val>& __x,\n-\t       const _List_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT\n-    { return __x._M_node != __y._M_node; }\n-\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   /// See bits/stl_deque.h's _Deque_base for an explanation.\n   template<typename _Tp, typename _Alloc>"}]}