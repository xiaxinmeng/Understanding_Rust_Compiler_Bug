{"sha": "49e538820819657de6ac5e37449f96e5081a7b30", "node_id": "C_kwDOANBUbNoAKDQ5ZTUzODgyMDgxOTY1N2RlNmFjNWUzNzQ0OWY5NmU1MDgxYTdiMzA", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-10T06:50:17Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T10:31:43Z"}, "message": "RISC-V: Add vssra.vv C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vssra_vv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vssra_vv_tumu-3.C: New test.", "tree": {"sha": "145c8a40d3321dd69c1029c2a267037d7bf14835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/145c8a40d3321dd69c1029c2a267037d7bf14835"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49e538820819657de6ac5e37449f96e5081a7b30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e538820819657de6ac5e37449f96e5081a7b30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e538820819657de6ac5e37449f96e5081a7b30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e538820819657de6ac5e37449f96e5081a7b30/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7326a694da987a025f7491046c2489836f886a41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7326a694da987a025f7491046c2489836f886a41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7326a694da987a025f7491046c2489836f886a41"}], "stats": {"total": 2862, "additions": 2862, "deletions": 0}, "files": [{"sha": "0664da7ffe8a62a5c1b3f9117fffa1ae264ff87c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv-1.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv-1.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra(vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra(vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra(vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra(vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra(vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra(vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra(vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra(vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra(vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra(vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra(vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra(vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra(vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra(vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra(vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra(vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra(vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra(vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra(vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra(vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra(vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra(vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vssra(vbool64_t mask,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra(vbool32_t mask,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra(vbool16_t mask,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra(vbool8_t mask,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra(vbool4_t mask,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra(vbool2_t mask,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra(vbool1_t mask,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra(vbool64_t mask,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra(vbool32_t mask,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra(vbool16_t mask,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra(vbool8_t mask,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra(vbool4_t mask,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra(vbool2_t mask,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra(vbool64_t mask,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra(vbool32_t mask,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra(vbool16_t mask,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra(vbool8_t mask,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra(vbool4_t mask,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra(vbool64_t mask,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra(vbool32_t mask,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra(vbool16_t mask,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra(vbool8_t mask,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "4d8fa5f336e19375d2114ff3baf839e78bf11557", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv-2.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv-2.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra(vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra(vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra(vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra(vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra(vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra(vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra(vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra(vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra(vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra(vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra(vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra(vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra(vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra(vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra(vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra(vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra(vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra(vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra(vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra(vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra(vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra(vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vssra(vbool64_t mask,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra(vbool32_t mask,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra(vbool16_t mask,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra(vbool8_t mask,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra(vbool4_t mask,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra(vbool2_t mask,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra(vbool1_t mask,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra(vbool64_t mask,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra(vbool32_t mask,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra(vbool16_t mask,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra(vbool8_t mask,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra(vbool4_t mask,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra(vbool2_t mask,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra(vbool64_t mask,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra(vbool32_t mask,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra(vbool16_t mask,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra(vbool8_t mask,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra(vbool4_t mask,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra(vbool64_t mask,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra(vbool32_t mask,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra(vbool16_t mask,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra(vbool8_t mask,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "dbb90f7a004cca46433250d0f1bcf672e11d34b8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv-3.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv-3.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra(vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra(vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra(vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra(vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra(vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra(vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra(vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra(vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra(vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra(vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra(vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra(vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra(vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra(vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra(vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra(vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra(vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra(vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra(vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra(vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra(vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra(vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(op1,shift,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vssra(vbool64_t mask,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra(vbool32_t mask,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra(vbool16_t mask,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra(vbool8_t mask,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra(vbool4_t mask,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra(vbool2_t mask,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra(vbool1_t mask,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra(vbool64_t mask,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra(vbool32_t mask,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra(vbool16_t mask,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra(vbool8_t mask,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra(vbool4_t mask,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra(vbool2_t mask,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra(vbool64_t mask,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra(vbool32_t mask,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra(vbool16_t mask,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra(vbool8_t mask,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra(vbool4_t mask,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra(vbool64_t mask,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra(vbool32_t mask,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra(vbool16_t mask,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra(vbool8_t mask,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "71e2f3b78bfdd2cfb4ae9e1a6c432296e6916d2c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv_mu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_mu-1.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "7957da55e6bc130d516634049fc83e705f399624", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv_mu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_mu-2.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "e858ec182589ce684f8eb89c42e2d39f1c14bbad", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv_mu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_mu-3.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "add5c08217ffec92529c305179bc1d353e33ccb3", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv_tu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tu-1.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tu(vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tu(vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tu(vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tu(vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tu(vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tu(vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tu(vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tu(vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tu(vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tu(vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tu(vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tu(vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tu(vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tu(vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tu(vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tu(vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tu(vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tu(vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tu(vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tu(vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tu(vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tu(vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "53c22580fbaa740550cbd631982bdc6a4b6ee57e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv_tu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tu-2.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tu(vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tu(vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tu(vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tu(vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tu(vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tu(vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tu(vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tu(vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tu(vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tu(vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tu(vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tu(vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tu(vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tu(vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tu(vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tu(vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tu(vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tu(vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tu(vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tu(vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tu(vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tu(vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "46bbada480265c11ec05804574a239c64569fcd5", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv_tu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tu-3.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tu(vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tu(vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tu(vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tu(vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tu(vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tu(vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tu(vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tu(vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tu(vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tu(vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tu(vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tu(vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tu(vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tu(vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tu(vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tu(vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tu(vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tu(vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tu(vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tu(vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tu(vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tu(vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "0201b2022522f510a5c5b1574076e61d1063dc5b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv_tum-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tum-1.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "61d23a013db0bc7f612c5dbbc2b17b52384b6de7", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv_tum-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tum-2.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "9bf698c06659700da3d13b8b7143662d8edb2f99", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv_tum-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tum-3.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "dfd91756b34df1979876acf8de2cce1c2d0d3ed2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv_tumu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tumu-1.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "4d2758ff2491b28b60b826f804c2749afbf7d121", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv_tumu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tumu-2.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "f9ad6f174c9a83059d5c4155d622b29584058b56", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vssra_vv_tumu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49e538820819657de6ac5e37449f96e5081a7b30/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvssra_vv_tumu-3.C?ref=49e538820819657de6ac5e37449f96e5081a7b30", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vssra_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vssra_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vssra_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vssra_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vssra_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vssra_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vssra_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vssra_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vssra_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vssra_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vssra_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vssra_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vssra_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vssra_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vssra_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vssra_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vssra_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vssra_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vssra_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vssra_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vssra_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vssra_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vssra_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vssra\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}]}